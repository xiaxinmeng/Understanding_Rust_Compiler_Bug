{"sha": "076bbec1c8e8be10079027f6519702275ce5f445", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDc2YmJlYzFjOGU4YmUxMDA3OTAyN2Y2NTE5NzAyMjc1Y2U1ZjQ0NQ==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2018-11-14T11:42:49Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-11-14T11:42:49Z"}, "message": "[Ada] Problem with boundary case of XOR operation and unnesting\n\nThe XOR operation applied to a boolean array whose component type has\nthe range True .. True raises constraint error. Previous to this patch,\nthe expansion of the operation could lead to uplevel references that\nwere not handled properly when unnesting is in effect.\n\n2018-11-14  Ed Schonberg  <schonberg@adacore.com>\n\ngcc/ada/\n\n\t* exp_util.ads, exp_util.adb: Change the profile of\n\tSilly_Boolean_Array_Xor_Test, adding a formal that can be a copy\n\tof the right opersnd. This prevents unnesting anomalies when\n\tthat operand contains uplevel references.\n\t* exp_ch4.adb (Expand_Boolean_Operation): Use this new profile.\n\t* exp_pakd.adb (Expand_Packed_Boolean_Operator): Ditto.\n\nFrom-SVN: r266137", "tree": {"sha": "746d012c47f50c8b65bb1c673a53d322cf363b29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/746d012c47f50c8b65bb1c673a53d322cf363b29"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/076bbec1c8e8be10079027f6519702275ce5f445", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/076bbec1c8e8be10079027f6519702275ce5f445", "html_url": "https://github.com/Rust-GCC/gccrs/commit/076bbec1c8e8be10079027f6519702275ce5f445", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/076bbec1c8e8be10079027f6519702275ce5f445/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9989a43983116c05aca5c3b5fc30191524b73b94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9989a43983116c05aca5c3b5fc30191524b73b94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9989a43983116c05aca5c3b5fc30191524b73b94"}], "stats": {"total": 54, "additions": 41, "deletions": 13}, "files": [{"sha": "d6004111e65f382644ba8268992123bb31f1b05b", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/076bbec1c8e8be10079027f6519702275ce5f445/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/076bbec1c8e8be10079027f6519702275ce5f445/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=076bbec1c8e8be10079027f6519702275ce5f445", "patch": "@@ -1,3 +1,12 @@\n+2018-11-14  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_util.ads, exp_util.adb: Change the profile of\n+\tSilly_Boolean_Array_Xor_Test, adding a formal that can be a copy\n+\tof the right opersnd. This prevents unnesting anomalies when\n+\tthat operand contains uplevel references.\n+\t* exp_ch4.adb (Expand_Boolean_Operation): Use this new profile.\n+\t* exp_pakd.adb (Expand_Packed_Boolean_Operator): Ditto.\n+\n 2018-11-14  Patrick Bernardi  <bernardi@adacore.com>\n \n \t* libgnarl/a-intnam__linux.ads: Add SIGSYS."}, {"sha": "9cf2d3e410b7d18a88af5c0cbf27e7039c50cf3a", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/076bbec1c8e8be10079027f6519702275ce5f445/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/076bbec1c8e8be10079027f6519702275ce5f445/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=076bbec1c8e8be10079027f6519702275ce5f445", "patch": "@@ -2031,7 +2031,7 @@ package body Exp_Ch4 is\n       declare\n          Loc       : constant Source_Ptr := Sloc (N);\n          L         : constant Node_Id    := Relocate_Node (Left_Opnd  (N));\n-         R         : constant Node_Id    := Relocate_Node (Right_Opnd (N));\n+         R         : Node_Id             := Relocate_Node (Right_Opnd (N));\n          Func_Body : Node_Id;\n          Func_Name : Entity_Id;\n \n@@ -2043,7 +2043,8 @@ package body Exp_Ch4 is\n          Apply_Length_Check (R, Etype (L));\n \n          if Nkind (N) = N_Op_Xor then\n-            Silly_Boolean_Array_Xor_Test (N, Etype (L));\n+            R := Duplicate_Subexpr (R);\n+            Silly_Boolean_Array_Xor_Test (N, R, Etype (L));\n          end if;\n \n          if Nkind (Parent (N)) = N_Assignment_Statement"}, {"sha": "632c3bd6350eead4b88ce390c93ad0a7304bfd9b", "filename": "gcc/ada/exp_pakd.adb", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/076bbec1c8e8be10079027f6519702275ce5f445/gcc%2Fada%2Fexp_pakd.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/076bbec1c8e8be10079027f6519702275ce5f445/gcc%2Fada%2Fexp_pakd.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_pakd.adb?ref=076bbec1c8e8be10079027f6519702275ce5f445", "patch": "@@ -1506,7 +1506,7 @@ package body Exp_Pakd is\n       Loc : constant Source_Ptr := Sloc (N);\n       Typ : constant Entity_Id  := Etype (N);\n       L   : constant Node_Id    := Relocate_Node (Left_Opnd  (N));\n-      R   : constant Node_Id    := Relocate_Node (Right_Opnd (N));\n+      R   :          Node_Id    := Relocate_Node (Right_Opnd (N));\n \n       Ltyp : Entity_Id;\n       Rtyp : Entity_Id;\n@@ -1528,7 +1528,8 @@ package body Exp_Pakd is\n       --  True .. True where an exception must be raised.\n \n       if Nkind (N) = N_Op_Xor then\n-         Silly_Boolean_Array_Xor_Test (N, Rtyp);\n+         R := Duplicate_Subexpr (R);\n+         Silly_Boolean_Array_Xor_Test (N, R, Rtyp);\n       end if;\n \n       --  Now that that silliness is taken care of, get packed array type"}, {"sha": "b5338d4deb2c49ae5e1c9ae18ad40fc9f529e44c", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/076bbec1c8e8be10079027f6519702275ce5f445/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/076bbec1c8e8be10079027f6519702275ce5f445/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=076bbec1c8e8be10079027f6519702275ce5f445", "patch": "@@ -7062,7 +7062,6 @@ package body Exp_Util is\n                | N_Procedure_Instantiation\n                | N_Protected_Body\n                | N_Protected_Body_Stub\n-               | N_Protected_Type_Declaration\n                | N_Single_Task_Declaration\n                | N_Subprogram_Body\n                | N_Subprogram_Body_Stub\n@@ -7071,7 +7070,6 @@ package body Exp_Util is\n                | N_Subtype_Declaration\n                | N_Task_Body\n                | N_Task_Body_Stub\n-               | N_Task_Type_Declaration\n \n                --  Use clauses can appear in lists of declarations\n \n@@ -7135,6 +7133,21 @@ package body Exp_Util is\n                   return;\n                end if;\n \n+            --  the expansion of Task and protected type declarations can\n+            --  create declarations for temporaries which, like other actions\n+            --  are inserted and analyzed before the current declaraation.\n+            --  However, the current scope is the synchronized type, and\n+            --  for unnesting it is critical that the proper scope for these\n+            --  generated entities be the enclosing one.\n+\n+            when N_Task_Type_Declaration\n+               | N_Protected_Type_Declaration =>\n+\n+               Push_Scope (Scope (Current_Scope));\n+               Insert_List_Before_And_Analyze (P, Ins_Actions);\n+               Pop_Scope;\n+               return;\n+\n             --  A special case, N_Raise_xxx_Error can act either as a statement\n             --  or a subexpression. We tell the difference by looking at the\n             --  Etype. It is set to Standard_Void_Type in the statement case.\n@@ -13400,7 +13413,8 @@ package body Exp_Util is\n    --  required for the case of False .. False, since False xor False = False.\n    --  See also Silly_Boolean_Array_Not_Test\n \n-   procedure Silly_Boolean_Array_Xor_Test (N : Node_Id; T : Entity_Id) is\n+   procedure Silly_Boolean_Array_Xor_Test\n+     (N : Node_Id; R : Node_Id;  T : Entity_Id) is\n       Loc : constant Source_Ptr := Sloc (N);\n       CT  : constant Entity_Id  := Component_Type (T);\n \n@@ -13435,7 +13449,7 @@ package body Exp_Util is\n                         Prefix         => New_Occurrence_Of (CT, Loc),\n                         Attribute_Name => Name_Last))),\n \n-              Right_Opnd => Make_Non_Empty_Check (Loc, Right_Opnd (N))),\n+              Right_Opnd => Make_Non_Empty_Check (Loc, R)),\n           Reason => CE_Range_Check_Failed));\n    end Silly_Boolean_Array_Xor_Test;\n "}, {"sha": "9b76ef88a2d5bf6516762e3ff0aad5766ec25436", "filename": "gcc/ada/exp_util.ads", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/076bbec1c8e8be10079027f6519702275ce5f445/gcc%2Fada%2Fexp_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/076bbec1c8e8be10079027f6519702275ce5f445/gcc%2Fada%2Fexp_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.ads?ref=076bbec1c8e8be10079027f6519702275ce5f445", "patch": "@@ -1140,11 +1140,14 @@ package Exp_Util is\n    --  the boolean array is False..False or True..True, where it is required\n    --  that a Constraint_Error exception be raised (RM 4.5.6(6)).\n \n-   procedure Silly_Boolean_Array_Xor_Test (N : Node_Id; T : Entity_Id);\n-   --  N is the node for a boolean array XOR operation, and T is the type of\n-   --  the array. This routine deals with the silly case where the subtype of\n-   --  the boolean array is True..True, where a raise of a Constraint_Error\n-   --  exception is required (RM 4.5.6(6)).\n+   procedure Silly_Boolean_Array_Xor_Test\n+     (N : Node_Id; R : Node_Id;  T : Entity_Id);\n+   --  N is the node for a boolean array XOR operation, T is the type of the\n+   --  array, and R is a copy of the right operand of N, required to prevent\n+   --  scope anomalies when unnesting is in effect. This routine deals with\n+   --  the admitedly silly case where the subtype of the boolean array is\n+   --  True..True, where a raise of a Constraint_Error exception is required\n+   --  (RM 4.5.6(6)) and ACATS-tested.\n \n    function Target_Has_Fixed_Ops\n      (Left_Typ   : Entity_Id;"}]}