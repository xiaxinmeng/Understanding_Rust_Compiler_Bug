{"sha": "b7ddd3f14f3a5f3b9023b2b360c05c6426f37500", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjdkZGQzZjE0ZjNhNWYzYjkwMjNiMmIzNjBjMDVjNjQyNmYzNzUwMA==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2015-10-27T18:03:18Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2015-10-27T18:03:18Z"}, "message": "re PR fortran/67933 (ICE for array of a derived type with allocatable class in derived type object)\n\n2015-01-27  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/67933\n\t* gfortran.dg/allocate_with_source_15.f03: New test\n\nFrom-SVN: r229452", "tree": {"sha": "54b38dd46ae79e404d9a62ab2cd963eebee30ac3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/54b38dd46ae79e404d9a62ab2cd963eebee30ac3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b7ddd3f14f3a5f3b9023b2b360c05c6426f37500", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7ddd3f14f3a5f3b9023b2b360c05c6426f37500", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7ddd3f14f3a5f3b9023b2b360c05c6426f37500", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7ddd3f14f3a5f3b9023b2b360c05c6426f37500/comments", "author": null, "committer": null, "parents": [{"sha": "33497fd242760dcd0db7f69596a0aec21c735b35", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33497fd242760dcd0db7f69596a0aec21c735b35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33497fd242760dcd0db7f69596a0aec21c735b35"}], "stats": {"total": 84, "additions": 84, "deletions": 0}, "files": [{"sha": "230581c6e9ad357eb7701e22967027587a44055c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7ddd3f14f3a5f3b9023b2b360c05c6426f37500/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7ddd3f14f3a5f3b9023b2b360c05c6426f37500/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b7ddd3f14f3a5f3b9023b2b360c05c6426f37500", "patch": "@@ -1,3 +1,8 @@\n+2015-01-27  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/67933\n+\t* gfortran.dg/allocate_with_source_15.f03: New test\n+\n 2015-10-27  Thomas Schwinge  <thomas@codesourcery.com>\n \t    James Norris  <jnorris@codesourcery.com>\n "}, {"sha": "38f9cec355c0add41d80870b352ebdf1a6b0a825", "filename": "gcc/testsuite/gfortran.dg/allocate_with_source_15.f03", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7ddd3f14f3a5f3b9023b2b360c05c6426f37500/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_source_15.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7ddd3f14f3a5f3b9023b2b360c05c6426f37500/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_source_15.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_source_15.f03?ref=b7ddd3f14f3a5f3b9023b2b360c05c6426f37500", "patch": "@@ -0,0 +1,79 @@\n+! { dg-do run }\n+!\n+! Tests the fix for PR67933, which was a side effect of the fix for PR67171.\n+!\n+! Contributed by Andrew  <mandrew9@vt.edu>\n+!\n+module test_mod\n+  implicit none\n+\n+  type :: class_t\n+    integer :: i\n+  end type class_t\n+\n+  type, extends(class_t) :: class_e\n+    real :: r\n+  end type class_e\n+\n+  type :: wrapper_t\n+    class(class_t), allocatable  :: class_var\n+!    type(class_t), allocatable  :: class_var\n+!    integer,       allocatable  :: class_id\n+  end type wrapper_t\n+\n+  type :: list_t\n+    type(wrapper_t) :: classes(10)\n+  contains\n+    procedure :: Method\n+    procedure :: Typeme\n+    procedure :: Dealloc\n+  end type list_t\n+\n+contains\n+  subroutine Method(this)\n+    class(list_t) :: this\n+    integer :: i\n+    do i = 1, 20\n+      if (i .gt. 10) then\n+        allocate (this%classes(i)%class_var, source = class_t (i))\n+      else\n+        allocate (this%classes(i)%class_var, source = class_e (i, real (2 * i)))\n+      end if\n+    end do\n+  end subroutine Method\n+  subroutine Dealloc(this)\n+    class(list_t) :: this\n+    integer :: i\n+    do i = 1, 20\n+      if (allocated (this%classes(i)%class_var)) &\n+         deallocate (this%classes(i)%class_var)\n+    end do\n+  end subroutine Dealloc\n+  subroutine Typeme(this)\n+    class(list_t) :: this\n+    integer :: i, j(20)\n+    real :: r(20)\n+    real :: zero = 0.0\n+    do i = 1, 20\n+      j(i) = this%classes(i)%class_var%i\n+      select type (p => this%classes(i)%class_var)\n+        type is (class_e)\n+          r(i) = p%r\n+        class default\n+          r(i) = zero\n+      end select\n+    end do\n+!    print \"(10i6,/)\", j\n+    if (any (j .ne. [(i, i = 1,20)])) call abort\n+!    print \"(10f6.2,/)\", r\n+    if (any (r(1:10) .ne. [(real (2 * i), i = 1,10)])) call abort\n+    if (any (r(11:20) .ne. zero)) call abort\n+  end subroutine Typeme\n+end module test_mod\n+\n+  use test_mod\n+  type(list_t) :: x\n+  call x%Method\n+  call x%Typeme\n+  call x%dealloc\n+end"}]}