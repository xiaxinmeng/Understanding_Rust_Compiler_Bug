{"sha": "ed42adef4426b71f8f8fecac981a19c29335d454", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWQ0MmFkZWY0NDI2YjcxZjhmOGZlY2FjOTgxYTE5YzI5MzM1ZDQ1NA==", "commit": {"author": {"name": "Daniel Kraft", "email": "d@domob.eu", "date": "2008-10-12T10:51:11Z"}, "committer": {"name": "Daniel Kraft", "email": "domob@gcc.gnu.org", "date": "2008-10-12T10:51:11Z"}, "message": "re PR fortran/37688 (Relax \"Symbol is used before it is typed\" checking)\n\n2008-10-12  Daniel Kraft  <d@domob.eu>\n\n\tPR fortran/37688\n\t* expr.c (gfc_expr_check_typed): Extend permission of untyped\n\texpressions to both top-level variable and basic arithmetic expressions.\n\n2008-10-12  Daniel Kraft  <d@domob.eu>\n\n\tPR fortran/37688\n\t* gfortran.dg/used_before_typed_6.f90: New test.\n\nFrom-SVN: r141074", "tree": {"sha": "23031fbbfc7aa96f18536b69167a41bc34e0561a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/23031fbbfc7aa96f18536b69167a41bc34e0561a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed42adef4426b71f8f8fecac981a19c29335d454", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed42adef4426b71f8f8fecac981a19c29335d454", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed42adef4426b71f8f8fecac981a19c29335d454", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed42adef4426b71f8f8fecac981a19c29335d454/comments", "author": {"login": "domob1812", "id": 4943644, "node_id": "MDQ6VXNlcjQ5NDM2NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4943644?v=4", "gravatar_id": "", "url": "https://api.github.com/users/domob1812", "html_url": "https://github.com/domob1812", "followers_url": "https://api.github.com/users/domob1812/followers", "following_url": "https://api.github.com/users/domob1812/following{/other_user}", "gists_url": "https://api.github.com/users/domob1812/gists{/gist_id}", "starred_url": "https://api.github.com/users/domob1812/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/domob1812/subscriptions", "organizations_url": "https://api.github.com/users/domob1812/orgs", "repos_url": "https://api.github.com/users/domob1812/repos", "events_url": "https://api.github.com/users/domob1812/events{/privacy}", "received_events_url": "https://api.github.com/users/domob1812/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b803690ae11b1e540a5032aefd0a72c25231e795", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b803690ae11b1e540a5032aefd0a72c25231e795", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b803690ae11b1e540a5032aefd0a72c25231e795"}], "stats": {"total": 58, "additions": 54, "deletions": 4}, "files": [{"sha": "5bcfb6446ba3af4a7f193fbf8fed68f437efa23f", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed42adef4426b71f8f8fecac981a19c29335d454/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed42adef4426b71f8f8fecac981a19c29335d454/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=ed42adef4426b71f8f8fecac981a19c29335d454", "patch": "@@ -1,3 +1,9 @@\n+2008-10-12  Daniel Kraft  <d@domob.eu>\n+\n+\tPR fortran/37688\n+\t* expr.c (gfc_expr_check_typed): Extend permission of untyped\n+\texpressions to both top-level variable and basic arithmetic expressions.\n+\n 2008-10-12  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/37787"}, {"sha": "73f2c40a36c44b562a4da063025ae8dfb883ddb6", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed42adef4426b71f8f8fecac981a19c29335d454/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed42adef4426b71f8f8fecac981a19c29335d454/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=ed42adef4426b71f8f8fecac981a19c29335d454", "patch": "@@ -3429,9 +3429,11 @@ gfc_expr_set_symbols_referenced (gfc_expr *expr)\n \n /* Walk an expression tree and check each variable encountered for being typed.\n    If strict is not set, a top-level variable is tolerated untyped in -std=gnu\n-   mode; this is for things in legacy-code like:\n+   mode as is a basic arithmetic expression using those; this is for things in\n+   legacy-code like:\n \n      INTEGER :: arr(n), n\n+     INTEGER :: arr(n + 1), n\n \n    The namespace is needed for IMPLICIT typing.  */\n \n@@ -3458,9 +3460,26 @@ gfc_expr_check_typed (gfc_expr* e, gfc_namespace* ns, bool strict)\n {\n   bool error_found;\n \n-  /* If this is a top-level variable, do the check with strict given to us.  */\n-  if (!strict && e->expr_type == EXPR_VARIABLE && !e->ref)\n-    return gfc_check_symbol_typed (e->symtree->n.sym, ns, strict, e->where);\n+  /* If this is a top-level variable or EXPR_OP, do the check with strict given\n+     to us.  */\n+  if (!strict)\n+    {\n+      if (e->expr_type == EXPR_VARIABLE && !e->ref)\n+\treturn gfc_check_symbol_typed (e->symtree->n.sym, ns, strict, e->where);\n+\n+      if (e->expr_type == EXPR_OP)\n+\t{\n+\t  gfc_try t = SUCCESS;\n+\n+\t  gcc_assert (e->value.op.op1);\n+\t  t = gfc_expr_check_typed (e->value.op.op1, ns, strict);\n+\n+\t  if (t == SUCCESS && e->value.op.op2)\n+\t    t = gfc_expr_check_typed (e->value.op.op2, ns, strict);\n+\n+\t  return t;\n+\t}\n+    }\n \n   /* Otherwise, walk the expression and do it strictly.  */\n   check_typed_ns = ns;"}, {"sha": "a3f773803bf59d44c7ec8c229f5aefa9b132bc80", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed42adef4426b71f8f8fecac981a19c29335d454/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed42adef4426b71f8f8fecac981a19c29335d454/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ed42adef4426b71f8f8fecac981a19c29335d454", "patch": "@@ -1,3 +1,8 @@\n+2008-10-12  Daniel Kraft  <d@domob.eu>\n+\n+\tPR fortran/37688\n+\t* gfortran.dg/used_before_typed_6.f90: New test.\n+\n 2008-10-12  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/37787"}, {"sha": "abcac8cf96dbbcb48245a2303104741dc1bd167c", "filename": "gcc/testsuite/gfortran.dg/used_before_typed_6.f90", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed42adef4426b71f8f8fecac981a19c29335d454/gcc%2Ftestsuite%2Fgfortran.dg%2Fused_before_typed_6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed42adef4426b71f8f8fecac981a19c29335d454/gcc%2Ftestsuite%2Fgfortran.dg%2Fused_before_typed_6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fused_before_typed_6.f90?ref=ed42adef4426b71f8f8fecac981a19c29335d454", "patch": "@@ -0,0 +1,20 @@\n+! { dg-do compile }\n+! { dg-options \"-std=gnu\" }\n+\n+! Allow legacy code to work even if not only a single symbol is used as\n+! expression but a basic arithmetic expression.\n+\n+SUBROUTINE test (n, m)\n+  IMPLICIT NONE\n+\n+  ! These should go fine.\n+  INTEGER :: arr1(n + 1) ! { dg-bogus \"used before it is typed\" }\n+  INTEGER :: arr2(n / (2 * m**5)) ! { dg-bogus \"used before it is typed\" }\n+\n+  ! These should fail for obvious reasons.\n+  INTEGER :: arr3(n * 1.1) ! { dg-error \"must be of INTEGER type\" }\n+  INTEGER :: arr4(REAL (m)) ! { dg-error \"used before it is typed\" }\n+  INTEGER :: arr5(SIN (m)) ! { dg-error \"used before it is typed\" }\n+\n+  INTEGER :: n, m\n+END SUBROUTINE test"}]}