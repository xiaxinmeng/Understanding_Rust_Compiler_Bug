{"sha": "c65110e44cc6aed93ee2e576d864e09a3bea59e3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzY1MTEwZTQ0Y2M2YWVkOTNlZTJlNTc2ZDg2NGUwOWEzYmVhNTllMw==", "commit": {"author": {"name": "Keith Seitz", "email": "keiths@redhat.com", "date": "2007-01-24T22:35:43Z"}, "committer": {"name": "Keith Seitz", "email": "kseitz@gcc.gnu.org", "date": "2007-01-24T22:35:43Z"}, "message": "* gnu/classpath/jdwp/natVMVirtualMachine.cc\n        (getAllClassMethods): Implement.\n\nFrom-SVN: r121142", "tree": {"sha": "874463166f6483e4843e88cde9edd85e028c874c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/874463166f6483e4843e88cde9edd85e028c874c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c65110e44cc6aed93ee2e576d864e09a3bea59e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c65110e44cc6aed93ee2e576d864e09a3bea59e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c65110e44cc6aed93ee2e576d864e09a3bea59e3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c65110e44cc6aed93ee2e576d864e09a3bea59e3/comments", "author": {"login": "shtiek", "id": 107581324, "node_id": "U_kgDOBmmPjA", "avatar_url": "https://avatars.githubusercontent.com/u/107581324?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shtiek", "html_url": "https://github.com/shtiek", "followers_url": "https://api.github.com/users/shtiek/followers", "following_url": "https://api.github.com/users/shtiek/following{/other_user}", "gists_url": "https://api.github.com/users/shtiek/gists{/gist_id}", "starred_url": "https://api.github.com/users/shtiek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shtiek/subscriptions", "organizations_url": "https://api.github.com/users/shtiek/orgs", "repos_url": "https://api.github.com/users/shtiek/repos", "events_url": "https://api.github.com/users/shtiek/events{/privacy}", "received_events_url": "https://api.github.com/users/shtiek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c3a7e886eec8b9e4362eaa72bef97597df579bdf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3a7e886eec8b9e4362eaa72bef97597df579bdf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3a7e886eec8b9e4362eaa72bef97597df579bdf"}], "stats": {"total": 39, "additions": 37, "deletions": 2}, "files": [{"sha": "a69d1da2021344b200769790d36622aed1f5042d", "filename": "libjava/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c65110e44cc6aed93ee2e576d864e09a3bea59e3/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c65110e44cc6aed93ee2e576d864e09a3bea59e3/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=c65110e44cc6aed93ee2e576d864e09a3bea59e3", "patch": "@@ -1,3 +1,8 @@\n+2007-01-24  Keith Seitz  <keiths@redhat.com>\n+\n+\t* gnu/classpath/jdwp/natVMVirtualMachine.cc\n+\t(getAllClassMethods): Implement.\n+\n 2007-01-24  Andrew Haley  <aph@redhat.com>\n \n \t* gnu/classpath/natVMStackWalker.cc: Call InitClass everywhere."}, {"sha": "afdfbc72cef98ceee14b82c5109fbbbf2ef5a7a2", "filename": "libjava/gnu/classpath/jdwp/natVMVirtualMachine.cc", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c65110e44cc6aed93ee2e576d864e09a3bea59e3/libjava%2Fgnu%2Fclasspath%2Fjdwp%2FnatVMVirtualMachine.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c65110e44cc6aed93ee2e576d864e09a3bea59e3/libjava%2Fgnu%2Fclasspath%2Fjdwp%2FnatVMVirtualMachine.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fclasspath%2Fjdwp%2FnatVMVirtualMachine.cc?ref=c65110e44cc6aed93ee2e576d864e09a3bea59e3", "patch": "@@ -301,9 +301,39 @@ getClassStatus (MAYBE_UNUSED jclass klass)\n \n JArray<gnu::classpath::jdwp::VMMethod *> *\n gnu::classpath::jdwp::VMVirtualMachine::\n-getAllClassMethods (MAYBE_UNUSED jclass klass)\n+getAllClassMethods (jclass klass)\n {\n-  return NULL;\n+  jint count;\n+  jmethodID *methods;\n+  jvmtiError err = _jdwp_jvmtiEnv->GetClassMethods (klass, &count, &methods);\n+  if (err != JVMTI_ERROR_NONE)\n+    {\n+      char *error;\n+      jstring msg;\n+      if (_jdwp_jvmtiEnv->GetErrorName (err, &error) != JVMTI_ERROR_NONE)\n+\t{\n+\t  msg = JvNewStringLatin1 (error);\n+\t  _jdwp_jvmtiEnv->Deallocate ((unsigned char *) error);\n+\t}\n+      else\n+\tmsg = JvNewStringLatin1 (\"out of memory\");\n+\n+      using namespace gnu::classpath::jdwp::exception;\n+      throw new JdwpInternalErrorException (msg);\n+    }\n+\n+  JArray<VMMethod *> *result\n+    = (JArray<VMMethod *> *) JvNewObjectArray (count,\n+\t\t\t\t\t       &VMMethod::class$, NULL);\n+  VMMethod **rmeth = elements (result);\n+  for (int i = 0; i < count; ++i)\n+    {\n+      jlong id = reinterpret_cast<jlong> (methods[i]);\n+      rmeth[i] = getClassMethod (klass, id);\n+    }\n+\n+  _jdwp_jvmtiEnv->Deallocate ((unsigned char *) methods);\n+  return result;\n }\n \n gnu::classpath::jdwp::VMMethod *"}]}