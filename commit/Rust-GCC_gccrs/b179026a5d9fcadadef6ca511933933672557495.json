{"sha": "b179026a5d9fcadadef6ca511933933672557495", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjE3OTAyNmE1ZDlmY2FkYWRlZjZjYTUxMTkzMzkzMzY3MjU1NzQ5NQ==", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2021-03-24T06:50:22Z"}, "committer": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2021-03-24T06:50:22Z"}, "message": "Fortran: Extend buffer, use snprintf to avoid overflows [PR99369]\n\ngcc/fortran/ChangeLog:\n\n\tPR fortran/99369\n\t* resolve.c (resolve_operator): Make 'msg' buffer larger\n\tand use snprintf.\n\ngcc/testsuite/ChangeLog:\n\n\tPR fortran/99369\n\t* gfortran.dg/longnames.f90: New test.", "tree": {"sha": "f49adba7f49a62c1f2229eee0807d7717d5595d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f49adba7f49a62c1f2229eee0807d7717d5595d1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b179026a5d9fcadadef6ca511933933672557495", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b179026a5d9fcadadef6ca511933933672557495", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b179026a5d9fcadadef6ca511933933672557495", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b179026a5d9fcadadef6ca511933933672557495/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf1f3168f474734400e7a97660d1e7dec664bca9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf1f3168f474734400e7a97660d1e7dec664bca9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf1f3168f474734400e7a97660d1e7dec664bca9"}], "stats": {"total": 174, "additions": 137, "deletions": 37}, "files": [{"sha": "1c9b0c5cb622f299a7387aa4cbbfd3399670961b", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 45, "deletions": 37, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b179026a5d9fcadadef6ca511933933672557495/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b179026a5d9fcadadef6ca511933933672557495/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=b179026a5d9fcadadef6ca511933933672557495", "patch": "@@ -3994,7 +3994,8 @@ static bool\n resolve_operator (gfc_expr *e)\n {\n   gfc_expr *op1, *op2;\n-  char msg[200];\n+  /* One error uses 3 names; additional space for wording (also via gettext). */\n+  char msg[3*GFC_MAX_SYMBOL_LEN + 1 + 50];\n   bool dual_locus_error;\n   bool t = true;\n \n@@ -4047,7 +4048,8 @@ resolve_operator (gfc_expr *e)\n   if ((op1 && op1->expr_type == EXPR_NULL)\n       || (op2 && op2->expr_type == EXPR_NULL))\n     {\n-      sprintf (msg, _(\"Invalid context for NULL() pointer at %%L\"));\n+      snprintf (msg, sizeof (msg),\n+\t\t_(\"Invalid context for NULL() pointer at %%L\"));\n       goto bad_op;\n     }\n \n@@ -4063,8 +4065,9 @@ resolve_operator (gfc_expr *e)\n \t  break;\n \t}\n \n-      sprintf (msg, _(\"Operand of unary numeric operator %%<%s%%> at %%L is %s\"),\n-\t       gfc_op2string (e->value.op.op), gfc_typename (e));\n+      snprintf (msg, sizeof (msg),\n+\t\t_(\"Operand of unary numeric operator %%<%s%%> at %%L is %s\"),\n+\t\tgfc_op2string (e->value.op.op), gfc_typename (e));\n       goto bad_op;\n \n     case INTRINSIC_PLUS:\n@@ -4079,14 +4082,14 @@ resolve_operator (gfc_expr *e)\n \t}\n \n       if (op1->ts.type == BT_DERIVED || op2->ts.type == BT_DERIVED)\n-\tsprintf (msg,\n-\t       _(\"Unexpected derived-type entities in binary intrinsic \"\n-\t\t \"numeric operator %%<%s%%> at %%L\"),\n+\tsnprintf (msg, sizeof (msg),\n+\t\t  _(\"Unexpected derived-type entities in binary intrinsic \"\n+\t\t  \"numeric operator %%<%s%%> at %%L\"),\n \t       gfc_op2string (e->value.op.op));\n       else\n-      \tsprintf (msg,\n-\t       _(\"Operands of binary numeric operator %%<%s%%> at %%L are %s/%s\"),\n-\t       gfc_op2string (e->value.op.op), gfc_typename (op1),\n+\tsnprintf (msg, sizeof(msg),\n+\t\t  _(\"Operands of binary numeric operator %%<%s%%> at %%L are %s/%s\"),\n+\t\t  gfc_op2string (e->value.op.op), gfc_typename (op1),\n \t       gfc_typename (op2));\n       goto bad_op;\n \n@@ -4099,9 +4102,9 @@ resolve_operator (gfc_expr *e)\n \t  break;\n \t}\n \n-      sprintf (msg,\n-\t       _(\"Operands of string concatenation operator at %%L are %s/%s\"),\n-\t       gfc_typename (op1), gfc_typename (op2));\n+      snprintf (msg, sizeof (msg),\n+\t\t_(\"Operands of string concatenation operator at %%L are %s/%s\"),\n+\t\tgfc_typename (op1), gfc_typename (op2));\n       goto bad_op;\n \n     case INTRINSIC_AND:\n@@ -4142,9 +4145,10 @@ resolve_operator (gfc_expr *e)\n \t  goto simplify_op;\n \t}\n \n-      sprintf (msg, _(\"Operands of logical operator %%<%s%%> at %%L are %s/%s\"),\n-\t       gfc_op2string (e->value.op.op), gfc_typename (op1),\n-\t       gfc_typename (op2));\n+      snprintf (msg, sizeof (msg),\n+\t\t_(\"Operands of logical operator %%<%s%%> at %%L are %s/%s\"),\n+\t\tgfc_op2string (e->value.op.op), gfc_typename (op1),\n+\t\tgfc_typename (op2));\n \n       goto bad_op;\n \n@@ -4165,8 +4169,8 @@ resolve_operator (gfc_expr *e)\n \t  break;\n \t}\n \n-      sprintf (msg, _(\"Operand of .not. operator at %%L is %s\"),\n-\t\t      gfc_typename (op1));\n+      snprintf (msg, sizeof (msg), _(\"Operand of .not. operator at %%L is %s\"),\n+\t\tgfc_typename (op1));\n       goto bad_op;\n \n     case INTRINSIC_GT:\n@@ -4276,16 +4280,16 @@ resolve_operator (gfc_expr *e)\n \t}\n \n       if (op1->ts.type == BT_LOGICAL && op2->ts.type == BT_LOGICAL)\n-\tsprintf (msg,\n-\t\t _(\"Logicals at %%L must be compared with %s instead of %s\"),\n-\t\t (e->value.op.op == INTRINSIC_EQ\n-\t\t  || e->value.op.op == INTRINSIC_EQ_OS)\n-\t\t ? \".eqv.\" : \".neqv.\", gfc_op2string (e->value.op.op));\n+\tsnprintf (msg, sizeof (msg),\n+\t\t  _(\"Logicals at %%L must be compared with %s instead of %s\"),\n+\t\t  (e->value.op.op == INTRINSIC_EQ\n+\t\t   || e->value.op.op == INTRINSIC_EQ_OS)\n+\t\t  ? \".eqv.\" : \".neqv.\", gfc_op2string (e->value.op.op));\n       else\n-\tsprintf (msg,\n-\t\t _(\"Operands of comparison operator %%<%s%%> at %%L are %s/%s\"),\n-\t\t gfc_op2string (e->value.op.op), gfc_typename (op1),\n-\t\t gfc_typename (op2));\n+\tsnprintf (msg, sizeof (msg),\n+\t\t  _(\"Operands of comparison operator %%<%s%%> at %%L are %s/%s\"),\n+\t\t  gfc_op2string (e->value.op.op), gfc_typename (op1),\n+\t\t  gfc_typename (op2));\n \n       goto bad_op;\n \n@@ -4296,19 +4300,23 @@ resolve_operator (gfc_expr *e)\n \t  const char *guessed;\n \t  guessed = lookup_uop_fuzzy (name, e->value.op.uop->ns->uop_root);\n \t  if (guessed)\n-\t    sprintf (msg, _(\"Unknown operator %%<%s%%> at %%L; did you mean '%s'?\"),\n-\t\tname, guessed);\n+\t    snprintf (msg, sizeof (msg),\n+\t\t      _(\"Unknown operator %%<%s%%> at %%L; did you mean '%s'?\"),\n+\t\t      name, guessed);\n \t  else\n-\t    sprintf (msg, _(\"Unknown operator %%<%s%%> at %%L\"), name);\n+\t    snprintf (msg, sizeof (msg), _(\"Unknown operator %%<%s%%> at %%L\"),\n+\t\t      name);\n \t}\n       else if (op2 == NULL)\n-\tsprintf (msg, _(\"Operand of user operator %%<%s%%> at %%L is %s\"),\n-\t\t e->value.op.uop->name, gfc_typename (op1));\n+\tsnprintf (msg, sizeof (msg),\n+\t\t  _(\"Operand of user operator %%<%s%%> at %%L is %s\"),\n+\t\t  e->value.op.uop->name, gfc_typename (op1));\n       else\n \t{\n-\t  sprintf (msg, _(\"Operands of user operator %%<%s%%> at %%L are %s/%s\"),\n-\t\t   e->value.op.uop->name, gfc_typename (op1),\n-\t\t   gfc_typename (op2));\n+\t  snprintf (msg, sizeof (msg),\n+\t\t    _(\"Operands of user operator %%<%s%%> at %%L are %s/%s\"),\n+\t\t    e->value.op.uop->name, gfc_typename (op1),\n+\t\t    gfc_typename (op2));\n \t  e->value.op.uop->op->sym->attr.referenced = 1;\n \t}\n \n@@ -4391,8 +4399,8 @@ resolve_operator (gfc_expr *e)\n \n \t      /* Try user-defined operators, and otherwise throw an error.  */\n \t      dual_locus_error = true;\n-\t      sprintf (msg,\n-\t\t       _(\"Inconsistent ranks for operator at %%L and %%L\"));\n+\t      snprintf (msg, sizeof (msg),\n+\t\t\t_(\"Inconsistent ranks for operator at %%L and %%L\"));\n \t      goto bad_op;\n \t    }\n \t}"}, {"sha": "046179ea2fbd3e7f04a236815026385d4d267d22", "filename": "gcc/testsuite/gfortran.dg/longnames.f90", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b179026a5d9fcadadef6ca511933933672557495/gcc%2Ftestsuite%2Fgfortran.dg%2Flongnames.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b179026a5d9fcadadef6ca511933933672557495/gcc%2Ftestsuite%2Fgfortran.dg%2Flongnames.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Flongnames.f90?ref=b179026a5d9fcadadef6ca511933933672557495", "patch": "@@ -0,0 +1,92 @@\n+! { dg-do compile }\n+!\n+! PR fortran/99369\n+!\n+! Contributed by G. Steinmetz\n+!\n+\n+module m1bcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabc\n+   type tabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabc\n+   end type\n+   interface operator (.oabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabc.)\n+      procedure fabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabc\n+   end interface\n+contains\n+   function fabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabc &\n+        (uabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabc, &\n+         vabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabc)\n+      type (tabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabc), intent(in) :: &\n+         uabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabc, &\n+         vabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabc\n+   end\n+end\n+subroutine p1\n+   use m1bcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabc\n+   type (tabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabc) :: &\n+      uabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabc, &\n+      vabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabc\n+   wabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabc = &\n+      uabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabc &\n+     .oabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabc. &\n+      vabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabc\n+end\n+\n+\n+module m2bcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabcd\n+   type tabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabcd\n+   end type\n+   interface operator (.oabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabcd.)\n+      procedure fabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabcd\n+   end interface\n+contains\n+   function fabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabcd &\n+        (uabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabcd, &\n+         vabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabcd)\n+      type (tabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabcd), intent(in) :: &\n+         uabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabcd, &\n+         vabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabcd\n+   end\n+end\n+subroutine p2\n+   use m2bcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabcd\n+   type (tabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabcd) :: &\n+      uabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabcd, &\n+      vabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabcd\n+   wabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabcd = &\n+      uabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabcd &\n+     .oabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabcd. &\n+      vabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabcd\n+end\n+\n+\n+module m3bcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzab\n+   type tabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzab\n+   end type\n+   interface operator (.oabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzab.)\n+      procedure fabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzab\n+   end interface\n+contains\n+   function fabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzab &\n+        (uabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzab, &\n+         vabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzab)\n+      type (tabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzab), intent(in) :: &\n+         uabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzab, &\n+         vabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzab\n+   end\n+end\n+subroutine p3\n+   use m3bcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzab\n+   type (tabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzab) :: &\n+      uabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzab, &\n+      vabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzab\n+   wabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzab = &\n+      uabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzab &\n+     .oabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzab. &\n+      vabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzabcdefgxyzab\n+end\n+\n+program main\n+  call p1\n+  call p2\n+  call p3\n+end"}]}