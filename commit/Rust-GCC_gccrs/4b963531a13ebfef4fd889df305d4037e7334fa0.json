{"sha": "4b963531a13ebfef4fd889df305d4037e7334fa0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGI5NjM1MzFhMTNlYmZlZjRmZDg4OWRmMzA1ZDQwMzdlNzMzNGZhMA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-11-20T11:02:25Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-11-20T11:02:25Z"}, "message": "[multiple changes]\n\n2014-11-20  Javier Miranda  <miranda@adacore.com>\n\n\t* sem_ch6.adb (Analyze_Function_Return): For functions returning\n\tan access to an interface add an implicit conversion to the target\n\ttype to force the displacement of the pointer to the object to\n\treference the secondary dispatch table.\n\t(Check_Anonymous_Return): Skip internally built functions which handle\n\tthe case of null access when locating the master of a task.\n\t* sem_res.adb (Valid_Conversion): Return true for internally\n\tgenerated conversions of access to interface types added to force\n\tthe displacement of the pointer to reference the corresponding\n\tdispatch table.\n\n2014-11-20  Pascal Obry  <obry@adacore.com>\n\n\t* adaint.c (add_handle): realloc with a size of +100.\n\nFrom-SVN: r217836", "tree": {"sha": "9428dc6c742c682b293dd262f11f213dd6ccc51b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9428dc6c742c682b293dd262f11f213dd6ccc51b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4b963531a13ebfef4fd889df305d4037e7334fa0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b963531a13ebfef4fd889df305d4037e7334fa0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b963531a13ebfef4fd889df305d4037e7334fa0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b963531a13ebfef4fd889df305d4037e7334fa0/comments", "author": null, "committer": null, "parents": [{"sha": "c05ba1f17969c3423e76bee3e863727c9cf28ca0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c05ba1f17969c3423e76bee3e863727c9cf28ca0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c05ba1f17969c3423e76bee3e863727c9cf28ca0"}], "stats": {"total": 66, "additions": 64, "deletions": 2}, "files": [{"sha": "c904bde40c6933c2cab63142dee61e9a48eba7a5", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b963531a13ebfef4fd889df305d4037e7334fa0/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b963531a13ebfef4fd889df305d4037e7334fa0/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=4b963531a13ebfef4fd889df305d4037e7334fa0", "patch": "@@ -1,3 +1,20 @@\n+2014-11-20  Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_ch6.adb (Analyze_Function_Return): For functions returning\n+\tan access to an interface add an implicit conversion to the target\n+\ttype to force the displacement of the pointer to the object to\n+\treference the secondary dispatch table.\n+\t(Check_Anonymous_Return): Skip internally built functions which handle\n+\tthe case of null access when locating the master of a task.\n+\t* sem_res.adb (Valid_Conversion): Return true for internally\n+\tgenerated conversions of access to interface types added to force\n+\tthe displacement of the pointer to reference the corresponding\n+\tdispatch table.\n+\n+2014-11-20  Pascal Obry  <obry@adacore.com>\n+\n+\t* adaint.c (add_handle): realloc with a size of +100.\n+\n 2014-11-20  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_res.adb (Make_Call_Into_Operator): In ASIS mode, propagate"}, {"sha": "cd3f11a3469d4a24dcc1a0d88e7b1ba6345b8eb7", "filename": "gcc/ada/adaint.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b963531a13ebfef4fd889df305d4037e7334fa0/gcc%2Fada%2Fadaint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b963531a13ebfef4fd889df305d4037e7334fa0/gcc%2Fada%2Fadaint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.c?ref=4b963531a13ebfef4fd889df305d4037e7334fa0", "patch": "@@ -2339,7 +2339,7 @@ add_handle (HANDLE h, int pid)\n \n   if (plist_length == plist_max_length)\n     {\n-      plist_max_length += 1000;\n+      plist_max_length += 100;\n       HANDLES_LIST =\n         (HANDLE *) xrealloc (HANDLES_LIST, sizeof (HANDLE) * plist_max_length);\n       PID_LIST ="}, {"sha": "723d4593cddd9dcb3d31e874e972d70681e33637", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b963531a13ebfef4fd889df305d4037e7334fa0/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b963531a13ebfef4fd889df305d4037e7334fa0/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=4b963531a13ebfef4fd889df305d4037e7334fa0", "patch": "@@ -901,7 +901,35 @@ package body Sem_Ch6 is\n                return;\n             end if;\n \n-            Analyze_And_Resolve (Expr, R_Type);\n+            Analyze (Expr);\n+\n+            --  Ada 2005 (AI-251): If the type of the returned object is\n+            --  an access to an interface type then we add an implicit type\n+            --  conversion to force the displacement of the \"this\" pointer to\n+            --  reference the secondary dispatch table. We cannot delay the\n+            --  generation of this implicit conversion until the expansion\n+            --  because in this case the type resolution changes the decoration\n+            --  of the expression node to match R_Type; by contrast, if the\n+            --  returned object is a class-wide interface type then it is too\n+            --  early to generate here the implicit conversion since the return\n+            --  statement may be rewritten by the expander into an extended\n+            --  return statement whose expansion takes care of adding the\n+            --  implicit type conversion to displace the pointer to the object.\n+\n+            if Expander_Active\n+              and then Serious_Errors_Detected = 0\n+              and then Is_Access_Type (R_Type)\n+              and then Nkind (Expr) /= N_Null\n+              and then Is_Interface (Designated_Type (R_Type))\n+              and then Is_Progenitor (Designated_Type (R_Type),\n+                                      Designated_Type (Etype (Expr)))\n+            then\n+               Rewrite (Expr,\n+                 Convert_To (R_Type, Relocate_Node (Expr)));\n+               Analyze (Expr);\n+            end if;\n+\n+            Resolve (Expr, R_Type);\n             Check_Limited_Return (Expr);\n          end if;\n \n@@ -2512,6 +2540,13 @@ package body Sem_Ch6 is\n          if Ekind (Scop) = E_Function\n            and then Ekind (Etype (Scop)) = E_Anonymous_Access_Type\n            and then not Is_Thunk (Scop)\n+\n+            --  Skip internally built functions which handle the case of\n+            --  a null access (see Expand_Interface_Conversion)\n+\n+           and then not (Is_Interface (Designated_Type (Etype (Scop)))\n+                           and then not Comes_From_Source (Parent (Scop)))\n+\n            and then (Has_Task (Designated_Type (Etype (Scop)))\n                       or else\n                        (Is_Class_Wide_Type (Designated_Type (Etype (Scop)))"}, {"sha": "24628bc2edfa8347459f2bbc21a3688e77265b45", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b963531a13ebfef4fd889df305d4037e7334fa0/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b963531a13ebfef4fd889df305d4037e7334fa0/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=4b963531a13ebfef4fd889df305d4037e7334fa0", "patch": "@@ -12047,6 +12047,16 @@ package body Sem_Res is\n             return Valid_Array_Conversion;\n          end if;\n \n+      --  Ada 2005 (AI-251): Internally generated conversions of access to\n+      --  interface types added to force the displacement of the pointer to\n+      --  reference the corresponding dispatch table.\n+\n+      elsif not Comes_From_Source (N)\n+         and then Is_Access_Type (Target_Type)\n+         and then Is_Interface (Designated_Type (Target_Type))\n+      then\n+         return True;\n+\n       --  Ada 2005 (AI-251): Anonymous access types where target references an\n       --  interface type.\n "}]}