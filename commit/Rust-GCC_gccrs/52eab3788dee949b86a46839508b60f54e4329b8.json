{"sha": "52eab3788dee949b86a46839508b60f54e4329b8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTJlYWIzNzg4ZGVlOTQ5Yjg2YTQ2ODM5NTA4YjYwZjU0ZTQzMjliOA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-11-13T12:14:57Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-11-13T12:14:57Z"}, "message": "re PR tree-optimization/68306 (ICE: in vectorizable_store, at tree-vect-stmts.c:5651)\n\n2015-11-13  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/68306\n\t* tree-vect-data-refs.c (verify_data_ref_alignment): Move\n\tloop related checks ...\n\t(vect_verify_datarefs_alignment): ... here.\n\t(vect_slp_analyze_and_verify_node_alignment): Compute and\n\tverify alignment of the single DR that it matters.\n\t* tree-vect-stmts.c (vectorizable_store): Add an assert.\n\t(vectorizable_load): Add a comment.\n\t* tree-vect-slp.c (vect_analyze_slp_cost_1): Fix DR used\n\tfor determining load cost.\n\n\t* gcc.dg/pr68306.c: Adjust.\n\t* gcc.dg/pr68306-2.c: New testcase.\n\t* gcc.dg/pr68306-3.c: Likewise.\n\nFrom-SVN: r230310", "tree": {"sha": "2a8632f5ed7d10cd5639e2b4da871bb2d57889e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2a8632f5ed7d10cd5639e2b4da871bb2d57889e2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/52eab3788dee949b86a46839508b60f54e4329b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52eab3788dee949b86a46839508b60f54e4329b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52eab3788dee949b86a46839508b60f54e4329b8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52eab3788dee949b86a46839508b60f54e4329b8/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e4af0bc4650f371dc553bccd03d5dfe2704bc660", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4af0bc4650f371dc553bccd03d5dfe2704bc660", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4af0bc4650f371dc553bccd03d5dfe2704bc660"}], "stats": {"total": 134, "additions": 94, "deletions": 40}, "files": [{"sha": "1b16e12fe8a153e82ec63b45f3b992f0d1a2ba46", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52eab3788dee949b86a46839508b60f54e4329b8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52eab3788dee949b86a46839508b60f54e4329b8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=52eab3788dee949b86a46839508b60f54e4329b8", "patch": "@@ -1,3 +1,16 @@\n+2015-11-13  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/68306\n+\t* tree-vect-data-refs.c (verify_data_ref_alignment): Move\n+\tloop related checks ...\n+\t(vect_verify_datarefs_alignment): ... here.\n+\t(vect_slp_analyze_and_verify_node_alignment): Compute and\n+\tverify alignment of the single DR that it matters.\n+\t* tree-vect-stmts.c (vectorizable_store): Add an assert.\n+\t(vectorizable_load): Add a comment.\n+\t* tree-vect-slp.c (vect_analyze_slp_cost_1): Fix DR used\n+\tfor determining load cost.\n+\n 2015-11-13  Ilya Enkovich  <enkovich.gnu@gmail.com>\n \n \t* tree-vect-loop.c (vect_determine_vectorization_factor): Check"}, {"sha": "d0bce7f63357243a7d2bdf9863789d4cef07af26", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52eab3788dee949b86a46839508b60f54e4329b8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52eab3788dee949b86a46839508b60f54e4329b8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=52eab3788dee949b86a46839508b60f54e4329b8", "patch": "@@ -1,3 +1,10 @@\n+2015-11-13  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/68306\n+\t* gcc.dg/pr68306.c: Adjust.\n+\t* gcc.dg/pr68306-2.c: New testcase.\n+\t* gcc.dg/pr68306-3.c: Likewise.\n+\n 2015-11-13  Ilya Enkovich  <enkovich.gnu@gmail.com>\n \n \t* g++.dg/vect/simd-bool-comparison-1.cc: New test."}, {"sha": "1d84e96e57b418e55ac69386cda15a5557eab5bd", "filename": "gcc/testsuite/gcc.dg/pr68306-2.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52eab3788dee949b86a46839508b60f54e4329b8/gcc%2Ftestsuite%2Fgcc.dg%2Fpr68306-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52eab3788dee949b86a46839508b60f54e4329b8/gcc%2Ftestsuite%2Fgcc.dg%2Fpr68306-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr68306-2.c?ref=52eab3788dee949b86a46839508b60f54e4329b8", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3\" } */\n+/* { dg-additional-options \"-mno-sse -mno-mmx\" { target x86_64-*-* } } */\n+\n+struct {\n+    int tz_minuteswest;\n+    int tz_dsttime;\n+} a, b;\n+void fn1() {\n+    b.tz_minuteswest = a.tz_minuteswest;\n+    b.tz_dsttime = a.tz_dsttime;\n+}"}, {"sha": "d03ce53c5a7b920635612567e46d0ba55b41c5c7", "filename": "gcc/testsuite/gcc.dg/pr68306-3.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52eab3788dee949b86a46839508b60f54e4329b8/gcc%2Ftestsuite%2Fgcc.dg%2Fpr68306-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52eab3788dee949b86a46839508b60f54e4329b8/gcc%2Ftestsuite%2Fgcc.dg%2Fpr68306-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr68306-3.c?ref=52eab3788dee949b86a46839508b60f54e4329b8", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3\" } */\n+/* { dg-additional-options \"-mno-sse -mno-mmx\" { target x86_64-*-* } } */\n+/* { dg-additional-options \"-mno-altivec -mno-vsx\" { target powerpc*-*-* } } */\n+\n+extern void fn2();\n+struct {\n+    unsigned qp_num;\n+    unsigned starting_psn;\n+    void *private_data;\n+} a;\n+struct {\n+    unsigned id;\n+    unsigned qpn;\n+    unsigned psn;\n+} b;\n+void fn1() {\n+    a.qp_num = b.qpn;\n+    a.starting_psn = b.psn;\n+    fn2(b.id);\n+}"}, {"sha": "e1805a79a32b89e2ed4be48b3abc668129856dd0", "filename": "gcc/testsuite/gcc.dg/pr68306.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52eab3788dee949b86a46839508b60f54e4329b8/gcc%2Ftestsuite%2Fgcc.dg%2Fpr68306.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52eab3788dee949b86a46839508b60f54e4329b8/gcc%2Ftestsuite%2Fgcc.dg%2Fpr68306.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr68306.c?ref=52eab3788dee949b86a46839508b60f54e4329b8", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-O3\" } */\n+/* { dg-additional-options \"-mno-sse -mno-mmx\" { target x86_64-*-* } } */\n \n enum powerpc_pmc_type { PPC_PMC_IBM };\n struct {"}, {"sha": "f9327d7d89901ee4be8827be3a0368acbc70795e", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 29, "deletions": 37, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52eab3788dee949b86a46839508b60f54e4329b8/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52eab3788dee949b86a46839508b60f54e4329b8/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=52eab3788dee949b86a46839508b60f54e4329b8", "patch": "@@ -916,22 +916,8 @@ vect_update_misalignment_for_peel (struct data_reference *dr,\n static bool\n verify_data_ref_alignment (data_reference_p dr)\n {\n-  enum dr_alignment_support supportable_dr_alignment;\n-  gimple *stmt = DR_STMT (dr);\n-  stmt_vec_info stmt_info = vinfo_for_stmt (stmt);\n-\n-  /* For interleaving, only the alignment of the first access matters.   */\n-  if (STMT_VINFO_GROUPED_ACCESS (stmt_info)\n-      && GROUP_FIRST_ELEMENT (stmt_info) != stmt)\n-    return true;\n-\n-  /* Strided accesses perform only component accesses, alignment is\n-     irrelevant for them.  */\n-  if (STMT_VINFO_STRIDED_P (stmt_info)\n-      && !STMT_VINFO_GROUPED_ACCESS (stmt_info))\n-    return true;\n-\n-  supportable_dr_alignment = vect_supportable_dr_alignment (dr, false);\n+  enum dr_alignment_support supportable_dr_alignment\n+    = vect_supportable_dr_alignment (dr, false);\n   if (!supportable_dr_alignment)\n     {\n       if (dump_enabled_p ())\n@@ -977,6 +963,18 @@ vect_verify_datarefs_alignment (loop_vec_info vinfo)\n \n       if (!STMT_VINFO_RELEVANT_P (stmt_info))\n \tcontinue;\n+\n+      /* For interleaving, only the alignment of the first access matters.   */\n+      if (STMT_VINFO_GROUPED_ACCESS (stmt_info)\n+\t  && GROUP_FIRST_ELEMENT (stmt_info) != stmt)\n+\treturn true;\n+\n+      /* Strided accesses perform only component accesses, alignment is\n+\t irrelevant for them.  */\n+      if (STMT_VINFO_STRIDED_P (stmt_info)\n+\t  && !STMT_VINFO_GROUPED_ACCESS (stmt_info))\n+\treturn true;\n+\n       if (! verify_data_ref_alignment (dr))\n \treturn false;\n     }\n@@ -2100,28 +2098,22 @@ vect_analyze_data_refs_alignment (loop_vec_info vinfo)\n static bool\n vect_slp_analyze_and_verify_node_alignment (slp_tree node)\n {\n-  unsigned i;\n-  gimple *stmt;\n-  FOR_EACH_VEC_ELT (SLP_TREE_SCALAR_STMTS (node), i, stmt)\n+  /* We vectorize from the first scalar stmt in the node unless\n+     the node is permuted in which case we start from the first\n+     element in the group.  */\n+  gimple *first_stmt = SLP_TREE_SCALAR_STMTS (node)[0];\n+  if (SLP_TREE_LOAD_PERMUTATION (node).exists ())\n+    first_stmt = GROUP_FIRST_ELEMENT (vinfo_for_stmt (first_stmt));\n+\n+  data_reference_p dr = STMT_VINFO_DATA_REF (vinfo_for_stmt (first_stmt));\n+  if (! vect_compute_data_ref_alignment (dr)\n+      || ! verify_data_ref_alignment (dr))\n     {\n-      stmt_vec_info stmt_info = vinfo_for_stmt (stmt);\n-\n-      /* Strided accesses perform only component accesses, misalignment\n-\t information is irrelevant for them.  */\n-      if (STMT_VINFO_STRIDED_P (stmt_info)\n-\t  && !STMT_VINFO_GROUPED_ACCESS (stmt_info))\n-\tcontinue;\n-\n-      data_reference_p dr = STMT_VINFO_DATA_REF (stmt_info);\n-      if (! vect_compute_data_ref_alignment (dr)\n-\t  || ! verify_data_ref_alignment (dr))\n-\t{\n-\t  if (dump_enabled_p ())\n-\t    dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n-\t\t\t     \"not vectorized: bad data alignment in basic \"\n-\t\t\t     \"block.\\n\");\n-\t  return false;\n-\t}\n+      if (dump_enabled_p ())\n+\tdump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n+\t\t\t \"not vectorized: bad data alignment in basic \"\n+\t\t\t \"block.\\n\");\n+      return false;\n     }\n \n   return true;"}, {"sha": "f65837df4fcba2e8edfe2a60ff4d028cbad376fa", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52eab3788dee949b86a46839508b60f54e4329b8/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52eab3788dee949b86a46839508b60f54e4329b8/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=52eab3788dee949b86a46839508b60f54e4329b8", "patch": "@@ -1429,6 +1429,13 @@ vect_analyze_slp_cost_1 (slp_instance instance, slp_tree node,\n \t{\n \t  int i;\n \t  gcc_checking_assert (DR_IS_READ (STMT_VINFO_DATA_REF (stmt_info)));\n+\t  /* If the load is permuted then the alignment is determined by\n+\t     the first group element not by the first scalar stmt DR.  */\n+\t  if (SLP_TREE_LOAD_PERMUTATION (node).exists ())\n+\t    {\n+\t      stmt = GROUP_FIRST_ELEMENT (stmt_info);\n+\t      stmt_info = vinfo_for_stmt (stmt);\n+\t    }\n \t  vect_model_load_cost (stmt_info, ncopies_for_cost, false,\n \t\t\t\tnode, prologue_cost_vec, body_cost_vec);\n \t  /* If the load is permuted record the cost for the permutation."}, {"sha": "0f64aaf19795880c63d910d71cc094a8d74b976f", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52eab3788dee949b86a46839508b60f54e4329b8/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52eab3788dee949b86a46839508b60f54e4329b8/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=52eab3788dee949b86a46839508b60f54e4329b8", "patch": "@@ -5464,6 +5464,7 @@ vectorizable_store (gimple *stmt, gimple_stmt_iterator *gsi, gimple **vec_stmt,\n              group.  */\n           vec_num = SLP_TREE_NUMBER_OF_VEC_STMTS (slp_node);\n           first_stmt = SLP_TREE_SCALAR_STMTS (slp_node)[0]; \n+\t  gcc_assert (GROUP_FIRST_ELEMENT (vinfo_for_stmt (first_stmt)) == first_stmt);\n           first_dr = STMT_VINFO_DATA_REF (vinfo_for_stmt (first_stmt));\n \t  op = gimple_assign_rhs1 (first_stmt);\n         } \n@@ -6658,9 +6659,9 @@ vectorizable_load (gimple *stmt, gimple_stmt_iterator *gsi, gimple **vec_stmt,\n   if (grouped_load)\n     {\n       first_stmt = GROUP_FIRST_ELEMENT (stmt_info);\n-      if (slp\n-          && !SLP_TREE_LOAD_PERMUTATION (slp_node).exists ()\n-\t  && first_stmt != SLP_TREE_SCALAR_STMTS (slp_node)[0])\n+      /* For BB vectorization we directly vectorize a subchain\n+         without permutation.  */\n+      if (slp && ! SLP_TREE_LOAD_PERMUTATION (slp_node).exists ())\n         first_stmt = SLP_TREE_SCALAR_STMTS (slp_node)[0];\n \n       /* Check if the chain of loads is already vectorized.  */"}]}