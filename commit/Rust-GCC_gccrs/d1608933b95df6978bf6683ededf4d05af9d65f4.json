{"sha": "d1608933b95df6978bf6683ededf4d05af9d65f4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDE2MDg5MzNiOTVkZjY5NzhiZjY2ODNlZGVkZjRkMDVhZjlkNjVmNA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2001-01-02T02:31:22Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2001-01-02T02:31:22Z"}, "message": "function.c (expand_function_end): Properly handle DECL_RESULT and copy when ptr_mode != Pmode.\n\n\t* function.c (expand_function_end): Properly handle DECL_RESULT\n\tand copy when ptr_mode != Pmode.\n\t* expmed.c (make_tree): Convert X from Pmode to ptr_mode, if needed.\n\nFrom-SVN: r38607", "tree": {"sha": "c7c92d96f32e636df33dde2f85860e4404e7cb89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c7c92d96f32e636df33dde2f85860e4404e7cb89"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d1608933b95df6978bf6683ededf4d05af9d65f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1608933b95df6978bf6683ededf4d05af9d65f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1608933b95df6978bf6683ededf4d05af9d65f4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1608933b95df6978bf6683ededf4d05af9d65f4/comments", "author": null, "committer": null, "parents": [{"sha": "09f89307d376748a461cc4b4aa3808a75384ca89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09f89307d376748a461cc4b4aa3808a75384ca89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09f89307d376748a461cc4b4aa3808a75384ca89"}], "stats": {"total": 36, "additions": 30, "deletions": 6}, "files": [{"sha": "1c9c7bad54c36805d23170cb315d3188fac4320c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1608933b95df6978bf6683ededf4d05af9d65f4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1608933b95df6978bf6683ededf4d05af9d65f4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d1608933b95df6978bf6683ededf4d05af9d65f4", "patch": "@@ -1,3 +1,9 @@\n+Mon Jan  1 21:28:29 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* function.c (expand_function_end): Properly handle DECL_RESULT\n+\tand copy when ptr_mode != Pmode.\n+\t* expmed.c (make_tree): Convert X from Pmode to ptr_mode, if needed.\n+\n 2001-01-01  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* c-common.c (c_common_nodes_and_builtins): Set prototype"}, {"sha": "0661e105a381ff0a86c9d95f1d7b75fc432f5681", "filename": "gcc/expmed.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1608933b95df6978bf6683ededf4d05af9d65f4/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1608933b95df6978bf6683ededf4d05af9d65f4/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=d1608933b95df6978bf6683ededf4d05af9d65f4", "patch": "@@ -1,7 +1,7 @@\n /* Medium-level subroutines: convert bit-field store and extract\n    and shifts, multiplies and divides to rtl instructions.\n    Copyright (C) 1987, 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000 Free Software Foundation, Inc.\n+   1999, 2000, 2001 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -4066,6 +4066,14 @@ make_tree (type, x)\n    default:\n       t = make_node (RTL_EXPR);\n       TREE_TYPE (t) = type;\n+\n+#ifdef POINTERS_EXTEND_UNSIGNED\n+      /* If TYPE is a POINTER_TYPE, X might be Pmode with TYPE_MODE being\n+\t ptr_mode.  So convert.  */\n+      if (POINTER_TYPE_P (type) && GET_MODE (x) != TYPE_MODE (type))\n+\tx = convert_memory_address (TYPE_MODE (type), x);\n+#endif\n+\n       RTL_EXPR_RTL (t) = x;\n       /* There are no insns to be output\n \t when this rtl_expr is used.  */"}, {"sha": "bbd7ecc3e978aa6283ce878be2def9b7a3296045", "filename": "gcc/function.c", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1608933b95df6978bf6683ededf4d05af9d65f4/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1608933b95df6978bf6683ededf4d05af9d65f4/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=d1608933b95df6978bf6683ededf4d05af9d65f4", "patch": "@@ -1,6 +1,6 @@\n /* Expands front end tree to back end RTL for GNU C-Compiler\n    Copyright (C) 1987, 1988, 1989, 1991, 1992, 1993, 1994, 1995, 1996, 1997,\n-   1998, 1999, 2000 Free Software Foundation, Inc.\n+   1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -6825,24 +6825,34 @@ expand_function_end (filename, line, end_bindings)\n   if (current_function_returns_struct\n       || current_function_returns_pcc_struct)\n     {\n-      rtx value_address =\n-\tXEXP (DECL_RTL (DECL_RESULT (current_function_decl)), 0);\n+      rtx value_address\n+\t= XEXP (DECL_RTL (DECL_RESULT (current_function_decl)), 0);\n       tree type = TREE_TYPE (DECL_RESULT (current_function_decl));\n #ifdef FUNCTION_OUTGOING_VALUE\n       rtx outgoing\n \t= FUNCTION_OUTGOING_VALUE (build_pointer_type (type),\n \t\t\t\t   current_function_decl);\n #else\n       rtx outgoing\n-\t= FUNCTION_VALUE (build_pointer_type (type),\n-\t\t\t  current_function_decl);\n+\t= FUNCTION_VALUE (build_pointer_type (type), current_function_decl);\n #endif\n \n       /* Mark this as a function return value so integrate will delete the\n \t assignment and USE below when inlining this function.  */\n       REG_FUNCTION_VALUE_P (outgoing) = 1;\n \n+#ifdef POINTERS_EXTEND_UNSIGNED\n+      /* The address may be ptr_mode and OUTGOING may be Pmode.  */\n+      if (GET_MODE (outgoing) != GET_MODE (value_address))\n+\tvalue_address = convert_memory_address (GET_MODE (outgoing),\n+\t\t\t\t\t\tvalue_address);\n+#endif\n+\n       emit_move_insn (outgoing, value_address);\n+\n+      /* Show return register used to hold result (in this case the address\n+\t of the result.  */\n+      current_function_return_rtx = outgoing;\n     }\n \n   /* ??? This should no longer be necessary since stupid is no longer with"}]}