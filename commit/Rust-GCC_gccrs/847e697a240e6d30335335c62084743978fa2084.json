{"sha": "847e697a240e6d30335335c62084743978fa2084", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODQ3ZTY5N2EyNDBlNmQzMDMzNTMzNWM2MjA4NDc0Mzk3OGZhMjA4NA==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2011-10-17T09:59:40Z"}, "committer": {"name": "Dodji Seketeli", "email": "dodji@gcc.gnu.org", "date": "2011-10-17T09:59:40Z"}, "message": "Support -fdebug-cpp option\n\nThis patch adds -fdebug-cpp option. When used with -E this dumps the\nrelevant macro map before every single token. This clutters the output\na lot but has proved to be invaluable in tracking some bugs during the\ndevelopment of the virtual location support.\n\nCo-Authored-By: Dodji Seketeli <dodji@redhat.com>\n\nFrom-SVN: r180084", "tree": {"sha": "1df29dda9c3f6fb6e559fa82140695ea5b6130d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1df29dda9c3f6fb6e559fa82140695ea5b6130d1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/847e697a240e6d30335335c62084743978fa2084", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/847e697a240e6d30335335c62084743978fa2084", "html_url": "https://github.com/Rust-GCC/gccrs/commit/847e697a240e6d30335335c62084743978fa2084", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/847e697a240e6d30335335c62084743978fa2084/comments", "author": null, "committer": null, "parents": [{"sha": "07a0b324eb7e353146340f00db380c6d92851fc9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07a0b324eb7e353146340f00db380c6d92851fc9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07a0b324eb7e353146340f00db380c6d92851fc9"}], "stats": {"total": 156, "additions": 144, "deletions": 12}, "files": [{"sha": "9021c977b37ee77fb0c81acc55cc8a33907cbc13", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/847e697a240e6d30335335c62084743978fa2084/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/847e697a240e6d30335335c62084743978fa2084/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=847e697a240e6d30335335c62084743978fa2084", "patch": "@@ -1,3 +1,10 @@\n+2011-10-15  Tom Tromey  <tromey@redhat.com>\n+\t    Dodji Seketeli  <dodji@redhat.com>\n+\n+\t* doc/cppopts.texi: Document -fdebug-cpp.\n+\t* doc/invoke.texi: Add -fdebug-cpp to the list of preprocessor\n+\toptions.\n+\n 2011-10-15  Tom Tromey  <tromey@redhat.com>\n \t    Dodji Seketeli  <dodji@redhat.com>\n "}, {"sha": "117e7ddae7ff3dfe1fc5f917b81e233397d18c0f", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/847e697a240e6d30335335c62084743978fa2084/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/847e697a240e6d30335335c62084743978fa2084/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=847e697a240e6d30335335c62084743978fa2084", "patch": "@@ -1,3 +1,19 @@\n+2011-10-15  Tom Tromey  <tromey@redhat.com>\n+\t    Dodji Seketeli  <dodji@redhat.com>\n+\n+\t* c.opt (fdebug-cpp): New option.\n+\t* c-opts.c (c_common_handle_option): Handle the option.\n+\t* c-ppoutput.c (maybe_print_line_1): New static function. Takes an\n+\toutput stream in parameter. Factorized from ...\n+\t(maybe_print_line): ... this. Dump location debug information when\n+\t-fdebug-cpp is in effect.\n+\t(print_line_1): New static function. Takes an output stream in\n+\tparameter. Factorized from ...\n+\t(print_line): ... here. Dump location information when -fdebug-cpp\n+\tis in effect.\n+\t(scan_translation_unit): Dump location information when\n+\t-fdebug-cpp is in effect.\n+\n 2011-10-15  Tom Tromey  <tromey@redhat.com>\n \t    Dodji Seketeli  <dodji@redhat.com>\n "}, {"sha": "6869d5c35ef005f03c7660222ac88740e02695c5", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/847e697a240e6d30335335c62084743978fa2084/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/847e697a240e6d30335335c62084743978fa2084/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=847e697a240e6d30335335c62084743978fa2084", "patch": "@@ -628,6 +628,10 @@ c_common_handle_option (size_t scode, const char *arg, int value,\n       cpp_opts->preprocessed = value;\n       break;\n \n+    case OPT_fdebug_cpp:\n+      cpp_opts->debug = 1;\n+      break;\n+\n     case OPT_ftrack_macro_expansion:\n       if (value)\n \tvalue = 2;"}, {"sha": "df46ce4c1f552c29e34ffafcf670608683b9d54d", "filename": "gcc/c-family/c-ppoutput.c", "status": "modified", "additions": 46, "deletions": 11, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/847e697a240e6d30335335c62084743978fa2084/gcc%2Fc-family%2Fc-ppoutput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/847e697a240e6d30335335c62084743978fa2084/gcc%2Fc-family%2Fc-ppoutput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-ppoutput.c?ref=847e697a240e6d30335335c62084743978fa2084", "patch": "@@ -59,7 +59,9 @@ static void account_for_newlines (const unsigned char *, size_t);\n static int dump_macro (cpp_reader *, cpp_hashnode *, void *);\n static void dump_queued_macros (cpp_reader *);\n \n+static void print_line_1 (source_location, const char*, FILE *);\n static void print_line (source_location, const char *);\n+static void maybe_print_line_1 (source_location, FILE *);\n static void maybe_print_line (source_location);\n static void do_line_change (cpp_reader *, const cpp_token *,\n \t\t\t    source_location, int);\n@@ -243,7 +245,12 @@ scan_translation_unit (cpp_reader *pfile)\n \t  in_pragma = false;\n \t}\n       else\n-\tcpp_output_token (token, print.outf);\n+\t{\n+\t  if (cpp_get_options (parse_in)->debug)\n+\t      linemap_dump_location (line_table, token->src_loc,\n+\t\t\t\t     print.outf);\n+\t  cpp_output_token (token, print.outf);\n+\t}\n \n       if (token->type == CPP_COMMENT)\n \taccount_for_newlines (token->val.str.text, token->val.str.len);\n@@ -297,16 +304,17 @@ scan_translation_unit_trad (cpp_reader *pfile)\n /* If the token read on logical line LINE needs to be output on a\n    different line to the current one, output the required newlines or\n    a line marker, and return 1.  Otherwise return 0.  */\n+\n static void\n-maybe_print_line (source_location src_loc)\n+maybe_print_line_1 (source_location src_loc, FILE *stream)\n {\n   int src_line = LOCATION_LINE (src_loc);\n   const char *src_file = LOCATION_FILE (src_loc);\n \n   /* End the previous line of text.  */\n   if (print.printed)\n     {\n-      putc ('\\n', print.outf);\n+      putc ('\\n', stream);\n       print.src_line++;\n       print.printed = 0;\n     }\n@@ -318,22 +326,37 @@ maybe_print_line (source_location src_loc)\n     {\n       while (src_line > print.src_line)\n \t{\n-\t  putc ('\\n', print.outf);\n+\t  putc ('\\n', stream);\n \t  print.src_line++;\n \t}\n     }\n   else\n-    print_line (src_loc, \"\");\n+    print_line_1 (src_loc, \"\", stream);\n+\n+}\n+\n+/* If the token read on logical line LINE needs to be output on a\n+   different line to the current one, output the required newlines or\n+   a line marker, and return 1.  Otherwise return 0.  */\n+\n+static void\n+maybe_print_line (source_location src_loc)\n+{\n+  if (cpp_get_options (parse_in)->debug)\n+    linemap_dump_location (line_table, src_loc,\n+\t\t\t   print.outf);\n+  maybe_print_line_1 (src_loc, print.outf);\n }\n \n /* Output a line marker for logical line LINE.  Special flags are \"1\"\n    or \"2\" indicating entering or leaving a file.  */\n+\n static void\n-print_line (source_location src_loc, const char *special_flags)\n+print_line_1 (source_location src_loc, const char *special_flags, FILE *stream)\n {\n   /* End any previous line of text.  */\n   if (print.printed)\n-    putc ('\\n', print.outf);\n+    putc ('\\n', stream);\n   print.printed = 0;\n \n   if (!flag_no_line_commands)\n@@ -354,20 +377,32 @@ print_line (source_location src_loc, const char *special_flags)\n \t\t\t    (const unsigned char *) file_path,\n \t\t\t    to_file_len);\n       *p = '\\0';\n-      fprintf (print.outf, \"# %u \\\"%s\\\"%s\",\n+      fprintf (stream, \"# %u \\\"%s\\\"%s\",\n \t       print.src_line == 0 ? 1 : print.src_line,\n \t       to_file_quoted, special_flags);\n \n       sysp = in_system_header_at (src_loc);\n       if (sysp == 2)\n-\tfputs (\" 3 4\", print.outf);\n+\tfputs (\" 3 4\", stream);\n       else if (sysp == 1)\n-\tfputs (\" 3\", print.outf);\n+\tfputs (\" 3\", stream);\n \n-      putc ('\\n', print.outf);\n+      putc ('\\n', stream);\n     }\n }\n \n+/* Output a line marker for logical line LINE.  Special flags are \"1\"\n+   or \"2\" indicating entering or leaving a file.  */\n+\n+static void\n+print_line (source_location src_loc, const char *special_flags)\n+{\n+    if (cpp_get_options (parse_in)->debug)\n+      linemap_dump_location (line_table, src_loc,\n+\t\t\t     print.outf);\n+    print_line_1 (src_loc, special_flags, print.outf);\n+}\n+\n /* Helper function for cb_line_change and scan_translation_unit.  */\n static void\n do_line_change (cpp_reader *pfile, const cpp_token *token,"}, {"sha": "8e06c51c0eba7585dfa4abb72816c0890e8ffcd7", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/847e697a240e6d30335335c62084743978fa2084/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/847e697a240e6d30335335c62084743978fa2084/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=847e697a240e6d30335335c62084743978fa2084", "patch": "@@ -743,6 +743,10 @@ fconstexpr-depth=\n C++ ObjC++ Joined RejectNegative UInteger Var(max_constexpr_depth) Init(512)\n -fconstexpr-depth=<number>\tSpecify maximum constexpr recursion depth\n \n+fdebug-cpp\n+C ObjC C++ ObjC++\n+Emit debug annotations during preprocessing\n+\n fdeduce-init-list\n C++ ObjC++ Var(flag_deduce_init_list) Init(1)\n -fno-deduce-init-list\tdisable deduction of std::initializer_list for a template type parameter from a brace-enclosed initializer-list"}, {"sha": "ef3a0b2f1960ee76ade0afc795087c66e92ace17", "filename": "gcc/doc/cppopts.texi", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/847e697a240e6d30335335c62084743978fa2084/gcc%2Fdoc%2Fcppopts.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/847e697a240e6d30335335c62084743978fa2084/gcc%2Fdoc%2Fcppopts.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcppopts.texi?ref=847e697a240e6d30335335c62084743978fa2084", "patch": "@@ -583,6 +583,19 @@ correct column numbers in warnings or errors, even if tabs appear on the\n line.  If the value is less than 1 or greater than 100, the option is\n ignored.  The default is 8.\n \n+@item -fdebug-cpp\n+@opindex fdebug-cpp\n+This option is only useful for debugging GCC.  When used with\n+@option{-E}, dumps debugging information about location maps.  Every\n+token in the output is preceded by the dump of the map its location\n+belongs to.  The dump of the map holding the location of a token would\n+be:\n+@quotation\n+@{@samp{P}:@file{/file/path};@samp{F}:@file{/includer/path};@samp{L}:@var{line_num};@samp{C}:@var{col_num};@samp{S}:@var{system_header_p};@samp{M}:@var{map_address};@samp{E}:@var{macro_expansion_p},@samp{loc}:@var{location}@}\n+@end quotation\n+\n+When used without @option{-E}, this option has no effect.\n+\n @item -ftrack-macro-expansion@r{[}=@var{level}@r{]}\n @opindex ftrack-macro-expansion\n Track locations of tokens across macro expansions. This allows the"}, {"sha": "3b71cb18592deab83bc34ba830b97592c1a6682d", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/847e697a240e6d30335335c62084743978fa2084/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/847e697a240e6d30335335c62084743978fa2084/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=847e697a240e6d30335335c62084743978fa2084", "patch": "@@ -429,7 +429,7 @@ Objective-C and Objective-C++ Dialects}.\n -iwithprefixbefore @var{dir}  -isystem @var{dir} @gol\n -imultilib @var{dir} -isysroot @var{dir} @gol\n -M  -MM  -MF  -MG  -MP  -MQ  -MT  -nostdinc  @gol\n--P -ftrack-macro-expansion -fworking-directory @gol\n+-P  -fdebug-cpp -ftrack-macro-expansion -fworking-directory @gol\n -remap -trigraphs  -undef  -U@var{macro}  @gol\n -Wp,@var{option} -Xpreprocessor @var{option}}\n "}, {"sha": "bd86466f2560108caf0beb0fb7dfc97d02da8853", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/847e697a240e6d30335335c62084743978fa2084/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/847e697a240e6d30335335c62084743978fa2084/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=847e697a240e6d30335335c62084743978fa2084", "patch": "@@ -1,3 +1,10 @@\n+2011-10-15  Tom Tromey  <tromey@redhat.com>\n+\t    Dodji Seketeli  <dodji@redhat.com>\n+\n+\t* include/cpplib.h (struct cpp_options)<debug>: New struct member.\n+\t* include/line-map.h (linemap_dump_location): Declare ...\n+\t* line-map.c (linemap_dump_location): ... new function.\n+\n 2011-10-15  Tom Tromey  <tromey@redhat.com>\n \t    Dodji Seketeli  <dodji@redhat.com>\n "}, {"sha": "825bf2fc6ff2452b6a5b2d36997151eea41204cb", "filename": "libcpp/include/cpplib.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/847e697a240e6d30335335c62084743978fa2084/libcpp%2Finclude%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/847e697a240e6d30335335c62084743978fa2084/libcpp%2Finclude%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpplib.h?ref=847e697a240e6d30335335c62084743978fa2084", "patch": "@@ -392,6 +392,10 @@ struct cpp_options\n   /* Nonzero means we're looking at already preprocessed code, so don't\n      bother trying to do macro expansion and whatnot.  */\n   unsigned char preprocessed;\n+  \n+  /* Nonzero means we are going to emit debugging logs during\n+     preprocessing.  */\n+  unsigned char debug;\n \n   /* Nonzero means we are tracking locations of tokens involved in\n      macro expansion. 1 Means we track the location in degraded mode"}, {"sha": "04a523c2bfcbabd91c6dbcf8d145357c6dac8531", "filename": "libcpp/include/line-map.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/847e697a240e6d30335335c62084743978fa2084/libcpp%2Finclude%2Fline-map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/847e697a240e6d30335335c62084743978fa2084/libcpp%2Finclude%2Fline-map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fline-map.h?ref=847e697a240e6d30335335c62084743978fa2084", "patch": "@@ -675,4 +675,8 @@ expanded_location linemap_expand_location_full (struct line_maps *,\n \t\t\t\t\t\tsource_location loc,\n \t\t\t\t\t\tenum location_resolution_kind lrk);\n \n+/* Dump debugging information about source location LOC into the file\n+   stream STREAM. SET is the line map set LOC comes from.  */\n+void linemap_dump_location (struct line_maps *, source_location, FILE *);\n+\n #endif /* !LIBCPP_LINE_MAP_H  */"}, {"sha": "3dbaeaba7c92937dda1e013b9552c4120e3daaa4", "filename": "libcpp/line-map.c", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/847e697a240e6d30335335c62084743978fa2084/libcpp%2Fline-map.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/847e697a240e6d30335335c62084743978fa2084/libcpp%2Fline-map.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fline-map.c?ref=847e697a240e6d30335335c62084743978fa2084", "patch": "@@ -1105,3 +1105,41 @@ linemap_expand_location_full (struct line_maps *set,\n   xloc = linemap_expand_location (map, loc);\n   return xloc;\n }\n+\n+/* Dump debugging information about source location LOC into the file\n+   stream STREAM. SET is the line map set LOC comes from.  */\n+\n+void\n+linemap_dump_location (struct line_maps *set,\n+\t\t       source_location loc,\n+\t\t       FILE *stream)\n+{\n+  const struct line_map *map;\n+  source_location location;\n+  const char *path, *from;\n+  int l,c,s,e;\n+\n+  if (loc == 0)\n+    return;\n+\n+  location =\n+    linemap_resolve_location (set, loc, LRK_MACRO_DEFINITION_LOCATION, &map);\n+  path = LINEMAP_FILE (map);\n+\n+  l = SOURCE_LINE (map, location);\n+  c = SOURCE_COLUMN (map, location);\n+  s = LINEMAP_SYSP (map) != 0;\n+  e = location != loc;\n+\n+  if (e)\n+    from = \"N/A\";\n+  else\n+    from = (INCLUDED_FROM (set, map))\n+      ? LINEMAP_FILE (INCLUDED_FROM (set, map))\n+      : \"<NULL>\";\n+\n+  /* P: path, L: line, C: column, S: in-system-header, M: map address,\n+     E: macro expansion?.   */\n+  fprintf (stream, \"{P:%s;F:%s;L:%d;C:%d;S:%d;M:%p;E:%d,LOC:%d}\",\n+\t   path, from, l, c, s, (void*)map, e, loc);\n+}"}]}