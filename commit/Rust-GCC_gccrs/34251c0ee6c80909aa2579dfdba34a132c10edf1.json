{"sha": "34251c0ee6c80909aa2579dfdba34a132c10edf1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzQyNTFjMGVlNmM4MDkwOWFhMjU3OWRmZGJhMzRhMTMyYzEwZWRmMQ==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2010-07-30T17:04:37Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2010-07-30T17:04:37Z"}, "message": "common.opt (-G): Don't define option here.\n\n\t* common.opt (-G): Don't define option here.\n\t* config/g.opt: New.\n\t* config.gcc: Use g.opt for alpha, frv, ia64, lm32, m32r, mips,\n\trs6000/powerpc and score targets.\n\t* opts.c (common_handle_option): Don't handle -G here.\n\t* config/alpha/alpha.c (alpha_handle_option): Handle -G.\n\t* config/frv/frv.c (frv_handle_option): Handle -G.\n\t* config/ia64/ia64.c (ia64_handle_option): Handle -G.\n\t* config/lm32/lm32.c (lm32_handle_option, TARGET_HANDLE_OPTION):\n\tNew.\n\t* config/m32r/m32r.c (m32r_handle_option): Handle -G.\n\t* config/mips/mips.c (mips_handle_option): Handle -G.\n\t* config/rs6000/rs6000.c (rs6000_handle_option) Handle -G.\n\t* config/score/score.c (score_handle_option): Handle -G.\n\nFrom-SVN: r162721", "tree": {"sha": "39c4802ab1ec2c73bfc44ddecba5aba0c73eac5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/39c4802ab1ec2c73bfc44ddecba5aba0c73eac5a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/34251c0ee6c80909aa2579dfdba34a132c10edf1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34251c0ee6c80909aa2579dfdba34a132c10edf1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34251c0ee6c80909aa2579dfdba34a132c10edf1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34251c0ee6c80909aa2579dfdba34a132c10edf1/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95b038dd431c7b0053c29d9d330d99c3b3f63b44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95b038dd431c7b0053c29d9d330d99c3b3f63b44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95b038dd431c7b0053c29d9d330d99c3b3f63b44"}], "stats": {"total": 134, "additions": 119, "deletions": 15}, "files": [{"sha": "30ae24e08b3f44d02cf244a031968d09c870646a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34251c0ee6c80909aa2579dfdba34a132c10edf1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34251c0ee6c80909aa2579dfdba34a132c10edf1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=34251c0ee6c80909aa2579dfdba34a132c10edf1", "patch": "@@ -1,3 +1,20 @@\n+2010-07-30  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* common.opt (-G): Don't define option here.\n+\t* config/g.opt: New.\n+\t* config.gcc: Use g.opt for alpha, frv, ia64, lm32, m32r, mips,\n+\trs6000/powerpc and score targets.\n+\t* opts.c (common_handle_option): Don't handle -G here.\n+\t* config/alpha/alpha.c (alpha_handle_option): Handle -G.\n+\t* config/frv/frv.c (frv_handle_option): Handle -G.\n+\t* config/ia64/ia64.c (ia64_handle_option): Handle -G.\n+\t* config/lm32/lm32.c (lm32_handle_option, TARGET_HANDLE_OPTION):\n+\tNew.\n+\t* config/m32r/m32r.c (m32r_handle_option): Handle -G.\n+\t* config/mips/mips.c (mips_handle_option): Handle -G.\n+\t* config/rs6000/rs6000.c (rs6000_handle_option) Handle -G.\n+\t* config/score/score.c (score_handle_option): Handle -G.\n+\n 2010-07-30  Anatoly Sokolov  <aesok@post.ru>\n \n \t* config/mmix/mmix.c: Include basic-block.h."}, {"sha": "78dc1ba382d74f6a5793531a1258b8c8d1bb5158", "filename": "gcc/common.opt", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34251c0ee6c80909aa2579dfdba34a132c10edf1/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34251c0ee6c80909aa2579dfdba34a132c10edf1/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=34251c0ee6c80909aa2579dfdba34a132c10edf1", "patch": "@@ -57,10 +57,6 @@ Common Separate\n -version\n Common\n \n-G\n-Common Joined Separate UInteger\n--G<number>\tPut global and static data smaller than <number> bytes into a special section (on some targets)\n-\n O\n Common JoinedOrMissing Optimization\n -O<number>\tSet optimization level to <number>"}, {"sha": "9170fc819c747d7309caaa6964f19a50d5470f24", "filename": "gcc/config.gcc", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34251c0ee6c80909aa2579dfdba34a132c10edf1/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34251c0ee6c80909aa2579dfdba34a132c10edf1/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=34251c0ee6c80909aa2579dfdba34a132c10edf1", "patch": "@@ -267,6 +267,7 @@ m32c*-*-*)\n alpha*-*-*)\n \tcpu_type=alpha\n \tneed_64bit_hwint=yes\n+\textra_options=\"${extra_options} g.opt\"\n \t;;\n am33_2.0-*-linux*)\n \tcpu_type=mn10300\n@@ -289,6 +290,7 @@ crisv32-*)\n \tcpu_type=cris\n \t;;\n frv*)\tcpu_type=frv\n+\textra_options=\"${extra_options} g.opt\"\n \t;;\n moxie*)\tcpu_type=moxie\n \t;;\n@@ -322,12 +324,17 @@ x86_64-*-*)\n ia64-*-*)\n \textra_headers=ia64intrin.h\n \tneed_64bit_hwint=yes\n+\textra_options=\"${extra_options} g.opt\"\n \t;;\n hppa*-*-*)\n \tcpu_type=pa\n \t;;\n+lm32*)\n+\textra_options=\"${extra_options} g.opt\"\n+\t;;\n m32r*-*-*)\n         cpu_type=m32r\n+\textra_options=\"${extra_options} g.opt\"\n         ;;\n m68k-*-*)\n \textra_headers=math-68881.h\n@@ -336,6 +343,7 @@ mips*-*-*)\n \tcpu_type=mips\n \tneed_64bit_hwint=yes\n \textra_headers=\"loongson.h\"\n+\textra_options=\"${extra_options} g.opt\"\n \t;;\n picochip-*-*)\n         cpu_type=picochip\n@@ -349,12 +357,15 @@ powerpc*-*-*)\n \t\tcpu_is_64bit=yes\n \t\t;;\n \tesac\n+\textra_options=\"${extra_options} g.opt\"\n \t;;\n rs6000*-*-*)\n \tneed_64bit_hwint=yes\n+\textra_options=\"${extra_options} g.opt\"\n \t;;\n score*-*-*)\n \tcpu_type=score\n+\textra_options=\"${extra_options} g.opt\"\n \t;;\n sparc*-*-*)\n \tcpu_type=sparc"}, {"sha": "35d66b64a0a94fd408f14f9939bcaf340f707397", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34251c0ee6c80909aa2579dfdba34a132c10edf1/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34251c0ee6c80909aa2579dfdba34a132c10edf1/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=34251c0ee6c80909aa2579dfdba34a132c10edf1", "patch": "@@ -215,6 +215,11 @@ alpha_handle_option (size_t code, const char *arg, int value)\n {\n   switch (code)\n     {\n+    case OPT_G:\n+      g_switch_value = value;\n+      g_switch_set = true;\n+      break;\n+\n     case OPT_mfp_regs:\n       if (value == 0)\n \ttarget_flags |= MASK_SOFT_FP;"}, {"sha": "49133f764a54c34030f87281138fbf5ec2dd1063", "filename": "gcc/config/frv/frv.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34251c0ee6c80909aa2579dfdba34a132c10edf1/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34251c0ee6c80909aa2579dfdba34a132c10edf1/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=34251c0ee6c80909aa2579dfdba34a132c10edf1", "patch": "@@ -589,10 +589,15 @@ frv_cannot_force_const_mem (rtx x ATTRIBUTE_UNUSED)\n /* Implement TARGET_HANDLE_OPTION.  */\n \n static bool\n-frv_handle_option (size_t code, const char *arg, int value ATTRIBUTE_UNUSED)\n+frv_handle_option (size_t code, const char *arg, int value)\n {\n   switch (code)\n     {\n+    case OPT_G:\n+      g_switch_value = value;\n+      g_switch_set = true;\n+      return true;\n+\n     case OPT_mcpu_:\n       if (strcmp (arg, \"simple\") == 0)\n \tfrv_cpu_type = FRV_CPU_SIMPLE;"}, {"sha": "346a4d1af9282adcf01771399b4912f27134b648", "filename": "gcc/config/g.opt", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34251c0ee6c80909aa2579dfdba34a132c10edf1/gcc%2Fconfig%2Fg.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34251c0ee6c80909aa2579dfdba34a132c10edf1/gcc%2Fconfig%2Fg.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fg.opt?ref=34251c0ee6c80909aa2579dfdba34a132c10edf1", "patch": "@@ -0,0 +1,30 @@\n+; -G option (small data, some targets only).\n+\n+; Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n+; Free Software Foundation, Inc.\n+;\n+; This file is part of GCC.\n+;\n+; GCC is free software; you can redistribute it and/or modify it under\n+; the terms of the GNU General Public License as published by the Free\n+; Software Foundation; either version 3, or (at your option) any later\n+; version.\n+;\n+; GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+; WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+; FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+; for more details.\n+;\n+; You should have received a copy of the GNU General Public License\n+; along with GCC; see the file COPYING3.  If not see\n+; <http://www.gnu.org/licenses/>.\n+\n+; See the GCC internals manual (options.texi) for a description of this file's format.\n+\n+; Please try to keep this file in ASCII collating order.\n+\n+G\n+Target Joined Separate UInteger\n+-G<number>\tPut global and static data smaller than <number> bytes into a special section (on some targets)\n+\n+; This comment is to ensure we retain the blank line above."}, {"sha": "45a68cf5f443f3ecdf80da5a0b4e8a405487a6be", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34251c0ee6c80909aa2579dfdba34a132c10edf1/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34251c0ee6c80909aa2579dfdba34a132c10edf1/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=34251c0ee6c80909aa2579dfdba34a132c10edf1", "patch": "@@ -5528,6 +5528,11 @@ ia64_handle_option (size_t code, const char *arg, int value)\n {\n   switch (code)\n     {\n+    case OPT_G:\n+      g_switch_value = value;\n+      g_switch_set = true;\n+      return true;\n+\n     case OPT_mfixed_range_:\n       fix_range (arg);\n       return true;"}, {"sha": "2bcbe679950d9b2856b2707efe62ed3564625798", "filename": "gcc/config/lm32/lm32.c", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34251c0ee6c80909aa2579dfdba34a132c10edf1/gcc%2Fconfig%2Flm32%2Flm32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34251c0ee6c80909aa2579dfdba34a132c10edf1/gcc%2Fconfig%2Flm32%2Flm32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flm32%2Flm32.c?ref=34251c0ee6c80909aa2579dfdba34a132c10edf1", "patch": "@@ -1,7 +1,7 @@\n /* Subroutines used for code generation on the Lattice Mico32 architecture.\n    Contributed by Jon Beniston <jon@beniston.com>\n \n-   Copyright (C) 2009 Free Software Foundation, Inc.\n+   Copyright (C) 2009, 2010 Free Software Foundation, Inc.\n \n    This file is part of GCC.\n \n@@ -75,7 +75,10 @@ static bool lm32_can_eliminate (const int, const int);\n static bool\n lm32_legitimate_address_p (enum machine_mode mode, rtx x, bool strict);\n static HOST_WIDE_INT lm32_compute_frame_size (int size);\n+static bool lm32_handle_option (size_t code, const char *arg, int value);\n \n+#undef TARGET_HANDLE_OPTION\n+#define TARGET_HANDLE_OPTION lm32_handle_option\n #undef TARGET_ADDRESS_COST\n #define TARGET_ADDRESS_COST hook_int_rtx_bool_0\n #undef TARGET_RTX_COSTS\n@@ -696,6 +699,23 @@ lm32_setup_incoming_varargs (CUMULATIVE_ARGS * cum, enum machine_mode mode,\n     }\n }\n \n+/* Implement TARGET_HANDLE_OPTION.  */\n+\n+static bool\n+lm32_handle_option (size_t code, const char *arg ATTRIBUTE_UNUSED, int value)\n+{\n+  switch (code)\n+    {\n+    case OPT_G:\n+      g_switch_value = value;\n+      g_switch_set = true;\n+      return true;\n+\n+    default:\n+      return true;\n+    }\n+}\n+\n /* Override command line options.  */\n void\n lm32_override_options (void)"}, {"sha": "6d0437342639b714ddbf3ff8e7684be4b340e894", "filename": "gcc/config/m32r/m32r.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34251c0ee6c80909aa2579dfdba34a132c10edf1/gcc%2Fconfig%2Fm32r%2Fm32r.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34251c0ee6c80909aa2579dfdba34a132c10edf1/gcc%2Fconfig%2Fm32r%2Fm32r.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.c?ref=34251c0ee6c80909aa2579dfdba34a132c10edf1", "patch": "@@ -1,6 +1,6 @@\n /* Subroutines used for code generation on the Renesas M32R cpu.\n    Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004,\n-   2005, 2007, 2008, 2009 Free Software Foundation, Inc.\n+   2005, 2007, 2008, 2009, 2010 Free Software Foundation, Inc.\n \n    This file is part of GCC.\n \n@@ -178,6 +178,11 @@ m32r_handle_option (size_t code, const char *arg, int value)\n {\n   switch (code)\n     {\n+    case OPT_G:\n+      g_switch_value = value;\n+      g_switch_set = true;\n+      return true;\n+\n     case OPT_m32r:\n       target_flags &= ~(MASK_M32R2 | MASK_M32RX);\n       return true;"}, {"sha": "468a424a33cd2c835c4e9e4c0f984a65da7b5cc8", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34251c0ee6c80909aa2579dfdba34a132c10edf1/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34251c0ee6c80909aa2579dfdba34a132c10edf1/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=34251c0ee6c80909aa2579dfdba34a132c10edf1", "patch": "@@ -15379,10 +15379,15 @@ mips_set_tune (const struct mips_cpu_info *info)\n /* Implement TARGET_HANDLE_OPTION.  */\n \n static bool\n-mips_handle_option (size_t code, const char *arg, int value ATTRIBUTE_UNUSED)\n+mips_handle_option (size_t code, const char *arg, int value)\n {\n   switch (code)\n     {\n+    case OPT_G:\n+      g_switch_value = value;\n+      g_switch_set = true;\n+      return true;\n+\n     case OPT_mabi_:\n       if (strcmp (arg, \"32\") == 0)\n \tmips_abi = ABI_32;"}, {"sha": "0f1f04052e6f6a337f24b7d8c8a01de2e403ea1b", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34251c0ee6c80909aa2579dfdba34a132c10edf1/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34251c0ee6c80909aa2579dfdba34a132c10edf1/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=34251c0ee6c80909aa2579dfdba34a132c10edf1", "patch": "@@ -3782,6 +3782,11 @@ rs6000_handle_option (size_t code, const char *arg, int value)\n \n   switch (code)\n     {\n+    case OPT_G:\n+      g_switch_value = value;\n+      g_switch_set = true;\n+      break;\n+\n     case OPT_mno_power:\n       target_flags &= ~(MASK_POWER | MASK_POWER2\n \t\t\t| MASK_MULTIPLE | MASK_STRING);"}, {"sha": "e7e56003a4e59f89c0022a5c0655b40fde643dfd", "filename": "gcc/config/score/score.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34251c0ee6c80909aa2579dfdba34a132c10edf1/gcc%2Fconfig%2Fscore%2Fscore.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34251c0ee6c80909aa2579dfdba34a132c10edf1/gcc%2Fconfig%2Fscore%2Fscore.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fscore%2Fscore.c?ref=34251c0ee6c80909aa2579dfdba34a132c10edf1", "patch": "@@ -1,5 +1,5 @@\n /* Output routines for Sunplus S+CORE processor\n-   Copyright (C) 2005, 2007, 2008, 2009 Free Software Foundation, Inc.\n+   Copyright (C) 2005, 2007, 2008, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Sunnorth.\n \n    This file is part of GCC.\n@@ -287,10 +287,15 @@ score_asm_file_end (void)\n \n /* Implement TARGET_HANDLE_OPTION.  */\n static bool\n-score_handle_option (size_t code, const char *arg, int value ATTRIBUTE_UNUSED)\n+score_handle_option (size_t code, const char *arg, int value)\n {\n   switch (code)\n     {\n+    case OPT_G:\n+      g_switch_value = value;\n+      g_switch_set = true;\n+      return true;\n+\n     case OPT_mscore7d:\n       target_flags &= ~(MASK_ALL_CPU_BITS);\n       target_flags |= MASK_SCORE7 | MASK_SCORE7D;"}, {"sha": "ebb3f38056a4907b0645b5451c8b95c3d54c35bd", "filename": "gcc/opts.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34251c0ee6c80909aa2579dfdba34a132c10edf1/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34251c0ee6c80909aa2579dfdba34a132c10edf1/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=34251c0ee6c80909aa2579dfdba34a132c10edf1", "patch": "@@ -1560,11 +1560,6 @@ common_handle_option (size_t scode, const char *arg, int value,\n       exit_after_options = true;\n       break;\n \n-    case OPT_G:\n-      g_switch_value = value;\n-      g_switch_set = true;\n-      break;\n-\n     case OPT_O:\n     case OPT_Os:\n     case OPT_Ofast:"}]}