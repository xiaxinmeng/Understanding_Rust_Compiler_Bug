{"sha": "5599262661af219726dccba200459671ed7bba8a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTU5OTI2MjY2MWFmMjE5NzI2ZGNjYmEyMDA0NTk2NzFlZDdiYmE4YQ==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-02-13T20:03:50Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-02-15T15:57:02Z"}, "message": "libstdc++: Whitespace and formatting adjustments\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/ranges_algo.h: Adjust whitespace and formatting.\n\t* include/bits/ranges_algobase.h: Likewise.\n\t* include/bits/ranges_uninitialized.h: Likewise.", "tree": {"sha": "5dff72c01e32453f59a1881b8861384cf1b6e1b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5dff72c01e32453f59a1881b8861384cf1b6e1b1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5599262661af219726dccba200459671ed7bba8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5599262661af219726dccba200459671ed7bba8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5599262661af219726dccba200459671ed7bba8a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5599262661af219726dccba200459671ed7bba8a/comments", "author": null, "committer": null, "parents": [{"sha": "b40c57bdd2ea2e171657e2bfbb7702171f4c9040", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b40c57bdd2ea2e171657e2bfbb7702171f4c9040", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b40c57bdd2ea2e171657e2bfbb7702171f4c9040"}], "stats": {"total": 712, "additions": 380, "deletions": 332}, "files": [{"sha": "b57ac9658e841ab22431e398c3d66adf79c8253f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5599262661af219726dccba200459671ed7bba8a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5599262661af219726dccba200459671ed7bba8a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=5599262661af219726dccba200459671ed7bba8a", "patch": "@@ -1,5 +1,9 @@\n 2020-02-15  Patrick Palka  <ppalka@redhat.com>\n \n+\t* include/bits/ranges_algo.h: Adjust whitespace and formatting.\n+\t* include/bits/ranges_algobase.h: Likewise.\n+\t* include/bits/ranges_uninitialized.h: Likewise.\n+\n \t* include/bits/ranges_algo.h: (adjacent_find, all_of, any_of,\n \tbinary_search, copy_if, count, count_if, equal_range, find, find_end,\n \tfind_first_of, find_if, find_if_not, for_each, generate, generate_n,"}, {"sha": "7f8f0fb964b280de25a3fbb84375472c4dc6f8c2", "filename": "libstdc++-v3/include/bits/ranges_algo.h", "status": "modified", "additions": 339, "deletions": 292, "changes": 631, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5599262661af219726dccba200459671ed7bba8a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5599262661af219726dccba200459671ed7bba8a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_algo.h?ref=5599262661af219726dccba200459671ed7bba8a", "patch": "@@ -73,7 +73,8 @@ namespace ranges\n \t     typename _Proj = identity,\n \t     indirect_unary_predicate<projected<_Iter, _Proj>> _Pred>\n       constexpr bool\n-      operator()(_Iter __first, _Sent __last, _Pred __pred, _Proj __proj = {}) const\n+      operator()(_Iter __first, _Sent __last,\n+\t\t _Pred __pred, _Proj __proj = {}) const\n       {\n \tfor (; __first != __last; ++__first)\n \t  if (!(bool)std::__invoke(__pred, std::__invoke(__proj, *__first)))\n@@ -82,7 +83,8 @@ namespace ranges\n       }\n \n     template<input_range _Range, typename _Proj = identity,\n-\t     indirect_unary_predicate<projected<iterator_t<_Range>, _Proj>> _Pred>\n+\t     indirect_unary_predicate<projected<iterator_t<_Range>, _Proj>>\n+\t       _Pred>\n       constexpr bool\n       operator()(_Range&& __r, _Pred __pred, _Proj __proj = {}) const\n       {\n@@ -99,7 +101,8 @@ namespace ranges\n \t     typename _Proj = identity,\n \t     indirect_unary_predicate<projected<_Iter, _Proj>> _Pred>\n       constexpr bool\n-      operator()(_Iter __first, _Sent __last, _Pred __pred, _Proj __proj = {}) const\n+      operator()(_Iter __first, _Sent __last,\n+\t\t _Pred __pred, _Proj __proj = {}) const\n       {\n \tfor (; __first != __last; ++__first)\n \t  if (std::__invoke(__pred, std::__invoke(__proj, *__first)))\n@@ -108,12 +111,13 @@ namespace ranges\n       }\n \n     template<input_range _Range, typename _Proj = identity,\n-\t     indirect_unary_predicate<projected<iterator_t<_Range>, _Proj>> _Pred>\n+\t     indirect_unary_predicate<projected<iterator_t<_Range>, _Proj>>\n+\t       _Pred>\n       constexpr bool\n       operator()(_Range&& __r, _Pred __pred, _Proj __proj = {}) const\n       {\n \treturn (*this)(ranges::begin(__r), ranges::end(__r),\n-\t\t\t      std::move(__pred), std::move(__proj));\n+\t\t       std::move(__pred), std::move(__proj));\n       }\n   };\n \n@@ -125,7 +129,8 @@ namespace ranges\n \t     typename _Proj = identity,\n \t     indirect_unary_predicate<projected<_Iter, _Proj>> _Pred>\n       constexpr bool\n-      operator()(_Iter __first, _Sent __last, _Pred __pred, _Proj __proj = {}) const\n+      operator()(_Iter __first, _Sent __last,\n+\t\t _Pred __pred, _Proj __proj = {}) const\n       {\n \tfor (; __first != __last; ++__first)\n \t  if (std::__invoke(__pred, std::__invoke(__proj, *__first)))\n@@ -134,7 +139,8 @@ namespace ranges\n       }\n \n     template<input_range _Range, typename _Proj = identity,\n-\t     indirect_unary_predicate<projected<iterator_t<_Range>, _Proj>> _Pred>\n+\t     indirect_unary_predicate<projected<iterator_t<_Range>, _Proj>>\n+\t       _Pred>\n       constexpr bool\n       operator()(_Range&& __r, _Pred __pred, _Proj __proj = {}) const\n       {\n@@ -183,7 +189,7 @@ namespace ranges\n       operator()(_Range&& __r, _Fun __f, _Proj __proj = {}) const\n       {\n \treturn (*this)(ranges::begin(__r), ranges::end(__r),\n-\t\t\t\tstd::move(__f), std::move(__proj));\n+\t\t       std::move(__f), std::move(__proj));\n       }\n   };\n \n@@ -196,7 +202,8 @@ namespace ranges\n       requires indirect_binary_predicate<ranges::equal_to,\n \t\t\t\t\t projected<_Iter, _Proj>, const _Tp*>\n       constexpr _Iter\n-      operator()(_Iter __first, _Sent __last, const _Tp& __value, _Proj __proj = {}) const\n+      operator()(_Iter __first, _Sent __last,\n+\t\t const _Tp& __value, _Proj __proj = {}) const\n       {\n \twhile (__first != __last\n \t    && !(std::__invoke(__proj, *__first) == __value))\n@@ -211,8 +218,8 @@ namespace ranges\n       constexpr safe_iterator_t<_Range>\n       operator()(_Range&& __r, const _Tp& __value, _Proj __proj = {}) const\n       {\n-\treturn (*this)(ranges::begin(__r), ranges::end(__r), __value,\n-\t\t\t    std::move(__proj));\n+\treturn (*this)(ranges::begin(__r), ranges::end(__r),\n+\t\t       __value, std::move(__proj));\n       }\n   };\n \n@@ -224,7 +231,8 @@ namespace ranges\n \t     typename _Proj = identity,\n \t     indirect_unary_predicate<projected<_Iter, _Proj>> _Pred>\n       constexpr _Iter\n-      operator()(_Iter __first, _Sent __last, _Pred __pred, _Proj __proj = {}) const\n+      operator()(_Iter __first, _Sent __last,\n+\t\t _Pred __pred, _Proj __proj = {}) const\n       {\n \twhile (__first != __last\n \t    && !(bool)std::__invoke(__pred, std::__invoke(__proj, *__first)))\n@@ -239,7 +247,7 @@ namespace ranges\n       operator()(_Range&& __r, _Pred __pred, _Proj __proj = {}) const\n       {\n \treturn (*this)(ranges::begin(__r), ranges::end(__r),\n-\t\t\t       std::move(__pred), std::move(__proj));\n+\t\t       std::move(__pred), std::move(__proj));\n       }\n   };\n \n@@ -251,7 +259,8 @@ namespace ranges\n \t     typename _Proj = identity,\n \t     indirect_unary_predicate<projected<_Iter, _Proj>> _Pred>\n       constexpr _Iter\n-      operator()(_Iter __first, _Sent __last, _Pred __pred, _Proj __proj = {}) const\n+      operator()(_Iter __first, _Sent __last,\n+\t\t _Pred __pred, _Proj __proj = {}) const\n       {\n \twhile (__first != __last\n \t    && (bool)std::__invoke(__pred, std::__invoke(__proj, *__first)))\n@@ -266,7 +275,7 @@ namespace ranges\n       operator()(_Range&& __r, _Pred __pred, _Proj __proj = {}) const\n       {\n \treturn (*this)(ranges::begin(__r), ranges::end(__r),\n-\t\t\t\t   std::move(__pred), std::move(__proj));\n+\t\t       std::move(__pred), std::move(__proj));\n       }\n   };\n \n@@ -281,8 +290,8 @@ namespace ranges\n       requires indirectly_comparable<_Iter1, _Iter2, _Pred, _Proj1, _Proj2>\n       constexpr _Iter1\n       operator()(_Iter1 __first1, _Sent1 __last1,\n-\t\t    _Iter2 __first2, _Sent2 __last2,\n-\t\t    _Pred __pred = {}, _Proj1 __proj1 = {}, _Proj2 __proj2 = {}) const\n+\t\t _Iter2 __first2, _Sent2 __last2, _Pred __pred = {},\n+\t\t _Proj1 __proj1 = {}, _Proj2 __proj2 = {}) const\n       {\n \tfor (; __first1 != __last1; ++__first1)\n \t  for (auto __iter = __first2; __iter != __last2; ++__iter)\n@@ -299,13 +308,13 @@ namespace ranges\n       requires indirectly_comparable<iterator_t<_Range1>, iterator_t<_Range2>,\n \t\t\t\t     _Pred, _Proj1, _Proj2>\n       constexpr safe_iterator_t<_Range1>\n-      operator()(_Range1&& __r1, _Range2&& __r2,\n-\t\t    _Pred __pred = {}, _Proj1 __proj1 = {}, _Proj2 __proj2 = {}) const\n+      operator()(_Range1&& __r1, _Range2&& __r2, _Pred __pred = {},\n+\t\t _Proj1 __proj1 = {}, _Proj2 __proj2 = {}) const\n       {\n \treturn (*this)(ranges::begin(__r1), ranges::end(__r1),\n-\t\t\t\t     ranges::begin(__r2), ranges::end(__r2),\n-\t\t\t\t     std::move(__pred),\n-\t\t\t\t     std::move(__proj1), std::move(__proj2));\n+\t\t       ranges::begin(__r2), ranges::end(__r2),\n+\t\t       std::move(__pred),\n+\t\t       std::move(__proj1), std::move(__proj2));\n       }\n   };\n \n@@ -319,7 +328,8 @@ namespace ranges\n \t\t\t\t\t projected<_Iter, _Proj>,\n \t\t\t\t\t const _Tp*>\n       constexpr iter_difference_t<_Iter>\n-      operator()(_Iter __first, _Sent __last, const _Tp& __value, _Proj __proj = {}) const\n+      operator()(_Iter __first, _Sent __last,\n+\t\t const _Tp& __value, _Proj __proj = {}) const\n       {\n \titer_difference_t<_Iter> __n = 0;\n \tfor (; __first != __last; ++__first)\n@@ -336,7 +346,7 @@ namespace ranges\n       operator()(_Range&& __r, const _Tp& __value, _Proj __proj = {}) const\n       {\n \treturn (*this)(ranges::begin(__r), ranges::end(__r),\n-\t\t\t     __value, std::move(__proj));\n+\t\t       __value, std::move(__proj));\n       }\n   };\n \n@@ -348,7 +358,8 @@ namespace ranges\n \t     typename _Proj = identity,\n \t     indirect_unary_predicate<projected<_Iter, _Proj>> _Pred>\n       constexpr iter_difference_t<_Iter>\n-      operator()(_Iter __first, _Sent __last, _Pred __pred, _Proj __proj = {}) const\n+      operator()(_Iter __first, _Sent __last,\n+\t\t _Pred __pred, _Proj __proj = {}) const\n       {\n \titer_difference_t<_Iter> __n = 0;\n \tfor (; __first != __last; ++__first)\n@@ -359,12 +370,13 @@ namespace ranges\n \n     template<input_range _Range,\n \t     typename _Proj = identity,\n-\t     indirect_unary_predicate<projected<iterator_t<_Range>, _Proj>> _Pred>\n+\t     indirect_unary_predicate<projected<iterator_t<_Range>, _Proj>>\n+\t       _Pred>\n       constexpr range_difference_t<_Range>\n       operator()(_Range&& __r, _Pred __pred, _Proj __proj = {}) const\n       {\n \treturn (*this)(ranges::begin(__r), ranges::end(__r),\n-\t\t\t\tstd::move(__pred), std::move(__proj));\n+\t\t       std::move(__pred), std::move(__proj));\n       }\n   };\n \n@@ -397,8 +409,9 @@ namespace ranges\n \t     typename _Proj1 = identity, typename _Proj2 = identity>\n       requires indirectly_comparable<_Iter1, _Iter2, _Pred, _Proj1, _Proj2>\n       constexpr mismatch_result<_Iter1, _Iter2>\n-      operator()(_Iter1 __first1, _Sent1 __last1, _Iter2 __first2, _Sent2 __last2,\n-\t       _Pred __pred = {}, _Proj1 __proj1 = {}, _Proj2 __proj2 = {}) const\n+      operator()(_Iter1 __first1, _Sent1 __last1,\n+\t\t _Iter2 __first2, _Sent2 __last2, _Pred __pred = {},\n+\t\t _Proj1 __proj1 = {}, _Proj2 __proj2 = {}) const\n       {\n \twhile (__first1 != __last1 && __first2 != __last2\n \t       && (bool)std::__invoke(__pred,\n@@ -417,13 +430,13 @@ namespace ranges\n       requires indirectly_comparable<iterator_t<_Range1>, iterator_t<_Range2>,\n \t\t\t\t     _Pred, _Proj1, _Proj2>\n       constexpr mismatch_result<iterator_t<_Range1>, iterator_t<_Range2>>\n-      operator()(_Range1&& __r1, _Range2&& __r2,\n-\t       _Pred __pred = {}, _Proj1 __proj1 = {}, _Proj2 __proj2 = {}) const\n+      operator()(_Range1&& __r1, _Range2&& __r2, _Pred __pred = {},\n+\t\t _Proj1 __proj1 = {}, _Proj2 __proj2 = {}) const\n       {\n \treturn (*this)(ranges::begin(__r1), ranges::end(__r1),\n-\t\t\t\tranges::begin(__r2), ranges::end(__r2),\n-\t\t\t\tstd::move(__pred),\n-\t\t\t\tstd::move(__proj1), std::move(__proj2));\n+\t\t       ranges::begin(__r2), ranges::end(__r2),\n+\t\t       std::move(__pred),\n+\t\t       std::move(__proj1), std::move(__proj2));\n       }\n   };\n \n@@ -437,8 +450,9 @@ namespace ranges\n \t     typename _Proj1 = identity, typename _Proj2 = identity>\n       requires indirectly_comparable<_Iter1, _Iter2, _Pred, _Proj1, _Proj2>\n       constexpr subrange<_Iter1>\n-      operator()(_Iter1 __first1, _Sent1 __last1, _Iter2 __first2, _Sent2 __last2,\n-\t     _Pred __pred = {}, _Proj1 __proj1 = {}, _Proj2 __proj2 = {}) const\n+      operator()(_Iter1 __first1, _Sent1 __last1,\n+\t\t _Iter2 __first2, _Sent2 __last2, _Pred __pred = {},\n+\t\t _Proj1 __proj1 = {}, _Proj2 __proj2 = {}) const\n       {\n \tif (__first1 == __last1 || __first2 == __last2)\n \t  return {__first1, __first1};\n@@ -480,13 +494,13 @@ namespace ranges\n       requires indirectly_comparable<iterator_t<_Range1>, iterator_t<_Range2>,\n \t\t\t\t     _Pred, _Proj1, _Proj2>\n       constexpr safe_subrange_t<_Range1>\n-      operator()(_Range1&& __r1, _Range2&& __r2,\n-\t     _Pred __pred = {}, _Proj1 __proj1 = {}, _Proj2 __proj2 = {}) const\n+      operator()(_Range1&& __r1, _Range2&& __r2, _Pred __pred = {},\n+\t\t _Proj1 __proj1 = {}, _Proj2 __proj2 = {}) const\n       {\n \treturn (*this)(ranges::begin(__r1), ranges::end(__r1),\n-\t\t\t      ranges::begin(__r2), ranges::end(__r2),\n-\t\t\t      std::move(__pred),\n-\t\t\t      std::move(__proj1), std::move(__proj2));\n+\t\t       ranges::begin(__r2), ranges::end(__r2),\n+\t\t       std::move(__pred),\n+\t\t       std::move(__proj1), std::move(__proj2));\n       }\n   };\n \n@@ -499,7 +513,7 @@ namespace ranges\n       requires indirectly_comparable<_Iter, const _Tp*, _Pred, _Proj>\n       constexpr subrange<_Iter>\n       operator()(_Iter __first, _Sent __last, iter_difference_t<_Iter> __count,\n-\t       const _Tp& __value, _Pred __pred = {}, _Proj __proj = {}) const\n+\t\t const _Tp& __value, _Pred __pred = {}, _Proj __proj = {}) const\n       {\n \tif (__count <= 0)\n \t  return {__first, __first};\n@@ -510,7 +524,8 @@ namespace ranges\n \tif (__count == 1)\n \t  {\n \t    __first = ranges::find_if(std::move(__first), __last,\n-\t\t\t\t      std::move(__value_comp), std::move(__proj));\n+\t\t\t\t      std::move(__value_comp),\n+\t\t\t\t      std::move(__proj));\n \t    if (__first == __last)\n \t      return {__first, __first};\n \t    else\n@@ -565,14 +580,15 @@ namespace ranges\n \n     template<forward_range _Range, typename _Tp,\n \t     typename _Pred = ranges::equal_to, typename _Proj = identity>\n-      requires indirectly_comparable<iterator_t<_Range>, const _Tp*, _Pred, _Proj>\n+      requires indirectly_comparable<iterator_t<_Range>, const _Tp*,\n+\t\t\t\t     _Pred, _Proj>\n       constexpr safe_subrange_t<_Range>\n       operator()(_Range&& __r, range_difference_t<_Range> __count,\n \t       const _Tp& __value, _Pred __pred = {}, _Proj __proj = {}) const\n       {\n \treturn (*this)(ranges::begin(__r), ranges::end(__r),\n-\t\t\t\tstd::move(__count), __value,\n-\t\t\t\tstd::move(__pred), std::move(__proj));\n+\t\t       std::move(__count), __value,\n+\t\t       std::move(__pred), std::move(__proj));\n       }\n   };\n \n@@ -587,8 +603,8 @@ namespace ranges\n       requires indirectly_comparable<_Iter1, _Iter2, _Pred, _Proj1, _Proj2>\n       constexpr subrange<_Iter1>\n       operator()(_Iter1 __first1, _Sent1 __last1,\n-\t       _Iter2 __first2, _Sent2 __last2,\n-\t       _Pred __pred = {}, _Proj1 __proj1 = {}, _Proj2 __proj2 = {}) const\n+\t\t _Iter2 __first2, _Sent2 __last2, _Pred __pred = {},\n+\t\t _Proj1 __proj1 = {}, _Proj2 __proj2 = {}) const\n       {\n \tif constexpr (bidirectional_iterator<_Iter1>\n \t\t      && bidirectional_iterator<_Iter2>)\n@@ -643,13 +659,13 @@ namespace ranges\n       requires indirectly_comparable<iterator_t<_Range1>, iterator_t<_Range2>,\n \t\t\t\t     _Pred, _Proj1, _Proj2>\n       constexpr safe_subrange_t<_Range1>\n-      operator()(_Range1&& __r1, _Range2&& __r2,\n-\t       _Pred __pred = {}, _Proj1 __proj1 = {}, _Proj2 __proj2 = {}) const\n+      operator()(_Range1&& __r1, _Range2&& __r2, _Pred __pred = {},\n+\t\t _Proj1 __proj1 = {}, _Proj2 __proj2 = {}) const\n       {\n \treturn (*this)(ranges::begin(__r1), ranges::end(__r1),\n-\t\t\t\tranges::begin(__r2), ranges::end(__r2),\n-\t\t\t\tstd::move(__pred),\n-\t\t\t\tstd::move(__proj1), std::move(__proj2));\n+\t\t       ranges::begin(__r2), ranges::end(__r2),\n+\t\t       std::move(__pred),\n+\t\t       std::move(__proj1), std::move(__proj2));\n       }\n   };\n \n@@ -664,7 +680,7 @@ namespace ranges\n \t       = ranges::equal_to>\n       constexpr _Iter\n       operator()(_Iter __first, _Sent __last,\n-\t\t    _Pred __pred = {}, _Proj __proj = {}) const\n+\t\t _Pred __pred = {}, _Proj __proj = {}) const\n       {\n \tif (__first == __last)\n \t  return __first;\n@@ -687,7 +703,7 @@ namespace ranges\n       operator()(_Range&& __r, _Pred __pred = {}, _Proj __proj = {}) const\n       {\n \treturn (*this)(ranges::begin(__r), ranges::end(__r),\n-\t\t\t\t     std::move(__pred), std::move(__proj));\n+\t\t       std::move(__pred), std::move(__proj));\n       }\n   };\n \n@@ -703,8 +719,8 @@ namespace ranges\n \t       = ranges::equal_to>\n       constexpr bool\n       operator()(_Iter1 __first1, _Sent1 __last1,\n-\t\t     _Iter2 __first2, _Sent2 __last2, _Pred __pred = {},\n-\t\t     _Proj1 __proj1 = {}, _Proj2 __proj2 = {}) const\n+\t\t _Iter2 __first2, _Sent2 __last2, _Pred __pred = {},\n+\t\t _Proj1 __proj1 = {}, _Proj2 __proj2 = {}) const\n       {\n \tconstexpr bool __sized_iters\n \t  = (sized_sentinel_for<_Sent1, _Iter1>\n@@ -769,12 +785,12 @@ namespace ranges\n \t       projected<iterator_t<_Range2>, _Proj2>> _Pred = ranges::equal_to>\n       constexpr bool\n       operator()(_Range1&& __r1, _Range2&& __r2, _Pred __pred = {},\n-\t\t     _Proj1 __proj1 = {}, _Proj2 __proj2 = {}) const\n+\t\t _Proj1 __proj1 = {}, _Proj2 __proj2 = {}) const\n       {\n \treturn (*this)(ranges::begin(__r1), ranges::end(__r1),\n-\t\t\t\t      ranges::begin(__r2), ranges::end(__r2),\n-\t\t\t\t      std::move(__pred),\n-\t\t\t\t      std::move(__proj1), std::move(__proj2));\n+\t\t       ranges::begin(__r2), ranges::end(__r2),\n+\t\t       std::move(__pred),\n+\t\t       std::move(__proj1), std::move(__proj2));\n       }\n   };\n \n@@ -791,7 +807,7 @@ namespace ranges\n       requires indirectly_copyable<_Iter, _Out>\n       constexpr copy_if_result<_Iter, _Out>\n       operator()(_Iter __first, _Sent __last, _Out __result,\n-\t      _Pred __pred, _Proj __proj = {}) const\n+\t\t _Pred __pred, _Proj __proj = {}) const\n       {\n \tfor (; __first != __last; ++__first)\n \t  if (std::__invoke(__pred, std::__invoke(__proj, *__first)))\n@@ -804,14 +820,16 @@ namespace ranges\n \n     template<input_range _Range, weakly_incrementable _Out,\n \t     typename _Proj = identity,\n-\t     indirect_unary_predicate<projected<iterator_t<_Range>, _Proj>> _Pred>\n+\t     indirect_unary_predicate<projected<iterator_t<_Range>, _Proj>>\n+\t       _Pred>\n       requires indirectly_copyable<iterator_t<_Range>, _Out>\n       constexpr copy_if_result<safe_iterator_t<_Range>, _Out>\n-      operator()(_Range&& __r, _Out __result, _Pred __pred, _Proj __proj = {}) const\n+      operator()(_Range&& __r, _Out __result,\n+\t\t _Pred __pred, _Proj __proj = {}) const\n       {\n \treturn (*this)(ranges::begin(__r), ranges::end(__r),\n-\t\t\t       std::move(__result),\n-\t\t\t       std::move(__pred), std::move(__proj));\n+\t\t       std::move(__result),\n+\t\t       std::move(__pred), std::move(__proj));\n       }\n   };\n \n@@ -827,7 +845,7 @@ namespace ranges\n       requires indirectly_swappable<_Iter1, _Iter2>\n       constexpr swap_ranges_result<_Iter1, _Iter2>\n       operator()(_Iter1 __first1, _Sent1 __last1,\n-\t\t  _Iter2 __first2, _Sent2 __last2) const\n+\t\t _Iter2 __first2, _Sent2 __last2) const\n       {\n \tfor (; __first1 != __last1 && __first2 != __last2;\n \t     ++__first1, (void)++__first2)\n@@ -842,7 +860,7 @@ namespace ranges\n       operator()(_Range1&& __r1, _Range2&& __r2) const\n       {\n \treturn (*this)(ranges::begin(__r1), ranges::end(__r1),\n-\t\t\t\t   ranges::begin(__r2), ranges::end(__r2));\n+\t\t       ranges::begin(__r2), ranges::end(__r2));\n       }\n   };\n \n@@ -883,7 +901,7 @@ namespace ranges\n \t\t\t\t     projected<_Iter, _Proj>>>\n       constexpr unary_transform_result<_Iter, _Out>\n       operator()(_Iter __first1, _Sent __last1, _Out __result,\n-\t\t_Fp __op, _Proj __proj = {}) const\n+\t\t _Fp __op, _Proj __proj = {}) const\n       {\n \tfor (; __first1 != __last1; ++__first1, (void)++__result)\n \t  *__result = std::__invoke(__op, std::__invoke(__proj, *__first1));\n@@ -899,8 +917,8 @@ namespace ranges\n       operator()(_Range&& __r, _Out __result, _Fp __op, _Proj __proj = {}) const\n       {\n \treturn (*this)(ranges::begin(__r), ranges::end(__r),\n-\t\t\t\t std::move(__result),\n-\t\t\t\t std::move(__op), std::move(__proj));\n+\t\t       std::move(__result),\n+\t\t       std::move(__op), std::move(__proj));\n       }\n \n     template<input_iterator _Iter1, sentinel_for<_Iter1> _Sent1,\n@@ -912,9 +930,10 @@ namespace ranges\n \t\t\t\t     projected<_Iter1, _Proj1>,\n \t\t\t\t     projected<_Iter2, _Proj2>>>\n       constexpr binary_transform_result<_Iter1, _Iter2, _Out>\n-      operator()(_Iter1 __first1, _Sent1 __last1, _Iter2 __first2, _Sent2 __last2,\n-\t\t_Out __result, _Fp __binary_op,\n-\t\t_Proj1 __proj1 = {}, _Proj2 __proj2 = {}) const\n+      operator()(_Iter1 __first1, _Sent1 __last1,\n+\t\t _Iter2 __first2, _Sent2 __last2,\n+\t\t _Out __result, _Fp __binary_op,\n+\t\t _Proj1 __proj1 = {}, _Proj2 __proj2 = {}) const\n       {\n \tfor (; __first1 != __last1 && __first2 != __last2;\n \t     ++__first1, (void)++__first2, ++__result)\n@@ -933,13 +952,13 @@ namespace ranges\n \t\t\t\t     projected<iterator_t<_Range2>, _Proj2>>>\n       constexpr binary_transform_result<safe_iterator_t<_Range1>,\n \t\t\t\t\tsafe_iterator_t<_Range2>, _Out>\n-      operator()(_Range1&& __r1, _Range2&& __r2, _Out __result,\n-\t\t_Fp __binary_op, _Proj1 __proj1 = {}, _Proj2 __proj2 = {}) const\n+      operator()(_Range1&& __r1, _Range2&& __r2, _Out __result, _Fp __binary_op,\n+\t\t _Proj1 __proj1 = {}, _Proj2 __proj2 = {}) const\n       {\n \treturn (*this)(ranges::begin(__r1), ranges::end(__r1),\n-\t\t\t\t ranges::begin(__r2), ranges::end(__r2),\n-\t\t\t\t std::move(__result), std::move(__binary_op),\n-\t\t\t\t std::move(__proj1), std::move(__proj2));\n+\t\t       ranges::begin(__r2), ranges::end(__r2),\n+\t\t       std::move(__result), std::move(__binary_op),\n+\t\t       std::move(__proj1), std::move(__proj2));\n       }\n   };\n \n@@ -954,8 +973,8 @@ namespace ranges\n \t\t\t\t     const _Tp1*>\n       constexpr _Iter\n       operator()(_Iter __first, _Sent __last,\n-\t      const _Tp1& __old_value, const _Tp2& __new_value,\n-\t      _Proj __proj = {}) const\n+\t\t const _Tp1& __old_value, const _Tp2& __new_value,\n+\t\t _Proj __proj = {}) const\n       {\n \tfor (; __first != __last; ++__first)\n \t  if (std::__invoke(__proj, *__first) == __old_value)\n@@ -971,11 +990,11 @@ namespace ranges\n \t\t\t\t     const _Tp1*>\n       constexpr safe_iterator_t<_Range>\n       operator()(_Range&& __r,\n-\t      const _Tp1& __old_value, const _Tp2& __new_value,\n-\t      _Proj __proj = {}) const\n+\t\t const _Tp1& __old_value, const _Tp2& __new_value,\n+\t\t _Proj __proj = {}) const\n       {\n \treturn (*this)(ranges::begin(__r), ranges::end(__r),\n-\t\t\t       __old_value, __new_value, std::move(__proj));\n+\t\t       __old_value, __new_value, std::move(__proj));\n       }\n   };\n \n@@ -998,15 +1017,15 @@ namespace ranges\n       }\n \n     template<input_range _Range, typename _Tp, typename _Proj = identity,\n-\t     indirect_unary_predicate<projected<iterator_t<_Range>, _Proj>> _Pred>\n+\t     indirect_unary_predicate<projected<iterator_t<_Range>, _Proj>>\n+\t       _Pred>\n       requires indirectly_writable<iterator_t<_Range>, const _Tp&>\n       constexpr safe_iterator_t<_Range>\n       operator()(_Range&& __r,\n \t\t _Pred __pred, const _Tp& __new_value, _Proj __proj = {}) const\n       {\n \treturn (*this)(ranges::begin(__r), ranges::end(__r),\n-\t\t\t\t  std::move(__pred), __new_value,\n-\t\t\t\t  std::move(__proj));\n+\t\t       std::move(__pred), __new_value, std::move(__proj));\n       }\n   };\n \n@@ -1025,8 +1044,8 @@ namespace ranges\n \t\t\t\t     projected<_Iter, _Proj>, const _Tp1*>\n       constexpr replace_copy_result<_Iter, _Out>\n       operator()(_Iter __first, _Sent __last, _Out __result,\n-\t\t   const _Tp1& __old_value, const _Tp2& __new_value,\n-\t\t   _Proj __proj = {}) const\n+\t\t const _Tp1& __old_value, const _Tp2& __new_value,\n+\t\t _Proj __proj = {}) const\n       {\n \tfor (; __first != __last; ++__first, (void)++__result)\n \t  if (std::__invoke(__proj, *__first) == __old_value)\n@@ -1044,12 +1063,12 @@ namespace ranges\n \t\t\t\t     const _Tp1*>\n       constexpr replace_copy_result<safe_iterator_t<_Range>, _Out>\n       operator()(_Range&& __r, _Out __result,\n-\t\t   const _Tp1& __old_value, const _Tp2& __new_value,\n-\t\t   _Proj __proj = {}) const\n+\t\t const _Tp1& __old_value, const _Tp2& __new_value,\n+\t\t _Proj __proj = {}) const\n       {\n \treturn (*this)(ranges::begin(__r), ranges::end(__r),\n-\t\t\t\t    std::move(__result), __old_value,\n-\t\t\t\t    __new_value, std::move(__proj));\n+\t\t       std::move(__result), __old_value,\n+\t\t       __new_value, std::move(__proj));\n       }\n   };\n \n@@ -1067,7 +1086,7 @@ namespace ranges\n       requires indirectly_copyable<_Iter, _Out>\n       constexpr replace_copy_if_result<_Iter, _Out>\n       operator()(_Iter __first, _Sent __last, _Out __result,\n-\t\t      _Pred __pred, const _Tp& __new_value, _Proj __proj = {}) const\n+\t\t _Pred __pred, const _Tp& __new_value, _Proj __proj = {}) const\n       {\n \tfor (; __first != __last; ++__first, (void)++__result)\n \t  if (std::__invoke(__pred, std::__invoke(__proj, *__first)))\n@@ -1080,15 +1099,16 @@ namespace ranges\n     template<input_range _Range,\n \t     typename _Tp, output_iterator<const _Tp&> _Out,\n \t     typename _Proj = identity,\n-\t     indirect_unary_predicate<projected<iterator_t<_Range>, _Proj>> _Pred>\n+\t     indirect_unary_predicate<projected<iterator_t<_Range>, _Proj>>\n+\t       _Pred>\n       requires indirectly_copyable<iterator_t<_Range>, _Out>\n       constexpr replace_copy_if_result<safe_iterator_t<_Range>, _Out>\n       operator()(_Range&& __r, _Out __result,\n-\t\t      _Pred __pred, const _Tp& __new_value, _Proj __proj = {}) const\n+\t\t _Pred __pred, const _Tp& __new_value, _Proj __proj = {}) const\n       {\n \treturn (*this)(ranges::begin(__r), ranges::end(__r),\n-\t\t\t\t       std::move(__result), std::move(__pred),\n-\t\t\t\t       __new_value, std::move(__proj));\n+\t\t       std::move(__result), std::move(__pred),\n+\t\t       __new_value, std::move(__proj));\n       }\n   };\n \n@@ -1129,8 +1149,7 @@ namespace ranges\n       constexpr safe_iterator_t<_Range>\n       operator()(_Range&& __r, _Fp __gen) const\n       {\n-\treturn (*this)(ranges::begin(__r), ranges::end(__r),\n-\t\t\t\tstd::move(__gen));\n+\treturn (*this)(ranges::begin(__r), ranges::end(__r), std::move(__gen));\n       }\n   };\n \n@@ -1142,7 +1161,8 @@ namespace ranges\n \t     typename _Proj = identity,\n \t     indirect_unary_predicate<projected<_Iter, _Proj>> _Pred>\n       constexpr subrange<_Iter>\n-      operator()(_Iter __first, _Sent __last, _Pred __pred, _Proj __proj = {}) const\n+      operator()(_Iter __first, _Sent __last,\n+\t\t _Pred __pred, _Proj __proj = {}) const\n       {\n \t__first = ranges::find_if(__first, __last, __pred, __proj);\n \tif (__first == __last)\n@@ -1161,13 +1181,14 @@ namespace ranges\n       }\n \n     template<forward_range _Range, typename _Proj = identity,\n-\t     indirect_unary_predicate<projected<iterator_t<_Range>, _Proj>> _Pred>\n+\t     indirect_unary_predicate<projected<iterator_t<_Range>, _Proj>>\n+\t       _Pred>\n       requires permutable<iterator_t<_Range>>\n       constexpr safe_subrange_t<_Range>\n       operator()(_Range&& __r, _Pred __pred, _Proj __proj = {}) const\n       {\n \treturn (*this)(ranges::begin(__r), ranges::end(__r),\n-\t\t\t\t std::move(__pred), std::move(__proj));\n+\t\t       std::move(__pred), std::move(__proj));\n       }\n   };\n \n@@ -1181,7 +1202,8 @@ namespace ranges\n \t\t\t\t\t projected<_Iter, _Proj>,\n \t\t\t\t\t const _Tp*>\n       constexpr subrange<_Iter>\n-      operator()(_Iter __first, _Sent __last, const _Tp& __value, _Proj __proj = {}) const\n+      operator()(_Iter __first, _Sent __last,\n+\t\t const _Tp& __value, _Proj __proj = {}) const\n       {\n \tauto __pred = [&] (auto&& __arg) {\n \t  return std::forward<decltype(__arg)>(__arg) == __value;\n@@ -1199,7 +1221,7 @@ namespace ranges\n       operator()(_Range&& __r, const _Tp& __value, _Proj __proj = {}) const\n       {\n \treturn (*this)(ranges::begin(__r), ranges::end(__r),\n-\t\t\t      __value, std::move(__proj));\n+\t\t       __value, std::move(__proj));\n       }\n   };\n \n@@ -1216,7 +1238,7 @@ namespace ranges\n       requires indirectly_copyable<_Iter, _Out>\n       constexpr remove_copy_if_result<_Iter, _Out>\n       operator()(_Iter __first, _Sent __last, _Out __result,\n-\t\t     _Pred __pred, _Proj __proj = {}) const\n+\t\t _Pred __pred, _Proj __proj = {}) const\n       {\n \tfor (; __first != __last; ++__first)\n \t  if (!(bool)std::__invoke(__pred, std::__invoke(__proj, *__first)))\n@@ -1229,15 +1251,16 @@ namespace ranges\n \n     template<input_range _Range, weakly_incrementable _Out,\n \t     typename _Proj = identity,\n-\t     indirect_unary_predicate<projected<iterator_t<_Range>, _Proj>> _Pred>\n+\t     indirect_unary_predicate<projected<iterator_t<_Range>, _Proj>>\n+\t       _Pred>\n       requires indirectly_copyable<iterator_t<_Range>, _Out>\n       constexpr remove_copy_if_result<safe_iterator_t<_Range>, _Out>\n       operator()(_Range&& __r, _Out __result,\n-\t\t     _Pred __pred, _Proj __proj = {}) const\n+\t\t _Pred __pred, _Proj __proj = {}) const\n       {\n \treturn (*this)(ranges::begin(__r), ranges::end(__r),\n-\t\t\t\t      std::move(__result),\n-\t\t\t\t      std::move(__pred), std::move(__proj));\n+\t\t       std::move(__result),\n+\t\t       std::move(__pred), std::move(__proj));\n       }\n   };\n \n@@ -1256,7 +1279,7 @@ namespace ranges\n \t\t\t\t     const _Tp*>\n       constexpr remove_copy_result<_Iter, _Out>\n       operator()(_Iter __first, _Sent __last, _Out __result,\n-\t\t  const _Tp& __value, _Proj __proj = {}) const\n+\t\t const _Tp& __value, _Proj __proj = {}) const\n       {\n \tfor (; __first != __last; ++__first)\n \t  if (!(std::__invoke(__proj, *__first) == __value))\n@@ -1275,11 +1298,10 @@ namespace ranges\n \t\t\t\t     const _Tp*>\n       constexpr remove_copy_result<safe_iterator_t<_Range>, _Out>\n       operator()(_Range&& __r, _Out __result,\n-\t\t  const _Tp& __value, _Proj __proj = {}) const\n+\t\t const _Tp& __value, _Proj __proj = {}) const\n       {\n \treturn (*this)(ranges::begin(__r), ranges::end(__r),\n-\t\t\t\t   std::move(__result), __value,\n-\t\t\t\t   std::move(__proj));\n+\t\t       std::move(__result), __value, std::move(__proj));\n       }\n   };\n \n@@ -1292,7 +1314,8 @@ namespace ranges\n \t     indirect_equivalence_relation<\n \t       projected<_Iter, _Proj>> _Comp = ranges::equal_to>\n       constexpr subrange<_Iter>\n-      operator()(_Iter __first, _Sent __last, _Comp __comp = {}, _Proj __proj = {}) const\n+      operator()(_Iter __first, _Sent __last,\n+\t\t _Comp __comp = {}, _Proj __proj = {}) const\n       {\n \t__first = ranges::adjacent_find(__first, __last, __comp, __proj);\n \tif (__first == __last)\n@@ -1316,7 +1339,7 @@ namespace ranges\n       operator()(_Range&& __r, _Comp __comp = {}, _Proj __proj = {}) const\n       {\n \treturn (*this)(ranges::begin(__r), ranges::end(__r),\n-\t\t\t      std::move(__comp), std::move(__proj));\n+\t\t       std::move(__comp), std::move(__proj));\n       }\n   };\n \n@@ -1338,7 +1361,7 @@ namespace ranges\n \t    || indirectly_copyable_storable<_Iter, _Out>)\n       constexpr unique_copy_result<_Iter, _Out>\n       operator()(_Iter __first, _Sent __last, _Out __result,\n-\t\t  _Comp __comp = {}, _Proj __proj = {}) const\n+\t\t _Comp __comp = {}, _Proj __proj = {}) const\n       {\n \tif (__first == __last)\n \t  return {std::move(__first), std::move(__result)};\n@@ -1398,11 +1421,11 @@ namespace ranges\n \t    || indirectly_copyable_storable<iterator_t<_Range>, _Out>)\n       constexpr unique_copy_result<safe_iterator_t<_Range>, _Out>\n       operator()(_Range&& __r, _Out __result,\n-\t\t  _Comp __comp = {}, _Proj __proj = {}) const\n+\t\t _Comp __comp = {}, _Proj __proj = {}) const\n       {\n \treturn (*this)(ranges::begin(__r), ranges::end(__r),\n-\t\t\t\t   std::move(__result),\n-\t\t\t\t   std::move(__comp), std::move(__proj));\n+\t\t       std::move(__result),\n+\t\t       std::move(__comp), std::move(__proj));\n       }\n   };\n \n@@ -1485,7 +1508,7 @@ namespace ranges\n       operator()(_Range&& __r, _Out __result) const\n       {\n \treturn (*this)(ranges::begin(__r), ranges::end(__r),\n-\t\t\t\t    std::move(__result));\n+\t\t       std::move(__result));\n       }\n   };\n \n@@ -1631,9 +1654,8 @@ namespace ranges\n       constexpr safe_subrange_t<_Range>\n       operator()(_Range&& __r, iterator_t<_Range> __middle) const\n       {\n-\treturn (*this)(ranges::begin(__r),\n-\t\t\t      std::move(__middle),\n-\t\t\t      ranges::end(__r));\n+\treturn (*this)(ranges::begin(__r), std::move(__middle),\n+\t\t       ranges::end(__r));\n       }\n   };\n \n@@ -1648,7 +1670,8 @@ namespace ranges\n \t     weakly_incrementable _Out>\n       requires indirectly_copyable<_Iter, _Out>\n       constexpr rotate_copy_result<_Iter, _Out>\n-      operator()(_Iter __first, _Iter __middle, _Sent __last, _Out __result) const\n+      operator()(_Iter __first, _Iter __middle, _Sent __last,\n+\t\t _Out __result) const\n       {\n \tauto __copy1 = ranges::copy(__middle,\n \t\t\t\t    std::move(__last),\n@@ -1664,10 +1687,8 @@ namespace ranges\n       constexpr rotate_copy_result<safe_iterator_t<_Range>, _Out>\n       operator()(_Range&& __r, iterator_t<_Range> __middle, _Out __result) const\n       {\n-\treturn (*this)(ranges::begin(__r),\n-\t\t\t\t   std::move(__middle),\n-\t\t\t\t   ranges::end(__r),\n-\t\t\t\t   std::move(__result));\n+\treturn (*this)(ranges::begin(__r), std::move(__middle),\n+\t\t       ranges::end(__r), std::move(__result));\n       }\n   };\n \n@@ -1695,7 +1716,7 @@ namespace ranges\n       operator()(_Range&& __r, _Gen&& __g) const\n       {\n \treturn (*this)(ranges::begin(__r), ranges::end(__r),\n-\t\t\t       std::forward<_Gen>(__g));\n+\t\t       std::forward<_Gen>(__g));\n       }\n   };\n \n@@ -1708,7 +1729,8 @@ namespace ranges\n \t     typename _Comp = ranges::less, typename _Proj = identity>\n       requires sortable<_Iter, _Comp, _Proj>\n       constexpr _Iter\n-      operator()(_Iter __first, _Sent __last, _Comp __comp = {}, _Proj __proj = {}) const\n+      operator()(_Iter __first, _Sent __last,\n+\t\t _Comp __comp = {}, _Proj __proj = {}) const\n       {\n \tauto __lasti = ranges::next(__first, __last);\n \tstd::push_heap(__first, __lasti,\n@@ -1723,7 +1745,7 @@ namespace ranges\n       operator()(_Range&& __r, _Comp __comp = {}, _Proj __proj = {}) const\n       {\n \treturn (*this)(ranges::begin(__r), ranges::end(__r),\n-\t\t\t\t std::move(__comp), std::move(__proj));\n+\t\t       std::move(__comp), std::move(__proj));\n       }\n   };\n \n@@ -1735,7 +1757,8 @@ namespace ranges\n \t     typename _Comp = ranges::less, typename _Proj = identity>\n       requires sortable<_Iter, _Comp, _Proj>\n       constexpr _Iter\n-      operator()(_Iter __first, _Sent __last, _Comp __comp = {}, _Proj __proj = {}) const\n+      operator()(_Iter __first, _Sent __last,\n+\t\t _Comp __comp = {}, _Proj __proj = {}) const\n       {\n \tauto __lasti = ranges::next(__first, __last);\n \tstd::pop_heap(__first, __lasti,\n@@ -1750,7 +1773,7 @@ namespace ranges\n       operator()(_Range&& __r, _Comp __comp = {}, _Proj __proj = {}) const\n       {\n \treturn (*this)(ranges::begin(__r), ranges::end(__r),\n-\t\t\t\t std::move(__comp), std::move(__proj));\n+\t\t       std::move(__comp), std::move(__proj));\n       }\n   };\n \n@@ -1762,7 +1785,8 @@ namespace ranges\n \t     typename _Comp = ranges::less, typename _Proj = identity>\n       requires sortable<_Iter, _Comp, _Proj>\n       constexpr _Iter\n-      operator()(_Iter __first, _Sent __last, _Comp __comp = {}, _Proj __proj = {}) const\n+      operator()(_Iter __first, _Sent __last,\n+\t\t _Comp __comp = {}, _Proj __proj = {}) const\n       {\n \tauto __lasti = ranges::next(__first, __last);\n \tstd::make_heap(__first, __lasti,\n@@ -1777,7 +1801,7 @@ namespace ranges\n       operator()(_Range&& __r, _Comp __comp = {}, _Proj __proj = {}) const\n       {\n \treturn (*this)(ranges::begin(__r), ranges::end(__r),\n-\t\t\t\t std::move(__comp), std::move(__proj));\n+\t\t       std::move(__comp), std::move(__proj));\n       }\n   };\n \n@@ -1789,7 +1813,8 @@ namespace ranges\n \t     typename _Comp = ranges::less, typename _Proj = identity>\n       requires sortable<_Iter, _Comp, _Proj>\n       constexpr _Iter\n-      operator()(_Iter __first, _Sent __last, _Comp __comp = {}, _Proj __proj = {}) const\n+      operator()(_Iter __first, _Sent __last,\n+\t\t _Comp __comp = {}, _Proj __proj = {}) const\n       {\n \tauto __lasti = ranges::next(__first, __last);\n \tstd::sort_heap(__first, __lasti,\n@@ -1804,7 +1829,7 @@ namespace ranges\n       operator()(_Range&& __r, _Comp __comp = {}, _Proj __proj = {}) const\n       {\n \treturn (*this)(ranges::begin(__r), ranges::end(__r),\n-\t\t\t\t std::move(__comp), std::move(__proj));\n+\t\t       std::move(__comp), std::move(__proj));\n       }\n   };\n \n@@ -1818,7 +1843,7 @@ namespace ranges\n \t       _Comp = ranges::less>\n       constexpr _Iter\n       operator()(_Iter __first, _Sent __last,\n-\t\t    _Comp __comp = {}, _Proj __proj = {}) const\n+\t\t _Comp __comp = {}, _Proj __proj = {}) const\n       {\n \titer_difference_t<_Iter> __n = ranges::distance(__first, __last);\n \titer_difference_t<_Iter> __parent = 0, __child = 1;\n@@ -1841,7 +1866,7 @@ namespace ranges\n       operator()(_Range&& __r, _Comp __comp = {}, _Proj __proj = {}) const\n       {\n \treturn (*this)(ranges::begin(__r), ranges::end(__r),\n-\t\t\t\t     std::move(__comp), std::move(__proj));\n+\t\t       std::move(__comp), std::move(__proj));\n       }\n   };\n \n@@ -1854,7 +1879,8 @@ namespace ranges\n \t     indirect_strict_weak_order<projected<_Iter, _Proj>>\n \t       _Comp = ranges::less>\n       constexpr bool\n-      operator()(_Iter __first, _Sent __last, _Comp __comp = {}, _Proj __proj = {}) const\n+      operator()(_Iter __first, _Sent __last,\n+\t\t _Comp __comp = {}, _Proj __proj = {}) const\n       {\n \treturn (__last\n \t\t== ranges::is_heap_until(__first, __last,\n@@ -1870,7 +1896,7 @@ namespace ranges\n       operator()(_Range&& __r, _Comp __comp = {}, _Proj __proj = {}) const\n       {\n \treturn (*this)(ranges::begin(__r), ranges::end(__r),\n-\t\t\t       std::move(__comp), std::move(__proj));\n+\t\t       std::move(__comp), std::move(__proj));\n       }\n   };\n \n@@ -1882,7 +1908,8 @@ namespace ranges\n \t     typename _Comp = ranges::less, typename _Proj = identity>\n       requires sortable<_Iter, _Comp, _Proj>\n       constexpr _Iter\n-      operator()(_Iter __first, _Sent __last, _Comp __comp = {}, _Proj __proj = {}) const\n+      operator()(_Iter __first, _Sent __last,\n+\t\t _Comp __comp = {}, _Proj __proj = {}) const\n       {\n \tauto __lasti = ranges::next(__first, __last);\n \tstd::sort(std::move(__first), __lasti,\n@@ -1897,7 +1924,7 @@ namespace ranges\n       operator()(_Range&& __r, _Comp __comp = {}, _Proj __proj = {}) const\n       {\n \treturn (*this)(ranges::begin(__r), ranges::end(__r),\n-\t\t\t    std::move(__comp), std::move(__proj));\n+\t\t       std::move(__comp), std::move(__proj));\n       }\n   };\n \n@@ -1910,7 +1937,7 @@ namespace ranges\n       requires sortable<_Iter, _Comp, _Proj>\n       _Iter\n       operator()(_Iter __first, _Sent __last,\n-\t\t  _Comp __comp = {}, _Proj __proj = {}) const\n+\t\t _Comp __comp = {}, _Proj __proj = {}) const\n       {\n \tauto __lasti = ranges::next(__first, __last);\n \tstd::stable_sort(std::move(__first), __lasti,\n@@ -1925,7 +1952,7 @@ namespace ranges\n       operator()(_Range&& __r, _Comp __comp = {}, _Proj __proj = {}) const\n       {\n \treturn (*this)(ranges::begin(__r), ranges::end(__r),\n-\t\t\t\t   std::move(__comp), std::move(__proj));\n+\t\t       std::move(__comp), std::move(__proj));\n       }\n   };\n \n@@ -1938,7 +1965,7 @@ namespace ranges\n       requires sortable<_Iter, _Comp, _Proj>\n       constexpr _Iter\n       operator()(_Iter __first, _Iter __middle, _Sent __last,\n-\t\t   _Comp __comp = {}, _Proj __proj = {}) const\n+\t\t _Comp __comp = {}, _Proj __proj = {}) const\n       {\n \tif (__first == __middle)\n \t  return ranges::next(__first, __last);\n@@ -1964,12 +1991,11 @@ namespace ranges\n       requires sortable<iterator_t<_Range>, _Comp, _Proj>\n       constexpr safe_iterator_t<_Range>\n       operator()(_Range&& __r, iterator_t<_Range> __middle,\n-\t\t   _Comp __comp = {}, _Proj __proj = {}) const\n+\t\t _Comp __comp = {}, _Proj __proj = {}) const\n       {\n-\treturn (*this)(ranges::begin(__r),\n-\t\t\t\t    std::move(__middle),\n-\t\t\t\t    ranges::end(__r),\n-\t\t\t\t    std::move(__comp), std::move(__proj));\n+\treturn (*this)(ranges::begin(__r), std::move(__middle),\n+\t\t       ranges::end(__r),\n+\t\t       std::move(__comp), std::move(__proj));\n       }\n   };\n \n@@ -1991,9 +2017,9 @@ namespace ranges\n \t\t\t\t      projected<_Iter2, _Proj2>>\n       constexpr partial_sort_copy_result<_Iter1, _Iter2>\n       operator()(_Iter1 __first, _Sent1 __last,\n-\t\t\t_Iter2 __result_first, _Sent2 __result_last,\n-\t\t\t_Comp __comp = {},\n-\t\t\t_Proj1 __proj1 = {}, _Proj2 __proj2 = {}) const\n+\t\t _Iter2 __result_first, _Sent2 __result_last,\n+\t\t _Comp __comp = {},\n+\t\t _Proj1 __proj1 = {}, _Proj2 __proj2 = {}) const\n       {\n \tif (__result_first == __result_last)\n \t  {\n@@ -2039,12 +2065,12 @@ namespace ranges\n       constexpr partial_sort_copy_result<safe_iterator_t<_Range1>,\n \t\t\t\t\t safe_iterator_t<_Range2>>\n       operator()(_Range1&& __r, _Range2&& __out, _Comp __comp = {},\n-\t\t\t_Proj1 __proj1 = {}, _Proj2 __proj2 = {}) const\n+\t\t _Proj1 __proj1 = {}, _Proj2 __proj2 = {}) const\n       {\n \treturn (*this)(ranges::begin(__r), ranges::end(__r),\n-\t\t\t\t\t ranges::begin(__out), ranges::end(__out),\n-\t\t\t\t\t std::move(__comp),\n-\t\t\t\t\t std::move(__proj1), std::move(__proj2));\n+\t\t       ranges::begin(__out), ranges::end(__out),\n+\t\t       std::move(__comp),\n+\t\t       std::move(__proj1), std::move(__proj2));\n       }\n   };\n \n@@ -2058,7 +2084,7 @@ namespace ranges\n \t       _Comp = ranges::less>\n       constexpr _Iter\n       operator()(_Iter __first, _Sent __last,\n-\t\t      _Comp __comp = {}, _Proj __proj = {}) const\n+\t\t _Comp __comp = {}, _Proj __proj = {}) const\n       {\n \tif (__first == __last)\n \t  return __first;\n@@ -2079,7 +2105,7 @@ namespace ranges\n       operator()(_Range&& __r, _Comp __comp = {}, _Proj __proj = {}) const\n       {\n \treturn (*this)(ranges::begin(__r), ranges::end(__r),\n-\t\t\t\t       std::move(__comp), std::move(__proj));\n+\t\t       std::move(__comp), std::move(__proj));\n       }\n   };\n \n@@ -2092,7 +2118,8 @@ namespace ranges\n \t     indirect_strict_weak_order<projected<_Iter, _Proj>>\n \t       _Comp = ranges::less>\n       constexpr bool\n-      operator()(_Iter __first, _Sent __last, _Comp __comp = {}, _Proj __proj = {}) const\n+      operator()(_Iter __first, _Sent __last,\n+\t\t _Comp __comp = {}, _Proj __proj = {}) const\n       {\n \tif (__first == __last)\n \t  return true;\n@@ -2113,7 +2140,7 @@ namespace ranges\n       operator()(_Range&& __r, _Comp __comp = {}, _Proj __proj = {}) const\n       {\n \treturn (*this)(ranges::begin(__r), ranges::end(__r),\n-\t\t\t\t std::move(__comp), std::move(__proj));\n+\t\t       std::move(__comp), std::move(__proj));\n       }\n   };\n \n@@ -2126,7 +2153,7 @@ namespace ranges\n       requires sortable<_Iter, _Comp, _Proj>\n       constexpr _Iter\n       operator()(_Iter __first, _Iter __nth, _Sent __last,\n-\t\t  _Comp __comp = {}, _Proj __proj = {}) const\n+\t\t _Comp __comp = {}, _Proj __proj = {}) const\n       {\n \tauto __lasti = ranges::next(__first, __last);\n \tstd::nth_element(std::move(__first), std::move(__nth), __lasti,\n@@ -2139,11 +2166,10 @@ namespace ranges\n       requires sortable<iterator_t<_Range>, _Comp, _Proj>\n       constexpr safe_iterator_t<_Range>\n       operator()(_Range&& __r, iterator_t<_Range> __nth,\n-\t\t  _Comp __comp = {}, _Proj __proj = {}) const\n+\t\t _Comp __comp = {}, _Proj __proj = {}) const\n       {\n \treturn (*this)(ranges::begin(__r), std::move(__nth),\n-\t\t\t\t   ranges::end(__r),\n-\t\t\t\t   std::move(__comp), std::move(__proj));\n+\t\t       ranges::end(__r), std::move(__comp), std::move(__proj));\n       }\n   };\n \n@@ -2157,7 +2183,7 @@ namespace ranges\n \t       _Comp = ranges::less>\n       constexpr _Iter\n       operator()(_Iter __first, _Sent __last,\n-\t\t  const _Tp& __value, _Comp __comp = {}, _Proj __proj = {}) const\n+\t\t const _Tp& __value, _Comp __comp = {}, _Proj __proj = {}) const\n       {\n \tauto __len = ranges::distance(__first, __last);\n \n@@ -2184,11 +2210,10 @@ namespace ranges\n \t       _Comp = ranges::less>\n       constexpr safe_iterator_t<_Range>\n       operator()(_Range&& __r,\n-\t\t  const _Tp& __value, _Comp __comp = {}, _Proj __proj = {}) const\n+\t\t const _Tp& __value, _Comp __comp = {}, _Proj __proj = {}) const\n       {\n \treturn (*this)(ranges::begin(__r), ranges::end(__r),\n-\t\t\t\t   __value,\n-\t\t\t\t   std::move(__comp), std::move(__proj));\n+\t\t       __value, std::move(__comp), std::move(__proj));\n       }\n   };\n \n@@ -2202,7 +2227,7 @@ namespace ranges\n \t       _Comp = ranges::less>\n       constexpr _Iter\n       operator()(_Iter __first, _Sent __last,\n-\t\t  const _Tp& __value, _Comp __comp = {}, _Proj __proj = {}) const\n+\t\t const _Tp& __value, _Comp __comp = {}, _Proj __proj = {}) const\n       {\n \tauto __len = ranges::distance(__first, __last);\n \n@@ -2229,11 +2254,10 @@ namespace ranges\n \t       _Comp = ranges::less>\n       constexpr safe_iterator_t<_Range>\n       operator()(_Range&& __r,\n-\t\t  const _Tp& __value, _Comp __comp = {}, _Proj __proj = {}) const\n+\t\t const _Tp& __value, _Comp __comp = {}, _Proj __proj = {}) const\n       {\n \treturn (*this)(ranges::begin(__r), ranges::end(__r),\n-\t\t\t\t   __value,\n-\t\t\t\t   std::move(__comp), std::move(__proj));\n+\t\t       __value, std::move(__comp), std::move(__proj));\n       }\n   };\n \n@@ -2247,7 +2271,7 @@ namespace ranges\n \t       _Comp = ranges::less>\n       constexpr subrange<_Iter>\n       operator()(_Iter __first, _Sent __last,\n-\t\t  const _Tp& __value, _Comp __comp = {}, _Proj __proj = {}) const\n+\t\t const _Tp& __value, _Comp __comp = {}, _Proj __proj = {}) const\n       {\n \tauto __len = ranges::distance(__first, __last);\n \n@@ -2290,11 +2314,10 @@ namespace ranges\n \t       _Comp = ranges::less>\n       constexpr safe_subrange_t<_Range>\n       operator()(_Range&& __r, const _Tp& __value,\n-\t\t  _Comp __comp = {}, _Proj __proj = {}) const\n+\t\t _Comp __comp = {}, _Proj __proj = {}) const\n       {\n \treturn (*this)(ranges::begin(__r), ranges::end(__r),\n-\t\t\t\t   __value,\n-\t\t\t\t   std::move(__comp), std::move(__proj));\n+\t\t       __value, std::move(__comp), std::move(__proj));\n       }\n   };\n \n@@ -2308,12 +2331,13 @@ namespace ranges\n \t       _Comp = ranges::less>\n       constexpr bool\n       operator()(_Iter __first, _Sent __last,\n-\t\t    const _Tp& __value, _Comp __comp = {}, _Proj __proj = {}) const\n+\t\t const _Tp& __value, _Comp __comp = {}, _Proj __proj = {}) const\n       {\n \tauto __i = ranges::lower_bound(__first, __last, __value, __comp, __proj);\n \tif (__i == __last)\n \t  return false;\n-\treturn !(bool)std::__invoke(__comp, __value, std::__invoke(__proj, *__i));\n+\treturn !(bool)std::__invoke(__comp, __value,\n+\t\t\t\t    std::__invoke(__proj, *__i));\n       }\n \n     template<forward_range _Range,\n@@ -2323,11 +2347,10 @@ namespace ranges\n \t       _Comp = ranges::less>\n       constexpr bool\n       operator()(_Range&& __r, const _Tp& __value, _Comp __comp = {},\n-\t\t    _Proj __proj = {}) const\n+\t\t _Proj __proj = {}) const\n       {\n \treturn (*this)(ranges::begin(__r), ranges::end(__r),\n-\t\t\t\t     __value,\n-\t\t\t\t     std::move(__comp), std::move(__proj));\n+\t\t       __value, std::move(__comp), std::move(__proj));\n       }\n   };\n \n@@ -2339,9 +2362,11 @@ namespace ranges\n \t     typename _Proj = identity,\n \t     indirect_unary_predicate<projected<_Iter, _Proj>> _Pred>\n       constexpr bool\n-      operator()(_Iter __first, _Sent __last, _Pred __pred, _Proj __proj = {}) const\n+      operator()(_Iter __first, _Sent __last,\n+\t\t _Pred __pred, _Proj __proj = {}) const\n       {\n-\t__first = ranges::find_if_not(std::move(__first), __last, __pred, __proj);\n+\t__first = ranges::find_if_not(std::move(__first), __last,\n+\t\t\t\t      __pred, __proj);\n \tif (__first == __last)\n \t  return true;\n \t++__first;\n@@ -2350,12 +2375,13 @@ namespace ranges\n       }\n \n     template<input_range _Range, typename _Proj = identity,\n-\t     indirect_unary_predicate<projected<iterator_t<_Range>, _Proj>> _Pred>\n+\t     indirect_unary_predicate<projected<iterator_t<_Range>, _Proj>>\n+\t       _Pred>\n       constexpr bool\n       operator()(_Range&& __r, _Pred __pred, _Proj __proj = {}) const\n       {\n \treturn (*this)(ranges::begin(__r), ranges::end(__r),\n-\t\t\t\t      std::move(__pred), std::move(__proj));\n+\t\t       std::move(__pred), std::move(__proj));\n       }\n   };\n \n@@ -2367,7 +2393,8 @@ namespace ranges\n \t     typename _Proj = identity,\n \t     indirect_unary_predicate<projected<_Iter, _Proj>> _Pred>\n       constexpr subrange<_Iter>\n-      operator()(_Iter __first, _Sent __last, _Pred __pred, _Proj __proj = {}) const\n+      operator()(_Iter __first, _Sent __last,\n+\t\t _Pred __pred, _Proj __proj = {}) const\n       {\n \tif constexpr (bidirectional_iterator<_Iter>)\n \t  {\n@@ -2378,7 +2405,8 @@ namespace ranges\n \t\tfor (;;)\n \t\t  if (__first == __tail)\n \t\t    return {std::move(__first), std::move(__lasti)};\n-\t\t  else if (std::__invoke(__pred, std::__invoke(__proj, *__first)))\n+\t\t  else if (std::__invoke(__pred,\n+\t\t\t\t\t std::__invoke(__proj, *__first)))\n \t\t    ++__first;\n \t\t  else\n \t\t    break;\n@@ -2417,13 +2445,14 @@ namespace ranges\n       }\n \n     template<forward_range _Range, typename _Proj = identity,\n-\t     indirect_unary_predicate<projected<iterator_t<_Range>, _Proj>> _Pred>\n+\t     indirect_unary_predicate<projected<iterator_t<_Range>, _Proj>>\n+\t       _Pred>\n       requires permutable<iterator_t<_Range>>\n       constexpr safe_subrange_t<_Range>\n       operator()(_Range&& __r, _Pred __pred, _Proj __proj = {}) const\n       {\n \treturn (*this)(ranges::begin(__r), ranges::end(__r),\n-\t\t\t\t std::move(__pred), std::move(__proj));\n+\t\t       std::move(__pred), std::move(__proj));\n       }\n   };\n \n@@ -2436,7 +2465,8 @@ namespace ranges\n \t     indirect_unary_predicate<projected<_Iter, _Proj>> _Pred>\n       requires permutable<_Iter>\n       subrange<_Iter>\n-      operator()(_Iter __first, _Sent __last, _Pred __pred, _Proj __proj = {}) const\n+      operator()(_Iter __first, _Sent __last,\n+\t\t _Pred __pred, _Proj __proj = {}) const\n       {\n \tauto __lasti = ranges::next(__first, __last);\n \tauto __middle\n@@ -2446,13 +2476,14 @@ namespace ranges\n       }\n \n     template<bidirectional_range _Range, typename _Proj = identity,\n-\t     indirect_unary_predicate<projected<iterator_t<_Range>, _Proj>> _Pred>\n+\t     indirect_unary_predicate<projected<iterator_t<_Range>, _Proj>>\n+\t       _Pred>\n       requires permutable<iterator_t<_Range>>\n       safe_subrange_t<_Range>\n       operator()(_Range&& __r, _Pred __pred, _Proj __proj = {}) const\n       {\n \treturn (*this)(ranges::begin(__r), ranges::end(__r),\n-\t\t\t\t\tstd::move(__pred), std::move(__proj));\n+\t\t       std::move(__pred), std::move(__proj));\n       }\n   };\n \n@@ -2490,8 +2521,8 @@ namespace ranges\n \t&& indirectly_copyable<_Iter, _O2>\n       constexpr partition_copy_result<_Iter, _Out1, _O2>\n       operator()(_Iter __first, _Sent __last,\n-\t\t     _Out1 __out_true, _O2 __out_false,\n-\t\t     _Pred __pred, _Proj __proj = {}) const\n+\t\t _Out1 __out_true, _O2 __out_false,\n+\t\t _Pred __pred, _Proj __proj = {}) const\n       {\n \tfor (; __first != __last; ++__first)\n \t  if (std::__invoke(__pred, std::__invoke(__proj, *__first)))\n@@ -2505,22 +2536,24 @@ namespace ranges\n \t      ++__out_false;\n \t    }\n \n-\treturn {std::move(__first), std::move(__out_true), std::move(__out_false)};\n+\treturn {std::move(__first),\n+\t\tstd::move(__out_true), std::move(__out_false)};\n       }\n \n     template<input_range _Range, weakly_incrementable _Out1,\n \t     weakly_incrementable _O2,\n \t     typename _Proj = identity,\n-\t     indirect_unary_predicate<projected<iterator_t<_Range>, _Proj>> _Pred>\n+\t     indirect_unary_predicate<projected<iterator_t<_Range>, _Proj>>\n+\t       _Pred>\n       requires indirectly_copyable<iterator_t<_Range>, _Out1>\n \t&& indirectly_copyable<iterator_t<_Range>, _O2>\n       constexpr partition_copy_result<safe_iterator_t<_Range>, _Out1, _O2>\n       operator()(_Range&& __r, _Out1 out_true, _O2 out_false,\n-\t\t     _Pred __pred, _Proj __proj = {}) const\n+\t\t _Pred __pred, _Proj __proj = {}) const\n       {\n \treturn (*this)(ranges::begin(__r), ranges::end(__r),\n-\t\t\t\t      std::move(out_true), std::move(out_false),\n-\t\t\t\t      std::move(__pred), std::move(__proj));\n+\t\t       std::move(out_true), std::move(out_false),\n+\t\t       std::move(__pred), std::move(__proj));\n       }\n   };\n \n@@ -2533,7 +2566,7 @@ namespace ranges\n \t     indirect_unary_predicate<projected<_Iter, _Proj>> _Pred>\n       constexpr _Iter\n       operator()(_Iter __first, _Sent __last,\n-\t\t      _Pred __pred, _Proj __proj = {}) const\n+\t\t _Pred __pred, _Proj __proj = {}) const\n       {\n \tauto __len = ranges::distance(__first, __last);\n \n@@ -2555,12 +2588,13 @@ namespace ranges\n       }\n \n     template<forward_range _Range, typename _Proj = identity,\n-\t     indirect_unary_predicate<projected<iterator_t<_Range>, _Proj>> _Pred>\n+\t     indirect_unary_predicate<projected<iterator_t<_Range>, _Proj>>\n+\t       _Pred>\n       constexpr safe_iterator_t<_Range>\n       operator()(_Range&& __r, _Pred __pred, _Proj __proj = {}) const\n       {\n \treturn (*this)(ranges::begin(__r), ranges::end(__r),\n-\t\t\t\t       std::move(__pred), std::move(__proj));\n+\t\t       std::move(__pred), std::move(__proj));\n       }\n   };\n \n@@ -2578,8 +2612,9 @@ namespace ranges\n       requires mergeable<_Iter1, _Iter2, _Out, _Comp, _Proj1, _Proj2>\n       constexpr merge_result<_Iter1, _Iter2, _Out>\n       operator()(_Iter1 __first1, _Sent1 __last1,\n-\t    _Iter2 __first2, _Sent2 __last2, _Out __result,\n-\t    _Comp __comp = {}, _Proj1 __proj1 = {}, _Proj2 __proj2 = {}) const\n+\t\t _Iter2 __first2, _Sent2 __last2, _Out __result,\n+\t\t _Comp __comp = {},\n+\t\t _Proj1 __proj1 = {}, _Proj2 __proj2 = {}) const\n       {\n \twhile (__first1 != __last1 && __first2 != __last2)\n \t  {\n@@ -2614,12 +2649,13 @@ namespace ranges\n \t\t\t     safe_iterator_t<_Range2>,\n \t\t\t     _Out>\n       operator()(_Range1&& __r1, _Range2&& __r2, _Out __result,\n-\t    _Comp __comp = {}, _Proj1 __proj1 = {}, _Proj2 __proj2 = {}) const\n+\t\t _Comp __comp = {},\n+\t\t _Proj1 __proj1 = {}, _Proj2 __proj2 = {}) const\n       {\n \treturn (*this)(ranges::begin(__r1), ranges::end(__r1),\n-\t\t\t     ranges::begin(__r2), ranges::end(__r2),\n-\t\t\t     std::move(__result), std::move(__comp),\n-\t\t\t     std::move(__proj1), std::move(__proj2));\n+\t\t       ranges::begin(__r2), ranges::end(__r2),\n+\t\t       std::move(__result), std::move(__comp),\n+\t\t       std::move(__proj1), std::move(__proj2));\n       }\n   };\n \n@@ -2633,7 +2669,7 @@ namespace ranges\n       requires sortable<_Iter, _Comp, _Proj>\n       _Iter\n       operator()(_Iter __first, _Iter __middle, _Sent __last,\n-\t\t    _Comp __comp = {}, _Proj __proj = {}) const\n+\t\t _Comp __comp = {}, _Proj __proj = {}) const\n       {\n \tauto __lasti = ranges::next(__first, __last);\n \tstd::inplace_merge(std::move(__first), std::move(__middle), __lasti,\n@@ -2646,11 +2682,11 @@ namespace ranges\n       requires sortable<iterator_t<_Range>, _Comp, _Proj>\n       safe_iterator_t<_Range>\n       operator()(_Range&& __r, iterator_t<_Range> __middle,\n-\t\t    _Comp __comp = {}, _Proj __proj = {}) const\n+\t\t _Comp __comp = {}, _Proj __proj = {}) const\n       {\n \treturn (*this)(ranges::begin(__r), std::move(__middle),\n-\t\t\t\t     ranges::end(__r),\n-\t\t\t\t     std::move(__comp), std::move(__proj));\n+\t\t       ranges::end(__r),\n+\t\t       std::move(__comp), std::move(__proj));\n       }\n   };\n \n@@ -2665,8 +2701,10 @@ namespace ranges\n \t\t\t\t\tprojected<_Iter2, _Proj2>>\n \t       _Comp = ranges::less>\n       constexpr bool\n-      operator()(_Iter1 __first1, _Sent1 __last1, _Iter2 __first2, _Sent2 __last2,\n-\t       _Comp __comp = {}, _Proj1 __proj1 = {}, _Proj2 __proj2 = {}) const\n+      operator()(_Iter1 __first1, _Sent1 __last1,\n+\t\t _Iter2 __first2, _Sent2 __last2,\n+\t\t _Comp __comp = {},\n+\t\t _Proj1 __proj1 = {}, _Proj2 __proj2 = {}) const\n       {\n \twhile (__first1 != __last1 && __first2 != __last2)\n \t  if (std::__invoke(__comp,\n@@ -2686,19 +2724,19 @@ namespace ranges\n \treturn __first2 == __last2;\n       }\n \n-    template<input_range _Range1, input_range _Range2, typename _Proj1 = identity,\n-\t     typename _Proj2 = identity,\n+    template<input_range _Range1, input_range _Range2,\n+\t     typename _Proj1 = identity, typename _Proj2 = identity,\n \t     indirect_strict_weak_order<projected<iterator_t<_Range1>, _Proj1>,\n \t\t\t\t\tprojected<iterator_t<_Range2>, _Proj2>>\n \t       _Comp = ranges::less>\n       constexpr bool\n       operator()(_Range1&& __r1, _Range2&& __r2, _Comp __comp = {},\n-\t       _Proj1 __proj1 = {}, _Proj2 __proj2 = {}) const\n+\t\t _Proj1 __proj1 = {}, _Proj2 __proj2 = {}) const\n       {\n \treturn (*this)(ranges::begin(__r1), ranges::end(__r1),\n-\t\t\t\tranges::begin(__r2), ranges::end(__r2),\n-\t\t\t\tstd::move(__comp),\n-\t\t\t\tstd::move(__proj1), std::move(__proj2));\n+\t\t       ranges::begin(__r2), ranges::end(__r2),\n+\t\t       std::move(__comp),\n+\t\t       std::move(__proj1), std::move(__proj2));\n       }\n   };\n \n@@ -2715,9 +2753,10 @@ namespace ranges\n \t     typename _Proj1 = identity, typename _Proj2 = identity>\n       requires mergeable<_Iter1, _Iter2, _Out, _Comp, _Proj1, _Proj2>\n       constexpr set_union_result<_Iter1, _Iter2, _Out>\n-      operator()(_Iter1 __first1, _Sent1 __last1, _Iter2 __first2, _Sent2 __last2,\n-\t\t_Out __result, _Comp __comp = {},\n-\t\t_Proj1 __proj1 = {}, _Proj2 __proj2 = {}) const\n+      operator()(_Iter1 __first1, _Sent1 __last1,\n+\t\t _Iter2 __first2, _Sent2 __last2,\n+\t\t _Out __result, _Comp __comp = {},\n+\t\t _Proj1 __proj1 = {}, _Proj2 __proj2 = {}) const\n       {\n \twhile (__first1 != __last1 && __first2 != __last2)\n \t  {\n@@ -2758,20 +2797,22 @@ namespace ranges\n \t\t\t _Comp, _Proj1, _Proj2>\n       constexpr set_union_result<safe_iterator_t<_Range1>,\n \t\t\t\t safe_iterator_t<_Range2>, _Out>\n-      operator()(_Range1&& __r1, _Range2&& __r2, _Out __result, _Comp __comp = {},\n-\t\t_Proj1 __proj1 = {}, _Proj2 __proj2 = {}) const\n+      operator()(_Range1&& __r1, _Range2&& __r2,\n+\t\t _Out __result, _Comp __comp = {},\n+\t\t _Proj1 __proj1 = {}, _Proj2 __proj2 = {}) const\n       {\n \treturn (*this)(ranges::begin(__r1), ranges::end(__r1),\n-\t\t\t\t ranges::begin(__r2), ranges::end(__r2),\n-\t\t\t\t std::move(__result), std::move(__comp),\n-\t\t\t\t std::move(__proj1), std::move(__proj2));\n+\t\t       ranges::begin(__r2), ranges::end(__r2),\n+\t\t       std::move(__result), std::move(__comp),\n+\t\t       std::move(__proj1), std::move(__proj2));\n       }\n   };\n \n   inline constexpr __set_union_fn set_union{};\n \n   template<typename _Iter1, typename _Iter2, typename _Out>\n-    using set_intersection_result = binary_transform_result<_Iter1, _Iter2, _Out>;\n+    using set_intersection_result\n+      = binary_transform_result<_Iter1, _Iter2, _Out>;\n \n   struct __set_intersection_fn\n   {\n@@ -2782,9 +2823,9 @@ namespace ranges\n       requires mergeable<_Iter1, _Iter2, _Out, _Comp, _Proj1, _Proj2>\n       constexpr set_intersection_result<_Iter1, _Iter2, _Out>\n       operator()(_Iter1 __first1, _Sent1 __last1,\n-\t\t       _Iter2 __first2, _Sent2 __last2, _Out __result,\n-\t\t       _Comp __comp = {},\n-\t\t       _Proj1 __proj1 = {}, _Proj2 __proj2 = {}) const\n+\t\t _Iter2 __first2, _Sent2 __last2, _Out __result,\n+\t\t _Comp __comp = {},\n+\t\t _Proj1 __proj1 = {}, _Proj2 __proj2 = {}) const\n       {\n \twhile (__first1 != __last1 && __first2 != __last2)\n \t  if (std::__invoke(__comp,\n@@ -2816,12 +2857,13 @@ namespace ranges\n       constexpr set_intersection_result<safe_iterator_t<_Range1>,\n \t\t\t\t\tsafe_iterator_t<_Range2>, _Out>\n       operator()(_Range1&& __r1, _Range2&& __r2, _Out __result,\n-\t\t       _Comp __comp = {}, _Proj1 __proj1 = {}, _Proj2 __proj2 = {}) const\n+\t\t _Comp __comp = {},\n+\t\t _Proj1 __proj1 = {}, _Proj2 __proj2 = {}) const\n       {\n \treturn (*this)(ranges::begin(__r1), ranges::end(__r1),\n-\t\t\t\t\tranges::begin(__r2), ranges::end(__r2),\n-\t\t\t\t\tstd::move(__result), std::move(__comp),\n-\t\t\t\t\tstd::move(__proj1), std::move(__proj2));\n+\t\t       ranges::begin(__r2), ranges::end(__r2),\n+\t\t       std::move(__result), std::move(__comp),\n+\t\t       std::move(__proj1), std::move(__proj2));\n       }\n   };\n \n@@ -2839,8 +2881,9 @@ namespace ranges\n       requires mergeable<_Iter1, _Iter2, _Out, _Comp, _Proj1, _Proj2>\n       constexpr set_difference_result<_Iter1, _Out>\n       operator()(_Iter1 __first1, _Sent1 __last1,\n-\t\t     _Iter2 __first2, _Sent2 __last2, _Out __result,\n-\t\t     _Comp __comp = {}, _Proj1 __proj1 = {}, _Proj2 __proj2 = {}) const\n+\t\t _Iter2 __first2, _Sent2 __last2, _Out __result,\n+\t\t _Comp __comp = {},\n+\t\t _Proj1 __proj1 = {}, _Proj2 __proj2 = {}) const\n       {\n \twhile (__first1 != __last1 && __first2 != __last2)\n \t  if (std::__invoke(__comp,\n@@ -2871,12 +2914,13 @@ namespace ranges\n \t\t\t _Comp, _Proj1, _Proj2>\n       constexpr set_difference_result<safe_iterator_t<_Range1>, _Out>\n       operator()(_Range1&& __r1, _Range2&& __r2, _Out __result,\n-\t\t     _Comp __comp = {}, _Proj1 __proj1 = {}, _Proj2 __proj2 = {}) const\n+\t\t _Comp __comp = {},\n+\t\t _Proj1 __proj1 = {}, _Proj2 __proj2 = {}) const\n       {\n \treturn (*this)(ranges::begin(__r1), ranges::end(__r1),\n-\t\t\t\t      ranges::begin(__r2), ranges::end(__r2),\n-\t\t\t\t      std::move(__result), std::move(__comp),\n-\t\t\t\t      std::move(__proj1), std::move(__proj2));\n+\t\t       ranges::begin(__r2), ranges::end(__r2),\n+\t\t       std::move(__result), std::move(__comp),\n+\t\t       std::move(__proj1), std::move(__proj2));\n       }\n   };\n \n@@ -2895,9 +2939,9 @@ namespace ranges\n       requires mergeable<_Iter1, _Iter2, _Out, _Comp, _Proj1, _Proj2>\n       constexpr set_symmetric_difference_result<_Iter1, _Iter2, _Out>\n       operator()(_Iter1 __first1, _Sent1 __last1,\n-\t\t\t       _Iter2 __first2, _Sent2 __last2,\n-\t\t\t       _Out __result, _Comp __comp = {},\n-\t\t\t       _Proj1 __proj1 = {}, _Proj2 __proj2 = {}) const\n+\t\t _Iter2 __first2, _Sent2 __last2,\n+\t\t _Out __result, _Comp __comp = {},\n+\t\t _Proj1 __proj1 = {}, _Proj2 __proj2 = {}) const\n       {\n \twhile (__first1 != __last1 && __first2 != __last2)\n \t  if (std::__invoke(__comp,\n@@ -2938,14 +2982,13 @@ namespace ranges\n \t\t\t\t\t\tsafe_iterator_t<_Range2>,\n \t\t\t\t\t\t_Out>\n       operator()(_Range1&& __r1, _Range2&& __r2, _Out __result,\n-\t\t\t       _Comp __comp = {},\n-\t\t\t       _Proj1 __proj1 = {}, _Proj2 __proj2 = {}) const\n+\t\t _Comp __comp = {},\n+\t\t _Proj1 __proj1 = {}, _Proj2 __proj2 = {}) const\n       {\n-\treturn (*this)\n-\t\t(ranges::begin(__r1), ranges::end(__r1),\n-\t\t ranges::begin(__r2), ranges::end(__r2),\n-\t\t std::move(__result), std::move(__comp),\n-\t\t std::move(__proj1), std::move(__proj2));\n+\treturn (*this)(ranges::begin(__r1), ranges::end(__r1),\n+\t\t       ranges::begin(__r2), ranges::end(__r2),\n+\t\t       std::move(__result), std::move(__comp),\n+\t\t       std::move(__proj1), std::move(__proj2));\n       }\n   };\n \n@@ -2957,7 +3000,8 @@ namespace ranges\n \t     indirect_strict_weak_order<projected<const _Tp*, _Proj>>\n \t       _Comp = ranges::less>\n       constexpr const _Tp&\n-      operator()(const _Tp& __a, const _Tp& __b, _Comp __comp = {}, _Proj __proj = {}) const\n+      operator()(const _Tp& __a, const _Tp& __b,\n+\t\t _Comp __comp = {}, _Proj __proj = {}) const\n       {\n \tif (std::__invoke(std::move(__comp),\n \t\t\t  std::__invoke(__proj, __b),\n@@ -2994,10 +3038,11 @@ namespace ranges\n \t     indirect_strict_weak_order<projected<const _Tp*, _Proj>>\n \t       _Comp = ranges::less>\n       constexpr _Tp\n-      operator()(initializer_list<_Tp> __r, _Comp __comp = {}, _Proj __proj = {}) const\n+      operator()(initializer_list<_Tp> __r,\n+\t\t _Comp __comp = {}, _Proj __proj = {}) const\n       {\n \treturn (*this)(ranges::subrange(__r),\n-\t\t\t   std::move(__comp), std::move(__proj));\n+\t\t       std::move(__comp), std::move(__proj));\n       }\n   };\n \n@@ -3009,7 +3054,8 @@ namespace ranges\n \t     indirect_strict_weak_order<projected<const _Tp*, _Proj>>\n \t       _Comp = ranges::less>\n       constexpr const _Tp&\n-      operator()(const _Tp& __a, const _Tp& __b, _Comp __comp = {}, _Proj __proj = {}) const\n+      operator()(const _Tp& __a, const _Tp& __b,\n+\t\t _Comp __comp = {}, _Proj __proj = {}) const\n       {\n \tif (std::__invoke(std::move(__comp),\n \t\t\t  std::__invoke(__proj, __a),\n@@ -3046,10 +3092,11 @@ namespace ranges\n \t     indirect_strict_weak_order<projected<const _Tp*, _Proj>>\n \t       _Comp = ranges::less>\n       constexpr _Tp\n-      operator()(initializer_list<_Tp> __r, _Comp __comp = {}, _Proj __proj = {}) const\n+      operator()(initializer_list<_Tp> __r,\n+\t\t _Comp __comp = {}, _Proj __proj = {}) const\n       {\n \treturn (*this)(ranges::subrange(__r),\n-\t\t\t   std::move(__comp), std::move(__proj));\n+\t\t       std::move(__comp), std::move(__proj));\n       }\n   };\n \n@@ -3078,7 +3125,8 @@ namespace ranges\n \t     indirect_strict_weak_order<projected<const _Tp*, _Proj>>\n \t       _Comp = ranges::less>\n       constexpr minmax_result<const _Tp&>\n-      operator()(const _Tp& __a, const _Tp& __b, _Comp __comp = {}, _Proj __proj = {}) const\n+      operator()(const _Tp& __a, const _Tp& __b,\n+\t\t _Comp __comp = {}, _Proj __proj = {}) const\n       {\n \tif (std::__invoke(std::move(__comp),\n \t\t\t  std::__invoke(__proj, __b),\n@@ -3119,10 +3167,11 @@ namespace ranges\n \t     indirect_strict_weak_order<projected<const _Tp*, _Proj>>\n \t       _Comp = ranges::less>\n       constexpr minmax_result<_Tp>\n-      operator()(initializer_list<_Tp> __r, _Comp __comp = {}, _Proj __proj = {}) const\n+      operator()(initializer_list<_Tp> __r,\n+\t\t _Comp __comp = {}, _Proj __proj = {}) const\n       {\n \treturn (*this)(ranges::subrange(__r),\n-\t\t\t      std::move(__comp), std::move(__proj));\n+\t\t       std::move(__comp), std::move(__proj));\n       }\n   };\n \n@@ -3136,7 +3185,7 @@ namespace ranges\n \t       _Comp = ranges::less>\n       constexpr _Iter\n       operator()(_Iter __first, _Sent __last,\n-\t\t  _Comp __comp = {}, _Proj __proj = {}) const\n+\t\t _Comp __comp = {}, _Proj __proj = {}) const\n       {\n \tif (__first == __last)\n \t  return __first;\n@@ -3159,7 +3208,7 @@ namespace ranges\n       operator()(_Range&& __r, _Comp __comp = {}, _Proj __proj = {}) const\n       {\n \treturn (*this)(ranges::begin(__r), ranges::end(__r),\n-\t\t\t\t   std::move(__comp), std::move(__proj));\n+\t\t       std::move(__comp), std::move(__proj));\n       }\n   };\n \n@@ -3173,7 +3222,7 @@ namespace ranges\n \t       _Comp = ranges::less>\n       constexpr _Iter\n       operator()(_Iter __first, _Sent __last,\n-\t\t  _Comp __comp = {}, _Proj __proj = {}) const\n+\t\t _Comp __comp = {}, _Proj __proj = {}) const\n       {\n \tif (__first == __last)\n \t  return __first;\n@@ -3196,7 +3245,7 @@ namespace ranges\n       operator()(_Range&& __r, _Comp __comp = {}, _Proj __proj = {}) const\n       {\n \treturn (*this)(ranges::begin(__r), ranges::end(__r),\n-\t\t\t\t   std::move(__comp), std::move(__proj));\n+\t\t       std::move(__comp), std::move(__proj));\n       }\n   };\n \n@@ -3213,7 +3262,7 @@ namespace ranges\n \t       _Comp = ranges::less>\n       constexpr minmax_element_result<_Iter>\n       operator()(_Iter __first, _Sent __last,\n-\t\t     _Comp __comp = {}, _Proj __proj = {}) const\n+\t\t _Comp __comp = {}, _Proj __proj = {}) const\n       {\n \tif (__first == __last)\n \t  return {__first, __first};\n@@ -3241,7 +3290,7 @@ namespace ranges\n       operator()(_Range&& __r, _Comp __comp = {}, _Proj __proj = {}) const\n       {\n \treturn (*this)(ranges::begin(__r), ranges::end(__r),\n-\t\t\t\t      std::move(__comp), std::move(__proj));\n+\t\t       std::move(__comp), std::move(__proj));\n       }\n   };\n \n@@ -3257,19 +3306,18 @@ namespace ranges\n \t       _Comp = ranges::less>\n       constexpr bool\n       operator()(_Iter1 __first1, _Sent1 __last1,\n-\t\t\t      _Iter2 __first2, _Sent2 __last2,\n-\t\t\t      _Comp __comp = {},\n-\t\t\t      _Proj1 __proj1 = {}, _Proj2 __proj2 = {}) const\n+\t\t _Iter2 __first2, _Sent2 __last2,\n+\t\t _Comp __comp = {},\n+\t\t _Proj1 __proj1 = {}, _Proj2 __proj2 = {}) const\n       {\n \tif constexpr (__detail::__is_normal_iterator<_Iter1>\n \t\t      || __detail::__is_normal_iterator<_Iter2>)\n-\t  return (*this)\n-\t\t   (std::__niter_base(std::move(__first1)),\n-\t\t    std::__niter_base(std::move(__last1)),\n-\t\t    std::__niter_base(std::move(__first2)),\n-\t\t    std::__niter_base(std::move(__last2)),\n-\t\t    std::move(__comp),\n-\t\t    std::move(__proj1), std::move(__proj2));\n+\t  return (*this)(std::__niter_base(std::move(__first1)),\n+\t\t\t std::__niter_base(std::move(__last1)),\n+\t\t\t std::__niter_base(std::move(__first2)),\n+\t\t\t std::__niter_base(std::move(__last2)),\n+\t\t\t std::move(__comp),\n+\t\t\t std::move(__proj1), std::move(__proj2));\n \n \tconstexpr bool __sized_iters\n \t  = (sized_sentinel_for<_Sent1, _Iter1>\n@@ -3331,20 +3379,19 @@ namespace ranges\n \treturn __first1 == __last1 && __first2 != __last2;\n       }\n \n-    template<input_range _Range1, input_range _Range2, typename _Proj1 = identity,\n-\t     typename _Proj2 = identity,\n+    template<input_range _Range1, input_range _Range2,\n+\t     typename _Proj1 = identity, typename _Proj2 = identity,\n \t     indirect_strict_weak_order<projected<iterator_t<_Range1>, _Proj1>,\n \t\t\t\t\tprojected<iterator_t<_Range2>, _Proj2>>\n \t       _Comp = ranges::less>\n       constexpr bool\n       operator()(_Range1&& __r1, _Range2&& __r2, _Comp __comp = {},\n-\t\t\t      _Proj1 __proj1 = {}, _Proj2 __proj2 = {}) const\n+\t\t _Proj1 __proj1 = {}, _Proj2 __proj2 = {}) const\n       {\n-\treturn (*this)\n-\t\t(ranges::begin(__r1), ranges::end(__r1),\n-\t\t ranges::begin(__r2), ranges::end(__r2),\n-\t\t std::move(__comp),\n-\t\t std::move(__proj1), std::move(__proj2));\n+\treturn (*this)(ranges::begin(__r1), ranges::end(__r1),\n+\t\t       ranges::begin(__r2), ranges::end(__r2),\n+\t\t       std::move(__comp),\n+\t\t       std::move(__proj1), std::move(__proj2));\n       }\n   };\n \n@@ -3364,7 +3411,7 @@ namespace ranges\n       requires sortable<_Iter, _Comp, _Proj>\n       constexpr next_permutation_result<_Iter>\n       operator()(_Iter __first, _Sent __last,\n-\t\t       _Comp __comp = {}, _Proj __proj = {}) const\n+\t\t _Comp __comp = {}, _Proj __proj = {}) const\n       {\n \tif (__first == __last)\n \t  return {false, std::move(__first)};\n@@ -3410,7 +3457,7 @@ namespace ranges\n       operator()(_Range&& __r, _Comp __comp = {}, _Proj __proj = {}) const\n       {\n \treturn (*this)(ranges::begin(__r), ranges::end(__r),\n-\t\t\t\t\tstd::move(__comp), std::move(__proj));\n+\t\t       std::move(__comp), std::move(__proj));\n       }\n   };\n \n@@ -3426,7 +3473,7 @@ namespace ranges\n       requires sortable<_Iter, _Comp, _Proj>\n       constexpr prev_permutation_result<_Iter>\n       operator()(_Iter __first, _Sent __last,\n-\t\t       _Comp __comp = {}, _Proj __proj = {}) const\n+\t\t _Comp __comp = {}, _Proj __proj = {}) const\n       {\n \tif (__first == __last)\n \t  return {false, std::move(__first)};\n@@ -3472,7 +3519,7 @@ namespace ranges\n       operator()(_Range&& __r, _Comp __comp = {}, _Proj __proj = {}) const\n       {\n \treturn (*this)(ranges::begin(__r), ranges::end(__r),\n-\t\t\t\t\tstd::move(__comp), std::move(__proj));\n+\t\t       std::move(__comp), std::move(__proj));\n       }\n   };\n "}, {"sha": "f8643b5a9332e3bfd1a3dad54d8afd4424677352", "filename": "libstdc++-v3/include/bits/ranges_algobase.h", "status": "modified", "additions": 21, "deletions": 18, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5599262661af219726dccba200459671ed7bba8a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5599262661af219726dccba200459671ed7bba8a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_algobase.h?ref=5599262661af219726dccba200459671ed7bba8a", "patch": "@@ -79,19 +79,20 @@ namespace ranges\n \t     typename _Proj1 = identity, typename _Proj2 = identity>\n       requires indirectly_comparable<_Iter1, _Iter2, _Pred, _Proj1, _Proj2>\n       constexpr bool\n-      operator()(_Iter1 __first1, _Sent1 __last1, _Iter2 __first2, _Sent2 __last2,\n-\t    _Pred __pred = {}, _Proj1 __proj1 = {}, _Proj2 __proj2 = {}) const\n+      operator()(_Iter1 __first1, _Sent1 __last1,\n+\t\t _Iter2 __first2, _Sent2 __last2, _Pred __pred = {},\n+\t\t _Proj1 __proj1 = {}, _Proj2 __proj2 = {}) const\n       {\n \t// TODO: implement more specializations to at least have parity with\n \t// std::equal.\n \tif constexpr (__detail::__is_normal_iterator<_Iter1>\n \t\t      || __detail::__is_normal_iterator<_Iter2>)\n \t  return (*this)(std::__niter_base(std::move(__first1)),\n-\t\t\t       std::__niter_base(std::move(__last1)),\n-\t\t\t       std::__niter_base(std::move(__first2)),\n-\t\t\t       std::__niter_base(std::move(__last2)),\n-\t\t\t       std::move(__pred),\n-\t\t\t       std::move(__proj1), std::move(__proj2));\n+\t\t\t std::__niter_base(std::move(__last1)),\n+\t\t\t std::__niter_base(std::move(__first2)),\n+\t\t\t std::__niter_base(std::move(__last2)),\n+\t\t\t std::move(__pred),\n+\t\t\t std::move(__proj1), std::move(__proj2));\n \n \tconstexpr bool __sized_iters\n \t  = (sized_sentinel_for<_Sent1, _Iter1>\n@@ -147,13 +148,13 @@ namespace ranges\n       requires indirectly_comparable<iterator_t<_Range1>, iterator_t<_Range2>,\n \t\t\t\t     _Pred, _Proj1, _Proj2>\n       constexpr bool\n-      operator()(_Range1&& __r1, _Range2&& __r2,\n-\t    _Pred __pred = {}, _Proj1 __proj1 = {}, _Proj2 __proj2 = {}) const\n+      operator()(_Range1&& __r1, _Range2&& __r2, _Pred __pred = {},\n+\t\t _Proj1 __proj1 = {}, _Proj2 __proj2 = {}) const\n       {\n \treturn (*this)(ranges::begin(__r1), ranges::end(__r1),\n-\t\t\t     ranges::begin(__r2), ranges::end(__r2),\n-\t\t\t     std::move(__pred),\n-\t\t\t     std::move(__proj1), std::move(__proj2));\n+\t\t       ranges::begin(__r2), ranges::end(__r2),\n+\t\t       std::move(__pred),\n+\t\t       std::move(__proj1), std::move(__proj2));\n       }\n   };\n \n@@ -312,7 +313,7 @@ namespace ranges\n       operator()(_Range&& __r, _Out __result) const\n       {\n \treturn (*this)(ranges::begin(__r), ranges::end(__r),\n-\t\t\t    std::move(__result));\n+\t\t       std::move(__result));\n       }\n   };\n \n@@ -337,7 +338,7 @@ namespace ranges\n       operator()(_Range&& __r, _Out __result) const\n       {\n \treturn (*this)(ranges::begin(__r), ranges::end(__r),\n-\t\t\t    std::move(__result));\n+\t\t       std::move(__result));\n       }\n   };\n \n@@ -454,7 +455,7 @@ namespace ranges\n       operator()(_Range&& __r, _Iter __result) const\n       {\n \treturn (*this)(ranges::begin(__r), ranges::end(__r),\n-\t\t\t\t     std::move(__result));\n+\t\t       std::move(__result));\n       }\n   };\n \n@@ -479,7 +480,7 @@ namespace ranges\n       operator()(_Range&& __r, _Iter __result) const\n       {\n \treturn (*this)(ranges::begin(__r), ranges::end(__r),\n-\t\t\t\t     std::move(__result));\n+\t\t       std::move(__result));\n       }\n   };\n \n@@ -493,7 +494,8 @@ namespace ranges\n     template<input_iterator _Iter, weakly_incrementable _Out>\n       requires indirectly_copyable<_Iter, _Out>\n       constexpr copy_n_result<_Iter, _Out>\n-      operator()(_Iter __first, iter_difference_t<_Iter> __n, _Out __result) const\n+      operator()(_Iter __first, iter_difference_t<_Iter> __n,\n+\t\t _Out __result) const\n       {\n \tif constexpr (random_access_iterator<_Iter>)\n \t  return ranges::copy(__first, __first + __n, std::move(__result));\n@@ -512,7 +514,8 @@ namespace ranges\n   {\n     template<typename _Tp, output_iterator<const _Tp&> _Out>\n       constexpr _Out\n-      operator()(_Out __first, iter_difference_t<_Out> __n, const _Tp& __value) const\n+      operator()(_Out __first, iter_difference_t<_Out> __n,\n+\t\t const _Tp& __value) const\n       {\n \t// TODO: implement more specializations to be at least on par with\n \t// std::fill_n"}, {"sha": "bbf683de0665526ab78d6ebf882b304dd466dfc0", "filename": "libstdc++-v3/include/bits/ranges_uninitialized.h", "status": "modified", "additions": 16, "deletions": 22, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5599262661af219726dccba200459671ed7bba8a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_uninitialized.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5599262661af219726dccba200459671ed7bba8a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_uninitialized.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_uninitialized.h?ref=5599262661af219726dccba200459671ed7bba8a", "patch": "@@ -162,8 +162,7 @@ namespace ranges\n       safe_iterator_t<_Range>\n       operator()(_Range&& __r) const\n       {\n-\treturn (*this)(ranges::begin(__r),\n-\t\t\t\t\t\t       ranges::end(__r));\n+\treturn (*this)(ranges::begin(__r), ranges::end(__r));\n       }\n   };\n \n@@ -175,8 +174,7 @@ namespace ranges\n     template<__detail::__nothrow_forward_iterator _Iter>\n       requires default_initializable<iter_value_t<_Iter>>\n       _Iter\n-      operator()(_Iter __first,\n-\t\t\t\t\titer_difference_t<_Iter> __n) const\n+      operator()(_Iter __first, iter_difference_t<_Iter> __n) const\n       {\n \tusing _ValueType = remove_reference_t<iter_reference_t<_Iter>>;\n \tif constexpr (is_trivially_default_constructible_v<_ValueType>)\n@@ -222,8 +220,7 @@ namespace ranges\n       safe_iterator_t<_Range>\n       operator()(_Range&& __r) const\n       {\n-\treturn (*this)(ranges::begin(__r),\n-\t\t\t\t\t\t     ranges::end(__r));\n+\treturn (*this)(ranges::begin(__r), ranges::end(__r));\n       }\n   };\n \n@@ -266,7 +263,7 @@ namespace ranges\n       requires constructible_from<iter_value_t<_Out>, iter_reference_t<_Iter>>\n       uninitialized_copy_result<_Iter, _Out>\n       operator()(_Iter __ifirst, _ISent __ilast,\n-\t\t\t _Out __ofirst, _OSent __olast) const\n+\t\t _Out __ofirst, _OSent __olast) const\n       {\n \tusing _OutType = remove_reference_t<iter_reference_t<_Out>>;\n \tif constexpr (sized_sentinel_for<_ISent, _Iter>\n@@ -297,10 +294,8 @@ namespace ranges\n \t\t\t\tsafe_iterator_t<_ORange>>\n       operator()(_IRange&& __inr, _ORange&& __outr) const\n       {\n-\treturn (*this)(ranges::begin(__inr),\n-\t\t\t\t\t  ranges::end(__inr),\n-\t\t\t\t\t  ranges::begin(__outr),\n-\t\t\t\t\t  ranges::end(__outr));\n+\treturn (*this)(ranges::begin(__inr), ranges::end(__inr),\n+\t\t       ranges::begin(__outr), ranges::end(__outr));\n       }\n   };\n \n@@ -316,7 +311,7 @@ namespace ranges\n       requires constructible_from<iter_value_t<_Out>, iter_reference_t<_Iter>>\n       uninitialized_copy_n_result<_Iter, _Out>\n       operator()(_Iter __ifirst, iter_difference_t<_Iter> __n,\n-\t\t\t   _Out __ofirst, _Sent __olast) const\n+\t\t _Out __ofirst, _Sent __olast) const\n       {\n \tusing _OutType = remove_reference_t<iter_reference_t<_Out>>;\n \tif constexpr (sized_sentinel_for<_Sent, _Out>\n@@ -353,7 +348,7 @@ namespace ranges\n \t\t\t\t  iter_rvalue_reference_t<_Iter>>\n       uninitialized_move_result<_Iter, _Out>\n       operator()(_Iter __ifirst, _ISent __ilast,\n-\t\t\t _Out __ofirst, _OSent __olast) const\n+\t\t _Out __ofirst, _OSent __olast) const\n       {\n \tusing _OutType = remove_reference_t<iter_reference_t<_Out>>;\n \tif constexpr (sized_sentinel_for<_ISent, _Iter>\n@@ -386,10 +381,8 @@ namespace ranges\n \t\t\t\tsafe_iterator_t<_ORange>>\n       operator()(_IRange&& __inr, _ORange&& __outr) const\n       {\n-\treturn (*this)(ranges::begin(__inr),\n-\t\t\t\t\t  ranges::end(__inr),\n-\t\t\t\t\t  ranges::begin(__outr),\n-\t\t\t\t\t  ranges::end(__outr));\n+\treturn (*this)(ranges::begin(__inr), ranges::end(__inr),\n+\t\t       ranges::begin(__outr), ranges::end(__outr));\n       }\n   };\n \n@@ -406,7 +399,7 @@ namespace ranges\n \t\t\t\t    iter_rvalue_reference_t<_Iter>>\n       uninitialized_move_n_result<_Iter, _Out>\n       operator()(_Iter __ifirst, iter_difference_t<_Iter> __n,\n-\t\t\t   _Out __ofirst, _Sent __olast) const\n+\t\t _Out __ofirst, _Sent __olast) const\n       {\n \tusing _OutType = remove_reference_t<iter_reference_t<_Out>>;\n \tif constexpr (sized_sentinel_for<_Sent, _Out>\n@@ -460,8 +453,7 @@ namespace ranges\n       safe_iterator_t<_Range>\n       operator()(_Range&& __r, const _Tp& __x) const\n       {\n-\treturn (*this)(ranges::begin(__r), ranges::end(__r),\n-\t\t\t\t\t  __x);\n+\treturn (*this)(ranges::begin(__r), ranges::end(__r), __x);\n       }\n   };\n \n@@ -473,7 +465,7 @@ namespace ranges\n       requires constructible_from<iter_value_t<_Iter>, const _Tp&>\n       _Iter\n       operator()(_Iter __first, iter_difference_t<_Iter> __n,\n-\t\t\t   const _Tp& __x) const\n+\t\t const _Tp& __x) const\n       {\n \tusing _ValueType = remove_reference_t<iter_reference_t<_Iter>>;\n \tif constexpr (is_trivial_v<_ValueType>\n@@ -541,7 +533,9 @@ namespace ranges\n     requires destructible<range_value_t<_Range>>\n     constexpr safe_iterator_t<_Range>\n     __destroy_fn::operator()(_Range&& __r) const noexcept\n-    { return (*this)(ranges::begin(__r), ranges::end(__r)); }\n+    {\n+      return (*this)(ranges::begin(__r), ranges::end(__r));\n+    }\n \n   struct __destroy_n_fn\n   {"}]}