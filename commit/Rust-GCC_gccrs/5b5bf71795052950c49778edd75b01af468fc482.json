{"sha": "5b5bf71795052950c49778edd75b01af468fc482", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWI1YmY3MTc5NTA1Mjk1MGM0OTc3OGVkZDc1YjAxYWY0NjhmYzQ4Mg==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@unitus.it", "date": "2003-07-04T20:41:28Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2003-07-04T20:41:28Z"}, "message": "deque.tcc: Fully qualify standard functions with std::, thus avoiding Koenig lookup.\n\n2003-07-04  Paolo Carlini  <pcarlini@unitus.it>\n\n\t* include/bits/deque.tcc: Fully qualify standard\n\tfunctions with std::, thus avoiding Koenig lookup.\n\t* include/bits/gslice_array.h: Likewise.\n\t* include/bits/indirect_array.h: Likewise.\n\t* include/bits/list.tcc: Likewise.\n\t* include/bits/mask_array.h: Likewise.\n\t* include/bits/slice_array.h: Likewise.\n\nFrom-SVN: r68937", "tree": {"sha": "01178532c1d2b433e41660c8b0097b6dccb86956", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/01178532c1d2b433e41660c8b0097b6dccb86956"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5b5bf71795052950c49778edd75b01af468fc482", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b5bf71795052950c49778edd75b01af468fc482", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b5bf71795052950c49778edd75b01af468fc482", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b5bf71795052950c49778edd75b01af468fc482/comments", "author": null, "committer": null, "parents": [{"sha": "7f6dd1ca73bc6675a1d5c2ce919c105138579a89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f6dd1ca73bc6675a1d5c2ce919c105138579a89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f6dd1ca73bc6675a1d5c2ce919c105138579a89"}], "stats": {"total": 188, "additions": 99, "deletions": 89}, "files": [{"sha": "98515f99b389f3c0d9e9cd8062313e947974beb5", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b5bf71795052950c49778edd75b01af468fc482/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b5bf71795052950c49778edd75b01af468fc482/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=5b5bf71795052950c49778edd75b01af468fc482", "patch": "@@ -1,3 +1,13 @@\n+2003-07-04  Paolo Carlini  <pcarlini@unitus.it>\n+\n+\t* include/bits/deque.tcc: Fully qualify standard\n+\tfunctions with std::, thus avoiding Koenig lookup.\n+\t* include/bits/gslice_array.h: Likewise.\n+\t* include/bits/indirect_array.h: Likewise.\n+\t* include/bits/list.tcc: Likewise.\n+\t* include/bits/mask_array.h: Likewise.\n+\t* include/bits/slice_array.h: Likewise.\n+\n 2003-07-04  Gawain Bolton  <gbolton@free.fr>\n \n \t* include/bits/stl_tree.h: Performance and memory usage"}, {"sha": "43be956cdccb33573ff1dc75521c65403d55fd1c", "filename": "libstdc++-v3/include/bits/deque.tcc", "status": "modified", "additions": 69, "deletions": 69, "changes": 138, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b5bf71795052950c49778edd75b01af468fc482/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fdeque.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b5bf71795052950c49778edd75b01af468fc482/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fdeque.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fdeque.tcc?ref=5b5bf71795052950c49778edd75b01af468fc482", "patch": "@@ -72,11 +72,11 @@ namespace std\n       if (&__x != this)\n       {\n         if (__len >= __x.size())\n-          erase(copy(__x.begin(), __x.end(), this->_M_start), this->_M_finish);\n+          erase(std::copy(__x.begin(), __x.end(), this->_M_start), this->_M_finish);\n         else\n         {\n           const_iterator __mid = __x.begin() + difference_type(__len);\n-          copy(__x.begin(), __mid, this->_M_start);\n+          std::copy(__x.begin(), __mid, this->_M_start);\n           insert(this->_M_finish, __mid, __x.end());\n         }\n       }\n@@ -114,12 +114,12 @@ namespace std\n       size_type __index = __position - this->_M_start;\n       if (__index < (size() >> 1))\n       {\n-        copy_backward(this->_M_start, __position, __next);\n+        std::copy_backward(this->_M_start, __position, __next);\n         pop_front();\n       }\n       else\n       {\n-        copy(__next, this->_M_finish, __position);\n+        std::copy(__next, this->_M_finish, __position);\n         pop_back();\n       }\n       return this->_M_start + __index;\n@@ -141,17 +141,17 @@ namespace std\n         difference_type __elems_before = __first - this->_M_start;\n         if (static_cast<size_type>(__elems_before) < (size() - __n) / 2)\n         {\n-          copy_backward(this->_M_start, __first, __last);\n+          std::copy_backward(this->_M_start, __first, __last);\n           iterator __new_start = this->_M_start + __n;\n-          _Destroy(this->_M_start, __new_start);\n+          std::_Destroy(this->_M_start, __new_start);\n           _M_destroy_nodes(this->_M_start._M_node, __new_start._M_node);\n           this->_M_start = __new_start;\n         }\n         else\n         {\n-          copy(__last, this->_M_finish, __first);\n+          std::copy(__last, this->_M_finish, __first);\n           iterator __new_finish = this->_M_finish - __n;\n-          _Destroy(__new_finish, this->_M_finish);\n+          std::_Destroy(__new_finish, this->_M_finish);\n           _M_destroy_nodes(__new_finish._M_node + 1,\n \t\t\t   this->_M_finish._M_node + 1);\n           this->_M_finish = __new_finish;\n@@ -169,18 +169,18 @@ namespace std\n            __node < this->_M_finish._M_node;\n            ++__node)\n       {\n-        _Destroy(*__node, *__node + _S_buffer_size());\n+        std::_Destroy(*__node, *__node + _S_buffer_size());\n         _M_deallocate_node(*__node);\n       }\n     \n       if (this->_M_start._M_node != this->_M_finish._M_node)\n       {\n-        _Destroy(this->_M_start._M_cur, this->_M_start._M_last);\n-        _Destroy(this->_M_finish._M_first, this->_M_finish._M_cur);\n+        std::_Destroy(this->_M_start._M_cur, this->_M_start._M_last);\n+        std::_Destroy(this->_M_finish._M_first, this->_M_finish._M_cur);\n         _M_deallocate_node(this->_M_finish._M_first);\n       }\n       else\n-        _Destroy(this->_M_start._M_cur, this->_M_finish._M_cur);\n+        std::_Destroy(this->_M_start._M_cur, this->_M_finish._M_cur);\n     \n       this->_M_finish = this->_M_start;\n     }\n@@ -210,7 +210,7 @@ namespace std\n         iterator __new_start = _M_reserve_elements_at_front(__n);\n         try\n           {\n-            uninitialized_fill(__new_start, this->_M_start, __x);\n+            std::uninitialized_fill(__new_start, this->_M_start, __x);\n             this->_M_start = __new_start;\n           }\n         catch(...)\n@@ -224,7 +224,7 @@ namespace std\n         iterator __new_finish = _M_reserve_elements_at_back(__n);\n         try\n           {\n-            uninitialized_fill(this->_M_finish, __new_finish, __x);\n+            std::uninitialized_fill(this->_M_finish, __new_finish, __x);\n             this->_M_finish = __new_finish;\n           }\n         catch(...)\n@@ -249,14 +249,14 @@ namespace std\n           for (__cur = this->_M_start._M_node;\n \t       __cur < this->_M_finish._M_node;\n \t       ++__cur)\n-            uninitialized_fill(*__cur, *__cur + _S_buffer_size(), __value);\n-          uninitialized_fill(this->_M_finish._M_first,\n-\t\t\t     this->_M_finish._M_cur,\n-\t\t\t     __value);\n+            std::uninitialized_fill(*__cur, *__cur + _S_buffer_size(), __value);\n+          std::uninitialized_fill(this->_M_finish._M_first,\n+\t\t\t\t  this->_M_finish._M_cur,\n+\t\t\t\t  __value);\n         }\n       catch(...)\n         {\n-          _Destroy(this->_M_start, iterator(*__cur, __cur));\n+          std::_Destroy(this->_M_start, iterator(*__cur, __cur));\n           __throw_exception_again;\n         }\n     }\n@@ -299,15 +299,15 @@ namespace std\n                  ++__cur_node)\n             {\n               _ForwardIterator __mid = __first;\n-              advance(__mid, _S_buffer_size());\n-              uninitialized_copy(__first, __mid, *__cur_node);\n+              std::advance(__mid, _S_buffer_size());\n+              std::uninitialized_copy(__first, __mid, *__cur_node);\n               __first = __mid;\n             }\n-            uninitialized_copy(__first, __last, this->_M_finish._M_first);\n+            std::uninitialized_copy(__first, __last, this->_M_finish._M_first);\n           }\n         catch(...)\n           {\n-            _Destroy(this->_M_start, iterator(*__cur_node, __cur_node));\n+            std::_Destroy(this->_M_start, iterator(*__cur_node, __cur_node));\n             __throw_exception_again;\n           }\n       }\n@@ -323,7 +323,7 @@ namespace std\n       *(this->_M_finish._M_node + 1) = _M_allocate_node();\n       try\n         {\n-          _Construct(this->_M_finish._M_cur, __t_copy);\n+          std::_Construct(this->_M_finish._M_cur, __t_copy);\n           this->_M_finish._M_set_node(this->_M_finish._M_node + 1);\n           this->_M_finish._M_cur = this->_M_finish._M_first;\n         }\n@@ -347,7 +347,7 @@ namespace std\n         {\n           this->_M_start._M_set_node(this->_M_start._M_node - 1);\n           this->_M_start._M_cur = this->_M_start._M_last - 1;\n-          _Construct(this->_M_start._M_cur, __t_copy);\n+          std::_Construct(this->_M_start._M_cur, __t_copy);\n         }\n       catch(...)\n         {\n@@ -365,7 +365,7 @@ namespace std\n       _M_deallocate_node(this->_M_finish._M_first);\n       this->_M_finish._M_set_node(this->_M_finish._M_node - 1);\n       this->_M_finish._M_cur = this->_M_finish._M_last - 1;\n-      _Destroy(this->_M_finish._M_cur);\n+      std::_Destroy(this->_M_finish._M_cur);\n     }\n     \n   // Called only if _M_start._M_cur == _M_start._M_last - 1.  Note that \n@@ -376,7 +376,7 @@ namespace std\n     void deque<_Tp,_Alloc>::\n     _M_pop_front_aux()\n     {\n-      _Destroy(this->_M_start._M_cur);\n+      std::_Destroy(this->_M_start._M_cur);\n       _M_deallocate_node(this->_M_start._M_first);\n       this->_M_start._M_set_node(this->_M_start._M_node + 1);\n       this->_M_start._M_cur = this->_M_start._M_first;\n@@ -390,7 +390,7 @@ namespace std\n                           _InputIterator __first, _InputIterator __last,\n                           input_iterator_tag)\n       {\n-        copy(__first, __last, inserter(*this, __pos));\n+        std::copy(__first, __last, std::inserter(*this, __pos));\n       }\n     \n   template <typename _Tp, typename _Alloc>\n@@ -407,7 +407,7 @@ namespace std\n           iterator __new_start = _M_reserve_elements_at_front(__n);\n           try\n             {\n-              uninitialized_copy(__first, __last, __new_start);\n+              std::uninitialized_copy(__first, __last, __new_start);\n               this->_M_start = __new_start;\n             }\n           catch(...)\n@@ -421,7 +421,7 @@ namespace std\n           iterator __new_finish = _M_reserve_elements_at_back(__n);\n           try\n             {\n-              uninitialized_copy(__first, __last, this->_M_finish);\n+              std::uninitialized_copy(__first, __last, this->_M_finish);\n               this->_M_finish = __new_finish;\n             }\n           catch(...)\n@@ -452,7 +452,7 @@ namespace std\n         __pos = this->_M_start + __index;\n         iterator __pos1 = __pos;\n         ++__pos1;\n-        copy(__front2, __pos1, __front1);\n+        std::copy(__front2, __pos1, __front1);\n       }\n       else\n       {\n@@ -462,7 +462,7 @@ namespace std\n         iterator __back2 = __back1;\n         --__back2;\n         __pos = this->_M_start + __index;\n-        copy_backward(__pos, __back2, __back1);\n+        std::copy_backward(__pos, __back2, __back1);\n       }\n       *__pos = __x_copy;\n       return __pos;\n@@ -486,17 +486,17 @@ namespace std\n             if (__elems_before >= difference_type(__n))\n             {\n               iterator __start_n = this->_M_start + difference_type(__n);\n-              uninitialized_copy(this->_M_start, __start_n, __new_start);\n+              std::uninitialized_copy(this->_M_start, __start_n, __new_start);\n               this->_M_start = __new_start;\n-              copy(__start_n, __pos, __old_start);\n+              std::copy(__start_n, __pos, __old_start);\n               fill(__pos - difference_type(__n), __pos, __x_copy);\n             }\n             else\n             {\n-              __uninitialized_copy_fill(this->_M_start, __pos, __new_start, \n-                                        this->_M_start, __x_copy);\n+              std::__uninitialized_copy_fill(this->_M_start, __pos, __new_start, \n+\t\t\t\t\t     this->_M_start, __x_copy);\n               this->_M_start = __new_start;\n-              fill(__old_start, __pos, __x_copy);\n+              std::fill(__old_start, __pos, __x_copy);\n             }\n           }\n         catch(...)\n@@ -517,18 +517,18 @@ namespace std\n             if (__elems_after > difference_type(__n))\n             {\n               iterator __finish_n = this->_M_finish - difference_type(__n);\n-              uninitialized_copy(__finish_n, this->_M_finish, this->_M_finish);\n+              std::uninitialized_copy(__finish_n, this->_M_finish, this->_M_finish);\n               this->_M_finish = __new_finish;\n-              copy_backward(__pos, __finish_n, __old_finish);\n-              fill(__pos, __pos + difference_type(__n), __x_copy);\n+              std::copy_backward(__pos, __finish_n, __old_finish);\n+              std::fill(__pos, __pos + difference_type(__n), __x_copy);\n             }\n             else\n             {\n-              __uninitialized_fill_copy(this->_M_finish,\n-\t\t\t\t\t__pos + difference_type(__n),\n-                                        __x_copy, __pos, this->_M_finish);\n+              std::__uninitialized_fill_copy(this->_M_finish,\n+\t\t\t\t\t     __pos + difference_type(__n),\n+\t\t\t\t\t     __x_copy, __pos, this->_M_finish);\n               this->_M_finish = __new_finish;\n-              fill(__pos, __old_finish, __x_copy);\n+              std::fill(__pos, __old_finish, __x_copy);\n             }\n           }\n         catch(...)\n@@ -560,19 +560,19 @@ namespace std\n               if (__elemsbefore >= difference_type(__n))\n               {\n                 iterator __start_n = this->_M_start + difference_type(__n); \n-                uninitialized_copy(this->_M_start, __start_n, __new_start);\n+                std::uninitialized_copy(this->_M_start, __start_n, __new_start);\n                 this->_M_start = __new_start;\n-                copy(__start_n, __pos, __old_start);\n-                copy(__first, __last, __pos - difference_type(__n));\n+                std::copy(__start_n, __pos, __old_start);\n+                std::copy(__first, __last, __pos - difference_type(__n));\n               }\n               else\n               {\n                 _ForwardIterator __mid = __first;\n-                advance(__mid, difference_type(__n) - __elemsbefore);\n-                __uninitialized_copy_copy(this->_M_start, __pos,\n-\t\t\t\t\t  __first, __mid, __new_start);\n+                std::advance(__mid, difference_type(__n) - __elemsbefore);\n+                std::__uninitialized_copy_copy(this->_M_start, __pos,\n+\t\t\t\t\t       __first, __mid, __new_start);\n                 this->_M_start = __new_start;\n-                copy(__mid, __last, __old_start);\n+                std::copy(__mid, __last, __old_start);\n               }\n             }\n           catch(...)\n@@ -593,21 +593,21 @@ namespace std\n               if (__elemsafter > difference_type(__n))\n               {\n                 iterator __finish_n = this->_M_finish - difference_type(__n);\n-                uninitialized_copy(__finish_n,\n-\t\t\t\t   this->_M_finish,\n-\t\t\t\t   this->_M_finish);\n+                std::uninitialized_copy(__finish_n,\n+\t\t\t\t\tthis->_M_finish,\n+\t\t\t\t\tthis->_M_finish);\n                 this->_M_finish = __new_finish;\n-                copy_backward(__pos, __finish_n, __old_finish);\n-                copy(__first, __last, __pos);\n+                std::copy_backward(__pos, __finish_n, __old_finish);\n+                std::copy(__first, __last, __pos);\n               }\n               else\n               {\n                 _ForwardIterator __mid = __first;\n-                advance(__mid, __elemsafter);\n-                __uninitialized_copy_copy(__mid, __last, __pos,\n-                                          this->_M_finish, this->_M_finish);\n+                std::advance(__mid, __elemsafter);\n+                std::__uninitialized_copy_copy(__mid, __last, __pos,\n+\t\t\t\t\t       this->_M_finish, this->_M_finish);\n                 this->_M_finish = __new_finish;\n-                copy(__first, __mid, __pos);\n+                std::copy(__first, __mid, __pos);\n               }\n             }\n           catch(...)\n@@ -679,13 +679,13 @@ namespace std\n \t  = this->_M_map + (this->_M_map_size - __new_num_nodes) / 2 \n \t  + (__add_at_front ? __nodes_to_add : 0);\n         if (__new_nstart < this->_M_start._M_node)\n-          copy(this->_M_start._M_node,\n-\t       this->_M_finish._M_node + 1,\n-\t       __new_nstart);\n+          std::copy(this->_M_start._M_node,\n+\t\t    this->_M_finish._M_node + 1,\n+\t\t    __new_nstart);\n         else\n-          copy_backward(this->_M_start._M_node,\n-\t\t\tthis->_M_finish._M_node + 1, \n-                        __new_nstart + __old_num_nodes);\n+          std::copy_backward(this->_M_start._M_node,\n+\t\t\t     this->_M_finish._M_node + 1, \n+\t\t\t     __new_nstart + __old_num_nodes);\n       }\n       else\n       {\n@@ -695,9 +695,9 @@ namespace std\n         _Map_pointer __new_map = _M_allocate_map(__new_map_size);\n         __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2\n                              + (__add_at_front ? __nodes_to_add : 0);\n-        copy(this->_M_start._M_node,\n-\t     this->_M_finish._M_node + 1,\n-\t     __new_nstart);\n+        std::copy(this->_M_start._M_node,\n+\t\t  this->_M_finish._M_node + 1,\n+\t\t  __new_nstart);\n         _M_deallocate_map(this->_M_map, this->_M_map_size);\n     \n         this->_M_map = __new_map;"}, {"sha": "22b59d17cdaf552bca046f21c36a6b7a58bd9f41", "filename": "libstdc++-v3/include/bits/gslice_array.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b5bf71795052950c49778edd75b01af468fc482/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fgslice_array.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b5bf71795052950c49778edd75b01af468fc482/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fgslice_array.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fgslice_array.h?ref=5b5bf71795052950c49778edd75b01af468fc482", "patch": "@@ -116,25 +116,25 @@ namespace std {\n     inline void\n     gslice_array<_Tp>::operator=(const _Tp& __t) const\n     { \n-      __valarray_fill(_M_array, _Array<size_t>(_M_index),\n-\t\t      _M_index.size(), __t); \n+      std::__valarray_fill(_M_array, _Array<size_t>(_M_index),\n+\t\t\t   _M_index.size(), __t); \n     }\n \n   template<typename _Tp>\n     inline void\n     gslice_array<_Tp>::operator=(const valarray<_Tp>& __v) const\n     {\n-      __valarray_copy(_Array<_Tp>(__v), __v.size(),\n-\t\t      _M_array, _Array<size_t>(_M_index));\n+      std::__valarray_copy(_Array<_Tp>(__v), __v.size(),\n+\t\t\t   _M_array, _Array<size_t>(_M_index));\n     }\n \n   template<typename _Tp>\n     template<class _Dom>\n       inline void\n       gslice_array<_Tp>::operator=(const _Expr<_Dom, _Tp>& __e) const\n       {\n-\t__valarray_copy (__e, _M_index.size(), _M_array,\n-\t\t\t _Array<size_t>(_M_index));\n+\tstd::__valarray_copy (__e, _M_index.size(), _M_array,\n+\t\t\t      _Array<size_t>(_M_index));\n       }\n \n #undef _DEFINE_VALARRAY_OPERATOR"}, {"sha": "d88cc252e99a8711d0f77fb569e15bb31abdd97e", "filename": "libstdc++-v3/include/bits/indirect_array.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b5bf71795052950c49778edd75b01af468fc482/libstdc%2B%2B-v3%2Finclude%2Fbits%2Findirect_array.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b5bf71795052950c49778edd75b01af468fc482/libstdc%2B%2B-v3%2Finclude%2Fbits%2Findirect_array.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Findirect_array.h?ref=5b5bf71795052950c49778edd75b01af468fc482", "patch": "@@ -118,26 +118,26 @@ namespace std\n      inline indirect_array<_Tp>&\n      indirect_array<_Tp>::operator=(const indirect_array<_Tp>& __a)\n      {\n-       __valarray_copy(__a._M_array, _M_sz, __a._M_index, _M_array, _M_index);\n+       std::__valarray_copy(__a._M_array, _M_sz, __a._M_index, _M_array, _M_index);\n        return *this;\n      }\n \n \n   template<typename _Tp>\n      inline void\n      indirect_array<_Tp>::operator=(const _Tp& __t) const\n-     { __valarray_fill(_M_array, _M_index, _M_sz, __t); }\n+     { std::__valarray_fill(_M_array, _M_index, _M_sz, __t); }\n \n   template<typename _Tp>\n      inline void\n      indirect_array<_Tp>::operator=(const valarray<_Tp>& __v) const\n-     { __valarray_copy(_Array<_Tp>(__v), _M_sz, _M_array, _M_index); }\n+     { std::__valarray_copy(_Array<_Tp>(__v), _M_sz, _M_array, _M_index); }\n \n   template<typename _Tp>\n      template<class _Dom>\n        inline void\n        indirect_array<_Tp>::operator=(const _Expr<_Dom,_Tp>& __e) const\n-       { __valarray_copy(__e, _M_sz, _M_array, _M_index); }\n+       { std::__valarray_copy(__e, _M_sz, _M_array, _M_index); }\n \n #undef _DEFINE_VALARRAY_OPERATOR\n #define _DEFINE_VALARRAY_OPERATOR(_Op, _Name)\t\t\t\t\\"}, {"sha": "d6cccb72b41ba2a1f0cc09ca0f8657e7375dd03d", "filename": "libstdc++-v3/include/bits/list.tcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b5bf71795052950c49778edd75b01af468fc482/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flist.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b5bf71795052950c49778edd75b01af468fc482/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flist.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flist.tcc?ref=5b5bf71795052950c49778edd75b01af468fc482", "patch": "@@ -74,7 +74,7 @@ namespace std\n       {\n         _Node* __tmp = __cur;\n         __cur = static_cast<_Node*>(__cur->_M_next);\n-        _Destroy(&__tmp->_M_data);\n+        std::_Destroy(&__tmp->_M_data);\n         _M_put_node(__tmp);\n       }\n       this->_M_node->_M_next = this->_M_node;\n@@ -104,7 +104,7 @@ namespace std\n       _Node* __n = static_cast<_Node*>(__position._M_node);\n       __prev_node->_M_next = __next_node;\n       __next_node->_M_prev = __prev_node;\n-      _Destroy(&__n->_M_data);\n+      std::_Destroy(&__n->_M_data);\n       _M_put_node(__n);\n       return iterator(static_cast<_Node*>(__next_node));\n     }"}, {"sha": "74ccdd0040f74e4ae0efc5f4c1707d3bf5b5a45f", "filename": "libstdc++-v3/include/bits/mask_array.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b5bf71795052950c49778edd75b01af468fc482/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmask_array.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b5bf71795052950c49778edd75b01af468fc482/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmask_array.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmask_array.h?ref=5b5bf71795052950c49778edd75b01af468fc482", "patch": "@@ -114,18 +114,18 @@ namespace std {\n   template<typename _Tp>\n     inline void\n     mask_array<_Tp>::operator=(const _Tp& __t) const\n-    { __valarray_fill(_M_array, _M_sz, _M_mask, __t); }\n+    { std::__valarray_fill(_M_array, _M_sz, _M_mask, __t); }\n     \n   template<typename _Tp>\n     inline void\n     mask_array<_Tp>::operator=(const valarray<_Tp>& __v) const\n-    { __valarray_copy(_Array<_Tp>(__v), __v.size(), _M_array, _M_mask); }\n+    { std::__valarray_copy(_Array<_Tp>(__v), __v.size(), _M_array, _M_mask); }\n \n   template<typename _Tp>\n     template<class _Ex>\n       inline void\n       mask_array<_Tp>::operator=(const _Expr<_Ex, _Tp>& __e) const\n-      { __valarray_copy(__e, __e.size(), _M_array, _M_mask); }\n+      { std::__valarray_copy(__e, __e.size(), _M_array, _M_mask); }\n \n #undef _DEFINE_VALARRAY_OPERATOR\n #define _DEFINE_VALARRAY_OPERATOR(_Op, _Name)\t\t\t\t\\"}, {"sha": "c2c89308c8c1221bca68011e1cae0b8976352137", "filename": "libstdc++-v3/include/bits/slice_array.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b5bf71795052950c49778edd75b01af468fc482/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fslice_array.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b5bf71795052950c49778edd75b01af468fc482/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fslice_array.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fslice_array.h?ref=5b5bf71795052950c49778edd75b01af468fc482", "patch": "@@ -157,26 +157,26 @@ namespace std\n     inline slice_array<_Tp>&\n     slice_array<_Tp>::operator=(const slice_array<_Tp>& __a)\n     {\n-      __valarray_copy(__a._M_array, __a._M_sz, __a._M_stride,\n-                      _M_array, _M_stride);\n+      std::__valarray_copy(__a._M_array, __a._M_sz, __a._M_stride,\n+\t\t\t   _M_array, _M_stride);\n       return *this;\n     }\n \n   template<typename _Tp>\n     inline void\n     slice_array<_Tp>::operator=(const _Tp& __t) const\n-    { __valarray_fill(_M_array, _M_sz, _M_stride, __t); }\n+    { std::__valarray_fill(_M_array, _M_sz, _M_stride, __t); }\n     \n   template<typename _Tp>\n     inline void\n     slice_array<_Tp>::operator=(const valarray<_Tp>& __v) const\n-    { __valarray_copy(_Array<_Tp>(__v), _M_array, _M_sz, _M_stride); }\n+    { std::__valarray_copy(_Array<_Tp>(__v), _M_array, _M_sz, _M_stride); }\n     \n   template<typename _Tp>\n   template<class _Dom>\n     inline void\n     slice_array<_Tp>::operator=(const _Expr<_Dom,_Tp>& __e) const\n-    { __valarray_copy(__e, _M_sz, _M_array, _M_stride); }\n+    { std::__valarray_copy(__e, _M_sz, _M_array, _M_stride); }\n \n #undef _DEFINE_VALARRAY_OPERATOR\n #define _DEFINE_VALARRAY_OPERATOR(_Op,_Name)\t\t\t\t\\"}]}