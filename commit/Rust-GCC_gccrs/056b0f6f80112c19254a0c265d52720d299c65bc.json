{"sha": "056b0f6f80112c19254a0c265d52720d299c65bc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDU2YjBmNmY4MDExMmMxOTI1NGEwYzI2NWQ1MjcyMGQyOTljNjViYw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-07-28T08:15:44Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-07-28T08:15:44Z"}, "message": "[multiple changes]\n\n2009-07-28  Sergey Rybin  <rybin@adacore.com>\n\n\t* gnat_ugn.texi: Add section about gnatcheck rule exemption.\n\n2009-07-28  Vadim Godunko  <godunko@adacore.com>\n\n\t* s-oscons-tmplt.c: Define _XOPEN_SOURCE on Linux, otherwise IOV_MAX is\n\tnot defined by limits.h.\n\n\t* g-socket.adb (Receive_Vector): Use minimum length from user's vector\n\tlength and maximum supported length of data vector.\n\n2009-07-28  Gary Dismukes  <dismukes@adacore.com>\n\n\t* usage.adb: Inhibit printing gcc-specific switches for AAMP target.\n\t* make.adb: Call Get_Target_Parameters before calling Usage so that\n\tVM_Target and AAMP_On_Target will be set.\n\nFrom-SVN: r150147", "tree": {"sha": "b06b173a93c4867a60c4e103f58ba1f992668109", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b06b173a93c4867a60c4e103f58ba1f992668109"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/056b0f6f80112c19254a0c265d52720d299c65bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/056b0f6f80112c19254a0c265d52720d299c65bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/056b0f6f80112c19254a0c265d52720d299c65bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/056b0f6f80112c19254a0c265d52720d299c65bc/comments", "author": null, "committer": null, "parents": [{"sha": "5391897dbe2d7f3ae6a827c8573c465901d88897", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5391897dbe2d7f3ae6a827c8573c465901d88897", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5391897dbe2d7f3ae6a827c8573c465901d88897"}], "stats": {"total": 141, "additions": 137, "deletions": 4}, "files": [{"sha": "c916da42339e926b5869263897f683c1df17d75a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056b0f6f80112c19254a0c265d52720d299c65bc/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056b0f6f80112c19254a0c265d52720d299c65bc/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=056b0f6f80112c19254a0c265d52720d299c65bc", "patch": "@@ -1,3 +1,21 @@\n+2009-07-28  Sergey Rybin  <rybin@adacore.com>\n+\n+\t* gnat_ugn.texi: Add section about gnatcheck rule exemption.\n+\n+2009-07-28  Vadim Godunko  <godunko@adacore.com>\n+\n+\t* s-oscons-tmplt.c: Define _XOPEN_SOURCE on Linux, otherwise IOV_MAX is\n+\tnot defined by limits.h.\n+\n+\t* g-socket.adb (Receive_Vector): Use minimum length from user's vector\n+\tlength and maximum supported length of data vector.\n+\n+2009-07-28  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* usage.adb: Inhibit printing gcc-specific switches for AAMP target.\n+\t* make.adb: Call Get_Target_Parameters before calling Usage so that\n+\tVM_Target and AAMP_On_Target will be set.\n+\n 2009-07-28  Olivier Hainque  <hainque@adacore.com>\n \n \t* g-ssinty.ads: Remove, pointless and just confusing at this stage."}, {"sha": "c816312ac3f0b4cddab691009d859bff258c6c7f", "filename": "gcc/ada/g-socket.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056b0f6f80112c19254a0c265d52720d299c65bc/gcc%2Fada%2Fg-socket.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056b0f6f80112c19254a0c265d52720d299c65bc/gcc%2Fada%2Fg-socket.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socket.adb?ref=056b0f6f80112c19254a0c265d52720d299c65bc", "patch": "@@ -1664,7 +1664,8 @@ package body GNAT.Sockets is\n               (Msg_Name       => System.Null_Address,\n                Msg_Namelen    => 0,\n                Msg_Iov        => Vector'Address,\n-               Msg_Iovlen     => SOSC.Msg_Iovlen_T (Vector'Length),\n+               Msg_Iovlen     =>\n+                 SOSC.Msg_Iovlen_T'Min (Vector'Length, SOSC.IOV_MAX),\n                Msg_Control    => System.Null_Address,\n                Msg_Controllen => 0,\n                Msg_Flags      => 0);"}, {"sha": "c1feece8654e8aa4b2eb9c9bee55e0eb62bf9307", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 105, "deletions": 1, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056b0f6f80112c19254a0c265d52720d299c65bc/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056b0f6f80112c19254a0c265d52720d299c65bc/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=056b0f6f80112c19254a0c265d52720d299c65bc", "patch": "@@ -490,6 +490,7 @@ Verifying Properties Using gnatcheck\n * gnatcheck Rule Options::\n * Adding the Results of Compiler Checks to gnatcheck Output::\n * Project-Wide Checks::\n+* Rule exemption::\n * Predefined Rules::\n \n Sample Bodies Using gnatstub\n@@ -20696,6 +20697,7 @@ Either a @file{@var{filename}} or an @file{@var{arg_list_filename}} must be supp\n * gnatcheck Rule Options::\n * Adding the Results of Compiler Checks to gnatcheck Output::\n * Project-Wide Checks::\n+* Rule exemption::\n * Predefined Rules::\n @end menu\n \n@@ -20946,6 +20948,108 @@ the @option{-U} option followed by the name of the main unit:\n @end smallexample\n \n \n+@node Rule exemption\n+@section Rule exemption\n+@cindex Rule exemption (for @command{gnatcheck})\n+\n+@noindent\n+@command{gnatcheck} can be used to inforce a coding standard. It may be\n+appropriate, in some circumstances, to accept violations of the coding\n+standard. In such a case, it is a good idea to justify the violation within\n+the sources themselves. It makes it possible to maintain the justification\n+for such violations along with the sources containing them.\n+@command{gnatcheck} supports such justified violations with the notion of\n+``exemption'' covering a specific source code section. Usually,\n+@command{gnatcheck} issues rule violation messages both on @file{stderr}\n+and in a report file. Exempted violations are not reported at all on\n+@file{stderr} so that users using @command{gnatcheck} in interactive mode\n+(e.g. in its GPS interface) do not need to pay attention to known and\n+justified violations. The @command{gnatcheck} report includes exempted\n+violations in a special section along with their justification.\n+\n+@menu\n+* Using pragma Annotate to Control Rule Exemption::\n+* gnatcheck Annotations Rules::\n+@end menu\n+\n+@node Using pragma Annotate to Control Rule Exemption\n+@subsection Using pragma @code{Annotate} to Control Rule Exemption\n+@cindex Using pragma Annotate to control rule exemption\n+\n+@noindent\n+Rule exemption is controlled by pragma @code{Annotate} when its first parameter is\n+``gnatcheck''. Here is the syntax of @command{gnatcheck} annotations:\n+\n+@smallexample @c ada\n+pragma Annotate (gnatcheck, exemption_control, Rule_Name, [justification]);\n+\n+exemption_control ::= \"Exempt_On\" | \"Exempt_Off\"\n+\n+Rule_Name         ::= string_literal\n+\n+justification     ::= string_literal\n+\n+@end smallexample\n+\n+@noindent\n+When a @command{gnatcheck} annotatation has more then four parameters,\n+@command{gnatcheck} issues a warning and ignore additional parameters.\n+If the additional parameters do not follow the syntax above,\n+@command{gnatcheck} emits a warning and ignores the annotation.\n+\n+@code{Rule_Name} should be the name of some existing @command{gnatcheck} rule.\n+If this is not the case, the warning message is generated and the pragma is\n+ignored. If @code{Rule_Name} denotes a rule that is not activated by the given\n+@command{gnatcheck} call, the pragma is ignored silently.\n+\n+A source code section where an exemption is active for a given rule starts with\n+an extempt_on annotation and terminates with an exempt_off one:\n+\n+@smallexample @c ada\n+pragma Annotate (gnatcheck, \"Exempt_On\", Rule_Name, \"justification\");\n+-- source code section\n+pragma Annotate (gnatcheck, \"Exempt_Off\", Rule_Name);\n+@end smallexample\n+\n+\n+@node gnatcheck Annotations Rules\n+@subsection @command{gnatcheck} Annotations Rules\n+@cindex @command{gnatcheck} annotations rules\n+\n+@itemize @bullet\n+\n+@item\n+an ``Exempt_Off'' annotation can only appear after a corresponding\n+``Exempt_On'' annotation in order to create a properly formed exempted source\n+code section;\n+\n+@item\n+exempted source code sections are only based on the source location of the\n+annotations. Any source construct having a source location in between the two\n+annotations is part of the exempted source code section;\n+\n+@item\n+exempted source code sections for different rules are independent. They can\n+be nested or intersect with one another without limitation. It is not allowed\n+to create nested or intersecting source code sections for the same rule;\n+\n+@item\n+malformed exempted source code sections are reported by a warning and\n+the corresponding rule exemption is ignored;\n+\n+@item\n+when an exempted source code section does not contain at least one violation\n+of the exempted rule, a warning is emitted on @file{stderr}. This allow proper\n+maintenance of exempted source code sections;\n+\n+@item\n+if an exempted source code section reaches the end of the compilation unit\n+source and there is no @code{Annotate} pragma closing this section, then the\n+exemption for the given rule is turned off and a warning is issued.\n+\n+@end itemize\n+\n+\n @node Predefined Rules\n @section Predefined Rules\n @cindex Predefined rules (for @command{gnatcheck})\n@@ -21222,7 +21326,7 @@ conditions is met:\n @itemize @bullet\n @item\n it contains at least one complex declaration such as a subprogram body,\n-package, task, protected object declaration, or a generic instantiation\n+package, task, protected declaration, or a generic instantiation\n (except instantiation of @code{Ada.Unchecked_Conversion});\n \n @item"}, {"sha": "25124fa831402ec2d33da04aa8956f53fdd474c3", "filename": "gcc/ada/make.adb", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056b0f6f80112c19254a0c265d52720d299c65bc/gcc%2Fada%2Fmake.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056b0f6f80112c19254a0c265d52720d299c65bc/gcc%2Fada%2Fmake.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmake.adb?ref=056b0f6f80112c19254a0c265d52720d299c65bc", "patch": "@@ -4772,6 +4772,11 @@ package body Make is\n             Exit_Program (E_Success);\n \n          else\n+            --  Call Get_Target_Parameters to ensure that VM_Target and\n+            --  AAMP_On_Target get set before calling Usage.\n+\n+            Targparm.Get_Target_Parameters;\n+\n             --  Output usage information if no files to compile\n \n             Usage;"}, {"sha": "c4218c2ab78b4c2dee473f724be3ed4818a6a50b", "filename": "gcc/ada/s-oscons-tmplt.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056b0f6f80112c19254a0c265d52720d299c65bc/gcc%2Fada%2Fs-oscons-tmplt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056b0f6f80112c19254a0c265d52720d299c65bc/gcc%2Fada%2Fs-oscons-tmplt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-oscons-tmplt.c?ref=056b0f6f80112c19254a0c265d52720d299c65bc", "patch": "@@ -78,6 +78,11 @@ pragma Style_Checks (\"M32766\");\n  **  $ RUN xoscons\n  **/\n \n+#if defined (__linux__) && !defined (_XOPEN_SOURCE)\n+/* For Linux _XOPEN_SOURCE must be defined, otherwise IOV_MAX is not defined */\n+#define _XOPEN_SOURCE 500\n+#endif\n+\n #include <stdlib.h>\n #include <string.h>\n #include <limits.h>"}, {"sha": "6d704403da9a0c19779215905f9013390b0c9f61", "filename": "gcc/ada/usage.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056b0f6f80112c19254a0c265d52720d299c65bc/gcc%2Fada%2Fusage.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056b0f6f80112c19254a0c265d52720d299c65bc/gcc%2Fada%2Fusage.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fusage.adb?ref=056b0f6f80112c19254a0c265d52720d299c65bc", "patch": "@@ -91,9 +91,9 @@ begin\n \n    Write_Eol;\n \n-   --  Common GCC switches not available in JGNAT/MGNAT\n+   --  Common GCC switches not available for JVM, .NET, and AAMP targets\n \n-   if VM_Target = No_VM then\n+   if VM_Target = No_VM and then not AAMP_On_Target then\n       Write_Switch_Char (\"fstack-check \", \"\");\n       Write_Line (\"Generate stack checking code\");\n "}]}