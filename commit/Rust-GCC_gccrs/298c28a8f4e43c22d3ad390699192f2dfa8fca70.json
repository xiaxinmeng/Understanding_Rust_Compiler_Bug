{"sha": "298c28a8f4e43c22d3ad390699192f2dfa8fca70", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjk4YzI4YThmNGU0M2MyMmQzYWQzOTA2OTkxOTJmMmRmYThmY2E3MA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2004-02-06T19:29:56Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2004-02-06T19:29:56Z"}, "message": "flow.c (update_life_info): Allocate reg_deaths when called from scheudler.\n\n\n\t* flow.c (update_life_info): Allocate reg_deaths when called from\n\tscheudler.\n\t(attempt_auto_inc):  Update life ranges accordingly.\n\nFrom-SVN: r77415", "tree": {"sha": "b09126fc8be0deb3ef0fabb92f855b241186e585", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b09126fc8be0deb3ef0fabb92f855b241186e585"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/298c28a8f4e43c22d3ad390699192f2dfa8fca70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/298c28a8f4e43c22d3ad390699192f2dfa8fca70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/298c28a8f4e43c22d3ad390699192f2dfa8fca70", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/298c28a8f4e43c22d3ad390699192f2dfa8fca70/comments", "author": null, "committer": null, "parents": [{"sha": "fbdf188d7809e1c8a5edf36f95a4f846dd1d2c85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbdf188d7809e1c8a5edf36f95a4f846dd1d2c85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fbdf188d7809e1c8a5edf36f95a4f846dd1d2c85"}], "stats": {"total": 32, "additions": 24, "deletions": 8}, "files": [{"sha": "45ef069185ae3ade3ef5c3d6f92bbe85bafb9bdc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/298c28a8f4e43c22d3ad390699192f2dfa8fca70/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/298c28a8f4e43c22d3ad390699192f2dfa8fca70/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=298c28a8f4e43c22d3ad390699192f2dfa8fca70", "patch": "@@ -1,3 +1,9 @@\n+2004-02-06  Jan Hubicka  <jh@suse.cz>\n+\n+\t* flow.c (update_life_info): Allocate reg_deaths when called from\n+\tscheudler.\n+\t(attempt_auto_inc):  Update life ranges accordingly.\n+\n 2004-02-06  Ulrich Weigand  <uweigand@de.ibm.com>\n \n \tPR debug/11816"}, {"sha": "a12f0ed210134cb9ffa0470951a2c9cb62ea7a42", "filename": "gcc/flow.c", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/298c28a8f4e43c22d3ad390699192f2dfa8fca70/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/298c28a8f4e43c22d3ad390699192f2dfa8fca70/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=298c28a8f4e43c22d3ad390699192f2dfa8fca70", "patch": "@@ -627,6 +627,9 @@ update_life_info (sbitmap blocks, enum update_life_extent extent, int prop_flags\n   tmp = INITIALIZE_REG_SET (tmp_head);\n   ndead = 0;\n \n+  if ((prop_flags & PROP_REG_INFO) && !reg_deaths)\n+    reg_deaths = xcalloc (sizeof (*reg_deaths), max_regno);\n+\n   timevar_push ((extent == UPDATE_LIFE_LOCAL || blocks)\n \t\t? TV_LIFE_UPDATE : TV_LIFE);\n \n@@ -3376,16 +3379,16 @@ attempt_auto_inc (struct propagate_block_info *pbi, rtx inc, rtx insn,\n       incr_reg = q;\n       regno = REGNO (q);\n \n+      if ((pbi->flags & PROP_REG_INFO)\n+\t  && !REGNO_REG_SET_P (pbi->reg_live, regno))\n+\treg_deaths[regno] = pbi->insn_num;\n+\n       /* REGNO is now used in INCR which is below INSN, but\n \t it previously wasn't live here.  If we don't mark\n \t it as live, we'll put a REG_DEAD note for it\n \t on this insn, which is incorrect.  */\n       SET_REGNO_REG_SET (pbi->reg_live, regno);\n \n-      /* We shall not do the autoinc during final pass.  */\n-      if (flags & PROP_REG_INFO)\n-\tabort ();\n-\n       /* If there are any calls between INSN and INCR, show\n \t that REGNO now crosses them.  */\n       for (temp = insn; temp != incr; temp = NEXT_INSN (temp))\n@@ -3417,14 +3420,21 @@ attempt_auto_inc (struct propagate_block_info *pbi, rtx inc, rtx insn,\n       /* If the original source was dead, it's dead now.  */\n       rtx note;\n \n-      /* We shall not do the autoinc during final pass.  */\n-      if (flags & PROP_REG_INFO)\n-\tabort ();\n       while ((note = find_reg_note (incr, REG_DEAD, NULL_RTX)) != NULL_RTX)\n \t{\n \t  remove_note (incr, note);\n \t  if (XEXP (note, 0) != incr_reg)\n-\t    CLEAR_REGNO_REG_SET (pbi->reg_live, REGNO (XEXP (note, 0)));\n+\t    {\n+\t      unsigned int regno = REGNO (XEXP (note, 0));\n+\n+\t      if ((pbi->flags & PROP_REG_INFO)\n+\t\t  && REGNO_REG_SET_P (pbi->reg_live, regno))\n+\t\t{\n+\t\t  REG_LIVE_LENGTH (regno) += pbi->insn_num - reg_deaths[regno];\n+\t\t  reg_deaths[regno] = 0;\n+\t\t}\n+\t      CLEAR_REGNO_REG_SET (pbi->reg_live, REGNO (XEXP (note, 0)));\n+\t    }\n \t}\n \n       PUT_CODE (incr, NOTE);"}]}