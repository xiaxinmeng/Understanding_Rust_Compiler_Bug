{"sha": "0c7e16e1258b67ba8efa1b019802bee4d802d4a5", "node_id": "C_kwDOANBUbNoAKDBjN2UxNmUxMjU4YjY3YmE4ZWZhMWIwMTk4MDJiZWU0ZDgwMmQ0YTU", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-03-03T13:26:23Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-03-03T14:21:09Z"}, "message": "macros: Add test cases for macro repetition separators", "tree": {"sha": "89dfecb7d84cb7a94abf40b63a4eb48fb7069e04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/89dfecb7d84cb7a94abf40b63a4eb48fb7069e04"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c7e16e1258b67ba8efa1b019802bee4d802d4a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c7e16e1258b67ba8efa1b019802bee4d802d4a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c7e16e1258b67ba8efa1b019802bee4d802d4a5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c7e16e1258b67ba8efa1b019802bee4d802d4a5/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4fde21b37a2de2d2915d13d108395e86980aef96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fde21b37a2de2d2915d13d108395e86980aef96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4fde21b37a2de2d2915d13d108395e86980aef96"}], "stats": {"total": 45, "additions": 45, "deletions": 0}, "files": [{"sha": "9a59089b1e4fe20dabf311eb418c1fb25e8b3363", "filename": "gcc/testsuite/rust/compile/macro9.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c7e16e1258b67ba8efa1b019802bee4d802d4a5/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro9.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c7e16e1258b67ba8efa1b019802bee4d802d4a5/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro9.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro9.rs?ref=0c7e16e1258b67ba8efa1b019802bee4d802d4a5", "patch": "@@ -0,0 +1,17 @@\n+macro_rules! add {\n+    ($e:expr, $($es:expr),*) => {\n+        $e + add!($($es),*)\n+    };\n+    ($e:expr) => {\n+        $e\n+    };\n+}\n+\n+fn main() -> i32 {\n+    let a = add!(15 2 9); // { dg-error \"Failed to match any rule within macro\" }\n+    let b = add!(15);\n+    let b = add!(15 14); // { dg-error \"Failed to match any rule within macro\" }\n+    let b = add!(15, 14,); // { dg-error \"Failed to match any rule within macro\" }\n+\n+    0\n+}"}, {"sha": "4732545410eebdc651c8727c4c904061fc3b64b9", "filename": "gcc/testsuite/rust/execute/torture/macros19.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c7e16e1258b67ba8efa1b019802bee4d802d4a5/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros19.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c7e16e1258b67ba8efa1b019802bee4d802d4a5/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros19.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros19.rs?ref=0c7e16e1258b67ba8efa1b019802bee4d802d4a5", "patch": "@@ -0,0 +1,14 @@\n+macro_rules! add {\n+    ($e:expr, $($es:expr),*) => {\n+        $e + add!($($es),*)\n+    };\n+    ($e:expr) => {\n+        $e\n+    };\n+}\n+\n+fn main() -> i32 {\n+    let a = add!(15, 2, 9); // 26\n+\n+    a - 26\n+}"}, {"sha": "fc116d089c4a66255f38b6ead075f595a9e9c2f8", "filename": "gcc/testsuite/rust/execute/torture/macros20.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c7e16e1258b67ba8efa1b019802bee4d802d4a5/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros20.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c7e16e1258b67ba8efa1b019802bee4d802d4a5/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros20.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros20.rs?ref=0c7e16e1258b67ba8efa1b019802bee4d802d4a5", "patch": "@@ -0,0 +1,14 @@\n+macro_rules! add {\n+    ($e:expr big_tok $($es:expr) big_tok *) => {\n+        $e + add!($($es) big_tok *)\n+    };\n+    ($e:expr) => {\n+        $e\n+    };\n+}\n+\n+fn main() -> i32 {\n+    let a = add!(15 big_tok 2 big_tok 9); // 26\n+\n+    a - 26\n+}"}]}