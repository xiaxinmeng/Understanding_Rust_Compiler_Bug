{"sha": "e828f4b5898896240b2ae5d5030c539aff28ea24", "node_id": "C_kwDOANBUbNoAKGU4MjhmNGI1ODk4ODk2MjQwYjJhZTVkNTAzMGM1MzlhZmYyOGVhMjQ", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2021-09-28T17:11:22Z"}, "committer": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2021-10-06T13:11:50Z"}, "message": "Use TYPE_MIN/MAX_VALUE in set_varying when possible.\n\nWe currently create new trees every time... which is very wasteful and time\nconsuming. Instead, just use the TYPE_MIN/MAX_VALUE.\n\n\t* value-range.h (irange::set_varying): Use TYPE_MIN_VALUE and\n\tTYPE_MAX_VALUE instead of creating new trees when possible.", "tree": {"sha": "2ebb40958a0a3a527b76d921b76754c63086575e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2ebb40958a0a3a527b76d921b76754c63086575e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e828f4b5898896240b2ae5d5030c539aff28ea24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e828f4b5898896240b2ae5d5030c539aff28ea24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e828f4b5898896240b2ae5d5030c539aff28ea24", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e828f4b5898896240b2ae5d5030c539aff28ea24/comments", "author": null, "committer": null, "parents": [{"sha": "4b8ca6c6177b2bd948c1cb2a116955b942751559", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b8ca6c6177b2bd948c1cb2a116955b942751559", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b8ca6c6177b2bd948c1cb2a116955b942751559"}], "stats": {"total": 15, "additions": 13, "deletions": 2}, "files": [{"sha": "39e8f3bcdee845bf95dfd8f62ed17b261689e1af", "filename": "gcc/value-range.h", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e828f4b5898896240b2ae5d5030c539aff28ea24/gcc%2Fvalue-range.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e828f4b5898896240b2ae5d5030c539aff28ea24/gcc%2Fvalue-range.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-range.h?ref=e828f4b5898896240b2ae5d5030c539aff28ea24", "patch": "@@ -476,10 +476,21 @@ irange::set_varying (tree type)\n \n   if (INTEGRAL_TYPE_P (type))\n     {\n+      // Strict enum's require varying to be not TYPE_MIN/MAX, but rather\n+      // min_value and max_value.\n       wide_int min = wi::min_value (TYPE_PRECISION (type), TYPE_SIGN (type));\n       wide_int max = wi::max_value (TYPE_PRECISION (type), TYPE_SIGN (type));\n-      m_base[0] = wide_int_to_tree (type, min);\n-      m_base[1] = wide_int_to_tree (type, max);\n+      if (wi::eq_p (max, wi::to_wide (TYPE_MAX_VALUE (type)))\n+\t  && wi::eq_p (min, wi::to_wide (TYPE_MIN_VALUE (type))))\n+\t{\n+\t  m_base[0] = TYPE_MIN_VALUE (type);\n+\t  m_base[1] = TYPE_MAX_VALUE (type);\n+\t}\n+      else\n+\t{\n+\t  m_base[0] = wide_int_to_tree (type, min);\n+\t  m_base[1] = wide_int_to_tree (type, max);\n+\t}\n     }\n   else if (POINTER_TYPE_P (type))\n     {"}]}