{"sha": "146c55da60364def529cb3b6d6500b92c3abc75a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTQ2YzU1ZGE2MDM2NGRlZjUyOWNiM2I2ZDY1MDBiOTJjM2FiYzc1YQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2016-06-13T08:57:02Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2016-06-13T08:57:02Z"}, "message": "re PR middle-end/71476 (ICE in gimplify_switch_expr with -Wswitch-unreachable)\n\n\tPR middle-end/71476\n\t* gimplify.c (maybe_warn_switch_unreachable): Factored out of\n\tgimplify_switch_expr.\n\t(warn_switch_unreachable_r): New function.\n\n\t* c-c++-common/Wswitch-unreachable-4.c: New test.\n\t* gcc.dg/Wswitch-unreachable-2.c: New test.\n\t* g++.dg/tm/jump1.C: Move dg-warning.\n\nFrom-SVN: r237367", "tree": {"sha": "6d369fa9afe3f33198df3640c13eec0d2c04b2e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6d369fa9afe3f33198df3640c13eec0d2c04b2e2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/146c55da60364def529cb3b6d6500b92c3abc75a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/146c55da60364def529cb3b6d6500b92c3abc75a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/146c55da60364def529cb3b6d6500b92c3abc75a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/146c55da60364def529cb3b6d6500b92c3abc75a/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f90eba2a3ca31b13d19777957214afae7c1e2647", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f90eba2a3ca31b13d19777957214afae7c1e2647", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f90eba2a3ca31b13d19777957214afae7c1e2647"}], "stats": {"total": 157, "additions": 122, "deletions": 35}, "files": [{"sha": "ae42dc986223e694e9a2df8feb0aaa6c1cdd5e6a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/146c55da60364def529cb3b6d6500b92c3abc75a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/146c55da60364def529cb3b6d6500b92c3abc75a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=146c55da60364def529cb3b6d6500b92c3abc75a", "patch": "@@ -1,3 +1,10 @@\n+2016-06-13  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR middle-end/71476\n+\t* gimplify.c (maybe_warn_switch_unreachable): Factored out of\n+\tgimplify_switch_expr.\n+\t(warn_switch_unreachable_r): New function.\n+\n 2016-06-13  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n \n \tPR target/71379"}, {"sha": "ae8b4fcce3cf3d74214be7ca2eaee4670b95e346", "filename": "gcc/gimplify.c", "status": "modified", "additions": 69, "deletions": 33, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/146c55da60364def529cb3b6d6500b92c3abc75a/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/146c55da60364def529cb3b6d6500b92c3abc75a/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=146c55da60364def529cb3b6d6500b92c3abc75a", "patch": "@@ -1559,6 +1559,73 @@ gimplify_statement_list (tree *expr_p, gimple_seq *pre_p)\n   return GS_ALL_DONE;\n }\n \n+/* Callback for walk_gimple_seq.  */\n+\n+static tree\n+warn_switch_unreachable_r (gimple_stmt_iterator *gsi_p, bool *handled_ops_p,\n+\t\t\t   struct walk_stmt_info *wi)\n+{\n+  gimple *stmt = gsi_stmt (*gsi_p);\n+\n+  *handled_ops_p = true;\n+  switch (gimple_code (stmt))\n+    {\n+    case GIMPLE_TRY:\n+      /* A compiler-generated cleanup or a user-written try block.\n+\t If it's empty, don't dive into it--that would result in\n+\t worse location info.  */\n+      if (gimple_try_eval (stmt) == NULL)\n+\t{\n+\t  wi->info = stmt;\n+\t  return integer_zero_node;\n+\t}\n+      /* Fall through.  */\n+    case GIMPLE_BIND:\n+    case GIMPLE_CATCH:\n+    case GIMPLE_EH_FILTER:\n+    case GIMPLE_TRANSACTION:\n+      /* Walk the sub-statements.  */\n+      *handled_ops_p = false;\n+      break;\n+    default:\n+      /* Save the first \"real\" statement (not a decl/lexical scope/...).  */\n+      wi->info = stmt;\n+      return integer_zero_node;\n+    }\n+  return NULL_TREE;\n+}\n+\n+/* Possibly warn about unreachable statements between switch's controlling\n+   expression and the first case.  SEQ is the body of a switch expression.  */\n+\n+static void\n+maybe_warn_switch_unreachable (gimple_seq seq)\n+{\n+  if (!warn_switch_unreachable\n+      /* This warning doesn't play well with Fortran when optimizations\n+\t are on.  */\n+      || lang_GNU_Fortran ()\n+      || seq == NULL)\n+    return;\n+\n+  struct walk_stmt_info wi;\n+  memset (&wi, 0, sizeof (wi));\n+  walk_gimple_seq (seq, warn_switch_unreachable_r, NULL, &wi);\n+  gimple *stmt = (gimple *) wi.info;\n+\n+  if (stmt && gimple_code (stmt) != GIMPLE_LABEL)\n+    {\n+      if (gimple_code (stmt) == GIMPLE_GOTO\n+\t  && TREE_CODE (gimple_goto_dest (stmt)) == LABEL_DECL\n+\t  && DECL_ARTIFICIAL (gimple_goto_dest (stmt)))\n+\t/* Don't warn for compiler-generated gotos.  These occur\n+\t   in Duff's devices, for example.  */;\n+      else\n+\twarning_at (gimple_location (stmt), OPT_Wswitch_unreachable,\n+\t\t    \"statement will never be executed\");\n+    }\n+}\n+\n \f\n /* Gimplify a SWITCH_EXPR, and collect the vector of labels it can\n    branch to.  */\n@@ -1596,39 +1663,8 @@ gimplify_switch_expr (tree *expr_p, gimple_seq *pre_p)\n \n       gimplify_stmt (&SWITCH_BODY (switch_expr), &switch_body_seq);\n \n-      /* Possibly warn about unreachable statements between switch's\n-\t controlling expression and the first case.  */\n-      if (warn_switch_unreachable\n-\t  /* This warning doesn't play well with Fortran when optimizations\n-\t     are on.  */\n-\t  && !lang_GNU_Fortran ()\n-\t  && switch_body_seq != NULL)\n-\t{\n-\t  gimple_seq seq = switch_body_seq;\n-\t  /* Look into the innermost lexical scope.  */\n-\t  while (gimple_code (seq) == GIMPLE_BIND)\n-\t    seq = gimple_bind_body (as_a <gbind *> (seq));\n-\t  gimple *stmt = gimple_seq_first_stmt (seq);\n-\t  if (gimple_code (stmt) == GIMPLE_TRY)\n-\t    {\n-\t      /* A compiler-generated cleanup or a user-written try block.\n-\t\t Try to get the first statement in its try-block, for better\n-\t\t location.  */\n-\t      if ((seq = gimple_try_eval (stmt)))\n-\t\tstmt = gimple_seq_first_stmt (seq);\n-\t    }\n-\t  if (gimple_code (stmt) != GIMPLE_LABEL)\n-\t    {\n-\t      if (gimple_code (stmt) == GIMPLE_GOTO\n-\t\t  && TREE_CODE (gimple_goto_dest (stmt)) == LABEL_DECL\n-\t\t  && DECL_ARTIFICIAL (gimple_goto_dest (stmt)))\n-\t\t/* Don't warn for compiler-generated gotos.  These occur\n-\t\t   in Duff's devices, for example.  */;\n-\t      else\n-\t\twarning_at (gimple_location (stmt), OPT_Wswitch_unreachable,\n-\t\t\t    \"statement will never be executed\");\n-\t    }\n-\t}\n+      maybe_warn_switch_unreachable (switch_body_seq);\n+\n       labels = gimplify_ctxp->case_labels;\n       gimplify_ctxp->case_labels = saved_labels;\n "}, {"sha": "98af7659e1bafcd1fe287ae2f7dfc85b0a814852", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/146c55da60364def529cb3b6d6500b92c3abc75a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/146c55da60364def529cb3b6d6500b92c3abc75a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=146c55da60364def529cb3b6d6500b92c3abc75a", "patch": "@@ -1,3 +1,10 @@\n+2016-06-13  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR middle-end/71476\n+\t* c-c++-common/Wswitch-unreachable-4.c: New test.\n+\t* gcc.dg/Wswitch-unreachable-2.c: New test.\n+\t* g++.dg/tm/jump1.C: Move dg-warning.\n+\n 2016-06-13  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/renaming10.ad[sb]: New test."}, {"sha": "e7378a7cf18827bacc616c6410f2e81b4eaad3f8", "filename": "gcc/testsuite/c-c++-common/Wswitch-unreachable-4.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/146c55da60364def529cb3b6d6500b92c3abc75a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWswitch-unreachable-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/146c55da60364def529cb3b6d6500b92c3abc75a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWswitch-unreachable-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWswitch-unreachable-4.c?ref=146c55da60364def529cb3b6d6500b92c3abc75a", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+\n+void\n+foo (int a, int b)\n+{\n+  switch (a)\n+    {\n+      { int c; }\n+      { int d; }\n+      { int e; }\n+      b++; /* { dg-warning \"statement will never be executed\" } */\n+    case 1:\n+      break;\n+    }\n+\n+  switch (a)\n+    {\n+      { int c; }\n+      { int d = 1; } /* { dg-warning \"statement will never be executed\" } */\n+      { int e; }\n+      b++;\n+    case 1:\n+      break;\n+    }\n+}"}, {"sha": "a27c20118610cf4575252e0bdcbd7b2b3b41a7ed", "filename": "gcc/testsuite/g++.dg/tm/jump1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/146c55da60364def529cb3b6d6500b92c3abc75a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftm%2Fjump1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/146c55da60364def529cb3b6d6500b92c3abc75a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftm%2Fjump1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftm%2Fjump1.C?ref=146c55da60364def529cb3b6d6500b92c3abc75a", "patch": "@@ -14,8 +14,8 @@ void f()\n \n   switch (i)\n     {\n-      synchronized {\t\t// { dg-warning \"statement will never be executed\" }\n-\t++i;\n+      synchronized {\n+\t++i;\t\t\t// { dg-warning \"statement will never be executed\" }\n       case 42:\t\t\t// { dg-error \"\" }\n \t++i;\n       }"}, {"sha": "343baea12454d0f973f7b69646ff55eed75526b2", "filename": "gcc/testsuite/gcc.dg/Wswitch-unreachable-2.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/146c55da60364def529cb3b6d6500b92c3abc75a/gcc%2Ftestsuite%2Fgcc.dg%2FWswitch-unreachable-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/146c55da60364def529cb3b6d6500b92c3abc75a/gcc%2Ftestsuite%2Fgcc.dg%2FWswitch-unreachable-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWswitch-unreachable-2.c?ref=146c55da60364def529cb3b6d6500b92c3abc75a", "patch": "@@ -0,0 +1,12 @@\n+/* PR middle-end/71476 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wswitch-unreachable\" } */\n+\n+void\n+foo (int a)\n+{\n+  switch (a)\n+    {\n+      void f (void) { }\n+    }\n+}"}]}