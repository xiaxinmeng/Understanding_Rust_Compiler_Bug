{"sha": "988ad90d003221abfb91157ef289f702b055a8fd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTg4YWQ5MGQwMDMyMjFhYmZiOTExNTdlZjI4OWY3MDJiMDU1YThmZA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2003-04-28T23:05:57Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2003-04-28T23:05:57Z"}, "message": "localename.cc: Standardize exception strings.\n\n\n2003-04-28  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* src/localename.cc: Standardize exception strings.\n\t* src/locale.cc: Same.\n\t* src/ios.cc: Same.\n\t* include/bits/basic_string.tcc: Same.\n\t* include/bits/basic_ios.tcc: Same.\n\t* include/std/std_bitset.h: Same.\n\t* include/ext/ropeimpl.h: Same.\n\t* include/bits/stl_vector.h: Same.\n\t* include/bits/stl_deque.h: Same.\n\t* include/bits/stl_bvector.h: Same.\n\t* config/locale/generic/c_locale.cc: Same.\n\t* config/locale/gnu/c_locale.cc: Same.\n\t* config/locale/ieee_1003.1-2001/codecvt_specializations.h: Same.\n\n\t* testsuite/testsuite_hooks.cc (__gnu_cxx_test): Modify.\n\nFrom-SVN: r66192", "tree": {"sha": "7f56a8cb32f19328c45d4c82a33c36a558fbdd8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f56a8cb32f19328c45d4c82a33c36a558fbdd8a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/988ad90d003221abfb91157ef289f702b055a8fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/988ad90d003221abfb91157ef289f702b055a8fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/988ad90d003221abfb91157ef289f702b055a8fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/988ad90d003221abfb91157ef289f702b055a8fd/comments", "author": null, "committer": null, "parents": [{"sha": "6ef4b79c95c5494878bbea87a9cda9e45a75e163", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ef4b79c95c5494878bbea87a9cda9e45a75e163", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ef4b79c95c5494878bbea87a9cda9e45a75e163"}], "stats": {"total": 87, "additions": 55, "deletions": 32}, "files": [{"sha": "bf1f4bbf82e6dbb06ddcc541041823ebedff8a9a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/988ad90d003221abfb91157ef289f702b055a8fd/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/988ad90d003221abfb91157ef289f702b055a8fd/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=988ad90d003221abfb91157ef289f702b055a8fd", "patch": "@@ -1,3 +1,21 @@\n+2003-04-28  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* src/localename.cc: Standardize exception strings.\n+\t* src/locale.cc: Same.\n+\t* src/ios.cc: Same.\n+\t* include/bits/basic_string.tcc: Same.\n+\t* include/bits/basic_ios.tcc: Same.\n+\t* include/std/std_bitset.h: Same.\n+\t* include/ext/ropeimpl.h: Same.\n+\t* include/bits/stl_vector.h: Same.\n+\t* include/bits/stl_deque.h: Same.\n+\t* include/bits/stl_bvector.h: Same.\n+\t* config/locale/generic/c_locale.cc: Same.\n+\t* config/locale/gnu/c_locale.cc: Same.\n+\t* config/locale/ieee_1003.1-2001/codecvt_specializations.h: Same.\n+\n+\t* testsuite/testsuite_hooks.cc (__gnu_cxx_test): Modify.\n+\t\n 2003-04-28  Paolo Carlini  <pcarlini@unitus.it>\n \n \t* include/std/std_streambuf.h (_M_buf_size): is currently"}, {"sha": "d8873ec21330ba0c71fce866a53f6ccdbb657140", "filename": "libstdc++-v3/config/locale/generic/c_locale.cc", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/988ad90d003221abfb91157ef289f702b055a8fd/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fc_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/988ad90d003221abfb91157ef289f702b055a8fd/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fc_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fc_locale.cc?ref=988ad90d003221abfb91157ef289f702b055a8fd", "patch": "@@ -215,9 +215,12 @@ namespace std\n   locale::facet::_S_create_c_locale(__c_locale& __cloc, const char* __s, \n \t\t\t\t    __c_locale)\n   {\n+    // Currently, the generic model only supports the \"C\" locale.\n+    // See http://gcc.gnu.org/ml/libstdc++/2003-02/msg00345.html\n     __cloc = NULL;\n     if (strcmp(__s, \"C\"))\n-      __throw_runtime_error(\"attempt to create locale from unhandled name in generic implementation; see http://gcc.gnu.org/ml/libstdc++/2003-02/msg00345.html\");\n+      __throw_runtime_error(\"locale::facet::_S_create_c_locale \"\n+\t\t\t    \"name not valid\");\n   }\n \n   void"}, {"sha": "4dd50d4f376ba5d77971986a01ccd3a0bccaf741", "filename": "libstdc++-v3/config/locale/gnu/c_locale.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/988ad90d003221abfb91157ef289f702b055a8fd/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/988ad90d003221abfb91157ef289f702b055a8fd/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc_locale.cc?ref=988ad90d003221abfb91157ef289f702b055a8fd", "patch": "@@ -172,7 +172,8 @@ namespace std\n     if (!__cloc)\n       {\n \t// This named locale is not supported by the underlying OS.\n-\t__throw_runtime_error(\"attempt to create locale from unknown name\");\n+\t__throw_runtime_error(\"locale::facet::_S_create_c_locale \"\n+\t\t\t      \"name not valid\");\n       }\n   }\n   "}, {"sha": "38b57b5a960a0722ba3aa57ea60fded55a4fd2ac", "filename": "libstdc++-v3/config/locale/ieee_1003.1-2001/codecvt_specializations.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/988ad90d003221abfb91157ef289f702b055a8fd/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fieee_1003.1-2001%2Fcodecvt_specializations.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/988ad90d003221abfb91157ef289f702b055a8fd/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fieee_1003.1-2001%2Fcodecvt_specializations.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fieee_1003.1-2001%2Fcodecvt_specializations.h?ref=988ad90d003221abfb91157ef289f702b055a8fd", "patch": "@@ -130,13 +130,15 @@\n \t{\n \t  _M_in_desc = iconv_open(_M_int_enc, _M_ext_enc);\n \t  if (_M_in_desc == __err)\n-\t    __throw_runtime_error(\"creating iconv input descriptor failed.\");\n+\t    __throw_runtime_error(\"__enc_traits::_M_init \"\n+\t\t\t\t  \"creating iconv input descriptor failed\");\n \t}\n       if (!_M_out_desc)\n \t{\n \t  _M_out_desc = iconv_open(_M_ext_enc, _M_int_enc);\n \t  if (_M_out_desc == __err)\n-\t    __throw_runtime_error(\"creating iconv output descriptor failed.\");\n+\t    __throw_runtime_error(\"__enc_traits::_M_init \"\n+\t\t\t\t  \"creating iconv output descriptor failed\");\n \t}\n     }\n "}, {"sha": "0c1e7357098cd78e9123cf8a321be658b89054c2", "filename": "libstdc++-v3/include/bits/basic_ios.tcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/988ad90d003221abfb91157ef289f702b055a8fd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/988ad90d003221abfb91157ef289f702b055a8fd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.tcc?ref=988ad90d003221abfb91157ef289f702b055a8fd", "patch": "@@ -43,7 +43,7 @@ namespace std\n       else\n \t  _M_streambuf_state = __state | badbit;\n       if ((this->rdstate() & this->exceptions()))\n-\t__throw_ios_failure(\"basic_ios::clear(iostate) caused exception\");\n+\t__throw_ios_failure(\"basic_ios::clear\");\n     }\n   \n   template<typename _CharT, typename _Traits>"}, {"sha": "d649ed030984c7bff0935f3c99137efb6bb63140", "filename": "libstdc++-v3/include/bits/basic_string.tcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/988ad90d003221abfb91157ef289f702b055a8fd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/988ad90d003221abfb91157ef289f702b055a8fd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc?ref=988ad90d003221abfb91157ef289f702b055a8fd", "patch": "@@ -142,7 +142,7 @@ namespace std\n \n \t// NB: Not required, but considered best practice.\n \tif (__builtin_expect(__beg == _InIter(), 0))\n-\t  __throw_logic_error(\"attempt to create string with null pointer\");\n+\t  __throw_logic_error(\"basic_string::_S_construct NULL not valid\");\n \n \tsize_type __dnew = static_cast<size_type>(std::distance(__beg, __end));\n \t"}, {"sha": "586a1cfa34e23c827292154cec81b2596ff0f893", "filename": "libstdc++-v3/include/bits/stl_bvector.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/988ad90d003221abfb91157ef289f702b055a8fd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/988ad90d003221abfb91157ef289f702b055a8fd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h?ref=988ad90d003221abfb91157ef289f702b055a8fd", "patch": "@@ -480,7 +480,7 @@ template <typename _Alloc>\n   \n     void _M_range_check(size_type __n) const {\n       if (__n >= this->size())\n-        __throw_out_of_range(__N(\"vector<bool>\"));\n+        __throw_out_of_range(__N(\"vector<bool>::_M_range_check\"));\n     }\n   \n     reference at(size_type __n)"}, {"sha": "5cef4ded120263cec1d5d83a16416ecb7092e79d", "filename": "libstdc++-v3/include/bits/stl_deque.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/988ad90d003221abfb91157ef289f702b055a8fd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/988ad90d003221abfb91157ef289f702b055a8fd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h?ref=988ad90d003221abfb91157ef289f702b055a8fd", "patch": "@@ -940,7 +940,7 @@ namespace std\n     _M_range_check(size_type __n) const\n     {\n       if (__n >= this->size())\n-        __throw_out_of_range(__N(\"std::deque [] access out of range\"));\n+        __throw_out_of_range(__N(\"deque::_M_range_check\"));\n     }\n   \n   public:"}, {"sha": "c90a476a75893a382dba27c3964970d3669679a9", "filename": "libstdc++-v3/include/bits/stl_vector.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/988ad90d003221abfb91157ef289f702b055a8fd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/988ad90d003221abfb91157ef289f702b055a8fd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h?ref=988ad90d003221abfb91157ef289f702b055a8fd", "patch": "@@ -524,7 +524,7 @@ namespace std\n       _M_range_check(size_type __n) const\n       {\n \tif (__n >= this->size())\n-\t  __throw_out_of_range(__N(\"std::vector [] access out of range\"));\n+\t  __throw_out_of_range(__N(\"vector::_M_range_check\"));\n       }\n       \n     public:"}, {"sha": "a1fba6009003c190bc74c4023db7ef40193e9df5", "filename": "libstdc++-v3/include/ext/ropeimpl.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/988ad90d003221abfb91157ef289f702b055a8fd/libstdc%2B%2B-v3%2Finclude%2Fext%2Fropeimpl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/988ad90d003221abfb91157ef289f702b055a8fd/libstdc%2B%2B-v3%2Finclude%2Fext%2Fropeimpl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fropeimpl.h?ref=988ad90d003221abfb91157ef289f702b055a8fd", "patch": "@@ -1121,7 +1121,7 @@ rope<_CharT,_Alloc>::_S_balance(_RopeRep* __r)\n       }\n \n     if (__result->_M_depth > _RopeRep::_S_max_rope_depth)\n-      __throw_length_error(\"rope too long\");\n+      __throw_length_error(\"rope::_S_balance\");\n     return(__result);\n }\n "}, {"sha": "e2e2cc5625ed01332437003cec1d093be265ba0f", "filename": "libstdc++-v3/include/std/std_bitset.h", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/988ad90d003221abfb91157ef289f702b055a8fd/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_bitset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/988ad90d003221abfb91157ef289f702b055a8fd/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_bitset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_bitset.h?ref=988ad90d003221abfb91157ef289f702b055a8fd", "patch": "@@ -264,7 +264,7 @@ namespace std\n     {\n       for (size_t __i = 1; __i < _Nw; ++__i)\n \tif (_M_w[__i])\n-\t  __throw_overflow_error(__N(\"bitset value is too large to fit in unsigned long\"));\n+\t  __throw_overflow_error(__N(\"_Base_bitset::_M_do_to_ulong\"));\n       return _M_w[0];\n     }\n \n@@ -466,7 +466,10 @@ namespace std\n       // localized to this single should-never-get-this-far function.\n       _WordT&\n       _M_getword(size_t) const\n-      { __throw_out_of_range(__N(\"bitset is zero-length\")); return *new _WordT; }\n+      { \n+\t__throw_out_of_range(__N(\"_Base_bitset::_M_getword\")); \n+\treturn *new _WordT; \n+      }\n \n       _WordT\n       _M_hiword() const { return 0; }\n@@ -706,8 +709,7 @@ namespace std\n \t\t      size_t __pos = 0) : _Base()\n       {\n \tif (__pos > __s.size())\n-\t  __throw_out_of_range(\"bitset -- initial position is larger than \"\n-\t                       \"the string itself\");\n+\t  __throw_out_of_range(\"bitset::bitset initial position not valid\");\n \t_M_copy_from_string(__s, __pos,\n \t\t\t    basic_string<_CharT, _Traits, _Alloc>::npos);\n       }\n@@ -726,8 +728,7 @@ namespace std\n \t     size_t __pos, size_t __n) : _Base()\n       {\n \tif (__pos > __s.size())\n-\t  __throw_out_of_range(\"bitset -- initial position is larger than \"\n-\t                       \"the string itself\");\n+\t  __throw_out_of_range(\"bitset::bitset initial position not valid\");\n \t_M_copy_from_string(__s, __pos, __n);\n       }\n \n@@ -862,7 +863,7 @@ namespace std\n     set(size_t __pos, bool __val = true)\n     {\n       if (__pos >= _Nb)\n-\t__throw_out_of_range(__N(\"bitset::set() argument too large\"));\n+\t__throw_out_of_range(__N(\"bitset::set\"));\n       return _Unchecked_set(__pos, __val);\n     }\n \n@@ -887,7 +888,7 @@ namespace std\n     reset(size_t __pos)\n     {\n       if (__pos >= _Nb)\n-\t__throw_out_of_range(__N(\"bitset::reset() argument too large\"));\n+\t__throw_out_of_range(__N(\"bitset::reset\"));\n       return _Unchecked_reset(__pos);\n     }\n \n@@ -911,7 +912,7 @@ namespace std\n     flip(size_t __pos)\n     {\n       if (__pos >= _Nb)\n-\t__throw_out_of_range(__N(\"bitset::flip() argument too large\"));\n+\t__throw_out_of_range(__N(\"bitset::flip\"));\n       return _Unchecked_flip(__pos);\n     }\n \n@@ -1014,7 +1015,7 @@ namespace std\n     test(size_t __pos) const\n     {\n       if (__pos >= _Nb)\n-\t__throw_out_of_range(__N(\"bitset::test() argument too large\"));\n+\t__throw_out_of_range(__N(\"bitset::test\"));\n       return _Unchecked_test(__pos);\n     }\n \n@@ -1083,8 +1084,7 @@ namespace std\n \t      set(__i);\n \t      break;\n \t    default:\n-\t      __throw_invalid_argument(\"bitset -- string contains characters \"\n-\t                               \"which are neither 0 nor 1\");\n+\t      __throw_invalid_argument(\"bitset::_M_copy_from_string\");\n \t    }\n \t}\n     }"}, {"sha": "0adc4a9d80af3cfa0ab6720aee02b98e173db9f4", "filename": "libstdc++-v3/src/ios.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/988ad90d003221abfb91157ef289f702b055a8fd/libstdc%2B%2B-v3%2Fsrc%2Fios.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/988ad90d003221abfb91157ef289f702b055a8fd/libstdc%2B%2B-v3%2Fsrc%2Fios.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fios.cc?ref=988ad90d003221abfb91157ef289f702b055a8fd", "patch": "@@ -279,7 +279,8 @@ namespace std\n \t      {\n \t\t_M_streambuf_state |= badbit;\n \t\tif (_M_streambuf_state & _M_exception)\n-\t\t  __throw_ios_failure(\"ios_base::_M_grow_words failure\");\n+\t\t  __throw_ios_failure(\"ios_base::_M_grow_words \"\n+\t\t\t\t      \"allocation failed\");\n \t\treturn _M_word_zero;\n \t      }\n \t    for (int i = 0; i < _M_word_size; i++) \n@@ -294,7 +295,7 @@ namespace std\n \t  {\n \t    _M_streambuf_state |= badbit;\n \t    if (_M_streambuf_state & _M_exception)\n-\t      __throw_ios_failure(\"ios_base::_M_grow_words failure\");\n+\t      __throw_ios_failure(\"ios_base::_M_grow_words ix not valid\");\n \t    return _M_word_zero;\n \t  }\n       }"}, {"sha": "89ed9151d775e2d47e5c451cadf56f10365db74b", "filename": "libstdc++-v3/src/locale.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/988ad90d003221abfb91157ef289f702b055a8fd/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/988ad90d003221abfb91157ef289f702b055a8fd/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc?ref=988ad90d003221abfb91157ef289f702b055a8fd", "patch": "@@ -279,7 +279,7 @@ namespace std\n \t  }\n       }\n     else\n-      __throw_runtime_error(\"attempt to create locale from NULL name\");\n+      __throw_runtime_error(\"locale::locale NULL not valid\");\n   }\n \n   locale::locale(const locale& __base, const char* __s, category __cat)\n@@ -434,7 +434,8 @@ namespace std\n \t    __ret = all;\n \t    break;\n \t  default:\n-\t    __throw_runtime_error(\"bad locale category\");\n+\t    __throw_runtime_error(\"locale::_S_normalize_category \"\n+\t\t\t\t  \"category not found\");\n \t  }\n       }\n     return __ret;"}, {"sha": "c09900b628fcece62f26e5c61ebe85b72fd6843f", "filename": "libstdc++-v3/src/localename.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/988ad90d003221abfb91157ef289f702b055a8fd/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/988ad90d003221abfb91157ef289f702b055a8fd/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc?ref=988ad90d003221abfb91157ef289f702b055a8fd", "patch": "@@ -321,7 +321,7 @@ namespace std\n   {\n     size_t __index = __idp->_M_id();\n     if ((__index > (__imp->_M_facets_size - 1)) || !__imp->_M_facets[__index])\n-      __throw_runtime_error(\"no locale facet\");\n+      __throw_runtime_error(\"locale::_Impl::_M_replace_facet\");\n     _M_install_facet(__idp, __imp->_M_facets[__index]); \n   }\n "}, {"sha": "9b8d48e18371e2649f4ce58aadb1a407ef522d83", "filename": "libstdc++-v3/testsuite/testsuite_hooks.cc", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/988ad90d003221abfb91157ef289f702b055a8fd/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_hooks.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/988ad90d003221abfb91157ef289f702b055a8fd/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_hooks.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_hooks.cc?ref=988ad90d003221abfb91157ef289f702b055a8fd", "patch": "@@ -198,11 +198,8 @@ namespace __gnu_cxx_test\n       }\n     catch (std::runtime_error& ex)\n       {\n-\t// Thrown by generic implemenation.\n-\tif (std::strstr(ex.what(), \"unhandled name in generic implementation\"))\n-\t  exit(0);\n-\t// Thrown by gnu implemenation.\n-\telse if (std::strstr(ex.what(), \"unknown name\"))\n+\t// Thrown by generic and gnu implemenation if named locale fails.\n+\tif (std::strstr(ex.what(), \"name not valid\"))\n \t  exit(0);\n \telse\n \t  throw;"}]}