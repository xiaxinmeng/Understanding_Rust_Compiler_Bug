{"sha": "22931aa4a943c3c937f4bf728917236ba27f975e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjI5MzFhYTRhOTQzYzNjOTM3ZjRiZjcyODkxNzIzNmJhMjdmOTc1ZQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2007-04-09T17:07:37Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2007-04-09T17:07:37Z"}, "message": "type_traits_fwd.h (__is_union_or_class): Remove.\n\n2007-04-09  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/tr1/type_traits_fwd.h (__is_union_or_class): Remove.\n\t* include/tr1/type_traits (struct __in_array,\n\tstruct __is_union_or_class, struct __is_union_or_class_helper,\n\tstruct __is_empty_helper, struct __is_polymorphic_helper):\n\tRemove.\n\t(struct is_enum): Use __is_enum.\n\t(struct is_union): Use __is_union.\n\t(struct is_class): Use __is_class.\n\t(struct is_function): Adjust.\n\t(struct is_empty): Use __is_empty.\n\t(struct is_polymorphic): Use __is_polymorphic.\n\t(struct is_abstract): Use __is_abstract.\n\t(struct has_virtual_destructor): Use __has_virtual_destructor.\n\t(struct __is_base_of_helper): Use __is_base_of.\n\t* testsuite/tr1/4_metaprogramming/composite_type_traits/\n\tis_union_or_class/typedefs.cc: Remove.\n\t* testsuite/tr1/4_metaprogramming/composite_type_traits/\n\tis_union_or_class/is_union_or_class.cc: Likewise.\n\t* testsuite/tr1/4_metaprogramming/primary_type_categories/\n\tis_class/typedefs.cc: New.\n\t* testsuite/tr1/4_metaprogramming/primary_type_categories/\n\tis_class/is_class.cc: Likewise.\n\t* testsuite/tr1/4_metaprogramming/primary_type_categories/\n\tis_union/typedefs.cc: Likewise.\n\t* testsuite/tr1/4_metaprogramming/primary_type_categories/\n\tis_union/is_union.cc: Likewise.\n\t* testsuite/tr1/4_metaprogramming/type_properties/\n\thas_virtual_destructor/typedefs.cc: Likewise.\n\t* testsuite/tr1/4_metaprogramming/type_properties/\n\thas_virtual_destructor/has_virtual_destructor.cc: Likewise.\n\t* testsuite/util/testsuite_tr1.h (class VirtualDestructorClass): Add.\n\t* testsuite/tr1/4_metaprogramming/type_properties/is_polymorphic/\n\tis_polymorphic.cc: Add test.\n\nFrom-SVN: r123675", "tree": {"sha": "0c08230ec70b696c8b3ac9ea29297b04a72bf12c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0c08230ec70b696c8b3ac9ea29297b04a72bf12c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/22931aa4a943c3c937f4bf728917236ba27f975e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22931aa4a943c3c937f4bf728917236ba27f975e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22931aa4a943c3c937f4bf728917236ba27f975e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22931aa4a943c3c937f4bf728917236ba27f975e/comments", "author": null, "committer": null, "parents": [{"sha": "6e6e19cbf5f9d55fa4342bc03a8f76fe959b9ccf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e6e19cbf5f9d55fa4342bc03a8f76fe959b9ccf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e6e19cbf5f9d55fa4342bc03a8f76fe959b9ccf"}], "stats": {"total": 531, "additions": 329, "deletions": 202}, "files": [{"sha": "f180ad7c4b4df96911bbe9f71829a29fd476f3d6", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22931aa4a943c3c937f4bf728917236ba27f975e/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22931aa4a943c3c937f4bf728917236ba27f975e/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=22931aa4a943c3c937f4bf728917236ba27f975e", "patch": "@@ -1,3 +1,39 @@\n+2007-04-09  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/tr1/type_traits_fwd.h (__is_union_or_class): Remove.\n+\t* include/tr1/type_traits (struct __in_array,\n+\tstruct __is_union_or_class, struct __is_union_or_class_helper,\n+\tstruct __is_empty_helper, struct __is_polymorphic_helper):\n+\tRemove.\n+\t(struct is_enum): Use __is_enum.\n+\t(struct is_union): Use __is_union.\n+\t(struct is_class): Use __is_class.\n+\t(struct is_function): Adjust.\n+\t(struct is_empty): Use __is_empty.\n+\t(struct is_polymorphic): Use __is_polymorphic.\n+\t(struct is_abstract): Use __is_abstract.\n+\t(struct has_virtual_destructor): Use __has_virtual_destructor.\n+\t(struct __is_base_of_helper): Use __is_base_of.\n+\t* testsuite/tr1/4_metaprogramming/composite_type_traits/\n+\tis_union_or_class/typedefs.cc: Remove.\n+\t* testsuite/tr1/4_metaprogramming/composite_type_traits/\n+\tis_union_or_class/is_union_or_class.cc: Likewise.\n+\t* testsuite/tr1/4_metaprogramming/primary_type_categories/\n+\tis_class/typedefs.cc: New.\n+\t* testsuite/tr1/4_metaprogramming/primary_type_categories/\n+\tis_class/is_class.cc: Likewise.\n+\t* testsuite/tr1/4_metaprogramming/primary_type_categories/\n+\tis_union/typedefs.cc: Likewise.\n+\t* testsuite/tr1/4_metaprogramming/primary_type_categories/\n+\tis_union/is_union.cc: Likewise.\n+\t* testsuite/tr1/4_metaprogramming/type_properties/\n+\thas_virtual_destructor/typedefs.cc: Likewise.\n+\t* testsuite/tr1/4_metaprogramming/type_properties/\n+\thas_virtual_destructor/has_virtual_destructor.cc: Likewise.\n+\t* testsuite/util/testsuite_tr1.h (class VirtualDestructorClass): Add.\n+\t* testsuite/tr1/4_metaprogramming/type_properties/is_polymorphic/\n+\tis_polymorphic.cc: Add test.\n+\n 2007-04-08  Alexey Beshenov  <bav.272304@gmail.com>\n \n \tPR libstdc++/31511"}, {"sha": "c29701c8de0baa9fbc54552d75adb48828fa1ce4", "filename": "libstdc++-v3/include/tr1/type_traits", "status": "modified", "additions": 31, "deletions": 128, "changes": 159, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22931aa4a943c3c937f4bf728917236ba27f975e/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22931aa4a943c3c937f4bf728917236ba27f975e/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits?ref=22931aa4a943c3c937f4bf728917236ba27f975e", "patch": "@@ -1,6 +1,6 @@\n // TR1 type_traits -*- C++ -*-\n \n-// Copyright (C) 2004, 2005, 2006 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2005, 2006, 2007 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -42,27 +42,13 @@ namespace std\n {\n _GLIBCXX_BEGIN_NAMESPACE(_GLIBCXX_TR1)\n \n-  // For use in __in_array and elsewhere.\n+  // For use in __is_convertible_simple.\n   struct __sfinae_types\n   {\n     typedef char __one;\n     typedef struct { char __arr[2]; } __two;\n   };\n \n-  template<typename _Tp>\n-    struct __in_array\n-    : public __sfinae_types\n-    {\n-    private:\n-      template<typename _Up>\n-        static __one __test(_Up(*)[1]);\n-      template<typename>\n-        static __two __test(...);\n-    \n-    public:\n-      static const bool __value = sizeof(__test<_Tp>(0)) == 1;\n-    };\n-\n #define _DEFINE_SPEC_BODY(_Value)                                    \\\n     : public integral_constant<bool, _Value> { };\n \n@@ -172,27 +158,27 @@ _GLIBCXX_BEGIN_NAMESPACE(_GLIBCXX_TR1)\n \n   template<typename _Tp>\n     struct is_enum\n-    : public integral_constant<bool, !(is_fundamental<_Tp>::value\n-\t\t\t\t       || is_array<_Tp>::value\n-\t\t\t\t       || is_pointer<_Tp>::value\n-\t\t\t\t       || is_reference<_Tp>::value\n-\t\t\t\t       || is_member_pointer<_Tp>::value\n-\t\t\t\t       || is_function<_Tp>::value\n-\t\t\t\t       || __is_union_or_class<_Tp>::value)>\n+    : public integral_constant<bool, __is_enum(_Tp)>\n     { };\n \n-  template<typename>\n-    struct is_union { };\n+  template<typename _Tp>\n+    struct is_union\n+    : public integral_constant<bool, __is_union(_Tp)>\n+    { };\n \n-  template<typename>\n-    struct is_class { };\n+  template<typename _Tp>\n+    struct is_class\n+    : public integral_constant<bool, __is_class(_Tp)>\n+    { };\n \n   template<typename _Tp>\n     struct is_function\n-    : public integral_constant<bool, !(__in_array<_Tp>::__value\n-\t\t\t\t       || __is_union_or_class<_Tp>::value\n+    : public integral_constant<bool, !(is_void<_Tp>::value\n+\t\t\t\t       || is_scalar<_Tp>::value\n+\t\t\t\t       || is_array<_Tp>::value\t\t\t\t       \n \t\t\t\t       || is_reference<_Tp>::value\n-\t\t\t\t       || is_void<_Tp>::value)>\n+\t\t\t\t       || is_union<_Tp>::value\n+\t\t\t\t       || is_class<_Tp>::value)>\n     { };\n \n   /// @brief  composite type traits [4.5.2].\n@@ -234,26 +220,6 @@ _GLIBCXX_BEGIN_NAMESPACE(_GLIBCXX_TR1)\n \t\t\t\t|| is_member_function_pointer<_Tp>::value)>\n     { };\n \n-  template<typename _Tp>\n-    struct __is_union_or_class_helper\n-    : public __sfinae_types\n-    {\n-    private:\n-      template<typename _Up>\n-        static __one __test(int _Up::*);\n-      template<typename>\n-        static __two __test(...);\n-    \n-    public:\n-      static const bool __value = sizeof(__test<_Tp>(0)) == 1;\n-    };\n-\n-  // Extension.\n-  template<typename _Tp>\n-    struct __is_union_or_class\n-    : public integral_constant<bool, __is_union_or_class_helper<_Tp>::__value>\n-    { };\n-  \n   /// @brief  type properties [4.5.3].\n   template<typename>\n     struct is_const\n@@ -278,64 +244,20 @@ _GLIBCXX_BEGIN_NAMESPACE(_GLIBCXX_TR1)\n \t\t\t\t      remove_all_extents<_Tp>::type>::value)>\n     { };\n \n-  // NB: Without compiler support we cannot tell union from class types,\n-  // and is_empty and is_polymorphic don't work at all with the former. \n-  template<typename _Tp, bool = !__is_union_or_class<_Tp>::value>\n-    struct __is_empty_helper\n-    { \n-    private:\n-      template<typename>\n-        struct __first { };\n-      template<typename _Up>\n-        struct __second\n-        : public _Up { };\n-           \n-    public:\n-      static const bool __value = sizeof(__first<_Tp>) == sizeof(__second<_Tp>);\n-    };\n-\n-  template<typename _Tp>\n-    struct __is_empty_helper<_Tp, true>\n-    { static const bool __value = false; };\n-\n   template<typename _Tp>\n     struct is_empty\n-    : public integral_constant<bool, __is_empty_helper<_Tp>::__value>\n+    : public integral_constant<bool, __is_empty(_Tp)>\n     { };\n \n-  template<typename _Tp, bool = !__is_union_or_class<_Tp>::value>\n-    struct __is_polymorphic_helper\n-    { \n-    private:\n-      template<typename _Up>\n-        struct __first\n-        : public _Up { };\n-      template<typename _Up>\n-        struct __second\n-        : public _Up\n-\t{ \n-\t  virtual void __dummy();\n-\t  virtual ~__second() throw();\n-\t};\n-\n-    public:\n-      static const bool __value = sizeof(__first<_Tp>) == sizeof(__second<_Tp>);\n-    };\n-\n-  template<typename _Tp>\n-    struct __is_polymorphic_helper<_Tp, true>\n-    { static const bool __value = false; };\n-\n   template<typename _Tp>\n     struct is_polymorphic\n-    : public integral_constant<bool, __is_polymorphic_helper<_Tp>::__value>\n+    : public integral_constant<bool, __is_polymorphic(_Tp)>\n     { };\n \n-  // Exploit the resolution DR core/337.\n   template<typename _Tp>\n     struct is_abstract\n-    : public integral_constant<bool, (!__in_array<_Tp>::__value\n-\t\t\t\t      && __is_union_or_class<_Tp>::value)> { };\n+    : public integral_constant<bool, __is_abstract(_Tp)>\n+    { };\n \n   template<typename _Tp>\n     struct has_trivial_constructor\n@@ -365,9 +287,10 @@ _GLIBCXX_BEGIN_NAMESPACE(_GLIBCXX_TR1)\n     struct has_nothrow_assign\n     : public integral_constant<bool, is_pod<_Tp>::value> { };\n \n-  template<typename>\n+  template<typename _Tp>\n     struct has_virtual_destructor\n-    : public false_type { };\n+    : public integral_constant<bool, __has_virtual_destructor(_Tp)>\n+    { };\n \n   template<typename>\n     struct is_signed\n@@ -430,37 +353,17 @@ _GLIBCXX_BEGIN_NAMESPACE(_GLIBCXX_TR1)\n     struct is_same<_Tp, _Tp>\n     : public true_type { };\n \n-  // See Daveed Vandevoorde explanation in http://tinyurl.com/502f.\n-  // Also see Rani Sharoni in http://tinyurl.com/6jvyq.\n-  template<typename _Base, typename _Derived,\n-\t   bool = (!__is_union_or_class<_Base>::value\n-\t\t   || !__is_union_or_class<_Derived>::value\n-\t\t   || is_same<_Base, _Derived>::value)>\n+  template<typename _Base, typename _Derived>\n     struct __is_base_of_helper\n-    : public __sfinae_types\n     {\n-    private:\n-      typedef typename remove_cv<_Base>::type     _NoCv_Base;      \n-      typedef typename remove_cv<_Derived>::type  _NoCv_Derived;\n-      \n-      template<typename _Up>\n-        static __one __test(_NoCv_Derived&, _Up);\n-      static __two __test(_NoCv_Base&, int);\n-   \n-      struct _Conv\n-      {\n-\toperator _NoCv_Derived&();\n-\toperator _NoCv_Base&() const;\n-      };\n-   \n-    public:\n-      static const bool __value = sizeof(__test(_Conv(), 0)) == 1;\n+      typedef typename remove_cv<_Base>::type    _NoCv_Base;\n+      typedef typename remove_cv<_Derived>::type _NoCv_Derived;\n+      static const bool __value = (is_same<_Base, _Derived>::value\n+\t\t\t\t   || (__is_base_of(_Base, _Derived)\n+\t\t\t\t       && !is_same<_NoCv_Base,\n+\t\t\t\t                   _NoCv_Derived>::value));\n     };\n-\n-  template<typename _Base, typename _Derived>\n-    struct __is_base_of_helper<_Base, _Derived, true>\n-    { static const bool __value = is_same<_Base, _Derived>::value; };\n-\n+ \n   template<typename _Base, typename _Derived>\n     struct is_base_of\n     : public integral_constant<bool,"}, {"sha": "c6e80a3a4b982ae8a8aaa4e1fbf4aaeec6389c87", "filename": "libstdc++-v3/include/tr1/type_traits_fwd.h", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22931aa4a943c3c937f4bf728917236ba27f975e/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits_fwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22931aa4a943c3c937f4bf728917236ba27f975e/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits_fwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits_fwd.h?ref=22931aa4a943c3c937f4bf728917236ba27f975e", "patch": "@@ -1,6 +1,6 @@\n // TR1 type_traits -*- C++ -*-\n \n-// Copyright (C) 2004, 2005, 2006 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2005, 2006, 2007 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -104,10 +104,6 @@ _GLIBCXX_BEGIN_NAMESPACE(_GLIBCXX_TR1)\n   template<typename _Tp>\n     struct is_member_pointer;\n \n-  // Extension.\n-  template<typename _Tp>\n-    struct __is_union_or_class;\n-   \n   /// @brief  type properties [4.5.3].\n   template<typename _Tp>\n     struct is_const;"}, {"sha": "82c727d1ce85474c7e48c2fcf07cd2d0529b8976", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/composite_type_traits/is_union_or_class/is_union_or_class.cc", "status": "removed", "additions": 0, "deletions": 62, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e6e19cbf5f9d55fa4342bc03a8f76fe959b9ccf/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fcomposite_type_traits%2Fis_union_or_class%2Fis_union_or_class.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e6e19cbf5f9d55fa4342bc03a8f76fe959b9ccf/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fcomposite_type_traits%2Fis_union_or_class%2Fis_union_or_class.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fcomposite_type_traits%2Fis_union_or_class%2Fis_union_or_class.cc?ref=6e6e19cbf5f9d55fa4342bc03a8f76fe959b9ccf", "patch": "@@ -1,62 +0,0 @@\n-// 2005-02-25  Paolo Carlini  <pcarlini@suse.de>\n-//\n-// Copyright (C) 2005 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-//\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-//\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n-// USA.\n-\n-// 4.5.2 Composite type traits\n-\n-#include <tr1/type_traits>\n-#include <testsuite_hooks.h>\n-#include <testsuite_tr1.h>\n-\n-void test01()\n-{\n-  bool test __attribute__((unused)) = true;\n-  using std::tr1::__is_union_or_class;\n-  using namespace __gnu_test;\n-\n-  // Positive tests.\n-  VERIFY( (test_category<__is_union_or_class, UnionType>(true)) );\n-  VERIFY( (test_category<__is_union_or_class, ClassType>(true)) );\n-  VERIFY( (test_category<__is_union_or_class, DerivedType>(true)) );\n-  VERIFY( (test_category<__is_union_or_class, ConvType>(true)) );\n-  VERIFY( (test_category<__is_union_or_class, AbstractClass>(true)) );\n-  VERIFY( (test_category<__is_union_or_class, PolymorphicClass>(true)) );\n-  VERIFY( (test_category<__is_union_or_class, DerivedPolymorphic>(true)) );\n-\n-  // Negative tests.\n-  VERIFY( (test_category<__is_union_or_class, void>(false)) );\n-  VERIFY( (test_category<__is_union_or_class, int>(false)) );\n-  VERIFY( (test_category<__is_union_or_class, float>(false)) );\n-  VERIFY( (test_category<__is_union_or_class, int[2]>(false)) );\n-  VERIFY( (test_category<__is_union_or_class, int*>(false)) );\n-  VERIFY( (test_category<__is_union_or_class, int(*)(int)>(false)) );\n-  VERIFY( (test_category<__is_union_or_class, float&>(false)) );\n-  VERIFY( (test_category<__is_union_or_class, float(&)(float)>(false)) );\n-  VERIFY( (test_category<__is_union_or_class, int (ClassType::*)>(false)) );\n-  VERIFY( (test_category<__is_union_or_class,\n-\t   int (ClassType::*) (int)>(false)) );\n-  VERIFY( (test_category<__is_union_or_class, int (int)>(false)) );\n-  VERIFY( (test_category<__is_union_or_class, EnumType>(false)) );\n-}\n-\n-int main()\n-{\n-  test01();\n-  return 0;\n-}"}, {"sha": "5e88fb5b6d54a3c5de95942369fbe65014dcf706", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/primary_type_categories/is_class/is_class.cc", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22931aa4a943c3c937f4bf728917236ba27f975e/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_class%2Fis_class.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22931aa4a943c3c937f4bf728917236ba27f975e/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_class%2Fis_class.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_class%2Fis_class.cc?ref=22931aa4a943c3c937f4bf728917236ba27f975e", "patch": "@@ -0,0 +1,61 @@\n+// 2007-04-08  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 4.5.1 Primary type categories\n+\n+#include <tr1/type_traits>\n+#include <testsuite_hooks.h>\n+#include <testsuite_tr1.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using std::tr1::is_class;\n+  using namespace __gnu_test;\n+\n+  // Positive tests.\n+  VERIFY( (test_category<is_class, ClassType>(true)) );\n+  VERIFY( (test_category<is_class, DerivedType>(true)) );\n+  VERIFY( (test_category<is_class, ConvType>(true)) );\n+  VERIFY( (test_category<is_class, AbstractClass>(true)) );\n+  VERIFY( (test_category<is_class, PolymorphicClass>(true)) );\n+  VERIFY( (test_category<is_class, DerivedPolymorphic>(true)) );\n+\n+  // Negative tests.\n+  VERIFY( (test_category<is_class, UnionType>(false)) );\n+  VERIFY( (test_category<is_class, void>(false)) );\n+  VERIFY( (test_category<is_class, int>(false)) );\n+  VERIFY( (test_category<is_class, float>(false)) );\n+  VERIFY( (test_category<is_class, int[2]>(false)) );\n+  VERIFY( (test_category<is_class, int*>(false)) );\n+  VERIFY( (test_category<is_class, int(*)(int)>(false)) );\n+  VERIFY( (test_category<is_class, float&>(false)) );\n+  VERIFY( (test_category<is_class, float(&)(float)>(false)) );\n+  VERIFY( (test_category<is_class, int (ClassType::*)>(false)) );\n+  VERIFY( (test_category<is_class, int (ClassType::*) (int)>(false)) );\n+  VERIFY( (test_category<is_class, int (int)>(false)) );\n+  VERIFY( (test_category<is_class, EnumType>(false)) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "8ad546ac3b63cf75925bc4efb85c4ffae59933f8", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/primary_type_categories/is_class/typedefs.cc", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22931aa4a943c3c937f4bf728917236ba27f975e/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_class%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22931aa4a943c3c937f4bf728917236ba27f975e/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_class%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_class%2Ftypedefs.cc?ref=22931aa4a943c3c937f4bf728917236ba27f975e", "patch": "@@ -1,6 +1,6 @@\n-// 2005-02-25  Paolo Carlini  <pcarlini@suse.de>\n+// 2007-04-08  Paolo Carlini  <pcarlini@suse.de>\n //\n-// Copyright (C) 2005 Free Software Foundation, Inc.\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -28,7 +28,7 @@\n void test01()\n {\n   // Check for required typedefs\n-  typedef std::tr1::__is_union_or_class<int>  test_type;\n+  typedef std::tr1::is_class<int>             test_type;\n   typedef test_type::value_type               value_type;\n   typedef test_type::type                     type;\n   typedef test_type::type::value_type         type_value_type;", "previous_filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/composite_type_traits/is_union_or_class/typedefs.cc"}, {"sha": "e381f888b27cea1090f9d971cc88e5c1d3d072f5", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/primary_type_categories/is_union/is_union.cc", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22931aa4a943c3c937f4bf728917236ba27f975e/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_union%2Fis_union.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22931aa4a943c3c937f4bf728917236ba27f975e/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_union%2Fis_union.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_union%2Fis_union.cc?ref=22931aa4a943c3c937f4bf728917236ba27f975e", "patch": "@@ -0,0 +1,61 @@\n+// 2007-04-08  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 4.5.1 Primary type categories\n+\n+#include <tr1/type_traits>\n+#include <testsuite_hooks.h>\n+#include <testsuite_tr1.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using std::tr1::is_union;\n+  using namespace __gnu_test;\n+\n+  // Positive tests.\n+  VERIFY( (test_category<is_union, UnionType>(true)) );\n+\n+  // Negative tests.\n+  VERIFY( (test_category<is_union, ClassType>(false)) );\n+  VERIFY( (test_category<is_union, DerivedType>(false)) );\n+  VERIFY( (test_category<is_union, ConvType>(false)) );\n+  VERIFY( (test_category<is_union, AbstractClass>(false)) );\n+  VERIFY( (test_category<is_union, PolymorphicClass>(false)) );\n+  VERIFY( (test_category<is_union, DerivedPolymorphic>(false)) );\n+  VERIFY( (test_category<is_union, void>(false)) );\n+  VERIFY( (test_category<is_union, int>(false)) );\n+  VERIFY( (test_category<is_union, float>(false)) );\n+  VERIFY( (test_category<is_union, int[2]>(false)) );\n+  VERIFY( (test_category<is_union, int*>(false)) );\n+  VERIFY( (test_category<is_union, int(*)(int)>(false)) );\n+  VERIFY( (test_category<is_union, float&>(false)) );\n+  VERIFY( (test_category<is_union, float(&)(float)>(false)) );\n+  VERIFY( (test_category<is_union, int (ClassType::*)>(false)) );\n+  VERIFY( (test_category<is_union, int (ClassType::*) (int)>(false)) );\n+  VERIFY( (test_category<is_union, int (int)>(false)) );\n+  VERIFY( (test_category<is_union, EnumType>(false)) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "9f24c5e9786bc0ef1fa1f50ac7eba6b5d58bbdd7", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/primary_type_categories/is_union/typedefs.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22931aa4a943c3c937f4bf728917236ba27f975e/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_union%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22931aa4a943c3c937f4bf728917236ba27f975e/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_union%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_union%2Ftypedefs.cc?ref=22931aa4a943c3c937f4bf728917236ba27f975e", "patch": "@@ -0,0 +1,36 @@\n+// 2007-04-08  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// \n+// NB: This file is for testing tr1/type_traits with NO OTHER INCLUDES.\n+\n+#include <tr1/type_traits>\n+\n+// { dg-do compile }\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::tr1::is_union<int>             test_type;\n+  typedef test_type::value_type               value_type;\n+  typedef test_type::type                     type;\n+  typedef test_type::type::value_type         type_value_type;\n+  typedef test_type::type::type               type_type;\n+}"}, {"sha": "910aeded2d5651f59a6611d82f0d3c780292cf5a", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/type_properties/has_virtual_destructor/has_virtual_destructor.cc", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22931aa4a943c3c937f4bf728917236ba27f975e/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fhas_virtual_destructor%2Fhas_virtual_destructor.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22931aa4a943c3c937f4bf728917236ba27f975e/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fhas_virtual_destructor%2Fhas_virtual_destructor.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fhas_virtual_destructor%2Fhas_virtual_destructor.cc?ref=22931aa4a943c3c937f4bf728917236ba27f975e", "patch": "@@ -0,0 +1,56 @@\n+// 2007-04-08  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 4.5.3 Type properties\n+\n+#include <tr1/type_traits>\n+#include <iostream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_tr1.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using std::tr1::has_virtual_destructor;\n+  using namespace __gnu_test;\n+\n+  // Positive tests.\n+  VERIFY( (test_category<has_virtual_destructor,\n+\t   VirtualDestructorClass>(true)) );\n+  VERIFY( (test_category<has_virtual_destructor, std::iostream>(true)) );\n+  VERIFY( (test_category<has_virtual_destructor, std::streambuf>(true)) );\n+\n+  // Negative tests.\n+  VERIFY( (test_category<has_virtual_destructor, PolymorphicClass>(false)) );\n+  VERIFY( (test_category<has_virtual_destructor, DerivedPolymorphic>(false)) );\n+  VERIFY( (test_category<has_virtual_destructor, AbstractClass>(false)) );\n+  VERIFY( (test_category<has_virtual_destructor, void>(false)) );\n+  VERIFY( (test_category<has_virtual_destructor, int (int)>(false)) );\n+  VERIFY( (test_category<has_virtual_destructor, int&>(false)) );\n+  VERIFY( (test_category<has_virtual_destructor, EnumType>(false)) );\n+  VERIFY( (test_category<has_virtual_destructor, ClassType>(false)) );\n+  VERIFY( (test_category<has_virtual_destructor, DerivedType>(false)) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "94d81eafb216b5db97d52edad2c9e4603db37455", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/type_properties/has_virtual_destructor/typedefs.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22931aa4a943c3c937f4bf728917236ba27f975e/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fhas_virtual_destructor%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22931aa4a943c3c937f4bf728917236ba27f975e/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fhas_virtual_destructor%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fhas_virtual_destructor%2Ftypedefs.cc?ref=22931aa4a943c3c937f4bf728917236ba27f975e", "patch": "@@ -0,0 +1,36 @@\n+// 2007-04-08  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// \n+// NB: This file is for testing tr1/type_traits with NO OTHER INCLUDES.\n+\n+#include <tr1/type_traits>\n+\n+// { dg-do compile }\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::tr1::has_virtual_destructor<int>     test_type;\n+  typedef test_type::value_type               value_type;\n+  typedef test_type::type                     type;\n+  typedef test_type::type::value_type         type_value_type;\n+  typedef test_type::type::type               type_type;\n+}"}, {"sha": "6dc5c1c2c6d098fd8927882aa1df150a3693543d", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/type_properties/is_polymorphic/is_polymorphic.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22931aa4a943c3c937f4bf728917236ba27f975e/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fis_polymorphic%2Fis_polymorphic.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22931aa4a943c3c937f4bf728917236ba27f975e/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fis_polymorphic%2Fis_polymorphic.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fis_polymorphic%2Fis_polymorphic.cc?ref=22931aa4a943c3c937f4bf728917236ba27f975e", "patch": "@@ -1,6 +1,6 @@\n // 2005-03-03  Paolo Carlini  <pcarlini@suse.de>\n //\n-// Copyright (C) 2005 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2007 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -35,6 +35,7 @@ void test01()\n   VERIFY( (test_category<is_polymorphic, PolymorphicClass>(true)) );\n   VERIFY( (test_category<is_polymorphic, DerivedPolymorphic>(true)) );\n   VERIFY( (test_category<is_polymorphic, AbstractClass>(true)) );\n+  VERIFY( (test_category<is_polymorphic, VirtualDestructorClass>(true)) );\n   VERIFY( (test_category<is_polymorphic, std::iostream>(true)) );\n   VERIFY( (test_category<is_polymorphic, std::streambuf>(true)) );\n "}, {"sha": "8b630bb23e9056b071f531a0c9b82a5bb0460e54", "filename": "libstdc++-v3/testsuite/util/testsuite_tr1.h", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22931aa4a943c3c937f4bf728917236ba27f975e/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_tr1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22931aa4a943c3c937f4bf728917236ba27f975e/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_tr1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_tr1.h?ref=22931aa4a943c3c937f4bf728917236ba27f975e", "patch": "@@ -1,7 +1,7 @@\n // -*- C++ -*-\n // Testing utilities for the tr1 testsuite.\n //\n-// Copyright (C) 2004, 2005, 2006 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2005, 2006, 2007 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -103,17 +103,20 @@ namespace __gnu_test\n   class AbstractClass\n   {\n     virtual void rotate(int) = 0;\n-    virtual ~AbstractClass();\n   };\n \n   class PolymorphicClass\n   {\n     virtual void rotate(int);\n-    virtual ~PolymorphicClass();\n   };\n \n   class DerivedPolymorphic : public PolymorphicClass { };\n \n+  class VirtualDestructorClass\n+  {\n+    virtual ~VirtualDestructorClass();\n+  };\n+\n   union UnionType { };\n \n   class IncompleteClass;"}]}