{"sha": "2925cd9d1c9d9e03a55f9f67ab81ead94f9e4f6c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjkyNWNkOWQxYzlkOWUwM2E1NWY5ZjY3YWI4MWVhZDk0ZjllNGY2Yw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2018-04-30T07:23:36Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2018-04-30T07:23:36Z"}, "message": "re PR tree-optimization/28364 (poor optimization choices when iterating over a std::string (probably not c++-specific))\n\n2018-04-30  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/28364\n\tPR tree-optimization/85275\n\t* tree-ssa-loop-ch.c (ch_base::copy_headers): Stop after\n\tcopying first exit test.\n\n\t* gcc.dg/tree-ssa/copy-headers-5.c: New testcase.\n\t* gcc.dg/tree-ssa/predcom-8.c: Likewise.\n\t* gcc.dg/tree-ssa/cunroll-13.c: Rewrite to gimple testcase.\n\t* gcc.dg/tree-ssa/ivopt_mult_1.c: XFAIL.\n\t* gcc.dg/tree-ssa/ivopt_mult_1g.c: Add gimple variant that\n\tstill passes.\n\t* gcc.dg/tree-ssa/ivopt_mult_2.c: XFAIL.\n\t* gcc.dg/tree-ssa/ivopt_mult_2g.c: Add gimple variant that\n\tstill passes.\n\t* gcc.dg/tree-ssa/ssa-dom-thread-7.c: Adjust.\n\t* gcc.dg/tree-ssa/20030710-1.c: Likewise.\n\t* gcc.dg/tree-ssa/20030711-1.c: Likewise.\n\nFrom-SVN: r259754", "tree": {"sha": "4f196e848680c5da214d63071868dd5be3bdf690", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4f196e848680c5da214d63071868dd5be3bdf690"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2925cd9d1c9d9e03a55f9f67ab81ead94f9e4f6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2925cd9d1c9d9e03a55f9f67ab81ead94f9e4f6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2925cd9d1c9d9e03a55f9f67ab81ead94f9e4f6c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2925cd9d1c9d9e03a55f9f67ab81ead94f9e4f6c/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "03b42a71d9d88029dea5928c3053881b092d6549", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03b42a71d9d88029dea5928c3053881b092d6549", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03b42a71d9d88029dea5928c3053881b092d6549"}], "stats": {"total": 296, "additions": 276, "deletions": 20}, "files": [{"sha": "1470c89f62b45fa0144cac1cd992db0e51b9227d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2925cd9d1c9d9e03a55f9f67ab81ead94f9e4f6c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2925cd9d1c9d9e03a55f9f67ab81ead94f9e4f6c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2925cd9d1c9d9e03a55f9f67ab81ead94f9e4f6c", "patch": "@@ -1,3 +1,10 @@\n+2018-04-30  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/28364\n+\tPR tree-optimization/85275\n+\t* tree-ssa-loop-ch.c (ch_base::copy_headers): Stop after\n+\tcopying first exit test.\n+\n 2018-04-28  Mark Wielaard  <mark@klomp.org>\n \n \t* dwarf2out.c (dwarf2out_finish): Add .debug_addr table header for"}, {"sha": "c41d69b4a2123be4972dd93bbd7063826dd3bb8d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2925cd9d1c9d9e03a55f9f67ab81ead94f9e4f6c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2925cd9d1c9d9e03a55f9f67ab81ead94f9e4f6c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2925cd9d1c9d9e03a55f9f67ab81ead94f9e4f6c", "patch": "@@ -1,3 +1,20 @@\n+2018-04-30  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/28364\n+\tPR tree-optimization/85275\n+\t* gcc.dg/tree-ssa/copy-headers-5.c: New testcase.\n+\t* gcc.dg/tree-ssa/predcom-8.c: Likewise.\n+\t* gcc.dg/tree-ssa/cunroll-13.c: Rewrite to gimple testcase.\n+\t* gcc.dg/tree-ssa/ivopt_mult_1.c: XFAIL.\n+\t* gcc.dg/tree-ssa/ivopt_mult_1g.c: Add gimple variant that\n+\tstill passes.\n+\t* gcc.dg/tree-ssa/ivopt_mult_2.c: XFAIL.\n+\t* gcc.dg/tree-ssa/ivopt_mult_2g.c: Add gimple variant that\n+\tstill passes.\n+\t* gcc.dg/tree-ssa/ssa-dom-thread-7.c: Adjust.\n+\t* gcc.dg/tree-ssa/20030710-1.c: Likewise.\n+\t* gcc.dg/tree-ssa/20030711-1.c: Likewise.\n+\n 2018-04-28  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/84431"}, {"sha": "3dd3ba8bc17aad01eeacd6c9a21d9bf07ebce6fb", "filename": "gcc/testsuite/gcc.dg/tree-ssa/20030710-1.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2925cd9d1c9d9e03a55f9f67ab81ead94f9e4f6c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030710-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2925cd9d1c9d9e03a55f9f67ab81ead94f9e4f6c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030710-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030710-1.c?ref=2925cd9d1c9d9e03a55f9f67ab81ead94f9e4f6c", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O1 -fdump-tree-dom2\" } */\n+/* { dg-options \"-O1 -fdump-tree-phicprop1\" } */\n \n extern void abort (void);\n extern void blah (void);\n@@ -42,14 +42,14 @@ record_component_aliases (type)\n /* The call to blah should have been eliminated.  If the call is not\n    eliminated, then dominator optimizations failed and it'll be\n    impossible to delete other unnecessary code.  */\n-/* { dg-final { scan-tree-dump-not \"blah \\\\(\\\\)\" \"dom2\" } } */\n+/* { dg-final { scan-tree-dump-not \"blah \\\\(\\\\)\" \"phicprop1\" } } */\n   \n /* There should be two IF conditionals.  */\n-/* { dg-final { scan-tree-dump-times \"if \" 2 \"dom2\"} } */\n+/* { dg-final { scan-tree-dump-times \"if \" 2 \"phicprop1\"} } */\n                                                                                 \n /* There should be a single load of type.binfo.  */\n-/* { dg-final { scan-tree-dump-times \"type\\\\.binfo\" 1 \"dom2\"} } */\n+/* { dg-final { scan-tree-dump-times \"type\\\\.binfo\" 1 \"phicprop1\"} } */\n \n /* There should be two loads of vec.length.  */\n-/* { dg-final { scan-tree-dump-times \"vec.length\" 2 \"dom2\"} } */\n+/* { dg-final { scan-tree-dump-times \"vec.length\" 2 \"phicprop1\"} } */\n "}, {"sha": "080ccfa838281371aca44f32eb68e6015ddc07db", "filename": "gcc/testsuite/gcc.dg/tree-ssa/20030711-1.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2925cd9d1c9d9e03a55f9f67ab81ead94f9e4f6c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030711-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2925cd9d1c9d9e03a55f9f67ab81ead94f9e4f6c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030711-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030711-1.c?ref=2925cd9d1c9d9e03a55f9f67ab81ead94f9e4f6c", "patch": "@@ -44,12 +44,12 @@ record_component_aliases (type)\n /* The call to blah can not be eliminated.  */\n /* { dg-final { scan-tree-dump-times \"blah \\\\(\\\\)\" 1 \"dom2\" } } */\n    \n-/* There should be four IF conditionals.  */\n-/* { dg-final { scan-tree-dump-times \"if \" 4 \"dom2\"} } */\n+/* There should be three IF conditionals.  */\n+/* { dg-final { scan-tree-dump-times \"if \" 3 \"dom2\"} } */\n                                                                                 \n /* There should be two loads of type.binfo.  */\n /* { dg-final { scan-tree-dump-times \"type\\\\.binfo\" 2 \"dom2\"} } */\n  \n-/* There should be four loads of vec.length.  */\n-/* { dg-final { scan-tree-dump-times \"vec.length\" 4 \"dom2\"} } */\n+/* There should be three loads of vec.length.  */\n+/* { dg-final { scan-tree-dump-times \"vec.length\" 3 \"dom2\"} } */\n "}, {"sha": "3d9940558cbe94b020c9af70c8986647883074d0", "filename": "gcc/testsuite/gcc.dg/tree-ssa/copy-headers-5.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2925cd9d1c9d9e03a55f9f67ab81ead94f9e4f6c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fcopy-headers-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2925cd9d1c9d9e03a55f9f67ab81ead94f9e4f6c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fcopy-headers-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fcopy-headers-5.c?ref=2925cd9d1c9d9e03a55f9f67ab81ead94f9e4f6c", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-ch2-details\" } */\n+\n+int is_sorted(int *a, int n)\n+{\n+  for (int i = 0; i < n - 1; i++)\n+    if (a[i] > a[i + 1])\n+      return 0;\n+  return 1;\n+}\n+\n+/* Verify we apply loop header copying but only copy the IV test and\n+   not the alternate exit test.  */\n+\n+/* { dg-final { scan-tree-dump \"is now do-while loop\" \"ch2\" } } */\n+/* { dg-final { scan-tree-dump-times \"  if \" 3 \"ch2\" } } */"}, {"sha": "baac6b493ea8ee22a4d7898cf0e62a51a05798d2", "filename": "gcc/testsuite/gcc.dg/tree-ssa/cunroll-13.c", "status": "modified", "additions": 46, "deletions": 8, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2925cd9d1c9d9e03a55f9f67ab81ead94f9e4f6c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fcunroll-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2925cd9d1c9d9e03a55f9f67ab81ead94f9e4f6c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fcunroll-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fcunroll-13.c?ref=2925cd9d1c9d9e03a55f9f67ab81ead94f9e4f6c", "patch": "@@ -1,21 +1,59 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O3 -fdisable-tree-evrp -fdisable-tree-cunrolli -fdisable-tree-vrp1 -fdump-tree-cunroll-blocks-details\" } */\n+/* { dg-options \"-O3 -fgimple -fdump-tree-cunroll-blocks-details\" } */\n \n #if __SIZEOF_INT__ < 4\n __extension__ typedef __INT32_TYPE__ i32;\n #else\n typedef int i32;\n #endif\n \n-struct a {int a[8];int b;};\n-void\n-t(struct a *a)\n+struct a {i32 a[8];i32 b;};\n+\n+void __GIMPLE (startwith(\"fix_loops\"))\n+t (struct a * a)\n {\n-  for (i32 i=0;i<123456 && a->a[i];i++)\n-    a->a[i]++;\n+  i32 i;\n+  i32 _1;\n+  i32 _2;\n+  i32 _9;\n+  i32 _11;\n+\n+bb_2:\n+  _11 = a_6(D)->a[0];\n+  if (_11 != _Literal (i32) 0)\n+    goto bb_6;\n+  else\n+    goto bb_3;\n+\n+bb_3:\n+  return;\n+\n+bb_4:\n+  _1 = _2 + 1;\n+  a_6(D)->a[i_19] = _1;\n+  i_8 = i_19 + _Literal (i32) 1;\n+  if (i_8 <= _Literal (i32) 123455)\n+    goto bb_5;\n+  else\n+    goto bb_3;\n+\n+bb_5:\n+  i_19 = __PHI (bb_6: _Literal (i32) 1, bb_4: i_8);\n+  _2 = a_6(D)->a[i_19];\n+  if (_2 != _Literal (i32) 0)\n+    goto bb_4;\n+  else\n+    goto bb_3;\n+\n+bb_6:\n+  _9 = _11 + _Literal (i32) 1;\n+  a_6(D)->a[0] = _9;\n+  goto bb_5;\n }\n-/* This pass relies on the fact that we do not eliminate the redundant test for i early.\n-   It is necessary to disable all passes that do so.  At the moment it is evrp, vrp1 and cunrolli.  */\n+\n+/* This testcase relies on the fact that we do not eliminate the redundant test\n+   for i early.  It is necessary to disable all passes that do so, for the\n+   moment starting with the loop pipeline is good enough.  */\n /* { dg-final { scan-tree-dump-times \"Loop 1 iterates 123454 times\" 1 \"cunroll\" } } */\n /* { dg-final { scan-tree-dump-times \"Last iteration exit edge was proved true\" 1 \"cunroll\" } } */\n /* { dg-final { scan-tree-dump-times \"Exit condition of peeled iterations was eliminated\" 1 \"cunroll\" } } */"}, {"sha": "eaf2c7e62298fac6e3b59693eda09104e1c7ce0e", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ivopt_mult_1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2925cd9d1c9d9e03a55f9f67ab81ead94f9e4f6c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fivopt_mult_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2925cd9d1c9d9e03a55f9f67ab81ead94f9e4f6c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fivopt_mult_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fivopt_mult_1.c?ref=2925cd9d1c9d9e03a55f9f67ab81ead94f9e4f6c", "patch": "@@ -20,4 +20,4 @@ long foo(long* p, long* p2, int N1, int N2)\n   return s;\n }\n \n-/* { dg-final { scan-tree-dump-times \"Replacing\" 1 \"ivopts\"} } */\n+/* { dg-final { scan-tree-dump-times \"Replacing\" 1 \"ivopts\" { xfail *-*-* } } } */"}, {"sha": "ac1346c7663017844fa88481aea2f0607e6f156b", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ivopt_mult_1g.c", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2925cd9d1c9d9e03a55f9f67ab81ead94f9e4f6c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fivopt_mult_1g.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2925cd9d1c9d9e03a55f9f67ab81ead94f9e4f6c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fivopt_mult_1g.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fivopt_mult_1g.c?ref=2925cd9d1c9d9e03a55f9f67ab81ead94f9e4f6c", "patch": "@@ -0,0 +1,82 @@\n+/* { dg-do compile { target {{ i?86-*-* x86_64-*-* } && lp64 } } } */\n+/* { dg-options \"-O2 -fgimple -m64 -fdump-tree-ivopts-details\" } */\n+\n+/* The test 'if (p2 > p_limit2)' can be replaced, so iv p2 can be\n+ * eliminated.  */\n+long int __GIMPLE (startwith(\"fix_loops\"))\n+foo (long int * p, long int * p2, int N1, int N2)\n+{\n+  long int s;\n+  long int * p_limit2;\n+  long int * p_limit;\n+  long unsigned int _1;\n+  long unsigned int _2;\n+  long unsigned int _3;\n+  long unsigned int _4;\n+  long int _5;\n+\n+  bb_2:\n+  _1 = (long unsigned int) N1_10(D);\n+  _2 = _1 * 8ul;\n+  p_limit_12 = p_11(D) + _2;\n+  _3 = (long unsigned int) N2_13(D);\n+  _4 = _3 * 8ul;\n+  p_limit2_15 = p2_14(D) + _4;\n+  if (p_11(D) <= p_limit_12)\n+    goto bb_3;\n+  else\n+    goto bb_13;\n+\n+  bb_13:\n+\n+  bb_9:\n+  goto bb_6;\n+\n+  bb_3:\n+  p_20 = p_11(D) + 8ul;\n+  p2_23 = p2_14(D) + 8ul;\n+  if (p_limit2_15 < p2_23)\n+    goto bb_14;\n+  else\n+    goto bb_7;\n+\n+  bb_14:\n+  goto bb_9;\n+\n+  bb_7:\n+  goto bb_5;\n+\n+  bb_4:\n+  p_16 = p_26 + 8ul;\n+  p2_17 = p2_27 + 8ul;\n+  if (p_limit2_15 < p2_17)\n+    goto bb_11;\n+  else\n+    goto bb_8;\n+\n+  bb_11:\n+  goto bb_6;\n+\n+  bb_8:\n+  ;\n+\n+  bb_5:\n+  s_24 = __PHI (bb_7: 0l, bb_8: s_19);\n+  p_26 = __PHI (bb_7: p_20, bb_8: p_16);\n+  p2_27 = __PHI (bb_7: p2_23, bb_8: p2_17);\n+  _5 = __MEM <long int> (p_26);\n+  s_19 = _5 + s_24;\n+  if (p_limit_12 >= p_26)\n+    goto bb_4;\n+  else\n+    goto bb_12;\n+\n+  bb_12:\n+  ;\n+\n+  bb_6:\n+  s_25 = __PHI (bb_12: s_19, bb_11: s_19, bb_9: 0l);\n+  return s_25;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"Replacing\" 1 \"ivopts\" } } */"}, {"sha": "106349778ed97cf2777aebf3555d8b6d1b74fcbd", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ivopt_mult_2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2925cd9d1c9d9e03a55f9f67ab81ead94f9e4f6c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fivopt_mult_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2925cd9d1c9d9e03a55f9f67ab81ead94f9e4f6c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fivopt_mult_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fivopt_mult_2.c?ref=2925cd9d1c9d9e03a55f9f67ab81ead94f9e4f6c", "patch": "@@ -21,4 +21,4 @@ long foo(long* p, long* p2, int N1, int N2)\n   return s;\n }\n \n-/* { dg-final { scan-tree-dump-times \"Replacing\" 2 \"ivopts\"} } */\n+/* { dg-final { scan-tree-dump-times \"Replacing\" 2 \"ivopts\" { xfail *-*-* } } } */"}, {"sha": "38f547657d116791bd18edd72d44d0c742aafa83", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ivopt_mult_2g.c", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2925cd9d1c9d9e03a55f9f67ab81ead94f9e4f6c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fivopt_mult_2g.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2925cd9d1c9d9e03a55f9f67ab81ead94f9e4f6c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fivopt_mult_2g.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fivopt_mult_2g.c?ref=2925cd9d1c9d9e03a55f9f67ab81ead94f9e4f6c", "patch": "@@ -0,0 +1,79 @@\n+/* { dg-do compile { target {{ i?86-*-* x86_64-*-* } && lp64 } } } */\n+/* { dg-options \"-O2 -fgimple -m64 -fdump-tree-ivopts-details\" } */\n+\n+/* Exit tests 'i < N1' and 'p2 > p_limit2' can be replaced, so\n+ * two ivs i and p2 can be eliminate.  */\n+long int __GIMPLE (startwith(\"fix_loops\"))\n+foo (long int * p, long int * p2, int N1, int N2)\n+{\n+  long int s;\n+  long int * p_limit2;\n+  int i;\n+  long unsigned int _1;\n+  long unsigned int _2;\n+  long int _3;\n+\n+  bb_2:\n+  _1 = (long unsigned int) N2_9(D);\n+  _2 = _1 * 8ul;\n+  p_limit2_11 = p2_10(D) + _2;\n+  if (N1_13(D) > 0)\n+    goto bb_3;\n+  else\n+    goto bb_13;\n+\n+  bb_13:\n+\n+  bb_9:\n+  goto bb_6;\n+\n+  bb_3:\n+  p_22 = p_12(D) + 8ul;\n+  p2_23 = p2_10(D) + 8ul;\n+  if (p_limit2_11 < p2_23)\n+    goto bb_14;\n+  else\n+    goto bb_7;\n+\n+  bb_14:\n+  goto bb_9;\n+\n+  bb_7:\n+  goto bb_5;\n+\n+  bb_4:\n+  p_14 = p_27 + 8ul;\n+  p2_15 = p2_28 + 8ul;\n+  i_16 = i_29 + 1;\n+  if (p_limit2_11 < p2_15)\n+    goto bb_11;\n+  else\n+    goto bb_8;\n+\n+  bb_11:\n+  goto bb_6;\n+\n+  bb_8:\n+  ;\n+\n+  bb_5:\n+  s_25 = __PHI (bb_7: 0l, bb_8: s_18);\n+  p_27 = __PHI (bb_7: p_22, bb_8: p_14);\n+  p2_28 = __PHI (bb_7: p2_23, bb_8: p2_15);\n+  i_29 = __PHI (bb_7: 1, bb_8: i_16);\n+  _3 = __MEM <long int> (p_27);\n+  s_18 = _3 + s_25;\n+  if (N1_13(D) > i_29)\n+    goto bb_4;\n+  else\n+    goto bb_12;\n+\n+  bb_12:\n+  ;\n+\n+  bb_6:\n+  s_26 = __PHI (bb_12: s_18, bb_11: s_18, bb_9: 0l);\n+  return s_26;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"Replacing\" 2 \"ivopts\"} } */"}, {"sha": "c4562768398b50a3d35e7d1d237e235988d963e8", "filename": "gcc/testsuite/gcc.dg/tree-ssa/predcom-8.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2925cd9d1c9d9e03a55f9f67ab81ead94f9e4f6c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpredcom-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2925cd9d1c9d9e03a55f9f67ab81ead94f9e4f6c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpredcom-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpredcom-8.c?ref=2925cd9d1c9d9e03a55f9f67ab81ead94f9e4f6c", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -fdump-tree-pcom-details\" } */\n+\n+int is_sorted(int *a, int n)\n+{\n+  for (int i = 0; i < n - 1; i++)\n+    if (a[i] > a[i + 1])\n+      return 0;\n+  return 1;\n+}\n+\n+/* { dg-final { scan-tree-dump \"Executing predictive commoning without unrolling\" \"pcom\" } } */"}, {"sha": "9ee8d12010b5f776897aaa28f542c14258ae442f", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dom-thread-7.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2925cd9d1c9d9e03a55f9f67ab81ead94f9e4f6c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2925cd9d1c9d9e03a55f9f67ab81ead94f9e4f6c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-7.c?ref=2925cd9d1c9d9e03a55f9f67ab81ead94f9e4f6c", "patch": "@@ -3,7 +3,7 @@\n /* { dg-final { scan-tree-dump \"Jumps threaded: 16\"  \"thread1\" } } */\n /* { dg-final { scan-tree-dump \"Jumps threaded: 9\" \"thread2\" } } */\n /* { dg-final { scan-tree-dump \"Jumps threaded: 3\" \"thread3\" } } */\n-/* { dg-final { scan-tree-dump-not \"Jumps threaded\"  \"dom2\" } } */\n+/* { dg-final { scan-tree-dump \"Jumps threaded: 1\"  \"dom2\" } } */\n /* { dg-final { scan-tree-dump-not \"Jumps threaded\"  \"dom3\" } } */\n /* { dg-final { scan-tree-dump-not \"Jumps threaded\"  \"vrp2\" } } */\n "}, {"sha": "c876d62405f3c596c4c47f7704247c0872ecce6c", "filename": "gcc/tree-ssa-loop-ch.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2925cd9d1c9d9e03a55f9f67ab81ead94f9e4f6c/gcc%2Ftree-ssa-loop-ch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2925cd9d1c9d9e03a55f9f67ab81ead94f9e4f6c/gcc%2Ftree-ssa-loop-ch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ch.c?ref=2925cd9d1c9d9e03a55f9f67ab81ead94f9e4f6c", "patch": "@@ -340,6 +340,11 @@ ch_base::copy_headers (function *fun)\n \t  bbs[n_bbs++] = header;\n \t  gcc_assert (bbs_size > n_bbs);\n \t  header = exit->dest;\n+\t  /* Make sure to stop copying after we copied the first exit test.\n+\t     Without further heuristics we do not want to rotate the loop\n+\t     any further.  */\n+\t  if (loop_exits_from_bb_p (loop, exit->src))\n+\t    break;\n \t}\n \n       if (!exit)"}]}