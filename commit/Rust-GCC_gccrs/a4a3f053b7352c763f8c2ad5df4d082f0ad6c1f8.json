{"sha": "a4a3f053b7352c763f8c2ad5df4d082f0ad6c1f8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTRhM2YwNTNiNzM1MmM3NjNmOGMyYWQ1ZGY0ZDA4MmYwYWQ2YzFmOA==", "commit": {"author": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "1996-05-31T05:08:47Z"}, "committer": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "1996-05-31T05:08:47Z"}, "message": "tree.def (OFFSET_REF): Remove.\n\n        * tree.def (OFFSET_REF): Remove.\n        * expr.c (expand_expr, case OFFSET_REF): Ditto.\n        * tree.c (substitute_in_expr): Remove OFFSET_REF code.\nRemove some old cruft\n\nFrom-SVN: r12127", "tree": {"sha": "185f361d5323cb6c4bda783c93c0231e1564ed1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/185f361d5323cb6c4bda783c93c0231e1564ed1d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a4a3f053b7352c763f8c2ad5df4d082f0ad6c1f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4a3f053b7352c763f8c2ad5df4d082f0ad6c1f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4a3f053b7352c763f8c2ad5df4d082f0ad6c1f8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4a3f053b7352c763f8c2ad5df4d082f0ad6c1f8/comments", "author": null, "committer": null, "parents": [{"sha": "e349ee739ed29cd4f7688629da646055c2b078da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e349ee739ed29cd4f7688629da646055c2b078da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e349ee739ed29cd4f7688629da646055c2b078da"}], "stats": {"total": 31, "additions": 0, "deletions": 31}, "files": [{"sha": "071e38312e38e12a9d167b7ba3a753f17b57ec11", "filename": "gcc/expr.c", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4a3f053b7352c763f8c2ad5df4d082f0ad6c1f8/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4a3f053b7352c763f8c2ad5df4d082f0ad6c1f8/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=a4a3f053b7352c763f8c2ad5df4d082f0ad6c1f8", "patch": "@@ -5450,22 +5450,6 @@ expand_expr (exp, target, tmode, modifier)\n \treturn target;\n       }\n \n-    case OFFSET_REF:\n-      {\n-\ttree base = build1 (ADDR_EXPR, type, TREE_OPERAND (exp, 0));\n-\ttree addr = build (PLUS_EXPR, type, base, TREE_OPERAND (exp, 1));\n-\top0 = expand_expr (addr, NULL_RTX, VOIDmode, EXPAND_SUM);\n-\ttemp = gen_rtx (MEM, mode, memory_address (mode, op0));\n-\tMEM_IN_STRUCT_P (temp) = 1;\n-\tMEM_VOLATILE_P (temp) = TREE_THIS_VOLATILE (exp);\n-#if 0 /* It is incorrect to set RTX_UNCHANGING_P here, because the fact that\n-\t a location is accessed through a pointer to const does not mean\n-\t that the value there can never change.  */\n-\tRTX_UNCHANGING_P (temp) = TREE_READONLY (exp);\n-#endif\n-\treturn temp;\n-      }\n-\n       /* Intended for a reference to a buffer of a file-object in Pascal.\n \t But it's not certain that a special tree code will really be\n \t necessary for these.  INDIRECT_REF might work for them.  */"}, {"sha": "16f42b9ec3325122aefe04a92084fcce2a9f44a7", "filename": "gcc/tree.c", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4a3f053b7352c763f8c2ad5df4d082f0ad6c1f8/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4a3f053b7352c763f8c2ad5df4d082f0ad6c1f8/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=a4a3f053b7352c763f8c2ad5df4d082f0ad6c1f8", "patch": "@@ -2421,15 +2421,6 @@ substitute_in_expr (exp, f, r)\n \n \t  new = fold (build1 (code, TREE_TYPE (exp), op0));\n \t  break;\n-\n-\tcase OFFSET_REF:\n-\t  op0 = substitute_in_expr (TREE_OPERAND (exp, 0), f, r);\n-\t  op1 = substitute_in_expr (TREE_OPERAND (exp, 1), f, r);\n-\t  if (op0 == TREE_OPERAND (exp, 0) && op1 == TREE_OPERAND (exp, 1))\n-\t    return exp;\n-\n-\t  new = fold (build (code, TREE_TYPE (exp), op0, op1));\n-\t  break;\n \t}\n     }\n "}, {"sha": "e6dade464b8774b5e84a7e9a6ec83ed20ba265f3", "filename": "gcc/tree.def", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4a3f053b7352c763f8c2ad5df4d082f0ad6c1f8/gcc%2Ftree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4a3f053b7352c763f8c2ad5df4d082f0ad6c1f8/gcc%2Ftree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.def?ref=a4a3f053b7352c763f8c2ad5df4d082f0ad6c1f8", "patch": "@@ -349,12 +349,6 @@ DEFTREECODE (BIT_FIELD_REF, \"bit_field_ref\", \"r\", 3)\n /* C unary `*' or Pascal `^'.  One operand, an expression for a pointer.  */\n DEFTREECODE (INDIRECT_REF, \"indirect_ref\", \"r\", 1)\n \n-/* Reference to the contents of an offset\n-   (a value whose type is an OFFSET_TYPE).\n-   Operand 0 is the object within which the offset is taken.\n-   Operand 1 is the offset.  */\n-DEFTREECODE (OFFSET_REF, \"offset_ref\", \"r\", 2)\n-\n /* Pascal `^` on a file.  One operand, an expression for the file.  */\n DEFTREECODE (BUFFER_REF, \"buffer_ref\", \"r\", 1)\n "}]}