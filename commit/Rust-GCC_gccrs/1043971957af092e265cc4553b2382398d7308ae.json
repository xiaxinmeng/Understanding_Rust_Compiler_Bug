{"sha": "1043971957af092e265cc4553b2382398d7308ae", "node_id": "C_kwDOANBUbNoAKDEwNDM5NzE5NTdhZjA5MmUyNjVjYzQ1NTNiMjM4MjM5OGQ3MzA4YWU", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-10-22T00:17:11Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-10-22T00:17:11Z"}, "message": "Daily bump.", "tree": {"sha": "020505e26f14010bdbf43333dcf5ae9b849a4f11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/020505e26f14010bdbf43333dcf5ae9b849a4f11"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1043971957af092e265cc4553b2382398d7308ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1043971957af092e265cc4553b2382398d7308ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1043971957af092e265cc4553b2382398d7308ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1043971957af092e265cc4553b2382398d7308ae/comments", "author": null, "committer": null, "parents": [{"sha": "4cfdaeb2755121ac1069f09898def56469b0fb51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cfdaeb2755121ac1069f09898def56469b0fb51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4cfdaeb2755121ac1069f09898def56469b0fb51"}], "stats": {"total": 496, "additions": 495, "deletions": 1}, "files": [{"sha": "f55adfb90f004d9fce4147840306567778a720af", "filename": "ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1043971957af092e265cc4553b2382398d7308ae/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1043971957af092e265cc4553b2382398d7308ae/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=1043971957af092e265cc4553b2382398d7308ae", "patch": "@@ -1,3 +1,9 @@\n+2022-10-21  \u0414\u0438\u043b\u044f\u043d \u041f\u0430\u043b\u0430\u0443\u0437\u043e\u0432  <dilyan.palauzov@aegee.org>\n+\n+\t* configure.ac: Don't configure readline if --with-system-readline is\n+\tused.\n+\t* configure: Re-generate.\n+\n 2022-10-12  Cui,Lili  <lili.cui@intel.com>\n \n \t* MAINTAINERS (Write After Approval): Add myself."}, {"sha": "2ff1780d86cc6b236213a6554e46df111d21cae8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 338, "deletions": 0, "changes": 338, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1043971957af092e265cc4553b2382398d7308ae/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1043971957af092e265cc4553b2382398d7308ae/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1043971957af092e265cc4553b2382398d7308ae", "patch": "@@ -1,3 +1,341 @@\n+2022-10-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/107322\n+\t* config/i386/i386-expand.cc (ix86_prepare_fp_compare_args): For\n+\tBFmode comparisons promote arguments to SFmode and recurse.\n+\t(ix86_expand_int_movcc, ix86_expand_fp_movcc): Return false early\n+\tif comparison operands are BFmode and operands[1] is not\n+\tix86_fp_comparison_operator.\n+\n+2022-10-21  Tejas Joshi  <TejasSanjay.Joshi@amd.com>\n+\n+\t* common/config/i386/cpuinfo.h (get_amd_cpu): Recognize znver4.\n+\t* common/config/i386/i386-common.cc (processor_names): Add znver4.\n+\t(processor_alias_table): Add znver4 and modularize old znvers.\n+\t* common/config/i386/i386-cpuinfo.h (processor_subtypes):\n+\tAMDFAM19H_ZNVER4.\n+\t* config.gcc (x86_64-*-* |...): Likewise.\n+\t* config/i386/driver-i386.cc (host_detect_local_cpu): Let\n+\t-march=native recognize znver4 cpus.\n+\t* config/i386/i386-c.cc (ix86_target_macros_internal): Add znver4.\n+\t* config/i386/i386-options.cc (m_ZNVER4): New definition.\n+\t(m_ZNVER): Include m_ZNVER4.\n+\t(processor_cost_table): Add znver4.\n+\t* config/i386/i386.cc (ix86_reassociation_width): Likewise.\n+\t* config/i386/i386.h (processor_type): Add PROCESSOR_ZNVER4.\n+\t(PTA_ZNVER1): New definition.\n+\t(PTA_ZNVER2): Likewise.\n+\t(PTA_ZNVER3): Likewise.\n+\t(PTA_ZNVER4): Likewise.\n+\t* config/i386/i386.md (define_attr \"cpu\"): Add znver4 and rename\n+\tmd file.\n+\t* config/i386/x86-tune-costs.h (znver4_cost): New definition.\n+\t* config/i386/x86-tune-sched.cc (ix86_issue_rate): Add znver4.\n+\t(ix86_adjust_cost): Likewise.\n+\t* config/i386/znver1.md: Rename to znver.md.\n+\t* config/i386/znver.md: Add new reservations for znver4.\n+\t* doc/extend.texi: Add details about znver4.\n+\t* doc/invoke.texi: Likewise.\n+\n+2022-10-21  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/107323\n+\t* tree-loop-distribution.cc (pg_unmark_merged_alias_ddrs):\n+\tNew function.\n+\t(loop_distribution::break_alias_scc_partitions): Revert\n+\tpostorder save/restore from the PR94125 fix.  Instead\n+\tmake sure to not ignore edges from SCCs we are going to\n+\tmerge.\n+\n+2022-10-21  Monk Chiang  <monk.chiang@sifive.com>\n+\n+\t* config/riscv/riscv.md: Add atomic type attribute.\n+\t* config/riscv/sync.md: Add atomic type for atomic instructions.\n+\n+2022-10-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/54346\n+\t* match.pd ((vec_perm (vec_perm@0 @1 @2 VECTOR_CST) @0 VECTOR_CST)):\n+\tOptimize nested VEC_PERM_EXPRs even if target can't handle the\n+\tnew one provided we don't increase number of VEC_PERM_EXPRs the\n+\ttarget can't handle.\n+\n+2022-10-21  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* config.gcc: Add riscv-vector-builtins-bases.o and riscv-vector-builtins-shapes.o\n+\t* config/riscv/riscv-vector-builtins.cc (DEF_RVV_I_OPS): New macro.\n+\t(DEF_RVV_FUNCTION): Ditto.\n+\t(handle_pragma_vector): Add intrinsic framework.\n+\t* config/riscv/riscv.cc (riscv_print_operand): Add operand print for vsetvl/vsetvlmax.\n+\t* config/riscv/riscv.md: include vector.md.\n+\t* config/riscv/t-riscv: Add riscv-vector-builtins-bases.o and riscv-vector-builtins-shapes.o\n+\t* config/riscv/riscv-vector-builtins-bases.cc: New file.\n+\t* config/riscv/riscv-vector-builtins-bases.h: New file.\n+\t* config/riscv/riscv-vector-builtins-functions.def: New file.\n+\t* config/riscv/riscv-vector-builtins-shapes.cc: New file.\n+\t* config/riscv/riscv-vector-builtins-shapes.h: New file.\n+\t* config/riscv/riscv-vector-builtins-types.def: New file.\n+\t* config/riscv/vector.md: New file.\n+\n+2022-10-21  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* config.gcc: Add gt files since function_instance is GTY ((user)).\n+\t* config/riscv/riscv-builtins.cc (riscv_init_builtins): Add RVV intrinsic framework.\n+\t(riscv_builtin_decl): Ditto.\n+\t(riscv_expand_builtin): Ditto.\n+\t* config/riscv/riscv-protos.h (builtin_decl): New function.\n+\t(expand_builtin): Ditto.\n+\t(enum riscv_builtin_class): New enum to classify RVV intrinsic and RISC-V general built-in.\n+\t* config/riscv/riscv-vector-builtins.cc (class GTY): New declaration.\n+\t(struct registered_function_hasher): New struct.\n+\t(DEF_RVV_OP_TYPE): New macro.\n+\t(DEF_RVV_TYPE): Ditto.\n+\t(DEF_RVV_PRED_TYPE): Ditto.\n+\t(GTY): New declaration.\n+\t(add_attribute): New function.\n+\t(check_required_extensions): Ditto.\n+\t(rvv_arg_type_info::get_tree_type): Ditto.\n+\t(function_instance::function_instance): Ditto.\n+\t(function_instance::operator==): Ditto.\n+\t(function_instance::any_type_float_p): Ditto.\n+\t(function_instance::get_return_type): Ditto.\n+\t(function_instance::get_arg_type): Ditto.\n+\t(function_instance::hash): Ditto.\n+\t(function_instance::call_properties): Ditto.\n+\t(function_instance::reads_global_state_p): Ditto.\n+\t(function_instance::modifies_global_state_p): Ditto.\n+\t(function_instance::could_trap_p): Ditto.\n+\t(function_builder::function_builder): Ditto.\n+\t(function_builder::~function_builder): Ditto.\n+\t(function_builder::allocate_argument_types): Ditto.\n+\t(function_builder::register_function_group): Ditto.\n+\t(function_builder::append_name): Ditto.\n+\t(function_builder::finish_name): Ditto.\n+\t(function_builder::get_attributes): Ditto.\n+\t(function_builder::add_function): Ditto.\n+\t(function_builder::add_unique_function): Ditto.\n+\t(function_call_info::function_call_info): Ditto.\n+\t(function_expander::function_expander): Ditto.\n+\t(function_expander::add_input_operand): Ditto.\n+\t(function_expander::generate_insn): Ditto.\n+\t(registered_function_hasher::hash): Ditto.\n+\t(registered_function_hasher::equal): Ditto.\n+\t(builtin_decl): Ditto.\n+\t(expand_builtin): Ditto.\n+\t(gt_ggc_mx): Define for using GCC garbage collect.\n+\t(gt_pch_nx): Define for using GCC garbage collect.\n+\t* config/riscv/riscv-vector-builtins.def (DEF_RVV_OP_TYPE): New macro.\n+\t(DEF_RVV_PRED_TYPE): Ditto.\n+\t(vbool64_t): Add suffix.\n+\t(vbool32_t): Ditto.\n+\t(vbool16_t): Ditto.\n+\t(vbool8_t): Ditto.\n+\t(vbool4_t): Ditto.\n+\t(vbool2_t): Ditto.\n+\t(vbool1_t): Ditto.\n+\t(vint8mf8_t): Ditto.\n+\t(vuint8mf8_t): Ditto.\n+\t(vint8mf4_t): Ditto.\n+\t(vuint8mf4_t): Ditto.\n+\t(vint8mf2_t): Ditto.\n+\t(vuint8mf2_t): Ditto.\n+\t(vint8m1_t): Ditto.\n+\t(vuint8m1_t): Ditto.\n+\t(vint8m2_t): Ditto.\n+\t(vuint8m2_t): Ditto.\n+\t(vint8m4_t): Ditto.\n+\t(vuint8m4_t): Ditto.\n+\t(vint8m8_t): Ditto.\n+\t(vuint8m8_t): Ditto.\n+\t(vint16mf4_t): Ditto.\n+\t(vuint16mf4_t): Ditto.\n+\t(vint16mf2_t): Ditto.\n+\t(vuint16mf2_t): Ditto.\n+\t(vint16m1_t): Ditto.\n+\t(vuint16m1_t): Ditto.\n+\t(vint16m2_t): Ditto.\n+\t(vuint16m2_t): Ditto.\n+\t(vint16m4_t): Ditto.\n+\t(vuint16m4_t): Ditto.\n+\t(vint16m8_t): Ditto.\n+\t(vuint16m8_t): Ditto.\n+\t(vint32mf2_t): Ditto.\n+\t(vuint32mf2_t): Ditto.\n+\t(vint32m1_t): Ditto.\n+\t(vuint32m1_t): Ditto.\n+\t(vint32m2_t): Ditto.\n+\t(vuint32m2_t): Ditto.\n+\t(vint32m4_t): Ditto.\n+\t(vuint32m4_t): Ditto.\n+\t(vint32m8_t): Ditto.\n+\t(vuint32m8_t): Ditto.\n+\t(vint64m1_t): Ditto.\n+\t(vuint64m1_t): Ditto.\n+\t(vint64m2_t): Ditto.\n+\t(vuint64m2_t): Ditto.\n+\t(vint64m4_t): Ditto.\n+\t(vuint64m4_t): Ditto.\n+\t(vint64m8_t): Ditto.\n+\t(vuint64m8_t): Ditto.\n+\t(vfloat32mf2_t): Ditto.\n+\t(vfloat32m1_t): Ditto.\n+\t(vfloat32m2_t): Ditto.\n+\t(vfloat32m4_t): Ditto.\n+\t(vfloat32m8_t): Ditto.\n+\t(vfloat64m1_t): Ditto.\n+\t(vfloat64m2_t): Ditto.\n+\t(vfloat64m4_t): Ditto.\n+\t(vfloat64m8_t): Ditto.\n+\t(vv): Ditto.\n+\t(vx): Ditto.\n+\t(v): Ditto.\n+\t(wv): Ditto.\n+\t(wx): Ditto.\n+\t(x_x_v): Ditto.\n+\t(vf2): Ditto.\n+\t(vf4): Ditto.\n+\t(vf8): Ditto.\n+\t(vvm): Ditto.\n+\t(vxm): Ditto.\n+\t(x_x_w): Ditto.\n+\t(v_v): Ditto.\n+\t(v_x): Ditto.\n+\t(vs): Ditto.\n+\t(mm): Ditto.\n+\t(m): Ditto.\n+\t(vf): Ditto.\n+\t(vm): Ditto.\n+\t(wf): Ditto.\n+\t(vfm): Ditto.\n+\t(v_f): Ditto.\n+\t(ta): Ditto.\n+\t(tu): Ditto.\n+\t(ma): Ditto.\n+\t(mu): Ditto.\n+\t(tama): Ditto.\n+\t(tamu): Ditto.\n+\t(tuma): Ditto.\n+\t(tumu): Ditto.\n+\t(tam): Ditto.\n+\t(tum): Ditto.\n+\t* config/riscv/riscv-vector-builtins.h (GCC_RISCV_VECTOR_BUILTINS_H): New macro.\n+\t(RVV_REQUIRE_RV64BIT): Ditto.\n+\t(RVV_REQUIRE_ZVE64): Ditto.\n+\t(RVV_REQUIRE_ELEN_FP_32): Ditto.\n+\t(RVV_REQUIRE_ELEN_FP_64): Ditto.\n+\t(enum operand_type_index): New enum.\n+\t(DEF_RVV_OP_TYPE): New macro.\n+\t(enum predication_type_index): New enum.\n+\t(DEF_RVV_PRED_TYPE): New macro.\n+\t(enum rvv_base_type): New enum.\n+\t(struct rvv_builtin_suffixes): New struct.\n+\t(struct rvv_arg_type_info): Ditto.\n+\t(struct rvv_type_info): Ditto.\n+\t(struct rvv_op_info): Ditto.\n+\t(class registered_function): New class.\n+\t(class function_base): Ditto.\n+\t(class function_shape): Ditto.\n+\t(struct function_group_info): New struct.\n+\t(class GTY): New class.\n+\t(class function_builder): Ditto.\n+\t(class function_call_info): Ditto.\n+\t(function_call_info::function_returns_void_p): New function.\n+\t(class function_expander): New class.\n+\t(function_instance::operator!=): New function.\n+\t(function_expander::expand): Ditto.\n+\t(function_expander::add_input_operand): Ditto.\n+\t(function_base::call_properties): Ditto.\n+\n+2022-10-21  Haochen Jiang  <haochen.jiang@intel.com>\n+\n+\t* config/i386/sse.md (ssedvecmode): Rename from VI1SI.\n+\t(ssedvecmodelower): Rename from vi1si.\n+\t(sdot_prod<mode>): New define_expand.\n+\t(udot_prod<mode>): Ditto.\n+\n+2022-10-21  Kong Lingling  <lingling.kong@intel.com>\n+\t    Hongyu Wang  <hongyu.wang@intel.com>\n+\t    Haochen Jiang  <haochen.jiang@intel.com>\n+\n+\t* common/config/i386/cpuinfo.h (get_available_features): Detect\n+\tavxvnniint8.\n+\t* common/config/i386/i386-common.cc\n+\t(OPTION_MASK_ISA2_AVXVNNIINT8_SET): New.\n+\t(OPTION_MASK_ISA2_AVXVNNIINT8_UNSET): Ditto.\n+\t(ix86_handle_option): Handle -mavxvnniint8.\n+\t* common/config/i386/i386-cpuinfo.h (enum processor_features):\n+\tAdd FEATURE_AVXVNNIINT8.\n+\t* common/config/i386/i386-isas.h: Add ISA_NAME_TABLE_ENTRY for\n+\tavxvnniint8.\n+\t* config.gcc: Add avxvnniint8intrin.h.\n+\t* config/i386/avxvnniint8intrin.h: New file.\n+\t* config/i386/cpuid.h (bit_AVXVNNIINT8): New.\n+\t* config/i386/i386-builtin.def: Add new builtins.\n+\t* config/i386/i386-c.cc (ix86_target_macros_internal): Define\n+\t__AVXVNNIINT8__.\n+\t* config/i386/i386-options.cc (isa2_opts): Add -mavxvnniint8.\n+\t(ix86_valid_target_attribute_inner_p): Handle avxvnniint8.\n+\t* config/i386/i386-isa.def: Add DEF_PTA(AVXVNNIINT8) New..\n+\t* config/i386/i386.opt: Add option -mavxvnniint8.\n+\t* config/i386/immintrin.h: Include avxvnniint8intrin.h.\n+\t* config/i386/sse.md (UNSPEC_VPMADDUBSWACCD\n+\tUNSPEC_VPMADDUBSWACCSSD,UNSPEC_VPMADDWDACCD,\n+\tUNSPEC_VPMADDWDACCSSD): Rename according to new style.\n+\t(vpdp<vpdotprodtype>_<mode>): New define_insn.\n+\t* doc/extend.texi: Document avxvnniint8.\n+\t* doc/invoke.texi: Document -mavxvnniint8.\n+\t* doc/sourcebuild.texi: Document target avxvnniint8.\n+\n+2022-10-21  Hongyu Wang  <hongyu.wang@intel.com>\n+\n+\t* common/config/i386/i386-common.cc\n+\t(OPTION_MASK_ISA_AVXIFMA_SET, OPTION_MASK_ISA2_AVXIFMA_UNSET,\n+\tOPTION_MASK_ISA2_AVX2_UNSET): New macro.\n+\t(ix86_handle_option): Handle -mavxifma.\n+\t* common/config/i386/i386-cpuinfo.h (processor_types): Add\n+\tFEATURE_AVXIFMA.\n+\t* common/config/i386/i386-isas.h: Add ISA_NAME_TABLE_ENTRY for\n+\tavxifma.\n+\t* common/config/i386/cpuinfo.h (get_available_features):\n+\tDetect avxifma.\n+\t* config.gcc: Add avxifmaintrin.h\n+\t* config/i386/avx512ifmavlintrin.h: (_mm_madd52lo_epu64): Change\n+\tto macro.\n+\t(_mm_madd52hi_epu64): Likewise.\n+\t(_mm256_madd52lo_epu64): Likewise.\n+\t(_mm256_madd52hi_epu64): Likewise.\n+\t* config/i386/avxifmaintrin.h: New header.\n+\t* config/i386/cpuid.h (bit_AVXIFMA): New.\n+\t* config/i386/i386-builtin.def: Add new builtins, and correct\n+\t  pattern names for AVX512IFMA.\n+\t* config/i386/i386-builtins.cc (def_builtin): Handle AVX-IFMA\n+\t  builtins like AVX-VNNI.\n+\t* config/i386/i386-c.cc (ix86_target_macros_internal): Define\n+\t__AVXIFMA__.\n+\t* config/i386/i386-expand.cc (ix86_check_builtin_isa_match):\n+\t  Relax ISA masks for AVXIFMA.\n+\t* config/i386/i386-isa.def: Add AVXIFMA.\n+\t* config/i386/i386-options.cc (isa2_opts): Add -mavxifma.\n+\t(ix86_valid_target_attribute_inner_p): Handle avxifma.\n+\t* config/i386/i386.md (isa): Add attr avxifma and avxifmavl.\n+\t* config/i386/i386.opt: Add option -mavxifma.\n+\t* config/i386/immintrin.h: Inculde avxifmaintrin.h.\n+\t* config/i386/sse.md (avx_vpmadd52<vpmadd52type>_<mode>):\n+\tRemove.\n+\t(vpamdd52<vpmadd52type><mode><sd_maskz_name>): Remove.\n+\t(vpamdd52huq<mode>_maskz): Rename to ...\n+\t(vpmadd52huq<mode>_maskz): ... this.\n+\t(vpamdd52luq<mode>_maskz): Rename to ...\n+\t(vpmadd52luq<mode>_maskz): ... this.\n+\t(vpmadd52<vpmadd52type><mode>): New define_insn.\n+\t(vpmadd52<vpmadd52type>v8di): Likewise.\n+\t(vpmadd52<vpmadd52type><mode>_maskz_1): Likewise.\n+\t(vpamdd52<vpmadd52type><mode>_mask): Rename to ...\n+\t(vpmadd52<vpmadd52type><mode>_mask): ... this.\n+\t* doc/invoke.texi: Document -mavxifma.\n+\t* doc/extend.texi: Document avxifma.\n+\t* doc/sourcebuild.texi: Document target avxifma.\n+\n 2022-10-20  Aldy Hernandez  <aldyh@redhat.com>\n \n \tPR c++/106654"}, {"sha": "8d5e5406b709d8d7b7e228ee7159ff3d7af4dca8", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1043971957af092e265cc4553b2382398d7308ae/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1043971957af092e265cc4553b2382398d7308ae/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=1043971957af092e265cc4553b2382398d7308ae", "patch": "@@ -1 +1 @@\n-20221021\n+20221022"}, {"sha": "3c29b4c9b109bde093f0ff18fc772f1c6e51448e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1043971957af092e265cc4553b2382398d7308ae/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1043971957af092e265cc4553b2382398d7308ae/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1043971957af092e265cc4553b2382398d7308ae", "patch": "@@ -1,3 +1,21 @@\n+2022-10-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/107295\n+\t* constexpr.cc (reduced_constant_expression_p) <case CONSTRUCTOR>:\n+\tReturn false for VECTOR_TYPE CONSTRUCTORs even without\n+\tCONSTRUCTOR_NO_CLEARING set on them.\n+\t(cxx_eval_bare_aggregate): If constant but !changed, fold before\n+\treturning VECTOR_TYPE_P CONSTRUCTOR.\n+\t(cxx_eval_constant_expression) <case CONSTRUCTOR>: Don't fold\n+\tTREE_CONSTANT CONSTRUCTOR, just return it.\n+\n+2022-10-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/106863\n+\t* semantics.cc (finish_compound_literal): For void{}, if\n+\tprocessing_template_decl return a COMPOUND_LITERAL_P\n+\tCONSTRUCTOR rather than void_node.\n+\n 2022-10-20  Patrick Palka  <ppalka@redhat.com>\n \n \t* pt.cc (lookup_and_finish_template_variable): Don't"}, {"sha": "f764113c60ce284d5a5d7be7e72869965715b46b", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1043971957af092e265cc4553b2382398d7308ae/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1043971957af092e265cc4553b2382398d7308ae/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=1043971957af092e265cc4553b2382398d7308ae", "patch": "@@ -1,3 +1,13 @@\n+2022-10-21  Jos\u00e9 Rui Faustino de Sousa  <jrfsousa@gmail.com>\n+\n+\tPR fortran/100097\n+\tPR fortran/100098\n+\t* trans-array.cc (gfc_trans_class_array): New function to\n+\tinitialize class descriptor's TKR information.\n+\t* trans-array.h (gfc_trans_class_array): Add function prototype.\n+\t* trans-decl.cc (gfc_trans_deferred_vars): Add calls to the new\n+\tfunction for both pointers and allocatables.\n+\n 2022-10-20  Harald Anlauf  <anlauf@gmx.de>\n \t    Steven G. Kargl  <kargl@gcc.gnu.org>\n "}, {"sha": "c77712f45527aa2ab0c368bf021035cec01787d0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1043971957af092e265cc4553b2382398d7308ae/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1043971957af092e265cc4553b2382398d7308ae/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1043971957af092e265cc4553b2382398d7308ae", "patch": "@@ -1,3 +1,105 @@\n+2022-10-21  Jos\u00e9 Rui Faustino de Sousa  <jrfsousa@gmail.com>\n+\n+\tPR fortran/100097\n+\tPR fortran/100098\n+\t* gfortran.dg/PR100097.f90: New test.\n+\t* gfortran.dg/PR100098.f90: New test.\n+\n+2022-10-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/107322\n+\t* gcc.target/i386/pr107322.c: New test.\n+\n+2022-10-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/107295\n+\t* g++.dg/ext/vector42.C: New test.\n+\n+2022-10-21  Tejas Joshi  <TejasSanjay.Joshi@amd.com>\n+\n+\t* gcc.target/i386/funcspec-56.inc: Handle new march.\n+\t* g++.target/i386/mv29.C: Likewise.\n+\n+2022-10-21  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\tPR tree-optimization/107195\n+\t* gcc.dg/tree-ssa/pr107195-3.c: New.\n+\n+2022-10-21  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/107323\n+\t* gcc.dg/tree-ssa/pr107323.c: New testcase.\n+\n+2022-10-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/54346\n+\t* gcc.dg/pr54346.c: Add -Wno-psabi to dg-options.\n+\n+2022-10-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/106863\n+\t* g++.dg/cpp0x/dr2351-2.C: New test.\n+\n+2022-10-21  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* gcc.target/riscv/rvv/base/vsetvl-1.c: New test.\n+\n+2022-10-21  Haochen Jiang  <haochen.jiang@intel.com>\n+\n+\t* gcc.target/i386/vnniint8-auto-vectorize-1.c: New test.\n+\t* gcc.target/i386/vnniint8-auto-vectorize-2.c: Ditto.\n+\n+2022-10-21  Kong Lingling  <lingling.kong@intel.com>\n+\t    Hongyu Wang  <hongyu.wang@intel.com>\n+\t    Haochen Jiang  <haochen.jiang@intel.com>\n+\n+\t* g++.dg/other/i386-2.C: Add -mavxvnniint8.\n+\t* g++.dg/other/i386-3.C: Ditto.\n+\t* gcc.target/i386/avx-check.h: Add avxvnniint8 check.\n+\t* gcc.target/i386/sse-12.c: Add -mavxvnniint8.\n+\t* gcc.target/i386/sse-13.c: Ditto.\n+\t* gcc.target/i386/sse-14.c: Ditto.\n+\t* gcc.target/i386/sse-22.c: Ditto.\n+\t* gcc.target/i386/sse-23.c: Ditto.\n+\t* gcc.target/i386/funcspec-56.inc: Add new target attribute.\n+\t* lib/target-supports.exp\n+\t(check_effective_target_avxvnniint8): New.\n+\t* gcc.target/i386/avxvnniint8-1.c: Ditto.\n+\t* gcc.target/i386/avxvnniint8-vpdpbssd-2.c: Ditto.\n+\t* gcc.target/i386/avxvnniint8-vpdpbssds-2.c: Ditto.\n+\t* gcc.target/i386/avxvnniint8-vpdpbsud-2.c: Ditto.\n+\t* gcc.target/i386/avxvnniint8-vpdpbsuds-2.c: Ditto.\n+\t* gcc.target/i386/avxvnniint8-vpdpbuud-2.c: Ditto.\n+\t* gcc.target/i386/avxvnniint8-vpdpbuuds-2.c: Ditto.\n+\n+2022-10-21  Hongyu Wang  <hongyu.wang@intel.com>\n+\n+\t* gcc.target/i386/avx-check.h: Add avxifma check.\n+\t* gcc.target/i386/avx512ifma-vpmaddhuq-1.c: Remane..\n+\t* gcc.target/i386/avx512ifma-vpmaddhuq-1a.c: To this.\n+\t* gcc.target/i386/avx512ifma-vpmaddluq-1.c: Ditto.\n+\t* gcc.target/i386/avx512ifma-vpmaddluq-1a.c: Ditto.\n+\t* gcc.target/i386/avx512ifma-vpmaddhuq-1b.c: New Test.\n+\t* gcc.target/i386/avx512ifma-vpmaddluq-1b.c: Ditto.\n+\t* gcc.target/i386/avx-ifma-1.c: Ditto.\n+\t* gcc.target/i386/avx-ifma-2.c: Ditto.\n+\t* gcc.target/i386/avx-ifma-3.c: Ditto.\n+\t* gcc.target/i386/avx-ifma-4.c: Ditto.\n+\t* gcc.target/i386/avx-ifma-5.c: Ditto.\n+\t* gcc.target/i386/avx-ifma-6.c: Ditto.\n+\t* gcc.target/i386/avx-ifma-vpmaddhuq-2.c: Ditto.\n+\t* gcc.target/i386/avx-ifma-vpmaddluq-2.c: Ditto.\n+\t* gcc.target/i386/sse-12.c: Add -mavxifma.\n+\t* gcc.target/i386/sse-13.c: Ditto.\n+\t* gcc.target/i386/sse-14.c: Ditto.\n+\t* gcc.target/i386/sse-22.c: Ditto.\n+\t* gcc.target/i386/sse-23.c: Ditto.\n+\t* g++.dg/other/i386-2.C: Ditto.\n+\t* g++.dg/other/i386-3.C: Ditto.\n+\t* gcc.target/i386/funcspec-56.inc: Add new target attribute.\n+\t* lib/target-supports.exp\n+\t(check_effective_target_avxifma): New.\n+\n 2022-10-20  Harald Anlauf  <anlauf@gmx.de>\n \t    Steven G. Kargl  <kargl@gcc.gnu.org>\n "}, {"sha": "ed0c023f867530c8efc0dedf519767f95dbfa734", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1043971957af092e265cc4553b2382398d7308ae/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1043971957af092e265cc4553b2382398d7308ae/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=1043971957af092e265cc4553b2382398d7308ae", "patch": "@@ -1,3 +1,10 @@\n+2022-10-21  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\tPR tree-optimization/107195\n+\tPR target/107344\n+\t* testsuite/libgomp.oacc-c-c++-common/nvptx-sese-1.c: Restore SESE\n+\tregions checking.\n+\n 2022-10-20  Tobias Burnus  <tobias@codesourcery.com>\n \n \t* testsuite/lib/libgomp.exp (check_effective_target_offload_device_gcn):"}, {"sha": "b668b930f7445e088d587607fa5c728b937b19ce", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1043971957af092e265cc4553b2382398d7308ae/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1043971957af092e265cc4553b2382398d7308ae/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=1043971957af092e265cc4553b2382398d7308ae", "patch": "@@ -1,3 +1,16 @@\n+2022-10-21  Arsen Arsenovi\u0107  <arsen@aarsen.me>\n+\n+\t* acinclude.m4: Default hosted to off if building without\n+\theaders and without newlib.\n+\t* configure: Regenerate.\n+\n+2022-10-21  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/mofunc_impl.h (move_only_function::__param_t):\n+\tUse __is_scalar instead of is_trivially_copyable.\n+\t* testsuite/20_util/move_only_function/call.cc: Check parameters\n+\tinvolving incomplete types.\n+\n 2022-10-20  Patrick Palka  <ppalka@redhat.com>\n \n \t* include/std/charconv (__detail::__from_chars_alnum_to_val_table):"}]}