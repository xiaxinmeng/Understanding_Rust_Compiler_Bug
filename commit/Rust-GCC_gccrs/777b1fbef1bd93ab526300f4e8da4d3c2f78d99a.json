{"sha": "777b1fbef1bd93ab526300f4e8da4d3c2f78d99a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzc3YjFmYmVmMWJkOTNhYjUyNjMwMGY0ZThkYTRkM2MyZjc4ZDk5YQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2008-09-02T19:28:34Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2008-09-02T19:28:34Z"}, "message": "alpha.c (va_list_skip_additions, [...]): Tuplify.\n\n\t* config/alpha/alpha.c (va_list_skip_additions,\n\talpha_stdarg_optimize_hook, alpha_gimplify_va_arg_1): Tuplify.\n\t(alpha_gimplify_va_arg): Call unshare_expr on second use of\n\toffset_field.\n\nFrom-SVN: r139909", "tree": {"sha": "78d1a5e738ca5ff23fd4ef666bd9d2e136ffef82", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/78d1a5e738ca5ff23fd4ef666bd9d2e136ffef82"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/777b1fbef1bd93ab526300f4e8da4d3c2f78d99a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/777b1fbef1bd93ab526300f4e8da4d3c2f78d99a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/777b1fbef1bd93ab526300f4e8da4d3c2f78d99a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/777b1fbef1bd93ab526300f4e8da4d3c2f78d99a/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "833ee764e77be266b6383feb9fd6cabf40a539b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/833ee764e77be266b6383feb9fd6cabf40a539b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/833ee764e77be266b6383feb9fd6cabf40a539b8"}], "stats": {"total": 201, "additions": 124, "deletions": 77}, "files": [{"sha": "d89274fbcc3b24ddfd74f3737cad1fda44c57a46", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/777b1fbef1bd93ab526300f4e8da4d3c2f78d99a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/777b1fbef1bd93ab526300f4e8da4d3c2f78d99a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=777b1fbef1bd93ab526300f4e8da4d3c2f78d99a", "patch": "@@ -1,5 +1,10 @@\n 2008-09-02  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* config/alpha/alpha.c (va_list_skip_additions,\n+\talpha_stdarg_optimize_hook, alpha_gimplify_va_arg_1): Tuplify.\n+\t(alpha_gimplify_va_arg): Call unshare_expr on second use of\n+\toffset_field.\n+\n \tPR tree-optimization/36766\n \t* tree-cfg.c (gimple_purge_all_dead_eh_edges): Do nothing\n \tfor already removed basic blocks."}, {"sha": "a4d3bf1f1500c2b3c0ec36a57264c9c58b75ffb0", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 119, "deletions": 77, "changes": 196, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/777b1fbef1bd93ab526300f4e8da4d3c2f78d99a/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/777b1fbef1bd93ab526300f4e8da4d3c2f78d99a/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=777b1fbef1bd93ab526300f4e8da4d3c2f78d99a", "patch": "@@ -5803,38 +5803,34 @@ alpha_build_builtin_va_list (void)\n /* Helper function for alpha_stdarg_optimize_hook.  Skip over casts\n    and constant additions.  */\n \n-static tree\n+static gimple\n va_list_skip_additions (tree lhs)\n {\n-  tree rhs, stmt;\n-\n-  if (TREE_CODE (lhs) != SSA_NAME)\n-    return lhs;\n+  gimple stmt;\n \n   for (;;)\n     {\n+      enum tree_code code;\n+\n       stmt = SSA_NAME_DEF_STMT (lhs);\n \n-      if (TREE_CODE (stmt) == PHI_NODE)\n+      if (gimple_code (stmt) == GIMPLE_PHI)\n \treturn stmt;\n \n-      if (TREE_CODE (stmt) != MODIFY_EXPR\n-\t  || TREE_OPERAND (stmt, 0) != lhs)\n-\treturn lhs;\n-\n-      rhs = TREE_OPERAND (stmt, 1);\n-      if (TREE_CODE (rhs) == WITH_SIZE_EXPR)\n-\trhs = TREE_OPERAND (rhs, 0);\n+      if (!is_gimple_assign (stmt)\n+\t  || gimple_assign_lhs (stmt) != lhs)\n+\treturn NULL;\n \n-      if (((!CONVERT_EXPR_P (rhs))\n-\t   && ((TREE_CODE (rhs) != PLUS_EXPR\n-\t\t&& TREE_CODE (rhs) != POINTER_PLUS_EXPR)\n-\t       || TREE_CODE (TREE_OPERAND (rhs, 1)) != INTEGER_CST\n-\t       || !host_integerp (TREE_OPERAND (rhs, 1), 1)))\n-\t  || TREE_CODE (TREE_OPERAND (rhs, 0)) != SSA_NAME)\n-\treturn rhs;\n+      if (TREE_CODE (gimple_assign_rhs1 (stmt)) != SSA_NAME)\n+\treturn stmt;\n+      code = gimple_assign_rhs_code (stmt);\n+      if (!CONVERT_EXPR_CODE_P (code)\n+\t  && ((code != PLUS_EXPR && code != POINTER_PLUS_EXPR)\n+\t      || TREE_CODE (gimple_assign_rhs2 (stmt)) != INTEGER_CST\n+\t      || !host_integerp (gimple_assign_rhs2 (stmt), 1)))\n+\treturn stmt;\n \n-      lhs = TREE_OPERAND (rhs, 0);\n+      lhs = gimple_assign_rhs1 (stmt);\n     }\n }\n \n@@ -5859,36 +5855,49 @@ va_list_skip_additions (tree lhs)\n static bool\n alpha_stdarg_optimize_hook (struct stdarg_info *si, const_gimple stmt)\n {\n-  tree base, offset, arg1, arg2;\n+  tree base, offset, rhs;\n   int offset_arg = 1;\n+  gimple base_stmt;\n \n-#if 1\n-  /* FIXME tuples.  */\n-  (void) si;\n-  (void) stmt;\n-  return false;\n-#else\n+  if (get_gimple_rhs_class (gimple_assign_rhs_code (stmt))\n+      != GIMPLE_SINGLE_RHS)\n+    return false;\n+\n+  rhs = gimple_assign_rhs1 (stmt);\n   while (handled_component_p (rhs))\n     rhs = TREE_OPERAND (rhs, 0);\n   if (TREE_CODE (rhs) != INDIRECT_REF\n       || TREE_CODE (TREE_OPERAND (rhs, 0)) != SSA_NAME)\n     return false;\n \n-  lhs = va_list_skip_additions (TREE_OPERAND (rhs, 0));\n-  if (lhs == NULL_TREE\n-      || TREE_CODE (lhs) != POINTER_PLUS_EXPR)\n+  stmt = va_list_skip_additions (TREE_OPERAND (rhs, 0));\n+  if (stmt == NULL\n+      || !is_gimple_assign (stmt)\n+      || gimple_assign_rhs_code (stmt) != POINTER_PLUS_EXPR)\n     return false;\n \n-  base = TREE_OPERAND (lhs, 0);\n+  base = gimple_assign_rhs1 (stmt);\n   if (TREE_CODE (base) == SSA_NAME)\n-    base = va_list_skip_additions (base);\n+    {\n+      base_stmt = va_list_skip_additions (base);\n+      if (base_stmt\n+\t  && is_gimple_assign (base_stmt)\n+\t  && gimple_assign_rhs_code (base_stmt) == COMPONENT_REF)\n+\tbase = gimple_assign_rhs1 (base_stmt);\n+    }\n \n   if (TREE_CODE (base) != COMPONENT_REF\n       || TREE_OPERAND (base, 1) != TYPE_FIELDS (va_list_type_node))\n     {\n-      base = TREE_OPERAND (lhs, 0);\n+      base = gimple_assign_rhs2 (stmt);\n       if (TREE_CODE (base) == SSA_NAME)\n-\tbase = va_list_skip_additions (base);\n+\t{\n+\t  base_stmt = va_list_skip_additions (base);\n+\t  if (base_stmt\n+\t      && is_gimple_assign (base_stmt)\n+\t      && gimple_assign_rhs_code (base_stmt) == COMPONENT_REF)\n+\t    base = gimple_assign_rhs1 (base_stmt);\n+\t}\n \n       if (TREE_CODE (base) != COMPONENT_REF\n \t  || TREE_OPERAND (base, 1) != TYPE_FIELDS (va_list_type_node))\n@@ -5902,55 +5911,88 @@ alpha_stdarg_optimize_hook (struct stdarg_info *si, const_gimple stmt)\n       || !bitmap_bit_p (si->va_list_vars, DECL_UID (base)))\n     return false;\n \n-  offset = TREE_OPERAND (lhs, offset_arg);\n+  offset = gimple_op (stmt, 1 + offset_arg);\n   if (TREE_CODE (offset) == SSA_NAME)\n-    offset = va_list_skip_additions (offset);\n-\n-  if (TREE_CODE (offset) == PHI_NODE)\n     {\n-      HOST_WIDE_INT sub;\n-\n-      if (PHI_NUM_ARGS (offset) != 2)\n-\tgoto escapes;\n+      gimple offset_stmt = va_list_skip_additions (offset);\n \n-      arg1 = va_list_skip_additions (PHI_ARG_DEF (offset, 0));\n-      arg2 = va_list_skip_additions (PHI_ARG_DEF (offset, 1));\n-      if (TREE_CODE (arg2) != MINUS_EXPR && TREE_CODE (arg2) != PLUS_EXPR)\n+      if (offset_stmt\n+\t  && gimple_code (offset_stmt) == GIMPLE_PHI)\n \t{\n-\t  tree tem = arg1;\n-\t  arg1 = arg2;\n-\t  arg2 = tem;\n+\t  HOST_WIDE_INT sub;\n+\t  gimple arg1_stmt, arg2_stmt;\n+\t  tree arg1, arg2;\n+\t  enum tree_code code1, code2;\n \n-\t  if (TREE_CODE (arg2) != MINUS_EXPR && TREE_CODE (arg2) != PLUS_EXPR)\n+\t  if (gimple_phi_num_args (offset_stmt) != 2)\n \t    goto escapes;\n-\t}\n-      if (!host_integerp (TREE_OPERAND (arg2, 1), 0))\n-\tgoto escapes;\n \n-      sub = tree_low_cst (TREE_OPERAND (arg2, 1), 0);\n-      if (TREE_CODE (arg2) == MINUS_EXPR)\n-\tsub = -sub;\n-      if (sub < -48 || sub > -32)\n-\tgoto escapes;\n+\t  arg1_stmt\n+\t    = va_list_skip_additions (gimple_phi_arg_def (offset_stmt, 0));\n+\t  arg2_stmt\n+\t    = va_list_skip_additions (gimple_phi_arg_def (offset_stmt, 1));\n+\t  if (arg1_stmt == NULL\n+\t      || !is_gimple_assign (arg1_stmt)\n+\t      || arg2_stmt == NULL\n+\t      || !is_gimple_assign (arg2_stmt))\n+\t    goto escapes;\n \n-      arg2 = va_list_skip_additions (TREE_OPERAND (arg2, 0));\n-      if (arg1 != arg2)\n-\tgoto escapes;\n+\t  code1 = gimple_assign_rhs_code (arg1_stmt);\n+\t  code2 = gimple_assign_rhs_code (arg2_stmt);\n+\t  if (code1 == COMPONENT_REF\n+\t      && (code2 == MINUS_EXPR || code2 == PLUS_EXPR))\n+\t    /* Do nothing.  */;\n+\t  else if (code2 == COMPONENT_REF\n+\t\t   && (code1 == MINUS_EXPR || code1 == PLUS_EXPR))\n+\t    {\n+\t      gimple tem = arg1_stmt;\n+\t      code2 = code1;\n+\t      arg1_stmt = arg2_stmt;\n+\t      arg2_stmt = tem;\n+\t    }\n+\t  else\n+\t    goto escapes;\n \n-      if (TREE_CODE (arg1) == SSA_NAME)\n-\targ1 = va_list_skip_additions (arg1);\n+\t  if (!host_integerp (gimple_assign_rhs2 (arg2_stmt), 0))\n+\t    goto escapes;\n \n-      if (TREE_CODE (arg1) != COMPONENT_REF\n-\t  || TREE_OPERAND (arg1, 1) != va_list_gpr_counter_field\n-\t  || get_base_address (arg1) != base)\n-\tgoto escapes;\n+\t  sub = tree_low_cst (gimple_assign_rhs2 (arg2_stmt), 0);\n+\t  if (code2 == MINUS_EXPR)\n+\t    sub = -sub;\n+\t  if (sub < -48 || sub > -32)\n+\t    goto escapes;\n \n-      /* Need floating point regs.  */\n-      cfun->va_list_fpr_size |= 2;\n+\t  arg1 = gimple_assign_rhs1 (arg1_stmt);\n+\t  arg2 = gimple_assign_rhs1 (arg2_stmt);\n+\t  if (TREE_CODE (arg2) == SSA_NAME)\n+\t    {\n+\t      arg2_stmt = va_list_skip_additions (arg2);\n+\t      if (arg2_stmt == NULL\n+\t\t  || !is_gimple_assign (arg2_stmt)\n+\t\t  || gimple_assign_rhs_code (arg2_stmt) != COMPONENT_REF)\n+\t\tgoto escapes;\n+\t      arg2 = gimple_assign_rhs1 (arg2_stmt);\n+\t    }\n+\t  if (arg1 != arg2)\n+\t    goto escapes;\n+\n+\t  if (TREE_CODE (arg1) != COMPONENT_REF\n+\t      || TREE_OPERAND (arg1, 1) != va_list_gpr_counter_field\n+\t      || get_base_address (arg1) != base)\n+\t    goto escapes;\n+\n+\t  /* Need floating point regs.  */\n+\t  cfun->va_list_fpr_size |= 2;\n+\t  return false;\n+\t}\n+      if (offset_stmt\n+\t  && is_gimple_assign (offset_stmt)\n+\t  && gimple_assign_rhs_code (offset_stmt) == COMPONENT_REF)\n+\toffset = gimple_assign_rhs1 (offset_stmt);\n     }\n-  else if (TREE_CODE (offset) != COMPONENT_REF\n-\t   || TREE_OPERAND (offset, 1) != va_list_gpr_counter_field\n-\t   || get_base_address (offset) != base)\n+  if (TREE_CODE (offset) != COMPONENT_REF\n+      || TREE_OPERAND (offset, 1) != va_list_gpr_counter_field\n+      || get_base_address (offset) != base)\n     goto escapes;\n   else\n     /* Need general regs.  */\n@@ -5960,7 +6002,6 @@ alpha_stdarg_optimize_hook (struct stdarg_info *si, const_gimple stmt)\n escapes:\n   si->va_list_escapes = true;\n   return false;\n-#endif\n }\n #endif\n \n@@ -6126,10 +6167,11 @@ alpha_va_start (tree valist, rtx nextarg ATTRIBUTE_UNUSED)\n }\n \n static tree\n-alpha_gimplify_va_arg_1 (tree type, tree base, gimple_seq offset,\n+alpha_gimplify_va_arg_1 (tree type, tree base, tree offset,\n \t\t\t gimple_seq *pre_p)\n {\n-  tree type_size, ptr_type, addend, t, addr, internal_post;\n+  tree type_size, ptr_type, addend, t, addr;\n+  gimple_seq internal_post;\n \n   /* If the type could not be passed in registers, skip the block\n      reserved for the registers.  */\n@@ -6177,7 +6219,7 @@ alpha_gimplify_va_arg_1 (tree type, tree base, gimple_seq offset,\n \t         fold_convert (sizetype, addend));\n   internal_post = NULL;\n   gimplify_expr (&addr, pre_p, &internal_post, is_gimple_val, fb_rvalue);\n-  append_to_statement_list (internal_post, pre_p);\n+  gimple_seq_add_seq (pre_p, internal_post);\n \n   /* Update the offset field.  */\n   type_size = TYPE_SIZE_UNIT (TYPE_MAIN_VARIANT (type));\n@@ -6230,7 +6272,7 @@ alpha_gimplify_va_arg (tree valist, tree type, gimple_seq *pre_p,\n   r = alpha_gimplify_va_arg_1 (type, base, offset, pre_p);\n \n   /* Stuff the offset temporary back into its field.  */\n-  gimplify_assign (offset_field,\n+  gimplify_assign (unshare_expr (offset_field),\n \t\t   fold_convert (TREE_TYPE (offset_field), offset), pre_p);\n \n   if (indirect)"}]}