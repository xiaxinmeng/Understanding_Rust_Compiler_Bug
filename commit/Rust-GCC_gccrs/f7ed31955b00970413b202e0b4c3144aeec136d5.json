{"sha": "f7ed31955b00970413b202e0b4c3144aeec136d5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjdlZDMxOTU1YjAwOTcwNDEzYjIwMmUwYjRjMzE0NGFlZWMxMzZkNQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-12-21T07:02:20Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-12-21T07:02:20Z"}, "message": "poly_int: build_ref_for_offset\n\nThis patch changes the offset parameter to build_ref_for_offset\nfrom HOST_WIDE_INT to poly_int64.\n\n2017-12-21  Richard Sandiford  <richard.sandiford@linaro.org>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\ngcc/\n\t* ipa-prop.h (build_ref_for_offset): Take the offset as a poly_int64\n\trather than a HOST_WIDE_INT.\n\t* tree-sra.c (build_ref_for_offset): Likewise.\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r255931", "tree": {"sha": "380b5c0912af6eebd8cb2079f0f03a9f9086678d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/380b5c0912af6eebd8cb2079f0f03a9f9086678d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f7ed31955b00970413b202e0b4c3144aeec136d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7ed31955b00970413b202e0b4c3144aeec136d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7ed31955b00970413b202e0b4c3144aeec136d5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7ed31955b00970413b202e0b4c3144aeec136d5/comments", "author": null, "committer": null, "parents": [{"sha": "aca52e6f8d29064f4712e5f3f4429a36f918f099", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aca52e6f8d29064f4712e5f3f4429a36f918f099", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aca52e6f8d29064f4712e5f3f4429a36f918f099"}], "stats": {"total": 27, "additions": 17, "deletions": 10}, "files": [{"sha": "d206c340fb17697cf8eb908a3c749a66dc963a58", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7ed31955b00970413b202e0b4c3144aeec136d5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7ed31955b00970413b202e0b4c3144aeec136d5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f7ed31955b00970413b202e0b4c3144aeec136d5", "patch": "@@ -1,3 +1,11 @@\n+2017-12-21  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* ipa-prop.h (build_ref_for_offset): Take the offset as a poly_int64\n+\trather than a HOST_WIDE_INT.\n+\t* tree-sra.c (build_ref_for_offset): Likewise.\n+\n 2017-12-21  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "2b3ea68c5fb3415728bf966c81fc9b44c5184dc3", "filename": "gcc/ipa-prop.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7ed31955b00970413b202e0b4c3144aeec136d5/gcc%2Fipa-prop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7ed31955b00970413b202e0b4c3144aeec136d5/gcc%2Fipa-prop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.h?ref=f7ed31955b00970413b202e0b4c3144aeec136d5", "patch": "@@ -785,7 +785,7 @@ void ipa_release_body_info (struct ipa_func_body_info *);\n tree ipa_get_callee_param_type (struct cgraph_edge *e, int i);\n \n /* From tree-sra.c:  */\n-tree build_ref_for_offset (location_t, tree, HOST_WIDE_INT, bool, tree,\n+tree build_ref_for_offset (location_t, tree, poly_int64, bool, tree,\n \t\t\t   gimple_stmt_iterator *, bool);\n \n /* In ipa-cp.c  */"}, {"sha": "d7112a812dc8bb4f6603a9a6aa6cf9d86794d3e2", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7ed31955b00970413b202e0b4c3144aeec136d5/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7ed31955b00970413b202e0b4c3144aeec136d5/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=f7ed31955b00970413b202e0b4c3144aeec136d5", "patch": "@@ -1706,7 +1706,7 @@ make_fancy_name (tree expr)\n    of handling bitfields.  */\n \n tree\n-build_ref_for_offset (location_t loc, tree base, HOST_WIDE_INT offset,\n+build_ref_for_offset (location_t loc, tree base, poly_int64 offset,\n \t\t      bool reverse, tree exp_type, gimple_stmt_iterator *gsi,\n \t\t      bool insert_after)\n {\n@@ -1724,7 +1724,7 @@ build_ref_for_offset (location_t loc, tree base, HOST_WIDE_INT offset,\n \t\t\t\t     TYPE_QUALS (exp_type)\n \t\t\t\t     | ENCODE_QUAL_ADDR_SPACE (as));\n \n-  gcc_checking_assert (offset % BITS_PER_UNIT == 0);\n+  poly_int64 byte_offset = exact_div (offset, BITS_PER_UNIT);\n   get_object_alignment_1 (base, &align, &misalign);\n   base = get_addr_base_and_unit_offset (base, &base_offset);\n \n@@ -1746,27 +1746,26 @@ build_ref_for_offset (location_t loc, tree base, HOST_WIDE_INT offset,\n       else\n \tgsi_insert_before (gsi, stmt, GSI_SAME_STMT);\n \n-      off = build_int_cst (reference_alias_ptr_type (prev_base),\n-\t\t\t   offset / BITS_PER_UNIT);\n+      off = build_int_cst (reference_alias_ptr_type (prev_base), byte_offset);\n       base = tmp;\n     }\n   else if (TREE_CODE (base) == MEM_REF)\n     {\n       off = build_int_cst (TREE_TYPE (TREE_OPERAND (base, 1)),\n-\t\t\t   base_offset + offset / BITS_PER_UNIT);\n+\t\t\t   base_offset + byte_offset);\n       off = int_const_binop (PLUS_EXPR, TREE_OPERAND (base, 1), off);\n       base = unshare_expr (TREE_OPERAND (base, 0));\n     }\n   else\n     {\n       off = build_int_cst (reference_alias_ptr_type (prev_base),\n-\t\t\t   base_offset + offset / BITS_PER_UNIT);\n+\t\t\t   base_offset + byte_offset);\n       base = build_fold_addr_expr (unshare_expr (base));\n     }\n \n-  misalign = (misalign + offset) & (align - 1);\n-  if (misalign != 0)\n-    align = least_bit_hwi (misalign);\n+  unsigned int align_bound = known_alignment (misalign + offset);\n+  if (align_bound != 0)\n+    align = MIN (align, align_bound);\n   if (align != TYPE_ALIGN (exp_type))\n     exp_type = build_aligned_type (exp_type, align);\n "}]}