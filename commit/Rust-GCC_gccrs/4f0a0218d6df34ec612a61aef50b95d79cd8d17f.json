{"sha": "4f0a0218d6df34ec612a61aef50b95d79cd8d17f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGYwYTAyMThkNmRmMzRlYzYxMmE2MWFlZjUwYjk1ZDc5Y2Q4ZDE3Zg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-12-01T14:24:54Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-12-01T14:24:54Z"}, "message": "re PR tree-optimization/68379 (BB vectorization: definition in block 13 follows the use for SSA_NAME)\n\n2015-12-01  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/68379\n\t* tree-vect-stmts.c (vectorizable_load): For BB vectorization\n\talways base loads on the first used DR of a group.\n\t* tree-vect-data-refs.c (vect_slp_analyze_and_verify_node_alignment):\n\tCompute alignment of the first scalar element unconditionally.\n\n\t* gcc.dg/torture/pr68379.c: New testcase.\n\t* gfortran.dg/pr68379-1.f90: Likewise.\n\t* gfortran.dg/pr68379-2.f: Likewise.\n\nFrom-SVN: r231111", "tree": {"sha": "25b658c07a9bfa509d5726fe009464b9133a2068", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25b658c07a9bfa509d5726fe009464b9133a2068"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4f0a0218d6df34ec612a61aef50b95d79cd8d17f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f0a0218d6df34ec612a61aef50b95d79cd8d17f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f0a0218d6df34ec612a61aef50b95d79cd8d17f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f0a0218d6df34ec612a61aef50b95d79cd8d17f/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2d3f4bf73cdb878c0fee25b962b6a80113d5d80e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d3f4bf73cdb878c0fee25b962b6a80113d5d80e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d3f4bf73cdb878c0fee25b962b6a80113d5d80e"}], "stats": {"total": 118, "additions": 116, "deletions": 2}, "files": [{"sha": "8c8718b2b304b1e0981db4a60b90db436fe00ec8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f0a0218d6df34ec612a61aef50b95d79cd8d17f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f0a0218d6df34ec612a61aef50b95d79cd8d17f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4f0a0218d6df34ec612a61aef50b95d79cd8d17f", "patch": "@@ -1,3 +1,11 @@\n+2015-12-01  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/68379\n+\t* tree-vect-stmts.c (vectorizable_load): For BB vectorization\n+\talways base loads on the first used DR of a group.\n+\t* tree-vect-data-refs.c (vect_slp_analyze_and_verify_node_alignment):\n+\tCompute alignment of the first scalar element unconditionally.\n+\n 2015-12-01  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/68590"}, {"sha": "e786fd887ed379534dca4febd119cb4a1328ed31", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f0a0218d6df34ec612a61aef50b95d79cd8d17f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f0a0218d6df34ec612a61aef50b95d79cd8d17f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4f0a0218d6df34ec612a61aef50b95d79cd8d17f", "patch": "@@ -1,3 +1,10 @@\n+2015-12-01  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/68379\n+\t* gcc.dg/torture/pr68379.c: New testcase.\n+\t* gfortran.dg/pr68379-1.f90: Likewise.\n+\t* gfortran.dg/pr68379-2.f: Likewise.\n+\n 2015-12-01  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \t* gcc.dg/pr46032.c: Add dg-require-effective-target fopenmp."}, {"sha": "6a3be7b5f5f2edd1b93c80c2479f1ec44978732d", "filename": "gcc/testsuite/gcc.dg/torture/pr68379.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f0a0218d6df34ec612a61aef50b95d79cd8d17f/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr68379.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f0a0218d6df34ec612a61aef50b95d79cd8d17f/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr68379.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr68379.c?ref=4f0a0218d6df34ec612a61aef50b95d79cd8d17f", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+\n+int a, b[3], c[3][5];\n+\n+void\n+fn1 ()\n+{\n+  int e;\n+  for (a = 2; a >= 0; a--)\n+    for (e = 0; e < 4; e++)\n+      c[a][e] = b[a];\n+}"}, {"sha": "2deaca03219d2b7e2113bb5d65bd71f5729f0191", "filename": "gcc/testsuite/gfortran.dg/pr68379-1.f90", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f0a0218d6df34ec612a61aef50b95d79cd8d17f/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr68379-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f0a0218d6df34ec612a61aef50b95d79cd8d17f/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr68379-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr68379-1.f90?ref=4f0a0218d6df34ec612a61aef50b95d79cd8d17f", "patch": "@@ -0,0 +1,35 @@\n+! { dg-do compile }\n+! { dg-options \"-O3\" }\n+MODULE qs_efield_berry\n+  TYPE cp_error_type\n+  END TYPE\n+  INTEGER, PARAMETER :: dp=8\n+  TYPE qs_energy_type\n+    REAL(KIND=dp), POINTER :: efield\n+  END TYPE\n+  TYPE qs_environment_type\n+  END TYPE\n+  INTERFACE \n+    SUBROUTINE foo(qs_env,energy,error)\n+       IMPORT \n+       TYPE(qs_environment_type), POINTER :: qs_env\n+       TYPE(cp_error_type)      :: error\n+       TYPE(qs_energy_type), POINTER   :: energy\n+    END SUBROUTINE\n+  END INTERFACE\n+CONTAINS\n+  SUBROUTINE qs_efield_mo_derivatives()\n+    TYPE(qs_environment_type), POINTER :: qs_env\n+    TYPE(cp_error_type)  :: error\n+    COMPLEX(dp)          ::   zi(3), zphase(3)\n+    REAL(dp)             :: ci(3)\n+    TYPE(qs_energy_type), POINTER      :: energy\n+    CALL foo(qs_env, energy, error)\n+    zi = zi * zphase\n+    ci = AIMAG(LOG(zi))\n+    DO idir=1,3\n+       ener_field=ener_field+ci(idir)*fieldfac(idir)\n+    END DO\n+    energy%efield=ener_field\n+  END SUBROUTINE qs_efield_mo_derivatives\n+END MODULE qs_efield_berry"}, {"sha": "e26520e133b8fad9e19f06d918ac38d342149fce", "filename": "gcc/testsuite/gfortran.dg/pr68379-2.f", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f0a0218d6df34ec612a61aef50b95d79cd8d17f/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr68379-2.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f0a0218d6df34ec612a61aef50b95d79cd8d17f/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr68379-2.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr68379-2.f?ref=4f0a0218d6df34ec612a61aef50b95d79cd8d17f", "patch": "@@ -0,0 +1,24 @@\n+! { dg-do compile }\n+! { dg-additional-options \"-Ofast\" }\n+! { dg-additional-options \"-mavx\" { target x86_64-*-* i?86-*-* } }\n+\n+      SUBROUTINE PASSB4 (IDO,L1,CC,CH,WA1,WA2,WA3)\n+      IMPLICIT REAL(4) (A-H, O-Z)\n+      DIMENSION CC(IDO,4,L1), CH(IDO,L1,4), WA1(*), WA2(*), WA3(*)\n+  102 DO 104 K=1,L1\n+         DO 103 I=2,IDO,2\n+            TI1 = CC(I,1,K)-CC(I,3,K)\n+            TI2 = CC(I,1,K)+CC(I,3,K)\n+            TI3 = CC(I,2,K)+CC(I,4,K)\n+            TR2 = CC(I-1,1,K)+CC(I-1,3,K)\n+            TI4 = CC(I-1,2,K)-CC(I-1,4,K)\n+            TR3 = CC(I-1,2,K)+CC(I-1,4,K)\n+            CH(I-1,K,1) = TR2+TR3\n+            CH(I,K,1) = TI2+TI3\n+            CI4 = TI1-TI4\n+            CH(I-1,K,4) = CI4\n+            CH(I,K,4) = CI4\n+  103    CONTINUE\n+  104 CONTINUE\n+      RETURN\n+      END"}, {"sha": "b59b40cf8d53e054b1d110c5bb8d58078d5003eb", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f0a0218d6df34ec612a61aef50b95d79cd8d17f/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f0a0218d6df34ec612a61aef50b95d79cd8d17f/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=4f0a0218d6df34ec612a61aef50b95d79cd8d17f", "patch": "@@ -2102,11 +2102,16 @@ vect_slp_analyze_and_verify_node_alignment (slp_tree node)\n      the node is permuted in which case we start from the first\n      element in the group.  */\n   gimple *first_stmt = SLP_TREE_SCALAR_STMTS (node)[0];\n+  data_reference_p first_dr = STMT_VINFO_DATA_REF (vinfo_for_stmt (first_stmt));\n   if (SLP_TREE_LOAD_PERMUTATION (node).exists ())\n     first_stmt = GROUP_FIRST_ELEMENT (vinfo_for_stmt (first_stmt));\n \n   data_reference_p dr = STMT_VINFO_DATA_REF (vinfo_for_stmt (first_stmt));\n   if (! vect_compute_data_ref_alignment (dr)\n+      /* For creating the data-ref pointer we need alignment of the\n+\t first element anyway.  */\n+      || (dr != first_dr\n+\t  && ! vect_compute_data_ref_alignment (first_dr))\n       || ! verify_data_ref_alignment (dr))\n     {\n       if (dump_enabled_p ())"}, {"sha": "db46eec46f288642d9cdb61106d24a2f8219ef2b", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f0a0218d6df34ec612a61aef50b95d79cd8d17f/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f0a0218d6df34ec612a61aef50b95d79cd8d17f/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=4f0a0218d6df34ec612a61aef50b95d79cd8d17f", "patch": "@@ -6148,6 +6148,7 @@ vectorizable_load (gimple *stmt, gimple_stmt_iterator *gsi, gimple **vec_stmt,\n   bool grouped_load = false;\n   bool load_lanes_p = false;\n   gimple *first_stmt;\n+  gimple *first_stmt_for_drptr = NULL;\n   bool inv_p;\n   bool negative = false;\n   bool compute_in_loop = false;\n@@ -6751,10 +6752,14 @@ vectorizable_load (gimple *stmt, gimple_stmt_iterator *gsi, gimple **vec_stmt,\n   if (grouped_load)\n     {\n       first_stmt = GROUP_FIRST_ELEMENT (stmt_info);\n-      /* For BB vectorization we directly vectorize a subchain\n+      /* For SLP vectorization we directly vectorize a subchain\n          without permutation.  */\n       if (slp && ! SLP_TREE_LOAD_PERMUTATION (slp_node).exists ())\n-        first_stmt = SLP_TREE_SCALAR_STMTS (slp_node)[0];\n+\tfirst_stmt = SLP_TREE_SCALAR_STMTS (slp_node)[0];\n+      /* For BB vectorization always use the first stmt to base\n+\t the data ref pointer on.  */\n+      if (bb_vinfo)\n+\tfirst_stmt_for_drptr = SLP_TREE_SCALAR_STMTS (slp_node)[0];\n \n       /* Check if the chain of loads is already vectorized.  */\n       if (STMT_VINFO_VEC_STMT (vinfo_for_stmt (first_stmt))\n@@ -6966,6 +6971,24 @@ vectorizable_load (gimple *stmt, gimple_stmt_iterator *gsi, gimple **vec_stmt,\n \t\t\t\t\t      (DR_REF (first_dr)), 0);\n \t      inv_p = false;\n \t    }\n+\t  else if (first_stmt_for_drptr\n+\t\t   && first_stmt != first_stmt_for_drptr)\n+\t    {\n+\t      dataref_ptr\n+\t\t= vect_create_data_ref_ptr (first_stmt_for_drptr, aggr_type,\n+\t\t\t\t\t    at_loop, offset, &dummy, gsi,\n+\t\t\t\t\t    &ptr_incr, simd_lane_access_p,\n+\t\t\t\t\t    &inv_p, byte_offset);\n+\t      /* Adjust the pointer by the difference to first_stmt.  */\n+\t      data_reference_p ptrdr\n+\t\t= STMT_VINFO_DATA_REF (vinfo_for_stmt (first_stmt_for_drptr));\n+\t      tree diff = fold_convert (sizetype,\n+\t\t\t\t\tsize_binop (MINUS_EXPR,\n+\t\t\t\t\t\t    DR_INIT (first_dr),\n+\t\t\t\t\t\t    DR_INIT (ptrdr)));\n+\t      dataref_ptr = bump_vector_ptr (dataref_ptr, ptr_incr, gsi,\n+\t\t\t\t\t     stmt, diff);\n+\t    }\n \t  else\n \t    dataref_ptr\n \t      = vect_create_data_ref_ptr (first_stmt, aggr_type, at_loop,"}]}