{"sha": "bd9513ea36c626d301024efb0d0eebd43ca2489a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmQ5NTEzZWEzNmM2MjZkMzAxMDI0ZWZiMGQwZWViZDQzY2EyNDg5YQ==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2008-05-01T15:03:57Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2008-05-01T15:03:57Z"}, "message": "i386.c (ix86_builtin_type): Add V2DI_FTYPE_V2DI_V16QI...\n\n2008-05-01  H.J. Lu  <hongjiu.lu@intel.com>\n\n\t* config/i386/i386.c (ix86_builtin_type): Add\n\tV2DI_FTYPE_V2DI_V16QI, V2DI_FTYPE_V2DI_UINT_UINT and\n\tV2DI_FTYPE_V2DI_V2DI_UINT_UINT.\n\t(bdesc_args): Add SSE4a builtins.\n\t(ix86_init_mmx_sse_builtins): Updated.\n\t(ix86_expand_args_builtin): Likewise.\n\t(ix86_expand_builtin): Likewise.\n\nFrom-SVN: r134854", "tree": {"sha": "a80653232ff8767a32aeb834dedbb5146bac00cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a80653232ff8767a32aeb834dedbb5146bac00cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd9513ea36c626d301024efb0d0eebd43ca2489a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd9513ea36c626d301024efb0d0eebd43ca2489a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd9513ea36c626d301024efb0d0eebd43ca2489a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd9513ea36c626d301024efb0d0eebd43ca2489a/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "858e5e797f9b995e0d6d3a092d5c0719f8a263c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/858e5e797f9b995e0d6d3a092d5c0719f8a263c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/858e5e797f9b995e0d6d3a092d5c0719f8a263c9"}], "stats": {"total": 185, "additions": 67, "deletions": 118}, "files": [{"sha": "525bdd313f794527ccd0dd71a466a227ebbf27da", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd9513ea36c626d301024efb0d0eebd43ca2489a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd9513ea36c626d301024efb0d0eebd43ca2489a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bd9513ea36c626d301024efb0d0eebd43ca2489a", "patch": "@@ -1,3 +1,13 @@\n+2008-05-01  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* config/i386/i386.c (ix86_builtin_type): Add\n+\tV2DI_FTYPE_V2DI_V16QI, V2DI_FTYPE_V2DI_UINT_UINT and\n+\tV2DI_FTYPE_V2DI_V2DI_UINT_UINT.\n+\t(bdesc_args): Add SSE4a builtins.\n+\t(ix86_init_mmx_sse_builtins): Updated.\n+\t(ix86_expand_args_builtin): Likewise.\n+\t(ix86_expand_builtin): Likewise.\n+\n 2008-05-01  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* config/i386/i386.c (ix86_builtin_type): Add"}, {"sha": "0686f58fcd2313d2a038484d4765f95f2ca4c891", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 57, "deletions": 118, "changes": 175, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd9513ea36c626d301024efb0d0eebd43ca2489a/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd9513ea36c626d301024efb0d0eebd43ca2489a/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=bd9513ea36c626d301024efb0d0eebd43ca2489a", "patch": "@@ -18062,6 +18062,7 @@ enum ix86_builtin_type\n   V2DI_FTYPE_V2DI_V2DI_COUNT,\n   V2DI_FTYPE_V16QI_V16QI,\n   V2DI_FTYPE_V4SI_V4SI,\n+  V2DI_FTYPE_V2DI_V16QI,\n   V2DI_FTYPE_V2DF_V2DF,\n   V2DI_FTYPE_V2DI_SI_COUNT,\n   V2SI_FTYPE_V2SI_V2SI,\n@@ -18097,6 +18098,8 @@ enum ix86_builtin_type\n   V2DI_FTYPE_V2DI_V2DI_INT,\n   V2DI2TI_FTYPE_V2DI2TI_V2DI2TI_INT,\n   V2DF_FTYPE_V2DF_V2DF_INT,\n+  V2DI_FTYPE_V2DI_UINT_UINT,\n+  V2DI_FTYPE_V2DI_V2DI_UINT_UINT,\n   DI_FTYPE_DI_DI_INT\n };\n \n@@ -18544,6 +18547,12 @@ static const struct builtin_description bdesc_args[] =\n   /* SSE4.2 */\n   { OPTION_MASK_ISA_SSE4_2, CODE_FOR_sse4_2_gtv2di3, \"__builtin_ia32_pcmpgtq\", IX86_BUILTIN_PCMPGTQ, UNKNOWN, (int) V2DI_FTYPE_V2DI_V2DI },\n \n+  /* SSE4A */\n+  { OPTION_MASK_ISA_SSE4A, CODE_FOR_sse4a_extrqi, \"__builtin_ia32_extrqi\", IX86_BUILTIN_EXTRQI, UNKNOWN, (int) V2DI_FTYPE_V2DI_UINT_UINT },\n+  { OPTION_MASK_ISA_SSE4A, CODE_FOR_sse4a_extrq, \"__builtin_ia32_extrq\", IX86_BUILTIN_EXTRQ, UNKNOWN, (int) V2DI_FTYPE_V2DI_V16QI },\n+  { OPTION_MASK_ISA_SSE4A, CODE_FOR_sse4a_insertqi, \"__builtin_ia32_insertqi\", IX86_BUILTIN_INSERTQI, UNKNOWN, (int) V2DI_FTYPE_V2DI_V2DI_UINT_UINT },\n+  { OPTION_MASK_ISA_SSE4A, CODE_FOR_sse4a_insertq, \"__builtin_ia32_insertq\", IX86_BUILTIN_INSERTQ, UNKNOWN, (int) V2DI_FTYPE_V2DI_V2DI },\n+\n   /* AES */\n   { OPTION_MASK_ISA_SSE2, CODE_FOR_aeskeygenassist, 0, IX86_BUILTIN_AESKEYGENASSIST128, UNKNOWN, (int) V2DI_FTYPE_V2DI_INT },\n   { OPTION_MASK_ISA_SSE2, CODE_FOR_aesimc, 0, IX86_BUILTIN_AESIMC128, UNKNOWN, (int) V2DI_FTYPE_V2DI },\n@@ -19566,6 +19575,9 @@ ix86_init_mmx_sse_builtins (void)\n \tcase V2DI_FTYPE_V4SI_V4SI:\n \t  type = v2di_ftype_v4si_v4si;\n \t  break;\n+\tcase V2DI_FTYPE_V2DI_V16QI:\n+\t  type = v2di_ftype_v2di_v16qi;\n+\t  break;\n \tcase V2DI_FTYPE_V2DF_V2DF:\n \t  type = v2di_ftype_v2df_v2df;\n \t  break;\n@@ -19661,6 +19673,12 @@ ix86_init_mmx_sse_builtins (void)\n \tcase V2DF_FTYPE_V2DF_V2DF_INT:\n \t  type = v2df_ftype_v2df_v2df_int;\n \t  break;\n+\tcase V2DI_FTYPE_V2DI_UINT_UINT:\n+\t  type = v2di_ftype_v2di_unsigned_unsigned;\n+\t  break;\n+\tcase V2DI_FTYPE_V2DI_V2DI_UINT_UINT:\n+\t  type = v2di_ftype_v2di_v2di_unsigned_unsigned;\n+\t  break;\n \tcase DI_FTYPE_DI_DI_INT:\n \t  type = di_ftype_di_di_int;\n \t  break;\n@@ -19812,10 +19830,6 @@ ix86_init_mmx_sse_builtins (void)\n   /* AMDFAM10 SSE4A New built-ins  */\n   def_builtin (OPTION_MASK_ISA_SSE4A, \"__builtin_ia32_movntsd\", void_ftype_pdouble_v2df, IX86_BUILTIN_MOVNTSD);\n   def_builtin (OPTION_MASK_ISA_SSE4A, \"__builtin_ia32_movntss\", void_ftype_pfloat_v4sf, IX86_BUILTIN_MOVNTSS);\n-  def_builtin_const (OPTION_MASK_ISA_SSE4A, \"__builtin_ia32_extrqi\", v2di_ftype_v2di_unsigned_unsigned, IX86_BUILTIN_EXTRQI);\n-  def_builtin_const (OPTION_MASK_ISA_SSE4A, \"__builtin_ia32_extrq\", v2di_ftype_v2di_v16qi,  IX86_BUILTIN_EXTRQ);\n-  def_builtin_const (OPTION_MASK_ISA_SSE4A, \"__builtin_ia32_insertqi\", v2di_ftype_v2di_v2di_unsigned_unsigned, IX86_BUILTIN_INSERTQI);\n-  def_builtin_const (OPTION_MASK_ISA_SSE4A, \"__builtin_ia32_insertq\", v2di_ftype_v2di_v2di, IX86_BUILTIN_INSERTQ);\n \n   /* Access to the vec_init patterns.  */\n   ftype = build_function_type_list (V2SI_type_node, integer_type_node,\n@@ -20414,13 +20428,14 @@ ix86_expand_args_builtin (const struct builtin_description *d,\n {\n   rtx pat, real_target;\n   unsigned int i, nargs;\n+  unsigned int nargs_constant = 0;\n   int num_memory = 0;\n   struct\n     {\n       rtx op;\n       enum machine_mode mode;\n-    } args[3];\n-  bool last_arg_constant = false, last_arg_count = false;\n+    } args[4];\n+  bool last_arg_count = false;\n   enum insn_code icode = d->icode;\n   const struct insn_data *insn_p = &insn_data[icode];\n   enum machine_mode tmode = insn_p->operand[0].mode;\n@@ -20492,6 +20507,7 @@ ix86_expand_args_builtin (const struct builtin_description *d,\n     case V2DI_FTYPE_V2DI_V2DI:\n     case V2DI_FTYPE_V16QI_V16QI:\n     case V2DI_FTYPE_V4SI_V4SI:\n+    case V2DI_FTYPE_V2DI_V16QI:\n     case V2DI_FTYPE_V2DF_V2DF:\n     case V2SI_FTYPE_V2SI_V2SI:\n     case V2SI_FTYPE_V4HI_V4HI:\n@@ -20532,7 +20548,7 @@ ix86_expand_args_builtin (const struct builtin_description *d,\n     case V2DI2TI_FTYPE_V2DI2TI_INT:\n       nargs = 2;\n       convert = ti;\n-      last_arg_constant = true;\n+      nargs_constant = 1;\n       break;\n     case V8HI_FTYPE_V8HI_INT:\n     case V4SI_FTYPE_V4SI_INT:\n@@ -20541,7 +20557,7 @@ ix86_expand_args_builtin (const struct builtin_description *d,\n     case V2DI_FTYPE_V2DI_INT:\n     case V2DF_FTYPE_V2DF_INT:\n       nargs = 2;\n-      last_arg_constant = true;\n+      nargs_constant = 1;\n       break;\n     case V16QI_FTYPE_V16QI_V16QI_V16QI:\n     case V4SF_FTYPE_V4SF_V4SF_V4SF:\n@@ -20555,16 +20571,24 @@ ix86_expand_args_builtin (const struct builtin_description *d,\n     case V2DI_FTYPE_V2DI_V2DI_INT:\n     case V2DF_FTYPE_V2DF_V2DF_INT:\n       nargs = 3;\n-      last_arg_constant = true;\n+      nargs_constant = 1;\n       break;\n     case V2DI2TI_FTYPE_V2DI2TI_V2DI2TI_INT:\n       nargs = 3;\n       convert = ti;\n-      last_arg_constant = true;\n+      nargs_constant = 1;\n+      break;\n+    case V2DI_FTYPE_V2DI_UINT_UINT:\n+      nargs = 3;\n+      nargs_constant = 2;\n+      break;\n+    case V2DI_FTYPE_V2DI_V2DI_UINT_UINT:\n+      nargs = 4;\n+      nargs_constant = 2;\n       break;\n     case DI_FTYPE_DI_DI_INT:\n       nargs = 3;\n-      last_arg_constant = true;\n+      nargs_constant = 1;\n       break;\n     default:\n       gcc_unreachable ();\n@@ -20623,7 +20647,7 @@ ix86_expand_args_builtin (const struct builtin_description *d,\n \t\top = copy_to_reg (op);\n \t    }\n \t}\n-      else if (last_arg_constant && (i + 1) == nargs)\n+      else if ((nargs - i) <= nargs_constant)\n \t{\n \t  if (!match)\n \t    switch (icode)\n@@ -20641,7 +20665,20 @@ ix86_expand_args_builtin (const struct builtin_description *d,\n \t\treturn const0_rtx;\n \n \t     default:\n-\t\terror (\"the last argument must be an 8-bit immediate\");\n+\t\tswitch (nargs_constant)\n+\t\t  {\n+\t\t  case 2:\n+\t\t    if ((nargs - i) == nargs_constant)\n+\t\t      {\n+\t\t\terror (\"the next to last argument must be an 8-bit immediate\");\n+\t\t\tbreak;\n+\t\t      }\n+\t\t  case 1:\n+\t\t    error (\"the last argument must be an 8-bit immediate\");\n+\t\t    break;\n+\t\t  default:\n+\t\t    gcc_unreachable ();\n+\t\t  }\n \t\treturn const0_rtx;\n \t      }\n \t}\n@@ -20689,6 +20726,10 @@ ix86_expand_args_builtin (const struct builtin_description *d,\n       pat = GEN_FCN (icode) (real_target, args[0].op, args[1].op,\n \t\t\t     args[2].op);\n       break;\n+    case 4:\n+      pat = GEN_FCN (icode) (real_target, args[0].op, args[1].op,\n+\t\t\t     args[2].op, args[3].op);\n+      break;\n     default:\n       gcc_unreachable ();\n     }\n@@ -21133,9 +21174,9 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n   size_t i;\n   enum insn_code icode;\n   tree fndecl = TREE_OPERAND (CALL_EXPR_FN (exp), 0);\n-  tree arg0, arg1, arg2, arg3;\n-  rtx op0, op1, op2, op3, pat;\n-  enum machine_mode tmode, mode0, mode1, mode2, mode3, mode4;\n+  tree arg0, arg1, arg2;\n+  rtx op0, op1, op2, pat;\n+  enum machine_mode tmode, mode0, mode1, mode2;\n   unsigned int fcode = DECL_FUNCTION_CODE (fndecl);\n \n   switch (fcode)\n@@ -21345,108 +21386,6 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n     case IX86_BUILTIN_MOVNTSS:\n       return ix86_expand_store_builtin (CODE_FOR_sse4a_vmmovntv4sf, exp);\n \n-    case IX86_BUILTIN_INSERTQ:\n-    case IX86_BUILTIN_EXTRQ:\n-      icode = (fcode == IX86_BUILTIN_EXTRQ\n-               ? CODE_FOR_sse4a_extrq\n-               : CODE_FOR_sse4a_insertq);\n-      arg0 = CALL_EXPR_ARG (exp, 0);\n-      arg1 = CALL_EXPR_ARG (exp, 1);\n-      op0 = expand_normal (arg0);\n-      op1 = expand_normal (arg1);\n-      tmode = insn_data[icode].operand[0].mode;\n-      mode1 = insn_data[icode].operand[1].mode;\n-      mode2 = insn_data[icode].operand[2].mode;\n-      if (! (*insn_data[icode].operand[1].predicate) (op0, mode1))\n-        op0 = copy_to_mode_reg (mode1, op0);\n-      if (! (*insn_data[icode].operand[2].predicate) (op1, mode2))\n-        op1 = copy_to_mode_reg (mode2, op1);\n-      if (optimize || target == 0\n-          || GET_MODE (target) != tmode\n-          || ! (*insn_data[icode].operand[0].predicate) (target, tmode))\n-        target = gen_reg_rtx (tmode);\n-      pat = GEN_FCN (icode) (target, op0, op1);\n-      if (! pat)\n-        return NULL_RTX;\n-      emit_insn (pat);\n-      return target;\n-\n-    case IX86_BUILTIN_EXTRQI:\n-      icode = CODE_FOR_sse4a_extrqi;\n-      arg0 = CALL_EXPR_ARG (exp, 0);\n-      arg1 = CALL_EXPR_ARG (exp, 1);\n-      arg2 = CALL_EXPR_ARG (exp, 2);\n-      op0 = expand_normal (arg0);\n-      op1 = expand_normal (arg1);\n-      op2 = expand_normal (arg2);\n-      tmode = insn_data[icode].operand[0].mode;\n-      mode1 = insn_data[icode].operand[1].mode;\n-      mode2 = insn_data[icode].operand[2].mode;\n-      mode3 = insn_data[icode].operand[3].mode;\n-      if (! (*insn_data[icode].operand[1].predicate) (op0, mode1))\n-        op0 = copy_to_mode_reg (mode1, op0);\n-      if (! (*insn_data[icode].operand[2].predicate) (op1, mode2))\n-        {\n-          error (\"index mask must be an immediate\");\n-          return gen_reg_rtx (tmode);\n-        }\n-      if (! (*insn_data[icode].operand[3].predicate) (op2, mode3))\n-        {\n-          error (\"length mask must be an immediate\");\n-          return gen_reg_rtx (tmode);\n-        }\n-      if (optimize || target == 0\n-          || GET_MODE (target) != tmode\n-          || ! (*insn_data[icode].operand[0].predicate) (target, tmode))\n-        target = gen_reg_rtx (tmode);\n-      pat = GEN_FCN (icode) (target, op0, op1, op2);\n-      if (! pat)\n-        return NULL_RTX;\n-      emit_insn (pat);\n-      return target;\n-\n-    case IX86_BUILTIN_INSERTQI:\n-      icode = CODE_FOR_sse4a_insertqi;\n-      arg0 = CALL_EXPR_ARG (exp, 0);\n-      arg1 = CALL_EXPR_ARG (exp, 1);\n-      arg2 = CALL_EXPR_ARG (exp, 2);\n-      arg3 = CALL_EXPR_ARG (exp, 3);\n-      op0 = expand_normal (arg0);\n-      op1 = expand_normal (arg1);\n-      op2 = expand_normal (arg2);\n-      op3 = expand_normal (arg3);\n-      tmode = insn_data[icode].operand[0].mode;\n-      mode1 = insn_data[icode].operand[1].mode;\n-      mode2 = insn_data[icode].operand[2].mode;\n-      mode3 = insn_data[icode].operand[3].mode;\n-      mode4 = insn_data[icode].operand[4].mode;\n-\n-      if (! (*insn_data[icode].operand[1].predicate) (op0, mode1))\n-        op0 = copy_to_mode_reg (mode1, op0);\n-\n-      if (! (*insn_data[icode].operand[2].predicate) (op1, mode2))\n-        op1 = copy_to_mode_reg (mode2, op1);\n-\n-      if (! (*insn_data[icode].operand[3].predicate) (op2, mode3))\n-        {\n-          error (\"index mask must be an immediate\");\n-          return gen_reg_rtx (tmode);\n-        }\n-      if (! (*insn_data[icode].operand[4].predicate) (op3, mode4))\n-        {\n-          error (\"length mask must be an immediate\");\n-          return gen_reg_rtx (tmode);\n-        }\n-      if (optimize || target == 0\n-          || GET_MODE (target) != tmode\n-          || ! (*insn_data[icode].operand[0].predicate) (target, tmode))\n-        target = gen_reg_rtx (tmode);\n-      pat = GEN_FCN (icode) (target, op0, op1, op2, op3);\n-      if (! pat)\n-        return NULL_RTX;\n-      emit_insn (pat);\n-      return target;\n-\n     case IX86_BUILTIN_VEC_INIT_V2SI:\n     case IX86_BUILTIN_VEC_INIT_V4HI:\n     case IX86_BUILTIN_VEC_INIT_V8QI:"}]}