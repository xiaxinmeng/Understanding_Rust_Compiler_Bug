{"sha": "07f5041085113426037737a5bc3590218f17be7e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDdmNTA0MTA4NTExMzQyNjAzNzczN2E1YmMzNTkwMjE4ZjE3YmU3ZQ==", "commit": {"author": {"name": "Michael Matz", "email": "matz@suse.de", "date": "2011-10-06T15:18:12Z"}, "committer": {"name": "Michael Matz", "email": "matz@gcc.gnu.org", "date": "2011-10-06T15:18:12Z"}, "message": "tree-flow.h (get_var_ann): Don't declare.\n\n\t* tree-flow.h (get_var_ann): Don't declare.\n\t* tree-flow-inline.h (get_var_ann): Remove.\n\t(set_is_used): Use var_ann, not get_var_ann.\n\t* tree-dfa.c (add_referenced_var): Inline body of get_var_ann.\n\t* tree-profile.c (gimple_gen_edge_profiler): Call\n\tfind_referenced_var_in.\n\t(gimple_gen_interval_profiler): Ditto.\n\t(gimple_gen_pow2_profiler): Ditto.\n\t(gimple_gen_one_value_profiler): Ditto.\n\t(gimple_gen_average_profiler): Ditto.\n\t(gimple_gen_ior_profiler): Ditto.\n\t(gimple_gen_ic_profiler): Ditto plus call add_referenced_var.\n\t(gimple_gen_ic_func_profiler): Call add_referenced_var.\n\t* tree-mudflap.c (execute_mudflap_function_ops): Call\n\tadd_referenced_var.\n\nFrom-SVN: r179618", "tree": {"sha": "820ec7df31409951f282adc16ff5ec3ded32d3ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/820ec7df31409951f282adc16ff5ec3ded32d3ef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/07f5041085113426037737a5bc3590218f17be7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07f5041085113426037737a5bc3590218f17be7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07f5041085113426037737a5bc3590218f17be7e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07f5041085113426037737a5bc3590218f17be7e/comments", "author": {"login": "susematz", "id": 4117296, "node_id": "MDQ6VXNlcjQxMTcyOTY=", "avatar_url": "https://avatars.githubusercontent.com/u/4117296?v=4", "gravatar_id": "", "url": "https://api.github.com/users/susematz", "html_url": "https://github.com/susematz", "followers_url": "https://api.github.com/users/susematz/followers", "following_url": "https://api.github.com/users/susematz/following{/other_user}", "gists_url": "https://api.github.com/users/susematz/gists{/gist_id}", "starred_url": "https://api.github.com/users/susematz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/susematz/subscriptions", "organizations_url": "https://api.github.com/users/susematz/orgs", "repos_url": "https://api.github.com/users/susematz/repos", "events_url": "https://api.github.com/users/susematz/events{/privacy}", "received_events_url": "https://api.github.com/users/susematz/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5847ec93384be65d57735db989d43eefb7002b7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5847ec93384be65d57735db989d43eefb7002b7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5847ec93384be65d57735db989d43eefb7002b7f"}], "stats": {"total": 49, "additions": 36, "deletions": 13}, "files": [{"sha": "461683783f5ffaaa161897fdcd0db2afc7c15c8f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07f5041085113426037737a5bc3590218f17be7e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07f5041085113426037737a5bc3590218f17be7e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=07f5041085113426037737a5bc3590218f17be7e", "patch": "@@ -1,3 +1,21 @@\n+2011-10-06  Michael Matz  <matz@suse.de>\n+\n+\t* tree-flow.h (get_var_ann): Don't declare.\n+\t* tree-flow-inline.h (get_var_ann): Remove.\n+\t(set_is_used): Use var_ann, not get_var_ann.\n+\t* tree-dfa.c (add_referenced_var): Inline body of get_var_ann.\n+\t* tree-profile.c (gimple_gen_edge_profiler): Call\n+\tfind_referenced_var_in.\n+\t(gimple_gen_interval_profiler): Ditto.\n+\t(gimple_gen_pow2_profiler): Ditto.\n+\t(gimple_gen_one_value_profiler): Ditto.\n+\t(gimple_gen_average_profiler): Ditto.\n+\t(gimple_gen_ior_profiler): Ditto.\n+\t(gimple_gen_ic_profiler): Ditto plus call add_referenced_var.\n+\t(gimple_gen_ic_func_profiler): Call add_referenced_var.\n+\t* tree-mudflap.c (execute_mudflap_function_ops): Call\n+\tadd_referenced_var.\n+\n 2011-10-06  Jakub Jelinek  <jakub@redhat.com>\n \n \t* tree-vect-patterns.c (vect_handle_widen_mult_by_const): For lhs"}, {"sha": "0ecec816b6a67b812853c152f340fc2a23dcb721", "filename": "gcc/tree-dfa.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07f5041085113426037737a5bc3590218f17be7e/gcc%2Ftree-dfa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07f5041085113426037737a5bc3590218f17be7e/gcc%2Ftree-dfa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dfa.c?ref=07f5041085113426037737a5bc3590218f17be7e", "patch": "@@ -580,8 +580,9 @@ set_default_def (tree var, tree def)\n bool\n add_referenced_var (tree var)\n {\n-  get_var_ann (var);\n   gcc_assert (DECL_P (var));\n+  if (!*DECL_VAR_ANN_PTR (var))\n+    create_var_ann (var);\n \n   /* Insert VAR into the referenced_vars hash table if it isn't present.  */\n   if (referenced_var_check_and_insert (var))"}, {"sha": "56edae9fef3ec37ca3a7cf2530498589bdff5b6a", "filename": "gcc/tree-flow-inline.h", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07f5041085113426037737a5bc3590218f17be7e/gcc%2Ftree-flow-inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07f5041085113426037737a5bc3590218f17be7e/gcc%2Ftree-flow-inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow-inline.h?ref=07f5041085113426037737a5bc3590218f17be7e", "patch": "@@ -145,16 +145,6 @@ var_ann (const_tree t)\n   return p ? *p : NULL;\n }\n \n-/* Return the variable annotation for T, which must be a _DECL node.\n-   Create the variable annotation if it doesn't exist.  */\n-static inline var_ann_t\n-get_var_ann (tree var)\n-{\n-  var_ann_t *p = DECL_VAR_ANN_PTR (var);\n-  gcc_checking_assert (p);\n-  return *p ? *p : create_var_ann (var);\n-}\n-\n /* Get the number of the next statement uid to be allocated.  */\n static inline unsigned int\n gimple_stmt_max_uid (struct function *fn)\n@@ -568,7 +558,7 @@ phi_arg_index_from_use (use_operand_p use)\n static inline void\n set_is_used (tree var)\n {\n-  var_ann_t ann = get_var_ann (var);\n+  var_ann_t ann = var_ann (var);\n   ann->used = true;\n }\n "}, {"sha": "1152b7d0de4660f45d919ec1be5c7bcb2b7236dc", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07f5041085113426037737a5bc3590218f17be7e/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07f5041085113426037737a5bc3590218f17be7e/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=07f5041085113426037737a5bc3590218f17be7e", "patch": "@@ -278,7 +278,6 @@ typedef struct immediate_use_iterator_d\n typedef struct var_ann_d *var_ann_t;\n \n static inline var_ann_t var_ann (const_tree);\n-static inline var_ann_t get_var_ann (tree);\n static inline void update_stmt (gimple);\n static inline int get_lineno (const_gimple);\n "}, {"sha": "102f2ff30759a7803a4f8ac25206f6536f0f876d", "filename": "gcc/tree-mudflap.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07f5041085113426037737a5bc3590218f17be7e/gcc%2Ftree-mudflap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07f5041085113426037737a5bc3590218f17be7e/gcc%2Ftree-mudflap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-mudflap.c?ref=07f5041085113426037737a5bc3590218f17be7e", "patch": "@@ -418,6 +418,10 @@ execute_mudflap_function_ops (void)\n \n   push_gimplify_context (&gctx);\n \n+  add_referenced_var (mf_cache_array_decl);\n+  add_referenced_var (mf_cache_shift_decl);\n+  add_referenced_var (mf_cache_mask_decl);\n+\n   /* In multithreaded mode, don't cache the lookup cache parameters.  */\n   if (! flag_mudflap_threads)\n     mf_decl_cache_locals ();"}, {"sha": "c56650c066e12bc42e919d192162f3cb6787525a", "filename": "gcc/tree-profile.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07f5041085113426037737a5bc3590218f17be7e/gcc%2Ftree-profile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07f5041085113426037737a5bc3590218f17be7e/gcc%2Ftree-profile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-profile.c?ref=07f5041085113426037737a5bc3590218f17be7e", "patch": "@@ -224,6 +224,7 @@ gimple_gen_edge_profiler (int edgeno, edge e)\n   one = build_int_cst (gcov_type_node, 1);\n   stmt1 = gimple_build_assign (gcov_type_tmp_var, ref);\n   gimple_assign_set_lhs (stmt1, make_ssa_name (gcov_type_tmp_var, stmt1));\n+  find_referenced_vars_in (stmt1);\n   stmt2 = gimple_build_assign_with_ops (PLUS_EXPR, gcov_type_tmp_var,\n \t\t\t\t\tgimple_assign_lhs (stmt1), one);\n   gimple_assign_set_lhs (stmt2, make_ssa_name (gcov_type_tmp_var, stmt2));\n@@ -270,6 +271,7 @@ gimple_gen_interval_profiler (histogram_value value, unsigned tag, unsigned base\n   val = prepare_instrumented_value (&gsi, value);\n   call = gimple_build_call (tree_interval_profiler_fn, 4,\n \t\t\t    ref_ptr, val, start, steps);\n+  find_referenced_vars_in (call);\n   gsi_insert_before (&gsi, call, GSI_NEW_STMT);\n }\n \n@@ -290,6 +292,7 @@ gimple_gen_pow2_profiler (histogram_value value, unsigned tag, unsigned base)\n \t\t\t\t      true, NULL_TREE, true, GSI_SAME_STMT);\n   val = prepare_instrumented_value (&gsi, value);\n   call = gimple_build_call (tree_pow2_profiler_fn, 2, ref_ptr, val);\n+  find_referenced_vars_in (call);\n   gsi_insert_before (&gsi, call, GSI_NEW_STMT);\n }\n \n@@ -310,6 +313,7 @@ gimple_gen_one_value_profiler (histogram_value value, unsigned tag, unsigned bas\n \t\t\t\t      true, NULL_TREE, true, GSI_SAME_STMT);\n   val = prepare_instrumented_value (&gsi, value);\n   call = gimple_build_call (tree_one_value_profiler_fn, 2, ref_ptr, val);\n+  find_referenced_vars_in (call);\n   gsi_insert_before (&gsi, call, GSI_NEW_STMT);\n }\n \n@@ -340,9 +344,12 @@ gimple_gen_ic_profiler (histogram_value value, unsigned tag, unsigned base)\n \n   tmp1 = create_tmp_reg (ptr_void, \"PROF\");\n   stmt1 = gimple_build_assign (ic_gcov_type_ptr_var, ref_ptr);\n+  find_referenced_vars_in (stmt1);\n   stmt2 = gimple_build_assign (tmp1, unshare_expr (value->hvalue.value));\n   gimple_assign_set_lhs (stmt2, make_ssa_name (tmp1, stmt2));\n+  find_referenced_vars_in (stmt2);\n   stmt3 = gimple_build_assign (ic_void_ptr_var, gimple_assign_lhs (stmt2));\n+  add_referenced_var (ic_void_ptr_var);\n \n   gsi_insert_before (&gsi, stmt1, GSI_SAME_STMT);\n   gsi_insert_before (&gsi, stmt2, GSI_SAME_STMT);\n@@ -378,9 +385,11 @@ gimple_gen_ic_func_profiler (void)\n   counter_ptr = force_gimple_operand_gsi (&gsi, ic_gcov_type_ptr_var,\n \t\t\t\t\t  true, NULL_TREE, true,\n \t\t\t\t\t  GSI_SAME_STMT);\n+  add_referenced_var (ic_gcov_type_ptr_var);\n   ptr_var = force_gimple_operand_gsi (&gsi, ic_void_ptr_var,\n \t\t\t\t      true, NULL_TREE, true,\n \t\t\t\t      GSI_SAME_STMT);\n+  add_referenced_var (ic_void_ptr_var);\n   tree_uid = build_int_cst (gcov_type_node, current_function_funcdef_no);\n   stmt1 = gimple_build_call (tree_indirect_call_profiler_fn, 4,\n \t\t\t     counter_ptr, tree_uid, cur_func, ptr_var);\n@@ -429,6 +438,7 @@ gimple_gen_average_profiler (histogram_value value, unsigned tag, unsigned base)\n \t\t\t\t      true, GSI_SAME_STMT);\n   val = prepare_instrumented_value (&gsi, value);\n   call = gimple_build_call (tree_average_profiler_fn, 2, ref_ptr, val);\n+  find_referenced_vars_in (call);\n   gsi_insert_before (&gsi, call, GSI_NEW_STMT);\n }\n \n@@ -449,6 +459,7 @@ gimple_gen_ior_profiler (histogram_value value, unsigned tag, unsigned base)\n \t\t\t\t      true, NULL_TREE, true, GSI_SAME_STMT);\n   val = prepare_instrumented_value (&gsi, value);\n   call = gimple_build_call (tree_ior_profiler_fn, 2, ref_ptr, val);\n+  find_referenced_vars_in (call);\n   gsi_insert_before (&gsi, call, GSI_NEW_STMT);\n }\n "}]}