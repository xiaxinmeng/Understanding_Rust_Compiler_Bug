{"sha": "460bd0e32d7dab7ae075d4548d1d284267e52382", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDYwYmQwZTMyZDdkYWI3YWUwNzVkNDU0OGQxZDI4NDI2N2U1MjM4Mg==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.co.uk", "date": "2002-08-12T06:02:53Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2002-08-12T06:02:53Z"}, "message": "c-common.c (STDC_0_IN_SYSTEM_HEADERS, [...]): Move to c-copts.c.\n\n\t* c-common.c (STDC_0_IN_SYSTEM_HEADERS, c_common_init): Move\n\tto c-copts.c.\n\t(warn_multichar): Die.\n\t(cb_register_builtins): Export.\n\t* c-common.h (warn_multichar, preprocess_file): Remove.\n\t(cb_register_builtins): New.\n\t* c-lang.c (c_init): Remove.\n\t(LANG_HOOKS_INIT): Use c_objc_common_init.\n\t* c-lex.c (init_c_lex): Don't canonicalize filename.\n\t* c-opts.c (in_fname, STDC_0_IN_SYSTEM_HEADERS): New.\n\t(preprocess_file): Make static.  Update for cpplib.\n\t(c_common_decode_option): Remove warn_multichar.  Use in_fname.\n\t(c_common_post_options): Set some cpp options here.\n\t(c_common_init): Move from c-common.c.\n\t* cppinit.c (cpp_post_options): Don't canonicalize in_fname.\n\t* cpplib.h (struct cpp_options): Remove in_fname.\n\t(cpp_preprocess_file): Update.\n\t* cppmain.c (cpp_preprocess_file): Update for new prototypes.\n\nFrom-SVN: r56223", "tree": {"sha": "82b18582d84748178bc2373cabf50220825d9659", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/82b18582d84748178bc2373cabf50220825d9659"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/460bd0e32d7dab7ae075d4548d1d284267e52382", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/460bd0e32d7dab7ae075d4548d1d284267e52382", "html_url": "https://github.com/Rust-GCC/gccrs/commit/460bd0e32d7dab7ae075d4548d1d284267e52382", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/460bd0e32d7dab7ae075d4548d1d284267e52382/comments", "author": {"login": "neilb-xx", "id": 160762, "node_id": "MDQ6VXNlcjE2MDc2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/160762?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neilb-xx", "html_url": "https://github.com/neilb-xx", "followers_url": "https://api.github.com/users/neilb-xx/followers", "following_url": "https://api.github.com/users/neilb-xx/following{/other_user}", "gists_url": "https://api.github.com/users/neilb-xx/gists{/gist_id}", "starred_url": "https://api.github.com/users/neilb-xx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neilb-xx/subscriptions", "organizations_url": "https://api.github.com/users/neilb-xx/orgs", "repos_url": "https://api.github.com/users/neilb-xx/repos", "events_url": "https://api.github.com/users/neilb-xx/events{/privacy}", "received_events_url": "https://api.github.com/users/neilb-xx/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f3f268dd79c61ee770687c82cbeeab6fa345f1ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3f268dd79c61ee770687c82cbeeab6fa345f1ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3f268dd79c61ee770687c82cbeeab6fa345f1ce"}], "stats": {"total": 181, "additions": 88, "deletions": 93}, "files": [{"sha": "e5ec9300449d6b247398c1b948df6d8a7189cac1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/460bd0e32d7dab7ae075d4548d1d284267e52382/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/460bd0e32d7dab7ae075d4548d1d284267e52382/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=460bd0e32d7dab7ae075d4548d1d284267e52382", "patch": "@@ -1,3 +1,24 @@\n+2002-08-12  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* c-common.c (STDC_0_IN_SYSTEM_HEADERS, c_common_init): Move\n+\tto c-copts.c.\n+\t(warn_multichar): Die.\n+\t(cb_register_builtins): Export.\n+\t* c-common.h (warn_multichar, preprocess_file): Remove.\n+\t(cb_register_builtins): New.\n+\t* c-lang.c (c_init): Remove.\n+\t(LANG_HOOKS_INIT): Use c_objc_common_init.\n+\t* c-lex.c (init_c_lex): Don't canonicalize filename.\n+\t* c-opts.c (in_fname, STDC_0_IN_SYSTEM_HEADERS): New.\n+\t(preprocess_file): Make static.  Update for cpplib.\n+\t(c_common_decode_option): Remove warn_multichar.  Use in_fname.\n+\t(c_common_post_options): Set some cpp options here.\n+\t(c_common_init): Move from c-common.c.\n+\t* cppinit.c (cpp_post_options): Don't canonicalize in_fname.\n+\t* cpplib.h (struct cpp_options): Remove in_fname.\n+\t(cpp_preprocess_file): Update.\n+\t* cppmain.c (cpp_preprocess_file): Update for new prototypes.\n+\n 2002-08-11  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* config.gcc (mips*-*-netbsd*): Include ${tm_file}."}, {"sha": "2268d72c754d816fef94cc66a1677af587218d6a", "filename": "gcc/c-common.c", "status": "modified", "additions": 1, "deletions": 57, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/460bd0e32d7dab7ae075d4548d1d284267e52382/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/460bd0e32d7dab7ae075d4548d1d284267e52382/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=460bd0e32d7dab7ae075d4548d1d284267e52382", "patch": "@@ -83,10 +83,6 @@ cpp_reader *parse_in;\t\t/* Declared in c-pragma.h.  */\n \t\t\t: \"long long unsigned int\"))\n #endif\n \n-#ifndef STDC_0_IN_SYSTEM_HEADERS\n-#define STDC_0_IN_SYSTEM_HEADERS 0\n-#endif\n-\n #ifndef REGISTER_PREFIX\n #define REGISTER_PREFIX \"\"\n #endif\n@@ -310,10 +306,6 @@ int warn_conversion;\n \n int warn_unknown_pragmas; /* Tri state variable.  */  \n \n-/* Nonzero means warn about use of multicharacter literals.  */\n-\n-int warn_multichar = 1;\n-\n /* Warn about format/argument anomalies in calls to formatted I/O functions\n    (*printf, *scanf, strftime, strfmon, etc.).  */\n \n@@ -692,8 +684,6 @@ static int if_stack_space = 0;\n /* Stack pointer.  */\n static int if_stack_pointer = 0;\n \n-static void cb_register_builtins PARAMS ((cpp_reader *));\n-\n static tree handle_packed_attribute\tPARAMS ((tree *, tree, tree, int,\n \t\t\t\t\t\t bool *));\n static tree handle_nocommon_attribute\tPARAMS ((tree *, tree, tree, int,\n@@ -4672,7 +4662,7 @@ boolean_increment (code, arg)\n }\n \f\n /* Hook that registers front end and target-specific built-ins.  */\n-static void\n+void\n cb_register_builtins (pfile)\n      cpp_reader *pfile;\n {\n@@ -4884,52 +4874,6 @@ builtin_define_type_max (macro, type, is_long)\n   cpp_define (parse_in, buf);\n }\n \n-/* Front end initialization common to C, ObjC and C++.  */\n-const char *\n-c_common_init (filename)\n-     const char *filename;\n-{\n-  cpp_options *options = cpp_get_options (parse_in);\n-\n-  /* Set up preprocessor arithmetic.  Must be done after call to\n-     c_common_nodes_and_builtins for wchar_type_node to be good.  */\n-  options->precision = TYPE_PRECISION (intmax_type_node);\n-  options->char_precision = TYPE_PRECISION (char_type_node);\n-  options->int_precision = TYPE_PRECISION (integer_type_node);\n-  options->wchar_precision = TYPE_PRECISION (wchar_type_node);\n-  options->unsigned_wchar = TREE_UNSIGNED (wchar_type_node);\n-  options->unsigned_char = !flag_signed_char;\n-  options->warn_multichar = warn_multichar;\n-  options->stdc_0_in_system_headers = STDC_0_IN_SYSTEM_HEADERS;\n-\n-  /* We want -Wno-long-long to override -pedantic -std=non-c99\n-     and/or -Wtraditional, whatever the ordering.  */\n-  options->warn_long_long\n-    = warn_long_long && ((!flag_isoc99 && pedantic) || warn_traditional);\n-\n-  /* Register preprocessor built-ins before calls to\n-     cpp_main_file.  */\n-  cpp_get_callbacks (parse_in)->register_builtins = cb_register_builtins;\n-\n-  /* NULL is passed up to toplev.c and we exit quickly.  */\n-  if (flag_preprocess_only)\n-    {\n-      preprocess_file ();\n-      return NULL;\n-    }\n-\n-  /* Do this before initializing pragmas, as then cpplib's hash table\n-     has been set up.  */\n-  filename = init_c_lex (filename);\n-\n-  init_pragma ();\n-\n-  if (!c_attrs_initialized)\n-    c_init_attributes ();\n-\n-  return filename;\n-}\n-\n static void\n c_init_attributes ()\n {"}, {"sha": "8cdbbcee42a9329b16982fceeef8043ba74069ff", "filename": "gcc/c-common.h", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/460bd0e32d7dab7ae075d4548d1d284267e52382/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/460bd0e32d7dab7ae075d4548d1d284267e52382/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=460bd0e32d7dab7ae075d4548d1d284267e52382", "patch": "@@ -481,10 +481,6 @@ extern int warn_conversion;\n \n extern int warn_unknown_pragmas; /* Tri state variable.  */  \n \n-/* Nonzero means warn about use of multicharacter literals.  */\n-\n-extern int warn_multichar;\n-\n /* Warn about format/argument anomalies in calls to formatted I/O functions\n    (*printf, *scanf, strftime, strfmon, etc.).  */\n \n@@ -1209,7 +1205,7 @@ extern int c_common_unsafe_for_reeval\t\tPARAMS ((tree));\n \n extern const char *init_c_lex\t\t\tPARAMS ((const char *));\n \n-extern void preprocess_file\t\t\tPARAMS ((void));\n+extern void cb_register_builtins\t\tPARAMS ((cpp_reader *));\n \n /* Information recorded about each file examined during compilation.  */\n "}, {"sha": "b6f8a7c99fc55ae0c968787e50dbe2f08b63d973", "filename": "gcc/c-lang.c", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/460bd0e32d7dab7ae075d4548d1d284267e52382/gcc%2Fc-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/460bd0e32d7dab7ae075d4548d1d284267e52382/gcc%2Fc-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lang.c?ref=460bd0e32d7dab7ae075d4548d1d284267e52382", "patch": "@@ -29,15 +29,14 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"langhooks.h\"\n #include \"langhooks-def.h\"\n \n-static const char *c_init PARAMS ((const char *));\n static void c_init_options PARAMS ((void));\n \n /* ### When changing hooks, consider if ObjC needs changing too!! ### */\n \n #undef LANG_HOOKS_NAME\n #define LANG_HOOKS_NAME \"GNU C\"\n #undef LANG_HOOKS_INIT\n-#define LANG_HOOKS_INIT c_init\n+#define LANG_HOOKS_INIT c_objc_common_init\n #undef LANG_HOOKS_FINISH\n #define LANG_HOOKS_FINISH c_common_finish\n #undef LANG_HOOKS_INIT_OPTIONS\n@@ -159,13 +158,6 @@ c_init_options ()\n   c_common_init_options (clk_c);\n }\n \n-static const char *\n-c_init (filename)\n-     const char *filename;\n-{\n-  return c_objc_common_init (filename);\n-}\n-\n /* Used by c-lex.c, but only for objc.  */\n \n tree"}, {"sha": "1805ccbed0317722118bf9a597d5b6e4211aec82", "filename": "gcc/c-lex.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/460bd0e32d7dab7ae075d4548d1d284267e52382/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/460bd0e32d7dab7ae075d4548d1d284267e52382/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=460bd0e32d7dab7ae075d4548d1d284267e52382", "patch": "@@ -135,9 +135,6 @@ init_c_lex (filename)\n   /* Start it at 0.  */\n   lineno = 0;\n \n-  if (filename == NULL || !strcmp (filename, \"-\"))\n-    filename = \"\";\n-\n   return cpp_read_main_file (parse_in, filename, ident_hash);\n }\n "}, {"sha": "4f6bb5db817f6dd12d428986c96f06dbc0949784", "filename": "gcc/c-opts.c", "status": "modified", "additions": 60, "deletions": 7, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/460bd0e32d7dab7ae075d4548d1d284267e52382/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/460bd0e32d7dab7ae075d4548d1d284267e52382/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=460bd0e32d7dab7ae075d4548d1d284267e52382", "patch": "@@ -33,6 +33,9 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n \n static cpp_options *cpp_opts;\n \n+/* Input filename.  */\n+static const char *in_fname;\n+\n /* Filename and stream for preprocessed output.  */\n static const char *out_fname;\n static FILE *out_stream;\n@@ -51,6 +54,11 @@ static void set_std_cxx98 PARAMS ((int));\n static void set_std_c89 PARAMS ((int, int));\n static void set_std_c99 PARAMS ((int));\n static void check_deps_environment_vars PARAMS ((void));\n+static void preprocess_file PARAMS ((void));\n+\n+#ifndef STDC_0_IN_SYSTEM_HEADERS\n+#define STDC_0_IN_SYSTEM_HEADERS 0\n+#endif\n \n #define CL_C_ONLY\t(1 << 0) /* Only C.  */\n #define CL_OBJC_ONLY\t(1 << 1) /* Only ObjC.  */\n@@ -462,8 +470,8 @@ c_common_decode_option (argc, argv)\n   /* Interpret \"-\" or a non-switch as a file name.  */\n   if (opt[0] != '-' || opt[1] == '\\0')\n     {\n-      if (!cpp_opts->in_fname)\n-\tcpp_opts->in_fname = opt;\n+      if (!in_fname)\n+\tin_fname = opt;\n       else if (!out_fname)\n \tout_fname = opt;\n       else\n@@ -565,7 +573,6 @@ c_common_decode_option (argc, argv)\n       set_Wimplicit (on);\n       warn_char_subscripts = on;\n       warn_missing_braces = on;\n-      warn_multichar = on;\t/* Was C++ only.  */\n       warn_parentheses = on;\n       warn_return_type = on;\n       warn_sequence_point = on;\t/* Was C only.  */\n@@ -598,6 +605,7 @@ c_common_decode_option (argc, argv)\n       cpp_opts->warn_trigraphs = on;\n       cpp_opts->warn_comments = on;\n       cpp_opts->warn_num_sign_change = on;\n+      cpp_opts->warn_multichar = on;\t/* Was C++ only.  */\n       break;\n \n     case OPT_Wbad_function_cast:\n@@ -728,7 +736,7 @@ c_common_decode_option (argc, argv)\n       break;\n \n     case OPT_Wmultichar:\n-      warn_multichar = on;\n+      cpp_opts->warn_multichar = on;\n       break;\n \n     case OPT_Wnested_externs:\n@@ -1204,7 +1212,10 @@ c_common_decode_option (argc, argv)\n bool\n c_common_post_options ()\n {\n-  /* Canonicalize the output filename.  */\n+  /* Canonicalize the input and output filenames.  */\n+  if (in_fname == NULL || !strcmp (in_fname, \"-\"))\n+    in_fname = \"\";\n+\n   if (out_fname == NULL || !strcmp (out_fname, \"-\"))\n     out_fname = \"\";\n \n@@ -1221,6 +1232,14 @@ c_common_post_options ()\n \n   cpp_post_options (parse_in);\n \n+  cpp_opts->unsigned_char = !flag_signed_char;\n+  cpp_opts->stdc_0_in_system_headers = STDC_0_IN_SYSTEM_HEADERS;\n+\n+  /* We want -Wno-long-long to override -pedantic -std=non-c99\n+     and/or -Wtraditional, whatever the ordering.  */\n+  cpp_opts->warn_long_long\n+    = warn_long_long && ((!flag_isoc99 && pedantic) || warn_traditional);\n+\n   flag_inline_trees = 1;\n \n   /* Use tree inlining if possible.  Function instrumentation is only\n@@ -1263,7 +1282,7 @@ c_common_post_options ()\n }\n \n /* Preprocess the input file to out_stream.  */\n-void\n+static void\n preprocess_file ()\n {\n   /* Open the output now.  We must do so even if no_output is on,\n@@ -1277,7 +1296,41 @@ preprocess_file ()\n   if (out_stream == NULL)\n     fatal_io_error (\"opening output file %s\", out_fname);\n   else\n-    cpp_preprocess_file (parse_in, out_stream);\n+    cpp_preprocess_file (parse_in, in_fname, out_stream);\n+}\n+\n+/* Front end initialization common to C, ObjC and C++.  */\n+const char *\n+c_common_init (filename)\n+     const char *filename;\n+{\n+  /* Set up preprocessor arithmetic.  Must be done after call to\n+     c_common_nodes_and_builtins for type nodes to be good.  */\n+  cpp_opts->precision = TYPE_PRECISION (intmax_type_node);\n+  cpp_opts->char_precision = TYPE_PRECISION (char_type_node);\n+  cpp_opts->int_precision = TYPE_PRECISION (integer_type_node);\n+  cpp_opts->wchar_precision = TYPE_PRECISION (wchar_type_node);\n+  cpp_opts->unsigned_wchar = TREE_UNSIGNED (wchar_type_node);\n+\n+  /* Register preprocessor built-ins before calls to\n+     cpp_main_file.  */\n+  cpp_get_callbacks (parse_in)->register_builtins = cb_register_builtins;\n+\n+  /* NULL is passed up to toplev.c and we exit quickly.  */\n+  if (flag_preprocess_only)\n+    {\n+      preprocess_file ();\n+      return NULL;\n+    }\n+\n+  /* Do this before initializing pragmas, as then cpplib's hash table\n+     has been set up.  NOTE: we are using our own file name here, not\n+     the one supplied.  */\n+  filename = init_c_lex (in_fname);\n+\n+  init_pragma ();\n+\n+  return filename;\n }\n \n /* Common finish hook for the C, ObjC and C++ front ends.  */"}, {"sha": "2792ebfb672d4a9837a55eab92f87bc901320b8b", "filename": "gcc/cppinit.c", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/460bd0e32d7dab7ae075d4548d1d284267e52382/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/460bd0e32d7dab7ae075d4548d1d284267e52382/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=460bd0e32d7dab7ae075d4548d1d284267e52382", "patch": "@@ -1452,12 +1452,6 @@ void\n cpp_post_options (pfile)\n      cpp_reader *pfile;\n {\n-  /* Canonicalize in_fname and out_fname.  We guarantee they are not\n-     NULL, and that the empty string represents stdin / stdout.  */\n-  if (CPP_OPTION (pfile, in_fname) == NULL\n-      || !strcmp (CPP_OPTION (pfile, in_fname), \"-\"))\n-    CPP_OPTION (pfile, in_fname) = \"\";\n-\n   /* -Wtraditional is not useful in C++ mode.  */\n   if (CPP_OPTION (pfile, cplusplus))\n     CPP_OPTION (pfile, warn_traditional) = 0;"}, {"sha": "7df6ce274812296f5121e6b2f0259aa399e117ec", "filename": "gcc/cpplib.h", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/460bd0e32d7dab7ae075d4548d1d284267e52382/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/460bd0e32d7dab7ae075d4548d1d284267e52382/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=460bd0e32d7dab7ae075d4548d1d284267e52382", "patch": "@@ -221,9 +221,6 @@ enum { dump_none = 0, dump_only, dump_names, dump_definitions };\n    carries all the options visible to the command line.  */\n struct cpp_options\n {\n-  /* Name of input and output files.  */\n-  const char *in_fname;\n-\n   /* Characters between tab stops.  */\n   unsigned int tabstop;\n \n@@ -726,7 +723,7 @@ extern int cpp_included\tPARAMS ((cpp_reader *, const char *));\n extern void cpp_make_system_header PARAMS ((cpp_reader *, int, int));\n \n /* In cppmain.c */\n-extern void cpp_preprocess_file PARAMS ((cpp_reader *, FILE *));\n+extern void cpp_preprocess_file PARAMS ((cpp_reader *, const char *, FILE *));\n \n #ifdef __cplusplus\n }"}, {"sha": "5efafd5cad9516ee250c37a51b01805b24b79e3e", "filename": "gcc/cppmain.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/460bd0e32d7dab7ae075d4548d1d284267e52382/gcc%2Fcppmain.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/460bd0e32d7dab7ae075d4548d1d284267e52382/gcc%2Fcppmain.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppmain.c?ref=460bd0e32d7dab7ae075d4548d1d284267e52382", "patch": "@@ -67,8 +67,9 @@ static struct printer print;\n \n /* Preprocess and output.  */\n void\n-cpp_preprocess_file (pfile, out_stream)\n+cpp_preprocess_file (pfile, in_fname, out_stream)\n      cpp_reader *pfile;\n+     const char *in_fname;\n      FILE *out_stream;\n {\n   options = cpp_get_options (pfile);\n@@ -84,7 +85,7 @@ cpp_preprocess_file (pfile, out_stream)\n \n   setup_callbacks (pfile);\n \n-  if (cpp_read_main_file (pfile, options->in_fname, NULL))\n+  if (cpp_read_main_file (pfile, in_fname, NULL))\n     {\n       cpp_finish_options (pfile);\n "}]}