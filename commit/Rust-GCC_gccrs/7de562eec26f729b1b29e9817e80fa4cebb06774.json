{"sha": "7de562eec26f729b1b29e9817e80fa4cebb06774", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2RlNTYyZWVjMjZmNzI5YjFiMjllOTgxN2U4MGZhNGNlYmIwNjc3NA==", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2018-12-14T20:42:29Z"}, "committer": {"name": "Thomas Schwinge", "email": "tschwinge@gcc.gnu.org", "date": "2018-12-14T20:42:29Z"}, "message": "Revise libgomp.oacc-c-c++-common/data-2-lib.c, libgomp.oacc-c-c++-common/data-2.c\n\nThese are meant to be functionally equivalent (but no longer are), just using\ndifferent means.  Also, use the OpenACC \"*_async\" functions recently added.\n\n\tlibgomp/\n\t* testsuite/libgomp.oacc-c-c++-common/data-2-lib.c: Revise.\n\t* testsuite/libgomp.oacc-c-c++-common/data-2.c: Likewise.\n\nFrom-SVN: r267149", "tree": {"sha": "a7c585fdde9693c1cdd2e18621759347d9bf39f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a7c585fdde9693c1cdd2e18621759347d9bf39f1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7de562eec26f729b1b29e9817e80fa4cebb06774", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7de562eec26f729b1b29e9817e80fa4cebb06774", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7de562eec26f729b1b29e9817e80fa4cebb06774", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7de562eec26f729b1b29e9817e80fa4cebb06774/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "17469af75b01f573b09a51047589e53c2d3e8316", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17469af75b01f573b09a51047589e53c2d3e8316", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17469af75b01f573b09a51047589e53c2d3e8316"}], "stats": {"total": 282, "additions": 125, "deletions": 157}, "files": [{"sha": "d84c3f4bfe2e38a796d31b79169e80b1a8ff7e66", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7de562eec26f729b1b29e9817e80fa4cebb06774/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7de562eec26f729b1b29e9817e80fa4cebb06774/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=7de562eec26f729b1b29e9817e80fa4cebb06774", "patch": "@@ -1,3 +1,8 @@\n+2018-12-14  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* testsuite/libgomp.oacc-c-c++-common/data-2-lib.c: Revise.\n+\t* testsuite/libgomp.oacc-c-c++-common/data-2.c: Likewise.\n+\n 2018-12-14  Chung-Lin Tang  <cltang@codesourcery.com>\n \n \t* testsuite/libgomp.oacc-c-c++-common/data-2-lib.c: Adjust."}, {"sha": "e432f8d9c796c4498a1dee44eee7f108ab9787ea", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/data-2-lib.c", "status": "modified", "additions": 58, "deletions": 71, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7de562eec26f729b1b29e9817e80fa4cebb06774/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fdata-2-lib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7de562eec26f729b1b29e9817e80fa4cebb06774/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fdata-2-lib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fdata-2-lib.c?ref=7de562eec26f729b1b29e9817e80fa4cebb06774", "patch": "@@ -1,16 +1,15 @@\n-/* This test is similar to data-2.c, but it uses acc_* library functions\n-   to move data.  */\n-\n-/* { dg-do run } */\n+/* Test asynchronous, unstructed data regions, runtime library variant.  */\n+/* See also data-2.c.  */\n \n #include <stdlib.h>\n+#undef NDEBUG\n #include <assert.h>\n #include <openacc.h>\n \n int\n main (int argc, char **argv)\n {\n-  int N = 128; //1024 * 1024;\n+  int N = 12345;\n   float *a, *b, *c, *d, *e;\n   void *d_a, *d_b, *d_c, *d_d;\n   int i;\n@@ -30,19 +29,21 @@ main (int argc, char **argv)\n       b[i] = 0.0;\n     }\n \n-  d_a = acc_copyin (a, nbytes);\n-  d_b = acc_copyin (b, nbytes);\n-  acc_copyin (&N, sizeof (int));\n+  acc_copyin_async (a, nbytes, acc_async_noval);\n+  acc_copyin_async (b, nbytes, acc_async_noval);\n+  acc_copyin_async (&N, sizeof (int), acc_async_noval);\n   \n-#pragma acc parallel present (a[0:N], b[0:N], N) async wait\n+#pragma acc parallel present (a[0:N], b[0:N], N) async\n #pragma acc loop\n   for (i = 0; i < N; i++)\n     b[i] = a[i];\n \n-  acc_wait_all ();\n+  d_a = acc_deviceptr (a);\n+  acc_memcpy_from_device_async (a, d_a, nbytes, acc_async_noval);\n+  d_b = acc_deviceptr (b);\n+  acc_memcpy_from_device_async (b, d_b, nbytes, acc_async_noval);\n \n-  acc_memcpy_from_device (a, d_a, nbytes);\n-  acc_memcpy_from_device (b, d_b, nbytes);\n+  acc_wait (acc_async_noval);\n \n   for (i = 0; i < N; i++)\n     {\n@@ -56,19 +57,19 @@ main (int argc, char **argv)\n       b[i] = 0.0;\n     }\n \n-  acc_update_device (a, nbytes);\n-  acc_update_device (b, nbytes);\n+  acc_update_device_async (a, nbytes, 1);\n+  acc_update_device_async (b, nbytes, 1);\n   \n-#pragma acc parallel present (a[0:N], b[0:N], N)  async (1)\n+#pragma acc parallel present (a[0:N], b[0:N], N) async (1)\n #pragma acc loop\n   for (i = 0; i < N; i++)\n     b[i] = a[i];\n \n+  acc_memcpy_from_device_async (a, d_a, nbytes, 1);\n+  acc_memcpy_from_device_async (b, d_b, nbytes, 1);\n+\n   acc_wait (1);\n \n-  acc_memcpy_from_device (a, d_a, nbytes);\n-  acc_memcpy_from_device (b, d_b, nbytes);\n-  \n   for (i = 0; i < N; i++)\n     {\n       assert (a[i] == 2.0);\n@@ -83,46 +84,42 @@ main (int argc, char **argv)\n       d[i] = 0.0;\n     }\n \n-  acc_update_device (a, nbytes);\n-  acc_update_device (b, nbytes);\n-  d_c = acc_copyin (c, nbytes);\n-  d_d = acc_copyin (d, nbytes);\n+  acc_update_device_async (a, nbytes, 0);\n+  acc_update_device_async (b, nbytes, 1);\n+  acc_copyin_async (c, nbytes, 2);\n+  acc_copyin_async (d, nbytes, 3);\n \n-#pragma acc parallel present (a[0:N], b[0:N], N) async (1)\n+#pragma acc parallel present (a[0:N], b[0:N], N) wait (0) async (1)\n #pragma acc loop\n   for (i = 0; i < N; i++)\n     b[i] = (a[i] * a[i] * a[i]) / a[i];\n \n-#pragma acc parallel present (a[0:N], c[0:N], N) async (2)\n+#pragma acc parallel present (a[0:N], c[0:N], N) wait (0) async (2)\n #pragma acc loop\n   for (i = 0; i < N; i++)\n     c[i] = (a[i] + a[i] + a[i] + a[i]) / a[i];\n \n-#pragma acc parallel present (a[0:N], d[0:N], N) async (3)\n+#pragma acc parallel present (a[0:N], d[0:N], N) wait (0) async (3)\n #pragma acc loop\n   for (i = 0; i < N; i++)\n     d[i] = ((a[i] * a[i] + a[i]) / a[i]) - a[i];\n \n-  acc_wait_all ();\n+  acc_memcpy_from_device_async (a, d_a, nbytes, 0);\n+  acc_memcpy_from_device_async (b, d_b, nbytes, 1);\n+  d_c = acc_deviceptr (c);\n+  acc_memcpy_from_device_async (c, d_c, nbytes, 2);\n+  d_d = acc_deviceptr (d);\n+  acc_memcpy_from_device_async (d, d_d, nbytes, 3);\n   \n-  acc_memcpy_from_device (a, d_a, nbytes);\n-  acc_memcpy_from_device (b, d_b, nbytes);\n-  acc_memcpy_from_device (c, d_c, nbytes);\n-  acc_memcpy_from_device (d, d_d, nbytes);\n+  acc_wait_all_async (0);\n+  acc_wait (0);\n   \n   for (i = 0; i < N; i++)\n     {\n-      if (a[i] != 3.0)\n-\tabort ();\n-\n-      if (b[i] != 9.0)\n-\tabort ();\n-\n-      if (c[i] != 4.0)\n-\tabort ();\n-\n-      if (d[i] != 1.0)\n-\tabort ();\n+      assert (a[i] == 3.0);\n+      assert (b[i] == 9.0);\n+      assert (c[i] == 4.0);\n+      assert (d[i] == 1.0);\n     }\n \n   for (i = 0; i < N; i++)\n@@ -134,53 +131,43 @@ main (int argc, char **argv)\n       e[i] = 0.0;\n     }\n \n-  acc_update_device (a, nbytes);\n-  acc_update_device (b, nbytes);\n-  acc_update_device (c, nbytes);\n-  acc_update_device (d, nbytes);\n-  acc_copyin (e, nbytes);\n+  acc_update_device_async (a, nbytes, 10);\n+  acc_update_device_async (b, nbytes, 11);\n+  acc_update_device_async (c, nbytes, 12);\n+  acc_update_device_async (d, nbytes, 13);\n+  acc_copyin_async (e, nbytes, 14);\n \n-#pragma acc parallel present (a[0:N], b[0:N], N) async (1)\n+#pragma acc parallel present (a[0:N], b[0:N], N) wait (10) async (11)\n   for (int ii = 0; ii < N; ii++)\n     b[ii] = (a[ii] * a[ii] * a[ii]) / a[ii];\n \n-#pragma acc parallel present (a[0:N], c[0:N], N) async (2)\n+#pragma acc parallel present (a[0:N], c[0:N], N) wait (10) async (12)\n   for (int ii = 0; ii < N; ii++)\n     c[ii] = (a[ii] + a[ii] + a[ii] + a[ii]) / a[ii];\n \n-#pragma acc parallel present (a[0:N], d[0:N], N) async (3)\n+#pragma acc parallel present (a[0:N], d[0:N], N) wait (10) async (13)\n   for (int ii = 0; ii < N; ii++)\n     d[ii] = ((a[ii] * a[ii] + a[ii]) / a[ii]) - a[ii];\n \n-#pragma acc parallel present (a[0:N], b[0:N], c[0:N], d[0:N], e[0:N], N) \\\n-  wait (1, 2, 3) async (4)\n+#pragma acc parallel present (a[0:N], b[0:N], c[0:N], d[0:N], e[0:N], N)  wait (11) wait (12) wait (13) async (14)\n   for (int ii = 0; ii < N; ii++)\n     e[ii] = a[ii] + b[ii] + c[ii] + d[ii];\n \n+  acc_copyout_async (a, nbytes, 10);\n+  acc_copyout_async (b, nbytes, 11);\n+  acc_copyout_async (c, nbytes, 12);\n+  acc_copyout_async (d, nbytes, 13);\n+  acc_copyout_async (e, nbytes, 14);\n+  acc_delete_async (&N, sizeof (int), 15);\n   acc_wait_all ();\n-  acc_copyout (a, nbytes);\n-  acc_copyout (b, nbytes);\n-  acc_copyout (c, nbytes); \n-  acc_copyout (d, nbytes);\n-  acc_copyout (e, nbytes);\n-  acc_delete (&N, sizeof (int));\n \n   for (i = 0; i < N; i++)\n     {\n-      if (a[i] != 2.0)\n-\tabort ();\n-\n-      if (b[i] != 4.0)\n-\tabort ();\n-\n-      if (c[i] != 4.0)\n-\tabort ();\n-\n-      if (d[i] != 1.0)\n-\tabort ();\n-\n-      if (e[i] != 11.0)\n-\tabort ();\n+      assert (a[i] == 2.0);\n+      assert (b[i] == 4.0);\n+      assert (c[i] == 4.0);\n+      assert (d[i] == 1.0);\n+      assert (e[i] == 11.0);\n     }\n \n   return 0;"}, {"sha": "c0f36d3be6ba92aea813b9ce64af279d5d5d3a0a", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/data-2.c", "status": "modified", "additions": 62, "deletions": 86, "changes": 148, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7de562eec26f729b1b29e9817e80fa4cebb06774/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fdata-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7de562eec26f729b1b29e9817e80fa4cebb06774/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fdata-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fdata-2.c?ref=7de562eec26f729b1b29e9817e80fa4cebb06774", "patch": "@@ -1,14 +1,14 @@\n-/* Test 'acc enter/exit data' regions.  */\n-\n-/* { dg-do run } */\n-/* { dg-xfail-run-if \"TODO\" { openacc_nvidia_accel_selected } } */\n+/* Test asynchronous, unstructed data regions, directives variant.  */\n+/* See also data-2-lib.c.  */\n \n #include <stdlib.h>\n+#undef NDEBUG\n+#include <assert.h>\n \n int\n main (int argc, char **argv)\n {\n-  int N = 128; //1024 * 1024;\n+  int N = 12345;\n   float *a, *b, *c, *d, *e;\n   int i;\n   int nbytes;\n@@ -27,48 +27,24 @@ main (int argc, char **argv)\n       b[i] = 0.0;\n     }\n \n-#pragma acc enter data copyin (a[0:N]) copyin (b[0:N]) copyin (N) async\n-#pragma acc parallel present (a[0:N], b[0:N]) async wait\n-#pragma acc loop\n-  for (i = 0; i < N; i++)\n-    b[i] = a[i];\n-\n-#pragma acc exit data copyout (a[0:N]) copyout (b[0:N]) wait async\n-#pragma acc wait\n-\n-  for (i = 0; i < N; i++)\n-    {\n-      if (a[i] != 3.0)\n-\tabort ();\n-\n-      if (b[i] != 3.0)\n-\tabort ();\n-    }\n-\n-  for (i = 0; i < N; i++)\n-    {\n-      a[i] = 3.0;\n-      b[i] = 0.0;\n-    }\n+#pragma acc enter data copyin (a[0:N]) async\n+#pragma acc enter data copyin (b[0:N]) async\n+#pragma acc enter data copyin (N) async\n \n-#pragma acc enter data copyin (a[0:N]) async \n-#pragma acc enter data copyin (b[0:N]) async wait\n-#pragma acc enter data copyin (N) async wait\n-#pragma acc parallel async wait\n+#pragma acc parallel present (a[0:N], b[0:N], N) async\n #pragma acc loop\n   for (i = 0; i < N; i++)\n     b[i] = a[i];\n \n-#pragma acc exit data copyout (a[0:N]) copyout (b[0:N]) delete (N) wait async\n+#pragma acc update self (a[0:N]) async\n+#pragma acc update self (b[0:N]) async\n+\n #pragma acc wait\n \n   for (i = 0; i < N; i++)\n     {\n-      if (a[i] != 3.0)\n-\tabort ();\n-\n-      if (b[i] != 3.0)\n-\tabort ();\n+      assert (a[i] == 3.0);\n+      assert (b[i] == 3.0);\n     }\n \n   for (i = 0; i < N; i++)\n@@ -77,22 +53,23 @@ main (int argc, char **argv)\n       b[i] = 0.0;\n     }\n \n-#pragma acc enter data copyin (a[0:N]) copyin (b[0:N]) copyin (N) async (1)\n-#pragma acc parallel present (a[0:N], b[0:N])  async (1)\n+#pragma acc update device (a[0:N]) async (1)\n+#pragma acc update device (b[0:N]) async (1)\n+\n+#pragma acc parallel present (a[0:N], b[0:N], N) async (1)\n #pragma acc loop\n   for (i = 0; i < N; i++)\n     b[i] = a[i];\n \n-#pragma acc exit data copyout (a[0:N]) copyout (b[0:N]) wait (1) async (1)\n+#pragma acc update self (a[0:N]) async (1)\n+#pragma acc update self (b[0:N]) async (1)\n+\n #pragma acc wait (1)\n \n   for (i = 0; i < N; i++)\n     {\n-      if (a[i] != 2.0)\n-\tabort ();\n-\n-      if (b[i] != 2.0)\n-\tabort ();\n+      assert (a[i] == 2.0);\n+      assert (b[i] == 2.0);\n     }\n \n   for (i = 0; i < N; i++)\n@@ -103,39 +80,40 @@ main (int argc, char **argv)\n       d[i] = 0.0;\n     }\n \n-#pragma acc enter data copyin (a[0:N]) copyin (b[0:N]) copyin (c[0:N]) copyin (d[0:N]) copyin (N) async (1)\n+#pragma acc update device (a[0:N]) async (0)\n+#pragma acc update device (b[0:N]) async (1)\n+#pragma acc enter data copyin (c[0:N]) async (2)\n+#pragma acc enter data copyin (d[0:N]) async (3)\n \n-#pragma acc parallel present (a[0:N], b[0:N]) async (1) wait (1)\n+#pragma acc parallel present (a[0:N], b[0:N], N) wait (0) async (1)\n #pragma acc loop\n   for (i = 0; i < N; i++)\n     b[i] = (a[i] * a[i] * a[i]) / a[i];\n \n-#pragma acc parallel present (a[0:N], c[0:N]) async (2) wait (1)\n+#pragma acc parallel present (a[0:N], c[0:N], N) wait (0) async (2)\n #pragma acc loop\n   for (i = 0; i < N; i++)\n     c[i] = (a[i] + a[i] + a[i] + a[i]) / a[i];\n \n-#pragma acc parallel present (a[0:N], d[0:N]) async (3) wait (1)\n+#pragma acc parallel present (a[0:N], d[0:N], N) wait (0) async (3)\n #pragma acc loop\n   for (i = 0; i < N; i++)\n     d[i] = ((a[i] * a[i] + a[i]) / a[i]) - a[i];\n \n-#pragma acc exit data copyout (a[0:N]) copyout (b[0:N]) copyout (c[0:N]) copyout (d[0:N]) wait (1, 2, 3) async (1)\n-#pragma acc wait (1)\n+#pragma acc update self (a[0:N]) async (0)\n+#pragma acc update self (b[0:N]) async (1)\n+#pragma acc update self (c[0:N]) async (2)\n+#pragma acc update self (d[0:N]) async (3)\n+\n+#pragma acc wait async (0)\n+#pragma acc wait (0)\n \n   for (i = 0; i < N; i++)\n     {\n-      if (a[i] != 3.0)\n-\tabort ();\n-\n-      if (b[i] != 9.0)\n-\tabort ();\n-\n-      if (c[i] != 4.0)\n-\tabort ();\n-\n-      if (d[i] != 1.0)\n-\tabort ();\n+      assert (a[i] == 3.0);\n+      assert (b[i] == 9.0);\n+      assert (c[i] == 4.0);\n+      assert (d[i] == 1.0);\n     }\n \n   for (i = 0; i < N; i++)\n@@ -147,45 +125,43 @@ main (int argc, char **argv)\n       e[i] = 0.0;\n     }\n \n-#pragma acc enter data copyin (a[0:N]) copyin (b[0:N]) copyin (c[0:N]) copyin (d[0:N]) copyin (e[0:N]) copyin (N) async (1)\n+#pragma acc update device (a[0:N]) async (10)\n+#pragma acc update device (b[0:N]) async (11)\n+#pragma acc update device (c[0:N]) async (12)\n+#pragma acc update device (d[0:N]) async (13)\n+#pragma acc enter data copyin (e[0:N]) async (14)\n \n-#pragma acc parallel present (a[0:N], b[0:N]) async (1) wait (1)\n+#pragma acc parallel present (a[0:N], b[0:N], N) wait (10) async (11)\n   for (int ii = 0; ii < N; ii++)\n     b[ii] = (a[ii] * a[ii] * a[ii]) / a[ii];\n \n-#pragma acc parallel present (a[0:N], c[0:N]) async (2) wait (1)\n+#pragma acc parallel present (a[0:N], c[0:N], N) wait (10) async (12)\n   for (int ii = 0; ii < N; ii++)\n     c[ii] = (a[ii] + a[ii] + a[ii] + a[ii]) / a[ii];\n \n-#pragma acc parallel present (a[0:N], d[0:N]) async (3) wait (1)\n+#pragma acc parallel present (a[0:N], d[0:N], N) wait (10) async (13)\n   for (int ii = 0; ii < N; ii++)\n     d[ii] = ((a[ii] * a[ii] + a[ii]) / a[ii]) - a[ii];\n \n-#pragma acc parallel present (a[0:N], b[0:N], c[0:N], d[0:N], e[0:N]) \\\n-  wait (1, 2, 3) async (4)\n+#pragma acc parallel present (a[0:N], b[0:N], c[0:N], d[0:N], e[0:N], N) wait (11) wait (12) wait (13) async (14)\n   for (int ii = 0; ii < N; ii++)\n     e[ii] = a[ii] + b[ii] + c[ii] + d[ii];\n \n-#pragma acc exit data copyout (a[0:N]) copyout (b[0:N]) copyout (c[0:N]) \\\n-  copyout (d[0:N]) copyout (e[0:N]) wait (1, 2, 3, 4) async (1)\n-#pragma acc wait (1)\n+#pragma acc exit data copyout (a[0:N]) async (10)\n+#pragma acc exit data copyout (b[0:N]) async (11)\n+#pragma acc exit data copyout (c[0:N]) async (12)\n+#pragma acc exit data copyout (d[0:N]) async (13)\n+#pragma acc exit data copyout (e[0:N]) async (14)\n+#pragma acc exit data delete (N) async (15)\n+#pragma acc wait\n \n   for (i = 0; i < N; i++)\n     {\n-      if (a[i] != 2.0)\n-\tabort ();\n-\n-      if (b[i] != 4.0)\n-\tabort ();\n-\n-      if (c[i] != 4.0)\n-\tabort ();\n-\n-      if (d[i] != 1.0)\n-\tabort ();\n-\n-      if (e[i] != 11.0)\n-\tabort ();\n+      assert (a[i] == 2.0);\n+      assert (b[i] == 4.0);\n+      assert (c[i] == 4.0);\n+      assert (d[i] == 1.0);\n+      assert (e[i] == 11.0);\n     }\n \n   return 0;"}]}