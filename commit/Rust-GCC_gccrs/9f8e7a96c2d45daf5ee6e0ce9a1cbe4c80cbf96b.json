{"sha": "9f8e7a96c2d45daf5ee6e0ce9a1cbe4c80cbf96b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWY4ZTdhOTZjMmQ0NWRhZjVlZTZlMGNlOWExY2JlNGM4MGNiZjk2Yg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2013-05-02T15:46:12Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2013-05-02T15:46:12Z"}, "message": "re PR middle-end/57140 (Segmentation fault in backtrace_dwarf_add)\n\n2013-05-02  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/57140\n\t* tree-inline.c (copy_loops): Properly handle removed loops.\n\t(copy_cfg_body): Mark destination loops for fixup if source\n\tloops needed fixup.\n\n\t* g++.dg/torture/pr57140.C: New testcase.\n\nFrom-SVN: r198548", "tree": {"sha": "a30ed31ba45668a2b166c79de88b5a8d7423feb4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a30ed31ba45668a2b166c79de88b5a8d7423feb4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9f8e7a96c2d45daf5ee6e0ce9a1cbe4c80cbf96b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f8e7a96c2d45daf5ee6e0ce9a1cbe4c80cbf96b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f8e7a96c2d45daf5ee6e0ce9a1cbe4c80cbf96b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f8e7a96c2d45daf5ee6e0ce9a1cbe4c80cbf96b/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f3a81b39c05f955e6203ec1a61b517563d63314f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3a81b39c05f955e6203ec1a61b517563d63314f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3a81b39c05f955e6203ec1a61b517563d63314f"}], "stats": {"total": 210, "additions": 208, "deletions": 2}, "files": [{"sha": "d4397af0557ff11d89c3b351b63edaf3a9d1a751", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f8e7a96c2d45daf5ee6e0ce9a1cbe4c80cbf96b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f8e7a96c2d45daf5ee6e0ce9a1cbe4c80cbf96b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9f8e7a96c2d45daf5ee6e0ce9a1cbe4c80cbf96b", "patch": "@@ -1,3 +1,10 @@\n+2013-05-02  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/57140\n+\t* tree-inline.c (copy_loops): Properly handle removed loops.\n+\t(copy_cfg_body): Mark destination loops for fixup if source\n+\tloops needed fixup.\n+\n 2013-05-02  Greta Yorsh  <Greta.Yorsh@arm.com>\n \n \tPR target/56732"}, {"sha": "0dcb01507e24c53fc5e7cd867cdf20c4729e95c5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f8e7a96c2d45daf5ee6e0ce9a1cbe4c80cbf96b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f8e7a96c2d45daf5ee6e0ce9a1cbe4c80cbf96b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9f8e7a96c2d45daf5ee6e0ce9a1cbe4c80cbf96b", "patch": "@@ -1,3 +1,8 @@\n+2013-05-02  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/57140\n+\t* g++.dg/torture/pr57140.C: New testcase.\n+\n 2013-05-02  Greta Yorsh  <Greta.Yorsh@arm.com>\n \n \tPR target/56732"}, {"sha": "2ea2f9c4d1bdce8065367ec6a8ae053e94039427", "filename": "gcc/testsuite/g++.dg/torture/pr57140.C", "status": "added", "additions": 186, "deletions": 0, "changes": 186, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f8e7a96c2d45daf5ee6e0ce9a1cbe4c80cbf96b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr57140.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f8e7a96c2d45daf5ee6e0ce9a1cbe4c80cbf96b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr57140.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr57140.C?ref=9f8e7a96c2d45daf5ee6e0ce9a1cbe4c80cbf96b", "patch": "@@ -0,0 +1,186 @@\n+// { dg-do compile }\n+\n+namespace std {\n+    typedef long unsigned int size_t;\n+    template<typename>     class allocator;\n+    template<class _CharT>     struct char_traits;\n+    template<typename _CharT, typename _Traits = char_traits<_CharT>,            typename _Alloc = allocator<_CharT> >     class basic_string;\n+    typedef basic_string<char> string;\n+}\n+namespace std __attribute__ ((__visibility__ (\"default\"))) {\n+}\n+namespace __gnu_cxx __attribute__ ((__visibility__ (\"default\"))) {\n+}\n+namespace __gnu_cxx __attribute__ ((__visibility__ (\"default\"))) {\n+    template<typename _Tp>     class new_allocator     {\n+    };\n+}\n+namespace std __attribute__ ((__visibility__ (\"default\"))) {\n+    template<typename _Tp>     class allocator: public __gnu_cxx::new_allocator<_Tp>     {\n+    public:\n+\ttemplate<typename _Tp1>         struct rebind         {\n+\t    typedef allocator<_Tp1> other;\n+\t};\n+    };\n+}\n+namespace std {\n+}\n+namespace __gnu_cxx __attribute__ ((__visibility__ (\"default\"))) {\n+}\n+namespace std __attribute__ ((__visibility__ (\"default\"))) {\n+    template<typename _CharT, typename _Traits, typename _Alloc>     class basic_string     {\n+\tstruct _Alloc_hider : _Alloc       {\n+\t    _Alloc_hider(_CharT* __dat, const _Alloc& __a)  : _Alloc(__a), _M_p(__dat) {\n+\t    }\n+\t    _CharT* _M_p;\n+\t};\n+\tmutable _Alloc_hider _M_dataplus;\n+    public:\n+\tbasic_string(const _CharT* __s, const _Alloc& __a = _Alloc());\n+    };\n+    template<typename _CharT, typename _Traits, typename _Alloc>     inline bool     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,         const _CharT* __rhs)     {\n+    }\n+}\n+extern \"C\" {\n+}\n+namespace std __attribute__ ((__visibility__ (\"default\"))) {\n+    namespace __detail   {\n+\tstruct _List_node_base     {\n+\t    _List_node_base* _M_next;\n+\t};\n+    }\n+    template<typename _Tp>     struct _List_node : public __detail::_List_node_base     {\n+    };\n+    template<typename _Tp>     struct _List_iterator     {\n+\ttypedef _List_iterator<_Tp> _Self;\n+\ttypedef _Tp& reference;\n+\treference       operator*() const       {\n+\t}\n+\tbool       operator!=(const _Self& __x) const       {\n+\t}\n+    };\n+    template<typename _Tp, typename _Alloc>     class _List_base     {\n+    protected:\n+\ttypedef typename _Alloc::template rebind<_List_node<_Tp> >::other         _Node_alloc_type;\n+\tstruct _List_impl       : public _Node_alloc_type       {\n+\t    __detail::_List_node_base _M_node;\n+\t    _List_impl()  : _Node_alloc_type(), _M_node()  {\n+\t    }\n+\t    _List_impl(const _Node_alloc_type& __a)  : _Node_alloc_type(__a), _M_node()  {\n+\t    }\n+\t};\n+\t_List_impl _M_impl;\n+\t~_List_base()       {\n+\t}\n+\tvoid       _M_clear();\n+    };\n+    template<typename _Tp, typename _Alloc = std::allocator<_Tp> >     class list : protected _List_base<_Tp, _Alloc>     {\n+\ttypedef _List_iterator<_Tp> iterator;\n+\ttypedef size_t size_type;\n+    public:\n+\titerator       begin()       {\n+\t}\n+\titerator       end()       {\n+\t}\n+\tbool       empty() const       {\n+\t}\n+\tsize_type       size() const       {\n+\t}\n+\tvoid       swap(list& __x)       {\n+\t}\n+\ttemplate<typename _StrictWeakOrdering>         void         merge(list& __x, _StrictWeakOrdering __comp);\n+\ttemplate<typename _StrictWeakOrdering>         void         sort(_StrictWeakOrdering);\n+    };\n+    template<typename _Tp, typename _Alloc>     template <typename _StrictWeakOrdering>       void       list<_Tp, _Alloc>::       merge(list& __x, _StrictWeakOrdering __comp)       {\n+\tif (this != &__x)    {\n+\t    iterator __first1 = begin();\n+\t    iterator __last1 = end();\n+\t    iterator __first2 = __x.begin();\n+\t    iterator __last2 = __x.end();\n+\t    while (__first1 != __last1 && __first2 != __last2)        if (__comp(*__first2, *__first1))   {\n+\t\titerator __next = __first2;\n+\t\t__first2 = __next;\n+\t    }\n+\t}\n+    }\n+    template<typename _Tp, typename _Alloc>     template <typename _StrictWeakOrdering>       void       list<_Tp, _Alloc>::       sort(_StrictWeakOrdering __comp)       {\n+\tif (this->_M_impl._M_node._M_next != &this->_M_impl._M_node      && this->_M_impl._M_node._M_next->_M_next != &this->_M_impl._M_node)    {\n+\t    list __carry;\n+\t    list __tmp[64];\n+\t    list * __fill = &__tmp[0];\n+\t    list * __counter;\n+\t    do        {\n+\t\tfor(__counter = &__tmp[0];\n+\t\t    __counter != __fill && !__counter->empty();\n+\t\t    ++__counter)     {       __counter->merge(__carry, __comp);       __carry.swap(*__counter);     }\n+\t    }\n+\t    while ( !empty() );\n+\t    for (__counter = &__tmp[1];\n+\t\t __counter != __fill;\n+\t\t ++__counter)        __counter->merge(*(__counter - 1), __comp);\n+\t}\n+    }\n+}\n+namespace gloox {\n+    class Tag   {\n+    };\n+    class StanzaExtension   {\n+    };\n+}\n+namespace gloox {\n+}\n+using namespace gloox;\n+class AbstractPurpleRequest {\n+};\n+class AdhocCommandHandler : public AbstractPurpleRequest {\n+};\n+class AdhocTag : public Tag {\n+};\n+class AbstractConfigInterfaceHandler {\n+};\n+namespace gloox {\n+    class DataFormField   {\n+    public:\n+\tconst std::string& value() const {\n+\t}\n+    };\n+    class DataFormFieldContainer   {\n+    public:\n+\tbool hasField( const std::string& field ) const         {\n+\t}\n+\tDataFormField* field( const std::string& field ) const;\n+    };\n+    class DataForm : public StanzaExtension, public DataFormFieldContainer   {\n+    };\n+}\n+enum {\n+    SORT_BY_JID,  SORT_BY_UIN,  SORT_BY_BUDDIES, };\n+struct SortData {\n+};\n+struct ListData {\n+    std::list<SortData> output;\n+    int sort_by;\n+};\n+class AdhocAdmin : public AdhocCommandHandler, public AbstractConfigInterfaceHandler {\n+    AdhocTag *handleAdhocTag(Tag *stanzaTag);\n+    AdhocTag *handleUnregisterUserForm(Tag *tag, const DataForm &form);\n+    AdhocTag *handleListUsersForm(Tag *tag, const DataForm &form);\n+    ListData m_listUsersData;\n+};\n+namespace gloox {\n+}\n+static bool compareIDataASC(SortData &a, SortData &b) {\n+}\n+AdhocTag *AdhocAdmin::handleListUsersForm(Tag *tag, const DataForm &form) {\n+    ListData &data = m_listUsersData;\n+    if (data.output.size() == 0) {\n+\tif (!form.hasField(\"users_vip\") || !form.hasField(\"show_jid\") || !form.hasField(\"show_uin\")    || !form.hasField(\"show_buddies\") || !form.hasField(\"show_sort_by\") || !form.hasField(\"show_sort_order\")    || !form.hasField(\"show_max_per_page\")   ) {\n+\t}\n+\tbool sort_asc = form.field(\"show_sort_order\")->value() == \"asc\";\n+\tif (data.sort_by == SORT_BY_BUDDIES) {\n+\t    if (sort_asc)     data.output.sort(compareIDataASC);\n+\t}\n+\telse {\n+\t}\n+    }\n+}"}, {"sha": "b5339c4066e1a1c1b040eaf0501ea2c15f327e35", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f8e7a96c2d45daf5ee6e0ce9a1cbe4c80cbf96b/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f8e7a96c2d45daf5ee6e0ce9a1cbe4c80cbf96b/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=9f8e7a96c2d45daf5ee6e0ce9a1cbe4c80cbf96b", "patch": "@@ -2208,8 +2208,11 @@ copy_loops (bitmap blocks_to_copy,\n \n \t  /* Assign the new loop its header and latch and associate\n \t     those with the new loop.  */\n-\t  dest_loop->header = (basic_block)src_loop->header->aux;\n-\t  dest_loop->header->loop_father = dest_loop;\n+\t  if (src_loop->header != NULL)\n+\t    {\n+\t      dest_loop->header = (basic_block)src_loop->header->aux;\n+\t      dest_loop->header->loop_father = dest_loop;\n+\t    }\n \t  if (src_loop->latch != NULL)\n \t    {\n \t      dest_loop->latch = (basic_block)src_loop->latch->aux;\n@@ -2336,6 +2339,11 @@ copy_cfg_body (copy_body_data * id, gcov_type count, int frequency_scale,\n       loops_state_set (LOOPS_NEED_FIXUP);\n     }\n \n+  /* If the loop tree in the source function needed fixup, mark the\n+     destination loop tree for fixup, too.  */\n+  if (loops_for_fn (src_cfun)->state & LOOPS_NEED_FIXUP)\n+    loops_state_set (LOOPS_NEED_FIXUP);\n+\n   if (gimple_in_ssa_p (cfun))\n     FOR_ALL_BB_FN (bb, cfun_to_copy)\n       if (!blocks_to_copy"}]}