{"sha": "ce45ef468cb3183890e4a159b9757bf640216558", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2U0NWVmNDY4Y2IzMTgzODkwZTRhMTU5Yjk3NTdiZjY0MDIxNjU1OA==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "2005-08-16T15:13:40Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2005-08-16T15:13:40Z"}, "message": "rs6000.md (ltu<mode>): Convert to mode macro.\n\n        * config/rs6000/rs6000.md (ltu<mode>): Convert to mode macro.\n        (neg_ltu<mode>): Same.\n        (gtu<mode>): Same.\n        (neg_gtu<mode>): Same.\n\nFrom-SVN: r103159", "tree": {"sha": "d269e3c19671d847d67fec9e97862bb54b8189a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d269e3c19671d847d67fec9e97862bb54b8189a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ce45ef468cb3183890e4a159b9757bf640216558", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce45ef468cb3183890e4a159b9757bf640216558", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce45ef468cb3183890e4a159b9757bf640216558", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce45ef468cb3183890e4a159b9757bf640216558/comments", "author": null, "committer": null, "parents": [{"sha": "d110b74089c5edde21dd46fbcf35659cbc1f98d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d110b74089c5edde21dd46fbcf35659cbc1f98d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d110b74089c5edde21dd46fbcf35659cbc1f98d0"}], "stats": {"total": 106, "additions": 36, "deletions": 70}, "files": [{"sha": "1c23f858125e795f0c97e5ac3bf9ebe1be68ad8c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce45ef468cb3183890e4a159b9757bf640216558/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce45ef468cb3183890e4a159b9757bf640216558/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ce45ef468cb3183890e4a159b9757bf640216558", "patch": "@@ -1,3 +1,10 @@\n+2005-08-16  David Edelsohn  <edelsohn@gnu.org>\n+\n+\t* config/rs6000/rs6000.md (ltu<mode>): Convert to mode macro.\n+\t(neg_ltu<mode>): Same.\n+\t(gtu<mode>): Same.\n+\t(neg_gtu<mode>): Same.\n+\n 2005-08-16  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n \n \t* builtins.c (expand_builtin_strcat): Remove superfluous call to fold."}, {"sha": "8ed55f4ad92fdb991c5d09eceff244500f028cc8", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 29, "deletions": 70, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce45ef468cb3183890e4a159b9757bf640216558/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce45ef468cb3183890e4a159b9757bf640216558/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=ce45ef468cb3183890e4a159b9757bf640216558", "patch": "@@ -11321,7 +11321,7 @@\n \n ;; Simplify (ne X (const_int 0)) on the PowerPC.  No need to on the Power,\n ;; since it nabs/sr is just as fast.\n-(define_insn \"*ne0\"\n+(define_insn \"*ne0si\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=&r\")\n \t(lshiftrt:SI (neg:SI (abs:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")))\n \t\t     (const_int 31)))\n@@ -11331,7 +11331,7 @@\n   [(set_attr \"type\" \"two\")\n    (set_attr \"length\" \"8\")])\n \n-(define_insn \"\"\n+(define_insn \"*ne0di\"\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n \t(lshiftrt:DI (neg:DI (abs:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r\")))\n \t\t     (const_int 63)))\n@@ -12024,26 +12024,15 @@\n   \"doz%I2 %0,%1,%2\\;nabs %0,%0\\;{srai|srawi} %0,%0,31\"\n   [(set_attr \"length\" \"12\")])\n \n-(define_insn_and_split \"\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n-\t(ltu:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t(match_operand:SI 2 \"reg_or_neg_short_operand\" \"r,P\")))]\n-  \"TARGET_32BIT\"\n-  \"#\"\n-  \"TARGET_32BIT\"\n-  [(set (match_dup 0) (neg:SI (ltu:SI (match_dup 1) (match_dup 2))))\n-   (set (match_dup 0) (neg:SI (match_dup 0)))]\n-  \"\")\n-\n-(define_insn_and_split \"\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n-\t(ltu:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t(match_operand:DI 2 \"reg_or_neg_short_operand\" \"r,P\")))]\n-  \"TARGET_64BIT\"\n+(define_insn_and_split \"*ltu<mode>\"\n+  [(set (match_operand:P 0 \"gpc_reg_operand\" \"=r,r\")\n+\t(ltu:P (match_operand:P 1 \"gpc_reg_operand\" \"r,r\")\n+\t       (match_operand:P 2 \"reg_or_neg_short_operand\" \"r,P\")))]\n+  \"\"\n   \"#\"\n-  \"TARGET_64BIT\"\n-  [(set (match_dup 0) (neg:DI (ltu:DI (match_dup 1) (match_dup 2))))\n-   (set (match_dup 0) (neg:DI (match_dup 0)))]\n+  \"\"\n+  [(set (match_dup 0) (neg:P (ltu:P (match_dup 1) (match_dup 2))))\n+   (set (match_dup 0) (neg:P (match_dup 0)))]\n   \"\")\n \n (define_insn \"\"\n@@ -12172,22 +12161,11 @@\n \t\t    (const_int 0)))]\n   \"\")\n \n-(define_insn \"\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n-\t(neg:SI (ltu:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t\t(match_operand:SI 2 \"reg_or_neg_short_operand\" \"r,P\"))))]\n-  \"TARGET_32BIT\"\n-  \"@\n-   {sf|subfc} %0,%2,%1\\;{sfe|subfe} %0,%0,%0\n-   {ai|addic} %0,%1,%n2\\;{sfe|subfe} %0,%0,%0\"\n-  [(set_attr \"type\" \"two\")\n-   (set_attr \"length\" \"8\")])\n-\n-(define_insn \"\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n-\t(neg:DI (ltu:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t\t(match_operand:DI 2 \"reg_or_neg_short_operand\" \"r,P\"))))]\n-  \"TARGET_64BIT\"\n+(define_insn \"*neg_ltu<mode>\"\n+  [(set (match_operand:P 0 \"gpc_reg_operand\" \"=r,r\")\n+\t(neg:P (ltu:P (match_operand:P 1 \"gpc_reg_operand\" \"r,r\")\n+\t\t      (match_operand:P 2 \"reg_or_neg_short_operand\" \"r,P\"))))]\n+  \"\"\n   \"@\n    {sf|subfc} %0,%2,%1\\;{sfe|subfe} %0,%0,%0\n    {ai|addic} %0,%1,%n2\\;{sfe|subfe} %0,%0,%0\"\n@@ -12953,26 +12931,15 @@\n   \"doz %0,%2,%1\\;nabs %0,%0\\;{srai|srawi} %0,%0,31\"\n   [(set_attr \"length\" \"12\")])\n \n-(define_insn_and_split \"\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n-        (gtu:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n-                (match_operand:SI 2 \"reg_or_short_operand\" \"rI\")))]\n-  \"TARGET_32BIT\"\n-  \"#\"\n-  \"TARGET_32BIT\"\n-  [(set (match_dup 0) (neg:SI (gtu:SI (match_dup 1) (match_dup 2))))\n-   (set (match_dup 0) (neg:SI (match_dup 0)))]\n-  \"\")\n-\n-(define_insn_and_split \"\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n-        (gtu:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r\")\n-                (match_operand:DI 2 \"reg_or_short_operand\" \"rI\")))]\n-  \"TARGET_64BIT\"\n+(define_insn_and_split \"*gtu<mode>\"\n+  [(set (match_operand:P 0 \"gpc_reg_operand\" \"=r\")\n+\t(gtu:P (match_operand:P 1 \"gpc_reg_operand\" \"r\")\n+\t       (match_operand:P 2 \"reg_or_short_operand\" \"rI\")))]\n+  \"\"\n   \"#\"\n-  \"TARGET_64BIT\"\n-  [(set (match_dup 0) (neg:DI (gtu:DI (match_dup 1) (match_dup 2))))\n-   (set (match_dup 0) (neg:DI (match_dup 0)))]\n+  \"\"\n+  [(set (match_dup 0) (neg:P (gtu:P (match_dup 1) (match_dup 2))))\n+   (set (match_dup 0) (neg:P (match_dup 0)))]\n   \"\")\n \n (define_insn \"\"\n@@ -13199,23 +13166,15 @@\n \t\t    (const_int 0)))]\n   \"\")\n \n-(define_insn \"\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(neg:SI (gtu:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n-\t\t\t(match_operand:SI 2 \"reg_or_short_operand\" \"rI\"))))]\n-  \"TARGET_32BIT\"\n+(define_insn \"*neg_gtu<mode>\"\n+  [(set (match_operand:P 0 \"gpc_reg_operand\" \"=r\")\n+\t(neg:P (gtu:P (match_operand:P 1 \"gpc_reg_operand\" \"r\")\n+\t\t      (match_operand:P 2 \"reg_or_short_operand\" \"rI\"))))]\n+  \"\"\n   \"{sf%I2|subf%I2c} %0,%1,%2\\;{sfe|subfe} %0,%0,%0\"\n   [(set_attr \"type\" \"two\")\n    (set_attr \"length\" \"8\")])\n \n-(define_insn \"\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n-\t(neg:DI (gtu:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r\")\n-\t\t\t(match_operand:DI 2 \"reg_or_short_operand\" \"rI\"))))]\n-  \"TARGET_64BIT\"\n-  \"subf%I2c %0,%1,%2\\;subfe %0,%0,%0\"\n-  [(set_attr \"type\" \"two\")\n-   (set_attr \"length\" \"8\")])\n \f\n ;; Define both directions of branch and return.  If we need a reload\n ;; register, we'd rather use CR0 since it is much easier to copy a\n@@ -13464,7 +13423,7 @@\n   operands[4] = gen_reg_rtx (DImode);\n }\")\n \n-(define_insn \"\"\n+(define_insn \"*tablejump<mode>_internal1\"\n   [(set (pc)\n \t(match_operand:P 0 \"register_operand\" \"c,*l\"))\n    (use (label_ref (match_operand 1 \"\" \"\")))]"}]}