{"sha": "d7ca4dfe8dc96c7e78a8fbfedda2558fca2aa277", "node_id": "C_kwDOANBUbNoAKGQ3Y2E0ZGZlOGRjOTZjN2U3OGE4ZmJmZWRkYTI1NThmY2EyYWEyNzc", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2022-01-27T16:13:41Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-05-11T08:53:17Z"}, "message": "[Ada] Avoid crash for -gnatR -gnatc\n\nIf the -gnatR -gnatc are both given, then the compiler crashes.  This\npatch fixes that, and avoids printing the uncomputed sizes and\nalignments that were causing the crash. (Previous versions of the\ncompiler printed incorrect values in such cases.)\n\ngcc/ada/\n\n\t* repinfo.adb (List_Object_Info): Do not try to print values\n\tthat have not been computed (and so are No_Uint).\n\t(Rep_Not_Constant): Reverse sense and change name to\n\tCompile_Time_Known_Rep. This makes the code at call sites a\n\tlittle more readable. Simplify code to a single return\n\tstatement.", "tree": {"sha": "56e2c0b0bd104a4698d319bdb3a0bd1085c20597", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/56e2c0b0bd104a4698d319bdb3a0bd1085c20597"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d7ca4dfe8dc96c7e78a8fbfedda2558fca2aa277", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7ca4dfe8dc96c7e78a8fbfedda2558fca2aa277", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7ca4dfe8dc96c7e78a8fbfedda2558fca2aa277", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7ca4dfe8dc96c7e78a8fbfedda2558fca2aa277/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7d9fdf5e0ee4c34a880139254340b4165016289", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7d9fdf5e0ee4c34a880139254340b4165016289", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7d9fdf5e0ee4c34a880139254340b4165016289"}], "stats": {"total": 83, "additions": 38, "deletions": 45}, "files": [{"sha": "df3078805400f738c97c7a7bf34e2616bc24e9ac", "filename": "gcc/ada/repinfo.adb", "status": "modified", "additions": 38, "deletions": 45, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7ca4dfe8dc96c7e78a8fbfedda2558fca2aa277/gcc%2Fada%2Frepinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7ca4dfe8dc96c7e78a8fbfedda2558fca2aa277/gcc%2Fada%2Frepinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frepinfo.adb?ref=d7ca4dfe8dc96c7e78a8fbfedda2558fca2aa277", "patch": "@@ -190,9 +190,9 @@ package body Repinfo is\n    procedure List_Type_Info (Ent : Entity_Id);\n    --  List type info for type Ent\n \n-   function Rep_Not_Constant (Val : Node_Ref_Or_Val) return Boolean;\n-   --  Returns True if Val represents a variable value, and False if it\n-   --  represents a value that is fixed at compile time.\n+   function Compile_Time_Known_Rep (Val : Node_Ref_Or_Val) return Boolean;\n+   --  Returns True if Val represents a representation value that is known at\n+   --  compile time.\n \n    procedure Spaces (N : Natural);\n    --  Output given number of spaces\n@@ -908,10 +908,12 @@ package body Repinfo is\n \n    procedure List_Object_Info (Ent : Entity_Id) is\n    begin\n-      --  The information has not been computed in a generic unit, so don't try\n-      --  to print it.\n+      --  If size and alignment have not been computed (e.g. if we are in a\n+      --  generic unit, or if the back end is not being run), don't try to\n+      --  print them.\n \n-      if Sem_Util.In_Generic_Scope (Ent) then\n+      pragma Assert (Known_Esize (Ent) = Known_Alignment (Ent));\n+      if not Known_Alignment (Ent) then\n          return;\n       end if;\n \n@@ -1055,20 +1057,7 @@ package body Repinfo is\n                Get_Decoded_Name_String (Chars (Comp));\n                Name_Length := Prefix_Length + Name_Len;\n \n-               if Rep_Not_Constant (Bofs) then\n-\n-                  --  If the record is not packed, then we know that all fields\n-                  --  whose position is not specified have starting normalized\n-                  --  bit position of zero.\n-\n-                  if not Known_Normalized_First_Bit (Comp)\n-                    and then not Is_Packed (Ent)\n-                  then\n-                     Set_Normalized_First_Bit (Comp, Uint_0);\n-                  end if;\n-\n-                  UI_Image_Length := 2; -- For \"??\" marker\n-               else\n+               if Compile_Time_Known_Rep (Bofs) then\n                   Npos := Bofs / SSU;\n                   Fbit := Bofs mod SSU;\n \n@@ -1098,6 +1087,18 @@ package body Repinfo is\n                   end if;\n \n                   UI_Image (Spos);\n+               else\n+                  --  If the record is not packed, then we know that all fields\n+                  --  whose position is not specified have starting normalized\n+                  --  bit position of zero.\n+\n+                  if not Known_Normalized_First_Bit (Comp)\n+                    and then not Is_Packed (Ent)\n+                  then\n+                     Set_Normalized_First_Bit (Comp, Uint_0);\n+                  end if;\n+\n+                  UI_Image_Length := 2; -- For \"??\" marker\n                end if;\n \n                Max_Name_Length := Natural'Max (Max_Name_Length, Name_Length);\n@@ -2118,18 +2119,14 @@ package body Repinfo is\n       end if;\n    end List_Type_Info;\n \n-   ----------------------\n-   -- Rep_Not_Constant --\n-   ----------------------\n+   ----------------------------\n+   -- Compile_Time_Known_Rep --\n+   ----------------------------\n \n-   function Rep_Not_Constant (Val : Node_Ref_Or_Val) return Boolean is\n+   function Compile_Time_Known_Rep (Val : Node_Ref_Or_Val) return Boolean is\n    begin\n-      if No (Val) or else Val < 0 then\n-         return True;\n-      else\n-         return False;\n-      end if;\n-   end Rep_Not_Constant;\n+      return Present (Val) and then Val >= 0;\n+   end Compile_Time_Known_Rep;\n \n    ---------------\n    -- Rep_Value --\n@@ -2408,24 +2405,20 @@ package body Repinfo is\n \n    procedure Write_Val (Val : Node_Ref_Or_Val; Paren : Boolean := False) is\n    begin\n-      if Rep_Not_Constant (Val) then\n-         if List_Representation_Info < 3 or else No (Val) then\n-            Write_Unknown_Val;\n-\n-         else\n-            if Paren then\n-               Write_Char ('(');\n-            end if;\n+      if Compile_Time_Known_Rep (Val) then\n+         UI_Write (Val, Decimal);\n+      elsif List_Representation_Info < 3 or else No (Val) then\n+         Write_Unknown_Val;\n+      else\n+         if Paren then\n+            Write_Char ('(');\n+         end if;\n \n-            List_GCC_Expression (Val);\n+         List_GCC_Expression (Val);\n \n-            if Paren then\n-               Write_Char (')');\n-            end if;\n+         if Paren then\n+            Write_Char (')');\n          end if;\n-\n-      else\n-         UI_Write (Val, Decimal);\n       end if;\n    end Write_Val;\n "}]}