{"sha": "5f9669d9e23a1116e040c80e0f3d4f43639bda52", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWY5NjY5ZDllMjNhMTExNmUwNDBjODBlMGYzZDRmNDM2MzliZGE1Mg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-07-31T21:08:00Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-07-31T21:08:00Z"}, "message": "c++: Use error_at rather than warning_at for missing return in constexpr functions [PR96182]\n\nFor C++11 we already emit an error if a constexpr function doesn't contain\na return statement, because in C++11 that is the only thing it needs to\ncontain, but for C++14 we would normally issue a -Wreturn-type warning.\n\nAs mentioned by Jonathan, such constexpr functions are invalid, no\ndiagnostics required, because there doesn't exist any arguments for\nwhich it would result in valid constant expression.\n\nThis raises it to an error in such cases.  The !LAMBDA_TYPE_P case\nis to avoid error on g++.dg/pr81194.C where the user didn't write\nconstexpr anywhere and the operator() is compiler generated.\n\n2020-07-31  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/96182\n\t* decl.c (finish_function): In constexpr functions use for C++14 and\n\tlater error instead of warning if no return statement is present and\n\tdiagnose it regardless of warn_return_type.  Move the warn_return_type\n\tdiagnostics earlier in the function.\n\n\t* g++.dg/cpp1y/constexpr-96182.C: New test.\n\t* g++.dg/other/error35.C (S<T>::g()): Add return statement.\n\t* g++.dg/cpp1y/pr63996.C (foo): Likewise.\n\t* g++.dg/cpp1y/constexpr-return2.C (f): Likewise.\n\t* g++.dg/cpp1y/var-templ44.C (make_array): Add throw 1.", "tree": {"sha": "4ec47adc8084756c29bc4247c4a22dbcd46755f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ec47adc8084756c29bc4247c4a22dbcd46755f7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f9669d9e23a1116e040c80e0f3d4f43639bda52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f9669d9e23a1116e040c80e0f3d4f43639bda52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f9669d9e23a1116e040c80e0f3d4f43639bda52", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f9669d9e23a1116e040c80e0f3d4f43639bda52/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8011f718e241febd6b7a9dae01cde49817f299c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8011f718e241febd6b7a9dae01cde49817f299c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8011f718e241febd6b7a9dae01cde49817f299c4"}], "stats": {"total": 94, "additions": 55, "deletions": 39}, "files": [{"sha": "a68bbe04da7e105a79e20110ffca4df599212e7d", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 45, "deletions": 38, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f9669d9e23a1116e040c80e0f3d4f43639bda52/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f9669d9e23a1116e040c80e0f3d4f43639bda52/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=5f9669d9e23a1116e040c80e0f3d4f43639bda52", "patch": "@@ -17112,6 +17112,51 @@ finish_function (bool inline_p)\n \t\t\t\t      DECL_ATTRIBUTES (fndecl)))\n       omp_declare_variant_finalize (fndecl, attr);\n \n+  /* Complain if there's just no return statement.  */\n+  if ((warn_return_type\n+       || (cxx_dialect >= cxx14\n+\t   && DECL_DECLARED_CONSTEXPR_P (fndecl)))\n+      && !VOID_TYPE_P (TREE_TYPE (fntype))\n+      && !dependent_type_p (TREE_TYPE (fntype))\n+      && !current_function_returns_value && !current_function_returns_null\n+      /* Don't complain if we abort or throw.  */\n+      && !current_function_returns_abnormally\n+      /* Don't complain if there's an infinite loop.  */\n+      && !current_function_infinite_loop\n+      /* Don't complain if we are declared noreturn.  */\n+      && !TREE_THIS_VOLATILE (fndecl)\n+      && !DECL_NAME (DECL_RESULT (fndecl))\n+      && !TREE_NO_WARNING (fndecl)\n+      /* Structor return values (if any) are set by the compiler.  */\n+      && !DECL_CONSTRUCTOR_P (fndecl)\n+      && !DECL_DESTRUCTOR_P (fndecl)\n+      && targetm.warn_func_return (fndecl))\n+    {\n+      gcc_rich_location richloc (input_location);\n+      /* Potentially add a \"return *this;\" fix-it hint for\n+\t assignment operators.  */\n+      if (IDENTIFIER_ASSIGN_OP_P (DECL_NAME (fndecl)))\n+\t{\n+\t  tree valtype = TREE_TYPE (DECL_RESULT (fndecl));\n+\t  if (TREE_CODE (valtype) == REFERENCE_TYPE\n+\t      && current_class_ref\n+\t      && same_type_ignoring_top_level_qualifiers_p\n+\t\t  (TREE_TYPE (valtype), TREE_TYPE (current_class_ref))\n+\t      && global_dc->option_enabled (OPT_Wreturn_type,\n+\t\t\t\t\t    global_dc->lang_mask,\n+\t\t\t\t\t    global_dc->option_state))\n+\t    add_return_star_this_fixit (&richloc, fndecl);\n+\t}\n+      if (cxx_dialect >= cxx14\n+\t  && DECL_DECLARED_CONSTEXPR_P (fndecl))\n+\terror_at (&richloc, \"no return statement in %<constexpr%> function \"\n+\t\t\t    \"returning non-void\");\n+      else if (warning_at (&richloc, OPT_Wreturn_type,\n+\t\t\t   \"no return statement in function returning \"\n+\t\t\t   \"non-void\"))\n+\tTREE_NO_WARNING (fndecl) = 1;\n+    }\n+\n   /* Lambda closure members are implicitly constexpr if possible.  */\n   if (cxx_dialect >= cxx17\n       && LAMBDA_TYPE_P (CP_DECL_CONTEXT (fndecl)))\n@@ -17163,44 +17208,6 @@ finish_function (bool inline_p)\n      to the FUNCTION_DECL node itself.  */\n   BLOCK_SUPERCONTEXT (DECL_INITIAL (fndecl)) = fndecl;\n \n-  /* Complain if there's just no return statement.  */\n-  if (warn_return_type\n-      && !VOID_TYPE_P (TREE_TYPE (fntype))\n-      && !dependent_type_p (TREE_TYPE (fntype))\n-      && !current_function_returns_value && !current_function_returns_null\n-      /* Don't complain if we abort or throw.  */\n-      && !current_function_returns_abnormally\n-      /* Don't complain if there's an infinite loop.  */\n-      && !current_function_infinite_loop\n-      /* Don't complain if we are declared noreturn.  */\n-      && !TREE_THIS_VOLATILE (fndecl)\n-      && !DECL_NAME (DECL_RESULT (fndecl))\n-      && !TREE_NO_WARNING (fndecl)\n-      /* Structor return values (if any) are set by the compiler.  */\n-      && !DECL_CONSTRUCTOR_P (fndecl)\n-      && !DECL_DESTRUCTOR_P (fndecl)\n-      && targetm.warn_func_return (fndecl))\n-    {\n-      gcc_rich_location richloc (input_location);\n-      /* Potentially add a \"return *this;\" fix-it hint for\n-\t assignment operators.  */\n-      if (IDENTIFIER_ASSIGN_OP_P (DECL_NAME (fndecl)))\n-\t{\n-\t  tree valtype = TREE_TYPE (DECL_RESULT (fndecl));\n-\t  if (TREE_CODE (valtype) == REFERENCE_TYPE\n-\t      && current_class_ref\n-\t      && same_type_ignoring_top_level_qualifiers_p\n-\t\t  (TREE_TYPE (valtype), TREE_TYPE (current_class_ref))\n-\t      && global_dc->option_enabled (OPT_Wreturn_type,\n-\t\t\t\t\t    global_dc->lang_mask,\n-\t\t\t\t\t    global_dc->option_state))\n-\t    add_return_star_this_fixit (&richloc, fndecl);\n-\t}\n-      if (warning_at (&richloc, OPT_Wreturn_type,\n-\t  \"no return statement in function returning non-void\"))\n-\tTREE_NO_WARNING (fndecl) = 1;\n-    }\n-\n   /* Store the end of the function, so that we get good line number\n      info for the epilogue.  */\n   cfun->function_end_locus = input_location;"}, {"sha": "9c07d7186ec7cadbf3dfc9949831e88b26fe7c62", "filename": "gcc/testsuite/g++.dg/cpp1y/constexpr-96182.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f9669d9e23a1116e040c80e0f3d4f43639bda52/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-96182.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f9669d9e23a1116e040c80e0f3d4f43639bda52/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-96182.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-96182.C?ref=5f9669d9e23a1116e040c80e0f3d4f43639bda52", "patch": "@@ -0,0 +1,6 @@\n+// PR c++/96182\n+// { dg-do compile { target c++11 } }\n+\n+constexpr int foo () {} // { dg-error \"no return statement in 'constexpr' function returning non-void\" \"\" { target c++14 } }\n+// { dg-error \"body of 'constexpr' function 'constexpr int foo\\\\\\(\\\\\\)' not a return-statement\" \"\" { target c++11_only } .-1 }\n+// { dg-warning \"no return statement in function returning non-void\" \"\" { target c++11_only } .-2 }"}, {"sha": "3357fe3cf23c6bc7103859e826a176ed7dd347b4", "filename": "gcc/testsuite/g++.dg/cpp1y/constexpr-return2.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f9669d9e23a1116e040c80e0f3d4f43639bda52/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-return2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f9669d9e23a1116e040c80e0f3d4f43639bda52/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-return2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-return2.C?ref=5f9669d9e23a1116e040c80e0f3d4f43639bda52", "patch": "@@ -3,6 +3,7 @@\n \n constexpr int f (int i)\n {\n+  if (i == -1) return 0;\n }\n \n constexpr int i = f(42);\t// { dg-error \"flows off the end|in .constexpr. expansion of \" }"}, {"sha": "8eee2e0af3090c013921a003e50a37435ae26861", "filename": "gcc/testsuite/g++.dg/cpp1y/pr63996.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f9669d9e23a1116e040c80e0f3d4f43639bda52/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr63996.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f9669d9e23a1116e040c80e0f3d4f43639bda52/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr63996.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr63996.C?ref=5f9669d9e23a1116e040c80e0f3d4f43639bda52", "patch": "@@ -5,6 +5,7 @@ constexpr int\n foo (int i)\n {\n   int a[i] = { }; // { dg-error \"7:ISO C\\\\+\\\\+ forbids variable length array .a\" }\n+  if (i == 23) return 0;\n }\n \n constexpr int j = foo (1); // { dg-error \"flows off the end|in .constexpr. expansion of\" }"}, {"sha": "74954ed102c99221cb8e281bbde815eaa5d6909c", "filename": "gcc/testsuite/g++.dg/cpp1y/var-templ44.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f9669d9e23a1116e040c80e0f3d4f43639bda52/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ44.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f9669d9e23a1116e040c80e0f3d4f43639bda52/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ44.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ44.C?ref=5f9669d9e23a1116e040c80e0f3d4f43639bda52", "patch": "@@ -26,5 +26,6 @@ constexpr auto make_array()\n     -> array<conditional_t<is_void_v<_Dest>, common_type_t<>, _Dest>,\n              sizeof...(_Types)> {\n   static_assert(__or_<__not_<is_void<_Dest>>, __and_<>>::value, \"\"); // { dg-error \"static assert\" }\n+  throw 1;\n }\n auto d = make_array();"}, {"sha": "063bc4a9680e3eb332716e02e5c2eba33107cb23", "filename": "gcc/testsuite/g++.dg/other/error35.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f9669d9e23a1116e040c80e0f3d4f43639bda52/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ferror35.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f9669d9e23a1116e040c80e0f3d4f43639bda52/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ferror35.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ferror35.C?ref=5f9669d9e23a1116e040c80e0f3d4f43639bda52", "patch": "@@ -9,6 +9,6 @@ template <typename> struct S {\n enum S<char>::E;\n template <typename T> enum S<T>::E : int { b };\n template <typename T>\n-constexpr int S<T>::g() const { b; } // { dg-error \"not declared\" }\n+constexpr int S<T>::g() const { b; if (false) return 0; } // { dg-error \"not declared\" }\n static_assert(S<char>().g() == 1, \"\"); // { dg-error \"\" }\n // { dg-message \"in .constexpr. expansion of\" \"\" { target *-*-* } .-1 }"}]}