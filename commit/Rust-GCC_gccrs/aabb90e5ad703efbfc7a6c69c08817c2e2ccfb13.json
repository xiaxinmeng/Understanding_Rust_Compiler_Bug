{"sha": "aabb90e5ad703efbfc7a6c69c08817c2e2ccfb13", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWFiYjkwZTVhZDcwM2VmYmZjN2E2YzY5YzA4ODE3YzJlMmNjZmIxMw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-01-13T12:05:27Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-01-13T12:05:27Z"}, "message": "re PR c/8081 (ICE with variably sized types returned from nested functions)\n\n2012-01-13  Richard Guenther  <rguenther@suse.de>\n\n\tPR middle-end/8081\n\t* gimplify.c (gimplify_modify_expr_rhs): For calls with a\n\tvariable-sized result always use RSO.\n\n\t* gcc.dg/torture/pr8081.c: New testcase.\n\nFrom-SVN: r183153", "tree": {"sha": "3d05814c131d0a75d48d9673832203b3d531b7e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3d05814c131d0a75d48d9673832203b3d531b7e4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aabb90e5ad703efbfc7a6c69c08817c2e2ccfb13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aabb90e5ad703efbfc7a6c69c08817c2e2ccfb13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aabb90e5ad703efbfc7a6c69c08817c2e2ccfb13", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aabb90e5ad703efbfc7a6c69c08817c2e2ccfb13/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b9b16ad4092d4939889ea8a6aa2484cb92f0ab13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9b16ad4092d4939889ea8a6aa2484cb92f0ab13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9b16ad4092d4939889ea8a6aa2484cb92f0ab13"}], "stats": {"total": 42, "additions": 42, "deletions": 0}, "files": [{"sha": "6bd16d3fc2ceaaef6ffa4685529f903f47b92265", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aabb90e5ad703efbfc7a6c69c08817c2e2ccfb13/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aabb90e5ad703efbfc7a6c69c08817c2e2ccfb13/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=aabb90e5ad703efbfc7a6c69c08817c2e2ccfb13", "patch": "@@ -1,3 +1,9 @@\n+2012-01-13  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/8081\n+\t* gimplify.c (gimplify_modify_expr_rhs): For calls with a\n+\tvariable-sized result always use RSO.\n+\n 2012-01-12  DJ Delorie  <dj@redhat.com>\n \n \t* cfgexpand.c (convert_debug_memory_address): Allow any valid"}, {"sha": "99ae5ee4bc5e066a8b4c74d38835969b2f730a96", "filename": "gcc/gimplify.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aabb90e5ad703efbfc7a6c69c08817c2e2ccfb13/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aabb90e5ad703efbfc7a6c69c08817c2e2ccfb13/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=aabb90e5ad703efbfc7a6c69c08817c2e2ccfb13", "patch": "@@ -4417,6 +4417,11 @@ gimplify_modify_expr_rhs (tree *expr_p, tree *from_p, tree *to_p,\n \t\t/* It's OK to use the target directly if it's being\n \t\t   initialized. */\n \t\tuse_target = true;\n+\t      else if (variably_modified_type_p (TREE_TYPE (*to_p), NULL_TREE))\n+\t\t/* Always use the target and thus RSO for variable-sized types.\n+\t\t   GIMPLE cannot deal with a variable-sized assignment\n+\t\t   embedded in a call statement.  */\n+\t\tuse_target = true;\n \t      else if (TREE_CODE (*to_p) != SSA_NAME\n \t\t      && (!is_gimple_variable (*to_p)\n \t\t\t  || needs_to_live_in_memory (*to_p)))"}, {"sha": "cbee6be3d5da4520874f6fb23370f430d83fa62d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aabb90e5ad703efbfc7a6c69c08817c2e2ccfb13/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aabb90e5ad703efbfc7a6c69c08817c2e2ccfb13/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=aabb90e5ad703efbfc7a6c69c08817c2e2ccfb13", "patch": "@@ -1,3 +1,8 @@\n+2012-01-13  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/8081\n+\t* gcc.dg/torture/pr8081.c: New testcase.\n+\n 2012-01-13  Georg-Johann Lay  <avr@gjlay.de>\n \n \t* gcc.dg/pr46309.c: Set branch cost to greater 1 for avr."}, {"sha": "6899f6a1487755e6dd574abd8fd6f9d4b15984aa", "filename": "gcc/testsuite/gcc.dg/torture/pr8081.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aabb90e5ad703efbfc7a6c69c08817c2e2ccfb13/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr8081.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aabb90e5ad703efbfc7a6c69c08817c2e2ccfb13/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr8081.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr8081.c?ref=aabb90e5ad703efbfc7a6c69c08817c2e2ccfb13", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do run } */\n+\n+extern void abort (void);\n+int\n+main (int argc, char **argv)\n+{\n+  int size = 10;\n+  typedef struct\n+    {\n+      char val[size];\n+    }\n+  block;\n+  block a, b;\n+  block __attribute__((noinline))\n+  retframe_block ()\n+    {\n+      return *(block *) &b;\n+    }\n+  b.val[0] = -1;\n+  b.val[9] = -2;\n+  a=retframe_block ();\n+  if (a.val[0] != -1\n+      || a.val[9] != -2)\n+    abort ();\n+  return 0;\n+}"}]}