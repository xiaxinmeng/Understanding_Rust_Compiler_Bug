{"sha": "fc3ef6c4b1fad0d88a65043df8102437416b1df3", "node_id": "C_kwDOANBUbNoAKGZjM2VmNmM0YjFmYWQwZDg4YTY1MDQzZGY4MTAyNDM3NDE2YjFkZjM", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-06-03T12:13:35Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-06-10T16:09:34Z"}, "message": "Refactor how we track the current module scope id\n\nThis adds a module scope stack to the resolver class such that we don't\nhave to continually update our constructors but are able to track it as\npart of this context class instead.\n\nAddresses #1227", "tree": {"sha": "2ec71d2e2b0a412ab1cc6647fd9607a13c0f51ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2ec71d2e2b0a412ab1cc6647fd9607a13c0f51ef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fc3ef6c4b1fad0d88a65043df8102437416b1df3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc3ef6c4b1fad0d88a65043df8102437416b1df3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc3ef6c4b1fad0d88a65043df8102437416b1df3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc3ef6c4b1fad0d88a65043df8102437416b1df3/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6d32d59f1e6524df667262c509910e44151bbf2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6d32d59f1e6524df667262c509910e44151bbf2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6d32d59f1e6524df667262c509910e44151bbf2"}], "stats": {"total": 73, "additions": 58, "deletions": 15}, "files": [{"sha": "17d05c38cf2932c006134c00627d11eccac43443", "filename": "gcc/rust/resolve/rust-ast-resolve-base.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc3ef6c4b1fad0d88a65043df8102437416b1df3/gcc%2Frust%2Fresolve%2Frust-ast-resolve-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc3ef6c4b1fad0d88a65043df8102437416b1df3/gcc%2Frust%2Fresolve%2Frust-ast-resolve-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-base.h?ref=fc3ef6c4b1fad0d88a65043df8102437416b1df3", "patch": "@@ -199,10 +199,9 @@ class ResolverBase : public AST::ASTVisitor\n   void visit (AST::BareFunctionType &);\n \n protected:\n-  ResolverBase (NodeId parent, NodeId current_module = UNKNOWN_NODEID)\n+  ResolverBase (NodeId parent)\n     : resolver (Resolver::get ()), mappings (Analysis::Mappings::get ()),\n-      resolved_node (UNKNOWN_NODEID), parent (parent),\n-      current_module (current_module), locus (Location ())\n+      resolved_node (UNKNOWN_NODEID), parent (parent), locus (Location ())\n   {}\n \n   bool resolved () const { return resolved_node != UNKNOWN_NODEID; }\n@@ -216,7 +215,6 @@ class ResolverBase : public AST::ASTVisitor\n   Analysis::Mappings *mappings;\n   NodeId resolved_node;\n   NodeId parent;\n-  NodeId current_module;\n   Location locus;\n };\n "}, {"sha": "198c9c0ca3d6a9502d5ecee2a5d35a2d8c20f5f8", "filename": "gcc/rust/resolve/rust-ast-resolve-item.cc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc3ef6c4b1fad0d88a65043df8102437416b1df3/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc3ef6c4b1fad0d88a65043df8102437416b1df3/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.cc?ref=fc3ef6c4b1fad0d88a65043df8102437416b1df3", "patch": "@@ -253,12 +253,14 @@ ResolveItem::visit (AST::Module &module)\n   // FIXME: Should we reinsert a child here? Any reason we ResolveTopLevel::go\n   // in ResolveTopLevel::visit (AST::Module) as well as here?\n   for (auto &item : module.get_items ())\n-    ResolveTopLevel::go (item.get (), CanonicalPath::create_empty (), cpath,\n-\t\t\t module.get_node_id ());\n+    ResolveTopLevel::go (item.get (), CanonicalPath::create_empty (), cpath);\n \n+  resolver->push_new_module_scope (module.get_node_id ());\n   for (auto &item : module.get_items ())\n     ResolveItem::go (item.get (), path, cpath);\n \n+  resolver->pop_module_scope ();\n+\n   resolver->get_name_scope ().pop ();\n   resolver->get_type_scope ().pop ();\n   resolver->get_label_scope ().pop ();"}, {"sha": "7a1458e6143d7ba46a0b7d4810ae64c689f17c51", "filename": "gcc/rust/resolve/rust-ast-resolve-toplevel.h", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc3ef6c4b1fad0d88a65043df8102437416b1df3/gcc%2Frust%2Fresolve%2Frust-ast-resolve-toplevel.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc3ef6c4b1fad0d88a65043df8102437416b1df3/gcc%2Frust%2Fresolve%2Frust-ast-resolve-toplevel.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-toplevel.h?ref=fc3ef6c4b1fad0d88a65043df8102437416b1df3", "patch": "@@ -34,13 +34,15 @@ class ResolveTopLevel : public ResolverBase\n \n public:\n   static void go (AST::Item *item, const CanonicalPath &prefix,\n-\t\t  const CanonicalPath &canonical_prefix, NodeId current_module)\n+\t\t  const CanonicalPath &canonical_prefix)\n   {\n     if (item->is_marked_for_strip ())\n       return;\n \n-    ResolveTopLevel resolver (prefix, canonical_prefix, current_module);\n+    ResolveTopLevel resolver (prefix, canonical_prefix);\n     item->accept_vis (resolver);\n+\n+    NodeId current_module = resolver.resolver->peek_current_module_scope ();\n     resolver.mappings->insert_child_item_to_parent_module_mapping (\n       item->get_node_id (), current_module);\n   };\n@@ -64,11 +66,15 @@ class ResolveTopLevel : public ResolverBase\n \t\t\t\t     Definition{module.get_node_id (),\n \t\t\t\t\t\tmodule.get_node_id ()});\n \n+    NodeId current_module = resolver->peek_current_module_scope ();\n     mappings->insert_module_child_item (current_module, mod);\n     mappings->insert_module_child (current_module, module.get_node_id ());\n \n+    resolver->push_new_module_scope (module.get_node_id ());\n     for (auto &item : module.get_items ())\n-      ResolveTopLevel::go (item.get (), path, cpath, module.get_node_id ());\n+      ResolveTopLevel::go (item.get (), path, cpath);\n+\n+    resolver->pop_module_scope ();\n \n     mappings->insert_canonical_path (mappings->get_current_crate (),\n \t\t\t\t     module.get_node_id (), cpath);\n@@ -89,6 +95,7 @@ class ResolveTopLevel : public ResolverBase\n \trust_error_at (r, \"redefined multiple times\");\n       });\n \n+    NodeId current_module = resolver->peek_current_module_scope ();\n     mappings->insert_module_child_item (current_module, talias);\n     mappings->insert_canonical_path (mappings->get_current_crate (),\n \t\t\t\t     alias.get_node_id (), cpath);\n@@ -109,6 +116,7 @@ class ResolveTopLevel : public ResolverBase\n \trust_error_at (r, \"redefined multiple times\");\n       });\n \n+    NodeId current_module = resolver->peek_current_module_scope ();\n     mappings->insert_module_child_item (current_module, decl);\n     mappings->insert_canonical_path (mappings->get_current_crate (),\n \t\t\t\t     struct_decl.get_node_id (), cpath);\n@@ -130,8 +138,9 @@ class ResolveTopLevel : public ResolverBase\n       });\n \n     for (auto &variant : enum_decl.get_variants ())\n-      ResolveTopLevel::go (variant.get (), path, cpath, current_module);\n+      ResolveTopLevel::go (variant.get (), path, cpath);\n \n+    NodeId current_module = resolver->peek_current_module_scope ();\n     mappings->insert_module_child_item (current_module, decl);\n     mappings->insert_canonical_path (mappings->get_current_crate (),\n \t\t\t\t     enum_decl.get_node_id (), cpath);\n@@ -152,7 +161,6 @@ class ResolveTopLevel : public ResolverBase\n \trust_error_at (r, \"redefined multiple times\");\n       });\n \n-    mappings->insert_module_child_item (current_module, decl);\n     mappings->insert_canonical_path (mappings->get_current_crate (),\n \t\t\t\t     item.get_node_id (), cpath);\n   }\n@@ -229,6 +237,7 @@ class ResolveTopLevel : public ResolverBase\n \trust_error_at (r, \"redefined multiple times\");\n       });\n \n+    NodeId current_module = resolver->peek_current_module_scope ();\n     mappings->insert_module_child_item (current_module, decl);\n     mappings->insert_canonical_path (mappings->get_current_crate (),\n \t\t\t\t     struct_decl.get_node_id (), cpath);\n@@ -249,6 +258,7 @@ class ResolveTopLevel : public ResolverBase\n \trust_error_at (r, \"redefined multiple times\");\n       });\n \n+    NodeId current_module = resolver->peek_current_module_scope ();\n     mappings->insert_module_child_item (current_module, decl);\n     mappings->insert_canonical_path (mappings->get_current_crate (),\n \t\t\t\t     union_decl.get_node_id (), cpath);\n@@ -273,6 +283,7 @@ class ResolveTopLevel : public ResolverBase\n \t\t\t\t\t\tvar.get_node_id ()});\n     resolver->mark_decl_mutability (var.get_node_id (), var.is_mutable ());\n \n+    NodeId current_module = resolver->peek_current_module_scope ();\n     mappings->insert_module_child_item (current_module, decl);\n     mappings->insert_canonical_path (mappings->get_current_crate (),\n \t\t\t\t     var.get_node_id (), cpath);\n@@ -295,6 +306,7 @@ class ResolveTopLevel : public ResolverBase\n \t\t\t\t     Definition{constant.get_node_id (),\n \t\t\t\t\t\tconstant.get_node_id ()});\n \n+    NodeId current_module = resolver->peek_current_module_scope ();\n     mappings->insert_module_child_item (current_module, decl);\n     mappings->insert_canonical_path (mappings->get_current_crate (),\n \t\t\t\t     constant.get_node_id (), cpath);\n@@ -325,6 +337,7 @@ class ResolveTopLevel : public ResolverBase\n \t\t\t\t\tfunction.get_node_id ());\n       }\n \n+    NodeId current_module = resolver->peek_current_module_scope ();\n     mappings->insert_module_child_item (current_module, decl);\n     mappings->insert_canonical_path (mappings->get_current_crate (),\n \t\t\t\t     function.get_node_id (), cpath);\n@@ -403,6 +416,7 @@ class ResolveTopLevel : public ResolverBase\n     for (auto &item : trait.get_trait_items ())\n       ResolveTopLevelTraitItems::go (item.get (), path, cpath);\n \n+    NodeId current_module = resolver->peek_current_module_scope ();\n     mappings->insert_module_child_item (current_module, decl);\n     mappings->insert_canonical_path (mappings->get_current_crate (),\n \t\t\t\t     trait.get_node_id (), cpath);\n@@ -418,8 +432,8 @@ class ResolveTopLevel : public ResolverBase\n \n private:\n   ResolveTopLevel (const CanonicalPath &prefix,\n-\t\t   const CanonicalPath &canonical_prefix, NodeId current_module)\n-    : ResolverBase (UNKNOWN_NODEID, current_module), prefix (prefix),\n+\t\t   const CanonicalPath &canonical_prefix)\n+    : ResolverBase (UNKNOWN_NODEID), prefix (prefix),\n       canonical_prefix (canonical_prefix)\n   {}\n "}, {"sha": "8465162b565fb069a1696e165de43d07b6b29f9d", "filename": "gcc/rust/resolve/rust-ast-resolve.cc", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc3ef6c4b1fad0d88a65043df8102437416b1df3/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc3ef6c4b1fad0d88a65043df8102437416b1df3/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc?ref=fc3ef6c4b1fad0d88a65043df8102437416b1df3", "patch": "@@ -81,20 +81,29 @@ NameResolution::go (AST::Crate &crate)\n     = CanonicalPath::new_seg (scope_node_id, crate_name);\n   crate_prefix.set_crate_num (cnum);\n \n+  // setup the root scope\n+  resolver->push_new_module_scope (scope_node_id);\n+\n   // first gather the top-level namespace names then we drill down so this\n   // allows for resolving forward declarations since an impl block might have\n   // a Self type Foo which is defined after the impl block for example.\n   for (auto it = crate.items.begin (); it != crate.items.end (); it++)\n     ResolveTopLevel::go (it->get (), CanonicalPath::create_empty (),\n-\t\t\t crate_prefix, scope_node_id);\n+\t\t\t crate_prefix);\n \n   // FIXME remove this\n   if (saw_errors ())\n-    return;\n+    {\n+      resolver->pop_module_scope ();\n+      return;\n+    }\n \n   // next we can drill down into the items and their scopes\n   for (auto it = crate.items.begin (); it != crate.items.end (); it++)\n     ResolveItem::go (it->get (), CanonicalPath::create_empty (), crate_prefix);\n+\n+  // done\n+  resolver->pop_module_scope ();\n }\n \n // rust-ast-resolve-struct-expr-field.h"}, {"sha": "23a9d829b5823b29af1f257c4a259ffa8d8447ca", "filename": "gcc/rust/resolve/rust-name-resolver.h", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc3ef6c4b1fad0d88a65043df8102437416b1df3/gcc%2Frust%2Fresolve%2Frust-name-resolver.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc3ef6c4b1fad0d88a65043df8102437416b1df3/gcc%2Frust%2Fresolve%2Frust-name-resolver.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-name-resolver.h?ref=fc3ef6c4b1fad0d88a65043df8102437416b1df3", "patch": "@@ -166,6 +166,23 @@ class Resolver\n   void set_unit_type_node_id (NodeId id) { unit_ty_node_id = id; }\n   NodeId get_unit_type_node_id () { return unit_ty_node_id; }\n \n+  void push_new_module_scope (NodeId module_id)\n+  {\n+    current_module_stack.push_back (module_id);\n+  }\n+\n+  void pop_module_scope ()\n+  {\n+    rust_assert (!current_module_stack.empty ());\n+    current_module_stack.pop_back ();\n+  }\n+\n+  NodeId peek_current_module_scope () const\n+  {\n+    rust_assert (!current_module_stack.empty ());\n+    return current_module_stack.back ();\n+  }\n+\n private:\n   Resolver ();\n \n@@ -211,6 +228,9 @@ class Resolver\n   std::map<NodeId, bool> decl_mutability;\n   // map of resolved names and set of assignments to the decl\n   std::map<NodeId, std::set<NodeId>> assignment_to_decl;\n+\n+  // keep track of the current module scope ids\n+  std::vector<NodeId> current_module_stack;\n };\n \n } // namespace Resolver"}]}