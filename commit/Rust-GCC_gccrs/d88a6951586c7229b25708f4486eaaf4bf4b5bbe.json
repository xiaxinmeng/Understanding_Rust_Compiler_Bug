{"sha": "d88a6951586c7229b25708f4486eaaf4bf4b5bbe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDg4YTY5NTE1ODZjNzIyOWIyNTcwOGY0NDg2ZWFhZjRiZjRiNWJiZQ==", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2021-07-23T20:01:32Z"}, "committer": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2021-07-27T09:16:37Z"}, "message": "Don't use libgomp 'cbuf' buffering with OpenACC 'async'\n\nThe host data might not be computed yet (by an earlier asynchronous compute\nregion, for example.\n\n\tlibgomp/\n\t* target.c (gomp_coalesce_buf_add): Update comment.\n\t(gomp_copy_host2dev, gomp_map_vars_internal): Don't expect to see\n\t'aq && cbuf'.\n\t(gomp_map_vars_internal): Only 'if (!aq)', do\n\t'gomp_coalesce_buf_add'.\n\t* testsuite/libgomp.oacc-c-c++-common/async-data-1-2.c: Remove\n\tXFAIL.\n\nCo-Authored-By: Julian Brown <julian@codesourcery.com>", "tree": {"sha": "3b9ed82732e4e669aa68a9c40bdfcfe131e43bd9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3b9ed82732e4e669aa68a9c40bdfcfe131e43bd9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d88a6951586c7229b25708f4486eaaf4bf4b5bbe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d88a6951586c7229b25708f4486eaaf4bf4b5bbe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d88a6951586c7229b25708f4486eaaf4bf4b5bbe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d88a6951586c7229b25708f4486eaaf4bf4b5bbe/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c41f5b9cddd93f1b56eb71bff87b255d37d16f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c41f5b9cddd93f1b56eb71bff87b255d37d16f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c41f5b9cddd93f1b56eb71bff87b255d37d16f4"}], "stats": {"total": 76, "additions": 47, "deletions": 29}, "files": [{"sha": "453b3210e407025383131266550efad33ecc16ad", "filename": "libgomp/target.c", "status": "modified", "additions": 45, "deletions": 26, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d88a6951586c7229b25708f4486eaaf4bf4b5bbe/libgomp%2Ftarget.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d88a6951586c7229b25708f4486eaaf4bf4b5bbe/libgomp%2Ftarget.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftarget.c?ref=d88a6951586c7229b25708f4486eaaf4bf4b5bbe", "patch": "@@ -275,7 +275,14 @@ struct gomp_coalesce_buf\n    host to device (e.g. map(alloc:), map(from:) etc.).  */\n #define MAX_COALESCE_BUF_GAP\t(4 * 1024)\n \n-/* Add region with device tgt_start relative offset and length to CBUF.  */\n+/* Add region with device tgt_start relative offset and length to CBUF.\n+\n+   This must not be used for asynchronous copies, because the host data might\n+   not be computed yet (by an earlier asynchronous compute region, for\n+   example).\n+   TODO ... but we could allow CBUF usage for EPHEMERAL data?  (Open question:\n+   is it more performant to use libgomp CBUF buffering or individual device\n+   asyncronous copying?)  */\n \n static inline void\n gomp_coalesce_buf_add (struct gomp_coalesce_buf *cbuf, size_t start, size_t len)\n@@ -339,6 +346,30 @@ gomp_copy_host2dev (struct gomp_device_descr *devicep,\n \t\t    void *d, const void *h, size_t sz,\n \t\t    bool ephemeral, struct gomp_coalesce_buf *cbuf)\n {\n+  if (__builtin_expect (aq != NULL, 0))\n+    {\n+      /* See 'gomp_coalesce_buf_add'.  */\n+      assert (!cbuf);\n+\n+      void *h_buf = (void *) h;\n+      if (ephemeral)\n+\t{\n+\t  /* We're queueing up an asynchronous copy from data that may\n+\t     disappear before the transfer takes place (i.e. because it is a\n+\t     stack local in a function that is no longer executing).  Make a\n+\t     copy of the data into a temporary buffer in those cases.  */\n+\t  h_buf = gomp_malloc (sz);\n+\t  memcpy (h_buf, h, sz);\n+\t}\n+      goacc_device_copy_async (devicep, devicep->openacc.async.host2dev_func,\n+\t\t\t       \"dev\", d, \"host\", h_buf, h, sz, aq);\n+      if (ephemeral)\n+\t/* Free temporary buffer once the transfer has completed.  */\n+\tdevicep->openacc.async.queue_callback_func (aq, free, h_buf);\n+\n+      return;\n+    }\n+\n   if (cbuf)\n     {\n       uintptr_t doff = (uintptr_t) d - cbuf->tgt->tgt_start;\n@@ -364,26 +395,8 @@ gomp_copy_host2dev (struct gomp_device_descr *devicep,\n \t    }\n \t}\n     }\n-  if (__builtin_expect (aq != NULL, 0))\n-    {\n-      void *h_buf = (void *) h;\n-      if (ephemeral)\n-\t{\n-\t  /* We're queueing up an asynchronous copy from data that may\n-\t     disappear before the transfer takes place (i.e. because it is a\n-\t     stack local in a function that is no longer executing).  Make a\n-\t     copy of the data into a temporary buffer in those cases.  */\n-\t  h_buf = gomp_malloc (sz);\n-\t  memcpy (h_buf, h, sz);\n-\t}\n-      goacc_device_copy_async (devicep, devicep->openacc.async.host2dev_func,\n-\t\t\t       \"dev\", d, \"host\", h_buf, h, sz, aq);\n-      if (ephemeral)\n-\t/* Free temporary buffer once the transfer has completed.  */\n-\tdevicep->openacc.async.queue_callback_func (aq, free, h_buf);\n-    }\n-  else\n-    gomp_device_copy (devicep, devicep->host2dev_func, \"dev\", d, \"host\", h, sz);\n+\n+  gomp_device_copy (devicep, devicep->host2dev_func, \"dev\", d, \"host\", h, sz);\n }\n \n attribute_hidden void\n@@ -959,8 +972,9 @@ gomp_map_vars_internal (struct gomp_device_descr *devicep,\n \t      for (i = first; i <= last; i++)\n \t\t{\n \t\t  tgt->list[i].key = NULL;\n-\t\t  if (gomp_to_device_kind_p (get_kind (short_mapkind, kinds, i)\n-\t\t\t\t\t     & typemask))\n+\t\t  if (!aq\n+\t\t      && gomp_to_device_kind_p (get_kind (short_mapkind, kinds, i)\n+\t\t\t\t\t\t& typemask))\n \t\t    gomp_coalesce_buf_add (&cbuf,\n \t\t\t\t\t   tgt_size - cur_node.host_end\n \t\t\t\t\t   + (uintptr_t) hostaddrs[i],\n@@ -1001,8 +1015,9 @@ gomp_map_vars_internal (struct gomp_device_descr *devicep,\n \t  if (tgt_align < align)\n \t    tgt_align = align;\n \t  tgt_size = (tgt_size + align - 1) & ~(align - 1);\n-\t  gomp_coalesce_buf_add (&cbuf, tgt_size,\n-\t\t\t\t cur_node.host_end - cur_node.host_start);\n+\t  if (!aq)\n+\t    gomp_coalesce_buf_add (&cbuf, tgt_size,\n+\t\t\t\t   cur_node.host_end - cur_node.host_start);\n \t  tgt_size += cur_node.host_end - cur_node.host_start;\n \t  has_firstprivate = true;\n \t  continue;\n@@ -1095,7 +1110,8 @@ gomp_map_vars_internal (struct gomp_device_descr *devicep,\n \t  if (tgt_align < align)\n \t    tgt_align = align;\n \t  tgt_size = (tgt_size + align - 1) & ~(align - 1);\n-\t  if (gomp_to_device_kind_p (kind & typemask))\n+\t  if (!aq\n+\t      && gomp_to_device_kind_p (kind & typemask))\n \t    gomp_coalesce_buf_add (&cbuf, tgt_size,\n \t\t\t\t   cur_node.host_end - cur_node.host_start);\n \t  tgt_size += cur_node.host_end - cur_node.host_start;\n@@ -1596,6 +1612,9 @@ gomp_map_vars_internal (struct gomp_device_descr *devicep,\n \n   if (cbufp)\n     {\n+      /* See 'gomp_coalesce_buf_add'.  */\n+      assert (!aq);\n+\n       long c = 0;\n       for (c = 0; c < cbuf.chunk_cnt; ++c)\n \tgomp_copy_host2dev (devicep, aq,"}, {"sha": "3299499312fe1fb7d715f7a2348e1ac2af9d1c30", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/async-data-1-2.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d88a6951586c7229b25708f4486eaaf4bf4b5bbe/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fasync-data-1-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d88a6951586c7229b25708f4486eaaf4bf4b5bbe/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fasync-data-1-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fasync-data-1-2.c?ref=d88a6951586c7229b25708f4486eaaf4bf4b5bbe", "patch": "@@ -1,10 +1,9 @@\n /* Verify back to back 'async' operations, two data mappings.\n \n-   Due to two data mappings, this is using the libgomp 'cbuf' buffering.\n+   Make sure that despite two data mappings, this isn't using the libgomp\n+   'cbuf' buffering.\n */\n \n-/* { dg-xfail-run-if \"TODO\" { openacc_radeon_accel_selected } } */\n-\n \n #include <stdlib.h>\n "}]}