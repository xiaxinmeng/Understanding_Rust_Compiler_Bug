{"sha": "3e3ea975fcafcb1280bd480f06058066d2a26b5f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2UzZWE5NzVmY2FmY2IxMjgwYmQ0ODBmMDYwNTgwNjZkMmEyNmI1Zg==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-11-26T05:34:24Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-11-26T05:34:24Z"}, "message": "(make_extraction): When making a low part subreg of a reg,\n\nuse inner_mode, not is_mode.\n\n(num_sign_bit_copies): Inhibit x-1 special case\nwhen x is a paradoxical subreg.\n\nFrom-SVN: r2802", "tree": {"sha": "ada8ded647fd38b2aa0ac4a0a5e782c0f33a927c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ada8ded647fd38b2aa0ac4a0a5e782c0f33a927c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e3ea975fcafcb1280bd480f06058066d2a26b5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e3ea975fcafcb1280bd480f06058066d2a26b5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e3ea975fcafcb1280bd480f06058066d2a26b5f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e3ea975fcafcb1280bd480f06058066d2a26b5f/comments", "author": null, "committer": null, "parents": [{"sha": "711f122a854e3b3845abc2a43378d4073ae41ac1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/711f122a854e3b3845abc2a43378d4073ae41ac1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/711f122a854e3b3845abc2a43378d4073ae41ac1"}], "stats": {"total": 11, "additions": 8, "deletions": 3}, "files": [{"sha": "1021391f0feaa56c3ea06c1cc27315c6db13e7c5", "filename": "gcc/combine.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e3ea975fcafcb1280bd480f06058066d2a26b5f/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e3ea975fcafcb1280bd480f06058066d2a26b5f/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=3e3ea975fcafcb1280bd480f06058066d2a26b5f", "patch": "@@ -4632,8 +4632,8 @@ make_extraction (mode, inner, pos, pos_rtx, len,\n \t   a SUBREG and it would sometimes return a new hard register.  */\n \tnew = gen_rtx (SUBREG, tmode, inner,\n \t\t       (WORDS_BIG_ENDIAN\n-\t\t\t&& GET_MODE_SIZE (is_mode) > UNITS_PER_WORD\n-\t\t\t? ((GET_MODE_SIZE (is_mode) - GET_MODE_SIZE (tmode))\n+\t\t\t&& GET_MODE_SIZE (inner_mode) > UNITS_PER_WORD\n+\t\t\t? ((GET_MODE_SIZE (inner_mode) - GET_MODE_SIZE (tmode))\n \t\t\t   / UNITS_PER_WORD)\n \t\t\t: 0));\n       else\n@@ -6345,7 +6345,12 @@ num_sign_bit_copies (x, mode)\n \t be such a carry.  Furthermore, if the positive number is known to\n \t be 0 or 1, we know the result is either -1 or 0.  */\n \n-      if (code == PLUS && XEXP (x, 1) == constm1_rtx)\n+      if (code == PLUS && XEXP (x, 1) == constm1_rtx\n+\t  /* Don't do this if XEXP (x, 0) is a paradoxical subreg\n+\t     because in principle we don't know what the high bits are.  */\n+\t  && !(GET_CODE (XEXP (x, 0)) == SUBREG\n+\t       && (GET_MODE_SIZE (GET_MODE (XEXP (XEXP (x, 0), 0)))\n+\t\t   < GET_MODE_SIZE (GET_MODE (XEXP (x, 0))))))\n \t{\n \t  sig = significant_bits (XEXP (x, 0), mode);\n \t  if ((((HOST_WIDE_INT) 1 << (bitwidth - 1)) & sig) == 0)"}]}