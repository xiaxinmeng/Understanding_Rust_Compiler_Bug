{"sha": "47035bb8d29278e8da0c6956ece38850a01bae22", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDcwMzViYjhkMjkyNzhlOGRhMGM2OTU2ZWNlMzg4NTBhMDFiYWUyMg==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "1999-03-14T20:19:03Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "1999-03-14T20:19:03Z"}, "message": "More tests for uninitialized variable warnings\n\nFrom-SVN: r25770", "tree": {"sha": "d4f02d9031d19efbec979e7d6a51a1192f2d52ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d4f02d9031d19efbec979e7d6a51a1192f2d52ea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/47035bb8d29278e8da0c6956ece38850a01bae22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47035bb8d29278e8da0c6956ece38850a01bae22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47035bb8d29278e8da0c6956ece38850a01bae22", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47035bb8d29278e8da0c6956ece38850a01bae22/comments", "author": null, "committer": null, "parents": [{"sha": "43f856efc55b57625d86c9df2b825e90b5314d5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43f856efc55b57625d86c9df2b825e90b5314d5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43f856efc55b57625d86c9df2b825e90b5314d5a"}], "stats": {"total": 160, "additions": 160, "deletions": 0}, "files": [{"sha": "ac760d69e034523339c5235bdcfec408b19e4c9e", "filename": "gcc/testsuite/gcc.dg/uninit-5.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47035bb8d29278e8da0c6956ece38850a01bae22/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47035bb8d29278e8da0c6956ece38850a01bae22/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-5.c?ref=47035bb8d29278e8da0c6956ece38850a01bae22", "patch": "@@ -0,0 +1,40 @@\n+/* Spurious uninitialized-variable warnings.\n+   These cases are documented as not working in the gcc manual. */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O -Wuninitialized\" } */\n+\n+extern void use(int);\n+extern void foo(void);\n+\n+void\n+func1(int cond)\n+{\n+    int x;  /* { dg-bogus \"x\" \"uninitialized variable warning\" { xfail *-*-* } } */\n+\n+    if(cond)\n+\tx = 1;\n+\n+    foo();\n+\n+    if(cond)\n+\tuse(x);\n+}\n+\n+void\n+func2 (int cond)\n+{\n+    int x;  /* { dg-bogus \"x\" \"uninitialized variable warning\" { xfail *-*-* } } */\n+    int flag = 0;\n+\n+    if(cond)\n+    {\n+\tx = 1;\n+\tflag = 1;\n+    }\n+\n+    foo();\n+\n+    if(flag)\n+\tuse(x);\n+}"}, {"sha": "2c428df79b602febf8cc1f52cd841f7299274c5b", "filename": "gcc/testsuite/gcc.dg/uninit-6.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47035bb8d29278e8da0c6956ece38850a01bae22/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47035bb8d29278e8da0c6956ece38850a01bae22/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-6.c?ref=47035bb8d29278e8da0c6956ece38850a01bae22", "patch": "@@ -0,0 +1,47 @@\n+/* Spurious uninitialized variable warnings.\n+   This one inspired by java/class.c:build_utf8_ref.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O -Wuninitialized\" } */\n+\n+#include <stddef.h>\n+\n+struct tree\n+{\n+    struct tree *car;\n+    struct tree *cdr;\n+    int type, data;\n+};\n+\n+extern void *malloc(size_t);\n+\n+#define INTEGER_T 1\n+#define PTR_T\t  2\n+\n+#define APPEND(TREE, LAST, TYPE, VALUE)\t\t\t\t\\\n+do {\t\t\t\t\t\t\t\t\\\n+     struct tree *tmp = malloc (sizeof (struct tree));\t\t\\\n+     tmp->car = 0; tmp->cdr = 0; tmp->type = TYPE;\t\t\\\n+     tmp->data = VALUE;\t\t\t\t\t\t\\\n+     if (TREE->car)\t\t\t\t\t\t\\\n+\t LAST->cdr = tmp;\t\t\t\t\t\\\n+     else\t\t\t\t\t\t\t\\\n+\t TREE->car = tmp;\t\t\t\t\t\\\n+     LAST = tmp;\t\t\t\t\t\t\\\n+} while(0)\n+ \n+struct tree *\n+make_something(int a, int b, int c)\n+{\n+    struct tree *rv;\n+    struct tree *field;  /* { dg-bogus \"field\" \"uninitialized variable warning\" { xfail *-*-* } } */\n+\n+    rv = malloc (sizeof (struct tree));\n+    rv->car = 0;\n+\n+    APPEND(rv, field, INTEGER_T, a);\n+    APPEND(rv, field, PTR_T, b);\n+    APPEND(rv, field, INTEGER_T, c);\n+\n+    return rv;\n+}"}, {"sha": "94117da37c929bbecfbb2246b7f64e80f4b189f1", "filename": "gcc/testsuite/gcc.dg/uninit-8.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47035bb8d29278e8da0c6956ece38850a01bae22/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47035bb8d29278e8da0c6956ece38850a01bae22/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-8.c?ref=47035bb8d29278e8da0c6956ece38850a01bae22", "patch": "@@ -0,0 +1,32 @@\n+/* Uninitialized variable warning tests...\n+   Inspired by part of optabs.c:expand_binop.\n+   May be the same as uninit-1.c.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O -Wuninitialized\" } */\n+\n+#include <limits.h>\n+\n+void\n+add_bignums (int *out, int *x, int *y)\n+{\n+    int p, sum;\n+    int carry; /* { dg-bogus \"carry\" \"uninitialized variable warning\" { xfail *-*-* } } */\n+\n+    p = 0;\n+    for (; *x; x++, y++, out++, p++)\n+    {\n+\tif (p)\n+\t    sum = *x + *y + carry;\n+\telse\n+\t    sum = *x + *y;\n+\n+\tif (sum < 0)\n+\t{\n+\t    carry = 1;\n+\t    sum -= INT_MAX;\n+\t}\n+\telse\n+\t    carry = 0;\n+    }\n+}"}, {"sha": "8b439a4512d559f44d16285fbc1b8e0bbf238046", "filename": "gcc/testsuite/gcc.dg/uninit-9.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47035bb8d29278e8da0c6956ece38850a01bae22/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47035bb8d29278e8da0c6956ece38850a01bae22/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-9.c?ref=47035bb8d29278e8da0c6956ece38850a01bae22", "patch": "@@ -0,0 +1,41 @@\n+/* Spurious uninitialized variable warnings.  Slight variant on the\n+   documented case, inspired by reg-stack.c:record_asm_reg_life.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O -Wuninitialized\" } */\n+\n+struct foo\n+{\n+    int type;\n+    struct foo *car;\n+    struct foo *cdr;\n+    char *data;\n+    int data2;\n+};\n+\n+extern void use(struct foo *);\n+\n+#define CLOBBER 6\n+#define PARALLEL 3\n+\n+void\n+func(struct foo *list, int count)\n+{\n+    int n_clobbers = 0;\n+    int i;\n+    struct foo **clob_list;   /* { dg-bogus \"clob_list\" \"uninitialized variable warning\" { xfail *-*-* } } */\n+\n+    if(list[0].type == PARALLEL)\n+    {\n+\tclob_list = alloca(count * sizeof(struct foo *));\n+\t\n+\tfor(i = 1; i < count; i++)\n+\t{\n+\t    if(list[i].type == CLOBBER)\n+\t\tclob_list[n_clobbers++] = &list[i];\n+\t}\n+    }\n+\n+    for(i = 0; i < n_clobbers; i++)\n+\tuse(clob_list[i]);\n+}"}]}