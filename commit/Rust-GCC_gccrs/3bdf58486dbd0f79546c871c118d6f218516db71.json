{"sha": "3bdf58486dbd0f79546c871c118d6f218516db71", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2JkZjU4NDg2ZGJkMGY3OTU0NmM4NzFjMTE4ZDZmMjE4NTE2ZGI3MQ==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@cygnus.co.uk", "date": "2000-01-01T12:12:10Z"}, "committer": {"name": "Bernd Schmidt", "email": "crux@gcc.gnu.org", "date": "2000-01-01T12:12:10Z"}, "message": "Avoid losing pending stack adjusts.\n\nFrom-SVN: r31156", "tree": {"sha": "bd020ea786be6243be2545404e106f007c1afa89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bd020ea786be6243be2545404e106f007c1afa89"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3bdf58486dbd0f79546c871c118d6f218516db71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bdf58486dbd0f79546c871c118d6f218516db71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3bdf58486dbd0f79546c871c118d6f218516db71", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bdf58486dbd0f79546c871c118d6f218516db71/comments", "author": null, "committer": null, "parents": [{"sha": "2d0541b99a9b0b9daa06ce3821f27629f25e82dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d0541b99a9b0b9daa06ce3821f27629f25e82dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d0541b99a9b0b9daa06ce3821f27629f25e82dc"}], "stats": {"total": 9, "additions": 8, "deletions": 1}, "files": [{"sha": "ccad086bf940146f1c3ac2a2aa8edea6a6815b21", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bdf58486dbd0f79546c871c118d6f218516db71/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bdf58486dbd0f79546c871c118d6f218516db71/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3bdf58486dbd0f79546c871c118d6f218516db71", "patch": "@@ -1,3 +1,8 @@\n+2000-01-01  Bernd Schmidt  <bernds@cygnus.co.uk>\n+\n+\t* expmed.c (emit_store_flag): Prevent losing a pending stack\n+\tadjust the same way we prevent losing queued increments.\n+\n Fri Dec 31 19:10:31 1999  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* function.c (update_temp_slot_address): Handle case where sum of"}, {"sha": "1c9781d1bafed2816886142c4669d3b1ead035f5", "filename": "gcc/expmed.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bdf58486dbd0f79546c871c118d6f218516db71/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bdf58486dbd0f79546c871c118d6f218516db71/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=3bdf58486dbd0f79546c871c118d6f218516db71", "patch": "@@ -4229,9 +4229,11 @@ emit_store_flag (target, code, op0, op1, mode, unsignedp, normalizep)\n \t comparison and then the scc insn.\n \n \t compare_from_rtx may call emit_queue, which would be deleted below\n-\t if the scc insn fails.  So call it ourselves before setting LAST.  */\n+\t if the scc insn fails.  So call it ourselves before setting LAST.\n+\t Likewise for do_pending_stack_adjust.  */\n \n       emit_queue ();\n+      do_pending_stack_adjust ();\n       last = get_last_insn ();\n \n       comparison"}]}