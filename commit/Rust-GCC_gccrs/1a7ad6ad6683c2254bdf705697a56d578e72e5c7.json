{"sha": "1a7ad6ad6683c2254bdf705697a56d578e72e5c7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWE3YWQ2YWQ2NjgzYzIyNTRiZGY3MDU2OTdhNTZkNTc4ZTcyZTVjNw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2017-06-29T15:14:05Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2017-06-29T15:14:05Z"}, "message": "cmd/go: fix -buildmode={c-archive,c-shared,pie} for gccgo\n    \n    The tests are misc/cgo tests that are not currently run but will be\n    run soon.\n    \n    Reviewed-on: https://go-review.googlesource.com/47037\n\nFrom-SVN: r249794", "tree": {"sha": "5526a10bcbb3d009f90059a525a17fbe43fc95e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5526a10bcbb3d009f90059a525a17fbe43fc95e4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1a7ad6ad6683c2254bdf705697a56d578e72e5c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a7ad6ad6683c2254bdf705697a56d578e72e5c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a7ad6ad6683c2254bdf705697a56d578e72e5c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a7ad6ad6683c2254bdf705697a56d578e72e5c7/comments", "author": null, "committer": null, "parents": [{"sha": "14836f38b4a0f631f0dd00cdd2bb82c6d1cb8330", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14836f38b4a0f631f0dd00cdd2bb82c6d1cb8330", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14836f38b4a0f631f0dd00cdd2bb82c6d1cb8330"}], "stats": {"total": 40, "additions": 25, "deletions": 15}, "files": [{"sha": "fb28b1a1c7642a3a60c7e49a8b96c7095c7d528a", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a7ad6ad6683c2254bdf705697a56d578e72e5c7/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a7ad6ad6683c2254bdf705697a56d578e72e5c7/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=1a7ad6ad6683c2254bdf705697a56d578e72e5c7", "patch": "@@ -1,4 +1,4 @@\n-66d14d95a5a453682fe387319c80bc4fc40d96ad\n+8c4d6fd19f6d5dc9b41be384c60507f2236f05ec\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "72265efae3141c66047fa11423c851f23dab07ed", "filename": "libgo/go/cmd/go/build.go", "status": "modified", "additions": 24, "deletions": 14, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a7ad6ad6683c2254bdf705697a56d578e72e5c7/libgo%2Fgo%2Fcmd%2Fgo%2Fbuild.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a7ad6ad6683c2254bdf705697a56d578e72e5c7/libgo%2Fgo%2Fcmd%2Fgo%2Fbuild.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcmd%2Fgo%2Fbuild.go?ref=1a7ad6ad6683c2254bdf705697a56d578e72e5c7", "patch": "@@ -342,16 +342,20 @@ func buildModeInit() {\n \t\t\t}\n \t\t\treturn p\n \t\t}\n-\t\tswitch platform {\n-\t\tcase \"darwin/arm\", \"darwin/arm64\":\n-\t\t\tcodegenArg = \"-shared\"\n-\t\tdefault:\n-\t\t\tswitch goos {\n-\t\t\tcase \"dragonfly\", \"freebsd\", \"linux\", \"netbsd\", \"openbsd\", \"solaris\":\n-\t\t\t\t// Use -shared so that the result is\n-\t\t\t\t// suitable for inclusion in a PIE or\n-\t\t\t\t// shared library.\n+\t\tif gccgo {\n+\t\t\tcodegenArg = \"-fPIC\"\n+\t\t} else {\n+\t\t\tswitch platform {\n+\t\t\tcase \"darwin/arm\", \"darwin/arm64\":\n \t\t\t\tcodegenArg = \"-shared\"\n+\t\t\tdefault:\n+\t\t\t\tswitch goos {\n+\t\t\t\tcase \"dragonfly\", \"freebsd\", \"linux\", \"netbsd\", \"openbsd\", \"solaris\":\n+\t\t\t\t\t// Use -shared so that the result is\n+\t\t\t\t\t// suitable for inclusion in a PIE or\n+\t\t\t\t\t// shared library.\n+\t\t\t\t\tcodegenArg = \"-shared\"\n+\t\t\t\t}\n \t\t\t}\n \t\t}\n \t\texeSuffix = \".a\"\n@@ -374,10 +378,14 @@ func buildModeInit() {\n \tcase \"default\":\n \t\tswitch platform {\n \t\tcase \"android/arm\", \"android/arm64\", \"android/amd64\", \"android/386\":\n-\t\t\tcodegenArg = \"-shared\"\n+\t\t\tif !gccgo {\n+\t\t\t\tcodegenArg = \"-shared\"\n+\t\t\t}\n \t\t\tldBuildmode = \"pie\"\n \t\tcase \"darwin/arm\", \"darwin/arm64\":\n-\t\t\tcodegenArg = \"-shared\"\n+\t\t\tif !gccgo {\n+\t\t\t\tcodegenArg = \"-shared\"\n+\t\t\t}\n \t\t\tfallthrough\n \t\tdefault:\n \t\t\tldBuildmode = \"exe\"\n@@ -387,7 +395,7 @@ func buildModeInit() {\n \t\tldBuildmode = \"exe\"\n \tcase \"pie\":\n \t\tif gccgo {\n-\t\t\tfatalf(\"-buildmode=pie not supported by gccgo\")\n+\t\t\tcodegenArg = \"-fPIE\"\n \t\t} else {\n \t\t\tswitch platform {\n \t\t\tcase \"linux/386\", \"linux/amd64\", \"linux/arm\", \"linux/arm64\", \"linux/ppc64le\", \"linux/s390x\",\n@@ -1053,7 +1061,7 @@ func (b *builder) action1(mode buildMode, depMode buildMode, p *Package, looksha\n \t\t// Install header for cgo in c-archive and c-shared modes.\n \t\tif p.usesCgo() && (buildBuildmode == \"c-archive\" || buildBuildmode == \"c-shared\") {\n \t\t\thdrTarget := a.target[:len(a.target)-len(filepath.Ext(a.target))] + \".h\"\n-\t\t\tif buildContext.Compiler == \"gccgo\" {\n+\t\t\tif buildContext.Compiler == \"gccgo\" && *buildO == \"\" {\n \t\t\t\t// For the header file, remove the \"lib\"\n \t\t\t\t// added by go/build, so we generate pkg.h\n \t\t\t\t// rather than libpkg.h.\n@@ -3025,6 +3033,8 @@ func (tools gccgoToolchain) link(b *builder, root *action, out string, allaction\n \t\tldflags = append(ldflags, \"-shared\", \"-nostdlib\", \"-Wl,--whole-archive\", \"-lgolibbegin\", \"-Wl,--no-whole-archive\", \"-lgo\", \"-lgcc_s\", \"-lgcc\", \"-lc\", \"-lgcc\")\n \tcase \"shared\":\n \t\tldflags = append(ldflags, \"-zdefs\", \"-shared\", \"-nostdlib\", \"-lgo\", \"-lgcc_s\", \"-lgcc\", \"-lc\")\n+\tcase \"pie\":\n+\t\tldflags = append(ldflags, \"-pie\")\n \n \tdefault:\n \t\tfatalf(\"-buildmode=%s not supported for gccgo\", buildmode)\n@@ -3100,7 +3110,7 @@ func (tools gccgoToolchain) cc(b *builder, p *Package, objdir, ofile, cfile stri\n // maybePIC adds -fPIC to the list of arguments if needed.\n func (tools gccgoToolchain) maybePIC(args []string) []string {\n \tswitch buildBuildmode {\n-\tcase \"c-shared\", \"shared\", \"plugin\":\n+\tcase \"c-archive\", \"c-shared\", \"shared\", \"plugin\":\n \t\targs = append(args, \"-fPIC\")\n \t}\n \treturn args"}]}