{"sha": "0e9ea52bfcd9b8ab3994329154c48f19be7c0086", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGU5ZWE1MmJmY2Q5YjhhYjM5OTQzMjkxNTRjNDhmMTliZTdjMDA4Ng==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2010-10-06T17:24:40Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2010-10-06T17:24:40Z"}, "message": "ipa.c (cgraph_remove_unreachable_nodes): External references can always be removed.\n\n\n\t* ipa.c (cgraph_remove_unreachable_nodes): External references can always\n\tbe removed.\n\t(cgraph_externally_visible_p): We can not bring local comdats that are known\n\tto linker; fix handling of internal visibility.\n\t(function_and_variable_visibility): Likewise.\n\nFrom-SVN: r165057", "tree": {"sha": "277aa8d7e077ad8b81ad5af7f560f2d06a6e7ad8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/277aa8d7e077ad8b81ad5af7f560f2d06a6e7ad8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e9ea52bfcd9b8ab3994329154c48f19be7c0086", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e9ea52bfcd9b8ab3994329154c48f19be7c0086", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e9ea52bfcd9b8ab3994329154c48f19be7c0086", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e9ea52bfcd9b8ab3994329154c48f19be7c0086/comments", "author": null, "committer": null, "parents": [{"sha": "8cfaf4c938c34b48f7102b539d6db44851bf3ac4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cfaf4c938c34b48f7102b539d6db44851bf3ac4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8cfaf4c938c34b48f7102b539d6db44851bf3ac4"}], "stats": {"total": 41, "additions": 29, "deletions": 12}, "files": [{"sha": "1a2eecf0de74c39ba062bbcde6a3e113c99301fc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e9ea52bfcd9b8ab3994329154c48f19be7c0086/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e9ea52bfcd9b8ab3994329154c48f19be7c0086/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0e9ea52bfcd9b8ab3994329154c48f19be7c0086", "patch": "@@ -1,3 +1,11 @@\n+2010-10-06  Jan Hubicka  <jh@suse.cz>\n+\n+\t* ipa.c (cgraph_remove_unreachable_nodes): External references can always\n+\tbe removed.\n+\t(cgraph_externally_visible_p): We can not bring local comdats that are known\n+\tto linker; fix handling of internal visibility.\n+\t(function_and_variable_visibility): Likewise.\n+\n 2010-10-06  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR rtl-optimization/45394"}, {"sha": "4fbc3b7076f8d2f40d1a349e51909c968e729dd1", "filename": "gcc/ipa.c", "status": "modified", "additions": 21, "deletions": 12, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e9ea52bfcd9b8ab3994329154c48f19be7c0086/gcc%2Fipa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e9ea52bfcd9b8ab3994329154c48f19be7c0086/gcc%2Fipa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa.c?ref=0e9ea52bfcd9b8ab3994329154c48f19be7c0086", "patch": "@@ -238,14 +238,19 @@ cgraph_remove_unreachable_nodes (bool before_inlining_p, FILE *file)\n #endif\n   varpool_reset_queue ();\n   for (node = cgraph_nodes; node; node = node->next)\n-    if ((!cgraph_can_remove_if_no_direct_calls_and_refs_p (node)\n-\t /* Keep around virtual functions for possible devirtualization.  */\n-\t || (!before_inlining_p\n-\t     && !node->global.inlined_to\n-\t     && DECL_VIRTUAL_P (node->decl)\n-\t     && (DECL_COMDAT (node->decl) || DECL_EXTERNAL (node->decl))))\n-\t&& ((!DECL_EXTERNAL (node->decl))\n-            || before_inlining_p))\n+    if (!node->analyzed)\n+      {\n+        gcc_assert (!node->aux);\n+\tnode->reachable = false;\n+      }\n+    else if ((!cgraph_can_remove_if_no_direct_calls_and_refs_p (node)\n+\t      /* Keep around virtual functions for possible devirtualization.  */\n+\t      || (!before_inlining_p\n+\t\t  && !node->global.inlined_to\n+\t\t  && DECL_VIRTUAL_P (node->decl)\n+\t\t  && (DECL_COMDAT (node->decl) || DECL_EXTERNAL (node->decl))))\n+\t     && ((!DECL_EXTERNAL (node->decl))\n+\t\t || before_inlining_p))\n       {\n         gcc_assert (!node->global.inlined_to);\n \tenqueue_cgraph_node (node, &first);\n@@ -592,8 +597,13 @@ cgraph_externally_visible_p (struct cgraph_node *node, bool whole_program, bool\n   if (aliased)\n     return true;\n \n+  /* If linker counts on us, we must preserve the function.  */\n+  if (cgraph_used_from_object_file_p (node))\n+    return true;\n   /* When doing link time optimizations, hidden symbols become local.  */\n-  if (in_lto_p && DECL_VISIBILITY (node->decl) == VISIBILITY_HIDDEN\n+  if (in_lto_p\n+      && (DECL_VISIBILITY (node->decl) == VISIBILITY_HIDDEN\n+\t  || DECL_VISIBILITY (node->decl) == VISIBILITY_INTERNAL)\n       /* Be sure that node is defined in IR file, not in other object\n \t file.  In that case we don't set used_from_other_object_file.  */\n       && node->analyzed)\n@@ -621,8 +631,6 @@ cgraph_externally_visible_p (struct cgraph_node *node, bool whole_program, bool\n \t      return true;\n \t}\n     }\n-  if (cgraph_used_from_object_file_p (node))\n-    return true;\n   if (DECL_PRESERVE_P (node->decl))\n     return true;\n   if (MAIN_NAME_P (DECL_NAME (node->decl)))\n@@ -794,7 +802,8 @@ function_and_variable_visibility (bool whole_program)\n \t       /* When doing linktime optimizations, all hidden symbols will\n \t\t  become local.  */\n \t       && (!in_lto_p\n-\t\t   || DECL_VISIBILITY (vnode->decl) != VISIBILITY_HIDDEN\n+\t\t   || (DECL_VISIBILITY (vnode->decl) != VISIBILITY_HIDDEN\n+\t\t       && DECL_VISIBILITY (vnode->decl) != VISIBILITY_INTERNAL)\n \t\t   /* We can get prevailing decision in other object file.\n \t\t      In this case we do not sed used_from_object_file.  */\n \t\t   || !vnode->finalized))"}]}