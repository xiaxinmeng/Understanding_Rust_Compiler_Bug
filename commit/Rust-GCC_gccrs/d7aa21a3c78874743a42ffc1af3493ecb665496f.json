{"sha": "d7aa21a3c78874743a42ffc1af3493ecb665496f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDdhYTIxYTNjNzg4NzQ3NDNhNDJmZmMxYWYzNDkzZWNiNjY1NDk2Zg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-10-29T22:47:22Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-10-29T22:47:22Z"}, "message": "libstdc++: Fix some warnings in headers\n\nThese are usually suppressed in system headers, but should be fixed\nanyway.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/parse_numbers.h (_Select_int_base): Avoid\n\tnarrowing conversion in constant expression.\n\t* include/experimental/buffer (buffer_copy): Avoid narrowing\n\tconversion.\n\t* include/experimental/internet (hash<>::operator()): Do not\n\tuse deprecated 'argument_type' member.\n\t* include/std/variant (variant::emplace): Use cast instead\n\tof implicit conversion from size_t to narrower unsigned type.", "tree": {"sha": "6e6bfb3e0b9115156a774eceaaa6818ca3b71366", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6e6bfb3e0b9115156a774eceaaa6818ca3b71366"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d7aa21a3c78874743a42ffc1af3493ecb665496f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7aa21a3c78874743a42ffc1af3493ecb665496f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7aa21a3c78874743a42ffc1af3493ecb665496f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7aa21a3c78874743a42ffc1af3493ecb665496f/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52ddf0d458f063f6c9e07e726f9b46206f71e4c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52ddf0d458f063f6c9e07e726f9b46206f71e4c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52ddf0d458f063f6c9e07e726f9b46206f71e4c4"}], "stats": {"total": 16, "additions": 9, "deletions": 7}, "files": [{"sha": "923a56c5a9f80ab49b7556d00de051f949e24230", "filename": "libstdc++-v3/include/bits/parse_numbers.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7aa21a3c78874743a42ffc1af3493ecb665496f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fparse_numbers.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7aa21a3c78874743a42ffc1af3493ecb665496f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fparse_numbers.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fparse_numbers.h?ref=d7aa21a3c78874743a42ffc1af3493ecb665496f", "patch": "@@ -266,7 +266,7 @@ namespace __select_int\n   template<unsigned long long _Val, typename _IntType, typename... _Ints>\n     struct _Select_int_base<_Val, _IntType, _Ints...>\n     : conditional_t<(_Val <= __gnu_cxx::__int_traits<_IntType>::__max),\n-\t\t    integral_constant<_IntType, _Val>,\n+\t\t    integral_constant<_IntType, (_IntType)_Val>,\n \t\t    _Select_int_base<_Val, _Ints...>>\n     { };\n "}, {"sha": "08d3a365e8d12a8de58469aa126f6544e2ad0ef6", "filename": "libstdc++-v3/include/experimental/buffer", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7aa21a3c78874743a42ffc1af3493ecb665496f/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbuffer", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7aa21a3c78874743a42ffc1af3493ecb665496f/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbuffer", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbuffer?ref=d7aa21a3c78874743a42ffc1af3493ecb665496f", "patch": "@@ -315,7 +315,7 @@ inline namespace v1\n     inline size_t\n     buffer_copy(const _MutableBufferSequence& __dest,\n \t\tconst _ConstBufferSequence& __source) noexcept\n-    { return net::buffer_copy(__dest, __source, size_t{-1}); }\n+    { return net::buffer_copy(__dest, __source, size_t(-1)); }\n \n \n   // buffer arithmetic:"}, {"sha": "1143ef41a5a0b3227e7b823f3c8e64f52cad340c", "filename": "libstdc++-v3/include/experimental/internet", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7aa21a3c78874743a42ffc1af3493ecb665496f/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Finternet", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7aa21a3c78874743a42ffc1af3493ecb665496f/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Finternet", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Finternet?ref=d7aa21a3c78874743a42ffc1af3493ecb665496f", "patch": "@@ -2393,7 +2393,7 @@ namespace ip\n     : __hash_base<size_t, experimental::net::v1::ip::address>\n     {\n       size_t\n-      operator()(const argument_type& __a) const\n+      operator()(const experimental::net::v1::ip::address& __a) const\n       {\n \tif (__a.is_v4())\n \t  return _Hash_impl::hash(__a.to_v4());\n@@ -2407,15 +2407,15 @@ namespace ip\n     : __hash_base<size_t, experimental::net::v1::ip::address_v4>\n     {\n       size_t\n-      operator()(const argument_type& __a) const\n+      operator()(const experimental::net::v1::ip::address_v4& __a) const\n       { return _Hash_impl::hash(__a.to_bytes()); }\n     };\n \n   template<> struct hash<experimental::net::v1::ip::address_v6>\n     : __hash_base<size_t, experimental::net::v1::ip::address_v6>\n     {\n       size_t\n-      operator()(const argument_type& __a) const\n+      operator()(const experimental::net::v1::ip::address_v6& __a) const\n       { return _Hash_impl::hash(__a.to_bytes()); }\n     };\n "}, {"sha": "4455ff4f073d2c7ccf981555e491096caa02bc26", "filename": "libstdc++-v3/include/std/variant", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7aa21a3c78874743a42ffc1af3493ecb665496f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7aa21a3c78874743a42ffc1af3493ecb665496f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant?ref=d7aa21a3c78874743a42ffc1af3493ecb665496f", "patch": "@@ -1512,7 +1512,8 @@ namespace __variant\n \t\t}\n \t      __catch (...)\n \t\t{\n-\t\t  this->_M_index = variant_npos;\n+\t\t  using __index_type = decltype(this->_M_index);\n+\t\t  this->_M_index = static_cast<__index_type>(variant_npos);\n \t\t  __throw_exception_again;\n \t\t}\n \t    }\n@@ -1559,7 +1560,8 @@ namespace __variant\n \t\t}\n \t      __catch (...)\n \t\t{\n-\t\t  this->_M_index = variant_npos;\n+\t\t  using __index_type = decltype(this->_M_index);\n+\t\t  this->_M_index = static_cast<__index_type>(variant_npos);\n \t\t  __throw_exception_again;\n \t\t}\n \t    }"}]}