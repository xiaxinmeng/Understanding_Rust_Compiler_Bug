{"sha": "062a902517fae875a44f73117ee795cdad5e7aaf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDYyYTkwMjUxN2ZhZTg3NWE0NGY3MzExN2VlNzk1Y2RhZDVlN2FhZg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely.gcc@gmail.com", "date": "2011-11-20T19:56:48Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2011-11-20T19:56:48Z"}, "message": "appendix_contributing.xml: Do not use \"here\" as link text.\n\n\t* doc/xml/manual/appendix_contributing.xml: Do not use \"here\" as link\n\ttext.\n\t* doc/xml/faq.xml: Likewise. Do not request standard library issues\n\tto be reported to the libstdc++ mailing list.\n\t* doc/xml/manual/status_cxx2011.xml: Document implementation-defined\n\tbehaviour.\n\t* doc/xml/manual/status_cxxtr1.xml: Likewise.\n\t* doc/xml/manual/utilities.xml: Fix grammar, probably caused by a\n\tglobal search and replace of \"part\" by \"chapter\".\n\t* doc/xml/manual/shared_ptr.xml: Remove outdated information.\n\t* doc/xml/manual/messages.xml: Be more specific about systems where\n\tusing 'int' for catalog handle is not a problem, mentioned LWG issue.\n\nFrom-SVN: r181532", "tree": {"sha": "1797c4023a0145cf9db98c72fd1863295e816db0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1797c4023a0145cf9db98c72fd1863295e816db0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/062a902517fae875a44f73117ee795cdad5e7aaf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/062a902517fae875a44f73117ee795cdad5e7aaf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/062a902517fae875a44f73117ee795cdad5e7aaf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/062a902517fae875a44f73117ee795cdad5e7aaf/comments", "author": null, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa198500fe174e80672d8145a9dc1c614364a0eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa198500fe174e80672d8145a9dc1c614364a0eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa198500fe174e80672d8145a9dc1c614364a0eb"}], "stats": {"total": 207, "additions": 120, "deletions": 87}, "files": [{"sha": "49da2c45d3fcb5b8dfe9f7b219ee78d0230441d1", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/062a902517fae875a44f73117ee795cdad5e7aaf/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/062a902517fae875a44f73117ee795cdad5e7aaf/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=062a902517fae875a44f73117ee795cdad5e7aaf", "patch": "@@ -1,3 +1,18 @@\n+2011-11-20  Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\t* doc/xml/manual/appendix_contributing.xml: Do not use \"here\" as link\n+\ttext.\n+\t* doc/xml/faq.xml: Likewise. Do not request standard library issues\n+\tto be reported to the libstdc++ mailing list.\n+\t* doc/xml/manual/status_cxx2011.xml: Document implementation-defined\n+\tbehaviour.\n+\t* doc/xml/manual/status_cxxtr1.xml: Likewise.\n+\t* doc/xml/manual/utilities.xml: Fix grammar, probably caused by a\n+\tglobal search and replace of \"part\" by \"chapter\".\n+\t* doc/xml/manual/shared_ptr.xml: Remove outdated information.\n+\t* doc/xml/manual/messages.xml: Be more specific about systems where\n+\tusing 'int' for catalog handle is not a problem, mentioned LWG issue.\n+\n 2011-11-19  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/debug/bitset (operator[](size_t) const): Declare constexpr."}, {"sha": "86142ec9c4604f791928c560a63c647603cd4eb8", "filename": "libstdc++-v3/doc/xml/faq.xml", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/062a902517fae875a44f73117ee795cdad5e7aaf/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Ffaq.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/062a902517fae875a44f73117ee795cdad5e7aaf/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Ffaq.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Ffaq.xml?ref=062a902517fae875a44f73117ee795cdad5e7aaf", "patch": "@@ -713,14 +713,15 @@\n     For those people who are not part of the ISO Library Group\n     (i.e., nearly all of us needing to read this page in the first\n     place), a public list of the library defects is occasionally\n-    published <link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"http://www.open-std.org/jtc1/sc22/wg21/\">here</link>.\n+    published on <link xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n+    xlink:href=\"http://www.open-std.org/jtc1/sc22/wg21/\">the WG21\n+    website</link>.\n     Some of these issues have resulted in code changes in libstdc++.\n     </para> \n     <para>\n     If you think you've discovered a new bug that is not listed,\n-    please post a message describing your problem\n-    to <email>libstdc++@gcc.gnu.org</email> or the Usenet group\n-    comp.lang.c++.moderated.\n+    please post a message describing your problem to the author of\n+    the library issues list or the Usenet group comp.lang.c++.moderated.\n     </para>\n   </answer>\n </qandaentry>"}, {"sha": "d060f45a6d384ef27577738a906ec995b7c8f5b5", "filename": "libstdc++-v3/doc/xml/manual/appendix_contributing.xml", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/062a902517fae875a44f73117ee795cdad5e7aaf/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fappendix_contributing.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/062a902517fae875a44f73117ee795cdad5e7aaf/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fappendix_contributing.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fappendix_contributing.xml?ref=062a902517fae875a44f73117ee795cdad5e7aaf", "patch": "@@ -45,28 +45,27 @@\n \t  two meeting commitment for voting rights, may get a copy of\n \t  the standard from their respective national standards\n \t  organization. In the USA, this national standards\n-\t  organization is ANSI and their web-site is right\n-\t  <link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"http://www.ansi.org\">here.</link>\n-\t  (And if you've already registered with them, clicking this link will take you to directly to the place where you can\n-\t  <link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"http://webstore.ansi.org/RecordDetail.aspx?sku=ISO%2FIEC+14882:2003\">buy the standard on-line</link>.)\n+\t  organization is\n+\t  <link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"http://www.ansi.org\">ANSI</link>.\n+\t  (And if you've already registered with them you can\n+\t  <link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"http://webstore.ansi.org/RecordDetail.aspx?sku=INCITS%2fISO%2fIEC+14882-2003\">buy the standard on-line</link>.)\n \t</para>\n       </listitem>\n \n       <listitem>\n \t<para>\n \t  The library working group bugs, and known defects, can\n \t  be obtained here:\n-\t  <link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"http://www.open-std.org/jtc1/sc22/wg21/\">http://www.open-std.org/jtc1/sc22/wg21 </link>\n+\t  <link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"http://www.open-std.org/jtc1/sc22/wg21/\">http://www.open-std.org/jtc1/sc22/wg21</link>\n \t</para>\n       </listitem>\n \n       <listitem>\n \t<para>\n \t  The newsgroup dedicated to standardization issues is\n-\t  comp.std.c++: this FAQ for this group is quite useful and\n-\t  can be\n-\t  found <link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"http://www.comeaucomputing.com/csc/faq.html\">\n-\t  here </link>.\n+\t  comp.std.c++: the\n+\t  <link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"http://www.comeaucomputing.com/csc/faq.html\">FAQ</link>\n+          for this group is quite useful.\n       </para>\n       </listitem>\n \n@@ -83,15 +82,15 @@\n \t<para>\n \t  Be familiar with the extensions that preceded these\n \t  general GNU rules. These style issues for libstdc++ can be\n-\t  found <link linkend=\"contrib.coding_style\">here</link>.\n+\t  found in <link linkend=\"contrib.coding_style\">Coding Style</link>.\n       </para>\n       </listitem>\n \n       <listitem>\n \t<para>\n \t  And last but certainly not least, read the\n-\t  library-specific information\n-\t  found <link linkend=\"appendix.porting\"> here</link>.\n+\t  library-specific information found in\n+          <link linkend=\"appendix.porting\">Porting and Maintenance</link>.\n       </para>\n       </listitem>\n     </itemizedlist>\n@@ -271,7 +270,7 @@ It has subdirectories:\n     Files that are used in constructing the library, but are not\n     installed.\n \n-  testsuites/[backward, demangle, ext, performance, thread, 17_* to 27_*]\n+  testsuites/[backward, demangle, ext, performance, thread, 17_* to 30_*]\n     Test programs are here, and may be used to begin to exercise the\n     library.  Support for \"make check\" and \"make check-install\" is\n     complete, and runs through all the subdirectories here when this"}, {"sha": "4dea4b3738b5d5d41bf2e7305f4aafc77eb4ad0e", "filename": "libstdc++-v3/doc/xml/manual/messages.xml", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/062a902517fae875a44f73117ee795cdad5e7aaf/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fmessages.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/062a902517fae875a44f73117ee795cdad5e7aaf/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fmessages.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fmessages.xml?ref=062a902517fae875a44f73117ee795cdad5e7aaf", "patch": "@@ -119,8 +119,9 @@ A couple of notes on the standard.\n <para>\n First, why is <code>messages_base::catalog</code> specified as a typedef\n to int? This makes sense for implementations that use\n-<code>catopen</code>, but not for others. Fortunately, it's not heavily\n-used and so only a minor irritant.\n+<code>catopen</code> and define <code>nl_catd</code> as int, but not for\n+others. Fortunately, it's not heavily used and so only a minor irritant. \n+This has been reported as a possible defect in the standard (LWG 2028).\n </para>\n \n <para>"}, {"sha": "be1aaf655f27d00b64b87e1c7f6c67a1c727d0f1", "filename": "libstdc++-v3/doc/xml/manual/shared_ptr.xml", "status": "modified", "additions": 12, "deletions": 66, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/062a902517fae875a44f73117ee795cdad5e7aaf/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fshared_ptr.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/062a902517fae875a44f73117ee795cdad5e7aaf/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fshared_ptr.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fshared_ptr.xml?ref=062a902517fae875a44f73117ee795cdad5e7aaf", "patch": "@@ -95,13 +95,13 @@ until the last weak reference is dropped.\n   <term><classname>_Sp_counted_base_impl&lt;Ptr, Deleter, Lp&gt;</classname></term>\n   <listitem>\n     <para>\n-Inherits from _Sp_counted_base and stores a pointer of type <type>Ptr</type>\n-and a deleter of type <code>Deleter</code>.  <code>_Sp_deleter</code> is\n+Inherits from _Sp_counted_base and stores a pointer of type <code>Ptr</code>\n+and a deleter of type <code>Deleter</code>.  <classname>_Sp_deleter</classname> is\n used when the user doesn't supply a custom deleter. Unlike Boost's, this\n default deleter is not \"checked\" because GCC already issues a warning if\n <function>delete</function> is used with an incomplete type.\n-This is the only derived type used by <classname>shared_ptr&lt;Ptr&gt;</classname>\n-and it is never used by <classname>shared_ptr</classname>, which uses one of\n+This is the only derived type used by <classname>tr1::shared_ptr&lt;Ptr&gt;</classname>\n+and it is never used by <classname>std::shared_ptr</classname>, which uses one of\n the following types, depending on how the shared_ptr is constructed.\n     </para>\n   </listitem>\n@@ -149,18 +149,18 @@ that simplifies the implementation slightly.\n \n </variablelist>\n \n-  </section>\n-\n-  <section><info><title>Thread Safety</title></info>\n-    \n-\n     <para>\n C++11-only features are: rvalue-ref/move support, allocator support,\n aliasing constructor, make_shared &amp; allocate_shared. Additionally,\n the constructors taking <classname>auto_ptr</classname> parameters are\n deprecated in C++11 mode.\n     </para>\n \n+\n+  </section>\n+\n+  <section><info><title>Thread Safety</title></info>\n+    \n <para>\n The\n <link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"http://boost.org/libs/smart_ptr/shared_ptr.htm#ThreadSafety\">Thread\n@@ -243,7 +243,7 @@ available policies are:\n    <orderedlist>\n      <listitem>\n        <para>\n-       <type>_S_Atomic</type>\n+       <constant>_S_Atomic</constant>\n        </para>\n        <para>\n Selected when GCC supports a builtin atomic compare-and-swap operation\n@@ -256,7 +256,7 @@ synchronisation.\n \n      <listitem>\n        <para>\n-       <type>_S_Mutex</type>\n+       <constant>_S_Mutex</constant>\n        </para>\n        <para>\n The _Sp_counted_base specialization for this policy contains a mutex,\n@@ -267,7 +267,7 @@ builtins aren't available so explicit memory barriers are needed in places.\n \n      <listitem>\n        <para>\n-       <type>_S_Single</type>\n+       <constant>_S_Single</constant>\n        </para>\n        <para>\n This policy uses a non-reentrant add_ref_lock() with no locking. It is\n@@ -285,32 +285,6 @@ used when libstdc++ is built without <literal>--enable-threads</literal>.\n      </para>\n   </section>\n \n-  <section><info><title>Dual C++11 and TR1 Implementation</title></info>\n-    \n-\n-<para>\n-The interface of <classname>tr1::shared_ptr</classname> was extended for C++11\n-with support for rvalue-references and the other features from N2351.\n-The <classname>_Sp_counted_base</classname> base class is implemented in\n-<filename>tr1/boost_sp_shared_count.h</filename> and is common to the TR1\n-and C++11 versions of <classname>shared_ptr</classname>.\n-</para>\n-\n-<para>\n-The classes derived from <classname>_Sp_counted_base</classname> (see Class Hierarchy\n-above) and <classname>__shared_count</classname> are implemented separately for C++11\n-and TR1, in <filename>bits/shared_ptr.h</filename> and\n-<filename>tr1/shared_ptr.h</filename> respectively.\n-</para>\n-\n-<para>\n-The TR1 implementation is considered relatively stable, so is unlikely to\n-change unless bug fixes require it.  If the code that is common to both\n-C++11 and TR1 versions needs to diverge further then it might be necessary to\n-duplicate <classname>_Sp_counted_base</classname> and only make changes to\n-the C++11 version.\n-</para>\n-</section>\n \n <section><info><title>Related functions and classes</title></info>\n \n@@ -377,34 +351,6 @@ be private.\n \n </section>\n \n-<!--- XXX\n-     <listitem>\n-       <type>_Sp_counted_base&lt;Lp&gt;</type>\n-       <para>\n-The base of the hierarchy is parameterized on the lock policy alone.\n-_Sp_counted_base doesn't depend on the type of pointer being managed,\n-it only maintains the reference counts and calls virtual functions when\n-the counts drop to zero. The managed object is destroyed when the last\n-strong reference is dropped, but the _Sp_counted_base itself must exist\n-until the last weak reference is dropped.\n-       </para>\n-     </listitem>\n-\n-     <listitem>\n-       <type>_Sp_counted_base_impl&lt;Ptr, Deleter, Lp&gt;</type>\n-       <para>\n-Inherits from _Sp_counted_base and stores a pointer of type <code>Ptr</code>\n-and a deleter of type <code>Deleter</code>.  <code>_Sp_deleter</code> is\n-used when the user doesn't supply a custom deleter. Unlike Boost's, this\n-default deleter is not \"checked\" because GCC already issues a warning if\n-<code>delete</code> is used with an incomplete type.\n-This is the only derived type used by <code>tr1::shared_ptr&lt;Ptr&gt;</code>\n-and it is never used by <code>std::shared_ptr</code>, which uses one of\n-the following types, depending on how the shared_ptr is constructed.\n-       </para>\n-     </listitem>\n--->\n-\n <section xml:id=\"shared_ptr.using\"><info><title>Use</title></info>\n \n "}, {"sha": "34aff81101f952a5a22c5252558d9d1ad8abe92b", "filename": "libstdc++-v3/doc/xml/manual/status_cxx2011.xml", "status": "modified", "additions": 56, "deletions": 1, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/062a902517fae875a44f73117ee795cdad5e7aaf/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx2011.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/062a902517fae875a44f73117ee795cdad5e7aaf/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx2011.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx2011.xml?ref=062a902517fae875a44f73117ee795cdad5e7aaf", "patch": "@@ -2409,7 +2409,8 @@ particular release.\n       <entry>30.4.1.3</entry>\n       <entry>Timed mutex types</entry>\n       <entry/>\n-      <entry/>\n+      <entry>On POSIX sytems these types are only defined if the OS\n+         supports the POSIX Timeouts option. </entry>\n     </row>\n     <row>\n       <entry>30.4.1.3.1</entry>\n@@ -2627,5 +2628,59 @@ particular release.\n </tgroup>\n </table>\n \n+<section xml:id=\"iso.2011.specific\" xreflabel=\"Implementation Specific\"><info><title>Implementation Specific Behavior</title></info>\n+\n+   <para>For behaviour which is also specified by the 1998 and 2003 standards,\n+      see <link linkend=\"iso.1998.specific\">C++ 1998/2003 Implementation\n+      Specific Behavior</link>. This section only documents behaviour which\n+      is new in the 2011 standard.\n+   </para>\n+\n+   <para>\n+      <emphasis>20.8.9.1.3 [func.bind.place]/1</emphasis> There are 29\n+      placeholders defined and the placeholder types are\n+      <literal>CopyAssignable</literal>.\n+   </para>\n+\n+   <para>\n+      <emphasis>30.2.3 [thread.req.native]/1</emphasis>\n+      <classname>native_handle_type</classname> and\n+      <methodname>native_handle</methodname> are provided. The handle types\n+      are defined in terms of the Gthreads abstraction layer.\n+      <itemizedlist>\n+         <listitem><classname>thread</classname>: The native handle type is\n+            a typedef for <code>__gthread_t</code> i.e. <code>pthread_t</code>\n+            when GCC is configured with the <literal>posix</literal> thread\n+            model. The value of the native handle is undefined for a thread\n+            which is not joinable.\n+         </listitem>\n+         <listitem><classname>mutex</classname> and\n+         <classname>timed_mutex</classname>:\n+            The native handle type is <code>__gthread_mutex_t*</code> i.e.\n+            <code>pthread_mutex_t*</code> for the <literal>posix</literal>\n+            thread model.\n+         </listitem>\n+         <listitem><classname>recursive_mutex</classname> and\n+         <classname>recursive_timed_mutex</classname>:\n+            The native handle type is <code>__gthread_recursive_mutex_t*</code>\n+            i.e. <code>pthread_mutex_t*</code> for the <literal>posix</literal>\n+            thread model.\n+         </listitem>\n+         <listitem><classname>condition_variable</classname>: The native\n+            handle type is <code>__gthread_cond_t*</code> i.e.\n+            <code>pthread_cond_t*</code> for the <literal>posix</literal>\n+            thread model.\n+         </listitem>\n+      </itemizedlist>\n+   </para>\n+\n+   <para>\n+      <emphasis>30.6.1 [futures.overview]/2</emphasis>\n+      <code>launch</code> is a scoped enumeration type with\n+      overloaded operators to support bitmask operations. There are no\n+      additional bitmask elements defined.\n+   </para>\n+\n+</section>\n \n </section>"}, {"sha": "58571f2dde7c83f871ab05dbf0173b9c522e9e19", "filename": "libstdc++-v3/doc/xml/manual/status_cxxtr1.xml", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/062a902517fae875a44f73117ee795cdad5e7aaf/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxxtr1.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/062a902517fae875a44f73117ee795cdad5e7aaf/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxxtr1.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxxtr1.xml?ref=062a902517fae875a44f73117ee795cdad5e7aaf", "patch": "@@ -1779,4 +1779,20 @@ release.\n </tgroup>\n </table>\n \n+<section xml:id=\"iso.tr1.specific\" xreflabel=\"Implementation Specific\"><info><title>Implementation Specific Behavior</title></info>\n+\n+   <para>For behaviour which is specified by the 1998 and 2003 standards,\n+      see <link linkend=\"iso.1998.specific\">C++ 1998/2003 Implementation\n+      Specific Behavior</link>. This section documents behaviour which\n+      is required by TR1.\n+   </para>\n+\n+   <para>\n+     <emphasis>3.6.4 [tr.func.bind.place]/1</emphasis> There are 29\n+     placeholders defined and the placeholder types are\n+     <literal>Assignable</literal>.\n+   </para>\n+\n+</section>\n+\n </section>"}, {"sha": "a60bd34c6d48e8e9d60ae699f8c444abfaf4c25b", "filename": "libstdc++-v3/doc/xml/manual/utilities.xml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/062a902517fae875a44f73117ee795cdad5e7aaf/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Futilities.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/062a902517fae875a44f73117ee795cdad5e7aaf/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Futilities.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Futilities.xml?ref=062a902517fae875a44f73117ee795cdad5e7aaf", "patch": "@@ -25,7 +25,7 @@\n    <para>If you don't know what functors are, you're not alone.  Many people\n       get slightly the wrong idea.  In the interest of not reinventing\n       the wheel, we will refer you to the introduction to the functor\n-      concept written by SGI as chapter of their STL, in\n+      concept written by SGI as part of their STL, in\n       <link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"http://www.sgi.com/tech/stl/functors.html\">their\n       http://www.sgi.com/tech/stl/functors.html</link>.\n    </para>"}]}