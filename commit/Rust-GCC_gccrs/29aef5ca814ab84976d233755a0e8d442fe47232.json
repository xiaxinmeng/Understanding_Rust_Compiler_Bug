{"sha": "29aef5ca814ab84976d233755a0e8d442fe47232", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjlhZWY1Y2E4MTRhYjg0OTc2ZDIzMzc1NWEwZThkNDQyZmU0NzIzMg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2000-04-23T20:25:40Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2000-04-23T20:25:40Z"}, "message": "loop.c (simplify_giv_expr): Be more agressive on simplifying constant MULT givs.\n\n\t* loop.c (simplify_giv_expr):  Be more agressive on simplifying\n\tconstant MULT givs.\n\nFrom-SVN: r33357", "tree": {"sha": "d43104339ec7984ca3c0a48c418e6b90d6f87ddc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d43104339ec7984ca3c0a48c418e6b90d6f87ddc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/29aef5ca814ab84976d233755a0e8d442fe47232", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29aef5ca814ab84976d233755a0e8d442fe47232", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29aef5ca814ab84976d233755a0e8d442fe47232", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29aef5ca814ab84976d233755a0e8d442fe47232/comments", "author": null, "committer": null, "parents": [{"sha": "ff2b942e78dc46a8705f54ccd352c51b61163829", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff2b942e78dc46a8705f54ccd352c51b61163829", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff2b942e78dc46a8705f54ccd352c51b61163829"}], "stats": {"total": 46, "additions": 33, "deletions": 13}, "files": [{"sha": "6456636e6a831d3818238d7dd8aadb21ca9b062f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29aef5ca814ab84976d233755a0e8d442fe47232/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29aef5ca814ab84976d233755a0e8d442fe47232/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=29aef5ca814ab84976d233755a0e8d442fe47232", "patch": "@@ -1,3 +1,8 @@\n+Sun Apr 23 22:23:08 MET DST 2000  Jan Hubicka  <jh@suse.cz>\n+\n+\t* loop.c (simplify_giv_expr):  Be more agressive on simplifying\n+\tconstant MULT givs.\n+\n 2000-04-23  Zack Weinberg  <zack@wolery.cumb.org>\n \n \t* cpphash.h (struct definition): Move file, line, col members..."}, {"sha": "7d7151ee1f6ea6c15bb26c69ea4bcc67f8f15cca", "filename": "gcc/loop.c", "status": "modified", "additions": 28, "deletions": 13, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29aef5ca814ab84976d233755a0e8d442fe47232/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29aef5ca814ab84976d233755a0e8d442fe47232/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=29aef5ca814ab84976d233755a0e8d442fe47232", "patch": "@@ -6402,25 +6402,40 @@ simplify_giv_expr (loop, x, benefit)\n \t  return GEN_INT (INTVAL (arg0) * INTVAL (arg1));\n \n \tcase USE:\n-\t  /* invar * invar.  It is a giv, but very few of these will \n-\t     actually pay off, so limit to simple registers.  */\n+\t  /* invar * invar is a giv, but attempt to simplify it somehow.  */\n \t  if (GET_CODE (arg1) != CONST_INT)\n \t    return NULL_RTX;\n \n \t  arg0 = XEXP (arg0, 0);\n-\t  if (GET_CODE (arg0) == REG)\n-\t    tem = gen_rtx_MULT (mode, arg0, arg1);\n-\t  else if (GET_CODE (arg0) == MULT\n-\t\t   && GET_CODE (XEXP (arg0, 0)) == REG\n-\t\t   && GET_CODE (XEXP (arg0, 1)) == CONST_INT)\n+\t  if (GET_CODE (arg0) == MULT)\n \t    {\n-\t      tem = gen_rtx_MULT (mode, XEXP (arg0, 0), \n-\t\t\t\t  GEN_INT (INTVAL (XEXP (arg0, 1))\n-\t\t\t\t\t   * INTVAL (arg1)));\n+\t      /* (invar_0 * invar_1) * invar_2.  Associate.  */\n+\t      return simplify_giv_expr (loop,\n+\t\t\t\t\tgen_rtx_MULT (mode,\n+\t\t\t\t\t\t      XEXP (arg0, 0),\n+\t\t\t\t\t\t      gen_rtx_MULT (mode,\n+\t\t\t\t\t\t\t\t    XEXP (arg0,\n+\t\t\t\t\t\t\t\t\t  1),\n+\t\t\t\t\t\t\t\t    arg1)),\n+\t\t\t\t\tbenefit);\n \t    }\n-\t  else\n-\t    return NULL_RTX;\n-\t  return gen_rtx_USE (mode, tem);\n+\t  /* Porpagate the MULT expressions to the intermost nodes.  */\n+\t  else if (GET_CODE (arg0) == PLUS)\n+\t    {\n+\t      /* (invar_0 + invar_1) * invar_2.  Distribute.  */\n+\t      return simplify_giv_expr (loop,\n+\t\t\t\t\tgen_rtx_PLUS (mode,\n+\t\t\t\t\t\t      gen_rtx_MULT (mode,\n+\t\t\t\t\t\t\t\t    XEXP (arg0,\n+\t\t\t\t\t\t\t\t\t  0),\n+\t\t\t\t\t\t\t\t    arg1),\n+\t\t\t\t\t\t      gen_rtx_MULT (mode,\n+\t\t\t\t\t\t\t\t    XEXP (arg0,\n+\t\t\t\t\t\t\t\t\t  1),\n+\t\t\t\t\t\t\t\t    arg1)),\n+\t\t\t\t\tbenefit);\n+\t    }\n+\t  return gen_rtx_USE (mode, gen_rtx_MULT (mode, arg0, arg1));\n \n \tcase MULT:\n \t  /* (a * invar_1) * invar_2.  Associate.  */"}]}