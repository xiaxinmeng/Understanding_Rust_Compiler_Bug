{"sha": "2ac8a0f9c2464064ba2eb5cd9d63a4f8d6e3525b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmFjOGEwZjljMjQ2NDA2NGJhMmViNWNkOWQ2M2E0ZjhkNmUzNTI1Yg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2001-04-22T23:50:06Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2001-04-22T23:50:06Z"}, "message": "except.c (build_throw): Wrap the initialization of the exception object in a MUST_NOT_THROW_EXPR.\n\n        * except.c (build_throw): Wrap the initialization of the exception\n        object in a MUST_NOT_THROW_EXPR.\n        (do_free_exception): #if 0.\n\nFrom-SVN: r41494", "tree": {"sha": "9cf6c384f9568200b4e1a7bea8d6d487cd4f9884", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9cf6c384f9568200b4e1a7bea8d6d487cd4f9884"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2ac8a0f9c2464064ba2eb5cd9d63a4f8d6e3525b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ac8a0f9c2464064ba2eb5cd9d63a4f8d6e3525b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ac8a0f9c2464064ba2eb5cd9d63a4f8d6e3525b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ac8a0f9c2464064ba2eb5cd9d63a4f8d6e3525b/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "146ef880e41d44fa480c18d92f16a5e01bec9e73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/146ef880e41d44fa480c18d92f16a5e01bec9e73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/146ef880e41d44fa480c18d92f16a5e01bec9e73"}], "stats": {"total": 46, "additions": 38, "deletions": 8}, "files": [{"sha": "d8273302194fc408066def8219903ec38a88ecc4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ac8a0f9c2464064ba2eb5cd9d63a4f8d6e3525b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ac8a0f9c2464064ba2eb5cd9d63a4f8d6e3525b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2ac8a0f9c2464064ba2eb5cd9d63a4f8d6e3525b", "patch": "@@ -1,3 +1,9 @@\n+2001-04-23  Jason Merrill  <jason_merrill@redhat.com>\n+\n+\t* except.c (build_throw): Wrap the initialization of the exception\n+\tobject in a MUST_NOT_THROW_EXPR.\n+\t(do_free_exception): #if 0.\n+\n 2001-04-20  Mark Mitchell  <mark@codesourcery.com>\n \n \t* cp-tree.h (finish_enum): Change prototype."}, {"sha": "c68ea40f30d3af1232d95db3908c8de3e17f7470", "filename": "gcc/cp/except.c", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ac8a0f9c2464064ba2eb5cd9d63a4f8d6e3525b/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ac8a0f9c2464064ba2eb5cd9d63a4f8d6e3525b/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=2ac8a0f9c2464064ba2eb5cd9d63a4f8d6e3525b", "patch": "@@ -46,7 +46,6 @@ static bool decl_is_java_type PARAMS ((tree decl, int err));\n static void choose_personality_routine PARAMS ((bool));\n static void initialize_handler_parm PARAMS ((tree, tree));\n static tree do_allocate_exception PARAMS ((tree));\n-static tree do_free_exception PARAMS ((tree));\n static int complete_ptr_ref_or_void_ptr_p PARAMS ((tree, tree));\n static bool is_admissible_throw_operand PARAMS ((tree));\n static int can_convert_eh PARAMS ((tree, tree));\n@@ -504,8 +503,9 @@ do_allocate_exception (type)\n \t\t\t\t\t     NULL_TREE));\n }\n \n-/* Call __cxa_free_exception from a cleanup.  This is invoked when\n-   a constructor for a thrown object throws.  */\n+#if 0\n+/* Call __cxa_free_exception from a cleanup.  This is never invoked\n+   directly.  */\n \n static tree\n do_free_exception (ptr)\n@@ -525,6 +525,7 @@ do_free_exception (ptr)\n \n   return build_function_call (fn, tree_cons (NULL_TREE, ptr, NULL_TREE));\n }\n+#endif\n \n /* Build a throw expression.  */\n \n@@ -573,7 +574,6 @@ build_throw (exp)\n       tree cleanup;\n       tree stmt_expr;\n       tree compound_stmt;\n-      tree try_block;\n       tree object, ptr;\n       tree tmp;\n \n@@ -645,15 +645,12 @@ build_throw (exp)\n       object = build1 (NOP_EXPR, build_pointer_type (TREE_TYPE (exp)), ptr);\n       object = build_indirect_ref (object, NULL_PTR);\n \n-      try_block = begin_try_block ();\n-\n       exp = build_modify_expr (object, INIT_EXPR, exp);\n       if (exp == error_mark_node)\n \terror (\"  in thrown expression\");\n \n+      exp = build1 (MUST_NOT_THROW_EXPR, TREE_TYPE (exp), exp);\n       finish_expr_stmt (exp);\n-      finish_cleanup_try_block (try_block);\n-      finish_cleanup (do_free_exception (ptr), try_block);\n \n       throw_type = build_eh_type_type (prepare_eh_type (TREE_TYPE (object)));\n "}, {"sha": "95260419b3c21e412f81b0e12f21c6705c6f3c22", "filename": "gcc/testsuite/g++.old-deja/g++.eh/terminate1.C", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ac8a0f9c2464064ba2eb5cd9d63a4f8d6e3525b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fterminate1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ac8a0f9c2464064ba2eb5cd9d63a4f8d6e3525b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fterminate1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fterminate1.C?ref=2ac8a0f9c2464064ba2eb5cd9d63a4f8d6e3525b", "patch": "@@ -0,0 +1,27 @@\n+// Test that an exception thrown out of the constructor for the exception\n+// object (i.e. \"after completing evaluation of the expression to be thrown\n+// but before the exception is caught\") causes us to call terminate.\n+\n+#include <exception>\n+#include <cstdlib>\n+\n+void my_terminate ()\n+{\n+  std::exit (0);\n+}\n+\n+struct A\n+{\n+  A () {}\n+  A (const A&) { throw 1; }\n+};\n+\n+int main (void)\n+{\n+  std::set_terminate (my_terminate);\n+\n+  A a;\n+  try { throw a; }\n+  catch (...) {}\n+  return 1;\n+}"}]}