{"sha": "0d14720f93a8139a7f234b2762c361e8e5da99cc", "node_id": "C_kwDOANBUbNoAKDBkMTQ3MjBmOTNhODEzOWE3ZjIzNGIyNzYyYzM2MWU4ZTVkYTk5Y2M", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-12-05T15:03:21Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-12-05T15:50:49Z"}, "message": "middle-end/40635 - SSA update losing PHI arg loations\n\nThe following fixes an issue where SSA update loses PHI argument\nlocations when updating PHI nodes it didn't create as part of the\nSSA update.  For the case where the reaching def is the same as\nthe current argument opt to do nothing and for the case where the\nPHI argument already has a location keep that (that's an indication\nthe PHI node wasn't created as part of the update SSA process).\n\n\tPR middle-end/40635\n\t* tree-into-ssa.cc (rewrite_update_phi_arguments): Only\n\tupdate the argument when the reaching definition is different\n\tfrom the current argument.  Keep an existing argument\n\tlocation.\n\n\t* gcc.dg/uninit-pr40635.c: New testcase.", "tree": {"sha": "63623322b3af2ad46092c9fe0c5397cae23d751e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/63623322b3af2ad46092c9fe0c5397cae23d751e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d14720f93a8139a7f234b2762c361e8e5da99cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d14720f93a8139a7f234b2762c361e8e5da99cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d14720f93a8139a7f234b2762c361e8e5da99cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d14720f93a8139a7f234b2762c361e8e5da99cc/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d492d50f644811327c5976e2c918ab6d906ed40c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d492d50f644811327c5976e2c918ab6d906ed40c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d492d50f644811327c5976e2c918ab6d906ed40c"}], "stats": {"total": 44, "additions": 40, "deletions": 4}, "files": [{"sha": "fab7c3d49d9d7c6cbef9a01b852ac7c53e7cb9d2", "filename": "gcc/testsuite/gcc.dg/uninit-pr40635.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d14720f93a8139a7f234b2762c361e8e5da99cc/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr40635.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d14720f93a8139a7f234b2762c361e8e5da99cc/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr40635.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr40635.c?ref=0d14720f93a8139a7f234b2762c361e8e5da99cc", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -Wuninitialized\" } */\n+\n+struct hostent {\n+    char **h_addr_list;\n+};\n+struct hostent *gethostbyname(const char*);\n+int socket(void);\n+int close(int);\n+int connect(int, const char*);\n+\n+int get_tcp_socket(const char *machine)\n+{\n+  struct hostent *hp;\n+  int s42, x;\n+  char **addr;\n+\n+  hp = gethostbyname(machine);\n+  x = 0;\n+  for (addr = hp->h_addr_list; *addr; addr++)\n+    {\n+      s42 = socket();\n+      if (s42 < 0)\n+\treturn -1;\n+      x = connect(s42, *addr);\n+      if (x == 0)\n+\tbreak;\n+      close(s42);\n+    }\n+  if (x < 0)\n+    return -1;\n+  return s42;  /* { dg-warning \"uninitialized\" } */\n+}"}, {"sha": "9a2417d2b0be72778d093eb9fce0445a7260a518", "filename": "gcc/tree-into-ssa.cc", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d14720f93a8139a7f234b2762c361e8e5da99cc/gcc%2Ftree-into-ssa.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d14720f93a8139a7f234b2762c361e8e5da99cc/gcc%2Ftree-into-ssa.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-into-ssa.cc?ref=0d14720f93a8139a7f234b2762c361e8e5da99cc", "patch": "@@ -2110,7 +2110,6 @@ rewrite_update_phi_arguments (basic_block bb)\n \t\t symbol we may find NULL arguments.  That's why we\n \t\t take the symbol from the LHS of the PHI node.  */\n \t      reaching_def = get_reaching_def (lhs_sym);\n-\n \t    }\n \t  else\n \t    {\n@@ -2122,8 +2121,9 @@ rewrite_update_phi_arguments (basic_block bb)\n \t\treaching_def = get_reaching_def (arg);\n \t    }\n \n-          /* Update the argument if there is a reaching def.  */\n-\t  if (reaching_def)\n+\t  /* Update the argument if there is a reaching def different\n+\t     from arg.  */\n+\t  if (reaching_def && reaching_def != arg)\n \t    {\n \t      location_t locus;\n \t      int arg_i = PHI_ARG_INDEX_FROM_USE (arg_p);\n@@ -2133,6 +2133,10 @@ rewrite_update_phi_arguments (basic_block bb)\n \t      /* Virtual operands do not need a location.  */\n \t      if (virtual_operand_p (reaching_def))\n \t\tlocus = UNKNOWN_LOCATION;\n+\t      /* If SSA update didn't insert this PHI the argument\n+\t\t might have a location already, keep that.  */\n+\t      else if (gimple_phi_arg_has_location (phi, arg_i))\n+\t\tlocus = gimple_phi_arg_location (phi, arg_i);\n \t      else\n \t\t{\n \t\t  gimple *stmt = SSA_NAME_DEF_STMT (reaching_def);\n@@ -2150,7 +2154,6 @@ rewrite_update_phi_arguments (basic_block bb)\n \t      gimple_phi_arg_set_location (phi, arg_i, locus);\n \t    }\n \n-\n \t  if (e->flags & EDGE_ABNORMAL)\n \t    SSA_NAME_OCCURS_IN_ABNORMAL_PHI (USE_FROM_PTR (arg_p)) = 1;\n \t}"}]}