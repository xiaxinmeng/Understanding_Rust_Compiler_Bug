{"sha": "63915a91ab7120c3d604fa0a90ca357875ec22a6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjM5MTVhOTFhYjcxMjBjM2Q2MDRmYTBhOTBjYTM1Nzg3NWVjMjJhNg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2016-12-07T15:22:24Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-12-07T15:22:24Z"}, "message": "Improve tests for contents of <new> header\n\n\t* testsuite/18_support/headers/new/synopsis.cc: Add C++14 and C++17\n\tdeclarations.\n\t* testsuite/18_support/headers/new/synopsis_cxx98.cc: New test.\n\nFrom-SVN: r243349", "tree": {"sha": "91d19a7e03e8a406e6e6ac3df421e58641fba34d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/91d19a7e03e8a406e6e6ac3df421e58641fba34d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/63915a91ab7120c3d604fa0a90ca357875ec22a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63915a91ab7120c3d604fa0a90ca357875ec22a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63915a91ab7120c3d604fa0a90ca357875ec22a6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63915a91ab7120c3d604fa0a90ca357875ec22a6/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0064f49e76154354fa41c13403cac1da9069093a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0064f49e76154354fa41c13403cac1da9069093a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0064f49e76154354fa41c13403cac1da9069093a"}], "stats": {"total": 93, "additions": 89, "deletions": 4}, "files": [{"sha": "e92e6d8a5412d979a5ef8d12d0ce1d58fc41f4c0", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63915a91ab7120c3d604fa0a90ca357875ec22a6/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63915a91ab7120c3d604fa0a90ca357875ec22a6/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=63915a91ab7120c3d604fa0a90ca357875ec22a6", "patch": "@@ -1,3 +1,9 @@\n+2016-12-07  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/18_support/headers/new/synopsis.cc: Add C++14 and C++17\n+\tdeclarations.\n+\t* testsuite/18_support/headers/new/synopsis_cxx98.cc: New test.\n+\n 2016-12-06  Felipe Magno de Almeida  <felipe@expertisesolutions.com.br>\n \n \t* src/c++11/cow-stdexcept.cc: Add special case for 16 bit pointers."}, {"sha": "8013eea10575d7e184e4e0b4b28afd6a2bedd128", "filename": "libstdc++-v3/testsuite/18_support/headers/new/synopsis.cc", "status": "modified", "additions": 40, "deletions": 4, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63915a91ab7120c3d604fa0a90ca357875ec22a6/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Fnew%2Fsynopsis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63915a91ab7120c3d604fa0a90ca357875ec22a6/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Fnew%2Fsynopsis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Fnew%2Fsynopsis.cc?ref=63915a91ab7120c3d604fa0a90ca357875ec22a6", "patch": "@@ -21,18 +21,25 @@\n \n namespace std {\n   class bad_alloc;\n+  class bad_array_new_length;\n   struct nothrow_t;\n   extern const nothrow_t nothrow;\n   typedef void (*new_handler)();\n-  new_handler set_new_handler(new_handler new_p) throw();\n   new_handler get_new_handler() noexcept;\n+  new_handler set_new_handler(new_handler new_p) noexcept;\n+\n+#if __cplusplus > 201402L\n+  enum class align_val_t : size_t;\n+  // static constexpr size_t hardware_destructive_interference_size;\n+  // static constexpr size_t hardware_constructive_interference_size;\n+#endif\n }\n \n-void* operator new(std::size_t size) throw(std::bad_alloc);\n-void* operator new(std::size_t size, const std::nothrow_t&) throw();\n+void* operator new(std::size_t size);\n+void* operator new(std::size_t size, const std::nothrow_t&) noexcept;\n void  operator delete(void* ptr) throw();\n void  operator delete(void* ptr, const std::nothrow_t&) throw();\n-void* operator new[](std::size_t size) throw(std::bad_alloc);\n+void* operator new[](std::size_t size);\n void* operator new[](std::size_t size, const std::nothrow_t&) throw();\n void  operator delete[](void* ptr) throw();\n void  operator delete[](void* ptr, const std::nothrow_t&) throw();\n@@ -41,3 +48,32 @@ void* operator new  (std::size_t size, void* ptr) throw();\n void* operator new[](std::size_t size, void* ptr) throw();\n void  operator delete  (void* ptr, void*) throw();\n void  operator delete[](void* ptr, void*) throw();\n+\n+#if __cplusplus >= 201402L\n+// C++14 sized deallocation functions\n+void  operator delete(void* ptr, std::size_t size) noexcept;\n+void  operator delete(void* ptr, std::size_t size,\n+                      const std::nothrow_t&) noexcept;\n+void  operator delete[](void* ptr, std::size_t size) noexcept;\n+void  operator delete[](void* ptr, std::size_t size,\n+                        const std::nothrow_t&) noexcept;\n+#endif\n+\n+#if __cplusplus > 201402L\n+// C++17 (de)allocation functions for types with new-extended alignment\n+void* operator new(std::size_t, std::align_val_t);\n+void* operator new(std::size_t, std::align_val_t,\n+                   const std::nothrow_t&) noexcept;\n+void  operator delete(void*, std::align_val_t) noexcept;\n+void  operator delete(void*, std::size_t, std::align_val_t) noexcept;\n+void  operator delete(void*, std::align_val_t,\n+                      const std::nothrow_t&) noexcept;\n+\n+void* operator new[](std::size_t, std::align_val_t);\n+void* operator new[](std::size_t, std::align_val_t,\n+                     const std::nothrow_t&) noexcept;\n+void  operator delete[](void*, std::align_val_t) noexcept;\n+void  operator delete[](void*, std::size_t, std::align_val_t) noexcept;\n+void  operator delete[](void*, std::align_val_t,\n+                        const std::nothrow_t&) noexcept;\n+#endif"}, {"sha": "2b2abd2bbdc2982ebcde80f86ab91b74b13f78e0", "filename": "libstdc++-v3/testsuite/18_support/headers/new/synopsis_cxx98.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63915a91ab7120c3d604fa0a90ca357875ec22a6/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Fnew%2Fsynopsis_cxx98.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63915a91ab7120c3d604fa0a90ca357875ec22a6/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Fnew%2Fsynopsis_cxx98.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Fnew%2Fsynopsis_cxx98.cc?ref=63915a91ab7120c3d604fa0a90ca357875ec22a6", "patch": "@@ -0,0 +1,43 @@\n+// { dg-options \"-std=gnu++98\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2007-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <new>\n+\n+namespace std {\n+  class bad_alloc;\n+  struct nothrow_t;\n+  extern const nothrow_t nothrow;\n+  typedef void (*new_handler)();\n+  new_handler set_new_handler(new_handler new_p) throw();\n+}\n+\n+void* operator new(std::size_t size) throw(std::bad_alloc);\n+void* operator new(std::size_t size, const std::nothrow_t&) throw();\n+void  operator delete(void* ptr) throw();\n+void  operator delete(void* ptr, const std::nothrow_t&) throw();\n+void* operator new[](std::size_t size) throw(std::bad_alloc);\n+void* operator new[](std::size_t size, const std::nothrow_t&) throw();\n+void  operator delete[](void* ptr) throw();\n+void  operator delete[](void* ptr, const std::nothrow_t&) throw();\n+\n+void* operator new  (std::size_t size, void* ptr) throw();\n+void* operator new[](std::size_t size, void* ptr) throw();\n+void  operator delete  (void* ptr, void*) throw();\n+void  operator delete[](void* ptr, void*) throw();"}]}