{"sha": "ea3a0fdefa353d0fd3402cba31f24e1a847ab257", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWEzYTBmZGVmYTM1M2QwZmQzNDAyY2JhMzFmMjRlMWE4NDdhYjI1Nw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2013-04-09T13:25:58Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2013-04-09T13:25:58Z"}, "message": "re PR middle-end/56883 (error openmp parallel for order)\n\n\tPR middle-end/56883\n\t* omp-low.c (expand_omp_for_generic, expand_omp_for_static_nochunk,\n\texpand_omp_for_static_chunk): Use simple_p = true in\n\tforce_gimple_operand_gsi calls when assigning to addressable decls.\n\n\t* c-c++-common/gomp/pr56883.c: New test.\n\nFrom-SVN: r197633", "tree": {"sha": "37874107876ac4127cea5ed04358f3ec726fecd2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/37874107876ac4127cea5ed04358f3ec726fecd2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ea3a0fdefa353d0fd3402cba31f24e1a847ab257", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea3a0fdefa353d0fd3402cba31f24e1a847ab257", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea3a0fdefa353d0fd3402cba31f24e1a847ab257", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea3a0fdefa353d0fd3402cba31f24e1a847ab257/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a32dfe9d0614b2460957ee107baf25e88ff3f026", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a32dfe9d0614b2460957ee107baf25e88ff3f026", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a32dfe9d0614b2460957ee107baf25e88ff3f026"}], "stats": {"total": 139, "additions": 119, "deletions": 20}, "files": [{"sha": "69cefc06f204ded1504e408adf4c1b6868dbce39", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea3a0fdefa353d0fd3402cba31f24e1a847ab257/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea3a0fdefa353d0fd3402cba31f24e1a847ab257/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ea3a0fdefa353d0fd3402cba31f24e1a847ab257", "patch": "@@ -1,3 +1,10 @@\n+2013-04-09  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/56883\n+\t* omp-low.c (expand_omp_for_generic, expand_omp_for_static_nochunk,\n+\texpand_omp_for_static_chunk): Use simple_p = true in\n+\tforce_gimple_operand_gsi calls when assigning to addressable decls.\n+\n 2013-04-09  Jeff Law  <law@redhat.com>\n \n \t* tree-vrp.c (simplify_cond_using_ranges): Simplify test of boolean"}, {"sha": "3e519db79b67987e8ef302166a016e7a92c3cb75", "filename": "gcc/omp-low.c", "status": "modified", "additions": 50, "deletions": 20, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea3a0fdefa353d0fd3402cba31f24e1a847ab257/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea3a0fdefa353d0fd3402cba31f24e1a847ab257/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=ea3a0fdefa353d0fd3402cba31f24e1a847ab257", "patch": "@@ -3920,8 +3920,10 @@ expand_omp_for_generic (struct omp_region *region,\n   if (POINTER_TYPE_P (type))\n     t = fold_convert (signed_type_for (type), t);\n   t = fold_convert (type, t);\n-  t = force_gimple_operand_gsi (&gsi, t, false, NULL_TREE,\n-\t\t\t\tfalse, GSI_CONTINUE_LINKING);\n+  t = force_gimple_operand_gsi (&gsi, t,\n+\t\t\t\tDECL_P (fd->loop.v)\n+\t\t\t\t&& TREE_ADDRESSABLE (fd->loop.v),\n+\t\t\t\tNULL_TREE, false, GSI_CONTINUE_LINKING);\n   stmt = gimple_build_assign (fd->loop.v, t);\n   gsi_insert_after (&gsi, stmt, GSI_CONTINUE_LINKING);\n \n@@ -3952,8 +3954,11 @@ expand_omp_for_generic (struct omp_region *region,\n \t    t = fold_build_pointer_plus (fd->loops[i].n1, t);\n \t  else\n \t    t = fold_build2 (PLUS_EXPR, itype, fd->loops[i].n1, t);\n-\t  t = force_gimple_operand_gsi (&gsi, t, false, NULL_TREE,\n-\t\t\t\t\tfalse, GSI_CONTINUE_LINKING);\n+\t  t = force_gimple_operand_gsi (&gsi, t,\n+\t\t\t\t\tDECL_P (fd->loops[i].v)\n+\t\t\t\t\t&& TREE_ADDRESSABLE (fd->loops[i].v),\n+\t\t\t\t\tNULL_TREE, false,\n+\t\t\t\t\tGSI_CONTINUE_LINKING);\n \t  stmt = gimple_build_assign (fd->loops[i].v, t);\n \t  gsi_insert_after (&gsi, stmt, GSI_CONTINUE_LINKING);\n \t  if (i != 0)\n@@ -3981,12 +3986,15 @@ expand_omp_for_generic (struct omp_region *region,\n \tt = fold_build_pointer_plus (vmain, fd->loop.step);\n       else\n \tt = fold_build2 (PLUS_EXPR, type, vmain, fd->loop.step);\n-      t = force_gimple_operand_gsi (&gsi, t, false, NULL_TREE,\n-\t\t\t\t    true, GSI_SAME_STMT);\n+      t = force_gimple_operand_gsi (&gsi, t,\n+\t\t\t\t    DECL_P (vback) && TREE_ADDRESSABLE (vback),\n+\t\t\t\t    NULL_TREE, true, GSI_SAME_STMT);\n       stmt = gimple_build_assign (vback, t);\n       gsi_insert_before (&gsi, stmt, GSI_SAME_STMT);\n \n-      t = build2 (fd->loop.cond_code, boolean_type_node, vback, iend);\n+      t = build2 (fd->loop.cond_code, boolean_type_node,\n+\t\t  DECL_P (vback) && TREE_ADDRESSABLE (vback) ? t : vback,\n+\t\t  iend);\n       stmt = gimple_build_cond_empty (t);\n       gsi_insert_before (&gsi, stmt, GSI_SAME_STMT);\n \n@@ -4011,8 +4019,12 @@ expand_omp_for_generic (struct omp_region *region,\n \t\t  e->probability = REG_BR_PROB_BASE / 8;\n \n \t\t  t = fd->loops[i + 1].n1;\n-\t\t  t = force_gimple_operand_gsi (&gsi, t, false, NULL_TREE,\n-\t\t\t\t\t        false, GSI_CONTINUE_LINKING);\n+\t\t  t = force_gimple_operand_gsi (&gsi, t,\n+\t\t\t\t\t\tDECL_P (fd->loops[i + 1].v)\n+\t\t\t\t\t\t&& TREE_ADDRESSABLE\n+\t\t\t\t\t\t\t(fd->loops[i + 1].v),\n+\t\t\t\t\t\tNULL_TREE, false,\n+\t\t\t\t\t\tGSI_CONTINUE_LINKING);\n \t\t  stmt = gimple_build_assign (fd->loops[i + 1].v, t);\n \t\t  gsi_insert_after (&gsi, stmt, GSI_CONTINUE_LINKING);\n \t\t}\n@@ -4026,8 +4038,11 @@ expand_omp_for_generic (struct omp_region *region,\n \t      else\n \t\tt = fold_build2 (PLUS_EXPR, vtype, fd->loops[i].v,\n \t\t\t\t fd->loops[i].step);\n-\t      t = force_gimple_operand_gsi (&gsi, t, false, NULL_TREE,\n-\t\t\t\t\t    false, GSI_CONTINUE_LINKING);\n+\t      t = force_gimple_operand_gsi (&gsi, t,\n+\t\t\t\t\t    DECL_P (fd->loops[i].v)\n+\t\t\t\t\t    && TREE_ADDRESSABLE (fd->loops[i].v),\n+\t\t\t\t\t    NULL_TREE, false,\n+\t\t\t\t\t    GSI_CONTINUE_LINKING);\n \t      stmt = gimple_build_assign (fd->loops[i].v, t);\n \t      gsi_insert_after (&gsi, stmt, GSI_CONTINUE_LINKING);\n \n@@ -4036,8 +4051,12 @@ expand_omp_for_generic (struct omp_region *region,\n \t\t  t = fd->loops[i].n2;\n \t\t  t = force_gimple_operand_gsi (&gsi, t, true, NULL_TREE,\n \t\t\t\t\t\tfalse, GSI_CONTINUE_LINKING);\n+\t\t  tree v = fd->loops[i].v;\n+\t\t  if (DECL_P (v) && TREE_ADDRESSABLE (v))\n+\t\t    v = force_gimple_operand_gsi (&gsi, v, true, NULL_TREE,\n+\t\t\t\t\t\t  false, GSI_CONTINUE_LINKING);\n \t\t  t = fold_build2 (fd->loops[i].cond_code, boolean_type_node,\n-\t\t\t\t   fd->loops[i].v, t);\n+\t\t\t\t   v, t);\n \t\t  stmt = gimple_build_cond_empty (t);\n \t\t  gsi_insert_after (&gsi, stmt, GSI_CONTINUE_LINKING);\n \t\t  e = make_edge (bb, l1_bb, EDGE_TRUE_VALUE);\n@@ -4273,8 +4292,10 @@ expand_omp_for_static_nochunk (struct omp_region *region,\n     t = fold_build_pointer_plus (fd->loop.n1, t);\n   else\n     t = fold_build2 (PLUS_EXPR, type, t, fd->loop.n1);\n-  t = force_gimple_operand_gsi (&gsi, t, false, NULL_TREE,\n-\t\t\t\tfalse, GSI_CONTINUE_LINKING);\n+  t = force_gimple_operand_gsi (&gsi, t,\n+\t\t\t\tDECL_P (fd->loop.v)\n+\t\t\t\t&& TREE_ADDRESSABLE (fd->loop.v),\n+\t\t\t\tNULL_TREE, false, GSI_CONTINUE_LINKING);\n   stmt = gimple_build_assign (fd->loop.v, t);\n   gsi_insert_after (&gsi, stmt, GSI_CONTINUE_LINKING);\n \n@@ -4299,12 +4320,14 @@ expand_omp_for_static_nochunk (struct omp_region *region,\n     t = fold_build_pointer_plus (vmain, fd->loop.step);\n   else\n     t = fold_build2 (PLUS_EXPR, type, vmain, fd->loop.step);\n-  t = force_gimple_operand_gsi (&gsi, t, false, NULL_TREE,\n-\t\t\t\ttrue, GSI_SAME_STMT);\n+  t = force_gimple_operand_gsi (&gsi, t,\n+\t\t\t\tDECL_P (vback) && TREE_ADDRESSABLE (vback),\n+\t\t\t\tNULL_TREE, true, GSI_SAME_STMT);\n   stmt = gimple_build_assign (vback, t);\n   gsi_insert_before (&gsi, stmt, GSI_SAME_STMT);\n \n-  t = build2 (fd->loop.cond_code, boolean_type_node, vback, e);\n+  t = build2 (fd->loop.cond_code, boolean_type_node,\n+\t      DECL_P (vback) && TREE_ADDRESSABLE (vback) ? t : vback, e);\n   gsi_insert_before (&gsi, gimple_build_cond_empty (t), GSI_SAME_STMT);\n \n   /* Remove the GIMPLE_OMP_CONTINUE statement.  */\n@@ -4504,8 +4527,10 @@ expand_omp_for_static_chunk (struct omp_region *region, struct omp_for_data *fd)\n     t = fold_build_pointer_plus (fd->loop.n1, t);\n   else\n     t = fold_build2 (PLUS_EXPR, type, t, fd->loop.n1);\n-  t = force_gimple_operand_gsi (&si, t, false, NULL_TREE,\n-\t\t\t\tfalse, GSI_CONTINUE_LINKING);\n+  t = force_gimple_operand_gsi (&si, t,\n+\t\t\t\tDECL_P (fd->loop.v)\n+\t\t\t\t&& TREE_ADDRESSABLE (fd->loop.v),\n+\t\t\t\tNULL_TREE, false, GSI_CONTINUE_LINKING);\n   stmt = gimple_build_assign (fd->loop.v, t);\n   gsi_insert_after (&si, stmt, GSI_CONTINUE_LINKING);\n \n@@ -4530,10 +4555,15 @@ expand_omp_for_static_chunk (struct omp_region *region, struct omp_for_data *fd)\n     t = fold_build_pointer_plus (v_main, fd->loop.step);\n   else\n     t = fold_build2 (PLUS_EXPR, type, v_main, fd->loop.step);\n+  if (DECL_P (v_back) && TREE_ADDRESSABLE (v_back))\n+    t = force_gimple_operand_gsi (&si, t, true, NULL_TREE,\n+\t\t\t\t  true, GSI_SAME_STMT);\n   stmt = gimple_build_assign (v_back, t);\n   gsi_insert_before (&si, stmt, GSI_SAME_STMT);\n \n-  t = build2 (fd->loop.cond_code, boolean_type_node, v_back, e);\n+  t = build2 (fd->loop.cond_code, boolean_type_node,\n+\t      DECL_P (v_back) && TREE_ADDRESSABLE (v_back)\n+\t      ? t : v_back, e);\n   gsi_insert_before (&si, gimple_build_cond_empty (t), GSI_SAME_STMT);\n \n   /* Remove GIMPLE_OMP_CONTINUE.  */"}, {"sha": "f53c0d322c4511a52f5649fdda298741d24008bb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea3a0fdefa353d0fd3402cba31f24e1a847ab257/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea3a0fdefa353d0fd3402cba31f24e1a847ab257/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ea3a0fdefa353d0fd3402cba31f24e1a847ab257", "patch": "@@ -1,3 +1,8 @@\n+2013-04-09  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/56883\n+\t* c-c++-common/gomp/pr56883.c: New test.\n+\n 2013-04-09  Jeff Law  <law@redhat.com>\n \n \t* gcc.dg/tree-ssa/vrp87.c: New test."}, {"sha": "443906d8689ef27e80b331538d6024fc18bae64d", "filename": "gcc/testsuite/c-c++-common/gomp/pr56883.c", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea3a0fdefa353d0fd3402cba31f24e1a847ab257/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr56883.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea3a0fdefa353d0fd3402cba31f24e1a847ab257/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr56883.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr56883.c?ref=ea3a0fdefa353d0fd3402cba31f24e1a847ab257", "patch": "@@ -0,0 +1,57 @@\n+/* PR middle-end/56883 */\n+/* { dg-do compile }\n+/* { dg-options \"-O2 -fopenmp\" } */\n+\n+void\n+f1 (int ***x)\n+{\n+  int i, j, k;\n+#pragma omp parallel for\n+  for (i = 0; i < 10; ++i)\n+    {\n+    #pragma omp parallel shared(j)\n+      #pragma omp for\n+\tfor (j = 0; j < 10; ++j)\n+\t  {\n+\t  #pragma omp parallel for\n+\t      for (k = 0; k < 10; ++k)\n+\t\tx[i][j][k] = k;\n+\t  }\n+    }\n+}\n+\n+void\n+f2 (int ***x)\n+{\n+  int i, j, k;\n+#pragma omp parallel for schedule(static,1)\n+  for (i = 0; i < 10; ++i)\n+    {\n+    #pragma omp parallel shared(j)\n+      #pragma omp for schedule(static,1)\n+\tfor (j = 0; j < 10; ++j)\n+\t  {\n+\t  #pragma omp parallel for schedule(static,1)\n+\t      for (k = 0; k < 10; ++k)\n+\t\tx[i][j][k] = k;\n+\t  }\n+    }\n+}\n+\n+void\n+f3 (int ***x)\n+{\n+  int i, j, k;\n+#pragma omp parallel for schedule(runtime)\n+  for (i = 0; i < 10; ++i)\n+    {\n+    #pragma omp parallel shared(j)\n+      #pragma omp for schedule(runtime)\n+\tfor (j = 0; j < 10; ++j)\n+\t  {\n+\t  #pragma omp parallel for schedule(runtime)\n+\t      for (k = 0; k < 10; ++k)\n+\t\tx[i][j][k] = k;\n+\t  }\n+    }\n+}"}]}