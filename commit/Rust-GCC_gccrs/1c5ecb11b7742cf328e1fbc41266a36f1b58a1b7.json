{"sha": "1c5ecb11b7742cf328e1fbc41266a36f1b58a1b7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWM1ZWNiMTFiNzc0MmNmMzI4ZTFmYmM0MTI2NmEzNmYxYjU4YTFiNw==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2000-08-07T09:48:23Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2000-08-07T09:48:23Z"}, "message": "* gcc.dg/c90-printf-2.c, gcc.dg/c99-printf-2.c: New tests.\n\nFrom-SVN: r35547", "tree": {"sha": "e4c2768c87ae171f154b2ac5ad5db6f9baa621f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e4c2768c87ae171f154b2ac5ad5db6f9baa621f3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c5ecb11b7742cf328e1fbc41266a36f1b58a1b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c5ecb11b7742cf328e1fbc41266a36f1b58a1b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c5ecb11b7742cf328e1fbc41266a36f1b58a1b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c5ecb11b7742cf328e1fbc41266a36f1b58a1b7/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae5f017f1451b4cec57df4dc52e68d50bfa63b03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae5f017f1451b4cec57df4dc52e68d50bfa63b03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae5f017f1451b4cec57df4dc52e68d50bfa63b03"}], "stats": {"total": 74, "additions": 74, "deletions": 0}, "files": [{"sha": "f50a8de7c205e24ab2f5e99dfd560e1aa06fa0b1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c5ecb11b7742cf328e1fbc41266a36f1b58a1b7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c5ecb11b7742cf328e1fbc41266a36f1b58a1b7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1c5ecb11b7742cf328e1fbc41266a36f1b58a1b7", "patch": "@@ -1,3 +1,7 @@\n+2000-08-07  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* gcc.dg/c90-printf-2.c, gcc.dg/c99-printf-2.c: New tests.\n+\n Sun Aug  6 11:41:51 2000  Ovidiu Predescu  <ovidiu@cup.hp.com>\n \n \t* lib/objc.exp (objc_target_compile): Set the ld_library_path so"}, {"sha": "6686d9dec1cccc6003c42a7e2dc22af40b3dc830", "filename": "gcc/testsuite/gcc.dg/c90-printf-2.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c5ecb11b7742cf328e1fbc41266a36f1b58a1b7/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-printf-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c5ecb11b7742cf328e1fbc41266a36f1b58a1b7/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-printf-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-printf-2.c?ref=1c5ecb11b7742cf328e1fbc41266a36f1b58a1b7", "patch": "@@ -0,0 +1,36 @@\n+/* Test for printf formats.  Formats using C99 features should be rejected\n+   outside of C99 mode.\n+*/\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=iso9899:1990 -pedantic -Wformat\" } */\n+\n+typedef __SIZE_TYPE__ size_t;\n+typedef __PTRDIFF_TYPE__ ptrdiff_t;\n+\n+__extension__ typedef long long int llong;\n+\n+/* This next definition is broken.  When GCC has a <stdint.h> and\n+   an internal understanding of intmax_t, it should be\n+   replaced by an include of <stdint.h> or by a definition for internal\n+   macros or typedefs.\n+*/\n+__extension__ typedef long long int intmax_t;\n+\n+extern int printf (const char *, ...);\n+\n+void\n+foo (int i, double d, llong ll, intmax_t j, size_t z, ptrdiff_t t)\n+{\n+  /* Some tests already in c90-printf-1.c, e.g. %lf.  */\n+  /* The widths hh, ll, j, z, t are new.  */\n+  printf (\"%hhd\", i); /* { dg-warning \"length character|C\" \"%hh in C90\" } */\n+  printf (\"%lld\", ll); /* { dg-warning \"length character|C\" \"%ll in C90\" } */\n+  printf (\"%jd\", j); /* { dg-warning \"length character|C\" \"%j in C90\" } */\n+  printf (\"%zu\", z); /* { dg-warning \"length character|C\" \"%z in C90\" } */\n+  printf (\"%td\", t); /* { dg-warning \"length character|C\" \"%t in C90\" } */\n+  /* The formats F, a, A are new.  */\n+  printf (\"%F\", d); /* { dg-warning \"C\" \"%F in C90\" } */\n+  printf (\"%a\", d); /* { dg-warning \"C\" \"%a in C90\" } */\n+  printf (\"%A\", d); /* { dg-warning \"C\" \"%A in C90\" } */\n+}"}, {"sha": "8a9c6616612826fa0a979689502a899fb8629085", "filename": "gcc/testsuite/gcc.dg/c99-printf-2.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c5ecb11b7742cf328e1fbc41266a36f1b58a1b7/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-printf-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c5ecb11b7742cf328e1fbc41266a36f1b58a1b7/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-printf-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-printf-2.c?ref=1c5ecb11b7742cf328e1fbc41266a36f1b58a1b7", "patch": "@@ -0,0 +1,34 @@\n+/* Test for printf formats.  Formats using extensions to the standard\n+   should be rejected in strict pedantic mode.\n+*/\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=iso9899:1999 -pedantic -Wformat\" } */\n+\n+typedef __SIZE_TYPE__ size_t;\n+typedef __WCHAR_TYPE__ wchar_t;\n+typedef __WINT_TYPE__ wint_t;\n+\n+extern int printf (const char *, ...);\n+\n+void\n+foo (int i, long long ll, size_t z, wint_t lc, wchar_t *ls)\n+{\n+  /* The length modifiers q, Z and L as applied to integer formats are\n+     extensions.\n+  */\n+  printf (\"%qd\", ll); /* { dg-warning \"C\" \"%q length\" } */\n+  printf (\"%Ld\", ll); /* { dg-warning \"C\" \"%L length\" } */\n+  printf (\"%Zd\", z); /* { dg-warning \"C\" \"%Z length\" } */\n+  /* The conversion specifiers C and S are X/Open extensions; the\n+     conversion specifier m is a GNU extension.\n+  */\n+  printf (\"%m\"); /* { dg-warning \"C\" \"printf %m\" } */\n+  printf (\"%C\", lc); /* { dg-warning \"C\" \"printf %C\" } */\n+  printf (\"%S\", ls); /* { dg-warning \"C\" \"printf %S\" } */\n+  /* The flag character ', and the use of operand number $ formats, are\n+     X/Open extensions.\n+  */\n+  printf (\"%'d\", i); /* { dg-warning \"C\" \"printf ' flag\" } */\n+  printf (\"%1$d\", i); /* { dg-warning \"C\" \"printf $ format\" } */\n+}"}]}