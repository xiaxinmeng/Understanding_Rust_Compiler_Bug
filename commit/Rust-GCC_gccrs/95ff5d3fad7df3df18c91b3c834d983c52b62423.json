{"sha": "95ff5d3fad7df3df18c91b3c834d983c52b62423", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTVmZjVkM2ZhZDdkZjNkZjE4YzkxYjNjODM0ZDk4M2M1MmI2MjQyMw==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.demon.co.uk", "date": "2002-05-05T23:45:06Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2002-05-05T23:45:06Z"}, "message": "cpp.texi: Update multichar charconst docs.\n\ndoc:\n\t* cpp.texi: Update multichar charconst docs.\ntestsuite:\n\t* gcc.dg/cpp/charconst-3.c: New test.\n\nFrom-SVN: r53202", "tree": {"sha": "27ed18362e6bd785c6d3ea6203ba7a5e06584f42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/27ed18362e6bd785c6d3ea6203ba7a5e06584f42"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/95ff5d3fad7df3df18c91b3c834d983c52b62423", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95ff5d3fad7df3df18c91b3c834d983c52b62423", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95ff5d3fad7df3df18c91b3c834d983c52b62423", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95ff5d3fad7df3df18c91b3c834d983c52b62423/comments", "author": null, "committer": null, "parents": [{"sha": "49f8e94b6b09740703b9410dbd6efc2bd14a19e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49f8e94b6b09740703b9410dbd6efc2bd14a19e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49f8e94b6b09740703b9410dbd6efc2bd14a19e6"}], "stats": {"total": 73, "additions": 65, "deletions": 8}, "files": [{"sha": "91effc86db48b1f350e3b2e1dbbd68cecd3ee1f7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95ff5d3fad7df3df18c91b3c834d983c52b62423/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95ff5d3fad7df3df18c91b3c834d983c52b62423/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=95ff5d3fad7df3df18c91b3c834d983c52b62423", "patch": "@@ -1,3 +1,8 @@\n+2002-05-06  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+doc:\n+\t* cpp.texi: Update multichar charconst docs.\n+\n 2002-05-06  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* cpplex.c (cpp_interpret_charconst): Sign-extend each"}, {"sha": "7ba498dab5f649ce25fc9828f4416696695f3d36", "filename": "gcc/doc/cpp.texi", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95ff5d3fad7df3df18c91b3c834d983c52b62423/gcc%2Fdoc%2Fcpp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95ff5d3fad7df3df18c91b3c834d983c52b62423/gcc%2Fdoc%2Fcpp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp.texi?ref=95ff5d3fad7df3df18c91b3c834d983c52b62423", "patch": "@@ -3508,17 +3508,25 @@ same column as it did in the original source file.\n \n @item The numeric value of character constants in preprocessor expressions.\n \n-The preprocessor and compiler interpret character constants in the same\n-way; escape sequences such as @samp{\\a} are given the values they would\n-have on the target machine.\n+The preprocessor and compiler interpret character constants in the\n+same way; i.e.@: escape sequences such as @samp{\\a} are given the\n+values they would have on the target machine.\n \n Multi-character character constants are interpreted a character at a\n time, shifting the previous result left by the number of bits per\n-character on the host, and adding the new character.  For example, 'ab'\n-on an 8-bit host would be interpreted as @w{'a' * 256 + 'b'}.  If there\n-are more characters in the constant than can fit in the widest native\n-integer type on the host, usually a @code{long}, the excess characters\n-are ignored and a diagnostic is given.\n+target character and adding the sign-extended value of the new\n+character.  They have type @code{int}, and are treated as signed\n+regardless of whether single characters are signed or not.  If there\n+are more characters in the constant than would fit in the target\n+@code{int}, a diagnostic is given, and the excess leading characters\n+are ignored.  This methodology is not fully compatible with versions\n+3.1 and earlier of GCC, which used a confusing and inconsistent\n+valuation technique.\n+\n+For example, 'ab' for a target with an 8-bit @code{char} would be\n+interpreted as @w{'a' * 256 + 'b'}, and 'a\\234' as @w{'a' * 256 +\n+'\\234'}.  GCC 3.1 and earlier would give a different value for the\n+latter example, probably @w{'a' * 256 + (unsigned char) '\\234'}.\n \n @item Source file inclusion.\n "}, {"sha": "7bb4ca58505993ac633ebc0f17923472f9e04f03", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95ff5d3fad7df3df18c91b3c834d983c52b62423/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95ff5d3fad7df3df18c91b3c834d983c52b62423/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=95ff5d3fad7df3df18c91b3c834d983c52b62423", "patch": "@@ -1,3 +1,7 @@\n+2002-05-06  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* gcc.dg/cpp/charconst-3.c: New test.\n+\n 2002-05-05  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* gcc.dg/cpp/charconst.c: Update tests."}, {"sha": "86fcf78d473021e966b88400bac0f2d83089a7d8", "filename": "gcc/testsuite/gcc.dg/cpp/charconst-3.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95ff5d3fad7df3df18c91b3c834d983c52b62423/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcharconst-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95ff5d3fad7df3df18c91b3c834d983c52b62423/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcharconst-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcharconst-3.c?ref=95ff5d3fad7df3df18c91b3c834d983c52b62423", "patch": "@@ -0,0 +1,40 @@\n+/* Copyright (C) 2001 Free Software Foundation, Inc.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options -Wno-multichar } */\n+\n+/* This tests values and signedness of multichar charconsts.\n+\n+   Neil Booth, 5 May 2002.  */\n+\n+#include <limits.h>\n+\n+int main ()\n+{\n+  /* These tests require at least 2-byte ints.  8-)  */\n+#if INT_MAX > 127\n+  int scale = (int) (unsigned char) -1 + 1;\n+\n+  if ('ab' != ('a' * scale + 'b'))\n+    abort ();\n+\n+  if ('\\234b' != ('\\234' * scale + 'b'))\n+    abort ();\n+\n+  if ('b\\234' != ('b' * scale + '\\234'))\n+    abort ();\n+\n+  /* Multichar charconsts have type int and should be signed.  */\n+#if INT_MAX == 32767\n+  if ('\\234a' > 0)\n+    abort ();\n+#elif INT_MAX == 2147483647\n+  if ('\\234aaa' > 0)\n+    abort ();\n+#elif INT_MAX == 9223372036854775807\n+  if ('\\234aaaaaaa' > 0)\n+    abort ();\n+#endif\n+#endif\n+  return 0;\n+}"}]}