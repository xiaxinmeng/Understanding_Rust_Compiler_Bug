{"sha": "71c82d0e18de01a3b439a77f0e28ae8c0d5247b5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzFjODJkMGUxOGRlMDFhM2I0MzlhNzdmMGUyOGFlOGMwZDUyNDdiNQ==", "commit": {"author": {"name": "James Greenhalgh", "email": "james.greenhalgh@arm.com", "date": "2020-02-18T14:45:49Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-02-18T21:25:33Z"}, "message": "aarch64: Move vmull_<high_>* to intrinsics\n\nMove some arm_neon.h functions which currently use assembly over\nto intrinsics.\n\n2020-02-18  James Greenhalgh  <james.greenhalgh@arm.com>\n\ngcc/\n\t* config/aarch64/aarch64-simd-builtins.def\n\t(intrinsic_vec_smult_lo_): New.\n\t(intrinsic_vec_umult_lo_): Likewise.\n\t(vec_widen_smult_hi_): Likewise.\n\t(vec_widen_umult_hi_): Likewise.\n\t* config/aarch64/aarch64-simd.md\n\t(aarch64_intrinsic_vec_<su>mult_lo_<mode>): New.\n\t* config/aarch64/arm_neon.h (vmull_high_s8): Use intrinsics.\n\t(vmull_high_s16): Likewise.\n\t(vmull_high_s32): Likewise.\n\t(vmull_high_u8): Likewise.\n\t(vmull_high_u16): Likewise.\n\t(vmull_high_u32): Likewise.\n\t(vmull_s8): Likewise.\n\t(vmull_s16): Likewise.\n\t(vmull_s32): Likewise.\n\t(vmull_u8): Likewise.\n\t(vmull_u16): Likewise.\n\t(vmull_u32): Likewise.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/vmull_high.c: New.", "tree": {"sha": "7c2ffb1ce1aa570fd17ceae865f1bb1861fb440d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c2ffb1ce1aa570fd17ceae865f1bb1861fb440d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/71c82d0e18de01a3b439a77f0e28ae8c0d5247b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71c82d0e18de01a3b439a77f0e28ae8c0d5247b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71c82d0e18de01a3b439a77f0e28ae8c0d5247b5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71c82d0e18de01a3b439a77f0e28ae8c0d5247b5/comments", "author": {"login": "jgreenhalgh-arm", "id": 6104025, "node_id": "MDQ6VXNlcjYxMDQwMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6104025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgreenhalgh-arm", "html_url": "https://github.com/jgreenhalgh-arm", "followers_url": "https://api.github.com/users/jgreenhalgh-arm/followers", "following_url": "https://api.github.com/users/jgreenhalgh-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jgreenhalgh-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgreenhalgh-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgreenhalgh-arm/subscriptions", "organizations_url": "https://api.github.com/users/jgreenhalgh-arm/orgs", "repos_url": "https://api.github.com/users/jgreenhalgh-arm/repos", "events_url": "https://api.github.com/users/jgreenhalgh-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jgreenhalgh-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b02719918d7bfa224b7caa38fdb9be095cd3f4ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b02719918d7bfa224b7caa38fdb9be095cd3f4ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b02719918d7bfa224b7caa38fdb9be095cd3f4ad"}], "stats": {"total": 150, "additions": 78, "deletions": 72}, "files": [{"sha": "c2778e1d9d3bc6c9994f7e702da965d05abeb2b8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71c82d0e18de01a3b439a77f0e28ae8c0d5247b5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71c82d0e18de01a3b439a77f0e28ae8c0d5247b5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=71c82d0e18de01a3b439a77f0e28ae8c0d5247b5", "patch": "@@ -1,3 +1,25 @@\n+2020-02-18  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\t* config/aarch64/aarch64-simd-builtins.def\n+\t(intrinsic_vec_smult_lo_): New.\n+\t(intrinsic_vec_umult_lo_): Likewise.\n+\t(vec_widen_smult_hi_): Likewise.\n+\t(vec_widen_umult_hi_): Likewise.\n+\t* config/aarch64/aarch64-simd.md\n+\t(aarch64_intrinsic_vec_<su>mult_lo_<mode>): New.\n+\t* config/aarch64/arm_neon.h (vmull_high_s8): Use intrinsics.\n+\t(vmull_high_s16): Likewise.\n+\t(vmull_high_s32): Likewise.\n+\t(vmull_high_u8): Likewise.\n+\t(vmull_high_u16): Likewise.\n+\t(vmull_high_u32): Likewise.\n+\t(vmull_s8): Likewise.\n+\t(vmull_s16): Likewise.\n+\t(vmull_s32): Likewise.\n+\t(vmull_u8): Likewise.\n+\t(vmull_u16): Likewise.\n+\t(vmull_u32): Likewise.\n+\n 2020-02-18  Martin Liska  <mliska@suse.cz>\n \n \t* value-prof.c (stream_out_histogram_value): Restore LTO PGO"}, {"sha": "d8bb96f8ed60648477f952ea6b88eae67cc9c921", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71c82d0e18de01a3b439a77f0e28ae8c0d5247b5/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71c82d0e18de01a3b439a77f0e28ae8c0d5247b5/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=71c82d0e18de01a3b439a77f0e28ae8c0d5247b5", "patch": "@@ -185,6 +185,12 @@\n   BUILTIN_VQ_HSI (TERNOP, sqdmlal2_n, 0)\n   BUILTIN_VQ_HSI (TERNOP, sqdmlsl2_n, 0)\n \n+  BUILTIN_VD_BHSI (BINOP, intrinsic_vec_smult_lo_, 0)\n+  BUILTIN_VD_BHSI (BINOPU, intrinsic_vec_umult_lo_, 0)\n+\n+  BUILTIN_VQW (BINOP, vec_widen_smult_hi_, 10)\n+  BUILTIN_VQW (BINOPU, vec_widen_umult_hi_, 10)\n+\n   BUILTIN_VSD_HSI (BINOP, sqdmull, 0)\n   BUILTIN_VSD_HSI (TERNOP_LANE, sqdmull_lane, 0)\n   BUILTIN_VSD_HSI (TERNOP_LANE, sqdmull_laneq, 0)"}, {"sha": "89aaf8c018e3340dd2d53fc2a6538d3d1220b103", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71c82d0e18de01a3b439a77f0e28ae8c0d5247b5/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71c82d0e18de01a3b439a77f0e28ae8c0d5247b5/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=71c82d0e18de01a3b439a77f0e28ae8c0d5247b5", "patch": "@@ -1839,6 +1839,17 @@\n   [(set_attr \"type\" \"neon_mul_<Vetype>_long\")]\n )\n \n+(define_insn \"aarch64_intrinsic_vec_<su>mult_lo_<mode>\"\n+  [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n+\t(mult:<VWIDE> (ANY_EXTEND:<VWIDE>\n+\t\t\t (match_operand:VD_BHSI 1 \"register_operand\" \"w\"))\n+\t\t      (ANY_EXTEND:<VWIDE>\n+\t\t\t (match_operand:VD_BHSI 2 \"register_operand\" \"w\"))))]\n+  \"TARGET_SIMD\"\n+  \"<su>mull\\\\t%0.<Vwtype>, %1.<Vtype>, %2.<Vtype>\"\n+  [(set_attr \"type\" \"neon_mul_<Vetype>_long\")]\n+)\n+\n (define_expand \"vec_widen_<su>mult_lo_<mode>\"\n   [(match_operand:<VWIDE> 0 \"register_operand\")\n    (ANY_EXTEND:<VWIDE> (match_operand:VQW 1 \"register_operand\"))"}, {"sha": "6a2220a95d16acef7a685c3a1fbc735a1a1afc99", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 12, "deletions": 72, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71c82d0e18de01a3b439a77f0e28ae8c0d5247b5/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71c82d0e18de01a3b439a77f0e28ae8c0d5247b5/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=71c82d0e18de01a3b439a77f0e28ae8c0d5247b5", "patch": "@@ -9221,72 +9221,42 @@ __extension__ extern __inline int16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmull_high_s8 (int8x16_t __a, int8x16_t __b)\n {\n-  int16x8_t __result;\n-  __asm__ (\"smull2 %0.8h,%1.16b,%2.16b\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a), \"w\"(__b)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_vec_widen_smult_hi_v16qi (__a, __b);\n }\n \n __extension__ extern __inline int32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmull_high_s16 (int16x8_t __a, int16x8_t __b)\n {\n-  int32x4_t __result;\n-  __asm__ (\"smull2 %0.4s,%1.8h,%2.8h\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a), \"w\"(__b)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_vec_widen_smult_hi_v8hi (__a, __b);\n }\n \n __extension__ extern __inline int64x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmull_high_s32 (int32x4_t __a, int32x4_t __b)\n {\n-  int64x2_t __result;\n-  __asm__ (\"smull2 %0.2d,%1.4s,%2.4s\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a), \"w\"(__b)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_vec_widen_smult_hi_v4si (__a, __b);\n }\n \n __extension__ extern __inline uint16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmull_high_u8 (uint8x16_t __a, uint8x16_t __b)\n {\n-  uint16x8_t __result;\n-  __asm__ (\"umull2 %0.8h,%1.16b,%2.16b\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a), \"w\"(__b)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_vec_widen_umult_hi_v16qi_uuu (__a, __b);\n }\n \n __extension__ extern __inline uint32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmull_high_u16 (uint16x8_t __a, uint16x8_t __b)\n {\n-  uint32x4_t __result;\n-  __asm__ (\"umull2 %0.4s,%1.8h,%2.8h\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a), \"w\"(__b)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_vec_widen_umult_hi_v8hi_uuu (__a, __b);\n }\n \n __extension__ extern __inline uint64x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmull_high_u32 (uint32x4_t __a, uint32x4_t __b)\n {\n-  uint64x2_t __result;\n-  __asm__ (\"umull2 %0.2d,%1.4s,%2.4s\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a), \"w\"(__b)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_vec_widen_umult_hi_v4si_uuu (__a, __b);\n }\n \n #define vmull_lane_s16(a, b, c)                                         \\\n@@ -9457,72 +9427,42 @@ __extension__ extern __inline int16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmull_s8 (int8x8_t __a, int8x8_t __b)\n {\n-  int16x8_t __result;\n-  __asm__ (\"smull %0.8h, %1.8b, %2.8b\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a), \"w\"(__b)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_intrinsic_vec_smult_lo_v8qi (__a, __b);\n }\n \n __extension__ extern __inline int32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmull_s16 (int16x4_t __a, int16x4_t __b)\n {\n-  int32x4_t __result;\n-  __asm__ (\"smull %0.4s, %1.4h, %2.4h\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a), \"w\"(__b)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_intrinsic_vec_smult_lo_v4hi (__a, __b);\n }\n \n __extension__ extern __inline int64x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmull_s32 (int32x2_t __a, int32x2_t __b)\n {\n-  int64x2_t __result;\n-  __asm__ (\"smull %0.2d, %1.2s, %2.2s\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a), \"w\"(__b)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_intrinsic_vec_smult_lo_v2si (__a, __b);\n }\n \n __extension__ extern __inline uint16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmull_u8 (uint8x8_t __a, uint8x8_t __b)\n {\n-  uint16x8_t __result;\n-  __asm__ (\"umull %0.8h, %1.8b, %2.8b\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a), \"w\"(__b)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_intrinsic_vec_umult_lo_v8qi_uuu (__a, __b);\n }\n \n __extension__ extern __inline uint32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmull_u16 (uint16x4_t __a, uint16x4_t __b)\n {\n-  uint32x4_t __result;\n-  __asm__ (\"umull %0.4s, %1.4h, %2.4h\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a), \"w\"(__b)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_intrinsic_vec_umult_lo_v4hi_uuu (__a, __b);\n }\n \n __extension__ extern __inline uint64x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmull_u32 (uint32x2_t __a, uint32x2_t __b)\n {\n-  uint64x2_t __result;\n-  __asm__ (\"umull %0.2d, %1.2s, %2.2s\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a), \"w\"(__b)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_intrinsic_vec_umult_lo_v2si_uuu (__a, __b);\n }\n \n __extension__ extern __inline int16x4_t"}, {"sha": "de7c6c0bc9acfc178c89b5ccf1f7b4c614c91c45", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71c82d0e18de01a3b439a77f0e28ae8c0d5247b5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71c82d0e18de01a3b439a77f0e28ae8c0d5247b5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=71c82d0e18de01a3b439a77f0e28ae8c0d5247b5", "patch": "@@ -1,3 +1,7 @@\n+2020-02-18  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\t* gcc.target/aarch64/vmull_high.c: New.\n+\n 2020-02-18  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/93817"}, {"sha": "cddb7e7a96a2e9045ba8372d9275baa24b5c6493", "filename": "gcc/testsuite/gcc.target/aarch64/vmull_high.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71c82d0e18de01a3b439a77f0e28ae8c0d5247b5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvmull_high.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71c82d0e18de01a3b439a77f0e28ae8c0d5247b5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvmull_high.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvmull_high.c?ref=71c82d0e18de01a3b439a77f0e28ae8c0d5247b5", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-O3\" } */\n+\n+#include <arm_neon.h>\n+\n+int64x2_t\n+doit (int8x16_t a)\n+{\n+  int16x8_t b = vmull_high_s8 (a, a);\n+  int32x4_t c = vmull_high_s16 (b, b);\n+  return vmull_high_s32 (c, c);\n+}\n+\n+uint64x2_t\n+douit (uint8x16_t a)\n+{\n+  uint16x8_t b = vmull_high_u8 (a, a);\n+  uint32x4_t c = vmull_high_u16 (b, b);\n+  return vmull_high_u32 (c, c);\n+}\n+\n+/* { dg-final { scan-assembler-times \"smull2\\[ |\\t\\]*v\" 3} }  */\n+/* { dg-final { scan-assembler-times \"umull2\\[ |\\t\\]*v\" 3} }  */"}]}