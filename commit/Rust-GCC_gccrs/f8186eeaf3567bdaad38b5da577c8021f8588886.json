{"sha": "f8186eeaf3567bdaad38b5da577c8021f8588886", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjgxODZlZWFmMzU2N2JkYWFkMzhiNWRhNTc3YzgwMjFmODU4ODg4Ng==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-11-16T11:20:30Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-11-16T11:20:30Z"}, "message": "[AArch64] Add gather loads for partial SVE modes\n\nThis patch adds support for gather loads of partial vectors,\nwhere the vector base or offset elements can be wider than the\nelements being loaded.\n\n2019-11-16  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* config/aarch64/iterators.md (SVE_24, SVE_2, SVE_4): New mode\n\titerators.\n\t* config/aarch64/aarch64-sve.md\n\t(gather_load<SVE_FULL_SD:mode><v_int_equiv>): Extend to...\n\t(gather_load<SVE_24:mode><v_int_container>): ...this.\n\t(mask_gather_load<SVE_FULL_S:mode><v_int_equiv>): Extend to...\n\t(mask_gather_load<SVE_4:mode><v_int_container>): ...this.\n\t(mask_gather_load<SVE_FULL_D:mode><v_int_equiv>): Extend to...\n\t(mask_gather_load<SVE_2:mode><v_int_container>): ...this.\n\t(*mask_gather_load<SVE_2:mode><v_int_container>_<su>xtw_unpacked):\n\tNew pattern.\n\t(*mask_gather_load<SVE_FULL_D:mode><v_int_equiv>_sxtw): Extend to...\n\t(*mask_gather_load<SVE_2:mode><v_int_equiv>_sxtw): ...this.\n\tAllow the nominal extension predicate to be different from the\n\tload predicate.\n\t(*mask_gather_load<SVE_FULL_D:mode><v_int_equiv>_uxtw): Extend to...\n\t(*mask_gather_load<SVE_2:mode><v_int_equiv>_uxtw): ...this.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/sve/gather_load_1.c (TEST_LOOP): Start at 0.\n\t(TEST_ALL): Add tests for 8-bit and 16-bit elements.\n\t* gcc.target/aarch64/sve/gather_load_2.c: Update accordingly.\n\t* gcc.target/aarch64/sve/gather_load_3.c (TEST_LOOP): Start at 0.\n\t(TEST_ALL): Add tests for 8-bit and 16-bit elements.\n\t* gcc.target/aarch64/sve/gather_load_4.c: Update accordingly.\n\t* gcc.target/aarch64/sve/gather_load_5.c (TEST_LOOP): Start at 0.\n\t(TEST_ALL): Add tests for 8-bit, 16-bit and 32-bit elements.\n\t* gcc.target/aarch64/sve/gather_load_6.c: Add\n\t--param aarch64-sve-compare-costs=0.\n\t(TEST_LOOP): Start at 0.\n\t* gcc.target/aarch64/sve/gather_load_7.c: Add\n\t--param aarch64-sve-compare-costs=0.\n\t* gcc.target/aarch64/sve/gather_load_8.c: New test.\n\t* gcc.target/aarch64/sve/gather_load_9.c: Likewise.\n\t* gcc.target/aarch64/sve/mask_gather_load_6.c: Add\n\t--param aarch64-sve-compare-costs=0.\n\nFrom-SVN: r278345", "tree": {"sha": "2d8ea5a43102b77cd2084e778b73cbcb65aa8a2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2d8ea5a43102b77cd2084e778b73cbcb65aa8a2a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f8186eeaf3567bdaad38b5da577c8021f8588886", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8186eeaf3567bdaad38b5da577c8021f8588886", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8186eeaf3567bdaad38b5da577c8021f8588886", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8186eeaf3567bdaad38b5da577c8021f8588886/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2d56600c8de397d09a16dedd33d310a763a832ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d56600c8de397d09a16dedd33d310a763a832ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d56600c8de397d09a16dedd33d310a763a832ae"}], "stats": {"total": 318, "additions": 268, "deletions": 50}, "files": [{"sha": "12533068a57818b7b2aa00998ab931033a40d704", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8186eeaf3567bdaad38b5da577c8021f8588886/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8186eeaf3567bdaad38b5da577c8021f8588886/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f8186eeaf3567bdaad38b5da577c8021f8588886", "patch": "@@ -1,3 +1,23 @@\n+2019-11-16  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/iterators.md (SVE_24, SVE_2, SVE_4): New mode\n+\titerators.\n+\t* config/aarch64/aarch64-sve.md\n+\t(gather_load<SVE_FULL_SD:mode><v_int_equiv>): Extend to...\n+\t(gather_load<SVE_24:mode><v_int_container>): ...this.\n+\t(mask_gather_load<SVE_FULL_S:mode><v_int_equiv>): Extend to...\n+\t(mask_gather_load<SVE_4:mode><v_int_container>): ...this.\n+\t(mask_gather_load<SVE_FULL_D:mode><v_int_equiv>): Extend to...\n+\t(mask_gather_load<SVE_2:mode><v_int_container>): ...this.\n+\t(*mask_gather_load<SVE_2:mode><v_int_container>_<su>xtw_unpacked):\n+\tNew pattern.\n+\t(*mask_gather_load<SVE_FULL_D:mode><v_int_equiv>_sxtw): Extend to...\n+\t(*mask_gather_load<SVE_2:mode><v_int_equiv>_sxtw): ...this.\n+\tAllow the nominal extension predicate to be different from the\n+\tload predicate.\n+\t(*mask_gather_load<SVE_FULL_D:mode><v_int_equiv>_uxtw): Extend to...\n+\t(*mask_gather_load<SVE_2:mode><v_int_equiv>_uxtw): ...this.\n+\n 2019-11-16  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* config/aarch64/aarch64-sve.md"}, {"sha": "e26ac455a0e1d92f932f9628ed48ce305a097471", "filename": "gcc/config/aarch64/aarch64-sve.md", "status": "modified", "additions": 70, "deletions": 39, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8186eeaf3567bdaad38b5da577c8021f8588886/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8186eeaf3567bdaad38b5da577c8021f8588886/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md?ref=f8186eeaf3567bdaad38b5da577c8021f8588886", "patch": "@@ -1302,12 +1302,12 @@\n ;; -------------------------------------------------------------------------\n \n ;; Unpredicated gather loads.\n-(define_expand \"gather_load<mode><v_int_equiv>\"\n-  [(set (match_operand:SVE_FULL_SD 0 \"register_operand\")\n-\t(unspec:SVE_FULL_SD\n+(define_expand \"gather_load<mode><v_int_container>\"\n+  [(set (match_operand:SVE_24 0 \"register_operand\")\n+\t(unspec:SVE_24\n \t  [(match_dup 5)\n \t   (match_operand:DI 1 \"aarch64_sve_gather_offset_<Vesize>\")\n-\t   (match_operand:<V_INT_EQUIV> 2 \"register_operand\")\n+\t   (match_operand:<V_INT_CONTAINER> 2 \"register_operand\")\n \t   (match_operand:DI 3 \"const_int_operand\")\n \t   (match_operand:DI 4 \"aarch64_gather_scale_operand_<Vesize>\")\n \t   (mem:BLK (scratch))]\n@@ -1320,85 +1320,116 @@\n \n ;; Predicated gather loads for 32-bit elements.  Operand 3 is true for\n ;; unsigned extension and false for signed extension.\n-(define_insn \"mask_gather_load<mode><v_int_equiv>\"\n-  [(set (match_operand:SVE_FULL_S 0 \"register_operand\" \"=w, w, w, w, w, w\")\n-\t(unspec:SVE_FULL_S\n+(define_insn \"mask_gather_load<mode><v_int_container>\"\n+  [(set (match_operand:SVE_4 0 \"register_operand\" \"=w, w, w, w, w, w\")\n+\t(unspec:SVE_4\n \t  [(match_operand:VNx4BI 5 \"register_operand\" \"Upl, Upl, Upl, Upl, Upl, Upl\")\n-\t   (match_operand:DI 1 \"aarch64_sve_gather_offset_w\" \"Z, vgw, rk, rk, rk, rk\")\n+\t   (match_operand:DI 1 \"aarch64_sve_gather_offset_<Vesize>\" \"Z, vgw, rk, rk, rk, rk\")\n \t   (match_operand:VNx4SI 2 \"register_operand\" \"w, w, w, w, w, w\")\n \t   (match_operand:DI 3 \"const_int_operand\" \"Ui1, Ui1, Z, Ui1, Z, Ui1\")\n-\t   (match_operand:DI 4 \"aarch64_gather_scale_operand_w\" \"Ui1, Ui1, Ui1, Ui1, i, i\")\n+\t   (match_operand:DI 4 \"aarch64_gather_scale_operand_<Vesize>\" \"Ui1, Ui1, Ui1, Ui1, i, i\")\n \t   (mem:BLK (scratch))]\n \t  UNSPEC_LD1_GATHER))]\n   \"TARGET_SVE\"\n   \"@\n-   ld1w\\t%0.s, %5/z, [%2.s]\n-   ld1w\\t%0.s, %5/z, [%2.s, #%1]\n-   ld1w\\t%0.s, %5/z, [%1, %2.s, sxtw]\n-   ld1w\\t%0.s, %5/z, [%1, %2.s, uxtw]\n-   ld1w\\t%0.s, %5/z, [%1, %2.s, sxtw %p4]\n-   ld1w\\t%0.s, %5/z, [%1, %2.s, uxtw %p4]\"\n+   ld1<Vesize>\\t%0.s, %5/z, [%2.s]\n+   ld1<Vesize>\\t%0.s, %5/z, [%2.s, #%1]\n+   ld1<Vesize>\\t%0.s, %5/z, [%1, %2.s, sxtw]\n+   ld1<Vesize>\\t%0.s, %5/z, [%1, %2.s, uxtw]\n+   ld1<Vesize>\\t%0.s, %5/z, [%1, %2.s, sxtw %p4]\n+   ld1<Vesize>\\t%0.s, %5/z, [%1, %2.s, uxtw %p4]\"\n )\n \n ;; Predicated gather loads for 64-bit elements.  The value of operand 3\n ;; doesn't matter in this case.\n-(define_insn \"mask_gather_load<mode><v_int_equiv>\"\n-  [(set (match_operand:SVE_FULL_D 0 \"register_operand\" \"=w, w, w, w\")\n-\t(unspec:SVE_FULL_D\n+(define_insn \"mask_gather_load<mode><v_int_container>\"\n+  [(set (match_operand:SVE_2 0 \"register_operand\" \"=w, w, w, w\")\n+\t(unspec:SVE_2\n \t  [(match_operand:VNx2BI 5 \"register_operand\" \"Upl, Upl, Upl, Upl\")\n-\t   (match_operand:DI 1 \"aarch64_sve_gather_offset_d\" \"Z, vgd, rk, rk\")\n+\t   (match_operand:DI 1 \"aarch64_sve_gather_offset_<Vesize>\" \"Z, vgd, rk, rk\")\n \t   (match_operand:VNx2DI 2 \"register_operand\" \"w, w, w, w\")\n \t   (match_operand:DI 3 \"const_int_operand\")\n-\t   (match_operand:DI 4 \"aarch64_gather_scale_operand_d\" \"Ui1, Ui1, Ui1, i\")\n+\t   (match_operand:DI 4 \"aarch64_gather_scale_operand_<Vesize>\" \"Ui1, Ui1, Ui1, i\")\n \t   (mem:BLK (scratch))]\n \t  UNSPEC_LD1_GATHER))]\n   \"TARGET_SVE\"\n   \"@\n-   ld1d\\t%0.d, %5/z, [%2.d]\n-   ld1d\\t%0.d, %5/z, [%2.d, #%1]\n-   ld1d\\t%0.d, %5/z, [%1, %2.d]\n-   ld1d\\t%0.d, %5/z, [%1, %2.d, lsl %p4]\"\n+   ld1<Vesize>\\t%0.d, %5/z, [%2.d]\n+   ld1<Vesize>\\t%0.d, %5/z, [%2.d, #%1]\n+   ld1<Vesize>\\t%0.d, %5/z, [%1, %2.d]\n+   ld1<Vesize>\\t%0.d, %5/z, [%1, %2.d, lsl %p4]\"\n )\n \n-;; Likewise, but with the offset being sign-extended from 32 bits.\n-(define_insn \"*mask_gather_load<mode><v_int_equiv>_sxtw\"\n-  [(set (match_operand:SVE_FULL_D 0 \"register_operand\" \"=w, w\")\n-\t(unspec:SVE_FULL_D\n+;; Likewise, but with the offset being extended from 32 bits.\n+(define_insn_and_rewrite \"*mask_gather_load<mode><v_int_container>_<su>xtw_unpacked\"\n+  [(set (match_operand:SVE_2 0 \"register_operand\" \"=w, w\")\n+\t(unspec:SVE_2\n+\t  [(match_operand:VNx2BI 5 \"register_operand\" \"Upl, Upl\")\n+\t   (match_operand:DI 1 \"register_operand\" \"rk, rk\")\n+\t   (unspec:VNx2DI\n+\t     [(match_operand 6)\n+\t      (ANY_EXTEND:VNx2DI\n+\t\t(match_operand:VNx2SI 2 \"register_operand\" \"w, w\"))]\n+\t     UNSPEC_PRED_X)\n+\t   (match_operand:DI 3 \"const_int_operand\")\n+\t   (match_operand:DI 4 \"aarch64_gather_scale_operand_<Vesize>\" \"Ui1, i\")\n+\t   (mem:BLK (scratch))]\n+\t  UNSPEC_LD1_GATHER))]\n+  \"TARGET_SVE\"\n+  \"@\n+   ld1<Vesize>\\t%0.d, %5/z, [%1, %2.d, <su>xtw]\n+   ld1<Vesize>\\t%0.d, %5/z, [%1, %2.d, <su>xtw %p4]\"\n+  \"&& !CONSTANT_P (operands[6])\"\n+  {\n+    operands[6] = CONSTM1_RTX (VNx2BImode);\n+  }\n+)\n+\n+;; Likewise, but with the offset being truncated to 32 bits and then\n+;; sign-extended.\n+(define_insn_and_rewrite \"*mask_gather_load<mode><v_int_container>_sxtw\"\n+  [(set (match_operand:SVE_2 0 \"register_operand\" \"=w, w\")\n+\t(unspec:SVE_2\n \t  [(match_operand:VNx2BI 5 \"register_operand\" \"Upl, Upl\")\n \t   (match_operand:DI 1 \"register_operand\" \"rk, rk\")\n \t   (unspec:VNx2DI\n-\t     [(match_dup 5)\n+\t     [(match_operand 6)\n \t      (sign_extend:VNx2DI\n \t\t(truncate:VNx2SI\n \t\t  (match_operand:VNx2DI 2 \"register_operand\" \"w, w\")))]\n \t     UNSPEC_PRED_X)\n \t   (match_operand:DI 3 \"const_int_operand\")\n-\t   (match_operand:DI 4 \"aarch64_gather_scale_operand_d\" \"Ui1, i\")\n+\t   (match_operand:DI 4 \"aarch64_gather_scale_operand_<Vesize>\" \"Ui1, i\")\n \t   (mem:BLK (scratch))]\n \t  UNSPEC_LD1_GATHER))]\n   \"TARGET_SVE\"\n   \"@\n-   ld1d\\t%0.d, %5/z, [%1, %2.d, sxtw]\n-   ld1d\\t%0.d, %5/z, [%1, %2.d, sxtw %p4]\"\n+   ld1<Vesize>\\t%0.d, %5/z, [%1, %2.d, sxtw]\n+   ld1<Vesize>\\t%0.d, %5/z, [%1, %2.d, sxtw %p4]\"\n+  \"&& !CONSTANT_P (operands[6])\"\n+  {\n+    operands[6] = CONSTM1_RTX (VNx2BImode);\n+  }\n )\n \n-;; Likewise, but with the offset being zero-extended from 32 bits.\n-(define_insn \"*mask_gather_load<mode><v_int_equiv>_uxtw\"\n-  [(set (match_operand:SVE_FULL_D 0 \"register_operand\" \"=w, w\")\n-\t(unspec:SVE_FULL_D\n+;; Likewise, but with the offset being truncated to 32 bits and then\n+;; zero-extended.\n+(define_insn \"*mask_gather_load<mode><v_int_container>_uxtw\"\n+  [(set (match_operand:SVE_2 0 \"register_operand\" \"=w, w\")\n+\t(unspec:SVE_2\n \t  [(match_operand:VNx2BI 5 \"register_operand\" \"Upl, Upl\")\n \t   (match_operand:DI 1 \"register_operand\" \"rk, rk\")\n \t   (and:VNx2DI\n \t     (match_operand:VNx2DI 2 \"register_operand\" \"w, w\")\n \t     (match_operand:VNx2DI 6 \"aarch64_sve_uxtw_immediate\"))\n \t   (match_operand:DI 3 \"const_int_operand\")\n-\t   (match_operand:DI 4 \"aarch64_gather_scale_operand_d\" \"Ui1, i\")\n+\t   (match_operand:DI 4 \"aarch64_gather_scale_operand_<Vesize>\" \"Ui1, i\")\n \t   (mem:BLK (scratch))]\n \t  UNSPEC_LD1_GATHER))]\n   \"TARGET_SVE\"\n   \"@\n-   ld1d\\t%0.d, %5/z, [%1, %2.d, uxtw]\n-   ld1d\\t%0.d, %5/z, [%1, %2.d, uxtw %p4]\"\n+   ld1<Vesize>\\t%0.d, %5/z, [%1, %2.d, uxtw]\n+   ld1<Vesize>\\t%0.d, %5/z, [%1, %2.d, uxtw %p4]\"\n )\n \n ;; -------------------------------------------------------------------------"}, {"sha": "c5b0fa76866200bced633c46bdab87e70ddeea18", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8186eeaf3567bdaad38b5da577c8021f8588886/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8186eeaf3567bdaad38b5da577c8021f8588886/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=f8186eeaf3567bdaad38b5da577c8021f8588886", "patch": "@@ -364,6 +364,16 @@\n \t\t\t\tVNx4SI VNx2SI\n \t\t\t\tVNx2DI])\n \n+;; SVE modes with 2 or 4 elements.\n+(define_mode_iterator SVE_24 [VNx2QI VNx2HI VNx2HF VNx2SI VNx2SF VNx2DI VNx2DF\n+\t\t\t      VNx4QI VNx4HI VNx4HF VNx4SI VNx4SF])\n+\n+;; SVE modes with 2 elements.\n+(define_mode_iterator SVE_2 [VNx2QI VNx2HI VNx2HF VNx2SI VNx2SF VNx2DI VNx2DF])\n+\n+;; SVE modes with 4 elements.\n+(define_mode_iterator SVE_4 [VNx4QI VNx4HI VNx4HF VNx4SI VNx4SF])\n+\n ;; Modes involved in extending or truncating SVE data, for 8 elements per\n ;; 128-bit block.\n (define_mode_iterator VNx8_NARROW [VNx8QI])\n@@ -1113,6 +1123,31 @@\n \t\t\t      (VNx4SI \"vnx4sf\") (VNx4SF \"vnx4sf\")\n \t\t\t      (VNx2DI \"vnx2df\") (VNx2DF \"vnx2df\")])\n \n+;; Maps full and partial vector modes of any element type to a full-vector\n+;; integer mode with the same number of units.\n+(define_mode_attr V_INT_CONTAINER [(VNx16QI \"VNx16QI\") (VNx8QI \"VNx8HI\")\n+\t\t\t\t   (VNx4QI \"VNx4SI\") (VNx2QI \"VNx2DI\")\n+\t\t\t\t   (VNx8HI \"VNx8HI\") (VNx4HI \"VNx4SI\")\n+\t\t\t\t   (VNx2HI \"VNx2DI\")\n+\t\t\t\t   (VNx4SI \"VNx4SI\") (VNx2SI \"VNx2DI\")\n+\t\t\t\t   (VNx2DI \"VNx2DI\")\n+\t\t\t\t   (VNx8HF \"VNx8HI\") (VNx4HF \"VNx4SI\")\n+\t\t\t\t   (VNx2HF \"VNx2DI\")\n+\t\t\t\t   (VNx4SF \"VNx4SI\") (VNx2SF \"VNx2SI\")\n+\t\t\t\t   (VNx2DF \"VNx2DI\")])\n+\n+;; Lower-case version of V_INT_CONTAINER.\n+(define_mode_attr v_int_container [(VNx16QI \"vnx16qi\") (VNx8QI \"vnx8hi\")\n+\t\t\t\t   (VNx4QI \"vnx4si\") (VNx2QI \"vnx2di\")\n+\t\t\t\t   (VNx8HI \"vnx8hi\") (VNx4HI \"vnx4si\")\n+\t\t\t\t   (VNx2HI \"vnx2di\")\n+\t\t\t\t   (VNx4SI \"vnx4si\") (VNx2SI \"vnx2di\")\n+\t\t\t\t   (VNx2DI \"vnx2di\")\n+\t\t\t\t   (VNx8HF \"vnx8hi\") (VNx4HF \"vnx4si\")\n+\t\t\t\t   (VNx2HF \"vnx2di\")\n+\t\t\t\t   (VNx4SF \"vnx4si\") (VNx2SF \"vnx2di\")\n+\t\t\t\t   (VNx2DF \"vnx2di\")])\n+\n ;; Mode for vector conditional operations where the comparison has\n ;; different type from the lhs.\n (define_mode_attr V_cmp_mixed [(V2SI \"V2SF\") (V4SI \"V4SF\")"}, {"sha": "e15be637e5fe89436c071ced33fe8d5a68d611a7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8186eeaf3567bdaad38b5da577c8021f8588886/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8186eeaf3567bdaad38b5da577c8021f8588886/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f8186eeaf3567bdaad38b5da577c8021f8588886", "patch": "@@ -1,3 +1,23 @@\n+2019-11-16  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/sve/gather_load_1.c (TEST_LOOP): Start at 0.\n+\t(TEST_ALL): Add tests for 8-bit and 16-bit elements.\n+\t* gcc.target/aarch64/sve/gather_load_2.c: Update accordingly.\n+\t* gcc.target/aarch64/sve/gather_load_3.c (TEST_LOOP): Start at 0.\n+\t(TEST_ALL): Add tests for 8-bit and 16-bit elements.\n+\t* gcc.target/aarch64/sve/gather_load_4.c: Update accordingly.\n+\t* gcc.target/aarch64/sve/gather_load_5.c (TEST_LOOP): Start at 0.\n+\t(TEST_ALL): Add tests for 8-bit, 16-bit and 32-bit elements.\n+\t* gcc.target/aarch64/sve/gather_load_6.c: Add\n+\t--param aarch64-sve-compare-costs=0.\n+\t(TEST_LOOP): Start at 0.\n+\t* gcc.target/aarch64/sve/gather_load_7.c: Add\n+\t--param aarch64-sve-compare-costs=0.\n+\t* gcc.target/aarch64/sve/gather_load_8.c: New test.\n+\t* gcc.target/aarch64/sve/gather_load_9.c: Likewise.\n+\t* gcc.target/aarch64/sve/mask_gather_load_6.c: Add\n+\t--param aarch64-sve-compare-costs=0.\n+\n 2019-11-16  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* gcc.target/aarch64/sve/mask_struct_load_1.c: Add"}, {"sha": "941ca6569f4b27afcab97bb8c6a5255baceee671", "filename": "gcc/testsuite/gcc.target/aarch64/sve/gather_load_1.c", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8186eeaf3567bdaad38b5da577c8021f8588886/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fgather_load_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8186eeaf3567bdaad38b5da577c8021f8588886/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fgather_load_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fgather_load_1.c?ref=f8186eeaf3567bdaad38b5da577c8021f8588886", "patch": "@@ -8,17 +8,20 @@\n #define INDEX64 int64_t\n #endif\n \n-/* Invoked 18 times for each data size.  */\n #define TEST_LOOP(DATA_TYPE, BITS)\t\t\t\t\t\\\n   void __attribute__ ((noinline, noclone))\t\t\t\t\\\n   f_##DATA_TYPE (DATA_TYPE *restrict dest, DATA_TYPE *restrict src,\t\\\n \t\t INDEX##BITS *indices, int n)\t\t\t\t\\\n   {\t\t\t\t\t\t\t\t\t\\\n-    for (int i = 9; i < n; ++i)\t\t\t\t\t\t\\\n+    for (int i = 0; i < n; ++i)\t\t\t\t\t\t\\\n       dest[i] += src[indices[i]];\t\t\t\t\t\\\n   }\n \n #define TEST_ALL(T)\t\t\t\t\\\n+  T (int8_t, 32)\t\t\t\t\\\n+  T (uint8_t, 32)\t\t\t\t\\\n+  T (int16_t, 32)\t\t\t\t\\\n+  T (uint16_t, 32)\t\t\t\t\\\n   T (int32_t, 32)\t\t\t\t\\\n   T (uint32_t, 32)\t\t\t\t\\\n   T (float, 32)\t\t\t\t\t\\\n@@ -28,5 +31,12 @@\n \n TEST_ALL (TEST_LOOP)\n \n+/* { dg-final { scan-assembler-times {\\tld1b\\tz[0-9]+\\.s, p[0-7]/z, \\[x[0-9]+, z[0-9]+.s, sxtw\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tld1h\\tz[0-9]+\\.s, p[0-7]/z, \\[x[0-9]+, z[0-9]+.s, sxtw 1\\]\\n} 2 } } */\n /* { dg-final { scan-assembler-times {\\tld1w\\tz[0-9]+\\.s, p[0-7]/z, \\[x[0-9]+, z[0-9]+.s, sxtw 2\\]\\n} 3 } } */\n /* { dg-final { scan-assembler-times {\\tld1d\\tz[0-9]+\\.d, p[0-7]/z, \\[x[0-9]+, z[0-9]+.d, lsl 3\\]\\n} 3 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tst1b\\tz[0-9]+\\.s,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tst1h\\tz[0-9]+\\.s,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tst1w\\tz[0-9]+\\.s,} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tst1d\\tz[0-9]+\\.d,} 3 } } */"}, {"sha": "4a73d1fdbe90b7bb241448236905ed906b4e2234", "filename": "gcc/testsuite/gcc.target/aarch64/sve/gather_load_2.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8186eeaf3567bdaad38b5da577c8021f8588886/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fgather_load_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8186eeaf3567bdaad38b5da577c8021f8588886/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fgather_load_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fgather_load_2.c?ref=f8186eeaf3567bdaad38b5da577c8021f8588886", "patch": "@@ -6,5 +6,12 @@\n \n #include \"gather_load_1.c\"\n \n+/* { dg-final { scan-assembler-times {\\tld1b\\tz[0-9]+\\.s, p[0-7]/z, \\[x[0-9]+, z[0-9]+.s, uxtw\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tld1h\\tz[0-9]+\\.s, p[0-7]/z, \\[x[0-9]+, z[0-9]+.s, uxtw 1\\]\\n} 2 } } */\n /* { dg-final { scan-assembler-times {\\tld1w\\tz[0-9]+\\.s, p[0-7]/z, \\[x[0-9]+, z[0-9]+.s, uxtw 2\\]\\n} 3 } } */\n /* { dg-final { scan-assembler-times {\\tld1d\\tz[0-9]+\\.d, p[0-7]/z, \\[x[0-9]+, z[0-9]+.d, lsl 3\\]\\n} 3 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tst1b\\tz[0-9]+\\.s,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tst1h\\tz[0-9]+\\.s,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tst1w\\tz[0-9]+\\.s,} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tst1d\\tz[0-9]+\\.d,} 3 } } */"}, {"sha": "bd4b208392e89ca2b0514f1dae132710ae42721b", "filename": "gcc/testsuite/gcc.target/aarch64/sve/gather_load_3.c", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8186eeaf3567bdaad38b5da577c8021f8588886/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fgather_load_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8186eeaf3567bdaad38b5da577c8021f8588886/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fgather_load_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fgather_load_3.c?ref=f8186eeaf3567bdaad38b5da577c8021f8588886", "patch": "@@ -8,17 +8,20 @@\n #define INDEX64 int64_t\n #endif\n \n-/* Invoked 18 times for each data size.  */\n #define TEST_LOOP(DATA_TYPE, BITS)\t\t\t\t\t\\\n   void __attribute__ ((noinline, noclone))\t\t\t\t\\\n   f_##DATA_TYPE (DATA_TYPE *restrict dest, DATA_TYPE *restrict src,\t\\\n \t\t INDEX##BITS *indices, int n)\t\t\t\t\\\n   {\t\t\t\t\t\t\t\t\t\\\n-    for (int i = 9; i < n; ++i)\t\t\t\t\t\t\\\n+    for (int i = 0; i < n; ++i)\t\t\t\t\t\t\\\n       dest[i] += *(DATA_TYPE *) ((char *) src + indices[i]);\t\t\\\n   }\n \n #define TEST_ALL(T)\t\t\t\t\\\n+  T (int8_t, 32)\t\t\t\t\\\n+  T (uint8_t, 32)\t\t\t\t\\\n+  T (int16_t, 32)\t\t\t\t\\\n+  T (uint16_t, 32)\t\t\t\t\\\n   T (int32_t, 32)\t\t\t\t\\\n   T (uint32_t, 32)\t\t\t\t\\\n   T (float, 32)\t\t\t\t\t\\\n@@ -28,5 +31,12 @@\n \n TEST_ALL (TEST_LOOP)\n \n+/* { dg-final { scan-assembler-times {\\tld1b\\tz[0-9]+\\.s, p[0-7]/z, \\[x[0-9]+, z[0-9]+.s, sxtw\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tld1h\\tz[0-9]+\\.s, p[0-7]/z, \\[x[0-9]+, z[0-9]+.s, sxtw\\]\\n} 2 } } */\n /* { dg-final { scan-assembler-times {\\tld1w\\tz[0-9]+\\.s, p[0-7]/z, \\[x[0-9]+, z[0-9]+.s, sxtw\\]\\n} 3 } } */\n /* { dg-final { scan-assembler-times {\\tld1d\\tz[0-9]+\\.d, p[0-7]/z, \\[x[0-9]+, z[0-9]+.d\\]\\n} 3 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tst1b\\tz[0-9]+\\.s,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tst1h\\tz[0-9]+\\.s,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tst1w\\tz[0-9]+\\.s,} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tst1d\\tz[0-9]+\\.d,} 3 } } */"}, {"sha": "2cfded6c7fb30793dda315004763583fc6b91da8", "filename": "gcc/testsuite/gcc.target/aarch64/sve/gather_load_4.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8186eeaf3567bdaad38b5da577c8021f8588886/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fgather_load_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8186eeaf3567bdaad38b5da577c8021f8588886/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fgather_load_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fgather_load_4.c?ref=f8186eeaf3567bdaad38b5da577c8021f8588886", "patch": "@@ -6,5 +6,12 @@\n \n #include \"gather_load_3.c\"\n \n+/* { dg-final { scan-assembler-times {\\tld1b\\tz[0-9]+\\.s, p[0-7]/z, \\[x[0-9]+, z[0-9]+.s, uxtw\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tld1h\\tz[0-9]+\\.s, p[0-7]/z, \\[x[0-9]+, z[0-9]+.s, uxtw\\]\\n} 2 } } */\n /* { dg-final { scan-assembler-times {\\tld1w\\tz[0-9]+\\.s, p[0-7]/z, \\[x[0-9]+, z[0-9]+.s, uxtw\\]\\n} 3 } } */\n /* { dg-final { scan-assembler-times {\\tld1d\\tz[0-9]+\\.d, p[0-7]/z, \\[x[0-9]+, z[0-9]+.d\\]\\n} 3 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tst1b\\tz[0-9]+\\.s,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tst1h\\tz[0-9]+\\.s,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tst1w\\tz[0-9]+\\.s,} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tst1d\\tz[0-9]+\\.d,} 3 } } */"}, {"sha": "3737e048b80c01eef3229f788ce4f5cf757cc7c9", "filename": "gcc/testsuite/gcc.target/aarch64/sve/gather_load_5.c", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8186eeaf3567bdaad38b5da577c8021f8588886/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fgather_load_5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8186eeaf3567bdaad38b5da577c8021f8588886/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fgather_load_5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fgather_load_5.c?ref=f8186eeaf3567bdaad38b5da577c8021f8588886", "patch": "@@ -3,21 +3,34 @@\n \n #include <stdint.h>\n \n-/* Invoked 18 times for each data size.  */\n #define TEST_LOOP(DATA_TYPE)\t\t\t\t\t\t\\\n   void __attribute__ ((noinline, noclone))\t\t\t\t\\\n   f_##DATA_TYPE (DATA_TYPE *restrict dest, DATA_TYPE *restrict *src,\t\\\n \t\t int n)\t\t\t\t\t\t\t\\\n   {\t\t\t\t\t\t\t\t\t\\\n-    for (int i = 9; i < n; ++i)\t\t\t\t\t\t\\\n+    for (int i = 0; i < n; ++i)\t\t\t\t\t\t\\\n       dest[i] += *src[i];\t\t\t\t\t\t\\\n   }\n \n #define TEST_ALL(T)\t\t\t\t\\\n+  T (int8_t)\t\t\t\t\t\\\n+  T (uint8_t)\t\t\t\t\t\\\n+  T (int16_t)\t\t\t\t\t\\\n+  T (uint16_t)\t\t\t\t\t\\\n+  T (int32_t)\t\t\t\t\t\\\n+  T (uint32_t)\t\t\t\t\t\\\n   T (int64_t)\t\t\t\t\t\\\n   T (uint64_t)\t\t\t\t\t\\\n   T (double)\n \n TEST_ALL (TEST_LOOP)\n \n+/* { dg-final { scan-assembler-times {\\tld1b\\tz[0-9]+\\.d, p[0-7]/z, \\[z[0-9]+.d\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tld1h\\tz[0-9]+\\.d, p[0-7]/z, \\[z[0-9]+.d\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tld1w\\tz[0-9]+\\.d, p[0-7]/z, \\[z[0-9]+.d\\]\\n} 2 } } */\n /* { dg-final { scan-assembler-times {\\tld1d\\tz[0-9]+\\.d, p[0-7]/z, \\[z[0-9]+.d\\]\\n} 3 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tst1b\\tz[0-9]+\\.d,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tst1h\\tz[0-9]+\\.d,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tst1w\\tz[0-9]+\\.d,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tst1d\\tz[0-9]+\\.d,} 3 } } */"}, {"sha": "6fdd16b4adbbc11086f656dd90978866fbf601ae", "filename": "gcc/testsuite/gcc.target/aarch64/sve/gather_load_6.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8186eeaf3567bdaad38b5da577c8021f8588886/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fgather_load_6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8186eeaf3567bdaad38b5da577c8021f8588886/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fgather_load_6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fgather_load_6.c?ref=f8186eeaf3567bdaad38b5da577c8021f8588886", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do assemble { target aarch64_asm_sve_ok } } */\n-/* { dg-options \"-O2 -ftree-vectorize -fwrapv --save-temps\" } */\n+/* { dg-options \"-O2 -ftree-vectorize -fwrapv --save-temps --param aarch64-sve-compare-costs=0\" } */\n \n #include <stdint.h>\n \n@@ -8,13 +8,12 @@\n #define INDEX32 int32_t\n #endif\n \n-/* Invoked 18 times for each data size.  */\n #define TEST_LOOP(DATA_TYPE, BITS)\t\t\t\t\t\\\n   void __attribute__ ((noinline, noclone))\t\t\t\t\\\n   f_##DATA_TYPE (DATA_TYPE *restrict dest, DATA_TYPE *restrict src,\t\\\n \t\t INDEX##BITS *indices, INDEX##BITS mask, int n)\t\t\\\n   {\t\t\t\t\t\t\t\t\t\\\n-    for (int i = 9; i < n; ++i)\t\t\t\t\t\t\\\n+    for (int i = 0; i < n; ++i)\t\t\t\t\t\t\\\n       dest[i] = src[(INDEX##BITS) (indices[i] | mask)];\t\t\t\\\n   }\n "}, {"sha": "5a3f3e77b64cc61616cddf791b23431fbd29832c", "filename": "gcc/testsuite/gcc.target/aarch64/sve/gather_load_7.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8186eeaf3567bdaad38b5da577c8021f8588886/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fgather_load_7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8186eeaf3567bdaad38b5da577c8021f8588886/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fgather_load_7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fgather_load_7.c?ref=f8186eeaf3567bdaad38b5da577c8021f8588886", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do assemble { target aarch64_asm_sve_ok } } */\n-/* { dg-options \"-O2 -ftree-vectorize --save-temps\" } */\n+/* { dg-options \"-O2 -ftree-vectorize --save-temps --param aarch64-sve-compare-costs=0\" } */\n \n #define INDEX16 uint16_t\n #define INDEX32 uint32_t"}, {"sha": "0ea6f72b488aec1b4f88d7f4f29836d9d153e73f", "filename": "gcc/testsuite/gcc.target/aarch64/sve/gather_load_8.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8186eeaf3567bdaad38b5da577c8021f8588886/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fgather_load_8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8186eeaf3567bdaad38b5da577c8021f8588886/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fgather_load_8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fgather_load_8.c?ref=f8186eeaf3567bdaad38b5da577c8021f8588886", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fwrapv --save-temps\" } */\n+\n+#include <stdint.h>\n+\n+#ifndef INDEX32\n+#define INDEX16 int16_t\n+#define INDEX32 int32_t\n+#endif\n+\n+#define TEST_LOOP(DATA_TYPE, BITS)\t\t\t\t\t\\\n+  void __attribute__ ((noinline, noclone))\t\t\t\t\\\n+  f_##DATA_TYPE (DATA_TYPE *restrict dest, DATA_TYPE *restrict src,\t\\\n+\t\t INDEX##BITS *indices, INDEX##BITS mask, int n)\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < n; ++i)\t\t\t\t\t\t\\\n+      dest[i] = src[(INDEX##BITS) (indices[i] + mask)];\t\t\t\\\n+  }\n+\n+#define TEST_ALL(T)\t\t\t\t\\\n+  T (int8_t, 16)\t\t\t\t\\\n+  T (uint8_t, 16)\t\t\t\t\\\n+  T (int16_t, 16)\t\t\t\t\\\n+  T (uint16_t, 16)\t\t\t\t\\\n+  T (_Float16, 16)\t\t\t\t\\\n+  T (int32_t, 16)\t\t\t\t\\\n+  T (uint32_t, 16)\t\t\t\t\\\n+  T (float, 16)\t\t\t\t\t\\\n+  T (int64_t, 32)\t\t\t\t\\\n+  T (uint64_t, 32)\t\t\t\t\\\n+  T (double, 32)\n+\n+TEST_ALL (TEST_LOOP)\n+\n+/* { dg-final { scan-assembler-times {\\tld1b\\tz[0-9]+\\.s, p[0-7]/z, \\[x[0-9]+, z[0-9]+.s, sxtw\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tld1h\\tz[0-9]+\\.s, p[0-7]/z, \\[x[0-9]+, z[0-9]+.s, sxtw 1\\]\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tld1w\\tz[0-9]+\\.s, p[0-7]/z, \\[x[0-9]+, z[0-9]+.s, sxtw 2\\]\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tld1d\\tz[0-9]+\\.d, p[0-7]/z, \\[x[0-9]+, z[0-9]+.d, sxtw 3\\]\\n} 3 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tsxt.\\tz} 8 } } */\n+/* { dg-final { scan-assembler-times {\\tsxth\\tz[0-9]+\\.s,} 8 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tst1b\\tz[0-9]+\\.s,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tst1h\\tz[0-9]+\\.s,} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tst1w\\tz[0-9]+\\.s,} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tst1d\\tz[0-9]+\\.d,} 3 } } */"}, {"sha": "04b71f107728658b9d84a8429e0e25a98f2d17c9", "filename": "gcc/testsuite/gcc.target/aarch64/sve/gather_load_9.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8186eeaf3567bdaad38b5da577c8021f8588886/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fgather_load_9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8186eeaf3567bdaad38b5da577c8021f8588886/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fgather_load_9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fgather_load_9.c?ref=f8186eeaf3567bdaad38b5da577c8021f8588886", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fwrapv --save-temps\" } */\n+\n+#define INDEX16 uint16_t\n+#define INDEX32 uint32_t\n+\n+#include \"gather_load_8.c\"\n+\n+/* { dg-final { scan-assembler-times {\\tld1b\\tz[0-9]+\\.s, p[0-7]/z, \\[x[0-9]+, z[0-9]+.s, uxtw\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tld1h\\tz[0-9]+\\.s, p[0-7]/z, \\[x[0-9]+, z[0-9]+.s, uxtw 1\\]\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tld1w\\tz[0-9]+\\.s, p[0-7]/z, \\[x[0-9]+, z[0-9]+.s, uxtw 2\\]\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tld1d\\tz[0-9]+\\.d, p[0-7]/z, \\[x[0-9]+, z[0-9]+.d, uxtw 3\\]\\n} 3 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tuxt.\\tz} 8 } } */\n+/* { dg-final { scan-assembler-times {\\tuxth\\tz[0-9]+\\.s,} 8 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tst1b\\tz[0-9]+\\.s,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tst1h\\tz[0-9]+\\.s,} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tst1w\\tz[0-9]+\\.s,} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tst1d\\tz[0-9]+\\.d,} 3 } } */"}, {"sha": "a13516aad6e5a49ecc174dabc651c5cb79cdbbb0", "filename": "gcc/testsuite/gcc.target/aarch64/sve/mask_gather_load_6.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8186eeaf3567bdaad38b5da577c8021f8588886/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmask_gather_load_6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8186eeaf3567bdaad38b5da577c8021f8588886/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmask_gather_load_6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmask_gather_load_6.c?ref=f8186eeaf3567bdaad38b5da577c8021f8588886", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do assemble { target aarch64_asm_sve_ok } } */\n-/* { dg-options \"-O2 -ftree-vectorize -ffast-math --save-temps\" } */\n+/* { dg-options \"-O2 -ftree-vectorize -ffast-math --save-temps --param aarch64-sve-compare-costs=0\" } */\n \n #include <stdint.h>\n "}]}