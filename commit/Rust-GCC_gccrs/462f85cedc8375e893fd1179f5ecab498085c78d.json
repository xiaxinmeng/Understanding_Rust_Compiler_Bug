{"sha": "462f85cedc8375e893fd1179f5ecab498085c78d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDYyZjg1Y2VkYzgzNzVlODkzZmQxMTc5ZjVlY2FiNDk4MDg1Yzc4ZA==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2010-07-12T18:54:08Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2010-07-12T18:54:08Z"}, "message": "Makefile.in (expmed.o, [...]): Depend on expmed.h.\n\ngcc/\n\t* Makefile.in (expmed.o, target-globals.o): Depend on expmed.h.\n\t* expmed.h: New file.\n\t* expmed.c (default_target_costs): New variable.\n\t(this_target_costs): New conditional variable.\n\t(sdiv_pow2_cheap, smod_pow2_cheap, zero_cost, add_cost, neg_cost)\n\t(shift_cost, shiftadd_cost, shiftsub0_cost, shiftsub1_cost, mul_cost)\n\t(sdiv_cost, udiv_cost, mul_widen_cost, mul_highpart_cost): Delete.\n\t* target-globals.h (this_target_expmed): Declare.\n\t(target_globals): Add a expmed field.\n\t(restore_target_globals): Copy the expmed field to\n\tthis_target_expmed.\n\t* target-globals.c: Include expmed.h.\n\t(default_target_globals): Initialize the expmed field.\n\t(save_target_globals): Likewise.\n\nFrom-SVN: r162094", "tree": {"sha": "bbd31df3f0f8e6de8d0b1dc923fc0b8c2395a5ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bbd31df3f0f8e6de8d0b1dc923fc0b8c2395a5ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/462f85cedc8375e893fd1179f5ecab498085c78d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/462f85cedc8375e893fd1179f5ecab498085c78d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/462f85cedc8375e893fd1179f5ecab498085c78d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/462f85cedc8375e893fd1179f5ecab498085c78d/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d474db84488c71868483429070d545811adbc677", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d474db84488c71868483429070d545811adbc677", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d474db84488c71868483429070d545811adbc677"}], "stats": {"total": 145, "additions": 119, "deletions": 26}, "files": [{"sha": "278ee112059c5af8d2a716bc3f72a13bee47abe4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/462f85cedc8375e893fd1179f5ecab498085c78d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/462f85cedc8375e893fd1179f5ecab498085c78d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=462f85cedc8375e893fd1179f5ecab498085c78d", "patch": "@@ -1,3 +1,20 @@\n+2010-07-12  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* Makefile.in (expmed.o, target-globals.o): Depend on expmed.h.\n+\t* expmed.h: New file.\n+\t* expmed.c (default_target_costs): New variable.\n+\t(this_target_costs): New conditional variable.\n+\t(sdiv_pow2_cheap, smod_pow2_cheap, zero_cost, add_cost, neg_cost)\n+\t(shift_cost, shiftadd_cost, shiftsub0_cost, shiftsub1_cost, mul_cost)\n+\t(sdiv_cost, udiv_cost, mul_widen_cost, mul_highpart_cost): Delete.\n+\t* target-globals.h (this_target_expmed): Declare.\n+\t(target_globals): Add a expmed field.\n+\t(restore_target_globals): Copy the expmed field to\n+\tthis_target_expmed.\n+\t* target-globals.c: Include expmed.h.\n+\t(default_target_globals): Initialize the expmed field.\n+\t(save_target_globals): Likewise.\n+\n 2010-07-12  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* Makefile.in (target-globals.o): Depend on reload.h."}, {"sha": "dd96699fbdbcc2de21655c62ae835395b8f0b6d8", "filename": "gcc/Makefile.in", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/462f85cedc8375e893fd1179f5ecab498085c78d/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/462f85cedc8375e893fd1179f5ecab498085c78d/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=462f85cedc8375e893fd1179f5ecab498085c78d", "patch": "@@ -2915,7 +2915,8 @@ calls.o : calls.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(CGRAPH_H) $(EXCEPT_H) sbitmap.h $(DBGCNT_H) $(TREE_FLOW_H)\n expmed.o : expmed.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(TREE_H) \\\n    $(FLAGS_H) insn-config.h $(EXPR_H) $(OPTABS_H) $(RECOG_H) \\\n-   $(TOPLEV_H) $(DIAGNOSTIC_CORE_H) $(TM_P_H) langhooks.h $(DF_H) $(TARGET_H)\n+   $(TOPLEV_H) $(DIAGNOSTIC_CORE_H) $(TM_P_H) langhooks.h $(DF_H) $(TARGET_H) \\\n+   expmed.h\n explow.o : explow.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(TREE_H) \\\n    $(FLAGS_H) hard-reg-set.h insn-config.h $(EXPR_H) $(OPTABS_H) $(RECOG_H) \\\n    $(TOPLEV_H) $(DIAGNOSTIC_CORE_H) $(EXCEPT_H) $(FUNCTION_H) $(GGC_H) $(TM_P_H) langhooks.h gt-explow.h \\\n@@ -3477,7 +3478,7 @@ lower-subreg.o : lower-subreg.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(EXPR_H) $(EXCEPT_H) $(REGS_H) $(TREE_PASS_H) $(DF_H)\n target-globals.o : target-globals.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(TM_H) insn-config.h $(MACHMODE_H) $(GGC_H) $(TOPLEV_H) target-globals.h \\\n-   $(FLAGS_H) $(REGS_H) $(RTL_H) reload.h\n+   $(FLAGS_H) $(REGS_H) $(RTL_H) reload.h expmed.h\n \n $(out_object_file): $(out_file) $(CONFIG_H) coretypes.h $(TM_H) $(TREE_H) \\\n    $(RTL_H) $(REGS_H) hard-reg-set.h insn-config.h conditions.h \\"}, {"sha": "c10d52ec8c4c6bbf86f38e3ac55bcbdccf420b94", "filename": "gcc/expmed.c", "status": "modified", "additions": 6, "deletions": 23, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/462f85cedc8375e893fd1179f5ecab498085c78d/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/462f85cedc8375e893fd1179f5ecab498085c78d/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=462f85cedc8375e893fd1179f5ecab498085c78d", "patch": "@@ -38,6 +38,12 @@ along with GCC; see the file COPYING3.  If not see\n #include \"langhooks.h\"\n #include \"df.h\"\n #include \"target.h\"\n+#include \"expmed.h\"\n+\n+struct target_expmed default_target_expmed;\n+#if SWITCHABLE_TARGET\n+struct target_expmed *this_target_expmed = &default_target_expmed;\n+#endif\n \n static void store_fixed_bit_field (rtx, unsigned HOST_WIDE_INT,\n \t\t\t\t   unsigned HOST_WIDE_INT,\n@@ -59,14 +65,6 @@ static rtx expand_sdiv_pow2 (enum machine_mode, rtx, HOST_WIDE_INT);\n /* Test whether a value is zero of a power of two.  */\n #define EXACT_POWER_OF_2_OR_ZERO_P(x) (((x) & ((x) - 1)) == 0)\n \n-/* Nonzero means divides or modulus operations are relatively cheap for\n-   powers of two, so don't use branches; emit the operation instead.\n-   Usually, this will mean that the MD file will emit non-branch\n-   sequences.  */\n-\n-static bool sdiv_pow2_cheap[2][NUM_MACHINE_MODES];\n-static bool smod_pow2_cheap[2][NUM_MACHINE_MODES];\n-\n #ifndef SLOW_UNALIGNED_ACCESS\n #define SLOW_UNALIGNED_ACCESS(MODE, ALIGN) STRICT_ALIGNMENT\n #endif\n@@ -96,21 +94,6 @@ static bool smod_pow2_cheap[2][NUM_MACHINE_MODES];\n #define gen_extzv(a,b,c,d) NULL_RTX\n #endif\n \n-/* Cost of various pieces of RTL.  Note that some of these are indexed by\n-   shift count and some by mode.  */\n-static int zero_cost[2];\n-static int add_cost[2][NUM_MACHINE_MODES];\n-static int neg_cost[2][NUM_MACHINE_MODES];\n-static int shift_cost[2][NUM_MACHINE_MODES][MAX_BITS_PER_WORD];\n-static int shiftadd_cost[2][NUM_MACHINE_MODES][MAX_BITS_PER_WORD];\n-static int shiftsub0_cost[2][NUM_MACHINE_MODES][MAX_BITS_PER_WORD];\n-static int shiftsub1_cost[2][NUM_MACHINE_MODES][MAX_BITS_PER_WORD];\n-static int mul_cost[2][NUM_MACHINE_MODES];\n-static int sdiv_cost[2][NUM_MACHINE_MODES];\n-static int udiv_cost[2][NUM_MACHINE_MODES];\n-static int mul_widen_cost[2][NUM_MACHINE_MODES];\n-static int mul_highpart_cost[2][NUM_MACHINE_MODES];\n-\n void\n init_expmed (void)\n {"}, {"sha": "fcf16dca306f7f7da40c57bb607fc1bfb54efc6c", "filename": "gcc/expmed.h", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/462f85cedc8375e893fd1179f5ecab498085c78d/gcc%2Fexpmed.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/462f85cedc8375e893fd1179f5ecab498085c78d/gcc%2Fexpmed.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.h?ref=462f85cedc8375e893fd1179f5ecab498085c78d", "patch": "@@ -0,0 +1,86 @@\n+/* Target-dependent costs for expmed.c.\n+   Copyright (C) 1987, 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n+   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n+   Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option; any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#ifndef EXPMED_H\n+#define EXPMED_H 1\n+\n+/* Target-dependent globals.  */\n+struct target_expmed {\n+  /* Nonzero means divides or modulus operations are relatively cheap for\n+     powers of two, so don't use branches; emit the operation instead.\n+     Usually, this will mean that the MD file will emit non-branch\n+     sequences.  */\n+  bool x_sdiv_pow2_cheap[2][NUM_MACHINE_MODES];\n+  bool x_smod_pow2_cheap[2][NUM_MACHINE_MODES];\n+\n+  /* Cost of various pieces of RTL.  Note that some of these are indexed by\n+     shift count and some by mode.  */\n+  int x_zero_cost[2];\n+  int x_add_cost[2][NUM_MACHINE_MODES];\n+  int x_neg_cost[2][NUM_MACHINE_MODES];\n+  int x_shift_cost[2][NUM_MACHINE_MODES][MAX_BITS_PER_WORD];\n+  int x_shiftadd_cost[2][NUM_MACHINE_MODES][MAX_BITS_PER_WORD];\n+  int x_shiftsub0_cost[2][NUM_MACHINE_MODES][MAX_BITS_PER_WORD];\n+  int x_shiftsub1_cost[2][NUM_MACHINE_MODES][MAX_BITS_PER_WORD];\n+  int x_mul_cost[2][NUM_MACHINE_MODES];\n+  int x_sdiv_cost[2][NUM_MACHINE_MODES];\n+  int x_udiv_cost[2][NUM_MACHINE_MODES];\n+  int x_mul_widen_cost[2][NUM_MACHINE_MODES];\n+  int x_mul_highpart_cost[2][NUM_MACHINE_MODES];\n+};\n+\n+extern struct target_expmed default_target_expmed;\n+#if SWITCHABLE_TARGET\n+extern struct target_expmed *this_target_expmed;\n+#else\n+#define this_target_expmed (&default_target_expmed)\n+#endif\n+\n+#define sdiv_pow2_cheap \\\n+  (this_target_expmed->x_sdiv_pow2_cheap)\n+#define smod_pow2_cheap \\\n+  (this_target_expmed->x_smod_pow2_cheap)\n+#define zero_cost \\\n+  (this_target_expmed->x_zero_cost)\n+#define add_cost \\\n+  (this_target_expmed->x_add_cost)\n+#define neg_cost \\\n+  (this_target_expmed->x_neg_cost)\n+#define shift_cost \\\n+  (this_target_expmed->x_shift_cost)\n+#define shiftadd_cost \\\n+  (this_target_expmed->x_shiftadd_cost)\n+#define shiftsub0_cost \\\n+  (this_target_expmed->x_shiftsub0_cost)\n+#define shiftsub1_cost \\\n+  (this_target_expmed->x_shiftsub1_cost)\n+#define mul_cost \\\n+  (this_target_expmed->x_mul_cost)\n+#define sdiv_cost \\\n+  (this_target_expmed->x_sdiv_cost)\n+#define udiv_cost \\\n+  (this_target_expmed->x_udiv_cost)\n+#define mul_widen_cost \\\n+  (this_target_expmed->x_mul_widen_cost)\n+#define mul_highpart_cost \\\n+  (this_target_expmed->x_mul_highpart_cost)\n+\n+#endif"}, {"sha": "5934ad9f9e98554450c8a1462c86acb46176c441", "filename": "gcc/target-globals.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/462f85cedc8375e893fd1179f5ecab498085c78d/gcc%2Ftarget-globals.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/462f85cedc8375e893fd1179f5ecab498085c78d/gcc%2Ftarget-globals.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-globals.c?ref=462f85cedc8375e893fd1179f5ecab498085c78d", "patch": "@@ -31,14 +31,16 @@ along with GCC; see the file COPYING3.  If not see\n #include \"rtl.h\"\n #include \"hard-reg-set.h\"\n #include \"reload.h\"\n+#include \"expmed.h\"\n \n #if SWITCHABLE_TARGET\n struct target_globals default_target_globals = {\n   &default_target_flag_state,\n   &default_target_regs,\n   &default_target_rtl,\n   &default_target_hard_regs,\n-  &default_target_reload\n+  &default_target_reload,\n+  &default_target_expmed\n };\n \n struct target_globals *\n@@ -52,6 +54,7 @@ save_target_globals (void)\n   g->rtl = ggc_alloc_cleared_target_rtl ();\n   g->hard_regs = XCNEW (struct target_hard_regs);\n   g->reload = XCNEW (struct target_reload);\n+  g->expmed = XCNEW (struct target_expmed);\n   restore_target_globals (g);\n   target_reinit ();\n   return g;"}, {"sha": "45273c41dae8e901c75f4ddcfe8ae421cd256090", "filename": "gcc/target-globals.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/462f85cedc8375e893fd1179f5ecab498085c78d/gcc%2Ftarget-globals.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/462f85cedc8375e893fd1179f5ecab498085c78d/gcc%2Ftarget-globals.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-globals.h?ref=462f85cedc8375e893fd1179f5ecab498085c78d", "patch": "@@ -26,13 +26,15 @@ extern struct target_regs *this_target_regs;\n extern struct target_rtl *this_target_rtl;\n extern struct target_hard_regs *this_target_hard_regs;\n extern struct target_reload *this_target_reload;\n+extern struct target_expmed *this_target_expmed;\n \n struct GTY(()) target_globals {\n   struct target_flag_state *GTY((skip)) flag_state;\n   struct target_regs *GTY((skip)) regs;\n   struct target_rtl *rtl;\n   struct target_hard_regs *GTY((skip)) hard_regs;\n   struct target_reload *GTY((skip)) reload;\n+  struct target_expmed *GTY((skip)) expmed;\n };\n \n extern struct target_globals default_target_globals;\n@@ -47,6 +49,7 @@ restore_target_globals (struct target_globals *g)\n   this_target_rtl = g->rtl;\n   this_target_hard_regs = g->hard_regs;\n   this_target_reload = g->reload;\n+  this_target_expmed = g->expmed;\n }\n #endif\n "}]}