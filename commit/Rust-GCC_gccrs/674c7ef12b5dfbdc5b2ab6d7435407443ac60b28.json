{"sha": "674c7ef12b5dfbdc5b2ab6d7435407443ac60b28", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njc0YzdlZjEyYjVkZmJkYzViMmFiNmQ3NDM1NDA3NDQzYWM2MGIyOA==", "commit": {"author": {"name": "Robert Bowdidge", "email": "bowdidge@apple.com", "date": "2003-10-04T01:45:51Z"}, "committer": {"name": "Robert Bowdidge", "email": "bowdidge@gcc.gnu.org", "date": "2003-10-04T01:45:51Z"}, "message": "ggc-page.c: (ggc_pch_write_object) replace fseek() with fwrite() in PCH generation...\n\n* ggc-page.c: (ggc_pch_write_object) replace fseek() with fwrite()\n  in PCH generation, avoiding\n  too-frequent flushes when writing to NFS file system\n\nFrom-SVN: r72085", "tree": {"sha": "b51bd0681c2d36575f098bbf59cc8982cdcff3c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b51bd0681c2d36575f098bbf59cc8982cdcff3c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/674c7ef12b5dfbdc5b2ab6d7435407443ac60b28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/674c7ef12b5dfbdc5b2ab6d7435407443ac60b28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/674c7ef12b5dfbdc5b2ab6d7435407443ac60b28", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/674c7ef12b5dfbdc5b2ab6d7435407443ac60b28/comments", "author": null, "committer": null, "parents": [{"sha": "2eac35601213dc106bc0b9c0e698c6d71abab2ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2eac35601213dc106bc0b9c0e698c6d71abab2ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2eac35601213dc106bc0b9c0e698c6d71abab2ca"}], "stats": {"total": 35, "additions": 30, "deletions": 5}, "files": [{"sha": "e08571e794184b63403e0fa119db1de60a068892", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/674c7ef12b5dfbdc5b2ab6d7435407443ac60b28/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/674c7ef12b5dfbdc5b2ab6d7435407443ac60b28/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=674c7ef12b5dfbdc5b2ab6d7435407443ac60b28", "patch": "@@ -1,3 +1,8 @@\n+2003-10-03  Robert Bowdidge <bowdidge@apple.com>\n+        * ggc-page.c: (ggc_pch_write_object) replace fseek() with fwrite() in \n+        PCH generation, avoiding too-frequent flushes when writing to NFS \n+        file system.\n+\n 2003-10-03  Ziemowit Laski  <zlaski@apple.com>\n \n \t* objc/objc-act.c (lookup_category): Mark as 'inline'."}, {"sha": "e507de6929c6254e8461b39a05a61ae30936e725", "filename": "gcc/ggc-page.c", "status": "modified", "additions": 25, "deletions": 5, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/674c7ef12b5dfbdc5b2ab6d7435407443ac60b28/gcc%2Fggc-page.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/674c7ef12b5dfbdc5b2ab6d7435407443ac60b28/gcc%2Fggc-page.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-page.c?ref=674c7ef12b5dfbdc5b2ab6d7435407443ac60b28", "patch": "@@ -1969,6 +1969,7 @@ ggc_pch_write_object (struct ggc_pch_data *d ATTRIBUTE_UNUSED,\n \t\t      size_t size)\n {\n   unsigned order;\n+  static const char emptyBytes[256];\n \n   if (size <= 256)\n     order = size_lookup[size];\n@@ -1982,11 +1983,30 @@ ggc_pch_write_object (struct ggc_pch_data *d ATTRIBUTE_UNUSED,\n   if (fwrite (x, size, 1, f) != 1)\n     fatal_error (\"can't write PCH file: %m\");\n \n-  /* In the current implementation, SIZE is always equal to\n-     OBJECT_SIZE (order) and so the fseek is never executed.  */\n-  if (size != OBJECT_SIZE (order)\n-      && fseek (f, OBJECT_SIZE (order) - size, SEEK_CUR) != 0)\n-    fatal_error (\"can't write PCH file: %m\");\n+  /* If SIZE is not the same as OBJECT_SIZE(order), then we need to pad the\n+     object out to OBJECT_SIZE(order).  This happens for strings. */\n+\n+  if (size != OBJECT_SIZE (order))\n+    {\n+      unsigned padding = OBJECT_SIZE(order) - size;\n+\n+      /* To speed small writes, we use a nulled-out array that's larger\n+         than most padding requests as the source for our null bytes.  This\n+         permits us to do the padding with fwrite() rather than fseek(), and\n+         limits the chance the the OS may try to flush any outstanding\n+         writes. */\n+      if (padding <= sizeof(emptyBytes))\n+        {\n+          if (fwrite (emptyBytes, 1, padding, f) != padding)\n+            fatal_error (\"can't write PCH file\");\n+        }\n+      else\n+        {\n+          /* Larger than our buffer?  Just default to fseek. */\n+          if (fseek (f, padding, SEEK_CUR) != 0)\n+            fatal_error (\"can't write PCH file\");\n+        }\n+    }\n \n   d->written[order]++;\n   if (d->written[order] == d->d.totals[order]"}]}