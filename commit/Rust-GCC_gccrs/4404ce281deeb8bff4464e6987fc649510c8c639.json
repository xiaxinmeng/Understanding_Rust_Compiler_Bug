{"sha": "4404ce281deeb8bff4464e6987fc649510c8c639", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDQwNGNlMjgxZGVlYjhiZmY0NDY0ZTY5ODdmYzY0OTUxMGM4YzYzOQ==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@cygnus.co.uk", "date": "1999-10-28T10:36:01Z"}, "committer": {"name": "Bernd Schmidt", "email": "crux@gcc.gnu.org", "date": "1999-10-28T10:36:01Z"}, "message": "Remove prev/next/up pointers in node definitions\n\nFrom-SVN: r30239", "tree": {"sha": "7e704acaba424711147a666fbb1d7e196e1c3bec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e704acaba424711147a666fbb1d7e196e1c3bec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4404ce281deeb8bff4464e6987fc649510c8c639", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4404ce281deeb8bff4464e6987fc649510c8c639", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4404ce281deeb8bff4464e6987fc649510c8c639", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4404ce281deeb8bff4464e6987fc649510c8c639/comments", "author": null, "committer": null, "parents": [{"sha": "e4597bdf0bbfe1181f0e664256304be45bd9cded", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4597bdf0bbfe1181f0e664256304be45bd9cded", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4597bdf0bbfe1181f0e664256304be45bd9cded"}], "stats": {"total": 38, "additions": 21, "deletions": 17}, "files": [{"sha": "c48bcfd3705eedc7fc6b3dd4cfa4f9ba464b93b7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4404ce281deeb8bff4464e6987fc649510c8c639/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4404ce281deeb8bff4464e6987fc649510c8c639/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4404ce281deeb8bff4464e6987fc649510c8c639", "patch": "@@ -1,3 +1,7 @@\n+Thu Oct 28 12:28:48 1999  Bernd Schmidt  <bernds@cygnus.co.uk>\n+\n+\t* rtl.texi: Delete explicit Prev, Up and Next entries in \"@node\"s.\n+\n Thu Oct 28 11:05:13 1999  Richard Earnshaw <rearnsha@arm.com>\n \n \t* arm.md (casesi_insn): Add a clobber of the condition code"}, {"sha": "61cd9fb608328419daabf8aa32ede392800e5e07", "filename": "gcc/rtl.texi", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4404ce281deeb8bff4464e6987fc649510c8c639/gcc%2Frtl.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4404ce281deeb8bff4464e6987fc649510c8c639/gcc%2Frtl.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.texi?ref=4404ce281deeb8bff4464e6987fc649510c8c639", "patch": "@@ -40,7 +40,7 @@ form uses nested parentheses to indicate the pointers in the internal form.\n * Reading RTL::       Reading textual RTL from a file.\n @end menu\n \n-@node RTL Objects, RTL Classes, RTL, RTL\n+@node RTL Objects\n @section RTL Object Types\n @cindex RTL object types\n \n@@ -109,7 +109,7 @@ manual, they are shown as follows: @code{const_int}.\n In a few contexts a null pointer is valid where an expression is normally\n wanted.  The written form of this is @code{(nil)}.\n \n-@node RTL Classes, Accessors, RTL Objects, RTL\n+@node RTL Classes\n @section RTL Classes and Formats\n @cindex RTL classes\n @cindex classes of RTX codes\n@@ -252,7 +252,7 @@ are of class @code{i}.\n You can make no assumptions about the format of these codes.\n @end table\n \n-@node Accessors, Flags, RTL Classes, RTL\n+@node Accessors\n @section Access to Operands\n @cindex accessors\n @cindex access to operands\n@@ -328,7 +328,7 @@ All the macros defined in this section expand into lvalues and therefore\n can be used to assign the operands, lengths and vector elements as well as\n to access them.\n \n-@node Flags, Machine Modes, Accessors, RTL\n+@node Flags\n @section Flags in an RTL Expression\n @cindex flags in RTL expression\n \n@@ -638,7 +638,7 @@ may be used for parameters as well, but this flag is not set on such\n uses.\n @end table\n \n-@node Machine Modes, Constants, Flags, RTL\n+@node Machine Modes\n @section Machine Modes\n @cindex machine modes\n \n@@ -893,7 +893,7 @@ whose classes are @code{MODE_INT} and whose bitsizes are either\n @code{BITS_PER_UNIT} or @code{BITS_PER_WORD}, respectively.  On 32-bit\n machines, these are @code{QImode} and @code{SImode}, respectively.\n \n-@node Constants, Regs and Memory, Machine Modes, RTL\n+@node Constants\n @section Constant Expression Types\n @cindex RTL constants\n @cindex RTL constant expression types\n@@ -1020,7 +1020,7 @@ reference a global memory location.\n @var{m} should be @code{Pmode}.\n @end table\n \n-@node Regs and Memory, Arithmetic, Constants, RTL\n+@node Regs and Memory\n @section Registers and Memory\n @cindex RTL register expressions\n @cindex RTL memory expressions\n@@ -1307,7 +1307,7 @@ stack and the @code{addressof} expression is replaced with a @code{plus}\n expression for the address of its stack slot.\n @end table\n \n-@node Arithmetic, Comparisons, Regs and Memory, RTL\n+@node Arithmetic\n @section RTL Expressions for Arithmetic\n @cindex arithmetic, in RTL\n @cindex math, in RTL\n@@ -1535,7 +1535,7 @@ depending on the target machine, various mode combinations may be\n valid.\n @end table\n \n-@node Comparisons, Bit Fields, Arithmetic, RTL\n+@node Comparisons\n @section Comparison Operations\n @cindex RTL comparison operations\n \n@@ -1655,7 +1655,7 @@ This is currently not valid for instruction patterns and is supported only\n for insn attributes.  @xref{Insn Attributes}.\n @end table\n \n-@node Bit Fields, Conversions, Comparisons, RTL\n+@node Bit Fields\n @section Bit Fields\n @cindex bit fields\n \n@@ -1693,7 +1693,7 @@ bit field.  The same sequence of bits are extracted, but they\n are filled to an entire word with zeros instead of by sign-extension.\n @end table\n \n-@node Conversions, RTL Declarations, Bit Fields, RTL\n+@node Conversions\n @section Conversions\n @cindex conversions\n @cindex machine mode conversions\n@@ -1782,7 +1782,7 @@ integer, still represented in floating point mode @var{m}, by rounding\n towards zero.\n @end table\n \n-@node RTL Declarations, Side Effects, Conversions, RTL\n+@node RTL Declarations\n @section Declarations\n @cindex RTL declarations\n @cindex declarations, RTL\n@@ -1805,7 +1805,7 @@ a subreg is allowed to have undefined effects on the rest of the\n register when @var{m} is less than a word.\n @end table\n \n-@node Side Effects, Incdec, RTL Declarations, RTL\n+@node Side Effects\n @section Side Effect Expressions\n @cindex RTL side effect expressions\n \n@@ -2095,7 +2095,7 @@ position of @var{base}, @var{min} and @var{max} to the cointaining insn\n and of @var{min} and @var{max} to @var{base}.  See rtl.def for details.@refill\n @end table\n \n-@node Incdec, Assembler, Side Effects, RTL\n+@node Incdec\n @section Embedded Side-Effects on Addresses\n @cindex RTL preincrement\n @cindex RTL postincrement\n@@ -2193,7 +2193,7 @@ allow them wherever a memory address is called for.  Describing them as\n additional parallel stores would require doubling the number of entries\n in the machine description.\n \n-@node Assembler, Insns, Incdec, RTL\n+@node Assembler\n @section Assembler Instructions as Expressions\n @cindex assembler instructions in RTL\n \n@@ -2234,7 +2234,7 @@ template and vectors, but each contains the constraint for the respective\n output operand.  They are also distinguished by the output-operand index\n number, which is 0, 1, @dots{} for successive output operands.\n \n-@node Insns, Calls, Assembler, RTL\n+@node Insns\n @section Insns\n @cindex insns\n \n@@ -2812,7 +2812,7 @@ assumed to be an insn and is printed in debugging dumps as the insn's\n unique id; the first operand of an @code{expr_list} is printed in the\n ordinary way as an expression.\n \n-@node Calls, Sharing, Insns, RTL\n+@node Calls\n @section RTL Representation of Function-Call Insns\n @cindex calling functions in RTL\n @cindex RTL function-call insns"}]}