{"sha": "912a7ec3b1f424ee8c6dce7965bd2f98df174dea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTEyYTdlYzNiMWY0MjRlZThjNmRjZTc5NjViZDJmOThkZjE3NGRlYQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-10-12T19:10:34Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-10-12T19:10:34Z"}, "message": "re PR target/82498 (Missed optimization for x86 rotate instruction)\n\n\tPR target/82498\n\t* config/i386/i386.md (*ashl<mode>3_mask_1,\n\t*<shift_insn><mode>3_mask_1, *<rotate_insn><mode>3_mask_1,\n\t*<btsc><mode>_mask_1, *btr<mode>_mask_1): New define_insn_and_split\n\tpatterns.\n\n\t* gcc.target/i386/pr82498-1.c: New test.\n\t* gcc.target/i386/pr82498-2.c: New test.\n\nFrom-SVN: r253695", "tree": {"sha": "8ce05f2a6a420f4c899eda179a769703b2321d36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ce05f2a6a420f4c899eda179a769703b2321d36"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/912a7ec3b1f424ee8c6dce7965bd2f98df174dea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/912a7ec3b1f424ee8c6dce7965bd2f98df174dea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/912a7ec3b1f424ee8c6dce7965bd2f98df174dea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/912a7ec3b1f424ee8c6dce7965bd2f98df174dea/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1baafc8d197217a11085f48a93ccd23dc59d2edb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1baafc8d197217a11085f48a93ccd23dc59d2edb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1baafc8d197217a11085f48a93ccd23dc59d2edb"}], "stats": {"total": 220, "additions": 220, "deletions": 0}, "files": [{"sha": "a9dbfce45c34a3869730a04c5393d17e38feeebd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/912a7ec3b1f424ee8c6dce7965bd2f98df174dea/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/912a7ec3b1f424ee8c6dce7965bd2f98df174dea/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=912a7ec3b1f424ee8c6dce7965bd2f98df174dea", "patch": "@@ -1,3 +1,11 @@\n+2017-10-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/82498\n+\t* config/i386/i386.md (*ashl<mode>3_mask_1,\n+\t*<shift_insn><mode>3_mask_1, *<rotate_insn><mode>3_mask_1,\n+\t*<btsc><mode>_mask_1, *btr<mode>_mask_1): New define_insn_and_split\n+\tpatterns.\n+\n 2017-10-12  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* profile-count.h (safe_scale_64bit): Fix GCC4.x path."}, {"sha": "2fa982c3b65564174a2caeae262c1d3e7c2e17ac", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/912a7ec3b1f424ee8c6dce7965bd2f98df174dea/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/912a7ec3b1f424ee8c6dce7965bd2f98df174dea/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=912a7ec3b1f424ee8c6dce7965bd2f98df174dea", "patch": "@@ -10228,6 +10228,26 @@\n       (clobber (reg:CC FLAGS_REG))])]\n   \"operands[2] = gen_lowpart (QImode, operands[2]);\")\n \n+(define_insn_and_split \"*ashl<mode>3_mask_1\"\n+  [(set (match_operand:SWI48 0 \"nonimmediate_operand\")\n+\t(ashift:SWI48\n+\t  (match_operand:SWI48 1 \"nonimmediate_operand\")\n+\t  (and:QI\n+\t    (match_operand:QI 2 \"register_operand\")\n+\t    (match_operand:QI 3 \"const_int_operand\"))))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"ix86_binary_operator_ok (ASHIFT, <MODE>mode, operands)\n+   && (INTVAL (operands[3]) & (GET_MODE_BITSIZE (<MODE>mode)-1))\n+      == GET_MODE_BITSIZE (<MODE>mode)-1\n+   && can_create_pseudo_p ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(parallel\n+     [(set (match_dup 0)\n+\t   (ashift:SWI48 (match_dup 1)\n+\t\t\t (match_dup 2)))\n+      (clobber (reg:CC FLAGS_REG))])])\n+\n (define_insn \"*bmi2_ashl<mode>3_1\"\n   [(set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n \t(ashift:SWI48 (match_operand:SWI48 1 \"nonimmediate_operand\" \"rm\")\n@@ -10728,6 +10748,26 @@\n       (clobber (reg:CC FLAGS_REG))])]\n   \"operands[2] = gen_lowpart (QImode, operands[2]);\")\n \n+(define_insn_and_split \"*<shift_insn><mode>3_mask_1\"\n+  [(set (match_operand:SWI48 0 \"nonimmediate_operand\")\n+\t(any_shiftrt:SWI48\n+\t  (match_operand:SWI48 1 \"nonimmediate_operand\")\n+\t  (and:QI\n+\t    (match_operand:QI 2 \"register_operand\")\n+\t    (match_operand:QI 3 \"const_int_operand\"))))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\n+   && (INTVAL (operands[3]) & (GET_MODE_BITSIZE (<MODE>mode)-1))\n+      == GET_MODE_BITSIZE (<MODE>mode)-1\n+   && can_create_pseudo_p ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(parallel\n+     [(set (match_dup 0)\n+\t   (any_shiftrt:SWI48 (match_dup 1)\n+\t\t\t      (match_dup 2)))\n+      (clobber (reg:CC FLAGS_REG))])])\n+\n (define_insn_and_split \"*<shift_insn><mode>3_doubleword\"\n   [(set (match_operand:DWI 0 \"register_operand\" \"=&r\")\n \t(any_shiftrt:DWI (match_operand:DWI 1 \"register_operand\" \"0\")\n@@ -11187,6 +11227,26 @@\n       (clobber (reg:CC FLAGS_REG))])]\n   \"operands[2] = gen_lowpart (QImode, operands[2]);\")\n \n+(define_insn_and_split \"*<rotate_insn><mode>3_mask_1\"\n+  [(set (match_operand:SWI48 0 \"nonimmediate_operand\")\n+\t(any_rotate:SWI48\n+\t  (match_operand:SWI48 1 \"nonimmediate_operand\")\n+\t  (and:QI\n+\t    (match_operand:QI 2 \"register_operand\")\n+\t    (match_operand:QI 3 \"const_int_operand\"))))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\n+   && (INTVAL (operands[3]) & (GET_MODE_BITSIZE (<MODE>mode)-1))\n+      == GET_MODE_BITSIZE (<MODE>mode)-1\n+   && can_create_pseudo_p ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(parallel\n+     [(set (match_dup 0)\n+\t   (any_rotate:SWI48 (match_dup 1)\n+\t\t\t     (match_dup 2)))\n+      (clobber (reg:CC FLAGS_REG))])])\n+\n ;; Implement rotation using two double-precision\n ;; shift instructions and a scratch register.\n \n@@ -11494,6 +11554,30 @@\n       (clobber (reg:CC FLAGS_REG))])]\n   \"operands[1] = gen_lowpart (QImode, operands[1]);\")\n \n+(define_insn_and_split \"*<btsc><mode>_mask_1\"\n+  [(set (match_operand:SWI48 0 \"register_operand\")\n+\t(any_or:SWI48\n+\t  (ashift:SWI48\n+\t    (const_int 1)\n+\t    (and:QI\n+\t      (match_operand:QI 1 \"register_operand\")\n+\t      (match_operand:QI 2 \"const_int_operand\")))\n+\t  (match_operand:SWI48 3 \"register_operand\")))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"TARGET_USE_BT\n+   && (INTVAL (operands[2]) & (GET_MODE_BITSIZE (<MODE>mode)-1))\n+      == GET_MODE_BITSIZE (<MODE>mode)-1\n+   && can_create_pseudo_p ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(parallel\n+     [(set (match_dup 0)\n+\t   (any_or:SWI48\n+\t     (ashift:SWI48 (const_int 1)\n+\t\t\t   (match_dup 1))\n+\t     (match_dup 3)))\n+      (clobber (reg:CC FLAGS_REG))])])\n+\n (define_insn \"*btr<mode>\"\n   [(set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n \t(and:SWI48\n@@ -11535,6 +11619,30 @@\n       (clobber (reg:CC FLAGS_REG))])]\n   \"operands[1] = gen_lowpart (QImode, operands[1]);\")\n \n+(define_insn_and_split \"*btr<mode>_mask_1\"\n+  [(set (match_operand:SWI48 0 \"register_operand\")\n+\t(and:SWI48\n+\t  (rotate:SWI48\n+\t    (const_int -2)\n+\t    (and:QI\n+\t      (match_operand:QI 1 \"register_operand\")\n+\t      (match_operand:QI 2 \"const_int_operand\")))\n+\t  (match_operand:SWI48 3 \"register_operand\")))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"TARGET_USE_BT\n+   && (INTVAL (operands[2]) & (GET_MODE_BITSIZE (<MODE>mode)-1))\n+      == GET_MODE_BITSIZE (<MODE>mode)-1\n+   && can_create_pseudo_p ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(parallel\n+     [(set (match_dup 0)\n+\t   (and:SWI48\n+\t     (rotate:SWI48 (const_int -2)\n+\t\t\t   (match_dup 1))\n+\t     (match_dup 3)))\n+      (clobber (reg:CC FLAGS_REG))])])\n+\n ;; These instructions are never faster than the corresponding\n ;; and/ior/xor operations when using immediate operand, so with\n ;; 32-bit there's no point.  But in 64-bit, we can't hold the"}, {"sha": "9e77fa669e50a60f24bfd7f0ab0afa62bfd40827", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/912a7ec3b1f424ee8c6dce7965bd2f98df174dea/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/912a7ec3b1f424ee8c6dce7965bd2f98df174dea/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=912a7ec3b1f424ee8c6dce7965bd2f98df174dea", "patch": "@@ -1,3 +1,9 @@\n+2017-10-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/82498\n+\t* gcc.target/i386/pr82498-1.c: New test.\n+\t* gcc.target/i386/pr82498-2.c: New test.\n+\n 2017-10-12  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* gcc.dg/predict-13.c: Update template for probaility change."}, {"sha": "78a6698f607e1cec747d2a80ffa5a41126b3c3f7", "filename": "gcc/testsuite/gcc.target/i386/pr82498-1.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/912a7ec3b1f424ee8c6dce7965bd2f98df174dea/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr82498-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/912a7ec3b1f424ee8c6dce7965bd2f98df174dea/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr82498-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr82498-1.c?ref=912a7ec3b1f424ee8c6dce7965bd2f98df174dea", "patch": "@@ -0,0 +1,52 @@\n+/* PR target/82498 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mtune=generic -masm=att\" } */\n+/* { dg-final { scan-assembler-not {\\mand[bwlq]\\M} } } */\n+\n+unsigned\n+f1 (unsigned x, unsigned char y)\n+{\n+  if (y == 0)\n+    return x;\n+  y &= __CHAR_BIT__ * __SIZEOF_INT__ - 1;\n+  return (x << y) | (x >> (__CHAR_BIT__ * __SIZEOF_INT__ - y));\n+}\n+\n+unsigned\n+f2 (unsigned x, unsigned y)\n+{\n+  if (y == 0)\n+    return x;\n+  y &= __CHAR_BIT__ * __SIZEOF_INT__ - 1;\n+  return (x << y) | (x >> (__CHAR_BIT__ * __SIZEOF_INT__ - y));\n+}\n+\n+unsigned\n+f3 (unsigned x, unsigned short y)\n+{\n+  if (y == 0)\n+    return x;\n+  y &= __CHAR_BIT__ * __SIZEOF_INT__ - 1;\n+  return (x << y) | (x >> (__CHAR_BIT__ * __SIZEOF_INT__ - y));\n+}\n+\n+unsigned\n+f4 (unsigned x, unsigned char y)\n+{\n+  y &= __CHAR_BIT__ * __SIZEOF_INT__ - 1;\n+  return (x << y) | (x >> (-y & (__CHAR_BIT__ * __SIZEOF_INT__ - 1)));\n+}\n+\n+unsigned\n+f5 (unsigned x, unsigned int y)\n+{\n+  y &= __CHAR_BIT__ * __SIZEOF_INT__ - 1;\n+  return (x << y) | (x >> (-y & (__CHAR_BIT__ * __SIZEOF_INT__ - 1)));\n+}\n+\n+unsigned\n+f6 (unsigned x, unsigned short y)\n+{\n+  y &= __CHAR_BIT__ * __SIZEOF_INT__ - 1;\n+  return (x << y) | (x >> (-y & (__CHAR_BIT__ * __SIZEOF_INT__ - 1)));\n+}"}, {"sha": "9e065ee7e50b7abb046a363bb28b1c3eb82e4d83", "filename": "gcc/testsuite/gcc.target/i386/pr82498-2.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/912a7ec3b1f424ee8c6dce7965bd2f98df174dea/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr82498-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/912a7ec3b1f424ee8c6dce7965bd2f98df174dea/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr82498-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr82498-2.c?ref=912a7ec3b1f424ee8c6dce7965bd2f98df174dea", "patch": "@@ -0,0 +1,46 @@\n+/* PR target/82498 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mtune=generic -masm=att\" } */\n+/* { dg-final { scan-assembler-not {\\mand[bwlq]\\M} } } */\n+\n+int\n+f1 (int x, unsigned char y)\n+{\n+  y &= __CHAR_BIT__ * __SIZEOF_INT__ - 1;\n+  return x >> y;\n+}\n+\n+unsigned\n+f2 (unsigned x, unsigned char y)\n+{\n+  y &= __CHAR_BIT__ * __SIZEOF_INT__ - 1;\n+  return x >> y;\n+}\n+\n+unsigned\n+f3 (unsigned x, unsigned char y)\n+{\n+  y &= __CHAR_BIT__ * __SIZEOF_INT__ - 1;\n+  return x << y;\n+}\n+\n+unsigned\n+f4 (unsigned x, unsigned char y)\n+{\n+  y &= __CHAR_BIT__ * __SIZEOF_INT__ - 1;\n+  return x | (1U << y);\n+}\n+\n+unsigned\n+f5 (unsigned x, unsigned char y)\n+{\n+  y &= __CHAR_BIT__ * __SIZEOF_INT__ - 1;\n+  return x ^ (1U << y);\n+}\n+\n+unsigned\n+f6 (unsigned x, unsigned char y)\n+{\n+  y &= __CHAR_BIT__ * __SIZEOF_INT__ - 1;\n+  return (x + 2) & ~(1U << y);\n+}"}]}