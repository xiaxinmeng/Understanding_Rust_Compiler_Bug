{"sha": "ad96c867e173c1ebcfc201b201adac5095683a08", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQ5NmM4NjdlMTczYzFlYmNmYzIwMWIyMDFhZGFjNTA5NTY4M2EwOA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-05-06T08:15:40Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-05-06T08:15:40Z"}, "message": "phiopt: Optimize (x <=> y) cmp z [PR94589]\n\ngenericize_spaceship genericizes i <=> j to approximately\n({ int c; if (i == j) c = 0; else if (i < j) c = -1; else c = 1; c; })\nfor strong ordering and\n({ int c; if (i == j) c = 0; else if (i < j) c = -1; else if (i > j) c = 1; else c = 2; c; })\nfor partial ordering.\nThe C++ standard supports then == or != comparisons of that against\nstrong/partial ordering enums, or </<=/==/!=/>/>= comparisons of <=> result\nagainst literal 0.\n\nIn some cases we already optimize that but in many cases we keep performing\nall the 2 or 3 comparisons, compute the spaceship value and then compare\nthat.\n\nThe following patch recognizes those patterns if the <=> operands are\nintegral types or floating point (the latter only for -ffast-math) and\noptimizes it to the single comparison that is needed (plus adds debug stmts\nif needed for the spaceship result).\n\nThere is one thing I'd like to address in a follow-up: the pr94589-2.C\ntestcase should be matching just 12 times each, but runs\ninto operator>=(partial_ordering, unspecified) being defined as\n(_M_value&1)==_M_value\nrather than _M_value>=0.  When not honoring NaNs, the 2 case should be\nunreachable and so (_M_value&1)==_M_value is then equivalent to _M_value>=0,\nbut is not a single use but two uses.  I'll need to pattern match that case\nspecially.\n\n2021-05-06  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/94589\n\t* tree-ssa-phiopt.c (tree_ssa_phiopt_worker): Call\n\tspaceship_replacement.\n\t(cond_only_block_p, spaceship_replacement): New functions.\n\n\t* gcc.dg/pr94589-1.c: New test.\n\t* gcc.dg/pr94589-2.c: New test.\n\t* gcc.dg/pr94589-3.c: New test.\n\t* gcc.dg/pr94589-4.c: New test.\n\t* g++.dg/opt/pr94589-1.C: New test.\n\t* g++.dg/opt/pr94589-2.C: New test.\n\t* g++.dg/opt/pr94589-3.C: New test.\n\t* g++.dg/opt/pr94589-4.C: New test.", "tree": {"sha": "fe35de813a3a9971a177a4b249e32d41759dc584", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fe35de813a3a9971a177a4b249e32d41759dc584"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad96c867e173c1ebcfc201b201adac5095683a08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad96c867e173c1ebcfc201b201adac5095683a08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad96c867e173c1ebcfc201b201adac5095683a08", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad96c867e173c1ebcfc201b201adac5095683a08/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5254d6b75fe6be669396cd1261f1cba829cc451", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5254d6b75fe6be669396cd1261f1cba829cc451", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5254d6b75fe6be669396cd1261f1cba829cc451"}], "stats": {"total": 922, "additions": 922, "deletions": 0}, "files": [{"sha": "d1cc5050c2546b80a977f566856d2574d898bd6a", "filename": "gcc/testsuite/g++.dg/opt/pr94589-1.C", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad96c867e173c1ebcfc201b201adac5095683a08/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr94589-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad96c867e173c1ebcfc201b201adac5095683a08/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr94589-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr94589-1.C?ref=ad96c867e173c1ebcfc201b201adac5095683a08", "patch": "@@ -0,0 +1,33 @@\n+// PR tree-optimization/94589\n+// { dg-do compile { target c++20 } }\n+// { dg-options \"-O2 -g0 -fdump-tree-optimized\" }\n+// { dg-final { scan-tree-dump-times \"\\[ij]_\\[0-9]+\\\\(D\\\\) (?:<|<=|==|!=|>|>=) \\[ij]_\\[0-9]+\\\\(D\\\\)\" 12 \"optimized\" } }\n+// { dg-final { scan-tree-dump-times \"i_\\[0-9]+\\\\(D\\\\) (?:<|<=|==|!=|>|>=) \\[45]\" 12 \"optimized\" } }\n+\n+#include <compare>\n+\n+#define A __attribute__((noipa))\n+A bool f1 (int i, int j) { auto c = i <=> j; return c == 0; }\n+A bool f2 (int i, int j) { auto c = i <=> j; return c != 0; }\n+A bool f3 (int i, int j) { auto c = i <=> j; return c > 0; }\n+A bool f4 (int i, int j) { auto c = i <=> j; return c < 0; }\n+A bool f5 (int i, int j) { auto c = i <=> j; return c >= 0; }\n+A bool f6 (int i, int j) { auto c = i <=> j; return c <= 0; }\n+A bool f7 (int i, int j) { auto c = i <=> j; return c == std::strong_ordering::less; }\n+A bool f8 (int i, int j) { auto c = i <=> j; return c != std::strong_ordering::less; }\n+A bool f9 (int i, int j) { auto c = i <=> j; return c == std::strong_ordering::equal; }\n+A bool f10 (int i, int j) { auto c = i <=> j; return c != std::strong_ordering::equal; }\n+A bool f11 (int i, int j) { auto c = i <=> j; return c == std::strong_ordering::greater; }\n+A bool f12 (int i, int j) { auto c = i <=> j; return c != std::strong_ordering::greater; }\n+A bool f13 (int i) { auto c = i <=> 5; return c == 0; }\n+A bool f14 (int i) { auto c = i <=> 5; return c != 0; }\n+A bool f15 (int i) { auto c = i <=> 5; return c > 0; }\n+A bool f16 (int i) { auto c = i <=> 5; return c < 0; }\n+A bool f17 (int i) { auto c = i <=> 5; return c >= 0; }\n+A bool f18 (int i) { auto c = i <=> 5; return c <= 0; }\n+A bool f19 (int i) { auto c = i <=> 5; return c == std::strong_ordering::less; }\n+A bool f20 (int i) { auto c = i <=> 5; return c != std::strong_ordering::less; }\n+A bool f21 (int i) { auto c = i <=> 5; return c == std::strong_ordering::equal; }\n+A bool f22 (int i) { auto c = i <=> 5; return c != std::strong_ordering::equal; }\n+A bool f23 (int i) { auto c = i <=> 5; return c == std::strong_ordering::greater; }\n+A bool f24 (int i) { auto c = i <=> 5; return c != std::strong_ordering::greater; }"}, {"sha": "dda947e22b11db744f8a6ecde275b45006c2d985", "filename": "gcc/testsuite/g++.dg/opt/pr94589-2.C", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad96c867e173c1ebcfc201b201adac5095683a08/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr94589-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad96c867e173c1ebcfc201b201adac5095683a08/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr94589-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr94589-2.C?ref=ad96c867e173c1ebcfc201b201adac5095683a08", "patch": "@@ -0,0 +1,33 @@\n+// PR tree-optimization/94589\n+// { dg-do compile { target c++20 } }\n+// { dg-options \"-O2 -g0 -ffast-math -fdump-tree-optimized\" }\n+// { dg-final { scan-tree-dump-times \"\\[ij]_\\[0-9]+\\\\(D\\\\) (?:<|<=|==|!=|>|>=) \\[ij]_\\[0-9]+\\\\(D\\\\)\" 14 \"optimized\" } }\n+// { dg-final { scan-tree-dump-times \"i_\\[0-9]+\\\\(D\\\\) (?:<|<=|==|!=|>|>=) 5\\\\.0\" 14 \"optimized\" } }\n+\n+#include <compare>\n+\n+#define A __attribute__((noipa))\n+A bool f1 (double i, double j) { auto c = i <=> j; return c == 0; }\n+A bool f2 (double i, double j) { auto c = i <=> j; return c != 0; }\n+A bool f3 (double i, double j) { auto c = i <=> j; return c > 0; }\n+A bool f4 (double i, double j) { auto c = i <=> j; return c < 0; }\n+A bool f5 (double i, double j) { auto c = i <=> j; return c >= 0; }\n+A bool f6 (double i, double j) { auto c = i <=> j; return c <= 0; }\n+A bool f7 (double i, double j) { auto c = i <=> j; return c == std::partial_ordering::less; }\n+A bool f8 (double i, double j) { auto c = i <=> j; return c != std::partial_ordering::less; }\n+A bool f9 (double i, double j) { auto c = i <=> j; return c == std::partial_ordering::equivalent; }\n+A bool f10 (double i, double j) { auto c = i <=> j; return c != std::partial_ordering::equivalent; }\n+A bool f11 (double i, double j) { auto c = i <=> j; return c == std::partial_ordering::greater; }\n+A bool f12 (double i, double j) { auto c = i <=> j; return c != std::partial_ordering::greater; }\n+A bool f13 (double i) { auto c = i <=> 5.0; return c == 0; }\n+A bool f14 (double i) { auto c = i <=> 5.0; return c != 0; }\n+A bool f15 (double i) { auto c = i <=> 5.0; return c > 0; }\n+A bool f16 (double i) { auto c = i <=> 5.0; return c < 0; }\n+A bool f17 (double i) { auto c = i <=> 5.0; return c >= 0; }\n+A bool f18 (double i) { auto c = i <=> 5.0; return c <= 0; }\n+A bool f19 (double i) { auto c = i <=> 5.0; return c == std::partial_ordering::less; }\n+A bool f20 (double i) { auto c = i <=> 5.0; return c != std::partial_ordering::less; }\n+A bool f21 (double i) { auto c = i <=> 5.0; return c == std::partial_ordering::equivalent; }\n+A bool f22 (double i) { auto c = i <=> 5.0; return c != std::partial_ordering::equivalent; }\n+A bool f23 (double i) { auto c = i <=> 5.0; return c == std::partial_ordering::greater; }\n+A bool f24 (double i) { auto c = i <=> 5.0; return c != std::partial_ordering::greater; }"}, {"sha": "725b81f56b97cedfd7f67e150a8c700c3c7b216a", "filename": "gcc/testsuite/g++.dg/opt/pr94589-3.C", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad96c867e173c1ebcfc201b201adac5095683a08/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr94589-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad96c867e173c1ebcfc201b201adac5095683a08/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr94589-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr94589-3.C?ref=ad96c867e173c1ebcfc201b201adac5095683a08", "patch": "@@ -0,0 +1,84 @@\n+// { dg-do run { target c++20 } }\n+// { dg-options \"-O2 -g\" }\n+\n+#include \"pr94589-1.C\"\n+\n+#define C(fn, i, j, r) if (fn (i, j) != r) __builtin_abort ()\n+#define D(fn, i, r) if (fn (i) != r) __builtin_abort ()\n+\n+int\n+main ()\n+{\n+  C (f1, 7, 8, false);\n+  C (f1, 8, 8, true);\n+  C (f1, 9, 8, false);\n+  C (f2, 7, 8, true);\n+  C (f2, 8, 8, false);\n+  C (f2, 9, 8, true);\n+  C (f3, 7, 8, false);\n+  C (f3, 8, 8, false);\n+  C (f3, 9, 8, true);\n+  C (f4, 7, 8, true);\n+  C (f4, 8, 8, false);\n+  C (f4, 9, 8, false);\n+  C (f5, 7, 8, false);\n+  C (f5, 8, 8, true);\n+  C (f5, 9, 8, true);\n+  C (f6, 7, 8, true);\n+  C (f6, 8, 8, true);\n+  C (f6, 9, 8, false);\n+  C (f7, 7, 8, true);\n+  C (f7, 8, 8, false);\n+  C (f7, 9, 8, false);\n+  C (f8, 7, 8, false);\n+  C (f8, 8, 8, true);\n+  C (f8, 9, 8, true);\n+  C (f9, 7, 8, false);\n+  C (f9, 8, 8, true);\n+  C (f9, 9, 8, false);\n+  C (f10, 7, 8, true);\n+  C (f10, 8, 8, false);\n+  C (f10, 9, 8, true);\n+  C (f11, 7, 8, false);\n+  C (f11, 8, 8, false);\n+  C (f11, 9, 8, true);\n+  C (f12, 7, 8, true);\n+  C (f12, 8, 8, true);\n+  C (f12, 9, 8, false);\n+  D (f13, 4, false);\n+  D (f13, 5, true);\n+  D (f13, 6, false);\n+  D (f14, 4, true);\n+  D (f14, 5, false);\n+  D (f14, 6, true);\n+  D (f15, 4, false);\n+  D (f15, 5, false);\n+  D (f15, 6, true);\n+  D (f16, 4, true);\n+  D (f16, 5, false);\n+  D (f16, 6, false);\n+  D (f17, 4, false);\n+  D (f17, 5, true);\n+  D (f17, 6, true);\n+  D (f18, 4, true);\n+  D (f18, 5, true);\n+  D (f18, 6, false);\n+  D (f19, 4, true);\n+  D (f19, 5, false);\n+  D (f19, 6, false);\n+  D (f20, 4, false);\n+  D (f20, 5, true);\n+  D (f20, 6, true);\n+  D (f21, 4, false);\n+  D (f21, 5, true);\n+  D (f21, 6, false);\n+  D (f22, 4, true);\n+  D (f22, 5, false);\n+  D (f22, 6, true);\n+  D (f23, 4, false);\n+  D (f23, 5, false);\n+  D (f23, 6, true);\n+  D (f24, 4, true);\n+  D (f24, 5, true);\n+  D (f24, 6, false);\n+}"}, {"sha": "256a455804ea8d218039a85572eea28e3c67d715", "filename": "gcc/testsuite/g++.dg/opt/pr94589-4.C", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad96c867e173c1ebcfc201b201adac5095683a08/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr94589-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad96c867e173c1ebcfc201b201adac5095683a08/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr94589-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr94589-4.C?ref=ad96c867e173c1ebcfc201b201adac5095683a08", "patch": "@@ -0,0 +1,84 @@\n+// { dg-do run { target c++20 } }\n+// { dg-options \"-O2 -g -ffast-math\" }\n+\n+#include \"pr94589-2.C\"\n+\n+#define C(fn, i, j, r) if (fn (i, j) != r) __builtin_abort ()\n+#define D(fn, i, r) if (fn (i) != r) __builtin_abort ()\n+\n+int\n+main ()\n+{\n+  C (f1, 7.0, 8.0, false);\n+  C (f1, 8.0, 8.0, true);\n+  C (f1, 9.0, 8.0, false);\n+  C (f2, 7.0, 8.0, true);\n+  C (f2, 8.0, 8.0, false);\n+  C (f2, 9.0, 8.0, true);\n+  C (f3, 7.0, 8.0, false);\n+  C (f3, 8.0, 8.0, false);\n+  C (f3, 9.0, 8.0, true);\n+  C (f4, 7.0, 8.0, true);\n+  C (f4, 8.0, 8.0, false);\n+  C (f4, 9.0, 8.0, false);\n+  C (f5, 7.0, 8.0, false);\n+  C (f5, 8.0, 8.0, true);\n+  C (f5, 9.0, 8.0, true);\n+  C (f6, 7.0, 8.0, true);\n+  C (f6, 8.0, 8.0, true);\n+  C (f6, 9.0, 8.0, false);\n+  C (f7, 7.0, 8.0, true);\n+  C (f7, 8.0, 8.0, false);\n+  C (f7, 9.0, 8.0, false);\n+  C (f8, 7.0, 8.0, false);\n+  C (f8, 8.0, 8.0, true);\n+  C (f8, 9.0, 8.0, true);\n+  C (f9, 7.0, 8.0, false);\n+  C (f9, 8.0, 8.0, true);\n+  C (f9, 9.0, 8.0, false);\n+  C (f10, 7.0, 8.0, true);\n+  C (f10, 8.0, 8.0, false);\n+  C (f10, 9.0, 8.0, true);\n+  C (f11, 7.0, 8.0, false);\n+  C (f11, 8.0, 8.0, false);\n+  C (f11, 9.0, 8.0, true);\n+  C (f12, 7.0, 8.0, true);\n+  C (f12, 8.0, 8.0, true);\n+  C (f12, 9.0, 8.0, false);\n+  D (f13, 4.0, false);\n+  D (f13, 5.0, true);\n+  D (f13, 6.0, false);\n+  D (f14, 4.0, true);\n+  D (f14, 5.0, false);\n+  D (f14, 6.0, true);\n+  D (f15, 4.0, false);\n+  D (f15, 5.0, false);\n+  D (f15, 6.0, true);\n+  D (f16, 4.0, true);\n+  D (f16, 5.0, false);\n+  D (f16, 6.0, false);\n+  D (f17, 4.0, false);\n+  D (f17, 5.0, true);\n+  D (f17, 6.0, true);\n+  D (f18, 4.0, true);\n+  D (f18, 5.0, true);\n+  D (f18, 6.0, false);\n+  D (f19, 4.0, true);\n+  D (f19, 5.0, false);\n+  D (f19, 6.0, false);\n+  D (f20, 4.0, false);\n+  D (f20, 5.0, true);\n+  D (f20, 6.0, true);\n+  D (f21, 4.0, false);\n+  D (f21, 5.0, true);\n+  D (f21, 6.0, false);\n+  D (f22, 4.0, true);\n+  D (f22, 5.0, false);\n+  D (f22, 6.0, true);\n+  D (f23, 4.0, false);\n+  D (f23, 5.0, false);\n+  D (f23, 6.0, true);\n+  D (f24, 4.0, true);\n+  D (f24, 5.0, true);\n+  D (f24, 6.0, false);\n+}"}, {"sha": "de404ea82bad504ef22d375f1820ace5132f312c", "filename": "gcc/testsuite/gcc.dg/pr94589-1.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad96c867e173c1ebcfc201b201adac5095683a08/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94589-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad96c867e173c1ebcfc201b201adac5095683a08/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94589-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94589-1.c?ref=ad96c867e173c1ebcfc201b201adac5095683a08", "patch": "@@ -0,0 +1,35 @@\n+/* PR tree-optimization/94589 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -g0 -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-times \"\\[ij]_\\[0-9]+\\\\(D\\\\) (?:<|<=|==|!=|>|>=) \\[ij]_\\[0-9]+\\\\(D\\\\)\" 14 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"i_\\[0-9]+\\\\(D\\\\) (?:<|<=|==|!=|>|>=) \\[45]\" 14 \"optimized\" } } */\n+\n+#define A __attribute__((noipa))\n+A int f1 (int i, int j) { int c = i == j ? 0 : i < j ? -1 : 1; return c == 0; }\n+A int f2 (int i, int j) { int c = i == j ? 0 : i < j ? -1 : 1; return c != 0; }\n+A int f3 (int i, int j) { int c = i == j ? 0 : i < j ? -1 : 1; return c > 0; }\n+A int f4 (int i, int j) { int c = i == j ? 0 : i < j ? -1 : 1; return c < 0; }\n+A int f5 (int i, int j) { int c = i == j ? 0 : i < j ? -1 : 1; return c >= 0; }\n+A int f6 (int i, int j) { int c = i == j ? 0 : i < j ? -1 : 1; return c <= 0; }\n+A int f7 (int i, int j) { int c = i == j ? 0 : i < j ? -1 : 1; return c == -1; }\n+A int f8 (int i, int j) { int c = i == j ? 0 : i < j ? -1 : 1; return c != -1; }\n+A int f9 (int i, int j) { int c = i == j ? 0 : i < j ? -1 : 1; return c > -1; }\n+A int f10 (int i, int j) { int c = i == j ? 0 : i < j ? -1 : 1; return c <= -1; }\n+A int f11 (int i, int j) { int c = i == j ? 0 : i < j ? -1 : 1; return c == 1; }\n+A int f12 (int i, int j) { int c = i == j ? 0 : i < j ? -1 : 1; return c != 1; }\n+A int f13 (int i, int j) { int c = i == j ? 0 : i < j ? -1 : 1; return c < 1; }\n+A int f14 (int i, int j) { int c = i == j ? 0 : i < j ? -1 : 1; return c >= 1; }\n+A int f15 (int i) { int c = i == 5 ? 0 : i < 5 ? -1 : 1; return c == 0; }\n+A int f16 (int i) { int c = i == 5 ? 0 : i < 5 ? -1 : 1; return c != 0; }\n+A int f17 (int i) { int c = i == 5 ? 0 : i < 5 ? -1 : 1; return c > 0; }\n+A int f18 (int i) { int c = i == 5 ? 0 : i < 5 ? -1 : 1; return c < 0; }\n+A int f19 (int i) { int c = i == 5 ? 0 : i < 5 ? -1 : 1; return c >= 0; }\n+A int f20 (int i) { int c = i == 5 ? 0 : i < 5 ? -1 : 1; return c <= 0; }\n+A int f21 (int i) { int c = i == 5 ? 0 : i < 5 ? -1 : 1; return c == -1; }\n+A int f22 (int i) { int c = i == 5 ? 0 : i < 5 ? -1 : 1; return c != -1; }\n+A int f23 (int i) { int c = i == 5 ? 0 : i < 5 ? -1 : 1; return c > -1; }\n+A int f24 (int i) { int c = i == 5 ? 0 : i < 5 ? -1 : 1; return c <= -1; }\n+A int f25 (int i) { int c = i == 5 ? 0 : i < 5 ? -1 : 1; return c == 1; }\n+A int f26 (int i) { int c = i == 5 ? 0 : i < 5 ? -1 : 1; return c != 1; }\n+A int f27 (int i) { int c = i == 5 ? 0 : i < 5 ? -1 : 1; return c < 1; }\n+A int f28 (int i) { int c = i == 5 ? 0 : i < 5 ? -1 : 1; return c >= 1; }"}, {"sha": "9481b764dabf749aec7edf20ddb0938d23e26dcf", "filename": "gcc/testsuite/gcc.dg/pr94589-2.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad96c867e173c1ebcfc201b201adac5095683a08/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94589-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad96c867e173c1ebcfc201b201adac5095683a08/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94589-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94589-2.c?ref=ad96c867e173c1ebcfc201b201adac5095683a08", "patch": "@@ -0,0 +1,35 @@\n+/* PR tree-optimization/94589 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -g0 -ffast-math -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-times \"\\[ij]_\\[0-9]+\\\\(D\\\\) (?:<|<=|==|!=|>|>=) \\[ij]_\\[0-9]+\\\\(D\\\\)\" 14 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"i_\\[0-9]+\\\\(D\\\\) (?:<|<=|==|!=|>|>=) 5\\\\.0\" 14 \"optimized\" } } */\n+\n+#define A __attribute__((noipa))\n+A int f1 (double i, double j) { int c; if (i == j) c = 0; else if (i < j) c = -1; else if (i > j) c = 1; else c = 2; return c == 0; }\n+A int f2 (double i, double j) { int c; if (i == j) c = 0; else if (i < j) c = -1; else if (i > j) c = 1; else c = 2; return c != 0; }\n+A int f3 (double i, double j) { int c; if (i == j) c = 0; else if (i < j) c = -1; else if (i > j) c = 1; else c = 2; return c > 0; }\n+A int f4 (double i, double j) { int c; if (i == j) c = 0; else if (i < j) c = -1; else if (i > j) c = 1; else c = 2; return c < 0; }\n+A int f5 (double i, double j) { int c; if (i == j) c = 0; else if (i < j) c = -1; else if (i > j) c = 1; else c = 2; return c >= 0; }\n+A int f6 (double i, double j) { int c; if (i == j) c = 0; else if (i < j) c = -1; else if (i > j) c = 1; else c = 2; return c <= 0; }\n+A int f7 (double i, double j) { int c; if (i == j) c = 0; else if (i < j) c = -1; else if (i > j) c = 1; else c = 2; return c == -1; }\n+A int f8 (double i, double j) { int c; if (i == j) c = 0; else if (i < j) c = -1; else if (i > j) c = 1; else c = 2; return c != -1; }\n+A int f9 (double i, double j) { int c; if (i == j) c = 0; else if (i < j) c = -1; else if (i > j) c = 1; else c = 2; return c > -1; }\n+A int f10 (double i, double j) { int c; if (i == j) c = 0; else if (i < j) c = -1; else if (i > j) c = 1; else c = 2; return c <= -1; }\n+A int f11 (double i, double j) { int c; if (i == j) c = 0; else if (i < j) c = -1; else if (i > j) c = 1; else c = 2; return c == 1; }\n+A int f12 (double i, double j) { int c; if (i == j) c = 0; else if (i < j) c = -1; else if (i > j) c = 1; else c = 2; return c != 1; }\n+A int f13 (double i, double j) { int c; if (i == j) c = 0; else if (i < j) c = -1; else if (i > j) c = 1; else c = 2; return c < 1; }\n+A int f14 (double i, double j) { int c; if (i == j) c = 0; else if (i < j) c = -1; else if (i > j) c = 1; else c = 2; return c >= 1; }\n+A int f15 (double i) { int c; if (i == 5.0) c = 0; else if (i < 5.0) c = -1; else if (i > 5.0) c = 1; else c = 2; return c == 0; }\n+A int f16 (double i) { int c; if (i == 5.0) c = 0; else if (i < 5.0) c = -1; else if (i > 5.0) c = 1; else c = 2; return c != 0; }\n+A int f17 (double i) { int c; if (i == 5.0) c = 0; else if (i < 5.0) c = -1; else if (i > 5.0) c = 1; else c = 2; return c > 0; }\n+A int f18 (double i) { int c; if (i == 5.0) c = 0; else if (i < 5.0) c = -1; else if (i > 5.0) c = 1; else c = 2; return c < 0; }\n+A int f19 (double i) { int c; if (i == 5.0) c = 0; else if (i < 5.0) c = -1; else if (i > 5.0) c = 1; else c = 2; return c >= 0; }\n+A int f20 (double i) { int c; if (i == 5.0) c = 0; else if (i < 5.0) c = -1; else if (i > 5.0) c = 1; else c = 2; return c <= 0; }\n+A int f21 (double i) { int c; if (i == 5.0) c = 0; else if (i < 5.0) c = -1; else if (i > 5.0) c = 1; else c = 2; return c == -1; }\n+A int f22 (double i) { int c; if (i == 5.0) c = 0; else if (i < 5.0) c = -1; else if (i > 5.0) c = 1; else c = 2; return c != -1; }\n+A int f23 (double i) { int c; if (i == 5.0) c = 0; else if (i < 5.0) c = -1; else if (i > 5.0) c = 1; else c = 2; return c > -1; }\n+A int f24 (double i) { int c; if (i == 5.0) c = 0; else if (i < 5.0) c = -1; else if (i > 5.0) c = 1; else c = 2; return c <= -1; }\n+A int f25 (double i) { int c; if (i == 5.0) c = 0; else if (i < 5.0) c = -1; else if (i > 5.0) c = 1; else c = 2; return c == 1; }\n+A int f26 (double i) { int c; if (i == 5.0) c = 0; else if (i < 5.0) c = -1; else if (i > 5.0) c = 1; else c = 2; return c != 1; }\n+A int f27 (double i) { int c; if (i == 5.0) c = 0; else if (i < 5.0) c = -1; else if (i > 5.0) c = 1; else c = 2; return c < 1; }\n+A int f28 (double i) { int c; if (i == 5.0) c = 0; else if (i < 5.0) c = -1; else if (i > 5.0) c = 1; else c = 2; return c >= 1; }"}, {"sha": "df82fab7334be0b2be5b086bf29cd0325baf5e39", "filename": "gcc/testsuite/gcc.dg/pr94589-3.c", "status": "added", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad96c867e173c1ebcfc201b201adac5095683a08/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94589-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad96c867e173c1ebcfc201b201adac5095683a08/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94589-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94589-3.c?ref=ad96c867e173c1ebcfc201b201adac5095683a08", "patch": "@@ -0,0 +1,97 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -g\" } */\n+\n+#include \"pr94589-1.c\"\n+\n+#define C(fn, i, j, r) if (fn (i, j) != r) __builtin_abort ()\n+#define D(fn, i, r) if (fn (i) != r) __builtin_abort ()\n+\n+int\n+main ()\n+{\n+  C (f1, 7, 8, 0);\n+  C (f1, 8, 8, 1);\n+  C (f1, 9, 8, 0);\n+  C (f2, 7, 8, 1);\n+  C (f2, 8, 8, 0);\n+  C (f2, 9, 8, 1);\n+  C (f3, 7, 8, 0);\n+  C (f3, 8, 8, 0);\n+  C (f3, 9, 8, 1);\n+  C (f4, 7, 8, 1);\n+  C (f4, 8, 8, 0);\n+  C (f4, 9, 8, 0);\n+  C (f5, 7, 8, 0);\n+  C (f5, 8, 8, 1);\n+  C (f5, 9, 8, 1);\n+  C (f6, 7, 8, 1);\n+  C (f6, 8, 8, 1);\n+  C (f6, 9, 8, 0);\n+  C (f7, 7, 8, 1);\n+  C (f7, 8, 8, 0);\n+  C (f7, 9, 8, 0);\n+  C (f8, 7, 8, 0);\n+  C (f8, 8, 8, 1);\n+  C (f8, 9, 8, 1);\n+  C (f9, 7, 8, 0);\n+  C (f9, 8, 8, 1);\n+  C (f9, 9, 8, 1);\n+  C (f10, 7, 8, 1);\n+  C (f10, 8, 8, 0);\n+  C (f10, 9, 8, 0);\n+  C (f11, 7, 8, 0);\n+  C (f11, 8, 8, 0);\n+  C (f11, 9, 8, 1);\n+  C (f12, 7, 8, 1);\n+  C (f12, 8, 8, 1);\n+  C (f12, 9, 8, 0);\n+  C (f13, 7, 8, 1);\n+  C (f13, 8, 8, 1);\n+  C (f13, 9, 8, 0);\n+  C (f14, 7, 8, 0);\n+  C (f14, 8, 8, 0);\n+  C (f14, 9, 8, 1);\n+  D (f15, 4, 0);\n+  D (f15, 5, 1);\n+  D (f15, 6, 0);\n+  D (f16, 4, 1);\n+  D (f16, 5, 0);\n+  D (f16, 6, 1);\n+  D (f17, 4, 0);\n+  D (f17, 5, 0);\n+  D (f17, 6, 1);\n+  D (f18, 4, 1);\n+  D (f18, 5, 0);\n+  D (f18, 6, 0);\n+  D (f19, 4, 0);\n+  D (f19, 5, 1);\n+  D (f19, 6, 1);\n+  D (f20, 4, 1);\n+  D (f20, 5, 1);\n+  D (f20, 6, 0);\n+  D (f21, 4, 1);\n+  D (f21, 5, 0);\n+  D (f21, 6, 0);\n+  D (f22, 4, 0);\n+  D (f22, 5, 1);\n+  D (f22, 6, 1);\n+  D (f23, 4, 0);\n+  D (f23, 5, 1);\n+  D (f23, 6, 1);\n+  D (f24, 4, 1);\n+  D (f24, 5, 0);\n+  D (f24, 6, 0);\n+  D (f25, 4, 0);\n+  D (f25, 5, 0);\n+  D (f25, 6, 1);\n+  D (f26, 4, 1);\n+  D (f26, 5, 1);\n+  D (f26, 6, 0);\n+  D (f27, 4, 1);\n+  D (f27, 5, 1);\n+  D (f27, 6, 0);\n+  D (f28, 4, 0);\n+  D (f28, 5, 0);\n+  D (f28, 6, 1);\n+  return 0;\n+}"}, {"sha": "b2557fb07b0f48b4c31839969a3554c4ed7dcd5f", "filename": "gcc/testsuite/gcc.dg/pr94589-4.c", "status": "added", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad96c867e173c1ebcfc201b201adac5095683a08/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94589-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad96c867e173c1ebcfc201b201adac5095683a08/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94589-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94589-4.c?ref=ad96c867e173c1ebcfc201b201adac5095683a08", "patch": "@@ -0,0 +1,97 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -g -ffast-math\" } */\n+\n+#include \"pr94589-2.c\"\n+\n+#define C(fn, i, j, r) if (fn (i, j) != r) __builtin_abort ()\n+#define D(fn, i, r) if (fn (i) != r) __builtin_abort ()\n+\n+int\n+main ()\n+{\n+  C (f1, 7.0, 8.0, 0);\n+  C (f1, 8.0, 8.0, 1);\n+  C (f1, 9.0, 8.0, 0);\n+  C (f2, 7.0, 8.0, 1);\n+  C (f2, 8.0, 8.0, 0);\n+  C (f2, 9.0, 8.0, 1);\n+  C (f3, 7.0, 8.0, 0);\n+  C (f3, 8.0, 8.0, 0);\n+  C (f3, 9.0, 8.0, 1);\n+  C (f4, 7.0, 8.0, 1);\n+  C (f4, 8.0, 8.0, 0);\n+  C (f4, 9.0, 8.0, 0);\n+  C (f5, 7.0, 8.0, 0);\n+  C (f5, 8.0, 8.0, 1);\n+  C (f5, 9.0, 8.0, 1);\n+  C (f6, 7.0, 8.0, 1);\n+  C (f6, 8.0, 8.0, 1);\n+  C (f6, 9.0, 8.0, 0);\n+  C (f7, 7.0, 8.0, 1);\n+  C (f7, 8.0, 8.0, 0);\n+  C (f7, 9.0, 8.0, 0);\n+  C (f8, 7.0, 8.0, 0);\n+  C (f8, 8.0, 8.0, 1);\n+  C (f8, 9.0, 8.0, 1);\n+  C (f9, 7.0, 8.0, 0);\n+  C (f9, 8.0, 8.0, 1);\n+  C (f9, 9.0, 8.0, 1);\n+  C (f10, 7.0, 8.0, 1);\n+  C (f10, 8.0, 8.0, 0);\n+  C (f10, 9.0, 8.0, 0);\n+  C (f11, 7.0, 8.0, 0);\n+  C (f11, 8.0, 8.0, 0);\n+  C (f11, 9.0, 8.0, 1);\n+  C (f12, 7.0, 8.0, 1);\n+  C (f12, 8.0, 8.0, 1);\n+  C (f12, 9.0, 8.0, 0);\n+  C (f13, 7.0, 8.0, 1);\n+  C (f13, 8.0, 8.0, 1);\n+  C (f13, 9.0, 8.0, 0);\n+  C (f14, 7.0, 8.0, 0);\n+  C (f14, 8.0, 8.0, 0);\n+  C (f14, 9.0, 8.0, 1);\n+  D (f15, 4.0, 0);\n+  D (f15, 5.0, 1);\n+  D (f15, 6.0, 0);\n+  D (f16, 4.0, 1);\n+  D (f16, 5.0, 0);\n+  D (f16, 6.0, 1);\n+  D (f17, 4.0, 0);\n+  D (f17, 5.0, 0);\n+  D (f17, 6.0, 1);\n+  D (f18, 4.0, 1);\n+  D (f18, 5.0, 0);\n+  D (f18, 6.0, 0);\n+  D (f19, 4.0, 0);\n+  D (f19, 5.0, 1);\n+  D (f19, 6.0, 1);\n+  D (f20, 4.0, 1);\n+  D (f20, 5.0, 1);\n+  D (f20, 6.0, 0);\n+  D (f21, 4.0, 1);\n+  D (f21, 5.0, 0);\n+  D (f21, 6.0, 0);\n+  D (f22, 4.0, 0);\n+  D (f22, 5.0, 1);\n+  D (f22, 6.0, 1);\n+  D (f23, 4.0, 0);\n+  D (f23, 5.0, 1);\n+  D (f23, 6.0, 1);\n+  D (f24, 4.0, 1);\n+  D (f24, 5.0, 0);\n+  D (f24, 6.0, 0);\n+  D (f25, 4.0, 0);\n+  D (f25, 5.0, 0);\n+  D (f25, 6.0, 1);\n+  D (f26, 4.0, 1);\n+  D (f26, 5.0, 1);\n+  D (f26, 6.0, 0);\n+  D (f27, 4.0, 1);\n+  D (f27, 5.0, 1);\n+  D (f27, 6.0, 0);\n+  D (f28, 4.0, 0);\n+  D (f28, 5.0, 0);\n+  D (f28, 6.0, 1);\n+  return 0;\n+}"}, {"sha": "223dac1a87311c52be4f4f3dcc208857a761ffd4", "filename": "gcc/tree-ssa-phiopt.c", "status": "modified", "additions": 424, "deletions": 0, "changes": 424, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad96c867e173c1ebcfc201b201adac5095683a08/gcc%2Ftree-ssa-phiopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad96c867e173c1ebcfc201b201adac5095683a08/gcc%2Ftree-ssa-phiopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiopt.c?ref=ad96c867e173c1ebcfc201b201adac5095683a08", "patch": "@@ -64,6 +64,8 @@ static bool abs_replacement (basic_block, basic_block,\n \t\t\t     edge, edge, gimple *, tree, tree);\n static bool xor_replacement (basic_block, basic_block,\n \t\t\t     edge, edge, gimple *, tree, tree);\n+static bool spaceship_replacement (basic_block, basic_block,\n+\t\t\t\t   edge, edge, gphi *, tree, tree);\n static bool cond_removal_in_popcount_clz_ctz_pattern (basic_block, basic_block,\n \t\t\t\t\t\t      edge, edge, gimple *,\n \t\t\t\t\t\t      tree, tree);\n@@ -359,6 +361,8 @@ tree_ssa_phiopt_worker (bool do_store_elim, bool do_hoist_loads, bool early_p)\n \t    cfgchanged = true;\n \t  else if (minmax_replacement (bb, bb1, e1, e2, phi, arg0, arg1))\n \t    cfgchanged = true;\n+\t  else if (spaceship_replacement (bb, bb1, e1, e2, phi, arg0, arg1))\n+\t    cfgchanged = true;\n \t}\n     }\n \n@@ -1809,6 +1813,426 @@ minmax_replacement (basic_block cond_bb, basic_block middle_bb,\n   return true;\n }\n \n+/* Return true if the only executable statement in BB is a GIMPLE_COND.  */\n+\n+static bool\n+cond_only_block_p (basic_block bb)\n+{\n+  /* BB must have no executable statements.  */\n+  gimple_stmt_iterator gsi = gsi_after_labels (bb);\n+  if (phi_nodes (bb))\n+    return false;\n+  while (!gsi_end_p (gsi))\n+    {\n+      gimple *stmt = gsi_stmt (gsi);\n+      if (is_gimple_debug (stmt))\n+\t;\n+      else if (gimple_code (stmt) == GIMPLE_NOP\n+\t       || gimple_code (stmt) == GIMPLE_PREDICT\n+\t       || gimple_code (stmt) == GIMPLE_COND)\n+\t;\n+      else\n+\treturn false;\n+      gsi_next (&gsi);\n+    }\n+  return true;\n+}\n+\n+/* Attempt to optimize (x <=> y) cmp 0 and similar comparisons.\n+   For strong ordering <=> try to match something like:\n+    <bb 2> :  // cond3_bb (== cond2_bb)\n+    if (x_4(D) != y_5(D))\n+      goto <bb 3>; [INV]\n+    else\n+      goto <bb 6>; [INV]\n+\n+    <bb 3> :  // cond_bb\n+    if (x_4(D) < y_5(D))\n+      goto <bb 6>; [INV]\n+    else\n+      goto <bb 4>; [INV]\n+\n+    <bb 4> :  // middle_bb\n+\n+    <bb 6> :  // phi_bb\n+    # iftmp.0_2 = PHI <1(4), 0(2), -1(3)>\n+    _1 = iftmp.0_2 == 0;\n+\n+   and for partial ordering <=> something like:\n+\n+    <bb 2> :  // cond3_bb\n+    if (a_3(D) == b_5(D))\n+      goto <bb 6>; [50.00%]\n+    else\n+      goto <bb 3>; [50.00%]\n+\n+    <bb 3> [local count: 536870913]:  // cond2_bb\n+    if (a_3(D) < b_5(D))\n+      goto <bb 6>; [50.00%]\n+    else\n+      goto <bb 4>; [50.00%]\n+\n+    <bb 4> [local count: 268435456]:  // cond_bb\n+    if (a_3(D) > b_5(D))\n+      goto <bb 6>; [50.00%]\n+    else\n+      goto <bb 5>; [50.00%]\n+\n+    <bb 5> [local count: 134217728]:  // middle_bb\n+\n+    <bb 6> [local count: 1073741824]:  // phi_bb\n+    # SR.27_4 = PHI <0(2), -1(3), 1(4), 2(5)>\n+    _2 = SR.27_4 > 0;  */\n+\n+static bool\n+spaceship_replacement (basic_block cond_bb, basic_block middle_bb,\n+\t\t       edge e0, edge e1, gphi *phi,\n+\t\t       tree arg0, tree arg1)\n+{\n+  if (!INTEGRAL_TYPE_P (TREE_TYPE (PHI_RESULT (phi)))\n+      || TYPE_UNSIGNED (TREE_TYPE (PHI_RESULT (phi)))\n+      || !tree_fits_shwi_p (arg0)\n+      || !tree_fits_shwi_p (arg1)\n+      || !IN_RANGE (tree_to_shwi (arg0), -1, 2)\n+      || !IN_RANGE (tree_to_shwi (arg1), -1, 2))\n+    return false;\n+\n+  basic_block phi_bb = gimple_bb (phi);\n+  gcc_assert (phi_bb == e0->dest && phi_bb == e1->dest);\n+  if (!IN_RANGE (EDGE_COUNT (phi_bb->preds), 3, 4))\n+    return false;\n+\n+  use_operand_p use_p;\n+  gimple *use_stmt;\n+  if (SSA_NAME_OCCURS_IN_ABNORMAL_PHI (PHI_RESULT (phi)))\n+    return false;\n+  if (!single_imm_use (PHI_RESULT (phi), &use_p, &use_stmt))\n+    return false;\n+  enum tree_code cmp;\n+  tree lhs, rhs;\n+  if (gimple_code (use_stmt) == GIMPLE_COND)\n+    {\n+      cmp = gimple_cond_code (use_stmt);\n+      lhs = gimple_cond_lhs (use_stmt);\n+      rhs = gimple_cond_rhs (use_stmt);\n+    }\n+  else if (is_gimple_assign (use_stmt))\n+    {\n+      if (gimple_assign_rhs_class (use_stmt) == GIMPLE_BINARY_RHS)\n+\t{\n+\t  cmp = gimple_assign_rhs_code (use_stmt);\n+\t  lhs = gimple_assign_rhs1 (use_stmt);\n+\t  rhs = gimple_assign_rhs2 (use_stmt);\n+\t}\n+      else if (gimple_assign_rhs_code (use_stmt) == COND_EXPR)\n+\t{\n+\t  tree cond = gimple_assign_rhs1 (use_stmt);\n+\t  if (!COMPARISON_CLASS_P (cond))\n+\t    return false;\n+\t  cmp = TREE_CODE (cond);\n+\t  lhs = TREE_OPERAND (cond, 0);\n+\t  rhs = TREE_OPERAND (cond, 1);\n+\t}\n+      else\n+\treturn false;\n+    }\n+  else\n+    return false;\n+  switch (cmp)\n+    {\n+    case EQ_EXPR:\n+    case NE_EXPR:\n+    case LT_EXPR:\n+    case GT_EXPR:\n+    case LE_EXPR:\n+    case GE_EXPR:\n+      break;\n+    default:\n+      return false;\n+    }\n+  if (lhs != PHI_RESULT (phi)\n+      || !tree_fits_shwi_p (rhs)\n+      || !IN_RANGE (tree_to_shwi (rhs), -1, 1))\n+    return false;\n+\n+  if (!empty_block_p (middle_bb))\n+    return false;\n+\n+  gcond *cond1 = as_a <gcond *> (last_stmt (cond_bb));\n+  enum tree_code cmp1 = gimple_cond_code (cond1);\n+  if (cmp1 != LT_EXPR && cmp1 != GT_EXPR)\n+    return false;\n+  tree lhs1 = gimple_cond_lhs (cond1);\n+  tree rhs1 = gimple_cond_rhs (cond1);\n+  /* The optimization may be unsafe due to NaNs.  */\n+  if (HONOR_NANS (TREE_TYPE (lhs1)))\n+    return false;\n+  if (TREE_CODE (lhs1) == SSA_NAME && SSA_NAME_OCCURS_IN_ABNORMAL_PHI (lhs1))\n+    return false;\n+  if (TREE_CODE (rhs1) == SSA_NAME && SSA_NAME_OCCURS_IN_ABNORMAL_PHI (rhs1))\n+    return false;\n+\n+  if (!single_pred_p (cond_bb) || !cond_only_block_p (cond_bb))\n+    return false;\n+\n+  basic_block cond2_bb = single_pred (cond_bb);\n+  if (EDGE_COUNT (cond2_bb->succs) != 2)\n+    return false;\n+  edge cond2_phi_edge;\n+  if (EDGE_SUCC (cond2_bb, 0)->dest == cond_bb)\n+    {\n+      if (EDGE_SUCC (cond2_bb, 1)->dest != phi_bb)\n+\treturn false;\n+      cond2_phi_edge = EDGE_SUCC (cond2_bb, 1);\n+    }\n+  else if (EDGE_SUCC (cond2_bb, 0)->dest != phi_bb)\n+    return false;\n+  else\n+    cond2_phi_edge = EDGE_SUCC (cond2_bb, 0);\n+  tree arg2 = gimple_phi_arg_def (phi, cond2_phi_edge->dest_idx);\n+  if (!tree_fits_shwi_p (arg2))\n+    return false;\n+  gimple *cond2 = last_stmt (cond2_bb);\n+  if (cond2 == NULL || gimple_code (cond2) != GIMPLE_COND)\n+    return false;\n+  enum tree_code cmp2 = gimple_cond_code (cond2);\n+  tree lhs2 = gimple_cond_lhs (cond2);\n+  tree rhs2 = gimple_cond_rhs (cond2);\n+  if (lhs2 == lhs1)\n+    {\n+      if (!operand_equal_p (rhs2, rhs1, 0))\n+\treturn false;\n+    }\n+  else if (lhs2 == rhs1)\n+    {\n+      if (rhs2 != lhs1)\n+\treturn false;\n+    }\n+  else\n+    return false;\n+\n+  tree arg3 = arg2;\n+  basic_block cond3_bb = cond2_bb;\n+  edge cond3_phi_edge = cond2_phi_edge;\n+  gimple *cond3 = cond2;\n+  enum tree_code cmp3 = cmp2;\n+  tree lhs3 = lhs2;\n+  tree rhs3 = rhs2;\n+  if (EDGE_COUNT (phi_bb->preds) == 4)\n+    {\n+      if (absu_hwi (tree_to_shwi (arg2)) != 1)\n+\treturn false;\n+      if (e1->flags & EDGE_TRUE_VALUE)\n+\t{\n+\t  if (tree_to_shwi (arg0) != 2\n+\t      || absu_hwi (tree_to_shwi (arg1)) != 1\n+\t      || wi::to_widest (arg1) == wi::to_widest (arg2))\n+\t    return false;\n+\t}\n+      else if (tree_to_shwi (arg1) != 2\n+\t       || absu_hwi (tree_to_shwi (arg0)) != 1\n+\t       || wi::to_widest (arg0) == wi::to_widest (arg1))\n+\treturn false;\n+      if (cmp2 != LT_EXPR && cmp2 != GT_EXPR)\n+\treturn false;\n+      /* if (x < y) goto phi_bb; else fallthru;\n+\t if (x > y) goto phi_bb; else fallthru;\n+\t bbx:;\n+\t phi_bb:;\n+\t is ok, but if x and y are swapped in one of the comparisons,\n+\t or the comparisons are the same and operands not swapped,\n+\t or second goto phi_bb is not the true edge, it is not.  */\n+      if ((lhs2 == lhs1)\n+\t  ^ (cmp2 == cmp1)\n+\t  ^ ((e1->flags & EDGE_TRUE_VALUE) != 0))\n+\treturn false;\n+      if ((cond2_phi_edge->flags & EDGE_TRUE_VALUE) == 0)\n+\treturn false;\n+      if (!single_pred_p (cond2_bb) || !cond_only_block_p (cond2_bb))\n+\treturn false;\n+      cond3_bb = single_pred (cond2_bb);\n+      if (EDGE_COUNT (cond2_bb->succs) != 2)\n+\treturn false;\n+      if (EDGE_SUCC (cond3_bb, 0)->dest == cond2_bb)\n+\t{\n+\t  if (EDGE_SUCC (cond3_bb, 1)->dest != phi_bb)\n+\t    return false;\n+\t  cond3_phi_edge = EDGE_SUCC (cond3_bb, 1);\n+\t}\n+      else if (EDGE_SUCC (cond3_bb, 0)->dest != phi_bb)\n+\treturn false;\n+      else\n+\tcond3_phi_edge = EDGE_SUCC (cond3_bb, 0);\n+      arg3 = gimple_phi_arg_def (phi, cond3_phi_edge->dest_idx);\n+      cond3 = last_stmt (cond3_bb);\n+      if (cond3 == NULL || gimple_code (cond3) != GIMPLE_COND)\n+\treturn false;\n+      cmp3 = gimple_cond_code (cond3);\n+      lhs3 = gimple_cond_lhs (cond3);\n+      rhs3 = gimple_cond_rhs (cond3);\n+      if (lhs3 == lhs1)\n+\t{\n+\t  if (!operand_equal_p (rhs3, rhs1, 0))\n+\t    return false;\n+\t}\n+      else if (lhs3 == rhs1)\n+\t{\n+\t  if (rhs3 != lhs1)\n+\t    return false;\n+\t}\n+      else\n+\treturn false;\n+    }\n+  else if (absu_hwi (tree_to_shwi (arg0)) != 1\n+\t   || absu_hwi (tree_to_shwi (arg1)) != 1\n+\t   || wi::to_widest (arg0) == wi::to_widest (arg1))\n+    return false;\n+\n+  if (!integer_zerop (arg3) || (cmp3 != EQ_EXPR && cmp3 != NE_EXPR))\n+    return false;\n+  if ((cond3_phi_edge->flags & (cmp3 == EQ_EXPR\n+\t\t\t\t? EDGE_TRUE_VALUE : EDGE_FALSE_VALUE)) == 0)\n+    return false;\n+\n+  /* lhs1 one_cmp rhs1 results in PHI_RESULT (phi) of 1.  */\n+  enum tree_code one_cmp;\n+  if ((cmp1 == LT_EXPR)\n+      ^ (!integer_onep ((e1->flags & EDGE_TRUE_VALUE) ? arg1 : arg0)))\n+    one_cmp = LT_EXPR;\n+  else\n+    one_cmp = GT_EXPR;\n+\n+  enum tree_code res_cmp;\n+  switch (cmp)\n+    {\n+    case EQ_EXPR:\n+      if (integer_zerop (rhs))\n+\tres_cmp = EQ_EXPR;\n+      else if (integer_minus_onep (rhs))\n+\tres_cmp = one_cmp == LT_EXPR ? GT_EXPR : LT_EXPR;\n+      else if (integer_onep (rhs))\n+\tres_cmp = one_cmp;\n+      else\n+\treturn false;\n+      break;\n+    case NE_EXPR:\n+      if (integer_zerop (rhs))\n+\tres_cmp = NE_EXPR;\n+      else if (integer_minus_onep (rhs))\n+\tres_cmp = one_cmp == LT_EXPR ? LE_EXPR : GE_EXPR;\n+      else if (integer_onep (rhs))\n+\tres_cmp = one_cmp == LT_EXPR ? GE_EXPR : LE_EXPR;\n+      else\n+\treturn false;\n+      break;\n+    case LT_EXPR:\n+      if (integer_onep (rhs))\n+\tres_cmp = one_cmp == LT_EXPR ? GE_EXPR : LE_EXPR;\n+      else if (integer_zerop (rhs))\n+\tres_cmp = one_cmp == LT_EXPR ? GT_EXPR : LT_EXPR;\n+      else\n+\treturn false;\n+      break;\n+    case LE_EXPR:\n+      if (integer_zerop (rhs))\n+\tres_cmp = one_cmp == LT_EXPR ? GE_EXPR : LE_EXPR;\n+      else if (integer_minus_onep (rhs))\n+\tres_cmp = one_cmp == LT_EXPR ? GT_EXPR : LT_EXPR;\n+      else\n+\treturn false;\n+      break;\n+    case GT_EXPR:\n+      if (integer_minus_onep (rhs))\n+\tres_cmp = one_cmp == LT_EXPR ? LE_EXPR : GE_EXPR;\n+      else if (integer_zerop (rhs))\n+\tres_cmp = one_cmp;\n+      else\n+\treturn false;\n+      break;\n+    case GE_EXPR:\n+      if (integer_zerop (rhs))\n+\tres_cmp = one_cmp == LT_EXPR ? LE_EXPR : GE_EXPR;\n+      else if (integer_onep (rhs))\n+\tres_cmp = one_cmp;\n+      else\n+\treturn false;\n+      break;\n+    default:\n+      gcc_unreachable ();\n+    }\n+\n+  if (gimple_code (use_stmt) == GIMPLE_COND)\n+    {\n+      gcond *use_cond = as_a <gcond *> (use_stmt);\n+      gimple_cond_set_code (use_cond, res_cmp);\n+      gimple_cond_set_lhs (use_cond, lhs1);\n+      gimple_cond_set_rhs (use_cond, rhs1);\n+    }\n+  else if (gimple_assign_rhs_class (use_stmt) == GIMPLE_BINARY_RHS)\n+    {\n+      gimple_assign_set_rhs_code (use_stmt, res_cmp);\n+      gimple_assign_set_rhs1 (use_stmt, lhs1);\n+      gimple_assign_set_rhs2 (use_stmt, rhs1);\n+    }\n+  else\n+    {\n+      tree cond = build2 (res_cmp, TREE_TYPE (gimple_assign_rhs1 (use_stmt)),\n+\t\t\t  lhs1, rhs1);\n+      gimple_assign_set_rhs1 (use_stmt, cond);\n+    }\n+  update_stmt (use_stmt);\n+\n+  if (MAY_HAVE_DEBUG_BIND_STMTS)\n+    {\n+      use_operand_p use_p;\n+      imm_use_iterator iter;\n+      bool has_debug_uses = false;\n+      FOR_EACH_IMM_USE_FAST (use_p, iter, PHI_RESULT (phi))\n+\t{\n+\t  gimple *use_stmt = USE_STMT (use_p);\n+\t  gcc_assert (is_gimple_debug (use_stmt));\n+\t  has_debug_uses = true;\n+\t  break;\n+\t}\n+\n+      if (has_debug_uses)\n+\t{\n+\t  /* If there are debug uses, emit something like:\n+\t     # DEBUG D#1 => i_2(D) > j_3(D) ? 1 : -1\n+\t     # DEBUG D#2 => i_2(D) == j_3(D) ? 0 : D#1\n+\t     where > stands for the comparison that yielded 1\n+\t     and replace debug uses of phi result with that D#2.\n+\t     Ignore the value of 2, because if NaNs aren't expected,\n+\t     all floating point numbers should be comparable.  */\n+\t  gimple_stmt_iterator gsi = gsi_after_labels (gimple_bb (phi));\n+\t  tree type = TREE_TYPE (PHI_RESULT (phi));\n+\t  tree temp1 = make_node (DEBUG_EXPR_DECL);\n+\t  DECL_ARTIFICIAL (temp1) = 1;\n+\t  TREE_TYPE (temp1) = type;\n+\t  SET_DECL_MODE (temp1, TYPE_MODE (type));\n+\t  tree t = build2 (one_cmp, boolean_type_node, lhs1, rhs2);\n+\t  t = build3 (COND_EXPR, type, t, build_one_cst (type),\n+\t\t      build_int_cst (type, -1));\n+\t  gimple *g = gimple_build_debug_bind (temp1, t, phi);\n+\t  gsi_insert_before (&gsi, g, GSI_SAME_STMT);\n+\t  tree temp2 = make_node (DEBUG_EXPR_DECL);\n+\t  DECL_ARTIFICIAL (temp2) = 1;\n+\t  TREE_TYPE (temp2) = type;\n+\t  SET_DECL_MODE (temp2, TYPE_MODE (type));\n+\t  t = build2 (EQ_EXPR, boolean_type_node, lhs1, rhs2);\n+\t  t = build3 (COND_EXPR, type, t, build_zero_cst (type), temp1);\n+\t  g = gimple_build_debug_bind (temp2, t, phi);\n+\t  gsi_insert_before (&gsi, g, GSI_SAME_STMT);\n+\t  replace_uses_by (PHI_RESULT (phi), temp2);\n+\t}\n+    }\n+\n+  gimple_stmt_iterator psi = gsi_for_stmt (phi);\n+  remove_phi_node (&psi, true);\n+\n+  return true;\n+}\n+\n /* Convert\n \n    <bb 2>"}]}