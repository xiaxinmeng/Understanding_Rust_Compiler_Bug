{"sha": "4870f47246a4048c5514a97cc35e14389568c470", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDg3MGY0NzI0NmE0MDQ4YzU1MTRhOTdjYzM1ZTE0Mzg5NTY4YzQ3MA==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@codesourcery.com", "date": "2001-01-28T15:13:08Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2001-01-28T15:13:08Z"}, "message": "README: Add more comment.\n\n2001-01-28  Gabriel Dos Reis  <gdr@codesourcery.com>\n\n        * testsuite/README: Add more comment.\n        * testsuite/lib/libstdc++.exp: Tweak comment.\n\nFrom-SVN: r39321", "tree": {"sha": "d159cd0a9203665ebbd4692b1b2b10d50292e409", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d159cd0a9203665ebbd4692b1b2b10d50292e409"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4870f47246a4048c5514a97cc35e14389568c470", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4870f47246a4048c5514a97cc35e14389568c470", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4870f47246a4048c5514a97cc35e14389568c470", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4870f47246a4048c5514a97cc35e14389568c470/comments", "author": null, "committer": null, "parents": [{"sha": "64b9f199943161d2d5a9a108eefad8e32faca2c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64b9f199943161d2d5a9a108eefad8e32faca2c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64b9f199943161d2d5a9a108eefad8e32faca2c3"}], "stats": {"total": 73, "additions": 43, "deletions": 30}, "files": [{"sha": "8a5440bac698bdc5cc7fcc842197ba233ce0bb3c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4870f47246a4048c5514a97cc35e14389568c470/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4870f47246a4048c5514a97cc35e14389568c470/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=4870f47246a4048c5514a97cc35e14389568c470", "patch": "@@ -1,3 +1,8 @@\n+2001-01-28  Gabriel Dos Reis  <gdr@codesourcery.com>\n+\n+\t* testsuite/README: Add more comment.\n+\t* testsuite/lib/libstdc++.exp: Tweak comment.\n+\n 2001-01-26  Benjamin Kosnik  <bkoz@kredhat.com>\n \n \t* libsupc++/pure.cc (writestr): Just use cstdio and std::fputs."}, {"sha": "c675e58e907b842e6a9bc49ec86e91c6f14fbcf1", "filename": "libstdc++-v3/testsuite/README", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4870f47246a4048c5514a97cc35e14389568c470/libstdc%2B%2B-v3%2Ftestsuite%2FREADME", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4870f47246a4048c5514a97cc35e14389568c470/libstdc%2B%2B-v3%2Ftestsuite%2FREADME", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2FREADME?ref=4870f47246a4048c5514a97cc35e14389568c470", "patch": "@@ -3,8 +3,8 @@ use the new style DejaGnu framework.  Eventually, we'll abandon\n ../mkcheck.in in favor of this new testsuite framework.  \n \n   Basically, a testcase contains dg-keywords (see dg.exp) indicating\n-what to do and what kind of behaviour are to be expected.  New\n-testsuite should be written with the new style DejaGnu framework in mind.\n+what to do and what kinds of behaviour are to be expected.  New\n+testcases should be written with the new style DejaGnu framework in mind.\n \n   The V3 testing framework supports additional keywords for the purpose\n of easing the job of writing testcases.  All V3-keywords are of the\n@@ -21,5 +21,9 @@ form @xxx@.  Currently supported keywords include:\n \t   // @require@ %-*.tst %-*.txt\n \n   @diff@ <first-list> <second-list>\n+      After the testcase compiles and ran successfully, diff\n+      <first-list> against <second-list>, these lists should have the\n+      same length.  The test fails if diff returns non-zero a pair of\n+      files.\n \n -- Gaby"}, {"sha": "edd104410f5b7d8fdf891601e181dd57c118f401", "filename": "libstdc++-v3/testsuite/lib/libstdc++.exp", "status": "modified", "additions": 32, "deletions": 28, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4870f47246a4048c5514a97cc35e14389568c470/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4870f47246a4048c5514a97cc35e14389568c470/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp?ref=4870f47246a4048c5514a97cc35e14389568c470", "patch": "@@ -19,22 +19,26 @@\n #\n # This file is contributed by Gabriel Dos Reis <gdr@codesourcery.com>\n \n-## This file contains support routines for dg.exp-based testsuite\n+## This file contains support routines for dg.exp based testsuite\n ## framework.\n \n ## The global associative array lib_env contains the totality\n ## of options necessary to run testcases; the meanings of which are\n ## as follows:\n-##    lib_env(CXX):  The compiler used to run testcases\n-##    lib_env(CXXFLAGS): Special flags passed to the compiler\n-##    lib_env(INCLUDES):\n-##    lib_env(LDFLAGS): Additional library flags \n-##    lib_env(LIBTOOL):\n-##    lib_env(SRC_DIR):\n-##    lib_env(BUILD_DIR):\n-##    lib_env(static):\n-##    lib_env(shared):\n-##    lib_env(testcase_options):\n+##    lib_env(CXX)       The compiler used to run testcases.\n+##    lib_env(CXXFLAGS)  Special flags passed to the compiler.\n+##    lib_env(INCLUDES)  Includes options to pass to the compiler.\n+##    lib_env(LDFLAGS)   Additional library flags.\n+##    lib_env(LIBTOOL)   Path to the `libtool' script.\n+##    lib_env(SRC_DIR)   Where V3 master source lives.\n+##    lib_env(BUILD_DIR) Where V3 is built.\n+##    lib_env(static)    Flags to pass to the linker to build a \n+##                       statically linked executable.\n+##    lib_env(shared)    Flags to pass to the linker to build a \n+##                       dynamically linked executable.\n+##    lib_env(testcase_options) Options specified by current testcase.\n+##                       These are specified through the @xxx@-keywords.\n+\n \n load_lib dg.exp\n \n@@ -55,8 +59,7 @@ proc libstdc++-dg-init { args } {\n     # Set proper environment variables for the framework.\n     libstdc++-setup-flags ${src-dir} ${build-dir}\n     \n-    # mkcheck.in used to output these information.  Maybe we should\n-    # abandon that practice.\n+    # mkcheck.in used to output these information.\n     set output [remote_exec host $lib_env(CXX) -v]\n     if { [lindex $output 0] == 0 } {\n \tset output [lindex $output 1]\n@@ -69,22 +72,25 @@ proc libstdc++-dg-init { args } {\n     }\n }\n \n-## dg.exp callback.  Called from dg-test to run PROGRAM images.\n+## dg.exp callback.  Called from dg-test to run PROGRAM.\n+##\n+## This is the heart of the framework.  For the time being, it is\n+## pretty much baroque, but it will improve as time goes.\n proc libstdc++_load { prog } {\n     global lib_env\n     set opts $lib_env(testcase_options)\n     set results [remote_load target $lib_env(LIBTOOL) \"--mode=execute $prog\"]\n \n     if { [lindex $results 0] == \"pass\" && [info exists opts(diff)] } {\n-\t# FIXME: We should first test for any mentioned output file here\n+\t# FIXME: We should first test for any mentioned @output@ file here\n \t#        before taking any other action.\n \n \tset firsts [glob -nocomplain [lindex $opts(diff) 0]]\n \tset seconds [glob -nocomplain [lindex $opts(diff) 1]]\n \tforeach f $firsts s $seconds {\n \t    if { [diff $f $s] == 0 } {\n \t\t# FIXME: Well we should report a message.  But for the time\n-\t\t#        being, just pretend, there is nothing much to say.\n+\t\t#        being, just pretend there is nothing much to say.\n \t\t#        Yes, that is silly, I know.  But we need, first, to\n \t\t#        to have a working framework.\n \t\tbreak\n@@ -129,20 +135,20 @@ proc libstdc++_runtest { testdirs } {\n \t    continue\n \t}\n \t\n-\t# Make the appropriate test-dirs with accompaning .libs/\n+\t# Make the appropriate test-dirs with related .libs/ subdir\n \t# to keep libtool happy.\n \tset td \"$outdir/[dg-trim-dirname $srcdir $d]\"\n \tmaybe-make-directory $td\n \tmaybe-make-directory $td/.libs\n-\tcd $td;\n \n+\tcd $td;\n \tforeach testfile $testfiles {\n-\t    # We're not supposed to test this file, just skip it.\n+\t    # If we're not supposed to test this file, just skip it.\n \t    if ![runtest_file_p $runtests $testfile] {\n \t\tcontinue\n \t    }\n \t    \n-\t    verbose \"Testing [dg-trim-dirname $srcdir $testfile]\"\n+#\t    verbose \"Testing [dg-trim-dirname $srcdir $testfile]\"\n \t    libstdc++_do_test $testfile static\n \t    libstdc++_do_test $testfile shared\n \t}\n@@ -155,10 +161,8 @@ proc libstdc++_runtest { testdirs } {\n ##\n ## TESTCASE is the file-name of the program to test;\n ## COMPILE_TYPE is the kind of compilation to apply to TESTCASE; \n-##              current compilation kinds are: preprocessing(preprocess),\n-##              compiling-only-no-assembling-nor-linking(compile),\n-##              compiling-and-assmbling-no-linking(assemble),\n-##              linking-no-running(link), running(run).\n+##              current compilation kinds are: preprocess, compile,\n+##              assemble, link, run.\n proc libstdc++-dg-test { testfile compile_type additional-options } {\n     global srcdir; global outdir\n     global lib_env\n@@ -167,7 +171,7 @@ proc libstdc++-dg-test { testfile compile_type additional-options } {\n     # Prepare for compilation output\n     set comp_output \"\"\n \n-    # By default, we want to use libtool to run tests.\n+    # By default, we want to use libtool to compile and run tests.\n     set lt $lib_env(LIBTOOL)\n     set lt_args \"--tag=CXX\"\n     \n@@ -188,7 +192,7 @@ proc libstdc++-dg-test { testfile compile_type additional-options } {\n \t\"run\" -\n \t\"link\" {\n \t    # If we're asked to run a testcase, then just do a `link'.\n-\t    # The framework will load the program image latter through\n+\t    # Later, the framework will load the program image through\n \t    # libstdc++_load callback.\n \t    if { $which_library == \"static\" } {\n \t\tappend output_file \".st-exe\"\n@@ -240,8 +244,7 @@ proc libstdc++-setup-flags {src-dir build-dir} {\n \tset lib_env(FLAGS) \"$lib_env(CXX) -B$lib_env(BUILD_DIR)/ \\\n \t\t$lib_env(INCLUDES) $lib_env(CXXFLAGS)\"\n     } else {\n-\twarning \"$output\"\n-\texit $status\n+\tperror \"$output\"\n     }\n }\n \n@@ -253,6 +256,7 @@ proc maybe-make-directory {dir} {\n \n proc libstdc++_do_test { testfile lib } {\n     global which_library; set which_library $lib\n+    ## Is it planed to handle -keep-output throught @xxx@-option\n     dg-test -keep-output $testfile \"\" \"\"\n }\n "}]}