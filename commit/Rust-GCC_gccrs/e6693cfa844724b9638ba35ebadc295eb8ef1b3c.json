{"sha": "e6693cfa844724b9638ba35ebadc295eb8ef1b3c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTY2OTNjZmE4NDQ3MjRiOTYzOGJhMzVlYmFkYzI5NWViOGVmMWIzYw==", "commit": {"author": {"name": "Anatoly Sokolov", "email": "aesok@post.ru", "date": "2010-05-03T16:21:15Z"}, "committer": {"name": "Anatoly Sokolov", "email": "aesok@gcc.gnu.org", "date": "2010-05-03T16:21:15Z"}, "message": "double-int.h (tree_to_double_int): Remove macro.\n\n\t* double-int.h (tree_to_double_int): Remove macro.\n\t(double_int_to_tree, double_int_fits_to_tree_p): Move prototypes ...\n\t* tree.h (double_int_to_tree, double_int_fits_to_tree_p): ... here.\n\t(tree_to_double_int): New function.\n\t* double-int.c (double_int_to_tree, double_int_fits_to_tree_p):\n\tMove ...\n\t* tree.c (double_int_to_tree, double_int_fits_to_tree_p): ... here.\n\nFrom-SVN: r158993", "tree": {"sha": "1ce211eb88d194b02c3a946a70569bde7f903735", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ce211eb88d194b02c3a946a70569bde7f903735"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e6693cfa844724b9638ba35ebadc295eb8ef1b3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6693cfa844724b9638ba35ebadc295eb8ef1b3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6693cfa844724b9638ba35ebadc295eb8ef1b3c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6693cfa844724b9638ba35ebadc295eb8ef1b3c/comments", "author": null, "committer": null, "parents": [{"sha": "8eb7bc3cda0c8a6560712056642b5dff43895f74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8eb7bc3cda0c8a6560712056642b5dff43895f74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8eb7bc3cda0c8a6560712056642b5dff43895f74"}], "stats": {"total": 76, "additions": 45, "deletions": 31}, "files": [{"sha": "485dfbe4e5eb37ca3094a7f75ffb49a2f4cf1dd6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6693cfa844724b9638ba35ebadc295eb8ef1b3c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6693cfa844724b9638ba35ebadc295eb8ef1b3c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e6693cfa844724b9638ba35ebadc295eb8ef1b3c", "patch": "@@ -1,3 +1,13 @@\n+2010-05-03  Anatoly Sokolov  <aesok@post.ru>\n+\n+\t* double-int.h (tree_to_double_int): Remove macro.\n+\t(double_int_to_tree, double_int_fits_to_tree_p): Move prototypes ...\n+\t* tree.h (double_int_to_tree, double_int_fits_to_tree_p): ... here.\n+\t(tree_to_double_int): New function.\n+\t* double-int.c (double_int_to_tree, double_int_fits_to_tree_p):\n+\tMove ...\n+\t* tree.c (double_int_to_tree, double_int_fits_to_tree_p): ... here.\n+\n 2010-05-03  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/43971"}, {"sha": "000be2bf7b08000b135b53943b3287e2ac9d3523", "filename": "gcc/double-int.c", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6693cfa844724b9638ba35ebadc295eb8ef1b3c/gcc%2Fdouble-int.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6693cfa844724b9638ba35ebadc295eb8ef1b3c/gcc%2Fdouble-int.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdouble-int.c?ref=e6693cfa844724b9638ba35ebadc295eb8ef1b3c", "patch": "@@ -1049,30 +1049,6 @@ double_int_rshift (double_int a, HOST_WIDE_INT count, unsigned int prec, bool ar\n   return ret;\n }\n \n-/* Constructs tree in type TYPE from with value given by CST.  Signedness of CST\n-   is assumed to be the same as the signedness of TYPE.  */\n-\n-tree\n-double_int_to_tree (tree type, double_int cst)\n-{\n-  cst = double_int_ext (cst, TYPE_PRECISION (type), TYPE_UNSIGNED (type));\n-\n-  return build_int_cst_wide (type, cst.low, cst.high);\n-}\n-\n-/* Returns true if CST fits into range of TYPE.  Signedness of CST is assumed\n-   to be the same as the signedness of TYPE.  */\n-\n-bool\n-double_int_fits_to_tree_p (const_tree type, double_int cst)\n-{\n-  double_int ext = double_int_ext (cst,\n-\t\t\t\t   TYPE_PRECISION (type),\n-\t\t\t\t   TYPE_UNSIGNED (type));\n-\n-  return double_int_equal_p (cst, ext);\n-}\n-\n /* Returns -1 if A < B, 0 if A == B and 1 if A > B.  Signedness of the\n    comparison is given by UNS.  */\n "}, {"sha": "65d25ef04cbec5d6bad95625c8114620c8eb21cd", "filename": "gcc/double-int.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6693cfa844724b9638ba35ebadc295eb8ef1b3c/gcc%2Fdouble-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6693cfa844724b9638ba35ebadc295eb8ef1b3c/gcc%2Fdouble-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdouble-int.h?ref=e6693cfa844724b9638ba35ebadc295eb8ef1b3c", "patch": "@@ -61,13 +61,6 @@ typedef struct\n \n /* Constructors and conversions.  */\n \n-tree double_int_to_tree (tree, double_int);\n-bool double_int_fits_to_tree_p (const_tree, double_int);\n-\n-/* Constructs double_int from tree CST.  */\n-\n-#define tree_to_double_int(cst) (TREE_INT_CST (cst))\n-\n /* Constructs double_int from integer CST.  The bits over the precision of\n    HOST_WIDE_INT are filled with the sign bit.  */\n "}, {"sha": "b8f80deaf69f2341db81e925526af0013f76cb8c", "filename": "gcc/tree.c", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6693cfa844724b9638ba35ebadc295eb8ef1b3c/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6693cfa844724b9638ba35ebadc295eb8ef1b3c/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=e6693cfa844724b9638ba35ebadc295eb8ef1b3c", "patch": "@@ -1082,6 +1082,30 @@ build_int_cst_wide_type (tree type,\n   return build_int_cst_wide (type, low, high);\n }\n \n+/* Constructs tree in type TYPE from with value given by CST.  Signedness\n+   of CST is assumed to be the same as the signedness of TYPE.  */\n+\n+tree\n+double_int_to_tree (tree type, double_int cst)\n+{\n+  cst = double_int_ext (cst, TYPE_PRECISION (type), TYPE_UNSIGNED (type));\n+\n+  return build_int_cst_wide (type, cst.low, cst.high);\n+}\n+\n+/* Returns true if CST fits into range of TYPE.  Signedness of CST is assumed\n+   to be the same as the signedness of TYPE.  */\n+\n+bool\n+double_int_fits_to_tree_p (const_tree type, double_int cst)\n+{\n+  double_int ext = double_int_ext (cst,\n+\t\t\t\t   TYPE_PRECISION (type),\n+\t\t\t\t   TYPE_UNSIGNED (type));\n+\n+  return double_int_equal_p (cst, ext);\n+}\n+\n /* These are the hash table functions for the hash table of INTEGER_CST\n    nodes of a sizetype.  */\n "}, {"sha": "0a16c0df004483736d271740aa943e82e81a8688", "filename": "gcc/tree.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6693cfa844724b9638ba35ebadc295eb8ef1b3c/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6693cfa844724b9638ba35ebadc295eb8ef1b3c/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=e6693cfa844724b9638ba35ebadc295eb8ef1b3c", "patch": "@@ -3998,6 +3998,17 @@ extern tree build_var_debug_value_stat (tree, tree MEM_STAT_DECL);\n #define build_var_debug_value(t1,t2) \\\n   build_var_debug_value_stat (t1,t2 MEM_STAT_INFO)\n \n+/* Constructs double_int from tree CST.  */\n+\n+static inline double_int\n+tree_to_double_int (const_tree cst)\n+{\n+  return TREE_INT_CST (cst);\n+}\n+\n+extern tree double_int_to_tree (tree, double_int);\n+extern bool double_int_fits_to_tree_p (const_tree, double_int);\n+\n extern tree build_int_cst (tree, HOST_WIDE_INT);\n extern tree build_int_cst_type (tree, HOST_WIDE_INT);\n extern tree build_int_cstu (tree, unsigned HOST_WIDE_INT);"}]}