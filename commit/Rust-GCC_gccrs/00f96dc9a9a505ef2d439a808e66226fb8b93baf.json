{"sha": "00f96dc9a9a505ef2d439a808e66226fb8b93baf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDBmOTZkYzlhOWE1MDVlZjJkNDM5YTgwOGU2NjIyNmZiOGI5M2JhZg==", "commit": {"author": {"name": "Trevor Saunders", "email": "tsaunders@mozilla.com", "date": "2013-12-20T20:34:33Z"}, "committer": {"name": "Trevor Saunders", "email": "tbsaunde@gcc.gnu.org", "date": "2013-12-20T20:34:33Z"}, "message": "merge auto_vec and stack_vec\n\nFrom-SVN: r206155", "tree": {"sha": "965ba1d411c1f3138ea9281113343956529b5c03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/965ba1d411c1f3138ea9281113343956529b5c03"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/00f96dc9a9a505ef2d439a808e66226fb8b93baf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00f96dc9a9a505ef2d439a808e66226fb8b93baf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00f96dc9a9a505ef2d439a808e66226fb8b93baf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00f96dc9a9a505ef2d439a808e66226fb8b93baf/comments", "author": null, "committer": null, "parents": [{"sha": "ede34dfcebbfaded870a505d122557f2eff8c01a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ede34dfcebbfaded870a505d122557f2eff8c01a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ede34dfcebbfaded870a505d122557f2eff8c01a"}], "stats": {"total": 183, "additions": 105, "deletions": 78}, "files": [{"sha": "c6f01720c61a0d34214b0ad30ae5f0af5e9fc53c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f96dc9a9a505ef2d439a808e66226fb8b93baf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f96dc9a9a505ef2d439a808e66226fb8b93baf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=00f96dc9a9a505ef2d439a808e66226fb8b93baf", "patch": "@@ -1,3 +1,17 @@\n+2013-12-20  Trevor saunders  <tsaunders@mozilla.com>\n+\n+\t* vec.h (stack_vec): Convert to a templaate specialization of\n+\tauto_vec.\n+\t* config/i386/i386.c, df-scan.c, function.c, genautomata.c,\n+\tgimplify.c, graphite-clast-to-gimple.c, graphite-dependences.c,\n+\tgraphite-scop-detection.c, graphite-sese-to-poly.c, hw-doloop.c,\n+\ttrans-mem.c, tree-call-cdce.c, tree-data-ref.c, tree-dfa.c,\n+\ttree-if-conv.c, tree-inline.c, tree-loop-distribution.c,\n+\ttree-parloops.c, tree-predcom.c, tree-ssa-alias.c,\n+\ttree-ssa-loop-ivcanon.c, tree-ssa-phiopt.c, tree-ssa-threadedge.c,\n+\ttree-ssa-uncprop.c, tree-vect-loop.c, tree-vect-patterns.c,\n+\ttree-vect-slp.c, tree-vect-stmts.c, var-tracking.c: Adjust.\n+\n 2013-12-20  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* config/arm/arm.c (arm_expand_prologue): In a nested APCS frame with"}, {"sha": "8c5ee48dbf7a52331c2ebcf6f5f4b2bd647c6a06", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f96dc9a9a505ef2d439a808e66226fb8b93baf/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f96dc9a9a505ef2d439a808e66226fb8b93baf/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=00f96dc9a9a505ef2d439a808e66226fb8b93baf", "patch": "@@ -1,3 +1,8 @@\n+2013-12-20  Trevor saunders  <tsaunders@mozilla.com>\n+\n+\t* gcc-interface/decl.c (components_to_record): Replace stack_vec with\n+\tauto_vec.\n+\n 2013-12-12  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/Makefile.in (ARM linux, GNU eabi): Tweak regexp."}, {"sha": "ad129c6803c19f129efbbefbd18eadc00609e8d8", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f96dc9a9a505ef2d439a808e66226fb8b93baf/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f96dc9a9a505ef2d439a808e66226fb8b93baf/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=00f96dc9a9a505ef2d439a808e66226fb8b93baf", "patch": "@@ -7010,7 +7010,7 @@ components_to_record (tree gnu_record_type, Node_Id gnat_component_list,\n       tree gnu_union_type, gnu_union_name;\n       tree this_first_free_pos, gnu_variant_list = NULL_TREE;\n       bool union_field_needs_strict_alignment = false;\n-      stack_vec <vinfo_t, 16> variant_types;\n+      auto_vec <vinfo_t, 16> variant_types;\n       vinfo_t *gnu_variant;\n       unsigned int variants_align = 0;\n       unsigned int i;"}, {"sha": "0034d3338df2e779ce80fcd0d8ccf6fcb836c035", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f96dc9a9a505ef2d439a808e66226fb8b93baf/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f96dc9a9a505ef2d439a808e66226fb8b93baf/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=00f96dc9a9a505ef2d439a808e66226fb8b93baf", "patch": "@@ -30821,7 +30821,7 @@ ix86_generate_version_dispatcher_body (void *node_p)\n \n   push_cfun (DECL_STRUCT_FUNCTION (resolver_decl));\n \n-  stack_vec<tree, 2> fn_ver_vec;\n+  auto_vec<tree, 2> fn_ver_vec;\n \n   for (versn_info = node_version_info->next; versn_info;\n        versn_info = versn_info->next)"}, {"sha": "98022633e0f35847ae2fa88b9c09bd2d18a249b7", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f96dc9a9a505ef2d439a808e66226fb8b93baf/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f96dc9a9a505ef2d439a808e66226fb8b93baf/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=00f96dc9a9a505ef2d439a808e66226fb8b93baf", "patch": "@@ -1,3 +1,8 @@\n+2013-12-20  Trevor saunders  <tsaunders@mozilla.com>\n+\n+\t* semantics.c (build_anon_member_initialization): Replace\n+\tstack_vec<T, N> with auto_vec<T, N>.\n+\n 2013-12-18  Balaji V. Iyer  <balaji.v.iyer@intel.com>\n \n \t* parser.c (cp_parser_cilk_simd_clause_name): Changed cilk_clause_name"}, {"sha": "c08d53f48985b389705f1dca62ba8d0b082f836d", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f96dc9a9a505ef2d439a808e66226fb8b93baf/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f96dc9a9a505ef2d439a808e66226fb8b93baf/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=00f96dc9a9a505ef2d439a808e66226fb8b93baf", "patch": "@@ -7439,7 +7439,7 @@ build_anon_member_initialization (tree member, tree init,\n      to build up the initializer from the outside in so that we can reuse\n      previously built CONSTRUCTORs if this is, say, the second field in an\n      anonymous struct.  So we use a vec as a stack.  */\n-  stack_vec<tree, 2> fields;\n+  auto_vec<tree, 2> fields;\n   do\n     {\n       fields.safe_push (TREE_OPERAND (member, 1));"}, {"sha": "a7272ce88c58aa83d5970e05a4cb57383cb51091", "filename": "gcc/df-scan.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f96dc9a9a505ef2d439a808e66226fb8b93baf/gcc%2Fdf-scan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f96dc9a9a505ef2d439a808e66226fb8b93baf/gcc%2Fdf-scan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-scan.c?ref=00f96dc9a9a505ef2d439a808e66226fb8b93baf", "patch": "@@ -86,10 +86,10 @@ static HARD_REG_SET elim_reg_set;\n \n struct df_collection_rec\n {\n-  stack_vec<df_ref, 128> def_vec;\n-  stack_vec<df_ref, 32> use_vec;\n-  stack_vec<df_ref, 32> eq_use_vec;\n-  stack_vec<df_mw_hardreg_ptr, 32> mw_vec;\n+  auto_vec<df_ref, 128> def_vec;\n+  auto_vec<df_ref, 32> use_vec;\n+  auto_vec<df_ref, 32> eq_use_vec;\n+  auto_vec<df_mw_hardreg_ptr, 32> mw_vec;\n };\n \n static df_ref df_null_ref_rec[1];"}, {"sha": "13e98773eb6329df666eb324181d13f0fd3436de", "filename": "gcc/function.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f96dc9a9a505ef2d439a808e66226fb8b93baf/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f96dc9a9a505ef2d439a808e66226fb8b93baf/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=00f96dc9a9a505ef2d439a808e66226fb8b93baf", "patch": "@@ -4114,7 +4114,7 @@ reorder_blocks (void)\n   if (block == NULL_TREE)\n     return;\n \n-  stack_vec<tree, 10> block_stack;\n+  auto_vec<tree, 10> block_stack;\n \n   /* Reset the TREE_ASM_WRITTEN bit for all blocks.  */\n   clear_block_marks (block);"}, {"sha": "a66a21920a3653186fc7aad38efc2e32f783bd21", "filename": "gcc/genautomata.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f96dc9a9a505ef2d439a808e66226fb8b93baf/gcc%2Fgenautomata.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f96dc9a9a505ef2d439a808e66226fb8b93baf/gcc%2Fgenautomata.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenautomata.c?ref=00f96dc9a9a505ef2d439a808e66226fb8b93baf", "patch": "@@ -3349,7 +3349,7 @@ uniq_sort_alt_states (alt_state_t alt_states_list)\n   if (alt_states_list->next_alt_state == 0)\n     return alt_states_list;\n \n-  stack_vec<alt_state_t, 150> alt_states;\n+  auto_vec<alt_state_t, 150> alt_states;\n   for (curr_alt_state = alt_states_list;\n        curr_alt_state != NULL;\n        curr_alt_state = curr_alt_state->next_alt_state)\n@@ -5484,7 +5484,7 @@ form_ainsn_with_same_reservs (automaton_t automaton)\n {\n   ainsn_t curr_ainsn;\n   size_t i;\n-  stack_vec<ainsn_t, 150> last_insns;\n+  auto_vec<ainsn_t, 150> last_insns;\n \n   for (curr_ainsn = automaton->ainsn_list;\n        curr_ainsn != NULL;\n@@ -5555,7 +5555,7 @@ make_automaton (automaton_t automaton)\n   state_t state;\n   state_t start_state;\n   state_t state2;\n-  stack_vec<state_t, 150> state_stack;\n+  auto_vec<state_t, 150> state_stack;\n   int states_n;\n   reserv_sets_t reservs_matter = form_reservs_matter (automaton);\n "}, {"sha": "1ca4ad1bb33ca2e41dede662d32df3bfbde0b2da", "filename": "gcc/gimplify.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f96dc9a9a505ef2d439a808e66226fb8b93baf/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f96dc9a9a505ef2d439a808e66226fb8b93baf/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=00f96dc9a9a505ef2d439a808e66226fb8b93baf", "patch": "@@ -1846,7 +1846,7 @@ gimplify_compound_lval (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n \n   /* Create a stack of the subexpressions so later we can walk them in\n      order from inner to outer.  */\n-  stack_vec<tree, 10> expr_stack;\n+  auto_vec<tree, 10> expr_stack;\n \n   /* We can handle anything that get_inner_reference can deal with.  */\n   for (p = expr_p; ; p = &TREE_OPERAND (*p, 0))"}, {"sha": "2b9e743e730008891a1f14357dfdf01f9db7889c", "filename": "gcc/graphite-clast-to-gimple.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f96dc9a9a505ef2d439a808e66226fb8b93baf/gcc%2Fgraphite-clast-to-gimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f96dc9a9a505ef2d439a808e66226fb8b93baf/gcc%2Fgraphite-clast-to-gimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-clast-to-gimple.c?ref=00f96dc9a9a505ef2d439a808e66226fb8b93baf", "patch": "@@ -1659,7 +1659,7 @@ debug_generated_program (scop_p scop)\n bool\n gloog (scop_p scop, bb_pbb_htab_type bb_pbb_mapping)\n {\n-  stack_vec<tree, 10> newivs;\n+  auto_vec<tree, 10> newivs;\n   loop_p context_loop;\n   sese region = SCOP_REGION (scop);\n   ifsese if_region = NULL;"}, {"sha": "f16cb938b3dd658f2b1299100c69b990c23f9ae3", "filename": "gcc/graphite-dependences.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f96dc9a9a505ef2d439a808e66226fb8b93baf/gcc%2Fgraphite-dependences.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f96dc9a9a505ef2d439a808e66226fb8b93baf/gcc%2Fgraphite-dependences.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-dependences.c?ref=00f96dc9a9a505ef2d439a808e66226fb8b93baf", "patch": "@@ -593,7 +593,7 @@ loop_is_parallel_p (loop_p loop, bb_pbb_htab_type bb_pbb_mapping, int depth)\n   scop_p scop;\n \n   timevar_push (TV_GRAPHITE_DATA_DEPS);\n-  stack_vec<poly_bb_p, 3> body;\n+  auto_vec<poly_bb_p, 3> body;\n   scop = get_loop_body_pbbs (loop, bb_pbb_mapping, &body);\n   dependences = loop_level_carries_dependences (scop, body, depth);\n   timevar_pop (TV_GRAPHITE_DATA_DEPS);"}, {"sha": "0722ab8bbbff0e34ec004747525350f59326f084", "filename": "gcc/graphite-scop-detection.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f96dc9a9a505ef2d439a808e66226fb8b93baf/gcc%2Fgraphite-scop-detection.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f96dc9a9a505ef2d439a808e66226fb8b93baf/gcc%2Fgraphite-scop-detection.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-scop-detection.c?ref=00f96dc9a9a505ef2d439a808e66226fb8b93baf", "patch": "@@ -481,7 +481,7 @@ scopdet_basic_block_info (basic_block bb, loop_p outermost_loop,\n \n     case GBB_LOOP_SING_EXIT_HEADER:\n       {\n-\tstack_vec<sd_region, 3> regions;\n+\tauto_vec<sd_region, 3> regions;\n \tstruct scopdet_info sinfo;\n \tedge exit_e = single_exit (loop);\n \n@@ -546,7 +546,7 @@ scopdet_basic_block_info (basic_block bb, loop_p outermost_loop,\n       {\n         /* XXX: For now we just do not join loops with multiple exits.  If the\n            exits lead to the same bb it may be possible to join the loop.  */\n-        stack_vec<sd_region, 3> regions;\n+        auto_vec<sd_region, 3> regions;\n         vec<edge> exits = get_loop_exit_edges (loop);\n         edge e;\n         int i;\n@@ -589,7 +589,7 @@ scopdet_basic_block_info (basic_block bb, loop_p outermost_loop,\n       }\n     case GBB_COND_HEADER:\n       {\n-\tstack_vec<sd_region, 3> regions;\n+\tauto_vec<sd_region, 3> regions;\n \tstruct scopdet_info sinfo;\n \tvec<basic_block> dominated;\n \tint i;\n@@ -1192,7 +1192,7 @@ print_graphite_statistics (FILE* file, vec<scop_p> scops)\n static void\n limit_scops (vec<scop_p> *scops)\n {\n-  stack_vec<sd_region, 3> regions;\n+  auto_vec<sd_region, 3> regions;\n \n   int i;\n   scop_p scop;\n@@ -1404,7 +1404,7 @@ void\n build_scops (vec<scop_p> *scops)\n {\n   struct loop *loop = current_loops->tree_root;\n-  stack_vec<sd_region, 3> regions;\n+  auto_vec<sd_region, 3> regions;\n \n   canonicalize_loop_closed_ssa_form ();\n   build_scops_1 (single_succ (ENTRY_BLOCK_PTR_FOR_FN (cfun)),\n@@ -1595,7 +1595,7 @@ dot_all_scops (vec<scop_p> scops)\n DEBUG_FUNCTION void\n dot_scop (scop_p scop)\n {\n-  stack_vec<scop_p, 1> scops;\n+  auto_vec<scop_p, 1> scops;\n \n   if (scop)\n     scops.safe_push (scop);"}, {"sha": "1f54eb9816f8451243db95bc3841c8f7f89210b6", "filename": "gcc/graphite-sese-to-poly.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f96dc9a9a505ef2d439a808e66226fb8b93baf/gcc%2Fgraphite-sese-to-poly.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f96dc9a9a505ef2d439a808e66226fb8b93baf/gcc%2Fgraphite-sese-to-poly.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-sese-to-poly.c?ref=00f96dc9a9a505ef2d439a808e66226fb8b93baf", "patch": "@@ -1245,7 +1245,7 @@ class sese_dom_walker : public dom_walker\n   virtual void after_dom_children (basic_block);\n \n private:\n-  stack_vec<gimple, 3> m_conditions, m_cases;\n+  auto_vec<gimple, 3> m_conditions, m_cases;\n   sese m_region;\n };\n \n@@ -1890,7 +1890,7 @@ build_scop_drs (scop_p scop)\n   int i, j;\n   poly_bb_p pbb;\n   data_reference_p dr;\n-  stack_vec<data_reference_p, 3> drs;\n+  auto_vec<data_reference_p, 3> drs;\n \n   /* Remove all the PBBs that do not have data references: these basic\n      blocks are not handled in the polyhedral representation.  */\n@@ -1988,7 +1988,7 @@ insert_stmts (scop_p scop, gimple stmt, gimple_seq stmts,\n \t      gimple_stmt_iterator insert_gsi)\n {\n   gimple_stmt_iterator gsi;\n-  stack_vec<gimple, 3> x;\n+  auto_vec<gimple, 3> x;\n \n   gimple_seq_add_stmt (&stmts, stmt);\n   for (gsi = gsi_start (stmts); !gsi_end_p (gsi); gsi_next (&gsi))\n@@ -2007,7 +2007,7 @@ insert_out_of_ssa_copy (scop_p scop, tree res, tree expr, gimple after_stmt)\n   gimple_stmt_iterator gsi;\n   tree var = force_gimple_operand (expr, &stmts, true, NULL_TREE);\n   gimple stmt = gimple_build_assign (unshare_expr (res), var);\n-  stack_vec<gimple, 3> x;\n+  auto_vec<gimple, 3> x;\n \n   gimple_seq_add_stmt (&stmts, stmt);\n   for (gsi = gsi_start (stmts); !gsi_end_p (gsi); gsi_next (&gsi))\n@@ -2062,7 +2062,7 @@ insert_out_of_ssa_copy_on_edge (scop_p scop, edge e, tree res, tree expr)\n   tree var = force_gimple_operand (expr, &stmts, true, NULL_TREE);\n   gimple stmt = gimple_build_assign (unshare_expr (res), var);\n   basic_block bb;\n-  stack_vec<gimple, 3> x;\n+  auto_vec<gimple, 3> x;\n \n   gimple_seq_add_stmt (&stmts, stmt);\n   for (gsi = gsi_start (stmts); !gsi_end_p (gsi); gsi_next (&gsi))\n@@ -2870,7 +2870,7 @@ remove_phi (gimple phi)\n   tree def;\n   use_operand_p use_p;\n   gimple_stmt_iterator gsi;\n-  stack_vec<gimple, 3> update;\n+  auto_vec<gimple, 3> update;\n   unsigned int i;\n   gimple stmt;\n \n@@ -3028,8 +3028,8 @@ rewrite_commutative_reductions_out_of_ssa_close_phi (scop_p scop,\n \t\t\t\t\t\t     gimple close_phi)\n {\n   bool res;\n-  stack_vec<gimple, 10> in;\n-  stack_vec<gimple, 10> out;\n+  auto_vec<gimple, 10> in;\n+  auto_vec<gimple, 10> out;\n \n   detect_commutative_reduction (scop, close_phi, &in, &out);\n   res = in.length () > 1;"}, {"sha": "4e67760cb8b5b39e44ca437ece21cdcfd9081e82", "filename": "gcc/hw-doloop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f96dc9a9a505ef2d439a808e66226fb8b93baf/gcc%2Fhw-doloop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f96dc9a9a505ef2d439a808e66226fb8b93baf/gcc%2Fhw-doloop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhw-doloop.c?ref=00f96dc9a9a505ef2d439a808e66226fb8b93baf", "patch": "@@ -252,7 +252,7 @@ discover_loop (hwloop_info loop, basic_block tail_bb, rtx tail_insn, rtx reg)\n   loop->head = BRANCH_EDGE (tail_bb)->dest;\n   loop->successor = FALLTHRU_EDGE (tail_bb)->dest;\n \n-  stack_vec<basic_block, 20> works;\n+  auto_vec<basic_block, 20> works;\n   works.safe_push (loop->head);\n \n   found_tail = false;"}, {"sha": "941035bc0ba1788bf6dde9d2c815a8c70ed4f9ec", "filename": "gcc/trans-mem.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f96dc9a9a505ef2d439a808e66226fb8b93baf/gcc%2Ftrans-mem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f96dc9a9a505ef2d439a808e66226fb8b93baf/gcc%2Ftrans-mem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftrans-mem.c?ref=00f96dc9a9a505ef2d439a808e66226fb8b93baf", "patch": "@@ -4532,7 +4532,7 @@ ipa_tm_scan_irr_function (struct cgraph_node *node, bool for_clone)\n   calculate_dominance_info (CDI_DOMINATORS);\n \n   d = get_cg_data (&node, true);\n-  stack_vec<basic_block, 10> queue;\n+  auto_vec<basic_block, 10> queue;\n   new_irr = BITMAP_ALLOC (&tm_obstack);\n \n   /* Scan each tm region, propagating irrevocable status through the tree.  */"}, {"sha": "5e59cad9958fb9acbab768ceaead5aaf3f731230", "filename": "gcc/tree-call-cdce.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f96dc9a9a505ef2d439a808e66226fb8b93baf/gcc%2Ftree-call-cdce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f96dc9a9a505ef2d439a808e66226fb8b93baf/gcc%2Ftree-call-cdce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-call-cdce.c?ref=00f96dc9a9a505ef2d439a808e66226fb8b93baf", "patch": "@@ -727,7 +727,7 @@ shrink_wrap_one_built_in_call (gimple bi_call)\n   tree bi_call_label_decl;\n   gimple bi_call_label;\n \n-  stack_vec<gimple, 12> conds;\n+  auto_vec<gimple, 12> conds;\n   gen_shrink_wrap_conditions (bi_call, conds, &nconds);\n \n   /* This can happen if the condition generator decides"}, {"sha": "03060201649dac8704e0e77ab2fe97d50d73daa1", "filename": "gcc/tree-data-ref.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f96dc9a9a505ef2d439a808e66226fb8b93baf/gcc%2Ftree-data-ref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f96dc9a9a505ef2d439a808e66226fb8b93baf/gcc%2Ftree-data-ref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.c?ref=00f96dc9a9a505ef2d439a808e66226fb8b93baf", "patch": "@@ -4453,7 +4453,7 @@ find_data_references_in_stmt (struct loop *nest, gimple stmt,\n \t\t\t      vec<data_reference_p> *datarefs)\n {\n   unsigned i;\n-  stack_vec<data_ref_loc, 2> references;\n+  auto_vec<data_ref_loc, 2> references;\n   data_ref_loc *ref;\n   bool ret = true;\n   data_reference_p dr;\n@@ -4483,7 +4483,7 @@ graphite_find_data_references_in_stmt (loop_p nest, loop_p loop, gimple stmt,\n \t\t\t\t       vec<data_reference_p> *datarefs)\n {\n   unsigned i;\n-  stack_vec<data_ref_loc, 2> references;\n+  auto_vec<data_ref_loc, 2> references;\n   data_ref_loc *ref;\n   bool ret = true;\n   data_reference_p dr;"}, {"sha": "e014a719e5abd77227d790bf8f1036a1125a415c", "filename": "gcc/tree-dfa.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f96dc9a9a505ef2d439a808e66226fb8b93baf/gcc%2Ftree-dfa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f96dc9a9a505ef2d439a808e66226fb8b93baf/gcc%2Ftree-dfa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dfa.c?ref=00f96dc9a9a505ef2d439a808e66226fb8b93baf", "patch": "@@ -737,7 +737,7 @@ dump_enumerated_decls (FILE *file, int flags)\n {\n   basic_block bb;\n   struct walk_stmt_info wi;\n-  stack_vec<numbered_tree, 40> decl_list;\n+  auto_vec<numbered_tree, 40> decl_list;\n \n   memset (&wi, '\\0', sizeof (wi));\n   wi.info = (void *) &decl_list;"}, {"sha": "283f476be220e3e5a0384329e8497b308de154b4", "filename": "gcc/tree-if-conv.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f96dc9a9a505ef2d439a808e66226fb8b93baf/gcc%2Ftree-if-conv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f96dc9a9a505ef2d439a808e66226fb8b93baf/gcc%2Ftree-if-conv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-if-conv.c?ref=00f96dc9a9a505ef2d439a808e66226fb8b93baf", "patch": "@@ -1314,7 +1314,7 @@ if_convertible_loop_p (struct loop *loop, bool *any_mask_load_store)\n \n   refs.create (5);\n   ddrs.create (25);\n-  stack_vec<loop_p, 3> loop_nest;\n+  auto_vec<loop_p, 3> loop_nest;\n   res = if_convertible_loop_p_1 (loop, &loop_nest, &refs, &ddrs,\n \t\t\t\t any_mask_load_store);\n "}, {"sha": "4f14e5e10b0919011ef9b217423a5648c8996af8", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f96dc9a9a505ef2d439a808e66226fb8b93baf/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f96dc9a9a505ef2d439a808e66226fb8b93baf/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=00f96dc9a9a505ef2d439a808e66226fb8b93baf", "patch": "@@ -5240,7 +5240,7 @@ tree_function_versioning (tree old_decl, tree new_decl,\n   unsigned i;\n   struct ipa_replace_map *replace_info;\n   basic_block old_entry_block, bb;\n-  stack_vec<gimple, 10> init_stmts;\n+  auto_vec<gimple, 10> init_stmts;\n   tree vars = NULL_TREE;\n \n   gcc_assert (TREE_CODE (old_decl) == FUNCTION_DECL"}, {"sha": "c536162b5f9a0d257a63af0e5b00497022732775", "filename": "gcc/tree-loop-distribution.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f96dc9a9a505ef2d439a808e66226fb8b93baf/gcc%2Ftree-loop-distribution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f96dc9a9a505ef2d439a808e66226fb8b93baf/gcc%2Ftree-loop-distribution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-loop-distribution.c?ref=00f96dc9a9a505ef2d439a808e66226fb8b93baf", "patch": "@@ -448,7 +448,7 @@ build_rdg (vec<loop_p> loop_nest, control_dependences *cd)\n   vec<data_reference_p> datarefs;\n \n   /* Create the RDG vertices from the stmts of the loop nest.  */\n-  stack_vec<gimple, 10> stmts;\n+  auto_vec<gimple, 10> stmts;\n   stmts_from_loop (loop_nest[0], &stmts);\n   rdg = new_graph (stmts.length ());\n   datarefs.create (10);\n@@ -964,7 +964,7 @@ static partition_t\n build_rdg_partition_for_vertex (struct graph *rdg, int v)\n {\n   partition_t partition = partition_alloc (NULL, NULL);\n-  stack_vec<int, 3> nodes;\n+  auto_vec<int, 3> nodes;\n   unsigned i;\n   int x;\n \n@@ -1418,7 +1418,7 @@ distribute_loop (struct loop *loop, vec<gimple> stmts,\n   int num_sccs = 1;\n \n   *nb_calls = 0;\n-  stack_vec<loop_p, 3> loop_nest;\n+  auto_vec<loop_p, 3> loop_nest;\n   if (!find_loop_nest (loop, &loop_nest))\n     return 0;\n \n@@ -1436,7 +1436,7 @@ distribute_loop (struct loop *loop, vec<gimple> stmts,\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     dump_rdg (dump_file, rdg);\n \n-  stack_vec<partition_t, 3> partitions;\n+  auto_vec<partition_t, 3> partitions;\n   rdg_build_partitions (rdg, stmts, &partitions);\n \n   any_builtin = false;"}, {"sha": "368a05e444119748515a2212f483b0d7f8103d19", "filename": "gcc/tree-parloops.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f96dc9a9a505ef2d439a808e66226fb8b93baf/gcc%2Ftree-parloops.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f96dc9a9a505ef2d439a808e66226fb8b93baf/gcc%2Ftree-parloops.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-parloops.c?ref=00f96dc9a9a505ef2d439a808e66226fb8b93baf", "patch": "@@ -424,7 +424,7 @@ loop_parallel_p (struct loop *loop, struct obstack * parloop_obstack)\n \n   /* Check for problems with dependences.  If the loop can be reversed,\n      the iterations are independent.  */\n-  stack_vec<loop_p, 3> loop_nest;\n+  auto_vec<loop_p, 3> loop_nest;\n   datarefs.create (10);\n   dependence_relations.create (100);\n   if (! compute_data_dependences_for_loop (loop, true, &loop_nest, &datarefs,\n@@ -752,7 +752,7 @@ static void\n eliminate_local_variables (edge entry, edge exit)\n {\n   basic_block bb;\n-  stack_vec<basic_block, 3> body;\n+  auto_vec<basic_block, 3> body;\n   unsigned i;\n   gimple_stmt_iterator gsi;\n   bool has_debug_stmt = false;\n@@ -1303,7 +1303,7 @@ separate_decls_in_region (edge entry, edge exit,\n   tree type, type_name, nvar;\n   gimple_stmt_iterator gsi;\n   struct clsn_data clsn_data;\n-  stack_vec<basic_block, 3> body;\n+  auto_vec<basic_block, 3> body;\n   basic_block bb;\n   basic_block entry_bb = bb1;\n   basic_block exit_bb = exit->dest;"}, {"sha": "4814281fd334454269bb5e0ee99ce18749d2c456", "filename": "gcc/tree-predcom.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f96dc9a9a505ef2d439a808e66226fb8b93baf/gcc%2Ftree-predcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f96dc9a9a505ef2d439a808e66226fb8b93baf/gcc%2Ftree-predcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-predcom.c?ref=00f96dc9a9a505ef2d439a808e66226fb8b93baf", "patch": "@@ -2398,7 +2398,7 @@ tree_predictive_commoning_loop (struct loop *loop)\n \n   /* Find the data references and split them into components according to their\n      dependence relations.  */\n-  stack_vec<loop_p, 3> loop_nest;\n+  auto_vec<loop_p, 3> loop_nest;\n   dependences.create (10);\n   datarefs.create (10);\n   if (! compute_data_dependences_for_loop (loop, true, &loop_nest, &datarefs,"}, {"sha": "0fb4c447ab01ad77ab652c10c7721f11f8f9b21c", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f96dc9a9a505ef2d439a808e66226fb8b93baf/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f96dc9a9a505ef2d439a808e66226fb8b93baf/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=00f96dc9a9a505ef2d439a808e66226fb8b93baf", "patch": "@@ -768,8 +768,8 @@ aliasing_component_refs_p (tree ref1,\n static bool\n nonoverlapping_component_refs_of_decl_p (tree ref1, tree ref2)\n {\n-  stack_vec<tree, 16> component_refs1;\n-  stack_vec<tree, 16> component_refs2;\n+  auto_vec<tree, 16> component_refs1;\n+  auto_vec<tree, 16> component_refs2;\n \n   /* Create the stack of handled components for REF1.  */\n   while (handled_component_p (ref1))"}, {"sha": "2533971864af3fff740e8ad0bc01824f6732aa08", "filename": "gcc/tree-ssa-loop-ivcanon.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f96dc9a9a505ef2d439a808e66226fb8b93baf/gcc%2Ftree-ssa-loop-ivcanon.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f96dc9a9a505ef2d439a808e66226fb8b93baf/gcc%2Ftree-ssa-loop-ivcanon.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivcanon.c?ref=00f96dc9a9a505ef2d439a808e66226fb8b93baf", "patch": "@@ -1171,7 +1171,7 @@ tree_unroll_loops_completely_1 (bool may_increase_size, bool unroll_outer,\n unsigned int\n tree_unroll_loops_completely (bool may_increase_size, bool unroll_outer)\n {\n-  stack_vec<loop_p, 16> father_stack;\n+  auto_vec<loop_p, 16> father_stack;\n   bool changed;\n   int iteration = 0;\n   bool irred_invalidated = false;"}, {"sha": "390258f666bea14511069c9903f125a473a6811f", "filename": "gcc/tree-ssa-phiopt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f96dc9a9a505ef2d439a808e66226fb8b93baf/gcc%2Ftree-ssa-phiopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f96dc9a9a505ef2d439a808e66226fb8b93baf/gcc%2Ftree-ssa-phiopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiopt.c?ref=00f96dc9a9a505ef2d439a808e66226fb8b93baf", "patch": "@@ -1874,7 +1874,7 @@ cond_if_else_store_replacement (basic_block then_bb, basic_block else_bb,\n     }\n \n   /* Find pairs of stores with equal LHS.  */\n-  stack_vec<gimple, 1> then_stores, else_stores;\n+  auto_vec<gimple, 1> then_stores, else_stores;\n   FOR_EACH_VEC_ELT (then_datarefs, i, then_dr)\n     {\n       if (DR_IS_READ (then_dr))"}, {"sha": "e2eb471cb4890f0404f8277e590ab17726ab6d2b", "filename": "gcc/tree-ssa-threadedge.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f96dc9a9a505ef2d439a808e66226fb8b93baf/gcc%2Ftree-ssa-threadedge.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f96dc9a9a505ef2d439a808e66226fb8b93baf/gcc%2Ftree-ssa-threadedge.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadedge.c?ref=00f96dc9a9a505ef2d439a808e66226fb8b93baf", "patch": "@@ -690,7 +690,7 @@ propagate_threaded_block_debug_into (basic_block dest, basic_block src)\n       i++;\n     }\n \n-  stack_vec<tree, alloc_count> fewvars;\n+  auto_vec<tree, alloc_count> fewvars;\n   pointer_set_t *vars = NULL;\n \n   /* If we're already starting with 3/4 of alloc_count, go for a"}, {"sha": "6318ec1911db391527d6c76b6df4075f86d4c1a9", "filename": "gcc/tree-ssa-uncprop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f96dc9a9a505ef2d439a808e66226fb8b93baf/gcc%2Ftree-ssa-uncprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f96dc9a9a505ef2d439a808e66226fb8b93baf/gcc%2Ftree-ssa-uncprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-uncprop.c?ref=00f96dc9a9a505ef2d439a808e66226fb8b93baf", "patch": "@@ -380,7 +380,7 @@ class uncprop_dom_walker : public dom_walker\n      leading to this block.  If no such edge equivalency exists, then we\n      record NULL.  These equivalences are live until we leave the dominator\n      subtree rooted at the block where we record the equivalency.  */\n-  stack_vec<tree, 2> m_equiv_stack;\n+  auto_vec<tree, 2> m_equiv_stack;\n };\n \n /* Main driver for un-cprop.  */"}, {"sha": "d13b1df85f9181b59590c1c582897a6bbf668186", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f96dc9a9a505ef2d439a808e66226fb8b93baf/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f96dc9a9a505ef2d439a808e66226fb8b93baf/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=00f96dc9a9a505ef2d439a808e66226fb8b93baf", "patch": "@@ -621,7 +621,7 @@ vect_analyze_scalar_cycles_1 (loop_vec_info loop_vinfo, struct loop *loop)\n {\n   basic_block bb = loop->header;\n   tree init, step;\n-  stack_vec<gimple, 64> worklist;\n+  auto_vec<gimple, 64> worklist;\n   gimple_stmt_iterator gsi;\n   bool double_reduc;\n "}, {"sha": "d1f8123c7a5374fbb9d8cc540cf7af80b8db5ed0", "filename": "gcc/tree-vect-patterns.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f96dc9a9a505ef2d439a808e66226fb8b93baf/gcc%2Ftree-vect-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f96dc9a9a505ef2d439a808e66226fb8b93baf/gcc%2Ftree-vect-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.c?ref=00f96dc9a9a505ef2d439a808e66226fb8b93baf", "patch": "@@ -3213,7 +3213,7 @@ vect_pattern_recog (loop_vec_info loop_vinfo, bb_vec_info bb_vinfo)\n   gimple_stmt_iterator si;\n   unsigned int i, j;\n   vect_recog_func_ptr vect_recog_func;\n-  stack_vec<gimple, 1> stmts_to_replace;\n+  auto_vec<gimple, 1> stmts_to_replace;\n   gimple stmt;\n \n   if (dump_enabled_p ())"}, {"sha": "d1e179651657a715ea0c4b392f822bb5e0bb0bc5", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f96dc9a9a505ef2d439a808e66226fb8b93baf/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f96dc9a9a505ef2d439a808e66226fb8b93baf/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=00f96dc9a9a505ef2d439a808e66226fb8b93baf", "patch": "@@ -2029,7 +2029,7 @@ vect_bb_vectorization_profitable_p (bb_vec_info bb_vinfo)\n   /* Calculate scalar cost.  */\n   FOR_EACH_VEC_ELT (slp_instances, i, instance)\n     {\n-      stack_vec<bool, 20> life;\n+      auto_vec<bool, 20> life;\n       life.safe_grow_cleared (SLP_INSTANCE_GROUP_SIZE (instance));\n       scalar_cost += vect_bb_slp_scalar_cost (BB_VINFO_BB (bb_vinfo),\n \t\t\t\t\t      SLP_INSTANCE_TREE (instance),"}, {"sha": "18cf5630ca2ac5039efd5a94f2b628da03ad3313", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f96dc9a9a505ef2d439a808e66226fb8b93baf/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f96dc9a9a505ef2d439a808e66226fb8b93baf/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=00f96dc9a9a505ef2d439a808e66226fb8b93baf", "patch": "@@ -629,7 +629,7 @@ vect_mark_stmts_to_be_vectorized (loop_vec_info loop_vinfo)\n     dump_printf_loc (MSG_NOTE, vect_location,\n                      \"=== vect_mark_stmts_to_be_vectorized ===\\n\");\n \n-  stack_vec<gimple, 64> worklist;\n+  auto_vec<gimple, 64> worklist;\n \n   /* 1. Init worklist.  */\n   for (i = 0; i < nbbs; i++)\n@@ -6605,8 +6605,8 @@ vectorizable_condition (gimple stmt, gimple_stmt_iterator *gsi,\n \t{\n           if (slp_node)\n             {\n-              stack_vec<tree, 4> ops;\n-\t      stack_vec<vec<tree>, 4> vec_defs;\n+              auto_vec<tree, 4> ops;\n+\t      auto_vec<vec<tree>, 4> vec_defs;\n \n               ops.safe_push (TREE_OPERAND (cond_expr, 0));\n               ops.safe_push (TREE_OPERAND (cond_expr, 1));"}, {"sha": "b0d7922ce823e6dff0c094c55c8a8983cef1f45b", "filename": "gcc/var-tracking.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f96dc9a9a505ef2d439a808e66226fb8b93baf/gcc%2Fvar-tracking.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f96dc9a9a505ef2d439a808e66226fb8b93baf/gcc%2Fvar-tracking.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvar-tracking.c?ref=00f96dc9a9a505ef2d439a808e66226fb8b93baf", "patch": "@@ -7931,15 +7931,15 @@ struct expand_loc_callback_data\n \n   /* Stack of values and debug_exprs under expansion, and their\n      children.  */\n-  stack_vec<rtx, 4> expanding;\n+  auto_vec<rtx, 4> expanding;\n \n   /* Stack of values and debug_exprs whose expansion hit recursion\n      cycles.  They will have VALUE_RECURSED_INTO marked when added to\n      this list.  This flag will be cleared if any of its dependencies\n      resolves to a valid location.  So, if the flag remains set at the\n      end of the search, we know no valid location for this one can\n      possibly exist.  */\n-  stack_vec<rtx, 4> pending;\n+  auto_vec<rtx, 4> pending;\n \n   /* The maximum depth among the sub-expressions under expansion.\n      Zero indicates no expansion so far.  */\n@@ -8886,7 +8886,7 @@ process_changed_values (variable_table_type htab)\n {\n   int i, n;\n   rtx val;\n-  stack_vec<rtx, 20> changed_values_stack;\n+  auto_vec<rtx, 20> changed_values_stack;\n \n   /* Move values from changed_variables to changed_values_stack.  */\n   changed_variables"}, {"sha": "afde351a79650a8746b93f16883c585836bfc758", "filename": "gcc/vec.h", "status": "modified", "additions": 22, "deletions": 19, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f96dc9a9a505ef2d439a808e66226fb8b93baf/gcc%2Fvec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f96dc9a9a505ef2d439a808e66226fb8b93baf/gcc%2Fvec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvec.h?ref=00f96dc9a9a505ef2d439a808e66226fb8b93baf", "patch": "@@ -1184,33 +1184,25 @@ struct vec<T, va_heap, vl_ptr>\n };\n \n \n-/* auto_vec is a sub class of vec whose storage is released when it is\n-  destroyed. */\n-template<typename T>\n+/* auto_vec is a subclass of vec that automatically manages creating and\n+   releasing the internal vector. If N is non zero then it has N elements of\n+   internal storage.  The default is no internal storage, and you probably only\n+   want to ask for internal storage for vectors on the stack because if the\n+   size of the vector is larger than the internal storage that space is wasted.\n+   */\n+template<typename T, size_t N = 0>\n class auto_vec : public vec<T, va_heap>\n {\n public:\n-  auto_vec () { this->m_vec = NULL; }\n-  auto_vec (size_t n) { this->create (n); }\n-  ~auto_vec () { this->release (); }\n-};\n-\n-/* stack_vec is a subclass of vec containing N elements of internal storage.\n-  You probably only want to allocate this on the stack because if the array\n-  ends up being larger or much smaller than N it will be wasting space. */\n-template<typename T, size_t N>\n-class stack_vec : public vec<T, va_heap>\n-{\n-public:\n-  stack_vec ()\n+  auto_vec ()\n   {\n     m_header.m_alloc = N;\n     m_header.m_has_auto_buf = 1;\n     m_header.m_num = 0;\n     this->m_vec = reinterpret_cast<vec<T, va_heap, vl_embed> *> (&m_header);\n   }\n \n-  ~stack_vec ()\n+  ~auto_vec ()\n   {\n     this->release ();\n   }\n@@ -1222,6 +1214,17 @@ class stack_vec : public vec<T, va_heap>\n   T m_data[N];\n };\n \n+/* auto_vec is a sub class of vec whose storage is released when it is\n+  destroyed. */\n+template<typename T>\n+class auto_vec<T, 0> : public vec<T, va_heap>\n+{\n+public:\n+  auto_vec () { this->m_vec = NULL; }\n+  auto_vec (size_t n) { this->create (n); }\n+  ~auto_vec () { this->release (); }\n+};\n+\n \n /* Allocate heap memory for pointer V and create the internal vector\n    with space for NELEMS elements.  If NELEMS is 0, the internal\n@@ -1421,7 +1424,7 @@ vec<T, va_heap, vl_ptr>::release (void)\n \n   if (using_auto_storage ())\n     {\n-      static_cast<stack_vec<T, 1> *> (this)->m_header.m_num = 0;\n+      static_cast<auto_vec<T, 1> *> (this)->m_header.m_num = 0;\n       return;\n     }\n \n@@ -1654,7 +1657,7 @@ vec<T, va_heap, vl_ptr>::using_auto_storage () const\n     return false;\n \n   const vec_prefix *auto_header\n-    = &static_cast<const stack_vec<T, 1> *> (this)->m_header;\n+    = &static_cast<const auto_vec<T, 1> *> (this)->m_header;\n   return reinterpret_cast<vec_prefix *> (m_vec) == auto_header;\n }\n "}]}