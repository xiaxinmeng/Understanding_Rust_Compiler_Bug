{"sha": "373d1f5f055ee378e8e773df331da85d0cffc89b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzczZDFmNWYwNTVlZTM3OGU4ZTc3M2RmMzMxZGE4NWQwY2ZmYzg5Yg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2018-01-26T15:25:23Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2018-01-26T15:25:23Z"}, "message": "PR c++/82514 - ICE with local class in generic lambda.\n\n\t* pt.c (regenerated_lambda_fn_p): Remove.\n\t(enclosing_instantiation_of): Don't use it.\n\t(tsubst_function_decl): Call enclosing_instantiation_of.\n\n\t* pt.c (lookup_template_class_1): Add sanity check.\n\t* name-lookup.c (do_pushtag): Don't add closures to local_classes.\n\nFrom-SVN: r257093", "tree": {"sha": "35664820e2bc902f230321fc05bccf7a4ba9a335", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/35664820e2bc902f230321fc05bccf7a4ba9a335"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/373d1f5f055ee378e8e773df331da85d0cffc89b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/373d1f5f055ee378e8e773df331da85d0cffc89b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/373d1f5f055ee378e8e773df331da85d0cffc89b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/373d1f5f055ee378e8e773df331da85d0cffc89b/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a9ea161d628b73aafc07960797031c3b66ccfe9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9ea161d628b73aafc07960797031c3b66ccfe9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9ea161d628b73aafc07960797031c3b66ccfe9c"}], "stats": {"total": 73, "additions": 50, "deletions": 23}, "files": [{"sha": "fd3ff717403d0cb7c6a3516789631e4007863965", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/373d1f5f055ee378e8e773df331da85d0cffc89b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/373d1f5f055ee378e8e773df331da85d0cffc89b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=373d1f5f055ee378e8e773df331da85d0cffc89b", "patch": "@@ -1,3 +1,13 @@\n+2018-01-26  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/82514 - ICE with local class in generic lambda.\n+\t* pt.c (regenerated_lambda_fn_p): Remove.\n+\t(enclosing_instantiation_of): Don't use it.\n+\t(tsubst_function_decl): Call enclosing_instantiation_of.\n+\n+\t* pt.c (lookup_template_class_1): Add sanity check.\n+\t* name-lookup.c (do_pushtag): Don't add closures to local_classes.\n+\n 2018-01-25  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/84031"}, {"sha": "d0488c0a17e96dad7728c423bdc343253923c12b", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/373d1f5f055ee378e8e773df331da85d0cffc89b/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/373d1f5f055ee378e8e773df331da85d0cffc89b/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=373d1f5f055ee378e8e773df331da85d0cffc89b", "patch": "@@ -6451,7 +6451,8 @@ do_pushtag (tree name, tree type, tag_scope scope)\n \t\t template instantiation rather than in some nested context.  */\n \t      add_decl_expr (decl);\n \t    }\n-\t  else\n+\t  /* Lambdas use LAMBDA_EXPR_DISCRIMINATOR instead.  */\n+\t  else if (!LAMBDA_TYPE_P (type))\n \t    vec_safe_push (local_classes, type);\n \t}\n     }"}, {"sha": "de8ad94200a81061997a7376a2506a06cb5e2965", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 25, "deletions": 22, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/373d1f5f055ee378e8e773df331da85d0cffc89b/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/373d1f5f055ee378e8e773df331da85d0cffc89b/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=373d1f5f055ee378e8e773df331da85d0cffc89b", "patch": "@@ -222,6 +222,7 @@ static tree tsubst_attributes (tree, tree, tsubst_flags_t, tree);\n static tree canonicalize_expr_argument (tree, tsubst_flags_t);\n static tree make_argument_pack (tree);\n static void register_parameter_specializations (tree, tree);\n+static tree enclosing_instantiation_of (tree tctx);\n \n /* Make the current scope suitable for access checking when we are\n    processing T.  T can be FUNCTION_DECL for instantiated function\n@@ -8951,6 +8952,10 @@ lookup_template_class_1 (tree d1, tree arglist, tree in_decl, tree context,\n \t}\n       else if (CLASS_TYPE_P (template_type))\n \t{\n+\t  /* Lambda closures are regenerated in tsubst_lambda_expr, not\n+\t     instantiated here.  */\n+\t  gcc_assert (!LAMBDA_TYPE_P (template_type));\n+\n \t  t = make_class_type (TREE_CODE (template_type));\n \t  CLASSTYPE_DECLARED_CLASS (t)\n \t    = CLASSTYPE_DECLARED_CLASS (template_type);\n@@ -12183,9 +12188,20 @@ tsubst_function_decl (tree t, tree args, tsubst_flags_t complain,\n \treturn t;\n \n       /* Calculate the most general template of which R is a\n-\t specialization, and the complete set of arguments used to\n-\t specialize R.  */\n+\t specialization.  */\n       gen_tmpl = most_general_template (DECL_TI_TEMPLATE (t));\n+\n+      /* We're substituting a lambda function under tsubst_lambda_expr but not\n+\t directly from it; find the matching function we're already inside.\n+\t But don't do this if T is a generic lambda with a single level of\n+\t template parms, as in that case we're doing a normal instantiation. */\n+      if (LAMBDA_FUNCTION_P (t) && !lambda_fntype\n+\t  && (!generic_lambda_fn_p (t)\n+\t      || TMPL_PARMS_DEPTH (DECL_TEMPLATE_PARMS (gen_tmpl)) > 1))\n+\treturn enclosing_instantiation_of (t);\n+\n+      /* Calculate the complete set of arguments used to\n+\t specialize R.  */\n       argvec = tsubst_template_args (DECL_TI_ARGS\n \t\t\t\t     (DECL_TEMPLATE_RESULT\n \t\t\t\t      (DECL_TI_TEMPLATE (t))),\n@@ -12609,24 +12625,15 @@ lambda_fn_in_template_p (tree fn)\n   return CLASSTYPE_TEMPLATE_INFO (closure) != NULL_TREE;\n }\n \n-/* True if FN is the op() for a lambda regenerated from a lambda in an\n-   uninstantiated template.  */\n-\n-bool\n-regenerated_lambda_fn_p (tree fn)\n-{\n-  return (LAMBDA_FUNCTION_P (fn)\n-\t  && !DECL_TEMPLATE_INSTANTIATION (fn));\n-}\n-\n /* We're instantiating a variable from template function TCTX.  Return the\n    corresponding current enclosing scope.  This gets complicated because lambda\n    functions in templates are regenerated rather than instantiated, but generic\n    lambda functions are subsequently instantiated.  */\n \n static tree\n-enclosing_instantiation_of (tree tctx)\n+enclosing_instantiation_of (tree otctx)\n {\n+  tree tctx = otctx;\n   tree fn = current_function_decl;\n   int lambda_count = 0;\n \n@@ -12635,22 +12642,18 @@ enclosing_instantiation_of (tree tctx)\n     ++lambda_count;\n   for (; fn; fn = decl_function_context (fn))\n     {\n-      tree lambda = fn;\n+      tree ofn = fn;\n       int flambda_count = 0;\n-      for (; fn && regenerated_lambda_fn_p (fn);\n+      for (; flambda_count < lambda_count && fn && LAMBDA_FUNCTION_P (fn);\n \t   fn = decl_function_context (fn))\n \t++flambda_count;\n       if (DECL_TEMPLATE_INFO (fn)\n \t  ? most_general_template (fn) != most_general_template (tctx)\n \t  : fn != tctx)\n \tcontinue;\n-      if (lambda_count)\n-\t{\n-\t  fn = lambda;\n-\t  while (flambda_count-- > lambda_count)\n-\t    fn = decl_function_context (fn);\n-\t}\n-      return fn;\n+      gcc_assert (DECL_NAME (ofn) == DECL_NAME (otctx)\n+\t\t  || DECL_CONV_FN_P (ofn));\n+      return ofn;\n     }\n   gcc_unreachable ();\n }"}, {"sha": "3dbc5b3085a0ebbaef8feeb62dc32de978695990", "filename": "gcc/testsuite/g++.dg/cpp1y/lambda-generic-nested2.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/373d1f5f055ee378e8e773df331da85d0cffc89b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-nested2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/373d1f5f055ee378e8e773df331da85d0cffc89b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-nested2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-nested2.C?ref=373d1f5f055ee378e8e773df331da85d0cffc89b", "patch": "@@ -0,0 +1,13 @@\n+// PR c++/82514\n+// { dg-do compile { target c++14 } }\n+\n+void g();\n+template <typename h> void i(h) { g(); }\n+template <int> void n() {\n+  [](auto) {\n+    struct p { };\n+    i(p{});\n+  } ('\\n');\n+}\n+\n+auto f = n<1>;"}]}