{"sha": "6f5b4f3e5ae86e31fd507ff4d0f986e58febb829", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmY1YjRmM2U1YWU4NmUzMWZkNTA3ZmY0ZDBmOTg2ZTU4ZmViYjgyOQ==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2004-02-25T17:03:27Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2004-02-25T17:03:27Z"}, "message": "arm.c (thumb_legitimize_address): New function.\n\n* arm.c (thumb_legitimize_address): New function.\n* arm-protos.h: Prototype it.\n* arm.h (THUMB_LEGITIMIZE_ADDRESS): Define.\n(LEGITIMIZE_ADDRESS): Use it.\n\nFrom-SVN: r78437", "tree": {"sha": "9c596d8d604250dbf6c92a3954245e9c749242cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c596d8d604250dbf6c92a3954245e9c749242cf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6f5b4f3e5ae86e31fd507ff4d0f986e58febb829", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f5b4f3e5ae86e31fd507ff4d0f986e58febb829", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f5b4f3e5ae86e31fd507ff4d0f986e58febb829", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f5b4f3e5ae86e31fd507ff4d0f986e58febb829/comments", "author": null, "committer": null, "parents": [{"sha": "8a7988f51a78c05841fad17683cbb94b9dc33fd0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a7988f51a78c05841fad17683cbb94b9dc33fd0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a7988f51a78c05841fad17683cbb94b9dc33fd0"}], "stats": {"total": 89, "additions": 82, "deletions": 7}, "files": [{"sha": "8f405e757874908a91c0bb847796983bcada1ae3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f5b4f3e5ae86e31fd507ff4d0f986e58febb829/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f5b4f3e5ae86e31fd507ff4d0f986e58febb829/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6f5b4f3e5ae86e31fd507ff4d0f986e58febb829", "patch": "@@ -1,3 +1,10 @@\n+2004-02-25  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* arm.c (thumb_legitimize_address): New function.\n+\t* arm-protos.h: Prototype it.\n+\t* arm.h (THUMB_LEGITIMIZE_ADDRESS): Define.\n+\t(LEGITIMIZE_ADDRESS): Use it.\n+\n 2004-02-25  J\"orn Rennecke <joern.rennecke@superh.com>\n \n \t* reload1.c (reload): Only spill eliminable register with multiple"}, {"sha": "4c0575d5664abc655459d561458a128d1ba9a777", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f5b4f3e5ae86e31fd507ff4d0f986e58febb829/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f5b4f3e5ae86e31fd507ff4d0f986e58febb829/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=6f5b4f3e5ae86e31fd507ff4d0f986e58febb829", "patch": "@@ -54,6 +54,7 @@ extern int arm_legitimate_address_p  (enum machine_mode, rtx, int);\n extern int thumb_legitimate_address_p (enum machine_mode, rtx, int);\n extern int thumb_legitimate_offset_p (enum machine_mode, HOST_WIDE_INT);\n extern rtx arm_legitimize_address (rtx, rtx, enum machine_mode);\n+extern rtx thumb_legitimize_address (rtx, rtx, enum machine_mode);\n extern int arm_const_double_rtx (rtx);\n extern int neg_const_double_rtx_ok_for_fpa (rtx);\n extern enum reg_class vfp_secondary_reload_class (enum machine_mode, rtx);"}, {"sha": "0a61e1bc654c9df25af3b8eb14cadb922d01b0ae", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f5b4f3e5ae86e31fd507ff4d0f986e58febb829/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f5b4f3e5ae86e31fd507ff4d0f986e58febb829/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=6f5b4f3e5ae86e31fd507ff4d0f986e58febb829", "patch": "@@ -3232,6 +3232,74 @@ arm_legitimize_address (rtx x, rtx orig_x, enum machine_mode mode)\n   return x;\n }\n \n+\n+/* Try machine-dependent ways of modifying an illegitimate Thumb address\n+   to be legitimate.  If we find one, return the new, valid address.  */\n+rtx\n+thumb_legitimize_address (rtx x, rtx orig_x, enum machine_mode mode)\n+{\n+  if (GET_CODE (x) == PLUS\n+      && GET_CODE (XEXP (x, 1)) == CONST_INT\n+      && (INTVAL (XEXP (x, 1)) >= 32 * GET_MODE_SIZE (mode)\n+\t  || INTVAL (XEXP (x, 1)) < 0))\n+    {\n+      rtx xop0 = XEXP (x, 0);\n+      rtx xop1 = XEXP (x, 1);\n+      HOST_WIDE_INT offset = INTVAL (xop1);\n+\n+      /* Try and fold the offset into a biasing of the base register and\n+\t then offsetting that.  Don't do this when optimizing for space\n+\t since it can cause too many CSEs.  */\n+      if (optimize_size && offset >= 0\n+\t  && offset < 256 + 31 * GET_MODE_SIZE (mode))\n+\t{\n+\t  HOST_WIDE_INT delta;\n+\n+\t  if (offset >= 256)\n+\t    delta = offset - (256 - GET_MODE_SIZE (mode));\n+\t  else if (offset < 32 * GET_MODE_SIZE (mode) + 8)\n+\t    delta = 31 * GET_MODE_SIZE (mode);\n+\t  else\n+\t    delta = offset & (~31 * GET_MODE_SIZE (mode));\n+\n+\t  xop0 = force_operand (plus_constant (xop0, offset - delta),\n+\t\t\t\tNULL_RTX);\n+\t  x = plus_constant (xop0, delta);\n+\t}\n+      else if (offset < 0 && offset > -256)\n+\t/* Small negative offsets are best done with a subtract before the\n+\t   dereference, forcing these into a register normally takes two\n+\t   instructions.  */\n+\tx = force_operand (x, NULL_RTX);\n+      else\n+\t{\n+\t  /* For the remaining cases, force the constant into a register.  */\n+\t  xop1 = force_reg (SImode, xop1);\n+\t  x = gen_rtx_PLUS (SImode, xop0, xop1);\n+\t}\n+    }\n+  else if (GET_CODE (x) == PLUS\n+\t   && s_register_operand (XEXP (x, 1), SImode)\n+\t   && !s_register_operand (XEXP (x, 0), SImode))\n+    {\n+      rtx xop0 = force_operand (XEXP (x, 0), NULL_RTX);\n+\n+      x = gen_rtx_PLUS (SImode, xop0, XEXP (x, 1));\n+    }\n+\n+  if (flag_pic)\n+    {\n+      /* We need to find and carefully transform any SYMBOL and LABEL\n+\t references; so go back to the original address expression.  */\n+      rtx new_x = legitimize_pic_address (orig_x, mode, NULL_RTX);\n+\n+      if (new_x != orig_x)\n+\tx = new_x;\n+    }\n+\n+  return x;\n+}\n+\n \f\n \n #define REG_OR_SUBREG_REG(X)\t\t\t\t\t\t\\"}, {"sha": "5b85e75cdbfc6707c2443256033706df77b41cb7", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f5b4f3e5ae86e31fd507ff4d0f986e58febb829/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f5b4f3e5ae86e31fd507ff4d0f986e58febb829/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=6f5b4f3e5ae86e31fd507ff4d0f986e58febb829", "patch": "@@ -2361,15 +2361,11 @@ typedef struct\n #define ARM_LEGITIMIZE_ADDRESS(X, OLDX, MODE, WIN)\t\\\n do {\t\t\t\t\t\t\t\\\n   X = arm_legitimize_address (X, OLDX, MODE);\t\t\\\n-\t\t\t\t\t\t\t\\\n-  if (memory_address_p (MODE, X))\t\t\t\\\n-    goto WIN;\t\t\t\t\t\t\\\n } while (0)\n \n-#define THUMB_LEGITIMIZE_ADDRESS(X, OLDX, MODE, WIN)\t\t\\\n-do {\t\t\t\t\t\t\t\t\\\n-  if (flag_pic)\t\t\t\t\t\t\t\\\n-    (X) = legitimize_pic_address (OLDX, MODE, NULL_RTX);\t\\\n+#define THUMB_LEGITIMIZE_ADDRESS(X, OLDX, MODE, WIN)\t\\\n+do {\t\t\t\t\t\t\t\\\n+  X = thumb_legitimize_address (X, OLDX, MODE);\t\t\\\n } while (0)\n \n #define LEGITIMIZE_ADDRESS(X, OLDX, MODE, WIN)\t\t\\\n@@ -2378,6 +2374,9 @@ do {\t\t\t\t\t\t\t\\\n     ARM_LEGITIMIZE_ADDRESS (X, OLDX, MODE, WIN);\t\\\n   else\t\t\t\t\t\t\t\\\n     THUMB_LEGITIMIZE_ADDRESS (X, OLDX, MODE, WIN);\t\\\n+\t\t\t\t\t\t\t\\\n+  if (memory_address_p (MODE, X))\t\t\t\\\n+    goto WIN;\t\t\t\t\t\t\\\n } while (0)\n      \n /* Go to LABEL if ADDR (a legitimate address expression)"}]}