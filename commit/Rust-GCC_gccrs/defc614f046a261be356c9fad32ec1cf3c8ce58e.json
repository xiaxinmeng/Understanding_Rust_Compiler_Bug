{"sha": "defc614f046a261be356c9fad32ec1cf3c8ce58e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGVmYzYxNGYwNDZhMjYxYmUzNTZjOWZhZDMyZWMxY2YzYzhjZTU4ZQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1991-11-15T00:36:37Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1991-11-15T00:36:37Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r60", "tree": {"sha": "a55ba36d1e3451bb9aca292e3495c2f7d85e9a46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a55ba36d1e3451bb9aca292e3495c2f7d85e9a46"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/defc614f046a261be356c9fad32ec1cf3c8ce58e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/defc614f046a261be356c9fad32ec1cf3c8ce58e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/defc614f046a261be356c9fad32ec1cf3c8ce58e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/defc614f046a261be356c9fad32ec1cf3c8ce58e/comments", "author": null, "committer": null, "parents": [{"sha": "60cabde622dc0b17a53604aadb5788d304a005d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60cabde622dc0b17a53604aadb5788d304a005d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60cabde622dc0b17a53604aadb5788d304a005d5"}], "stats": {"total": 26, "additions": 26, "deletions": 0}, "files": [{"sha": "f8b4b6fd520af381e4f2afab18fb6af41039955c", "filename": "gcc/reload.h", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/defc614f046a261be356c9fad32ec1cf3c8ce58e/gcc%2Freload.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/defc614f046a261be356c9fad32ec1cf3c8ce58e/gcc%2Freload.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.h?ref=defc614f046a261be356c9fad32ec1cf3c8ce58e", "patch": "@@ -18,6 +18,21 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n \n \n+/* If secondary reloads are the same for inputs and outputs, define those\n+   macros here.  */\n+\n+#ifdef SECONDARY_RELOAD_CLASS\n+#define SECONDARY_INPUT_RELOAD_CLASS(CLASS, MODE, X) \\\n+  SECONDARY_RELOAD_CLASS (CLASS, MODE, X)\n+#define SECONDARY_OUTPUT_RELOAD_CLASS(CLASS, MODE, X) \\\n+  SECONDARY_RELOAD_CLASS (CLASS, MODE, X)\n+#endif\n+\n+/* If either macro is defined, show that we need secondary reloads.  */\n+#if defined(SECONDARY_INPUT_RELOAD_CLASS) || defined(SECONDARY_OUTPUT_RELOAD_CLASS)\n+#define HAVE_SECONDARY_RELOADS\n+#endif\n+\n /* See reload.c and reload1.c for comments on these variables.  */\n \n /* Maximum number of reloads we can need.  */\n@@ -36,6 +51,9 @@ extern int reload_needed_for_multiple[MAX_RELOADS];\n extern rtx reload_needed_for[MAX_RELOADS];\n extern int reload_secondary_reload[MAX_RELOADS];\n extern int reload_secondary_p[MAX_RELOADS];\n+#ifdef MAX_INSN_CODE\n+extern enum insn_code reload_secondary_icode[MAX_RELOADS];\n+#endif\n extern int n_reloads;\n \n extern rtx reload_reg_rtx[MAX_RELOADS];\n@@ -79,6 +97,14 @@ extern char indirect_symref_ok;\n /* Nonzero if an address (plus (reg frame_pointer) (reg ...)) is valid.  */\n extern char double_reg_address_ok;\n \n+#ifdef MAX_INSN_CODE\n+/* These arrays record the insn_code of insns that may be needed to\n+   perform input and output reloads of special objects.  They provide a\n+   place to pass a scratch register.  */\n+extern enum insn_code reload_in_optab[];\n+extern enum insn_code reload_out_optab[];\n+#endif\n+\n void init_reload ();\n void find_reloads ();\n void subst_reloads ();"}]}