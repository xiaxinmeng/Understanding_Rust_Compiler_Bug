{"sha": "6185b9a93cb78828db2b1a583aa2a2155c86e305", "node_id": "C_kwDOANBUbNoAKDYxODViOWE5M2NiNzg4MjhkYjJiMWE1ODNhYTJhMjE1NWM4NmUzMDU", "commit": {"author": {"name": "dianhong xu", "email": "dianhong.xu@intel.com", "date": "2021-06-15T09:00:35Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-09-22T10:27:28Z"}, "message": "AVX512FP16: Support load/store/abs intrinsics.\n\ngcc/ChangeLog:\n\n\t* config/i386/avx512fp16intrin.h (__m512h_u, __m256h_u,\n\t__m128h_u): New typedef.\n\t(_mm512_load_ph): New intrinsic.\n\t(_mm256_load_ph): Ditto.\n\t(_mm_load_ph): Ditto.\n\t(_mm512_loadu_ph): Ditto.\n\t(_mm256_loadu_ph): Ditto.\n\t(_mm_loadu_ph): Ditto.\n\t(_mm512_store_ph): Ditto.\n\t(_mm256_store_ph): Ditto.\n\t(_mm_store_ph): Ditto.\n\t(_mm512_storeu_ph): Ditto.\n\t(_mm256_storeu_ph): Ditto.\n\t(_mm_storeu_ph): Ditto.\n\t(_mm512_abs_ph): Ditto.\n\t* config/i386/avx512fp16vlintrin.h\n\t(_mm_abs_ph): Ditto.\n\t(_mm256_abs_ph): Ditto.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/avx512fp16-13.c: New test.", "tree": {"sha": "5aee514a56f000ad94b683bc3d853d9be91a80ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5aee514a56f000ad94b683bc3d853d9be91a80ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6185b9a93cb78828db2b1a583aa2a2155c86e305", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6185b9a93cb78828db2b1a583aa2a2155c86e305", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6185b9a93cb78828db2b1a583aa2a2155c86e305", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6185b9a93cb78828db2b1a583aa2a2155c86e305/comments", "author": null, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ae5e6fbc89f45ef6874c3d37b75ae63311943a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ae5e6fbc89f45ef6874c3d37b75ae63311943a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ae5e6fbc89f45ef6874c3d37b75ae63311943a3"}], "stats": {"total": 256, "additions": 256, "deletions": 0}, "files": [{"sha": "8f81bc424ce12949a6b4b3d53802c9e5061f5d67", "filename": "gcc/config/i386/avx512fp16intrin.h", "status": "modified", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6185b9a93cb78828db2b1a583aa2a2155c86e305/gcc%2Fconfig%2Fi386%2Favx512fp16intrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6185b9a93cb78828db2b1a583aa2a2155c86e305/gcc%2Fconfig%2Fi386%2Favx512fp16intrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512fp16intrin.h?ref=6185b9a93cb78828db2b1a583aa2a2155c86e305", "patch": "@@ -45,6 +45,14 @@ typedef _Float16 __m128h __attribute__ ((__vector_size__ (16), __may_alias__));\n typedef _Float16 __m256h __attribute__ ((__vector_size__ (32), __may_alias__));\n typedef _Float16 __m512h __attribute__ ((__vector_size__ (64), __may_alias__));\n \n+/* Unaligned version of the same type.  */\n+typedef _Float16 __m128h_u __attribute__ ((__vector_size__ (16),\t\\\n+\t\t\t\t\t   __may_alias__, __aligned__ (1)));\n+typedef _Float16 __m256h_u __attribute__ ((__vector_size__ (32),\t\\\n+\t\t\t\t\t   __may_alias__, __aligned__ (1)));\n+typedef _Float16 __m512h_u __attribute__ ((__vector_size__ (64),\t\\\n+\t\t\t\t\t   __may_alias__, __aligned__ (1)));\n+\n extern __inline __m128h\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_set_ph (_Float16 __A7, _Float16 __A6, _Float16 __A5,\n@@ -362,6 +370,48 @@ _mm_load_sh (void const *__P)\n \t\t     *(_Float16 const *) __P);\n }\n \n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_load_ph (void const *__P)\n+{\n+  return *(const __m512h *) __P;\n+}\n+\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_load_ph (void const *__P)\n+{\n+  return *(const __m256h *) __P;\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_load_ph (void const *__P)\n+{\n+  return *(const __m128h *) __P;\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_loadu_ph (void const *__P)\n+{\n+  return *(const __m512h_u *) __P;\n+}\n+\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_loadu_ph (void const *__P)\n+{\n+  return *(const __m256h_u *) __P;\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_loadu_ph (void const *__P)\n+{\n+  return *(const __m128h_u *) __P;\n+}\n+\n /* Stores the lower _Float16 value.  */\n extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n@@ -370,6 +420,56 @@ _mm_store_sh (void *__P, __m128h __A)\n   *(_Float16 *) __P = ((__v8hf)__A)[0];\n }\n \n+extern __inline void\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_store_ph (void *__P, __m512h __A)\n+{\n+   *(__m512h *) __P = __A;\n+}\n+\n+extern __inline void\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_store_ph (void *__P, __m256h __A)\n+{\n+   *(__m256h *) __P = __A;\n+}\n+\n+extern __inline void\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_store_ph (void *__P, __m128h __A)\n+{\n+   *(__m128h *) __P = __A;\n+}\n+\n+extern __inline void\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_storeu_ph (void *__P, __m512h __A)\n+{\n+   *(__m512h_u *) __P = __A;\n+}\n+\n+extern __inline void\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_storeu_ph (void *__P, __m256h __A)\n+{\n+   *(__m256h_u *) __P = __A;\n+}\n+\n+extern __inline void\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_storeu_ph (void *__P, __m128h __A)\n+{\n+   *(__m128h_u *) __P = __A;\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_abs_ph (__m512h __A)\n+{\n+  return (__m512h) _mm512_and_epi32 ( _mm512_set1_epi32 (0x7FFF7FFF),\n+\t\t\t\t      (__m512i) __A);\n+}\n+\n /* Intrinsics v[add,sub,mul,div]ph.  */\n extern __inline __m512h\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))"}, {"sha": "7694bf8138e682243bf13635aab5de4f493ba417", "filename": "gcc/config/i386/avx512fp16vlintrin.h", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6185b9a93cb78828db2b1a583aa2a2155c86e305/gcc%2Fconfig%2Fi386%2Favx512fp16vlintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6185b9a93cb78828db2b1a583aa2a2155c86e305/gcc%2Fconfig%2Fi386%2Favx512fp16vlintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512fp16vlintrin.h?ref=6185b9a93cb78828db2b1a583aa2a2155c86e305", "patch": "@@ -425,6 +425,22 @@ _mm256_maskz_min_ph (__mmask16 __A, __m256h __B, __m256h __C)\n \t\t\t\t       _mm256_setzero_ph (), __A);\n }\n \n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_abs_ph (__m128h __A)\n+{\n+  return (__m128h) _mm_and_si128 ( _mm_set1_epi32 (0x7FFF7FFF),\n+\t\t\t\t   (__m128i) __A);\n+}\n+\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_abs_ph (__m256h __A)\n+{\n+  return (__m256h) _mm256_and_si256 ( _mm256_set1_epi32 (0x7FFF7FFF),\n+\t\t\t\t      (__m256i) __A);\n+}\n+\n /* vcmpph */\n #ifdef __OPTIMIZE\n extern __inline __mmask8"}, {"sha": "c3bae65da67d1b4421e11beeea17c18bd2326c74", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-13.c", "status": "added", "additions": 140, "deletions": 0, "changes": 140, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6185b9a93cb78828db2b1a583aa2a2155c86e305/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6185b9a93cb78828db2b1a583aa2a2155c86e305/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-13.c?ref=6185b9a93cb78828db2b1a583aa2a2155c86e305", "patch": "@@ -0,0 +1,140 @@\n+/* { dg-do compile} */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512vl\" } */\n+\n+#include <immintrin.h>\n+void\n+__attribute__ ((noinline, noclone))\n+store512_ph (void *p, __m512h a)\n+{\n+  _mm512_store_ph (p, a);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vmovdqa64\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\]*\\\\)\" 1 } } */\n+\n+void\n+__attribute__ ((noinline, noclone))\n+store256_ph (void *p, __m256h a)\n+{\n+  _mm256_store_ph (p, a);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vmovdqa64\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*\\\\)\" 1 } } */\n+\n+void\n+__attribute__ ((noinline, noclone))\n+store_ph (void *p, __m128h a)\n+{\n+  _mm_store_ph (p, a);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vmovdqa64\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*\\\\)\" 1 } } */\n+\n+__m512h\n+__attribute__ ((noinline, noclone))\n+load512_ph (void const *p)\n+{\n+  return _mm512_load_ph (p);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vmovdqa64\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\]*\\\\)\" 1 } } */\n+\n+__m256h\n+__attribute__ ((noinline, noclone))\n+load256_ph (void const *p)\n+{\n+  return _mm256_load_ph (p);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vmovdqa64\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*\\\\)\" 1 } } */\n+\n+__m128h\n+__attribute__ ((noinline, noclone))\n+load_ph (void const *p)\n+{\n+  return _mm_load_ph (p);\n+}\n+/* { dg-final { scan-assembler-times \"vmovdqa64\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*\\\\)\" 1 } } */\n+\n+__m512h\n+__attribute__ ((noinline, noclone))\n+load512u_ph (void const *p)\n+{\n+  return _mm512_loadu_ph (p);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vmovdqu16\\[ \\\\t\\]*\\[^,\\]*,\\[^\\{\\n\\]*%zmm\\[0-9\\]\" 1 } } */\n+\n+__m256h\n+__attribute__ ((noinline, noclone))\n+load256u_ph (void const *p)\n+{\n+  return _mm256_loadu_ph (p);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vmovdqu16\\[ \\\\t\\]*\\[^,\\]*,\\[^\\{\\n\\]*%ymm\\[0-9\\]\" 1 } } */\n+\n+__m128h\n+__attribute__ ((noinline, noclone))\n+load128u_ph (void const *p)\n+{\n+  return _mm_loadu_ph (p);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vmovdqu16\\[ \\\\t\\]*\\[^,\\]*,\\[^\\{\\n\\]*%xmm\\[0-9\\]\" 1 } } */\n+\n+void\n+__attribute__ ((noinline, noclone))\n+store512u_ph (void *p, __m512h a)\n+{\n+  return _mm512_storeu_ph (p, a);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vmovdqu16\\[ \\\\t\\]*\\[^\\{\\n\\]*%zmm\\[0-9\\], *\\[^,\\]*\" 1 } } */\n+\n+void\n+__attribute__ ((noinline, noclone))\n+store256u_ph (void *p, __m256h a)\n+{\n+  return _mm256_storeu_ph (p, a);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vmovdqu16\\[ \\\\t\\]*\\[^\\{\\n\\]*%ymm\\[0-9\\], *\\[^,\\]*\" 1 } } */\n+\n+void\n+__attribute__ ((noinline, noclone))\n+storeu_ph (void *p, __m128h a)\n+{\n+  return _mm_storeu_ph (p, a);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vmovdqu16\\[ \\\\t\\]*\\[^\\{\\n\\]*%xmm\\[0-9\\], *\\[^,\\]*\" 1 } } */\n+\n+__m512h\n+__attribute__ ((noinline, noclone))\n+abs512_ph (__m512h a)\n+{\n+  return _mm512_abs_ph (a);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vpbroadcastd\\[^\\n\\]*%zmm\\[0-9\\]+\" 1 { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-times \"vpandd\\[^\\n\\]*%zmm\\[0-9\\]+\" 1 } } */\n+\n+__m256h\n+__attribute__ ((noinline, noclone))\n+abs256_ph (__m256h a)\n+{\n+  return _mm256_abs_ph (a);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vpbroadcastq\\[^\\n\\]*%ymm\\[0-9\\]+\" 1 { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-times \"vpand\\[^\\n\\]*%ymm\\[0-9\\]+\" 1 } } */\n+\n+__m128h\n+__attribute__ ((noinline, noclone))\n+abs_ph (__m128h a)\n+{\n+  return _mm_abs_ph (a);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vpbroadcastq\\[^\\n\\]*%xmm\\[0-9\\]+\" 1 { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-times \"vpand\\[^\\n\\]*%xmm\\[0-9\\]+\" 1 } } */"}]}