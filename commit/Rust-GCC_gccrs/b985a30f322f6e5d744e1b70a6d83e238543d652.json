{"sha": "b985a30f322f6e5d744e1b70a6d83e238543d652", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjk4NWEzMGYzMjJmNmU1ZDc0NGUxYjcwYTZkODNlMjM4NTQzZDY1Mg==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@freesoft.cz", "date": "1999-04-13T14:50:49Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1999-04-13T14:50:49Z"}, "message": "Jan Hubicka <hubicka@freesoft.cz>\n\nJan Hubicka <hubicka@freesoft.cz>\n        * i386.c (agi_dependent): Handle push operation more correctly.\n\nFrom-SVN: r26412", "tree": {"sha": "9185c012683c2a7aaef1b88d8a4d2514dbe3e4a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9185c012683c2a7aaef1b88d8a4d2514dbe3e4a0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b985a30f322f6e5d744e1b70a6d83e238543d652", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b985a30f322f6e5d744e1b70a6d83e238543d652", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b985a30f322f6e5d744e1b70a6d83e238543d652", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b985a30f322f6e5d744e1b70a6d83e238543d652/comments", "author": null, "committer": null, "parents": [{"sha": "6e383e61963c7291c615632fd14b78a503ebb55d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e383e61963c7291c615632fd14b78a503ebb55d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e383e61963c7291c615632fd14b78a503ebb55d"}], "stats": {"total": 30, "additions": 27, "deletions": 3}, "files": [{"sha": "57a182508250a32e4406fd5fa7ac8976099203bd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b985a30f322f6e5d744e1b70a6d83e238543d652/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b985a30f322f6e5d744e1b70a6d83e238543d652/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b985a30f322f6e5d744e1b70a6d83e238543d652", "patch": "@@ -1,3 +1,7 @@\n+Tue Apr 13 14:49:13 1999  Jan Hubicka <hubicka@freesoft.cz>\n+\n+\t* i386.c (agi_dependent): Handle push operation more correctly.\n+\n Tue Apr 13 14:45:17 1999  Jan Hubicka <hubicka@freesoft.cz>\n \n \t* i386.md (anddi3): Add % constraint."}, {"sha": "e6f807bc781b0f433a35118fb28859cace2d410c", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b985a30f322f6e5d744e1b70a6d83e238543d652/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b985a30f322f6e5d744e1b70a6d83e238543d652/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=b985a30f322f6e5d744e1b70a6d83e238543d652", "patch": "@@ -5037,16 +5037,36 @@ int\n agi_dependent (insn, dep_insn)\n      rtx insn, dep_insn;\n {\n+  int push = 0, push_dep = 0;\n   if (GET_CODE (dep_insn) == INSN\n       && GET_CODE (PATTERN (dep_insn)) == SET\n-      && GET_CODE (SET_DEST (PATTERN (dep_insn))) == REG)\n-    return reg_mentioned_in_mem (SET_DEST (PATTERN (dep_insn)), insn);\n+      && GET_CODE (SET_DEST (PATTERN (dep_insn))) == REG\n+      && reg_mentioned_in_mem (SET_DEST (PATTERN (dep_insn)), insn))\n+    return 1;\n+\n+  if (GET_CODE (insn) == INSN && GET_CODE (PATTERN (insn)) == SET\n+      && GET_CODE (SET_DEST (PATTERN (insn))) == MEM\n+      && push_operand (SET_DEST (PATTERN (insn)),\n+                       GET_MODE (SET_DEST (PATTERN (insn)))))\n+    push = 1;\n \n   if (GET_CODE (dep_insn) == INSN && GET_CODE (PATTERN (dep_insn)) == SET\n       && GET_CODE (SET_DEST (PATTERN (dep_insn))) == MEM\n       && push_operand (SET_DEST (PATTERN (dep_insn)),\n                        GET_MODE (SET_DEST (PATTERN (dep_insn)))))\n-    return reg_mentioned_in_mem (stack_pointer_rtx, insn);\n+    push_dep = 1;\n+\n+  /* CPUs contain special hardware to allow two pushes.  */\n+  if (push && push_dep) \n+    return 0;\n+\n+  /* Push operation implicitly change stack pointer causing AGI stalls.  */\n+  if (push_dep && reg_mentioned_in_mem (stack_pointer_rtx, insn))\n+    return 1;\n+\n+  /* Push also implicitly read stack pointer.  */\n+  if (push && modified_in_p (stack_pointer_rtx, dep_insn))\n+    return 1;\n \n   return 0;\n }"}]}