{"sha": "acbe30bbc884899da72df47d023ebde89f8f47f1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWNiZTMwYmJjODg0ODk5ZGE3MmRmNDdkMDIzZWJkZTg5ZjhmNDdmMQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-09-04T20:04:26Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-09-09T21:39:49Z"}, "message": "c++: Fix ICE in reshape_init with init-list [PR95164]\n\nThis patch fixes a long-standing bug in reshape_init_r.  Since r209314\nwe implement DR 1467 which handles list-initialization with a single\ninitializer of the same type as the target.  In this test this causes\na crash in reshape_init_r when we're processing a constructor that has\nundergone the DR 1467 transformation.\n\nTake e.g. the\n\n  foo({{1, {H{k}}}});\n\nline in the attached test.  {H{k}} initializes the field b of H in I.\nH{k} is a functional cast, so has TREE_HAS_CONSTRUCTOR set, so is\nCOMPOUND_LITERAL_P.  We perform the DR 1467 transformation and turn\n{H{k}} into H{k}.  Then we attempt to reshape H{k} again and since\nfirst_initializer_p is null and it's COMPOUND_LITERAL_P, we go here:\n\n           else if (COMPOUND_LITERAL_P (stripped_init))\n             gcc_assert (!BRACE_ENCLOSED_INITIALIZER_P (stripped_init));\n\nthen complain about the missing braces, go to reshape_init_class and ICE\non\n               gcc_checking_assert (d->cur->index\n                                    == get_class_binding (type, id));\n\nbecause due to the missing { } we're looking for 'b' in H, but that's\nnot found.\n\nSo we have to be prepared to handle an initializer whose outer braces\nhave been removed due to DR 1467.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/95164\n\t* decl.c (reshape_init_r): When initializing an aggregate member\n\twith an initializer from an initializer-list, also consider\n\tCOMPOUND_LITERAL_P.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/95164\n\t* g++.dg/cpp0x/initlist123.C: New test.", "tree": {"sha": "ae95859ae757b6f313ebf6fde5032adbe4671f20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae95859ae757b6f313ebf6fde5032adbe4671f20"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/acbe30bbc884899da72df47d023ebde89f8f47f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acbe30bbc884899da72df47d023ebde89f8f47f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/acbe30bbc884899da72df47d023ebde89f8f47f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acbe30bbc884899da72df47d023ebde89f8f47f1/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1690a839cff2e0276017a013419d81d675bbf69d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1690a839cff2e0276017a013419d81d675bbf69d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1690a839cff2e0276017a013419d81d675bbf69d"}], "stats": {"total": 41, "additions": 40, "deletions": 1}, "files": [{"sha": "ca1c8a4a0e6dc7c143d6c2755de797836cc6e4db", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acbe30bbc884899da72df47d023ebde89f8f47f1/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acbe30bbc884899da72df47d023ebde89f8f47f1/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=acbe30bbc884899da72df47d023ebde89f8f47f1", "patch": "@@ -6466,7 +6466,7 @@ reshape_init_r (tree type, reshape_iter *d, tree first_initializer_p,\n      non-empty subaggregate, brace elision is assumed and the\n      initializer is considered for the initialization of the first\n      member of the subaggregate.  */\n-  if (TREE_CODE (init) != CONSTRUCTOR\n+  if ((TREE_CODE (init) != CONSTRUCTOR || COMPOUND_LITERAL_P (init))\n       /* But don't try this for the first initializer, since that would be\n \t looking through the outermost braces; A a2 = { a1 }; is not a\n \t valid aggregate initialization.  */"}, {"sha": "29f037f07efa8bc408349913d37e00120440c8ee", "filename": "gcc/testsuite/g++.dg/cpp0x/initlist123.C", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acbe30bbc884899da72df47d023ebde89f8f47f1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist123.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acbe30bbc884899da72df47d023ebde89f8f47f1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist123.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist123.C?ref=acbe30bbc884899da72df47d023ebde89f8f47f1", "patch": "@@ -0,0 +1,39 @@\n+// PR c++/95164\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-Wmissing-braces\" }\n+\n+struct H {\n+  int a;\n+};\n+\n+struct X : H { };\n+\n+struct I {\n+  int c;\n+  H b;\n+};\n+struct E { I d; };\n+void foo(E);\n+\n+template<int N>\n+void fn ()\n+{\n+  int a = 42;\n+  int &k = a;\n+\n+  foo({1, {H{k}}}); // { dg-warning \"missing braces around initializer for .I.\" }\n+  foo({1, {X{k}}}); // { dg-warning \"missing braces around initializer for .I.\" }\n+\n+  foo({{1, {k}}});\n+  foo({{1, {N}}});\n+\n+  foo({{1, H{k}}});\n+  foo({{1, H{N}}});\n+  foo({{1, X{k}}});\n+  foo({{1, X{N}}});\n+\n+  foo({{1, {H{k}}}});\n+  foo({{1, {H{N}}}});\n+  foo({{1, {X{k}}}});\n+  foo({{1, {X{N}}}});\n+}"}]}