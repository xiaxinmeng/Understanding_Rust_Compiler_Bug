{"sha": "d15d61c671cb02b6dce9d583962750875e3178e9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDE1ZDYxYzY3MWNiMDJiNmRjZTlkNTgzOTYyNzUwODc1ZTMxNzhlOQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-16T12:52:28Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-16T12:52:28Z"}, "message": "[multiple changes]\n\n2009-04-16  Tristan Gingold  <gingold@adacore.com>\n\n\t* init.c: Detect real stack overflow on Darwin.\n\n\t* system-darwin-x86.ads: Use stack probing on darwin x86.\n\n2009-04-16  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_attr.adb (Analyze_Attribute, case 'Address): It is illegal to\n\ttake the address of an intrinsic subprogram.\n\n2009-04-16  Vincent Celier  <celier@adacore.com>\n\n\t* g-trasym-unimplemented.ads, g-trasym-unimplemented.adb: New file.\n\n\t* g-trasym.ads: Update comments.\n\n2009-04-16  Vasiliy Fofanov  <fofanov@adacore.com>\n\n\t* tracebak.c (STOP_FRAME): Verify validity of the current address\n\tbefore dereferencing.\n\nFrom-SVN: r146182", "tree": {"sha": "30c6a373132e5d4e1de4bb03bdf7beda67d1d2a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/30c6a373132e5d4e1de4bb03bdf7beda67d1d2a3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d15d61c671cb02b6dce9d583962750875e3178e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d15d61c671cb02b6dce9d583962750875e3178e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d15d61c671cb02b6dce9d583962750875e3178e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d15d61c671cb02b6dce9d583962750875e3178e9/comments", "author": null, "committer": null, "parents": [{"sha": "0a0a18c30fbacdade52fa538575ff4889e145275", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a0a18c30fbacdade52fa538575ff4889e145275", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a0a18c30fbacdade52fa538575ff4889e145275"}], "stats": {"total": 229, "additions": 221, "deletions": 8}, "files": [{"sha": "0d0e450d986ac3477a581378dde9805305f74d4e", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d15d61c671cb02b6dce9d583962750875e3178e9/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d15d61c671cb02b6dce9d583962750875e3178e9/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=d15d61c671cb02b6dce9d583962750875e3178e9", "patch": "@@ -1,8 +1,30 @@\n+2009-04-16  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* init.c: Detect real stack overflow on Darwin.\n+\n+\t* system-darwin-x86.ads: Use stack probing on darwin x86.\n+\n+2009-04-16  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_attr.adb (Analyze_Attribute, case 'Address): It is illegal to\n+\ttake the address of an intrinsic subprogram.\n+\n 2009-04-16  Arnaud Charlet  <charlet@adacore.com>\n \n \t* gcc-interface/Makefile.in: Change g-trasym to g-trasym-unimplemented\n \tfor the targets where GNAT.Traceback.Symbolic is not supported.\n \n+2009-04-16  Vincent Celier  <celier@adacore.com>\n+\n+\t* g-trasym-unimplemented.ads, g-trasym-unimplemented.adb: New file.\n+\n+\t* g-trasym.ads: Update comments.\n+\n+2009-04-16  Vasiliy Fofanov  <fofanov@adacore.com>\n+\n+\t* tracebak.c (STOP_FRAME): Verify validity of the current address\n+\tbefore dereferencing.\n+\n 2009-04-16  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sprint.adb (Write_Itype): If the itype is an array subtype, preserve"}, {"sha": "5432eaf9dee2762fae9287e8770b03b257c54f96", "filename": "gcc/ada/g-trasym-unimplemented.adb", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d15d61c671cb02b6dce9d583962750875e3178e9/gcc%2Fada%2Fg-trasym-unimplemented.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d15d61c671cb02b6dce9d583962750875e3178e9/gcc%2Fada%2Fg-trasym-unimplemented.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-trasym-unimplemented.adb?ref=d15d61c671cb02b6dce9d583962750875e3178e9", "patch": "@@ -0,0 +1,72 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUN-TIME COMPONENTS                         --\n+--                                                                          --\n+--             G N A T . T R A C E B A C K . S Y M B O L I C                --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--                     Copyright (C) 1999-2008, AdaCore                     --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the  Free Software Foundation,  51  Franklin  Street,  Fifth  Floor, --\n+-- Boston, MA 02110-1301, USA.                                              --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  Version used on unimplemented targets\n+\n+--  Run-time symbolic traceback is currently supported on the following\n+--  targets:\n+\n+--     HP-UX\n+--     IRIX\n+--     GNU/Linux x86\n+--     AIX\n+--     Solaris sparc\n+--     Tru64\n+--     OpenVMS/Alpha\n+--     Windows NT/XP/Vista\n+\n+--  This version is used on all other targets, it generates a warning at\n+--  compile time if it is with'ed, and the bodies generate messages saying\n+--  that the functions are not implemented.\n+\n+package body GNAT.Traceback.Symbolic is\n+\n+   ------------------------\n+   -- Symbolic_Traceback --\n+   ------------------------\n+\n+   function Symbolic_Traceback (Traceback : Tracebacks_Array) return String\n+   is\n+      pragma Unreferenced (Traceback);\n+   begin\n+      return \"Symbolic_Traceback not implemented on this target\";\n+   end Symbolic_Traceback;\n+\n+   function Symbolic_Traceback (E : Exception_Occurrence) return String\n+   is\n+      pragma Unreferenced (E);\n+   begin\n+      return \"Symbolic_Traceback not implemented on this target\";\n+   end Symbolic_Traceback;\n+\n+end GNAT.Traceback.Symbolic;"}, {"sha": "d03db88e263f09f6f756d6aeafe5ec21e2c9ae6e", "filename": "gcc/ada/g-trasym-unimplemented.ads", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d15d61c671cb02b6dce9d583962750875e3178e9/gcc%2Fada%2Fg-trasym-unimplemented.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d15d61c671cb02b6dce9d583962750875e3178e9/gcc%2Fada%2Fg-trasym-unimplemented.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-trasym-unimplemented.ads?ref=d15d61c671cb02b6dce9d583962750875e3178e9", "patch": "@@ -0,0 +1,66 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUN-TIME COMPONENTS                         --\n+--                                                                          --\n+--             G N A T . T R A C E B A C K . S Y M B O L I C                --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                     Copyright (C) 1999-2008, AdaCore                     --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the  Free Software Foundation,  51  Franklin  Street,  Fifth  Floor, --\n+-- Boston, MA 02110-1301, USA.                                              --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  Version used on unimplemented targets\n+\n+--  Run-time symbolic traceback is currently supported on the following\n+--  targets:\n+\n+--     HP-UX hppa and ia64\n+--     IRIX\n+--     GNU/Linux x86, x86_64, ia64\n+--     AIX\n+--     Solaris sparc and x86\n+--     Tru64\n+--     OpenVMS/Alpha\n+--     Windows NT/XP/Vista\n+\n+--  This version is used on all other targets, it generates a warning at\n+--  compile time if it is with'ed, and the bodies generate messages saying\n+--  that the functions are not implemented.\n+\n+with Ada.Exceptions; use Ada.Exceptions;\n+\n+package GNAT.Traceback.Symbolic is\n+   pragma Elaborate_Body;\n+\n+--     pragma Compile_Time_Warning\n+--       (True, \"symbolic traceback not implemented on this target\");\n+\n+   function Symbolic_Traceback (Traceback : Tracebacks_Array) return String;\n+   --  Build a string containing a symbolic traceback of the given call chain\n+\n+   function Symbolic_Traceback (E : Exception_Occurrence) return String;\n+   --  Build string containing symbolic traceback of given exception occurrence\n+\n+end GNAT.Traceback.Symbolic;"}, {"sha": "89362318e3eeca7b23afdd04f996870acd6cad6f", "filename": "gcc/ada/g-trasym.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d15d61c671cb02b6dce9d583962750875e3178e9/gcc%2Fada%2Fg-trasym.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d15d61c671cb02b6dce9d583962750875e3178e9/gcc%2Fada%2Fg-trasym.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-trasym.ads?ref=d15d61c671cb02b6dce9d583962750875e3178e9", "patch": "@@ -35,11 +35,11 @@\n \n --  This capability is currently supported on the following targets:\n \n---     HP-UX\n+--     HP-UX hppa and ia64\n --     IRIX\n---     GNU/Linux x86\n+--     GNU/Linux x86, x86_64, ia64\n --     AIX\n---     Solaris sparc\n+--     Solaris sparc and x86\n --     Tru64\n --     OpenVMS/Alpha\n --     Windows NT/XP/Vista"}, {"sha": "fab09428967801786ad7dd9e17696a79b78c5904", "filename": "gcc/ada/init.c", "status": "modified", "additions": 37, "deletions": 3, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d15d61c671cb02b6dce9d583962750875e3178e9/gcc%2Fada%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d15d61c671cb02b6dce9d583962750875e3178e9/gcc%2Fada%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finit.c?ref=d15d61c671cb02b6dce9d583962750875e3178e9", "patch": "@@ -2098,6 +2098,8 @@ __gnat_install_handler(void)\n #elif defined(__APPLE__)\n \n #include <signal.h>\n+#include <mach/mach_vm.h>\n+#include <mach/vm_statistics.h>\n \n /* This must be in keeping with System.OS_Interface.Alternate_Stack_Size.  */\n char __gnat_alternate_stack[64 * 1024]; /* 2 * MINSIGSTKSZ */\n@@ -2108,6 +2110,31 @@ static void __gnat_error_handler (int sig, siginfo_t * si, void * uc);\n #define\tUC_RESET_ALT_STACK\t0x80000000\n extern int sigreturn (void *uc, int flavour);\n \n+/* Return true if ADDR is within a stack guard area.  */\n+static int\n+__gnat_is_stack_guard (mach_vm_address_t addr)\n+{\n+  kern_return_t kret;\n+  vm_region_submap_info_data_64_t info;\n+  mach_vm_address_t start;\n+  mach_vm_size_t size;\n+  natural_t depth;\n+  mach_msg_type_number_t count;\n+\n+  count = VM_REGION_SUBMAP_INFO_COUNT_64;\n+  start = addr;\n+  size = -1;\n+  depth = 9999;\n+  kret = mach_vm_region_recurse (mach_task_self (), &start, &size, &depth,\n+\t\t\t\t (vm_region_recurse_info_t) &info, &count);\n+  if (kret == KERN_SUCCESS\n+      && addr >= start && addr < (start + size)\n+      && info.protection == VM_PROT_NONE\n+      && info.user_tag == VM_MEMORY_STACK)\n+    return 1;\n+  return 0;\n+}\n+\n static void\n __gnat_error_handler (int sig, siginfo_t * si, void * uc)\n {\n@@ -2118,9 +2145,16 @@ __gnat_error_handler (int sig, siginfo_t * si, void * uc)\n     {\n     case SIGSEGV:\n     case SIGBUS:\n-      /* FIXME: we need to detect the case of a *real* SIGSEGV.  */\n-      exception = &storage_error;\n-      msg = \"stack overflow or erroneous memory access\";\n+      if (__gnat_is_stack_guard ((mach_vm_address_t)si->si_addr))\n+\t{\n+\t  exception = &storage_error;\n+\t  msg = \"stack overflow\";\n+\t}\n+      else\n+\t{\n+\t  exception = &constraint_error;\n+\t  msg = \"erroneous memory access\";\n+\t}\n       /* Reset the use of alt stack, so that the alt stack will be used\n \t for the next signal delivery.  */\n       sigreturn (NULL, UC_RESET_ALT_STACK);"}, {"sha": "e2fe5c3508e83c23d17cce10dee30150ea943faa", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d15d61c671cb02b6dce9d583962750875e3178e9/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d15d61c671cb02b6dce9d583962750875e3178e9/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=d15d61c671cb02b6dce9d583962750875e3178e9", "patch": "@@ -2049,6 +2049,24 @@ package body Sem_Attr is\n                      Error_Attr_P\n                        (\"prefix of % attribute cannot be Inline_Always\" &\n                         \" subprogram\");\n+\n+                  --  It is illegal to apply 'Address to an intrinsic\n+                  --  subprogram. This is now formalized in AI05-0095.\n+                  --  In an instance, an attempt to obtain 'Address of an\n+                  --  intrinsic subprogram (e.g the renaming of a predefined\n+                  --  operator that is an actual) raises Program_Error.\n+\n+                  elsif Convention (Ent) = Convention_Intrinsic then\n+                     if In_Instance then\n+                        Rewrite (N,\n+                          Make_Raise_Program_Error (Loc,\n+                            Reason => PE_Misaligned_Address_Value));\n+                        --   ??? why Misaligned_Address_Value, seems wrong\n+\n+                     else\n+                        Error_Msg_N\n+                         (\"cannot take Address of intrinsic subprogram\", N);\n+                     end if;\n                   end if;\n \n                elsif Is_Object (Ent)"}, {"sha": "a4d5fbf25e00271936c28786e27137e8ac3d0636", "filename": "gcc/ada/system-darwin-x86.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d15d61c671cb02b6dce9d583962750875e3178e9/gcc%2Fada%2Fsystem-darwin-x86.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d15d61c671cb02b6dce9d583962750875e3178e9/gcc%2Fada%2Fsystem-darwin-x86.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsystem-darwin-x86.ads?ref=d15d61c671cb02b6dce9d583962750875e3178e9", "patch": "@@ -155,7 +155,7 @@ private\n    Preallocated_Stacks       : constant Boolean := False;\n    Signed_Zeros              : constant Boolean := True;\n    Stack_Check_Default       : constant Boolean := False;\n-   Stack_Check_Probes        : constant Boolean := False;\n+   Stack_Check_Probes        : constant Boolean := True;\n    Stack_Check_Limits        : constant Boolean := False;\n    Support_64_Bit_Divides    : constant Boolean := True;\n    Support_Aggregates        : constant Boolean := True;"}, {"sha": "8f3c4cc389d95bf56d472b2aad87cda170888694", "filename": "gcc/ada/tracebak.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d15d61c671cb02b6dce9d583962750875e3178e9/gcc%2Fada%2Ftracebak.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d15d61c671cb02b6dce9d583962750875e3178e9/gcc%2Fada%2Ftracebak.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftracebak.c?ref=d15d61c671cb02b6dce9d583962750875e3178e9", "patch": "@@ -317,7 +317,8 @@ struct layout\n #define FRAME_OFFSET(FP) 0\n #define PC_ADJUST -2\n #define STOP_FRAME(CURRENT, TOP_STACK) \\\n-  (IS_BAD_PTR((long)(CURRENT)->return_address) \\\n+  (IS_BAD_PTR((long)(CURRENT)) \\\n+   || IS_BAD_PTR((long)(CURRENT)->return_address) \\\n    || (CURRENT)->return_address == 0|| (CURRENT)->next == 0  \\\n    || (void *) (CURRENT) < (TOP_STACK))\n "}]}