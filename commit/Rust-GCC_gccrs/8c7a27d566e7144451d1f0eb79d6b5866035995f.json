{"sha": "8c7a27d566e7144451d1f0eb79d6b5866035995f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGM3YTI3ZDU2NmU3MTQ0NDUxZDFmMGViNzlkNmI1ODY2MDM1OTk1Zg==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.vnet.ibm.com", "date": "2018-01-11T23:31:09Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2018-01-11T23:31:09Z"}, "message": "configure.ac (--with-long-double-format): Add support for the configuration option to change the default long double...\n\n2018-01-11  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\t* configure.ac (--with-long-double-format): Add support for the\n\tconfiguration option to change the default long double format on\n\tPowerPC systems.\n\t* config.gcc (powerpc*-linux*-*): Likewise.\n\t* configure: Regenerate.\n\t* config/rs6000/rs6000-c.c (rs6000_cpu_cpp_builtins): If long\n\tdouble is IEEE, define __KC__ and __KF__ to allow floatn.h to be\n\tused without modification.\n\nFrom-SVN: r256558", "tree": {"sha": "866629ef524c5989733eec997136715953b1a31e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/866629ef524c5989733eec997136715953b1a31e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8c7a27d566e7144451d1f0eb79d6b5866035995f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c7a27d566e7144451d1f0eb79d6b5866035995f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c7a27d566e7144451d1f0eb79d6b5866035995f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c7a27d566e7144451d1f0eb79d6b5866035995f/comments", "author": null, "committer": null, "parents": [{"sha": "02a03501e439cd92b741034c32ce7238a927dff1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02a03501e439cd92b741034c32ce7238a927dff1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02a03501e439cd92b741034c32ce7238a927dff1"}], "stats": {"total": 116, "additions": 113, "deletions": 3}, "files": [{"sha": "b04df1cf4764c84147e96e6412a9af464f848140", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c7a27d566e7144451d1f0eb79d6b5866035995f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c7a27d566e7144451d1f0eb79d6b5866035995f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8c7a27d566e7144451d1f0eb79d6b5866035995f", "patch": "@@ -1,3 +1,14 @@\n+2018-01-11  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\t* configure.ac (--with-long-double-format): Add support for the\n+\tconfiguration option to change the default long double format on\n+\tPowerPC systems.\n+\t* config.gcc (powerpc*-linux*-*): Likewise.\n+\t* configure: Regenerate.\n+\t* config/rs6000/rs6000-c.c (rs6000_cpu_cpp_builtins): If long\n+\tdouble is IEEE, define __KC__ and __KF__ to allow floatn.h to be\n+\tused without modification.\n+\n 2018-01-11  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \t* config/rs6000/rs6000-builtin.def (BU_P7_MISC_X): New #define."}, {"sha": "3a6d52318a54a162e35ea9e1202f59ca1b9dda3d", "filename": "gcc/config.gcc", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c7a27d566e7144451d1f0eb79d6b5866035995f/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c7a27d566e7144451d1f0eb79d6b5866035995f/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=8c7a27d566e7144451d1f0eb79d6b5866035995f", "patch": "@@ -4400,6 +4400,14 @@ case \"${target}\" in\n \t\t\texit 1\n \t\t    fi\n \t\tfi\n+\n+\t\t# Set up the default long double format if the user changed it.\n+\t\tif test x$with_long_double_format = xieee; then\n+\t\t    tm_defines=\"${tm_defines} TARGET_IEEEQUAD_DEFAULT=1\"\n+\n+\t\telif test x$with_long_double_format = xibm; then\n+\t\t    tm_defines=\"${tm_defines} TARGET_IEEEQUAD_DEFAULT=0\"\n+\t\tfi\n \t\t;;\n \n \ts390*-*-*)"}, {"sha": "b7693d088095babf4270637e9b339fa2f04f2606", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c7a27d566e7144451d1f0eb79d6b5866035995f/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c7a27d566e7144451d1f0eb79d6b5866035995f/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=8c7a27d566e7144451d1f0eb79d6b5866035995f", "patch": "@@ -708,7 +708,18 @@ rs6000_cpu_cpp_builtins (cpp_reader *pfile)\n       builtin_define (\"__LONGDOUBLE128\");\n \n       if (TARGET_IEEEQUAD)\n-\tbuiltin_define (\"__LONG_DOUBLE_IEEE128__\");\n+\t{\n+\t  /* Older versions of GLIBC used __attribute__((__KC__)) to create the\n+\t     IEEE 128-bit floating point complex type for C++ (which does not\n+\t     support _Float128 _Complex).  If the default for long double is\n+\t     IEEE 128-bit mode, the library would need to use\n+\t     __attribute__((__TC__)) instead.  Defining __KF__ and __KC__\n+\t     is a stop-gap to build with the older libraries, until we\n+\t     get an updated library.  */\n+\t  builtin_define (\"__LONG_DOUBLE_IEEE128__\");\n+\t  builtin_define (\"__KF__=__TF__\");\n+\t  builtin_define (\"__KC__=__TC__\");\n+\t}\n       else\n \tbuiltin_define (\"__LONG_DOUBLE_IBM128__\");\n     }"}, {"sha": "376d34107628878130902a5bd072335d1bc4e8a1", "filename": "gcc/configure", "status": "modified", "additions": 45, "deletions": 2, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c7a27d566e7144451d1f0eb79d6b5866035995f/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c7a27d566e7144451d1f0eb79d6b5866035995f/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=8c7a27d566e7144451d1f0eb79d6b5866035995f", "patch": "@@ -945,6 +945,7 @@ enable_linker_build_id\n enable_libssp\n enable_default_ssp\n with_long_double_128\n+with_long_double_format\n with_gc\n with_system_zlib\n enable_maintainer_mode\n@@ -1738,6 +1739,9 @@ Optional Packages:\n   --with-glibc-version=M.N\n                           assume GCC used with glibc version M.N or later\n   --with-long-double-128  use 128-bit long double by default\n+  --with-long-double-format={ieee,ibm}\n+\t\t  Specify whether PowerPC long double uses IEEE or IBM format\n+\n   --with-gc={page,zone}   this option is not supported anymore. It used to\n                           choose the garbage collection mechanism to use with\n                           the compiler\n@@ -18442,7 +18446,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 18445 \"configure\"\n+#line 18449 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -18548,7 +18552,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 18551 \"configure\"\n+#line 18555 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -29185,6 +29189,45 @@ $as_echo \"#define TARGET_DEFAULT_LONG_DOUBLE_128 1\" >>confdefs.h\n \n fi\n \n+# Check if TFmode long double target should use the IBM extended double or IEEE\n+# 128-bit floating point formats if long doubles are 128-bits long.  The long\n+# double type can only be switched on powerpc64 bit Linux systems where VSX is\n+# supported.  Other PowerPC systems do not build the IEEE 128-bit emulator in\n+# libgcc.\n+\n+# Check whether --with-long-double-format was given.\n+if test \"${with_long_double_format+set}\" = set; then :\n+  withval=$with_long_double_format;\n+case \"$target:$with_long_double_format\" in\n+  powerpc64le-*-linux*:ieee | powerpc64le-*-linux*:ibm)\n+    :\n+    ;;\n+  powerpc64-*-linux*:ieee | powerpc64-*-linux*:ibm)\n+    # IEEE 128-bit emulation is only built on 64-bit VSX Linux systems\n+    case \"$with_cpu\" in\n+      power7 | power8 | power9 | power1*)\n+\t:\n+\t;;\n+      *)\n+\tas_fn_error \"Configuration option --with-long-double-format is only \\\n+supported if the default cpu is power7 or newer\" \"$LINENO\" 5\n+\twith_long_double_format=\"\"\n+\t;;\n+      esac\n+      ;;\n+  xpowerpc64*-*-linux*:*)\n+    as_fn_error \"--with-long-double-format argument should be ibm or ieee\" \"$LINENO\" 5\n+    with_long_double_format=\"\"\n+    ;;\n+  *)\n+    as_fn_error \"Configure option --with-long-double-format is only supported \\\n+on 64-bit PowerPC VSX Linux systems\" \"$LINENO\" 5\n+    with_long_double_format=\"\"\n+    ;;\n+esac\n+fi\n+\n+\n # Check if the target LIBC supports exporting the AT_PLATFORM and AT_HWCAP\n # values in the TCB.  Currently, only GLIBC 2.23 and later support this.\n gcc_cv_libc_provides_hwcap_in_tcb=no"}, {"sha": "6d645fe54123668326e019234dfec669601a1013", "filename": "gcc/configure.ac", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c7a27d566e7144451d1f0eb79d6b5866035995f/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c7a27d566e7144451d1f0eb79d6b5866035995f/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=8c7a27d566e7144451d1f0eb79d6b5866035995f", "patch": "@@ -5885,6 +5885,43 @@ if test x$gcc_cv_target_ldbl128 = xyes; then\n \t    [Define if TFmode long double should be the default])\n fi\n \n+# Check if TFmode long double target should use the IBM extended double or IEEE\n+# 128-bit floating point formats if long doubles are 128-bits long.  The long\n+# double type can only be switched on powerpc64 bit Linux systems where VSX is\n+# supported.  Other PowerPC systems do not build the IEEE 128-bit emulator in\n+# libgcc.\n+AC_ARG_WITH([long-double-format],\n+  [AS_HELP_STRING([--with-long-double-format={ieee,ibm}]\n+\t\t  [Specify whether PowerPC long double uses IEEE or IBM format])],[\n+case \"$target:$with_long_double_format\" in\n+  powerpc64le-*-linux*:ieee | powerpc64le-*-linux*:ibm)\n+    :\n+    ;;\n+  powerpc64-*-linux*:ieee | powerpc64-*-linux*:ibm)\n+    # IEEE 128-bit emulation is only built on 64-bit VSX Linux systems\n+    case \"$with_cpu\" in\n+      power7 | power8 | power9 | power1*)\n+\t:\n+\t;;\n+      *)\n+\tAC_MSG_ERROR([Configuration option --with-long-double-format is only \\\n+supported if the default cpu is power7 or newer])\n+\twith_long_double_format=\"\"\n+\t;;\n+      esac\n+      ;;\n+  xpowerpc64*-*-linux*:*)\n+    AC_MSG_ERROR([--with-long-double-format argument should be ibm or ieee])\n+    with_long_double_format=\"\"\n+    ;;\n+  *)\n+    AC_MSG_ERROR([Configure option --with-long-double-format is only supported \\\n+on 64-bit PowerPC VSX Linux systems])\n+    with_long_double_format=\"\"\n+    ;;\n+esac],\n+  [])\n+\n # Check if the target LIBC supports exporting the AT_PLATFORM and AT_HWCAP\n # values in the TCB.  Currently, only GLIBC 2.23 and later support this.\n gcc_cv_libc_provides_hwcap_in_tcb=no"}]}