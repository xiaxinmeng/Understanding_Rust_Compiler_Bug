{"sha": "b9baeecdcc22a80357e232383421c6cb0cd3ab69", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjliYWVlY2RjYzIyYTgwMzU3ZTIzMjM4MzQyMWM2Y2IwY2QzYWI2OQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard@codesourcery.com", "date": "2007-09-12T13:16:42Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2007-09-12T13:16:42Z"}, "message": "c-tree.h (grokfield): Add a \"tree *\" argument.\n\ngcc/\n\t* c-tree.h (grokfield): Add a \"tree *\" argument.\n\t* c-decl.c (grokdeclarator): Take a pointer to the decl's attributes.\n\tChain nested decl attributes to it.  Don't call decl_attributes here.\n\t(groktypename): Pass grokdeclarator a pointer to the attribute list.\n\t(start_decl, grokparm, push_parm_decl, start_function): Likewise.\n\t(grokfield): Take a pointer to the decl's attributes and pass\n\tit to grokdeclarator.\n\t* c-parser.c (c_parser_struct_declaration): Update the calls to\n\tgrokfield.  Call decl_attributes for anonymous struct and union\n\tfields.\n\nFrom-SVN: r128437", "tree": {"sha": "3cb5e6af2cd22e35ac9a75b750a8820ca617d258", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3cb5e6af2cd22e35ac9a75b750a8820ca617d258"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b9baeecdcc22a80357e232383421c6cb0cd3ab69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9baeecdcc22a80357e232383421c6cb0cd3ab69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9baeecdcc22a80357e232383421c6cb0cd3ab69", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9baeecdcc22a80357e232383421c6cb0cd3ab69/comments", "author": null, "committer": null, "parents": [{"sha": "ed557735d747bae60ca5d1c7f9f04088eaba5f69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed557735d747bae60ca5d1c7f9f04088eaba5f69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed557735d747bae60ca5d1c7f9f04088eaba5f69"}], "stats": {"total": 57, "additions": 39, "deletions": 18}, "files": [{"sha": "5c380f3a102400c80b4bc112b4efff92b9e8c9c7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9baeecdcc22a80357e232383421c6cb0cd3ab69/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9baeecdcc22a80357e232383421c6cb0cd3ab69/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b9baeecdcc22a80357e232383421c6cb0cd3ab69", "patch": "@@ -1,3 +1,16 @@\n+2007-09-12  Richard Sandiford  <richard@codesourcery.com>\n+\n+\t* c-tree.h (grokfield): Add a \"tree *\" argument.\n+\t* c-decl.c (grokdeclarator): Take a pointer to the decl's attributes.\n+\tChain nested decl attributes to it.  Don't call decl_attributes here.\n+\t(groktypename): Pass grokdeclarator a pointer to the attribute list.\n+\t(start_decl, grokparm, push_parm_decl, start_function): Likewise.\n+\t(grokfield): Take a pointer to the decl's attributes and pass\n+\tit to grokdeclarator.\n+\t* c-parser.c (c_parser_struct_declaration): Update the calls to\n+\tgrokfield.  Call decl_attributes for anonymous struct and union\n+\tfields.\n+\n 2007-09-12  Jan Hubicka  <jh@suse.cz>\n \n \t* c-objc-common.h (LANG_HOOKS_CALLGRAPH_EXPAND_FUNCTION): Kill."}, {"sha": "719c2897397050fccee7a5c1d2abd118edadaf82", "filename": "gcc/c-decl.c", "status": "modified", "additions": 19, "deletions": 15, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9baeecdcc22a80357e232383421c6cb0cd3ab69/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9baeecdcc22a80357e232383421c6cb0cd3ab69/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=b9baeecdcc22a80357e232383421c6cb0cd3ab69", "patch": "@@ -407,7 +407,7 @@ static tree lookup_name_in_scope (tree, struct c_scope *);\n static tree c_make_fname_decl (tree, int);\n static tree grokdeclarator (const struct c_declarator *,\n \t\t\t    struct c_declspecs *,\n-\t\t\t    enum decl_context, bool, tree *,\n+\t\t\t    enum decl_context, bool, tree *, tree *,\n \t\t\t    enum deprecated_states);\n static tree grokparms (struct c_arg_info *, bool);\n static void layout_array_type (tree);\n@@ -3141,7 +3141,7 @@ groktypename (struct c_type_name *type_name)\n   type_name->specs->attrs = NULL_TREE;\n \n   type = grokdeclarator (type_name->declarator, type_name->specs, TYPENAME,\n-\t\t\t false, NULL, DEPRECATED_NORMAL);\n+\t\t\t false, NULL, &attrs, DEPRECATED_NORMAL);\n \n   /* Apply attributes.  */\n   decl_attributes (&type, attrs, 0);\n@@ -3178,7 +3178,7 @@ start_decl (struct c_declarator *declarator, struct c_declspecs *declspecs,\n     deprecated_state = DEPRECATED_SUPPRESS;\n \n   decl = grokdeclarator (declarator, declspecs,\n-\t\t\t NORMAL, initialized, NULL,\n+\t\t\t NORMAL, initialized, NULL, &attributes,\n \t\t\t deprecated_state);\n   if (!decl)\n     return 0;\n@@ -3667,10 +3667,11 @@ finish_decl (tree decl, tree init, tree asmspec_tree)\n tree\n grokparm (const struct c_parm *parm)\n {\n+  tree attrs = parm->attrs;\n   tree decl = grokdeclarator (parm->declarator, parm->specs, PARM, false,\n-\t\t\t      NULL, DEPRECATED_NORMAL);\n+\t\t\t      NULL, &attrs, DEPRECATED_NORMAL);\n \n-  decl_attributes (&decl, parm->attrs, 0);\n+  decl_attributes (&decl, attrs, 0);\n \n   return decl;\n }\n@@ -3681,11 +3682,12 @@ grokparm (const struct c_parm *parm)\n void\n push_parm_decl (const struct c_parm *parm)\n {\n+  tree attrs = parm->attrs;\n   tree decl;\n \n   decl = grokdeclarator (parm->declarator, parm->specs, PARM, false, NULL,\n-\t\t\t DEPRECATED_NORMAL);\n-  decl_attributes (&decl, parm->attrs, 0);\n+\t\t\t &attrs, DEPRECATED_NORMAL);\n+  decl_attributes (&decl, attrs, 0);\n \n   decl = pushdecl (decl);\n \n@@ -3957,6 +3959,9 @@ warn_variable_length_array (const char *name, tree size)\n    INITIALIZED is true if the decl has an initializer.\n    WIDTH is non-NULL for bit-fields, and is a pointer to an INTEGER_CST node\n    representing the width of the bit-field.\n+   DECL_ATTRS points to the list of attributes that should be added to this\n+     decl.  Any nested attributes that belong on the decl itself will be\n+     added to this list.\n    DEPRECATED_STATE is a deprecated_states value indicating whether\n    deprecation warnings should be suppressed.\n \n@@ -3971,7 +3976,7 @@ static tree\n grokdeclarator (const struct c_declarator *declarator,\n \t\tstruct c_declspecs *declspecs,\n \t\tenum decl_context decl_context, bool initialized, tree *width,\n-\t\tenum deprecated_states deprecated_state)\n+\t\ttree *decl_attrs, enum deprecated_states deprecated_state)\n {\n   tree type = declspecs->type;\n   bool threadp = declspecs->thread_p;\n@@ -4615,6 +4620,7 @@ grokdeclarator (const struct c_declarator *declarator,\n \t  gcc_unreachable ();\n \t}\n     }\n+  *decl_attrs = chainon (returned_attrs, *decl_attrs);\n \n   /* Now TYPE has the actual type, apart from any qualifiers in\n      TYPE_QUALS.  */\n@@ -4649,7 +4655,6 @@ grokdeclarator (const struct c_declarator *declarator,\n       decl = build_decl (TYPE_DECL, declarator->u.id, type);\n       if (declspecs->explicit_signed_p)\n \tC_TYPEDEF_EXPLICITLY_SIGNED (decl) = 1;\n-      decl_attributes (&decl, returned_attrs, 0);\n       if (declspecs->inline_p)\n \tpedwarn (\"typedef %q+D declared %<inline%>\", decl);\n       return decl;\n@@ -4669,7 +4674,6 @@ grokdeclarator (const struct c_declarator *declarator,\n \tpedwarn (\"ISO C forbids const or volatile function types\");\n       if (type_quals)\n \ttype = c_build_qualified_type (type, type_quals);\n-      decl_attributes (&type, returned_attrs, 0);\n       return type;\n     }\n \n@@ -4987,8 +4991,6 @@ grokdeclarator (const struct c_declarator *declarator,\n      name of a variable.  Thus, if it's known before this, die horribly.  */\n     gcc_assert (!DECL_ASSEMBLER_NAME_SET_P (decl));\n \n-    decl_attributes (&decl, returned_attrs, 0);\n-\n     return decl;\n   }\n }\n@@ -5390,14 +5392,15 @@ start_struct (enum tree_code code, tree name)\n /* Process the specs, declarator and width (NULL if omitted)\n    of a structure component, returning a FIELD_DECL node.\n    WIDTH is non-NULL for bit-fields only, and is an INTEGER_CST node.\n+   DECL_ATTRS is as for grokdeclarator.\n \n    This is done during the parsing of the struct declaration.\n    The FIELD_DECL nodes are chained together and the lot of them\n    are ultimately passed to `build_struct' to make the RECORD_TYPE node.  */\n \n tree\n grokfield (struct c_declarator *declarator, struct c_declspecs *declspecs,\n-\t   tree width)\n+\t   tree width, tree *decl_attrs)\n {\n   tree value;\n \n@@ -5450,7 +5453,8 @@ grokfield (struct c_declarator *declarator, struct c_declspecs *declspecs,\n     }\n \n   value = grokdeclarator (declarator, declspecs, FIELD, false,\n-\t\t\t  width ? &width : NULL, DEPRECATED_NORMAL);\n+\t\t\t  width ? &width : NULL, decl_attrs,\n+\t\t\t  DEPRECATED_NORMAL);\n \n   finish_decl (value, NULL_TREE, NULL_TREE);\n   DECL_INITIAL (value) = width;\n@@ -6091,7 +6095,7 @@ start_function (struct c_declspecs *declspecs, struct c_declarator *declarator,\n   c_break_label = c_cont_label = size_zero_node;\n \n   decl1 = grokdeclarator (declarator, declspecs, FUNCDEF, true, NULL,\n-\t\t\t  DEPRECATED_NORMAL);\n+\t\t\t  &attributes, DEPRECATED_NORMAL);\n \n   /* If the declarator is not suitable for a function definition,\n      cause a syntax error.  */"}, {"sha": "4bbc39d32d8ea3f3df11afeaabf2966c3a704739", "filename": "gcc/c-parser.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9baeecdcc22a80357e232383421c6cb0cd3ab69/gcc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9baeecdcc22a80357e232383421c6cb0cd3ab69/gcc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parser.c?ref=b9baeecdcc22a80357e232383421c6cb0cd3ab69", "patch": "@@ -2030,7 +2030,10 @@ c_parser_struct_declaration (c_parser *parser)\n \t  /* Support for unnamed structs or unions as members of\n \t     structs or unions (which is [a] useful and [b] supports\n \t     MS P-SDK).  */\n-\t  ret = grokfield (build_id_declarator (NULL_TREE), specs, NULL_TREE);\n+\t  tree attrs = NULL;\n+\t  ret = grokfield (build_id_declarator (NULL_TREE), specs,\n+\t\t\t   NULL_TREE, &attrs);\n+\t  decl_attributes (&ret, attrs, 0);\n \t}\n       return ret;\n     }\n@@ -2070,7 +2073,7 @@ c_parser_struct_declaration (c_parser *parser)\n \t    }\n \t  if (c_parser_next_token_is_keyword (parser, RID_ATTRIBUTE))\n \t    postfix_attrs = c_parser_attributes (parser);\n-\t  d = grokfield (declarator, specs, width);\n+\t  d = grokfield (declarator, specs, width, &all_prefix_attrs);\n \t  decl_attributes (&d, chainon (postfix_attrs,\n \t\t\t\t\tall_prefix_attrs), 0);\n \t  TREE_CHAIN (d) = decls;"}, {"sha": "9fd696b925dbd7d69185894c46b6a87aa1566bfe", "filename": "gcc/c-tree.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9baeecdcc22a80357e232383421c6cb0cd3ab69/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9baeecdcc22a80357e232383421c6cb0cd3ab69/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=b9baeecdcc22a80357e232383421c6cb0cd3ab69", "patch": "@@ -476,7 +476,8 @@ extern tree finish_enum (tree, tree, tree);\n extern void finish_function (void);\n extern tree finish_struct (tree, tree, tree);\n extern struct c_arg_info *get_parm_info (bool);\n-extern tree grokfield (struct c_declarator *, struct c_declspecs *, tree);\n+extern tree grokfield (struct c_declarator *, struct c_declspecs *,\n+\t\t       tree, tree *);\n extern tree groktypename (struct c_type_name *);\n extern tree grokparm (const struct c_parm *);\n extern tree implicitly_declare (tree);"}]}