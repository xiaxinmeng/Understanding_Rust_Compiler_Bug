{"sha": "b52cd365d466139aec3b96b96ddddafcf139a1fb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjUyY2QzNjVkNDY2MTM5YWVjM2I5NmI5NmRkZGRhZmNmMTM5YTFmYg==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1995-01-26T00:40:49Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1995-01-26T00:40:49Z"}, "message": "(CONST_OK_FOR_LETTER_P): Add case for 'N'.  Correct comment.\n\n(ADJUST_INSN_LENGTH, SHORTEN_WITH_AJUST_INSN_LENGTH): New macros.\n\nFrom-SVN: r8825", "tree": {"sha": "1148dd667471f43eb96696561ab09878634bc7f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1148dd667471f43eb96696561ab09878634bc7f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b52cd365d466139aec3b96b96ddddafcf139a1fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b52cd365d466139aec3b96b96ddddafcf139a1fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b52cd365d466139aec3b96b96ddddafcf139a1fb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b52cd365d466139aec3b96b96ddddafcf139a1fb/comments", "author": null, "committer": null, "parents": [{"sha": "22e1ebf1d7572cef04eea271121cb78f7e0eded5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22e1ebf1d7572cef04eea271121cb78f7e0eded5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22e1ebf1d7572cef04eea271121cb78f7e0eded5"}], "stats": {"total": 28, "additions": 24, "deletions": 4}, "files": [{"sha": "f8d6d0ec5ab2161e91ea74203656d59bbb701485", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b52cd365d466139aec3b96b96ddddafcf139a1fb/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b52cd365d466139aec3b96b96ddddafcf139a1fb/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=b52cd365d466139aec3b96b96ddddafcf139a1fb", "patch": "@@ -605,23 +605,23 @@ extern enum reg_class reg_class_from_letter[];\n    C is the letter, and VALUE is a constant value.\n    Return 1 if VALUE is in the range specified by C.\n \tI: arithmetic operand -127..128, as used in add, sub, etc\n+\tK: shift operand 1,2,8 or 16\n \tL: logical operand 0..255, as used in and, or, etc.\n-\tJ: something ok as a move source - so it must be easy to make\n \tM: constant 1\n-\tN: constant 0\n-\tK: shift operand 1,2,8 or 16 */\n+\tN: constant 0  */\n \n \n #define CONST_OK_FOR_I(VALUE) (((int)(VALUE))>= -128 && ((int)(VALUE)) <= 127)\n+#define CONST_OK_FOR_K(VALUE) ((VALUE)==1||(VALUE)==2||(VALUE)==8||(VALUE)==16)\n #define CONST_OK_FOR_L(VALUE) (((int)(VALUE))>=    0 && ((int)(VALUE)) <= 255)\n #define CONST_OK_FOR_M(VALUE) ((VALUE)==1)\n #define CONST_OK_FOR_N(VALUE) ((VALUE)==0)\n-#define CONST_OK_FOR_K(VALUE) ((VALUE)==1||(VALUE)==2||(VALUE)==8||(VALUE)==16)\n #define CONST_OK_FOR_LETTER_P(VALUE, C)     \\\n      ((C) == 'I' ? CONST_OK_FOR_I (VALUE)   \\\n     : (C) == 'K' ? CONST_OK_FOR_K (VALUE)   \\\n     : (C) == 'L' ? CONST_OK_FOR_L (VALUE)   \\\n     : (C) == 'M' ? CONST_OK_FOR_M (VALUE)   \\\n+    : (C) == 'N' ? CONST_OK_FOR_N (VALUE)   \\\n     : 0)\n \n /* Similar, but for floating constants, and defining letters G and H.\n@@ -1494,6 +1494,8 @@ extern struct rtx_def *prepare_scc_operands();\n extern struct rtx_def *table_lab;\n \n \n+/* ??? Wrong, this is an incomplete enum type.  Fix this to do it the same\n+   way that the mips compiler does this.  */\n extern enum attr_cpu sh_cpu;\t/* target cpu */\n \n /* Declare functions defined in sh.c and used in templates. */\n@@ -1523,3 +1525,21 @@ extern char *max_si;\n extern char *max_hi;\n extern int max_count_si;\n extern int max_count_hi;\n+\f\n+/* Instructions with unfilled delay slots take up an extra two bytes for\n+   the nop in the delay slot.  */\n+\n+#define ADJUST_INSN_LENGTH(X, LENGTH)\t\t\t\t\\\n+  if (((GET_CODE (X) == INSN\t\t\t\t\t\\\n+\t&& GET_CODE (PATTERN (X)) != SEQUENCE\t\t\t\\\n+\t&& GET_CODE (PATTERN (X)) != USE\t\t\t\\\n+\t&& GET_CODE (PATTERN (X)) != CLOBBER)\t\t\t\\\n+       || GET_CODE (X) == CALL_INSN\t\t\t\t\\\n+       || (GET_CODE (X) == JUMP_INSN\t\t\t\t\\\n+\t   && GET_CODE (PATTERN (X)) != ADDR_DIFF_VEC\t\t\\\n+\t   && GET_CODE (PATTERN (X)) != ADDR_VEC))\t\t\\\n+      && get_attr_needs_delay_slot (X) == NEEDS_DELAY_SLOT_YES)\t\\\n+   LENGTH += 2;\n+\n+/* Enable a bug fix for the shorten_branches pass.  */\n+#define SHORTEN_WITH_ADJUST_INSN_LENGTH"}]}