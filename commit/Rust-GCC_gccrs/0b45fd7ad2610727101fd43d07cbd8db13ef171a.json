{"sha": "0b45fd7ad2610727101fd43d07cbd8db13ef171a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGI0NWZkN2FkMjYxMDcyNzEwMWZkNDNkMDdjYmQ4ZGIxM2VmMTcxYQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2008-08-28T08:31:37Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2008-08-28T08:31:37Z"}, "message": "re PR tree-optimization/37005 (GNAT Bug Box for cd2a24e.adb:37 at tree-vrp.c:392)\n\n2008-08-28  Richard Guenther  <rguenther@suse.de>\n\n\tPR middle-end/37005\n\t* fold-const.c (maybe_canonicalize_comparison_1): Require\n\tundefined overflow only for canonicalizing A +- CST cmp CST.\n\tMake sure to not generate new constants that are not inside\n\ttheir TYPE_MIN/MAX_VALUE range.\n\t(maybe_canonicalize_comparison): Remove undefined overflow\n\tchecking from here.\n\t(fold_binary): Remove now duplicate folding.\n\nFrom-SVN: r139702", "tree": {"sha": "f4a4e7f2ac44132dcb34b9ca2977087e5dd6f259", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f4a4e7f2ac44132dcb34b9ca2977087e5dd6f259"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b45fd7ad2610727101fd43d07cbd8db13ef171a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b45fd7ad2610727101fd43d07cbd8db13ef171a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b45fd7ad2610727101fd43d07cbd8db13ef171a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b45fd7ad2610727101fd43d07cbd8db13ef171a/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4717882f05433fbd40ad542009015ae669f1d4a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4717882f05433fbd40ad542009015ae669f1d4a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4717882f05433fbd40ad542009015ae669f1d4a6"}], "stats": {"total": 67, "additions": 33, "deletions": 34}, "files": [{"sha": "6e943654e637a971757aa70449ef94f0ccd37a80", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b45fd7ad2610727101fd43d07cbd8db13ef171a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b45fd7ad2610727101fd43d07cbd8db13ef171a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0b45fd7ad2610727101fd43d07cbd8db13ef171a", "patch": "@@ -1,3 +1,14 @@\n+2008-08-28  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/37005\n+\t* fold-const.c (maybe_canonicalize_comparison_1): Require\n+\tundefined overflow only for canonicalizing A +- CST cmp CST.\n+\tMake sure to not generate new constants that are not inside\n+\ttheir TYPE_MIN/MAX_VALUE range.\n+\t(maybe_canonicalize_comparison): Remove undefined overflow\n+\tchecking from here.\n+\t(fold_binary): Remove now duplicate folding.\n+\n 2008-08-27  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* c-typeck.c (convert_for_assignment): Adjust WARN_FOR_ASSIGNMENT"}, {"sha": "21142b85bc82880385b059750ebddadcd17f0ee3", "filename": "gcc/fold-const.c", "status": "modified", "additions": 22, "deletions": 34, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b45fd7ad2610727101fd43d07cbd8db13ef171a/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b45fd7ad2610727101fd43d07cbd8db13ef171a/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=0b45fd7ad2610727101fd43d07cbd8db13ef171a", "patch": "@@ -8289,9 +8289,14 @@ maybe_canonicalize_comparison_1 (enum tree_code code, tree type,\n   int sgn0;\n   bool swap = false;\n \n-  /* Match A +- CST code arg1 and CST code arg1.  */\n-  if (!(((code0 == MINUS_EXPR\n-          || code0 == PLUS_EXPR)\n+  /* Match A +- CST code arg1 and CST code arg1.  We can change the\n+     first form only if overflow is undefined.  */\n+  if (!((TYPE_OVERFLOW_UNDEFINED (TREE_TYPE (arg0))\n+\t /* In principle pointers also have undefined overflow behavior,\n+\t    but that causes problems elsewhere.  */\n+\t && !POINTER_TYPE_P (TREE_TYPE (arg0))\n+\t && (code0 == MINUS_EXPR\n+\t     || code0 == PLUS_EXPR)\n          && TREE_CODE (TREE_OPERAND (arg0, 1)) == INTEGER_CST)\n \t|| code0 == INTEGER_CST))\n     return NULL_TREE;\n@@ -8352,9 +8357,21 @@ maybe_canonicalize_comparison_1 (enum tree_code code, tree type,\n       *strict_overflow_p = true;\n     }\n \n-  /* Now build the constant reduced in magnitude.  */\n+  /* Now build the constant reduced in magnitude.  But not if that\n+     would produce one outside of its types range.  */\n+  if (INTEGRAL_TYPE_P (TREE_TYPE (cst0))\n+      && ((sgn0 == 1\n+\t   && TYPE_MIN_VALUE (TREE_TYPE (cst0))\n+\t   && tree_int_cst_equal (cst0, TYPE_MIN_VALUE (TREE_TYPE (cst0))))\n+\t  || (sgn0 == -1\n+\t      && TYPE_MAX_VALUE (TREE_TYPE (cst0))\n+\t      && tree_int_cst_equal (cst0, TYPE_MAX_VALUE (TREE_TYPE (cst0))))))\n+    /* We cannot swap the comparison here as that would cause us to\n+       endlessly recurse.  */\n+    return NULL_TREE;\n+\n   t = int_const_binop (sgn0 == -1 ? PLUS_EXPR : MINUS_EXPR,\n-  \t\t       cst0, build_int_cst (TREE_TYPE (cst0), 1), 0);\n+\t\t       cst0, build_int_cst (TREE_TYPE (cst0), 1), 0);\n   if (code0 != INTEGER_CST)\n     t = fold_build2 (code0, TREE_TYPE (arg0), TREE_OPERAND (arg0, 0), t);\n \n@@ -8380,12 +8397,6 @@ maybe_canonicalize_comparison (enum tree_code code, tree type,\n   const char * const warnmsg = G_(\"assuming signed overflow does not occur \"\n \t\t\t\t  \"when reducing constant in comparison\");\n \n-  /* In principle pointers also have undefined overflow behavior,\n-     but that causes problems elsewhere.  */\n-  if (!TYPE_OVERFLOW_UNDEFINED (TREE_TYPE (arg0))\n-      || POINTER_TYPE_P (TREE_TYPE (arg0)))\n-    return NULL_TREE;\n-\n   /* Try canonicalization by simplifying arg0.  */\n   strict_overflow_p = false;\n   t = maybe_canonicalize_comparison_1 (code, type, arg0, arg1,\n@@ -12424,29 +12435,6 @@ fold_binary (enum tree_code code, tree type, tree op0, tree op1)\n \t    }\n \t}\n \n-      /* Change X >= C to X > (C - 1) and X < C to X <= (C - 1) if C > 0.\n-\t This transformation affects the cases which are handled in later\n-\t optimizations involving comparisons with non-negative constants.  */\n-      if (TREE_CODE (arg1) == INTEGER_CST\n-\t  && TREE_CODE (arg0) != INTEGER_CST\n-\t  && tree_int_cst_sgn (arg1) > 0)\n-\t{\n-\t  if (code == GE_EXPR)\n-\t    {\n-\t      arg1 = const_binop (MINUS_EXPR, arg1,\n-\t\t\t          build_int_cst (TREE_TYPE (arg1), 1), 0);\n-\t      return fold_build2 (GT_EXPR, type, arg0,\n-\t\t\t\t  fold_convert (TREE_TYPE (arg0), arg1));\n-\t    }\n-\t  if (code == LT_EXPR)\n-\t    {\n-\t      arg1 = const_binop (MINUS_EXPR, arg1,\n-\t\t\t          build_int_cst (TREE_TYPE (arg1), 1), 0);\n-\t      return fold_build2 (LE_EXPR, type, arg0,\n-\t\t\t\t  fold_convert (TREE_TYPE (arg0), arg1));\n-\t    }\n-\t}\n-\n       /* Comparisons with the highest or lowest possible integer of\n \t the specified precision will have known values.  */\n       {"}]}