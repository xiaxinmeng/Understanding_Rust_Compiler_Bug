{"sha": "129b5668f18f6d4bc40a21566f75bdc280c594ea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTI5YjU2NjhmMThmNmQ0YmM0MGEyMTU2NmY3NWJkYzI4MGM1OTRlYQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2017-12-19T04:35:59Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2017-12-19T04:35:59Z"}, "message": "Revert\n\t2017-11-19  Jeff Law  <law@redhat.com>\n\n\t* tree-ssa-dom.c (record_equivalences_from_phis): Fix handling\n\tof degenerates resulting from ignoring an edge.\n\nFrom-SVN: r255802", "tree": {"sha": "5e2da121cd6f7fc6dbdcf0dd4f7e989938f1815f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5e2da121cd6f7fc6dbdcf0dd4f7e989938f1815f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/129b5668f18f6d4bc40a21566f75bdc280c594ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/129b5668f18f6d4bc40a21566f75bdc280c594ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/129b5668f18f6d4bc40a21566f75bdc280c594ea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/129b5668f18f6d4bc40a21566f75bdc280c594ea/comments", "author": null, "committer": null, "parents": [{"sha": "8c12859969bf45a04ef62762e130da3b5d2bc6dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c12859969bf45a04ef62762e130da3b5d2bc6dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c12859969bf45a04ef62762e130da3b5d2bc6dc"}], "stats": {"total": 29, "additions": 13, "deletions": 16}, "files": [{"sha": "b5854f7a67ce4c14c9a8444dbe4e17d2986e601b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/129b5668f18f6d4bc40a21566f75bdc280c594ea/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/129b5668f18f6d4bc40a21566f75bdc280c594ea/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=129b5668f18f6d4bc40a21566f75bdc280c594ea", "patch": "@@ -1,3 +1,11 @@\n+2017-12-18  Jeff Law  <law@redhat.com>\n+\n+\tRevert\n+\t2017-11-19  Jeff Law  <law@redhat.com>\n+\n+\t* tree-ssa-dom.c (record_equivalences_from_phis): Fix handling\n+\tof degenerates resulting from ignoring an edge.\n+\n 2017-12-18  Martin Sebor  <msebor@redhat.com>\n \n \tPR middle-end/83373"}, {"sha": "05bc807071f8f0c8cf1832af72f02579cf852ec1", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 5, "deletions": 16, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/129b5668f18f6d4bc40a21566f75bdc280c594ea/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/129b5668f18f6d4bc40a21566f75bdc280c594ea/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=129b5668f18f6d4bc40a21566f75bdc280c594ea", "patch": "@@ -1109,7 +1109,6 @@ record_equivalences_from_phis (basic_block bb)\n       tree rhs = NULL;\n       size_t i;\n \n-      bool ignored_phi_arg = false;\n       for (i = 0; i < gimple_phi_num_args (phi); i++)\n \t{\n \t  tree t = gimple_phi_arg_def (phi, i);\n@@ -1120,14 +1119,10 @@ record_equivalences_from_phis (basic_block bb)\n \t  if (lhs == t)\n \t    continue;\n \n-\t  /* We want to track if we ignored any PHI arguments because\n-\t     their associated edges were not executable.  This impacts\n-\t     whether or not we can use any equivalence we might discover.  */\n+\t  /* If the associated edge is not marked as executable, then it\n+\t     can be ignored.  */\n \t  if ((gimple_phi_arg_edge (phi, i)->flags & EDGE_EXECUTABLE) == 0)\n-\t    {\n-\t      ignored_phi_arg = true;\n-\t      continue;\n-\t    }\n+\t    continue;\n \n \t  t = dom_valueize (t);\n \n@@ -1152,15 +1147,9 @@ record_equivalences_from_phis (basic_block bb)\n \t a useful equivalence.  We do not need to record unwind data for\n \t this, since this is a true assignment and not an equivalence\n \t inferred from a comparison.  All uses of this ssa name are dominated\n-\t by this assignment, so unwinding just costs time and space.\n-\n-\t Note that if we ignored a PHI argument and the resulting equivalence\n-\t is SSA_NAME = SSA_NAME.  Then we can not use the equivalence as the\n-\t uses of the LHS SSA_NAME are not necessarily dominated by the\n-\t assignment of the RHS SSA_NAME.  */\n+\t by this assignment, so unwinding just costs time and space.  */\n       if (i == gimple_phi_num_args (phi)\n-\t  && may_propagate_copy (lhs, rhs)\n-\t  && (!ignored_phi_arg || TREE_CODE (rhs) != SSA_NAME))\n+\t  && may_propagate_copy (lhs, rhs))\n \tset_ssa_name_value (lhs, rhs);\n     }\n }"}]}