{"sha": "a2d196e75cef95c2b70734ad02e94f9da0e769fe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTJkMTk2ZTc1Y2VmOTVjMmI3MDczNGFkMDJlOTRmOWRhMGU3NjlmZQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-05-19T15:49:21Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-05-19T22:04:45Z"}, "message": "libstdc++: Use RDRAND as fallback if RDSEED keeps failing (PR 94087)\n\nIt's not difficult for multiple threads to drain the entropy available\nto the RDSEED instruction, at which point we throw an exception. This\nchange will try to use RDRAND after RDSEED fails repeatedly, and only\nthrow if RDRAND also fails repeatedly. This doesn't guarantee a random\nvalue can always be read, but reduces the likelihood of failure when\nusing the RDSEED instruction.\n\n\tPR libstdc++/94087\n\t* src/c++11/random.cc (__x86_rdseed): Allow fallback function to be\n\tpassed in.\n\t(__x86_rdseed_rdrand): New function that uses rdseed with rdrand\n\tfallback.\n\t(random_device::_M_init): Use __x86_rdseed_rdrand when both\n\tinstructions are available.\n\t* testsuite/26_numerics/random/random_device/94087.cc: New test.", "tree": {"sha": "33a6509388a2e55d1802603a4e17bf04b71ff786", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/33a6509388a2e55d1802603a4e17bf04b71ff786"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a2d196e75cef95c2b70734ad02e94f9da0e769fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2d196e75cef95c2b70734ad02e94f9da0e769fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2d196e75cef95c2b70734ad02e94f9da0e769fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2d196e75cef95c2b70734ad02e94f9da0e769fe/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "453954451be68d22462442268a29f54809182d2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/453954451be68d22462442268a29f54809182d2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/453954451be68d22462442268a29f54809182d2b"}], "stats": {"total": 100, "additions": 98, "deletions": 2}, "files": [{"sha": "67ca5b76d21d2a8d462290ac68d3dedfb9fd09b9", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2d196e75cef95c2b70734ad02e94f9da0e769fe/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2d196e75cef95c2b70734ad02e94f9da0e769fe/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a2d196e75cef95c2b70734ad02e94f9da0e769fe", "patch": "@@ -1,3 +1,14 @@\n+2020-05-19  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/94087\n+\t* src/c++11/random.cc (__x86_rdseed): Allow fallback function to be\n+\tpassed in.\n+\t(__x86_rdseed_rdrand): New function that uses rdseed with rdrand\n+\tfallback.\n+\t(random_device::_M_init): Use __x86_rdseed_rdrand when both\n+\tinstructions are available.\n+\t* testsuite/26_numerics/random/random_device/94087.cc: New test.\n+\n 2020-05-19  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/66439"}, {"sha": "62ed274479aed78906101358d560fd19e7c48451", "filename": "libstdc++-v3/src/c++11/random.cc", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2d196e75cef95c2b70734ad02e94f9da0e769fe/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Frandom.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2d196e75cef95c2b70734ad02e94f9da0e769fe/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Frandom.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Frandom.cc?ref=a2d196e75cef95c2b70734ad02e94f9da0e769fe", "patch": "@@ -97,20 +97,33 @@ namespace std _GLIBCXX_VISIBILITY(default)\n #if USE_RDSEED\n     unsigned int\n     __attribute__ ((target(\"rdseed\")))\n-    __x86_rdseed(void*)\n+    __x86_rdseed(void* fallback)\n     {\n       unsigned int retries = 100;\n       unsigned int val;\n \n       while (__builtin_ia32_rdseed_si_step(&val) == 0)\n \t{\n \t  if (--retries == 0)\n-\t    std::__throw_runtime_error(__N(\"random_device: rdseed failed\"));\n+\t    {\n+\t      if (auto f = reinterpret_cast<unsigned int(*)(void*)>(fallback))\n+\t\treturn f(nullptr);\n+\t      std::__throw_runtime_error(__N(\"random_device: rdseed failed\"));\n+\t    }\n \t  __builtin_ia32_pause();\n \t}\n \n       return val;\n     }\n+\n+#if USE_RDRAND\n+    unsigned int\n+    __attribute__ ((target(\"rdseed,rdrnd\")))\n+    __x86_rdseed_rdrand(void*)\n+    {\n+      return __x86_rdseed(reinterpret_cast<void*>(&__x86_rdrand));\n+    }\n+#endif\n #endif\n \n #ifdef _GLIBCXX_USE_CRT_RAND_S\n@@ -205,6 +218,15 @@ namespace std _GLIBCXX_VISIBILITY(default)\n \t    __cpuid_count(7, 0, eax, ebx, ecx, edx);\n \t    if (ebx & bit_RDSEED)\n \t      {\n+#ifdef USE_RDRAND\n+\t\t// CPUID.01H:ECX.RDRAND[bit 30]\n+\t\t__cpuid(1, eax, ebx, ecx, edx);\n+\t\tif (ecx & bit_RDRND)\n+\t\t  {\n+\t\t    _M_func = &__x86_rdseed_rdrand;\n+\t\t    return;\n+\t\t  }\n+#endif\n \t\t_M_func = &__x86_rdseed;\n \t\treturn;\n \t      }"}, {"sha": "cfcc261906e94fc4199dba3c2b8e1f314dff458b", "filename": "libstdc++-v3/testsuite/26_numerics/random/random_device/94087.cc", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2d196e75cef95c2b70734ad02e94f9da0e769fe/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Frandom_device%2F94087.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2d196e75cef95c2b70734ad02e94f9da0e769fe/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Frandom_device%2F94087.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Frandom_device%2F94087.cc?ref=a2d196e75cef95c2b70734ad02e94f9da0e769fe", "patch": "@@ -0,0 +1,63 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run }\n+// { dg-options \"-pthread\"  }\n+// { dg-require-effective-target c++11 }\n+// { dg-require-effective-target pthread }\n+// { dg-require-gthreads \"\" }\n+\n+#include <random>\n+#include <memory>\n+#include <thread>\n+#include <cstdio>\n+\n+bool\n+random_device_available(const char* token) noexcept\n+{\n+  try {\n+    std::random_device dev(token);\n+    return true;\n+  } catch (...) {\n+    std::printf(\"random_device(\\\"%s\\\") not available\\n\", token);\n+    return false;\n+  }\n+}\n+\n+void read_random_device(const char* token, int iterations)\n+{\n+  std::random_device dev(token);\n+    for (int i = 0; i != iterations; ++i)\n+      (void) dev();\n+}\n+\n+int main() {\n+  std::thread workers[8];\n+\n+  // N.B. don't test /dev/random as it might block, and /dev/urandom\n+  // \"can incur an appreciable delay when requesting large amounts of data\".\n+  for (const char* dev : { \"default\", \"rdrand\", \"rdseed\", \"rand_s\" })\n+  {\n+    if (random_device_available(dev))\n+    {\n+      for (auto& w : workers)\n+\tw = std::thread{read_random_device, dev, 1000};\n+      for (auto& w : workers)\n+\tw.join();\n+    }\n+  }\n+}"}]}