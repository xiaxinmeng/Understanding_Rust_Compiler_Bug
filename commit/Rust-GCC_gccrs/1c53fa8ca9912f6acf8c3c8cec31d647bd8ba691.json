{"sha": "1c53fa8ca9912f6acf8c3c8cec31d647bd8ba691", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWM1M2ZhOGNhOTkxMmY2YWNmOGMzYzhjZWMzMWQ2NDdiZDhiYTY5MQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2018-04-26T12:18:58Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2018-04-26T12:18:58Z"}, "message": "re PR libstdc++/85116 (std::min_element does not optimize well with inlined predicate)\n\n2018-04-26  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/85116\n\t* tree-ssa-loop-ch.c (do_while_loop_p): A do-while loop should\n\thave a loop exit from the single latch predecessor.  Remove\n\tcase of header with just condition.\n\t(ch_base::copy_headers): Exclude infinite loops from any\n\tprocessing.\n\t(pass_ch::execute): Record exits.\n\n\t* gcc.dg/tree-ssa/copy-headers-2.c: New testcase.\n\t* gcc.dg/tree-ssa/copy-headers-3.c: Likewise.\n\t* gcc.dg/tree-ssa/copy-headers-4.c: Likewise.\n\t* gcc.dg/tree-ssa/loadpre6.c: Adjust.\n\nFrom-SVN: r259672", "tree": {"sha": "f4f5507e0f552943eaa12d63ed635e309b424b20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f4f5507e0f552943eaa12d63ed635e309b424b20"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c53fa8ca9912f6acf8c3c8cec31d647bd8ba691", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c53fa8ca9912f6acf8c3c8cec31d647bd8ba691", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c53fa8ca9912f6acf8c3c8cec31d647bd8ba691", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c53fa8ca9912f6acf8c3c8cec31d647bd8ba691/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ae05281f4ac17db1d602bdd59d3fdd5acc3752ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae05281f4ac17db1d602bdd59d3fdd5acc3752ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae05281f4ac17db1d602bdd59d3fdd5acc3752ff"}], "stats": {"total": 114, "additions": 104, "deletions": 10}, "files": [{"sha": "2fed948fd220a3e942f1dba72a21dd4ac880a254", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c53fa8ca9912f6acf8c3c8cec31d647bd8ba691/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c53fa8ca9912f6acf8c3c8cec31d647bd8ba691/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1c53fa8ca9912f6acf8c3c8cec31d647bd8ba691", "patch": "@@ -1,3 +1,13 @@\n+2018-04-26  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/85116\n+\t* tree-ssa-loop-ch.c (do_while_loop_p): A do-while loop should\n+\thave a loop exit from the single latch predecessor.  Remove\n+\tcase of header with just condition.\n+\t(ch_base::copy_headers): Exclude infinite loops from any\n+\tprocessing.\n+\t(pass_ch::execute): Record exits.\n+\n 2018-04-26  Richard Biener  <rguenther@suse.de>\n \n \t* tree-vect-data-refs.c (vect_get_data_access_cost): Get"}, {"sha": "a4d32ec2574ceb3a63d9a1c92c7f0215120652ce", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c53fa8ca9912f6acf8c3c8cec31d647bd8ba691/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c53fa8ca9912f6acf8c3c8cec31d647bd8ba691/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1c53fa8ca9912f6acf8c3c8cec31d647bd8ba691", "patch": "@@ -1,3 +1,11 @@\n+2018-04-26  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/85116\n+\t* gcc.dg/tree-ssa/copy-headers-2.c: New testcase.\n+\t* gcc.dg/tree-ssa/copy-headers-3.c: Likewise.\n+\t* gcc.dg/tree-ssa/copy-headers-4.c: Likewise.\n+\t* gcc.dg/tree-ssa/loadpre6.c: Adjust.\n+\n 2018-04-25  Sebastian Peryt  <sebastian.peryt@intel.com>\n \n \tPR target/85473"}, {"sha": "7f1bfe161c775f1c5e01462d36e6dc41579e235f", "filename": "gcc/testsuite/gcc.dg/tree-ssa/copy-headers-2.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c53fa8ca9912f6acf8c3c8cec31d647bd8ba691/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fcopy-headers-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c53fa8ca9912f6acf8c3c8cec31d647bd8ba691/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fcopy-headers-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fcopy-headers-2.c?ref=1c53fa8ca9912f6acf8c3c8cec31d647bd8ba691", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-ch2-details\" } */\n+\n+int *a, *b;\n+int test(int n, int k)\n+{\n+  int it = 0;\n+  while (++it < n)\n+    {\n+      if (it % k == 1)\n+\ta[it] = 0;\n+      else\n+\tb[it] = 1;\n+    }\n+}\n+\n+/* { dg-final { scan-tree-dump \"is now do-while loop\" \"ch2\" } } */"}, {"sha": "6b63cdfab28138d6a0f77cbcbd590aff3400c88e", "filename": "gcc/testsuite/gcc.dg/tree-ssa/copy-headers-3.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c53fa8ca9912f6acf8c3c8cec31d647bd8ba691/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fcopy-headers-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c53fa8ca9912f6acf8c3c8cec31d647bd8ba691/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fcopy-headers-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fcopy-headers-3.c?ref=1c53fa8ca9912f6acf8c3c8cec31d647bd8ba691", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fgimple -fdump-tree-ch2-details\" } */\n+\n+int __GIMPLE (startwith(\"ch\"))\n+test2 (int n)\n+{\n+bb_3:\n+  if (n_1(D) > 0)\n+    goto bb_3;\n+  else\n+    goto bb_4;\n+\n+bb_4:\n+  return;\n+\n+}\n+\n+/* { dg-final { scan-tree-dump \"is do-while loop\" \"ch2\" } } */\n+/* { dg-final { scan-tree-dump-not \"is not do-while loop\" \"ch2\" } } */"}, {"sha": "88466c6e68ffd687fc7d494a151b47a45fa22ea9", "filename": "gcc/testsuite/gcc.dg/tree-ssa/copy-headers-4.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c53fa8ca9912f6acf8c3c8cec31d647bd8ba691/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fcopy-headers-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c53fa8ca9912f6acf8c3c8cec31d647bd8ba691/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fcopy-headers-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fcopy-headers-4.c?ref=1c53fa8ca9912f6acf8c3c8cec31d647bd8ba691", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-ch2-details\" } */\n+\n+int *a, *b;\n+int test(int n, int k)\n+{\n+  int it = 0;\n+  do\n+    {\n+      if (it % k == 1)\n+\ta[it] = 0;\n+      else\n+\tb[it] = 1;\n+    }\n+  while (++it < n);\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"is not do-while loop\" \"ch2\" } } */"}, {"sha": "028becdc6e3015ec14b53d4547f5aac154c5ba82", "filename": "gcc/testsuite/gcc.dg/tree-ssa/loadpre6.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c53fa8ca9912f6acf8c3c8cec31d647bd8ba691/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floadpre6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c53fa8ca9912f6acf8c3c8cec31d647bd8ba691/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floadpre6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floadpre6.c?ref=1c53fa8ca9912f6acf8c3c8cec31d647bd8ba691", "patch": "@@ -75,4 +75,4 @@ main (void)\n \n /* { dg-final { scan-tree-dump-not \"= unexpanded_var_list;\" \"fre1\" } } */\n /* { dg-final { scan-tree-dump-times \"Eliminated: 1\" 1 \"pre\" } } */\n-/* { dg-final { scan-tree-dump-times \"Insertions: 2\" 1 \"pre\" } } */\n+/* { dg-final { scan-tree-dump-times \"Insertions: 1\" 1 \"pre\" } } */"}, {"sha": "6b5c82c50a716912281c66ccdaf26c21396fa1b8", "filename": "gcc/tree-ssa-loop-ch.c", "status": "modified", "additions": 31, "deletions": 9, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c53fa8ca9912f6acf8c3c8cec31d647bd8ba691/gcc%2Ftree-ssa-loop-ch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c53fa8ca9912f6acf8c3c8cec31d647bd8ba691/gcc%2Ftree-ssa-loop-ch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ch.c?ref=1c53fa8ca9912f6acf8c3c8cec31d647bd8ba691", "patch": "@@ -165,17 +165,28 @@ do_while_loop_p (struct loop *loop)\n       return false;\n     }\n \n-  /* If the header contains just a condition, it is not a do-while loop.  */\n-  stmt = last_and_only_stmt (loop->header);\n-  if (stmt\n-      && gimple_code (stmt) == GIMPLE_COND)\n+  /* If the latch does not have a single predecessor, it is not a\n+     do-while loop.  */\n+  if (!single_pred_p (loop->latch))\n+    {\n+      if (dump_file && (dump_flags & TDF_DETAILS))\n+\tfprintf (dump_file,\n+\t\t \"Loop %i is not do-while loop: latch has multiple \"\n+\t\t \"predecessors.\\n\", loop->num);\n+      return false;\n+    }\n+\n+  /* If the latch predecessor doesn't exit the loop, it is not a\n+     do-while loop.  */\n+  if (!loop_exits_from_bb_p (loop, single_pred (loop->latch)))\n     {\n       if (dump_file && (dump_flags & TDF_DETAILS))\n \tfprintf (dump_file,\n-\t\t \"Loop %i is not do-while loop: \"\n-\t\t \"header contains just condition.\\n\", loop->num);\n+\t\t \"Loop %i is not do-while loop: latch predecessor \"\n+\t\t \"does not exit loop.\\n\", loop->num);\n       return false;\n     }\n+\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     fprintf (dump_file, \"Loop %i is do-while loop\\n\", loop->num);\n \n@@ -305,8 +316,9 @@ ch_base::copy_headers (function *fun)\n       /* If the loop is already a do-while style one (either because it was\n \t written as such, or because jump threading transformed it into one),\n \t we might be in fact peeling the first iteration of the loop.  This\n-\t in general is not a good idea.  */\n-      if (!process_loop_p (loop))\n+\t in general is not a good idea.  Also avoid touching infinite loops.  */\n+      if (!loop_has_exit_edges (loop)\n+\t  || !process_loop_p (loop))\n \tcontinue;\n \n       /* Iterate the header copying up to limit; this takes care of the cases\n@@ -392,6 +404,15 @@ ch_base::copy_headers (function *fun)\n       split_edge (loop_preheader_edge (loop));\n       split_edge (loop_latch_edge (loop));\n \n+      if (dump_file && (dump_flags & TDF_DETAILS))\n+\t{\n+\t  if (do_while_loop_p (loop))\n+\t    fprintf (dump_file, \"Loop %d is now do-while loop.\\n\", loop->num);\n+\t  else\n+\t    fprintf (dump_file, \"Loop %d is still not do-while loop.\\n\",\n+\t\t     loop->num);\n+\t}\n+\n       changed = true;\n     }\n \n@@ -409,7 +430,8 @@ unsigned int\n pass_ch::execute (function *fun)\n {\n   loop_optimizer_init (LOOPS_HAVE_PREHEADERS\n-\t\t       | LOOPS_HAVE_SIMPLE_LATCHES);\n+\t\t       | LOOPS_HAVE_SIMPLE_LATCHES\n+\t\t       | LOOPS_HAVE_RECORDED_EXITS);\n \n   unsigned int res = copy_headers (fun);\n "}]}