{"sha": "c154ba66ef8560de3bee1ec17242cdaa5fe9e53c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzE1NGJhNjZlZjg1NjBkZTNiZWUxZWMxNzI0MmNkYWE1ZmU5ZTUzYw==", "commit": {"author": {"name": "Neil Booth", "email": "neilb@earthling.net", "date": "2000-08-17T17:52:48Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2000-08-17T17:52:48Z"}, "message": "cppinit.c (sort_options): Remove, put functionality in cpp_init.\n\n\t* cppinit.c (sort_options): Remove, put functionality in\n\tcpp_init.\n\t(cpp_init): New.\n\t(initialize_builtins): Free memory.\n\t(cpp_start_read): Move init_IStable to cpp_init.\n\n\t* cpplib.h (cpp_init): New prototype.\n\t* cppmain.c (main): Call cpp_init.\n\nFrom-SVN: r35763", "tree": {"sha": "145baebe1eb6775512b8143d7c1d5adf52be0c8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/145baebe1eb6775512b8143d7c1d5adf52be0c8a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c154ba66ef8560de3bee1ec17242cdaa5fe9e53c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c154ba66ef8560de3bee1ec17242cdaa5fe9e53c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c154ba66ef8560de3bee1ec17242cdaa5fe9e53c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c154ba66ef8560de3bee1ec17242cdaa5fe9e53c/comments", "author": null, "committer": null, "parents": [{"sha": "9c82ac6bea8fe68b1ab367d6bcb99040c795227f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c82ac6bea8fe68b1ab367d6bcb99040c795227f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c82ac6bea8fe68b1ab367d6bcb99040c795227f"}], "stats": {"total": 52, "additions": 27, "deletions": 25}, "files": [{"sha": "df0759cd0288877e03d15900110f8a7d25c7accf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c154ba66ef8560de3bee1ec17242cdaa5fe9e53c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c154ba66ef8560de3bee1ec17242cdaa5fe9e53c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c154ba66ef8560de3bee1ec17242cdaa5fe9e53c", "patch": "@@ -1,3 +1,14 @@\n+2000-08-17  Neil Booth  <NeilB@earthling.net>\n+\n+\t* cppinit.c (sort_options): Remove, put functionality in\n+\tcpp_init.\n+\t(cpp_init): New.\n+\t(initialize_builtins): Free memory.\n+\t(cpp_start_read): Move init_IStable to cpp_init.\n+\n+\t* cpplib.h (cpp_init): New prototype.\n+\t* cppmain.c (main): Call cpp_init.\n+\n Thu Aug 17 13:20:32 EDT 2000  John Wehle  (john@feith.com)\n \n \t* rtlanal.c (rtx_unstable_p): Use CONSTANT_P."}, {"sha": "bb378907e3c5393e6cca592119992531b30f38cc", "filename": "gcc/cppinit.c", "status": "modified", "additions": 14, "deletions": 25, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c154ba66ef8560de3bee1ec17242cdaa5fe9e53c/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c154ba66ef8560de3bee1ec17242cdaa5fe9e53c/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=c154ba66ef8560de3bee1ec17242cdaa5fe9e53c", "patch": "@@ -111,7 +111,6 @@ static void new_pending_directive\tPARAMS ((struct cpp_pending *,\n \t\t\t\t\t\t cl_directive_handler));\n #ifdef HOST_EBCDIC\n static int opt_comp\t\t\tPARAMS ((const void *, const void *));\n-static void sort_options\t\tPARAMS ((void));\n #endif\n static int parse_option\t\t\tPARAMS ((const char *));\n \n@@ -402,16 +401,24 @@ merge_include_chains (pfile)\n   CPP_OPTION (pfile, bracket_include) = brack;\n }\n \n+void\n+cpp_init (void)\n+{\n+#ifdef HOST_EBCDIC\n+  /* For non-ASCII hosts, the array needs to be sorted at runtime.  */\n+  qsort (cl_options, N_OPTS, sizeof (struct cl_option), opt_comp);\n+#endif\n+\n+  /* Set up the IStable.  This doesn't do anything if we were compiled\n+     with a compiler that supports C99 designated initializers.  */\n+  init_IStable ();\n+}\n \n /* Initialize a cpp_reader structure. */\n void\n cpp_reader_init (pfile)\n      cpp_reader *pfile;\n {\n-#ifdef HOST_EBCDIC\n-  sort_options ();\n-#endif\n-\n   memset ((char *) pfile, 0, sizeof (cpp_reader));\n \n   CPP_OPTION (pfile, dollars_in_ident) = 1;\n@@ -592,7 +599,9 @@ initialize_builtins (pfile)\n \t      str = xmalloc (b->len + strlen (val) + 2);\n \t      sprintf(str, \"%s=%s\", b->name, val);\n \t    }\n+\n \t  cpp_define (pfile, str);\n+\t  free (str);\n \t}\n       else\n \t{\n@@ -806,10 +815,6 @@ cpp_start_read (pfile, print, fname)\n     || CPP_OPTION (pfile, dump_macros) == dump_definitions\n     || CPP_OPTION (pfile, dump_macros) == dump_only;\n \n-  /* Set up the IStable.  This doesn't do anything if we were compiled\n-     with a compiler that supports C99 designated initializers.  */\n-  init_IStable ();\n-\n   /* Set up the tables used by read_and_prescan.  */\n   _cpp_init_input_buffer (pfile);\n \n@@ -1074,22 +1079,6 @@ static const struct cl_option cl_options[] =\n #undef DEF_OPT\n #undef COMMAND_LINE_OPTIONS\n \n-#ifdef HOST_EBCDIC\n-static void\n-sort_options (void)\n-{\n-  static int opts_sorted = 0;\n-\n-  if (!opts_sorted)\n-    {\n-      opts_sorted = 1;\n-      /* For non-ASCII hosts, the array needs to be sorted at runtime */\n-      qsort (cl_options, N_OPTS, sizeof (struct cl_option), opt_comp);\n-    }\n-}\n-#endif\n-\n-\n /* Perform a binary search to find which, if any, option the given\n    command-line matches.  Returns its index in the option array,\n    negative on failure.  Complications arise since some options can be"}, {"sha": "1163c2e289cf343e4dec048b90b7bd51d3b9af7a", "filename": "gcc/cpplib.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c154ba66ef8560de3bee1ec17242cdaa5fe9e53c/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c154ba66ef8560de3bee1ec17242cdaa5fe9e53c/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=c154ba66ef8560de3bee1ec17242cdaa5fe9e53c", "patch": "@@ -637,6 +637,7 @@ struct cpp_hashnode\n   const unsigned char name[1];\t\t/* name[length] */\n };\n \n+extern void cpp_init PARAMS ((void));\n extern int cpp_handle_options PARAMS ((cpp_reader *, int, char **));\n extern int cpp_handle_option PARAMS ((cpp_reader *, int, char **));\n extern void cpp_reader_init PARAMS ((cpp_reader *));"}, {"sha": "9dc431e12d5d64026669b319acbb4c0e42548987", "filename": "gcc/cppmain.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c154ba66ef8560de3bee1ec17242cdaa5fe9e53c/gcc%2Fcppmain.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c154ba66ef8560de3bee1ec17242cdaa5fe9e53c/gcc%2Fcppmain.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppmain.c?ref=c154ba66ef8560de3bee1ec17242cdaa5fe9e53c", "patch": "@@ -71,6 +71,7 @@ main (argc, argv)\n   (void) bindtextdomain (PACKAGE, localedir);\n   (void) textdomain (PACKAGE);\n \n+  cpp_init ();\n   cpp_reader_init (pfile);\n   \n   argi += cpp_handle_options (pfile, argc - argi , argv + argi);"}]}