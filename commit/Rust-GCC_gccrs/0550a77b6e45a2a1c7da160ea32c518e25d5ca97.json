{"sha": "0550a77b6e45a2a1c7da160ea32c518e25d5ca97", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDU1MGE3N2I2ZTQ1YTJhMWM3ZGExNjBlYTMyYzUxOGUyNWQ1Y2E5Nw==", "commit": {"author": {"name": "Vladimir Makarov", "email": "vmakarov@redhat.com", "date": "2018-01-12T17:00:36Z"}, "committer": {"name": "Vladimir Makarov", "email": "vmakarov@gcc.gnu.org", "date": "2018-01-12T17:00:36Z"}, "message": "re PR rtl-optimization/80481 (Unoptimal additional copy instructions)\n\n2018-01-12  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR rtl-optimization/80481\n\t* ira-color.c (get_cap_member): New function.\n\t(allocnos_conflict_by_live_ranges_p): Use it.\n\t(slot_coalesced_allocno_live_ranges_intersect_p): Add assert.\n\t(setup_slot_coalesced_allocno_live_ranges): Ditto.\n\n2018-01-12  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR rtl-optimization/80481\n\t* g++.dg/pr80481.C: New.\n\nFrom-SVN: r256590", "tree": {"sha": "941b5cfcf890eabde74a4a4c072bc64d1c2a0868", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/941b5cfcf890eabde74a4a4c072bc64d1c2a0868"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0550a77b6e45a2a1c7da160ea32c518e25d5ca97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0550a77b6e45a2a1c7da160ea32c518e25d5ca97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0550a77b6e45a2a1c7da160ea32c518e25d5ca97", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0550a77b6e45a2a1c7da160ea32c518e25d5ca97/comments", "author": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f7aad330fdf138d1bc9c2744c983b9734430a856", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7aad330fdf138d1bc9c2744c983b9734430a856", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7aad330fdf138d1bc9c2744c983b9734430a856"}], "stats": {"total": 102, "additions": 101, "deletions": 1}, "files": [{"sha": "7483549f80c63be763bf598cae623df3f016708c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0550a77b6e45a2a1c7da160ea32c518e25d5ca97/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0550a77b6e45a2a1c7da160ea32c518e25d5ca97/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0550a77b6e45a2a1c7da160ea32c518e25d5ca97", "patch": "@@ -1,3 +1,11 @@\n+2018-01-12  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR rtl-optimization/80481\n+\t* ira-color.c (get_cap_member): New function.\n+\t(allocnos_conflict_by_live_ranges_p): Use it.\n+\t(slot_coalesced_allocno_live_ranges_intersect_p): Add assert.\n+\t(setup_slot_coalesced_allocno_live_ranges): Ditto.\n+\n 2018-01-12  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/83628"}, {"sha": "c8b6ab4bcdf541b1385f2d75f4c7cb75461544fd", "filename": "gcc/ira-color.c", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0550a77b6e45a2a1c7da160ea32c518e25d5ca97/gcc%2Fira-color.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0550a77b6e45a2a1c7da160ea32c518e25d5ca97/gcc%2Fira-color.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-color.c?ref=0550a77b6e45a2a1c7da160ea32c518e25d5ca97", "patch": "@@ -1905,6 +1905,18 @@ assign_hard_reg (ira_allocno_t a, bool retry_p)\n /* An array used to sort copies.  */\n static ira_copy_t *sorted_copies;\n \n+/* If allocno A is a cap, return non-cap allocno from which A is\n+   created.  Otherwise, return A.  */\n+static ira_allocno_t\n+get_cap_member (ira_allocno_t a)\n+{\n+  ira_allocno_t member;\n+  \n+  while ((member = ALLOCNO_CAP_MEMBER (a)) != NULL)\n+    a = member;\n+  return a;\n+}\n+\n /* Return TRUE if live ranges of allocnos A1 and A2 intersect.  It is\n    used to find a conflict for new allocnos or allocnos with the\n    different allocno classes.  */\n@@ -1924,6 +1936,10 @@ allocnos_conflict_by_live_ranges_p (ira_allocno_t a1, ira_allocno_t a2)\n       && ORIGINAL_REGNO (reg1) == ORIGINAL_REGNO (reg2))\n     return false;\n \n+  /* We don't keep live ranges for caps because they can be quite big.\n+     Use ranges of non-cap allocno from which caps are created.  */\n+  a1 = get_cap_member (a1);\n+  a2 = get_cap_member (a2);\n   for (i = 0; i < n1; i++)\n     {\n       ira_object_t c1 = ALLOCNO_OBJECT (a1, i);\n@@ -4027,7 +4043,7 @@ slot_coalesced_allocno_live_ranges_intersect_p (ira_allocno_t allocno, int n)\n     {\n       int i;\n       int nr = ALLOCNO_NUM_OBJECTS (a);\n-\n+      gcc_assert (ALLOCNO_CAP_MEMBER (a) == NULL);\n       for (i = 0; i < nr; i++)\n \t{\n \t  ira_object_t obj = ALLOCNO_OBJECT (a, i);\n@@ -4057,6 +4073,7 @@ setup_slot_coalesced_allocno_live_ranges (ira_allocno_t allocno)\n        a = ALLOCNO_COALESCE_DATA (a)->next)\n     {\n       int nr = ALLOCNO_NUM_OBJECTS (a);\n+      gcc_assert (ALLOCNO_CAP_MEMBER (a) == NULL);\n       for (i = 0; i < nr; i++)\n \t{\n \t  ira_object_t obj = ALLOCNO_OBJECT (a, i);"}, {"sha": "b843cf6356f6f6f94415cadbd99031cf5b218061", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0550a77b6e45a2a1c7da160ea32c518e25d5ca97/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0550a77b6e45a2a1c7da160ea32c518e25d5ca97/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0550a77b6e45a2a1c7da160ea32c518e25d5ca97", "patch": "@@ -1,3 +1,8 @@\n+2018-01-12  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR rtl-optimization/80481\n+\t* g++.dg/pr80481.C: New.\n+\n 2018-01-12  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/83628"}, {"sha": "316da0fdbfb73ed74ecff56aa721160b753c588e", "filename": "gcc/testsuite/g++.dg/pr80481.C", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0550a77b6e45a2a1c7da160ea32c518e25d5ca97/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr80481.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0550a77b6e45a2a1c7da160ea32c518e25d5ca97/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr80481.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr80481.C?ref=0550a77b6e45a2a1c7da160ea32c518e25d5ca97", "patch": "@@ -0,0 +1,70 @@\n+// { dg-do compile { target i?86-*-* x86_64-*-* } }\n+// { dg-options \"-Ofast -funroll-loops -fopenmp -march=knl\" }\n+// { dg-final { scan-assembler-not \"vmovaps\" } }\n+\n+#include <math.h>\n+\n+#include <xmmintrin.h>\n+\n+#define max(a, b)   ( (a) > (b) ? (a) : (b) )\n+\n+struct Sdata {\n+  float w; \n+  float s;\n+  float r;\n+  float t;\n+  float v;\n+};\n+ extern int N1, N2, N3;\n+\n+#define func(p, up, down) ((p)*(up) + (1.0f-(p)) * (down))\n+ \n+void foo (Sdata *in, int idx, float *out)\n+{\n+  float* y1 = (float*)_mm_malloc(sizeof(float) * N1,16);\n+  float* y2  = (float*)_mm_malloc(sizeof(float) * N1,16);\n+  float* y3  = (float*)_mm_malloc(sizeof(float) * N1,16);\n+  float* y4  = (float*)_mm_malloc(sizeof(float) * N1,16); \n+\n+  for (int k = idx; k < idx + N3; k++) {\n+    float x1 = in[k].r;\n+    float x2    = in[k].s;\n+    float x3      = in[k].w;\n+    float x4     = in[k].v;\n+    float x5         = in[k].t;\n+    x5 /= N2;\n+    float u = exp(x4 * sqrt(x5));\n+    float d = exp(-x4 * sqrt(x5));\n+    float a = exp(x1 * x5);\n+    float m = exp(-x1 * x5);\n+    float p = (a - d) / (u - d);\n+    y2[0] = x2;\n+    y3[0] = float(1.f);\n+    for (int i = 1; i <= N2; i++) {\n+      y2[i] = u * y2[i - 1];\n+      y3[i] = d * y3[i - 1];\n+    }\n+#pragma omp simd\n+    for (int i = 0; i <= N2; i++) {\n+      y1[i] =\n+        max((x3 - y2[N2 - i] * y3[i]), float(0.f));\n+    }\n+    for (int i = N2 - 1; i >= 0; i--) {\n+#pragma omp simd\n+      for (int j = 0; j <= i; j++) {\n+        y4[j] = func(p,y1[j],y1[j+1]) * m;\n+      }\n+#pragma omp simd\n+      for (int j = 0; j <= i; j++) {\n+        float t1 = y2[i - j] * y3[j];\n+        float t2 = max(x3 - t1, float(0.f));\n+        y1[j] = max(t2, y4[j]);\n+      }\n+    }\n+    out[k] = y1[0];\n+  }\n+  _mm_free(y1);\n+  _mm_free(y2);\n+  _mm_free(y3);\n+  _mm_free(y4);\n+}"}]}