{"sha": "7b65808d33edf19143af6d0f272cf126f87ca147", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2I2NTgwOGQzM2VkZjE5MTQzYWY2ZDBmMjcyY2YxMjZmODdjYTE0Nw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely.gcc@gmail.com", "date": "2010-04-24T09:21:23Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2010-04-24T09:21:23Z"}, "message": "unique_ptr (unique_ptr::pointer): Use deleter's pointer type if it exists.\n\n2010-04-24  Jonathan Wakely  <jwakely.gcc@gmail.com>\n\n\t* include/bits/unique_ptr (unique_ptr::pointer): Use deleter's\n\tpointer type if it exists.\n\t* testsuite/20_util/unique_ptr/requirements/pointer_type.cc: New.\n\t* testsuite/20_util/unique_ptr/assign/assign_neg.cc: Adjust.\n\t* testsuite/20_util/unique_ptr/modifiers/reset_neg.cc: Adjust.\n\nFrom-SVN: r158682", "tree": {"sha": "a74eae291eddf5251e559672aaf64181fea9d51c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a74eae291eddf5251e559672aaf64181fea9d51c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7b65808d33edf19143af6d0f272cf126f87ca147", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b65808d33edf19143af6d0f272cf126f87ca147", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b65808d33edf19143af6d0f272cf126f87ca147", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b65808d33edf19143af6d0f272cf126f87ca147/comments", "author": null, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3009276c375bf3aa661dba71a1968ecfa41396a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3009276c375bf3aa661dba71a1968ecfa41396a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3009276c375bf3aa661dba71a1968ecfa41396a5"}], "stats": {"total": 95, "additions": 84, "deletions": 11}, "files": [{"sha": "e72219227f9541d0c5787a59cfd483669ee39f2e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b65808d33edf19143af6d0f272cf126f87ca147/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b65808d33edf19143af6d0f272cf126f87ca147/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=7b65808d33edf19143af6d0f272cf126f87ca147", "patch": "@@ -1,3 +1,11 @@\n+2010-04-24  Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\t* include/bits/unique_ptr (unique_ptr::pointer): Use deleter's\n+\tpointer type if it exists.\n+\t* testsuite/20_util/unique_ptr/requirements/pointer_type.cc: New.\n+\t* testsuite/20_util/unique_ptr/assign/assign_neg.cc: Adjust.\n+\t* testsuite/20_util/unique_ptr/modifiers/reset_neg.cc: Adjust.\n+\n 2010-04-22  Johannes Singler  <singler@kit.edu>\n \n         * include/parallel/partition.h (__parallel_partition):"}, {"sha": "7b07ca477f4533d5cc8001d153ef7d2fb2b65b12", "filename": "libstdc++-v3/include/bits/unique_ptr.h", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b65808d33edf19143af6d0f272cf126f87ca147/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b65808d33edf19143af6d0f272cf126f87ca147/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h?ref=7b65808d33edf19143af6d0f272cf126f87ca147", "patch": "@@ -83,10 +83,25 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       typedef std::tuple<_Tp*, _Tp_Deleter>  __tuple_type;\n       typedef _Tp* unique_ptr::*             __unspecified_pointer_type;\n \n+      // use SFINAE to determine whether _Del::pointer exists\n+      class _Pointer\n+      {\n+\ttemplate<typename _Up>\n+\t  static typename _Up::pointer __test(typename _Up::pointer*);\n+\n+\ttemplate<typename _Up>\n+\t  static _Tp* __test(...);\n+\n+\ttypedef typename remove_reference<_Tp_Deleter>::type _Del;\n+\n+      public:\n+\ttypedef decltype( __test<_Del>(0) ) type;\n+      };\n+\n     public:\n-      typedef _Tp*               pointer;\n-      typedef _Tp                element_type;      \n-      typedef _Tp_Deleter        deleter_type;\n+      typedef typename _Pointer::type\tpointer;\n+      typedef _Tp                       element_type;\n+      typedef _Tp_Deleter               deleter_type;\n \n       // Constructors.\n       unique_ptr()"}, {"sha": "525364b341215e68c7d06fb92a4d71557d21ed22", "filename": "libstdc++-v3/testsuite/20_util/unique_ptr/assign/assign_neg.cc", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b65808d33edf19143af6d0f272cf126f87ca147/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fassign%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b65808d33edf19143af6d0f272cf126f87ca147/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fassign%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fassign%2Fassign_neg.cc?ref=7b65808d33edf19143af6d0f272cf126f87ca147", "patch": "@@ -49,13 +49,13 @@ test03()\n   std::unique_ptr<int[2]> p2 = p1;\n }\n \n-// { dg-error \"deleted function\" \"\" { target *-*-* } 342 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 357 }\n // { dg-error \"used here\" \"\" { target *-*-* } 42 }\n // { dg-error \"no matching\" \"\" { target *-*-* } 48 }\n-// { dg-warning \"candidates are\" \"\" { target *-*-* } 115 }\n-// { dg-warning \"note\" \"\" { target *-*-* } 108 }\n-// { dg-warning \"note\" \"\" { target *-*-* } 103 }\n-// { dg-warning \"note\" \"\" { target *-*-* } 98 }\n-// { dg-warning \"note\" \"\" { target *-*-* } 92 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 207 }\n+// { dg-warning \"candidates are\" \"\" { target *-*-* } 130 }\n+// { dg-warning \"note\" \"\" { target *-*-* } 123 }\n+// { dg-warning \"note\" \"\" { target *-*-* } 118 }\n+// { dg-warning \"note\" \"\" { target *-*-* } 113 }\n+// { dg-warning \"note\" \"\" { target *-*-* } 107 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 222 }\n // { dg-error \"used here\" \"\" { target *-*-* } 49 }"}, {"sha": "3b389b9da684dc8a44fcfab8a3b58f89eae2fd6b", "filename": "libstdc++-v3/testsuite/20_util/unique_ptr/modifiers/reset_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b65808d33edf19143af6d0f272cf126f87ca147/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fmodifiers%2Freset_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b65808d33edf19143af6d0f272cf126f87ca147/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fmodifiers%2Freset_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fmodifiers%2Freset_neg.cc?ref=7b65808d33edf19143af6d0f272cf126f87ca147", "patch": "@@ -36,4 +36,4 @@ void test01()\n }\n \n // { dg-error \"used here\" \"\" { target *-*-* } 35 } \n-// { dg-error \"deleted function\" \"\" { target *-*-* } 332 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 347 }"}, {"sha": "5074844f42f87347ad48de54884b681f6bdaf8cb", "filename": "libstdc++-v3/testsuite/20_util/unique_ptr/requirements/pointer_type.cc", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b65808d33edf19143af6d0f272cf126f87ca147/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Frequirements%2Fpointer_type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b65808d33edf19143af6d0f272cf126f87ca147/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Frequirements%2Fpointer_type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Frequirements%2Fpointer_type.cc?ref=7b65808d33edf19143af6d0f272cf126f87ca147", "patch": "@@ -0,0 +1,50 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2010 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 20.6.11 Template class unique_ptr [unique.ptr.single]\n+\n+#include <memory>\n+#include <testsuite_hooks.h>\n+\n+struct A\n+{\n+  void operator()(void* p) const { }\n+};\n+\n+struct B\n+{\n+  typedef char* pointer;\n+  void operator()(pointer p) const { }\n+};\n+\n+int main()\n+{\n+  typedef std::unique_ptr<int> \t   up;\n+  typedef std::unique_ptr<int, A>  upA;\n+  typedef std::unique_ptr<int, B>  upB;\n+  typedef std::unique_ptr<int, A&> upAr;\n+  typedef std::unique_ptr<int, B&> upBr;\n+\n+  static_assert( std::is_same< up::pointer, int*>::value, \"\" );\n+  static_assert( std::is_same< upA::pointer, int*>::value, \"\" );\n+  static_assert( std::is_same< upB::pointer, char*>::value, \"\" );\n+  static_assert( std::is_same< upAr::pointer, int*>::value, \"\" );\n+  static_assert( std::is_same< upBr::pointer, char*>::value, \"\" );\n+}"}]}