{"sha": "ebf8f0eaebb0ede888d8d86719d7cbd82a5f6270", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWJmOGYwZWFlYmIwZWRlODg4ZDhkODY3MTlkN2NiZDgyYTVmNjI3MA==", "commit": {"author": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2013-06-28T09:02:46Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2013-06-28T09:02:46Z"}, "message": "bmiintrin.h (_bextr_u32): New.\n\nChangeLog:\n* config/i386/bmiintrin.h (_bextr_u32): New.\n(_bextr_u64): Ditto.\n\ntestsuite/ChangeLog:\n* gcc.target/i386/bmi-1.c: Extend with new instrinsic.\nFix scan patterns.\n* gcc.target/i386/bmi-1.c: Ditto.\n* gcc.target/i386/bmi-bextr-4.c: New.\n* gcc.target/i386/bmi-bextr-5.c: Ditto.\n\nFrom-SVN: r200505", "tree": {"sha": "8927f2efac9e7afffc6ab91b5dcbb85b52659abe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8927f2efac9e7afffc6ab91b5dcbb85b52659abe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ebf8f0eaebb0ede888d8d86719d7cbd82a5f6270", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebf8f0eaebb0ede888d8d86719d7cbd82a5f6270", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebf8f0eaebb0ede888d8d86719d7cbd82a5f6270", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebf8f0eaebb0ede888d8d86719d7cbd82a5f6270/comments", "author": null, "committer": null, "parents": [{"sha": "7350faad6fa3fff7ba85c96074d6d07d05fe9919", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7350faad6fa3fff7ba85c96074d6d07d05fe9919", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7350faad6fa3fff7ba85c96074d6d07d05fe9919"}], "stats": {"total": 170, "additions": 154, "deletions": 16}, "files": [{"sha": "251de55c578c01a66b1439fdcc98d5db3f8846bd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebf8f0eaebb0ede888d8d86719d7cbd82a5f6270/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebf8f0eaebb0ede888d8d86719d7cbd82a5f6270/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ebf8f0eaebb0ede888d8d86719d7cbd82a5f6270", "patch": "@@ -1,3 +1,8 @@\n+2013-06-28  Kirill Yukhin  <kirill.yukhin@intel.com>\n+\n+\t* config/i386/bmiintrin.h (_bextr_u32): New.\n+\t(_bextr_u64): Ditto.\n+\n 2013-06-27  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* config.gcc (mips*-mti-elf*, mips*-sde-elf*, mips64r5900-*-elf*)\n@@ -19,7 +24,7 @@\n \t* config/mips/mips.h (BASE_DRIVER_SELF_SPECS): m14ke* implies\n \t-mdspr2.\n \t* doc/invoke.texi: Add -m14kc.\n- \n+\n 2013-06-27  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/57623"}, {"sha": "281ebaaf4f299af71e9fe7b5c17cee0147dc5a44", "filename": "gcc/config/i386/bmiintrin.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebf8f0eaebb0ede888d8d86719d7cbd82a5f6270/gcc%2Fconfig%2Fi386%2Fbmiintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebf8f0eaebb0ede888d8d86719d7cbd82a5f6270/gcc%2Fconfig%2Fi386%2Fbmiintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fbmiintrin.h?ref=ebf8f0eaebb0ede888d8d86719d7cbd82a5f6270", "patch": "@@ -53,6 +53,12 @@ __bextr_u32 (unsigned int __X, unsigned int __Y)\n   return __builtin_ia32_bextr_u32 (__X, __Y);\n }\n \n+extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_bextr_u32 (unsigned int __X, unsigned int __Y, unsigned __Z)\n+{\n+  return __builtin_ia32_bextr_u32 (__X, ((__Y & 0xff) | ((__Z & 0xff) << 8)));\n+}\n+\n extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n __blsi_u32 (unsigned int __X)\n {\n@@ -92,6 +98,12 @@ __bextr_u64 (unsigned long long __X, unsigned long long __Y)\n   return __builtin_ia32_bextr_u64 (__X, __Y);\n }\n \n+extern __inline unsigned long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_bextr_u64 (unsigned long long __X, unsigned int __Y, unsigned int __Z)\n+{\n+  return __builtin_ia32_bextr_u64 (__X, ((__Y & 0xff) | ((__Z & 0xff) << 8)));\n+}\n+\n extern __inline unsigned long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n __blsi_u64 (unsigned long long __X)\n {"}, {"sha": "e810fbe4ab73f2a01c6b6514645b5e6d89a9bf72", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebf8f0eaebb0ede888d8d86719d7cbd82a5f6270/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebf8f0eaebb0ede888d8d86719d7cbd82a5f6270/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ebf8f0eaebb0ede888d8d86719d7cbd82a5f6270", "patch": "@@ -1,3 +1,11 @@\n+2013-06-28  Kirill Yukhin  <kirill.yukhin@intel.com>\n+\n+        * gcc.target/i386/bmi-1.c: Extend with new instrinsic.\n+        Fix scan patterns.\n+        * gcc.target/i386/bmi-1.c: Ditto.\n+        * gcc.target/i386/bmi-bextr-4.c: New.\n+        * gcc.target/i386/bmi-bextr-5.c: Ditto.\n+\n 2013-06-28  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/57682\n@@ -152,7 +160,7 @@\n \t* g++.dg/cilk-plus/AN/postincr_test.cc: Likewise.\n \t* g++.dg/cilk-plus/cilk-plus.exp: New script.\n \t* gcc/testsuite/g++.dg/dg.exp: Included Cilk Plus C++ tests in the list.\n-\t\n+\n 2013-06-21  Joseph Myers  <joseph@codesourcery.com>\n \n \tPR other/53317\n@@ -442,7 +450,7 @@\n \n \tPR c/57563\n \t* c-c++-common/cilk-plus/AN/builtin_fn_mutating.c (main): Fixed a bug\n-\tin how we check __sec_reduce_mutating function's result.\t\n+\tin how we check __sec_reduce_mutating function's result.\n \n 2013-06-10  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \t    Pat Haugen <pthaugen@us.ibm.com>\n@@ -810,7 +818,7 @@\n \t* c-c++-common/cilk-plus/AN/if_test_errors.c (main): New testcase.\n \t* c-c++-common/cilk-plus/AN/rank_mismatch.c: Added a '-w' option to\n \tdg-option and an header comment.\n-\t\n+\n 2013-06-03  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/57419"}, {"sha": "a05cb275adc0086ff468c75f07cce29aed0c6977", "filename": "gcc/testsuite/gcc.target/i386/bmi-1.c", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebf8f0eaebb0ede888d8d86719d7cbd82a5f6270/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebf8f0eaebb0ede888d8d86719d7cbd82a5f6270/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-1.c?ref=ebf8f0eaebb0ede888d8d86719d7cbd82a5f6270", "patch": "@@ -1,11 +1,11 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -mbmi \" } */\n-/* { dg-final { scan-assembler \"andn\\[^\\\\n]*(%|)eax\" } } */\n-/* { dg-final { scan-assembler \"bextr\\[^\\\\n]*(%|)eax\" } } */\n-/* { dg-final { scan-assembler \"blsi\\[^\\\\n]*(%|)eax\" } } */\n-/* { dg-final { scan-assembler \"blsmsk\\[^\\\\n]*(%|)eax\" } } */\n-/* { dg-final { scan-assembler \"blsr\\[^\\\\n]*(%|)eax\" } } */\n-/* { dg-final { scan-assembler \"tzcntl\\[^\\\\n]*(%|)eax\" } } */\n+/* { dg-final { scan-assembler \"andn\\[^\\\\n]*eax\" } } */\n+/* { dg-final { scan-assembler-times \"bextr\\[ \\\\t]+\\[^\\\\n]*eax\" 2 } } */\n+/* { dg-final { scan-assembler \"blsi\\[^\\\\n]*eax\" } } */\n+/* { dg-final { scan-assembler \"blsmsk\\[^\\\\n]*eax\" } } */\n+/* { dg-final { scan-assembler \"blsr\\[^\\\\n]*eax\" } } */\n+/* { dg-final { scan-assembler \"tzcntl\\[^\\\\n]*eax\" } } */\n \n #include <x86intrin.h>\n \n@@ -21,6 +21,14 @@ func_bextr32 (unsigned int X, unsigned int Y)\n   return __bextr_u32(X, Y);\n }\n \n+unsigned int\n+func_bextr32_3args (unsigned int X,\n+\t\t    unsigned int Y,\n+\t\t    unsigned int Z)\n+{\n+  return _bextr_u32(X, Y, Z);\n+}\n+\n unsigned int\n func_blsi32 (unsigned int X)\n {"}, {"sha": "68d06a20540fba77c5d321ca7d82217bf3a96739", "filename": "gcc/testsuite/gcc.target/i386/bmi-2.c", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebf8f0eaebb0ede888d8d86719d7cbd82a5f6270/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebf8f0eaebb0ede888d8d86719d7cbd82a5f6270/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-2.c?ref=ebf8f0eaebb0ede888d8d86719d7cbd82a5f6270", "patch": "@@ -1,11 +1,11 @@\n /* { dg-do compile { target { ! { ia32 }  } } } */\n /* { dg-options \"-O2 -mbmi \" } */\n-/* { dg-final { scan-assembler \"andn\\[^\\\\n]*(%|)rax\" } } */\n-/* { dg-final { scan-assembler \"bextr\\[^\\\\n]*(%|)rax\" } } */\n-/* { dg-final { scan-assembler \"blsi\\[^\\\\n]*(%|)rax\" } } */\n-/* { dg-final { scan-assembler \"blsmsk\\[^\\\\n]*(%|)rax\" } } */\n-/* { dg-final { scan-assembler \"blsr\\[^\\\\n]*(%|)rax\" } } */\n-/* { dg-final { scan-assembler \"tzcntq\\[^\\\\n]*(%|)rax\" } } */\n+/* { dg-final { scan-assembler \"andn\\[^\\\\n]*rax\" } } */\n+/* { dg-final { scan-assembler-times \"bextr\\[ \\\\t]+\\[^\\\\n]*rax\" 2 } } */\n+/* { dg-final { scan-assembler \"blsi\\[^\\\\n]*rax\" } } */\n+/* { dg-final { scan-assembler \"blsmsk\\[^\\\\n]*rax\" } } */\n+/* { dg-final { scan-assembler \"blsr\\[^\\\\n]*rax\" } } */\n+/* { dg-final { scan-assembler \"tzcntq\\[^\\\\n]*rax\" } } */\n \n #include <x86intrin.h>\n \n@@ -21,6 +21,14 @@ func_bextr64 (unsigned long long X, unsigned long long Y)\n   return __bextr_u64 (X, Y);\n }\n \n+unsigned long long\n+func_bextr64_3args (unsigned long long X,\n+\t\t    unsigned long long Y,\n+\t\t    unsigned long long Z)\n+{\n+  return _bextr_u64 (X, Y, Z);\n+}\n+\n unsigned long long\n func_blsi64 (unsigned long long X)\n {"}, {"sha": "2318847ae339de4013e6d82e4c6f8e97e183e818", "filename": "gcc/testsuite/gcc.target/i386/bmi-bextr-4.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebf8f0eaebb0ede888d8d86719d7cbd82a5f6270/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-bextr-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebf8f0eaebb0ede888d8d86719d7cbd82a5f6270/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-bextr-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-bextr-4.c?ref=ebf8f0eaebb0ede888d8d86719d7cbd82a5f6270", "patch": "@@ -0,0 +1,49 @@\n+/* { dg-do run { target { bmi } } } */\n+/* { dg-require-effective-target bmi  } */\n+/* { dg-options \"-O2 -mbmi -fno-inline\" } */\n+\n+#include <x86intrin.h>\n+\n+#include \"bmi-check.h\"\n+\n+unsigned calc_bextr_u32 (unsigned src1, unsigned src2)\n+{\n+  unsigned res = 0;\n+  unsigned char start = (src2 & 0xff);\n+  unsigned char len = (int) ((src2 >> 8) & 0xff);\n+  if (start < 32) {\n+    unsigned i;\n+    unsigned last = (start+len) < 32 ? start+len : 32;\n+\n+    src1 >>= start;\n+    for (i=start; i<last; ++i) {\n+      res |= (src1 & 1) << (i-start);\n+      src1 >>= 1;\n+    }\n+  }\n+\n+  return res;\n+}\n+\n+static void\n+bmi_test ()\n+{\n+  unsigned i;\n+  unsigned char start, len;\n+  unsigned src1 = 0xfacec0ff;\n+  unsigned res, res_ref, src2;\n+\n+  for (i=0; i<5; ++i) {\n+    start = i * 4;\n+    len = i * 4;\n+\n+    src1 = src1 * 3;\n+    src2 = (start & 0xff) | ((len & 0xff) << 8);\n+\n+    res_ref = calc_bextr_u32 (src1, src2);\n+    res = _bextr_u32 (src1, start, len);\n+\n+    if (res != res_ref)\n+      abort();\n+  }\n+}"}, {"sha": "fd6e3620fab824cc1ee67cbfe7c9f3fd583b148d", "filename": "gcc/testsuite/gcc.target/i386/bmi-bextr-5.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebf8f0eaebb0ede888d8d86719d7cbd82a5f6270/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-bextr-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebf8f0eaebb0ede888d8d86719d7cbd82a5f6270/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-bextr-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-bextr-5.c?ref=ebf8f0eaebb0ede888d8d86719d7cbd82a5f6270", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-do run { target { bmi && { ! ia32 } } } } */\n+/* { dg-options \"-O2 -mbmi -fno-inline\" } */\n+\n+#include <x86intrin.h>\n+\n+#include \"bmi-check.h\"\n+\n+long long calc_bextr_u64 (unsigned long long src1,\n+\t\t\t  unsigned long long src2)\n+{\n+  long long res = 0;\n+  unsigned char start = (src2 & 0xff);\n+  unsigned char len = (int) ((src2 >> 8) & 0xff);\n+  if (start < 64) {\n+    unsigned i;\n+    unsigned last = (start+len) < 64 ? start+len : 64;\n+\n+    src1 >>= start;\n+    for (i=start; i<last; ++i) {\n+      res |= (src1 & 1) << (i-start);\n+      src1 >>= 1;\n+    }\n+  }\n+\n+  return res;\n+}\n+\n+static void\n+bmi_test ()\n+{\n+  unsigned i;\n+  unsigned char start, len;\n+  unsigned long long src1 = 0xfacec0ffeefacec0;\n+  unsigned long long res, res_ref, src2;\n+\n+  for (i=0; i<5; ++i) {\n+    start = i * 4;\n+    len = i * 3;\n+    src1 = src1 * 3;\n+    src2 = (start & 0xff) | ((len & 0xff) << 8);\n+\n+    res_ref = calc_bextr_u64 (src1, src2);\n+    res = _bextr_u64 (src1, start, len);\n+\n+    if (res != res_ref)\n+      abort();\n+  }\n+}"}]}