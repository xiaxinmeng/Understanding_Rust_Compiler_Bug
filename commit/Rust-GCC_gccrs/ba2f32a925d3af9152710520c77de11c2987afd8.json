{"sha": "ba2f32a925d3af9152710520c77de11c2987afd8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmEyZjMyYTkyNWQzYWY5MTUyNzEwNTIwYzc3ZGUxMWMyOTg3YWZkOA==", "commit": {"author": {"name": "Janis Johnson", "email": "janis187@us.ibm.com", "date": "2007-05-22T18:01:12Z"}, "committer": {"name": "Janis Johnson", "email": "janis@gcc.gnu.org", "date": "2007-05-22T18:01:12Z"}, "message": "gcc/\n\t* doc/sourcebuild.texi (Test Directives) Add dg-message.\ngcc/testsuite/\n\t* lib/gcc-dg.exp(process_message): New proc.\n\t(dg-message): New test directive.\n\t* gcc.dg/always_inline.c: Use dg-message.\n\t* gcc.dg/always_inline2.c: Ditto.\n\t* gcc.dg/always_inline3.c: Ditto.\n\t* gcc.dg/invalid-call-1.c: Ditto.\n\t* gcc.dg/pr17506.c: Ditto.\n\t* gcc.dg/simd-5.c: Ditto.\n\t* gcc.dg/simd-6.c: Ditto.\n\t* gcc.dg/va-arg-2.c: Ditto.\n\t* gcc.dg/cpp/syshdr.c: Ditto.\n\t* gcc.dg/cpp/unc4.c: Ditto.\n\t* gcc.dg/cpp/trad/mi1.c: Ditto.\n\t* gcc.dg/cpp/trad/mi5.c: Ditto.\n\t* gcc.dg/cpp/trad/mi7.c: Ditto.\n\t* gcc.test-framework/dg-outexistsnot-exp-P.c: Ditto.\n\t* gcc.test-framework/dg-outexists-exp-F.c: Ditto.\n\t* gcc.test-framework/test-framework.awk: Special-case outexists\n\ttests.\n\nCo-Authored-By: Manuel L\u00f3pez-Ib\u00e1\u00f1ez <manu@gcc.gnu.org>\n\nFrom-SVN: r124952", "tree": {"sha": "6f411b720f3ca69cf4479693f043778528364434", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f411b720f3ca69cf4479693f043778528364434"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ba2f32a925d3af9152710520c77de11c2987afd8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba2f32a925d3af9152710520c77de11c2987afd8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba2f32a925d3af9152710520c77de11c2987afd8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba2f32a925d3af9152710520c77de11c2987afd8/comments", "author": null, "committer": null, "parents": [{"sha": "1f801ab7880c75c24a4ae1386afe13f7ba8ee596", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f801ab7880c75c24a4ae1386afe13f7ba8ee596", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f801ab7880c75c24a4ae1386afe13f7ba8ee596"}], "stats": {"total": 110, "additions": 91, "deletions": 19}, "files": [{"sha": "7d46605eb63af76bd8a39919c691c1c4f1d129b3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba2f32a925d3af9152710520c77de11c2987afd8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba2f32a925d3af9152710520c77de11c2987afd8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ba2f32a925d3af9152710520c77de11c2987afd8", "patch": "@@ -1,3 +1,7 @@\n+2007-05-22  Janis Johnson  <janis187@us.ibm.com>\n+\n+\t* doc/sourcebuild.texi (Test Directives) Add dg-message.\n+\n 2007-05-22  H.J. Lu  <hongjiu.lu@intel.com>\n \t    Richard Henderson  <rth@redhat.com>\n "}, {"sha": "780653a6e89983e946c94162088585b07776ee0f", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba2f32a925d3af9152710520c77de11c2987afd8/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba2f32a925d3af9152710520c77de11c2987afd8/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=ba2f32a925d3af9152710520c77de11c2987afd8", "patch": "@@ -1016,6 +1016,12 @@ message is not matched by @var{regexp} then the check fails and\n @var{comment} is included in the @code{FAIL} message.  The check does\n not look for the string @samp{\"warning\"} unless it is part of @var{regexp}.\n \n+@item @{ dg-message @var{regexp} [@var{comment} [@{ target/xfail @var{selector} @} [@var{line}] @}]] @}\n+The line is expected to get a message other than an error or warning.\n+If there is no message for that line or if the text of that message is\n+not matched by @var{regexp} then the check fails and @var{comment} is\n+included in the @code{FAIL} message.\n+\n @item @{ dg-bogus @var{regexp} [@var{comment} [@{ target/xfail @var{selector} @} [@var{line}] @}]] @}\n This DejaGnu directive appears on a source line that should not get a\n message matching @var{regexp}, or else specifies the source line"}, {"sha": "5f694ac7d02bb780cad9914fae1c2a09a75d9faf", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba2f32a925d3af9152710520c77de11c2987afd8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba2f32a925d3af9152710520c77de11c2987afd8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ba2f32a925d3af9152710520c77de11c2987afd8", "patch": "@@ -1,3 +1,26 @@\n+2007-05-22  Janis Johnson  <janis187@us.ibm.com>\n+\t    Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\t* lib/gcc-dg.exp(process_message): New proc.\n+\t(dg-message): New test directive.\n+\t* gcc.dg/always_inline.c: Use dg-message.\n+\t* gcc.dg/always_inline2.c: Ditto.\n+\t* gcc.dg/always_inline3.c: Ditto.\n+\t* gcc.dg/invalid-call-1.c: Ditto.\n+\t* gcc.dg/pr17506.c: Ditto.\n+\t* gcc.dg/simd-5.c: Ditto.\n+\t* gcc.dg/simd-6.c: Ditto.\n+\t* gcc.dg/va-arg-2.c: Ditto.\n+\t* gcc.dg/cpp/syshdr.c: Ditto.\n+\t* gcc.dg/cpp/unc4.c: Ditto.\n+\t* gcc.dg/cpp/trad/mi1.c: Ditto.\n+\t* gcc.dg/cpp/trad/mi5.c: Ditto.\n+\t* gcc.dg/cpp/trad/mi7.c: Ditto.\n+\t* gcc.test-framework/dg-outexistsnot-exp-P.c: Ditto.\n+\t* gcc.test-framework/dg-outexists-exp-F.c: Ditto.\n+\t* gcc.test-framework/test-framework.awk: Special-case outexists\n+\ttests.\n+\n 2007-05-22  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* gcc.dg/i386-cpuid.h (bit_SSE4_1): New."}, {"sha": "1c04ac8ea38cc7cbc00307c4ff16b59adf7c64dd", "filename": "gcc/testsuite/gcc.dg/always_inline.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba2f32a925d3af9152710520c77de11c2987afd8/gcc%2Ftestsuite%2Fgcc.dg%2Falways_inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba2f32a925d3af9152710520c77de11c2987afd8/gcc%2Ftestsuite%2Fgcc.dg%2Falways_inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Falways_inline.c?ref=ba2f32a925d3af9152710520c77de11c2987afd8", "patch": "@@ -3,7 +3,7 @@\n #include <stdarg.h>\n inline __attribute__ ((always_inline)) void\n e(int t, ...)\n-{\t\t\t\t/* { dg-error \"variable argument\" \"\" } */\n+{\t\t\t\t/* { dg-message \"variable argument\" \"\" } */\n   va_list q;\n   va_start (q, t);\n }"}, {"sha": "7e488ebd09841ec58e22cd08379cb07d8c7e3fb5", "filename": "gcc/testsuite/gcc.dg/always_inline2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba2f32a925d3af9152710520c77de11c2987afd8/gcc%2Ftestsuite%2Fgcc.dg%2Falways_inline2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba2f32a925d3af9152710520c77de11c2987afd8/gcc%2Ftestsuite%2Fgcc.dg%2Falways_inline2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Falways_inline2.c?ref=ba2f32a925d3af9152710520c77de11c2987afd8", "patch": "@@ -1,8 +1,8 @@\n /* { dg-do compile } */\n /* { dg-options \"-Winline -O2\" } */\n-inline __attribute__ ((always_inline)) void t(void); /* { dg-error \"body not available\" \"\" } */\n+inline __attribute__ ((always_inline)) void t(void); /* { dg-message \"body not available\" \"\" } */\n void\n q(void)\n {\n-  t(); \t\t\t\t/* { dg-error \"called from here\" \"\" } */\n+  t(); \t\t\t\t/* { dg-message \"called from here\" \"\" } */\n }"}, {"sha": "369bb87e972a339027f1c57c93866946a8243950", "filename": "gcc/testsuite/gcc.dg/always_inline3.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba2f32a925d3af9152710520c77de11c2987afd8/gcc%2Ftestsuite%2Fgcc.dg%2Falways_inline3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba2f32a925d3af9152710520c77de11c2987afd8/gcc%2Ftestsuite%2Fgcc.dg%2Falways_inline3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Falways_inline3.c?ref=ba2f32a925d3af9152710520c77de11c2987afd8", "patch": "@@ -3,9 +3,9 @@\n int do_something_evil (void);\n inline __attribute__ ((always_inline)) void\n q2(void)\n-{ \t\t\t\t/* { dg-error \"recursive\" \"\" } */\n+{ \t\t\t\t/* { dg-message \"recursive\" \"\" } */\n   if (do_something_evil ())\n     return;\n-  q2(); \t\t\t/* { dg-error \"called from here\" \"\" } */\n+  q2(); \t\t\t/* { dg-message \"called from here\" \"\" } */\n   q2(); /* With -O2 we don't warn here, it is eliminated by tail recursion.  */\n }"}, {"sha": "75137739327274e8e4eb5121cf6512a3d5cd8bac", "filename": "gcc/testsuite/gcc.dg/cpp/syshdr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba2f32a925d3af9152710520c77de11c2987afd8/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fsyshdr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba2f32a925d3af9152710520c77de11c2987afd8/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fsyshdr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fsyshdr.c?ref=ba2f32a925d3af9152710520c77de11c2987afd8", "patch": "@@ -8,5 +8,5 @@\n /* { dg-do preprocess } */\n /* { dg-error \"include_next\" \"good error\" { target *-*-* } 4 } */\n \n-#include \"syshdr1.h\"  /* { dg-error \"\" \"In file included from:\" } */\n+#include \"syshdr1.h\"  /* { dg-message \"\" \"In file included from:\" } */\n #include \"syshdr2.h\""}, {"sha": "4004d21837715fd1bff4acb710edddb06dee8fa4", "filename": "gcc/testsuite/gcc.dg/cpp/trad/mi1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba2f32a925d3af9152710520c77de11c2987afd8/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmi1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba2f32a925d3af9152710520c77de11c2987afd8/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmi1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmi1.c?ref=ba2f32a925d3af9152710520c77de11c2987afd8", "patch": "@@ -13,7 +13,7 @@\n \n /* { dg-do compile }\n    { dg-options \"-H -traditional-cpp\" }\n-   { dg-error \"mi1c\\.h\\n\\[^\\n\\]*mi1nd\\.h\\n\\[^\\n\\]*mi1ndp\\.h\\n\\[^\\n\\]*mi1x\\.h\" \"redundant include check\" { target *-*-* } 0 } */\n+   { dg-message \"mi1c\\.h\\n\\[^\\n\\]*mi1nd\\.h\\n\\[^\\n\\]*mi1ndp\\.h\\n\\[^\\n\\]*mi1x\\.h\" \"redundant include check\" { target *-*-* } 0 } */\n \n #include \"mi1c.h\"\n #include \"mi1c.h\""}, {"sha": "ece38b5a6482af345ec9e8b333f4a94302644b67", "filename": "gcc/testsuite/gcc.dg/cpp/trad/mi5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba2f32a925d3af9152710520c77de11c2987afd8/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmi5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba2f32a925d3af9152710520c77de11c2987afd8/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmi5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmi5.c?ref=ba2f32a925d3af9152710520c77de11c2987afd8", "patch": "@@ -7,7 +7,7 @@\n \n /* { dg-do preprocess }\n    { dg-options \"-H -C -traditional-cpp\" }\n-   { dg-error \"mi1c\\.h\" \"redundant include check with -C\" { target *-*-* } 0 } */\n+   { dg-message \"mi1c\\.h\" \"redundant include check with -C\" { target *-*-* } 0 } */\n \n #include \"mi1c.h\"\n #include \"mi1c.h\""}, {"sha": "d980586f9caf09e821e16cd3a4bbb1f3a7c0b5b9", "filename": "gcc/testsuite/gcc.dg/cpp/trad/mi7.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba2f32a925d3af9152710520c77de11c2987afd8/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmi7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba2f32a925d3af9152710520c77de11c2987afd8/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmi7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmi7.c?ref=ba2f32a925d3af9152710520c77de11c2987afd8", "patch": "@@ -11,7 +11,7 @@\n \n /* { dg-do preprocess }\n    { dg-options \"-H -traditional-cpp\" }\n-   { dg-error \"mi7a\\.h\\n\\[^\\n\\]*mi7a\\.h\\n\\[^\\n\\]*mi7b\\.h\\n\\[^\\n\\]*mi7b\\.h\" \"redundant include check\" { target *-*-* } 0 } */\n+   { dg-message \"mi7a\\.h\\n\\[^\\n\\]*mi7a\\.h\\n\\[^\\n\\]*mi7b\\.h\\n\\[^\\n\\]*mi7b\\.h\" \"redundant include check\" { target *-*-* } 0 } */\n \n #include \"mi7a.h\"\n #include \"mi7a.h\""}, {"sha": "758e5bbc6d959b254cafdbcaa0cb495d3d23bde5", "filename": "gcc/testsuite/gcc.dg/cpp/unc4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba2f32a925d3af9152710520c77de11c2987afd8/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Func4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba2f32a925d3af9152710520c77de11c2987afd8/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Func4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Func4.c?ref=ba2f32a925d3af9152710520c77de11c2987afd8", "patch": "@@ -32,7 +32,7 @@ ignored\n    message.  */\n #define FOO\n #ifdef FOO  /* { dg-bogus \"unterminated\" \"nested unterm\" } */\n-#include \"unc1.c\"  /* { dg-error \"\" } */\n+#include \"unc1.c\"  /* { dg-message \"file included from\" \"\" { target *-*-* } 0 } */\n #endif\n \n /* dg.exp doesn't read the included files for tags, so we have to"}, {"sha": "2a7d372ca6adab2c80ca3f2d1e9e4010ba81e889", "filename": "gcc/testsuite/gcc.dg/invalid-call-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba2f32a925d3af9152710520c77de11c2987afd8/gcc%2Ftestsuite%2Fgcc.dg%2Finvalid-call-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba2f32a925d3af9152710520c77de11c2987afd8/gcc%2Ftestsuite%2Fgcc.dg%2Finvalid-call-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Finvalid-call-1.c?ref=ba2f32a925d3af9152710520c77de11c2987afd8", "patch": "@@ -13,5 +13,5 @@ char* cptr;\n void foo()\n {\n   cptr = mar(6);\n-  ((char *(*)(void *,int (*)(void *,unsigned char **),char**))((fp)bar))(0,0,(void*)(0)); /* { dg-warning \"\" \"non-compatible type\" } */\n+  ((char *(*)(void *,int (*)(void *,unsigned char **),char**))((fp)bar))(0,0,(void*)(0)); /* { dg-message \"\" \"non-compatible type\" } */\n }"}, {"sha": "7cca74613e7bf98638967f797a1b175b39ded101", "filename": "gcc/testsuite/gcc.dg/pr17506.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba2f32a925d3af9152710520c77de11c2987afd8/gcc%2Ftestsuite%2Fgcc.dg%2Fpr17506.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba2f32a925d3af9152710520c77de11c2987afd8/gcc%2Ftestsuite%2Fgcc.dg%2Fpr17506.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr17506.c?ref=ba2f32a925d3af9152710520c77de11c2987afd8", "patch": "@@ -18,7 +18,7 @@ void baz (void);\n void\n bar (void)\n {\n-  int j; /* { dg-error \"note: 'j' was declared here\" } */\n+  int j; /* { dg-message \"note: 'j' was declared here\" } */\n   for (; foo (j); ++j)\n     baz ();\n }"}, {"sha": "072162560c9496c2de1ccb37923f32b44d630c28", "filename": "gcc/testsuite/gcc.dg/simd-5.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba2f32a925d3af9152710520c77de11c2987afd8/gcc%2Ftestsuite%2Fgcc.dg%2Fsimd-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba2f32a925d3af9152710520c77de11c2987afd8/gcc%2Ftestsuite%2Fgcc.dg%2Fsimd-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsimd-5.c?ref=ba2f32a925d3af9152710520c77de11c2987afd8", "patch": "@@ -4,4 +4,5 @@\n /* Ensure that we don't need a typedef to initialize a vector type.  */\n #define vector __attribute__ ((vector_size (8)))\n vector char x = (vector char) {1,2,3,4,5,6,7,8}; /* { dg-bogus \"initializer\" } */\n-vector char y = (vector short) {1,2,3,4}; /* { dg-error \"use -flax-vector-conversions to permit conversions between vectors with differing element types or numbers of subparts.*incompatible types in initialization\" } */\n+vector char y = (vector short) {1,2,3,4}; /* { dg-message \"use -flax-vector-conversions to permit conversions between vectors with differing element types or numbers of subparts\" } */\n+  /* { dg-error \"incompatible types in initialization\" \"\" { target *-*-* } 7 } */"}, {"sha": "386f02ef29e96b76c6301f65e56ffa8038c59573", "filename": "gcc/testsuite/gcc.dg/simd-6.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba2f32a925d3af9152710520c77de11c2987afd8/gcc%2Ftestsuite%2Fgcc.dg%2Fsimd-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba2f32a925d3af9152710520c77de11c2987afd8/gcc%2Ftestsuite%2Fgcc.dg%2Fsimd-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsimd-6.c?ref=ba2f32a925d3af9152710520c77de11c2987afd8", "patch": "@@ -4,4 +4,5 @@\n /* Ensure that we don't need a typedef to initialize a vector type.  */\n #define vector __attribute__ ((vector_size (8)))\n vector char x = (vector char) {1,2,3,4,5,6,7,8}; /* { dg-bogus \"initializer\" } */\n-vector char y = (vector short) {1,2,3,4}; /* { dg-error \"use -flax-vector-conversions to permit conversions between vectors with differing element types or numbers of subparts.*incompatible types in initialization\" } */\n+vector char y = (vector short) {1,2,3,4}; /* { dg-message \"use -flax-vector-conversions to permit conversions between vectors with differing element types or numbers of subparts\" } */\n+\t/* { dg-message \"incompatible types in initialization\" \"\" { target *-*-* } 7 } */"}, {"sha": "597bf98d540cae0614dde917dd75a86801f64644", "filename": "gcc/testsuite/gcc.dg/va-arg-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba2f32a925d3af9152710520c77de11c2987afd8/gcc%2Ftestsuite%2Fgcc.dg%2Fva-arg-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba2f32a925d3af9152710520c77de11c2987afd8/gcc%2Ftestsuite%2Fgcc.dg%2Fva-arg-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fva-arg-2.c?ref=ba2f32a925d3af9152710520c77de11c2987afd8", "patch": "@@ -5,7 +5,7 @@\n \n #include <varargs.h>  /* { dg-bogus \"varargs.h\" \"missing file\" } */\n \n-/* { dg-error \"\" \"In file included from\" { target *-*-* } 6 } */\n+/* { dg-message \"\" \"In file included from\" { target *-*-* } 6 } */\n /* { dg-error \"no longer implements\" \"#error 1\" { target *-*-* } 4 } */\n /* { dg-error \"Revise your code\" \"#error 2\" { target *-*-* } 5 } */\n "}, {"sha": "34968a547f6e0ed109f24ff66f219409371a5819", "filename": "gcc/testsuite/gcc.test-framework/dg-outexists-exp-F.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba2f32a925d3af9152710520c77de11c2987afd8/gcc%2Ftestsuite%2Fgcc.test-framework%2Fdg-outexists-exp-F.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba2f32a925d3af9152710520c77de11c2987afd8/gcc%2Ftestsuite%2Fgcc.test-framework%2Fdg-outexists-exp-F.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.test-framework%2Fdg-outexists-exp-F.c?ref=ba2f32a925d3af9152710520c77de11c2987afd8", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-Wunused-value -Werror\" } */\n \n-int main (void) { 0; }   /* { dg-warning \"no effect\" } */\n+int main (void) { 0; }   /* { dg-error \"no effect\" } */\n \n-/* { dg-warning \"warnings being treated as errors\" \"\" { target *-*-* } 0 } */\n+/* { dg-message \"warnings being treated as errors\" \"\" { target *-*-* } 0 } */\n /* { dg-final { output-exists { target *-*-* } } } */"}, {"sha": "00260062f7d27f57c9147c95ed55cd4b21342303", "filename": "gcc/testsuite/gcc.test-framework/dg-outexistsnot-exp-P.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba2f32a925d3af9152710520c77de11c2987afd8/gcc%2Ftestsuite%2Fgcc.test-framework%2Fdg-outexistsnot-exp-P.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba2f32a925d3af9152710520c77de11c2987afd8/gcc%2Ftestsuite%2Fgcc.test-framework%2Fdg-outexistsnot-exp-P.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.test-framework%2Fdg-outexistsnot-exp-P.c?ref=ba2f32a925d3af9152710520c77de11c2987afd8", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-Wunused-value -Werror\" } */\n \n-int main (void) { 0; }   /* { dg-warning \"no effect\" } */\n+int main (void) { 0; }   /* { dg-error \"no effect\" } */\n \n-/* { dg-warning \"warnings being treated as errors\" \"\" { target *-*-* } 0 } */\n+/* { dg-message \"warnings being treated as errors\" \"\" { target *-*-* } 0 } */\n /* { dg-final { output-exists-not { target *-*-* } } } */"}, {"sha": "043e0c6cd4efb52ba7c16a25168ab7a193c51b02", "filename": "gcc/testsuite/gcc.test-framework/test-framework.awk", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba2f32a925d3af9152710520c77de11c2987afd8/gcc%2Ftestsuite%2Fgcc.test-framework%2Ftest-framework.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba2f32a925d3af9152710520c77de11c2987afd8/gcc%2Ftestsuite%2Fgcc.test-framework%2Ftest-framework.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.test-framework%2Ftest-framework.awk?ref=ba2f32a925d3af9152710520c77de11c2987afd8", "patch": "@@ -46,6 +46,7 @@ BEGIN\t\t\t{ skip = 1; passes = 0; fails = 0; }\n # ignore compile step, tests for warnings for output-exists[-not] tests.\n /dg-outexists.*\\(test for excess errors)/ { ignore(); next }\n /dg-outexists.*\\(test for warnings/ { ignore(); next }\n+/dg-outexists.*\\(test for errors/ { ignore(); next }\n # The other dox tests pass the compile step; ignore that message.\n /^PASS.*dox.*\\(test for excess errors\\)/ { ignore(); next }\n # The sf tests pass the compile step; ignore that message."}, {"sha": "d12ff529ac960c3f611a57556425a309ddff7778", "filename": "gcc/testsuite/lib/gcc-dg.exp", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba2f32a925d3af9152710520c77de11c2987afd8/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba2f32a925d3af9152710520c77de11c2987afd8/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp?ref=ba2f32a925d3af9152710520c77de11c2987afd8", "patch": "@@ -559,4 +559,40 @@ if { [info procs saved-dg-test] == [list] } {\n     }\n }\n \n+# Modify the regular expression saved by a DejaGnu message directive to\n+# include a prefix and to force the expression to match a single line.\n+# MSGPROC is the procedure to call.\n+# MSGPREFIX is the prefix to prepend.\n+# DGARGS is the original argument list.\n+\n+proc process-message { msgproc msgprefix dgargs } {\n+    upvar dg-messages dg-messages\n+\n+    # Process the dg- directive, including adding the regular expression\n+    # to the new message entry in dg-messages.\n+    set msgcnt [llength ${dg-messages}]\n+    catch { eval $msgproc $dgargs }\n+\n+    # If the target expression wasn't satisfied there is no new message.\n+    if { [llength ${dg-messages}] == $msgcnt } {\n+\treturn;\n+    }\n+\n+    # Prepend the message prefix to the regular expression and make\n+    # it match a single line.\n+    set newentry [lindex ${dg-messages} end]\n+    set expmsg [lindex $newentry 2]\n+    set expmsg \"$msgprefix\\[^\\n]*$expmsg\"\n+    set newentry [lreplace $newentry 2 2 $expmsg]\n+    set dg-messages [lreplace ${dg-messages} end end $newentry]\n+    verbose \"process-message:\\n${dg-messages}\" 2\n+}\n+\n+# Look for messages that don't have standard prefixes.\n+\n+proc dg-message { args } {\n+    upvar dg-messages dg-messages\n+    process-message dg-warning \"\" $args\n+}\n+\n set additional_prunes \"\""}]}