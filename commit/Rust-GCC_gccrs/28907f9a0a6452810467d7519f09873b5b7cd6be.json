{"sha": "28907f9a0a6452810467d7519f09873b5b7cd6be", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjg5MDdmOWEwYTY0NTI4MTA0NjdkNzUxOWYwOTg3M2I1YjdjZDZiZQ==", "commit": {"author": {"name": "Mark Shinwell", "email": "shinwell@codesourcery.com", "date": "2010-04-15T14:39:22Z"}, "committer": {"name": "Julian Brown", "email": "jules@gcc.gnu.org", "date": "2010-04-15T14:39:22Z"}, "message": "thumb2.md (thumb2_movsi_insn): Split ldr and str alternatives according to use of high and low regs.\n\n\tgcc/\n\t* config/arm/thumb2.md (thumb2_movsi_insn): Split ldr and str\n\talternatives according to use of high and low regs.\n\t* config/arm/vfp.md (thumb2_movsi_vfp): Likewise.\n\t* config/arm/arm.h (CONDITIONAL_REGISTER_USAGE): Use high regs when\n\toptimizing for size on Thumb-2.\n\n\nCo-Authored-By: Julian Brown <julian@codesourcery.com>\n\nFrom-SVN: r158378", "tree": {"sha": "3307259b566036b040ad6fb53a3da135d84fe218", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3307259b566036b040ad6fb53a3da135d84fe218"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/28907f9a0a6452810467d7519f09873b5b7cd6be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28907f9a0a6452810467d7519f09873b5b7cd6be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28907f9a0a6452810467d7519f09873b5b7cd6be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28907f9a0a6452810467d7519f09873b5b7cd6be/comments", "author": null, "committer": null, "parents": [{"sha": "3f56ef8b604873d6ef72ef93a3a026128459d3bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f56ef8b604873d6ef72ef93a3a026128459d3bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f56ef8b604873d6ef72ef93a3a026128459d3bb"}], "stats": {"total": 61, "additions": 40, "deletions": 21}, "files": [{"sha": "0b6da050a437d90c272d1f4f0d4489448233303e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28907f9a0a6452810467d7519f09873b5b7cd6be/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28907f9a0a6452810467d7519f09873b5b7cd6be/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=28907f9a0a6452810467d7519f09873b5b7cd6be", "patch": "@@ -1,3 +1,12 @@\n+2010-04-15  Mark Shinwell  <shinwell@codesourcery.com>\n+\t    Julian Brown  <julian@codesourcery.com>\n+\n+\t* config/arm/thumb2.md (thumb2_movsi_insn): Split ldr and str\n+\talternatives according to use of high and low regs.\n+\t* config/arm/vfp.md (thumb2_movsi_vfp): Likewise.\n+\t* config/arm/arm.h (CONDITIONAL_REGISTER_USAGE): Use high regs when\n+\toptimizing for size on Thumb-2.\n+\n 2010-04-15  Thomas Schwinge  <tschwinge@gnu.org>\n \n \t* config.gcc <i[34567]86-*-gnu*>: Handle softfp as for Linux."}, {"sha": "ca430e94dd0932ee578febe12c5cd97e7f61522e", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28907f9a0a6452810467d7519f09873b5b7cd6be/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28907f9a0a6452810467d7519f09873b5b7cd6be/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=28907f9a0a6452810467d7519f09873b5b7cd6be", "patch": "@@ -771,12 +771,11 @@ extern int arm_structure_size_boundary;\n \tfixed_regs[regno] = call_used_regs[regno] = 1;\t\t\\\n     }\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\\\n-  if (TARGET_THUMB && optimize_size)\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      /* When optimizing for size, it's better not to use\t\\\n-\t the HI regs, because of the overhead of stacking \t\\\n-\t them.  */\t\t\t\t\t\t\\\n-      /* ??? Is this still true for thumb2?  */\t\t\t\\\n+  if (TARGET_THUMB1 && optimize_size)\t\t\t\t\\\n+    {                                                           \\\n+      /* When optimizing for size on Thumb-1, it's better not\t\\\n+        to use the HI regs, because of the overhead of\t\t\\\n+        stacking them.  */                                      \\\n       for (regno = FIRST_HI_REGNUM;\t\t\t\t\\\n \t   regno <= LAST_HI_REGNUM; ++regno)\t\t\t\\\n \tfixed_regs[regno] = call_used_regs[regno] = 1;\t\t\\"}, {"sha": "3e2c3daea3b32fbaafdac232709c4faaf5e59aa2", "filename": "gcc/config/arm/thumb2.md", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28907f9a0a6452810467d7519f09873b5b7cd6be/gcc%2Fconfig%2Farm%2Fthumb2.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28907f9a0a6452810467d7519f09873b5b7cd6be/gcc%2Fconfig%2Farm%2Fthumb2.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fthumb2.md?ref=28907f9a0a6452810467d7519f09873b5b7cd6be", "patch": "@@ -223,9 +223,14 @@\n    (set_attr \"neg_pool_range\" \"*,*,*,0,*\")]\n )\n \n+;; We have two alternatives here for memory loads (and similarly for stores)\n+;; to reflect the fact that the permissible constant pool ranges differ\n+;; between ldr instructions taking low regs and ldr instructions taking high\n+;; regs.  The high register alternatives are not taken into account when\n+;; choosing register preferences in order to reflect their expense.\n (define_insn \"*thumb2_movsi_insn\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rk,r,r,r,rk,m\")\n-\t(match_operand:SI 1 \"general_operand\"\t   \"rk ,I,K,j,mi,rk\"))]\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rk,r,r,r,l ,*hk,m,*m\")\n+\t(match_operand:SI 1 \"general_operand\"\t   \"rk ,I,K,j,mi,*mi,l,*hk\"))]\n   \"TARGET_THUMB2 && ! TARGET_IWMMXT\n    && !(TARGET_HARD_FLOAT && TARGET_VFP)\n    && (   register_operand (operands[0], SImode)\n@@ -236,11 +241,13 @@\n    mvn%?\\\\t%0, #%B1\n    movw%?\\\\t%0, %1\n    ldr%?\\\\t%0, %1\n+   ldr%?\\\\t%0, %1\n+   str%?\\\\t%1, %0\n    str%?\\\\t%1, %0\"\n-  [(set_attr \"type\" \"*,*,*,*,load1,store1\")\n+  [(set_attr \"type\" \"*,*,*,*,load1,load1,store1,store1\")\n    (set_attr \"predicable\" \"yes\")\n-   (set_attr \"pool_range\" \"*,*,*,*,4096,*\")\n-   (set_attr \"neg_pool_range\" \"*,*,*,*,0,*\")]\n+   (set_attr \"pool_range\" \"*,*,*,*,1020,4096,*,*\")\n+   (set_attr \"neg_pool_range\" \"*,*,*,*,0,0,*,*\")]\n )\n \n (define_insn \"tls_load_dot_plus_four\""}, {"sha": "02d527b79c5d5addeaef2432ad02503b2feea94e", "filename": "gcc/config/arm/vfp.md", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28907f9a0a6452810467d7519f09873b5b7cd6be/gcc%2Fconfig%2Farm%2Fvfp.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28907f9a0a6452810467d7519f09873b5b7cd6be/gcc%2Fconfig%2Farm%2Fvfp.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fvfp.md?ref=28907f9a0a6452810467d7519f09873b5b7cd6be", "patch": "@@ -86,9 +86,11 @@\n    (set_attr \"neg_pool_range\" \"*,*,*,*,4084,*,*,*,*,1008,*\")]\n )\n \n+;; See thumb2.md:thumb2_movsi_insn for an explanation of the split\n+;; high/low register alternatives for loads and stores here.\n (define_insn \"*thumb2_movsi_vfp\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rk,r,r,r,rk,m,*t,r, *t,*t, *Uv\")\n-      (match_operand:SI 1 \"general_operand\"\t   \"rk, I,K,j,mi,rk,r,*t,*t,*Uvi,*t\"))]\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rk,r,r,r, l,*hk,m, *m,*t, r,*t,*t,  *Uv\")\n+\t(match_operand:SI 1 \"general_operand\"\t   \"rk, I,K,j,mi,*mi,l,*hk, r,*t,*t,*Uvi,*t\"))]\n   \"TARGET_THUMB2 && TARGET_VFP && TARGET_HARD_FLOAT\n    && (   s_register_operand (operands[0], SImode)\n        || s_register_operand (operands[1], SImode))\"\n@@ -102,25 +104,27 @@\n     case 3:\n       return \\\"movw%?\\\\t%0, %1\\\";\n     case 4:\n-      return \\\"ldr%?\\\\t%0, %1\\\";\n     case 5:\n-      return \\\"str%?\\\\t%1, %0\\\";\n+      return \\\"ldr%?\\\\t%0, %1\\\";\n     case 6:\n-      return \\\"fmsr%?\\\\t%0, %1\\\\t%@ int\\\";\n     case 7:\n-      return \\\"fmrs%?\\\\t%0, %1\\\\t%@ int\\\";\n+      return \\\"str%?\\\\t%1, %0\\\";\n     case 8:\n+      return \\\"fmsr%?\\\\t%0, %1\\\\t%@ int\\\";\n+    case 9:\n+      return \\\"fmrs%?\\\\t%0, %1\\\\t%@ int\\\";\n+    case 10:\n       return \\\"fcpys%?\\\\t%0, %1\\\\t%@ int\\\";\n-    case 9: case 10:\n+    case 11: case 12:\n       return output_move_vfp (operands);\n     default:\n       gcc_unreachable ();\n     }\n   \"\n   [(set_attr \"predicable\" \"yes\")\n-   (set_attr \"type\" \"*,*,*,*,load1,store1,r_2_f,f_2_r,fcpys,f_load,f_store\")\n-   (set_attr \"pool_range\"     \"*,*,*,*,4096,*,*,*,*,1020,*\")\n-   (set_attr \"neg_pool_range\" \"*,*,*,*,   0,*,*,*,*,1008,*\")]\n+   (set_attr \"type\" \"*,*,*,*,load1,load1,store1,store1,r_2_f,f_2_r,fcpys,f_load,f_store\")\n+   (set_attr \"pool_range\"     \"*,*,*,*,1020,4096,*,*,*,*,*,1020,*\")\n+   (set_attr \"neg_pool_range\" \"*,*,*,*,   0,   0,*,*,*,*,*,1008,*\")]\n )\n \n "}]}