{"sha": "6d3aa24cd6535dcfc9f0701579eca53aa191768c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmQzYWEyNGNkNjUzNWRjZmM5ZjA3MDE1NzllY2E1M2FhMTkxNzY4Yw==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2018-02-09T01:07:11Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2018-02-09T01:07:11Z"}, "message": "Fix ICE in find_taken_edge_computed_goto (PR 84136)\n\nPR 84136 reports an ICE within sccvn_dom_walker when handling a\nC/C++ source file that overuses the labels-as-values extension.\nThe code in question stores a jump label into a global, and then\njumps to it from another function, which ICEs after inlining:\n\nvoid* a;\n\nvoid foo() {\n  if ((a = &&l))\n      return;\n\n  l:;\n}\n\nint main() {\n  foo();\n  goto *a;\n\n  return 0;\n}\n\nThis appears to be far beyond what we claim to support in this\nextension - but we shouldn't ICE.\n\nWhat's happening is that, after inlining, we have usage of a *copy*\nof the label, which optimizes away the if-return logic, turning it\ninto an infinite loop.\n\nOn entry to the sccvn_dom_walker we have this gimple:\n\nmain ()\n{\n  void * a.0_1;\n\n  <bb 2> [count: 0]:\n  a = &l;\n\n  <bb 3> [count: 0]:\nl:\n  a.0_1 = a;\n  goto a.0_1;\n}\n\nand:\n  edge taken = find_taken_edge (bb, vn_valueize (val));\nreasonably valueizes the:\n  goto a.0_1;\nafter the:\n  a = &l;\n  a.0_1 = a;\nas if it were:\n  goto *&l;\n\nfind_taken_edge_computed_goto then has:\n\n2380\t  dest = label_to_block (val);\n2381\t  if (dest)\n2382\t    {\n2383\t      e = find_edge (bb, dest);\n2384\t      gcc_assert (e != NULL);\n2385\t    }\n\nwhich locates dest as a self-jump from block 3 back to itself.\n\nHowever, the find_edge call returns NULL - it has a predecessor edge\nfrom block 2, but no successor edges.\n\nHence the assertion fails and we ICE.\n\nA successor edge from the computed goto could have been created by\nmake_edges if the label stmt had been in the function, but make_edges\nonly looks in the current function when handling computed gotos, and\nthe label only appeared after inlining.\n\nThe following patch removes the assertion, fixing the ICE.\n\ngcc/testsuite/ChangeLog:\n\tPR tree-optimization/84136\n\t* gcc.c-torture/compile/pr84136.c: New test.\n\ngcc/ChangeLog:\n\tPR tree-optimization/84136\n\t* tree-cfg.c (find_taken_edge_computed_goto): Remove assertion\n\tthat the result of find_edge is non-NULL.\n\nFrom-SVN: r257509", "tree": {"sha": "f9732b16bca50b2d1c3b4ad86f5e65d8fe28c988", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f9732b16bca50b2d1c3b4ad86f5e65d8fe28c988"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6d3aa24cd6535dcfc9f0701579eca53aa191768c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d3aa24cd6535dcfc9f0701579eca53aa191768c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d3aa24cd6535dcfc9f0701579eca53aa191768c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d3aa24cd6535dcfc9f0701579eca53aa191768c/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7e64287b36bc9501cf8e214367b6d4dcfeeaae46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e64287b36bc9501cf8e214367b6d4dcfeeaae46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e64287b36bc9501cf8e214367b6d4dcfeeaae46"}], "stats": {"total": 38, "additions": 34, "deletions": 4}, "files": [{"sha": "8212952e8d8e9538bfac29d36deb55aeb40184fc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d3aa24cd6535dcfc9f0701579eca53aa191768c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d3aa24cd6535dcfc9f0701579eca53aa191768c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6d3aa24cd6535dcfc9f0701579eca53aa191768c", "patch": "@@ -1,3 +1,9 @@\n+2018-02-08  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR tree-optimization/84136\n+\t* tree-cfg.c (find_taken_edge_computed_goto): Remove assertion\n+\tthat the result of find_edge is non-NULL.\n+\n 2018-02-08  Sergey Shalnov  <sergey.shalnov@intel.com>\n \n \tPR target/83008"}, {"sha": "dfa8cb87d930d0e9e16a6e0c01b3e6f55bc50569", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d3aa24cd6535dcfc9f0701579eca53aa191768c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d3aa24cd6535dcfc9f0701579eca53aa191768c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6d3aa24cd6535dcfc9f0701579eca53aa191768c", "patch": "@@ -1,3 +1,8 @@\n+2018-02-08  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR tree-optimization/84136\n+\t* gcc.c-torture/compile/pr84136.c: New test.\n+\n 2018-02-08  Sergey Shalnov  <sergey.shalnov@intel.com>\n \n \tPR target/83008"}, {"sha": "0a70e4e3203e819f30cc692475053e56bed7d5b0", "filename": "gcc/testsuite/gcc.c-torture/compile/pr84136.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d3aa24cd6535dcfc9f0701579eca53aa191768c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr84136.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d3aa24cd6535dcfc9f0701579eca53aa191768c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr84136.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr84136.c?ref=6d3aa24cd6535dcfc9f0701579eca53aa191768c", "patch": "@@ -0,0 +1,15 @@\n+void* a;\n+\n+void foo() {\n+    if ((a = &&l))\n+        return;\n+\n+    l:;\n+}\n+\n+int main() {\n+    foo();\n+    goto *a;\n+\n+    return 0;\n+}"}, {"sha": "b87e48dade6309c9668f21f106d1d53d30a0cb40", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d3aa24cd6535dcfc9f0701579eca53aa191768c/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d3aa24cd6535dcfc9f0701579eca53aa191768c/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=6d3aa24cd6535dcfc9f0701579eca53aa191768c", "patch": "@@ -2379,10 +2379,14 @@ find_taken_edge_computed_goto (basic_block bb, tree val)\n \n   dest = label_to_block (val);\n   if (dest)\n-    {\n-      e = find_edge (bb, dest);\n-      gcc_assert (e != NULL);\n-    }\n+    e = find_edge (bb, dest);\n+\n+  /* It's possible for find_edge to return NULL here on invalid code\n+     that abuses the labels-as-values extension (e.g. code that attempts to\n+     jump *between* functions via stored labels-as-values; PR 84136).\n+     If so, then we simply return that NULL for the edge.\n+     We don't currently have a way of detecting such invalid code, so we\n+     can't assert that it was the case when a NULL edge occurs here.  */\n \n   return e;\n }"}]}