{"sha": "97ce876c3291f763e20a4487e7920705182c1826", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTdjZTg3NmMzMjkxZjc2M2UyMGE0NDg3ZTc5MjA3MDUxODJjMTgyNg==", "commit": {"author": {"name": "J. David Anglin", "email": "dave@hiauly1.hia.nrc.ca", "date": "2000-06-13T15:54:53Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2000-06-13T15:54:53Z"}, "message": "vax.h (INDEX_TERM_P): Define evaluation order of &&'s in || and cast to squelch signed/unsigned warnings.\n\n        * vax.h (INDEX_TERM_P): Define evaluation order of &&'s in || and\n        cast to squelch signed/unsigned warnings.\n\nFrom-SVN: r34516", "tree": {"sha": "403a2d4b8da423e74986eb4e20cd1813bdae4604", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/403a2d4b8da423e74986eb4e20cd1813bdae4604"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/97ce876c3291f763e20a4487e7920705182c1826", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97ce876c3291f763e20a4487e7920705182c1826", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97ce876c3291f763e20a4487e7920705182c1826", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97ce876c3291f763e20a4487e7920705182c1826/comments", "author": null, "committer": null, "parents": [{"sha": "77fd1bfbd77220509829e0e2ad28878237b6cfd3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77fd1bfbd77220509829e0e2ad28878237b6cfd3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77fd1bfbd77220509829e0e2ad28878237b6cfd3"}], "stats": {"total": 23, "additions": 14, "deletions": 9}, "files": [{"sha": "998fd5dbcd2dc54ffe31895ba94162dfb0c98783", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97ce876c3291f763e20a4487e7920705182c1826/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97ce876c3291f763e20a4487e7920705182c1826/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=97ce876c3291f763e20a4487e7920705182c1826", "patch": "@@ -1,3 +1,8 @@\n+2000-06-13  J. David Anglin  <dave@hiauly1.hia.nrc.ca>\n+\n+\t* vax.h (INDEX_TERM_P): Define evaluation order of &&'s in || and\n+\tcast to squelch signed/unsigned warnings.\n+\n 2000-06-13  Zack Weinberg  <zack@wolery.cumb.org>\n \n \t* cpplib.c (handle_directive): Print non-NUL-terminated string"}, {"sha": "8dddaf3701bb01bc90d3b08db2c31497d87246ff", "filename": "gcc/config/vax/vax.h", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97ce876c3291f763e20a4487e7920705182c1826/gcc%2Fconfig%2Fvax%2Fvax.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97ce876c3291f763e20a4487e7920705182c1826/gcc%2Fconfig%2Fvax%2Fvax.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.h?ref=97ce876c3291f763e20a4487e7920705182c1826", "patch": "@@ -731,15 +731,15 @@ enum reg_class { NO_REGS, ALL_REGS, LIM_REG_CLASSES };\n  : (GET_CODE (PROD) == MULT\t\t\t\t\t\t\\\n     &&\t\t\t\t\t\t\t\t\t\\\n     (xfoo0 = XEXP (PROD, 0), xfoo1 = XEXP (PROD, 1),\t\t\t\\\n-     ((GET_CODE (xfoo0) == CONST_INT\t\t\t\t\t\\\n-       && INTVAL (xfoo0) == GET_MODE_SIZE (MODE)\t\t\t\\\n-       && GET_CODE (xfoo1) == REG\t\t\t\t\t\\\n-       && REG_OK_FOR_INDEX_P (xfoo1))\t\t\t\t\t\\\n-      ||\t\t\t\t\t\t\t\t\\\n-      (GET_CODE (xfoo1) == CONST_INT\t\t\t\t\t\\\n-       && INTVAL (xfoo1) == GET_MODE_SIZE (MODE)\t\t\t\\\n-       && GET_CODE (xfoo0) == REG\t\t\t\t\t\\\n-       && REG_OK_FOR_INDEX_P (xfoo0))))))\n+     ((((GET_CODE (xfoo0) == CONST_INT\t\t\t\t\t\\\n+         && GET_CODE (xfoo1) == REG)\t\t\t\t\t\\\n+         && INTVAL (xfoo0) == (int)GET_MODE_SIZE (MODE))\t\t\\\n+         && REG_OK_FOR_INDEX_P (xfoo1))\t\t\t\t\t\\\n+        ||\t\t\t\t\t\t\t\t\\\n+      (((GET_CODE (xfoo1) == CONST_INT\t\t\t\t\t\\\n+         && GET_CODE (xfoo0) == REG)\t\t\t\t\t\\\n+         && INTVAL (xfoo1) == (int)GET_MODE_SIZE (MODE))\t\t\\\n+         && REG_OK_FOR_INDEX_P (xfoo0))))))\n \n /* Go to ADDR if X is the sum of a register\n    and a valid index term for mode MODE.  */"}]}