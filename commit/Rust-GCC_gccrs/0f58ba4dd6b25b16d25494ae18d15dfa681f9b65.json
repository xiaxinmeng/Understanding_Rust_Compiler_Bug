{"sha": "0f58ba4dd6b25b16d25494ae18d15dfa681f9b65", "node_id": "C_kwDOANBUbNoAKDBmNThiYTRkZDZiMjViMTZkMjU0OTRhZTE4ZDE1ZGZhNjgxZjliNjU", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-02-04T08:46:43Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-02-10T09:56:14Z"}, "message": "tree-optimization/104373 - early diagnostic on unreachable code\n\nThe following improves early uninit diagnostics by computing edge\nreachability using VN and ignoring unreachable blocks when looking\nfor uninitialized uses.  To not ICE with -fdump-tree-all the\nearly uninit pass needs a dumpfile since VN tries to dump statistics.\n\n2022-02-04  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/104373\n\t* tree-ssa-sccvn.h (do_rpo_vn): New export exposing the\n\twalk kind.\n\t* tree-ssa-sccvn.cc (do_rpo_vn): Export, get the default\n\twalk kind as argument.\n\t(run_rpo_vn): Adjust.\n\t(pass_fre::execute): Likewise.\n\t* tree-ssa-uninit.cc (warn_uninitialized_vars): Skip\n\tblocks not reachable.\n\t(execute_late_warn_uninitialized): Mark all edges as\n\texecutable.\n\t(execute_early_warn_uninitialized): Use VN to compute\n\texecutable edges.\n\t(pass_data_early_warn_uninitialized): Enable a dump file,\n\tchange dump name to warn_uninit.\n\n\t* g++.dg/warn/Wuninitialized-32.C: New testcase.\n\t* gcc.dg/uninit-pr20644-O0.c: Remove XFAIL.", "tree": {"sha": "72fb407291d3a50d206b43c977c237a49a41e642", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/72fb407291d3a50d206b43c977c237a49a41e642"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0f58ba4dd6b25b16d25494ae18d15dfa681f9b65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f58ba4dd6b25b16d25494ae18d15dfa681f9b65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f58ba4dd6b25b16d25494ae18d15dfa681f9b65", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f58ba4dd6b25b16d25494ae18d15dfa681f9b65/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a8083285c3edf50088a095870b217ab0881dff0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a8083285c3edf50088a095870b217ab0881dff0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a8083285c3edf50088a095870b217ab0881dff0"}], "stats": {"total": 74, "additions": 58, "deletions": 16}, "files": [{"sha": "8b02b5c6adbff1bcdb608b422551b163df07ea5d", "filename": "gcc/testsuite/g++.dg/warn/Wuninitialized-32.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f58ba4dd6b25b16d25494ae18d15dfa681f9b65/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWuninitialized-32.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f58ba4dd6b25b16d25494ae18d15dfa681f9b65/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWuninitialized-32.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWuninitialized-32.C?ref=0f58ba4dd6b25b16d25494ae18d15dfa681f9b65", "patch": "@@ -0,0 +1,14 @@\n+// { dg-do compile }\n+// { dg-additional-options \"-Wall\" }\n+\n+void* operator new[](unsigned long, void* __p);\n+\n+struct allocator\n+{\n+  ~allocator();\n+};\n+\n+void *foo (void *p)\n+{\n+  return p ? new(p) allocator[1] : new allocator[1]; // { dg-bogus \"uninitialized\" }\n+}"}, {"sha": "a335d8cb4ebe3cd0b4dc4732f54b6c06c3596e07", "filename": "gcc/testsuite/gcc.dg/uninit-pr20644-O0.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f58ba4dd6b25b16d25494ae18d15dfa681f9b65/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr20644-O0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f58ba4dd6b25b16d25494ae18d15dfa681f9b65/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr20644-O0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr20644-O0.c?ref=0f58ba4dd6b25b16d25494ae18d15dfa681f9b65", "patch": "@@ -7,7 +7,7 @@ int foo ()\n   int j;\n \n   if (1 == i)\n-    return j; /* { dg-bogus \"uninitialized\" \"uninitialized\" { xfail *-*-* } } */\n+    return j; /* { dg-bogus \"uninitialized\" \"uninitialized\" } */\n \n   return 0;\n }"}, {"sha": "eb17549c18573dba7b513feff20fa05c19ca4281", "filename": "gcc/tree-ssa-sccvn.cc", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f58ba4dd6b25b16d25494ae18d15dfa681f9b65/gcc%2Ftree-ssa-sccvn.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f58ba4dd6b25b16d25494ae18d15dfa681f9b65/gcc%2Ftree-ssa-sccvn.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.cc?ref=0f58ba4dd6b25b16d25494ae18d15dfa681f9b65", "patch": "@@ -7034,15 +7034,14 @@ eliminate_with_rpo_vn (bitmap inserted_exprs)\n   return walker.eliminate_cleanup ();\n }\n \n-static unsigned\n+unsigned\n do_rpo_vn (function *fn, edge entry, bitmap exit_bbs,\n-\t   bool iterate, bool eliminate);\n+\t   bool iterate, bool eliminate, vn_lookup_kind kind);\n \n void\n run_rpo_vn (vn_lookup_kind kind)\n {\n-  default_vn_walk_kind = kind;\n-  do_rpo_vn (cfun, NULL, NULL, true, false);\n+  do_rpo_vn (cfun, NULL, NULL, true, false, kind);\n \n   /* ???  Prune requirement of these.  */\n   constant_to_value_id = new hash_table<vn_constant_hasher> (23);\n@@ -7740,11 +7739,12 @@ do_unwind (unwind_state *to, rpo_elim &avail)\n    executed and iterate.  If ELIMINATE is true then perform\n    elimination, otherwise leave that to the caller.  */\n \n-static unsigned\n+unsigned\n do_rpo_vn (function *fn, edge entry, bitmap exit_bbs,\n-\t   bool iterate, bool eliminate)\n+\t   bool iterate, bool eliminate, vn_lookup_kind kind)\n {\n   unsigned todo = 0;\n+  default_vn_walk_kind = kind;\n \n   /* We currently do not support region-based iteration when\n      elimination is requested.  */\n@@ -8164,8 +8164,7 @@ do_rpo_vn (function *fn, edge entry, bitmap exit_bbs,\n unsigned\n do_rpo_vn (function *fn, edge entry, bitmap exit_bbs)\n {\n-  default_vn_walk_kind = VN_WALKREWRITE;\n-  unsigned todo = do_rpo_vn (fn, entry, exit_bbs, false, true);\n+  unsigned todo = do_rpo_vn (fn, entry, exit_bbs, false, true, VN_WALKREWRITE);\n   free_rpo_vn ();\n   return todo;\n }\n@@ -8221,8 +8220,7 @@ pass_fre::execute (function *fun)\n   if (iterate_p)\n     loop_optimizer_init (AVOID_CFG_MODIFICATIONS);\n \n-  default_vn_walk_kind = VN_WALKREWRITE;\n-  todo = do_rpo_vn (fun, NULL, NULL, iterate_p, true);\n+  todo = do_rpo_vn (fun, NULL, NULL, iterate_p, true, VN_WALKREWRITE);\n   free_rpo_vn ();\n \n   if (iterate_p)"}, {"sha": "aeed07039b741b2ed2053236ca5ca28ecde61073", "filename": "gcc/tree-ssa-sccvn.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f58ba4dd6b25b16d25494ae18d15dfa681f9b65/gcc%2Ftree-ssa-sccvn.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f58ba4dd6b25b16d25494ae18d15dfa681f9b65/gcc%2Ftree-ssa-sccvn.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.h?ref=0f58ba4dd6b25b16d25494ae18d15dfa681f9b65", "patch": "@@ -291,6 +291,7 @@ value_id_constant_p (unsigned int v)\n tree fully_constant_vn_reference_p (vn_reference_t);\n tree vn_nary_simplify (vn_nary_op_t);\n \n+unsigned do_rpo_vn (function *, edge, bitmap, bool, bool, vn_lookup_kind);\n unsigned do_rpo_vn (function *, edge, bitmap);\n void run_rpo_vn (vn_lookup_kind);\n unsigned eliminate_with_rpo_vn (bitmap);"}, {"sha": "ab83a4b7978493267d3dab78347ea5c38a871549", "filename": "gcc/tree-ssa-uninit.cc", "status": "modified", "additions": 34, "deletions": 5, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f58ba4dd6b25b16d25494ae18d15dfa681f9b65/gcc%2Ftree-ssa-uninit.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f58ba4dd6b25b16d25494ae18d15dfa681f9b65/gcc%2Ftree-ssa-uninit.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-uninit.cc?ref=0f58ba4dd6b25b16d25494ae18d15dfa681f9b65", "patch": "@@ -38,8 +38,9 @@ along with GCC; see the file COPYING3.  If not see\n #include \"builtins.h\"\n #include \"calls.h\"\n #include \"gimple-range.h\"\n-\n #include \"gimple-predicate-analysis.h\"\n+#include \"domwalk.h\"\n+#include \"tree-ssa-sccvn.h\"\n \n /* This implements the pass that does predicate aware warning on uses of\n    possibly uninitialized variables.  The pass first collects the set of\n@@ -986,7 +987,19 @@ warn_uninitialized_vars (bool wmaybe_uninit)\n   basic_block bb;\n   FOR_EACH_BB_FN (bb, cfun)\n     {\n+      edge_iterator ei;\n+      edge e;\n+      FOR_EACH_EDGE (e, ei, bb->preds)\n+\tif (e->flags & EDGE_EXECUTABLE)\n+\t  break;\n+      /* Skip unreachable blocks.  For early analysis we use VN to\n+\t determine edge executability when wmaybe_uninit.  */\n+      if (!e)\n+\tcontinue;\n+\n       basic_block succ = single_succ (ENTRY_BLOCK_PTR_FOR_FN (cfun));\n+      /* ???  This could be improved when we use a greedy walk and have\n+\t some edges marked as not executable.  */\n       wlims.always_executed = dominated_by_p (CDI_POST_DOMINATORS, succ, bb);\n \n       if (wlims.always_executed)\n@@ -1319,6 +1332,11 @@ execute_late_warn_uninitialized (function *fun)\n \n   calculate_dominance_info (CDI_DOMINATORS);\n   calculate_dominance_info (CDI_POST_DOMINATORS);\n+\n+  /* Mark all edges executable, warn_uninitialized_vars will skip\n+     unreachable blocks.  */\n+  set_all_edges_as_executable (fun);\n+\n   /* Re-do the plain uninitialized variable check, as optimization may have\n      straightened control flow.  Do this first so that we don't accidentally\n      get a \"may be\" warning when we'd have seen an \"is\" warning later.  */\n@@ -1388,7 +1406,7 @@ make_pass_late_warn_uninitialized (gcc::context *ctxt)\n }\n \n static unsigned int\n-execute_early_warn_uninitialized (void)\n+execute_early_warn_uninitialized (struct function *fun)\n {\n   /* Currently, this pass runs always but\n      execute_late_warn_uninitialized only runs with optimization.  With\n@@ -1398,6 +1416,17 @@ execute_early_warn_uninitialized (void)\n   calculate_dominance_info (CDI_DOMINATORS);\n   calculate_dominance_info (CDI_POST_DOMINATORS);\n \n+  /* Use VN in its cheapest incarnation and without doing any\n+     elimination to compute edge reachability.  Don't bother when\n+     we only warn for unconditionally executed code though.  */\n+  if (!optimize)\n+    {\n+      do_rpo_vn (fun, NULL, NULL, false, false, VN_NOWALK);\n+      free_rpo_vn ();\n+    }\n+  else\n+    set_all_edges_as_executable (fun);\n+\n   warn_uninitialized_vars (/*warn_maybe_uninitialized=*/!optimize);\n \n   /* Post-dominator information cannot be reliably updated.  Free it\n@@ -1412,7 +1441,7 @@ namespace {\n const pass_data pass_data_early_warn_uninitialized =\n {\n   GIMPLE_PASS, /* type */\n-  \"*early_warn_uninitialized\", /* name */\n+  \"early_uninit\", /* name */\n   OPTGROUP_NONE, /* optinfo_flags */\n   TV_TREE_UNINIT, /* tv_id */\n   PROP_ssa, /* properties_required */\n@@ -1431,9 +1460,9 @@ class pass_early_warn_uninitialized : public gimple_opt_pass\n \n   /* opt_pass methods: */\n   virtual bool gate (function *) { return gate_warn_uninitialized (); }\n-  virtual unsigned int execute (function *)\n+  virtual unsigned int execute (function *fun)\n   {\n-    return execute_early_warn_uninitialized ();\n+    return execute_early_warn_uninitialized (fun);\n   }\n \n }; // class pass_early_warn_uninitialized"}]}