{"sha": "2041e75c3cee7c6636283cf056c1f8f58478d393", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjA0MWU3NWMzY2VlN2M2NjM2MjgzY2YwNTZjMWY4ZjU4NDc4ZDM5Mw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2008-03-26T15:07:27Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2008-03-26T15:07:27Z"}, "message": "revert: fold-const.c (target.h): Include.\n\n2008-03-26  Richard Guenther  <rguenther@suse.de>\n\n        Revert\n        2008-03-26  Richard Guenther  <rguenther@suse.de>\n\n\t* fold-const.c (target.h): Include.\n\t(fold_comparison): Fold comparison of addresses of two decls\n\tthat bind locally.  Consolidate address folding code.\n\n\t* gcc.dg/fold-addr-1.c: New testcase.\n\nFrom-SVN: r133608", "tree": {"sha": "a91eff174d12923082c681b930fb2889f199f561", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a91eff174d12923082c681b930fb2889f199f561"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2041e75c3cee7c6636283cf056c1f8f58478d393", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2041e75c3cee7c6636283cf056c1f8f58478d393", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2041e75c3cee7c6636283cf056c1f8f58478d393", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2041e75c3cee7c6636283cf056c1f8f58478d393/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "aefa9d43dcc6925454a258b8107e91462e60beac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aefa9d43dcc6925454a258b8107e91462e60beac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aefa9d43dcc6925454a258b8107e91462e60beac"}], "stats": {"total": 97, "additions": 48, "deletions": 49}, "files": [{"sha": "20c7e9925b7a73e033be3dd9474c8943540866a6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2041e75c3cee7c6636283cf056c1f8f58478d393/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2041e75c3cee7c6636283cf056c1f8f58478d393/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2041e75c3cee7c6636283cf056c1f8f58478d393", "patch": "@@ -1,3 +1,12 @@\n+2008-03-26  Richard Guenther  <rguenther@suse.de>\n+\n+\tRevert\n+\t2008-03-26  Richard Guenther  <rguenther@suse.de>\n+\n+\t* fold-const.c (target.h): Include.\n+\t(fold_comparison): Fold comparison of addresses of two decls\n+\tthat bind locally.  Consolidate address folding code.\n+\n 2008-03-26  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* builtins.c (expand_builtin_pow, fold_builtin_cabs,"}, {"sha": "3bfe52e0081f1eeee75e08cfe192b7222dacf8ab", "filename": "gcc/fold-const.c", "status": "modified", "additions": 32, "deletions": 39, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2041e75c3cee7c6636283cf056c1f8f58478d393/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2041e75c3cee7c6636283cf056c1f8f58478d393/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=2041e75c3cee7c6636283cf056c1f8f58478d393", "patch": "@@ -58,7 +58,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"rtl.h\"\n #include \"expr.h\"\n #include \"tm_p.h\"\n-#include \"target.h\"\n #include \"toplev.h\"\n #include \"intl.h\"\n #include \"ggc.h\"\n@@ -8482,12 +8481,11 @@ fold_comparison (enum tree_code code, tree type, tree op0, tree op1)\n       HOST_WIDE_INT bitsize, bitpos0 = 0, bitpos1 = 0;\n       enum machine_mode mode;\n       int volatilep, unsignedp;\n-      bool indirect_base0 = false, indirect_base1 = false;\n+      bool indirect_base0 = false;\n \n       /* Get base and offset for the access.  Strip ADDR_EXPR for\n \t get_inner_reference, but put it back by stripping INDIRECT_REF\n-\t off the base object if possible.  indirect_baseN will be true\n-\t if baseN is not an address but refers to the object itself.  */\n+\t off the base object if possible.  */\n       base0 = arg0;\n       if (TREE_CODE (arg0) == ADDR_EXPR)\n \t{\n@@ -8511,19 +8509,24 @@ fold_comparison (enum tree_code code, tree type, tree op0, tree op1)\n \t  base1 = get_inner_reference (TREE_OPERAND (arg1, 0),\n \t\t\t\t       &bitsize, &bitpos1, &offset1, &mode,\n \t\t\t\t       &unsignedp, &volatilep, false);\n-\t  if (TREE_CODE (base1) == INDIRECT_REF)\n+\t  /* We have to make sure to have an indirect/non-indirect base1\n+\t     just the same as we did for base0.  */\n+\t  if (TREE_CODE (base1) == INDIRECT_REF\n+\t      && !indirect_base0)\n \t    base1 = TREE_OPERAND (base1, 0);\n-\t  else\n-\t    indirect_base1 = true;\n+\t  else if (!indirect_base0)\n+\t    base1 = NULL_TREE;\n \t}\n       else if (TREE_CODE (arg1) == POINTER_PLUS_EXPR)\n \t{\n \t  base1 = TREE_OPERAND (arg1, 0);\n \t  offset1 = TREE_OPERAND (arg1, 1);\n \t}\n+      else if (indirect_base0)\n+\tbase1 = NULL_TREE;\n \n       /* If we have equivalent bases we might be able to simplify.  */\n-      if (indirect_base0 == indirect_base1\n+      if (base0 && base1\n \t  && operand_equal_p (base0, base1, 0))\n \t{\n \t  /* We can fold this expression to a constant if the non-constant\n@@ -8578,37 +8581,6 @@ fold_comparison (enum tree_code code, tree type, tree op0, tree op1)\n \t      return fold_build2 (code, type, offset0, offset1);\n \t    }\n \t}\n-      /* For non-equal bases we can simplify if they are plain decls.  */\n-      else if (!indirect_base0 && !indirect_base1\n-\t       && TREE_CODE (arg0) == ADDR_EXPR\n-\t       && TREE_CODE (arg1) == ADDR_EXPR\n-\t       && DECL_P (base0) && DECL_P (base1)\n-\t       && !operand_equal_p (base0, base1, 0)\n-\t       && targetm.binds_local_p (base0)\n-\t       && targetm.binds_local_p (base1))\n-\t{\n-\t  if (code == EQ_EXPR)\n-\t    return omit_two_operands (type, boolean_false_node, arg0, arg1);\n-\t  else if (code == NE_EXPR)\n-\t    return omit_two_operands (type, boolean_true_node, arg0, arg1);\n-\t}\n-      /* For equal offsets we can simplify to a comparison of the\n-\t base addresses.  */\n-      else if (bitpos0 == bitpos1\n-\t       && (indirect_base0\n-\t\t   ? base0 != TREE_OPERAND (arg0, 0) : base0 != arg0)\n-\t       && (indirect_base1\n-\t\t   ? base1 != TREE_OPERAND (arg1, 0) : base1 != arg1)\n-\t       && ((offset0 == offset1)\n-\t\t   || (offset0 && offset1\n-\t\t       && operand_equal_p (offset0, offset1, 0))))\n-\t{\n-\t  if (indirect_base0)\n-\t    base0 = fold_addr_expr (base0);\n-\t  if (indirect_base1)\n-\t    base1 = fold_addr_expr (base1);\n-\t  return fold_build2 (code, type, base0, base1);\n-\t}\n     }\n \n   /* Transform comparisons of the form X +- C1 CMP Y +- C2 to\n@@ -8955,6 +8927,27 @@ fold_comparison (enum tree_code code, tree type, tree op0, tree op1)\n \t}\n     }\n \n+  /* Fold a comparison of the address of COMPONENT_REFs with the same\n+     type and component to a comparison of the address of the base\n+     object.  In short, &x->a OP &y->a to x OP y and\n+     &x->a OP &y.a to x OP &y  */\n+  if (TREE_CODE (arg0) == ADDR_EXPR\n+      && TREE_CODE (TREE_OPERAND (arg0, 0)) == COMPONENT_REF\n+      && TREE_CODE (arg1) == ADDR_EXPR\n+      && TREE_CODE (TREE_OPERAND (arg1, 0)) == COMPONENT_REF)\n+    {\n+      tree cref0 = TREE_OPERAND (arg0, 0);\n+      tree cref1 = TREE_OPERAND (arg1, 0);\n+      if (TREE_OPERAND (cref0, 1) == TREE_OPERAND (cref1, 1))\n+\t{\n+\t  tree op0 = TREE_OPERAND (cref0, 0);\n+\t  tree op1 = TREE_OPERAND (cref1, 0);\n+\t  return fold_build2 (code, type,\n+\t\t\t      fold_addr_expr (op0),\n+\t\t\t      fold_addr_expr (op1));\n+\t}\n+    }\n+\n   /* We can fold X/C1 op C2 where C1 and C2 are integer constants\n      into a single range test.  */\n   if ((TREE_CODE (arg0) == TRUNC_DIV_EXPR"}, {"sha": "0ad8102a7eefe66240ae7a2deded3bc333c50142", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2041e75c3cee7c6636283cf056c1f8f58478d393/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2041e75c3cee7c6636283cf056c1f8f58478d393/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2041e75c3cee7c6636283cf056c1f8f58478d393", "patch": "@@ -1,3 +1,10 @@\n+2008-03-26  Richard Guenther  <rguenther@suse.de>\n+\n+\tRevert\n+\t2008-03-26  Richard Guenther  <rguenther@suse.de>\n+\n+\t* gcc.dg/fold-addr-1.c: New testcase.\n+\n 2008-03-26  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* gcc.target/i386/sse-13.c: Include <mm_malloc.h>"}, {"sha": "7323ffdabf735d54ddf4ac4949539812edfbd05c", "filename": "gcc/testsuite/gcc.dg/fold-addr-1.c", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aefa9d43dcc6925454a258b8107e91462e60beac/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-addr-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aefa9d43dcc6925454a258b8107e91462e60beac/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-addr-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-addr-1.c?ref=aefa9d43dcc6925454a258b8107e91462e60beac", "patch": "@@ -1,10 +0,0 @@\n-/* { dg-do compile } */\n-/* { dg-options \"-fdump-tree-original\" } */\n-\n-int bar(char p1, char p2)\n-{\n-  return &p1 == &p2;\n-}\n-\n-/* { dg-final { scan-tree-dump \"return 0;\" \"original\" } } */\n-/* { dg-final { cleanup-tree-dump \"original\" } } */"}]}