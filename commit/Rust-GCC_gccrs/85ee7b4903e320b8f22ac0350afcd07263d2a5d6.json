{"sha": "85ee7b4903e320b8f22ac0350afcd07263d2a5d6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODVlZTdiNDkwM2UzMjBiOGYyMmFjMDM1MGFmY2QwNzI2M2QyYTVkNg==", "commit": {"author": {"name": "Yannick Moy", "email": "moy@adacore.com", "date": "2019-07-05T07:01:58Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-07-05T07:01:58Z"}, "message": "[Ada] Fix inlining in GNATprove inside quantified expressions\n\nCalls to local subprograms in GNATprove may be inlined in some case, but\nit should not be the case inside quantified expressions which are\nhandled as expressions inside GNATprove. Because quantified expressions\nare only preanalayzed, the detection of the impossible inlining was not\nperformed.  Now fixed.\n\nThere is no impact on compilation.\n\n2019-07-05  Yannick Moy  <moy@adacore.com>\n\ngcc/ada/\n\n\t* sem_res.adb (Resolve_Call): Cannot inline in quantified\n\texpressions.\n\t* sem_util.adb, sem_util.ads (In_Quantified_Expression): New\n\tfunction.\n\nFrom-SVN: r273105", "tree": {"sha": "c0a8554a62bde176db6e24ccf9f73e22bf598244", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c0a8554a62bde176db6e24ccf9f73e22bf598244"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/85ee7b4903e320b8f22ac0350afcd07263d2a5d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85ee7b4903e320b8f22ac0350afcd07263d2a5d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85ee7b4903e320b8f22ac0350afcd07263d2a5d6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85ee7b4903e320b8f22ac0350afcd07263d2a5d6/comments", "author": {"login": "yannickmoy", "id": 859440, "node_id": "MDQ6VXNlcjg1OTQ0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/859440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yannickmoy", "html_url": "https://github.com/yannickmoy", "followers_url": "https://api.github.com/users/yannickmoy/followers", "following_url": "https://api.github.com/users/yannickmoy/following{/other_user}", "gists_url": "https://api.github.com/users/yannickmoy/gists{/gist_id}", "starred_url": "https://api.github.com/users/yannickmoy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yannickmoy/subscriptions", "organizations_url": "https://api.github.com/users/yannickmoy/orgs", "repos_url": "https://api.github.com/users/yannickmoy/repos", "events_url": "https://api.github.com/users/yannickmoy/events{/privacy}", "received_events_url": "https://api.github.com/users/yannickmoy/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8518042a54fde0880fabc3e380e9549ad13de601", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8518042a54fde0880fabc3e380e9549ad13de601", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8518042a54fde0880fabc3e380e9549ad13de601"}], "stats": {"total": 38, "additions": 38, "deletions": 0}, "files": [{"sha": "6f22a1ae5e69f66c97db0845a031563a586578d1", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85ee7b4903e320b8f22ac0350afcd07263d2a5d6/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85ee7b4903e320b8f22ac0350afcd07263d2a5d6/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=85ee7b4903e320b8f22ac0350afcd07263d2a5d6", "patch": "@@ -1,3 +1,10 @@\n+2019-07-05  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_res.adb (Resolve_Call): Cannot inline in quantified\n+\texpressions.\n+\t* sem_util.adb, sem_util.ads (In_Quantified_Expression): New\n+\tfunction.\n+\n 2019-07-05  Bob Duff  <duff@adacore.com>\n \n \t* doc/gnat_rm/standard_and_implementation_defined_restrictions.rst:"}, {"sha": "9c226357483e63444f6098dc2356835f178215e9", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85ee7b4903e320b8f22ac0350afcd07263d2a5d6/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85ee7b4903e320b8f22ac0350afcd07263d2a5d6/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=85ee7b4903e320b8f22ac0350afcd07263d2a5d6", "patch": "@@ -6768,6 +6768,15 @@ package body Sem_Res is\n                Cannot_Inline\n                  (\"cannot inline & (in default expression)?\", N, Nam_UA);\n \n+            --  Calls cannot be inlined inside quantified expressions, which\n+            --  are left in expression form for GNATprove. Since these\n+            --  expressions are only preanalyzed, we need to detect the failure\n+            --  to inline outside of the case for Full_Analysis below.\n+\n+            elsif In_Quantified_Expression (N) then\n+               Cannot_Inline\n+                 (\"cannot inline & (in quantified expression)?\", N, Nam_UA);\n+\n             --  Inlining should not be performed during preanalysis\n \n             elsif Full_Analysis then"}, {"sha": "55e64432a756a2deb6cd79fef71a47cab17044db", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85ee7b4903e320b8f22ac0350afcd07263d2a5d6/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85ee7b4903e320b8f22ac0350afcd07263d2a5d6/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=85ee7b4903e320b8f22ac0350afcd07263d2a5d6", "patch": "@@ -12305,6 +12305,25 @@ package body Sem_Util is\n       end if;\n    end In_Pre_Post_Condition;\n \n+   ------------------------------\n+   -- In_Quantified_Expression --\n+   ------------------------------\n+\n+   function In_Quantified_Expression (N : Node_Id) return Boolean is\n+      P : Node_Id;\n+   begin\n+      P := Parent (N);\n+      loop\n+         if No (P) then\n+            return False;\n+         elsif Nkind (P) = N_Quantified_Expression then\n+            return True;\n+         else\n+            P := Parent (P);\n+         end if;\n+      end loop;\n+   end In_Quantified_Expression;\n+\n    -------------------------------------\n    -- In_Reverse_Storage_Order_Object --\n    -------------------------------------"}, {"sha": "43c0bc589133af1f6871a9c302a2d20246859b77", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85ee7b4903e320b8f22ac0350afcd07263d2a5d6/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85ee7b4903e320b8f22ac0350afcd07263d2a5d6/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=85ee7b4903e320b8f22ac0350afcd07263d2a5d6", "patch": "@@ -1410,6 +1410,9 @@ package Sem_Util is\n    --  Returns True if node N appears within a pre/postcondition pragma. Note\n    --  the pragma Check equivalents are NOT considered.\n \n+   function In_Quantified_Expression (N : Node_Id) return Boolean;\n+   --  Returns true if the expression N occurs within a quantified expression\n+\n    function In_Reverse_Storage_Order_Object (N : Node_Id) return Boolean;\n    --  Returns True if N denotes a component or subcomponent in a record or\n    --  array that has Reverse_Storage_Order."}]}