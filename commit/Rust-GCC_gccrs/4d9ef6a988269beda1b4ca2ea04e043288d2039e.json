{"sha": "4d9ef6a988269beda1b4ca2ea04e043288d2039e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGQ5ZWY2YTk4ODI2OWJlZGExYjRjYTJlYTA0ZTA0MzI4OGQyMDM5ZQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2004-10-08T16:07:56Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2004-10-08T16:07:56Z"}, "message": "builtins.c (expand_builtin_mempcpy): Move tree handling code to fold_builtin_mempcpy.\n\n\t* builtins.c (expand_builtin_mempcpy): Move tree handling code to\n\tfold_builtin_mempcpy.  Accept a type parameter.  Delete duplicate\n\tcode.\n\t(expand_builtin_strcat): Accept a type parameter.\n\t(fold_builtin_mempcpy): Accept a type and endp parameter.\n\nFrom-SVN: r88762", "tree": {"sha": "f73716a2e7b40b82fdba58207e97d40f1451cbe7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f73716a2e7b40b82fdba58207e97d40f1451cbe7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4d9ef6a988269beda1b4ca2ea04e043288d2039e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d9ef6a988269beda1b4ca2ea04e043288d2039e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d9ef6a988269beda1b4ca2ea04e043288d2039e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d9ef6a988269beda1b4ca2ea04e043288d2039e/comments", "author": null, "committer": null, "parents": [{"sha": "559837f74a358ea117300f422312a33735aa9fc2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/559837f74a358ea117300f422312a33735aa9fc2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/559837f74a358ea117300f422312a33735aa9fc2"}], "stats": {"total": 114, "additions": 48, "deletions": 66}, "files": [{"sha": "b96342ba8e60beb22cf950a67a1473d9e2a9a93d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d9ef6a988269beda1b4ca2ea04e043288d2039e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d9ef6a988269beda1b4ca2ea04e043288d2039e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4d9ef6a988269beda1b4ca2ea04e043288d2039e", "patch": "@@ -1,5 +1,11 @@\n 2004-10-08  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n+\t* builtins.c (expand_builtin_mempcpy): Move tree handling code to\n+\tfold_builtin_mempcpy.  Accept a type parameter.  Delete duplicate\n+\tcode.\n+\t(expand_builtin_strcat): Accept a type parameter.\n+\t(fold_builtin_mempcpy): Accept a type and endp parameter.\n+\n \t* builtins.c (expand_builtin_strncpy): Delete duplicate code.\n \tAccept an `exp' instead of an `arglist'.\n "}, {"sha": "76be4a7f6193a5c85e7a6cfdc89f2aba8450a442", "filename": "gcc/builtins.c", "status": "modified", "additions": 42, "deletions": 66, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d9ef6a988269beda1b4ca2ea04e043288d2039e/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d9ef6a988269beda1b4ca2ea04e043288d2039e/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=4d9ef6a988269beda1b4ca2ea04e043288d2039e", "patch": "@@ -107,12 +107,12 @@ static rtx expand_builtin_memcmp (tree, tree, rtx, enum machine_mode);\n static rtx expand_builtin_strcmp (tree, rtx, enum machine_mode);\n static rtx expand_builtin_strncmp (tree, rtx, enum machine_mode);\n static rtx builtin_memcpy_read_str (void *, HOST_WIDE_INT, enum machine_mode);\n-static rtx expand_builtin_strcat (tree, rtx, enum machine_mode);\n+static rtx expand_builtin_strcat (tree, tree, rtx, enum machine_mode);\n static rtx expand_builtin_strncat (tree, rtx, enum machine_mode);\n static rtx expand_builtin_strspn (tree, rtx, enum machine_mode);\n static rtx expand_builtin_strcspn (tree, rtx, enum machine_mode);\n static rtx expand_builtin_memcpy (tree, rtx, enum machine_mode);\n-static rtx expand_builtin_mempcpy (tree, rtx, enum machine_mode, int);\n+static rtx expand_builtin_mempcpy (tree, tree, rtx, enum machine_mode, int);\n static rtx expand_builtin_memmove (tree, tree, rtx, enum machine_mode);\n static rtx expand_builtin_bcopy (tree, tree);\n static rtx expand_builtin_strcpy (tree, rtx, enum machine_mode);\n@@ -162,7 +162,7 @@ static tree fold_builtin_ceil (tree);\n static tree fold_builtin_round (tree);\n static tree fold_builtin_bitop (tree);\n static tree fold_builtin_memcpy (tree);\n-static tree fold_builtin_mempcpy (tree);\n+static tree fold_builtin_mempcpy (tree, tree, int);\n static tree fold_builtin_memmove (tree, tree);\n static tree fold_builtin_strchr (tree);\n static tree fold_builtin_memcmp (tree);\n@@ -2621,7 +2621,7 @@ expand_builtin_memcpy (tree exp, rtx target, enum machine_mode mode)\n    stpcpy.  */\n \n static rtx\n-expand_builtin_mempcpy (tree arglist, rtx target, enum machine_mode mode,\n+expand_builtin_mempcpy (tree arglist, tree type, rtx target, enum machine_mode mode,\n \t\t\tint endp)\n {\n   if (!validate_arglist (arglist,\n@@ -2648,48 +2648,20 @@ expand_builtin_mempcpy (tree arglist, rtx target, enum machine_mode mode,\n       unsigned int dest_align\n \t= get_pointer_alignment (dest, BIGGEST_ALIGNMENT);\n       rtx dest_mem, src_mem, len_rtx;\n+      tree result = fold_builtin_mempcpy (arglist, type, endp);\n \n-      /* If DEST is not a pointer type, call the normal function.  */\n-      if (dest_align == 0)\n+      if (result)\n+\treturn expand_expr (result, target, mode, EXPAND_NORMAL);\n+      \n+      /* If either SRC or DEST is not a pointer type, don't do this\n+         operation in-line.  */\n+      if (dest_align == 0 || src_align == 0)\n \treturn 0;\n \n-      /* If SRC and DEST are the same (and not volatile), do nothing.  */\n-      if (operand_equal_p (src, dest, 0))\n-\t{\n-\t  tree expr;\n-\n-\t  if (endp == 0)\n-\t    {\n-\t      /* Evaluate and ignore LEN in case it has side-effects.  */\n-\t      expand_expr (len, const0_rtx, VOIDmode, EXPAND_NORMAL);\n-\t      return expand_expr (dest, target, mode, EXPAND_NORMAL);\n-\t    }\n-\n-\t  if (endp == 2)\n-\t    len = fold (build2 (MINUS_EXPR, TREE_TYPE (len), len,\n-\t\t\t\tinteger_one_node));\n-\t  len = fold_convert (TREE_TYPE (dest), len);\n-\t  expr = fold (build2 (PLUS_EXPR, TREE_TYPE (dest), dest, len));\n-\t  return expand_expr (expr, target, mode, EXPAND_NORMAL);\n-\t}\n-\n       /* If LEN is not constant, call the normal function.  */\n       if (! host_integerp (len, 1))\n \treturn 0;\n \n-      /* If the LEN parameter is zero, return DEST.  */\n-      if (tree_low_cst (len, 1) == 0)\n-\t{\n-\t  /* Evaluate and ignore SRC in case it has side-effects.  */\n-\t  expand_expr (src, const0_rtx, VOIDmode, EXPAND_NORMAL);\n-\t  return expand_expr (dest, target, mode, EXPAND_NORMAL);\n-\t}\n-\n-      /* If either SRC is not a pointer type, don't do this\n-         operation in-line.  */\n-      if (src_align == 0)\n-\treturn 0;\n-\n       len_rtx = expand_expr (len, NULL_RTX, VOIDmode, 0);\n       src_str = c_getstr (src);\n \n@@ -2779,7 +2751,7 @@ expand_builtin_memmove (tree arglist, tree type, rtx target,\n \t it is ok to use memcpy as well.  */\n       if (integer_onep (len))\n         {\n-\t  rtx ret = expand_builtin_mempcpy (arglist, target, mode,\n+\t  rtx ret = expand_builtin_mempcpy (arglist, type, target, mode,\n \t\t\t\t\t    /*endp=*/0);\n \t  if (ret)\n \t    return ret;\n@@ -2950,7 +2922,8 @@ expand_builtin_stpcpy (tree exp, rtx target, enum machine_mode mode)\n       narglist = build_tree_list (NULL_TREE, lenp1);\n       narglist = tree_cons (NULL_TREE, src, narglist);\n       narglist = tree_cons (NULL_TREE, dst, narglist);\n-      ret = expand_builtin_mempcpy (narglist, target, mode, /*endp=*/2);\n+      ret = expand_builtin_mempcpy (narglist, TREE_TYPE (exp),\n+\t\t\t\t    target, mode, /*endp=*/2);\n \n       if (ret)\n \treturn ret;\n@@ -3590,7 +3563,7 @@ expand_builtin_strncmp (tree exp, rtx target, enum machine_mode mode)\n    otherwise try to get the result in TARGET, if convenient.  */\n \n static rtx\n-expand_builtin_strcat (tree arglist, rtx target, enum machine_mode mode)\n+expand_builtin_strcat (tree arglist, tree type, rtx target, enum machine_mode mode)\n {\n   if (!validate_arglist (arglist, POINTER_TYPE, POINTER_TYPE, VOID_TYPE))\n     return 0;\n@@ -3640,7 +3613,7 @@ expand_builtin_strcat (tree arglist, rtx target, enum machine_mode mode)\n                  pass in a target of zero, it should never actually be\n                  used.  If this was successful return the original\n                  dst, not the result of mempcpy.  */\n-\t      if (expand_builtin_mempcpy (arglist, /*target=*/0, mode, /*endp=*/0))\n+\t      if (expand_builtin_mempcpy (arglist, type, /*target=*/0, mode, /*endp=*/0))\n \t\treturn expand_expr (dst, target, mode, EXPAND_NORMAL);\n \t      else\n \t\treturn 0;\n@@ -5383,7 +5356,7 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n       break;\n \n     case BUILT_IN_STRCAT:\n-      target = expand_builtin_strcat (arglist, target, mode);\n+      target = expand_builtin_strcat (arglist, TREE_TYPE (exp), target, mode);\n       if (target)\n \treturn target;\n       break;\n@@ -5439,7 +5412,7 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n       break;\n \n     case BUILT_IN_MEMPCPY:\n-      target = expand_builtin_mempcpy (arglist, target, mode, /*endp=*/ 1);\n+      target = expand_builtin_mempcpy (arglist, TREE_TYPE (exp), target, mode, /*endp=*/ 1);\n       if (target)\n \treturn target;\n       break;\n@@ -6971,31 +6944,34 @@ fold_builtin_memcpy (tree exp)\n    NULL_TREE if no simplification can be made.  */\n \n static tree\n-fold_builtin_mempcpy (tree exp)\n+fold_builtin_mempcpy (tree arglist, tree type, int endp)\n {\n-  tree arglist = TREE_OPERAND (exp, 1);\n-  tree dest, src, len;\n-\n-  if (!validate_arglist (arglist,\n-\t\t\t POINTER_TYPE, POINTER_TYPE, INTEGER_TYPE, VOID_TYPE))\n-    return 0;\n+  if (validate_arglist (arglist,\n+\t\t\tPOINTER_TYPE, POINTER_TYPE, INTEGER_TYPE, VOID_TYPE))\n+    {\n+      tree dest = TREE_VALUE (arglist);\n+      tree src = TREE_VALUE (TREE_CHAIN (arglist));\n+      tree len = TREE_VALUE (TREE_CHAIN (TREE_CHAIN (arglist)));\n \n-  dest = TREE_VALUE (arglist);\n-  src = TREE_VALUE (TREE_CHAIN (arglist));\n-  len = TREE_VALUE (TREE_CHAIN (TREE_CHAIN (arglist)));\n+      /* If the LEN parameter is zero, return DEST.  */\n+      if (integer_zerop (len))\n+\treturn omit_one_operand (type, dest, src);\n \n-  /* If the LEN parameter is zero, return DEST.  */\n-  if (integer_zerop (len))\n-    return omit_one_operand (TREE_TYPE (exp), dest, src);\n+      /* If SRC and DEST are the same (and not volatile), return DEST+LEN.  */\n+      if (operand_equal_p (src, dest, 0))\n+        {\n+\t  if (endp == 0)\n+\t    return omit_one_operand (type, dest, len);\n \n-  /* If SRC and DEST are the same (and not volatile), return DEST+LEN.  */\n-  if (operand_equal_p (src, dest, 0))\n-    {\n-      tree temp = fold_convert (TREE_TYPE (dest), len);\n-      temp = fold (build2 (PLUS_EXPR, TREE_TYPE (dest), dest, temp));\n-      return fold_convert (TREE_TYPE (exp), temp);\n+\t  if (endp == 2)\n+\t    len = fold (build2 (MINUS_EXPR, TREE_TYPE (len), len,\n+\t\t\t\tssize_int (1)));\n+      \n+\t  len = fold_convert (TREE_TYPE (dest), len);\n+\t  len = fold (build2 (PLUS_EXPR, TREE_TYPE (dest), dest, len));\n+\t  return fold_convert (type, len);\n+\t}\n     }\n-\n   return 0;\n }\n \n@@ -7964,7 +7940,7 @@ fold_builtin_1 (tree exp, bool ignore)\n       return fold_builtin_memcpy (exp);\n \n     case BUILT_IN_MEMPCPY:\n-      return fold_builtin_mempcpy (exp);\n+      return fold_builtin_mempcpy (arglist, type, /*endp=*/1);\n \n     case BUILT_IN_MEMMOVE:\n       return fold_builtin_memmove (arglist, type);"}]}