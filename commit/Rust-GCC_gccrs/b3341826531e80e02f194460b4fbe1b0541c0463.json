{"sha": "b3341826531e80e02f194460b4fbe1b0541c0463", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjMzNDE4MjY1MzFlODBlMDJmMTk0NDYwYjRmYmUxYjA1NDFjMDQ2Mw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-03-18T23:19:12Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-03-18T23:19:35Z"}, "message": "libstdc++: Fix is_trivially_constructible (PR 94033)\n\nThis attempts to make is_nothrow_constructible more robust (and\nefficient to compile) by not depending on is_constructible. Instead the\n__is_constructible intrinsic is used directly. The helper class\n__is_nt_constructible_impl which checks whether the construction is\nnon-throwing now takes a bool template parameter that is substituted by\nthe result of the instrinsic. This fixes the reported bug by not using\nthe already-instantiated (and incorrect) value of std::is_constructible.\nI don't think it really fixes the problem in general, because\nstd::is_nothrow_constructible itself could already have been\ninstantiated in a context where it gives the wrong result. A proper fix\nneeds to be done in the compiler.\n\n\tPR libstdc++/94033\n\t* include/std/type_traits (__is_nt_default_constructible_atom): Remove.\n\t(__is_nt_default_constructible_impl): Remove.\n\t(__is_nothrow_default_constructible_impl): Remove.\n\t(__is_nt_constructible_impl): Add bool template parameter. Adjust\n\tpartial specializations.\n\t(__is_nothrow_constructible_impl): Replace class template with alias\n\ttemplate.\n\t(is_nothrow_default_constructible): Derive from alias template\n\t__is_nothrow_constructible_impl instead of\n\t__is_nothrow_default_constructible_impl.\n\t* testsuite/20_util/is_nothrow_constructible/94003.cc: New test.", "tree": {"sha": "9c228923d0a965edfd8aecbed34a3f89f67e363e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c228923d0a965edfd8aecbed34a3f89f67e363e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b3341826531e80e02f194460b4fbe1b0541c0463", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3341826531e80e02f194460b4fbe1b0541c0463", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3341826531e80e02f194460b4fbe1b0541c0463", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3341826531e80e02f194460b4fbe1b0541c0463/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07fe4af4d51d74b63a76ea632d4db01d1f69f037", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07fe4af4d51d74b63a76ea632d4db01d1f69f037", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07fe4af4d51d74b63a76ea632d4db01d1f69f037"}], "stats": {"total": 129, "additions": 86, "deletions": 43}, "files": [{"sha": "e58aef733aeb32e54f170218e9aa2a1e89e16ce5", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3341826531e80e02f194460b4fbe1b0541c0463/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3341826531e80e02f194460b4fbe1b0541c0463/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b3341826531e80e02f194460b4fbe1b0541c0463", "patch": "@@ -1,5 +1,18 @@\n 2020-03-18  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/94033\n+\t* include/std/type_traits (__is_nt_default_constructible_atom): Remove.\n+\t(__is_nt_default_constructible_impl): Remove.\n+\t(__is_nothrow_default_constructible_impl): Remove.\n+\t(__is_nt_constructible_impl): Add bool template parameter. Adjust\n+\tpartial specializations.\n+\t(__is_nothrow_constructible_impl): Replace class template with alias\n+\ttemplate.\n+\t(is_nothrow_default_constructible): Derive from alias template\n+\t__is_nothrow_constructible_impl instead of\n+\t__is_nothrow_default_constructible_impl.\n+\t* testsuite/20_util/is_nothrow_constructible/94003.cc: New test.\n+\n \t* include/std/stop_token (stop_token::_Stop_state_ref): Define\n \tcomparison operators explicitly if the compiler won't synthesize them.\n "}, {"sha": "68abf148a3806bc3a1def4c1d98fccf6907e4c45", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 27, "deletions": 43, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3341826531e80e02f194460b4fbe1b0541c0463/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3341826531e80e02f194460b4fbe1b0541c0463/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=b3341826531e80e02f194460b4fbe1b0541c0463", "patch": "@@ -961,62 +961,36 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\"template argument must be a complete class or an unbounded array\");\n     };\n \n-  template<typename _Tp>\n-    struct __is_nt_default_constructible_atom\n-    : public integral_constant<bool, noexcept(_Tp())>\n-    { };\n-\n-  template<typename _Tp, bool = is_array<_Tp>::value>\n-    struct __is_nt_default_constructible_impl;\n-\n-  template<typename _Tp>\n-    struct __is_nt_default_constructible_impl<_Tp, true>\n-    : public __and_<__is_array_known_bounds<_Tp>,\n-\t\t    __is_nt_default_constructible_atom<typename\n-                      remove_all_extents<_Tp>::type>>\n-    { };\n-\n-  template<typename _Tp>\n-    struct __is_nt_default_constructible_impl<_Tp, false>\n-    : public __is_nt_default_constructible_atom<_Tp>\n+  template<bool, typename _Tp, typename... _Args>\n+    struct __is_nt_constructible_impl\n+    : public false_type\n     { };\n \n-  template<typename _Tp>\n-    using __is_nothrow_default_constructible_impl\n-      = __and_<__is_constructible_impl<_Tp>,\n-\t       __is_nt_default_constructible_impl<_Tp>>;\n-\n-  /// is_nothrow_default_constructible\n-  template<typename _Tp>\n-    struct is_nothrow_default_constructible\n-    : public __is_nothrow_default_constructible_impl<_Tp>::type\n-    {\n-      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),\n-\t\"template argument must be a complete class or an unbounded array\");\n-    };\n-\n   template<typename _Tp, typename... _Args>\n-    struct __is_nt_constructible_impl\n-    : public integral_constant<bool, noexcept(_Tp(declval<_Args>()...))>\n+    struct __is_nt_constructible_impl<true, _Tp, _Args...>\n+    : public __bool_constant<noexcept(_Tp(std::declval<_Args>()...))>\n     { };\n \n   template<typename _Tp, typename _Arg>\n-    struct __is_nt_constructible_impl<_Tp, _Arg>\n-    : public integral_constant<bool,\n-                               noexcept(static_cast<_Tp>(declval<_Arg>()))>\n+    struct __is_nt_constructible_impl<true, _Tp, _Arg>\n+    : public __bool_constant<noexcept(static_cast<_Tp>(std::declval<_Arg>()))>\n     { };\n \n   template<typename _Tp>\n-    struct __is_nt_constructible_impl<_Tp>\n-    : public __is_nothrow_default_constructible_impl<_Tp>\n+    struct __is_nt_constructible_impl<true, _Tp>\n+    : public __bool_constant<noexcept(_Tp())>\n     { };\n \n-  template<typename _Tp, typename... _Args>\n-    struct __is_nothrow_constructible_impl\n-    : public __and_<__is_constructible_impl<_Tp, _Args...>,\n-\t\t    __is_nt_constructible_impl<_Tp, _Args...>>\n+  template<typename _Tp, size_t _Num>\n+    struct __is_nt_constructible_impl<true, _Tp[_Num]>\n+    : public __bool_constant<noexcept(typename remove_all_extents<_Tp>::type())>\n     { };\n \n+  template<typename _Tp, typename... _Args>\n+    using __is_nothrow_constructible_impl\n+      = __is_nt_constructible_impl<__is_constructible(_Tp, _Args...),\n+\t\t\t\t   _Tp, _Args...>;\n+\n   /// is_nothrow_constructible\n   template<typename _Tp, typename... _Args>\n     struct is_nothrow_constructible\n@@ -1026,6 +1000,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\"template argument must be a complete class or an unbounded array\");\n     };\n \n+  /// is_nothrow_default_constructible\n+  template<typename _Tp>\n+    struct is_nothrow_default_constructible\n+    : public __is_nothrow_constructible_impl<_Tp>::type\n+    {\n+      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),\n+\t\"template argument must be a complete class or an unbounded array\");\n+    };\n+\n+\n   template<typename _Tp, bool = __is_referenceable<_Tp>::value>\n     struct __is_nothrow_copy_constructible_impl;\n "}, {"sha": "392a0878ba53413079f5aacf366747ea6173f82f", "filename": "libstdc++-v3/testsuite/20_util/is_nothrow_constructible/94003.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3341826531e80e02f194460b4fbe1b0541c0463/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_constructible%2F94003.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3341826531e80e02f194460b4fbe1b0541c0463/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_constructible%2F94003.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_constructible%2F94003.cc?ref=b3341826531e80e02f194460b4fbe1b0541c0463", "patch": "@@ -0,0 +1,46 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile { target c++17 } }\n+\n+#include <optional>\n+#include <tuple>\n+\n+template <bool B> struct abc {};\n+\n+template <typename T>\n+\n+struct future : public abc<std::is_trivially_constructible_v<std::tuple<T>>> {};\n+\n+class mutation {\n+  mutation();\n+  friend class std::optional<mutation>;\n+};\n+\n+using mutation_opt = std::optional<mutation>;\n+\n+future<mutation_opt> foo();\n+\n+template <typename Consumer> future<mutation_opt> consume_partitions() {\n+  return foo();\n+}\n+\n+future<mutation_opt> bar() { return consume_partitions<int>(); }\n+\n+future<mutation> zed();\n+future<mutation> apply_counter_update() { return zed(); }"}]}