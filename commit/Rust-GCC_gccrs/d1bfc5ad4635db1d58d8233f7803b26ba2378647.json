{"sha": "d1bfc5ad4635db1d58d8233f7803b26ba2378647", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDFiZmM1YWQ0NjM1ZGIxZDU4ZDgyMzNmNzgwM2IyNmJhMjM3ODY0Nw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-04-18T01:32:43Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-04-18T01:32:43Z"}, "message": "bb-reorder.c (fixup_reorder_chain): Don't look up new block again.\n\n        * bb-reorder.c (fixup_reorder_chain): Don't look up new block again.\n        (reorder_basic_blocks): If no epilogue in rtl, force last block last.\n\nFrom-SVN: r33221", "tree": {"sha": "82f503a04671608956729a620929f00c37cfac07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/82f503a04671608956729a620929f00c37cfac07"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d1bfc5ad4635db1d58d8233f7803b26ba2378647", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1bfc5ad4635db1d58d8233f7803b26ba2378647", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1bfc5ad4635db1d58d8233f7803b26ba2378647", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1bfc5ad4635db1d58d8233f7803b26ba2378647/comments", "author": null, "committer": null, "parents": [{"sha": "009e98457a3f7b1603422123052eeddb83dd5070", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/009e98457a3f7b1603422123052eeddb83dd5070", "html_url": "https://github.com/Rust-GCC/gccrs/commit/009e98457a3f7b1603422123052eeddb83dd5070"}], "stats": {"total": 26, "additions": 23, "deletions": 3}, "files": [{"sha": "326f168dc221f416345cc94d9b6f9baf19213f1e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1bfc5ad4635db1d58d8233f7803b26ba2378647/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1bfc5ad4635db1d58d8233f7803b26ba2378647/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d1bfc5ad4635db1d58d8233f7803b26ba2378647", "patch": "@@ -1,3 +1,8 @@\n+2000-04-17  Richard Henderson  <rth@cygnus.com>\n+\n+\t* bb-reorder.c (fixup_reorder_chain): Don't look up new block again.\n+\t(reorder_basic_blocks): If no epilogue in rtl, force last block last.\n+\n 2000-04-17  Mark Mitchell  <mark@codesourcery.com>\n \n \t* function.c (expand_function_start): Use hard_function_value to\n@@ -123,7 +128,7 @@ Mon Apr 17 14:59:36 MET DST 2000  Jan Hubicka  <jh@suse.cz>\n \t(ASM_OUTPUT_ADDR_VEC_ELT, ASM_OUTPUT_ADDR_DIFF_ELT): Remove page check,\n \tsince vector in in the data CSECT.\n \t(ASM_OUTPUT_REG_POP, ASM_OUTPUT_REG_PUSH): Restore to correct operation.\n-        * i370.md (Many patterns): Put the length in the XL directives.\n+\t* i370.md (Many patterns): Put the length in the XL directives.\n \t(movdi): Put back STM and MVC in definition.\n \t(floatsidf2): Correct TARGET_ELF_ABI pattern and add back the LE370\n \tpattern using the TCA."}, {"sha": "5f2e178c0325155a907e87e2dae61faf359bbede", "filename": "gcc/bb-reorder.c", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1bfc5ad4635db1d58d8233f7803b26ba2378647/gcc%2Fbb-reorder.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1bfc5ad4635db1d58d8233f7803b26ba2378647/gcc%2Fbb-reorder.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbb-reorder.c?ref=d1bfc5ad4635db1d58d8233f7803b26ba2378647", "patch": "@@ -690,8 +690,7 @@ fixup_reorder_chain ()\n \t      BASIC_BLOCK (nb->index)->local_set = 0;\n \n \t      nb->aux = xcalloc (1, sizeof (struct reorder_block_def));\n-\t      REORDER_BLOCK_INDEX (BASIC_BLOCK (n_basic_blocks - 1))\n-\t\t= REORDER_BLOCK_INDEX (bbi) + 1;\n+\t      REORDER_BLOCK_INDEX (nb) = REORDER_BLOCK_INDEX (bbi) + 1;\n \t      /* Relink to new block.  */\n \t      nb->succ = bbi->succ;\n \t      nb->succ->src = nb;\n@@ -835,6 +834,22 @@ reorder_basic_blocks ()\n \t  REORDER_BLOCK_EFF_HEAD (bbi) = NEXT_INSN (prev_eff_end);\n \t}\n     }\n+\n+  /* If we've not got epilogue in RTL, we must fallthru to the exit.\n+     Force the last block to be at the end.  */\n+  /* ??? Some ABIs (e.g. MIPS) require the return insn to be at the\n+     end of the function for stack unwinding purposes.  */\n+\n+#ifndef HAVE_epilogue\n+#define HAVE_epilogue 0\n+#endif\n+\n+  if (! HAVE_epilogue)\n+    {\n+      basic_block last = BASIC_BLOCK (n_basic_blocks - 1);\n+      REORDER_BLOCK_INDEX (last) = n_basic_blocks - 1;\n+      REORDER_BLOCK_FLAGS (last) |= REORDER_BLOCK_VISITED;\n+    }\n       \n   make_reorder_chain (BASIC_BLOCK (0));\n "}]}