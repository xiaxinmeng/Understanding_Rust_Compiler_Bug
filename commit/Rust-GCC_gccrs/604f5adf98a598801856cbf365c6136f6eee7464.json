{"sha": "604f5adf98a598801856cbf365c6136f6eee7464", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjA0ZjVhZGY5OGE1OTg4MDE4NTZjYmYzNjVjNjEzNmY2ZWVlNzQ2NA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@airs.com", "date": "2005-04-05T01:15:08Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2005-04-05T01:15:08Z"}, "message": "c-typeck.c (struct c_switch): Rename switch_stmt field to switch_expr.\n\n\t* c-typeck.c (struct c_switch): Rename switch_stmt field to\n\tswitch_expr.\n\t(c_start_case): Build SWITCH_EXPR, not SWITCH_STMT.\n\t(do_case): Use SWITCH_COND rather than SWITCH_STMT_COND.\n\t(c_finish_case): Use SWITCH_BODY rather than SWITCH_STMT_BODY.\n\tCall c_do_switch_expr_warnings rather than c_do_switch_warnings.\n\t* c-common.c (c_do_switch_warnings_1): New static function broken\n\tout of c_do_switch_warnings.\n\t(c_do_switch_warnings): Call c_do_switch_warnings_1.\n\t(c_do_switch_expr_warnings): New function.\n\t* c-common.h (c_do_switch_expr_warnings): Declare.\n\nFrom-SVN: r97593", "tree": {"sha": "e8cc833b96138da1ed3358debbb13d1387a3ce64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e8cc833b96138da1ed3358debbb13d1387a3ce64"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/604f5adf98a598801856cbf365c6136f6eee7464", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/604f5adf98a598801856cbf365c6136f6eee7464", "html_url": "https://github.com/Rust-GCC/gccrs/commit/604f5adf98a598801856cbf365c6136f6eee7464", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/604f5adf98a598801856cbf365c6136f6eee7464/comments", "author": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bfcf81bf390640642434733e4bd9f16a1d374724", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfcf81bf390640642434733e4bd9f16a1d374724", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bfcf81bf390640642434733e4bd9f16a1d374724"}], "stats": {"total": 97, "additions": 68, "deletions": 29}, "files": [{"sha": "b3e4dcd156a2293d7b13ebb48371c4b9f381569b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/604f5adf98a598801856cbf365c6136f6eee7464/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/604f5adf98a598801856cbf365c6136f6eee7464/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=604f5adf98a598801856cbf365c6136f6eee7464", "patch": "@@ -1,3 +1,17 @@\n+2005-04-04  Ian Lance Taylor  <ian@airs.com>\n+\n+\t* c-typeck.c (struct c_switch): Rename switch_stmt field to\n+\tswitch_expr.\n+\t(c_start_case): Build SWITCH_EXPR, not SWITCH_STMT.\n+\t(do_case): Use SWITCH_COND rather than SWITCH_STMT_COND.\n+\t(c_finish_case): Use SWITCH_BODY rather than SWITCH_STMT_BODY.\n+\tCall c_do_switch_expr_warnings rather than c_do_switch_warnings.\n+\t* c-common.c (c_do_switch_warnings_1): New static function broken\n+\tout of c_do_switch_warnings.\n+\t(c_do_switch_warnings): Call c_do_switch_warnings_1.\n+\t(c_do_switch_expr_warnings): New function.\n+\t* c-common.h (c_do_switch_expr_warnings): Declare.\n+\n 2005-04-04  David Edelsohn  <edelsohn@gnu.org>\n \t    Daniel Jacobowitz  <dan@codesourcery.com>\n "}, {"sha": "817d939be3b3c00236f770c16bb636291eab9f26", "filename": "gcc/c-common.c", "status": "modified", "additions": 44, "deletions": 20, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/604f5adf98a598801856cbf365c6136f6eee7464/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/604f5adf98a598801856cbf365c6136f6eee7464/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=604f5adf98a598801856cbf365c6136f6eee7464", "patch": "@@ -3708,32 +3708,17 @@ match_case_to_enum (splay_tree_node node, void *data)\n   return 0;\n }\n \n-/* Handle -Wswitch*.  Called from the front end after parsing the switch\n-   construct.  */\n-/* ??? Should probably be somewhere generic, since other languages besides\n-   C and C++ would want this.  We'd want to agree on the data structure,\n-   however, which is a problem.  Alternately, we operate on gimplified\n-   switch_exprs, which I don't especially like.  At the moment, however,\n-   C/C++ are the only tree-ssa languages that support enumerations at all,\n-   so the point is moot.  */\n+/* Common code for -Wswitch*.  */\n \n-void\n-c_do_switch_warnings (splay_tree cases, tree switch_stmt)\n+static void\n+c_do_switch_warnings_1 (splay_tree cases, location_t switch_location,\n+\t\t\ttree type, tree cond)\n {\n   splay_tree_node default_node;\n-  location_t switch_location;\n-  tree type;\n \n   if (!warn_switch && !warn_switch_enum && !warn_switch_default)\n     return;\n \n-  if (EXPR_HAS_LOCATION (switch_stmt))\n-    switch_location = EXPR_LOCATION (switch_stmt);\n-  else\n-    switch_location = input_location;\n-\n-  type = SWITCH_STMT_TYPE (switch_stmt);\n-\n   default_node = splay_tree_lookup (cases, (splay_tree_key) NULL);\n   if (warn_switch_default && !default_node)\n     warning (\"%Hswitch missing default case\", &switch_location);\n@@ -3744,7 +3729,7 @@ c_do_switch_warnings (splay_tree cases, tree switch_stmt)\n      default case, or when -Wswitch-enum was specified.  */\n   if (((warn_switch && !default_node) || warn_switch_enum)\n       && type && TREE_CODE (type) == ENUMERAL_TYPE\n-      && TREE_CODE (SWITCH_STMT_COND (switch_stmt)) != INTEGER_CST)\n+      && TREE_CODE (cond) != INTEGER_CST)\n     {\n       tree chain;\n \n@@ -3788,6 +3773,45 @@ c_do_switch_warnings (splay_tree cases, tree switch_stmt)\n     }\n }\n \n+/* Handle -Wswitch* for a SWITCH_STMT.  Called from the front end\n+   after parsing the switch construct.  */\n+/* ??? Should probably be somewhere generic, since other languages besides\n+   C and C++ would want this.  We'd want to agree on the data structure,\n+   however, which is a problem.  Alternately, we operate on gimplified\n+   switch_exprs, which I don't especially like.  At the moment, however,\n+   C/C++ are the only tree-ssa languages that support enumerations at all,\n+   so the point is moot.  */\n+\n+void\n+c_do_switch_warnings (splay_tree cases, tree switch_stmt)\n+{\n+  location_t switch_location;\n+\n+  if (EXPR_HAS_LOCATION (switch_stmt))\n+    switch_location = EXPR_LOCATION (switch_stmt);\n+  else\n+    switch_location = input_location;\n+  c_do_switch_warnings_1 (cases, switch_location,\n+\t\t\t  SWITCH_STMT_TYPE (switch_stmt),\n+\t\t\t  SWITCH_STMT_COND (switch_stmt));\n+}\n+\n+/* Like c_do_switch_warnings, but takes a SWITCH_EXPR rather than a\n+   SWITCH_STMT.  */\n+\n+void\n+c_do_switch_expr_warnings (splay_tree cases, tree switch_expr)\n+{\n+  location_t switch_location;\n+\n+  if (EXPR_HAS_LOCATION (switch_expr))\n+    switch_location = EXPR_LOCATION (switch_expr);\n+  else\n+    switch_location = input_location;\n+  c_do_switch_warnings_1 (cases, switch_location, TREE_TYPE (switch_expr),\n+\t\t\t  SWITCH_COND (switch_expr));\n+}\n+\n /* Finish an expression taking the address of LABEL (an\n    IDENTIFIER_NODE).  Returns an expression for the address.  */\n "}, {"sha": "f313e6883caf63ab16cb36cc29b65bd513121918", "filename": "gcc/c-common.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/604f5adf98a598801856cbf365c6136f6eee7464/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/604f5adf98a598801856cbf365c6136f6eee7464/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=604f5adf98a598801856cbf365c6136f6eee7464", "patch": "@@ -825,6 +825,7 @@ extern int case_compare (splay_tree_key, splay_tree_key);\n extern tree c_add_case_label (splay_tree, tree, tree, tree, tree);\n \n extern void c_do_switch_warnings (splay_tree, tree);\n+extern void c_do_switch_expr_warnings (splay_tree, tree);\n \n extern tree build_function_call (tree, tree);\n "}, {"sha": "663dd7f351e5704370434991cdc5e585f925153f", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/604f5adf98a598801856cbf365c6136f6eee7464/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/604f5adf98a598801856cbf365c6136f6eee7464/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=604f5adf98a598801856cbf365c6136f6eee7464", "patch": "@@ -6609,8 +6609,8 @@ c_finish_return (tree retval)\n }\n \f\n struct c_switch {\n-  /* The SWITCH_STMT being built.  */\n-  tree switch_stmt;\n+  /* The SWITCH_EXPR being built.  */\n+  tree switch_expr;\n \n   /* The original type of the testing expression, i.e. before the\n      default conversion is applied.  */\n@@ -6641,7 +6641,7 @@ struct c_switch {\n struct c_switch *c_switch_stack;\n \n /* Start a C switch statement, testing expression EXP.  Return the new\n-   SWITCH_STMT.  */\n+   SWITCH_EXPR.  */\n \n tree\n c_start_case (tree exp)\n@@ -6677,16 +6677,16 @@ c_start_case (tree exp)\n \t}\n     }\n \n-  /* Add this new SWITCH_STMT to the stack.  */\n+  /* Add this new SWITCH_EXPR to the stack.  */\n   cs = XNEW (struct c_switch);\n-  cs->switch_stmt = build_stmt (SWITCH_STMT, exp, NULL_TREE, orig_type);\n+  cs->switch_expr = build3 (SWITCH_EXPR, orig_type, exp, NULL_TREE, NULL_TREE);\n   cs->orig_type = orig_type;\n   cs->cases = splay_tree_new (case_compare, NULL, NULL);\n   cs->blocked_stmt_expr = 0;\n   cs->next = c_switch_stack;\n   c_switch_stack = cs;\n \n-  return add_stmt (cs->switch_stmt);\n+  return add_stmt (cs->switch_expr);\n }\n \n /* Process a case label.  */\n@@ -6699,7 +6699,7 @@ do_case (tree low_value, tree high_value)\n   if (c_switch_stack && !c_switch_stack->blocked_stmt_expr)\n     {\n       label = c_add_case_label (c_switch_stack->cases,\n-\t\t\t\tSWITCH_STMT_COND (c_switch_stack->switch_stmt),\n+\t\t\t\tSWITCH_COND (c_switch_stack->switch_expr),\n \t\t\t\tc_switch_stack->orig_type,\n \t\t\t\tlow_value, high_value);\n       if (label == error_mark_node)\n@@ -6729,12 +6729,12 @@ c_finish_case (tree body)\n {\n   struct c_switch *cs = c_switch_stack;\n \n-  SWITCH_STMT_BODY (cs->switch_stmt) = body;\n+  SWITCH_BODY (cs->switch_expr) = body;\n \n   gcc_assert (!cs->blocked_stmt_expr);\n \n   /* Emit warnings as needed.  */\n-  c_do_switch_warnings (cs->cases, cs->switch_stmt);\n+  c_do_switch_expr_warnings (cs->cases, cs->switch_expr);\n \n   /* Pop the stack.  */\n   c_switch_stack = cs->next;"}]}