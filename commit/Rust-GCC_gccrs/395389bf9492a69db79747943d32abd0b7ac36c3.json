{"sha": "395389bf9492a69db79747943d32abd0b7ac36c3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzk1Mzg5YmY5NDkyYTY5ZGI3OTc0Nzk0M2QzMmFiZDBiN2FjMzZjMw==", "commit": {"author": {"name": "Cherry Zhang", "email": "cherryyz@google.com", "date": "2019-05-17T00:21:22Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-05-17T00:21:22Z"}, "message": "compiler: intrinsify runtime/internal/atomic functions\n    \n    Currently runtime/internal/atomic functions are implemented in C\n    using C compiler intrinsics. This CL lets the Go frontend\n    recognize these functions and turn them into intrinsics directly.\n    \n    Reviewed-on: https://go-review.googlesource.com/c/gofrontend/+/176918\n\n\t* go-gcc.cc (Gcc_backend::Gcc_backend): Define atomic builtins.\n\nFrom-SVN: r271308", "tree": {"sha": "c47f111e7291a1fc34360a96cd67dbdfe84dc56a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c47f111e7291a1fc34360a96cd67dbdfe84dc56a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/395389bf9492a69db79747943d32abd0b7ac36c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/395389bf9492a69db79747943d32abd0b7ac36c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/395389bf9492a69db79747943d32abd0b7ac36c3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/395389bf9492a69db79747943d32abd0b7ac36c3/comments", "author": {"login": "cherrymui", "id": 14119929, "node_id": "MDQ6VXNlcjE0MTE5OTI5", "avatar_url": "https://avatars.githubusercontent.com/u/14119929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cherrymui", "html_url": "https://github.com/cherrymui", "followers_url": "https://api.github.com/users/cherrymui/followers", "following_url": "https://api.github.com/users/cherrymui/following{/other_user}", "gists_url": "https://api.github.com/users/cherrymui/gists{/gist_id}", "starred_url": "https://api.github.com/users/cherrymui/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cherrymui/subscriptions", "organizations_url": "https://api.github.com/users/cherrymui/orgs", "repos_url": "https://api.github.com/users/cherrymui/repos", "events_url": "https://api.github.com/users/cherrymui/events{/privacy}", "received_events_url": "https://api.github.com/users/cherrymui/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6a362e1237fa3d7f2330181566eff02d83794475", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a362e1237fa3d7f2330181566eff02d83794475", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a362e1237fa3d7f2330181566eff02d83794475"}], "stats": {"total": 391, "additions": 390, "deletions": 1}, "files": [{"sha": "255d3b5df6b19f00eeca8f953341250da0da7d9d", "filename": "gcc/go/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/395389bf9492a69db79747943d32abd0b7ac36c3/gcc%2Fgo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/395389bf9492a69db79747943d32abd0b7ac36c3/gcc%2Fgo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FChangeLog?ref=395389bf9492a69db79747943d32abd0b7ac36c3", "patch": "@@ -1,3 +1,7 @@\n+2019-05-16  Cherry Zhang  <cherryyz@google.com>\n+\n+\t* go-gcc.cc (Gcc_backend::Gcc_backend): Define atomic builtins.\n+\n 2019-05-08  Cherry Zhang  <cherryyz@google.com>\n \n \t* go-gcc.cc (Gcc_backend::Gcc_backend): Define memmove builtin."}, {"sha": "1b26f2bac93943f961ce9c77bc6a35561b7b4816", "filename": "gcc/go/go-gcc.cc", "status": "modified", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/395389bf9492a69db79747943d32abd0b7ac36c3/gcc%2Fgo%2Fgo-gcc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/395389bf9492a69db79747943d32abd0b7ac36c3/gcc%2Fgo%2Fgo-gcc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgo-gcc.cc?ref=395389bf9492a69db79747943d32abd0b7ac36c3", "patch": "@@ -776,6 +776,109 @@ Gcc_backend::Gcc_backend()\n   this->define_builtin(BUILT_IN_UNREACHABLE, \"__builtin_unreachable\", NULL,\n \t\t       build_function_type(void_type_node, void_list_node),\n \t\t       true, true);\n+\n+  // We provide some atomic functions.\n+  t = build_function_type_list(uint32_type_node,\n+                               ptr_type_node,\n+                               integer_type_node,\n+                               NULL_TREE);\n+  this->define_builtin(BUILT_IN_ATOMIC_LOAD_4, \"__atomic_load_4\", NULL,\n+                       t, false, false);\n+\n+  t = build_function_type_list(uint64_type_node,\n+                               ptr_type_node,\n+                               integer_type_node,\n+                               NULL_TREE);\n+  this->define_builtin(BUILT_IN_ATOMIC_LOAD_8, \"__atomic_load_8\", NULL,\n+                       t, false, false);\n+\n+  t = build_function_type_list(void_type_node,\n+                               ptr_type_node,\n+                               uint32_type_node,\n+                               integer_type_node,\n+                               NULL_TREE);\n+  this->define_builtin(BUILT_IN_ATOMIC_STORE_4, \"__atomic_store_4\", NULL,\n+                       t, false, false);\n+\n+  t = build_function_type_list(void_type_node,\n+                               ptr_type_node,\n+                               uint64_type_node,\n+                               integer_type_node,\n+                               NULL_TREE);\n+  this->define_builtin(BUILT_IN_ATOMIC_STORE_8, \"__atomic_store_8\", NULL,\n+                       t, false, false);\n+\n+  t = build_function_type_list(uint32_type_node,\n+                               ptr_type_node,\n+                               uint32_type_node,\n+                               integer_type_node,\n+                               NULL_TREE);\n+  this->define_builtin(BUILT_IN_ATOMIC_EXCHANGE_4, \"__atomic_exchange_4\", NULL,\n+                       t, false, false);\n+\n+  t = build_function_type_list(uint64_type_node,\n+                               ptr_type_node,\n+                               uint64_type_node,\n+                               integer_type_node,\n+                               NULL_TREE);\n+  this->define_builtin(BUILT_IN_ATOMIC_EXCHANGE_8, \"__atomic_exchange_8\", NULL,\n+                       t, false, false);\n+\n+  t = build_function_type_list(boolean_type_node,\n+                               ptr_type_node,\n+                               ptr_type_node,\n+                               uint32_type_node,\n+                               boolean_type_node,\n+                               integer_type_node,\n+                               integer_type_node,\n+                               NULL_TREE);\n+  this->define_builtin(BUILT_IN_ATOMIC_COMPARE_EXCHANGE_4,\n+                       \"__atomic_compare_exchange_4\", NULL,\n+                       t, false, false);\n+\n+  t = build_function_type_list(boolean_type_node,\n+                               ptr_type_node,\n+                               ptr_type_node,\n+                               uint64_type_node,\n+                               boolean_type_node,\n+                               integer_type_node,\n+                               integer_type_node,\n+                               NULL_TREE);\n+  this->define_builtin(BUILT_IN_ATOMIC_COMPARE_EXCHANGE_8,\n+                       \"__atomic_compare_exchange_8\", NULL,\n+                       t, false, false);\n+\n+  t = build_function_type_list(uint32_type_node,\n+                               ptr_type_node,\n+                               uint32_type_node,\n+                               integer_type_node,\n+                               NULL_TREE);\n+  this->define_builtin(BUILT_IN_ATOMIC_ADD_FETCH_4, \"__atomic_add_fetch_4\", NULL,\n+                       t, false, false);\n+\n+  t = build_function_type_list(uint64_type_node,\n+                               ptr_type_node,\n+                               uint64_type_node,\n+                               integer_type_node,\n+                               NULL_TREE);\n+  this->define_builtin(BUILT_IN_ATOMIC_ADD_FETCH_8, \"__atomic_add_fetch_8\", NULL,\n+                       t, false, false);\n+\n+  t = build_function_type_list(unsigned_char_type_node,\n+                               ptr_type_node,\n+                               unsigned_char_type_node,\n+                               integer_type_node,\n+                               NULL_TREE);\n+  this->define_builtin(BUILT_IN_ATOMIC_AND_FETCH_1, \"__atomic_and_fetch_1\", NULL,\n+                       t, false, false);\n+\n+  t = build_function_type_list(unsigned_char_type_node,\n+                               ptr_type_node,\n+                               unsigned_char_type_node,\n+                               integer_type_node,\n+                               NULL_TREE);\n+  this->define_builtin(BUILT_IN_ATOMIC_OR_FETCH_1, \"__atomic_or_fetch_1\", NULL,\n+                       t, false, false);\n }\n \n // Get an unnamed integer type."}, {"sha": "578bef74be308eebf334ae200ddb838032c7c423", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/395389bf9492a69db79747943d32abd0b7ac36c3/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/395389bf9492a69db79747943d32abd0b7ac36c3/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=395389bf9492a69db79747943d32abd0b7ac36c3", "patch": "@@ -1,4 +1,4 @@\n-c0c8ad50627e3a59267e6e3de233a0b30cf64150\n+f8a3668cbcfa3f8cd6c26c62bce416714cd401fc\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "dd559b4c0dd82af50b403f43ab6b18dbfa99edc7", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 243, "deletions": 0, "changes": 243, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/395389bf9492a69db79747943d32abd0b7ac36c3/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/395389bf9492a69db79747943d32abd0b7ac36c3/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=395389bf9492a69db79747943d32abd0b7ac36c3", "patch": "@@ -10460,9 +10460,16 @@ Call_expression::intrinsify(Gogo* gogo,\n   Location loc = this->location();\n \n   Type* int_type = Type::lookup_integer_type(\"int\");\n+  Type* int32_type = Type::lookup_integer_type(\"int32\");\n+  Type* int64_type = Type::lookup_integer_type(\"int64\");\n+  Type* uint_type = Type::lookup_integer_type(\"uint\");\n   Type* uint32_type = Type::lookup_integer_type(\"uint32\");\n   Type* uint64_type = Type::lookup_integer_type(\"uint64\");\n   Type* uintptr_type = Type::lookup_integer_type(\"uintptr\");\n+  Type* pointer_type = Type::make_pointer_type(Type::make_void_type());\n+\n+  int int_size = int_type->named_type()->real_type()->integer_type()->bits() / 8;\n+  int ptr_size = uintptr_type->named_type()->real_type()->integer_type()->bits() / 8;\n \n   if (package == \"runtime\")\n     {\n@@ -10545,6 +10552,242 @@ Call_expression::intrinsify(Gogo* gogo,\n           return Expression::make_conditional(cmp, c64, call, loc);\n         }\n     }\n+  else if (package == \"runtime/internal/atomic\")\n+    {\n+      int memorder = __ATOMIC_SEQ_CST;\n+\n+      if ((name == \"Load\" || name == \"Load64\" || name == \"Loadint64\" || name == \"Loadp\"\n+           || name == \"Loaduint\" || name == \"Loaduintptr\" || name == \"LoadAcq\")\n+          && this->args_ != NULL && this->args_->size() == 1)\n+        {\n+          if (int_size < 8 && (name == \"Load64\" || name == \"Loadint64\"))\n+            // On 32-bit architectures we need to check alignment.\n+            // Not intrinsify for now.\n+            return NULL;\n+\n+          Runtime::Function code;\n+          Type* res_type;\n+          if (name == \"Load\")\n+            {\n+              code = Runtime::ATOMIC_LOAD_4;\n+              res_type = uint32_type;\n+            }\n+          else if (name == \"Load64\")\n+            {\n+              code = Runtime::ATOMIC_LOAD_8;\n+              res_type = uint64_type;\n+            }\n+          else if (name == \"Loadint64\")\n+            {\n+              code = Runtime::ATOMIC_LOAD_8;\n+              res_type = int64_type;\n+            }\n+          else if (name == \"Loaduint\")\n+            {\n+              code = (int_size == 8\n+                      ? Runtime::ATOMIC_LOAD_8\n+                      : Runtime::ATOMIC_LOAD_4);\n+              res_type = uint_type;\n+            }\n+          else if (name == \"Loaduintptr\")\n+            {\n+              code = (ptr_size == 8\n+                      ? Runtime::ATOMIC_LOAD_8\n+                      : Runtime::ATOMIC_LOAD_4);\n+              res_type = uintptr_type;\n+            }\n+          else if (name == \"Loadp\")\n+            {\n+              code = (ptr_size == 8\n+                      ? Runtime::ATOMIC_LOAD_8\n+                      : Runtime::ATOMIC_LOAD_4);\n+              res_type = pointer_type;\n+            }\n+          else if (name == \"LoadAcq\")\n+            {\n+              code = Runtime::ATOMIC_LOAD_4;\n+              res_type = uint32_type;\n+              memorder = __ATOMIC_ACQUIRE;\n+            }\n+          else\n+            go_unreachable();\n+          Expression* a1 = this->args_->front();\n+          Expression* a2 = Expression::make_integer_ul(memorder, int32_type, loc);\n+          Expression* call = Runtime::make_call(code, loc, 2, a1, a2);\n+          return Expression::make_unsafe_cast(res_type, call, loc);\n+        }\n+\n+      if ((name == \"Store\" || name == \"Store64\" || name == \"StorepNoWB\"\n+           || name == \"Storeuintptr\" || name == \"StoreRel\")\n+          && this->args_ != NULL && this->args_->size() == 2)\n+        {\n+          if (int_size < 8 && name == \"Store64\")\n+            return NULL;\n+\n+          Runtime::Function code;\n+          Expression* a1 = this->args_->at(0);\n+          Expression* a2 = this->args_->at(1);\n+          if (name == \"Store\")\n+            code = Runtime::ATOMIC_STORE_4;\n+          else if (name == \"Store64\")\n+            code = Runtime::ATOMIC_STORE_8;\n+          else if (name == \"Storeuintptr\")\n+            code = (ptr_size == 8 ? Runtime::ATOMIC_STORE_8 : Runtime::ATOMIC_STORE_4);\n+          else if (name == \"StorepNoWB\")\n+            {\n+              code = (ptr_size == 8 ? Runtime::ATOMIC_STORE_8 : Runtime::ATOMIC_STORE_4);\n+              a2 = Expression::make_unsafe_cast(uintptr_type, a2, loc);\n+              a2 = Expression::make_cast(uint64_type, a2, loc);\n+            }\n+          else if (name == \"StoreRel\")\n+            {\n+              code = Runtime::ATOMIC_STORE_4;\n+              memorder = __ATOMIC_RELEASE;\n+            }\n+          else\n+            go_unreachable();\n+          Expression* a3 = Expression::make_integer_ul(memorder, int32_type, loc);\n+          return Runtime::make_call(code, loc, 3, a1, a2, a3);\n+        }\n+\n+      if ((name == \"Xchg\" || name == \"Xchg64\" || name == \"Xchguintptr\")\n+          && this->args_ != NULL && this->args_->size() == 2)\n+        {\n+          if (int_size < 8 && name == \"Xchg64\")\n+            return NULL;\n+\n+          Runtime::Function code;\n+          Type* res_type;\n+          if (name == \"Xchg\")\n+            {\n+              code = Runtime::ATOMIC_EXCHANGE_4;\n+              res_type = uint32_type;\n+            }\n+          else if (name == \"Xchg64\")\n+            {\n+              code = Runtime::ATOMIC_EXCHANGE_8;\n+              res_type = uint64_type;\n+            }\n+          else if (name == \"Xchguintptr\")\n+            {\n+              code = (ptr_size == 8\n+                      ? Runtime::ATOMIC_EXCHANGE_8\n+                      : Runtime::ATOMIC_EXCHANGE_4);\n+              res_type = uintptr_type;\n+            }\n+          else\n+            go_unreachable();\n+          Expression* a1 = this->args_->at(0);\n+          Expression* a2 = this->args_->at(1);\n+          Expression* a3 = Expression::make_integer_ul(memorder, int32_type, loc);\n+          Expression* call = Runtime::make_call(code, loc, 3, a1, a2, a3);\n+          return Expression::make_cast(res_type, call, loc);\n+        }\n+\n+      if ((name == \"Cas\" || name == \"Cas64\" || name == \"Casuintptr\"\n+           || name == \"Casp1\" || name == \"CasRel\")\n+          && this->args_ != NULL && this->args_->size() == 3)\n+        {\n+          if (int_size < 8 && name == \"Cas64\")\n+            return NULL;\n+\n+          Runtime::Function code;\n+          Expression* a1 = this->args_->at(0);\n+\n+          // Builtin cas takes a pointer to the old value.\n+          // Store it in a temporary and take the address.\n+          Expression* a2 = this->args_->at(1);\n+          Temporary_statement* ts = Statement::make_temporary(NULL, a2, loc);\n+          inserter->insert(ts);\n+          a2 = Expression::make_temporary_reference(ts, loc);\n+          a2 = Expression::make_unary(OPERATOR_AND, a2, loc);\n+\n+          Expression* a3 = this->args_->at(2);\n+          if (name == \"Cas\")\n+            code = Runtime::ATOMIC_COMPARE_EXCHANGE_4;\n+          else if (name == \"Cas64\")\n+            code = Runtime::ATOMIC_COMPARE_EXCHANGE_8;\n+          else if (name == \"Casuintptr\")\n+            code = (ptr_size == 8\n+                    ? Runtime::ATOMIC_COMPARE_EXCHANGE_8\n+                    : Runtime::ATOMIC_COMPARE_EXCHANGE_4);\n+          else if (name == \"Casp1\")\n+            {\n+              code = (ptr_size == 8\n+                      ? Runtime::ATOMIC_COMPARE_EXCHANGE_8\n+                      : Runtime::ATOMIC_COMPARE_EXCHANGE_4);\n+              a3 = Expression::make_unsafe_cast(uintptr_type, a3, loc);\n+              a3 = Expression::make_cast(uint64_type, a3, loc);\n+            }\n+          else if (name == \"CasRel\")\n+            {\n+              code = Runtime::ATOMIC_COMPARE_EXCHANGE_4;\n+              memorder = __ATOMIC_RELEASE;\n+            }\n+          else\n+            go_unreachable();\n+          Expression* a4 = Expression::make_boolean(false, loc);\n+          Expression* a5 = Expression::make_integer_ul(memorder, int32_type, loc);\n+          Expression* a6 = Expression::make_integer_ul(__ATOMIC_RELAXED, int32_type, loc);\n+          return Runtime::make_call(code, loc, 6, a1, a2, a3, a4, a5, a6);\n+        }\n+\n+      if ((name == \"Xadd\" || name == \"Xadd64\" || name == \"Xaddint64\"\n+           || name == \"Xadduintptr\")\n+          && this->args_ != NULL && this->args_->size() == 2)\n+        {\n+          if (int_size < 8 && (name == \"Xadd64\" || name == \"Xaddint64\"))\n+            return NULL;\n+\n+          Runtime::Function code;\n+          Type* res_type;\n+          if (name == \"Xadd\")\n+            {\n+              code = Runtime::ATOMIC_ADD_FETCH_4;\n+              res_type = uint32_type;\n+            }\n+          else if (name == \"Xadd64\")\n+            {\n+              code = Runtime::ATOMIC_ADD_FETCH_8;\n+              res_type = uint64_type;\n+            }\n+          else if (name == \"Xaddint64\")\n+            {\n+              code = Runtime::ATOMIC_ADD_FETCH_8;\n+              res_type = int64_type;\n+            }\n+          else if (name == \"Xadduintptr\")\n+            {\n+              code = (ptr_size == 8\n+                      ? Runtime::ATOMIC_ADD_FETCH_8\n+                      : Runtime::ATOMIC_ADD_FETCH_4);\n+              res_type = uintptr_type;\n+            }\n+          else\n+            go_unreachable();\n+          Expression* a1 = this->args_->at(0);\n+          Expression* a2 = this->args_->at(1);\n+          Expression* a3 = Expression::make_integer_ul(memorder, int32_type, loc);\n+          Expression* call = Runtime::make_call(code, loc, 3, a1, a2, a3);\n+          return Expression::make_cast(res_type, call, loc);\n+        }\n+\n+      if ((name == \"And8\" || name == \"Or8\")\n+          && this->args_ != NULL && this->args_->size() == 2)\n+        {\n+          Runtime::Function code;\n+          if (name == \"And8\")\n+            code = Runtime::ATOMIC_AND_FETCH_1;\n+          else if (name == \"Or8\")\n+            code = Runtime::ATOMIC_OR_FETCH_1;\n+          else\n+            go_unreachable();\n+          Expression* a1 = this->args_->at(0);\n+          Expression* a2 = this->args_->at(1);\n+          Expression* a3 = Expression::make_integer_ul(memorder, int32_type, loc);\n+          return Runtime::make_call(code, loc, 3, a1, a2, a3);\n+        }\n+    }\n \n   return NULL;\n }"}, {"sha": "28aca44706e83693929d6e007936a623bcdfb684", "filename": "gcc/go/gofrontend/runtime.cc", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/395389bf9492a69db79747943d32abd0b7ac36c3/gcc%2Fgo%2Fgofrontend%2Fruntime.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/395389bf9492a69db79747943d32abd0b7ac36c3/gcc%2Fgo%2Fgofrontend%2Fruntime.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fruntime.cc?ref=395389bf9492a69db79747943d32abd0b7ac36c3", "patch": "@@ -30,6 +30,8 @@ enum Runtime_function_type\n   RFT_BOOLPTR,\n   // Go type int, C type intgo.\n   RFT_INT,\n+  // Go type uint8, C type uint8_t.\n+  RFT_UINT8,\n   // Go type int32, C type int32_t.\n   RFT_INT32,\n   // Go type uint32, C type uint32_t.\n@@ -109,6 +111,10 @@ runtime_function_type(Runtime_function_type bft)\n \t  t = Type::lookup_integer_type(\"int\");\n \t  break;\n \n+\tcase RFT_UINT8:\n+\t  t = Type::lookup_integer_type(\"uint8\");\n+\t  break;\n+\n \tcase RFT_INT32:\n \t  t = Type::lookup_integer_type(\"int32\");\n \t  break;\n@@ -250,6 +256,7 @@ convert_to_runtime_function_type(Runtime_function_type bft, Expression* e,\n     case RFT_BOOL:\n     case RFT_BOOLPTR:\n     case RFT_INT:\n+    case RFT_UINT8:\n     case RFT_INT32:\n     case RFT_UINT32:\n     case RFT_INT64:"}, {"sha": "226eeac4345db0908024ee1a6335173a782ffda4", "filename": "gcc/go/gofrontend/runtime.def", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/395389bf9492a69db79747943d32abd0b7ac36c3/gcc%2Fgo%2Fgofrontend%2Fruntime.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/395389bf9492a69db79747943d32abd0b7ac36c3/gcc%2Fgo%2Fgofrontend%2Fruntime.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fruntime.def?ref=395389bf9492a69db79747943d32abd0b7ac36c3", "patch": "@@ -396,6 +396,38 @@ DEF_GO_RUNTIME(BUILTIN_BSWAP64, \"__builtin_bswap64\", P1(UINT64),\n DEF_GO_RUNTIME(BUILTIN_CTZ, \"__builtin_ctz\", P1(UINT32), R1(INT32))\n DEF_GO_RUNTIME(BUILTIN_CTZLL, \"__builtin_ctzll\", P1(UINT64), R1(INT32))\n \n+// Atomics.\n+DEF_GO_RUNTIME(ATOMIC_LOAD_4, \"__atomic_load_4\", P2(POINTER, INT32),\n+               R1(UINT32))\n+DEF_GO_RUNTIME(ATOMIC_LOAD_8, \"__atomic_load_8\", P2(POINTER, INT32),\n+               R1(UINT64))\n+DEF_GO_RUNTIME(ATOMIC_STORE_4, \"__atomic_store_4\", P3(POINTER, UINT32, INT32),\n+               R0())\n+DEF_GO_RUNTIME(ATOMIC_STORE_8, \"__atomic_store_8\", P3(POINTER, UINT64, INT32),\n+               R0())\n+DEF_GO_RUNTIME(ATOMIC_EXCHANGE_4, \"__atomic_exchange_4\", P3(POINTER, UINT32, INT32),\n+               R1(UINT32))\n+DEF_GO_RUNTIME(ATOMIC_EXCHANGE_8, \"__atomic_exchange_8\", P3(POINTER, UINT64, INT32),\n+               R1(UINT64))\n+DEF_GO_RUNTIME(ATOMIC_COMPARE_EXCHANGE_4, \"__atomic_compare_exchange_4\",\n+               P6(POINTER, POINTER, UINT32, BOOL, INT32, INT32),\n+               R1(BOOL))\n+DEF_GO_RUNTIME(ATOMIC_COMPARE_EXCHANGE_8, \"__atomic_compare_exchange_8\",\n+               P6(POINTER, POINTER, UINT64, BOOL, INT32, INT32),\n+               R1(BOOL))\n+DEF_GO_RUNTIME(ATOMIC_ADD_FETCH_4, \"__atomic_add_fetch_4\",\n+               P3(POINTER, UINT32, INT32),\n+               R1(UINT32))\n+DEF_GO_RUNTIME(ATOMIC_ADD_FETCH_8, \"__atomic_add_fetch_8\",\n+               P3(POINTER, UINT64, INT32),\n+               R1(UINT64))\n+DEF_GO_RUNTIME(ATOMIC_AND_FETCH_1, \"__atomic_and_fetch_1\",\n+               P3(POINTER, UINT8, INT32),\n+               R1(UINT8))\n+DEF_GO_RUNTIME(ATOMIC_OR_FETCH_1, \"__atomic_or_fetch_1\",\n+               P3(POINTER, UINT8, INT32),\n+               R1(UINT8))\n+\n // Remove helper macros.\n #undef ABFT6\n #undef ABFT2"}]}