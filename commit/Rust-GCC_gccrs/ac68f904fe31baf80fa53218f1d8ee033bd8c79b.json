{"sha": "ac68f904fe31baf80fa53218f1d8ee033bd8c79b", "node_id": "C_kwDOANBUbNoAKGFjNjhmOTA0ZmUzMWJhZjgwZmE1MzIxOGYxZDhlZTAzM2JkOGM3OWI", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-08-18T09:10:30Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-08-18T14:03:58Z"}, "message": "middle-end/106617 - fix fold_binary_op_with_conditional_arg pattern issue\n\nNow that we have parts of fold_binary_op_with_conditional_arg duplicated\nin match.pd and are using ! to take or throw away the result we have to\nbe careful to not have both implementations play games which each other,\ncausing quadratic behavior.  In particular the match.pd implementation\nrequires both arms to simplify while the fold-const.cc is happy with\njust one arm simplifying (something we cannot express in match.pd).\n\nThe fix is to simply not enable the match.pd pattern for GENERIC.\n\n\tPR middle-end/106617\n\t* match.pd ((a ? b : c) > d -> a ? (b > d) : (c > d)): Fix\n\tguard, disable on GENERIC to not cause quadratic behavior\n\twith the fold-const.cc implementation and the use of !\n\n\t* gcc.dg/pr106617.c: New testcase.", "tree": {"sha": "d6bf88ac9cd015e6908011b4c174d7569d42ed16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d6bf88ac9cd015e6908011b4c174d7569d42ed16"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ac68f904fe31baf80fa53218f1d8ee033bd8c79b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac68f904fe31baf80fa53218f1d8ee033bd8c79b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac68f904fe31baf80fa53218f1d8ee033bd8c79b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac68f904fe31baf80fa53218f1d8ee033bd8c79b/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03119249b9cfedb48e910b8df6a832b206cced2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03119249b9cfedb48e910b8df6a832b206cced2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03119249b9cfedb48e910b8df6a832b206cced2b"}], "stats": {"total": 40, "additions": 39, "deletions": 1}, "files": [{"sha": "1bb936fc4010f98f24bb97671350e8432c55b347", "filename": "gcc/match.pd", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac68f904fe31baf80fa53218f1d8ee033bd8c79b/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac68f904fe31baf80fa53218f1d8ee033bd8c79b/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=ac68f904fe31baf80fa53218f1d8ee033bd8c79b", "patch": "@@ -5796,6 +5796,7 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n   (cmp (bit_and@2 @0 integer_pow2p@1) @1)\n   (icmp @2 { build_zero_cst (TREE_TYPE (@0)); })))\n \n+#if GIMPLE\n /* From fold_binary_op_with_conditional_arg handle the case of\n    rewriting (a ? b : c) > d to a ? (b > d) : (c > d) when the\n    compares simplify.  */\n@@ -5805,8 +5806,9 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n   /* Do not move possibly trapping operations into the conditional as this\n      pessimizes code and causes gimplification issues when applied late.  */\n   (if (!FLOAT_TYPE_P (TREE_TYPE (@3))\n-       || operation_could_trap_p (cmp, true, false, @3))\n+       || !operation_could_trap_p (cmp, true, false, @3))\n    (cond @0 (cmp! @1 @3) (cmp! @2 @3)))))\n+#endif\n \n (for cmp (ge lt)\n /* x < 0 ? ~y : y into (x >> (prec-1)) ^ y. */"}, {"sha": "4274b55f80de412d5c861ef0832c6312130fa0a6", "filename": "gcc/testsuite/gcc.dg/pr106617.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac68f904fe31baf80fa53218f1d8ee033bd8c79b/gcc%2Ftestsuite%2Fgcc.dg%2Fpr106617.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac68f904fe31baf80fa53218f1d8ee033bd8c79b/gcc%2Ftestsuite%2Fgcc.dg%2Fpr106617.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr106617.c?ref=ac68f904fe31baf80fa53218f1d8ee033bd8c79b", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do compile } */\n+\n+int nr_cpu_ids;\n+void fc_setup_exch_mgr() {\n+  (((((((1UL << (((0, 0)\n+                            ? ((1)\n+                                   ? (((nr_cpu_ids)) ? 0\n+                                      : ((nr_cpu_ids)) & (21) ? 21\n+                                      : ((nr_cpu_ids)) ? 20\n+                                      : ((nr_cpu_ids)) & (19) ? 19\n+                                      : ((nr_cpu_ids)) ? 18\n+                                      : ((nr_cpu_ids)) & (17) ? 17\n+                                      : ((nr_cpu_ids)) ? 16\n+                                      : ((nr_cpu_ids)) & (15) ? 15\n+                                      : ((nr_cpu_ids)) ? 14\n+                                      : ((nr_cpu_ids)) & (13) ? 13\n+                                      : ((nr_cpu_ids)) ? 12\n+                                      : ((nr_cpu_ids)) & (11) ? 11\n+                                      : ((nr_cpu_ids)) ? 10\n+                                      : ((nr_cpu_ids)) & (9)  ? 9\n+                                      : ((nr_cpu_ids))  ? 8\n+                                      : ((nr_cpu_ids)) & (7)  ? 7\n+                                      : ((nr_cpu_ids))  ? 6\n+                                      : ((nr_cpu_ids)) & (5)  ? 5\n+                                      : ((nr_cpu_ids))  ? 4\n+                                      : ((nr_cpu_ids)) & (3)\n+                                          ? 3\n+                                          : ((nr_cpu_ids)-1) & 1)\n+                                   : 1)\n+                            : 0) +\n+                       1))))) &\n+                 (1UL << 2)\n+             ? 2\n+             : 1))\n+           );\n+}"}]}