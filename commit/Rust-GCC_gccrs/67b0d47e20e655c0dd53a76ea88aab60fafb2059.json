{"sha": "67b0d47e20e655c0dd53a76ea88aab60fafb2059", "node_id": "C_kwDOANBUbNoAKDY3YjBkNDdlMjBlNjU1YzBkZDUzYTc2ZWE4OGFhYjYwZmFmYjIwNTk", "commit": {"author": {"name": "Philipp Tomsich", "email": "philipp.tomsich@vrull.eu", "date": "2021-05-20T19:57:48Z"}, "committer": {"name": "Philipp Tomsich", "email": "philipp.tomsich@vrull.eu", "date": "2021-11-03T13:59:19Z"}, "message": "aarch64: enable Ampere-1 CPU\n\nThis adds support and a basic turning model for the Ampere Computing\n\"Ampere-1\" CPU.\n\nThe Ampere-1 implements the ARMv8.6 architecture in A64 mode and is\nmodelled as a 4-wide issue (as with all modern micro-architectures,\nthe chosen issue rate is a compromise between the maximum dispatch\nrate and the maximum rate of uops issued to the scheduler).\n\nThis adds the -mcpu=ampere1 command-line option and the relevant cost\ninformation/tuning tables for the Ampere-1.\n\ngcc/ChangeLog:\n\n\t* config/aarch64/aarch64-cores.def (AARCH64_CORE): New Ampere-1\tcore.\n\t* config/aarch64/aarch64-tune.md: Regenerate.\n\t* config/aarch64/aarch64-cost-tables.h: Add extra costs for Ampere-1.\n\t* config/aarch64/aarch64.c: Add tuning structures for Ampere-1.\n\t* doc/invoke.texi: Add documentation for Ampere-1 core.", "tree": {"sha": "dcc2168621888806a78f55982047350ab882b368", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dcc2168621888806a78f55982047350ab882b368"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/67b0d47e20e655c0dd53a76ea88aab60fafb2059", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67b0d47e20e655c0dd53a76ea88aab60fafb2059", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67b0d47e20e655c0dd53a76ea88aab60fafb2059", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67b0d47e20e655c0dd53a76ea88aab60fafb2059/comments", "author": {"login": "ptomsich", "id": 14983582, "node_id": "MDQ6VXNlcjE0OTgzNTgy", "avatar_url": "https://avatars.githubusercontent.com/u/14983582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptomsich", "html_url": "https://github.com/ptomsich", "followers_url": "https://api.github.com/users/ptomsich/followers", "following_url": "https://api.github.com/users/ptomsich/following{/other_user}", "gists_url": "https://api.github.com/users/ptomsich/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptomsich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptomsich/subscriptions", "organizations_url": "https://api.github.com/users/ptomsich/orgs", "repos_url": "https://api.github.com/users/ptomsich/repos", "events_url": "https://api.github.com/users/ptomsich/events{/privacy}", "received_events_url": "https://api.github.com/users/ptomsich/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ptomsich", "id": 14983582, "node_id": "MDQ6VXNlcjE0OTgzNTgy", "avatar_url": "https://avatars.githubusercontent.com/u/14983582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptomsich", "html_url": "https://github.com/ptomsich", "followers_url": "https://api.github.com/users/ptomsich/followers", "following_url": "https://api.github.com/users/ptomsich/following{/other_user}", "gists_url": "https://api.github.com/users/ptomsich/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptomsich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptomsich/subscriptions", "organizations_url": "https://api.github.com/users/ptomsich/orgs", "repos_url": "https://api.github.com/users/ptomsich/repos", "events_url": "https://api.github.com/users/ptomsich/events{/privacy}", "received_events_url": "https://api.github.com/users/ptomsich/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a195c7270e4705a06a9aaade0d721d5f52ca2275", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a195c7270e4705a06a9aaade0d721d5f52ca2275", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a195c7270e4705a06a9aaade0d721d5f52ca2275"}], "stats": {"total": 192, "additions": 189, "deletions": 3}, "files": [{"sha": "617cde42fba278208888480ce2088e8eb495ab41", "filename": "gcc/config/aarch64/aarch64-cores.def", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67b0d47e20e655c0dd53a76ea88aab60fafb2059/gcc%2Fconfig%2Faarch64%2Faarch64-cores.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67b0d47e20e655c0dd53a76ea88aab60fafb2059/gcc%2Fconfig%2Faarch64%2Faarch64-cores.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-cores.def?ref=67b0d47e20e655c0dd53a76ea88aab60fafb2059", "patch": "@@ -68,7 +68,8 @@ AARCH64_CORE(\"octeontx83\",    octeontxt83,   thunderx,  8A,  AARCH64_FL_FOR_ARCH\n AARCH64_CORE(\"thunderxt81\",   thunderxt81,   thunderx,  8A,  AARCH64_FL_FOR_ARCH8 | AARCH64_FL_CRC | AARCH64_FL_CRYPTO, thunderx,  0x43, 0x0a2, -1)\n AARCH64_CORE(\"thunderxt83\",   thunderxt83,   thunderx,  8A,  AARCH64_FL_FOR_ARCH8 | AARCH64_FL_CRC | AARCH64_FL_CRYPTO, thunderx,  0x43, 0x0a3, -1)\n \n-/* Ampere Computing cores. */\n+/* Ampere Computing ('\\xC0') cores. */\n+AARCH64_CORE(\"ampere1\", ampere1, cortexa57, 8_6A, AARCH64_FL_FOR_ARCH8_6, ampere1, 0xC0, 0xac3, -1)\n /* Do not swap around \"emag\" and \"xgene1\",\n    this order is required to handle variant correctly. */\n AARCH64_CORE(\"emag\",        emag,      xgene1,    8A,  AARCH64_FL_FOR_ARCH8 | AARCH64_FL_CRC | AARCH64_FL_CRYPTO, emag, 0x50, 0x000, 3)"}, {"sha": "e6ded65b67dca75be1302f263c7cfe5b2d5e05ca", "filename": "gcc/config/aarch64/aarch64-cost-tables.h", "status": "modified", "additions": 107, "deletions": 0, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67b0d47e20e655c0dd53a76ea88aab60fafb2059/gcc%2Fconfig%2Faarch64%2Faarch64-cost-tables.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67b0d47e20e655c0dd53a76ea88aab60fafb2059/gcc%2Fconfig%2Faarch64%2Faarch64-cost-tables.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-cost-tables.h?ref=67b0d47e20e655c0dd53a76ea88aab60fafb2059", "patch": "@@ -668,4 +668,111 @@ const struct cpu_cost_table a64fx_extra_costs =\n   }\n };\n \n+const struct cpu_cost_table ampere1_extra_costs =\n+{\n+  /* ALU */\n+  {\n+    0,                 /* arith.  */\n+    0,                 /* logical.  */\n+    0,                 /* shift.  */\n+    COSTS_N_INSNS (1), /* shift_reg.  */\n+    0,                 /* arith_shift.  */\n+    COSTS_N_INSNS (1), /* arith_shift_reg.  */\n+    0,                 /* log_shift.  */\n+    COSTS_N_INSNS (1), /* log_shift_reg.  */\n+    0,                 /* extend.  */\n+    COSTS_N_INSNS (1), /* extend_arith.  */\n+    0,                 /* bfi.  */\n+    0,                 /* bfx.  */\n+    0,                 /* clz.  */\n+    0,                 /* rev.  */\n+    0,                 /* non_exec.  */\n+    true               /* non_exec_costs_exec.  */\n+  },\n+  {\n+    /* MULT SImode */\n+    {\n+      COSTS_N_INSNS (3),       /* simple.  */\n+      COSTS_N_INSNS (3),       /* flag_setting.  */\n+      COSTS_N_INSNS (3),       /* extend.  */\n+      COSTS_N_INSNS (4),       /* add.  */\n+      COSTS_N_INSNS (4),       /* extend_add.  */\n+      COSTS_N_INSNS (18)       /* idiv.  */\n+    },\n+    /* MULT DImode */\n+    {\n+      COSTS_N_INSNS (3),       /* simple.  */\n+      0,                       /* flag_setting (N/A).  */\n+      COSTS_N_INSNS (3),       /* extend.  */\n+      COSTS_N_INSNS (4),       /* add.  */\n+      COSTS_N_INSNS (4),       /* extend_add.  */\n+      COSTS_N_INSNS (34)       /* idiv.  */\n+    }\n+  },\n+  /* LD/ST */\n+  {\n+    COSTS_N_INSNS (4),         /* load.  */\n+    COSTS_N_INSNS (4),         /* load_sign_extend.  */\n+    0,                         /* ldrd (n/a).  */\n+    0,                         /* ldm_1st.  */\n+    0,                         /* ldm_regs_per_insn_1st.  */\n+    0,                         /* ldm_regs_per_insn_subsequent.  */\n+    COSTS_N_INSNS (5),         /* loadf.  */\n+    COSTS_N_INSNS (5),         /* loadd.  */\n+    COSTS_N_INSNS (5),         /* load_unaligned.  */\n+    0,                         /* store.  */\n+    0,                         /* strd.  */\n+    0,                         /* stm_1st.  */\n+    0,                         /* stm_regs_per_insn_1st.  */\n+    0,                         /* stm_regs_per_insn_subsequent.  */\n+    COSTS_N_INSNS (2),         /* storef.  */\n+    COSTS_N_INSNS (2),         /* stored.  */\n+    COSTS_N_INSNS (2),         /* store_unaligned.  */\n+    COSTS_N_INSNS (3),         /* loadv.  */\n+    COSTS_N_INSNS (3)          /* storev.  */\n+  },\n+  {\n+    /* FP SFmode */\n+    {\n+      COSTS_N_INSNS (25),      /* div.  */\n+      COSTS_N_INSNS (4),       /* mult.  */\n+      COSTS_N_INSNS (4),       /* mult_addsub.  */\n+      COSTS_N_INSNS (4),       /* fma.  */\n+      COSTS_N_INSNS (4),       /* addsub.  */\n+      COSTS_N_INSNS (2),       /* fpconst.  */\n+      COSTS_N_INSNS (4),       /* neg.  */\n+      COSTS_N_INSNS (4),       /* compare.  */\n+      COSTS_N_INSNS (4),       /* widen.  */\n+      COSTS_N_INSNS (4),       /* narrow.  */\n+      COSTS_N_INSNS (4),       /* toint.  */\n+      COSTS_N_INSNS (4),       /* fromint.  */\n+      COSTS_N_INSNS (4)        /* roundint.  */\n+    },\n+    /* FP DFmode */\n+    {\n+      COSTS_N_INSNS (34),      /* div.  */\n+      COSTS_N_INSNS (5),       /* mult.  */\n+      COSTS_N_INSNS (5),       /* mult_addsub.  */\n+      COSTS_N_INSNS (5),       /* fma.  */\n+      COSTS_N_INSNS (5),       /* addsub.  */\n+      COSTS_N_INSNS (2),       /* fpconst.  */\n+      COSTS_N_INSNS (5),       /* neg.  */\n+      COSTS_N_INSNS (5),       /* compare.  */\n+      COSTS_N_INSNS (5),       /* widen.  */\n+      COSTS_N_INSNS (5),       /* narrow.  */\n+      COSTS_N_INSNS (6),       /* toint.  */\n+      COSTS_N_INSNS (6),       /* fromint.  */\n+      COSTS_N_INSNS (5)        /* roundint.  */\n+    }\n+  },\n+  /* Vector */\n+  {\n+    COSTS_N_INSNS (3),  /* alu.  */\n+    COSTS_N_INSNS (3),  /* mult.  */\n+    COSTS_N_INSNS (2),  /* movi.  */\n+    COSTS_N_INSNS (2),  /* dup.  */\n+    COSTS_N_INSNS (2)   /* extract.  */\n+  }\n+};\n+\n #endif"}, {"sha": "3eed700c063c2abf36cd648b22f713e887255f96", "filename": "gcc/config/aarch64/aarch64-tune.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67b0d47e20e655c0dd53a76ea88aab60fafb2059/gcc%2Fconfig%2Faarch64%2Faarch64-tune.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67b0d47e20e655c0dd53a76ea88aab60fafb2059/gcc%2Fconfig%2Faarch64%2Faarch64-tune.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-tune.md?ref=67b0d47e20e655c0dd53a76ea88aab60fafb2059", "patch": "@@ -1,5 +1,5 @@\n ;; -*- buffer-read-only: t -*-\n ;; Generated automatically by gentune.sh from aarch64-cores.def\n (define_attr \"tune\"\n-\t\"cortexa34,cortexa35,cortexa53,cortexa57,cortexa72,cortexa73,thunderx,thunderxt88p1,thunderxt88,octeontx,octeontxt81,octeontxt83,thunderxt81,thunderxt83,emag,xgene1,falkor,qdf24xx,exynosm1,phecda,thunderx2t99p1,vulcan,thunderx2t99,cortexa55,cortexa75,cortexa76,cortexa76ae,cortexa77,cortexa78,cortexa78ae,cortexa78c,cortexa65,cortexa65ae,cortexx1,ares,neoversen1,neoversee1,octeontx2,octeontx2t98,octeontx2t96,octeontx2t93,octeontx2f95,octeontx2f95n,octeontx2f95mm,a64fx,tsv110,thunderx3t110,zeus,neoversev1,neoverse512tvb,saphira,neoversen2,cortexa57cortexa53,cortexa72cortexa53,cortexa73cortexa35,cortexa73cortexa53,cortexa75cortexa55,cortexa76cortexa55,cortexr82,cortexa510,cortexa710,cortexx2\"\n+\t\"cortexa34,cortexa35,cortexa53,cortexa57,cortexa72,cortexa73,thunderx,thunderxt88p1,thunderxt88,octeontx,octeontxt81,octeontxt83,thunderxt81,thunderxt83,ampere1,emag,xgene1,falkor,qdf24xx,exynosm1,phecda,thunderx2t99p1,vulcan,thunderx2t99,cortexa55,cortexa75,cortexa76,cortexa76ae,cortexa77,cortexa78,cortexa78ae,cortexa78c,cortexa65,cortexa65ae,cortexx1,ares,neoversen1,neoversee1,octeontx2,octeontx2t98,octeontx2t96,octeontx2t93,octeontx2f95,octeontx2f95n,octeontx2f95mm,a64fx,tsv110,thunderx3t110,zeus,neoversev1,neoverse512tvb,saphira,neoversen2,cortexa57cortexa53,cortexa72cortexa53,cortexa73cortexa35,cortexa73cortexa53,cortexa75cortexa55,cortexa76cortexa55,cortexr82,cortexa510,cortexa710,cortexx2\"\n \t(const (symbol_ref \"((enum attr_tune) aarch64_tune)\")))"}, {"sha": "5047f0e0ec732b5f5b2b7baa5e8e16dc80029033", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67b0d47e20e655c0dd53a76ea88aab60fafb2059/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67b0d47e20e655c0dd53a76ea88aab60fafb2059/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=67b0d47e20e655c0dd53a76ea88aab60fafb2059", "patch": "@@ -1067,6 +1067,43 @@ static const struct cpu_vector_cost thunderx3t110_vector_cost =\n   nullptr /* issue_info  */\n };\n \n+static const advsimd_vec_cost ampere1_advsimd_vector_cost =\n+{\n+  3, /* int_stmt_cost  */\n+  3, /* fp_stmt_cost  */\n+  0, /* ld2_st2_permute_cost  */\n+  0, /* ld3_st3_permute_cost  */\n+  0, /* ld4_st4_permute_cost  */\n+  2, /* permute_cost  */\n+  12, /* reduc_i8_cost  */\n+  9, /* reduc_i16_cost  */\n+  6, /* reduc_i32_cost  */\n+  5, /* reduc_i64_cost  */\n+  9, /* reduc_f16_cost  */\n+  6, /* reduc_f32_cost  */\n+  5, /* reduc_f64_cost  */\n+  8, /* store_elt_extra_cost  */\n+  6, /* vec_to_scalar_cost  */\n+  7, /* scalar_to_vec_cost  */\n+  5, /* align_load_cost  */\n+  5, /* unalign_load_cost  */\n+  2, /* unalign_store_cost  */\n+  2  /* store_cost  */\n+};\n+\n+/* Ampere-1 costs for vector insn classes.  */\n+static const struct cpu_vector_cost ampere1_vector_cost =\n+{\n+  1, /* scalar_int_stmt_cost  */\n+  1, /* scalar_fp_stmt_cost  */\n+  4, /* scalar_load_cost  */\n+  1, /* scalar_store_cost  */\n+  1, /* cond_taken_branch_cost  */\n+  1, /* cond_not_taken_branch_cost  */\n+  &ampere1_advsimd_vector_cost, /* advsimd  */\n+  nullptr, /* sve  */\n+  nullptr  /* issue_info  */\n+};\n \n /* Generic costs for branch instructions.  */\n static const struct cpu_branch_cost generic_branch_cost =\n@@ -1210,6 +1247,17 @@ static const cpu_prefetch_tune a64fx_prefetch_tune =\n   -1\t\t\t/* default_opt_level  */\n };\n \n+static const cpu_prefetch_tune ampere1_prefetch_tune =\n+{\n+  0,\t\t\t/* num_slots  */\n+  64,\t\t\t/* l1_cache_size  */\n+  64,\t\t\t/* l1_cache_line_size  */\n+  2048,\t\t\t/* l2_cache_size  */\n+  true,\t\t\t/* prefetch_dynamic_strides */\n+  -1,\t\t\t/* minimum_stride */\n+  -1\t\t\t/* default_opt_level  */\n+};\n+\n static const struct tune_params generic_tunings =\n {\n   &cortexa57_extra_costs,\n@@ -1670,6 +1718,36 @@ static const struct tune_params neoversen1_tunings =\n   &generic_prefetch_tune\n };\n \n+static const struct tune_params ampere1_tunings =\n+{\n+  &ampere1_extra_costs,\n+  &generic_addrcost_table,\n+  &generic_regmove_cost,\n+  &ampere1_vector_cost,\n+  &generic_branch_cost,\n+  &generic_approx_modes,\n+  SVE_NOT_IMPLEMENTED, /* sve_width  */\n+  4, /* memmov_cost  */\n+  4, /* issue_rate  */\n+  (AARCH64_FUSE_ADRP_ADD | AARCH64_FUSE_AES_AESMC |\n+   AARCH64_FUSE_MOV_MOVK | AARCH64_FUSE_MOVK_MOVK |\n+   AARCH64_FUSE_ALU_BRANCH /* adds, ands, bics, ccmp, ccmn */ |\n+   AARCH64_FUSE_CMP_BRANCH),\n+  /* fusible_ops  */\n+  \"32\",\t\t/* function_align.  */\n+  \"4\",\t\t/* jump_align.  */\n+  \"32:16\",\t/* loop_align.  */\n+  2,\t/* int_reassoc_width.  */\n+  4,\t/* fp_reassoc_width.  */\n+  2,\t/* vec_reassoc_width.  */\n+  2,\t/* min_div_recip_mul_sf.  */\n+  2,\t/* min_div_recip_mul_df.  */\n+  0,\t/* max_case_values.  */\n+  tune_params::AUTOPREFETCHER_WEAK,\t/* autoprefetcher_model.  */\n+  (AARCH64_EXTRA_TUNE_NONE),\t\t/* tune_flags.  */\n+  &ampere1_prefetch_tune\n+};\n+\n static const advsimd_vec_cost neoversev1_advsimd_vector_cost =\n {\n   2, /* int_stmt_cost  */"}, {"sha": "9fb74d349203ca87c41c9a3d77d53751cb222988", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67b0d47e20e655c0dd53a76ea88aab60fafb2059/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67b0d47e20e655c0dd53a76ea88aab60fafb2059/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=67b0d47e20e655c0dd53a76ea88aab60fafb2059", "patch": "@@ -18737,7 +18737,7 @@ performance of the code.  Permissible values for this option are:\n @samp{cortex-a73.cortex-a35}, @samp{cortex-a73.cortex-a53},\n @samp{cortex-a75.cortex-a55}, @samp{cortex-a76.cortex-a55},\n @samp{cortex-r82}, @samp{cortex-x1}, @samp{cortex-x2},\n-@samp{cortex-a510}, @samp{cortex-a710}, @samp{native}.\n+@samp{cortex-a510}, @samp{cortex-a710}, @samp{ampere1}, @samp{native}.\n \n The values @samp{cortex-a57.cortex-a53}, @samp{cortex-a72.cortex-a53},\n @samp{cortex-a73.cortex-a35}, @samp{cortex-a73.cortex-a53},"}]}