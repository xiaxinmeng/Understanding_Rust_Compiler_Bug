{"sha": "6dce23a8ae9579e12e73201802ef553c13c4f023", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmRjZTIzYThhZTk1NzllMTJlNzMyMDE4MDJlZjU1M2MxM2M0ZjAyMw==", "commit": {"author": {"name": "James Greenhalgh", "email": "james.greenhalgh@arm.com", "date": "2013-05-01T15:33:34Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2013-05-01T15:33:34Z"}, "message": "[AArch64] Rewrite v<max,min><nm><q><v>_<sfu><8, 16, 32, 64> intrinsics using builtins.\n\ngcc/\n\t* config/aarch64/arm_neon.h\n\t(v<max,min><nm><q><v>_<sfu><8, 16, 32, 64>): Rewrite using builtins.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/vect-vmaxv.c: New.\n\t* gcc.target/aarch64/vect-vfmaxv.c: Likewise.\n\nFrom-SVN: r198499", "tree": {"sha": "fb3a3dc53bdd757eb61aa1316fe8a74a99dad772", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb3a3dc53bdd757eb61aa1316fe8a74a99dad772"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6dce23a8ae9579e12e73201802ef553c13c4f023", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6dce23a8ae9579e12e73201802ef553c13c4f023", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6dce23a8ae9579e12e73201802ef553c13c4f023", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6dce23a8ae9579e12e73201802ef553c13c4f023/comments", "author": {"login": "jgreenhalgh-arm", "id": 6104025, "node_id": "MDQ6VXNlcjYxMDQwMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6104025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgreenhalgh-arm", "html_url": "https://github.com/jgreenhalgh-arm", "followers_url": "https://api.github.com/users/jgreenhalgh-arm/followers", "following_url": "https://api.github.com/users/jgreenhalgh-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jgreenhalgh-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgreenhalgh-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgreenhalgh-arm/subscriptions", "organizations_url": "https://api.github.com/users/jgreenhalgh-arm/orgs", "repos_url": "https://api.github.com/users/jgreenhalgh-arm/repos", "events_url": "https://api.github.com/users/jgreenhalgh-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jgreenhalgh-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1598945b00376f5b61959f34fad3a9ac29633272", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1598945b00376f5b61959f34fad3a9ac29633272", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1598945b00376f5b61959f34fad3a9ac29633272"}], "stats": {"total": 935, "additions": 573, "deletions": 362}, "files": [{"sha": "ff6ceb6d2f81b9e434f96b81bd15925fa9b5f9da", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dce23a8ae9579e12e73201802ef553c13c4f023/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dce23a8ae9579e12e73201802ef553c13c4f023/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6dce23a8ae9579e12e73201802ef553c13c4f023", "patch": "@@ -1,3 +1,8 @@\n+2013-05-01  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\t* config/aarch64/arm_neon.h\n+\t(v<max,min><nm><q><v>_<sfu><8, 16, 32, 64>): Rewrite using builtins.\n+\n 2013-05-01  James Greenhalgh  <james.greenhalgh@arm.com>\n \n \t* config/aarch64/aarch64-builtins"}, {"sha": "cdefa86f57c3a190ce09fc9f17854e085fb86ff4", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 277, "deletions": 362, "changes": 639, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dce23a8ae9579e12e73201802ef553c13c4f023/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dce23a8ae9579e12e73201802ef553c13c4f023/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=6dce23a8ae9579e12e73201802ef553c13c4f023", "patch": "@@ -8027,303 +8027,6 @@ vld1q_u64 (const uint64_t * a)\n   return result;\n }\n \n-__extension__ static __inline float32x2_t __attribute__ ((__always_inline__))\n-vmaxnm_f32 (float32x2_t a, float32x2_t b)\n-{\n-  float32x2_t result;\n-  __asm__ (\"fmaxnm %0.2s,%1.2s,%2.2s\"\n-           : \"=w\"(result)\n-           : \"w\"(a), \"w\"(b)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))\n-vmaxnmq_f32 (float32x4_t a, float32x4_t b)\n-{\n-  float32x4_t result;\n-  __asm__ (\"fmaxnm %0.4s,%1.4s,%2.4s\"\n-           : \"=w\"(result)\n-           : \"w\"(a), \"w\"(b)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline float64x2_t __attribute__ ((__always_inline__))\n-vmaxnmq_f64 (float64x2_t a, float64x2_t b)\n-{\n-  float64x2_t result;\n-  __asm__ (\"fmaxnm %0.2d,%1.2d,%2.2d\"\n-           : \"=w\"(result)\n-           : \"w\"(a), \"w\"(b)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline float32_t __attribute__ ((__always_inline__))\n-vmaxnmvq_f32 (float32x4_t a)\n-{\n-  float32_t result;\n-  __asm__ (\"fmaxnmv %s0,%1.4s\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline int8_t __attribute__ ((__always_inline__))\n-vmaxv_s8 (int8x8_t a)\n-{\n-  int8_t result;\n-  __asm__ (\"smaxv %b0,%1.8b\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline int16_t __attribute__ ((__always_inline__))\n-vmaxv_s16 (int16x4_t a)\n-{\n-  int16_t result;\n-  __asm__ (\"smaxv %h0,%1.4h\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline uint8_t __attribute__ ((__always_inline__))\n-vmaxv_u8 (uint8x8_t a)\n-{\n-  uint8_t result;\n-  __asm__ (\"umaxv %b0,%1.8b\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline uint16_t __attribute__ ((__always_inline__))\n-vmaxv_u16 (uint16x4_t a)\n-{\n-  uint16_t result;\n-  __asm__ (\"umaxv %h0,%1.4h\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline float32_t __attribute__ ((__always_inline__))\n-vmaxvq_f32 (float32x4_t a)\n-{\n-  float32_t result;\n-  __asm__ (\"fmaxv %s0,%1.4s\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline int8_t __attribute__ ((__always_inline__))\n-vmaxvq_s8 (int8x16_t a)\n-{\n-  int8_t result;\n-  __asm__ (\"smaxv %b0,%1.16b\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline int16_t __attribute__ ((__always_inline__))\n-vmaxvq_s16 (int16x8_t a)\n-{\n-  int16_t result;\n-  __asm__ (\"smaxv %h0,%1.8h\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline int32_t __attribute__ ((__always_inline__))\n-vmaxvq_s32 (int32x4_t a)\n-{\n-  int32_t result;\n-  __asm__ (\"smaxv %s0,%1.4s\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline uint8_t __attribute__ ((__always_inline__))\n-vmaxvq_u8 (uint8x16_t a)\n-{\n-  uint8_t result;\n-  __asm__ (\"umaxv %b0,%1.16b\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline uint16_t __attribute__ ((__always_inline__))\n-vmaxvq_u16 (uint16x8_t a)\n-{\n-  uint16_t result;\n-  __asm__ (\"umaxv %h0,%1.8h\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline uint32_t __attribute__ ((__always_inline__))\n-vmaxvq_u32 (uint32x4_t a)\n-{\n-  uint32_t result;\n-  __asm__ (\"umaxv %s0,%1.4s\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline float32_t __attribute__ ((__always_inline__))\n-vminnmvq_f32 (float32x4_t a)\n-{\n-  float32_t result;\n-  __asm__ (\"fminnmv %s0,%1.4s\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline int8_t __attribute__ ((__always_inline__))\n-vminv_s8 (int8x8_t a)\n-{\n-  int8_t result;\n-  __asm__ (\"sminv %b0,%1.8b\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline int16_t __attribute__ ((__always_inline__))\n-vminv_s16 (int16x4_t a)\n-{\n-  int16_t result;\n-  __asm__ (\"sminv %h0,%1.4h\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline uint8_t __attribute__ ((__always_inline__))\n-vminv_u8 (uint8x8_t a)\n-{\n-  uint8_t result;\n-  __asm__ (\"uminv %b0,%1.8b\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline uint16_t __attribute__ ((__always_inline__))\n-vminv_u16 (uint16x4_t a)\n-{\n-  uint16_t result;\n-  __asm__ (\"uminv %h0,%1.4h\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline float32_t __attribute__ ((__always_inline__))\n-vminvq_f32 (float32x4_t a)\n-{\n-  float32_t result;\n-  __asm__ (\"fminv %s0,%1.4s\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline int8_t __attribute__ ((__always_inline__))\n-vminvq_s8 (int8x16_t a)\n-{\n-  int8_t result;\n-  __asm__ (\"sminv %b0,%1.16b\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline int16_t __attribute__ ((__always_inline__))\n-vminvq_s16 (int16x8_t a)\n-{\n-  int16_t result;\n-  __asm__ (\"sminv %h0,%1.8h\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline int32_t __attribute__ ((__always_inline__))\n-vminvq_s32 (int32x4_t a)\n-{\n-  int32_t result;\n-  __asm__ (\"sminv %s0,%1.4s\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline uint8_t __attribute__ ((__always_inline__))\n-vminvq_u8 (uint8x16_t a)\n-{\n-  uint8_t result;\n-  __asm__ (\"uminv %b0,%1.16b\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline uint16_t __attribute__ ((__always_inline__))\n-vminvq_u16 (uint16x8_t a)\n-{\n-  uint16_t result;\n-  __asm__ (\"uminv %h0,%1.8h\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline uint32_t __attribute__ ((__always_inline__))\n-vminvq_u32 (uint32x4_t a)\n-{\n-  uint32_t result;\n-  __asm__ (\"uminv %s0,%1.4s\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n #define vmla_lane_f32(a, b, c, d)                                       \\\n   __extension__                                                         \\\n     ({                                                                  \\\n@@ -17308,70 +17011,6 @@ vaddv_u32 (uint32x2_t a)\n   return result;\n }\n \n-__extension__ static __inline float32_t __attribute__ ((__always_inline__))\n-vmaxnmv_f32 (float32x2_t a)\n-{\n-  float32_t result;\n-  __asm__ (\"fmaxnmp %0.2s, %1.2s, %1.2s\" : \"=w\"(result) : \"w\"(a) : );\n-  return result;\n-}\n-\n-__extension__ static __inline float32_t __attribute__ ((__always_inline__))\n-vminnmv_f32 (float32x2_t a)\n-{\n-  float32_t result;\n-  __asm__ (\"fminnmp %0.2s, %1.2s, %1.2s\" : \"=w\"(result) : \"w\"(a) : );\n-  return result;\n-}\n-\n-__extension__ static __inline float64_t __attribute__ ((__always_inline__))\n-vmaxnmvq_f64 (float64x2_t a)\n-{\n-  float64_t result;\n-  __asm__ (\"fmaxnmp %0.2d, %1.2d, %1.2d\" : \"=w\"(result) : \"w\"(a) : );\n-  return result;\n-}\n-\n-__extension__ static __inline int32_t __attribute__ ((__always_inline__))\n-vmaxv_s32 (int32x2_t a)\n-{\n-  int32_t result;\n-  __asm__ (\"smaxp %0.2s, %1.2s, %1.2s\" : \"=w\"(result) : \"w\"(a) : );\n-  return result;\n-}\n-\n-__extension__ static __inline uint32_t __attribute__ ((__always_inline__))\n-vmaxv_u32 (uint32x2_t a)\n-{\n-  uint32_t result;\n-  __asm__ (\"umaxp %0.2s, %1.2s, %1.2s\" : \"=w\"(result) : \"w\"(a) : );\n-  return result;\n-}\n-\n-__extension__ static __inline float64_t __attribute__ ((__always_inline__))\n-vminnmvq_f64 (float64x2_t a)\n-{\n-  float64_t result;\n-  __asm__ (\"fminnmp %0.2d, %1.2d, %1.2d\" : \"=w\"(result) : \"w\"(a) : );\n-  return result;\n-}\n-\n-__extension__ static __inline int32_t __attribute__ ((__always_inline__))\n-vminv_s32 (int32x2_t a)\n-{\n-  int32_t result;\n-  __asm__ (\"sminp %0.2s, %1.2s, %1.2s\" : \"=w\"(result) : \"w\"(a) : );\n-  return result;\n-}\n-\n-__extension__ static __inline uint32_t __attribute__ ((__always_inline__))\n-vminv_u32 (uint32x2_t a)\n-{\n-  uint32_t result;\n-  __asm__ (\"uminp %0.2s, %1.2s, %1.2s\" : \"=w\"(result) : \"w\"(a) : );\n-  return result;\n-}\n-\n __extension__ static __inline int64x1_t __attribute__ ((__always_inline__))\n vpaddd_s64 (int64x2_t __a)\n {\n@@ -21637,7 +21276,145 @@ vmaxq_u32 (uint32x4_t __a, uint32x4_t __b)\n \t\t\t\t\t\t  (int32x4_t) __b);\n }\n \n-/* vmin */\n+/* vmaxnm  */\n+\n+__extension__ static __inline float32x2_t __attribute__ ((__always_inline__))\n+vmaxnm_f32 (float32x2_t __a, float32x2_t __b)\n+{\n+  return __builtin_aarch64_smaxv2sf (__a, __b);\n+}\n+\n+__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))\n+vmaxnmq_f32 (float32x4_t __a, float32x4_t __b)\n+{\n+  return __builtin_aarch64_smaxv4sf (__a, __b);\n+}\n+\n+__extension__ static __inline float64x2_t __attribute__ ((__always_inline__))\n+vmaxnmq_f64 (float64x2_t __a, float64x2_t __b)\n+{\n+  return __builtin_aarch64_smaxv2df (__a, __b);\n+}\n+\n+/* vmaxv  */\n+\n+__extension__ static __inline float32_t __attribute__ ((__always_inline__))\n+vmaxv_f32 (float32x2_t __a)\n+{\n+  return vget_lane_f32 (__builtin_aarch64_reduc_smax_nan_v2sf (__a), 0);\n+}\n+\n+__extension__ static __inline int8_t __attribute__ ((__always_inline__))\n+vmaxv_s8 (int8x8_t __a)\n+{\n+  return vget_lane_s8 (__builtin_aarch64_reduc_smax_v8qi (__a), 0);\n+}\n+\n+__extension__ static __inline int16_t __attribute__ ((__always_inline__))\n+vmaxv_s16 (int16x4_t __a)\n+{\n+  return vget_lane_s16 (__builtin_aarch64_reduc_smax_v4hi (__a), 0);\n+}\n+\n+__extension__ static __inline int32_t __attribute__ ((__always_inline__))\n+vmaxv_s32 (int32x2_t __a)\n+{\n+  return vget_lane_s32 (__builtin_aarch64_reduc_smax_v2si (__a), 0);\n+}\n+\n+__extension__ static __inline uint8_t __attribute__ ((__always_inline__))\n+vmaxv_u8 (uint8x8_t __a)\n+{\n+  return vget_lane_u8 ((uint8x8_t)\n+\t\t__builtin_aarch64_reduc_umax_v8qi ((int8x8_t) __a), 0);\n+}\n+\n+__extension__ static __inline uint16_t __attribute__ ((__always_inline__))\n+vmaxv_u16 (uint16x4_t __a)\n+{\n+  return vget_lane_u16 ((uint16x4_t)\n+\t\t__builtin_aarch64_reduc_umax_v4hi ((int16x4_t) __a), 0);\n+}\n+\n+__extension__ static __inline uint32_t __attribute__ ((__always_inline__))\n+vmaxv_u32 (uint32x2_t __a)\n+{\n+  return vget_lane_u32 ((uint32x2_t)\n+\t\t__builtin_aarch64_reduc_umax_v2si ((int32x2_t) __a), 0);\n+}\n+\n+__extension__ static __inline float32_t __attribute__ ((__always_inline__))\n+vmaxvq_f32 (float32x4_t __a)\n+{\n+  return vgetq_lane_f32 (__builtin_aarch64_reduc_smax_nan_v4sf (__a), 0);\n+}\n+\n+__extension__ static __inline float64_t __attribute__ ((__always_inline__))\n+vmaxvq_f64 (float64x2_t __a)\n+{\n+  return vgetq_lane_f64 (__builtin_aarch64_reduc_smax_nan_v2df (__a), 0);\n+}\n+\n+__extension__ static __inline int8_t __attribute__ ((__always_inline__))\n+vmaxvq_s8 (int8x16_t __a)\n+{\n+  return vgetq_lane_s8 (__builtin_aarch64_reduc_smax_v16qi (__a), 0);\n+}\n+\n+__extension__ static __inline int16_t __attribute__ ((__always_inline__))\n+vmaxvq_s16 (int16x8_t __a)\n+{\n+  return vgetq_lane_s16 (__builtin_aarch64_reduc_smax_v8hi (__a), 0);\n+}\n+\n+__extension__ static __inline int32_t __attribute__ ((__always_inline__))\n+vmaxvq_s32 (int32x4_t __a)\n+{\n+  return vgetq_lane_s32 (__builtin_aarch64_reduc_smax_v4si (__a), 0);\n+}\n+\n+__extension__ static __inline uint8_t __attribute__ ((__always_inline__))\n+vmaxvq_u8 (uint8x16_t __a)\n+{\n+  return vgetq_lane_u8 ((uint8x16_t)\n+\t\t__builtin_aarch64_reduc_umax_v16qi ((int8x16_t) __a), 0);\n+}\n+\n+__extension__ static __inline uint16_t __attribute__ ((__always_inline__))\n+vmaxvq_u16 (uint16x8_t __a)\n+{\n+  return vgetq_lane_u16 ((uint16x8_t)\n+\t\t__builtin_aarch64_reduc_umax_v8hi ((int16x8_t) __a), 0);\n+}\n+\n+__extension__ static __inline uint32_t __attribute__ ((__always_inline__))\n+vmaxvq_u32 (uint32x4_t __a)\n+{\n+  return vgetq_lane_u32 ((uint32x4_t)\n+\t\t__builtin_aarch64_reduc_umax_v4si ((int32x4_t) __a), 0);\n+}\n+\n+/* vmaxnmv  */\n+\n+__extension__ static __inline float32_t __attribute__ ((__always_inline__))\n+vmaxnmv_f32 (float32x2_t __a)\n+{\n+  return vget_lane_f32 (__builtin_aarch64_reduc_smax_v2sf (__a), 0);\n+}\n+\n+__extension__ static __inline float32_t __attribute__ ((__always_inline__))\n+vmaxnmvq_f32 (float32x4_t __a)\n+{\n+  return vgetq_lane_f32 (__builtin_aarch64_reduc_smax_v4sf (__a), 0);\n+}\n+\n+__extension__ static __inline float64_t __attribute__ ((__always_inline__))\n+vmaxnmvq_f64 (float64x2_t __a)\n+{\n+  return vgetq_lane_f64 (__builtin_aarch64_reduc_smax_v2df (__a), 0);\n+}\n+\n+/* vmin  */\n \n __extension__ static __inline float32x2_t __attribute__ ((__always_inline__))\n vmin_f32 (float32x2_t __a, float32x2_t __b)\n@@ -21735,6 +21512,144 @@ vminq_u32 (uint32x4_t __a, uint32x4_t __b)\n \t\t\t\t\t\t  (int32x4_t) __b);\n }\n \n+/* vminnm  */\n+\n+__extension__ static __inline float32x2_t __attribute__ ((__always_inline__))\n+vminnm_f32 (float32x2_t __a, float32x2_t __b)\n+{\n+  return __builtin_aarch64_sminv2sf (__a, __b);\n+}\n+\n+__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))\n+vminnmq_f32 (float32x4_t __a, float32x4_t __b)\n+{\n+  return __builtin_aarch64_sminv4sf (__a, __b);\n+}\n+\n+__extension__ static __inline float64x2_t __attribute__ ((__always_inline__))\n+vminnmq_f64 (float64x2_t __a, float64x2_t __b)\n+{\n+  return __builtin_aarch64_sminv2df (__a, __b);\n+}\n+\n+/* vminv  */\n+\n+__extension__ static __inline float32_t __attribute__ ((__always_inline__))\n+vminv_f32 (float32x2_t __a)\n+{\n+  return vget_lane_f32 (__builtin_aarch64_reduc_smin_nan_v2sf (__a), 0);\n+}\n+\n+__extension__ static __inline int8_t __attribute__ ((__always_inline__))\n+vminv_s8 (int8x8_t __a)\n+{\n+  return vget_lane_s8 (__builtin_aarch64_reduc_smin_v8qi (__a), 0);\n+}\n+\n+__extension__ static __inline int16_t __attribute__ ((__always_inline__))\n+vminv_s16 (int16x4_t __a)\n+{\n+  return vget_lane_s16 (__builtin_aarch64_reduc_smin_v4hi (__a), 0);\n+}\n+\n+__extension__ static __inline int32_t __attribute__ ((__always_inline__))\n+vminv_s32 (int32x2_t __a)\n+{\n+  return vget_lane_s32 (__builtin_aarch64_reduc_smin_v2si (__a), 0);\n+}\n+\n+__extension__ static __inline uint8_t __attribute__ ((__always_inline__))\n+vminv_u8 (uint8x8_t __a)\n+{\n+  return vget_lane_u8 ((uint8x8_t)\n+\t\t__builtin_aarch64_reduc_umin_v8qi ((int8x8_t) __a), 0);\n+}\n+\n+__extension__ static __inline uint16_t __attribute__ ((__always_inline__))\n+vminv_u16 (uint16x4_t __a)\n+{\n+  return vget_lane_u16 ((uint16x4_t)\n+\t\t__builtin_aarch64_reduc_umin_v4hi ((int16x4_t) __a), 0);\n+}\n+\n+__extension__ static __inline uint32_t __attribute__ ((__always_inline__))\n+vminv_u32 (uint32x2_t __a)\n+{\n+  return vget_lane_u32 ((uint32x2_t)\n+\t\t__builtin_aarch64_reduc_umin_v2si ((int32x2_t) __a), 0);\n+}\n+\n+__extension__ static __inline float32_t __attribute__ ((__always_inline__))\n+vminvq_f32 (float32x4_t __a)\n+{\n+  return vgetq_lane_f32 (__builtin_aarch64_reduc_smin_nan_v4sf (__a), 0);\n+}\n+\n+__extension__ static __inline float64_t __attribute__ ((__always_inline__))\n+vminvq_f64 (float64x2_t __a)\n+{\n+  return vgetq_lane_f64 (__builtin_aarch64_reduc_smin_nan_v2df (__a), 0);\n+}\n+\n+__extension__ static __inline int8_t __attribute__ ((__always_inline__))\n+vminvq_s8 (int8x16_t __a)\n+{\n+  return vgetq_lane_s8 (__builtin_aarch64_reduc_smin_v16qi (__a), 0);\n+}\n+\n+__extension__ static __inline int16_t __attribute__ ((__always_inline__))\n+vminvq_s16 (int16x8_t __a)\n+{\n+  return vgetq_lane_s16 (__builtin_aarch64_reduc_smin_v8hi (__a), 0);\n+}\n+\n+__extension__ static __inline int32_t __attribute__ ((__always_inline__))\n+vminvq_s32 (int32x4_t __a)\n+{\n+  return vgetq_lane_s32 (__builtin_aarch64_reduc_smin_v4si (__a), 0);\n+}\n+\n+__extension__ static __inline uint8_t __attribute__ ((__always_inline__))\n+vminvq_u8 (uint8x16_t __a)\n+{\n+  return vgetq_lane_u8 ((uint8x16_t)\n+\t\t__builtin_aarch64_reduc_umin_v16qi ((int8x16_t) __a), 0);\n+}\n+\n+__extension__ static __inline uint16_t __attribute__ ((__always_inline__))\n+vminvq_u16 (uint16x8_t __a)\n+{\n+  return vgetq_lane_u16 ((uint16x8_t)\n+\t\t__builtin_aarch64_reduc_umin_v8hi ((int16x8_t) __a), 0);\n+}\n+\n+__extension__ static __inline uint32_t __attribute__ ((__always_inline__))\n+vminvq_u32 (uint32x4_t __a)\n+{\n+  return vgetq_lane_u32 ((uint32x4_t)\n+\t\t__builtin_aarch64_reduc_umin_v4si ((int32x4_t) __a), 0);\n+}\n+\n+/* vminnmv  */\n+\n+__extension__ static __inline float32_t __attribute__ ((__always_inline__))\n+vminnmv_f32 (float32x2_t __a)\n+{\n+  return vget_lane_f32 (__builtin_aarch64_reduc_smin_v2sf (__a), 0);\n+}\n+\n+__extension__ static __inline float32_t __attribute__ ((__always_inline__))\n+vminnmvq_f32 (float32x4_t __a)\n+{\n+  return vgetq_lane_f32 (__builtin_aarch64_reduc_smin_v4sf (__a), 0);\n+}\n+\n+__extension__ static __inline float64_t __attribute__ ((__always_inline__))\n+vminnmvq_f64 (float64x2_t __a)\n+{\n+  return vgetq_lane_f64 (__builtin_aarch64_reduc_smin_v2df (__a), 0);\n+}\n+\n /* vmla */\n \n __extension__ static __inline float32x2_t __attribute__ ((__always_inline__))"}, {"sha": "0574267d979d6b18f2293d2a888ccff06c8eb4e4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dce23a8ae9579e12e73201802ef553c13c4f023/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dce23a8ae9579e12e73201802ef553c13c4f023/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6dce23a8ae9579e12e73201802ef553c13c4f023", "patch": "@@ -1,3 +1,8 @@\n+2013-05-01  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\t* gcc.target/aarch64/vect-vmaxv.c: New.\n+\t* gcc.target/aarch64/vect-vfmaxv.c: Likewise.\n+\n 2013-05-01  James Greenhalgh  <james.greenhalgh@arm.com>\n \n \t* gcc.target/aarch64/scalar-vca.c: New."}, {"sha": "58a57a118a4f28c861d9c380093698b6e96389c7", "filename": "gcc/testsuite/gcc.target/aarch64/vect-vfmaxv.c", "status": "added", "additions": 169, "deletions": 0, "changes": 169, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dce23a8ae9579e12e73201802ef553c13c4f023/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-vfmaxv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dce23a8ae9579e12e73201802ef553c13c4f023/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-vfmaxv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-vfmaxv.c?ref=6dce23a8ae9579e12e73201802ef553c13c4f023", "patch": "@@ -0,0 +1,169 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 --save-temps -ffast-math\" } */\n+\n+#include <arm_neon.h>\n+\n+extern void abort (void);\n+\n+extern float fabsf (float);\n+extern double fabs (double);\n+extern int isnan (double);\n+extern float fmaxf (float, float);\n+extern float fminf (float, float);\n+extern double fmax (double, double);\n+extern double fmin (double, double);\n+\n+#define NUM_TESTS 16\n+#define DELTA 0.000001\n+#define NAN (0.0 / 0.0)\n+\n+float input_float32[] = {0.1f, -0.1f, 0.4f, 10.3f,\n+\t\t\t 200.0f, -800.0f, -13.0f, -0.5f,\n+\t\t\t NAN, -870.0f, 10.4f, 310.11f,\n+\t\t\t 0.0f, -865.0f, -2213.0f, -1.5f};\n+\n+double input_float64[] = {0.1, -0.1, 0.4, 10.3,\n+\t\t\t  200.0, -800.0, -13.0, -0.5,\n+\t\t\t  NAN, -870.0, 10.4, 310.11,\n+\t\t\t  0.0, -865.0, -2213.0, -1.5};\n+\n+#define EQUALF(a, b) (fabsf (a - b) < DELTA)\n+#define EQUALD(a, b) (fabs (a - b) < DELTA)\n+\n+/* Floating point 'unordered' variants.  */\n+\n+#undef TEST\n+#define TEST(MAXMIN, CMP_OP, SUFFIX, Q, TYPE, LANES, FLOAT)\t\t\\\n+int\t\t\t\t\t\t\t\t\t\\\n+test_v##MAXMIN##v##SUFFIX##_##TYPE##x##LANES##_t (void)\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  int i, j;\t\t\t\t\t\t\t\t\\\n+  int moves = (NUM_TESTS - LANES) + 1;\t\t\t\t\t\\\n+  TYPE##_t out_l[NUM_TESTS];\t\t\t\t\t\t\\\n+  TYPE##_t out_v[NUM_TESTS];\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  /* Calculate linearly.  */\t\t\t\t\t\t\\\n+  for (i = 0; i < moves; i++)\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      out_l[i] = input_##TYPE[i];\t\t\t\t\t\\\n+      for (j = 0; j < LANES; j++)\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\t\\\n+\t  if (isnan (out_l[i]))\t\t\t\t\t\t\\\n+\t    continue;\t\t\t\t\t\t\t\\\n+\t  if (isnan (input_##TYPE[i + j])\t\t\t\t\\\n+\t      || input_##TYPE[i + j] CMP_OP out_l[i])\t\t\t\\\n+\t    out_l[i] = input_##TYPE[i + j];\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  /* Calculate using vector reduction intrinsics.  */\t\t\t\\\n+  for (i = 0; i < moves; i++)\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      TYPE##x##LANES##_t t1 = vld1##Q##_##SUFFIX (input_##TYPE + i);\t\\\n+      out_v[i] = v##MAXMIN##v##Q##_##SUFFIX (t1);\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  /* Compare.  */\t\t\t\t\t\t\t\\\n+  for (i = 0; i < moves; i++)\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      if (!EQUAL##FLOAT (out_v[i], out_l[i])\t\t\t\t\\\n+\t\t\t && !(isnan (out_v[i]) && isnan (out_l[i])))\t\\\n+\treturn 0;\t\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  return 1;\t\t\t\t\t\t\t\t\\\n+}\n+\n+#define BUILD_VARIANTS(TYPE, STYPE, W32, W64, F)\t\\\n+TEST (max, >, STYPE,  , TYPE, W32, F)\t\t\t\\\n+TEST (max, >, STYPE, q, TYPE, W64, F)\t\t\t\\\n+TEST (min, <, STYPE,  , TYPE, W32, F)\t\t\t\\\n+TEST (min, <, STYPE, q, TYPE, W64, F)\n+\n+BUILD_VARIANTS (float32, f32, 2, 4, F)\n+/* { dg-final { scan-assembler \"fmaxp\\\\ts\\[0-9\\]+, v\\[0-9\\]+\\.2s\" } } */\n+/* { dg-final { scan-assembler \"fminp\\\\ts\\[0-9\\]+, v\\[0-9\\]+\\.2s\" } } */\n+/* { dg-final { scan-assembler \"fmaxv\\\\ts\\[0-9\\]+, v\\[0-9\\]+\\.4s\" } } */\n+/* { dg-final { scan-assembler \"fminv\\\\ts\\[0-9\\]+, v\\[0-9\\]+\\.4s\" } } */\n+TEST (max, >, f64, q, float64, 2, D)\n+/* { dg-final { scan-assembler \"fmaxp\\\\td\\[0-9\\]+, v\\[0-9\\]+\\.2d\" } } */\n+TEST (min, <, f64, q, float64, 2, D)\n+/* { dg-final { scan-assembler \"fminp\\\\td\\[0-9\\]+, v\\[0-9\\]+\\.2d\" } } */\n+\n+/* Floating point 'nm' variants.  */\n+\n+#undef TEST\n+#define TEST(MAXMIN, F, SUFFIX, Q, TYPE, LANES, FLOAT)\t\t\t\\\n+int\t\t\t\t\t\t\t\t\t\\\n+test_v##MAXMIN##nmv##SUFFIX##_##TYPE##x##LANES##_t (void)\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  int i, j;\t\t\t\t\t\t\t\t\\\n+  int moves = (NUM_TESTS - LANES) + 1;\t\t\t\t\t\\\n+  TYPE##_t out_l[NUM_TESTS];\t\t\t\t\t\t\\\n+  TYPE##_t out_v[NUM_TESTS];\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  /* Calculate linearly.  */\t\t\t\t\t\t\\\n+  for (i = 0; i < moves; i++)\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      out_l[i] = input_##TYPE[i];\t\t\t\t\t\\\n+      for (j = 0; j < LANES; j++)\t\t\t\t\t\\\n+\tout_l[i] = f##MAXMIN##F (input_##TYPE[i + j],  out_l[i]);\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  /* Calculate using vector reduction intrinsics.  */\t\t\t\\\n+  for (i = 0; i < moves; i++)\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      TYPE##x##LANES##_t t1 = vld1##Q##_##SUFFIX (input_##TYPE + i);\t\\\n+      out_v[i] = v##MAXMIN##nmv##Q##_##SUFFIX (t1);\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  /* Compare.  */\t\t\t\t\t\t\t\\\n+  for (i = 0; i < moves; i++)\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      if (!EQUAL##FLOAT (out_v[i], out_l[i]))\t\t\t\t\\\n+\treturn 0;\t\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  return 1;\t\t\t\t\t\t\t\t\\\n+}\n+\n+TEST (max, f, f32, , float32, 2, D)\n+/* { dg-final { scan-assembler \"fmaxnmp\\\\ts\\[0-9\\]+, v\\[0-9\\]+\\.2s\" } } */\n+TEST (min, f, f32, , float32, 2, D)\n+/* { dg-final { scan-assembler \"fminnmp\\\\ts\\[0-9\\]+, v\\[0-9\\]+\\.2s\" } } */\n+TEST (max, f, f32, q, float32, 4, D)\n+/* { dg-final { scan-assembler \"fmaxnmv\\\\ts\\[0-9\\]+, v\\[0-9\\]+\\.4s\" } } */\n+TEST (min, f, f32, q, float32, 4, D)\n+/* { dg-final { scan-assembler \"fminnmv\\\\ts\\[0-9\\]+, v\\[0-9\\]+\\.4s\" } } */\n+TEST (max, , f64, q, float64, 2, D)\n+/* { dg-final { scan-assembler \"fmaxnmp\\\\td\\[0-9\\]+, v\\[0-9\\]+\\.2d\" } } */\n+TEST (min, , f64, q, float64, 2, D)\n+/* { dg-final { scan-assembler \"fminnmp\\\\td\\[0-9\\]+, v\\[0-9\\]+\\.2d\" } } */\n+\n+#undef TEST\n+#define TEST(MAXMIN, CMP_OP, SUFFIX, Q, TYPE, LANES, FLOAT)\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  if (!test_v##MAXMIN##v##SUFFIX##_##TYPE##x##LANES##_t ())\t\t\\\n+    abort ();\t\t\t\t\t\t\t\t\\\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  BUILD_VARIANTS (float32, f32, 2, 4, F)\n+  TEST (max, >, f64, q, float64, 2, D)\n+  TEST (min, <, f64, q, float64, 2, D)\n+\n+#undef TEST\n+#define TEST(MAXMIN, CMP_OP, SUFFIX, Q, TYPE, LANES, FLOAT)\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  if (!test_v##MAXMIN##nmv##SUFFIX##_##TYPE##x##LANES##_t ())\t\t\\\n+    abort ();\t\t\t\t\t\t\t\t\\\n+}\n+\n+  BUILD_VARIANTS (float32, f32, 2, 4, F)\n+  TEST (max, >, f64, q, float64, 2, D)\n+  TEST (min, <, f64, q, float64, 2, D)\n+\n+  return 0;\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "212e13300b6dd39ca79a588a3c5ac8a1a6e66dff", "filename": "gcc/testsuite/gcc.target/aarch64/vect-vmaxv.c", "status": "added", "additions": 117, "deletions": 0, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dce23a8ae9579e12e73201802ef553c13c4f023/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-vmaxv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dce23a8ae9579e12e73201802ef553c13c4f023/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-vmaxv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-vmaxv.c?ref=6dce23a8ae9579e12e73201802ef553c13c4f023", "patch": "@@ -0,0 +1,117 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 --save-temps -ffast-math\" } */\n+\n+#include <arm_neon.h>\n+\n+extern void abort (void);\n+\n+#define NUM_TESTS 16\n+#define DELTA 0.000001\n+\n+int8_t input_int8[] = {1, 56, 2, -9, -90, 23, 54, 76,\n+\t\t       -4, 34, 110, -110, 6, 4, 75, -34};\n+int16_t input_int16[] = {1, 56, 2, -9, -90, 23, 54, 76,\n+\t\t\t -4, 34, 110, -110, 6, 4, 75, -34};\n+int32_t input_int32[] = {1, 56, 2, -9, -90, 23, 54, 76,\n+\t\t\t -4, 34, 110, -110, 6, 4, 75, -34};\n+\n+uint8_t input_uint8[] = {1, 56, 2, 9, 90, 23, 54, 76,\n+\t\t\t 4, 34, 110, 110, 6, 4, 75, 34};\n+uint16_t input_uint16[] = {1, 56, 2, 9, 90, 23, 54, 76,\n+\t\t\t   4, 34, 110, 110, 6, 4, 75, 34};\n+uint32_t input_uint32[] = {1, 56, 2, 9, 90, 23, 54, 76,\n+\t\t\t   4, 34, 110, 110, 6, 4, 75, 34};\n+\n+#define EQUAL(a, b) (a == b)\n+\n+#define TEST(MAXMIN, CMP_OP, SUFFIX, Q, TYPE, LANES)\t\t\t\\\n+int\t\t\t\t\t\t\t\t\t\\\n+test_v##MAXMIN##v##SUFFIX##_##TYPE##x##LANES##_t (void)\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  int i, j;\t\t\t\t\t\t\t\t\\\n+  int moves = (NUM_TESTS - LANES) + 1;\t\t\t\t\t\\\n+  TYPE##_t out_l[NUM_TESTS];\t\t\t\t\t\t\\\n+  TYPE##_t out_v[NUM_TESTS];\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  /* Calculate linearly.  */\t\t\t\t\t\t\\\n+  for (i = 0; i < moves; i++)\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      out_l[i] = input_##TYPE[i];\t\t\t\t\t\\\n+      for (j = 0; j < LANES; j++)\t\t\t\t\t\\\n+\tout_l[i] = input_##TYPE[i + j] CMP_OP out_l[i]  ?\t\t\\\n+\t  input_##TYPE[i + j] : out_l[i];\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  /* Calculate using vector reduction intrinsics.  */\t\t\t\\\n+  for (i = 0; i < moves; i++)\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      TYPE##x##LANES##_t t1 = vld1##Q##_##SUFFIX (input_##TYPE + i);\t\\\n+      out_v[i] = v##MAXMIN##v##Q##_##SUFFIX (t1);\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  /* Compare.  */\t\t\t\t\t\t\t\\\n+  for (i = 0; i < moves; i++)\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      if (!EQUAL (out_v[i], out_l[i]))\t\t\t\t\t\\\n+\treturn 0;\t\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  return 1;\t\t\t\t\t\t\t\t\\\n+}\n+\n+#define BUILD_VARIANTS(TYPE, STYPE, W32, W64)\t\t\\\n+TEST (max, >, STYPE,  , TYPE, W32)\t\t\t\\\n+TEST (max, >, STYPE, q, TYPE, W64)\t\t\t\\\n+TEST (min, <, STYPE,  , TYPE, W32)\t\t\t\\\n+TEST (min, <, STYPE, q, TYPE, W64)\n+\n+BUILD_VARIANTS (int8, s8, 8, 16)\n+/* { dg-final { scan-assembler \"smaxv\\\\tb\\[0-9\\]+, v\\[0-9\\]+\\.8b\" } } */\n+/* { dg-final { scan-assembler \"sminv\\\\tb\\[0-9\\]+, v\\[0-9\\]+\\.8b\" } } */\n+/* { dg-final { scan-assembler \"smaxv\\\\tb\\[0-9\\]+, v\\[0-9\\]+\\.16b\" } } */\n+/* { dg-final { scan-assembler \"sminv\\\\tb\\[0-9\\]+, v\\[0-9\\]+\\.16b\" } } */\n+BUILD_VARIANTS (uint8, u8, 8, 16)\n+/* { dg-final { scan-assembler \"umaxv\\\\tb\\[0-9\\]+, v\\[0-9\\]+\\.8b\" } } */\n+/* { dg-final { scan-assembler \"uminv\\\\tb\\[0-9\\]+, v\\[0-9\\]+\\.8b\" } } */\n+/* { dg-final { scan-assembler \"umaxv\\\\tb\\[0-9\\]+, v\\[0-9\\]+\\.16b\" } } */\n+/* { dg-final { scan-assembler \"uminv\\\\tb\\[0-9\\]+, v\\[0-9\\]+\\.16b\" } } */\n+BUILD_VARIANTS (int16, s16, 4, 8)\n+/* { dg-final { scan-assembler \"smaxv\\\\th\\[0-9\\]+, v\\[0-9\\]+\\.4h\" } } */\n+/* { dg-final { scan-assembler \"sminv\\\\th\\[0-9\\]+, v\\[0-9\\]+\\.4h\" } } */\n+/* { dg-final { scan-assembler \"smaxv\\\\th\\[0-9\\]+, v\\[0-9\\]+\\.8h\" } } */\n+/* { dg-final { scan-assembler \"sminv\\\\th\\[0-9\\]+, v\\[0-9\\]+\\.8h\" } } */\n+BUILD_VARIANTS (uint16, u16, 4, 8)\n+/* { dg-final { scan-assembler \"umaxv\\\\th\\[0-9\\]+, v\\[0-9\\]+\\.4h\" } } */\n+/* { dg-final { scan-assembler \"uminv\\\\th\\[0-9\\]+, v\\[0-9\\]+\\.4h\" } } */\n+/* { dg-final { scan-assembler \"umaxv\\\\th\\[0-9\\]+, v\\[0-9\\]+\\.8h\" } } */\n+/* { dg-final { scan-assembler \"uminv\\\\th\\[0-9\\]+, v\\[0-9\\]+\\.8h\" } } */\n+BUILD_VARIANTS (int32, s32, 2, 4)\n+/* { dg-final { scan-assembler \"smaxp\\\\tv\\[0-9\\]+\\.2s, v\\[0-9\\]+\\.2s, v\\[0-9\\]+\\.2s\" } } */\n+/* { dg-final { scan-assembler \"sminp\\\\tv\\[0-9\\]+\\.2s, v\\[0-9\\]+\\.2s, v\\[0-9\\]+\\.2s\" } } */\n+/* { dg-final { scan-assembler \"smaxv\\\\ts\\[0-9\\]+, v\\[0-9\\]+\\.4s\" } } */\n+/* { dg-final { scan-assembler \"sminv\\\\ts\\[0-9\\]+, v\\[0-9\\]+\\.4s\" } } */\n+BUILD_VARIANTS (uint32, u32, 2, 4)\n+/* { dg-final { scan-assembler \"umaxp\\\\tv\\[0-9\\]+\\.2s, v\\[0-9\\]+\\.2s, v\\[0-9\\]+\\.2s\" } } */\n+/* { dg-final { scan-assembler \"uminp\\\\tv\\[0-9\\]+\\.2s, v\\[0-9\\]+\\.2s, v\\[0-9\\]+\\.2s\" } } */\n+/* { dg-final { scan-assembler \"umaxv\\\\ts\\[0-9\\]+, v\\[0-9\\]+\\.4s\" } } */\n+/* { dg-final { scan-assembler \"uminv\\\\ts\\[0-9\\]+, v\\[0-9\\]+\\.4s\" } } */\n+\n+#undef TEST\n+#define TEST(MAXMIN, CMP_OP, SUFFIX, Q, TYPE, LANES)\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  if (!test_v##MAXMIN##v##SUFFIX##_##TYPE##x##LANES##_t ())\t\\\n+    abort ();\t\t\t\t\t\t\t\\\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  BUILD_VARIANTS (int8, s8, 8, 16)\n+  BUILD_VARIANTS (uint8, u8, 8, 16)\n+  BUILD_VARIANTS (int16, s16, 4, 8)\n+  BUILD_VARIANTS (uint16, u16, 4, 8)\n+  BUILD_VARIANTS (int32, s32, 2, 4)\n+  BUILD_VARIANTS (uint32, u32, 2, 4)\n+  return 0;\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}]}