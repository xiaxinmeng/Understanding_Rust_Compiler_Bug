{"sha": "215355d302d8602c7eeefb9c927a3dbb221714c8", "node_id": "C_kwDOANBUbNoAKDIxNTM1NWQzMDJkODYwMmM3ZWVlZmI5YzkyN2EzZGJiMjIxNzE0Yzg", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-11-06T19:38:42Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-11-08T15:10:10Z"}, "message": "CCP: handle division by a power of 2 as a right shift.\n\nWe have some code in range-ops that sets better maybe nonzero bits for\nTRUNC_DIV_EXPR by a power of 2 than CCP does, by just shifting the\nmask.  I'd like to offload this functionality into the CCP mask\ntracking code, which already does the right thing for right shifts.\n\nThe testcase for this change is gcc.dg/tree-ssa/vrp123.c and\ngcc.dg/tree-ssa/pr107541.c.\n\ngcc/ChangeLog:\n\n\t* range-op.cc (operator_div::fold_range): Call\n\tupdate_known_bitmask.\n\t* tree-ssa-ccp.cc (bit_value_binop): Handle divisions by powers of\n\t2 as a right shift.", "tree": {"sha": "6e26101f73122dba6f403975dbe65e5db6533fe1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6e26101f73122dba6f403975dbe65e5db6533fe1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/215355d302d8602c7eeefb9c927a3dbb221714c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/215355d302d8602c7eeefb9c927a3dbb221714c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/215355d302d8602c7eeefb9c927a3dbb221714c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/215355d302d8602c7eeefb9c927a3dbb221714c8/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb0a2b1f28cf0c231bf38fcd02c40689739df7bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb0a2b1f28cf0c231bf38fcd02c40689739df7bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb0a2b1f28cf0c231bf38fcd02c40689739df7bb"}], "stats": {"total": 30, "additions": 13, "deletions": 17}, "files": [{"sha": "8ff5d5b4c7892338537df0d045393fafce5d7ef7", "filename": "gcc/range-op.cc", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/215355d302d8602c7eeefb9c927a3dbb221714c8/gcc%2Frange-op.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/215355d302d8602c7eeefb9c927a3dbb221714c8/gcc%2Frange-op.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frange-op.cc?ref=215355d302d8602c7eeefb9c927a3dbb221714c8", "patch": "@@ -1995,23 +1995,7 @@ operator_div::fold_range (irange &r, tree type,\n   if (!cross_product_operator::fold_range (r, type, lh, rh, trio))\n     return false;\n \n-  if (lh.undefined_p ())\n-    return true;\n-\n-  tree t;\n-  if (code == TRUNC_DIV_EXPR\n-      && rh.singleton_p (&t)\n-      && !wi::neg_p (lh.lower_bound ()))\n-    {\n-      wide_int wi = wi::to_wide (t);\n-      int shift = wi::exact_log2 (wi);\n-      if (shift != -1)\n-\t{\n-\t  wide_int nz = lh.get_nonzero_bits ();\n-\t  nz = wi::rshift (nz, shift, TYPE_SIGN (type));\n-\t  r.set_nonzero_bits (nz);\n-\t}\n-    }\n+  update_known_bitmask (r, code, lh, rh);\n   return true;\n }\n "}, {"sha": "2bcd90646f63063b854ea417d7eb5a12e6ef81c3", "filename": "gcc/tree-ssa-ccp.cc", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/215355d302d8602c7eeefb9c927a3dbb221714c8/gcc%2Ftree-ssa-ccp.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/215355d302d8602c7eeefb9c927a3dbb221714c8/gcc%2Ftree-ssa-ccp.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.cc?ref=215355d302d8602c7eeefb9c927a3dbb221714c8", "patch": "@@ -1934,6 +1934,18 @@ bit_value_binop (enum tree_code code, signop sgn, int width,\n       {\n \twidest_int r1max = r1val | r1mask;\n \twidest_int r2max = r2val | r2mask;\n+\tif (r2mask == 0 && !wi::neg_p (r1max))\n+\t  {\n+\t    widest_int shift = wi::exact_log2 (r2val);\n+\t    if (shift != -1)\n+\t      {\n+\t\t// Handle division by a power of 2 as an rshift.\n+\t\tbit_value_binop (RSHIFT_EXPR, sgn, width, val, mask,\n+\t\t\t\t r1type_sgn, r1type_precision, r1val, r1mask,\n+\t\t\t\t r2type_sgn, r2type_precision, shift, r2mask);\n+\t\treturn;\n+\t      }\n+\t  }\n \tif (sgn == UNSIGNED\n \t    || (!wi::neg_p (r1max) && !wi::neg_p (r2max)))\n \t  {"}]}