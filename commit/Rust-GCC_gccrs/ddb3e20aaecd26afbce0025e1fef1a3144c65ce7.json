{"sha": "ddb3e20aaecd26afbce0025e1fef1a3144c65ce7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGRiM2UyMGFhZWNkMjZhZmJjZTAwMjVlMWZlZjFhMzE0NGM2NWNlNw==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2014-02-07T02:28:33Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2014-02-07T02:28:33Z"}, "message": "re PR ipa/59469 (LLVM build failure with gcc LTO)\n\n\n\tPR ipa/59469\n\t* lto-cgraph.c (lto_output_node): Use\n\tsymtab_get_symbol_partitioning_class.\n\t(lto_output_varpool_node): likewise.\n\t(symtab_get_symbol_partitioning_class): Move here from\n\tlto/lto-partition.c\n\t* cgraph.h (symbol_partitioning_class): Likewise.\n\t(symtab_get_symbol_partitioning_class): Declare.\n\nFrom-SVN: r207591", "tree": {"sha": "9636ee869b6ae372017b8dc4b9570c5b950a6be6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9636ee869b6ae372017b8dc4b9570c5b950a6be6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ddb3e20aaecd26afbce0025e1fef1a3144c65ce7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddb3e20aaecd26afbce0025e1fef1a3144c65ce7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ddb3e20aaecd26afbce0025e1fef1a3144c65ce7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddb3e20aaecd26afbce0025e1fef1a3144c65ce7/comments", "author": null, "committer": null, "parents": [{"sha": "3c0f1105e1c9ada1cd0e40a510d65a138b3cdaa6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c0f1105e1c9ada1cd0e40a510d65a138b3cdaa6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c0f1105e1c9ada1cd0e40a510d65a138b3cdaa6"}], "stats": {"total": 51, "additions": 51, "deletions": 0}, "files": [{"sha": "5d698033ca6cb08f6eeafa0b177530c15af43cd9", "filename": "gcc/symtab.c", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddb3e20aaecd26afbce0025e1fef1a3144c65ce7/gcc%2Fsymtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddb3e20aaecd26afbce0025e1fef1a3144c65ce7/gcc%2Fsymtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsymtab.c?ref=ddb3e20aaecd26afbce0025e1fef1a3144c65ce7", "patch": "@@ -1267,4 +1267,55 @@ symtab_semantically_equivalent_p (symtab_node *a,\n     bb = b;\n   return bb == ba;\n }\n+\n+/* Classify symbol NODE for partitioning.  */\n+\n+enum symbol_partitioning_class\n+symtab_get_symbol_partitioning_class (symtab_node *node)\n+{\n+  /* Inline clones are always duplicated.\n+     This include external delcarations.   */\n+  cgraph_node *cnode = dyn_cast <cgraph_node> (node);\n+\n+  if (DECL_ABSTRACT (node->decl))\n+    return SYMBOL_EXTERNAL;\n+\n+  if (cnode && cnode->global.inlined_to)\n+    return SYMBOL_DUPLICATE;\n+\n+  /* Weakref aliases are always duplicated.  */\n+  if (node->weakref)\n+    return SYMBOL_DUPLICATE;\n+\n+  /* External declarations are external.  */\n+  if (DECL_EXTERNAL (node->decl))\n+    return SYMBOL_EXTERNAL;\n+\n+  if (varpool_node *vnode = dyn_cast <varpool_node> (node))\n+    {\n+      /* Constant pool references use local symbol names that can not\n+         be promoted global.  We should never put into a constant pool\n+         objects that can not be duplicated across partitions.  */\n+      if (DECL_IN_CONSTANT_POOL (node->decl))\n+\treturn SYMBOL_DUPLICATE;\n+      gcc_checking_assert (vnode->definition);\n+    }\n+  /* Functions that are cloned may stay in callgraph even if they are unused.\n+     Handle them as external; compute_ltrans_boundary take care to make\n+     proper things to happen (i.e. to make them appear in the boundary but\n+     with body streamed, so clone can me materialized).  */\n+  else if (!cgraph (node)->definition)\n+    return SYMBOL_EXTERNAL;\n+\n+  /* Linker discardable symbols are duplicated to every use unless they are\n+     keyed.\n+     Keyed symbols or those.  */\n+  if (DECL_ONE_ONLY (node->decl)\n+      && !node->force_output\n+      && !node->forced_by_abi\n+      && !symtab_used_from_object_file_p (node))\n+    return SYMBOL_DUPLICATE;\n+\n+  return SYMBOL_PARTITION;\n+}\n #include \"gt-symtab.h\""}]}