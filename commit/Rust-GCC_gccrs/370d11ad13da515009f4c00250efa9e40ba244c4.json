{"sha": "370d11ad13da515009f4c00250efa9e40ba244c4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzcwZDExYWQxM2RhNTE1MDA5ZjRjMDAyNTBlZmE5ZTQwYmEyNDRjNA==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2004-03-04T02:05:56Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2004-03-04T02:05:56Z"}, "message": "Undo accidentally commited garbage.\n\nFrom-SVN: r78877", "tree": {"sha": "929f7bbcb396f6215d6eb2da6ff8a29d26a7e5b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/929f7bbcb396f6215d6eb2da6ff8a29d26a7e5b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/370d11ad13da515009f4c00250efa9e40ba244c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/370d11ad13da515009f4c00250efa9e40ba244c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/370d11ad13da515009f4c00250efa9e40ba244c4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/370d11ad13da515009f4c00250efa9e40ba244c4/comments", "author": null, "committer": null, "parents": [{"sha": "e654c19ec15e3359db67bf8e3da9f9932fe7331c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e654c19ec15e3359db67bf8e3da9f9932fe7331c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e654c19ec15e3359db67bf8e3da9f9932fe7331c"}], "stats": {"total": 21, "additions": 4, "deletions": 17}, "files": [{"sha": "31a6d70a4bb0355c043a017f499a0f2b9517246e", "filename": "gcc/cselib.c", "status": "modified", "additions": 4, "deletions": 17, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/370d11ad13da515009f4c00250efa9e40ba244c4/gcc%2Fcselib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/370d11ad13da515009f4c00250efa9e40ba244c4/gcc%2Fcselib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcselib.c?ref=370d11ad13da515009f4c00250efa9e40ba244c4", "patch": "@@ -42,7 +42,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"params.h\"\n #include \"alloc-pool.h\"\n \n-static bool cselib_record_memory;\n static int entry_and_rtx_equal_p (const void *, const void *);\n static hashval_t get_value_hash (const void *);\n static struct elt_list *new_elt_list (struct elt_list *, cselib_val *);\n@@ -749,7 +748,6 @@ cselib_lookup_mem (rtx x, int create)\n   struct elt_list *l;\n \n   if (MEM_VOLATILE_P (x) || mode == BLKmode\n-      || !cselib_record_memory\n       || (FLOAT_MODE_P (mode) && flag_float_store))\n     return 0;\n \n@@ -1203,8 +1201,7 @@ cselib_record_set (rtx dest, cselib_val *src_elt, cselib_val *dest_addr_elt)\n \tn_useless_values--;\n       src_elt->locs = new_elt_loc_list (src_elt->locs, dest);\n     }\n-  else if (GET_CODE (dest) == MEM && dest_addr_elt != 0\n-\t   && cselib_record_memory)\n+  else if (GET_CODE (dest) == MEM && dest_addr_elt != 0)\n     {\n       if (src_elt->locs == 0)\n \tn_useless_values--;\n@@ -1278,8 +1275,7 @@ cselib_record_sets (rtx insn)\n \tsets[i].dest = dest = XEXP (dest, 0);\n \n       /* We don't know how to record anything but REG or MEM.  */\n-      if (GET_CODE (dest) == REG\n-\t  || (GET_CODE (dest) == MEM && cselib_record_memory))\n+      if (GET_CODE (dest) == REG || GET_CODE (dest) == MEM)\n         {\n \t  rtx src = sets[i].src;\n \t  if (cond)\n@@ -1324,8 +1320,7 @@ cselib_record_sets (rtx insn)\n   for (i = 0; i < n_sets; i++)\n     {\n       rtx dest = sets[i].dest;\n-      if (GET_CODE (dest) == REG\n-\t  || (GET_CODE (dest) == MEM && cselib_record_memory))\n+      if (GET_CODE (dest) == REG || GET_CODE (dest) == MEM)\n \tcselib_record_set (dest, sets[i].src_elt, sets[i].dest_addr_elt);\n     }\n }\n@@ -1399,16 +1394,12 @@ cselib_process_insn (rtx insn)\n     remove_useless_values ();\n }\n \n-static int initialized;\n /* Initialize cselib for one pass.  The caller must also call\n    init_alias_analysis.  */\n \n void\n-cselib_init (bool record_memory)\n+cselib_init (void)\n {\n-  if (initialized)\n-    abort ();\n-  initialized = 1;\n   elt_list_pool = create_alloc_pool (\"elt_list\", \n \t\t\t\t     sizeof (struct elt_list), 10);\n   elt_loc_list_pool = create_alloc_pool (\"elt_loc_list\", \n@@ -1417,7 +1408,6 @@ cselib_init (bool record_memory)\n \t\t\t\t       sizeof (cselib_val), 10);\n   value_pool = create_alloc_pool (\"value\", \n \t\t\t\t  RTX_SIZE (VALUE), 100);\n-  cselib_record_memory = record_memory;\n   /* This is only created once.  */\n   if (! callmem)\n     callmem = gen_rtx_MEM (BLKmode, const0_rtx);\n@@ -1447,9 +1437,6 @@ cselib_init (bool record_memory)\n void\n cselib_finish (void)\n {\n-  if (!initialized)\n-    abort ();\n-  initialized = 0;\n   free_alloc_pool (elt_list_pool);\n   free_alloc_pool (elt_loc_list_pool);\n   free_alloc_pool (cselib_val_pool);"}]}