{"sha": "49d7a324591251967dd2ad759e903e393795310e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDlkN2EzMjQ1OTEyNTE5NjdkZDJhZDc1OWU5MDNlMzkzNzk1MzEwZQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2019-07-11T08:02:58Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-07-11T08:02:58Z"}, "message": "[Ada] Makefile.rtl: add a warning about compilation flags\n\n2019-07-11  Eric Botcazou  <ebotcazou@adacore.com>\n\ngcc/ada/\n\n\t* Makefile.rtl: Add warning note about compilation flags and\n\tcapitalize.\n\nFrom-SVN: r273400", "tree": {"sha": "8d4409226a85ff53c13e6fe5cd0fabd8fcfe2c5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d4409226a85ff53c13e6fe5cd0fabd8fcfe2c5a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/49d7a324591251967dd2ad759e903e393795310e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49d7a324591251967dd2ad759e903e393795310e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49d7a324591251967dd2ad759e903e393795310e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49d7a324591251967dd2ad759e903e393795310e/comments", "author": null, "committer": null, "parents": [{"sha": "a13a714e710f13b6fa6f88481a3c94b7d2dbc8cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a13a714e710f13b6fa6f88481a3c94b7d2dbc8cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a13a714e710f13b6fa6f88481a3c94b7d2dbc8cf"}], "stats": {"total": 29, "additions": 20, "deletions": 9}, "files": [{"sha": "cc3eb1d56a859ad2afc09a78f1c76a61be9efbd1", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49d7a324591251967dd2ad759e903e393795310e/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49d7a324591251967dd2ad759e903e393795310e/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=49d7a324591251967dd2ad759e903e393795310e", "patch": "@@ -1,3 +1,8 @@\n+2019-07-11  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* Makefile.rtl: Add warning note about compilation flags and\n+\tcapitalize.\n+\n 2019-07-11  Ed Schonberg  <schonberg@adacore.com>\n \n \t* exp_ch9.adb (Expand_N_Protected_Type_Declaaration): New"}, {"sha": "80ba46dd1044cc7fd03a3fdce60ea4c129c95890", "filename": "gcc/ada/Makefile.rtl", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49d7a324591251967dd2ad759e903e393795310e/gcc%2Fada%2FMakefile.rtl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49d7a324591251967dd2ad759e903e393795310e/gcc%2Fada%2FMakefile.rtl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FMakefile.rtl?ref=49d7a324591251967dd2ad759e903e393795310e", "patch": "@@ -2688,9 +2688,15 @@ setup-rts: force\n \t          $(LN_S) $(GNAT_SRC)/$(word 2,$(subst <, ,$(PAIR))) \\\n \t                $(RTSDIR)/$(word 1,$(subst <, ,$(PAIR)));)\n \n-# Special flags\n-\n-# force no sibling call optimization on s-traceb.o so the number of stack\n+# Special flags. It is recommended not to change the compilation flags\n+# without a careful analysis of the consequences because (part of) the\n+# runtime implements low-level support that is outside of the semantics\n+# of the language and therefore needs to be treated differently from the\n+# other units. For example, the part of the runtime implementing the\n+# propagation of exceptions cannot itself be compiled with checks that\n+# may give rise to exceptions, e.g. stack overflow checks.\n+\n+# Force no sibling call optimization on s-traceb.o so the number of stack\n # frames to be skipped when computing a call chain is not modified by\n # optimization. We don't want inlining, either.\n \n@@ -2699,14 +2705,14 @@ s-traceb.o  : s-traceb.adb s-traceb.ads\n \t  $(NO_INLINE_ADAFLAGS) $(NO_SIBLING_ADAFLAGS) $(ADA_INCLUDES) $< \\\n \t  $(OUTPUT_OPTION)\n \n-# compile s-tasdeb.o without optimization and with debug info so that it is\n+# Compile s-tasdeb.o without optimization and with debug info so that it is\n # always possible to set conditional breakpoints on tasks.\n \n s-tasdeb.o  : s-tasdeb.adb s-tasdeb.ads\n \t$(ADAC) -c $(ALL_ADAFLAGS) $(FORCE_DEBUG_ADAFLAGS) -O0 $(ADA_INCLUDES) \\\n \t  $< $(OUTPUT_OPTION)\n \n-# force no function reordering on a-except.o because of the exclusion bounds\n+# Force no function reordering on a-except.o because of the exclusion bounds\n # mechanism (see the source file for more detailed information).\n # force debugging information on a-except.o so that it is always\n # possible to set conditional breakpoints on exceptions.\n@@ -2717,29 +2723,29 @@ a-except.o  : a-except.adb a-except.ads\n \t  $(NO_INLINE_ADAFLAGS) $(NO_REORDER_ADAFLAGS) -O1 $(ADA_INCLUDES) \\\n \t  $< $(OUTPUT_OPTION)\n \n-# compile s-excdeb.o without optimization and with debug info to let the\n+# Compile s-excdeb.o without optimization and with debug info to let the\n # debugger set breakpoints and inspect subprogram parameters on exception\n # related events.\n \n s-excdeb.o  : s-excdeb.adb s-excdeb.ads s-except.ads\n \t$(ADAC) -c $(ALL_ADAFLAGS) $(FORCE_DEBUG_ADAFLAGS) -O0 \\\n \t  $(ADA_INCLUDES) $< $(OUTPUT_OPTION)\n \n-# force debugging information on s-assert.o so that it is always\n+# Force debugging information on s-assert.o so that it is always\n # possible to set breakpoint on assert failures.\n \n s-assert.o  : s-assert.adb s-assert.ads\n \t$(ADAC) -c $(ALL_ADAFLAGS) $(FORCE_DEBUG_ADAFLAGS) $(ADA_INCLUDES) \\\n \t  $< $(OUTPUT_OPTION)\n \n-# force debugging information on a-tags.o so that the debugger can find\n+# Force debugging information on a-tags.o so that the debugger can find\n # the description of Ada.Tags.Type_Specific_Data.\n \n a-tags.o  : a-tags.adb a-tags.ads\n \t$(ADAC) -c $(ALL_ADAFLAGS) $(FORCE_DEBUG_ADAFLAGS) $(ADA_INCLUDES) \\\n \t  $< $(OUTPUT_OPTION)\n \n-# force no sibling call optimization on s-memory.o to avoid turning the\n+# Force no sibling call optimization on s-memory.o to avoid turning the\n # tail recursion in Alloc into a loop that confuses branch prediction.\n \n s-memory.o  : s-memory.adb s-memory.ads"}]}