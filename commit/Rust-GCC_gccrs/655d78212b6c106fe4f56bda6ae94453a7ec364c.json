{"sha": "655d78212b6c106fe4f56bda6ae94453a7ec364c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjU1ZDc4MjEyYjZjMTA2ZmU0ZjU2YmRhNmFlOTQ0NTNhN2VjMzY0Yw==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2003-05-07T05:01:59Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2003-05-07T05:01:59Z"}, "message": "stl_algo.h: Enums as _S_.\n\n\n2003-05-06  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/bits/stl_algo.h: Enums as _S_.\n\t* include/bits/stl_tree.h: Same.\n\t* include/bits/stl_bvector.h: Same.\n\t* include/bits/ios_base.h: Same.\n\t* include/bits/stl_alloc.h: Same.\n\t* include/ext/stl_hashtable.h: Same.\n\t* src/ios.cc: And here.\n\n\t* include/std/std_sstream.h: Replace _M_really_sync to _M_sync.\n\t* include/bits/sstream.tcc: Same.\n\n        * include/bits/basic_ios.h: Correct spacing for '< ctype'.\n\n\t* include/bits/locale_facets.tcc: Replace __temp to __tmp.\n\n\t* include/bits/locale_facets.h (__num_base): Remove protected.\n\tUse _S_[io]* names for enumerations.\n\t(_S_format_int): Remove.\n\t* include/bits/locale_facets.tcc: Same.\n\t* src/locale.cc: Same.\n\n\t* include/std/std_sstream.h (stringbuf::str): Tweak formatting.\n\nFrom-SVN: r66552", "tree": {"sha": "758aa96e804a4a3ad0af2e08e639b78a6fe36e2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/758aa96e804a4a3ad0af2e08e639b78a6fe36e2e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/655d78212b6c106fe4f56bda6ae94453a7ec364c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/655d78212b6c106fe4f56bda6ae94453a7ec364c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/655d78212b6c106fe4f56bda6ae94453a7ec364c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/655d78212b6c106fe4f56bda6ae94453a7ec364c/comments", "author": null, "committer": null, "parents": [{"sha": "057c56df522a9143cd957f141f6c887445da767b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/057c56df522a9143cd957f141f6c887445da767b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/057c56df522a9143cd957f141f6c887445da767b"}], "stats": {"total": 366, "additions": 179, "deletions": 187}, "files": [{"sha": "bd8039a25dcc66013fb1e79faee5633b05f48555", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/655d78212b6c106fe4f56bda6ae94453a7ec364c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/655d78212b6c106fe4f56bda6ae94453a7ec364c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=655d78212b6c106fe4f56bda6ae94453a7ec364c", "patch": "@@ -1,3 +1,28 @@\n+2003-05-06  Benjamin Kosnik  <bkoz@redhat.com>\n+\t\n+\t* include/bits/stl_algo.h: Enums as _S_.\n+\t* include/bits/stl_tree.h: Same.\n+\t* include/bits/stl_bvector.h: Same.\n+\t* include/bits/ios_base.h: Same.\n+\t* include/bits/stl_alloc.h: Same.\n+\t* include/ext/stl_hashtable.h: Same.\n+\t* src/ios.cc: And here.\n+\t\n+\t* include/std/std_sstream.h: Replace _M_really_sync to _M_sync. \n+\t* include/bits/sstream.tcc: Same.\n+\n+        * include/bits/basic_ios.h: Correct spacing for '< ctype'.\n+ \n+\t* include/bits/locale_facets.tcc: Replace __temp to __tmp.\n+\n+\t* include/bits/locale_facets.h (__num_base): Remove protected.\n+\tUse _S_[io]* names for enumerations.\n+\t(_S_format_int): Remove.\n+\t* include/bits/locale_facets.tcc: Same.\n+\t* src/locale.cc: Same.\n+\t\n+\t* include/std/std_sstream.h (stringbuf::str): Tweak formatting.\n+\t\n 2003-05-06  Phil Edwards  <pme@gcc.gnu.org>\n \n \t* docs/html/faq/index.html (3.10):  Add note about mips atomicity.h."}, {"sha": "5be11a2590db4146fc3db9f180579ed05000c715", "filename": "libstdc++-v3/include/bits/basic_ios.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/655d78212b6c106fe4f56bda6ae94453a7ec364c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/655d78212b6c106fe4f56bda6ae94453a7ec364c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.h?ref=655d78212b6c106fe4f56bda6ae94453a7ec364c", "patch": "@@ -384,7 +384,7 @@ namespace std\n        *\n        *  Returns the result of\n        *  @code\n-       *    std::use_facet< ctype<char_type> >(getloc()).narrow(c,dfault)\n+       *    std::use_facet<ctype<char_type> >(getloc()).narrow(c,dfault)\n        *  @endcode\n        *\n        *  Additional l10n notes are at\n@@ -402,7 +402,7 @@ namespace std\n        *\n        *  Returns the result of\n        *  @code\n-       *    std::use_facet< ctype<char_type> >(getloc()).widen(c)\n+       *    std::use_facet<ctype<char_type> >(getloc()).widen(c)\n        *  @endcode\n        *\n        *  Additional l10n notes are at"}, {"sha": "6657aea959edcc940d47769fef7450168871f9bb", "filename": "libstdc++-v3/include/bits/ios_base.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/655d78212b6c106fe4f56bda6ae94453a7ec364c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/655d78212b6c106fe4f56bda6ae94453a7ec364c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h?ref=655d78212b6c106fe4f56bda6ae94453a7ec364c", "patch": "@@ -52,7 +52,7 @@ namespace std\n   // as permitted (but not required) in the standard, in order to provide\n   // better type safety in iostream calls.  A side effect is that\n   // expressions involving them are no longer compile-time constants.\n-  enum _Ios_Fmtflags { _M_ios_fmtflags_end = 1L << 16 };\n+  enum _Ios_Fmtflags { _S_ios_fmtflags_end = 1L << 16 };\n \n   inline _Ios_Fmtflags \n   operator&(_Ios_Fmtflags __a, _Ios_Fmtflags __b)\n@@ -83,7 +83,7 @@ namespace std\n   { return _Ios_Fmtflags(~static_cast<int>(__a)); }\n \n \n-  enum _Ios_Openmode { _M_ios_openmode_end = 1L << 16 };\n+  enum _Ios_Openmode { _S_ios_openmode_end = 1L << 16 };\n \n   inline _Ios_Openmode \n   operator&(_Ios_Openmode __a, _Ios_Openmode __b)\n@@ -114,7 +114,7 @@ namespace std\n   { return _Ios_Openmode(~static_cast<int>(__a)); }\n \n \n-  enum _Ios_Iostate { _M_ios_iostate_end = 1L << 16 };\n+  enum _Ios_Iostate { _S_ios_iostate_end = 1L << 16 };\n \n   inline _Ios_Iostate \n   operator&(_Ios_Iostate __a, _Ios_Iostate __b)\n@@ -144,7 +144,7 @@ namespace std\n   operator~(_Ios_Iostate __a)\n   { return _Ios_Iostate(~static_cast<int>(__a)); }\n \n-  enum _Ios_Seekdir { _M_ios_seekdir_end = 1L << 16 };\n+  enum _Ios_Seekdir { _S_ios_seekdir_end = 1L << 16 };\n \n   class __locale_cache_base;\n \n@@ -180,8 +180,8 @@ namespace std\n       what() const throw();\n       \n     private:\n-      enum { _M_bufsize = 256 };\n-      char _M_name[_M_bufsize];\n+      enum { _S_bufsize = 256 };\n+      char _M_name[_S_bufsize];\n #endif\n     };\n "}, {"sha": "a0060e8d59198bc0cce7dd0fe18df6c292b4828f", "filename": "libstdc++-v3/include/bits/locale_facets.h", "status": "modified", "additions": 16, "deletions": 21, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/655d78212b6c106fe4f56bda6ae94453a7ec364c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/655d78212b6c106fe4f56bda6ae94453a7ec364c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h?ref=655d78212b6c106fe4f56bda6ae94453a7ec364c", "patch": "@@ -536,17 +536,17 @@ namespace std\n     // Below are the indices into _S_atoms_out.\n     enum \n       {  \n-        _S_minus, \n-        _S_plus, \n-        _S_x, \n-        _S_X, \n-        _S_digits,\n-        _S_digits_end = _S_digits + 16,\n-        _S_udigits = _S_digits_end,  \n-        _S_udigits_end = _S_udigits + 16,\n-        _S_e = _S_digits + 14,  // For scientific notation, 'e'\n-        _S_E = _S_udigits + 14, // For scientific notation, 'E'\n-\t_S_end = _S_udigits_end\n+        _S_ominus, \n+        _S_oplus, \n+        _S_ox, \n+        _S_oX, \n+        _S_odigits,\n+        _S_odigits_end = _S_odigits + 16,\n+        _S_oudigits = _S_odigits_end,  \n+        _S_oudigits_end = _S_oudigits + 16,\n+        _S_oe = _S_odigits + 14,  // For scientific notation, 'e'\n+        _S_oE = _S_oudigits + 14, // For scientific notation, 'E'\n+\t_S_oend = _S_oudigits_end\n       };\n     \n     // A list of valid numeric literals for output.  This array\n@@ -556,27 +556,22 @@ namespace std\n     // \"-+xX0123456789abcdef0123456789ABCDEF\".\n     static const char* _S_atoms_out;\n \n-  protected:\n     // String literal of acceptable (narrow) input, for num_get.\n     // \"0123456789eEabcdfABCDF\"\n     static const char* _S_atoms_in;\n \n     enum \n     {  \n-      _M_zero,\n-      _M_e = _M_zero + 10,\n-      _M_E = _M_zero + 11,\n-      _M_size = 21 + 1\n+      _S_izero,\n+      _S_ie = _S_izero + 10,\n+      _S_iE = _S_izero + 11,\n+      _S_iend = 21 + 1\n     };\n \n     // num_put\n     // Construct and return valid scanf format for floating point types.\n     static void\n     _S_format_float(const ios_base& __io, char* __fptr, char __mod);\n-    \n-    // Construct and return valid scanf format for integer types.\n-    static void\n-    _S_format_int(const ios_base& __io, char* __fptr, char __mod, char __modl);\n   };\n \n \n@@ -1966,7 +1961,7 @@ namespace std\n       // locale, this is \"-+xX0123456789abcdef0123456789ABCDEF\".  This\n       // array contains the chars after having been passed through the\n       // current locale's ctype<_CharT>.widen().\n-      _CharT                    _M_literals[__num_base::_S_end];\n+      _CharT                    _M_literals[__num_base::_S_oend];\n \n       // The sign used to separate decimal values: for standard US\n       // locales, this would usually be: \".\"  Abstracted from"}, {"sha": "6e09e407104979707c353389690e85b0e3e251f1", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/655d78212b6c106fe4f56bda6ae94453a7ec364c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/655d78212b6c106fe4f56bda6ae94453a7ec364c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=655d78212b6c106fe4f56bda6ae94453a7ec364c", "patch": "@@ -113,7 +113,7 @@ namespace std\n \t}\n \n       // Next, strip leading zeros.\n-      const char_type __zero = __ctype.widen(_S_atoms_in[_M_zero]);\n+      const char_type __zero = __ctype.widen(_S_atoms_in[_S_izero]);\n       bool __found_zero = false;\n       while (__traits_type::eq(__c, __zero) && __beg != __end)\n \t{\n@@ -122,12 +122,12 @@ namespace std\n \t}\n       if (__found_zero)\n \t{\n-\t  __xtrc += _S_atoms_in[_M_zero];\n+\t  __xtrc += _S_atoms_in[_S_izero];\n \t  ++__pos;\n \t}\n \n       // Only need acceptable digits for floating point numbers.\n-      const size_t __len = _M_E - _M_zero + 1;\n+      const size_t __len = _S_iE - _S_izero + 1;\n       char_type  __watoms[__len];\n       __ctype.widen(_S_atoms_in, _S_atoms_in + __len, __watoms);\n       bool __found_dec = false;\n@@ -183,8 +183,8 @@ namespace std\n \t      __c = *(++__beg);\n \t      __found_dec = true;\n \t    }\n-\t  else if ((__traits_type::eq(__c, __watoms[_M_e]) \n-\t\t    || __traits_type::eq(__c, __watoms[_M_E])) \n+\t  else if ((__traits_type::eq(__c, __watoms[_S_ie]) \n+\t\t    || __traits_type::eq(__c, __watoms[_S_iE])) \n \t\t   && !__found_sci && __pos)\n \t    {\n \t      // Scientific notation.\n@@ -261,7 +261,7 @@ namespace std\n \t}\n \n       // Next, strip leading zeros and check required digits for base formats.\n-      const char_type __zero = __ctype.widen(_S_atoms_in[_M_zero]);\n+      const char_type __zero = __ctype.widen(_S_atoms_in[_S_izero]);\n       const char_type __x = __ctype.widen('x');\n       const char_type __X = __ctype.widen('X');\n       if (__base == 10)\n@@ -274,7 +274,7 @@ namespace std\n \t    }\n \t  if (__found_zero)\n \t    {\n-\t      __xtrc += _S_atoms_in[_M_zero];\n+\t      __xtrc += _S_atoms_in[_S_izero];\n \t      ++__pos;\n \t      if (__basefield == 0)\n \t\t{\t      \n@@ -296,7 +296,7 @@ namespace std\n \t{\n \t  if (__traits_type::eq(__c, __zero) && __beg != __end)\n \t    {\n-\t      __xtrc += _S_atoms_in[_M_zero];\n+\t      __xtrc += _S_atoms_in[_S_izero];\n \t      ++__pos;\n \t      __c = *(++__beg); \n \t      if ((__traits_type::eq(__c, __x) || __traits_type::eq(__c, __X))\n@@ -313,12 +313,12 @@ namespace std\n       // base digits as valid input.\n       size_t __len;\n       if (__base == 16)\n-\t__len = _M_size;\n+\t__len = _S_iend;\n       else\n \t__len = __base;\n \n       // Extract.\n-      char_type __watoms[_M_size];\n+      char_type __watoms[_S_iend];\n       __ctype.widen(_S_atoms_in, _S_atoms_in + __len, __watoms);\n       string __found_grouping;\n       const string __grouping = __np.grouping();\n@@ -682,19 +682,19 @@ namespace std\n \t  // Octal.\n \t  do \n \t    {\n-\t      *__buf-- = __lit[(__v & 0x7) + __num_base::_S_digits];\n+\t      *__buf-- = __lit[(__v & 0x7) + __num_base::_S_odigits];\n \t      __v >>= 3;\n \t    } \n \t  while (__v != 0);\n \t  if (__showbase)\n-\t    *__buf-- = __lit[__num_base::_S_digits];\n+\t    *__buf-- = __lit[__num_base::_S_odigits];\n \t}\n       else if (__builtin_expect(__basefield == ios_base::hex, false))\n \t{\n \t  // Hex.\n \t  const bool __uppercase = __flags & ios_base::uppercase;\n-\t  int __case_offset = __uppercase\n-\t                      ? __num_base::_S_udigits : __num_base::_S_digits;\n+\t  int __case_offset = __uppercase ? __num_base::_S_oudigits \n+\t                                  : __num_base::_S_odigits;\n \t  do \n \t    {\n \t      *__buf-- = __lit[(__v & 0xf) + __case_offset];\n@@ -704,24 +704,24 @@ namespace std\n \t  if (__showbase)\n \t    {\n \t      // 'x' or 'X'\n-\t      *__buf-- = __lit[__num_base::_S_x + __uppercase];\n+\t      *__buf-- = __lit[__num_base::_S_ox + __uppercase];\n \t      // '0'\n-\t      *__buf-- = __lit[__num_base::_S_digits];\n+\t      *__buf-- = __lit[__num_base::_S_odigits];\n \t    }\n \t}\n       else\n \t{\n \t  // Decimal.\n \t  do \n \t    {\n-\t      *__buf-- = __lit[(__v % 10) + __num_base::_S_digits];\n+\t      *__buf-- = __lit[(__v % 10) + __num_base::_S_odigits];\n \t      __v /= 10;\n \t    } \n \t  while (__v != 0);\n \t  if (__neg)\n-\t    *__buf-- = __lit[__num_base::_S_minus];\n+\t    *__buf-- = __lit[__num_base::_S_ominus];\n \t  else if (__flags & ios_base::showpos)\n-\t    *__buf-- = __lit[__num_base::_S_plus];\n+\t    *__buf-- = __lit[__num_base::_S_oplus];\n \t}\n       int __ret = __bufend - __buf - 1;\n       return __ret;\n@@ -1128,7 +1128,7 @@ namespace std\n       bool __testdecfound = false; \n \n       // The tentative returned string is stored here.\n-      string_type __temp_units;\n+      string_type __tmp_units;\n \n       char_type __c = *__beg;\n       char_type __eof = static_cast<char_type>(char_traits<char_type>::eof());\n@@ -1223,7 +1223,7 @@ namespace std\n \t\t\t}\n \t\t      else\n \t\t\t{\n-\t\t\t  __temp_units += __c;\n+\t\t\t  __tmp_units += __c;\n \t\t\t  ++__sep_pos;\n \t\t\t}\n \t\t      __c = *(++__beg);\n@@ -1254,11 +1254,11 @@ namespace std\n \t}\n \n       // Strip leading zeros.\n-      while (__temp_units[0] == __ctype.widen('0'))\n-\t__temp_units.erase(__temp_units.begin());\n+      while (__tmp_units[0] == __ctype.widen('0'))\n+\t__tmp_units.erase(__tmp_units.begin());\n \n       if (__sign.size() && __sign == __neg_sign)\n-\t__temp_units.insert(__temp_units.begin(), __ctype.widen('-'));\n+\t__tmp_units.insert(__tmp_units.begin(), __ctype.widen('-'));\n \n       // Test for grouping fidelity.\n       if (__grouping.size() && __grouping_tmp.size())\n@@ -1272,11 +1272,11 @@ namespace std\n \t__err |= ios_base::eofbit;\n \n       // Iff valid sequence is not recognized.\n-      if (!__testvalid || !__temp_units.size())\n+      if (!__testvalid || !__tmp_units.size())\n \t__err |= ios_base::failbit;\n       else\n-\t// Use the \"swap trick\" to copy __temp_units into __units.\n-\t__temp_units.swap(__units);\n+\t// Use the \"swap trick\" to copy __tmp_units into __units.\n+\t__tmp_units.swap(__units);\n \n       return __beg; \n     }\n@@ -2281,7 +2281,7 @@ namespace std\n \t{\n \t  const ctype<_CharT>& __ct = use_facet<ctype<_CharT> >(__loc);\n \t  __ct.widen(__num_base::_S_atoms_out,\n-\t\t     __num_base::_S_atoms_out + __num_base::_S_end, \n+\t\t     __num_base::_S_atoms_out + __num_base::_S_oend, \n \t\t     _M_literals);\n \t}\n     }"}, {"sha": "ff8e7a4f9164391041f7e7c31d11f6a633ffb22e", "filename": "libstdc++-v3/include/bits/sstream.tcc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/655d78212b6c106fe4f56bda6ae94453a7ec364c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsstream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/655d78212b6c106fe4f56bda6ae94453a7ec364c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsstream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsstream.tcc?ref=655d78212b6c106fe4f56bda6ae94453a7ec364c", "patch": "@@ -110,9 +110,9 @@ namespace std\n \t  _M_string.swap(__tmp);\n \t  // Just to be sure...\n \t  _M_string.reserve(__len);\n-\t  _M_really_sync(const_cast<char_type*>(_M_string.data()),\n-\t\t\t this->_M_in_cur - this->_M_in_beg, \n-\t\t\t this->_M_out_cur - this->_M_out_beg);\n+\t  _M_sync(const_cast<char_type*>(_M_string.data()),\n+\t\t  this->_M_in_cur - this->_M_in_beg, \n+\t\t  this->_M_out_cur - this->_M_out_beg);\n \t}\n       return this->sputc(traits_type::to_char_type(__c));\n     }"}, {"sha": "ea5722ea7e7a90e2269059d444aa3ba40b489179", "filename": "libstdc++-v3/include/bits/stl_algo.h", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/655d78212b6c106fe4f56bda6ae94453a7ec364c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/655d78212b6c106fe4f56bda6ae94453a7ec364c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h?ref=655d78212b6c106fe4f56bda6ae94453a7ec364c", "patch": "@@ -1,6 +1,6 @@\n // Algorithm implementation -*- C++ -*-\n \n-// Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -1926,7 +1926,7 @@ __result, __binary_pred, _IterType());\n    *  This controls some aspect of the sort routines.\n    *  @endif\n   */\n-  enum { _M_threshold = 16 };\n+  enum { _S_threshold = 16 };\n \n   /**\n    *  @if maint\n@@ -2053,9 +2053,9 @@ __result, __binary_pred, _IterType());\n     void\n     __final_insertion_sort(_RandomAccessIter __first, _RandomAccessIter __last)\n     {\n-      if (__last - __first > _M_threshold) {\n-\t__insertion_sort(__first, __first + _M_threshold);\n-\t__unguarded_insertion_sort(__first + _M_threshold, __last);\n+      if (__last - __first > _S_threshold) {\n+\t__insertion_sort(__first, __first + _S_threshold);\n+\t__unguarded_insertion_sort(__first + _S_threshold, __last);\n       }\n       else\n \t__insertion_sort(__first, __last);\n@@ -2071,9 +2071,9 @@ __result, __binary_pred, _IterType());\n     __final_insertion_sort(_RandomAccessIter __first, _RandomAccessIter __last,\n \t\t\t   _Compare __comp)\n     {\n-      if (__last - __first > _M_threshold) {\n-\t__insertion_sort(__first, __first + _M_threshold, __comp);\n-\t__unguarded_insertion_sort(__first + _M_threshold, __last, __comp);\n+      if (__last - __first > _S_threshold) {\n+\t__insertion_sort(__first, __first + _S_threshold, __comp);\n+\t__unguarded_insertion_sort(__first + _S_threshold, __last, __comp);\n       }\n       else\n \t__insertion_sort(__first, __last, __comp);\n@@ -2105,7 +2105,7 @@ __result, __binary_pred, _IterType());\n     {\n       typedef typename iterator_traits<_RandomAccessIter>::value_type _ValueType;\n \n-      while (__last - __first > _M_threshold) {\n+      while (__last - __first > _S_threshold) {\n \tif (__depth_limit == 0) {\n \t  partial_sort(__first, __last, __last);\n \t  return;\n@@ -2133,7 +2133,7 @@ __result, __binary_pred, _IterType());\n     {\n       typedef typename iterator_traits<_RandomAccessIter>::value_type _ValueType;\n \n-      while (__last - __first > _M_threshold) {\n+      while (__last - __first > _S_threshold) {\n \tif (__depth_limit == 0) {\n \t  partial_sort(__first, __last, __last, __comp);\n \t  return;\n@@ -2300,7 +2300,7 @@ __result, __binary_pred, _IterType());\n \t    __comp);\n     }\n \n-  enum { _M_chunk_size = 7 };\n+  enum { _S_chunk_size = 7 };\n \n   template<typename _RandomAccessIter, typename _Distance>\n     void\n@@ -2336,7 +2336,7 @@ __result, __binary_pred, _IterType());\n       _Distance __len = __last - __first;\n       _Pointer __buffer_last = __buffer + __len;\n \n-      _Distance __step_size = _M_chunk_size;\n+      _Distance __step_size = _S_chunk_size;\n       __chunk_insertion_sort(__first, __last, __step_size);\n \n       while (__step_size < __len) {\n@@ -2357,7 +2357,7 @@ __result, __binary_pred, _IterType());\n       _Distance __len = __last - __first;\n       _Pointer __buffer_last = __buffer + __len;\n \n-      _Distance __step_size = _M_chunk_size;\n+      _Distance __step_size = _S_chunk_size;\n       __chunk_insertion_sort(__first, __last, __step_size, __comp);\n \n       while (__step_size < __len) {"}, {"sha": "54ac924d35c871ccbb2131cd7eb309f38eb9ef12", "filename": "libstdc++-v3/include/bits/stl_alloc.h", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/655d78212b6c106fe4f56bda6ae94453a7ec364c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_alloc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/655d78212b6c106fe4f56bda6ae94453a7ec364c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_alloc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_alloc.h?ref=655d78212b6c106fe4f56bda6ae94453a7ec364c", "patch": "@@ -260,7 +260,7 @@ namespace std\n    *\n    *  Important implementation properties:\n    *  0. If globally mandated, then allocate objects from __new_alloc\n-   *  1. If the clients request an object of size > _MAX_BYTES, the resulting\n+   *  1. If the clients request an object of size > _S_max_bytes, the resulting\n    *     object will be obtained directly from __new_alloc\n    *  2. In all other cases, we allocate an object of size exactly\n    *     _S_round_up(requested_size).  Thus the client has enough size\n@@ -286,17 +286,17 @@ namespace std\n     class __pool_alloc\n     {\n     private:\n-      enum {_ALIGN = 8};\n-      enum {_MAX_BYTES = 128};\n-      enum {_NFREELISTS = _MAX_BYTES / _ALIGN};\n+      enum {_S_align = 8};\n+      enum {_S_max_bytes = 128};\n+      enum {_S_freelists = _S_max_bytes / _S_align};\n \n       union _Obj\n       {\n         union _Obj* _M_free_list_link;\n         char        _M_client_data[1];    // The client sees this.\n       };\n \n-      static _Obj* volatile         _S_free_list[_NFREELISTS];\n+      static _Obj* volatile         _S_free_list[_S_freelists];\n \n       // Chunk allocation state.\n       static char*                  _S_start_free;\n@@ -308,11 +308,11 @@ namespace std\n \n       static size_t\n       _S_round_up(size_t __bytes)\n-      { return (((__bytes) + (size_t) _ALIGN-1) & ~((size_t) _ALIGN - 1)); }\n+      { return (((__bytes) + (size_t) _S_align-1) & ~((size_t) _S_align - 1)); }\n \n       static size_t\n       _S_freelist_index(size_t __bytes)\n-      { return (((__bytes) + (size_t)_ALIGN - 1)/(size_t)_ALIGN - 1); }\n+      { return (((__bytes) + (size_t)_S_align - 1)/(size_t)_S_align - 1); }\n \n       // Returns an object of size __n, and optionally adds to size __n\n       // free list.\n@@ -351,7 +351,7 @@ namespace std\n \t      __atomic_add(&_S_force_new, -1);\n \t  }\n \n-\tif ((__n > (size_t) _MAX_BYTES) || (_S_force_new > 0))\n+\tif ((__n > (size_t) _S_max_bytes) || (_S_force_new > 0))\n \t  __ret = __new_alloc::allocate(__n);\n \telse\n \t  {\n@@ -379,7 +379,7 @@ namespace std\n       static void\n       deallocate(void* __p, size_t __n)\n       {\n-\tif ((__n > (size_t) _MAX_BYTES) || (_S_force_new > 0))\n+\tif ((__n > (size_t) _S_max_bytes) || (_S_force_new > 0))\n \t  __new_alloc::deallocate(__p, __n);\n \telse\n \t  {\n@@ -462,7 +462,7 @@ namespace std\n               // do not try smaller requests, since that tends to result\n               // in disaster on multi-process machines.\n               __i = __size;\n-              for (; __i <= (size_t) _MAX_BYTES; __i += (size_t) _ALIGN)\n+              for (; __i <= (size_t) _S_max_bytes; __i += (size_t) _S_align)\n                 {\n                   __my_free_list = _S_free_list + _S_freelist_index(__i);\n                   __p = *__my_free_list;\n@@ -541,7 +541,7 @@ namespace std\n \n   template<bool __threads, int __inst>\n     typename __pool_alloc<__threads,__inst>::_Obj* volatile\n-    __pool_alloc<__threads,__inst>::_S_free_list[_NFREELISTS];\n+    __pool_alloc<__threads,__inst>::_S_free_list[_S_freelists];\n \n   typedef __pool_alloc<true,0>    __alloc;\n   typedef __pool_alloc<false,0>   __single_client_alloc;"}, {"sha": "f1c16cb3d5a146934f1f83bc742428d24bac63ef", "filename": "libstdc++-v3/include/bits/stl_bvector.h", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/655d78212b6c106fe4f56bda6ae94453a7ec364c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/655d78212b6c106fe4f56bda6ae94453a7ec364c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h?ref=655d78212b6c106fe4f56bda6ae94453a7ec364c", "patch": "@@ -64,7 +64,7 @@\n namespace std\n { \n   typedef unsigned long _Bit_type;\n-  enum { _M_word_bit = int(CHAR_BIT * sizeof(_Bit_type)) };\n+  enum { _S_word_bit = int(CHAR_BIT * sizeof(_Bit_type)) };\n \n struct _Bit_reference {\n \n@@ -100,24 +100,24 @@ struct _Bit_iterator_base : public iterator<random_access_iterator_tag, bool>\n     : _M_p(__x), _M_offset(__y) {}\n \n   void _M_bump_up() {\n-    if (_M_offset++ == _M_word_bit - 1) {\n+    if (_M_offset++ == _S_word_bit - 1) {\n       _M_offset = 0;\n       ++_M_p;\n     }\n   }\n   void _M_bump_down() {\n     if (_M_offset-- == 0) {\n-      _M_offset = _M_word_bit - 1;\n+      _M_offset = _S_word_bit - 1;\n       --_M_p;\n     }\n   }\n \n   void _M_incr(ptrdiff_t __i) {\n     difference_type __n = __i + _M_offset;\n-    _M_p += __n / _M_word_bit;\n-    __n = __n % _M_word_bit;\n+    _M_p += __n / _S_word_bit;\n+    __n = __n % _S_word_bit;\n     if (__n < 0) {\n-      _M_offset = (unsigned int) __n + _M_word_bit;\n+      _M_offset = (unsigned int) __n + _S_word_bit;\n       --_M_p;\n     } else\n       _M_offset = (unsigned int) __n;\n@@ -145,7 +145,7 @@ struct _Bit_iterator_base : public iterator<random_access_iterator_tag, bool>\n \n inline ptrdiff_t\n operator-(const _Bit_iterator_base& __x, const _Bit_iterator_base& __y) {\n-  return _M_word_bit * (__x._M_p - __y._M_p) + __x._M_offset - __y._M_offset;\n+  return _S_word_bit * (__x._M_p - __y._M_p) + __x._M_offset - __y._M_offset;\n }\n \n \n@@ -277,7 +277,7 @@ class _Bvector_alloc_base {\n \n protected:\n   _Bit_type * _M_bit_alloc(size_t __n) \n-    { return _M_data_allocator.allocate((__n + _M_word_bit - 1)/_M_word_bit); }\n+    { return _M_data_allocator.allocate((__n + _S_word_bit - 1)/_S_word_bit); }\n   void _M_deallocate() {\n     if (_M_start._M_p)\n       _M_data_allocator.deallocate(_M_start._M_p, \n@@ -307,7 +307,7 @@ class _Bvector_alloc_base<_Allocator, true> {\n           _Alloc_type;\n           \n   _Bit_type * _M_bit_alloc(size_t __n) \n-    { return _Alloc_type::allocate((__n + _M_word_bit - 1)/_M_word_bit); }\n+    { return _Alloc_type::allocate((__n + _S_word_bit - 1)/_S_word_bit); }\n   void _M_deallocate() {\n     if (_M_start._M_p)\n       _Alloc_type::deallocate(_M_start._M_p,\n@@ -374,7 +374,7 @@ template <typename _Alloc>\n   protected:\n     void _M_initialize(size_type __n) {\n       _Bit_type * __q = _M_bit_alloc(__n);\n-      this->_M_end_of_storage = __q + (__n + _M_word_bit - 1)/_M_word_bit;\n+      this->_M_end_of_storage = __q + (__n + _S_word_bit - 1)/_S_word_bit;\n       this->_M_start = iterator(__q, 0);\n       this->_M_finish = this->_M_start + difference_type(__n);\n     }\n@@ -386,13 +386,13 @@ template <typename _Alloc>\n       }\n       else {\n         size_type __len = size() \n-\t                  ? 2 * size() : static_cast<size_type>(_M_word_bit);\n+\t                  ? 2 * size() : static_cast<size_type>(_S_word_bit);\n         _Bit_type * __q = _M_bit_alloc(__len);\n         iterator __i = copy(begin(), __position, iterator(__q, 0));\n         *__i++ = __x;\n         this->_M_finish = copy(__position, end(), __i);\n         _M_deallocate();\n-        this->_M_end_of_storage = __q + (__len + _M_word_bit - 1)/_M_word_bit;\n+        this->_M_end_of_storage = __q + (__len + _S_word_bit - 1)/_S_word_bit;\n         this->_M_start = iterator(__q, 0);\n       }\n     }\n@@ -445,7 +445,7 @@ template <typename _Alloc>\n           this->_M_finish = copy(__position, end(), __i);\n           _M_deallocate();\n           this->_M_end_of_storage\n-\t    = __q + (__len + _M_word_bit - 1)/_M_word_bit;\n+\t    = __q + (__len + _S_word_bit - 1)/_S_word_bit;\n           this->_M_start = iterator(__q, 0);\n         }\n       }\n@@ -613,7 +613,7 @@ template <typename _Alloc>\n         this->_M_finish = copy(begin(), end(), iterator(__q, 0));\n         _M_deallocate();\n         this->_M_start = iterator(__q, 0);\n-        this->_M_end_of_storage = __q + (__n + _M_word_bit - 1)/_M_word_bit;\n+        this->_M_end_of_storage = __q + (__n + _S_word_bit - 1)/_S_word_bit;\n       }\n     }\n   \n@@ -687,7 +687,7 @@ template <typename _Alloc>\n         fill_n(__i, __n, __x);\n         this->_M_finish = copy(__position, end(), __i + difference_type(__n));\n         _M_deallocate();\n-        this->_M_end_of_storage = __q + (__len + _M_word_bit - 1)/_M_word_bit;\n+        this->_M_end_of_storage = __q + (__len + _S_word_bit - 1)/_S_word_bit;\n         this->_M_start = iterator(__q, 0);\n       }\n     }"}, {"sha": "2965d4caab5fe79e28409fe6b79376e711cc2d60", "filename": "libstdc++-v3/include/bits/stl_tree.h", "status": "modified", "additions": 48, "deletions": 48, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/655d78212b6c106fe4f56bda6ae94453a7ec364c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/655d78212b6c106fe4f56bda6ae94453a7ec364c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h?ref=655d78212b6c106fe4f56bda6ae94453a7ec364c", "patch": "@@ -90,7 +90,7 @@ iterators invalidated are those referring to the deleted node.\n \n namespace std\n { \n-  enum _Rb_tree_color { _M_red = false, _M_black = true };\n+  enum _Rb_tree_color { _S_red = false, _S_black = true };\n \n   struct _Rb_tree_node_base\n   {\n@@ -156,7 +156,7 @@ namespace std\n     void \n     _M_decrement()\n     {\n-      if (_M_node->_M_color == _M_red \n+      if (_M_node->_M_color == _S_red \n \t  && _M_node->_M_parent->_M_parent == _M_node)\n \t_M_node = _M_node->_M_right;\n       else if (_M_node->_M_left != 0) \n@@ -305,18 +305,18 @@ namespace std\n   inline void \n   _Rb_tree_rebalance(_Rb_tree_node_base* __x, _Rb_tree_node_base*& __root)\n   {\n-    __x->_M_color = _M_red;\n+    __x->_M_color = _S_red;\n     while (__x != __root \n-\t   && __x->_M_parent->_M_color == _M_red) \n+\t   && __x->_M_parent->_M_color == _S_red) \n       {\n \tif (__x->_M_parent == __x->_M_parent->_M_parent->_M_left) \n \t  {\n \t    _Rb_tree_node_base* __y = __x->_M_parent->_M_parent->_M_right;\n-\t    if (__y && __y->_M_color == _M_red) \n+\t    if (__y && __y->_M_color == _S_red) \n \t      {\n-\t\t__x->_M_parent->_M_color = _M_black;\n-\t\t__y->_M_color = _M_black;\n-\t\t__x->_M_parent->_M_parent->_M_color = _M_red;\n+\t\t__x->_M_parent->_M_color = _S_black;\n+\t\t__y->_M_color = _S_black;\n+\t\t__x->_M_parent->_M_parent->_M_color = _S_red;\n \t\t__x = __x->_M_parent->_M_parent;\n \t      }\n \t    else \n@@ -326,19 +326,19 @@ namespace std\n \t\t    __x = __x->_M_parent;\n \t\t    _Rb_tree_rotate_left(__x, __root);\n \t\t  }\n-\t\t__x->_M_parent->_M_color = _M_black;\n-\t\t__x->_M_parent->_M_parent->_M_color = _M_red;\n+\t\t__x->_M_parent->_M_color = _S_black;\n+\t\t__x->_M_parent->_M_parent->_M_color = _S_red;\n \t\t_Rb_tree_rotate_right(__x->_M_parent->_M_parent, __root);\n \t      }\n \t  }\n \telse \n \t  {\n \t    _Rb_tree_node_base* __y = __x->_M_parent->_M_parent->_M_left;\n-\t    if (__y && __y->_M_color == _M_red) \n+\t    if (__y && __y->_M_color == _S_red) \n \t      {\n-\t\t__x->_M_parent->_M_color = _M_black;\n-\t\t__y->_M_color = _M_black;\n-\t\t__x->_M_parent->_M_parent->_M_color = _M_red;\n+\t\t__x->_M_parent->_M_color = _S_black;\n+\t\t__y->_M_color = _S_black;\n+\t\t__x->_M_parent->_M_parent->_M_color = _S_red;\n \t\t__x = __x->_M_parent->_M_parent;\n \t      }\n \t    else \n@@ -348,13 +348,13 @@ namespace std\n \t\t    __x = __x->_M_parent;\n \t\t    _Rb_tree_rotate_right(__x, __root);\n \t\t  }\n-\t\t__x->_M_parent->_M_color = _M_black;\n-\t\t__x->_M_parent->_M_parent->_M_color = _M_red;\n+\t\t__x->_M_parent->_M_color = _S_black;\n+\t\t__x->_M_parent->_M_parent->_M_color = _S_red;\n \t\t_Rb_tree_rotate_left(__x->_M_parent->_M_parent, __root);\n \t      }\n \t  }\n       }\n-    __root->_M_color = _M_black;\n+    __root->_M_color = _S_black;\n   }\n \n   inline _Rb_tree_node_base*\n@@ -430,42 +430,42 @@ namespace std\n \t  else                      // __x == __z->_M_left\n \t    __rightmost = _Rb_tree_node_base::_S_maximum(__x);\n       }\n-    if (__y->_M_color != _M_red) \n+    if (__y->_M_color != _S_red) \n       { \n-\twhile (__x != __root && (__x == 0 || __x->_M_color == _M_black))\n+\twhile (__x != __root && (__x == 0 || __x->_M_color == _S_black))\n \t  if (__x == __x_parent->_M_left) \n \t    {\n \t      _Rb_tree_node_base* __w = __x_parent->_M_right;\n-\t      if (__w->_M_color == _M_red) \n+\t      if (__w->_M_color == _S_red) \n \t\t{\n-\t\t  __w->_M_color = _M_black;\n-\t\t  __x_parent->_M_color = _M_red;\n+\t\t  __w->_M_color = _S_black;\n+\t\t  __x_parent->_M_color = _S_red;\n \t\t  _Rb_tree_rotate_left(__x_parent, __root);\n \t\t  __w = __x_parent->_M_right;\n \t\t}\n \t      if ((__w->_M_left == 0 || \n-\t\t   __w->_M_left->_M_color == _M_black) &&\n+\t\t   __w->_M_left->_M_color == _S_black) &&\n \t\t  (__w->_M_right == 0 || \n-\t\t   __w->_M_right->_M_color == _M_black)) \n+\t\t   __w->_M_right->_M_color == _S_black)) \n \t\t{\n-\t\t  __w->_M_color = _M_red;\n+\t\t  __w->_M_color = _S_red;\n \t\t  __x = __x_parent;\n \t\t  __x_parent = __x_parent->_M_parent;\n \t\t} \n \t      else \n \t\t{\n \t\t  if (__w->_M_right == 0 \n-\t\t      || __w->_M_right->_M_color == _M_black) \n+\t\t      || __w->_M_right->_M_color == _S_black) \n \t\t    {\n-\t\t      __w->_M_left->_M_color = _M_black;\n-\t\t      __w->_M_color = _M_red;\n+\t\t      __w->_M_left->_M_color = _S_black;\n+\t\t      __w->_M_color = _S_red;\n \t\t      _Rb_tree_rotate_right(__w, __root);\n \t\t      __w = __x_parent->_M_right;\n \t\t    }\n \t\t  __w->_M_color = __x_parent->_M_color;\n-\t\t  __x_parent->_M_color = _M_black;\n+\t\t  __x_parent->_M_color = _S_black;\n \t\t  if (__w->_M_right) \n-\t\t    __w->_M_right->_M_color = _M_black;\n+\t\t    __w->_M_right->_M_color = _S_black;\n \t\t  _Rb_tree_rotate_left(__x_parent, __root);\n \t\t  break;\n \t\t}\n@@ -474,40 +474,40 @@ namespace std\n \t    {   \n \t      // same as above, with _M_right <-> _M_left.\n \t      _Rb_tree_node_base* __w = __x_parent->_M_left;\n-\t      if (__w->_M_color == _M_red) \n+\t      if (__w->_M_color == _S_red) \n \t\t{\n-\t\t  __w->_M_color = _M_black;\n-\t\t  __x_parent->_M_color = _M_red;\n+\t\t  __w->_M_color = _S_black;\n+\t\t  __x_parent->_M_color = _S_red;\n \t\t  _Rb_tree_rotate_right(__x_parent, __root);\n \t\t  __w = __x_parent->_M_left;\n \t\t}\n \t      if ((__w->_M_right == 0 || \n-\t\t   __w->_M_right->_M_color == _M_black) &&\n+\t\t   __w->_M_right->_M_color == _S_black) &&\n \t\t  (__w->_M_left == 0 || \n-\t\t   __w->_M_left->_M_color == _M_black)) \n+\t\t   __w->_M_left->_M_color == _S_black)) \n \t\t{\n-\t\t  __w->_M_color = _M_red;\n+\t\t  __w->_M_color = _S_red;\n \t\t  __x = __x_parent;\n \t\t  __x_parent = __x_parent->_M_parent;\n \t\t} \n \t      else \n \t\t{\n-\t\t  if (__w->_M_left == 0 || __w->_M_left->_M_color == _M_black) \n+\t\t  if (__w->_M_left == 0 || __w->_M_left->_M_color == _S_black) \n \t\t    {\n-\t\t      __w->_M_right->_M_color = _M_black;\n-\t\t      __w->_M_color = _M_red;\n+\t\t      __w->_M_right->_M_color = _S_black;\n+\t\t      __w->_M_color = _S_red;\n \t\t      _Rb_tree_rotate_left(__w, __root);\n \t\t      __w = __x_parent->_M_left;\n \t\t    }\n \t\t  __w->_M_color = __x_parent->_M_color;\n-\t\t  __x_parent->_M_color = _M_black;\n+\t\t  __x_parent->_M_color = _S_black;\n \t\t  if (__w->_M_left) \n-\t\t    __w->_M_left->_M_color = _M_black;\n+\t\t    __w->_M_left->_M_color = _S_black;\n \t\t  _Rb_tree_rotate_right(__x_parent, __root);\n \t\t  break;\n \t\t}\n \t    }\n-\tif (__x) __x->_M_color = _M_black;\n+\tif (__x) __x->_M_color = _S_black;\n       }\n     return __y;\n   }\n@@ -737,7 +737,7 @@ namespace std\n \t  _M_empty_initialize();\n \telse \n \t  {\n-\t    _S_color(this->_M_header) = _M_red;\n+\t    _S_color(this->_M_header) = _S_red;\n \t    _M_root() = _M_copy(__x._M_root(), this->_M_header);\n \t    _M_leftmost() = _S_minimum(_M_root());\n \t    _M_rightmost() = _S_maximum(_M_root());\n@@ -753,7 +753,7 @@ namespace std\n     private:\n       void _M_empty_initialize() \n       {\n-\t_S_color(this->_M_header) = _M_red; // used to distinguish header from \n+\t_S_color(this->_M_header) = _S_red; // used to distinguish header from \n \t// __root, in iterator.operator++\n \t_M_root() = 0;\n \t_M_leftmost() = this->_M_header;\n@@ -1417,7 +1417,7 @@ namespace std\n     int __sum = 0;\n     do \n       {\n-\tif (__node->_M_color == _M_black) \n+\tif (__node->_M_color == _S_black) \n \t  ++__sum;\n \tif (__node == __root) \n \t  break;\n@@ -1444,9 +1444,9 @@ namespace std\n \t_Link_type __L = _S_left(__x);\n \t_Link_type __R = _S_right(__x);\n \t\n-\tif (__x->_M_color == _M_red)\n-\t  if ((__L && __L->_M_color == _M_red) \n-\t      || (__R && __R->_M_color == _M_red))\n+\tif (__x->_M_color == _S_red)\n+\t  if ((__L && __L->_M_color == _S_red) \n+\t      || (__R && __R->_M_color == _S_red))\n \t    return false;\n \t\n \tif (__L && _M_key_compare(_S_key(__x), _S_key(__L)))"}, {"sha": "3a802f48e7e4f82ef21983265e278b66e684ef8b", "filename": "libstdc++-v3/include/ext/stl_hashtable.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/655d78212b6c106fe4f56bda6ae94453a7ec364c/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstl_hashtable.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/655d78212b6c106fe4f56bda6ae94453a7ec364c/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstl_hashtable.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstl_hashtable.h?ref=655d78212b6c106fe4f56bda6ae94453a7ec364c", "patch": "@@ -1,6 +1,6 @@\n // Hashtable implementation used by containers -*- C++ -*-\n \n-// Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -180,9 +180,9 @@ struct _Hashtable_const_iterator {\n };\n \n // Note: assumes long is at least 32 bits.\n-enum { __stl_num_primes = 28 };\n+enum { _S_num_primes = 28 };\n \n-static const unsigned long __stl_prime_list[__stl_num_primes] =\n+static const unsigned long __stl_prime_list[_S_num_primes] =\n {\n   53ul,         97ul,         193ul,       389ul,       769ul,\n   1543ul,       3079ul,       6151ul,      12289ul,     24593ul,\n@@ -195,7 +195,7 @@ static const unsigned long __stl_prime_list[__stl_num_primes] =\n inline unsigned long __stl_next_prime(unsigned long __n)\n {\n   const unsigned long* __first = __stl_prime_list;\n-  const unsigned long* __last = __stl_prime_list + (int)__stl_num_primes;\n+  const unsigned long* __last = __stl_prime_list + (int)_S_num_primes;\n   const unsigned long* pos = std::lower_bound(__first, __last, __n);\n   return pos == __last ? *(__last - 1) : *pos;\n }\n@@ -363,7 +363,7 @@ class hashtable {\n   size_type bucket_count() const { return _M_buckets.size(); }\n \n   size_type max_bucket_count() const\n-    { return __stl_prime_list[(int)__stl_num_primes - 1]; } \n+    { return __stl_prime_list[(int)_S_num_primes - 1]; } \n \n   size_type elems_in_bucket(size_type __bucket) const\n   {"}, {"sha": "e917079f1df8a12202be75a9877fef905c4289b8", "filename": "libstdc++-v3/include/std/std_sstream.h", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/655d78212b6c106fe4f56bda6ae94453a7ec364c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_sstream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/655d78212b6c106fe4f56bda6ae94453a7ec364c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_sstream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_sstream.h?ref=655d78212b6c106fe4f56bda6ae94453a7ec364c", "patch": "@@ -133,11 +133,10 @@ namespace std\n       __string_type\n       str() const\n       {\n-\tconst bool __testout = this->_M_mode & ios_base::out;\n \t__string_type __ret = _M_string;\n+\tconst bool __testout = this->_M_mode & ios_base::out;\n \tif (__testout && this->_M_out_beg < this->_M_out_lim)\n-\t  __ret = __string_type(this->_M_out_beg,\n-\t\t\t\tthis->_M_out_lim);\n+\t  __ret = __string_type(this->_M_out_beg, this->_M_out_lim);\n \treturn __ret;\n       }\n \n@@ -171,7 +170,7 @@ namespace std\n \t__size_type __len = 0;\n \tif (this->_M_mode & (ios_base::ate | ios_base::app))\n \t  __len = _M_string.size();\n-\t_M_really_sync(const_cast<char_type*>(_M_string.data()), 0, __len);\n+\t_M_sync(const_cast<char_type*>(_M_string.data()), 0, __len);\n       }\n \n       // Overridden virtual functions:\n@@ -220,7 +219,7 @@ namespace std\n \t    _M_string = __string_type(__s, __n);\n \t    \n \t    // Step 2: Use the external array.\n-\t    _M_really_sync(__s, 0, 0);\n+\t    _M_sync(__s, 0, 0);\n \t  }\n \treturn this;\n       }\n@@ -247,7 +246,7 @@ namespace std\n        *  @endif\n       */\n       virtual void\n-      _M_really_sync(char_type* __base, __size_type __i, __size_type __o)\n+      _M_sync(char_type* __base, __size_type __i, __size_type __o)\n       {\n \tconst bool __testin = this->_M_mode & ios_base::in;\n \tconst bool __testout = this->_M_mode & ios_base::out;"}, {"sha": "b3acc493264cf1a57a852c153d13055ea04fd1ee", "filename": "libstdc++-v3/src/ios.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/655d78212b6c106fe4f56bda6ae94453a7ec364c/libstdc%2B%2B-v3%2Fsrc%2Fios.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/655d78212b6c106fe4f56bda6ae94453a7ec364c/libstdc%2B%2B-v3%2Fsrc%2Fios.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fios.cc?ref=655d78212b6c106fe4f56bda6ae94453a7ec364c", "patch": "@@ -142,8 +142,8 @@ namespace std\n \n   ios_base::failure::failure(const string& __str) throw()\n   {\n-    strncpy(_M_name, __str.c_str(), _M_bufsize);\n-    _M_name[_M_bufsize - 1] = '\\0';\n+    strncpy(_M_name, __str.c_str(), _S_bufsize);\n+    _M_name[_S_bufsize - 1] = '\\0';\n   }\n \n   ios_base::failure::~failure() throw()"}, {"sha": "db08de0feca792965b101bf8b02cef42fdfbadf4", "filename": "libstdc++-v3/src/locale.cc", "status": "modified", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/655d78212b6c106fe4f56bda6ae94453a7ec364c/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/655d78212b6c106fe4f56bda6ae94453a7ec364c/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc?ref=655d78212b6c106fe4f56bda6ae94453a7ec364c", "patch": "@@ -531,32 +531,5 @@ namespace std\n       *__fptr++ = (__flags & ios_base::uppercase) ? 'G' : 'g';\n     *__fptr = '\\0';\n   }\n-  \n-  void\n-  __num_base::_S_format_int(const ios_base& __io, char* __fptr, char __mod, \n-\t\t\t    char __modl)\n-  {\n-    ios_base::fmtflags __flags = __io.flags();\n-    *__fptr++ = '%';\n-    // [22.2.2.2.2] Table 60\n-    if (__flags & ios_base::showpos)\n-      *__fptr++ = '+';\n-    if (__flags & ios_base::showbase)\n-      *__fptr++ = '#';\n-    *__fptr++ = 'l';\n-\n-    // For long long types.\n-    if (__modl)\n-      *__fptr++ = __modl;\n-\n-    ios_base::fmtflags __bsefield = __flags & ios_base::basefield;\n-    if (__bsefield == ios_base::hex)\n-      *__fptr++ = (__flags & ios_base::uppercase) ? 'X' : 'x';\n-    else if (__bsefield == ios_base::oct)\n-      *__fptr++ = 'o';\n-    else\n-      *__fptr++ = __mod;\n-    *__fptr = '\\0';\n-  }\n } // namespace std\n "}]}