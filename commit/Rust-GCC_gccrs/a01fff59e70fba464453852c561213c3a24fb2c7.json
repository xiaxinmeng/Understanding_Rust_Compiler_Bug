{"sha": "a01fff59e70fba464453852c561213c3a24fb2c7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTAxZmZmNTllNzBmYmE0NjQ0NTM4NTJjNTYxMjEzYzNhMjRmYjJjNw==", "commit": {"author": {"name": "Matt Austern", "email": "austern@apple.com", "date": "2003-05-19T19:19:46Z"}, "committer": {"name": "Matt Austern", "email": "austern@gcc.gnu.org", "date": "2003-05-19T19:19:46Z"}, "message": "Add a new flag...\n\nAdd a new flag, -W(no-)invalid-offsetof, to control whether or\nnot the compiler warns about incorrect use of the offsetof macro\nin C++.  By default the warning is on.\n\nFrom-SVN: r66972", "tree": {"sha": "db823fd432e76eee10d350bcaede94deebaa3066", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/db823fd432e76eee10d350bcaede94deebaa3066"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a01fff59e70fba464453852c561213c3a24fb2c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a01fff59e70fba464453852c561213c3a24fb2c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a01fff59e70fba464453852c561213c3a24fb2c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a01fff59e70fba464453852c561213c3a24fb2c7/comments", "author": null, "committer": null, "parents": [{"sha": "eab1ff73c813a9eb0f7e6e8c784d8d41b37af687", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eab1ff73c813a9eb0f7e6e8c784d8d41b37af687", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eab1ff73c813a9eb0f7e6e8c784d8d41b37af687"}], "stats": {"total": 80, "additions": 79, "deletions": 1}, "files": [{"sha": "f1cac2f2be79616af0d6a2fa1f9e9feaa79936c7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a01fff59e70fba464453852c561213c3a24fb2c7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a01fff59e70fba464453852c561213c3a24fb2c7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a01fff59e70fba464453852c561213c3a24fb2c7", "patch": "@@ -1,3 +1,12 @@\n+2003-05-19  Matt Austern  <austern@apple.com>\n+\n+\t* c-opts.c (COMMAND_LINE_OPTIONS): Add -Winvalid-offsetof option.\n+\t* c-common.h (warn_invalid_offsetof): Declare.\n+\t* c-common.c (warn_invalid_offsetof): Define.\n+\t* doc/invoke.texi: Document -Winvalid-offsetof.\n+\t* testsuite/g++.dg/other/offsetof3.C: New.\n+\t* testsuite/g++.dg/other/offsetof4.C: New.\n+\t\n 2003-05-19  Kevin B. Hendricks  <kevin.hendricks@sympatico.ca>\n             David Edelsohn  <edelsohn@gnu.org>\n "}, {"sha": "fe196b124bf3331f2dce916e614da56aec691bab", "filename": "gcc/c-common.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a01fff59e70fba464453852c561213c3a24fb2c7/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a01fff59e70fba464453852c561213c3a24fb2c7/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=a01fff59e70fba464453852c561213c3a24fb2c7", "patch": "@@ -612,6 +612,10 @@ int flag_abi_version = 1;\n \n int warn_abi = 0;\n \n+/* Nonzero means warn about invalid uses of offsetof. */\n+ \n+int warn_invalid_offsetof = 1;\n+\n /* Nonzero means warn about implicit declarations.  */\n \n int warn_implicit = 1;"}, {"sha": "425a9eab02f8af6ab4f98002bc07236c3c1db8e9", "filename": "gcc/c-common.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a01fff59e70fba464453852c561213c3a24fb2c7/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a01fff59e70fba464453852c561213c3a24fb2c7/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=a01fff59e70fba464453852c561213c3a24fb2c7", "patch": "@@ -777,6 +777,10 @@ extern int flag_abi_version;\n \n extern int warn_abi;\n \n+/* Nonzero means warn about invalid uses of offsetof. */\n+ \n+extern int warn_invalid_offsetof;\n+\n /* Nonzero means warn about implicit declarations.  */\n \n extern int warn_implicit;"}, {"sha": "49189c4d28991b614a8108c641e1a633f653d095", "filename": "gcc/c-opts.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a01fff59e70fba464453852c561213c3a24fb2c7/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a01fff59e70fba464453852c561213c3a24fb2c7/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=a01fff59e70fba464453852c561213c3a24fb2c7", "patch": "@@ -203,6 +203,7 @@ static void finish_options PARAMS ((void));\n   OPT(\"Wimplicit-function-declaration\",\tCL_C, OPT_Wimplicit_function_decl)   \\\n   OPT(\"Wimplicit-int\",\t\tCL_C,\t  OPT_Wimplicit_int)\t\t     \\\n   OPT(\"Wimport\",                CL_ALL,   OPT_Wimport)\t\t\t     \\\n+  OPT(\"Winvalid-offsetof\",      CL_CXX,   OPT_Winvalid_offsetof)             \\\n   OPT(\"Winvalid-pch\",           CL_ALL,   OPT_Winvalid_pch)\t\t     \\\n   OPT(\"Wlong-long\",\t\tCL_ALL,   OPT_Wlong_long)\t\t     \\\n   OPT(\"Wmain\",\t\t\tCL_C,     OPT_Wmain)\t\t\t     \\\n@@ -942,6 +943,10 @@ c_common_decode_option (argc, argv)\n       cpp_opts->warn_import = on;\n       break;\n \n+    case OPT_Winvalid_offsetof:\n+      warn_invalid_offsetof = on;\n+      break;\n+\n     case OPT_Winvalid_pch:\n       cpp_opts->warn_invalid_pch = on;\n       break;"}, {"sha": "15a0eb60e01110e9f7342999bcca1112ddba11b2", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a01fff59e70fba464453852c561213c3a24fb2c7/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a01fff59e70fba464453852c561213c3a24fb2c7/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a01fff59e70fba464453852c561213c3a24fb2c7", "patch": "@@ -1,3 +1,9 @@\n+2003-05-19  Matt Austern  <austern@apple.com>\n+\n+\t* lang-options.h: Document -Wno-invalid-offsetof\n+\t* typeck.c (build_class_member_access_expr): Don't complain about\n+\t(Foo *)p->x for non-POD Foo if warn_invalid_offset is zero.\n+\t\n 2003-05-18 Andrew Pinski <pinskia@physics.uc.edu>\n \n \t* name-lookup.c (free_binding_entry): fix where the GTY markers are."}, {"sha": "982cc62258e48dceebf9f01f5a712ccea1e1183d", "filename": "gcc/cp/lang-options.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a01fff59e70fba464453852c561213c3a24fb2c7/gcc%2Fcp%2Flang-options.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a01fff59e70fba464453852c561213c3a24fb2c7/gcc%2Fcp%2Flang-options.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flang-options.h?ref=a01fff59e70fba464453852c561213c3a24fb2c7", "patch": "@@ -157,3 +157,6 @@ DEFINE_LANG_NAME (\"C++\")\n   { \"-Wdeprecated\", \"\" },\n   { \"-Wno-deprecated\", \n     N_(\"Don't announce deprecation of compiler features\") },\n+  { \"-Winvalid-offsetof\", \"\" },\n+  { \"-Wno-invalid-offsetof\",\n+    N_(\"Don't warn about invalid uses of the offsetof macro\") },"}, {"sha": "21068b321eb20930bf5cc8385ace55fbd754ebd9", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a01fff59e70fba464453852c561213c3a24fb2c7/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a01fff59e70fba464453852c561213c3a24fb2c7/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=a01fff59e70fba464453852c561213c3a24fb2c7", "patch": "@@ -1974,7 +1974,8 @@ build_class_member_access_expr (tree object, tree member,\n \t give the right answer.  Note that we complain whether or not they\n \t actually used the offsetof macro, since there's no way to know at this\n \t point.  So we just give a warning, instead of a pedwarn.  */\n-      if (null_object_p && CLASSTYPE_NON_POD_P (object_type))\n+      if (null_object_p && warn_invalid_offsetof\n+\t  && CLASSTYPE_NON_POD_P (object_type))\n \t{\n \t  warning (\"invalid access to non-static data member `%D' of NULL object\", \n \t\t   member);"}, {"sha": "5a61ce73738d2c46d98c447b3553f9720497e6c9", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a01fff59e70fba464453852c561213c3a24fb2c7/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a01fff59e70fba464453852c561213c3a24fb2c7/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=a01fff59e70fba464453852c561213c3a24fb2c7", "patch": "@@ -215,6 +215,7 @@ in the following sections.\n -Wimplicit-function-declaration @gol\n -Werror-implicit-function-declaration @gol\n -Wimport  -Winline  -Winvalid-pch  -Wno-endif-labels @gol\n+-Wno-invalid-offsetof @gol\n -Wlarger-than-@var{len}  -Wlong-long @gol\n -Wmain  -Wmissing-braces @gol\n -Wmissing-format-attribute  -Wmissing-noreturn @gol\n@@ -2808,6 +2809,21 @@ code is to provide behavior which is selectable at compile-time.\n @opindex Winline\n Warn if a function can not be inlined and it was declared as inline.\n \n+@item -Wno-invalid-offsetof @r{(C++ only)}\n+@opindex Wno-invalid-offsetof\n+Suppress warnings from applying the @samp{offsetof} macro to a non-POD\n+type.  According to the 1998 ISO C++ standard, applying @samp{offsetof}\n+to a non-POD type is undefined.  In existing C++ implementations,\n+however, @samp{offsetof} typically gives meaningful results even when\n+applied to certain kinds of non-POD types. (Such as a simple\n+@samp{struct} that fails to be a POD type only by virtue of having a\n+constructor.)  This flag is for users who are aware that they are\n+writing nonportable code and who have deliberately chosen to ignore the\n+warning about it.\n+\n+The restrictions on @samp{offsetof} may be relaxed in a future version\n+of the C++ standard.\n+\n @item -Winvalid-pch\n @opindex Winvalid-pch\n Warn if a precompiled header (@pxref{Precompiled Headers}) is found in"}, {"sha": "f600765fd900c6d57eaeb4c2aa015e9d64f96186", "filename": "gcc/testsuite/g++.dg/other/offsetof3.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a01fff59e70fba464453852c561213c3a24fb2c7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Foffsetof3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a01fff59e70fba464453852c561213c3a24fb2c7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Foffsetof3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Foffsetof3.C?ref=a01fff59e70fba464453852c561213c3a24fb2c7", "patch": "@@ -0,0 +1,15 @@\n+/* Verify that offsetof warns if given a non-POD */\n+/* Copyright (C) 2003 Free Software Foundation, Inc. */\n+/* Contributed by Matt Austern <austern@apple.com> 15 May 2003 */\n+/* { dg-do compile } */\n+\n+struct X\n+{\n+  X() : x(3), y(4) { }\n+  int x, y;\n+};\n+\n+typedef X* pX;\n+\n+int yoff = int(&(pX(0)->y)); /* { dg-warning \"invalid access\" \"\" } */\n+/* { dg-warning \"macro was used incorrectly\" \"\" { target *-*-* } 14 } */"}, {"sha": "587231ef88ea49f4d531b2846d7bfe8ab83425c6", "filename": "gcc/testsuite/g++.dg/other/offsetof4.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a01fff59e70fba464453852c561213c3a24fb2c7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Foffsetof4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a01fff59e70fba464453852c561213c3a24fb2c7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Foffsetof4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Foffsetof4.C?ref=a01fff59e70fba464453852c561213c3a24fb2c7", "patch": "@@ -0,0 +1,15 @@\n+/* Verify that -Wno-invalid-offsetof disables warning */\n+/* Copyright (C) 2003 Free Software Foundation, Inc. */\n+/* Contributed by Matt Austern <austern@apple.com> 15 May 2003 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wno-invalid-offsetof\" } */\n+\n+struct X\n+{\n+  X() : x(3), y(4) { }\n+  int x, y;\n+};\n+\n+typedef X* pX;\n+\n+int yoff = int(&(pX(0)->y));"}]}