{"sha": "ca6c722561ce9b9dc7b59cfd9d29c9b466732721", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2E2YzcyMjU2MWNlOWI5ZGM3YjU5Y2ZkOWQyOWM5YjQ2NjczMjcyMQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-03-23T18:47:24Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-03-23T18:47:24Z"}, "message": "c++: Handle COMPOUND_EXPRs in get_narrower and warnings_for_convert_and_check [PR91993]\n\nAs the testcases shows, the -Wconversion warning behaves quite differently\nwhen -fsanitize=undefined vs. when not sanitizing, but in the end it is\nnot something specific to sanitizing, if a user uses\n  return static_cast<uc>(static_cast<uc>((d++, a) << 1U) | b) | c;\ninstead of\n  return static_cast<uc>(static_cast<uc>(a << 1U) | b) | c;\nand thus there is some COMPOUND_EXPR involved, cp_build_binary_op behaves\nsignificantly different, e.g. shorten_binary_op will have different result\n(uc for the case without COMPOUND_EXPR, int with it), but it isn't limited\nto that.\n\n> How about improving get_narrower to handle COMPOUND_EXPR?  I'd think that\n> would do the trick without affecting evaluation order.\n\nNot completely, had to change also warnings_for_convert_and_check, but with\nthat it works.  The float-cast-overflow* changes are needed because now with\n-O1+ we emit lots of -Woverflow warnings on the testcase, but we do emit\nthose warnings on the testcase even when compiling just with -O1 and without\n-fsanitize=float-cast-overflow, so it seems to me a change in the right\ndirection, having -fsanitize= or explicit comma expressions smaller effect\non the warnings that are emitted.\n\n2020-03-23  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/91993\n\t* tree.c (get_narrower): Handle COMPOUND_EXPR by recursing on\n\tultimate rhs and if returned something different, reconstructing\n\tthe COMPOUND_EXPRs.\n\n\t* c-warn.c (warnings_for_convert_and_check): For expr and/or\n\tresult being COMPOUND_EXPRs, skip to ultimate rhs.\n\n\t* g++.dg/warn/Wconversion-pr91993.C: New test.\n\t* g++.dg/ubsan/pr91993.C: New test.\n\t* c-c++-common/ubsan/float-cast-overflow-1.c: Add -Wno-overflow\n\tto dg-options.\n\t* c-c++-common/ubsan/float-cast-overflow-2.c: Likewise.\n\t* c-c++-common/ubsan/float-cast-overflow-4.c: Likewise.", "tree": {"sha": "76f1f9a7edf517e078a9f8a31bf30c027f867d94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/76f1f9a7edf517e078a9f8a31bf30c027f867d94"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca6c722561ce9b9dc7b59cfd9d29c9b466732721", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca6c722561ce9b9dc7b59cfd9d29c9b466732721", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca6c722561ce9b9dc7b59cfd9d29c9b466732721", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca6c722561ce9b9dc7b59cfd9d29c9b466732721/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5db9e89323cd0a0be16a94f2f984121531ea7772", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5db9e89323cd0a0be16a94f2f984121531ea7772", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5db9e89323cd0a0be16a94f2f984121531ea7772"}], "stats": {"total": 83, "additions": 80, "deletions": 3}, "files": [{"sha": "9ba58273c21683f6d9e3f34e1cd25c68477a6d6f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca6c722561ce9b9dc7b59cfd9d29c9b466732721/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca6c722561ce9b9dc7b59cfd9d29c9b466732721/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ca6c722561ce9b9dc7b59cfd9d29c9b466732721", "patch": "@@ -1,3 +1,10 @@\n+2020-03-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/91993\n+\t* tree.c (get_narrower): Handle COMPOUND_EXPR by recursing on\n+\tultimate rhs and if returned something different, reconstructing\n+\tthe COMPOUND_EXPRs.\n+\n 2020-03-23  Lewis Hyatt  <lhyatt@gmail.com>\n \n \t* opts.c (print_filtered_help): Improve the help text for alias options."}, {"sha": "0d805c64bdee33e754e130fbc985297f9259a116", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca6c722561ce9b9dc7b59cfd9d29c9b466732721/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca6c722561ce9b9dc7b59cfd9d29c9b466732721/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=ca6c722561ce9b9dc7b59cfd9d29c9b466732721", "patch": "@@ -1,3 +1,9 @@\n+2020-03-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/91993\n+\t* c-warn.c (warnings_for_convert_and_check): For expr and/or\n+\tresult being COMPOUND_EXPRs, skip to ultimate rhs.\n+\n 2020-03-20  Richard Sandiford  <richard.sandiford@arm.com>\n \n \tPR middle-end/94072"}, {"sha": "f6b3afc727c2e6c2ccc8cd9ebd453f7b74b04550", "filename": "gcc/c-family/c-warn.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca6c722561ce9b9dc7b59cfd9d29c9b466732721/gcc%2Fc-family%2Fc-warn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca6c722561ce9b9dc7b59cfd9d29c9b466732721/gcc%2Fc-family%2Fc-warn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-warn.c?ref=ca6c722561ce9b9dc7b59cfd9d29c9b466732721", "patch": "@@ -1359,6 +1359,11 @@ warnings_for_convert_and_check (location_t loc, tree type, tree expr,\n {\n   loc = expansion_point_location_if_in_system_header (loc);\n \n+  while (TREE_CODE (expr) == COMPOUND_EXPR)\n+    expr = TREE_OPERAND (expr, 1);\n+  while (TREE_CODE (result) == COMPOUND_EXPR)\n+    result = TREE_OPERAND (result, 1);\n+\n   bool cst = TREE_CODE_CLASS (TREE_CODE (result)) == tcc_constant;\n \n   tree exprtype = TREE_TYPE (expr);"}, {"sha": "1d053e0772168f3e3189064a863b30df469339fc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca6c722561ce9b9dc7b59cfd9d29c9b466732721/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca6c722561ce9b9dc7b59cfd9d29c9b466732721/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ca6c722561ce9b9dc7b59cfd9d29c9b466732721", "patch": "@@ -1,3 +1,13 @@\n+2020-03-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/91993\n+\t* g++.dg/warn/Wconversion-pr91993.C: New test.\n+\t* g++.dg/ubsan/pr91993.C: New test.\n+\t* c-c++-common/ubsan/float-cast-overflow-1.c: Add -Wno-overflow\n+\tto dg-options.\n+\t* c-c++-common/ubsan/float-cast-overflow-2.c: Likewise.\n+\t* c-c++-common/ubsan/float-cast-overflow-4.c: Likewise.\n+\n 2020-03-23  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n             Andre Vieira  <andre.simoesdiasvieira@arm.com>\n             Mihail Ionescu  <mihail.ionescu@arm.com>"}, {"sha": "6df065fd8f7758b5539182556181493476037b73", "filename": "gcc/testsuite/c-c++-common/ubsan/float-cast-overflow-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca6c722561ce9b9dc7b59cfd9d29c9b466732721/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Ffloat-cast-overflow-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca6c722561ce9b9dc7b59cfd9d29c9b466732721/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Ffloat-cast-overflow-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Ffloat-cast-overflow-1.c?ref=ca6c722561ce9b9dc7b59cfd9d29c9b466732721", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run { target { lp64 || ilp32 } } } */\n-/* { dg-options \"-fsanitize=float-cast-overflow\" } */\n+/* { dg-options \"-fsanitize=float-cast-overflow -Wno-overflow\" } */\n /* { dg-additional-options \"-ffloat-store\" { target { ia32 } } } */\n /* { dg-additional-options \"-mieee\" { target { { alpha*-*-* } || { sh*-*-* } } } } */\n "}, {"sha": "ea685ceaabdb6afe7104653c496eab74e032dd17", "filename": "gcc/testsuite/c-c++-common/ubsan/float-cast-overflow-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca6c722561ce9b9dc7b59cfd9d29c9b466732721/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Ffloat-cast-overflow-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca6c722561ce9b9dc7b59cfd9d29c9b466732721/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Ffloat-cast-overflow-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Ffloat-cast-overflow-2.c?ref=ca6c722561ce9b9dc7b59cfd9d29c9b466732721", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do run } */\n /* { dg-require-effective-target int128 } */\n-/* { dg-options \"-fsanitize=float-cast-overflow\" } */\n+/* { dg-options \"-fsanitize=float-cast-overflow -Wno-overflow\" } */\n \n #include \"float-cast.h\"\n "}, {"sha": "68f854906490ae5200a0da4c07a2dc1e64617109", "filename": "gcc/testsuite/c-c++-common/ubsan/float-cast-overflow-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca6c722561ce9b9dc7b59cfd9d29c9b466732721/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Ffloat-cast-overflow-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca6c722561ce9b9dc7b59cfd9d29c9b466732721/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Ffloat-cast-overflow-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Ffloat-cast-overflow-4.c?ref=ca6c722561ce9b9dc7b59cfd9d29c9b466732721", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run { target { lp64 } } } */\n-/* { dg-options \"-fsanitize=float-cast-overflow\" } */\n+/* { dg-options \"-fsanitize=float-cast-overflow -Wno-overflow\" } */\n \n #include <limits.h>\n #include \"float-cast.h\""}, {"sha": "f903398060af229c734bbe894b497e8705dc3315", "filename": "gcc/testsuite/g++.dg/ubsan/pr91993.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca6c722561ce9b9dc7b59cfd9d29c9b466732721/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fpr91993.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca6c722561ce9b9dc7b59cfd9d29c9b466732721/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fpr91993.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fpr91993.C?ref=ca6c722561ce9b9dc7b59cfd9d29c9b466732721", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/91993\n+// { dg-do compile }\n+// { dg-options \"-Wconversion -fsanitize=undefined\" }\n+\n+typedef unsigned char uc;\n+\n+int\n+foo (const uc &a, const uc &b, const uc &c)\n+{\n+  return static_cast<uc>(static_cast<uc>(a << 1U) | b) | c;\t\t// { dg-bogus \"conversion from 'int' to 'unsigned char' may change value\" }\n+}\n+\n+int\n+bar (const uc &a, const uc &b, const uc &c, int &d)\n+{\n+  return static_cast<uc>(static_cast<uc>((d++, a) << 1U) | b) | c;\t// { dg-bogus \"conversion from 'int' to 'unsigned char' may change value\" }\n+}"}, {"sha": "63a8462f9edb45ea8c0977ab66dda1b68d2a6c7f", "filename": "gcc/testsuite/g++.dg/warn/Wconversion-pr91993.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca6c722561ce9b9dc7b59cfd9d29c9b466732721/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWconversion-pr91993.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca6c722561ce9b9dc7b59cfd9d29c9b466732721/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWconversion-pr91993.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWconversion-pr91993.C?ref=ca6c722561ce9b9dc7b59cfd9d29c9b466732721", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/91993\n+// { dg-do compile }\n+// { dg-options \"-Wconversion\" }\n+\n+typedef unsigned char uc;\n+\n+int\n+foo (const uc &a, const uc &b, const uc &c)\n+{\n+  return static_cast<uc>(static_cast<uc>(a << 1U) | b) | c;\t\t// { dg-bogus \"conversion from 'int' to 'unsigned char' may change value\" }\n+}\n+\n+int\n+bar (const uc &a, const uc &b, const uc &c, int &d)\n+{\n+  return static_cast<uc>(static_cast<uc>((d++, a) << 1U) | b) | c;\t// { dg-bogus \"conversion from 'int' to 'unsigned char' may change value\" }\n+}"}, {"sha": "f38dfffc16ebedf3e2dfd6a9fafddeb534aab864", "filename": "gcc/tree.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca6c722561ce9b9dc7b59cfd9d29c9b466732721/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca6c722561ce9b9dc7b59cfd9d29c9b466732721/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=ca6c722561ce9b9dc7b59cfd9d29c9b466732721", "patch": "@@ -8862,6 +8862,21 @@ get_narrower (tree op, int *unsignedp_ptr)\n   tree win = op;\n   bool integral_p = INTEGRAL_TYPE_P (TREE_TYPE (op));\n \n+  if (TREE_CODE (op) == COMPOUND_EXPR)\n+    {\n+      while (TREE_CODE (op) == COMPOUND_EXPR)\n+\top = TREE_OPERAND (op, 1);\n+      tree ret = get_narrower (op, unsignedp_ptr);\n+      if (ret == op)\n+\treturn win;\n+      op = win;\n+      for (tree *p = &win; TREE_CODE (op) == COMPOUND_EXPR;\n+\t   op = TREE_OPERAND (op, 1), p = &TREE_OPERAND (*p, 1))\n+\t*p = build2_loc (EXPR_LOCATION (op), COMPOUND_EXPR,\n+\t\t\t TREE_TYPE (ret), TREE_OPERAND (op, 0),\n+\t\t\t ret);\n+      return win;\n+    }\n   while (TREE_CODE (op) == NOP_EXPR)\n     {\n       int bitschange"}]}