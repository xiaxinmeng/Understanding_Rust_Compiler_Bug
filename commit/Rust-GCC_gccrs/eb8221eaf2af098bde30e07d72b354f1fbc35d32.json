{"sha": "eb8221eaf2af098bde30e07d72b354f1fbc35d32", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWI4MjIxZWFmMmFmMDk4YmRlMzBlMDdkNzJiMzU0ZjFmYmMzNWQzMg==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@integrable-solutions.net", "date": "2003-07-18T23:05:53Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2003-07-18T23:05:53Z"}, "message": "c-common.c: Don't undefine GCC_DIAG_STYLE.\n\n\t* c-common.c: Don't undefine GCC_DIAG_STYLE.\n\t(fname_decl): Don't use xxx_with_decl.\n\t(c_add_case_label): Likewise.\n\t(handle_section_attribute): Likewise.\n\t(handle_alias_attribute): Likewise.\n\t(handle_no_instrument_function_attribute): Likewise.\n\t(handle_no_limit_stack_attribute): Likewise.\n\t* c-objc-common.c (c_tree_printer): Print IDENTIFIER_NODEs.\n\t* c-format.c (gcc_cdiag_char_table): Add '%E' format-specifier.\n\nFrom-SVN: r69573", "tree": {"sha": "e81f45be8f3697dff7a213072c4faf54291168c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e81f45be8f3697dff7a213072c4faf54291168c6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb8221eaf2af098bde30e07d72b354f1fbc35d32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb8221eaf2af098bde30e07d72b354f1fbc35d32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb8221eaf2af098bde30e07d72b354f1fbc35d32", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb8221eaf2af098bde30e07d72b354f1fbc35d32/comments", "author": {"login": "cxx-undef", "id": 5528103, "node_id": "MDQ6VXNlcjU1MjgxMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/5528103?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cxx-undef", "html_url": "https://github.com/cxx-undef", "followers_url": "https://api.github.com/users/cxx-undef/followers", "following_url": "https://api.github.com/users/cxx-undef/following{/other_user}", "gists_url": "https://api.github.com/users/cxx-undef/gists{/gist_id}", "starred_url": "https://api.github.com/users/cxx-undef/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cxx-undef/subscriptions", "organizations_url": "https://api.github.com/users/cxx-undef/orgs", "repos_url": "https://api.github.com/users/cxx-undef/repos", "events_url": "https://api.github.com/users/cxx-undef/events{/privacy}", "received_events_url": "https://api.github.com/users/cxx-undef/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "65f43cdfee83049bc0008c71b182e813c4c86306", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65f43cdfee83049bc0008c71b182e813c4c86306", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65f43cdfee83049bc0008c71b182e813c4c86306"}], "stats": {"total": 83, "additions": 49, "deletions": 34}, "files": [{"sha": "8bd54a91e232469f1af1f4349161b12730fe7072", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb8221eaf2af098bde30e07d72b354f1fbc35d32/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb8221eaf2af098bde30e07d72b354f1fbc35d32/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eb8221eaf2af098bde30e07d72b354f1fbc35d32", "patch": "@@ -1,3 +1,15 @@\n+2003-07-19  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n+\n+\t* c-common.c: Don't undefine GCC_DIAG_STYLE.\n+\t(fname_decl): Don't use xxx_with_decl.\n+\t(c_add_case_label): Likewise.\n+\t(handle_section_attribute): Likewise.\n+\t(handle_alias_attribute): Likewise.\n+\t(handle_no_instrument_function_attribute): Likewise.\n+\t(handle_no_limit_stack_attribute): Likewise.\n+\t* c-objc-common.c (c_tree_printer): Print IDENTIFIER_NODEs.\n+\t* c-format.c (gcc_cdiag_char_table): Add '%E' format-specifier.\n+\n 2003-07-19  Zdenek Dvorak  <rakdver@atrey.karlin.mff.cuni.cz>\n \n \t* Makefile.in (ifcvt.o): Add cfgloop.h."}, {"sha": "c88356f403868a5fcbd6984820c0cf506e6c6463", "filename": "gcc/c-common.c", "status": "modified", "additions": 27, "deletions": 33, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb8221eaf2af098bde30e07d72b354f1fbc35d32/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb8221eaf2af098bde30e07d72b354f1fbc35d32/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=eb8221eaf2af098bde30e07d72b354f1fbc35d32", "patch": "@@ -41,10 +41,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"langhooks.h\"\n #include \"tree-inline.h\"\n #include \"c-tree.h\"\n-/* In order to ensure we use a common subset of valid specifiers\n-   (between the various C family frontends) in this file, we restrict\n-   ourselves to the generic specifier set.  */\n-#undef GCC_DIAG_STYLE\n #include \"toplev.h\"\n \n cpp_reader *parse_in;\t\t/* Declared in c-pragma.h.  */\n@@ -1131,7 +1127,8 @@ fname_decl (unsigned int rid, tree id)\n       input_line = saved_lineno;\n     }\n   if (!ix && !current_function_decl)\n-    pedwarn_with_decl (decl, \"`%s' is not defined outside of function scope\");\n+    pedwarn (\"%H'%D' is not defined outside of function scope\",\n+             &DECL_SOURCE_LOCATION (decl), decl);\n \n   return decl;\n }\n@@ -3916,18 +3913,19 @@ c_add_case_label (splay_tree cases, tree cond, tree low_value,\n       if (high_value)\n \t{\n \t  error (\"duplicate (or overlapping) case value\");\n-\t  error_with_decl (duplicate,\n-\t\t\t   \"this is the first entry overlapping that value\");\n+\t  error (\"%Hthis is the first entry overlapping that value\",\n+                 &DECL_SOURCE_LOCATION (duplicate));\n \t}\n       else if (low_value)\n \t{\n \t  error (\"duplicate case value\") ;\n-\t  error_with_decl (duplicate, \"previously used here\");\n+\t  error (\"%Hpreviously used here\", &DECL_SOURCE_LOCATION (duplicate));\n \t}\n       else\n \t{\n \t  error (\"multiple default labels in one switch\");\n-\t  error_with_decl (duplicate, \"this is the first default label\");\n+\t  error (\"%Hthis is the first default label\",\n+                 &DECL_SOURCE_LOCATION (duplicate));\n \t}\n       if (!cases->root)\n \tadd_stmt (build_case_label (NULL_TREE, NULL_TREE, label));\n@@ -4958,8 +4956,8 @@ handle_section_attribute (tree *node, tree name ATTRIBUTE_UNUSED, tree args,\n \t      && current_function_decl != NULL_TREE\n \t      && ! TREE_STATIC (decl))\n \t    {\n-\t      error_with_decl (decl,\n-\t\t\t       \"section attribute cannot be specified for local variables\");\n+\t      error (\"%Hsection attribute cannot be specified for \"\n+                     \"local variables\", &DECL_SOURCE_LOCATION (decl));\n \t      *no_add_attrs = true;\n \t    }\n \n@@ -4969,24 +4967,24 @@ handle_section_attribute (tree *node, tree name ATTRIBUTE_UNUSED, tree args,\n \t\t   && strcmp (TREE_STRING_POINTER (DECL_SECTION_NAME (decl)),\n \t\t\t      TREE_STRING_POINTER (TREE_VALUE (args))) != 0)\n \t    {\n-\t      error_with_decl (*node,\n-\t\t\t       \"section of `%s' conflicts with previous declaration\");\n+\t      error (\"%Hsection of '%D' conflicts with previous declaration\",\n+                     &DECL_SOURCE_LOCATION (*node), *node);\n \t      *no_add_attrs = true;\n \t    }\n \t  else\n \t    DECL_SECTION_NAME (decl) = TREE_VALUE (args);\n \t}\n       else\n \t{\n-\t  error_with_decl (*node,\n-\t\t\t   \"section attribute not allowed for `%s'\");\n+\t  error (\"%Hsection attribute not allowed for '%D'\",\n+                 &DECL_SOURCE_LOCATION (*node), *node);\n \t  *no_add_attrs = true;\n \t}\n     }\n   else\n     {\n-      error_with_decl (*node,\n-\t\t       \"section attributes are not supported for this target\");\n+      error (\"%Hsection attributes are not supported for this target\",\n+             &DECL_SOURCE_LOCATION (*node));\n       *no_add_attrs = true;\n     }\n \n@@ -5060,8 +5058,8 @@ handle_aligned_attribute (tree *node, tree name ATTRIBUTE_UNUSED, tree args,\n   else if (TREE_CODE (decl) != VAR_DECL\n \t   && TREE_CODE (decl) != FIELD_DECL)\n     {\n-      error_with_decl (decl,\n-\t\t       \"alignment may not be specified for `%s'\");\n+      error (\"%Halignment may not be specified for '%D'\",\n+             &DECL_SOURCE_LOCATION (decl), decl);\n       *no_add_attrs = true;\n     }\n   else\n@@ -5099,8 +5097,8 @@ handle_alias_attribute (tree *node, tree name, tree args,\n   if ((TREE_CODE (decl) == FUNCTION_DECL && DECL_INITIAL (decl))\n       || (TREE_CODE (decl) != FUNCTION_DECL && ! DECL_EXTERNAL (decl)))\n     {\n-      error_with_decl (decl,\n-\t\t       \"`%s' defined both normally and as an alias\");\n+      error (\"%H'%D' defined both normally and as an alias\",\n+             &DECL_SOURCE_LOCATION (decl), decl);\n       *no_add_attrs = true;\n     }\n   else if (decl_function_context (decl) == 0)\n@@ -5224,16 +5222,14 @@ handle_no_instrument_function_attribute (tree *node, tree name,\n \n   if (TREE_CODE (decl) != FUNCTION_DECL)\n     {\n-      error_with_decl (decl,\n-\t\t       \"`%s' attribute applies only to functions\",\n-\t\t       IDENTIFIER_POINTER (name));\n+      error (\"%H'%E' attribute applies only to functions\",\n+             &DECL_SOURCE_LOCATION (decl), name);\n       *no_add_attrs = true;\n     }\n   else if (DECL_INITIAL (decl))\n     {\n-      error_with_decl (decl,\n-\t\t       \"can't set `%s' attribute after definition\",\n-\t\t       IDENTIFIER_POINTER (name));\n+      error (\"%Hcan't set '%E' attribute after definition\",\n+             &DECL_SOURCE_LOCATION (decl), name);\n       *no_add_attrs = true;\n     }\n   else\n@@ -5274,16 +5270,14 @@ handle_no_limit_stack_attribute (tree *node, tree name,\n \n   if (TREE_CODE (decl) != FUNCTION_DECL)\n     {\n-      error_with_decl (decl,\n-\t\t       \"`%s' attribute applies only to functions\",\n-\t\t       IDENTIFIER_POINTER (name));\n+      error (\"%H'%E' attribute applies only to functions\",\n+             &DECL_SOURCE_LOCATION (decl), name);\n       *no_add_attrs = true;\n     }\n   else if (DECL_INITIAL (decl))\n     {\n-      error_with_decl (decl,\n-\t\t       \"can't set `%s' attribute after definition\",\n-\t\t       IDENTIFIER_POINTER (name));\n+      error (\"%Hcan't set '%E' attribute after definition\",\n+             &DECL_SOURCE_LOCATION (decl), name);\n       *no_add_attrs = true;\n     }\n   else"}, {"sha": "665b6d1cdc949bca7077a3ee74f63d74bc46026e", "filename": "gcc/c-format.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb8221eaf2af098bde30e07d72b354f1fbc35d32/gcc%2Fc-format.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb8221eaf2af098bde30e07d72b354f1fbc35d32/gcc%2Fc-format.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-format.c?ref=eb8221eaf2af098bde30e07d72b354f1fbc35d32", "patch": "@@ -830,7 +830,7 @@ static const format_char_info gcc_cdiag_char_table[] =\n   { \"H\",   0, STD_C89, { T89_V,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"\",   \"\"   },\n \n   /* These will require a \"tree\" at runtime.  */\n-  { \"DFT\", 0, STD_C89, { T89_V,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"\",   \"\"   },\n+  { \"DEFT\", 0, STD_C89, { T89_V,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"\",   \"\"   },\n \n   { \"m\",   0, STD_C89, NOARGUMENTS, \"\",      \"\"   },\n   { NULL,  0, 0, NOLENGTHS, NULL, NULL }"}, {"sha": "0d44e1d883bb86049a954205dd317449d80ae247", "filename": "gcc/c-objc-common.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb8221eaf2af098bde30e07d72b354f1fbc35d32/gcc%2Fc-objc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb8221eaf2af098bde30e07d72b354f1fbc35d32/gcc%2Fc-objc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-objc-common.c?ref=eb8221eaf2af098bde30e07d72b354f1fbc35d32", "patch": "@@ -407,6 +407,7 @@ c_objc_common_finish_file (void)\n    source-level entity onto BUFFER.  The meaning of the format specifiers\n    is as follows:\n    %D: a general decl,\n+   %E: An expression,\n    %F: a function declaration,\n    %T: a type.\n \n@@ -432,6 +433,14 @@ c_tree_printer (output_buffer *buffer, text_info *text)\n       }\n       return true;\n \n+    case 'E':\n+       if (TREE_CODE (t) == IDENTIFIER_NODE)\n+         {\n+           output_add_string (buffer, IDENTIFIER_POINTER (t));\n+           return true;\n+         }\n+       return false;\n+\n     default:\n       return false;\n     }"}]}