{"sha": "3695c25fd69298585a64cb682a84027ccbd4b724", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzY5NWMyNWZkNjkyOTg1ODVhNjRjYjY4MmE4NDAyN2NjYmQ0YjcyNA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2003-02-28T22:53:50Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2003-02-28T22:53:50Z"}, "message": "stor-layout.c (variable_size): Leave a minus 1 outside the SAVE_EXPR.\n\n        * stor-layout.c (variable_size): Leave a minus 1 outside the\n        SAVE_EXPR.\n\nFrom-SVN: r63585", "tree": {"sha": "d4062331b69694bd3a7bf9f269219dca8daa4de9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d4062331b69694bd3a7bf9f269219dca8daa4de9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3695c25fd69298585a64cb682a84027ccbd4b724", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3695c25fd69298585a64cb682a84027ccbd4b724", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3695c25fd69298585a64cb682a84027ccbd4b724", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3695c25fd69298585a64cb682a84027ccbd4b724/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0ea05c0da385f546437e32c43512dc2565c504eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ea05c0da385f546437e32c43512dc2565c504eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ea05c0da385f546437e32c43512dc2565c504eb"}], "stats": {"total": 25, "additions": 17, "deletions": 8}, "files": [{"sha": "f1407b9531c613f52352d89bf31285fb30ee5c06", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3695c25fd69298585a64cb682a84027ccbd4b724/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3695c25fd69298585a64cb682a84027ccbd4b724/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3695c25fd69298585a64cb682a84027ccbd4b724", "patch": "@@ -1,3 +1,8 @@\n+2003-02-28  Jason Merrill  <jason@redhat.com>\n+\n+\t* stor-layout.c (variable_size): Leave a \"minus 1\" outside the\n+\tSAVE_EXPR.\n+\n 2003-02-28  David Edelsohn  <edelsohn@gnu.org>\n \n \t* config/rs6000/power4.md: Add compare bypass."}, {"sha": "6caaf5f70deb12a97a82a389253ab86bc313b3e2", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3695c25fd69298585a64cb682a84027ccbd4b724/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3695c25fd69298585a64cb682a84027ccbd4b724/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=3695c25fd69298585a64cb682a84027ccbd4b724", "patch": "@@ -157,6 +157,8 @@ tree\n variable_size (size)\n      tree size;\n {\n+  tree save;\n+\n   /* If the language-processor is to take responsibility for variable-sized\n      items (e.g., languages which have elaboration procedures like Ada),\n      just return SIZE unchanged.  Likewise for self-referential sizes and\n@@ -166,7 +168,12 @@ variable_size (size)\n       || contains_placeholder_p (size))\n     return size;\n \n-  size = save_expr (size);\n+  if (TREE_CODE (size) == MINUS_EXPR && integer_onep (TREE_OPERAND (size, 1)))\n+    /* If this is the upper bound of a C array, leave the minus 1 outside\n+       the SAVE_EXPR so it can be folded away.  */\n+    TREE_OPERAND (size, 0) = save = save_expr (TREE_OPERAND (size, 0));\n+  else\n+    size = save = save_expr (size);\n \n   /* If an array with a variable number of elements is declared, and\n      the elements require destruction, we will emit a cleanup for the\n@@ -176,8 +183,8 @@ variable_size (size)\n      `unsaved', i.e., all SAVE_EXPRs are recalculated.  However, we do\n      not wish to do that here; the array-size is the same in both\n      places.  */\n-  if (TREE_CODE (size) == SAVE_EXPR)\n-    SAVE_EXPR_PERSISTENT_P (size) = 1;\n+  if (TREE_CODE (save) == SAVE_EXPR)\n+    SAVE_EXPR_PERSISTENT_P (save) = 1;\n \n   if ((*lang_hooks.decls.global_bindings_p) ())\n     {\n@@ -190,16 +197,13 @@ variable_size (size)\n     }\n \n   if (immediate_size_expand)\n-    /* NULL_RTX is not defined; neither is the rtx type.\n-       Also, we would like to pass const0_rtx here, but don't have it.  */\n-    expand_expr (size, expand_expr (integer_zero_node, NULL_RTX, VOIDmode, 0),\n-\t\t VOIDmode, 0);\n+    expand_expr (save, const0_rtx, VOIDmode, 0);\n   else if (cfun != 0 && cfun->x_dont_save_pending_sizes_p)\n     /* The front-end doesn't want us to keep a list of the expressions\n        that determine sizes for variable size objects.  */\n     ;\n   else\n-    put_pending_size (size);\n+    put_pending_size (save);\n \n   return size;\n }"}]}