{"sha": "e42d2186bdf3c9de8316e718b330f0c3c3701e58", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTQyZDIxODZiZGYzYzlkZTgzMTZlNzE4YjMzMGYwYzNjMzcwMWU1OA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2015-10-20T10:41:38Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-10-20T10:41:38Z"}, "message": "gnat_ugn.texi, [...]: Regenerate.\n\n\t* gnat_ugn.texi, gnat_rm.texi: Regenerate.\n\t* doc/gnat_ugn/gnat_project_manager.rst,\n\tdoc/gnat_ugn/building_executable_programs_with_gnat.rst,\n\tdoc/gnat_ugn/the_gnat_compilation_model.rst,\n\tdoc/gnat_rm/standard_and_implementation_defined_restrictions.rst,\n\tdoc/gnat_rm/implementation_defined_pragmas.rst,\n\tdoc/gnat_rm/the_gnat_library.rst,\n\tdoc/gnat_rm/implementation_defined_characteristics.rst: Update doc.\n\nFrom-SVN: r229046", "tree": {"sha": "33142df8132b01f1c359eb149b3925ce532f6730", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/33142df8132b01f1c359eb149b3925ce532f6730"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e42d2186bdf3c9de8316e718b330f0c3c3701e58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e42d2186bdf3c9de8316e718b330f0c3c3701e58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e42d2186bdf3c9de8316e718b330f0c3c3701e58", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e42d2186bdf3c9de8316e718b330f0c3c3701e58/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2ee31fbf05d78a62c0590744edc8334d4111c1f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ee31fbf05d78a62c0590744edc8334d4111c1f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ee31fbf05d78a62c0590744edc8334d4111c1f1"}], "stats": {"total": 1881, "additions": 941, "deletions": 940}, "files": [{"sha": "db9d2158c426d6138b3d7bf87cb56d3eebe46f5c", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e42d2186bdf3c9de8316e718b330f0c3c3701e58/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e42d2186bdf3c9de8316e718b330f0c3c3701e58/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=e42d2186bdf3c9de8316e718b330f0c3c3701e58", "patch": "@@ -1,3 +1,14 @@\n+2015-10-20  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* gnat_ugn.texi, gnat_rm.texi: Regenerate.\n+\t* doc/gnat_ugn/gnat_project_manager.rst,\n+\tdoc/gnat_ugn/building_executable_programs_with_gnat.rst,\n+\tdoc/gnat_ugn/the_gnat_compilation_model.rst,\n+\tdoc/gnat_rm/standard_and_implementation_defined_restrictions.rst,\n+\tdoc/gnat_rm/implementation_defined_pragmas.rst,\n+\tdoc/gnat_rm/the_gnat_library.rst,\n+\tdoc/gnat_rm/implementation_defined_characteristics.rst: Update doc.\n+\n 2015-10-20  Arnaud Charlet  <charlet@adacore.com>\n \n \t* gcc-interface/Makefile.in: Update targets."}, {"sha": "68c5039b41c7fc4d3221b18863a0444b75ded968", "filename": "gcc/ada/doc/gnat_rm/implementation_defined_characteristics.rst", "status": "modified", "additions": 154, "deletions": 161, "changes": 315, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e42d2186bdf3c9de8316e718b330f0c3c3701e58/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_characteristics.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e42d2186bdf3c9de8316e718b330f0c3c3701e58/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_characteristics.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_characteristics.rst?ref=e42d2186bdf3c9de8316e718b330f0c3c3701e58", "patch": "@@ -22,48 +22,48 @@ and other operating systems is an important consideration.  The numbers\n in each entry below correspond to the paragraph numbers in the Ada\n Reference Manual.\n \n-* \n+*\n   \"Whether or not each recommendation given in Implementation\n   Advice is followed.  See 1.1.2(37).\"\n \n See :ref:`Implementation_Advice`.\n \n-* \n+*\n   \"Capacity limitations of the implementation.  See 1.1.3(3).\"\n \n The complexity of programs that can be processed is limited only by the\n total amount of available virtual memory, and disk space for the\n generated object files.\n \n-* \n+*\n   \"Variations from the standard that are impractical to avoid\n   given the implementation's execution environment.  See 1.1.3(6).\"\n \n There are no variations from the standard.\n \n-* \n+*\n   \"Which code_statements cause external\n   interactions.  See 1.1.3(10).\"\n \n Any `code_statement` can potentially cause external interactions.\n \n-* \n+*\n   \"The coded representation for the text of an Ada\n   program.  See 2.1(4).\"\n \n See separate section on source representation.\n \n-* \n+*\n   \"The control functions allowed in comments.  See 2.1(14).\"\n \n See separate section on source representation.\n \n-* \n+*\n   \"The representation for an end of line.  See 2.2(2).\"\n \n See separate section on source representation.\n \n-* \n+*\n   \"Maximum supported line length and lexical element\n   length.  See 2.2(15).\"\n \n@@ -74,19 +74,19 @@ sets the maximum to 79) or *-gnatyMnn* which allows the maximum\n line length to be specified to be any value up to 32767. The maximum\n length of a lexical element is the same as the maximum line length.\n \n-* \n+*\n   \"Implementation defined pragmas.  See 2.8(14).\"\n \n See :ref:`Implementation_Defined_Pragmas`.\n \n-* \n+*\n   \"Effect of pragma `Optimize`.  See 2.8(27).\"\n \n Pragma `Optimize`, if given with a `Time` or `Space`\n parameter, checks that the optimization flag is set, and aborts if it is\n not.\n \n-* \n+*\n   \"The sequence of characters of the value returned by\n   ``S'Image`` when some of the graphic characters of\n   ``S'Wide_Image`` are not defined in `Character`.  See\n@@ -96,7 +96,7 @@ The sequence of characters is as defined by the wide character encoding\n method used for the source.  See section on source representation for\n further details.\n \n-* \n+*\n   \"The predefined integer types declared in\n   `Standard`.  See 3.5.4(25).\"\n \n@@ -106,31 +106,31 @@ Type                   Representation\n *Short_Short_Integer*  8 bit signed\n *Short_Integer*        (Short) 16 bit signed\n *Integer*              32 bit signed\n-*Long_Integer*         64 bit signed (on most 64 bit targets, \n+*Long_Integer*         64 bit signed (on most 64 bit targets,\n                        depending on the C definition of long).\n                        32 bit signed (all other targets)\n *Long_Long_Integer*    64 bit signed\n ====================== =======================================\n \n-* \n+*\n   \"Any nonstandard integer types and the operators defined\n   for them.  See 3.5.4(26).\"\n \n There are no nonstandard integer types.\n \n-* \n+*\n   \"Any nonstandard real types and the operators defined for\n   them.  See 3.5.6(8).\"\n \n There are no nonstandard real types.\n \n-* \n+*\n   \"What combinations of requested decimal precision and range\n   are supported for floating point types.  See 3.5.7(7).\"\n \n The precision and range is as defined by the IEEE standard.\n \n-* \n+*\n   \"The predefined floating point types declared in\n   `Standard`.  See 3.5.7(16).\"\n \n@@ -143,12 +143,12 @@ Type                   Representation\n *Long_Long_Float*      64 bit IEEE long (80 bit IEEE long on x86 processors)\n ====================== ====================================================\n \n-* \n+*\n   \"The small of an ordinary fixed point type.  See 3.5.9(8).\"\n \n `Fine_Delta` is 2**(-63)\n \n-* \n+*\n   \"What combinations of small, range, and digits are\n   supported for fixed point types.  See 3.5.9(10).\"\n \n@@ -160,51 +160,51 @@ Text_IO is accurate to only 53 bits, rather than the full mantissa.  This\n is because floating-point conversions are used to convert fixed point.\n \n \n-* \n+*\n   \"The result of `Tags.Expanded_Name` for types declared\n   within an unnamed `block_statement`.  See 3.9(10).\"\n \n Block numbers of the form `B`nnn``, where `nnn` is a\n decimal integer are allocated.\n \n-* \n+*\n   \"Implementation-defined attributes.  See 4.1.4(12).\"\n \n See :ref:`Implementation_Defined_Attributes`.\n \n-* \n+*\n   \"Any implementation-defined time types.  See 9.6(6).\"\n \n There are no implementation-defined time types.\n \n-* \n+*\n   \"The time base associated with relative delays.\"\n \n See 9.6(20).  The time base used is that provided by the C library\n function `gettimeofday`.\n \n-* \n+*\n   \"The time base of the type `Calendar.Time`.  See\n   9.6(23).\"\n \n The time base used is that provided by the C library function\n `gettimeofday`.\n \n-* \n+*\n   \"The time zone used for package `Calendar`\n   operations.  See 9.6(24).\"\n \n The time zone used by package `Calendar` is the current system time zone\n setting for local time, as accessed by the C library function\n `localtime`.\n \n-* \n+*\n   \"Any limit on `delay_until_statements` of\n   `select_statements`.  See 9.6(29).\"\n \n There are no such limits.\n \n-* \n+*\n   \"Whether or not two non-overlapping parts of a composite\n   object are independently addressable, in the case where packing, record\n   layout, or `Component_Size` is specified for the object.  See\n@@ -213,27 +213,27 @@ There are no such limits.\n Separate components are independently addressable if they do not share\n overlapping storage units.\n \n-* \n+*\n   \"The representation for a compilation.  See 10.1(2).\"\n \n A compilation is represented by a sequence of files presented to the\n compiler in a single invocation of the *gcc* command.\n \n-* \n+*\n   \"Any restrictions on compilations that contain multiple\n   compilation_units.  See 10.1(4).\"\n \n No single file can contain more than one compilation unit, but any\n sequence of files can be presented to the compiler as a single\n compilation.\n \n-* \n+*\n   \"The mechanisms for creating an environment and for adding\n   and replacing compilation units.  See 10.1.4(3).\"\n \n See separate section on compilation model.\n \n-* \n+*\n   \"The manner of explicitly assigning library units to a\n   partition.  See 10.2(2).\"\n \n@@ -256,7 +256,7 @@ be included automatically).  For full details on the use of these\n options, refer to the `GNAT Make Program gnatmake` in the\n :title:`GNAT User's Guide`.\n \n-* \n+*\n   \"The implementation-defined means, if any, of specifying\n   which compilation units are needed by a given compilation unit.  See\n   10.2(2).\"\n@@ -266,14 +266,14 @@ the Ada Reference Manual section 10.2(2-6).  There are no\n implementation-defined pragmas or other implementation-defined\n means for specifying needed units.\n \n-* \n+*\n   \"The manner of designating the main subprogram of a\n   partition.  See 10.2(7).\"\n \n The main program is designated by providing the name of the\n corresponding :file:`ALI` file as the input parameter to the binder.\n \n-* \n+*\n   \"The order of elaboration of `library_items`.  See\n   10.2(18).\"\n \n@@ -286,7 +286,7 @@ clauses of a unit to determine the probably best choice, and\n third by elaborating in alphabetical order of unit names\n where a choice still remains.\n \n-* \n+*\n   \"Parameter passing and function return for the main\n   subprogram.  See 10.2(21).\"\n \n@@ -295,7 +295,7 @@ returning an integer type.  In the latter case, the returned integer\n value is the return code of the program (overriding any value that\n may have been set by a call to `Ada.Command_Line.Set_Exit_Status`).\n \n-* \n+*\n   \"The mechanisms for building and running partitions.  See\n   10.2(24).\"\n \n@@ -305,35 +305,35 @@ of the PCS) provides a completely flexible method for building and running\n programs consisting of multiple partitions.  See the separate GLADE manual\n for details.\n \n-* \n+*\n   \"The details of program execution, including program\n   termination.  See 10.2(25).\"\n \n See separate section on compilation model.\n \n-* \n+*\n   \"The semantics of any non-active partitions supported by the\n   implementation.  See 10.2(28).\"\n \n Passive partitions are supported on targets where shared memory is\n provided by the operating system.  See the GLADE reference manual for\n further details.\n \n-* \n+*\n   \"The information returned by `Exception_Message`.  See\n   11.4.1(10).\"\n \n Exception message returns the null string unless a specific message has\n been passed by the program.\n \n-* \n+*\n   \"The result of `Exceptions.Exception_Name` for types\n   declared within an unnamed `block_statement`.  See 11.4.1(12).\"\n \n Blocks have implementation defined names of the form `B`nnn``\n where `nnn` is an integer.\n \n-* \n+*\n   \"The information returned by\n   `Exception_Information`.  See 11.4.1(13).\"\n \n@@ -350,9 +350,9 @@ where\n \n   *  `nnnn` is the fully qualified name of the exception in all upper\n      case letters. This line is always present.\n-  \n+\n   *  `mmmm` is the message (this line present only if message is non-null)\n-  \n+\n   *  `ppp` is the Process Id value as a decimal integer (this line is\n      present only if the Process Id is nonzero). Currently we are\n      not making use of this field.\n@@ -366,71 +366,64 @@ where\n      The line terminator sequence at the end of each line, including\n      the last line is a single `LF` character (`16#0A#`).\n \n-* \n+*\n   \"Implementation-defined check names.  See 11.5(27).\"\n \n-The implementation defined check name Alignment_Check controls checking of\n-address clause values for proper alignment (that is, the address supplied\n-must be consistent with the alignment of the type).\n-\n-The implementation defined check name Predicate_Check controls whether\n-predicate checks are generated.\n-\n-The implementation defined check name Validity_Check controls whether\n-validity checks are generated.\n-\n-In addition, a user program can add implementation-defined check names\n-by means of the pragma Check_Name.\n+The implementation defined check names include Alignment_Check,\n+Atomic_Synchronization, Duplicated_Tag_Check, Container_Checks,\n+Tampering_Check, Predicate_Check, and Validity_Check. In addition, a user\n+program can add implementation-defined check names by means of the pragma\n+Check_Name. See the description of pragma `Suppress` for full details.\n \n-* \n+*\n   \"The interpretation of each aspect of representation.  See\n   13.1(20).\"\n \n See separate section on data representations.\n \n-* \n+*\n   \"Any restrictions placed upon representation items.  See\n   13.1(20).\"\n \n See separate section on data representations.\n \n-* \n+*\n   \"The meaning of `Size` for indefinite subtypes.  See\n   13.3(48).\"\n \n Size for an indefinite subtype is the maximum possible size, except that\n for the case of a subprogram parameter, the size of the parameter object\n is the actual size.\n \n-* \n+*\n   \"The default external representation for a type tag.  See\n   13.3(75).\"\n \n The default external representation for a type tag is the fully expanded\n name of the type in upper case letters.\n \n-* \n+*\n   \"What determines whether a compilation unit is the same in\n   two different partitions.  See 13.3(76).\"\n \n A compilation unit is the same in two different partitions if and only\n if it derives from the same source file.\n \n-* \n+*\n   \"Implementation-defined components.  See 13.5.1(15).\"\n \n The only implementation defined component is the tag for a tagged type,\n which contains a pointer to the dispatching table.\n \n-* \n+*\n   \"If `Word_Size` = `Storage_Unit`, the default bit\n   ordering.  See 13.5.3(5).\"\n \n `Word_Size` (32) is not the same as `Storage_Unit` (8) for this\n implementation, so no non-default bit ordering is supported.  The default\n bit ordering corresponds to the natural endianness of the target architecture.\n \n-* \n+*\n   \"The contents of the visible part of package `System`\n   and its language-defined children.  See 13.7(2).\"\n \n@@ -443,14 +436,14 @@ System.\n   Max_Priority           : constant Positive := Priority'Last;\n   Max_Interrupt_Priority : constant Positive := Interrupt_Priority'Last;\n \n-* \n+*\n   \"The contents of the visible part of package\n   `System.Machine_Code`, and the meaning of\n   `code_statements`.  See 13.8(7).\"\n \n See the definition and documentation in file :file:`s-maccod.ads`.\n \n-* \n+*\n   \"The effect of unchecked conversion.  See 13.9(11).\"\n \n Unchecked conversion between types of the same size\n@@ -467,7 +460,7 @@ unconstrained array are not permitted. If the target alignment is\n greater than the source alignment, then a copy of the result is\n made with appropriate alignment\n \n-* \n+*\n   \"The semantics of operations on invalid representations.\n   See 13.9.2(10-11).\"\n \n@@ -492,7 +485,7 @@ result in erroneous behavior. For example executing:\n As indicated, an exception is raised on the array assignment, but not\n on the simple assignment of the invalid negative value from Y to Z.\n \n-* \n+*\n   \"The manner of choosing a storage pool for an access type\n   when `Storage_Pool` is not specified for the type.  See 13.11(17).\"\n \n@@ -505,44 +498,44 @@ library units `System.Pool_Global`, `System.Pool_Size` and\n :file:`s-pooglo.ads` and :file:`s-pooloc.ads` for full details on the\n default pools used.\n \n-* \n+*\n   \"Whether or not the implementation provides user-accessible\n   names for the standard pool type(s).  See 13.11(17).\"\n \n See documentation in the sources of the run time mentioned in the previous\n paragraph.  All these pools are accessible by means of `with`'ing\n these units.\n \n-* \n+*\n   \"The meaning of `Storage_Size`.  See 13.11(18).\"\n \n `Storage_Size` is measured in storage units, and refers to the\n total space available for an access type collection, or to the primary\n stack space for a task.\n \n-* \n+*\n   \"Implementation-defined aspects of storage pools.  See\n   13.11(22).\"\n \n See documentation in the sources of the run time mentioned in the\n paragraph about standard storage pools above\n for details on GNAT-defined aspects of storage pools.\n \n-* \n+*\n   \"The set of restrictions allowed in a pragma\n   `Restrictions`.  See 13.12(7).\"\n \n See :ref:`Standard_and_Implementation_Defined_Restrictions`.\n \n-* \n+*\n   \"The consequences of violating limitations on\n   `Restrictions` pragmas.  See 13.12(9).\"\n \n Restrictions that can be checked at compile time result in illegalities\n if violated.  Currently there are no other consequences of violating\n restrictions.\n \n-* \n+*\n   \"The representation used by the `Read` and\n   `Write` attributes of elementary types in terms of stream\n   elements.  See 13.13.2(9).\"\n@@ -551,72 +544,72 @@ The representation is the in-memory representation of the base type of\n the type, using the number of bits corresponding to the\n ``type'Size`` value, and the natural ordering of the machine.\n \n-* \n+*\n   \"The names and characteristics of the numeric subtypes\n   declared in the visible part of package `Standard`.  See A.1(3).\"\n \n See items describing the integer and floating-point types supported.\n \n-* \n+*\n   \"The string returned by `Character_Set_Version`.\n   See A.3.5(3).\"\n \n `Ada.Wide_Characters.Handling.Character_Set_Version` returns\n the string \"Unicode 4.0\", referring to version 4.0 of the\n Unicode specification.\n \n-* \n+*\n   \"The accuracy actually achieved by the elementary\n   functions.  See A.5.1(1).\"\n \n The elementary functions correspond to the functions available in the C\n library.  Only fast math mode is implemented.\n \n-* \n+*\n   \"The sign of a zero result from some of the operators or\n   functions in `Numerics.Generic_Elementary_Functions`, when\n   `Float_Type'Signed_Zeros` is `True`.  See A.5.1(46).\"\n \n The sign of zeroes follows the requirements of the IEEE 754 standard on\n floating-point.\n \n-* \n+*\n   \"The value of\n   `Numerics.Float_Random.Max_Image_Width`.  See A.5.2(27).\"\n \n Maximum image width is 6864, see library file :file:`s-rannum.ads`.\n \n-* \n+*\n   \"The value of\n   `Numerics.Discrete_Random.Max_Image_Width`.  See A.5.2(27).\"\n \n Maximum image width is 6864, see library file :file:`s-rannum.ads`.\n \n-* \n+*\n   \"The algorithms for random number generation.  See\n   A.5.2(32).\"\n \n The algorithm is the Mersenne Twister, as documented in the source file\n :file:`s-rannum.adb`. This version of the algorithm has a period of\n 2**19937-1.\n \n-* \n+*\n   \"The string representation of a random number generator's\n   state.  See A.5.2(38).\"\n \n The value returned by the Image function is the concatenation of\n the fixed-width decimal representations of the 624 32-bit integers\n of the state vector.\n \n-* \n+*\n   \"The minimum time interval between calls to the\n   time-dependent Reset procedure that are guaranteed to initiate different\n   random number sequences.  See A.5.2(45).\"\n \n The minimum period between reset calls to guarantee distinct series of\n random numbers is one microsecond.\n \n-* \n+*\n   \"The values of the `Model_Mantissa`,\n   `Model_Emin`, `Model_Epsilon`, `Model`,\n   `Safe_First`, and `Safe_Last` attributes, if the Numerics\n@@ -625,56 +618,56 @@ random numbers is one microsecond.\n Run the compiler with *-gnatS* to produce a listing of package\n `Standard`, has the values of all numeric attributes.\n \n-* \n+*\n   \"Any implementation-defined characteristics of the\n   input-output packages.  See A.7(14).\"\n \n There are no special implementation defined characteristics for these\n packages.\n \n-* \n+*\n   \"The value of `Buffer_Size` in `Storage_IO`.  See\n   A.9(10).\"\n \n All type representations are contiguous, and the `Buffer_Size` is\n the value of ``type'Size`` rounded up to the next storage unit\n boundary.\n \n-* \n+*\n   \"External files for standard input, standard output, and\n   standard error See A.10(5).\"\n \n These files are mapped onto the files provided by the C streams\n libraries.  See source file :file:`i-cstrea.ads` for further details.\n \n-* \n+*\n   \"The accuracy of the value produced by `Put`.  See\n   A.10.9(36).\"\n \n If more digits are requested in the output than are represented by the\n precision of the value, zeroes are output in the corresponding least\n significant digit positions.\n \n-* \n+*\n   \"The meaning of `Argument_Count`, `Argument`, and\n   `Command_Name`.  See A.15(1).\"\n \n These are mapped onto the `argv` and `argc` parameters of the\n main program in the natural manner.\n \n-* \n+*\n   \"The interpretation of the `Form` parameter in procedure\n   `Create_Directory`.  See A.16(56).\"\n \n The `Form` parameter is not used.\n \n-* \n+*\n   \"The interpretation of the `Form` parameter in procedure\n   `Create_Path`.  See A.16(60).\"\n \n The `Form` parameter is not used.\n \n-* \n+*\n   \"The interpretation of the `Form` parameter in procedure\n   `Copy_File`.  See A.16(68).\"\n \n@@ -693,7 +686,7 @@ The only possible values for preserve= are:\n ================== ===================================================================\n Value              Meaning\n ================== ===================================================================\n-*no_attributes*    Do not try to preserve any file attributes. This is the \n+*no_attributes*    Do not try to preserve any file attributes. This is the\n                    default if no preserve= is found in Form.\n *all_attributes*   Try to preserve all file attributes (timestamps, access rights).\n *timestamps*       Preserve the timestamp of the copied file, but not the other\n@@ -705,11 +698,11 @@ The only possible values for mode= are:\n ============== ===============================================================================\n Value          Meaning\n ============== ===============================================================================\n-*copy*         Only do the copy if the destination file does not already exist. \n+*copy*         Only do the copy if the destination file does not already exist.\n                If it already exists, Copy_File fails.\n *overwrite*    Copy the file in all cases. Overwrite an already existing destination file.\n-*append*       Append the original file to the destination file. If the destination file \n-               does not exist, the destination file is a copy of the source file. \n+*append*       Append the original file to the destination file. If the destination file\n+               does not exist, the destination file is a copy of the source file.\n                When mode=append, the field preserve=, if it exists, is not taken into account.\n ============== ===============================================================================\n \n@@ -727,7 +720,7 @@ Examples of incorrect Forms::\n   Form => \"preserve=junk\"\n   Form => \"mode=internal, preserve=timestamps\"\n \n-* \n+*\n   \"The interpretation of the `Pattern` parameter, when not the null string,\n   in the `Start_Search` and `Search` procedures.\n   See A.16(104) and A.16(112).\"\n@@ -738,7 +731,7 @@ according to the syntax of regular expressions as defined in the\n \n See :ref:`GNAT.Regexp_(g-regexp.ads)`.\n \n-* \n+*\n   \"Implementation-defined convention names.  See B.1(11).\"\n \n The following convention names are supported\n@@ -784,12 +777,12 @@ Convention Name         Interpretation\n                         implementations, these names are accepted silently.\n ======================= ==============================================================================\n \n-* \n+*\n   \"The meaning of link names.  See B.1(36).\"\n \n Link names are the actual names used by the linker.\n \n-* \n+*\n   \"The manner of choosing link names when neither the link\n   name nor the address of an imported or exported entity is specified.  See\n   B.1(36).\"\n@@ -798,7 +791,7 @@ The default linker name is that which would be assigned by the relevant\n external language, interpreting the Ada name as being in all lower case\n letters.\n \n-* \n+*\n   \"The effect of pragma `Linker_Options`.  See B.1(37).\"\n \n The string passed to `Linker_Options` is presented uninterpreted as\n@@ -815,20 +808,20 @@ list of options passed to the linker is in reverse order of the elaboration\n order. For example, linker options for a body always appear before the options\n from the corresponding package spec.\n \n-* \n+*\n   \"The contents of the visible part of package\n   `Interfaces` and its language-defined descendants.  See B.2(1).\"\n \n See files with prefix :file:`i-` in the distributed library.\n \n-* \n+*\n   \"Implementation-defined children of package\n   `Interfaces`.  The contents of the visible part of package\n   `Interfaces`.  See B.2(11).\"\n \n See files with prefix :file:`i-` in the distributed library.\n \n-* \n+*\n   \"The types `Floating`, `Long_Floating`,\n   `Binary`, `Long_Binary`, `Decimal_ Element`, and\n   `COBOL_Character`; and the initialization of the variables\n@@ -848,41 +841,41 @@ COBOL                 Ada\n \n For initialization, see the file :file:`i-cobol.ads` in the distributed library.\n \n-* \n+*\n   \"Support for access to machine instructions.  See C.1(1).\"\n \n See documentation in file :file:`s-maccod.ads` in the distributed library.\n \n-* \n+*\n   \"Implementation-defined aspects of access to machine\n   operations.  See C.1(9).\"\n \n See documentation in file :file:`s-maccod.ads` in the distributed library.\n \n-* \n+*\n   \"Implementation-defined aspects of interrupts.  See C.3(2).\"\n \n Interrupts are mapped to signals or conditions as appropriate.  See\n definition of unit\n `Ada.Interrupt_Names` in source file :file:`a-intnam.ads` for details\n on the interrupts supported on a particular target.\n \n-* \n+*\n   \"Implementation-defined aspects of pre-elaboration.  See\n   C.4(13).\"\n \n GNAT does not permit a partition to be restarted without reloading,\n except under control of the debugger.\n \n-* \n+*\n   \"The semantics of pragma `Discard_Names`.  See C.5(7).\"\n \n Pragma `Discard_Names` causes names of enumeration literals to\n be suppressed.  In the presence of this pragma, the Image attribute\n provides the image of the Pos of the literal, and Value accepts\n Pos values.\n \n-* \n+*\n   \"The result of the `Task_Identification.Image`\n   attribute.  See C.7.1(7).\"\n \n@@ -910,28 +903,28 @@ No_Implicit_Heap_Allocation is in effect,  the image reduces to\n the numeric suffix, that is to say the hexadecimal representation of the\n virtual address of the control block of the task.\n \n-* \n+*\n   \"The value of `Current_Task` when in a protected entry\n   or interrupt handler.  See C.7.1(17).\"\n \n Protected entries or interrupt handlers can be executed by any\n convenient thread, so the value of `Current_Task` is undefined.\n \n-* \n+*\n   \"The effect of calling `Current_Task` from an entry\n   body or interrupt handler.  See C.7.1(19).\"\n \n The effect of calling `Current_Task` from an entry body or\n interrupt handler is to return the identification of the task currently\n executing the code.\n \n-* \n+*\n   \"Implementation-defined aspects of\n   `Task_Attributes`.  See C.7.2(19).\"\n \n There are no implementation-defined aspects of `Task_Attributes`.\n \n-* \n+*\n   \"Values of all `Metrics`.  See D(2).\"\n \n The metrics information for GNAT depends on the performance of the\n@@ -943,52 +936,52 @@ information on the performance of the underlying operating system,\n on the exact target in use, this information can be used to determine\n the required metrics.\n \n-* \n+*\n   \"The declarations of `Any_Priority` and\n   `Priority`.  See D.1(11).\"\n \n See declarations in file :file:`system.ads`.\n \n-* \n+*\n   \"Implementation-defined execution resources.  See D.1(15).\"\n \n There are no implementation-defined execution resources.\n \n-* \n+*\n   \"Whether, on a multiprocessor, a task that is waiting for\n   access to a protected object keeps its processor busy.  See D.2.1(3).\"\n \n On a multi-processor, a task that is waiting for access to a protected\n object does not keep its processor busy.\n \n-* \n+*\n   \"The affect of implementation defined execution resources\n   on task dispatching.  See D.2.1(9).\"\n \n Tasks map to threads in the threads package used by GNAT.  Where possible\n and appropriate, these threads correspond to native threads of the\n underlying operating system.\n \n-* \n+*\n   \"Implementation-defined `policy_identifiers` allowed\n   in a pragma `Task_Dispatching_Policy`.  See D.2.2(3).\"\n \n There are no implementation-defined policy-identifiers allowed in this\n pragma.\n \n-* \n+*\n   \"Implementation-defined aspects of priority inversion.  See\n   D.2.2(16).\"\n \n Execution of a task cannot be preempted by the implementation processing\n of delay expirations for lower priority tasks.\n \n-* \n+*\n   \"Implementation-defined task dispatching.  See D.2.2(18).\"\n \n The policy is the same as that of the underlying threads implementation.\n \n-* \n+*\n   \"Implementation-defined `policy_identifiers` allowed\n   in a pragma `Locking_Policy`.  See D.3(4).\"\n \n@@ -1002,94 +995,94 @@ requesting the lock.  On targets that support the\n read/write lock allowing multiple propected object functions to enter\n concurrently.\n \n-* \n+*\n   \"Default ceiling priorities.  See D.3(10).\"\n \n The ceiling priority of protected objects of the type\n `System.Interrupt_Priority'Last` as described in the Ada\n Reference Manual D.3(10),\n \n-* \n+*\n   \"The ceiling of any protected object used internally by\n   the implementation.  See D.3(16).\"\n \n The ceiling priority of internal protected objects is\n `System.Priority'Last`.\n \n-* \n+*\n   \"Implementation-defined queuing policies.  See D.4(1).\"\n \n There are no implementation-defined queuing policies.\n \n-* \n+*\n   \"On a multiprocessor, any conditions that cause the\n   completion of an aborted construct to be delayed later than what is\n   specified for a single processor.  See D.6(3).\"\n \n The semantics for abort on a multi-processor is the same as on a single\n processor, there are no further delays.\n \n-* \n+*\n   \"Any operations that implicitly require heap storage\n   allocation.  See D.7(8).\"\n \n The only operation that implicitly requires heap storage allocation is\n task creation.\n \n-* \n+*\n   \"What happens when a task terminates in the presence of\n   pragma `No_Task_Termination`. See D.7(15).\"\n \n Execution is erroneous in that case.\n \n-* \n+*\n   \"Implementation-defined aspects of pragma\n   `Restrictions`.  See D.7(20).\"\n \n There are no such implementation-defined aspects.\n \n-* \n+*\n   \"Implementation-defined aspects of package\n   `Real_Time`.  See D.8(17).\"\n \n There are no implementation defined aspects of package `Real_Time`.\n \n-* \n+*\n   \"Implementation-defined aspects of\n   `delay_statements`.  See D.9(8).\"\n \n Any difference greater than one microsecond will cause the task to be\n delayed (see D.9(7)).\n \n-* \n+*\n   \"The upper bound on the duration of interrupt blocking\n   caused by the implementation.  See D.12(5).\"\n \n The upper bound is determined by the underlying operating system.  In\n no cases is it more than 10 milliseconds.\n \n-* \n+*\n   \"The means for creating and executing distributed\n   programs.  See E(5).\"\n \n The GLADE package provides a utility GNATDIST for creating and executing\n distributed programs.  See the GLADE reference manual for further details.\n \n-* \n+*\n   \"Any events that can result in a partition becoming\n   inaccessible.  See E.1(7).\"\n \n See the GLADE reference manual for full details on such events.\n \n-* \n+*\n   \"The scheduling policies, treatment of priorities, and\n   management of shared resources between partitions in certain cases.  See\n   E.1(11).\"\n \n See the GLADE reference manual for full details on these aspects of\n multi-partition execution.\n \n-* \n+*\n   \"Events that cause the version of a compilation unit to\n   change.  See E.3(5).\"\n \n@@ -1099,27 +1092,27 @@ to change.  No other actions cause the version number to change.  All changes\n are significant except those which affect only layout, capitalization or\n comments.\n \n-* \n+*\n   \"Whether the execution of the remote subprogram is\n   immediately aborted as a result of cancellation.  See E.4(13).\"\n \n See the GLADE reference manual for details on the effect of abort in\n a distributed application.\n \n-* \n+*\n   \"Implementation-defined aspects of the PCS.  See E.5(25).\"\n \n See the GLADE reference manual for a full description of all implementation\n defined aspects of the PCS.\n \n-* \n+*\n   \"Implementation-defined interfaces in the PCS.  See\n   E.5(26).\"\n \n See the GLADE reference manual for a full description of all\n implementation defined interfaces.\n \n-* \n+*\n   \"The values of named numbers in the package\n   `Decimal`.  See F.2(7).\"\n \n@@ -1133,34 +1126,34 @@ Named Number         Value\n *Max_Decimal_Digits*  18\n ==================== ==========\n \n-* \n+*\n   \"The value of `Max_Picture_Length` in the package\n   `Text_IO.Editing`.  See F.3.3(16).\"\n \n 64\n \n-* \n+*\n   \"The value of `Max_Picture_Length` in the package\n   `Wide_Text_IO.Editing`.  See F.3.4(5).\"\n \n 64\n \n-* \n+*\n   \"The accuracy actually achieved by the complex elementary\n   functions and by other complex arithmetic operations.  See G.1(1).\"\n \n Standard library functions are used for the complex arithmetic\n operations.  Only fast math mode is currently supported.\n \n-* \n+*\n   \"The sign of a zero result (or a component thereof) from\n   any operator or function in `Numerics.Generic_Complex_Types`, when\n   `Real'Signed_Zeros` is True.  See G.1.1(53).\"\n \n The signs of zero values are as recommended by the relevant\n implementation advice.\n \n-* \n+*\n   \"The sign of a zero result (or a component thereof) from\n   any operator or function in\n   `Numerics.Generic_Complex_Elementary_Functions`, when\n@@ -1169,22 +1162,22 @@ implementation advice.\n The signs of zero values are as recommended by the relevant\n implementation advice.\n \n-* \n+*\n   \"Whether the strict mode or the relaxed mode is the\n   default.  See G.2(2).\"\n \n The strict mode is the default.  There is no separate relaxed mode.  GNAT\n provides a highly efficient implementation of strict mode.\n \n-* \n+*\n   \"The result interval in certain cases of fixed-to-float\n   conversion.  See G.2.1(10).\"\n \n For cases where the result interval is implementation dependent, the\n accuracy is that provided by performing all operations in 64-bit IEEE\n floating-point format.\n \n-* \n+*\n   \"The result of a floating point arithmetic operation in\n   overflow situations, when the `Machine_Overflows` attribute of the\n   result type is `False`.  See G.2.1(13).\"\n@@ -1197,14 +1190,14 @@ must be used for achieving IEEE conforming behavior (although at the cost\n of a significant performance penalty), so infinite and NaN values are\n properly generated.\n \n-* \n+*\n   \"The result interval for division (or exponentiation by a\n   negative exponent), when the floating point hardware implements division\n   as multiplication by a reciprocal.  See G.2.1(16).\"\n \n Not relevant, division is IEEE exact.\n \n-* \n+*\n   \"The definition of close result set, which determines the\n   accuracy of certain fixed point multiplications and divisions.  See\n   G.2.3(5).\"\n@@ -1214,7 +1207,7 @@ floating-point arithmetic.  The input operands are converted to\n floating-point, the operation is done in floating-point, and the result\n is converted to the target type.\n \n-* \n+*\n   \"Conditions on a `universal_real` operand of a fixed\n   point multiplication or division for which the result shall be in the\n   perfect result set.  See G.2.3(22).\"\n@@ -1223,72 +1216,72 @@ The result is only defined to be in the perfect result set if the result\n can be computed by a single scaling operation involving a scale factor\n representable in 64-bits.\n \n-* \n+*\n   \"The result of a fixed point arithmetic operation in\n   overflow situations, when the `Machine_Overflows` attribute of the\n   result type is `False`.  See G.2.3(27).\"\n \n Not relevant, `Machine_Overflows` is `True` for fixed-point\n types.\n \n-* \n+*\n   \"The result of an elementary function reference in\n   overflow situations, when the `Machine_Overflows` attribute of the\n   result type is `False`.  See G.2.4(4).\"\n \n IEEE infinite and Nan values are produced as appropriate.\n \n-* \n+*\n   \"The value of the angle threshold, within which certain\n   elementary functions, complex arithmetic operations, and complex\n   elementary functions yield results conforming to a maximum relative\n   error bound.  See G.2.4(10).\"\n \n Information on this subject is not yet available.\n \n-* \n+*\n   \"The accuracy of certain elementary functions for\n   parameters beyond the angle threshold.  See G.2.4(10).\"\n \n Information on this subject is not yet available.\n \n-* \n+*\n   \"The result of a complex arithmetic operation or complex\n   elementary function reference in overflow situations, when the\n   `Machine_Overflows` attribute of the corresponding real type is\n   `False`.  See G.2.6(5).\"\n \n IEEE infinite and Nan values are produced as appropriate.\n \n-* \n+*\n   \"The accuracy of certain complex arithmetic operations and\n   certain complex elementary functions for parameters (or components\n   thereof) beyond the angle threshold.  See G.2.6(8).\"\n \n Information on those subjects is not yet available.\n \n-* \n+*\n   \"Information regarding bounded errors and erroneous\n   execution.  See H.2(1).\"\n \n Information on this subject is not yet available.\n \n-* \n+*\n   \"Implementation-defined aspects of pragma\n   `Inspection_Point`.  See H.3.2(8).\"\n \n Pragma `Inspection_Point` ensures that the variable is live and can\n be examined by the debugger at the inspection point.\n \n-* \n+*\n   \"Implementation-defined aspects of pragma\n   `Restrictions`.  See H.4(25).\"\n \n There are no implementation-defined aspects of pragma `Restrictions`.  The\n use of pragma `Restrictions [No_Exceptions]` has no effect on the\n generated code.  Checks must suppressed by use of pragma `Suppress`.\n \n-* \n+*\n   \"Any restrictions on pragma `Restrictions`.  See\n   H.4(27).\"\n "}, {"sha": "5f8491be74556a6925d9fee8b45debf30906f8ef", "filename": "gcc/ada/doc/gnat_rm/implementation_defined_pragmas.rst", "status": "modified", "additions": 9, "deletions": 56, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e42d2186bdf3c9de8316e718b330f0c3c3701e58/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e42d2186bdf3c9de8316e718b330f0c3c3701e58/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst?ref=e42d2186bdf3c9de8316e718b330f0c3c3701e58", "patch": "@@ -803,24 +803,6 @@ compatibility with the standard `Assertion_Policy` pragma. The check\n policy setting `DISABLE` causes the second argument of a corresponding\n `Check` pragma to be completely ignored and not analyzed.\n \n-Pragma CIL_Constructor\n-======================\n-\n-Syntax:\n-\n-\n-::\n-\n-  pragma CIL_Constructor ([Entity =>] function_LOCAL_NAME);\n-\n-\n-This pragma is used to assert that the specified Ada function should be\n-mapped to the .NET constructor for some Ada tagged record type.\n-\n-See section 4.1 of the\n-`GNAT User's Guide: Supplement for the .NET Platform.`\n-for related information.\n-\n Pragma Comment\n ==============\n \n@@ -2864,42 +2846,6 @@ invariant pragma for the same entity.\n For further details on the use of this pragma, see the Ada 2012 documentation\n of the Type_Invariant aspect.\n \n-Pragma Java_Constructor\n-=======================\n-\n-Syntax:\n-\n-\n-::\n-\n-  pragma Java_Constructor ([Entity =>] function_LOCAL_NAME);\n-\n-\n-This pragma is used to assert that the specified Ada function should be\n-mapped to the Java constructor for some Ada tagged record type.\n-\n-See section 7.3.2 of the\n-`GNAT User's Guide: Supplement for the JVM Platform.`\n-for related information.\n-\n-Pragma Java_Interface\n-=====================\n-\n-Syntax:\n-\n-\n-::\n-\n-  pragma Java_Interface ([Entity =>] abstract_tagged_type_LOCAL_NAME);\n-\n-\n-This pragma is used to assert that the specified Ada abstract tagged type\n-is to be mapped to a Java interface name.\n-\n-See sections 7.1 and 7.2 of the\n-`GNAT User's Guide: Supplement for the JVM Platform.`\n-for related information.\n-\n Pragma Keep_Names\n =================\n \n@@ -5769,6 +5715,13 @@ names that are implementation defined (as permitted by the RM):\n   `Duplicated_Tag_Check` Can be used to suppress the check that is generated\n   for a duplicated tag value when a tagged type is declared.\n \n+*\n+  `Container_Checks` Can be used to suppress all checks within Ada.Containers\n+  and instances of its children, including Tampering_Check.\n+\n+*\n+  `Tampering_Check` Can be used to suppress tampering check in the containers.\n+\n *\n   `Predicate_Check` can be used to control whether predicate checks are\n   active. It is applicable only to predicates for which the policy is\n@@ -6479,8 +6432,8 @@ configuration pragma will ensure this test is not suppressed:\n This pragma is standard in Ada 2005. It is available in all earlier versions\n of Ada as an implementation-defined pragma.\n \n-Note that in addition to the checks defined in the Ada RM, GNAT recogizes\n-a number of implementation-defined check names. See description of pragma\n+Note that in addition to the checks defined in the Ada RM, GNAT recogizes a\n+number of implementation-defined check names. See the description of pragma\n `Suppress` for full details.\n \n Pragma Use_VADS_Size"}, {"sha": "1a88222c381b520abc7075cda338aae275d7fe86", "filename": "gcc/ada/doc/gnat_rm/standard_and_implementation_defined_restrictions.rst", "status": "modified", "additions": 26, "deletions": 5, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e42d2186bdf3c9de8316e718b330f0c3c3701e58/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fstandard_and_implementation_defined_restrictions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e42d2186bdf3c9de8316e718b330f0c3c3701e58/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fstandard_and_implementation_defined_restrictions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fstandard_and_implementation_defined_restrictions.rst?ref=e42d2186bdf3c9de8316e718b330f0c3c3701e58", "patch": "@@ -137,12 +137,19 @@ No_Anonymous_Allocators\n [RM H.4] This restriction ensures at compile time that there are no\n occurrences of an allocator of anonymous access type.\n \n+No_Asynchronous_Control\n+-----------------------\n+.. index:: No_Asynchronous_Control\n+\n+[RM J.13] This restriction ensures at compile time that there are no semantic\n+dependences on the predefined package Asynchronous_Task_Control.\n+\n No_Calendar\n -----------\n .. index:: No_Calendar\n \n-[GNAT] This restriction ensures at compile time that there is no implicit or\n-explicit dependence on the package `Ada.Calendar`.\n+[GNAT] This restriction ensures at compile time that there are no semantic\n+dependences on package Calendar.\n \n No_Coextensions\n ---------------\n@@ -170,14 +177,14 @@ No_Delay\n .. index:: No_Delay\n \n [RM H.4] This restriction ensures at compile time that there are no\n-delay statements and no dependences on package Calendar.\n+delay statements and no semantic dependences on package Calendar.\n \n No_Dependence\n -------------\n .. index:: No_Dependence\n \n-[RM 13.12.1] This restriction checks at compile time that there are no\n-dependence on a library unit.\n+[RM 13.12.1] This restriction ensures at compile time that there are no\n+dependences on a library unit.\n \n No_Direct_Boolean_Operators\n ---------------------------\n@@ -709,6 +716,20 @@ No_Unchecked_Access\n [RM H.4] This restriction ensures at compile time that there are no\n occurrences of the Unchecked_Access attribute.\n \n+No_Unchecked_Conversion\n+-----------------------\n+.. index:: No_Unchecked_Conversion\n+\n+[RM J.13] This restriction ensures at compile time that there are no semantic\n+dependences on the predefined generic function Unchecked_Conversion.\n+\n+No_Unchecked_Deallocation\n+-------------------------\n+.. index:: No_Unchecked_Deallocation\n+\n+[RM J.13] This restriction ensures at compile time that there are no semantic\n+dependences on the predefined generic procedure Unchecked_Deallocation.\n+\n No_Use_Of_Entity\n ----------------\n .. index:: No_Use_Of_Entity"}, {"sha": "6220bc280034c70f49eb57c644f8af88b4b70ce0", "filename": "gcc/ada/doc/gnat_rm/the_gnat_library.rst", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e42d2186bdf3c9de8316e718b330f0c3c3701e58/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fthe_gnat_library.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e42d2186bdf3c9de8316e718b330f0c3c3701e58/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fthe_gnat_library.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fthe_gnat_library.rst?ref=e42d2186bdf3c9de8316e718b330f0c3c3701e58", "patch": "@@ -641,6 +641,19 @@ Provides AWK-like parsing functions, with an easy interface for parsing one\n or more files containing formatted data.  The file is viewed as a database\n where each record is a line and a field is a data element in this line.\n \n+.. _`GNAT.Bind_Environment_(g-binenv.ads)`:\n+\n+`GNAT.Bind_Environment` (:file:`g-binenv.ads`)\n+==============================================\n+\n+.. index:: GNAT.Bind_Environment (g-binenv.ads)\n+\n+.. index:: Bind environment\n+\n+Provides access to key=value associations captured at bind time.\n+These associations can be specified using the `-V` binder command\n+line switch.\n+\n .. _`GNAT.Bounded_Buffers_(g-boubuf.ads)`:\n \n `GNAT.Bounded_Buffers` (:file:`g-boubuf.ads`)"}, {"sha": "de04d2c7ef64b4571c480a73a985142012f28370", "filename": "gcc/ada/doc/gnat_ugn/building_executable_programs_with_gnat.rst", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e42d2186bdf3c9de8316e718b330f0c3c3701e58/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fbuilding_executable_programs_with_gnat.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e42d2186bdf3c9de8316e718b330f0c3c3701e58/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fbuilding_executable_programs_with_gnat.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fbuilding_executable_programs_with_gnat.rst?ref=e42d2186bdf3c9de8316e718b330f0c3c3701e58", "patch": "@@ -4911,13 +4911,12 @@ following *gcc* switches refine this default behavior.\n   the condition being checked is true, which can result in erroneous\n   execution if that assumption is wrong.\n \n-  The checks subject to suppression include all the checks defined by\n-  the Ada standard, the additional implementation defined checks\n-  `Alignment_Check`,\n-  `Duplicated_Tag_Check`, `Predicate_Check`, and\n-  `Validity_Check`, as well as any checks introduced using\n-  `pragma Check_Name`. Note that `Atomic_Synchronization`\n-  is not automatically suppressed by use of this option.\n+  The checks subject to suppression include all the checks defined by the Ada\n+  standard, the additional implementation defined checks `Alignment_Check`,\n+  `Duplicated_Tag_Check`, `Predicate_Check`, Container_Checks, Tampering_Check,\n+  and `Validity_Check`, as well as any checks introduced using `pragma\n+  Check_Name`. Note that `Atomic_Synchronization` is not automatically\n+  suppressed by use of this option.\n \n   If the code depends on certain checks being active, you can use\n   pragma `Unsuppress` either as a configuration pragma or as\n@@ -6326,6 +6325,14 @@ be presented in subsequent sections.\n   :file:`stdout`.\n \n \n+  .. index:: -V  (gnatbind)\n+\n+:samp:`-V{key}={value}`\n+  Store the given association of `key` to `value` in the bind environment.\n+  Values stored this way can be retrieved at run time using\n+  `GNAT.Bind_Environment`.\n+\n+\n   .. index:: -w  (gnatbind)\n \n :samp:`-w{x}`"}, {"sha": "b2c0ec2b0ce2180ac4c61d2fb1d8635b26ddd9b6", "filename": "gcc/ada/doc/gnat_ugn/gnat_project_manager.rst", "status": "modified", "additions": 80, "deletions": 78, "changes": 158, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e42d2186bdf3c9de8316e718b330f0c3c3701e58/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_project_manager.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e42d2186bdf3c9de8316e718b330f0c3c3701e58/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_project_manager.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_project_manager.rst?ref=e42d2186bdf3c9de8316e718b330f0c3c3701e58", "patch": "@@ -175,7 +175,7 @@ the directory :file:`obj/`.\n       proc.adb\n     common/obj/\n       proc.ali, proc.o pack.ali, pack.o\n-  \n+\n \n Our project is to be called *Build*. The name of the\n file is the name of the project (case-insensitive) with the\n@@ -187,10 +187,10 @@ file is enough for it. We will thus create a new file, that for now\n should contain the following code:\n \n .. code-block:: gpr\n-  \n+\n       project Build is\n       end Build;\n-  \n+\n \n .. _Source_Files_and_Directories:\n \n@@ -263,7 +263,7 @@ There are several ways of defining source directories:\n \n         for Source_Dirs use (\"./**\");\n         for Ignore_Source_Sub_Dirs use (\".svn\");\n-    \n+\n \n When applied to the simple example, and because we generally prefer to have\n the project file at the toplevel directory rather than mixed with the sources,\n@@ -276,7 +276,7 @@ we will create the following file\n      project Build is\n         for Source_Dirs use (\"common\");  --  <<<<\n      end Build;\n-  \n+\n \n Once source directories have been specified, one may need to indicate\n source files of interest. By default, all source files present in the source\n@@ -426,7 +426,7 @@ For our example, we can specify the object dir in this way:\n           for Source_Dirs use (\"common\");\n           for Object_Dir use \"obj\";   --  <<<<\n        end Build;\n-  \n+\n As mentioned earlier, there is a single object directory per project. As a\n result, if you have an existing system where the object files are spread across\n several directories, you can either move all of them into the same directory if\n@@ -459,7 +459,7 @@ the project file is now\n           for Object_Dir use \"obj\";\n           for Exec_Dir use \".\";  --   <<<<\n        end Build;\n-  \n+\n \n .. _Main_Subprograms:\n \n@@ -497,15 +497,15 @@ corresponding executables.\n           for Exec_Dir use \".\";\n           for Main use (\"proc.adb\");  --   <<<<\n        end Build;\n-  \n+\n \n If this attribute is defined in the project, then spawning the builder\n with a command such as\n \n .. code-block:: sh\n \n      gprbuild -Pbuild\n-  \n+\n \n automatically builds all the executables corresponding to the files\n listed in the *Main* attribute. It is possible to specify one\n@@ -564,7 +564,7 @@ packages would be involved in the build process.\n           for Object_Dir use \"obj\";\n           for Exec_Dir use \".\";\n           for Main use (\"proc.adb\");\n-  \n+\n           package Builder is  --<<<  for gprbuild\n           end Builder;\n \n@@ -630,7 +630,7 @@ Several attributes can be used to specify the switches:\n          for Switches (\"proc.adb\")\n              use (\"-O0\");\n       end Compiler;\n-    \n+\n \n   `Switches` may take a pattern as an index, such as in:\n \n@@ -642,7 +642,7 @@ Several attributes can be used to specify the switches:\n         for Switches (\"pkg*\")\n             use (\"-O0\");\n       end Compiler;\n-    \n+\n   Sources :file:`pkg.adb` and :file:`pkg-child.adb` would be compiled with -O0,\n   not -O2.\n \n@@ -679,7 +679,7 @@ Here is the command we would use from the command line:\n .. code-block:: sh\n \n      gprbuild -Pbuild\n-  \n+\n This will automatically build the executables specified through the\n *Main* attribute: for each, it will compile or recompile the\n sources for which the object file does not exist or is not up-to-date; it\n@@ -693,7 +693,7 @@ set the attribute *Languages* to `\"(Ada, C)\"`, and re-run\n .. code-block:: sh\n \n      gprbuild -Pbuild\n-  \n+\n Gprbuild knows how to recompile the C files and will\n recompile them only if one of their dependencies has changed. No direct\n indication on how to build the various elements is given in the\n@@ -752,7 +752,7 @@ on Windows), we could configure our project file to build \"proc1\"\n              for Executable (\"proc.adb\") use \"proc1\";\n           end Builder\n        end Build;\n-  \n+\n .. index:: Executable_Suffix (GNAT Project Manager)\n \n Attribute **Executable_Suffix**, when specified, may change the suffix\n@@ -790,7 +790,7 @@ project using similar sources and a main program in C:\n           for Switches (\"main.c\") use C_Switches & (\"-g\");\n        end Compiler;\n     end C_Main;\n-  \n+\n This project has many similarities with the previous one.\n As expected, its `Main` attribute now refers to a C source.\n The attribute *Exec_Dir* is now omitted, thus the resulting\n@@ -810,7 +810,7 @@ replaced by a reference to the `Default_Switches` attribute:\n .. code-block:: gpr\n \n        for Switches (\"c_main.c\") use Compiler'Default_Switches (\"C\") & (\"-g\");\n-  \n+\n Note the tick (*'*) used to refer to attributes defined in a package.\n \n Here is the output of the GPRbuild command using this project:\n@@ -825,7 +825,7 @@ Here is the output of the GPRbuild command using this project:\n     gprbind main.bexch\n     ...\n     gcc main.o -o main\n-  \n+\n The default switches for Ada sources,\n the default switches for C sources (in the compilation of :file:`lib.c`),\n and the specific switches for :file:`main.c` have all been taken into\n@@ -986,7 +986,7 @@ The following attributes can be defined in package `Naming`:\n        for Spec (\"MyPack.MyChild\") use \"mypack.mychild.spec\";\n        for Spec (\"top\") use \"foo.a\" at 1;\n        for Spec (\"foo\") use \"foo.a\" at 2;\n-    \n+\n \n .. index:: Body (GNAT Project Manager)\n \n@@ -1018,7 +1018,7 @@ For example, the following package models the Apex file naming rules:\n        for Spec_Suffix (\"Ada\")  use \".1.ada\";\n        for Body_Suffix (\"Ada\")  use \".2.ada\";\n      end Naming;\n-  \n+\n \n .. _Installation:\n \n@@ -1048,7 +1048,9 @@ The following attributes can be defined in package `Install`:\n   An array attribute to declare a set of files not part of the sources\n   to be installed. The array discriminant is the directory where the\n   file is to be installed. If a relative directory then Prefix (see\n-  below) is prepended.\n+  below) is prepended. Note also that if the same file name occurs\n+  multiple time in the attribute list, the last one will be the one\n+  installed.\n \n \n .. index:: Prefix (GNAT Project Manager)\n@@ -1155,7 +1157,7 @@ project:\n      project Build is\n        ...  --  as before\n      end Build;\n-  \n+\n \n .. index:: Externally_Built (GNAT Project Manager)\n \n@@ -1296,7 +1298,7 @@ its variables cannot be referred to.\n      project D is\n         for Exec_Dir use A'Exec_Dir; -- not ok\n      end D;\n-  \n+\n \n .. _Sharing_Between_Projects:\n \n@@ -1341,7 +1343,7 @@ There are two main approaches to avoiding this duplication:\n             for Switches (\"Ada\") use Logging.Binder'Switches (\"Ada\");\n          end Binder;\n       end Build;\n-    \n+\n   The solution used for `Compiler` gets the same value for all\n   attributes of the package, but you cannot modify anything from the\n   package (adding extra switches or some exceptions). The second\n@@ -1383,7 +1385,7 @@ There are two main approaches to avoiding this duplication:\n       project Build is\n          package Compiler renames Shared.Compiler;\n       end Build;\n-    \n+\n   As for the first example, we could have chosen to set the attributes\n   one by one rather than to rename a package. The reason we explicitly\n   indicate that `Shared` has no sources is so that it can be created\n@@ -1482,7 +1484,7 @@ order of priority):\n   .. code-block:: sh\n \n          gprbuild -Pbuild.gpr -Xmode=release\n-    \n+\n \n **Environment variables**:\n   When the external value does not come from the command line, it can come from\n@@ -1507,7 +1509,7 @@ either :file:`obj/debug` or :file:`obj/release` by changing our project to\n          for Object_Dir use \"obj/\" & external (\"mode\", \"debug\");\n          ... --  as before\n      end Build;\n-  \n+\n The second parameter to `external` is optional, and is the default\n value to use if \"mode\" is not set from the command line or the environment.\n \n@@ -1539,7 +1541,7 @@ sections in the project. The following example shows how this can be done:\n            end case;\n         end Compiler;\n      end Build;\n-  \n+\n The project has suddenly grown in size, but has become much more flexible.\n `Mode_Type` defines the only valid values for the `mode` variable. If\n any other value is read from the environment, an error is reported and the\n@@ -1636,7 +1638,7 @@ Here is the new version of :file:`logging.gpr` that makes it a library:\n         for Object_Dir   use \"obj\";\n         for Library_Dir  use \"lib\";      --  different from object_dir\n      end Logging;\n-  \n+\n Once the above two attributes are defined, the library project is valid and\n is enough for building a library with default characteristics.\n Other library-related attributes can be used to change the defaults:\n@@ -1696,7 +1698,7 @@ Other library-related attributes can be used to change the defaults:\n          for Library_Kind use \"dynamic\";\n          for Library_Version use \"liblogging.so.\" & Version;\n       end Logging;\n-    \n+\n \n   After the compilation, the directory :file:`lib` will contain both a\n   :file:`libdummy.so.1` library and a symbolic link to it called\n@@ -1781,7 +1783,7 @@ the following two commands need to be used:\n \n      gprbuild -Plogging.gpr\n      gprbuild -Pbuild.gpr\n-  \n+\n All :file:`ALI` files will also be copied from the object directory to the\n library directory. To build executables, *gprbuild* will use the\n library rather than the individual object files.\n@@ -1801,7 +1803,7 @@ of the library sources are not available. Such library projects need to use the\n         for Library_Name use \"l2\";\n         for Externally_Built use \"true\";  --  <<<<\n      end Extern_Lib;\n-  \n+\n In the case of externally built libraries, the `Object_Dir`\n attribute does not need to be specified because it will never be\n used.\n@@ -2089,7 +2091,7 @@ the project `Build` from previous examples:\n \n      project Work extends \"../bld/build.gpr\" is\n      end Work;\n-  \n+\n The project after **extends** is the one being extended. As usual, it can be\n specified using an absolute path, or a path relative to any of the directories\n in the project path (see :ref:`Project_Dependencies`). This project does not\n@@ -2100,7 +2102,7 @@ attributes will be used that is to say the current directory (where project\n .. code-block:: sh\n \n      gprbuild -Pwork\n-  \n+\n If no sources have been placed in the current directory, this command\n won't do anything, since this project does not change the\n sources it inherited from `Build`, therefore all the object files\n@@ -2154,7 +2156,7 @@ line.\n         --  New spec of Pkg does not need a completion\n         for Excluded_Source_Files use (\"pack.adb\");\n      end Work;\n-  \n+\n \n All packages that are not declared in the extending project are inherited from\n the project being extended, with their attributes, with the exception of\n@@ -2182,7 +2184,7 @@ For example, consider the following hierarchy of projects.\n      a.gpr  contains package A1\n      b.gpr, imports a.gpr and contains B1, which depends on A1\n      c.gpr, imports b.gpr and contains C1, which depends on B1\n-  \n+\n If we want to locally extend the packages `A1` and `C1`, we need to\n create several extending projects:\n \n@@ -2191,7 +2193,7 @@ create several extending projects:\n      a_ext.gpr which extends a.gpr, and overrides A1\n      b_ext.gpr which extends b.gpr and imports a_ext.gpr\n      c_ext.gpr which extends c.gpr, imports b_ext.gpr and overrides C1\n-  \n+\n .. code-block:: gpr\n \n      project A_Ext extends \"a.gpr\" is\n@@ -2252,7 +2254,7 @@ Thus, in our example we could create the following projects instead:\n      project C_Ext extends all \"c.gpr\" is\n        for Source_Files use (\"c1.adb\");\n      end C_Ext;\n-  \n+\n \n When building project :file:`c_ext.gpr`, the entire modified project space is\n considered for recompilation, including the sources of :file:`b.gpr` that are\n@@ -2289,7 +2291,7 @@ However, if you build your project through *gprbuild*, using a syntax similar to\n ::\n \n      gprbuild -PA.gpr\n-  \n+\n this will only rebuild the main programs of project A, not those of the\n imported projects B and C. Therefore you have to spawn several\n *gprbuild* commands, one per project, to build all executables.\n@@ -2341,7 +2343,7 @@ Using only *gprbuild*, you could do\n \n     gprbuild -PA.gpr\n     gprbuild -PB.gpr\n-  \n+\n to build both. But again, *gprbuild* has to do some duplicate work for\n those files that are shared between the two, and cannot truly build\n things in parallel efficiently.\n@@ -2401,7 +2403,7 @@ reference external variables in |with| declarations, as in\n      project MyProject is\n         ...\n      end MyProject;\n-  \n+\n For various reasons, this is not allowed. But using aggregate projects provide\n an elegant solution. For instance, you could use a project file like:\n \n@@ -2416,7 +2418,7 @@ an elegant solution. For instance, you could use a project file like:\n      project MyProject is\n         ...\n      end MyProject;\n-  \n+\n \n .. _Performance_improvements_in_builder:\n \n@@ -2527,7 +2529,7 @@ The following three attributes can be used only in an aggregate project:\n \n      for Project_Files use (\"/.gpr\");\n      --  all projects recursively\n-    \n+\n \n .. index:: Project_Path (GNAT Project Manager)\n \n@@ -2601,7 +2603,7 @@ The following three attributes can be used only in an aggregate project:\n   .. code-block:: gpr\n \n      for Project_Path use (\"/usr/local/gpr\", \"gpr/\");\n-    \n+\n .. index:: External (GNAT Project Manager)\n \n **External**:\n@@ -2665,7 +2667,7 @@ are valid:\n   .. code-block:: gpr\n \n      for Switches (others) use (\"-v\", \"-k\", \"-j8\");\n-    \n+\n   These switches are only read from the main aggregate project (the\n   one passed on the command line), and ignored in all other aggregate\n   projects or projects.\n@@ -2740,7 +2742,7 @@ are valid:\n                 use (\"-O0\", \"-g\");\n          end Compiler;\n      end C;\n-    \n+\n \n   then the following switches are used:\n \n@@ -2816,13 +2818,13 @@ and C:\n         for Library_Name use (\"agg\");\n         for Library_Dir use (\"lagg\");\n      end Agg;\n-  \n+\n Then, when you build with:\n \n .. code-block:: sh\n \n       gprbuild agg.gpr\n-  \n+\n This will build all units from projects A, B and C and will create a\n static library named :file:`libagg.a` in the :file:`lagg`\n directory. An aggregate library project has the same set of\n@@ -2929,7 +2931,7 @@ are always case-insensitive (\"Name\" is the same as \"name\").\n \n     simple_name ::= identifier\n     name        ::= simple_name { . simple_name }\n-  \n+\n **Strings** are used for values of attributes or as indexes for these\n attributes. They are in general case sensitive, except when noted\n otherwise (in particular, strings representing file names will be case\n@@ -2939,7 +2941,7 @@ represent the same file).\n **Reserved words** are the same as for standard Ada 95, and cannot\n be used for identifiers. In particular, the following words are currently\n used in project files, but others could be added later on. In bold are the\n-extra reserved words in project files: \n+extra reserved words in project files:\n ``all``, ``at``, ``case``, ``end``, ``for``, ``is``, ``limited``,\n ``null``, ``others``, ``package``, ``renames``, ``type``, ``use``, ``when``,\n ``with``, **extends**, **external**, **project**.\n@@ -2980,7 +2982,7 @@ in the cycle is a **limited with**.\n      with \"other_project.gpr\";\n      project My_Project extends \"extended.gpr\" is\n      end My_Project;\n-  \n+\n These dependencies form a **directed graph**, potentially cyclic when using\n **limited with**. The subgraph reflecting the **extends** relations is a tree.\n \n@@ -3010,7 +3012,7 @@ in the child project.\n         project <project_>name is\n           {declarative_item}\n         end <project_>simple_name;\n-  \n+\n \n .. _Qualified_Projects:\n \n@@ -3021,19 +3023,19 @@ Before the reserved `project`, there may be one or two **qualifiers**, that\n is identifiers or reserved words, to qualify the project.\n The current list of qualifiers is:\n \n-**abstract**: \n+**abstract**:\n   Qualifies a project with no sources.\n   Such a   project must either have no declaration of attributes `Source_Dirs`,\n   `Source_Files`, `Languages` or `Source_List_File`, or one of\n   `Source_Dirs`, `Source_Files`, or `Languages` must be declared\n   as empty. If it extends another project, the project it extends must also be a\n   qualified abstract project.\n \n-**standard**: \n+**standard**:\n   A standard project is a non library project with sources.\n   This is the default (implicit) qualifier.\n \n-**aggregate**: \n+**aggregate**:\n   A project whose sources are aggregated from other project files.\n \n **aggregate library**:\n@@ -3071,7 +3073,7 @@ declaration. Others can appear within a project or within a package.\n       | empty_declaration\n \n     empty_declaration ::= *null* ;\n-  \n+\n An empty declaration is allowed anywhere a declaration is allowed. It has\n no effect.\n \n@@ -3177,9 +3179,9 @@ The following packages are currently supported in project files\n   used to automatically find all source files in the source directories,\n   or given a file name to find out its language for proper processing.\n   See :ref:`Naming_Schemes`.\n- \n+\n  .. only: PRO or GPL\n- \n+\n   *Pretty_Printer*\n     This package specifies the options used when calling the formatting tool\n     *gnatpp* via the *gnat* driver. Its attributes\n@@ -3208,7 +3210,7 @@ In its simplest form, a package may be empty:\n        package Builder is\n        end Builder;\n      end Simple;\n-  \n+\n A package may contain **attribute declarations**,\n **variable declarations** and **case constructions**, as will be\n described below.\n@@ -3306,7 +3308,7 @@ following Ada declarations show the existing operators:\n      function \"&\" (X : String;      Y : String)      return String;\n      function \"&\" (X : String_List; Y : String)      return String_List;\n      function \"&\" (X : String_List; Y : String_List) return String_List;\n-  \n+\n \n Here are some specific examples:\n \n@@ -3316,7 +3318,7 @@ Here are some specific examples:\n      List2 := List & (File_Name & \".orig\"); -- Two strings\n      Big_List := List & Lists2;  --  Three strings\n      Illegal := \"gnat.adc\" & List2;  --  Illegal, must start with list\n-  \n+\n \n .. _External_Values:\n \n@@ -3333,7 +3335,7 @@ one that returns a string list.\n The syntax of a single string external value is::\n \n     external_value ::= *external* ( string_literal [, string_literal] )\n-  \n+\n \n The first string_literal is the string to be used on the command line or\n in the environment to specify the external value. The second string_literal,\n@@ -3363,7 +3365,7 @@ attributes in various scenarios. Thus such variables are often called\n The syntax for a string list external value is::\n \n     external_value ::= *external_as_list* ( string_literal , string_literal )\n-  \n+\n \n The first string_literal is the string to be used on the command line or\n in the environment to specify the external value. The second string_literal is\n@@ -3382,7 +3384,7 @@ last separator and the end are components of the string list.\n ::\n \n      *external_as_list* (\"SWITCHES\", \",\")\n-  \n+\n If the external value is \"-O2,-g\",\n the result is (\"-O2\", \"-g\").\n \n@@ -3412,15 +3414,15 @@ level, not inside a package.\n \n      typed_string_declaration ::=\n        *type* *<typed_string_>*_simple_name *is* ( string_literal {, string_literal} );\n-  \n+\n The string literals in the list are case sensitive and must all be different.\n They may include any graphic characters allowed in Ada, including spaces.\n Here is an example of a string type declaration:\n \n .. code-block:: ada\n \n      type OS is (\"NT\", \"nt\", \"Unix\", \"GNU/Linux\", \"other OS\");\n-  \n+\n Variables of a string type are called **typed variables**; all other\n variables are called **untyped variables**. Typed variables are\n particularly useful in `case` constructions, to support conditional\n@@ -3465,9 +3467,9 @@ A variable may be declared at the project file level, or within a package.\n \n      typed_variable_declaration ::=\n        *<typed_variable_>*simple_name : *<typed_string_>*name := string_expression;\n-  \n+\n      variable_declaration ::= *<variable_>*simple_name := expression;\n-  \n+\n Here are some examples of variable declarations:\n \n .. code-block:: gpr\n@@ -3482,7 +3484,7 @@ Here are some examples of variable declarations:\n      List_With_One_Element := (\"-gnaty\");\n      List_With_Two_Elements := List_With_One_Element & \"-gnatg\";\n      Long_List := (\"main.ada\", \"pack1_.ada\", \"pack1.ada\", \"pack2_.ada\");\n-  \n+\n A **variable reference** may take several forms:\n \n * The simple variable name, for a variable in the current package (if any)\n@@ -3543,7 +3545,7 @@ variables that have already been declared before the case construction.\n            | empty_declaration}\n \n      discrete_choice_list ::= string_literal {| string_literal} | *others*\n-  \n+\n Here is a typical example, with a typed string variable:\n \n .. code-block:: gpr\n@@ -3565,7 +3567,7 @@ Here is a typical example, with a typed string variable:\n           end case;\n         end Compiler;\n      end MyProj;\n-  \n+\n \n .. _Attributes:\n \n@@ -3589,7 +3591,7 @@ others have values that are string lists.\n      attribute_designator ::=\n        *<simple_attribute_>*simple_name\n        | *<indexed_attribute_>*simple_name ( string_literal )\n-  \n+\n There are two categories of attributes: **simple attributes**\n and **indexed attributes**.\n Each simple attribute has a default value: the empty string (for string\n@@ -3624,7 +3626,7 @@ Here are some examples of attribute declarations:\n      --  The package name must always be specified, even if it is the current\n      --  package.\n      for Default_Switches use Default.Builder'Default_Switches;\n-  \n+\n Attributes references may appear anywhere in expressions, and are used\n to retrieve the value previously assigned to the attribute. If an attribute\n has not been set in a given package or project, its value defaults to the\n@@ -3638,15 +3640,15 @@ empty string or the empty list, with some exceptions.\n       | *<project_>*simple_name\n       | package_identifier\n       | *<project_>*simple_name . package_identifier\n-  \n+\n Examples are::\n \n      <project>'Object_Dir\n      Naming'Dot_Replacement\n      Imported_Project'Source_Dirs\n      Imported_Project.Naming'Casing\n      Builder'Default_Switches (\"Ada\")\n-  \n+\n The exceptions to the empty defaults are:\n \n * Object_Dir: default is \".\"\n@@ -4596,7 +4598,9 @@ Package Install Attributes\n   An array attribute to declare a set of files not part of the sources\n   to be installed. The array discriminant is the directory where the\n   file is to be installed. If a relative directory then Prefix (see\n-  below) is prepended.\n+  below) is prepended. Note also that if the same file name occurs\n+  multiple time in the attribute list, the last one will be the one\n+  installed.\n \n * **Prefix**: single\n \n@@ -4873,5 +4877,3 @@ Package Synchronize Attributes\n \n   Index is a source file name. Value is the list of switches to be used when\n   invoking `gnatsync` for the source.\n-\n-"}, {"sha": "80634d0eec7ccb46f8c16fd5dec38f2cc5d80309", "filename": "gcc/ada/doc/gnat_ugn/the_gnat_compilation_model.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e42d2186bdf3c9de8316e718b330f0c3c3701e58/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fthe_gnat_compilation_model.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e42d2186bdf3c9de8316e718b330f0c3c3701e58/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fthe_gnat_compilation_model.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fthe_gnat_compilation_model.rst?ref=e42d2186bdf3c9de8316e718b330f0c3c3701e58", "patch": "@@ -4465,7 +4465,7 @@ If you want to generate a single Ada file and not the transitive closure, you\n can use instead the *-fdump-ada-spec-slim* switch.\n \n You can optionally specify a parent unit, of which all generated units will\n-be children, using `-fada-spec-parent=``unit`.\n+be children, using `-fada-spec-parent=<unit>`.\n \n Note that we recommend when possible to use the *g++* driver to\n generate bindings, even for most C headers, since this will in general"}, {"sha": "5e3c590b47ae80ffc30643fc19c87e6f4464d731", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 609, "deletions": 618, "changes": 1227, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e42d2186bdf3c9de8316e718b330f0c3c3701e58/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e42d2186bdf3c9de8316e718b330f0c3c3701e58/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=e42d2186bdf3c9de8316e718b330f0c3c3701e58"}, {"sha": "4c9efb8d21b8305548ed58160382db82bd4a4c98", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 24, "deletions": 14, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e42d2186bdf3c9de8316e718b330f0c3c3701e58/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e42d2186bdf3c9de8316e718b330f0c3c3701e58/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=e42d2186bdf3c9de8316e718b330f0c3c3701e58", "patch": "@@ -21,7 +21,7 @@\n \n @copying\n @quotation\n-GNAT User's Guide for Native Platforms , May 12, 2015\n+GNAT User's Guide for Native Platforms , October 20, 2015\n \n AdaCore\n \n@@ -6630,7 +6630,7 @@ If you want to generate a single Ada file and not the transitive closure, you\n can use instead the @emph{-fdump-ada-spec-slim} switch.\n \n You can optionally specify a parent unit, of which all generated units will\n-be children, using @cite{-fada-spec-parent=`@w{`}unit}.\n+be children, using @cite{-fada-spec-parent=<unit>}.\n \n Note that we recommend when possible to use the @emph{g++} driver to\n generate bindings, even for most C headers, since this will in general\n@@ -9130,7 +9130,7 @@ messages showing\n where implicit @cite{pragma Elaborate} and @cite{pragma Elaborate_All}\n are generated. This is useful in diagnosing elaboration circularities\n caused by these implicit pragmas when using the static elaboration\n-model. See the section in this guide on elaboration checking for\n+model. See See the section in this guide on elaboration checking for\n further details. These messages are not generated by default, and are\n intended only for temporary use when debugging circularity problems.\n @end table\n@@ -13601,13 +13601,11 @@ year). The compiler will generate code based on the assumption that\n the condition being checked is true, which can result in erroneous\n execution if that assumption is wrong.\n \n-The checks subject to suppression include all the checks defined by\n-the Ada standard, the additional implementation defined checks\n-@cite{Alignment_Check},\n-@cite{Duplicated_Tag_Check}, @cite{Predicate_Check}, and\n-@cite{Validity_Check}, as well as any checks introduced using\n-@cite{pragma Check_Name}. Note that @cite{Atomic_Synchronization}\n-is not automatically suppressed by use of this option.\n+The checks subject to suppression include all the checks defined by the Ada\n+standard, the additional implementation defined checks @cite{Alignment_Check},\n+@cite{Duplicated_Tag_Check}, @cite{Predicate_Check}, Container_Checks, Tampering_Check,\n+and @cite{Validity_Check}, as well as any checks introduced using @cite{pragma Check_Name}. Note that @cite{Atomic_Synchronization} is not automatically\n+suppressed by use of this option.\n \n If the code depends on certain checks being active, you can use\n pragma @cite{Unsuppress} either as a configuration pragma or as\n@@ -15425,6 +15423,14 @@ platforms. (See @ref{125,,Dynamic Stack Usage Analysis} for details.)\n Verbose mode. Write error messages, header, summary output to\n @code{stdout}.\n \n+@geindex -V (gnatbind)\n+\n+@item @code{-V@emph{key}=@emph{value}}\n+\n+Store the given association of @cite{key} to @cite{value} in the bind environment.\n+Values stored this way can be retrieved at run time using\n+@cite{GNAT.Bind_Environment}.\n+\n @geindex -w (gnatbind)\n \n @item @code{-w@emph{x}}\n@@ -17821,7 +17827,9 @@ Whether the project is to be installed, values are @cite{true}\n An array attribute to declare a set of files not part of the sources\n to be installed. The array discriminant is the directory where the\n file is to be installed. If a relative directory then Prefix (see\n-below) is prepended.\n+below) is prepended. Note also that if the same file name occurs\n+multiple time in the attribute list, the last one will be the one\n+installed.\n @end quotation\n \n @geindex Prefix (GNAT Project Manager)\n@@ -21139,7 +21147,7 @@ in an executable.\n @item \n @strong{Run_Path_Origin}: single\n \n-Value is the string that may replace the path name of the executable\n+Value is the the string that may replace the path name of the executable\n directory in the run path options.\n \n @item \n@@ -21256,7 +21264,7 @@ the prefix is \"lib\".\n @item \n @strong{Shared_Library_Suffix}: single\n \n-Value is the extension of the name of shared library files. When not\n+Value is the the extension of the name of shared library files. When not\n declared, the extension is \".so\".\n \n @item \n@@ -21913,7 +21921,9 @@ Value is the directory used to generate the documentation of source code.\n An array attribute to declare a set of files not part of the sources\n to be installed. The array discriminant is the directory where the\n file is to be installed. If a relative directory then Prefix (see\n-below) is prepended.\n+below) is prepended. Note also that if the same file name occurs\n+multiple time in the attribute list, the last one will be the one\n+installed.\n \n @item \n @strong{Prefix}: single"}]}