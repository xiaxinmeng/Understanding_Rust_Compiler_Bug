{"sha": "ce3a201593d0ed5b606360c064778de34b5b04ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2UzYTIwMTU5M2QwZWQ1YjYwNjM2MGMwNjQ3NzhkZTM0YjViMDRlZg==", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2019-06-16T16:21:28Z"}, "committer": {"name": "Iain Sandoe", "email": "iains@gcc.gnu.org", "date": "2019-06-16T16:21:28Z"}, "message": "[Darwin] The need for picsym stubs is dependent on linker used, not OS rev.\n\n    \nFor very old toolchains, the compiler generated pic symbol stubs that\nprovide the necessary indirections.  We no longer need this (since xcode\n3 era) and it's more efficient for the linker to make one stub when it\nknows a symbol is needed that for us to emit them speculatively in every\nobject.\n\nOur current codegen is making the assumption that a specific OS version\nuses a specific linker version - and therefore the presence of support\ncould be based on the target OS rev.  Of course, that's way too simplistic\n(most likely bogus for cross-toolchains) and we want to make things explict.\n\nSince we have detection of the linker version, we can use that directly\n(A config test for support for stub-less linking might also be feasible\nbut much more involved).\n\nFinally, should the user wish to generate code that caters for export to\nuse in an environment with an older toolchain, the generation of stubs\ncan be forced from the command line.\n\nIn addition to the points above, branch islanding and a long branch opt\nfor PowerPC Darwin has become conflated with the emission of these stubs\n(which is confusing, and will be rectified in a following patch).\n\n\n2019-06-16  Iain Sandoe  <iain@sandoe.co.uk>\n\n\t* config/darwin.c (machopic_indirect_call_target): Use renamed\n\tdarwin_picsymbol_stubs to decide on output.\n\t(darwin_override_options): Handle darwin_picsymbol_stubs.\n\t* config/darwin.h (MIN_LD64_OMIT_STUBS): New.\n\t(LD64_VERSION): Revise default.\n\t* config/darwin.opt: (mpic-symbol-stubs): New option.\n\t(darwin_picsymbol_stubs): New variable.\n\t* config/i386/darwin.h (TARGET_MACHO_BRANCH_ISLANDS):\n\trename to TARGET_MACHO_PICSYM_STUBS.\n\t* config/i386/i386.c (output_pic_addr_const): Likewise.\n\t* config/i386/i386.h Likewise.\n\t* config/rs6000/darwin.h: Likewise.\n\t* config/rs6000/rs6000.c (rs6000_call_darwin_1): Use renamed\n\tdarwin_picsymbol_stubs.\n\nFrom-SVN: r272356", "tree": {"sha": "bd7d33e097373aee442013ac23887e1909209af5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bd7d33e097373aee442013ac23887e1909209af5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ce3a201593d0ed5b606360c064778de34b5b04ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce3a201593d0ed5b606360c064778de34b5b04ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce3a201593d0ed5b606360c064778de34b5b04ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce3a201593d0ed5b606360c064778de34b5b04ef/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4827824f799e15bb28c12482de6c01089fea7abe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4827824f799e15bb28c12482de6c01089fea7abe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4827824f799e15bb28c12482de6c01089fea7abe"}], "stats": {"total": 92, "additions": 65, "deletions": 27}, "files": [{"sha": "89bb8c550ffe88fd4089856ce7278413007c4618", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce3a201593d0ed5b606360c064778de34b5b04ef/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce3a201593d0ed5b606360c064778de34b5b04ef/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ce3a201593d0ed5b606360c064778de34b5b04ef", "patch": "@@ -1,3 +1,20 @@\n+2019-06-16  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* config/darwin.c (machopic_indirect_call_target): Use renamed\n+\tdarwin_picsymbol_stubs to decide on output.\n+\t(darwin_override_options): Handle darwin_picsymbol_stubs.\n+\t* config/darwin.h (MIN_LD64_OMIT_STUBS): New.\n+\t(LD64_VERSION): Revise default.\n+\t* config/darwin.opt: (mpic-symbol-stubs): New option.\n+\t(darwin_picsymbol_stubs): New variable.\n+\t* config/i386/darwin.h (TARGET_MACHO_BRANCH_ISLANDS):\n+\trename to TARGET_MACHO_PICSYM_STUBS.\n+\t* config/i386/i386.c (output_pic_addr_const): Likewise.\n+\t* config/i386/i386.h Likewise.\n+\t* config/rs6000/darwin.h: Likewise.\n+\t* config/rs6000/rs6000.c (rs6000_call_darwin_1): Use renamed\n+\tdarwin_picsymbol_stubs.\n+\n 2019-06-16  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* config/darwin.opt (prebind, noprebind, seglinkedit,"}, {"sha": "00fa65278c0ad0adc9b695fdf237bff3eb5a9a5a", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 27, "deletions": 13, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce3a201593d0ed5b606360c064778de34b5b04ef/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce3a201593d0ed5b606360c064778de34b5b04ef/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=ce3a201593d0ed5b606360c064778de34b5b04ef", "patch": "@@ -78,12 +78,6 @@ along with GCC; see the file COPYING3.  If not see\n    of MACHO_SYMBOL_STATIC for the code that handles @code{static}\n    symbol indirection.  */\n \n-/* For darwin >= 9  (OSX 10.5) the linker is capable of making the necessary\n-   branch islands and we no longer need to emit darwin stubs.\n-   However, if we are generating code for earlier systems (or for use in the \n-   kernel) the stubs might still be required, and this will be set true.  */\n-int darwin_emit_branch_islands = false;\n-\n typedef struct GTY(()) cdtor_record {\n   rtx symbol;\n   int priority;\t\t/* [con/de]structor priority */\n@@ -790,7 +784,7 @@ machopic_indirect_data_reference (rtx orig, rtx reg)\n rtx\n machopic_indirect_call_target (rtx target)\n {\n-  if (! darwin_emit_branch_islands)\n+  if (! darwin_picsymbol_stubs)\n     return target;\n \n   if (GET_CODE (target) != MEM)\n@@ -3235,7 +3229,7 @@ darwin_override_options (void)\n       flag_unwind_tables = 0;\n       flag_asynchronous_unwind_tables = 0;\n       /* We still need to emit branch islands for kernel context.  */\n-      darwin_emit_branch_islands = true;\n+      darwin_picsymbol_stubs = true;\n     }\n \n   if (flag_var_tracking_uninit == 0\n@@ -3259,11 +3253,31 @@ darwin_override_options (void)\n       flag_pic = 2;\n     }\n \n-  /* It is assumed that branch island stubs are needed for earlier systems.  */\n-  if (generating_for_darwin_version < 9)\n-    darwin_emit_branch_islands = true;\n-  else\n-    emit_aligned_common = true; /* Later systems can support aligned common.  */\n+  /* Linkers >= ld64-62.1 (at least) are capable of making the necessary PIC\n+     indirections and we no longer need to emit pic symbol stubs.\n+     However, if we are generating code for earlier ones (or for use in the \n+     kernel) the stubs might still be required, and this will be set true.\n+     If the user sets it on or off - then that takes precedence. */\n+\n+  if (!global_options_set.x_darwin_picsymbol_stubs)\n+    {\n+      if (darwin_target_linker) {\n+\tif (strverscmp (darwin_target_linker, MIN_LD64_OMIT_STUBS) < 0)\n+\t  darwin_picsymbol_stubs = true;\n+      } else if (generating_for_darwin_version < 9)\n+\t/* We know no better than to assume the use of an earlier linker.  */\n+\tdarwin_picsymbol_stubs = true;\n+    }\n+  else if (DARWIN_X86 && darwin_picsymbol_stubs && TARGET_64BIT)\n+    {\n+      inform (input_location,\n+\t      \"%<-mpic-symbol-stubs%> is not required for 64b code (ignored)\");\n+      darwin_picsymbol_stubs = false;\n+    }\n+\n+  if (generating_for_darwin_version >= 9)\n+    /* Later systems can support aligned common.  */\n+    emit_aligned_common = true;\n \n   /* The c_dialect...() macros are not available to us here.  */\n   darwin_running_cxx = (strstr (lang_hooks.name, \"C++\") != 0);"}, {"sha": "bf44b1069405196cf62a029f1bcc64a8a743146c", "filename": "gcc/config/darwin.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce3a201593d0ed5b606360c064778de34b5b04ef/gcc%2Fconfig%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce3a201593d0ed5b606360c064778de34b5b04ef/gcc%2Fconfig%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.h?ref=ce3a201593d0ed5b606360c064778de34b5b04ef", "patch": "@@ -969,8 +969,12 @@ extern void darwin_driver_init (unsigned int *,struct cl_decoded_option **);\n    _tested_ version known to support this so far.  */\n #define MIN_LD64_NO_COAL_SECTS \"236.4\"\n \n+/* From at least version 62.1, ld64 can build PIC indirection stubs as\n+   needed, and there is no need for the compiler to emit them.  */\n+#define MIN_LD64_OMIT_STUBS \"85.2\"\n+\n #ifndef LD64_VERSION\n-#define LD64_VERSION \"85.2\"\n+#define LD64_VERSION \"62.1\"\n #else\n #define DEF_LD64 LD64_VERSION\n #endif"}, {"sha": "d7e5e7bfcab98297f59d63c2951c01ec046e9ff0", "filename": "gcc/config/darwin.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce3a201593d0ed5b606360c064778de34b5b04ef/gcc%2Fconfig%2Fdarwin.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce3a201593d0ed5b606360c064778de34b5b04ef/gcc%2Fconfig%2Fdarwin.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.opt?ref=ce3a201593d0ed5b606360c064778de34b5b04ef", "patch": "@@ -75,6 +75,10 @@ mone-byte-bool\n Target RejectNegative Report Var(darwin_one_byte_bool)\n Set sizeof(bool) to 1.\n \n+mpic-symbol-stubs\n+Target Report Var(darwin_picsymbol_stubs) Init(0)\n+Force generation of PIC symbol stubs.\n+\n ; Some code-gen may be improved / adjusted if the linker is sufficiently modern.\n mtarget-linker=\n Target RejectNegative Joined Report Alias(mtarget-linker)"}, {"sha": "93bd5588b8870d9f6fc66cb3ef99844640587dfb", "filename": "gcc/config/i386/darwin.h", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce3a201593d0ed5b606360c064778de34b5b04ef/gcc%2Fconfig%2Fi386%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce3a201593d0ed5b606360c064778de34b5b04ef/gcc%2Fconfig%2Fi386%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdarwin.h?ref=ce3a201593d0ed5b606360c064778de34b5b04ef", "patch": "@@ -89,14 +89,12 @@ along with GCC; see the file COPYING3.  If not see\n #undef WCHAR_TYPE_SIZE\n #define WCHAR_TYPE_SIZE 32\n \n-/* Generate branch islands stubs if this is true.  */\n-extern int darwin_emit_branch_islands;\n-\n-#undef TARGET_MACHO_BRANCH_ISLANDS\n-#define TARGET_MACHO_BRANCH_ISLANDS darwin_emit_branch_islands\n+/* Generate pic symbol indirection stubs if this is true.  */\n+#undef TARGET_MACHO_PICSYM_STUBS\n+#define TARGET_MACHO_PICSYM_STUBS (darwin_picsymbol_stubs)\n \n /* For compatibility with OSX system tools, use the new style of pic stub\n-   if this is set.  */\n+   if this is set (default).  */\n #undef  MACHOPIC_ATT_STUB\n #define MACHOPIC_ATT_STUB (darwin_macho_att_stub)\n \n@@ -244,7 +242,7 @@ extern int darwin_emit_branch_islands;\n #undef FUNCTION_PROFILER\n #define FUNCTION_PROFILER(FILE, LABELNO)\t\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\t\\\n-    if (TARGET_MACHO_BRANCH_ISLANDS \t\t\t\t\t\\\n+    if (TARGET_MACHO_PICSYM_STUBS \t\t\t\t\t\\\n \t&& MACHOPIC_INDIRECT && !TARGET_64BIT)\t\t\t\t\\\n       {\t\t\t\t\t\t\t\t\t\\\n \tconst char *name = machopic_mcount_stub_name ();\t\t\\"}, {"sha": "76ac5bb7310ac28e118b3b478e08f3c36e7bec87", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce3a201593d0ed5b606360c064778de34b5b04ef/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce3a201593d0ed5b606360c064778de34b5b04ef/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=ce3a201593d0ed5b606360c064778de34b5b04ef", "patch": "@@ -11463,7 +11463,7 @@ output_pic_addr_const (FILE *file, rtx x, int code)\n       break;\n \n     case SYMBOL_REF:\n-      if (TARGET_64BIT || ! TARGET_MACHO_BRANCH_ISLANDS)\n+      if (TARGET_64BIT || ! TARGET_MACHO_PICSYM_STUBS)\n \toutput_addr_const (file, x);\n       else\n \t{"}, {"sha": "04cf7a77877f27987909a7dd43235ec278584f06", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce3a201593d0ed5b606360c064778de34b5b04ef/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce3a201593d0ed5b606360c064778de34b5b04ef/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=ce3a201593d0ed5b606360c064778de34b5b04ef", "patch": "@@ -645,7 +645,7 @@ extern tree x86_mfence;\n /* Replace MACH-O, ifdefs by in-line tests, where possible. \n    (a) Macros defined in config/i386/darwin.h  */\n #define TARGET_MACHO 0\n-#define TARGET_MACHO_BRANCH_ISLANDS 0\n+#define TARGET_MACHO_PICSYM_STUBS 0\n #define MACHOPIC_ATT_STUB 0\n /* (b) Macros defined in config/darwin.h  */\n #define MACHO_DYNAMIC_NO_PIC_P 0"}, {"sha": "ee949f2da40a433f558eb5f97d201e23bad2b80b", "filename": "gcc/config/rs6000/darwin.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce3a201593d0ed5b606360c064778de34b5b04ef/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce3a201593d0ed5b606360c064778de34b5b04ef/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdarwin.h?ref=ce3a201593d0ed5b606360c064778de34b5b04ef", "patch": "@@ -61,8 +61,8 @@\n     }\t\t\t\t\t\t\t\\\n   while (0)\n \n-/* Generate branch islands stubs if this is true.  */\n-extern int darwin_emit_branch_islands;\n+/* Generate pic symbol stubs if this is true.  */\n+extern int darwin_emit_picsym_stub;\n \n #define SUBTARGET_OVERRIDE_OPTIONS darwin_rs6000_override_options ()\n "}, {"sha": "657720c186f4e8ea2c43c6fedd310a82669facc8", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce3a201593d0ed5b606360c064778de34b5b04ef/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce3a201593d0ed5b606360c064778de34b5b04ef/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=ce3a201593d0ed5b606360c064778de34b5b04ef", "patch": "@@ -20893,7 +20893,7 @@ print_operand (FILE *file, rtx x, int code)\n \t{\n \t  const char *name = XSTR (x, 0);\n #if TARGET_MACHO\n-\t  if (darwin_emit_branch_islands\n+\t  if (darwin_picsymbol_stubs\n \t      && MACHOPIC_INDIRECT\n \t      && machopic_classify_symbol (x) == MACHOPIC_UNDEFINED_FUNCTION)\n \t    name = machopic_indirection_name (x, /*stub_p=*/true);\n@@ -38151,7 +38151,8 @@ rs6000_call_darwin_1 (rtx value, rtx func_desc, rtx tlsarg,\n   if ((cookie_val & CALL_LONG) != 0\n       && GET_CODE (func_desc) == SYMBOL_REF)\n     {\n-      if (darwin_emit_branch_islands && TARGET_32BIT)\n+      /* FIXME: the longcall opt should not hang off picsymbol stubs.  */\n+      if (darwin_picsymbol_stubs && TARGET_32BIT)\n \tmake_island = true; /* Do nothing yet, retain the CALL_LONG flag.  */\n       else\n \t{"}]}