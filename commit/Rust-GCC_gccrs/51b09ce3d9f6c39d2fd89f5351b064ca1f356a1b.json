{"sha": "51b09ce3d9f6c39d2fd89f5351b064ca1f356a1b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTFiMDljZTNkOWY2YzM5ZDJmZDg5ZjUzNTFiMDY0Y2ExZjM1NmExYg==", "commit": {"author": {"name": "Asher Langton", "email": "langton2@llnl.gov", "date": "2007-09-21T02:34:14Z"}, "committer": {"name": "Asher Langton", "email": "langton@gcc.gnu.org", "date": "2007-09-21T02:34:14Z"}, "message": "re PR fortran/20441 (-finit-local-zero is missing from gfortran)\n\n\tPR fortran/20441\n        * gfortran.h : Add init_local_* enums and init_flag_* flags to\n\tgfc_option_t.\n\t* lang.opt: Add -finit-local-zero, -finit-real, -finit-integer,\n\t-finit-character, and -finit-logical flags.\n\t* invoke.texi: Document new options.\n\t* resolve.c (build_init_assign): New function.\n\t(apply_init_assign): Move part of function into build_init_assign.\n\t(build_default_init_expr): Build local initializer (-finit-*).\n\t(apply_default_init_local): Apply local initializer (-finit-*).\n\t(resolve_fl_variable): Try to add local initializer (-finit-*).\n\t* options.c (gfc_init_options, gfc_handle_option,\n\tgfc_post_options): Handle -finit-local-zero, -finit-real,\n\t-finit-integer, -finit-character, and -finit-logical flags.\n\n\tPR fortran/20441\n\t* gfortran.dg/init_flag_1.f90: New.\n\t* gfortran.dg/init_flag_2.f90: New.\n\t* gfortran.dg/init_flag_3.f90: New.\n\t* gfortran.dg/init_flag_4.f90: New.\n\t* gfortran.dg/init_flag_5.f90: New.\n\t* gfortran.dg/init_flag_6.f90: New.\n\t* gfortran.dg/init_flag_7.f90: New.\n\nFrom-SVN: r128643", "tree": {"sha": "6f87e3fe355a7263be01fcc31cadd9d2cbcca2ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f87e3fe355a7263be01fcc31cadd9d2cbcca2ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/51b09ce3d9f6c39d2fd89f5351b064ca1f356a1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51b09ce3d9f6c39d2fd89f5351b064ca1f356a1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51b09ce3d9f6c39d2fd89f5351b064ca1f356a1b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51b09ce3d9f6c39d2fd89f5351b064ca1f356a1b/comments", "author": null, "committer": null, "parents": [{"sha": "819fec00238bbbc881d99c945c55d648d62702c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/819fec00238bbbc881d99c945c55d648d62702c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/819fec00238bbbc881d99c945c55d648d62702c2"}], "stats": {"total": 640, "additions": 624, "deletions": 16}, "files": [{"sha": "e9030900eba8b5aaeb00e9d0ae8c4df29a376a02", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51b09ce3d9f6c39d2fd89f5351b064ca1f356a1b/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51b09ce3d9f6c39d2fd89f5351b064ca1f356a1b/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=51b09ce3d9f6c39d2fd89f5351b064ca1f356a1b", "patch": "@@ -1,3 +1,20 @@\n+2007-09-20  Asher Langton  <langton2@llnl.gov>\n+\n+\tPR fortran/20441\n+        * gfortran.h : Add init_local_* enums and init_flag_* flags to\n+\tgfc_option_t.\n+\t* lang.opt: Add -finit-local-zero, -finit-real, -finit-integer,\n+\t-finit-character, and -finit-logical flags.\n+\t* invoke.texi: Document new options.\n+\t* resolve.c (build_init_assign): New function.\n+\t(apply_init_assign): Move part of function into build_init_assign.\n+\t(build_default_init_expr): Build local initializer (-finit-*).\n+\t(apply_default_init_local): Apply local initializer (-finit-*).\n+\t(resolve_fl_variable): Try to add local initializer (-finit-*).\n+\t* options.c (gfc_init_options, gfc_handle_option,\n+\tgfc_post_options): Handle -finit-local-zero, -finit-real,\n+\t-finit-integer, -finit-character, and -finit-logical flags.\n+\n 2007-09-20  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \tPR fortran/33221"}, {"sha": "42002cee21e3dbdc9e3af90d0e28b7686b05b7f0", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51b09ce3d9f6c39d2fd89f5351b064ca1f356a1b/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51b09ce3d9f6c39d2fd89f5351b064ca1f356a1b/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=51b09ce3d9f6c39d2fd89f5351b064ca1f356a1b", "patch": "@@ -510,6 +510,38 @@ enum gfc_isym_id\n typedef enum gfc_isym_id gfc_isym_id;\n \n \n+typedef enum\n+{\n+  GFC_INIT_REAL_OFF = 0,\n+  GFC_INIT_REAL_ZERO,\n+  GFC_INIT_REAL_NAN,\n+  GFC_INIT_REAL_INF,\n+  GFC_INIT_REAL_NEG_INF\n+}\n+init_local_real;\n+\n+typedef enum\n+{\n+  GFC_INIT_LOGICAL_OFF = 0,\n+  GFC_INIT_LOGICAL_FALSE,\n+  GFC_INIT_LOGICAL_TRUE\n+}\n+init_local_logical;\n+\n+typedef enum\n+{\n+  GFC_INIT_CHARACTER_OFF = 0,\n+  GFC_INIT_CHARACTER_ON\n+}\n+init_local_character;\n+\n+typedef enum\n+{\n+  GFC_INIT_INTEGER_OFF = 0,\n+  GFC_INIT_INTEGER_ON\n+}\n+init_local_integer;\n+\n /************************* Structures *****************************/\n \n /* Used for keeping things in balanced binary trees.  */\n@@ -1823,6 +1855,13 @@ typedef struct\n   int flag_sign_zero;\n   int flag_module_private;\n   int flag_recursive;\n+  int flag_init_local_zero;\n+  int flag_init_integer;\n+  int flag_init_integer_value;\n+  int flag_init_real;\n+  int flag_init_logical;\n+  int flag_init_character;\n+  char flag_init_character_value;\n \n   int fpe;\n "}, {"sha": "754974fe8c7c3f3e5b3166913806a0f07e8e3527", "filename": "gcc/fortran/invoke.texi", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51b09ce3d9f6c39d2fd89f5351b064ca1f356a1b/gcc%2Ffortran%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51b09ce3d9f6c39d2fd89f5351b064ca1f356a1b/gcc%2Ffortran%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finvoke.texi?ref=51b09ce3d9f6c39d2fd89f5351b064ca1f356a1b", "patch": "@@ -156,7 +156,9 @@ and warnings}.\n -fsecond-underscore @gol\n -fbounds-check  -fmax-stack-var-size=@var{n} @gol\n -fpack-derived  -frepack-arrays  -fshort-enums  -fexternal-blas @gol\n--fblas-matmul-limit=@var{n} -frecursive}\n+-fblas-matmul-limit=@var{n} -frecursive -finit-local-zero @gol\n+-finit-integer=@var{n} -finit-real=@var{<zero|inf|-inf|nan>} @gol\n+-finit-logical=@var{<true|false>} -finit-character=@var{n}}\n @end table\n \n @menu\n@@ -931,6 +933,33 @@ Allow indirect recursion by forcing all local arrays to be allocated\n on the stack. This flag cannot be used together with\n @option{-fmax-stack-var-size=} or @option{-fno-automatic}.\n \n+@item -finit-local-zero\n+@item -finit-integer=@var{n}\n+@item -finit-real=@var{<zero|inf|-inf|nan>} \n+@item -finit-logical=@var{<true|false>}\n+@item -finit-character=@var{n}\n+@opindex @code{finit-local-zero}\n+@opindex @code{finit-integer}\n+@opindex @code{finit-real}\n+@opindex @code{finit-logical}\n+@opindex @code{finit-character}\n+The @option{-finit-local-zero} option instructs the compiler to\n+initialize local @code{INTEGER}, @code{REAL}, and @code{COMPLEX}\n+variables to zero, @code{LOGICAL} variables to false, and\n+@code{CHARACTER} variables to a string of null bytes.  Finer-grained\n+initialization options are provided by the\n+@option{-finit-integer=@var{n}},\n+@option{-finit-real=@var{<zero|inf|-inf|nan>}} (which also initializes\n+the real and imaginary parts of local @code{COMPLEX} variables),\n+@option{-finit-logical=@var{<true|false>}}, and\n+@option{-finit-character=@var{n}} (where @var{n} is an ASCII character\n+value) options.  These options do not initialize components of derived\n+type variables, nor do they initialize variables that appear in an\n+@code{EQUIVALENCE} statement.  (This limitation may be removed in\n+future releases).\n+\n+Note that the @option{-finit-real=nan} option initializes @code{REAL}\n+and @code{COMPLEX} variables with a quiet NaN.\n @end table\n \n @xref{Code Gen Options,,Options for Code Generation Conventions,"}, {"sha": "55e8b51602898dd3f8fb6b92d3d962d38c250feb", "filename": "gcc/fortran/lang.opt", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51b09ce3d9f6c39d2fd89f5351b064ca1f356a1b/gcc%2Ffortran%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51b09ce3d9f6c39d2fd89f5351b064ca1f356a1b/gcc%2Ffortran%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Flang.opt?ref=51b09ce3d9f6c39d2fd89f5351b064ca1f356a1b", "patch": "@@ -196,6 +196,26 @@ fimplicit-none\n Fortran\n Specify that no implicit typing is allowed, unless overridden by explicit IMPLICIT statements\n \n+finit-character=\n+Fortran RejectNegative Joined UInteger\n+-finit-character=<n> Initialize local character variables to ASCII value n\n+\n+finit-integer=\n+Fortran RejectNegative Joined\n+-finit-integer=<n> Initialize local integer variables to n\n+\n+finit-local-zero\n+Fortran\n+Initialize local variables to zero (from g77)\n+\n+finit-logical=\n+Fortran RejectNegative Joined\n+-finit-logical=<true|false> Initialize local logical variables\n+\n+finit-real=\n+Fortran RejectNegative Joined\n+-finit-real=<zero|nan|inf|-inf> Initialize local real variables\n+\n fmax-errors=\n Fortran RejectNegative Joined UInteger\n -fmax-errors=<n>\tMaximum number of errors to report"}, {"sha": "5c3aefa4fe10ab4ad2b5a487e58a45bcfeb9156b", "filename": "gcc/fortran/options.c", "status": "modified", "additions": 56, "deletions": 1, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51b09ce3d9f6c39d2fd89f5351b064ca1f356a1b/gcc%2Ffortran%2Foptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51b09ce3d9f6c39d2fd89f5351b064ca1f356a1b/gcc%2Ffortran%2Foptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Foptions.c?ref=51b09ce3d9f6c39d2fd89f5351b064ca1f356a1b", "patch": "@@ -107,7 +107,13 @@ gfc_init_options (unsigned int argc ATTRIBUTE_UNUSED,\n   gfc_option.flag_openmp = 0;\n   gfc_option.flag_sign_zero = 1;\n   gfc_option.flag_recursive = 0;\n-\n+  gfc_option.flag_init_integer = GFC_INIT_INTEGER_OFF;\n+  gfc_option.flag_init_integer_value = 0;\n+  gfc_option.flag_init_real = GFC_INIT_REAL_OFF;\n+  gfc_option.flag_init_logical = GFC_INIT_LOGICAL_OFF;\n+  gfc_option.flag_init_character = GFC_INIT_CHARACTER_OFF;\n+  gfc_option.flag_init_character_value = (char)0;\n+  \n   gfc_option.fpe = 0;\n \n   /* Argument pointers cannot point to anything but their argument.  */\n@@ -650,6 +656,55 @@ gfc_handle_option (size_t scode, const char *arg, int value)\n       gfc_option.flag_default_double = value;\n       break;\n \n+    case OPT_finit_local_zero:\n+      gfc_option.flag_init_integer = GFC_INIT_INTEGER_ON;\n+      gfc_option.flag_init_integer_value = 0;\n+      gfc_option.flag_init_real = GFC_INIT_REAL_ZERO;\n+      gfc_option.flag_init_logical = GFC_INIT_LOGICAL_FALSE;\n+      gfc_option.flag_init_character = GFC_INIT_CHARACTER_ON;\n+      gfc_option.flag_init_character_value = (char)0;\n+      break;\n+\n+    case OPT_finit_logical_:\n+      if (!strcasecmp (arg, \"false\"))\n+\tgfc_option.flag_init_logical = GFC_INIT_LOGICAL_FALSE;\n+      else if (!strcasecmp (arg, \"true\"))\n+\tgfc_option.flag_init_logical = GFC_INIT_LOGICAL_TRUE;\n+      else\n+\tgfc_fatal_error (\"Unrecognized option to -finit-logical: %s\",\n+\t\t\t arg);\n+      break;\n+\n+    case OPT_finit_real_:\n+      if (!strcasecmp (arg, \"zero\"))\n+\tgfc_option.flag_init_real = GFC_INIT_REAL_ZERO;\n+      else if (!strcasecmp (arg, \"nan\"))\n+\tgfc_option.flag_init_real = GFC_INIT_REAL_NAN;\n+      else if (!strcasecmp (arg, \"inf\"))\n+\tgfc_option.flag_init_real = GFC_INIT_REAL_INF;\n+      else if (!strcasecmp (arg, \"-inf\"))\n+\tgfc_option.flag_init_real = GFC_INIT_REAL_NEG_INF;\n+      else\n+\tgfc_fatal_error (\"Unrecognized option to -finit-real: %s\",\n+\t\t\t arg);\n+      break;      \n+\n+    case OPT_finit_integer_:\n+      gfc_option.flag_init_integer = GFC_INIT_INTEGER_ON;\n+      gfc_option.flag_init_integer_value = atoi (arg);\n+      break;\n+\n+    case OPT_finit_character_:\n+      if (value >= 0 && value <= 127)\n+\t{\n+\t  gfc_option.flag_init_character = GFC_INIT_CHARACTER_ON;\n+\t  gfc_option.flag_init_character_value = (char)value;\n+\t}\n+      else\n+\tgfc_fatal_error (\"The value of n in -finit-character=n must be \"\n+\t\t\t \"between 0 and 127\");\n+      break;\n+\n     case OPT_I:\n       gfc_add_include_path (arg, true);\n       break;"}, {"sha": "2f578e736d50a7f688592b15174c3a62fc1afdec", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 201, "deletions": 14, "changes": 215, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51b09ce3d9f6c39d2fd89f5351b064ca1f356a1b/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51b09ce3d9f6c39d2fd89f5351b064ca1f356a1b/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=51b09ce3d9f6c39d2fd89f5351b064ca1f356a1b", "patch": "@@ -6605,26 +6605,15 @@ is_non_constant_shape_array (gfc_symbol *sym)\n   return not_constant;\n }\n \n-\n-/* Assign the default initializer to a derived type variable or result.  */\n-\n+/* Given a symbol and an initialization expression, add code to initialize\n+   the symbol to the function entry.  */\n static void\n-apply_default_init (gfc_symbol *sym)\n+build_init_assign (gfc_symbol *sym, gfc_expr *init)\n {\n   gfc_expr *lval;\n-  gfc_expr *init = NULL;\n   gfc_code *init_st;\n   gfc_namespace *ns = sym->ns;\n \n-  if (sym->attr.flavor != FL_VARIABLE && !sym->attr.function)\n-    return;\n-\n-  if (sym->ts.type == BT_DERIVED && sym->ts.derived)\n-    init = gfc_default_initializer (&sym->ts);\n-\n-  if (init == NULL)\n-    return;\n-\n   /* Search for the function namespace if this is a contained\n      function without an explicit result.  */\n   if (sym->attr.function && sym == sym->result\n@@ -6657,6 +6646,201 @@ apply_default_init (gfc_symbol *sym)\n   init_st->expr2 = init;\n }\n \n+/* Assign the default initializer to a derived type variable or result.  */\n+\n+static void\n+apply_default_init (gfc_symbol *sym)\n+{\n+  gfc_expr *init = NULL;\n+\n+  if (sym->attr.flavor != FL_VARIABLE && !sym->attr.function)\n+    return;\n+\n+  if (sym->ts.type == BT_DERIVED && sym->ts.derived)\n+    init = gfc_default_initializer (&sym->ts);\n+\n+  if (init == NULL)\n+    return;\n+\n+  build_init_assign (sym, init);\n+}\n+\n+/* Build an initializer for a local integer, real, complex, logical, or\n+   character variable, based on the command line flags finit-local-zero,\n+   finit-integer=, finit-real=, finit-logical=, and finit-runtime.  Returns \n+   null if the symbol should not have a default initialization.  */\n+static gfc_expr *\n+build_default_init_expr (gfc_symbol *sym)\n+{\n+  int char_len;\n+  gfc_expr *init_expr;\n+  int i;\n+  char *ch;\n+\n+  /* These symbols should never have a default initialization.  */\n+  if ((sym->attr.dimension && !gfc_is_compile_time_shape (sym->as))\n+      || sym->attr.external\n+      || sym->attr.dummy\n+      || sym->attr.pointer\n+      || sym->attr.in_equivalence\n+      || sym->attr.in_common\n+      || sym->attr.data\n+      || sym->module\n+      || sym->attr.cray_pointee\n+      || sym->attr.cray_pointer)\n+    return NULL;\n+\n+  /* Now we'll try to build an initializer expression.  */\n+  init_expr = gfc_get_expr ();\n+  init_expr->expr_type = EXPR_CONSTANT;\n+  init_expr->ts.type = sym->ts.type;\n+  init_expr->ts.kind = sym->ts.kind;\n+  init_expr->where = sym->declared_at;\n+  \n+  /* We will only initialize integers, reals, complex, logicals, and\n+     characters, and only if the corresponding command-line flags\n+     were set.  Otherwise, we free init_expr and return null.  */\n+  switch (sym->ts.type)\n+    {    \n+    case BT_INTEGER:\n+      if (gfc_option.flag_init_integer != GFC_INIT_INTEGER_OFF)\n+\tmpz_init_set_si (init_expr->value.integer, \n+\t\t\t gfc_option.flag_init_integer_value);\n+      else\n+\t{\n+\t  gfc_free_expr (init_expr);\n+\t  init_expr = NULL;\n+\t}\n+      break;\n+\n+    case BT_REAL:\n+      mpfr_init (init_expr->value.real);\n+      switch (gfc_option.flag_init_real)\n+\t{\n+\tcase GFC_INIT_REAL_NAN:\n+\t  mpfr_set_nan (init_expr->value.real);\n+\t  break;\n+\n+\tcase GFC_INIT_REAL_INF:\n+\t  mpfr_set_inf (init_expr->value.real, 1);\n+\t  break;\n+\n+\tcase GFC_INIT_REAL_NEG_INF:\n+\t  mpfr_set_inf (init_expr->value.real, -1);\n+\t  break;\n+\n+\tcase GFC_INIT_REAL_ZERO:\n+\t  mpfr_set_ui (init_expr->value.real, 0.0, GFC_RND_MODE);\n+\t  break;\n+\n+\tdefault:\n+\t  gfc_free_expr (init_expr);\n+\t  init_expr = NULL;\n+\t  break;\n+\t}\n+      break;\n+\t  \n+    case BT_COMPLEX:\n+      mpfr_init (init_expr->value.complex.r);\n+      mpfr_init (init_expr->value.complex.i);\n+      switch (gfc_option.flag_init_real)\n+\t{\n+\tcase GFC_INIT_REAL_NAN:\n+\t  mpfr_set_nan (init_expr->value.complex.r);\n+\t  mpfr_set_nan (init_expr->value.complex.i);\n+\t  break;\n+\n+\tcase GFC_INIT_REAL_INF:\n+\t  mpfr_set_inf (init_expr->value.complex.r, 1);\n+\t  mpfr_set_inf (init_expr->value.complex.i, 1);\n+\t  break;\n+\n+\tcase GFC_INIT_REAL_NEG_INF:\n+\t  mpfr_set_inf (init_expr->value.complex.r, -1);\n+\t  mpfr_set_inf (init_expr->value.complex.i, -1);\n+\t  break;\n+\n+\tcase GFC_INIT_REAL_ZERO:\n+\t  mpfr_set_ui (init_expr->value.complex.r, 0.0, GFC_RND_MODE);\n+\t  mpfr_set_ui (init_expr->value.complex.i, 0.0, GFC_RND_MODE);\n+\t  break;\n+\n+\tdefault:\n+\t  gfc_free_expr (init_expr);\n+\t  init_expr = NULL;\n+\t  break;\n+\t}\n+      break;\n+\t  \n+    case BT_LOGICAL:\n+      if (gfc_option.flag_init_logical == GFC_INIT_LOGICAL_FALSE)\n+\tinit_expr->value.logical = 0;\n+      else if (gfc_option.flag_init_logical == GFC_INIT_LOGICAL_TRUE)\n+\tinit_expr->value.logical = 1;\n+      else\n+\t{\n+\t  gfc_free_expr (init_expr);\n+\t  init_expr = NULL;\n+\t}\n+      break;\n+\t  \n+    case BT_CHARACTER:\n+      /* For characters, the length must be constant in order to \n+\t create a default initializer.  */\n+      if (gfc_option.flag_init_character == GFC_INIT_CHARACTER_ON\n+\t  && sym->ts.cl->length\n+\t  && sym->ts.cl->length->expr_type == EXPR_CONSTANT)\n+\t{\n+\t  char_len = mpz_get_si (sym->ts.cl->length->value.integer);\n+\t  init_expr->value.character.length = char_len;\n+\t  init_expr->value.character.string = gfc_getmem (char_len+1);\n+\t  ch = init_expr->value.character.string;\n+\t  for (i = 0; i < char_len; i++)\n+\t    *(ch++) = gfc_option.flag_init_character_value;\n+\t}\n+      else\n+\t{\n+\t  gfc_free_expr (init_expr);\n+\t  init_expr = NULL;\n+\t}\n+      break;\n+\t  \n+    default:\n+     gfc_free_expr (init_expr);\n+     init_expr = NULL;\n+    }\n+  return init_expr;\n+}\n+\n+/* Add an initialization expression to a local variable.  */\n+static void\n+apply_default_init_local (gfc_symbol *sym)\n+{\n+  gfc_expr *init = NULL;\n+\n+  /* The symbol should be a variable or a function return value.  */\n+  if ((sym->attr.flavor != FL_VARIABLE && !sym->attr.function)\n+      || (sym->attr.function && sym->result != sym))\n+    return;\n+\n+  /* Try to build the initializer expression.  If we can't initialize\n+     this symbol, then init will be NULL.  */\n+  init = build_default_init_expr (sym);\n+  if (init == NULL)\n+    return;\n+\n+  /* For saved variables, we don't want to add an initializer at \n+     function entry, so we just add a static initializer.  */\n+  if (sym->attr.save || sym->ns->save_all)\n+    {\n+      /* Don't clobber an existing initializer!  */\n+      gcc_assert (sym->value == NULL);\n+      sym->value = init;\n+      return;\n+    }\n+\n+  build_init_assign (sym, init);\n+}\n \n /* Resolution of common features of flavors variable and procedure.  */\n \n@@ -6771,6 +6955,9 @@ resolve_fl_variable (gfc_symbol *sym, int mp_flag)\n \t}\n     }\n \n+  if (sym->value == NULL && sym->attr.referenced)\n+    apply_default_init_local (sym); /* Try to apply a default initialization.  */\n+\n   /* Can the symbol have an initializer?  */\n   flag = 0;\n   if (sym->attr.allocatable || sym->attr.external || sym->attr.dummy"}, {"sha": "dd889ff6952eb769a2dcae1d110311ea5a100987", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51b09ce3d9f6c39d2fd89f5351b064ca1f356a1b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51b09ce3d9f6c39d2fd89f5351b064ca1f356a1b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=51b09ce3d9f6c39d2fd89f5351b064ca1f356a1b", "patch": "@@ -1,3 +1,14 @@\n+2007-09-20  Asher Langton  <langton2@llnl.gov>\n+\n+\tPR fortran/20441\n+\t* gfortran.dg/init_flag_1.f90: New.\n+\t* gfortran.dg/init_flag_2.f90: New.\n+\t* gfortran.dg/init_flag_3.f90: New.\n+\t* gfortran.dg/init_flag_4.f90: New.\n+\t* gfortran.dg/init_flag_5.f90: New.\n+\t* gfortran.dg/init_flag_6.f90: New.\n+\t* gfortran.dg/init_flag_7.f90: New.\n+\n 2007-09-20  Paolo Carlini  <pcarlini@suse.de>\n \n \tPR c++/33460"}, {"sha": "343d384ae3b1288b5a95bc1897e74be6ab6e3aa5", "filename": "gcc/testsuite/gfortran.dg/init_flag_1.f90", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51b09ce3d9f6c39d2fd89f5351b064ca1f356a1b/gcc%2Ftestsuite%2Fgfortran.dg%2Finit_flag_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51b09ce3d9f6c39d2fd89f5351b064ca1f356a1b/gcc%2Ftestsuite%2Fgfortran.dg%2Finit_flag_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finit_flag_1.f90?ref=51b09ce3d9f6c39d2fd89f5351b064ca1f356a1b", "patch": "@@ -0,0 +1,57 @@\n+! { dg-do run }\n+! { dg-options \"-finit-local-zero\" }\n+\n+program init_flag_1\n+  call real_test\n+  call logical_test\n+  call int_test\n+  call complex_test\n+  call char_test\n+end program init_flag_1\n+\n+! Test some initializations for both implicitly and\n+! explicitly declared local variables.\n+subroutine real_test\n+  real r1\n+  real r2(10)\n+  dimension r3(10,10)\n+  if (r1 /= 0.0) call abort\n+  if (r2(2) /= 0.0) call abort\n+  if (r3(5,5) /= 0.0) call abort\n+  if (r4 /= 0.0) call abort\n+end subroutine real_test\n+\n+subroutine logical_test\n+  logical l1\n+  logical l2(2)\n+  if (l1 .neqv. .false.) call abort\n+  if (l2(2) .neqv. .false.) call abort\n+end subroutine logical_test\n+\n+subroutine int_test\n+  integer i1\n+  integer i2(10)\n+  dimension i3(10,10)\n+  if (i1 /= 0) call abort\n+  if (i2(2) /= 0) call abort\n+  if (i3(5,5) /= 0) call abort\n+  if (i4 /= 0) call abort\n+end subroutine int_test\n+\n+subroutine complex_test\n+  complex c1\n+  complex c2(20,20)\n+  if (c1 /= (0.0,0.0)) call abort\n+  if (c2(1,1) /= (0.0,0.0)) call abort \n+end subroutine complex_test\n+\n+subroutine char_test\n+  character*1 c1\n+  character*8 c2, c3(5)\n+  character c4(10)\n+  if (c1 /= '\\0') call abort\n+  if (c2 /= '\\0\\0\\0\\0\\0\\0\\0\\0') call abort\n+  if (c3(1) /= '\\0\\0\\0\\0\\0\\0\\0\\0') call abort\n+  if (c3(5) /= '\\0\\0\\0\\0\\0\\0\\0\\0') call abort\n+  if (c4(5) /= '\\0') call abort\n+end subroutine char_test"}, {"sha": "c46cf1bd27f48ef9215859f13046a5c25ff566b7", "filename": "gcc/testsuite/gfortran.dg/init_flag_2.f90", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51b09ce3d9f6c39d2fd89f5351b064ca1f356a1b/gcc%2Ftestsuite%2Fgfortran.dg%2Finit_flag_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51b09ce3d9f6c39d2fd89f5351b064ca1f356a1b/gcc%2Ftestsuite%2Fgfortran.dg%2Finit_flag_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finit_flag_2.f90?ref=51b09ce3d9f6c39d2fd89f5351b064ca1f356a1b", "patch": "@@ -0,0 +1,45 @@\n+! { dg-do run }\n+! { dg-options \"-finit-integer=1 -finit-logical=true -finit-real=zero\" }\n+\n+program init_flag_2\n+  call real_test\n+  call logical_test\n+  call int_test\n+  call complex_test\n+end program init_flag_2\n+\n+! Test some initializations for both implicitly and\n+! explicitly declared local variables.\n+subroutine real_test\n+  real r1\n+  real r2(10)\n+  dimension r3(10,10)\n+  if (r1 /= 0.0) call abort\n+  if (r2(2) /= 0.0) call abort\n+  if (r3(5,5) /= 0.0) call abort\n+  if (r4 /= 0.0) call abort\n+end subroutine real_test\n+\n+subroutine logical_test\n+  logical l1\n+  logical l2(2)\n+  if (l1 .neqv. .true.) call abort\n+  if (l2(2) .neqv. .true.) call abort\n+end subroutine logical_test\n+\n+subroutine int_test\n+  integer i1\n+  integer i2(10)\n+  dimension i3(10,10)\n+  if (i1 /= 1) call abort\n+  if (i2(2) /= 1) call abort\n+  if (i3(5,5) /= 1) call abort\n+  if (i4 /= 1) call abort\n+end subroutine int_test\n+\n+subroutine complex_test\n+  complex c1\n+  complex c2(20,20)\n+  if (c1 /= (0.0,0.0)) call abort\n+  if (c2(1,1) /= (0.0,0.0)) call abort \n+end subroutine complex_test"}, {"sha": "3cd9dc22e86e864b9e941ba8246a65443274fac5", "filename": "gcc/testsuite/gfortran.dg/init_flag_3.f90", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51b09ce3d9f6c39d2fd89f5351b064ca1f356a1b/gcc%2Ftestsuite%2Fgfortran.dg%2Finit_flag_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51b09ce3d9f6c39d2fd89f5351b064ca1f356a1b/gcc%2Ftestsuite%2Fgfortran.dg%2Finit_flag_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finit_flag_3.f90?ref=51b09ce3d9f6c39d2fd89f5351b064ca1f356a1b", "patch": "@@ -0,0 +1,45 @@\n+! { dg-do run }\n+! { dg-options \"-finit-integer=-1 -finit-logical=false -finit-real=nan\" }\n+\n+program init_flag_3\n+  call real_test\n+  call logical_test\n+  call int_test\n+  call complex_test\n+end program init_flag_3\n+\n+! Test some initializations for both implicitly and\n+! explicitly declared local variables.\n+subroutine real_test\n+  real r1\n+  real r2(10)\n+  dimension r3(10,10)\n+  if (r1 .eq. r1) call abort\n+  if (r2(2) .eq. r2(2)) call abort\n+  if (r3(5,5) .eq. r3(5,5)) call abort\n+  if (r4 .eq. r4) call abort\n+end subroutine real_test\n+\n+subroutine logical_test\n+  logical l1\n+  logical l2(2)\n+  if (l1 .neqv. .false.) call abort\n+  if (l2(2) .neqv. .false.) call abort\n+end subroutine logical_test\n+\n+subroutine int_test\n+  integer i1\n+  integer i2(10)\n+  dimension i3(10,10)\n+  if (i1 /= -1) call abort\n+  if (i2(2) /= -1) call abort\n+  if (i3(5,5) /= -1) call abort\n+  if (i4 /= -1) call abort\n+end subroutine int_test\n+\n+subroutine complex_test\n+  complex c1\n+  complex c2(20,20)\n+  if (c1 .eq. c1) call abort\n+  if (c2(1,1) .eq. c2(1,1)) call abort \n+end subroutine complex_test"}, {"sha": "8ec40bc8fa55a40210e0f8832d6fe7a0a4fcffd8", "filename": "gcc/testsuite/gfortran.dg/init_flag_4.f90", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51b09ce3d9f6c39d2fd89f5351b064ca1f356a1b/gcc%2Ftestsuite%2Fgfortran.dg%2Finit_flag_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51b09ce3d9f6c39d2fd89f5351b064ca1f356a1b/gcc%2Ftestsuite%2Fgfortran.dg%2Finit_flag_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finit_flag_4.f90?ref=51b09ce3d9f6c39d2fd89f5351b064ca1f356a1b", "patch": "@@ -0,0 +1,18 @@\n+! { dg-do run }\n+! { dg-options \"-finit-real=inf\" }\n+\n+program init_flag_4\n+  call real_test\n+end program init_flag_4\n+\n+! Test some initializations for both implicitly and\n+! explicitly declared local variables.\n+subroutine real_test\n+  real r1\n+  real r2(10)\n+  dimension r3(10,10)\n+  if (r1 .le. 0 .or. r1 .ne. 2*r1) call abort\n+  if (r2(2) .le. 0 .or. r2(2) .ne. 2*r2(2)) call abort\n+  if (r3(5,5) .le. 0 .or. r3(5,5) .ne. 2*r3(5,5)) call abort\n+  if (r4 .le. 0 .or. r4 .ne. 2*r4) call abort\n+end subroutine real_test"}, {"sha": "51dbd16cfba0d041f6f692416d55dbbca74eb41e", "filename": "gcc/testsuite/gfortran.dg/init_flag_5.f90", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51b09ce3d9f6c39d2fd89f5351b064ca1f356a1b/gcc%2Ftestsuite%2Fgfortran.dg%2Finit_flag_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51b09ce3d9f6c39d2fd89f5351b064ca1f356a1b/gcc%2Ftestsuite%2Fgfortran.dg%2Finit_flag_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finit_flag_5.f90?ref=51b09ce3d9f6c39d2fd89f5351b064ca1f356a1b", "patch": "@@ -0,0 +1,18 @@\n+! { dg-do run }\n+! { dg-options \"-finit-real=-inf\" }\n+\n+program init_flag_5\n+  call real_test\n+end program init_flag_5\n+\n+! Test some initializations for both implicitly and\n+! explicitly declared local variables.\n+subroutine real_test\n+  real r1\n+  real r2(10)\n+  dimension r3(10,10)\n+  if (r1 .ge. 0 .or. r1 .ne. 2*r1) call abort\n+  if (r2(2) .ge. 0 .or. r2(2) .ne. 2*r2(2)) call abort\n+  if (r3(5,5) .ge. 0 .or. r3(5,5) .ne. 2*r3(5,5)) call abort\n+  if (r4 .ge. 0 .or. r4 .ne. 2*r4) call abort\n+end subroutine real_test"}, {"sha": "45b05cd7d3cb664823d8e5e3449a056af7bfd482", "filename": "gcc/testsuite/gfortran.dg/init_flag_6.f90", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51b09ce3d9f6c39d2fd89f5351b064ca1f356a1b/gcc%2Ftestsuite%2Fgfortran.dg%2Finit_flag_6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51b09ce3d9f6c39d2fd89f5351b064ca1f356a1b/gcc%2Ftestsuite%2Fgfortran.dg%2Finit_flag_6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finit_flag_6.f90?ref=51b09ce3d9f6c39d2fd89f5351b064ca1f356a1b", "patch": "@@ -0,0 +1,20 @@\n+! { dg-do run }\n+! { dg-options \"-finit-character=32\" }\n+\n+program init_flag_6\n+  call char_test\n+end program init_flag_6\n+\n+! Test some initializations for both implicitly and\n+! explicitly declared local variables.\n+subroutine char_test\n+  character*1 c1\n+  character*8 c2, c3(5)\n+  character c4(10)\n+  if (c1 /= ' ') call abort\n+  if (c2 /= '        ') call abort\n+  if (c3(1) /= '        ') call abort\n+  if (c3(5) /= '        ') call abort\n+  if (c4(5) /= ' ') call abort\n+end subroutine char_test\n+        "}, {"sha": "78829811d95249be63ce774070c152595436d718", "filename": "gcc/testsuite/gfortran.dg/init_flag_7.f90", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51b09ce3d9f6c39d2fd89f5351b064ca1f356a1b/gcc%2Ftestsuite%2Fgfortran.dg%2Finit_flag_7.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51b09ce3d9f6c39d2fd89f5351b064ca1f356a1b/gcc%2Ftestsuite%2Fgfortran.dg%2Finit_flag_7.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finit_flag_7.f90?ref=51b09ce3d9f6c39d2fd89f5351b064ca1f356a1b", "patch": "@@ -0,0 +1,47 @@\n+! { dg-do run }\n+! { dg-options \"-finit-integer=101\" }\n+\n+program init_flag_7\n+  call save_test1 (.true.)\n+  call save_test1 (.false.) \n+  call save_test2 (.true.)\n+  call save_test2 (.false.)\n+end program init_flag_7\n+\n+! Test some initializations for both implicitly and\n+! explicitly declared local variables.\n+subroutine save_test1 (first)\n+  logical first\n+  integer :: i1 = -100\n+  integer i2\n+  integer i3\n+  save i2\n+  if (first) then\n+     if (i1 .ne. -100) call abort\n+     if (i2 .ne. 101) call abort\n+     if (i3 .ne. 101) call abort\n+  else\n+     if (i1 .ne. 1001) call abort\n+     if (i2 .ne. 1002) call abort\n+     if (i3 .ne. 101) call abort\n+  end if\n+  i1 = 1001\n+  i2 = 1002\n+  i3 = 1003\n+end subroutine save_test1\n+        \n+subroutine save_test2 (first)\n+  logical first\n+  integer :: i1 = -100\n+  integer i2\n+  save\n+  if (first) then\n+     if (i1 .ne. -100) call abort\n+     if (i2 .ne. 101) call abort\n+  else\n+     if (i1 .ne. 1001) call abort\n+     if (i2 .ne. 1002) call abort\n+  end if\n+  i1 = 1001\n+  i2 = 1002\n+end subroutine save_test2"}]}