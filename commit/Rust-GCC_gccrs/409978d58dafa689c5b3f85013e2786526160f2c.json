{"sha": "409978d58dafa689c5b3f85013e2786526160f2c", "node_id": "C_kwDOANBUbNoAKDQwOTk3OGQ1OGRhZmE2ODljNWIzZjg1MDEzZTI3ODY1MjYxNjBmMmM", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-08-08T10:20:04Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-08-09T08:14:30Z"}, "message": "tree-optimization/106514 - add --param max-jump-thread-paths\n\nThe following adds a limit for the exponential greedy search of\nthe backwards jump threader.  The idea is to limit the search\nspace in a way that the paths considered are the same if the search\nwere in BFS order rather than DFS.  In particular it stops considering\nincoming edges into a block if the product of the in-degrees of\nblocks on the path exceeds the specified limit.\n\nWhen considering the low stmt copying limit of 7 (or 1 in the size\noptimize case) this means the degenerate case with maximum search\nspace is a sequence of conditions with no actual code\n\n  B1\n   |\\\n   | empty\n   |/\n  B2\n   |\\\n   ...\n  Bn\n   |\\\n\nGIMPLE_CONDs are costed 2, an equivalent GIMPLE_SWITCH already 4, so\nwe reach 7 already with 3 middle conditions (B1 and Bn do not count).\nThe search space would be 2^4 == 16 to reach this.  The FSM threads\nhistorically allowed for a thread length of 10 but is really looking\nfor a single multiway branch threaded across the backedge.  I've\nchosen the default of the new parameter to 64 which effectively\nlimits the outdegree of the switch statement (the cases reaching the\nbackedge) to that number (divided by 2 until I add some special\npruning for FSM threads due to the loop header indegree).  The\ntestcase ssa-dom-thread-7.c requires 56 at the moment (as said,\nsome special FSM thread pruning of considered edges would bring\nit down to half of that), but we now get one more threading\nand quite some more in later threadfull.  This testcase seems to\nbe difficult to check for expected transforms.\n\nThe new testcases add the degenerate case we currently thread\n(without deciding whether that's a good idea ...) plus one with\nan approripate limit that should prevent the threading.\n\nThis obsoletes the mentioned --param max-fsm-thread-length but\nI am not removing it as part of this patch.  When the search\nspace is limited the thread stmt size limit effectively provides\nmax-fsm-thread-length.\n\nThe param with its default does not help PR106514 enough to unleash\npath searching with the higher FSM stmt count limit.\n\n\tPR tree-optimization/106514\n\t* params.opt (max-jump-thread-paths): New.\n\t* doc/invoke.texi (max-jump-thread-paths): Document.\n\t* tree-ssa-threadbackward.cc (back_threader::find_paths_to_names):\n\tHonor max-jump-thread-paths, take overall_path argument.\n\t(back_threader::find_paths): Pass 1 as initial overall_path.\n\n\t* gcc.dg/tree-ssa/ssa-thread-16.c: New testcase.\n\t* gcc.dg/tree-ssa/ssa-thread-17.c: Likewise.\n\t* gcc.dg/tree-ssa/ssa-dom-thread-7.c: Adjust.", "tree": {"sha": "a4d418443807c4fe46fb021edaff2baee469b617", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a4d418443807c4fe46fb021edaff2baee469b617"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/409978d58dafa689c5b3f85013e2786526160f2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/409978d58dafa689c5b3f85013e2786526160f2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/409978d58dafa689c5b3f85013e2786526160f2c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/409978d58dafa689c5b3f85013e2786526160f2c/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a16b9f983824b6b9a25275cd23b6bba8c98b800", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a16b9f983824b6b9a25275cd23b6bba8c98b800", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a16b9f983824b6b9a25275cd23b6bba8c98b800"}], "stats": {"total": 64, "additions": 57, "deletions": 7}, "files": [{"sha": "f01696696bf4b897bf5e53722f1af3484c661905", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/409978d58dafa689c5b3f85013e2786526160f2c/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/409978d58dafa689c5b3f85013e2786526160f2c/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=409978d58dafa689c5b3f85013e2786526160f2c", "patch": "@@ -14754,6 +14754,13 @@ optimizing.\n Maximum number of statements allowed in a block that needs to be\n duplicated when threading jumps.\n \n+@item max-jump-thread-paths\n+The maximum number of paths to consider when searching for jump threading\n+opportunities.  When arriving at a block incoming edges are only considered\n+if the number of paths to be searched sofar multiplied by the incoming\n+edge degree does not exhaust the specified maximum number of paths to\n+consider.\n+\n @item max-fields-for-field-sensitive\n Maximum number of fields in a structure treated in\n a field sensitive manner during pointer analysis."}, {"sha": "132987343c6c3cf9409d91a089444fd904f5c186", "filename": "gcc/params.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/409978d58dafa689c5b3f85013e2786526160f2c/gcc%2Fparams.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/409978d58dafa689c5b3f85013e2786526160f2c/gcc%2Fparams.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.opt?ref=409978d58dafa689c5b3f85013e2786526160f2c", "patch": "@@ -582,6 +582,10 @@ Bound on the number of iterations the brute force # of iterations analysis algor\n Common Joined UInteger Var(param_max_jump_thread_duplication_stmts) Init(15) Param Optimization\n Maximum number of statements allowed in a block that needs to be duplicated when threading jumps.\n \n+-param=max-jump-thread-paths=\n+Common Joined UInteger Var(param_max_jump_thread_paths) Init(64) IntegerRange(1, 65536) Param Optimization\n+Search space limit for the backwards jump threader.\n+\n -param=max-last-value-rtl=\n Common Joined UInteger Var(param_max_last_value_rtl) Init(10000) Param Optimization\n The maximum number of RTL nodes that can be recorded as combiner's last value."}, {"sha": "47b8fdfa29a585c68f398b7bcfe8f566be211ddf", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dom-thread-7.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/409978d58dafa689c5b3f85013e2786526160f2c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/409978d58dafa689c5b3f85013e2786526160f2c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-7.c?ref=409978d58dafa689c5b3f85013e2786526160f2c", "patch": "@@ -11,7 +11,7 @@\n    to change decisions in switch expansion which in turn can expose new\n    jump threading opportunities.  Skip the later tests on aarch64.  */\n /* { dg-final { scan-tree-dump-not \"Jumps threaded\"  \"dom3\" { target { ! aarch64*-*-* } } } } */\n-/* { dg-final { scan-tree-dump \"Jumps threaded: 8\"  \"thread2\" { target { ! aarch64*-*-* } } } } */\n+/* { dg-final { scan-tree-dump \"Jumps threaded: 9\"  \"thread2\" { target { ! aarch64*-*-* } } } } */\n /* { dg-final { scan-tree-dump \"Jumps threaded: 18\"  \"thread2\" { target { aarch64*-*-* } } } } */\n \n enum STATE {"}, {"sha": "f96170b073dfa0869ad8396c6678849264d79c0a", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-thread-16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/409978d58dafa689c5b3f85013e2786526160f2c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-thread-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/409978d58dafa689c5b3f85013e2786526160f2c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-thread-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-thread-16.c?ref=409978d58dafa689c5b3f85013e2786526160f2c", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-threadfull1-details\" } */\n+\n+int res;\n+void foo (int a, int b, int c, int d, int e)\n+{\n+  if (a > 100)\n+    res = 3;\n+  if (b != 5)\n+    res = 5;\n+  if (c == 29)\n+    res = 7;\n+  if (d < 2)\n+    res = 9;\n+  /* Accounting whoes makes this not catched.  */\n+#if 0\n+  if (e != 37)\n+    res = 11;\n+#endif\n+  if (a < 10)\n+    res = 13;\n+}\n+\n+/* { dg-final { scan-tree-dump \"SUCCESS\" \"threadfull1\" } } */"}, {"sha": "94ee66667883476871f917e7679133ecd2510639", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-thread-17.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/409978d58dafa689c5b3f85013e2786526160f2c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-thread-17.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/409978d58dafa689c5b3f85013e2786526160f2c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-thread-17.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-thread-17.c?ref=409978d58dafa689c5b3f85013e2786526160f2c", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-threadfull1-details --param max-jump-thread-paths=15\" } */\n+\n+#include \"ssa-thread-16.c\"\n+\n+/* With limiting the search space we should no longer consider this path.  */\n+/* { dg-final { scan-tree-dump-not \"SUCCESS\" \"threadfull1\" } } */"}, {"sha": "a5f8f141071a74f95d98b96486a8171964720c16", "filename": "gcc/tree-ssa-threadbackward.cc", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/409978d58dafa689c5b3f85013e2786526160f2c/gcc%2Ftree-ssa-threadbackward.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/409978d58dafa689c5b3f85013e2786526160f2c/gcc%2Ftree-ssa-threadbackward.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadbackward.cc?ref=409978d58dafa689c5b3f85013e2786526160f2c", "patch": "@@ -90,7 +90,7 @@ class back_threader\n   bool debug_counter ();\n   edge maybe_register_path ();\n   void maybe_register_path_dump (edge taken_edge);\n-  void find_paths_to_names (basic_block bb, bitmap imports);\n+  void find_paths_to_names (basic_block bb, bitmap imports, unsigned);\n   edge find_taken_edge (const vec<basic_block> &path);\n   edge find_taken_edge_cond (const vec<basic_block> &path, gcond *);\n   edge find_taken_edge_switch (const vec<basic_block> &path, gswitch *);\n@@ -337,9 +337,12 @@ back_threader::find_taken_edge_cond (const vec<basic_block> &path,\n // INTERESTING bitmap, and register any such paths.\n //\n // BB is the current path being processed.\n+//\n+// OVERALL_PATHS is the search space up to this block\n \n void\n-back_threader::find_paths_to_names (basic_block bb, bitmap interesting)\n+back_threader::find_paths_to_names (basic_block bb, bitmap interesting,\n+\t\t\t\t    unsigned overall_paths)\n {\n   if (m_visited_bbs.add (bb))\n     return;\n@@ -352,8 +355,10 @@ back_threader::find_paths_to_names (basic_block bb, bitmap interesting)\n \t  || maybe_register_path ()))\n     ;\n \n-  // Continue looking for ways to extend the path\n-  else\n+  // Continue looking for ways to extend the path but limit the\n+  // search space along a branch\n+  else if ((overall_paths = overall_paths * EDGE_COUNT (bb->preds))\n+\t   <= (unsigned)param_max_jump_thread_paths)\n     {\n       // For further greedy searching we want to remove interesting\n       // names defined in BB but add ones on the PHI edges for the\n@@ -407,7 +412,7 @@ back_threader::find_paths_to_names (basic_block bb, bitmap interesting)\n \t\t\tunwind.quick_push (def);\n \t\t      }\n \t\t}\n-\t      find_paths_to_names (e->src, new_interesting);\n+\t      find_paths_to_names (e->src, new_interesting, overall_paths);\n \t      // Restore new_interesting.  We leave m_imports alone since\n \t      // we do not prune defs in BB from it and separately keeping\n \t      // track of which bits to unwind isn't worth the trouble.\n@@ -417,6 +422,9 @@ back_threader::find_paths_to_names (basic_block bb, bitmap interesting)\n \t    }\n \t}\n     }\n+  else if (dump_file && (dump_flags & TDF_DETAILS))\n+    fprintf (dump_file, \"  FAIL: Search space limit %d reached.\\n\",\n+\t     param_max_jump_thread_paths);\n \n   // Reset things to their original state.\n   m_path.pop ();\n@@ -447,7 +455,7 @@ back_threader::find_paths (basic_block bb, tree name)\n \n       auto_bitmap interesting;\n       bitmap_copy (interesting, m_imports);\n-      find_paths_to_names (bb, interesting);\n+      find_paths_to_names (bb, interesting, 1);\n     }\n }\n "}]}