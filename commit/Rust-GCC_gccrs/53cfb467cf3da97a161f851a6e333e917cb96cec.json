{"sha": "53cfb467cf3da97a161f851a6e333e917cb96cec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTNjZmI0NjdjZjNkYTk3YTE2MWY4NTFhNmUzMzNlOTE3Y2I5NmNlYw==", "commit": {"author": {"name": "Sandra Loosemore", "email": "sandra@codesourcery.com", "date": "2015-02-17T17:39:22Z"}, "committer": {"name": "Sandra Loosemore", "email": "sandra@gcc.gnu.org", "date": "2015-02-17T17:39:22Z"}, "message": "bpabi.S (test_div_by_zero): Make label names consistent between thumb2 and arm mode cases.\n\n2015-02-17  Sandra Loosemore  <sandra@codesourcery.com>\n\n\tlibgcc/\n\t* config/arm/bpabi.S (test_div_by_zero): Make label names\n\tconsistent between thumb2 and arm mode cases.  Separate the\n\tsigned comparison on the high word of the numerator from the\n\tunsigned comparison on the low word.\n\t* config/arm/bpabi-v6m.S (test_div_by_zero): Similarly separate\n\tsigned comparison.\n\n\tgcc/testsuite/\n\t* gcc.target/arm/divzero.c: New test case.\n\nFrom-SVN: r220765", "tree": {"sha": "9a2dd51186f5320995ccbaf23c8ab8afe5c540e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9a2dd51186f5320995ccbaf23c8ab8afe5c540e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/53cfb467cf3da97a161f851a6e333e917cb96cec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53cfb467cf3da97a161f851a6e333e917cb96cec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53cfb467cf3da97a161f851a6e333e917cb96cec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53cfb467cf3da97a161f851a6e333e917cb96cec/comments", "author": {"login": "SandraLoosemore", "id": 104087111, "node_id": "U_kgDOBjQ-Rw", "avatar_url": "https://avatars.githubusercontent.com/u/104087111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SandraLoosemore", "html_url": "https://github.com/SandraLoosemore", "followers_url": "https://api.github.com/users/SandraLoosemore/followers", "following_url": "https://api.github.com/users/SandraLoosemore/following{/other_user}", "gists_url": "https://api.github.com/users/SandraLoosemore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SandraLoosemore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SandraLoosemore/subscriptions", "organizations_url": "https://api.github.com/users/SandraLoosemore/orgs", "repos_url": "https://api.github.com/users/SandraLoosemore/repos", "events_url": "https://api.github.com/users/SandraLoosemore/events{/privacy}", "received_events_url": "https://api.github.com/users/SandraLoosemore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "77d10a1b208d0e78ee638a49952276be9b830db4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77d10a1b208d0e78ee638a49952276be9b830db4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77d10a1b208d0e78ee638a49952276be9b830db4"}], "stats": {"total": 142, "additions": 124, "deletions": 18}, "files": [{"sha": "9a2bb4b88fbe3f5808e6ff5367b5b36f632ec8ca", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53cfb467cf3da97a161f851a6e333e917cb96cec/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53cfb467cf3da97a161f851a6e333e917cb96cec/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=53cfb467cf3da97a161f851a6e333e917cb96cec", "patch": "@@ -1,3 +1,7 @@\n+2015-02-17  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\t* gcc.target/arm/divzero.c: New test case.\n+\n 2015-02-17  Tom de Vries  <tom@codesourcery.com>\n \n \t* gcc.target/x86_64/abi/callabi/vaarg-6.c: New test."}, {"sha": "7d398a5683b10f67081c855915f5366393d3b5de", "filename": "gcc/testsuite/gcc.target/arm/divzero.c", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53cfb467cf3da97a161f851a6e333e917cb96cec/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fdivzero.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53cfb467cf3da97a161f851a6e333e917cb96cec/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fdivzero.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fdivzero.c?ref=53cfb467cf3da97a161f851a6e333e917cb96cec", "patch": "@@ -0,0 +1,85 @@\n+/* { dg-require-effective-target arm_eabi } */\n+/* { dg-options \"\" } */\n+/* { dg-do run } */\n+\n+/* Check that long long divmod functions pass the right argument to\n+   __aeabi_ldiv0 on divide by zero.  */\n+\n+#ifdef DEBUGME\n+#include <stdio.h>\n+#else\n+extern void abort (void);\n+#endif\n+\n+/* Override div zero handler and simply return the provided value.  */\n+long long __aeabi_ldiv0 (long long r)\n+{\n+  return r;\n+}\n+\n+long long lldiv (long long a, long long b)\n+{\n+  return a / b;\n+}\n+\n+unsigned long long ulldiv (unsigned long long a, unsigned long long b)\n+{\n+  return a / b;\n+}\n+\n+void check (long long num, long long expected)\n+{\n+  long long res = lldiv (num, 0LL);\n+  if (res != expected)\n+#ifdef DEBUGME\n+    {\n+      printf (\"num=%08X:%08X\\n\", (unsigned)(num >> 32), (unsigned)num);\n+      printf (\"res=%08X:%08X\\n\", (unsigned)(res >> 32), (unsigned)res);\n+    }\n+#else\n+    abort ();\n+#endif\n+}\n+\n+void ucheck (unsigned long long num, unsigned long long expected)\n+{\n+  unsigned long long res = ulldiv (num, 0ULL);\n+  if (res != expected)\n+#ifdef DEBUGME\n+    {\n+      printf (\"num=%08X:%08X\\n\", (unsigned)(num >> 32), (unsigned)num);\n+      printf (\"res=%08X:%08X\\n\", (unsigned)(res >> 32), (unsigned)res);\n+    }\n+#else\n+    abort ();\n+#endif\n+}\n+\n+#define POS_BIG 0x7fffffffffffffffLL\n+#define NEG_BIG 0x8000000000000000LL\n+#define UNS_BIG 0xffffffffffffffffULL\n+\n+int main ()\n+{\n+  check (0LL, 0LL);\n+  check (1LL, POS_BIG);\n+  check (0x000000007fffffffLL, POS_BIG);\n+  check (0x00000000ffffffffLL, POS_BIG);\n+  check (0x0000000100000000LL, POS_BIG);\n+  check (POS_BIG, POS_BIG);\n+  check (-1LL, NEG_BIG);\n+  check (-0x000000007fffffffLL, NEG_BIG);\n+  check (-0x00000000ffffffffLL, NEG_BIG);\n+  check (-0x0000000100000000LL, NEG_BIG);\n+  check (NEG_BIG, NEG_BIG);\n+\n+  ucheck (0ULL, 0ULL);\n+  ucheck (1ULL, UNS_BIG);\n+  ucheck (0x000000007fffffffULL, UNS_BIG);\n+  ucheck (0x00000000ffffffffULL, UNS_BIG);\n+  ucheck (0x0000000100000000ULL, UNS_BIG);\n+  ucheck ((unsigned long long)POS_BIG, UNS_BIG);\n+  ucheck (UNS_BIG, UNS_BIG);\n+\n+  return 0;\n+}"}, {"sha": "e05ba785f06ff3bcaf5cab44dade36956f5f5343", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53cfb467cf3da97a161f851a6e333e917cb96cec/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53cfb467cf3da97a161f851a6e333e917cb96cec/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=53cfb467cf3da97a161f851a6e333e917cb96cec", "patch": "@@ -1,3 +1,12 @@\n+2015-02-17  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\t* config/arm/bpabi.S (test_div_by_zero): Make label names\n+\tconsistent between thumb2 and arm mode cases.  Separate the\n+\tsigned comparison on the high word of the numerator from the\n+\tunsigned comparison on the low word.\n+\t* config/arm/bpabi-v6m.S (test_div_by_zero): Similarly separate\n+\tsigned comparison.\n+\n 2015-02-17  Joseph Myers  <joseph@codesourcery.com>\n \n \t* config/nvptx/realloc.c: Include <stddef.h> instead of <stdlib.h>"}, {"sha": "a1e164032a08d04f7e8be80094d3b054b4e8bed4", "filename": "libgcc/config/arm/bpabi-v6m.S", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53cfb467cf3da97a161f851a6e333e917cb96cec/libgcc%2Fconfig%2Farm%2Fbpabi-v6m.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53cfb467cf3da97a161f851a6e333e917cb96cec/libgcc%2Fconfig%2Farm%2Fbpabi-v6m.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farm%2Fbpabi-v6m.S?ref=53cfb467cf3da97a161f851a6e333e917cb96cec", "patch": "@@ -85,19 +85,21 @@ FUNC_START aeabi_ulcmp\n \tcmp\tyyl, #0\n \tbne\t7f\n \tcmp\txxh, #0\n+\t.ifc\t\\signed, unsigned\n \tbne\t2f\n \tcmp\txxl, #0\n 2:\n-\t.ifc\t\\signed, unsigned\n \tbeq\t3f\n \tmov\txxh, #0\n \tmvn\txxh, xxh\t\t@ 0xffffffff\n \tmov\txxl, xxh\n 3:\n \t.else\n-\tbeq\t5f\n \tblt\t6f\n-\tmov\txxl, #0\n+\tbgt\t4f\n+\tcmp\txxl, #0\n+\tbeq\t5f\n+4:\tmov\txxl, #0\n \tmvn\txxl, xxl\t\t@ 0xffffffff\n \tlsr\txxh, xxl, #1\t\t@ 0x7fffffff\n \tb\t5f"}, {"sha": "f2d990d9a7bb5c42f21c68977906936a72b0c68d", "filename": "libgcc/config/arm/bpabi.S", "status": "modified", "additions": 21, "deletions": 15, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53cfb467cf3da97a161f851a6e333e917cb96cec/libgcc%2Fconfig%2Farm%2Fbpabi.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53cfb467cf3da97a161f851a6e333e917cb96cec/libgcc%2Fconfig%2Farm%2Fbpabi.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farm%2Fbpabi.S?ref=53cfb467cf3da97a161f851a6e333e917cb96cec", "patch": "@@ -80,43 +80,49 @@ ARM_FUNC_START aeabi_ulcmp\n /* Tail-call to divide-by-zero handlers which may be overridden by the user,\n    so unwinding works properly.  */\n #if defined(__thumb2__)\n-\tcbnz\tyyh, 1f\n-\tcbnz\tyyl, 1f\n+\tcbnz\tyyh, 2f\n+\tcbnz\tyyl, 2f\n \tcmp\txxh, #0\n+\t.ifc \\signed, unsigned\n \tdo_it\teq\n \tcmpeq\txxl, #0\n-\t.ifc \\signed, unsigned\n-\tbeq\t2f\n-\tmov\txxh, #0xffffffff\n-\tmov\txxl, xxh\n-2:\n+\tdo_it\tne, t\n+\tmovne\txxh, #0xffffffff\n+\tmovne\txxl, #0xffffffff\n \t.else\n-\tdo_it\tlt, t\n+\tdo_it\tlt, tt\n \tmovlt\txxl, #0\n \tmovlt\txxh, #0x80000000\n-\tdo_it\tgt, t\n-\tmovgt\txxh, #0x7fffffff\n-\tmovgt\txxl, #0xffffffff\n+\tblt\t1f\n+\tdo_it\teq\n+\tcmpeq\txxl, #0\n+\tdo_it\tne, t\n+\tmovne\txxh, #0x7fffffff\n+\tmovne\txxl, #0xffffffff\n \t.endif\n+1:\t\n \tb\tSYM (__aeabi_ldiv0) __PLT__\n-1:\n+2:\n #else\n \t/* Note: Thumb-1 code calls via an ARM shim on processors which\n \t   support ARM mode.  */\n \tcmp\tyyh, #0\n \tcmpeq\tyyl, #0\n \tbne\t2f\n \tcmp\txxh, #0\n-\tcmpeq\txxl, #0\n \t.ifc \\signed, unsigned\n+\tcmpeq\txxl, #0\n \tmovne\txxh, #0xffffffff\n \tmovne\txxl, #0xffffffff\n \t.else\n \tmovlt\txxh, #0x80000000\n \tmovlt\txxl, #0\n-\tmovgt\txxh, #0x7fffffff\n-\tmovgt\txxl, #0xffffffff\n+\tblt\t1f\n+\tcmpeq\txxl, #0\n+\tmovne\txxh, #0x7fffffff\n+\tmovne\txxl, #0xffffffff\n \t.endif\n+1:\n \tb\tSYM (__aeabi_ldiv0) __PLT__\n 2:\n #endif"}]}