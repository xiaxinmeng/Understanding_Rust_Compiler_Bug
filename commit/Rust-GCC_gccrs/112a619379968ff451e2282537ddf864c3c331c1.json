{"sha": "112a619379968ff451e2282537ddf864c3c331c1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTEyYTYxOTM3OTk2OGZmNDUxZTIyODI1MzdkZGY4NjRjM2MzMzFjMQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2016-11-24T21:48:13Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2016-11-24T21:48:13Z"}, "message": "i386.md (wide AND insn to QImode splitter): Use explicit mode macros.\n\n\t* config/i386/i386.md (wide AND insn to QImode splitter): Use\n\texplicit mode macros.\n\t(wide OR insn to QImode splitter): Ditto.\n\nFrom-SVN: r242852", "tree": {"sha": "3e1a54dd136e8eacfbce9e5285c13b19f570e3f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3e1a54dd136e8eacfbce9e5285c13b19f570e3f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/112a619379968ff451e2282537ddf864c3c331c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/112a619379968ff451e2282537ddf864c3c331c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/112a619379968ff451e2282537ddf864c3c331c1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/112a619379968ff451e2282537ddf864c3c331c1/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "292edab3a7777e08b11dec290cb12092935b04f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/292edab3a7777e08b11dec290cb12092935b04f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/292edab3a7777e08b11dec290cb12092935b04f6"}], "stats": {"total": 47, "additions": 27, "deletions": 20}, "files": [{"sha": "4244a98fd9595118035cd604232b5dfafb72fe8c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/112a619379968ff451e2282537ddf864c3c331c1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/112a619379968ff451e2282537ddf864c3c331c1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=112a619379968ff451e2282537ddf864c3c331c1", "patch": "@@ -1,3 +1,9 @@\n+2016-11-24  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (wide AND insn to QImode splitter): Use\n+\texplicit mode macros.\n+\t(wide OR insn to QImode splitter): Ditto.\n+\n 2016-11-24  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR rtl-optimization/77541"}, {"sha": "f80aa40b85e1c2b31e34af5956c75f2740621f9e", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 21, "deletions": 20, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/112a619379968ff451e2282537ddf864c3c331c1/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/112a619379968ff451e2282537ddf864c3c331c1/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=112a619379968ff451e2282537ddf864c3c331c1", "patch": "@@ -8625,14 +8625,13 @@\n ;; of memory mismatch stalls.  We may want to do the splitting for optimizing\n ;; for size, but that can (should?) be handled by generic code instead.\n (define_split\n-  [(set (match_operand 0 \"QIreg_operand\")\n-\t(and (match_operand 1 \"register_operand\")\n-\t     (match_operand 2 \"const_int_operand\")))\n+  [(set (match_operand:SWI248 0 \"QIreg_operand\")\n+\t(and:SWI248 (match_operand:SWI248 1 \"register_operand\")\n+\t\t    (match_operand:SWI248 2 \"const_int_operand\")))\n    (clobber (reg:CC FLAGS_REG))]\n    \"reload_completed\n     && (!TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun))\n-    && !(~INTVAL (operands[2]) & ~(255 << 8))\n-    && GET_MODE (operands[0]) != QImode\"\n+    && !(~INTVAL (operands[2]) & ~(255 << 8))\"\n   [(parallel [(set (zero_extract:SI (match_dup 0) (const_int 8) (const_int 8))\n \t\t   (and:SI (zero_extract:SI (match_dup 1)\n \t\t\t\t\t    (const_int 8) (const_int 8))\n@@ -8647,15 +8646,14 @@\n ;; Since AND can be encoded with sign extended immediate, this is only\n ;; profitable when 7th bit is not set.\n (define_split\n-  [(set (match_operand 0 \"any_QIreg_operand\")\n-\t(and (match_operand 1 \"general_operand\")\n-\t     (match_operand 2 \"const_int_operand\")))\n+  [(set (match_operand:SWI248 0 \"any_QIreg_operand\")\n+\t(and:SWI248 (match_operand:SWI248 1 \"general_operand\")\n+\t\t    (match_operand:SWI248 2 \"const_int_operand\")))\n    (clobber (reg:CC FLAGS_REG))]\n    \"reload_completed\n     && (!TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun))\n     && !(~INTVAL (operands[2]) & ~255)\n-    && !(INTVAL (operands[2]) & 128)\n-    && GET_MODE (operands[0]) != QImode\"\n+    && !(INTVAL (operands[2]) & 128)\"\n   [(parallel [(set (strict_low_part (match_dup 0))\n \t\t   (and:QI (match_dup 1)\n \t\t\t   (match_dup 2)))\n@@ -9020,15 +9018,19 @@\n    (set_attr \"length_immediate\" \"0\")\n    (set_attr \"mode\" \"QI\")])\n \n+;; Convert wide OR instructions with immediate operand to shorter QImode\n+;; equivalents when possible.\n+;; Don't do the splitting with memory operands, since it introduces risk\n+;; of memory mismatch stalls.  We may want to do the splitting for optimizing\n+;; for size, but that can (should?) be handled by generic code instead.\n (define_split\n-  [(set (match_operand 0 \"QIreg_operand\")\n-\t(any_or (match_operand 1 \"register_operand\")\n-\t\t(match_operand 2 \"const_int_operand\")))\n+  [(set (match_operand:SWI248 0 \"QIreg_operand\")\n+\t(any_or:SWI248 (match_operand:SWI248 1 \"register_operand\")\n+\t\t       (match_operand:SWI248 2 \"const_int_operand\")))\n    (clobber (reg:CC FLAGS_REG))]\n    \"reload_completed\n     && (!TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun))\n-    && !(INTVAL (operands[2]) & ~(255 << 8))\n-    && GET_MODE (operands[0]) != QImode\"\n+    && !(INTVAL (operands[2]) & ~(255 << 8))\"\n   [(parallel [(set (zero_extract:SI (match_dup 0) (const_int 8) (const_int 8))\n \t\t   (any_or:SI (zero_extract:SI (match_dup 1)\n \t\t\t\t\t       (const_int 8) (const_int 8))\n@@ -9043,15 +9045,14 @@\n ;; Since OR can be encoded with sign extended immediate, this is only\n ;; profitable when 7th bit is set.\n (define_split\n-  [(set (match_operand 0 \"any_QIreg_operand\")\n-\t(any_or (match_operand 1 \"general_operand\")\n-\t\t(match_operand 2 \"const_int_operand\")))\n+  [(set (match_operand:SWI248 0 \"any_QIreg_operand\")\n+\t(any_or:SWI248 (match_operand:SWI248 1 \"general_operand\")\n+\t\t       (match_operand:SWI248 2 \"const_int_operand\")))\n    (clobber (reg:CC FLAGS_REG))]\n    \"reload_completed\n     && (!TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun))\n     && !(INTVAL (operands[2]) & ~255)\n-    && (INTVAL (operands[2]) & 128)\n-    && GET_MODE (operands[0]) != QImode\"\n+    && (INTVAL (operands[2]) & 128)\"\n   [(parallel [(set (strict_low_part (match_dup 0))\n \t\t   (any_or:QI (match_dup 1)\n \t\t\t      (match_dup 2)))"}]}