{"sha": "f22a97d238b087b679028f1692df1a180c3fbbe7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjIyYTk3ZDIzOGIwODdiNjc5MDI4ZjE2OTJkZjFhMTgwYzNmYmJlNw==", "commit": {"author": {"name": "Mumit Khan", "email": "khan@xraylith.wisc.edu", "date": "2000-01-04T21:11:17Z"}, "committer": {"name": "Mumit Khan", "email": "khan@gcc.gnu.org", "date": "2000-01-04T21:11:17Z"}, "message": "gthr-win32.h (__gthread_active_p): Support Mingw MT runtime.\n\n2000-01-04  Mumit Khan  <khan@xraylith.wisc.edu>\n\n\t* gthr-win32.h (__gthread_active_p): Support Mingw MT runtime.\n\t(__gthread_key_create): Likewise.\n \t(__gthread_key_dtor):  Likewise.\n\t(__gthread_once): Fix logic.\n\t(__gthread_key_delete): Cast away constness.\n\n\t* i386/cygwin.h (SUBTARGET_SWITCHES): Add -mthreads option.\n\t* invoke.texi: Document.\n\t* i386/mingw32.h (CPP_SPEC): Use.\n\t(LIBGCC_SPEC): Likewise.\n\t* i386/crtdll.h (LIBGCC_SPEC): Likewise.\n\nFrom-SVN: r31215", "tree": {"sha": "2d5ea60f0dc75c966fafac88e66f0f17507fca9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2d5ea60f0dc75c966fafac88e66f0f17507fca9f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f22a97d238b087b679028f1692df1a180c3fbbe7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f22a97d238b087b679028f1692df1a180c3fbbe7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f22a97d238b087b679028f1692df1a180c3fbbe7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f22a97d238b087b679028f1692df1a180c3fbbe7/comments", "author": null, "committer": null, "parents": [{"sha": "aeecce429eb2e9daf4e8bdbd11dc798253d3eaa4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aeecce429eb2e9daf4e8bdbd11dc798253d3eaa4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aeecce429eb2e9daf4e8bdbd11dc798253d3eaa4"}], "stats": {"total": 135, "additions": 99, "deletions": 36}, "files": [{"sha": "d6909f6b278598957ec78bda060066dc995a6003", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f22a97d238b087b679028f1692df1a180c3fbbe7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f22a97d238b087b679028f1692df1a180c3fbbe7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f22a97d238b087b679028f1692df1a180c3fbbe7", "patch": "@@ -1,3 +1,17 @@\n+2000-01-04  Mumit Khan  <khan@xraylith.wisc.edu>\n+\n+\t* gthr-win32.h (__gthread_active_p): Support Mingw MT runtime.\n+\t(__gthread_key_create): Likewise. \n+ \t(__gthread_key_dtor):  Likewise.\n+\t(__gthread_once): Fix logic.\n+\t(__gthread_key_delete): Cast away constness.\n+\n+\t* i386/cygwin.h (SUBTARGET_SWITCHES): Add -mthreads option.\n+\t* invoke.texi: Document.\n+\t* i386/mingw32.h (CPP_SPEC): Use.\n+\t(LIBGCC_SPEC): Likewise.\n+\t* i386/crtdll.h (LIBGCC_SPEC): Likewise.\n+\n 2000-01-04  David Edelsohn  <edelsohn@gnu.org>\n \n \t* rs6000/sysv4.h (ASM_OUTPUT_DEF): Undefine."}, {"sha": "ae353c305997f39e1b7a05962d10fd58b286c2ff", "filename": "gcc/config/i386/crtdll.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f22a97d238b087b679028f1692df1a180c3fbbe7/gcc%2Fconfig%2Fi386%2Fcrtdll.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f22a97d238b087b679028f1692df1a180c3fbbe7/gcc%2Fconfig%2Fi386%2Fcrtdll.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcrtdll.h?ref=f22a97d238b087b679028f1692df1a180c3fbbe7", "patch": "@@ -3,7 +3,7 @@\n    as distinct from winnt.h, which is used to build GCC for use with a\n    windows style library and tool set and uses the Microsoft tools.\n    This variant uses CRTDLL.DLL insted of MSVCRTDLL.DLL.\n-   Copyright (C) 1998, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2000 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -32,7 +32,8 @@ Boston, MA 02111-1307, USA. */\n   -Asystem(winnt) -Acpu(i386) -Amachine(i386)\"\n \n #undef LIBGCC_SPEC\n-#define LIBGCC_SPEC \"-lmingw32 -lgcc -lmoldname -lcrtdll\"\n+#define LIBGCC_SPEC \\\n+  \"%{mthreads:-lmingwthrd} -lmingw32 -lgcc -lmoldname -lcrtdll\"\n \n /* Specify a different entry point when linking a DLL */\n #undef STARTFILE_SPEC"}, {"sha": "2a3e82d2f7578c21d0c93cb2663bcb9be6196601", "filename": "gcc/config/i386/cygwin.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f22a97d238b087b679028f1692df1a180c3fbbe7/gcc%2Fconfig%2Fi386%2Fcygwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f22a97d238b087b679028f1692df1a180c3fbbe7/gcc%2Fconfig%2Fi386%2Fcygwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcygwin.h?ref=f22a97d238b087b679028f1692df1a180c3fbbe7", "patch": "@@ -2,7 +2,7 @@\n    hosting on Windows NT 3.x, using a Unix style C library and tools,\n    as distinct from winnt.h, which is used to build GCC for use with a\n    windows style library and tool set and uses the Microsoft tools.\n-   Copyright (C) 1995, 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1995-2000 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -51,7 +51,8 @@ Boston, MA 02111-1307, USA. */\n { \"console\",\t\t  -MASK_WINDOWS, \"Create console application\" }, \\\n { \"dll\",\t\t  MASK_DLL, \"Generate code for a DLL\" },     \\\n { \"nop-fun-dllimport\",\t  MASK_NOP_FUN_DLLIMPORT, \"Ignore dllimport for functions\" }, \\\n-{ \"no-nop-fun-dllimport\", -MASK_NOP_FUN_DLLIMPORT, \"\" },\n+{ \"no-nop-fun-dllimport\", -MASK_NOP_FUN_DLLIMPORT, \"\" }, \\\n+{ \"threads\",\t\t  0, \"Use Mingw-specific thread support\" },\n \n \n /* Support the __declspec keyword by turning them into attributes."}, {"sha": "9516065dc19d66752a897f986271b1f329b7b855", "filename": "gcc/config/i386/mingw32.h", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f22a97d238b087b679028f1692df1a180c3fbbe7/gcc%2Fconfig%2Fi386%2Fmingw32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f22a97d238b087b679028f1692df1a180c3fbbe7/gcc%2Fconfig%2Fi386%2Fmingw32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmingw32.h?ref=f22a97d238b087b679028f1692df1a180c3fbbe7", "patch": "@@ -2,7 +2,7 @@\n    hosting on Windows32, using GNU tools and the Windows32 API Library,\n    as distinct from winnt.h, which is used to build GCC for use with a\n    windows style library and tool set and uses the Microsoft tools.\n-   Copyright (C) 1997, 1998, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1997-2000 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -45,7 +45,8 @@ Boston, MA 02111-1307, USA. */\n #define STANDARD_INCLUDE_COMPONENT \"MINGW32\"\n \n #undef CPP_SPEC\n-#define CPP_SPEC \"-remap %(cpp_cpu) %{posix:-D_POSIX_SOURCE}\"\n+#define CPP_SPEC \\\n+  \"-remap %(cpp_cpu) %{posix:-D_POSIX_SOURCE} %{mthreads:-D_MT}\"\n \n /* For Windows applications, include more libraries, but always include\n    kernel32.  */\n@@ -55,7 +56,8 @@ Boston, MA 02111-1307, USA. */\n \n /* Include in the mingw32 libraries with libgcc */\n #undef LIBGCC_SPEC\n-#define LIBGCC_SPEC \"-lmingw32 -lgcc -lmoldname -lmsvcrt\"\n+#define LIBGCC_SPEC \\\n+  \"%{mthreads:-lmingwthrd} -lmingw32 -lgcc -lmoldname -lmsvcrt\"\n \n #undef STARTFILE_SPEC\n #define STARTFILE_SPEC \"%{mdll:dllcrt2%O%s} %{!mdll:crt2%O%s} %{pg:gcrt2%O%s}\""}, {"sha": "c5c5899c8f850819345131a22db5c94064388914", "filename": "gcc/gthr-win32.h", "status": "modified", "additions": 64, "deletions": 28, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f22a97d238b087b679028f1692df1a180c3fbbe7/gcc%2Fgthr-win32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f22a97d238b087b679028f1692df1a180c3fbbe7/gcc%2Fgthr-win32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgthr-win32.h?ref=f22a97d238b087b679028f1692df1a180c3fbbe7", "patch": "@@ -1,6 +1,6 @@\n /* Threads compatibily routines for libgcc2.  */\n /* Compile this one with gcc.  */\n-/* Copyright (C) 1999 Free Software Foundation, Inc.\n+/* Copyright (C) 1999, 2000 Free Software Foundation, Inc.\n    Contributed by Mumit Khan <khan@xraylith.wisc.edu>.\n \n This file is part of GNU CC.\n@@ -34,23 +34,41 @@ Boston, MA 02111-1307, USA.  */\n    does not map well into pthread-inspired gcc's threading model, and so \n    there are caveats one needs to be aware of.\n \n-   1. The destructor supplied to __gthread_key_create is ignored. This\n-      will certainly cause memory leaks due to unreclaimed eh contexts\n-      (sizeof (eh_context) is at least 24 bytes for x86 currently).\n+   1. The destructor supplied to __gthread_key_create is ignored for\n+      generic x86-win32 ports. This will certainly cause memory leaks \n+      due to unreclaimed eh contexts (sizeof (eh_context) is at least \n+      24 bytes for x86 currently).\n \n       This memory leak may be significant for long-running applications\n       that make heavy use of C++ EH.\n \n+      However, Mingw runtime (version 0.3 or newer) provides a mechanism\n+      to emulate pthreads key dtors; the runtime provides a special DLL,\n+      linked in if -mthreads option is specified, that runs the dtors in\n+      the reverse order of registration when each thread exits. If\n+      -mthreads option is not given, a stub is linked in instead of the\n+      DLL, which results in memory leak. Other x86-win32 ports can use \n+      the same technique of course to avoid the leak.\n+\n    2. The error codes returned are non-POSIX like, and cast into ints.\n       This may cause incorrect error return due to truncation values on \n       hw where sizeof (DWORD) > sizeof (int).\n+   \n+   3. We might consider using Critical Sections instead of Windows32 \n+      mutexes for better performance, but emulating __gthread_mutex_trylock \n+      interface becomes more complicated (Win9x does not support\n+      TryEnterCriticalSectioni, while NT does).\n   \n-   The basic framework should work well enough. */\n+   The basic framework should work well enough. In the long term, GCC\n+   needs to use Structured Exception Handling on Windows32.  */\n \n #define __GTHREADS 1\n \n #include <windows.h>\n #include <errno.h>\n+#ifdef __MINGW32__\n+#include <_mingw.h>\n+#endif\n \n typedef DWORD __gthread_key_t;\n \n@@ -64,10 +82,24 @@ typedef HANDLE __gthread_mutex_t;\n #define __GTHREAD_ONCE_INIT {FALSE, -1}\n #define __GTHREAD_MUTEX_INIT_FUNCTION __gthread_mutex_init_function\n \n+#if __MINGW32_MAJOR_VERSION >= 1 || \\\n+  (__MINGW32_MAJOR_VERSION == 0 && __MINGW32_MINOR_VERSION > 2)\n+#define MINGW32_SUPPORTS_MT_EH 1\n+extern int __mingwthr_key_dtor PROTO((DWORD, void (*) (void *)));\n+/* Mingw runtime >= v0.3 provides a magic variable that is set to non-zero\n+   if -mthreads option was specified, or 0 otherwise. This is to get around \n+   the lack of weak symbols in PE-COFF.  */\n+extern int _CRT_MT;\n+#endif\n+\n static inline int\n __gthread_active_p ()\n {\n+#ifdef MINGW32_SUPPORTS_MT_EH\n+  return _CRT_MT;\n+#else\n   return 1;\n+#endif\n }\n \n static inline int\n@@ -85,48 +117,52 @@ __gthread_once (__gthread_once_t *once, void (*func) ())\n \t  (*func) ();\n \t  once->done = TRUE;\n \t}\n-    }\n-  else\n-    {\n-      /* Another thread is currently executing the code, so wait for it to\n-         finish; yield the CPU in the meantime.  */ \n-      while (! once->done)\n-        Sleep (0);\n+      else\n+\t{\n+\t  /* Another thread is currently executing the code, so wait for it \n+\t     to finish; yield the CPU in the meantime.  If performance \n+\t     does become an issue, the solution is to use an Event that \n+\t     we wait on here (and set above), but that implies a place to \n+\t     create the event before this routine is called.  */ \n+\t  while (! once->done)\n+\t    Sleep (0);\n+\t}\n     }\n   \n   return 0;\n }\n \n-/* Windows32 thread local keys don't support destructors; to avoid leaks,\n-   we will have to figure something out in the future.  */\n+/* Windows32 thread local keys don't support destructors; this leads to\n+   leaks, especially in threaded applications making extensive use of \n+   C++ EH. Mingw uses a thread-support DLL to work-around this problem.  */\n static inline int\n-__gthread_key_create (__gthread_key_t *key, \n-                      void (*dtor) (void *) __attribute__((__unused__)))\n+__gthread_key_create (__gthread_key_t *key, void (*dtor) (void *))\n {\n   int status = 0;\n   DWORD tls_index = TlsAlloc ();\n   if (tls_index != 0xFFFFFFFF)\n-    *key = tls_index;\n+    {\n+      *key = tls_index;\n+#ifdef MINGW32_SUPPORTS_MT_EH\n+      /* Mingw runtime will run the dtors in reverse order for each thread\n+         when the thread exits.  */\n+      status = __mingwthr_key_dtor (*key, dtor);\n+#endif\n+    }\n   else\n     status = (int) GetLastError ();\n   return status;\n }\n \n-/* Currently, this routine is never called since win32 keys don't support\n-   destructors. Hopefully we'll find a way in the future.  */\n+/* Currently, this routine is called only for Mingw runtime, and if\n+   -mthreads option is chosen to link in the thread support DLL.  */ \n static inline int\n __gthread_key_dtor (__gthread_key_t key, void *ptr)\n {\n-  int status = 0;\n-\n-  /* Just reset the key value to zero. */\n-  if (ptr)\n-    status = (TlsSetValue (key, 0) != 0) ? 0 : (int) GetLastError ();\n-  return status;\n+  /* Nothing needed. */\n+  return 0;\n }\n \n-/* Currently, this routine is never called since win32 keys don't support\n-   destructors. Hopefully we'll find a way in the future.  */\n static inline int\n __gthread_key_delete (__gthread_key_t key)\n {\n@@ -142,7 +178,7 @@ __gthread_getspecific (__gthread_key_t key)\n static inline int\n __gthread_setspecific (__gthread_key_t key, const void *ptr)\n {\n-  return (TlsSetValue (key, ptr) != 0) ? 0 : (int) GetLastError ();\n+  return (TlsSetValue (key, (void*) ptr) != 0) ? 0 : (int) GetLastError ();\n }\n \n static inline void"}, {"sha": "25dd6ed31c2199693f8e27ad86875d968968f60c", "filename": "gcc/invoke.texi", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f22a97d238b087b679028f1692df1a180c3fbbe7/gcc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f22a97d238b087b679028f1692df1a180c3fbbe7/gcc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finvoke.texi?ref=f22a97d238b087b679028f1692df1a180c3fbbe7", "patch": "@@ -1,4 +1,4 @@\n-@c Copyright (C) 1988, 89, 92-98, 1999 Free Software Foundation, Inc.\n+@c Copyright (C) 1988, 89, 92-99, 2000 Free Software Foundation, Inc.\n @c This is part of the GCC manual.\n @c For copying conditions, see the file gcc.texi.\n \n@@ -360,6 +360,7 @@ in the following sections.\n -mreg-alloc=@var{list}  -mregparm=@var{num}\n -malign-jumps=@var{num}  -malign-loops=@var{num}\n -malign-functions=@var{num} -mpreferred-stack-boundary=@var{num}\n+-mthreads\n \n @emph{HPPA Options}\n -march=@var{architecture type}\n@@ -5945,6 +5946,14 @@ This extra alignment does consume extra stack space.  Code that is sensitive\n to stack space usage, such as embedded systems and operating system kernels,\n may want to reduce the preferred alignment to\n @samp{-mpreferred-stack-boundary=2}.\n+\n+@item -mthreads\n+@kindex -mthreads\n+Support thread-safe exception handling on @samp{Mingw32}. Code that relies \n+on thread-safe exception handling must compile and link all code with the \n+@samp{-mthreads} option. When compiling, @samp{-mthreads} defines \n+@samp{-D_MT}; when linking, it links in a special thread helper library \n+@samp{-lmingwthrd} which cleans up per thread exception handling data.\n @end table\n \n @node HPPA Options"}]}