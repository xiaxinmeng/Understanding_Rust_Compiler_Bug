{"sha": "660bfe61d4045c7931a7c1c3a166d0a2cd199412", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjYwYmZlNjFkNDA0NWM3OTMxYTdjMWMzYTE2NmQwYTJjZDE5OTQxMg==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-10-01T00:16:30Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-10-01T00:16:30Z"}, "message": "Daily bump.", "tree": {"sha": "7b2e8a800d80464a754bd49cd111aabe04d6dd7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b2e8a800d80464a754bd49cd111aabe04d6dd7d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/660bfe61d4045c7931a7c1c3a166d0a2cd199412", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/660bfe61d4045c7931a7c1c3a166d0a2cd199412", "html_url": "https://github.com/Rust-GCC/gccrs/commit/660bfe61d4045c7931a7c1c3a166d0a2cd199412", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/660bfe61d4045c7931a7c1c3a166d0a2cd199412/comments", "author": null, "committer": null, "parents": [{"sha": "d1ac0f0dfba9d04bcf38132b3ae45db572e7f1ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1ac0f0dfba9d04bcf38132b3ae45db572e7f1ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1ac0f0dfba9d04bcf38132b3ae45db572e7f1ea"}], "stats": {"total": 436, "additions": 435, "deletions": 1}, "files": [{"sha": "988351b4c2067be65c0c7a0bcc7ef258927267ac", "filename": "gcc/ChangeLog", "status": "modified", "additions": 181, "deletions": 0, "changes": 181, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/660bfe61d4045c7931a7c1c3a166d0a2cd199412/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/660bfe61d4045c7931a7c1c3a166d0a2cd199412/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=660bfe61d4045c7931a7c1c3a166d0a2cd199412", "patch": "@@ -1,3 +1,184 @@\n+2020-09-30  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/97189\n+\t* attribs.c (attr_access::array_as_string): Avoid assuming a VLA\n+\taccess specification string contains a closing bracket.\n+\n+2020-09-30  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/97206\n+\t* attribs.c (attr_access::array_as_string): Avoid modifying a shared\n+\ttype in place and use build_type_attribute_qual_variant instead.\n+\n+2020-09-30  Przemyslaw Wirkus  <przemyslaw.wirkus@arm.com>\n+\n+\t* config/arm/arm-cpus.in: Add Cortex-A78 and Cortex-A78AE cores.\n+\t* config/arm/arm-tables.opt: Regenerate.\n+\t* config/arm/arm-tune.md: Regenerate.\n+\t* doc/invoke.texi: Update docs.\n+\n+2020-09-30  Przemyslaw Wirkus  <przemyslaw.wirkus@arm.com>\n+\n+\t* config/aarch64/aarch64-cores.def: Add Cortex-A78 and Cortex-A78AE cores.\n+\t* config/aarch64/aarch64-tune.md: Regenerate.\n+\t* doc/invoke.texi: Add -mtune=cortex-a78 and -mtune=cortex-a78ae.\n+\n+2020-09-30  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\n+\tPR target/96795\n+\t* config/arm/arm_mve.h (__ARM_mve_coerce2): Define.\n+\t(__arm_vaddq): Correct the scalar argument.\n+\t(__arm_vaddq_m): Likewise.\n+\t(__arm_vaddq_x): Likewise.\n+\t(__arm_vcmpeqq_m): Likewise.\n+\t(__arm_vcmpeqq): Likewise.\n+\t(__arm_vcmpgeq_m): Likewise.\n+\t(__arm_vcmpgeq): Likewise.\n+\t(__arm_vcmpgtq_m): Likewise.\n+\t(__arm_vcmpgtq): Likewise.\n+\t(__arm_vcmpleq_m): Likewise.\n+\t(__arm_vcmpleq): Likewise.\n+\t(__arm_vcmpltq_m): Likewise.\n+\t(__arm_vcmpltq): Likewise.\n+\t(__arm_vcmpneq_m): Likewise.\n+\t(__arm_vcmpneq): Likewise.\n+\t(__arm_vfmaq_m): Likewise.\n+\t(__arm_vfmaq): Likewise.\n+\t(__arm_vfmasq_m): Likewise.\n+\t(__arm_vfmasq): Likewise.\n+\t(__arm_vmaxnmavq): Likewise.\n+\t(__arm_vmaxnmavq_p): Likewise.\n+\t(__arm_vmaxnmvq): Likewise.\n+\t(__arm_vmaxnmvq_p): Likewise.\n+\t(__arm_vminnmavq): Likewise.\n+\t(__arm_vminnmavq_p): Likewise.\n+\t(__arm_vminnmvq): Likewise.\n+\t(__arm_vminnmvq_p): Likewise.\n+\t(__arm_vmulq_m): Likewise.\n+\t(__arm_vmulq): Likewise.\n+\t(__arm_vmulq_x): Likewise.\n+\t(__arm_vsetq_lane): Likewise.\n+\t(__arm_vsubq_m): Likewise.\n+\t(__arm_vsubq): Likewise.\n+\t(__arm_vsubq_x): Likewise.\n+\n+2020-09-30  Joel Hutton  <joel.hutton@arm.com>\n+\n+\tPR target/96837\n+\t* tree-vect-slp.c (vect_analyze_slp): Do not call\n+\tvect_attempt_slp_rearrange_stmts for vector constructors.\n+\n+2020-09-30  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* tree-vectorizer.h (SLP_TREE_REF_COUNT): New.\n+\t* tree-vect-slp.c (_slp_tree::_slp_tree, _slp_tree::~_slp_tree,\n+\tvect_free_slp_tree, vect_build_slp_tree, vect_print_slp_tree,\n+\tslp_copy_subtree, vect_attempt_slp_rearrange_stmts): Use it.\n+\n+2020-09-30  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* omp-offload.c (omp_discover_implicit_declare_target): Also\n+\thandled nested functions.\n+\n+2020-09-30  Tobias Burnus  <tobias@codesourcery.com>\n+\t    Tom de Vries  <tdevries@suse.de>\n+\n+\t* builtins.c (expand_builtin_cexpi, fold_builtin_sincos): Update\n+\ttargetm.libc_has_function call.\n+\t* builtins.def (DEF_C94_BUILTIN, DEF_C99_BUILTIN, DEF_C11_BUILTIN):\n+\t(DEF_C2X_BUILTIN, DEF_C99_COMPL_BUILTIN, DEF_C99_C90RES_BUILTIN):\n+\tSame.\n+\t* config/darwin-protos.h (darwin_libc_has_function): Update prototype.\n+\t* config/darwin.c (darwin_libc_has_function): Add arg.\n+\t* config/linux-protos.h (linux_libc_has_function): Update prototype.\n+\t* config/linux.c (linux_libc_has_function): Add arg.\n+\t* config/i386/i386.c (ix86_libc_has_function): Update\n+\ttargetm.libc_has_function call.\n+\t* config/nvptx/nvptx.c (nvptx_libc_has_function): New function.\n+\t(TARGET_LIBC_HAS_FUNCTION): Redefine to nvptx_libc_has_function.\n+\t* convert.c (convert_to_integer_1): Update targetm.libc_has_function\n+\tcall.\n+\t* match.pd: Same.\n+\t* target.def (libc_has_function): Add arg.\n+\t* doc/tm.texi: Regenerate.\n+\t* targhooks.c (default_libc_has_function, gnu_libc_has_function)\n+\t(no_c99_libc_has_function): Add arg.\n+\t* targhooks.h (default_libc_has_function, no_c99_libc_has_function)\n+\t(gnu_libc_has_function): Update prototype.\n+\t* tree-ssa-math-opts.c (pass_cse_sincos::execute): Update\n+\ttargetm.libc_has_function call.\n+\n+2020-09-30  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/97184\n+\t* config/i386/i386.md (UNSPECV_MOVDIRI): Renamed to ...\n+\t(UNSPEC_MOVDIRI): This.\n+\t(UNSPECV_MOVDIR64B): Renamed to ...\n+\t(UNSPEC_MOVDIR64B): This.\n+\t(movdiri<mode>): Use SET operation.\n+\t(@movdir64b_<mode>): Likewise.\n+\n+2020-09-30  Florian Weimer  <fweimer@redhat.com>\n+\n+\t* config/i386/i386-c.c (ix86_target_macros_internal): Define\n+\t__LAHF_SAHF__ and __MOVBE__ based on ISA flags.\n+\n+2020-09-30  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR target/97150\n+\t* config/aarch64/arm_neon.h (vqrshlb_u8): Make second argument\n+\tsigned.\n+\t(vqrshlh_u16): Likewise.\n+\t(vqrshls_u32): Likewise.\n+\t(vqrshld_u64): Likewise.\n+\t(vqshlb_u8): Likewise.\n+\t(vqshlh_u16): Likewise.\n+\t(vqshls_u32): Likewise.\n+\t(vqshld_u64): Likewise.\n+\t(vshld_u64): Likewise.\n+\n+2020-09-30  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR target/96313\n+\t* config/aarch64/aarch64-simd-builtins.def (sqmovun): Use UNOPUS\n+\tqualifiers.\n+\t* config/aarch64/arm_neon.h (vqmovun_s16): Adjust builtin call.\n+\tRemove unnecessary result cast.\n+\t(vqmovun_s32): Likewise.\n+\t(vqmovun_s64): Likewise.\n+\t(vqmovunh_s16): Likewise.  Fix return type.\n+\t(vqmovuns_s32): Likewise.\n+\t(vqmovund_s64): Likewise.\n+\n+2020-09-30  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_split_128bit_move_p): Add a\n+\tfunction comment.  Tighten check for FP moves.\n+\t* config/aarch64/aarch64.md (*movti_aarch64): Add a w<-Z alternative.\n+\t(*movtf_aarch64): Handle r<-Y like r<-r.  Remove unnecessary\n+\tearlyclobber.  Change splitter predicate from aarch64_reg_or_imm\n+\tto nonmemory_operand.\n+\n+2020-09-30  Alex Coplan  <alex.coplan@arm.com>\n+\n+\tPR target/97251\n+\t* config/arm/arm.md (movsf): Relax TARGET_HARD_FLOAT to\n+\tTARGET_VFP_BASE.\n+\t(movdf): Likewise.\n+\t* config/arm/vfp.md (no_literal_pool_df_immediate): Likewise.\n+\t(no_literal_pool_sf_immediate): Likewise.\n+\n+2020-09-30  Alan Modra  <amodra@gmail.com>\n+\n+\t* configure.ac (--with-long-double-format): Typo fix.\n+\t* configure: Regenerate.\n+\n+2020-09-30  Alan Modra  <amodra@gmail.com>\n+\n+\t* config/rs6000/rs6000.md (@tablejump<mode>_normal): Don't use\n+\tnon-existent operands[].\n+\t(@tablejump<mode>_nospec): Likewise.\n+\n 2020-09-30  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* config/rs6000/rs6000.md (tablejump): Simplify."}, {"sha": "c5ffab1955934891b98d3cae3edf935d0086c4af", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/660bfe61d4045c7931a7c1c3a166d0a2cd199412/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/660bfe61d4045c7931a7c1c3a166d0a2cd199412/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=660bfe61d4045c7931a7c1c3a166d0a2cd199412", "patch": "@@ -1 +1 @@\n-20200930\n+20201001"}, {"sha": "1e36632afd0a6129bd20fc3eef6699d37d3fde45", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/660bfe61d4045c7931a7c1c3a166d0a2cd199412/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/660bfe61d4045c7931a7c1c3a166d0a2cd199412/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=660bfe61d4045c7931a7c1c3a166d0a2cd199412", "patch": "@@ -1,3 +1,9 @@\n+2020-09-30  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/97189\n+\t* c-attribs.c (append_access_attr): Use the function declaration\n+\tlocation for a warning about an attribute access argument.\n+\n 2020-09-29  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/94695"}, {"sha": "eeb6f8a67e01c027f89c7255e67e975cd22a04aa", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/660bfe61d4045c7931a7c1c3a166d0a2cd199412/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/660bfe61d4045c7931a7c1c3a166d0a2cd199412/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=660bfe61d4045c7931a7c1c3a166d0a2cd199412", "patch": "@@ -1,3 +1,16 @@\n+2020-09-30  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* cp-tree.h (struct lang_decl_fn): Remove hidden_friend_p.\n+\t(DECL_HIDDEN_FRIEND_P): Delete.\n+\t* call.c (add_function_candidate): Drop assert about anticipated\n+\tdecl.\n+\t(build_new_op_1): Drop koenig lookup flagging for hidden friend.\n+\t* decl.c (duplicate_decls): Drop HIDDEN_FRIEND_P updating.\n+\t* name-lookup.c (do_pushdecl): Likewise.\n+\t(set_decl_namespace): Discover hiddenness from OVL_HIDDEN_P.\n+\t* pt.c (check_explicit_specialization): Record found_hidden\n+\texplicitly.\n+\n 2020-09-29  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/94695"}, {"sha": "fc65592973c398c1d5705976dbae5a61f9916c64", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/660bfe61d4045c7931a7c1c3a166d0a2cd199412/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/660bfe61d4045c7931a7c1c3a166d0a2cd199412/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=660bfe61d4045c7931a7c1c3a166d0a2cd199412", "patch": "@@ -1,3 +1,40 @@\n+2020-09-30  Jan Hubicka  <jh@suse.cz>\n+\n+\t* trans-decl.c (gfc_build_intrinsic_function_decls): Add traling dots\n+\tto spec strings so they match the number of parameters; do not use\n+\tR and W for non-pointer parameters. Drop pointless specifier on\n+\tcaf_stop_numeric and caf_get_team.\n+\n+2020-09-30  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* trans-io.c (gfc_build_io_library_fndecls): Add trailing dots so\n+\tlength of spec string matches number of arguments.\n+\n+2020-09-30  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/97242\n+\t* expr.c (gfc_is_not_contiguous): Fix check.\n+\t(gfc_check_pointer_assign): Use it.\n+\n+2020-09-30  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/97045\n+\t* trans-array.c (gfc_conv_array_ref): Make sure that the class\n+\tdecl is passed to build_array_ref in the case of unlimited\n+\tpolymorphic entities.\n+\t* trans-expr.c (gfc_conv_derived_to_class): Ensure that array\n+\trefs do not preceed the _len component. Free the _len expr.\n+\t* trans-stmt.c (trans_associate_var): Reset 'need_len_assign'\n+\tfor polymorphic scalars.\n+\t* trans.c (gfc_build_array_ref): When the vptr size is used for\n+\tspan, multiply by the _len field of unlimited polymorphic\n+\tentities, when non-zero.\n+\n+2020-09-30  Tom de Vries  <tdevries@suse.de>\n+\n+\t* f95-lang.c (gfc_init_builtin_functions):  Update\n+\ttargetm.libc_has_function call.\n+\n 2020-09-28  Mark Eggleston  <markeggleston@gcc.gnu.org>\n \n \tRevert:"}, {"sha": "72508ab36cbcbe03e6d74ed07da4f8cc7e4821dc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 175, "deletions": 0, "changes": 175, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/660bfe61d4045c7931a7c1c3a166d0a2cd199412/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/660bfe61d4045c7931a7c1c3a166d0a2cd199412/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=660bfe61d4045c7931a7c1c3a166d0a2cd199412", "patch": "@@ -1,3 +1,178 @@\n+2020-09-30  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/97189\n+\t* gcc.dg/attr-access-2.c: Adjust caret location.\n+\t* gcc.dg/Wvla-parameter-6.c: New test.\n+\t* gcc.dg/Wvla-parameter-7.c: New test.\n+\n+2020-09-30  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/97206\n+\t* gcc.dg/Warray-parameter-7.c: New test.\n+\t* gcc.dg/Warray-parameter-8.c: New test.\n+\t* gcc.dg/Wvla-parameter-5.c: New test.\n+\n+2020-09-30  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/96827\n+\t* gcc.target/i386/pr96827.c: New test.\n+\n+2020-09-30  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\tPR target/94595\n+\t* gcc.target/arm/thumb2-cond-cmp-1.c: Skip if arm_cortex_m.\n+\t* gcc.target/arm/thumb2-cond-cmp-2.c: Skip if arm_cortex_m.\n+\t* gcc.target/arm/thumb2-cond-cmp-3.c: Skip if arm_cortex_m.\n+\t* gcc.target/arm/thumb2-cond-cmp-4.c: Skip if arm_cortex_m.\n+\n+2020-09-30  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/vect/pr37027.c: Amend.\n+\t* gcc.dg/vect/pr67790.c: Likewise.\n+\t* gcc.dg/vect/pr92324-4.c: Likewise.\n+\t* gcc.dg/vect/pr92558.c: Likewise.\n+\t* gcc.dg/vect/pr95495.c: Likewise.\n+\t* gcc.dg/vect/slp-reduc-1.c: Likewise.\n+\t* gcc.dg/vect/slp-reduc-2.c: Likewise.\n+\t* gcc.dg/vect/slp-reduc-3.c: Likewise.\n+\t* gcc.dg/vect/slp-reduc-4.c: Likewise.\n+\t* gcc.dg/vect/slp-reduc-5.c: Likewise.\n+\t* gcc.dg/vect/slp-reduc-7.c: Likewise.\n+\t* gcc.dg/vect/vect-reduc-in-order-4.c: Likewise.\n+\n+2020-09-30  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\n+\tPR target/96795\n+\t* gcc.target/arm/mve/intrinsics/mve_fp_vaddq_n.c: New Test.\n+\t* gcc.target/arm/mve/intrinsics/mve_vaddq_n.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vaddq_m_n_f16-1.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vaddq_m_n_f32-1.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vaddq_x_n_f16-1.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vaddq_x_n_f32-1.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpeqq_m_n_f16-1.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpeqq_m_n_f32-1.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpeqq_n_f16-1.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpeqq_n_f32-1.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpgeq_m_n_f16-1.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpgeq_m_n_f32-1.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpgeq_n_f16-1.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpgeq_n_f32-1.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpgtq_m_n_f16-1.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpgtq_m_n_f32-1.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpgtq_n_f16-1.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpgtq_n_f32-1.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpleq_m_n_f16-1.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpleq_m_n_f32-1.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpleq_n_f16-1.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpleq_n_f32-1.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpltq_m_n_f16-1.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpltq_m_n_f32-1.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpltq_n_f16-1.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpltq_n_f32-1.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpneq_m_n_f16-1.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpneq_m_n_f32-1.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpneq_n_f16-1.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpneq_n_f32-1.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vfmaq_m_n_f16-1.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vfmaq_m_n_f32-1.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vfmaq_n_f16-1.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vfmaq_n_f32-1.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vfmasq_m_n_f16-1.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vfmasq_m_n_f32-1.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vfmasq_n_f16-1.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vfmasq_n_f32-1.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmaxnmavq_f16-1.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmaxnmavq_f32-1.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmaxnmavq_p_f16-1.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmaxnmavq_p_f32-1.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmaxnmvq_f16-1.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmaxnmvq_f32-1.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmaxnmvq_p_f16-1.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmaxnmvq_p_f32-1.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vminnmavq_f16-1.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vminnmavq_f32-1.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vminnmavq_p_f16-1.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vminnmavq_p_f32-1.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vminnmvq_f16-1.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vminnmvq_f32-1.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vminnmvq_p_f16-1.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vminnmvq_p_f32-1.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulq_m_n_f16-1.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulq_m_n_f32-1.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulq_n_f16-1.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulq_n_f32-1.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulq_x_n_f16-1.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulq_x_n_f32-1.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsetq_lane_f16-1.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsetq_lane_f32-1.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsubq_m_n_f16-1.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsubq_m_n_f32-1.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsubq_n_f16-1.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsubq_n_f32-1.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsubq_x_n_f16-1.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsubq_x_n_f32-1.c: Likewise.\n+\n+2020-09-30  Joel Hutton  <joel.hutton@arm.com>\n+\n+\tPR target/96837\n+\t* gcc.dg/vect/bb-slp-49.c: New test.\n+\n+2020-09-30  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/97242\n+\t* gfortran.dg/contiguous_11.f90: New test.\n+\t* gfortran.dg/contiguous_4.f90: Update.\n+\t* gfortran.dg/contiguous_7.f90: Update.\n+\n+2020-09-30  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/97045\n+\t* gfortran.dg/select_type_50.f90 : New test.\n+\n+2020-09-30  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/97184\n+\t* gcc.target/i386/movdir64b.c: New test.\n+\t* gcc.target/i386/movdiri32.c: Likewise.\n+\t* gcc.target/i386/movdiri64.c: Likewise.\n+\t* lib/target-supports.exp (check_effective_target_movdir): New.\n+\n+2020-09-30  Tom de Vries  <tdevries@suse.de>\n+\n+\t* gcc.dg/pr94600-1.c: Use effective target\n+\t(non_strict_align || pcc_bitfield_type_matters).\n+\t* gcc.dg/pr94600-3.c: Same.\n+\n+2020-09-30  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.target/i386/amxint8-dpbssd-2.c: Require effective targets\n+\tamx_tile and amx_int8.\n+\t* gcc.target/i386/amxint8-dpbsud-2.c: Likewise.\n+\t* gcc.target/i386/amxint8-dpbusd-2.c: Likewise.\n+\t* gcc.target/i386/amxint8-dpbuud-2.c: Likewise.\n+\t* gcc.target/i386/amxbf16-dpbf16ps-2.c: Require effective targets\n+\tamx_tile and amx_bf16.\n+\t* gcc.target/i386/amxtile-2.c: Require effective target amx_tile.\n+\n+2020-09-30  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR target/97150\n+\t* gcc.target/aarch64/pr97150.c: New test.\n+\n+2020-09-30  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR target/96313\n+\t* gcc.target/aarch64/pr96313.c: New test.\n+\t* gcc.target/aarch64/scalar_intrinsics.c (test_vqmovunh_s16):\n+\tAdjust return type.\n+\t(test_vqmovuns_s32): Likewise.\n+\t(test_vqmovund_s64): Likewise.\n+\n+2020-09-30  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/movtf_1.c: New test.\n+\t* gcc.target/aarch64/movti_1.c: Likewise.\n+\n 2020-09-29  Martin Sebor  <msebor@redhat.com>\n \n \tPR middle-end/97188"}, {"sha": "d6af0a2e800933a7e93fce90f071f63ae324e9c0", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/660bfe61d4045c7931a7c1c3a166d0a2cd199412/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/660bfe61d4045c7931a7c1c3a166d0a2cd199412/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=660bfe61d4045c7931a7c1c3a166d0a2cd199412", "patch": "@@ -1,3 +1,12 @@\n+2020-09-30  Andrew Stubbs  <ams@codesourcery.com>\n+\n+\t* parallel.c (gomp_resolve_num_threads): Ignore nest_var on nvptx\n+\tand amdgcn targets.\n+\n+2020-09-30  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* testsuite/libgomp.fortran/declare-target-3.f90: New test.\n+\n 2020-09-29  Andrew Stubbs  <ams@codesourcery.com>\n \n \t* config/gcn/bar.c (gomp_barrier_wait_end): Skip the barrier if the"}, {"sha": "8512437086ed1305ba5b6166163b2d97a30897d4", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/660bfe61d4045c7931a7c1c3a166d0a2cd199412/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/660bfe61d4045c7931a7c1c3a166d0a2cd199412/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=660bfe61d4045c7931a7c1c3a166d0a2cd199412", "patch": "@@ -1,3 +1,16 @@\n+2020-09-30  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* config/cpu/arm/cxxabi_tweaks.h (_GLIBCXX_GUARD_TEST_AND_ACQUIRE):\n+\t(_GLIBCXX_GUARD_SET_AND_RELEASE): Define for EABI.\n+\n+2020-09-30  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/c++config (_GLIBCXX_HAVE_BUILTIN_IS_SAME):\n+\tDefine for GCC 11 or when !__is_identifier(__is_same).\n+\t(_GLIBCXX_BUILTIN_IS_SAME_AS): Remove.\n+\t* include/std/type_traits (is_same, is_same_v): Replace uses\n+\tof _GLIBCXX_BUILTIN_IS_SAME_AS.\n+\n 2020-09-28  Patrick Palka  <ppalka@redhat.com>\n \n \t* include/std/ranges (filter_view): Declare the data member"}]}