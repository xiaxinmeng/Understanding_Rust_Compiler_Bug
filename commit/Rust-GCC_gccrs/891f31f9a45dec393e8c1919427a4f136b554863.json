{"sha": "891f31f9a45dec393e8c1919427a4f136b554863", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODkxZjMxZjlhNDVkZWMzOTNlOGMxOTE5NDI3YTRmMTM2YjU1NDg2Mw==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel@linux.ibm.com", "date": "2019-06-06T11:35:04Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2019-06-06T11:35:04Z"}, "message": "re PR rtl-optimization/88751 (Performance regression reload vs lra)\n\nFix PR88751\n\nThis patch implements a small improvement for the heuristic in lra\nwhich decides when it has to activate the simpler register allocation\nalgorithm.\n\ngcc/ChangeLog:\n\n2019-06-06  Andreas Krebbel  <krebbel@linux.ibm.com>\n\n\tPR rtl-optimization/88751\n\t* ira.c (ira): Use the number of the actually referenced registers\n\twhen calculating the threshold.\n\nFrom-SVN: r271996", "tree": {"sha": "97d3b3e6608fac4176c7e192fa0e1e80a7c062ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/97d3b3e6608fac4176c7e192fa0e1e80a7c062ff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/891f31f9a45dec393e8c1919427a4f136b554863", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/891f31f9a45dec393e8c1919427a4f136b554863", "html_url": "https://github.com/Rust-GCC/gccrs/commit/891f31f9a45dec393e8c1919427a4f136b554863", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/891f31f9a45dec393e8c1919427a4f136b554863/comments", "author": {"login": "Andreas-Krebbel", "id": 38103320, "node_id": "MDQ6VXNlcjM4MTAzMzIw", "avatar_url": "https://avatars.githubusercontent.com/u/38103320?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Andreas-Krebbel", "html_url": "https://github.com/Andreas-Krebbel", "followers_url": "https://api.github.com/users/Andreas-Krebbel/followers", "following_url": "https://api.github.com/users/Andreas-Krebbel/following{/other_user}", "gists_url": "https://api.github.com/users/Andreas-Krebbel/gists{/gist_id}", "starred_url": "https://api.github.com/users/Andreas-Krebbel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Andreas-Krebbel/subscriptions", "organizations_url": "https://api.github.com/users/Andreas-Krebbel/orgs", "repos_url": "https://api.github.com/users/Andreas-Krebbel/repos", "events_url": "https://api.github.com/users/Andreas-Krebbel/events{/privacy}", "received_events_url": "https://api.github.com/users/Andreas-Krebbel/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a96ed9f7d9b68237b507d454f014d1871c0435d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a96ed9f7d9b68237b507d454f014d1871c0435d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a96ed9f7d9b68237b507d454f014d1871c0435d5"}], "stats": {"total": 15, "additions": 14, "deletions": 1}, "files": [{"sha": "012af38d631863087f1ea33c942fbfd723c8fcd6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/891f31f9a45dec393e8c1919427a4f136b554863/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/891f31f9a45dec393e8c1919427a4f136b554863/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=891f31f9a45dec393e8c1919427a4f136b554863", "patch": "@@ -1,3 +1,9 @@\n+2019-06-06  Andreas Krebbel  <krebbel@linux.ibm.com>\n+\n+\tPR rtl-optimization/88751\n+\t* ira.c (ira): Use the number of the actually referenced registers\n+\twhen calculating the threshold.\n+\n 2019-06-06  Jakub Jelinek  <jakub@redhat.com>\n \n \t* configure: Regenerate."}, {"sha": "725636d8dc5429f362fb666a2a84acae8766a314", "filename": "gcc/ira.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/891f31f9a45dec393e8c1919427a4f136b554863/gcc%2Fira.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/891f31f9a45dec393e8c1919427a4f136b554863/gcc%2Fira.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira.c?ref=891f31f9a45dec393e8c1919427a4f136b554863", "patch": "@@ -5198,6 +5198,8 @@ ira (FILE *f)\n   int ira_max_point_before_emit;\n   bool saved_flag_caller_saves = flag_caller_saves;\n   enum ira_region saved_flag_ira_region = flag_ira_region;\n+  unsigned int i;\n+  int num_used_regs = 0;\n \n   clear_bb_flags ();\n \n@@ -5213,12 +5215,17 @@ ira (FILE *f)\n \n   ira_conflicts_p = optimize > 0;\n \n+  /* Determine the number of pseudos actually requiring coloring.  */\n+  for (i = FIRST_PSEUDO_REGISTER; i < DF_REG_SIZE (df); i++)\n+    num_used_regs += !!(DF_REG_USE_COUNT (i) + DF_REG_DEF_COUNT (i));\n+\n   /* If there are too many pseudos and/or basic blocks (e.g. 10K\n      pseudos and 10K blocks or 100K pseudos and 1K blocks), we will\n      use simplified and faster algorithms in LRA.  */\n   lra_simple_p\n     = (ira_use_lra_p\n-       && max_reg_num () >= (1 << 26) / last_basic_block_for_fn (cfun));\n+       && num_used_regs >= (1 << 26) / last_basic_block_for_fn (cfun));\n+\n   if (lra_simple_p)\n     {\n       /* It permits to skip live range splitting in LRA.  */"}]}