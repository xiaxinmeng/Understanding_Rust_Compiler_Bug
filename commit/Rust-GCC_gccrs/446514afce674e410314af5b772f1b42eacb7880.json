{"sha": "446514afce674e410314af5b772f1b42eacb7880", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDQ2NTE0YWZjZTY3NGU0MTAzMTRhZjViNzcyZjFiNDJlYWNiNzg4MA==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2018-06-25T23:45:05Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2018-06-25T23:45:05Z"}, "message": "predicates.md (const_float_1_operand): Fix match_code test.\n\n\t* config/v850/predicates.md (const_float_1_operand): Fix match_code\n\ttest.\n\t(const_float_0_operand): Remove unused predicate.\n\t* config/v850/v850.md (define_constants): Remove UNSPEC_LOOP.\n\t(define_c_enum unspec): Add LOOP, RCP and RSQRT constants.\n\t(recipsf2): New expander.  Original pattern now called\n\t(recipsf2_insn).\n\t(recipdf2, recipdf2_insn): Similarly.\n\t(rsqrtsf2, rsqrtsf2_insn): Similarly\n\t(rsqrtdf2, rsqrtdf2_insn): Similarly\n\nFrom-SVN: r262123", "tree": {"sha": "baba41b5cf57c35a690b219c55116a9d6493caf5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/baba41b5cf57c35a690b219c55116a9d6493caf5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/446514afce674e410314af5b772f1b42eacb7880", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/446514afce674e410314af5b772f1b42eacb7880", "html_url": "https://github.com/Rust-GCC/gccrs/commit/446514afce674e410314af5b772f1b42eacb7880", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/446514afce674e410314af5b772f1b42eacb7880/comments", "author": null, "committer": null, "parents": [{"sha": "0402566feb73dc72214c8ad802a2718ecb05072d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0402566feb73dc72214c8ad802a2718ecb05072d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0402566feb73dc72214c8ad802a2718ecb05072d"}], "stats": {"total": 89, "additions": 69, "deletions": 20}, "files": [{"sha": "b5f073de6638f180059bdf79cde8ac9488d0e3ec", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/446514afce674e410314af5b772f1b42eacb7880/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/446514afce674e410314af5b772f1b42eacb7880/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=446514afce674e410314af5b772f1b42eacb7880", "patch": "@@ -1,3 +1,16 @@\n+2018-06-25  Jeff Law  <law@redhat.com>\n+\n+\t* config/v850/predicates.md (const_float_1_operand): Fix match_code\n+\ttest.\n+\t(const_float_0_operand): Remove unused predicate.\n+\t* config/v850/v850.md (define_constants): Remove UNSPEC_LOOP.\n+\t(define_c_enum unspec): Add LOOP, RCP and RSQRT constants.\n+\t(recipsf2): New expander.  Original pattern now called\n+\t(recipsf2_insn).\n+\t(recipdf2, recipdf2_insn): Similarly.\n+\t(rsqrtsf2, rsqrtsf2_insn): Similarly\n+\t(rsqrtdf2, rsqrtdf2_insn): Similarly\n+\n 2018-06-26  Gerald Pfeifer  <gerald@pfeifer.com>\n \n \t* ginclude/stddef.h: Remove an obsolete comment on FreeBSD 5."}, {"sha": "68390a23eb7c9bbc39d08d665fccbe1df44e7ade", "filename": "gcc/config/v850/predicates.md", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/446514afce674e410314af5b772f1b42eacb7880/gcc%2Fconfig%2Fv850%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/446514afce674e410314af5b772f1b42eacb7880/gcc%2Fconfig%2Fv850%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fpredicates.md?ref=446514afce674e410314af5b772f1b42eacb7880", "patch": "@@ -475,7 +475,7 @@\n ;; Return true if OP is a float value operand with value as 1.\n \n (define_predicate \"const_float_1_operand\"\n-  (match_code \"const_int\")\n+  (match_code \"const_double\")\n {\n   if (GET_CODE (op) != CONST_DOUBLE\n       || mode != GET_MODE (op)\n@@ -485,19 +485,6 @@\n   return op == CONST1_RTX(mode);\n })\n \n-;; Return true if OP is a float value operand with value as 0.\n-\n-(define_predicate \"const_float_0_operand\"\n-  (match_code \"const_int\")\n-{\n-  if (GET_CODE (op) != CONST_DOUBLE\n-      || mode != GET_MODE (op)\n-      || (mode != DFmode && mode != SFmode))\n-    return 0;\n-\n-  return op == CONST0_RTX(mode);\n-})\n-\n (define_predicate \"label_ref_operand\"\n   (match_code \"label_ref\")\n )"}, {"sha": "67d906329e868845a82c90d28086f4b75a66273e", "filename": "gcc/config/v850/v850.md", "status": "modified", "additions": 55, "deletions": 6, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/446514afce674e410314af5b772f1b42eacb7880/gcc%2Fconfig%2Fv850%2Fv850.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/446514afce674e410314af5b772f1b42eacb7880/gcc%2Fconfig%2Fv850%2Fv850.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.md?ref=446514afce674e410314af5b772f1b42eacb7880", "patch": "@@ -44,10 +44,15 @@\n    (LP_REGNUM       \t\t31)         ; Return address register\n    (CC_REGNUM       \t\t32)         ; Condition code pseudo register\n    (FCC_REGNUM      \t\t33)         ; Floating Condition code pseudo register\n-   (UNSPEC_LOOP                200)         ; loop counter\n   ]\n )\n \n+(define_c_enum \"unspec\" [\n+  UNSPEC_LOOP\n+  UNSPEC_RCP\n+  UNSPEC_RSQRT\n+])\n+\n (define_attr \"length\" \"\"\n   (const_int 4))\n \n@@ -2450,8 +2455,22 @@\n ;; ---------------- special insns\n ;;\n \n-;;; reciprocal\n-(define_insn \"recipsf2\"\n+;; Generic code demands that the recip and rsqrt named patterns\n+;; have precisely one operand.  So that's what we expose in the\n+;; expander via the strange UNSPEC.  However, those expanders\n+;; generate normal looking recip and rsqrt patterns.\n+\n+(define_expand \"recipsf2\"\n+  [(set (match_operand:SF 0 \"register_operand\" \"\")\n+\t(unspec:SF [(match_operand:SF 1 \"register_operand\" \"\")]\n+\t\t   UNSPEC_RCP))]\n+  \"TARGET_USE_FPU\"\n+  {\n+    emit_insn (gen_recipsf2_insn (operands[0], CONST1_RTX (SFmode), operands[1]));\n+    DONE;\n+  })\n+\n+(define_insn \"recipsf2_insn\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=r\")\n \t(div:SF (match_operand:SF 1 \"const_float_1_operand\" \"\")\n \t\t(match_operand:SF 2 \"register_operand\" \"r\")))]\n@@ -2461,7 +2480,17 @@\n    (set_attr \"cc\" \"none_0hit\")\n    (set_attr \"type\" \"fpu\")])\n \n-(define_insn \"recipdf2\"\n+(define_expand \"recipdf2\"\n+  [(set (match_operand:DF 0 \"even_reg_operand\" \"\")\n+\t(unspec:DF [(match_operand:SF 1 \"even_reg_operand\" \"\")]\n+\t\t   UNSPEC_RCP))]\n+  \"TARGET_USE_FPU\"\n+  {\n+    emit_insn (gen_recipdf2_insn (operands[0], CONST1_RTX (DFmode), operands[1]));\n+    DONE;\n+  })\n+\n+(define_insn \"recipdf2_insn\"\n   [(set (match_operand:DF 0 \"even_reg_operand\" \"=r\")\n \t(div:DF (match_operand:DF 1 \"const_float_1_operand\" \"\")\n \t\t(match_operand:DF 2 \"even_reg_operand\" \"r\")))]\n@@ -2472,7 +2501,17 @@\n    (set_attr \"type\" \"fpu\")])\n \n ;;; reciprocal of square-root\n-(define_insn \"rsqrtsf2\"\n+(define_expand \"rsqrtsf2\"\n+  [(set (match_operand:SF 0 \"register_operand\" \"=\")\n+\t(unspec:SF [(match_operand:SF 1 \"register_operand\" \"\")]\n+\t\t   UNSPEC_RSQRT))]\n+  \"TARGET_USE_FPU\"\n+  {\n+    emit_insn (gen_rsqrtsf2_insn (operands[0], CONST1_RTX (SFmode), operands[1]));\n+    DONE;\n+  })\n+\n+(define_insn \"rsqrtsf2_insn\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=r\")\n \t(div:SF (match_operand:SF 1 \"const_float_1_operand\" \"\")\n \t\t(sqrt:SF (match_operand:SF 2 \"register_operand\" \"r\"))))]\n@@ -2482,7 +2521,17 @@\n    (set_attr \"cc\" \"none_0hit\")\n    (set_attr \"type\" \"fpu\")])\n \n-(define_insn \"rsqrtdf2\"\n+(define_expand \"rsqrtdf2\"\n+  [(set (match_operand:DF 0 \"even_reg_operand\" \"=r\")\n+\t(unspec:DF [(match_operand:DF 1 \"even_reg_operand\" \"r\")]\n+\t\t   UNSPEC_RSQRT))]\n+  \"TARGET_USE_FPU\"\n+  {\n+    emit_insn (gen_rsqrtdf2_insn (operands[0], CONST1_RTX (DFmode), operands[1]));\n+    DONE;\n+  })\n+\n+(define_insn \"rsqrtdf2_insn\"\n   [(set (match_operand:DF 0 \"even_reg_operand\" \"=r\")\n \t(div:DF (match_operand:DF 1 \"const_float_1_operand\" \"\")\n \t\t(sqrt:DF (match_operand:DF 2 \"even_reg_operand\" \"r\"))))]"}]}