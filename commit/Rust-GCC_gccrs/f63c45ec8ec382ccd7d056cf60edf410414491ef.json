{"sha": "f63c45ec8ec382ccd7d056cf60edf410414491ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjYzYzQ1ZWM4ZWMzODJjY2Q3ZDA1NmNmNjBlZGY0MTA0MTQ0OTFlZg==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@nerim.net", "date": "2002-07-29T08:26:45Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2002-07-29T08:26:45Z"}, "message": "pretty-print.h: Define more macros.\n\n\t* pretty-print.h: Define more macros.\n\t* diagnostic.h (output_formatted_integer): Moved from...\n\t* diagnostic.c: ... here.\n\nFrom-SVN: r55833", "tree": {"sha": "2363601d56cb77885f5b17bf887c20e645e9de31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2363601d56cb77885f5b17bf887c20e645e9de31"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f63c45ec8ec382ccd7d056cf60edf410414491ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f63c45ec8ec382ccd7d056cf60edf410414491ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f63c45ec8ec382ccd7d056cf60edf410414491ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f63c45ec8ec382ccd7d056cf60edf410414491ef/comments", "author": null, "committer": null, "parents": [{"sha": "789161102e21a16827d4d6c8b2b75d9a4a805ed7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/789161102e21a16827d4d6c8b2b75d9a4a805ed7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/789161102e21a16827d4d6c8b2b75d9a4a805ed7"}], "stats": {"total": 91, "additions": 58, "deletions": 33}, "files": [{"sha": "6130bada1e355868774eb7bf940dcc0c1f6204e8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f63c45ec8ec382ccd7d056cf60edf410414491ef/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f63c45ec8ec382ccd7d056cf60edf410414491ef/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f63c45ec8ec382ccd7d056cf60edf410414491ef", "patch": "@@ -1,3 +1,9 @@\n+2002-07-29  Gabriel Dos Reis  <gdr@nerim.net>\n+\n+\t* pretty-print.h: Define more macros.\n+\t* diagnostic.h (output_formatted_integer): Moved from...\n+\t* diagnostic.c: ... here.\n+\n 2002-07-28  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* stormy16.h (ASM_OUTPUT_SYMBOL_REF): Use ASM_OUTPUT_LABEL_REF."}, {"sha": "2343d243c31e7714e1df06787cd6a8de920d515d", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f63c45ec8ec382ccd7d056cf60edf410414491ef/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f63c45ec8ec382ccd7d056cf60edf410414491ef/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=f63c45ec8ec382ccd7d056cf60edf410414491ef", "patch": "@@ -37,14 +37,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"langhooks.h\"\n #include \"langhooks-def.h\"\n \n-#define output_formatted_integer(BUFFER, FORMAT, INTEGER)\t\\\n-  do\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      sprintf ((BUFFER)->digit_buffer, FORMAT, INTEGER);\t\\\n-      output_add_string (BUFFER, (BUFFER)->digit_buffer);\t\\\n-    }\t\t\t\t\t\t\t\t\\\n-  while (0)\n-\n #define output_text_length(BUFFER) (BUFFER)->line_length\n #define is_starting_newline(BUFFER) (output_text_length (BUFFER) == 0)\n #define line_wrap_cutoff(BUFFER) (BUFFER)->state.maximum_length"}, {"sha": "52d749acc48f2cb62a79e51751cc5f1200970430", "filename": "gcc/diagnostic.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f63c45ec8ec382ccd7d056cf60edf410414491ef/gcc%2Fdiagnostic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f63c45ec8ec382ccd7d056cf60edf410414491ef/gcc%2Fdiagnostic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.h?ref=f63c45ec8ec382ccd7d056cf60edf410414491ef", "patch": "@@ -160,6 +160,14 @@ struct output_buffer\n /* True if BUFFER is in line-wrapping mode.  */\n #define output_is_line_wrapping(BUFFER) (output_line_cutoff (BUFFER) > 0)\n \n+#define output_formatted_integer(BUFFER, FORMAT, INTEGER)\t\\\n+  do\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      sprintf ((BUFFER)->digit_buffer, FORMAT, INTEGER);\t\\\n+      output_add_string (BUFFER, (BUFFER)->digit_buffer);\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+  while (0)\n+\n /*  Forward declarations.  */\n typedef struct diagnostic_context diagnostic_context;\n typedef void (*diagnostic_starter_fn) PARAMS ((diagnostic_context *,"}, {"sha": "d0e52deef8eb2f14fa8769e85ae90bfeaf0ee9c8", "filename": "gcc/pretty-print.h", "status": "modified", "additions": 44, "deletions": 25, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f63c45ec8ec382ccd7d056cf60edf410414491ef/gcc%2Fpretty-print.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f63c45ec8ec382ccd7d056cf60edf410414491ef/gcc%2Fpretty-print.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpretty-print.h?ref=f63c45ec8ec382ccd7d056cf60edf410414491ef", "patch": "@@ -24,44 +24,63 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n \n #include \"diagnostic.h\"\n \n-typedef struct pretty_print_info pretty_print_info;\n-\n /* The type of pretty-printer flags passed to clients.  */\n typedef unsigned int pp_flags;\n \n-enum pp_padding\n+typedef enum\n {\n   pp_none, pp_before, pp_after\n-};\n+} pp_padding;\n \n struct pretty_print_info\n {\n-  /* The entity to pretty-print.  */\n-  tree entity;\n-  pp_flags flags;\n-  /* Where to put whitespace around the entity being formatted.  */\n-  enum pp_padding padding;\n   /* Where we print external representation of ENTITY.  */\n   output_buffer *buffer;\n+  pp_flags flags;\n+  /* Where to put whitespace around the entity being formatted.  */\n+  pp_padding padding;\n };\n \n+#define pp_left_paren(PPI)      output_add_character (pp_buffer (PPI), '(')\n+#define pp_right_paren(PPI)     output_add_character (pp_buffer (PPI), ')')\n+#define pp_left_bracket(PPI)    output_add_character (pp_buffer (PPI), '[')\n+#define pp_right_bracket(PPI)   output_add_character (pp_buffer (PPI), ']')\n+#define pp_left_brace(PPI)      output_add_character (pp_buffer (PPI), '{')\n+#define pp_right_brace(PPI)     output_add_character (pp_buffer (PPI), '}')\n+#define pp_semicolon(PPI)       output_add_character (pp_buffer (PPI), ';')\n+#define pp_comma(PPI)           output_add_string (pp_buffer (PPI), \", \")\n+#define pp_dot(PPI)             output_add_character (pp_buffer (PPI), '.')\n+#define pp_colon(PPI)           output_add_character (pp_buffer (PPI), ':')\n+#define pp_colon_colon(PPI)     output_add_string (pp_buffer (PPI), \"::\")\n+#define pp_arrow(PPI)           output_add_string (pp_buffer (PPI), \"->\")\n+#define pp_star(PPI)            output_add_character (pp_buffer (PPI), '*')\n+#define pp_quote(PPI)           output_add_character (pp_buffer (PPI), '\\'')\n+#define pp_backquote(PPI)       output_add_character (pp_buffer (PPI), '`')\n+#define pp_doublequote(PPI)     output_add_character (pp_buffer (PPI), '\"')\n+#define pp_newline(PPI)         output_add_newline (pp_buffer (PPI))\n+#define pp_character(PPI, C)    output_add_character (pp_buffer (PPI), C)\n+#define pp_whitespace(PPI)      output_add_space (pp_buffer (PPI))\n+#define pp_indentation(PPI)     output_indentation (pp_buffer (PPI))\n+#define pp_newline_and_indent(PPI, N) \\\n+  do {                                \\\n+    pp_indentation (PPI) += N;        \\\n+    pp_newline (PPI);                 \\\n+  } while (0)\n+#define pp_separate_with(PPI, C) \\\n+   do {                          \\\n+     pp_character (PPI, C);      \\\n+     pp_whitespace (PPI);        \\\n+   } while (0)\n+#define pp_format_integer(PPI, F, I) \\\n+   output_formatted_integer (pp_buffer (PPI), F, I)\n+#define pp_wide_integer(PPI, I) \\\n+   pp_format_integer (PPI, HOST_WIDE_INT_PRINT_DEC, (HOST_WIDE_INT) I)\n \n-#define pp_sorry_for_unsupported_tree(PPI, T) \\\n-  output_verbatim ((PPI)->buffer, \"\\nsorry: `%s' not supported by %s\\n\",\\\n-                   tree_code_name[(int) TREE_CODE (T)], __FUNCTION__)\n-\n-#define pp_left_paren(PPI)    output_add_character ((PPI)->buffer, '(')\n-#define pp_right_paren(PPI)   output_add_character ((PPI)->buffer, ')')\n-#define pp_left_bracket(PPI)  output_add_character ((PPI)->buffer, '[')\n-#define pp_right_bracket(PPI) output_add_character ((PPI)->buffer, '[')\n-#define pp_semi_colon(PPI)    output_add_character ((PPI)->buffer, ';')\n-#define pp_comma(PPI)         output_add_string ((PPI)->buffer, \", \")\n-#define pp_dot(PPI)           output_add_character ((PPI)->buffer, '.')\n-#define pp_colon(PPI)         output_add_character ((PPI)->buffer, ':')\n-#define pp_colon_colon(PPI)   output_add_string ((PPI)->buffer, \"::\")\n-#define pp_quote(PPI)         output_add_character ((PPI)->buffer, '\\'')\n-#define pp_backquote(PPI)     output_add_character ((PPI)->buffer, '`')\n-#define pp_doublequote(PPI)   output_add_character ((PPI)->buffer, '\"')\n+#define pp_identifier(PPI, ID)  output_add_string (pp_buffer (PPI), ID)\n+#define pp_tree_identifier(PPI, T) pp_identifier(PPI, IDENTIFIER_POINTER (T))\n \n+#define pp_unsupported_tree(PPI, T) \\\n+  output_verbatim (pp_buffer((PPI), \"#`%s' not supported by %s#\",\\\n+                   tree_code_name[(int) TREE_CODE (T)], __FUNCTION__)\n \n #endif /* GCC_PRETTY_PRINT_H */"}]}