{"sha": "fdfcc663025bcdca7562b2d16211a0588e484927", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmRmY2M2NjMwMjViY2RjYTc1NjJiMmQxNjIxMWEwNTg4ZTQ4NDkyNw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-10-27T13:16:48Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-10-27T13:16:48Z"}, "message": "[multiple changes]\n\n2009-10-27  Vincent Celier  <celier@adacore.com>\n\n\t* makeutl.adb (Check_Source_Info_In_ALI): Do not recompile if a subunit\n\tfrom the runtime is found, except if gnatmake switch -a is used and this\n\tsubunit cannot be found.\n\n2009-10-27  Ed Schonberg  <schonberg@adacore.com>\n\n\t* gnatbind.adb (gnatbind): When the -R option is selected, list subunits\n\tas well, for tools that need the complete closure of the main program.\n\n2009-10-27  Sergey Rybin  <rybin@adacore.com>\n\n\t* gnat_ugn.texi: Minor updates.\n\n2009-10-27  Emmanuel Briot  <briot@adacore.com>\n\n\t* prj-tree.adb (Free): Fix memory leak.\n\n2009-10-27  Vasiliy Fofanov  <fofanov@adacore.com>\n\n\t* adaint.c, s-os_lib.adb (__gnat_create_output_file_new): New function\n\tthat ensures the file that is created is new. Use this function to make\n\tsure there is no race condition if several processes are creating temp\n\tfiles concurrently.\n\n\t* s-os_lib.ads: Update comment.\n\n2009-10-27  Thomas Quinot  <quinot@adacore.com>\n\n\t* sem_ch12.adb: Minor reformatting\n\n2009-10-27  Javier Miranda  <miranda@adacore.com>\n\n\t* exp_ch4.ads (Integer_Promotion_Possible): New subprogram.\n\t* exp_ch4.adb (Integer_Promotion_Possible): New subprogram.\n\t(Expand_N_Type_Conversion): Replace code that checks if the integer\n\tpromotion of the operands is possible by a call to the new function\n\tInteger_Promotion_Possible. Minor reformating because an enclosing\n\tblock is now not needed.\n\t* checks.adb (Apply_Arithmetic_Overflow_Check): Add missing check to\n\tsee if the integer promotion is possible; in such case the runtime\n\tchecks are not generated.\n\nFrom-SVN: r153592", "tree": {"sha": "75fc96285c761beaf46e117da46ba26e1193adfb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/75fc96285c761beaf46e117da46ba26e1193adfb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fdfcc663025bcdca7562b2d16211a0588e484927", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdfcc663025bcdca7562b2d16211a0588e484927", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fdfcc663025bcdca7562b2d16211a0588e484927", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdfcc663025bcdca7562b2d16211a0588e484927/comments", "author": null, "committer": null, "parents": [{"sha": "477b99b63b10d050198e60bf44d8c1d3d89d5a0b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/477b99b63b10d050198e60bf44d8c1d3d89d5a0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/477b99b63b10d050198e60bf44d8c1d3d89d5a0b"}], "stats": {"total": 287, "additions": 192, "deletions": 95}, "files": [{"sha": "135d31795700765344f2271fd116e1186c4c3b4b", "filename": "gcc/ada/adaint.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdfcc663025bcdca7562b2d16211a0588e484927/gcc%2Fada%2Fadaint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdfcc663025bcdca7562b2d16211a0588e484927/gcc%2Fada%2Fadaint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.c?ref=fdfcc663025bcdca7562b2d16211a0588e484927", "patch": "@@ -922,6 +922,28 @@ __gnat_create_output_file (char *path)\n   return fd < 0 ? -1 : fd;\n }\n \n+int\n+__gnat_create_output_file_new (char *path)\n+{\n+  int fd;\n+#if defined (VMS)\n+  fd = open (path, O_WRONLY | O_CREAT | O_TRUNC | O_TEXT | O_EXCL, PERM,\n+             \"rfm=stmlf\", \"ctx=rec\", \"rat=none\", \"rop=nlk\",\n+             \"shr=del,get,put,upd\");\n+#elif defined (__MINGW32__)\n+  {\n+    TCHAR wpath[GNAT_MAX_PATH_LEN];\n+\n+    S2WSC (wpath, path, GNAT_MAX_PATH_LEN);\n+    fd = _topen (wpath, O_WRONLY | O_CREAT | O_TRUNC | O_TEXT | O_EXCL, PERM);\n+  }\n+#else\n+  fd = open (path, O_WRONLY | O_CREAT | O_TRUNC | O_TEXT | O_EXCL, PERM);\n+#endif\n+\n+  return fd < 0 ? -1 : fd;\n+}\n+\n int\n __gnat_open_append (char *path, int fmode)\n {"}, {"sha": "5f7e990ce76de1fd296dbda3fb4e5c84dc2dc6e5", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdfcc663025bcdca7562b2d16211a0588e484927/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdfcc663025bcdca7562b2d16211a0588e484927/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=fdfcc663025bcdca7562b2d16211a0588e484927", "patch": "@@ -28,6 +28,7 @@ with Debug;    use Debug;\n with Einfo;    use Einfo;\n with Errout;   use Errout;\n with Exp_Ch2;  use Exp_Ch2;\n+with Exp_Ch4;  use Exp_Ch4;\n with Exp_Ch11; use Exp_Ch11;\n with Exp_Pakd; use Exp_Pakd;\n with Exp_Util; use Exp_Util;\n@@ -844,14 +845,20 @@ package body Checks is\n \n       begin\n          --  Skip check if back end does overflow checks, or the overflow flag\n-         --  is not set anyway, or we are not doing code expansion.\n+         --  is not set anyway, or we are not doing code expansion, or the\n+         --  parent node is a type conversion whose operand is an arithmetic\n+         --  operation on signed integers on which the expander can promote\n+         --  later the operands to type integer (see Expand_N_Type_Conversion).\n \n          --  Special case CLI target, where arithmetic overflow checks can be\n          --  performed for integer and long_integer\n \n          if Backend_Overflow_Checks_On_Target\n            or else not Do_Overflow_Check (N)\n            or else not Expander_Active\n+           or else (Present (Parent (N))\n+                     and then Nkind (Parent (N)) = N_Type_Conversion\n+                     and then Integer_Promotion_Possible (Parent (N)))\n            or else\n              (VM_Target = CLI_Target and then Siz >= Standard_Integer_Size)\n          then"}, {"sha": "b72b8108f2dac6ecf8580f7080fb4d656b1052e0", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 82, "deletions": 73, "changes": 155, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdfcc663025bcdca7562b2d16211a0588e484927/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdfcc663025bcdca7562b2d16211a0588e484927/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=fdfcc663025bcdca7562b2d16211a0588e484927", "patch": "@@ -8042,88 +8042,54 @@ package body Exp_Ch4 is\n       --  have to be sure not to generate junk overflow checks in the first\n       --  place, since it would be trick to remove them here!\n \n-      declare\n-         Root_Operand_Type : constant Entity_Id := Root_Type (Operand_Type);\n-\n-      begin\n-         --  Enable transformation if all conditions are met\n+      if Integer_Promotion_Possible (N) then\n \n-         if\n-           --  We only do this transformation for source constructs. We assume\n-           --  that the expander knows what it is doing when it generates code.\n-\n-           Comes_From_Source (N)\n+         --  All conditions met, go ahead with transformation\n \n-           --  If the operand type is Short_Integer or Short_Short_Integer,\n-           --  then we will promote to Integer, which is available on all\n-           --  targets, and is sufficient to ensure no intermediate overflow.\n-           --  Furthermore it is likely to be as efficient or more efficient\n-           --  than using the smaller type for the computation so we do this\n-           --  unconditionally.\n-\n-           and then\n-             (Root_Operand_Type = Base_Type (Standard_Short_Integer)\n-               or else\n-              Root_Operand_Type = Base_Type (Standard_Short_Short_Integer))\n-\n-           --  Test for interesting operation, which includes addition,\n-           --  division, exponentiation, multiplication, subtraction, and\n-           --  unary negation.\n+         declare\n+            Opnd : Node_Id;\n+            L, R : Node_Id;\n \n-           and then Nkind_In (Operand, N_Op_Add,\n-                                       N_Op_Divide,\n-                                       N_Op_Expon,\n-                                       N_Op_Minus,\n-                                       N_Op_Multiply,\n-                                       N_Op_Subtract)\n-         then\n-            --  All conditions met, go ahead with transformation\n+         begin\n+            R :=\n+              Make_Type_Conversion (Loc,\n+                Subtype_Mark => New_Reference_To (Standard_Integer, Loc),\n+                Expression   => Relocate_Node (Right_Opnd (Operand)));\n \n-            declare\n-               Opnd : Node_Id;\n-               L, R : Node_Id;\n+            if Nkind (Operand) = N_Op_Minus then\n+               Opnd := Make_Op_Minus (Loc, Right_Opnd => R);\n \n-            begin\n-               R :=\n+            else\n+               L :=\n                  Make_Type_Conversion (Loc,\n                    Subtype_Mark => New_Reference_To (Standard_Integer, Loc),\n-                   Expression   => Relocate_Node (Right_Opnd (Operand)));\n-\n-               if Nkind (Operand) = N_Op_Minus then\n-                  Opnd := Make_Op_Minus (Loc, Right_Opnd => R);\n-\n-               else\n-                  L :=\n-                    Make_Type_Conversion (Loc,\n-                      Subtype_Mark => New_Reference_To (Standard_Integer, Loc),\n-                      Expression   => Relocate_Node (Left_Opnd (Operand)));\n-\n-                  case Nkind (Operand) is\n-                     when N_Op_Add =>\n-                        Opnd := Make_Op_Add (Loc, L, R);\n-                     when N_Op_Divide =>\n-                        Opnd := Make_Op_Divide (Loc, L, R);\n-                     when N_Op_Expon =>\n-                        Opnd := Make_Op_Expon (Loc, L, R);\n-                     when N_Op_Multiply =>\n-                        Opnd := Make_Op_Multiply (Loc, L, R);\n-                     when N_Op_Subtract =>\n-                        Opnd := Make_Op_Subtract (Loc, L, R);\n-                     when others =>\n-                        raise Program_Error;\n-                  end case;\n+                   Expression   => Relocate_Node (Left_Opnd (Operand)));\n+\n+               case Nkind (Operand) is\n+                  when N_Op_Add =>\n+                     Opnd := Make_Op_Add (Loc, L, R);\n+                  when N_Op_Divide =>\n+                     Opnd := Make_Op_Divide (Loc, L, R);\n+                  when N_Op_Expon =>\n+                     Opnd := Make_Op_Expon (Loc, L, R);\n+                  when N_Op_Multiply =>\n+                     Opnd := Make_Op_Multiply (Loc, L, R);\n+                  when N_Op_Subtract =>\n+                     Opnd := Make_Op_Subtract (Loc, L, R);\n+                  when others =>\n+                     raise Program_Error;\n+               end case;\n \n-                  Rewrite (N,\n-                    Make_Type_Conversion (Loc,\n-                      Subtype_Mark => Relocate_Node (Subtype_Mark (N)),\n-                      Expression   => Opnd));\n+               Rewrite (N,\n+                 Make_Type_Conversion (Loc,\n+                   Subtype_Mark => Relocate_Node (Subtype_Mark (N)),\n+                   Expression   => Opnd));\n \n-                     Analyze_And_Resolve (N, Target_Type);\n-                     return;\n-               end if;\n-            end;\n-         end if;\n-      end;\n+               Analyze_And_Resolve (N, Target_Type);\n+               return;\n+            end if;\n+         end;\n+      end if;\n \n       --  Do validity check if validity checking operands\n \n@@ -9187,6 +9153,49 @@ package body Exp_Ch4 is\n          return;\n    end Insert_Dereference_Action;\n \n+   --------------------------------\n+   -- Integer_Promotion_Possible --\n+   --------------------------------\n+\n+   function Integer_Promotion_Possible (N : Node_Id) return Boolean is\n+      Operand           : constant Node_Id   := Expression (N);\n+      Operand_Type      : constant Entity_Id := Etype (Operand);\n+      Root_Operand_Type : constant Entity_Id := Root_Type (Operand_Type);\n+\n+   begin\n+      pragma Assert (Nkind (N) = N_Type_Conversion);\n+\n+      return\n+\n+           --  We only do the transformation for source constructs. We assume\n+           --  that the expander knows what it is doing when it generates code.\n+\n+           Comes_From_Source (N)\n+\n+           --  If the operand type is Short_Integer or Short_Short_Integer,\n+           --  then we will promote to Integer, which is available on all\n+           --  targets, and is sufficient to ensure no intermediate overflow.\n+           --  Furthermore it is likely to be as efficient or more efficient\n+           --  than using the smaller type for the computation so we do this\n+           --  unconditionally.\n+\n+           and then\n+             (Root_Operand_Type = Base_Type (Standard_Short_Integer)\n+               or else\n+              Root_Operand_Type = Base_Type (Standard_Short_Short_Integer))\n+\n+           --  Test for interesting operation, which includes addition,\n+           --  division, exponentiation, multiplication, subtraction, and\n+           --  unary negation.\n+\n+           and then Nkind_In (Operand, N_Op_Add,\n+                                       N_Op_Divide,\n+                                       N_Op_Expon,\n+                                       N_Op_Minus,\n+                                       N_Op_Multiply,\n+                                       N_Op_Subtract);\n+   end Integer_Promotion_Possible;\n+\n    ------------------------------\n    -- Make_Array_Comparison_Op --\n    ------------------------------"}, {"sha": "fad8c15eea198b07fbf8006119eeeec71652da2c", "filename": "gcc/ada/exp_ch4.ads", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdfcc663025bcdca7562b2d16211a0588e484927/gcc%2Fada%2Fexp_ch4.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdfcc663025bcdca7562b2d16211a0588e484927/gcc%2Fada%2Fexp_ch4.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.ads?ref=fdfcc663025bcdca7562b2d16211a0588e484927", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -88,4 +88,11 @@ package Exp_Ch4 is\n    --  to insert those bodies at the right place. Nod provides the Sloc\n    --  value for generated code.\n \n+   function Integer_Promotion_Possible (N : Node_Id) return Boolean;\n+   --  Returns true if the node is a type conversion whose operand is an\n+   --  arithmetic operation on signed integers, and the base type of the\n+   --  signed integer type is smaller than Standard.Integer. In such case we\n+   --  have special circuitry in Expand_N_Type_Conversion to promote both of\n+   --  the operands to type Integer.\n+\n end Exp_Ch4;"}, {"sha": "0414f3f2052e35e8657694f56d2b3ff254b4cca9", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdfcc663025bcdca7562b2d16211a0588e484927/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdfcc663025bcdca7562b2d16211a0588e484927/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=fdfcc663025bcdca7562b2d16211a0588e484927", "patch": "@@ -20659,7 +20659,7 @@ Invoking @command{gnatcheck} on the command line has the form:\n @smallexample\n $ gnatcheck @ovar{switches}  @{@var{filename}@}\n       @r{[}^-files^/FILES^=@{@var{arg_list_filename}@}@r{]}\n-      @r{[}-cargs @var{gcc_switches}@r{]} @r{[}-rules @var{rule_options}@r{]}\n+      @r{[}-cargs @var{gcc_switches}@r{]} -rules @var{rule_options}\n @end smallexample\n \n @noindent"}, {"sha": "2c5def4442ce442188c6cf8a07e971fb1b8af2fd", "filename": "gcc/ada/gnatbind.adb", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdfcc663025bcdca7562b2d16211a0588e484927/gcc%2Fada%2Fgnatbind.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdfcc663025bcdca7562b2d16211a0588e484927/gcc%2Fada%2Fgnatbind.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatbind.adb?ref=fdfcc663025bcdca7562b2d16211a0588e484927", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -838,6 +838,27 @@ begin\n                   end if;\n                end loop;\n \n+               --  Subunits do not appear in the elaboration table because\n+               --  they are subsumed by their parent units, but we need to\n+               --  list them for other tools. For now they are listed after\n+               --  other files, rather than following immediately their parent,\n+               --  because there is no cheap link between the elaboration table\n+               --  and the ALIs table.\n+\n+               for J in Sdep.First .. Sdep.Last loop\n+                  if Sdep.Table (J).Subunit_Name /= No_Name\n+                    and then not Is_Internal_File_Name (Sdep.Table (J).Sfile)\n+                  then\n+                     if not Zero_Formatting then\n+                        Write_Str (\"   \");\n+                     end if;\n+\n+                     Write_Str\n+                       (Get_Name_String (Sdep.Table (J).Sfile));\n+                     Write_Eol;\n+                  end if;\n+               end loop;\n+\n                if not Zero_Formatting then\n                   Write_Eol;\n                end if;"}, {"sha": "bf8c1cde0b968e15cf5ff6728d205f148dec6134", "filename": "gcc/ada/makeutl.adb", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdfcc663025bcdca7562b2d16211a0588e484927/gcc%2Fada%2Fmakeutl.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdfcc663025bcdca7562b2d16211a0588e484927/gcc%2Fada%2Fmakeutl.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmakeutl.adb?ref=fdfcc663025bcdca7562b2d16211a0588e484927", "patch": "@@ -25,6 +25,7 @@\n \n with ALI;      use ALI;\n with Debug;\n+with Fname;\n with Osint;    use Osint;\n with Output;   use Output;\n with Opt;      use Opt;\n@@ -213,28 +214,31 @@ package body Makeutl is\n             if Unit_Name /= No_Name then\n \n                --  For separates, the file is no longer associated with the\n-               --  unit (\"proc-sep.adb\" is not associated with unit \"proc.sep\".\n-               --  So we need to check whether the source file still exists in\n+               --  unit (\"proc-sep.adb\" is not associated with unit \"proc.sep\")\n+               --  so we need to check whether the source file still exists in\n                --  the source tree: it will if it matches the naming scheme\n                --  (and then will be for the same unit).\n \n                if Find_Source\n-                 (In_Tree => Project_Tree,\n-                  Project => No_Project,\n+                 (In_Tree   => Project_Tree,\n+                  Project   => No_Project,\n                   Base_Name => SD.Sfile) = No_Source\n                then\n-                  --  If this is not a runtime file (when using -a) ? Otherwise\n-                  --  we get complaints about a-except.adb, which uses\n-                  --  separates.\n-\n-                  if not Check_Readonly_Files\n-                    or else Find_File (SD.Sfile, Osint.Source) = No_File\n+                  --  If this is not a runtime file or if, when gnatmake switch\n+                  --  -a is used, we are not able to find this subunit in the\n+                  --  source directories, then recompilation is needed.\n+\n+                  if not Fname.Is_Internal_File_Name (SD.Sfile)\n+                    or else\n+                      (Check_Readonly_Files and then\n+                       Find_File (SD.Sfile, Osint.Source) = No_File)\n                   then\n                      if Verbose_Mode then\n                         Write_Line\n-                          (\"While parsing ALI file: Sdep associates \"\n+                          (\"While parsing ALI file, file \"\n                            & Get_Name_String (SD.Sfile)\n-                           & \" with unit \" & Get_Name_String (Unit_Name)\n+                           & \" is indicated as containing subunit \"\n+                           & Get_Name_String (Unit_Name)\n                            & \" but this does not match what was found while\"\n                            & \" parsing the project. Will recompile\");\n                      end if;"}, {"sha": "7d77e2ab6fddc8b667b043d4e21fcf291596922e", "filename": "gcc/ada/prj-tree.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdfcc663025bcdca7562b2d16211a0588e484927/gcc%2Fada%2Fprj-tree.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdfcc663025bcdca7562b2d16211a0588e484927/gcc%2Fada%2Fprj-tree.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-tree.adb?ref=fdfcc663025bcdca7562b2d16211a0588e484927", "patch": "@@ -1000,6 +1000,7 @@ package body Prj.Tree is\n       if Proj /= null then\n          Project_Node_Table.Free (Proj.Project_Nodes);\n          Projects_Htable.Reset (Proj.Projects_HT);\n+         Free (Proj.Project_Path);\n          Unchecked_Free (Proj);\n       end if;\n    end Free;"}, {"sha": "a3e51cd5e97bcd090d498827649489bd5b8cc5bf", "filename": "gcc/ada/s-os_lib.adb", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdfcc663025bcdca7562b2d16211a0588e484927/gcc%2Fada%2Fs-os_lib.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdfcc663025bcdca7562b2d16211a0588e484927/gcc%2Fada%2Fs-os_lib.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-os_lib.adb?ref=fdfcc663025bcdca7562b2d16211a0588e484927", "patch": "@@ -783,6 +783,32 @@ package body System.OS_Lib is\n       Attempts : Natural := 0;\n       Current  : String (Current_Temp_File_Name'Range);\n \n+      ---------------------------------\n+      -- Create_New_Output_Text_File --\n+      ---------------------------------\n+\n+      function Create_New_Output_Text_File\n+        (Name : String) return File_Descriptor;\n+      --  Similar to Create_Output_Text_File, except it fails if the file\n+      --  already exists. We need this behavior to ensure we don't accidentally\n+      --  open a temp file that has just been created by a concurrently running\n+      --  process. There is no point exposing this function, as it's generally\n+      --  not particularly useful.\n+\n+      function Create_New_Output_Text_File\n+        (Name : String) return File_Descriptor is\n+         function C_Create_File\n+           (Name : C_File_Name) return File_Descriptor;\n+         pragma Import (C, C_Create_File, \"__gnat_create_output_file_new\");\n+\n+         C_Name : String (1 .. Name'Length + 1);\n+\n+      begin\n+         C_Name (1 .. Name'Length) := Name;\n+         C_Name (C_Name'Last)      := ASCII.NUL;\n+         return C_Create_File (C_Name (C_Name'First)'Address);\n+      end Create_New_Output_Text_File;\n+\n    begin\n       --  Loop until a new temp file can be created\n \n@@ -845,9 +871,9 @@ package body System.OS_Lib is\n          --  Attempt to create the file\n \n          if Stdout then\n-            FD := Create_Output_Text_File (Current);\n+            FD := Create_New_Output_Text_File (Current);\n          else\n-            FD := Create_File (Current, Binary);\n+            FD := Create_New_File (Current, Binary);\n          end if;\n \n          if FD /= Invalid_FD then"}, {"sha": "fcf0d5f7c5fd8ade2154adc5765c8c2f785d54f1", "filename": "gcc/ada/s-os_lib.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdfcc663025bcdca7562b2d16211a0588e484927/gcc%2Fada%2Fs-os_lib.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdfcc663025bcdca7562b2d16211a0588e484927/gcc%2Fada%2Fs-os_lib.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-os_lib.ads?ref=fdfcc663025bcdca7562b2d16211a0588e484927", "patch": "@@ -265,7 +265,7 @@ package System.OS_Lib is\n    --  It is the responsibility of the caller to deallocate the access value\n    --  returned in Name.\n    --\n-   --  The file is opened in the mode specified by the With_Mode parameter.\n+   --  The file is opened in text mode.\n    --\n    --  This procedure will always succeed if the current working directory is\n    --  writable. If the current working directory is not writable, then"}, {"sha": "8e3c77eb3af213612a51b0845323093cad4bb7cf", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdfcc663025bcdca7562b2d16211a0588e484927/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdfcc663025bcdca7562b2d16211a0588e484927/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=fdfcc663025bcdca7562b2d16211a0588e484927", "patch": "@@ -1701,18 +1701,18 @@ package body Sem_Ch12 is\n       Lo :=\n         Make_Attribute_Reference (Loc,\n           Attribute_Name => Name_First,\n-          Prefix => New_Reference_To (T, Loc));\n+          Prefix         => New_Reference_To (T, Loc));\n       Set_Etype (Lo, T);\n \n       Hi :=\n         Make_Attribute_Reference (Loc,\n           Attribute_Name => Name_Last,\n-          Prefix => New_Reference_To (T, Loc));\n+          Prefix         => New_Reference_To (T, Loc));\n       Set_Etype (Hi, T);\n \n       Set_Scalar_Range (T,\n         Make_Range (Loc,\n-          Low_Bound => Lo,\n+          Low_Bound  => Lo,\n           High_Bound => Hi));\n \n       Set_Ekind           (Base, E_Enumeration_Type);"}]}