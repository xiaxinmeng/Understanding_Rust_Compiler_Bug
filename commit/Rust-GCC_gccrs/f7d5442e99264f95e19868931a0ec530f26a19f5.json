{"sha": "f7d5442e99264f95e19868931a0ec530f26a19f5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjdkNTQ0MmU5OTI2NGY5NWUxOTg2ODkzMWEwZWM1MzBmMjZhMTlmNQ==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2008-04-08T06:52:41Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-04-08T06:52:41Z"}, "message": "lib-xref.adb (Is_On_LHS): Remove dead code\n\n2008-04-08  Ed Schonberg  <schonberg@adacore.com>\n\t    Robert Dewar  <dewar@adacore.com>\n\t    Gary Dismukes  <dismukes@adacore.com>\n\n\t* lib-xref.adb (Is_On_LHS): Remove dead code\n\t(Output_Overriden_Op): If the overridden operation is itself inherited,\n\tlist the ancestor operation, which is the one whose body or absstract\n\tspecification is actually being overridden.\n\n\t* sem_ch7.adb (Is_Primitive_Of): use base type to determine whether\n\toperation is primitive for the type.\n\t(Declare_Inherited_Private_Subprograms): If the new operation overrides\n\tan inherited private subprogram, set properly the Overridden_Operation\n\tattribute, for better cross-reference information.\n\t(Analyze_Package_Specification): Do late analysis of spec PPCs\n\t(Install_Private_Declaration, Uninstall_Declarations): Save/restore\n\tproperly the full view and underlying full views of a private type in a\n\tchild unit, whose full view is derived from a private type in a parent\n\tunit, and whose own full view becomes visible in the child body.\n\n\t* sem_disp.adb (Check_Dispatching_Operation): When a body declares a\n\tprimitive operation after the type has been frozen, add an explicit\n\treference to the type and the operation, because other primitive\n\treferences have been emitted already.\n\t(Expand_Call, Propagate_Tag): Call Kill_Current_Values when processing a\n\tdispatching call on VM targets.\n\nFrom-SVN: r134038", "tree": {"sha": "2e371714f6a79bf42809b116db3da61fab74aff0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e371714f6a79bf42809b116db3da61fab74aff0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f7d5442e99264f95e19868931a0ec530f26a19f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7d5442e99264f95e19868931a0ec530f26a19f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7d5442e99264f95e19868931a0ec530f26a19f5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7d5442e99264f95e19868931a0ec530f26a19f5/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "99cf6c77d0eee00479041711a73b8514c4ffe924", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99cf6c77d0eee00479041711a73b8514c4ffe924", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99cf6c77d0eee00479041711a73b8514c4ffe924"}], "stats": {"total": 117, "additions": 106, "deletions": 11}, "files": [{"sha": "a7cc61a06e15c08d5e1c89269ec54d01156b5324", "filename": "gcc/ada/lib-xref.adb", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7d5442e99264f95e19868931a0ec530f26a19f5/gcc%2Fada%2Flib-xref.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7d5442e99264f95e19868931a0ec530f26a19f5/gcc%2Fada%2Flib-xref.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref.adb?ref=f7d5442e99264f95e19868931a0ec530f26a19f5", "patch": "@@ -309,10 +309,6 @@ package body Lib.Xref is\n                return False;\n             end if;\n          end loop;\n-\n-         --  Parent (N) is assignment statement, check whether N is its name\n-\n-         return Name (Parent (N)) = N;\n       end Is_On_LHS;\n \n       ---------------------------\n@@ -1579,14 +1575,34 @@ package body Lib.Xref is\n                --------------------------\n \n                procedure Output_Overridden_Op (Old_E : Entity_Id) is\n+                  Op : Entity_Id;\n+\n                begin\n-                  if Present (Old_E)\n-                    and then Sloc (Old_E) /= Standard_Location\n+                  --  The overridden operation has an implicit declaration\n+                  --  at the point of derivation. What we want to display\n+                  --  is the original operation, which has the actual body\n+                  --  (or abstract declaration) that is being overridden.\n+                  --  The overridden operation is not always set, e.g. when\n+                  --  it is a predefined operator.\n+\n+                  if No (Old_E) then\n+                     return;\n+\n+                  elsif Present (Alias (Old_E)) then\n+                     Op := Alias (Old_E);\n+\n+                  else\n+                     Op := Old_E;\n+                  end if;\n+\n+                  if Present (Op)\n+                    and then Sloc (Op) /= Standard_Location\n                   then\n                      declare\n-                        Loc      : constant Source_Ptr := Sloc (Old_E);\n+                        Loc      : constant Source_Ptr := Sloc (Op);\n                         Par_Unit : constant Unit_Number_Type :=\n                                      Get_Source_Unit (Loc);\n+\n                      begin\n                         Write_Info_Char ('<');\n "}, {"sha": "ebeec6991837f18010df08842e5fbf88ec6a7479", "filename": "gcc/ada/sem_ch7.adb", "status": "modified", "additions": 69, "deletions": 4, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7d5442e99264f95e19868931a0ec530f26a19f5/gcc%2Fada%2Fsem_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7d5442e99264f95e19868931a0ec530f26a19f5/gcc%2Fada%2Fsem_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch7.adb?ref=f7d5442e99264f95e19868931a0ec530f26a19f5", "patch": "@@ -51,6 +51,7 @@ with Sem_Ch8;  use Sem_Ch8;\n with Sem_Ch10; use Sem_Ch10;\n with Sem_Ch12; use Sem_Ch12;\n with Sem_Disp; use Sem_Disp;\n+with Sem_Prag; use Sem_Prag;\n with Sem_Util; use Sem_Util;\n with Sem_Warn; use Sem_Warn;\n with Snames;   use Snames;\n@@ -757,6 +758,12 @@ package body Sem_Ch7 is\n       --  private_with_clauses, and remove them at the end of the nested\n       --  package.\n \n+      procedure Analyze_PPCs (Decls : List_Id);\n+      --  Given a list of declarations, go through looking for subprogram\n+      --  specs, and for each one found, analyze any pre/postconditions that\n+      --  are chained to the spec. This is the implementation of the late\n+      --  visibility analysis for preconditions and postconditions in specs.\n+\n       procedure Clear_Constants (Id : Entity_Id; FE : Entity_Id);\n       --  Clears constant indications (Never_Set_In_Source, Constant_Value,\n       --  and Is_True_Constant) on all variables that are entities of Id,\n@@ -785,6 +792,33 @@ package body Sem_Ch7 is\n       --  private part rather than being done in Sem_Ch12.Install_Parent\n       --  (which is where the parents' visible declarations are installed).\n \n+      ------------------\n+      -- Analyze_PPCs --\n+      ------------------\n+\n+      procedure Analyze_PPCs (Decls : List_Id) is\n+         Decl : Node_Id;\n+         Spec : Node_Id;\n+         Sent : Entity_Id;\n+         Prag : Node_Id;\n+\n+      begin\n+         Decl := First (Decls);\n+         while Present (Decl) loop\n+            if Nkind (Original_Node (Decl)) = N_Subprogram_Declaration then\n+               Spec := Specification (Original_Node (Decl));\n+               Sent := Defining_Unit_Name (Spec);\n+               Prag := Spec_PPC_List (Sent);\n+               while Present (Prag) loop\n+                  Analyze_PPC_In_Decl_Part (Prag, Sent);\n+                  Prag := Next_Pragma (Prag);\n+               end loop;\n+            end if;\n+\n+            Next (Decl);\n+         end loop;\n+      end Analyze_PPCs;\n+\n       ---------------------\n       -- Clear_Constants --\n       ---------------------\n@@ -937,9 +971,9 @@ package body Sem_Ch7 is\n \n       begin\n          Inst_Par := Inst_Id;\n+\n          Gen_Par :=\n            Generic_Parent (Specification (Unit_Declaration_Node (Inst_Par)));\n-\n          while Present (Gen_Par) and then Is_Child_Unit (Gen_Par) loop\n             Inst_Node := Get_Package_Instantiation_Node (Inst_Par);\n \n@@ -1017,6 +1051,7 @@ package body Sem_Ch7 is\n    begin\n       if Present (Vis_Decls) then\n          Analyze_Declarations (Vis_Decls);\n+         Analyze_PPCs (Vis_Decls);\n       end if;\n \n       --  Verify that incomplete types have received full declarations\n@@ -1152,6 +1187,7 @@ package body Sem_Ch7 is\n          end if;\n \n          Analyze_Declarations (Priv_Decls);\n+         Analyze_PPCs (Priv_Decls);\n \n          --  Check the private declarations for incomplete deferred constants\n \n@@ -1345,13 +1381,17 @@ package body Sem_Ch7 is\n          Formal : Entity_Id;\n \n       begin\n-         if Etype (S) = T then\n+         --  If the full view is a scalar type, the type is the anonymous\n+         --  base type, but the operation mentions the first subtype, so\n+         --  check the signature againt the base type.\n+\n+         if Base_Type (Etype (S)) = Base_Type (T) then\n             return True;\n \n          else\n             Formal := First_Formal (S);\n             while Present (Formal) loop\n-               if Etype (Formal) = T then\n+               if Base_Type (Etype (Formal)) = Base_Type (T) then\n                   return True;\n                end if;\n \n@@ -1427,6 +1467,7 @@ package body Sem_Ch7 is\n                            Replace_Elmt (Op_Elmt, New_Op);\n                            Remove_Elmt  (Op_List, Op_Elmt_2);\n                            Set_Is_Overriding_Operation (New_Op);\n+                           Set_Overridden_Operation (New_Op, Parent_Subp);\n \n                            --  We don't need to inherit its dispatching slot.\n                            --  Set_All_DT_Position has previously ensured that\n@@ -1664,11 +1705,18 @@ package body Sem_Ch7 is\n                --  when the parent type is defined in the parent unit. At this\n                --  point the current type is not private either, and we have to\n                --  install the underlying full view, which is now visible.\n+               --  Save the current full view as well, so that all views can\n+               --  be restored on exit. It may seem that after compiling the\n+               --  child body there are not environments to restore, but the\n+               --  back-end expects those links to be valid, and freeze nodes\n+               --  depend on them.\n \n                if No (Full_View (Full))\n                  and then Present (Underlying_Full_View (Full))\n                then\n                   Set_Full_View (Id, Underlying_Full_View (Full));\n+                  Set_Underlying_Full_View (Id, Full);\n+\n                   Set_Underlying_Full_View (Full, Empty);\n                   Set_Is_Frozen (Full_View (Id));\n                end if;\n@@ -2153,7 +2201,8 @@ package body Sem_Ch7 is\n       end if;\n \n       --  Make private entities invisible and exchange full and private\n-      --  declarations for private types.\n+      --  declarations for private types. Id is now the first private\n+      --  entity in the package.\n \n       while Present (Id) loop\n          if Debug_Flag_E then\n@@ -2240,6 +2289,22 @@ package body Sem_Ch7 is\n \n             Exchange_Declarations (Id);\n \n+            --  If we have installed an underlying full view for a type\n+            --  derived from a private type in a child unit, restore the\n+            --  proper views of private and full view. See corresponding\n+            --  code in Install_Private_Declarations.\n+            --  After the exchange, Full denotes the private type in the\n+            --  visible part of the package.\n+\n+            if Is_Private_Base_Type (Full)\n+              and then Present (Full_View (Full))\n+              and then Present (Underlying_Full_View (Full))\n+              and then In_Package_Body (Current_Scope)\n+            then\n+               Set_Full_View (Full, Underlying_Full_View (Full));\n+               Set_Underlying_Full_View (Full, Empty);\n+            end if;\n+\n          elsif Ekind (Id) = E_Incomplete_Type\n            and then No (Full_View (Id))\n          then"}, {"sha": "c990800ac5642c90b155bccc4159f2b532aa6a71", "filename": "gcc/ada/sem_disp.adb", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7d5442e99264f95e19868931a0ec530f26a19f5/gcc%2Fada%2Fsem_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7d5442e99264f95e19868931a0ec530f26a19f5/gcc%2Fada%2Fsem_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_disp.adb?ref=f7d5442e99264f95e19868931a0ec530f26a19f5", "patch": "@@ -31,6 +31,7 @@ with Exp_Disp; use Exp_Disp;\n with Exp_Ch7;  use Exp_Ch7;\n with Exp_Tss;  use Exp_Tss;\n with Errout;   use Errout;\n+with Lib.Xref; use Lib.Xref;\n with Namet;    use Namet;\n with Nlists;   use Nlists;\n with Nmake;    use Nmake;\n@@ -790,6 +791,9 @@ package body Sem_Disp is\n                      --  if the subprogram is already frozen, we must update\n                      --  its dispatching information explicitly here. The\n                      --  information is taken from the overridden subprogram.\n+                     --  We must also generate a cross-reference entry because\n+                     --  references to other primitives were already created\n+                     --  when type was frozen.\n \n                      Body_Is_Last_Primitive := True;\n \n@@ -819,6 +823,8 @@ package body Sem_Disp is\n                                 Prim    => Subp,\n                                 Ins_Nod => Subp_Body);\n                            end if;\n+\n+                           Generate_Reference (Tagged_Type, Subp, 'p', False);\n                         end if;\n                      end if;\n                   end if;\n@@ -1543,6 +1549,14 @@ package body Sem_Disp is\n \n       if VM_Target = No_VM then\n          Expand_Dispatching_Call (Call_Node);\n+\n+      --  Expansion of a dispatching call results in an indirect call, which in\n+      --  turn causes current values to be killed (see Resolve_Call), so on VM\n+      --  targets we do the call here to ensure consistent warnings between VM\n+      --  and non-VM targets.\n+\n+      else\n+         Kill_Current_Values;\n       end if;\n    end Propagate_Tag;\n "}]}