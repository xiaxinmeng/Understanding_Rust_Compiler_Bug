{"sha": "c31fc2f424c31a4915c81500e8da72dc751d0db5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzMxZmMyZjQyNGMzMWE0OTE1YzgxNTAwZThkYTcyZGM3NTFkMGRiNQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2014-12-13T00:52:20Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2014-12-13T00:52:20Z"}, "message": "runtime: Clear stack pointers for extra G's.\n\nFix an unusual C to Go callback case.  Newly created C threads\ncall into Go code, forcing the Go code to allocate new M and G\nstructures.  While executing Go code, the stack is split.  The\nGo code then returns.  Returning from a Go callback is treated\nas entering a system call, so the G gcstack field is set to\npoint to the Go stack.  In this case, though, we were called\nfrom a newly created C thread, so we drop the extra M and G\nstructures.  The C thread then exits.\n\nThen a new C thread calls into Go code, reusing the previously\ncreated M and G.  The Go code requires a larger stack frame,\ncausing the old stack segment to be unmapped and a new stack\nsegment allocated.  At this point the gcstack field is\npointing to the old stack segment.\n\nThen a garbage collection occurs.  The garbage collector sees\nthat the gcstack field is not nil, so it scans it as the first\nstack segment.  Unfortunately it points to memory that was\nunmapped.  So the program crashes.\n\nThe fix is simple: when handling extra G structures created\nfor callbacks from new C threads, clear the gcstack field.\n\nFrom-SVN: r218699", "tree": {"sha": "f27977d0c1474482f97c4598f9e95541c5b85073", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f27977d0c1474482f97c4598f9e95541c5b85073"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c31fc2f424c31a4915c81500e8da72dc751d0db5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c31fc2f424c31a4915c81500e8da72dc751d0db5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c31fc2f424c31a4915c81500e8da72dc751d0db5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c31fc2f424c31a4915c81500e8da72dc751d0db5/comments", "author": null, "committer": null, "parents": [{"sha": "93889749df8701ec3b77649898f38e2368555376", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93889749df8701ec3b77649898f38e2368555376", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93889749df8701ec3b77649898f38e2368555376"}], "stats": {"total": 3, "additions": 3, "deletions": 0}, "files": [{"sha": "03d1c1a271c0c341823b7e0bd794dd73b68ca6d9", "filename": "libgo/runtime/proc.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c31fc2f424c31a4915c81500e8da72dc751d0db5/libgo%2Fruntime%2Fproc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c31fc2f424c31a4915c81500e8da72dc751d0db5/libgo%2Fruntime%2Fproc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fproc.c?ref=c31fc2f424c31a4915c81500e8da72dc751d0db5", "patch": "@@ -1150,6 +1150,7 @@ runtime_needm(void)\n \t__splitstack_getcontext(&g->stack_context[0]);\n #else\n \tg->gcinitial_sp = &mp;\n+\tg->gcstack = nil;\n \tg->gcstack_size = 0;\n \tg->gcnext_sp = &mp;\n #endif\n@@ -1251,6 +1252,8 @@ runtime_dropm(void)\n \truntime_setmg(nil, nil);\n \n \tmp->curg->status = Gdead;\n+\tmp->curg->gcstack = nil;\n+\tmp->curg->gcnext_sp = nil;\n \n \tmnext = lockextra(true);\n \tmp->schedlink = mnext;"}]}