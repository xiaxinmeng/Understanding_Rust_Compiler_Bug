{"sha": "a4fe6139ab2e39d8b264befaf38f748e5c88d76a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTRmZTYxMzlhYjJlMzlkOGIyNjRiZWZhZjM4Zjc0OGU1Yzg4ZDc2YQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2017-10-25T19:11:41Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2017-10-25T19:11:41Z"}, "message": "i386.c (ix86_builtin_vectorization_cost): Compute scatter/gather cost correctly.\n\n\n\t* i386.c (ix86_builtin_vectorization_cost): Compute scatter/gather\n\tcost correctly.\n\t* i386.h (processor_costs): Add gather_static, gather_per_elt,\n\tscatter_static, scatter_per_elt.\n\t* x86-tune-costs.h: Add new cost entries.\n\nFrom-SVN: r254083", "tree": {"sha": "1fdc34bd4b0df06c9b3eb2b74007a1d33a27f5b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1fdc34bd4b0df06c9b3eb2b74007a1d33a27f5b2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a4fe6139ab2e39d8b264befaf38f748e5c88d76a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4fe6139ab2e39d8b264befaf38f748e5c88d76a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4fe6139ab2e39d8b264befaf38f748e5c88d76a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4fe6139ab2e39d8b264befaf38f748e5c88d76a/comments", "author": null, "committer": null, "parents": [{"sha": "d185db140ad68f80d134f2f7f254e4ace7f89f24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d185db140ad68f80d134f2f7f254e4ace7f89f24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d185db140ad68f80d134f2f7f254e4ace7f89f24"}], "stats": {"total": 86, "additions": 84, "deletions": 2}, "files": [{"sha": "5985d9ed8c9bd692c82589af349a6e1c3528c393", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4fe6139ab2e39d8b264befaf38f748e5c88d76a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4fe6139ab2e39d8b264befaf38f748e5c88d76a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a4fe6139ab2e39d8b264befaf38f748e5c88d76a", "patch": "@@ -1,3 +1,11 @@\n+2017-10-23  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* i386.c (ix86_builtin_vectorization_cost): Compute scatter/gather\n+\tcost correctly.\n+\t* i386.h (processor_costs): Add gather_static, gather_per_elt,\n+\tscatter_static, scatter_per_elt.\n+\t* x86-tune-costs.h: Add new cost entries.\n+\n 2017-10-25  Richard Biener  <rguenther@suse.de>\n \n \t* tree-ssa-sccvn.h (vn_eliminate): Declare."}, {"sha": "56486e049c7146c910bd9472c03ef5066b428973", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4fe6139ab2e39d8b264befaf38f748e5c88d76a/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4fe6139ab2e39d8b264befaf38f748e5c88d76a/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=a4fe6139ab2e39d8b264befaf38f748e5c88d76a", "patch": "@@ -44490,21 +44490,35 @@ ix86_builtin_vectorization_cost (enum vect_cost_for_stmt type_of_cost,\n       /* We should have separate costs for unaligned loads and gather/scatter.\n \t Do that incrementally.  */\n       case unaligned_load:\n-      case vector_gather_load:\n \tindex = sse_store_index (mode);\n         return ix86_vec_cost (mode,\n \t\t\t      COSTS_N_INSNS\n \t\t\t\t (ix86_cost->sse_unaligned_load[index]) / 2,\n \t\t\t      true);\n \n       case unaligned_store:\n-      case vector_scatter_store:\n \tindex = sse_store_index (mode);\n         return ix86_vec_cost (mode,\n \t\t\t      COSTS_N_INSNS\n \t\t\t\t (ix86_cost->sse_unaligned_store[index]) / 2,\n \t\t\t      true);\n \n+      case vector_gather_load:\n+        return ix86_vec_cost (mode,\n+\t\t\t      COSTS_N_INSNS\n+\t\t\t\t (ix86_cost->gather_static\n+\t\t\t\t  + ix86_cost->gather_per_elt\n+\t\t\t\t    * TYPE_VECTOR_SUBPARTS (vectype)) / 2,\n+\t\t\t      true);\n+\n+      case vector_scatter_store:\n+        return ix86_vec_cost (mode,\n+\t\t\t      COSTS_N_INSNS\n+\t\t\t\t (ix86_cost->scatter_static\n+\t\t\t\t  + ix86_cost->scatter_per_elt\n+\t\t\t\t    * TYPE_VECTOR_SUBPARTS (vectype)) / 2,\n+\t\t\t      true);\n+\n       case cond_branch_taken:\n         return ix86_cost->cond_taken_branch_cost;\n "}, {"sha": "837906b51694da75e682110a6342d21f1620482e", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4fe6139ab2e39d8b264befaf38f748e5c88d76a/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4fe6139ab2e39d8b264befaf38f748e5c88d76a/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=a4fe6139ab2e39d8b264befaf38f748e5c88d76a", "patch": "@@ -253,6 +253,10 @@ struct processor_costs {\n   const int mmxsse_to_integer;\t/* cost of moving mmxsse register to\n \t\t\t\t   integer.  */\n   const int ssemmx_to_integer;  /* cost of moving integer to mmxsse register. */\n+  const int gather_static, gather_per_elt; /* Cost of gather load is computed\n+\t\t\t\t   as static + per_item * nelts. */\n+  const int scatter_static, scatter_per_elt; /* Cost of gather store is\n+\t\t\t\t   computed as static + per_item * nelts.  */\n   const int l1_cache_size;\t/* size of l1 cache, in kilobytes.  */\n   const int l2_cache_size;\t/* size of l2 cache, in kilobytes.  */\n   const int prefetch_block;\t/* bytes moved to cache for prefetch.  */"}, {"sha": "c7ac70e8453e0336370652f2683a37418e95d52e", "filename": "gcc/config/i386/x86-tune-costs.h", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4fe6139ab2e39d8b264befaf38f748e5c88d76a/gcc%2Fconfig%2Fi386%2Fx86-tune-costs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4fe6139ab2e39d8b264befaf38f748e5c88d76a/gcc%2Fconfig%2Fi386%2Fx86-tune-costs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx86-tune-costs.h?ref=a4fe6139ab2e39d8b264befaf38f748e5c88d76a", "patch": "@@ -82,6 +82,8 @@ struct processor_costs ix86_size_cost = {/* costs for tuning for size */\n   {3, 3, 3, 3, 3},\t\t\t\t/* cost of unaligned SSE store\n \t\t\t\t\t   in 128bit, 256bit and 512bit */\n   3, 3,\t\t\t\t\t/* SSE->integer and integer->SSE moves */\n+  5, 0,\t\t\t\t\t/* Gather load static, per_elt.  */\n+  5, 0,\t\t\t\t\t/* Gather store static, per_elt.  */\n   0,\t\t\t\t\t/* size of l1 cache  */\n   0,\t\t\t\t\t/* size of l2 cache  */\n   0,\t\t\t\t\t/* size of prefetch block */\n@@ -166,6 +168,8 @@ struct processor_costs i386_cost = {\t/* 386 specific costs */\n \t\t\t\t\t   in 32,64,128,256 and 512-bit */\n   {4, 8, 16, 32, 64},\t\t\t/* cost of unaligned stores.  */\n   3, 3,\t\t\t\t\t/* SSE->integer and integer->SSE moves */\n+  4, 4,\t\t\t\t\t/* Gather load static, per_elt.  */\n+  4, 4,\t\t\t\t\t/* Gather store static, per_elt.  */\n   0,\t\t\t\t\t/* size of l1 cache  */\n   0,\t\t\t\t\t/* size of l2 cache  */\n   0,\t\t\t\t\t/* size of prefetch block */\n@@ -249,6 +253,8 @@ struct processor_costs i486_cost = {\t/* 486 specific costs */\n \t\t\t\t\t   in 32,64,128,256 and 512-bit */\n   {4, 8, 16, 32, 64},\t\t\t/* cost of unaligned stores.  */\n   3, 3,\t\t\t\t\t/* SSE->integer and integer->SSE moves */\n+  4, 4,\t\t\t\t\t/* Gather load static, per_elt.  */\n+  4, 4,\t\t\t\t\t/* Gather store static, per_elt.  */\n   4,\t\t\t\t\t/* size of l1 cache.  486 has 8kB cache\n \t\t\t\t\t   shared for code and data, so 4kB is\n \t\t\t\t\t   not really precise.  */\n@@ -334,6 +340,8 @@ struct processor_costs pentium_cost = {\n \t\t\t\t\t   in 32,64,128,256 and 512-bit */\n   {4, 8, 16, 32, 64},\t\t\t/* cost of unaligned stores.  */\n   3, 3,\t\t\t\t\t/* SSE->integer and integer->SSE moves */\n+  4, 4,\t\t\t\t\t/* Gather load static, per_elt.  */\n+  4, 4,\t\t\t\t\t/* Gather store static, per_elt.  */\n   8,\t\t\t\t\t/* size of l1 cache.  */\n   8,\t\t\t\t\t/* size of l2 cache  */\n   0,\t\t\t\t\t/* size of prefetch block */\n@@ -410,6 +418,8 @@ struct processor_costs lakemont_cost = {\n \t\t\t\t\t   in 32,64,128,256 and 512-bit */\n   {4, 8, 16, 32, 64},\t\t\t/* cost of unaligned stores.  */\n   3, 3,\t\t\t\t\t/* SSE->integer and integer->SSE moves */\n+  4, 4,\t\t\t\t\t/* Gather load static, per_elt.  */\n+  4, 4,\t\t\t\t\t/* Gather store static, per_elt.  */\n   8,\t\t\t\t\t/* size of l1 cache.  */\n   8,\t\t\t\t\t/* size of l2 cache  */\n   0,\t\t\t\t\t/* size of prefetch block */\n@@ -501,6 +511,8 @@ struct processor_costs pentiumpro_cost = {\n \t\t\t\t\t   in 32,64,128,256 and 512-bit */\n   {4, 8, 16, 32, 64},\t\t\t/* cost of unaligned stores.  */\n   3, 3,\t\t\t\t\t/* SSE->integer and integer->SSE moves */\n+  4, 4,\t\t\t\t\t/* Gather load static, per_elt.  */\n+  4, 4,\t\t\t\t\t/* Gather store static, per_elt.  */\n   8,\t\t\t\t\t/* size of l1 cache.  */\n   256,\t\t\t\t\t/* size of l2 cache  */\n   32,\t\t\t\t\t/* size of prefetch block */\n@@ -584,6 +596,8 @@ struct processor_costs geode_cost = {\n \t\t\t\t\t   in 32,64,128,256 and 512-bit */\n   {2, 2, 8, 16, 32},\t\t\t/* cost of unaligned stores.  */\n   6, 6,\t\t\t\t\t/* SSE->integer and integer->SSE moves */\n+  2, 2,\t\t\t\t\t/* Gather load static, per_elt.  */\n+  2, 2,\t\t\t\t\t/* Gather store static, per_elt.  */\n   64,\t\t\t\t\t/* size of l1 cache.  */\n   128,\t\t\t\t\t/* size of l2 cache.  */\n   32,\t\t\t\t\t/* size of prefetch block */\n@@ -666,6 +680,8 @@ struct processor_costs k6_cost = {\n \t\t\t\t\t   in 32,64,128,256 and 512-bit */\n   {2, 2, 8, 16, 32},\t\t\t/* cost of unaligned stores.  */\n   6, 6,\t\t\t\t\t/* SSE->integer and integer->SSE moves */\n+  2, 2,\t\t\t\t\t/* Gather load static, per_elt.  */\n+  2, 2,\t\t\t\t\t/* Gather store static, per_elt.  */\n   32,\t\t\t\t\t/* size of l1 cache.  */\n   32,\t\t\t\t\t/* size of l2 cache.  Some models\n \t\t\t\t\t   have integrated l2 cache, but\n@@ -754,6 +770,8 @@ struct processor_costs athlon_cost = {\n \t\t\t\t\t   in 32,64,128,256 and 512-bit */\n   {4, 4, 5, 10, 20},\t\t\t/* cost of unaligned stores.  */\n   5, 5,\t\t\t\t\t/* SSE->integer and integer->SSE moves */\n+  4, 4,\t\t\t\t\t/* Gather load static, per_elt.  */\n+  4, 4,\t\t\t\t\t/* Gather store static, per_elt.  */\n   64,\t\t\t\t\t/* size of l1 cache.  */\n   256,\t\t\t\t\t/* size of l2 cache.  */\n   64,\t\t\t\t\t/* size of prefetch block */\n@@ -844,6 +862,8 @@ struct processor_costs k8_cost = {\n \t\t\t\t\t   in 32,64,128,256 and 512-bit */\n   {4, 4, 5, 10, 20},\t\t\t/* cost of unaligned stores.  */\n   5, 5,\t\t\t\t\t/* SSE->integer and integer->SSE moves */\n+  4, 4,\t\t\t\t\t/* Gather load static, per_elt.  */\n+  4, 4,\t\t\t\t\t/* Gather store static, per_elt.  */\n   64,\t\t\t\t\t/* size of l1 cache.  */\n   512,\t\t\t\t\t/* size of l2 cache.  */\n   64,\t\t\t\t\t/* size of prefetch block */\n@@ -946,6 +966,8 @@ struct processor_costs amdfam10_cost = {\n \t\t\t\t\t\t\t       1/1  1/1\n \t\t\t\t\t    MOVD reg32, xmmreg Double FADD 3\n \t\t\t\t\t\t\t       1/1  1/1 */\n+  4, 4,\t\t\t\t\t/* Gather load static, per_elt.  */\n+  4, 4,\t\t\t\t\t/* Gather store static, per_elt.  */\n   64,\t\t\t\t\t/* size of l1 cache.  */\n   512,\t\t\t\t\t/* size of l2 cache.  */\n   64,\t\t\t\t\t/* size of prefetch block */\n@@ -1041,6 +1063,8 @@ const struct processor_costs bdver1_cost = {\n \t\t\t\t\t   in 32,64,128,256 and 512-bit */\n   {10, 10, 10, 20, 30},\t\t\t/* cost of unaligned stores.  */\n   16, 20,\t\t\t\t/* SSE->integer and integer->SSE moves */\n+  12, 12,\t\t\t\t/* Gather load static, per_elt.  */\n+  10, 10,\t\t\t\t/* Gather store static, per_elt.  */\n   16,\t\t\t\t\t/* size of l1 cache.  */\n   2048,\t\t\t\t\t/* size of l2 cache.  */\n   64,\t\t\t\t\t/* size of prefetch block */\n@@ -1138,6 +1162,8 @@ const struct processor_costs bdver2_cost = {\n \t\t\t\t\t   in 32,64,128,256 and 512-bit */\n   {10, 10, 10, 20, 30},\t\t\t/* cost of unaligned stores.  */\n   16, 20,\t\t\t\t/* SSE->integer and integer->SSE moves */\n+  12, 12,\t\t\t\t/* Gather load static, per_elt.  */\n+  10, 10,\t\t\t\t/* Gather store static, per_elt.  */\n   16,\t\t\t\t\t/* size of l1 cache.  */\n   2048,\t\t\t\t\t/* size of l2 cache.  */\n   64,\t\t\t\t\t/* size of prefetch block */\n@@ -1234,6 +1260,8 @@ struct processor_costs bdver3_cost = {\n \t\t\t\t\t   in 32,64,128,256 and 512-bit */\n   {10, 10, 10, 20, 30},\t\t\t/* cost of unaligned stores.  */\n   16, 20,\t\t\t\t/* SSE->integer and integer->SSE moves */\n+  12, 12,\t\t\t\t/* Gather load static, per_elt.  */\n+  10, 10,\t\t\t\t/* Gather store static, per_elt.  */\n   16,\t\t\t\t\t/* size of l1 cache.  */\n   2048,\t\t\t\t\t/* size of l2 cache.  */\n   64,\t\t\t\t\t/* size of prefetch block */\n@@ -1329,6 +1357,8 @@ struct processor_costs bdver4_cost = {\n \t\t\t\t\t   in 32,64,128,256 and 512-bit */\n   {10, 10, 10, 20, 30},\t\t\t/* cost of unaligned stores.  */\n   16, 20,\t\t\t\t/* SSE->integer and integer->SSE moves */\n+  12, 12,\t\t\t\t/* Gather load static, per_elt.  */\n+  10, 10,\t\t\t\t/* Gather store static, per_elt.  */\n   16,\t\t\t\t\t/* size of l1 cache.  */\n   2048,\t\t\t\t\t/* size of l2 cache.  */\n   64,\t\t\t\t\t/* size of prefetch block */\n@@ -1435,6 +1465,11 @@ struct processor_costs znver1_cost = {\n \t\t\t\t\t   in 32,64,128,256 and 512-bit.  */\n   {8, 8, 8, 8, 16},\t\t\t/* cost of unaligned stores.  */\n   6, 6,\t\t\t\t\t/* SSE->integer and integer->SSE moves.  */\n+  /* VGATHERDPD is 23 uops and throughput is 9, VGATHERDPD is 35 uops,\n+     throughput 12.  Approx 9 uops do not depend on vector size and every load\n+     is 7 uops.  */\n+  18, 8,\t\t\t\t/* Gather load static, per_elt.  */\n+  18, 10,\t\t\t\t/* Gather store static, per_elt.  */\n   32,\t\t\t\t\t/* size of l1 cache.  */\n   512,\t\t\t\t\t/* size of l2 cache.  */\n   64,\t\t\t\t\t/* size of prefetch block.  */\n@@ -1539,6 +1574,8 @@ const struct processor_costs btver1_cost = {\n \t\t\t\t\t   in 32,64,128,256 and 512-bit */\n   {10, 10, 12, 24, 48},\t\t\t/* cost of unaligned stores.  */\n   14, 14,\t\t\t\t/* SSE->integer and integer->SSE moves */\n+  10, 10,\t\t\t\t/* Gather load static, per_elt.  */\n+  10, 10,\t\t\t\t/* Gather store static, per_elt.  */\n   32,\t\t\t\t\t/* size of l1 cache.  */\n   512,\t\t\t\t\t/* size of l2 cache.  */\n   64,\t\t\t\t\t/* size of prefetch block */\n@@ -1624,6 +1661,8 @@ const struct processor_costs btver2_cost = {\n \t\t\t\t\t   in 32,64,128,256 and 512-bit */\n   {10, 10, 12, 24, 48},\t\t\t/* cost of unaligned stores.  */\n   14, 14,\t\t\t\t/* SSE->integer and integer->SSE moves */\n+  10, 10,\t\t\t\t/* Gather load static, per_elt.  */\n+  10, 10,\t\t\t\t/* Gather store static, per_elt.  */\n   32,\t\t\t\t\t/* size of l1 cache.  */\n   2048,\t\t\t\t\t/* size of l2 cache.  */\n   64,\t\t\t\t\t/* size of prefetch block */\n@@ -1708,6 +1747,8 @@ struct processor_costs pentium4_cost = {\n \t\t\t\t\t   in 32,64,128,256 and 512-bit */\n   {32, 32, 32, 64, 128},\t\t/* cost of unaligned stores.  */\n   20, 12,\t\t\t\t/* SSE->integer and integer->SSE moves */\n+  16, 16,\t\t\t\t/* Gather load static, per_elt.  */\n+  16, 16,\t\t\t\t/* Gather store static, per_elt.  */\n   8,\t\t\t\t\t/* size of l1 cache.  */\n   256,\t\t\t\t\t/* size of l2 cache.  */\n   64,\t\t\t\t\t/* size of prefetch block */\n@@ -1795,6 +1836,8 @@ struct processor_costs nocona_cost = {\n \t\t\t\t\t   in 32,64,128,256 and 512-bit */\n   {24, 24, 24, 48, 96},\t\t\t/* cost of unaligned stores.  */\n   20, 12,\t\t\t\t/* SSE->integer and integer->SSE moves */\n+  12, 12,\t\t\t\t/* Gather load static, per_elt.  */\n+  12, 12,\t\t\t\t/* Gather store static, per_elt.  */\n   8,\t\t\t\t\t/* size of l1 cache.  */\n   1024,\t\t\t\t\t/* size of l2 cache.  */\n   64,\t\t\t\t\t/* size of prefetch block */\n@@ -1880,6 +1923,8 @@ struct processor_costs atom_cost = {\n \t\t\t\t\t   in 32,64,128,256 and 512-bit */\n   {16, 16, 16, 32, 64},\t\t\t/* cost of unaligned stores.  */\n   8, 6,\t\t\t\t\t/* SSE->integer and integer->SSE moves */\n+  8, 8,\t\t\t\t\t/* Gather load static, per_elt.  */\n+  8, 8,\t\t\t\t\t/* Gather store static, per_elt.  */\n   32,\t\t\t\t\t/* size of l1 cache.  */\n   256,\t\t\t\t\t/* size of l2 cache.  */\n   64,\t\t\t\t\t/* size of prefetch block */\n@@ -1965,6 +2010,8 @@ struct processor_costs slm_cost = {\n \t\t\t\t\t   in 32,64,128,256 and 512-bit */\n   {16, 16, 16, 32, 64},\t\t\t/* cost of unaligned stores.  */\n   8, 6,\t\t\t\t\t/* SSE->integer and integer->SSE moves */\n+  8, 8,\t\t\t\t\t/* Gather load static, per_elt.  */\n+  8, 8,\t\t\t\t\t/* Gather store static, per_elt.  */\n   32,\t\t\t\t\t/* size of l1 cache.  */\n   256,\t\t\t\t\t/* size of l2 cache.  */\n   64,\t\t\t\t\t/* size of prefetch block */\n@@ -2050,6 +2097,8 @@ struct processor_costs intel_cost = {\n \t\t\t\t\t   in 32,64,128,256 and 512-bit */\n   {10, 10, 10, 10, 10},\t\t\t/* cost of unaligned loads.  */\n   4, 4,\t\t\t\t\t/* SSE->integer and integer->SSE moves */\n+  6, 6,\t\t\t\t\t/* Gather load static, per_elt.  */\n+  6, 6,\t\t\t\t\t/* Gather store static, per_elt.  */\n   32,\t\t\t\t\t/* size of l1 cache.  */\n   256,\t\t\t\t\t/* size of l2 cache.  */\n   64,\t\t\t\t\t/* size of prefetch block */\n@@ -2142,6 +2191,8 @@ struct processor_costs generic_cost = {\n \t\t\t\t\t   in 32,64,128,256 and 512-bit */\n   {10, 10, 10, 15, 20},\t\t\t/* cost of unaligned storess.  */\n   20, 20,\t\t\t\t/* SSE->integer and integer->SSE moves */\n+  6, 6,\t\t\t\t\t/* Gather load static, per_elt.  */\n+  6, 6,\t\t\t\t\t/* Gather store static, per_elt.  */\n   32,\t\t\t\t\t/* size of l1 cache.  */\n   512,\t\t\t\t\t/* size of l2 cache.  */\n   64,\t\t\t\t\t/* size of prefetch block */\n@@ -2239,6 +2290,11 @@ struct processor_costs core_cost = {\n \t\t\t\t\t   in 32,64,128,256 and 512-bit */\n   {6, 6, 6, 6, 12},\t\t\t/* cost of unaligned stores.  */\n   2, 2,\t\t\t\t\t/* SSE->integer and integer->SSE moves */\n+  /* VGATHERDPD is 7 uops, rec throughput 5, while VGATHERDPD is 9 uops,\n+     rec. throughput 6.\n+     So 5 uops statically and one uops per load.  */\n+  10, 6,\t\t\t\t/* Gather load static, per_elt.  */\n+  10, 6,\t\t\t\t/* Gather store static, per_elt.  */\n   64,\t\t\t\t\t/* size of l1 cache.  */\n   512,\t\t\t\t\t/* size of l2 cache.  */\n   64,\t\t\t\t\t/* size of prefetch block */"}]}