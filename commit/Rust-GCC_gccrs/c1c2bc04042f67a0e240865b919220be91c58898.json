{"sha": "c1c2bc04042f67a0e240865b919220be91c58898", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzFjMmJjMDQwNDJmNjdhMGUyNDA4NjViOTE5MjIwYmU5MWM1ODg5OA==", "commit": {"author": {"name": "Richard Earnshaw", "email": "erich@gnu.org", "date": "1996-02-12T16:40:07Z"}, "committer": {"name": "Richard Earnshaw", "email": "erich@gnu.org", "date": "1996-02-12T16:40:07Z"}, "message": "arm.c (output_move_double): Cope with both word-endian alternatives.\n\n\t* arm/arm.c (output_move_double): Cope with both word-endian\n\talternatives.  Remove extraneous parameters from calls to\n\toutput_mov_immediate.\n\t(arm_print_operand): New print code 'Q' for the least significant\n\tregister of a DImode operand.  Make code 'R' always print the\n\tmost significant register, rather than the highest numbered.\n\nFrom-SVN: r11210", "tree": {"sha": "1b2621e6fc7b8bed12f256637f57f6491d345179", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1b2621e6fc7b8bed12f256637f57f6491d345179"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c1c2bc04042f67a0e240865b919220be91c58898", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1c2bc04042f67a0e240865b919220be91c58898", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1c2bc04042f67a0e240865b919220be91c58898", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1c2bc04042f67a0e240865b919220be91c58898/comments", "author": null, "committer": null, "parents": [{"sha": "31bda2849aaaf16edfed2505c46465d45d2a1a5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31bda2849aaaf16edfed2505c46465d45d2a1a5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31bda2849aaaf16edfed2505c46465d45d2a1a5b"}], "stats": {"total": 52, "additions": 31, "deletions": 21}, "files": [{"sha": "48165948c703f1d4120af053db2032c4d6dc0d67", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 31, "deletions": 21, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1c2bc04042f67a0e240865b919220be91c58898/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1c2bc04042f67a0e240865b919220be91c58898/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=c1c2bc04042f67a0e240865b919220be91c58898", "patch": "@@ -2884,19 +2884,11 @@ output_move_double (operands)\n \t  if (reg1 == 12)\n \t    abort();\n \n-\t  otherops[1] = gen_rtx (REG, SImode, 1 + reg1);\n-\n \t  /* Ensure the second source is not overwritten */\n-\t  if (reg0 == 1 + reg1)\n-\t    {\n-\t      output_asm_insn(\"mov%?\\t%0, %1\", otherops);\n-\t      output_asm_insn(\"mov%?\\t%0, %1\", operands);\n-\t    }\n+\t  if (reg1 == reg0 + (WORDS_BIG_ENDIAN ? -1 : 1))\n+\t    output_asm_insn(\"mov%?\\t%Q0, %Q1\\n\\tmov%?\\t%R0, %R1\", operands);\n \t  else\n-\t    {\n-\t      output_asm_insn(\"mov%?\\t%0, %1\", operands);\n-\t      output_asm_insn(\"mov%?\\t%0, %1\", otherops);\n-\t    }\n+\t    output_asm_insn(\"mov%?\\t%R0, %R1\\n\\tmov%?\\t%Q0, %Q1\", operands);\n \t}\n       else if (code1 == CONST_DOUBLE)\n \t{\n@@ -2911,25 +2903,36 @@ output_move_double (operands)\n \t      otherops[1] = GEN_INT(l[1]);\n \t      operands[1] = GEN_INT(l[0]);\n \t    }\n+\t  else if (GET_MODE (operands[1]) != VOIDmode)\n+\t    abort ();\n+\t  else if (WORDS_BIG_ENDIAN)\n+\t    {\n+\t      \n+\t      otherops[1] = GEN_INT (CONST_DOUBLE_LOW (operands[1]));\n+\t      operands[1] = GEN_INT (CONST_DOUBLE_HIGH (operands[1]));\n+\t    }\n \t  else\n \t    {\n+\t      \n \t      otherops[1] = GEN_INT (CONST_DOUBLE_HIGH (operands[1]));\n \t      operands[1] = GEN_INT (CONST_DOUBLE_LOW (operands[1]));\n \t    }\n-\t  output_mov_immediate (operands, FALSE, \"\");\n-\t  output_mov_immediate (otherops, FALSE, \"\");\n+\t  output_mov_immediate (operands);\n+\t  output_mov_immediate (otherops);\n \t}\n       else if (code1 == CONST_INT)\n \t{\n-\t  otherops[1] = const0_rtx;\n \t  /* sign extend the intval into the high-order word */\n-\t  /* Note: output_mov_immediate may clobber operands[1], so we\n-\t     put this out first */\n-\t  if (INTVAL (operands[1]) < 0)\n-\t    output_asm_insn (\"mvn%?\\t%0, %1\", otherops);\n+\t  if (WORDS_BIG_ENDIAN)\n+\t    {\n+\t      otherops[1] = operands[1];\n+\t      operands[1] = (INTVAL (operands[1]) < 0\n+\t\t\t     ? constm1_rtx : const0_rtx);\n+\t    }\n \t  else\n-\t    output_asm_insn (\"mov%?\\t%0, %1\", otherops);\n-\t  output_mov_immediate (operands, FALSE, \"\");\n+\t    otherops[1] = INTVAL (operands[1]) < 0 ? constm1_rtx : const0_rtx;\n+\t  output_mov_immediate (otherops);\n+\t  output_mov_immediate (operands);\n \t}\n       else if (code1 == MEM)\n \t{\n@@ -4018,11 +4021,18 @@ arm_print_operand (stream, x, code)\n       }\n       return;\n \n+    case 'Q':\n+      if (REGNO (x) > 15)\n+\tabort ();\n+      fputs (REGISTER_PREFIX, stream);\n+      fputs (reg_names[REGNO (x) + (WORDS_BIG_ENDIAN ? 1 : 0)], stream);\n+      return;\n+\n     case 'R':\n       if (REGNO (x) > 15)\n \tabort ();\n       fputs (REGISTER_PREFIX, stream);\n-      fputs (reg_names[REGNO (x) + 1], stream);\n+      fputs (reg_names[REGNO (x) + (WORDS_BIG_ENDIAN ? 0 : 1)], stream);\n       return;\n \n     case 'm':"}]}