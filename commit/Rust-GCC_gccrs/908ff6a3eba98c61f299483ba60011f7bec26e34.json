{"sha": "908ff6a3eba98c61f299483ba60011f7bec26e34", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTA4ZmY2YTNlYmE5OGM2MWYyOTk0ODNiYTYwMDExZjdiZWMyNmUzNA==", "commit": {"author": {"name": "Kenneth Zadeck", "email": "zadeck@naturalbridge.com", "date": "2008-05-16T13:38:13Z"}, "committer": {"name": "Diego Novillo", "email": "dnovillo@gcc.gnu.org", "date": "2008-05-16T13:38:13Z"}, "message": "tree-ssa-dse (max_stmt_uid): Removed.\n\n2008-05-16  Kenneth Zadeck <zadeck@naturalbridge.com>\n\n\t* tree-ssa-dse (max_stmt_uid): Removed.\n\t(get_stmt_uid, dse_possible_dead_store_p, dse_optimize_stmt, \n\ttree_ssa_dse): Encapsulate all uses of stmt_ann->uid.\n\t* tree-ssa-sccvn.c (compare_ops, init_scc_vn): Ditto.\n\t* function.h (cfun.last_stmt_uid): New field.\n\t* tree-flow-inline.h (set_gimple_stmt_uid, gimple_stmt_uid,\n\tgimple_stmt_max_uid, set_gimple_stmt_max_uid, \n\tinc_gimple_stmt_max_uid): New functions.\n\t* tree-dfa.c (renumber_gimple_stmt_uids): New function.\n\t(create_stmt_ann): Initialize the ann->uid field.\n\t* tree-ssa-pre.c (compute_avail): Encapsulate the stmt_ann->uid\n\twith new calls.\n\t* tree-flow.h (renumber_gimple_stmt_uids): New function.\n\nFrom-SVN: r135419", "tree": {"sha": "c4014ffdd31e6929c2b0896e695bc7a7780f9040", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c4014ffdd31e6929c2b0896e695bc7a7780f9040"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/908ff6a3eba98c61f299483ba60011f7bec26e34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/908ff6a3eba98c61f299483ba60011f7bec26e34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/908ff6a3eba98c61f299483ba60011f7bec26e34", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/908ff6a3eba98c61f299483ba60011f7bec26e34/comments", "author": {"login": "zadeck", "id": 42682403, "node_id": "MDQ6VXNlcjQyNjgyNDAz", "avatar_url": "https://avatars.githubusercontent.com/u/42682403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zadeck", "html_url": "https://github.com/zadeck", "followers_url": "https://api.github.com/users/zadeck/followers", "following_url": "https://api.github.com/users/zadeck/following{/other_user}", "gists_url": "https://api.github.com/users/zadeck/gists{/gist_id}", "starred_url": "https://api.github.com/users/zadeck/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zadeck/subscriptions", "organizations_url": "https://api.github.com/users/zadeck/orgs", "repos_url": "https://api.github.com/users/zadeck/repos", "events_url": "https://api.github.com/users/zadeck/events{/privacy}", "received_events_url": "https://api.github.com/users/zadeck/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9defb1fe37d0ff78a3a8f4729e4f51a957ec902e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9defb1fe37d0ff78a3a8f4729e4f51a957ec902e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9defb1fe37d0ff78a3a8f4729e4f51a957ec902e"}], "stats": {"total": 176, "additions": 128, "deletions": 48}, "files": [{"sha": "9208cc6888feff96dc3239b56a812a1f190ab119", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/908ff6a3eba98c61f299483ba60011f7bec26e34/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/908ff6a3eba98c61f299483ba60011f7bec26e34/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=908ff6a3eba98c61f299483ba60011f7bec26e34", "patch": "@@ -1,3 +1,19 @@\n+2008-05-16  Kenneth Zadeck <zadeck@naturalbridge.com>\n+\n+\t* tree-ssa-dse (max_stmt_uid): Removed.\n+\t(get_stmt_uid, dse_possible_dead_store_p, dse_optimize_stmt, \n+\ttree_ssa_dse): Encapsulate all uses of stmt_ann->uid.\n+\t* tree-ssa-sccvn.c (compare_ops, init_scc_vn): Ditto.\n+\t* function.h (cfun.last_stmt_uid): New field.\n+\t* tree-flow-inline.h (set_gimple_stmt_uid, gimple_stmt_uid,\n+\tgimple_stmt_max_uid, set_gimple_stmt_max_uid, \n+\tinc_gimple_stmt_max_uid): New functions.\n+\t* tree-dfa.c (renumber_gimple_stmt_uids): New function.\n+\t(create_stmt_ann): Initialize the ann->uid field.\n+\t* tree-ssa-pre.c (compute_avail): Encapsulate the stmt_ann->uid\n+\twith new calls.\n+\t* tree-flow.h (renumber_gimple_stmt_uids): New function.\n+\n 2008-05-16  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* tree-flow.h (init_empty_tree_cfg_for_function): Declare.\n@@ -26,7 +42,7 @@\n \t* config/bfin/bfin.c (bfin_discover_loops): Delete empty loops.\n \n \tFrom Jie Zhang  <jie.zhang@analog.com>\n-        * config/bfin/t-bfin-elf (MULTILIB_OPTIONS, MULTILIB_DIRNAMES,\n+\t* config/bfin/t-bfin-elf (MULTILIB_OPTIONS, MULTILIB_DIRNAMES,\n \tMULTILIB_MATCHES, MULTILIB_EXCEPTIONS): Remove mcpu=bf532-0.3,\n \tmcpu=bf561-none and mcpu=bf561-0.2.\n \t* config/bfin/t-bfin-uclinux (MULTILIB_OPTIONS, MULTILIB_DIRNAMES,"}, {"sha": "424cdf7054c754f41187ecb80e71f5d88249d622", "filename": "gcc/function.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/908ff6a3eba98c61f299483ba60011f7bec26e34/gcc%2Ffunction.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/908ff6a3eba98c61f299483ba60011f7bec26e34/gcc%2Ffunction.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.h?ref=908ff6a3eba98c61f299483ba60011f7bec26e34", "patch": "@@ -465,6 +465,9 @@ struct function GTY(())\n   /* Used types hash table.  */\n   htab_t GTY ((param_is (union tree_node))) used_types_hash;\n \n+  /* Last statement uid.  */\n+  int last_stmt_uid;\n+\n   /* Line number of the end of the function.  */\n   location_t function_end_locus;\n "}, {"sha": "0a8f88de2975304b2345594d612ef0830f2f3253", "filename": "gcc/tree-dfa.c", "status": "modified", "additions": 56, "deletions": 8, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/908ff6a3eba98c61f299483ba60011f7bec26e34/gcc%2Ftree-dfa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/908ff6a3eba98c61f299483ba60011f7bec26e34/gcc%2Ftree-dfa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dfa.c?ref=908ff6a3eba98c61f299483ba60011f7bec26e34", "patch": "@@ -85,13 +85,30 @@ find_referenced_vars (void)\n {\n   basic_block bb;\n   block_stmt_iterator si;\n+  tree phi;\n \n   FOR_EACH_BB (bb)\n-    for (si = bsi_start (bb); !bsi_end_p (si); bsi_next (&si))\n-      {\n-\ttree *stmt_p = bsi_stmt_ptr (si);\n-\twalk_tree (stmt_p, find_vars_r, NULL, NULL);\n-      }\n+    {\n+      for (si = bsi_start (bb); !bsi_end_p (si); bsi_next (&si))\n+\t{\n+\t  tree *stmt_p = bsi_stmt_ptr (si);\n+\t  walk_tree (stmt_p, find_vars_r, NULL, NULL);\n+\t}\n+\n+      for (phi = phi_nodes (bb); phi; phi = PHI_CHAIN (phi))\n+\t{\n+\t  int len = PHI_NUM_ARGS (phi);\n+\t  int i;\n+\n+\t  walk_tree (&phi, find_vars_r, NULL, NULL);\n+\n+\t  for (i = 0; i < len; i++)\n+\t    {\n+\t      tree arg = PHI_ARG_DEF (phi, i);\n+\t      walk_tree (&arg, find_vars_r, NULL, NULL);\n+\t    }\n+\t}\n+    }\n \n   return 0;\n }\n@@ -110,8 +127,8 @@ struct gimple_opt_pass pass_referenced_vars =\n   PROP_gimple_leh | PROP_cfg,\t\t/* properties_required */\n   PROP_referenced_vars,\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n-  0,\t\t\t\t\t/* todo_flags_start */\n-  0                                     /* todo_flags_finish */\n+  TODO_dump_func,\t\t\t/* todo_flags_start */\n+  TODO_dump_func                        /* todo_flags_finish */\n  }\n };\n \n@@ -194,11 +211,37 @@ create_stmt_ann (tree t)\n   /* Since we just created the annotation, mark the statement modified.  */\n   ann->modified = true;\n \n+  ann->uid = inc_gimple_stmt_max_uid (cfun);\n   t->base.ann = (tree_ann_t) ann;\n \n   return ann;\n }\n \n+/* Renumber all of the gimple stmt uids.  */\n+\n+void \n+renumber_gimple_stmt_uids (void)\n+{\n+  basic_block bb;\n+\n+  set_gimple_stmt_max_uid (cfun, 0);\n+  FOR_ALL_BB (bb)\n+    {\n+      block_stmt_iterator bsi;\n+      for (bsi = bsi_start (bb); !bsi_end_p (bsi); bsi_next (&bsi))\n+\t{\n+\t  tree stmt = bsi_stmt (bsi);\n+\t  /* If the stmt has an annotation, then overwrite it, if not,\n+\t     the process of getting it will set the number\n+\t     properly.  */\n+\t  if (has_stmt_ann (stmt))\n+\t    set_gimple_stmt_uid (stmt, inc_gimple_stmt_max_uid (cfun));\n+\t  else\n+\t    get_stmt_ann (stmt);\n+\t}\n+    }\n+}\n+\n /* Create a new annotation for a tree T.  */\n \n tree_ann_common_t\n@@ -572,9 +615,14 @@ collect_dfa_stats_r (tree *tp, int *walk_subtrees ATTRIBUTE_UNUSED,\n static tree\n find_vars_r (tree *tp, int *walk_subtrees, void *data ATTRIBUTE_UNUSED)\n {\n+  /* If we are reading the lto info back in, we need to rescan the\n+     referenced vars.  */\n+  if (TREE_CODE (*tp) == SSA_NAME)\n+    add_referenced_var (SSA_NAME_VAR (*tp));\n+\n   /* If T is a regular variable that the optimizers are interested\n      in, add it to the list of variables.  */\n-  if (SSA_VAR_P (*tp))\n+  else if (SSA_VAR_P (*tp))\n     add_referenced_var (*tp);\n \n   /* Type, _DECL and constant nodes have no interesting children."}, {"sha": "a41ee9ac2eb0c6b884c4ee19b76c03865429a3fc", "filename": "gcc/tree-flow-inline.h", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/908ff6a3eba98c61f299483ba60011f7bec26e34/gcc%2Ftree-flow-inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/908ff6a3eba98c61f299483ba60011f7bec26e34/gcc%2Ftree-flow-inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow-inline.h?ref=908ff6a3eba98c61f299483ba60011f7bec26e34", "patch": "@@ -278,6 +278,41 @@ get_stmt_ann (tree stmt)\n   return (ann) ? ann : create_stmt_ann (stmt);\n }\n \n+/* Set the uid of all non phi function statements.  */\n+static inline void\n+set_gimple_stmt_uid (tree stmt, unsigned int uid)\n+{\n+  get_stmt_ann (stmt)->uid = uid;\n+}\n+\n+/* Get the uid of all non phi function statements.  */\n+static inline unsigned int\n+gimple_stmt_uid (tree stmt)\n+{\n+  return get_stmt_ann (stmt)->uid;\n+}\n+\n+/* Get the number of the next statement uid to be allocated.  */\n+static inline unsigned int\n+gimple_stmt_max_uid (struct function *fn)\n+{\n+  return fn->last_stmt_uid;\n+}\n+\n+/* Set the number of the next statement uid to be allocated.  */\n+static inline void\n+set_gimple_stmt_max_uid (struct function *fn, unsigned int maxid)\n+{\n+  fn->last_stmt_uid = maxid;\n+}\n+\n+/* Set the number of the next statement uid to be allocated.  */\n+static inline unsigned int\n+inc_gimple_stmt_max_uid (struct function *fn)\n+{\n+  return fn->last_stmt_uid++;\n+}\n+\n /* Return the annotation type for annotation ANN.  */\n static inline enum tree_ann_type\n ann_type (tree_ann_t ann)"}, {"sha": "bd1f87ab396a232752d03f69d507bee56360885b", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/908ff6a3eba98c61f299483ba60011f7bec26e34/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/908ff6a3eba98c61f299483ba60011f7bec26e34/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=908ff6a3eba98c61f299483ba60011f7bec26e34", "patch": "@@ -485,9 +485,11 @@ struct stmt_ann_d GTY(())\n   /* Set of variables that have had their address taken in the statement.  */\n   bitmap addresses_taken;\n \n-  /* Unique identifier for this statement.  These ID's are to be created\n-     by each pass on an as-needed basis in any order convenient for the\n-     pass which needs statement UIDs.  */\n+  /* Unique identifier for this statement.  These ID's are to be\n+     created by each pass on an as-needed basis in any order\n+     convenient for the pass which needs statement UIDs.  This field\n+     should only be accessed thru set_gimple_stmt_uid and\n+     gimple_stmt_uid functions.  */\n   unsigned int uid;\n \n   /* Nonzero if the statement references memory (at least one of its\n@@ -779,6 +781,7 @@ extern tree gimplify_build2 (block_stmt_iterator *, enum tree_code,\n extern tree gimplify_build3 (block_stmt_iterator *, enum tree_code,\n \t\t\t     tree, tree, tree, tree);\n extern void init_empty_tree_cfg (void);\n+extern void init_empty_tree_cfg_for_function (struct function *);\n extern void fold_cond_expr_cond (void);\n extern void make_abnormal_goto_edges (basic_block, bool);\n extern void replace_uses_by (tree, tree);\n@@ -801,6 +804,7 @@ extern const char *op_symbol_code (enum tree_code);\n extern var_ann_t create_var_ann (tree);\n extern function_ann_t create_function_ann (tree);\n extern stmt_ann_t create_stmt_ann (tree);\n+extern void renumber_gimple_stmt_uids (void);\n extern tree_ann_common_t create_tree_common_ann (tree);\n extern void dump_dfa_stats (FILE *);\n extern void debug_dfa_stats (void);\n@@ -893,13 +897,13 @@ DEF_VEC_ALLOC_O(edge_var_map, heap);\n /* A vector of var maps.  */\n typedef VEC(edge_var_map, heap) *edge_var_map_vector;\n \n+extern void init_tree_ssa (struct function *);\n extern void redirect_edge_var_map_add (edge, tree, tree);\n extern void redirect_edge_var_map_clear (edge);\n extern void redirect_edge_var_map_dup (edge, edge);\n extern edge_var_map_vector redirect_edge_var_map_vector (edge);\n extern void redirect_edge_var_map_destroy (void);\n \n-extern void init_tree_ssa (struct function *);\n extern edge ssa_redirect_edge (edge, basic_block);\n extern void flush_pending_stmts (edge);\n extern bool tree_ssa_useless_type_conversion (tree);"}, {"sha": "f6f76d5b7c5d41b58881b98df2add4cfa99e622d", "filename": "gcc/tree-ssa-dse.c", "status": "modified", "additions": 6, "deletions": 21, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/908ff6a3eba98c61f299483ba60011f7bec26e34/gcc%2Ftree-ssa-dse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/908ff6a3eba98c61f299483ba60011f7bec26e34/gcc%2Ftree-ssa-dse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dse.c?ref=908ff6a3eba98c61f299483ba60011f7bec26e34", "patch": "@@ -101,19 +101,15 @@ static void dse_record_phis (struct dom_walk_data *, basic_block);\n static void dse_finalize_block (struct dom_walk_data *, basic_block);\n static void record_voperand_set (bitmap, bitmap *, unsigned int);\n \n-static unsigned max_stmt_uid;\t/* Maximal uid of a statement.  Uids to phi\n-\t\t\t\t   nodes are assigned using the versions of\n-\t\t\t\t   ssa names they define.  */\n-\n /* Returns uid of statement STMT.  */\n \n static unsigned\n get_stmt_uid (tree stmt)\n {\n   if (TREE_CODE (stmt) == PHI_NODE)\n-    return SSA_NAME_VERSION (PHI_RESULT (stmt)) + max_stmt_uid;\n+    return SSA_NAME_VERSION (PHI_RESULT (stmt)) + gimple_stmt_max_uid (cfun);\n \n-  return stmt_ann (stmt)->uid;\n+  return gimple_stmt_uid (stmt);\n }\n \n /* Set bit UID in bitmaps GLOBAL and *LOCAL, creating *LOCAL as needed.  */\n@@ -288,7 +284,6 @@ dse_possible_dead_store_p (tree stmt,\n   vuse_vec_p vv;\n   tree defvar = NULL_TREE, temp;\n   tree prev_defvar = NULL_TREE;\n-  stmt_ann_t ann = stmt_ann (stmt);\n \n   /* We want to verify that each virtual definition in STMT has\n      precisely one use and that all the virtual definitions are\n@@ -364,7 +359,7 @@ dse_possible_dead_store_p (tree stmt,\n \n   if (fail)\n     {\n-      record_voperand_set (dse_gd->stores, &bd->stores, ann->uid);\n+      record_voperand_set (dse_gd->stores, &bd->stores, gimple_stmt_uid (stmt));\n       return false;\n     }\n \n@@ -435,7 +430,7 @@ dse_optimize_stmt (struct dom_walk_data *walk_data,\n              memory location.  */\n           if (!get_kill_of_stmt_lhs (stmt, &first_use_p, &use_p, &use_stmt))\n             {\n-              record_voperand_set (dse_gd->stores, &bd->stores, ann->uid);\n+              record_voperand_set (dse_gd->stores, &bd->stores, gimple_stmt_uid (stmt));\n               return;\n             }\n         }\n@@ -505,7 +500,7 @@ dse_optimize_stmt (struct dom_walk_data *walk_data,\n \t  release_defs (stmt);\n \t}\n \n-      record_voperand_set (dse_gd->stores, &bd->stores, ann->uid);\n+      record_voperand_set (dse_gd->stores, &bd->stores, gimple_stmt_uid (stmt));\n     }\n }\n \n@@ -556,18 +551,8 @@ tree_ssa_dse (void)\n {\n   struct dom_walk_data walk_data;\n   struct dse_global_data dse_gd;\n-  basic_block bb;\n \n-  /* Create a UID for each statement in the function.  Ordering of the\n-     UIDs is not important for this pass.  */\n-  max_stmt_uid = 0;\n-  FOR_EACH_BB (bb)\n-    {\n-      block_stmt_iterator bsi;\n-\n-      for (bsi = bsi_start (bb); !bsi_end_p (bsi); bsi_next (&bsi))\n-\tstmt_ann (bsi_stmt (bsi))->uid = max_stmt_uid++;\n-    }\n+  renumber_gimple_stmt_uids ();\n \n   /* We might consider making this a property of each pass so that it\n      can be [re]computed on an as-needed basis.  Particularly since"}, {"sha": "e52b02ab026bd307d4febd938316fd4aae9f7047", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/908ff6a3eba98c61f299483ba60011f7bec26e34/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/908ff6a3eba98c61f299483ba60011f7bec26e34/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=908ff6a3eba98c61f299483ba60011f7bec26e34", "patch": "@@ -3171,7 +3171,6 @@ insert_fake_stores (void)\n \t      new_tree = build_gimple_modify_stmt (NULL_TREE, lhs);\n \t      new_lhs = make_ssa_name (storetemp, new_tree);\n \t      GIMPLE_STMT_OPERAND (new_tree, 0) = new_lhs;\n-\n \t      create_ssa_artificial_load_stmt (new_tree, stmt, false);\n \n \t      NECESSARY (new_tree) = 0;\n@@ -3494,7 +3493,7 @@ compute_avail (void)\n \t  stmt = bsi_stmt (bsi);\n \t  ann = stmt_ann (stmt);\n \n-\t  ann->uid = stmt_uid++;\n+\t  set_gimple_stmt_uid (stmt, stmt_uid++);\n \n \t  /* For regular value numbering, we are only interested in\n \t     assignments of the form X_i = EXPR, where EXPR represents"}, {"sha": "0b20a4ebc72a23e45f333bdbd329a78ca10ecda3", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/908ff6a3eba98c61f299483ba60011f7bec26e34/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/908ff6a3eba98c61f299483ba60011f7bec26e34/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=908ff6a3eba98c61f299483ba60011f7bec26e34", "patch": "@@ -1890,7 +1890,7 @@ compare_ops (const void *pa, const void *pb)\n \treturn -1;\n       else if (TREE_CODE (opstmtb) == PHI_NODE)\n \treturn 1;\n-      return stmt_ann (opstmta)->uid - stmt_ann (opstmtb)->uid;\n+      return gimple_stmt_uid (opstmta) - gimple_stmt_uid (opstmtb);\n     }\n   return rpo_numbers[bba->index] - rpo_numbers[bbb->index];\n }\n@@ -2089,8 +2089,6 @@ init_scc_vn (void)\n   size_t i;\n   int j;\n   int *rpo_numbers_temp;\n-  basic_block bb;\n-  size_t id = 0;\n \n   calculate_dominance_info (CDI_DOMINATORS);\n   sccstack = NULL;\n@@ -2131,15 +2129,7 @@ init_scc_vn (void)\n \t}\n     }\n \n-  FOR_ALL_BB (bb)\n-    {\n-      block_stmt_iterator bsi;\n-      for (bsi = bsi_start (bb); !bsi_end_p (bsi); bsi_next (&bsi))\n-\t{\n-\t  tree stmt = bsi_stmt (bsi);\n-\t  stmt_ann (stmt)->uid = id++;\n-\t}\n-    }\n+  renumber_gimple_stmt_uids ();\n \n   /* Create the valid and optimistic value numbering tables.  */\n   valid_info = XCNEW (struct vn_tables_s);"}]}