{"sha": "d5a4ebdc8f085dec7700cfddda5be04c2d96d514", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDVhNGViZGM4ZjA4NWRlYzc3MDBjZmRkZGE1YmUwNGMyZDk2ZDUxNA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-05-26T22:03:39Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-05-26T22:03:39Z"}, "message": "(simplify_if_then_else): Don't make (mult (cond)) in simple case;\n\nleave as IF_THEN_ELSE instead.\n\nFrom-SVN: r7351", "tree": {"sha": "59c6fe45f1cd40bc72b5d6e9de2a4c1ac146d7f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/59c6fe45f1cd40bc72b5d6e9de2a4c1ac146d7f2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d5a4ebdc8f085dec7700cfddda5be04c2d96d514", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5a4ebdc8f085dec7700cfddda5be04c2d96d514", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5a4ebdc8f085dec7700cfddda5be04c2d96d514", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5a4ebdc8f085dec7700cfddda5be04c2d96d514/comments", "author": null, "committer": null, "parents": [{"sha": "8322308e9322093511a2cadb464f468fd9c1513a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8322308e9322093511a2cadb464f468fd9c1513a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8322308e9322093511a2cadb464f468fd9c1513a"}], "stats": {"total": 10, "additions": 1, "deletions": 9}, "files": [{"sha": "ce4f49350721a7c7f2ca0479671c4d3ded4c60bc", "filename": "gcc/combine.c", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5a4ebdc8f085dec7700cfddda5be04c2d96d514/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5a4ebdc8f085dec7700cfddda5be04c2d96d514/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=d5a4ebdc8f085dec7700cfddda5be04c2d96d514", "patch": "@@ -4032,10 +4032,7 @@ simplify_if_then_else (x)\n      C2 = C1 * STORE_FLAG_VALUE. Similarly if OP has an outer ZERO_EXTEND or\n      SIGN_EXTEND as long as Z is already extended (so we don't destroy it).\n      We can do this kind of thing in some cases when STORE_FLAG_VALUE is\n-     neither of the above, but it isn't worth checking for.\n-\n-     Similarly, (if_then_else COND Z 0) can be replaced by \n-     (mult COND (mult Z STORE_FLAG_VALUE)).  */\n+     neither of the above, but it isn't worth checking for.  */\n \n   if (comparison_p && mode != VOIDmode && ! side_effects_p (x))\n     {\n@@ -4047,11 +4044,6 @@ simplify_if_then_else (x)\n       enum machine_mode m = mode;\n       rtx z = 0, c1;\n \n-      if (f == const0_rtx)\n-\treturn gen_binary (MULT, mode, gen_binary (true_code, mode, cond_op0,\n-\t\t\t\t\t\t   cond_op1),\n-\t\t\t   gen_binary (MULT, mode, t, const_true_rtx));\n-\n       if ((GET_CODE (t) == PLUS || GET_CODE (t) == MINUS\n \t   || GET_CODE (t) == IOR || GET_CODE (t) == XOR\n \t   || GET_CODE (t) == ASHIFT"}]}