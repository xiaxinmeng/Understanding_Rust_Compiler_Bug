{"sha": "c0c7270cc4efd896fe99f8ad5409dbef089a407f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzBjNzI3MGNjNGVmZDg5NmZlOTlmOGFkNTQwOWRiZWYwODlhNDA3Zg==", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2020-11-25T19:36:55Z"}, "committer": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2020-11-26T09:02:38Z"}, "message": "Don't create location wrapper nodes within OpenACC clauses\n\nThis fixes a GCC 11, 10, 9 regression introduced by commit\ndfd7fdca2ac17d8b823a16700525824ca312ade0 (Subversion r267272) \"C++: more\nlocation wrapper nodes (PR c++/43064, PR c++/43486)\".  But: this isn't\nintending to blame David, because back then, the problem hasn't been visible in\nthe testsuite (or else I'm sure would've been addressed right away) because of\nour all dear friend: missing testsuite coverage.  Thus, for GCC 8, I'm likewise\nenhancing the testsuite, without the C++ front end code changes.\n\nI actually had presumed that there may be an issue for OpenACC:\n<http://mid.mail-archive.com/874lb9qr2u.fsf@euler.schwinge.homeip.net>, so here\nwe are, two years (and many \"wasted\" hours...) later...\n\n\tgcc/cp/\n\t* parser.c (cp_parser_omp_var_list_no_open): Assert that array\n\tsection's 'low_bound', 'length' are not location wrapper nodes.\n\t(cp_parser_oacc_all_clauses, cp_parser_oacc_cache): Instantiate\n\t'auto_suppress_location_wrappers'.\n\tgcc/testsuite/\n\t* c-c++-common/goacc/cache-3-1.c: New.\n\t* c-c++-common/goacc/cache-3-2.c: Likewise.\n\t* c-c++-common/goacc/data-clause-1.c: Likewise.\n\t* c-c++-common/goacc/data-clause-2.c: Likewise.\n\t* c-c++-common/gomp/map-1.c: Adjust.\n\t* c-c++-common/gomp/map-2.c: Likewise.\n\t* g++.dg/goacc/cache-3-1.C: New.\n\t* g++.dg/goacc/cache-3-2.C: Likewise.\n\t* g++.dg/goacc/data-clause-1.C: Likewise.\n\t* g++.dg/goacc/data-clause-2.C: Likewise.\n\t* g++.dg/gomp/map-1.C: Adjust.\n\t* g++.dg/gomp/map-2.C: Likewise.\n\nReported-by: Sandra Loosemore <sandra@codesourcery.com>", "tree": {"sha": "54dc9d712d00e4e5219fe74191a811de27973805", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/54dc9d712d00e4e5219fe74191a811de27973805"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c0c7270cc4efd896fe99f8ad5409dbef089a407f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0c7270cc4efd896fe99f8ad5409dbef089a407f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0c7270cc4efd896fe99f8ad5409dbef089a407f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0c7270cc4efd896fe99f8ad5409dbef089a407f/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "acdf30d66cac11757e95541aa35f5ce97de29f63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acdf30d66cac11757e95541aa35f5ce97de29f63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/acdf30d66cac11757e95541aa35f5ce97de29f63"}], "stats": {"total": 725, "additions": 718, "deletions": 7}, "files": [{"sha": "63a2c962d862e9420246e54066f06f6ad63abef1", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c7270cc4efd896fe99f8ad5409dbef089a407f/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c7270cc4efd896fe99f8ad5409dbef089a407f/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=c0c7270cc4efd896fe99f8ad5409dbef089a407f", "patch": "@@ -34837,7 +34837,11 @@ cp_parser_omp_var_list_no_open (cp_parser *parser, enum omp_clause_code kind,\n \t\t  parser->colon_corrects_to_scope_p = false;\n \t\t  cp_lexer_consume_token (parser->lexer);\n \t\t  if (!cp_lexer_next_token_is (parser->lexer, CPP_COLON))\n-\t\t    low_bound = cp_parser_expression (parser);\n+\t\t    {\n+\t\t      low_bound = cp_parser_expression (parser);\n+\t\t      /* Later handling is not prepared to see through these.  */\n+\t\t      gcc_checking_assert (!location_wrapper_p (low_bound));\n+\t\t    }\n \t\t  if (!colon)\n \t\t    parser->colon_corrects_to_scope_p\n \t\t      = saved_colon_corrects_to_scope_p;\n@@ -34857,7 +34861,11 @@ cp_parser_omp_var_list_no_open (cp_parser *parser, enum omp_clause_code kind,\n \t\t\tcp_parser_commit_to_tentative_parse (parser);\n \t\t      if (!cp_lexer_next_token_is (parser->lexer,\n \t\t\t\t\t\t   CPP_CLOSE_SQUARE))\n-\t\t\tlength = cp_parser_expression (parser);\n+\t\t\t{\n+\t\t\t  length = cp_parser_expression (parser);\n+\t\t\t  /* Later handling is not prepared to see through these.  */\n+\t\t\t  gcc_checking_assert (!location_wrapper_p (length));\n+\t\t\t}\n \t\t    }\n \t\t  /* Look for the closing `]'.  */\n \t\t  if (!cp_parser_require (parser, CPP_CLOSE_SQUARE,\n@@ -37521,6 +37529,9 @@ cp_parser_oacc_all_clauses (cp_parser *parser, omp_clause_mask mask,\n   tree clauses = NULL;\n   bool first = true;\n \n+  /* Don't create location wrapper nodes within OpenACC clauses.  */\n+  auto_suppress_location_wrappers sentinel;\n+\n   while (cp_lexer_next_token_is_not (parser->lexer, CPP_PRAGMA_EOL))\n     {\n       location_t here;\n@@ -41444,6 +41455,10 @@ cp_parser_omp_target (cp_parser *parser, cp_token *pragma_tok,\n static tree\n cp_parser_oacc_cache (cp_parser *parser, cp_token *pragma_tok)\n {\n+  /* Don't create location wrapper nodes within 'OMP_CLAUSE__CACHE_'\n+     clauses.  */\n+  auto_suppress_location_wrappers sentinel;\n+\n   tree stmt, clauses;\n \n   clauses = cp_parser_omp_var_list (parser, OMP_CLAUSE__CACHE_, NULL_TREE);"}, {"sha": "5318a57d51e16721ee40430ed90c327bdd274891", "filename": "gcc/testsuite/c-c++-common/goacc/cache-3-1.c", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c7270cc4efd896fe99f8ad5409dbef089a407f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fcache-3-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c7270cc4efd896fe99f8ad5409dbef089a407f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fcache-3-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fcache-3-1.c?ref=c0c7270cc4efd896fe99f8ad5409dbef089a407f", "patch": "@@ -0,0 +1,116 @@\n+/* Test 'cache' directive diagnostics.  */\n+\n+/* See also corresponding C++ variant: '../../g++.dg/goacc/cache-3-1.C'.  */\n+\n+/* See also corresponding C/C++ data clause variant: 'data-clause-1.c'.  */\n+\n+/* { dg-additional-options \"-fopenmp\" } for '#pragma omp threadprivate'.  */\n+\n+/* The current implementation doesn't restrict where a 'cache' directive may\n+   appear, so we don't make any special arrangements.  */\n+\n+extern int a[][10], a2[][10];\n+int b[10], c[10][2], d[10], e[10], f[10];\n+int b2[10], c2[10][2], d2[10], e2[10], f2[10];\n+int k[10], l[10], m[10], n[10], o;\n+int *p;\n+int **q;\n+int r[4][4][4][4][4];\n+extern struct s s1;\n+extern struct s s2[1]; /* { dg-error \"array type has incomplete element type\" \"\" { target c } } */\n+int t[10];\n+#pragma omp threadprivate (t)\n+#pragma acc routine\n+void bar (int *);\n+\n+void\n+foo (int g[3][10], int h[4][8], int i[2][10], int j[][9],\n+     int g2[3][10], int h2[4][8], int i2[2][10], int j2[][9])\n+{\n+  #pragma acc cache(bar[2:5]) /* { dg-error \"is not a variable\" } */\n+    ;\n+  #pragma acc cache(t[2:5]) /* { dg-error \"is threadprivate variable\" } */\n+    ;\n+  #pragma acc cache(k[0.5:]) /* { dg-error \"low bound \\[^\\n\\r]* of array section does not have integral type\" } */\n+    ;\n+  #pragma acc cache(l[:7.5f]) /* { dg-error \"length \\[^\\n\\r]* of array section does not have integral type\" } */\n+    ;\n+  #pragma acc cache(m[p:]) /* { dg-error \"low bound \\[^\\n\\r]* of array section does not have integral type\" } */\n+    ;\n+  #pragma acc cache(n[:p]) /* { dg-error \"length \\[^\\n\\r]* of array section does not have integral type\" } */\n+    ;\n+  #pragma acc cache(o[2:5]) /* { dg-error \"does not have pointer or array type\" } */\n+    ;\n+  #pragma acc cache(s1) /* { dg-error \"expected '\\\\\\['\" } */\n+    ;\n+  #pragma acc cache(s2) /* { dg-error \"expected '\\\\\\['\" } */\n+    ;\n+  #pragma acc cache(a[:][:]) /* { dg-error \"array type length expression must be specified\" } */\n+    bar (&a[0][0]); /* { dg-bogus \"referenced in target region does not have a mappable type\" } */\n+  #pragma acc cache(b[-1:]) /* { dg-error \"negative low bound in array section\" } */\n+    bar (b);\n+  #pragma acc cache(c[:-3][:]) /* { dg-error \"negative length in array section\" } */\n+    bar (&c[0][0]);\n+  #pragma acc cache(d[11:]) /* { dg-error \"low bound \\[^\\n\\r]* above array section size\" } */\n+    bar (d);\n+  #pragma acc cache(e[:11]) /* { dg-error \"length \\[^\\n\\r]* above array section size\" } */\n+    bar (e);\n+  #pragma acc cache(f[1:10]) /* { dg-error \"high bound \\[^\\n\\r]* above array section size\" } */\n+    bar (f);\n+  #pragma acc cache(g[:][0:10]) /* { dg-error \"for array function parameter length expression must be specified\" } */\n+    bar (&g[0][0]);\n+  #pragma acc cache(h[2:1][-1:]) /* { dg-error \"negative low bound in array section\" } */\n+    bar (&h[0][0]);\n+  #pragma acc cache(h[:1][:-3]) /* { dg-error \"negative length in array section\" } */\n+    bar (&h[0][0]);\n+  #pragma acc cache(i[:1][11:]) /* { dg-error \"low bound \\[^\\n\\r]* above array section size\" } */\n+    bar (&i[0][0]);\n+  #pragma acc cache(j[3:1][:10]) /* { dg-error \"length \\[^\\n\\r]* above array section size\" } */\n+    bar (&j[0][0]);\n+  #pragma acc cache(j[30:1][5:5]) /* { dg-error \"high bound \\[^\\n\\r]* above array section size\" } */\n+    bar (&j[0][0]);\n+  #pragma acc cache(a2[:1][2:4])\n+    bar (&a2[0][0]);\n+  #pragma acc cache(a2[3:5][:])\n+    bar (&a2[0][0]);\n+  #pragma acc cache(a2[3:5][:10])\n+    bar (&a2[0][0]);\n+  #pragma acc cache(b2[0:])\n+    bar (b2);\n+  #pragma acc cache(c2[:3][:])\n+    bar (&c2[0][0]);\n+  #pragma acc cache(d2[9:])\n+    bar (d2);\n+  #pragma acc cache(e2[:10])\n+    bar (e2);\n+  #pragma acc cache(f2[1:9])\n+    bar (f2);\n+  #pragma acc cache(g2[:1][2:4])\n+    bar (&g2[0][0]);\n+  #pragma acc cache(h2[2:2][0:])\n+    bar (&h2[0][0]);\n+  #pragma acc cache(h2[:1][:3])\n+    bar (&h2[0][0]);\n+  #pragma acc cache(i2[:1][9:])\n+    bar (&i2[0][0]);\n+  #pragma acc cache(j2[3:4][:9])\n+    bar (&j2[0][0]);\n+  #pragma acc cache(j2[30:1][5:4])\n+    bar (&j2[0][0]);\n+  #pragma acc cache(q[1:2])\n+    ;\n+  #pragma acc cache(q[3:5][:10]) /* { dg-error \"array section is not contiguous\" } */\n+    ;\n+  #pragma acc cache(r[3:][2:1][1:2])\n+    ;\n+  #pragma acc cache(r[3:][2:1][1:2][:][0:4])\n+    ;\n+  #pragma acc cache(r[3:][2:1][1:2][1:][0:4]) /* { dg-error \"array section is not contiguous\" } */\n+    ;\n+  #pragma acc cache(r[3:][2:1][1:2][:3][0:4]) /* { dg-error \"array section is not contiguous\" } */\n+    ;\n+  #pragma acc cache(r[3:][2:1][1:2][:][1:]) /* { dg-error \"array section is not contiguous\" } */\n+    ;\n+  #pragma acc cache(r[3:][2:1][1:2][:][:3]) /* { dg-error \"array section is not contiguous\" } */\n+    ;\n+}"}, {"sha": "ea5222e7d0cdf582efaa42a4d97928414a2d6551", "filename": "gcc/testsuite/c-c++-common/goacc/cache-3-2.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c7270cc4efd896fe99f8ad5409dbef089a407f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fcache-3-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c7270cc4efd896fe99f8ad5409dbef089a407f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fcache-3-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fcache-3-2.c?ref=c0c7270cc4efd896fe99f8ad5409dbef089a407f", "patch": "@@ -0,0 +1,50 @@\n+/* Test 'cache' directive diagnostics.  */\n+\n+/* See also corresponding C++ variant: '../../g++.dg/goacc/cache-3-2.C'.  */\n+\n+/* See also corresponding C/C++ data clause variant: 'data-clause-2.c'.  */\n+\n+/* The current implementation doesn't restrict where a 'cache' directive may\n+   appear, so we don't make any special arrangements.  */\n+\n+void\n+foo (int *p, int (*q)[10], int r[10], int s[10][10])\n+{\n+  int a[10], b[10][10];\n+  #pragma acc cache (p[-1:2])\n+  ;\n+  #pragma acc cache (q[-1:2][0:10])\n+  ;\n+  #pragma acc cache (q[-1:2][-2:10]) /* { dg-error \"negative low bound in array section in\" } */\n+  ;\n+  #pragma acc cache (r[-1:2])\n+  ;\n+  #pragma acc cache (s[-1:2][:])\n+  ;\n+  #pragma acc cache (s[-1:2][-2:10]) /* { dg-error \"negative low bound in array section in\" } */\n+  ;\n+  #pragma acc cache (a[-1:2])\t /* { dg-error \"negative low bound in array section in\" } */\n+  ;\n+  #pragma acc cache (b[-1:2][0:])\t /* { dg-error \"negative low bound in array section in\" } */\n+  ;\n+  #pragma acc cache (b[1:2][-2:10]) /* { dg-error \"negative low bound in array section in\" } */\n+  ;\n+  #pragma acc cache (p[2:-3])\t /* { dg-error \"negative length in array section in\" } */\n+  ;\n+  #pragma acc cache (q[2:-3][:])\t /* { dg-error \"negative length in array section in\" } */\n+  ;\n+  #pragma acc cache (q[2:3][0:-1])\t /* { dg-error \"negative length in array section in\" } */\n+  ;\n+  #pragma acc cache (r[2:-5])\t /* { dg-error \"negative length in array section in\" } */\n+  ;\n+  #pragma acc cache (s[2:-5][:])\t /* { dg-error \"negative length in array section in\" } */\n+  ;\n+  #pragma acc cache (s[2:5][0:-4])\t /* { dg-error \"negative length in array section in\" } */\n+  ;\n+  #pragma acc cache (a[2:-5])\t /* { dg-error \"negative length in array section in\" } */\n+  ;\n+  #pragma acc cache (b[2:-5][0:10]) /* { dg-error \"negative length in array section in\" } */\n+  ;\n+  #pragma acc cache (b[2:5][0:-4]) /* { dg-error \"negative length in array section in\" } */\n+  ;\n+}"}, {"sha": "9952ac4fb4feea806689d98b08fe58b4944401a6", "filename": "gcc/testsuite/c-c++-common/goacc/data-clause-1.c", "status": "added", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c7270cc4efd896fe99f8ad5409dbef089a407f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fdata-clause-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c7270cc4efd896fe99f8ad5409dbef089a407f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fdata-clause-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fdata-clause-1.c?ref=c0c7270cc4efd896fe99f8ad5409dbef089a407f", "patch": "@@ -0,0 +1,115 @@\n+/* Test data clause diagnostics.  */\n+\n+/* See also corresponding OpenACC C++ variant: '../../g++.dg/goacc/data-clause-1.C'.  */\n+\n+/* See also corresponding OpenACC 'cache' directive variant: 'cache-3-1.c'.  */\n+\n+/* See also corresponding OpenMP variant: '../gomp/map-1.c'.  */\n+\n+/* { dg-additional-options \"-fopenmp\" } for '#pragma omp threadprivate'.  */\n+\n+extern int a[][10], a2[][10];\n+int b[10], c[10][2], d[10], e[10], f[10];\n+int b2[10], c2[10][2], d2[10], e2[10], f2[10];\n+int k[10], l[10], m[10], n[10], o;\n+int *p;\n+int **q;\n+int r[4][4][4][4][4];\n+extern struct s s1;\n+extern struct s s2[1]; /* { dg-error \"array type has incomplete element type\" \"\" { target c } } */\n+int t[10];\n+#pragma omp threadprivate (t)\n+#pragma acc routine\n+void bar (int *);\n+\n+void\n+foo (int g[3][10], int h[4][8], int i[2][10], int j[][9],\n+     int g2[3][10], int h2[4][8], int i2[2][10], int j2[][9])\n+{\n+  #pragma acc parallel copyin(bar[2:5]) /* { dg-error \"is not a variable\" } */\n+    ;\n+  #pragma acc parallel copyout(t[2:5]) /* { dg-error \"is threadprivate variable\" } */\n+    ;\n+  #pragma acc parallel copy(k[0.5:]) /* { dg-error \"low bound \\[^\\n\\r]* of array section does not have integral type\" } */\n+    ;\n+  #pragma acc parallel copyout(l[:7.5f]) /* { dg-error \"length \\[^\\n\\r]* of array section does not have integral type\" } */\n+    ;\n+  #pragma acc parallel copyin(m[p:]) /* { dg-error \"low bound \\[^\\n\\r]* of array section does not have integral type\" } */\n+    ;\n+  #pragma acc parallel copy(n[:p]) /* { dg-error \"length \\[^\\n\\r]* of array section does not have integral type\" } */\n+    ;\n+  #pragma acc parallel copyin(o[2:5]) /* { dg-error \"does not have pointer or array type\" } */\n+    ;\n+  #pragma acc parallel create(s1) /* { dg-error \"'s1' does not have a mappable type in 'map' clause\" } */\n+    ;\n+  #pragma acc parallel create(s2) /* { dg-error \"'s2' does not have a mappable type in 'map' clause\" } */\n+    ;\n+  #pragma acc parallel copyin(a[:][:]) /* { dg-error \"array type length expression must be specified\" } */\n+    bar (&a[0][0]); /* { dg-error \"referenced in target region does not have a mappable type\" } */\n+  #pragma acc parallel copy(b[-1:]) /* { dg-error \"negative low bound in array section\" } */\n+    bar (b);\n+  #pragma acc parallel copy(c[:-3][:]) /* { dg-error \"negative length in array section\" } */\n+    bar (&c[0][0]);\n+  #pragma acc parallel copyout(d[11:]) /* { dg-error \"low bound \\[^\\n\\r]* above array section size\" } */\n+    bar (d);\n+  #pragma acc parallel copyin(e[:11]) /* { dg-error \"length \\[^\\n\\r]* above array section size\" } */\n+    bar (e);\n+  #pragma acc parallel copyin(f[1:10]) /* { dg-error \"high bound \\[^\\n\\r]* above array section size\" } */\n+    bar (f);\n+  #pragma acc parallel copyout(g[:][0:10]) /* { dg-error \"for array function parameter length expression must be specified\" } */\n+    bar (&g[0][0]);\n+  #pragma acc parallel copyout(h[2:1][-1:]) /* { dg-error \"negative low bound in array section\" } */\n+    bar (&h[0][0]);\n+  #pragma acc parallel copy(h[:1][:-3]) /* { dg-error \"negative length in array section\" } */\n+    bar (&h[0][0]);\n+  #pragma acc parallel copy(i[:1][11:]) /* { dg-error \"low bound \\[^\\n\\r]* above array section size\" } */\n+    bar (&i[0][0]);\n+  #pragma acc parallel copyout(j[3:1][:10]) /* { dg-error \"length \\[^\\n\\r]* above array section size\" } */\n+    bar (&j[0][0]);\n+  #pragma acc parallel copyin(j[30:1][5:5]) /* { dg-error \"high bound \\[^\\n\\r]* above array section size\" } */\n+    bar (&j[0][0]);\n+  #pragma acc parallel copyin(a2[:1][2:4])\n+    bar (&a2[0][0]);\n+  #pragma acc parallel copy(a2[3:5][:])\n+    bar (&a2[0][0]);\n+  #pragma acc parallel copyin(a2[3:5][:10])\n+    bar (&a2[0][0]);\n+  #pragma acc parallel copy(b2[0:])\n+    bar (b2);\n+  #pragma acc parallel copy(c2[:3][:])\n+    bar (&c2[0][0]);\n+  #pragma acc parallel copyout(d2[9:])\n+    bar (d2);\n+  #pragma acc parallel copyin(e2[:10])\n+    bar (e2);\n+  #pragma acc parallel copyin(f2[1:9])\n+    bar (f2);\n+  #pragma acc parallel copy(g2[:1][2:4])\n+    bar (&g2[0][0]);\n+  #pragma acc parallel copyout(h2[2:2][0:])\n+    bar (&h2[0][0]);\n+  #pragma acc parallel copy(h2[:1][:3])\n+    bar (&h2[0][0]);\n+  #pragma acc parallel copyin(i2[:1][9:])\n+    bar (&i2[0][0]);\n+  #pragma acc parallel copyout(j2[3:4][:9])\n+    bar (&j2[0][0]);\n+  #pragma acc parallel copyin(j2[30:1][5:4])\n+    bar (&j2[0][0]);\n+  #pragma acc parallel copy(q[1:2])\n+    ;\n+  #pragma acc parallel copy(q[3:5][:10]) /* { dg-error \"array section is not contiguous\" } */\n+    ;\n+  #pragma acc parallel copy(r[3:][2:1][1:2])\n+    ;\n+  #pragma acc parallel copy(r[3:][2:1][1:2][:][0:4])\n+    ;\n+  #pragma acc parallel copy(r[3:][2:1][1:2][1:][0:4]) /* { dg-error \"array section is not contiguous\" } */\n+    ;\n+  #pragma acc parallel copy(r[3:][2:1][1:2][:3][0:4]) /* { dg-error \"array section is not contiguous\" } */\n+    ;\n+  #pragma acc parallel copy(r[3:][2:1][1:2][:][1:]) /* { dg-error \"array section is not contiguous\" } */\n+    ;\n+  #pragma acc parallel copy(r[3:][2:1][1:2][:][:3]) /* { dg-error \"array section is not contiguous\" } */\n+    ;\n+}"}, {"sha": "d4603b016dd600f5ccb443af352d283d56c335c7", "filename": "gcc/testsuite/c-c++-common/goacc/data-clause-2.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c7270cc4efd896fe99f8ad5409dbef089a407f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fdata-clause-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c7270cc4efd896fe99f8ad5409dbef089a407f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fdata-clause-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fdata-clause-2.c?ref=c0c7270cc4efd896fe99f8ad5409dbef089a407f", "patch": "@@ -0,0 +1,49 @@\n+/* Test data clause diagnostics.  */\n+\n+/* See also corresponding OpenACC C++ variant: '../../g++.dg/goacc/data-clause-2.C'.  */\n+\n+/* See also corresponding OpenACC 'cache' directive variant: 'cache-3-2.c'.  */\n+\n+/* See also corresponding OpenMP variant: '../gomp/map-2.c'.  */\n+\n+void\n+foo (int *p, int (*q)[10], int r[10], int s[10][10])\n+{\n+  int a[10], b[10][10];\n+  #pragma acc parallel copy (p[-1:2])\n+  ;\n+  #pragma acc parallel copy (q[-1:2][0:10])\n+  ;\n+  #pragma acc parallel copy (q[-1:2][-2:10]) /* { dg-error \"negative low bound in array section in\" } */\n+  ;\n+  #pragma acc parallel copy (r[-1:2])\n+  ;\n+  #pragma acc parallel copy (s[-1:2][:])\n+  ;\n+  #pragma acc parallel copy (s[-1:2][-2:10]) /* { dg-error \"negative low bound in array section in\" } */\n+  ;\n+  #pragma acc parallel copy (a[-1:2])\t /* { dg-error \"negative low bound in array section in\" } */\n+  ;\n+  #pragma acc parallel copy (b[-1:2][0:])\t /* { dg-error \"negative low bound in array section in\" } */\n+  ;\n+  #pragma acc parallel copy (b[1:2][-2:10]) /* { dg-error \"negative low bound in array section in\" } */\n+  ;\n+  #pragma acc parallel copy (p[2:-3])\t /* { dg-error \"negative length in array section in\" } */\n+  ;\n+  #pragma acc parallel copy (q[2:-3][:])\t /* { dg-error \"negative length in array section in\" } */\n+  ;\n+  #pragma acc parallel copy (q[2:3][0:-1])\t /* { dg-error \"negative length in array section in\" } */\n+  ;\n+  #pragma acc parallel copy (r[2:-5])\t /* { dg-error \"negative length in array section in\" } */\n+  ;\n+  #pragma acc parallel copy (s[2:-5][:])\t /* { dg-error \"negative length in array section in\" } */\n+  ;\n+  #pragma acc parallel copy (s[2:5][0:-4])\t /* { dg-error \"negative length in array section in\" } */\n+  ;\n+  #pragma acc parallel copy (a[2:-5])\t /* { dg-error \"negative length in array section in\" } */\n+  ;\n+  #pragma acc parallel copy (b[2:-5][0:10]) /* { dg-error \"negative length in array section in\" } */\n+  ;\n+  #pragma acc parallel copy (b[2:5][0:-4]) /* { dg-error \"negative length in array section in\" } */\n+  ;\n+}"}, {"sha": "ed88944da7b33089223adb529c0f8b8c5dffe085", "filename": "gcc/testsuite/c-c++-common/gomp/map-1.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c7270cc4efd896fe99f8ad5409dbef089a407f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fmap-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c7270cc4efd896fe99f8ad5409dbef089a407f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fmap-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fmap-1.c?ref=c0c7270cc4efd896fe99f8ad5409dbef089a407f", "patch": "@@ -1,6 +1,8 @@\n /* Test 'map' clause diagnostics.  */\n \n-/* See also corresponding C++ variant: '../../g++.dg/gomp/map-1.C'.  */\n+/* See also corresponding OpenMP C++ variant: '../../g++.dg/gomp/map-1.C'.  */\n+\n+/* See also corresponding OpenACC variant: '../goacc/data-clause-1.c'.  */\n \n extern int a[][10], a2[][10];\n int b[10], c[10][2], d[10], e[10], f[10];"}, {"sha": "01fb4be869df7b5460717f1b30922170460a473d", "filename": "gcc/testsuite/c-c++-common/gomp/map-2.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c7270cc4efd896fe99f8ad5409dbef089a407f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fmap-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c7270cc4efd896fe99f8ad5409dbef089a407f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fmap-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fmap-2.c?ref=c0c7270cc4efd896fe99f8ad5409dbef089a407f", "patch": "@@ -1,6 +1,8 @@\n /* Test 'map' clause diagnostics.  */\n \n-/* See also corresponding C++ variant: '../../g++.dg/gomp/map-2.C'.  */\n+/* See also corresponding OpenMP C++ variant: '../../g++.dg/gomp/map-2.C'.  */\n+\n+/* See also corresponding OpenACC variant: '../goacc/data-clause-2.c'.  */\n \n void\n foo (int *p, int (*q)[10], int r[10], int s[10][10])"}, {"sha": "ceafb38d2679de01e9717b5b85802d92ec833a19", "filename": "gcc/testsuite/g++.dg/goacc/cache-3-1.C", "status": "added", "additions": 123, "deletions": 0, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c7270cc4efd896fe99f8ad5409dbef089a407f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgoacc%2Fcache-3-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c7270cc4efd896fe99f8ad5409dbef089a407f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgoacc%2Fcache-3-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgoacc%2Fcache-3-1.C?ref=c0c7270cc4efd896fe99f8ad5409dbef089a407f", "patch": "@@ -0,0 +1,123 @@\n+/* Test 'cache' directive diagnostics.  */\n+\n+/* See also corresponding C/C++ variant: '../../c-c++-common/goacc/cache-3-1.c'.  */\n+\n+/* See also corresponding C++ data clause variant: 'data-clause-1.C'.  */\n+\n+/* { dg-additional-options \"-fopenmp\" } for '#pragma omp threadprivate'.  */\n+\n+/* The current implementation doesn't restrict where a 'cache' directive may\n+   appear, so we don't make any special arrangements.  */\n+\n+extern int a[][10], a2[][10];\n+int b[10], c[10][2], d[10], e[10], f[10];\n+int b2[10], c2[10][2], d2[10], e2[10], f2[10];\n+int k[10], l[10], m[10], n[10], o;\n+int *p;\n+int **q;\n+int r[4][4][4][4][4];\n+extern struct s s1;\n+extern struct s s2[1]; /* { dg-error \"array type has incomplete element type\" \"\" { target c } } */\n+int t[10];\n+#pragma omp threadprivate (t)\n+#pragma acc routine\n+void bar (int *);\n+\n+template <int N>\n+void\n+foo (int g[3][10], int h[4][8], int i[2][10], int j[][9],\n+     int g2[3][10], int h2[4][8], int i2[2][10], int j2[][9])\n+{\n+  #pragma acc cache(bar[2:5]) /* { dg-error \"is not a variable\" } */\n+    ;\n+  #pragma acc cache(t[2:5]) /* { dg-error \"is threadprivate variable\" } */\n+    ;\n+  #pragma acc cache(k[0.5:]) /* { dg-error \"low bound \\[^\\n\\r]* of array section does not have integral type\" } */\n+    ;\n+  #pragma acc cache(l[:7.5f]) /* { dg-error \"length \\[^\\n\\r]* of array section does not have integral type\" } */\n+    ;\n+  #pragma acc cache(m[p:]) /* { dg-error \"low bound \\[^\\n\\r]* of array section does not have integral type\" } */\n+    ;\n+  #pragma acc cache(n[:p]) /* { dg-error \"length \\[^\\n\\r]* of array section does not have integral type\" } */\n+    ;\n+  #pragma acc cache(o[2:5]) /* { dg-error \"does not have pointer or array type\" } */\n+    ;\n+  #pragma acc cache(s1) /* { dg-error \"expected '\\\\\\['\" } */\n+    ;\n+  #pragma acc cache(s2) /* { dg-error \"expected '\\\\\\['\" } */\n+    ;\n+  #pragma acc cache(a[:][:]) /* { dg-error \"array type length expression must be specified\" } */\n+    bar (&a[0][0]);\n+  #pragma acc cache(b[-1:]) /* { dg-error \"negative low bound in array section\" } */\n+    bar (b);\n+  #pragma acc cache(c[:-3][:]) /* { dg-error \"negative length in array section\" } */\n+    bar (&c[0][0]);\n+  #pragma acc cache(d[11:]) /* { dg-error \"low bound \\[^\\n\\r]* above array section size\" } */\n+    bar (d);\n+  #pragma acc cache(e[:11]) /* { dg-error \"length \\[^\\n\\r]* above array section size\" } */\n+    bar (e);\n+  #pragma acc cache(f[1:10]) /* { dg-error \"high bound \\[^\\n\\r]* above array section size\" } */\n+    bar (f);\n+  #pragma acc cache(g[:][0:10]) /* { dg-error \"for array function parameter length expression must be specified\" } */\n+    bar (&g[0][0]);\n+  #pragma acc cache(h[2:1][-1:]) /* { dg-error \"negative low bound in array section\" } */\n+    bar (&h[0][0]);\n+  #pragma acc cache(h[:1][:-3]) /* { dg-error \"negative length in array section\" } */\n+    bar (&h[0][0]);\n+  #pragma acc cache(i[:1][11:]) /* { dg-error \"low bound \\[^\\n\\r]* above array section size\" } */\n+    bar (&i[0][0]);\n+  #pragma acc cache(j[3:1][:10]) /* { dg-error \"length \\[^\\n\\r]* above array section size\" } */\n+    bar (&j[0][0]);\n+  #pragma acc cache(j[30:1][5:5]) /* { dg-error \"high bound \\[^\\n\\r]* above array section size\" } */\n+    bar (&j[0][0]);\n+  #pragma acc cache(a2[:1][2:4])\n+    bar (&a2[0][0]);\n+  #pragma acc cache(a2[3:5][:])\n+    bar (&a2[0][0]);\n+  #pragma acc cache(a2[3:5][:10])\n+    bar (&a2[0][0]);\n+  #pragma acc cache(b2[0:])\n+    bar (b2);\n+  #pragma acc cache(c2[:3][:])\n+    bar (&c2[0][0]);\n+  #pragma acc cache(d2[9:])\n+    bar (d2);\n+  #pragma acc cache(e2[:10])\n+    bar (e2);\n+  #pragma acc cache(f2[1:9])\n+    bar (f2);\n+  #pragma acc cache(g2[:1][2:4])\n+    bar (&g2[0][0]);\n+  #pragma acc cache(h2[2:2][0:])\n+    bar (&h2[0][0]);\n+  #pragma acc cache(h2[:1][:3])\n+    bar (&h2[0][0]);\n+  #pragma acc cache(i2[:1][9:])\n+    bar (&i2[0][0]);\n+  #pragma acc cache(j2[3:4][:9])\n+    bar (&j2[0][0]);\n+  #pragma acc cache(j2[30:1][5:4])\n+    bar (&j2[0][0]);\n+  #pragma acc cache(q[1:2])\n+    ;\n+  #pragma acc cache(q[3:5][:10]) /* { dg-error \"array section is not contiguous\" } */\n+    ;\n+  #pragma acc cache(r[3:][2:1][1:2])\n+    ;\n+  #pragma acc cache(r[3:][2:1][1:2][:][0:4])\n+    ;\n+  #pragma acc cache(r[3:][2:1][1:2][1:][0:4]) /* { dg-error \"array section is not contiguous\" } */\n+    ;\n+  #pragma acc cache(r[3:][2:1][1:2][:3][0:4]) /* { dg-error \"array section is not contiguous\" } */\n+    ;\n+  #pragma acc cache(r[3:][2:1][1:2][:][1:]) /* { dg-error \"array section is not contiguous\" } */\n+    ;\n+  #pragma acc cache(r[3:][2:1][1:2][:][:3]) /* { dg-error \"array section is not contiguous\" } */\n+    ;\n+}\n+\n+static void\n+instantiate ()\n+{\n+  &foo<0>;\n+}"}, {"sha": "5561e176a56cb2f8d84dbd3ed118876b95ed958c", "filename": "gcc/testsuite/g++.dg/goacc/cache-3-2.C", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c7270cc4efd896fe99f8ad5409dbef089a407f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgoacc%2Fcache-3-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c7270cc4efd896fe99f8ad5409dbef089a407f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgoacc%2Fcache-3-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgoacc%2Fcache-3-2.C?ref=c0c7270cc4efd896fe99f8ad5409dbef089a407f", "patch": "@@ -0,0 +1,57 @@\n+/* Test 'cache' directive diagnostics.  */\n+\n+/* See also corresponding C/C++ variant: '../../c-c++-common/goacc/cache-3-2.c'.  */\n+\n+/* See also corresponding C++ data clause variant: 'data-clause-2.C'.  */\n+\n+/* The current implementation doesn't restrict where a 'cache' directive may\n+   appear, so we don't make any special arrangements.  */\n+\n+template <int N>\n+void\n+foo (int *p, int (*q)[10], int r[10], int s[10][10])\n+{\n+  int a[10], b[10][10];\n+  #pragma acc cache (p[-1:2])\n+  ;\n+  #pragma acc cache (q[-1:2][0:10])\n+  ;\n+  #pragma acc cache (q[-1:2][-2:10]) /* { dg-error \"negative low bound in array section in\" } */\n+  ;\n+  #pragma acc cache (r[-1:2])\n+  ;\n+  #pragma acc cache (s[-1:2][:])\n+  ;\n+  #pragma acc cache (s[-1:2][-2:10]) /* { dg-error \"negative low bound in array section in\" } */\n+  ;\n+  #pragma acc cache (a[-1:2])\t /* { dg-error \"negative low bound in array section in\" } */\n+  ;\n+  #pragma acc cache (b[-1:2][0:])\t /* { dg-error \"negative low bound in array section in\" } */\n+  ;\n+  #pragma acc cache (b[1:2][-2:10]) /* { dg-error \"negative low bound in array section in\" } */\n+  ;\n+  #pragma acc cache (p[2:-3])\t /* { dg-error \"negative length in array section in\" } */\n+  ;\n+  #pragma acc cache (q[2:-3][:])\t /* { dg-error \"negative length in array section in\" } */\n+  ;\n+  #pragma acc cache (q[2:3][0:-1])\t /* { dg-error \"negative length in array section in\" } */\n+  ;\n+  #pragma acc cache (r[2:-5])\t /* { dg-error \"negative length in array section in\" } */\n+  ;\n+  #pragma acc cache (s[2:-5][:])\t /* { dg-error \"negative length in array section in\" } */\n+  ;\n+  #pragma acc cache (s[2:5][0:-4])\t /* { dg-error \"negative length in array section in\" } */\n+  ;\n+  #pragma acc cache (a[2:-5])\t /* { dg-error \"negative length in array section in\" } */\n+  ;\n+  #pragma acc cache (b[2:-5][0:10]) /* { dg-error \"negative length in array section in\" } */\n+  ;\n+  #pragma acc cache (b[2:5][0:-4]) /* { dg-error \"negative length in array section in\" } */\n+  ;\n+}\n+\n+static void\n+instantiate ()\n+{\n+  &foo<0>;\n+}"}, {"sha": "07ef6aed788ee8ada6c91c34a936589a919098b1", "filename": "gcc/testsuite/g++.dg/goacc/data-clause-1.C", "status": "added", "additions": 122, "deletions": 0, "changes": 122, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c7270cc4efd896fe99f8ad5409dbef089a407f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgoacc%2Fdata-clause-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c7270cc4efd896fe99f8ad5409dbef089a407f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgoacc%2Fdata-clause-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgoacc%2Fdata-clause-1.C?ref=c0c7270cc4efd896fe99f8ad5409dbef089a407f", "patch": "@@ -0,0 +1,122 @@\n+/* Test data clause diagnostics.  */\n+\n+/* See also corresponding OpenACC C/C++ variant: '../../c-c++-common/goacc/data-clause-1.c'.  */\n+\n+/* See also corresponding OpenACC 'cache' directive variant: 'cache-3-1.C'.  */\n+\n+/* See also corresponding OpenMP variant: '../gomp/map-1.C'.  */\n+\n+/* { dg-additional-options \"-fopenmp\" } for '#pragma omp threadprivate'.  */\n+\n+extern int a[][10], a2[][10];\n+int b[10], c[10][2], d[10], e[10], f[10];\n+int b2[10], c2[10][2], d2[10], e2[10], f2[10];\n+int k[10], l[10], m[10], n[10], o;\n+int *p;\n+int **q;\n+int r[4][4][4][4][4];\n+extern struct s s1;\n+extern struct s s2[1]; /* { dg-error \"array type has incomplete element type\" \"\" { target c } } */\n+int t[10];\n+#pragma omp threadprivate (t)\n+#pragma acc routine\n+void bar (int *);\n+\n+template <int N>\n+void\n+foo (int g[3][10], int h[4][8], int i[2][10], int j[][9],\n+     int g2[3][10], int h2[4][8], int i2[2][10], int j2[][9])\n+{\n+  #pragma acc parallel copyin(bar[2:5]) /* { dg-error \"is not a variable\" } */\n+    ;\n+  #pragma acc parallel copyout(t[2:5]) /* { dg-error \"is threadprivate variable\" } */\n+    ;\n+  #pragma acc parallel copy(k[0.5:]) /* { dg-error \"low bound \\[^\\n\\r]* of array section does not have integral type\" } */\n+    ;\n+  #pragma acc parallel copyout(l[:7.5f]) /* { dg-error \"length \\[^\\n\\r]* of array section does not have integral type\" } */\n+    ;\n+  #pragma acc parallel copyin(m[p:]) /* { dg-error \"low bound \\[^\\n\\r]* of array section does not have integral type\" } */\n+    ;\n+  #pragma acc parallel copy(n[:p]) /* { dg-error \"length \\[^\\n\\r]* of array section does not have integral type\" } */\n+    ;\n+  #pragma acc parallel copyin(o[2:5]) /* { dg-error \"does not have pointer or array type\" } */\n+    ;\n+  #pragma acc parallel create(s1) /* { dg-error \"'s1' does not have a mappable type in 'map' clause\" } */\n+    ;\n+  #pragma acc parallel create(s2) /* { dg-error \"'s2' does not have a mappable type in 'map' clause\" } */\n+    ;\n+  #pragma acc parallel copyin(a[:][:]) /* { dg-error \"array type length expression must be specified\" } */\n+    bar (&a[0][0]); /* { dg-error \"referenced in target region does not have a mappable type\" \"PR97996\" { xfail *-*-* } } */\n+  #pragma acc parallel copy(b[-1:]) /* { dg-error \"negative low bound in array section\" } */\n+    bar (b);\n+  #pragma acc parallel copy(c[:-3][:]) /* { dg-error \"negative length in array section\" } */\n+    bar (&c[0][0]);\n+  #pragma acc parallel copyout(d[11:]) /* { dg-error \"low bound \\[^\\n\\r]* above array section size\" } */\n+    bar (d);\n+  #pragma acc parallel copyin(e[:11]) /* { dg-error \"length \\[^\\n\\r]* above array section size\" } */\n+    bar (e);\n+  #pragma acc parallel copyin(f[1:10]) /* { dg-error \"high bound \\[^\\n\\r]* above array section size\" } */\n+    bar (f);\n+  #pragma acc parallel copyout(g[:][0:10]) /* { dg-error \"for array function parameter length expression must be specified\" } */\n+    bar (&g[0][0]);\n+  #pragma acc parallel copyout(h[2:1][-1:]) /* { dg-error \"negative low bound in array section\" } */\n+    bar (&h[0][0]);\n+  #pragma acc parallel copy(h[:1][:-3]) /* { dg-error \"negative length in array section\" } */\n+    bar (&h[0][0]);\n+  #pragma acc parallel copy(i[:1][11:]) /* { dg-error \"low bound \\[^\\n\\r]* above array section size\" } */\n+    bar (&i[0][0]);\n+  #pragma acc parallel copyout(j[3:1][:10]) /* { dg-error \"length \\[^\\n\\r]* above array section size\" } */\n+    bar (&j[0][0]);\n+  #pragma acc parallel copyin(j[30:1][5:5]) /* { dg-error \"high bound \\[^\\n\\r]* above array section size\" } */\n+    bar (&j[0][0]);\n+  #pragma acc parallel copyin(a2[:1][2:4])\n+    bar (&a2[0][0]);\n+  #pragma acc parallel copy(a2[3:5][:])\n+    bar (&a2[0][0]);\n+  #pragma acc parallel copyin(a2[3:5][:10])\n+    bar (&a2[0][0]);\n+  #pragma acc parallel copy(b2[0:])\n+    bar (b2);\n+  #pragma acc parallel copy(c2[:3][:])\n+    bar (&c2[0][0]);\n+  #pragma acc parallel copyout(d2[9:])\n+    bar (d2);\n+  #pragma acc parallel copyin(e2[:10])\n+    bar (e2);\n+  #pragma acc parallel copyin(f2[1:9])\n+    bar (f2);\n+  #pragma acc parallel copy(g2[:1][2:4])\n+    bar (&g2[0][0]);\n+  #pragma acc parallel copyout(h2[2:2][0:])\n+    bar (&h2[0][0]);\n+  #pragma acc parallel copy(h2[:1][:3])\n+    bar (&h2[0][0]);\n+  #pragma acc parallel copyin(i2[:1][9:])\n+    bar (&i2[0][0]);\n+  #pragma acc parallel copyout(j2[3:4][:9])\n+    bar (&j2[0][0]);\n+  #pragma acc parallel copyin(j2[30:1][5:4])\n+    bar (&j2[0][0]);\n+  #pragma acc parallel copy(q[1:2])\n+    ;\n+  #pragma acc parallel copy(q[3:5][:10]) /* { dg-error \"array section is not contiguous\" } */\n+    ;\n+  #pragma acc parallel copy(r[3:][2:1][1:2])\n+    ;\n+  #pragma acc parallel copy(r[3:][2:1][1:2][:][0:4])\n+    ;\n+  #pragma acc parallel copy(r[3:][2:1][1:2][1:][0:4]) /* { dg-error \"array section is not contiguous\" } */\n+    ;\n+  #pragma acc parallel copy(r[3:][2:1][1:2][:3][0:4]) /* { dg-error \"array section is not contiguous\" } */\n+    ;\n+  #pragma acc parallel copy(r[3:][2:1][1:2][:][1:]) /* { dg-error \"array section is not contiguous\" } */\n+    ;\n+  #pragma acc parallel copy(r[3:][2:1][1:2][:][:3]) /* { dg-error \"array section is not contiguous\" } */\n+    ;\n+}\n+\n+static void\n+instantiate ()\n+{\n+  &foo<0>;\n+}"}, {"sha": "57d1823aede260002e4fe6db24eb23c6c6a07415", "filename": "gcc/testsuite/g++.dg/goacc/data-clause-2.C", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c7270cc4efd896fe99f8ad5409dbef089a407f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgoacc%2Fdata-clause-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c7270cc4efd896fe99f8ad5409dbef089a407f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgoacc%2Fdata-clause-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgoacc%2Fdata-clause-2.C?ref=c0c7270cc4efd896fe99f8ad5409dbef089a407f", "patch": "@@ -0,0 +1,56 @@\n+/* Test data clause diagnostics.  */\n+\n+/* See also corresponding OpenACC C/C++ variant: '../../c-c++-common/goacc/data-clause-2.c'.  */\n+\n+/* See also corresponding OpenACC 'cache' directive variant: 'cache-3-2.C'.  */\n+\n+/* See also corresponding OpenMP variant: '../gomp/map-2.C'.  */\n+\n+template <int N>\n+void\n+foo (int *p, int (*q)[10], int r[10], int s[10][10])\n+{\n+  int a[10], b[10][10];\n+  #pragma acc parallel copy (p[-1:2])\n+  ;\n+  #pragma acc parallel copy (q[-1:2][0:10])\n+  ;\n+  #pragma acc parallel copy (q[-1:2][-2:10]) /* { dg-error \"negative low bound in array section in\" } */\n+  ;\n+  #pragma acc parallel copy (r[-1:2])\n+  ;\n+  #pragma acc parallel copy (s[-1:2][:])\n+  ;\n+  #pragma acc parallel copy (s[-1:2][-2:10]) /* { dg-error \"negative low bound in array section in\" } */\n+  ;\n+  #pragma acc parallel copy (a[-1:2])\t /* { dg-error \"negative low bound in array section in\" } */\n+  ;\n+  #pragma acc parallel copy (b[-1:2][0:])\t /* { dg-error \"negative low bound in array section in\" } */\n+  ;\n+  #pragma acc parallel copy (b[1:2][-2:10]) /* { dg-error \"negative low bound in array section in\" } */\n+  ;\n+  #pragma acc parallel copy (p[2:-3])\t /* { dg-error \"negative length in array section in\" } */\n+  ;\n+  #pragma acc parallel copy (q[2:-3][:])\t /* { dg-error \"negative length in array section in\" } */\n+  ;\n+  #pragma acc parallel copy (q[2:3][0:-1])\t /* { dg-error \"negative length in array section in\" } */\n+  ;\n+  #pragma acc parallel copy (r[2:-5])\t /* { dg-error \"negative length in array section in\" } */\n+  ;\n+  #pragma acc parallel copy (s[2:-5][:])\t /* { dg-error \"negative length in array section in\" } */\n+  ;\n+  #pragma acc parallel copy (s[2:5][0:-4])\t /* { dg-error \"negative length in array section in\" } */\n+  ;\n+  #pragma acc parallel copy (a[2:-5])\t /* { dg-error \"negative length in array section in\" } */\n+  ;\n+  #pragma acc parallel copy (b[2:-5][0:10]) /* { dg-error \"negative length in array section in\" } */\n+  ;\n+  #pragma acc parallel copy (b[2:5][0:-4]) /* { dg-error \"negative length in array section in\" } */\n+  ;\n+}\n+\n+static void\n+instantiate ()\n+{\n+  &foo<0>;\n+}"}, {"sha": "27dc7a551cbe0bf73c3993d72eb3c5b8d6081990", "filename": "gcc/testsuite/g++.dg/gomp/map-1.C", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c7270cc4efd896fe99f8ad5409dbef089a407f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fmap-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c7270cc4efd896fe99f8ad5409dbef089a407f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fmap-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fmap-1.C?ref=c0c7270cc4efd896fe99f8ad5409dbef089a407f", "patch": "@@ -1,6 +1,8 @@\n /* Test 'map' clause diagnostics.  */\n \n-/* See also corresponding C/C++ variant: '../../c-c++-common/gomp/map-1.c'.  */\n+/* See also corresponding OpenMP C/C++ variant: '../../c-c++-common/gomp/map-1.c'.  */\n+\n+/* See also corresponding OpenACC variant: '../goacc/data-clause-1.C'.  */\n \n extern int a[][10], a2[][10];\n int b[10], c[10][2], d[10], e[10], f[10];\n@@ -41,7 +43,7 @@ foo (int g[3][10], int h[4][8], int i[2][10], int j[][9],\n   #pragma omp target map(alloc: s2) /* { dg-error \"'s2' does not have a mappable type in 'map' clause\" } */\n     ;\n   #pragma omp target map(to: a[:][:]) /* { dg-error \"array type length expression must be specified\" } */\n-    bar (&a[0][0]); /* { dg-error \"referenced in target region does not have a mappable type\" \"TODO\" { xfail *-*-* } } */\n+    bar (&a[0][0]); /* { dg-error \"referenced in target region does not have a mappable type\" \"PR97996\" { xfail *-*-* } } */\n   #pragma omp target map(tofrom: b[-1:]) /* { dg-error \"negative low bound in array section\" } */\n     bar (b);\n   #pragma omp target map(tofrom: c[:-3][:]) /* { dg-error \"negative length in array section\" } */"}, {"sha": "bbe26061fe35d0ef3910b637974e0795e93e113e", "filename": "gcc/testsuite/g++.dg/gomp/map-2.C", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c7270cc4efd896fe99f8ad5409dbef089a407f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fmap-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c7270cc4efd896fe99f8ad5409dbef089a407f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fmap-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fmap-2.C?ref=c0c7270cc4efd896fe99f8ad5409dbef089a407f", "patch": "@@ -1,6 +1,8 @@\n /* Test 'map' clause diagnostics.  */\n \n-/* See also corresponding C/C++ variant: '../../c-c++-common/gomp/map-2.c'.  */\n+/* See also corresponding OpenMP C/C++ variant: '../../c-c++-common/gomp/map-2.c'.  */\n+\n+/* See also corresponding OpenACC variant: '../goacc/data-clause-2.C'.  */\n \n template <int N>\n void"}]}