{"sha": "8b2ea410c7d5ccc14b94447d449abdc0b4d547ac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGIyZWE0MTBjN2Q1Y2NjMTRiOTQ0NDdkNDQ5YWJkYzBiNGQ1NDdhYw==", "commit": {"author": {"name": "James Greenhalgh", "email": "james.greenhalgh@arm.com", "date": "2013-01-07T15:32:58Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2013-01-07T15:32:58Z"}, "message": "[AARCH64] Make argument of ld1 intrinsics const.\n\ngcc/\n\t* config/aarch64/arm_neon.h (vld1_dup_*): Make argument const.\n\t(vld1q_dup_*): Likewise.\n\t(vld1_*): Likewise.\n\t(vld1q_*): Likewise.\n\t(vld1_lane_*): Likewise.\n\t(vld1q_lane_*): Likewise.\n\nFrom-SVN: r194974", "tree": {"sha": "43ddf3b92f60d6b7a81bd1a50d52f1d02a5ca4d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43ddf3b92f60d6b7a81bd1a50d52f1d02a5ca4d2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8b2ea410c7d5ccc14b94447d449abdc0b4d547ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b2ea410c7d5ccc14b94447d449abdc0b4d547ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b2ea410c7d5ccc14b94447d449abdc0b4d547ac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b2ea410c7d5ccc14b94447d449abdc0b4d547ac/comments", "author": {"login": "jgreenhalgh-arm", "id": 6104025, "node_id": "MDQ6VXNlcjYxMDQwMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6104025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgreenhalgh-arm", "html_url": "https://github.com/jgreenhalgh-arm", "followers_url": "https://api.github.com/users/jgreenhalgh-arm/followers", "following_url": "https://api.github.com/users/jgreenhalgh-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jgreenhalgh-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgreenhalgh-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgreenhalgh-arm/subscriptions", "organizations_url": "https://api.github.com/users/jgreenhalgh-arm/orgs", "repos_url": "https://api.github.com/users/jgreenhalgh-arm/repos", "events_url": "https://api.github.com/users/jgreenhalgh-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jgreenhalgh-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9713d329fac4ec0ac624a9c36a50d37e58bdd774", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9713d329fac4ec0ac624a9c36a50d37e58bdd774", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9713d329fac4ec0ac624a9c36a50d37e58bdd774"}], "stats": {"total": 153, "additions": 81, "deletions": 72}, "files": [{"sha": "6b7ef3eb04b9371bc510b88a5bc4ad953d862d13", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b2ea410c7d5ccc14b94447d449abdc0b4d547ac/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b2ea410c7d5ccc14b94447d449abdc0b4d547ac/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8b2ea410c7d5ccc14b94447d449abdc0b4d547ac", "patch": "@@ -1,3 +1,12 @@\n+2013-01-07  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\t* config/aarch64/arm_neon.h (vld1_dup_*): Make argument const.\n+\t(vld1q_dup_*): Likewise.\n+\t(vld1_*): Likewise.\n+\t(vld1q_*): Likewise.\n+\t(vld1_lane_*): Likewise.\n+\t(vld1q_lane_*): Likewise.\n+\n 2013-01-07  Richard Biener  <rguenther@suse.de>\n \n \t* lto-streamer.h (LTO_minor_version): Bump to 2."}, {"sha": "21fa4289c7cec4f3945e55183a0af490e17f1c43", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 72, "deletions": 72, "changes": 144, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b2ea410c7d5ccc14b94447d449abdc0b4d547ac/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b2ea410c7d5ccc14b94447d449abdc0b4d547ac/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=8b2ea410c7d5ccc14b94447d449abdc0b4d547ac", "patch": "@@ -8387,7 +8387,7 @@ vhsubq_u32 (uint32x4_t a, uint32x4_t b)\n }\n \n __extension__ static __inline float32x2_t __attribute__ ((__always_inline__))\n-vld1_dup_f32 (float32_t * a)\n+vld1_dup_f32 (const float32_t * a)\n {\n   float32x2_t result;\n   __asm__ (\"ld1r {%0.2s},[%1]\"\n@@ -8398,7 +8398,7 @@ vld1_dup_f32 (float32_t * a)\n }\n \n __extension__ static __inline float64x1_t __attribute__ ((__always_inline__))\n-vld1_dup_f64 (float64_t * a)\n+vld1_dup_f64 (const float64_t * a)\n {\n   float64x1_t result;\n   __asm__ (\"ld1 {%0.1d},[%1]\"\n@@ -8409,7 +8409,7 @@ vld1_dup_f64 (float64_t * a)\n }\n \n __extension__ static __inline poly8x8_t __attribute__ ((__always_inline__))\n-vld1_dup_p8 (poly8_t * a)\n+vld1_dup_p8 (const poly8_t * a)\n {\n   poly8x8_t result;\n   __asm__ (\"ld1r {%0.8b},[%1]\"\n@@ -8420,7 +8420,7 @@ vld1_dup_p8 (poly8_t * a)\n }\n \n __extension__ static __inline poly16x4_t __attribute__ ((__always_inline__))\n-vld1_dup_p16 (poly16_t * a)\n+vld1_dup_p16 (const poly16_t * a)\n {\n   poly16x4_t result;\n   __asm__ (\"ld1r {%0.4h},[%1]\"\n@@ -8431,7 +8431,7 @@ vld1_dup_p16 (poly16_t * a)\n }\n \n __extension__ static __inline int8x8_t __attribute__ ((__always_inline__))\n-vld1_dup_s8 (int8_t * a)\n+vld1_dup_s8 (const int8_t * a)\n {\n   int8x8_t result;\n   __asm__ (\"ld1r {%0.8b},[%1]\"\n@@ -8442,7 +8442,7 @@ vld1_dup_s8 (int8_t * a)\n }\n \n __extension__ static __inline int16x4_t __attribute__ ((__always_inline__))\n-vld1_dup_s16 (int16_t * a)\n+vld1_dup_s16 (const int16_t * a)\n {\n   int16x4_t result;\n   __asm__ (\"ld1r {%0.4h},[%1]\"\n@@ -8453,7 +8453,7 @@ vld1_dup_s16 (int16_t * a)\n }\n \n __extension__ static __inline int32x2_t __attribute__ ((__always_inline__))\n-vld1_dup_s32 (int32_t * a)\n+vld1_dup_s32 (const int32_t * a)\n {\n   int32x2_t result;\n   __asm__ (\"ld1r {%0.2s},[%1]\"\n@@ -8464,7 +8464,7 @@ vld1_dup_s32 (int32_t * a)\n }\n \n __extension__ static __inline int64x1_t __attribute__ ((__always_inline__))\n-vld1_dup_s64 (int64_t * a)\n+vld1_dup_s64 (const int64_t * a)\n {\n   int64x1_t result;\n   __asm__ (\"ld1 {%0.1d},[%1]\"\n@@ -8475,7 +8475,7 @@ vld1_dup_s64 (int64_t * a)\n }\n \n __extension__ static __inline uint8x8_t __attribute__ ((__always_inline__))\n-vld1_dup_u8 (uint8_t * a)\n+vld1_dup_u8 (const uint8_t * a)\n {\n   uint8x8_t result;\n   __asm__ (\"ld1r {%0.8b},[%1]\"\n@@ -8486,7 +8486,7 @@ vld1_dup_u8 (uint8_t * a)\n }\n \n __extension__ static __inline uint16x4_t __attribute__ ((__always_inline__))\n-vld1_dup_u16 (uint16_t * a)\n+vld1_dup_u16 (const uint16_t * a)\n {\n   uint16x4_t result;\n   __asm__ (\"ld1r {%0.4h},[%1]\"\n@@ -8497,7 +8497,7 @@ vld1_dup_u16 (uint16_t * a)\n }\n \n __extension__ static __inline uint32x2_t __attribute__ ((__always_inline__))\n-vld1_dup_u32 (uint32_t * a)\n+vld1_dup_u32 (const uint32_t * a)\n {\n   uint32x2_t result;\n   __asm__ (\"ld1r {%0.2s},[%1]\"\n@@ -8508,7 +8508,7 @@ vld1_dup_u32 (uint32_t * a)\n }\n \n __extension__ static __inline uint64x1_t __attribute__ ((__always_inline__))\n-vld1_dup_u64 (uint64_t * a)\n+vld1_dup_u64 (const uint64_t * a)\n {\n   uint64x1_t result;\n   __asm__ (\"ld1 {%0.1d},[%1]\"\n@@ -8519,7 +8519,7 @@ vld1_dup_u64 (uint64_t * a)\n }\n \n __extension__ static __inline float32x2_t __attribute__ ((__always_inline__))\n-vld1_f32 (float32_t * a)\n+vld1_f32 (const float32_t * a)\n {\n   float32x2_t result;\n   __asm__ (\"ld1 {%0.2s},[%1]\"\n@@ -8530,7 +8530,7 @@ vld1_f32 (float32_t * a)\n }\n \n __extension__ static __inline float64x1_t __attribute__ ((__always_inline__))\n-vld1_f64 (float64_t * a)\n+vld1_f64 (const float64_t * a)\n {\n   float64x1_t result;\n   __asm__ (\"ld1 {%0.1d},[%1]\"\n@@ -8544,7 +8544,7 @@ vld1_f64 (float64_t * a)\n   __extension__                                                         \\\n     ({                                                                  \\\n        float32x2_t b_ = (b);                                            \\\n-       float32_t * a_ = (a);                                            \\\n+       const float32_t * a_ = (a);                                      \\\n        float32x2_t result;                                              \\\n        __asm__ (\"ld1 {%0.s}[%3],[%1]\"                                   \\\n                 : \"=w\"(result)                                          \\\n@@ -8557,7 +8557,7 @@ vld1_f64 (float64_t * a)\n   __extension__                                                         \\\n     ({                                                                  \\\n        float64x1_t b_ = (b);                                            \\\n-       float64_t * a_ = (a);                                            \\\n+       const float64_t * a_ = (a);                                      \\\n        float64x1_t result;                                              \\\n        __asm__ (\"ld1 {%0.d}[%3],[%1]\"                                   \\\n                 : \"=w\"(result)                                          \\\n@@ -8570,7 +8570,7 @@ vld1_f64 (float64_t * a)\n   __extension__                                                         \\\n     ({                                                                  \\\n        poly8x8_t b_ = (b);                                              \\\n-       poly8_t * a_ = (a);                                              \\\n+       const poly8_t * a_ = (a);                                        \\\n        poly8x8_t result;                                                \\\n        __asm__ (\"ld1 {%0.b}[%3],[%1]\"                                   \\\n                 : \"=w\"(result)                                          \\\n@@ -8583,7 +8583,7 @@ vld1_f64 (float64_t * a)\n   __extension__                                                         \\\n     ({                                                                  \\\n        poly16x4_t b_ = (b);                                             \\\n-       poly16_t * a_ = (a);                                             \\\n+       const poly16_t * a_ = (a);                                       \\\n        poly16x4_t result;                                               \\\n        __asm__ (\"ld1 {%0.h}[%3],[%1]\"                                   \\\n                 : \"=w\"(result)                                          \\\n@@ -8596,7 +8596,7 @@ vld1_f64 (float64_t * a)\n   __extension__                                                         \\\n     ({                                                                  \\\n        int8x8_t b_ = (b);                                               \\\n-       int8_t * a_ = (a);                                               \\\n+       const int8_t * a_ = (a);                                         \\\n        int8x8_t result;                                                 \\\n        __asm__ (\"ld1 {%0.b}[%3],[%1]\"                                   \\\n                 : \"=w\"(result)                                          \\\n@@ -8609,7 +8609,7 @@ vld1_f64 (float64_t * a)\n   __extension__                                                         \\\n     ({                                                                  \\\n        int16x4_t b_ = (b);                                              \\\n-       int16_t * a_ = (a);                                              \\\n+       const int16_t * a_ = (a);                                        \\\n        int16x4_t result;                                                \\\n        __asm__ (\"ld1 {%0.h}[%3],[%1]\"                                   \\\n                 : \"=w\"(result)                                          \\\n@@ -8622,7 +8622,7 @@ vld1_f64 (float64_t * a)\n   __extension__                                                         \\\n     ({                                                                  \\\n        int32x2_t b_ = (b);                                              \\\n-       int32_t * a_ = (a);                                              \\\n+       const int32_t * a_ = (a);                                        \\\n        int32x2_t result;                                                \\\n        __asm__ (\"ld1 {%0.s}[%3],[%1]\"                                   \\\n                 : \"=w\"(result)                                          \\\n@@ -8635,7 +8635,7 @@ vld1_f64 (float64_t * a)\n   __extension__                                                         \\\n     ({                                                                  \\\n        int64x1_t b_ = (b);                                              \\\n-       int64_t * a_ = (a);                                              \\\n+       const int64_t * a_ = (a);                                        \\\n        int64x1_t result;                                                \\\n        __asm__ (\"ld1 {%0.d}[%3],[%1]\"                                   \\\n                 : \"=w\"(result)                                          \\\n@@ -8648,7 +8648,7 @@ vld1_f64 (float64_t * a)\n   __extension__                                                         \\\n     ({                                                                  \\\n        uint8x8_t b_ = (b);                                              \\\n-       uint8_t * a_ = (a);                                              \\\n+       const uint8_t * a_ = (a);                                        \\\n        uint8x8_t result;                                                \\\n        __asm__ (\"ld1 {%0.b}[%3],[%1]\"                                   \\\n                 : \"=w\"(result)                                          \\\n@@ -8661,7 +8661,7 @@ vld1_f64 (float64_t * a)\n   __extension__                                                         \\\n     ({                                                                  \\\n        uint16x4_t b_ = (b);                                             \\\n-       uint16_t * a_ = (a);                                             \\\n+       const uint16_t * a_ = (a);                                       \\\n        uint16x4_t result;                                               \\\n        __asm__ (\"ld1 {%0.h}[%3],[%1]\"                                   \\\n                 : \"=w\"(result)                                          \\\n@@ -8674,7 +8674,7 @@ vld1_f64 (float64_t * a)\n   __extension__                                                         \\\n     ({                                                                  \\\n        uint32x2_t b_ = (b);                                             \\\n-       uint32_t * a_ = (a);                                             \\\n+       const uint32_t * a_ = (a);                                       \\\n        uint32x2_t result;                                               \\\n        __asm__ (\"ld1 {%0.s}[%3],[%1]\"                                   \\\n                 : \"=w\"(result)                                          \\\n@@ -8687,7 +8687,7 @@ vld1_f64 (float64_t * a)\n   __extension__                                                         \\\n     ({                                                                  \\\n        uint64x1_t b_ = (b);                                             \\\n-       uint64_t * a_ = (a);                                             \\\n+       const uint64_t * a_ = (a);                                       \\\n        uint64x1_t result;                                               \\\n        __asm__ (\"ld1 {%0.d}[%3],[%1]\"                                   \\\n                 : \"=w\"(result)                                          \\\n@@ -8697,7 +8697,7 @@ vld1_f64 (float64_t * a)\n      })\n \n __extension__ static __inline poly8x8_t __attribute__ ((__always_inline__))\n-vld1_p8 (poly8_t * a)\n+vld1_p8 (const poly8_t * a)\n {\n   poly8x8_t result;\n   __asm__ (\"ld1 {%0.8b}, [%1]\"\n@@ -8708,7 +8708,7 @@ vld1_p8 (poly8_t * a)\n }\n \n __extension__ static __inline poly16x4_t __attribute__ ((__always_inline__))\n-vld1_p16 (poly16_t * a)\n+vld1_p16 (const poly16_t * a)\n {\n   poly16x4_t result;\n   __asm__ (\"ld1 {%0.4h}, [%1]\"\n@@ -8719,7 +8719,7 @@ vld1_p16 (poly16_t * a)\n }\n \n __extension__ static __inline int8x8_t __attribute__ ((__always_inline__))\n-vld1_s8 (int8_t * a)\n+vld1_s8 (const int8_t * a)\n {\n   int8x8_t result;\n   __asm__ (\"ld1 {%0.8b},[%1]\"\n@@ -8730,7 +8730,7 @@ vld1_s8 (int8_t * a)\n }\n \n __extension__ static __inline int16x4_t __attribute__ ((__always_inline__))\n-vld1_s16 (int16_t * a)\n+vld1_s16 (const int16_t * a)\n {\n   int16x4_t result;\n   __asm__ (\"ld1 {%0.4h},[%1]\"\n@@ -8741,7 +8741,7 @@ vld1_s16 (int16_t * a)\n }\n \n __extension__ static __inline int32x2_t __attribute__ ((__always_inline__))\n-vld1_s32 (int32_t * a)\n+vld1_s32 (const int32_t * a)\n {\n   int32x2_t result;\n   __asm__ (\"ld1 {%0.2s},[%1]\"\n@@ -8752,7 +8752,7 @@ vld1_s32 (int32_t * a)\n }\n \n __extension__ static __inline int64x1_t __attribute__ ((__always_inline__))\n-vld1_s64 (int64_t * a)\n+vld1_s64 (const int64_t * a)\n {\n   int64x1_t result;\n   __asm__ (\"ld1 {%0.1d},[%1]\"\n@@ -8763,7 +8763,7 @@ vld1_s64 (int64_t * a)\n }\n \n __extension__ static __inline uint8x8_t __attribute__ ((__always_inline__))\n-vld1_u8 (uint8_t * a)\n+vld1_u8 (const uint8_t * a)\n {\n   uint8x8_t result;\n   __asm__ (\"ld1 {%0.8b},[%1]\"\n@@ -8774,7 +8774,7 @@ vld1_u8 (uint8_t * a)\n }\n \n __extension__ static __inline uint16x4_t __attribute__ ((__always_inline__))\n-vld1_u16 (uint16_t * a)\n+vld1_u16 (const uint16_t * a)\n {\n   uint16x4_t result;\n   __asm__ (\"ld1 {%0.4h},[%1]\"\n@@ -8785,7 +8785,7 @@ vld1_u16 (uint16_t * a)\n }\n \n __extension__ static __inline uint32x2_t __attribute__ ((__always_inline__))\n-vld1_u32 (uint32_t * a)\n+vld1_u32 (const uint32_t * a)\n {\n   uint32x2_t result;\n   __asm__ (\"ld1 {%0.2s},[%1]\"\n@@ -8796,7 +8796,7 @@ vld1_u32 (uint32_t * a)\n }\n \n __extension__ static __inline uint64x1_t __attribute__ ((__always_inline__))\n-vld1_u64 (uint64_t * a)\n+vld1_u64 (const uint64_t * a)\n {\n   uint64x1_t result;\n   __asm__ (\"ld1 {%0.1d},[%1]\"\n@@ -8807,7 +8807,7 @@ vld1_u64 (uint64_t * a)\n }\n \n __extension__ static __inline float32x4_t __attribute__ ((__always_inline__))\n-vld1q_dup_f32 (float32_t * a)\n+vld1q_dup_f32 (const float32_t * a)\n {\n   float32x4_t result;\n   __asm__ (\"ld1r {%0.4s},[%1]\"\n@@ -8818,7 +8818,7 @@ vld1q_dup_f32 (float32_t * a)\n }\n \n __extension__ static __inline float64x2_t __attribute__ ((__always_inline__))\n-vld1q_dup_f64 (float64_t * a)\n+vld1q_dup_f64 (const float64_t * a)\n {\n   float64x2_t result;\n   __asm__ (\"ld1r {%0.2d},[%1]\"\n@@ -8829,7 +8829,7 @@ vld1q_dup_f64 (float64_t * a)\n }\n \n __extension__ static __inline poly8x16_t __attribute__ ((__always_inline__))\n-vld1q_dup_p8 (poly8_t * a)\n+vld1q_dup_p8 (const poly8_t * a)\n {\n   poly8x16_t result;\n   __asm__ (\"ld1r {%0.16b},[%1]\"\n@@ -8840,7 +8840,7 @@ vld1q_dup_p8 (poly8_t * a)\n }\n \n __extension__ static __inline poly16x8_t __attribute__ ((__always_inline__))\n-vld1q_dup_p16 (poly16_t * a)\n+vld1q_dup_p16 (const poly16_t * a)\n {\n   poly16x8_t result;\n   __asm__ (\"ld1r {%0.8h},[%1]\"\n@@ -8851,7 +8851,7 @@ vld1q_dup_p16 (poly16_t * a)\n }\n \n __extension__ static __inline int8x16_t __attribute__ ((__always_inline__))\n-vld1q_dup_s8 (int8_t * a)\n+vld1q_dup_s8 (const int8_t * a)\n {\n   int8x16_t result;\n   __asm__ (\"ld1r {%0.16b},[%1]\"\n@@ -8862,7 +8862,7 @@ vld1q_dup_s8 (int8_t * a)\n }\n \n __extension__ static __inline int16x8_t __attribute__ ((__always_inline__))\n-vld1q_dup_s16 (int16_t * a)\n+vld1q_dup_s16 (const int16_t * a)\n {\n   int16x8_t result;\n   __asm__ (\"ld1r {%0.8h},[%1]\"\n@@ -8873,7 +8873,7 @@ vld1q_dup_s16 (int16_t * a)\n }\n \n __extension__ static __inline int32x4_t __attribute__ ((__always_inline__))\n-vld1q_dup_s32 (int32_t * a)\n+vld1q_dup_s32 (const int32_t * a)\n {\n   int32x4_t result;\n   __asm__ (\"ld1r {%0.4s},[%1]\"\n@@ -8884,7 +8884,7 @@ vld1q_dup_s32 (int32_t * a)\n }\n \n __extension__ static __inline int64x2_t __attribute__ ((__always_inline__))\n-vld1q_dup_s64 (int64_t * a)\n+vld1q_dup_s64 (const int64_t * a)\n {\n   int64x2_t result;\n   __asm__ (\"ld1r {%0.2d},[%1]\"\n@@ -8895,7 +8895,7 @@ vld1q_dup_s64 (int64_t * a)\n }\n \n __extension__ static __inline uint8x16_t __attribute__ ((__always_inline__))\n-vld1q_dup_u8 (uint8_t * a)\n+vld1q_dup_u8 (const uint8_t * a)\n {\n   uint8x16_t result;\n   __asm__ (\"ld1r {%0.16b},[%1]\"\n@@ -8906,7 +8906,7 @@ vld1q_dup_u8 (uint8_t * a)\n }\n \n __extension__ static __inline uint16x8_t __attribute__ ((__always_inline__))\n-vld1q_dup_u16 (uint16_t * a)\n+vld1q_dup_u16 (const uint16_t * a)\n {\n   uint16x8_t result;\n   __asm__ (\"ld1r {%0.8h},[%1]\"\n@@ -8917,7 +8917,7 @@ vld1q_dup_u16 (uint16_t * a)\n }\n \n __extension__ static __inline uint32x4_t __attribute__ ((__always_inline__))\n-vld1q_dup_u32 (uint32_t * a)\n+vld1q_dup_u32 (const uint32_t * a)\n {\n   uint32x4_t result;\n   __asm__ (\"ld1r {%0.4s},[%1]\"\n@@ -8928,7 +8928,7 @@ vld1q_dup_u32 (uint32_t * a)\n }\n \n __extension__ static __inline uint64x2_t __attribute__ ((__always_inline__))\n-vld1q_dup_u64 (uint64_t * a)\n+vld1q_dup_u64 (const uint64_t * a)\n {\n   uint64x2_t result;\n   __asm__ (\"ld1r {%0.2d},[%1]\"\n@@ -8939,7 +8939,7 @@ vld1q_dup_u64 (uint64_t * a)\n }\n \n __extension__ static __inline float32x4_t __attribute__ ((__always_inline__))\n-vld1q_f32 (float32_t * a)\n+vld1q_f32 (const float32_t * a)\n {\n   float32x4_t result;\n   __asm__ (\"ld1 {%0.4s},[%1]\"\n@@ -8950,7 +8950,7 @@ vld1q_f32 (float32_t * a)\n }\n \n __extension__ static __inline float64x2_t __attribute__ ((__always_inline__))\n-vld1q_f64 (float64_t * a)\n+vld1q_f64 (const float64_t * a)\n {\n   float64x2_t result;\n   __asm__ (\"ld1 {%0.2d},[%1]\"\n@@ -8964,7 +8964,7 @@ vld1q_f64 (float64_t * a)\n   __extension__                                                         \\\n     ({                                                                  \\\n        float32x4_t b_ = (b);                                            \\\n-       float32_t * a_ = (a);                                            \\\n+       const float32_t * a_ = (a);                                      \\\n        float32x4_t result;                                              \\\n        __asm__ (\"ld1 {%0.s}[%3],[%1]\"                                   \\\n                 : \"=w\"(result)                                          \\\n@@ -8977,7 +8977,7 @@ vld1q_f64 (float64_t * a)\n   __extension__                                                         \\\n     ({                                                                  \\\n        float64x2_t b_ = (b);                                            \\\n-       float64_t * a_ = (a);                                            \\\n+       const float64_t * a_ = (a);                                      \\\n        float64x2_t result;                                              \\\n        __asm__ (\"ld1 {%0.d}[%3],[%1]\"                                   \\\n                 : \"=w\"(result)                                          \\\n@@ -8990,7 +8990,7 @@ vld1q_f64 (float64_t * a)\n   __extension__                                                         \\\n     ({                                                                  \\\n        poly8x16_t b_ = (b);                                             \\\n-       poly8_t * a_ = (a);                                              \\\n+       const poly8_t * a_ = (a);                                        \\\n        poly8x16_t result;                                               \\\n        __asm__ (\"ld1 {%0.b}[%3],[%1]\"                                   \\\n                 : \"=w\"(result)                                          \\\n@@ -9003,7 +9003,7 @@ vld1q_f64 (float64_t * a)\n   __extension__                                                         \\\n     ({                                                                  \\\n        poly16x8_t b_ = (b);                                             \\\n-       poly16_t * a_ = (a);                                             \\\n+       const poly16_t * a_ = (a);                                       \\\n        poly16x8_t result;                                               \\\n        __asm__ (\"ld1 {%0.h}[%3],[%1]\"                                   \\\n                 : \"=w\"(result)                                          \\\n@@ -9016,7 +9016,7 @@ vld1q_f64 (float64_t * a)\n   __extension__                                                         \\\n     ({                                                                  \\\n        int8x16_t b_ = (b);                                              \\\n-       int8_t * a_ = (a);                                               \\\n+       const int8_t * a_ = (a);                                         \\\n        int8x16_t result;                                                \\\n        __asm__ (\"ld1 {%0.b}[%3],[%1]\"                                   \\\n                 : \"=w\"(result)                                          \\\n@@ -9029,7 +9029,7 @@ vld1q_f64 (float64_t * a)\n   __extension__                                                         \\\n     ({                                                                  \\\n        int16x8_t b_ = (b);                                              \\\n-       int16_t * a_ = (a);                                              \\\n+       const int16_t * a_ = (a);                                        \\\n        int16x8_t result;                                                \\\n        __asm__ (\"ld1 {%0.h}[%3],[%1]\"                                   \\\n                 : \"=w\"(result)                                          \\\n@@ -9042,7 +9042,7 @@ vld1q_f64 (float64_t * a)\n   __extension__                                                         \\\n     ({                                                                  \\\n        int32x4_t b_ = (b);                                              \\\n-       int32_t * a_ = (a);                                              \\\n+       const int32_t * a_ = (a);                                        \\\n        int32x4_t result;                                                \\\n        __asm__ (\"ld1 {%0.s}[%3],[%1]\"                                   \\\n                 : \"=w\"(result)                                          \\\n@@ -9055,7 +9055,7 @@ vld1q_f64 (float64_t * a)\n   __extension__                                                         \\\n     ({                                                                  \\\n        int64x2_t b_ = (b);                                              \\\n-       int64_t * a_ = (a);                                              \\\n+       const int64_t * a_ = (a);                                        \\\n        int64x2_t result;                                                \\\n        __asm__ (\"ld1 {%0.d}[%3],[%1]\"                                   \\\n                 : \"=w\"(result)                                          \\\n@@ -9068,7 +9068,7 @@ vld1q_f64 (float64_t * a)\n   __extension__                                                         \\\n     ({                                                                  \\\n        uint8x16_t b_ = (b);                                             \\\n-       uint8_t * a_ = (a);                                              \\\n+       const uint8_t * a_ = (a);                                        \\\n        uint8x16_t result;                                               \\\n        __asm__ (\"ld1 {%0.b}[%3],[%1]\"                                   \\\n                 : \"=w\"(result)                                          \\\n@@ -9081,7 +9081,7 @@ vld1q_f64 (float64_t * a)\n   __extension__                                                         \\\n     ({                                                                  \\\n        uint16x8_t b_ = (b);                                             \\\n-       uint16_t * a_ = (a);                                             \\\n+       const uint16_t * a_ = (a);                                       \\\n        uint16x8_t result;                                               \\\n        __asm__ (\"ld1 {%0.h}[%3],[%1]\"                                   \\\n                 : \"=w\"(result)                                          \\\n@@ -9094,7 +9094,7 @@ vld1q_f64 (float64_t * a)\n   __extension__                                                         \\\n     ({                                                                  \\\n        uint32x4_t b_ = (b);                                             \\\n-       uint32_t * a_ = (a);                                             \\\n+       const uint32_t * a_ = (a);                                       \\\n        uint32x4_t result;                                               \\\n        __asm__ (\"ld1 {%0.s}[%3],[%1]\"                                   \\\n                 : \"=w\"(result)                                          \\\n@@ -9107,7 +9107,7 @@ vld1q_f64 (float64_t * a)\n   __extension__                                                         \\\n     ({                                                                  \\\n        uint64x2_t b_ = (b);                                             \\\n-       uint64_t * a_ = (a);                                             \\\n+       const uint64_t * a_ = (a);                                       \\\n        uint64x2_t result;                                               \\\n        __asm__ (\"ld1 {%0.d}[%3],[%1]\"                                   \\\n                 : \"=w\"(result)                                          \\\n@@ -9117,7 +9117,7 @@ vld1q_f64 (float64_t * a)\n      })\n \n __extension__ static __inline poly8x16_t __attribute__ ((__always_inline__))\n-vld1q_p8 (poly8_t * a)\n+vld1q_p8 (const poly8_t * a)\n {\n   poly8x16_t result;\n   __asm__ (\"ld1 {%0.16b},[%1]\"\n@@ -9128,7 +9128,7 @@ vld1q_p8 (poly8_t * a)\n }\n \n __extension__ static __inline poly16x8_t __attribute__ ((__always_inline__))\n-vld1q_p16 (poly16_t * a)\n+vld1q_p16 (const poly16_t * a)\n {\n   poly16x8_t result;\n   __asm__ (\"ld1 {%0.8h},[%1]\"\n@@ -9139,7 +9139,7 @@ vld1q_p16 (poly16_t * a)\n }\n \n __extension__ static __inline int8x16_t __attribute__ ((__always_inline__))\n-vld1q_s8 (int8_t * a)\n+vld1q_s8 (const int8_t * a)\n {\n   int8x16_t result;\n   __asm__ (\"ld1 {%0.16b},[%1]\"\n@@ -9150,7 +9150,7 @@ vld1q_s8 (int8_t * a)\n }\n \n __extension__ static __inline int16x8_t __attribute__ ((__always_inline__))\n-vld1q_s16 (int16_t * a)\n+vld1q_s16 (const int16_t * a)\n {\n   int16x8_t result;\n   __asm__ (\"ld1 {%0.8h},[%1]\"\n@@ -9161,7 +9161,7 @@ vld1q_s16 (int16_t * a)\n }\n \n __extension__ static __inline int32x4_t __attribute__ ((__always_inline__))\n-vld1q_s32 (int32_t * a)\n+vld1q_s32 (const int32_t * a)\n {\n   int32x4_t result;\n   __asm__ (\"ld1 {%0.4s},[%1]\"\n@@ -9172,7 +9172,7 @@ vld1q_s32 (int32_t * a)\n }\n \n __extension__ static __inline int64x2_t __attribute__ ((__always_inline__))\n-vld1q_s64 (int64_t * a)\n+vld1q_s64 (const int64_t * a)\n {\n   int64x2_t result;\n   __asm__ (\"ld1 {%0.2d},[%1]\"\n@@ -9183,7 +9183,7 @@ vld1q_s64 (int64_t * a)\n }\n \n __extension__ static __inline uint8x16_t __attribute__ ((__always_inline__))\n-vld1q_u8 (uint8_t * a)\n+vld1q_u8 (const uint8_t * a)\n {\n   uint8x16_t result;\n   __asm__ (\"ld1 {%0.16b},[%1]\"\n@@ -9194,7 +9194,7 @@ vld1q_u8 (uint8_t * a)\n }\n \n __extension__ static __inline uint16x8_t __attribute__ ((__always_inline__))\n-vld1q_u16 (uint16_t * a)\n+vld1q_u16 (const uint16_t * a)\n {\n   uint16x8_t result;\n   __asm__ (\"ld1 {%0.8h},[%1]\"\n@@ -9205,7 +9205,7 @@ vld1q_u16 (uint16_t * a)\n }\n \n __extension__ static __inline uint32x4_t __attribute__ ((__always_inline__))\n-vld1q_u32 (uint32_t * a)\n+vld1q_u32 (const uint32_t * a)\n {\n   uint32x4_t result;\n   __asm__ (\"ld1 {%0.4s},[%1]\"\n@@ -9216,7 +9216,7 @@ vld1q_u32 (uint32_t * a)\n }\n \n __extension__ static __inline uint64x2_t __attribute__ ((__always_inline__))\n-vld1q_u64 (uint64_t * a)\n+vld1q_u64 (const uint64_t * a)\n {\n   uint64x2_t result;\n   __asm__ (\"ld1 {%0.2d},[%1]\""}]}