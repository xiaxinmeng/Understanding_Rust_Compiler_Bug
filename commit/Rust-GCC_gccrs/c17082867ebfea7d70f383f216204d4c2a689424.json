{"sha": "c17082867ebfea7d70f383f216204d4c2a689424", "node_id": "C_kwDOANBUbNoAKGMxNzA4Mjg2N2ViZmVhN2Q3MGYzODNmMjE2MjA0ZDRjMmE2ODk0MjQ", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2023-01-20T02:24:34Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-01-27T12:44:48Z"}, "message": "RISC-V: Add vle/vse C++ overloaded API intrinsic testcases\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.target/riscv/rvv/base/vle-1.C: New test.\n\t* g++.target/riscv/rvv/base/vle_tu-1.C: New test.\n\t* g++.target/riscv/rvv/base/vle_tum-1.C: New test.\n\t* g++.target/riscv/rvv/base/vle_tumu-1.C: New test.\n\t* g++.target/riscv/rvv/base/vse-1.C: New test.\n\t* g++.target/riscv/rvv/base/riscv_vector.h: New.", "tree": {"sha": "6c2556a73ffb66f17830c26637779494cf43989c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6c2556a73ffb66f17830c26637779494cf43989c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c17082867ebfea7d70f383f216204d4c2a689424", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c17082867ebfea7d70f383f216204d4c2a689424", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c17082867ebfea7d70f383f216204d4c2a689424", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c17082867ebfea7d70f383f216204d4c2a689424/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce34fa309e05e4c417fc4ff96e6ab9e8dd058836", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce34fa309e05e4c417fc4ff96e6ab9e8dd058836", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce34fa309e05e4c417fc4ff96e6ab9e8dd058836"}], "stats": {"total": 2076, "additions": 2076, "deletions": 0}, "files": [{"sha": "fbb4858fc867ab1bd45bae0d33a5a3be3371f7a6", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/riscv_vector.h", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c17082867ebfea7d70f383f216204d4c2a689424/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Friscv_vector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c17082867ebfea7d70f383f216204d4c2a689424/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Friscv_vector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Friscv_vector.h?ref=c17082867ebfea7d70f383f216204d4c2a689424", "patch": "@@ -0,0 +1,11 @@\n+/* Wrapper of riscv_vector.h, prevent riscv_vector.h including stdint.h from\n+   C library, that might cause problem on testing RV32 related testcase when\n+   we disable multilib.  */\n+#ifndef _RISCV_VECTOR_WRAP_H\n+\n+#define _GCC_WRAP_STDINT_H\n+#include \"stdint-gcc.h\"\n+#include_next <riscv_vector.h>\n+#define _RISCV_VECTOR_WRAP_H\n+\n+#endif"}, {"sha": "e06f62a8fb93bd2432fd418ed6738f0fdecd1525", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vle-1.C", "status": "added", "additions": 345, "deletions": 0, "changes": 345, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c17082867ebfea7d70f383f216204d4c2a689424/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvle-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c17082867ebfea7d70f383f216204d4c2a689424/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvle-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvle-1.C?ref=c17082867ebfea7d70f383f216204d4c2a689424", "patch": "@@ -0,0 +1,345 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t\n+test___riscv_vle8(vbool64_t mask,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8(mask,base,vl);\n+}\n+\n+vint8mf4_t\n+test___riscv_vle8(vbool32_t mask,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8(mask,base,vl);\n+}\n+\n+vint8mf2_t\n+test___riscv_vle8(vbool16_t mask,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8(mask,base,vl);\n+}\n+\n+vint8m1_t\n+test___riscv_vle8(vbool8_t mask,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8(mask,base,vl);\n+}\n+\n+vint8m2_t\n+test___riscv_vle8(vbool4_t mask,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8(mask,base,vl);\n+}\n+\n+vint8m4_t\n+test___riscv_vle8(vbool2_t mask,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8(mask,base,vl);\n+}\n+\n+vint8m8_t\n+test___riscv_vle8(vbool1_t mask,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8(mask,base,vl);\n+}\n+\n+vuint8mf8_t\n+test___riscv_vle8(vbool64_t mask,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8(mask,base,vl);\n+}\n+\n+vuint8mf4_t\n+test___riscv_vle8(vbool32_t mask,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8(mask,base,vl);\n+}\n+\n+vuint8mf2_t\n+test___riscv_vle8(vbool16_t mask,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8(mask,base,vl);\n+}\n+\n+vuint8m1_t\n+test___riscv_vle8(vbool8_t mask,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8(mask,base,vl);\n+}\n+\n+vuint8m2_t\n+test___riscv_vle8(vbool4_t mask,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8(mask,base,vl);\n+}\n+\n+vuint8m4_t\n+test___riscv_vle8(vbool2_t mask,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8(mask,base,vl);\n+}\n+\n+vuint8m8_t\n+test___riscv_vle8(vbool1_t mask,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8(mask,base,vl);\n+}\n+\n+vint16mf4_t\n+test___riscv_vle16(vbool64_t mask,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16(mask,base,vl);\n+}\n+\n+vint16mf2_t\n+test___riscv_vle16(vbool32_t mask,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16(mask,base,vl);\n+}\n+\n+vint16m1_t\n+test___riscv_vle16(vbool16_t mask,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16(mask,base,vl);\n+}\n+\n+vint16m2_t\n+test___riscv_vle16(vbool8_t mask,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16(mask,base,vl);\n+}\n+\n+vint16m4_t\n+test___riscv_vle16(vbool4_t mask,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16(mask,base,vl);\n+}\n+\n+vint16m8_t\n+test___riscv_vle16(vbool2_t mask,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16(mask,base,vl);\n+}\n+\n+vuint16mf4_t\n+test___riscv_vle16(vbool64_t mask,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16(mask,base,vl);\n+}\n+\n+vuint16mf2_t\n+test___riscv_vle16(vbool32_t mask,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16(mask,base,vl);\n+}\n+\n+vuint16m1_t\n+test___riscv_vle16(vbool16_t mask,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16(mask,base,vl);\n+}\n+\n+vuint16m2_t\n+test___riscv_vle16(vbool8_t mask,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16(mask,base,vl);\n+}\n+\n+vuint16m4_t\n+test___riscv_vle16(vbool4_t mask,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16(mask,base,vl);\n+}\n+\n+vuint16m8_t\n+test___riscv_vle16(vbool2_t mask,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16(mask,base,vl);\n+}\n+\n+vint32mf2_t\n+test___riscv_vle32(vbool64_t mask,int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32(mask,base,vl);\n+}\n+\n+vint32m1_t\n+test___riscv_vle32(vbool32_t mask,int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32(mask,base,vl);\n+}\n+\n+vint32m2_t\n+test___riscv_vle32(vbool16_t mask,int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32(mask,base,vl);\n+}\n+\n+vint32m4_t\n+test___riscv_vle32(vbool8_t mask,int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32(mask,base,vl);\n+}\n+\n+vint32m8_t\n+test___riscv_vle32(vbool4_t mask,int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32(mask,base,vl);\n+}\n+\n+vuint32mf2_t\n+test___riscv_vle32(vbool64_t mask,uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32(mask,base,vl);\n+}\n+\n+vuint32m1_t\n+test___riscv_vle32(vbool32_t mask,uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32(mask,base,vl);\n+}\n+\n+vuint32m2_t\n+test___riscv_vle32(vbool16_t mask,uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32(mask,base,vl);\n+}\n+\n+vuint32m4_t\n+test___riscv_vle32(vbool8_t mask,uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32(mask,base,vl);\n+}\n+\n+vuint32m8_t\n+test___riscv_vle32(vbool4_t mask,uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32(mask,base,vl);\n+}\n+\n+vfloat32mf2_t\n+test___riscv_vle32(vbool64_t mask,float* base,size_t vl)\n+{\n+  return __riscv_vle32(mask,base,vl);\n+}\n+\n+vfloat32m1_t\n+test___riscv_vle32(vbool32_t mask,float* base,size_t vl)\n+{\n+  return __riscv_vle32(mask,base,vl);\n+}\n+\n+vfloat32m2_t\n+test___riscv_vle32(vbool16_t mask,float* base,size_t vl)\n+{\n+  return __riscv_vle32(mask,base,vl);\n+}\n+\n+vfloat32m4_t\n+test___riscv_vle32(vbool8_t mask,float* base,size_t vl)\n+{\n+  return __riscv_vle32(mask,base,vl);\n+}\n+\n+vfloat32m8_t\n+test___riscv_vle32(vbool4_t mask,float* base,size_t vl)\n+{\n+  return __riscv_vle32(mask,base,vl);\n+}\n+\n+vint64m1_t\n+test___riscv_vle64(vbool64_t mask,int64_t* base,size_t vl)\n+{\n+  return __riscv_vle64(mask,base,vl);\n+}\n+\n+vint64m2_t\n+test___riscv_vle64(vbool32_t mask,int64_t* base,size_t vl)\n+{\n+  return __riscv_vle64(mask,base,vl);\n+}\n+\n+vint64m4_t\n+test___riscv_vle64(vbool16_t mask,int64_t* base,size_t vl)\n+{\n+  return __riscv_vle64(mask,base,vl);\n+}\n+\n+vint64m8_t\n+test___riscv_vle64(vbool8_t mask,int64_t* base,size_t vl)\n+{\n+  return __riscv_vle64(mask,base,vl);\n+}\n+\n+vuint64m1_t\n+test___riscv_vle64(vbool64_t mask,uint64_t* base,size_t vl)\n+{\n+  return __riscv_vle64(mask,base,vl);\n+}\n+\n+vuint64m2_t\n+test___riscv_vle64(vbool32_t mask,uint64_t* base,size_t vl)\n+{\n+  return __riscv_vle64(mask,base,vl);\n+}\n+\n+vuint64m4_t\n+test___riscv_vle64(vbool16_t mask,uint64_t* base,size_t vl)\n+{\n+  return __riscv_vle64(mask,base,vl);\n+}\n+\n+vuint64m8_t\n+test___riscv_vle64(vbool8_t mask,uint64_t* base,size_t vl)\n+{\n+  return __riscv_vle64(mask,base,vl);\n+}\n+\n+vfloat64m1_t\n+test___riscv_vle64(vbool64_t mask,double* base,size_t vl)\n+{\n+  return __riscv_vle64(mask,base,vl);\n+}\n+\n+vfloat64m2_t\n+test___riscv_vle64(vbool32_t mask,double* base,size_t vl)\n+{\n+  return __riscv_vle64(mask,base,vl);\n+}\n+\n+vfloat64m4_t\n+test___riscv_vle64(vbool16_t mask,double* base,size_t vl)\n+{\n+  return __riscv_vle64(mask,base,vl);\n+}\n+\n+vfloat64m8_t\n+test___riscv_vle64(vbool8_t mask,double* base,size_t vl)\n+{\n+  return __riscv_vle64(mask,base,vl);\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vle64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vle64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vle64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vle64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */"}, {"sha": "1408f98808100f83b032abf1b901765e2e73bff1", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vle_tu-1.C", "status": "added", "additions": 345, "deletions": 0, "changes": 345, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c17082867ebfea7d70f383f216204d4c2a689424/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvle_tu-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c17082867ebfea7d70f383f216204d4c2a689424/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvle_tu-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvle_tu-1.C?ref=c17082867ebfea7d70f383f216204d4c2a689424", "patch": "@@ -0,0 +1,345 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t\n+test___riscv_vle8_tu(vint8mf8_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_tu(merge,base,vl);\n+}\n+\n+vint8mf4_t\n+test___riscv_vle8_tu(vint8mf4_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_tu(merge,base,vl);\n+}\n+\n+vint8mf2_t\n+test___riscv_vle8_tu(vint8mf2_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_tu(merge,base,vl);\n+}\n+\n+vint8m1_t\n+test___riscv_vle8_tu(vint8m1_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_tu(merge,base,vl);\n+}\n+\n+vint8m2_t\n+test___riscv_vle8_tu(vint8m2_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_tu(merge,base,vl);\n+}\n+\n+vint8m4_t\n+test___riscv_vle8_tu(vint8m4_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_tu(merge,base,vl);\n+}\n+\n+vint8m8_t\n+test___riscv_vle8_tu(vint8m8_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_tu(merge,base,vl);\n+}\n+\n+vuint8mf8_t\n+test___riscv_vle8_tu(vuint8mf8_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_tu(merge,base,vl);\n+}\n+\n+vuint8mf4_t\n+test___riscv_vle8_tu(vuint8mf4_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_tu(merge,base,vl);\n+}\n+\n+vuint8mf2_t\n+test___riscv_vle8_tu(vuint8mf2_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_tu(merge,base,vl);\n+}\n+\n+vuint8m1_t\n+test___riscv_vle8_tu(vuint8m1_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_tu(merge,base,vl);\n+}\n+\n+vuint8m2_t\n+test___riscv_vle8_tu(vuint8m2_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_tu(merge,base,vl);\n+}\n+\n+vuint8m4_t\n+test___riscv_vle8_tu(vuint8m4_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_tu(merge,base,vl);\n+}\n+\n+vuint8m8_t\n+test___riscv_vle8_tu(vuint8m8_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_tu(merge,base,vl);\n+}\n+\n+vint16mf4_t\n+test___riscv_vle16_tu(vint16mf4_t merge,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_tu(merge,base,vl);\n+}\n+\n+vint16mf2_t\n+test___riscv_vle16_tu(vint16mf2_t merge,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_tu(merge,base,vl);\n+}\n+\n+vint16m1_t\n+test___riscv_vle16_tu(vint16m1_t merge,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_tu(merge,base,vl);\n+}\n+\n+vint16m2_t\n+test___riscv_vle16_tu(vint16m2_t merge,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_tu(merge,base,vl);\n+}\n+\n+vint16m4_t\n+test___riscv_vle16_tu(vint16m4_t merge,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_tu(merge,base,vl);\n+}\n+\n+vint16m8_t\n+test___riscv_vle16_tu(vint16m8_t merge,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_tu(merge,base,vl);\n+}\n+\n+vuint16mf4_t\n+test___riscv_vle16_tu(vuint16mf4_t merge,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_tu(merge,base,vl);\n+}\n+\n+vuint16mf2_t\n+test___riscv_vle16_tu(vuint16mf2_t merge,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_tu(merge,base,vl);\n+}\n+\n+vuint16m1_t\n+test___riscv_vle16_tu(vuint16m1_t merge,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_tu(merge,base,vl);\n+}\n+\n+vuint16m2_t\n+test___riscv_vle16_tu(vuint16m2_t merge,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_tu(merge,base,vl);\n+}\n+\n+vuint16m4_t\n+test___riscv_vle16_tu(vuint16m4_t merge,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_tu(merge,base,vl);\n+}\n+\n+vuint16m8_t\n+test___riscv_vle16_tu(vuint16m8_t merge,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_tu(merge,base,vl);\n+}\n+\n+vint32mf2_t\n+test___riscv_vle32_tu(vint32mf2_t merge,int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_tu(merge,base,vl);\n+}\n+\n+vint32m1_t\n+test___riscv_vle32_tu(vint32m1_t merge,int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_tu(merge,base,vl);\n+}\n+\n+vint32m2_t\n+test___riscv_vle32_tu(vint32m2_t merge,int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_tu(merge,base,vl);\n+}\n+\n+vint32m4_t\n+test___riscv_vle32_tu(vint32m4_t merge,int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_tu(merge,base,vl);\n+}\n+\n+vint32m8_t\n+test___riscv_vle32_tu(vint32m8_t merge,int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_tu(merge,base,vl);\n+}\n+\n+vuint32mf2_t\n+test___riscv_vle32_tu(vuint32mf2_t merge,uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_tu(merge,base,vl);\n+}\n+\n+vuint32m1_t\n+test___riscv_vle32_tu(vuint32m1_t merge,uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_tu(merge,base,vl);\n+}\n+\n+vuint32m2_t\n+test___riscv_vle32_tu(vuint32m2_t merge,uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_tu(merge,base,vl);\n+}\n+\n+vuint32m4_t\n+test___riscv_vle32_tu(vuint32m4_t merge,uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_tu(merge,base,vl);\n+}\n+\n+vuint32m8_t\n+test___riscv_vle32_tu(vuint32m8_t merge,uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_tu(merge,base,vl);\n+}\n+\n+vfloat32mf2_t\n+test___riscv_vle32_tu(vfloat32mf2_t merge,float* base,size_t vl)\n+{\n+  return __riscv_vle32_tu(merge,base,vl);\n+}\n+\n+vfloat32m1_t\n+test___riscv_vle32_tu(vfloat32m1_t merge,float* base,size_t vl)\n+{\n+  return __riscv_vle32_tu(merge,base,vl);\n+}\n+\n+vfloat32m2_t\n+test___riscv_vle32_tu(vfloat32m2_t merge,float* base,size_t vl)\n+{\n+  return __riscv_vle32_tu(merge,base,vl);\n+}\n+\n+vfloat32m4_t\n+test___riscv_vle32_tu(vfloat32m4_t merge,float* base,size_t vl)\n+{\n+  return __riscv_vle32_tu(merge,base,vl);\n+}\n+\n+vfloat32m8_t\n+test___riscv_vle32_tu(vfloat32m8_t merge,float* base,size_t vl)\n+{\n+  return __riscv_vle32_tu(merge,base,vl);\n+}\n+\n+vint64m1_t\n+test___riscv_vle64_tu(vint64m1_t merge,int64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_tu(merge,base,vl);\n+}\n+\n+vint64m2_t\n+test___riscv_vle64_tu(vint64m2_t merge,int64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_tu(merge,base,vl);\n+}\n+\n+vint64m4_t\n+test___riscv_vle64_tu(vint64m4_t merge,int64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_tu(merge,base,vl);\n+}\n+\n+vint64m8_t\n+test___riscv_vle64_tu(vint64m8_t merge,int64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_tu(merge,base,vl);\n+}\n+\n+vuint64m1_t\n+test___riscv_vle64_tu(vuint64m1_t merge,uint64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_tu(merge,base,vl);\n+}\n+\n+vuint64m2_t\n+test___riscv_vle64_tu(vuint64m2_t merge,uint64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_tu(merge,base,vl);\n+}\n+\n+vuint64m4_t\n+test___riscv_vle64_tu(vuint64m4_t merge,uint64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_tu(merge,base,vl);\n+}\n+\n+vuint64m8_t\n+test___riscv_vle64_tu(vuint64m8_t merge,uint64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_tu(merge,base,vl);\n+}\n+\n+vfloat64m1_t\n+test___riscv_vle64_tu(vfloat64m1_t merge,double* base,size_t vl)\n+{\n+  return __riscv_vle64_tu(merge,base,vl);\n+}\n+\n+vfloat64m2_t\n+test___riscv_vle64_tu(vfloat64m2_t merge,double* base,size_t vl)\n+{\n+  return __riscv_vle64_tu(merge,base,vl);\n+}\n+\n+vfloat64m4_t\n+test___riscv_vle64_tu(vfloat64m4_t merge,double* base,size_t vl)\n+{\n+  return __riscv_vle64_tu(merge,base,vl);\n+}\n+\n+vfloat64m8_t\n+test___riscv_vle64_tu(vfloat64m8_t merge,double* base,size_t vl)\n+{\n+  return __riscv_vle64_tu(merge,base,vl);\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vle64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vle64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vle64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vle64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 3 } } */"}, {"sha": "7449744663eb008231fe9425c6228230caa5e07d", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vle_tum-1.C", "status": "added", "additions": 345, "deletions": 0, "changes": 345, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c17082867ebfea7d70f383f216204d4c2a689424/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvle_tum-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c17082867ebfea7d70f383f216204d4c2a689424/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvle_tum-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvle_tum-1.C?ref=c17082867ebfea7d70f383f216204d4c2a689424", "patch": "@@ -0,0 +1,345 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t\n+test___riscv_vle8_tum(vbool64_t mask,vint8mf8_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_tum(mask,merge,base,vl);\n+}\n+\n+vint8mf4_t\n+test___riscv_vle8_tum(vbool32_t mask,vint8mf4_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_tum(mask,merge,base,vl);\n+}\n+\n+vint8mf2_t\n+test___riscv_vle8_tum(vbool16_t mask,vint8mf2_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_tum(mask,merge,base,vl);\n+}\n+\n+vint8m1_t\n+test___riscv_vle8_tum(vbool8_t mask,vint8m1_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_tum(mask,merge,base,vl);\n+}\n+\n+vint8m2_t\n+test___riscv_vle8_tum(vbool4_t mask,vint8m2_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_tum(mask,merge,base,vl);\n+}\n+\n+vint8m4_t\n+test___riscv_vle8_tum(vbool2_t mask,vint8m4_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_tum(mask,merge,base,vl);\n+}\n+\n+vint8m8_t\n+test___riscv_vle8_tum(vbool1_t mask,vint8m8_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_tum(mask,merge,base,vl);\n+}\n+\n+vuint8mf8_t\n+test___riscv_vle8_tum(vbool64_t mask,vuint8mf8_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_tum(mask,merge,base,vl);\n+}\n+\n+vuint8mf4_t\n+test___riscv_vle8_tum(vbool32_t mask,vuint8mf4_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_tum(mask,merge,base,vl);\n+}\n+\n+vuint8mf2_t\n+test___riscv_vle8_tum(vbool16_t mask,vuint8mf2_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_tum(mask,merge,base,vl);\n+}\n+\n+vuint8m1_t\n+test___riscv_vle8_tum(vbool8_t mask,vuint8m1_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_tum(mask,merge,base,vl);\n+}\n+\n+vuint8m2_t\n+test___riscv_vle8_tum(vbool4_t mask,vuint8m2_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_tum(mask,merge,base,vl);\n+}\n+\n+vuint8m4_t\n+test___riscv_vle8_tum(vbool2_t mask,vuint8m4_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_tum(mask,merge,base,vl);\n+}\n+\n+vuint8m8_t\n+test___riscv_vle8_tum(vbool1_t mask,vuint8m8_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_tum(mask,merge,base,vl);\n+}\n+\n+vint16mf4_t\n+test___riscv_vle16_tum(vbool64_t mask,vint16mf4_t merge,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_tum(mask,merge,base,vl);\n+}\n+\n+vint16mf2_t\n+test___riscv_vle16_tum(vbool32_t mask,vint16mf2_t merge,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_tum(mask,merge,base,vl);\n+}\n+\n+vint16m1_t\n+test___riscv_vle16_tum(vbool16_t mask,vint16m1_t merge,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_tum(mask,merge,base,vl);\n+}\n+\n+vint16m2_t\n+test___riscv_vle16_tum(vbool8_t mask,vint16m2_t merge,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_tum(mask,merge,base,vl);\n+}\n+\n+vint16m4_t\n+test___riscv_vle16_tum(vbool4_t mask,vint16m4_t merge,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_tum(mask,merge,base,vl);\n+}\n+\n+vint16m8_t\n+test___riscv_vle16_tum(vbool2_t mask,vint16m8_t merge,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_tum(mask,merge,base,vl);\n+}\n+\n+vuint16mf4_t\n+test___riscv_vle16_tum(vbool64_t mask,vuint16mf4_t merge,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_tum(mask,merge,base,vl);\n+}\n+\n+vuint16mf2_t\n+test___riscv_vle16_tum(vbool32_t mask,vuint16mf2_t merge,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_tum(mask,merge,base,vl);\n+}\n+\n+vuint16m1_t\n+test___riscv_vle16_tum(vbool16_t mask,vuint16m1_t merge,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_tum(mask,merge,base,vl);\n+}\n+\n+vuint16m2_t\n+test___riscv_vle16_tum(vbool8_t mask,vuint16m2_t merge,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_tum(mask,merge,base,vl);\n+}\n+\n+vuint16m4_t\n+test___riscv_vle16_tum(vbool4_t mask,vuint16m4_t merge,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_tum(mask,merge,base,vl);\n+}\n+\n+vuint16m8_t\n+test___riscv_vle16_tum(vbool2_t mask,vuint16m8_t merge,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_tum(mask,merge,base,vl);\n+}\n+\n+vint32mf2_t\n+test___riscv_vle32_tum(vbool64_t mask,vint32mf2_t merge,int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_tum(mask,merge,base,vl);\n+}\n+\n+vint32m1_t\n+test___riscv_vle32_tum(vbool32_t mask,vint32m1_t merge,int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_tum(mask,merge,base,vl);\n+}\n+\n+vint32m2_t\n+test___riscv_vle32_tum(vbool16_t mask,vint32m2_t merge,int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_tum(mask,merge,base,vl);\n+}\n+\n+vint32m4_t\n+test___riscv_vle32_tum(vbool8_t mask,vint32m4_t merge,int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_tum(mask,merge,base,vl);\n+}\n+\n+vint32m8_t\n+test___riscv_vle32_tum(vbool4_t mask,vint32m8_t merge,int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_tum(mask,merge,base,vl);\n+}\n+\n+vuint32mf2_t\n+test___riscv_vle32_tum(vbool64_t mask,vuint32mf2_t merge,uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_tum(mask,merge,base,vl);\n+}\n+\n+vuint32m1_t\n+test___riscv_vle32_tum(vbool32_t mask,vuint32m1_t merge,uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_tum(mask,merge,base,vl);\n+}\n+\n+vuint32m2_t\n+test___riscv_vle32_tum(vbool16_t mask,vuint32m2_t merge,uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_tum(mask,merge,base,vl);\n+}\n+\n+vuint32m4_t\n+test___riscv_vle32_tum(vbool8_t mask,vuint32m4_t merge,uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_tum(mask,merge,base,vl);\n+}\n+\n+vuint32m8_t\n+test___riscv_vle32_tum(vbool4_t mask,vuint32m8_t merge,uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_tum(mask,merge,base,vl);\n+}\n+\n+vfloat32mf2_t\n+test___riscv_vle32_tum(vbool64_t mask,vfloat32mf2_t merge,float* base,size_t vl)\n+{\n+  return __riscv_vle32_tum(mask,merge,base,vl);\n+}\n+\n+vfloat32m1_t\n+test___riscv_vle32_tum(vbool32_t mask,vfloat32m1_t merge,float* base,size_t vl)\n+{\n+  return __riscv_vle32_tum(mask,merge,base,vl);\n+}\n+\n+vfloat32m2_t\n+test___riscv_vle32_tum(vbool16_t mask,vfloat32m2_t merge,float* base,size_t vl)\n+{\n+  return __riscv_vle32_tum(mask,merge,base,vl);\n+}\n+\n+vfloat32m4_t\n+test___riscv_vle32_tum(vbool8_t mask,vfloat32m4_t merge,float* base,size_t vl)\n+{\n+  return __riscv_vle32_tum(mask,merge,base,vl);\n+}\n+\n+vfloat32m8_t\n+test___riscv_vle32_tum(vbool4_t mask,vfloat32m8_t merge,float* base,size_t vl)\n+{\n+  return __riscv_vle32_tum(mask,merge,base,vl);\n+}\n+\n+vint64m1_t\n+test___riscv_vle64_tum(vbool64_t mask,vint64m1_t merge,int64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_tum(mask,merge,base,vl);\n+}\n+\n+vint64m2_t\n+test___riscv_vle64_tum(vbool32_t mask,vint64m2_t merge,int64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_tum(mask,merge,base,vl);\n+}\n+\n+vint64m4_t\n+test___riscv_vle64_tum(vbool16_t mask,vint64m4_t merge,int64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_tum(mask,merge,base,vl);\n+}\n+\n+vint64m8_t\n+test___riscv_vle64_tum(vbool8_t mask,vint64m8_t merge,int64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_tum(mask,merge,base,vl);\n+}\n+\n+vuint64m1_t\n+test___riscv_vle64_tum(vbool64_t mask,vuint64m1_t merge,uint64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_tum(mask,merge,base,vl);\n+}\n+\n+vuint64m2_t\n+test___riscv_vle64_tum(vbool32_t mask,vuint64m2_t merge,uint64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_tum(mask,merge,base,vl);\n+}\n+\n+vuint64m4_t\n+test___riscv_vle64_tum(vbool16_t mask,vuint64m4_t merge,uint64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_tum(mask,merge,base,vl);\n+}\n+\n+vuint64m8_t\n+test___riscv_vle64_tum(vbool8_t mask,vuint64m8_t merge,uint64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_tum(mask,merge,base,vl);\n+}\n+\n+vfloat64m1_t\n+test___riscv_vle64_tum(vbool64_t mask,vfloat64m1_t merge,double* base,size_t vl)\n+{\n+  return __riscv_vle64_tum(mask,merge,base,vl);\n+}\n+\n+vfloat64m2_t\n+test___riscv_vle64_tum(vbool32_t mask,vfloat64m2_t merge,double* base,size_t vl)\n+{\n+  return __riscv_vle64_tum(mask,merge,base,vl);\n+}\n+\n+vfloat64m4_t\n+test___riscv_vle64_tum(vbool16_t mask,vfloat64m4_t merge,double* base,size_t vl)\n+{\n+  return __riscv_vle64_tum(mask,merge,base,vl);\n+}\n+\n+vfloat64m8_t\n+test___riscv_vle64_tum(vbool8_t mask,vfloat64m8_t merge,double* base,size_t vl)\n+{\n+  return __riscv_vle64_tum(mask,merge,base,vl);\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vle64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vle64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vle64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vle64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */"}, {"sha": "a9a260357d3f78dfd697889f36c354d7da9916fb", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vle_tumu-1.C", "status": "added", "additions": 345, "deletions": 0, "changes": 345, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c17082867ebfea7d70f383f216204d4c2a689424/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvle_tumu-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c17082867ebfea7d70f383f216204d4c2a689424/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvle_tumu-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvle_tumu-1.C?ref=c17082867ebfea7d70f383f216204d4c2a689424", "patch": "@@ -0,0 +1,345 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t\n+test___riscv_vle8_tumu(vbool64_t mask,vint8mf8_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_tumu(mask,merge,base,vl);\n+}\n+\n+vint8mf4_t\n+test___riscv_vle8_tumu(vbool32_t mask,vint8mf4_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_tumu(mask,merge,base,vl);\n+}\n+\n+vint8mf2_t\n+test___riscv_vle8_tumu(vbool16_t mask,vint8mf2_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_tumu(mask,merge,base,vl);\n+}\n+\n+vint8m1_t\n+test___riscv_vle8_tumu(vbool8_t mask,vint8m1_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_tumu(mask,merge,base,vl);\n+}\n+\n+vint8m2_t\n+test___riscv_vle8_tumu(vbool4_t mask,vint8m2_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_tumu(mask,merge,base,vl);\n+}\n+\n+vint8m4_t\n+test___riscv_vle8_tumu(vbool2_t mask,vint8m4_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_tumu(mask,merge,base,vl);\n+}\n+\n+vint8m8_t\n+test___riscv_vle8_tumu(vbool1_t mask,vint8m8_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_tumu(mask,merge,base,vl);\n+}\n+\n+vuint8mf8_t\n+test___riscv_vle8_tumu(vbool64_t mask,vuint8mf8_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_tumu(mask,merge,base,vl);\n+}\n+\n+vuint8mf4_t\n+test___riscv_vle8_tumu(vbool32_t mask,vuint8mf4_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_tumu(mask,merge,base,vl);\n+}\n+\n+vuint8mf2_t\n+test___riscv_vle8_tumu(vbool16_t mask,vuint8mf2_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_tumu(mask,merge,base,vl);\n+}\n+\n+vuint8m1_t\n+test___riscv_vle8_tumu(vbool8_t mask,vuint8m1_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_tumu(mask,merge,base,vl);\n+}\n+\n+vuint8m2_t\n+test___riscv_vle8_tumu(vbool4_t mask,vuint8m2_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_tumu(mask,merge,base,vl);\n+}\n+\n+vuint8m4_t\n+test___riscv_vle8_tumu(vbool2_t mask,vuint8m4_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_tumu(mask,merge,base,vl);\n+}\n+\n+vuint8m8_t\n+test___riscv_vle8_tumu(vbool1_t mask,vuint8m8_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_tumu(mask,merge,base,vl);\n+}\n+\n+vint16mf4_t\n+test___riscv_vle16_tumu(vbool64_t mask,vint16mf4_t merge,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_tumu(mask,merge,base,vl);\n+}\n+\n+vint16mf2_t\n+test___riscv_vle16_tumu(vbool32_t mask,vint16mf2_t merge,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_tumu(mask,merge,base,vl);\n+}\n+\n+vint16m1_t\n+test___riscv_vle16_tumu(vbool16_t mask,vint16m1_t merge,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_tumu(mask,merge,base,vl);\n+}\n+\n+vint16m2_t\n+test___riscv_vle16_tumu(vbool8_t mask,vint16m2_t merge,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_tumu(mask,merge,base,vl);\n+}\n+\n+vint16m4_t\n+test___riscv_vle16_tumu(vbool4_t mask,vint16m4_t merge,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_tumu(mask,merge,base,vl);\n+}\n+\n+vint16m8_t\n+test___riscv_vle16_tumu(vbool2_t mask,vint16m8_t merge,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_tumu(mask,merge,base,vl);\n+}\n+\n+vuint16mf4_t\n+test___riscv_vle16_tumu(vbool64_t mask,vuint16mf4_t merge,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_tumu(mask,merge,base,vl);\n+}\n+\n+vuint16mf2_t\n+test___riscv_vle16_tumu(vbool32_t mask,vuint16mf2_t merge,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_tumu(mask,merge,base,vl);\n+}\n+\n+vuint16m1_t\n+test___riscv_vle16_tumu(vbool16_t mask,vuint16m1_t merge,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_tumu(mask,merge,base,vl);\n+}\n+\n+vuint16m2_t\n+test___riscv_vle16_tumu(vbool8_t mask,vuint16m2_t merge,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_tumu(mask,merge,base,vl);\n+}\n+\n+vuint16m4_t\n+test___riscv_vle16_tumu(vbool4_t mask,vuint16m4_t merge,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_tumu(mask,merge,base,vl);\n+}\n+\n+vuint16m8_t\n+test___riscv_vle16_tumu(vbool2_t mask,vuint16m8_t merge,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_tumu(mask,merge,base,vl);\n+}\n+\n+vint32mf2_t\n+test___riscv_vle32_tumu(vbool64_t mask,vint32mf2_t merge,int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_tumu(mask,merge,base,vl);\n+}\n+\n+vint32m1_t\n+test___riscv_vle32_tumu(vbool32_t mask,vint32m1_t merge,int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_tumu(mask,merge,base,vl);\n+}\n+\n+vint32m2_t\n+test___riscv_vle32_tumu(vbool16_t mask,vint32m2_t merge,int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_tumu(mask,merge,base,vl);\n+}\n+\n+vint32m4_t\n+test___riscv_vle32_tumu(vbool8_t mask,vint32m4_t merge,int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_tumu(mask,merge,base,vl);\n+}\n+\n+vint32m8_t\n+test___riscv_vle32_tumu(vbool4_t mask,vint32m8_t merge,int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_tumu(mask,merge,base,vl);\n+}\n+\n+vuint32mf2_t\n+test___riscv_vle32_tumu(vbool64_t mask,vuint32mf2_t merge,uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_tumu(mask,merge,base,vl);\n+}\n+\n+vuint32m1_t\n+test___riscv_vle32_tumu(vbool32_t mask,vuint32m1_t merge,uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_tumu(mask,merge,base,vl);\n+}\n+\n+vuint32m2_t\n+test___riscv_vle32_tumu(vbool16_t mask,vuint32m2_t merge,uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_tumu(mask,merge,base,vl);\n+}\n+\n+vuint32m4_t\n+test___riscv_vle32_tumu(vbool8_t mask,vuint32m4_t merge,uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_tumu(mask,merge,base,vl);\n+}\n+\n+vuint32m8_t\n+test___riscv_vle32_tumu(vbool4_t mask,vuint32m8_t merge,uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_tumu(mask,merge,base,vl);\n+}\n+\n+vfloat32mf2_t\n+test___riscv_vle32_tumu(vbool64_t mask,vfloat32mf2_t merge,float* base,size_t vl)\n+{\n+  return __riscv_vle32_tumu(mask,merge,base,vl);\n+}\n+\n+vfloat32m1_t\n+test___riscv_vle32_tumu(vbool32_t mask,vfloat32m1_t merge,float* base,size_t vl)\n+{\n+  return __riscv_vle32_tumu(mask,merge,base,vl);\n+}\n+\n+vfloat32m2_t\n+test___riscv_vle32_tumu(vbool16_t mask,vfloat32m2_t merge,float* base,size_t vl)\n+{\n+  return __riscv_vle32_tumu(mask,merge,base,vl);\n+}\n+\n+vfloat32m4_t\n+test___riscv_vle32_tumu(vbool8_t mask,vfloat32m4_t merge,float* base,size_t vl)\n+{\n+  return __riscv_vle32_tumu(mask,merge,base,vl);\n+}\n+\n+vfloat32m8_t\n+test___riscv_vle32_tumu(vbool4_t mask,vfloat32m8_t merge,float* base,size_t vl)\n+{\n+  return __riscv_vle32_tumu(mask,merge,base,vl);\n+}\n+\n+vint64m1_t\n+test___riscv_vle64_tumu(vbool64_t mask,vint64m1_t merge,int64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_tumu(mask,merge,base,vl);\n+}\n+\n+vint64m2_t\n+test___riscv_vle64_tumu(vbool32_t mask,vint64m2_t merge,int64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_tumu(mask,merge,base,vl);\n+}\n+\n+vint64m4_t\n+test___riscv_vle64_tumu(vbool16_t mask,vint64m4_t merge,int64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_tumu(mask,merge,base,vl);\n+}\n+\n+vint64m8_t\n+test___riscv_vle64_tumu(vbool8_t mask,vint64m8_t merge,int64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_tumu(mask,merge,base,vl);\n+}\n+\n+vuint64m1_t\n+test___riscv_vle64_tumu(vbool64_t mask,vuint64m1_t merge,uint64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_tumu(mask,merge,base,vl);\n+}\n+\n+vuint64m2_t\n+test___riscv_vle64_tumu(vbool32_t mask,vuint64m2_t merge,uint64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_tumu(mask,merge,base,vl);\n+}\n+\n+vuint64m4_t\n+test___riscv_vle64_tumu(vbool16_t mask,vuint64m4_t merge,uint64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_tumu(mask,merge,base,vl);\n+}\n+\n+vuint64m8_t\n+test___riscv_vle64_tumu(vbool8_t mask,vuint64m8_t merge,uint64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_tumu(mask,merge,base,vl);\n+}\n+\n+vfloat64m1_t\n+test___riscv_vle64_tumu(vbool64_t mask,vfloat64m1_t merge,double* base,size_t vl)\n+{\n+  return __riscv_vle64_tumu(mask,merge,base,vl);\n+}\n+\n+vfloat64m2_t\n+test___riscv_vle64_tumu(vbool32_t mask,vfloat64m2_t merge,double* base,size_t vl)\n+{\n+  return __riscv_vle64_tumu(mask,merge,base,vl);\n+}\n+\n+vfloat64m4_t\n+test___riscv_vle64_tumu(vbool16_t mask,vfloat64m4_t merge,double* base,size_t vl)\n+{\n+  return __riscv_vle64_tumu(mask,merge,base,vl);\n+}\n+\n+vfloat64m8_t\n+test___riscv_vle64_tumu(vbool8_t mask,vfloat64m8_t merge,double* base,size_t vl)\n+{\n+  return __riscv_vle64_tumu(mask,merge,base,vl);\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*mu\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*mu\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*mu\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*mu\\s+vle64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*mu\\s+vle64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*mu\\s+vle64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*mu\\s+vle64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */"}, {"sha": "8b969dc718ff82c2be27e6334f91a33d75f865ff", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vse-1.C", "status": "added", "additions": 685, "deletions": 0, "changes": 685, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c17082867ebfea7d70f383f216204d4c2a689424/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvse-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c17082867ebfea7d70f383f216204d4c2a689424/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvse-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvse-1.C?ref=c17082867ebfea7d70f383f216204d4c2a689424", "patch": "@@ -0,0 +1,685 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void\n+test___riscv_vse8(int8_t* base,vint8mf8_t value,size_t vl)\n+{\n+  __riscv_vse8(base,value,vl);\n+}\n+\n+void\n+test___riscv_vse8(int8_t* base,vint8mf4_t value,size_t vl)\n+{\n+  __riscv_vse8(base,value,vl);\n+}\n+\n+void\n+test___riscv_vse8(int8_t* base,vint8mf2_t value,size_t vl)\n+{\n+  __riscv_vse8(base,value,vl);\n+}\n+\n+void\n+test___riscv_vse8(int8_t* base,vint8m1_t value,size_t vl)\n+{\n+  __riscv_vse8(base,value,vl);\n+}\n+\n+void\n+test___riscv_vse8(int8_t* base,vint8m2_t value,size_t vl)\n+{\n+  __riscv_vse8(base,value,vl);\n+}\n+\n+void\n+test___riscv_vse8(int8_t* base,vint8m4_t value,size_t vl)\n+{\n+  __riscv_vse8(base,value,vl);\n+}\n+\n+void\n+test___riscv_vse8(int8_t* base,vint8m8_t value,size_t vl)\n+{\n+  __riscv_vse8(base,value,vl);\n+}\n+\n+void\n+test___riscv_vse8(uint8_t* base,vuint8mf8_t value,size_t vl)\n+{\n+  __riscv_vse8(base,value,vl);\n+}\n+\n+void\n+test___riscv_vse8(uint8_t* base,vuint8mf4_t value,size_t vl)\n+{\n+  __riscv_vse8(base,value,vl);\n+}\n+\n+void\n+test___riscv_vse8(uint8_t* base,vuint8mf2_t value,size_t vl)\n+{\n+  __riscv_vse8(base,value,vl);\n+}\n+\n+void\n+test___riscv_vse8(uint8_t* base,vuint8m1_t value,size_t vl)\n+{\n+  __riscv_vse8(base,value,vl);\n+}\n+\n+void\n+test___riscv_vse8(uint8_t* base,vuint8m2_t value,size_t vl)\n+{\n+  __riscv_vse8(base,value,vl);\n+}\n+\n+void\n+test___riscv_vse8(uint8_t* base,vuint8m4_t value,size_t vl)\n+{\n+  __riscv_vse8(base,value,vl);\n+}\n+\n+void\n+test___riscv_vse8(uint8_t* base,vuint8m8_t value,size_t vl)\n+{\n+  __riscv_vse8(base,value,vl);\n+}\n+\n+void\n+test___riscv_vse8(vbool64_t mask,int8_t* base,vint8mf8_t value,size_t vl)\n+{\n+  __riscv_vse8(mask,base,value,vl);\n+}\n+\n+void\n+test___riscv_vse8(vbool32_t mask,int8_t* base,vint8mf4_t value,size_t vl)\n+{\n+  __riscv_vse8(mask,base,value,vl);\n+}\n+\n+void\n+test___riscv_vse8(vbool16_t mask,int8_t* base,vint8mf2_t value,size_t vl)\n+{\n+  __riscv_vse8(mask,base,value,vl);\n+}\n+\n+void\n+test___riscv_vse8(vbool8_t mask,int8_t* base,vint8m1_t value,size_t vl)\n+{\n+  __riscv_vse8(mask,base,value,vl);\n+}\n+\n+void\n+test___riscv_vse8(vbool4_t mask,int8_t* base,vint8m2_t value,size_t vl)\n+{\n+  __riscv_vse8(mask,base,value,vl);\n+}\n+\n+void\n+test___riscv_vse8(vbool2_t mask,int8_t* base,vint8m4_t value,size_t vl)\n+{\n+  __riscv_vse8(mask,base,value,vl);\n+}\n+\n+void\n+test___riscv_vse8(vbool1_t mask,int8_t* base,vint8m8_t value,size_t vl)\n+{\n+  __riscv_vse8(mask,base,value,vl);\n+}\n+\n+void\n+test___riscv_vse8(vbool64_t mask,uint8_t* base,vuint8mf8_t value,size_t vl)\n+{\n+  __riscv_vse8(mask,base,value,vl);\n+}\n+\n+void\n+test___riscv_vse8(vbool32_t mask,uint8_t* base,vuint8mf4_t value,size_t vl)\n+{\n+  __riscv_vse8(mask,base,value,vl);\n+}\n+\n+void\n+test___riscv_vse8(vbool16_t mask,uint8_t* base,vuint8mf2_t value,size_t vl)\n+{\n+  __riscv_vse8(mask,base,value,vl);\n+}\n+\n+void\n+test___riscv_vse8(vbool8_t mask,uint8_t* base,vuint8m1_t value,size_t vl)\n+{\n+  __riscv_vse8(mask,base,value,vl);\n+}\n+\n+void\n+test___riscv_vse8(vbool4_t mask,uint8_t* base,vuint8m2_t value,size_t vl)\n+{\n+  __riscv_vse8(mask,base,value,vl);\n+}\n+\n+void\n+test___riscv_vse8(vbool2_t mask,uint8_t* base,vuint8m4_t value,size_t vl)\n+{\n+  __riscv_vse8(mask,base,value,vl);\n+}\n+\n+void\n+test___riscv_vse8(vbool1_t mask,uint8_t* base,vuint8m8_t value,size_t vl)\n+{\n+  __riscv_vse8(mask,base,value,vl);\n+}\n+\n+void\n+test___riscv_vse16(int16_t* base,vint16mf4_t value,size_t vl)\n+{\n+  __riscv_vse16(base,value,vl);\n+}\n+\n+void\n+test___riscv_vse16(int16_t* base,vint16mf2_t value,size_t vl)\n+{\n+  __riscv_vse16(base,value,vl);\n+}\n+\n+void\n+test___riscv_vse16(int16_t* base,vint16m1_t value,size_t vl)\n+{\n+  __riscv_vse16(base,value,vl);\n+}\n+\n+void\n+test___riscv_vse16(int16_t* base,vint16m2_t value,size_t vl)\n+{\n+  __riscv_vse16(base,value,vl);\n+}\n+\n+void\n+test___riscv_vse16(int16_t* base,vint16m4_t value,size_t vl)\n+{\n+  __riscv_vse16(base,value,vl);\n+}\n+\n+void\n+test___riscv_vse16(int16_t* base,vint16m8_t value,size_t vl)\n+{\n+  __riscv_vse16(base,value,vl);\n+}\n+\n+void\n+test___riscv_vse16(uint16_t* base,vuint16mf4_t value,size_t vl)\n+{\n+  __riscv_vse16(base,value,vl);\n+}\n+\n+void\n+test___riscv_vse16(uint16_t* base,vuint16mf2_t value,size_t vl)\n+{\n+  __riscv_vse16(base,value,vl);\n+}\n+\n+void\n+test___riscv_vse16(uint16_t* base,vuint16m1_t value,size_t vl)\n+{\n+  __riscv_vse16(base,value,vl);\n+}\n+\n+void\n+test___riscv_vse16(uint16_t* base,vuint16m2_t value,size_t vl)\n+{\n+  __riscv_vse16(base,value,vl);\n+}\n+\n+void\n+test___riscv_vse16(uint16_t* base,vuint16m4_t value,size_t vl)\n+{\n+  __riscv_vse16(base,value,vl);\n+}\n+\n+void\n+test___riscv_vse16(uint16_t* base,vuint16m8_t value,size_t vl)\n+{\n+  __riscv_vse16(base,value,vl);\n+}\n+\n+void\n+test___riscv_vse16(vbool64_t mask,int16_t* base,vint16mf4_t value,size_t vl)\n+{\n+  __riscv_vse16(mask,base,value,vl);\n+}\n+\n+void\n+test___riscv_vse16(vbool32_t mask,int16_t* base,vint16mf2_t value,size_t vl)\n+{\n+  __riscv_vse16(mask,base,value,vl);\n+}\n+\n+void\n+test___riscv_vse16(vbool16_t mask,int16_t* base,vint16m1_t value,size_t vl)\n+{\n+  __riscv_vse16(mask,base,value,vl);\n+}\n+\n+void\n+test___riscv_vse16(vbool8_t mask,int16_t* base,vint16m2_t value,size_t vl)\n+{\n+  __riscv_vse16(mask,base,value,vl);\n+}\n+\n+void\n+test___riscv_vse16(vbool4_t mask,int16_t* base,vint16m4_t value,size_t vl)\n+{\n+  __riscv_vse16(mask,base,value,vl);\n+}\n+\n+void\n+test___riscv_vse16(vbool2_t mask,int16_t* base,vint16m8_t value,size_t vl)\n+{\n+  __riscv_vse16(mask,base,value,vl);\n+}\n+\n+void\n+test___riscv_vse16(vbool64_t mask,uint16_t* base,vuint16mf4_t value,size_t vl)\n+{\n+  __riscv_vse16(mask,base,value,vl);\n+}\n+\n+void\n+test___riscv_vse16(vbool32_t mask,uint16_t* base,vuint16mf2_t value,size_t vl)\n+{\n+  __riscv_vse16(mask,base,value,vl);\n+}\n+\n+void\n+test___riscv_vse16(vbool16_t mask,uint16_t* base,vuint16m1_t value,size_t vl)\n+{\n+  __riscv_vse16(mask,base,value,vl);\n+}\n+\n+void\n+test___riscv_vse16(vbool8_t mask,uint16_t* base,vuint16m2_t value,size_t vl)\n+{\n+  __riscv_vse16(mask,base,value,vl);\n+}\n+\n+void\n+test___riscv_vse16(vbool4_t mask,uint16_t* base,vuint16m4_t value,size_t vl)\n+{\n+  __riscv_vse16(mask,base,value,vl);\n+}\n+\n+void\n+test___riscv_vse16(vbool2_t mask,uint16_t* base,vuint16m8_t value,size_t vl)\n+{\n+  __riscv_vse16(mask,base,value,vl);\n+}\n+\n+void\n+test___riscv_vse32(int32_t* base,vint32mf2_t value,size_t vl)\n+{\n+  __riscv_vse32(base,value,vl);\n+}\n+\n+void\n+test___riscv_vse32(int32_t* base,vint32m1_t value,size_t vl)\n+{\n+  __riscv_vse32(base,value,vl);\n+}\n+\n+void\n+test___riscv_vse32(int32_t* base,vint32m2_t value,size_t vl)\n+{\n+  __riscv_vse32(base,value,vl);\n+}\n+\n+void\n+test___riscv_vse32(int32_t* base,vint32m4_t value,size_t vl)\n+{\n+  __riscv_vse32(base,value,vl);\n+}\n+\n+void\n+test___riscv_vse32(int32_t* base,vint32m8_t value,size_t vl)\n+{\n+  __riscv_vse32(base,value,vl);\n+}\n+\n+void\n+test___riscv_vse32(uint32_t* base,vuint32mf2_t value,size_t vl)\n+{\n+  __riscv_vse32(base,value,vl);\n+}\n+\n+void\n+test___riscv_vse32(uint32_t* base,vuint32m1_t value,size_t vl)\n+{\n+  __riscv_vse32(base,value,vl);\n+}\n+\n+void\n+test___riscv_vse32(uint32_t* base,vuint32m2_t value,size_t vl)\n+{\n+  __riscv_vse32(base,value,vl);\n+}\n+\n+void\n+test___riscv_vse32(uint32_t* base,vuint32m4_t value,size_t vl)\n+{\n+  __riscv_vse32(base,value,vl);\n+}\n+\n+void\n+test___riscv_vse32(uint32_t* base,vuint32m8_t value,size_t vl)\n+{\n+  __riscv_vse32(base,value,vl);\n+}\n+\n+void\n+test___riscv_vse32(float* base,vfloat32mf2_t value,size_t vl)\n+{\n+  __riscv_vse32(base,value,vl);\n+}\n+\n+void\n+test___riscv_vse32(float* base,vfloat32m1_t value,size_t vl)\n+{\n+  __riscv_vse32(base,value,vl);\n+}\n+\n+void\n+test___riscv_vse32(float* base,vfloat32m2_t value,size_t vl)\n+{\n+  __riscv_vse32(base,value,vl);\n+}\n+\n+void\n+test___riscv_vse32(float* base,vfloat32m4_t value,size_t vl)\n+{\n+  __riscv_vse32(base,value,vl);\n+}\n+\n+void\n+test___riscv_vse32(float* base,vfloat32m8_t value,size_t vl)\n+{\n+  __riscv_vse32(base,value,vl);\n+}\n+\n+void\n+test___riscv_vse32(vbool64_t mask,int32_t* base,vint32mf2_t value,size_t vl)\n+{\n+  __riscv_vse32(mask,base,value,vl);\n+}\n+\n+void\n+test___riscv_vse32(vbool32_t mask,int32_t* base,vint32m1_t value,size_t vl)\n+{\n+  __riscv_vse32(mask,base,value,vl);\n+}\n+\n+void\n+test___riscv_vse32(vbool16_t mask,int32_t* base,vint32m2_t value,size_t vl)\n+{\n+  __riscv_vse32(mask,base,value,vl);\n+}\n+\n+void\n+test___riscv_vse32(vbool8_t mask,int32_t* base,vint32m4_t value,size_t vl)\n+{\n+  __riscv_vse32(mask,base,value,vl);\n+}\n+\n+void\n+test___riscv_vse32(vbool4_t mask,int32_t* base,vint32m8_t value,size_t vl)\n+{\n+  __riscv_vse32(mask,base,value,vl);\n+}\n+\n+void\n+test___riscv_vse32(vbool64_t mask,uint32_t* base,vuint32mf2_t value,size_t vl)\n+{\n+  __riscv_vse32(mask,base,value,vl);\n+}\n+\n+void\n+test___riscv_vse32(vbool32_t mask,uint32_t* base,vuint32m1_t value,size_t vl)\n+{\n+  __riscv_vse32(mask,base,value,vl);\n+}\n+\n+void\n+test___riscv_vse32(vbool16_t mask,uint32_t* base,vuint32m2_t value,size_t vl)\n+{\n+  __riscv_vse32(mask,base,value,vl);\n+}\n+\n+void\n+test___riscv_vse32(vbool8_t mask,uint32_t* base,vuint32m4_t value,size_t vl)\n+{\n+  __riscv_vse32(mask,base,value,vl);\n+}\n+\n+void\n+test___riscv_vse32(vbool4_t mask,uint32_t* base,vuint32m8_t value,size_t vl)\n+{\n+  __riscv_vse32(mask,base,value,vl);\n+}\n+\n+void\n+test___riscv_vse32(vbool64_t mask,float* base,vfloat32mf2_t value,size_t vl)\n+{\n+  __riscv_vse32(mask,base,value,vl);\n+}\n+\n+void\n+test___riscv_vse32(vbool32_t mask,float* base,vfloat32m1_t value,size_t vl)\n+{\n+  __riscv_vse32(mask,base,value,vl);\n+}\n+\n+void\n+test___riscv_vse32(vbool16_t mask,float* base,vfloat32m2_t value,size_t vl)\n+{\n+  __riscv_vse32(mask,base,value,vl);\n+}\n+\n+void\n+test___riscv_vse32(vbool8_t mask,float* base,vfloat32m4_t value,size_t vl)\n+{\n+  __riscv_vse32(mask,base,value,vl);\n+}\n+\n+void\n+test___riscv_vse32(vbool4_t mask,float* base,vfloat32m8_t value,size_t vl)\n+{\n+  __riscv_vse32(mask,base,value,vl);\n+}\n+\n+void\n+test___riscv_vse64(int64_t* base,vint64m1_t value,size_t vl)\n+{\n+  __riscv_vse64(base,value,vl);\n+}\n+\n+void\n+test___riscv_vse64(int64_t* base,vint64m2_t value,size_t vl)\n+{\n+  __riscv_vse64(base,value,vl);\n+}\n+\n+void\n+test___riscv_vse64(int64_t* base,vint64m4_t value,size_t vl)\n+{\n+  __riscv_vse64(base,value,vl);\n+}\n+\n+void\n+test___riscv_vse64(int64_t* base,vint64m8_t value,size_t vl)\n+{\n+  __riscv_vse64(base,value,vl);\n+}\n+\n+void\n+test___riscv_vse64(uint64_t* base,vuint64m1_t value,size_t vl)\n+{\n+  __riscv_vse64(base,value,vl);\n+}\n+\n+void\n+test___riscv_vse64(uint64_t* base,vuint64m2_t value,size_t vl)\n+{\n+  __riscv_vse64(base,value,vl);\n+}\n+\n+void\n+test___riscv_vse64(uint64_t* base,vuint64m4_t value,size_t vl)\n+{\n+  __riscv_vse64(base,value,vl);\n+}\n+\n+void\n+test___riscv_vse64(uint64_t* base,vuint64m8_t value,size_t vl)\n+{\n+  __riscv_vse64(base,value,vl);\n+}\n+\n+void\n+test___riscv_vse64(double* base,vfloat64m1_t value,size_t vl)\n+{\n+  __riscv_vse64(base,value,vl);\n+}\n+\n+void\n+test___riscv_vse64(double* base,vfloat64m2_t value,size_t vl)\n+{\n+  __riscv_vse64(base,value,vl);\n+}\n+\n+void\n+test___riscv_vse64(double* base,vfloat64m4_t value,size_t vl)\n+{\n+  __riscv_vse64(base,value,vl);\n+}\n+\n+void\n+test___riscv_vse64(double* base,vfloat64m8_t value,size_t vl)\n+{\n+  __riscv_vse64(base,value,vl);\n+}\n+\n+void\n+test___riscv_vse64(vbool64_t mask,int64_t* base,vint64m1_t value,size_t vl)\n+{\n+  __riscv_vse64(mask,base,value,vl);\n+}\n+\n+void\n+test___riscv_vse64(vbool32_t mask,int64_t* base,vint64m2_t value,size_t vl)\n+{\n+  __riscv_vse64(mask,base,value,vl);\n+}\n+\n+void\n+test___riscv_vse64(vbool16_t mask,int64_t* base,vint64m4_t value,size_t vl)\n+{\n+  __riscv_vse64(mask,base,value,vl);\n+}\n+\n+void\n+test___riscv_vse64(vbool8_t mask,int64_t* base,vint64m8_t value,size_t vl)\n+{\n+  __riscv_vse64(mask,base,value,vl);\n+}\n+\n+void\n+test___riscv_vse64(vbool64_t mask,uint64_t* base,vuint64m1_t value,size_t vl)\n+{\n+  __riscv_vse64(mask,base,value,vl);\n+}\n+\n+void\n+test___riscv_vse64(vbool32_t mask,uint64_t* base,vuint64m2_t value,size_t vl)\n+{\n+  __riscv_vse64(mask,base,value,vl);\n+}\n+\n+void\n+test___riscv_vse64(vbool16_t mask,uint64_t* base,vuint64m4_t value,size_t vl)\n+{\n+  __riscv_vse64(mask,base,value,vl);\n+}\n+\n+void\n+test___riscv_vse64(vbool8_t mask,uint64_t* base,vuint64m8_t value,size_t vl)\n+{\n+  __riscv_vse64(mask,base,value,vl);\n+}\n+\n+void\n+test___riscv_vse64(vbool64_t mask,double* base,vfloat64m1_t value,size_t vl)\n+{\n+  __riscv_vse64(mask,base,value,vl);\n+}\n+\n+void\n+test___riscv_vse64(vbool32_t mask,double* base,vfloat64m2_t value,size_t vl)\n+{\n+  __riscv_vse64(mask,base,value,vl);\n+}\n+\n+void\n+test___riscv_vse64(vbool16_t mask,double* base,vfloat64m4_t value,size_t vl)\n+{\n+  __riscv_vse64(mask,base,value,vl);\n+}\n+\n+void\n+test___riscv_vse64(vbool8_t mask,double* base,vfloat64m8_t value,size_t vl)\n+{\n+  __riscv_vse64(mask,base,value,vl);\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */"}]}