{"sha": "11dde1bb18eaf7a6981bc5e7e46cc7d945d55182", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTFkZGUxYmIxOGVhZjdhNjk4MWJjNWU3ZTQ2Y2M3ZDk0NWQ1NTE4Mg==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2004-11-24T10:44:18Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2004-11-24T10:44:18Z"}, "message": "NIOServerSocket.java: Added email to @author tag.\n\n2004-11-24  Michael Koch  <konqueror@gmx.de>\n\n\t* gnu/java/nio/NIOServerSocket.java: Added email to @author tag.\n\t* java/nio/DirectByteBufferImpl.java:\n\tMoved native methods to java.nio.VMDirectByteBuffer class.\n\t* java/nio/MappedByteBufferImpl.java:\n\tUse native methods from java.nio.VMDirectByteBuffer class.\n\t* java/nio/VMDirectByteBuffer.java: New file,\n\t* java/nio/natDirectByteBufferImpl.cc:\n\tMoved all methods into java.nio.VMDirectByteBuffer class.\n\t* java/nio/channels/spi/AbstractSelectableChannel.java\n\t(register): Only re-use valid keys.\n\t* Makefile.am: Added java/nio/VMDirectByteBuffer.java.\n\t* Makefile.in: Regenerated.\n\nFrom-SVN: r91146", "tree": {"sha": "9b7c7a17527d4c0271c30763af092c759f04c29c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9b7c7a17527d4c0271c30763af092c759f04c29c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/11dde1bb18eaf7a6981bc5e7e46cc7d945d55182", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11dde1bb18eaf7a6981bc5e7e46cc7d945d55182", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11dde1bb18eaf7a6981bc5e7e46cc7d945d55182", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11dde1bb18eaf7a6981bc5e7e46cc7d945d55182/comments", "author": null, "committer": null, "parents": [{"sha": "911461693337552b76b5994d9d875e1b78e64b28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/911461693337552b76b5994d9d875e1b78e64b28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/911461693337552b76b5994d9d875e1b78e64b28"}], "stats": {"total": 176, "additions": 115, "deletions": 61}, "files": [{"sha": "1c6009896c64ce7619b0b024e8f098c946d5defe", "filename": "libjava/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11dde1bb18eaf7a6981bc5e7e46cc7d945d55182/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11dde1bb18eaf7a6981bc5e7e46cc7d945d55182/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=11dde1bb18eaf7a6981bc5e7e46cc7d945d55182", "patch": "@@ -1,3 +1,18 @@\n+2004-11-24  Michael Koch  <konqueror@gmx.de>\n+\n+\t* gnu/java/nio/NIOServerSocket.java: Added email to @author tag.\n+\t* java/nio/DirectByteBufferImpl.java:\n+\tMoved native methods to java.nio.VMDirectByteBuffer class.\n+\t* java/nio/MappedByteBufferImpl.java:\n+\tUse native methods from java.nio.VMDirectByteBuffer class.\n+\t* java/nio/VMDirectByteBuffer.java: New file,\n+\t* java/nio/natDirectByteBufferImpl.cc:\n+\tMoved all methods into java.nio.VMDirectByteBuffer class.\n+\t* java/nio/channels/spi/AbstractSelectableChannel.java\n+\t(register): Only re-use valid keys.\n+\t* Makefile.am: Added java/nio/VMDirectByteBuffer.java.\n+\t* Makefile.in: Regenerated.\n+\n 2004-11-24  Michael Koch  <konqueror@gmx.de>\n \n \t* java/nio/DirectByteBufferImpl.java,"}, {"sha": "65d60dedcfa59a8ff41cefd9daa95b7aedd61328", "filename": "libjava/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11dde1bb18eaf7a6981bc5e7e46cc7d945d55182/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11dde1bb18eaf7a6981bc5e7e46cc7d945d55182/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=11dde1bb18eaf7a6981bc5e7e46cc7d945d55182", "patch": "@@ -2957,6 +2957,7 @@ java/nio/ReadOnlyBufferException.java \\\n java/nio/ShortBuffer.java \\\n java/nio/ShortBufferImpl.java \\\n java/nio/ShortViewBufferImpl.java \\\n+java/nio/VMDirectByteBuffer.java \\\n java/nio/channels/AlreadyConnectedException.java \\\n java/nio/channels/AsynchronousCloseException.java \\\n java/nio/channels/ByteChannel.java \\"}, {"sha": "c701c123619b01f21f2b17c5e1afe9f5c383b7df", "filename": "libjava/Makefile.in", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11dde1bb18eaf7a6981bc5e7e46cc7d945d55182/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11dde1bb18eaf7a6981bc5e7e46cc7d945d55182/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=11dde1bb18eaf7a6981bc5e7e46cc7d945d55182", "patch": "@@ -949,6 +949,7 @@ am__libgcj_la_SOURCES_DIST = prims.cc jni.cc exception.cc resolve.cc \\\n \tjava/nio/ReadOnlyBufferException.java \\\n \tjava/nio/ShortBuffer.java java/nio/ShortBufferImpl.java \\\n \tjava/nio/ShortViewBufferImpl.java \\\n+\tjava/nio/VMDirectByteBuffer.java \\\n \tjava/nio/channels/AlreadyConnectedException.java \\\n \tjava/nio/channels/AsynchronousCloseException.java \\\n \tjava/nio/channels/ByteChannel.java \\\n@@ -3918,6 +3919,7 @@ am__objects_14 = $(am__objects_9) gnu/classpath/ServiceFactory.lo \\\n \tjava/nio/MappedByteBuffer.lo java/nio/MappedByteBufferImpl.lo \\\n \tjava/nio/ReadOnlyBufferException.lo java/nio/ShortBuffer.lo \\\n \tjava/nio/ShortBufferImpl.lo java/nio/ShortViewBufferImpl.lo \\\n+\tjava/nio/VMDirectByteBuffer.lo \\\n \tjava/nio/channels/AlreadyConnectedException.lo \\\n \tjava/nio/channels/AsynchronousCloseException.lo \\\n \tjava/nio/channels/ByteChannel.lo \\\n@@ -6830,6 +6832,7 @@ java/nio/ReadOnlyBufferException.java \\\n java/nio/ShortBuffer.java \\\n java/nio/ShortBufferImpl.java \\\n java/nio/ShortViewBufferImpl.java \\\n+java/nio/VMDirectByteBuffer.java \\\n java/nio/channels/AlreadyConnectedException.java \\\n java/nio/channels/AsynchronousCloseException.java \\\n java/nio/channels/ByteChannel.java \\\n@@ -9997,6 +10000,8 @@ java/nio/ShortBufferImpl.lo: java/nio/$(am__dirstamp) \\\n \tjava/nio/$(DEPDIR)/$(am__dirstamp)\n java/nio/ShortViewBufferImpl.lo: java/nio/$(am__dirstamp) \\\n \tjava/nio/$(DEPDIR)/$(am__dirstamp)\n+java/nio/VMDirectByteBuffer.lo: java/nio/$(am__dirstamp) \\\n+\tjava/nio/$(DEPDIR)/$(am__dirstamp)\n java/nio/channels/AlreadyConnectedException.lo:  \\\n \tjava/nio/channels/$(am__dirstamp) \\\n \tjava/nio/channels/$(DEPDIR)/$(am__dirstamp)\n@@ -16839,6 +16844,8 @@ mostlyclean-compile:\n \t-rm -f java/nio/ShortBufferImpl.lo\n \t-rm -f java/nio/ShortViewBufferImpl.$(OBJEXT)\n \t-rm -f java/nio/ShortViewBufferImpl.lo\n+\t-rm -f java/nio/VMDirectByteBuffer.$(OBJEXT)\n+\t-rm -f java/nio/VMDirectByteBuffer.lo\n \t-rm -f java/nio/channels/AlreadyConnectedException.$(OBJEXT)\n \t-rm -f java/nio/channels/AlreadyConnectedException.lo\n \t-rm -f java/nio/channels/AsynchronousCloseException.$(OBJEXT)\n@@ -20700,6 +20707,7 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@java/nio/$(DEPDIR)/ShortBuffer.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@java/nio/$(DEPDIR)/ShortBufferImpl.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@java/nio/$(DEPDIR)/ShortViewBufferImpl.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@java/nio/$(DEPDIR)/VMDirectByteBuffer.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@java/nio/$(DEPDIR)/natDirectByteBufferImpl.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@java/nio/channels/$(DEPDIR)/AlreadyConnectedException.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@java/nio/channels/$(DEPDIR)/AsynchronousCloseException.Plo@am__quote@"}, {"sha": "f509774cd10d21036fb3305bfd3165aca42edc15", "filename": "libjava/gnu/java/nio/NIOServerSocket.java", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11dde1bb18eaf7a6981bc5e7e46cc7d945d55182/libjava%2Fgnu%2Fjava%2Fnio%2FNIOServerSocket.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11dde1bb18eaf7a6981bc5e7e46cc7d945d55182/libjava%2Fgnu%2Fjava%2Fnio%2FNIOServerSocket.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FNIOServerSocket.java?ref=11dde1bb18eaf7a6981bc5e7e46cc7d945d55182", "patch": "@@ -39,14 +39,15 @@\n package gnu.java.nio;\n \n import gnu.java.net.PlainSocketImpl;\n+\n import java.io.IOException;\n import java.net.ServerSocket;\n import java.net.Socket;\n import java.nio.channels.ServerSocketChannel;\n import java.nio.channels.SocketChannel;\n \n /**\n- * @author Michael Koch\n+ * @author Michael Koch (konqueror@gmx.de)\n  */\n public final class NIOServerSocket extends ServerSocket\n {"}, {"sha": "a92515daae831f15a69496540e356f46cfd6d12c", "filename": "libjava/java/nio/DirectByteBufferImpl.java", "status": "modified", "additions": 13, "deletions": 35, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11dde1bb18eaf7a6981bc5e7e46cc7d945d55182/libjava%2Fjava%2Fnio%2FDirectByteBufferImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11dde1bb18eaf7a6981bc5e7e46cc7d945d55182/libjava%2Fjava%2Fnio%2FDirectByteBufferImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FDirectByteBufferImpl.java?ref=11dde1bb18eaf7a6981bc5e7e46cc7d945d55182", "patch": "@@ -38,20 +38,10 @@\n \n package java.nio;\n \n-import gnu.classpath.Configuration;\n import gnu.gcj.RawData;\n \n final class DirectByteBufferImpl extends ByteBuffer\n {\n-  static\n-  {\n-    // load the shared library needed for native methods.\n-    if (Configuration.INIT_LOAD_LIBRARY)\n-      {\n-        System.loadLibrary (\"javanio\");\n-      }\n-  }\n-  \n   /** Used by MappedByteBufferImpl and when slicing to prevent premature GC. */\n   protected Object owner;\n \n@@ -78,26 +68,21 @@ public DirectByteBufferImpl(Object owner, RawData address,\n    */ \n   public static ByteBuffer allocate(int capacity)\n   {\n-    return new DirectByteBufferImpl(allocateImpl(capacity), capacity);\n+    return new DirectByteBufferImpl(VMDirectByteBuffer.allocate(capacity),\n+\t\t\t\t    capacity);\n   }\n \n-  private static native RawData allocateImpl (int capacity);\n-  private static native void freeImpl (RawData address);\n-  \n   protected void finalize() throws Throwable\n   {\n-    freeImpl (address);\n+    VMDirectByteBuffer.free(address);\n   }\n   \n-  static native byte getImpl (RawData address, int index);\n-  static native void putImpl (RawData address, int index, byte value);\n-\n   public byte get()\n   {\n     checkForUnderflow();\n \n     int pos = position();\n-    byte result = getImpl (address, pos);\n+    byte result = VMDirectByteBuffer.get(address, pos);\n     position(pos + 1);\n     return result;\n   }\n@@ -106,19 +91,16 @@ public byte get(int index)\n   {\n     checkIndex(index);\n \n-    return getImpl (address, index);\n+    return VMDirectByteBuffer.get(address, index);\n   }\n \n-  static native void getImpl (RawData address, int index,\n-\t\t\t      byte[] dst, int offset, int length);\n-\n   public ByteBuffer get(byte[] dst, int offset, int length)\n   {\n     checkArraySize(dst.length, offset, length);\n     checkForUnderflow(length);\n \n     int index = position();\n-    getImpl(address, index, dst, offset, length);\n+    VMDirectByteBuffer.get(address, index, dst, offset, length);\n     position(index+length);\n \n     return this;\n@@ -130,7 +112,7 @@ public ByteBuffer put(byte value)\n     checkForOverflow();\n \n     int pos = position();\n-    putImpl (address, pos, value);\n+    VMDirectByteBuffer.put(address, pos, value);\n     position(pos + 1);\n     return this;\n   }\n@@ -140,15 +122,13 @@ public ByteBuffer put(int index, byte value)\n     checkIfReadOnly();\n     checkIndex(index);\n \n-    putImpl (address, index, value);\n+    VMDirectByteBuffer.put(address, index, value);\n     return this;\n   }\n   \n-  static native void shiftDown(RawData address, int dst_offset, int src_offset, int count);\n-\n   void shiftDown(int dst_offset, int src_offset, int count)\n   {\n-    shiftDown(address, dst_offset, src_offset, count);\n+    VMDirectByteBuffer.shiftDown(address, dst_offset, src_offset, count);\n   }\n   \n   public ByteBuffer compact()\n@@ -157,21 +137,19 @@ public ByteBuffer compact()\n     if (pos > 0)\n       {\n \tint count = remaining();\n-\tshiftDown(address, 0, pos, count);\n+\tVMDirectByteBuffer.shiftDown(address, 0, pos, count);\n \tposition(count);\n \tlimit(capacity());\n       }\n     return this;\n   }\n \n-  public static native RawData adjustAddress(RawData address, int offset);\n-\n   public ByteBuffer slice()\n   {\n     int rem = remaining();\n-    return new DirectByteBufferImpl (owner,\n-\t\t\t\t     adjustAddress(address, position()),\n-\t\t\t\t     rem, rem, 0, isReadOnly ());\n+    return new DirectByteBufferImpl\n+      (owner, VMDirectByteBuffer.adjustAddress(address, position()),\n+       rem, rem, 0, isReadOnly());\n   }\n \n   private ByteBuffer duplicate(boolean readOnly)"}, {"sha": "c5cf355da4e2ebc6af8192e61937d60f6b65fbf0", "filename": "libjava/java/nio/MappedByteBufferImpl.java", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11dde1bb18eaf7a6981bc5e7e46cc7d945d55182/libjava%2Fjava%2Fnio%2FMappedByteBufferImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11dde1bb18eaf7a6981bc5e7e46cc7d945d55182/libjava%2Fjava%2Fnio%2FMappedByteBufferImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FMappedByteBufferImpl.java?ref=11dde1bb18eaf7a6981bc5e7e46cc7d945d55182", "patch": "@@ -72,8 +72,8 @@ public byte get()\n     checkForUnderflow();\n \n     int pos = position();\n-    byte result = DirectByteBufferImpl.getImpl(address, pos);\n-    position (pos + 1);\n+    byte result = VMDirectByteBuffer.get(address, pos);\n+    position(pos + 1);\n     return result;\n   }\n \n@@ -83,7 +83,7 @@ public ByteBuffer put(byte value)\n     checkForOverflow();\n \n     int pos = position();\n-    DirectByteBufferImpl.putImpl(address, pos, value);\n+    VMDirectByteBuffer.put(address, pos, value);\n     position(pos + 1);\n     return this;\n   }\n@@ -92,7 +92,7 @@ public byte get(int index)\n   {\n     checkIndex(index);\n \n-    return DirectByteBufferImpl.getImpl(address, index);\n+    return VMDirectByteBuffer.get(address, index);\n   }\n \n   public ByteBuffer get(byte[] dst, int offset, int length)\n@@ -101,7 +101,7 @@ public ByteBuffer get(byte[] dst, int offset, int length)\n     checkForUnderflow(length);\n \n     int index = position();\n-    DirectByteBufferImpl.getImpl(address, index, dst, offset, length);\n+    VMDirectByteBuffer.get(address, index, dst, offset, length);\n     position(index+length);\n \n     return this;\n@@ -112,7 +112,7 @@ public ByteBuffer put(int index, byte value)\n     checkIfReadOnly();\n     checkIndex(index);\n \n-    DirectByteBufferImpl.putImpl(address, index, value);\n+    VMDirectByteBuffer.put(address, index, value);\n     return this;\n   }\n \n@@ -123,7 +123,7 @@ public ByteBuffer compact()\n       {\n \tint count = remaining();\n \t// Call shiftDown method optimized for direct buffers.\n-\tDirectByteBufferImpl.shiftDown(address, 0, pos, count);\n+\tVMDirectByteBuffer.shiftDown(address, 0, pos, count);\n \tposition(count);\n \tlimit(capacity());\n       }\n@@ -138,10 +138,9 @@ public boolean isDirect()\n   public ByteBuffer slice()\n   {\n     int rem = remaining();\n-    return new DirectByteBufferImpl (this,\n-\t\t\t\t     DirectByteBufferImpl\n-\t\t\t\t     .adjustAddress(address, position()),\n-\t\t\t\t     rem, rem, 0, isReadOnly ());\n+    return new DirectByteBufferImpl\n+      (this, VMDirectByteBuffer.adjustAddress(address, position()),\n+       rem, rem, 0, isReadOnly());\n   }\n \n   private ByteBuffer duplicate(boolean readOnly)"}, {"sha": "99d21b9264d1f59ab6026bfcecdc6c7524ec0ea6", "filename": "libjava/java/nio/VMDirectByteBuffer.java", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11dde1bb18eaf7a6981bc5e7e46cc7d945d55182/libjava%2Fjava%2Fnio%2FVMDirectByteBuffer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11dde1bb18eaf7a6981bc5e7e46cc7d945d55182/libjava%2Fjava%2Fnio%2FVMDirectByteBuffer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FVMDirectByteBuffer.java?ref=11dde1bb18eaf7a6981bc5e7e46cc7d945d55182", "patch": "@@ -0,0 +1,53 @@\n+/* VMDirectByteBuffer.java -- \n+   Copyright (C) 2004 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package java.nio;\n+\n+import gnu.classpath.Configuration;\n+import gnu.gcj.RawData;\n+\n+final class VMDirectByteBuffer\n+{\n+  static native RawData allocate (int capacity);\n+  static native void free(RawData address);\n+  static native byte get(RawData address, int index);\n+  static native void get(RawData address, int index, byte[] dst, int offset, int length);\n+  static native void put(RawData address, int index, byte value);\n+  static native RawData adjustAddress(RawData address, int offset);\n+  static native void shiftDown(RawData address, int dst_offset, int src_offset, int count);\n+}"}, {"sha": "2255af06d36bf16426ac75c74d47d14fa807c9f9", "filename": "libjava/java/nio/channels/spi/AbstractSelectableChannel.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11dde1bb18eaf7a6981bc5e7e46cc7d945d55182/libjava%2Fjava%2Fnio%2Fchannels%2Fspi%2FAbstractSelectableChannel.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11dde1bb18eaf7a6981bc5e7e46cc7d945d55182/libjava%2Fjava%2Fnio%2Fchannels%2Fspi%2FAbstractSelectableChannel.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2Fchannels%2Fspi%2FAbstractSelectableChannel.java?ref=11dde1bb18eaf7a6981bc5e7e46cc7d945d55182", "patch": "@@ -35,6 +35,7 @@\n obligated to do so.  If you do not wish to do so, delete this\n exception statement from your version. */\n \n+\n package java.nio.channels.spi;\n \n import java.io.IOException;\n@@ -45,7 +46,6 @@\n import java.util.LinkedList;\n import java.util.ListIterator;\n \n-\n public abstract class AbstractSelectableChannel extends SelectableChannel\n {\n   private boolean blocking = true;\n@@ -226,7 +226,7 @@ public final SelectionKey register(Selector selin, int ops, Object att)\n       {\n \tkey = locate(selector);\n \n-\tif (key != null)\n+\tif (key != null && key.isValid())\n \t  {\n \t    if (att != null)\n \t      key.attach(att);"}, {"sha": "3119fdea3e6a7abbab294b22ba9bbcf352d113e8", "filename": "libjava/java/nio/natDirectByteBufferImpl.cc", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11dde1bb18eaf7a6981bc5e7e46cc7d945d55182/libjava%2Fjava%2Fnio%2FnatDirectByteBufferImpl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11dde1bb18eaf7a6981bc5e7e46cc7d945d55182/libjava%2Fjava%2Fnio%2FnatDirectByteBufferImpl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FnatDirectByteBufferImpl.cc?ref=11dde1bb18eaf7a6981bc5e7e46cc7d945d55182", "patch": "@@ -16,56 +16,55 @@ details.  */\n #include <stdlib.h>\n \n #include <gnu/gcj/RawData.h>\n-#include <java/nio/DirectByteBufferImpl.h>\n+#include <java/nio/VMDirectByteBuffer.h>\n \n using gnu::gcj::RawData;\n-using java::nio::DirectByteBufferImpl;\n \n RawData*\n-java::nio::DirectByteBufferImpl::allocateImpl (jint capacity)\n+java::nio::VMDirectByteBuffer::allocate (jint capacity)\n {\n   return reinterpret_cast<gnu::gcj::RawData*> (::malloc (capacity));\n }\n \n void\n-java::nio::DirectByteBufferImpl::freeImpl (gnu::gcj::RawData* address)\n+java::nio::VMDirectByteBuffer::free (gnu::gcj::RawData* address)\n {\n   ::free (reinterpret_cast<void*> (address));\n }\n \n jbyte\n-DirectByteBufferImpl::getImpl (RawData* address, jint index)\n+java::nio::VMDirectByteBuffer::get (RawData* address, jint index)\n {\n   jbyte* pointer = reinterpret_cast<jbyte*> (address) + index;\n   return *pointer;\n }\n \n void\n-DirectByteBufferImpl::getImpl (RawData* address, jint index,\n-\t\t\t       jbyteArray dst, jint offset, jint length)\n+java::nio::VMDirectByteBuffer::get (RawData* address, jint index,\n+\t\t\t\t    jbyteArray dst, jint offset, jint length)\n {\n   jbyte* src = reinterpret_cast<jbyte*> (address) + index;\n   memcpy (elements (dst) + offset, src, length);\n }\n \n void\n-java::nio::DirectByteBufferImpl::putImpl (gnu::gcj::RawData* address,\n-\t\t\t\t\t  jint index, jbyte value)\n+java::nio::VMDirectByteBuffer::put (gnu::gcj::RawData* address,\n+\t\t\t\t    jint index, jbyte value)\n {\n   jbyte* pointer = reinterpret_cast<jbyte*> (address) + index;\n   *pointer = value;\n }\n \n RawData*\n-java::nio::DirectByteBufferImpl::adjustAddress (RawData* address, jint offset)\n+java::nio::VMDirectByteBuffer::adjustAddress (RawData* address, jint offset)\n {\n   jbyte* start = reinterpret_cast<jbyte*> (address) + offset;\n   return reinterpret_cast<RawData*>(start);\n }\n \n void\n-java::nio::DirectByteBufferImpl::shiftDown\n-(RawData* address, jint dst_offset, jint src_offset, jint count)\n+java::nio::VMDirectByteBuffer::shiftDown (RawData* address, jint dst_offset,\n+\t\t\t\t\t  jint src_offset, jint count)\n {\n   jbyte* dst = reinterpret_cast<jbyte*> (address) + dst_offset;\n   jbyte* src = reinterpret_cast<jbyte*> (address) + src_offset;"}]}