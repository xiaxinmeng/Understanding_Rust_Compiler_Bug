{"sha": "ed2a53e7ca7aafa5fea5316c7fdebdc77fb8f327", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWQyYTUzZTdjYTdhYWZhNWZlYTUzMTZjN2ZkZWJkYzc3ZmI4ZjMyNw==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2016-04-04T09:26:29Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2016-04-04T09:26:29Z"}, "message": "re PR lto/68881 (UNRESOLVED/FAIL: gcc.dg/lto/attr-weakref-1 -O2 -flto)\n\n\n\tPR ipa/68881\n\t* cgraph.h (symtab_node::copy_visibility_from): New function.\n\t* symtab.c (symtab_node::copy_visibility_from): New function.\n\t* ipa-visibility.c (optimize_weakref): New function.\n\t(function_and_variable_visibility): Use it.\n\nFrom-SVN: r234708", "tree": {"sha": "046b846b874b04d1165f5b13e3c53c3879ea4558", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/046b846b874b04d1165f5b13e3c53c3879ea4558"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed2a53e7ca7aafa5fea5316c7fdebdc77fb8f327", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed2a53e7ca7aafa5fea5316c7fdebdc77fb8f327", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed2a53e7ca7aafa5fea5316c7fdebdc77fb8f327", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed2a53e7ca7aafa5fea5316c7fdebdc77fb8f327/comments", "author": null, "committer": null, "parents": [{"sha": "e8661ad6cfb1d6773a8613270250ab69c7faa95c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8661ad6cfb1d6773a8613270250ab69c7faa95c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8661ad6cfb1d6773a8613270250ab69c7faa95c"}], "stats": {"total": 148, "additions": 148, "deletions": 0}, "files": [{"sha": "61515258626485a098f08320dee14926fcf744bd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed2a53e7ca7aafa5fea5316c7fdebdc77fb8f327/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed2a53e7ca7aafa5fea5316c7fdebdc77fb8f327/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ed2a53e7ca7aafa5fea5316c7fdebdc77fb8f327", "patch": "@@ -1,3 +1,11 @@\n+2016-03-30  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\tPR ipa/68881\n+\t* cgraph.h (symtab_node::copy_visibility_from): New function.\n+\t* symtab.c (symtab_node::copy_visibility_from): New function.\n+\t* ipa-visibility.c (optimize_weakref): New function.\n+\t(function_and_variable_visibility): Use it.\n+\n 2016-04-04  Martin Liska  <mliska@suse.cz>\n \n \tPR hsa/70402"}, {"sha": "1d39d918b21deaba9f173cde9a379f7d5b70bbdd", "filename": "gcc/cgraph.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed2a53e7ca7aafa5fea5316c7fdebdc77fb8f327/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed2a53e7ca7aafa5fea5316c7fdebdc77fb8f327/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=ed2a53e7ca7aafa5fea5316c7fdebdc77fb8f327", "patch": "@@ -293,6 +293,9 @@ class GTY((desc (\"%h.type\"), tag (\"SYMTAB_SYMBOL\"),\n   /* Make DECL local.  */\n   void make_decl_local (void);\n \n+  /* Copy visibility from N.  */\n+  void copy_visibility_from (symtab_node *n);\n+\n   /* Return desired alignment of the definition.  This is NOT alignment useful\n      to access THIS, because THIS may be interposable and DECL_ALIGN should\n      be used instead.  It however must be guaranteed when output definition"}, {"sha": "e4c3f7c51109895a1a46df411c44c2d941dda5f1", "filename": "gcc/ipa-visibility.c", "status": "modified", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed2a53e7ca7aafa5fea5316c7fdebdc77fb8f327/gcc%2Fipa-visibility.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed2a53e7ca7aafa5fea5316c7fdebdc77fb8f327/gcc%2Fipa-visibility.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-visibility.c?ref=ed2a53e7ca7aafa5fea5316c7fdebdc77fb8f327", "patch": "@@ -452,6 +452,84 @@ update_visibility_by_resolution_info (symtab_node * node)\n     }\n }\n \n+/* Try to get rid of weakref.  */\n+\n+static void\n+optimize_weakref (symtab_node *node)\n+{\n+#ifdef ASM_OUTPUT_DEF\n+  bool aliases_supported = true;\n+#else\n+  bool aliases_supported = false;\n+#endif\n+  bool strip_weakref = false;\n+  bool static_alias = false;\n+\n+  gcc_assert (node->weakref);\n+\n+  /* Weakrefs with no target defined can not be optimized.  */\n+  if (!node->analyzed)\n+    return;\n+  symtab_node *target = node->get_alias_target ();\n+\n+  /* Weakrefs to weakrefs can be optimized only if target can be.  */\n+  if (target->weakref)\n+    optimize_weakref (target);\n+  if (target->weakref)\n+    return;\n+\n+  /* If we have definition of weakref's target and we know it binds locally,\n+     we can turn weakref to static alias.  */\n+  if (target->definition && decl_binds_to_current_def_p (target->decl)\n+      && aliases_supported)\n+    strip_weakref = static_alias = true;\n+  /* Otherwise we can turn weakref into transparent alias.  This transformation\n+     may break asm statements which directly refers to symbol name and expect\n+     GNU as to translate it via .weakref directive. So do not optimize when\n+     DECL_PRESERVED is set and .weakref is supported.  */\n+  else if ((!DECL_PRESERVE_P (target->decl)\n+\t    || IDENTIFIER_TRANSPARENT_ALIAS (DECL_ASSEMBLER_NAME (node->decl)))\n+\t   && !DECL_WEAK (target->decl)\n+\t   && !DECL_EXTERNAL (target->decl)\n+\t   && ((target->definition && !target->can_be_discarded_p ())\n+\t       || target->resolution != LDPR_UNDEF))\n+    strip_weakref = true;\n+  if (!strip_weakref)\n+    return;\n+  node->weakref = false;\n+  IDENTIFIER_TRANSPARENT_ALIAS (DECL_ASSEMBLER_NAME (node->decl)) = 0;\n+  TREE_CHAIN (DECL_ASSEMBLER_NAME (node->decl)) = NULL_TREE;\n+  DECL_ATTRIBUTES (node->decl) = remove_attribute (\"weakref\",\n+\t\t\t\t\t           DECL_ATTRIBUTES\n+\t\t\t\t\t\t\t (node->decl));\n+\n+  if (dump_file)\n+    fprintf (dump_file, \"Optimizing weakref %s %s\\n\",\n+\t     node->name(),\n+\t     static_alias ? \"as static alias\" : \"as transparent alias\");\n+\n+  if (static_alias)\n+    {\n+      /* make_decl_local will shortcircuit if it doesn't see TREE_PUBLIC.\n+\t be sure it really clears the WEAK flag.  */\n+      TREE_PUBLIC (node->decl) = true;\n+      node->make_decl_local ();\n+      node->forced_by_abi = false;\n+      node->resolution = LDPR_PREVAILING_DEF_IRONLY;\n+      node->externally_visible = false;\n+      gcc_assert (!DECL_WEAK (node->decl));\n+      node->transparent_alias = false;\n+    }\n+  else\n+    {\n+      symtab->change_decl_assembler_name\n+        (node->decl, DECL_ASSEMBLER_NAME (node->get_alias_target ()->decl));\n+      node->transparent_alias = true;\n+      node->copy_visibility_from (target);\n+    }\n+  gcc_assert (node->alias);\n+}\n+\n /* Decide on visibility of all symbols.  */\n \n static unsigned int\n@@ -594,6 +672,8 @@ function_and_variable_visibility (bool whole_program)\n \t}\n \n       update_visibility_by_resolution_info (node);\n+      if (node->weakref)\n+\toptimize_weakref (node);\n     }\n   FOR_EACH_DEFINED_FUNCTION (node)\n     {\n@@ -660,6 +740,8 @@ function_and_variable_visibility (bool whole_program)\n \t      || ! (ADDR_SPACE_GENERIC_P\n \t\t    (TYPE_ADDR_SPACE (TREE_TYPE (vnode->decl))))))\n \tDECL_COMMON (vnode->decl) = 0;\n+      if (vnode->weakref)\n+\toptimize_weakref (vnode);\n     }\n   FOR_EACH_DEFINED_VARIABLE (vnode)\n     {"}, {"sha": "3d3cc4f738c3676e752780dae8325899986ce946", "filename": "gcc/symtab.c", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed2a53e7ca7aafa5fea5316c7fdebdc77fb8f327/gcc%2Fsymtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed2a53e7ca7aafa5fea5316c7fdebdc77fb8f327/gcc%2Fsymtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsymtab.c?ref=ed2a53e7ca7aafa5fea5316c7fdebdc77fb8f327", "patch": "@@ -1287,6 +1287,61 @@ symtab_node::make_decl_local (void)\n   SYMBOL_REF_WEAK (symbol) = DECL_WEAK (decl);\n }\n \n+/* Copy visibility from N.\n+   This is useful when THIS becomes a transparent alias of N.  */\n+\n+void\n+symtab_node::copy_visibility_from (symtab_node *n)\n+{\n+  gcc_checking_assert (n->weakref == weakref);\n+\n+  ipa_ref *ref;\n+  for (unsigned i = 0; iterate_direct_aliases (i, ref); i++)\n+    {\n+      struct symtab_node *alias = ref->referring;\n+      if (alias->transparent_alias)\n+\talias->copy_visibility_from (n);\n+    }\n+\n+  if (TREE_CODE (decl) == VAR_DECL)\n+    {\n+      DECL_COMMON (decl) = DECL_COMMON (n->decl);\n+      /* ADDRESSABLE flag is not defined for public symbols.  */\n+      if (TREE_PUBLIC (decl) && !TREE_PUBLIC (n->decl))\n+        TREE_ADDRESSABLE (decl) = 1;\n+      TREE_STATIC (decl) = TREE_STATIC (n->decl);\n+    }\n+  else gcc_assert (TREE_CODE (decl) == FUNCTION_DECL);\n+\n+  DECL_COMDAT (decl) = DECL_COMDAT (n->decl);\n+  DECL_WEAK (decl) = DECL_WEAK (n->decl);\n+  DECL_EXTERNAL (decl) = DECL_EXTERNAL (n->decl);\n+  DECL_VISIBILITY_SPECIFIED (decl) = DECL_VISIBILITY_SPECIFIED (n->decl);\n+  DECL_VISIBILITY (decl) = DECL_VISIBILITY (n->decl);\n+  TREE_PUBLIC (decl) = TREE_PUBLIC (n->decl);\n+  DECL_DLLIMPORT_P (decl) = DECL_DLLIMPORT_P (n->decl);\n+  resolution = n->resolution;\n+  set_comdat_group (n->get_comdat_group ());\n+  call_for_symbol_and_aliases (symtab_node::set_section,\n+\t\t\t     const_cast<char *>(n->get_section ()), true);\n+  externally_visible = n->externally_visible;\n+  if (!DECL_RTL_SET_P (decl))\n+    return;\n+\n+  /* Update rtl flags.  */\n+  make_decl_rtl (decl);\n+\n+  rtx rtl = DECL_RTL (decl);\n+  if (!MEM_P (rtl))\n+    return;\n+\n+  rtx symbol = XEXP (rtl, 0);\n+  if (GET_CODE (symbol) != SYMBOL_REF)\n+    return;\n+\n+  SYMBOL_REF_WEAK (symbol) = DECL_WEAK (decl);\n+}\n+\n /* Walk the alias chain to return the symbol NODE is alias of.\n    If NODE is not an alias, return NODE.\n    Assumes NODE is known to be alias.  */"}]}