{"sha": "a2f2457fa482356b5996a084d037d79fdc1a556f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTJmMjQ1N2ZhNDgyMzU2YjU5OTZhMDg0ZDAzN2Q3OWZkYzFhNTU2Zg==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2002-09-18T10:15:52Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2002-09-18T10:15:52Z"}, "message": "Matcher.java, [...]: Merge with classpath, new files.\n\n2002-09-18  Michael Koch  <konqueror@gmx.de>\n\n\t* java/util/regex/Matcher.java, java/util/regex/Pattern.java,\n\tjava/util/regex/PatternSyntaxException.java:\n\tMerge with classpath, new files.\n\t* Makefile.am (core_java_source_files):\n\tAdded java/util/regex/Matcher.java,\n\tjava/util/regex/Pattern.java,\n\tjava/util/regex/PatternSyntaxException.java\n\t* Makefile.in: Regenerated.\n\t* include/config.h.in: Added HAVE_NET_IF_H.\n\t* java/net/natNetworkInterface.cc (getRealNetworkInterfaces):\n\tRemoved #if 0 ... #endif.\n\nFrom-SVN: r57275", "tree": {"sha": "1d8bfb2afa774223edd8b5583a5dd9e57a957dec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1d8bfb2afa774223edd8b5583a5dd9e57a957dec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a2f2457fa482356b5996a084d037d79fdc1a556f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2f2457fa482356b5996a084d037d79fdc1a556f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2f2457fa482356b5996a084d037d79fdc1a556f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2f2457fa482356b5996a084d037d79fdc1a556f/comments", "author": null, "committer": null, "parents": [{"sha": "00a892b812d0a634402bb31a5836147be11bf6a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00a892b812d0a634402bb31a5836147be11bf6a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00a892b812d0a634402bb31a5836147be11bf6a4"}], "stats": {"total": 279, "additions": 272, "deletions": 7}, "files": [{"sha": "89cba058fbeba875624a703a38123e8ab953bb7f", "filename": "libjava/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2f2457fa482356b5996a084d037d79fdc1a556f/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2f2457fa482356b5996a084d037d79fdc1a556f/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=a2f2457fa482356b5996a084d037d79fdc1a556f", "patch": "@@ -1,3 +1,17 @@\n+2002-09-18  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/util/regex/Matcher.java, java/util/regex/Pattern.java,\n+\tjava/util/regex/PatternSyntaxException.java:\n+\tMerge with classpath, new files.\n+\t* Makefile.am (core_java_source_files):\n+\tAdded java/util/regex/Matcher.java,\n+\tjava/util/regex/Pattern.java,\n+\tjava/util/regex/PatternSyntaxException.java\n+\t* Makefile.in: Regenerated.\n+\t* include/config.h.in: Added HAVE_NET_IF_H.\n+\t* java/net/natNetworkInterface.cc (getRealNetworkInterfaces):\n+\tRemoved #if 0 ... #endif.\n+\t\n 2002-09-17  Michael Koch  <konqueror@gmx.de>\n \n \t* java/net/natNetworkInterface.cc:"}, {"sha": "456662ce4fcf88dde559140b6f2aa8adc2a3d85c", "filename": "libjava/Makefile.am", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2f2457fa482356b5996a084d037d79fdc1a556f/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2f2457fa482356b5996a084d037d79fdc1a556f/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=a2f2457fa482356b5996a084d037d79fdc1a556f", "patch": "@@ -1661,7 +1661,10 @@ java/util/TreeMap.java \\\n java/util/TreeSet.java \\\n java/util/TooManyListenersException.java \\\n java/util/Vector.java \\\n-java/util/WeakHashMap.java\n+java/util/WeakHashMap.java \\\n+java/util/regex/Matcher.java \\\n+java/util/regex/Pattern.java \\\n+java/util/regex/PatternSyntaxException.java\n \n ## List of all .java files to be compiled.  Please keep this list\n ## alphabetical.  Please put files from java/lang, java/io, and java/util"}, {"sha": "272a4460098dc1573ea97989cd346118dd829ed2", "filename": "libjava/Makefile.in", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2f2457fa482356b5996a084d037d79fdc1a556f/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2f2457fa482356b5996a084d037d79fdc1a556f/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=a2f2457fa482356b5996a084d037d79fdc1a556f", "patch": "@@ -1428,7 +1428,10 @@ java/util/TreeMap.java \\\n java/util/TreeSet.java \\\n java/util/TooManyListenersException.java \\\n java/util/Vector.java \\\n-java/util/WeakHashMap.java\n+java/util/WeakHashMap.java \\\n+java/util/regex/Matcher.java \\\n+java/util/regex/Pattern.java \\\n+java/util/regex/PatternSyntaxException.java\n \n \n ordinary_java_source_files = $(core_java_source_files) \\\n@@ -3113,8 +3116,11 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/java/util/jar/JarException.P .deps/java/util/jar/JarFile.P \\\n .deps/java/util/jar/JarInputStream.P \\\n .deps/java/util/jar/JarOutputStream.P .deps/java/util/jar/Manifest.P \\\n-.deps/java/util/natTimeZone.P .deps/java/util/zip/Adler32.P \\\n-.deps/java/util/zip/CRC32.P .deps/java/util/zip/CheckedInputStream.P \\\n+.deps/java/util/natTimeZone.P .deps/java/util/regex/Matcher.P \\\n+.deps/java/util/regex/Pattern.P \\\n+.deps/java/util/regex/PatternSyntaxException.P \\\n+.deps/java/util/zip/Adler32.P .deps/java/util/zip/CRC32.P \\\n+.deps/java/util/zip/CheckedInputStream.P \\\n .deps/java/util/zip/CheckedOutputStream.P \\\n .deps/java/util/zip/Checksum.P \\\n .deps/java/util/zip/DataFormatException.P \\"}, {"sha": "612a2bfe30d5812ab609fb685c00632826e720c7", "filename": "libjava/include/config.h.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2f2457fa482356b5996a084d037d79fdc1a556f/libjava%2Finclude%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2f2457fa482356b5996a084d037d79fdc1a556f/libjava%2Finclude%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fconfig.h.in?ref=a2f2457fa482356b5996a084d037d79fdc1a556f", "patch": "@@ -346,6 +346,9 @@\n /* Define if you have the <netdb.h> header file.  */\n #undef HAVE_NETDB_H\n \n+/* Define if you have the <net/if.h> header file.  */\n+#undef HAVE_NET_IF_H\n+\n /* Define if you have the <netinet/in.h> header file.  */\n #undef HAVE_NETINET_IN_H\n "}, {"sha": "1d236b012c0005b3faa5568814cb614d45526a23", "filename": "libjava/java/net/natNetworkInterface.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2f2457fa482356b5996a084d037d79fdc1a556f/libjava%2Fjava%2Fnet%2FnatNetworkInterface.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2f2457fa482356b5996a084d037d79fdc1a556f/libjava%2Fjava%2Fnet%2FnatNetworkInterface.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FnatNetworkInterface.cc?ref=a2f2457fa482356b5996a084d037d79fdc1a556f", "patch": "@@ -70,7 +70,6 @@ java::net::NetworkInterface::getRealNetworkInterfaces ()\n ::java::util::Vector*\n java::net::NetworkInterface::getRealNetworkInterfaces ()\n {\n-#if 0\n   int fd;\n   int num_interfaces = 0;\n   struct ifconf if_data;\n@@ -128,7 +127,7 @@ java::net::NetworkInterface::getRealNetworkInterfaces ()\n     }\n \n #ifdef HAVE_INET6\n-      // FIXME: read /proc/net/if_inet6\n+      // FIXME: read /proc/net/if_inet6 (on Linux 2.4)\n #endif\n \n   _Jv_Free (if_data.ifc_buf);\n@@ -137,7 +136,6 @@ java::net::NetworkInterface::getRealNetworkInterfaces ()\n     ::close (fd);\n   \n   return ht;\n-#endif\n }\n \n #endif // DISABLE_JAVA_NET //"}, {"sha": "a1f95dbcc49cc8074117cdb1791ea3795ee25124", "filename": "libjava/java/util/regex/Matcher.java", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2f2457fa482356b5996a084d037d79fdc1a556f/libjava%2Fjava%2Futil%2Fregex%2FMatcher.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2f2457fa482356b5996a084d037d79fdc1a556f/libjava%2Fjava%2Futil%2Fregex%2FMatcher.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fregex%2FMatcher.java?ref=a2f2457fa482356b5996a084d037d79fdc1a556f", "patch": "@@ -0,0 +1,51 @@\n+/* Matcher.java -- \n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+// Stub class until java.util.regex is implemented.\n+package java.util.regex;\n+\n+public class Matcher\n+{\n+  public String replaceFirst(String replacement)\n+  {\n+    throw new InternalError(\"Not implemented yet\");\n+  }\n+  public String replaceAll(String replacement)\n+  {\n+    throw new InternalError(\"Not implemented yet\");\n+  }\n+}"}, {"sha": "0ea1bfb1c5a24860d88cae890b5278bf0c8f506a", "filename": "libjava/java/util/regex/Pattern.java", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2f2457fa482356b5996a084d037d79fdc1a556f/libjava%2Fjava%2Futil%2Fregex%2FPattern.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2f2457fa482356b5996a084d037d79fdc1a556f/libjava%2Fjava%2Futil%2Fregex%2FPattern.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fregex%2FPattern.java?ref=a2f2457fa482356b5996a084d037d79fdc1a556f", "patch": "@@ -0,0 +1,59 @@\n+/* Pattern.java -- \n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+// Stub class until java.util.regex is implemented.\n+package java.util.regex;\n+\n+public class Pattern\n+{\n+  public static Pattern compile(String regex)\n+  {\n+    throw new InternalError(\"Not implemented yet\");\n+  }\n+  public static boolean matches(String regex, CharSequence input) \n+  {\n+    throw new InternalError(\"Not implemented yet\");\n+  }\n+  public Matcher matcher(CharSequence input)\n+  {\n+    throw new InternalError(\"Not implemented yet\");\n+  }\n+  public String[] split(CharSequence input, int limit)\n+  {\n+    throw new InternalError(\"Not implemented yet\");\n+  }\n+}"}, {"sha": "fc40d341862e4a47b3fa9085fc5d00b3e1cec4fc", "filename": "libjava/java/util/regex/PatternSyntaxException.java", "status": "added", "additions": 131, "deletions": 0, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2f2457fa482356b5996a084d037d79fdc1a556f/libjava%2Fjava%2Futil%2Fregex%2FPatternSyntaxException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2f2457fa482356b5996a084d037d79fdc1a556f/libjava%2Fjava%2Futil%2Fregex%2FPatternSyntaxException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fregex%2FPatternSyntaxException.java?ref=a2f2457fa482356b5996a084d037d79fdc1a556f", "patch": "@@ -0,0 +1,131 @@\n+/* PatternSyntaxException - Indicates illegal pattern for regular expression.\n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package java.util.regex;\n+\n+/**\n+ * Indicates illegal pattern for regular expression.\n+ * Includes state to inspect the pattern and what and where the expression\n+ * was not valid regular expression.\n+ */\n+public class PatternSyntaxException extends IllegalArgumentException\n+{\n+\n+  /**\n+   * Human readable escription of the syntax error.\n+   */\n+  private final String desc;\n+\n+  /**\n+   * The original pattern that contained the syntax error.\n+   */\n+  private final String pattern;\n+  \n+  /**\n+   * Index of the first character in the String that was probably invalid,\n+   * or -1 when unknown.\n+   */\n+  private final int index;\n+\n+  /**\n+   * Creates a new PatternSyntaxException.\n+   *\n+   * @param description Human readable escription of the syntax error.\n+   * @param pattern The original pattern that contained the syntax error.\n+   * @param index Index of the first character in the String that was\n+   *        probably invalid, or -1 when unknown.\n+   */\n+  public PatternSyntaxException(String description,\n+\t\t                String pattern,\n+\t\t\t\tint index)\n+  {\n+    super(description);\n+    this.desc = description;\n+    this.pattern = pattern;\n+    this.index = index;\n+  }\n+\n+  /**\n+   * Returns a human readable escription of the syntax error.\n+   */\n+  public String getDescription()\n+  {\n+    return desc;\n+  }\n+\n+  /**\n+   * Returns the original pattern that contained the syntax error.\n+   */\n+  public String getPattern()\n+  {\n+    return pattern;\n+  }\n+\n+  /**\n+   * Returns the index of the first character in the String that was probably\n+   * invalid, or -1 when unknown.\n+   */\n+  public int getIndex()\n+  {\n+    return index;\n+  }\n+\n+  /**\n+   * Returns a string containing a line with the description, a line with\n+   * the original pattern and a line indicating with a ^ which character is\n+   * probably the first invalid character in the pattern if the index is not\n+   * negative.\n+   */\n+  public String getMessage()\n+  {\n+    String lineSep = System.getProperty(\"line.separator\");\n+    StringBuffer sb = new StringBuffer(desc);\n+    sb.append(lineSep);\n+    sb.append('\\t');\n+    sb.append(pattern);\n+    if (index != -1)\n+      {\n+\tsb.append(lineSep);\n+\tsb.append('\\t');\n+\tfor (int i=0; i<index; i++)\n+\t  sb.append(' ');\n+\tsb.append('^');\n+      }\n+    return sb.toString();\n+  }\n+\n+}"}]}