{"sha": "d0cb4c65915dde950c0602a79640f061a77522fa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDBjYjRjNjU5MTVkZGU5NTBjMDYwMmE3OTY0MGYwNjFhNzc1MjJmYQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-03-14T10:11:28Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-03-14T10:11:28Z"}, "message": "(fold): Call tree_int_cst_sgn.\n\n(fold, case *_DIV_EXPR): Add missing conversion.\n\nFrom-SVN: r6779", "tree": {"sha": "3d6ae1a519ccde6098b5c6e1de5997e69f2194c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3d6ae1a519ccde6098b5c6e1de5997e69f2194c7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d0cb4c65915dde950c0602a79640f061a77522fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0cb4c65915dde950c0602a79640f061a77522fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0cb4c65915dde950c0602a79640f061a77522fa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0cb4c65915dde950c0602a79640f061a77522fa/comments", "author": null, "committer": null, "parents": [{"sha": "153c149bec658b114e073e7037a9f809c1940ac3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/153c149bec658b114e073e7037a9f809c1940ac3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/153c149bec658b114e073e7037a9f809c1940ac3"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "57d866bbb7a559003a33134d3c2aee4667acb708", "filename": "gcc/fold-const.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0cb4c65915dde950c0602a79640f061a77522fa/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0cb4c65915dde950c0602a79640f061a77522fa/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=d0cb4c65915dde950c0602a79640f061a77522fa", "patch": "@@ -3978,7 +3978,7 @@ fold (expr)\n \t Look for NOPs and SAVE_EXPRs inside.  */\n \n       if (TREE_CODE (arg1) == INTEGER_CST\n-\t  && tree_int_cst_lt (integer_zero_node, arg1))\n+\t  && tree_int_cst_sgn (arg1) >= 0)\n \t{\n \t  int have_save_expr = 0;\n \t  tree c2 = integer_zero_node;\n@@ -4009,12 +4009,12 @@ fold (expr)\n \n \t  if (TREE_CODE (xarg0) == MULT_EXPR\n \t      && TREE_CODE (TREE_OPERAND (xarg0, 1)) == INTEGER_CST\n-\t      && tree_int_cst_lt (integer_zero_node, TREE_OPERAND (xarg0, 1))\n+\t      && tree_int_cst_sgn (TREE_OPERAND (xarg0, 1)) >= 0\n \t      && (integer_zerop (const_binop (TRUNC_MOD_EXPR,\n \t\t\t\t\t      TREE_OPERAND (xarg0, 1), arg1, 1))\n \t\t  || integer_zerop (const_binop (TRUNC_MOD_EXPR, arg1,\n \t\t\t\t\t\t TREE_OPERAND (xarg0, 1), 1)))\n-\t      && (tree_int_cst_lt (integer_zero_node, c2)\n+\t      && (tree_int_cst_sgn (c2) >= 0\n \t\t  || integer_zerop (const_binop (TRUNC_MOD_EXPR, c2,\n \t\t\t\t\t\t arg1, 1))))\n \t    {\n@@ -4035,7 +4035,7 @@ fold (expr)\n \t\t\t       const_binop (code, c2, c3, 1)));\n \n \t      if (! integer_onep (outer_div))\n-\t\tt = fold (build (code, type, t, outer_div));\n+\t\tt = fold (build (code, type, t, convert (type, outer_div)));\n \n \t      if (have_save_expr)\n \t\tt = save_expr (t);\n@@ -4091,7 +4091,7 @@ fold (expr)\n \t      && integer_zerop (const_binop (TRUNC_MOD_EXPR,\n \t\t\t\t\t     TREE_OPERAND (xarg0, 1),\n \t\t\t\t\t     arg1, 1))\n-\t      && tree_int_cst_lt (integer_zero_node, c2))\n+\t      && tree_int_cst_sgn (c2) >= 0)\n \t    /* The result is (C2%C3).  */\n \t    return omit_one_operand (type, const_binop (code, c2, arg1, 1),\n \t\t\t\t     TREE_OPERAND (xarg0, 0));\n@@ -4107,7 +4107,7 @@ fold (expr)\n \treturn non_lvalue (convert (type, arg0));\n       /* Since negative shift count is not well-defined,\n \t don't try to compute it in the compiler.  */\n-      if (tree_int_cst_lt (arg1, integer_zero_node))\n+      if (tree_int_cst_sgn (arg1) < 0)\n \treturn t;\n       goto binary;\n \n@@ -4309,7 +4309,7 @@ fold (expr)\n       /* Change X >= CST to X > (CST - 1) if CST is positive.  */\n       if (TREE_CODE (arg1) == INTEGER_CST\n \t  && TREE_CODE (arg0) != INTEGER_CST\n-\t  && ! tree_int_cst_lt (arg1, integer_one_node))\n+\t  && tree_int_cst_sgn (arg1) > 0)\n \t{\n \t  switch (TREE_CODE (t))\n \t    {"}]}