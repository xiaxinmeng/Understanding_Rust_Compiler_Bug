{"sha": "e338c25c4b366dcc55c939bc1c500652aa4577c9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTMzOGMyNWM0YjM2NmRjYzU1YzkzOWJjMWM1MDA2NTJhYTQ1NzdjOQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-05-10T19:34:19Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-05-10T19:34:19Z"}, "message": "i386.md (*movoi_internal_avx): Handle TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL and TARGET_SSE_TYPELESS_STORES.\n\n\t* config/i386/i386.md (*movoi_internal_avx): Handle\n\tTARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL and TARGET_SSE_TYPELESS_STORES.\n\t(*movti_internal_rex64): Handle TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL.\n\t(*movti_internal_sse): Ditto.\n\t(*movtf_internal): Ditto.\n\t* config/i386/sse.md (ssePSmode): New mode attribute.\n\t(*move<mode>_internal): Use ssePSmode.\n\t(*<sse>_movu<ssemodesuffix><avxsizesuffix>): Ditto.\n\t(*<sse2>_movdqu<avxsizesuffix>): Ditto.\n\t* config/i386/i386.c (standard_sse_constant_opcode): Do not handle\n\tTARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL here.\n\nFrom-SVN: r187372", "tree": {"sha": "39e59fe410bdbf39e28fe9824ac1d8bf0a89bef5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/39e59fe410bdbf39e28fe9824ac1d8bf0a89bef5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e338c25c4b366dcc55c939bc1c500652aa4577c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e338c25c4b366dcc55c939bc1c500652aa4577c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e338c25c4b366dcc55c939bc1c500652aa4577c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e338c25c4b366dcc55c939bc1c500652aa4577c9/comments", "author": null, "committer": null, "parents": [{"sha": "0b7ad29fc8eb5c67935335e54f0be27919cc12c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b7ad29fc8eb5c67935335e54f0be27919cc12c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b7ad29fc8eb5c67935335e54f0be27919cc12c3"}], "stats": {"total": 187, "additions": 107, "deletions": 80}, "files": [{"sha": "06834adab756679a84298a53129a2f16b8f0d772", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e338c25c4b366dcc55c939bc1c500652aa4577c9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e338c25c4b366dcc55c939bc1c500652aa4577c9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e338c25c4b366dcc55c939bc1c500652aa4577c9", "patch": "@@ -1,3 +1,17 @@\n+2012-05-10  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (*movoi_internal_avx): Handle\n+\tTARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL and TARGET_SSE_TYPELESS_STORES.\n+\t(*movti_internal_rex64): Handle TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL.\n+\t(*movti_internal_sse): Ditto.\n+\t(*movtf_internal): Ditto.\n+\t* config/i386/sse.md (ssePSmode): New mode attribute.\n+\t(*move<mode>_internal): Use ssePSmode.\n+\t(*<sse>_movu<ssemodesuffix><avxsizesuffix>): Ditto.\n+\t(*<sse2>_movdqu<avxsizesuffix>): Ditto.\n+\t* config/i386/i386.c (standard_sse_constant_opcode): Do not handle\n+\tTARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL here.\n+\n 2012-05-10  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gimplify.c (gimplify_decl_expr): For a TYPE_DECL, also gimplify the\n@@ -18,8 +32,7 @@\n \t* doc/extend.texi (X86 Built-in Functions, __builtin_cpu_init):\n \tDocument requirement to call in constructors.\n \n-\t* config/i386/i386.c: Update comments for i386-cpuinfo.c name\n-\tchange.\n+\t* config/i386/i386.c: Update comments for i386-cpuinfo.c name change.\n \n 2012-05-10  Richard Guenther  <rguenther@suse.de>\n "}, {"sha": "f09b2bb32892745cababb3dec7fb7b5396e163e2", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e338c25c4b366dcc55c939bc1c500652aa4577c9/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e338c25c4b366dcc55c939bc1c500652aa4577c9/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=e338c25c4b366dcc55c939bc1c500652aa4577c9", "patch": "@@ -8433,20 +8433,16 @@ standard_sse_constant_opcode (rtx insn, rtx x)\n       switch (get_attr_mode (insn))\n \t{\n \tcase MODE_TI:\n-\t  if (!TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL)\n-\t    return \"%vpxor\\t%0, %d0\";\n+\t  return \"%vpxor\\t%0, %d0\";\n \tcase MODE_V2DF:\n-\t  if (!TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL)\n-\t    return \"%vxorpd\\t%0, %d0\";\n+\t  return \"%vxorpd\\t%0, %d0\";\n \tcase MODE_V4SF:\n \t  return \"%vxorps\\t%0, %d0\";\n \n \tcase MODE_OI:\n-\t  if (!TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL)\n-\t    return \"vpxor\\t%x0, %x0, %x0\";\n+\t  return \"vpxor\\t%x0, %x0, %x0\";\n \tcase MODE_V4DF:\n-\t  if (!TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL)\n-\t    return \"vxorpd\\t%x0, %x0, %x0\";\n+\t  return \"vxorpd\\t%x0, %x0, %x0\";\n \tcase MODE_V8SF:\n \t  return \"vxorps\\t%x0, %x0, %x0\";\n "}, {"sha": "4a4a481976c71cd301653977a2bbcfc96d00e2ad", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 56, "deletions": 41, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e338c25c4b366dcc55c939bc1c500652aa4577c9/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e338c25c4b366dcc55c939bc1c500652aa4577c9/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=e338c25c4b366dcc55c939bc1c500652aa4577c9", "patch": "@@ -1810,8 +1810,8 @@\n    (set_attr \"length_immediate\" \"1\")])\n \n (define_insn \"*movoi_internal_avx\"\n-  [(set (match_operand:OI 0 \"nonimmediate_operand\" \"=x,x,m\")\n-\t(match_operand:OI 1 \"vector_move_operand\" \"C,xm,x\"))]\n+  [(set (match_operand:OI 0 \"nonimmediate_operand\" \"=x,x ,m\")\n+\t(match_operand:OI 1 \"vector_move_operand\"  \"C ,xm,x\"))]\n   \"TARGET_AVX && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n {\n   switch (which_alternative)\n@@ -1822,20 +1822,37 @@\n     case 2:\n       if (misaligned_operand (operands[0], OImode)\n \t  || misaligned_operand (operands[1], OImode))\n-\treturn \"vmovdqu\\t{%1, %0|%0, %1}\";\n+\t{\n+\t  if (get_attr_mode (insn) == MODE_V8SF)\n+\t    return \"vmovups\\t{%1, %0|%0, %1}\";\n+\t  else\n+\t    return \"vmovdqu\\t{%1, %0|%0, %1}\";\n+\t}\n       else\n-\treturn \"vmovdqa\\t{%1, %0|%0, %1}\";\n+\t{\n+\t  if (get_attr_mode (insn) == MODE_V8SF)\n+\t    return \"vmovaps\\t{%1, %0|%0, %1}\";\n+\t  else\n+\t    return \"vmovdqa\\t{%1, %0|%0, %1}\";\n+\t}\n     default:\n       gcc_unreachable ();\n     }\n }\n   [(set_attr \"type\" \"sselog1,ssemov,ssemov\")\n    (set_attr \"prefix\" \"vex\")\n-   (set_attr \"mode\" \"OI\")])\n+   (set (attr \"mode\")\n+\t(cond [(match_test \"TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\")\n+\t\t (const_string \"V8SF\")\n+\t       (and (eq_attr \"alternative\" \"2\")\n+\t\t    (match_test \"TARGET_SSE_TYPELESS_STORES\"))\n+\t\t (const_string \"V8SF\")\n+\t      ]\n+\t      (const_string \"OI\")))])\n \n (define_insn \"*movti_internal_rex64\"\n-  [(set (match_operand:TI 0 \"nonimmediate_operand\" \"=!r,o,x,x,xm\")\n-\t(match_operand:TI 1 \"general_operand\" \"riFo,riF,C,xm,x\"))]\n+  [(set (match_operand:TI 0 \"nonimmediate_operand\" \"=!r ,o  ,x,x ,m\")\n+\t(match_operand:TI 1 \"general_operand\"      \"riFo,riF,C,xm,x\"))]\n   \"TARGET_64BIT && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n {\n   switch (which_alternative)\n@@ -1871,18 +1888,16 @@\n   [(set_attr \"type\" \"*,*,sselog1,ssemov,ssemov\")\n    (set_attr \"prefix\" \"*,*,maybe_vex,maybe_vex,maybe_vex\")\n    (set (attr \"mode\")\n-   \t(cond [(eq_attr \"alternative\" \"2,3\")\n-\t\t (if_then_else\n-\t\t   (match_test \"optimize_function_for_size_p (cfun)\")\n-\t\t   (const_string \"V4SF\")\n-\t\t   (const_string \"TI\"))\n-\t       (eq_attr \"alternative\" \"4\")\n-\t\t (if_then_else\n-\t\t   (ior (match_test \"TARGET_SSE_TYPELESS_STORES\")\n-\t\t\t(match_test \"optimize_function_for_size_p (cfun)\"))\n-\t\t   (const_string \"V4SF\")\n-\t\t   (const_string \"TI\"))]\n-\t       (const_string \"DI\")))])\n+   \t(cond [(eq_attr \"alternative\" \"0,1\")\n+\t\t (const_string \"DI\")\n+\t       (ior (match_test \"TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\")\n+\t\t    (match_test \"optimize_function_for_size_p (cfun)\"))\n+\t\t (const_string \"V4SF\")\n+\t       (and (eq_attr \"alternative\" \"4\")\n+\t\t    (match_test \"TARGET_SSE_TYPELESS_STORES\"))\n+\t\t (const_string \"V4SF\")\n+\t       ]\n+\t       (const_string \"TI\")))])\n \n (define_split\n   [(set (match_operand:TI 0 \"nonimmediate_operand\")\n@@ -1893,8 +1908,8 @@\n   \"ix86_split_long_move (operands); DONE;\")\n \n (define_insn \"*movti_internal_sse\"\n-  [(set (match_operand:TI 0 \"nonimmediate_operand\" \"=x,x,m\")\n-\t(match_operand:TI 1 \"vector_move_operand\" \"C,xm,x\"))]\n+  [(set (match_operand:TI 0 \"nonimmediate_operand\" \"=x,x ,m\")\n+\t(match_operand:TI 1 \"vector_move_operand\"  \"C ,xm,x\"))]\n   \"TARGET_SSE && !TARGET_64BIT\n    && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n {\n@@ -1928,12 +1943,15 @@\n   [(set_attr \"type\" \"sselog1,ssemov,ssemov\")\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set (attr \"mode\")\n-\t(cond [(ior (not (match_test \"TARGET_SSE2\"))\n+\t(cond [(ior (match_test \"TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\")\n \t\t    (match_test \"optimize_function_for_size_p (cfun)\"))\n \t\t (const_string \"V4SF\")\n \t       (and (eq_attr \"alternative\" \"2\")\n \t\t    (match_test \"TARGET_SSE_TYPELESS_STORES\"))\n-\t\t (const_string \"V4SF\")]\n+\t\t (const_string \"V4SF\")\n+\t       (not (match_test \"TARGET_SSE2\"))\n+\t\t (const_string \"V4SF\")\n+\t      ]\n \t      (const_string \"TI\")))])\n \n (define_insn \"*movdi_internal_rex64\"\n@@ -2813,8 +2831,8 @@\n   \"ix86_expand_move (<MODE>mode, operands); DONE;\")\n \n (define_insn \"*movtf_internal\"\n-  [(set (match_operand:TF 0 \"nonimmediate_operand\" \"=x,m,x,?*r ,!o\")\n-\t(match_operand:TF 1 \"general_operand\"\t   \"xm,x,C,*roF,F*r\"))]\n+  [(set (match_operand:TF 0 \"nonimmediate_operand\" \"=x,x ,m,?*r ,!o\")\n+\t(match_operand:TF 1 \"general_operand\"\t   \"C ,xm,x,*roF,F*r\"))]\n   \"TARGET_SSE2\n    && !(MEM_P (operands[0]) && MEM_P (operands[1]))\n    && (!can_create_pseudo_p ()\n@@ -2829,7 +2847,9 @@\n   switch (which_alternative)\n     {\n     case 0:\n+      return standard_sse_constant_opcode (insn, operands[1]);\n     case 1:\n+    case 2:\n       /* Handle misaligned load/store since we\n          don't have movmisaligntf pattern. */\n       if (misaligned_operand (operands[0], TFmode)\n@@ -2848,9 +2868,6 @@\n \t    return \"%vmovdqa\\t{%1, %0|%0, %1}\";\n \t}\n \n-    case 2:\n-      return standard_sse_constant_opcode (insn, operands[1]);\n-\n     case 3:\n     case 4:\n \treturn \"#\";\n@@ -2859,21 +2876,19 @@\n       gcc_unreachable ();\n     }\n }\n-  [(set_attr \"type\" \"ssemov,ssemov,sselog1,*,*\")\n+  [(set_attr \"type\" \"sselog1,ssemov,ssemov,*,*\")\n    (set_attr \"prefix\" \"maybe_vex,maybe_vex,maybe_vex,*,*\")\n    (set (attr \"mode\")\n-        (cond [(eq_attr \"alternative\" \"0,2\")\n-\t\t (if_then_else\n-\t\t   (match_test \"optimize_function_for_size_p (cfun)\")\n-\t\t   (const_string \"V4SF\")\n-\t\t   (const_string \"TI\"))\n-\t       (eq_attr \"alternative\" \"1\")\n-\t\t (if_then_else\n-\t\t   (ior (match_test \"TARGET_SSE_TYPELESS_STORES\")\n-\t\t\t(match_test \"optimize_function_for_size_p (cfun)\"))\n-\t\t   (const_string \"V4SF\")\n-\t\t   (const_string \"TI\"))]\n-\t       (const_string \"DI\")))])\n+        (cond [(eq_attr \"alternative\" \"3,4\")\n+\t\t (const_string \"DI\")\n+\t       (ior (match_test \"TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\")\n+\t\t    (match_test \"optimize_function_for_size_p (cfun)\"))\n+\t\t (const_string \"V4SF\")\n+\t       (and (eq_attr \"alternative\" \"2\")\n+\t\t    (match_test \"TARGET_SSE_TYPELESS_STORES\"))\n+\t\t (const_string \"V4SF\")\n+\t       ]\n+\t       (const_string \"TI\")))])\n \n ;; Possible store forwarding (partial memory) stall in alternative 4.\n (define_insn \"*movxf_internal\""}, {"sha": "a014f05b03c0f380119d5515f92e545529f8e597", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 32, "deletions": 29, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e338c25c4b366dcc55c939bc1c500652aa4577c9/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e338c25c4b366dcc55c939bc1c500652aa4577c9/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=e338c25c4b366dcc55c939bc1c500652aa4577c9", "patch": "@@ -337,6 +337,16 @@\n    (V8SF \"V4SF\") (V4DF \"V2DF\")\n    (V4SF \"V2SF\")])\n \n+;; Mapping of vector modes ti packed single mode of the same size\n+(define_mode_attr ssePSmode\n+  [(V32QI \"V8SF\") (V16QI \"V4SF\")\n+   (V16HI \"V8SF\") (V8HI \"V4SF\")\n+   (V8SI \"V8SF\") (V4SI \"V4SF\")\n+   (V4DI \"V8SF\") (V2DI \"V4SF\")\n+   (V2TI \"V8SF\") (V1TI \"V4SF\")\n+   (V8SF \"V8SF\") (V4SF \"V4SF\")\n+   (V4DF \"V8SF\") (V2DF \"V4SF\")])\n+\n ;; Mapping of vector modes back to the scalar modes\n (define_mode_attr ssescalarmode\n   [(V32QI \"QI\") (V16HI \"HI\") (V8SI \"SI\") (V4DI \"DI\")\n@@ -420,7 +430,7 @@\n })\n \n (define_insn \"*mov<mode>_internal\"\n-  [(set (match_operand:V16 0 \"nonimmediate_operand\" \"=x,x ,m\")\n+  [(set (match_operand:V16 0 \"nonimmediate_operand\"               \"=x,x ,m\")\n \t(match_operand:V16 1 \"nonimmediate_or_sse_const_operand\"  \"C ,xm,x\"))]\n   \"TARGET_SSE\n    && (register_operand (operands[0], <MODE>mode)\n@@ -471,21 +481,18 @@\n   [(set_attr \"type\" \"sselog1,ssemov,ssemov\")\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set (attr \"mode\")\n-\t(cond [(and (eq_attr \"alternative\" \"1,2\")\n-\t      \t    (match_test \"TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\"))\n-\t\t (if_then_else\n-\t\t    (match_test \"GET_MODE_SIZE (<MODE>mode) > 16\")\n-\t\t    (const_string \"V8SF\")\n-\t\t    (const_string \"V4SF\"))\n+\t(cond [(match_test \"TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\")\n+\t\t (const_string \"<ssePSmode>\")\n+\t       (and (eq_attr \"alternative\" \"2\")\n+\t\t    (match_test \"TARGET_SSE_TYPELESS_STORES\"))\n+\t\t (const_string \"<ssePSmode>\")\n \t       (match_test \"TARGET_AVX\")\n \t\t (const_string \"<sseinsnmode>\")\n-\t       (ior (and (eq_attr \"alternative\" \"1,2\")\n-\t\t\t (match_test \"optimize_function_for_size_p (cfun)\"))\n-\t\t    (and (eq_attr \"alternative\" \"2\")\n-\t\t\t (match_test \"TARGET_SSE_TYPELESS_STORES\")))\n+\t       (ior (not (match_test \"TARGET_SSE2\"))\n+\t\t    (match_test \"optimize_function_for_size_p (cfun)\"))\n \t\t (const_string \"V4SF\")\n \t      ]\n-\t  (const_string \"<sseinsnmode>\")))])\n+\t      (const_string \"<sseinsnmode>\")))])\n \n (define_insn \"sse2_movq128\"\n   [(set (match_operand:V2DI 0 \"register_operand\" \"=x\")\n@@ -610,18 +617,16 @@\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set (attr \"mode\")\n \t(cond [(match_test \"TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\")\n-\t\t (if_then_else\n-\t\t    (match_test \"GET_MODE_SIZE (<MODE>mode) > 16\")\n-\t\t    (const_string \"V8SF\")\n-\t\t    (const_string \"V4SF\"))\n+\t\t (const_string \"<ssePSmode>\")\n+\t       (and (eq_attr \"alternative\" \"1\")\n+\t\t    (match_test \"TARGET_SSE_TYPELESS_STORES\"))\n+\t\t (const_string \"<ssePSmode>\")\n \t       (match_test \"TARGET_AVX\")\n \t\t (const_string \"<MODE>\")\n-\t       (ior (match_test \"optimize_function_for_size_p (cfun)\")\n-\t\t    (and (eq_attr \"alternative\" \"1\")\n-\t\t\t (match_test \"TARGET_SSE_TYPELESS_STORES\")))\n-\t         (const_string \"V4SF\")\n+\t       (match_test \"optimize_function_for_size_p (cfun)\")\n+\t\t (const_string \"V4SF\")\n \t      ]\n-\t(const_string \"<MODE>\")))])\n+\t      (const_string \"<MODE>\")))])\n \n (define_expand \"<sse2>_movdqu<avxsizesuffix>\"\n   [(set (match_operand:VI1 0 \"nonimmediate_operand\")\n@@ -658,18 +663,16 @@\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set (attr \"mode\")\n \t(cond [(match_test \"TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\")\n-\t\t (if_then_else\n-\t\t    (match_test \"GET_MODE_SIZE (<MODE>mode) > 16\")\n-\t\t    (const_string \"V8SF\")\n-\t\t    (const_string \"V4SF\"))\n+\t\t (const_string \"<ssePSmode>\")\n+\t       (and (eq_attr \"alternative\" \"1\")\n+\t\t    (match_test \"TARGET_SSE_TYPELESS_STORES\"))\n+\t\t (const_string \"<ssePSmode>\")\n \t       (match_test \"TARGET_AVX\")\n \t\t (const_string \"<sseinsnmode>\")\n-\t       (ior (match_test \"optimize_function_for_size_p (cfun)\")\n-\t\t    (and (eq_attr \"alternative\" \"1\")\n-\t\t\t (match_test \"TARGET_SSE_TYPELESS_STORES\")))\n+\t       (match_test \"optimize_function_for_size_p (cfun)\")\n \t         (const_string \"V4SF\")\n \t      ]\n-\t(const_string \"<sseinsnmode>\")))])\n+\t      (const_string \"<sseinsnmode>\")))])\n \n (define_insn \"<sse3>_lddqu<avxsizesuffix>\"\n   [(set (match_operand:VI1 0 \"register_operand\" \"=x\")"}]}