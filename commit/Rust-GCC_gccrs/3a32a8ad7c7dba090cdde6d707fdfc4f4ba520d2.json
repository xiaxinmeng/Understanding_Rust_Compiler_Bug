{"sha": "3a32a8ad7c7dba090cdde6d707fdfc4f4ba520d2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2EzMmE4YWQ3YzdkYmEwOTBjZGRlNmQ3MDdmZGZjNGY0YmE1MjBkMg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-08-26T15:55:31Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-08-26T23:12:54Z"}, "message": "libstdc:: Use markdown for Doxygen comments in std::function\n\nSigned-off-by: Jonathan Wakely <jwakely@redhat.com>\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/std_function.h (function): Adjust doxygen\n\tcomments.\n\t* include/bits/unique_ptr.h (make_unique_for_overwrite):\n\tChange parameter name to match doxygen comment.", "tree": {"sha": "bc21699d0055e32af25bb21e80bcc659d37b3208", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc21699d0055e32af25bb21e80bcc659d37b3208"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3a32a8ad7c7dba090cdde6d707fdfc4f4ba520d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a32a8ad7c7dba090cdde6d707fdfc4f4ba520d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a32a8ad7c7dba090cdde6d707fdfc4f4ba520d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a32a8ad7c7dba090cdde6d707fdfc4f4ba520d2/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d38d26be33aba5d4c12429478375a47c474124d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d38d26be33aba5d4c12429478375a47c474124d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d38d26be33aba5d4c12429478375a47c474124d2"}], "stats": {"total": 101, "additions": 50, "deletions": 51}, "files": [{"sha": "82c932e0db550fd712a56c015792de37120c18c1", "filename": "libstdc++-v3/include/bits/std_function.h", "status": "modified", "additions": 48, "deletions": 49, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a32a8ad7c7dba090cdde6d707fdfc4f4ba520d2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_function.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a32a8ad7c7dba090cdde6d707fdfc4f4ba520d2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_function.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_function.h?ref=3a32a8ad7c7dba090cdde6d707fdfc4f4ba520d2", "patch": "@@ -456,16 +456,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n \n       /**\n-       *  @brief %Function assignment operator.\n+       *  @brief Function assignment operator.\n        *  @param __x A %function with identical call signature.\n-       *  @post @c (bool)*this == (bool)x\n-       *  @returns @c *this\n+       *  @post `(bool)*this == (bool)x`\n+       *  @returns `*this`\n        *\n-       *  The target of @a __x is copied to @c *this. If @a __x has no\n-       *  target, then @c *this will be empty.\n+       *  The target of `__x` is copied to `*this`. If `__x` has no\n+       *  target, then `*this` will be empty.\n        *\n-       *  If @a __x targets a function pointer or a reference to a function\n-       *  object, then this operation will not throw an %exception.\n+       *  If `__x` targets a function pointer or a reference to a function\n+       *  object, then this operation will not throw an exception.\n        */\n       function&\n       operator=(const function& __x)\n@@ -475,15 +475,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n \n       /**\n-       *  @brief %Function move-assignment operator.\n+       *  @brief Function move-assignment operator.\n        *  @param __x A %function rvalue with identical call signature.\n-       *  @returns @c *this\n+       *  @returns `*this`\n        *\n-       *  The target of @a __x is moved to @c *this. If @a __x has no\n-       *  target, then @c *this will be empty.\n+       *  The target of `__x` is moved to `*this`. If `__x` has no\n+       *  target, then `*this` will be empty.\n        *\n-       *  If @a __x targets a function pointer or a reference to a function\n-       *  object, then this operation will not throw an %exception.\n+       *  If `__x` targets a function pointer or a reference to a function\n+       *  object, then this operation will not throw an exception.\n        */\n       function&\n       operator=(function&& __x) noexcept\n@@ -493,11 +493,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n \n       /**\n-       *  @brief %Function assignment to zero.\n-       *  @post @c !(bool)*this\n-       *  @returns @c *this\n+       *  @brief Function assignment to empty.\n+       *  @post `!(bool)*this`\n+       *  @returns `*this`\n        *\n-       *  The target of @c *this is deallocated, leaving it empty.\n+       *  The target of `*this` is deallocated, leaving it empty.\n        */\n       function&\n       operator=(nullptr_t) noexcept\n@@ -512,20 +512,21 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n \n       /**\n-       *  @brief %Function assignment to a new target.\n-       *  @param __f A %function object that is callable with parameters of\n-       *  type @c T1, @c T2, ..., @c TN and returns a value convertible\n-       *  to @c Res.\n-       *  @return @c *this\n+       *  @brief Function assignment to a new target.\n+       *  @param __f  A function object that is callable with parameters of\n+       *              type  `_ArgTypes...` and returns a value convertible\n+       *              to `_Res`.\n+       *  @return `*this`\n+       *  @since C++11\n        *\n-       *  This  %function object wrapper will target a copy of @a\n-       *  __f. If @a __f is @c reference_wrapper<F>, then this function\n-       *  object will contain a reference to the function object @c\n-       *  __f.get(). If @a __f is a NULL function pointer or NULL\n-       *  pointer-to-member, @c this object will be empty.\n+       *  This function object wrapper will target a copy of `__f`. If `__f`\n+       *  is `reference_wrapper<F>`, then this function object will contain\n+       *  a reference to the function object `__f.get()`. If `__f` is a null\n+       *  function pointer or null pointer-to-member, this object will be\n+       *  empty.\n        *\n-       *  If @a __f is a non-NULL function pointer or an object of type @c\n-       *  reference_wrapper<F>, this function will not throw.\n+       *  If `__f` is a non-null function pointer or an object of type\n+       *  `reference_wrapper<F>`, this function will not throw.\n        */\n       template<typename _Functor>\n \t_Requires<_Callable<_Functor>, function&>\n@@ -551,8 +552,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  @brief Swap the targets of two %function objects.\n        *  @param __x A %function with identical call signature.\n        *\n-       *  Swap the targets of @c this function object and @a __f. This\n-       *  function will not throw an %exception.\n+       *  Swap the targets of `this` function object and `__f`.\n+       *  This function will not throw exceptions.\n        */\n       void swap(function& __x) noexcept\n       {\n@@ -566,23 +567,23 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       /**\n        *  @brief Determine if the %function wrapper has a target.\n        *\n-       *  @return @c true when this %function object contains a target,\n-       *  or @c false when it is empty.\n+       *  @return `true` when this function object contains a target,\n+       *  or `false` when it is empty.\n        *\n-       *  This function will not throw an %exception.\n+       *  This function will not throw exceptions.\n        */\n       explicit operator bool() const noexcept\n       { return !_M_empty(); }\n \n       // [3.7.2.4] function invocation\n \n       /**\n-       *  @brief Invokes the function targeted by @c *this.\n+       *  @brief Invokes the function targeted by `*this`.\n        *  @returns the result of the target.\n-       *  @throws bad_function_call when @c !(bool)*this\n+       *  @throws `bad_function_call` when `!(bool)*this`\n        *\n        *  The function call operator invokes the target function object\n-       *  stored by @c this.\n+       *  stored by `this`.\n        */\n       _Res\n       operator()(_ArgTypes... __args) const\n@@ -599,9 +600,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  wrapper.\n        *\n        *  @returns the type identifier of the target function object, or\n-       *  @c typeid(void) if @c !(bool)*this.\n+       *  `typeid(void)` if `!(bool)*this`.\n        *\n-       *  This function will not throw an %exception.\n+       *  This function will not throw exceptions.\n        */\n       const type_info&\n       target_type() const noexcept\n@@ -621,7 +622,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  @brief Access the stored target function object.\n        *\n        *  @return Returns a pointer to the stored target function object,\n-       *  if @c typeid(_Functor).equals(target_type()); otherwise, a null\n+       *  if `typeid(_Functor).equals(target_type())`; otherwise, a null\n        *  pointer.\n        *\n        * This function does not throw exceptions.\n@@ -709,11 +710,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // [20.7.15.2.6] null pointer comparisons\n \n   /**\n-   *  @brief Compares a polymorphic function object wrapper against 0\n-   *  (the NULL pointer).\n-   *  @returns @c true if the wrapper has no target, @c false otherwise\n+   *  @brief Test whether a polymorphic function object wrapper is empty.\n+   *  @returns `true` if the wrapper has no target, `false` otherwise\n    *\n-   *  This function will not throw an %exception.\n+   *  This function will not throw exceptions.\n    */\n   template<typename _Res, typename... _Args>\n     inline bool\n@@ -728,11 +728,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { return !static_cast<bool>(__f); }\n \n   /**\n-   *  @brief Compares a polymorphic function object wrapper against 0\n-   *  (the NULL pointer).\n-   *  @returns @c false if the wrapper has no target, @c true otherwise\n+   *  @brief Test whether a polymorphic function object wrapper is non-empty.\n+   *  @returns `false` if the wrapper has no target, `true` otherwise\n    *\n-   *  This function will not throw an %exception.\n+   *  This function will not throw exceptions.\n    */\n   template<typename _Res, typename... _Args>\n     inline bool\n@@ -751,7 +750,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   /**\n    *  @brief Swap the targets of two polymorphic function object wrappers.\n    *\n-   *  This function will not throw an %exception.\n+   *  This function will not throw exceptions.\n    */\n   // _GLIBCXX_RESOLVE_LIB_DEFECTS\n   // 2062. Effect contradictions w/o no-throw guarantee of std::function swaps"}, {"sha": "62ec1b52ecd2ac6c377af9af3d64638ae4439df2", "filename": "libstdc++-v3/include/bits/unique_ptr.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a32a8ad7c7dba090cdde6d707fdfc4f4ba520d2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a32a8ad7c7dba090cdde6d707fdfc4f4ba520d2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h?ref=3a32a8ad7c7dba090cdde6d707fdfc4f4ba520d2", "patch": "@@ -1027,8 +1027,8 @@ namespace __detail\n    */\n   template<typename _Tp>\n     inline __detail::__unique_ptr_array_t<_Tp>\n-    make_unique_for_overwrite(size_t __n)\n-    { return unique_ptr<_Tp>(new remove_extent_t<_Tp>[__n]); }\n+    make_unique_for_overwrite(size_t __num)\n+    { return unique_ptr<_Tp>(new remove_extent_t<_Tp>[__num]); }\n \n   /** Disable std::make_unique_for_overwrite for arrays of known bound.\n    *  @tparam _Tp An array type of known bound, such as `U[N]`."}]}