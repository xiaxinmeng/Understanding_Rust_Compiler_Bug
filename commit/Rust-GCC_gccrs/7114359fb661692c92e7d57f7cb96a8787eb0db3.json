{"sha": "7114359fb661692c92e7d57f7cb96a8787eb0db3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzExNDM1OWZiNjYxNjkyYzkyZTdkNTdmN2NiOTZhODc4N2ViMGRiMw==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2007-06-04T23:19:19Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2007-06-04T23:19:19Z"}, "message": "c-tree.h (start_enum): Update.\n\n\t* c-tree.h (start_enum): Update.\n\t(build_enumerator): Likewise.\n\t* c-decl.c (enum_next_value): Removed.\n\t(enum_overflow): Likewise.\n\t(start_enum): Add c_enum_contents argument.  Don't use globals.\n\t(build_enumerator): Likewise.\n\t* c-tree.h (struct c_enum_contents): New struct.\n\nFrom-SVN: r125322", "tree": {"sha": "6521609daacb24a634b68fedc99b126c449c8899", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6521609daacb24a634b68fedc99b126c449c8899"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7114359fb661692c92e7d57f7cb96a8787eb0db3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7114359fb661692c92e7d57f7cb96a8787eb0db3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7114359fb661692c92e7d57f7cb96a8787eb0db3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7114359fb661692c92e7d57f7cb96a8787eb0db3/comments", "author": null, "committer": null, "parents": [{"sha": "762f7d9d8aa388aba0272677ab170741fe218260", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/762f7d9d8aa388aba0272677ab170741fe218260", "html_url": "https://github.com/Rust-GCC/gccrs/commit/762f7d9d8aa388aba0272677ab170741fe218260"}], "stats": {"total": 63, "additions": 37, "deletions": 26}, "files": [{"sha": "98212c37554ddd9c8f88ac94252bff1cba992695", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7114359fb661692c92e7d57f7cb96a8787eb0db3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7114359fb661692c92e7d57f7cb96a8787eb0db3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7114359fb661692c92e7d57f7cb96a8787eb0db3", "patch": "@@ -1,3 +1,13 @@\n+2007-06-04  Tom Tromey  <tromey@redhat.com>\n+\n+\t* c-tree.h (start_enum): Update.\n+\t(build_enumerator): Likewise.\n+\t* c-decl.c (enum_next_value): Removed.\n+\t(enum_overflow): Likewise.\n+\t(start_enum): Add c_enum_contents argument.  Don't use globals.\n+\t(build_enumerator): Likewise.\n+\t* c-tree.h (struct c_enum_contents): New struct.\n+\n 2007-06-04  Tom Tromey  <tromey@redhat.com>\n \n \t* c-common.c (c_common_get_alias_set): Fix indentation."}, {"sha": "838869c1782bf81579a95378f85783fd16672163", "filename": "gcc/c-decl.c", "status": "modified", "additions": 9, "deletions": 20, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7114359fb661692c92e7d57f7cb96a8787eb0db3/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7114359fb661692c92e7d57f7cb96a8787eb0db3/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=7114359fb661692c92e7d57f7cb96a8787eb0db3", "patch": "@@ -81,18 +81,6 @@ location_t pending_invalid_xref_location;\n /* True means we've initialized exception handling.  */\n bool c_eh_initialized_p;\n \n-/* While defining an enum type, this is 1 plus the last enumerator\n-   constant value.  Note that will do not have to save this or `enum_overflow'\n-   around nested function definition since such a definition could only\n-   occur in an enum value expression and we don't use these variables in\n-   that case.  */\n-\n-static tree enum_next_value;\n-\n-/* Nonzero means that there was overflow computing enum_next_value.  */\n-\n-static int enum_overflow;\n-\n /* The file and line that the prototype came from if this is an\n    old-style definition; used for diagnostics in\n    store_parm_decls_oldstyle.  */\n@@ -5801,7 +5789,7 @@ layout_array_type (tree t)\n    may be used to declare the individual values as they are read.  */\n \n tree\n-start_enum (tree name)\n+start_enum (struct c_enum_contents *the_enum, tree name)\n {\n   tree enumtype = 0;\n \n@@ -5833,8 +5821,8 @@ start_enum (tree name)\n       TYPE_VALUES (enumtype) = 0;\n     }\n \n-  enum_next_value = integer_zero_node;\n-  enum_overflow = 0;\n+  the_enum->enum_next_value = integer_zero_node;\n+  the_enum->enum_overflow = 0;\n \n   if (flag_short_enums)\n     TYPE_PACKED (enumtype) = 1;\n@@ -5987,7 +5975,7 @@ finish_enum (tree enumtype, tree values, tree attributes)\n    Assignment of sequential values by default is handled here.  */\n \n tree\n-build_enumerator (tree name, tree value)\n+build_enumerator (struct c_enum_contents *the_enum, tree name, tree value)\n {\n   tree decl, type;\n \n@@ -6017,8 +6005,8 @@ build_enumerator (tree name, tree value)\n      in the default.  */\n   if (value == 0)\n     {\n-      value = enum_next_value;\n-      if (enum_overflow)\n+      value = the_enum->enum_next_value;\n+      if (the_enum->enum_overflow)\n \terror (\"overflow in enumeration values\");\n     }\n \n@@ -6031,8 +6019,9 @@ build_enumerator (tree name, tree value)\n     }\n \n   /* Set basis for default for next value.  */\n-  enum_next_value = build_binary_op (PLUS_EXPR, value, integer_one_node, 0);\n-  enum_overflow = tree_int_cst_lt (enum_next_value, value);\n+  the_enum->enum_next_value = build_binary_op (PLUS_EXPR, value,\n+\t\t\t\t\t       integer_one_node, 0);\n+  the_enum->enum_overflow = tree_int_cst_lt (the_enum->enum_next_value, value);\n \n   /* Now create a declaration for the enum value name.  */\n "}, {"sha": "39c63d5945aa2cef308f5aa026a3e8e9e86f23cd", "filename": "gcc/c-parser.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7114359fb661692c92e7d57f7cb96a8787eb0db3/gcc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7114359fb661692c92e7d57f7cb96a8787eb0db3/gcc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parser.c?ref=7114359fb661692c92e7d57f7cb96a8787eb0db3", "patch": "@@ -1,6 +1,6 @@\n /* Parser for C and Objective-C.\n    Copyright (C) 1987, 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000, 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n+   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007 Free Software Foundation, Inc.\n \n    Parser actions based on the old Bison parser; structure somewhat\n    influenced by and fragments based on the C++ parser.\n@@ -1698,7 +1698,8 @@ c_parser_enum_specifier (c_parser *parser)\n   if (c_parser_next_token_is (parser, CPP_OPEN_BRACE))\n     {\n       /* Parse an enum definition.  */\n-      tree type = start_enum (ident);\n+      struct c_enum_contents the_enum;\n+      tree type = start_enum (&the_enum, ident);\n       tree postfix_attrs;\n       /* We chain the enumerators in reverse order, then put them in\n \t forward order at the end.  */\n@@ -1726,7 +1727,7 @@ c_parser_enum_specifier (c_parser *parser)\n \t    }\n \t  else\n \t    enum_value = NULL_TREE;\n-\t  enum_decl = build_enumerator (enum_id, enum_value);\n+\t  enum_decl = build_enumerator (&the_enum, enum_id, enum_value);\n \t  TREE_CHAIN (enum_decl) = values;\n \t  values = enum_decl;\n \t  seen_comma = false;"}, {"sha": "e5f4a153fd550a24e7e770df80cda0f3c1c25922", "filename": "gcc/c-tree.h", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7114359fb661692c92e7d57f7cb96a8787eb0db3/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7114359fb661692c92e7d57f7cb96a8787eb0db3/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=7114359fb661692c92e7d57f7cb96a8787eb0db3", "patch": "@@ -1,6 +1,6 @@\n /* Definitions for C parsing and type checking.\n    Copyright (C) 1987, 1993, 1994, 1995, 1997, 1998,\n-   1999, 2000, 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n+   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -425,6 +425,17 @@ struct c_label_context_vm\n   struct c_label_context_vm *next;\n };\n \n+/* Used when parsing an enum.  Initialized by start_enum.  */\n+struct c_enum_contents\n+{\n+  /* While defining an enum type, this is 1 plus the last enumerator\n+     constant value.  */\n+  tree enum_next_value;\n+\n+  /* Nonzero means that there was overflow computing enum_next_value.  */\n+  int enum_overflow;\n+};\n+\n \f\n /* in c-parser.c */\n extern void c_parse_init (void);\n@@ -448,7 +459,7 @@ extern void c_print_identifier (FILE *, tree, int);\n extern int quals_from_declspecs (const struct c_declspecs *);\n extern struct c_declarator *build_array_declarator (tree, struct c_declspecs *,\n \t\t\t\t\t\t    bool, bool);\n-extern tree build_enumerator (tree, tree);\n+extern tree build_enumerator (struct c_enum_contents *, tree, tree);\n extern tree check_for_loop_decls (void);\n extern void mark_forward_parm_decls (void);\n extern void declare_parm_level (void);\n@@ -476,7 +487,7 @@ extern struct c_declarator *set_array_declarator_inner (struct c_declarator *,\n extern tree c_builtin_function (tree);\n extern void shadow_tag (const struct c_declspecs *);\n extern void shadow_tag_warned (const struct c_declspecs *, int);\n-extern tree start_enum (tree);\n+extern tree start_enum (struct c_enum_contents *, tree);\n extern int  start_function (struct c_declspecs *, struct c_declarator *, tree);\n extern tree start_decl (struct c_declarator *, struct c_declspecs *, bool,\n \t\t\ttree);"}]}