{"sha": "582c24e9fe81f75684892de0bf580e6918695dd9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTgyYzI0ZTlmZTgxZjc1Njg0ODkyZGUwYmY1ODBlNjkxODY5NWRkOQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2021-08-03T23:22:48Z"}, "committer": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2021-08-05T18:41:57Z"}, "message": "runtime: extend internal atomics to comply with sync/atomic\n\nThis is the gofrontend version of https://golang.org/cl/289152.\n\nReviewed-on: https://go-review.googlesource.com/c/gofrontend/+/339690", "tree": {"sha": "881521a731703960ecee3338ddffddbff4f1fa14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/881521a731703960ecee3338ddffddbff4f1fa14"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/582c24e9fe81f75684892de0bf580e6918695dd9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/582c24e9fe81f75684892de0bf580e6918695dd9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/582c24e9fe81f75684892de0bf580e6918695dd9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/582c24e9fe81f75684892de0bf580e6918695dd9/comments", "author": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c8b024fa4b76bfd914e96dd3cecfbb6ee8e91316", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8b024fa4b76bfd914e96dd3cecfbb6ee8e91316", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8b024fa4b76bfd914e96dd3cecfbb6ee8e91316"}], "stats": {"total": 155, "additions": 129, "deletions": 26}, "files": [{"sha": "19ab2de5c18b351c1967ad9d14d8992d55b1b3a8", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/582c24e9fe81f75684892de0bf580e6918695dd9/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/582c24e9fe81f75684892de0bf580e6918695dd9/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=582c24e9fe81f75684892de0bf580e6918695dd9", "patch": "@@ -1,4 +1,4 @@\n-b47bcf942daa9a0c252db9b57b8f138adbfcdaa2\n+32590102c464679f845667b5554e1dcce2549ad2\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "33177a709ab5af9ddcb280f339fb664026be4601", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 23, "deletions": 25, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/582c24e9fe81f75684892de0bf580e6918695dd9/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/582c24e9fe81f75684892de0bf580e6918695dd9/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=582c24e9fe81f75684892de0bf580e6918695dd9", "patch": "@@ -11590,12 +11590,10 @@ Call_expression::intrinsify(Gogo* gogo,\n       // sync/atomic functions and runtime/internal/atomic functions\n       // are very similar. In order not to duplicate code, we just\n       // redirect to the latter and let the code below to handle them.\n-      // In case there is no equivalent functions (slight variance\n-      // in types), we just make an artificial name (begin with '$').\n       // Note: no StorePointer, SwapPointer, and CompareAndSwapPointer,\n       // as they need write barriers.\n       if (name == \"LoadInt32\")\n-        name = \"$Loadint32\";\n+        name = \"Loadint32\";\n       else if (name == \"LoadInt64\")\n         name = \"Loadint64\";\n       else if (name == \"LoadUint32\")\n@@ -11607,17 +11605,17 @@ Call_expression::intrinsify(Gogo* gogo,\n       else if (name == \"LoadPointer\")\n         name = \"Loadp\";\n       else if (name == \"StoreInt32\")\n-        name = \"$Storeint32\";\n+        name = \"Storeint32\";\n       else if (name == \"StoreInt64\")\n-        name = \"$Storeint64\";\n+        name = \"Storeint64\";\n       else if (name == \"StoreUint32\")\n         name = \"Store\";\n       else if (name == \"StoreUint64\")\n         name = \"Store64\";\n       else if (name == \"StoreUintptr\")\n         name = \"Storeuintptr\";\n       else if (name == \"AddInt32\")\n-        name = \"$Xaddint32\";\n+        name = \"Xaddint32\";\n       else if (name == \"AddInt64\")\n         name = \"Xaddint64\";\n       else if (name == \"AddUint32\")\n@@ -11627,19 +11625,19 @@ Call_expression::intrinsify(Gogo* gogo,\n       else if (name == \"AddUintptr\")\n         name = \"Xadduintptr\";\n       else if (name == \"SwapInt32\")\n-        name = \"$Xchgint32\";\n+        name = \"Xchgint32\";\n       else if (name == \"SwapInt64\")\n-        name = \"$Xchgint64\";\n+        name = \"Xchgint64\";\n       else if (name == \"SwapUint32\")\n         name = \"Xchg\";\n       else if (name == \"SwapUint64\")\n         name = \"Xchg64\";\n       else if (name == \"SwapUintptr\")\n         name = \"Xchguintptr\";\n       else if (name == \"CompareAndSwapInt32\")\n-        name = \"$Casint32\";\n+        name = \"Casint32\";\n       else if (name == \"CompareAndSwapInt64\")\n-        name = \"$Casint64\";\n+        name = \"Casint64\";\n       else if (name == \"CompareAndSwapUint32\")\n         name = \"Cas\";\n       else if (name == \"CompareAndSwapUint64\")\n@@ -11875,7 +11873,7 @@ Call_expression::intrinsify(Gogo* gogo,\n \n       if ((name == \"Load\" || name == \"Load64\" || name == \"Loadint64\" || name == \"Loadp\"\n            || name == \"Loaduint\" || name == \"Loaduintptr\" || name == \"LoadAcq\"\n-           || name == \"$Loadint32\")\n+           || name == \"Loadint32\")\n           && this->args_ != NULL && this->args_->size() == 1)\n         {\n           if (int_size < 8 && (name == \"Load64\" || name == \"Loadint64\"))\n@@ -11895,7 +11893,7 @@ Call_expression::intrinsify(Gogo* gogo,\n               code = Runtime::ATOMIC_LOAD_8;\n               res_type = uint64_type;\n             }\n-          else if (name == \"$Loadint32\")\n+          else if (name == \"Loadint32\")\n             {\n               code = Runtime::ATOMIC_LOAD_4;\n               res_type = int32_type;\n@@ -11942,10 +11940,10 @@ Call_expression::intrinsify(Gogo* gogo,\n \n       if ((name == \"Store\" || name == \"Store64\" || name == \"StorepNoWB\"\n            || name == \"Storeuintptr\" || name == \"StoreRel\"\n-           || name == \"$Storeint32\" || name == \"$Storeint64\")\n+           || name == \"Storeint32\" || name == \"Storeint64\")\n           && this->args_ != NULL && this->args_->size() == 2)\n         {\n-          if (int_size < 8 && (name == \"Store64\" || name == \"$Storeint64\"))\n+          if (int_size < 8 && (name == \"Store64\" || name == \"Storeint64\"))\n             return NULL;\n \n           Runtime::Function code;\n@@ -11955,9 +11953,9 @@ Call_expression::intrinsify(Gogo* gogo,\n             code = Runtime::ATOMIC_STORE_4;\n           else if (name == \"Store64\")\n             code = Runtime::ATOMIC_STORE_8;\n-          else if (name == \"$Storeint32\")\n+          else if (name == \"Storeint32\")\n             code = Runtime::ATOMIC_STORE_4;\n-          else if (name == \"$Storeint64\")\n+          else if (name == \"Storeint64\")\n             code = Runtime::ATOMIC_STORE_8;\n           else if (name == \"Storeuintptr\")\n             code = (ptr_size == 8 ? Runtime::ATOMIC_STORE_8 : Runtime::ATOMIC_STORE_4);\n@@ -11979,7 +11977,7 @@ Call_expression::intrinsify(Gogo* gogo,\n         }\n \n       if ((name == \"Xchg\" || name == \"Xchg64\" || name == \"Xchguintptr\"\n-           || name == \"$Xchgint32\" || name == \"$Xchgint64\")\n+           || name == \"Xchgint32\" || name == \"Xchgint64\")\n           && this->args_ != NULL && this->args_->size() == 2)\n         {\n           if (int_size < 8 && (name == \"Xchg64\" || name == \"Xchgint64\"))\n@@ -11997,12 +11995,12 @@ Call_expression::intrinsify(Gogo* gogo,\n               code = Runtime::ATOMIC_EXCHANGE_8;\n               res_type = uint64_type;\n             }\n-          else if (name == \"$Xchgint32\")\n+          else if (name == \"Xchgint32\")\n             {\n               code = Runtime::ATOMIC_EXCHANGE_4;\n               res_type = int32_type;\n             }\n-          else if (name == \"$Xchgint64\")\n+          else if (name == \"Xchgint64\")\n             {\n               code = Runtime::ATOMIC_EXCHANGE_8;\n               res_type = int64_type;\n@@ -12025,10 +12023,10 @@ Call_expression::intrinsify(Gogo* gogo,\n \n       if ((name == \"Cas\" || name == \"Cas64\" || name == \"Casuintptr\"\n            || name == \"Casp1\" || name == \"CasRel\"\n-           || name == \"$Casint32\" || name == \"$Casint64\")\n+           || name == \"Casint32\" || name == \"Casint64\")\n           && this->args_ != NULL && this->args_->size() == 3)\n         {\n-          if (int_size < 8 && (name == \"Cas64\" || name == \"$Casint64\"))\n+          if (int_size < 8 && (name == \"Cas64\" || name == \"Casint64\"))\n             return NULL;\n \n           Runtime::Function code;\n@@ -12047,9 +12045,9 @@ Call_expression::intrinsify(Gogo* gogo,\n             code = Runtime::ATOMIC_COMPARE_EXCHANGE_4;\n           else if (name == \"Cas64\")\n             code = Runtime::ATOMIC_COMPARE_EXCHANGE_8;\n-          else if (name == \"$Casint32\")\n+          else if (name == \"Casint32\")\n             code = Runtime::ATOMIC_COMPARE_EXCHANGE_4;\n-          else if (name == \"$Casint64\")\n+          else if (name == \"Casint64\")\n             code = Runtime::ATOMIC_COMPARE_EXCHANGE_8;\n           else if (name == \"Casuintptr\")\n             code = (ptr_size == 8\n@@ -12077,7 +12075,7 @@ Call_expression::intrinsify(Gogo* gogo,\n         }\n \n       if ((name == \"Xadd\" || name == \"Xadd64\" || name == \"Xaddint64\"\n-           || name == \"Xadduintptr\" || name == \"$Xaddint32\")\n+           || name == \"Xadduintptr\" || name == \"Xaddint32\")\n           && this->args_ != NULL && this->args_->size() == 2)\n         {\n           if (int_size < 8 && (name == \"Xadd64\" || name == \"Xaddint64\"))\n@@ -12095,7 +12093,7 @@ Call_expression::intrinsify(Gogo* gogo,\n               code = Runtime::ATOMIC_ADD_FETCH_8;\n               res_type = uint64_type;\n             }\n-          else if (name == \"$Xaddint32\")\n+          else if (name == \"Xaddint32\")\n             {\n               code = Runtime::ATOMIC_ADD_FETCH_4;\n               res_type = int32_type;"}, {"sha": "b5a0940563a25af831ab9b9669b3a6ee757a1d2a", "filename": "libgo/go/runtime/internal/atomic/atomic.c", "status": "modified", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/582c24e9fe81f75684892de0bf580e6918695dd9/libgo%2Fgo%2Fruntime%2Finternal%2Fatomic%2Fatomic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/582c24e9fe81f75684892de0bf580e6918695dd9/libgo%2Fgo%2Fruntime%2Finternal%2Fatomic%2Fatomic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Finternal%2Fatomic%2Fatomic.c?ref=582c24e9fe81f75684892de0bf580e6918695dd9", "patch": "@@ -104,6 +104,16 @@ Loaduint (uintgo *ptr)\n   return __atomic_load_n (ptr, __ATOMIC_SEQ_CST);\n }\n \n+int32_t Loadint32 (int32_t *ptr)\n+  __asm__ (GOSYM_PREFIX \"runtime_1internal_1atomic.Loadint32\")\n+  __attribute__ ((no_split_stack));\n+\n+int32_t\n+Loadint32 (int32_t *ptr)\n+{\n+  return __atomic_load_n (ptr, __ATOMIC_SEQ_CST);\n+}\n+\n int64_t Loadint64 (int64_t *ptr)\n   __asm__ (GOSYM_PREFIX \"runtime_1internal_1atomic.Loadint64\")\n   __attribute__ ((no_split_stack));\n@@ -126,6 +136,16 @@ Xadd (uint32_t *ptr, int32_t delta)\n   return __atomic_add_fetch (ptr, (uint32_t) delta, __ATOMIC_SEQ_CST);\n }\n \n+int32_t Xaddint32 (int32_t *ptr, int32_t delta)\n+  __asm__ (GOSYM_PREFIX \"runtime_1internal_1atomic.Xaddint32\")\n+  __attribute__ ((no_split_stack));\n+\n+int32_t\n+Xaddint32 (int32_t *ptr, int32_t delta)\n+{\n+  return __atomic_add_fetch (ptr, delta, __ATOMIC_SEQ_CST);\n+}\n+\n uint64_t Xadd64 (uint64_t *ptr, int64_t delta)\n   __asm__ (GOSYM_PREFIX \"runtime_1internal_1atomic.Xadd64\")\n   __attribute__ ((no_split_stack));\n@@ -170,6 +190,16 @@ Xchg (uint32_t *ptr, uint32_t new)\n   return __atomic_exchange_n (ptr, new, __ATOMIC_SEQ_CST);\n }\n \n+int32_t Xchgint32 (int32_t *ptr, int32_t new)\n+  __asm__ (GOSYM_PREFIX \"runtime_1internal_1atomic.Xchgint32\")\n+  __attribute__ ((no_split_stack));\n+\n+int32_t\n+Xchgint32 (int32_t *ptr, int32_t new)\n+{\n+  return __atomic_exchange_n (ptr, new, __ATOMIC_SEQ_CST);\n+}\n+\n uint64_t Xchg64 (uint64_t *ptr, uint64_t new)\n   __asm__ (GOSYM_PREFIX \"runtime_1internal_1atomic.Xchg64\")\n   __attribute__ ((no_split_stack));\n@@ -182,6 +212,16 @@ Xchg64 (uint64_t *ptr, uint64_t new)\n   return __atomic_exchange_n (ptr, new, __ATOMIC_SEQ_CST);\n }\n \n+int64_t Xchgint64 (int64_t *ptr, int64_t new)\n+  __asm__ (GOSYM_PREFIX \"runtime_1internal_1atomic.Xchgint64\")\n+  __attribute__ ((no_split_stack));\n+\n+int64_t\n+Xchgint64 (int64_t *ptr, int64_t new)\n+{\n+  return __atomic_exchange_n (ptr, new, __ATOMIC_SEQ_CST);\n+}\n+\n uintptr_t Xchguintptr (uintptr_t *ptr, uintptr_t new)\n   __asm__ (GOSYM_PREFIX \"runtime_1internal_1atomic.Xchguintptr\")\n   __attribute__ ((no_split_stack));\n@@ -264,6 +304,26 @@ CasRel (uint32_t *ptr, uint32_t old, uint32_t new)\n   return __atomic_compare_exchange_n (ptr, &old, new, false, __ATOMIC_RELEASE, __ATOMIC_RELAXED);\n }\n \n+_Bool Casint32 (int32_t *ptr, int32_t old, int32_t new)\n+  __asm__ (GOSYM_PREFIX \"runtime_1internal_1atomic.Casint32\")\n+  __attribute__ ((no_split_stack));\n+\n+_Bool\n+Casint32 (int32_t *ptr, int32_t old, int32_t new)\n+{\n+  return __atomic_compare_exchange_n (ptr, &old, new, false, __ATOMIC_SEQ_CST, __ATOMIC_RELAXED);\n+}\n+\n+_Bool Casint64 (int64_t *ptr, int64_t old, int64_t new)\n+  __asm__ (GOSYM_PREFIX \"runtime_1internal_1atomic.Casint64\")\n+  __attribute__ ((no_split_stack));\n+\n+_Bool\n+Casint64 (int64_t *ptr, int64_t old, int64_t new)\n+{\n+  return __atomic_compare_exchange_n (ptr, &old, new, false, __ATOMIC_SEQ_CST, __ATOMIC_RELAXED);\n+}\n+\n _Bool Casp1 (void **ptr, void *old, void *new)\n   __asm__ (GOSYM_PREFIX \"runtime_1internal_1atomic.Casp1\")\n   __attribute__ ((no_split_stack));\n@@ -304,6 +364,16 @@ Store8 (uint8_t *ptr, uint8_t val)\n   __atomic_store_n (ptr, val, __ATOMIC_SEQ_CST);\n }\n \n+void Storeint32 (int32_t *ptr, int32_t val)\n+  __asm__ (GOSYM_PREFIX \"runtime_1internal_1atomic.Storeint32\")\n+  __attribute__ ((no_split_stack));\n+\n+void\n+Storeint32 (int32_t *ptr, int32_t val)\n+{\n+  __atomic_store_n (ptr, val, __ATOMIC_SEQ_CST);\n+}\n+\n void Store64 (uint64_t *ptr, uint64_t val)\n   __asm__ (GOSYM_PREFIX \"runtime_1internal_1atomic.Store64\")\n   __attribute__ ((no_split_stack));\n@@ -338,6 +408,16 @@ StoreRel64 (uint64_t *ptr, uint64_t val)\n   __atomic_store_n (ptr, val, __ATOMIC_RELEASE);\n }\n \n+void Storeint64 (int64_t *ptr, int64_t val)\n+  __asm__ (GOSYM_PREFIX \"runtime_1internal_1atomic.Storeint64\")\n+  __attribute__ ((no_split_stack));\n+\n+void\n+Storeint64 (int64_t *ptr, int64_t val)\n+{\n+  __atomic_store_n (ptr, val, __ATOMIC_SEQ_CST);\n+}\n+\n void StoreReluintptr (uintptr_t *ptr, uintptr_t val)\n   __asm__ (GOSYM_PREFIX \"runtime_1internal_1atomic.StoreReluintptr\")\n   __attribute__ ((no_split_stack));"}, {"sha": "e7544ba4484f079143149056cec80021843ef127", "filename": "libgo/go/runtime/internal/atomic/stubs.go", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/582c24e9fe81f75684892de0bf580e6918695dd9/libgo%2Fgo%2Fruntime%2Finternal%2Fatomic%2Fstubs.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/582c24e9fe81f75684892de0bf580e6918695dd9/libgo%2Fgo%2Fruntime%2Finternal%2Fatomic%2Fstubs.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Finternal%2Fatomic%2Fstubs.go?ref=582c24e9fe81f75684892de0bf580e6918695dd9", "patch": "@@ -2,6 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n+//go:build !wasm\n // +build !wasm\n \n package atomic\n@@ -14,9 +15,21 @@ func Cas(ptr *uint32, old, new uint32) bool\n // NO go:noescape annotation; see atomic_pointer.go.\n func Casp1(ptr *unsafe.Pointer, old, new unsafe.Pointer) bool\n \n+//go:noescape\n+func Casint32(ptr *int32, old, new int32) bool\n+\n+//go:noescape\n+func Casint64(ptr *int64, old, new int64) bool\n+\n //go:noescape\n func Casuintptr(ptr *uintptr, old, new uintptr) bool\n \n+//go:noescape\n+func Storeint32(ptr *int32, new int32)\n+\n+//go:noescape\n+func Storeint64(ptr *int64, new int64)\n+\n //go:noescape\n func Storeuintptr(ptr *uintptr, new uintptr)\n \n@@ -28,8 +41,20 @@ func Loaduint(ptr *uint) uint\n \n // TODO(matloob): Should these functions have the go:noescape annotation?\n \n+//go:noescape\n+func Loadint32(ptr *int32) int32\n+\n //go:noescape\n func Loadint64(ptr *int64) int64\n \n+//go:noescape\n+func Xaddint32(ptr *int32, delta int32) int32\n+\n //go:noescape\n func Xaddint64(ptr *int64, delta int64) int64\n+\n+//go:noescape\n+func Xchgint32(ptr *int32, new int32) int32\n+\n+//go:noescape\n+func Xchgint64(ptr *int64, new int64) int64"}]}