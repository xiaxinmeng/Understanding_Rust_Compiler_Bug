{"sha": "950f7f45269b7cb641b9f754b408980a01971ce2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTUwZjdmNDUyNjliN2NiNjQxYjlmNzU0YjQwODk4MGEwMTk3MWNlMg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2010-07-29T13:45:47Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2010-07-29T13:45:47Z"}, "message": "double-int.h (double_int_and_not): New function.\n\n2010-07-28  Richard Guenther  <rguenther@suse.de>\n\n\t* double-int.h (double_int_and_not): New function.\n\t* combine.c (try_combine): Use it.\n\t* tree-vrp.c (simplify_bit_ops_using_ranges): Likewise.\n\nFrom-SVN: r162681", "tree": {"sha": "acaa4c3048af7730f61897ba56c531c20312e416", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/acaa4c3048af7730f61897ba56c531c20312e416"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/950f7f45269b7cb641b9f754b408980a01971ce2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/950f7f45269b7cb641b9f754b408980a01971ce2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/950f7f45269b7cb641b9f754b408980a01971ce2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/950f7f45269b7cb641b9f754b408980a01971ce2/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8d0741923dc99b7876f8faafdc238b59a32d0ffc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d0741923dc99b7876f8faafdc238b59a32d0ffc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d0741923dc99b7876f8faafdc238b59a32d0ffc"}], "stats": {"total": 32, "additions": 22, "deletions": 10}, "files": [{"sha": "40edbc5f48b4c0554e8ed9b118116bc0bcaa60e0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/950f7f45269b7cb641b9f754b408980a01971ce2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/950f7f45269b7cb641b9f754b408980a01971ce2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=950f7f45269b7cb641b9f754b408980a01971ce2", "patch": "@@ -1,3 +1,9 @@\n+2010-07-28  Richard Guenther  <rguenther@suse.de>\n+\n+\t* double-int.h (double_int_and_not): New function.\n+\t* combine.c (try_combine): Use it.\n+\t* tree-vrp.c (simplify_bit_ops_using_ranges): Likewise.\n+\n 2010-07-29  Bernd Schmidt  <bernds@codesourcery.com>\n \n \tPR rtl-optimization/42575"}, {"sha": "9754b089675622ec4b18c23708d18804f15c7aff", "filename": "gcc/combine.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/950f7f45269b7cb641b9f754b408980a01971ce2/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/950f7f45269b7cb641b9f754b408980a01971ce2/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=950f7f45269b7cb641b9f754b408980a01971ce2", "patch": "@@ -2601,7 +2601,7 @@ try_combine (rtx i3, rtx i2, rtx i1, int *new_direct_jump_p)\n \t  i = double_int_and (i, m);\n \t  m = double_int_lshift (m, offset, HOST_BITS_PER_DOUBLE_INT, false);\n \t  i = double_int_lshift (i, offset, HOST_BITS_PER_DOUBLE_INT, false);\n-\t  o = double_int_ior (double_int_and (o, double_int_not (m)), i);\n+\t  o = double_int_ior (double_int_and_not (o, m), i);\n \n \t  combine_merges++;\n \t  subst_insn = i3;"}, {"sha": "b14693d4fbdbcf07bde5c58592efb66f058ad618", "filename": "gcc/double-int.h", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/950f7f45269b7cb641b9f754b408980a01971ce2/gcc%2Fdouble-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/950f7f45269b7cb641b9f754b408980a01971ce2/gcc%2Fdouble-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdouble-int.h?ref=950f7f45269b7cb641b9f754b408980a01971ce2", "patch": "@@ -158,7 +158,7 @@ static inline double_int\n double_int_not (double_int a)\n {\n   a.low = ~a.low;\n-  a.high = ~ a.high;\n+  a.high = ~a.high;\n   return a;\n }\n \n@@ -182,6 +182,16 @@ double_int_and (double_int a, double_int b)\n   return a;\n }\n \n+/* Returns A & ~B.  */\n+\n+static inline double_int\n+double_int_and_not (double_int a, double_int b)\n+{\n+  a.low &= ~b.low;\n+  a.high &= ~b.high;\n+  return a;\n+}\n+\n /* Returns A ^ B.  */\n \n static inline double_int"}, {"sha": "05fa186ecbe636bda6f43e7894d4434daf4c6bc1", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/950f7f45269b7cb641b9f754b408980a01971ce2/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/950f7f45269b7cb641b9f754b408980a01971ce2/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=950f7f45269b7cb641b9f754b408980a01971ce2", "patch": "@@ -6953,31 +6953,27 @@ simplify_bit_ops_using_ranges (gimple_stmt_iterator *gsi, gimple stmt)\n   switch (gimple_assign_rhs_code (stmt))\n     {\n     case BIT_AND_EXPR:\n-      mask = double_int_and (may_be_nonzero0,\n-\t\t\t     double_int_not (must_be_nonzero1));\n+      mask = double_int_and_not (may_be_nonzero0, must_be_nonzero1);\n       if (double_int_zero_p (mask))\n \t{\n \t  op = op0;\n \t  break;\n \t}\n-      mask = double_int_and (may_be_nonzero1,\n-\t\t\t     double_int_not (must_be_nonzero0));\n+      mask = double_int_and_not (may_be_nonzero1, must_be_nonzero0);\n       if (double_int_zero_p (mask))\n \t{\n \t  op = op1;\n \t  break;\n \t}\n       break;\n     case BIT_IOR_EXPR:\n-      mask = double_int_and (may_be_nonzero0,\n-\t\t\t     double_int_not (must_be_nonzero1));\n+      mask = double_int_and_not (may_be_nonzero0, must_be_nonzero1);\n       if (double_int_zero_p (mask))\n \t{\n \t  op = op1;\n \t  break;\n \t}\n-      mask = double_int_and (may_be_nonzero1,\n-\t\t\t     double_int_not (must_be_nonzero0));\n+      mask = double_int_and_not (may_be_nonzero1, must_be_nonzero0);\n       if (double_int_zero_p (mask))\n \t{\n \t  op = op0;"}]}