{"sha": "0250355849a16456a8b8e6dce2d2d7874696649e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDI1MDM1NTg0OWExNjQ1NmE4YjhlNmRjZTJkMmQ3ODc0Njk2NjQ5ZQ==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2019-10-18T19:01:57Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2019-10-18T19:01:57Z"}, "message": "[arm] Early split zero- and sign-extension\n\nThis patch changes the insn patterns for zero- and sign-extend into\ndefine_expands that generate the appropriate word operations\nimmediately.\n\n\t* config/arm/arm.md (zero_extend<mode>di2): Convert to define_expand.\n\t(extend<mode>di2): Likewise.\n\nFrom-SVN: r277166", "tree": {"sha": "9ef36497b857c198fccf6e6b3ea8d61b519b599c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9ef36497b857c198fccf6e6b3ea8d61b519b599c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0250355849a16456a8b8e6dce2d2d7874696649e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0250355849a16456a8b8e6dce2d2d7874696649e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0250355849a16456a8b8e6dce2d2d7874696649e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0250355849a16456a8b8e6dce2d2d7874696649e/comments", "author": null, "committer": null, "parents": [{"sha": "0406dccda5c9adfaf65e132fda5b8c0fbc5ce1d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0406dccda5c9adfaf65e132fda5b8c0fbc5ce1d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0406dccda5c9adfaf65e132fda5b8c0fbc5ce1d5"}], "stats": {"total": 80, "additions": 59, "deletions": 21}, "files": [{"sha": "7935f1f544159b8fb7305374cc094d22dff74346", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0250355849a16456a8b8e6dce2d2d7874696649e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0250355849a16456a8b8e6dce2d2d7874696649e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0250355849a16456a8b8e6dce2d2d7874696649e", "patch": "@@ -1,3 +1,8 @@\n+2019-10-18  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* config/arm/arm.md (zero_extend<mode>di2): Convert to define_expand.\n+\t(extend<mode>di2): Likewise.\n+\n 2019-10-18  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* config/arm/arm-protos.h (arm_decompose_di_binop): New prototype."}, {"sha": "4a7a64e661331dc5ff86b950a2d6825d274c9874", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 54, "deletions": 21, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0250355849a16456a8b8e6dce2d2d7874696649e/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0250355849a16456a8b8e6dce2d2d7874696649e/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=0250355849a16456a8b8e6dce2d2d7874696649e", "patch": "@@ -4196,31 +4196,64 @@\n \f\n ;; Zero and sign extension instructions.\n \n-(define_insn \"zero_extend<mode>di2\"\n-  [(set (match_operand:DI 0 \"s_register_operand\" \"=r,?r\")\n-        (zero_extend:DI (match_operand:QHSI 1 \"<qhs_zextenddi_op>\"\n-\t\t\t\t\t    \"<qhs_zextenddi_cstr>\")))]\n+(define_expand \"zero_extend<mode>di2\"\n+  [(set (match_operand:DI 0 \"s_register_operand\" \"\")\n+\t(zero_extend:DI (match_operand:QHSI 1 \"<qhs_zextenddi_op>\" \"\")))]\n   \"TARGET_32BIT <qhs_zextenddi_cond>\"\n-  \"#\"\n-  [(set_attr \"length\" \"4,8\")\n-   (set_attr \"arch\" \"*,*\")\n-   (set_attr \"ce_count\" \"2\")\n-   (set_attr \"predicable\" \"yes\")\n-   (set_attr \"type\" \"mov_reg,multiple\")]\n+  {\n+    rtx res_lo, res_hi, op0_lo, op0_hi;\n+    res_lo = gen_lowpart (SImode, operands[0]);\n+    res_hi = gen_highpart (SImode, operands[0]);\n+    if (can_create_pseudo_p ())\n+      {\n+\top0_lo = <MODE>mode == SImode ? operands[1] : gen_reg_rtx (SImode);\n+\top0_hi = gen_reg_rtx (SImode);\n+      }\n+    else\n+      {\n+\top0_lo = <MODE>mode == SImode ? operands[1] : res_lo;\n+\top0_hi = res_hi;\n+      }\n+    if (<MODE>mode != SImode)\n+      emit_insn (gen_rtx_SET (op0_lo,\n+\t\t\t      gen_rtx_ZERO_EXTEND (SImode, operands[1])));\n+    emit_insn (gen_movsi (op0_hi, const0_rtx));\n+    if (res_lo != op0_lo)\n+      emit_move_insn (res_lo, op0_lo);\n+    if (res_hi != op0_hi)\n+      emit_move_insn (res_hi, op0_hi);\n+    DONE;\n+  }\n )\n \n-(define_insn \"extend<mode>di2\"\n-  [(set (match_operand:DI 0 \"s_register_operand\" \"=r,?r,?r\")\n-        (sign_extend:DI (match_operand:QHSI 1 \"<qhs_extenddi_op>\"\n-\t\t\t\t\t    \"<qhs_extenddi_cstr>\")))]\n+(define_expand \"extend<mode>di2\"\n+  [(set (match_operand:DI 0 \"s_register_operand\" \"\")\n+\t(sign_extend:DI (match_operand:QHSI 1 \"<qhs_extenddi_op>\" \"\")))]\n   \"TARGET_32BIT <qhs_sextenddi_cond>\"\n-  \"#\"\n-  [(set_attr \"length\" \"4,8,8\")\n-   (set_attr \"ce_count\" \"2\")\n-   (set_attr \"shift\" \"1\")\n-   (set_attr \"predicable\" \"yes\")\n-   (set_attr \"arch\" \"*,a,t\")\n-   (set_attr \"type\" \"mov_reg,multiple,multiple\")]\n+  {\n+    rtx res_lo, res_hi, op0_lo, op0_hi;\n+    res_lo = gen_lowpart (SImode, operands[0]);\n+    res_hi = gen_highpart (SImode, operands[0]);\n+    if (can_create_pseudo_p ())\n+      {\n+\top0_lo = <MODE>mode == SImode ? operands[1] : gen_reg_rtx (SImode);\n+\top0_hi = gen_reg_rtx (SImode);\n+      }\n+    else\n+      {\n+\top0_lo = <MODE>mode == SImode ? operands[1] : res_lo;\n+\top0_hi = res_hi;\n+      }\n+    if (<MODE>mode != SImode)\n+      emit_insn (gen_rtx_SET (op0_lo,\n+\t\t\t      gen_rtx_SIGN_EXTEND (SImode, operands[1])));\n+    emit_insn (gen_ashrsi3 (op0_hi, op0_lo, GEN_INT (31)));\n+    if (res_lo != op0_lo)\n+      emit_move_insn (res_lo, op0_lo);\n+    if (res_hi != op0_hi)\n+      emit_move_insn (res_hi, op0_hi);\n+    DONE;\n+  }\n )\n \n ;; Splits for all extensions to DImode"}]}