{"sha": "01ad8c54fdca1db3d71bf6c4b861a9d1db3c2a59", "node_id": "C_kwDOANBUbNoAKDAxYWQ4YzU0ZmRjYTFkYjNkNzFiZjZjNGI4NjFhOWQxZGIzYzJhNTk", "commit": {"author": {"name": "Kewen Lin", "email": "linkw@linux.ibm.com", "date": "2021-12-13T05:27:51Z"}, "committer": {"name": "Kewen Lin", "email": "linkw@linux.ibm.com", "date": "2021-12-13T05:27:51Z"}, "message": "pragma: Update target option node when optimization changes [PR103515]\n\nFor a function with optimize pragma, it's possible that the target\noptions change as optimization options change.  Now we create one\noptimization option node when optimize pragma parsing, but don't\ncreate target option node for possible target option changes.  It\nmakes later processing not detect the target options can actually\nchange and further doesn't update the target options accordingly.\n\nThis patch is to check whether target options have changed when\ncreating one optimization option node for pragma optimize, and\nmake one target option node if needed.  The associated test case\nshows the difference.  Without this patch, the function foo1 will\nperform unrolling which is unexpected.  The reason is that flag\nunroll_only_small_loops isn't correctly set for it.  The value\nis updated after parsing function foo2, but doesn't get restored\nlater since both decls don't have DECL_FUNCTION_SPECIFIC_TARGET\nset and the hook thinks we don't need to switch.  With this patch,\nthere is no unrolling for foo1, which is also consistent with the\nbehavior by replacing pragma by attribute whether w/ and w/o this\npatch.\n\nAs Martin noted, this change does the similar thing like what his\nprevious commit r12-1039 did.\n\ngcc/ChangeLog:\n\n\tPR target/103515\n\t* attribs.c (decl_attributes): Check if target options change and\n\tcreate one node if so.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/103515\n\t* gcc.target/powerpc/pr103515.c: New test.", "tree": {"sha": "cb540ff5d62277cf602326f6ff4492b0663aebe5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb540ff5d62277cf602326f6ff4492b0663aebe5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/01ad8c54fdca1db3d71bf6c4b861a9d1db3c2a59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01ad8c54fdca1db3d71bf6c4b861a9d1db3c2a59", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01ad8c54fdca1db3d71bf6c4b861a9d1db3c2a59", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01ad8c54fdca1db3d71bf6c4b861a9d1db3c2a59/comments", "author": {"login": "jedilyn", "id": 38515402, "node_id": "MDQ6VXNlcjM4NTE1NDAy", "avatar_url": "https://avatars.githubusercontent.com/u/38515402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedilyn", "html_url": "https://github.com/jedilyn", "followers_url": "https://api.github.com/users/jedilyn/followers", "following_url": "https://api.github.com/users/jedilyn/following{/other_user}", "gists_url": "https://api.github.com/users/jedilyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedilyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedilyn/subscriptions", "organizations_url": "https://api.github.com/users/jedilyn/orgs", "repos_url": "https://api.github.com/users/jedilyn/repos", "events_url": "https://api.github.com/users/jedilyn/events{/privacy}", "received_events_url": "https://api.github.com/users/jedilyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jedilyn", "id": 38515402, "node_id": "MDQ6VXNlcjM4NTE1NDAy", "avatar_url": "https://avatars.githubusercontent.com/u/38515402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedilyn", "html_url": "https://github.com/jedilyn", "followers_url": "https://api.github.com/users/jedilyn/followers", "following_url": "https://api.github.com/users/jedilyn/following{/other_user}", "gists_url": "https://api.github.com/users/jedilyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedilyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedilyn/subscriptions", "organizations_url": "https://api.github.com/users/jedilyn/orgs", "repos_url": "https://api.github.com/users/jedilyn/repos", "events_url": "https://api.github.com/users/jedilyn/events{/privacy}", "received_events_url": "https://api.github.com/users/jedilyn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c8dcf64b31ee9fb537e43af2b56ca87e8d585277", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8dcf64b31ee9fb537e43af2b56ca87e8d585277", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8dcf64b31ee9fb537e43af2b56ca87e8d585277"}], "stats": {"total": 43, "additions": 42, "deletions": 1}, "files": [{"sha": "01a9ed66485b288c749886652c004c3cf2ab6ba5", "filename": "gcc/attribs.c", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01ad8c54fdca1db3d71bf6c4b861a9d1db3c2a59/gcc%2Fattribs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01ad8c54fdca1db3d71bf6c4b861a9d1db3c2a59/gcc%2Fattribs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fattribs.c?ref=01ad8c54fdca1db3d71bf6c4b861a9d1db3c2a59", "patch": "@@ -607,7 +607,18 @@ decl_attributes (tree *node, tree attributes, int flags,\n   if (TREE_CODE (*node) == FUNCTION_DECL\n       && optimization_current_node != optimization_default_node\n       && !DECL_FUNCTION_SPECIFIC_OPTIMIZATION (*node))\n-    DECL_FUNCTION_SPECIFIC_OPTIMIZATION (*node) = optimization_current_node;\n+    {\n+      DECL_FUNCTION_SPECIFIC_OPTIMIZATION (*node) = optimization_current_node;\n+      tree cur_tree\n+\t= build_target_option_node (&global_options, &global_options_set);\n+      tree old_tree = DECL_FUNCTION_SPECIFIC_TARGET (*node);\n+      if (!old_tree)\n+\told_tree = target_option_default_node;\n+      /* The changes on optimization options can cause the changes in\n+\t target options, update it accordingly if it's changed.  */\n+      if (old_tree != cur_tree)\n+\tDECL_FUNCTION_SPECIFIC_TARGET (*node) = cur_tree;\n+    }\n \n   /* If this is a function and the user used #pragma GCC target, add the\n      options to the attribute((target(...))) list.  */"}, {"sha": "698b9a930370ace13f0eb3cb2c073b90be03417e", "filename": "gcc/testsuite/gcc.target/powerpc/pr103515.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01ad8c54fdca1db3d71bf6c4b861a9d1db3c2a59/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr103515.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01ad8c54fdca1db3d71bf6c4b861a9d1db3c2a59/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr103515.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr103515.c?ref=01ad8c54fdca1db3d71bf6c4b861a9d1db3c2a59", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-rtl-loop2_unroll-optimized\" } */\n+\n+/* The pragma specified for foo2 should not affect foo1.\n+   Verify compiler won't perform unrolling for foo1.  */\n+\n+#define N 1024\n+extern int a1[N], b1[N], c1[N];\n+extern int a2[N], b2[N], c2[N];\n+extern int n;\n+\n+void\n+foo1 ()\n+{\n+  int i;\n+  for (i = 0; i < n; i++)\n+    c1[i] += a1[i] + b1[i];\n+}\n+\n+#pragma GCC optimize(\"O3,unroll-loops\")\n+void\n+foo2 ()\n+{\n+  int i;\n+  for (i = 0; i < n; i++)\n+    c2[i] += a2[i] + b2[i];\n+}\n+\n+/* { dg-final { scan-rtl-dump-times \"optimized: loop unrolled\" 1 \"loop2_unroll\" } } */\n+"}]}