{"sha": "6d992de0101414504db3c2338c624aa2a0f82e3b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmQ5OTJkZTAxMDE0MTQ1MDRkYjNjMjMzOGM2MjRhYTJhMGY4MmUzYg==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2007-09-06T17:46:43Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2007-09-06T17:46:43Z"}, "message": "re PR target/33256 (internal compiler error: in print_operand_reloc, at config/mips/mips.c:5579)\n\ngcc/\n\tPR target/33256\n\t* config/mips/mips.c (mips_classify_symbolic_expression): New function.\n\t(mips_classify_address): Use it instead of mips_symbolic_constant_p.\n\t(print_operand_reloc): Likewise.\n\ngcc/testsuite/\n200x-xx-xx  David Daney  <ddaney@avtrex.com>\n\t    Richard Sandiford  <richard@codesourcery.com>\n\n\tPR target/33256\n\t* gcc.target/mips/mips.exp (setup_mips_tests): Set mips_forced_le.\n\t(dg-mips-options): Skip -EB and -meb tests when $mips_forced_le.\n\t* gcc.target/mips/pr33256.c: New test.\n\nFrom-SVN: r128195", "tree": {"sha": "d8af7efcfeb5df9202f6e27f772379a603672490", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d8af7efcfeb5df9202f6e27f772379a603672490"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6d992de0101414504db3c2338c624aa2a0f82e3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d992de0101414504db3c2338c624aa2a0f82e3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d992de0101414504db3c2338c624aa2a0f82e3b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d992de0101414504db3c2338c624aa2a0f82e3b/comments", "author": null, "committer": null, "parents": [{"sha": "901ddd174524c2712bfb36f75882e3bac8db9596", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/901ddd174524c2712bfb36f75882e3bac8db9596", "html_url": "https://github.com/Rust-GCC/gccrs/commit/901ddd174524c2712bfb36f75882e3bac8db9596"}], "stats": {"total": 70, "additions": 66, "deletions": 4}, "files": [{"sha": "d95fa4715b76089ef03d25a9dffbdad9d6597b43", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d992de0101414504db3c2338c624aa2a0f82e3b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d992de0101414504db3c2338c624aa2a0f82e3b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6d992de0101414504db3c2338c624aa2a0f82e3b", "patch": "@@ -1,3 +1,10 @@\n+2007-09-06  Richard Sandiford  <richard@codesourcery.com>\n+\n+\tPR target/33256\n+\t* config/mips/mips.c (mips_classify_symbolic_expression): New function.\n+\t(mips_classify_address): Use it instead of mips_symbolic_constant_p.\n+\t(print_operand_reloc): Likewise.\n+\n 2007-09-06  Janis Johnson  <janis187@us.ibm.com>\n \n \tRevert:"}, {"sha": "82986cae39848fd34b7d262040b0f4dd378986c6", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d992de0101414504db3c2338c624aa2a0f82e3b/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d992de0101414504db3c2338c624aa2a0f82e3b/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=6d992de0101414504db3c2338c624aa2a0f82e3b", "patch": "@@ -1553,6 +1553,21 @@ mips_classify_symbol (const_rtx x, enum mips_symbol_context context)\n   return SYMBOL_ABSOLUTE;\n }\n \n+/* Classify symbolic expression X, given that it appears in context\n+   CONTEXT.  */\n+\n+static enum mips_symbol_type\n+mips_classify_symbolic_expression (rtx x, enum mips_symbol_context context)\n+{\n+  rtx offset;\n+\n+  split_const (x, &x, &offset);\n+  if (UNSPEC_ADDRESS_P (x))\n+    return UNSPEC_ADDRESS_TYPE (x);\n+\n+  return mips_classify_symbol (x, context);\n+}\n+\n /* Return true if OFFSET is within the range [0, ALIGN), where ALIGN\n    is the alignment (in bytes) of SYMBOL_REF X.  */\n \n@@ -1747,9 +1762,18 @@ mips_classify_address (struct mips_address_info *info, rtx x,\n       info->type = ADDRESS_LO_SUM;\n       info->reg = XEXP (x, 0);\n       info->offset = XEXP (x, 1);\n+      /* We have to trust the creator of the LO_SUM to do something vaguely\n+\t sane.  Target-independent code that creates a LO_SUM should also\n+\t create and verify the matching HIGH.  Target-independent code that\n+\t adds an offset to a LO_SUM must prove that the offset will not\n+\t induce a carry.  Failure to do either of these things would be\n+\t a bug, and we are not required to check for it here.  The MIPS\n+\t backend itself should only create LO_SUMs for valid symbolic\n+\t constants, with the high part being either a HIGH or a copy\n+\t of _gp. */\n+      info->symbol_type\n+\t= mips_classify_symbolic_expression (info->offset, SYMBOL_CONTEXT_MEM);\n       return (mips_valid_base_register_p (info->reg, mode, strict)\n-\t      && mips_symbolic_constant_p (info->offset, SYMBOL_CONTEXT_MEM,\n-\t\t\t\t\t   &info->symbol_type)\n \t      && mips_symbol_insns (info->symbol_type, mode) > 0\n \t      && mips_lo_relocs[info->symbol_type] != 0);\n \n@@ -6290,8 +6314,8 @@ print_operand_reloc (FILE *file, rtx op, enum mips_symbol_context context,\n   enum mips_symbol_type symbol_type;\n   const char *p;\n \n-  if (!mips_symbolic_constant_p (op, context, &symbol_type)\n-      || relocs[symbol_type] == 0)\n+  symbol_type = mips_classify_symbolic_expression (op, context);\n+  if (relocs[symbol_type] == 0)\n     fatal_insn (\"PRINT_OPERAND, invalid operand for relocation\", op);\n \n   fputs (relocs[symbol_type], file);"}, {"sha": "8b73d0b631bf662359303548f813c3d63811b415", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d992de0101414504db3c2338c624aa2a0f82e3b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d992de0101414504db3c2338c624aa2a0f82e3b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6d992de0101414504db3c2338c624aa2a0f82e3b", "patch": "@@ -1,3 +1,11 @@\n+2007-09-06  David Daney  <ddaney@avtrex.com>\n+\t    Richard Sandiford  <richard@codesourcery.com>\n+\n+\tPR target/33256\n+\t* gcc.target/mips/mips.exp (setup_mips_tests): Set mips_forced_le.\n+\t(dg-mips-options): Skip -EB and -meb tests when $mips_forced_le.\n+\t* gcc.target/mips/pr33256.c: New test.\n+\n 2007-09-06  Tom Tromey  <tromey@redhat.com>\n \n \t* lib/g++.exp (g++_target_compile): Use -fno-show-column."}, {"sha": "e498430b9473cdc598a93d2d0159df15e556998f", "filename": "gcc/testsuite/gcc.target/mips/mips.exp", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d992de0101414504db3c2338c624aa2a0f82e3b/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d992de0101414504db3c2338c624aa2a0f82e3b/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips.exp?ref=6d992de0101414504db3c2338c624aa2a0f82e3b", "patch": "@@ -37,6 +37,7 @@ load_lib gcc-dg.exp\n #    $mips_forced_isa:\t true if the command line uses -march=* or -mips*\n #    $mips_forced_abi:\t true if the command line uses -mabi=* or -mgp*\n #    $mips_forced_float: true if the command line uses -mhard/soft-float\n+#    $mips_forced_le\t true if the command line uses -EL or -mel\n proc setup_mips_tests {} {\n     global mips_isa\n     global mips_arch\n@@ -47,6 +48,7 @@ proc setup_mips_tests {} {\n     global mips_forced_isa\n     global mips_forced_abi\n     global mips_forced_float\n+    global mips_forced_le\n \n     global compiler_flags\n     global tool\n@@ -81,6 +83,7 @@ proc setup_mips_tests {} {\n     set mips_forced_isa [regexp -- {(-mips|-march)} $compiler_flags]\n     set mips_forced_abi [regexp -- {(-mgp|-mfp|-mabi)} $compiler_flags]\n     set mips_forced_float [regexp -- {-m(hard|soft)-float} $compiler_flags]\n+    set mips_forced_le [regexp -- {-(EL|mel)[[:>:]]} $compiler_flags]\n }\n \n # Return true if command-line option FLAG forces 32-bit code.\n@@ -117,6 +120,10 @@ proc is_gp32_flag {flag} {\n #    -mhard-float\n #\tSelect the given floating-point mode.  Skip the test if the\n #\tmultilib flags force a different selection.\n+#\n+#    -EB\n+#\tSelect big-endian code.  Skip the test if the multilib flags\n+#\tforce a little-endian target.\n proc dg-mips-options {args} {\n     upvar dg-extra-tool-flags extra_tool_flags\n     upvar dg-do-what do_what\n@@ -130,6 +137,7 @@ proc dg-mips-options {args} {\n     global mips_forced_isa\n     global mips_forced_abi\n     global mips_forced_float\n+    global mips_forced_le\n \n     set flags [lindex $args 1]\n     set matches 1\n@@ -175,6 +183,10 @@ proc dg-mips-options {args} {\n \t    if {$mips_float != $float && $mips_forced_float} {\n \t\tset matches 0\n \t    }\n+\t} elseif {[regexp -- {^-(EB|meb)$} $flag]} {\n+\t    if {$mips_forced_le} {\n+\t\tset matches 0\n+\t    }\n \t}\n     }\n     if {$matches} {"}, {"sha": "d5db110fba599d4dc2d05fa145c8fb1549205d55", "filename": "gcc/testsuite/gcc.target/mips/pr33256.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d992de0101414504db3c2338c624aa2a0f82e3b/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fpr33256.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d992de0101414504db3c2338c624aa2a0f82e3b/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fpr33256.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fpr33256.c?ref=6d992de0101414504db3c2338c624aa2a0f82e3b", "patch": "@@ -0,0 +1,11 @@\n+/* GCC used to report an ICE for this test because we generated a LO_SUM\n+   for an illegitimate constant.  */\n+/* { dg-mips-options \"-mabi=64 -mips3 -msym32 -O2 -EB -mno-abicalls\" } */\n+extern unsigned long a[];\n+int b (int);\n+\n+int\n+c (void)\n+{\n+  return b (a[0]);\n+}"}]}