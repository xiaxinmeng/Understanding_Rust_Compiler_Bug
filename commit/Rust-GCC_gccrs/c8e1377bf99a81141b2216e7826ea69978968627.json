{"sha": "c8e1377bf99a81141b2216e7826ea69978968627", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzhlMTM3N2JmOTlhODExNDFiMjIxNmU3ODI2ZWE2OTk3ODk2ODYyNw==", "commit": {"author": {"name": "Kostya Serebryany", "email": "kcc@google.com", "date": "2013-11-15T10:31:14Z"}, "committer": {"name": "Kostya Serebryany", "email": "kcc@gcc.gnu.org", "date": "2013-11-15T10:31:14Z"}, "message": "fix PR sanitizer/58994\n\nFrom-SVN: r204838", "tree": {"sha": "55a8a644f67e68d67a602e8ebb34bdfcf419c187", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/55a8a644f67e68d67a602e8ebb34bdfcf419c187"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c8e1377bf99a81141b2216e7826ea69978968627", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8e1377bf99a81141b2216e7826ea69978968627", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8e1377bf99a81141b2216e7826ea69978968627", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8e1377bf99a81141b2216e7826ea69978968627/comments", "author": {"login": "kcc", "id": 1789297, "node_id": "MDQ6VXNlcjE3ODkyOTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1789297?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kcc", "html_url": "https://github.com/kcc", "followers_url": "https://api.github.com/users/kcc/followers", "following_url": "https://api.github.com/users/kcc/following{/other_user}", "gists_url": "https://api.github.com/users/kcc/gists{/gist_id}", "starred_url": "https://api.github.com/users/kcc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kcc/subscriptions", "organizations_url": "https://api.github.com/users/kcc/orgs", "repos_url": "https://api.github.com/users/kcc/repos", "events_url": "https://api.github.com/users/kcc/events{/privacy}", "received_events_url": "https://api.github.com/users/kcc/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d1c369c21eea6b7d8689de72dad6c2cb6fee1c51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1c369c21eea6b7d8689de72dad6c2cb6fee1c51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1c369c21eea6b7d8689de72dad6c2cb6fee1c51"}], "stats": {"total": 24, "additions": 18, "deletions": 6}, "files": [{"sha": "a0a8a8e6db053c31b3a5d65d1543c60e1f04ce59", "filename": "libsanitizer/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8e1377bf99a81141b2216e7826ea69978968627/libsanitizer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8e1377bf99a81141b2216e7826ea69978968627/libsanitizer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2FChangeLog?ref=c8e1377bf99a81141b2216e7826ea69978968627", "patch": "@@ -1,3 +1,11 @@\n+2013-11-15  Kostya Serebryany  <kcc@google.com>\n+\n+\tPR sanitizer/58994\n+        Backport from upstream revision 194573\n+        * asan/asan_interceptors.cc (COMMON_INTERCEPTOR_ENTER): Fall\n+        back to the original functions in the common libsanitizer\n+        interceptors and the __cxa_atexit() interceptor on Darwin.\n+\n 2013-11-13  Peter Bergner  <bergner@vnet.ibm.com>\n \n \tPR sanitizer/59009"}, {"sha": "72f7aae814a9715b8f1320089eab4925688d6994", "filename": "libsanitizer/asan/asan_interceptors.cc", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8e1377bf99a81141b2216e7826ea69978968627/libsanitizer%2Fasan%2Fasan_interceptors.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8e1377bf99a81141b2216e7826ea69978968627/libsanitizer%2Fasan%2Fasan_interceptors.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fasan%2Fasan_interceptors.cc?ref=c8e1377bf99a81141b2216e7826ea69978968627", "patch": "@@ -106,12 +106,13 @@ DECLARE_REAL_AND_INTERCEPTOR(void, free, void *)\n #define COMMON_INTERCEPTOR_WRITE_RANGE(ctx, ptr, size) \\\n   ASAN_WRITE_RANGE(ptr, size)\n #define COMMON_INTERCEPTOR_READ_RANGE(ctx, ptr, size) ASAN_READ_RANGE(ptr, size)\n-#define COMMON_INTERCEPTOR_ENTER(ctx, func, ...)              \\\n-  do {                                                        \\\n-    if (asan_init_is_running) return REAL(func)(__VA_ARGS__); \\\n-    ctx = 0;                                                  \\\n-    (void) ctx;                                               \\\n-    ENSURE_ASAN_INITED();                                     \\\n+#define COMMON_INTERCEPTOR_ENTER(ctx, func, ...)                       \\\n+  do {                                                                 \\\n+    if (asan_init_is_running) return REAL(func)(__VA_ARGS__);          \\\n+    ctx = 0;                                                           \\\n+    (void) ctx;                                                        \\\n+    if (SANITIZER_MAC && !asan_inited) return REAL(func)(__VA_ARGS__); \\\n+    ENSURE_ASAN_INITED();                                              \\\n   } while (false)\n #define COMMON_INTERCEPTOR_FD_ACQUIRE(ctx, fd) \\\n   do {                                         \\\n@@ -634,6 +635,9 @@ static void AtCxaAtexit(void *unused) {\n #if ASAN_INTERCEPT___CXA_ATEXIT\n INTERCEPTOR(int, __cxa_atexit, void (*func)(void *), void *arg,\n             void *dso_handle) {\n+#if SANITIZER_MAC\n+  if (!asan_inited) return REAL(__cxa_atexit)(func, arg, dso_handle);\n+#endif\n   ENSURE_ASAN_INITED();\n   int res = REAL(__cxa_atexit)(func, arg, dso_handle);\n   REAL(__cxa_atexit)(AtCxaAtexit, 0, 0);"}]}