{"sha": "1a13c0a284eaa74f40c10f387034173bfe3a426b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWExM2MwYTI4NGVhYTc0ZjQwYzEwZjM4NzAzNDE3M2JmZTNhNDI2Yg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-04-08T17:21:17Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-04-08T17:21:17Z"}, "message": "re PR target/70574 (wrong code with -mavx2, read of partially initialised stack variable)\n\n\tPR rtl-optimization/70574\n\t* fwprop.c (forward_propagate_and_simplify): Don't add\n\tREG_EQUAL note if DF_REF_REG (use) is a paradoxical subreg.\n\t(try_fwprop_subst): Don't add REG_EQUAL note if there are any\n\tparadoxical subregs within *loc.\n\n\t* gcc.target/i386/avx2-pr70574.c: New test.\n\nFrom-SVN: r234833", "tree": {"sha": "f47617c05c49b8453a2dd2c38ceccc147ce33913", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f47617c05c49b8453a2dd2c38ceccc147ce33913"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1a13c0a284eaa74f40c10f387034173bfe3a426b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a13c0a284eaa74f40c10f387034173bfe3a426b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a13c0a284eaa74f40c10f387034173bfe3a426b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a13c0a284eaa74f40c10f387034173bfe3a426b/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9dbe3d77fd1536c986e1b1dc1e8908fbdf3daf82", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9dbe3d77fd1536c986e1b1dc1e8908fbdf3daf82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9dbe3d77fd1536c986e1b1dc1e8908fbdf3daf82"}], "stats": {"total": 71, "additions": 66, "deletions": 5}, "files": [{"sha": "b9b36de74a505a06d2a5398196bea55bcf7905ab", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a13c0a284eaa74f40c10f387034173bfe3a426b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a13c0a284eaa74f40c10f387034173bfe3a426b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1a13c0a284eaa74f40c10f387034173bfe3a426b", "patch": "@@ -1,3 +1,11 @@\n+2016-04-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/70574\n+\t* fwprop.c (forward_propagate_and_simplify): Don't add\n+\tREG_EQUAL note if DF_REF_REG (use) is a paradoxical subreg.\n+\t(try_fwprop_subst): Don't add REG_EQUAL note if there are any\n+\tparadoxical subregs within *loc.\n+\n 2016-04-08  Thomas Schwinge  <thomas@codesourcery.com>\n \n \t* config/arc/arc.h (LINK_COMMAND_SPEC): Use gt to ignore"}, {"sha": "d8cb9fa3bbb911f34eaa09b113c1481d4c71f6a2", "filename": "gcc/fwprop.c", "status": "modified", "additions": 27, "deletions": 5, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a13c0a284eaa74f40c10f387034173bfe3a426b/gcc%2Ffwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a13c0a284eaa74f40c10f387034173bfe3a426b/gcc%2Ffwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffwprop.c?ref=1a13c0a284eaa74f40c10f387034173bfe3a426b", "patch": "@@ -999,10 +999,27 @@ try_fwprop_subst (df_ref use, rtx *loc, rtx new_rtx, rtx_insn *def_insn,\n \t making a new one if one does not already exist.  */\n       if (set_reg_equal)\n \t{\n-\t  if (dump_file)\n-\t    fprintf (dump_file, \" Setting REG_EQUAL note\\n\");\n+\t  /* If there are any paradoxical SUBREGs, don't add REG_EQUAL note,\n+\t     because the bits in there can be anything and so might not\n+\t     match the REG_EQUAL note content.  See PR70574.  */\n+\t  subrtx_var_iterator::array_type array;\n+\t  FOR_EACH_SUBRTX_VAR (iter, array, *loc, NONCONST)\n+\t    {\n+\t      rtx x = *iter;\n+\t      if (SUBREG_P (x) && paradoxical_subreg_p (x))\n+\t\t{\n+\t\t  set_reg_equal = false;\n+\t\t  break;\n+\t\t}\n+\t    }\n \n-\t  note = set_unique_reg_note (insn, REG_EQUAL, copy_rtx (new_rtx));\n+\t  if (set_reg_equal)\n+\t    {\n+\t      if (dump_file)\n+\t\tfprintf (dump_file, \" Setting REG_EQUAL note\\n\");\n+\n+\t      note = set_unique_reg_note (insn, REG_EQUAL, copy_rtx (new_rtx));\n+\t    }\n \t}\n     }\n \n@@ -1300,14 +1317,19 @@ forward_propagate_and_simplify (df_ref use, rtx_insn *def_insn, rtx def_set)\n \t that isn't mentioned in USE_SET, as the note would be invalid\n \t otherwise.  We also don't want to install a note if we are merely\n \t propagating a pseudo since verifying that this pseudo isn't dead\n-\t is a pain; moreover such a note won't help anything.  */\n+\t is a pain; moreover such a note won't help anything.\n+\t If the use is a paradoxical subreg, make sure we don't add a\n+\t REG_EQUAL note for it, because it is not equivalent, it is one\n+\t possible value for it, but we can't rely on it holding that value.\n+\t See PR70574.  */\n       set_reg_equal = (note == NULL_RTX\n \t\t       && REG_P (SET_DEST (use_set))\n \t\t       && !REG_P (src)\n \t\t       && !(GET_CODE (src) == SUBREG\n \t\t\t    && REG_P (SUBREG_REG (src)))\n \t\t       && !reg_mentioned_p (SET_DEST (use_set),\n-\t\t\t\t\t    SET_SRC (use_set)));\n+\t\t\t\t\t    SET_SRC (use_set))\n+\t\t       && !paradoxical_subreg_p (DF_REF_REG (use)));\n     }\n \n   if (GET_MODE (*loc) == VOIDmode)"}, {"sha": "e1f87b396f17f94f7a4f8eb8e5a93bb175e3cf39", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a13c0a284eaa74f40c10f387034173bfe3a426b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a13c0a284eaa74f40c10f387034173bfe3a426b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1a13c0a284eaa74f40c10f387034173bfe3a426b", "patch": "@@ -1,3 +1,8 @@\n+2016-04-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/70574\n+\t* gcc.target/i386/avx2-pr70574.c: New test.\n+\n 2016-04-08  Maxim Ostapenko  <m.ostapenko@samsung.com>\n \n \tPR sanitizer/70541"}, {"sha": "c9867ddf9b07d4aa585ec8c795cdbfdb18c6e689", "filename": "gcc/testsuite/gcc.target/i386/avx2-pr70574.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a13c0a284eaa74f40c10f387034173bfe3a426b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-pr70574.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a13c0a284eaa74f40c10f387034173bfe3a426b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-pr70574.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-pr70574.c?ref=1a13c0a284eaa74f40c10f387034173bfe3a426b", "patch": "@@ -0,0 +1,26 @@\n+/* PR rtl-optimization/70574 */\n+/* { dg-do run { target lp64 } } */\n+/* { dg-require-effective-target avx2 } */\n+/* { dg-options \"-O -frerun-cse-after-loop -fno-tree-ccp -mcmodel=medium -mavx2\" } */\n+/* { dg-additional-options \"-fPIC\" { target fpic } } */\n+\n+#include \"avx2-check.h\"\n+\n+typedef char A __attribute__((vector_size (32)));\n+typedef short B __attribute__((vector_size (32)));\n+\n+int\n+foo (int x, __int128 y, __int128 z, A w)\n+{\n+  y <<= 64;\n+  w *= (A) { 0, -1, z, 0, ~y };\n+  return w[0] + ((B) { x, 0, y, 0, -1 } | 1)[4];\n+}\n+\n+static void\n+avx2_test ()\n+{\n+  int x = foo (0, 0, 0, (A) {});\n+  if (x != -1)\n+    __builtin_abort ();\n+}"}]}