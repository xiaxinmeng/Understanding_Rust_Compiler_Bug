{"sha": "3b48574c6bcbfc12699eae9b586ab034b62885b0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2I0ODU3NGM2YmNiZmMxMjY5OWVhZTliNTg2YWIwMzRiNjI4ODViMA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-05-22T10:26:52Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-05-22T10:26:52Z"}, "message": "sse.md (i128vldq): New mode iterator.\n\n\t* config/i386/sse.md (i128vldq): New mode iterator.\n\t(avx2_vbroadcasti128_<mode>, avx_vbroadcastf128_<mode>): Add\n\tavx512dq and avx512vl alternatives.\n\n\t* gcc.target/i386/avx512dq-vbroadcast-2.c: New test.\n\t* gcc.target/i386/avx512vl-vbroadcast-2.c: New test.\n\nFrom-SVN: r236567", "tree": {"sha": "63651d858067955b533084c2dffb1d5e94f15963", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/63651d858067955b533084c2dffb1d5e94f15963"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3b48574c6bcbfc12699eae9b586ab034b62885b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b48574c6bcbfc12699eae9b586ab034b62885b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b48574c6bcbfc12699eae9b586ab034b62885b0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b48574c6bcbfc12699eae9b586ab034b62885b0/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "94ad56c7c264af0af07492b60716fab08559ef57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94ad56c7c264af0af07492b60716fab08559ef57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94ad56c7c264af0af07492b60716fab08559ef57"}], "stats": {"total": 140, "additions": 129, "deletions": 11}, "files": [{"sha": "80224c92f1aca6ff8af1010a2f23685a2ba93be5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b48574c6bcbfc12699eae9b586ab034b62885b0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b48574c6bcbfc12699eae9b586ab034b62885b0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3b48574c6bcbfc12699eae9b586ab034b62885b0", "patch": "@@ -1,5 +1,9 @@\n 2016-05-22  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* config/i386/sse.md (i128vldq): New mode iterator.\n+\t(avx2_vbroadcasti128_<mode>, avx_vbroadcastf128_<mode>): Add\n+\tavx512dq and avx512vl alternatives.\n+\n \t* config/i386/sse.md (avx2_vec_dupv4df): Use v instead of x\n \tconstraint, use maybe_evex prefix instead of vex.\n \t(vec_dupv4sf): Use v constraint instead of x for output"}, {"sha": "e971f1f49d605c7914ab8c1f3a6caf351227c7f4", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 26, "deletions": 11, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b48574c6bcbfc12699eae9b586ab034b62885b0/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b48574c6bcbfc12699eae9b586ab034b62885b0/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=3b48574c6bcbfc12699eae9b586ab034b62885b0", "patch": "@@ -778,6 +778,12 @@\n    (V64QI \"i64x4\") (V32QI \"%~128\") (V32HI \"i64x4\") (V16HI \"%~128\")\n    (V16SI \"i64x4\") (V8SI \"%~128\") (V8DI \"i64x4\") (V4DI \"%~128\")])\n \n+;; For 256-bit modes for TARGET_AVX512VL && TARGET_AVX512DQ\n+;; i32x4, f32x4, i64x2 or f64x2 suffixes.\n+(define_mode_attr i128vldq\n+  [(V8SF \"f32x4\") (V4DF \"f64x2\")\n+   (V32QI \"i32x4\") (V16HI \"i32x4\") (V8SI \"i32x4\") (V4DI \"i64x2\")])\n+\n ;; Mix-n-match\n (define_mode_iterator AVX256MODE2P [V8SI V8SF V4DF])\n (define_mode_iterator AVX512MODE2P [V16SI V16SF V8DF])\n@@ -17038,15 +17044,19 @@\n    (set_attr \"mode\" \"TI,TI,DF,V4SF\")])\n \n (define_insn \"avx2_vbroadcasti128_<mode>\"\n-  [(set (match_operand:VI_256 0 \"register_operand\" \"=x\")\n+  [(set (match_operand:VI_256 0 \"register_operand\" \"=x,v,v\")\n \t(vec_concat:VI_256\n-\t  (match_operand:<ssehalfvecmode> 1 \"memory_operand\" \"m\")\n+\t  (match_operand:<ssehalfvecmode> 1 \"memory_operand\" \"m,m,m\")\n \t  (match_dup 1)))]\n   \"TARGET_AVX2\"\n-  \"vbroadcasti128\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"ssemov\")\n+  \"@\n+   vbroadcasti128\\t{%1, %0|%0, %1}\n+   vbroadcast<i128vldq>\\t{%1, %0|%0, %1}\n+   vbroadcast<shuffletype>32x4\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"isa\" \"*,avx512dq,avx512vl\")\n+   (set_attr \"type\" \"ssemov\")\n    (set_attr \"prefix_extra\" \"1\")\n-   (set_attr \"prefix\" \"vex\")\n+   (set_attr \"prefix\" \"vex,evex,evex\")\n    (set_attr \"mode\" \"OI\")])\n \n ;; Modes handled by AVX vec_dup patterns.\n@@ -17123,19 +17133,24 @@\n   \"operands[2] = gen_lowpart (<ssehalfvecmode>mode, operands[0]);\")\n \n (define_insn \"avx_vbroadcastf128_<mode>\"\n-  [(set (match_operand:V_256 0 \"register_operand\" \"=x,x,x\")\n+  [(set (match_operand:V_256 0 \"register_operand\" \"=x,x,x,v,v,v,v\")\n \t(vec_concat:V_256\n-\t  (match_operand:<ssehalfvecmode> 1 \"nonimmediate_operand\" \"m,0,?x\")\n+\t  (match_operand:<ssehalfvecmode> 1 \"nonimmediate_operand\" \"m,0,?x,m,0,m,0\")\n \t  (match_dup 1)))]\n   \"TARGET_AVX\"\n   \"@\n    vbroadcast<i128>\\t{%1, %0|%0, %1}\n    vinsert<i128>\\t{$1, %1, %0, %0|%0, %0, %1, 1}\n-   vperm2<i128>\\t{$0, %t1, %t1, %0|%0, %t1, %t1, 0}\"\n-  [(set_attr \"type\" \"ssemov,sselog1,sselog1\")\n+   vperm2<i128>\\t{$0, %t1, %t1, %0|%0, %t1, %t1, 0}\n+   vbroadcast<i128vldq>\\t{%1, %0|%0, %1}\n+   vinsert<i128vldq>\\t{$1, %1, %0, %0|%0, %0, %1, 1}\n+   vbroadcast<shuffletype>32x4\\t{%1, %0|%0, %1}\n+   vinsert<shuffletype>32x4\\t{$1, %1, %0, %0|%0, %0, %1, 1}\"\n+  [(set_attr \"isa\" \"*,*,*,avx512dq,avx512dq,avx512vl,avx512vl\")\n+   (set_attr \"type\" \"ssemov,sselog1,sselog1,ssemov,sselog1,ssemov,sselog1\")\n    (set_attr \"prefix_extra\" \"1\")\n-   (set_attr \"length_immediate\" \"0,1,1\")\n-   (set_attr \"prefix\" \"vex\")\n+   (set_attr \"length_immediate\" \"0,1,1,0,1,0,1\")\n+   (set_attr \"prefix\" \"vex,vex,vex,evex,evex,evex,evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n ;; For broadcast[i|f]32x2.  Yes there is no v4sf version, only v4si."}, {"sha": "84d1f805a213b9d5db7e5b424aec0933f7550476", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b48574c6bcbfc12699eae9b586ab034b62885b0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b48574c6bcbfc12699eae9b586ab034b62885b0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3b48574c6bcbfc12699eae9b586ab034b62885b0", "patch": "@@ -1,5 +1,8 @@\n 2016-05-22  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* gcc.target/i386/avx512dq-vbroadcast-2.c: New test.\n+\t* gcc.target/i386/avx512vl-vbroadcast-2.c: New test.\n+\n \t* gcc.target/i386/avx512vl-vbroadcast-1.c: New test.\n \n 2016-05-22  Kugan Vivekanandarajah  <kuganv@linaro.org>"}, {"sha": "645765696e0b7a199ebbe514aa248ff5b7f834c7", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vbroadcast-2.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b48574c6bcbfc12699eae9b586ab034b62885b0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vbroadcast-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b48574c6bcbfc12699eae9b586ab034b62885b0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vbroadcast-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vbroadcast-2.c?ref=3b48574c6bcbfc12699eae9b586ab034b62885b0", "patch": "@@ -0,0 +1,49 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -mavx512vl -mavx512dq\" } */\n+\n+#include <x86intrin.h>\n+\n+void\n+f1 (__m128i x)\n+{\n+  register __m128i a __asm (\"xmm16\");\n+  register __m256i c;\n+  a = x;\n+  asm volatile (\"\" : \"+v\" (a));\n+  c = _mm256_broadcastsi128_si256 (a);\n+  register __m256i b __asm (\"xmm16\");\n+  b = c;\n+  asm volatile (\"\" : \"+v\" (b));\n+}\n+\n+/* { dg-final { scan-assembler \"vinserti64x2\\[^\\n\\r]*(xmm16\\[^\\n\\r]*ymm16\\[^\\n\\r]*ymm16|ymm16\\[^\\n\\r]*ymm16\\[^\\n\\r]*xmm16)\" } } */\n+\n+void\n+f2 (__m128i *x)\n+{\n+  register __m256i a __asm (\"xmm16\");\n+  a = _mm256_broadcastsi128_si256 (*x);\n+  asm volatile (\"\" : \"+v\" (a));\n+}\n+\n+/* { dg-final { scan-assembler \"vbroadcasti64x2\\[^\\n\\r]*ymm16\" } } */\n+\n+void\n+f3 (__m128 *x)\n+{\n+  register __m256 a __asm (\"xmm16\");\n+  a = _mm256_broadcast_ps (x);\n+  asm volatile (\"\" : \"+v\" (a));\n+}\n+\n+/* { dg-final { scan-assembler \"vbroadcastf32x4\\[^\\n\\r]*ymm16\" } } */\n+\n+void\n+f4 (__m128d *x)\n+{\n+  register __m256d a __asm (\"xmm16\");\n+  a = _mm256_broadcast_pd (x);\n+  asm volatile (\"\" : \"+v\" (a));\n+}\n+\n+/* { dg-final { scan-assembler \"vbroadcastf64x2\\[^\\n\\r]*ymm16\" } } */"}, {"sha": "22f4129f4f819b312f65e5d76784682a6600df52", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vbroadcast-2.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b48574c6bcbfc12699eae9b586ab034b62885b0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vbroadcast-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b48574c6bcbfc12699eae9b586ab034b62885b0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vbroadcast-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vbroadcast-2.c?ref=3b48574c6bcbfc12699eae9b586ab034b62885b0", "patch": "@@ -0,0 +1,47 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -mavx512vl -mno-avx512dq\" } */\n+\n+#include <x86intrin.h>\n+\n+void\n+f1 (__m128i x)\n+{\n+  register __m128i a __asm (\"xmm16\");\n+  register __m256i c;\n+  a = x;\n+  asm volatile (\"\" : \"+v\" (a));\n+  c = _mm256_broadcastsi128_si256 (a);\n+  register __m256i b __asm (\"xmm16\");\n+  b = c;\n+  asm volatile (\"\" : \"+v\" (b));\n+}\n+\n+/* { dg-final { scan-assembler \"vinserti32x4\\[^\\n\\r]*(xmm16\\[^\\n\\r]*ymm16\\[^\\n\\r]*ymm16|ymm16\\[^\\n\\r]*ymm16\\[^\\n\\r]*xmm16)\" } } */\n+\n+void\n+f2 (__m128i *x)\n+{\n+  register __m256i a __asm (\"xmm16\");\n+  a = _mm256_broadcastsi128_si256 (*x);\n+  asm volatile (\"\" : \"+v\" (a));\n+}\n+\n+/* { dg-final { scan-assembler \"vbroadcasti32x4\\[^\\n\\r]*ymm16\" } } */\n+\n+void\n+f3 (__m128 *x)\n+{\n+  register __m256 a __asm (\"xmm16\");\n+  a = _mm256_broadcast_ps (x);\n+  asm volatile (\"\" : \"+v\" (a));\n+}\n+\n+void\n+f4 (__m128d *x)\n+{\n+  register __m256d a __asm (\"xmm16\");\n+  a = _mm256_broadcast_pd (x);\n+  asm volatile (\"\" : \"+v\" (a));\n+}\n+\n+/* { dg-final { scan-assembler-times \"vbroadcastf32x4\\[^\\n\\r]*ymm16\" 2 } } */"}]}