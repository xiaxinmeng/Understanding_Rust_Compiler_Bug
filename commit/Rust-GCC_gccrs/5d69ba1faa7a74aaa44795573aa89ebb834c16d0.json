{"sha": "5d69ba1faa7a74aaa44795573aa89ebb834c16d0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQ2OWJhMWZhYTdhNzRhYWE0NDc5NTU3M2FhODllYmI4MzRjMTZkMA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2002-07-02T03:19:22Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2002-07-02T03:19:22Z"}, "message": "re PR c++/7112 (Regression: ICE on C++ code involving templates and sizeof)\n\n\tPR c++/7112\n\t* g++.dg/template/sizeof2.C: New test.\n\n\tPR c++/7112\n\t* mangle.c (write_expression): Add mangling for sizeof when\n\tapplied to a type.\n\t* operators.def: Remove stale comment.\n\n\t* cp-demangle.c (demangle_operator_name): Add type_arg parameter.\n\tSet it for the \"st\" operator.\n\t(demangle_expression): Handle expressions with types as arguments.\n\nFrom-SVN: r55169", "tree": {"sha": "8a402d57cf27037db16d46abdc1f0c6a8166faac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8a402d57cf27037db16d46abdc1f0c6a8166faac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d69ba1faa7a74aaa44795573aa89ebb834c16d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d69ba1faa7a74aaa44795573aa89ebb834c16d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d69ba1faa7a74aaa44795573aa89ebb834c16d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d69ba1faa7a74aaa44795573aa89ebb834c16d0/comments", "author": null, "committer": null, "parents": [{"sha": "68a830fe3a4d760b2a991c706aa12f4716015ec5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68a830fe3a4d760b2a991c706aa12f4716015ec5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68a830fe3a4d760b2a991c706aa12f4716015ec5"}], "stats": {"total": 68, "additions": 56, "deletions": 12}, "files": [{"sha": "27ee0911d7920a62153fc27b69da7ca3de3e685a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d69ba1faa7a74aaa44795573aa89ebb834c16d0/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d69ba1faa7a74aaa44795573aa89ebb834c16d0/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5d69ba1faa7a74aaa44795573aa89ebb834c16d0", "patch": "@@ -1,3 +1,10 @@\n+2002-07-01  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/7112\n+\t* mangle.c (write_expression): Add mangling for sizeof when\n+\tapplied to a type.\n+\t* operators.def: Remove stale comment.\n+\n 2002-06-30  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* cp-tree.h (CPTI_TINFO_DECL_TYPE): Replace with ..."}, {"sha": "fc92d6ee23f2c4a47d9af8ca20cd1e2b0cf7c586", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d69ba1faa7a74aaa44795573aa89ebb834c16d0/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d69ba1faa7a74aaa44795573aa89ebb834c16d0/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=5d69ba1faa7a74aaa44795573aa89ebb834c16d0", "patch": "@@ -1834,6 +1834,12 @@ write_expression (expr)\n       write_mangled_name (expr);\n       write_char ('E');\n     }\n+  else if (TREE_CODE (expr) == SIZEOF_EXPR \n+\t   && TYPE_P (TREE_OPERAND (expr, 0)))\n+    {\n+      write_string (\"st\");\n+      write_type (TREE_OPERAND (expr, 0));\n+    }\n   else\n     {\n       int i;\n@@ -1872,6 +1878,7 @@ write_expression (expr)\n \t  write_expression (TREE_OPERAND (expr, 0));\n \t  break;\n \n+\t  \n \t/* Handle pointers-to-members specially.  */\n \tcase SCOPE_REF:\n \t  write_type (TREE_OPERAND (expr, 0));"}, {"sha": "85043803f4d9675866c35e042dda07a62f3dd342", "filename": "gcc/cp/operators.def", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d69ba1faa7a74aaa44795573aa89ebb834c16d0/gcc%2Fcp%2Foperators.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d69ba1faa7a74aaa44795573aa89ebb834c16d0/gcc%2Fcp%2Foperators.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Foperators.def?ref=5d69ba1faa7a74aaa44795573aa89ebb834c16d0", "patch": "@@ -5,7 +5,7 @@\n    non-overloadable operators (like the `?:' ternary operator).  \n    Writtey by Mark Mitchell <mark@codesourcery.com>\n \n-   Copyright (C) 2000, 2001 Free Software Foundation, Inc.\n+   Copyright (C) 2000, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -46,10 +46,6 @@ Boston, MA 02111-1307, USA.  */\n      mangled under the new ABI.  For `operator +', for example, this\n      would be \"pl\".\n \n-   OLD_MANGLING\n-\n-     Analogous, but for the old ABI.\n-\n    ARITY\n    \n      The arity of the operator, or -1 if any arity is allowed.  (As"}, {"sha": "b7cb0f28e8bf6997f259f4f869703e591ce5dc5f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d69ba1faa7a74aaa44795573aa89ebb834c16d0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d69ba1faa7a74aaa44795573aa89ebb834c16d0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5d69ba1faa7a74aaa44795573aa89ebb834c16d0", "patch": "@@ -1,3 +1,8 @@\n+2002-07-01  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/7112\n+\t* g++.dg/template/sizeof2.C: New test.\n+\n 2002-07-01  Neil Booth  <neil@daikokuya.co.uk>\n \n \t* gcc.dg/cpp/trad/cmdlne-dD.c, gcc.dg/cpp/trad/cmdlne-dM.c,"}, {"sha": "cba9742f6b2cb8a229d2bc86bac712bedede827b", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d69ba1faa7a74aaa44795573aa89ebb834c16d0/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d69ba1faa7a74aaa44795573aa89ebb834c16d0/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=5d69ba1faa7a74aaa44795573aa89ebb834c16d0", "patch": "@@ -1,3 +1,9 @@\n+2002-07-01  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* cp-demangle.c (demangle_operator_name): Add type_arg parameter.\n+\tSet it for the \"st\" operator.\n+\t(demangle_expression): Handle expressions with types as arguments.\n+\n 2002-06-30  Douglas Rupp  <rupp@gnat.com>\n \n \t* configure.in (OUTPUT_OPTION,NO_MINUS_C_MINUS_O): Configure."}, {"sha": "162aafca78e37de3cfe3ee967b3cb85dababe815", "filename": "libiberty/cp-demangle.c", "status": "modified", "additions": 30, "deletions": 7, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d69ba1faa7a74aaa44795573aa89ebb834c16d0/libiberty%2Fcp-demangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d69ba1faa7a74aaa44795573aa89ebb834c16d0/libiberty%2Fcp-demangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcp-demangle.c?ref=5d69ba1faa7a74aaa44795573aa89ebb834c16d0", "patch": "@@ -898,7 +898,7 @@ static status_t demangle_number_literally\n static status_t demangle_identifier\n   PARAMS ((demangling_t, int, dyn_string_t));\n static status_t demangle_operator_name\n-  PARAMS ((demangling_t, int, int *));\n+  PARAMS ((demangling_t, int, int *, int *));\n static status_t demangle_nv_offset\n   PARAMS ((demangling_t));\n static status_t demangle_v_offset\n@@ -1325,7 +1325,7 @@ demangle_unqualified_name (dm, suppress_return_type)\n       if (peek == 'c' && peek_char_next (dm) == 'v')\n \t*suppress_return_type = 1;\n \n-      RETURN_IF_ERROR (demangle_operator_name (dm, 0, &num_args));\n+      RETURN_IF_ERROR (demangle_operator_name (dm, 0, &num_args, NULL));\n     }\n   else if (peek == 'C' || peek == 'D')\n     {\n@@ -1501,7 +1501,9 @@ demangle_identifier (dm, length, identifier)\n /* Demangles and emits an <operator-name>.  If SHORT_NAME is non-zero,\n    the short form is emitted; otherwise the full source form\n    (`operator +' etc.) is emitted.  *NUM_ARGS is set to the number of\n-   operands that the operator takes.  \n+   operands that the operator takes.  If TYPE_ARG is non-NULL,\n+   *TYPE_ARG is set to 1 if the first argument is a type and 0\n+   otherwise.\n \n     <operator-name>\n                   ::= nw        # new           \n@@ -1551,15 +1553,17 @@ demangle_identifier (dm, length, identifier)\n                   ::= cl        # ()            \n                   ::= ix        # []            \n                   ::= qu        # ?\n-                  ::= sz        # sizeof \n+\t\t  ::= st        # sizeof (a type)\n+                  ::= sz        # sizeof (an expression)\n                   ::= cv <type> # cast        \n \t\t  ::= v [0-9] <source-name>  # vendor extended operator  */\n \n static status_t\n-demangle_operator_name (dm, short_name, num_args)\n+demangle_operator_name (dm, short_name, num_args, type_arg)\n      demangling_t dm;\n      int short_name;\n      int *num_args;\n+     int *type_arg;\n {\n   struct operator_code\n   {\n@@ -1633,6 +1637,10 @@ demangle_operator_name (dm, short_name, num_args)\n \n   DEMANGLE_TRACE (\"operator-name\", dm);\n \n+  /* Assume the first argument is not a type.  */\n+  if (type_arg)\n+    *type_arg = 0;\n+\n   /* Is this a vendor-extended operator?  */\n   if (c0 == 'v' && IS_DIGIT (c1))\n     {\n@@ -1652,6 +1660,16 @@ demangle_operator_name (dm, short_name, num_args)\n       return STATUS_OK;\n     }\n \n+  /* Is it the sizeof variant that takes a type?  */\n+  if (c0 == 's' && c1 == 't')\n+    {\n+      RETURN_IF_ERROR (result_add (dm, \" sizeof\"));\n+      *num_args = 1;\n+      if (type_arg)\n+\t*type_arg = 1;\n+      return STATUS_OK;\n+    }\n+\n   /* Perform a binary search for the operator code.  */\n   while (1)\n     {\n@@ -3154,14 +3172,16 @@ demangle_expression (dm)\n     /* An operator expression.  */\n     {\n       int num_args;\n+      int type_arg;\n       status_t status = STATUS_OK;\n       dyn_string_t operator_name;\n \n       /* We have an operator name.  Since we want to output binary\n \t operations in infix notation, capture the operator name\n \t first.  */\n       RETURN_IF_ERROR (result_push (dm));\n-      RETURN_IF_ERROR (demangle_operator_name (dm, 1, &num_args));\n+      RETURN_IF_ERROR (demangle_operator_name (dm, 1, &num_args,\n+\t\t\t\t\t       &type_arg));\n       operator_name = (dyn_string_t) result_pop (dm);\n \n       /* If it's binary, do an operand first.  */\n@@ -3182,7 +3202,10 @@ demangle_expression (dm)\n       \n       /* Emit its second (if binary) or only (if unary) operand.  */\n       RETURN_IF_ERROR (result_add_char (dm, '('));\n-      RETURN_IF_ERROR (demangle_expression (dm));\n+      if (type_arg)\n+\tRETURN_IF_ERROR (demangle_type (dm));\n+      else\n+\tRETURN_IF_ERROR (demangle_expression (dm));\n       RETURN_IF_ERROR (result_add_char (dm, ')'));\n \n       /* The ternary operator takes a third operand.  */"}]}