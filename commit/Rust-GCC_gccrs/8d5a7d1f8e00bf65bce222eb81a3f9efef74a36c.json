{"sha": "8d5a7d1f8e00bf65bce222eb81a3f9efef74a36c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGQ1YTdkMWY4ZTAwYmY2NWJjZTIyMmViODFhM2Y5ZWZlZjc0YTM2Yw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2007-08-07T23:44:59Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2007-08-07T23:44:59Z"}, "message": "common.opt (finstrument-functions-exclude-function-list): New option.\n\n./:\t* common.opt (finstrument-functions-exclude-function-list): New\n\toption.\n\t(finstrument-functions-exclude-file-list): New option.\n\t* opts.c (char_p): Define and DEF_VEC.\n\t(flag_instrument_functions_exclude_functions): New static\n\tvariable.\n\t(flag_instrument_functions_exclude_files): New static variable.\n\t(add_instrument_functions_exclude_list): New static function.\n\t(flag_instrument_functions_exclude_p): New function.\n\t(common_handle_option): Handle new options.\n\t* flags.h (flag_instrument_functions_exclude_p): Declare.\n\t* gimplify.c (gimplify_function_tree): Call\n\tflag_instrument_functions_exclude_p.\n\t* doc/invoke.texi (Option Summary): Mention new options.\n\t(Code Gen Options): Document new options.\ntestsuite/:\n\t* gcc.dg/instrument-1.c: New test.\n\t* gcc.dg/instrument-2.c: New test.\n\t* gcc.dg/instrument-3.c: New test.\n\nFrom-SVN: r127284", "tree": {"sha": "5dedb48ab335a56b7d0176746501250ce787dd2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5dedb48ab335a56b7d0176746501250ce787dd2b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8d5a7d1f8e00bf65bce222eb81a3f9efef74a36c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d5a7d1f8e00bf65bce222eb81a3f9efef74a36c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d5a7d1f8e00bf65bce222eb81a3f9efef74a36c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d5a7d1f8e00bf65bce222eb81a3f9efef74a36c/comments", "author": null, "committer": null, "parents": [{"sha": "d4fd3465b63ef4d5e4c7d0d894dc6d69e7f54103", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4fd3465b63ef4d5e4c7d0d894dc6d69e7f54103", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4fd3465b63ef4d5e4c7d0d894dc6d69e7f54103"}], "stats": {"total": 194, "additions": 193, "deletions": 1}, "files": [{"sha": "08d491f1cb866df6d6b0a29ed164569e0646bb06", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d5a7d1f8e00bf65bce222eb81a3f9efef74a36c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d5a7d1f8e00bf65bce222eb81a3f9efef74a36c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8d5a7d1f8e00bf65bce222eb81a3f9efef74a36c", "patch": "@@ -1,3 +1,22 @@\n+2007-08-07  Yaz Saito  <saito@google.com>\n+\t    Ian Lance Taylor  <iant@google.com>\n+\n+\t* common.opt (finstrument-functions-exclude-function-list): New\n+\toption.\n+\t(finstrument-functions-exclude-file-list): New option.\n+\t* opts.c (char_p): Define and DEF_VEC.\n+\t(flag_instrument_functions_exclude_functions): New static\n+\tvariable.\n+\t(flag_instrument_functions_exclude_files): New static variable.\n+\t(add_instrument_functions_exclude_list): New static function.\n+\t(flag_instrument_functions_exclude_p): New function.\n+\t(common_handle_option): Handle new options.\n+\t* flags.h (flag_instrument_functions_exclude_p): Declare.\n+\t* gimplify.c (gimplify_function_tree): Call\n+\tflag_instrument_functions_exclude_p.\n+\t* doc/invoke.texi (Option Summary): Mention new options.\n+\t(Code Gen Options): Document new options.\n+\n 2007-08-07  Ian Lance Taylor  <iant@google.com>\n \n \tPR rtl-optimization/32776"}, {"sha": "6d277eac86a486b409ada3bc7f996191daa07fdb", "filename": "gcc/common.opt", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d5a7d1f8e00bf65bce222eb81a3f9efef74a36c/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d5a7d1f8e00bf65bce222eb81a3f9efef74a36c/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=8d5a7d1f8e00bf65bce222eb81a3f9efef74a36c", "patch": "@@ -575,6 +575,14 @@ finstrument-functions\n Common Report Var(flag_instrument_function_entry_exit)\n Instrument function entry and exit with profiling calls\n \n+finstrument-functions-exclude-function-list=\n+Common RejectNegative Joined\n+-finstrument-functions-exclude-function-list=name,...  Do not instrument listed functions\n+\n+finstrument-functions-exclude-file-list=\n+Common RejectNegative Joined\n+-finstrument-functions-exclude-file-list=filename,...  Do not instrument functions listed in files\n+\n fipa-cp\n Common Report Var(flag_ipa_cp) Optimization\n Perform Interprocedural constant propagation"}, {"sha": "57b7e73218b036544df72bddbfdc4b90e2c228e8", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d5a7d1f8e00bf65bce222eb81a3f9efef74a36c/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d5a7d1f8e00bf65bce222eb81a3f9efef74a36c/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=8d5a7d1f8e00bf65bce222eb81a3f9efef74a36c", "patch": "@@ -810,6 +810,8 @@ See S/390 and zSeries Options.\n -fnon-call-exceptions  -funwind-tables @gol\n -fasynchronous-unwind-tables @gol\n -finhibit-size-directive  -finstrument-functions @gol\n+-finstrument-functions-exclude-function-list=@var{sym},@var{sym},@dots{} @gol\n+-finstrument-functions-exclude-file-list=@var{file},@var{file},@dots{} @gol\n -fno-common  -fno-ident @gol\n -fpcc-struct-return  -fpic  -fPIC -fpie -fPIE @gol\n -fno-jump-tables @gol\n@@ -14681,6 +14683,37 @@ interrupt routines, and any functions from which the profiling functions\n cannot safely be called (perhaps signal handlers, if the profiling\n routines generate output or allocate memory).\n \n+@item -finstrument-functions-exclude-file-list=@var{file},@var{file},@dots{}\n+@opindex finstrument-functions-exclude-file-list\n+\n+Set the list of functions that are excluded from instrumentation (see\n+the description of @code{-finstrument-functions}).  If the file that\n+contains a function definition matches with one of @var{file}, then\n+that function is not instrumented.  The match is done on substrings:\n+if the @var{file} parameter is a substring of the file name, it is\n+considered to be a match.\n+\n+For example,\n+@code{-finstrument-functions-exclude-file-list=/bits/stl,include/sys}\n+will exclude any inline function defined in files whose pathnames\n+contain @code{/bits/stl} or @code{include/sys}.\n+\n+If, for some reason, you want to include letter @code{','} in one of\n+@var{sym}, write @code{'\\,'}. For example,\n+@code{-finstrument-functions-exclude-file-list='\\,\\,tmp'}\n+(note the single quote surrounding the option).\n+\n+@item -finstrument-functions-exclude-function-list=@var{sym},@var{sym},@dots{}\n+@opindex finstrument-functions-exclude-function-list\n+\n+This is similar to @code{-finstrument-functions-exclude-file-list},\n+but this option sets the list of function names to be excluded from\n+instrumentation.  The function name to be matched is its user-visible\n+name, such as @code{vector<int> blah(const vector<int> &)}, not the\n+internal mangled name (e.g., @code{_Z4blahRSt6vectorIiSaIiEE}).  The\n+match is done on substrings: if the @var{sym} parameter is a substring\n+of the function name, it is considered to be a match.\n+\n @item -fstack-check\n @opindex fstack-check\n Generate code to verify that you do not go beyond the boundary of the"}, {"sha": "d52d030a0d7d8eabdaee7b137ed69033b9394e75", "filename": "gcc/flags.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d5a7d1f8e00bf65bce222eb81a3f9efef74a36c/gcc%2Fflags.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d5a7d1f8e00bf65bce222eb81a3f9efef74a36c/gcc%2Fflags.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflags.h?ref=8d5a7d1f8e00bf65bce222eb81a3f9efef74a36c", "patch": "@@ -281,6 +281,10 @@ extern bool flag_speculative_prefetching_set;\n #define abi_version_at_least(N) \\\n   (flag_abi_version == 0 || flag_abi_version >= (N))\n \n+/* Return whether the function should be excluded from\n+   instrumentation.  */\n+extern bool flag_instrument_functions_exclude_p (tree fndecl);\n+\n /* True if the given mode has a NaN representation and the treatment of\n    NaN operands is important.  Certain optimizations, such as folding\n    x * 0 into 0, are not correct for NaN operands, and are normally"}, {"sha": "8b77c8097155afde70375b63c214030eb66e6381", "filename": "gcc/gimplify.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d5a7d1f8e00bf65bce222eb81a3f9efef74a36c/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d5a7d1f8e00bf65bce222eb81a3f9efef74a36c/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=8d5a7d1f8e00bf65bce222eb81a3f9efef74a36c", "patch": "@@ -6494,7 +6494,8 @@ gimplify_function_tree (tree fndecl)\n      catch the exit hook.  */\n   /* ??? Add some way to ignore exceptions for this TFE.  */\n   if (flag_instrument_function_entry_exit\n-      && ! DECL_NO_INSTRUMENT_FUNCTION_ENTRY_EXIT (fndecl))\n+      && !DECL_NO_INSTRUMENT_FUNCTION_ENTRY_EXIT (fndecl)\n+      && !flag_instrument_functions_exclude_p (fndecl))\n     {\n       tree tf, x, bind;\n "}, {"sha": "21491fa4f598bb1ad8f91c59fddb079f4ced1747", "filename": "gcc/opts.c", "status": "modified", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d5a7d1f8e00bf65bce222eb81a3f9efef74a36c/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d5a7d1f8e00bf65bce222eb81a3f9efef74a36c/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=8d5a7d1f8e00bf65bce222eb81a3f9efef74a36c", "patch": "@@ -353,6 +353,15 @@ static bool flag_unroll_loops_set, flag_tracer_set;\n static bool flag_value_profile_transformations_set;\n static bool flag_peel_loops_set, flag_branch_probabilities_set;\n \n+/* Functions excluded from profiling.  */\n+\n+typedef char *char_p; /* For DEF_VEC_P.  */\n+DEF_VEC_P(char_p);\n+DEF_VEC_ALLOC_P(char_p,heap);\n+\n+static VEC(char_p,heap) *flag_instrument_functions_exclude_functions;\n+static VEC(char_p,heap) *flag_instrument_functions_exclude_files;\n+\n /* Input file names.  */\n const char **in_fnames;\n unsigned num_in_fnames;\n@@ -602,6 +611,87 @@ add_input_filename (const char *filename)\n   in_fnames[num_in_fnames - 1] = filename;\n }\n \n+/* Add functions or file names to a vector of names to exclude from\n+   instrumentation.  */\n+\n+static void\n+add_instrument_functions_exclude_list (VEC(char_p,heap) **pvec,\n+\t\t\t\t       const char* arg)\n+{\n+  char *tmp;\n+  char *r;\n+  char *w;\n+  char *token_start;\n+\n+  /* We never free this string.  */\n+  tmp = xstrdup (arg);\n+\n+  r = tmp;\n+  w = tmp;\n+  token_start = tmp;\n+\n+  while (*r != '\\0')\n+    {\n+      if (*r == ',')\n+\t{\n+\t  *w++ = '\\0';\n+\t  ++r;\n+\t  VEC_safe_push (char_p, heap, *pvec, token_start);\n+\t  token_start = w;\n+\t}\n+      if (*r == '\\\\' && r[1] == ',')\n+\t{\n+\t  *w++ = ',';\n+\t  r += 2;\n+\t}\n+      else\n+\t*w++ = *r++;\n+    }\n+  if (*token_start != '\\0')\n+    VEC_safe_push (char_p, heap, *pvec, token_start);\n+}\n+\n+/* Return whether we should exclude FNDECL from instrumentation.  */\n+\n+bool\n+flag_instrument_functions_exclude_p (tree fndecl)\n+{\n+  if (VEC_length (char_p, flag_instrument_functions_exclude_functions) > 0)\n+    {\n+      const char *name;\n+      int i;\n+      char *s;\n+\n+      name = lang_hooks.decl_printable_name (fndecl, 0);\n+      for (i = 0;\n+\t   VEC_iterate (char_p, flag_instrument_functions_exclude_functions,\n+\t\t\ti, s);\n+\t   ++i)\n+\t{\n+\t  if (strstr (name, s) != NULL)\n+\t    return true;\n+\t}\n+    }\n+\n+  if (VEC_length (char_p, flag_instrument_functions_exclude_files) > 0)\n+    {\n+      const char *name;\n+      int i;\n+      char *s;\n+\n+      name = DECL_SOURCE_FILE (fndecl);\n+      for (i = 0;\n+\t   VEC_iterate (char_p, flag_instrument_functions_exclude_files, i, s);\n+\t   ++i)\n+\t{\n+\t  if (strstr (name, s) != NULL)\n+\t    return true;\n+\t}\n+    }\n+\n+  return false;\n+}\n+\n /* Decode and handle the vector of command line options.  LANG_MASK\n    contains has a single bit set representing the current\n    language.  */\n@@ -1474,6 +1564,16 @@ common_handle_option (size_t scode, const char *arg, int value,\n       set_param_value (\"max-inline-insns-auto\", value / 2);\n       break;\n \n+    case OPT_finstrument_functions_exclude_function_list_:\n+      add_instrument_functions_exclude_list\n+\t(&flag_instrument_functions_exclude_functions, arg);\n+      break;\n+\n+    case OPT_finstrument_functions_exclude_file_list_:\n+      add_instrument_functions_exclude_list\n+\t(&flag_instrument_functions_exclude_files, arg);\n+      break;\n+\n     case OPT_fmessage_length_:\n       pp_set_line_maximum_length (global_dc->printer, value);\n       break;"}, {"sha": "a6f9d6ea5ead290cb3d85013bd13a5b4ab62d9fb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d5a7d1f8e00bf65bce222eb81a3f9efef74a36c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d5a7d1f8e00bf65bce222eb81a3f9efef74a36c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8d5a7d1f8e00bf65bce222eb81a3f9efef74a36c", "patch": "@@ -1,3 +1,9 @@\n+2007-08-07  Ian Lance Taylor  <iant@google.com>\n+\n+\t* gcc.dg/instrument-1.c: New test.\n+\t* gcc.dg/instrument-2.c: New test.\n+\t* gcc.dg/instrument-3.c: New test.\n+\n 2007-08-07  Steve Ellcey  <sje@cup.hp.com>\n \n \t* gfortran.dg/c_kind_params.f90: Check for stdint.h."}, {"sha": "1e2d8acc6677a2fa225316f85e0befa43bf7f453", "filename": "gcc/testsuite/gcc.dg/instrument-1.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d5a7d1f8e00bf65bce222eb81a3f9efef74a36c/gcc%2Ftestsuite%2Fgcc.dg%2Finstrument-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d5a7d1f8e00bf65bce222eb81a3f9efef74a36c/gcc%2Ftestsuite%2Fgcc.dg%2Finstrument-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Finstrument-1.c?ref=8d5a7d1f8e00bf65bce222eb81a3f9efef74a36c", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-finstrument-functions\" } */\n+\n+void fn () { }\n+\n+/* { dg-final { scan-assembler \"__cyg_profile_func_enter\" } } */\n+/* { dg-final { scan-assembler \"__cyg_profile_func_exit\" } } */"}, {"sha": "297a02da695b64c6ea5bfee8a8272cbac87f5ce6", "filename": "gcc/testsuite/gcc.dg/instrument-2.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d5a7d1f8e00bf65bce222eb81a3f9efef74a36c/gcc%2Ftestsuite%2Fgcc.dg%2Finstrument-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d5a7d1f8e00bf65bce222eb81a3f9efef74a36c/gcc%2Ftestsuite%2Fgcc.dg%2Finstrument-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Finstrument-2.c?ref=8d5a7d1f8e00bf65bce222eb81a3f9efef74a36c", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-finstrument-functions -finstrument-functions-exclude-function-list=fn\" } */\n+\n+void fn () { }\n+\n+/* { dg-final { scan-assembler-not \"__cyg_profile_func_enter\" } } */\n+/* { dg-final { scan-assembler-not \"__cyg_profile_func_exit\" } } */"}, {"sha": "c1a9c2a81311a599b05d4bbc3056c1bce6f11ea5", "filename": "gcc/testsuite/gcc.dg/instrument-3.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d5a7d1f8e00bf65bce222eb81a3f9efef74a36c/gcc%2Ftestsuite%2Fgcc.dg%2Finstrument-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d5a7d1f8e00bf65bce222eb81a3f9efef74a36c/gcc%2Ftestsuite%2Fgcc.dg%2Finstrument-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Finstrument-3.c?ref=8d5a7d1f8e00bf65bce222eb81a3f9efef74a36c", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-finstrument-functions -finstrument-functions-exclude-file-list=instrument-3\" } */\n+\n+void fn () { }\n+\n+/* { dg-final { scan-assembler-not \"__cyg_profile_func_enter\" } } */\n+/* { dg-final { scan-assembler-not \"__cyg_profile_func_exit\" } } */"}]}