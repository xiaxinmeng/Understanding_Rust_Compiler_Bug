{"sha": "23bd7a9342bdb30b732cbb678a6d29c2245e8449", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjNiZDdhOTM0MmJkYjMwYjczMmNiYjY3OGE2ZDI5YzIyNDVlODQ0OQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2004-01-23T11:02:09Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2004-01-23T11:02:09Z"}, "message": "basic-block.h (PROP_POSTRELOAD): New macro.\n\n\t* basic-block.h (PROP_POSTRELOAD): New macro.\n\t(CLEANUP_LOG_LINKS): New.\n\t* cfgcleanup.c (cleanup_cfg): Only PROP_LOG_LINKS when asked to.\n\t* toplev.c (rest_of_handle_life):  Preserve LOG_LINKS trought cleanup_cfg.\n\n\t* cselib.c (value_pool): New.\n\t(new_cselib_val): Use pool.\n\t(cselib_init): Initialize value_pool\n\t(cselib_finish): Free pool.\n\nFrom-SVN: r76405", "tree": {"sha": "802fba0f5d8b9b39d10bd272582ae4909f3a1a5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/802fba0f5d8b9b39d10bd272582ae4909f3a1a5e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/23bd7a9342bdb30b732cbb678a6d29c2245e8449", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23bd7a9342bdb30b732cbb678a6d29c2245e8449", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23bd7a9342bdb30b732cbb678a6d29c2245e8449", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23bd7a9342bdb30b732cbb678a6d29c2245e8449/comments", "author": null, "committer": null, "parents": [{"sha": "b291953f9d4b1c4f927cd20a7905d4f633fa3162", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b291953f9d4b1c4f927cd20a7905d4f633fa3162", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b291953f9d4b1c4f927cd20a7905d4f633fa3162"}], "stats": {"total": 35, "additions": 31, "deletions": 4}, "files": [{"sha": "0e66702d8754c27ed6983cd73c4a67e3071c90df", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23bd7a9342bdb30b732cbb678a6d29c2245e8449/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23bd7a9342bdb30b732cbb678a6d29c2245e8449/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=23bd7a9342bdb30b732cbb678a6d29c2245e8449", "patch": "@@ -1,3 +1,15 @@\n+2004-01-23  Jan Hubicka  <jh@suse.cz>\n+\n+\t* basic-block.h (PROP_POSTRELOAD): New macro.\n+\t(CLEANUP_LOG_LINKS): New.\n+\t* cfgcleanup.c (cleanup_cfg): Only PROP_LOG_LINKS when asked to.\n+\t* toplev.c (rest_of_handle_life):  Preserve LOG_LINKS trought cleanup_cfg.\n+\n+\t* cselib.c (value_pool): New.\n+\t(new_cselib_val): Use pool.\n+\t(cselib_init): Initialize value_pool\n+\t(cselib_finish): Free pool.\n+\n 2004-01-23  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \t* config/sparc/sparc.c (scan_record_type): New function."}, {"sha": "10cc6351bd6826eae05f1f795f354d6664f8328b", "filename": "gcc/basic-block.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23bd7a9342bdb30b732cbb678a6d29c2245e8449/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23bd7a9342bdb30b732cbb678a6d29c2245e8449/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=23bd7a9342bdb30b732cbb678a6d29c2245e8449", "patch": "@@ -480,6 +480,10 @@ enum update_life_extent\n \t\t\t\t | PROP_SCAN_DEAD_CODE | PROP_AUTOINC \\\n \t\t\t\t | PROP_ALLOW_CFG_CHANGES \\\n \t\t\t\t | PROP_SCAN_DEAD_STORES)\n+#define PROP_POSTRELOAD\t\t(PROP_DEATH_NOTES  \\\n+\t\t\t\t | PROP_KILL_DEAD_CODE  \\\n+\t\t\t\t | PROP_SCAN_DEAD_CODE | PROP_AUTOINC \\\n+\t\t\t\t | PROP_SCAN_DEAD_STORES)\n \n #define CLEANUP_EXPENSIVE\t1\t/* Do relatively expensive optimizations\n \t\t\t\t\t   except for edge forwarding */\n@@ -495,6 +499,7 @@ enum update_life_extent\n #define CLEANUP_NO_INSN_DEL\t128\t/* Do not try to delete trivially dead\n \t\t\t\t\t   insns.  */\n #define CLEANUP_CFGLAYOUT\t256\t/* Do cleanup in cfglayout mode.  */\n+#define CLEANUP_LOG_LINKS\t512\t/* Update log links.  */\n extern void life_analysis (rtx, FILE *, int);\n extern int update_life_info (sbitmap, enum update_life_extent, int);\n extern int update_life_info_in_dirty_blocks (enum update_life_extent, int);"}, {"sha": "10bffe772939238928e78c7a26ba61506c4fd080", "filename": "gcc/cfgcleanup.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23bd7a9342bdb30b732cbb678a6d29c2245e8449/gcc%2Fcfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23bd7a9342bdb30b732cbb678a6d29c2245e8449/gcc%2Fcfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgcleanup.c?ref=23bd7a9342bdb30b732cbb678a6d29c2245e8449", "patch": "@@ -1916,7 +1916,8 @@ cleanup_cfg (int mode)\n \t\t\t\t\t\t PROP_DEATH_NOTES\n \t\t\t\t\t\t | PROP_SCAN_DEAD_CODE\n \t\t\t\t\t\t | PROP_KILL_DEAD_CODE\n-\t\t\t\t\t\t | PROP_LOG_LINKS))\n+\t\t\t  \t\t\t | ((mode & CLEANUP_LOG_LINKS)\n+\t\t\t\t\t\t    ? PROP_LOG_LINKS : 0)))\n \t    break;\n \t}\n       else if (!(mode & (CLEANUP_NO_INSN_DEL | CLEANUP_PRE_SIBCALL))"}, {"sha": "de13ebef93d65764b5c01a05c8407b417b68bea6", "filename": "gcc/cselib.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23bd7a9342bdb30b732cbb678a6d29c2245e8449/gcc%2Fcselib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23bd7a9342bdb30b732cbb678a6d29c2245e8449/gcc%2Fcselib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcselib.c?ref=23bd7a9342bdb30b732cbb678a6d29c2245e8449", "patch": "@@ -130,7 +130,7 @@ static cselib_val dummy_val;\n    May or may not contain the useless values - the list is compacted\n    each time memory is invalidated.  */\n static cselib_val *first_containing_mem = &dummy_val;\n-static alloc_pool elt_loc_list_pool, elt_list_pool, cselib_val_pool;\n+static alloc_pool elt_loc_list_pool, elt_list_pool, cselib_val_pool, value_pool;\n \f\n \n /* Allocate a struct elt_list and fill in its two elements with the\n@@ -694,7 +694,12 @@ new_cselib_val (unsigned int value, enum machine_mode mode)\n #endif\n \n   e->value = value;\n-  e->u.val_rtx = gen_rtx_VALUE (mode);\n+  /* We use custom method to allocate this RTL construct because it accounts\n+     about 8% of overall memory usage.  */\n+  e->u.val_rtx = pool_alloc (value_pool);\n+  memset (e->u.val_rtx, 0, RTX_HDR_SIZE);\n+  PUT_CODE (e->u.val_rtx, VALUE);\n+  PUT_MODE (e->u.val_rtx, mode);\n   CSELIB_VAL_PTR (e->u.val_rtx) = e;\n   e->addr_list = 0;\n   e->locs = 0;\n@@ -1392,6 +1397,8 @@ cselib_init (void)\n \t\t\t\t         sizeof (struct elt_loc_list), 10);\n   cselib_val_pool = create_alloc_pool (\"cselib_val_list\", \n \t\t\t\t       sizeof (cselib_val), 10);\n+  value_pool = create_alloc_pool (\"value\", \n+\t\t\t\t  RTX_SIZE (VALUE), 100);\n   /* This is only created once.  */\n   if (! callmem)\n     callmem = gen_rtx_MEM (BLKmode, const0_rtx);\n@@ -1420,6 +1427,7 @@ cselib_finish (void)\n   free_alloc_pool (elt_list_pool);\n   free_alloc_pool (elt_loc_list_pool);\n   free_alloc_pool (cselib_val_pool);\n+  free_alloc_pool (value_pool);\n   clear_table ();\n   reg_values_old = reg_values;\n   reg_values = 0;"}, {"sha": "05e753a7628de00702066e5fb545edc5aaaa12d7", "filename": "gcc/toplev.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23bd7a9342bdb30b732cbb678a6d29c2245e8449/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23bd7a9342bdb30b732cbb678a6d29c2245e8449/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=23bd7a9342bdb30b732cbb678a6d29c2245e8449", "patch": "@@ -2812,6 +2812,7 @@ rest_of_handle_life (tree decl, rtx insns)\n   life_analysis (insns, rtl_dump_file, PROP_FINAL);\n   if (optimize)\n     cleanup_cfg ((optimize ? CLEANUP_EXPENSIVE : 0) | CLEANUP_UPDATE_LIFE\n+\t\t | CLEANUP_LOG_LINKS\n \t\t | (flag_thread_jumps ? CLEANUP_THREADING : 0));\n   timevar_pop (TV_FLOW);\n \n@@ -3456,7 +3457,7 @@ rest_of_compilation (tree decl)\n \n   if (optimize)\n     {\n-      life_analysis (insns, rtl_dump_file, PROP_FINAL);\n+      life_analysis (insns, rtl_dump_file, PROP_POSTRELOAD);\n       cleanup_cfg (CLEANUP_EXPENSIVE | CLEANUP_UPDATE_LIFE\n \t\t   | (flag_crossjumping ? CLEANUP_CROSSJUMP : 0));\n "}]}