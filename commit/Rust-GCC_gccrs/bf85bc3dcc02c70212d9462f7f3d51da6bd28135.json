{"sha": "bf85bc3dcc02c70212d9462f7f3d51da6bd28135", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmY4NWJjM2RjYzAyYzcwMjEyZDk0NjJmN2YzZDUxZGE2YmQyODEzNQ==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernd.schmidt@analog.com", "date": "2008-11-27T09:11:50Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2008-11-27T09:11:50Z"}, "message": "bfin.opt (micplb): New option.\n\n\t* config/bfin/bfin.opt (micplb): New option.\n\t* config/bfin/linux.h (SUBTARGET_DRIVER_SELF_SPECS): Set it.\n\t* config/bfin/bfin-protos.h (WA_INDIRECT_CALLS,\n\tENABLE_WA_INDIRECT_CALLS): New macros.\n\t* config/bfin/bfin.c (bfin_cpus): Add WA_INDIRECT_CALLS to\n\tall 54x CPUs.\n\t(indirect_call_p): New function.\n\t(workaround_speculation): Handle anomaly 05-00-0426 when\n\tENABLE_WA_INDIRECT_CALLS is true.\n\t* config/bfin/bfin.h (TARGET_CPU_CPP_BUILTINS): Define\n\t__WORKAROUND_INDIRECT_CALLS if ENABLE_WA_INDIRECT_CALLS.\n\t* doc/invoke.texi (Blackfin Options): Document -micplb.\n\nFrom-SVN: r142240", "tree": {"sha": "39f86c0b994fdbd882d7d60227581db147b68ed7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/39f86c0b994fdbd882d7d60227581db147b68ed7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf85bc3dcc02c70212d9462f7f3d51da6bd28135", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf85bc3dcc02c70212d9462f7f3d51da6bd28135", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf85bc3dcc02c70212d9462f7f3d51da6bd28135", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf85bc3dcc02c70212d9462f7f3d51da6bd28135/comments", "author": null, "committer": null, "parents": [{"sha": "58ad17cfc604874da23ea94095db3976b965f070", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58ad17cfc604874da23ea94095db3976b965f070", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58ad17cfc604874da23ea94095db3976b965f070"}], "stats": {"total": 97, "additions": 78, "deletions": 19}, "files": [{"sha": "03db6c2516295c849e07a53a5e3c05711c84480e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf85bc3dcc02c70212d9462f7f3d51da6bd28135/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf85bc3dcc02c70212d9462f7f3d51da6bd28135/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bf85bc3dcc02c70212d9462f7f3d51da6bd28135", "patch": "@@ -1,3 +1,18 @@\n+2008-11-27  Bernd Schmidt  <bernd.schmidt@analog.com>\n+\n+\t* config/bfin/bfin.opt (micplb): New option.\n+\t* config/bfin/linux.h (SUBTARGET_DRIVER_SELF_SPECS): Set it.\n+\t* config/bfin/bfin-protos.h (WA_INDIRECT_CALLS,\n+\tENABLE_WA_INDIRECT_CALLS): New macros.\n+\t* config/bfin/bfin.c (bfin_cpus): Add WA_INDIRECT_CALLS to\n+\tall 54x CPUs.\n+\t(indirect_call_p): New function.\n+\t(workaround_speculation): Handle anomaly 05-00-0426 when\n+\tENABLE_WA_INDIRECT_CALLS is true.\n+\t* config/bfin/bfin.h (TARGET_CPU_CPP_BUILTINS): Define\n+\t__WORKAROUND_INDIRECT_CALLS if ENABLE_WA_INDIRECT_CALLS.\n+\t* doc/invoke.texi (Blackfin Options): Document -micplb.\n+\n 2008-11-26  DJ Delorie  <dj@redhat.com>\n \n \t* config/m32c/mov.md (\"extendhipsi2\"): New."}, {"sha": "3e9ae4317c38f83d8613782be424c95255bf4102", "filename": "gcc/config/bfin/bfin-protos.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf85bc3dcc02c70212d9462f7f3d51da6bd28135/gcc%2Fconfig%2Fbfin%2Fbfin-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf85bc3dcc02c70212d9462f7f3d51da6bd28135/gcc%2Fconfig%2Fbfin%2Fbfin-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin-protos.h?ref=bf85bc3dcc02c70212d9462f7f3d51da6bd28135", "patch": "@@ -75,6 +75,11 @@ extern unsigned int bfin_workarounds;\n #define ENABLE_WA_RETS \\\n   (bfin_workarounds & WA_RETS)\n \n+/* For the anomaly 05-00-0426 */\n+#define WA_INDIRECT_CALLS 0x00000008\n+#define ENABLE_WA_INDIRECT_CALLS \\\n+  ((bfin_workarounds & WA_INDIRECT_CALLS) && !TARGET_ICPLB)\n+\n #define WA_05000257 0x00000040\n #define ENABLE_WA_05000257 \\\n   (bfin_workarounds & WA_05000257)"}, {"sha": "949ceaca0157d457855dc31c98e88b2d85d0401f", "filename": "gcc/config/bfin/bfin.c", "status": "modified", "additions": 42, "deletions": 16, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf85bc3dcc02c70212d9462f7f3d51da6bd28135/gcc%2Fconfig%2Fbfin%2Fbfin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf85bc3dcc02c70212d9462f7f3d51da6bd28135/gcc%2Fconfig%2Fbfin%2Fbfin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.c?ref=bf85bc3dcc02c70212d9462f7f3d51da6bd28135", "patch": "@@ -254,39 +254,39 @@ struct bfin_cpu bfin_cpus[] =\n    | WA_05000283 | WA_05000257 | WA_05000315},\n \n   {\"bf542\", BFIN_CPU_BF542, 0x0002,\n-   WA_SPECULATIVE_LOADS},\n+   WA_SPECULATIVE_LOADS | WA_INDIRECT_CALLS},\n   {\"bf542\", BFIN_CPU_BF542, 0x0001,\n-   WA_SPECULATIVE_LOADS | WA_RETS},\n+   WA_SPECULATIVE_LOADS | WA_RETS | WA_INDIRECT_CALLS},\n   {\"bf542\", BFIN_CPU_BF542, 0x0000,\n-   WA_SPECULATIVE_LOADS | WA_RETS},\n+   WA_SPECULATIVE_LOADS | WA_RETS | WA_INDIRECT_CALLS},\n \n   {\"bf544\", BFIN_CPU_BF544, 0x0002,\n-   WA_SPECULATIVE_LOADS},\n+   WA_SPECULATIVE_LOADS | WA_INDIRECT_CALLS},\n   {\"bf544\", BFIN_CPU_BF544, 0x0001,\n-   WA_SPECULATIVE_LOADS | WA_RETS},\n+   WA_SPECULATIVE_LOADS | WA_RETS | WA_INDIRECT_CALLS},\n   {\"bf544\", BFIN_CPU_BF544, 0x0000,\n-   WA_SPECULATIVE_LOADS | WA_RETS},\n+   WA_SPECULATIVE_LOADS | WA_RETS | WA_INDIRECT_CALLS},\n \n   {\"bf547\", BFIN_CPU_BF547, 0x0002,\n-   WA_SPECULATIVE_LOADS},\n+   WA_SPECULATIVE_LOADS | WA_INDIRECT_CALLS},\n   {\"bf547\", BFIN_CPU_BF547, 0x0001,\n-   WA_SPECULATIVE_LOADS | WA_RETS},\n+   WA_SPECULATIVE_LOADS | WA_RETS | WA_INDIRECT_CALLS},\n   {\"bf547\", BFIN_CPU_BF547, 0x0000,\n-   WA_SPECULATIVE_LOADS | WA_RETS},\n+   WA_SPECULATIVE_LOADS | WA_RETS | WA_INDIRECT_CALLS},\n \n   {\"bf548\", BFIN_CPU_BF548, 0x0002,\n-   WA_SPECULATIVE_LOADS},\n+   WA_SPECULATIVE_LOADS | WA_INDIRECT_CALLS},\n   {\"bf548\", BFIN_CPU_BF548, 0x0001,\n-   WA_SPECULATIVE_LOADS | WA_RETS},\n+   WA_SPECULATIVE_LOADS | WA_RETS | WA_INDIRECT_CALLS},\n   {\"bf548\", BFIN_CPU_BF548, 0x0000,\n-   WA_SPECULATIVE_LOADS | WA_RETS},\n+   WA_SPECULATIVE_LOADS | WA_RETS | WA_INDIRECT_CALLS},\n \n   {\"bf549\", BFIN_CPU_BF549, 0x0002,\n-   WA_SPECULATIVE_LOADS},\n+   WA_SPECULATIVE_LOADS | WA_INDIRECT_CALLS},\n   {\"bf549\", BFIN_CPU_BF549, 0x0001,\n-   WA_SPECULATIVE_LOADS | WA_RETS},\n+   WA_SPECULATIVE_LOADS | WA_RETS | WA_INDIRECT_CALLS},\n   {\"bf549\", BFIN_CPU_BF549, 0x0000,\n-   WA_SPECULATIVE_LOADS | WA_RETS},\n+   WA_SPECULATIVE_LOADS | WA_RETS | WA_INDIRECT_CALLS},\n \n   {\"bf561\", BFIN_CPU_BF561, 0x0005, WA_RETS\n    | WA_05000283 | WA_05000315},\n@@ -4921,6 +4921,22 @@ find_load (rtx insn)\n   return NULL_RTX;\n }\n \n+/* Determine whether PAT is an indirect call pattern.  */\n+static bool\n+indirect_call_p (rtx pat)\n+{\n+  if (GET_CODE (pat) == PARALLEL)\n+    pat = XVECEXP (pat, 0, 0);\n+  if (GET_CODE (pat) == SET)\n+    pat = SET_SRC (pat);\n+  gcc_assert (GET_CODE (pat) == CALL);\n+  pat = XEXP (pat, 0);\n+  gcc_assert (GET_CODE (pat) == MEM);\n+  pat = XEXP (pat, 0);\n+  \n+  return REG_P (pat);\n+}\n+\n static void\n workaround_speculation (void)\n {\n@@ -4929,7 +4945,8 @@ workaround_speculation (void)\n   int cycles_since_jump = INT_MAX;\n   int delay_added = 0;\n \n-  if (! ENABLE_WA_SPECULATIVE_LOADS && ! ENABLE_WA_SPECULATIVE_SYNCS)\n+  if (! ENABLE_WA_SPECULATIVE_LOADS && ! ENABLE_WA_SPECULATIVE_SYNCS\n+      && ! ENABLE_WA_INDIRECT_CALLS)\n     return;\n \n   /* First pass: find predicted-false branches; if something after them\n@@ -4962,6 +4979,15 @@ workaround_speculation (void)\n \t  else\n \t    cycles_since_jump = INT_MAX;\n \t}\n+      else if (CALL_P (insn))\n+\t{\n+\t  if (cycles_since_jump < INT_MAX)\n+\t    cycles_since_jump++;\n+\t  if (indirect_call_p (pat) && ENABLE_WA_INDIRECT_CALLS)\n+\t    {\n+\t      delay_needed = 3;\n+\t    }\n+\t}\n       else if (INSN_P (insn))\n \t{\n \t  rtx load_insn = find_load (insn);"}, {"sha": "cf706b7cc8c54a8fe91f3dd272e91572bd918505", "filename": "gcc/config/bfin/bfin.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf85bc3dcc02c70212d9462f7f3d51da6bd28135/gcc%2Fconfig%2Fbfin%2Fbfin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf85bc3dcc02c70212d9462f7f3d51da6bd28135/gcc%2Fconfig%2Fbfin%2Fbfin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.h?ref=bf85bc3dcc02c70212d9462f7f3d51da6bd28135", "patch": "@@ -149,8 +149,10 @@ extern int target_flags;\n \tbuiltin_define (\"__WORKAROUND_SPECULATIVE_LOADS\");\t\t\\\n       if (ENABLE_WA_SPECULATIVE_SYNCS)\t\t\t\t\t\\\n \tbuiltin_define (\"__WORKAROUND_SPECULATIVE_SYNCS\");\t\t\\\n+      if (ENABLE_WA_SPECULATIVE_SYNCS)\t\t\t\t\t\\\n+\tbuiltin_define (\"__WORKAROUND_INDIRECT_CALLS\");\t\t\t\\\n       if (ENABLE_WA_RETS)\t\t\t\t\t\t\\\n-\tbuiltin_define (\"__WORKAROUND_RETS\");\t\t\\\n+\tbuiltin_define (\"__WORKAROUND_RETS\");\t\t\t\t\\\n \t\t\t\t\t\t\\\n       if (TARGET_FDPIC)\t\t\t\t\\\n \t{\t\t\t\t\t\\"}, {"sha": "633e13598bbc3b1e266285e2921e7d795df70db6", "filename": "gcc/config/bfin/bfin.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf85bc3dcc02c70212d9462f7f3d51da6bd28135/gcc%2Fconfig%2Fbfin%2Fbfin.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf85bc3dcc02c70212d9462f7f3d51da6bd28135/gcc%2Fconfig%2Fbfin%2Fbfin.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.opt?ref=bf85bc3dcc02c70212d9462f7f3d51da6bd28135", "patch": "@@ -95,3 +95,7 @@ Build for Core B\n msdram\n Target Report Mask(SDRAM)\n Build for SDRAM\n+\n+micplb\n+Target Report Mask(ICPLB)\n+Assume ICPLBs are enabled at runtime."}, {"sha": "b786dcb6fff0a5ba411295478fd3012fbab3b177", "filename": "gcc/config/bfin/linux.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf85bc3dcc02c70212d9462f7f3d51da6bd28135/gcc%2Fconfig%2Fbfin%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf85bc3dcc02c70212d9462f7f3d51da6bd28135/gcc%2Fconfig%2Fbfin%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Flinux.h?ref=bf85bc3dcc02c70212d9462f7f3d51da6bd28135", "patch": "@@ -1,6 +1,6 @@\n #undef SUBTARGET_DRIVER_SELF_SPECS\n #define SUBTARGET_DRIVER_SELF_SPECS \\\n-  \"%{!mno-fdpic:-mfdpic}\",\n+  \"%{!mno-fdpic:-mfdpic} -micplb\",\n \n #undef TARGET_OS_CPP_BUILTINS\n #define TARGET_OS_CPP_BUILTINS() LINUX_TARGET_OS_CPP_BUILTINS()"}, {"sha": "7e6da15515d4b29df7abcb3d4ca3c607e106c83e", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf85bc3dcc02c70212d9462f7f3d51da6bd28135/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf85bc3dcc02c70212d9462f7f3d51da6bd28135/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=bf85bc3dcc02c70212d9462f7f3d51da6bd28135", "patch": "@@ -468,7 +468,8 @@ Objective-C and Objective-C++ Dialects}.\n -mno-id-shared-library  -mshared-library-id=@var{n} @gol\n -mleaf-id-shared-library  -mno-leaf-id-shared-library @gol\n -msep-data  -mno-sep-data  -mlong-calls  -mno-long-calls @gol\n--mfast-fp -minline-plt -mmulticore  -mcorea  -mcoreb  -msdram}\n+-mfast-fp -minline-plt -mmulticore  -mcorea  -mcoreb  -msdram @gol\n+-micplb}\n \n @emph{CRIS Options}\n @gccoptlist{-mcpu=@var{cpu}  -march=@var{cpu}  -mtune=@var{cpu} @gol\n@@ -9312,6 +9313,12 @@ Build standalone application for SDRAM. Proper start files and\n link scripts will be used to put the application into SDRAM.\n Loader should initialize SDRAM before loading the application\n into SDRAM. This option defines @code{__BFIN_SDRAM}.\n+\n+@item -micplb\n+@opindex micplb\n+Assume that ICPLBs are enabled at runtime.  This has an effect on certain\n+anomaly workarounds.  For Linux targets, the default is to assume ICPLBs\n+are enabled; for standalone applications the default is off.\n @end table\n \n @node CRIS Options"}]}