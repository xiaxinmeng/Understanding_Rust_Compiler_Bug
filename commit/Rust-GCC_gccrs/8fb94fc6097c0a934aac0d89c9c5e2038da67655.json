{"sha": "8fb94fc6097c0a934aac0d89c9c5e2038da67655", "node_id": "C_kwDOANBUbNoAKDhmYjk0ZmM2MDk3YzBhOTM0YWFjMGQ4OWM5YzVlMjAzOGRhNjc2NTU", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-05-27T07:57:46Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-05-27T08:01:13Z"}, "message": "Canonicalize X&-Y as X*Y in match.pd when Y is [0,1].\n\n\"For every pessimization, there's an equal and opposite optimization\".\n\nIn the review of my original patch for PR middle-end/98865, Richard\nBiener pointed out that match.pd shouldn't be transforming X*Y into\nX&-Y as the former is considered cheaper by tree-ssa's cost model\n(operator count).  A corollary of this is that we should instead be\ntransforming X&-Y into the cheaper X*Y as a preferred canonical form\n(especially as RTL expansion now intelligently selects the appropriate\nimplementation based on the target's costs).\n\nWith this patch we now generate identical code for:\nint foo(int x, int y) { return -(x&1) & y; }\nint bar(int x, int y) { return (x&1) * y; }\n\nspecifically on x86_64-pc-linux-gnu both use and/neg/and with -O2,\nbut both use and/mul with -Os.\n\nOne minor wrinkle/improvement is that this patch includes three\nadditional optimizations (that account for the change in canonical\nform) to continue to optimize PR92834 and PR94786.\n\n2022-05-27  Roger Sayle  <roger@nextmovesoftware.com>\n\ngcc/ChangeLog\n\t* match.pd (match_zero_one_valued_p): New predicate.\n\t(mult @0 @1): Use zero_one_valued_p for optimization to the\n\texpression \"bit_and @0 @1\".\n\t(bit_and (negate zero_one_valued_p@0) @1): Optimize to MULT_EXPR.\n\t(plus @0 (mult (minus @1 @0) zero_one_valued_p@2)): New transform.\n\t(minus @0 (mult (minus @0 @1) zero_one_valued_p@2)): Likewise.\n\t(bit_xor @0 (mult (bit_xor @0 @1) zero_one_valued_p@2)): Likewise.\n\tRemove three redundant transforms obsoleted by the three above.\n\ngcc/testsuite/ChangeLog\n\t* gcc.dg/pr98865.c: New test case.", "tree": {"sha": "ca59552b1d3ccc5c9fc0a1f8c83136a4fa53f093", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ca59552b1d3ccc5c9fc0a1f8c83136a4fa53f093"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8fb94fc6097c0a934aac0d89c9c5e2038da67655", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fb94fc6097c0a934aac0d89c9c5e2038da67655", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fb94fc6097c0a934aac0d89c9c5e2038da67655", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fb94fc6097c0a934aac0d89c9c5e2038da67655/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29ae455901ac711470c4aa4f42d51f62e0b3753a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29ae455901ac711470c4aa4f42d51f62e0b3753a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29ae455901ac711470c4aa4f42d51f62e0b3753a"}], "stats": {"total": 100, "additions": 55, "deletions": 45}, "files": [{"sha": "88c6c414881dd02b8d61302bfa730fc48138d081", "filename": "gcc/match.pd", "status": "modified", "additions": 41, "deletions": 45, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fb94fc6097c0a934aac0d89c9c5e2038da67655/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fb94fc6097c0a934aac0d89c9c5e2038da67655/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=8fb94fc6097c0a934aac0d89c9c5e2038da67655", "patch": "@@ -285,14 +285,6 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n            || !COMPLEX_FLOAT_TYPE_P (type)))\n    (negate @0)))\n \n-/* Transform { 0 or 1 } * { 0 or 1 } into { 0 or 1 } & { 0 or 1 } */\n-(simplify\n- (mult SSA_NAME@1 SSA_NAME@2)\n-  (if (INTEGRAL_TYPE_P (type)\n-       && get_nonzero_bits (@1) == 1\n-       && get_nonzero_bits (@2) == 1)\n-   (bit_and @1 @2)))\n-\n /* Transform x * { 0 or 1, 0 or 1, ... } into x & { 0 or -1, 0 or -1, ...},\n    unless the target has native support for the former but not the latter.  */\n (simplify\n@@ -1787,6 +1779,27 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n   (bit_not (bit_not @0))\n   @0)\n \n+(match zero_one_valued_p\n+ @0\n+ (if (INTEGRAL_TYPE_P (type) && tree_nonzero_bits (@0) == 1)))\n+(match zero_one_valued_p\n+ truth_valued_p@0)\n+\n+/* Transform { 0 or 1 } * { 0 or 1 } into { 0 or 1 } & { 0 or 1 }.  */\n+(simplify\n+ (mult zero_one_valued_p@0 zero_one_valued_p@1)\n+ (if (INTEGRAL_TYPE_P (type))\n+  (bit_and @0 @1)))\n+\n+/* Transform X & -Y into X * Y when Y is { 0 or 1 }.  */\n+(simplify\n+ (bit_and:c (convert? (negate zero_one_valued_p@0)) @1)\n+ (if (INTEGRAL_TYPE_P (type)\n+      && INTEGRAL_TYPE_P (TREE_TYPE (@0))\n+      && TREE_CODE (TREE_TYPE (@0)) != BOOLEAN_TYPE\n+      && !TYPE_UNSIGNED (TREE_TYPE (@0)))\n+  (mult (convert @0) @1)))\n+\n /* Convert ~ (-A) to A - 1.  */\n (simplify\n  (bit_not (convert? (negate @0)))\n@@ -3281,44 +3294,27 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n   (cmp @0 (minmax:c @0 @1))\n   { constant_boolean_node (cmp == GE_EXPR || cmp == LE_EXPR, type); } ))\n \n-/* Undo fancy way of writing max/min or other ?: expressions,\n-   like a - ((a - b) & -(a < b)), in this case into (a < b) ? b : a.\n+/* Undo fancy ways of writing max/min or other ?: expressions, like\n+   a - ((a - b) & -(a < b))  and  a - (a - b) * (a < b) into (a < b) ? b : a.\n    People normally use ?: and that is what we actually try to optimize.  */\n-(for cmp (simple_comparison)\n- (simplify\n-  (minus @0 (bit_and:c (minus @0 @1)\n-\t\t       (convert? (negate@4 (convert? (cmp@5 @2 @3))))))\n-  (if (INTEGRAL_TYPE_P (type)\n-       && INTEGRAL_TYPE_P (TREE_TYPE (@4))\n-       && TREE_CODE (TREE_TYPE (@4)) != BOOLEAN_TYPE\n-       && INTEGRAL_TYPE_P (TREE_TYPE (@5))\n-       && (TYPE_PRECISION (TREE_TYPE (@4)) >= TYPE_PRECISION (type)\n-\t   || !TYPE_UNSIGNED (TREE_TYPE (@4)))\n-       && (GIMPLE || !TREE_SIDE_EFFECTS (@1)))\n-   (cond (cmp @2 @3) @1 @0)))\n- (simplify\n-  (plus:c @0 (bit_and:c (minus @1 @0)\n-\t\t\t(convert? (negate@4 (convert? (cmp@5 @2 @3))))))\n-  (if (INTEGRAL_TYPE_P (type)\n-       && INTEGRAL_TYPE_P (TREE_TYPE (@4))\n-       && TREE_CODE (TREE_TYPE (@4)) != BOOLEAN_TYPE\n-       && INTEGRAL_TYPE_P (TREE_TYPE (@5))\n-       && (TYPE_PRECISION (TREE_TYPE (@4)) >= TYPE_PRECISION (type)\n-\t   || !TYPE_UNSIGNED (TREE_TYPE (@4)))\n-       && (GIMPLE || !TREE_SIDE_EFFECTS (@1)))\n-   (cond (cmp @2 @3) @1 @0)))\n- /* Similarly with ^ instead of - though in that case with :c.  */\n- (simplify\n-  (bit_xor:c @0 (bit_and:c (bit_xor:c @0 @1)\n-\t\t\t   (convert? (negate@4 (convert? (cmp@5 @2 @3))))))\n-  (if (INTEGRAL_TYPE_P (type)\n-       && INTEGRAL_TYPE_P (TREE_TYPE (@4))\n-       && TREE_CODE (TREE_TYPE (@4)) != BOOLEAN_TYPE\n-       && INTEGRAL_TYPE_P (TREE_TYPE (@5))\n-       && (TYPE_PRECISION (TREE_TYPE (@4)) >= TYPE_PRECISION (type)\n-\t   || !TYPE_UNSIGNED (TREE_TYPE (@4)))\n-       && (GIMPLE || !TREE_SIDE_EFFECTS (@1)))\n-   (cond (cmp @2 @3) @1 @0))))\n+/* Transform A + (B-A)*cmp into cmp ? B : A.  */\n+(simplify\n+ (plus:c @0 (mult:c (minus @1 @0) zero_one_valued_p@2))\n+ (if (INTEGRAL_TYPE_P (type)\n+      && (GIMPLE || !TREE_SIDE_EFFECTS (@1)))\n+  (cond (convert:boolean_type_node @2) @1 @0)))\n+/* Transform A - (A-B)*cmp into cmp ? B : A.  */\n+(simplify\n+ (minus @0 (mult:c (minus @0 @1) zero_one_valued_p@2))\n+ (if (INTEGRAL_TYPE_P (type)\n+      && (GIMPLE || !TREE_SIDE_EFFECTS (@1)))\n+  (cond (convert:boolean_type_node @2) @1 @0)))\n+/* Transform A ^ (A^B)*cmp into cmp ? B : A.  */\n+(simplify\n+ (bit_xor:c @0 (mult:c (bit_xor:c @0 @1) zero_one_valued_p@2))\n+ (if (INTEGRAL_TYPE_P (type)\n+      && (GIMPLE || !TREE_SIDE_EFFECTS (@1)))\n+  (cond (convert:boolean_type_node @2) @1 @0)))\n \n /* Simplifications of shift and rotates.  */\n "}, {"sha": "95f72703390c277f0ffa6b7a7693229c378e04a6", "filename": "gcc/testsuite/gcc.dg/pr98865.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fb94fc6097c0a934aac0d89c9c5e2038da67655/gcc%2Ftestsuite%2Fgcc.dg%2Fpr98865.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fb94fc6097c0a934aac0d89c9c5e2038da67655/gcc%2Ftestsuite%2Fgcc.dg%2Fpr98865.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr98865.c?ref=8fb94fc6097c0a934aac0d89c9c5e2038da67655", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+int foo(int x, int y)\n+{\n+  return -(x&1) & y;\n+}\n+\n+int bar(int x, int y)\n+{\n+  return (x&1) * y;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \" \\\\* \" 2 \"optimized\" } } */"}]}