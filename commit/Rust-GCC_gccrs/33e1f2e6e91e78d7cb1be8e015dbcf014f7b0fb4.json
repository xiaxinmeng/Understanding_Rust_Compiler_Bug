{"sha": "33e1f2e6e91e78d7cb1be8e015dbcf014f7b0fb4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzNlMWYyZTZlOTFlNzhkN2NiMWJlOGUwMTVkYmNmMDE0ZjdiMGZiNA==", "commit": {"author": {"name": "Sandra Loosemore", "email": "sandra@codesourcery.com", "date": "2015-02-19T16:04:53Z"}, "committer": {"name": "Sandra Loosemore", "email": "sandra@gcc.gnu.org", "date": "2015-02-19T16:04:53Z"}, "message": "extend.texi (x86 transactional memory intrinsics): Copy-edit.\n\n2015-02-19  Sandra Loosemore  <sandra@codesourcery.com>\n\n\tgcc/\n\t* doc/extend.texi (x86 transactional memory intrinsics):\n\tCopy-edit.\n\nFrom-SVN: r220819", "tree": {"sha": "01abd72bbd256b10a902334fbd92c0e4b47c411f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/01abd72bbd256b10a902334fbd92c0e4b47c411f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/33e1f2e6e91e78d7cb1be8e015dbcf014f7b0fb4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33e1f2e6e91e78d7cb1be8e015dbcf014f7b0fb4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33e1f2e6e91e78d7cb1be8e015dbcf014f7b0fb4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33e1f2e6e91e78d7cb1be8e015dbcf014f7b0fb4/comments", "author": {"login": "SandraLoosemore", "id": 104087111, "node_id": "U_kgDOBjQ-Rw", "avatar_url": "https://avatars.githubusercontent.com/u/104087111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SandraLoosemore", "html_url": "https://github.com/SandraLoosemore", "followers_url": "https://api.github.com/users/SandraLoosemore/followers", "following_url": "https://api.github.com/users/SandraLoosemore/following{/other_user}", "gists_url": "https://api.github.com/users/SandraLoosemore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SandraLoosemore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SandraLoosemore/subscriptions", "organizations_url": "https://api.github.com/users/SandraLoosemore/orgs", "repos_url": "https://api.github.com/users/SandraLoosemore/repos", "events_url": "https://api.github.com/users/SandraLoosemore/events{/privacy}", "received_events_url": "https://api.github.com/users/SandraLoosemore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "801050dc4c8d79900ab68f37ed1e0668897660bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/801050dc4c8d79900ab68f37ed1e0668897660bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/801050dc4c8d79900ab68f37ed1e0668897660bb"}], "stats": {"total": 42, "additions": 24, "deletions": 18}, "files": [{"sha": "d2baaf0d25497fa58f4fd580a7fce42dcf98d9ff", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33e1f2e6e91e78d7cb1be8e015dbcf014f7b0fb4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33e1f2e6e91e78d7cb1be8e015dbcf014f7b0fb4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=33e1f2e6e91e78d7cb1be8e015dbcf014f7b0fb4", "patch": "@@ -1,3 +1,8 @@\n+2015-02-19  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\t* doc/extend.texi (x86 transactional memory intrinsics):\n+\tCopy-edit.\n+\n 2015-02-19  Richard Henderson  <rth@redhat.com>\n \n \tPR middle-end/65074"}, {"sha": "54c1941ccf0d78286e78cdbd7adec1f1fd9897ca", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 19, "deletions": 18, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33e1f2e6e91e78d7cb1be8e015dbcf014f7b0fb4/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33e1f2e6e91e78d7cb1be8e015dbcf014f7b0fb4/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=33e1f2e6e91e78d7cb1be8e015dbcf014f7b0fb4", "patch": "@@ -17257,10 +17257,11 @@ int __builtin_ia32_xtest ()\n @node x86 transactional memory intrinsics\n @subsection x86 Transactional Memory Intrinsics\n \n-Hardware transactional memory intrinsics for x86. These allow to use\n+These hardware transactional memory intrinsics for x86 allow you to use\n memory transactions with RTM (Restricted Transactional Memory).\n-For using HLE (Hardware Lock Elision) see @ref{x86 specific memory model extensions for transactional memory} instead.\n This support is enabled with the @option{-mrtm} option.\n+For using HLE (Hardware Lock Elision) see \n+@ref{x86 specific memory model extensions for transactional memory} instead.\n \n A memory transaction commits all changes to memory in an atomic way,\n as visible to other threads. If the transaction fails it is rolled back\n@@ -17271,12 +17272,12 @@ and suitable fallback code always needs to be supplied.\n \n @deftypefn {RTM Function} {unsigned} _xbegin ()\n Start a RTM (Restricted Transactional Memory) transaction. \n-Returns _XBEGIN_STARTED when the transaction\n+Returns @code{_XBEGIN_STARTED} when the transaction\n started successfully (note this is not 0, so the constant has to be \n-explicitely tested). When the transaction aborts all side effects\n+explicitly tested).  If the transaction aborts, all side-effects\n are undone and an abort code is returned. There is no guarantee\n any transaction ever succeeds, so there always needs to be a valid\n-tested fallback path.\n+fallback path.\n @end deftypefn\n \n @smallexample\n@@ -17290,38 +17291,38 @@ if ((status = _xbegin ()) == _XBEGIN_STARTED) @{\n @}\n @end smallexample\n \n-Valid abort status bits (when the value is not @code{_XBEGIN_STARTED}) are:\n+If the transaction aborts, the return value is one of:\n \n @table @code\n @item _XABORT_EXPLICIT\n-Transaction explicitely aborted with @code{_xabort}. The parameter passed\n-to @code{_xabort} is available with @code{_XABORT_CODE(status)}\n+Transaction was explicitly aborted with @code{_xabort}.  The parameter passed\n+to @code{_xabort} is available with @code{_XABORT_CODE(status)}.\n @item _XABORT_RETRY\n Transaction retry is possible.\n @item _XABORT_CONFLICT\n-Transaction abort due to a memory conflict with another thread\n+Transaction abort due to a memory conflict with another thread.\n @item _XABORT_CAPACITY\n-Transaction abort due to the transaction using too much memory\n+Transaction abort due to the transaction using too much memory.\n @item _XABORT_DEBUG\n-Transaction abort due to a debug trap\n+Transaction abort due to a debug trap.\n @item _XABORT_NESTED\n-Transaction abort in a inner nested transaction\n+Transaction abort in an inner nested transaction.\n @end table\n \n @deftypefn {RTM Function} {void} _xend ()\n-Commit the current transaction. When no transaction is active this will\n-fault. All memory side effects of the transactions will become visible\n-to other threads in an atomic matter.\n+Commit the current transaction. When no transaction is active this faults.\n+All memory side-effects of the transaction become visible\n+to other threads in an atomic manner.\n @end deftypefn\n \n @deftypefn {RTM Function} {int} _xtest ()\n-Return a value not zero when a transaction is currently active, otherwise 0.\n+Return a nonzero value if a transaction is currently active, otherwise 0.\n @end deftypefn\n \n @deftypefn {RTM Function} {void} _xabort (status)\n Abort the current transaction. When no transaction is active this is a no-op.\n-status must be a 8bit constant, that is included in the status code returned\n-by @code{_xbegin}\n+The @var{status} is an 8-bit constant; its value is encoded in the return \n+value from @code{_xbegin}.\n @end deftypefn\n \n @node Target Format Checks"}]}