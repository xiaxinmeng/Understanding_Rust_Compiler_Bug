{"sha": "714b019cee7a58e9d19a3079d204928e4604a4b0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzE0YjAxOWNlZTdhNThlOWQxOWEzMDc5ZDIwNDkyOGU0NjA0YTRiMA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "1999-04-24T20:50:46Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1999-04-24T20:50:46Z"}, "message": "alpha.h (PRINT_OPERAND_ADDRESS): Break out to ...\n\n        * alpha.h (PRINT_OPERAND_ADDRESS): Break out to ...\n        * alpha.c (print_operand_address): here.  Handle subregs.\n\nFrom-SVN: r26616", "tree": {"sha": "dee397192cd6d66ac6a86d63a667f298bb7fb0dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dee397192cd6d66ac6a86d63a667f298bb7fb0dc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/714b019cee7a58e9d19a3079d204928e4604a4b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/714b019cee7a58e9d19a3079d204928e4604a4b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/714b019cee7a58e9d19a3079d204928e4604a4b0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/714b019cee7a58e9d19a3079d204928e4604a4b0/comments", "author": null, "committer": null, "parents": [{"sha": "4d9a07db8806962b37b60cc4927b904bccaf74ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d9a07db8806962b37b60cc4927b904bccaf74ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d9a07db8806962b37b60cc4927b904bccaf74ce"}], "stats": {"total": 65, "additions": 43, "deletions": 22}, "files": [{"sha": "8af58554aaaec755ceb3aa74e887645c9f522608", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/714b019cee7a58e9d19a3079d204928e4604a4b0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/714b019cee7a58e9d19a3079d204928e4604a4b0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=714b019cee7a58e9d19a3079d204928e4604a4b0", "patch": "@@ -1,3 +1,8 @@\n+Sat Apr 24 20:49:20 1999  Richard Henderson  <rth@cygnus.com>\n+\n+\t* alpha.h (PRINT_OPERAND_ADDRESS): Break out to ...\n+\t* alpha.c (print_operand_address): here.  Handle subregs.\n+\n Fri Apr 23 22:35:41 EDT 1999  John Wehle  (john@feith.com)\n \n \t* acconfig.h (HAVE_GAS_FILDS_FISTS): Add."}, {"sha": "7b6966e275f14a260e777d6174aca0dc4127cca6", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/714b019cee7a58e9d19a3079d204928e4604a4b0/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/714b019cee7a58e9d19a3079d204928e4604a4b0/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=714b019cee7a58e9d19a3079d204928e4604a4b0", "patch": "@@ -2929,6 +2929,40 @@ print_operand (file, x, code)\n       output_operand_lossage (\"invalid %%xn code\");\n     }\n }\n+\n+void\n+print_operand_address (file, addr)\n+    FILE *file;\n+     rtx addr;\n+{\n+  rtx basereg = NULL_RTX;\n+  HOST_WIDE_INT offset = 0;\n+\n+  if (GET_CODE (addr) == AND)\n+    addr = XEXP (addr, 0);\n+  if (GET_CODE (addr) == SUBREG)\n+    addr = SUBREG_REG (addr);\n+\n+  if (GET_CODE (addr) == REG)\n+    basereg = addr;\n+  else if (GET_CODE (addr) == CONST_INT)\n+    offset = INTVAL (addr);\n+  else if (GET_CODE (addr) == PLUS\n+           && GET_CODE (XEXP (addr, 1)) == CONST_INT)\n+    {\n+      offset = INTVAL (XEXP (addr, 1));\n+      basereg = XEXP (addr, 0);\n+      if (GET_CODE (basereg) == SUBREG)\n+\tbasereg = SUBREG_REG (basereg);\n+      if (GET_CODE (basereg) != REG)\n+\tabort ();\n+    }\n+  else\n+    abort ();\n+\n+  fprintf (file, HOST_WIDE_INT_PRINT_DEC, offset);\n+  fprintf (file, \"($%d)\", basereg ? REGNO (basereg) : 31);\n+}\n \f\n /* Emit RTL insns to initialize the variable parts of a trampoline at\n    TRAMP. FNADDR is an RTX for the address of the function's pure"}, {"sha": "857ba0d4832844789cc0e51940287f7199b319d3", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 4, "deletions": 22, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/714b019cee7a58e9d19a3079d204928e4604a4b0/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/714b019cee7a58e9d19a3079d204928e4604a4b0/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=714b019cee7a58e9d19a3079d204928e4604a4b0", "patch": "@@ -2297,28 +2297,9 @@ do {\t\t\t\t\t\t\t\t\t\\\n \f\n /* Print a memory address as an operand to reference that memory location.  */\n \n-#define PRINT_OPERAND_ADDRESS(FILE, ADDR)\t\t\\\n-{ rtx addr = (ADDR);\t\t\t\t\t\\\n-  int basereg = 31;\t\t\t\t\t\\\n-  HOST_WIDE_INT offset = 0;\t\t\t\t\\\n-\t\t\t\t\t\t\t\\\n-  if (GET_CODE (addr) == AND)\t\t\t\t\\\n-    addr = XEXP (addr, 0);\t\t\t\t\\\n-\t\t\t\t\t\t\t\\\n-  if (GET_CODE (addr) == REG)\t\t\t\t\\\n-    basereg = REGNO (addr);\t\t\t\t\\\n-  else if (GET_CODE (addr) == CONST_INT)\t\t\\\n-    offset = INTVAL (addr);\t\t\t\t\\\n-  else if (GET_CODE (addr) == PLUS\t\t\t\\\n-\t   && GET_CODE (XEXP (addr, 0)) == REG\t\t\\\n-\t   && GET_CODE (XEXP (addr, 1)) == CONST_INT)\t\\\n-    basereg = REGNO (XEXP (addr, 0)), offset = INTVAL (XEXP (addr, 1)); \\\n-  else\t\t\t\t\t\t\t\\\n-    abort ();\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\\\n-  fprintf (FILE, HOST_WIDE_INT_PRINT_DEC, offset);\t\t\\\n-  fprintf (FILE, \"($%d)\", basereg);\t\t\\\n-}\n+#define PRINT_OPERAND_ADDRESS(FILE, ADDR) \\\n+  print_operand_address((FILE), (ADDR))\n+\n /* Define the codes that are matched by predicates in alpha.c.  */\n \n #define PREDICATE_CODES \t\t\t\t\t\t\\\n@@ -2524,6 +2505,7 @@ extern int current_file_function_operand ();\n extern int alpha_sa_size ();\n extern int alpha_adjust_cost ();\n extern void print_operand ();\n+extern void print_operand_address ();\n extern int reg_or_0_operand ();\n extern int reg_or_8bit_operand ();\n extern int mul8_operand ();"}]}