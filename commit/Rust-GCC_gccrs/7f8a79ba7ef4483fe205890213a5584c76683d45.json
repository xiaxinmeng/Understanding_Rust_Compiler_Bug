{"sha": "7f8a79ba7ef4483fe205890213a5584c76683d45", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Y4YTc5YmE3ZWY0NDgzZmUyMDU4OTAyMTNhNTU4NGM3NjY4M2Q0NQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "2000-04-27T04:42:09Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-04-27T04:42:09Z"}, "message": "basic-block.h (life_analysis): Declare here ...\n\n        * basic-block.h (life_analysis): Declare here ...\n        * output.h: ... not here.\n        * flow.c (life_analysis): Remove nregs parameter; replace\n        remove_dead_code with flags.  Remove ssa dead code check.\n        Only init alias analysis if we'll use it.\n        * reg-stack.c (reg_to_stack): Update life_analysis arguments.\n        * ssa.c (convert_to_ssa): Likewise.\n        (convert_from_ssa): Likewise.\n        * toplev.c (rest_of_compilation): Likewise.\n\nFrom-SVN: r33459", "tree": {"sha": "c6db78e17bf4c4317d841efb20887069cba63452", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c6db78e17bf4c4317d841efb20887069cba63452"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7f8a79ba7ef4483fe205890213a5584c76683d45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f8a79ba7ef4483fe205890213a5584c76683d45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f8a79ba7ef4483fe205890213a5584c76683d45", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f8a79ba7ef4483fe205890213a5584c76683d45/comments", "author": null, "committer": null, "parents": [{"sha": "5229452121bd616e95e96cc9adc7912a3c74b945", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5229452121bd616e95e96cc9adc7912a3c74b945", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5229452121bd616e95e96cc9adc7912a3c74b945"}], "stats": {"total": 64, "additions": 31, "deletions": 33}, "files": [{"sha": "d7d2fd589fc58ddcfbf645ebd0accfc650c5a995", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f8a79ba7ef4483fe205890213a5584c76683d45/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f8a79ba7ef4483fe205890213a5584c76683d45/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7f8a79ba7ef4483fe205890213a5584c76683d45", "patch": "@@ -1,3 +1,15 @@\n+2000-04-26  Richard Henderson  <rth@cygnus.com>\n+\n+\t* basic-block.h (life_analysis): Declare here ...\n+\t* output.h: ... not here.\n+\t* flow.c (life_analysis): Remove nregs parameter; replace\n+\tremove_dead_code with flags.  Remove ssa dead code check.\n+\tOnly init alias analysis if we'll use it.\n+\t* reg-stack.c (reg_to_stack): Update life_analysis arguments.\n+\t* ssa.c (convert_to_ssa): Likewise.\n+\t(convert_from_ssa): Likewise.\n+\t* toplev.c (rest_of_compilation): Likewise.\n+\n 2000-04-26  Richard Henderson  <rth@cygnus.com>\n \n \t* flow.c (flow_delete_block): Rename from delete_block.  Export."}, {"sha": "f8da181b76cff4729403aa7e57643eb97ee8ed0b", "filename": "gcc/basic-block.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f8a79ba7ef4483fe205890213a5584c76683d45/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f8a79ba7ef4483fe205890213a5584c76683d45/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=7f8a79ba7ef4483fe205890213a5584c76683d45", "patch": "@@ -427,6 +427,7 @@ enum update_life_extent\n #define PROP_AUTOINC\t\t32\t/* Create autoinc mem references.  */\n #define PROP_FINAL\t\t63\t/* All of the above.  */\n \n+extern void life_analysis\tPARAMS ((rtx, FILE *, int));\n extern void update_life_info\tPARAMS ((sbitmap, enum update_life_extent,\n \t\t\t\t\t int));\n extern int count_or_remove_death_notes\tPARAMS ((sbitmap, int));"}, {"sha": "16537e2bcca9354541158b150aa721c80b3ace58", "filename": "gcc/flow.c", "status": "modified", "additions": 13, "deletions": 27, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f8a79ba7ef4483fe205890213a5584c76683d45/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f8a79ba7ef4483fe205890213a5584c76683d45/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=7f8a79ba7ef4483fe205890213a5584c76683d45", "patch": "@@ -2491,32 +2491,21 @@ calculate_loop_depth (dump)\n }\n \f\n /* Perform data flow analysis.\n-   F is the first insn of the function and NREGS the number of register numbers\n-   in use.  */\n+   F is the first insn of the function; FLAGS is a set of PROP_* flags\n+   to be used in accumulating flow info.  */\n \n void\n-life_analysis (f, nregs, file, remove_dead_code)\n+life_analysis (f, file, flags)\n      rtx f;\n-     int nregs;\n      FILE *file;\n-     int remove_dead_code;\n+     int flags;\n {\n #ifdef ELIMINABLE_REGS\n   register int i;\n   static struct {int from, to; } eliminables[] = ELIMINABLE_REGS;\n #endif\n-  int flags;\n   sbitmap all_blocks;\n \n-  /* Dead code elimination changes basic block structure and therefore\n-     breaks the SSA phi representation.  Particularly, a phi node\n-     can have an alternative value for each incoming block, referenced\n-     by the block number.  Removing dead code can bump entire blocks\n-     and therefore cause blocks to be renumbered, invalidating the\n-     numbering of phi alternatives.  */\n-  if (remove_dead_code && in_ssa_form)\n-    abort ();\n- \n   /* Record which registers will be eliminated.  We use this in\n      mark_used_regs.  */\n \n@@ -2529,17 +2518,8 @@ life_analysis (f, nregs, file, remove_dead_code)\n   SET_HARD_REG_BIT (elim_reg_set, FRAME_POINTER_REGNUM);\n #endif\n \n-  /* We want alias analysis information for local dead store elimination.  */\n-  init_alias_analysis ();\n-\n   if (! optimize)\n-    flags = PROP_DEATH_NOTES | PROP_REG_INFO;\n-  else\n-    {\n-      flags = PROP_FINAL;\n-      if (! remove_dead_code)\n-\tflags &= ~(PROP_SCAN_DEAD_CODE | PROP_KILL_DEAD_CODE);\n-    }\n+    flags &= PROP_DEATH_NOTES | PROP_REG_INFO;\n \n   /* The post-reload life analysis have (on a global basis) the same\n      registers live as was computed by reload itself.  elimination\n@@ -2550,7 +2530,11 @@ life_analysis (f, nregs, file, remove_dead_code)\n   if (reload_completed)\n     flags &= ~PROP_REG_INFO;\n \n-  max_regno = nregs;\n+  /* We want alias analysis information for local dead store elimination.  */\n+  if (flags & PROP_SCAN_DEAD_CODE)\n+    init_alias_analysis ();\n+\n+  max_regno = max_reg_num ();\n \n   /* Always remove no-op moves.  Do this before other processing so\n      that we don't have to keep re-scanning them.  */\n@@ -2582,7 +2566,9 @@ life_analysis (f, nregs, file, remove_dead_code)\n \n   /* Clean up.  */\n   sbitmap_free (all_blocks);\n-  end_alias_analysis ();\n+\n+  if (flags & PROP_SCAN_DEAD_CODE)\n+    end_alias_analysis ();\n \n   if (file)\n     dump_flow_info (file);"}, {"sha": "e54bc3571a6bb99c392af7a2b876b989a29d55ed", "filename": "gcc/output.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f8a79ba7ef4483fe205890213a5584c76683d45/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f8a79ba7ef4483fe205890213a5584c76683d45/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=7f8a79ba7ef4483fe205890213a5584c76683d45", "patch": "@@ -137,7 +137,6 @@ extern void cleanup_cfg\t\t\tPARAMS ((rtx));\n extern void calculate_loop_depth      PARAMS ((FILE *));\n extern void free_basic_block_vars     PARAMS ((int));\n extern void set_block_num             PARAMS ((rtx, int));\n-extern void life_analysis             PARAMS ((rtx, int, FILE *, int));\n #endif\n \n /* Functions in varasm.c.  */"}, {"sha": "5750e754f6891ce7cb8b6d26e4c4c46d0657bb01", "filename": "gcc/reg-stack.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f8a79ba7ef4483fe205890213a5584c76683d45/gcc%2Freg-stack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f8a79ba7ef4483fe205890213a5584c76683d45/gcc%2Freg-stack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-stack.c?ref=7f8a79ba7ef4483fe205890213a5584c76683d45", "patch": "@@ -435,7 +435,7 @@ reg_to_stack (first, file)\n      build the CFG and run life analysis.  */\n   find_basic_blocks (first, max_reg_num (), file);\n   count_or_remove_death_notes (NULL, 1);\n-  life_analysis (first, max_reg_num (), file, 0);\n+  life_analysis (first, file, PROP_DEATH_NOTES);\n \n   /* Set up block info for each basic block.  */\n   bi = (block_info) xcalloc ((n_basic_blocks + 1), sizeof (*bi));"}, {"sha": "5ce108a36ccacc2a8e3d3882c51bbe712ed71992", "filename": "gcc/ssa.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f8a79ba7ef4483fe205890213a5584c76683d45/gcc%2Fssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f8a79ba7ef4483fe205890213a5584c76683d45/gcc%2Fssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fssa.c?ref=7f8a79ba7ef4483fe205890213a5584c76683d45", "patch": "@@ -855,7 +855,7 @@ convert_to_ssa()\n   if (in_ssa_form)\n     abort ();\n \n-  life_analysis (get_insns (), max_reg_num (), NULL, 1);\n+  life_analysis (get_insns (), NULL, PROP_KILL_DEAD_CODE | PROP_SCAN_DEAD_CODE);\n \n   /* Compute dominators.  */\n   dominators = sbitmap_vector_alloc (n_basic_blocks, n_basic_blocks);\n@@ -1812,7 +1812,7 @@ convert_from_ssa()\n     \n   /* We need up-to-date life information.  */\n   compute_bb_for_insn (get_max_uid ());\n-  life_analysis (insns, max_reg_num (), NULL, 0);\n+  life_analysis (insns, NULL, PROP_KILL_DEAD_CODE | PROP_SCAN_DEAD_CODE);\n \n   /* Figure out which regs in copies and phi nodes don't conflict and\n      therefore can be coalesced.  */"}, {"sha": "dd8ea2a8e8a32e0c4c2a5c5098b9c09f28712104", "filename": "gcc/toplev.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f8a79ba7ef4483fe205890213a5584c76683d45/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f8a79ba7ef4483fe205890213a5584c76683d45/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=7f8a79ba7ef4483fe205890213a5584c76683d45", "patch": "@@ -3247,7 +3247,7 @@ rest_of_compilation (decl)\n        cleanup_cfg (insns);\n        if (optimize)\n \t calculate_loop_depth (rtl_dump_file);\n-       life_analysis (insns, max_reg_num (), rtl_dump_file, 1);\n+       life_analysis (insns, rtl_dump_file, PROP_FINAL);\n        mark_constant_function ();\n      });\n \n@@ -3434,7 +3434,7 @@ rest_of_compilation (decl)\n       TIMEVAR (flow2_time,\n \t       {\n \t\t cleanup_cfg (insns);\n-\t\t life_analysis (insns, max_reg_num (), rtl_dump_file, 1);\n+\t\t life_analysis (insns, rtl_dump_file, PROP_FINAL);\n \t       });\n \n       /* This is kind of heruistics.  We need to run combine_stack_adjustments"}]}