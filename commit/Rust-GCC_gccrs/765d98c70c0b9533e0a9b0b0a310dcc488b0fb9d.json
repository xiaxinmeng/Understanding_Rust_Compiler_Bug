{"sha": "765d98c70c0b9533e0a9b0b0a310dcc488b0fb9d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzY1ZDk4YzcwYzBiOTUzM2UwYTliMGIwYTMxMGRjYzQ4OGIwZmI5ZA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-11-12T02:24:51Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-11-12T02:24:51Z"}, "message": "toplev.c (floor_log2): Rename from floor_log2_wide, use CLZ_HWI.\n\n        * toplev.c (floor_log2): Rename from floor_log2_wide, use CLZ_HWI.\n        (exact_log2): Rename from exact_log2_wide, use CTZ_HWI.\n        * toplev.h (FL2T__): Remove.\n        (CLZ_HWI): Rename from FL2T_CLZ__.\n        (CTZ_HWI): New.\n        (floor_log2): Simplify.\n        (exact_log2): New.\n\nFrom-SVN: r90519", "tree": {"sha": "d4cafaf24db257c35cd05bea3478bde3e8c92610", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d4cafaf24db257c35cd05bea3478bde3e8c92610"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/765d98c70c0b9533e0a9b0b0a310dcc488b0fb9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/765d98c70c0b9533e0a9b0b0a310dcc488b0fb9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/765d98c70c0b9533e0a9b0b0a310dcc488b0fb9d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/765d98c70c0b9533e0a9b0b0a310dcc488b0fb9d/comments", "author": null, "committer": null, "parents": [{"sha": "c9dd20238025d7ada07751cfd899638a93f83545", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9dd20238025d7ada07751cfd899638a93f83545", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9dd20238025d7ada07751cfd899638a93f83545"}], "stats": {"total": 101, "additions": 58, "deletions": 43}, "files": [{"sha": "5a5d6d1f1298ad0b145037e1da2fafb05bbcf679", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/765d98c70c0b9533e0a9b0b0a310dcc488b0fb9d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/765d98c70c0b9533e0a9b0b0a310dcc488b0fb9d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=765d98c70c0b9533e0a9b0b0a310dcc488b0fb9d", "patch": "@@ -1,3 +1,13 @@\n+2004-11-12  Richard Henderson  <rth@redhat.com>\n+\n+\t* toplev.c (floor_log2): Rename from floor_log2_wide, use CLZ_HWI.\n+\t(exact_log2): Rename from exact_log2_wide, use CTZ_HWI.\n+\t* toplev.h (FL2T__): Remove.\n+\t(CLZ_HWI): Rename from FL2T_CLZ__.\n+\t(CTZ_HWI): New.\n+\t(floor_log2): Simplify.\n+\t(exact_log2): New.\n+\n 2004-11-12  Sebastian Pop  <pop@cri.ensmp.fr>\n \n \t* tree-data-ref.c (analyze_subscript_affine_affine): Correctly"}, {"sha": "4ce593a462cf2332164fa9ef660050821ab9f8f3", "filename": "gcc/toplev.c", "status": "modified", "additions": 20, "deletions": 14, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/765d98c70c0b9533e0a9b0b0a310dcc488b0fb9d/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/765d98c70c0b9533e0a9b0b0a310dcc488b0fb9d/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=765d98c70c0b9533e0a9b0b0a310dcc488b0fb9d", "patch": "@@ -537,20 +537,23 @@ read_integral_parameter (const char *p, const char *pname, const int  defval)\n }\n \n /* Given X, an unsigned number, return the largest int Y such that 2**Y <= X.\n-   If X is 0, return -1.\n-\n-   This should be used via the floor_log2 macro.  */\n+   If X is 0, return -1.  */\n \n int\n-floor_log2_wide (unsigned HOST_WIDE_INT x)\n+floor_log2 (unsigned HOST_WIDE_INT x)\n {\n-  int t=0;\n+  int t = 0;\n+\n   if (x == 0)\n     return -1;\n-  if (sizeof (HOST_WIDE_INT) * 8 > 64)\n+\n+#ifdef CLZ_HWI\n+  t = HOST_BITS_PER_WIDE_INT - 1 - (int) CLZ_HWI (x);\n+#else\n+  if (HOST_BITS_PER_WIDE_INT > 64)\n     if (x >= (unsigned HOST_WIDE_INT) 1 << (t + 64))\n       t += 64;\n-  if (sizeof (HOST_WIDE_INT) * 8 > 32)\n+  if (HOST_BITS_PER_WIDE_INT > 32)\n     if (x >= ((unsigned HOST_WIDE_INT) 1) << (t + 32))\n       t += 32;\n   if (x >= ((unsigned HOST_WIDE_INT) 1) << (t + 16))\n@@ -563,21 +566,24 @@ floor_log2_wide (unsigned HOST_WIDE_INT x)\n     t += 2;\n   if (x >= ((unsigned HOST_WIDE_INT) 1) << (t + 1))\n     t += 1;\n+#endif\n+\n   return t;\n }\n \n /* Return the logarithm of X, base 2, considering X unsigned,\n-   if X is a power of 2.  Otherwise, returns -1.\n-\n-   This should be used via the `exact_log2' macro.  */\n+   if X is a power of 2.  Otherwise, returns -1.  */\n \n int\n-exact_log2_wide (unsigned HOST_WIDE_INT x)\n+exact_log2 (unsigned HOST_WIDE_INT x)\n {\n-  /* Test for 0 or a power of 2.  */\n-  if (x == 0 || x != (x & -x))\n+  if (x != (x & -x))\n     return -1;\n-  return floor_log2_wide (x);\n+#ifdef CTZ_HWI\n+  return x ? CTZ_HWI (x) : -1;\n+#else\n+  return floor_log2 (x);\n+#endif\n }\n \n /* Handler for fatal signals, such as SIGSEGV.  These are transformed"}, {"sha": "719cb4cd581658ae9d7b8960ffa112e8ace10c48", "filename": "gcc/toplev.h", "status": "modified", "additions": 28, "deletions": 29, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/765d98c70c0b9533e0a9b0b0a310dcc488b0fb9d/gcc%2Ftoplev.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/765d98c70c0b9533e0a9b0b0a310dcc488b0fb9d/gcc%2Ftoplev.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.h?ref=765d98c70c0b9533e0a9b0b0a310dcc488b0fb9d", "patch": "@@ -158,38 +158,37 @@ extern void decode_d_option\t\t(const char *);\n /* Return true iff flags are set as if -ffast-math.  */\n extern bool fast_math_flags_set_p\t(void);\n \n-/* The following functions accept a wide integer argument.  Rather\n-   than having to cast on every function call, we use a macro instead.  */\n-\n-#ifndef exact_log2\n-#define exact_log2(N) exact_log2_wide ((unsigned HOST_WIDE_INT) (N))\n-\n-#if (__GNUC__ * 1000 + __GNUC_MINOR__) >= 3004\n-#if HOST_BITS_PER_WIDE_INT == HOST_BITS_PER_LONGLONG\n-#define FL2T__ HOST_WIDE_INT\n-#define FL2T_CLZ__ __builtin_clzll\n-#else\n-#if HOST_BITS_PER_WIDE_INT == HOST_BITS_PER_LONG\n-#define FL2T__ HOST_WIDE_INT\n-#define FL2T_CLZ__ __builtin_clzl\n-#else\n-#define FL2T__ int\n-#define FL2T_CLZ__ __builtin_clz\n-#endif\n-#endif\n-static inline int floor_log2(FL2T__ n)\n+/* Return log2, or -1 if not exact.  */\n+extern int exact_log2                  (unsigned HOST_WIDE_INT);\n+\n+/* Return floor of log2, with -1 for zero.  */\n+extern int floor_log2                  (unsigned HOST_WIDE_INT);\n+\n+/* Inline versions of the above for speed.  */\n+#if GCC_VERSION >= 3004\n+# if HOST_BITS_PER_WIDE_INT == HOST_BITS_PER_LONG\n+#  define CLZ_HWI __builtin_clzl\n+#  define CTZ_HWI __builtin_ctzl\n+# elif HOST_BITS_PER_WIDE_INT == HOST_BITS_PER_LONGLONG\n+#  define CLZ_HWI __builtin_clzll\n+#  define CTZ_HWI __builtin_ctzll\n+# else\n+#  define CLZ_HWI __builtin_clz\n+#  define CTZ_HWI __builtin_ctz\n+# endif\n+\n+extern inline int\n+floor_log2 (unsigned HOST_WIDE_INT x)\n {\n-  if (n)\n-    return (sizeof(FL2T__)*8-1) - (int)FL2T_CLZ__(n);\n-  return -1;\n+  return x ? HOST_BITS_PER_WIDE_INT - 1 - (int) CLZ_HWI (x) : -1;\n }\n-#else\n-#define floor_log2(N) floor_log2_wide ((unsigned HOST_WIDE_INT) (N))\n-#endif\n \n-#endif\n-extern int exact_log2_wide             (unsigned HOST_WIDE_INT);\n-extern int floor_log2_wide             (unsigned HOST_WIDE_INT);\n+extern inline int\n+exact_log2 (unsigned HOST_WIDE_INT x)\n+{\n+  return x == (x & -x) && x ? (int) CTZ_HWI (x) : -1;\n+}\n+#endif /* GCC_VERSION >= 3004 */\n \n /* Functions used to get and set GCC's notion of in what directory\n    compilation was started.  */"}]}