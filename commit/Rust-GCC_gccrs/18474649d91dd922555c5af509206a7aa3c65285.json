{"sha": "18474649d91dd922555c5af509206a7aa3c65285", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTg0NzQ2NDlkOTFkZDkyMjU1NWM1YWY1MDkyMDZhN2FhM2M2NTI4NQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-10-05T12:25:35Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-10-05T12:25:35Z"}, "message": "tree-ssa-sccvn.c (vn_get_expr_for): Handle CONSTRUCTOR of vector type.\n\n2011-10-05  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-ssa-sccvn.c (vn_get_expr_for): Handle CONSTRUCTOR of\n\tvector type.\n\t(simplify_unary_expression): Handle BIT_FIELD_REFs.\n\t(try_to_simplify): Handle BIT_FIELD_REFs.\n\nFrom-SVN: r179549", "tree": {"sha": "5a59d3a5e2025d2b5ffb3b9119b3182a49ee0282", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5a59d3a5e2025d2b5ffb3b9119b3182a49ee0282"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/18474649d91dd922555c5af509206a7aa3c65285", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18474649d91dd922555c5af509206a7aa3c65285", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18474649d91dd922555c5af509206a7aa3c65285", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18474649d91dd922555c5af509206a7aa3c65285/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4c4973ab36452aaa21c473d9dac993ef74fc02b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c4973ab36452aaa21c473d9dac993ef74fc02b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c4973ab36452aaa21c473d9dac993ef74fc02b5"}], "stats": {"total": 36, "additions": 31, "deletions": 5}, "files": [{"sha": "d920a8878c50a091d7b13bcb84c0dd892554366f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18474649d91dd922555c5af509206a7aa3c65285/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18474649d91dd922555c5af509206a7aa3c65285/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=18474649d91dd922555c5af509206a7aa3c65285", "patch": "@@ -1,3 +1,10 @@\n+2011-10-05  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-ssa-sccvn.c (vn_get_expr_for): Handle CONSTRUCTOR of\n+\tvector type.\n+\t(simplify_unary_expression): Handle BIT_FIELD_REFs.\n+\t(try_to_simplify): Handle BIT_FIELD_REFs.\n+\n 2011-10-05  Georg-Johann Lay  <avr@gjlay.de>\n \n \t* config/avr/avr-protos.h (avr_out_addto_sp): New prototype."}, {"sha": "4b5d388cf31c647ea64d1a53c5aaed08c95341a8", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18474649d91dd922555c5af509206a7aa3c65285/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18474649d91dd922555c5af509206a7aa3c65285/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=18474649d91dd922555c5af509206a7aa3c65285", "patch": "@@ -275,6 +275,13 @@ vn_get_expr_for (tree name)\n \t\t\t  gimple_assign_rhs2 (def_stmt));\n       break;\n \n+    case tcc_exceptional:\n+      if (code == CONSTRUCTOR\n+\t  && TREE_CODE\n+\t       (TREE_TYPE (gimple_assign_rhs1 (def_stmt))) == VECTOR_TYPE)\n+\texpr = gimple_assign_rhs1 (def_stmt);\n+      break;\n+\n     default:;\n     }\n   if (expr == NULL_TREE)\n@@ -2922,7 +2929,8 @@ simplify_unary_expression (gimple stmt)\n      GIMPLE_ASSIGN_SINGLE codes.  */\n   if (code == REALPART_EXPR\n       || code == IMAGPART_EXPR\n-      || code == VIEW_CONVERT_EXPR)\n+      || code == VIEW_CONVERT_EXPR\n+      || code == BIT_FIELD_REF)\n     op0 = TREE_OPERAND (op0, 0);\n \n   if (TREE_CODE (op0) != SSA_NAME)\n@@ -2934,7 +2942,8 @@ simplify_unary_expression (gimple stmt)\n   else if (CONVERT_EXPR_CODE_P (code)\n \t   || code == REALPART_EXPR\n \t   || code == IMAGPART_EXPR\n-\t   || code == VIEW_CONVERT_EXPR)\n+\t   || code == VIEW_CONVERT_EXPR\n+\t   || code == BIT_FIELD_REF)\n     {\n       /* We want to do tree-combining on conversion-like expressions.\n          Make sure we feed only SSA_NAMEs or constants to fold though.  */\n@@ -2943,6 +2952,7 @@ simplify_unary_expression (gimple stmt)\n \t  || BINARY_CLASS_P (tem)\n \t  || TREE_CODE (tem) == VIEW_CONVERT_EXPR\n \t  || TREE_CODE (tem) == SSA_NAME\n+\t  || TREE_CODE (tem) == CONSTRUCTOR\n \t  || is_gimple_min_invariant (tem))\n \top0 = tem;\n     }\n@@ -2951,7 +2961,14 @@ simplify_unary_expression (gimple stmt)\n   if (op0 == orig_op0)\n     return NULL_TREE;\n \n-  result = fold_unary_ignore_overflow (code, gimple_expr_type (stmt), op0);\n+  if (code == BIT_FIELD_REF)\n+    {\n+      tree rhs = gimple_assign_rhs1 (stmt);\n+      result = fold_ternary (BIT_FIELD_REF, TREE_TYPE (rhs),\n+\t\t\t     op0, TREE_OPERAND (rhs, 1), TREE_OPERAND (rhs, 2));\n+    }\n+  else\n+    result = fold_unary_ignore_overflow (code, gimple_expr_type (stmt), op0);\n   if (result)\n     {\n       STRIP_USELESS_TYPE_CONVERSION (result);\n@@ -2989,7 +3006,8 @@ try_to_simplify (gimple stmt)\n       /* Fallthrough for some unary codes that can operate on registers.  */\n       if (!(code == REALPART_EXPR\n \t    || code == IMAGPART_EXPR\n-\t    || code == VIEW_CONVERT_EXPR))\n+\t    || code == VIEW_CONVERT_EXPR\n+\t    || code == BIT_FIELD_REF))\n \tbreak;\n       /* We could do a little more with unary ops, if they expand\n \t into binary ops, but it's debatable whether it is worth it. */\n@@ -3159,7 +3177,8 @@ visit_use (tree use)\n \t\t\t  /* VOP-less references can go through unary case.  */\n \t\t\t  if ((code == REALPART_EXPR\n \t\t\t       || code == IMAGPART_EXPR\n-\t\t\t       || code == VIEW_CONVERT_EXPR)\n+\t\t\t       || code == VIEW_CONVERT_EXPR\n+\t\t\t       || code == BIT_FIELD_REF)\n \t\t\t      && TREE_CODE (TREE_OPERAND (rhs1, 0)) == SSA_NAME)\n \t\t\t    {\n \t\t\t      changed = visit_nary_op (lhs, stmt);"}]}