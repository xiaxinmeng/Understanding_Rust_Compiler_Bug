{"sha": "72f8fc592bc86e22853d389886f326b201f7d8ac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzJmOGZjNTkyYmM4NmUyMjg1M2QzODk4ODZmMzI2YjIwMWY3ZDhhYw==", "commit": {"author": {"name": "Lee Millward", "email": "lmillward@gcc.gnu.org", "date": "2006-10-17T23:22:14Z"}, "committer": {"name": "Lee Millward", "email": "lmillward@gcc.gnu.org", "date": "2006-10-17T23:22:14Z"}, "message": "re PR c++/27952 (ICE with invalid virtual inheritance)\n\n        PR c++/27952\n        * cp-tree.h (xref_basetypes): Return bool instead of void.\n        * decl.c (xref_basetypes): Adjust definition. Return false\n        if the class bases are invalid.\n        * parser.c (cp_parser_class_head): Check the return value\n        from xref_basetypes.\n\n        * g++.dg/inherit/virtual1.C: New test.\n\nFrom-SVN: r117839", "tree": {"sha": "6b65296bdb4fe909caa51f2ee2b16f75b74179f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6b65296bdb4fe909caa51f2ee2b16f75b74179f1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/72f8fc592bc86e22853d389886f326b201f7d8ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72f8fc592bc86e22853d389886f326b201f7d8ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72f8fc592bc86e22853d389886f326b201f7d8ac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72f8fc592bc86e22853d389886f326b201f7d8ac/comments", "author": null, "committer": null, "parents": [{"sha": "4ac6f4c5e645b310acc0f9a0e22ef0e3e4fd6019", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ac6f4c5e645b310acc0f9a0e22ef0e3e4fd6019", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ac6f4c5e645b310acc0f9a0e22ef0e3e4fd6019"}], "stats": {"total": 61, "additions": 51, "deletions": 10}, "files": [{"sha": "2358e9bf81856dcf6c498810fc17e3358c04d1d4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72f8fc592bc86e22853d389886f326b201f7d8ac/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72f8fc592bc86e22853d389886f326b201f7d8ac/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=72f8fc592bc86e22853d389886f326b201f7d8ac", "patch": "@@ -1,3 +1,12 @@\n+2006-10-17  Lee Millward  <lee.millward@codesourcery.com> \n+\n+        PR c++/27952\n+        * cp-tree.h (xref_basetypes): Return bool instead of void.\n+        * decl.c (xref_basetypes): Adjust definition. Return false\n+        if the class bases are invalid.\n+        * parser.c (cp_parser_class_head): Check the return value\n+        from xref_basetypes.\n+\t\n 2006-10-17  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/28261"}, {"sha": "43b0202c940900bc1e1af92bbd6d68bd5922fcd1", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72f8fc592bc86e22853d389886f326b201f7d8ac/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72f8fc592bc86e22853d389886f326b201f7d8ac/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=72f8fc592bc86e22853d389886f326b201f7d8ac", "patch": "@@ -3909,7 +3909,7 @@ extern int grok_ctor_properties\t\t\t(tree, tree);\n extern bool grok_op_properties\t\t\t(tree, bool);\n extern tree xref_tag\t\t\t\t(enum tag_types, tree, tag_scope, bool);\n extern tree xref_tag_from_type\t\t\t(tree, tree, tag_scope);\n-extern void xref_basetypes\t\t\t(tree, tree);\n+extern bool xref_basetypes\t\t\t(tree, tree);\n extern tree start_enum\t\t\t\t(tree);\n extern void finish_enum\t\t\t\t(tree);\n extern void build_enumerator\t\t\t(tree, tree, tree);"}, {"sha": "a2a650d4ef315d5c3f69e6bb7536cde46c4bff4c", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 22, "deletions": 8, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72f8fc592bc86e22853d389886f326b201f7d8ac/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72f8fc592bc86e22853d389886f326b201f7d8ac/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=72f8fc592bc86e22853d389886f326b201f7d8ac", "patch": "@@ -9776,9 +9776,12 @@ xref_tag_from_type (tree old, tree id, tag_scope scope)\n /* Create the binfo hierarchy for REF with (possibly NULL) base list\n    BASE_LIST.  For each element on BASE_LIST the TREE_PURPOSE is an\n    access_* node, and the TREE_VALUE is the type of the base-class.\n-   Non-NULL TREE_TYPE indicates virtual inheritance.  */\n+   Non-NULL TREE_TYPE indicates virtual inheritance.  \n+ \n+   Returns true if the binfo heirarchy was successfully created,\n+   false if an error was detected. */\n \n-void\n+bool\n xref_basetypes (tree ref, tree base_list)\n {\n   tree *basep;\n@@ -9790,7 +9793,7 @@ xref_basetypes (tree ref, tree base_list)\n   tree igo_prev; /* Track Inheritance Graph Order.  */\n \n   if (ref == error_mark_node)\n-    return;\n+    return false;\n \n   /* The base of a derived class is private by default, all others are\n      public.  */\n@@ -9842,21 +9845,30 @@ xref_basetypes (tree ref, tree base_list)\n       CLASSTYPE_NON_AGGREGATE (ref) = 1;\n \n       if (TREE_CODE (ref) == UNION_TYPE)\n-\terror (\"derived union %qT invalid\", ref);\n+        {\n+\t  error (\"derived union %qT invalid\", ref);\n+          return false;\n+        }\n     }\n \n   if (max_bases > 1)\n     {\n       if (TYPE_FOR_JAVA (ref))\n-\terror (\"Java class %qT cannot have multiple bases\", ref);\n+        {\n+\t  error (\"Java class %qT cannot have multiple bases\", ref);\n+          return false;\n+        }\n     }\n \n   if (max_vbases)\n     {\n       CLASSTYPE_VBASECLASSES (ref) = VEC_alloc (tree, gc, max_vbases);\n \n       if (TYPE_FOR_JAVA (ref))\n-\terror (\"Java class %qT cannot have virtual bases\", ref);\n+        {\n+\t  error (\"Java class %qT cannot have virtual bases\", ref);\n+          return false;\n+        }\n     }\n \n   for (igo_prev = binfo; base_list; base_list = TREE_CHAIN (base_list))\n@@ -9877,7 +9889,7 @@ xref_basetypes (tree ref, tree base_list)\n \t{\n \t  error (\"base type %qT fails to be a struct or class type\",\n \t\t basetype);\n-\t  continue;\n+\t  return false;\n \t}\n \n       if (TYPE_FOR_JAVA (basetype) && (current_lang_depth () == 0))\n@@ -9911,7 +9923,7 @@ xref_basetypes (tree ref, tree base_list)\n \t    error (\"recursive type %qT undefined\", basetype);\n \t  else\n \t    error (\"duplicate base type %qT invalid\", basetype);\n-\t  continue;\n+\t  return false;\n \t}\n       TYPE_MARKED_P (basetype) = 1;\n \n@@ -9954,6 +9966,8 @@ xref_basetypes (tree ref, tree base_list)\n \telse\n \t  break;\n     }\n+\n+  return true;\n }\n \n \f"}, {"sha": "8d25db680fc915e43bc55a312c6255d83bbfcd40", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72f8fc592bc86e22853d389886f326b201f7d8ac/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72f8fc592bc86e22853d389886f326b201f7d8ac/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=72f8fc592bc86e22853d389886f326b201f7d8ac", "patch": "@@ -13499,7 +13499,8 @@ cp_parser_class_head (cp_parser* parser,\n     bases = cp_parser_base_clause (parser);\n \n   /* Process the base classes.  */\n-  xref_basetypes (type, bases);\n+  if (!xref_basetypes (type, bases))\n+    type = NULL_TREE;\n \n  done:\n   /* Leave the scope given by the nested-name-specifier.  We will"}, {"sha": "8e0c054a12da6945dad737ce67e7870f2260ac93", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72f8fc592bc86e22853d389886f326b201f7d8ac/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72f8fc592bc86e22853d389886f326b201f7d8ac/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=72f8fc592bc86e22853d389886f326b201f7d8ac", "patch": "@@ -1,3 +1,8 @@\n+2006-10-17  Lee Millward  <lee.millward@codesuorcery.com>\n+\n+        PR c++/27952\n+        * g++.dg/inherit/virtual1.C: New test.\n+\t\n 2006-10-17  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/28261"}, {"sha": "08bcbb143cfb0a0557f4286587d1ec7f40599bcd", "filename": "gcc/testsuite/g++.dg/inherit/virtual1.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72f8fc592bc86e22853d389886f326b201f7d8ac/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fvirtual1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72f8fc592bc86e22853d389886f326b201f7d8ac/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fvirtual1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fvirtual1.C?ref=72f8fc592bc86e22853d389886f326b201f7d8ac", "patch": "@@ -0,0 +1,12 @@\n+//PR c++/27952\n+\n+struct A\n+{\n+    virtual ~A() {}\n+};\n+\n+struct B : A, virtual A {};     // { dg-error \"duplicate base|forward declaration\" }\n+\n+struct C : A, B {};             // { dg-error \"duplicate base|invalid use\" }\n+\n+C c;                            // { dg-error \"aggregate\" }"}]}