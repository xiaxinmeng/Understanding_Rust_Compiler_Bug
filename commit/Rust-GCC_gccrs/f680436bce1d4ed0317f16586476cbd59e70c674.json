{"sha": "f680436bce1d4ed0317f16586476cbd59e70c674", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjY4MDQzNmJjZTFkNGVkMDMxN2YxNjU4NjQ3NmNiZDU5ZTcwYzY3NA==", "commit": {"author": {"name": "Kai Tietz", "email": "ktietz@gcc.gnu.org", "date": "2008-05-20T10:24:43Z"}, "committer": {"name": "Kai Tietz", "email": "ktietz@gcc.gnu.org", "date": "2008-05-20T10:24:43Z"}, "message": "Finally reverted parts of my escaped patch. (quilt sucks).\n\nFrom-SVN: r135607", "tree": {"sha": "58c232163d9c5f844665a3073b467cadc254b00f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/58c232163d9c5f844665a3073b467cadc254b00f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f680436bce1d4ed0317f16586476cbd59e70c674", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f680436bce1d4ed0317f16586476cbd59e70c674", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f680436bce1d4ed0317f16586476cbd59e70c674", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f680436bce1d4ed0317f16586476cbd59e70c674/comments", "author": null, "committer": null, "parents": [{"sha": "d29899bad20124ba43e6a7452e0ff2deffed9107", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d29899bad20124ba43e6a7452e0ff2deffed9107", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d29899bad20124ba43e6a7452e0ff2deffed9107"}], "stats": {"total": 59, "additions": 15, "deletions": 44}, "files": [{"sha": "aee90eb65bda927081cd6172ebfc28bbaf913333", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f680436bce1d4ed0317f16586476cbd59e70c674/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f680436bce1d4ed0317f16586476cbd59e70c674/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=f680436bce1d4ed0317f16586476cbd59e70c674", "patch": "@@ -134,10 +134,7 @@ extern rtx ix86_libcall_value (enum machine_mode);\n extern bool ix86_function_value_regno_p (int);\n extern bool ix86_function_arg_regno_p (int);\n extern int ix86_function_arg_boundary (enum machine_mode, tree);\n-extern bool ix86_return_in_memory (const_tree, const_tree);\n extern bool ix86_sol10_return_in_memory (const_tree,const_tree);\n-extern bool ix86_i386elf_return_in_memory (const_tree,const_tree);\n-extern bool ix86_i386interix_return_in_memory (const_tree,const_tree);\n extern rtx ix86_force_to_memory (enum machine_mode, rtx);\n extern void ix86_free_from_memory (enum machine_mode);\n extern void ix86_split_fp_branch (enum rtx_code code, rtx, rtx,"}, {"sha": "5dc79afa41437a08becb85d7d5748bc42e96032b", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 15, "deletions": 22, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f680436bce1d4ed0317f16586476cbd59e70c674/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f680436bce1d4ed0317f16586476cbd59e70c674/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=f680436bce1d4ed0317f16586476cbd59e70c674", "patch": "@@ -4901,17 +4901,21 @@ return_in_memory_ms_64 (const_tree type, enum machine_mode mode)\n   return (size != 1 && size != 2 && size != 4 && size != 8);\n }\n \n-bool\n+static bool\n ix86_return_in_memory (const_tree type, const_tree fntype ATTRIBUTE_UNUSED)\n {\n-  const enum machine_mode mode = type_natural_mode (type);\n-\n+#ifdef SUBTARGET_RETURN_IN_MEMORY\n+  return SUBTARGET_RETURN_IN_MEMORY (type, fntype);\n+#else\n+   const enum machine_mode mode = type_natural_mode (type);\n+ \n   if (TARGET_64BIT_MS_ABI)\n-    return return_in_memory_ms_64 (type, mode);\n-  else if (TARGET_64BIT)\n-    return return_in_memory_64 (type, mode);\n-  else\n-    return return_in_memory_32 (type, mode);\n+     return return_in_memory_ms_64 (type, mode);\n+   else if (TARGET_64BIT)\n+     return return_in_memory_64 (type, mode);\n+   else\n+     return return_in_memory_32 (type, mode);\n+#endif\n }\n \n /* Return false iff TYPE is returned in memory.  This version is used\n@@ -4951,20 +4955,6 @@ ix86_sol10_return_in_memory (const_tree type, const_tree fntype ATTRIBUTE_UNUSED\n   return size > 12;\n }\n \n-bool\n-ix86_i386elf_return_in_memory (const_tree type, const_tree fntype ATTRIBUTE_UNUSED)\n-{\n-  return (TYPE_MODE (type) == BLKmode\n-\t  || (VECTOR_MODE_P (TYPE_MODE (type)) && int_size_in_bytes (type) == 8));\n-}\n-\n-bool\n-ix86_i386interix_return_in_memory (const_tree type, const_tree fntype ATTRIBUTE_UNUSED)\n-{\n-  return (TYPE_MODE (type) == BLKmode\n-          || (AGGREGATE_TYPE_P (type) && int_size_in_bytes(type) > 8 ));\n-}\n-\n /* When returning SSE vector types, we have a choice of either\n      (1) being abi incompatible with a -march switch, or\n      (2) generating an error.\n@@ -25795,6 +25785,9 @@ x86_builtin_vectorization_cost (bool runtime_test)\n }\n \n /* Initialize the GCC target structure.  */\n+#undef TARGET_RETURN_IN_MEMORY\n+#define TARGET_RETURN_IN_MEMORY ix86_return_in_memory\n+\n #undef TARGET_ATTRIBUTE_TABLE\n #define TARGET_ATTRIBUTE_TABLE ix86_attribute_table\n #if TARGET_DLLIMPORT_DECL_ATTRIBUTES"}, {"sha": "9d36a1ff49fdd929cd70270d16d1d8375b24fb26", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f680436bce1d4ed0317f16586476cbd59e70c674/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f680436bce1d4ed0317f16586476cbd59e70c674/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=f680436bce1d4ed0317f16586476cbd59e70c674", "patch": "@@ -1261,25 +1261,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n #define GOT_SYMBOL_NAME \"_GLOBAL_OFFSET_TABLE_\"\n \n-/* A C expression which can inhibit the returning of certain function\n-   values in registers, based on the type of value.  A nonzero value\n-   says to return the function value in memory, just as large\n-   structures are always returned.  Here TYPE will be a C expression\n-   of type `tree', representing the data type of the value.\n-\n-   Note that values of mode `BLKmode' must be explicitly handled by\n-   this macro.  Also, the option `-fpcc-struct-return' takes effect\n-   regardless of this macro.  On most systems, it is possible to\n-   leave the macro undefined; this causes a default definition to be\n-   used, whose value is the constant 1 for `BLKmode' values, and 0\n-   otherwise.\n-\n-   Do not use this macro to indicate that structures and unions\n-   should always be returned in memory.  You should instead use\n-   `DEFAULT_PCC_STRUCT_RETURN' to indicate this.  */\n-\n-#define TARGET_RETURN_IN_MEMORY ix86_return_in_memory\n-\n /* This is overridden by <cygwin.h>.  */\n #define MS_AGGREGATE_RETURN 0\n "}]}