{"sha": "cbadd64af4764fe75658a20c229050453379841d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2JhZGQ2NGFmNDc2NGZlNzU2NThhMjBjMjI5MDUwNDUzMzc5ODQxZA==", "commit": {"author": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2010-08-27T19:02:15Z"}, "committer": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2010-08-27T19:02:15Z"}, "message": "re PR fortran/45420 ([OOP] polymorphic TBP call in a CLASS DEFAULT clause)\n\n2010-08-27  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/45420\n\t* match.c (select_type_set_tmp): Add the possibility to reset the\n\ttemporary to NULL.\n\t(gfc_match_class_is): Reset the temporary in CLASS DEFAULT clauses.\n\n\n2010-08-27  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/45420\n\t* gfortran.dg/select_type_15.f03: New.\n\nFrom-SVN: r163594", "tree": {"sha": "c5eca6c196ed2d20080321871f9c09dfb0c08787", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c5eca6c196ed2d20080321871f9c09dfb0c08787"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cbadd64af4764fe75658a20c229050453379841d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbadd64af4764fe75658a20c229050453379841d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cbadd64af4764fe75658a20c229050453379841d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbadd64af4764fe75658a20c229050453379841d/comments", "author": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee1e5e63ec2e20eb118af50d2b29f4099b536d19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee1e5e63ec2e20eb118af50d2b29f4099b536d19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee1e5e63ec2e20eb118af50d2b29f4099b536d19"}], "stats": {"total": 96, "additions": 96, "deletions": 0}, "files": [{"sha": "a15c13663ef216c163ac7b1b2028956b69bb0564", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbadd64af4764fe75658a20c229050453379841d/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbadd64af4764fe75658a20c229050453379841d/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=cbadd64af4764fe75658a20c229050453379841d", "patch": "@@ -1,3 +1,10 @@\n+2010-08-27  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/45420\n+\t* match.c (select_type_set_tmp): Add the possibility to reset the\n+\ttemporary to NULL.\n+\t(gfc_match_class_is): Reset the temporary in CLASS DEFAULT clauses.\n+\n 2010-08-27  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/45159"}, {"sha": "7c0dfc7478d7067c17f1f17b93d8dae421531d16", "filename": "gcc/fortran/match.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbadd64af4764fe75658a20c229050453379841d/gcc%2Ffortran%2Fmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbadd64af4764fe75658a20c229050453379841d/gcc%2Ffortran%2Fmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.c?ref=cbadd64af4764fe75658a20c229050453379841d", "patch": "@@ -4460,6 +4460,12 @@ select_type_set_tmp (gfc_typespec *ts)\n   char name[GFC_MAX_SYMBOL_LEN];\n   gfc_symtree *tmp;\n   \n+  if (!ts)\n+    {\n+      select_type_stack->tmp = NULL;\n+      return;\n+    }\n+  \n   if (!gfc_type_is_extensible (ts->u.derived))\n     return;\n \n@@ -4708,6 +4714,7 @@ gfc_match_class_is (void)\n       c->where = gfc_current_locus;\n       c->ts.type = BT_UNKNOWN;\n       new_st.ext.case_list = c;\n+      select_type_set_tmp (NULL);\n       return MATCH_YES;\n     }\n "}, {"sha": "bf917998c9396f026086dfa095e2560f3f59b72c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbadd64af4764fe75658a20c229050453379841d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbadd64af4764fe75658a20c229050453379841d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cbadd64af4764fe75658a20c229050453379841d", "patch": "@@ -1,3 +1,8 @@\n+2010-08-27  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/45420\n+\t* gfortran.dg/select_type_15.f03: New.\n+\n 2010-08-27  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR libfortran/43217"}, {"sha": "6be045c097e06bdb55cad25439a826a4650e160c", "filename": "gcc/testsuite/gfortran.dg/select_type_15.f03", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbadd64af4764fe75658a20c229050453379841d/gcc%2Ftestsuite%2Fgfortran.dg%2Fselect_type_15.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbadd64af4764fe75658a20c229050453379841d/gcc%2Ftestsuite%2Fgfortran.dg%2Fselect_type_15.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fselect_type_15.f03?ref=cbadd64af4764fe75658a20c229050453379841d", "patch": "@@ -0,0 +1,77 @@\n+! { dg-do run }\n+!\n+! PR 45420: [OOP] polymorphic TBP call in a CLASS DEFAULT clause\n+!\n+! Contributed by Salvatore Filippone <salvatore.filippone@uniroma2.it>\n+\n+\n+module base_mat_mod\n+\n+ type  :: base_sparse_mat\n+ contains\n+   procedure, pass(a) :: get_fmt => base_get_fmt\n+ end type base_sparse_mat\n+\n+contains\n+\n+ function base_get_fmt(a) result(res)\n+   implicit none\n+   class(base_sparse_mat), intent(in) :: a\n+   character(len=5) :: res\n+   res = 'NULL'\n+ end function base_get_fmt\n+\n+end module base_mat_mod\n+\n+\n+module d_base_mat_mod\n+\n+ use base_mat_mod\n+\n+ type, extends(base_sparse_mat) :: d_base_sparse_mat\n+ contains\n+   procedure, pass(a) :: get_fmt => d_base_get_fmt\n+ end type d_base_sparse_mat\n+\n+ type, extends(d_base_sparse_mat) :: x_base_sparse_mat\n+ contains\n+   procedure, pass(a) :: get_fmt => x_base_get_fmt\n+ end type x_base_sparse_mat\n+\n+contains\n+\n+ function d_base_get_fmt(a) result(res)\n+   implicit none\n+   class(d_base_sparse_mat), intent(in) :: a\n+   character(len=5) :: res\n+   res = 'DBASE'\n+ end function d_base_get_fmt\n+\n+ function x_base_get_fmt(a) result(res)\n+   implicit none\n+   class(x_base_sparse_mat), intent(in) :: a\n+   character(len=5) :: res\n+   res = 'XBASE'\n+ end function x_base_get_fmt\n+\n+end module d_base_mat_mod\n+\n+\n+program bug20\n+  use d_base_mat_mod\n+  class(d_base_sparse_mat), allocatable  :: a\n+\n+  allocate(x_base_sparse_mat :: a)\n+  if (a%get_fmt()/=\"XBASE\") call abort()\n+\n+  select type(a)\n+  type is (d_base_sparse_mat)\n+    call abort()\n+  class default\n+    if (a%get_fmt()/=\"XBASE\") call abort()\n+  end select\n+\n+end program bug20\n+\n+\n+! { dg-final { cleanup-modules \"base_mat_mod d_base_mat_mod\" } }"}]}