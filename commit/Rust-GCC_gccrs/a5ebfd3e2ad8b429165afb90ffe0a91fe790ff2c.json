{"sha": "a5ebfd3e2ad8b429165afb90ffe0a91fe790ff2c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTVlYmZkM2UyYWQ4YjQyOTE2NWFmYjkwZmZlMGE5MWZlNzkwZmYyYw==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2014-12-20T19:16:03Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2014-12-20T19:16:03Z"}, "message": "vector (std::__debug::vector<>::clear()): Do not reset guaranteed capacity.\n\n2014-12-20  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n\n\t* include/debug/vector (std::__debug::vector<>::clear()): Do not reset\n\tguaranteed capacity.\n\t* testsuite/23_containers/vector/bool/allocator/swap.cc: Move\n\tpropagating_allocator equality and inequality operators to __gnu_test\n\tnamespace.\n\nFrom-SVN: r218991", "tree": {"sha": "2a7acf49f26ae509a6178692edc32933cfb7060e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2a7acf49f26ae509a6178692edc32933cfb7060e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a5ebfd3e2ad8b429165afb90ffe0a91fe790ff2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5ebfd3e2ad8b429165afb90ffe0a91fe790ff2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5ebfd3e2ad8b429165afb90ffe0a91fe790ff2c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5ebfd3e2ad8b429165afb90ffe0a91fe790ff2c/comments", "author": null, "committer": null, "parents": [{"sha": "aa1986fac1b9bc0124b935fcaa80aa9252996c09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa1986fac1b9bc0124b935fcaa80aa9252996c09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa1986fac1b9bc0124b935fcaa80aa9252996c09"}], "stats": {"total": 40, "additions": 24, "deletions": 16}, "files": [{"sha": "60c90f753a955bb712e4049c9a770b81e45b9756", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5ebfd3e2ad8b429165afb90ffe0a91fe790ff2c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5ebfd3e2ad8b429165afb90ffe0a91fe790ff2c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a5ebfd3e2ad8b429165afb90ffe0a91fe790ff2c", "patch": "@@ -1,5 +1,11 @@\n 2014-12-20  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n \n+\t* include/debug/vector (std::__debug::vector<>::clear()): Do not reset\n+\tguaranteed capacity.\n+\t* testsuite/23_containers/vector/bool/allocator/swap.cc: Move\n+\tpropagating_allocator equality and inequality operators to __gnu_test\n+\tnamespace.\n+\n \t* testsuite/ext/profile/mutex_extensions_neg.cc: Adjust dg-error.\n \n \t* include/bits/c++config: inline __cxx11 namespace within namespace"}, {"sha": "174dd7a99fc55cfe28e75b72f376060dc9a1396f", "filename": "libstdc++-v3/include/debug/vector", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5ebfd3e2ad8b429165afb90ffe0a91fe790ff2c/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5ebfd3e2ad8b429165afb90ffe0a91fe790ff2c/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector?ref=a5ebfd3e2ad8b429165afb90ffe0a91fe790ff2c", "patch": "@@ -669,7 +669,6 @@ namespace __debug\n       {\n \t_Base::clear();\n \tthis->_M_invalidate_all();\n-\tthis->_M_guaranteed_capacity = 0;\n       }\n \n       _Base&"}, {"sha": "334b955decfba3a7f5f4a3c28f55eb9ab7a52a23", "filename": "libstdc++-v3/testsuite/23_containers/vector/bool/allocator/swap.cc", "status": "modified", "additions": 18, "deletions": 15, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5ebfd3e2ad8b429165afb90ffe0a91fe790ff2c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2Fallocator%2Fswap.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5ebfd3e2ad8b429165afb90ffe0a91fe790ff2c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2Fallocator%2Fswap.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2Fallocator%2Fswap.cc?ref=a5ebfd3e2ad8b429165afb90ffe0a91fe790ff2c", "patch": "@@ -23,25 +23,28 @@\n \n using T = bool;\n \n-using __gnu_test::propagating_allocator;\n-\n-// It is undefined behaviour to swap() containers wth unequal allocators\n-// if the allocator doesn't propagate, so ensure the allocators compare\n-// equal, while still being able to test propagation via get_personality().\n-bool\n-operator==(const propagating_allocator<T, false>&,\n-           const propagating_allocator<T, false>&)\n+namespace __gnu_test\n {\n-  return true;\n-}\n+  // It is undefined behaviour to swap() containers with unequal allocators\n+  // if the allocator doesn't propagate, so ensure the allocators compare\n+  // equal, while still being able to test propagation via get_personality().\n+  bool\n+  operator==(const propagating_allocator<T, false>&,\n+\t     const propagating_allocator<T, false>&)\n+  {\n+    return true;\n+  }\n \n-bool\n-operator!=(const propagating_allocator<T, false>&,\n-           const propagating_allocator<T, false>&)\n-{\n-  return false;\n+  bool\n+  operator!=(const propagating_allocator<T, false>&,\n+\t     const propagating_allocator<T, false>&)\n+  {\n+    return false;\n+  }\n }\n \n+using __gnu_test::propagating_allocator;\n+\n void test01()\n {\n   bool test __attribute__((unused)) = true;"}]}