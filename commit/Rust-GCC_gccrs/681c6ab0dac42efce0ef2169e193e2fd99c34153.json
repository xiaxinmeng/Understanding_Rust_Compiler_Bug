{"sha": "681c6ab0dac42efce0ef2169e193e2fd99c34153", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjgxYzZhYjBkYWM0MmVmY2UwZWYyMTY5ZTE5M2UyZmQ5OWMzNDE1Mw==", "commit": {"author": {"name": "Fred Fish", "email": "fnf@specifix.com", "date": "2008-01-07T17:23:40Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2008-01-07T17:23:40Z"}, "message": "re PR preprocessor/30363 (Support for -traditional-cpp is incomplete in current gcc relative to gcc 2.95.3)\n\nlibcpp\n2008-01-07  Fred Fish  <fnf@specifix.com>\n\tPR preprocessor/30363:\n\t* traditional.c (replace_args_and_push): Add local variable\n\tcxtquote, calculate the replacement text size assuming a \n\tworst case of every input character quoted with backslash,\n\tand properly handle output quoting of quote characters in\n\tactual arguments used in function-like macros.\ngcc/testsuite\n2008-01-07  Fred Fish  <fnf@specifix.com>\n\tPR preprocessor/30363:\n\t* gcc.dg/cpp/trad/macroargs.c: Add code to test quoting in\n\tmacro expansions.\n\nFrom-SVN: r131379", "tree": {"sha": "af95efa577b60bab897bc59c18fc2148c61eb432", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/af95efa577b60bab897bc59c18fc2148c61eb432"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/681c6ab0dac42efce0ef2169e193e2fd99c34153", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/681c6ab0dac42efce0ef2169e193e2fd99c34153", "html_url": "https://github.com/Rust-GCC/gccrs/commit/681c6ab0dac42efce0ef2169e193e2fd99c34153", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/681c6ab0dac42efce0ef2169e193e2fd99c34153/comments", "author": null, "committer": null, "parents": [{"sha": "2eac9a765c07d55499a32f7e8bbd76440969665a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2eac9a765c07d55499a32f7e8bbd76440969665a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2eac9a765c07d55499a32f7e8bbd76440969665a"}], "stats": {"total": 97, "additions": 88, "deletions": 9}, "files": [{"sha": "6a9f9b52179282f62e32a14466b99561ab4f2f11", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/681c6ab0dac42efce0ef2169e193e2fd99c34153/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/681c6ab0dac42efce0ef2169e193e2fd99c34153/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=681c6ab0dac42efce0ef2169e193e2fd99c34153", "patch": "@@ -1,3 +1,9 @@\n+2008-01-07  Fred Fish  <fnf@specifix.com>\n+\n+\tPR preprocessor/30363:\n+\t* gcc.dg/cpp/trad/macroargs.c: Add code to test quoting in\n+\tmacro expansions.\n+\n 2008-01-07  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/34672"}, {"sha": "c5f91d9f21c034f1cc0f1a4037215bb6f394a1b8", "filename": "gcc/testsuite/gcc.dg/cpp/trad/macroargs.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/681c6ab0dac42efce0ef2169e193e2fd99c34153/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmacroargs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/681c6ab0dac42efce0ef2169e193e2fd99c34153/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmacroargs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmacroargs.c?ref=681c6ab0dac42efce0ef2169e193e2fd99c34153", "patch": "@@ -8,6 +8,17 @@\n \n extern void abort (void);\n \n+void testquoting ()\n+{\n+  const char *str1 = f(\"a\", \"\\\"a\\\"\");\n+  const char *str2 = f( \\t, \" \\t\");\n+\n+  if (strcmp (str1, \"\\\"a\\\"  \\\"\\\\\\\"a\\\\\\\"\\\"\"))\n+    abort ();\n+  if (strcmp (str2, \" \\t  \\\" \\\\t\\\"\"))\n+    abort ();\n+}\n+\n int main ()\n {\n   const char *str1 = f( foo ,bar);\n@@ -26,5 +37,7 @@ foo\n , 2\"), \"1 , 2\"))\t\n     abort ();\n \n+  testquoting ();\n+\n   return 0;\n }"}, {"sha": "574e05411759ba0ab6aee1e49abf2d129ac4477a", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/681c6ab0dac42efce0ef2169e193e2fd99c34153/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/681c6ab0dac42efce0ef2169e193e2fd99c34153/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=681c6ab0dac42efce0ef2169e193e2fd99c34153", "patch": "@@ -1,3 +1,12 @@\n+2008-01-07  Fred Fish  <fnf@specifix.com>\n+\n+\tPR preprocessor/30363:\n+\t* traditional.c (replace_args_and_push): Add local variable\n+\tcxtquote, calculate the replacement text size assuming a \n+\tworst case of every input character quoted with backslash,\n+\tand properly handle output quoting of quote characters in\n+\tactual arguments used in function-like macros.\n+\n 2008-01-03  Tom Tromey  <tromey@redhat.com>\n \n \tPR preprocessor/34602."}, {"sha": "6c4dda1a9f3245e07aeb2b942cb86aa9cb7e51b4", "filename": "libcpp/traditional.c", "status": "modified", "additions": 60, "deletions": 9, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/681c6ab0dac42efce0ef2169e193e2fd99c34153/libcpp%2Ftraditional.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/681c6ab0dac42efce0ef2169e193e2fd99c34153/libcpp%2Ftraditional.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Ftraditional.c?ref=681c6ab0dac42efce0ef2169e193e2fd99c34153", "patch": "@@ -1,5 +1,5 @@\n /* CPP Library - traditional lexical analysis and macro expansion.\n-   Copyright (C) 2002, 2004, 2005, 2007 Free Software Foundation, Inc.\n+   Copyright (C) 2002, 2004, 2005, 2007, 2008 Free Software Foundation, Inc.\n    Contributed by Neil Booth, May 2002\n \n This program is free software; you can redistribute it and/or modify it\n@@ -832,39 +832,90 @@ replace_args_and_push (cpp_reader *pfile, struct fun_macro *fmacro)\n       uchar *p;\n       _cpp_buff *buff;\n       size_t len = 0;\n+      int cxtquote = 0;\n \n-      /* Calculate the length of the argument-replaced text.  */\n+      /* Get an estimate of the length of the argument-replaced text.\n+\t This is a worst case estimate, assuming that every replacement\n+\t text character needs quoting.  */\n       for (exp = macro->exp.text;;)\n \t{\n \t  struct block *b = (struct block *) exp;\n \n \t  len += b->text_len;\n \t  if (b->arg_index == 0)\n \t    break;\n-\t  len += (fmacro->args[b->arg_index]\n-\t\t  - fmacro->args[b->arg_index - 1] - 1);\n+\t  len += 2 * (fmacro->args[b->arg_index]\n+\t\t      - fmacro->args[b->arg_index - 1] - 1);\n \t  exp += BLOCK_LEN (b->text_len);\n \t}\n \n       /* Allocate room for the expansion plus \\n.  */\n       buff = _cpp_get_buff (pfile, len + 1);\n \n       /* Copy the expansion and replace arguments.  */\n+      /* Accumulate actual length, including quoting as necessary */\n       p = BUFF_FRONT (buff);\n+      len = 0;\n       for (exp = macro->exp.text;;)\n \t{\n \t  struct block *b = (struct block *) exp;\n \t  size_t arglen;\n+\t  int argquote;\n+\t  uchar *base;\n+\t  uchar *in;\n \n-\t  memcpy (p, b->text, b->text_len);\n-\t  p += b->text_len;\n+\t  len += b->text_len;\n+\t  /* Copy the non-argument text literally, keeping\n+\t     track of whether matching quotes have been seen. */\n+\t  for (arglen = b->text_len, in = b->text; arglen > 0; arglen--)\n+\t    {\n+\t      if (*in == '\"')\n+\t\tcxtquote = ! cxtquote;\n+\t      *p++ = *in++;\n+\t    }\n+\t  /* Done if no more arguments */\n \t  if (b->arg_index == 0)\n \t    break;\n \t  arglen = (fmacro->args[b->arg_index]\n \t\t    - fmacro->args[b->arg_index - 1] - 1);\n-\t  memcpy (p, pfile->out.base + fmacro->args[b->arg_index - 1],\n-\t\t  arglen);\n-\t  p += arglen;\n+\t  base = pfile->out.base + fmacro->args[b->arg_index - 1];\n+\t  in = base;\n+#if 0\n+\t  /* Skip leading whitespace in the text for the argument to\n+\t     be substituted. To be compatible with gcc 2.95, we would\n+\t     also need to trim trailing whitespace. Gcc 2.95 trims\n+\t     leading and trailing whitespace, which may be a bug.  The\n+\t     current gcc testsuite explicitly checks that this leading\n+\t     and trailing whitespace in actual arguments is\n+\t     preserved. */\n+\t  while (arglen > 0 && is_space (*in))\n+\t    {\n+\t      in++;\n+\t      arglen--;\n+\t    }\n+#endif\n+\t  for (argquote = 0; arglen > 0; arglen--)\n+\t    {\n+\t      if (cxtquote && *in == '\"')\n+\t\t{\n+\t\t  if (in > base && *(in-1) != '\\\\')\n+\t\t    argquote = ! argquote;\n+\t\t  /* Always add backslash before double quote if argument\n+\t\t     is expanded in a quoted context */\n+\t\t  *p++ = '\\\\';\n+\t\t  len++;\n+\t\t}\n+\t      else if (cxtquote && argquote && *in == '\\\\')\n+\t\t{\n+\t\t  /* Always add backslash before a backslash in an argument\n+\t\t     that is expanded in a quoted context and also in the\n+\t\t     range of a quoted context in the argument itself. */\n+\t\t  *p++ = '\\\\';\n+\t\t  len++;\n+\t\t}\n+\t      *p++ = *in++;\n+\t      len++;\n+\t    }\n \t  exp += BLOCK_LEN (b->text_len);\n \t}\n "}]}