{"sha": "45fdd4050293b95e21c01cb8cd482408e824acb7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDVmZGQ0MDUwMjkzYjk1ZTIxYzAxY2I4Y2Q0ODI0MDhlODI0YWNiNw==", "commit": {"author": {"name": "Per Bothner", "email": "per@bothner.com", "date": "2004-07-08T01:04:13Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "2004-07-08T01:04:13Z"}, "message": "* gcj.texi (Linking):   New node.  Document -lgij usage.\n\nFrom-SVN: r84252", "tree": {"sha": "9a817a69e5277700f52eeaf7104683386edd1c47", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9a817a69e5277700f52eeaf7104683386edd1c47"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/45fdd4050293b95e21c01cb8cd482408e824acb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45fdd4050293b95e21c01cb8cd482408e824acb7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45fdd4050293b95e21c01cb8cd482408e824acb7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45fdd4050293b95e21c01cb8cd482408e824acb7/comments", "author": {"login": "PerBothner", "id": 10293361, "node_id": "MDQ6VXNlcjEwMjkzMzYx", "avatar_url": "https://avatars.githubusercontent.com/u/10293361?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PerBothner", "html_url": "https://github.com/PerBothner", "followers_url": "https://api.github.com/users/PerBothner/followers", "following_url": "https://api.github.com/users/PerBothner/following{/other_user}", "gists_url": "https://api.github.com/users/PerBothner/gists{/gist_id}", "starred_url": "https://api.github.com/users/PerBothner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PerBothner/subscriptions", "organizations_url": "https://api.github.com/users/PerBothner/orgs", "repos_url": "https://api.github.com/users/PerBothner/repos", "events_url": "https://api.github.com/users/PerBothner/events{/privacy}", "received_events_url": "https://api.github.com/users/PerBothner/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fedf5454fa29f24aee9c564cf64207baf642fe64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fedf5454fa29f24aee9c564cf64207baf642fe64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fedf5454fa29f24aee9c564cf64207baf642fe64"}], "stats": {"total": 60, "additions": 51, "deletions": 9}, "files": [{"sha": "01c337cf8d028236bb8f9d766c9380828af6af91", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45fdd4050293b95e21c01cb8cd482408e824acb7/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45fdd4050293b95e21c01cb8cd482408e824acb7/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=45fdd4050293b95e21c01cb8cd482408e824acb7", "patch": "@@ -2,6 +2,8 @@\n \n \t* gcj.texi (Invoking gij):  Document new -verbose:class flag.\n \n+\t* gcj.texi (Linking):   New node.  Document -lgij usage.\n+\n 2004-07-07  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* java-tree.h (CLASSTYPE_SPUER): Adjust BINFO macros."}, {"sha": "6c831765c0856244987baed426194befbc8523ce", "filename": "gcc/java/gcj.texi", "status": "modified", "additions": 49, "deletions": 9, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45fdd4050293b95e21c01cb8cd482408e824acb7/gcc%2Fjava%2Fgcj.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45fdd4050293b95e21c01cb8cd482408e824acb7/gcc%2Fjava%2Fgcj.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fgcj.texi?ref=45fdd4050293b95e21c01cb8cd482408e824acb7", "patch": "@@ -161,6 +161,7 @@ options specific to @command{gcj}.\n * Input Options::\t\tHow gcj finds files\n * Encodings::                   Options controlling source file encoding\n * Warnings::\t\t\tOptions controlling warnings specific to gcj\n+* Linking::\t\t\tOptions for making an executable\n * Code Generation::\t\tOptions controlling the output of gcj\n * Configure-time Options::\tOptions you won't use\n @end menu\n@@ -353,21 +354,45 @@ This is the same as @code{-Wredundant-modifiers -Wextraneous-semicolon\n @end table\n \n \n-@node Code Generation\n-@section Code Generation\n+@node Linking\n+@section Linking\n \n-In addition to the many @command{gcc} options controlling code generation,\n-@command{gcj} has several options specific to itself.\n+To turn a Java application into an executable program,\n+you need to link it with the needed libraries, just as for C or C++.\n+The linker by default looks for a global function named @code{main}.\n+Since Java does not have global functions, and a\n+collection of Java classes may have more than one class with a\n+@code{main} method, you need to let the linker know which of those\n+@code{main} methods it should invoke when starting the application.\n+You can do that in any of these ways:\n+\n+@itemize @bullet\n+@item\n+Specify the class containing the desired @code{main} method\n+when you link the application, using the @code{--main} flag,\n+described below.\n+@item\n+Link the Java package(s) into a shared library (dll) rather than an\n+executable.  Then invoke the application using the @code{gij} program,\n+making sure that @code{gij} can find the libraries it needs.\n+@item\n+Link the Java packages(s) with the flag @code{-lgij}, which links\n+in the @code{main} routine from the @code{gij} command.\n+This allows you to select the class whose @code{main} method you\n+want to run when you run the application.  You can also use\n+other @code{gij} flags, such as @code{-D} flags to set properties.\n+Using the @code{-lgij} library (rather than the @code{gij} program\n+of the previous mechanism) has some advantages: it is compatible with\n+static linking, and does not require configuring or installing libraries.\n+@end itemize\n+\n+These @code{gij} options relate to linking an execitable:\n \n @table @gcctabopt\n @item --main=@var{CLASSNAME}\n This option is used when linking to specify the name of the class whose\n @code{main} method should be invoked when the resulting executable is\n-run.  @footnote{The linker by default looks for a global function named\n-@code{main}.  Since Java does not have global functions, and a\n-collection of Java classes may have more than one class with a\n-@code{main} method, you need to let the linker know which of those\n-@code{main} methods it should invoke when starting the application.}\n+run.\n \n @item -D@var{name}[=@var{value}]\n This option can only be used with @code{--main}.  It defines a system\n@@ -376,6 +401,21 @@ specified then it defaults to the empty string.  These system properties\n are initialized at the program's startup and can be retrieved at runtime\n using the @code{java.lang.System.getProperty} method.\n \n+@item -lgij\n+Create an application whose command-line processing is that\n+of the @code{gij} command.\n+\n+This option is an alternative to using @code{--main}; you cannot use both.\n+@end table\n+\n+@node Code Generation\n+@section Code Generation\n+\n+In addition to the many @command{gcc} options controlling code generation,\n+@command{gcj} has several options specific to itself.\n+\n+@table @gcctabopt\n+\n @item -C\n This option is used to tell @command{gcj} to generate bytecode\n (@file{.class} files) rather than object code."}]}