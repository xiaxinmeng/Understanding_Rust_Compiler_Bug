{"sha": "262e75d22c350acbdf4c1fb4f224cc5d3d711eff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjYyZTc1ZDIyYzM1MGFjYmRmNGMxZmI0ZjIyNGNjNWQzZDcxMWVmZg==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2021-05-27T09:25:37Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2021-05-27T09:27:37Z"}, "message": "arm: Remove use of opts_set in arm_configure_build_target [PR100767]\n\nThe variable global_options_set is a reflection of which options have\nbeen explicitly set from the command line in the structure\nglobal_options.  But it doesn't describe the contents of a\ncl_target_option.  cl_target_option is a set of options to apply and\nonce configured should represent a viable set of options without\nneeding to know which were explicitly set by the user.\n\nUnfortunately arm_configure_build_target was incorrectly conflating\nthe two.  Fortunately, however, we do not really need to know this\nsince the various override_options functions should have sanitized the\ntarget_options values before constructing a cl_target_option\nstructure.  It is safe, therefore, to simply drop this parameter to\narm_configure_build_target and rely on checking that various string\nparameters are non-null before dereferencing them.\n\ngcc:\n\n\tPR target/100767\n\t* config/arm/arm.c (arm_configure_build_target): Remove parameter\n\topts_set, directly check opts parameters for being non-null.\n\t(arm_option_restore): Update call to arm_configure_build_target.\n\t(arm_option_override): Likewise.\n\t(arm_can_inline_p): Likewise.\n\t(arm_valid_target_attribute_tree): Likewise.\n\t* config/arm/arm-c.c (arm_pragma_target_parse): Likewise.\n\t* config/arm/arm-protos.h (arm_configure_build_target): Adjust\n\tprototype.", "tree": {"sha": "b0eb748356ad39ee2aad65ca9a1bda852ed47dcc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b0eb748356ad39ee2aad65ca9a1bda852ed47dcc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/262e75d22c350acbdf4c1fb4f224cc5d3d711eff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/262e75d22c350acbdf4c1fb4f224cc5d3d711eff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/262e75d22c350acbdf4c1fb4f224cc5d3d711eff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/262e75d22c350acbdf4c1fb4f224cc5d3d711eff/comments", "author": null, "committer": null, "parents": [{"sha": "22137a3db85bee83c92cf23ba36fe0d08364afc2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22137a3db85bee83c92cf23ba36fe0d08364afc2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22137a3db85bee83c92cf23ba36fe0d08364afc2"}], "stats": {"total": 29, "additions": 12, "deletions": 17}, "files": [{"sha": "ae2139c4bfa795f97b14682b61ed4d4a714bd2ad", "filename": "gcc/config/arm/arm-c.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/262e75d22c350acbdf4c1fb4f224cc5d3d711eff/gcc%2Fconfig%2Farm%2Farm-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/262e75d22c350acbdf4c1fb4f224cc5d3d711eff/gcc%2Fconfig%2Farm%2Farm-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-c.c?ref=262e75d22c350acbdf4c1fb4f224cc5d3d711eff", "patch": "@@ -408,8 +408,7 @@ arm_pragma_target_parse (tree args, tree pop_target)\n        target_option_current_node, but not handle_pragma_target.  */\n       target_option_current_node = cur_tree;\n       arm_configure_build_target (&arm_active_target,\n-\t\t\t\t  TREE_TARGET_OPTION (cur_tree),\n-\t\t\t\t  &global_options_set, false);\n+\t\t\t\t  TREE_TARGET_OPTION (cur_tree), false);\n     }\n \n   /* Update macros if target_node changes. The global state will be restored"}, {"sha": "9b1f61394ad7d778a6c0b84bc6c805f14709f598", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/262e75d22c350acbdf4c1fb4f224cc5d3d711eff/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/262e75d22c350acbdf4c1fb4f224cc5d3d711eff/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=262e75d22c350acbdf4c1fb4f224cc5d3d711eff", "patch": "@@ -243,8 +243,7 @@ extern bool arm_change_mode_p (tree);\n extern tree arm_valid_target_attribute_tree (tree, struct gcc_options *,\n \t\t\t\t\t     struct gcc_options *);\n extern void arm_configure_build_target (struct arm_build_target *,\n-\t\t\t\t\tstruct cl_target_option *,\n-\t\t\t\t\tstruct gcc_options *, bool);\n+\t\t\t\t\tstruct cl_target_option *, bool);\n extern void arm_option_reconfigure_globals (void);\n extern void arm_options_perform_arch_sanity_checks (void);\n extern void arm_pr_long_calls (struct cpp_reader *);"}, {"sha": "7b37e1b602c76f731b5d4ede07c5ffc0a2cab121", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/262e75d22c350acbdf4c1fb4f224cc5d3d711eff/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/262e75d22c350acbdf4c1fb4f224cc5d3d711eff/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=262e75d22c350acbdf4c1fb4f224cc5d3d711eff", "patch": "@@ -3054,9 +3054,10 @@ arm_override_options_after_change (void)\n /* Implement TARGET_OPTION_RESTORE.  */\n static void\n arm_option_restore (struct gcc_options */* opts */,\n-\t\t    struct gcc_options *opts_set, struct cl_target_option *ptr)\n+\t\t    struct gcc_options */* opts_set */,\n+\t\t    struct cl_target_option *ptr)\n {\n-  arm_configure_build_target (&arm_active_target, ptr, opts_set, false);\n+  arm_configure_build_target (&arm_active_target, ptr, false);\n }\n \n /* Reset options between modes that the user has specified.  */\n@@ -3179,7 +3180,6 @@ static sbitmap isa_quirkbits;\n void\n arm_configure_build_target (struct arm_build_target *target,\n \t\t\t    struct cl_target_option *opts,\n-\t\t\t    struct gcc_options *opts_set,\n \t\t\t    bool warn_compatible)\n {\n   const cpu_option *arm_selected_tune = NULL;\n@@ -3194,15 +3194,15 @@ arm_configure_build_target (struct arm_build_target *target,\n   target->core_name = NULL;\n   target->arch_name = NULL;\n \n-  if (opts_set->x_arm_arch_string)\n+  if (opts->x_arm_arch_string)\n     {\n       arm_selected_arch = arm_parse_arch_option_name (all_architectures,\n \t\t\t\t\t\t      \"-march\",\n \t\t\t\t\t\t      opts->x_arm_arch_string);\n       arch_opts = strchr (opts->x_arm_arch_string, '+');\n     }\n \n-  if (opts_set->x_arm_cpu_string)\n+  if (opts->x_arm_cpu_string)\n     {\n       arm_selected_cpu = arm_parse_cpu_option_name (all_cores, \"-mcpu\",\n \t\t\t\t\t\t    opts->x_arm_cpu_string);\n@@ -3212,7 +3212,7 @@ arm_configure_build_target (struct arm_build_target *target,\n \t options for tuning.  */\n     }\n \n-  if (opts_set->x_arm_tune_string)\n+  if (opts->x_arm_tune_string)\n     {\n       arm_selected_tune = arm_parse_cpu_option_name (all_cores, \"-mtune\",\n \t\t\t\t\t\t     opts->x_arm_tune_string);\n@@ -3476,8 +3476,7 @@ arm_option_override (void)\n     }\n \n   cl_target_option_save (&opts, &global_options, &global_options_set);\n-  arm_configure_build_target (&arm_active_target, &opts, &global_options_set,\n-\t\t\t      true);\n+  arm_configure_build_target (&arm_active_target, &opts, true);\n \n #ifdef SUBTARGET_OVERRIDE_OPTIONS\n   SUBTARGET_OVERRIDE_OPTIONS;\n@@ -32982,10 +32981,8 @@ arm_can_inline_p (tree caller, tree callee)\n   caller_target.isa = sbitmap_alloc (isa_num_bits);\n   callee_target.isa = sbitmap_alloc (isa_num_bits);\n \n-  arm_configure_build_target (&caller_target, caller_opts, &global_options_set,\n-\t\t\t      false);\n-  arm_configure_build_target (&callee_target, callee_opts, &global_options_set,\n-\t\t\t      false);\n+  arm_configure_build_target (&caller_target, caller_opts, false);\n+  arm_configure_build_target (&callee_target, callee_opts, false);\n   if (!bitmap_subset_p (callee_target.isa, caller_target.isa))\n     can_inline = false;\n \n@@ -33121,7 +33118,7 @@ arm_valid_target_attribute_tree (tree args, struct gcc_options *opts,\n     return NULL_TREE;\n \n   cl_target_option_save (&cl_opts, opts, opts_set);\n-  arm_configure_build_target (&arm_active_target, &cl_opts, opts_set, false);\n+  arm_configure_build_target (&arm_active_target, &cl_opts, false);\n   arm_option_check_internal (opts);\n   /* Do any overrides, such as global options arch=xxx.\n      We do this since arm_active_target was overridden.  */"}]}