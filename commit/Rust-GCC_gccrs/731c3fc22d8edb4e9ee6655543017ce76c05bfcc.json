{"sha": "731c3fc22d8edb4e9ee6655543017ce76c05bfcc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzMxYzNmYzIyZDhlZGI0ZTllZTY2NTU1NDMwMTdjZTc2YzA1YmZjYw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2018-02-20T13:52:56Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2018-02-20T13:52:56Z"}, "message": "compiler: look through aliases for type compatibility\n    \n    Aliases are supposed to be identical to the type being aliased, so\n    questions about type compatibility need to always ignore aliases,\n    except for error messages involving the type name.\n    \n    The test case for this is https://golang.org/cl/94995.\n    \n    Fixes golang/go#23912\n    \n    Reviewed-on: https://go-review.googlesource.com/94996\n\nFrom-SVN: r257845", "tree": {"sha": "8ec78c4ea569b42935b65702e9f9931056a22a4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ec78c4ea569b42935b65702e9f9931056a22a4a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/731c3fc22d8edb4e9ee6655543017ce76c05bfcc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/731c3fc22d8edb4e9ee6655543017ce76c05bfcc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/731c3fc22d8edb4e9ee6655543017ce76c05bfcc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/731c3fc22d8edb4e9ee6655543017ce76c05bfcc/comments", "author": null, "committer": null, "parents": [{"sha": "6285e915c4f1b73ccbd166cdf4622da8c01a549b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6285e915c4f1b73ccbd166cdf4622da8c01a549b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6285e915c4f1b73ccbd166cdf4622da8c01a549b"}], "stats": {"total": 31, "additions": 21, "deletions": 10}, "files": [{"sha": "61bed68afca6c6a1d14bedbf26a60297cdaafd94", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/731c3fc22d8edb4e9ee6655543017ce76c05bfcc/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/731c3fc22d8edb4e9ee6655543017ce76c05bfcc/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=731c3fc22d8edb4e9ee6655543017ce76c05bfcc", "patch": "@@ -1,4 +1,4 @@\n-cef3934fbc63f5e121abb8f88d3799961ac95b59\n+459a8a94e04a19bde7173ef7cf2db369c2e62e2d\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "11924e6e224f027ecee12be8372cd6c23ae4345a", "filename": "gcc/go/gofrontend/types.cc", "status": "modified", "additions": 20, "deletions": 9, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/731c3fc22d8edb4e9ee6655543017ce76c05bfcc/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/731c3fc22d8edb4e9ee6655543017ce76c05bfcc/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.cc?ref=731c3fc22d8edb4e9ee6655543017ce76c05bfcc", "patch": "@@ -597,10 +597,10 @@ Type::are_compatible_for_comparison(bool is_equality_op, const Type *t1,\n \t  return false;\n \t}\n \n-      if (t1->named_type() != NULL)\n-\treturn t1->named_type()->named_type_is_comparable(reason);\n-      else if (t2->named_type() != NULL)\n-\treturn t2->named_type()->named_type_is_comparable(reason);\n+      if (t1->unalias()->named_type() != NULL)\n+\treturn t1->unalias()->named_type()->named_type_is_comparable(reason);\n+      else if (t2->unalias()->named_type() != NULL)\n+\treturn t2->unalias()->named_type()->named_type_is_comparable(reason);\n       else if (t1->struct_type() != NULL)\n \t{\n \t  if (t1->struct_type()->is_struct_incomparable())\n@@ -678,6 +678,12 @@ Type::are_assignable(const Type* lhs, const Type* rhs, std::string* reason)\n   if (Type::are_identical(lhs, rhs, true, reason))\n     return true;\n \n+  // Ignore aliases, except for error messages.\n+  const Type* lhs_orig = lhs;\n+  const Type* rhs_orig = rhs;\n+  lhs = lhs->unalias();\n+  rhs = rhs->unalias();\n+\n   // The types are assignable if they have identical underlying types\n   // and either LHS or RHS is not a named type.\n   if (((lhs->named_type() != NULL && rhs->named_type() == NULL)\n@@ -740,15 +746,16 @@ Type::are_assignable(const Type* lhs, const Type* rhs, std::string* reason)\n     {\n       if (rhs->interface_type() != NULL)\n \treason->assign(_(\"need explicit conversion\"));\n-      else if (lhs->named_type() != NULL && rhs->named_type() != NULL)\n+      else if (lhs_orig->named_type() != NULL\n+\t       && rhs_orig->named_type() != NULL)\n \t{\n-\t  size_t len = (lhs->named_type()->name().length()\n-\t\t\t+ rhs->named_type()->name().length()\n+\t  size_t len = (lhs_orig->named_type()->name().length()\n+\t\t\t+ rhs_orig->named_type()->name().length()\n \t\t\t+ 100);\n \t  char* buf = new char[len];\n \t  snprintf(buf, len, _(\"cannot use type %s as type %s\"),\n-\t\t   rhs->named_type()->message_name().c_str(),\n-\t\t   lhs->named_type()->message_name().c_str());\n+\t\t   rhs_orig->named_type()->message_name().c_str(),\n+\t\t   lhs_orig->named_type()->message_name().c_str());\n \t  reason->assign(buf);\n \t  delete[] buf;\n \t}\n@@ -768,6 +775,10 @@ Type::are_convertible(const Type* lhs, const Type* rhs, std::string* reason)\n   if (Type::are_assignable(lhs, rhs, reason))\n     return true;\n \n+  // Ignore aliases.\n+  lhs = lhs->unalias();\n+  rhs = rhs->unalias();\n+\n   // A pointer to a regular type may not be converted to a pointer to\n   // a type that may not live in the heap, except when converting from\n   // unsafe.Pointer."}]}