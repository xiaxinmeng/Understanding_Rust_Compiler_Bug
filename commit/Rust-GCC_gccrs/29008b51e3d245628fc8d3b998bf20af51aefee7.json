{"sha": "29008b51e3d245628fc8d3b998bf20af51aefee7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjkwMDhiNTFlM2QyNDU2MjhmYzhkM2I5OThiZjIwYWY1MWFlZmVlNw==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1992-05-20T00:41:48Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1992-05-20T00:41:48Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r1025", "tree": {"sha": "fad8df8ca658769658ac9759b72733f205cd89cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fad8df8ca658769658ac9759b72733f205cd89cf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/29008b51e3d245628fc8d3b998bf20af51aefee7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29008b51e3d245628fc8d3b998bf20af51aefee7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29008b51e3d245628fc8d3b998bf20af51aefee7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29008b51e3d245628fc8d3b998bf20af51aefee7/comments", "author": null, "committer": null, "parents": [{"sha": "cbc3885de26e5378b74d8f208f5f5e0da2247437", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbc3885de26e5378b74d8f208f5f5e0da2247437", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cbc3885de26e5378b74d8f208f5f5e0da2247437"}], "stats": {"total": 41, "additions": 32, "deletions": 9}, "files": [{"sha": "99eb8e95e01c4c1da521d442c53d3fcac1165c28", "filename": "gcc/calls.c", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29008b51e3d245628fc8d3b998bf20af51aefee7/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29008b51e3d245628fc8d3b998bf20af51aefee7/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=29008b51e3d245628fc8d3b998bf20af51aefee7", "patch": "@@ -1485,15 +1485,27 @@ expand_call (exp, target, ignore)\n   else if (structure_value_addr)\n     {\n       if (target == 0 || GET_CODE (target) != MEM)\n-\ttarget = gen_rtx (MEM, TYPE_MODE (TREE_TYPE (exp)),\n-\t\t\t  memory_address (TYPE_MODE (TREE_TYPE (exp)),\n-\t\t\t\t\t  structure_value_addr));\n+\t{\n+\t  target = gen_rtx (MEM, TYPE_MODE (TREE_TYPE (exp)),\n+\t\t\t    memory_address (TYPE_MODE (TREE_TYPE (exp)),\n+\t\t\t\t\t    structure_value_addr));\n+\t  MEM_IN_STRUCT_P (target)\n+\t    = (TREE_CODE (TREE_TYPE (exp)) == ARRAY_TYPE\n+\t       || TREE_CODE (TREE_TYPE (exp)) == RECORD_TYPE\n+\t       || TREE_CODE (TREE_TYPE (exp)) == UNION_TYPE);\n+\t}\n     }\n   else if (pcc_struct_value)\n     {\n       if (target == 0)\n-\ttarget = gen_rtx (MEM, TYPE_MODE (TREE_TYPE (exp)),\n-\t\t\t  copy_to_reg (valreg));\n+\t{\n+\t  target = gen_rtx (MEM, TYPE_MODE (TREE_TYPE (exp)),\n+\t\t\t    copy_to_reg (valreg));\n+\t  MEM_IN_STRUCT_P (target)\n+\t    = (TREE_CODE (TREE_TYPE (exp)) == ARRAY_TYPE\n+\t       || TREE_CODE (TREE_TYPE (exp)) == RECORD_TYPE\n+\t       || TREE_CODE (TREE_TYPE (exp)) == UNION_TYPE);\n+\t}\n       else if (TYPE_MODE (TREE_TYPE (exp)) != BLKmode)\n \temit_move_insn (target, gen_rtx (MEM, TYPE_MODE (TREE_TYPE (exp)),\n \t\t\t\t\t copy_to_reg (valreg)));"}, {"sha": "50341ed36b50041ce50504751ffe7b7cb62220d5", "filename": "gcc/config/i960/i960.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29008b51e3d245628fc8d3b998bf20af51aefee7/gcc%2Fconfig%2Fi960%2Fi960.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29008b51e3d245628fc8d3b998bf20af51aefee7/gcc%2Fconfig%2Fi960%2Fi960.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.c?ref=29008b51e3d245628fc8d3b998bf20af51aefee7", "patch": "@@ -1919,7 +1919,8 @@ i960_function_arg_advance (cum, mode, type, named)\n   i960_arg_size_and_align (mode, type, &size, &align);\n \n   if (named == 0 || size > 4 || cum->ca_nstackparms != 0\n-      || (size + ROUND (cum->ca_nregparms, align)) > NPARM_REGS)\n+      || (size + ROUND (cum->ca_nregparms, align)) > NPARM_REGS\n+      || MUST_PASS_IN_STACK (mode, type))\n     cum->ca_nstackparms = ROUND (cum->ca_nstackparms, align) + size;\n   else\n     cum->ca_nregparms = ROUND (cum->ca_nregparms, align) + size;\n@@ -1941,7 +1942,8 @@ i960_function_arg (cum, mode, type, named)\n   i960_arg_size_and_align (mode, type, &size, &align);\n \n   if (named == 0 || size > 4 || cum->ca_nstackparms != 0\n-      || (size + ROUND (cum->ca_nregparms, align)) > NPARM_REGS)\n+      || (size + ROUND (cum->ca_nregparms, align)) > NPARM_REGS\n+      || MUST_PASS_IN_STACK (mode, type))\n     {\n       cum->ca_nstackparms = ROUND (cum->ca_nstackparms, align);\n       ret = 0;"}, {"sha": "4d1bb424d456f82bf0ed3f0c9b3c8b9c14213d8d", "filename": "gcc/config/i960/i960.h", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29008b51e3d245628fc8d3b998bf20af51aefee7/gcc%2Fconfig%2Fi960%2Fi960.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29008b51e3d245628fc8d3b998bf20af51aefee7/gcc%2Fconfig%2Fi960%2Fi960.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.h?ref=29008b51e3d245628fc8d3b998bf20af51aefee7", "patch": "@@ -790,8 +790,13 @@ struct cum_args { int ca_nregparms; int ca_nstackparms; };\n /* Indicate the alignment boundary for an argument of the specified mode and\n    type.  */\n #define FUNCTION_ARG_BOUNDARY(MODE, TYPE)\t\t\t\t\\\n-  ((TYPE) && TYPE_ALIGN (TYPE) > PARM_BOUNDARY ? TYPE_ALIGN (TYPE)\t\\\n-   : PARM_BOUNDARY)\n+  (((TYPE) != 0)\t\t\t\t\t\t\t\\\n+   ? ((TYPE_ALIGN (TYPE) <= PARM_BOUNDARY)\t\t\t\t\\\n+      ? PARM_BOUNDARY\t\t\t\t\t\t\t\\\n+      : TYPE_ALIGN (TYPE))\t\t\t\t\t\t\\\n+   : ((GET_MODE_ALIGNMENT (MODE) <= PARM_BOUNDARY)\t\t\t\\\n+      ? PARM_BOUNDARY\t\t\t\t\t\t\t\\\n+      : GET_MODE_ALIGNMENT (MODE)))\n \n /* Determine where to put an argument to a function.\n    Value is zero to push the argument on the stack,"}, {"sha": "f5218e04d9636cab29d2ff6627e27ad899bbf64b", "filename": "gcc/function.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29008b51e3d245628fc8d3b998bf20af51aefee7/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29008b51e3d245628fc8d3b998bf20af51aefee7/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=29008b51e3d245628fc8d3b998bf20af51aefee7", "patch": "@@ -3031,7 +3031,11 @@ locate_and_pad_parm (passed_mode, type, in_regs, fndecl,\n      area reserved for registers, skip that area.  */\n   if (! in_regs)\n     {\n+#ifdef MAYBE_REG_PARM_STACK_SPACE\n+      reg_parm_stack_space = MAYBE_REG_PARM_STACK_SPACE;\n+#else\n       reg_parm_stack_space = REG_PARM_STACK_SPACE (fndecl);\n+#endif\n       if (reg_parm_stack_space > 0)\n \t{\n \t  if (initial_offset_ptr->var)"}]}