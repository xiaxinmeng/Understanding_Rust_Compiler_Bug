{"sha": "9d6a24bd514b4056553f49053d3c4b3862401207", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWQ2YTI0YmQ1MTRiNDA1NjU1M2Y0OTA1M2QzYzRiMzg2MjQwMTIwNw==", "commit": {"author": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2001-12-06T20:29:31Z"}, "committer": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2001-12-06T20:29:31Z"}, "message": "std_bitset.h: Use GLIBCPP in multiple-inclusion guard.\n\n2001-12-06  Phil Edwards  <pme@gcc.gnu.org>\n\n\t* include/bits/std_bitset.h:  Use GLIBCPP in multiple-inclusion guard.\n\t* include/bits/stl_algo.h:  Likewise.\n\t* include/bits/stl_algobase.h:  Likewise.\n\t* include/bits/stl_bvector.h:  Likewise.\n\t* include/bits/stl_deque.h:  Likewise.\n\t* include/bits/stl_function.h:  Likewise.\n\t* include/bits/stl_iterator.h:  Likewise.\n\t* include/bits/stl_iterator_base_funcs.h:  Likewise.\n\t* include/bits/stl_iterator_base_types.h:  Likewise.\n\t* include/bits/stl_list.h:  Likewise.\n\t* include/bits/stl_multimap.h:  Likewise.\n\t* include/bits/stl_multiset.h:  Likewise.\n\t* include/bits/stl_pair.h:  Likewise.\n\t* include/bits/stl_queue.h:  Likewise.\n\t* include/bits/stl_set.h:  Likewise.\n\t* include/bits/stl_stack.h:  Likewise.\n\t* include/bits/stl_tempbuf.h:  Likewise.\n\t* include/bits/stl_tree.h:  Likewise.\n\t* include/bits/stl_vector.h:  Likewise.\n\n\t* include/bits/stl_alloc.h:  Use our own multiple inclusion guards.\n\tDoxygenate more comments.  Correct historical artifacts in comments.\n\t(alloc, single_alloc):  Uglify non-standard names.\n\t(__default_alloc_template::_NFREELISTS):  Calculate from other\n\tparameters.\n\t(__default_alloc_template::_S_free_list):  Remove SunPro workaround.\n\t(__default_alloc_template::_Lock):  Mark as \"unused\".\n\t* include/backward/alloc.h:  Update.\n\t* include/bits/stl_bvector.h:  Likewise.\n\t* include/ext/ropeimpl.h:  Likewise.\n\t* include/ext/stl_hashtable.h:  Likewise.\n\nFrom-SVN: r47729", "tree": {"sha": "ad132ddb89985d54eccbe8585fd27363c73e2cfd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad132ddb89985d54eccbe8585fd27363c73e2cfd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9d6a24bd514b4056553f49053d3c4b3862401207", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d6a24bd514b4056553f49053d3c4b3862401207", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d6a24bd514b4056553f49053d3c4b3862401207", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d6a24bd514b4056553f49053d3c4b3862401207/comments", "author": null, "committer": null, "parents": [{"sha": "a5eb2838c349eb42dee871dd3b20771e2bde3361", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5eb2838c349eb42dee871dd3b20771e2bde3361", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5eb2838c349eb42dee871dd3b20771e2bde3361"}], "stats": {"total": 375, "additions": 219, "deletions": 156}, "files": [{"sha": "b5dfa19c71e3d932da19b907b4edebef63939cfb", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d6a24bd514b4056553f49053d3c4b3862401207/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d6a24bd514b4056553f49053d3c4b3862401207/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=9d6a24bd514b4056553f49053d3c4b3862401207", "patch": "@@ -1,3 +1,37 @@\n+2001-12-06  Phil Edwards  <pme@gcc.gnu.org>\n+\n+\t* include/bits/std_bitset.h:  Use GLIBCPP in multiple-inclusion guard.\n+\t* include/bits/stl_algo.h:  Likewise.\n+\t* include/bits/stl_algobase.h:  Likewise.\n+\t* include/bits/stl_bvector.h:  Likewise.\n+\t* include/bits/stl_deque.h:  Likewise.\n+\t* include/bits/stl_function.h:  Likewise.\n+\t* include/bits/stl_iterator.h:  Likewise.\n+\t* include/bits/stl_iterator_base_funcs.h:  Likewise.\n+\t* include/bits/stl_iterator_base_types.h:  Likewise.\n+\t* include/bits/stl_list.h:  Likewise.\n+\t* include/bits/stl_multimap.h:  Likewise.\n+\t* include/bits/stl_multiset.h:  Likewise.\n+\t* include/bits/stl_pair.h:  Likewise.\n+\t* include/bits/stl_queue.h:  Likewise.\n+\t* include/bits/stl_set.h:  Likewise.\n+\t* include/bits/stl_stack.h:  Likewise.\n+\t* include/bits/stl_tempbuf.h:  Likewise.\n+\t* include/bits/stl_tree.h:  Likewise.\n+\t* include/bits/stl_vector.h:  Likewise.\n+\n+\t* include/bits/stl_alloc.h:  Use our own multiple inclusion guards.\n+\tDoxygenate more comments.  Correct historical artifacts in comments.\n+\t(alloc, single_alloc):  Uglify non-standard names.\n+\t(__default_alloc_template::_NFREELISTS):  Calculate from other\n+\tparameters.\n+\t(__default_alloc_template::_S_free_list):  Remove SunPro workaround.\n+\t(__default_alloc_template::_Lock):  Mark as \"unused\".\n+\t* include/backward/alloc.h:  Update.\n+\t* include/bits/stl_bvector.h:  Likewise.\n+\t* include/ext/ropeimpl.h:  Likewise.\n+\t* include/ext/stl_hashtable.h:  Likewise.\n+\n 2001-12-05  Benjamin Kosnik  <bkoz@redhat.com>\n \n \tDR/282"}, {"sha": "4344a1d902c9a6ac7ea5e28686374c282c34158d", "filename": "libstdc++-v3/include/backward/alloc.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d6a24bd514b4056553f49053d3c4b3862401207/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Falloc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d6a24bd514b4056553f49053d3c4b3862401207/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Falloc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Falloc.h?ref=9d6a24bd514b4056553f49053d3c4b3862401207", "patch": "@@ -50,8 +50,8 @@\n using std::__malloc_alloc_template; \n using std::__simple_alloc; \n using std::__debug_alloc; \n-using std::alloc; \n-using std::single_client_alloc; \n+using std::__alloc; \n+using std::__single_client_alloc; \n using std::allocator;\n #ifdef __USE_MALLOC\n using std::malloc_alloc; "}, {"sha": "67647ced72c6a380aa5291bb6a03e4bc2fd17a9f", "filename": "libstdc++-v3/include/bits/std_bitset.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d6a24bd514b4056553f49053d3c4b3862401207/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_bitset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d6a24bd514b4056553f49053d3c4b3862401207/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_bitset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_bitset.h?ref=9d6a24bd514b4056553f49053d3c4b3862401207", "patch": "@@ -45,8 +45,8 @@\n  *  You should not attempt to use it directly.\n  */\n \n-#ifndef __SGI_STL_BITSET\n-#define __SGI_STL_BITSET\n+#ifndef __GLIBCPP_BITSET\n+#define __GLIBCPP_BITSET\n \n #pragma GCC system_header\n \n@@ -805,7 +805,7 @@ operator<<(basic_ostream<_CharT, _Traits>& __os, const bitset<_Nb>& __x)\n \n #undef __BITSET_WORDS\n \n-#endif /* __SGI_STL_BITSET */\n+#endif /* __GLIBCPP_BITSET */\n \n \n // Local Variables:"}, {"sha": "1afadfa3fe8a4f2a47f26ba5969b39adb38e1bcb", "filename": "libstdc++-v3/include/bits/stl_algo.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d6a24bd514b4056553f49053d3c4b3862401207/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d6a24bd514b4056553f49053d3c4b3862401207/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h?ref=9d6a24bd514b4056553f49053d3c4b3862401207", "patch": "@@ -58,8 +58,8 @@\n  *  You should not attempt to use it directly.\n  */\n \n-#ifndef __SGI_STL_INTERNAL_ALGO_H\n-#define __SGI_STL_INTERNAL_ALGO_H\n+#ifndef __GLIBCPP_INTERNAL_ALGO_H\n+#define __GLIBCPP_INTERNAL_ALGO_H\n \n #include <bits/stl_heap.h>\n \n@@ -3601,7 +3601,7 @@ __result, __binary_pred, _IterType());\n \n } // namespace std\n \n-#endif /* __SGI_STL_INTERNAL_ALGO_H */\n+#endif /* __GLIBCPP_INTERNAL_ALGO_H */\n \n // Local Variables:\n // mode:C++"}, {"sha": "b75a80835d3e82d4fda2585fce8fbe8c047f6c2a", "filename": "libstdc++-v3/include/bits/stl_algobase.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d6a24bd514b4056553f49053d3c4b3862401207/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d6a24bd514b4056553f49053d3c4b3862401207/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h?ref=9d6a24bd514b4056553f49053d3c4b3862401207", "patch": "@@ -58,8 +58,8 @@\n  *  You should not attempt to use it directly.\n  */\n \n-#ifndef __SGI_STL_INTERNAL_ALGOBASE_H\n-#define __SGI_STL_INTERNAL_ALGOBASE_H\n+#ifndef __GLIBCPP_INTERNAL_ALGOBASE_H\n+#define __GLIBCPP_INTERNAL_ALGOBASE_H\n \n #include <bits/c++config.h>\n #include <bits/stl_pair.h>\n@@ -950,7 +950,7 @@ namespace std\n \n } // namespace std\n \n-#endif /* __SGI_STL_INTERNAL_ALGOBASE_H */\n+#endif /* __GLIBCPP_INTERNAL_ALGOBASE_H */\n \n // Local Variables:\n // mode:C++"}, {"sha": "b1dc11e8af0c581cef1a4e1077bfdb4e5b824824", "filename": "libstdc++-v3/include/bits/stl_alloc.h", "status": "modified", "additions": 122, "deletions": 93, "changes": 215, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d6a24bd514b4056553f49053d3c4b3862401207/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_alloc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d6a24bd514b4056553f49053d3c4b3862401207/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_alloc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_alloc.h?ref=9d6a24bd514b4056553f49053d3c4b3862401207", "patch": "@@ -45,27 +45,36 @@\n  *  You should not attempt to use it directly.\n  */\n \n-#ifndef __SGI_STL_INTERNAL_ALLOC_H\n-#define __SGI_STL_INTERNAL_ALLOC_H\n-\n-// This header implements some node allocators.  These are NOT the same as\n-// allocators in the C++ standard, nor in the original HP STL.  They do not\n-// encapsulate different pointer types; we assume that there is only one\n-// pointer type.  The C++ standard allocators are intended to allocate\n-// individual objects, not pools or arenas.\n-//\n-// In this file allocators are of two different styles:  \"standard\" and\n-// \"SGI\" (quotes included).  \"Standard\" allocators conform to 20.4.  \"SGI\"\n-// allocators differ in AT LEAST the following ways (add to this list as you\n-// discover them):\n-//\n-//  - \"Standard\" allocate() takes two parameters (n_count,hint=0) but \"SGI\"\n-//    allocate() takes one paramter (n_size).\n-//  - Likewise, \"standard\" deallocate()'s n is a count, but in \"SGI\" is a\n-//    byte size.\n-//  - max_size(), construct(), and destroy() are missing in \"SGI\" allocators.\n-//  - reallocate(p,oldsz,newsz) is added in \"SGI\", and behaves as\n-//    if p=realloc(p,newsz).\n+#ifndef __GLIBCPP_INTERNAL_ALLOC_H\n+#define __GLIBCPP_INTERNAL_ALLOC_H\n+\n+/**\n+ *  @maint\n+ *  @addtogroup Allocators\n+ *  stl_alloc.h implements some node allocators.  These are NOT the same as\n+ *  allocators in the C++ standard, nor in the original H-P STL.  They do not\n+ *  encapsulate different pointer types; we assume that there is only one\n+ *  pointer type.  The C++ standard allocators are intended to allocate\n+ *  individual objects, not pools or arenas.\n+ *\n+ *  In this file allocators are of two different styles:  \"standard\" and\n+ *  \"SGI\" (quotes included).  \"Standard\" allocators conform to 20.4.  \"SGI\"\n+ *  allocators differ in AT LEAST the following ways (add to this list as you\n+ *  discover them):\n+ *\n+ *   - \"Standard\" allocate() takes two parameters (n_count,hint=0) but \"SGI\"\n+ *     allocate() takes one paramter (n_size).\n+ *   - Likewise, \"standard\" deallocate()'s argument is a count, but in \"SGI\"\n+ *     is a byte size.\n+ *   - max_size(), construct(), and destroy() are missing in \"SGI\" allocators.\n+ *   - reallocate(p,oldsz,newsz) is added in \"SGI\", and behaves as\n+ *     if p=realloc(p,newsz).\n+ *\n+ *  \"SGI\" allocators may be wrapped in __allocator to convert the interface\n+ *  into a \"standard\" one.\n+ *\n+ *  @endmaint\n+*/\n \n \n #include <bits/functexcept.h>   // for __throw_bad_alloc\n@@ -82,6 +91,7 @@ namespace std\n    *  A new-based allocator, as required by the standard.  Allocation and\n    *  deallocation forward to global new and delete.  \"SGI\" style, minus\n    *  reallocate().\n+   *  (See @link Allocators allocators info @endlink for more.)\n    *  @endmaint\n   */\n   class __new_alloc \n@@ -104,6 +114,7 @@ namespace std\n    *  storage efficient.  The template argument is unused and is only present\n    *  to permit multiple instantiations (but see __default_alloc_template\n    *  for caveats).  \"SGI\" style, plus __set_malloc_handler for OOM conditions.\n+   *  (See @link Allocators allocators info @endlink for more.)\n    *  @endmaint\n   */\n   template <int __inst>\n@@ -195,11 +206,14 @@ namespace std\n \n \n   /**\n+   *  @maint\n    *  This is used primarily (only?) in _Alloc_traits and other places to\n    *  help provide the _Alloc_type typedef.\n    *\n    *  This is neither \"standard\"-conforming nor \"SGI\".  The _Alloc parameter\n    *  must be \"SGI\" style.\n+   *  (See @link Allocators allocators info @endlink for more.)\n+   *  @endmaint\n   */\n   template<class _Tp, class _Alloc>\n   class __simple_alloc\n@@ -220,6 +234,7 @@ namespace std\n \n \n   /**\n+   *  @maint\n    *  An adaptor for an underlying allocator (_Alloc) to check the size\n    *  arguments for debugging.  Errors are reported using assert; these\n    *  checks can be disabled via NDEBUG, but the space penalty is still\n@@ -229,6 +244,8 @@ namespace std\n    *  \"There is some evidence that this can confuse Purify.\" - SGI comment\n    *\n    *  This adaptor is \"SGI\" style.  The _Alloc parameter must also be \"SGI\".\n+   *  (See @link Allocators allocators info @endlink for more.)\n+   *  @endmaint\n   */\n   template <class _Alloc>\n   class __debug_alloc\n@@ -268,19 +285,21 @@ namespace std\n \n #ifdef __USE_MALLOC\n \n-typedef __mem_interface alloc;\n-typedef __mem_interface single_client_alloc;\n+typedef __mem_interface __alloc;\n+typedef __mem_interface __single_client_alloc;\n \n #else\n \n \n /**\n  *  @maint\n- *  Default node allocator.\n+ *  Default node allocator.  \"SGI\" style.  Uses __mem_interface for its\n+ *  underlying requests (and makes as few requests as possible).\n+ *  **** Currently __mem_interface is always __new_alloc, never __malloc*.\n  * \n  *  Important implementation properties:\n  *  1. If the clients request an object of size > _MAX_BYTES, the resulting\n- *     object will be obtained directly from malloc.\n+ *     object will be obtained directly from the underlying __mem_interface.\n  *  2. In all other cases, we allocate an object of size exactly\n  *     _S_round_up(requested_size).  Thus the client has enough size\n  *     information that we can return the object to the proper free list\n@@ -297,6 +316,8 @@ typedef __mem_interface single_client_alloc;\n  *  allocator instances have different types, limiting the utility of this\n  *  approach.  If you do not wish to share the free lists with the main\n  *  default_alloc instance, instantiate this with a non-zero __inst.\n+ *\n+ *  (See @link Allocators allocators info @endlink for more.)\n  *  @endmaint\n */\n template <bool __threads, int __inst>\n@@ -306,7 +327,7 @@ class __default_alloc_template\n private:\n   enum {_ALIGN = 8};\n   enum {_MAX_BYTES = 128};\n-  enum {_NFREELISTS = 16}; // _MAX_BYTES/_ALIGN\n+  enum {_NFREELISTS = _MAX_BYTES / _ALIGN};\n \n   static size_t\n   _S_round_up(size_t __bytes) \n@@ -334,16 +355,14 @@ class __default_alloc_template\n \n   static _STL_mutex_lock _S_node_allocator_lock;\n \n-  // It would be nice to use _STL_auto_lock here.  But we\n-  // don't need the NULL check.  And we do need a test whether\n-  // threads have actually been started.\n-  class _Lock;\n-  friend class _Lock;\n+  // It would be nice to use _STL_auto_lock here.  But we need a test whether\n+  // threads are in use.\n   class _Lock {\n     public:\n       _Lock() { if (__threads) _S_node_allocator_lock._M_acquire_lock(); }\n       ~_Lock() { if (__threads) _S_node_allocator_lock._M_release_lock(); }\n-  };\n+  } __attribute__ ((__unused__));\n+  friend class _Lock;\n \n public:\n \n@@ -357,9 +376,8 @@ class __default_alloc_template\n     else \n       {\n \t_Obj* volatile* __my_free_list = _S_free_list + _S_freelist_index(__n);\n-\t// Acquire the lock here with a constructor call.\n-\t// This ensures that it is released in exit or during stack\n-\t// unwinding.\n+\t// Acquire the lock here with a constructor call.  This ensures that\n+\t// it is released in exit or during stack unwinding.\n \t_Lock __lock_instance;\n \t_Obj* __restrict__ __result = *__my_free_list;\n \tif (__result == 0)\n@@ -385,11 +403,11 @@ class __default_alloc_template\n           = _S_free_list + _S_freelist_index(__n);\n \t_Obj* __q = (_Obj*)__p;\n \t\n-\t// acquire lock\n+\t// Acquire the lock here with a constructor call.  This ensures that\n+\t// it is released in exit or during stack unwinding.\n \t_Lock __lock_instance;\n \t__q -> _M_free_list_link = *__my_free_list;\n \t*__my_free_list = __q;\n-\t// lock is released here\n       }\n   }\n   \n@@ -477,9 +495,8 @@ __default_alloc_template<__threads, __inst>::_S_chunk_alloc(size_t __size,\n \t      }\n \t    _S_end_free = 0;\t// In case of exception.\n             _S_start_free = (char*)__mem_interface::allocate(__bytes_to_get);\n-            // This should either throw an\n-            // exception or remedy the situation.  Thus we assume it\n-            // succeeded.\n+            // This should either throw an exception or remedy the situation.\n+            // Thus we assume it succeeded.\n \t  }\n         _S_heap_size += __bytes_to_get;\n         _S_end_free = _S_start_free + __bytes_to_get;\n@@ -543,9 +560,9 @@ __default_alloc_template<threads, inst>::reallocate(void* __p,\n }\n \n template <bool __threads, int __inst>\n-_STL_mutex_lock\n-__default_alloc_template<__threads, __inst>::_S_node_allocator_lock\n-  __STL_MUTEX_INITIALIZER;\n+  _STL_mutex_lock\n+  __default_alloc_template<__threads, __inst>::_S_node_allocator_lock\n+    __STL_MUTEX_INITIALIZER;\n \n template <bool __threads, int __inst>\n char* __default_alloc_template<__threads, __inst>::_S_start_free = 0;\n@@ -559,12 +576,11 @@ size_t __default_alloc_template<__threads, __inst>::_S_heap_size = 0;\n template <bool __threads, int __inst>\n typename __default_alloc_template<__threads, __inst>::_Obj* volatile\n __default_alloc_template<__threads, __inst> ::_S_free_list[\n-    __default_alloc_template<__threads, __inst>::_NFREELISTS\n-] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n+    __default_alloc_template<__threads, __inst>::_NFREELISTS ];\n \n \n-typedef __default_alloc_template<true, 0> alloc;\n-typedef __default_alloc_template<false, 0> single_client_alloc;\n+typedef __default_alloc_template<true, 0>    __alloc;\n+typedef __default_alloc_template<false, 0>   __single_client_alloc;\n \n \n #endif /* ! __USE_MALLOC */\n@@ -580,15 +596,16 @@ typedef __default_alloc_template<false, 0> single_client_alloc;\n  *    - __malloc_alloc_template is used for memory requests\n  *  - else (the default)\n  *    - __default_alloc_template is used via two typedefs\n- *    - \"single_client_alloc\" typedef does no locking for threads\n- *    - \"alloc\" typedef is threadsafe via the locks\n+ *    - \"__single_client_alloc\" typedef does no locking for threads\n+ *    - \"__alloc\" typedef is threadsafe via the locks\n  *    - __new_alloc is used for memory requests\n  *\n+ *  (See @link Allocators allocators info @endlink for more.)\n */\n template <class _Tp>\n class allocator\n {\n-  typedef alloc _Alloc;          // The underlying allocator.\n+  typedef __alloc _Alloc;          // The underlying allocator.\n public:\n   typedef size_t     size_type;\n   typedef ptrdiff_t  difference_type;\n@@ -657,12 +674,13 @@ inline bool operator!=(const allocator<_T1>&, const allocator<_T2>&)\n \n \n /**\n- *  Allocator adaptor to turn an \"SGI\" style allocator (e.g. alloc,\n- *  __malloc_alloc_template) into a \"standard\" conformaing allocator.  Note\n+ *  Allocator adaptor to turn an \"SGI\" style allocator (e.g., __alloc,\n+ *  __malloc_alloc_template) into a \"standard\" conforming allocator.  Note\n  *  that this adaptor does *not* assume that all objects of the underlying\n  *  alloc class are identical, nor does it assume that all of the underlying\n  *  alloc's member functions are static member functions.  Note, also, that\n- *  __allocator<_Tp, alloc> is essentially the same thing as allocator<_Tp>.\n+ *  __allocator<_Tp, __alloc> is essentially the same thing as allocator<_Tp>.\n+ *  (See @link Allocators allocators info @endlink for more.)\n */\n template <class _Tp, class _Alloc>\n struct __allocator\n@@ -738,10 +756,11 @@ inline bool operator!=(const __allocator<_Tp, _Alloc>& __a1,\n }\n \n \n-// Comparison operators for all of the predifined SGI-style allocators.\n-// This ensures that __allocator<malloc_alloc> (for example) will\n-// work correctly.\n-\n+//@{\n+/** Comparison operators for all of the predifined SGI-style allocators.\n+ *  This ensures that __allocator<malloc_alloc> (for example) will work\n+ *  correctly.  As required, all allocators compare equal.\n+*/\n template <int inst>\n inline bool operator==(const __malloc_alloc_template<inst>&,\n                        const __malloc_alloc_template<inst>&)\n@@ -767,36 +786,46 @@ inline bool operator!=(const __debug_alloc<_Alloc>&,\n                        const __debug_alloc<_Alloc>&) {\n   return false;\n }\n+//@}\n \n \n-// Another allocator adaptor: _Alloc_traits.  This serves two\n-// purposes.  First, make it possible to write containers that can use\n-// either SGI-style allocators or standard-conforming allocator.\n-// Second, provide a mechanism so that containers can query whether or\n-// not the allocator has distinct instances.  If not, the container\n-// can avoid wasting a word of memory to store an empty object.\n-\n-// This adaptor uses partial specialization.  The general case of\n-// _Alloc_traits<_Tp, _Alloc> assumes that _Alloc is a\n-// standard-conforming allocator, possibly with non-equal instances\n-// and non-static members.  (It still behaves correctly even if _Alloc\n-// has static member and if all instances are equal.  Refinements\n-// affect performance, not correctness.)\n-\n-// There are always two members: allocator_type, which is a standard-\n-// conforming allocator type for allocating objects of type _Tp, and\n-// _S_instanceless, a static const member of type bool.  If\n-// _S_instanceless is true, this means that there is no difference\n-// between any two instances of type allocator_type.  Furthermore, if\n-// _S_instanceless is true, then _Alloc_traits has one additional\n-// member: _Alloc_type.  This type encapsulates allocation and\n-// deallocation of objects of type _Tp through a static interface; it\n-// has two member functions, whose signatures are\n-//    static _Tp* allocate(size_t)\n-//    static void deallocate(_Tp*, size_t)\n-\n+/**\n+ *  @maint\n+ *  Another allocator adaptor:  _Alloc_traits.  This serves two purposes.\n+ *  First, make it possible to write containers that can use either \"SGI\"\n+ *  style allocators or \"standard\" allocators.  Second, provide a mechanism\n+ *  so that containers can query whether or not the allocator has distinct\n+ *  instances.  If not, the container can avoid wasting a word of memory to\n+ *  store an empty object.  For examples of use, see stl_vector.h, etc, or\n+ *  any of the other classes derived from this one.\n+ *\n+ *  This adaptor uses partial specialization.  The general case of\n+ *  _Alloc_traits<_Tp, _Alloc> assumes that _Alloc is a\n+ *  standard-conforming allocator, possibly with non-equal instances and\n+ *  non-static members.  (It still behaves correctly even if _Alloc has\n+ *  static member and if all instances are equal.  Refinements affect\n+ *  performance, not correctness.)\n+ *\n+ *  There are always two members:  allocator_type, which is a standard-\n+ *  conforming allocator type for allocating objects of type _Tp, and\n+ *  _S_instanceless, a static const member of type bool.  If\n+ *  _S_instanceless is true, this means that there is no difference\n+ *  between any two instances of type allocator_type.  Furthermore, if\n+ *  _S_instanceless is true, then _Alloc_traits has one additional\n+ *  member:  _Alloc_type.  This type encapsulates allocation and\n+ *  deallocation of objects of type _Tp through a static interface; it\n+ *  has two member functions, whose signatures are\n+ *\n+ *  -  static _Tp* allocate(size_t)\n+ *  -  static void deallocate(_Tp*, size_t)\n+ *\n+ *  The size_t parameters are \"standard\" style (see top of stl_alloc.h) in\n+ *  that they take counts, not sizes.\n+ *\n+ *  (See @link Allocators allocators info @endlink for more.)\n+ *  @endmaint\n+*/\n // The fully general version.\n-\n template <class _Tp, class _Allocator>\n struct _Alloc_traits\n {\n@@ -807,18 +836,17 @@ struct _Alloc_traits\n template <class _Tp, class _Allocator>\n const bool _Alloc_traits<_Tp, _Allocator>::_S_instanceless;\n \n-// The version for the default allocator.\n-\n+/// The version for the default allocator.\n template <class _Tp, class _Tp1>\n struct _Alloc_traits<_Tp, allocator<_Tp1> >\n {\n   static const bool _S_instanceless = true;\n-  typedef __simple_alloc<_Tp, alloc> _Alloc_type;\n+  typedef __simple_alloc<_Tp, __alloc> _Alloc_type;\n   typedef allocator<_Tp> allocator_type;\n };\n \n-// Versions for the predefined SGI-style allocators.\n-\n+//@{\n+/// Versions for the predefined \"SGI\" style allocators.\n template <class _Tp, int __inst>\n struct _Alloc_traits<_Tp, __malloc_alloc_template<__inst> >\n {\n@@ -846,10 +874,10 @@ struct _Alloc_traits<_Tp, __debug_alloc<_Alloc> >\n   typedef __simple_alloc<_Tp, __debug_alloc<_Alloc> > _Alloc_type;\n   typedef __allocator<_Tp, __debug_alloc<_Alloc> > allocator_type;\n };\n+//@}\n \n-// Versions for the __allocator adaptor used with the predefined\n-// SGI-style allocators.\n-\n+//@{\n+/// Versions for the __allocator adaptor used with the predefined \"SGI\" style allocators.\n template <class _Tp, class _Tp1, int __inst>\n struct _Alloc_traits<_Tp, \n                      __allocator<_Tp1, __malloc_alloc_template<__inst> > >\n@@ -880,10 +908,11 @@ struct _Alloc_traits<_Tp, __allocator<_Tp1, __debug_alloc<_Alloc> > >\n   typedef __simple_alloc<_Tp, __debug_alloc<_Alloc> > _Alloc_type;\n   typedef __allocator<_Tp, __debug_alloc<_Alloc> > allocator_type;\n };\n+//@}\n \n } // namespace std\n \n-#endif /* __SGI_STL_INTERNAL_ALLOC_H */\n+#endif /* __GLIBCPP_INTERNAL_ALLOC_H */\n \n // Local Variables:\n // mode:C++"}, {"sha": "605831fdf97d881577c40f9e7bc634caed0ac519", "filename": "libstdc++-v3/include/bits/stl_bvector.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d6a24bd514b4056553f49053d3c4b3862401207/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d6a24bd514b4056553f49053d3c4b3862401207/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h?ref=9d6a24bd514b4056553f49053d3c4b3862401207", "patch": "@@ -58,8 +58,8 @@\n  *  You should not attempt to use it directly.\n  */\n \n-#ifndef __SGI_STL_INTERNAL_BVECTOR_H\n-#define __SGI_STL_INTERNAL_BVECTOR_H\n+#ifndef __GLIBCPP_INTERNAL_BVECTOR_H\n+#define __GLIBCPP_INTERNAL_BVECTOR_H\n \n namespace std\n { \n@@ -717,11 +717,11 @@ template <typename _Alloc>\n   };\n \n // This typedef is non-standard.  It is provided for backward compatibility.\n-typedef vector<bool, alloc> bit_vector;\n+typedef vector<bool, __alloc> bit_vector;\n \n } // namespace std \n \n-#endif /* __SGI_STL_INTERNAL_BVECTOR_H */\n+#endif /* __GLIBCPP_INTERNAL_BVECTOR_H */\n \n // Local Variables:\n // mode:C++"}, {"sha": "6b0bae3f630d34f6a7bf8568f58cc8c0051d36b2", "filename": "libstdc++-v3/include/bits/stl_deque.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d6a24bd514b4056553f49053d3c4b3862401207/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d6a24bd514b4056553f49053d3c4b3862401207/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h?ref=9d6a24bd514b4056553f49053d3c4b3862401207", "patch": "@@ -62,8 +62,8 @@\n #include <bits/stl_iterator_base_types.h>\n #include <bits/stl_iterator_base_funcs.h>\n \n-#ifndef __SGI_STL_INTERNAL_DEQUE_H\n-#define __SGI_STL_INTERNAL_DEQUE_H\n+#ifndef __GLIBCPP_INTERNAL_DEQUE_H\n+#define __GLIBCPP_INTERNAL_DEQUE_H\n \n /* Class invariants:\n  *  For any nonsingular iterator i:\n@@ -1447,7 +1447,7 @@ inline void swap(deque<_Tp,_Alloc>& __x, deque<_Tp,_Alloc>& __y) {\n \n } // namespace std \n   \n-#endif /* __SGI_STL_INTERNAL_DEQUE_H */\n+#endif /* __GLIBCPP_INTERNAL_DEQUE_H */\n \n // Local Variables:\n // mode:C++"}, {"sha": "d2a536856301ca165866d3737b2bdc19d795ab9c", "filename": "libstdc++-v3/include/bits/stl_function.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d6a24bd514b4056553f49053d3c4b3862401207/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_function.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d6a24bd514b4056553f49053d3c4b3862401207/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_function.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_function.h?ref=9d6a24bd514b4056553f49053d3c4b3862401207", "patch": "@@ -58,8 +58,8 @@\n  *  You should not attempt to use it directly.\n  */\n \n-#ifndef __SGI_STL_INTERNAL_FUNCTION_H\n-#define __SGI_STL_INTERNAL_FUNCTION_H\n+#ifndef __GLIBCPP_INTERNAL_FUNCTION_H\n+#define __GLIBCPP_INTERNAL_FUNCTION_H\n \n namespace std\n {\n@@ -1046,7 +1046,7 @@ mem_fun1_ref(_Ret (_Tp::*__f)(_Arg) const)\n \n } // namespace std\n \n-#endif /* __SGI_STL_INTERNAL_FUNCTION_H */\n+#endif /* __GLIBCPP_INTERNAL_FUNCTION_H */\n \n // Local Variables:\n // mode:C++"}, {"sha": "ae7aafadca38a23211a95b078aa0ee760cf987d1", "filename": "libstdc++-v3/include/bits/stl_iterator.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d6a24bd514b4056553f49053d3c4b3862401207/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d6a24bd514b4056553f49053d3c4b3862401207/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h?ref=9d6a24bd514b4056553f49053d3c4b3862401207", "patch": "@@ -58,8 +58,8 @@\n  *  You should not attempt to use it directly.\n  */\n \n-#ifndef __SGI_STL_INTERNAL_ITERATOR_H\n-#define __SGI_STL_INTERNAL_ITERATOR_H\n+#ifndef __GLIBCPP_INTERNAL_ITERATOR_H\n+#define __GLIBCPP_INTERNAL_ITERATOR_H\n \n namespace std\n {"}, {"sha": "8f84977f118df0bcfb4bf9d6060b75e351bed54c", "filename": "libstdc++-v3/include/bits/stl_iterator_base_funcs.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d6a24bd514b4056553f49053d3c4b3862401207/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_funcs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d6a24bd514b4056553f49053d3c4b3862401207/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_funcs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_funcs.h?ref=9d6a24bd514b4056553f49053d3c4b3862401207", "patch": "@@ -58,8 +58,8 @@\n  *  You should not attempt to use it directly.\n  */\n \n-#ifndef __SGI_STL_INTERNAL_ITERATOR_BASE_FUNCS_H\n-#define __SGI_STL_INTERNAL_ITERATOR_BASE_FUNCS_H\n+#ifndef __GLIBCPP_INTERNAL_ITERATOR_BASE_FUNCS_H\n+#define __GLIBCPP_INTERNAL_ITERATOR_BASE_FUNCS_H\n \n // This file contains all of the general iterator-related utility\n // functions, such as distance() and advance().\n@@ -176,7 +176,7 @@ namespace std\n \n } // namespace std\n \n-#endif /* __SGI_STL_INTERNAL_ITERATOR_BASE_FUNCS_H */\n+#endif /* __GLIBCPP_INTERNAL_ITERATOR_BASE_FUNCS_H */\n \n \n // Local Variables:"}, {"sha": "28f79c27a9002a25517f9e0c36b3a0e6272209c0", "filename": "libstdc++-v3/include/bits/stl_iterator_base_types.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d6a24bd514b4056553f49053d3c4b3862401207/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d6a24bd514b4056553f49053d3c4b3862401207/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_types.h?ref=9d6a24bd514b4056553f49053d3c4b3862401207", "patch": "@@ -58,8 +58,8 @@\n  *  You should not attempt to use it directly.\n  */\n \n-#ifndef __SGI_STL_INTERNAL_ITERATOR_BASE_TYPES_H\n-#define __SGI_STL_INTERNAL_ITERATOR_BASE_TYPES_H\n+#ifndef __GLIBCPP_INTERNAL_ITERATOR_BASE_TYPES_H\n+#define __GLIBCPP_INTERNAL_ITERATOR_BASE_TYPES_H\n \n // This file contains all of the general iterator-related utility\n // types, such as iterator_traits and struct iterator.\n@@ -173,7 +173,7 @@ namespace std\n \n } // namespace std\n \n-#endif /* __SGI_STL_INTERNAL_ITERATOR_BASE_TYPES_H */\n+#endif /* __GLIBCPP_INTERNAL_ITERATOR_BASE_TYPES_H */\n \n \n // Local Variables:"}, {"sha": "992057913874c2b98eedd4dd343c22bad4a00d15", "filename": "libstdc++-v3/include/bits/stl_list.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d6a24bd514b4056553f49053d3c4b3862401207/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d6a24bd514b4056553f49053d3c4b3862401207/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h?ref=9d6a24bd514b4056553f49053d3c4b3862401207", "patch": "@@ -58,8 +58,8 @@\n  *  You should not attempt to use it directly.\n  */\n \n-#ifndef __SGI_STL_INTERNAL_LIST_H\n-#define __SGI_STL_INTERNAL_LIST_H\n+#ifndef __GLIBCPP_INTERNAL_LIST_H\n+#define __GLIBCPP_INTERNAL_LIST_H\n \n #include <bits/concept_check.h>\n \n@@ -969,7 +969,7 @@ namespace std\n \n } // namespace std \n \n-#endif /* __SGI_STL_INTERNAL_LIST_H */\n+#endif /* __GLIBCPP_INTERNAL_LIST_H */\n \n // vi:set ts=2 sw=2:\n // Local Variables:"}, {"sha": "27b4d12faf0850c77e390a5261ef6f59a08b3e60", "filename": "libstdc++-v3/include/bits/stl_multimap.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d6a24bd514b4056553f49053d3c4b3862401207/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d6a24bd514b4056553f49053d3c4b3862401207/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h?ref=9d6a24bd514b4056553f49053d3c4b3862401207", "patch": "@@ -58,8 +58,8 @@\n  *  You should not attempt to use it directly.\n  */\n \n-#ifndef __SGI_STL_INTERNAL_MULTIMAP_H\n-#define __SGI_STL_INTERNAL_MULTIMAP_H\n+#ifndef __GLIBCPP_INTERNAL_MULTIMAP_H\n+#define __GLIBCPP_INTERNAL_MULTIMAP_H\n \n #include <bits/concept_check.h>\n \n@@ -258,7 +258,7 @@ inline void swap(multimap<_Key,_Tp,_Compare,_Alloc>& __x,\n \n } // namespace std\n \n-#endif /* __SGI_STL_INTERNAL_MULTIMAP_H */\n+#endif /* __GLIBCPP_INTERNAL_MULTIMAP_H */\n \n // Local Variables:\n // mode:C++"}, {"sha": "2bfc8f10c32b47c1cb82896336af5b67b90f6221", "filename": "libstdc++-v3/include/bits/stl_multiset.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d6a24bd514b4056553f49053d3c4b3862401207/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d6a24bd514b4056553f49053d3c4b3862401207/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h?ref=9d6a24bd514b4056553f49053d3c4b3862401207", "patch": "@@ -58,8 +58,8 @@\n  *  You should not attempt to use it directly.\n  */\n \n-#ifndef __SGI_STL_INTERNAL_MULTISET_H\n-#define __SGI_STL_INTERNAL_MULTISET_H\n+#ifndef __GLIBCPP_INTERNAL_MULTISET_H\n+#define __GLIBCPP_INTERNAL_MULTISET_H\n \n #include <bits/concept_check.h>\n \n@@ -270,7 +270,7 @@ inline void swap(multiset<_Key,_Compare,_Alloc>& __x,\n \n } // namespace std\n \n-#endif /* __SGI_STL_INTERNAL_MULTISET_H */\n+#endif /* __GLIBCPP_INTERNAL_MULTISET_H */\n \n // Local Variables:\n // mode:C++"}, {"sha": "d689ccc8d27d63af737739f864b37c095f95ef57", "filename": "libstdc++-v3/include/bits/stl_pair.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d6a24bd514b4056553f49053d3c4b3862401207/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d6a24bd514b4056553f49053d3c4b3862401207/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h?ref=9d6a24bd514b4056553f49053d3c4b3862401207", "patch": "@@ -58,8 +58,8 @@\n  *  You should not attempt to use it directly.\n  */\n \n-#ifndef __SGI_STL_INTERNAL_PAIR_H\n-#define __SGI_STL_INTERNAL_PAIR_H\n+#ifndef __GLIBCPP_INTERNAL_PAIR_H\n+#define __GLIBCPP_INTERNAL_PAIR_H\n \n namespace std\n {\n@@ -150,7 +150,7 @@ inline pair<_T1, _T2> make_pair(const _T1& __x, const _T2& __y)\n \n } // namespace std\n \n-#endif /* __SGI_STL_INTERNAL_PAIR_H */\n+#endif /* __GLIBCPP_INTERNAL_PAIR_H */\n \n // Local Variables:\n // mode:C++"}, {"sha": "5503640187aca1ba2c6b898c50379a4398896fd4", "filename": "libstdc++-v3/include/bits/stl_queue.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d6a24bd514b4056553f49053d3c4b3862401207/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_queue.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d6a24bd514b4056553f49053d3c4b3862401207/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_queue.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_queue.h?ref=9d6a24bd514b4056553f49053d3c4b3862401207", "patch": "@@ -58,8 +58,8 @@\n  *  You should not attempt to use it directly.\n  */\n \n-#ifndef __SGI_STL_INTERNAL_QUEUE_H\n-#define __SGI_STL_INTERNAL_QUEUE_H\n+#ifndef __GLIBCPP_INTERNAL_QUEUE_H\n+#define __GLIBCPP_INTERNAL_QUEUE_H\n \n #include <bits/concept_check.h>\n \n@@ -237,7 +237,7 @@ class priority_queue\n \n } // namespace std\n \n-#endif /* __SGI_STL_INTERNAL_QUEUE_H */\n+#endif /* __GLIBCPP_INTERNAL_QUEUE_H */\n \n // Local Variables:\n // mode:C++"}, {"sha": "ee708c292179a07fd884cf340a01a4f689cf8a3c", "filename": "libstdc++-v3/include/bits/stl_set.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d6a24bd514b4056553f49053d3c4b3862401207/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d6a24bd514b4056553f49053d3c4b3862401207/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h?ref=9d6a24bd514b4056553f49053d3c4b3862401207", "patch": "@@ -58,8 +58,8 @@\n  *  You should not attempt to use it directly.\n  */\n \n-#ifndef __SGI_STL_INTERNAL_SET_H\n-#define __SGI_STL_INTERNAL_SET_H\n+#ifndef __GLIBCPP_INTERNAL_SET_H\n+#define __GLIBCPP_INTERNAL_SET_H\n \n #include <bits/concept_check.h>\n \n@@ -267,7 +267,7 @@ inline void swap(set<_Key,_Compare,_Alloc>& __x,\n \n } // namespace std\n \n-#endif /* __SGI_STL_INTERNAL_SET_H */\n+#endif /* __GLIBCPP_INTERNAL_SET_H */\n \n // Local Variables:\n // mode:C++"}, {"sha": "0a80b109f6a8ca48c7925415b2228faaf6f9259a", "filename": "libstdc++-v3/include/bits/stl_stack.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d6a24bd514b4056553f49053d3c4b3862401207/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_stack.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d6a24bd514b4056553f49053d3c4b3862401207/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_stack.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_stack.h?ref=9d6a24bd514b4056553f49053d3c4b3862401207", "patch": "@@ -58,8 +58,8 @@\n  *  You should not attempt to use it directly.\n  */\n \n-#ifndef __SGI_STL_INTERNAL_STACK_H\n-#define __SGI_STL_INTERNAL_STACK_H\n+#ifndef __GLIBCPP_INTERNAL_STACK_H\n+#define __GLIBCPP_INTERNAL_STACK_H\n \n #include <bits/concept_check.h>\n \n@@ -153,7 +153,7 @@ bool operator>=(const stack<_Tp,_Seq>& __x, const stack<_Tp,_Seq>& __y)\n \n } // namespace std\n \n-#endif /* __SGI_STL_INTERNAL_STACK_H */\n+#endif /* __GLIBCPP_INTERNAL_STACK_H */\n \n // Local Variables:\n // mode:C++"}, {"sha": "9d64c0333a80a90e9e5dbc600772fc616e31dfa6", "filename": "libstdc++-v3/include/bits/stl_tempbuf.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d6a24bd514b4056553f49053d3c4b3862401207/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tempbuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d6a24bd514b4056553f49053d3c4b3862401207/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tempbuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tempbuf.h?ref=9d6a24bd514b4056553f49053d3c4b3862401207", "patch": "@@ -58,8 +58,8 @@\n  *  You should not attempt to use it directly.\n  */\n \n-#ifndef __SGI_STL_INTERNAL_TEMPBUF_H\n-#define __SGI_STL_INTERNAL_TEMPBUF_H\n+#ifndef __GLIBCPP_INTERNAL_TEMPBUF_H\n+#define __GLIBCPP_INTERNAL_TEMPBUF_H\n \n namespace std\n {\n@@ -181,7 +181,7 @@ struct temporary_buffer : public _Temporary_buffer<_ForwardIterator, _Tp>\n     \n } // namespace std\n \n-#endif /* __SGI_STL_INTERNAL_TEMPBUF_H */\n+#endif /* __GLIBCPP_INTERNAL_TEMPBUF_H */\n \n // Local Variables:\n // mode:C++"}, {"sha": "10734a0b9106aa2461a4aeb5d5bd13d19be8bcd6", "filename": "libstdc++-v3/include/bits/stl_tree.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d6a24bd514b4056553f49053d3c4b3862401207/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d6a24bd514b4056553f49053d3c4b3862401207/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h?ref=9d6a24bd514b4056553f49053d3c4b3862401207", "patch": "@@ -60,8 +60,8 @@\n  *  You should not attempt to use it directly.\n  */\n \n-#ifndef __SGI_STL_INTERNAL_TREE_H\n-#define __SGI_STL_INTERNAL_TREE_H\n+#ifndef __GLIBCPP_INTERNAL_TREE_H\n+#define __GLIBCPP_INTERNAL_TREE_H\n \n /*\n \n@@ -1309,7 +1309,7 @@ struct rb_tree : public _Rb_tree<_Key, _Value, _KeyOfValue, _Compare, _Alloc>\n \n } // namespace std \n \n-#endif /* __SGI_STL_INTERNAL_TREE_H */\n+#endif /* __GLIBCPP_INTERNAL_TREE_H */\n \n // Local Variables:\n // mode:C++"}, {"sha": "39993b98d669143f7f2a521498ba112a81e00a36", "filename": "libstdc++-v3/include/bits/stl_vector.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d6a24bd514b4056553f49053d3c4b3862401207/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d6a24bd514b4056553f49053d3c4b3862401207/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h?ref=9d6a24bd514b4056553f49053d3c4b3862401207", "patch": "@@ -58,8 +58,8 @@\n  *  You should not attempt to use it directly.\n  */\n \n-#ifndef __SGI_STL_INTERNAL_VECTOR_H\n-#define __SGI_STL_INTERNAL_VECTOR_H\n+#ifndef __GLIBCPP_INTERNAL_VECTOR_H\n+#define __GLIBCPP_INTERNAL_VECTOR_H\n \n #include <bits/stl_iterator_base_funcs.h>\n #include <bits/functexcept.h>\n@@ -802,7 +802,7 @@ vector<_Tp, _Alloc>::_M_range_insert(iterator __position,\n \n } // namespace std \n \n-#endif /* __SGI_STL_INTERNAL_VECTOR_H */\n+#endif /* __GLIBCPP_INTERNAL_VECTOR_H */\n \n // Local Variables:\n // mode:C++"}, {"sha": "49e537b7b77c1b4d35150a67035d14d181d024fa", "filename": "libstdc++-v3/include/ext/ropeimpl.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d6a24bd514b4056553f49053d3c4b3862401207/libstdc%2B%2B-v3%2Finclude%2Fext%2Fropeimpl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d6a24bd514b4056553f49053d3c4b3862401207/libstdc%2B%2B-v3%2Finclude%2Fext%2Fropeimpl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fropeimpl.h?ref=9d6a24bd514b4056553f49053d3c4b3862401207", "patch": "@@ -863,15 +863,15 @@ bool rope<_CharT, _Alloc>::_S_apply_to_pieces(\n \t\tsize_t __len = __end - __begin;\n \t\tbool __result;\n \t\t_CharT* __buffer =\n-\t\t  (_CharT*)alloc::allocate(__len * sizeof(_CharT));\n+\t\t  (_CharT*)__alloc::allocate(__len * sizeof(_CharT));\n \t\ttry {\n \t\t  (*(__f->_M_fn))(__begin, __len, __buffer);\n \t\t  __result = __c(__buffer, __len);\n-                  alloc::deallocate(__buffer, __len * sizeof(_CharT));\n+                  __alloc::deallocate(__buffer, __len * sizeof(_CharT));\n                 }\n \t\tcatch(...)\n \t\t  {\n-\t\t    alloc::deallocate(__buffer, __len * sizeof(_CharT));\n+\t\t    __alloc::deallocate(__buffer, __len * sizeof(_CharT));\n \t\t    __throw_exception_again;\n \t\t  }\n \t\treturn __result;"}, {"sha": "150775feae8701a77cf8ee90eb23e0d3ea8c3f66", "filename": "libstdc++-v3/include/ext/stl_hashtable.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d6a24bd514b4056553f49053d3c4b3862401207/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstl_hashtable.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d6a24bd514b4056553f49053d3c4b3862401207/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstl_hashtable.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstl_hashtable.h?ref=9d6a24bd514b4056553f49053d3c4b3862401207", "patch": "@@ -85,7 +85,7 @@ struct _Hashtable_node\n };  \n \n template <class _Val, class _Key, class _HashFcn,\n-          class _ExtractKey, class _EqualKey, class _Alloc = alloc>\n+          class _ExtractKey, class _EqualKey, class _Alloc = __alloc>\n class hashtable;\n \n template <class _Val, class _Key, class _HashFcn,"}]}