{"sha": "7de37c97b4031ba61c867cf6fadf63916c666894", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2RlMzdjOTdiNDAzMWJhNjFjODY3Y2Y2ZmFkZjYzOTE2YzY2Njg5NA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2018-11-13T04:34:59Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2018-11-13T04:34:59Z"}, "message": "Implement P0780R2, pack expansion in lambda init-capture.\n\nMostly this was straightforward; the tricky bit was finding, in the\ninstantiation, the set of capture proxies built when instantiating the\ninit-capture.  The comment in lookup_init_capture_pack goes into detail.\n\n\t* parser.c (cp_parser_lambda_introducer): Parse pack init-capture.\n\t* pt.c (tsubst_pack_expansion): Handle init-capture packs.\n\t(lookup_init_capture_pack): New.\n\t(tsubst_expr) [DECL_EXPR]: Use it.\n\t(tsubst_lambda_expr): Remember field pack expansions for\n\tinit-captures.\n\nFrom-SVN: r266052", "tree": {"sha": "fdac1a45bf4f122160441c7d94517023f003fdf0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fdac1a45bf4f122160441c7d94517023f003fdf0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7de37c97b4031ba61c867cf6fadf63916c666894", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7de37c97b4031ba61c867cf6fadf63916c666894", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7de37c97b4031ba61c867cf6fadf63916c666894", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7de37c97b4031ba61c867cf6fadf63916c666894/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "16e723e600a62428b8ed6ab414931ec7a78aceee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16e723e600a62428b8ed6ab414931ec7a78aceee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16e723e600a62428b8ed6ab414931ec7a78aceee"}], "stats": {"total": 131, "additions": 120, "deletions": 11}, "files": [{"sha": "2f15c08b3e4fe390ce34c922c46207ea3451ae49", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7de37c97b4031ba61c867cf6fadf63916c666894/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7de37c97b4031ba61c867cf6fadf63916c666894/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7de37c97b4031ba61c867cf6fadf63916c666894", "patch": "@@ -1,5 +1,13 @@\n 2018-11-12  Jason Merrill  <jason@redhat.com>\n \n+\tImplement P0780R2, pack expansion in lambda init-capture.\n+\t* parser.c (cp_parser_lambda_introducer): Parse pack init-capture.\n+\t* pt.c (tsubst_pack_expansion): Handle init-capture packs.\n+\t(lookup_init_capture_pack): New.\n+\t(tsubst_expr) [DECL_EXPR]: Use it.\n+\t(tsubst_lambda_expr): Remember field pack expansions for\n+\tinit-captures.\n+\n \t* cp-tree.h (struct cp_evaluated): New.\n \t* init.c (get_nsdmi): Use it.\n \t* parser.c (cp_parser_enclosed_template_argument_list): Use it."}, {"sha": "0428f6dda906126f0c989ac376779ffd0dedd536", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7de37c97b4031ba61c867cf6fadf63916c666894/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7de37c97b4031ba61c867cf6fadf63916c666894/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=7de37c97b4031ba61c867cf6fadf63916c666894", "patch": "@@ -10395,6 +10395,17 @@ cp_parser_lambda_introducer (cp_parser* parser, tree lambda_expr)\n \t  continue;\n \t}\n \n+      bool init_pack_expansion = false;\n+      if (cp_lexer_next_token_is (parser->lexer, CPP_ELLIPSIS))\n+\t{\n+\t  location_t loc = cp_lexer_peek_token (parser->lexer)->location;\n+\t  if (cxx_dialect < cxx2a)\n+\t    pedwarn (loc, 0, \"pack init-capture only available with \"\n+\t\t\t     \"-std=c++2a or -std=gnu++2a\");\n+\t  cp_lexer_consume_token (parser->lexer);\n+\t  init_pack_expansion = true;\n+\t}\n+\n       /* Remember whether we want to capture as a reference or not.  */\n       if (cp_lexer_next_token_is (parser->lexer, CPP_AND))\n \t{\n@@ -10438,6 +10449,8 @@ cp_parser_lambda_introducer (cp_parser* parser, tree lambda_expr)\n \t      error (\"empty initializer for lambda init-capture\");\n \t      capture_init_expr = error_mark_node;\n \t    }\n+\t  if (init_pack_expansion)\n+\t    capture_init_expr = make_pack_expansion (capture_init_expr);\n \t}\n       else\n \t{"}, {"sha": "0c33c8e1527085ed300d1c259f5820ca43e8d597", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 82, "deletions": 11, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7de37c97b4031ba61c867cf6fadf63916c666894/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7de37c97b4031ba61c867cf6fadf63916c666894/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=7de37c97b4031ba61c867cf6fadf63916c666894", "patch": "@@ -12151,7 +12151,7 @@ tsubst_pack_expansion (tree t, tree args, tsubst_flags_t complain,\n \t       where it isn't expected).  */\n \t    unsubstituted_fn_pack = true;\n \t}\n-      else if (is_normal_capture_proxy (parm_pack))\n+      else if (is_capture_proxy (parm_pack))\n \t{\n \t  arg_pack = retrieve_local_specialization (parm_pack);\n \t  if (argument_pack_element_is_expansion_p (arg_pack, 0))\n@@ -16769,6 +16769,55 @@ tsubst_decomp_names (tree decl, tree pattern_decl, tree args,\n   return decl;\n }\n \n+/* Return the proper local_specialization for init-capture pack DECL.  */\n+\n+static tree\n+lookup_init_capture_pack (tree decl)\n+{\n+  /* We handle normal pack captures by forwarding to the specialization of the\n+     captured parameter.  We can't do that for pack init-captures; we need them\n+     to have their own local_specialization.  We created the individual\n+     VAR_DECLs (if any) under build_capture_proxy, and we need to collect them\n+     when we process the DECL_EXPR for the pack init-capture in the template.\n+     So, how do we find them?  We don't know the capture proxy pack when\n+     building the individual resulting proxies, and we don't know the\n+     individual proxies when instantiating the pack.  What we have in common is\n+     the FIELD_DECL.\n+\n+     So...when we instantiate the FIELD_DECL, we stick the result in\n+     local_specializations.  Then at the DECL_EXPR we look up that result, see\n+     how many elements it has, synthesize the names, and look them up.  */\n+\n+  tree cname = DECL_NAME (decl);\n+  tree val = DECL_VALUE_EXPR (decl);\n+  tree field = TREE_OPERAND (val, 1);\n+  gcc_assert (TREE_CODE (field) == FIELD_DECL);\n+  tree fpack = retrieve_local_specialization (field);\n+  if (fpack == error_mark_node)\n+    return error_mark_node;\n+\n+  int len = 1;\n+  tree vec = NULL_TREE;\n+  tree r = NULL_TREE;\n+  if (TREE_CODE (fpack) == TREE_VEC)\n+    {\n+      len = TREE_VEC_LENGTH (fpack);\n+      vec = make_tree_vec (len);\n+      r = make_node (NONTYPE_ARGUMENT_PACK);\n+      SET_ARGUMENT_PACK_ARGS (r, vec);\n+    }\n+  for (int i = 0; i < len; ++i)\n+    {\n+      tree ename = vec ? make_ith_pack_parameter_name (cname, i) : cname;\n+      tree elt = lookup_name_real (ename, 0, 0, true, 0, LOOKUP_NORMAL);\n+      if (vec)\n+\tTREE_VEC_ELT (vec, i) = elt;\n+      else\n+\tr = elt;\n+    }\n+  return r;\n+}\n+\n /* Like tsubst_copy for expressions, etc. but also does semantic\n    processing.  */\n \n@@ -16854,18 +16903,21 @@ tsubst_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl,\n \t    /* We're in tsubst_lambda_expr, we've already inserted a new\n \t       capture proxy, so look it up and register it.  */\n \t    tree inst;\n-\t    if (DECL_PACK_P (decl))\n+\t    if (!DECL_PACK_P (decl))\n+\t      {\n+\t\tinst = lookup_name_real (DECL_NAME (decl), 0, 0,\n+\t\t\t\t\t /*block_p=*/true, 0, LOOKUP_HIDDEN);\n+\t\tgcc_assert (inst != decl && is_capture_proxy (inst));\n+\t      }\n+\t    else if (is_normal_capture_proxy (decl))\n \t      {\n \t\tinst = (retrieve_local_specialization\n \t\t\t(DECL_CAPTURED_VARIABLE (decl)));\n \t\tgcc_assert (TREE_CODE (inst) == NONTYPE_ARGUMENT_PACK);\n \t      }\n \t    else\n-\t      {\n-\t\tinst = lookup_name_real (DECL_NAME (decl), 0, 0,\n-\t\t\t\t\t /*block_p=*/true, 0, LOOKUP_HIDDEN);\n-\t\tgcc_assert (inst != decl && is_capture_proxy (inst));\n-\t      }\n+\t      inst = lookup_init_capture_pack (decl);\n+\n \t    register_local_specialization (inst, decl);\n \t    break;\n \t  }\n@@ -17812,13 +17864,22 @@ tsubst_lambda_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n   gcc_assert (LAMBDA_EXPR_THIS_CAPTURE (t) == NULL_TREE\n \t      && LAMBDA_EXPR_PENDING_PROXIES (t) == NULL);\n \n+  vec<tree,va_gc>* field_packs = NULL;\n+\n   for (tree cap = LAMBDA_EXPR_CAPTURE_LIST (t); cap;\n        cap = TREE_CHAIN (cap))\n     {\n-      tree field = TREE_PURPOSE (cap);\n-      if (PACK_EXPANSION_P (field))\n-\tfield = PACK_EXPANSION_PATTERN (field);\n-      field = tsubst_decl (field, args, complain);\n+      tree ofield = TREE_PURPOSE (cap);\n+      if (PACK_EXPANSION_P (ofield))\n+\tofield = PACK_EXPANSION_PATTERN (ofield);\n+      tree field = tsubst_decl (ofield, args, complain);\n+\n+      if (DECL_PACK_P (ofield) && !DECL_NORMAL_CAPTURE_P (ofield))\n+\t{\n+\t  /* Remember these for when we've pushed local_specializations.  */\n+\t  vec_safe_push (field_packs, ofield);\n+\t  vec_safe_push (field_packs, field);\n+\t}\n \n       if (field == error_mark_node)\n \treturn error_mark_node;\n@@ -17908,6 +17969,16 @@ tsubst_lambda_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \n       tree body = start_lambda_function (fn, r);\n \n+      /* Now record them for lookup_init_capture_pack.  */\n+      int fplen = vec_safe_length (field_packs);\n+      for (int i = 0; i < fplen; )\n+\t{\n+\t  tree pack = (*field_packs)[i++];\n+\t  tree inst = (*field_packs)[i++];\n+\t  register_local_specialization (inst, pack);\n+\t}\n+      release_tree_vector (field_packs);\n+\n       register_parameter_specializations (oldfn, fn);\n \n       if (oldtmpl)"}, {"sha": "89c63532831439d37d6f6c9e35bb83a035b2de49", "filename": "gcc/testsuite/g++.dg/cpp2a/lambda-pack-init1.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7de37c97b4031ba61c867cf6fadf63916c666894/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda-pack-init1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7de37c97b4031ba61c867cf6fadf63916c666894/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda-pack-init1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda-pack-init1.C?ref=7de37c97b4031ba61c867cf6fadf63916c666894", "patch": "@@ -0,0 +1,17 @@\n+// { dg-do compile { target c++2a } }\n+\n+void bar();\n+void bar(int);\n+\n+template <typename... Args>\n+void foo(Args... args) {\n+  [...xs=args]{\n+    bar(xs...); // xs is an init-capture pack\n+  };\n+}\n+\n+int main()\n+{\n+  foo();  // OK: xs contains zero init-captures\n+  foo(1); // OK: xs contains one init-capture\n+}"}]}