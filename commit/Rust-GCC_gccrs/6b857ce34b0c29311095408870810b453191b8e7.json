{"sha": "6b857ce34b0c29311095408870810b453191b8e7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmI4NTdjZTM0YjBjMjkzMTEwOTU0MDg4NzA4MTBiNDUzMTkxYjhlNw==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@hxi.com", "date": "2001-11-16T18:33:57Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2001-11-16T18:33:57Z"}, "message": "a29k.c: Fix comment formatting.\n\n\t* config/a29k/a29k.c: Fix comment formatting.\n\t* config/a29k/a29k.h: Likewise.\n\t* config/arc/arc.c: Likewise.\n\t* config/arc/arc.h: Likewise.\n\t* config/vax/vax.c: Likewise.\n\t* config/vax/vax.h: Likewise.\n\t* config/we32k/we32k.c: Likewise.\n\t* config/we32k/we32k.h: Likewise.\n\nFrom-SVN: r47091", "tree": {"sha": "63267a298383deb68d94666029b5e39ee714091f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/63267a298383deb68d94666029b5e39ee714091f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b857ce34b0c29311095408870810b453191b8e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b857ce34b0c29311095408870810b453191b8e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b857ce34b0c29311095408870810b453191b8e7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b857ce34b0c29311095408870810b453191b8e7/comments", "author": null, "committer": null, "parents": [{"sha": "bcb0771008411d91a4add522bf055d2986634384", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcb0771008411d91a4add522bf055d2986634384", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bcb0771008411d91a4add522bf055d2986634384"}], "stats": {"total": 121, "additions": 66, "deletions": 55}, "files": [{"sha": "50f3e05d845adcd6fb3b3cfd7f14478716ff55ba", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b857ce34b0c29311095408870810b453191b8e7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b857ce34b0c29311095408870810b453191b8e7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6b857ce34b0c29311095408870810b453191b8e7", "patch": "@@ -1,3 +1,14 @@\n+2001-11-16  Kazu Hirata  <kazu@hxi.com>\n+\n+\t* config/a29k/a29k.c: Fix comment formatting.\n+\t* config/a29k/a29k.h: Likewise.\n+\t* config/arc/arc.c: Likewise.\n+\t* config/arc/arc.h: Likewise.\n+\t* config/vax/vax.c: Likewise.\n+\t* config/vax/vax.h: Likewise.\n+\t* config/we32k/we32k.c: Likewise.\n+\t* config/we32k/we32k.h: Likewise.\n+\n 2001-11-16  Jeff Law  <law@redhat.com>\n \n \t* unroll.c (copy_loop_body): Initialize JUMP_LABEL field after"}, {"sha": "531247154fc7828ee9107f4ab6b50d246b5c4839", "filename": "gcc/config/a29k/a29k.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b857ce34b0c29311095408870810b453191b8e7/gcc%2Fconfig%2Fa29k%2Fa29k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b857ce34b0c29311095408870810b453191b8e7/gcc%2Fconfig%2Fa29k%2Fa29k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fa29k%2Fa29k.c?ref=6b857ce34b0c29311095408870810b453191b8e7", "patch": "@@ -106,7 +106,7 @@ int a29k_compare_fp_p;\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n-/* Returns 1 if OP is a 8-bit constant. */\n+/* Returns 1 if OP is a 8-bit constant.  */\n \n int\n cint_8_operand (op, mode)\n@@ -351,7 +351,7 @@ and_operand (op, mode)\n \n /* Return 1 if OP can be used as the second operand of an ADD insn.\n    This is the same as above, except we use negative, rather than\n-   complement.   */\n+   complement.  */\n \n int\n add_operand (op, mode)\n@@ -1225,7 +1225,7 @@ print_operand (file, x, code)\n     output_addr_const (file, x);\n }\n \f\n-/* This page contains routines to output function prolog and epilog code. */\n+/* This page contains routines to output function prolog and epilog code.  */\n \n /* Compute the size of the register stack, and determine if there are any\n    call instructions.  */\n@@ -1482,7 +1482,7 @@ output_function_epilogue (file, size)\n {\n   rtx insn;\n   int locals_unavailable = 0;\t/* True until after first insn\n-\t\t\t\t   after gr1 update. */\n+\t\t\t\t   after gr1 update.  */\n \n   /* If we hit a BARRIER before a real insn or CODE_LABEL, we don't\n      need to do anything because we are never jumped to.  */"}, {"sha": "27b33be9cd53ad01283fee7b149f17ecedc9a985", "filename": "gcc/config/a29k/a29k.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b857ce34b0c29311095408870810b453191b8e7/gcc%2Fconfig%2Fa29k%2Fa29k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b857ce34b0c29311095408870810b453191b8e7/gcc%2Fconfig%2Fa29k%2Fa29k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fa29k%2Fa29k.h?ref=6b857ce34b0c29311095408870810b453191b8e7", "patch": "@@ -88,7 +88,7 @@ extern int target_flags;\n #define TARGET_NO_REUSE_ARGS\t(target_flags & 256)\n \n /* This means that neither builtin nor emulated float operations are\n-   available, and that GCC should generate libcalls instead. */\n+   available, and that GCC should generate libcalls instead.  */\n \n #define TARGET_SOFT_FLOAT\t(target_flags & 512)\n \n@@ -162,7 +162,7 @@ extern int target_flags;\n    numbered. \n \n    For 29k we can decide arbitrarily since there are no machine instructions\n-   for them.  Might as well be consistent with bytes. */\n+   for them.  Might as well be consistent with bytes.  */\n #define WORDS_BIG_ENDIAN 1\n \n /* number of bits in an addressable storage unit */\n@@ -525,7 +525,7 @@ enum reg_class { NO_REGS, LR0_REGS, GENERAL_REGS, BP_REGS, FC_REGS, CR_REGS,\n \n #define N_REG_CLASSES (int) LIM_REG_CLASSES\n \n-/* Give names of register classes as strings for dump file.   */\n+/* Give names of register classes as strings for dump file.  */\n \n #define REG_CLASS_NAMES\t\t\t\t\\\n  {\"NO_REGS\", \"LR0_REGS\", \"GENERAL_REGS\", \"BP_REGS\", \"FC_REGS\", \"CR_REGS\", \\\n@@ -1176,7 +1176,7 @@ extern const char *a29k_function_name;\n /* Define as C expression which evaluates to nonzero if the tablejump\n    instruction expects the table to contain offsets from the address of the\n    table.\n-   Do not define this if the table should contain absolute addresses. */\n+   Do not define this if the table should contain absolute addresses.  */\n /* #define CASE_VECTOR_PC_RELATIVE 1 */\n \n /* Specify the tree operation to be used to convert reals to integers.  */\n@@ -1269,7 +1269,7 @@ extern const char *a29k_function_name;\n #define NO_FUNCTION_CSE\n \n /* Define this to be nonzero if shift instructions ignore all but the low-order\n-   few bits. */\n+   few bits.  */\n #define SHIFT_COUNT_TRUNCATED 1\n \n /* Compute the cost of computing a constant rtl expression RTX\n@@ -1434,7 +1434,7 @@ extern int a29k_debug_reg_map[];\n #define ASM_GLOBALIZE_LABEL(FILE,NAME)\t\\\n   do { fputs (\"\\t.global \", FILE); assemble_name (FILE, NAME); fputs (\"\\n\", FILE);} while (0)\n \n-/* The prefix to add to user-visible assembler symbols. */\n+/* The prefix to add to user-visible assembler symbols.  */\n \n #undef USER_LABEL_PREFIX\n #define USER_LABEL_PREFIX \"_\"\n@@ -1447,7 +1447,7 @@ extern int a29k_debug_reg_map[];\n \n /* This is how to output a label for a jump table.  Arguments are the same as\n    for ASM_OUTPUT_INTERNAL_LABEL, except the insn for the jump table is\n-   passed. */\n+   passed.  */\n \n #define ASM_OUTPUT_CASE_LABEL(FILE,PREFIX,NUM,TABLEINSN)\t\\\n { ASM_OUTPUT_ALIGN (FILE, 2); ASM_OUTPUT_INTERNAL_LABEL (FILE, PREFIX, NUM); }\n@@ -1516,7 +1516,7 @@ extern int a29k_debug_reg_map[];\n   fprintf (FILE, \"\\t.word L%d\\n\", VALUE)\n \n /* This is how to output an element of a case-vector that is relative.\n-   Don't define this if it is not supported. */\n+   Don't define this if it is not supported.  */\n \n /* #define ASM_OUTPUT_ADDR_DIFF_ELT(FILE, VALUE, REL) */\n "}, {"sha": "5ecc1eceef8e92b39847c812a654bf076856932d", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b857ce34b0c29311095408870810b453191b8e7/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b857ce34b0c29311095408870810b453191b8e7/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=6b857ce34b0c29311095408870810b453191b8e7", "patch": "@@ -1185,7 +1185,7 @@ arc_output_function_prologue (file, size)\n }\n \f\n /* Do any necessary cleanup after a function to restore stack, frame,\n-   and regs. */\n+   and regs.  */\n \n static void\n arc_output_function_epilogue (file, size)\n@@ -1920,7 +1920,7 @@ arc_final_prescan_insn (insn, opvec, noperands)\n      an if/then/else), and things need to be reversed.  */\n   int reverse = 0;\n \n-  /* If we start with a return insn, we only succeed if we find another one. */\n+  /* If we start with a return insn, we only succeed if we find another one.  */\n   int seeking_return = 0;\n   \n   /* START_INSN will hold the insn from where we start looking.  This is the\n@@ -2079,7 +2079,7 @@ arc_final_prescan_insn (insn, opvec, noperands)\n \t      /* Succeed if the following insn is the target label.\n \t\t Otherwise fail.  \n \t\t If return insns are used then the last insn in a function \n-\t\t will be a barrier. */\n+\t\t will be a barrier.  */\n \t      next_must_be_target_label_p = TRUE;\n \t      break;\n \n@@ -2098,7 +2098,7 @@ arc_final_prescan_insn (insn, opvec, noperands)\n       \t      /* If this is an unconditional branch to the same label, succeed.\n \t\t If it is to another label, do nothing.  If it is conditional,\n \t\t fail.  */\n-\t      /* ??? Probably, the test for the SET and the PC are unnecessary. */\n+\t      /* ??? Probably, the test for the SET and the PC are unnecessary.  */\n \n \t      if (GET_CODE (scanbody) == SET\n \t\t  && GET_CODE (SET_DEST (scanbody)) == PC)\n@@ -2183,7 +2183,7 @@ arc_final_prescan_insn (insn, opvec, noperands)\n       /* Restore recog_data.  Getting the attributes of other insns can\n \t destroy this array, but final.c assumes that it remains intact\n \t across this call; since the insn has been recognized already we\n-\t call insn_extract direct. */\n+\t call insn_extract direct.  */\n       insn_extract (insn);\n     }\n }"}, {"sha": "60e1c1eb78c6f244bde4c873e74bc98ba05c0a6b", "filename": "gcc/config/arc/arc.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b857ce34b0c29311095408870810b453191b8e7/gcc%2Fconfig%2Farc%2Farc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b857ce34b0c29311095408870810b453191b8e7/gcc%2Fconfig%2Farc%2Farc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.h?ref=6b857ce34b0c29311095408870810b453191b8e7", "patch": "@@ -186,7 +186,7 @@ do {\t\t\t\t\\\n /* Target machine storage layout.  */\n \n /* Define to use software floating point emulator for REAL_ARITHMETIC and\n-   decimal <-> binary conversion. */\n+   decimal <-> binary conversion.  */\n #define REAL_ARITHMETIC\n \n /* Define this if most significant bit is lowest numbered\n@@ -448,7 +448,7 @@ enum reg_class {\n \n #define N_REG_CLASSES (int) LIM_REG_CLASSES\n \n-/* Give names of register classes as strings for dump file.   */\n+/* Give names of register classes as strings for dump file.  */\n #define REG_CLASS_NAMES \\\n { \"NO_REGS\", \"LPCOUNT_REG\", \"GENERAL_REGS\", \"ALL_REGS\" }\n \n@@ -1040,7 +1040,7 @@ arc_select_cc_mode (OP, X, Y)\n    of a switch statement.  If the code is computed here,\n    return it with a return statement.  Otherwise, break from the switch.  */\n /* Small integers are as cheap as registers.  4 byte values can be fetched\n-   as immediate constants - let's give that the cost of an extra insn. */\n+   as immediate constants - let's give that the cost of an extra insn.  */\n #define CONST_COSTS(X, CODE, OUTER_CODE) \\\n   case CONST_INT :\t\t\t\t\t\t\\\n     if (SMALL_INT (INTVAL (X)))\t\t\t\t\t\\\n@@ -1474,7 +1474,7 @@ do { if ((LOG) != 0) fprintf (FILE, \"\\t.align %d\\n\", 1 << (LOG)); } while (0)\n /* Define as C expression which evaluates to nonzero if the tablejump\n    instruction expects the table to contain offsets from the address of the\n    table.\n-   Do not define this if the table should contain absolute addresses. */\n+   Do not define this if the table should contain absolute addresses.  */\n /* It's not clear what PIC will look like or whether we want to use -fpic\n    for the embedded form currently being talked about.  For now require -fpic\n    to get pc relative switch tables.  */\n@@ -1501,7 +1501,7 @@ do { if ((LOG) != 0) fprintf (FILE, \"\\t.align %d\\n\", 1 << (LOG)); } while (0)\n #define MOVE_MAX 4\n \n /* Define this to be nonzero if shift instructions ignore all but the low-order\n-   few bits. */\n+   few bits.  */\n #define SHIFT_COUNT_TRUNCATED 1\n \n /* Value is 1 if truncating an integer of INPREC bits to OUTPREC bits\n@@ -1532,7 +1532,7 @@ do { if ((LOG) != 0) fprintf (FILE, \"\\t.align %d\\n\", 1 << (LOG)); } while (0)\n    since it hasn't been defined!  */\n extern struct rtx_def *arc_compare_op0, *arc_compare_op1;\n \n-/* ARC function types.   */\n+/* ARC function types.  */\n enum arc_function_type {\n   ARC_FUNCTION_UNKNOWN, ARC_FUNCTION_NORMAL,\n   /* These are interrupt handlers.  The name corresponds to the register"}, {"sha": "9f0387c376f4b3daa2058109951ab22333afd749", "filename": "gcc/config/vax/vax.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b857ce34b0c29311095408870810b453191b8e7/gcc%2Fconfig%2Fvax%2Fvax.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b857ce34b0c29311095408870810b453191b8e7/gcc%2Fconfig%2Fvax%2Fvax.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.c?ref=6b857ce34b0c29311095408870810b453191b8e7", "patch": "@@ -473,7 +473,7 @@ vax_address_cost (addr)\n       goto restart;\n     }\n   /* Indexing and register+offset can both be used (except on a VAX 2)\n-     without increasing execution time over either one alone. */\n+     without increasing execution time over either one alone.  */\n   if (reg && indexed && offset)\n     return reg + indir + offset + predec;\n   return reg + indexed + indir + offset + predec;\n@@ -573,7 +573,7 @@ vax_rtx_cost (x)\n       c = 3;\n       break;\n     case AND:\n-      /* AND is special because the first operand is complemented. */\n+      /* AND is special because the first operand is complemented.  */\n       c = 3;\n       if (GET_CODE (XEXP (x, 0)) == CONST_INT)\n \t{\n@@ -742,7 +742,7 @@ check_float_value (mode, d, overflow)\n }\n \f\n #if VMS_TARGET\n-/* Additional support code for VMS target. */\n+/* Additional support code for VMS target.  */\n \n /* Linked list of all externals that are to be emitted when optimizing\n    for the global pointer if they haven't been declared by the end of\n@@ -863,7 +863,7 @@ vms_asm_out_destructor (symbol, priority)\n }\n #endif /* VMS_TARGET */\n \f\n-/* Additional support code for VMS host. */\n+/* Additional support code for VMS host.  */\n /* ??? This should really be in libiberty; vax.c is a target file.  */\n #ifdef QSORT_WORKAROUND\n   /*"}, {"sha": "78f6f150e9744fc38c314732c10ff09287fd3bda", "filename": "gcc/config/vax/vax.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b857ce34b0c29311095408870810b453191b8e7/gcc%2Fconfig%2Fvax%2Fvax.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b857ce34b0c29311095408870810b453191b8e7/gcc%2Fconfig%2Fvax%2Fvax.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.h?ref=6b857ce34b0c29311095408870810b453191b8e7", "patch": "@@ -25,7 +25,7 @@ Boston, MA 02111-1307, USA.  */\n \n #define CPP_PREDEFINES \"-Dvax -D__vax__ -Dunix -Asystem=unix -Asystem=bsd -Acpu=vax -Amachine=vax\"\n \n-/* Use -J option for long branch support with Unix assembler. */\n+/* Use -J option for long branch support with Unix assembler.  */\n \n #define ASM_SPEC \"-J\"\n \n@@ -90,7 +90,7 @@ extern int target_flags;\n /* Target machine storage layout */\n \n /* Define for software floating point emulation of VAX format\n-   when cross compiling from a non-VAX host. */\n+   when cross compiling from a non-VAX host.  */\n /* #define REAL_ARITHMETIC */\n \n /* Define this if most significant bit is lowest numbered\n@@ -255,7 +255,7 @@ enum reg_class { NO_REGS, ALL_REGS, LIM_REG_CLASSES };\n \n #define GENERAL_REGS ALL_REGS\n \n-/* Give names of register classes as strings for dump file.   */\n+/* Give names of register classes as strings for dump file.  */\n \n #define REG_CLASS_NAMES \\\n  {\"NO_REGS\", \"ALL_REGS\" }\n@@ -794,7 +794,7 @@ enum reg_class { NO_REGS, ALL_REGS, LIM_REG_CLASSES };\n /* Define as C expression which evaluates to nonzero if the tablejump\n    instruction expects the table to contain offsets from the address of the\n    table.\n-   Do not define this if the table should contain absolute addresses. */\n+   Do not define this if the table should contain absolute addresses.  */\n #define CASE_VECTOR_PC_RELATIVE 1\n \n /* Define this if the case instruction drops through after the table\n@@ -1093,7 +1093,7 @@ enum reg_class { NO_REGS, ALL_REGS, LIM_REG_CLASSES };\n #define ASM_GLOBALIZE_LABEL(FILE,NAME)\t\\\n   do { fputs (\".globl \", FILE); assemble_name (FILE, NAME); fputs (\"\\n\", FILE);} while (0)\n \n-/* The prefix to add to user-visible assembler symbols. */\n+/* The prefix to add to user-visible assembler symbols.  */\n \n #define USER_LABEL_PREFIX \"_\"\n "}, {"sha": "32d6bb184b279d8d709814f7e5ce027812225731", "filename": "gcc/config/we32k/we32k.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b857ce34b0c29311095408870810b453191b8e7/gcc%2Fconfig%2Fwe32k%2Fwe32k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b857ce34b0c29311095408870810b453191b8e7/gcc%2Fconfig%2Fwe32k%2Fwe32k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fwe32k%2Fwe32k.c?ref=6b857ce34b0c29311095408870810b453191b8e7", "patch": "@@ -81,7 +81,7 @@ we32k_output_function_prologue (file, size)\n    The function epilogue should not depend on the current stack\n    pointer!  It should use the frame pointer only.  This is mandatory\n    because of alloca; we also take advantage of it to omit stack\n-   adjustments before returning. */\n+   adjustments before returning.  */\n \n static void\n we32k_output_function_epilogue (file, size)"}, {"sha": "00078017214bfaf0a5acabd0687311e33460ba45", "filename": "gcc/config/we32k/we32k.h", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b857ce34b0c29311095408870810b453191b8e7/gcc%2Fconfig%2Fwe32k%2Fwe32k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b857ce34b0c29311095408870810b453191b8e7/gcc%2Fconfig%2Fwe32k%2Fwe32k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fwe32k%2Fwe32k.h?ref=6b857ce34b0c29311095408870810b453191b8e7", "patch": "@@ -50,7 +50,7 @@ extern int target_flags;\n /* target machine storage layout */\n \n /* Define this if most significant bit is lowest numbered\n-   in instructions that operate on numbered bit-fields. */\n+   in instructions that operate on numbered bit-fields.  */\n #define BITS_BIG_ENDIAN 0\n \n /* Define this if most significant byte of a word is the lowest numbered.  */\n@@ -117,11 +117,11 @@ extern int target_flags;\n    The hardware registers are assigned numbers for the compiler\n    from 0 to just below FIRST_PSEUDO_REGISTER.\n    All registers that the compiler knows about must be given numbers,\n-   even those that are not normally considered general registers. */\n+   even those that are not normally considered general registers.  */\n #define FIRST_PSEUDO_REGISTER 16\n \n /* 1 for registers that have pervasive standard uses\n-   and are not available for the register allocator. */\n+   and are not available for the register allocator.  */\n #define FIXED_REGISTERS  \\\n  {0, 0, 0, 0, 0, 0, 0, 0, \\\n   0, 1, 1, 1, 1, 1, 1, 1, }\n@@ -145,11 +145,11 @@ extern int target_flags;\n /* Return number of consecutive hard regs needed starting at reg REGNO\n    to hold something of mode MODE.\n    This is ordinarily the length in words of a value of mode MODE\n-   but can be less for certain modes in special long registers. */\n+   but can be less for certain modes in special long registers.  */\n #define HARD_REGNO_NREGS(REGNO, MODE)   \\\n   ((GET_MODE_SIZE (MODE) + UNITS_PER_WORD - 1) / UNITS_PER_WORD)\n \n-/* Value is 1 if hard register REGNO can hold a value of machine-mode MODE. */\n+/* Value is 1 if hard register REGNO can hold a value of machine-mode MODE.  */\n #define HARD_REGNO_MODE_OK(REGNO, MODE) 1\n \n /* Value is 1 if it is a good idea to tie two pseudo registers\n@@ -186,7 +186,7 @@ extern int target_flags;\n    is passed to a function.  */\n #define STRUCT_VALUE_REGNUM 2\n \n-/* Order in which to allocate registers. */\n+/* Order in which to allocate registers.  */\n #define REG_ALLOC_ORDER  \\\n  {0, 1, 8, 7, 6, 5, 4, 3}\n \f\n@@ -215,7 +215,7 @@ enum reg_class { NO_REGS, GENERAL_REGS,\n \n #define N_REG_CLASSES (int) LIM_REG_CLASSES\n \n-/* Give names of register classes as strings for dump file.   */\n+/* Give names of register classes as strings for dump file.  */\n \n #define REG_CLASS_NAMES \\\n  { \"NO_REGS\", \"GENERAL_REGS\", \"ALL_REGS\" }\n@@ -249,7 +249,7 @@ enum reg_class { NO_REGS, GENERAL_REGS,\n    machine description; we zorch the constraint letters that aren't\n    appropriate for a specific target.  This allows us to guarantee\n    that a specific kind of register will not be used for a given target\n-   without fiddling with the register classes above. */\n+   without fiddling with the register classes above.  */\n \n #define REG_CLASS_FROM_LETTER(C) \\\n   ((C) == 'r' ? GENERAL_REGS : NO_REGS)\n@@ -258,7 +258,7 @@ enum reg_class { NO_REGS, GENERAL_REGS,\n    can be used to stand for particular ranges of immediate operands.\n    This macro defines what the ranges are.\n    C is the letter, and VALUE is a constant value.\n-   Return 1 if VALUE is in the range specified by C. */\n+   Return 1 if VALUE is in the range specified by C.  */\n \n #define CONST_OK_FOR_LETTER_P(VALUE, C)  0\n \n@@ -270,7 +270,7 @@ enum reg_class { NO_REGS, GENERAL_REGS,\n /* Given an rtx X being reloaded into a reg required to be\n    in class CLASS, return the class of reg to actually use.\n    In general this is just CLASS; but on some machines\n-   in some cases it is preferable to use a more restrictive class. */\n+   in some cases it is preferable to use a more restrictive class.  */\n \n #define PREFERRED_RELOAD_CLASS(X,CLASS)  (CLASS)\n \n@@ -298,7 +298,7 @@ enum reg_class { NO_REGS, GENERAL_REGS,\n #define STARTING_FRAME_OFFSET 0\n \n /* If we generate an insn to push BYTES bytes,\n-   this says how many the stack pointer really advances by. */\n+   this says how many the stack pointer really advances by.  */\n #define PUSH_ROUNDING(BYTES) (((BYTES) + 3) & ~3)\n \n /* Offset of first parameter from the argument pointer register value.  */\n@@ -308,7 +308,7 @@ enum reg_class { NO_REGS, GENERAL_REGS,\n    pops the arguments described by the number-of-args field in the call.\n    FUNDECL is the declaration node of the function (as a tree),\n    FUNTYPE is the data type of the function (as a tree),\n-   or for a library call it is an identifier node for the subroutine name. */\n+   or for a library call it is an identifier node for the subroutine name.  */\n \n #define RETURN_POPS_ARGS(FUNDECL,FUNTYPE,SIZE) (SIZE)\n \n@@ -542,7 +542,7 @@ enum reg_class { NO_REGS, GENERAL_REGS,\n /* GO_IF_LEGITIMATE_ADDRESS recognizes an RTL expression\n    that is a valid memory address for an instruction.\n    The MODE argument is the machine mode for the MEM expression\n-   that wants to use this address. */\n+   that wants to use this address.  */\n \n #define GO_IF_LEGITIMATE_ADDRESS(MODE, X, LABEL)\t\t\t\\\n { register rtx Addr = X;\t\t\t\t\t\t\\\n@@ -573,12 +573,12 @@ enum reg_class { NO_REGS, GENERAL_REGS,\n    GO_IF_LEGITIMATE_ADDRESS.\n \n    It is always safe for this macro to do nothing.  It exists to recognize\n-   opportunities to optimize the output. */\n+   opportunities to optimize the output.  */\n \n #define LEGITIMIZE_ADDRESS(X,OLDX,MODE,WIN)   { }\n \n /* Go to LABEL if ADDR (a legitimate address expression)\n-   has an effect that depends on the machine mode it is used for. */\n+   has an effect that depends on the machine mode it is used for.  */\n \n #define GO_IF_MODE_DEPENDENT_ADDRESS(ADDR,LABEL)\t{ }\n \f\n@@ -589,7 +589,7 @@ enum reg_class { NO_REGS, GENERAL_REGS,\n /* Define as C expression which evaluates to nonzero if the tablejump\n    instruction expects the table to contain offsets from the address of the\n    table.\n-   Do not define this if the table should contain absolute addresses. */\n+   Do not define this if the table should contain absolute addresses.  */\n /* #define CASE_VECTOR_PC_RELATIVE 1 */\n \n /* Specify the tree operation to be used to convert reals to integers.  */\n@@ -612,7 +612,7 @@ enum reg_class { NO_REGS, GENERAL_REGS,\n #define SLOW_BYTE_ACCESS 0\n \n /* Define this to be nonzero if shift instructions ignore all but the low-order\n-   few bits. */\n+   few bits.  */\n #define SHIFT_COUNT_TRUNCATED 1\n \n /* Value is 1 if truncating an integer of INPREC bits to OUTPREC bits\n@@ -697,7 +697,7 @@ enum reg_class { NO_REGS, GENERAL_REGS,\n /* Read-only data goes in the data section because\n    AT&T's assembler doesn't guarantee the proper alignment\n    of data in the text section even if an align statement\n-   is used. */\n+   is used.  */\n \n #define READONLY_DATA_SECTION() data_section()\n \n@@ -708,7 +708,7 @@ enum reg_class { NO_REGS, GENERAL_REGS,\n {\"r0\", \"r1\", \"r2\", \"r3\", \"r4\", \"r5\", \"r6\", \"r7\",\t\\\n  \"r8\", \"fp\", \"ap\", \"psw\", \"sp\", \"pcbp\", \"isp\", \"pc\"\t}\n \n-/* How to renumber registers for dbx and gdb. */\n+/* How to renumber registers for dbx and gdb.  */\n \n #define DBX_REGISTER_NUMBER(REGNO) (REGNO)\n \n@@ -732,7 +732,7 @@ enum reg_class { NO_REGS, GENERAL_REGS,\n     fputs (\"\\n\", FILE);\t\t\t\\\n   } while (0)\n \n-/* The prefix to add to user-visible assembler symbols. */\n+/* The prefix to add to user-visible assembler symbols.  */\n \n #define USER_LABEL_PREFIX \"\"\n \n@@ -843,7 +843,7 @@ do {\t\t\t\t\t\t\t\\\n #define ASM_OUTPUT_REG_POP(FILE,REGNO)\t\\\n   fprintf (FILE, \"\\tPOPW %s\\n\", reg_names[REGNO])\n \n-/* This is how to output an element of a case-vector that is absolute. */\n+/* This is how to output an element of a case-vector that is absolute.  */\n \n #define ASM_OUTPUT_ADDR_VEC_ELT(FILE, VALUE)  \\\n   fprintf (FILE, \"\\t.word .L%d\\n\", VALUE)\n@@ -921,7 +921,7 @@ do {\t\t\t\t\t\t\t\\\n \n /* Print operand X (an rtx) in assembler syntax to file FILE.\n    CODE is a letter or dot (`z' in `%z0') or 0 if no letter was specified.\n-   For `%' followed by punctuation, CODE is the punctuation and X is null. */\n+   For `%' followed by punctuation, CODE is the punctuation and X is null.  */\n \n #define PRINT_OPERAND_PUNCT_VALID_P(CODE) 0\n "}]}