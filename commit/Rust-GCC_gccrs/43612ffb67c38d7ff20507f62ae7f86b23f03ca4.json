{"sha": "43612ffb67c38d7ff20507f62ae7f86b23f03ca4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDM2MTJmZmI2N2MzOGQ3ZmYyMDUwN2Y2MmFlN2Y4NmIyM2YwM2NhNA==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.demon.co.uk", "date": "2002-05-18T08:23:20Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2002-05-18T08:23:20Z"}, "message": "cppinit.c (cpp_post_options): If preprocessed, turn off traditional.\n\n\t* cppinit.c (cpp_post_options): If preprocessed, turn off\n\ttraditional.  If traditional, turn off column numbers.\n\t* cpplib.c (cpp_push_buffer): Lex from stage 3 if traditional.\n\t* cpptrad.c (handle_newline): Update line_base.\n\t(skip_comment): Handle -Wcomment.\n\nFrom-SVN: r53582", "tree": {"sha": "8d676f8eb309246fd73a05fd979264ce2b405f0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d676f8eb309246fd73a05fd979264ce2b405f0e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/43612ffb67c38d7ff20507f62ae7f86b23f03ca4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43612ffb67c38d7ff20507f62ae7f86b23f03ca4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43612ffb67c38d7ff20507f62ae7f86b23f03ca4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43612ffb67c38d7ff20507f62ae7f86b23f03ca4/comments", "author": null, "committer": null, "parents": [{"sha": "c810846eb0ab7c2a6d614b0ec8b2a0905c3fd0ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c810846eb0ab7c2a6d614b0ec8b2a0905c3fd0ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c810846eb0ab7c2a6d614b0ec8b2a0905c3fd0ad"}], "stats": {"total": 61, "additions": 39, "deletions": 22}, "files": [{"sha": "cc5d35c496487d61d003a0dc200dde165640b942", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43612ffb67c38d7ff20507f62ae7f86b23f03ca4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43612ffb67c38d7ff20507f62ae7f86b23f03ca4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=43612ffb67c38d7ff20507f62ae7f86b23f03ca4", "patch": "@@ -1,3 +1,11 @@\n+2002-05-18  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* cppinit.c (cpp_post_options): If preprocessed, turn off\n+\ttraditional.  If traditional, turn off column numbers.\n+\t* cpplib.c (cpp_push_buffer): Lex from stage 3 if traditional.\n+\t* cpptrad.c (handle_newline): Update line_base.\n+\t(skip_comment): Handle -Wcomment.\n+\n 2002-05-17  Zack Weinberg  <zack@codesourcery.com>\n \n \t* cppinit.c (struct builtin): Remove unused fields."}, {"sha": "dad255aca8ce9d612d9bdc89236bef48160c5a4b", "filename": "gcc/cppinit.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43612ffb67c38d7ff20507f62ae7f86b23f03ca4/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43612ffb67c38d7ff20507f62ae7f86b23f03ca4/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=43612ffb67c38d7ff20507f62ae7f86b23f03ca4", "patch": "@@ -1774,9 +1774,16 @@ cpp_post_options (pfile)\n     CPP_OPTION (pfile, warn_traditional) = 0;\n \n   /* Permanently disable macro expansion if we are rescanning\n-     preprocessed text.  */\n+     preprocessed text.  Read preprocesed source in ISO mode.  */\n   if (CPP_OPTION (pfile, preprocessed))\n-    pfile->state.prevent_expansion = 1;\n+    {\n+      pfile->state.prevent_expansion = 1;\n+      CPP_OPTION (pfile, traditional) = 0;\n+    }\n+\n+  /* Traditional CPP does not accurately track column information.  */\n+  if (CPP_OPTION (pfile, traditional))\n+    CPP_OPTION (pfile, show_column) = 0;\n \n   /* -dM makes no normal output.  This is set here so that -dM -dD\n      works as expected.  */"}, {"sha": "f19d34e6df115f6c4f4aaebfbbd5f8b57c81ab36", "filename": "gcc/cpplib.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43612ffb67c38d7ff20507f62ae7f86b23f03ca4/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43612ffb67c38d7ff20507f62ae7f86b23f03ca4/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=43612ffb67c38d7ff20507f62ae7f86b23f03ca4", "patch": "@@ -1881,7 +1881,7 @@ cpp_push_buffer (pfile, buffer, len, from_stage3, return_at_eof)\n \n   new->line_base = new->buf = new->cur = buffer;\n   new->rlimit = buffer + len;\n-  new->from_stage3 = from_stage3;\n+  new->from_stage3 = from_stage3 || CPP_OPTION (pfile, traditional);\n   new->prev = pfile->buffer;\n   new->return_at_eof = return_at_eof;\n   new->saved_flags = BOL;"}, {"sha": "d5c2126a55ac1b49c3d62d94447b29c8fdad6e93", "filename": "gcc/cpptrad.c", "status": "modified", "additions": 21, "deletions": 19, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43612ffb67c38d7ff20507f62ae7f86b23f03ca4/gcc%2Fcpptrad.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43612ffb67c38d7ff20507f62ae7f86b23f03ca4/gcc%2Fcpptrad.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpptrad.c?ref=43612ffb67c38d7ff20507f62ae7f86b23f03ca4", "patch": "@@ -21,9 +21,9 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n #include \"cpplib.h\"\n #include \"cpphash.h\"\n \n-/* Lexing TODO: Handle -Wcomment, -C, maybe -CC, and space in escaped\n-   newlines.  Stop cpplex.c from recognizing comments, trigraphs and\n-   directives during its lexing pass.  */\n+/* Lexing TODO: Handle -C, maybe -CC, and space in escaped newlines.\n+   Stop cpplex.c from recognizing comments and directives during its\n+   lexing pass.  */\n \n static const uchar *handle_newline PARAMS ((cpp_reader *, const uchar *));\n static const uchar *skip_escaped_newlines PARAMS ((cpp_reader *,\n@@ -64,6 +64,7 @@ handle_newline (pfile, cur)\n   pfile->line++;\n   if (cur[0] + cur[1] == '\\r' + '\\n')\n     cur++;\n+  pfile->buffer->line_base = cur + 1;\n   return cur + 1;\n }\n \n@@ -89,30 +90,31 @@ skip_comment (pfile, cur)\n      const uchar *cur;\n {\n   unsigned int from_line = pfile->line;\n+  unsigned int c = 0, prevc;\n+  const uchar *limit = pfile->buffer->rlimit;\n \n-  for (;;)\n+  while (cur < limit)\n     {\n-      unsigned int c = *cur++;\n-      if (c == '*')\n+      prevc = c;\n+      c = *cur++;\n+\n+      if (c == '/')\n \t{\n-\t  cur = skip_escaped_newlines (pfile, cur);\n-\t  if (*cur == '/')\n-\t    {\n-\t      cur++;\n-\t      break;\n-\t    }\n+\t  if (prevc == '*')\n+\t    break;\n+\t  if (*cur == '*' && cur[1] != '/'\n+\t      && CPP_OPTION (pfile, warn_comments))\n+\t    cpp_error_with_line (pfile, DL_WARNING, pfile->line, 0,\n+\t\t\t\t \"\\\"/*\\\" within comment\");\n \t}\n       else if (is_vspace (c))\n \tcur = handle_newline (pfile, cur - 1);\n-      else if (c == '\\0' && cur - 1 == pfile->buffer->rlimit)\n-\t{\n-\t  cur--;\n-\t  cpp_error_with_line (pfile, DL_ERROR, from_line, 0,\n-\t\t\t       \"unterminated comment\");\n-\t  break;\n-\t}\n     }\n \n+  if (c != '/' || prevc != '*')\n+    cpp_error_with_line (pfile, DL_ERROR, from_line, 0,\n+\t\t\t \"unterminated comment\");\n+\n   return cur;\n }\n "}]}