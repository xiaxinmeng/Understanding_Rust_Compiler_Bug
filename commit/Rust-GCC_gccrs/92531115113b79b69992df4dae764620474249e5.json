{"sha": "92531115113b79b69992df4dae764620474249e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTI1MzExMTUxMTNiNzliNjk5OTJkZjRkYWU3NjQ2MjA0NzQyNDllNQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2018-12-02T18:31:44Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2018-12-02T18:31:44Z"}, "message": "h8300.md (call, call_value): Drop mode from operand containing number of bytes pushed.\n\n\t* config/h8300/h8300.md (call, call_value): Drop mode from\n\toperand containing number of bytes pushed.\n\t(call_insn, call_value_insn): Use mode iterator for number\n\tof bytes pushed operand.  Make pattern name vary appropriately.\n\nFrom-SVN: r266727", "tree": {"sha": "f7168034e03788d0b92df5a256b44c9ccb1d58bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f7168034e03788d0b92df5a256b44c9ccb1d58bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/92531115113b79b69992df4dae764620474249e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92531115113b79b69992df4dae764620474249e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92531115113b79b69992df4dae764620474249e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92531115113b79b69992df4dae764620474249e5/comments", "author": null, "committer": null, "parents": [{"sha": "3b131f6a86798c11093eee79b6069139efb92af9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b131f6a86798c11093eee79b6069139efb92af9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b131f6a86798c11093eee79b6069139efb92af9"}], "stats": {"total": 19, "additions": 13, "deletions": 6}, "files": [{"sha": "204a9fa27c0762d7554894fb3eadf4ad68360572", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92531115113b79b69992df4dae764620474249e5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92531115113b79b69992df4dae764620474249e5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=92531115113b79b69992df4dae764620474249e5", "patch": "@@ -1,3 +1,10 @@\n+2018-12-02  Jeff Law  <law@redhat.com>\n+\n+\t* config/h8300/h8300.md (call, call_value): Drop mode from \n+\toperand containing number of bytes pushed.\n+\t(call_insn, call_value_insn): Use mode iterator for number\n+\tof bytes pushed operand.  Make pattern name vary appropriately.\n+\n 2018-12-02  Jan Hubicka  <jh@suse.cz>\n \n \t* bb-reorer.c (find_rarely_executed_basic_blocks_and_crossin_edges):"}, {"sha": "b3ba7e0f7190ccc519399ed69ca142327cc3e8c6", "filename": "gcc/config/h8300/h8300.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92531115113b79b69992df4dae764620474249e5/gcc%2Fconfig%2Fh8300%2Fh8300.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92531115113b79b69992df4dae764620474249e5/gcc%2Fconfig%2Fh8300%2Fh8300.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.md?ref=92531115113b79b69992df4dae764620474249e5", "patch": "@@ -2066,17 +2066,17 @@\n \n (define_expand \"call\"\n   [(call (match_operand:QI 0 \"call_expander_operand\" \"\")\n-\t (match_operand:HI 1 \"general_operand\" \"\"))]\n+\t (match_operand 1 \"general_operand\" \"\"))]\n   \"\"\n   {\n     if (!register_operand (XEXP (operands[0], 0), Pmode)\n \t&& GET_CODE (XEXP (operands[0], 0)) != SYMBOL_REF)\n       XEXP (operands[0], 0) = force_reg (Pmode, XEXP (operands[0], 0));\n   })\n \n-(define_insn \"call_insn\"\n+(define_insn \"call_insn_<mode>\"\n   [(call (mem:QI (match_operand 0 \"call_insn_operand\" \"Cr\"))\n-\t         (match_operand:HI 1 \"general_operand\" \"g\"))]\n+\t         (match_operand:P 1 \"general_operand\" \"g\"))]\n   \"\"\n {\n   rtx xoperands[1];\n@@ -2103,18 +2103,18 @@\n (define_expand \"call_value\"\n   [(set (match_operand 0 \"\" \"\")\n \t(call (match_operand:QI 1 \"call_expander_operand\" \"\")\n-\t      (match_operand:HI 2 \"general_operand\" \"\")))]\n+\t      (match_operand 2 \"general_operand\" \"\")))]\n   \"\"\n   {\n     if (!register_operand (XEXP (operands[1], 0), Pmode)\n \t&& GET_CODE (XEXP (operands[1], 0)) != SYMBOL_REF)\n       XEXP (operands[1], 0) = force_reg (Pmode, XEXP (operands[1], 0));\n   })\n \n-(define_insn \"call_value_insn\"\n+(define_insn \"call_value_insn_<mode>\"\n   [(set (match_operand 0 \"\" \"=r\")\n \t(call (mem:QI (match_operand 1 \"call_insn_operand\" \"Cr\"))\n-\t\t      (match_operand:HI 2 \"general_operand\" \"g\")))]\n+\t\t      (match_operand:P 2 \"general_operand\" \"g\")))]\n   \"\"\n {\n   rtx xoperands[2];"}]}