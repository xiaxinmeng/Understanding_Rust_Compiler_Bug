{"sha": "03d937fcebea686f9d4f456daa0f8251e0de67c8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDNkOTM3ZmNlYmVhNjg2ZjlkNGY0NTZkYWEwZjgyNTFlMGRlNjdjOA==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "amylaar@cygnus.co.uk", "date": "1998-12-08T14:35:18Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "1998-12-08T14:35:18Z"}, "message": "explow.c (plus_constant_wide): Don't immediately return with result of recursive call.\n\n\t* explow.c (plus_constant_wide): Don't immediately return with\n\tresult of recursive call.\n\nFrom-SVN: r24195", "tree": {"sha": "222aae21b16e1511fec6ca321219f63b15782abf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/222aae21b16e1511fec6ca321219f63b15782abf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/03d937fcebea686f9d4f456daa0f8251e0de67c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03d937fcebea686f9d4f456daa0f8251e0de67c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03d937fcebea686f9d4f456daa0f8251e0de67c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03d937fcebea686f9d4f456daa0f8251e0de67c8/comments", "author": null, "committer": null, "parents": [{"sha": "e6cfb550ab17484da95c0a3e94773fa42dccd27c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6cfb550ab17484da95c0a3e94773fa42dccd27c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6cfb550ab17484da95c0a3e94773fa42dccd27c"}], "stats": {"total": 36, "additions": 27, "deletions": 9}, "files": [{"sha": "6719ac7c69f193d7a703ce412b53f511c5124320", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03d937fcebea686f9d4f456daa0f8251e0de67c8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03d937fcebea686f9d4f456daa0f8251e0de67c8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=03d937fcebea686f9d4f456daa0f8251e0de67c8", "patch": "@@ -1,3 +1,8 @@\n+Tue Dec  8 22:33:18 1998  J\"orn Rennecke <amylaar@cygnus.co.uk>\n+\n+\t* explow.c (plus_constant_wide): Don't immediately return with\n+\tresult of recursive call.\n+\n Tue Dec  8 15:32:56 EST 1998  Andrew MacLeod  <amacleod@cygnus.com>\n \n \t* eh-common.h (struct eh_context): Add table_index for rethrows."}, {"sha": "c11ec9130b8b7479bb77b7dadfd9b4bab000aa2c", "filename": "gcc/explow.c", "status": "modified", "additions": 22, "deletions": 9, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03d937fcebea686f9d4f456daa0f8251e0de67c8/gcc%2Fexplow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03d937fcebea686f9d4f456daa0f8251e0de67c8/gcc%2Fexplow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexplow.c?ref=03d937fcebea686f9d4f456daa0f8251e0de67c8", "patch": "@@ -116,19 +116,32 @@ plus_constant_wide (x, c)\n \t integer.  For a constant term that is not an explicit integer,\n \t we cannot really combine, but group them together anyway.  \n \n-\t Use a recursive call in case the remaining operand is something\n-\t that we handle specially, such as a SYMBOL_REF.  */\n+\t Restart or use a recursive call in case the remaining operand is\n+\t something that we handle specially, such as a SYMBOL_REF.\n+\n+\t We may not immediately return from the recursive call here, lest\n+\t all_constant gets lost.  */\n \n       if (GET_CODE (XEXP (x, 1)) == CONST_INT)\n-\treturn plus_constant (XEXP (x, 0), c + INTVAL (XEXP (x, 1)));\n+\t{\n+\t  c += INTVAL (XEXP (x, 1));\n+\t  x = XEXP (x, 0);\n+\t  goto restart;\n+\t}\n       else if (CONSTANT_P (XEXP (x, 0)))\n-\treturn gen_rtx_PLUS (mode,\n-\t\t\t     plus_constant (XEXP (x, 0), c),\n-\t\t\t     XEXP (x, 1));\n+\t{\n+\t  x = gen_rtx_PLUS (mode,\n+\t\t\t    plus_constant (XEXP (x, 0), c),\n+\t\t\t    XEXP (x, 1));\n+\t  c = 0;\n+\t}\n       else if (CONSTANT_P (XEXP (x, 1)))\n-\treturn gen_rtx_PLUS (mode,\n-\t\t\t     XEXP (x, 0),\n-\t\t\t     plus_constant (XEXP (x, 1), c));\n+\t{\n+\t  x = gen_rtx_PLUS (mode,\n+\t\t\t    XEXP (x, 0),\n+\t\t\t    plus_constant (XEXP (x, 1), c));\n+\t  c = 0;\n+\t}\n       break;\n       \n     default:"}]}