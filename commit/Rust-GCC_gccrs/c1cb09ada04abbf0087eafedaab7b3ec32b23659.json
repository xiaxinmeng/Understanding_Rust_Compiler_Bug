{"sha": "c1cb09ada04abbf0087eafedaab7b3ec32b23659", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzFjYjA5YWRhMDRhYmJmMDA4N2VhZmVkYWFiN2IzZWMzMmIyMzY1OQ==", "commit": {"author": {"name": "Adam Nemet", "email": "anemet@caviumnetworks.com", "date": "2009-01-16T18:56:47Z"}, "committer": {"name": "Adam Nemet", "email": "nemet@gcc.gnu.org", "date": "2009-01-16T18:56:47Z"}, "message": "re PR target/38554 (ICE when compiling pamfunc.c in netpbm with -O1 enabled)\n\n\tPR target/38554\n\t* expmed.c (expand_shift): With SHIFT_COUNT_TRUNCATED, don't lift\n\tthe subreg from a lowpart subreg if it is also casting the value.\n\ntestsuite/\n\tPR target/38554\n\t* gcc.c-torture/compile/pr38554.c: New test.\n\nFrom-SVN: r143440", "tree": {"sha": "d4ea4ae380071612d851ae5d3fd829977e11de0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d4ea4ae380071612d851ae5d3fd829977e11de0a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c1cb09ada04abbf0087eafedaab7b3ec32b23659", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1cb09ada04abbf0087eafedaab7b3ec32b23659", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1cb09ada04abbf0087eafedaab7b3ec32b23659", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1cb09ada04abbf0087eafedaab7b3ec32b23659/comments", "author": null, "committer": null, "parents": [{"sha": "1ceb2263cf6a4e682709c2a8eb38b348943e99dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ceb2263cf6a4e682709c2a8eb38b348943e99dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ceb2263cf6a4e682709c2a8eb38b348943e99dd"}], "stats": {"total": 59, "additions": 58, "deletions": 1}, "files": [{"sha": "3c2457d84e611d405e45e570e517148b9bd016e6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1cb09ada04abbf0087eafedaab7b3ec32b23659/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1cb09ada04abbf0087eafedaab7b3ec32b23659/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c1cb09ada04abbf0087eafedaab7b3ec32b23659", "patch": "@@ -1,3 +1,9 @@\n+2009-01-16  Adam Nemet  <anemet@caviumnetworks.com>\n+\n+\tPR target/38554\n+\t* expmed.c (expand_shift): With SHIFT_COUNT_TRUNCATED, don't lift\n+\tthe subreg from a lowpart subreg if it is also casting the value.\n+\n 2009-01-16  Sebastian Pop  <sebastian.pop@amd.com>\n \t    Tobias Grosser  <tobi.grosser@amd.com>\n "}, {"sha": "da0db3b834732264c5df579a0ec4228bd1ee414d", "filename": "gcc/expmed.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1cb09ada04abbf0087eafedaab7b3ec32b23659/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1cb09ada04abbf0087eafedaab7b3ec32b23659/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=c1cb09ada04abbf0087eafedaab7b3ec32b23659", "patch": "@@ -2136,7 +2136,8 @@ expand_shift (enum tree_code code, enum machine_mode mode, rtx shifted,\n \top1 = GEN_INT ((unsigned HOST_WIDE_INT) INTVAL (op1)\n \t\t       % GET_MODE_BITSIZE (mode));\n       else if (GET_CODE (op1) == SUBREG\n-\t       && subreg_lowpart_p (op1))\n+\t       && subreg_lowpart_p (op1)\n+\t       && INTEGRAL_MODE_P (GET_MODE (SUBREG_REG (op1))))\n \top1 = SUBREG_REG (op1);\n     }\n "}, {"sha": "4a41a218ab172ec746f4fe5d6464ce31daa8a273", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1cb09ada04abbf0087eafedaab7b3ec32b23659/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1cb09ada04abbf0087eafedaab7b3ec32b23659/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c1cb09ada04abbf0087eafedaab7b3ec32b23659", "patch": "@@ -1,3 +1,8 @@\n+2009-01-16  Adam Nemet  <anemet@caviumnetworks.com>\n+\n+\tPR target/38554\n+\t* gcc.c-torture/compile/pr38554.c: New test.\n+\n 2009-01-16  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/38579"}, {"sha": "7d40a223be0cfc44b86ff749d1c18d0ea63df2b3", "filename": "gcc/testsuite/gcc.c-torture/compile/pr38554.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1cb09ada04abbf0087eafedaab7b3ec32b23659/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr38554.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1cb09ada04abbf0087eafedaab7b3ec32b23659/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr38554.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr38554.c?ref=c1cb09ada04abbf0087eafedaab7b3ec32b23659", "patch": "@@ -0,0 +1,45 @@\n+typedef unsigned long sample;\n+struct pam\n+{\n+  sample maxval;\n+};\n+typedef sample *tuple;\n+enum function\n+  {\n+    FN_MULTIPLY, FN_DIVIDE, FN_ADD, FN_SUBTRACT, FN_MIN, FN_MAX, FN_AND, FN_OR,\n+    FN_XOR, FN_NOT, FN_SHIFTLEFT, FN_SHIFTRIGHT\n+  };\n+struct cmdlineInfo\n+{\n+  enum function function;\n+  union\n+  {\n+    float divisor;\n+    unsigned int shiftCount;\n+  }\n+    u;\n+};\n+applyFunction (struct cmdlineInfo const cmdline, struct pam const inpam,\n+               struct pam const outpam, tuple * const inputRow,\n+               tuple * const outputRow)\n+{\n+  float const oneOverDivisor = 1 / cmdline.u.divisor;\n+  int col;\n+  {\n+    int plane;\n+    {\n+      sample const inSample = inputRow[col][plane];\n+      sample outSample;\n+      switch (cmdline.function)\n+        {\n+        case FN_DIVIDE:\n+          outSample = ((unsigned int) ((inSample * oneOverDivisor) + 0.5));\n+          break;\n+        case FN_SHIFTLEFT:\n+          outSample = (inSample << cmdline.u.shiftCount) & outpam.maxval;\n+        }\n+      outputRow[col][plane] =\n+        ((outpam.maxval) < (outSample) ? (outpam.maxval) : (outSample));\n+    }\n+  }\n+}"}]}