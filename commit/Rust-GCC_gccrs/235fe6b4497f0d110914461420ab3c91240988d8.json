{"sha": "235fe6b4497f0d110914461420ab3c91240988d8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjM1ZmU2YjQ0OTdmMGQxMTA5MTQ0NjE0MjBhYjNjOTEyNDA5ODhkOA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-05-24T20:26:47Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-05-24T20:26:47Z"}, "message": "re PR c++/48884 (decltype's operand doesn't consider friend declaration)\n\n\tPR c++/48884\n\t* class.c (pushclass): Accept NULL argument.\n\t(popclass): Deal with popping null class.\n\t* pt.c (push_access_scope, pop_access_scope): Use them rather than\n\tpush_to_top_level/pop_from_top_level.\n\t(push_deduction_access_scope, pop_defarg_context): New.\n\t(fn_type_unification): Use them.\n\t* name-lookup.c (lookup_name_real_1): Check current_class_type.\n\nFrom-SVN: r174139", "tree": {"sha": "9f67e894c2b9a4561659d96cfd45d31db665c22f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9f67e894c2b9a4561659d96cfd45d31db665c22f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/235fe6b4497f0d110914461420ab3c91240988d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/235fe6b4497f0d110914461420ab3c91240988d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/235fe6b4497f0d110914461420ab3c91240988d8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/235fe6b4497f0d110914461420ab3c91240988d8/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "78be79d534fbcf2799c2c4e0b2c768134c9990d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78be79d534fbcf2799c2c4e0b2c768134c9990d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78be79d534fbcf2799c2c4e0b2c768134c9990d4"}], "stats": {"total": 111, "additions": 104, "deletions": 7}, "files": [{"sha": "c011c83959d8845ff3ec93599ef3898d3281659b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/235fe6b4497f0d110914461420ab3c91240988d8/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/235fe6b4497f0d110914461420ab3c91240988d8/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=235fe6b4497f0d110914461420ab3c91240988d8", "patch": "@@ -1,3 +1,14 @@\n+2011-05-24  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/48884\n+\t* class.c (pushclass): Accept NULL argument.\n+\t(popclass): Deal with popping null class.\n+\t* pt.c (push_access_scope, pop_access_scope): Use them rather than\n+\tpush_to_top_level/pop_from_top_level.\n+\t(push_deduction_access_scope, pop_defarg_context): New.\n+\t(fn_type_unification): Use them.\n+\t* name-lookup.c (lookup_name_real_1): Check current_class_type.\n+\n 2011-05-24  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* decl.c (grokdeclarator): Use current_class_name."}, {"sha": "69627cb6cb5bd9b0547ad278c2536e5bd0bbadb0", "filename": "gcc/cp/class.c", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/235fe6b4497f0d110914461420ab3c91240988d8/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/235fe6b4497f0d110914461420ab3c91240988d8/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=235fe6b4497f0d110914461420ab3c91240988d8", "patch": "@@ -6082,6 +6082,9 @@ restore_class_cache (void)\n    So that we may avoid calls to lookup_name, we cache the _TYPE\n    nodes of local TYPE_DECLs in the TREE_TYPE field of the name.\n \n+   For use by push_access_scope, we allow TYPE to be null to temporarily\n+   push out of class scope.  This does not actually change binding levels.\n+\n    For multiple inheritance, we perform a two-pass depth-first search\n    of the type lattice.  */\n \n@@ -6090,8 +6093,6 @@ pushclass (tree type)\n {\n   class_stack_node_t csn;\n \n-  type = TYPE_MAIN_VARIANT (type);\n-\n   /* Make sure there is enough room for the new entry on the stack.  */\n   if (current_class_depth + 1 >= current_class_stack_size)\n     {\n@@ -6110,6 +6111,15 @@ pushclass (tree type)\n   csn->hidden = 0;\n   current_class_depth++;\n \n+  if (type == NULL_TREE)\n+    {\n+      current_class_name = current_class_type = NULL_TREE;\n+      csn->hidden = true;\n+      return;\n+    }\n+\n+  type = TYPE_MAIN_VARIANT (type);\n+\n   /* Now set up the new type.  */\n   current_class_name = TYPE_NAME (type);\n   if (TREE_CODE (current_class_name) == TYPE_DECL)\n@@ -6154,7 +6164,11 @@ invalidate_class_lookup_cache (void)\n void\n popclass (void)\n {\n-  poplevel_class ();\n+  if (current_class_type)\n+    poplevel_class ();\n+  else\n+    gcc_assert (current_class_depth\n+\t\t&& current_class_stack[current_class_depth - 1].hidden);\n \n   current_class_depth--;\n   current_class_name = current_class_stack[current_class_depth].name;"}, {"sha": "bb6d4b934725d36cd2970ce08c1204556bee5fa6", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/235fe6b4497f0d110914461420ab3c91240988d8/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/235fe6b4497f0d110914461420ab3c91240988d8/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=235fe6b4497f0d110914461420ab3c91240988d8", "patch": "@@ -4469,7 +4469,7 @@ lookup_name_real_1 (tree name, int prefer_type, int nonclass, bool block_p,\n   /* Conversion operators are handled specially because ordinary\n      unqualified name lookup will not find template conversion\n      operators.  */\n-  if (IDENTIFIER_TYPENAME_P (name))\n+  if (IDENTIFIER_TYPENAME_P (name) && current_class_type)\n     {\n       struct cp_binding_level *level;\n "}, {"sha": "98844c37017ccd1bfb1683a2b8df9ce674feb457", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 32, "deletions": 3, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/235fe6b4497f0d110914461420ab3c91240988d8/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/235fe6b4497f0d110914461420ab3c91240988d8/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=235fe6b4497f0d110914461420ab3c91240988d8", "patch": "@@ -212,7 +212,7 @@ push_access_scope (tree t)\n   else if (DECL_CLASS_SCOPE_P (t))\n     push_nested_class (DECL_CONTEXT (t));\n   else\n-    push_to_top_level ();\n+    pushclass (NULL_TREE);\n \n   if (TREE_CODE (t) == FUNCTION_DECL)\n     {\n@@ -237,7 +237,7 @@ pop_access_scope (tree t)\n   if (DECL_FRIEND_CONTEXT (t) || DECL_CLASS_SCOPE_P (t))\n     pop_nested_class ();\n   else\n-    pop_from_top_level ();\n+    popclass ();\n }\n \n /* Do any processing required when DECL (a member template\n@@ -13820,6 +13820,30 @@ instantiate_template (tree tmpl, tree orig_args, tsubst_flags_t complain)\n   return ret;\n }\n \n+/* We're going to do deduction substitution on the type of TMPL, a function\n+   template.  In C++11 mode, push into that access scope.  In C++03 mode,\n+   disable access checking.  */\n+\n+static void\n+push_deduction_access_scope (tree tmpl)\n+{\n+  if (cxx_dialect >= cxx0x)\n+    push_access_scope (DECL_TEMPLATE_RESULT (tmpl));\n+  else\n+    push_deferring_access_checks (dk_no_check);\n+}\n+\n+/* And pop back out.  */\n+\n+static void\n+pop_deduction_access_scope (tree tmpl)\n+{\n+  if (cxx_dialect >= cxx0x)\n+    pop_access_scope (DECL_TEMPLATE_RESULT (tmpl));\n+  else\n+    pop_deferring_access_checks ();\n+}\n+\n /* The FN is a TEMPLATE_DECL for a function.  ARGS is an array with\n    NARGS elements of the arguments that are being used when calling\n    it.  TARGS is a vector into which the deduced template arguments\n@@ -13958,7 +13982,9 @@ fn_type_unification (tree fn,\n         incomplete = NUM_TMPL_ARGS (explicit_targs) != NUM_TMPL_ARGS (targs);\n \n       processing_template_decl += incomplete;\n+      push_deduction_access_scope (fn);\n       fntype = deduction_tsubst_fntype (fn, converted_args);\n+      pop_deduction_access_scope (fn);\n       processing_template_decl -= incomplete;\n \n       if (fntype == error_mark_node)\n@@ -14029,7 +14055,10 @@ fn_type_unification (tree fn,\n        substitution results in an invalid type, as described above,\n        type deduction fails.  */\n     {\n-      tree substed = deduction_tsubst_fntype (fn, targs);\n+      tree substed;\n+      push_deduction_access_scope (fn);\n+      substed = deduction_tsubst_fntype (fn, targs);\n+      pop_deduction_access_scope (fn);\n       if (substed == error_mark_node)\n \treturn 1;\n "}, {"sha": "95ee33e39c394ac489ea72f5d6b788998cfd3082", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/235fe6b4497f0d110914461420ab3c91240988d8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/235fe6b4497f0d110914461420ab3c91240988d8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=235fe6b4497f0d110914461420ab3c91240988d8", "patch": "@@ -1,3 +1,8 @@\n+2011-05-24  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/template/access21.C: New.\n+\t* g++.dg/template/access22.C: New.\n+\n 2011-05-24  Michael Matz  <matz@gcc.gnu.org>\n \n \tPR rtl-optimization/48633"}, {"sha": "8414c4371f4f9b97ef91c3890f47c9695e6997ba", "filename": "gcc/testsuite/g++.dg/template/access21.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/235fe6b4497f0d110914461420ab3c91240988d8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Faccess21.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/235fe6b4497f0d110914461420ab3c91240988d8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Faccess21.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Faccess21.C?ref=235fe6b4497f0d110914461420ab3c91240988d8", "patch": "@@ -0,0 +1,23 @@\n+// PR c++/48884\n+\n+class X\n+{\n+  static const int I = 42;\n+  friend struct Y;\n+};\n+\n+template <int I> struct A { };\n+\n+struct Y\n+{\n+  template <typename T>\n+  static A<T::I> f(T t)\n+  {\n+    return A<T::I>();\n+  }\n+};\n+\n+int main()\n+{\n+  Y::f(X());\n+}"}, {"sha": "9ee28a2a08d3241a6950e5e42d0af9bd4527558c", "filename": "gcc/testsuite/g++.dg/template/access22.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/235fe6b4497f0d110914461420ab3c91240988d8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Faccess22.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/235fe6b4497f0d110914461420ab3c91240988d8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Faccess22.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Faccess22.C?ref=235fe6b4497f0d110914461420ab3c91240988d8", "patch": "@@ -0,0 +1,15 @@\n+template <int I> struct B { };\n+\n+template <class T>\n+B<T::I> f();\n+\n+class A\n+{\n+  static const int I = 42;\n+  template <class T> friend B<T::I> f();\n+};\n+\n+int main()\n+{\n+  f<A>();\n+}"}]}