{"sha": "05223046d5ea16a6a21a0324fbd369a43db9ee8b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDUyMjMwNDZkNWVhMTZhNmEyMWEwMzI0ZmJkMzY5YTQzZGI5ZWU4Yg==", "commit": {"author": {"name": "Revital Eres", "email": "eres@il.ibm.com", "date": "2007-10-10T09:48:18Z"}, "committer": {"name": "Revital Eres", "email": "revitale@gcc.gnu.org", "date": "2007-10-10T09:48:18Z"}, "message": "SMS: Add dump info\n\nFrom-SVN: r129200", "tree": {"sha": "e5225debf1cee9e9901e08b172e9ba681129d760", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e5225debf1cee9e9901e08b172e9ba681129d760"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/05223046d5ea16a6a21a0324fbd369a43db9ee8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05223046d5ea16a6a21a0324fbd369a43db9ee8b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05223046d5ea16a6a21a0324fbd369a43db9ee8b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05223046d5ea16a6a21a0324fbd369a43db9ee8b/comments", "author": {"login": "revit13", "id": 16211463, "node_id": "MDQ6VXNlcjE2MjExNDYz", "avatar_url": "https://avatars.githubusercontent.com/u/16211463?v=4", "gravatar_id": "", "url": "https://api.github.com/users/revit13", "html_url": "https://github.com/revit13", "followers_url": "https://api.github.com/users/revit13/followers", "following_url": "https://api.github.com/users/revit13/following{/other_user}", "gists_url": "https://api.github.com/users/revit13/gists{/gist_id}", "starred_url": "https://api.github.com/users/revit13/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/revit13/subscriptions", "organizations_url": "https://api.github.com/users/revit13/orgs", "repos_url": "https://api.github.com/users/revit13/repos", "events_url": "https://api.github.com/users/revit13/events{/privacy}", "received_events_url": "https://api.github.com/users/revit13/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e14e932bbb0a5b7d09f51233a1c64a64d945f677", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e14e932bbb0a5b7d09f51233a1c64a64d945f677", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e14e932bbb0a5b7d09f51233a1c64a64d945f677"}], "stats": {"total": 81, "additions": 68, "deletions": 13}, "files": [{"sha": "9e40190352f03119a5480215c4d91d2a02debf2b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05223046d5ea16a6a21a0324fbd369a43db9ee8b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05223046d5ea16a6a21a0324fbd369a43db9ee8b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=05223046d5ea16a6a21a0324fbd369a43db9ee8b", "patch": "@@ -1,3 +1,10 @@\n+2007-10-10  Revital Eres  <eres@il.ibm.com>\n+\n+\t* modulo-sched.c (check_nodes_order): Dump the final order of\n+\tthe nodes.\n+\t(get_sched_window): Add dump info.\n+\t(calculate_order_params): Dump order params of the nodes.\n+\n 2007-10-09  Kenneth Zadeck <zadeck@naturalbridge.com>\n \n \tPR middle-end/33669"}, {"sha": "5325b5ec7a25efe5e2f29be24e21dea8ccb2ea85", "filename": "gcc/modulo-sched.c", "status": "modified", "additions": 61, "deletions": 13, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05223046d5ea16a6a21a0324fbd369a43db9ee8b/gcc%2Fmodulo-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05223046d5ea16a6a21a0324fbd369a43db9ee8b/gcc%2Fmodulo-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmodulo-sched.c?ref=05223046d5ea16a6a21a0324fbd369a43db9ee8b", "patch": "@@ -1331,21 +1331,27 @@ get_sched_window (partial_schedule_ptr ps, int *nodes_order, int i,\n               print_ddg_edge (dump_file, e);\n \t      fprintf (dump_file,\n \t\t       \"\\nScheduling %d (%d) in psp_not_empty,\"\n-\t\t       \" checking node %d (%d): \", u_node->cuid,\n+\t\t       \" checking p %d (%d): \", u_node->cuid,\n \t\t       INSN_UID (u_node->insn), v_node->cuid, INSN_UID\n \t\t       (v_node->insn));\n             }\n \n \t  if (TEST_BIT (sched_nodes, v_node->cuid))\n \t    {\n-\t      int node_st = SCHED_TIME (v_node)\n-\t      \t\t    + e->latency - (e->distance * ii);\n+              int p_st = SCHED_TIME (v_node);\n \n-\t      early_start = MAX (early_start, node_st);\n+              early_start =\n+                MAX (early_start, p_st + e->latency - (e->distance * ii));\n+\n+              if (dump_file)\n+                fprintf (dump_file, \"pred st = %d; early_start = %d; \", p_st,\n+                         early_start);\n \n \t      if (e->data_type == MEM_DEP)\n \t\tend = MIN (end, SCHED_TIME (v_node) + ii - 1);\n \t    }\n+         else if (dump_file)\n+            fprintf (dump_file, \"the node is not scheduled\\n\");\n \t}\n       start = early_start;\n       end = MIN (end, early_start + ii);\n@@ -1372,18 +1378,21 @@ get_sched_window (partial_schedule_ptr ps, int *nodes_order, int i,\n               print_ddg_edge (dump_file, e);\n               fprintf (dump_file,\n                        \"\\nScheduling %d (%d) in pss_not_empty,\"\n-                       \" checking node %d (%d): \", u_node->cuid,\n+                       \" checking s %d (%d): \", u_node->cuid,\n                        INSN_UID (u_node->insn), v_node->cuid, INSN_UID\n                        (v_node->insn));\n             }\n \n \t  if (TEST_BIT (sched_nodes, v_node->cuid))\n \t    {\n-\t      late_start = MIN (late_start,\n-\t\t\t\tSCHED_TIME (v_node) - e->latency\n-\t\t\t\t+ (e->distance * ii));\n-               if (dump_file)\n-                 fprintf (dump_file, \"late_start = %d;\", late_start);\n+              int s_st = SCHED_TIME (v_node);\n+\n+              late_start = MIN (late_start,\n+                                s_st - e->latency + (e->distance * ii));\n+\n+              if (dump_file)\n+                fprintf (dump_file, \"succ st = %d; late_start = %d;\", s_st,\n+                         late_start);\n \n \t      if (e->data_type == MEM_DEP)\n \t\tend = MAX (end, SCHED_TIME (v_node) - ii + 1);\n@@ -1430,12 +1439,22 @@ get_sched_window (partial_schedule_ptr ps, int *nodes_order, int i,\n \n \t  if (TEST_BIT (sched_nodes, v_node->cuid))\n \t    {\n+              int p_st = SCHED_TIME (v_node);\n+\n \t      early_start = MAX (early_start,\n-\t\t\t\t SCHED_TIME (v_node) + e->latency\n+\t\t\t\t p_st + e->latency\n \t\t\t\t - (e->distance * ii));\n+\n+              if (dump_file)\n+                fprintf (dump_file, \"pred st = %d; early_start = %d;\", p_st,\n+                         early_start);\n+\n \t      if (e->data_type == MEM_DEP)\n \t\tend = MIN (end, SCHED_TIME (v_node) + ii - 1);\n \t    }\n+          else if (dump_file)\n+            fprintf (dump_file, \"the node is not scheduled\\n\");\n+\n \t}\n       for (e = u_node->out; e != 0; e = e->next_out)\n \t{\n@@ -1454,12 +1473,22 @@ get_sched_window (partial_schedule_ptr ps, int *nodes_order, int i,\n \n \t  if (TEST_BIT (sched_nodes, v_node->cuid))\n \t    {\n+              int s_st = SCHED_TIME (v_node);\n+\n \t      late_start = MIN (late_start,\n-\t\t\t\tSCHED_TIME (v_node) - e->latency\n+\t\t\t\ts_st - e->latency\n \t\t\t\t+ (e->distance * ii));\n+\n+               if (dump_file)\n+                 fprintf (dump_file, \"succ st = %d; late_start = %d;\", s_st,\n+                          late_start);\n+\n \t      if (e->data_type == MEM_DEP)\n \t\tstart = MAX (start, SCHED_TIME (v_node) - ii + 1);\n \t    }\n+          else if (dump_file)\n+            fprintf (dump_file, \"the node is not scheduled\\n\");\n+\n \t}\n       start = MAX (start, early_start);\n       end = MIN (end, MIN (early_start + ii, late_start + 1));\n@@ -1845,15 +1874,23 @@ check_nodes_order (int *node_order, int num_nodes)\n \n   sbitmap_zero (tmp);\n \n+  if (dump_file)\n+    fprintf (dump_file, \"SMS final nodes order: \\n\");\n+\n   for (i = 0; i < num_nodes; i++)\n     {\n       int u = node_order[i];\n \n+      if (dump_file)\n+        fprintf (dump_file, \"%d \", u);\n       gcc_assert (u < num_nodes && u >= 0 && !TEST_BIT (tmp, u));\n \n       SET_BIT (tmp, u);\n     }\n-\n+ \n+  if (dump_file)\n+    fprintf (dump_file, \"\\n\");\n+ \n   sbitmap_free (tmp);\n }\n \n@@ -1993,6 +2030,17 @@ calculate_order_params (ddg_ptr g, int mii ATTRIBUTE_UNUSED)\n \t\t\t\t   HEIGHT (e->dest) + e->latency);\n \t  }\n     }\n+  if (dump_file)\n+  {\n+    fprintf (dump_file, \"\\nOrder params\\n\");\n+    for (u = 0; u < num_nodes; u++)\n+      {\n+        ddg_node_ptr u_node = &g->nodes[u];\n+\n+        fprintf (dump_file, \"node %d, ASAP: %d, ALAP: %d, HEIGHT: %d\\n\", u,\n+                 ASAP (u_node), ALAP (u_node), HEIGHT (u_node));\n+      }\n+  }\n \n   return node_order_params_arr;\n }"}]}