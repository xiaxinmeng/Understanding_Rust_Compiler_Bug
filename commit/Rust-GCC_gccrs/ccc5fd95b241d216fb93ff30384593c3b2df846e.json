{"sha": "ccc5fd95b241d216fb93ff30384593c3b2df846e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2NjNWZkOTViMjQxZDIxNmZiOTNmZjMwMzg0NTkzYzNiMmRmODQ2ZQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@freesoft.cz", "date": "1999-10-15T05:46:35Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-10-15T05:46:35Z"}, "message": "fold-const.c (fold): Convert (or (not arg0) (not arg1)) to (not (and (arg0) (arg1))).\n\n        * fold-const.c (fold): Convert (or (not arg0) (not arg1))\n        to (not (and (arg0) (arg1))). Similary for and.\n\nFrom-SVN: r30001", "tree": {"sha": "9de0a736cbc85624d4b101760b56c60be85135f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9de0a736cbc85624d4b101760b56c60be85135f5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ccc5fd95b241d216fb93ff30384593c3b2df846e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccc5fd95b241d216fb93ff30384593c3b2df846e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ccc5fd95b241d216fb93ff30384593c3b2df846e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccc5fd95b241d216fb93ff30384593c3b2df846e/comments", "author": null, "committer": null, "parents": [{"sha": "f959ff1a09bb1ef2580f6ab1862cf1248a0639cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f959ff1a09bb1ef2580f6ab1862cf1248a0639cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f959ff1a09bb1ef2580f6ab1862cf1248a0639cd"}], "stats": {"total": 34, "additions": 34, "deletions": 0}, "files": [{"sha": "cda319df39812a7affeac3a1bd3eea64f34c41a4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccc5fd95b241d216fb93ff30384593c3b2df846e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccc5fd95b241d216fb93ff30384593c3b2df846e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ccc5fd95b241d216fb93ff30384593c3b2df846e", "patch": "@@ -9,6 +9,9 @@ Thu Oct 14 22:14:23 1999  Richard Henderson  <rth@cygnus.com>\n \n Thu Oct 14 19:44:08 1999  Jan Hubicka  <hubicka@freesoft.cz>\n \n+\t* fold-const.c (fold): Convert (or (not arg0) (not arg1))\n+\tto (not (and (arg0) (arg1))). Similary for and.\n+\n \t* fold-const.c (fold): Move bit_rotate code to the EXPR_PLUS case,\n \tfalltrought to assocate code.\n \tConvert XOR to OR in code like (a&c1)^(a&c2) where c1 and c2 don't have"}, {"sha": "f055d23a13da9bbfc7e7940ae2c1ab32408e669c", "filename": "gcc/fold-const.c", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccc5fd95b241d216fb93ff30384593c3b2df846e/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccc5fd95b241d216fb93ff30384593c3b2df846e/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=ccc5fd95b241d216fb93ff30384593c3b2df846e", "patch": "@@ -5183,6 +5183,21 @@ fold (expr)\n       if (t1 != NULL_TREE)\n \treturn t1;\n \n+      /* Convert (or (not arg0) (not arg1)) to (not (and (arg0) (arg1))).\n+\n+\t This results in more efficient code for machines without a NAND \n+\t instruction.  Combine will canonicalize to the first form\n+\t which will allow use of NAND instructions provided by the\n+\t backend if they exist.  */\n+      if (TREE_CODE (arg0) == BIT_NOT_EXPR\n+\t  && TREE_CODE (arg1) == BIT_NOT_EXPR)\n+\t{\n+\t  return fold (build1 (BIT_NOT_EXPR, type,\n+\t\t\t       build (BIT_AND_EXPR, type,\n+\t\t\t\t      TREE_OPERAND (arg0, 0),\n+\t\t\t\t      TREE_OPERAND (arg1, 0))));\n+\t}\n+\n       /* See if this can be simplified into a rotate first.  If that\n \t is unsuccessful continue in the association code.  */\n       goto bit_rotate;\n@@ -5241,6 +5256,22 @@ fold (expr)\n \t\t  & (((HOST_WIDE_INT) 1 << prec) - 1)) == 0)\n \t    return build1 (NOP_EXPR, type, TREE_OPERAND (arg0, 0));\n \t}\n+\n+      /* Convert (or (not arg0) (not arg1)) to (not (and (arg0) (arg1))).\n+\n+\t This results in more efficient code for machines without a NOR \n+\t instruction.  Combine will canonicalize to the first form\n+\t which will allow use of NOR instructions provided by the\n+\t backend if they exist.  */\n+      if (TREE_CODE (arg0) == BIT_NOT_EXPR\n+\t  && TREE_CODE (arg1) == BIT_NOT_EXPR)\n+\t{\n+\t  return fold (build1 (BIT_NOT_EXPR, type,\n+\t\t\t       build (BIT_IOR_EXPR, type,\n+\t\t\t\t      TREE_OPERAND (arg0, 0),\n+\t\t\t\t      TREE_OPERAND (arg1, 0))));\n+\t}\n+\n       goto associate;\n \n     case BIT_ANDTC_EXPR:"}]}