{"sha": "53080c5b4ce3742d20a0aa4643203215f20aadf6", "node_id": "C_kwDOANBUbNoAKDUzMDgwYzViNGNlMzc0MmQyMGEwYWE0NjQzMjAzMjE1ZjIwYWFkZjY", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-11-09T09:49:32Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-11-09T17:23:44Z"}, "message": "Dump details of an attempt to register a jump threading path.\n\nThe goal with these sets of patches is to improve the detailed dumps for\nthe threader, as I hope we eventually reach the point when I'm not\nthe only one looking at these dumps ;-).\n\nThis patch adds candidate paths to the detailed threading dumps to make it\neasier to see the decisions the threader makes.  With it we can now\ngrep for the discovery logic in action:\n\n$ grep ^path: a.ii.*thread*\na.ii.034t.ethread:path: 4->5->xx REJECTED\na.ii.034t.ethread:path: 3->5->8 SUCCESS\na.ii.034t.ethread:path: 4->5->6 SUCCESS\na.ii.034t.ethread:path: 0->2->xx REJECTED\na.ii.034t.ethread:path: 0->2->xx REJECTED\n...\n...\na.ii.111t.threadfull1:path: 14->22->23->xx REJECTED (unreachable)\na.ii.111t.threadfull1:path: 15->22->23->xx REJECTED (unreachable)\na.ii.111t.threadfull1:path: 16->22->23->xx REJECTED (unreachable)\n\nIn addition to this, if --param=threader-debug=all is used, one can see\nthe entire chain of events leading up to the ultimate threading\ndecision:\n\n==============================================\npath_range_query: compute_ranges for path: 2->5\n Registering killing_def (path_oracle) _3\n Registering killing_def (path_oracle) _1\nrange_defined_in_block (BB2) for _1 is _Bool VARYING\n Registering killing_def (path_oracle) _2\nrange_defined_in_block (BB2) for _2 is _Bool VARYING\nrange_defined_in_block (BB2) for _3 is _Bool VARYING\noutgoing_edge_range_p for b_10(D) on edge 2->5 is int VARYING\n...\n... [BBs and gimple along path]\n...\npath: 2->5->xx REJECTED\n\nTested on x86-64 Linux.\n\ngcc/ChangeLog:\n\n\t* tree-ssa-threadbackward.c\n\t(back_threader::maybe_register_path_dump): New.\n\t(back_threader::maybe_register_path): Call maybe_register_path_dump.", "tree": {"sha": "a1cfeda07d0e9a9825d012bd7f9468a7c326baf5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a1cfeda07d0e9a9825d012bd7f9468a7c326baf5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/53080c5b4ce3742d20a0aa4643203215f20aadf6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53080c5b4ce3742d20a0aa4643203215f20aadf6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53080c5b4ce3742d20a0aa4643203215f20aadf6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53080c5b4ce3742d20a0aa4643203215f20aadf6/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b59cf475a06f37c2b49631043f2896455923c3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b59cf475a06f37c2b49631043f2896455923c3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b59cf475a06f37c2b49631043f2896455923c3c"}], "stats": {"total": 34, "additions": 34, "deletions": 0}, "files": [{"sha": "74b5f361f45a8fc5035709d31688cf20d0657e4f", "filename": "gcc/tree-ssa-threadbackward.c", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53080c5b4ce3742d20a0aa4643203215f20aadf6/gcc%2Ftree-ssa-threadbackward.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53080c5b4ce3742d20a0aa4643203215f20aadf6/gcc%2Ftree-ssa-threadbackward.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadbackward.c?ref=53080c5b4ce3742d20a0aa4643203215f20aadf6", "patch": "@@ -89,6 +89,7 @@ class back_threader\n   void find_paths (basic_block bb, tree name);\n   bool debug_counter ();\n   edge maybe_register_path ();\n+  void maybe_register_path_dump (edge taken_edge);\n   void find_paths_to_names (basic_block bb, bitmap imports);\n   bool resolve_def (tree name, bitmap interesting, vec<tree> &worklist);\n   void resolve_phi (gphi *phi, bitmap imports);\n@@ -186,6 +187,35 @@ back_threader::debug_counter ()\n   return true;\n }\n \n+// Dump details of an attempt to register a path.\n+\n+void\n+back_threader::maybe_register_path_dump (edge taken)\n+{\n+  if (m_path.is_empty ())\n+    return;\n+\n+  fprintf (dump_file, \"path: \");\n+\n+  for (unsigned i = m_path.length (); i > 0; --i)\n+    {\n+      basic_block bb = m_path[i - 1];\n+      fprintf (dump_file, \"%d\", bb->index);\n+      if (i > 1)\n+\tfprintf (dump_file, \"->\");\n+    }\n+  fprintf (dump_file, \"->\");\n+\n+  if (taken == UNREACHABLE_EDGE)\n+    fprintf (dump_file, \"xx REJECTED (unreachable)\\n\");\n+  else if (taken)\n+    fprintf (dump_file, \"%d SUCCESS\\n\", taken->dest->index);\n+  else\n+    fprintf (dump_file, \"xx REJECTED\\n\");\n+}\n+\n+// If an outgoing edge can be determined out of the current path,\n+// register it for jump threading and return the taken edge.\n //\n // Return NULL if it is unprofitable to thread this path, or the\n // outgoing edge is unknown.  Return UNREACHABLE_EDGE if the path is\n@@ -220,6 +250,10 @@ back_threader::maybe_register_path ()\n \t    taken_edge = NULL;\n \t}\n     }\n+\n+  if (dump_file && (dump_flags & TDF_DETAILS))\n+    maybe_register_path_dump (taken_edge);\n+\n   return taken_edge;\n }\n "}]}