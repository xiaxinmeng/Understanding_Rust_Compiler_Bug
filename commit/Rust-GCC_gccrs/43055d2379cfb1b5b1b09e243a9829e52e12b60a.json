{"sha": "43055d2379cfb1b5b1b09e243a9829e52e12b60a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDMwNTVkMjM3OWNmYjFiNWIxYjA5ZTI0M2E5ODI5ZTUyZTEyYjYwYQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2019-08-20T21:15:46Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-08-20T21:15:46Z"}, "message": "compiler, runtime: implement shifts by signed amounts\n    \n    Shifting by signed types is a new language feature in Go 1.13.\n    \n    This requires a patch to the testsuite.\n    \n    Updates golang/go#19113\n    \n    Reviewed-on: https://go-review.googlesource.com/c/gofrontend/+/190977\n\n\t* go.test/test/fixedbugs/bug073.go: Update for language changes.\n\nFrom-SVN: r274755", "tree": {"sha": "25ee7c396a4bc315d93ef63cd8092a66275cd5a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25ee7c396a4bc315d93ef63cd8092a66275cd5a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/43055d2379cfb1b5b1b09e243a9829e52e12b60a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43055d2379cfb1b5b1b09e243a9829e52e12b60a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43055d2379cfb1b5b1b09e243a9829e52e12b60a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43055d2379cfb1b5b1b09e243a9829e52e12b60a/comments", "author": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5ba5ad304a16644614c3ea143181682a94cb999e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ba5ad304a16644614c3ea143181682a94cb999e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ba5ad304a16644614c3ea143181682a94cb999e"}], "stats": {"total": 55, "additions": 43, "deletions": 12}, "files": [{"sha": "2776fb80224e2ef1235544d7de79950db2b4716b", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43055d2379cfb1b5b1b09e243a9829e52e12b60a/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43055d2379cfb1b5b1b09e243a9829e52e12b60a/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=43055d2379cfb1b5b1b09e243a9829e52e12b60a", "patch": "@@ -1,4 +1,4 @@\n-a453eebae76296a39a1ded5bd2bffa78bedf40bd\n+1846b07fec2b91facc02ea269f7ab250b30f90b4\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "aa0fda091bd374c76d441276b29074f3b25949c1", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43055d2379cfb1b5b1b09e243a9829e52e12b60a/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43055d2379cfb1b5b1b09e243a9829e52e12b60a/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=43055d2379cfb1b5b1b09e243a9829e52e12b60a", "patch": "@@ -6734,19 +6734,18 @@ Binary_expression::do_check_types(Gogo*)\n \tthis->report_error(_(\"shift of non-integer operand\"));\n \n       if (right_type->is_string_type())\n-        this->report_error(_(\"shift count not unsigned integer\"));\n+        this->report_error(_(\"shift count not integer\"));\n       else if (!right_type->is_abstract()\n-\t  && (right_type->integer_type() == NULL\n-\t      || !right_type->integer_type()->is_unsigned()))\n-\tthis->report_error(_(\"shift count not unsigned integer\"));\n+\t       && right_type->integer_type() == NULL)\n+\tthis->report_error(_(\"shift count not integer\"));\n       else\n \t{\n \t  Numeric_constant nc;\n \t  if (this->right_->numeric_constant_value(&nc))\n \t    {\n \t      mpz_t val;\n \t      if (!nc.to_int(&val))\n-\t\tthis->report_error(_(\"shift count not unsigned integer\"));\n+\t\tthis->report_error(_(\"shift count not integer\"));\n \t      else\n \t\t{\n \t\t  if (mpz_sgn(val) < 0)\n@@ -6865,9 +6864,11 @@ Binary_expression::do_get_backend(Translate_context* context)\n \n   // In Go, a shift larger than the size of the type is well-defined.\n   // This is not true in C, so we need to insert a conditional.\n+  // We also need to check for a negative shift count.\n   if (is_shift_op)\n     {\n       go_assert(left_type->integer_type() != NULL);\n+      go_assert(right_type->integer_type() != NULL);\n \n       int bits = left_type->integer_type()->bits();\n \n@@ -6909,6 +6910,23 @@ Binary_expression::do_get_backend(Translate_context* context)\n \t\t\t\t\t\t\tret, overflow, loc);\n \t  mpz_clear(bitsval);\n \t}\n+\n+      if (!right_type->integer_type()->is_unsigned()\n+\t  && (!this->right_->numeric_constant_value(&nc)\n+\t      || nc.to_unsigned_long(&ul) != Numeric_constant::NC_UL_VALID))\n+\t{\n+\t  Bexpression* zero_expr =\n+\t    gogo->backend()->integer_constant_expression(right_btype, zero);\n+\t  Bexpression* compare =\n+\t    gogo->backend()->binary_expression(OPERATOR_LT, right, zero_expr,\n+\t\t\t\t\t       loc);\n+\t  const int errcode = RUNTIME_ERROR_SHIFT_BY_NEGATIVE;\n+\t  Bexpression* crash =\n+\t    gogo->runtime_error(errcode, loc)->get_backend(context);\n+\t  Bfunction* bfn = context->function()->func_value()->get_decl();\n+\t  ret = gogo->backend()->conditional_expression(bfn, btype, compare,\n+\t\t\t\t\t\t\tcrash, ret, loc);\n+\t}\n     }\n \n   // Add checks for division by zero and division overflow as needed."}, {"sha": "0abd4b4cb2a5de29c19294e9d24b315ba07faf54", "filename": "gcc/go/gofrontend/gogo.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43055d2379cfb1b5b1b09e243a9829e52e12b60a/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43055d2379cfb1b5b1b09e243a9829e52e12b60a/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.h?ref=43055d2379cfb1b5b1b09e243a9829e52e12b60a", "patch": "@@ -3745,6 +3745,9 @@ static const int RUNTIME_ERROR_DIVISION_BY_ZERO = 11;\n // Go statement with nil function.\n static const int RUNTIME_ERROR_GO_NIL = 12;\n \n+// Shift by negative value.\n+static const int RUNTIME_ERROR_SHIFT_BY_NEGATIVE = 13;\n+\n // This is used by some of the langhooks.\n extern Gogo* go_get_gogo();\n "}, {"sha": "2e361d303503e74308b85637015fbeeb7582a214", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43055d2379cfb1b5b1b09e243a9829e52e12b60a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43055d2379cfb1b5b1b09e243a9829e52e12b60a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=43055d2379cfb1b5b1b09e243a9829e52e12b60a", "patch": "@@ -1,3 +1,7 @@\n+2019-08-20  Ian Lance Taylor  <iant@golang.org>\n+\n+\t* go.test/test/fixedbugs/bug073.go: Update for language changes.\n+\n 2019-08-20  Matthew Beliveau  <mbelivea@redhat.com>\n \n \t* gcc.dg/tree-ssa/redundant-assign-zero-1.c: New test."}, {"sha": "f3605b37cfe6df8d99182679c7a1077a93e7a127", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug073.go", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43055d2379cfb1b5b1b09e243a9829e52e12b60a/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug073.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43055d2379cfb1b5b1b09e243a9829e52e12b60a/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug073.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug073.go?ref=43055d2379cfb1b5b1b09e243a9829e52e12b60a", "patch": "@@ -1,4 +1,4 @@\n-// errorcheck\n+// compile\n \n // Copyright 2009 The Go Authors. All rights reserved.\n // Use of this source code is governed by a BSD-style\n@@ -7,8 +7,8 @@\n package main\n \n func main() {\n-\tvar s int = 0;\n-\tvar x int = 0;\n-\tx = x << s;  // ERROR \"illegal|inval|shift\"\n-\tx = x >> s;  // ERROR \"illegal|inval|shift\"\n+\tvar s int = 0\n+\tvar x int = 0\n+\tx = x << s // as of 1.13, these are ok\n+\tx = x >> s // as of 1.13, these are ok\n }"}, {"sha": "8179e685ef785c065d6721860f16dae206c17970", "filename": "libgo/runtime/go-runtime-error.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43055d2379cfb1b5b1b09e243a9829e52e12b60a/libgo%2Fruntime%2Fgo-runtime-error.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43055d2379cfb1b5b1b09e243a9829e52e12b60a/libgo%2Fruntime%2Fgo-runtime-error.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-runtime-error.c?ref=43055d2379cfb1b5b1b09e243a9829e52e12b60a", "patch": "@@ -55,7 +55,10 @@ enum\n   DIVISION_BY_ZERO = 11,\n \n   /* Go statement with nil function.  */\n-  GO_NIL = 12\n+  GO_NIL = 12,\n+\n+  /* Shift by negative value.  */\n+  SHIFT_BY_NEGATIVE = 13\n };\n \n extern void __go_runtime_error (int32) __attribute__ ((noreturn));\n@@ -112,6 +115,9 @@ __go_runtime_error (int32 i)\n       runtime_g()->m->throwing = -1;\n       runtime_throw (\"go of nil func value\");\n \n+    case SHIFT_BY_NEGATIVE:\n+      runtime_panicstring (\"negative shift amount\");\n+\n     default:\n       runtime_panicstring (\"unknown runtime error\");\n     }"}]}