{"sha": "b166bded9e890d88f88ea7b42a78d82b68efb8ac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjE2NmJkZWQ5ZTg5MGQ4OGY4OGVhN2I0MmE3OGQ4MmI2OGVmYjhhYw==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@unitus.it", "date": "2003-06-02T16:46:28Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2003-06-02T16:46:28Z"}, "message": "re PR libstdc++/9761 (filebuf::pbackfail discards previously put back characters)\n\n2003-06-02  Paolo Carlini  <pcarlini@unitus.it>\n\n\tPR libstdc++/9761\n\t* include/bits/fstream.tcc (pbackfail): If the pback buffer\n\tis already active don't try to store in it a second char.\n\t* testsuite/27_io/basic_filebuf/pbackfail/char/9761.cc: New.\n\n\t* include/bits/fstream.tcc (pbackfail): Add unbuffered bits.\n\nFrom-SVN: r67337", "tree": {"sha": "596e3ee1b79fee127137c8ee515c55e575e1a76c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/596e3ee1b79fee127137c8ee515c55e575e1a76c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b166bded9e890d88f88ea7b42a78d82b68efb8ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b166bded9e890d88f88ea7b42a78d82b68efb8ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b166bded9e890d88f88ea7b42a78d82b68efb8ac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b166bded9e890d88f88ea7b42a78d82b68efb8ac/comments", "author": null, "committer": null, "parents": [{"sha": "f275a768ab0643ce27b67ed90923848011a39bc3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f275a768ab0643ce27b67ed90923848011a39bc3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f275a768ab0643ce27b67ed90923848011a39bc3"}], "stats": {"total": 139, "additions": 94, "deletions": 45}, "files": [{"sha": "cac15bbc5e0b0e6de4b09484ec077b980a387dda", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b166bded9e890d88f88ea7b42a78d82b68efb8ac/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b166bded9e890d88f88ea7b42a78d82b68efb8ac/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b166bded9e890d88f88ea7b42a78d82b68efb8ac", "patch": "@@ -1,3 +1,12 @@\n+2003-06-02  Paolo Carlini  <pcarlini@unitus.it>\n+\n+\tPR libstdc++/9761\n+\t* include/bits/fstream.tcc (pbackfail): If the pback buffer\n+\tis already active don't try to store in it a second char.\n+\t* testsuite/27_io/basic_filebuf/pbackfail/char/9761.cc: New.\n+\n+\t* include/bits/fstream.tcc (pbackfail): Add unbuffered bits.\n+\n 2003-06-02  Paolo Carlini  <pcarlini@unitus.it>\n \n \t* testsuite/27_io/basic_stringbuf/seekpos/char/3.cc: Tweak"}, {"sha": "e84eee04efd80f95ccdf8a00e31ab7b00df33103", "filename": "libstdc++-v3/include/bits/fstream.tcc", "status": "modified", "additions": 30, "deletions": 45, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b166bded9e890d88f88ea7b42a78d82b68efb8ac/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b166bded9e890d88f88ea7b42a78d82b68efb8ac/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc?ref=b166bded9e890d88f88ea7b42a78d82b68efb8ac", "patch": "@@ -268,54 +268,39 @@ namespace std\n \n       if (__testin)\n \t{\n-\t  const bool __testpb = this->_M_in_beg < this->_M_in_cur;\n-\t  char_type __c = traits_type::to_char_type(__i);\n+\t  // Remember whether the pback buffer is active, otherwise below\n+\t  // we may try to store in it a second char (libstdc++/9761).\n+\t  const bool __testpb = this->_M_pback_init;\t   \n \t  const bool __testeof = traits_type::eq_int_type(__i, __ret);\n-\n-\t  if (__testpb)\n+\t  \n+\t  int_type __tmp;\n+\t  if (this->_M_in_beg < this->_M_in_cur)\n \t    {\n-\t      const bool __testout = this->_M_mode & ios_base::out;\n-\t      const bool __testeq = traits_type::eq(__c, this->_M_in_cur[-1]);\n-\n-\t      --this->_M_in_cur;\n-\t      if (__testout)\n-\t\t--this->_M_out_cur;\n-\t      // Try to put back __c into input sequence in one of three ways.\n-\t      // Order these tests done in is unspecified by the standard.\n-\t      if (!__testeof && __testeq)\n-\t\t__ret = __i;\n-\t      else if (__testeof)\n-\t\t__ret = traits_type::not_eof(__i);\n-\t      else\n-\t\t{\n-\t\t  _M_create_pback();\n-\t\t  *this->_M_in_cur = __c; \n-\t\t  __ret = __i;\n-\t\t}\n+\t      _M_move_in_cur(-1);\n+\t      __tmp = traits_type::to_int_type(*this->_M_in_cur);\n+\t    }\n+\t  // At the beginning of the buffer, need to make a\n+\t  // putback position available.\n+\t  // But the seek may fail (f.i., at the beginning of\n+\t  // a file, see libstdc++/9439) and in that case\n+\t  // we return traits_type::eof().\n+\t  else if (this->seekoff(-1, ios_base::cur) < 0\n+\t\t   || traits_type::eq_int_type(__tmp = this->underflow(),\n+\t\t\t\t\t       traits_type::eof()))\n+\t    return __ret;\n+\n+\t  // Try to put back __i into input sequence in one of three ways.\n+\t  // Order these tests done in is unspecified by the standard.\n+\t  if (!__testeof && traits_type::eq_int_type(__i, __tmp))\n+\t    __ret = __i;\n+\t  else if (__testeof)\n+\t    __ret = traits_type::not_eof(__i);\n+\t  else if (!__testpb)\n+\t    {\n+\t      _M_create_pback();\n+\t      *this->_M_in_cur = traits_type::to_char_type(__i); \n+\t      __ret = __i;\n \t    }\n-\t  else\n-\t    {\t \n- \t      // At the beginning of the buffer, need to make a\n-\t      // putback position available.\n-\t      // But the seek may fail (f.i., at the beginning of\n-\t      // a file, see libstdc++/9439) and in that case\n-\t      // we return traits_type::eof()\n-\t      if (this->seekoff(-1, ios_base::cur) >= 0)\n-\t\t{\n-\t\t  this->underflow();\n-\t\t  if (!__testeof)\n-\t\t    {\n-\t\t      if (!traits_type::eq(__c, *this->_M_in_cur))\n-\t\t\t{\n-\t\t\t  _M_create_pback();\n-\t\t\t  *this->_M_in_cur = __c;\n-\t\t\t}\n-\t\t      __ret = __i;\n-\t\t    }\n-\t\t  else\n-\t\t    __ret = traits_type::not_eof(__i);\n-\t\t}\n- \t    }\n \t}\n       _M_last_overflowed = false;\t\n       return __ret;"}, {"sha": "07e1ddad810c8c78efe12b67de47c98328bf34c9", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/pbackfail/char/9761.cc", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b166bded9e890d88f88ea7b42a78d82b68efb8ac/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fpbackfail%2Fchar%2F9761.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b166bded9e890d88f88ea7b42a78d82b68efb8ac/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fpbackfail%2Fchar%2F9761.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fpbackfail%2Fchar%2F9761.cc?ref=b166bded9e890d88f88ea7b42a78d82b68efb8ac", "patch": "@@ -0,0 +1,55 @@\n+// 2003-06-02 Paolo Carlini <pcarlini@unitus.it>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+const char name_01[] = \"filebuf_virtuals-1.txt\"; // file with data in it\n+\n+// libstdc++/9761\n+void test01()\n+{\n+  using namespace std;\n+  bool test = true;\n+\n+  filebuf fbuf;\n+  filebuf::int_type r1, r2;\n+\n+  fbuf.open(name_01, ios_base::in);\n+  \n+  fbuf.sbumpc();\n+  fbuf.sbumpc();\n+\t\n+  r1 = fbuf.sputbackc('a');\n+  r2 = fbuf.sputbackc('b');\n+\n+  fbuf.close();\n+\n+  VERIFY( r1 != filebuf::traits_type::eof() );\n+  VERIFY( r2 == filebuf::traits_type::eof() );\n+}\n+\n+main() \n+{\n+  test01();\n+  return 0;\n+}"}]}