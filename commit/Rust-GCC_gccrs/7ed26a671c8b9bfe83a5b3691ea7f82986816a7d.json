{"sha": "7ed26a671c8b9bfe83a5b3691ea7f82986816a7d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2VkMjZhNjcxYzhiOWJmZTgzYTViMzY5MWVhN2Y4Mjk4NjgxNmE3ZA==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2012-06-01T05:53:31Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2012-06-01T05:53:31Z"}, "message": "chmod.c (chmod_func): On MinGW, don't set is_dir\n\n2012-06-01  Tobias Burnus  <burnus@net-b.de>\n\n        * intrinsics/chmod.c (chmod_func): On MinGW, don't set is_dir\n        * and\n        fix octal-mode handling.\n        * io/unit.c (get_internal_unit): Add cast.\n        * io/unix.c (min): Undef \"min\" before defining it.\n        * runtime/backtrace.c (show_backtrace): Move label into\n        ifndef __MINGW__ block.\n\nFrom-SVN: r188098", "tree": {"sha": "63fe8083057cc04125b9f153960462ad7b09fd6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/63fe8083057cc04125b9f153960462ad7b09fd6b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7ed26a671c8b9bfe83a5b3691ea7f82986816a7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ed26a671c8b9bfe83a5b3691ea7f82986816a7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ed26a671c8b9bfe83a5b3691ea7f82986816a7d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ed26a671c8b9bfe83a5b3691ea7f82986816a7d/comments", "author": null, "committer": null, "parents": [{"sha": "62330f08cbb816f178c86d3ec589f1a259aedd93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62330f08cbb816f178c86d3ec589f1a259aedd93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62330f08cbb816f178c86d3ec589f1a259aedd93"}], "stats": {"total": 53, "additions": 36, "deletions": 17}, "files": [{"sha": "fc464a153ff9ab78c2e002cde67521f598556b8c", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ed26a671c8b9bfe83a5b3691ea7f82986816a7d/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ed26a671c8b9bfe83a5b3691ea7f82986816a7d/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=7ed26a671c8b9bfe83a5b3691ea7f82986816a7d", "patch": "@@ -1,8 +1,17 @@\n+2012-06-01  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* intrinsics/chmod.c (chmod_func): On MinGW, don't set is_dir and\n+\tfix octal-mode handling.\n+\t* io/unit.c (get_internal_unit): Add cast.\n+\t* io/unix.c (min): Undef \"min\" before defining it.\n+\t* runtime/backtrace.c (show_backtrace): Move label into\n+\tifndef __MINGW__ block.\n+\n 2012-05-31  Benjamin Kosnik  <bkoz@redhat.com>\n \n-        PR libstdc++/51007\n-        * configure.ac: Allow gnu, gnu* variants for --enable-symvers argument.\n-        * configure: Regenerated.\n+\tPR libstdc++/51007\n+\t* configure.ac: Allow gnu, gnu* variants for --enable-symvers argument.\n+\t* configure: Regenerated.\n \n 2012-05-31  Tobias Burnus  <burnus@net-b.de>\n "}, {"sha": "43b8de2e279dcf94489cbfbd0b3aa8a314e3ac77", "filename": "libgfortran/intrinsics/chmod.c", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ed26a671c8b9bfe83a5b3691ea7f82986816a7d/libgfortran%2Fintrinsics%2Fchmod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ed26a671c8b9bfe83a5b3691ea7f82986816a7d/libgfortran%2Fintrinsics%2Fchmod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fchmod.c?ref=7ed26a671c8b9bfe83a5b3691ea7f82986816a7d", "patch": "@@ -74,7 +74,10 @@ chmod_func (char *name, char *mode, gfc_charlen_type name_len,\n   bool ugo[3];\n   bool rwxXstugo[9];\n   int set_mode, part;\n-  bool is_dir, honor_umask, continue_clause = false;\n+  bool honor_umask, continue_clause = false;\n+#ifndef __MINGW32__\n+  bool is_dir;\n+#endif\n   mode_t mode_mask, file_mode, new_mode;\n   struct stat stat_buf;\n \n@@ -93,10 +96,10 @@ chmod_func (char *name, char *mode, gfc_charlen_type name_len,\n   if (mode[0] >= '0' && mode[0] <= '9')\n     {\n #ifdef __MINGW32__\n-      unsigned mode;\n-      if (sscanf (mode, \"%o\", &mode) != 1)\n+      unsigned fmode;\n+      if (sscanf (mode, \"%o\", &fmode) != 1)\n \treturn 1;\n-      file_mode = (mode_t) mode;\n+      file_mode = (mode_t) fmode;\n #else\n       if (sscanf (mode, \"%o\", &file_mode) != 1)\n \treturn 1;\n@@ -109,7 +112,9 @@ chmod_func (char *name, char *mode, gfc_charlen_type name_len,\n     return 1;\n \n   file_mode = stat_buf.st_mode & ~S_IFMT;\n+#ifndef __MINGW32__\n   is_dir = stat_buf.st_mode & S_IFDIR;\n+#endif\n \n #ifdef HAVE_UMASK\n   /* Obtain the umask without distroying the setting.  */"}, {"sha": "8b0926d63d3560fe1326aaf76c102c4eecfb4fe8", "filename": "libgfortran/io/unit.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ed26a671c8b9bfe83a5b3691ea7f82986816a7d/libgfortran%2Fio%2Funit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ed26a671c8b9bfe83a5b3691ea7f82986816a7d/libgfortran%2Fio%2Funit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Funit.c?ref=7ed26a671c8b9bfe83a5b3691ea7f82986816a7d", "patch": "@@ -430,7 +430,8 @@ get_internal_unit (st_parameter_dt *dtp)\n \t  else\n \t    {\n \t      dtp->internal_unit_len =\n-\t\tstring_len_trim_char4 (dtp->internal_unit_len, dtp->internal_unit);\n+\t\tstring_len_trim_char4 (dtp->internal_unit_len,\n+\t\t\t\t       (const gfc_char4_t*) dtp->internal_unit);\n \t      iunit->recl = dtp->internal_unit_len;\n \t    }\n \t}"}, {"sha": "1a9faea486e6c4507ba9d35821c75208eec6d491", "filename": "libgfortran/io/unix.c", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ed26a671c8b9bfe83a5b3691ea7f82986816a7d/libgfortran%2Fio%2Funix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ed26a671c8b9bfe83a5b3691ea7f82986816a7d/libgfortran%2Fio%2Funix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Funix.c?ref=7ed26a671c8b9bfe83a5b3691ea7f82986816a7d", "patch": "@@ -41,13 +41,6 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #include <errno.h>\n \n \n-/* min macro that evaluates its arguments only once.  */\n-#define min(a,b)\t\t\\\n-  ({ typeof (a) _a = (a);\t\\\n-    typeof (b) _b = (b);\t\\\n-    _a < _b ? _a : _b; })\n-\n-\n /* For mingw, we don't identify files by their inode number, but by a\n    64-bit identifier created from a BY_HANDLE_FILE_INFORMATION. */\n #ifdef __MINGW32__\n@@ -106,8 +99,19 @@ id_from_fd (const int fd)\n   return id_from_handle ((HANDLE) _get_osfhandle (fd));\n }\n \n+#endif /* HAVE_WORKING_STAT */\n+#endif /* __MINGW32__ */\n+\n+\n+/* min macro that evaluates its arguments only once.  */\n+#ifdef min\n+#undef min\n #endif\n-#endif\n+\n+#define min(a,b)\t\t\\\n+  ({ typeof (a) _a = (a);\t\\\n+    typeof (b) _b = (b);\t\\\n+    _a < _b ? _a : _b; })\n \n #ifndef PATH_MAX\n #define PATH_MAX 1024"}, {"sha": "9d88d136a8b06051401531d489fc0c8c68472af2", "filename": "libgfortran/runtime/backtrace.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ed26a671c8b9bfe83a5b3691ea7f82986816a7d/libgfortran%2Fruntime%2Fbacktrace.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ed26a671c8b9bfe83a5b3691ea7f82986816a7d/libgfortran%2Fruntime%2Fbacktrace.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Fbacktrace.c?ref=7ed26a671c8b9bfe83a5b3691ea7f82986816a7d", "patch": "@@ -270,9 +270,9 @@ show_backtrace (void)\n   }\n   while (0);\n \n+fallback_noerr:\n #endif /* CAN_PIPE */\n \n-fallback_noerr:\n   /* Fallback to the simple backtrace without addr2line.  */\n   state.direct_output = 1;\n   _Unwind_Backtrace (trace_function, &state);"}]}