{"sha": "5be5c238419ffa6985605af60bc1f047770b9bd8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWJlNWMyMzg0MTlmZmE2OTg1NjA1YWY2MGJjMWYwNDc3NzBiOWJkOA==", "commit": {"author": {"name": "Andrew Macleod", "email": "amacleod@gcc.gnu.org", "date": "2013-11-13T23:54:17Z"}, "committer": {"name": "Andrew Macleod", "email": "amacleod@gcc.gnu.org", "date": "2013-11-13T23:54:17Z"}, "message": "gimple-walk.h: New File.\n\n\n\t* gimple-walk.h: New File.  Relocate prototypes from gimple.h.\n\t(struct walk_stmt_info):  Relocate here from gimple.h.\n\t* gimple-iterator.h: New File.  Relocate prototypes from gimple.h.\n\t(struct gimple_stmt_iterator_d): Relocate here from gimple.h.\n\t(gsi_start_1, gsi_none, gsi_start_bb, gsi_last_1, gsi_last_bb,\n\tgsi_end_p, gsi_one_before_end_p, gsi_next, gsi_prev, gsi_stmt,\n\tgsi_after_labels, gsi_next_nondebug, gsi_prev_nondebug,\n\tgsi_start_nondebug_bb, gsi_start_nondebug_after_labels_bb,\n\tgsi_last_nondebug_bb, gsi_bb, gsi_seq): Relocate here from gimple.h.\n\t* gimple.h (struct gimple_stmt_iterator_d): Move to gimple-iterator.h.\n\t(gsi_start_1, gsi_none, gsi_start_bb, gsi_last_1, gsi_last_bb,\n\tgsi_end_p, gsi_one_before_end_p, gsi_next, gsi_prev, gsi_stmt,\n\tgsi_after_labels, gsi_next_nondebug, gsi_prev_nondebug,\n\tgsi_start_nondebug_bb, gsi_start_nondebug_after_labels_bb,\n\tgsi_last_nondebug_bb, gsi_bb, gsi_seq): Move to gimple-iterator.h.\n\t(struct walk_stmt_info): Move to gimple-walk.h.\n\t(gimple_seq_set_location): Move to gimple.c\n\t* gimple-walk.c: New File.\n\t(walk_gimple_seq_mod, walk_gimple_seq, walk_gimple_asm, walk_gimple_op,\n\twalk_gimple_stmt, get_base_loadstore, walk_stmt_load_store_addr_ops,\n\twalk_stmt_load_store_ops): Relocate here from gimple.c.\n\t* gimple-iterator.c: Include gimple-iterator.h.\n\t* gimple.c (walk_gimple_seq_mod, walk_gimple_seq, walk_gimple_asm,\n\twalk_gimple_op, walk_gimple_stmt, get_base_loadstore,\n\twalk_stmt_load_store_addr_ops, walk_stmt_load_store_ops): Move to\n\tgimple-walk.c.\n\t(gimple_seq_set_location): Relocate from gimple.h.\n\t* tree-phinodes.h (set_phi_nodes): Move to tree-phinodes.c.\n\t* tree-phinodes.c (set_phi_nodes): Relocate from tree-phinodes.h.\n\t* gengtype.c (open_base_files): Add gimple-iterator.h to include list.\n\t* Makefile.in (OBJS): Add gimple-walk.o\n\n\t* asan.c: Update Include list as required for gimple-iterator.h and\n\tgimple-walk.h.\n\t* cfgexpand.c: Likewise.\n\t* cfgloop.c: Likewise.\n\t* cfgloopmanip.c: Likewise.\n\t* cgraph.c: Likewise.\n\t* cgraphbuild.c: Likewise.\n\t* cgraphunit.c: Likewise.\n\t* gimple-fold.c: Likewise.\n\t* gimple-low.c: Likewise.\n\t* gimple-pretty-print.c: Likewise.\n\t* gimple-ssa-isolate-paths.c: Likewise.\n\t* gimple-ssa-strength-reduction.c: Likewise.\n\t* gimple-streamer-in.c: Likewise.\n\t* gimple-streamer-out.c: Likewise.\n\t* gimplify.c: Likewise.\n\t* graphite-blocking.c: Likewise.\n\t* graphite-clast-to-gimple.c: Likewise.\n\t* graphite-dependences.c: Likewise.\n\t* graphite-interchange.c: Likewise.\n\t* graphite-optimize-isl.c: Likewise.\n\t* graphite-poly.c: Likewise.\n\t* graphite-scop-detection.c: Likewise.\n\t* graphite-sese-to-poly.c: Likewise.\n\t* graphite.c: Likewise.\n\t* ipa-inline-analysis.c: Likewise.\n\t* ipa-profile.c: Likewise.\n\t* ipa-prop.c: Likewise.\n\t* ipa-pure-const.c: Likewise.\n\t* ipa-split.c: Likewise.\n\t* lto-streamer-in.c: Likewise.\n\t* lto-streamer-out.c: Likewise.\n\t* omp-low.c: Likewise.\n\t* predict.c: Likewise.\n\t* profile.c: Likewise.\n\t* sese.c: Likewise.\n\t* tracer.c: Likewise.\n\t* trans-mem.c: Likewise.\n\t* tree-call-cdce.c: Likewise.\n\t* tree-cfg.c: Likewise.\n\t* tree-cfgcleanup.c: Likewise.\n\t* tree-complex.c: Likewise.\n\t* tree-data-ref.c: Likewise.\n\t* tree-dfa.c: Likewise.\n\t* tree-eh.c: Likewise.\n\t* tree-emutls.c: Likewise.\n\t* tree-if-conv.c: Likewise.\n\t* tree-inline.c: Likewise.\n\t* tree-into-ssa.c: Likewise.\n\t* tree-loop-distribution.c: Likewise.\n\t* tree-nested.c: Likewise.\n\t* tree-nrv.c: Likewise.\n\t* tree-object-size.c: Likewise.\n\t* tree-outof-ssa.c: Likewise.\n\t* tree-parloops.c: Likewise.\n\t* tree-predcom.c: Likewise.\n\t* tree-profile.c: Likewise.\n\t* tree-scalar-evolution.c: Likewise.\n\t* tree-sra.c: Likewise.\n\t* tree-ssa-ccp.c: Likewise.\n\t* tree-ssa-coalesce.c: Likewise.\n\t* tree-ssa-copy.c: Likewise.\n\t* tree-ssa-copyrename.c: Likewise.\n\t* tree-ssa-dce.c: Likewise.\n\t* tree-ssa-dom.c: Likewise.\n\t* tree-ssa-dse.c: Likewise.\n\t* tree-ssa-forwprop.c: Likewise.\n\t* tree-ssa-ifcombine.c: Likewise.\n\t* tree-ssa-live.c: Likewise.\n\t* tree-ssa-loop-ch.c: Likewise.\n\t* tree-ssa-loop-im.c: Likewise.\n\t* tree-ssa-loop-ivcanon.c: Likewise.\n\t* tree-ssa-loop-ivopts.c: Likewise.\n\t* tree-ssa-loop-manip.c: Likewise.\n\t* tree-ssa-loop-niter.c: Likewise.\n\t* tree-ssa-loop-prefetch.c: Likewise.\n\t* tree-ssa-loop.c: Likewise.\n\t* tree-ssa-math-opts.c: Likewise.\n\t* tree-ssa-phiopt.c: Likewise.\n\t* tree-ssa-phiprop.c: Likewise.\n\t* tree-ssa-pre.c: Likewise.\n\t* tree-ssa-propagate.c: Likewise.\n\t* tree-ssa-reassoc.c: Likewise.\n\t* tree-ssa-sink.c: Likewise.\n\t* tree-ssa-strlen.c: Likewise.\n\t* tree-ssa-structalias.c: Likewise.\n\t* tree-ssa-tail-merge.c: Likewise.\n\t* tree-ssa-ter.c: Likewise.\n\t* tree-ssa-threadedge.c: Likewise.\n\t* tree-ssa-threadupdate.c: Likewise.\n\t* tree-ssa-uncprop.c: Likewise.\n\t* tree-ssa-uninit.c: Likewise.\n\t* tree-ssa.c: Likewise.\n\t* tree-stdarg.c: Likewise.\n\t* tree-switch-conversion.c: Likewise.\n\t* tree-tailcall.c: Likewise.\n\t* tree-vect-data-refs.c: Likewise.\n\t* tree-vect-generic.c: Likewise.\n\t* tree-vect-loop-manip.c: Likewise.\n\t* tree-vect-loop.c: Likewise.\n\t* tree-vect-patterns.c: Likewise.\n\t* tree-vect-slp.c: Likewise.\n\t* tree-vect-stmts.c: Likewise.\n\t* tree-vectorizer.c: Likewise.\n\t* tree-vrp.c: Likewise.\n\t* tree.c: Likewise.\n\t* tsan.c: Likewise.\n\t* value-prof.c: Likewise.\n\t* vtable-verify.c: Likewise.\n\n\t* config/aarch64/aarch64-builtins.c: Include gimple-iterator.h.\n\t* config/rs6000/rs6000.c: Include gimple-iterator.h and gimple-walk.h.\n\t* testsuite/g++.dg/plugin/selfassign.c: Include gimple-iterator.h.\n\t* testsuite/gcc.dg/plugin/selfassign.c: Likewise.\n\nFrom-SVN: r204763", "tree": {"sha": "5212390dab318e009e54c4466b455352647db1a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5212390dab318e009e54c4466b455352647db1a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5be5c238419ffa6985605af60bc1f047770b9bd8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5be5c238419ffa6985605af60bc1f047770b9bd8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5be5c238419ffa6985605af60bc1f047770b9bd8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5be5c238419ffa6985605af60bc1f047770b9bd8/comments", "author": null, "committer": null, "parents": [{"sha": "d35e43b970679a09504e452ce6734657545dadc8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d35e43b970679a09504e452ce6734657545dadc8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d35e43b970679a09504e452ce6734657545dadc8"}], "stats": {"total": 2784, "additions": 1571, "deletions": 1213}, "files": [{"sha": "a8d9c5bd66aa2cc123ad04788144cdd4085cd317", "filename": "gcc/ChangeLog", "status": "modified", "additions": 143, "deletions": 0, "changes": 143, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -1,3 +1,146 @@\n+2013-11-13  Andrew MacLeod  <amacleod@redhat,com>\n+\n+\t* gimple-walk.h: New File.  Relocate prototypes from gimple.h.\n+\t(struct walk_stmt_info):  Relocate here from gimple.h.\n+\t* gimple-iterator.h: New File.  Relocate prototypes from gimple.h.\n+\t(struct gimple_stmt_iterator_d): Relocate here from gimple.h.\n+\t(gsi_start_1, gsi_none, gsi_start_bb, gsi_last_1, gsi_last_bb,\n+\tgsi_end_p, gsi_one_before_end_p, gsi_next, gsi_prev, gsi_stmt,\n+\tgsi_after_labels, gsi_next_nondebug, gsi_prev_nondebug,\n+\tgsi_start_nondebug_bb, gsi_start_nondebug_after_labels_bb,\n+\tgsi_last_nondebug_bb, gsi_bb, gsi_seq): Relocate here from gimple.h.\n+\t* gimple.h (struct gimple_stmt_iterator_d): Move to gimple-iterator.h.\n+\t(gsi_start_1, gsi_none, gsi_start_bb, gsi_last_1, gsi_last_bb,\n+\tgsi_end_p, gsi_one_before_end_p, gsi_next, gsi_prev, gsi_stmt,\n+\tgsi_after_labels, gsi_next_nondebug, gsi_prev_nondebug,\n+\tgsi_start_nondebug_bb, gsi_start_nondebug_after_labels_bb,\n+\tgsi_last_nondebug_bb, gsi_bb, gsi_seq): Move to gimple-iterator.h.\n+\t(struct walk_stmt_info): Move to gimple-walk.h.\n+\t(gimple_seq_set_location): Move to gimple.c\n+\t* gimple-walk.c: New File.\n+\t(walk_gimple_seq_mod, walk_gimple_seq, walk_gimple_asm, walk_gimple_op,\n+\twalk_gimple_stmt, get_base_loadstore, walk_stmt_load_store_addr_ops,\n+\twalk_stmt_load_store_ops): Relocate here from gimple.c.\n+\t* gimple-iterator.c: Include gimple-iterator.h.\n+\t* gimple.c (walk_gimple_seq_mod, walk_gimple_seq, walk_gimple_asm,\n+\twalk_gimple_op, walk_gimple_stmt, get_base_loadstore,\n+\twalk_stmt_load_store_addr_ops, walk_stmt_load_store_ops): Move to\n+\tgimple-walk.c.\n+\t(gimple_seq_set_location): Relocate from gimple.h.\n+\t* tree-phinodes.h (set_phi_nodes): Move to tree-phinodes.c.\n+\t* tree-phinodes.c (set_phi_nodes): Relocate from tree-phinodes.h.\n+\t* gengtype.c (open_base_files): Add gimple-iterator.h to include list.\n+\t* Makefile.in (OBJS): Add gimple-walk.o\n+\t* asan.c: Update Include list as required for gimple-iterator.h and\n+\tgimple-walk.h.\n+\t* cfgexpand.c: Likewise.\n+\t* cfgloop.c: Likewise.\n+\t* cfgloopmanip.c: Likewise.\n+\t* cgraph.c: Likewise.\n+\t* cgraphbuild.c: Likewise.\n+\t* cgraphunit.c: Likewise.\n+\t* gimple-fold.c: Likewise.\n+\t* gimple-low.c: Likewise.\n+\t* gimple-pretty-print.c: Likewise.\n+\t* gimple-ssa-isolate-paths.c: Likewise.\n+\t* gimple-ssa-strength-reduction.c: Likewise.\n+\t* gimple-streamer-in.c: Likewise.\n+\t* gimple-streamer-out.c: Likewise.\n+\t* gimplify.c: Likewise.\n+\t* graphite-blocking.c: Likewise.\n+\t* graphite-clast-to-gimple.c: Likewise.\n+\t* graphite-dependences.c: Likewise.\n+\t* graphite-interchange.c: Likewise.\n+\t* graphite-optimize-isl.c: Likewise.\n+\t* graphite-poly.c: Likewise.\n+\t* graphite-scop-detection.c: Likewise.\n+\t* graphite-sese-to-poly.c: Likewise.\n+\t* graphite.c: Likewise.\n+\t* ipa-inline-analysis.c: Likewise.\n+\t* ipa-profile.c: Likewise.\n+\t* ipa-prop.c: Likewise.\n+\t* ipa-pure-const.c: Likewise.\n+\t* ipa-split.c: Likewise.\n+\t* lto-streamer-in.c: Likewise.\n+\t* lto-streamer-out.c: Likewise.\n+\t* omp-low.c: Likewise.\n+\t* predict.c: Likewise.\n+\t* profile.c: Likewise.\n+\t* sese.c: Likewise.\n+\t* tracer.c: Likewise.\n+\t* trans-mem.c: Likewise.\n+\t* tree-call-cdce.c: Likewise.\n+\t* tree-cfg.c: Likewise.\n+\t* tree-cfgcleanup.c: Likewise.\n+\t* tree-complex.c: Likewise.\n+\t* tree-data-ref.c: Likewise.\n+\t* tree-dfa.c: Likewise.\n+\t* tree-eh.c: Likewise.\n+\t* tree-emutls.c: Likewise.\n+\t* tree-if-conv.c: Likewise.\n+\t* tree-inline.c: Likewise.\n+\t* tree-into-ssa.c: Likewise.\n+\t* tree-loop-distribution.c: Likewise.\n+\t* tree-nested.c: Likewise.\n+\t* tree-nrv.c: Likewise.\n+\t* tree-object-size.c: Likewise.\n+\t* tree-outof-ssa.c: Likewise.\n+\t* tree-parloops.c: Likewise.\n+\t* tree-predcom.c: Likewise.\n+\t* tree-profile.c: Likewise.\n+\t* tree-scalar-evolution.c: Likewise.\n+\t* tree-sra.c: Likewise.\n+\t* tree-ssa-ccp.c: Likewise.\n+\t* tree-ssa-coalesce.c: Likewise.\n+\t* tree-ssa-copy.c: Likewise.\n+\t* tree-ssa-copyrename.c: Likewise.\n+\t* tree-ssa-dce.c: Likewise.\n+\t* tree-ssa-dom.c: Likewise.\n+\t* tree-ssa-dse.c: Likewise.\n+\t* tree-ssa-forwprop.c: Likewise.\n+\t* tree-ssa-ifcombine.c: Likewise.\n+\t* tree-ssa-live.c: Likewise.\n+\t* tree-ssa-loop-ch.c: Likewise.\n+\t* tree-ssa-loop-im.c: Likewise.\n+\t* tree-ssa-loop-ivcanon.c: Likewise.\n+\t* tree-ssa-loop-ivopts.c: Likewise.\n+\t* tree-ssa-loop-manip.c: Likewise.\n+\t* tree-ssa-loop-niter.c: Likewise.\n+\t* tree-ssa-loop-prefetch.c: Likewise.\n+\t* tree-ssa-loop.c: Likewise.\n+\t* tree-ssa-math-opts.c: Likewise.\n+\t* tree-ssa-phiopt.c: Likewise.\n+\t* tree-ssa-phiprop.c: Likewise.\n+\t* tree-ssa-pre.c: Likewise.\n+\t* tree-ssa-propagate.c: Likewise.\n+\t* tree-ssa-reassoc.c: Likewise.\n+\t* tree-ssa-sink.c: Likewise.\n+\t* tree-ssa-strlen.c: Likewise.\n+\t* tree-ssa-structalias.c: Likewise.\n+\t* tree-ssa-tail-merge.c: Likewise.\n+\t* tree-ssa-ter.c: Likewise.\n+\t* tree-ssa-threadedge.c: Likewise.\n+\t* tree-ssa-threadupdate.c: Likewise.\n+\t* tree-ssa-uncprop.c: Likewise.\n+\t* tree-ssa-uninit.c: Likewise.\n+\t* tree-ssa.c: Likewise.\n+\t* tree-stdarg.c: Likewise.\n+\t* tree-switch-conversion.c: Likewise.\n+\t* tree-tailcall.c: Likewise.\n+\t* tree-vect-data-refs.c: Likewise.\n+\t* tree-vect-generic.c: Likewise.\n+\t* tree-vect-loop-manip.c: Likewise.\n+\t* tree-vect-loop.c: Likewise.\n+\t* tree-vect-patterns.c: Likewise.\n+\t* tree-vect-slp.c: Likewise.\n+\t* tree-vect-stmts.c: Likewise.\n+\t* tree-vectorizer.c: Likewise.\n+\t* tree-vrp.c: Likewise.\n+\t* tree.c: Likewise.\n+\t* tsan.c: Likewise.\n+\t* value-prof.c: Likewise.\n+\t* vtable-verify.c: Likewise.\n+\n 2013-11-13  Steven Bosscher  <steven@gcc.gnu.org>\n \n \t* gimple-ssa-isolate-paths.c (pass_isolate_erroneous_paths): Comment"}, {"sha": "2987506e2983e011a3d8d96903e812ef0331f07c", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -1240,6 +1240,7 @@ OBJS = \\\n \tgimple-ssa-strength-reduction.o \\\n \tgimple-streamer-in.o \\\n \tgimple-streamer-out.o \\\n+\tgimple-walk.o \\\n \tgimplify.o \\\n \tgodump.o \\\n \tgraph.o \\"}, {"sha": "9b6f96872ec87c2ec738b407acfed34ddf9e8ebc", "filename": "gcc/asan.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Fasan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Fasan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fasan.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -24,6 +24,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"coretypes.h\"\n #include \"tree.h\"\n #include \"gimplify.h\"\n+#include \"gimple-iterator.h\"\n #include \"tree-iterator.h\"\n #include \"cgraph.h\"\n #include \"tree-ssanames.h\""}, {"sha": "9b480a247bbf671522162498781b5cb48192ada2", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -31,6 +31,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"langhooks.h\"\n #include \"bitmap.h\"\n #include \"gimple.h\"\n+#include \"gimple-iterator.h\"\n+#include \"gimple-walk.h\"\n #include \"gimple-ssa.h\"\n #include \"cgraph.h\"\n #include \"tree-cfg.h\""}, {"sha": "01f250a1519d3ee5b27a66234194022745c74347", "filename": "gcc/cfgloop.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Fcfgloop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Fcfgloop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloop.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -29,6 +29,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"flags.h\"\n #include \"tree.h\"\n #include \"gimple.h\"\n+#include \"gimple-iterator.h\"\n #include \"gimple-ssa.h\"\n #include \"pointer-set.h\"\n #include \"ggc.h\""}, {"sha": "6448605823b0bc35412c02937f67f767946a320a", "filename": "gcc/cfgloopmanip.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Fcfgloopmanip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Fcfgloopmanip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloopmanip.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -26,6 +26,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"cfgloop.h\"\n #include \"tree.h\"\n #include \"gimplify.h\"\n+#include \"gimple-iterator.h\"\n #include \"tree-ssa-loop-manip.h\"\n #include \"dumpfile.h\"\n "}, {"sha": "2841055635f4b19cbad36fe9ca0d6e55a6a190b4", "filename": "gcc/cgraph.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -40,6 +40,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"cgraph.h\"\n #include \"intl.h\"\n #include \"gimple.h\"\n+#include \"gimple-iterator.h\"\n #include \"timevar.h\"\n #include \"dumpfile.h\"\n #include \"gimple-ssa.h\""}, {"sha": "7834b065d529d1129c9d80b085ac693e4fc39b91", "filename": "gcc/cgraphbuild.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Fcgraphbuild.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Fcgraphbuild.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphbuild.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -24,6 +24,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm.h\"\n #include \"tree.h\"\n #include \"gimple.h\"\n+#include \"gimple-iterator.h\"\n+#include \"gimple-walk.h\"\n #include \"langhooks.h\"\n #include \"pointer-set.h\"\n #include \"intl.h\""}, {"sha": "51961fc7a792d57b4ba0f3be53e3d859e9cf9d7a", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -165,6 +165,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"output.h\"\n #include \"rtl.h\"\n #include \"gimplify.h\"\n+#include \"gimple-iterator.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-cfg.h\"\n #include \"tree-into-ssa.h\""}, {"sha": "2f1a8d03cb16ab50c045868bb6530524fdcbb27e", "filename": "gcc/config/aarch64/aarch64-builtins.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -31,6 +31,7 @@\n #include \"diagnostic-core.h\"\n #include \"optabs.h\"\n #include \"gimple.h\"\n+#include \"gimple-iterator.h\"\n \n enum aarch64_simd_builtin_type_mode\n {"}, {"sha": "c6faa40bf24ac664543f4e0eb22db8197946cc51", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -52,6 +52,8 @@\n #include \"cfgloop.h\"\n #include \"sched-int.h\"\n #include \"gimplify.h\"\n+#include \"gimple-iterator.h\"\n+#include \"gimple-walk.h\"\n #include \"intl.h\"\n #include \"params.h\"\n #include \"tm-constrs.h\""}, {"sha": "ecf1ef00385a7638b0050acff8e8144ca630970b", "filename": "gcc/gengtype.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Fgengtype.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Fgengtype.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -1769,9 +1769,9 @@ open_base_files (void)\n       \"tree.h\", \"rtl.h\", \"function.h\", \"insn-config.h\", \"expr.h\",\n       \"hard-reg-set.h\", \"basic-block.h\", \"cselib.h\", \"insn-addr.h\",\n       \"optabs.h\", \"libfuncs.h\", \"debug.h\", \"ggc.h\", \"cgraph.h\",\n-      \"gimple.h\", \"gimple-ssa.h\", \"tree-cfg.h\", \"tree-phinodes.h\",\n-      \"ssa-iterators.h\", \"tree-ssanames.h\", \"tree-ssa-loop.h\",\n-      \"tree-ssa-loop-ivopts.h\", \"tree-ssa-loop-manip.h\",\n+      \"gimple.h\", \"gimple-iterator.h\", \"gimple-ssa.h\", \"tree-cfg.h\",\n+      \"tree-phinodes.h\", \"ssa-iterators.h\", \"tree-ssanames.h\",\n+      \"tree-ssa-loop.h\", \"tree-ssa-loop-ivopts.h\", \"tree-ssa-loop-manip.h\",\n       \"tree-ssa-loop-niter.h\", \"tree-into-ssa.h\", \"tree-dfa.h\", \n       \"tree-ssa.h\", \"reload.h\", \"cpp-id-data.h\", \"tree-chrec.h\",\n       \"except.h\", \"output.h\",  \"cfgloop.h\","}, {"sha": "f66d3e79e192c6a067c6fbae7e27c864fcf8c287", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -28,6 +28,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"dumpfile.h\"\n #include \"bitmap.h\"\n #include \"gimplify.h\"\n+#include \"gimple-iterator.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-ssanames.h\"\n #include \"tree-into-ssa.h\""}, {"sha": "b945389289103f082cf9649f8273a4070816e819", "filename": "gcc/gimple-iterator.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Fgimple-iterator.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Fgimple-iterator.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-iterator.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -24,6 +24,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm.h\"\n #include \"tree.h\"\n #include \"gimple.h\"\n+#include \"gimple-iterator.h\"\n #include \"gimple-ssa.h\"\n #include \"cgraph.h\"\n #include \"tree-cfg.h\""}, {"sha": "a9360fd14a7e67bce4ca17fc007840ebf1c2db0f", "filename": "gcc/gimple-iterator.h", "status": "added", "additions": 288, "deletions": 0, "changes": 288, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Fgimple-iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Fgimple-iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-iterator.h?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -0,0 +1,288 @@\n+/* Header file for gimple iterators.\n+   Copyright (C) 2013 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#ifndef GCC_GIMPLE_ITERATOR_H\n+#define GCC_GIMPLE_ITERATOR_H\n+\n+/* Iterator object for GIMPLE statement sequences.  */\n+\n+typedef struct gimple_stmt_iterator_d\n+{\n+  /* Sequence node holding the current statement.  */\n+  gimple_seq_node ptr;\n+\n+  /* Sequence and basic block holding the statement.  These fields\n+     are necessary to handle edge cases such as when statement is\n+     added to an empty basic block or when the last statement of a\n+     block/sequence is removed.  */\n+  gimple_seq *seq;\n+  basic_block bb;\n+} gimple_stmt_iterator;\n+ \n+extern void gsi_insert_seq_before_without_update (gimple_stmt_iterator *,\n+\t\t\t\t\t\t  gimple_seq,\n+\t\t\t\t\t\t  enum gsi_iterator_update);\n+extern void gsi_insert_seq_before (gimple_stmt_iterator *, gimple_seq,\n+\t\t\t\t   enum gsi_iterator_update);\n+extern void gsi_insert_seq_after_without_update (gimple_stmt_iterator *,\n+\t\t\t\t\t\t gimple_seq,\n+\t\t\t\t\t\t enum gsi_iterator_update);\n+extern void gsi_insert_seq_after (gimple_stmt_iterator *, gimple_seq,\n+\t\t\t\t  enum gsi_iterator_update);\n+extern gimple_seq gsi_split_seq_after (gimple_stmt_iterator);\n+extern void gsi_set_stmt (gimple_stmt_iterator *, gimple);\n+extern void gsi_split_seq_before (gimple_stmt_iterator *, gimple_seq *);\n+extern void gsi_replace (gimple_stmt_iterator *, gimple, bool);\n+extern void gsi_replace_with_seq (gimple_stmt_iterator *, gimple_seq, bool);\n+extern void gsi_insert_before_without_update (gimple_stmt_iterator *, gimple,\n+\t\t\t\t\t      enum gsi_iterator_update);\n+extern void gsi_insert_before (gimple_stmt_iterator *, gimple,\n+\t\t\t       enum gsi_iterator_update);\n+extern void gsi_insert_after_without_update (gimple_stmt_iterator *, gimple,\n+\t\t\t\t\t     enum gsi_iterator_update);\n+extern void gsi_insert_after (gimple_stmt_iterator *, gimple,\n+\t\t\t      enum gsi_iterator_update);\n+extern bool gsi_remove (gimple_stmt_iterator *, bool);\n+extern gimple_stmt_iterator gsi_for_stmt (gimple);\n+extern void gsi_move_after (gimple_stmt_iterator *, gimple_stmt_iterator *);\n+extern void gsi_move_before (gimple_stmt_iterator *, gimple_stmt_iterator *);\n+extern void gsi_move_to_bb_end (gimple_stmt_iterator *, basic_block);\n+extern void gsi_insert_on_edge (edge, gimple);\n+extern void gsi_insert_seq_on_edge (edge, gimple_seq);\n+extern basic_block gsi_insert_on_edge_immediate (edge, gimple);\n+extern basic_block gsi_insert_seq_on_edge_immediate (edge, gimple_seq);\n+extern void gsi_commit_edge_inserts (void);\n+extern void gsi_commit_one_edge_insert (edge, basic_block *);\n+extern gimple_stmt_iterator gsi_start_phis (basic_block);\n+\n+/* Return a new iterator pointing to GIMPLE_SEQ's first statement.  */\n+\n+static inline gimple_stmt_iterator\n+gsi_start_1 (gimple_seq *seq)\n+{\n+  gimple_stmt_iterator i;\n+\n+  i.ptr = gimple_seq_first (*seq);\n+  i.seq = seq;\n+  i.bb = i.ptr ? gimple_bb (i.ptr) : NULL;\n+\n+  return i;\n+}\n+\n+#define gsi_start(x) gsi_start_1 (&(x))\n+\n+static inline gimple_stmt_iterator\n+gsi_none (void)\n+{\n+  gimple_stmt_iterator i;\n+  i.ptr = NULL;\n+  i.seq = NULL;\n+  i.bb = NULL;\n+  return i;\n+}\n+\n+/* Return a new iterator pointing to the first statement in basic block BB.  */\n+\n+static inline gimple_stmt_iterator\n+gsi_start_bb (basic_block bb)\n+{\n+  gimple_stmt_iterator i;\n+  gimple_seq *seq;\n+\n+  seq = bb_seq_addr (bb);\n+  i.ptr = gimple_seq_first (*seq);\n+  i.seq = seq;\n+  i.bb = bb;\n+\n+  return i;\n+}\n+\n+/* Return a new iterator initially pointing to GIMPLE_SEQ's last statement.  */\n+\n+static inline gimple_stmt_iterator\n+gsi_last_1 (gimple_seq *seq)\n+{\n+  gimple_stmt_iterator i;\n+\n+  i.ptr = gimple_seq_last (*seq);\n+  i.seq = seq;\n+  i.bb = i.ptr ? gimple_bb (i.ptr) : NULL;\n+\n+  return i;\n+}\n+\n+#define gsi_last(x) gsi_last_1 (&(x))\n+\n+/* Return a new iterator pointing to the last statement in basic block BB.  */\n+\n+static inline gimple_stmt_iterator\n+gsi_last_bb (basic_block bb)\n+{\n+  gimple_stmt_iterator i;\n+  gimple_seq *seq;\n+\n+  seq = bb_seq_addr (bb);\n+  i.ptr = gimple_seq_last (*seq);\n+  i.seq = seq;\n+  i.bb = bb;\n+\n+  return i;\n+}\n+\n+/* Return true if I is at the end of its sequence.  */\n+\n+static inline bool\n+gsi_end_p (gimple_stmt_iterator i)\n+{\n+  return i.ptr == NULL;\n+}\n+\n+/* Return true if I is one statement before the end of its sequence.  */\n+\n+static inline bool\n+gsi_one_before_end_p (gimple_stmt_iterator i)\n+{\n+  return i.ptr != NULL && i.ptr->gsbase.next == NULL;\n+}\n+\n+/* Advance the iterator to the next gimple statement.  */\n+\n+static inline void\n+gsi_next (gimple_stmt_iterator *i)\n+{\n+  i->ptr = i->ptr->gsbase.next;\n+}\n+\n+/* Advance the iterator to the previous gimple statement.  */\n+\n+static inline void\n+gsi_prev (gimple_stmt_iterator *i)\n+{\n+  gimple prev = i->ptr->gsbase.prev;\n+  if (prev->gsbase.next)\n+    i->ptr = prev;\n+  else\n+    i->ptr = NULL;\n+}\n+\n+/* Return the current stmt.  */\n+\n+static inline gimple\n+gsi_stmt (gimple_stmt_iterator i)\n+{\n+  return i.ptr;\n+}\n+\n+/* Return a block statement iterator that points to the first non-label\n+   statement in block BB.  */\n+\n+static inline gimple_stmt_iterator\n+gsi_after_labels (basic_block bb)\n+{\n+  gimple_stmt_iterator gsi = gsi_start_bb (bb);\n+\n+  while (!gsi_end_p (gsi) && gimple_code (gsi_stmt (gsi)) == GIMPLE_LABEL)\n+    gsi_next (&gsi);\n+\n+  return gsi;\n+}\n+\n+/* Advance the iterator to the next non-debug gimple statement.  */\n+\n+static inline void\n+gsi_next_nondebug (gimple_stmt_iterator *i)\n+{\n+  do\n+    {\n+      gsi_next (i);\n+    }\n+  while (!gsi_end_p (*i) && is_gimple_debug (gsi_stmt (*i)));\n+}\n+\n+/* Advance the iterator to the next non-debug gimple statement.  */\n+\n+static inline void\n+gsi_prev_nondebug (gimple_stmt_iterator *i)\n+{\n+  do\n+    {\n+      gsi_prev (i);\n+    }\n+  while (!gsi_end_p (*i) && is_gimple_debug (gsi_stmt (*i)));\n+}\n+\n+/* Return a new iterator pointing to the first non-debug statement in\n+   basic block BB.  */\n+\n+static inline gimple_stmt_iterator\n+gsi_start_nondebug_bb (basic_block bb)\n+{\n+  gimple_stmt_iterator i = gsi_start_bb (bb);\n+\n+  if (!gsi_end_p (i) && is_gimple_debug (gsi_stmt (i)))\n+    gsi_next_nondebug (&i);\n+\n+  return i;\n+}\n+\n+/* Return a new iterator pointing to the first non-debug non-label statement in\n+   basic block BB.  */\n+\n+static inline gimple_stmt_iterator\n+gsi_start_nondebug_after_labels_bb (basic_block bb)\n+{\n+  gimple_stmt_iterator i = gsi_after_labels (bb);\n+\n+  if (!gsi_end_p (i) && is_gimple_debug (gsi_stmt (i)))\n+    gsi_next_nondebug (&i);\n+\n+  return i;\n+}\n+\n+/* Return a new iterator pointing to the last non-debug statement in\n+   basic block BB.  */\n+\n+static inline gimple_stmt_iterator\n+gsi_last_nondebug_bb (basic_block bb)\n+{\n+  gimple_stmt_iterator i = gsi_last_bb (bb);\n+\n+  if (!gsi_end_p (i) && is_gimple_debug (gsi_stmt (i)))\n+    gsi_prev_nondebug (&i);\n+\n+  return i;\n+}\n+\n+/* Return the basic block associated with this iterator.  */\n+\n+static inline basic_block\n+gsi_bb (gimple_stmt_iterator i)\n+{\n+  return i.bb;\n+}\n+\n+/* Return the sequence associated with this iterator.  */\n+\n+static inline gimple_seq\n+gsi_seq (gimple_stmt_iterator i)\n+{\n+  return *i.seq;\n+}\n+\n+#endif /* GCC_GIMPLE_ITERATOR_H */"}, {"sha": "519e984da28f069437c5b7e97848157f38f193f3", "filename": "gcc/gimple-low.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Fgimple-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Fgimple-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-low.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -24,6 +24,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm.h\"\n #include \"tree.h\"\n #include \"gimple.h\"\n+#include \"gimple-iterator.h\"\n #include \"tree-iterator.h\"\n #include \"tree-inline.h\"\n #include \"flags.h\""}, {"sha": "86c2a55c216cf101e9750193d72707b9a32a9f10", "filename": "gcc/gimple-pretty-print.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Fgimple-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Fgimple-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-pretty-print.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -29,6 +29,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"hashtab.h\"\n #include \"bitmap.h\"\n #include \"gimple.h\"\n+#include \"gimple-iterator.h\"\n #include \"gimple-ssa.h\"\n #include \"cgraph.h\"\n #include \"tree-cfg.h\""}, {"sha": "f9bb249436f491f01bff78712108d483f3400b5c", "filename": "gcc/gimple-ssa-isolate-paths.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Fgimple-ssa-isolate-paths.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Fgimple-ssa-isolate-paths.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-isolate-paths.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -27,6 +27,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"flags.h\"\n #include \"basic-block.h\"\n #include \"gimple.h\"\n+#include \"gimple-iterator.h\"\n+#include \"gimple-walk.h\"\n #include \"tree-ssa.h\"\n #include \"tree-ssanames.h\"\n #include \"gimple-ssa.h\""}, {"sha": "35a725054bdfcdb20d90f51b586a4412ec43a90f", "filename": "gcc/gimple-ssa-strength-reduction.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Fgimple-ssa-strength-reduction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Fgimple-ssa-strength-reduction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-strength-reduction.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -38,6 +38,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"coretypes.h\"\n #include \"tree.h\"\n #include \"gimplify.h\"\n+#include \"gimple-iterator.h\"\n #include \"basic-block.h\"\n #include \"tree-pass.h\"\n #include \"cfgloop.h\""}, {"sha": "6f8f51a18cee220be4fc8b53349dc011203a2ace", "filename": "gcc/gimple-streamer-in.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Fgimple-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Fgimple-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-streamer-in.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -25,6 +25,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"diagnostic.h\"\n #include \"tree.h\"\n #include \"gimple.h\"\n+#include \"gimple-iterator.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-phinodes.h\"\n #include \"tree-ssanames.h\""}, {"sha": "4d0664f3d98e4d002dafd8d097d78abfa04fc0d7", "filename": "gcc/gimple-streamer-out.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Fgimple-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Fgimple-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-streamer-out.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -24,6 +24,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"coretypes.h\"\n #include \"tree.h\"\n #include \"gimple.h\"\n+#include \"gimple-iterator.h\"\n #include \"gimple-ssa.h\"\n #include \"data-streamer.h\"\n #include \"gimple-streamer.h\""}, {"sha": "deb4673354a661de3e7fa35c930777c6ea53b505", "filename": "gcc/gimple-walk.c", "status": "added", "additions": 871, "deletions": 0, "changes": 871, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Fgimple-walk.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Fgimple-walk.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-walk.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -0,0 +1,871 @@\n+/* Gimple walk support.\n+\n+   Copyright (C) 2007-2013 Free Software Foundation, Inc.\n+   Contributed by Aldy Hernandez <aldyh@redhat.com>\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+#include \"tree.h\"\n+#include \"gimple.h\"\n+#include \"gimple-iterator.h\"\n+#include \"gimple-walk.h\"\n+#include \"gimple-walk.h\"\n+#include \"demangle.h\"\n+\n+/* Walk all the statements in the sequence *PSEQ calling walk_gimple_stmt\n+   on each one.  WI is as in walk_gimple_stmt.\n+\n+   If walk_gimple_stmt returns non-NULL, the walk is stopped, and the\n+   value is stored in WI->CALLBACK_RESULT.  Also, the statement that\n+   produced the value is returned if this statement has not been\n+   removed by a callback (wi->removed_stmt).  If the statement has\n+   been removed, NULL is returned.\n+\n+   Otherwise, all the statements are walked and NULL returned.  */\n+\n+gimple\n+walk_gimple_seq_mod (gimple_seq *pseq, walk_stmt_fn callback_stmt,\n+\t\t     walk_tree_fn callback_op, struct walk_stmt_info *wi)\n+{\n+  gimple_stmt_iterator gsi;\n+\n+  for (gsi = gsi_start (*pseq); !gsi_end_p (gsi); )\n+    {\n+      tree ret = walk_gimple_stmt (&gsi, callback_stmt, callback_op, wi);\n+      if (ret)\n+\t{\n+\t  /* If CALLBACK_STMT or CALLBACK_OP return a value, WI must exist\n+\t     to hold it.  */\n+\t  gcc_assert (wi);\n+\t  wi->callback_result = ret;\n+\n+\t  return wi->removed_stmt ? NULL : gsi_stmt (gsi);\n+\t}\n+\n+      if (!wi->removed_stmt)\n+\tgsi_next (&gsi);\n+    }\n+\n+  if (wi)\n+    wi->callback_result = NULL_TREE;\n+\n+  return NULL;\n+}\n+\n+\n+/* Like walk_gimple_seq_mod, but ensure that the head of SEQ isn't\n+   changed by the callbacks.  */\n+\n+gimple\n+walk_gimple_seq (gimple_seq seq, walk_stmt_fn callback_stmt,\n+\t\t walk_tree_fn callback_op, struct walk_stmt_info *wi)\n+{\n+  gimple_seq seq2 = seq;\n+  gimple ret = walk_gimple_seq_mod (&seq2, callback_stmt, callback_op, wi);\n+  gcc_assert (seq2 == seq);\n+  return ret;\n+}\n+\n+\n+/* Helper function for walk_gimple_stmt.  Walk operands of a GIMPLE_ASM.  */\n+\n+static tree\n+walk_gimple_asm (gimple stmt, walk_tree_fn callback_op,\n+\t\t struct walk_stmt_info *wi)\n+{\n+  tree ret, op;\n+  unsigned noutputs;\n+  const char **oconstraints;\n+  unsigned i, n;\n+  const char *constraint;\n+  bool allows_mem, allows_reg, is_inout;\n+\n+  noutputs = gimple_asm_noutputs (stmt);\n+  oconstraints = (const char **) alloca ((noutputs) * sizeof (const char *));\n+\n+  if (wi)\n+    wi->is_lhs = true;\n+\n+  for (i = 0; i < noutputs; i++)\n+    {\n+      op = gimple_asm_output_op (stmt, i);\n+      constraint = TREE_STRING_POINTER (TREE_VALUE (TREE_PURPOSE (op)));\n+      oconstraints[i] = constraint;\n+      parse_output_constraint (&constraint, i, 0, 0, &allows_mem, &allows_reg,\n+\t                       &is_inout);\n+      if (wi)\n+\twi->val_only = (allows_reg || !allows_mem);\n+      ret = walk_tree (&TREE_VALUE (op), callback_op, wi, NULL);\n+      if (ret)\n+\treturn ret;\n+    }\n+\n+  n = gimple_asm_ninputs (stmt);\n+  for (i = 0; i < n; i++)\n+    {\n+      op = gimple_asm_input_op (stmt, i);\n+      constraint = TREE_STRING_POINTER (TREE_VALUE (TREE_PURPOSE (op)));\n+      parse_input_constraint (&constraint, 0, 0, noutputs, 0,\n+\t\t\t      oconstraints, &allows_mem, &allows_reg);\n+      if (wi)\n+\t{\n+\t  wi->val_only = (allows_reg || !allows_mem);\n+          /* Although input \"m\" is not really a LHS, we need a lvalue.  */\n+\t  wi->is_lhs = !wi->val_only;\n+\t}\n+      ret = walk_tree (&TREE_VALUE (op), callback_op, wi, NULL);\n+      if (ret)\n+\treturn ret;\n+    }\n+\n+  if (wi)\n+    {\n+      wi->is_lhs = false;\n+      wi->val_only = true;\n+    }\n+\n+  n = gimple_asm_nlabels (stmt);\n+  for (i = 0; i < n; i++)\n+    {\n+      op = gimple_asm_label_op (stmt, i);\n+      ret = walk_tree (&TREE_VALUE (op), callback_op, wi, NULL);\n+      if (ret)\n+\treturn ret;\n+    }\n+\n+  return NULL_TREE;\n+}\n+\n+\n+/* Helper function of WALK_GIMPLE_STMT.  Walk every tree operand in\n+   STMT.  CALLBACK_OP and WI are as in WALK_GIMPLE_STMT.\n+\n+   CALLBACK_OP is called on each operand of STMT via walk_tree.\n+   Additional parameters to walk_tree must be stored in WI.  For each operand\n+   OP, walk_tree is called as:\n+\n+\twalk_tree (&OP, CALLBACK_OP, WI, WI->PSET)\n+\n+   If CALLBACK_OP returns non-NULL for an operand, the remaining\n+   operands are not scanned.\n+\n+   The return value is that returned by the last call to walk_tree, or\n+   NULL_TREE if no CALLBACK_OP is specified.  */\n+\n+tree\n+walk_gimple_op (gimple stmt, walk_tree_fn callback_op,\n+\t\tstruct walk_stmt_info *wi)\n+{\n+  struct pointer_set_t *pset = (wi) ? wi->pset : NULL;\n+  unsigned i;\n+  tree ret = NULL_TREE;\n+\n+  switch (gimple_code (stmt))\n+    {\n+    case GIMPLE_ASSIGN:\n+      /* Walk the RHS operands.  If the LHS is of a non-renamable type or\n+         is a register variable, we may use a COMPONENT_REF on the RHS.  */\n+      if (wi)\n+\t{\n+\t  tree lhs = gimple_assign_lhs (stmt);\n+\t  wi->val_only\n+\t    = (is_gimple_reg_type (TREE_TYPE (lhs)) && !is_gimple_reg (lhs))\n+\t      || gimple_assign_rhs_class (stmt) != GIMPLE_SINGLE_RHS;\n+\t}\n+\n+      for (i = 1; i < gimple_num_ops (stmt); i++)\n+\t{\n+\t  ret = walk_tree (gimple_op_ptr (stmt, i), callback_op, wi,\n+\t\t\t   pset);\n+\t  if (ret)\n+\t    return ret;\n+\t}\n+\n+      /* Walk the LHS.  If the RHS is appropriate for a memory, we\n+\t may use a COMPONENT_REF on the LHS.  */\n+      if (wi)\n+\t{\n+          /* If the RHS is of a non-renamable type or is a register variable,\n+\t     we may use a COMPONENT_REF on the LHS.  */\n+\t  tree rhs1 = gimple_assign_rhs1 (stmt);\n+\t  wi->val_only\n+\t    = (is_gimple_reg_type (TREE_TYPE (rhs1)) && !is_gimple_reg (rhs1))\n+\t      || gimple_assign_rhs_class (stmt) != GIMPLE_SINGLE_RHS;\n+\t  wi->is_lhs = true;\n+\t}\n+\n+      ret = walk_tree (gimple_op_ptr (stmt, 0), callback_op, wi, pset);\n+      if (ret)\n+\treturn ret;\n+\n+      if (wi)\n+\t{\n+\t  wi->val_only = true;\n+\t  wi->is_lhs = false;\n+\t}\n+      break;\n+\n+    case GIMPLE_CALL:\n+      if (wi)\n+\t{\n+\t  wi->is_lhs = false;\n+\t  wi->val_only = true;\n+\t}\n+\n+      ret = walk_tree (gimple_call_chain_ptr (stmt), callback_op, wi, pset);\n+      if (ret)\n+        return ret;\n+\n+      ret = walk_tree (gimple_call_fn_ptr (stmt), callback_op, wi, pset);\n+      if (ret)\n+        return ret;\n+\n+      for (i = 0; i < gimple_call_num_args (stmt); i++)\n+\t{\n+\t  if (wi)\n+\t    wi->val_only\n+\t      = is_gimple_reg_type (TREE_TYPE (gimple_call_arg (stmt, i)));\n+\t  ret = walk_tree (gimple_call_arg_ptr (stmt, i), callback_op, wi,\n+\t\t\t   pset);\n+\t  if (ret)\n+\t    return ret;\n+\t}\n+\n+      if (gimple_call_lhs (stmt))\n+\t{\n+\t  if (wi)\n+\t    {\n+\t      wi->is_lhs = true;\n+\t      wi->val_only\n+\t\t= is_gimple_reg_type (TREE_TYPE (gimple_call_lhs (stmt)));\n+\t    }\n+\n+\t  ret = walk_tree (gimple_call_lhs_ptr (stmt), callback_op, wi, pset);\n+\t  if (ret)\n+\t    return ret;\n+\t}\n+\n+      if (wi)\n+\t{\n+\t  wi->is_lhs = false;\n+\t  wi->val_only = true;\n+\t}\n+      break;\n+\n+    case GIMPLE_CATCH:\n+      ret = walk_tree (gimple_catch_types_ptr (stmt), callback_op, wi,\n+\t\t       pset);\n+      if (ret)\n+\treturn ret;\n+      break;\n+\n+    case GIMPLE_EH_FILTER:\n+      ret = walk_tree (gimple_eh_filter_types_ptr (stmt), callback_op, wi,\n+\t\t       pset);\n+      if (ret)\n+\treturn ret;\n+      break;\n+\n+    case GIMPLE_ASM:\n+      ret = walk_gimple_asm (stmt, callback_op, wi);\n+      if (ret)\n+\treturn ret;\n+      break;\n+\n+    case GIMPLE_OMP_CONTINUE:\n+      ret = walk_tree (gimple_omp_continue_control_def_ptr (stmt),\n+\t  \t       callback_op, wi, pset);\n+      if (ret)\n+\treturn ret;\n+\n+      ret = walk_tree (gimple_omp_continue_control_use_ptr (stmt),\n+\t  \t       callback_op, wi, pset);\n+      if (ret)\n+\treturn ret;\n+      break;\n+\n+    case GIMPLE_OMP_CRITICAL:\n+      ret = walk_tree (gimple_omp_critical_name_ptr (stmt), callback_op, wi,\n+\t\t       pset);\n+      if (ret)\n+\treturn ret;\n+      break;\n+\n+    case GIMPLE_OMP_FOR:\n+      ret = walk_tree (gimple_omp_for_clauses_ptr (stmt), callback_op, wi,\n+\t\t       pset);\n+      if (ret)\n+\treturn ret;\n+      for (i = 0; i < gimple_omp_for_collapse (stmt); i++)\n+\t{\n+\t  ret = walk_tree (gimple_omp_for_index_ptr (stmt, i), callback_op,\n+\t\t\t   wi, pset);\n+\t  if (ret)\n+\t    return ret;\n+\t  ret = walk_tree (gimple_omp_for_initial_ptr (stmt, i), callback_op,\n+\t\t\t   wi, pset);\n+\t  if (ret)\n+\t    return ret;\n+\t  ret = walk_tree (gimple_omp_for_final_ptr (stmt, i), callback_op,\n+\t\t\t   wi, pset);\n+\t  if (ret)\n+\t    return ret;\n+\t  ret = walk_tree (gimple_omp_for_incr_ptr (stmt, i), callback_op,\n+\t\t\t   wi, pset);\n+\t}\n+      if (ret)\n+\treturn ret;\n+      break;\n+\n+    case GIMPLE_OMP_PARALLEL:\n+      ret = walk_tree (gimple_omp_parallel_clauses_ptr (stmt), callback_op,\n+\t\t       wi, pset);\n+      if (ret)\n+\treturn ret;\n+      ret = walk_tree (gimple_omp_parallel_child_fn_ptr (stmt), callback_op,\n+\t\t       wi, pset);\n+      if (ret)\n+\treturn ret;\n+      ret = walk_tree (gimple_omp_parallel_data_arg_ptr (stmt), callback_op,\n+\t\t       wi, pset);\n+      if (ret)\n+\treturn ret;\n+      break;\n+\n+    case GIMPLE_OMP_TASK:\n+      ret = walk_tree (gimple_omp_task_clauses_ptr (stmt), callback_op,\n+\t\t       wi, pset);\n+      if (ret)\n+\treturn ret;\n+      ret = walk_tree (gimple_omp_task_child_fn_ptr (stmt), callback_op,\n+\t\t       wi, pset);\n+      if (ret)\n+\treturn ret;\n+      ret = walk_tree (gimple_omp_task_data_arg_ptr (stmt), callback_op,\n+\t\t       wi, pset);\n+      if (ret)\n+\treturn ret;\n+      ret = walk_tree (gimple_omp_task_copy_fn_ptr (stmt), callback_op,\n+\t\t       wi, pset);\n+      if (ret)\n+\treturn ret;\n+      ret = walk_tree (gimple_omp_task_arg_size_ptr (stmt), callback_op,\n+\t\t       wi, pset);\n+      if (ret)\n+\treturn ret;\n+      ret = walk_tree (gimple_omp_task_arg_align_ptr (stmt), callback_op,\n+\t\t       wi, pset);\n+      if (ret)\n+\treturn ret;\n+      break;\n+\n+    case GIMPLE_OMP_SECTIONS:\n+      ret = walk_tree (gimple_omp_sections_clauses_ptr (stmt), callback_op,\n+\t\t       wi, pset);\n+      if (ret)\n+\treturn ret;\n+\n+      ret = walk_tree (gimple_omp_sections_control_ptr (stmt), callback_op,\n+\t\t       wi, pset);\n+      if (ret)\n+\treturn ret;\n+\n+      break;\n+\n+    case GIMPLE_OMP_SINGLE:\n+      ret = walk_tree (gimple_omp_single_clauses_ptr (stmt), callback_op, wi,\n+\t\t       pset);\n+      if (ret)\n+\treturn ret;\n+      break;\n+\n+    case GIMPLE_OMP_TARGET:\n+      ret = walk_tree (gimple_omp_target_clauses_ptr (stmt), callback_op, wi,\n+\t\t       pset);\n+      if (ret)\n+\treturn ret;\n+      break;\n+\n+    case GIMPLE_OMP_TEAMS:\n+      ret = walk_tree (gimple_omp_teams_clauses_ptr (stmt), callback_op, wi,\n+\t\t       pset);\n+      if (ret)\n+\treturn ret;\n+      break;\n+\n+    case GIMPLE_OMP_ATOMIC_LOAD:\n+      ret = walk_tree (gimple_omp_atomic_load_lhs_ptr (stmt), callback_op, wi,\n+\t\t       pset);\n+      if (ret)\n+\treturn ret;\n+\n+      ret = walk_tree (gimple_omp_atomic_load_rhs_ptr (stmt), callback_op, wi,\n+\t\t       pset);\n+      if (ret)\n+\treturn ret;\n+      break;\n+\n+    case GIMPLE_OMP_ATOMIC_STORE:\n+      ret = walk_tree (gimple_omp_atomic_store_val_ptr (stmt), callback_op,\n+\t\t       wi, pset);\n+      if (ret)\n+\treturn ret;\n+      break;\n+\n+    case GIMPLE_TRANSACTION:\n+      ret = walk_tree (gimple_transaction_label_ptr (stmt), callback_op,\n+\t\t       wi, pset);\n+      if (ret)\n+\treturn ret;\n+      break;\n+\n+    case GIMPLE_OMP_RETURN:\n+      ret = walk_tree (gimple_omp_return_lhs_ptr (stmt), callback_op, wi,\n+\t\t       pset);\n+      if (ret)\n+\treturn ret;\n+      break;\n+\n+      /* Tuples that do not have operands.  */\n+    case GIMPLE_NOP:\n+    case GIMPLE_RESX:\n+    case GIMPLE_PREDICT:\n+      break;\n+\n+    default:\n+      {\n+\tenum gimple_statement_structure_enum gss;\n+\tgss = gimple_statement_structure (stmt);\n+\tif (gss == GSS_WITH_OPS || gss == GSS_WITH_MEM_OPS)\n+\t  for (i = 0; i < gimple_num_ops (stmt); i++)\n+\t    {\n+\t      ret = walk_tree (gimple_op_ptr (stmt, i), callback_op, wi, pset);\n+\t      if (ret)\n+\t\treturn ret;\n+\t    }\n+      }\n+      break;\n+    }\n+\n+  return NULL_TREE;\n+}\n+\n+\n+/* Walk the current statement in GSI (optionally using traversal state\n+   stored in WI).  If WI is NULL, no state is kept during traversal.\n+   The callback CALLBACK_STMT is called.  If CALLBACK_STMT indicates\n+   that it has handled all the operands of the statement, its return\n+   value is returned.  Otherwise, the return value from CALLBACK_STMT\n+   is discarded and its operands are scanned.\n+\n+   If CALLBACK_STMT is NULL or it didn't handle the operands,\n+   CALLBACK_OP is called on each operand of the statement via\n+   walk_gimple_op.  If walk_gimple_op returns non-NULL for any\n+   operand, the remaining operands are not scanned.  In this case, the\n+   return value from CALLBACK_OP is returned.\n+\n+   In any other case, NULL_TREE is returned.  */\n+\n+tree\n+walk_gimple_stmt (gimple_stmt_iterator *gsi, walk_stmt_fn callback_stmt,\n+\t\t  walk_tree_fn callback_op, struct walk_stmt_info *wi)\n+{\n+  gimple ret;\n+  tree tree_ret;\n+  gimple stmt = gsi_stmt (*gsi);\n+\n+  if (wi)\n+    {\n+      wi->gsi = *gsi;\n+      wi->removed_stmt = false;\n+\n+      if (wi->want_locations && gimple_has_location (stmt))\n+\tinput_location = gimple_location (stmt);\n+    }\n+\n+  ret = NULL;\n+\n+  /* Invoke the statement callback.  Return if the callback handled\n+     all of STMT operands by itself.  */\n+  if (callback_stmt)\n+    {\n+      bool handled_ops = false;\n+      tree_ret = callback_stmt (gsi, &handled_ops, wi);\n+      if (handled_ops)\n+\treturn tree_ret;\n+\n+      /* If CALLBACK_STMT did not handle operands, it should not have\n+\t a value to return.  */\n+      gcc_assert (tree_ret == NULL);\n+\n+      if (wi && wi->removed_stmt)\n+\treturn NULL;\n+\n+      /* Re-read stmt in case the callback changed it.  */\n+      stmt = gsi_stmt (*gsi);\n+    }\n+\n+  /* If CALLBACK_OP is defined, invoke it on every operand of STMT.  */\n+  if (callback_op)\n+    {\n+      tree_ret = walk_gimple_op (stmt, callback_op, wi);\n+      if (tree_ret)\n+\treturn tree_ret;\n+    }\n+\n+  /* If STMT can have statements inside (e.g. GIMPLE_BIND), walk them.  */\n+  switch (gimple_code (stmt))\n+    {\n+    case GIMPLE_BIND:\n+      ret = walk_gimple_seq_mod (gimple_bind_body_ptr (stmt), callback_stmt,\n+\t\t\t\t callback_op, wi);\n+      if (ret)\n+\treturn wi->callback_result;\n+      break;\n+\n+    case GIMPLE_CATCH:\n+      ret = walk_gimple_seq_mod (gimple_catch_handler_ptr (stmt), callback_stmt,\n+\t\t\t\t callback_op, wi);\n+      if (ret)\n+\treturn wi->callback_result;\n+      break;\n+\n+    case GIMPLE_EH_FILTER:\n+      ret = walk_gimple_seq_mod (gimple_eh_filter_failure_ptr (stmt), callback_stmt,\n+\t\t             callback_op, wi);\n+      if (ret)\n+\treturn wi->callback_result;\n+      break;\n+\n+    case GIMPLE_EH_ELSE:\n+      ret = walk_gimple_seq_mod (gimple_eh_else_n_body_ptr (stmt),\n+\t\t\t     callback_stmt, callback_op, wi);\n+      if (ret)\n+\treturn wi->callback_result;\n+      ret = walk_gimple_seq_mod (gimple_eh_else_e_body_ptr (stmt),\n+\t\t\t     callback_stmt, callback_op, wi);\n+      if (ret)\n+\treturn wi->callback_result;\n+      break;\n+\n+    case GIMPLE_TRY:\n+      ret = walk_gimple_seq_mod (gimple_try_eval_ptr (stmt), callback_stmt, callback_op,\n+\t                     wi);\n+      if (ret)\n+\treturn wi->callback_result;\n+\n+      ret = walk_gimple_seq_mod (gimple_try_cleanup_ptr (stmt), callback_stmt,\n+\t                     callback_op, wi);\n+      if (ret)\n+\treturn wi->callback_result;\n+      break;\n+\n+    case GIMPLE_OMP_FOR:\n+      ret = walk_gimple_seq_mod (gimple_omp_for_pre_body_ptr (stmt), callback_stmt,\n+\t\t             callback_op, wi);\n+      if (ret)\n+\treturn wi->callback_result;\n+\n+      /* FALL THROUGH.  */\n+    case GIMPLE_OMP_CRITICAL:\n+    case GIMPLE_OMP_MASTER:\n+    case GIMPLE_OMP_TASKGROUP:\n+    case GIMPLE_OMP_ORDERED:\n+    case GIMPLE_OMP_SECTION:\n+    case GIMPLE_OMP_PARALLEL:\n+    case GIMPLE_OMP_TASK:\n+    case GIMPLE_OMP_SECTIONS:\n+    case GIMPLE_OMP_SINGLE:\n+    case GIMPLE_OMP_TARGET:\n+    case GIMPLE_OMP_TEAMS:\n+      ret = walk_gimple_seq_mod (gimple_omp_body_ptr (stmt), callback_stmt,\n+\t\t\t     callback_op, wi);\n+      if (ret)\n+\treturn wi->callback_result;\n+      break;\n+\n+    case GIMPLE_WITH_CLEANUP_EXPR:\n+      ret = walk_gimple_seq_mod (gimple_wce_cleanup_ptr (stmt), callback_stmt,\n+\t\t\t     callback_op, wi);\n+      if (ret)\n+\treturn wi->callback_result;\n+      break;\n+\n+    case GIMPLE_TRANSACTION:\n+      ret = walk_gimple_seq_mod (gimple_transaction_body_ptr (stmt),\n+\t\t\t     callback_stmt, callback_op, wi);\n+      if (ret)\n+\treturn wi->callback_result;\n+      break;\n+\n+    default:\n+      gcc_assert (!gimple_has_substatements (stmt));\n+      break;\n+    }\n+\n+  return NULL;\n+}\n+\n+/* From a tree operand OP return the base of a load or store operation\n+   or NULL_TREE if OP is not a load or a store.  */\n+\n+static tree\n+get_base_loadstore (tree op)\n+{\n+  while (handled_component_p (op))\n+    op = TREE_OPERAND (op, 0);\n+  if (DECL_P (op)\n+      || INDIRECT_REF_P (op)\n+      || TREE_CODE (op) == MEM_REF\n+      || TREE_CODE (op) == TARGET_MEM_REF)\n+    return op;\n+  return NULL_TREE;\n+}\n+\n+\n+/* For the statement STMT call the callbacks VISIT_LOAD, VISIT_STORE and\n+   VISIT_ADDR if non-NULL on loads, store and address-taken operands\n+   passing the STMT, the base of the operand and DATA to it.  The base\n+   will be either a decl, an indirect reference (including TARGET_MEM_REF)\n+   or the argument of an address expression.\n+   Returns the results of these callbacks or'ed.  */\n+\n+bool\n+walk_stmt_load_store_addr_ops (gimple stmt, void *data,\n+\t\t\t       bool (*visit_load)(gimple, tree, void *),\n+\t\t\t       bool (*visit_store)(gimple, tree, void *),\n+\t\t\t       bool (*visit_addr)(gimple, tree, void *))\n+{\n+  bool ret = false;\n+  unsigned i;\n+  if (gimple_assign_single_p (stmt))\n+    {\n+      tree lhs, rhs;\n+      if (visit_store)\n+\t{\n+\t  lhs = get_base_loadstore (gimple_assign_lhs (stmt));\n+\t  if (lhs)\n+\t    ret |= visit_store (stmt, lhs, data);\n+\t}\n+      rhs = gimple_assign_rhs1 (stmt);\n+      while (handled_component_p (rhs))\n+\trhs = TREE_OPERAND (rhs, 0);\n+      if (visit_addr)\n+\t{\n+\t  if (TREE_CODE (rhs) == ADDR_EXPR)\n+\t    ret |= visit_addr (stmt, TREE_OPERAND (rhs, 0), data);\n+\t  else if (TREE_CODE (rhs) == TARGET_MEM_REF\n+\t\t   && TREE_CODE (TMR_BASE (rhs)) == ADDR_EXPR)\n+\t    ret |= visit_addr (stmt, TREE_OPERAND (TMR_BASE (rhs), 0), data);\n+\t  else if (TREE_CODE (rhs) == OBJ_TYPE_REF\n+\t\t   && TREE_CODE (OBJ_TYPE_REF_OBJECT (rhs)) == ADDR_EXPR)\n+\t    ret |= visit_addr (stmt, TREE_OPERAND (OBJ_TYPE_REF_OBJECT (rhs),\n+\t\t\t\t\t\t   0), data);\n+\t  else if (TREE_CODE (rhs) == CONSTRUCTOR)\n+\t    {\n+\t      unsigned int ix;\n+\t      tree val;\n+\n+\t      FOR_EACH_CONSTRUCTOR_VALUE (CONSTRUCTOR_ELTS (rhs), ix, val)\n+\t\tif (TREE_CODE (val) == ADDR_EXPR)\n+\t\t  ret |= visit_addr (stmt, TREE_OPERAND (val, 0), data);\n+\t\telse if (TREE_CODE (val) == OBJ_TYPE_REF\n+\t\t\t && TREE_CODE (OBJ_TYPE_REF_OBJECT (val)) == ADDR_EXPR)\n+\t\t  ret |= visit_addr (stmt,\n+\t\t\t\t     TREE_OPERAND (OBJ_TYPE_REF_OBJECT (val),\n+\t\t\t\t\t\t   0), data);\n+\t    }\n+          lhs = gimple_assign_lhs (stmt);\n+\t  if (TREE_CODE (lhs) == TARGET_MEM_REF\n+              && TREE_CODE (TMR_BASE (lhs)) == ADDR_EXPR)\n+            ret |= visit_addr (stmt, TREE_OPERAND (TMR_BASE (lhs), 0), data);\n+\t}\n+      if (visit_load)\n+\t{\n+\t  rhs = get_base_loadstore (rhs);\n+\t  if (rhs)\n+\t    ret |= visit_load (stmt, rhs, data);\n+\t}\n+    }\n+  else if (visit_addr\n+\t   && (is_gimple_assign (stmt)\n+\t       || gimple_code (stmt) == GIMPLE_COND))\n+    {\n+      for (i = 0; i < gimple_num_ops (stmt); ++i)\n+\t{\n+\t  tree op = gimple_op (stmt, i);\n+\t  if (op == NULL_TREE)\n+\t    ;\n+\t  else if (TREE_CODE (op) == ADDR_EXPR)\n+\t    ret |= visit_addr (stmt, TREE_OPERAND (op, 0), data);\n+\t  /* COND_EXPR and VCOND_EXPR rhs1 argument is a comparison\n+\t     tree with two operands.  */\n+\t  else if (i == 1 && COMPARISON_CLASS_P (op))\n+\t    {\n+\t      if (TREE_CODE (TREE_OPERAND (op, 0)) == ADDR_EXPR)\n+\t\tret |= visit_addr (stmt, TREE_OPERAND (TREE_OPERAND (op, 0),\n+\t\t\t\t\t\t       0), data);\n+\t      if (TREE_CODE (TREE_OPERAND (op, 1)) == ADDR_EXPR)\n+\t\tret |= visit_addr (stmt, TREE_OPERAND (TREE_OPERAND (op, 1),\n+\t\t\t\t\t\t       0), data);\n+\t    }\n+\t}\n+    }\n+  else if (is_gimple_call (stmt))\n+    {\n+      if (visit_store)\n+\t{\n+\t  tree lhs = gimple_call_lhs (stmt);\n+\t  if (lhs)\n+\t    {\n+\t      lhs = get_base_loadstore (lhs);\n+\t      if (lhs)\n+\t\tret |= visit_store (stmt, lhs, data);\n+\t    }\n+\t}\n+      if (visit_load || visit_addr)\n+\tfor (i = 0; i < gimple_call_num_args (stmt); ++i)\n+\t  {\n+\t    tree rhs = gimple_call_arg (stmt, i);\n+\t    if (visit_addr\n+\t\t&& TREE_CODE (rhs) == ADDR_EXPR)\n+\t      ret |= visit_addr (stmt, TREE_OPERAND (rhs, 0), data);\n+\t    else if (visit_load)\n+\t      {\n+\t\trhs = get_base_loadstore (rhs);\n+\t\tif (rhs)\n+\t\t  ret |= visit_load (stmt, rhs, data);\n+\t      }\n+\t  }\n+      if (visit_addr\n+\t  && gimple_call_chain (stmt)\n+\t  && TREE_CODE (gimple_call_chain (stmt)) == ADDR_EXPR)\n+\tret |= visit_addr (stmt, TREE_OPERAND (gimple_call_chain (stmt), 0),\n+\t\t\t   data);\n+      if (visit_addr\n+\t  && gimple_call_return_slot_opt_p (stmt)\n+\t  && gimple_call_lhs (stmt) != NULL_TREE\n+\t  && TREE_ADDRESSABLE (TREE_TYPE (gimple_call_lhs (stmt))))\n+\tret |= visit_addr (stmt, gimple_call_lhs (stmt), data);\n+    }\n+  else if (gimple_code (stmt) == GIMPLE_ASM)\n+    {\n+      unsigned noutputs;\n+      const char *constraint;\n+      const char **oconstraints;\n+      bool allows_mem, allows_reg, is_inout;\n+      noutputs = gimple_asm_noutputs (stmt);\n+      oconstraints = XALLOCAVEC (const char *, noutputs);\n+      if (visit_store || visit_addr)\n+\tfor (i = 0; i < gimple_asm_noutputs (stmt); ++i)\n+\t  {\n+\t    tree link = gimple_asm_output_op (stmt, i);\n+\t    tree op = get_base_loadstore (TREE_VALUE (link));\n+\t    if (op && visit_store)\n+\t      ret |= visit_store (stmt, op, data);\n+\t    if (visit_addr)\n+\t      {\n+\t\tconstraint = TREE_STRING_POINTER\n+\t\t    (TREE_VALUE (TREE_PURPOSE (link)));\n+\t\toconstraints[i] = constraint;\n+\t\tparse_output_constraint (&constraint, i, 0, 0, &allows_mem,\n+\t\t\t\t\t &allows_reg, &is_inout);\n+\t\tif (op && !allows_reg && allows_mem)\n+\t\t  ret |= visit_addr (stmt, op, data);\n+\t      }\n+\t  }\n+      if (visit_load || visit_addr)\n+\tfor (i = 0; i < gimple_asm_ninputs (stmt); ++i)\n+\t  {\n+\t    tree link = gimple_asm_input_op (stmt, i);\n+\t    tree op = TREE_VALUE (link);\n+\t    if (visit_addr\n+\t\t&& TREE_CODE (op) == ADDR_EXPR)\n+\t      ret |= visit_addr (stmt, TREE_OPERAND (op, 0), data);\n+\t    else if (visit_load || visit_addr)\n+\t      {\n+\t\top = get_base_loadstore (op);\n+\t\tif (op)\n+\t\t  {\n+\t\t    if (visit_load)\n+\t\t      ret |= visit_load (stmt, op, data);\n+\t\t    if (visit_addr)\n+\t\t      {\n+\t\t\tconstraint = TREE_STRING_POINTER\n+\t\t\t    (TREE_VALUE (TREE_PURPOSE (link)));\n+\t\t\tparse_input_constraint (&constraint, 0, 0, noutputs,\n+\t\t\t\t\t\t0, oconstraints,\n+\t\t\t\t\t\t&allows_mem, &allows_reg);\n+\t\t\tif (!allows_reg && allows_mem)\n+\t\t\t  ret |= visit_addr (stmt, op, data);\n+\t\t      }\n+\t\t  }\n+\t      }\n+\t  }\n+    }\n+  else if (gimple_code (stmt) == GIMPLE_RETURN)\n+    {\n+      tree op = gimple_return_retval (stmt);\n+      if (op)\n+\t{\n+\t  if (visit_addr\n+\t      && TREE_CODE (op) == ADDR_EXPR)\n+\t    ret |= visit_addr (stmt, TREE_OPERAND (op, 0), data);\n+\t  else if (visit_load)\n+\t    {\n+\t      op = get_base_loadstore (op);\n+\t      if (op)\n+\t\tret |= visit_load (stmt, op, data);\n+\t    }\n+\t}\n+    }\n+  else if (visit_addr\n+\t   && gimple_code (stmt) == GIMPLE_PHI)\n+    {\n+      for (i = 0; i < gimple_phi_num_args (stmt); ++i)\n+\t{\n+\t  tree op = gimple_phi_arg_def (stmt, i);\n+\t  if (TREE_CODE (op) == ADDR_EXPR)\n+\t    ret |= visit_addr (stmt, TREE_OPERAND (op, 0), data);\n+\t}\n+    }\n+  else if (visit_addr\n+\t   && gimple_code (stmt) == GIMPLE_GOTO)\n+    {\n+      tree op = gimple_goto_dest (stmt);\n+      if (TREE_CODE (op) == ADDR_EXPR)\n+\tret |= visit_addr (stmt, TREE_OPERAND (op, 0), data);\n+    }\n+\n+  return ret;\n+}\n+\n+/* Like walk_stmt_load_store_addr_ops but with NULL visit_addr.  IPA-CP\n+   should make a faster clone for this case.  */\n+\n+bool\n+walk_stmt_load_store_ops (gimple stmt, void *data,\n+\t\t\t  bool (*visit_load)(gimple, tree, void *),\n+\t\t\t  bool (*visit_store)(gimple, tree, void *))\n+{\n+  return walk_stmt_load_store_addr_ops (stmt, data,\n+\t\t\t\t\tvisit_load, visit_store, NULL);\n+}"}, {"sha": "0b9968a522d2324b24a2ed87ef16e18ea73b038b", "filename": "gcc/gimple-walk.h", "status": "added", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Fgimple-walk.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Fgimple-walk.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-walk.h?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -0,0 +1,99 @@\n+/* Header file for gimple statement walk support.\n+   Copyright (C) 2013 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#ifndef GCC_GIMPLE_WALK_H\n+#define GCC_GIMPLE_WALK_H\n+\n+/* Convenience routines to walk all statements of a gimple function.\n+   Note that this is useful exclusively before the code is converted\n+   into SSA form.  Once the program is in SSA form, the standard\n+   operand interface should be used to analyze/modify statements.  */\n+struct walk_stmt_info\n+{\n+  /* Points to the current statement being walked.  */\n+  gimple_stmt_iterator gsi;\n+\n+  /* Additional data that the callback functions may want to carry\n+     through the recursion.  */\n+  void *info;\n+\n+  /* Pointer map used to mark visited tree nodes when calling\n+     walk_tree on each operand.  If set to NULL, duplicate tree nodes\n+     will be visited more than once.  */\n+  struct pointer_set_t *pset;\n+\n+  /* Operand returned by the callbacks.  This is set when calling\n+     walk_gimple_seq.  If the walk_stmt_fn or walk_tree_fn callback\n+     returns non-NULL, this field will contain the tree returned by\n+     the last callback.  */\n+  tree callback_result;\n+\n+  /* Indicates whether the operand being examined may be replaced\n+     with something that matches is_gimple_val (if true) or something\n+     slightly more complicated (if false).  \"Something\" technically\n+     means the common subset of is_gimple_lvalue and is_gimple_rhs,\n+     but we never try to form anything more complicated than that, so\n+     we don't bother checking.\n+\n+     Also note that CALLBACK should update this flag while walking the\n+     sub-expressions of a statement.  For instance, when walking the\n+     statement 'foo (&var)', the flag VAL_ONLY will initially be set\n+     to true, however, when walking &var, the operand of that\n+     ADDR_EXPR does not need to be a GIMPLE value.  */\n+  BOOL_BITFIELD val_only : 1;\n+\n+  /* True if we are currently walking the LHS of an assignment.  */\n+  BOOL_BITFIELD is_lhs : 1;\n+\n+  /* Optional.  Set to true by the callback functions if they made any\n+     changes.  */\n+  BOOL_BITFIELD changed : 1;\n+\n+  /* True if we're interested in location information.  */\n+  BOOL_BITFIELD want_locations : 1;\n+\n+  /* True if we've removed the statement that was processed.  */\n+  BOOL_BITFIELD removed_stmt : 1;\n+};\n+\n+/* Callback for walk_gimple_stmt.  Called for every statement found\n+   during traversal.  The first argument points to the statement to\n+   walk.  The second argument is a flag that the callback sets to\n+   'true' if it the callback handled all the operands and\n+   sub-statements of the statement (the default value of this flag is\n+   'false').  The third argument is an anonymous pointer to data\n+   to be used by the callback.  */\n+typedef tree (*walk_stmt_fn) (gimple_stmt_iterator *, bool *,\n+\t\t\t      struct walk_stmt_info *);\n+\n+extern gimple walk_gimple_seq_mod (gimple_seq *, walk_stmt_fn, walk_tree_fn,\n+\t\t\t\t   struct walk_stmt_info *);\n+extern gimple walk_gimple_seq (gimple_seq, walk_stmt_fn, walk_tree_fn,\n+\t\t\t       struct walk_stmt_info *);\n+extern tree walk_gimple_op (gimple, walk_tree_fn, struct walk_stmt_info *);\n+extern tree walk_gimple_stmt (gimple_stmt_iterator *, walk_stmt_fn,\n+\t\t\t      walk_tree_fn, struct walk_stmt_info *);\n+extern bool walk_stmt_load_store_addr_ops (gimple, void *,\n+\t\t\t\t\t   bool (*)(gimple, tree, void *),\n+\t\t\t\t\t   bool (*)(gimple, tree, void *),\n+\t\t\t\t\t   bool (*)(gimple, tree, void *));\n+extern bool walk_stmt_load_store_ops (gimple, void *,\n+\t\t\t\t      bool (*)(gimple, tree, void *),\n+\t\t\t\t      bool (*)(gimple, tree, void *));\n+#endif /* GCC_GIMPLE_WALK_H */"}, {"sha": "0e073460110db593ddbb7b42eedfecdb287be2da", "filename": "gcc/gimple.c", "status": "modified", "additions": 11, "deletions": 839, "changes": 850, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -29,6 +29,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"hard-reg-set.h\"\n #include \"basic-block.h\"\n #include \"gimple.h\"\n+#include \"gimple-iterator.h\"\n+#include \"gimple-walk.h\"\n #include \"gimplify.h\"\n #include \"diagnostic.h\"\n #include \"value-prof.h\"\n@@ -1297,600 +1299,6 @@ gimple_seq_copy (gimple_seq src)\n }\n \n \n-/* Walk all the statements in the sequence *PSEQ calling walk_gimple_stmt\n-   on each one.  WI is as in walk_gimple_stmt.\n-\n-   If walk_gimple_stmt returns non-NULL, the walk is stopped, and the\n-   value is stored in WI->CALLBACK_RESULT.  Also, the statement that\n-   produced the value is returned if this statement has not been\n-   removed by a callback (wi->removed_stmt).  If the statement has\n-   been removed, NULL is returned.\n-\n-   Otherwise, all the statements are walked and NULL returned.  */\n-\n-gimple\n-walk_gimple_seq_mod (gimple_seq *pseq, walk_stmt_fn callback_stmt,\n-\t\t     walk_tree_fn callback_op, struct walk_stmt_info *wi)\n-{\n-  gimple_stmt_iterator gsi;\n-\n-  for (gsi = gsi_start (*pseq); !gsi_end_p (gsi); )\n-    {\n-      tree ret = walk_gimple_stmt (&gsi, callback_stmt, callback_op, wi);\n-      if (ret)\n-\t{\n-\t  /* If CALLBACK_STMT or CALLBACK_OP return a value, WI must exist\n-\t     to hold it.  */\n-\t  gcc_assert (wi);\n-\t  wi->callback_result = ret;\n-\n-\t  return wi->removed_stmt ? NULL : gsi_stmt (gsi);\n-\t}\n-\n-      if (!wi->removed_stmt)\n-\tgsi_next (&gsi);\n-    }\n-\n-  if (wi)\n-    wi->callback_result = NULL_TREE;\n-\n-  return NULL;\n-}\n-\n-\n-/* Like walk_gimple_seq_mod, but ensure that the head of SEQ isn't\n-   changed by the callbacks.  */\n-\n-gimple\n-walk_gimple_seq (gimple_seq seq, walk_stmt_fn callback_stmt,\n-\t\t walk_tree_fn callback_op, struct walk_stmt_info *wi)\n-{\n-  gimple_seq seq2 = seq;\n-  gimple ret = walk_gimple_seq_mod (&seq2, callback_stmt, callback_op, wi);\n-  gcc_assert (seq2 == seq);\n-  return ret;\n-}\n-\n-\n-/* Helper function for walk_gimple_stmt.  Walk operands of a GIMPLE_ASM.  */\n-\n-static tree\n-walk_gimple_asm (gimple stmt, walk_tree_fn callback_op,\n-\t\t struct walk_stmt_info *wi)\n-{\n-  tree ret, op;\n-  unsigned noutputs;\n-  const char **oconstraints;\n-  unsigned i, n;\n-  const char *constraint;\n-  bool allows_mem, allows_reg, is_inout;\n-\n-  noutputs = gimple_asm_noutputs (stmt);\n-  oconstraints = (const char **) alloca ((noutputs) * sizeof (const char *));\n-\n-  if (wi)\n-    wi->is_lhs = true;\n-\n-  for (i = 0; i < noutputs; i++)\n-    {\n-      op = gimple_asm_output_op (stmt, i);\n-      constraint = TREE_STRING_POINTER (TREE_VALUE (TREE_PURPOSE (op)));\n-      oconstraints[i] = constraint;\n-      parse_output_constraint (&constraint, i, 0, 0, &allows_mem, &allows_reg,\n-\t                       &is_inout);\n-      if (wi)\n-\twi->val_only = (allows_reg || !allows_mem);\n-      ret = walk_tree (&TREE_VALUE (op), callback_op, wi, NULL);\n-      if (ret)\n-\treturn ret;\n-    }\n-\n-  n = gimple_asm_ninputs (stmt);\n-  for (i = 0; i < n; i++)\n-    {\n-      op = gimple_asm_input_op (stmt, i);\n-      constraint = TREE_STRING_POINTER (TREE_VALUE (TREE_PURPOSE (op)));\n-      parse_input_constraint (&constraint, 0, 0, noutputs, 0,\n-\t\t\t      oconstraints, &allows_mem, &allows_reg);\n-      if (wi)\n-\t{\n-\t  wi->val_only = (allows_reg || !allows_mem);\n-          /* Although input \"m\" is not really a LHS, we need a lvalue.  */\n-\t  wi->is_lhs = !wi->val_only;\n-\t}\n-      ret = walk_tree (&TREE_VALUE (op), callback_op, wi, NULL);\n-      if (ret)\n-\treturn ret;\n-    }\n-\n-  if (wi)\n-    {\n-      wi->is_lhs = false;\n-      wi->val_only = true;\n-    }\n-\n-  n = gimple_asm_nlabels (stmt);\n-  for (i = 0; i < n; i++)\n-    {\n-      op = gimple_asm_label_op (stmt, i);\n-      ret = walk_tree (&TREE_VALUE (op), callback_op, wi, NULL);\n-      if (ret)\n-\treturn ret;\n-    }\n-\n-  return NULL_TREE;\n-}\n-\n-\n-/* Helper function of WALK_GIMPLE_STMT.  Walk every tree operand in\n-   STMT.  CALLBACK_OP and WI are as in WALK_GIMPLE_STMT.\n-\n-   CALLBACK_OP is called on each operand of STMT via walk_tree.\n-   Additional parameters to walk_tree must be stored in WI.  For each operand\n-   OP, walk_tree is called as:\n-\n-\twalk_tree (&OP, CALLBACK_OP, WI, WI->PSET)\n-\n-   If CALLBACK_OP returns non-NULL for an operand, the remaining\n-   operands are not scanned.\n-\n-   The return value is that returned by the last call to walk_tree, or\n-   NULL_TREE if no CALLBACK_OP is specified.  */\n-\n-tree\n-walk_gimple_op (gimple stmt, walk_tree_fn callback_op,\n-\t\tstruct walk_stmt_info *wi)\n-{\n-  struct pointer_set_t *pset = (wi) ? wi->pset : NULL;\n-  unsigned i;\n-  tree ret = NULL_TREE;\n-\n-  switch (gimple_code (stmt))\n-    {\n-    case GIMPLE_ASSIGN:\n-      /* Walk the RHS operands.  If the LHS is of a non-renamable type or\n-         is a register variable, we may use a COMPONENT_REF on the RHS.  */\n-      if (wi)\n-\t{\n-\t  tree lhs = gimple_assign_lhs (stmt);\n-\t  wi->val_only\n-\t    = (is_gimple_reg_type (TREE_TYPE (lhs)) && !is_gimple_reg (lhs))\n-\t      || gimple_assign_rhs_class (stmt) != GIMPLE_SINGLE_RHS;\n-\t}\n-\n-      for (i = 1; i < gimple_num_ops (stmt); i++)\n-\t{\n-\t  ret = walk_tree (gimple_op_ptr (stmt, i), callback_op, wi,\n-\t\t\t   pset);\n-\t  if (ret)\n-\t    return ret;\n-\t}\n-\n-      /* Walk the LHS.  If the RHS is appropriate for a memory, we\n-\t may use a COMPONENT_REF on the LHS.  */\n-      if (wi)\n-\t{\n-          /* If the RHS is of a non-renamable type or is a register variable,\n-\t     we may use a COMPONENT_REF on the LHS.  */\n-\t  tree rhs1 = gimple_assign_rhs1 (stmt);\n-\t  wi->val_only\n-\t    = (is_gimple_reg_type (TREE_TYPE (rhs1)) && !is_gimple_reg (rhs1))\n-\t      || gimple_assign_rhs_class (stmt) != GIMPLE_SINGLE_RHS;\n-\t  wi->is_lhs = true;\n-\t}\n-\n-      ret = walk_tree (gimple_op_ptr (stmt, 0), callback_op, wi, pset);\n-      if (ret)\n-\treturn ret;\n-\n-      if (wi)\n-\t{\n-\t  wi->val_only = true;\n-\t  wi->is_lhs = false;\n-\t}\n-      break;\n-\n-    case GIMPLE_CALL:\n-      if (wi)\n-\t{\n-\t  wi->is_lhs = false;\n-\t  wi->val_only = true;\n-\t}\n-\n-      ret = walk_tree (gimple_call_chain_ptr (stmt), callback_op, wi, pset);\n-      if (ret)\n-        return ret;\n-\n-      ret = walk_tree (gimple_call_fn_ptr (stmt), callback_op, wi, pset);\n-      if (ret)\n-        return ret;\n-\n-      for (i = 0; i < gimple_call_num_args (stmt); i++)\n-\t{\n-\t  if (wi)\n-\t    wi->val_only\n-\t      = is_gimple_reg_type (TREE_TYPE (gimple_call_arg (stmt, i)));\n-\t  ret = walk_tree (gimple_call_arg_ptr (stmt, i), callback_op, wi,\n-\t\t\t   pset);\n-\t  if (ret)\n-\t    return ret;\n-\t}\n-\n-      if (gimple_call_lhs (stmt))\n-\t{\n-\t  if (wi)\n-\t    {\n-\t      wi->is_lhs = true;\n-\t      wi->val_only\n-\t\t= is_gimple_reg_type (TREE_TYPE (gimple_call_lhs (stmt)));\n-\t    }\n-\n-\t  ret = walk_tree (gimple_call_lhs_ptr (stmt), callback_op, wi, pset);\n-\t  if (ret)\n-\t    return ret;\n-\t}\n-\n-      if (wi)\n-\t{\n-\t  wi->is_lhs = false;\n-\t  wi->val_only = true;\n-\t}\n-      break;\n-\n-    case GIMPLE_CATCH:\n-      ret = walk_tree (gimple_catch_types_ptr (stmt), callback_op, wi,\n-\t\t       pset);\n-      if (ret)\n-\treturn ret;\n-      break;\n-\n-    case GIMPLE_EH_FILTER:\n-      ret = walk_tree (gimple_eh_filter_types_ptr (stmt), callback_op, wi,\n-\t\t       pset);\n-      if (ret)\n-\treturn ret;\n-      break;\n-\n-    case GIMPLE_ASM:\n-      ret = walk_gimple_asm (stmt, callback_op, wi);\n-      if (ret)\n-\treturn ret;\n-      break;\n-\n-    case GIMPLE_OMP_CONTINUE:\n-      ret = walk_tree (gimple_omp_continue_control_def_ptr (stmt),\n-\t  \t       callback_op, wi, pset);\n-      if (ret)\n-\treturn ret;\n-\n-      ret = walk_tree (gimple_omp_continue_control_use_ptr (stmt),\n-\t  \t       callback_op, wi, pset);\n-      if (ret)\n-\treturn ret;\n-      break;\n-\n-    case GIMPLE_OMP_CRITICAL:\n-      ret = walk_tree (gimple_omp_critical_name_ptr (stmt), callback_op, wi,\n-\t\t       pset);\n-      if (ret)\n-\treturn ret;\n-      break;\n-\n-    case GIMPLE_OMP_FOR:\n-      ret = walk_tree (gimple_omp_for_clauses_ptr (stmt), callback_op, wi,\n-\t\t       pset);\n-      if (ret)\n-\treturn ret;\n-      for (i = 0; i < gimple_omp_for_collapse (stmt); i++)\n-\t{\n-\t  ret = walk_tree (gimple_omp_for_index_ptr (stmt, i), callback_op,\n-\t\t\t   wi, pset);\n-\t  if (ret)\n-\t    return ret;\n-\t  ret = walk_tree (gimple_omp_for_initial_ptr (stmt, i), callback_op,\n-\t\t\t   wi, pset);\n-\t  if (ret)\n-\t    return ret;\n-\t  ret = walk_tree (gimple_omp_for_final_ptr (stmt, i), callback_op,\n-\t\t\t   wi, pset);\n-\t  if (ret)\n-\t    return ret;\n-\t  ret = walk_tree (gimple_omp_for_incr_ptr (stmt, i), callback_op,\n-\t\t\t   wi, pset);\n-\t}\n-      if (ret)\n-\treturn ret;\n-      break;\n-\n-    case GIMPLE_OMP_PARALLEL:\n-      ret = walk_tree (gimple_omp_parallel_clauses_ptr (stmt), callback_op,\n-\t\t       wi, pset);\n-      if (ret)\n-\treturn ret;\n-      ret = walk_tree (gimple_omp_parallel_child_fn_ptr (stmt), callback_op,\n-\t\t       wi, pset);\n-      if (ret)\n-\treturn ret;\n-      ret = walk_tree (gimple_omp_parallel_data_arg_ptr (stmt), callback_op,\n-\t\t       wi, pset);\n-      if (ret)\n-\treturn ret;\n-      break;\n-\n-    case GIMPLE_OMP_TASK:\n-      ret = walk_tree (gimple_omp_task_clauses_ptr (stmt), callback_op,\n-\t\t       wi, pset);\n-      if (ret)\n-\treturn ret;\n-      ret = walk_tree (gimple_omp_task_child_fn_ptr (stmt), callback_op,\n-\t\t       wi, pset);\n-      if (ret)\n-\treturn ret;\n-      ret = walk_tree (gimple_omp_task_data_arg_ptr (stmt), callback_op,\n-\t\t       wi, pset);\n-      if (ret)\n-\treturn ret;\n-      ret = walk_tree (gimple_omp_task_copy_fn_ptr (stmt), callback_op,\n-\t\t       wi, pset);\n-      if (ret)\n-\treturn ret;\n-      ret = walk_tree (gimple_omp_task_arg_size_ptr (stmt), callback_op,\n-\t\t       wi, pset);\n-      if (ret)\n-\treturn ret;\n-      ret = walk_tree (gimple_omp_task_arg_align_ptr (stmt), callback_op,\n-\t\t       wi, pset);\n-      if (ret)\n-\treturn ret;\n-      break;\n-\n-    case GIMPLE_OMP_SECTIONS:\n-      ret = walk_tree (gimple_omp_sections_clauses_ptr (stmt), callback_op,\n-\t\t       wi, pset);\n-      if (ret)\n-\treturn ret;\n-\n-      ret = walk_tree (gimple_omp_sections_control_ptr (stmt), callback_op,\n-\t\t       wi, pset);\n-      if (ret)\n-\treturn ret;\n-\n-      break;\n-\n-    case GIMPLE_OMP_SINGLE:\n-      ret = walk_tree (gimple_omp_single_clauses_ptr (stmt), callback_op, wi,\n-\t\t       pset);\n-      if (ret)\n-\treturn ret;\n-      break;\n-\n-    case GIMPLE_OMP_TARGET:\n-      ret = walk_tree (gimple_omp_target_clauses_ptr (stmt), callback_op, wi,\n-\t\t       pset);\n-      if (ret)\n-\treturn ret;\n-      break;\n-\n-    case GIMPLE_OMP_TEAMS:\n-      ret = walk_tree (gimple_omp_teams_clauses_ptr (stmt), callback_op, wi,\n-\t\t       pset);\n-      if (ret)\n-\treturn ret;\n-      break;\n-\n-    case GIMPLE_OMP_ATOMIC_LOAD:\n-      ret = walk_tree (gimple_omp_atomic_load_lhs_ptr (stmt), callback_op, wi,\n-\t\t       pset);\n-      if (ret)\n-\treturn ret;\n-\n-      ret = walk_tree (gimple_omp_atomic_load_rhs_ptr (stmt), callback_op, wi,\n-\t\t       pset);\n-      if (ret)\n-\treturn ret;\n-      break;\n-\n-    case GIMPLE_OMP_ATOMIC_STORE:\n-      ret = walk_tree (gimple_omp_atomic_store_val_ptr (stmt), callback_op,\n-\t\t       wi, pset);\n-      if (ret)\n-\treturn ret;\n-      break;\n-\n-    case GIMPLE_TRANSACTION:\n-      ret = walk_tree (gimple_transaction_label_ptr (stmt), callback_op,\n-\t\t       wi, pset);\n-      if (ret)\n-\treturn ret;\n-      break;\n-\n-    case GIMPLE_OMP_RETURN:\n-      ret = walk_tree (gimple_omp_return_lhs_ptr (stmt), callback_op, wi,\n-\t\t       pset);\n-      if (ret)\n-\treturn ret;\n-      break;\n-\n-      /* Tuples that do not have operands.  */\n-    case GIMPLE_NOP:\n-    case GIMPLE_RESX:\n-    case GIMPLE_PREDICT:\n-      break;\n-\n-    default:\n-      {\n-\tenum gimple_statement_structure_enum gss;\n-\tgss = gimple_statement_structure (stmt);\n-\tif (gss == GSS_WITH_OPS || gss == GSS_WITH_MEM_OPS)\n-\t  for (i = 0; i < gimple_num_ops (stmt); i++)\n-\t    {\n-\t      ret = walk_tree (gimple_op_ptr (stmt, i), callback_op, wi, pset);\n-\t      if (ret)\n-\t\treturn ret;\n-\t    }\n-      }\n-      break;\n-    }\n-\n-  return NULL_TREE;\n-}\n-\n-\n-/* Walk the current statement in GSI (optionally using traversal state\n-   stored in WI).  If WI is NULL, no state is kept during traversal.\n-   The callback CALLBACK_STMT is called.  If CALLBACK_STMT indicates\n-   that it has handled all the operands of the statement, its return\n-   value is returned.  Otherwise, the return value from CALLBACK_STMT\n-   is discarded and its operands are scanned.\n-\n-   If CALLBACK_STMT is NULL or it didn't handle the operands,\n-   CALLBACK_OP is called on each operand of the statement via\n-   walk_gimple_op.  If walk_gimple_op returns non-NULL for any\n-   operand, the remaining operands are not scanned.  In this case, the\n-   return value from CALLBACK_OP is returned.\n-\n-   In any other case, NULL_TREE is returned.  */\n-\n-tree\n-walk_gimple_stmt (gimple_stmt_iterator *gsi, walk_stmt_fn callback_stmt,\n-\t\t  walk_tree_fn callback_op, struct walk_stmt_info *wi)\n-{\n-  gimple ret;\n-  tree tree_ret;\n-  gimple stmt = gsi_stmt (*gsi);\n-\n-  if (wi)\n-    {\n-      wi->gsi = *gsi;\n-      wi->removed_stmt = false;\n-\n-      if (wi->want_locations && gimple_has_location (stmt))\n-\tinput_location = gimple_location (stmt);\n-    }\n-\n-  ret = NULL;\n-\n-  /* Invoke the statement callback.  Return if the callback handled\n-     all of STMT operands by itself.  */\n-  if (callback_stmt)\n-    {\n-      bool handled_ops = false;\n-      tree_ret = callback_stmt (gsi, &handled_ops, wi);\n-      if (handled_ops)\n-\treturn tree_ret;\n-\n-      /* If CALLBACK_STMT did not handle operands, it should not have\n-\t a value to return.  */\n-      gcc_assert (tree_ret == NULL);\n-\n-      if (wi && wi->removed_stmt)\n-\treturn NULL;\n-\n-      /* Re-read stmt in case the callback changed it.  */\n-      stmt = gsi_stmt (*gsi);\n-    }\n-\n-  /* If CALLBACK_OP is defined, invoke it on every operand of STMT.  */\n-  if (callback_op)\n-    {\n-      tree_ret = walk_gimple_op (stmt, callback_op, wi);\n-      if (tree_ret)\n-\treturn tree_ret;\n-    }\n-\n-  /* If STMT can have statements inside (e.g. GIMPLE_BIND), walk them.  */\n-  switch (gimple_code (stmt))\n-    {\n-    case GIMPLE_BIND:\n-      ret = walk_gimple_seq_mod (gimple_bind_body_ptr (stmt), callback_stmt,\n-\t\t\t\t callback_op, wi);\n-      if (ret)\n-\treturn wi->callback_result;\n-      break;\n-\n-    case GIMPLE_CATCH:\n-      ret = walk_gimple_seq_mod (gimple_catch_handler_ptr (stmt), callback_stmt,\n-\t\t\t\t callback_op, wi);\n-      if (ret)\n-\treturn wi->callback_result;\n-      break;\n-\n-    case GIMPLE_EH_FILTER:\n-      ret = walk_gimple_seq_mod (gimple_eh_filter_failure_ptr (stmt), callback_stmt,\n-\t\t             callback_op, wi);\n-      if (ret)\n-\treturn wi->callback_result;\n-      break;\n-\n-    case GIMPLE_EH_ELSE:\n-      ret = walk_gimple_seq_mod (gimple_eh_else_n_body_ptr (stmt),\n-\t\t\t     callback_stmt, callback_op, wi);\n-      if (ret)\n-\treturn wi->callback_result;\n-      ret = walk_gimple_seq_mod (gimple_eh_else_e_body_ptr (stmt),\n-\t\t\t     callback_stmt, callback_op, wi);\n-      if (ret)\n-\treturn wi->callback_result;\n-      break;\n-\n-    case GIMPLE_TRY:\n-      ret = walk_gimple_seq_mod (gimple_try_eval_ptr (stmt), callback_stmt, callback_op,\n-\t                     wi);\n-      if (ret)\n-\treturn wi->callback_result;\n-\n-      ret = walk_gimple_seq_mod (gimple_try_cleanup_ptr (stmt), callback_stmt,\n-\t                     callback_op, wi);\n-      if (ret)\n-\treturn wi->callback_result;\n-      break;\n-\n-    case GIMPLE_OMP_FOR:\n-      ret = walk_gimple_seq_mod (gimple_omp_for_pre_body_ptr (stmt), callback_stmt,\n-\t\t             callback_op, wi);\n-      if (ret)\n-\treturn wi->callback_result;\n-\n-      /* FALL THROUGH.  */\n-    case GIMPLE_OMP_CRITICAL:\n-    case GIMPLE_OMP_MASTER:\n-    case GIMPLE_OMP_TASKGROUP:\n-    case GIMPLE_OMP_ORDERED:\n-    case GIMPLE_OMP_SECTION:\n-    case GIMPLE_OMP_PARALLEL:\n-    case GIMPLE_OMP_TASK:\n-    case GIMPLE_OMP_SECTIONS:\n-    case GIMPLE_OMP_SINGLE:\n-    case GIMPLE_OMP_TARGET:\n-    case GIMPLE_OMP_TEAMS:\n-      ret = walk_gimple_seq_mod (gimple_omp_body_ptr (stmt), callback_stmt,\n-\t\t\t     callback_op, wi);\n-      if (ret)\n-\treturn wi->callback_result;\n-      break;\n-\n-    case GIMPLE_WITH_CLEANUP_EXPR:\n-      ret = walk_gimple_seq_mod (gimple_wce_cleanup_ptr (stmt), callback_stmt,\n-\t\t\t     callback_op, wi);\n-      if (ret)\n-\treturn wi->callback_result;\n-      break;\n-\n-    case GIMPLE_TRANSACTION:\n-      ret = walk_gimple_seq_mod (gimple_transaction_body_ptr (stmt),\n-\t\t\t     callback_stmt, callback_op, wi);\n-      if (ret)\n-\treturn wi->callback_result;\n-      break;\n-\n-    default:\n-      gcc_assert (!gimple_has_substatements (stmt));\n-      break;\n-    }\n-\n-  return NULL;\n-}\n-\n \n /* Return true if calls C1 and C2 are known to go to the same function.  */\n \n@@ -2996,251 +2404,6 @@ gimple_get_alias_set (tree t)\n }\n \n \n-/* From a tree operand OP return the base of a load or store operation\n-   or NULL_TREE if OP is not a load or a store.  */\n-\n-static tree\n-get_base_loadstore (tree op)\n-{\n-  while (handled_component_p (op))\n-    op = TREE_OPERAND (op, 0);\n-  if (DECL_P (op)\n-      || INDIRECT_REF_P (op)\n-      || TREE_CODE (op) == MEM_REF\n-      || TREE_CODE (op) == TARGET_MEM_REF)\n-    return op;\n-  return NULL_TREE;\n-}\n-\n-/* For the statement STMT call the callbacks VISIT_LOAD, VISIT_STORE and\n-   VISIT_ADDR if non-NULL on loads, store and address-taken operands\n-   passing the STMT, the base of the operand and DATA to it.  The base\n-   will be either a decl, an indirect reference (including TARGET_MEM_REF)\n-   or the argument of an address expression.\n-   Returns the results of these callbacks or'ed.  */\n-\n-bool\n-walk_stmt_load_store_addr_ops (gimple stmt, void *data,\n-\t\t\t       bool (*visit_load)(gimple, tree, void *),\n-\t\t\t       bool (*visit_store)(gimple, tree, void *),\n-\t\t\t       bool (*visit_addr)(gimple, tree, void *))\n-{\n-  bool ret = false;\n-  unsigned i;\n-  if (gimple_assign_single_p (stmt))\n-    {\n-      tree lhs, rhs;\n-      if (visit_store)\n-\t{\n-\t  lhs = get_base_loadstore (gimple_assign_lhs (stmt));\n-\t  if (lhs)\n-\t    ret |= visit_store (stmt, lhs, data);\n-\t}\n-      rhs = gimple_assign_rhs1 (stmt);\n-      while (handled_component_p (rhs))\n-\trhs = TREE_OPERAND (rhs, 0);\n-      if (visit_addr)\n-\t{\n-\t  if (TREE_CODE (rhs) == ADDR_EXPR)\n-\t    ret |= visit_addr (stmt, TREE_OPERAND (rhs, 0), data);\n-\t  else if (TREE_CODE (rhs) == TARGET_MEM_REF\n-\t\t   && TREE_CODE (TMR_BASE (rhs)) == ADDR_EXPR)\n-\t    ret |= visit_addr (stmt, TREE_OPERAND (TMR_BASE (rhs), 0), data);\n-\t  else if (TREE_CODE (rhs) == OBJ_TYPE_REF\n-\t\t   && TREE_CODE (OBJ_TYPE_REF_OBJECT (rhs)) == ADDR_EXPR)\n-\t    ret |= visit_addr (stmt, TREE_OPERAND (OBJ_TYPE_REF_OBJECT (rhs),\n-\t\t\t\t\t\t   0), data);\n-\t  else if (TREE_CODE (rhs) == CONSTRUCTOR)\n-\t    {\n-\t      unsigned int ix;\n-\t      tree val;\n-\n-\t      FOR_EACH_CONSTRUCTOR_VALUE (CONSTRUCTOR_ELTS (rhs), ix, val)\n-\t\tif (TREE_CODE (val) == ADDR_EXPR)\n-\t\t  ret |= visit_addr (stmt, TREE_OPERAND (val, 0), data);\n-\t\telse if (TREE_CODE (val) == OBJ_TYPE_REF\n-\t\t\t && TREE_CODE (OBJ_TYPE_REF_OBJECT (val)) == ADDR_EXPR)\n-\t\t  ret |= visit_addr (stmt,\n-\t\t\t\t     TREE_OPERAND (OBJ_TYPE_REF_OBJECT (val),\n-\t\t\t\t\t\t   0), data);\n-\t    }\n-          lhs = gimple_assign_lhs (stmt);\n-\t  if (TREE_CODE (lhs) == TARGET_MEM_REF\n-              && TREE_CODE (TMR_BASE (lhs)) == ADDR_EXPR)\n-            ret |= visit_addr (stmt, TREE_OPERAND (TMR_BASE (lhs), 0), data);\n-\t}\n-      if (visit_load)\n-\t{\n-\t  rhs = get_base_loadstore (rhs);\n-\t  if (rhs)\n-\t    ret |= visit_load (stmt, rhs, data);\n-\t}\n-    }\n-  else if (visit_addr\n-\t   && (is_gimple_assign (stmt)\n-\t       || gimple_code (stmt) == GIMPLE_COND))\n-    {\n-      for (i = 0; i < gimple_num_ops (stmt); ++i)\n-\t{\n-\t  tree op = gimple_op (stmt, i);\n-\t  if (op == NULL_TREE)\n-\t    ;\n-\t  else if (TREE_CODE (op) == ADDR_EXPR)\n-\t    ret |= visit_addr (stmt, TREE_OPERAND (op, 0), data);\n-\t  /* COND_EXPR and VCOND_EXPR rhs1 argument is a comparison\n-\t     tree with two operands.  */\n-\t  else if (i == 1 && COMPARISON_CLASS_P (op))\n-\t    {\n-\t      if (TREE_CODE (TREE_OPERAND (op, 0)) == ADDR_EXPR)\n-\t\tret |= visit_addr (stmt, TREE_OPERAND (TREE_OPERAND (op, 0),\n-\t\t\t\t\t\t       0), data);\n-\t      if (TREE_CODE (TREE_OPERAND (op, 1)) == ADDR_EXPR)\n-\t\tret |= visit_addr (stmt, TREE_OPERAND (TREE_OPERAND (op, 1),\n-\t\t\t\t\t\t       0), data);\n-\t    }\n-\t}\n-    }\n-  else if (is_gimple_call (stmt))\n-    {\n-      if (visit_store)\n-\t{\n-\t  tree lhs = gimple_call_lhs (stmt);\n-\t  if (lhs)\n-\t    {\n-\t      lhs = get_base_loadstore (lhs);\n-\t      if (lhs)\n-\t\tret |= visit_store (stmt, lhs, data);\n-\t    }\n-\t}\n-      if (visit_load || visit_addr)\n-\tfor (i = 0; i < gimple_call_num_args (stmt); ++i)\n-\t  {\n-\t    tree rhs = gimple_call_arg (stmt, i);\n-\t    if (visit_addr\n-\t\t&& TREE_CODE (rhs) == ADDR_EXPR)\n-\t      ret |= visit_addr (stmt, TREE_OPERAND (rhs, 0), data);\n-\t    else if (visit_load)\n-\t      {\n-\t\trhs = get_base_loadstore (rhs);\n-\t\tif (rhs)\n-\t\t  ret |= visit_load (stmt, rhs, data);\n-\t      }\n-\t  }\n-      if (visit_addr\n-\t  && gimple_call_chain (stmt)\n-\t  && TREE_CODE (gimple_call_chain (stmt)) == ADDR_EXPR)\n-\tret |= visit_addr (stmt, TREE_OPERAND (gimple_call_chain (stmt), 0),\n-\t\t\t   data);\n-      if (visit_addr\n-\t  && gimple_call_return_slot_opt_p (stmt)\n-\t  && gimple_call_lhs (stmt) != NULL_TREE\n-\t  && TREE_ADDRESSABLE (TREE_TYPE (gimple_call_lhs (stmt))))\n-\tret |= visit_addr (stmt, gimple_call_lhs (stmt), data);\n-    }\n-  else if (gimple_code (stmt) == GIMPLE_ASM)\n-    {\n-      unsigned noutputs;\n-      const char *constraint;\n-      const char **oconstraints;\n-      bool allows_mem, allows_reg, is_inout;\n-      noutputs = gimple_asm_noutputs (stmt);\n-      oconstraints = XALLOCAVEC (const char *, noutputs);\n-      if (visit_store || visit_addr)\n-\tfor (i = 0; i < gimple_asm_noutputs (stmt); ++i)\n-\t  {\n-\t    tree link = gimple_asm_output_op (stmt, i);\n-\t    tree op = get_base_loadstore (TREE_VALUE (link));\n-\t    if (op && visit_store)\n-\t      ret |= visit_store (stmt, op, data);\n-\t    if (visit_addr)\n-\t      {\n-\t\tconstraint = TREE_STRING_POINTER\n-\t\t    (TREE_VALUE (TREE_PURPOSE (link)));\n-\t\toconstraints[i] = constraint;\n-\t\tparse_output_constraint (&constraint, i, 0, 0, &allows_mem,\n-\t\t\t\t\t &allows_reg, &is_inout);\n-\t\tif (op && !allows_reg && allows_mem)\n-\t\t  ret |= visit_addr (stmt, op, data);\n-\t      }\n-\t  }\n-      if (visit_load || visit_addr)\n-\tfor (i = 0; i < gimple_asm_ninputs (stmt); ++i)\n-\t  {\n-\t    tree link = gimple_asm_input_op (stmt, i);\n-\t    tree op = TREE_VALUE (link);\n-\t    if (visit_addr\n-\t\t&& TREE_CODE (op) == ADDR_EXPR)\n-\t      ret |= visit_addr (stmt, TREE_OPERAND (op, 0), data);\n-\t    else if (visit_load || visit_addr)\n-\t      {\n-\t\top = get_base_loadstore (op);\n-\t\tif (op)\n-\t\t  {\n-\t\t    if (visit_load)\n-\t\t      ret |= visit_load (stmt, op, data);\n-\t\t    if (visit_addr)\n-\t\t      {\n-\t\t\tconstraint = TREE_STRING_POINTER\n-\t\t\t    (TREE_VALUE (TREE_PURPOSE (link)));\n-\t\t\tparse_input_constraint (&constraint, 0, 0, noutputs,\n-\t\t\t\t\t\t0, oconstraints,\n-\t\t\t\t\t\t&allows_mem, &allows_reg);\n-\t\t\tif (!allows_reg && allows_mem)\n-\t\t\t  ret |= visit_addr (stmt, op, data);\n-\t\t      }\n-\t\t  }\n-\t      }\n-\t  }\n-    }\n-  else if (gimple_code (stmt) == GIMPLE_RETURN)\n-    {\n-      tree op = gimple_return_retval (stmt);\n-      if (op)\n-\t{\n-\t  if (visit_addr\n-\t      && TREE_CODE (op) == ADDR_EXPR)\n-\t    ret |= visit_addr (stmt, TREE_OPERAND (op, 0), data);\n-\t  else if (visit_load)\n-\t    {\n-\t      op = get_base_loadstore (op);\n-\t      if (op)\n-\t\tret |= visit_load (stmt, op, data);\n-\t    }\n-\t}\n-    }\n-  else if (visit_addr\n-\t   && gimple_code (stmt) == GIMPLE_PHI)\n-    {\n-      for (i = 0; i < gimple_phi_num_args (stmt); ++i)\n-\t{\n-\t  tree op = gimple_phi_arg_def (stmt, i);\n-\t  if (TREE_CODE (op) == ADDR_EXPR)\n-\t    ret |= visit_addr (stmt, TREE_OPERAND (op, 0), data);\n-\t}\n-    }\n-  else if (visit_addr\n-\t   && gimple_code (stmt) == GIMPLE_GOTO)\n-    {\n-      tree op = gimple_goto_dest (stmt);\n-      if (TREE_CODE (op) == ADDR_EXPR)\n-\tret |= visit_addr (stmt, TREE_OPERAND (op, 0), data);\n-    }\n-\n-  return ret;\n-}\n-\n-/* Like walk_stmt_load_store_addr_ops but with NULL visit_addr.  IPA-CP\n-   should make a faster clone for this case.  */\n-\n-bool\n-walk_stmt_load_store_ops (gimple stmt, void *data,\n-\t\t\t  bool (*visit_load)(gimple, tree, void *),\n-\t\t\t  bool (*visit_store)(gimple, tree, void *))\n-{\n-  return walk_stmt_load_store_addr_ops (stmt, data,\n-\t\t\t\t\tvisit_load, visit_store, NULL);\n-}\n-\n /* Helper for gimple_ior_addresses_taken_1.  */\n \n static bool\n@@ -3688,3 +2851,12 @@ preprocess_case_label_vec_for_gimple (vec<tree> labels,\n   if (default_casep)\n     *default_casep = default_case;\n }\n+\n+/* Set the location of all statements in SEQ to LOC.  */\n+\n+void\n+gimple_seq_set_location (gimple_seq seq, location_t loc)\n+{\n+  for (gimple_stmt_iterator i = gsi_start (seq); !gsi_end_p (i); gsi_next (&i))\n+    gimple_set_location (gsi_stmt (i), loc);\n+}"}, {"sha": "db24800b43a39f11764a081746ff50beefcd4faf", "filename": "gcc/gimple.h", "status": "modified", "additions": 1, "deletions": 356, "changes": 357, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Fgimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Fgimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.h?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -141,21 +141,6 @@ enum plf_mask {\n     GF_PLF_2\t= 1 << 1\n };\n \n-/* Iterator object for GIMPLE statement sequences.  */\n-\n-struct gimple_stmt_iterator_d\n-{\n-  /* Sequence node holding the current statement.  */\n-  gimple_seq_node ptr;\n-\n-  /* Sequence and basic block holding the statement.  These fields\n-     are necessary to handle edge cases such as when statement is\n-     added to an empty basic block or when the last statement of a\n-     block/sequence is removed.  */\n-  gimple_seq *seq;\n-  basic_block bb;\n-};\n-\n /* Data structure definitions for GIMPLE tuples.  NOTE: word markers\n    are for 64 bit hosts.  */\n \n@@ -847,13 +832,6 @@ extern bool gimple_compare_field_offset (tree, tree);\n extern tree gimple_unsigned_type (tree);\n extern tree gimple_signed_type (tree);\n extern alias_set_type gimple_get_alias_set (tree);\n-extern bool walk_stmt_load_store_addr_ops (gimple, void *,\n-\t\t\t\t\t   bool (*)(gimple, tree, void *),\n-\t\t\t\t\t   bool (*)(gimple, tree, void *),\n-\t\t\t\t\t   bool (*)(gimple, tree, void *));\n-extern bool walk_stmt_load_store_ops (gimple, void *,\n-\t\t\t\t      bool (*)(gimple, tree, void *),\n-\t\t\t\t      bool (*)(gimple, tree, void *));\n extern bool gimple_ior_addresses_taken (bitmap, gimple);\n extern bool gimple_call_builtin_p (gimple, enum built_in_class);\n extern bool gimple_call_builtin_p (gimple, enum built_in_function);\n@@ -5223,227 +5201,6 @@ gimple_expr_type (const_gimple stmt)\n     return void_type_node;\n }\n \n-/* Return a new iterator pointing to GIMPLE_SEQ's first statement.  */\n-\n-static inline gimple_stmt_iterator\n-gsi_start_1 (gimple_seq *seq)\n-{\n-  gimple_stmt_iterator i;\n-\n-  i.ptr = gimple_seq_first (*seq);\n-  i.seq = seq;\n-  i.bb = i.ptr ? gimple_bb (i.ptr) : NULL;\n-\n-  return i;\n-}\n-\n-#define gsi_start(x) gsi_start_1 (&(x))\n-\n-static inline gimple_stmt_iterator\n-gsi_none (void)\n-{\n-  gimple_stmt_iterator i;\n-  i.ptr = NULL;\n-  i.seq = NULL;\n-  i.bb = NULL;\n-  return i;\n-}\n-\n-/* Return a new iterator pointing to the first statement in basic block BB.  */\n-\n-static inline gimple_stmt_iterator\n-gsi_start_bb (basic_block bb)\n-{\n-  gimple_stmt_iterator i;\n-  gimple_seq *seq;\n-\n-  seq = bb_seq_addr (bb);\n-  i.ptr = gimple_seq_first (*seq);\n-  i.seq = seq;\n-  i.bb = bb;\n-\n-  return i;\n-}\n-\n-\n-/* Return a new iterator initially pointing to GIMPLE_SEQ's last statement.  */\n-\n-static inline gimple_stmt_iterator\n-gsi_last_1 (gimple_seq *seq)\n-{\n-  gimple_stmt_iterator i;\n-\n-  i.ptr = gimple_seq_last (*seq);\n-  i.seq = seq;\n-  i.bb = i.ptr ? gimple_bb (i.ptr) : NULL;\n-\n-  return i;\n-}\n-\n-#define gsi_last(x) gsi_last_1 (&(x))\n-\n-/* Return a new iterator pointing to the last statement in basic block BB.  */\n-\n-static inline gimple_stmt_iterator\n-gsi_last_bb (basic_block bb)\n-{\n-  gimple_stmt_iterator i;\n-  gimple_seq *seq;\n-\n-  seq = bb_seq_addr (bb);\n-  i.ptr = gimple_seq_last (*seq);\n-  i.seq = seq;\n-  i.bb = bb;\n-\n-  return i;\n-}\n-\n-\n-/* Return true if I is at the end of its sequence.  */\n-\n-static inline bool\n-gsi_end_p (gimple_stmt_iterator i)\n-{\n-  return i.ptr == NULL;\n-}\n-\n-\n-/* Return true if I is one statement before the end of its sequence.  */\n-\n-static inline bool\n-gsi_one_before_end_p (gimple_stmt_iterator i)\n-{\n-  return i.ptr != NULL && i.ptr->gsbase.next == NULL;\n-}\n-\n-\n-/* Advance the iterator to the next gimple statement.  */\n-\n-static inline void\n-gsi_next (gimple_stmt_iterator *i)\n-{\n-  i->ptr = i->ptr->gsbase.next;\n-}\n-\n-/* Advance the iterator to the previous gimple statement.  */\n-\n-static inline void\n-gsi_prev (gimple_stmt_iterator *i)\n-{\n-  gimple prev = i->ptr->gsbase.prev;\n-  if (prev->gsbase.next)\n-    i->ptr = prev;\n-  else\n-    i->ptr = NULL;\n-}\n-\n-/* Return the current stmt.  */\n-\n-static inline gimple\n-gsi_stmt (gimple_stmt_iterator i)\n-{\n-  return i.ptr;\n-}\n-\n-/* Return a block statement iterator that points to the first non-label\n-   statement in block BB.  */\n-\n-static inline gimple_stmt_iterator\n-gsi_after_labels (basic_block bb)\n-{\n-  gimple_stmt_iterator gsi = gsi_start_bb (bb);\n-\n-  while (!gsi_end_p (gsi) && gimple_code (gsi_stmt (gsi)) == GIMPLE_LABEL)\n-    gsi_next (&gsi);\n-\n-  return gsi;\n-}\n-\n-/* Advance the iterator to the next non-debug gimple statement.  */\n-\n-static inline void\n-gsi_next_nondebug (gimple_stmt_iterator *i)\n-{\n-  do\n-    {\n-      gsi_next (i);\n-    }\n-  while (!gsi_end_p (*i) && is_gimple_debug (gsi_stmt (*i)));\n-}\n-\n-/* Advance the iterator to the next non-debug gimple statement.  */\n-\n-static inline void\n-gsi_prev_nondebug (gimple_stmt_iterator *i)\n-{\n-  do\n-    {\n-      gsi_prev (i);\n-    }\n-  while (!gsi_end_p (*i) && is_gimple_debug (gsi_stmt (*i)));\n-}\n-\n-/* Return a new iterator pointing to the first non-debug statement in\n-   basic block BB.  */\n-\n-static inline gimple_stmt_iterator\n-gsi_start_nondebug_bb (basic_block bb)\n-{\n-  gimple_stmt_iterator i = gsi_start_bb (bb);\n-\n-  if (!gsi_end_p (i) && is_gimple_debug (gsi_stmt (i)))\n-    gsi_next_nondebug (&i);\n-\n-  return i;\n-}\n-\n-/* Return a new iterator pointing to the first non-debug non-label statement in\n-   basic block BB.  */\n-\n-static inline gimple_stmt_iterator\n-gsi_start_nondebug_after_labels_bb (basic_block bb)\n-{\n-  gimple_stmt_iterator i = gsi_after_labels (bb);\n-\n-  if (!gsi_end_p (i) && is_gimple_debug (gsi_stmt (i)))\n-    gsi_next_nondebug (&i);\n-\n-  return i;\n-}\n-\n-/* Return a new iterator pointing to the last non-debug statement in\n-   basic block BB.  */\n-\n-static inline gimple_stmt_iterator\n-gsi_last_nondebug_bb (basic_block bb)\n-{\n-  gimple_stmt_iterator i = gsi_last_bb (bb);\n-\n-  if (!gsi_end_p (i) && is_gimple_debug (gsi_stmt (i)))\n-    gsi_prev_nondebug (&i);\n-\n-  return i;\n-}\n-\n-\n-/* Return the basic block associated with this iterator.  */\n-\n-static inline basic_block\n-gsi_bb (gimple_stmt_iterator i)\n-{\n-  return i.bb;\n-}\n-\n-\n-/* Return the sequence associated with this iterator.  */\n-\n-static inline gimple_seq\n-gsi_seq (gimple_stmt_iterator i)\n-{\n-  return *i.seq;\n-}\n-\n-\n enum gsi_iterator_update\n {\n   GSI_NEW_STMT,\t\t/* Only valid when single statement is added, move\n@@ -5454,112 +5211,8 @@ enum gsi_iterator_update\n \t\t\t   direction.  */\n };\n \n-/* In gimple-iterator.c  */\n-gimple_stmt_iterator gsi_start_phis (basic_block);\n-gimple_seq gsi_split_seq_after (gimple_stmt_iterator);\n-void gsi_split_seq_before (gimple_stmt_iterator *, gimple_seq *);\n-void gsi_set_stmt (gimple_stmt_iterator *, gimple);\n-void gsi_replace (gimple_stmt_iterator *, gimple, bool);\n-void gsi_replace_with_seq (gimple_stmt_iterator *, gimple_seq, bool);\n-void gsi_insert_before (gimple_stmt_iterator *, gimple,\n-\t\t\tenum gsi_iterator_update);\n-void gsi_insert_before_without_update (gimple_stmt_iterator *, gimple,\n-                                       enum gsi_iterator_update);\n-void gsi_insert_seq_before (gimple_stmt_iterator *, gimple_seq,\n-                            enum gsi_iterator_update);\n-void gsi_insert_seq_before_without_update (gimple_stmt_iterator *, gimple_seq,\n-                                           enum gsi_iterator_update);\n-void gsi_insert_after (gimple_stmt_iterator *, gimple,\n-\t\t       enum gsi_iterator_update);\n-void gsi_insert_after_without_update (gimple_stmt_iterator *, gimple,\n-                                      enum gsi_iterator_update);\n-void gsi_insert_seq_after (gimple_stmt_iterator *, gimple_seq,\n-\t\t\t   enum gsi_iterator_update);\n-void gsi_insert_seq_after_without_update (gimple_stmt_iterator *, gimple_seq,\n-                                          enum gsi_iterator_update);\n-bool gsi_remove (gimple_stmt_iterator *, bool);\n-gimple_stmt_iterator gsi_for_stmt (gimple);\n-void gsi_move_after (gimple_stmt_iterator *, gimple_stmt_iterator *);\n-void gsi_move_before (gimple_stmt_iterator *, gimple_stmt_iterator *);\n-void gsi_move_to_bb_end (gimple_stmt_iterator *, basic_block);\n-void gsi_insert_on_edge (edge, gimple);\n-void gsi_insert_seq_on_edge (edge, gimple_seq);\n-basic_block gsi_insert_on_edge_immediate (edge, gimple);\n-basic_block gsi_insert_seq_on_edge_immediate (edge, gimple_seq);\n-void gsi_commit_one_edge_insert (edge, basic_block *);\n-void gsi_commit_edge_inserts (void);\n gimple gimple_call_copy_skip_args (gimple, bitmap);\n \n-/* Convenience routines to walk all statements of a gimple function.\n-   Note that this is useful exclusively before the code is converted\n-   into SSA form.  Once the program is in SSA form, the standard\n-   operand interface should be used to analyze/modify statements.  */\n-struct walk_stmt_info\n-{\n-  /* Points to the current statement being walked.  */\n-  gimple_stmt_iterator gsi;\n-\n-  /* Additional data that the callback functions may want to carry\n-     through the recursion.  */\n-  void *info;\n-\n-  /* Pointer map used to mark visited tree nodes when calling\n-     walk_tree on each operand.  If set to NULL, duplicate tree nodes\n-     will be visited more than once.  */\n-  struct pointer_set_t *pset;\n-\n-  /* Operand returned by the callbacks.  This is set when calling\n-     walk_gimple_seq.  If the walk_stmt_fn or walk_tree_fn callback\n-     returns non-NULL, this field will contain the tree returned by\n-     the last callback.  */\n-  tree callback_result;\n-\n-  /* Indicates whether the operand being examined may be replaced\n-     with something that matches is_gimple_val (if true) or something\n-     slightly more complicated (if false).  \"Something\" technically\n-     means the common subset of is_gimple_lvalue and is_gimple_rhs,\n-     but we never try to form anything more complicated than that, so\n-     we don't bother checking.\n-\n-     Also note that CALLBACK should update this flag while walking the\n-     sub-expressions of a statement.  For instance, when walking the\n-     statement 'foo (&var)', the flag VAL_ONLY will initially be set\n-     to true, however, when walking &var, the operand of that\n-     ADDR_EXPR does not need to be a GIMPLE value.  */\n-  BOOL_BITFIELD val_only : 1;\n-\n-  /* True if we are currently walking the LHS of an assignment.  */\n-  BOOL_BITFIELD is_lhs : 1;\n-\n-  /* Optional.  Set to true by the callback functions if they made any\n-     changes.  */\n-  BOOL_BITFIELD changed : 1;\n-\n-  /* True if we're interested in location information.  */\n-  BOOL_BITFIELD want_locations : 1;\n-\n-  /* True if we've removed the statement that was processed.  */\n-  BOOL_BITFIELD removed_stmt : 1;\n-};\n-\n-/* Callback for walk_gimple_stmt.  Called for every statement found\n-   during traversal.  The first argument points to the statement to\n-   walk.  The second argument is a flag that the callback sets to\n-   'true' if it the callback handled all the operands and\n-   sub-statements of the statement (the default value of this flag is\n-   'false').  The third argument is an anonymous pointer to data\n-   to be used by the callback.  */\n-typedef tree (*walk_stmt_fn) (gimple_stmt_iterator *, bool *,\n-\t\t\t      struct walk_stmt_info *);\n-\n-gimple walk_gimple_seq (gimple_seq, walk_stmt_fn, walk_tree_fn,\n-\t\t        struct walk_stmt_info *);\n-gimple walk_gimple_seq_mod (gimple_seq *, walk_stmt_fn, walk_tree_fn,\n-\t\t\t    struct walk_stmt_info *);\n-tree walk_gimple_stmt (gimple_stmt_iterator *, walk_stmt_fn, walk_tree_fn,\n-\t\t       struct walk_stmt_info *);\n-tree walk_gimple_op (gimple, walk_tree_fn, struct walk_stmt_info *);\n-\n /* Enum and arrays used for allocation stats.  Keep in sync with\n    gimple.c:gimple_alloc_kind_names.  */\n enum gimple_alloc_kind\n@@ -5593,15 +5246,6 @@ gimple_alloc_kind (enum gimple_code code)\n \n extern void dump_gimple_statistics (void);\n \n-/* Set the location of all statements in SEQ to LOC.  */\n-\n-static inline void\n-gimple_seq_set_location (gimple_seq seq, location_t loc)\n-{\n-  for (gimple_stmt_iterator i = gsi_start (seq); !gsi_end_p (i); gsi_next (&i))\n-    gimple_set_location (gsi_stmt (i), loc);\n-}\n-\n /* Return true if a location should not be emitted for this statement\n    by annotate_all_with_location.  */\n \n@@ -5636,5 +5280,6 @@ gimple_set_do_not_emit_location (gimple g)\n \n extern void sort_case_labels (vec<tree> );\n extern void preprocess_case_label_vec_for_gimple (vec<tree> , tree, tree *);\n+extern void gimple_seq_set_location (gimple_seq , location_t);\n \n #endif  /* GCC_GIMPLE_H */"}, {"sha": "3253f861958d3e4cec8f5cb933324f5e234e21a0", "filename": "gcc/gimplify.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -26,6 +26,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm.h\"\n #include \"tree.h\"\n #include \"gimplify.h\"\n+#include \"gimple-iterator.h\"\n #include \"tree-iterator.h\"\n #include \"tree-inline.h\"\n #include \"tree-pretty-print.h\""}, {"sha": "da457d20da164d0bdbe85c56311390cb117b9263", "filename": "gcc/graphite-blocking.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Fgraphite-blocking.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Fgraphite-blocking.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-blocking.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -36,6 +36,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"coretypes.h\"\n #include \"tree.h\"\n #include \"gimple.h\"\n+#include \"gimple-iterator.h\"\n #include \"tree-ssa-loop.h\"\n #include \"dumpfile.h\"\n #include \"cfgloop.h\""}, {"sha": "38404f4ee408e97588388994da613ddf91cf49cf", "filename": "gcc/graphite-clast-to-gimple.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Fgraphite-clast-to-gimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Fgraphite-clast-to-gimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-clast-to-gimple.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -37,6 +37,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"diagnostic-core.h\"\n #include \"tree.h\"\n #include \"gimplify.h\"\n+#include \"gimple-iterator.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-ssa-loop-manip.h\"\n #include \"tree-ssa-loop.h\""}, {"sha": "f9f7004cb1dfb622f7c641c52c4bf5c3e582ea17", "filename": "gcc/graphite-dependences.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Fgraphite-dependences.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Fgraphite-dependences.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-dependences.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -35,6 +35,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"coretypes.h\"\n #include \"tree.h\"\n #include \"gimple.h\"\n+#include \"gimple-iterator.h\"\n #include \"tree-ssa-loop.h\"\n #include \"tree-pass.h\"\n #include \"cfgloop.h\""}, {"sha": "8690313da35dcc8ef33e6be80fb4432cb4b3372f", "filename": "gcc/graphite-interchange.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Fgraphite-interchange.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Fgraphite-interchange.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-interchange.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -37,6 +37,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"coretypes.h\"\n #include \"tree.h\"\n #include \"gimple.h\"\n+#include \"gimple-iterator.h\"\n #include \"tree-ssa-loop.h\"\n #include \"dumpfile.h\"\n #include \"cfgloop.h\""}, {"sha": "2260c507f8603bae21af868a5a351df67a359a62", "filename": "gcc/graphite-optimize-isl.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Fgraphite-optimize-isl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Fgraphite-optimize-isl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-optimize-isl.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -34,6 +34,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"coretypes.h\"\n #include \"tree.h\"\n #include \"gimple.h\"\n+#include \"gimple-iterator.h\"\n #include \"tree-ssa-loop.h\"\n #include \"dumpfile.h\"\n #include \"cfgloop.h\""}, {"sha": "d75359e8537304cb07b179339ee69eebba56a71e", "filename": "gcc/graphite-poly.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Fgraphite-poly.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Fgraphite-poly.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-poly.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -37,6 +37,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"diagnostic-core.h\"\n #include \"tree.h\"\n #include \"gimple.h\"\n+#include \"gimple-iterator.h\"\n #include \"tree-ssa-loop.h\"\n #include \"dumpfile.h\"\n #include \"gimple-pretty-print.h\""}, {"sha": "8ac22db553e45b28d0c2e88de2d0ff1db604dbfd", "filename": "gcc/graphite-scop-detection.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Fgraphite-scop-detection.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Fgraphite-scop-detection.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-scop-detection.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -33,6 +33,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"coretypes.h\"\n #include \"tree.h\"\n #include \"gimple.h\"\n+#include \"gimple-iterator.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-phinodes.h\"\n #include \"ssa-iterators.h\""}, {"sha": "b10bb46e33e096e439cd3aa2c5dbc1278ad5fdd2", "filename": "gcc/graphite-sese-to-poly.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Fgraphite-sese-to-poly.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Fgraphite-sese-to-poly.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-sese-to-poly.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -35,6 +35,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"coretypes.h\"\n #include \"tree.h\"\n #include \"gimplify.h\"\n+#include \"gimple-iterator.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-cfg.h\"\n #include \"tree-phinodes.h\""}, {"sha": "5223de959d54de67c842d29eb0df6315ca13ea18", "filename": "gcc/graphite.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Fgraphite.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Fgraphite.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -49,6 +49,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"diagnostic-core.h\"\n #include \"tree.h\"\n #include \"gimple.h\"\n+#include \"gimple-iterator.h\"\n #include \"tree-cfg.h\"\n #include \"tree-ssa-loop.h\"\n #include \"tree-dump.h\""}, {"sha": "2231c77ad66ceed88654d7fdcd77ebbf15b98ee7", "filename": "gcc/ipa-inline-analysis.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Fipa-inline-analysis.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Fipa-inline-analysis.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline-analysis.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -79,6 +79,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"coverage.h\"\n #include \"ggc.h\"\n #include \"gimple.h\"\n+#include \"gimple-iterator.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-cfg.h\"\n #include \"tree-phinodes.h\""}, {"sha": "9b8ae3971eafbce7800f1288df4ddfb73a53ece7", "filename": "gcc/ipa-profile.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Fipa-profile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Fipa-profile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-profile.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -52,6 +52,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"cgraph.h\"\n #include \"tree-pass.h\"\n #include \"gimple.h\"\n+#include \"gimple-iterator.h\"\n #include \"ggc.h\"\n #include \"flags.h\"\n #include \"target.h\""}, {"sha": "327bca9e597b64ea0ec460b2efb839871f58cd8c", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -22,6 +22,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"coretypes.h\"\n #include \"tree.h\"\n #include \"gimplify.h\"\n+#include \"gimple-iterator.h\"\n+#include \"gimple-walk.h\"\n #include \"langhooks.h\"\n #include \"ggc.h\"\n #include \"target.h\""}, {"sha": "9963b39f46169c49367b9c57e59ce327d67a7693", "filename": "gcc/ipa-pure-const.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Fipa-pure-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Fipa-pure-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-pure-const.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -37,6 +37,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm.h\"\n #include \"tree.h\"\n #include \"gimple.h\"\n+#include \"gimple-iterator.h\"\n+#include \"gimple-walk.h\"\n #include \"tree-cfg.h\"\n #include \"tree-ssa-loop-niter.h\"\n #include \"tree-inline.h\""}, {"sha": "40b876653a897e27ba10dee1b0e1e9a92f2d85da", "filename": "gcc/ipa-split.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Fipa-split.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Fipa-split.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-split.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -79,6 +79,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"coretypes.h\"\n #include \"tree.h\"\n #include \"gimplify.h\"\n+#include \"gimple-iterator.h\"\n+#include \"gimple-walk.h\"\n #include \"target.h\"\n #include \"ipa-prop.h\"\n #include \"gimple-ssa.h\""}, {"sha": "449632af38c7a246a6b86563bee3a7710a61fa69", "filename": "gcc/lto-streamer-in.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Flto-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Flto-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-in.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -33,6 +33,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"hashtab.h\"\n #include \"basic-block.h\"\n #include \"gimple.h\"\n+#include \"gimple-iterator.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-cfg.h\"\n #include \"tree-ssanames.h\""}, {"sha": "9a00230d463cff8650d7e3cebe1890b6756db9f5", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -32,6 +32,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"hashtab.h\"\n #include \"basic-block.h\"\n #include \"gimple.h\"\n+#include \"gimple-iterator.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-ssanames.h\"\n #include \"tree-pass.h\""}, {"sha": "86f95a1152d98126bd6473c9c727e1d5c5b0e59e", "filename": "gcc/omp-low.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -28,6 +28,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree.h\"\n #include \"rtl.h\"\n #include \"gimplify.h\"\n+#include \"gimple-iterator.h\"\n+#include \"gimple-walk.h\"\n #include \"tree-iterator.h\"\n #include \"tree-inline.h\"\n #include \"langhooks.h\""}, {"sha": "61cac525991ac43fc06b4babeffb6ebfb7776293", "filename": "gcc/predict.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -51,6 +51,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"target.h\"\n #include \"cfgloop.h\"\n #include \"gimple.h\"\n+#include \"gimple-iterator.h\"\n #include \"gimple-ssa.h\"\n #include \"cgraph.h\"\n #include \"tree-cfg.h\""}, {"sha": "5f73b2ca462d3a9a578b412fc85b8e6b984db6e2", "filename": "gcc/profile.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Fprofile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Fprofile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprofile.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -62,6 +62,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"value-prof.h\"\n #include \"tree.h\"\n #include \"gimple.h\"\n+#include \"gimple-iterator.h\"\n #include \"tree-cfg.h\"\n #include \"cfgloop.h\"\n #include \"dumpfile.h\""}, {"sha": "169ed9a845d7527f598a030caffa3f152f1bd620", "filename": "gcc/sese.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Fsese.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Fsese.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsese.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -26,6 +26,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree.h\"\n #include \"tree-pretty-print.h\"\n #include \"gimplify.h\"\n+#include \"gimple-iterator.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-cfg.h\"\n #include \"tree-phinodes.h\""}, {"sha": "93080a8d0b85ad1820d11b73427b5bec56b7d3d7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -1,3 +1,8 @@\n+2013-11-13  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* testsuite/g++.dg/plugin/selfassign.c: Include gimple-iterator.h.\n+\t* testsuite/gcc.dg/plugin/selfassign.c: Likewise.\n+\n 2013-11-12  Jeff Law  <law@redhat.com>\n \n \t* PR middle-end/59119"}, {"sha": "2498153a273fc6981b7451d00c447de30b0188e4", "filename": "gcc/testsuite/g++.dg/plugin/selfassign.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fselfassign.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fselfassign.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fselfassign.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -11,6 +11,7 @@\n #include \"toplev.h\"\n #include \"basic-block.h\"\n #include \"gimple.h\"\n+#include \"gimple-iterator.h\"\n #include \"tree.h\"\n #include \"tree-pass.h\"\n #include \"intl.h\""}, {"sha": "2498153a273fc6981b7451d00c447de30b0188e4", "filename": "gcc/testsuite/gcc.dg/plugin/selfassign.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fselfassign.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fselfassign.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fselfassign.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -11,6 +11,7 @@\n #include \"toplev.h\"\n #include \"basic-block.h\"\n #include \"gimple.h\"\n+#include \"gimple-iterator.h\"\n #include \"tree.h\"\n #include \"tree-pass.h\"\n #include \"intl.h\""}, {"sha": "71a9201fd0941ba392138f381376ee9357e9685b", "filename": "gcc/tracer.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftracer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftracer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftracer.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -47,6 +47,7 @@\n #include \"coverage.h\"\n #include \"tree-pass.h\"\n #include \"gimple.h\"\n+#include \"gimple-iterator.h\"\n #include \"tree-cfg.h\"\n #include \"tree-ssa.h\"\n #include \"tree-inline.h\""}, {"sha": "195380bee4dbb38886badb1e8228248a810c9155", "filename": "gcc/trans-mem.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftrans-mem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftrans-mem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftrans-mem.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -23,6 +23,8 @@\n #include \"hash-table.h\"\n #include \"tree.h\"\n #include \"gimplify.h\"\n+#include \"gimple-iterator.h\"\n+#include \"gimple-walk.h\"\n #include \"gimple-ssa.h\"\n #include \"cgraph.h\"\n #include \"tree-cfg.h\""}, {"sha": "8e636463deac2f3d60dcdaaf6d5a9a9580f4c93b", "filename": "gcc/tree-call-cdce.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-call-cdce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-call-cdce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-call-cdce.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -26,6 +26,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree.h\"\n #include \"gimple-pretty-print.h\"\n #include \"gimple.h\"\n+#include \"gimple-iterator.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-cfg.h\"\n #include \"tree-ssanames.h\""}, {"sha": "9cdb1a5b9781b1a5a24111c6405e5d1350c53886", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -31,6 +31,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"ggc.h\"\n #include \"gimple-pretty-print.h\"\n #include \"gimplify.h\"\n+#include \"gimple-iterator.h\"\n+#include \"gimple-walk.h\"\n #include \"gimple-ssa.h\"\n #include \"cgraph.h\"\n #include \"tree-cfg.h\""}, {"sha": "fbda06ab745cad4f9a67e107b566683cfe6f904f", "filename": "gcc/tree-cfgcleanup.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-cfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-cfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfgcleanup.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -30,6 +30,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"ggc.h\"\n #include \"langhooks.h\"\n #include \"gimplify.h\"\n+#include \"gimple-iterator.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-cfg.h\"\n #include \"tree-phinodes.h\""}, {"sha": "188bf1a9336493a2b1870320623e70fffd47ce81", "filename": "gcc/tree-complex.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-complex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-complex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-complex.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -24,6 +24,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree.h\"\n #include \"flags.h\"\n #include \"gimplify.h\"\n+#include \"gimple-iterator.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-cfg.h\"\n #include \"tree-phinodes.h\""}, {"sha": "2aa58363224ccccb36bf47a0cf4bcefbae4bb50e", "filename": "gcc/tree-data-ref.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-data-ref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-data-ref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -79,6 +79,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree.h\"\n #include \"gimple-pretty-print.h\"\n #include \"gimple.h\"\n+#include \"gimple-iterator.h\"\n #include \"tree-ssa-loop-niter.h\"\n #include \"tree-ssa-loop.h\"\n #include \"tree-ssa.h\""}, {"sha": "91f8c0ef00d1f930d02f47dd23af2d121d3d542e", "filename": "gcc/tree-dfa.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-dfa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-dfa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dfa.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -33,6 +33,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"function.h\"\n #include \"tree-pretty-print.h\"\n #include \"gimple.h\"\n+#include \"gimple-iterator.h\"\n+#include \"gimple-walk.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-phinodes.h\"\n #include \"ssa-iterators.h\""}, {"sha": "656ba6f5cb3dd07953c1629f954884dc77c2f119", "filename": "gcc/tree-eh.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-eh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-eh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-eh.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -28,6 +28,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"except.h\"\n #include \"pointer-set.h\"\n #include \"gimple.h\"\n+#include \"gimple-iterator.h\"\n #include \"gimple-ssa.h\"\n #include \"cgraph.h\"\n #include \"tree-cfg.h\""}, {"sha": "11337c0c1273b389a4a7b583c8c2d44a41a43feb", "filename": "gcc/tree-emutls.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-emutls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-emutls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-emutls.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -22,6 +22,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"coretypes.h\"\n #include \"tree.h\"\n #include \"gimple.h\"\n+#include \"gimple-iterator.h\"\n+#include \"gimple-walk.h\"\n #include \"tree-pass.h\"\n #include \"gimple-ssa.h\"\n #include \"cgraph.h\""}, {"sha": "dc630e2d1146d3ff49d76f9c23f66d777dc59465", "filename": "gcc/tree-if-conv.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-if-conv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-if-conv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-if-conv.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -89,6 +89,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"basic-block.h\"\n #include \"gimple-pretty-print.h\"\n #include \"gimplify.h\"\n+#include \"gimple-iterator.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-cfg.h\"\n #include \"tree-phinodes.h\""}, {"sha": "fe5c0cb73677ee28784cdf40632e55117e42449a", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -35,6 +35,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-iterator.h\"\n #include \"intl.h\"\n #include \"gimplify.h\"\n+#include \"gimple-iterator.h\"\n+#include \"gimple-walk.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-cfg.h\"\n #include \"tree-phinodes.h\""}, {"sha": "e7c5d50da0cd40ea32d5466b1602f6f10cd8e7a5", "filename": "gcc/tree-into-ssa.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-into-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-into-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-into-ssa.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -30,6 +30,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"function.h\"\n #include \"gimple-pretty-print.h\"\n #include \"gimple.h\"\n+#include \"gimple-iterator.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-cfg.h\"\n #include \"tree-phinodes.h\""}, {"sha": "75d069bbbf372e17ffb7b98acd6f9f229257d359", "filename": "gcc/tree-loop-distribution.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-loop-distribution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-loop-distribution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-loop-distribution.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -46,6 +46,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"coretypes.h\"\n #include \"tree.h\"\n #include \"gimplify.h\"\n+#include \"gimple-iterator.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-cfg.h\"\n #include \"tree-phinodes.h\""}, {"sha": "f6baf00042d9f8ed2e6c2a8b779fd6334e9cc1f1", "filename": "gcc/tree-nested.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-nested.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-nested.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-nested.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -27,6 +27,8 @@\n #include \"tree-dump.h\"\n #include \"tree-inline.h\"\n #include \"gimplify.h\"\n+#include \"gimple-iterator.h\"\n+#include \"gimple-walk.h\"\n #include \"tree-iterator.h\"\n #include \"bitmap.h\"\n #include \"cgraph.h\""}, {"sha": "b333abf395608aba12f1afa1217d0295772a688d", "filename": "gcc/tree-nrv.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-nrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-nrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-nrv.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -26,6 +26,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"basic-block.h\"\n #include \"tree-pretty-print.h\"\n #include \"gimple.h\"\n+#include \"gimple-iterator.h\"\n+#include \"gimple-walk.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-ssanames.h\"\n #include \"tree-pass.h\""}, {"sha": "965dffa4290f6c645d68c59a39f836553e527b1b", "filename": "gcc/tree-object-size.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-object-size.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-object-size.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-object-size.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -27,6 +27,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimple-pretty-print.h\"\n #include \"bitmap.h\"\n #include \"gimple.h\"\n+#include \"gimple-iterator.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-ssanames.h\"\n #include \"tree-pass.h\""}, {"sha": "eb11c883fb4e309515a3a7c00ff138571d701d6b", "filename": "gcc/tree-outof-ssa.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-outof-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-outof-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-outof-ssa.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -29,6 +29,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"bitmap.h\"\n #include \"sbitmap.h\"\n #include \"gimple.h\"\n+#include \"gimple-iterator.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-cfg.h\"\n #include \"tree-phinodes.h\""}, {"sha": "3a478f916b0283163b54a6797877f9c624efe0dd", "filename": "gcc/tree-parloops.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-parloops.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-parloops.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-parloops.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -24,6 +24,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"coretypes.h\"\n #include \"tree.h\"\n #include \"gimplify.h\"\n+#include \"gimple-iterator.h\"\n+#include \"gimple-walk.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-cfg.h\"\n #include \"tree-phinodes.h\""}, {"sha": "da7bf5be978d566a9999222149def1da796c3c63", "filename": "gcc/tree-phinodes.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-phinodes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-phinodes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-phinodes.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -25,6 +25,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"ggc.h\"\n #include \"basic-block.h\"\n #include \"gimple.h\"\n+#include \"gimple-iterator.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-phinodes.h\"\n #include \"ssa-iterators.h\"\n@@ -504,5 +505,18 @@ degenerate_phi_result (gimple phi)\n   return (i == gimple_phi_num_args (phi) ? val : NULL);\n }\n \n+/* Set PHI nodes of a basic block BB to SEQ.  */\n+\n+void\n+set_phi_nodes (basic_block bb, gimple_seq seq)\n+{\n+  gimple_stmt_iterator i;\n+\n+  gcc_checking_assert (!(bb->flags & BB_RTL));\n+  bb->il.gimple.phi_nodes = seq;\n+  if (seq)\n+    for (i = gsi_start (seq); !gsi_end_p (i); gsi_next (&i))\n+      gimple_set_bb (gsi_stmt (i), bb);\n+}\n \n #include \"gt-tree-phinodes.h\""}, {"sha": "4dd5e1362d31f6c8a931efc150a2dc4a2f6bc42d", "filename": "gcc/tree-phinodes.h", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-phinodes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-phinodes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-phinodes.h?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -30,21 +30,7 @@ extern void remove_phi_args (edge);\n extern void remove_phi_node (gimple_stmt_iterator *, bool);\n extern void remove_phi_nodes (basic_block);\n extern tree degenerate_phi_result (gimple);\n-\n-/* Set PHI nodes of a basic block BB to SEQ.  */\n-\n-static inline void\n-set_phi_nodes (basic_block bb, gimple_seq seq)\n-{\n-  gimple_stmt_iterator i;\n-\n-  gcc_checking_assert (!(bb->flags & BB_RTL));\n-  bb->il.gimple.phi_nodes = seq;\n-  if (seq)\n-    for (i = gsi_start (seq); !gsi_end_p (i); gsi_next (&i))\n-      gimple_set_bb (gsi_stmt (i), bb);\n-}\n-\n+extern void set_phi_nodes (basic_block, gimple_seq);\n \n static inline use_operand_p\n gimple_phi_arg_imm_use_ptr (gimple gs, int i)"}, {"sha": "e08e9b6c69730058c6ff99d37d6d1471afba938f", "filename": "gcc/tree-predcom.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-predcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-predcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-predcom.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -192,6 +192,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm_p.h\"\n #include \"cfgloop.h\"\n #include \"gimplify.h\"\n+#include \"gimple-iterator.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-phinodes.h\"\n #include \"ssa-iterators.h\""}, {"sha": "428ffc7c46454e5a6db69997a8c3ef8ea1b74722", "filename": "gcc/tree-profile.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-profile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-profile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-profile.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -35,6 +35,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"coverage.h\"\n #include \"tree.h\"\n #include \"gimplify.h\"\n+#include \"gimple-iterator.h\"\n #include \"gimple-ssa.h\"\n #include \"cgraph.h\"\n #include \"tree-cfg.h\""}, {"sha": "ffc6d3d09c414eff23486f74d677f860c781eb52", "filename": "gcc/tree-scalar-evolution.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-scalar-evolution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-scalar-evolution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-scalar-evolution.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -260,6 +260,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"hash-table.h\"\n #include \"gimple-pretty-print.h\"\n #include \"gimplify.h\"\n+#include \"gimple-iterator.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-cfg.h\"\n #include \"tree-phinodes.h\""}, {"sha": "31fcdfeee3f84fbee2c4964109e1a03256388d0e", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -79,6 +79,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm.h\"\n #include \"tree.h\"\n #include \"gimplify.h\"\n+#include \"gimple-iterator.h\"\n+#include \"gimple-walk.h\"\n #include \"bitmap.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-cfg.h\""}, {"sha": "c98c742d8b3aff760472870620f1e5efc08cd034", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -120,6 +120,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"function.h\"\n #include \"gimple-pretty-print.h\"\n #include \"gimplify.h\"\n+#include \"gimple-iterator.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-cfg.h\"\n #include \"tree-phinodes.h\""}, {"sha": "942602e5fe3e0ae3559245447e525127582e07fb", "filename": "gcc/tree-ssa-coalesce.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-ssa-coalesce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-ssa-coalesce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-coalesce.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -28,6 +28,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"bitmap.h\"\n #include \"dumpfile.h\"\n #include \"gimple.h\"\n+#include \"gimple-iterator.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-phinodes.h\"\n #include \"ssa-iterators.h\""}, {"sha": "0f70372c80ef2809866fe1999ac73043925f5663", "filename": "gcc/tree-ssa-copy.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-ssa-copy.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-ssa-copy.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-copy.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -28,6 +28,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"function.h\"\n #include \"gimple-pretty-print.h\"\n #include \"gimple.h\"\n+#include \"gimple-iterator.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-cfg.h\"\n #include \"tree-phinodes.h\""}, {"sha": "d71802e7a1c488590669a75f94801adbbf1d2195", "filename": "gcc/tree-ssa-copyrename.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-ssa-copyrename.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-ssa-copyrename.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-copyrename.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -24,6 +24,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm.h\"\n #include \"tree.h\"\n #include \"gimple.h\"\n+#include \"gimple-iterator.h\"\n #include \"flags.h\"\n #include \"basic-block.h\"\n #include \"function.h\""}, {"sha": "5da2106b7e7d51b77d71ed222970153e90c2839c", "filename": "gcc/tree-ssa-dce.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-ssa-dce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-ssa-dce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dce.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -51,6 +51,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimple-pretty-print.h\"\n #include \"basic-block.h\"\n #include \"gimplify.h\"\n+#include \"gimple-iterator.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-cfg.h\"\n #include \"tree-phinodes.h\""}, {"sha": "0ce24df2abef6c21c0b1613b3d4a6e9a38cc6ce2", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -31,6 +31,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"function.h\"\n #include \"gimple-pretty-print.h\"\n #include \"gimple.h\"\n+#include \"gimple-iterator.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-cfg.h\"\n #include \"tree-phinodes.h\""}, {"sha": "42e2380a0c8ca394712745196dcfc8b81a608c34", "filename": "gcc/tree-ssa-dse.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-ssa-dse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-ssa-dse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dse.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -28,6 +28,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimple-pretty-print.h\"\n #include \"bitmap.h\"\n #include \"gimple.h\"\n+#include \"gimple-iterator.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-cfg.h\"\n #include \"tree-phinodes.h\""}, {"sha": "71c56a050ac14f0f748241bbaf20d7536a917712", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -26,6 +26,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"basic-block.h\"\n #include \"gimple-pretty-print.h\"\n #include \"gimplify.h\"\n+#include \"gimple-iterator.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-cfg.h\"\n #include \"tree-phinodes.h\""}, {"sha": "3fbaba7920b80a3a4b806c4d5d86f3f13b797378", "filename": "gcc/tree-ssa-ifcombine.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-ssa-ifcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-ssa-ifcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ifcombine.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -30,6 +30,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"basic-block.h\"\n #include \"tree-pretty-print.h\"\n #include \"gimplify.h\"\n+#include \"gimple-iterator.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-cfg.h\"\n #include \"tree-phinodes.h\""}, {"sha": "1657f6f6ca5135707426f6ea030306c6c4f94ab4", "filename": "gcc/tree-ssa-live.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-ssa-live.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-ssa-live.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-live.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -28,6 +28,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"bitmap.h\"\n #include \"sbitmap.h\"\n #include \"gimple.h\"\n+#include \"gimple-iterator.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-phinodes.h\"\n #include \"ssa-iterators.h\""}, {"sha": "57c1555d28c7e51aa849a1957761a257443c3af5", "filename": "gcc/tree-ssa-loop-ch.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-ssa-loop-ch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-ssa-loop-ch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ch.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -25,6 +25,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm_p.h\"\n #include \"basic-block.h\"\n #include \"gimple.h\"\n+#include \"gimple-iterator.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-cfg.h\"\n #include \"tree-into-ssa.h\""}, {"sha": "48697c7fa246adfd489357d12fb32123fe07f4df", "filename": "gcc/tree-ssa-loop-im.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-ssa-loop-im.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-ssa-loop-im.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-im.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -26,6 +26,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"basic-block.h\"\n #include \"gimple-pretty-print.h\"\n #include \"gimplify.h\"\n+#include \"gimple-iterator.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-cfg.h\"\n #include \"tree-phinodes.h\""}, {"sha": "9fd649e6e0930c3013cb84a0f71f08c37150e811", "filename": "gcc/tree-ssa-loop-ivcanon.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-ssa-loop-ivcanon.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-ssa-loop-ivcanon.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivcanon.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -41,6 +41,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"basic-block.h\"\n #include \"gimple-pretty-print.h\"\n #include \"gimple.h\"\n+#include \"gimple-iterator.h\"\n #include \"gimple-ssa.h\"\n #include \"cgraph.h\"\n #include \"tree-cfg.h\""}, {"sha": "4eb615f1296bf0ff024a789b96ecd28463c62215", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -70,6 +70,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"basic-block.h\"\n #include \"gimple-pretty-print.h\"\n #include \"gimplify.h\"\n+#include \"gimple-iterator.h\"\n #include \"gimple-ssa.h\"\n #include \"cgraph.h\"\n #include \"tree-cfg.h\""}, {"sha": "66c51280152cfac3854b98d4f0240e6dd4d59280", "filename": "gcc/tree-ssa-loop-manip.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-ssa-loop-manip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-ssa-loop-manip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-manip.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -25,6 +25,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm_p.h\"\n #include \"basic-block.h\"\n #include \"gimplify.h\"\n+#include \"gimple-iterator.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-cfg.h\"\n #include \"tree-phinodes.h\""}, {"sha": "79e7eff98b240ed75866fcf7f93f38e619832634", "filename": "gcc/tree-ssa-loop-niter.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-ssa-loop-niter.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-ssa-loop-niter.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-niter.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -27,6 +27,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimple-pretty-print.h\"\n #include \"intl.h\"\n #include \"gimplify.h\"\n+#include \"gimple-iterator.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-cfg.h\"\n #include \"tree-phinodes.h\""}, {"sha": "edb49dbde8859bf937d901de6472e4048e20ffcf", "filename": "gcc/tree-ssa-loop-prefetch.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-ssa-loop-prefetch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-ssa-loop-prefetch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-prefetch.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -26,6 +26,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"basic-block.h\"\n #include \"tree-pretty-print.h\"\n #include \"gimplify.h\"\n+#include \"gimple-iterator.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-ssa-loop-ivopts.h\"\n #include \"tree-ssa-loop-manip.h\""}, {"sha": "20454f2edf498ab8fae6ebf4c70921edceb52ff3", "filename": "gcc/tree-ssa-loop.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-ssa-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-ssa-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -25,6 +25,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm_p.h\"\n #include \"basic-block.h\"\n #include \"gimple.h\"\n+#include \"gimple-iterator.h\"\n #include \"tree-ssa-loop-ivopts.h\"\n #include \"tree-ssa-loop-manip.h\"\n #include \"tree-ssa-loop-niter.h\""}, {"sha": "cd654d2502ec9fc0bf98a00ea793bcef4dfd2553", "filename": "gcc/tree-ssa-math-opts.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-ssa-math-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-ssa-math-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-math-opts.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -91,6 +91,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"flags.h\"\n #include \"tree.h\"\n #include \"gimplify.h\"\n+#include \"gimple-iterator.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-cfg.h\"\n #include \"tree-phinodes.h\""}, {"sha": "caa4925cfb503956cc4b8ff3507f382d06c22de2", "filename": "gcc/tree-ssa-phiopt.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-ssa-phiopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-ssa-phiopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiopt.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -28,6 +28,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm_p.h\"\n #include \"basic-block.h\"\n #include \"gimplify.h\"\n+#include \"gimple-iterator.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-cfg.h\"\n #include \"tree-phinodes.h\""}, {"sha": "904d0a432ce99739b8db8abdf572e427d8923f45", "filename": "gcc/tree-ssa-phiprop.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-ssa-phiprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-ssa-phiprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiprop.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -27,6 +27,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"basic-block.h\"\n #include \"gimple-pretty-print.h\"\n #include \"gimplify.h\"\n+#include \"gimple-iterator.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-phinodes.h\"\n #include \"ssa-iterators.h\""}, {"sha": "5b075077d3e1b8029981bda0f9f042769a0b6f1b", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -28,6 +28,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimple-pretty-print.h\"\n #include \"tree-inline.h\"\n #include \"gimplify.h\"\n+#include \"gimple-iterator.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-cfg.h\"\n #include \"tree-phinodes.h\""}, {"sha": "b10544836ff04ccc7973bc6a42cfc0097004a42d", "filename": "gcc/tree-ssa-propagate.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-ssa-propagate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-ssa-propagate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-propagate.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -31,6 +31,7 @@\n #include \"dumpfile.h\"\n #include \"sbitmap.h\"\n #include \"gimplify.h\"\n+#include \"gimple-iterator.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-cfg.h\"\n #include \"tree-phinodes.h\""}, {"sha": "d55c943324baac5cbfef65da14539fb89e16cf02", "filename": "gcc/tree-ssa-reassoc.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-ssa-reassoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-ssa-reassoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-reassoc.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -30,6 +30,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimple-pretty-print.h\"\n #include \"tree-inline.h\"\n #include \"gimplify.h\"\n+#include \"gimple-iterator.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-cfg.h\"\n #include \"tree-phinodes.h\""}, {"sha": "caf10bb522fc3e55a5f8b5ecf4bdbd7771e579c2", "filename": "gcc/tree-ssa-sink.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-ssa-sink.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-ssa-sink.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sink.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -27,6 +27,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimple-pretty-print.h\"\n #include \"tree-inline.h\"\n #include \"gimple.h\"\n+#include \"gimple-iterator.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-cfg.h\"\n #include \"tree-phinodes.h\""}, {"sha": "565def76ca11d0d075b168944dcb026e9cca90e6", "filename": "gcc/tree-ssa-strlen.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-ssa-strlen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-ssa-strlen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-strlen.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -25,6 +25,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"hash-table.h\"\n #include \"bitmap.h\"\n #include \"gimplify.h\"\n+#include \"gimple-iterator.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-phinodes.h\"\n #include \"ssa-iterators.h\""}, {"sha": "d8dbf05c767fea917c2dd7337ebae017731616e0", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -30,6 +30,7 @@\n #include \"basic-block.h\"\n #include \"tree.h\"\n #include \"gimple.h\"\n+#include \"gimple-iterator.h\"\n #include \"gimple-ssa.h\"\n #include \"cgraph.h\"\n #include \"tree-ssanames.h\""}, {"sha": "18c15d9110740ac2ee9574fa9340a213348274e0", "filename": "gcc/tree-ssa-tail-merge.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-ssa-tail-merge.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-ssa-tail-merge.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-tail-merge.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -195,6 +195,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"flags.h\"\n #include \"function.h\"\n #include \"gimple.h\"\n+#include \"gimple-iterator.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-cfg.h\"\n #include \"tree-phinodes.h\""}, {"sha": "df0c458e0195eb6d277b54dfbbadade6e7ad20e6", "filename": "gcc/tree-ssa-ter.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-ssa-ter.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-ssa-ter.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ter.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -27,6 +27,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimple-pretty-print.h\"\n #include \"bitmap.h\"\n #include \"gimple.h\"\n+#include \"gimple-iterator.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-phinodes.h\"\n #include \"ssa-iterators.h\""}, {"sha": "c9b2c697d889f31eb03defc34ffd62eb1ade93f2", "filename": "gcc/tree-ssa-threadedge.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-ssa-threadedge.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-ssa-threadedge.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadedge.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -31,6 +31,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"timevar.h\"\n #include \"dumpfile.h\"\n #include \"gimple.h\"\n+#include \"gimple-iterator.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-cfg.h\"\n #include \"tree-phinodes.h\""}, {"sha": "e819d65e03034e6e449bea46b8ee96401277ce8c", "filename": "gcc/tree-ssa-threadupdate.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-ssa-threadupdate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-ssa-threadupdate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadupdate.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -25,6 +25,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"basic-block.h\"\n #include \"function.h\"\n #include \"gimple.h\"\n+#include \"gimple-iterator.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-phinodes.h\"\n #include \"tree-ssa.h\""}, {"sha": "25f9f45b285f77e0fcbd64aa17c944b8a4bcfa37", "filename": "gcc/tree-ssa-uncprop.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-ssa-uncprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-ssa-uncprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-uncprop.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -27,6 +27,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"basic-block.h\"\n #include \"function.h\"\n #include \"gimple.h\"\n+#include \"gimple-iterator.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-cfg.h\"\n #include \"tree-phinodes.h\""}, {"sha": "a15e37c5151266e7aca91e646daabb8feee4bf57", "filename": "gcc/tree-ssa-uninit.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-ssa-uninit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-ssa-uninit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-uninit.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -31,6 +31,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"bitmap.h\"\n #include \"pointer-set.h\"\n #include \"gimple.h\"\n+#include \"gimple-iterator.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-phinodes.h\"\n #include \"ssa-iterators.h\""}, {"sha": "c774198e9abfd7760cc0b0d2f43c167bd7099f47", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -32,6 +32,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimple-pretty-print.h\"\n #include \"pointer-set.h\"\n #include \"gimplify.h\"\n+#include \"gimple-iterator.h\"\n+#include \"gimple-walk.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-phinodes.h\"\n #include \"ssa-iterators.h\""}, {"sha": "b0d2dacd8e122b03eda22bcb8761b999c2040584", "filename": "gcc/tree-stdarg.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-stdarg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-stdarg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-stdarg.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -29,6 +29,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"target.h\"\n #include \"bitmap.h\"\n #include \"gimple.h\"\n+#include \"gimple-iterator.h\"\n+#include \"gimple-walk.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-phinodes.h\"\n #include \"ssa-iterators.h\""}, {"sha": "e7ffd434888f47771c86cadfe56a7e1b02994231", "filename": "gcc/tree-switch-conversion.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-switch-conversion.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-switch-conversion.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-switch-conversion.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -32,6 +32,7 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n #include \"tree.h\"\n #include \"basic-block.h\"\n #include \"gimplify.h\"\n+#include \"gimple-iterator.h\"\n #include \"gimple-ssa.h\"\n #include \"cgraph.h\"\n #include \"tree-cfg.h\""}, {"sha": "eded4b690efd10bcd778c2c9d0a95934f619876c", "filename": "gcc/tree-tailcall.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-tailcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-tailcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-tailcall.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -26,6 +26,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"basic-block.h\"\n #include \"function.h\"\n #include \"gimplify.h\"\n+#include \"gimple-iterator.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-cfg.h\"\n #include \"tree-phinodes.h\""}, {"sha": "7164684c5067dfed51a24eb1fca2f7ae87388dc8", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -31,6 +31,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"basic-block.h\"\n #include \"gimple-pretty-print.h\"\n #include \"gimplify.h\"\n+#include \"gimple-iterator.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-phinodes.h\"\n #include \"ssa-iterators.h\""}, {"sha": "a82ecb2cd8159787efee11b5532be636c678a1fe", "filename": "gcc/tree-vect-generic.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-vect-generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-vect-generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-generic.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -24,6 +24,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm.h\"\n #include \"langhooks.h\"\n #include \"gimplify.h\"\n+#include \"gimple-iterator.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-cfg.h\"\n #include \"tree-ssanames.h\""}, {"sha": "01414ecae9126a405e37be323d3a8382e26a3593", "filename": "gcc/tree-vect-loop-manip.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-vect-loop-manip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-vect-loop-manip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop-manip.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -29,6 +29,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"basic-block.h\"\n #include \"gimple-pretty-print.h\"\n #include \"gimplify.h\"\n+#include \"gimple-iterator.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-cfg.h\"\n #include \"tree-phinodes.h\""}, {"sha": "8dd3c430b479713002166df7d4411458d8e4fb4f", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -29,6 +29,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"basic-block.h\"\n #include \"gimple-pretty-print.h\"\n #include \"gimplify.h\"\n+#include \"gimple-iterator.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-phinodes.h\"\n #include \"ssa-iterators.h\""}, {"sha": "8cca6c67fc34714d8d6ba325c1dc58bccaf36f16", "filename": "gcc/tree-vect-patterns.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-vect-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-vect-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -28,6 +28,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"basic-block.h\"\n #include \"gimple-pretty-print.h\"\n #include \"gimplify.h\"\n+#include \"gimple-iterator.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-phinodes.h\"\n #include \"ssa-iterators.h\""}, {"sha": "247bdfd6669ace9050d9f69bf32e28048cc3a001", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -30,6 +30,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"basic-block.h\"\n #include \"gimple-pretty-print.h\"\n #include \"gimple.h\"\n+#include \"gimple-iterator.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-phinodes.h\"\n #include \"ssa-iterators.h\""}, {"sha": "9dfa7bdd88ba3e451fda54e281b3879d6cda1dfb", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -30,6 +30,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"basic-block.h\"\n #include \"gimple-pretty-print.h\"\n #include \"gimplify.h\"\n+#include \"gimple-iterator.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-cfg.h\"\n #include \"tree-phinodes.h\""}, {"sha": "9c2cf5d1ce213553605f20668b8f9fe692a6be31", "filename": "gcc/tree-vectorizer.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-vectorizer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-vectorizer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -63,6 +63,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree.h\"\n #include \"tree-pretty-print.h\"\n #include \"gimple.h\"\n+#include \"gimple-iterator.h\"\n+#include \"gimple-walk.h\"\n #include \"gimple-ssa.h\"\n #include \"cgraph.h\"\n #include \"tree-phinodes.h\""}, {"sha": "656e8e1c9bcda59dd2e985159114b5bcb5207c86", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -27,6 +27,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree.h\"\n #include \"basic-block.h\"\n #include \"gimple.h\"\n+#include \"gimple-iterator.h\"\n+#include \"gimple-walk.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-cfg.h\"\n #include \"tree-phinodes.h\""}, {"sha": "c4484536e82790a7bcaa4772e0b77851632a12a5", "filename": "gcc/tree.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -49,6 +49,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"basic-block.h\"\n #include \"bitmap.h\"\n #include \"gimple.h\"\n+#include \"gimple-iterator.h\"\n #include \"gimple-ssa.h\"\n #include \"cgraph.h\"\n #include \"tree-phinodes.h\""}, {"sha": "0de971319add51b6d09944a494e26ed920282f9f", "filename": "gcc/tsan.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftsan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Ftsan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftsan.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -27,6 +27,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm.h\"\n #include \"basic-block.h\"\n #include \"gimplify.h\"\n+#include \"gimple-iterator.h\"\n #include \"function.h\"\n #include \"gimple-ssa.h\"\n #include \"cgraph.h\""}, {"sha": "6f822f65bd1a5fab97a2c53162a0cd304bd436ac", "filename": "gcc/value-prof.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Fvalue-prof.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Fvalue-prof.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-prof.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -34,6 +34,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"regs.h\"\n #include \"ggc.h\"\n #include \"gimplify.h\"\n+#include \"gimple-iterator.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-cfg.h\"\n #include \"tree-phinodes.h\""}, {"sha": "ecf1dc25e84e6c92dbe739d6d340e2fb1a6402ca", "filename": "gcc/vtable-verify.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Fvtable-verify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be5c238419ffa6985605af60bc1f047770b9bd8/gcc%2Fvtable-verify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvtable-verify.c?ref=5be5c238419ffa6985605af60bc1f047770b9bd8", "patch": "@@ -139,6 +139,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree.h\"\n #include \"basic-block.h\"\n #include \"gimple.h\"\n+#include \"gimple-iterator.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-phinodes.h\"\n #include \"ssa-iterators.h\""}]}