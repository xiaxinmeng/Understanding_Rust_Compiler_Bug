{"sha": "92a2114171f4ab907f94f3629f1412579a8d8584", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTJhMjExNDE3MWY0YWI5MDdmOTRmMzYyOWYxNDEyNTc5YThkODU4NA==", "commit": {"author": {"name": "Brad Kaiser", "email": "bkaiser@acelink.net", "date": "2001-11-21T00:04:47Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-11-21T00:04:47Z"}, "message": "reload1.c (elimination_effects): Use function_invariant_p instead of CONSTANT_P when...\n\n        * reload1.c (elimination_effects): Use function_invariant_p\n        instead of CONSTANT_P when considering register equivalences.\n\nFrom-SVN: r47226", "tree": {"sha": "254f95bb18f5024720a10541c4c4bacfe2730a8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/254f95bb18f5024720a10541c4c4bacfe2730a8f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/92a2114171f4ab907f94f3629f1412579a8d8584", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92a2114171f4ab907f94f3629f1412579a8d8584", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92a2114171f4ab907f94f3629f1412579a8d8584", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92a2114171f4ab907f94f3629f1412579a8d8584/comments", "author": null, "committer": null, "parents": [{"sha": "da6ccf8361f36e7111cdf92dbc6afb637b3adf2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da6ccf8361f36e7111cdf92dbc6afb637b3adf2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da6ccf8361f36e7111cdf92dbc6afb637b3adf2c"}], "stats": {"total": 87, "additions": 86, "deletions": 1}, "files": [{"sha": "a4eea6c6cda2dff43a38a082cecf9eca4a8cc15a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92a2114171f4ab907f94f3629f1412579a8d8584/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92a2114171f4ab907f94f3629f1412579a8d8584/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=92a2114171f4ab907f94f3629f1412579a8d8584", "patch": "@@ -1,3 +1,8 @@\n+2001-11-20  Brad Kaiser  <bkaiser@acelink.net>\n+ \n+\t* reload1.c (elimination_effects): Use function_invariant_p\n+\tinstead of CONSTANT_P when considering register equivalences.\n+\n 2001-11-20  David O'Brien  <obrien@FreeBSD.org>\n \n \t* config.gcc: Add FreeBSD/PowerPC target."}, {"sha": "1f20a489f62e477bdbd5e987040e2ab94322da8d", "filename": "gcc/reload1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92a2114171f4ab907f94f3629f1412579a8d8584/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92a2114171f4ab907f94f3629f1412579a8d8584/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=92a2114171f4ab907f94f3629f1412579a8d8584", "patch": "@@ -2699,7 +2699,7 @@ elimination_effects (x, mem_mode)\n \t}\n       else if (reg_renumber[regno] < 0 && reg_equiv_constant\n \t       && reg_equiv_constant[regno]\n-\t       && ! CONSTANT_P (reg_equiv_constant[regno]))\n+\t       && ! function_invariant_p (reg_equiv_constant[regno]))\n \telimination_effects (reg_equiv_constant[regno], mem_mode);\n       return;\n "}, {"sha": "5b3c00cd36faccd0471eb284fb52e7aa006354b2", "filename": "gcc/testsuite/gcc.dg/20011119-1.c", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92a2114171f4ab907f94f3629f1412579a8d8584/gcc%2Ftestsuite%2Fgcc.dg%2F20011119-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92a2114171f4ab907f94f3629f1412579a8d8584/gcc%2Ftestsuite%2Fgcc.dg%2F20011119-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20011119-1.c?ref=92a2114171f4ab907f94f3629f1412579a8d8584", "patch": "@@ -0,0 +1,80 @@\n+/* Test for reload failing to eliminate from argp to sp.  */\n+/* { dg-do run { target i?86-*-* } } */\n+/* { dg-options \"-O2 -fomit-frame-pointer\" } */\n+\n+static int ustrsize (const char *s);\n+static int (*ucwidth) (int c);\n+static int (*ugetxc) (const char **s);\n+static int (*usetc) (char *s, int c);\n+\n+char *ustrzcat(char *dest, int size, const char *src)\n+{\n+   int pos = ustrsize(dest);\n+   int c;\n+\n+   size -= pos + ucwidth(0);\n+\n+   while ((c = ugetxc(&src)) != 0) {\n+      size -= ucwidth(c);\n+      if (size < 0)\n+         break;\n+\n+      pos += usetc(dest+pos, c);\n+   }\n+\n+   usetc(dest+pos, 0);\n+\n+   return dest;\n+}\n+\n+static int __attribute__((noinline))\n+ustrsize (const char *s)\n+{\n+  return 0;\n+}\n+\n+static int\n+ucwidth_ (int c)\n+{\n+  return 1;\n+}\n+\n+static int\n+ugetxc_ (const char **s)\n+{\n+  return '\\0';\n+}\n+\n+static int\n+usetc_ (char *s, int c)\n+{\n+  return 1;\n+}\n+\n+int\n+main()\n+{\n+  ucwidth = ucwidth_;\n+  ugetxc = ugetxc_;\n+  usetc = usetc_;\n+  \n+  /* ??? It is impossible to explicitly modify the hard frame pointer.\n+     This will run afoul of code in flow.c that declines to mark regs\n+     in eliminate_regs in regs_ever_used.  Apparently, we have to wait\n+     for reload to decide that it won't need a frame pointer before a\n+     variable can be allocated to %ebp.\n+\n+     So save, restore, and clobber %ebp by hand.  */\n+\n+  asm (\"pushl %%ebp\\n\\t\"\n+       \"movl $-1, %%ebp\\n\\t\"\n+       \"pushl $0\\n\\t\"\n+       \"pushl $0\\n\\t\"\n+       \"pushl $0\\n\\t\"\n+       \"call %P0\\n\\t\"\n+       \"addl $12, %%esp\\n\\t\"\n+       \"popl %%ebp\"\n+       : : \"i\"(ustrzcat));\n+\n+  return 0;\n+}"}]}