{"sha": "9b054b08813d37586d6765fd087b0fc85dc94daf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWIwNTRiMDg4MTNkMzc1ODZkNjc2NWZkMDg3YjBmYzg1ZGM5NGRhZg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2015-10-13T07:34:41Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2015-10-13T07:34:41Z"}, "message": "To...\n\nTo: gcc-patches@gcc.gnu.org\nSubject: Add an extra pow rule to match.pd\nFrom: Richard Sandiford <richard.sandiford@arm.com>\nGcc: private.sent\n--text follows this line--\nSimplify pow(|x|,y) and pow(-x,y) to pow(x,y) if y is an even integer.\nAt the moment this duplicates a case in fold_builtin_pow, but an\nupcoming patch will move all the fold_builtin_pow rules to match.pd.\nI'm doing this one early to fix a regression in builtin-10.c for\nsoft-float ARM.\n\ngcc/\n\t* real.h (real_isinteger): Declare.\n\t* real.c (real_isinteger): New function.\n\t* match.pd: Simplify pow(|x|,y) and pow(-x,y) to pow(x,y)\n\tif y is an even integer.\n\nFrom-SVN: r228750", "tree": {"sha": "ce58f25ea3acb2f496d0e9a22bb891f6e38e668d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ce58f25ea3acb2f496d0e9a22bb891f6e38e668d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b054b08813d37586d6765fd087b0fc85dc94daf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b054b08813d37586d6765fd087b0fc85dc94daf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b054b08813d37586d6765fd087b0fc85dc94daf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b054b08813d37586d6765fd087b0fc85dc94daf/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6696de8a7f7e9bf37e2b9358ad5608dc863ad7a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6696de8a7f7e9bf37e2b9358ad5608dc863ad7a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6696de8a7f7e9bf37e2b9358ad5608dc863ad7a4"}], "stats": {"total": 45, "additions": 39, "deletions": 6}, "files": [{"sha": "9fcea2965a79fd8f4fc2a83bd684cd11f78ee464", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b054b08813d37586d6765fd087b0fc85dc94daf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b054b08813d37586d6765fd087b0fc85dc94daf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9b054b08813d37586d6765fd087b0fc85dc94daf", "patch": "@@ -1,3 +1,10 @@\n+2015-10-13  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* real.h (real_isinteger): Declare.\n+\t* real.c (real_isinteger): New function.\n+\t* match.pd: Simplify pow(|x|,y) and pow(-x,y) to pow(x,y)\n+\tif y is an even integer.\n+\n 2015-10-11  Jan Hubicka  <hubicka@ucw.cz>\n \n \trevert:"}, {"sha": "6714796943e38bb2051afe65cb76420733ce1518", "filename": "gcc/match.pd", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b054b08813d37586d6765fd087b0fc85dc94daf/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b054b08813d37586d6765fd087b0fc85dc94daf/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=9b054b08813d37586d6765fd087b0fc85dc94daf", "patch": "@@ -309,12 +309,19 @@ along with GCC; see the file COPYING3.  If not see\n        && TYPE_OVERFLOW_UNDEFINED (type))\n    @0)))\n \n-/* Simplify cos (-x) -> cos (x).  */\n (for op (negate abs)\n-(for coss (COS COSH)\n- (simplify\n-  (coss (op @0))\n-   (coss @0))))\n+ /* Simplify cos(-x) and cos(|x|) -> cos(x).  Similarly for cosh.  */\n+ (for coss (COS COSH)\n+  (simplify\n+   (coss (op @0))\n+    (coss @0)))\n+ /* Simplify pow(-x, y) and pow(|x|,y) -> pow(x,y) if y is an even integer.  */\n+ (for pows (POW)\n+  (simplify\n+   (pows (op @0) REAL_CST@1)\n+   (with { HOST_WIDE_INT n; }\n+    (if (real_isinteger (&TREE_REAL_CST (@1), &n) && (n & 1) == 0)\n+     (pows @0 @1))))))\n \n /* X % Y is smaller than Y.  */\n (for cmp (lt ge)"}, {"sha": "85ac83d3fdca5163d4764fb4065400c4717bb4da", "filename": "gcc/real.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b054b08813d37586d6765fd087b0fc85dc94daf/gcc%2Freal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b054b08813d37586d6765fd087b0fc85dc94daf/gcc%2Freal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.c?ref=9b054b08813d37586d6765fd087b0fc85dc94daf", "patch": "@@ -4997,6 +4997,24 @@ real_isinteger (const REAL_VALUE_TYPE *c, machine_mode mode)\n   return real_identical (c, &cint);\n }\n \n+/* Check whether C is an integer that fits in a HOST_WIDE_INT,\n+   storing it in *INT_OUT if so.  */\n+\n+bool\n+real_isinteger (const REAL_VALUE_TYPE *c, HOST_WIDE_INT *int_out)\n+{\n+  REAL_VALUE_TYPE cint;\n+\n+  HOST_WIDE_INT n = real_to_integer (c);\n+  real_from_integer (&cint, VOIDmode, n, SIGNED);\n+  if (real_identical (c, &cint))\n+    {\n+      *int_out = n;\n+      return true;\n+    }\n+  return false;\n+}\n+\n /* Write into BUF the maximum representable finite floating-point\n    number, (1 - b**-p) * b**emax for a given FP format FMT as a hex\n    float string.  LEN is the size of BUF, and the buffer must be large"}, {"sha": "e65b5263e11add52d08ddfd936abf1e3a459d698", "filename": "gcc/real.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b054b08813d37586d6765fd087b0fc85dc94daf/gcc%2Freal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b054b08813d37586d6765fd087b0fc85dc94daf/gcc%2Freal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.h?ref=9b054b08813d37586d6765fd087b0fc85dc94daf", "patch": "@@ -467,7 +467,8 @@ extern void real_round (REAL_VALUE_TYPE *, machine_mode,\n extern void real_copysign (REAL_VALUE_TYPE *, const REAL_VALUE_TYPE *);\n \n /* Check whether the real constant value given is an integer.  */\n-extern bool real_isinteger (const REAL_VALUE_TYPE *c, machine_mode mode);\n+extern bool real_isinteger (const REAL_VALUE_TYPE *, machine_mode);\n+extern bool real_isinteger (const REAL_VALUE_TYPE *, HOST_WIDE_INT *);\n \n /* Write into BUF the maximum representable finite floating-point\n    number, (1 - b**-p) * b**emax for a given FP format FMT as a hex"}]}