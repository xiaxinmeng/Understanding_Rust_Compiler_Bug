{"sha": "33a7a63275c959f97b25064cfbe3e7f0dc7f7e9c", "node_id": "C_kwDOANBUbNoAKDMzYTdhNjMyNzVjOTU5Zjk3YjI1MDY0Y2ZiZTNlN2YwZGM3ZjdlOWM", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2021-11-08T17:40:17Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2021-11-08T17:40:17Z"}, "message": "Improve handling of some builtins.\n\nFor nested functions we output call to builtin_dwarf_cfa which\ninitializes frame entry used only for debugging.  This however\nprevents us from detecting functions containing nested functions\nas const/pure or analyze side effects in modref.\n\nbuiltin_dwarf_cfa is not documented and I wonder if it should be turned to\ninternal function. But I think we could consider functions using it const even\nif in theory one can do things like test the return address and see the\ndifference between different frame addreses.\n\nWhile doing so I also noticed that special_buitin_state handles quite few\nbuiltins that are not special cased by ipa-modref.  They do not make\nuser visible loads/stores and thus I think they shoul dbe annotated by\n\".c\" to make this explicit for both modref and PTA.\n\nFinally I aded dwarf_cfa and similar return_address to list of simple\nbulitins since it compiles to simple stack frame load (and we consider\nsimple other builtins doing so).\n\n\t* builtins.c (is_simple_builtin): Add builitin_dwarf_cfa\n\tand builtin_return_address.\n\t(builtin_fnspec): Annotate builtin_return,\n\tbulitin_eh_pointer, builtin_eh_filter, builtin_unwind_resume,\n\tbuiltin_cxa_end_cleanup, builtin_eh_copy_values,\n\tbuiltin_frame_address, builtin_apply_args,\n\tbuiltin_asan_before_dynamic_init, builtin_asan_after_dynamic_init,\n\tbuiltin_prefetch, builtin_dwarf_cfa, builtin_return_addrss\n\tas \".c\"\n\t* ipa-pure-const.c (special_builtin_state): Add builtin_dwarf_cfa\n\tand builtin_return_address.", "tree": {"sha": "d4d7952d55da5d737dc955a871694ae1f6787b1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d4d7952d55da5d737dc955a871694ae1f6787b1f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/33a7a63275c959f97b25064cfbe3e7f0dc7f7e9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33a7a63275c959f97b25064cfbe3e7f0dc7f7e9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33a7a63275c959f97b25064cfbe3e7f0dc7f7e9c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33a7a63275c959f97b25064cfbe3e7f0dc7f7e9c/comments", "author": null, "committer": null, "parents": [{"sha": "666d780426f39883db8362f5cc24cdf9b4d3e98d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/666d780426f39883db8362f5cc24cdf9b4d3e98d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/666d780426f39883db8362f5cc24cdf9b4d3e98d"}], "stats": {"total": 16, "additions": 16, "deletions": 0}, "files": [{"sha": "384864bfb3a465e83d23dd49595a16b75ff545e8", "filename": "gcc/builtins.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33a7a63275c959f97b25064cfbe3e7f0dc7f7e9c/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33a7a63275c959f97b25064cfbe3e7f0dc7f7e9c/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=33a7a63275c959f97b25064cfbe3e7f0dc7f7e9c", "patch": "@@ -10711,6 +10711,7 @@ is_simple_builtin (tree decl)\n       case BUILT_IN_VA_END:\n       case BUILT_IN_STACK_SAVE:\n       case BUILT_IN_STACK_RESTORE:\n+      case BUILT_IN_DWARF_CFA:\n \t/* Exception state returns or moves registers around.  */\n       case BUILT_IN_EH_FILTER:\n       case BUILT_IN_EH_POINTER:\n@@ -11099,6 +11100,19 @@ builtin_fnspec (tree callee)\n       CASE_BUILT_IN_TM_STORE (M256):\n \treturn \".cO \";\n       case BUILT_IN_STACK_SAVE:\n+      case BUILT_IN_RETURN:\n+      case BUILT_IN_EH_POINTER:\n+      case BUILT_IN_EH_FILTER:\n+      case BUILT_IN_UNWIND_RESUME:\n+      case BUILT_IN_CXA_END_CLEANUP:\n+      case BUILT_IN_EH_COPY_VALUES:\n+      case BUILT_IN_FRAME_ADDRESS:\n+      case BUILT_IN_APPLY_ARGS:\n+      case BUILT_IN_ASAN_BEFORE_DYNAMIC_INIT:\n+      case BUILT_IN_ASAN_AFTER_DYNAMIC_INIT:\n+      case BUILT_IN_PREFETCH:\n+      case BUILT_IN_DWARF_CFA:\n+      case BUILT_IN_RETURN_ADDRESS:\n \treturn \".c\";\n       case BUILT_IN_ASSUME_ALIGNED:\n \treturn \"1cX \";"}, {"sha": "e50480929393aa92ed50b6fc2a15212eb5e1fc29", "filename": "gcc/ipa-pure-const.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33a7a63275c959f97b25064cfbe3e7f0dc7f7e9c/gcc%2Fipa-pure-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33a7a63275c959f97b25064cfbe3e7f0dc7f7e9c/gcc%2Fipa-pure-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-pure-const.c?ref=33a7a63275c959f97b25064cfbe3e7f0dc7f7e9c", "patch": "@@ -529,6 +529,8 @@ special_builtin_state (enum pure_const_state_e *state, bool *looping,\n       case BUILT_IN_APPLY_ARGS:\n       case BUILT_IN_ASAN_BEFORE_DYNAMIC_INIT:\n       case BUILT_IN_ASAN_AFTER_DYNAMIC_INIT:\n+      case BUILT_IN_DWARF_CFA:\n+      case BUILT_IN_RETURN_ADDRESS:\n \t*looping = false;\n \t*state = IPA_CONST;\n \treturn true;"}]}