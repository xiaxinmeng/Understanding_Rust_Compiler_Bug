{"sha": "4ee279f254e77ea2fe305bafa4043792cb77356c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGVlMjc5ZjI1NGU3N2VhMmZlMzA1YmFmYTQwNDM3OTJjYjc3MzU2Yw==", "commit": {"author": {"name": "Dorit Nuzman", "email": "dorit@il.ibm.com", "date": "2008-09-26T06:28:01Z"}, "committer": {"name": "Dorit Nuzman", "email": "dorit@gcc.gnu.org", "date": "2008-09-26T06:28:01Z"}, "message": "re PR tree-optimization/37574 (ICE with the vectorizer and GC)\n\n        PR tree-optimization/37574\n        * tree-vectorizer.c (vect_is_simple_use): Fix indentation.\n        * tree-vect-transform.c (vect_get_constant_vectors): Use vectype\n        instead of vector_type for constants. Take computation out of loop.\n        (vect_get_vec_def_for_operand): Use only vectype for constant case,\n        and use only vector_type for invariant case.\n        (get_initial_def_for_reduction): Use vectype instead of vector_type.\n\nFrom-SVN: r140685", "tree": {"sha": "c275619e9695f87f3de38878ab0f1f4d45f5a457", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c275619e9695f87f3de38878ab0f1f4d45f5a457"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4ee279f254e77ea2fe305bafa4043792cb77356c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ee279f254e77ea2fe305bafa4043792cb77356c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ee279f254e77ea2fe305bafa4043792cb77356c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ee279f254e77ea2fe305bafa4043792cb77356c/comments", "author": null, "committer": null, "parents": [{"sha": "105b7136967d687fbb900a2d25e4fe6a876db57d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/105b7136967d687fbb900a2d25e4fe6a876db57d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/105b7136967d687fbb900a2d25e4fe6a876db57d"}], "stats": {"total": 123, "additions": 88, "deletions": 35}, "files": [{"sha": "21c62160ba17255f214a26872ace58634b622818", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ee279f254e77ea2fe305bafa4043792cb77356c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ee279f254e77ea2fe305bafa4043792cb77356c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4ee279f254e77ea2fe305bafa4043792cb77356c", "patch": "@@ -1,3 +1,13 @@\n+2008-09-26  Dorit Nuzman  <dorit@il.ibm.com>\n+\n+\tPR tree-optimization/37574\n+\t* tree-vectorizer.c (vect_is_simple_use): Fix indentation.\n+\t* tree-vect-transform.c (vect_get_constant_vectors): Use vectype\n+\tinstead of vector_type for constants. Take computation out of loop.\n+\t(vect_get_vec_def_for_operand): Use only vectype for constant case,\n+\tand use only vector_type for invariant case.\n+\t(get_initial_def_for_reduction): Use vectype instead of vector_type.\n+\n 2008-09-25  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/37645"}, {"sha": "abada3406c5dc5cf8dcab1dac8611c813f309b8f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ee279f254e77ea2fe305bafa4043792cb77356c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ee279f254e77ea2fe305bafa4043792cb77356c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4ee279f254e77ea2fe305bafa4043792cb77356c", "patch": "@@ -1,3 +1,9 @@\n+2008-09-26  Dorit Nuzman  <dorit@il.ibm.com>\n+\t\n+\tPR tree-optimization/37574\n+\t* gcc.dg/vect/ggc-pr37574.c: New test.\n+\t* gcc.dg/vect/vect.exp: Compile some tests with ggc flags.\n+\n 2008-09-25  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/37645"}, {"sha": "b95bfafe1fa9922e1ac4493673e8af0c86b14670", "filename": "gcc/testsuite/gcc.dg/vect/ggc-pr37574.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ee279f254e77ea2fe305bafa4043792cb77356c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fggc-pr37574.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ee279f254e77ea2fe305bafa4043792cb77356c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fggc-pr37574.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fggc-pr37574.c?ref=4ee279f254e77ea2fe305bafa4043792cb77356c", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+\n+#include <stdarg.h>\n+\n+unsigned short in[40 +128];\n+int main (void) {\n+  int i = 0, j = 0;\n+  unsigned int diff;\n+  unsigned int s=0,sum=0;\n+  for (i = 0; i < 40;i++)\n+   {\n+     diff = 0;\n+     for (j = 0; j < 128;j+=8)\n+       diff += in[j+i];\n+     s += ((unsigned short)diff>>3);\n+   }\n+   if (s != sum)\n+     return -1;\n+   return 0;\n+}"}, {"sha": "f7253c66c13515077aa69b721fccffbaf7808af0", "filename": "gcc/testsuite/gcc.dg/vect/vect.exp", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ee279f254e77ea2fe305bafa4043792cb77356c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ee279f254e77ea2fe305bafa4043792cb77356c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect.exp?ref=4ee279f254e77ea2fe305bafa4043792cb77356c", "patch": "@@ -242,6 +242,12 @@ lappend DEFAULT_VECTCFLAGS \"-Os\"\n dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/Os-vect-*.\\[cS\\]]]  \\\n         \"\" $DEFAULT_VECTCFLAGS\n \n+# With --param ggc-min-expand=0 --param ggc-min-heapsize=0 \n+set DEFAULT_VECTCFLAGS $SAVED_DEFAULT_VECTCFLAGS\n+lappend DEFAULT_VECTCFLAGS \"--param\" \"ggc-min-expand=0\" \"--param\" \"ggc-min-heapsize=0\"\n+dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/ggc-*.\\[cS\\]]]  \\\n+        \"\" $DEFAULT_VECTCFLAGS\n+\n # With -O3\n set DEFAULT_VECTCFLAGS $SAVED_DEFAULT_VECTCFLAGS\n lappend DEFAULT_VECTCFLAGS \"-O3\""}, {"sha": "3ce30157f71aa752c63aa5cd1c17e5a98b1e3c07", "filename": "gcc/tree-vect-transform.c", "status": "modified", "additions": 44, "deletions": 33, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ee279f254e77ea2fe305bafa4043792cb77356c/gcc%2Ftree-vect-transform.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ee279f254e77ea2fe305bafa4043792cb77356c/gcc%2Ftree-vect-transform.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-transform.c?ref=4ee279f254e77ea2fe305bafa4043792cb77356c", "patch": "@@ -1401,7 +1401,7 @@ vect_get_constant_vectors (slp_tree slp_node, VEC(tree,heap) **vec_oprnds,\n   gimple stmt = VEC_index (gimple, stmts, 0);\n   stmt_vec_info stmt_vinfo = vinfo_for_stmt (stmt);\n   tree vectype = STMT_VINFO_VECTYPE (stmt_vinfo);\n-  int nunits = TYPE_VECTOR_SUBPARTS (vectype);\n+  int nunits;\n   tree vec_cst;\n   tree t = NULL_TREE;\n   int j, number_of_places_left_in_vector;\n@@ -1410,12 +1410,33 @@ vect_get_constant_vectors (slp_tree slp_node, VEC(tree,heap) **vec_oprnds,\n   int group_size = VEC_length (gimple, stmts);\n   unsigned int vec_num, i;\n   int number_of_copies = 1;\n-  bool is_store = false;\n   VEC (tree, heap) *voprnds = VEC_alloc (tree, heap, number_of_vectors);\n-  bool constant_p;\n+  bool constant_p, is_store;\n \n   if (STMT_VINFO_DATA_REF (stmt_vinfo))\n-    is_store = true;\n+    {\n+      is_store = true;\n+      op = gimple_assign_rhs1 (stmt);\n+    }\n+  else\n+    {\n+      is_store = false;\n+      op = gimple_op (stmt, op_num + 1);\n+    }\n+\n+  if (CONSTANT_CLASS_P (op))\n+    {\n+      vector_type = vectype;\n+      constant_p = true;\n+    }\n+  else\n+    {\n+      vector_type = get_vectype_for_scalar_type (TREE_TYPE (op)); \n+      gcc_assert (vector_type);\n+      constant_p = false;\n+    }\n+\n+  nunits = TYPE_VECTOR_SUBPARTS (vector_type);\n \n   /* NUMBER_OF_COPIES is the number of times we need to use the same values in\n      created vectors. It is greater than 1 if unrolling is performed. \n@@ -1436,18 +1457,15 @@ vect_get_constant_vectors (slp_tree slp_node, VEC(tree,heap) **vec_oprnds,\n   number_of_copies = least_common_multiple (nunits, group_size) / group_size;\n \n   number_of_places_left_in_vector = nunits;\n-  constant_p = true;\n   for (j = 0; j < number_of_copies; j++)\n     {\n       for (i = group_size - 1; VEC_iterate (gimple, stmts, i, stmt); i--)\n         {\n-\t  if (is_store)\n-\t    op = gimple_assign_rhs1 (stmt);\n-\t  else\n-\t    op = gimple_op (stmt, op_num + 1);\n-\t  if (!CONSTANT_CLASS_P (op))\n-\t    constant_p = false;\n-\n+          if (is_store)\n+            op = gimple_assign_rhs1 (stmt);\n+          else\n+            op = gimple_op (stmt, op_num + 1);\n+    \n           /* Create 'vect_ = {op0,op1,...,opn}'.  */\n           t = tree_cons (NULL_TREE, op, t);\n \n@@ -1457,16 +1475,12 @@ vect_get_constant_vectors (slp_tree slp_node, VEC(tree,heap) **vec_oprnds,\n             {\n               number_of_places_left_in_vector = nunits;\n \n-\t      vector_type = get_vectype_for_scalar_type (TREE_TYPE (op));\n-              gcc_assert (vector_type);\n \t      if (constant_p)\n \t\tvec_cst = build_vector (vector_type, t);\n \t      else\n \t\tvec_cst = build_constructor_from_list (vector_type, t);\n-\t      constant_p = true;\n               VEC_quick_push (tree, voprnds,\n-                              vect_init_vector (stmt, vec_cst, vector_type,\n-\t\t\t\t\t\tNULL));\n+                              vect_init_vector (stmt, vec_cst, vector_type, NULL));\n               t = NULL_TREE;\n             }\n         }\n@@ -1886,7 +1900,7 @@ vect_get_vec_def_for_operand (tree op, gimple stmt, tree *scalar_def)\n   stmt_vec_info def_stmt_info = NULL;\n   stmt_vec_info stmt_vinfo = vinfo_for_stmt (stmt);\n   tree vectype = STMT_VINFO_VECTYPE (stmt_vinfo);\n-  int nunits = TYPE_VECTOR_SUBPARTS (vectype);\n+  unsigned int nunits = TYPE_VECTOR_SUBPARTS (vectype);\n   loop_vec_info loop_vinfo = STMT_VINFO_LOOP_VINFO (stmt_vinfo);\n   tree vec_inv;\n   tree vec_cst;\n@@ -1935,16 +1949,17 @@ vect_get_vec_def_for_operand (tree op, gimple stmt, tree *scalar_def)\n           {\n             t = tree_cons (NULL_TREE, op, t);\n           }\n-        vector_type = get_vectype_for_scalar_type (TREE_TYPE (op));\n-        gcc_assert (vector_type);\n-        vec_cst = build_vector (vector_type, t);\n-\n-        return vect_init_vector (stmt, vec_cst, vector_type, NULL);\n+        vec_cst = build_vector (vectype, t);\n+        return vect_init_vector (stmt, vec_cst, vectype, NULL);\n       }\n \n     /* Case 2: operand is defined outside the loop - loop invariant.  */\n     case vect_invariant_def:\n       {\n+\tvector_type = get_vectype_for_scalar_type (TREE_TYPE (def));\n+\tgcc_assert (vector_type);\n+\tnunits = TYPE_VECTOR_SUBPARTS (vector_type);\n+\n \tif (scalar_def) \n \t  *scalar_def = def;\n \n@@ -1958,8 +1973,6 @@ vect_get_vec_def_for_operand (tree op, gimple stmt, tree *scalar_def)\n           }\n \n \t/* FIXME: use build_constructor directly.  */\n-\tvector_type = get_vectype_for_scalar_type (TREE_TYPE (def));\n-        gcc_assert (vector_type);\n         vec_inv = build_constructor_from_list (vector_type, t);\n         return vect_init_vector (stmt, vec_inv, vector_type, NULL);\n       }\n@@ -2222,14 +2235,14 @@ get_initial_def_for_reduction (gimple stmt, tree init_val, tree *adjustment_def)\n   struct loop *loop = LOOP_VINFO_LOOP (loop_vinfo);\n   tree vectype = STMT_VINFO_VECTYPE (stmt_vinfo);\n   int nunits =  TYPE_VECTOR_SUBPARTS (vectype);\n+  tree scalar_type = TREE_TYPE (vectype);\n   enum tree_code code = gimple_assign_rhs_code (stmt);\n   tree type = TREE_TYPE (init_val);\n   tree vecdef;\n   tree def_for_init;\n   tree init_def;\n   tree t = NULL_TREE;\n   int i;\n-  tree vector_type;\n   bool nested_in_vect_loop = false; \n \n   gcc_assert (POINTER_TYPE_P (type) || INTEGRAL_TYPE_P (type) || SCALAR_FLOAT_TYPE_P (type));\n@@ -2250,15 +2263,14 @@ get_initial_def_for_reduction (gimple stmt, tree init_val, tree *adjustment_def)\n     else\n       *adjustment_def = init_val;\n     /* Create a vector of zeros for init_def.  */\n-    if (SCALAR_FLOAT_TYPE_P (type))\n-      def_for_init = build_real (type, dconst0);\n+    if (SCALAR_FLOAT_TYPE_P (scalar_type))\n+      def_for_init = build_real (scalar_type, dconst0);\n     else\n-      def_for_init = build_int_cst (type, 0);\n+      def_for_init = build_int_cst (scalar_type, 0);\n+      \n     for (i = nunits - 1; i >= 0; --i)\n       t = tree_cons (NULL_TREE, def_for_init, t);\n-    vector_type = get_vectype_for_scalar_type (TREE_TYPE (def_for_init));\n-    gcc_assert (vector_type);\n-    init_def = build_vector (vector_type, t);\n+    init_def = build_vector (vectype, t);\n     break;\n \n   case MIN_EXPR:\n@@ -6008,7 +6020,6 @@ vect_create_mask_and_perm (gimple stmt, gimple next_scalar_stmt,\n   for (i = mask_nunits - 1; i >= 0; --i)\n     t = tree_cons (NULL_TREE, build_int_cst (mask_element_type, mask_array[i]),\n                    t);\n-\n   mask_vec = build_vector (mask_type, t);\n   mask = vect_init_vector (stmt, mask_vec, mask_type, NULL);\n "}, {"sha": "9a3a9f3c8a796ed9df5cf1ece411a4cd49324295", "filename": "gcc/tree-vectorizer.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ee279f254e77ea2fe305bafa4043792cb77356c/gcc%2Ftree-vectorizer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ee279f254e77ea2fe305bafa4043792cb77356c/gcc%2Ftree-vectorizer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.c?ref=4ee279f254e77ea2fe305bafa4043792cb77356c", "patch": "@@ -2036,11 +2036,11 @@ vect_is_simple_use (tree operand, loop_vec_info loop_vinfo, gimple *def_stmt,\n       return true;\n     }\n   if (is_gimple_min_invariant (operand))\n-   {\n+    {\n       *def = operand;\n       *dt = vect_invariant_def;\n       return true;\n-   }\n+    }\n \n   if (TREE_CODE (operand) == PAREN_EXPR)\n     {"}]}