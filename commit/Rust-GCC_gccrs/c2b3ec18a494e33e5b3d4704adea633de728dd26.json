{"sha": "c2b3ec18a494e33e5b3d4704adea633de728dd26", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzJiM2VjMThhNDk0ZTMzZTViM2Q0NzA0YWRlYTYzM2RlNzI4ZGQyNg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2012-09-06T16:24:10Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2012-09-06T16:24:10Z"}, "message": "re PR c++/54341 (ICE (segfault) in cx_check_missing_mem_inits, at cp/semantics.c:6093)\n\n\tPR c++/54341\n\tPR c++/54253\n\t* semantics.c (sort_constexpr_mem_initializers): New.\n\t(build_constexpr_constructor_member_initializers): Use it.\n\t(cx_check_missing_mem_inits): Skip artificial fields.\n\t* init.c (expand_aggr_init_1): Don't zero out a class\n\twith no data.\n\nFrom-SVN: r191033", "tree": {"sha": "08c627bf433274036f7dd2e38ab7337efe321c10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/08c627bf433274036f7dd2e38ab7337efe321c10"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c2b3ec18a494e33e5b3d4704adea633de728dd26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2b3ec18a494e33e5b3d4704adea633de728dd26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2b3ec18a494e33e5b3d4704adea633de728dd26", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2b3ec18a494e33e5b3d4704adea633de728dd26/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "511c229c6caf013aaafca49535d4c82522d289e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/511c229c6caf013aaafca49535d4c82522d289e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/511c229c6caf013aaafca49535d4c82522d289e3"}], "stats": {"total": 125, "additions": 121, "deletions": 4}, "files": [{"sha": "4ffe1b41edaf09ef04adefa7d5dc5ed61a316a40", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2b3ec18a494e33e5b3d4704adea633de728dd26/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2b3ec18a494e33e5b3d4704adea633de728dd26/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c2b3ec18a494e33e5b3d4704adea633de728dd26", "patch": "@@ -1,3 +1,13 @@\n+2012-09-06  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/54341\n+\tPR c++/54253\n+\t* semantics.c (sort_constexpr_mem_initializers): New.\n+\t(build_constexpr_constructor_member_initializers): Use it.\n+\t(cx_check_missing_mem_inits): Skip artificial fields.\n+\t* init.c (expand_aggr_init_1): Don't zero out a class\n+\twith no data.\n+\n 2012-09-05  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/54191"}, {"sha": "561477ace5787f8182a93af7d944079f435e246a", "filename": "gcc/cp/init.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2b3ec18a494e33e5b3d4704adea633de728dd26/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2b3ec18a494e33e5b3d4704adea633de728dd26/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=c2b3ec18a494e33e5b3d4704adea633de728dd26", "patch": "@@ -1742,8 +1742,10 @@ expand_aggr_init_1 (tree binfo, tree true_exp, tree exp, tree init, int flags,\n      that's value-initialization.  */\n   if (init == void_type_node)\n     {\n-      /* If no user-provided ctor, we need to zero out the object.  */\n-      if (!type_has_user_provided_constructor (type))\n+      /* If the type has data but no user-provided ctor, we need to zero\n+\t out the object.  */\n+      if (!type_has_user_provided_constructor (type)\n+\t  && !is_really_empty_class (type))\n \t{\n \t  tree field_size = NULL_TREE;\n \t  if (exp != true_exp && CLASSTYPE_AS_BASE (type) != type)"}, {"sha": "7cd1468dba5e8ff9cd3366ecccc3a485055f1609", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 34, "deletions": 2, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2b3ec18a494e33e5b3d4704adea633de728dd26/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2b3ec18a494e33e5b3d4704adea633de728dd26/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=c2b3ec18a494e33e5b3d4704adea633de728dd26", "patch": "@@ -5895,6 +5895,35 @@ check_constexpr_ctor_body (tree last, tree list)\n   return ok;\n }\n \n+/* VEC is a vector of constructor elements built up for the base and member\n+   initializers of a constructor for TYPE.  They need to be in increasing\n+   offset order, which they might not be yet if TYPE has a primary base\n+   which is not first in the base-clause.  */\n+\n+static VEC(constructor_elt,gc) *\n+sort_constexpr_mem_initializers (tree type, VEC(constructor_elt,gc) *vec)\n+{\n+  if (!CLASSTYPE_HAS_PRIMARY_BASE_P (type)\n+      || (CLASSTYPE_PRIMARY_BINFO (type)\n+\t  == BINFO_BASE_BINFO (TYPE_BINFO (type), 0)))\n+    return vec;\n+\n+  /* Find the element for the primary base and move it to the beginning of\n+     the vec.  */\n+  tree pri = BINFO_TYPE (CLASSTYPE_PRIMARY_BINFO (type));\n+  VEC(constructor_elt,gc) &v = *vec;\n+  int pri_idx;\n+\n+  for (pri_idx = 1; ; ++pri_idx)\n+    if (TREE_TYPE (v[pri_idx].index) == pri)\n+      break;\n+  constructor_elt pri_elt = v[pri_idx];\n+  for (int i = 0; i < pri_idx; ++i)\n+    v[i+1] = v[i];\n+  v[0] = pri_elt;\n+  return vec;\n+}\n+\n /* Build compile-time evalable representations of member-initializer list\n    for a constexpr constructor.  */\n \n@@ -5957,6 +5986,7 @@ build_constexpr_constructor_member_initializers (tree type, tree body)\n \t      return body;\n \t    }\n \t}\n+      vec = sort_constexpr_mem_initializers (type, vec);\n       return build_constructor (type, vec);\n     }\n   else\n@@ -6075,14 +6105,16 @@ cx_check_missing_mem_inits (tree fun, tree body, bool complain)\n \t{\n \t  index = CONSTRUCTOR_ELT (body, i)->index;\n \t  /* Skip base and vtable inits.  */\n-\t  if (TREE_CODE (index) != FIELD_DECL)\n+\t  if (TREE_CODE (index) != FIELD_DECL\n+\t      || DECL_ARTIFICIAL (index))\n \t    continue;\n \t}\n       for (; field != index; field = DECL_CHAIN (field))\n \t{\n \t  tree ftype;\n \t  if (TREE_CODE (field) != FIELD_DECL\n-\t      || (DECL_C_BIT_FIELD (field) && !DECL_NAME (field)))\n+\t      || (DECL_C_BIT_FIELD (field) && !DECL_NAME (field))\n+\t      || DECL_ARTIFICIAL (field))\n \t    continue;\n \t  ftype = strip_array_types (TREE_TYPE (field));\n \t  if (type_has_constexpr_default_constructor (ftype))"}, {"sha": "762272334238a4fd2ad6f5b944139b487a836543", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2b3ec18a494e33e5b3d4704adea633de728dd26/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2b3ec18a494e33e5b3d4704adea633de728dd26/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c2b3ec18a494e33e5b3d4704adea633de728dd26", "patch": "@@ -1,3 +1,10 @@\n+2012-09-06  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/54341\n+\tPR c++/54253\n+\t* g++.dg/cpp0x/constexpr-virtual2.C: New.\n+\t* g++.dg/cpp0x/constexpr-virtual3.C: New.\n+\n 2012-09-06  Andrew Pinski  <apinski@cavium.com>\n \n \tPR tree-opt/54494"}, {"sha": "86040a31b1a1f15288e56b690ffacc80bec58da3", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-virtual2.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2b3ec18a494e33e5b3d4704adea633de728dd26/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-virtual2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2b3ec18a494e33e5b3d4704adea633de728dd26/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-virtual2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-virtual2.C?ref=c2b3ec18a494e33e5b3d4704adea633de728dd26", "patch": "@@ -0,0 +1,24 @@\n+// PR c++/54341\n+// { dg-do compile { target c++11 } }\n+\n+template<typename T>\n+struct enable_shared_from_this\n+{\n+  constexpr enable_shared_from_this(); // { dg-warning \"used but never defined\" }\n+\n+private:\n+  int mem;\n+};\n+\n+class VTableClass {\n+public:\n+    virtual void someVirtualMethod() { }\n+};\n+\n+class SomeClass : public enable_shared_from_this< SomeClass >, public\n+VTableClass { };\n+\n+SomeClass* createInstance()\n+{\n+    return new SomeClass;\n+}"}, {"sha": "de446bcfd3eecfa0f6efd6866181a8b564266c98", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-virtual3.C", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2b3ec18a494e33e5b3d4704adea633de728dd26/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-virtual3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2b3ec18a494e33e5b3d4704adea633de728dd26/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-virtual3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-virtual3.C?ref=c2b3ec18a494e33e5b3d4704adea633de728dd26", "patch": "@@ -0,0 +1,42 @@\n+// PR c++/54253\n+// { dg-do compile { target c++11 } }\n+\n+namespace A {\n+  class Base {\n+    int x;\n+  public:\n+    constexpr Base(int x) : x(x) {}\n+  };\n+\n+  class Base2 {\n+  public:\n+    virtual void fun() {}\n+  };\n+\n+  class Derived : public Base2, public Base {\n+  public:\n+    constexpr Derived() : Base2(), Base(5) {}\n+  };\n+\n+  constexpr Derived der;\n+}\n+\n+namespace B {\n+  class Base {\n+    int x;\n+  public:\n+    constexpr Base() : x(5) {}\n+  };\n+\n+  class Base2 {\n+  public:\n+    virtual void fun() {}\n+  };\n+\n+  class Derived : public Base, public Base2 {\n+  public:\n+    constexpr Derived() {}\n+  };\n+\n+  constexpr Derived der;\n+}"}]}