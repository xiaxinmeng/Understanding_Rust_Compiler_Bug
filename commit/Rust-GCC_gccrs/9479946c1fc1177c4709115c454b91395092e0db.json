{"sha": "9479946c1fc1177c4709115c454b91395092e0db", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTQ3OTk0NmMxZmMxMTc3YzQ3MDkxMTVjNDU0YjkxMzk1MDkyZTBkYg==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2018-11-22T14:05:54Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2018-11-22T14:05:54Z"}, "message": "Add new maintainer script for PRs that can be closed.\n\n2018-11-22  Martin Liska  <mliska@suse.cz>\n\n\t* bugzilla-close-candidate.py: New file.\n\nFrom-SVN: r266377", "tree": {"sha": "f2bf2d5a4adc044bdab94ae8ffe9b01e1ae7c52d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f2bf2d5a4adc044bdab94ae8ffe9b01e1ae7c52d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9479946c1fc1177c4709115c454b91395092e0db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9479946c1fc1177c4709115c454b91395092e0db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9479946c1fc1177c4709115c454b91395092e0db", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9479946c1fc1177c4709115c454b91395092e0db/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a942dfca6a19d79a7c849f1c00a5da61e89600a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a942dfca6a19d79a7c849f1c00a5da61e89600a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a942dfca6a19d79a7c849f1c00a5da61e89600a8"}], "stats": {"total": 100, "additions": 100, "deletions": 0}, "files": [{"sha": "30c6f5101a73c19f2e2b39d7f1c6919423fed1d2", "filename": "maintainer-scripts/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9479946c1fc1177c4709115c454b91395092e0db/maintainer-scripts%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9479946c1fc1177c4709115c454b91395092e0db/maintainer-scripts%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/maintainer-scripts%2FChangeLog?ref=9479946c1fc1177c4709115c454b91395092e0db", "patch": "@@ -1,3 +1,7 @@\n+2018-11-22  Martin Liska  <mliska@suse.cz>\n+\n+\t* bugzilla-close-candidate.py: New file.\n+\n 2018-10-26  Jakub Jelinek  <jakub@redhat.com>\n \n \t* update_version_svn (IGNORE_BRANCHES): Add gcc-6-branch."}, {"sha": "26ee84474a024c01d8815eedb7ccec88f3853635", "filename": "maintainer-scripts/bugzilla-close-candidate.py", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9479946c1fc1177c4709115c454b91395092e0db/maintainer-scripts%2Fbugzilla-close-candidate.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9479946c1fc1177c4709115c454b91395092e0db/maintainer-scripts%2Fbugzilla-close-candidate.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/maintainer-scripts%2Fbugzilla-close-candidate.py?ref=9479946c1fc1177c4709115c454b91395092e0db", "patch": "@@ -0,0 +1,96 @@\n+#!/usr/bin/env python3\n+\n+# The script is used for finding PRs that have a SVN revision that\n+# mentiones the PR and are not closed.  It's done by iterating all\n+# comments of a PR and finding SVN commit entries.\n+\n+\"\"\"\n+Sample output of the script:\n+Bugzilla URL page size: 50\n+HINT: bugs with following comment are ignored: Can the bug be marked as resolved?\n+\n+Bug URL                                              SVN commits                   known-to-fail                           known-to-work                           Bug summary                                                 \n+https://gcc.gnu.org/bugzilla/show_bug.cgi?id=88129   trunk                                                                                                         Two blockage insns are emited in the function epilogue      \n+https://gcc.gnu.org/bugzilla/show_bug.cgi?id=88122   trunk                                                                                                         [9 Regression] g++ ICE: internal compiler error: Segmentation fault\n+https://gcc.gnu.org/bugzilla/show_bug.cgi?id=88084   trunk                                                                                                         basic_string_view::copy doesn't use Traits::copy            \n+https://gcc.gnu.org/bugzilla/show_bug.cgi?id=88083   trunk                                                                                                         ICE in find_constant_pool_ref_1, at config/s390/s390.c:8231 \n+...\n+Bugzilla lists:\n+https://gcc.gnu.org/bugzilla/buglist.cgi?bug_id=88129,88122,88084,88083,88074,88073,88071,88070,88051,88018,87985,87955,87926,87917,87913,87898,87895,87874,87871,87855,87853,87826,87824,87819,87818,87799,87793,87789,87788,87787,87754,87725,87674,87665,87649,87647,87645,87625,87611,87610,87598,87593,87582,87566,87556,87547,87544,87541,87537,87528\n+https://gcc.gnu.org/bugzilla/buglist.cgi?bug_id=87486\n+\"\"\"\n+\n+import argparse\n+import json\n+\n+import requests\n+\n+base_url = 'https://gcc.gnu.org/bugzilla/rest.cgi/'\n+statuses = ['UNCONFIRMED', 'ASSIGNED', 'SUSPENDED', 'NEW', 'WAITING', 'REOPENED']\n+regex = '(.*\\[)([0-9\\./]*)( [rR]egression])(.*)'\n+closure_question = 'Can the bug be marked as resolved?'\n+start_page = 20\n+url_page_size = 50\n+\n+def get_branches_by_comments(comments):\n+    versions = set()\n+    for c in comments:\n+        text = c['text']\n+        if 'URL: https://gcc.gnu.org/viewcvs' in text:\n+            version = 'trunk'\n+            for l in text.split('\\n'):\n+                if 'branches/gcc-' in l:\n+                    parts = l.strip().split('/')\n+                    parts = parts[1].split('-')\n+                    assert len(parts) == 3\n+                    versions.add(parts[1])\n+            versions.add(version)\n+    return versions\n+\n+def get_bugs(api_key, query):\n+    u = base_url + 'bug'\n+    r = requests.get(u, params = query)\n+    return r.json()['bugs']\n+\n+def search(api_key):\n+    chunk = 1000\n+    ids = []\n+    print('%-53s%-30s%-40s%-40s%-60s' % ('Bug URL', 'SVN commits', 'known-to-fail', 'known-to-work', 'Bug summary'))\n+    for i in range(start_page, 0, -1):\n+        # print('offset: %d' % (i * chunk), flush = True)\n+        bugs = get_bugs(api_key, {'api_key': api_key, 'bug_status': statuses, 'limit': chunk, 'offset': i * chunk})\n+        for b in sorted(bugs, key = lambda x: x['id'], reverse = True):\n+            id = b['id']\n+\n+            fail = b['cf_known_to_fail']\n+            work = b['cf_known_to_work']\n+\n+            u = base_url + 'bug/' + str(id) + '/comment'\n+            r = requests.get(u, params = {'api_key': api_key} ).json()\n+            keys = list(r['bugs'].keys())\n+            assert len(keys) == 1\n+            comments = r['bugs'][keys[0]]['comments']\n+            for c in comments:\n+                if closure_question in c['text']:\n+                    continue\n+\n+            branches = get_branches_by_comments(comments)\n+            if len(branches):\n+                branches_str = ','.join(sorted(list(branches)))\n+                print('%-53s%-30s%-40s%-40s%-60s' % ('https://gcc.gnu.org/bugzilla/show_bug.cgi?id=%d' % id, branches_str, fail, work, b['summary']))\n+                ids.append(id)\n+\n+    # print all URL lists\n+    print('\\nBugzilla lists:')\n+    while len(ids) > 0:\n+        print('https://gcc.gnu.org/bugzilla/buglist.cgi?bug_id=%s' % ','.join([str(x) for x in ids[:url_page_size]]))\n+        ids = ids[url_page_size:]\n+\n+print('Bugzilla URL page size: %d' % url_page_size)\n+print('HINT: bugs with following comment are ignored: %s\\n' % closure_question)\n+\n+parser = argparse.ArgumentParser(description='')\n+parser.add_argument('api_key', help = 'API key')\n+\n+args = parser.parse_args()\n+search(args.api_key)"}]}