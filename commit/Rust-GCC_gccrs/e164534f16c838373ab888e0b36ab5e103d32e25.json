{"sha": "e164534f16c838373ab888e0b36ab5e103d32e25", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTE2NDUzNGYxNmM4MzgzNzNhYjg4OGUwYjM2YWI1ZTEwM2QzMmUyNQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2018-01-03T13:30:00Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2018-01-03T13:30:00Z"}, "message": "re PR c++/83592 (Annoying -Wparentheses warnings)\n\n\tPR c++/83592\n\t* decl.c (grokdeclarator): Don't warn about MVP in typename context.\n\n\t* g++.dg/warn/mvp2.C: New test.\n\nFrom-SVN: r256176", "tree": {"sha": "f84a6b0770f94d4389606d696a09ec5047526a22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f84a6b0770f94d4389606d696a09ec5047526a22"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e164534f16c838373ab888e0b36ab5e103d32e25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e164534f16c838373ab888e0b36ab5e103d32e25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e164534f16c838373ab888e0b36ab5e103d32e25", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e164534f16c838373ab888e0b36ab5e103d32e25/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e30947eb0b94078f5d87c84fe111434ef5e1191e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e30947eb0b94078f5d87c84fe111434ef5e1191e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e30947eb0b94078f5d87c84fe111434ef5e1191e"}], "stats": {"total": 37, "additions": 36, "deletions": 1}, "files": [{"sha": "506684aeb47c8c1da6c083fc59ca2ded17ab461d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e164534f16c838373ab888e0b36ab5e103d32e25/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e164534f16c838373ab888e0b36ab5e103d32e25/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e164534f16c838373ab888e0b36ab5e103d32e25", "patch": "@@ -1,3 +1,8 @@\n+2018-01-03  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/83592\n+\t* decl.c (grokdeclarator): Don't warn about MVP in typename context.\n+\n 2018-01-03  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR preprocessor/83602"}, {"sha": "b1c50961169b9d7ea8b831532d35126049f50ff1", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e164534f16c838373ab888e0b36ab5e103d32e25/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e164534f16c838373ab888e0b36ab5e103d32e25/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=e164534f16c838373ab888e0b36ab5e103d32e25", "patch": "@@ -10866,10 +10866,11 @@ grokdeclarator (const cp_declarator *declarator,\n \n       inner_declarator = declarator->declarator;\n \n-      /* We don't want to warn in parmeter context because we don't\n+      /* We don't want to warn in parameter context because we don't\n \t yet know if the parse will succeed, and this might turn out\n \t to be a constructor call.  */\n       if (decl_context != PARM\n+\t  && decl_context != TYPENAME\n \t  && declarator->parenthesized != UNKNOWN_LOCATION\n \t  /* If the type is class-like and the inner name used a\n \t     global namespace qualifier, we need the parens."}, {"sha": "d4d380447ec7988957bc00cc1d9d312fb94e8ea8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e164534f16c838373ab888e0b36ab5e103d32e25/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e164534f16c838373ab888e0b36ab5e103d32e25/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e164534f16c838373ab888e0b36ab5e103d32e25", "patch": "@@ -1,3 +1,8 @@\n+2018-01-03  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/83592\n+\t* g++.dg/warn/mvp2.C: New test.\n+\n 2018-01-03  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR preprocessor/83602"}, {"sha": "6e1ffb5db12e1b9c23649ff054555b03a42cefb7", "filename": "gcc/testsuite/g++.dg/warn/mvp2.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e164534f16c838373ab888e0b36ab5e103d32e25/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fmvp2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e164534f16c838373ab888e0b36ab5e103d32e25/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fmvp2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fmvp2.C?ref=e164534f16c838373ab888e0b36ab5e103d32e25", "patch": "@@ -0,0 +1,24 @@\n+// PR c++/83592\n+// { dg-do compile }\n+// { dg-options \"-Wparentheses\" }\n+\n+// Test that -Wparentheses does not give bogus warnings in\n+// typename context.\n+\n+int *\n+foo (long &a)\n+{\n+  return reinterpret_cast<int (*)> (&a);\n+}\n+\n+int *\n+bar (long &a)\n+{\n+  return (int (*)) &a;\n+}\n+\n+int *\n+baz (int &a)\n+{\n+  return static_cast<int (*const)> (&a);\n+}"}]}