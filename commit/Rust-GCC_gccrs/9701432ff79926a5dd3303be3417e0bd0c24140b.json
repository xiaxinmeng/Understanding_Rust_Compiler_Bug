{"sha": "9701432ff79926a5dd3303be3417e0bd0c24140b", "node_id": "C_kwDOANBUbNoAKDk3MDE0MzJmZjc5OTI2YTVkZDMzMDNiZTM0MTdlMGJkMGMyNDE0MGI", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-06-30T08:33:40Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-07-01T06:51:59Z"}, "message": "tree-optimization/106131 - wrong code with FRE rewriting\n\nThe following makes sure to not use the original TBAA type for\nlooking up a value across an aggregate copy when we had to offset\nthe read.\n\n2022-06-30  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/106131\n\t* tree-ssa-sccvn.cc (vn_reference_lookup_3): Force alias-set\n\tzero when offsetting the read looking through an aggregate\n\tcopy.\n\n\t* g++.dg/torture/pr106131.C: New testcase.", "tree": {"sha": "28ebb1dfc448666ad234dc98d576fd5d3f7b0444", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/28ebb1dfc448666ad234dc98d576fd5d3f7b0444"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9701432ff79926a5dd3303be3417e0bd0c24140b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9701432ff79926a5dd3303be3417e0bd0c24140b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9701432ff79926a5dd3303be3417e0bd0c24140b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9701432ff79926a5dd3303be3417e0bd0c24140b/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "618bac5b486832edd3f8eb3ada74740e389dfcb8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/618bac5b486832edd3f8eb3ada74740e389dfcb8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/618bac5b486832edd3f8eb3ada74740e389dfcb8"}], "stats": {"total": 50, "additions": 46, "deletions": 4}, "files": [{"sha": "e110f4a8fe603fca1c1c8e3b56b79eec01d4ccf0", "filename": "gcc/testsuite/g++.dg/torture/pr106131.C", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9701432ff79926a5dd3303be3417e0bd0c24140b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr106131.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9701432ff79926a5dd3303be3417e0bd0c24140b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr106131.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr106131.C?ref=9701432ff79926a5dd3303be3417e0bd0c24140b", "patch": "@@ -0,0 +1,34 @@\n+// { dg-do run { target c++11 } }\n+\n+struct Pair {\n+    int a, b;\n+    Pair(const Pair &) = default;\n+    Pair(int _a, int _b) : a(_a), b(_b) {}\n+    Pair &operator=(const Pair &z) {\n+\ta = z.a;\n+\tb = z.b;\n+\treturn *this;\n+    }\n+};\n+\n+const int &max(const int &a, const int &b)\n+{\n+  return a < b ? b : a;\n+}\n+\n+int foo(Pair x, Pair y)\n+{\n+  return max(x.b, y.b);\n+}\n+\n+int main()\n+{\n+  auto f = new Pair[3] {{0, -11}, {0, -8}, {0, 2}};\n+  for (int i = 0; i < 1; i++) {\n+      f[i] = f[0];\n+      if(i == 0)\n+\tf[i] = f[2];\n+      if (foo(f[i], f[1]) != 2)\n+\t__builtin_abort();\n+  }\n+}"}, {"sha": "76d92895a3a8d1d073d2e7d46b73049be7d7c3e7", "filename": "gcc/tree-ssa-sccvn.cc", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9701432ff79926a5dd3303be3417e0bd0c24140b/gcc%2Ftree-ssa-sccvn.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9701432ff79926a5dd3303be3417e0bd0c24140b/gcc%2Ftree-ssa-sccvn.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.cc?ref=9701432ff79926a5dd3303be3417e0bd0c24140b", "patch": "@@ -3243,12 +3243,12 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *data_,\n       poly_int64 extra_off = 0;\n       if (j == 0 && i >= 0\n \t  && lhs_ops[0].opcode == MEM_REF\n-\t  && maybe_ne (lhs_ops[0].off, -1))\n+\t  && known_ne (lhs_ops[0].off, -1))\n \t{\n \t  if (known_eq (lhs_ops[0].off, vr->operands[i].off))\n \t    i--, j--;\n \t  else if (vr->operands[i].opcode == MEM_REF\n-\t\t   && maybe_ne (vr->operands[i].off, -1))\n+\t\t   && known_ne (vr->operands[i].off, -1))\n \t    {\n \t      extra_off = vr->operands[i].off - lhs_ops[0].off;\n \t      i--, j--;\n@@ -3275,6 +3275,7 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *data_,\n       copy_reference_ops_from_ref (rhs1, &rhs);\n \n       /* Apply an extra offset to the inner MEM_REF of the RHS.  */\n+      bool force_no_tbaa = false;\n       if (maybe_ne (extra_off, 0))\n \t{\n \t  if (rhs.length () < 2)\n@@ -3287,6 +3288,10 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *data_,\n \t  rhs[ix].op0 = int_const_binop (PLUS_EXPR, rhs[ix].op0,\n \t\t\t\t\t build_int_cst (TREE_TYPE (rhs[ix].op0),\n \t\t\t\t\t\t\textra_off));\n+\t  /* When we have offsetted the RHS, reading only parts of it,\n+\t     we can no longer use the original TBAA type, force alias-set\n+\t     zero.  */\n+\t  force_no_tbaa = true;\n \t}\n \n       /* Save the operands since we need to use the original ones for\n@@ -3339,8 +3344,11 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *data_,\n       /* Adjust *ref from the new operands.  */\n       ao_ref rhs1_ref;\n       ao_ref_init (&rhs1_ref, rhs1);\n-      if (!ao_ref_init_from_vn_reference (&r, ao_ref_alias_set (&rhs1_ref),\n-\t\t\t\t\t  ao_ref_base_alias_set (&rhs1_ref),\n+      if (!ao_ref_init_from_vn_reference (&r,\n+\t\t\t\t\t  force_no_tbaa ? 0\n+\t\t\t\t\t  : ao_ref_alias_set (&rhs1_ref),\n+\t\t\t\t\t  force_no_tbaa ? 0\n+\t\t\t\t\t  : ao_ref_base_alias_set (&rhs1_ref),\n \t\t\t\t\t  vr->type, vr->operands))\n \treturn (void *)-1;\n       /* This can happen with bitfields.  */"}]}