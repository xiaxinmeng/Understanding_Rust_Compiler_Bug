{"sha": "3bf1c6b55c2ce09960809f20234828c591f3b300", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2JmMWM2YjU1YzJjZTA5OTYwODA5ZjIwMjM0ODI4YzU5MWYzYjMwMA==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1992-08-21T05:57:31Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1992-08-21T05:57:31Z"}, "message": "pa.md (call_value+1): For non-dynamic calls...\n\n\t* pa.md (call_value+1): For non-dynamic calls, use the \"call\"\n\tattribute, set length to 1, and fix output template to work\n\tproperly with delay slots.\n\n\t* pa.md (address and use_call_clobbered attributes): Deleted,\n\tthese attributes are useless.  All references deleted.\n\t(call define delay): Use \"in_branch_delay\" as the condition since\n\t\"call\" delay slots and unconditional \"branch\" delay slots allow the\n\tsame type of insns.\n\t(in_call_delay conditional): Deleted.\n\t(branch define delay): Do not define an annul-if-true delay slot.\n\tIt is useless for an unconditional branch.\n\t(all delay branch conditionals): Make sure \"call\", \"dyncall\", \"multi\",\n\tand \"milli\" insns are explicitly disallowed in delay slots.\n\nFrom-SVN: r1920", "tree": {"sha": "b6ef517cd3af7af692f647b6d17ae17adb8d5752", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b6ef517cd3af7af692f647b6d17ae17adb8d5752"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3bf1c6b55c2ce09960809f20234828c591f3b300", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bf1c6b55c2ce09960809f20234828c591f3b300", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3bf1c6b55c2ce09960809f20234828c591f3b300", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bf1c6b55c2ce09960809f20234828c591f3b300/comments", "author": null, "committer": null, "parents": [{"sha": "3d83d496bcc6f53dead42a3fdaf2b331b385d72f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d83d496bcc6f53dead42a3fdaf2b331b385d72f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d83d496bcc6f53dead42a3fdaf2b331b385d72f"}], "stats": {"total": 56, "additions": 14, "deletions": 42}, "files": [{"sha": "65ffba3953c985def1651cb2ef82335d7b588518", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 14, "deletions": 42, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bf1c6b55c2ce09960809f20234828c591f3b300/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bf1c6b55c2ce09960809f20234828c591f3b300/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=3bf1c6b55c2ce09960809f20234828c591f3b300", "patch": "@@ -30,16 +30,9 @@\n ;; type \"binary\" insns have two input operands (1,2) and one output (0)\n \n (define_attr \"type\"\n-  \"move,unary,binary,compare,load,store,branch,cbranch,call,dyncall,address,fpload,fpstore,fpalu,fpcc,fpmul,fpdivsgl,fpdivdbl,fpsqrtsgl,fpsqrtdbl,multi,misc,milli\"\n+  \"move,unary,binary,compare,load,store,branch,cbranch,call,dyncall,fpload,fpstore,fpalu,fpcc,fpmul,fpdivsgl,fpdivdbl,fpsqrtsgl,fpsqrtdbl,multi,misc,milli\"\n   (const_string \"binary\"))\n \n-;; Set true if insn uses call-clobbered intermediate register.\n-(define_attr \"use_clobbered\" \"false,true\"\n-  (if_then_else (and (eq_attr \"type\" \"address\")\n-\t\t     (match_operand 0 \"clobbered_register\" \"\"))\n-\t \t(const_string \"true\")\n-\t\t(const_string \"false\")))\n-\n ;; Length (in # of insns).\n (define_attr \"length\" \"\"\n   (cond [(eq_attr \"type\" \"load,fpload\")\n@@ -50,8 +43,6 @@\n \t (if_then_else (match_operand 0 \"symbolic_memory_operand\" \"\")\n \t\t       (const_int 2) (const_int 1))\n \n-\t (eq_attr \"type\" \"address\") (const_int 2)\n-\n \t (eq_attr \"type\" \"binary\")\n \t (if_then_else (match_operand 2 \"arith_operand\" \"\")\n \t\t       (const_int 1) (const_int 3))\n@@ -68,47 +59,28 @@\n \n ;; Attributes for instruction and branch scheduling\n \n-(define_attr \"in_call_delay\" \"false,true\"\n-  (cond [(eq_attr \"type\" \"branch,cbranch,call,dyncall,multi,milli\")\n-\t (const_string \"false\")\n-\t \n-\t (eq_attr \"type\" \"load,fpload,store,fpstore\")\n-\t (if_then_else (eq_attr \"length\" \"1\")\n-\t\t       (const_string \"true\")\n-\t\t       (const_string \"false\"))\n-\t \n-\t (eq_attr \"type\" \"address\")\n-\t (if_then_else (eq_attr \"use_clobbered\" \"false\")\n-\t\t       (const_string \"true\")\n-\t\t       (const_string \"false\"))]\n-\t\n-\t(if_then_else (eq_attr \"length\" \"1\")\n-\t\t      (const_string \"true\")\n-\t\t      (const_string \"false\"))))\n+(define_delay (eq_attr \"type\" \"call\")\n+  [(eq_attr \"in_branch_delay\" \"true\") (nil) (nil)])\n+\n+(define_attr \"in_branch_delay\" \"false,true\"\n+  (if_then_else (and (eq_attr \"type\" \"!branch,cbranch,call,dyncall,multi,milli\")\n+\t\t     (eq_attr \"length\" \"1\"))\n+\t\t(const_string \"true\")\n+\t\t(const_string \"false\")))\n \n (define_attr \"in_milli_delay\" \"false,true\"\n   (cond [(eq_attr \"length\" \"!1\")\n \t (const_string \"false\")\n \n-\t (eq_attr \"type\" \"branch,cbranch,call,dyncall,milli\")\n+\t (eq_attr \"type\" \"branch,cbranch,call,dyncall,multi,milli\")\n \t (const_string \"false\")\n \n \t (ne (symbol_ref \"use_milli_regs (insn)\") (const_int 0))\n \t (const_string \"false\")]\n \t(const_string \"true\")))\n \n-(define_delay (eq_attr \"type\" \"call\")\n-  [(eq_attr \"in_call_delay\" \"true\") (nil) (nil)])\n-\n-(define_attr \"in_branch_delay\" \"false,true\"\n-  (if_then_else (and (eq_attr \"type\" \"!branch,cbranch,call,multi,milli\")\n-\t\t     (eq_attr \"length\" \"1\"))\n-\t\t(const_string \"true\")\n-\t\t(const_string \"false\")))\n-\n (define_delay (eq_attr \"type\" \"branch\")\n-  [(eq_attr \"in_branch_delay\" \"true\")\n-   (eq_attr \"in_branch_delay\" \"true\") (nil)])\n+  [(eq_attr \"in_branch_delay\" \"true\") (nil) (nil)])\n \n (define_delay (eq_attr \"type\" \"cbranch\")\n   [(eq_attr \"in_branch_delay\" \"true\") (nil) (nil)])\n@@ -2136,11 +2108,11 @@\n   else\n     {\n       output_arg_descriptor (insn);\n-      return \\\"bl %1,2\\;nop\\\";\n+      return \\\"bl %1,2%#\\\";\n     }\n }\"\n- [(set_attr \"type\" \"dyncall\")\n-  (set_attr \"length\" \"3,2\")])\n+ [(set_attr \"type\" \"dyncall,call\")\n+  (set_attr \"length\" \"3,1\")])\n \n (define_insn \"nop\"\n   [(const_int 0)]"}]}