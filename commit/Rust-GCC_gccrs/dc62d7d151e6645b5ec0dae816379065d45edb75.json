{"sha": "dc62d7d151e6645b5ec0dae816379065d45edb75", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGM2MmQ3ZDE1MWU2NjQ1YjVlYzBkYWU4MTYzNzkwNjVkNDVlZGI3NQ==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2013-01-23T15:13:51Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2013-01-23T15:13:51Z"}, "message": "re PR target/54222 ([avr] Implement fixed-point support)\n\n\tPR target/54222\n\t* config/avr/stdfix.h: New file.\n\t* t-avr (stdfix-gcc.h): New rule to build it.\n\t(EXTRA_HEADERS): Set it to install stdfix.h, stdfix-gcc.h.\n\nFrom-SVN: r195407", "tree": {"sha": "d3981503c7823dbc66f5e4d1c633bb73c04970ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d3981503c7823dbc66f5e4d1c633bb73c04970ae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dc62d7d151e6645b5ec0dae816379065d45edb75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc62d7d151e6645b5ec0dae816379065d45edb75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc62d7d151e6645b5ec0dae816379065d45edb75", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc62d7d151e6645b5ec0dae816379065d45edb75/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "caa7068b909773c1b2cb3d328deb5340a00a72a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/caa7068b909773c1b2cb3d328deb5340a00a72a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/caa7068b909773c1b2cb3d328deb5340a00a72a8"}], "stats": {"total": 383, "additions": 383, "deletions": 0}, "files": [{"sha": "51a750408145eca7f9095801114519bf1d387cb9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc62d7d151e6645b5ec0dae816379065d45edb75/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc62d7d151e6645b5ec0dae816379065d45edb75/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dc62d7d151e6645b5ec0dae816379065d45edb75", "patch": "@@ -1,3 +1,10 @@\n+2013-01-23  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\tPR target/54222\n+\t* config/avr/stdfix.h: New file.\n+\t* t-avr (stdfix-gcc.h): New rule to build it.\n+\t(EXTRA_HEADERS): Set it to install stdfix.h, stdfix-gcc.h.\n+\n 2013-01-23  Kostya Serebryany  <kcc@google.com>\n \n \t* config/darwin.h: remove dependency on CoreFoundation (asan on Mac OS)."}, {"sha": "95535a881802153d4b6f3d06658c779725b70b7e", "filename": "gcc/config/avr/stdfix.h", "status": "added", "additions": 367, "deletions": 0, "changes": 367, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc62d7d151e6645b5ec0dae816379065d45edb75/gcc%2Fconfig%2Favr%2Fstdfix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc62d7d151e6645b5ec0dae816379065d45edb75/gcc%2Fconfig%2Favr%2Fstdfix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Fstdfix.h?ref=dc62d7d151e6645b5ec0dae816379065d45edb75", "patch": "@@ -0,0 +1,367 @@\n+/* Copyright (C) 2007-2013 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+/* ISO/IEC JTC1 SC22 WG14 N1169\n+ * Date: 2006-04-04\n+ * ISO/IEC TR 18037\n+ * Programming languages - C - Extensions to support embedded processors\n+ */\n+\n+#ifndef _AVRGCC_STDFIX_H\n+#define _AVRGCC_STDFIX_H\n+\n+/* 7.18a.1 Introduction.  */\n+/* 7.18a.3 Precision macros.  */\n+\n+#include <stdfix-gcc.h>\n+\n+/* 2.1.7.4 The bitwise fixed-point to integer conversion functions.  */\n+/* 2.1.7.5 The bitwise integer to fixed-point conversion functions.  */\n+\n+#define _GCC_TYPEPUN(A, B)                      \\\n+  __builtin_memcpy (&A, &B, sizeof (A))\n+\n+#if __SIZEOF_INT__ == 2\n+\n+typedef signed char int_hr_t;\n+typedef unsigned char uint_uhr_t;\n+\n+typedef short int int_r_t;\n+typedef short unsigned int uint_ur_t;\n+\n+typedef short int int_hk_t;\n+typedef short unsigned int uint_uhk_t;\n+\n+typedef long int int_lr_t;\n+typedef long unsigned int uint_ulr_t;\n+\n+typedef long int int_k_t;\n+typedef long unsigned int uint_uk_t;\n+\n+typedef long long int int_llr_t;\n+typedef long long unsigned int uint_ullr_t;\n+\n+typedef long long int int_lk_t;\n+typedef long long unsigned int uint_ulk_t;\n+\n+typedef long long int int_llk_t;\n+typedef long long unsigned int uint_ullk_t;\n+\n+#else /* __SIZEOF_INT__ = 1 (for -mint8) */\n+\n+\n+typedef signed char int_hr_t;\n+typedef unsigned char uint_uhr_t;\n+\n+typedef long int int_r_t;\n+typedef long unsigned int uint_ur_t;\n+\n+typedef long int int_hk_t;\n+typedef long unsigned int uint_uhk_t;\n+\n+typedef long long int int_lr_t;\n+typedef long long unsigned int uint_ulr_t;\n+\n+typedef long long int int_k_t;\n+typedef long long unsigned int uint_uk_t;\n+\n+#endif /* __SIZEOF_INT__ == 2 */\n+\n+\n+\n+/* short fract (hr): bitshr, bitsuhr, hrbits, uhrbits */\n+\n+static __inline__ __attribute__((__always_inline__))\n+int_hr_t bitshr (const short fract __q)\n+{\n+  int_hr_t __result;\n+  _GCC_TYPEPUN (__result, __q);\n+  return __result;\n+}\n+\n+static __inline__ __attribute__((__always_inline__))\n+uint_uhr_t bitsuhr (const unsigned short fract __q)\n+{\n+  uint_uhr_t __result;\n+  _GCC_TYPEPUN (__result, __q);\n+  return __result;\n+}\n+\n+static __inline__ __attribute__((__always_inline__))\n+short fract hrbits (const int_hr_t __i)\n+{\n+  short fract __result;\n+  _GCC_TYPEPUN (__result, __i);\n+  return __result;\n+}\n+\n+static __inline__ __attribute__((__always_inline__))\n+unsigned short fract uhrbits (const uint_uhr_t __i)\n+{\n+  unsigned short fract __result;\n+  _GCC_TYPEPUN (__result, __i);\n+  return __result;\n+}\n+\n+/* fract (r): bitsr, bitsur, rbits, urbits */\n+\n+static __inline__ __attribute__((__always_inline__))\n+int_r_t bitsr (const fract __q)\n+{\n+  int_r_t __result;\n+  _GCC_TYPEPUN (__result, __q);\n+  return __result;\n+}\n+\n+static __inline__ __attribute__((__always_inline__))\n+uint_ur_t bitsur (const unsigned fract __q)\n+{\n+  uint_ur_t __result;\n+  _GCC_TYPEPUN (__result, __q);\n+  return __result;\n+}\n+\n+static __inline__ __attribute__((__always_inline__))\n+fract rbits (const int_r_t __i)\n+{\n+  fract __result;\n+  _GCC_TYPEPUN (__result, __i);\n+  return __result;\n+}\n+\n+static __inline__ __attribute__((__always_inline__))\n+unsigned fract urbits (const uint_ur_t __i)\n+{\n+  unsigned fract __result;\n+  _GCC_TYPEPUN (__result, __i);\n+  return __result;\n+}\n+\n+/* long fract (lr): bitslr, bitsulr, lrbits, ulrbits */\n+\n+static __inline__ __attribute__((__always_inline__))\n+int_lr_t bitslr (const long fract __q)\n+{\n+  int_lr_t __result;\n+  _GCC_TYPEPUN (__result, __q);\n+  return __result;\n+}\n+\n+static __inline__ __attribute__((__always_inline__))\n+uint_ulr_t bitsulr (const unsigned long fract __q)\n+{\n+  uint_ulr_t __result;\n+  _GCC_TYPEPUN (__result, __q);\n+  return __result;\n+}\n+\n+static __inline__ __attribute__((__always_inline__))\n+long fract lrbits (const int_lr_t __i)\n+{\n+  long fract __result;\n+  _GCC_TYPEPUN (__result, __i);\n+  return __result;\n+}\n+\n+static __inline__ __attribute__((__always_inline__))\n+unsigned long fract ulrbits (const uint_ulr_t __i)\n+{\n+  unsigned long fract __result;\n+  _GCC_TYPEPUN (__result, __i);\n+  return __result;\n+}\n+\n+/* short accum (hk): bitshk, bitsuhk, hkbits, uhkbits */\n+\n+static __inline__ __attribute__((__always_inline__))\n+int_hk_t bitshk (const short accum __q)\n+{\n+  int_hk_t __result;\n+  _GCC_TYPEPUN (__result, __q);\n+  return __result;\n+}\n+\n+static __inline__ __attribute__((__always_inline__))\n+uint_uhk_t bitsuhk (const unsigned short accum __q)\n+{\n+  uint_uhk_t __result;\n+  _GCC_TYPEPUN (__result, __q);\n+  return __result;\n+}\n+\n+static __inline__ __attribute__((__always_inline__))\n+short accum hkbits (const int_hk_t __i)\n+{\n+  short accum __result;\n+  _GCC_TYPEPUN (__result, __i);\n+  return __result;\n+}\n+\n+static __inline__ __attribute__((__always_inline__))\n+unsigned short accum uhkbits (const uint_uhk_t __i)\n+{\n+  unsigned short accum __result;\n+  _GCC_TYPEPUN (__result, __i);\n+  return __result;\n+}\n+\n+/* accum (k): bitsk, bitsuk, kbits, ukbits */\n+\n+static __inline__ __attribute__((__always_inline__))\n+int_k_t bitsk (const accum __q)\n+{\n+  int_k_t __result;\n+  _GCC_TYPEPUN (__result, __q);\n+  return __result;\n+}\n+\n+static __inline__ __attribute__((__always_inline__))\n+uint_uk_t bitsuk (const unsigned accum __q)\n+{\n+  uint_uk_t __result;\n+  _GCC_TYPEPUN (__result, __q);\n+  return __result;\n+}\n+\n+static __inline__ __attribute__((__always_inline__))\n+accum kbits (const int_k_t __i)\n+{\n+  accum __result;\n+  _GCC_TYPEPUN (__result, __i);\n+  return __result;\n+}\n+\n+static __inline__ __attribute__((__always_inline__))\n+unsigned accum ukbits (const uint_uk_t __i)\n+{\n+  unsigned accum __result;\n+  _GCC_TYPEPUN (__result, __i);\n+  return __result;\n+}\n+\n+#if __SIZEOF_INT__ == 2\n+\n+/* long long fract (llr): bitsllr, bitsullr, llrbits, ullrbits */\n+\n+static __inline__ __attribute__((__always_inline__))\n+int_llr_t bitsllr (const long long fract __q)\n+{\n+  int_llr_t __result;\n+  _GCC_TYPEPUN (__result, __q);\n+  return __result;\n+}\n+\n+static __inline__ __attribute__((__always_inline__))\n+uint_ullr_t bitsullr (const unsigned long long fract __q)\n+{\n+  uint_ullr_t __result;\n+  _GCC_TYPEPUN (__result, __q);\n+  return __result;\n+}\n+\n+static __inline__ __attribute__((__always_inline__))\n+long long fract llrbits (const int_llr_t __i)\n+{\n+  long long fract __result;\n+  _GCC_TYPEPUN (__result, __i);\n+  return __result;\n+}\n+\n+static __inline__ __attribute__((__always_inline__))\n+unsigned long long fract ullrbits (const uint_ullr_t __i)\n+{\n+  unsigned long long fract __result;\n+  _GCC_TYPEPUN (__result, __i);\n+  return __result;\n+}\n+\n+/* long accum (lk): bitslk, bitsulk, lkbits, ulkbits */\n+\n+static __inline__ __attribute__((__always_inline__))\n+int_lk_t bitslk (const long accum __q)\n+{\n+  int_lk_t __result;\n+  _GCC_TYPEPUN (__result, __q);\n+  return __result;\n+}\n+\n+static __inline__ __attribute__((__always_inline__))\n+uint_ulk_t bitsulk (const unsigned long accum __q)\n+{\n+  uint_ulk_t __result;\n+  _GCC_TYPEPUN (__result, __q);\n+  return __result;\n+}\n+\n+static __inline__ __attribute__((__always_inline__))\n+long accum lkbits (const int_lk_t __i)\n+{\n+  long accum __result;\n+  _GCC_TYPEPUN (__result, __i);\n+  return __result;\n+}\n+\n+static __inline__ __attribute__((__always_inline__))\n+unsigned long accum ulkbits (const uint_ulk_t __i)\n+{\n+  unsigned long accum __result;\n+  _GCC_TYPEPUN (__result, __i);\n+  return __result;\n+}\n+\n+/* long long accum (llk): bitsllk, bitsullk, llkbits, ullkbits */\n+\n+static __inline__ __attribute__((__always_inline__))\n+int_llk_t bitsllk (const long long accum __q)\n+{\n+  int_llk_t __result;\n+  _GCC_TYPEPUN (__result, __q);\n+  return __result;\n+}\n+\n+static __inline__ __attribute__((__always_inline__))\n+uint_ullk_t bitsullk (const unsigned long long accum __q)\n+{\n+  uint_ullk_t __result;\n+  _GCC_TYPEPUN (__result, __q);\n+  return __result;\n+}\n+\n+static __inline__ __attribute__((__always_inline__))\n+long long accum llkbits (const int_llk_t __i)\n+{\n+  long long accum __result;\n+  _GCC_TYPEPUN (__result, __i);\n+  return __result;\n+}\n+\n+static __inline__ __attribute__((__always_inline__))\n+unsigned long long accum ullkbits (const uint_ullk_t __i)\n+{\n+  unsigned long long accum __result;\n+  _GCC_TYPEPUN (__result, __i);\n+  return __result;\n+}\n+\n+#endif /* __SIZEOF_INT__ == 2 */\n+#endif /* _AVRGCC_STDFIX_H */"}, {"sha": "e76a7606d9ba7cc6c6b45ae109801c95aa036657", "filename": "gcc/config/avr/t-avr", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc62d7d151e6645b5ec0dae816379065d45edb75/gcc%2Fconfig%2Favr%2Ft-avr", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc62d7d151e6645b5ec0dae816379065d45edb75/gcc%2Fconfig%2Favr%2Ft-avr", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Ft-avr?ref=dc62d7d151e6645b5ec0dae816379065d45edb75", "patch": "@@ -35,6 +35,15 @@ avr-log.o: $(srcdir)/config/avr/avr-log.c \\\n \n avr.o avr-c.o: $(srcdir)/config/avr/builtins.def\n \n+# This overrides stdfix.h from USER_H which we supply and include\n+# in our own stdint.h as stdint-gcc.h.\n+\n+EXTRA_HEADERS = $(srcdir)/config/avr/stdfix.h \\\n+\t      \tstdfix-gcc.h\n+\n+stdfix-gcc.h: $(srcdir)/ginclude/stdfix.h\n+\t-cp $< $@\n+\n # Files and Variables auto-generated from avr-mcus.def\n \n AVR_MCUS = $(srcdir)/config/avr/avr-mcus.def"}]}