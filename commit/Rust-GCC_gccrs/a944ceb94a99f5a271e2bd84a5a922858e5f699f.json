{"sha": "a944ceb94a99f5a271e2bd84a5a922858e5f699f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTk0NGNlYjk0YTk5ZjVhMjcxZTJiZDg0YTVhOTIyODU4ZTVmNjk5Zg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2003-05-07T22:11:38Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2003-05-07T22:11:38Z"}, "message": "except.c: Revert 04-01 and 04-02 forced-unwind changes.\n\ngcc/\n        * except.c: Revert 04-01 and 04-02 forced-unwind changes.\n        * flags.h, toplev.c, doc/invoke.texi: Likewise.\n\n        * unwind-dw2.c (_Unwind_GetCFA): Fix ptr->int conversion warning.\n        * unwind.inc (_Unwind_DeleteException): Check for null\n        exception_cleanup.\n\n        * unwind-sjlj.c (_Unwind_SjLj_Resume_or_Rethrow): New.\n        * unwind.inc (_Unwind_Resume_or_Rethrow): New.\n        * unwind.h: Declare them.\n        * libgcc-std.ver (GCC_3.3): Export them.\n\ngcc/cp/\n        * cfns.gperf: Comment out POSIX thread cancellation points,\n        plus abort and raise.\n        * cfns.h: Regenerate.\n\ngcc/testsuite/\n        * g++.dg/eh/forced1.C: Expect catch-all handlers to run.\n        Verify exception_cleanup not called for rethrows.\n        * g++.dg/eh/forced2.C: Test that exception_cleanup is called\n        when exiting catch block without rethrowing.\n        * g++.dg/eh/forced3.C: New.\n        * g++.dg/eh/forced4.C: New.\n\nlibstdc++-v3/\n        * libsupc++/eh_catch.cc (__cxa_begin_catch): Handle foreign exceptions.\n        (__cxa_end_catch): Likewise.\n        * libsupc++/eh_throw.cc (__cxa_rethrow): Likewise.  Use\n        _Unwind_Resume_or_Rethrow.\n        * libsupc++/eh_personality.cc (empty_exception_spec): New.\n        (PERSONALITY_FUNCTION): Don't ignore terminate or catch-all\n        for _UA_FORCE_UNWIND.  Honor empty filter spec for foreign\n        exceptions.  Don't push terminate/unexpected to cxa functions.\n        (__cxa_call_unexpected): Remove foreign exception fixmes.\n\nFrom-SVN: r66583", "tree": {"sha": "c4966921e4085694a93888d4028afb2a1818fda4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c4966921e4085694a93888d4028afb2a1818fda4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a944ceb94a99f5a271e2bd84a5a922858e5f699f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a944ceb94a99f5a271e2bd84a5a922858e5f699f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a944ceb94a99f5a271e2bd84a5a922858e5f699f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a944ceb94a99f5a271e2bd84a5a922858e5f699f/comments", "author": null, "committer": null, "parents": [{"sha": "a21d83cd14f80ebd8b9ab6c4d87c42bf06bfec08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a21d83cd14f80ebd8b9ab6c4d87c42bf06bfec08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a21d83cd14f80ebd8b9ab6c4d87c42bf06bfec08"}], "stats": {"total": 1262, "additions": 612, "deletions": 650}, "files": [{"sha": "87c5774c9761e729b61bf0d60cfffa5711b567d6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a944ceb94a99f5a271e2bd84a5a922858e5f699f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a944ceb94a99f5a271e2bd84a5a922858e5f699f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a944ceb94a99f5a271e2bd84a5a922858e5f699f", "patch": "@@ -1,3 +1,18 @@\n+2003-05-07  Richard Henderson  <rth@redhat.com>\n+\n+        PR c++/10570\n+        * except.c: Revert 04-01 and 04-02 forced-unwind changes.\n+        * flags.h, toplev.c, doc/invoke.texi: Likewise.\n+\n+        * unwind-dw2.c (_Unwind_GetCFA): Fix ptr->int conversion warning.\n+        * unwind.inc (_Unwind_DeleteException): Check for null\n+        exception_cleanup.\n+\n+        * unwind-sjlj.c (_Unwind_SjLj_Resume_or_Rethrow): New.\n+        * unwind.inc (_Unwind_Resume_or_Rethrow): New.\n+        * unwind.h: Declare them.\n+        * libgcc-std.ver (GCC_3.3): Export them.\n+\n 2003-05-07  Richard Henderson  <rth@redhat.com>\n \n \t* unwind-dw2.c (_Unwind_GetCFA): Cast pointer to _Unwind_Ptr,"}, {"sha": "f4e3e7e7bef34c9aa2609f0d5404c5cb27b8d3c7", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a944ceb94a99f5a271e2bd84a5a922858e5f699f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a944ceb94a99f5a271e2bd84a5a922858e5f699f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a944ceb94a99f5a271e2bd84a5a922858e5f699f", "patch": "@@ -1,3 +1,10 @@\n+2003-05-07  Richard Henderson  <rth@redhat.com>\n+\n+        PR c++/10570\n+        * cfns.gperf: Comment out POSIX thread cancellation points,\n+        plus abort and raise.\n+        * cfns.h: Regenerate.\n+\n 2003-05-07  Jason Merrill  <jason@redhat.com>\n \n \t* call.c (build_conditional_expr): Don't assume that the folded"}, {"sha": "6ee56b5ea531cf6761e5b0b640995a50afb13bd3", "filename": "gcc/cp/cfns.gperf", "status": "modified", "additions": 54, "deletions": 54, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a944ceb94a99f5a271e2bd84a5a922858e5f699f/gcc%2Fcp%2Fcfns.gperf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a944ceb94a99f5a271e2bd84a5a922858e5f699f/gcc%2Fcp%2Fcfns.gperf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcfns.gperf?ref=a944ceb94a99f5a271e2bd84a5a922858e5f699f", "patch": "@@ -16,9 +16,9 @@ const char * libc_name_p (const char *, unsigned int);\n #   exception, unless it calls a program-supplied function that\n #   throws an exception.\n #\n-# bsearch and qsort are commented out because they can call such functions.\n+# Specific functions are commented out for the reason noted in each case.\n #\n-abort\n+# abort\t\t\t-- synchronous exception from SIGABRT handler\n abs\n acos\n asctime\n@@ -29,7 +29,7 @@ atexit\n atof\n atoi\n atol\n-#bsearch\n+#bsearch\t\t-- calls user function which may throw exception\n btowc\n calloc\n ceil\n@@ -43,41 +43,41 @@ div\n exit\n exp\n fabs\n-fclose\n+#fclose\t\t\t-- POSIX thread cancellation point\n feof\n ferror\n-fflush\n-fgetc\n-fgetpos\n-fgets\n-fgetwc\n-fgetws\n+#fflush\t\t\t-- POSIX thread cancellation point\n+#fgetc\t\t\t-- POSIX thread cancellation point\n+#fgetpos\t\t-- POSIX thread cancellation point\n+#fgets\t\t\t-- POSIX thread cancellation point\n+#fgetwc\t\t\t-- POSIX thread cancellation point\n+#fgetws\t\t\t-- POSIX thread cancellation point\n floor\n fmod\n-fopen\n-fprintf\n-fputc\n-fputs\n-fputwc\n-fputws\n-fread\n+#fopen\t\t\t-- POSIX thread cancellation point\n+#fprintf\t\t-- POSIX thread cancellation point\n+#fputc\t\t\t-- POSIX thread cancellation point\n+#fputs\t\t\t-- POSIX thread cancellation point\n+#fputwc\t\t\t-- POSIX thread cancellation point\n+#fputws\t\t\t-- POSIX thread cancellation point\n+#fread\t\t\t-- POSIX thread cancellation point\n free\n-freopen\n+#freopen\t\t-- POSIX thread cancellation point\n frexp\n-fscanf\n+#fscanf\t\t\t-- POSIX thread cancellation point\n fseek\n-fsetpos\n-ftell\n+#fsetpos\t\t-- POSIX thread cancellation point\n+#ftell\t\t\t-- POSIX thread cancellation point\n fwide\n-fwprintf\n-fwrite\n-fwscanf\n-getc\n-getchar\n+#fwprintf\t\t-- POSIX thread cancellation point\n+#fwrite\t\t\t-- POSIX thread cancellation point\n+#fwscanf\t\t-- POSIX thread cancellation point\n+#getc\t\t\t-- POSIX thread cancellation point\n+#getchar\t\t-- POSIX thread cancellation point\n getenv\n-gets\n-getwc\n-getwchar\n+#gets\t\t\t-- POSIX thread cancellation point\n+#getwc\t\t\t-- POSIX thread cancellation point\n+#getwchar\t\t-- POSIX thread cancellation point\n gmtime\n isalnum\n isalpha\n@@ -125,22 +125,22 @@ memmove\n memset\n mktime\n modf\n-perror\n+#perror\t\t\t-- POSIX thread cancellation point\n pow\n-printf\n-putc\n-putchar\n-puts\n-putwc\n-putwchar\n-#qsort\n-raise\n+#printf\t\t\t-- POSIX thread cancellation point\n+#putc\t\t\t-- POSIX thread cancellation point\n+#putchar\t\t-- POSIX thread cancellation point\n+#puts\t\t\t-- POSIX thread cancellation point\n+#putwc\t\t\t-- POSIX thread cancellation point\n+#putwchar\t\t-- POSIX thread cancellation point\n+#qsort\t\t\t-- calls user function which may throw exception\n+#raise\t\t\t-- synchronous exception from signal handler\n rand\n realloc\n-remove\n-rename\n-rewind\n-scanf\n+#remove\t\t\t-- POSIX thread cancellation point\n+#rename\t\t\t-- POSIX thread cancellation point\n+#rewind\t\t\t-- POSIX thread cancellation point\n+#scanf\t\t\t-- POSIX thread cancellation point\n setbuf\n setlocale\n setvbuf\n@@ -157,7 +157,7 @@ strcmp\n strcoll\n strcpy\n strcspn\n-strerror\n+#strerror\t\t-- POSIX thread cancellation point\n strftime\n strlen\n strncat\n@@ -174,25 +174,25 @@ strtoul\n strxfrm\n swprintf\n swscanf\n-system\n+#system\t\t\t-- POSIX thread cancellation point\n tan\n tanh\n time\n-tmpfile\n-tmpnam\n+#tmpfile\t\t-- POSIX thread cancellation point\n+#tmpnam\t\t\t-- POSIX thread cancellation point\n tolower\n toupper\n towctrans\n towlower\n towupper\n-ungetc\n-ungetwc\n-vfprintf\n-vfwprintf\n-vprintf\n+#ungetc\t\t\t-- POSIX thread cancellation point\n+#ungetwc\t\t-- POSIX thread cancellation point\n+#vfprintf\t\t-- POSIX thread cancellation point\n+#vfwprintf\t\t-- POSIX thread cancellation point\n+#vprintf\t\t-- POSIX thread cancellation point\n vsprintf\n vswprintf\n-vwprintf\n+#vwprintf\t\t-- POSIX thread cancellation point\n wcrtomb\n wcscat\n wcschr\n@@ -225,5 +225,5 @@ wmemcmp\n wmemcpy\n wmemmove\n wmemset\n-wprintf\n-wscanf\n+#wprintf\t\t-- POSIX thread cancellation point\n+#wscanf\t\t\t-- POSIX thread cancellation point"}, {"sha": "8f8f3eaa35a92a1de0559159fdd9263ef3ed7edb", "filename": "gcc/cp/cfns.h", "status": "modified", "additions": 217, "deletions": 337, "changes": 554, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a944ceb94a99f5a271e2bd84a5a922858e5f699f/gcc%2Fcp%2Fcfns.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a944ceb94a99f5a271e2bd84a5a922858e5f699f/gcc%2Fcp%2Fcfns.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcfns.h?ref=a944ceb94a99f5a271e2bd84a5a922858e5f699f", "patch": "@@ -1,5 +1,5 @@\n /* C code produced by gperf version 2.7.2 */\n-/* Command-line: gperf -o -C -E -k '1-6,$' -j1 -D -N libc_name_p ../../gcc/gcc/cp/cfns.gperf  */\n+/* Command-line: gperf -o -C -E -k '1-6,$' -j1 -D -N libc_name_p ../../../src-gcc/gcc/cp/cfns.gperf  */\n #ifdef __GNUC__\n __inline\n #endif\n@@ -8,7 +8,7 @@ static unsigned int hash (const char *, unsigned int);\n __inline\n #endif\n const char * libc_name_p (const char *, unsigned int);\n-/* maximum key range = 1020, duplicates = 1 */\n+/* maximum key range = 480, duplicates = 1 */\n \n #ifdef __GNUC__\n __inline\n@@ -24,32 +24,32 @@ hash (str, len)\n {\n   static const unsigned short asso_values[] =\n     {\n-      1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038,\n-      1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038,\n-      1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038,\n-      1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038,\n-      1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038,    0,    1,\n-         0, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038,\n-      1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038,\n-      1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038,\n-      1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038,\n-      1038, 1038, 1038, 1038, 1038, 1038, 1038,  247,  218,  144,\n-         0,    0,   40,    7,  126,  184,    2,   15,  146,   67,\n-         9,   60,    0,    0,    3,    0,    7,    8,  197,    1,\n-        40,    8, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038,\n-      1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038,\n-      1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038,\n-      1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038,\n-      1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038,\n-      1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038,\n-      1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038,\n-      1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038,\n-      1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038,\n-      1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038,\n-      1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038,\n-      1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038,\n-      1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038,\n-      1038, 1038, 1038, 1038, 1038, 1038\n+      483, 483, 483, 483, 483, 483, 483, 483, 483, 483,\n+      483, 483, 483, 483, 483, 483, 483, 483, 483, 483,\n+      483, 483, 483, 483, 483, 483, 483, 483, 483, 483,\n+      483, 483, 483, 483, 483, 483, 483, 483, 483, 483,\n+      483, 483, 483, 483, 483, 483, 483, 483,   0,   0,\n+        1, 483, 483, 483, 483, 483, 483, 483, 483, 483,\n+      483, 483, 483, 483, 483, 483, 483, 483, 483, 483,\n+      483, 483, 483, 483, 483, 483, 483, 483, 483, 483,\n+      483, 483, 483, 483, 483, 483, 483, 483, 483, 483,\n+      483, 483, 483, 483, 483, 483, 483, 106,  76,   0,\n+       21,   0,   0,  11,  43,  26,   0,  66, 106,  17,\n+      121,   0,  17,   0,   7,   0,   3,  19,  49,   1,\n+        3,  41, 483, 483, 483, 483, 483, 483, 483, 483,\n+      483, 483, 483, 483, 483, 483, 483, 483, 483, 483,\n+      483, 483, 483, 483, 483, 483, 483, 483, 483, 483,\n+      483, 483, 483, 483, 483, 483, 483, 483, 483, 483,\n+      483, 483, 483, 483, 483, 483, 483, 483, 483, 483,\n+      483, 483, 483, 483, 483, 483, 483, 483, 483, 483,\n+      483, 483, 483, 483, 483, 483, 483, 483, 483, 483,\n+      483, 483, 483, 483, 483, 483, 483, 483, 483, 483,\n+      483, 483, 483, 483, 483, 483, 483, 483, 483, 483,\n+      483, 483, 483, 483, 483, 483, 483, 483, 483, 483,\n+      483, 483, 483, 483, 483, 483, 483, 483, 483, 483,\n+      483, 483, 483, 483, 483, 483, 483, 483, 483, 483,\n+      483, 483, 483, 483, 483, 483, 483, 483, 483, 483,\n+      483, 483, 483, 483, 483, 483\n     };\n   register int hval = len;\n \n@@ -83,356 +83,236 @@ libc_name_p (str, len)\n {\n   enum\n     {\n-      TOTAL_KEYWORDS = 207,\n+      TOTAL_KEYWORDS = 156,\n       MIN_WORD_LENGTH = 3,\n       MAX_WORD_LENGTH = 10,\n-      MIN_HASH_VALUE = 18,\n-      MAX_HASH_VALUE = 1037\n+      MIN_HASH_VALUE = 3,\n+      MAX_HASH_VALUE = 482\n     };\n \n   static const char * const wordlist[] =\n     {\n-      \"gets\",\n-      \"puts\",\n-      \"sqrt\",\n-      \"strerror\",\n-      \"strstr\",\n-      \"strspn\",\n-      \"exp\",\n+      \"cos\",\n+      \"feof\",\n       \"free\",\n-      \"fgets\",\n-      \"fputs\",\n-      \"fgetws\",\n-      \"fputws\",\n+      \"sqrt\",\n+      \"wcsrtombs\",\n       \"pow\",\n-      \"fseek\",\n-      \"perror\",\n-      \"strtod\",\n-      \"toupper\",\n-      \"towupper\",\n-      \"frexp\",\n-      \"strtok\",\n-      \"fsetpos\",\n+      \"towctrans\",\n+      \"wcsstr\",\n+      \"wcstombs\",\n+      \"strstr\",\n       \"ferror\",\n-      \"freopen\",\n-      \"fgetpos\",\n-      \"fopen\",\n+      \"wcsxfrm\",\n+      \"wcsftime\",\n+      \"exit\",\n+      \"exp\",\n+      \"modf\",\n+      \"strxfrm\",\n       \"wmemset\",\n       \"memset\",\n-      \"system\",\n-      \"wcsstr\",\n-      \"wctype\",\n-      \"strxfrm\",\n-      \"wcsspn\",\n-      \"strcspn\",\n-      \"fmod\",\n-      \"strcpy\",\n-      \"strncpy\",\n-      \"strlen\",\n-      \"ungetwc\",\n-      \"feof\",\n-      \"ldexp\",\n-      \"isupper\",\n-      \"rewind\",\n-      \"iswupper\",\n-      \"sin\",\n-      \"cos\",\n-      \"modf\",\n-      \"iswpunct\",\n-      \"wcstod\",\n-      \"log10\",\n-      \"log\",\n-      \"wcsrtombs\",\n-      \"strcmp\",\n-      \"fwide\",\n-      \"towctrans\",\n-      \"strncmp\",\n-      \"strtoul\",\n-      \"fwrite\",\n-      \"exit\",\n-      \"swprintf\",\n-      \"wcstok\",\n       \"strftime\",\n-      \"sprintf\",\n-      \"wprintf\",\n-      \"strpbrk\",\n+      \"frexp\",\n       \"time\",\n-      \"rand\",\n-      \"srand\",\n+      \"ctime\",\n+      \"wcstod\",\n+      \"fwide\",\n+      \"wcscmp\",\n       \"wmemmove\",\n-      \"tan\",\n-      \"tolower\",\n-      \"fwprintf\",\n-      \"towlower\",\n-      \"wcstombs\",\n-      \"printf\",\n-      \"fprintf\",\n+      \"strtod\",\n+      \"fmod\",\n+      \"wcschr\",\n+      \"wcsrchr\",\n+      \"strcmp\",\n+      \"wctype\",\n+      \"toupper\",\n+      \"towupper\",\n       \"strchr\",\n       \"strrchr\",\n-      \"wmemcpy\",\n-      \"fread\",\n-      \"getwchar\",\n-      \"putwchar\",\n-      \"longjmp\",\n-      \"memcpy\",\n-      \"wcsxfrm\",\n-      \"wcscspn\",\n-      \"getc\",\n-      \"putc\",\n-      \"getwc\",\n-      \"putwc\",\n-      \"wcscpy\",\n-      \"wcsncpy\",\n-      \"wcslen\",\n-      \"floor\",\n-      \"setbuf\",\n-      \"ungetc\",\n-      \"rename\",\n-      \"remove\",\n-      \"gmtime\",\n-      \"mktime\",\n-      \"fgetc\",\n-      \"fputc\",\n-      \"fgetwc\",\n-      \"fputwc\",\n-      \"memcmp\",\n-      \"iswctype\",\n       \"wmemcmp\",\n-      \"ispunct\",\n-      \"mbstowcs\",\n-      \"wcscmp\",\n-      \"mbsrtowcs\",\n-      \"setlocale\",\n-      \"wcsncmp\",\n-      \"wcstoul\",\n-      \"strtol\",\n-      \"wcsftime\",\n+      \"iswctype\",\n+      \"gmtime\",\n+      \"difftime\",\n+      \"btowc\",\n       \"iswprint\",\n-      \"wcspbrk\",\n-      \"iswdigit\",\n-      \"isprint\",\n-      \"fclose\",\n-      \"atof\",\n-      \"islower\",\n-      \"iswlower\",\n-      \"ctime\",\n+      \"iswxdigit\",\n+      \"cosh\",\n+      \"memcmp\",\n       \"wmemchr\",\n+      \"isupper\",\n+      \"iswupper\",\n+      \"iswdigit\",\n       \"memchr\",\n-      \"wctrans\",\n-      \"strcat\",\n-      \"getenv\",\n-      \"strncat\",\n-      \"iswxdigit\",\n-      \"wcschr\",\n-      \"wcsrchr\",\n       \"isxdigit\",\n+      \"wmemcpy\",\n+      \"mbtowc\",\n+      \"setbuf\",\n+      \"mbstowcs\",\n+      \"wcscpy\",\n+      \"memmove\",\n       \"vswprintf\",\n-      \"raise\",\n-      \"iswspace\",\n-      \"vsprintf\",\n-      \"vwprintf\",\n-      \"vprintf\",\n-      \"swscanf\",\n-      \"sinh\",\n-      \"tmpfile\",\n-      \"asin\",\n-      \"mblen\",\n       \"acos\",\n-      \"mbrlen\",\n-      \"cosh\",\n-      \"difftime\",\n-      \"memmove\",\n-      \"abs\",\n-      \"tmpnam\",\n-      \"vfwprintf\",\n-      \"setvbuf\",\n-      \"vfprintf\",\n-      \"scanf\",\n-      \"sscanf\",\n-      \"wscanf\",\n-      \"fwscanf\",\n-      \"ftell\",\n-      \"fflush\",\n-      \"atexit\",\n-      \"iswcntrl\",\n-      \"iscntrl\",\n       \"mbrtowc\",\n       \"wcrtomb\",\n-      \"fabs\",\n-      \"wcstol\",\n-      \"strcoll\",\n-      \"atan2\",\n-      \"tanh\",\n-      \"atan\",\n-      \"fscanf\",\n-      \"clock\",\n-      \"getchar\",\n-      \"putchar\",\n-      \"abort\",\n-      \"clearerr\",\n+      \"mbsrtowcs\",\n+      \"atof\",\n+      \"strcpy\",\n+      \"setlocale\",\n       \"wcscat\",\n-      \"wcsncat\",\n       \"isdigit\",\n-      \"isgraph\",\n-      \"iswgraph\",\n-      \"btowc\",\n+      \"log10\",\n+      \"tolower\",\n+      \"floor\",\n+      \"towlower\",\n+      \"strcat\",\n+      \"log\",\n+      \"mktime\",\n+      \"wcstoul\",\n+      \"fseek\",\n+      \"memcpy\",\n+      \"wcstok\",\n+      \"strtoul\",\n+      \"wcscspn\",\n+      \"islower\",\n       \"div\",\n+      \"iswlower\",\n+      \"atexit\",\n+      \"strtok\",\n+      \"setvbuf\",\n+      \"strcspn\",\n       \"isspace\",\n-      \"atol\",\n-      \"labs\",\n-      \"ceil\",\n-      \"mbtowc\",\n-      \"wcscoll\",\n-      \"wctob\",\n+      \"iswspace\",\n       \"asctime\",\n-      \"iswalnum\",\n-      \"isalnum\",\n-      \"mbsinit\",\n+      \"wctob\",\n+      \"wcsncmp\",\n       \"atoi\",\n+      \"ldexp\",\n+      \"strncmp\",\n+      \"wcspbrk\",\n       \"wctomb\",\n+      \"swprintf\",\n+      \"sprintf\",\n+      \"strpbrk\",\n+      \"abs\",\n+      \"fabs\",\n+      \"wcsncpy\",\n+      \"ispunct\",\n+      \"iswpunct\",\n+      \"strncpy\",\n+      \"iswgraph\",\n+      \"isprint\",\n+      \"isgraph\",\n+      \"wcscoll\",\n+      \"wcstol\",\n+      \"vsprintf\",\n+      \"strcoll\",\n+      \"strtol\",\n+      \"sscanf\",\n+      \"clearerr\",\n+      \"swscanf\",\n+      \"sinh\",\n+      \"wcsncat\",\n+      \"getenv\",\n+      \"ceil\",\n+      \"clock\",\n+      \"wctrans\",\n+      \"strncat\",\n       \"ldiv\",\n-      \"signal\",\n-      \"realloc\",\n+      \"iswcntrl\",\n+      \"wcsspn\",\n+      \"iscntrl\",\n+      \"sin\",\n+      \"strspn\",\n+      \"mbsinit\",\n+      \"longjmp\",\n+      \"rand\",\n+      \"srand\",\n+      \"labs\",\n+      \"tanh\",\n+      \"calloc\",\n+      \"atol\",\n       \"localtime\",\n+      \"realloc\",\n+      \"malloc\",\n+      \"atan2\",\n+      \"tan\",\n+      \"wcslen\",\n+      \"strlen\",\n       \"iswalpha\",\n       \"localeconv\",\n+      \"asin\",\n+      \"iswalnum\",\n+      \"isalnum\",\n       \"isalpha\",\n-      \"malloc\",\n-      \"calloc\"\n+      \"mblen\",\n+      \"mbrlen\",\n+      \"atan\",\n+      \"signal\"\n     };\n \n   static const short lookup[] =\n     {\n-        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n-        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n-        -1,   -1,    0,    1,   -1,    2,   -1,   -1,\n-        -1,   -1,   -1,    3,   -1,    4,   -1,   -1,\n-        -1,   -1,    5,   -1,   -1,   -1,   -1,   -1,\n-        -1,   -1,   -1,    6,   -1,   -1,   -1,    7,\n-        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n-        -1,   -1,   -1,    8,    9,   10,   11,   -1,\n-        -1,   12,   -1,   -1,   -1,   -1,   -1,   -1,\n-        -1,   -1,   -1,   13,   -1,   -1,   14,   -1,\n-        -1,   -1,   -1,   15,   -1,   16,   -1,   17,\n-        18,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n-        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n-        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n-        -1,   19,   20,   -1,   -1,   -1,   21,   22,\n-        -1,   23,   -1,   24,   -1,   -1,   -1,   -1,\n-        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n-        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n-        -1,   -1,   -1,   -1,   -1,   25,   -1,   -1,\n-        -1,   -1,   26,   27,   -1,   -1,   -1,   -1,\n-        -1,   -1,   -1,   -1,   28,   -1,   29,   30,\n-        -1,   31,   32,   33,   -1,   -1,   -1,   -1,\n-        34,   -1,   35,   -1,   36,   -1,   -1,   37,\n-        38,   -1,   -1,   -1,   -1,   -1,   -1,   39,\n-        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n-        -1,   -1,   40,   41,   42,   43,   -1,   44,\n-        -1,   -1,   -1,   45,   -1,   -1,   -1,   -1,\n-        -1,   46,   47,   48,   -1,   -1,   -1,   49,\n-        50,   -1,   -1,   51,   -1,   -1,   52,   53,\n-        -1,   -1,   -1,   -1,   -1,   54,   55,   -1,\n-        -1,   56,   57,   -1,   -1,   58,   -1,   -1,\n-        59,   60,   61,   62,   -1,   63,   -1,   -1,\n-        -1,   -1,   -1,   -1,   -1,   -1,   64,   65,\n-        66,   -1,   -1,   -1,   -1,   -1,   67,   -1,\n-        -1,   -1,   -1,   68,   -1,   -1,   -1,   -1,\n-        -1,   -1,   -1,   -1,   69,   70,   71,   72,\n-        -1,   73,   74,   -1,   75,   76,   77,   78,\n-        79,   80,   81,   -1,   82,   -1,   83,   -1,\n-        -1,   84,   85,   86,   87,   88,   -1,   89,\n-        -1,   90,   -1,   91,   -1,   92,   -1,   93,\n-        -1,   -1,   -1,   -1,   -1,   94,   -1,   -1,\n-        -1,   -1,   -1,   -1,   95,   96,   -1,   -1,\n-        -1,   -1,   97,   -1,   -1,   -1,   -1,   -1,\n-        -1,   -1,   98,   99,  100,  101,  102,  103,\n-       104,  105,   -1,   -1,   -1,   -1,   -1,  106,\n-        -1,  107,  108,   -1,  109,   -1,  110,   -1,\n-        -1,   -1,   -1,   -1,  111,  112,   -1,  113,\n-        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n-       114,   -1,   -1,  115,  116,   -1,   -1,  117,\n-        -1,   -1,  118,   -1,  119,   -1,  120,   -1,\n-        -1,  121,   -1,  122,   -1,   -1,   -1,  123,\n-        -1,   -1,   -1,   -1,   -1,   -1,   -1,  124,\n-       125,   -1,  126,   -1,   -1,  127,   -1,  128,\n-       129,  130,   -1,  131,  132,   -1,  133,   -1,\n-        -1,   -1,  134,   -1,   -1,   -1,   -1,  135,\n-       136,  137,  138,   -1,   -1,   -1,   -1,  139,\n-       140,  141,   -1,  142,   -1,  143,  144,  145,\n-        -1,   -1,  146,   -1,  147,   -1,   -1,  148,\n-        -1,  149,   -1,   -1,  150,   -1,  151,   -1,\n-        -1,   -1,  152,   -1,   -1,  153,   -1,   -1,\n-        -1,  154,   -1,   -1,   -1,  155,  156,  157,\n-       158,   -1,  159,   -1,  160,   -1,   -1,   -1,\n-        -1,   -1,  161,  162,  163,   -1,   -1,   -1,\n-        -1,   -1,   -1, -719,   -1,  166,  167,  -43,\n-        -2,  168,   -1,  169,   -1,   -1,   -1,  170,\n-        -1,   -1,   -1,  171,   -1,   -1,  172,   -1,\n-        -1,  173,   -1,   -1,   -1,   -1,   -1,   -1,\n-        -1,   -1,   -1,   -1,   -1,  174,  175,   -1,\n-        -1,   -1,   -1,  176,   -1,   -1,   -1,  177,\n-        -1,   -1,   -1,   -1,  178,   -1,   -1,  179,\n-        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n-        -1,   -1,   -1,   -1,   -1,  180,  181,   -1,\n-       182,   -1,   -1,  183,   -1,  184,  185,   -1,\n-        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n-        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n-        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n-        -1,   -1,  186,   -1,   -1,   -1,   -1,  187,\n-        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n-       188,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n-        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n-        -1,   -1,   -1,   -1,   -1,   -1,   -1,  189,\n-       190,   -1,   -1,   -1,   -1,  191,   -1,   -1,\n-       192,   -1,   -1,   -1,   -1,   -1,  193,   -1,\n-        -1,   -1,   -1,   -1,  194,   -1,   -1,   -1,\n-        -1,   -1,   -1,   -1,  195,   -1,   -1,   -1,\n-        -1,   -1,   -1,   -1,   -1,   -1,  196,   -1,\n-        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n-        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n-        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n-        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n-        -1,  197,   -1,   -1,   -1,   -1,   -1,   -1,\n-       198,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n-        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n-        -1,  199,   -1,   -1,   -1,   -1,   -1,   -1,\n-        -1,  200,   -1,   -1,   -1,   -1,   -1,  201,\n-        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n-        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n-        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n-        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n-        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n-        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n-        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n-        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n-        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n-        -1,  202,   -1,   -1,   -1,   -1,   -1,   -1,\n-        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n-        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n-        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n-        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n-        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n-        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n-        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n-        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n-        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n-        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n-        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n-        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n-        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n-        -1,   -1,   -1,   -1,   -1,   -1,  203,   -1,\n-        -1,   -1,   -1,   -1,   -1,  204,   -1,   -1,\n-       205,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n-        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n-        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n-        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n-        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n-        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n-        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n-        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n-        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n-        -1,   -1,   -1,   -1,   -1,  206\n+        -1,   -1,   -1,    0,    1,   -1,   -1,   -1,\n+        -1,   -1,   -1,    2,   -1,   -1,   -1,   -1,\n+        -1,    3,   -1,   -1,    4,   -1,    5,    6,\n+         7,   -1,   -1,   -1,   -1,    8,   -1,   -1,\n+        -1,    9,   10,   11,   -1,   -1,   12,   13,\n+        14,   -1,   15,   -1,   16,   17,   18,   19,\n+        -1,   20,   21,   22,   23,   24,   -1,   -1,\n+        -1,   -1,   25,   -1,   26,   27,   -1,   28,\n+        29,   30,   -1,   31,   32,   -1,   33,   -1,\n+        34,   35,   36,   -1,   37,   -1,   -1,   38,\n+        39,   -1,   -1,   -1,   40,   41,   -1,   -1,\n+        42,   43,   44,   45,   46,   47,   -1,   48,\n+        49,   50,   51,   -1,   52,   -1,   -1,   53,\n+        54,   55,   56,   57,   -1,   58,   59, -273,\n+        62,   63,   -1,   64,  -96,   -2,   65,   66,\n+        67,   -1,   68,   -1,   69,   70,   71,   -1,\n+        72,   -1,   -1,   73,   -1,   -1,   -1,   74,\n+        75,   76,   -1,   77,   -1,   -1,   78,   -1,\n+        -1,   79,   80,   81,   82,   83,   84,   85,\n+        -1,   -1,   86,   87,   88,   -1,   89,   90,\n+        -1,   91,   -1,   92,   -1,   93,   -1,   -1,\n+        -1,   94,   -1,   -1,   95,   -1,   96,   -1,\n+        -1,   -1,   -1,   97,   98,   99,   -1,  100,\n+        -1,  101,  102,  103,   -1,   -1,   -1,   -1,\n+        -1,  104,   -1,  105,  106,   -1,   -1,   -1,\n+        -1,   -1,  107,   -1,   -1,   -1,   -1,  108,\n+        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n+        -1,  109,   -1,   -1,  110,   -1,  111,   -1,\n+        -1,   -1,   -1,   -1,  112,  113,   -1,  114,\n+        -1,  115,  116,  117,   -1,  118,  119,  120,\n+        -1,   -1,  121,  122,   -1,  123,   -1,  124,\n+        -1,   -1,   -1,   -1,   -1,   -1,   -1,  125,\n+        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n+        -1,  126,  127,   -1,   -1,   -1,  128,  129,\n+        -1,   -1,   -1,  130,  131,   -1,   -1,  132,\n+       133,  134,   -1,   -1,   -1,   -1,   -1,   -1,\n+        -1,   -1,   -1,   -1,  135,   -1,   -1,   -1,\n+        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n+        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n+        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n+       136,   -1,   -1,   -1,  137,  138,   -1,   -1,\n+        -1,   -1,  139,   -1,  140,   -1,   -1,   -1,\n+        -1,   -1,   -1,   -1,   -1,  141,   -1,  142,\n+        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n+        -1,   -1,  143,  144,   -1,   -1,   -1,   -1,\n+        -1,   -1,   -1,   -1,  145,   -1,   -1,   -1,\n+        -1,   -1,  146,   -1,   -1,   -1,   -1,   -1,\n+        -1,  147,  148,   -1,   -1,   -1,   -1,   -1,\n+        -1,  149,   -1,   -1,   -1,   -1,   -1,   -1,\n+        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n+        -1,   -1,  150,   -1,   -1,   -1,   -1,   -1,\n+        -1,   -1,   -1,  151,   -1,   -1,   -1,   -1,\n+        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n+        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n+        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n+        -1,   -1,   -1,   -1,   -1,   -1,  152,   -1,\n+        -1,   -1,   -1,   -1,   -1,   -1,  153,   -1,\n+        -1,   -1,   -1,   -1,   -1,  154,   -1,   -1,\n+        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n+        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n+        -1,   -1,  155\n     };\n \n   if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)"}, {"sha": "d9b15bd9768b4bbb627505ed9980e1c372793b95", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a944ceb94a99f5a271e2bd84a5a922858e5f699f/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a944ceb94a99f5a271e2bd84a5a922858e5f699f/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=a944ceb94a99f5a271e2bd84a5a922858e5f699f", "patch": "@@ -665,7 +665,7 @@ in the following sections.\n @gccoptlist{-fcall-saved-@var{reg}  -fcall-used-@var{reg} @gol\n -ffixed-@var{reg}  -fexceptions @gol\n -fnon-call-exceptions  -funwind-tables @gol\n--fasynchronous-unwind-tables  -fforced-unwind-exceptions @gol\n+-fasynchronous-unwind-tables @gol\n -finhibit-size-directive  -finstrument-functions @gol\n -fno-common  -fno-ident  -fno-gnu-linker @gol\n -fpcc-struct-return  -fpic  -fPIC @gol\n@@ -10849,13 +10849,6 @@ instructions to throw exceptions, i.e.@: memory references or floating\n point instructions.  It does not allow exceptions to be thrown from\n arbitrary signal handlers such as @code{SIGALRM}.\n \n-@item -fforced-unwind-exceptions\n-@opindex fforced-unwind-exceptions\n-Generate code that checks for non-catchable exceptions derived from\n-@code{_Unwind_ForcedUnwind}, such as from @code{longjmp_unwind} or\n-from pthread cancellation.  There is some amount of code-size \n-overhead associated with this, so it is not default.\n-\n @item -funwind-tables\n @opindex funwind-tables\n Similar to @option{-fexceptions}, except that it will just generate any needed"}, {"sha": "3cd9b90d37dc72c9489b0a7efa012fff7f7d3d23", "filename": "gcc/except.c", "status": "modified", "additions": 21, "deletions": 128, "changes": 149, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a944ceb94a99f5a271e2bd84a5a922858e5f699f/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a944ceb94a99f5a271e2bd84a5a922858e5f699f/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=a944ceb94a99f5a271e2bd84a5a922858e5f699f", "patch": "@@ -564,9 +564,7 @@ expand_eh_region_end_cleanup (handler)\n \n   emit_label (region->label);\n \n-  if (flag_non_call_exceptions \n-      || flag_forced_unwind_exceptions\n-      || region->may_contain_throw)\n+  if (flag_non_call_exceptions || region->may_contain_throw)\n     {\n       /* Give the language a chance to specify an action to be taken if an\n \t exception is thrown that would propagate out of the HANDLER.  */\n@@ -1135,40 +1133,21 @@ convert_from_eh_region_ranges_1 (pinsns, orig_sp, cur)\n \t}\n       else if (INSN_P (insn))\n \t{\n-\t  rtx note;\n-\t  switch (cur)\n+\t  if (cur > 0\n+\t      && ! find_reg_note (insn, REG_EH_REGION, NULL_RTX)\n+\t      /* Calls can always potentially throw exceptions, unless\n+\t\t they have a REG_EH_REGION note with a value of 0 or less.\n+\t\t Which should be the only possible kind so far.  */\n+\t      && (GET_CODE (insn) == CALL_INSN\n+\t\t  /* If we wanted exceptions for non-call insns, then\n+\t\t     any may_trap_p instruction could throw.  */\n+\t\t  || (flag_non_call_exceptions\n+\t\t      && GET_CODE (PATTERN (insn)) != CLOBBER\n+\t\t      && GET_CODE (PATTERN (insn)) != USE\n+\t\t      && may_trap_p (PATTERN (insn)))))\n \t    {\n-\t    default:\n-\t      /* An existing region note may be present to suppress\n-\t\t exception handling.  Anything with a note value of -1\n-\t\t cannot throw an exception of any kind.  A note value\n-\t\t of 0 means that \"normal\" exceptions are suppressed,\n-\t\t but not necessarily \"forced unwind\" exceptions.  */\n-\t      note = find_reg_note (insn, REG_EH_REGION, NULL_RTX);\n-\t      if (note)\n-\t\t{\n-\t\t  if (flag_forced_unwind_exceptions\n-\t\t      && INTVAL (XEXP (note, 0)) >= 0)\n-\t\t    XEXP (note, 0) = GEN_INT (cur);\n-\t\t  break;\n-\t\t}\n-\n-\t      /* Calls can always potentially throw exceptions; if we wanted\n-\t\t exceptions for non-call insns, then any may_trap_p\n-\t\t instruction can throw.  */\n-\t      if (GET_CODE (insn) != CALL_INSN\n-\t\t  && (!flag_non_call_exceptions\n-\t\t      || GET_CODE (PATTERN (insn)) == CLOBBER\n-\t\t      || GET_CODE (PATTERN (insn)) == USE\n-\t\t      || !may_trap_p (PATTERN (insn))))\n-\t\tbreak;\n-\n-\t      REG_NOTES (insn) = alloc_EXPR_LIST (REG_EH_REGION,\n-\t\t\t\t\t\t  GEN_INT (cur),\n+\t      REG_NOTES (insn) = alloc_EXPR_LIST (REG_EH_REGION, GEN_INT (cur),\n \t\t\t\t\t\t  REG_NOTES (insn));\n-\n-\t    case 0:\n-\t      break;\n \t    }\n \n \t  if (GET_CODE (insn) == CALL_INSN\n@@ -1727,14 +1706,7 @@ build_post_landing_pads ()\n \t    for (c = region->u.try.catch; c ; c = c->u.catch.next_catch)\n \t      {\n \t\tif (c->u.catch.type_list == NULL)\n-\t\t  {\n-\t\t    if (flag_forced_unwind_exceptions)\n-\t\t      emit_cmp_and_jump_insns\n-\t\t\t(cfun->eh->filter, const0_rtx, GT, NULL_RTX,\n-\t\t\t word_mode, 0, c->label);\n-\t\t    else\n-\t\t      emit_jump (c->label);\n-\t\t  }\n+\t\t  emit_jump (c->label);\n \t\telse\n \t\t  {\n \t\t    /* Need for one cmp/jump per type caught. Each type\n@@ -1795,33 +1767,8 @@ build_post_landing_pads ()\n \t  break;\n \n \tcase ERT_CLEANUP:\n-\t  region->post_landing_pad = region->label;\n-\t  break;\n-\n \tcase ERT_MUST_NOT_THROW:\n-\t  /* See maybe_remove_eh_handler about removing region->label.  */\n-\t  if (flag_forced_unwind_exceptions && region->label)\n-\t    {\n-\t      region->post_landing_pad = gen_label_rtx ();\n-\n-\t      start_sequence ();\n-\n-\t      emit_label (region->post_landing_pad);\n-\t      emit_cmp_and_jump_insns (cfun->eh->filter, const0_rtx, GT,\n-\t\t\t\t       NULL_RTX, word_mode, 0, region->label);\n-\n-\t      region->resume\n-\t        = emit_jump_insn (gen_rtx_RESX (VOIDmode,\n-\t\t\t\t\t\tregion->region_number));\n-\t      emit_barrier ();\n-\n-\t      seq = get_insns ();\n-\t      end_sequence ();\n-\n-\t      emit_insn_before (seq, region->label);\n-\t    }\n-\t  else\n-\t    region->post_landing_pad = region->label;\n+\t  region->post_landing_pad = region->label;\n \t  break;\n \n \tcase ERT_CATCH:\n@@ -2001,21 +1948,6 @@ sjlj_find_directly_reachable_regions (lp_info)\n \t  if (rc != RNL_NOT_CAUGHT)\n \t    break;\n \t}\n-\n-      /* Forced unwind exceptions aren't blocked.  */\n-      if (flag_forced_unwind_exceptions && rc == RNL_BLOCKED)\n-\t{\n-          struct eh_region *r;\n-\t  for (r = region->outer; r ; r = r->outer)\n-\t    if (r->type == ERT_CLEANUP)\n-\t      {\n-\t\trc = RNL_MAYBE_CAUGHT;\n-\t\tif (! region->label)\n-\t\t  region = r;\n-\t\tbreak;\n-\t      }\n-\t}\n-\n       if (rc == RNL_MAYBE_CAUGHT || rc == RNL_CAUGHT)\n \t{\n \t  lp_info[region->region_number].directly_reachable = 1;\n@@ -2854,21 +2786,7 @@ reachable_handlers (insn)\n   while (region)\n     {\n       if (reachable_next_level (region, type_thrown, &info) >= RNL_CAUGHT)\n-\t{\n-\t  /* Forced unwind exceptions are neither BLOCKED nor CAUGHT.\n-\t     Make sure the cleanup regions are reachable.  */\n-\t  if (flag_forced_unwind_exceptions)\n-\t    {\n-\t      while ((region = region->outer) != NULL)\n-\t\tif (region->type == ERT_CLEANUP)\n-\t\t  {\n-\t\t    add_reachable_handler (&info, region, region);\n-\t\t    break;\n-\t\t  }\n-\t    }\n-\t  break;\n-\t}\n-\n+\tbreak;\n       /* If we have processed one cleanup, there is no point in\n \t processing any more of them.  Each cleanup will have an edge\n \t to the next outer cleanup region, so the flow graph will be\n@@ -2990,10 +2908,6 @@ can_throw_external (insn)\n   if (INTVAL (XEXP (note, 0)) <= 0)\n     return false;\n \n-  /* Forced unwind excptions are not catchable.  */\n-  if (flag_forced_unwind_exceptions && GET_CODE (insn) == CALL_INSN)\n-    return true;\n-\n   region = cfun->eh->region_array[INTVAL (XEXP (note, 0))];\n \n   type_thrown = NULL_TREE;\n@@ -3348,26 +3262,12 @@ collect_one_action_chain (ar_hash, region)\n \t{\n \t  if (c->u.catch.type_list == NULL)\n \t    {\n-\t      int filter;\n-\n-\t      /* Forced exceptions run cleanups, always.  Record them if\n-\t\t they exist.  */\n-\t      next = 0;\n-\t      if (flag_forced_unwind_exceptions)\n-\t\t{\n-\t\t  struct eh_region *r;\n-\t\t  for (r = c->outer; r ; r = r->outer)\n-\t\t    if (r->type == ERT_CLEANUP)\n-\t\t      {\n-\t\t\tnext = add_action_record (ar_hash, 0, 0);\n-\t\t\tbreak;\n-\t\t      }\n-\t\t}\n-\n \t      /* Retrieve the filter from the head of the filter list\n \t\t where we have stored it (see assign_filter_values).  */\n-\t      filter = TREE_INT_CST_LOW (TREE_VALUE (c->u.catch.filter_list));\n-\t      next = add_action_record (ar_hash, filter, next);\n+\t      int filter\n+\t\t= TREE_INT_CST_LOW (TREE_VALUE (c->u.catch.filter_list));\n+\n+\t      next = add_action_record (ar_hash, filter, 0);\n \t    }\n \t  else\n \t    {\n@@ -3412,13 +3312,6 @@ collect_one_action_chain (ar_hash, region)\n \t requires no call-site entry.  Note that this differs from\n \t the no handler or cleanup case in that we do require an lsda\n \t to be generated.  Return a magic -2 value to record this.  */\n-      if (flag_forced_unwind_exceptions)\n-\t{\n-\t  struct eh_region *r;\n-\t  for (r = region->outer; r ; r = r->outer)\n-\t    if (r->type == ERT_CLEANUP)\n-\t      return 0;\n-\t}\n       return -2;\n \n     case ERT_CATCH:"}, {"sha": "c58b5e6a39186376ae7d0e9e4c5a4b3093b5af8b", "filename": "gcc/flags.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a944ceb94a99f5a271e2bd84a5a922858e5f699f/gcc%2Fflags.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a944ceb94a99f5a271e2bd84a5a922858e5f699f/gcc%2Fflags.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflags.h?ref=a944ceb94a99f5a271e2bd84a5a922858e5f699f", "patch": "@@ -475,10 +475,6 @@ extern int flag_unwind_tables;\n \n extern int flag_asynchronous_unwind_tables;\n \n-/* Nonzero means allow for forced unwinding.  */\n-\n-extern int flag_forced_unwind_exceptions;\n-\n /* Nonzero means don't place uninitialized global data in common storage\n    by default.  */\n "}, {"sha": "eb477af0585087d1f8a6220b97880f2da75d8e81", "filename": "gcc/libgcc-std.ver", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a944ceb94a99f5a271e2bd84a5a922858e5f699f/gcc%2Flibgcc-std.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a944ceb94a99f5a271e2bd84a5a922858e5f699f/gcc%2Flibgcc-std.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcc-std.ver?ref=a944ceb94a99f5a271e2bd84a5a922858e5f699f", "patch": "@@ -181,6 +181,8 @@ GCC_3.3 {\n   _Unwind_FindEnclosingFunction\n   _Unwind_GetCFA\n   _Unwind_Backtrace\n+  _Unwind_Resume_or_Rethrow\n+  _Unwind_SjLj_Resume_or_Rethrow\n }\n \n %inherit GCC_3.4 GCC_3.3"}, {"sha": "a1bb392b6c6fa5d9acea3e1530ddcf49c4357bf1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a944ceb94a99f5a271e2bd84a5a922858e5f699f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a944ceb94a99f5a271e2bd84a5a922858e5f699f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a944ceb94a99f5a271e2bd84a5a922858e5f699f", "patch": "@@ -1,3 +1,13 @@\n+2003-05-07  Richard Henderson  <rth@redhat.com>\n+\n+        PR c++/10570\n+        * g++.dg/eh/forced1.C: Expect catch-all handlers to run.\n+        Verify exception_cleanup not called for rethrows.\n+        * g++.dg/eh/forced2.C: Test that exception_cleanup is called\n+        when exiting catch block without rethrowing.\n+        * g++.dg/eh/forced3.C: New.\n+        * g++.dg/eh/forced4.C: New.\n+\n 2003-05-07  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* gcc.dg/20030505.c: Fix triplet."}, {"sha": "8f090fa9df5ea57f58c760b83ea92e0a1c277a7b", "filename": "gcc/testsuite/g++.dg/eh/forced1.C", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a944ceb94a99f5a271e2bd84a5a922858e5f699f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fforced1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a944ceb94a99f5a271e2bd84a5a922858e5f699f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fforced1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fforced1.C?ref=a944ceb94a99f5a271e2bd84a5a922858e5f699f", "patch": "@@ -1,7 +1,7 @@\n // { dg-do run }\n-// { dg-options \"-fforced-unwind-exceptions\" }\n \n-// Test that forced unwinding runs all cleanups, and only cleanups.\n+// Test that forced unwinding runs all cleanups.  Also tests that\n+// rethrowing doesn't call the exception object destructor.\n \n #include <unwind.h>\n #include <stdlib.h>\n@@ -17,26 +17,32 @@ force_unwind_stop (int version, _Unwind_Action actions,\n {\n   if (actions & _UA_END_OF_STACK)\n     {\n-      if (test != 5)\n+      if (test != 15)\n         abort ();\n       exit (0);\n     }\n \n   return _URC_NO_REASON;\n }\n \n+static void\n+force_unwind_cleanup (_Unwind_Reason_Code, struct _Unwind_Exception *)\n+{\n+  abort ();\n+}\n+\n static void force_unwind ()\n {\n   _Unwind_Exception *exc = new _Unwind_Exception;\n   exc->exception_class = 0;\n-  exc->exception_cleanup = 0;\n-                   \n+  exc->exception_cleanup = force_unwind_cleanup;\n+\n #ifndef __USING_SJLJ_EXCEPTIONS__\n   _Unwind_ForcedUnwind (exc, force_unwind_stop, 0);\n #else\n   _Unwind_SjLj_ForcedUnwind (exc, force_unwind_stop, 0);\n #endif\n-                   \n+\n   abort ();\n }\n \n@@ -58,18 +64,17 @@ static void doit ()\n   \n     } catch(...) { \n       test |= 2;\n+      throw;\n     }\n \n   } catch(...) {\n     test |= 8;\n+    throw;\n   }\n }\n \n int main()\n { \n-  try {\n-    doit ();\n-  } catch (...) {\n-  }\n+  doit ();\n   abort ();\n }"}, {"sha": "ebfda5554f2ef0a6e12032c61636544cc2b3aa3a", "filename": "gcc/testsuite/g++.dg/eh/forced2.C", "status": "modified", "additions": 12, "deletions": 53, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a944ceb94a99f5a271e2bd84a5a922858e5f699f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fforced2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a944ceb94a99f5a271e2bd84a5a922858e5f699f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fforced2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fforced2.C?ref=a944ceb94a99f5a271e2bd84a5a922858e5f699f", "patch": "@@ -1,13 +1,11 @@\n // { dg-do run }\n-// { dg-options \"-fforced-unwind-exceptions\" }\n \n-// Test that forced unwinding runs all cleanups, and only cleanups.\n+// Test that leaving the catch block without rethrowing\n+// does call the exception object destructor.\n \n #include <unwind.h>\n #include <stdlib.h>\n \n-static int test = 0;\n-\n static _Unwind_Reason_Code\n force_unwind_stop (int version, _Unwind_Action actions,\n                    _Unwind_Exception_Class exc_class,\n@@ -16,24 +14,22 @@ force_unwind_stop (int version, _Unwind_Action actions,\n                    void *stop_parameter)\n {\n   if (actions & _UA_END_OF_STACK)\n-    {\n-      if (test != 5)\n-        abort ();\n-      exit (0);\n-    }\n-\n+    abort ();\n   return _URC_NO_REASON;\n }\n \n-// Note that neither the noreturn nor the nothrow specification\n-// affects forced unwinding.\n+static void\n+force_unwind_cleanup (_Unwind_Reason_Code, struct _Unwind_Exception *)\n+{\n+  exit (0);\n+}\n \n-static void __attribute__((noreturn))\n-force_unwind () throw()\n+static void\n+force_unwind ()\n {\n   _Unwind_Exception *exc = new _Unwind_Exception;\n   exc->exception_class = 0;\n-  exc->exception_cleanup = 0;\n+  exc->exception_cleanup = force_unwind_cleanup;\n \n #ifndef __USING_SJLJ_EXCEPTIONS__\n   _Unwind_ForcedUnwind (exc, force_unwind_stop, 0);\n@@ -44,47 +40,10 @@ force_unwind () throw()\n   abort ();\n }\n \n-struct S\n-{\n-  int bit;\n-  S(int b) : bit(b) { }\n-  ~S() { test |= bit; }\n-};\n-  \n-static void doit_3 ()\n-{\n-  S one(1);\n-  force_unwind ();\n-}\n-\n-static void doit_2 ()\n-{\n-  try {\n-    doit_3 ();\n-  } catch (...) {\n-    test |= 2;\n-  }\n-}\n-\n-static void doit_1 ()\n-{\n-  S four(4);\n-  doit_2 ();\n-}\n-\n-static void doit ()\n-{\n-  try {\n-    doit_1 ();\n-  } catch(...) {\n-    test |= 8;\n-  }\n-}\n-\n int main()\n { \n   try {\n-    doit ();\n+    force_unwind ();\n   } catch (...) {\n   }\n   abort ();"}, {"sha": "2de421c4412f209cdde98cc0aba13d80bcb941e5", "filename": "gcc/testsuite/g++.dg/eh/forced3.C", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a944ceb94a99f5a271e2bd84a5a922858e5f699f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fforced3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a944ceb94a99f5a271e2bd84a5a922858e5f699f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fforced3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fforced3.C?ref=a944ceb94a99f5a271e2bd84a5a922858e5f699f", "patch": "@@ -0,0 +1,55 @@\n+// { dg-do run }\n+\n+// Test that forced unwinding calls std::unexpected going \n+// throw a nothrow function.\n+\n+#include <unwind.h>\n+#include <stdlib.h>\n+#include <exception>\n+\n+static _Unwind_Reason_Code\n+force_unwind_stop (int version, _Unwind_Action actions,\n+                   _Unwind_Exception_Class exc_class,\n+                   struct _Unwind_Exception *exc_obj,\n+                   struct _Unwind_Context *context,\n+                   void *stop_parameter)\n+{\n+  if (actions & _UA_END_OF_STACK)\n+    abort ();\n+  return _URC_NO_REASON;\n+}\n+\n+static void __attribute__((noreturn))\n+force_unwind ()\n+{\n+  _Unwind_Exception *exc = new _Unwind_Exception;\n+  exc->exception_class = 0;\n+  exc->exception_cleanup = 0;\n+\n+#ifndef __USING_SJLJ_EXCEPTIONS__\n+  _Unwind_ForcedUnwind (exc, force_unwind_stop, 0);\n+#else\n+  _Unwind_SjLj_ForcedUnwind (exc, force_unwind_stop, 0);\n+#endif\n+\n+  abort ();\n+}\n+\n+static void\n+handle_unexpected ()\n+{\n+  exit (0);\n+}\n+\n+static void\n+doit () throw()\n+{\n+  force_unwind ();\n+}\n+\n+int main()\n+{ \n+  std::set_unexpected (handle_unexpected);\n+  doit ();\n+  abort ();\n+}"}, {"sha": "be03a7544b6282bc236e9cfa5761c8751413ef73", "filename": "gcc/testsuite/g++.dg/eh/forced4.C", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a944ceb94a99f5a271e2bd84a5a922858e5f699f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fforced4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a944ceb94a99f5a271e2bd84a5a922858e5f699f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fforced4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fforced4.C?ref=a944ceb94a99f5a271e2bd84a5a922858e5f699f", "patch": "@@ -0,0 +1,49 @@\n+// { dg-do run }\n+\n+// Test that forced unwinding does not call std::unexpected going \n+// throw a function with a non-empty exception spec.\n+\n+#include <unwind.h>\n+#include <stdlib.h>\n+\n+static _Unwind_Reason_Code\n+force_unwind_stop (int version, _Unwind_Action actions,\n+                   _Unwind_Exception_Class exc_class,\n+                   struct _Unwind_Exception *exc_obj,\n+                   struct _Unwind_Context *context,\n+                   void *stop_parameter)\n+{\n+  if (actions & _UA_END_OF_STACK)\n+    abort ();\n+  return _URC_NO_REASON;\n+}\n+\n+static void __attribute__((noreturn))\n+force_unwind ()\n+{\n+  _Unwind_Exception *exc = new _Unwind_Exception;\n+  exc->exception_class = 0;\n+  exc->exception_cleanup = 0;\n+\n+#ifndef __USING_SJLJ_EXCEPTIONS__\n+  _Unwind_ForcedUnwind (exc, force_unwind_stop, 0);\n+#else\n+  _Unwind_SjLj_ForcedUnwind (exc, force_unwind_stop, 0);\n+#endif\n+\n+  abort ();\n+}\n+\n+static void\n+doit () throw(int)\n+{\n+  force_unwind ();\n+}\n+\n+int main()\n+{ \n+  try {\n+    doit ();\n+  } catch (...) {\n+  }\n+}"}, {"sha": "bd44d2e7693e484f3d5d3a252cc90d870db44a67", "filename": "gcc/toplev.c", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a944ceb94a99f5a271e2bd84a5a922858e5f699f/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a944ceb94a99f5a271e2bd84a5a922858e5f699f/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=a944ceb94a99f5a271e2bd84a5a922858e5f699f", "patch": "@@ -740,10 +740,6 @@ int flag_unwind_tables = 0;\n \n int flag_asynchronous_unwind_tables = 0;\n \n-/* Nonzero means allow for forced unwinding.  */\n-\n-int flag_forced_unwind_exceptions;\n-\n /* Nonzero means don't place uninitialized global data in common storage\n    by default.  */\n \n@@ -1128,8 +1124,6 @@ static const lang_independent_options f_options[] =\n    N_(\"Generate unwind tables exact at each instruction boundary\") },\n   {\"non-call-exceptions\", &flag_non_call_exceptions, 1,\n    N_(\"Support synchronous non-call exceptions\") },\n-  {\"forced-unwind-exceptions\", &flag_forced_unwind_exceptions, 1,\n-   N_(\"Support forced unwinding, e.g. for thread cancellation\") },\n   {\"profile-arcs\", &profile_arc_flag, 1,\n    N_(\"Insert arc based program profiling code\") },\n   {\"test-coverage\", &flag_test_coverage, 1,"}, {"sha": "8d9766f5bc8cd87a9973324b74139376d4910542", "filename": "gcc/unwind-sjlj.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a944ceb94a99f5a271e2bd84a5a922858e5f699f/gcc%2Funwind-sjlj.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a944ceb94a99f5a271e2bd84a5a922858e5f699f/gcc%2Funwind-sjlj.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funwind-sjlj.c?ref=a944ceb94a99f5a271e2bd84a5a922858e5f699f", "patch": "@@ -285,6 +285,7 @@ uw_identify_context (struct _Unwind_Context *context)\n #define _Unwind_RaiseException\t\t_Unwind_SjLj_RaiseException\n #define _Unwind_ForcedUnwind\t\t_Unwind_SjLj_ForcedUnwind\n #define _Unwind_Resume\t\t\t_Unwind_SjLj_Resume\n+#define _Unwind_Resume_or_Rethrow\t_Unwind_SjLj_Resume_or_Rethrow\n \n #include \"unwind.inc\"\n "}, {"sha": "a0d6ab3a14b02c6459c7f2017deb615847d68474", "filename": "gcc/unwind.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a944ceb94a99f5a271e2bd84a5a922858e5f699f/gcc%2Funwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a944ceb94a99f5a271e2bd84a5a922858e5f699f/gcc%2Funwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funwind.h?ref=a944ceb94a99f5a271e2bd84a5a922858e5f699f", "patch": "@@ -127,6 +127,10 @@ extern void _Unwind_DeleteException (struct _Unwind_Exception *);\n    e.g. executing cleanup code, and not to implement rethrowing.  */\n extern void _Unwind_Resume (struct _Unwind_Exception *);\n \n+/* @@@ Resume propagation of an FORCE_UNWIND exception, or to rethrow\n+   a normal exception that was handled.  */\n+extern _Unwind_Reason_Code _Unwind_Resume_or_Rethrow (struct _Unwind_Exception *);\n+\n /* @@@ Use unwind data to perform a stack backtrace.  The trace callback\n    is called for every stack frame in the call chain, but no cleanup\n    actions are performed.  */\n@@ -184,6 +188,7 @@ extern _Unwind_Reason_Code _Unwind_SjLj_RaiseException\n extern _Unwind_Reason_Code _Unwind_SjLj_ForcedUnwind\n      (struct _Unwind_Exception *, _Unwind_Stop_Fn, void *);\n extern void _Unwind_SjLj_Resume (struct _Unwind_Exception *);\n+extern _Unwind_Reason_Code _Unwind_SjLj_Resume_or_Rethrow (struct _Unwind_Exception *);\n \n /* @@@ The following provide access to the base addresses for text\n    and data-relative addressing in the LDSA.  In order to stay link"}, {"sha": "0938d501f5fb53b0306f3601e4dcb9691b4778e2", "filename": "gcc/unwind.inc", "status": "modified", "additions": 29, "deletions": 2, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a944ceb94a99f5a271e2bd84a5a922858e5f699f/gcc%2Funwind.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a944ceb94a99f5a271e2bd84a5a922858e5f699f/gcc%2Funwind.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funwind.inc?ref=a944ceb94a99f5a271e2bd84a5a922858e5f699f", "patch": "@@ -232,12 +232,40 @@ _Unwind_Resume (struct _Unwind_Exception *exc)\n   uw_install_context (&this_context, &cur_context);\n }\n \n+\n+/* Resume propagation of an FORCE_UNWIND exception, or to rethrow\n+   a normal exception that was handled.  */\n+\n+_Unwind_Reason_Code\n+_Unwind_Resume_or_Rethrow (struct _Unwind_Exception *exc)\n+{\n+  struct _Unwind_Context this_context, cur_context;\n+  _Unwind_Reason_Code code;\n+\n+  /* Choose between continuing to process _Unwind_RaiseException\n+     or _Unwind_ForcedUnwind.  */\n+  if (exc->private_1 == 0)\n+    return _Unwind_RaiseException (exc);\n+\n+  uw_init_context (&this_context);\n+  cur_context = this_context;\n+\n+  code = _Unwind_ForcedUnwind_Phase2 (exc, &cur_context);\n+\n+  if (code != _URC_INSTALL_CONTEXT)\n+    abort ();\n+\n+  uw_install_context (&this_context, &cur_context);\n+}\n+\n+\n /* A convenience function that calls the exception_cleanup field.  */\n \n void\n _Unwind_DeleteException (struct _Unwind_Exception *exc)\n {\n-  (*exc->exception_cleanup) (_URC_FOREIGN_EXCEPTION_CAUGHT, exc);\n+  if (exc->exception_cleanup)\n+    (*exc->exception_cleanup) (_URC_FOREIGN_EXCEPTION_CAUGHT, exc);\n }\n \n \n@@ -274,4 +302,3 @@ _Unwind_Backtrace(_Unwind_Trace_Fn trace, void * trace_argument)\n \n   return code;\n }\n-"}, {"sha": "b9c7bcb0a043a480ca7c8ccb98b2b881495af894", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a944ceb94a99f5a271e2bd84a5a922858e5f699f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a944ceb94a99f5a271e2bd84a5a922858e5f699f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a944ceb94a99f5a271e2bd84a5a922858e5f699f", "patch": "@@ -1,3 +1,16 @@\n+2003-05-07  Richard Henderson  <rth@redhat.com>\n+\n+        PR c++/10570\n+        * libsupc++/eh_catch.cc (__cxa_begin_catch): Handle foreign exceptions.\n+        (__cxa_end_catch): Likewise.\n+        * libsupc++/eh_throw.cc (__cxa_rethrow): Likewise.  Use\n+        _Unwind_Resume_or_Rethrow.\n+        * libsupc++/eh_personality.cc (empty_exception_spec): New.\n+        (PERSONALITY_FUNCTION): Don't ignore terminate or catch-all\n+        for _UA_FORCE_UNWIND.  Honor empty filter spec for foreign\n+        exceptions.  Don't push terminate/unexpected to cxa functions.\n+        (__cxa_call_unexpected): Remove foreign exception fixmes.\n+\n 2003-05-07  Benjamin Kosnik  <bkoz@redhat.com>\n \t\n \t* testsuite/27_io/ios_base/cons: New."}, {"sha": "4a678eb9fb24ea67acf8bf3763190250c545a1b3", "filename": "libstdc++-v3/libsupc++/eh_catch.cc", "status": "modified", "additions": 36, "deletions": 9, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a944ceb94a99f5a271e2bd84a5a922858e5f699f/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_catch.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a944ceb94a99f5a271e2bd84a5a922858e5f699f/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_catch.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_catch.cc?ref=a944ceb94a99f5a271e2bd84a5a922858e5f699f", "patch": "@@ -1,5 +1,5 @@\n // -*- C++ -*- Exception handling routines for catching.\n-// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2003 Free Software Foundation, Inc.\n //\n // This file is part of GNU CC.\n //\n@@ -39,15 +39,28 @@ __cxa_begin_catch (void *exc_obj_in)\n {\n   _Unwind_Exception *exceptionObject\n     = reinterpret_cast <_Unwind_Exception *>(exc_obj_in);\n-\n-  // ??? Foreign exceptions can't be stacked here, and there doesn't\n-  // appear to be any place to store for __cxa_end_catch to destroy.\n-\n-  __cxa_exception *header = __get_exception_header_from_ue (exceptionObject);\n   __cxa_eh_globals *globals = __cxa_get_globals ();\n   __cxa_exception *prev = globals->caughtExceptions;\n-  int count = header->handlerCount;\n+  __cxa_exception *header = __get_exception_header_from_ue (exceptionObject);\n+\n+  // Foreign exceptions can't be stacked here.  If the exception stack is\n+  // empty, then fine.  Otherwise we really have no choice but to terminate.\n+  // Note that this use of \"header\" is a lie.  It's fine so long as we only\n+  // examine header->unwindHeader though.\n+  if (header->unwindHeader.exception_class != __gxx_exception_class)\n+    {\n+      if (prev != 0)\n+\tstd::terminate ();\n+\n+      // Remember for end_catch and rethrow.\n+      globals->caughtExceptions = header;\n+\n+      // ??? No sensible value to return; we don't know what the \n+      // object is, much less where it is in relation to the header.\n+      return 0;\n+    }\n \n+  int count = header->handlerCount;\n   if (count < 0)\n     // This exception was rethrown from an immediately enclosing region.\n     count = -count + 1;\n@@ -71,8 +84,22 @@ __cxa_end_catch ()\n {\n   __cxa_eh_globals *globals = __cxa_get_globals_fast ();\n   __cxa_exception *header = globals->caughtExceptions;\n-  int count = header->handlerCount;\n \n+  // A rethrow of a foreign exception will be removed from the\n+  // the exception stack immediately by __cxa_rethrow.\n+  if (!header)\n+    return;\n+\n+  // A foreign exception couldn't have been stacked (see above),\n+  // so by definition processing must be complete.\n+  if (header->unwindHeader.exception_class != __gxx_exception_class)\n+    {\n+      globals->caughtExceptions = 0;\n+      _Unwind_DeleteException (&header->unwindHeader);\n+      return;\n+    }\n+\n+  int count = header->handlerCount;\n   if (count < 0)\n     {\n       // This exception was rethrown.  Decrement the (inverted) catch\n@@ -92,7 +119,7 @@ __cxa_end_catch ()\n     }\n   else if (count < 0)\n     // A bug in the exception handling library or compiler.\n-    std::abort ();\n+    std::terminate ();\n \n   header->handlerCount = count;\n }"}, {"sha": "2b315c3956e24ada81fd41c4e1d8a772689e2eb4", "filename": "libstdc++-v3/libsupc++/eh_personality.cc", "status": "modified", "additions": 63, "deletions": 35, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a944ceb94a99f5a271e2bd84a5a922858e5f699f/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_personality.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a944ceb94a99f5a271e2bd84a5a922858e5f699f/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_personality.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_personality.cc?ref=a944ceb94a99f5a271e2bd84a5a922858e5f699f", "patch": "@@ -1,5 +1,5 @@\n // -*- C++ -*- The GNU C++ exception personality routine.\n-// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n //\n // This file is part of GNU CC.\n //\n@@ -124,6 +124,8 @@ get_adjusted_ptr (const std::type_info *catch_type,\n   return false;\n }\n \n+// Return true if THROW_TYPE matches one if the filter types.\n+\n static bool\n check_exception_spec (lsda_header_info *info, const std::type_info *throw_type,\n \t\t      void *thrown_ptr, _Unwind_Sword filter_value)\n@@ -154,6 +156,18 @@ check_exception_spec (lsda_header_info *info, const std::type_info *throw_type,\n     }\n }\n \n+// Return true if the filter spec is empty, ie throw().\n+\n+static bool\n+empty_exception_spec (lsda_header_info *info, _Unwind_Sword filter_value)\n+{\n+  const unsigned char *e = info->TType - filter_value - 1;\n+  _Unwind_Word tmp;\n+\n+  e = read_uleb128 (e, &tmp);\n+  return tmp == 0;\n+}\n+\n // Using a different personality function name causes link failures\n // when trying to mix code using different exception handling models.\n #ifdef _GLIBCPP_SJLJ_EXCEPTIONS\n@@ -197,6 +211,7 @@ PERSONALITY_FUNCTION (int version,\n       && exception_class == __gxx_exception_class)\n     {\n       handler_switch_value = xh->handlerSwitchValue;\n+      language_specific_data = xh->languageSpecificData;\n       landing_pad = (_Unwind_Ptr) xh->catchTemp;\n       found_type = (landing_pad == 0 ? found_terminate : found_handler);\n       goto install_context;\n@@ -275,7 +290,7 @@ PERSONALITY_FUNCTION (int version,\n   // If ip is not present in the table, call terminate.  This is for\n   // a destructor inside a cleanup, or a library routine the compiler\n   // was not expecting to throw.\n-  found_type = (actions & _UA_FORCE_UNWIND ? found_nothing : found_terminate);\n+  found_type = found_terminate;\n   goto do_something;\n \n  found_something:\n@@ -327,23 +342,15 @@ PERSONALITY_FUNCTION (int version,\n \t      // Positive filter values are handlers.\n \t      catch_type = get_ttype_entry (&info, ar_filter);\n \n-\t      // Null catch type is a catch-all handler.  We can catch\n-\t      // foreign exceptions with this.\n-\t      if (! catch_type)\n-\t\t{\n-\t\t  if (!(actions & _UA_FORCE_UNWIND))\n-\t\t    {\n-\t\t      saw_handler = true;\n-\t\t      break;\n-\t\t    }\n-\t\t}\n-\t      else if (throw_type)\n+\t      // Null catch type is a catch-all handler; we can catch foreign\n+\t      // exceptions with this.  Otherwise we must match types.\n+\t      if (! catch_type\n+\t\t  || (throw_type\n+\t\t      && get_adjusted_ptr (catch_type, throw_type,\n+\t\t\t\t\t   &thrown_ptr)))\n \t\t{\n-\t\t  if (get_adjusted_ptr (catch_type, throw_type, &thrown_ptr))\n-\t\t    {\n-\t\t      saw_handler = true;\n-\t\t      break;\n-\t\t    }\n+\t\t  saw_handler = true;\n+\t\t  break;\n \t\t}\n \t    }\n \t  else\n@@ -352,9 +359,12 @@ PERSONALITY_FUNCTION (int version,\n \t      // ??? How do foreign exceptions fit in?  As far as I can\n \t      // see we can't match because there's no __cxa_exception\n \t      // object to stuff bits in for __cxa_call_unexpected to use.\n+\t      // Allow them iff the exception spec is non-empty.  I.e.\n+\t      // a throw() specification results in __unexpected.\n \t      if (throw_type\n-\t\t  && ! check_exception_spec (&info, throw_type, thrown_ptr,\n-\t\t\t\t\t     ar_filter))\n+\t\t  ? ! check_exception_spec (&info, throw_type, thrown_ptr,\n+\t\t\t\t\t    ar_filter)\n+\t\t  : empty_exception_spec (&info, ar_filter))\n \t\t{\n \t\t  saw_handler = true;\n \t\t  break;\n@@ -400,19 +410,37 @@ PERSONALITY_FUNCTION (int version,\n     }\n \n  install_context:\n-  if (found_type == found_terminate)\n+  // We can't use any of the cxa routines with foreign exceptions,\n+  // because they all expect ue_header to be a struct __cxa_exception.\n+  // So in that case, call terminate or unexpected directly.\n+  if ((actions & _UA_FORCE_UNWIND)\n+      || exception_class != __gxx_exception_class)\n     {\n-      __cxa_begin_catch (&xh->unwindHeader);\n-      __terminate (xh->terminateHandler);\n+      if (found_type == found_terminate)\n+\tstd::terminate ();\n+      else if (handler_switch_value < 0)\n+\t{\n+\t  try \n+\t    { std::unexpected (); } \n+\t  catch(...) \n+\t    { std::terminate (); }\n+\t}\n     }\n-\n-  // Cache the TType base value for __cxa_call_unexpected, as we won't\n-  // have an _Unwind_Context then.\n-  if (handler_switch_value < 0)\n+  else\n     {\n-      parse_lsda_header (context, xh->languageSpecificData, &info);\n-      xh->catchTemp = base_of_encoded_value (info.ttype_encoding,\n-\t\t\t\t\t\t      context);\n+      if (found_type == found_terminate)\n+\t{\n+\t  __cxa_begin_catch (&xh->unwindHeader);\n+\t  __terminate (xh->terminateHandler);\n+\t}\n+\n+      // Cache the TType base value for __cxa_call_unexpected, as we won't\n+      // have an _Unwind_Context then.\n+      if (handler_switch_value < 0)\n+\t{\n+\t  parse_lsda_header (context, language_specific_data, &info);\n+\t  xh->catchTemp = base_of_encoded_value (info.ttype_encoding, context);\n+\t}\n     }\n \n   _Unwind_SetGR (context, __builtin_eh_return_data_regno (0),\n@@ -457,20 +485,19 @@ __cxa_call_unexpected (void *exc_obj_in)\n   catch(...) \n     {\n       // Get the exception thrown from unexpected.\n-      // ??? Foreign exceptions can't be stacked this way.\n-      \n+\n       __cxa_eh_globals *globals = __cxa_get_globals_fast ();\n       __cxa_exception *new_xh = globals->caughtExceptions;\n       void *new_ptr = new_xh + 1;\n-      \n+\n       // We don't quite have enough stuff cached; re-parse the LSDA.\n       parse_lsda_header (0, xh_lsda, &info);\n-      \n+\n       // If this new exception meets the exception spec, allow it.\n       if (check_exception_spec (&info, new_xh->exceptionType,\n \t\t\t\tnew_ptr, xh_switch_value))\n \t__throw_exception_again;\n-      \n+\n       // If the exception spec allows std::bad_exception, throw that.\n       // We don't have a thrown object to compare against, but since\n       // bad_exception doesn't have virtual bases, that's OK; just pass 0.\n@@ -479,6 +506,7 @@ __cxa_call_unexpected (void *exc_obj_in)\n       if (check_exception_spec (&info, &bad_exc, 0, xh_switch_value))\n \tthrow std::bad_exception();\n #endif   \n+\n       // Otherwise, die.\n       __terminate (xh_terminate_handler);\n     }"}, {"sha": "4fe4cd3a9760f55957d121683150b5913ef70d1a", "filename": "libstdc++-v3/libsupc++/eh_throw.cc", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a944ceb94a99f5a271e2bd84a5a922858e5f699f/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_throw.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a944ceb94a99f5a271e2bd84a5a922858e5f699f/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_throw.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_throw.cc?ref=a944ceb94a99f5a271e2bd84a5a922858e5f699f", "patch": "@@ -1,5 +1,5 @@\n // -*- C++ -*- Exception handling routines for throwing.\n-// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2003 Free Software Foundation, Inc.\n //\n // This file is part of GNU CC.\n //\n@@ -90,12 +90,15 @@ __cxa_rethrow ()\n   if (header)\n     {\n       // Tell __cxa_end_catch this is a rethrow.\n-      header->handlerCount = -header->handlerCount;\n+      if (header->unwindHeader.exception_class != __gxx_exception_class)\n+\tglobals->caughtExceptions = 0;\n+      else\n+\theader->handlerCount = -header->handlerCount;\n \n #ifdef _GLIBCPP_SJLJ_EXCEPTIONS\n-      _Unwind_SjLj_RaiseException (&header->unwindHeader);\n+      _Unwind_SjLj_Resume_or_Rethrow (&header->unwindHeader);\n #else\n-      _Unwind_RaiseException (&header->unwindHeader);\n+      _Unwind_Resume_or_Rethrow (&header->unwindHeader);\n #endif\n   \n       // Some sort of unwinding error.  Note that terminate is a handler."}]}