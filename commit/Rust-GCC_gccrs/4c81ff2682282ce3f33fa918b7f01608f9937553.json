{"sha": "4c81ff2682282ce3f33fa918b7f01608f9937553", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGM4MWZmMjY4MjI4MmNlM2YzM2ZhOTE4YjdmMDE2MDhmOTkzNzU1Mw==", "commit": {"author": {"name": "Ulrich Weigand", "email": "uweigand@de.ibm.com", "date": "2011-01-03T18:02:35Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2011-01-03T18:02:35Z"}, "message": "vector-shift2.c (schar): Define.\n\n\t* gcc.dg/torture/vector-shift2.c (schar): Define.\n\t(main): Always use schar or uchar instead of plain \"char\" to avoid\n\tdependencies on implementation-defined char signedness.\n\nFrom-SVN: r168437", "tree": {"sha": "433e824f1b3045b8e862fd85c57b6bf2ecfdd961", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/433e824f1b3045b8e862fd85c57b6bf2ecfdd961"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c81ff2682282ce3f33fa918b7f01608f9937553", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c81ff2682282ce3f33fa918b7f01608f9937553", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c81ff2682282ce3f33fa918b7f01608f9937553", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c81ff2682282ce3f33fa918b7f01608f9937553/comments", "author": null, "committer": null, "parents": [{"sha": "bfb194f15f7a95f91ed0db606dd7b6a4486d2df3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfb194f15f7a95f91ed0db606dd7b6a4486d2df3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bfb194f15f7a95f91ed0db606dd7b6a4486d2df3"}], "stats": {"total": 37, "additions": 22, "deletions": 15}, "files": [{"sha": "11e75bc159b0e3fae821d3567031fa4fb3a195f3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c81ff2682282ce3f33fa918b7f01608f9937553/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c81ff2682282ce3f33fa918b7f01608f9937553/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4c81ff2682282ce3f33fa918b7f01608f9937553", "patch": "@@ -1,3 +1,9 @@\n+2011-01-03  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n+\n+\t* gcc.dg/torture/vector-shift2.c (schar): Define.\n+\t(main): Always use schar or uchar instead of plain \"char\" to avoid\n+\tdependencies on implementation-defined char signedness.\n+\n 2011-01-03  Martin Jambor  <mjambor@suse.cz>\n \n \tPR tree-optimization/46801"}, {"sha": "0e8a0eb2455d47d32116745fe5b7af63845612dc", "filename": "gcc/testsuite/gcc.dg/torture/vector-shift2.c", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c81ff2682282ce3f33fa918b7f01608f9937553/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fvector-shift2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c81ff2682282ce3f33fa918b7f01608f9937553/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fvector-shift2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fvector-shift2.c?ref=4c81ff2682282ce3f33fa918b7f01608f9937553", "patch": "@@ -4,6 +4,7 @@\n __attribute__((vector_size((elcount)*sizeof(type)))) type\n \n #define vidx(type, vec, idx) (*((type *) &(vec) + idx))\n+#define schar signed char\n #define uchar unsigned char\n \n #define ch14 1,2,3,4\n@@ -12,43 +13,43 @@ __attribute__((vector_size((elcount)*sizeof(type)))) type\n \n int main (int argc, char *argv[]) {\n     vector(16, uchar) vuchar  = { ch14, ch14, ch14, ch14};\n-    vector(16,  char) vchar0  = { ch1, ch1, ch1, ch1};\n-    vector(16,  char) vchar1  = { chm1, chm1, chm1, chm1};\n+    vector(16, schar) vchar0  = { ch1, ch1, ch1, ch1};\n+    vector(16, schar) vchar1  = { chm1, chm1, chm1, chm1};\n \n-    vector(16,  char) i1, i2, i3;\n+    vector(16, schar) i1, i2, i3;\n     vector(16, uchar) u1, u2, u3;\n \n     i1 = vchar1<< vchar0;\n     \n-    if (vidx(char, i1, 0) != ((char)-1 << (char)1))\n+    if (vidx(schar, i1, 0) != ((schar)-1 << (schar)1))\n         __builtin_abort ();\n-    if (vidx(char, i1, 1) != ((char)-1 << (char)1))\n+    if (vidx(schar, i1, 1) != ((schar)-1 << (schar)1))\n         __builtin_abort ();\n-    if (vidx(char, i1, 2) != ((char)-1 << (char)1))\n+    if (vidx(schar, i1, 2) != ((schar)-1 << (schar)1))\n         __builtin_abort ();\n-    if (vidx(char, i1, 3) != ((char)-1 << (char)1))\n+    if (vidx(schar, i1, 3) != ((schar)-1 << (schar)1))\n         __builtin_abort ();\n     u1 = vuchar << vchar0;\n \n-    if (vidx(char, u1, 0) != ((uchar)1  << (char)1))\n+    if (vidx(uchar, u1, 0) != ((uchar)1  << (schar)1))\n         __builtin_abort ();\n-    if (vidx(char, u1, 1) != ((uchar)2  << (char)1))\n+    if (vidx(uchar, u1, 1) != ((uchar)2  << (schar)1))\n         __builtin_abort ();\n-    if (vidx(char, u1, 2) != ((uchar)3  << (char)1))\n+    if (vidx(uchar, u1, 2) != ((uchar)3  << (schar)1))\n         __builtin_abort ();\n-    if (vidx(char, u1, 3) != ((uchar)4  << (char)1))\n+    if (vidx(uchar, u1, 3) != ((uchar)4  << (schar)1))\n         __builtin_abort ();\n \n     \n     i2 = vchar1 >> vuchar;\n \n-    if (vidx(char, i2, 0) != ((char)-1  >> (uchar)1))\n+    if (vidx(schar, i2, 0) != ((schar)-1  >> (uchar)1))\n         __builtin_abort ();\n-    if (vidx(char, i2, 1) != ((char)-1  >> (uchar)2))\n+    if (vidx(schar, i2, 1) != ((schar)-1  >> (uchar)2))\n         __builtin_abort ();\n-    if (vidx(char, i2, 2) != ((char)-1  >> (uchar)3))\n+    if (vidx(schar, i2, 2) != ((schar)-1  >> (uchar)3))\n         __builtin_abort ();\n-    if (vidx(char, i2, 3) != ((char)-1  >> (uchar)4))\n+    if (vidx(schar, i2, 3) != ((schar)-1  >> (uchar)4))\n         __builtin_abort ();\n     \n     vchar1 >>= vuchar;"}]}