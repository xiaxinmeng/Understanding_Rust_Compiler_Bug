{"sha": "808d8de5a2325bc04709e953328c3377493b0557", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODA4ZDhkZTVhMjMyNWJjMDQ3MDllOTUzMzI4YzMzNzc0OTNiMDU1Nw==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2018-10-05T16:45:52Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2018-10-05T16:45:52Z"}, "message": "constraints.md (\"C\"): Do not depend on TARGET_SSE.\n\n\t* config/i386/constraints.md (\"C\"): Do not depend on TARGET_SSE.\n\t* config/i386/predicates.md (nonimm_or_0_operand): Rename\n\tfrom vector_move_operand.  Update all uses.\n\nFrom-SVN: r264877", "tree": {"sha": "aa84a6c9cd013d3c7d9d2ecbe7b50a743a8c4f4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aa84a6c9cd013d3c7d9d2ecbe7b50a743a8c4f4a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/808d8de5a2325bc04709e953328c3377493b0557", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/808d8de5a2325bc04709e953328c3377493b0557", "html_url": "https://github.com/Rust-GCC/gccrs/commit/808d8de5a2325bc04709e953328c3377493b0557", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/808d8de5a2325bc04709e953328c3377493b0557/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f343165275ab5a22546f82f75351a876449309a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f343165275ab5a22546f82f75351a876449309a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f343165275ab5a22546f82f75351a876449309a7"}], "stats": {"total": 161, "additions": 83, "deletions": 78}, "files": [{"sha": "ad39b8396948ca22b662903b79acd8a2a6623e9d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/808d8de5a2325bc04709e953328c3377493b0557/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/808d8de5a2325bc04709e953328c3377493b0557/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=808d8de5a2325bc04709e953328c3377493b0557", "patch": "@@ -1,3 +1,9 @@\n+2018-10-05  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/constraints.md (\"C\"): Do not depend on TARGET_SSE.\n+\t* config/i386/predicates.md (nonimm_or_0_operand): Rename\n+\tfrom vector_move_operand.  Update all uses.\n+\n 2018-10-05  Martin Sebor  <msebor@redhat.com>\n \n \tPR tree-optimization/87490"}, {"sha": "41b8690aeaff4bb1272e331f171dc44c597524a9", "filename": "gcc/config/i386/constraints.md", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/808d8de5a2325bc04709e953328c3377493b0557/gcc%2Fconfig%2Fi386%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/808d8de5a2325bc04709e953328c3377493b0557/gcc%2Fconfig%2Fi386%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fconstraints.md?ref=808d8de5a2325bc04709e953328c3377493b0557", "patch": "@@ -254,10 +254,9 @@\n \n ;; This can theoretically be any mode's CONST0_RTX.\n (define_constraint \"C\"\n-  \"SSE constant zero operand.\"\n-  (and (match_test \"TARGET_SSE\")\n-       (ior (match_test \"op == const0_rtx\")\n-\t    (match_operand 0 \"const0_operand\"))))\n+  \"Constant zero operand.\"\n+  (ior (match_test \"op == const0_rtx\")\n+       (match_operand 0 \"const0_operand\")))\n \n ;; Constant-or-symbol-reference constraints.\n "}, {"sha": "b8d4589bd0c8c0785058ee86195c2a1cd5d61257", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/808d8de5a2325bc04709e953328c3377493b0557/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/808d8de5a2325bc04709e953328c3377493b0557/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=808d8de5a2325bc04709e953328c3377493b0557", "patch": "@@ -9816,7 +9816,7 @@\n (define_insn_and_split \"copysign<mode>3_const\"\n   [(set (match_operand:CSGNMODE 0 \"register_operand\" \"=Yv\")\n \t(unspec:CSGNMODE\n-\t  [(match_operand:<CSGNVMODE> 1 \"vector_move_operand\" \"YvmC\")\n+\t  [(match_operand:<CSGNVMODE> 1 \"nonimm_or_0_operand\" \"YvmC\")\n \t   (match_operand:CSGNMODE 2 \"register_operand\" \"0\")\n \t   (match_operand:<CSGNVMODE> 3 \"nonimmediate_operand\" \"Yvm\")]\n \t  UNSPEC_COPYSIGN))]"}, {"sha": "539671ce4be5be805a70e4a03802cfd4c1223507", "filename": "gcc/config/i386/mmx.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/808d8de5a2325bc04709e953328c3377493b0557/gcc%2Fconfig%2Fi386%2Fmmx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/808d8de5a2325bc04709e953328c3377493b0557/gcc%2Fconfig%2Fi386%2Fmmx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmx.md?ref=808d8de5a2325bc04709e953328c3377493b0557", "patch": "@@ -79,7 +79,7 @@\n (define_insn \"*mov<mode>_internal\"\n   [(set (match_operand:MMXMODE 0 \"nonimmediate_operand\"\n     \"=r ,o ,r,r ,m ,?!y,!y,?!y,m  ,r  ,?!y,v,v,v,m,r,v,!y,*x\")\n-\t(match_operand:MMXMODE 1 \"vector_move_operand\"\n+\t(match_operand:MMXMODE 1 \"nonimm_or_0_operand\"\n     \"rCo,rC,C,rm,rC,C  ,!y,m  ,?!y,?!y,r  ,C,v,m,v,v,r,*x,!y\"))]\n   \"TARGET_MMX\n    && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n@@ -582,7 +582,7 @@\n   [(set (match_operand:V2SF 0 \"register_operand\"     \"=y,y\")\n \t(vec_concat:V2SF\n \t  (match_operand:SF 1 \"nonimmediate_operand\" \" 0,rm\")\n-\t  (match_operand:SF 2 \"vector_move_operand\"  \"ym,C\")))]\n+\t  (match_operand:SF 2 \"nonimm_or_0_operand\"  \"ym,C\")))]\n   \"TARGET_MMX && !TARGET_SSE\"\n   \"@\n    punpckldq\\t{%2, %0|%0, %2}\n@@ -1276,7 +1276,7 @@\n   [(set (match_operand:V2SI 0 \"register_operand\"     \"=y,y\")\n \t(vec_concat:V2SI\n \t  (match_operand:SI 1 \"nonimmediate_operand\" \" 0,rm\")\n-\t  (match_operand:SI 2 \"vector_move_operand\"  \"ym,C\")))]\n+\t  (match_operand:SI 2 \"nonimm_or_0_operand\"  \"ym,C\")))]\n   \"TARGET_MMX && !TARGET_SSE\"\n   \"@\n    punpckldq\\t{%2, %0|%0, %2}"}, {"sha": "bd262d77c6b72e5e4e30cae7997a8c3f33d98dac", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/808d8de5a2325bc04709e953328c3377493b0557/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/808d8de5a2325bc04709e953328c3377493b0557/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=808d8de5a2325bc04709e953328c3377493b0557", "patch": "@@ -1042,11 +1042,6 @@\n   (ior (match_operand 0 \"register_operand\")\n        (match_operand 0 \"vector_memory_operand\")))\n \n-; Return true when OP is operand acceptable for standard SSE move.\n-(define_predicate \"vector_move_operand\"\n-  (ior (match_operand 0 \"nonimmediate_operand\")\n-       (match_operand 0 \"const0_operand\")))\n-\n ;; Return true when OP is either nonimmediate operand, or any\n ;; CONST_VECTOR.\n (define_predicate \"nonimmediate_or_const_vector_operand\"\n@@ -1063,6 +1058,11 @@\n   (ior (match_operand 0 \"register_operand\")\n        (match_operand 0 \"const0_operand\")))\n \n+; Return true when OP is a nonimmediate or zero.\n+(define_predicate \"nonimm_or_0_operand\"\n+  (ior (match_operand 0 \"nonimmediate_operand\")\n+       (match_operand 0 \"const0_operand\")))\n+\n (define_predicate \"norex_memory_operand\"\n   (and (match_operand 0 \"memory_operand\")\n        (not (match_test \"x86_extended_reg_mentioned_p (op)\"))))"}, {"sha": "692959b1666131335c19b8fef1d6057785dd3a4d", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 62, "deletions": 62, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/808d8de5a2325bc04709e953328c3377493b0557/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/808d8de5a2325bc04709e953328c3377493b0557/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=808d8de5a2325bc04709e953328c3377493b0557", "patch": "@@ -1097,7 +1097,7 @@\n   [(set (match_operand:V48_AVX512VL 0 \"register_operand\" \"=v,v\")\n \t(vec_merge:V48_AVX512VL\n \t  (match_operand:V48_AVX512VL 1 \"nonimmediate_operand\" \"v,m\")\n-\t  (match_operand:V48_AVX512VL 2 \"vector_move_operand\" \"0C,0C\")\n+\t  (match_operand:V48_AVX512VL 2 \"nonimm_or_0_operand\" \"0C,0C\")\n \t  (match_operand:<avx512fmaskmode> 3 \"register_operand\" \"Yk,Yk\")))]\n   \"TARGET_AVX512F\"\n {\n@@ -1125,7 +1125,7 @@\n   [(set (match_operand:VI12_AVX512VL 0 \"register_operand\" \"=v,v\")\n \t(vec_merge:VI12_AVX512VL\n \t  (match_operand:VI12_AVX512VL 1 \"nonimmediate_operand\" \"v,m\")\n-\t  (match_operand:VI12_AVX512VL 2 \"vector_move_operand\" \"0C,0C\")\n+\t  (match_operand:VI12_AVX512VL 2 \"nonimm_or_0_operand\" \"0C,0C\")\n \t  (match_operand:<avx512fmaskmode> 3 \"register_operand\" \"Yk,Yk\")))]\n   \"TARGET_AVX512BW\"\n   \"vmovdqu<ssescalarsize>\\t{%1, %0%{%3%}%N2|%0%{%3%}%N2, %1}\"\n@@ -1836,7 +1836,7 @@\n \t    (unspec:VF_128\n \t      [(match_operand:VF_128 1 \"nonimmediate_operand\" \"vm\")]\n \t    UNSPEC_RCP14)\n-\t      (match_operand:VF_128 3 \"vector_move_operand\" \"0C\")\n+\t      (match_operand:VF_128 3 \"nonimm_or_0_operand\" \"0C\")\n \t    (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"Yk\"))\n \t  (match_operand:VF_128 2 \"register_operand\" \"v\")\n \t  (const_int 1)))]\n@@ -1962,7 +1962,7 @@\n \t    (unspec:VF_128\n \t      [(match_operand:VF_128 1 \"nonimmediate_operand\" \"vm\")]\n \t      UNSPEC_RSQRT14)\n-\t      (match_operand:VF_128 3 \"vector_move_operand\" \"0C\")\n+\t      (match_operand:VF_128 3 \"nonimm_or_0_operand\" \"0C\")\n \t      (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"Yk\"))\n \t  (match_operand:VF_128 2 \"register_operand\" \"v\")\n \t  (const_int 1)))]\n@@ -3062,23 +3062,23 @@\n   [(set (match_operand:V48_AVX512VL 0 \"register_operand\")\n \t(vec_merge:V48_AVX512VL\n \t  (match_operand:V48_AVX512VL 1 \"nonimmediate_operand\")\n-\t  (match_operand:V48_AVX512VL 2 \"vector_move_operand\")\n+\t  (match_operand:V48_AVX512VL 2 \"nonimm_or_0_operand\")\n \t  (match_operand:<avx512fmaskmode> 3 \"register_operand\")))]\n   \"TARGET_AVX512F\")\n \n (define_expand \"vcond_mask_<mode><avx512fmaskmodelower>\"\n   [(set (match_operand:VI12_AVX512VL 0 \"register_operand\")\n \t(vec_merge:VI12_AVX512VL\n \t  (match_operand:VI12_AVX512VL 1 \"nonimmediate_operand\")\n-\t  (match_operand:VI12_AVX512VL 2 \"vector_move_operand\")\n+\t  (match_operand:VI12_AVX512VL 2 \"nonimm_or_0_operand\")\n \t  (match_operand:<avx512fmaskmode> 3 \"register_operand\")))]\n   \"TARGET_AVX512BW\")\n \n (define_expand \"vcond_mask_<mode><sseintvecmodelower>\"\n   [(set (match_operand:VI_256 0 \"register_operand\")\n \t(vec_merge:VI_256\n \t  (match_operand:VI_256 1 \"nonimmediate_operand\")\n-\t  (match_operand:VI_256 2 \"vector_move_operand\")\n+\t  (match_operand:VI_256 2 \"nonimm_or_0_operand\")\n \t  (match_operand:<sseintvecmode> 3 \"register_operand\")))]\n   \"TARGET_AVX2\"\n {\n@@ -3091,7 +3091,7 @@\n   [(set (match_operand:VI124_128 0 \"register_operand\")\n \t(vec_merge:VI124_128\n \t  (match_operand:VI124_128 1 \"vector_operand\")\n-\t  (match_operand:VI124_128 2 \"vector_move_operand\")\n+\t  (match_operand:VI124_128 2 \"nonimm_or_0_operand\")\n \t  (match_operand:<sseintvecmode> 3 \"register_operand\")))]\n   \"TARGET_SSE2\"\n {\n@@ -3104,7 +3104,7 @@\n   [(set (match_operand:V2DI 0 \"register_operand\")\n \t(vec_merge:V2DI\n \t  (match_operand:V2DI 1 \"vector_operand\")\n-\t  (match_operand:V2DI 2 \"vector_move_operand\")\n+\t  (match_operand:V2DI 2 \"nonimm_or_0_operand\")\n \t  (match_operand:V2DI 3 \"register_operand\")))]\n   \"TARGET_SSE4_2\"\n {\n@@ -3117,7 +3117,7 @@\n   [(set (match_operand:VF_256 0 \"register_operand\")\n \t(vec_merge:VF_256\n \t  (match_operand:VF_256 1 \"nonimmediate_operand\")\n-\t  (match_operand:VF_256 2 \"vector_move_operand\")\n+\t  (match_operand:VF_256 2 \"nonimm_or_0_operand\")\n \t  (match_operand:<sseintvecmode> 3 \"register_operand\")))]\n   \"TARGET_AVX\"\n {\n@@ -3130,7 +3130,7 @@\n   [(set (match_operand:VF_128 0 \"register_operand\")\n \t(vec_merge:VF_128\n \t  (match_operand:VF_128 1 \"vector_operand\")\n-\t  (match_operand:VF_128 2 \"vector_move_operand\")\n+\t  (match_operand:VF_128 2 \"nonimm_or_0_operand\")\n \t  (match_operand:<sseintvecmode> 3 \"register_operand\")))]\n   \"TARGET_SSE\"\n {\n@@ -4930,7 +4930,7 @@\n         (vec_merge:V2SF\n \t        (any_float:V2SF (match_operand:V2DI 1 \"nonimmediate_operand\" \"vm\"))\n             (vec_select:V2SF\n-                (match_operand:V4SF 2 \"vector_move_operand\" \"0C\")\n+                (match_operand:V4SF 2 \"nonimm_or_0_operand\" \"0C\")\n                 (parallel [(const_int 0) (const_int 1)]))\n             (match_operand:QI 3 \"register_operand\" \"Yk\"))\n \t    (const_vector:V2SF [(const_int 0) (const_int 0)])))]\n@@ -6366,7 +6366,7 @@\n \t      (match_operand:V4SF 2 \"nonimmediate_operand\" \"vm\"))\n \t    (parallel [(const_int 0) (const_int 4)\n \t\t      (const_int 1) (const_int 5)]))\n-\t  (match_operand:V4SF 3 \"vector_move_operand\" \"0C\")\n+\t  (match_operand:V4SF 3 \"nonimm_or_0_operand\" \"0C\")\n \t  (match_operand:QI 4 \"register_operand\" \"Yk\")))]\n   \"TARGET_AVX512VL\"\n   \"vunpcklps\\t{%2, %1, %0%{%4%}%N3|%0%{%4%}%N3, %1, %2}\"\n@@ -6622,7 +6622,7 @@\n \t               (match_operand 4 \"const_0_to_3_operand\")\n \t               (match_operand 5 \"const_4_to_7_operand\")\n \t               (match_operand 6 \"const_4_to_7_operand\")]))\n-      (match_operand:V4SF 7 \"vector_move_operand\" \"0C\")\n+      (match_operand:V4SF 7 \"nonimm_or_0_operand\" \"0C\")\n       (match_operand:QI 8 \"register_operand\" \"Yk\")))]\n   \"TARGET_AVX512VL\"\n {\n@@ -6844,7 +6844,7 @@\n \t(vec_concat:V2SF\n \t  (match_operand:SF 1 \"nonimmediate_operand\"\n \t  \"  0, 0,Yv, 0,0, v,m, 0 , m\")\n-\t  (match_operand:SF 2 \"vector_move_operand\"\n+\t  (match_operand:SF 2 \"nonimm_or_0_operand\"\n \t  \" Yr,*x,Yv, m,m, m,C,*ym, C\")))]\n   \"TARGET_SSE4_1 && !(MEM_P (operands[1]) && MEM_P (operands[2]))\"\n   \"@\n@@ -6936,7 +6936,7 @@\n \t  (vec_duplicate:VI4F_128\n \t    (match_operand:<ssescalarmode> 2 \"general_operand\"\n \t  \" Yr,*x,v,m,r ,m,x,v,*rm,*rm,*rm,!x,!*re,!*fF\"))\n-\t  (match_operand:VI4F_128 1 \"vector_move_operand\"\n+\t  (match_operand:VI4F_128 1 \"nonimm_or_0_operand\"\n \t  \" C , C,C,C,C ,C,0,v,0  ,0  ,x  ,0 ,0   ,0\")\n \t  (const_int 1)))]\n   \"TARGET_SSE\"\n@@ -7524,7 +7524,7 @@\n   [(match_operand:<ssehalfvecmode> 0 \"nonimmediate_operand\")\n    (match_operand:VI48F_256 1 \"register_operand\")\n    (match_operand:SI 2 \"const_0_to_1_operand\")\n-   (match_operand:<ssehalfvecmode> 3 \"vector_move_operand\")\n+   (match_operand:<ssehalfvecmode> 3 \"nonimm_or_0_operand\")\n    (match_operand:QI 4 \"register_operand\")]\n   \"TARGET_AVX512DQ && TARGET_AVX512VL\"\n {\n@@ -7767,7 +7767,7 @@\n \t    (match_operand:VI4F_256 1 \"register_operand\" \"v\")\n \t    (parallel [(const_int 4) (const_int 5)\n \t\t       (const_int 6) (const_int 7)]))\n-\t  (match_operand:<ssehalfvecmode> 2 \"vector_move_operand\" \"0C\")\n+\t  (match_operand:<ssehalfvecmode> 2 \"nonimm_or_0_operand\" \"0C\")\n \t  (match_operand:<avx512fmaskmode> 3 \"register_operand\" \"Yk\")))]\n   \"TARGET_AVX512VL\"\n   \"vextract<shuffletype>32x4\\t{$0x1, %1, %0%{%3%}%N2|%0%{%3%}%N2, %1, 0x1}\"\n@@ -8114,7 +8114,7 @@\n \t      (match_operand:V2DF 1 \"register_operand\" \"v\")\n \t      (match_operand:V2DF 2 \"nonimmediate_operand\" \"vm\"))\n \t    (parallel [(const_int 1) (const_int 3)]))\n-\t  (match_operand:V2DF 3 \"vector_move_operand\" \"0C\")\n+\t  (match_operand:V2DF 3 \"nonimm_or_0_operand\" \"0C\")\n \t  (match_operand:QI 4 \"register_operand\" \"Yk\")))]\n   \"TARGET_AVX512VL\"\n   \"vunpckhpd\\t{%2, %1, %0%{%4%}%N3|%0%{%4%}%N3, %1, %2}\"\n@@ -8276,7 +8276,7 @@\n \t      (match_operand:V2DF 1 \"register_operand\" \"v\")\n \t      (match_operand:V2DF 2 \"nonimmediate_operand\" \"vm\"))\n \t    (parallel [(const_int 0) (const_int 2)]))\n-\t  (match_operand:V2DF 3 \"vector_move_operand\" \"0C\")\n+\t  (match_operand:V2DF 3 \"nonimm_or_0_operand\" \"0C\")\n \t  (match_operand:QI 4 \"register_operand\" \"Yk\")))]\n   \"TARGET_AVX512VL\"\n   \"vunpcklpd\\t{%2, %1, %0%{%4%}%N3|%0%{%4%}%N3, %1, %2}\"\n@@ -8793,7 +8793,7 @@\n \t      (match_operand:V2DF 2 \"nonimmediate_operand\" \"vm\"))\n \t    (parallel [(match_operand 3 \"const_0_to_1_operand\")\n \t\t           (match_operand 4 \"const_2_to_3_operand\")]))\n-      (match_operand:V2DF 5 \"vector_move_operand\" \"0C\")\n+      (match_operand:V2DF 5 \"nonimm_or_0_operand\" \"0C\")\n       (match_operand:QI 6 \"register_operand\" \"Yk\")))]\n   \"TARGET_AVX512VL\"\n {\n@@ -9123,7 +9123,7 @@\n \t  (match_operand:DF 2 \"nonimmediate_operand\"\n \t  \"vm,m,m,x,v,0,0,v,x,*f,r\")\n \t  (vec_select:DF\n-\t    (match_operand:V2DF 1 \"vector_move_operand\"\n+\t    (match_operand:V2DF 1 \"nonimm_or_0_operand\"\n \t  \" C,0,v,0,v,x,o,o,0,0 ,0\")\n \t    (parallel [(const_int 1)]))))]\n   \"TARGET_SSE2 && !(MEM_P (operands[1]) && MEM_P (operands[2]))\"\n@@ -9237,7 +9237,7 @@\n   [(set (match_operand:V2DF 0 \"register_operand\"     \"=x,x,v,x,v,x,x, v,x,x\")\n \t(vec_concat:V2DF\n \t  (match_operand:DF 1 \"nonimmediate_operand\" \" 0,x,v,m,m,0,x,xm,0,0\")\n-\t  (match_operand:DF 2 \"vector_move_operand\"  \" x,x,v,1,1,m,m, C,x,m\")))]\n+\t  (match_operand:DF 2 \"nonimm_or_0_operand\"  \" x,x,v,1,1,m,m, C,x,m\")))]\n   \"TARGET_SSE\n    && (!(MEM_P (operands[1]) && MEM_P (operands[2]))\n        || (TARGET_SSE3 && rtx_equal_p (operands[1], operands[2])))\"\n@@ -9329,7 +9329,7 @@\n     (vec_merge:PMOV_DST_MODE_1\n       (any_truncate:PMOV_DST_MODE_1\n         (match_operand:<pmov_src_mode> 1 \"register_operand\" \"v,v\"))\n-      (match_operand:PMOV_DST_MODE_1 2 \"vector_move_operand\" \"0C,0\")\n+      (match_operand:PMOV_DST_MODE_1 2 \"nonimm_or_0_operand\" \"0C,0\")\n       (match_operand:<avx512fmaskmode> 3 \"register_operand\" \"Yk,Yk\")))]\n   \"TARGET_AVX512F\"\n   \"vpmov<trunsuffix><pmov_suff_1>\\t{%1, %0%{%3%}%N2|%0%{%3%}%N2, %1}\"\n@@ -9363,7 +9363,7 @@\n     (vec_merge:V32QI\n       (any_truncate:V32QI\n         (match_operand:V32HI 1 \"register_operand\" \"v,v\"))\n-      (match_operand:V32QI 2 \"vector_move_operand\" \"0C,0\")\n+      (match_operand:V32QI 2 \"nonimm_or_0_operand\" \"0C,0\")\n       (match_operand:SI 3 \"register_operand\" \"Yk,Yk\")))]\n   \"TARGET_AVX512BW\"\n   \"vpmov<trunsuffix>wb\\t{%1, %0%{%3%}%N2|%0%{%3%}%N2, %1}\"\n@@ -9402,7 +9402,7 @@\n     (vec_merge:PMOV_DST_MODE_2\n       (any_truncate:PMOV_DST_MODE_2\n         (match_operand:<ssedoublemode> 1 \"register_operand\" \"v,v\"))\n-      (match_operand:PMOV_DST_MODE_2 2 \"vector_move_operand\" \"0C,0\")\n+      (match_operand:PMOV_DST_MODE_2 2 \"nonimm_or_0_operand\" \"0C,0\")\n       (match_operand:<avx512fmaskmode> 3 \"register_operand\" \"Yk,Yk\")))]\n   \"TARGET_AVX512VL\"\n   \"vpmov<trunsuffix><pmov_suff_2>\\t{%1, %0%{%3%}%N2|%0%{%3%}%N2, %1}\"\n@@ -9468,7 +9468,7 @@\n         (any_truncate:V2QI\n           (match_operand:V2DI 1 \"register_operand\" \"v\"))\n         (vec_select:V2QI\n-          (match_operand:V16QI 2 \"vector_move_operand\" \"0C\")\n+          (match_operand:V16QI 2 \"nonimm_or_0_operand\" \"0C\")\n           (parallel [(const_int 0) (const_int 1)]))\n         (match_operand:QI 3 \"register_operand\" \"Yk\"))\n       (const_vector:V14QI [(const_int 0) (const_int 0)\n@@ -9558,7 +9558,7 @@\n         (any_truncate:V4QI\n           (match_operand:VI4_128_8_256 1 \"register_operand\" \"v\"))\n         (vec_select:V4QI\n-          (match_operand:V16QI 2 \"vector_move_operand\" \"0C\")\n+          (match_operand:V16QI 2 \"nonimm_or_0_operand\" \"0C\")\n           (parallel [(const_int 0) (const_int 1)\n                      (const_int 2) (const_int 3)]))\n         (match_operand:QI 3 \"register_operand\" \"Yk\"))\n@@ -9649,7 +9649,7 @@\n         (any_truncate:V8QI\n           (match_operand:VI2_128_BW_4_256 1 \"register_operand\" \"v\"))\n         (vec_select:V8QI\n-          (match_operand:V16QI 2 \"vector_move_operand\" \"0C\")\n+          (match_operand:V16QI 2 \"nonimm_or_0_operand\" \"0C\")\n           (parallel [(const_int 0) (const_int 1)\n                      (const_int 2) (const_int 3)\n                      (const_int 4) (const_int 5)\n@@ -9755,7 +9755,7 @@\n         (any_truncate:V4HI\n           (match_operand:VI4_128_8_256 1 \"register_operand\" \"v\"))\n         (vec_select:V4HI\n-          (match_operand:V8HI 2 \"vector_move_operand\" \"0C\")\n+          (match_operand:V8HI 2 \"nonimm_or_0_operand\" \"0C\")\n           (parallel [(const_int 0) (const_int 1)\n                      (const_int 2) (const_int 3)]))\n         (match_operand:QI 3 \"register_operand\" \"Yk\"))\n@@ -9834,7 +9834,7 @@\n         (any_truncate:V2HI\n           (match_operand:V2DI 1 \"register_operand\" \"v\"))\n         (vec_select:V2HI\n-          (match_operand:V8HI 2 \"vector_move_operand\" \"0C\")\n+          (match_operand:V8HI 2 \"nonimm_or_0_operand\" \"0C\")\n           (parallel [(const_int 0) (const_int 1)]))\n         (match_operand:QI 3 \"register_operand\" \"Yk\"))\n       (const_vector:V6HI [(const_int 0) (const_int 0)\n@@ -9919,7 +9919,7 @@\n         (any_truncate:V2SI\n           (match_operand:V2DI 1 \"register_operand\" \"v\"))\n         (vec_select:V2SI\n-          (match_operand:V4SI 2 \"vector_move_operand\" \"0C\")\n+          (match_operand:V4SI 2 \"nonimm_or_0_operand\" \"0C\")\n           (parallel [(const_int 0) (const_int 1)]))\n         (match_operand:QI 3 \"register_operand\" \"Yk\"))\n       (const_vector:V2SI [(const_int 0) (const_int 0)])))]\n@@ -10004,7 +10004,7 @@\n         (any_truncate:V8QI\n           (match_operand:V8DI 1 \"register_operand\" \"v\"))\n         (vec_select:V8QI\n-          (match_operand:V16QI 2 \"vector_move_operand\" \"0C\")\n+          (match_operand:V16QI 2 \"nonimm_or_0_operand\" \"0C\")\n           (parallel [(const_int 0) (const_int 1)\n                      (const_int 2) (const_int 3)\n                      (const_int 4) (const_int 5)\n@@ -10095,7 +10095,7 @@\n \t  (plusminus:VI48_AVX512VL\n \t    (match_operand:VI48_AVX512VL 1 \"nonimmediate_operand\")\n \t    (match_operand:VI48_AVX512VL 2 \"nonimmediate_operand\"))\n-\t  (match_operand:VI48_AVX512VL 3 \"vector_move_operand\")\n+\t  (match_operand:VI48_AVX512VL 3 \"nonimm_or_0_operand\")\n \t  (match_operand:<avx512fmaskmode> 4 \"register_operand\")))]\n   \"TARGET_AVX512F\"\n   \"ix86_fixup_binary_operands_no_copy (<CODE>, <MODE>mode, operands);\")\n@@ -10106,7 +10106,7 @@\n \t  (plusminus:VI12_AVX512VL\n \t    (match_operand:VI12_AVX512VL 1 \"nonimmediate_operand\")\n \t    (match_operand:VI12_AVX512VL 2 \"nonimmediate_operand\"))\n-\t  (match_operand:VI12_AVX512VL 3 \"vector_move_operand\")\n+\t  (match_operand:VI12_AVX512VL 3 \"nonimm_or_0_operand\")\n \t  (match_operand:<avx512fmaskmode> 4 \"register_operand\")))]\n   \"TARGET_AVX512BW\"\n   \"ix86_fixup_binary_operands_no_copy (<CODE>, <MODE>mode, operands);\")\n@@ -10132,7 +10132,7 @@\n \t  (plusminus:VI48_AVX512VL\n \t    (match_operand:VI48_AVX512VL 1 \"nonimmediate_operand\" \"<comm>v\")\n \t    (match_operand:VI48_AVX512VL 2 \"nonimmediate_operand\" \"vm\"))\n-\t  (match_operand:VI48_AVX512VL 3 \"vector_move_operand\" \"0C\")\n+\t  (match_operand:VI48_AVX512VL 3 \"nonimm_or_0_operand\" \"0C\")\n \t  (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"Yk\")))]\n   \"TARGET_AVX512F && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n   \"vp<plusminus_mnemonic><ssemodesuffix>\\t{%2, %1, %0%{%4%}%N3|%0%{%4%}%N3, %1, %2}\"\n@@ -10146,7 +10146,7 @@\n \t  (plusminus:VI12_AVX512VL\n \t    (match_operand:VI12_AVX512VL 1 \"nonimmediate_operand\" \"<comm>v\")\n \t    (match_operand:VI12_AVX512VL 2 \"nonimmediate_operand\" \"vm\"))\n-\t  (match_operand:VI12_AVX512VL 3 \"vector_move_operand\" \"0C\")\n+\t  (match_operand:VI12_AVX512VL 3 \"nonimm_or_0_operand\" \"0C\")\n \t  (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"Yk\")))]\n   \"TARGET_AVX512BW && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n   \"vp<plusminus_mnemonic><ssemodesuffix>\\t{%2, %1, %0%{%4%}%N3|%0%{%4%}%N3, %1, %2}\"\n@@ -11027,7 +11027,7 @@\n \t  (maxmin:VI48_AVX512VL\n \t    (match_operand:VI48_AVX512VL 1 \"nonimmediate_operand\")\n \t    (match_operand:VI48_AVX512VL 2 \"nonimmediate_operand\"))\n-\t  (match_operand:VI48_AVX512VL 3 \"vector_move_operand\")\n+\t  (match_operand:VI48_AVX512VL 3 \"nonimm_or_0_operand\")\n \t  (match_operand:<avx512fmaskmode> 4 \"register_operand\")))]\n   \"TARGET_AVX512F\"\n   \"ix86_fixup_binary_operands_no_copy (<CODE>, <MODE>mode, operands);\")\n@@ -11303,8 +11303,8 @@\n (define_insn \"<avx512>_eq<mode>3<mask_scalar_merge_name>_1\"\n   [(set (match_operand:<avx512fmaskmode> 0 \"register_operand\" \"=Yk,Yk\")\n \t(unspec:<avx512fmaskmode>\n-\t  [(match_operand:VI12_AVX512VL 1 \"vector_move_operand\" \"%v,v\")\n-\t   (match_operand:VI12_AVX512VL 2 \"vector_move_operand\" \"vm,C\")]\n+\t  [(match_operand:VI12_AVX512VL 1 \"nonimm_or_0_operand\" \"%v,v\")\n+\t   (match_operand:VI12_AVX512VL 2 \"nonimm_or_0_operand\" \"vm,C\")]\n \t  UNSPEC_MASKED_EQ))]\n   \"TARGET_AVX512BW && !(MEM_P (operands[1]) && MEM_P (operands[2]))\"\n   \"@\n@@ -11318,8 +11318,8 @@\n (define_insn \"<avx512>_eq<mode>3<mask_scalar_merge_name>_1\"\n   [(set (match_operand:<avx512fmaskmode> 0 \"register_operand\" \"=Yk,Yk\")\n \t(unspec:<avx512fmaskmode>\n-\t  [(match_operand:VI48_AVX512VL 1 \"vector_move_operand\" \"%v,v\")\n-\t   (match_operand:VI48_AVX512VL 2 \"vector_move_operand\" \"vm,C\")]\n+\t  [(match_operand:VI48_AVX512VL 1 \"nonimm_or_0_operand\" \"%v,v\")\n+\t   (match_operand:VI48_AVX512VL 2 \"nonimm_or_0_operand\" \"vm,C\")]\n \t  UNSPEC_MASKED_EQ))]\n   \"TARGET_AVX512F && !(MEM_P (operands[1]) && MEM_P (operands[2]))\"\n   \"@\n@@ -11641,7 +11641,7 @@\n \t    (not:VI48_AVX512VL\n \t      (match_operand:VI48_AVX512VL 1 \"register_operand\"))\n \t    (match_operand:VI48_AVX512VL 2 \"nonimmediate_operand\"))\n-\t  (match_operand:VI48_AVX512VL 3 \"vector_move_operand\")\n+\t  (match_operand:VI48_AVX512VL 3 \"nonimm_or_0_operand\")\n \t  (match_operand:<avx512fmaskmode> 4 \"register_operand\")))]\n   \"TARGET_AVX512F\")\n \n@@ -11652,7 +11652,7 @@\n \t    (not:VI12_AVX512VL\n \t      (match_operand:VI12_AVX512VL 1 \"register_operand\"))\n \t    (match_operand:VI12_AVX512VL 2 \"nonimmediate_operand\"))\n-\t  (match_operand:VI12_AVX512VL 3 \"vector_move_operand\")\n+\t  (match_operand:VI12_AVX512VL 3 \"nonimm_or_0_operand\")\n \t  (match_operand:<avx512fmaskmode> 4 \"register_operand\")))]\n   \"TARGET_AVX512BW\")\n \n@@ -11768,7 +11768,7 @@\n \t    (not:VI48_AVX512VL\n \t      (match_operand:VI48_AVX512VL 1 \"register_operand\" \"v\"))\n \t    (match_operand:VI48_AVX512VL 2 \"nonimmediate_operand\" \"vm\"))\n-\t  (match_operand:VI48_AVX512VL 3 \"vector_move_operand\" \"0C\")\n+\t  (match_operand:VI48_AVX512VL 3 \"nonimm_or_0_operand\" \"0C\")\n \t  (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"Yk\")))]\n   \"TARGET_AVX512F\"\n   \"vpandn<ssemodesuffix>\\t{%2, %1, %0%{%4%}%N3|%0%{%4%}%N3, %1, %2}\";\n@@ -14008,7 +14008,7 @@\n \t(vec_concat:V2SI\n \t  (match_operand:SI 1 \"nonimmediate_operand\"\n \t  \"  0, 0, x,Yv, 0, 0,Yv,rm,  0,rm\")\n-\t  (match_operand:SI 2 \"vector_move_operand\"\n+\t  (match_operand:SI 2 \"nonimm_or_0_operand\"\n \t  \" rm,rm,rm,rm,Yr,*x,Yv, C,*ym, C\")))]\n   \"TARGET_SSE4_1 && !(MEM_P (operands[1]) && MEM_P (operands[2]))\"\n   \"@\n@@ -14088,7 +14088,7 @@\n \t(vec_concat:V2DI\n \t  (match_operand:DI 1 \"nonimmediate_operand\"\n \t  \"  0, 0,x ,Yv,r,vm,?!*y,0,Yv,0,0,v\")\n-\t  (match_operand:DI 2 \"vector_move_operand\"\n+\t  (match_operand:DI 2 \"nonimm_or_0_operand\"\n \t  \" rm,rm,rm,rm,C ,C ,C ,x,Yv,x,m,m\")))]\n   \"TARGET_SSE\"\n   \"@\n@@ -15049,7 +15049,7 @@\n \t     (match_operand:VI1_AVX512 2 \"nonimmediate_operand\" \"vm\")\n \t     (match_operand:SI 3 \"const_0_to_255_mul_8_operand\" \"n\")]\n \t    UNSPEC_PALIGNR)\n-\t(match_operand:VI1_AVX512 4 \"vector_move_operand\" \"0C\")\n+\t(match_operand:VI1_AVX512 4 \"nonimm_or_0_operand\" \"0C\")\n \t(match_operand:<avx512fmaskmode> 5 \"register_operand\" \"Yk\")))]\n   \"TARGET_AVX512BW && (<MODE_SIZE> == 64 || TARGET_AVX512VL)\"\n {\n@@ -15137,7 +15137,7 @@\n \t(vec_merge:VI48_AVX512VL\n \t  (abs:VI48_AVX512VL\n \t    (match_operand:VI48_AVX512VL 1 \"nonimmediate_operand\" \"vm\"))\n-\t  (match_operand:VI48_AVX512VL 2 \"vector_move_operand\" \"0C\")\n+\t  (match_operand:VI48_AVX512VL 2 \"nonimm_or_0_operand\" \"0C\")\n \t  (match_operand:<avx512fmaskmode> 3 \"register_operand\" \"Yk\")))]\n   \"TARGET_AVX512F\"\n   \"vpabs<ssemodesuffix>\\t{%1, %0%{%3%}%N2|%0%{%3%}%N2, %1}\"\n@@ -15150,7 +15150,7 @@\n \t(vec_merge:VI12_AVX512VL\n \t  (abs:VI12_AVX512VL\n \t    (match_operand:VI12_AVX512VL 1 \"nonimmediate_operand\" \"vm\"))\n-\t  (match_operand:VI12_AVX512VL 2 \"vector_move_operand\" \"0C\")\n+\t  (match_operand:VI12_AVX512VL 2 \"nonimm_or_0_operand\" \"0C\")\n \t  (match_operand:<avx512fmaskmode> 3 \"register_operand\" \"Yk\")))]\n   \"TARGET_AVX512BW\"\n   \"vpabs<ssemodesuffix>\\t{%1, %0%{%3%}%N2|%0%{%3%}%N2, %1}\"\n@@ -17625,7 +17625,7 @@\n   [(match_operand:VI8F_256 0 \"register_operand\")\n    (match_operand:VI8F_256 1 \"nonimmediate_operand\")\n    (match_operand:SI 2 \"const_0_to_255_operand\")\n-   (match_operand:VI8F_256 3 \"vector_move_operand\")\n+   (match_operand:VI8F_256 3 \"nonimm_or_0_operand\")\n    (match_operand:<avx512fmaskmode> 4 \"register_operand\")]\n   \"TARGET_AVX512VL\"\n {\n@@ -17684,7 +17684,7 @@\n   [(match_operand:V8FI 0 \"register_operand\")\n    (match_operand:V8FI 1 \"nonimmediate_operand\")\n    (match_operand:SI 2 \"const_0_to_255_operand\")\n-   (match_operand:V8FI 3 \"vector_move_operand\")\n+   (match_operand:V8FI 3 \"nonimm_or_0_operand\")\n    (match_operand:<avx512fmaskmode> 4 \"register_operand\")]\n   \"TARGET_AVX512F\"\n {\n@@ -18921,7 +18921,7 @@\n   [(set (match_operand:V_256_512 0 \"register_operand\" \"=x,v,x,Yv\")\n \t(vec_concat:V_256_512\n \t  (match_operand:<ssehalfvecmode> 1 \"register_operand\" \"x,v,x,v\")\n-\t  (match_operand:<ssehalfvecmode> 2 \"vector_move_operand\" \"xm,vm,C,C\")))]\n+\t  (match_operand:<ssehalfvecmode> 2 \"nonimm_or_0_operand\" \"xm,vm,C,C\")))]\n   \"TARGET_AVX\"\n {\n   switch (which_alternative)\n@@ -19035,7 +19035,7 @@\n \t\t\t  (match_operand:SI 2 \"const_0_to_255_operand\")]\n \t\t\t  UNSPEC_VCVTPS2PH)\n \t    (match_dup 5))\n-\t   (match_operand:V8HI 3 \"vector_move_operand\")\n+\t   (match_operand:V8HI 3 \"nonimm_or_0_operand\")\n \t   (match_operand:QI 4 \"register_operand\")))]\n   \"TARGET_AVX512VL\"\n   \"operands[5] = CONST0_RTX (V4HImode);\")\n@@ -19503,7 +19503,7 @@\n   [(set (match_operand:VI48F 0 \"register_operand\" \"=v\")\n \t(unspec:VI48F\n \t  [(match_operand:VI48F 1 \"register_operand\" \"v\")\n-\t   (match_operand:VI48F 2 \"vector_move_operand\" \"0C\")\n+\t   (match_operand:VI48F 2 \"nonimm_or_0_operand\" \"0C\")\n \t   (match_operand:<avx512fmaskmode> 3 \"register_operand\" \"Yk\")]\n \t  UNSPEC_COMPRESS))]\n   \"TARGET_AVX512F\"\n@@ -19516,7 +19516,7 @@\n   [(set (match_operand:VI12_AVX512VLBW 0 \"register_operand\" \"=v\")\n \t(unspec:VI12_AVX512VLBW\n \t  [(match_operand:VI12_AVX512VLBW 1 \"register_operand\" \"v\")\n-\t   (match_operand:VI12_AVX512VLBW 2 \"vector_move_operand\" \"0C\")\n+\t   (match_operand:VI12_AVX512VLBW 2 \"nonimm_or_0_operand\" \"0C\")\n \t   (match_operand:<avx512fmaskmode> 3 \"register_operand\" \"Yk\")]\n \t  UNSPEC_COMPRESS))]\n   \"TARGET_AVX512VBMI2\"\n@@ -19557,7 +19557,7 @@\n   [(set (match_operand:VI48F 0 \"register_operand\")\n \t(unspec:VI48F\n \t  [(match_operand:VI48F 1 \"nonimmediate_operand\")\n-\t   (match_operand:VI48F 2 \"vector_move_operand\")\n+\t   (match_operand:VI48F 2 \"nonimm_or_0_operand\")\n \t   (match_operand:<avx512fmaskmode> 3 \"register_operand\")]\n \t  UNSPEC_EXPAND))]\n   \"TARGET_AVX512F\"\n@@ -19567,7 +19567,7 @@\n   [(set (match_operand:VI48F 0 \"register_operand\" \"=v,v\")\n \t(unspec:VI48F\n \t  [(match_operand:VI48F 1 \"nonimmediate_operand\" \"v,m\")\n-\t   (match_operand:VI48F 2 \"vector_move_operand\" \"0C,0C\")\n+\t   (match_operand:VI48F 2 \"nonimm_or_0_operand\" \"0C,0C\")\n \t   (match_operand:<avx512fmaskmode> 3 \"register_operand\" \"Yk,Yk\")]\n \t  UNSPEC_EXPAND))]\n   \"TARGET_AVX512F\"\n@@ -19581,7 +19581,7 @@\n   [(set (match_operand:VI12_AVX512VLBW 0 \"register_operand\" \"=v,v\")\n \t(unspec:VI12_AVX512VLBW\n \t  [(match_operand:VI12_AVX512VLBW 1 \"nonimmediate_operand\" \"v,m\")\n-\t   (match_operand:VI12_AVX512VLBW 2 \"vector_move_operand\" \"0C,0C\")\n+\t   (match_operand:VI12_AVX512VLBW 2 \"nonimm_or_0_operand\" \"0C,0C\")\n \t   (match_operand:<avx512fmaskmode> 3 \"register_operand\" \"Yk,Yk\")]\n \t  UNSPEC_EXPAND))]\n   \"TARGET_AVX512VBMI2\"\n@@ -19595,7 +19595,7 @@\n   [(set (match_operand:VI12_AVX512VLBW 0 \"register_operand\")\n \t(unspec:VI12_AVX512VLBW\n \t  [(match_operand:VI12_AVX512VLBW 1 \"nonimmediate_operand\")\n-\t   (match_operand:VI12_AVX512VLBW 2 \"vector_move_operand\")\n+\t   (match_operand:VI12_AVX512VLBW 2 \"nonimm_or_0_operand\")\n \t   (match_operand:<avx512fmaskmode> 3 \"register_operand\")]\n \t  UNSPEC_EXPAND))]\n   \"TARGET_AVX512VBMI2\"\n@@ -19920,7 +19920,7 @@\n \n (define_expand \"mov<mode>\"\n   [(set (match_operand:IMOD4 0 \"nonimmediate_operand\")\n-\t(match_operand:IMOD4 1 \"vector_move_operand\"))]\n+\t(match_operand:IMOD4 1 \"nonimm_or_0_operand\"))]\n   \"TARGET_AVX512F\"\n {\n   ix86_expand_vector_move (<MODE>mode, operands);\n@@ -19929,7 +19929,7 @@\n \n (define_insn_and_split \"*mov<mode>_internal\"\n   [(set (match_operand:IMOD4 0 \"nonimmediate_operand\" \"=v,v ,m\")\n-\t(match_operand:IMOD4 1 \"vector_move_operand\"  \" C,vm,v\"))]\n+\t(match_operand:IMOD4 1 \"nonimm_or_0_operand\"  \" C,vm,v\"))]\n   \"TARGET_AVX512F\n    && (register_operand (operands[0], <MODE>mode)\n        || register_operand (operands[1], <MODE>mode))\""}, {"sha": "44f5dfb648d0981b49871e647ffaeeeb33703b56", "filename": "gcc/config/i386/subst.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/808d8de5a2325bc04709e953328c3377493b0557/gcc%2Fconfig%2Fi386%2Fsubst.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/808d8de5a2325bc04709e953328c3377493b0557/gcc%2Fconfig%2Fi386%2Fsubst.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsubst.md?ref=808d8de5a2325bc04709e953328c3377493b0557", "patch": "@@ -72,7 +72,7 @@\n   [(set (match_dup 0)\n         (vec_merge:SUBST_V\n \t  (match_dup 1)\n-\t  (match_operand:SUBST_V 2 \"vector_move_operand\" \"0C\")\n+\t  (match_operand:SUBST_V 2 \"nonimm_or_0_operand\" \"0C\")\n \t  (match_operand:<avx512fmaskmode> 3 \"register_operand\" \"Yk\")))])\n \n (define_subst_attr \"mask_scalar_merge_name\" \"mask_scalar_merge\" \"\" \"_mask\")\n@@ -243,7 +243,7 @@\n     (match_dup 1)\n     (match_dup 2)\n     (match_dup 3)\n-    (match_operand:SUBST_V 4 \"vector_move_operand\")\n+    (match_operand:SUBST_V 4 \"nonimm_or_0_operand\")\n     (match_operand:<avx512fmaskmode> 5 \"register_operand\")])\n \n (define_subst_attr \"mask_scalar_name\" \"mask_scalar\" \"\" \"_mask\")\n@@ -261,7 +261,7 @@\n \t(vec_merge:SUBST_V\n \t  (vec_merge:SUBST_V\n \t    (match_dup 1)\n-\t    (match_operand:SUBST_V 3 \"vector_move_operand\" \"0C\")\n+\t    (match_operand:SUBST_V 3 \"nonimm_or_0_operand\" \"0C\")\n \t    (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"Yk\"))\n \t  (match_dup 2)\n \t  (const_int 1)))])"}]}