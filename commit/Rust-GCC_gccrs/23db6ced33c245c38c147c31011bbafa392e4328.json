{"sha": "23db6ced33c245c38c147c31011bbafa392e4328", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjNkYjZjZWQzM2MyNDVjMzhjMTQ3YzMxMDExYmJhZmEzOTJlNDMyOA==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2019-01-14T18:44:00Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2019-01-14T18:44:00Z"}, "message": "PR target/88638 - FAIL: fsf-nsstring-format-1.s on darwin\n\ngcc/c-family/ChangeLog:\n\n\tPR target/88638\n\t* c-attribs.c (positional_argument): Call valid_format_string_type_p\n\tand issue errors if it fails.\n\t* c-common.h (valid_format_string_type_p): Declare.\n\t* c-format.c (valid_stringptr_type_p): Rename...\n\t(valid_format_string_type_p): ...to this and make extern.\n\t(handle_format_arg_attribute): Adjust to new name.\n\t(check_format_string): Same.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/88638\n\t* gcc.dg/format/attr-8.c: New test.\n\t* gcc.dg/darwin-cfstring-format-1.c: Adjust diagnostics.\n\t* gcc.dg/format/attr-3.c: Same.\n\t* obj-c++.dg/fsf-nsstring-format-1.mm: Same.\n\t* objc.dg/fsf-nsstring-format-1.m: Same.\n\ngcc/ChangeLog:\n\n\tPR target/88638\n\t* doc/extend.texi (Darwin Format Checks): Clarify.\n\nFrom-SVN: r267922", "tree": {"sha": "e0ee52741bfafa1d02673e8cf26b8d54139efe82", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e0ee52741bfafa1d02673e8cf26b8d54139efe82"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/23db6ced33c245c38c147c31011bbafa392e4328", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23db6ced33c245c38c147c31011bbafa392e4328", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23db6ced33c245c38c147c31011bbafa392e4328", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23db6ced33c245c38c147c31011bbafa392e4328/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "15f4e33db7e7b0c466db39eccfc693c910459368", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15f4e33db7e7b0c466db39eccfc693c910459368", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15f4e33db7e7b0c466db39eccfc693c910459368"}], "stats": {"total": 149, "additions": 117, "deletions": 32}, "files": [{"sha": "869ab248d9fa1cf48a9aa51f746abc8329457603", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23db6ced33c245c38c147c31011bbafa392e4328/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23db6ced33c245c38c147c31011bbafa392e4328/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=23db6ced33c245c38c147c31011bbafa392e4328", "patch": "@@ -1,3 +1,8 @@\n+2019-01-14  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR target/88638\n+\t* doc/extend.texi (Darwin Format Checks): Clarify.\n+\n 2019-01-14  Richard Biener  <rguenther@suse.de>\n \n \t* genmatch.c (dt_simplify::gen_1): Change dumping dependent on"}, {"sha": "fe4c81f9da49322124b17eee9423a78a2f9ee18c", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23db6ced33c245c38c147c31011bbafa392e4328/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23db6ced33c245c38c147c31011bbafa392e4328/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=23db6ced33c245c38c147c31011bbafa392e4328", "patch": "@@ -1,3 +1,14 @@\n+2019-01-14  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR target/88638\n+\t* c-attribs.c (positional_argument): Call valid_format_string_type_p\n+\tand issue errors if it fails.\n+\t* c-common.h (valid_format_string_type_p): Declare.\n+\t* c-format.c (valid_stringptr_type_p): Rename...\n+\t(valid_format_string_type_p): ...to this and make extern.\n+\t(handle_format_arg_attribute): Adjust to new name.\n+\t(check_format_string): Same.\n+\n 2019-01-13  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* c-warn.c (warn_for_address_or_pointer_of_packed_member):"}, {"sha": "20584593c6a9085e4deec05a61a05b9cbe5fe922", "filename": "gcc/c-family/c-attribs.c", "status": "modified", "additions": 21, "deletions": 10, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23db6ced33c245c38c147c31011bbafa392e4328/gcc%2Fc-family%2Fc-attribs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23db6ced33c245c38c147c31011bbafa392e4328/gcc%2Fc-family%2Fc-attribs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-attribs.c?ref=23db6ced33c245c38c147c31011bbafa392e4328", "patch": "@@ -631,17 +631,13 @@ positional_argument (const_tree fntype, const_tree atname, tree pos,\n \t  return NULL_TREE;\n \t}\n \n+      /* Where the expected code is STRING_CST accept any pointer\n+\t expected by attribute format (this includes possibly qualified\n+\t char pointers and, for targets like Darwin, also pointers to\n+\t struct CFString).  */\n       bool type_match;\n-      if (code == STRING_CST && POINTER_TYPE_P (argtype))\n-\t{\n-\t  /* Where the expected code is STRING_CST accept any pointer\n-\t     to a narrow character type, qualified or otherwise.  */\n-\t  tree type = TREE_TYPE (argtype);\n-\t  type = TYPE_MAIN_VARIANT (type);\n-\t  type_match = (type == char_type_node\n-\t\t\t|| type == signed_char_type_node\n-\t\t\t|| type == unsigned_char_type_node);\n-\t}\n+      if (code == STRING_CST)\n+\ttype_match = valid_format_string_type_p (argtype);\n       else if (code == INTEGER_TYPE)\n \t/* For integers, accept enums, wide characters and other types\n \t   that match INTEGRAL_TYPE_P except for bool.  */\n@@ -652,6 +648,21 @@ positional_argument (const_tree fntype, const_tree atname, tree pos,\n \n       if (!type_match)\n \t{\n+\t  if (code == STRING_CST)\n+\t    {\n+\t      /* Reject invalid format strings with an error.  */\n+\t      if (argno < 1)\n+\t\terror (\"%qE attribute argument value %qE refers to \"\n+\t\t       \"parameter type %qT\",\n+\t\t       atname, pos, argtype);\n+\t      else\n+\t\terror (\"%qE attribute argument %i value %qE refers to \"\n+\t\t       \"parameter type %qT\",\n+\t\t       atname, argno, pos, argtype);\n+\n+\t      return NULL_TREE;\n+\t    }\n+\n \t  if (argno < 1)\n \t    warning (OPT_Wattributes,\n \t\t     \"%qE attribute argument value %qE refers to \""}, {"sha": "9f790bc6a1485e45f3b5f2a9a36a6991fa75f75f", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23db6ced33c245c38c147c31011bbafa392e4328/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23db6ced33c245c38c147c31011bbafa392e4328/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=23db6ced33c245c38c147c31011bbafa392e4328", "patch": "@@ -1336,6 +1336,9 @@ extern tree tm_mask_to_attr (int);\n extern tree find_tm_attribute (tree);\n extern const struct attribute_spec::exclusions attr_cold_hot_exclusions[];\n \n+/* In c-format.c.  */\n+extern bool valid_format_string_type_p (tree);\n+\n /* A bitmap of flags to positional_argument.  */\n enum posargflags {\n   /* Consider positional attribute argument value zero valid.  */"}, {"sha": "9b48ee3e3f4fba4f39fe9ab71d547b4c743d6f68", "filename": "gcc/c-family/c-format.c", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23db6ced33c245c38c147c31011bbafa392e4328/gcc%2Fc-family%2Fc-format.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23db6ced33c245c38c147c31011bbafa392e4328/gcc%2Fc-family%2Fc-format.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-format.c?ref=23db6ced33c245c38c147c31011bbafa392e4328", "patch": "@@ -122,8 +122,8 @@ format_warning_at_char (location_t fmt_string_loc, tree format_string_cst,\n    The function returns true if strref points to any string type valid for the \n    language dialect and target.  */\n \n-static bool\n-valid_stringptr_type_p (tree strref)\n+bool\n+valid_format_string_type_p (tree strref)\n {\n   return (strref != NULL\n \t  && TREE_CODE (strref) == POINTER_TYPE\n@@ -160,7 +160,7 @@ handle_format_arg_attribute (tree *node, tree atname,\n \treturn NULL_TREE;\n     }\n \n-  if (!valid_stringptr_type_p (TREE_TYPE (type)))\n+  if (!valid_format_string_type_p (TREE_TYPE (type)))\n     {\n       if (!(flags & (int) ATTR_FLAG_BUILT_IN))\n \terror (\"function does not return string type\");\n@@ -194,7 +194,7 @@ check_format_string (const_tree fntype, unsigned HOST_WIDE_INT format_num,\n     }\n \n   if (!ref\n-      || !valid_stringptr_type_p (ref))\n+      || !valid_format_string_type_p (ref))\n     {\n       if (!(flags & (int) ATTR_FLAG_BUILT_IN))\n \terror (\"format string argument is not a string type\");\n@@ -267,13 +267,21 @@ check_format_string (const_tree fntype, unsigned HOST_WIDE_INT format_num,\n   gcc_unreachable ();\n }\n \n-/* Verify EXPR is a constant, and store its value.\n-   If validated_p is true there should be no errors.\n+/* Under the control of FLAGS, verify EXPR is a valid constant that\n+   refers to a positional argument ARGNO having a string type (char*\n+   or, for targets like Darwin, a pointer to struct CFString) to\n+   a function type FNTYPE declared with attribute ATNAME.\n+   If valid, store the constant's integer value in *VALUE and return\n+   the value.\n+   If VALIDATED_P is true assert the validation is successful.\n    Returns the converted constant value on success, null otherwise.  */\n+\n static tree\n get_constant (const_tree fntype, const_tree atname, tree expr, int argno,\n \t      unsigned HOST_WIDE_INT *value, int flags, bool validated_p)\n {\n+  /* Require the referenced argument to have a string type.  For targets\n+     like Darwin, also accept pointers to struct CFString.  */\n   if (tree val = positional_argument (fntype, atname, expr, STRING_CST,\n \t\t\t\t      argno, flags))\n     {"}, {"sha": "c81092dfe0c25c2e0580f29bb1ca790e961f20e2", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23db6ced33c245c38c147c31011bbafa392e4328/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23db6ced33c245c38c147c31011bbafa392e4328/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=23db6ced33c245c38c147c31011bbafa392e4328", "patch": "@@ -22397,10 +22397,14 @@ bit-fields.  See the Solaris man page for @code{cmn_err} for more information.\n @node Darwin Format Checks\n @subsection Darwin Format Checks\n \n-Darwin targets support the @code{CFString} (or @code{__CFString__}) in the format\n-attribute context.  Declarations made with such attribution are parsed for correct syntax\n-and format argument types.  However, parsing of the format string itself is currently undefined\n-and is not carried out by this version of the compiler.\n+In addition to the full set of format archetypes (attribute format style\n+arguments such as @code{printf}, @code{scanf}, @code{strftime}, and\n+@code{strfmon}), Darwin targets also support the @code{CFString} (or\n+@code{__CFString__}) archetype in the @code{format} attribute.\n+Declarations with this archetype are parsed for correct syntax\n+and argument types.  However, parsing of the format string itself and\n+validating arguments against it in calls to such functions is currently\n+not performed.\n \n Additionally, @code{CFStringRefs} (defined by the @code{CoreFoundation} headers) may\n also be used as format arguments.  Note that the relevant headers are only likely to be"}, {"sha": "8c6f9e419baf7f69b1f0887d45068f520a9a87e5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23db6ced33c245c38c147c31011bbafa392e4328/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23db6ced33c245c38c147c31011bbafa392e4328/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=23db6ced33c245c38c147c31011bbafa392e4328", "patch": "@@ -1,3 +1,12 @@\n+2019-01-14  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR target/88638\n+\t* gcc.dg/format/attr-8.c: New test.\n+\t* gcc.dg/darwin-cfstring-format-1.c: Adjust diagnostics.\n+\t* gcc.dg/format/attr-3.c: Same.\n+\t* obj-c++.dg/fsf-nsstring-format-1.mm: Same.\n+\t* objc.dg/fsf-nsstring-format-1.m: Same.\n+\n 2019-01-14  Martin Liska  <mliska@suse.cz>\n \n \tPR gcov-profile/88263"}, {"sha": "a1513ee233af55a30ebc2f833b56bf780a67541a", "filename": "gcc/testsuite/gcc.dg/darwin-cfstring-format-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23db6ced33c245c38c147c31011bbafa392e4328/gcc%2Ftestsuite%2Fgcc.dg%2Fdarwin-cfstring-format-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23db6ced33c245c38c147c31011bbafa392e4328/gcc%2Ftestsuite%2Fgcc.dg%2Fdarwin-cfstring-format-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdarwin-cfstring-format-1.c?ref=23db6ced33c245c38c147c31011bbafa392e4328", "patch": "@@ -15,15 +15,15 @@ typedef const struct __CFString * CFStringRef;\n int s1 (CFStringRef fmt, ...) __attribute__((format(CFString, 1, 2))) ; /* OK */\n int s2 (int a, CFStringRef fmt, ... ) __attribute__((format(__CFString__, 2, 3))) ; /* OK */\n \n-int s2a (int a, CFStringRef fmt, ... ) __attribute__((format(CFString, 2, 2))) ; /* { dg-error \"format string argument follows the args to be formatted\" } */\n+int s2a (int a, CFStringRef fmt, ... ) __attribute__((format(CFString, 2, 2))) ; /* { dg-error \".format. attribute argument 3 value .2. does not refer to a variable argument list\" } */\n \n int s3 (const char *fmt, ... ) __attribute__((format(__CFString__, 1, 2))) ; /* { dg-error \"format argument should be a .CFString. reference but a string was found\" } */\n int s4 (CFStringRef fmt, ... ) __attribute__((format(printf, 1, 2))) ; /* { dg-error \"found a .CFStringRef.* but the format argument should be a string\" } */\n \n char *s5 (char dum, char *fmt1, ... ) __attribute__((format_arg(2))) ; /* OK */\n CFStringRef s6 (CFStringRef dum, CFStringRef fmt1, ... ) __attribute__((format_arg(2))) ; /* OK */\n \n-char *s7 (int dum, void *fmt1, ... ) __attribute__((format_arg(2))) ; /* { dg-error \"format string argument is not a string type\" } */\n+char *s7 (int dum, void *fmt1, ... ) __attribute__((format_arg(2))) ; /* { dg-error \".format_arg. attribute argument value .2. refers to parameter type .void \\\\\\*.\" } */\n int s8 (CFStringRef dum, CFStringRef fmt1, ... ) __attribute__((format_arg(2))) ; /* { dg-error \"function does not return string type\" } */\n \n void foo (void)"}, {"sha": "1b275c5aba81e26bf8ee538990ec77a01c324b7a", "filename": "gcc/testsuite/gcc.dg/format/attr-3.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23db6ced33c245c38c147c31011bbafa392e4328/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fattr-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23db6ced33c245c38c147c31011bbafa392e4328/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fattr-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fattr-3.c?ref=23db6ced33c245c38c147c31011bbafa392e4328", "patch": "@@ -56,16 +56,16 @@ extern void fg3 () __attribute__((format(gnu_attr_printf, 2, 1))); /* { dg-error\n \n /* The format string argument must be a string type, and the arguments to\n    be formatted must be the \"...\".  */\n-extern void fh0 (int, ...) __attribute__((format(gnu_attr_printf, 1, 2))); /* { dg-warning \".format. attribute argument 2 value .1. refers to parameter type .int.\" \"format int string\" } */\n-extern void fh1 (signed char *, ...) __attribute__((format(gnu_attr_printf, 1, 2))); /* { dg-error \"not a string\" \"signed char string\" } */\n-extern void fh2 (unsigned char *, ...) __attribute__((format(gnu_attr_printf, 1, 2))); /* { dg-error \"not a string\" \"unsigned char string\" } */\n+extern void fh0 (int, ...) __attribute__((format(gnu_attr_printf, 1, 2))); /* { dg-error \".format. attribute argument 2 value .1. refers to parameter type .int.\" \"format int string\" } */\n+extern void fh1 (signed char *, ...) __attribute__((format(gnu_attr_printf, 1, 2))); /* { dg-error \".format. attribute argument 2 value .1. refers to parameter type .signed char \\\\\\*.\" \"signed char string\" } */\n+extern void fh2 (unsigned char *, ...) __attribute__((format(gnu_attr_printf, 1, 2))); /* { dg-error \".format. attribute argument 2 value .1. refers to parameter type .unsigned char \\\\\\*.\" \"unsigned char string\" } */\n extern void fh3 (const char *, ...) __attribute__((format(gnu_attr_printf, 1, 3))); /* { dg-error \"is not\" \"not ...\" } */\n extern void fh4 (const char *, int, ...) __attribute__((format(gnu_attr_printf, 1, 2))); /* { dg-error \".format. attribute argument 3 value .2. does not refer to a variable argument list\" \"not ...\" } */\n \n /* format_arg formats must take and return a string.  */\n-extern char *fi0 (int) __attribute__((format_arg(1))); /* { dg-warning \".format_arg. attribute argument value .1. refers to parameter type .int.\" } */\n-extern char *fi1 (signed char *) __attribute__((format_arg(1))); /* { dg-error \"not a string\" \"format_arg signed char string\" } */\n-extern char *fi2 (unsigned char *) __attribute__((format_arg(1))); /* { dg-error \"not a string\" \"format_arg unsigned char string\" } */\n+extern char *fi0 (int) __attribute__((format_arg(1))); /* { dg-error \".format_arg. attribute argument value .1. refers to parameter type .int.\" } */\n+extern char *fi1 (signed char *) __attribute__((format_arg(1))); /* { dg-error \".format_arg. attribute argument value .1. refers to parameter type .signed char \\\\\\*.\" \"format_arg signed char string\" } */\n+extern char *fi2 (unsigned char *) __attribute__((format_arg(1))); /* { dg-error \".format_arg. attribute argument value .1. refers to parameter type .unsigned char \\\\\\*.\" \"format_arg unsigned char string\" } */\n extern int fi3 (const char *) __attribute__((format_arg(1))); /* { dg-error \"not return string\" \"format_arg ret int string\" } */\n extern signed char *fi4 (const char *) __attribute__((format_arg(1))); /* { dg-error \"not return string\" \"format_arg ret signed char string\" } */\n extern unsigned char *fi5 (const char *) __attribute__((format_arg(1))); /* { dg-error \"not return string\" \"format_arg ret unsigned char string\" } */"}, {"sha": "7fba35a56c2b9086df83bacdb621113e2d943223", "filename": "gcc/testsuite/gcc.dg/format/attr-8.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23db6ced33c245c38c147c31011bbafa392e4328/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fattr-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23db6ced33c245c38c147c31011bbafa392e4328/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fattr-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fattr-8.c?ref=23db6ced33c245c38c147c31011bbafa392e4328", "patch": "@@ -0,0 +1,34 @@\n+/* Test to verify that parameters of qualified narrow char pointer type\n+   are accepted for attribute format printf, but others are rejected.\n+   { dg-do compile }\n+   { dg-options \"-std=gnu99 -Wformat\" } */\n+\n+#define DONT_GNU_PROTOTYPE\n+#include \"format.h\"\n+\n+#define FORMAT(archetype, arg1, arg2)   \\\n+  __attribute__  ((format (archetype, arg1, arg2)))\n+\n+FORMAT (gnu_attr_printf, 1, 2)\n+  void fpc_1_2 (char *, ...);\n+\n+FORMAT (gnu_attr_printf, 1, 2)\n+  void fpcc_1_2 (const char *, ...);\n+\n+FORMAT (gnu_attr_printf, 1, 2)\n+  void frpc_1_2 (char * restrict, ...);\n+\n+FORMAT (gnu_attr_printf, 1, 2)\n+  void fpvc_1_2 (volatile char *, ...);\n+\n+FORMAT (gnu_attr_printf, 1, 2)\n+  void fpcvc_1_2 (const volatile char *, ...);\n+\n+FORMAT (gnu_attr_printf, 1, 2)\n+  void fpv_1_2 (void *, ...);       /* { dg-error \".format. attribute argument 2 value .1. refers to parameter type .void \\\\\\*.\" } */\n+\n+FORMAT (gnu_attr_printf, 1, 2)\n+  void fppc_1_2 (char **, ...);     /* { dg-error \".format. attribute argument 2 value .1. refers to parameter type .char \\\\\\*\\\\\\*.\" } */\n+\n+FORMAT (gnu_attr_printf, 1, 2)\n+  void fpwc_1_2 (wchar_t *, ...);   /* { dg-error \".format. attribute argument 2 value .1. refers to parameter type .wchar_t \\\\\\*.\" } */"}, {"sha": "18f5960a489b643b656f7f8bf042be3a34685142", "filename": "gcc/testsuite/obj-c++.dg/fsf-nsstring-format-1.mm", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23db6ced33c245c38c147c31011bbafa392e4328/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ffsf-nsstring-format-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23db6ced33c245c38c147c31011bbafa392e4328/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ffsf-nsstring-format-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ffsf-nsstring-format-1.mm?ref=23db6ced33c245c38c147c31011bbafa392e4328", "patch": "@@ -28,15 +28,15 @@\n \n int s2 (int a, NSString *fmt, ... ) __attribute__((format(__NSString__, 2, 3))) ; /* OK */\n \n-int s2a (int a, NSString *fmt, ... ) __attribute__((format(NSString, 2, 2))) ; /* { dg-error \"format string argument follows the args to be formatted\" } */\n+int s2a (int a, NSString *fmt, ... ) __attribute__((format(NSString, 2, 2))) ; /* { dg-error \".format. attribute argument 3 value .2. does not refer to a variable argument list\" } */\n \n int s3 (const char *fmt, ... ) __attribute__((format(__NSString__, 1, 2))) ; /* { dg-error \"format argument should be a .NSString. reference but a string was found\" } */\n int s4 (NSString *fmt, ... ) __attribute__((format(printf, 1, 2))) ; /* { dg-error \"found a .NSString. reference but the format argument should be a string\" } */\n \n char *s5 (char dum, char *fmt1, ... ) __attribute__((format_arg(2))) ; /* OK */\n NSString *s6 (NSString *dum, NSString *fmt1, ... ) __attribute__((format_arg(2))) ; /* OK */\n \n-char *s7 (int dum, void *fmt1, ... ) __attribute__((format_arg(2))) ; /* { dg-error \"format string argument is not a string type\" } */\n+char *s7 (int dum, void *fmt1, ... ) __attribute__((format_arg(2))) ; /* { dg-error \".format_arg. attribute argument value .2. refers to parameter type .void\\\\\\*.\" } */\n int s8 (NSString *dum, NSString *fmt1, ... ) __attribute__((format_arg(2))) ; /* { dg-error \"function does not return string type\" } */\n \n char *s9 (int dum, char *fmt1, ... ) __attribute__((format_arg(2))) ; /* OK */"}, {"sha": "e29358cafd41f9951d29ccf7ce8a6adce9443674", "filename": "gcc/testsuite/objc.dg/fsf-nsstring-format-1.m", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23db6ced33c245c38c147c31011bbafa392e4328/gcc%2Ftestsuite%2Fobjc.dg%2Ffsf-nsstring-format-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23db6ced33c245c38c147c31011bbafa392e4328/gcc%2Ftestsuite%2Fobjc.dg%2Ffsf-nsstring-format-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ffsf-nsstring-format-1.m?ref=23db6ced33c245c38c147c31011bbafa392e4328", "patch": "@@ -21,15 +21,15 @@\n \n int s2 (int a, NSString *fmt, ... ) __attribute__((format(__NSString__, 2, 3))) ; /* OK */\n \n-int s2a (int a, NSString *fmt, ... ) __attribute__((format(NSString, 2, 2))) ; /* { dg-error \"format string argument follows the args to be formatted\" } */\n+int s2a (int a, NSString *fmt, ... ) __attribute__((format(NSString, 2, 2))) ; /* { dg-error \".format. attribute argument 3 value .2. does not refer to a variable argument list\" } */\n \n int s3 (const char *fmt, ... ) __attribute__((format(__NSString__, 1, 2))) ; /* { dg-error \"format argument should be a .NSString. reference but a string was found\" } */\n int s4 (NSString *fmt, ... ) __attribute__((format(printf, 1, 2))) ; /* { dg-error \"found a .NSString. reference but the format argument should be a string\" } */\n \n char *s5 (char dum, char *fmt1, ... ) __attribute__((format_arg(2))) ; /* OK */\n NSString *s6 (NSString *dum, NSString *fmt1, ... ) __attribute__((format_arg(2))) ; /* OK */\n \n-char *s7 (int dum, void *fmt1, ... ) __attribute__((format_arg(2))) ; /* { dg-error \"format string argument is not a string type\" } */\n+char *s7 (int dum, void *fmt1, ... ) __attribute__((format_arg(2))) ; /* { dg-error \".format_arg. attribute argument value .2. refers to parameter type .void \\\\\\*.\" } */\n int s8 (NSString *dum, NSString *fmt1, ... ) __attribute__((format_arg(2))) ; /* { dg-error \"function does not return string type\" } */\n \n char *s9 (int dum, char *fmt1, ... ) __attribute__((format_arg(2))) ; /* OK */"}]}