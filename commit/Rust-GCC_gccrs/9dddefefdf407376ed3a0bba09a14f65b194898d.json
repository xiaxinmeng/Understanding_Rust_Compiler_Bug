{"sha": "9dddefefdf407376ed3a0bba09a14f65b194898d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWRkZGVmZWZkZjQwNzM3NmVkM2EwYmJhMDlhMTRmNjViMTk0ODk4ZA==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2019-03-20T23:52:48Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gcc.gnu.org", "date": "2019-03-20T23:52:48Z"}, "message": "d: Fix ICE force_type_die, at dwarf2out.c using nested types\n\nIn functions whose return type is instantiated from a nested template,\nmake sure that all members of the instance are emitted before finishing\nthe outer function, otherwise they will be removed during the\nprune_unused_types pass.\n\ngcc/d/ChangeLog:\n\n2019-03-21  Iain Buclaw  <ibuclaw@gdcproject.org>\n\n\tPR d/89017\n\t* d-codegen.cc (d_decl_context): Skip over template instances when\n\tfinding the context.\n\t* decl.cc (DeclVisitor::visit(TemplateDeclaration)): New override.\n\t(build_type_decl): Include parameters in name of template types.\n\ngcc/testsuite/ChangeLog:\n\n2019-03-21  Iain Buclaw  <ibuclaw@gdcproject.org>\n\n\tPR d/89017\n\t* gdc.dg/pr89017.d: New test.\n\nFrom-SVN: r269828", "tree": {"sha": "1c5d4ec04a8021ff8e31befda84fa58201e0fb9b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1c5d4ec04a8021ff8e31befda84fa58201e0fb9b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9dddefefdf407376ed3a0bba09a14f65b194898d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9dddefefdf407376ed3a0bba09a14f65b194898d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9dddefefdf407376ed3a0bba09a14f65b194898d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9dddefefdf407376ed3a0bba09a14f65b194898d/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5d2df818b7752021425581455aca08f3fd0902b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d2df818b7752021425581455aca08f3fd0902b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d2df818b7752021425581455aca08f3fd0902b7"}], "stats": {"total": 110, "additions": 103, "deletions": 7}, "files": [{"sha": "39df9b8aac0ad21f694c170ef78cf7eb97f9675b", "filename": "gcc/d/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dddefefdf407376ed3a0bba09a14f65b194898d/gcc%2Fd%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dddefefdf407376ed3a0bba09a14f65b194898d/gcc%2Fd%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FChangeLog?ref=9dddefefdf407376ed3a0bba09a14f65b194898d", "patch": "@@ -1,3 +1,11 @@\n+2019-03-21  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/89017\n+\t* d-codegen.cc (d_decl_context): Skip over template instances when\n+\tfinding the context.\n+\t* decl.cc (DeclVisitor::visit(TemplateDeclaration)): New override.\n+\t(build_type_decl): Include parameters in name of template types.\n+\n 2019-03-13  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \tPR d/88957"}, {"sha": "26929109b486c4376306a5f66c52c978c3561e35", "filename": "gcc/d/d-codegen.cc", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dddefefdf407376ed3a0bba09a14f65b194898d/gcc%2Fd%2Fd-codegen.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dddefefdf407376ed3a0bba09a14f65b194898d/gcc%2Fd%2Fd-codegen.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-codegen.cc?ref=9dddefefdf407376ed3a0bba09a14f65b194898d", "patch": "@@ -67,7 +67,7 @@ d_decl_context (Dsymbol *dsym)\n   Dsymbol *parent = dsym;\n   Declaration *decl = dsym->isDeclaration ();\n \n-  while ((parent = parent->toParent ()))\n+  while ((parent = parent->toParent2 ()))\n     {\n       /* We've reached the top-level module namespace.\n \t Set DECL_CONTEXT as the NAMESPACE_DECL of the enclosing module,\n@@ -101,11 +101,6 @@ d_decl_context (Dsymbol *dsym)\n \n \t  return context;\n \t}\n-\n-      /* Instantiated types are given the context of their template.  */\n-      TemplateInstance *ti = parent->isTemplateInstance ();\n-      if (ti != NULL && decl == NULL)\n-\tparent = ti->tempdecl;\n     }\n \n   return NULL_TREE;"}, {"sha": "fffed97727f186c9a237fa41b267cc3541288bac", "filename": "gcc/d/decl.cc", "status": "modified", "additions": 40, "deletions": 1, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dddefefdf407376ed3a0bba09a14f65b194898d/gcc%2Fd%2Fdecl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dddefefdf407376ed3a0bba09a14f65b194898d/gcc%2Fd%2Fdecl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdecl.cc?ref=9dddefefdf407376ed3a0bba09a14f65b194898d", "patch": "@@ -255,6 +255,40 @@ class DeclVisitor : public Visitor\n       }\n   }\n \n+  /* Templates are D's approach to generic programming.  They have no members\n+     that can be emitted, however if the template is nested and used as a\n+     voldemort type, then it's members must be compiled before the parent\n+     function finishes.  */\n+\n+  void visit (TemplateDeclaration *d)\n+  {\n+    /* Type cannot be directly named outside of the scope it's declared in, so\n+       the only way it can be escaped is if the function has auto return.  */\n+    FuncDeclaration *fd = d_function_chain ? d_function_chain->function : NULL;\n+\n+    if (!fd || !fd->isAuto ())\n+      return;\n+\n+    /* Check if the function returns an instantiated type that may contain\n+       nested members.  Only applies to classes or structs.  */\n+    Type *tb = fd->type->nextOf ()->baseElemOf ();\n+\n+    while (tb->ty == Tarray || tb->ty == Tpointer)\n+      tb = tb->nextOf ()->baseElemOf ();\n+\n+    TemplateInstance *ti = NULL;\n+\n+    if (tb->ty == Tstruct)\n+      ti = ((TypeStruct *) tb)->sym->isInstantiated ();\n+    else if (tb->ty == Tclass)\n+      ti = ((TypeClass *) tb)->sym->isInstantiated ();\n+\n+    /* Return type is instantiated from this template declaration, walk over\n+       all members of the instance.  */\n+    if (ti && ti->tempdecl == d)\n+      ti->accept (this);\n+  }\n+\n   /* Walk over all members in the instantiated template.  */\n \n   void visit (TemplateInstance *d)\n@@ -2228,8 +2262,13 @@ build_type_decl (tree type, Dsymbol *dsym)\n \n   gcc_assert (!POINTER_TYPE_P (type));\n \n+  /* If a templated type, use the template instance name, as that includes all\n+     template parameters.  */\n+  const char *name = dsym->parent->isTemplateInstance ()\n+    ? ((TemplateInstance *) dsym->parent)->toChars () : dsym->ident->toChars ();\n+\n   tree decl = build_decl (make_location_t (dsym->loc), TYPE_DECL,\n-\t\t\t  get_identifier (dsym->ident->toChars ()), type);\n+\t\t\t  get_identifier (name), type);\n   SET_DECL_ASSEMBLER_NAME (decl, get_identifier (mangle_decl (dsym)));\n   TREE_PUBLIC (decl) = 1;\n   DECL_ARTIFICIAL (decl) = 1;"}, {"sha": "7487e91a95485cb13848cf83f490cb70988f4ed2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dddefefdf407376ed3a0bba09a14f65b194898d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dddefefdf407376ed3a0bba09a14f65b194898d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9dddefefdf407376ed3a0bba09a14f65b194898d", "patch": "@@ -1,3 +1,8 @@\n+2019-03-21  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/89017\n+\t* gdc.dg/pr89017.d: New test.\n+\n 2019-03-20  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/71861"}, {"sha": "b796e6246e8e7ac040af1625fbab78eaf0baec12", "filename": "gcc/testsuite/gdc.dg/pr89017.d", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dddefefdf407376ed3a0bba09a14f65b194898d/gcc%2Ftestsuite%2Fgdc.dg%2Fpr89017.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dddefefdf407376ed3a0bba09a14f65b194898d/gcc%2Ftestsuite%2Fgdc.dg%2Fpr89017.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fpr89017.d?ref=9dddefefdf407376ed3a0bba09a14f65b194898d", "patch": "@@ -0,0 +1,49 @@\n+// https://gcc.gnu.org/bugzilla/show_bug.cgi?id=89017\n+// { dg-do compile }\n+\n+enum Type\n+{\n+    Struct,\n+    Class,\n+    Pointer,\n+    Array,\n+}\n+\n+auto f89017(Type type)()\n+{\n+    static if (type == Type.Class)\n+    {\n+        class C(S)\n+        {\n+            struct S\n+            {\n+                void fn(){}\n+            }\n+        }\n+    }\n+    else\n+    {\n+        struct C(S)\n+        {\n+            struct S\n+            {\n+                void fn(){}\n+            }\n+        }\n+    }\n+\n+    static if (type == Type.Struct)\n+        return C!Type();\n+    static if (type == Type.Class || type == Type.Pointer)\n+        return new C!Type();\n+    static if (type == Type.Array)\n+        return new C!Type[2];\n+}\n+\n+void test89017()\n+{\n+    f89017!(Type.Class);\n+    f89017!(Type.Struct);\n+    f89017!(Type.Pointer);\n+    f89017!(Type.Array);\n+}"}]}