{"sha": "f11854d42ab072a260ab9ee019a527acf03c5107", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjExODU0ZDQyYWIwNzJhMjYwYWI5ZWUwMTlhNTI3YWNmMDNjNTEwNw==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2018-12-06T15:25:12Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2018-12-06T15:25:12Z"}, "message": "C++: improvements to diagnostics using %P (more PR c++/85110)\n\nThis patch is based on grepping the C++ frontend for %P\ni.e. diagnostics that refer to a parameter number.  It fixes up\nthese diagnostics to highlight the pertinent param where appropriate\n(and possible), along with various other tweaks, as described in the\nChangeLog.\n\ngcc/cp/ChangeLog:\n\tPR c++/85110\n\t* call.c (conversion_null_warnings): Try to use the location of\n\tthe expression for the warnings.  Add notes showing the parameter\n\tof the function decl, where available.\n\t(get_fndecl_argument_location): For implicitly-declared functions,\n\tuse the fndecl location rather than that of the param.\n\t(maybe_inform_about_fndecl_for_bogus_argument_init): New function.\n\t(convert_like_real): Use it in various places to avoid repetition.\n\t(complain_about_bad_argument): Likewise.\n\t* cp-tree.h (maybe_inform_about_fndecl_for_bogus_argument_init):\n\tNew declaration.\n\t* decl2.c (check_default_args): Put all diagnostics for the fndecl\n\tinto a diagnostic group.  Use the location of the parameter when\n\tcomplaining about parameters with missing default arguments in\n\tpreference to that of the fndecl.  Attempt to record the location\n\tof the first parameter with a default argument and emit a note\n\tfor the first parameter that's missing one.\n\t* typeck.c (convert_arguments): When complaining about parameters\n\twith incomplete types, attempt to use the location of the\n\targument.  Where available, add a note showing the pertinent\n\tparameter in the fndecl.\n\t(convert_for_assignment): When complaining about bad conversions\n\tat function calls, use the location of the unstripped argument.\n\t(convert_for_initialization): When checking for bogus references,\n\tadd an auto_diagnostic_group, and update the note to use the\n\tlocation of the pertinent parameter, rather than just the callee.\n\ngcc/testsuite/ChangeLog:\n\tPR c++/85110\n\t* g++.dg/diagnostic/missing-default-args.C: New test.\n\t* g++.dg/diagnostic/param-type-mismatch-3.C: New test.\n\t* g++.dg/diagnostic/param-type-mismatch.C: Add tests for invalid\n\treferences and incomplete types.\n\t* g++.dg/warn/Wconversion-null-4.C: New test.\n\nFrom-SVN: r266856", "tree": {"sha": "c2bcf15443a85c921a7d1c8a6cbc1477771dfcde", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c2bcf15443a85c921a7d1c8a6cbc1477771dfcde"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f11854d42ab072a260ab9ee019a527acf03c5107", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f11854d42ab072a260ab9ee019a527acf03c5107", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f11854d42ab072a260ab9ee019a527acf03c5107", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f11854d42ab072a260ab9ee019a527acf03c5107/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "51948daf1ceb71db9d5682df42c6da079acaf3d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51948daf1ceb71db9d5682df42c6da079acaf3d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51948daf1ceb71db9d5682df42c6da079acaf3d7"}], "stats": {"total": 349, "additions": 311, "deletions": 38}, "files": [{"sha": "bda9c59411d82d857af71e9e797d16414ca6112a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f11854d42ab072a260ab9ee019a527acf03c5107/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f11854d42ab072a260ab9ee019a527acf03c5107/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f11854d42ab072a260ab9ee019a527acf03c5107", "patch": "@@ -1,3 +1,32 @@\n+2018-12-06  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c++/85110\n+\t* call.c (conversion_null_warnings): Try to use the location of\n+\tthe expression for the warnings.  Add notes showing the parameter\n+\tof the function decl, where available.\n+\t(get_fndecl_argument_location): For implicitly-declared functions,\n+\tuse the fndecl location rather than that of the param.\n+\t(maybe_inform_about_fndecl_for_bogus_argument_init): New function.\n+\t(convert_like_real): Use it in various places to avoid repetition.\n+\t(complain_about_bad_argument): Likewise.\n+\t* cp-tree.h (maybe_inform_about_fndecl_for_bogus_argument_init):\n+\tNew declaration.\n+\t* decl2.c (check_default_args): Put all diagnostics for the fndecl\n+\tinto a diagnostic group.  Use the location of the parameter when\n+\tcomplaining about parameters with missing default arguments in\n+\tpreference to that of the fndecl.  Attempt to record the location\n+\tof the first parameter with a default argument and emit a note\n+\tfor the first parameter that's missing one.\n+\t* typeck.c (convert_arguments): When complaining about parameters\n+\twith incomplete types, attempt to use the location of the\n+\targument.  Where available, add a note showing the pertinent\n+\tparameter in the fndecl.\n+\t(convert_for_assignment): When complaining about bad conversions\n+\tat function calls, use the location of the unstripped argument.\n+\t(convert_for_initialization): When checking for bogus references,\n+\tadd an auto_diagnostic_group, and update the note to use the\n+\tlocation of the pertinent parameter, rather than just the callee.\n+\n 2018-12-06  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* decl2.c (grokbitfield): Use DECL_SOURCE_LOCATION in error message;"}, {"sha": "148e2d5580fc9dcfd3caed281a1ed5ab82ceba80", "filename": "gcc/cp/call.c", "status": "modified", "additions": 48, "deletions": 30, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f11854d42ab072a260ab9ee019a527acf03c5107/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f11854d42ab072a260ab9ee019a527acf03c5107/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=f11854d42ab072a260ab9ee019a527acf03c5107", "patch": "@@ -6681,13 +6681,17 @@ conversion_null_warnings (tree totype, tree expr, tree fn, int argnum)\n   if (null_node_p (expr) && TREE_CODE (totype) != BOOLEAN_TYPE\n       && ARITHMETIC_TYPE_P (totype))\n     {\n-      location_t loc =\n-\texpansion_point_location_if_in_system_header (input_location);\n-\n+      location_t loc = EXPR_LOC_OR_LOC (expr, input_location);\n+      loc = expansion_point_location_if_in_system_header (loc);\n       if (fn)\n-\twarning_at (loc, OPT_Wconversion_null,\n-\t\t    \"passing NULL to non-pointer argument %P of %qD\",\n-\t\t    argnum, fn);\n+\t{\n+\t  auto_diagnostic_group d;\n+\t  if (warning_at (loc, OPT_Wconversion_null,\n+\t\t\t  \"passing NULL to non-pointer argument %P of %qD\",\n+\t\t\t  argnum, fn))\n+\t    inform (get_fndecl_argument_location (fn, argnum),\n+\t\t    \"  declared here\");\n+\t}\n       else\n \twarning_at (loc, OPT_Wconversion_null,\n \t\t    \"converting to non-pointer type %qT from NULL\", totype);\n@@ -6697,12 +6701,18 @@ conversion_null_warnings (tree totype, tree expr, tree fn, int argnum)\n   else if (TREE_CODE (TREE_TYPE (expr)) == BOOLEAN_TYPE\n \t   && TYPE_PTR_P (totype))\n     {\n+      location_t loc = EXPR_LOC_OR_LOC (expr, input_location);\n       if (fn)\n-\twarning_at (input_location, OPT_Wconversion_null,\n-\t\t    \"converting %<false%> to pointer type for argument %P \"\n-\t\t    \"of %qD\", argnum, fn);\n+\t{\n+\t  auto_diagnostic_group d;\n+\t  if (warning_at (loc, OPT_Wconversion_null,\n+\t\t\t  \"converting %<false%> to pointer type for argument \"\n+\t\t\t  \"%P of %qD\", argnum, fn))\n+\t    inform (get_fndecl_argument_location (fn, argnum),\n+\t\t    \"  declared here\");\n+\t}\n       else\n-\twarning_at (input_location, OPT_Wconversion_null,\n+\twarning_at (loc, OPT_Wconversion_null,\n \t\t    \"converting %<false%> to pointer type %qT\", totype);\n     }\n   /* Handle zero as null pointer warnings for cases other\n@@ -6740,6 +6750,11 @@ maybe_print_user_conv_context (conversion *convs)\n location_t\n get_fndecl_argument_location (tree fndecl, int argnum)\n {\n+  /* The locations of implicitly-declared functions are likely to be\n+     more meaningful than those of their parameters.  */\n+  if (DECL_ARTIFICIAL (fndecl))\n+    return DECL_SOURCE_LOCATION (fndecl);\n+\n   int i;\n   tree param;\n \n@@ -6757,6 +6772,18 @@ get_fndecl_argument_location (tree fndecl, int argnum)\n   return DECL_SOURCE_LOCATION (param);\n }\n \n+/* If FNDECL is non-NULL, issue a note highlighting ARGNUM\n+   within its declaration (or the fndecl itself if something went\n+   wrong).  */\n+\n+void\n+maybe_inform_about_fndecl_for_bogus_argument_init (tree fn, int argnum)\n+{\n+  if (fn)\n+    inform (get_fndecl_argument_location (fn, argnum),\n+\t    \"  initializing argument %P of %qD\", argnum, fn);\n+}\n+\n /* Perform the conversions in CONVS on the expression EXPR.  FN and\n    ARGNUM are used for diagnostics.  ARGNUM is zero based, -1\n    indicates the `this' argument of a method.  INNER is nonzero when\n@@ -6834,9 +6861,8 @@ convert_like_real (conversion *convs, tree expr, tree fn, int argnum,\n \t\t\t\t\t     complain);\n \t      else\n \t\texpr = cp_convert (totype, expr, complain);\n-\t      if (complained && fn)\n-\t\tinform (DECL_SOURCE_LOCATION (fn),\n-\t\t\t\"  initializing argument %P of %qD\", argnum, fn);\n+\t      if (complained)\n+\t\tmaybe_inform_about_fndecl_for_bogus_argument_init (fn, argnum);\n \t      return expr;\n \t    }\n \t  else if (t->kind == ck_user || !t->bad_p)\n@@ -6863,9 +6889,8 @@ convert_like_real (conversion *convs, tree expr, tree fn, int argnum,\n \t\t\t\t  \"invalid conversion from %qH to %qI\",\n \t\t\t\t  TREE_TYPE (expr), totype);\n \t}\n-      if (complained && fn)\n-\tinform (get_fndecl_argument_location (fn, argnum),\n-\t\t\"  initializing argument %P of %qD\", argnum, fn);\n+      if (complained)\n+\tmaybe_inform_about_fndecl_for_bogus_argument_init (fn, argnum);\n \n       return cp_convert (totype, expr, complain);\n     }\n@@ -6987,9 +7012,7 @@ convert_like_real (conversion *convs, tree expr, tree fn, int argnum,\n \t\t       ? LOOKUP_IMPLICIT : LOOKUP_NORMAL);\n \t  build_user_type_conversion (totype, convs->u.expr, flags, complain);\n \t  gcc_assert (seen_error ());\n-\t  if (fn)\n-\t    inform (DECL_SOURCE_LOCATION (fn),\n-\t\t    \"  initializing argument %P of %qD\", argnum, fn);\n+\t  maybe_inform_about_fndecl_for_bogus_argument_init (fn, argnum);\n \t}\n       return error_mark_node;\n \n@@ -7083,9 +7106,7 @@ convert_like_real (conversion *convs, tree expr, tree fn, int argnum,\n \t    {\n \t      auto_diagnostic_group d;\n \t      maybe_print_user_conv_context (convs);\n-\t      if (fn)\n-\t\tinform (DECL_SOURCE_LOCATION (fn),\n-\t\t\t\"  initializing argument %P of %qD\", argnum, fn);\n+\t      maybe_inform_about_fndecl_for_bogus_argument_init (fn, argnum);\n \t    }\n \t  return error_mark_node;\n \t}\n@@ -7136,9 +7157,7 @@ convert_like_real (conversion *convs, tree expr, tree fn, int argnum,\n \t{\n \t  auto_diagnostic_group d;\n \t  maybe_print_user_conv_context (convs);\n-\t  if (fn)\n-\t    inform (DECL_SOURCE_LOCATION (fn),\n-\t\t    \"  initializing argument %P of %qD\", argnum, fn);\n+\t  maybe_inform_about_fndecl_for_bogus_argument_init (fn, argnum);\n \t}\n \n       return build_cplus_new (totype, expr, complain);\n@@ -7165,9 +7184,8 @@ convert_like_real (conversion *convs, tree expr, tree fn, int argnum,\n \t    else\n \t      gcc_unreachable ();\n \t    maybe_print_user_conv_context (convs);\n-\t    if (fn)\n-\t      inform (DECL_SOURCE_LOCATION (fn),\n-\t\t      \"  initializing argument %P of %qD\", argnum, fn);\n+\t    maybe_inform_about_fndecl_for_bogus_argument_init (fn, argnum);\n+\n \t    return error_mark_node;\n \t  }\n \n@@ -9299,8 +9317,8 @@ complain_about_bad_argument (location_t arg_loc,\n   error_at (&richloc,\n \t    \"cannot convert %qH to %qI\",\n \t    from_type, to_type);\n-  inform (get_fndecl_argument_location (fndecl, parmnum),\n-\t  \"  initializing argument %P of %qD\", parmnum, fndecl);\n+  maybe_inform_about_fndecl_for_bogus_argument_init (fndecl,\n+\t\t\t\t\t\t     parmnum);\n }\n \n /* Subroutine of build_new_method_call_1, for where there are no viable"}, {"sha": "c1f99315b06dbaf0e6103f2a65b377864e0a001e", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f11854d42ab072a260ab9ee019a527acf03c5107/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f11854d42ab072a260ab9ee019a527acf03c5107/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=f11854d42ab072a260ab9ee019a527acf03c5107", "patch": "@@ -6145,6 +6145,7 @@ extern location_t get_fndecl_argument_location  (tree, int);\n extern void complain_about_bad_argument\t(location_t arg_loc,\n \t\t\t\t\t\t tree from_type, tree to_type,\n \t\t\t\t\t\t tree fndecl, int parmnum);\n+extern void maybe_inform_about_fndecl_for_bogus_argument_init (tree, int);\n \n \n /* A class for recording information about access failures (e.g. private"}, {"sha": "f996a277dae15f70f40de4a5a645b77cbad65f68", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f11854d42ab072a260ab9ee019a527acf03c5107/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f11854d42ab072a260ab9ee019a527acf03c5107/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=f11854d42ab072a260ab9ee019a527acf03c5107", "patch": "@@ -5182,14 +5182,37 @@ check_default_args (tree x)\n {\n   tree arg = TYPE_ARG_TYPES (TREE_TYPE (x));\n   bool saw_def = false;\n+  bool noted_first_def = false;\n+  int idx_of_first_default_arg = 0;\n+  location_t loc_of_first_default_arg = UNKNOWN_LOCATION;\n   int i = 0 - (TREE_CODE (TREE_TYPE (x)) == METHOD_TYPE);\n+  tree fndecl = STRIP_TEMPLATE (x);\n+  auto_diagnostic_group d;\n   for (; arg && arg != void_list_node; arg = TREE_CHAIN (arg), ++i)\n     {\n       if (TREE_PURPOSE (arg))\n-\tsaw_def = true;\n+\t{\n+\t  if (!saw_def)\n+\t    {\n+\t      saw_def = true;\n+\t      idx_of_first_default_arg = i;\n+\t      location_t loc = get_fndecl_argument_location (fndecl, i);\n+\t      if (loc != DECL_SOURCE_LOCATION (x))\n+\t\tloc_of_first_default_arg = loc;\n+\t    }\n+\t}\n       else if (saw_def && !PACK_EXPANSION_P (TREE_VALUE (arg)))\n \t{\n-\t  error (\"default argument missing for parameter %P of %q+#D\", i, x);\n+\t  error_at (get_fndecl_argument_location (fndecl, i),\n+\t\t    \"default argument missing for parameter %P of %q#D\", i, x);\n+\t  if (loc_of_first_default_arg != UNKNOWN_LOCATION\n+\t      && !noted_first_def)\n+\t    {\n+\t      inform (loc_of_first_default_arg,\n+\t\t      \"...following parameter %P which has a default argument\",\n+\t\t      idx_of_first_default_arg);\n+\t      noted_first_def = true;\n+\t    }\n \t  TREE_PURPOSE (arg) = error_mark_node;\n \t}\n     }"}, {"sha": "ac0c81155b5a7db77896976c20b9dbf042df133e", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f11854d42ab072a260ab9ee019a527acf03c5107/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f11854d42ab072a260ab9ee019a527acf03c5107/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=f11854d42ab072a260ab9ee019a527acf03c5107", "patch": "@@ -4013,11 +4013,19 @@ convert_arguments (tree typelist, vec<tree, va_gc> **values, tree fndecl,\n \t    {\n               if (complain & tf_error)\n                 {\n+\t\t  location_t loc = EXPR_LOC_OR_LOC (val, input_location);\n                   if (fndecl)\n-                    error (\"parameter %P of %qD has incomplete type %qT\",\n-                           i, fndecl, type);\n+\t\t    {\n+\t\t      auto_diagnostic_group d;\n+\t\t      error_at (loc,\n+\t\t\t\t\"parameter %P of %qD has incomplete type %qT\",\n+\t\t\t\ti, fndecl, type);\n+\t\t      inform (get_fndecl_argument_location (fndecl, i),\n+\t\t\t      \"  declared here\");\n+\t\t    }\n                   else\n-                    error (\"parameter %P has incomplete type %qT\", i, type);\n+\t\t    error_at (loc, \"parameter %P has incomplete type %qT\", i,\n+\t\t\t      type);\n                 }\n \t      parmval = error_mark_node;\n \t    }\n@@ -8801,6 +8809,8 @@ convert_for_assignment (tree type, tree rhs,\n   tree rhstype;\n   enum tree_code coder;\n \n+  location_t rhs_loc = EXPR_LOC_OR_LOC (rhs, input_location);\n+\n   /* Strip NON_LVALUE_EXPRs since we aren't using as an lvalue.  */\n   if (TREE_CODE (rhs) == NON_LVALUE_EXPR)\n     rhs = TREE_OPERAND (rhs, 0);\n@@ -8907,7 +8917,7 @@ convert_for_assignment (tree type, tree rhs,\n \t\t\t\t\t\t   parmnum, complain, flags);\n \t\t}\n \t      else if (fndecl)\n-\t\tcomplain_about_bad_argument (cp_expr_location (rhs),\n+\t\tcomplain_about_bad_argument (rhs_loc,\n \t\t\t\t\t     rhstype, type,\n \t\t\t\t\t     fndecl, parmnum);\n \t      else\n@@ -9074,6 +9084,7 @@ convert_for_initialization (tree exp, tree type, tree rhs, int flags,\n \n   if (codel == REFERENCE_TYPE)\n     {\n+      auto_diagnostic_group d;\n       /* This should eventually happen in convert_arguments.  */\n       int savew = 0, savee = 0;\n \n@@ -9083,9 +9094,8 @@ convert_for_initialization (tree exp, tree type, tree rhs, int flags,\n \n       if (fndecl\n \t  && (warningcount + werrorcount > savew || errorcount > savee))\n-\tinform (DECL_SOURCE_LOCATION (fndecl),\n+\tinform (get_fndecl_argument_location (fndecl, parmnum),\n \t\t\"in passing argument %P of %qD\", parmnum, fndecl);\n-\n       return rhs;\n     }\n "}, {"sha": "1adb751cd34bd6fe8c0ba5778bffb599c1c82a9b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f11854d42ab072a260ab9ee019a527acf03c5107/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f11854d42ab072a260ab9ee019a527acf03c5107/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f11854d42ab072a260ab9ee019a527acf03c5107", "patch": "@@ -1,3 +1,12 @@\n+2018-12-06  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c++/85110\n+\t* g++.dg/diagnostic/missing-default-args.C: New test.\n+\t* g++.dg/diagnostic/param-type-mismatch-3.C: New test.\n+\t* g++.dg/diagnostic/param-type-mismatch.C: Add tests for invalid\n+\treferences and incomplete types.\n+\t* g++.dg/warn/Wconversion-null-4.C: New test.\n+\n 2018-12-06  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/87598"}, {"sha": "2e9401d734db4e8be6b9b225a90fdab794ae4195", "filename": "gcc/testsuite/g++.dg/diagnostic/missing-default-args.C", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f11854d42ab072a260ab9ee019a527acf03c5107/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fmissing-default-args.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f11854d42ab072a260ab9ee019a527acf03c5107/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fmissing-default-args.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fmissing-default-args.C?ref=f11854d42ab072a260ab9ee019a527acf03c5107", "patch": "@@ -0,0 +1,73 @@\n+// { dg-options \"-fdiagnostics-show-caret\" }\n+\n+/* Function.  */\n+\n+void test_1 (int a, int b = 42, int c, int d); // { dg-line test_1 }\n+\n+// { dg-error \"default argument missing for parameter 3 of \" \"\" { target *-*-* } test_1 }\n+/* { dg-begin-multiline-output \"\" }\n+ void test_1 (int a, int b = 42, int c, int d);\n+                                 ~~~~^\n+   { dg-end-multiline-output \"\" } */\n+// { dg-message \"...following parameter 2 which has a default argument\" \"\" { target *-*-* } test_1 }\n+/* { dg-begin-multiline-output \"\" }\n+ void test_1 (int a, int b = 42, int c, int d);\n+                     ~~~~^~~~~~\n+   { dg-end-multiline-output \"\" } */\n+// { dg-error \"default argument missing for parameter 4 of \" \"\" { target *-*-* } test_1 }\n+/* { dg-begin-multiline-output \"\" }\n+ void test_1 (int a, int b = 42, int c, int d);\n+                                        ~~~~^\n+   { dg-end-multiline-output \"\" } */\n+\n+\n+/* Non-static member fn.  */\n+\n+struct test_2\n+{\n+  void member_2 (int a, int b = 42, int c); // { dg-line test_2 }\n+};\n+// { dg-error \"default argument missing for parameter 3 of \" \"\" { target *-*-* } test_2 }\n+/* { dg-begin-multiline-output \"\" }\n+   void member_2 (int a, int b = 42, int c);\n+                                     ~~~~^\n+   { dg-end-multiline-output \"\" } */\n+// { dg-message \"...following parameter 2 which has a default argument\" \"\" { target *-*-* } test_2 }\n+/* { dg-begin-multiline-output \"\" }\n+   void member_2 (int a, int b = 42, int c);\n+                         ~~~~^~~~~~\n+   { dg-end-multiline-output \"\" } */\n+\n+\n+/* Static member fn.  */\n+\n+struct test_3\n+{\n+  static void member_3 (int a, int b = 42, int c); // { dg-line test_3 }\n+};\n+// { dg-error \"default argument missing for parameter 3 of \" \"\" { target *-*-* } test_3 }\n+/* { dg-begin-multiline-output \"\" }\n+   static void member_3 (int a, int b = 42, int c);\n+                                            ~~~~^\n+   { dg-end-multiline-output \"\" } */\n+// { dg-message \"...following parameter 2 which has a default argument\" \"\" { target *-*-* } test_3 }\n+/* { dg-begin-multiline-output \"\" }\n+   static void member_3 (int a, int b = 42, int c);\n+                                ~~~~^~~~~~\n+   { dg-end-multiline-output \"\" } */\n+\n+\n+/* Template.  */\n+\n+template <typename Type>\n+void test_4 (int a, int b = 42, int c); // { dg-line test_4 }\n+// { dg-error \"default argument missing for parameter 3 of \" \"\" { target *-*-* } test_4 }\n+/* { dg-begin-multiline-output \"\" }\n+ void test_4 (int a, int b = 42, int c);\n+                                 ~~~~^\n+   { dg-end-multiline-output \"\" } */\n+// { dg-message \"...following parameter 2 which has a default argument\" \"\" { target *-*-* } test_4 }\n+/* { dg-begin-multiline-output \"\" }\n+ void test_4 (int a, int b = 42, int c);\n+                     ~~~~^~~~~~\n+   { dg-end-multiline-output \"\" } */"}, {"sha": "3ffbbd8a6c831aa65a5d0dbd9d2151b473491aaa", "filename": "gcc/testsuite/g++.dg/diagnostic/param-type-mismatch-3.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f11854d42ab072a260ab9ee019a527acf03c5107/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fparam-type-mismatch-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f11854d42ab072a260ab9ee019a527acf03c5107/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fparam-type-mismatch-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fparam-type-mismatch-3.C?ref=f11854d42ab072a260ab9ee019a527acf03c5107", "patch": "@@ -0,0 +1,26 @@\n+// { dg-do compile { target c++14 } }\n+// { dg-options \"-fdiagnostics-show-caret\" }\n+\n+void f2(int, char (*)(int), int) { } // { dg-line f2 }\n+\n+void test_1 ()\n+{\n+  auto glambda = [](auto a) { return a; }; // { dg-line candidate }\n+  int (*fp)(int) = glambda;\n+  f2(1, glambda, 3); // { dg-error \"invalid user-defined conversion\" }\n+  /* { dg-begin-multiline-output \"\" }\n+   f2(1, glambda, 3);\n+         ^~~~~~~\n+     { dg-end-multiline-output \"\" } */\n+  // { dg-message \"candidate is: \" \"\" { target *-*-* } candidate }\n+  /* { dg-begin-multiline-output \"\" }\n+   auto glambda = [](auto a) { return a; };\n+                  ^\n+     { dg-end-multiline-output \"\" } */\n+  // { dg-message \"no known conversion from \" \"\" { target *-*-* } candidate }\n+  // { dg-message \"initializing argument 2 of \" \"\" { target *-*-* } f2 }\n+  /* { dg-begin-multiline-output \"\" }\n+ void f2(int, char (*)(int), int) { }\n+              ^~~~~~~~~~~~~\n+     { dg-end-multiline-output \"\" } */\n+}"}, {"sha": "54ffb06d7ace383adf5c0c7ca544adc46c9db945", "filename": "gcc/testsuite/g++.dg/diagnostic/param-type-mismatch.C", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f11854d42ab072a260ab9ee019a527acf03c5107/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fparam-type-mismatch.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f11854d42ab072a260ab9ee019a527acf03c5107/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fparam-type-mismatch.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fparam-type-mismatch.C?ref=f11854d42ab072a260ab9ee019a527acf03c5107", "patch": "@@ -224,4 +224,45 @@ int test_11 (int first, int second, float third)\n      { dg-end-multiline-output \"\" } */\n }\n \n+/* Bad reference.  */\n+\n+struct s12;\n+\n+extern int callee_12 (int one, s12 &second, float three); // { dg-line callee_12 }\n+\n+int test_12 (int first, int second, float third)\n+{\n+  return callee_12 (first, second, third); // { dg-error \"invalid initialization of reference of \" }\n+  /* { dg-begin-multiline-output \"\" }\n+   return callee_12 (first, second, third);\n+                            ^~~~~~\n+     { dg-end-multiline-output \"\" } */\n+  // { dg-message \"in passing argument 2 of \" \"\" { target *-*-* } callee_12 }\n+  /* { dg-begin-multiline-output \"\" }\n+ extern int callee_12 (int one, s12 &second, float three);\n+                                ~~~~~^~~~~~\n+     { dg-end-multiline-output \"\" } */\n+}\n+\n+/* Incomplete type.  */\n+\n+struct s13;\n+\n+extern int callee_13 (int one, s13 second, float three); // { dg-line callee_13 }\n+\n+int test_13 (int first, int second, float third)\n+{\n+  return callee_13 (first, second, third); // { dg-error \"has incomplete type\" }\n+  /* { dg-begin-multiline-output \"\" }\n+   return callee_13 (first, second, third);\n+                            ^~~~~~\n+     { dg-end-multiline-output \"\" } */\n+  // { dg-message \"declared here\" \"\" { target *-*-* } callee_13 }\n+  /* { dg-begin-multiline-output \"\" }\n+ extern int callee_13 (int one, s13 second, float three);\n+                                ~~~~^~~~~~\n+     { dg-end-multiline-output \"\" } */\n+}\n+\n+\n // TODO: template callsite"}, {"sha": "465dc5a14ea54ba57fd8879360f3c08bab5a783c", "filename": "gcc/testsuite/g++.dg/warn/Wconversion-null-4.C", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f11854d42ab072a260ab9ee019a527acf03c5107/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWconversion-null-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f11854d42ab072a260ab9ee019a527acf03c5107/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWconversion-null-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWconversion-null-4.C?ref=f11854d42ab072a260ab9ee019a527acf03c5107", "patch": "@@ -0,0 +1,43 @@\n+// { dg-do compile  }\n+// { dg-options \"-Wconversion-null -fdiagnostics-show-caret\" }\n+\n+#include <stddef.h>\n+\n+void callee_1 (int, int, int) {} // { dg-message \"declared here\" }\n+\n+void caller_1 (void)\n+{\n+  callee_1 (0, NULL, 2); // { dg-warning \"passing NULL to non-pointer argument 2 of\" }\n+  /* { dg-begin-multiline-output \"\" }\n+   callee_1 (0, NULL, 2);\n+                ^~~~\n+     { dg-end-multiline-output \"\" } */\n+  /* { dg-begin-multiline-output \"\" }\n+ void callee_1 (int, int, int) {}\n+                     ^~~\n+     { dg-end-multiline-output \"\" } */\n+}\n+\n+void callee_2 (int, void *, int) {} // { dg-message \"declared here\" \"\" { target { ! c++11 } } }\n+// { dg-message \"initializing argument 2 of \" \"\" { target c++11 } .-1 }\n+\n+void caller_2 (void)\n+{\n+  callee_2 (0, false, 2); // { dg-warning \"converting 'false' to pointer type for argument 2 of \" \"\" { target { ! c++11 } } }\n+  // { dg-error \"cannot convert\" \"\" { target c++11 } .-1 }\n+\n+  /* { dg-begin-multiline-output \"\" }\n+   callee_2 (0, false, 2);\n+                ^~~~~\n+     { dg-end-multiline-output \"\" { target { ! c++11 } } } */\n+  /* { dg-begin-multiline-output \"\" }\n+   callee_2 (0, false, 2);\n+                ^~~~~\n+                |\n+                bool\n+     { dg-end-multiline-output \"\" { target c++11 } } */\n+  /* { dg-begin-multiline-output \"\" }\n+ void callee_2 (int, void *, int) {}\n+                     ^~~~~~\n+     { dg-end-multiline-output \"\" } */\n+}"}]}