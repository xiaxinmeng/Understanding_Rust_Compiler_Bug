{"sha": "48d79c431ebc7d3b5e41ffc3d331cce06ca6a8c0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDhkNzljNDMxZWJjN2QzYjVlNDFmZmMzZDMzMWNjZTA2Y2E2YThjMA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2002-01-25T21:46:07Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2002-01-25T21:46:07Z"}, "message": "unroll.c (unroll_loop): Lower final_value to nonmemory operand; avoid it's copies.\n\n\t* unroll.c (unroll_loop): Lower final_value to nonmemory operand;\n\tavoid it's copies.\n\nFrom-SVN: r49224", "tree": {"sha": "e33410df67450dee1a095f29c172688a6e343cd5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e33410df67450dee1a095f29c172688a6e343cd5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/48d79c431ebc7d3b5e41ffc3d331cce06ca6a8c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48d79c431ebc7d3b5e41ffc3d331cce06ca6a8c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48d79c431ebc7d3b5e41ffc3d331cce06ca6a8c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48d79c431ebc7d3b5e41ffc3d331cce06ca6a8c0/comments", "author": null, "committer": null, "parents": [{"sha": "995b5904391de6b8060e74e21654ed2ec5c8cd76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/995b5904391de6b8060e74e21654ed2ec5c8cd76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/995b5904391de6b8060e74e21654ed2ec5c8cd76"}], "stats": {"total": 20, "additions": 19, "deletions": 1}, "files": [{"sha": "43048011771b16279f307d6623223021a6578e87", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48d79c431ebc7d3b5e41ffc3d331cce06ca6a8c0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48d79c431ebc7d3b5e41ffc3d331cce06ca6a8c0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=48d79c431ebc7d3b5e41ffc3d331cce06ca6a8c0", "patch": "@@ -1,3 +1,8 @@\n+Fri Jan 25 22:42:49 CET 2002  Jan Hubicka  <jh@suse.cz>\n+\n+\t* unroll.c (unroll_loop): Lower final_value to nonmemory operand;\n+\tavoid it's copies.\n+\n Fri Jan 25 08:26:19 2002  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* builtins.c (expand_builtin_strncpy): Use integer_zerop instead"}, {"sha": "9a0cfcf6871cf2fd3a199b40fa7f2d36d42a7983", "filename": "gcc/unroll.c", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48d79c431ebc7d3b5e41ffc3d331cce06ca6a8c0/gcc%2Funroll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48d79c431ebc7d3b5e41ffc3d331cce06ca6a8c0/gcc%2Funroll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funroll.c?ref=48d79c431ebc7d3b5e41ffc3d331cce06ca6a8c0", "patch": "@@ -930,6 +930,19 @@ unroll_loop (loop, insn_count, strength_reduce_p)\n \n \t  start_sequence ();\n \n+\t  /* Final value may have form of (PLUS val1 const1_rtx).  We need\n+\t     to convert it into general operand, so compute the real value.  */\n+\n+\t  if (GET_CODE (final_value) == PLUS)\n+\t    {\n+\t      final_value = expand_simple_binop (mode, PLUS,\n+\t\t\t\t\t\t copy_rtx (XEXP (final_value, 0)),\n+\t\t\t\t\t\t copy_rtx (XEXP (final_value, 1)),\n+\t\t\t\t\t\t NULL_RTX, 0, OPTAB_LIB_WIDEN);\n+\t    }\n+\t  if (!nonmemory_operand (final_value, VOIDmode))\n+\t    final_value = force_reg (mode, copy_rtx (final_value));\n+\n \t  /* Calculate the difference between the final and initial values.\n \t     Final value may be a (plus (reg x) (const_int 1)) rtx.\n \t     Let the following cse pass simplify this if initial value is\n@@ -949,7 +962,7 @@ unroll_loop (loop, insn_count, strength_reduce_p)\n \t     so we can pretend that the overflow value is 0/~0.  */\n \n \t  if (cc == NE || less_p != neg_inc)\n-\t    diff = expand_simple_binop (mode, MINUS, copy_rtx (final_value),\n+\t    diff = expand_simple_binop (mode, MINUS, final_value,\n \t\t\t\t\tcopy_rtx (initial_value), NULL_RTX, 0,\n \t\t\t\t\tOPTAB_LIB_WIDEN);\n \t  else"}]}