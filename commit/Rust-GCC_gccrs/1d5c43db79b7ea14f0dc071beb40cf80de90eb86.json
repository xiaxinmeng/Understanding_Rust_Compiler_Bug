{"sha": "1d5c43db79b7ea14f0dc071beb40cf80de90eb86", "node_id": "C_kwDOANBUbNoAKDFkNWM0M2RiNzliN2VhMTRmMGRjMDcxYmViNDBjZjgwZGU5MGViODY", "commit": {"author": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2021-11-01T13:49:46Z"}, "committer": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2021-11-01T13:49:46Z"}, "message": "AArch64: Add better costing for vector constants and operations\n\nThis patch adds extended costing to cost the creation of constants and the\nmanipulation of constants.  The default values provided are based on\narchitectural expectations and each cost models can be individually tweaked as\nneeded.\n\nThe changes in this patch covers:\n\n* Construction of PARALLEL or CONST_VECTOR:\n  Adds better costing for vector of constants which is based on the constant\n  being created and the instruction that can be used to create it.  i.e. a movi\n  is cheaper than a literal load etc.\n* Construction of a vector through a vec_dup.\n\ngcc/ChangeLog:\n\n\t* config/arm/aarch-common-protos.h (struct vector_cost_table): Add\n\tmovi, dup and extract costing fields.\n\t* config/aarch64/aarch64-cost-tables.h (qdf24xx_extra_costs,\n\tthunderx_extra_costs, thunderx2t99_extra_costs,\n\tthunderx3t110_extra_costs, tsv110_extra_costs, a64fx_extra_costs): Use\n\tthem.\n\t* config/arm/aarch-cost-tables.h (generic_extra_costs,\n\tcortexa53_extra_costs, cortexa57_extra_costs, cortexa76_extra_costs,\n\texynosm1_extra_costs, xgene1_extra_costs): Likewise\n\t* config/aarch64/aarch64-simd.md (aarch64_simd_dup<mode>): Add r->w dup.\n\t* config/aarch64/aarch64.c (aarch64_rtx_costs): Add extra costs.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/aarch64/vect-cse-codegen.c: New test.", "tree": {"sha": "7ff0042d0c3e7465e31e34ee3c79575a845d1298", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7ff0042d0c3e7465e31e34ee3c79575a845d1298"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d5c43db79b7ea14f0dc071beb40cf80de90eb86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d5c43db79b7ea14f0dc071beb40cf80de90eb86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d5c43db79b7ea14f0dc071beb40cf80de90eb86", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d5c43db79b7ea14f0dc071beb40cf80de90eb86/comments", "author": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68b48f3f4c49132cc6bfb16e65f8b6fd939689c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68b48f3f4c49132cc6bfb16e65f8b6fd939689c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68b48f3f4c49132cc6bfb16e65f8b6fd939689c7"}], "stats": {"total": 208, "additions": 188, "deletions": 20}, "files": [{"sha": "bb499a1eae62a145f1665d521f57c98b49ac5389", "filename": "gcc/config/aarch64/aarch64-cost-tables.h", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5c43db79b7ea14f0dc071beb40cf80de90eb86/gcc%2Fconfig%2Faarch64%2Faarch64-cost-tables.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5c43db79b7ea14f0dc071beb40cf80de90eb86/gcc%2Fconfig%2Faarch64%2Faarch64-cost-tables.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-cost-tables.h?ref=1d5c43db79b7ea14f0dc071beb40cf80de90eb86", "patch": "@@ -124,7 +124,10 @@ const struct cpu_cost_table qdf24xx_extra_costs =\n   /* Vector */\n   {\n     COSTS_N_INSNS (1),  /* alu.  */\n-    COSTS_N_INSNS (4)   /* mult.  */\n+    COSTS_N_INSNS (4),  /* mult.  */\n+    COSTS_N_INSNS (1),  /* movi.  */\n+    COSTS_N_INSNS (2),  /* dup.  */\n+    COSTS_N_INSNS (2)   /* extract.  */\n   }\n };\n \n@@ -229,7 +232,10 @@ const struct cpu_cost_table thunderx_extra_costs =\n   /* Vector */\n   {\n     COSTS_N_INSNS (1),\t/* Alu.  */\n-    COSTS_N_INSNS (4)\t/* mult.  */\n+    COSTS_N_INSNS (4),\t/* mult.  */\n+    COSTS_N_INSNS (1),\t/* movi.  */\n+    COSTS_N_INSNS (2),\t/* dup.  */\n+    COSTS_N_INSNS (2)\t/* extract.  */\n   }\n };\n \n@@ -333,7 +339,10 @@ const struct cpu_cost_table thunderx2t99_extra_costs =\n   /* Vector */\n   {\n     COSTS_N_INSNS (1),\t/* Alu.  */\n-    COSTS_N_INSNS (4)\t/* Mult.  */\n+    COSTS_N_INSNS (4),\t/* Mult.  */\n+    COSTS_N_INSNS (1),\t/* movi.  */\n+    COSTS_N_INSNS (2),\t/* dup.  */\n+    COSTS_N_INSNS (2)\t/* extract.  */\n   }\n };\n \n@@ -437,7 +446,10 @@ const struct cpu_cost_table thunderx3t110_extra_costs =\n   /* Vector */\n   {\n     COSTS_N_INSNS (1),\t/* Alu.  */\n-    COSTS_N_INSNS (4)\t/* Mult.  */\n+    COSTS_N_INSNS (4),\t/* Mult.  */\n+    COSTS_N_INSNS (1),\t/* movi.  */\n+    COSTS_N_INSNS (2),\t/* dup.  */\n+    COSTS_N_INSNS (2)\t/* extract.  */\n   }\n };\n \n@@ -542,7 +554,10 @@ const struct cpu_cost_table tsv110_extra_costs =\n   /* Vector */\n   {\n     COSTS_N_INSNS (1),  /* alu.  */\n-    COSTS_N_INSNS (4)   /* mult.  */\n+    COSTS_N_INSNS (4),  /* mult.  */\n+    COSTS_N_INSNS (1),  /* movi.  */\n+    COSTS_N_INSNS (2),  /* dup.  */\n+    COSTS_N_INSNS (2)   /* extract.  */\n   }\n };\n \n@@ -646,7 +661,10 @@ const struct cpu_cost_table a64fx_extra_costs =\n   /* Vector */\n   {\n     COSTS_N_INSNS (1),  /* alu.  */\n-    COSTS_N_INSNS (4)   /* mult.  */\n+    COSTS_N_INSNS (4),  /* mult.  */\n+    COSTS_N_INSNS (1),  /* movi.  */\n+    COSTS_N_INSNS (2),  /* dup.  */\n+    COSTS_N_INSNS (2)   /* extract.  */\n   }\n };\n "}, {"sha": "61c3d7e195c510da88aa513f99af5f76f4d696e7", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5c43db79b7ea14f0dc071beb40cf80de90eb86/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5c43db79b7ea14f0dc071beb40cf80de90eb86/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=1d5c43db79b7ea14f0dc071beb40cf80de90eb86", "patch": "@@ -74,12 +74,14 @@\n )\n \n (define_insn \"aarch64_simd_dup<mode>\"\n-  [(set (match_operand:VDQF_F16 0 \"register_operand\" \"=w\")\n+  [(set (match_operand:VDQF_F16 0 \"register_operand\" \"=w,w\")\n \t(vec_duplicate:VDQF_F16\n-\t  (match_operand:<VEL> 1 \"register_operand\" \"w\")))]\n+\t  (match_operand:<VEL> 1 \"register_operand\" \"w,r\")))]\n   \"TARGET_SIMD\"\n-  \"dup\\\\t%0.<Vtype>, %1.<Vetype>[0]\"\n-  [(set_attr \"type\" \"neon_dup<q>\")]\n+  \"@\n+   dup\\\\t%0.<Vtype>, %1.<Vetype>[0]\n+   dup\\\\t%0.<Vtype>, %<vw>1\"\n+  [(set_attr \"type\" \"neon_dup<q>, neon_from_gp<q>\")]\n )\n \n (define_insn \"aarch64_dup_lane<mode>\""}, {"sha": "fd9249c62b3400d2dea68c7b64a3db7dca6324ad", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 34, "deletions": 4, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5c43db79b7ea14f0dc071beb40cf80de90eb86/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5c43db79b7ea14f0dc071beb40cf80de90eb86/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=1d5c43db79b7ea14f0dc071beb40cf80de90eb86", "patch": "@@ -12701,7 +12701,7 @@ aarch64_rtx_costs (rtx x, machine_mode mode, int outer ATTRIBUTE_UNUSED,\n   rtx op0, op1, op2;\n   const struct cpu_cost_table *extra_cost\n     = aarch64_tune_params.insn_extra_cost;\n-  int code = GET_CODE (x);\n+  rtx_code code = GET_CODE (x);\n   scalar_int_mode int_mode;\n \n   /* By default, assume that everything has equivalent cost to the\n@@ -13462,8 +13462,7 @@ aarch64_rtx_costs (rtx x, machine_mode mode, int outer ATTRIBUTE_UNUSED,\n \n \t we must cost the explicit register move.  */\n       if (mode == DImode\n-\t  && GET_MODE (op0) == SImode\n-\t  && outer == SET)\n+\t  && GET_MODE (op0) == SImode)\n \t{\n \t  int op_cost = rtx_cost (op0, VOIDmode, ZERO_EXTEND, 0, speed);\n \n@@ -14002,8 +14001,39 @@ aarch64_rtx_costs (rtx x, machine_mode mode, int outer ATTRIBUTE_UNUSED,\n \t\t\t     mode, MULT, 1, speed);\n           return true;\n         }\n+\tbreak;\n+    case CONST_VECTOR:\n+\t{\n+\t  /* Load using MOVI/MVNI.  */\n+\t  if (aarch64_simd_valid_immediate (x, NULL))\n+\t    *cost = extra_cost->vect.movi;\n+\t  else /* Load using constant pool.  */\n+\t    *cost = extra_cost->ldst.load;\n+\t  break;\n+\t}\n+    case VEC_CONCAT:\n+\t/* depending on the operation, either DUP or INS.\n+\t   For now, keep default costing.  */\n+\tbreak;\n+    case VEC_DUPLICATE:\n+\t/* Load using a DUP.  */\n+\t*cost = extra_cost->vect.dup;\n+\treturn false;\n+    case VEC_SELECT:\n+\t{\n+\t  rtx op0 = XEXP (x, 0);\n+\t  *cost = rtx_cost (op0, GET_MODE (op0), VEC_SELECT, 0, speed);\n \n-      /* Fall through.  */\n+\t  /* cost subreg of 0 as free, otherwise as DUP */\n+\t  rtx op1 = XEXP (x, 1);\n+\t  if (vec_series_lowpart_p (mode, GET_MODE (op1), op1))\n+\t    ;\n+\t  else if (vec_series_highpart_p (mode, GET_MODE (op1), op1))\n+\t    *cost = extra_cost->vect.dup;\n+\t  else\n+\t    *cost = extra_cost->vect.extract;\n+\t  return true;\n+\t}\n     default:\n       break;\n     }"}, {"sha": "55a470d8e1410bdbcfbea084ec11b468485c1400", "filename": "gcc/config/arm/aarch-common-protos.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5c43db79b7ea14f0dc071beb40cf80de90eb86/gcc%2Fconfig%2Farm%2Faarch-common-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5c43db79b7ea14f0dc071beb40cf80de90eb86/gcc%2Fconfig%2Farm%2Faarch-common-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Faarch-common-protos.h?ref=1d5c43db79b7ea14f0dc071beb40cf80de90eb86", "patch": "@@ -133,6 +133,9 @@ struct vector_cost_table\n {\n   const int alu;\n   const int mult;\n+  const int movi;\n+  const int dup;\n+  const int extract;\n };\n \n struct cpu_cost_table"}, {"sha": "0e6a62665c7e18debc382a294a37945188fb90ef", "filename": "gcc/config/arm/aarch-cost-tables.h", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5c43db79b7ea14f0dc071beb40cf80de90eb86/gcc%2Fconfig%2Farm%2Faarch-cost-tables.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5c43db79b7ea14f0dc071beb40cf80de90eb86/gcc%2Fconfig%2Farm%2Faarch-cost-tables.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Faarch-cost-tables.h?ref=1d5c43db79b7ea14f0dc071beb40cf80de90eb86", "patch": "@@ -122,7 +122,10 @@ const struct cpu_cost_table generic_extra_costs =\n   /* Vector */\n   {\n     COSTS_N_INSNS (1),\t/* alu.  */\n-    COSTS_N_INSNS (4)   /* mult.  */\n+    COSTS_N_INSNS (4),  /* mult.  */\n+    COSTS_N_INSNS (1),  /* movi.  */\n+    COSTS_N_INSNS (2),  /* dup.  */\n+    COSTS_N_INSNS (2)   /* extract.  */\n   }\n };\n \n@@ -226,7 +229,10 @@ const struct cpu_cost_table cortexa53_extra_costs =\n   /* Vector */\n   {\n     COSTS_N_INSNS (1),\t/* alu.  */\n-    COSTS_N_INSNS (4)   /* mult.  */\n+    COSTS_N_INSNS (4),  /* mult.  */\n+    COSTS_N_INSNS (1),  /* movi.  */\n+    COSTS_N_INSNS (2),  /* dup.  */\n+    COSTS_N_INSNS (2)   /* extract.  */\n   }\n };\n \n@@ -330,7 +336,10 @@ const struct cpu_cost_table cortexa57_extra_costs =\n   /* Vector */\n   {\n     COSTS_N_INSNS (1),  /* alu.  */\n-    COSTS_N_INSNS (4)   /* mult.  */\n+    COSTS_N_INSNS (4),  /* mult.  */\n+    COSTS_N_INSNS (1),  /* movi.  */\n+    COSTS_N_INSNS (2),  /* dup.  */\n+    COSTS_N_INSNS (2)   /* extract.  */\n   }\n };\n \n@@ -434,7 +443,10 @@ const struct cpu_cost_table cortexa76_extra_costs =\n   /* Vector */\n   {\n     COSTS_N_INSNS (1),  /* alu.  */\n-    COSTS_N_INSNS (4)   /* mult.  */\n+    COSTS_N_INSNS (4),  /* mult.  */\n+    COSTS_N_INSNS (1),  /* movi.  */\n+    COSTS_N_INSNS (2),  /* dup.  */\n+    COSTS_N_INSNS (2)   /* extract.  */\n   }\n };\n \n@@ -538,7 +550,10 @@ const struct cpu_cost_table exynosm1_extra_costs =\n   /* Vector */\n   {\n     COSTS_N_INSNS (0),  /* alu.  */\n-    COSTS_N_INSNS (4)   /* mult.  */\n+    COSTS_N_INSNS (4),  /* mult.  */\n+    COSTS_N_INSNS (1),  /* movi.  */\n+    COSTS_N_INSNS (2),  /* dup.  */\n+    COSTS_N_INSNS (2)   /* extract.  */\n   }\n };\n \n@@ -642,7 +657,10 @@ const struct cpu_cost_table xgene1_extra_costs =\n   /* Vector */\n   {\n     COSTS_N_INSNS (2),  /* alu.  */\n-    COSTS_N_INSNS (8)   /* mult.  */\n+    COSTS_N_INSNS (8),  /* mult.  */\n+    COSTS_N_INSNS (1),  /* movi.  */\n+    COSTS_N_INSNS (2),  /* dup.  */\n+    COSTS_N_INSNS (2)   /* extract.  */\n   }\n };\n "}, {"sha": "d025e989a1e67f00f4f4ce94897a961d38abfab7", "filename": "gcc/testsuite/gcc.target/aarch64/vect-cse-codegen.c", "status": "added", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5c43db79b7ea14f0dc071beb40cf80de90eb86/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-cse-codegen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5c43db79b7ea14f0dc071beb40cf80de90eb86/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-cse-codegen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-cse-codegen.c?ref=1d5c43db79b7ea14f0dc071beb40cf80de90eb86", "patch": "@@ -0,0 +1,97 @@\n+/* { dg-do compile  { target { lp64 } } } */\n+/* { dg-additional-options \"-O3 -march=armv8.2-a+crypto -fno-schedule-insns -fno-schedule-insns2 -mcmodel=small\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"\" { target { le } } } } */\n+\n+#include <arm_neon.h>\n+\n+/*\n+**test1:\n+**\tadrp\tx[0-9]+, .LC[0-9]+\n+**\tldr\tq[0-9]+, \\[x[0-9]+, #:lo12:.LC[0-9]+\\]\n+**\tadd\tv[0-9]+.2d, v[0-9]+.2d, v[0-9]+.2d\n+**\tstr\tq[0-9]+, \\[x[0-9]+\\]\n+**\tfmov\tx[0-9]+, d[0-9]+\n+**\torr\tx[0-9]+, x[0-9]+, x[0-9]+\n+**\tret\n+*/\n+\n+uint64_t\n+test1 (uint64_t a, uint64x2_t b, uint64x2_t* rt)\n+{\n+  uint64_t arr[2] = { 0x0942430810234076UL, 0x0942430810234076UL};\n+  uint64_t res = a | arr[0];\n+  uint64x2_t val = vld1q_u64 (arr);\n+  *rt = vaddq_u64 (val, b);\n+  return res;\n+}\n+\n+/*\n+**test2:\n+**\tadrp\tx[0-9]+, .LC[0-1]+\n+**\tldr\tq[0-9]+, \\[x[0-9]+, #:lo12:.LC[0-9]+\\]\n+**\tadd\tv[0-9]+.2d, v[0-9]+.2d, v[0-9]+.2d\n+**\tstr\tq[0-9]+, \\[x[0-9]+\\]\n+**\tfmov\tx[0-9]+, d[0-9]+\n+**\torr\tx[0-9]+, x[0-9]+, x[0-9]+\n+**\tret\n+*/\n+\n+uint64_t\n+test2 (uint64_t a, uint64x2_t b, uint64x2_t* rt)\n+{\n+  uint64x2_t val = vdupq_n_u64 (0x0424303242234076UL);\n+  uint64_t arr = vgetq_lane_u64 (val, 0);\n+  uint64_t res = a | arr;\n+  *rt = vaddq_u64 (val, b);\n+  return res;\n+}\n+\n+/*\n+**test3:\n+**\tadrp\tx[0-9]+, .LC[0-9]+\n+**\tldr\tq[0-9]+, \\[x[0-9]+, #:lo12:.LC[0-9]+\\]\n+**\tadd\tv[0-9]+.4s, v[0-9]+.4s, v[0-9]+.4s\n+**\tstr\tq[0-9]+, \\[x1\\]\n+**\tfmov\tw[0-9]+, s[0-9]+\n+**\torr\tw[0-9]+, w[0-9]+, w[0-9]+\n+**\tret\n+*/\n+\n+uint32_t\n+test3 (uint32_t a, uint32x4_t b, uint32x4_t* rt)\n+{\n+  uint32_t arr[4] = { 0x094243, 0x094243, 0x094243, 0x094243 };\n+  uint32_t res = a | arr[0];\n+  uint32x4_t val = vld1q_u32 (arr);\n+  *rt = vaddq_u32 (val, b);\n+  return res;\n+}\n+\n+/*\n+**test4:\n+**\tushr\tv[0-9]+.16b, v[0-9]+.16b, 7\n+**\tmov\tx[0-9]+, 16512\n+**\tmovk\tx[0-9]+, 0x1020, lsl 16\n+**\tmovk\tx[0-9]+, 0x408, lsl 32\n+**\tmovk\tx[0-9]+, 0x102, lsl 48\n+**\tfmov\td[0-9]+, x[0-9]+\n+**\tpmull\tv[0-9]+.1q, v[0-9]+.1d, v[0-9]+.1d\n+**\tdup\tv[0-9]+.2d, v[0-9]+.d\\[0\\]\n+**\tpmull2\tv[0-9]+.1q, v[0-9]+.2d, v[0-9]+.2d\n+**\ttrn2\tv[0-9]+.8b, v[0-9]+.8b, v[0-9]+.8b\n+**\tumov\tw[0-9]+, v[0-9]+.h\\[3\\]\n+**\tret\n+*/\n+\n+uint64_t\n+test4 (uint8x16_t input)\n+{\n+    uint8x16_t bool_input = vshrq_n_u8(input, 7);\n+    poly64x2_t mask = vdupq_n_p64(0x0102040810204080UL);\n+    poly64_t prodL = vmull_p64((poly64_t)vgetq_lane_p64((poly64x2_t)bool_input, 0),\n+                               vgetq_lane_p64(mask, 0));\n+    poly64_t prodH = vmull_high_p64((poly64x2_t)bool_input, mask);\n+    uint8x8_t res = vtrn2_u8((uint8x8_t)prodL, (uint8x8_t)prodH);\n+    return vget_lane_u16((uint16x4_t)res, 3);\n+}\n+"}]}