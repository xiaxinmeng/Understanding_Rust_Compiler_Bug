{"sha": "8c5f2327427996b4b25ad6a4e0ce69832d025ea2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGM1ZjIzMjc0Mjc5OTZiNGIyNWFkNmE0ZTBjZTY5ODMyZDAyNWVhMg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2012-03-24T18:58:16Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2012-03-24T18:58:16Z"}, "message": "expr.c (optimize_bitfield_assignment_op): Use str_mode and str_bitsize instead of more convoluted expressions.\n\n\t* expr.c (optimize_bitfield_assignment_op) <BIT_IOR_EXPR>: Use str_mode\n\tand str_bitsize instead of more convoluted expressions.\n\nFrom-SVN: r185767", "tree": {"sha": "8b56495d0a18919c674f5f41031ad58cdb34b516", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8b56495d0a18919c674f5f41031ad58cdb34b516"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8c5f2327427996b4b25ad6a4e0ce69832d025ea2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c5f2327427996b4b25ad6a4e0ce69832d025ea2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c5f2327427996b4b25ad6a4e0ce69832d025ea2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c5f2327427996b4b25ad6a4e0ce69832d025ea2/comments", "author": null, "committer": null, "parents": [{"sha": "c4133027cf60da006ef88c3c2b65d3395f3d01e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4133027cf60da006ef88c3c2b65d3395f3d01e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4133027cf60da006ef88c3c2b65d3395f3d01e7"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "998162247313f26096468987a998e30058dbe425", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c5f2327427996b4b25ad6a4e0ce69832d025ea2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c5f2327427996b4b25ad6a4e0ce69832d025ea2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8c5f2327427996b4b25ad6a4e0ce69832d025ea2", "patch": "@@ -1,3 +1,8 @@\n+2012-03-24  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* expr.c (optimize_bitfield_assignment_op) <BIT_IOR_EXPR>: Use str_mode\n+\tand str_bitsize instead of more convoluted expressions.\n+\n 2012-03-24  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR target/52610"}, {"sha": "f509bf02ed33e6c4579d1d31f46e888986845a7f", "filename": "gcc/expr.c", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c5f2327427996b4b25ad6a4e0ce69832d025ea2/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c5f2327427996b4b25ad6a4e0ce69832d025ea2/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=8c5f2327427996b4b25ad6a4e0ce69832d025ea2", "patch": "@@ -4387,8 +4387,7 @@ optimize_bitfield_assignment_op (unsigned HOST_WIDE_INT bitsize,\n \t  value = expand_and (str_mode, value, const1_rtx, NULL);\n \t  binop = xor_optab;\n \t}\n-      value = expand_shift (LSHIFT_EXPR, str_mode, value,\n-\t\t\t    bitpos, NULL_RTX, 1);\n+      value = expand_shift (LSHIFT_EXPR, str_mode, value, bitpos, NULL_RTX, 1);\n       result = expand_binop (str_mode, binop, str_rtx,\n \t\t\t     value, str_rtx, 1, OPTAB_WIDEN);\n       if (result != str_rtx)\n@@ -4399,8 +4398,8 @@ optimize_bitfield_assignment_op (unsigned HOST_WIDE_INT bitsize,\n     case BIT_XOR_EXPR:\n       if (TREE_CODE (op1) != INTEGER_CST)\n \tbreak;\n-      value = expand_expr (op1, NULL_RTX, GET_MODE (str_rtx), EXPAND_NORMAL);\n-      value = convert_modes (GET_MODE (str_rtx),\n+      value = expand_expr (op1, NULL_RTX, str_mode, EXPAND_NORMAL);\n+      value = convert_modes (str_mode,\n \t\t\t     TYPE_MODE (TREE_TYPE (op1)), value,\n \t\t\t     TYPE_UNSIGNED (TREE_TYPE (op1)));\n \n@@ -4414,16 +4413,13 @@ optimize_bitfield_assignment_op (unsigned HOST_WIDE_INT bitsize,\n \t}\n \n       binop = code == BIT_IOR_EXPR ? ior_optab : xor_optab;\n-      if (bitpos + bitsize != GET_MODE_BITSIZE (GET_MODE (str_rtx)))\n+      if (bitpos + bitsize != str_bitsize)\n \t{\n-\t  rtx mask = GEN_INT (((unsigned HOST_WIDE_INT) 1 << bitsize)\n-\t\t\t      - 1);\n-\t  value = expand_and (GET_MODE (str_rtx), value, mask,\n-\t\t\t      NULL_RTX);\n+\t  rtx mask = GEN_INT (((unsigned HOST_WIDE_INT) 1 << bitsize) - 1);\n+\t  value = expand_and (str_mode, value, mask, NULL_RTX);\n \t}\n-      value = expand_shift (LSHIFT_EXPR, GET_MODE (str_rtx), value,\n-\t\t\t    bitpos, NULL_RTX, 1);\n-      result = expand_binop (GET_MODE (str_rtx), binop, str_rtx,\n+      value = expand_shift (LSHIFT_EXPR, str_mode, value, bitpos, NULL_RTX, 1);\n+      result = expand_binop (str_mode, binop, str_rtx,\n \t\t\t     value, str_rtx, 1, OPTAB_WIDEN);\n       if (result != str_rtx)\n \temit_move_insn (str_rtx, result);\n@@ -6348,8 +6344,7 @@ store_field (rtx target, HOST_WIDE_INT bitsize, HOST_WIDE_INT bitpos,\n \t\t\t     GET_MODE_BITSIZE (GET_MODE (temp)) - bitsize,\n \t\t\t     NULL_RTX, 1);\n \n-      /* Unless MODE is VOIDmode or BLKmode, convert TEMP to\n-\t MODE.  */\n+      /* Unless MODE is VOIDmode or BLKmode, convert TEMP to MODE.  */\n       if (mode != VOIDmode && mode != BLKmode\n \t  && mode != TYPE_MODE (TREE_TYPE (exp)))\n \ttemp = convert_modes (mode, TYPE_MODE (TREE_TYPE (exp)), temp, 1);"}]}