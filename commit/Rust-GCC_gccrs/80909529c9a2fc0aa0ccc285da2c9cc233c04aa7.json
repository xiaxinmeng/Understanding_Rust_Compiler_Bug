{"sha": "80909529c9a2fc0aa0ccc285da2c9cc233c04aa7", "node_id": "C_kwDOANBUbNoAKDgwOTA5NTI5YzlhMmZjMGFhMGNjYzI4NWRhMmM5Y2MyMzNjMDRhYTc", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-11-17T00:16:52Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-11-17T00:16:52Z"}, "message": "Daily bump.", "tree": {"sha": "ac2d982bbe3d0c7634d0c1e517f1afb7f65d5331", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ac2d982bbe3d0c7634d0c1e517f1afb7f65d5331"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/80909529c9a2fc0aa0ccc285da2c9cc233c04aa7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80909529c9a2fc0aa0ccc285da2c9cc233c04aa7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80909529c9a2fc0aa0ccc285da2c9cc233c04aa7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80909529c9a2fc0aa0ccc285da2c9cc233c04aa7/comments", "author": null, "committer": null, "parents": [{"sha": "ff199a859b2a954d0bdb7324d40cd23556d1d901", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff199a859b2a954d0bdb7324d40cd23556d1d901", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff199a859b2a954d0bdb7324d40cd23556d1d901"}], "stats": {"total": 508, "additions": 507, "deletions": 1}, "files": [{"sha": "fdc9d7534e8ec22a9cf6d59690d2b6b8101ef6b7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80909529c9a2fc0aa0ccc285da2c9cc233c04aa7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80909529c9a2fc0aa0ccc285da2c9cc233c04aa7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=80909529c9a2fc0aa0ccc285da2c9cc233c04aa7", "patch": "@@ -1,3 +1,121 @@\n+2022-11-16  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/106649\n+\t* doc/invoke.texi: Document -Winvalid-constexpr.\n+\n+2022-11-16  Philipp Tomsich  <philipp.tomsich@vrull.eu>\n+\n+\t* config/riscv/bitmanip.md: Add split covering\n+\t\"(a & (1 << BIT_NO)) ? 0 : 1\".\n+\n+2022-11-16  Philipp Tomsich  <philipp.tomsich@vrull.eu>\n+\n+\t* config/riscv/bitmanip.md (*bext<mode>): Add an additional\n+\tpattern that allows the 3rd argument to zero_extract to be\n+\tan Xmode register operand.\n+\n+2022-11-16  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/107686\n+\t* tree-ssa-forwprop.cc (optimize_vector_load): Restrict\n+\tVEC_UNPACK support to integral typed bitfield refs.\n+\n+2022-11-16  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/107679\n+\t* tree-into-ssa.cc (maybe_register_def): Use new temporary if\n+\twe require an uninitialized value for a parameter decl.\n+\n+2022-11-16  Alexander Monakov  <amonakov@ispras.ru>\n+\n+\tPR target/107676\n+\t* doc/invoke.texi (-mrelax-cmpxchg-loop): Reword description.\n+\n+2022-11-16  Alexander Monakov  <amonakov@ispras.ru>\n+\n+\tPR target/87832\n+\t* config/i386/znver.md: (znver1_fp_op_mul): Correct cycles in\n+\tthe reservation.\n+\t(znver1_fp_op_mul_load): Ditto.\n+\t(znver1_mmx_mul): Ditto.\n+\t(znver1_mmx_load): Ditto.\n+\t(znver1_ssemul_ss_ps): Ditto.\n+\t(znver1_ssemul_ss_ps_load): Ditto.\n+\t(znver1_ssemul_avx256_ps): Ditto.\n+\t(znver1_ssemul_avx256_ps_load): Ditto.\n+\t(znver1_ssemul_sd_pd): Ditto.\n+\t(znver1_ssemul_sd_pd_load): Ditto.\n+\t(znver2_ssemul_sd_pd): Ditto.\n+\t(znver2_ssemul_sd_pd_load): Ditto.\n+\t(znver1_ssemul_avx256_pd): Ditto.\n+\t(znver1_ssemul_avx256_pd_load): Ditto.\n+\t(znver1_sseimul): Ditto.\n+\t(znver1_sseimul_avx256): Ditto.\n+\t(znver1_sseimul_load): Ditto.\n+\t(znver1_sseimul_avx256_load): Ditto.\n+\t(znver1_sseimul_di): Ditto.\n+\t(znver1_sseimul_load_di): Ditto.\n+\n+2022-11-16  Alexander Monakov  <amonakov@ispras.ru>\n+\n+\tPR target/87832\n+\t* config/i386/znver.md (znver1_fdiv): New automaton.\n+\t(znver1-fdiv): New unit.\n+\t(znver1_fp_op_div): Correct unit and cycles in the reservation.\n+\t(znver1_fp_op_div_load): Ditto.\n+\t(znver1_fp_op_idiv_load): Ditto.\n+\t(znver2_fp_op_idiv_load): Ditto.\n+\t(znver1_ssediv_ss_ps): Ditto.\n+\t(znver1_ssediv_ss_ps_load): Ditto.\n+\t(znver1_ssediv_sd_pd): Ditto.\n+\t(znver1_ssediv_sd_pd_load): Ditto.\n+\t(znver1_ssediv_avx256_ps): Ditto.\n+\t(znver1_ssediv_avx256_ps_load): Ditto.\n+\t(znver1_ssediv_avx256_pd): Ditto.\n+\t(znver1_ssediv_avx256_pd_load): Ditto.\n+\n+2022-11-16  Tobias Burnus  <tobias@codesourcery.com>\n+\t    Andrew Stubbs  <ams@codesourcery.com>\n+\n+\t* config/gcn/gcn-builtins.def (KERNARG_PTR): Add.\n+\t* config/gcn/gcn.cc (gcn_init_builtin_types): Change siptr_type_node,\n+\tsfptr_type_node and voidptr_type_node from FLAT to ADDR_SPACE_DEFAULT.\n+\t(gcn_expand_builtin_1): Handle GCN_BUILTIN_KERNARG_PTR.\n+\t(gcn_oacc_dim_size): Return in ADDR_SPACE_FLAT.\n+\n+2022-11-16  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* Makefile.in (ANALYZER_OBJS): Add analyzer/checker-event.o.\n+\n+2022-11-16  Max Filippov  <jcmvbkbc@gmail.com>\n+\n+\tPR target/107645\n+\t* config/m68k/predicates.md (symbolic_operand): Return false\n+\twhen UNSPEC is under the CONST node.\n+\n+2022-11-16  Christoph M\u00fcllner  <christoph.muellner@vrull.eu>\n+\n+\t* doc/invoke.texi: Fix PRU/RISC-V option list formatting.\n+\n+2022-11-16  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* config/nvptx/mkoffload.cc (process): Recognize '$nohost$...'\n+\tbesides tailing '$nohost' as being for reverse offload.\n+\n+2022-11-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/107668\n+\t* range-op-float.cc (float_binary_op_range_finish): Set VARYING\n+\talso when r is UNDEFINED.\n+\n+2022-11-16  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\tPR rtl-optimization/90259\n+\t* function.cc (rest_of_handle_thread_prologue_and_epilogue): Add\n+\tparameter fun, and call function purge_all_dead_edges.\n+\t(pass_thread_prologue_and_epilogue::execute): Name unamed parameter\n+\tas fun, and use it for rest_of_handle_thread_prologue_and_epilogue.\n+\n 2022-11-15  Philipp Tomsich  <philipp.tomsich@vrull.eu>\n \n \t* config/riscv/riscv-builtins.cc (struct riscv_builtin_description):"}, {"sha": "3204c3c9c61db4a3ed964c77eaf8883568767be6", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80909529c9a2fc0aa0ccc285da2c9cc233c04aa7/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80909529c9a2fc0aa0ccc285da2c9cc233c04aa7/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=80909529c9a2fc0aa0ccc285da2c9cc233c04aa7", "patch": "@@ -1 +1 @@\n-20221116\n+20221117"}, {"sha": "1fab4d06724cd92a8a79769ede7a54e66f93cb74", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80909529c9a2fc0aa0ccc285da2c9cc233c04aa7/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80909529c9a2fc0aa0ccc285da2c9cc233c04aa7/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=80909529c9a2fc0aa0ccc285da2c9cc233c04aa7", "patch": "@@ -1,3 +1,58 @@\n+2022-11-16  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/107711\n+\t* analyzer-language.cc: Include \"diagnostic.h\".\n+\t(maybe_stash_named_constant): Add logger param and use it to log\n+\tthe name being looked up, and the result.\n+\t(stash_named_constants): New, splitting out from...\n+\t(on_finish_translation_unit): ...this function.  Call\n+\tget_or_create_logfile and use the result to create a logger\n+\tinstance, passing it to stash_named_constants.\n+\t* analyzer.h (get_or_create_any_logfile): New decl.\n+\t* engine.cc (dump_fout, owns_dump_fout): New globals, split out\n+\tfrom run_checkers.\n+\t(get_or_create_any_logfile): New function, split out from...\n+\t(run_checkers): ...here, so that the logfile can be opened by\n+\ton_finish_translation_unit.  Clear the globals when closing the\n+\tdump file.\n+\n+2022-11-16  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* analyzer.h (known_function::matches_call_types_p): New vfunc.\n+\t(known_function::impl_call_pre): Provide base implementation.\n+\t(known_function::impl_call_post): New vfunc.\n+\t(register_known_functions): New.\n+\t* engine.cc (impl_run_checkers): Call register_known_functions.\n+\t* region-model-impl-calls.cc (region_model::impl_call_accept):\n+\tConvert to...\n+\t(class known_function_accept): ...this.\n+\t(region_model::impl_call_bind): Convert to...\n+\t(class known_function_bind): ...this.\n+\t(region_model::impl_call_connect): Convert to...\n+\t(class known_function_connect): ...this.\n+\t(region_model::impl_call_listen): Convert to...\n+\t(class known_function_listen): ...this.\n+\t(region_model::impl_call_socket): Convert to...\n+\t(class known_function_socket): ...this.\n+\t(register_known_functions): New.\n+\t* region-model.cc (region_model::on_call_pre): Remove special\n+\tcase for \"bind\" in favor of the known_function-handling dispatch.\n+\tAdd call to known_function::matches_call_types_p to latter.\n+\t(region_model::on_call_post): Remove special cases for \"accept\",\n+\t\"bind\", \"connect\", \"listen\", and \"socket\" in favor of dispatch\n+\tto known_function::impl_call_post.\n+\t* region-model.h (region_model::impl_call_accept): Delete decl.\n+\t(region_model::impl_call_bind): Delete decl.\n+\t(region_model::impl_call_connect): Delete decl.\n+\t(region_model::impl_call_listen): Delete decl.\n+\t(region_model::impl_call_socket): Delete decl.\n+\t* sm-fd.cc: Update comments.\n+\n+2022-11-16  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* checker-event.cc: New file, split out from...\n+\t* checker-path.cc: ...this file.\n+\n 2022-11-15  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/106140"}, {"sha": "69695c66c9ca91a70ff1879be02a8f2e821d1ac4", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80909529c9a2fc0aa0ccc285da2c9cc233c04aa7/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80909529c9a2fc0aa0ccc285da2c9cc233c04aa7/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=80909529c9a2fc0aa0ccc285da2c9cc233c04aa7", "patch": "@@ -1,3 +1,20 @@\n+2022-11-16  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/106649\n+\t* c-cppbuiltin.cc (c_cpp_builtins): Update value of __cpp_constexpr for\n+\tC++23.\n+\t* c-opts.cc (c_common_post_options): Set warn_invalid_constexpr\n+\tdepending on cxx_dialect.\n+\t* c.opt (Winvalid-constexpr): New option.\n+\n+2022-11-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-common.def (CONCEPT_DECL): New tree, moved here from\n+\tcp-tree.def.\n+\t* c-common.cc (c_common_init_ts): Handle CONCEPT_DECL.\n+\t* c-attribs.cc (handle_deprecated_attribute): Allow deprecated\n+\tattribute on CONCEPT_DECL.\n+\n 2022-11-15  Lewis Hyatt  <lhyatt@gmail.com>\n \n \t* c-opts.cc (c_finish_options): Use special_fname_builtin () rather"}, {"sha": "faf4c21f6ef7df504e9ccf08792326fbd1f8201d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80909529c9a2fc0aa0ccc285da2c9cc233c04aa7/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80909529c9a2fc0aa0ccc285da2c9cc233c04aa7/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=80909529c9a2fc0aa0ccc285da2c9cc233c04aa7", "patch": "@@ -1,3 +1,66 @@\n+2022-11-16  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/106649\n+\t* constexpr.cc (constexpr_error): New function.\n+\t(is_valid_constexpr_fn): Use constexpr_error.\n+\t(maybe_save_constexpr_fundef): Call\n+\trequire_potential_rvalue_constant_expression_fncheck rather than\n+\trequire_potential_rvalue_constant_expression.  Register the\n+\tfunction if -Wno-invalid-constexpr was specified.\n+\t(explain_invalid_constexpr_fn): Don't return early if a function marked\n+\t'constexpr' that isn't actually a constant expression was called.\n+\t(non_const_var_error): Add a bool parameter.  Use constexpr_error.\n+\t(inline_asm_in_constexpr_error): Likewise.\n+\t(cxx_eval_constant_expression): Adjust calls to non_const_var_error\n+\tand inline_asm_in_constexpr_error.\n+\t(potential_constant_expression_1): Add a bool parameter.  Use\n+\tconstexpr_error.\n+\t(require_potential_rvalue_constant_expression_fncheck): New function.\n+\t* cp-tree.h (require_potential_rvalue_constant_expression_fncheck):\n+\tDeclare.\n+\t* method.cc (struct comp_info): Call\n+\trequire_potential_rvalue_constant_expression_fncheck rather than\n+\trequire_potential_rvalue_constant_expression.\n+\n+2022-11-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* typeck.cc (next_common_initial_sequence): Return false members have\n+\tdifferent DECL_ALIGN.\n+\t(layout_compatible_type_p): Don't test TYPE_ALIGN of ENUMERAL_TYPE\n+\tor CLASS_TYPE_P.\n+\n+2022-11-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/107624\n+\t* call.cc (keep_unused_object_arg): New function.\n+\t(build_op_call): Use it.\n+\t(build_op_subscript): Likewise.\n+\t(build_new_op): Similarly for ARRAY_REF.\n+\t(build_new_method_call): Use it.\n+\t* decl.cc (grok_op_properties): For C++20 and earlier, if operator[]\n+\tis static member function, require exactly one parameter rather than\n+\texactly two parameters.\n+\n+2022-11-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* typeck.cc (cp_build_modify_expr): Implement CWG 2654\n+\t- Un-deprecation of compound volatile assignments.  Remove\n+\t-Wvolatile warning about compound volatile assignments.\n+\n+2022-11-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* cp-tree.def (CONCEPT_DECL): Move to c-common.def.\n+\t* cp-objcp-common.cc (cp_common_init_ts): Don't handle CONCEPT_DECL\n+\there.\n+\t* cp-tree.h (finish_concept_definition): Add ATTRS parameter.\n+\t* parser.cc (cp_parser_concept_definition): Parse attributes in\n+\tbetween identifier and =.  Adjust finish_concept_definition\n+\tcaller.\n+\t* pt.cc (finish_concept_definition): Add ATTRS parameter.  Call\n+\tcplus_decl_attributes.\n+\t* constraint.cc (build_standard_check): If CONCEPT_DECL is\n+\tTREE_DEPRECATED, emit -Wdeprecated-declaration warnings.\n+\n 2022-11-15  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/107492"}, {"sha": "6c3ace128ffae2a8672a0c2e5653cc3d7cd9ec80", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80909529c9a2fc0aa0ccc285da2c9cc233c04aa7/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80909529c9a2fc0aa0ccc285da2c9cc233c04aa7/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=80909529c9a2fc0aa0ccc285da2c9cc233c04aa7", "patch": "@@ -1,3 +1,21 @@\n+2022-11-16  Steve Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/107707\n+\t* interface.cc (gfc_compare_actual_formal): Check that we actually\n+\thave integer values before asking gmp_* to use them.\n+\n+2022-11-16  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/107681\n+\t* resolve.cc (resolve_fl_var_and_proc): Prevent NULL pointer\n+\tdereference with reference to bad CLASS variable.\n+\n+2022-11-16  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/107680\n+\t* arith.cc (arith_power): Check that operands are properly converted\n+\tbefore attempting to simplify.\n+\n 2022-11-15  Lewis Hyatt  <lhyatt@gmail.com>\n \n \t* cpp.cc (gfc_cpp_init): Use special_fname_builtin () rather than a"}, {"sha": "fd4883422a672413ff65f97be8fb2afb1008f39f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 147, "deletions": 0, "changes": 147, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80909529c9a2fc0aa0ccc285da2c9cc233c04aa7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80909529c9a2fc0aa0ccc285da2c9cc233c04aa7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=80909529c9a2fc0aa0ccc285da2c9cc233c04aa7", "patch": "@@ -1,3 +1,150 @@\n+2022-11-16  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* gcc.dg/analyzer/named-constants-via-command-line.c: New test.\n+\t* gcc.dg/analyzer/named-constants-via-macros-3.c: New test.\n+\t* gcc.dg/analyzer/named-constants-via-macros-4.c: New test.\n+\t* gcc.dg/analyzer/named-constants-via-macros-empty.c: New test.\n+\t* gcc.dg/analyzer/named-constants-via-macros-gc.c: New test.\n+\t* gcc.dg/analyzer/named-constants-via-macros-traditional.c: New test.\n+\t* gcc.dg/analyzer/named-constants-via-macros-undef.c: New test.\n+\n+2022-11-16  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/107711\n+\t* gcc.dg/analyzer/fdump-analyzer-1.c: New test.\n+\n+2022-11-16  Steve Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/107707\n+\t* gfortran.dg/pr107707.f90: New test.\n+\n+2022-11-16  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/106649\n+\t* g++.dg/cpp0x/constexpr-ctor2.C: Expect an error in c++20_down only.\n+\t* g++.dg/cpp0x/constexpr-default-ctor.C: Likewise.\n+\t* g++.dg/cpp0x/constexpr-diag3.C: Likewise.\n+\t* g++.dg/cpp0x/constexpr-ex1.C: Likewise.\n+\t* g++.dg/cpp0x/constexpr-friend.C: Likewise.\n+\t* g++.dg/cpp0x/constexpr-generated1.C: Likewise.\n+\t* g++.dg/cpp0x/constexpr-ice5.C: Likewise.\n+\t* g++.dg/cpp0x/constexpr-ice6.C: Likewise.\n+\t* g++.dg/cpp0x/constexpr-memfn1.C: Likewise.\n+\t* g++.dg/cpp0x/constexpr-neg2.C: Likewise.\n+\t* g++.dg/cpp0x/constexpr-non-const-arg.C: Likewise.\n+\t* g++.dg/cpp0x/constexpr-reinterpret1.C: Likewise.\n+\t* g++.dg/cpp0x/pr65327.C: Likewise.\n+\t* g++.dg/cpp1y/constexpr-105050.C: Likewise.\n+\t* g++.dg/cpp1y/constexpr-89285-2.C: Likewise.\n+\t* g++.dg/cpp1y/constexpr-89285.C: Likewise.\n+\t* g++.dg/cpp1y/constexpr-89785-2.C: Likewise.\n+\t* g++.dg/cpp1y/constexpr-neg1.C: Likewise.\n+\t* g++.dg/cpp1y/constexpr-nsdmi7b.C: Likewise.\n+\t* g++.dg/cpp1y/constexpr-throw.C: Likewise.\n+\t* g++.dg/cpp23/constexpr-nonlit3.C: Remove dg-error.\n+\t* g++.dg/cpp23/constexpr-nonlit6.C: Call the test functions.\n+\t* g++.dg/cpp23/feat-cxx2b.C: Adjust the expected value of\n+\t__cpp_constexpr.\n+\t* g++.dg/cpp2a/consteval3.C: Remove dg-error.\n+\t* g++.dg/cpp2a/constexpr-new7.C: Expect an error in c++20_down only.\n+\t* g++.dg/cpp2a/constexpr-try5.C: Remove dg-error.\n+\t* g++.dg/cpp2a/spaceship-constexpr1.C: Expect an error in c++20_down\n+\tonly.\n+\t* g++.dg/cpp2a/spaceship-eq3.C: Likewise.\n+\t* g++.dg/diagnostic/constexpr1.C: Remove dg-error.\n+\t* g++.dg/gomp/pr79664.C: Use -Winvalid-constexpr -pedantic-errors.\n+\t* g++.dg/ubsan/vptr-4.C: Likewise.\n+\t* g++.dg/cpp23/constexpr-nonlit10.C: New test.\n+\t* g++.dg/cpp23/constexpr-nonlit11.C: New test.\n+\t* g++.dg/cpp23/constexpr-nonlit12.C: New test.\n+\t* g++.dg/cpp23/constexpr-nonlit13.C: New test.\n+\t* g++.dg/cpp23/constexpr-nonlit14.C: New test.\n+\t* g++.dg/cpp23/constexpr-nonlit15.C: New test.\n+\t* g++.dg/cpp23/constexpr-nonlit16.C: New test.\n+\t* g++.dg/cpp23/constexpr-nonlit8.C: New test.\n+\t* g++.dg/cpp23/constexpr-nonlit9.C: New test.\n+\n+2022-11-16  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/107681\n+\t* gfortran.dg/pr107681.f90: New test.\n+\n+2022-11-16  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/107680\n+\t* gfortran.dg/pr107680.f90: New test.\n+\n+2022-11-16  Philipp Tomsich  <philipp.tomsich@vrull.eu>\n+\n+\t* gcc.target/riscv/zbs-bext.c: Add testcases.\n+\t* gcc.target/riscv/zbs-bexti.c: Add testcases.\n+\n+2022-11-16  Philipp Tomsich  <philipp.tomsich@vrull.eu>\n+\n+\t* gcc.target/riscv/zbs-bext.c: Add testcases.\n+\t* gcc.target/riscv/zbs-bexti.c: Add testcases.\n+\n+2022-11-16  Hans-Peter Nilsson  <hp@axis.com>\n+\n+\t* lib/gcc-dg.exp (gcc-transform-out-of-tree): New proc.\n+\t* g++.dg/gcov/gcov.exp, gcc.misc-tests/gcov.exp: Call\n+\tgcc-transform-out-of-tree instead of transform.\n+\n+2022-11-16  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/107686\n+\t* gcc.dg/pr107686.c: New testcase.\n+\n+2022-11-16  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/107679\n+\t* gfortran.dg/pr107679.f90: New testcase.\n+\n+2022-11-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* g++.dg/cpp2a/is-layout-compatible3.C: Expect enums with different\n+\talignas to be layout compatible, while classes with different\n+\talignas on members layout incompatible.\n+\t* g++.dg/DRs/dr2583.C: New test.\n+\n+2022-11-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/107624\n+\t* g++.dg/cpp23/static-operator-call4.C: New test.\n+\t* g++.dg/cpp23/subscript10.C: New test.\n+\t* g++.dg/cpp23/subscript11.C: New test.\n+\n+2022-11-16  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* gcc.dg/plugin/analyzer_kernel_plugin.c\n+\t(copy_across_boundary_fn::matches_call_types_p): New.\n+\t* gcc.dg/plugin/analyzer_known_fns_plugin.c\n+\t(known_function_returns_42::matches_call_types_p): New.\n+\t(known_function_attempt_to_copy::matches_call_types_p): New.\n+\n+2022-11-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* g++.dg/cpp2a/volatile1.C (fn2, fn3, racoon): Adjust expected\n+\tdiagnostics.\n+\t* g++.dg/cpp2a/volatile3.C (fn2, fn3, racoon): Likewise.\n+\t* g++.dg/cpp2a/volatile5.C (f): Likewise.\n+\t* g++.dg/ext/vector25.C (foo): Don't expect a warning.\n+\t* g++.dg/cpp1y/new1.C (test_unused): Likewise.\n+\n+2022-11-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* g++.dg/cpp2a/concepts-dr2428.C: New test.\n+\n+2022-11-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/107668\n+\t* gcc.dg/ubsan/pr107668.c: New test.\n+\n+2022-11-16  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\tPR rtl-optimization/90259\n+\t* g++.target/powerpc/pr90259.C: New.\n+\n 2022-11-15  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/107492"}, {"sha": "7daea0d63e70a2b41feea2d5ce6a73106e39ab55", "filename": "libatomic/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80909529c9a2fc0aa0ccc285da2c9cc233c04aa7/libatomic%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80909529c9a2fc0aa0ccc285da2c9cc233c04aa7/libatomic%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libatomic%2FChangeLog?ref=80909529c9a2fc0aa0ccc285da2c9cc233c04aa7", "patch": "@@ -1,3 +1,7 @@\n+2022-11-16  Martin Liska  <mliska@suse.cz>\n+\n+\t* Makefile.in: Re-generate.\n+\n 2022-11-15  Wilco Dijkstra  <wilco.dijkstra@arm.com>\n \n \t* Makefile.in: Regenerated with automake 1.15.1."}, {"sha": "78ed9e1eb74805b0b7afe9a1277e66acd0f65d7b", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80909529c9a2fc0aa0ccc285da2c9cc233c04aa7/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80909529c9a2fc0aa0ccc285da2c9cc233c04aa7/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=80909529c9a2fc0aa0ccc285da2c9cc233c04aa7", "patch": "@@ -1,3 +1,9 @@\n+2022-11-16  Tobias Burnus  <tobias@codesourcery.com>\n+\t    Andrew Stubbs  <ams@codesourcery.com>\n+\n+\t* config/gcn/team.c (gomp_gcn_enter_kernel): Use\n+\t__builtin_gcn_kernarg_ptr instead of asm (\"s8\").\n+\n 2022-11-14  Martin Liska  <mliska@suse.cz>\n \n \tRevert:"}, {"sha": "08c5bc3f5d50ad932bed6c713403f11811a7004e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80909529c9a2fc0aa0ccc285da2c9cc233c04aa7/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80909529c9a2fc0aa0ccc285da2c9cc233c04aa7/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=80909529c9a2fc0aa0ccc285da2c9cc233c04aa7", "patch": "@@ -1,3 +1,81 @@\n+2022-11-16  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/107720\n+\t* include/std/format (__format::_Arg_t): Fix typo in enumerator\n+\tname.\n+\t(_Arg_value::_S_get): Fix missing semi-colons.\n+\n+2022-11-16  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/chrono (get_leap_second_info): Optimize.\n+\n+2022-11-16  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/107712\n+\t* include/std/format (__format::__formatter_int::format): Use\n+\tstd::toupper when __builtin_toupper isn't available.\n+\t(basic_format_arg::handle): Add 'typename'.\n+\t* include/std/complex (complex<T>): Add 'typename'.\n+\n+2022-11-16  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/format [__FLT128_DIG__] (_GLIBCXX_FORMAT_F128):\n+\tOnly support formatting _Float128 when glibc provides the\n+\tfunctionality needed for accurate std::to_chars.\n+\n+2022-11-16  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/std/time/clock/utc/1.cc: Check handling across leap\n+\tsecond insertion.\n+\n+2022-11-16  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR libstdc++/107701\n+\t* include/std/iostream (__ioinit): Adjust comment.\n+\t* src/c++98/globals_io.cc: Include \"io_base_init.h\" here\n+\tinstead of ...\n+\t* src/c++98/ios_init.cc: ... here.\n+\t* src/c++98/ios_base_init.h (__ioinit): More comments.\n+\t* testsuite/17_intro/static.cc: dg-do run instead of just link.\n+\n+2022-11-16  Jakub Jelinek  <jakub@redhat.com>\n+\t    Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/107649\n+\t* include/std/complex (__complex_abs, __complex_arg, __complex_cos,\n+\t__complex_cosh, __complex_exp, __complex_log, __complex_sin,\n+\t__complex_sinh, __complex_sqrt, __complex_tan, __complex_tanh,\n+\t__complex_pow): Move __complex__ _Float{16,32,64,128} and\n+\t__complex__ decltype(0.0bf16) overloads earlier in the file.\n+\t(complex): Fix up requires on the partial specialization for extended\n+\tfloat types.\n+\t(__complex_acos, __complex_asin, __complex_atan, __complex_acosh,\n+\t__complex_asinh, __complex_atanh): Move\n+\t__complex__ _Float{16,32,64,128} and __complex__ decltype(0.0bf16)\n+\toverloads earlier in the file.\n+\n+2022-11-16  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* python/libstdcxx/v6/printers.py (StdExpAnyPrinter): Make\n+\texpansion of std::string in manager name more robust.\n+\n+2022-11-16  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* python/libstdcxx/v6/printers.py (is_specialization_of): Fix\n+\tincorrect terminology in docstring and describe arguments.\n+\t(FilteringTypePrinter): Add default argument for new parameter,\n+\tenhance docstring.\n+\n+2022-11-16  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* python/libstdcxx/v6/printers.py (FilteringTypePrinter): Rename 'match' field\n+\t'template'. Add self.targ1 to specify the first template parameter of the instantiation\n+\tto match.\n+\t(add_one_type_printer): Add targ1 optional parameter, default to None.\n+\tUse gdb.types.get_basic_type to compare the type to recognize and the type\n+\treturned from the typedef lookup.\n+\t(register_type_printers): Adapt calls to add_one_type_printers.\n+\n 2022-11-15  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* testsuite/std/format/functions/format.cc: Do not use"}]}