{"sha": "8901ac210e5857b0a957f1bcee9906e0fb8fa707", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODkwMWFjMjEwZTU4NTdiMGE5NTdmMWJjZWU5OTA2ZTBmYjhmYTcwNw==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-08-09T07:33:39Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-08-09T07:33:39Z"}, "message": "[multiple changes]\n\n\n2000-08-09  Benjamin Kosnik  <bkoz@purist.soma.redhat.com>\n\n\tPreliminary wchar_t implementation, with trivial encodings.\n\t* docs/configopts.html: Add bits about canonical configure option\n\tchecking.\n\n\t* testsuite/27_io/iostream_objects.cc: Replace this file (which\n\thas newly-declared-illegal mixing of wide/narrow stdstreams) with...\n\t* testsuite/27_io/narrow_stream_objects.cc: New file.\n\t* testsuite/27_io/wide_stream_objects.cc: New file.\n\n\t* bits/fstream.tcc (underflow): Temporarily hack a solution\n\ttogether that writes from the external file to the internal\n\tbuffers. This removes codecvt from the loop, and is incorrect.\n\t(_M_really_overflow): Same here.\n\n\t* testsuite/21_strings/inserters_extractors.cc (test05): Tweaks.\n\n2000-08-08  Benjamin Kosnik  <bkoz@cygnus.com>\n\t    Ulrich Drepper  <drepper@cygnus.com>\n\n\t* config/c_io_libio.h: Tweak.\n\t* config/c_io_libio_codecvt.c: New file.\n\t* libio/Makefile.am: Add c_codecvt.c.\n\t* libio/Makefile.in: Regenerate.\n\t* libio/genops.c (_IO_unbuffer_write): Don't call _IO_SETBUF if the\n\tstream is not orientated.\n\n\t* acinclude.m4: Add config/c_io_libio_codecvt.c dummy file, until\n\tencoding gets fleshed out.\n\n\t* bits/basic_file.h: Add specialization declarations.\n\t* config/c_io_libio.cc: Add specializations for pbackfail, uflow.\n\n\t* config/c_io_libio.h: Add __c_wfile_type.\n\t* bits/basic_file.h: Add _M_wfile.\n\n\t* config/c_io_libio.cc (__basic_file<char>): Initialize the\n\tstreams without setting the orientation of the underlying FILE to\n\teither wide or narrow.\n\t(__basic_file<wchar_t>)): Enable tricky wchar_t io bits.\n\nFrom-SVN: r35584", "tree": {"sha": "810fd814c4d1fcc52243e90ea7ac6ac2416bdda2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/810fd814c4d1fcc52243e90ea7ac6ac2416bdda2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8901ac210e5857b0a957f1bcee9906e0fb8fa707", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8901ac210e5857b0a957f1bcee9906e0fb8fa707", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8901ac210e5857b0a957f1bcee9906e0fb8fa707", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8901ac210e5857b0a957f1bcee9906e0fb8fa707/comments", "author": null, "committer": null, "parents": [{"sha": "5c614849364bcaa926bf2017a69ac6569a14dfa0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c614849364bcaa926bf2017a69ac6569a14dfa0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c614849364bcaa926bf2017a69ac6569a14dfa0"}], "stats": {"total": 2225, "additions": 1238, "deletions": 987}, "files": [{"sha": "dd8ed7eabd51865dbe1c0ec5809131f2a5fa2c3f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8901ac210e5857b0a957f1bcee9906e0fb8fa707/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8901ac210e5857b0a957f1bcee9906e0fb8fa707/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=8901ac210e5857b0a957f1bcee9906e0fb8fa707", "patch": "@@ -1,3 +1,45 @@\n+2000-08-09  Benjamin Kosnik  <bkoz@purist.soma.redhat.com>\n+\n+\tPreliminary wchar_t implementation, with trivial encodings.\n+\t* docs/configopts.html: Add bits about canonical configure option\n+\tchecking.\n+\n+\t* testsuite/27_io/iostream_objects.cc: Replace this file (which\n+\thas newly-declared-illegal mixing of wide/narrow stdstreams) with...\n+\t* testsuite/27_io/narrow_stream_objects.cc: New file.\n+\t* testsuite/27_io/wide_stream_objects.cc: New file.\n+\n+\t* bits/fstream.tcc (underflow): Temporarily hack a solution\n+\ttogether that writes from the external file to the internal\n+\tbuffers. This removes codecvt from the loop, and is incorrect.\n+\t(_M_really_overflow): Same here.\n+\n+\t* testsuite/21_strings/inserters_extractors.cc (test05): Tweaks.\n+\t\n+2000-08-08  Benjamin Kosnik  <bkoz@cygnus.com>\n+\t    Ulrich Drepper  <drepper@cygnus.com>\n+\n+\t* config/c_io_libio.h: Tweak.\n+\t* config/c_io_libio_codecvt.c: New file.\n+\t* libio/Makefile.am: Add c_codecvt.c.\n+\t* libio/Makefile.in: Regenerate.\n+\t* libio/genops.c (_IO_unbuffer_write): Don't call _IO_SETBUF if the\n+\tstream is not orientated.\n+\n+\t* acinclude.m4: Add config/c_io_libio_codecvt.c dummy file, until\n+\tencoding gets fleshed out.\n+\n+\t* bits/basic_file.h: Add specialization declarations.\n+\t* config/c_io_libio.cc: Add specializations for pbackfail, uflow.\n+\n+\t* config/c_io_libio.h: Add __c_wfile_type.\n+\t* bits/basic_file.h: Add _M_wfile.\n+\n+\t* config/c_io_libio.cc (__basic_file<char>): Initialize the\n+\tstreams without setting the orientation of the underlying FILE to\n+\teither wide or narrow.\n+\t(__basic_file<wchar_t>)): Enable tricky wchar_t io bits.\n+\n 2000-08-07  Felix Natter  <fnatter@gmx.net>\n \n \t* docs/17_intro/porting-howto.html:  New version."}, {"sha": "915b83cd03fa23609c71f8e1157448c474d40338", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8901ac210e5857b0a957f1bcee9906e0fb8fa707/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8901ac210e5857b0a957f1bcee9906e0fb8fa707/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=8901ac210e5857b0a957f1bcee9906e0fb8fa707", "patch": "@@ -1268,6 +1268,12 @@ AC_DEFUN(GLIBCPP_ENABLE_CSTDIO, [\n   esac\n   AC_LINK_FILES($CSTDIO_H, bits/c++io.h)\n   AC_LINK_FILES($CSTDIO_CC, src/c++io.cc)\n+\n+  # 2000-08-04 bkoz hack\n+  CCODECVT_C=config/c_io_libio_codecvt.c\n+  AC_LINK_FILES($CCODECVT_C, libio/c_codecvt.c)\n+  # 2000-08-04 bkoz hack\n+\t\n   AM_CONDITIONAL(GLIBCPP_NEED_LIBIO, test \"$need_libio\" = yes)\n   AM_CONDITIONAL(GLIBCPP_NEED_XTRA_LIBIO, test \"$need_xtra_libio\" = yes)\n   AM_CONDITIONAL(GLIBCPP_NEED_WLIBIO, test \"$need_wlibio\" = yes)"}, {"sha": "0c0281e77a4fc95561ab99413acc93fbbb532528", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8901ac210e5857b0a957f1bcee9906e0fb8fa707/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8901ac210e5857b0a957f1bcee9906e0fb8fa707/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=8901ac210e5857b0a957f1bcee9906e0fb8fa707", "patch": "@@ -1280,6 +1280,12 @@ AC_DEFUN(GLIBCPP_ENABLE_CSTDIO, [\n   esac\n   AC_LINK_FILES($CSTDIO_H, bits/c++io.h)\n   AC_LINK_FILES($CSTDIO_CC, src/c++io.cc)\n+\n+  # 2000-08-04 bkoz hack\n+  CCODECVT_C=config/c_io_libio_codecvt.c\n+  AC_LINK_FILES($CCODECVT_C, libio/c_codecvt.c)\n+  # 2000-08-04 bkoz hack\n+\t\n   AM_CONDITIONAL(GLIBCPP_NEED_LIBIO, test \"$need_libio\" = yes)\n   AM_CONDITIONAL(GLIBCPP_NEED_XTRA_LIBIO, test \"$need_xtra_libio\" = yes)\n   AM_CONDITIONAL(GLIBCPP_NEED_WLIBIO, test \"$need_wlibio\" = yes)"}, {"sha": "498dc50ec7fd76396eff6002cceab1d8cb0ea72f", "filename": "libstdc++-v3/bits/basic_file.h", "status": "modified", "additions": 93, "deletions": 7, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8901ac210e5857b0a957f1bcee9906e0fb8fa707/libstdc%2B%2B-v3%2Fbits%2Fbasic_file.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8901ac210e5857b0a957f1bcee9906e0fb8fa707/libstdc%2B%2B-v3%2Fbits%2Fbasic_file.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fbits%2Fbasic_file.h?ref=8901ac210e5857b0a957f1bcee9906e0fb8fa707", "patch": "@@ -38,13 +38,82 @@\n #include <bits/std_ios.h>\n \n namespace std {\n-  \n+\n+  // Ulrich is going to make some detailed comment here, explaining\n+  // all this unpleasantness, providing detailed performance analysis\n+  // as to why we have to do all this lame vtable hacking instead of a\n+  // sane, function-based approach. This verbage will provide a clear\n+  // and detailed description of the whole object-layout,\n+  // vtable-swapping, sordid history of this hack.\n+  template<typename _CharT>\n+  struct __basic_file_base: public __c_file_type\n+  {\n+    virtual \n+    ~__basic_file_base() { };\n+\n+    virtual int \n+    overflow(int __c = EOF) = 0;\n+\n+    virtual int \n+    underflow() = 0;\n+\n+    virtual int \n+    uflow() = 0;\n+\n+    virtual int \n+    pbackfail(int __c) = 0;\n+\n+    virtual streamsize \n+    xsputn(const _CharT* __s, streamsize __n) = 0;\n+\n+    virtual streamsize \n+    xsgetn(_CharT* __s, streamsize __n) = 0;\n+\n+    virtual streamoff\n+    seekoff(streamoff __off, ios_base::seekdir __way,\n+\t    ios_base::openmode __mode = ios_base::in | ios_base::out) = 0;\n+\n+    virtual streamoff\n+    seekpos(streamoff __pos, \n+\t    ios_base::openmode __mode = ios_base::in | ios_base::out) = 0;\n+\n+    virtual streambuf* \n+    setbuf(_CharT* __b, int __len) = 0;\n+\n+    virtual int \n+    sync() = 0;\n+\n+    virtual int \n+    doallocate() = 0;\n+\n+    virtual streamsize \n+    sys_read(_CharT* __s, streamsize __n) = 0;\n+\n+    virtual streamsize \n+    sys_write(const _CharT* __s, streamsize __n) = 0;\n+\n+    virtual streamoff\n+    sys_seek(streamoff __off, ios_base::seekdir __way) = 0;\n+\n+    virtual int \n+    sys_close() = 0;\n+\n+    virtual int \n+    sys_stat(void* __v) = 0;\n+\n+    virtual int \n+    showmanyc() = 0;\n+\n+    virtual void \n+    imbue(void* __v) = 0;\n+  };\n+\n   // Some of these member functions are based on libio/filebuf.cc.\n   // Also note that the order and number of virtual functions has to precisely\n   // match the order and number in the _IO_jump_t struct defined in libioP.h.\n   template<typename _CharT>\n #if _GLIBCPP_BASIC_FILE_INHERITANCE\n-    class __basic_file: public __c_file_type\n+    class __basic_file: public __basic_file_base<_CharT>\n #else\n     class __basic_file\n #endif\n@@ -53,6 +122,7 @@ namespace std {\n       int \t\t_M_fileno;\n       __c_file_type* \t_M_cfile;\n #endif\n+      __c_wfile_type\t_M_wfile;\n \n     public:\n       __basic_file(__c_lock* __lock = 0);\n@@ -104,13 +174,13 @@ namespace std {\n       // ponters and associated data members correctly and manages it's\n       // relation to the external byte sequence.\n       virtual streamsize \n-      xsputn(const char* __s, streamsize __n);\n+      xsputn(const _CharT* __s, streamsize __n);\n \n       // A complex \"read\" function that sets all of __c_file_type's\n       // ponters and associated data members correctly and manages it's\n       // relation to the external byte sequence.\n       virtual streamsize \n-      xsgetn(char* __s, streamsize __n);\n+      xsgetn(_CharT* __s, streamsize __n);\n \n       // A complex \"seekoff\" function that sets all of __c_file_type's\n       // ponters and associated data members correctly and manages it's\n@@ -139,13 +209,13 @@ namespace std {\n       // does no mucking around with or setting of the pointers or flags\n       // in __c_file_type.\n       virtual streamsize \n-      sys_read(char* __s, streamsize __n);\n+      sys_read(_CharT* __s, streamsize __n);\n \n       // A simple write function for the external byte sequence, that\n       // does no mucking around with or setting of the pointers or flags\n       // in __c_file_type.\n       virtual streamsize \n-      sys_write(const char* __s, streamsize __n);\n+      sys_write(const _CharT* __s, streamsize __n);\n \n       // A simple seek function for the external byte sequence, that\n       // does no mucking around with or setting of the pointers or flags\n@@ -178,6 +248,14 @@ namespace std {\n     int \n     __basic_file<char>::underflow();\n \n+  template<>\n+    int \n+    __basic_file<char>::uflow();\n+\n+  template<>\n+    int \n+    __basic_file<char>::pbackfail(int __c);\n+\n   template<>\n     streamsize \n     __basic_file<char>::xsputn(const char* __s, streamsize __n);\n@@ -216,9 +294,17 @@ namespace std {\n     int \n     __basic_file<wchar_t>::underflow();\n \n+  template<>\n+    int \n+    __basic_file<wchar_t>::uflow();\n+\n+  template<>\n+    int \n+    __basic_file<wchar_t>::pbackfail(int __c);\n+\n   template<>\n     streamsize \n-    __basic_file<wchar_t>::xsputn(const char* __s, streamsize __n);\n+    __basic_file<wchar_t>::xsputn(const wchar_t* __s, streamsize __n);\n \n   template<>\n     streamoff"}, {"sha": "d3a57501097415b8b7c4aa72bb4d6a995674fee4", "filename": "libstdc++-v3/bits/fstream.tcc", "status": "modified", "additions": 44, "deletions": 3, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8901ac210e5857b0a957f1bcee9906e0fb8fa707/libstdc%2B%2B-v3%2Fbits%2Ffstream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8901ac210e5857b0a957f1bcee9906e0fb8fa707/libstdc%2B%2B-v3%2Fbits%2Ffstream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fbits%2Ffstream.tcc?ref=8901ac210e5857b0a957f1bcee9906e0fb8fa707", "patch": "@@ -235,10 +235,30 @@ namespace std\n \n \t  if (__testinit || __testget)\n \t    {\n+#if 1\n+\t      streamsize __size = _M_file->xsgetn(_M_in_beg, _M_buf_size);\n+\t      if (0 < __size)\n+\t\t{\n+\t\t  _M_set_determinate(__size);\n+\t\t  streamoff __p = _M_file->seekoff(0 - __size, ios_base::cur, \n+\t\t\t\t\t\t   ios_base::in);\n+\t\t  if (__p == -1)\n+\t\t    {\n+\t\t      // XXX Something is wrong, do error checking.\n+\t\t    }\n+\t\t  else\n+\t\t    {\n+\t\t      if (__testout)\n+\t\t\t_M_out_cur = _M_in_cur;\n+\t\t      __ret = traits_type::to_int_type(*_M_in_cur);\n+\t\t    }\n+\t\t}\n+#else\n+\t      // 2000-08-04 bkoz disable\n \t      // Part one: (Re)fill external buf (_M_file->_IO_*) from\n \t      // external byte sequence (whatever physical byte sink or\n \t      // FILE actually is.)\n-\t      char __conv_buf[_M_buf_size];\n+\t      char_type __conv_buf[_M_buf_size];\n \t      streamsize __size = _M_file->xsgetn(__conv_buf, _M_buf_size);\n \t      \n \t      // Part two: (Re)fill internal buf contents from external buf.\n@@ -278,7 +298,8 @@ namespace std\n \t\t      // XXX Something is wrong, do error checking.\n \t\t    }\n \t\t}\n-\t    }\t      \n+#endif\t      \n+\t    }\n \t}\n       _M_last_overflowed = false;\t\n       return __ret;\n@@ -384,10 +405,29 @@ namespace std\n     {\n       int_type __ret = traits_type::eof();\n       bool __testput = _M_out_cur && _M_out_beg < _M_out_end;\n-      bool __testeof = traits_type::eq_int_type(__c, traits_type::eof());\n       \n       if (__testput)\n \t{\n+\t  bool __testeof = traits_type::eq_int_type(__c, traits_type::eof());\n+#if 1\n+\t  int __plen = _M_out_end - _M_out_beg;\n+\t  streamsize __len = _M_file->xsputn(_M_out_beg, __plen);\n+\t  if (!__testeof)\n+\t    {\n+\t      char_type __pending = traits_type::to_char_type(__c);\n+\t      __len += _M_file->xsputn(&__pending, 1);\n+\t      ++__plen;\n+\t    }\n+\t  traits_type::to_char_type(__c);\n+\t  // NB: Need this so that external byte sequence reflects\n+\t  // internal buffer.\n+\t  _M_file->sync();\n+\t  if (__len == __plen)\n+\t    {\n+\t      _M_set_indeterminate();\n+\t      __ret = traits_type::not_eof(__c);\n+\t    }\n+#else\n \t  // Part one: Allocate temporary conversion buffer on\n \t  // stack. Convert internal buffer plus __c (ie,\n \t  // \"pending sequence\") to temporary conversion buffer.\n@@ -427,6 +467,7 @@ namespace std\n \t\t  __ret = traits_type::not_eof(__c);\n \t\t}\n \t    }\n+#endif\n \t}\t      \n       _M_last_overflowed = true;\t\n       return __ret;"}, {"sha": "6b3586262ac20c62076037569bdeb80fb0f6d8b5", "filename": "libstdc++-v3/config/c_io_libio.cc", "status": "modified", "additions": 65, "deletions": 30, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8901ac210e5857b0a957f1bcee9906e0fb8fa707/libstdc%2B%2B-v3%2Fconfig%2Fc_io_libio.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8901ac210e5857b0a957f1bcee9906e0fb8fa707/libstdc%2B%2B-v3%2Fconfig%2Fc_io_libio.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fc_io_libio.cc?ref=8901ac210e5857b0a957f1bcee9906e0fb8fa707", "patch": "@@ -36,7 +36,12 @@\n #include <fcntl.h> \t\t// Solaris needs for O_* macros\n \n namespace std {\n-  \n+\n+  // Need to instantiate base class here for type-info bits, etc\n+  template struct __basic_file_base<char>;\n+  template struct __basic_file_base<wchar_t>;\n+\n+  // Generic definitions for __basic_file\n   template<typename _CharT>\n     int \n     __basic_file<_CharT>::get_fileno(void)\n@@ -104,17 +109,17 @@ namespace std {\n       int __rw_mode = _IO_NO_READS + _IO_NO_WRITES; \n       \n       _M_open_mode(__mode, __p_mode, __rw_mode);\n-      // _IO_file_attach \n-      //  sets _IO_DELETE_DONT_CLOSE\n-      //  clears _IO_NO_READS + _IO_NO_WRITES\n-      if (_IO_file_attach(this, __fd) != NULL)\n+\n+      if (!_IO_file_is_open(this))\n \t{\n-\t  // Set flags appropriately for openmode...\n+\t  _fileno = __fd;\n+\t  _flags &= ~(_IO_NO_READS+_IO_NO_WRITES);\n+\t  _flags |= _IO_DELETE_DONT_CLOSE;\n+\t  _offset = _IO_pos_BAD;\n \t  int __mask = _IO_NO_READS + _IO_NO_WRITES + _IO_IS_APPENDING;\n \t  _IO_mask_flags(this, __rw_mode, __mask);\n \t}\n-      else\n-\t_IO_un_link((_IO_FILE_plus*) this);\n+\n       return __ret;\n     }\n   \n@@ -147,34 +152,22 @@ namespace std {\n     { \n       return _IO_file_close_it(this) ? static_cast<__basic_file*>(NULL) : this;\n     }\n-\n-  // NB: Unused.\n-  template<typename _CharT>\n-    int \n-    __basic_file<_CharT>::uflow()  \n-    { return _IO_default_uflow(this); }\n-  \n-  // NB: Unused.\n-  template<typename _CharT>\n-    int \n-    __basic_file<_CharT>::pbackfail(int __c) \n-    { return _IO_default_pbackfail(this, __c); }\n-  \n+ \n   template<typename _CharT>\n     streamsize \n-    __basic_file<_CharT>::xsgetn(char* __s, streamsize __n)\n+    __basic_file<_CharT>::xsgetn(_CharT* __s, streamsize __n)\n     { return _IO_file_xsgetn(this, __s, __n); }\n \n   // NB: Unused.\n   template<typename _CharT>\n     streamsize \n-    __basic_file<_CharT>::sys_read(char* __s, streamsize __n) \n+    __basic_file<_CharT>::sys_read(_CharT* __s, streamsize __n) \n     { return _IO_file_read(this, __s, __n); }\n \n   // NB: Unused.    \n   template<typename _CharT>\n     streamsize \n-    __basic_file<_CharT>::sys_write(const char* __s, streamsize __n) \n+    __basic_file<_CharT>::sys_write(const _CharT* __s, streamsize __n) \n     { return _IO_file_write(this, __s, __n); }\n \n   // NB: Unused.\n@@ -211,7 +204,8 @@ namespace std {\n #ifdef _IO_MTSAFE_IO\n     _lock = __lock;\n #endif\n-    _IO_no_init(this, 0 /* ??? */, -1, 0, 0);\n+    // Don't set the orientation of the stream when initializing.\n+    _IO_no_init(this, 0, 0, &_M_wfile, 0);\n     _IO_JUMPS(this) = &_IO_file_jumps;\n     _IO_file_init((_IO_FILE_plus*)this);\n   }\n@@ -226,6 +220,16 @@ namespace std {\n   __basic_file<char>::underflow()  \n   { return _IO_file_underflow(this); }\n \n+  // NB: Unused.\n+  int \n+  __basic_file<char>::uflow()  \n+  { return _IO_default_uflow(this); }\n+\n+  // NB: Unused.\n+  int \n+  __basic_file<char>::pbackfail(int __c) \n+  { return _IO_default_pbackfail(this, __c); }\n+ \n   streamsize \n   __basic_file<char>::xsputn(const char* __s, streamsize __n)\n   { return _IO_file_xsputn(this, __s, __n); }\n@@ -262,11 +266,32 @@ namespace std {\n #ifdef _IO_MTSAFE_IO\n     _lock = __lock;\n #endif\n-    // bkoz this should be -1\n-    //    _IO_no_init(this, 0 /* ??? */, 1, 0, 0);\n-    _IO_no_init(this, 0 /* ??? */, -1, 0, 0);\n-    _IO_JUMPS(this) = &_IO_file_jumps;\n+    // Don't set the orientation of the stream when initializing.\n+    _IO_no_init(this, 0, 0, &_M_wfile, &_IO_wfile_jumps);\n+    _IO_JUMPS(this) = &_IO_wfile_jumps;\n     _IO_file_init((_IO_FILE_plus*)this);\n+\n+    // In addition, need to allocate the buffer...\n+    _IO_wdoallocbuf(this);\n+    // Setup initial positions for this buffer...\n+    //    if (!(_flags & _IO_NO_READS))\n+    _IO_wsetg(this, _wide_data->_IO_buf_base, _wide_data->_IO_buf_base,\n+\t      _wide_data->_IO_buf_base);\n+    //    if (!(_flags & _IO_NO_WRITES))\n+    _IO_wsetp(this, _wide_data->_IO_buf_base, _wide_data->_IO_buf_base);\n+    \n+    // Setup codecvt bits...\n+    _wide_data->_codecvt = __c_libio_codecvt;\n+    \n+    // Do the same for narrow bits...\n+    if (_IO_write_base == NULL)\n+      {\n+\t_IO_doallocbuf(this);\n+\t//      if (!(_flags & _IO_NO_READS))\n+\t_IO_setg(this, _IO_buf_base, _IO_buf_base, _IO_buf_base);\n+\t//    if (!(_flags & _IO_NO_WRITES))\n+\t_IO_setp(this, _IO_buf_base, _IO_buf_base);\n+      }\n   }\n \n  int \n@@ -277,8 +302,18 @@ namespace std {\n   __basic_file<wchar_t>::underflow()  \n   { return _IO_wfile_underflow(this); }\n \n+  // NB: Unused.\n+  int \n+  __basic_file<wchar_t>::uflow()  \n+  { return _IO_wdefault_uflow(this); }\n+\n+  // NB: Unused.\n+  int \n+  __basic_file<wchar_t>::pbackfail(int __c) \n+  { return _IO_wdefault_pbackfail(this, __c); }\n+\n   streamsize \n-  __basic_file<wchar_t>::xsputn(const char* __s, streamsize __n)\n+  __basic_file<wchar_t>::xsputn(const wchar_t* __s, streamsize __n)\n   { return _IO_wfile_xsputn(this, __s, __n); }\n   \n   streamoff"}, {"sha": "db8b6c7a97faf5a64565247e4b675cf3e9a62011", "filename": "libstdc++-v3/config/c_io_libio.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8901ac210e5857b0a957f1bcee9906e0fb8fa707/libstdc%2B%2B-v3%2Fconfig%2Fc_io_libio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8901ac210e5857b0a957f1bcee9906e0fb8fa707/libstdc%2B%2B-v3%2Fconfig%2Fc_io_libio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fc_io_libio.h?ref=8901ac210e5857b0a957f1bcee9906e0fb8fa707", "patch": "@@ -53,8 +53,11 @@ namespace std {\n   typedef _IO_lock_t\t__c_lock;\n \n // from basic_file.h\n-  typedef _IO_FILE \t__c_file_type;\n #define _GLIBCPP_BASIC_FILE_INHERITANCE 1\n+  typedef _IO_FILE \t__c_file_type;\n+  typedef _IO_wide_data __c_wfile_type;\n+\n+  extern \"C\" struct _IO_codecvt __c_libio_codecvt;\n \n // from ios_base.h\n   struct __ios_flags"}, {"sha": "d1b4b7f6f4218c4f60a72887f0fd77b6f409e28d", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 926, "deletions": 920, "changes": 1846, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8901ac210e5857b0a957f1bcee9906e0fb8fa707/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8901ac210e5857b0a957f1bcee9906e0fb8fa707/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=8901ac210e5857b0a957f1bcee9906e0fb8fa707"}, {"sha": "d006802bdf1670478467f7f8b61d9b610989e48a", "filename": "libstdc++-v3/docs/configopts.html", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8901ac210e5857b0a957f1bcee9906e0fb8fa707/libstdc%2B%2B-v3%2Fdocs%2Fconfigopts.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8901ac210e5857b0a957f1bcee9906e0fb8fa707/libstdc%2B%2B-v3%2Fdocs%2Fconfigopts.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fconfigopts.html?ref=8901ac210e5857b0a957f1bcee9906e0fb8fa707", "patch": "@@ -9,7 +9,7 @@\n    <TITLE>libstdc++-v3 configure options</TITLE>\n <LINK REL=\"home\" HREF=\"http://sources.redhat.com/libstdc++/\">\n <LINK REL=StyleSheet HREF=\"lib3styles.css\">\n-<!-- $Id: configopts.html,v 1.5 2000/07/07 21:13:27 pme Exp $ -->\n+<!-- $Id: configopts.html,v 1.6 2000/07/11 21:45:07 pme Exp $ -->\n </HEAD>\n <BODY>\n \n@@ -33,6 +33,11 @@ <H1 CLASS=\"centered\"><A NAME=\"top\">Interesting <TT>configure</TT>\n    all have opposite forms as well</A>\n    (enable/disable and with/without).  The defaults are for the latest\n    snapshot, 2.90.8.\n+<P>\n+   The canonical way to find out the configure options that are\n+   available for a given set of libstdc++ sources is to go to the\n+   source directory and then type: <TT> ./config --help </TT>\n+\n <DL>\n  <DT><TT>--enable-multilib  </TT>[default]\n  <DD><P>This is part of the generic multilib support for building\n@@ -158,7 +163,7 @@ <H1 CLASS=\"centered\"><A NAME=\"top\">Interesting <TT>configure</TT>\n \n <HR>\n <P CLASS=\"fineprint\"><EM>\n-$Id: configopts.html,v 1.5 2000/07/07 21:13:27 pme Exp $\n+$Id: configopts.html,v 1.6 2000/07/11 21:45:07 pme Exp $\n </EM></P>\n \n "}, {"sha": "870bb78f051d48bc2f88b714dc1a65f2597ea5b7", "filename": "libstdc++-v3/libio/ChangeLog", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8901ac210e5857b0a957f1bcee9906e0fb8fa707/libstdc%2B%2B-v3%2Flibio%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8901ac210e5857b0a957f1bcee9906e0fb8fa707/libstdc%2B%2B-v3%2Flibio%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2FChangeLog?ref=8901ac210e5857b0a957f1bcee9906e0fb8fa707", "patch": "@@ -1,14 +1,23 @@\n-2000-07-12  benjamin kosnik  <bkoz@haight.constant.com>\n+2000-08-04  benjamin kosnik  <bkoz@haight.constant.com>\n+\n+\t* genops.c (_IO_unbuffer_write): Don't call _IO_SETBUF if the\n+\tstream is not orientated.\n+\n+2000-08-04  Benjamin Kosnik  <bkoz@gnu.org>\n+\n+\t* Makefile.am (LIBIO_SRCS): Add c_codecvt.c\n+\n+2000-07-12  benjamin kosnik  <bkoz@gnu.org>\n \n \t* _G_config.h: Smoke less crack, don't define _G_HAVE_ST_BLKSIZE.\n \n-2000-04-25  Benjamin Kosnik  <bkoz@haight.constant.com>\n+2000-04-25  Benjamin Kosnik  <bkoz@gnu.org>\n \n \t* libio.h: Change decls for seekoff/seekpos.\n \t* Makefile.am: Add bits to not generate _G_config.h on linux.\n \t* gen-params: Remove sigset_t declaration.\n \n-2000-02-29  Benjamin Kosnik  <bkoz@haight.constant.com>\n+2000-02-29  Benjamin Kosnik  <bkoz@gnu.org>\n \n \t* Makefile.am (libio_headers): Strip out deadweight.\n "}, {"sha": "0493e93a3902316a8c421f0cf4213164d8b8d02c", "filename": "libstdc++-v3/libio/Makefile.am", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8901ac210e5857b0a957f1bcee9906e0fb8fa707/libstdc%2B%2B-v3%2Flibio%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8901ac210e5857b0a957f1bcee9906e0fb8fa707/libstdc%2B%2B-v3%2Flibio%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2FMakefile.am?ref=8901ac210e5857b0a957f1bcee9906e0fb8fa707", "patch": "@@ -71,21 +71,21 @@ libio_headers = \\\n \n if GLIBCPP_NEED_LIBIO\n LIBIO_SRCS = \\\n-\tfiledoalloc.c genops.c fileops.c stdfiles.c cleanup.c\n+\tfiledoalloc.c genops.c fileops.c stdfiles.c cleanup.c c_codecvt.c\n else\n LIBIO_SRCS =\n endif\n \n if GLIBCPP_NEED_WLIBIO\n LIBIO_WSRCS = \\\n-\tiofwide.c wfiledoalloc.c wfileops.c wgenops.c\n+\twfiledoalloc.c wfileops.c wgenops.c\n else\n LIBIO_WSRCS =\n endif\n \n if GLIBCPP_NEED_XTRA_LIBIO\n LIBIO_XTRASRCS = \\\n-\tiofclose.c iofopen.c stdio.c\n+\tiofwide.c iofclose.c iofopen.c stdio.c\n else\n LIBIO_XTRASRCS =\n endif"}, {"sha": "83409fca69cef2c1e0276c9db760d3d058bfc447", "filename": "libstdc++-v3/libio/Makefile.in", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8901ac210e5857b0a957f1bcee9906e0fb8fa707/libstdc%2B%2B-v3%2Flibio%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8901ac210e5857b0a957f1bcee9906e0fb8fa707/libstdc%2B%2B-v3%2Flibio%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2FMakefile.in?ref=8901ac210e5857b0a957f1bcee9906e0fb8fa707", "patch": "@@ -146,11 +146,11 @@ LINK = $(LIBTOOL) --mode=link \"$(CCLD)\" $(CFLAGS) $(AM_CFLAGS) $(LDFLAGS) -o $@\n \n libio_headers =          libio.h libioP.h iolibio.h\n \n-@GLIBCPP_NEED_LIBIO_TRUE@LIBIO_SRCS = \tfiledoalloc.c genops.c fileops.c stdfiles.c cleanup.c\n+@GLIBCPP_NEED_LIBIO_TRUE@LIBIO_SRCS = \tfiledoalloc.c genops.c fileops.c stdfiles.c cleanup.c c_codecvt.c\n @GLIBCPP_NEED_LIBIO_FALSE@LIBIO_SRCS = \n-@GLIBCPP_NEED_WLIBIO_TRUE@LIBIO_WSRCS = \tiofwide.c wfiledoalloc.c wfileops.c wgenops.c\n+@GLIBCPP_NEED_WLIBIO_TRUE@LIBIO_WSRCS = \twfiledoalloc.c wfileops.c wgenops.c\n @GLIBCPP_NEED_WLIBIO_FALSE@LIBIO_WSRCS = \n-@GLIBCPP_NEED_XTRA_LIBIO_TRUE@LIBIO_XTRASRCS = \tiofclose.c iofopen.c stdio.c\n+@GLIBCPP_NEED_XTRA_LIBIO_TRUE@LIBIO_XTRASRCS = \tiofwide.c iofclose.c iofopen.c stdio.c\n @GLIBCPP_NEED_XTRA_LIBIO_FALSE@LIBIO_XTRASRCS = \n \n EXTRA_DIST = iostreamP.h\n@@ -175,16 +175,16 @@ libio_la_LDFLAGS =\n @GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@fileops.lo \\\n @GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@stdfiles.lo \\\n @GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@cleanup.lo \\\n-@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@iofwide.lo \\\n+@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@c_codecvt.lo \\\n @GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@wfiledoalloc.lo \\\n @GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@wfileops.lo \\\n @GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@wgenops.lo \\\n+@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@iofwide.lo \\\n @GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@iofclose.lo \\\n @GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@iofopen.lo \\\n @GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@stdio.lo\n @GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_LIBIO_FALSE@@GLIBCPP_NEED_XTRA_LIBIO_FALSE@libio_la_OBJECTS = \n @GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_FALSE@@GLIBCPP_NEED_XTRA_LIBIO_FALSE@libio_la_OBJECTS =  \\\n-@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_FALSE@@GLIBCPP_NEED_XTRA_LIBIO_FALSE@iofwide.lo \\\n @GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_FALSE@@GLIBCPP_NEED_XTRA_LIBIO_FALSE@wfiledoalloc.lo \\\n @GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_FALSE@@GLIBCPP_NEED_XTRA_LIBIO_FALSE@wfileops.lo \\\n @GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_FALSE@@GLIBCPP_NEED_XTRA_LIBIO_FALSE@wgenops.lo\n@@ -193,8 +193,10 @@ libio_la_LDFLAGS =\n @GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_FALSE@genops.lo \\\n @GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_FALSE@fileops.lo \\\n @GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_FALSE@stdfiles.lo \\\n-@GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_FALSE@cleanup.lo\n+@GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_FALSE@cleanup.lo \\\n+@GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_FALSE@c_codecvt.lo\n @GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_LIBIO_FALSE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@libio_la_OBJECTS =  \\\n+@GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_LIBIO_FALSE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@iofwide.lo \\\n @GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_LIBIO_FALSE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@iofclose.lo \\\n @GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_LIBIO_FALSE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@iofopen.lo \\\n @GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_LIBIO_FALSE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@stdio.lo\n@@ -204,14 +206,16 @@ libio_la_LDFLAGS =\n @GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@fileops.lo \\\n @GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@stdfiles.lo \\\n @GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@cleanup.lo \\\n+@GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@c_codecvt.lo \\\n+@GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@iofwide.lo \\\n @GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@iofclose.lo \\\n @GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@iofopen.lo \\\n @GLIBCPP_NEED_WLIBIO_FALSE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@stdio.lo\n @GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_FALSE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@libio_la_OBJECTS =  \\\n-@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_FALSE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@iofwide.lo \\\n @GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_FALSE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@wfiledoalloc.lo \\\n @GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_FALSE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@wfileops.lo \\\n @GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_FALSE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@wgenops.lo \\\n+@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_FALSE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@iofwide.lo \\\n @GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_FALSE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@iofclose.lo \\\n @GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_FALSE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@iofopen.lo \\\n @GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_FALSE@@GLIBCPP_NEED_XTRA_LIBIO_TRUE@stdio.lo\n@@ -221,7 +225,7 @@ libio_la_LDFLAGS =\n @GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_FALSE@fileops.lo \\\n @GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_FALSE@stdfiles.lo \\\n @GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_FALSE@cleanup.lo \\\n-@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_FALSE@iofwide.lo \\\n+@GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_FALSE@c_codecvt.lo \\\n @GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_FALSE@wfiledoalloc.lo \\\n @GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_FALSE@wfileops.lo \\\n @GLIBCPP_NEED_WLIBIO_TRUE@@GLIBCPP_NEED_LIBIO_TRUE@@GLIBCPP_NEED_XTRA_LIBIO_FALSE@wgenops.lo"}, {"sha": "5d8f520e0009d7cf82fb2697e33f1a970e5148d1", "filename": "libstdc++-v3/libio/genops.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8901ac210e5857b0a957f1bcee9906e0fb8fa707/libstdc%2B%2B-v3%2Flibio%2Fgenops.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8901ac210e5857b0a957f1bcee9906e0fb8fa707/libstdc%2B%2B-v3%2Flibio%2Fgenops.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2Fgenops.c?ref=8901ac210e5857b0a957f1bcee9906e0fb8fa707", "patch": "@@ -783,7 +783,9 @@ _IO_unbuffer_write ()\n   for (fp = (_IO_FILE *) _IO_list_all; fp; fp = fp->_chain)\n     if (! (fp->_flags & _IO_UNBUFFERED)\n \t&& (! (fp->_flags & _IO_NO_WRITES)\n-\t    || (fp->_flags & _IO_IS_APPENDING)))\n+\t    || (fp->_flags & _IO_IS_APPENDING))\n+\t/* Iff stream is un-orientated, it wasn't used. */\n+\t&& fp->_mode != 0)\n       _IO_SETBUF (fp, NULL, 0);\n }\n "}, {"sha": "77b45918e98fef9a90b58585c92e97633234b5bc", "filename": "libstdc++-v3/libio/iofwide.c", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8901ac210e5857b0a957f1bcee9906e0fb8fa707/libstdc%2B%2B-v3%2Flibio%2Fiofwide.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8901ac210e5857b0a957f1bcee9906e0fb8fa707/libstdc%2B%2B-v3%2Flibio%2Fiofwide.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2Fiofwide.c?ref=8901ac210e5857b0a957f1bcee9906e0fb8fa707", "patch": "@@ -38,7 +38,6 @@\n # include <iconv/gconv_int.h>\n #endif\n \n-\n /* Prototypes of libio's codecvt functions.  */\n static enum __codecvt_result do_out (struct _IO_codecvt *codecvt,\n \t\t\t\t     __mbstate_t *statep,\n@@ -109,12 +108,12 @@ _IO_fwide (fp, mode)\n       fp->_wide_data->_IO_read_ptr = fp->_wide_data->_IO_read_end;\n       fp->_wide_data->_IO_write_ptr = fp->_wide_data->_IO_write_base;\n \n+#ifdef _LIBC\n       /* The functions are always the same.  */\n       *cc = __libio_codecvt;\n \n       /* Get the character conversion functions based on the currently\n \t selected locale for LC_CTYPE.  */\n-#ifdef _LIBC\n       {\n \tstruct gconv_fcts fcts;\n \n@@ -173,7 +172,7 @@ _IO_fwide (fp, mode)\n \tif (cc->__cd_in != (iconv_t) -1)\n \t  cc->__cd_out = iconv_open (external_ccs, internal_ccs);\n \n-\tif (cc->__cd_in != (iconv_t) -1 || cc->__cd_out != (iconv_t) -1)\n+\tif (cc->__cd_in == (iconv_t) -1 || cc->__cd_out == (iconv_t) -1)\n \t  /* XXX */\n \t  abort ();\n       }\n@@ -196,7 +195,6 @@ _IO_fwide (fp, mode)\n weak_alias (_IO_fwide, fwide)\n #endif\n \n-\n static enum __codecvt_result\n do_out (struct _IO_codecvt *codecvt, __mbstate_t *statep,\n \tconst wchar_t *from_start, const wchar_t *from_end,\n@@ -241,21 +239,22 @@ do_out (struct _IO_codecvt *codecvt, __mbstate_t *statep,\n     }\n #else\n # ifdef _GLIBCPP_USE_WCHAR_T\n+\n   size_t res;\n   const char *from_start_copy = (const char *) from_start;\n   size_t from_len = from_end - from_start;\n-  char *to_start_copy = (char *) from_start;\n+  char *to_start_copy = to_start;\n   size_t to_len = to_end - to_start;\n-\n   res = iconv (codecvt->__cd_out, &from_start_copy, &from_len,\n \t       &to_start_copy, &to_len);\n-  \n+\n   if (res == 0 || from_len == 0)\n     result = __codecvt_ok;\n   else if (to_len < codecvt->__codecvt_do_max_length (codecvt))\n     result = __codecvt_partial;\n   else\n     result = __codecvt_error;\n+\n # else\n   /* Decide what to do.  */\n   result = __codecvt_error;\n@@ -477,3 +476,10 @@ do_max_length (struct _IO_codecvt *codecvt)\n   return MB_CUR_MAX;\n #endif\n }\n+\n+\n+\n+\n+\n+\n+"}, {"sha": "4256d07880aa210db65789ea5f5e0d49cc9496fb", "filename": "libstdc++-v3/testsuite/21_strings/inserters_extractors.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8901ac210e5857b0a957f1bcee9906e0fb8fa707/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Finserters_extractors.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8901ac210e5857b0a957f1bcee9906e0fb8fa707/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Finserters_extractors.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Finserters_extractors.cc?ref=8901ac210e5857b0a957f1bcee9906e0fb8fa707", "patch": "@@ -190,7 +190,7 @@ void test04(int size)\n void test05(int size)\n {\n   bool test = true;\n-  const char* filename = \"testsuite/inserters_extractors-1.txt\";\n+  const char filename[] = \"testsuite/inserters_extractors-1.txt\";\n   const char fillc = 'f';\n   std::ofstream ofs(filename);\n   std::string str(size, fillc);"}, {"sha": "0c8738e0692ea24b66cdbf2eecc58b2d5cd6eb2e", "filename": "libstdc++-v3/testsuite/27_io/ostream_inserter_other.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8901ac210e5857b0a957f1bcee9906e0fb8fa707/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fostream_inserter_other.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8901ac210e5857b0a957f1bcee9906e0fb8fa707/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fostream_inserter_other.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fostream_inserter_other.cc?ref=8901ac210e5857b0a957f1bcee9906e0fb8fa707", "patch": "@@ -105,7 +105,7 @@ test03(void)\n   double tf_size = BUFSIZ * 2.5;\n   ofstream testfile(TEST_IN);\n \n-  for ( int i=0; i < tf_size; ++i )\n+  for (int i = 0; i < tf_size; ++i)\n     testfile.put('.');\n   testfile.close();\n "}]}