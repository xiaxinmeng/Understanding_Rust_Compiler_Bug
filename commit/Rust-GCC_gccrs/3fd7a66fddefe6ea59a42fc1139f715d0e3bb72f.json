{"sha": "3fd7a66fddefe6ea59a42fc1139f715d0e3bb72f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2ZkN2E2NmZkZGVmZTZlYTU5YTQyZmMxMTM5ZjcxNWQwZTNiYjcyZg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2013-05-26T08:48:22Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2013-05-26T08:48:22Z"}, "message": "decl.c (gnat_to_gnu_entity): Do not prematurely elaborate the full view of a type with a freeze node.\n\n\t* gcc-interface/decl.c (gnat_to_gnu_entity): Do not prematurely\n\telaborate the full view of a type with a freeze node.\n\t* gcc-interface/trans.c (process_type): Add explicit predicate.\n\nFrom-SVN: r199336", "tree": {"sha": "e3ae07551814997a53789a389ad5325c631e067e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e3ae07551814997a53789a389ad5325c631e067e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3fd7a66fddefe6ea59a42fc1139f715d0e3bb72f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fd7a66fddefe6ea59a42fc1139f715d0e3bb72f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fd7a66fddefe6ea59a42fc1139f715d0e3bb72f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fd7a66fddefe6ea59a42fc1139f715d0e3bb72f/comments", "author": null, "committer": null, "parents": [{"sha": "184179f1834363a901d50a31610d51045b6976c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/184179f1834363a901d50a31610d51045b6976c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/184179f1834363a901d50a31610d51045b6976c1"}], "stats": {"total": 56, "additions": 53, "deletions": 3}, "files": [{"sha": "2844de415ed00061c6a6a33a539776582e7b693b", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fd7a66fddefe6ea59a42fc1139f715d0e3bb72f/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fd7a66fddefe6ea59a42fc1139f715d0e3bb72f/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=3fd7a66fddefe6ea59a42fc1139f715d0e3bb72f", "patch": "@@ -1,3 +1,9 @@\n+2013-05-26  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity): Do not prematurely\n+\telaborate the full view of a type with a freeze node.\n+\t* gcc-interface/trans.c (process_type): Add explicit predicate.\n+\n 2013-05-26  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/decl.c (gnat_to_gnu_entity) <object>: Always build the"}, {"sha": "4a528b20d1d5423092ba035e0c3671ba446476bf", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fd7a66fddefe6ea59a42fc1139f715d0e3bb72f/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fd7a66fddefe6ea59a42fc1139f715d0e3bb72f/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=3fd7a66fddefe6ea59a42fc1139f715d0e3bb72f", "patch": "@@ -288,7 +288,8 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n      If we are defining the node, we should not have already processed it.\n      In that case, we will abort below when we try to save a new GCC tree\n      for this object.  We also need to handle the case of getting a dummy\n-     type when a Full_View exists.  */\n+     type when a Full_View exists but be careful so as not to trigger its\n+     premature elaboration.  */\n   if ((!definition || (is_type && imported_p))\n       && present_gnu_tree (gnat_entity))\n     {\n@@ -297,7 +298,9 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n       if (TREE_CODE (gnu_decl) == TYPE_DECL\n \t  && TYPE_IS_DUMMY_P (TREE_TYPE (gnu_decl))\n \t  && IN (kind, Incomplete_Or_Private_Kind)\n-\t  && Present (Full_View (gnat_entity)))\n+\t  && Present (Full_View (gnat_entity))\n+\t  && (present_gnu_tree (Full_View (gnat_entity))\n+\t      || No (Freeze_Node (Full_View (gnat_entity)))))\n \t{\n \t  gnu_decl\n \t    = gnat_to_gnu_entity (Full_View (gnat_entity), NULL_TREE, 0);"}, {"sha": "13767e9dd9bc609a32c936d300b6dbe00cb10b69", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fd7a66fddefe6ea59a42fc1139f715d0e3bb72f/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fd7a66fddefe6ea59a42fc1139f715d0e3bb72f/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=3fd7a66fddefe6ea59a42fc1139f715d0e3bb72f", "patch": "@@ -8723,7 +8723,7 @@ process_type (Entity_Id gnat_entity)\n   if (Present (Freeze_Node (gnat_entity))\n       || (IN (Ekind (gnat_entity), Incomplete_Or_Private_Kind)\n \t  && Present (Full_View (gnat_entity))\n-\t  && Freeze_Node (Full_View (gnat_entity))\n+\t  && Present (Freeze_Node (Full_View (gnat_entity)))\n \t  && !present_gnu_tree (Full_View (gnat_entity))))\n     {\n       elaborate_entity (gnat_entity);"}, {"sha": "f60cfe17b703a5f69145d0cdb8426e62d7d0df14", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fd7a66fddefe6ea59a42fc1139f715d0e3bb72f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fd7a66fddefe6ea59a42fc1139f715d0e3bb72f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3fd7a66fddefe6ea59a42fc1139f715d0e3bb72f", "patch": "@@ -1,3 +1,7 @@\n+2013-05-26  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/incomplete3.ad[sb]: New test.\n+\n 2013-05-25  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \tPR target/53916"}, {"sha": "6db500f00f6953497d824893b106f66bff2faa7e", "filename": "gcc/testsuite/gnat.dg/incomplete3.adb", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fd7a66fddefe6ea59a42fc1139f715d0e3bb72f/gcc%2Ftestsuite%2Fgnat.dg%2Fincomplete3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fd7a66fddefe6ea59a42fc1139f715d0e3bb72f/gcc%2Ftestsuite%2Fgnat.dg%2Fincomplete3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fincomplete3.adb?ref=3fd7a66fddefe6ea59a42fc1139f715d0e3bb72f", "patch": "@@ -0,0 +1,15 @@\n+-- { dg-do compile }\n+\n+package body Incomplete3 is\n+\n+   function Get_Tracer (This : access Output_T'Class) return Tracer_T'class is\n+   begin\n+      return Tracer_T'Class (Tracer_T'(Output => This));\n+   end ;\n+\n+   function Get_Output (This : in Tracer_T) return access Output_T'Class is\n+   begin\n+      return This.Output;\n+   end;\n+\n+end Incomplete3;"}, {"sha": "6f89374971cd1027239968fc8eced9af6d0d96ae", "filename": "gcc/testsuite/gnat.dg/incomplete3.ads", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fd7a66fddefe6ea59a42fc1139f715d0e3bb72f/gcc%2Ftestsuite%2Fgnat.dg%2Fincomplete3.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fd7a66fddefe6ea59a42fc1139f715d0e3bb72f/gcc%2Ftestsuite%2Fgnat.dg%2Fincomplete3.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fincomplete3.ads?ref=3fd7a66fddefe6ea59a42fc1139f715d0e3bb72f", "patch": "@@ -0,0 +1,22 @@\n+package Incomplete3 is\n+\n+   type Output_T;\n+   type Output_T is abstract tagged private;\n+\n+   type Tracer_T is tagged private;\n+\n+   function Get_Tracer (This : access Output_T'Class) return Tracer_T'class;\n+\n+   function Get_Output (This : in Tracer_T) return access Output_T'Class;\n+\n+private\n+\n+   type Output_T is abstract tagged record\n+      B : Boolean := True;\n+   end record;\n+\n+   type Tracer_T is tagged record\n+      Output : access Output_T'Class := null;\n+   end record;\n+\n+end Incomplete3;"}]}