{"sha": "b4bd32c169b461afd39a37318141f1c14af5e662", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjRiZDMyYzE2OWI0NjFhZmQzOWEzNzMxODE0MWYxYzE0YWY1ZTY2Mg==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@redhat.com", "date": "2015-08-05T13:09:43Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2015-08-05T13:09:43Z"}, "message": "gcc\t* config/rl78/rl78.c (rl78_force_nonfar_3): Remove optimization\n\tto allow identical far pointers to remain.\n\n\ntests\t* gcc.target/rl78: New directory.\n        * gcc.target/rl78/rl78.exp: New file: Test driver.\n        * gcc.target/rl78/test_addm3.c: New file: Test adds.\n\nFrom-SVN: r226624", "tree": {"sha": "cf4cdea97a4c008ff67375631e6f948dae186737", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf4cdea97a4c008ff67375631e6f948dae186737"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b4bd32c169b461afd39a37318141f1c14af5e662", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4bd32c169b461afd39a37318141f1c14af5e662", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4bd32c169b461afd39a37318141f1c14af5e662", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4bd32c169b461afd39a37318141f1c14af5e662/comments", "author": {"login": "nickclifton", "id": 31441682, "node_id": "MDQ6VXNlcjMxNDQxNjgy", "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nickclifton", "html_url": "https://github.com/nickclifton", "followers_url": "https://api.github.com/users/nickclifton/followers", "following_url": "https://api.github.com/users/nickclifton/following{/other_user}", "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}", "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions", "organizations_url": "https://api.github.com/users/nickclifton/orgs", "repos_url": "https://api.github.com/users/nickclifton/repos", "events_url": "https://api.github.com/users/nickclifton/events{/privacy}", "received_events_url": "https://api.github.com/users/nickclifton/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "aad88aede922888994eda29d6847cf557b50a7fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aad88aede922888994eda29d6847cf557b50a7fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aad88aede922888994eda29d6847cf557b50a7fd"}], "stats": {"total": 182, "additions": 175, "deletions": 7}, "files": [{"sha": "77690973db3bcd2613d0368783e7ee77084676c8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4bd32c169b461afd39a37318141f1c14af5e662/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4bd32c169b461afd39a37318141f1c14af5e662/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b4bd32c169b461afd39a37318141f1c14af5e662", "patch": "@@ -1,3 +1,8 @@\n+2015-08-05  Nick Clifton  <nickc@redhat.com>\n+\n+\t* config/rl78/rl78.c (rl78_force_nonfar_3): Remove optimization\n+\tto allow identical far pointers to remain.\n+\n 2015-08-05  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/67120"}, {"sha": "e74d6c38a3187773c39ba5ab2bdf672da56f5143", "filename": "gcc/config/rl78/rl78.c", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4bd32c169b461afd39a37318141f1c14af5e662/gcc%2Fconfig%2Frl78%2Frl78.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4bd32c169b461afd39a37318141f1c14af5e662/gcc%2Fconfig%2Frl78%2Frl78.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frl78%2Frl78.c?ref=b4bd32c169b461afd39a37318141f1c14af5e662", "patch": "@@ -608,13 +608,6 @@ rl78_force_nonfar_3 (rtx *operands, rtx (*gen)(rtx,rtx,rtx))\n   int did = 0;\n   rtx temp_reg = NULL;\n \n-  /* As an exception, we allow two far operands if they're identical\n-     and the third operand is not a MEM.  This allows global variables\n-     to be incremented, for example.  */\n-  if (rtx_equal_p (operands[0], operands[1])\n-      && ! MEM_P (operands[2]))\n-    return 0;\n-\n   /* FIXME: Likewise.  */\n   if (rl78_far_p (operands[1]))\n     {"}, {"sha": "62a4080d46ba2bb36ab0e7366fac5e7f5369b015", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4bd32c169b461afd39a37318141f1c14af5e662/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4bd32c169b461afd39a37318141f1c14af5e662/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b4bd32c169b461afd39a37318141f1c14af5e662", "patch": "@@ -1,3 +1,9 @@\n+2015-08-05  Nick Clifton  <nickc@redhat.com>\n+\n+\t* gcc.target/rl78: New directory.\n+        * gcc.target/rl78/rl78.exp: New file: Test driver.\n+        * gcc.target/rl78/test_addm3.c: New file: Test adds.\n+\n 2015-08-05  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/67120"}, {"sha": "f32740212c2f8c5b0daf35958268ae46c6424184", "filename": "gcc/testsuite/gcc.target/rl78/rl78.exp", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4bd32c169b461afd39a37318141f1c14af5e662/gcc%2Ftestsuite%2Fgcc.target%2Frl78%2Frl78.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4bd32c169b461afd39a37318141f1c14af5e662/gcc%2Ftestsuite%2Fgcc.target%2Frl78%2Frl78.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Frl78%2Frl78.exp?ref=b4bd32c169b461afd39a37318141f1c14af5e662", "patch": "@@ -0,0 +1,43 @@\n+# Copyright (C) 2015 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+# \n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+# \n+# You should have received a copy of the GNU General Public License\n+# along with this program; if not, write to the Free Software\n+# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  \n+\n+# GCC testsuite that uses the `dg.exp' driver.\n+\n+# Exit immediately if this isn't the right target.\n+if { ![istarget rl78-*-*] } then {\n+  return\n+}\n+\n+# Load support procs.\n+load_lib gcc-dg.exp\n+\n+# If a testcase doesn't have special options, use these.\n+global DEFAULT_CFLAGS\n+if ![info exists DEFAULT_CFLAGS] then {\n+    set DEFAULT_CFLAGS \"\"\n+}\n+\n+# Initialize `dg'.\n+dg-init\n+\n+# Find all tests\n+set tests [lsort [find $srcdir/$subdir *.\\[cS\\]]]\n+\n+# Main loop.\n+gcc-dg-runtest $tests \"\" $DEFAULT_CFLAGS\n+\n+# All done.\n+dg-finish"}, {"sha": "1beeb1b0ac8e62e74223f94e85d6cb59137e24a4", "filename": "gcc/testsuite/gcc.target/rl78/test_addm3.c", "status": "added", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4bd32c169b461afd39a37318141f1c14af5e662/gcc%2Ftestsuite%2Fgcc.target%2Frl78%2Ftest_addm3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4bd32c169b461afd39a37318141f1c14af5e662/gcc%2Ftestsuite%2Fgcc.target%2Frl78%2Ftest_addm3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Frl78%2Ftest_addm3.c?ref=b4bd32c169b461afd39a37318141f1c14af5e662", "patch": "@@ -0,0 +1,99 @@\n+/* Remove `-ansi' from options to enable the use of __far and long long.  */\r\n+/* { dg-options \"\" } */\r\n+\r\n+#define ADD(TYPE, name)\t\t\t\t\\\r\n+  TYPE\t\t\t\t\t\t\\\r\n+  add##name(TYPE a, TYPE b)\t\t\t\\\r\n+  {\t\t\t\t\t\t\\\r\n+    return a + b;\t\t\t\t\\\r\n+  }\t\t\t\t\t\t\\\r\n+  \r\n+#define ADDIMM(TYPE, name)\t\t\t\\\r\n+  TYPE\t\t\t\t\t\t\\\r\n+  addimm##name(TYPE a)\t\t\t\t\\\r\n+  {\t\t\t\t\t\t\\\r\n+    return a + 50;\t\t\t\t\\\r\n+  }\t\t\t\t\t\t\\\r\n+\r\n+#define ADDFAR(TYPE, name)\t\t\t\\\r\n+  TYPE __far gf##name;\t\t\t\t\\\r\n+  void\t\t\t\t\t\t\\\r\n+  addfar##name(TYPE __far *pa, TYPE b)\t\t\\\r\n+  {\t\t\t\t\t\t\\\r\n+    gf##name += b;\t\t\t\t\\\r\n+    *pa += 50;\t\t\t\t\t\\\r\n+  }\t\t\t\t\t\t\\\r\n+  \r\n+\r\n+ADD (char, qi3)\r\n+ADD (int, hi3)\r\n+ADD (long, si3)\r\n+ADD (long long, di3)\r\n+ADD (float, sf3)\r\n+ADD (double, df3)\r\n+\r\n+ADDIMM (char, qi3)\r\n+ADDIMM (int, hi3)\r\n+ADDIMM (long, si3)\r\n+ADDIMM (long long, di3)\r\n+ADDIMM (float, sf3)\r\n+ADDIMM (double, df3)\r\n+\r\n+ADDFAR (char, qi3)\r\n+ADDFAR (int, hi3)\r\n+ADDFAR (long, si3)\r\n+ADDFAR (long long, di3)\r\n+ADDFAR (float, sf3)\r\n+ADDFAR (double, df3)\r\n+\r\n+char aqi1, aqi2;\r\n+int ahi1, ahi2;\r\n+long asi1, asi2;\r\n+long long adi1, adi2;\r\n+float af1, af2;\r\n+double ad1, ad2;\r\n+\r\n+void\r\n+testglobal (void)\r\n+{\r\n+  aqi1 += aqi2;\r\n+  ahi1 += ahi2;\r\n+  asi1 += asi2;\r\n+  adi1 += adi2;\r\n+  af1 += af2;\r\n+  ad1 += ad2;\r\n+}\r\n+\r\n+void\r\n+testglobal2 (void)\r\n+{\r\n+  aqi1 += 10;\r\n+  ahi1 += 11;\r\n+  asi1 += 12;\r\n+  adi1 += 13;\r\n+  af1 += 2.0;\r\n+  ad1 += 4.0;\r\n+}\r\n+\r\n+void\r\n+testptr (char *aqi1, int *ahi1, long *asi1, long long *adi1, float *af1, double *ad1, \r\n+\t char *aqi2, int *ahi2, long *asi2, long long *adi2, float *af2, double *ad2)\r\n+{\r\n+  *aqi1 += *aqi2;\r\n+  *ahi1 += *ahi2;\r\n+  *asi1 += *asi2;\r\n+  *adi1 += *adi2;\r\n+  *af1 += *af2;\r\n+  *ad1 += *ad2;\r\n+}\r\n+\r\n+void\r\n+testptr2 (char *aqi1, int *ahi1, long *asi1, long long *adi1, float *af1, double *ad1)\r\n+{\r\n+  *aqi1 += 5;\r\n+  *ahi1 += 10;\r\n+  *asi1 += 11;\r\n+  *adi1 += 12;\r\n+  *af1 += 4.5;\r\n+  *ad1 += 5.5;\r\n+}\r"}, {"sha": "81a43c8d166a22194773efefeb84f1abb3525005", "filename": "gcc/testsuite/gcc.target/rx/rx-abi-function-tests.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4bd32c169b461afd39a37318141f1c14af5e662/gcc%2Ftestsuite%2Fgcc.target%2Frx%2Frx-abi-function-tests.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4bd32c169b461afd39a37318141f1c14af5e662/gcc%2Ftestsuite%2Fgcc.target%2Frx%2Frx-abi-function-tests.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Frx%2Frx-abi-function-tests.c?ref=b4bd32c169b461afd39a37318141f1c14af5e662", "patch": "@@ -15,7 +15,29 @@ extern float              _COM_ADDf (float, float);\n extern float              _COM_SUBf (float, float);\n extern float              _COM_MULf (float, float);\n extern float              _COM_DIVf (float, float);\n+\n+#ifdef __RX_64BIT_DOUBLES__\n+extern int                _COM_CMPLTf (double, double);\n+extern int                _COM_CMPGTf (double, double);\n+extern int                _COM_CMPLEf (double, double);\n+extern int                _COM_CMPGEf (double, double);\n+extern int                _COM_CMPEQf (double, double);\n+extern int                _COM_CMPNEf (double, double);\n+#else\n extern int                _COM_CMPLTf (float, float);\n+extern int                _COM_CMPGTf (float, float);\n+extern int                _COM_CMPLEf (float, float);\n+extern int                _COM_CMPGEf (float, float);\n+extern int                _COM_CMPEQf (float, float);\n+extern int                _COM_CMPNEf (float, float);\n+#endif\n+\n+extern int                _COM_CMPLTd (double, double);\n+extern int                _COM_CMPGTd (double, double);\n+extern int                _COM_CMPLEd (double, double);\n+extern int                _COM_CMPGEd (double, double);\n+extern int                _COM_CMPEQd (double, double);\n+extern int                _COM_CMPNEd (double, double);\n \n extern long long          _COM_MUL64 (long long, long long);\n extern signed long long   _COM_DIV64s (long long, long long);"}]}