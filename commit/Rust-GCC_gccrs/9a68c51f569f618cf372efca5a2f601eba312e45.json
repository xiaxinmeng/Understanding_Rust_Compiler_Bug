{"sha": "9a68c51f569f618cf372efca5a2f601eba312e45", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWE2OGM1MWY1NjlmNjE4Y2YzNzJlZmNhNWEyZjYwMWViYTMxMmU0NQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-07-14T12:09:17Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-07-14T12:09:17Z"}, "message": "call.c (joust): Don't warn about \"confusing\" conversions to the same type.\n\n\t* call.c (joust): Don't warn about \"confusing\" conversions to the\n\tsame type.\n\t* class.c (push_nested_class): Complain about namespaces.\n\t* decl.c (start_decl): Enter the object's namespace.\n\t(cp_finish_decl): Leave it.\n\t(grokdeclarator): Likewise.\n\t* decl2.c (check_decl_namespace): New function.\n\t(finish_file): Call it.\n\t* parse.y (complex_direct_notype_declarator): Set complexity\n\tof namespace-qualified ids to -1, enter the namespace.\n\t* method.c (build_template_decl_overload): Expect _DECL as first\n\tparameter. Put context temporarily into current_namespace.\n\t* pt.c (check_explicit_specialization): Change caller.\n\t(tsubst): Likewise.\n\t* init.c (build_offset_ref): Call mark_used and\n\tconvert_from_reference for namespace members.\n\nFrom-SVN: r21135", "tree": {"sha": "13711c734408582f70f53cba399aa32d27a0b544", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/13711c734408582f70f53cba399aa32d27a0b544"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9a68c51f569f618cf372efca5a2f601eba312e45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a68c51f569f618cf372efca5a2f601eba312e45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a68c51f569f618cf372efca5a2f601eba312e45", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a68c51f569f618cf372efca5a2f601eba312e45/comments", "author": null, "committer": null, "parents": [{"sha": "b33cfabac1aeab51373ff803976ec5dbdfcf8bdc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b33cfabac1aeab51373ff803976ec5dbdfcf8bdc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b33cfabac1aeab51373ff803976ec5dbdfcf8bdc"}], "stats": {"total": 591, "additions": 337, "deletions": 254}, "files": [{"sha": "5bdc8f4d92fee762062330459c27c5583b3c980e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a68c51f569f618cf372efca5a2f601eba312e45/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a68c51f569f618cf372efca5a2f601eba312e45/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9a68c51f569f618cf372efca5a2f601eba312e45", "patch": "@@ -1,3 +1,27 @@\n+1998-07-14  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* call.c (joust): Don't warn about \"confusing\" conversions to the\n+\tsame type.\n+\n+1998-07-14  Martin von L\ufffdwis  <loewis@informatik.hu-berlin.de>\n+\n+\t* class.c (push_nested_class): Complain about namespaces.\n+\t* decl.c (start_decl): Enter the object's namespace.\n+\t(cp_finish_decl): Leave it.\n+\t(grokdeclarator): Likewise.\n+\t* decl2.c (check_decl_namespace): New function.\n+\t(finish_file): Call it.\n+\t* parse.y (complex_direct_notype_declarator): Set complexity\n+\tof namespace-qualified ids to -1, enter the namespace.\n+\n+\t* method.c (build_template_decl_overload): Expect _DECL as first\n+\tparameter. Put context temporarily into current_namespace.\n+\t* pt.c (check_explicit_specialization): Change caller.\n+\t(tsubst): Likewise.\n+\n+\t* init.c (build_offset_ref): Call mark_used and\n+\tconvert_from_reference for namespace members.\n+\n Mon Jul 13 23:25:28 1998  Martin von Lvwis  <loewis@informatik.hu-berlin.de>\n \n \t* search.c (my_tree_cons): The bitfield is at index 2."}, {"sha": "a6843fa9f8c8913d1e783f3d98bf29dfd7be3799", "filename": "gcc/cp/call.c", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a68c51f569f618cf372efca5a2f601eba312e45/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a68c51f569f618cf372efca5a2f601eba312e45/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=9a68c51f569f618cf372efca5a2f601eba312e45", "patch": "@@ -4314,10 +4314,16 @@ joust (cand1, cand2, warn)\n \t}\n     }\n \n-  /* warn about confusing overload resolution */\n+  /* warn about confusing overload resolution for user-defined conversions,\n+     either between a constructor and a conversion op, or between two\n+     conversion ops.  */\n   if (winner && cand1->second_conv\n-      && (! DECL_CONSTRUCTOR_P (cand1->fn)\n-\t  || ! DECL_CONSTRUCTOR_P (cand2->fn)))\n+      && ((DECL_CONSTRUCTOR_P (cand1->fn)\n+\t   != DECL_CONSTRUCTOR_P (cand2->fn))\n+\t  /* Don't warn if the two conv ops convert to the same type...  */\n+\t  || (! DECL_CONSTRUCTOR_P (cand1->fn)\n+\t      && ! comptypes (TREE_TYPE (cand1->second_conv),\n+\t\t\t      TREE_TYPE (cand2->second_conv), 1))))\n     {\n       int comp = compare_ics (cand1->second_conv, cand2->second_conv);\n       if (comp != winner)"}, {"sha": "cc53671663044e93b67c786e11e4eeb781def06b", "filename": "gcc/cp/class.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a68c51f569f618cf372efca5a2f601eba312e45/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a68c51f569f618cf372efca5a2f601eba312e45/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=9a68c51f569f618cf372efca5a2f601eba312e45", "patch": "@@ -4858,9 +4858,7 @@ push_nested_class (type, modify)\n {\n   tree context;\n \n-  /* FIXME should handle namespaces like classes.  */\n-  if (TREE_CODE (type) == NAMESPACE_DECL)\n-    return;\n+  my_friendly_assert (!type || TREE_CODE (type) != NAMESPACE_DECL, 980711);\n \n   if (type == NULL_TREE || type == error_mark_node || ! IS_AGGR_TYPE (type)\n       || TREE_CODE (type) == TEMPLATE_TYPE_PARM"}, {"sha": "99d8a7fb104cc29cf20e1f0290239676b5fd074f", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a68c51f569f618cf372efca5a2f601eba312e45/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a68c51f569f618cf372efca5a2f601eba312e45/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=9a68c51f569f618cf372efca5a2f601eba312e45", "patch": "@@ -6270,6 +6270,14 @@ start_decl (declarator, declspecs, initialized, attributes, prefix_attributes)\n       ? DECL_CLASS_CONTEXT (decl)\n       : DECL_CONTEXT (decl);\n \n+  if (initialized && context && TREE_CODE (context) == NAMESPACE_DECL\n+      && context != current_namespace && TREE_CODE (decl) == VAR_DECL)\n+    {\n+      /* When parsing the initializer, lookup should use the object's\n+\t namespace. */\n+      push_decl_namespace (context);\n+    }\n+\n   /* We are only interested in class contexts, later. */\n   if (context && TREE_CODE (context) == NAMESPACE_DECL)\n     context = NULL_TREE;\n@@ -6725,6 +6733,16 @@ cp_finish_decl (decl, init, asmspec_tree, need_pop, flags)\n       init = NULL_TREE;\n     }\n \n+  if (TREE_CODE (decl) == VAR_DECL \n+      && DECL_CONTEXT (decl)\n+      && TREE_CODE (DECL_CONTEXT (decl)) == NAMESPACE_DECL\n+      && DECL_CONTEXT (decl) != current_namespace\n+      && init)\n+    {\n+      /* Leave the namespace of the object. */\n+      pop_decl_namespace ();\n+    }\n+\n   /* If the type of the thing we are declaring either has\n      a constructor, or has a virtual function table pointer,\n      AND its initialization was accepted by `start_decl',\n@@ -9524,6 +9542,9 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n \t    if (TREE_COMPLEXITY (declarator) == 0)\n \t      /* This needs to be here, in case we are called\n \t\t multiple times.  */ ;\n+\t    else if (TREE_COMPLEXITY (declarator) == -1)\n+\t      /* Namespace member. */\n+\t      pop_decl_namespace ();\n \t    else if (friendp && (TREE_COMPLEXITY (declarator) < 2))\n \t      /* Don't fall out into global scope. Hides real bug? --eichin */ ;\n \t    else if (! IS_AGGR_TYPE_CODE"}, {"sha": "3a1e8febd6682dc32925ea062eb385b610d3ff69", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a68c51f569f618cf372efca5a2f601eba312e45/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a68c51f569f618cf372efca5a2f601eba312e45/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=9a68c51f569f618cf372efca5a2f601eba312e45", "patch": "@@ -62,6 +62,7 @@ static tree namespace_ancestor PROTO((tree, tree));\n static void add_using_namespace PROTO((tree, tree, int));\n static tree ambiguous_decl PROTO((tree, tree, tree));\n static tree build_anon_union_vars PROTO((tree, tree*, int, int));\n+static void check_decl_namespace PROTO((void));\n \n extern int current_class_depth;\n \n@@ -3125,6 +3126,8 @@ finish_file ()\n   if (! global_bindings_p () || current_class_type)\n     return;\n \n+  check_decl_namespace ();\n+\n   start_time = get_run_time ();\n \n   /* Otherwise, GDB can get confused, because in only knows\n@@ -4116,6 +4119,12 @@ pop_decl_namespace ()\n   decl_namespace_list = TREE_CHAIN (decl_namespace_list);\n }\n \n+static void \n+check_decl_namespace ()\n+{\n+  my_friendly_assert (decl_namespace_list == NULL_TREE, 980711);\n+}\n+\n /* [basic.lookup.koenig] */\n /* A non-zero return value in the functions below indicates an error.\n    All nodes allocated in the procedure are on the scratch obstack. */"}, {"sha": "2f8079971567eeab32c54a00864f275bc7265f50", "filename": "gcc/cp/init.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a68c51f569f618cf372efca5a2f601eba312e45/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a68c51f569f618cf372efca5a2f601eba312e45/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=9a68c51f569f618cf372efca5a2f601eba312e45", "patch": "@@ -1538,7 +1538,11 @@ build_offset_ref (type, name)\n \n   /* Handle namespace names fully here.  */\n   if (TREE_CODE (type) == NAMESPACE_DECL)\n-      return lookup_namespace_name (type, name);\n+    {\n+      t = lookup_namespace_name (type, name);\n+      mark_used (t);\n+      return convert_from_reference (t);\n+    }\n \n   if (type == NULL_TREE || ! is_aggr_type (type, 1))\n     return error_mark_node;"}, {"sha": "a13082bad39b688c7a9ada5ec8186113ff1be2c8", "filename": "gcc/cp/method.c", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a68c51f569f618cf372efca5a2f601eba312e45/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a68c51f569f618cf372efca5a2f601eba312e45/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=9a68c51f569f618cf372efca5a2f601eba312e45", "patch": "@@ -1657,17 +1657,31 @@ build_decl_overload (dname, parms, for_method)\n /* Like build_decl_overload, but for template functions. */\n \n tree\n-build_template_decl_overload (dname, parms, ret_type, tparms, targs,\n+build_template_decl_overload (decl, parms, ret_type, tparms, targs,\n \t\t\t      for_method) \n-     tree dname;\n+     tree decl;\n      tree parms;\n      tree ret_type;\n      tree tparms;\n      tree targs;\n      int for_method;\n {\n-  return build_decl_overload_real (dname, parms, ret_type, tparms, targs,\n-\t\t\t\t   for_method); \n+  tree res, saved_ctx;\n+\n+  /* If the template is in a namespace, we need to put that into the\n+     mangled name. Unfortunately, build_decl_overload_real does not\n+     get the decl to mangle, so it relies on the current\n+     namespace. Therefore, we set that here temporarily. */\n+\n+  my_friendly_assert (TREE_CODE_CLASS (TREE_CODE (decl)) == 'd', 980702);\n+  saved_ctx = current_namespace;\n+  current_namespace = CP_DECL_CONTEXT (decl);  \n+\n+  res = build_decl_overload_real (DECL_NAME (decl), parms, ret_type,\n+\t\t\t\t  tparms, targs, for_method); \n+\n+  current_namespace = saved_ctx;\n+  return res;\n }\n \n "}, {"sha": "5c81b3297d5eba50976f79a26eea0273d72ad1be", "filename": "gcc/cp/parse.c", "status": "modified", "additions": 242, "deletions": 237, "changes": 479, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a68c51f569f618cf372efca5a2f601eba312e45/gcc%2Fcp%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a68c51f569f618cf372efca5a2f601eba312e45/gcc%2Fcp%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.c?ref=9a68c51f569f618cf372efca5a2f601eba312e45", "patch": "@@ -690,32 +690,32 @@ static const short yyrline[] = { 0,\n   2679,  2681,  2685,  2688,  2706,  2716,  2718,  2719,  2723,  2728,\n   2731,  2733,  2735,  2737,  2741,  2747,  2750,  2752,  2754,  2756,\n   2760,  2763,  2766,  2768,  2770,  2772,  2776,  2779,  2782,  2784,\n-  2786,  2788,  2795,  2806,  2810,  2815,  2819,  2824,  2826,  2830,\n-  2833,  2835,  2839,  2841,  2842,  2845,  2847,  2849,  2855,  2870,\n-  2876,  2882,  2896,  2898,  2902,  2916,  2918,  2920,  2924,  2930,\n-  2943,  2945,  2949,  2962,  2968,  2970,  2971,  2972,  2980,  2985,\n-  2994,  2995,  2999,  3002,  3008,  3014,  3017,  3019,  3021,  3023,\n-  3027,  3031,  3035,  3038,  3043,  3046,  3048,  3050,  3052,  3054,\n-  3056,  3058,  3060,  3064,  3068,  3072,  3076,  3077,  3079,  3081,\n-  3083,  3085,  3087,  3089,  3091,  3093,  3101,  3103,  3104,  3105,\n-  3108,  3114,  3116,  3121,  3123,  3126,  3140,  3143,  3146,  3150,\n-  3153,  3160,  3162,  3165,  3167,  3169,  3172,  3175,  3178,  3181,\n-  3183,  3186,  3190,  3192,  3198,  3200,  3201,  3203,  3208,  3210,\n-  3212,  3214,  3216,  3219,  3220,  3222,  3225,  3226,  3229,  3229,\n-  3232,  3232,  3235,  3235,  3237,  3239,  3241,  3243,  3249,  3255,\n-  3258,  3261,  3267,  3269,  3271,  3275,  3277,  3278,  3284,  3288,\n-  3295,  3300,  3308,  3312,  3314,  3317,  3319,  3322,  3326,  3328,\n-  3331,  3333,  3336,  3353,  3359,  3367,  3369,  3371,  3375,  3378,\n-  3379,  3387,  3391,  3395,  3398,  3399,  3405,  3408,  3411,  3413,\n-  3417,  3422,  3425,  3435,  3440,  3441,  3448,  3451,  3454,  3456,\n-  3459,  3461,  3471,  3485,  3489,  3492,  3494,  3498,  3502,  3505,\n-  3508,  3510,  3514,  3516,  3523,  3530,  3533,  3536,  3540,  3544,\n-  3550,  3554,  3559,  3561,  3564,  3569,  3575,  3586,  3589,  3591,\n-  3595,  3600,  3602,  3609,  3612,  3614,  3616,  3622,  3627,  3630,\n-  3632,  3634,  3636,  3638,  3640,  3642,  3644,  3646,  3648,  3650,\n-  3652,  3654,  3656,  3658,  3660,  3662,  3664,  3666,  3668,  3670,\n-  3672,  3674,  3676,  3678,  3680,  3682,  3684,  3686,  3688,  3690,\n-  3692,  3695,  3697\n+  2786,  2788,  2800,  2811,  2815,  2820,  2824,  2829,  2831,  2835,\n+  2838,  2840,  2844,  2846,  2847,  2850,  2852,  2854,  2860,  2875,\n+  2881,  2887,  2901,  2903,  2907,  2921,  2923,  2925,  2929,  2935,\n+  2948,  2950,  2954,  2967,  2973,  2975,  2976,  2977,  2985,  2990,\n+  2999,  3000,  3004,  3007,  3013,  3019,  3022,  3024,  3026,  3028,\n+  3032,  3036,  3040,  3043,  3048,  3051,  3053,  3055,  3057,  3059,\n+  3061,  3063,  3065,  3069,  3073,  3077,  3081,  3082,  3084,  3086,\n+  3088,  3090,  3092,  3094,  3096,  3098,  3106,  3108,  3109,  3110,\n+  3113,  3119,  3121,  3126,  3128,  3131,  3145,  3148,  3151,  3155,\n+  3158,  3165,  3167,  3170,  3172,  3174,  3177,  3180,  3183,  3186,\n+  3188,  3191,  3195,  3197,  3203,  3205,  3206,  3208,  3213,  3215,\n+  3217,  3219,  3221,  3224,  3225,  3227,  3230,  3231,  3234,  3234,\n+  3237,  3237,  3240,  3240,  3242,  3244,  3246,  3248,  3254,  3260,\n+  3263,  3266,  3272,  3274,  3276,  3280,  3282,  3283,  3289,  3293,\n+  3300,  3305,  3313,  3317,  3319,  3322,  3324,  3327,  3331,  3333,\n+  3336,  3338,  3341,  3358,  3364,  3372,  3374,  3376,  3380,  3383,\n+  3384,  3392,  3396,  3400,  3403,  3404,  3410,  3413,  3416,  3418,\n+  3422,  3427,  3430,  3440,  3445,  3446,  3453,  3456,  3459,  3461,\n+  3464,  3466,  3476,  3490,  3494,  3497,  3499,  3503,  3507,  3510,\n+  3513,  3515,  3519,  3521,  3528,  3535,  3538,  3541,  3545,  3549,\n+  3555,  3559,  3564,  3566,  3569,  3574,  3580,  3591,  3594,  3596,\n+  3600,  3605,  3607,  3614,  3617,  3619,  3621,  3627,  3632,  3635,\n+  3637,  3639,  3641,  3643,  3645,  3647,  3649,  3651,  3653,  3655,\n+  3657,  3659,  3661,  3663,  3665,  3667,  3669,  3671,  3673,  3675,\n+  3677,  3679,  3681,  3683,  3685,  3687,  3689,  3691,  3693,  3695,\n+  3697,  3700,  3702\n };\n #endif\n \n@@ -6679,15 +6679,20 @@ case 601:\n     break;}\n case 602:\n #line 2789 \"parse.y\"\n-{ if (OP0 (yyvsp[0].ttype) != current_class_type)\n+{ if (TREE_CODE (OP0 (yyvsp[0].ttype)) == NAMESPACE_DECL)\n+\t\t    {\n+\t\t      push_decl_namespace (OP0 (yyvsp[0].ttype));\n+\t\t      TREE_COMPLEXITY (yyvsp[0].ttype) = -1;\n+\t\t    }\n+\t\t  else if (OP0 (yyvsp[0].ttype) != current_class_type)\n \t\t    {\n \t\t      push_nested_class (OP0 (yyvsp[0].ttype), 3);\n \t\t      TREE_COMPLEXITY (yyvsp[0].ttype) = current_class_depth;\n \t\t    }\n \t\t;\n     break;}\n case 603:\n-#line 2796 \"parse.y\"\n+#line 2801 \"parse.y\"\n { got_scope = NULL_TREE;\n \t\t  yyval.ttype = build_parse_node (SCOPE_REF, yyvsp[-1].ttype, yyvsp[0].ttype);\n \t\t  if (yyvsp[-1].ttype != current_class_type)\n@@ -6698,51 +6703,51 @@ case 603:\n \t\t;\n     break;}\n case 604:\n-#line 2808 \"parse.y\"\n+#line 2813 \"parse.y\"\n { got_scope = NULL_TREE;\n \t\t  yyval.ttype = build_parse_node (SCOPE_REF, yyval.ttype, yyvsp[0].ttype); ;\n     break;}\n case 605:\n-#line 2811 \"parse.y\"\n+#line 2816 \"parse.y\"\n { got_scope = NULL_TREE;\n  \t\t  yyval.ttype = build_parse_node (SCOPE_REF, yyvsp[-1].ttype, yyvsp[0].ttype); ;\n     break;}\n case 606:\n-#line 2817 \"parse.y\"\n+#line 2822 \"parse.y\"\n { got_scope = NULL_TREE;\n \t\t  yyval.ttype = build_parse_node (SCOPE_REF, yyval.ttype, yyvsp[0].ttype); ;\n     break;}\n case 607:\n-#line 2820 \"parse.y\"\n+#line 2825 \"parse.y\"\n { got_scope = NULL_TREE;\n \t\t  yyval.ttype = build_parse_node (SCOPE_REF, yyvsp[-1].ttype, yyvsp[0].ttype); ;\n     break;}\n case 609:\n-#line 2827 \"parse.y\"\n+#line 2832 \"parse.y\"\n { yyval.ttype = yyvsp[0].ttype; ;\n     break;}\n case 610:\n-#line 2832 \"parse.y\"\n+#line 2837 \"parse.y\"\n { yyval.ttype = build_functional_cast (yyvsp[-3].ftype.t, yyvsp[-1].ttype); ;\n     break;}\n case 611:\n-#line 2834 \"parse.y\"\n+#line 2839 \"parse.y\"\n { yyval.ttype = reparse_decl_as_expr (yyvsp[-3].ftype.t, yyvsp[-1].ttype); ;\n     break;}\n case 612:\n-#line 2836 \"parse.y\"\n+#line 2841 \"parse.y\"\n { yyval.ttype = reparse_absdcl_as_expr (yyvsp[-1].ftype.t, yyvsp[0].ttype); ;\n     break;}\n case 617:\n-#line 2848 \"parse.y\"\n+#line 2853 \"parse.y\"\n { yyval.ttype = yyvsp[0].ttype; ;\n     break;}\n case 618:\n-#line 2850 \"parse.y\"\n+#line 2855 \"parse.y\"\n { got_scope = yyval.ttype = make_typename_type (yyvsp[-3].ttype, yyvsp[-1].ttype); ;\n     break;}\n case 619:\n-#line 2857 \"parse.y\"\n+#line 2862 \"parse.y\"\n {\n \t\t  if (TREE_CODE (yyvsp[-1].ttype) == IDENTIFIER_NODE)\n \t\t    {\n@@ -6758,31 +6763,31 @@ case 619:\n \t\t;\n     break;}\n case 620:\n-#line 2871 \"parse.y\"\n+#line 2876 \"parse.y\"\n {\n \t\t  if (TREE_CODE (yyvsp[-1].ttype) == IDENTIFIER_NODE)\n \t\t    yyval.ttype = lastiddecl;\n \t\t  got_scope = yyval.ttype = TREE_TYPE (yyval.ttype);\n \t\t;\n     break;}\n case 621:\n-#line 2877 \"parse.y\"\n+#line 2882 \"parse.y\"\n {\n \t\t  if (TREE_CODE (yyval.ttype) == IDENTIFIER_NODE)\n \t\t    yyval.ttype = lastiddecl;\n \t\t  got_scope = yyval.ttype;\n \t\t;\n     break;}\n case 622:\n-#line 2883 \"parse.y\"\n+#line 2888 \"parse.y\"\n { got_scope = yyval.ttype = complete_type (TREE_TYPE (yyvsp[-1].ttype)); ;\n     break;}\n case 624:\n-#line 2899 \"parse.y\"\n+#line 2904 \"parse.y\"\n { yyval.ttype = yyvsp[0].ttype; ;\n     break;}\n case 625:\n-#line 2904 \"parse.y\"\n+#line 2909 \"parse.y\"\n {\n \t\t  if (TREE_CODE_CLASS (TREE_CODE (yyvsp[-1].ttype)) == 't')\n \t\t    yyval.ttype = make_typename_type (yyvsp[-1].ttype, yyvsp[0].ttype);\n@@ -6797,26 +6802,26 @@ case 625:\n \t\t;\n     break;}\n case 626:\n-#line 2917 \"parse.y\"\n+#line 2922 \"parse.y\"\n { yyval.ttype = TREE_TYPE (yyvsp[0].ttype); ;\n     break;}\n case 627:\n-#line 2919 \"parse.y\"\n+#line 2924 \"parse.y\"\n { yyval.ttype = make_typename_type (yyvsp[-1].ttype, yyvsp[0].ttype); ;\n     break;}\n case 628:\n-#line 2921 \"parse.y\"\n+#line 2926 \"parse.y\"\n { yyval.ttype = make_typename_type (yyvsp[-2].ttype, yyvsp[0].ttype); ;\n     break;}\n case 629:\n-#line 2926 \"parse.y\"\n+#line 2931 \"parse.y\"\n {\n \t\t  if (TREE_CODE (yyvsp[0].ttype) == IDENTIFIER_NODE)\n \t\t    cp_error (\"`%T' is not a class or namespace\", yyvsp[0].ttype);\n \t\t;\n     break;}\n case 630:\n-#line 2931 \"parse.y\"\n+#line 2936 \"parse.y\"\n {\n \t\t  if (TREE_CODE_CLASS (TREE_CODE (yyvsp[-1].ttype)) == 't')\n \t\t    yyval.ttype = make_typename_type (yyvsp[-1].ttype, yyvsp[0].ttype);\n@@ -6831,15 +6836,15 @@ case 630:\n \t\t;\n     break;}\n case 631:\n-#line 2944 \"parse.y\"\n+#line 2949 \"parse.y\"\n { got_scope = yyval.ttype = make_typename_type (yyvsp[-2].ttype, yyvsp[-1].ttype); ;\n     break;}\n case 632:\n-#line 2946 \"parse.y\"\n+#line 2951 \"parse.y\"\n { got_scope = yyval.ttype = make_typename_type (yyvsp[-3].ttype, yyvsp[-1].ttype); ;\n     break;}\n case 633:\n-#line 2951 \"parse.y\"\n+#line 2956 \"parse.y\"\n {\n \t\t  if (TREE_CODE (yyvsp[-1].ttype) != IDENTIFIER_NODE)\n \t\t    yyvsp[-1].ttype = lastiddecl;\n@@ -6853,31 +6858,31 @@ case 633:\n \t\t;\n     break;}\n case 634:\n-#line 2963 \"parse.y\"\n+#line 2968 \"parse.y\"\n {\n \t\t  if (TREE_CODE (yyvsp[-1].ttype) != IDENTIFIER_NODE)\n \t\t    yyval.ttype = lastiddecl;\n \t\t  got_scope = yyval.ttype = complete_type (TREE_TYPE (yyval.ttype));\n \t\t;\n     break;}\n case 635:\n-#line 2969 \"parse.y\"\n+#line 2974 \"parse.y\"\n { got_scope = yyval.ttype = complete_type (TREE_TYPE (yyval.ttype)); ;\n     break;}\n case 638:\n-#line 2973 \"parse.y\"\n+#line 2978 \"parse.y\"\n {\n \t\t  if (TREE_CODE (yyval.ttype) == IDENTIFIER_NODE)\n \t\t    yyval.ttype = lastiddecl;\n \t\t  got_scope = yyval.ttype;\n \t\t;\n     break;}\n case 639:\n-#line 2982 \"parse.y\"\n+#line 2987 \"parse.y\"\n { yyval.ttype = build_min_nt (TEMPLATE_ID_EXPR, yyvsp[-3].ttype, yyvsp[-1].ttype); ;\n     break;}\n case 640:\n-#line 2987 \"parse.y\"\n+#line 2992 \"parse.y\"\n {\n \t\t  if (TREE_CODE (yyvsp[0].ttype) == IDENTIFIER_NODE)\n \t\t    yyval.ttype = IDENTIFIER_GLOBAL_VALUE (yyvsp[0].ttype);\n@@ -6887,148 +6892,148 @@ case 640:\n \t\t;\n     break;}\n case 642:\n-#line 2996 \"parse.y\"\n+#line 3001 \"parse.y\"\n { yyval.ttype = yyvsp[0].ttype; ;\n     break;}\n case 643:\n-#line 3001 \"parse.y\"\n+#line 3006 \"parse.y\"\n { got_scope = NULL_TREE; ;\n     break;}\n case 644:\n-#line 3003 \"parse.y\"\n+#line 3008 \"parse.y\"\n { yyval.ttype = yyvsp[-1].ttype; got_scope = NULL_TREE; ;\n     break;}\n case 645:\n-#line 3010 \"parse.y\"\n+#line 3015 \"parse.y\"\n { got_scope = void_type_node; ;\n     break;}\n case 646:\n-#line 3016 \"parse.y\"\n+#line 3021 \"parse.y\"\n { yyval.ttype = make_pointer_declarator (yyvsp[-1].ttype, yyvsp[0].ttype); ;\n     break;}\n case 647:\n-#line 3018 \"parse.y\"\n+#line 3023 \"parse.y\"\n { yyval.ttype = make_pointer_declarator (yyvsp[0].ttype, NULL_TREE); ;\n     break;}\n case 648:\n-#line 3020 \"parse.y\"\n+#line 3025 \"parse.y\"\n { yyval.ttype = make_reference_declarator (yyvsp[-1].ttype, yyvsp[0].ttype); ;\n     break;}\n case 649:\n-#line 3022 \"parse.y\"\n+#line 3027 \"parse.y\"\n { yyval.ttype = make_reference_declarator (yyvsp[0].ttype, NULL_TREE); ;\n     break;}\n case 650:\n-#line 3024 \"parse.y\"\n+#line 3029 \"parse.y\"\n { tree arg = make_pointer_declarator (yyvsp[0].ttype, NULL_TREE);\n \t\t  yyval.ttype = build_parse_node (SCOPE_REF, yyvsp[-1].ttype, arg);\n \t\t;\n     break;}\n case 651:\n-#line 3028 \"parse.y\"\n+#line 3033 \"parse.y\"\n { tree arg = make_pointer_declarator (yyvsp[-1].ttype, yyvsp[0].ttype);\n \t\t  yyval.ttype = build_parse_node (SCOPE_REF, yyvsp[-2].ttype, arg);\n \t\t;\n     break;}\n case 653:\n-#line 3037 \"parse.y\"\n+#line 3042 \"parse.y\"\n { yyval.ttype = build_parse_node (ARRAY_REF, NULL_TREE, yyvsp[-1].ttype); ;\n     break;}\n case 654:\n-#line 3039 \"parse.y\"\n+#line 3044 \"parse.y\"\n { yyval.ttype = build_parse_node (ARRAY_REF, yyval.ttype, yyvsp[-1].ttype); ;\n     break;}\n case 655:\n-#line 3045 \"parse.y\"\n+#line 3050 \"parse.y\"\n { yyval.ttype = make_pointer_declarator (yyvsp[-1].ftype.t, yyvsp[0].ttype); ;\n     break;}\n case 656:\n-#line 3047 \"parse.y\"\n+#line 3052 \"parse.y\"\n { yyval.ttype = make_pointer_declarator (NULL_TREE, yyvsp[0].ttype); ;\n     break;}\n case 657:\n-#line 3049 \"parse.y\"\n+#line 3054 \"parse.y\"\n { yyval.ttype = make_pointer_declarator (yyvsp[0].ftype.t, NULL_TREE); ;\n     break;}\n case 658:\n-#line 3051 \"parse.y\"\n+#line 3056 \"parse.y\"\n { yyval.ttype = make_pointer_declarator (NULL_TREE, NULL_TREE); ;\n     break;}\n case 659:\n-#line 3053 \"parse.y\"\n+#line 3058 \"parse.y\"\n { yyval.ttype = make_reference_declarator (yyvsp[-1].ftype.t, yyvsp[0].ttype); ;\n     break;}\n case 660:\n-#line 3055 \"parse.y\"\n+#line 3060 \"parse.y\"\n { yyval.ttype = make_reference_declarator (NULL_TREE, yyvsp[0].ttype); ;\n     break;}\n case 661:\n-#line 3057 \"parse.y\"\n+#line 3062 \"parse.y\"\n { yyval.ttype = make_reference_declarator (yyvsp[0].ftype.t, NULL_TREE); ;\n     break;}\n case 662:\n-#line 3059 \"parse.y\"\n+#line 3064 \"parse.y\"\n { yyval.ttype = make_reference_declarator (NULL_TREE, NULL_TREE); ;\n     break;}\n case 663:\n-#line 3061 \"parse.y\"\n+#line 3066 \"parse.y\"\n { tree arg = make_pointer_declarator (yyvsp[0].ttype, NULL_TREE);\n \t\t  yyval.ttype = build_parse_node (SCOPE_REF, yyvsp[-1].ttype, arg);\n \t\t;\n     break;}\n case 664:\n-#line 3065 \"parse.y\"\n+#line 3070 \"parse.y\"\n { tree arg = make_pointer_declarator (yyvsp[-1].ttype, yyvsp[0].ttype);\n \t\t  yyval.ttype = build_parse_node (SCOPE_REF, yyvsp[-2].ttype, arg);\n \t\t;\n     break;}\n case 666:\n-#line 3074 \"parse.y\"\n+#line 3079 \"parse.y\"\n { yyval.ttype = yyvsp[-1].ttype; ;\n     break;}\n case 668:\n-#line 3078 \"parse.y\"\n+#line 3083 \"parse.y\"\n { yyval.ttype = make_call_declarator (yyval.ttype, yyvsp[-3].ttype, yyvsp[-1].ttype, yyvsp[0].ttype); ;\n     break;}\n case 669:\n-#line 3080 \"parse.y\"\n+#line 3085 \"parse.y\"\n { yyval.ttype = make_call_declarator (yyval.ttype, empty_parms (), yyvsp[-1].ttype, yyvsp[0].ttype); ;\n     break;}\n case 670:\n-#line 3082 \"parse.y\"\n+#line 3087 \"parse.y\"\n { yyval.ttype = build_parse_node (ARRAY_REF, yyval.ttype, yyvsp[-1].ttype); ;\n     break;}\n case 671:\n-#line 3084 \"parse.y\"\n+#line 3089 \"parse.y\"\n { yyval.ttype = build_parse_node (ARRAY_REF, yyval.ttype, NULL_TREE); ;\n     break;}\n case 672:\n-#line 3086 \"parse.y\"\n+#line 3091 \"parse.y\"\n { yyval.ttype = make_call_declarator (NULL_TREE, yyvsp[-3].ttype, yyvsp[-1].ttype, yyvsp[0].ttype); ;\n     break;}\n case 673:\n-#line 3088 \"parse.y\"\n+#line 3093 \"parse.y\"\n { set_quals_and_spec (yyval.ttype, yyvsp[-1].ttype, yyvsp[0].ttype); ;\n     break;}\n case 674:\n-#line 3090 \"parse.y\"\n+#line 3095 \"parse.y\"\n { set_quals_and_spec (yyval.ttype, yyvsp[-1].ttype, yyvsp[0].ttype); ;\n     break;}\n case 675:\n-#line 3092 \"parse.y\"\n+#line 3097 \"parse.y\"\n { yyval.ttype = build_parse_node (ARRAY_REF, NULL_TREE, yyvsp[-1].ttype); ;\n     break;}\n case 676:\n-#line 3094 \"parse.y\"\n+#line 3099 \"parse.y\"\n { yyval.ttype = build_parse_node (ARRAY_REF, NULL_TREE, NULL_TREE); ;\n     break;}\n case 683:\n-#line 3117 \"parse.y\"\n+#line 3122 \"parse.y\"\n { if (pedantic)\n \t\t    pedwarn (\"ANSI C++ forbids label declarations\"); ;\n     break;}\n case 686:\n-#line 3128 \"parse.y\"\n+#line 3133 \"parse.y\"\n { tree link;\n \t\t  for (link = yyvsp[-1].ttype; link; link = TREE_CHAIN (link))\n \t\t    {\n@@ -7039,233 +7044,233 @@ case 686:\n \t\t;\n     break;}\n case 687:\n-#line 3142 \"parse.y\"\n+#line 3147 \"parse.y\"\n {;\n     break;}\n case 689:\n-#line 3148 \"parse.y\"\n+#line 3153 \"parse.y\"\n { yyval.ttype = begin_compound_stmt (0); ;\n     break;}\n case 690:\n-#line 3150 \"parse.y\"\n+#line 3155 \"parse.y\"\n { yyval.ttype = finish_compound_stmt (0, yyvsp[-1].ttype); ;\n     break;}\n case 691:\n-#line 3155 \"parse.y\"\n+#line 3160 \"parse.y\"\n {\n \t\t  yyval.ttype = begin_if_stmt ();\n \t\t  cond_stmt_keyword = \"if\";\n \t\t;\n     break;}\n case 692:\n-#line 3160 \"parse.y\"\n+#line 3165 \"parse.y\"\n { finish_if_stmt_cond (yyvsp[0].ttype, yyvsp[-1].ttype); ;\n     break;}\n case 693:\n-#line 3162 \"parse.y\"\n+#line 3167 \"parse.y\"\n { yyval.ttype = finish_then_clause (yyvsp[-3].ttype); ;\n     break;}\n case 695:\n-#line 3167 \"parse.y\"\n+#line 3172 \"parse.y\"\n { yyval.ttype = begin_compound_stmt (0); ;\n     break;}\n case 696:\n-#line 3169 \"parse.y\"\n+#line 3174 \"parse.y\"\n { yyval.ttype = finish_compound_stmt (0, yyvsp[-1].ttype); ;\n     break;}\n case 697:\n-#line 3174 \"parse.y\"\n+#line 3179 \"parse.y\"\n {;\n     break;}\n case 699:\n-#line 3180 \"parse.y\"\n+#line 3185 \"parse.y\"\n { finish_stmt (); ;\n     break;}\n case 700:\n-#line 3182 \"parse.y\"\n+#line 3187 \"parse.y\"\n { finish_expr_stmt (yyvsp[-1].ttype); ;\n     break;}\n case 701:\n-#line 3184 \"parse.y\"\n+#line 3189 \"parse.y\"\n { begin_else_clause (); ;\n     break;}\n case 702:\n-#line 3186 \"parse.y\"\n+#line 3191 \"parse.y\"\n { \n \t\t  finish_else_clause (yyvsp[-3].ttype); \n \t\t  finish_if_stmt ();\n \t\t;\n     break;}\n case 703:\n-#line 3191 \"parse.y\"\n+#line 3196 \"parse.y\"\n { finish_if_stmt (); ;\n     break;}\n case 704:\n-#line 3193 \"parse.y\"\n+#line 3198 \"parse.y\"\n {\n \t\t  yyval.ttype = begin_while_stmt ();\n \t\t  cond_stmt_keyword = \"while\";\n \t\t;\n     break;}\n case 705:\n-#line 3198 \"parse.y\"\n+#line 3203 \"parse.y\"\n { finish_while_stmt_cond (yyvsp[0].ttype, yyvsp[-1].ttype); ;\n     break;}\n case 706:\n-#line 3200 \"parse.y\"\n+#line 3205 \"parse.y\"\n { finish_while_stmt (yyvsp[-3].ttype); ;\n     break;}\n case 707:\n-#line 3202 \"parse.y\"\n+#line 3207 \"parse.y\"\n { yyval.ttype = begin_do_stmt (); ;\n     break;}\n case 708:\n-#line 3204 \"parse.y\"\n+#line 3209 \"parse.y\"\n {\n \t\t  finish_do_body (yyvsp[-2].ttype);\n \t\t  cond_stmt_keyword = \"do\";\n \t\t;\n     break;}\n case 709:\n-#line 3209 \"parse.y\"\n+#line 3214 \"parse.y\"\n { finish_do_stmt (yyvsp[-1].ttype, yyvsp[-5].ttype); ;\n     break;}\n case 710:\n-#line 3211 \"parse.y\"\n+#line 3216 \"parse.y\"\n { yyval.ttype = begin_for_stmt (); ;\n     break;}\n case 711:\n-#line 3213 \"parse.y\"\n+#line 3218 \"parse.y\"\n { finish_for_init_stmt (yyvsp[-2].ttype); ;\n     break;}\n case 712:\n-#line 3215 \"parse.y\"\n+#line 3220 \"parse.y\"\n { finish_for_cond (yyvsp[-1].ttype, yyvsp[-5].ttype); ;\n     break;}\n case 713:\n-#line 3217 \"parse.y\"\n+#line 3222 \"parse.y\"\n { finish_for_expr (yyvsp[-1].ttype, yyvsp[-8].ttype); ;\n     break;}\n case 714:\n-#line 3219 \"parse.y\"\n+#line 3224 \"parse.y\"\n { finish_for_stmt (yyvsp[-3].ttype, yyvsp[-10].ttype); ;\n     break;}\n case 715:\n-#line 3221 \"parse.y\"\n+#line 3226 \"parse.y\"\n { begin_switch_stmt (); ;\n     break;}\n case 716:\n-#line 3223 \"parse.y\"\n+#line 3228 \"parse.y\"\n { yyval.ttype = finish_switch_cond (yyvsp[-1].ttype); ;\n     break;}\n case 717:\n-#line 3225 \"parse.y\"\n+#line 3230 \"parse.y\"\n { finish_switch_stmt (yyvsp[-3].ttype, yyvsp[-1].ttype); ;\n     break;}\n case 718:\n-#line 3227 \"parse.y\"\n+#line 3232 \"parse.y\"\n { finish_case_label (yyvsp[-1].ttype, NULL_TREE); ;\n     break;}\n case 720:\n-#line 3230 \"parse.y\"\n+#line 3235 \"parse.y\"\n { finish_case_label (yyvsp[-3].ttype, yyvsp[-1].ttype); ;\n     break;}\n case 722:\n-#line 3233 \"parse.y\"\n+#line 3238 \"parse.y\"\n { finish_case_label (NULL_TREE, NULL_TREE); ;\n     break;}\n case 724:\n-#line 3236 \"parse.y\"\n+#line 3241 \"parse.y\"\n { finish_break_stmt (); ;\n     break;}\n case 725:\n-#line 3238 \"parse.y\"\n+#line 3243 \"parse.y\"\n { finish_continue_stmt (); ;\n     break;}\n case 726:\n-#line 3240 \"parse.y\"\n+#line 3245 \"parse.y\"\n { finish_return_stmt (NULL_TREE); ;\n     break;}\n case 727:\n-#line 3242 \"parse.y\"\n+#line 3247 \"parse.y\"\n { finish_return_stmt (yyvsp[-1].ttype); ;\n     break;}\n case 728:\n-#line 3244 \"parse.y\"\n+#line 3249 \"parse.y\"\n { \n \t\t  finish_asm_stmt (yyvsp[-4].ttype, yyvsp[-2].ttype, NULL_TREE, NULL_TREE,\n \t\t\t\t   NULL_TREE); \n \t\t;\n     break;}\n case 729:\n-#line 3250 \"parse.y\"\n+#line 3255 \"parse.y\"\n { \n \t\t  finish_asm_stmt (yyvsp[-6].ttype, yyvsp[-4].ttype, yyvsp[-2].ttype, NULL_TREE,\n \t\t\t\t   NULL_TREE); \n \t\t;\n     break;}\n case 730:\n-#line 3256 \"parse.y\"\n+#line 3261 \"parse.y\"\n { finish_asm_stmt (yyvsp[-8].ttype, yyvsp[-6].ttype, yyvsp[-4].ttype, yyvsp[-2].ttype, NULL_TREE); ;\n     break;}\n case 731:\n-#line 3260 \"parse.y\"\n+#line 3265 \"parse.y\"\n { finish_asm_stmt (yyvsp[-10].ttype, yyvsp[-8].ttype, yyvsp[-6].ttype, yyvsp[-4].ttype, yyvsp[-2].ttype); ;\n     break;}\n case 732:\n-#line 3262 \"parse.y\"\n+#line 3267 \"parse.y\"\n { \n \t\t  if (pedantic)\n \t\t    pedwarn (\"ANSI C++ forbids computed gotos\");\n \t\t  finish_goto_stmt (yyvsp[-1].ttype);\n \t\t;\n     break;}\n case 733:\n-#line 3268 \"parse.y\"\n+#line 3273 \"parse.y\"\n { finish_goto_stmt (yyvsp[-1].ttype); ;\n     break;}\n case 734:\n-#line 3270 \"parse.y\"\n+#line 3275 \"parse.y\"\n { finish_stmt (); ;\n     break;}\n case 735:\n-#line 3272 \"parse.y\"\n+#line 3277 \"parse.y\"\n { error (\"label must be followed by statement\");\n \t\t  yyungetc ('}', 0);\n \t\t  finish_stmt (); ;\n     break;}\n case 736:\n-#line 3276 \"parse.y\"\n+#line 3281 \"parse.y\"\n { finish_stmt (); ;\n     break;}\n case 738:\n-#line 3279 \"parse.y\"\n+#line 3284 \"parse.y\"\n { \n \t\t  if (TREE_CODE (yyvsp[-1].ttype) == IDENTIFIER_NODE && lastiddecl)\n \t\t    yyvsp[-1].ttype = lastiddecl;\n \t\t  do_using_directive (yyvsp[-1].ttype); \n \t\t;\n     break;}\n case 739:\n-#line 3285 \"parse.y\"\n+#line 3290 \"parse.y\"\n { do_local_using_decl (yyvsp[0].ttype); ;\n     break;}\n case 740:\n-#line 3290 \"parse.y\"\n+#line 3295 \"parse.y\"\n {\n \t\t  if (! current_function_parms_stored)\n \t\t    store_parm_decls ();\n \t\t  expand_start_early_try_stmts ();\n \t\t;\n     break;}\n case 741:\n-#line 3296 \"parse.y\"\n+#line 3301 \"parse.y\"\n { \n                   expand_start_all_catch (); \n                 ;\n     break;}\n case 742:\n-#line 3300 \"parse.y\"\n+#line 3305 \"parse.y\"\n {\n \t\t  int nested = (hack_decl_function_context\n \t\t\t\t(current_function_decl) != NULL_TREE);\n@@ -7274,41 +7279,41 @@ case 742:\n \t\t;\n     break;}\n case 743:\n-#line 3310 \"parse.y\"\n+#line 3315 \"parse.y\"\n { yyval.ttype = begin_try_block (); ;\n     break;}\n case 744:\n-#line 3312 \"parse.y\"\n+#line 3317 \"parse.y\"\n { finish_try_block (yyvsp[-1].ttype); ;\n     break;}\n case 745:\n-#line 3314 \"parse.y\"\n+#line 3319 \"parse.y\"\n { finish_handler_sequence (yyvsp[-3].ttype); ;\n     break;}\n case 748:\n-#line 3324 \"parse.y\"\n+#line 3329 \"parse.y\"\n { yyval.ttype = begin_handler(); ;\n     break;}\n case 749:\n-#line 3326 \"parse.y\"\n+#line 3331 \"parse.y\"\n { finish_handler_parms (yyvsp[-1].ttype); ;\n     break;}\n case 750:\n-#line 3328 \"parse.y\"\n+#line 3333 \"parse.y\"\n { finish_handler (yyvsp[-3].ttype); ;\n     break;}\n case 753:\n-#line 3338 \"parse.y\"\n+#line 3343 \"parse.y\"\n { expand_start_catch_block (NULL_TREE, NULL_TREE); ;\n     break;}\n case 754:\n-#line 3354 \"parse.y\"\n+#line 3359 \"parse.y\"\n { check_for_new_type (\"inside exception declarations\", yyvsp[-1].ftype);\n \t\t  expand_start_catch_block (TREE_PURPOSE (yyvsp[-1].ftype.t),\n \t\t\t\t\t    TREE_VALUE (yyvsp[-1].ftype.t)); ;\n     break;}\n case 755:\n-#line 3361 \"parse.y\"\n+#line 3366 \"parse.y\"\n { tree label;\n \t\tdo_label:\n \t\t  label = define_label (input_filename, lineno, yyvsp[-1].ttype);\n@@ -7317,98 +7322,98 @@ case 755:\n \t\t;\n     break;}\n case 756:\n-#line 3368 \"parse.y\"\n+#line 3373 \"parse.y\"\n { goto do_label; ;\n     break;}\n case 757:\n-#line 3370 \"parse.y\"\n+#line 3375 \"parse.y\"\n { goto do_label; ;\n     break;}\n case 758:\n-#line 3372 \"parse.y\"\n+#line 3377 \"parse.y\"\n { goto do_label; ;\n     break;}\n case 759:\n-#line 3377 \"parse.y\"\n+#line 3382 \"parse.y\"\n { if (yyvsp[-1].ttype) cplus_expand_expr_stmt (yyvsp[-1].ttype); ;\n     break;}\n case 761:\n-#line 3380 \"parse.y\"\n+#line 3385 \"parse.y\"\n { if (pedantic)\n \t\t    pedwarn (\"ANSI C++ forbids compound statements inside for initializations\");\n \t\t;\n     break;}\n case 762:\n-#line 3389 \"parse.y\"\n+#line 3394 \"parse.y\"\n { emit_line_note (input_filename, lineno);\n \t\t  yyval.ttype = NULL_TREE; ;\n     break;}\n case 763:\n-#line 3392 \"parse.y\"\n+#line 3397 \"parse.y\"\n { emit_line_note (input_filename, lineno); ;\n     break;}\n case 764:\n-#line 3397 \"parse.y\"\n+#line 3402 \"parse.y\"\n { yyval.ttype = NULL_TREE; ;\n     break;}\n case 766:\n-#line 3400 \"parse.y\"\n+#line 3405 \"parse.y\"\n { yyval.ttype = NULL_TREE; ;\n     break;}\n case 767:\n-#line 3407 \"parse.y\"\n+#line 3412 \"parse.y\"\n { yyval.ttype = NULL_TREE; ;\n     break;}\n case 770:\n-#line 3414 \"parse.y\"\n+#line 3419 \"parse.y\"\n { yyval.ttype = chainon (yyval.ttype, yyvsp[0].ttype); ;\n     break;}\n case 771:\n-#line 3419 \"parse.y\"\n+#line 3424 \"parse.y\"\n { yyval.ttype = build_tree_list (yyval.ttype, yyvsp[-1].ttype); ;\n     break;}\n case 772:\n-#line 3424 \"parse.y\"\n+#line 3429 \"parse.y\"\n { yyval.ttype = tree_cons (NULL_TREE, yyval.ttype, NULL_TREE); ;\n     break;}\n case 773:\n-#line 3426 \"parse.y\"\n+#line 3431 \"parse.y\"\n { yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyval.ttype); ;\n     break;}\n case 774:\n-#line 3437 \"parse.y\"\n+#line 3442 \"parse.y\"\n {\n \t\t  yyval.ttype = empty_parms();\n \t\t;\n     break;}\n case 776:\n-#line 3442 \"parse.y\"\n+#line 3447 \"parse.y\"\n { yyval.ttype = finish_parmlist (build_tree_list (NULL_TREE, yyvsp[0].ftype.t), 0);\n \t\t  check_for_new_type (\"inside parameter list\", yyvsp[0].ftype); ;\n     break;}\n case 777:\n-#line 3450 \"parse.y\"\n+#line 3455 \"parse.y\"\n { yyval.ttype = finish_parmlist (yyval.ttype, 0); ;\n     break;}\n case 778:\n-#line 3452 \"parse.y\"\n+#line 3457 \"parse.y\"\n { yyval.ttype = finish_parmlist (yyvsp[-1].ttype, 1); ;\n     break;}\n case 779:\n-#line 3455 \"parse.y\"\n+#line 3460 \"parse.y\"\n { yyval.ttype = finish_parmlist (yyvsp[-1].ttype, 1); ;\n     break;}\n case 780:\n-#line 3457 \"parse.y\"\n+#line 3462 \"parse.y\"\n { yyval.ttype = finish_parmlist (build_tree_list (NULL_TREE,\n \t\t\t\t\t\t\t yyvsp[-1].ftype.t), 1); ;\n     break;}\n case 781:\n-#line 3460 \"parse.y\"\n+#line 3465 \"parse.y\"\n { yyval.ttype = finish_parmlist (NULL_TREE, 1); ;\n     break;}\n case 782:\n-#line 3462 \"parse.y\"\n+#line 3467 \"parse.y\"\n {\n \t\t  /* This helps us recover from really nasty\n \t\t     parse errors, for example, a missing right\n@@ -7420,7 +7425,7 @@ case 782:\n \t\t;\n     break;}\n case 783:\n-#line 3472 \"parse.y\"\n+#line 3477 \"parse.y\"\n {\n \t\t  /* This helps us recover from really nasty\n \t\t     parse errors, for example, a missing right\n@@ -7433,98 +7438,98 @@ case 783:\n \t\t;\n     break;}\n case 784:\n-#line 3487 \"parse.y\"\n+#line 3492 \"parse.y\"\n { maybe_snarf_defarg (); ;\n     break;}\n case 785:\n-#line 3489 \"parse.y\"\n+#line 3494 \"parse.y\"\n { yyval.ttype = yyvsp[0].ttype; ;\n     break;}\n case 788:\n-#line 3500 \"parse.y\"\n+#line 3505 \"parse.y\"\n { check_for_new_type (\"in a parameter list\", yyvsp[0].ftype);\n \t\t  yyval.ttype = build_tree_list (NULL_TREE, yyvsp[0].ftype.t); ;\n     break;}\n case 789:\n-#line 3503 \"parse.y\"\n+#line 3508 \"parse.y\"\n { check_for_new_type (\"in a parameter list\", yyvsp[-1].ftype);\n \t\t  yyval.ttype = build_tree_list (yyvsp[0].ttype, yyvsp[-1].ftype.t); ;\n     break;}\n case 790:\n-#line 3506 \"parse.y\"\n+#line 3511 \"parse.y\"\n { check_for_new_type (\"in a parameter list\", yyvsp[0].ftype);\n \t\t  yyval.ttype = chainon (yyval.ttype, yyvsp[0].ftype.t); ;\n     break;}\n case 791:\n-#line 3509 \"parse.y\"\n+#line 3514 \"parse.y\"\n { yyval.ttype = chainon (yyval.ttype, build_tree_list (NULL_TREE, yyvsp[0].ttype)); ;\n     break;}\n case 792:\n-#line 3511 \"parse.y\"\n+#line 3516 \"parse.y\"\n { yyval.ttype = chainon (yyval.ttype, build_tree_list (yyvsp[0].ttype, yyvsp[-2].ttype)); ;\n     break;}\n case 794:\n-#line 3517 \"parse.y\"\n+#line 3522 \"parse.y\"\n { check_for_new_type (\"in a parameter list\", yyvsp[-1].ftype);\n \t\t  yyval.ttype = build_tree_list (NULL_TREE, yyvsp[-1].ftype.t); ;\n     break;}\n case 795:\n-#line 3527 \"parse.y\"\n+#line 3532 \"parse.y\"\n { tree specs = strip_attrs (yyvsp[-1].ftype.t);\n \t\t  yyval.ftype.new_type_flag = yyvsp[-1].ftype.new_type_flag;\n \t\t  yyval.ftype.t = build_tree_list (specs, yyvsp[0].ttype); ;\n     break;}\n case 796:\n-#line 3531 \"parse.y\"\n+#line 3536 \"parse.y\"\n { yyval.ftype.t = build_tree_list (yyvsp[-1].ftype.t, yyvsp[0].ttype); \n \t\t  yyval.ftype.new_type_flag = yyvsp[-1].ftype.new_type_flag; ;\n     break;}\n case 797:\n-#line 3534 \"parse.y\"\n+#line 3539 \"parse.y\"\n { yyval.ftype.t = build_tree_list (get_decl_list (yyvsp[-1].ftype.t), yyvsp[0].ttype); \n \t\t  yyval.ftype.new_type_flag = yyvsp[-1].ftype.new_type_flag; ;\n     break;}\n case 798:\n-#line 3537 \"parse.y\"\n+#line 3542 \"parse.y\"\n { tree specs = strip_attrs (yyvsp[-1].ftype.t);\n \t\t  yyval.ftype.t = build_tree_list (specs, yyvsp[0].ttype);\n \t\t  yyval.ftype.new_type_flag = yyvsp[-1].ftype.new_type_flag; ;\n     break;}\n case 799:\n-#line 3541 \"parse.y\"\n+#line 3546 \"parse.y\"\n { tree specs = strip_attrs (yyvsp[0].ftype.t);\n \t\t  yyval.ftype.t = build_tree_list (specs, NULL_TREE); \n \t\t  yyval.ftype.new_type_flag = yyvsp[0].ftype.new_type_flag; ;\n     break;}\n case 800:\n-#line 3545 \"parse.y\"\n+#line 3550 \"parse.y\"\n { tree specs = strip_attrs (yyvsp[-1].ttype);\n \t\t  yyval.ftype.t = build_tree_list (specs, yyvsp[0].ttype); \n \t\t  yyval.ftype.new_type_flag = 0; ;\n     break;}\n case 801:\n-#line 3552 \"parse.y\"\n+#line 3557 \"parse.y\"\n { yyval.ftype.t = build_tree_list (NULL_TREE, yyvsp[0].ftype.t);\n \t\t  yyval.ftype.new_type_flag = yyvsp[0].ftype.new_type_flag;  ;\n     break;}\n case 802:\n-#line 3555 \"parse.y\"\n+#line 3560 \"parse.y\"\n { yyval.ftype.t = build_tree_list (yyvsp[0].ttype, yyvsp[-1].ftype.t);\n \t\t  yyval.ftype.new_type_flag = yyvsp[-1].ftype.new_type_flag;  ;\n     break;}\n case 805:\n-#line 3566 \"parse.y\"\n+#line 3571 \"parse.y\"\n { see_typename (); ;\n     break;}\n case 806:\n-#line 3571 \"parse.y\"\n+#line 3576 \"parse.y\"\n {\n \t\t  error (\"type specifier omitted for parameter\");\n \t\t  yyval.ttype = build_tree_list (integer_type_node, NULL_TREE);\n \t\t;\n     break;}\n case 807:\n-#line 3576 \"parse.y\"\n+#line 3581 \"parse.y\"\n {\n \t\t  error (\"type specifier omitted for parameter\");\n \t\t  if (TREE_CODE (yyval.ttype) == SCOPE_REF\n@@ -7535,188 +7540,188 @@ case 807:\n \t\t;\n     break;}\n case 808:\n-#line 3588 \"parse.y\"\n+#line 3593 \"parse.y\"\n { yyval.ttype = NULL_TREE; ;\n     break;}\n case 809:\n-#line 3590 \"parse.y\"\n+#line 3595 \"parse.y\"\n { yyval.ttype = yyvsp[-1].ttype; ;\n     break;}\n case 810:\n-#line 3592 \"parse.y\"\n+#line 3597 \"parse.y\"\n { yyval.ttype = build_decl_list (NULL_TREE, NULL_TREE); ;\n     break;}\n case 811:\n-#line 3597 \"parse.y\"\n+#line 3602 \"parse.y\"\n { yyval.ttype = build_decl_list (NULL_TREE, groktypename(yyvsp[0].ftype.t)); ;\n     break;}\n case 813:\n-#line 3603 \"parse.y\"\n+#line 3608 \"parse.y\"\n {\n \t\t  TREE_CHAIN (yyvsp[0].ttype) = yyval.ttype;\n \t\t  yyval.ttype = yyvsp[0].ttype;\n \t\t;\n     break;}\n case 814:\n-#line 3611 \"parse.y\"\n+#line 3616 \"parse.y\"\n { yyval.ttype = NULL_TREE; ;\n     break;}\n case 815:\n-#line 3613 \"parse.y\"\n+#line 3618 \"parse.y\"\n { yyval.ttype = make_pointer_declarator (yyvsp[-1].ttype, yyvsp[0].ttype); ;\n     break;}\n case 816:\n-#line 3615 \"parse.y\"\n+#line 3620 \"parse.y\"\n { yyval.ttype = make_reference_declarator (yyvsp[-1].ttype, yyvsp[0].ttype); ;\n     break;}\n case 817:\n-#line 3617 \"parse.y\"\n+#line 3622 \"parse.y\"\n { tree arg = make_pointer_declarator (yyvsp[-1].ttype, yyvsp[0].ttype);\n \t\t  yyval.ttype = build_parse_node (SCOPE_REF, yyvsp[-2].ttype, arg);\n \t\t;\n     break;}\n case 818:\n-#line 3624 \"parse.y\"\n+#line 3629 \"parse.y\"\n { got_scope = NULL_TREE; ;\n     break;}\n case 819:\n-#line 3629 \"parse.y\"\n+#line 3634 \"parse.y\"\n { yyval.ttype = ansi_opname[MULT_EXPR]; ;\n     break;}\n case 820:\n-#line 3631 \"parse.y\"\n+#line 3636 \"parse.y\"\n { yyval.ttype = ansi_opname[TRUNC_DIV_EXPR]; ;\n     break;}\n case 821:\n-#line 3633 \"parse.y\"\n+#line 3638 \"parse.y\"\n { yyval.ttype = ansi_opname[TRUNC_MOD_EXPR]; ;\n     break;}\n case 822:\n-#line 3635 \"parse.y\"\n+#line 3640 \"parse.y\"\n { yyval.ttype = ansi_opname[PLUS_EXPR]; ;\n     break;}\n case 823:\n-#line 3637 \"parse.y\"\n+#line 3642 \"parse.y\"\n { yyval.ttype = ansi_opname[MINUS_EXPR]; ;\n     break;}\n case 824:\n-#line 3639 \"parse.y\"\n+#line 3644 \"parse.y\"\n { yyval.ttype = ansi_opname[BIT_AND_EXPR]; ;\n     break;}\n case 825:\n-#line 3641 \"parse.y\"\n+#line 3646 \"parse.y\"\n { yyval.ttype = ansi_opname[BIT_IOR_EXPR]; ;\n     break;}\n case 826:\n-#line 3643 \"parse.y\"\n+#line 3648 \"parse.y\"\n { yyval.ttype = ansi_opname[BIT_XOR_EXPR]; ;\n     break;}\n case 827:\n-#line 3645 \"parse.y\"\n+#line 3650 \"parse.y\"\n { yyval.ttype = ansi_opname[BIT_NOT_EXPR]; ;\n     break;}\n case 828:\n-#line 3647 \"parse.y\"\n+#line 3652 \"parse.y\"\n { yyval.ttype = ansi_opname[COMPOUND_EXPR]; ;\n     break;}\n case 829:\n-#line 3649 \"parse.y\"\n+#line 3654 \"parse.y\"\n { yyval.ttype = ansi_opname[yyvsp[0].code]; ;\n     break;}\n case 830:\n-#line 3651 \"parse.y\"\n+#line 3656 \"parse.y\"\n { yyval.ttype = ansi_opname[LT_EXPR]; ;\n     break;}\n case 831:\n-#line 3653 \"parse.y\"\n+#line 3658 \"parse.y\"\n { yyval.ttype = ansi_opname[GT_EXPR]; ;\n     break;}\n case 832:\n-#line 3655 \"parse.y\"\n+#line 3660 \"parse.y\"\n { yyval.ttype = ansi_opname[yyvsp[0].code]; ;\n     break;}\n case 833:\n-#line 3657 \"parse.y\"\n+#line 3662 \"parse.y\"\n { yyval.ttype = ansi_assopname[yyvsp[0].code]; ;\n     break;}\n case 834:\n-#line 3659 \"parse.y\"\n+#line 3664 \"parse.y\"\n { yyval.ttype = ansi_opname [MODIFY_EXPR]; ;\n     break;}\n case 835:\n-#line 3661 \"parse.y\"\n+#line 3666 \"parse.y\"\n { yyval.ttype = ansi_opname[yyvsp[0].code]; ;\n     break;}\n case 836:\n-#line 3663 \"parse.y\"\n+#line 3668 \"parse.y\"\n { yyval.ttype = ansi_opname[yyvsp[0].code]; ;\n     break;}\n case 837:\n-#line 3665 \"parse.y\"\n+#line 3670 \"parse.y\"\n { yyval.ttype = ansi_opname[POSTINCREMENT_EXPR]; ;\n     break;}\n case 838:\n-#line 3667 \"parse.y\"\n+#line 3672 \"parse.y\"\n { yyval.ttype = ansi_opname[PREDECREMENT_EXPR]; ;\n     break;}\n case 839:\n-#line 3669 \"parse.y\"\n+#line 3674 \"parse.y\"\n { yyval.ttype = ansi_opname[TRUTH_ANDIF_EXPR]; ;\n     break;}\n case 840:\n-#line 3671 \"parse.y\"\n+#line 3676 \"parse.y\"\n { yyval.ttype = ansi_opname[TRUTH_ORIF_EXPR]; ;\n     break;}\n case 841:\n-#line 3673 \"parse.y\"\n+#line 3678 \"parse.y\"\n { yyval.ttype = ansi_opname[TRUTH_NOT_EXPR]; ;\n     break;}\n case 842:\n-#line 3675 \"parse.y\"\n+#line 3680 \"parse.y\"\n { yyval.ttype = ansi_opname[COND_EXPR]; ;\n     break;}\n case 843:\n-#line 3677 \"parse.y\"\n+#line 3682 \"parse.y\"\n { yyval.ttype = ansi_opname[yyvsp[0].code]; ;\n     break;}\n case 844:\n-#line 3679 \"parse.y\"\n+#line 3684 \"parse.y\"\n { yyval.ttype = ansi_opname[COMPONENT_REF]; ;\n     break;}\n case 845:\n-#line 3681 \"parse.y\"\n+#line 3686 \"parse.y\"\n { yyval.ttype = ansi_opname[MEMBER_REF]; ;\n     break;}\n case 846:\n-#line 3683 \"parse.y\"\n+#line 3688 \"parse.y\"\n { yyval.ttype = ansi_opname[CALL_EXPR]; ;\n     break;}\n case 847:\n-#line 3685 \"parse.y\"\n+#line 3690 \"parse.y\"\n { yyval.ttype = ansi_opname[ARRAY_REF]; ;\n     break;}\n case 848:\n-#line 3687 \"parse.y\"\n+#line 3692 \"parse.y\"\n { yyval.ttype = ansi_opname[NEW_EXPR]; ;\n     break;}\n case 849:\n-#line 3689 \"parse.y\"\n+#line 3694 \"parse.y\"\n { yyval.ttype = ansi_opname[DELETE_EXPR]; ;\n     break;}\n case 850:\n-#line 3691 \"parse.y\"\n+#line 3696 \"parse.y\"\n { yyval.ttype = ansi_opname[VEC_NEW_EXPR]; ;\n     break;}\n case 851:\n-#line 3693 \"parse.y\"\n+#line 3698 \"parse.y\"\n { yyval.ttype = ansi_opname[VEC_DELETE_EXPR]; ;\n     break;}\n case 852:\n-#line 3696 \"parse.y\"\n+#line 3701 \"parse.y\"\n { yyval.ttype = grokoptypename (yyvsp[-1].ftype.t, yyvsp[0].ttype); ;\n     break;}\n case 853:\n-#line 3698 \"parse.y\"\n+#line 3703 \"parse.y\"\n { yyval.ttype = ansi_opname[ERROR_MARK]; ;\n     break;}\n }\n@@ -7917,7 +7922,7 @@ case 853:\n   yystate = yyn;\n   goto yynewstate;\n }\n-#line 3701 \"parse.y\"\n+#line 3706 \"parse.y\"\n \n \n #ifdef SPEW_DEBUG"}, {"sha": "c8ed8d4bf0c22479cf89b1430082ccb5e7a7961a", "filename": "gcc/cp/parse.y", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a68c51f569f618cf372efca5a2f601eba312e45/gcc%2Fcp%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a68c51f569f618cf372efca5a2f601eba312e45/gcc%2Fcp%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.y?ref=9a68c51f569f618cf372efca5a2f601eba312e45", "patch": "@@ -2786,7 +2786,12 @@ complex_direct_notype_declarator:\n \t| direct_notype_declarator '[' ']'\n \t\t{ $$ = build_parse_node (ARRAY_REF, $$, NULL_TREE); }\n \t| notype_qualified_id\n-\t\t{ if (OP0 ($1) != current_class_type)\n+\t\t{ if (TREE_CODE (OP0 ($1)) == NAMESPACE_DECL)\n+\t\t    {\n+\t\t      push_decl_namespace (OP0 ($1));\n+\t\t      TREE_COMPLEXITY ($1) = -1;\n+\t\t    }\n+\t\t  else if (OP0 ($1) != current_class_type)\n \t\t    {\n \t\t      push_nested_class (OP0 ($1), 3);\n \t\t      TREE_COMPLEXITY ($1) = current_class_depth;"}, {"sha": "ec5323864f98870211f91a1f1f8365a103570437", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a68c51f569f618cf372efca5a2f601eba312e45/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a68c51f569f618cf372efca5a2f601eba312e45/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=9a68c51f569f618cf372efca5a2f601eba312e45", "patch": "@@ -1220,9 +1220,7 @@ check_explicit_specialization (declarator, decl, template_count, flags)\n \n \t      DECL_ASSEMBLER_NAME (decl) \n \t\t= build_template_decl_overload \n-\t\t(DECL_NAME (decl), \n-\t\t arg_types,\n-\t\t TREE_TYPE (TREE_TYPE (tmpl)),\n+\t\t(decl, arg_types, TREE_TYPE (TREE_TYPE (tmpl)),\n \t\t DECL_INNERMOST_TEMPLATE_PARMS (tmpl),\n \t\t targs, ctype != NULL_TREE);\n \t    }\n@@ -4783,8 +4781,7 @@ tsubst (t, args, in_decl)\n \n \t\tDECL_ASSEMBLER_NAME (r)\n \t\t  = build_template_decl_overload \n-\t\t  (DECL_NAME (r), arg_types, \n-\t\t   TREE_TYPE (TREE_TYPE (tmpl)),\n+\t\t  (r, arg_types, TREE_TYPE (TREE_TYPE (tmpl)),\n \t\t   tparms, targs, member);\n \t      }\n \t  }"}]}