{"sha": "664bd46f4cfff6e1864b674d6ec6a10b2985104c", "node_id": "C_kwDOANBUbNoAKDY2NGJkNDZmNGNmZmY2ZTE4NjRiNjc0ZDZlYzZhMTBiMjk4NTEwNGM", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-06-03T09:00:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-03T09:00:14Z"}, "message": "Merge #1292 #1293\n\n1292: Add name resolution to for loops r=philberty a=philberty\n\nThis just adds basic name resolution and hir lowering for\r\nthe loop. Eventually we will make all Loops into a single\r\nHIR::LoopExpr but for now its really useful having a separate\r\nvisitor to implement this to avoid regressions in the short\r\nterm.\r\n\r\nAddresses #869 \n\n1293: Fixup name canonicalization for impl blocks r=philberty a=philberty\n\nWhen we generate the path for impl items we need to base this of the Self\r\ntype but this was ignoring cases like pointers, references or slices. This\r\nmeant generic slices had the same path has generic pointers etc. The only\r\nreason we didn't end up with a linker symbol clash is due to the symbol\r\nhash.\r\n\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>", "tree": {"sha": "e06376de707e0a3ce866d839036b0849ed0d74c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e06376de707e0a3ce866d839036b0849ed0d74c1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/664bd46f4cfff6e1864b674d6ec6a10b2985104c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJimc2eCRBK7hj4Ov3rIwAARwMIAFNvK2/OyUHqLgv69Vqkyn1I\n++vXe5evLQ6t5I59s1somFDjVO0qZjAvAFmr4oPKIqPiFKHN+6CHX3+wHBEg2onk\nofyLAtWHoWw9y3SIyDnPps59Z1FFXe7HIBnSoxGCFI0jrywStzMxfWjpG1bGnjXO\noZoeko0BxCd6BN3dIe+PIVKuxnssbHj90VyXOHMhm7LUn9ApOqDqrECT9wp5auUO\nm27JYmbCcygG8fyXIEpVeq1/j3W3ajTpOLFRCmAGglbE0sgtWEeUC3dZLX2gavWH\nvuL8J2VQiSJkIoOTO0zfml2g9NJm13b1qK3uF7Qd6CNHUsRC3sHOFn0z/ieNfRU=\n=Onoo\n-----END PGP SIGNATURE-----\n", "payload": "tree e06376de707e0a3ce866d839036b0849ed0d74c1\nparent a71fa22c4dca3ffda1137981d861a45e04db8925\nparent 92f9eb46ec0ef70c808db613da4312af09f736df\nparent 91b16af14cb4f7cdf6414b1314c35202d5883fd9\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1654246814 +0000\ncommitter GitHub <noreply@github.com> 1654246814 +0000\n\nMerge #1292 #1293\n\n1292: Add name resolution to for loops r=philberty a=philberty\n\nThis just adds basic name resolution and hir lowering for\r\nthe loop. Eventually we will make all Loops into a single\r\nHIR::LoopExpr but for now its really useful having a separate\r\nvisitor to implement this to avoid regressions in the short\r\nterm.\r\n\r\nAddresses #869 \n\n1293: Fixup name canonicalization for impl blocks r=philberty a=philberty\n\nWhen we generate the path for impl items we need to base this of the Self\r\ntype but this was ignoring cases like pointers, references or slices. This\r\nmeant generic slices had the same path has generic pointers etc. The only\r\nreason we didn't end up with a linker symbol clash is due to the symbol\r\nhash.\r\n\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/664bd46f4cfff6e1864b674d6ec6a10b2985104c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/664bd46f4cfff6e1864b674d6ec6a10b2985104c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/664bd46f4cfff6e1864b674d6ec6a10b2985104c/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a71fa22c4dca3ffda1137981d861a45e04db8925", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a71fa22c4dca3ffda1137981d861a45e04db8925", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a71fa22c4dca3ffda1137981d861a45e04db8925"}, {"sha": "92f9eb46ec0ef70c808db613da4312af09f736df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92f9eb46ec0ef70c808db613da4312af09f736df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92f9eb46ec0ef70c808db613da4312af09f736df"}, {"sha": "91b16af14cb4f7cdf6414b1314c35202d5883fd9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91b16af14cb4f7cdf6414b1314c35202d5883fd9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91b16af14cb4f7cdf6414b1314c35202d5883fd9"}], "stats": {"total": 140, "additions": 117, "deletions": 23}, "files": [{"sha": "b8f717509505ffac6fa2a80d07efe8ee618b64b3", "filename": "gcc/rust/hir/rust-ast-lower-block.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/664bd46f4cfff6e1864b674d6ec6a10b2985104c/gcc%2Frust%2Fhir%2Frust-ast-lower-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/664bd46f4cfff6e1864b674d6ec6a10b2985104c/gcc%2Frust%2Fhir%2Frust-ast-lower-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-block.h?ref=664bd46f4cfff6e1864b674d6ec6a10b2985104c", "patch": "@@ -225,6 +225,8 @@ class ASTLoweringExprWithBlock : public ASTLoweringBase\n \n   void visit (AST::WhileLoopExpr &expr) override;\n \n+  void visit (AST::ForLoopExpr &expr) override;\n+\n   void visit (AST::MatchExpr &expr) override;\n \n private:"}, {"sha": "a3f8d6e24a0b4e2b119e6a1e2c2b6c7ed87d45e6", "filename": "gcc/rust/hir/rust-ast-lower-expr.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/664bd46f4cfff6e1864b674d6ec6a10b2985104c/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/664bd46f4cfff6e1864b674d6ec6a10b2985104c/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h?ref=664bd46f4cfff6e1864b674d6ec6a10b2985104c", "patch": "@@ -579,6 +579,11 @@ class ASTLoweringExpr : public ASTLoweringBase\n     translated = ASTLoweringExprWithBlock::translate (&expr, &terminated);\n   }\n \n+  void visit (AST::ForLoopExpr &expr) override\n+  {\n+    translated = ASTLoweringExprWithBlock::translate (&expr, &terminated);\n+  }\n+\n   void visit (AST::BreakExpr &expr) override\n   {\n     HIR::Lifetime break_label = lower_lifetime (expr.get_label ());"}, {"sha": "b3b0ee8c4659b6bebf88b8406499ff0756de73d8", "filename": "gcc/rust/hir/rust-ast-lower.cc", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/664bd46f4cfff6e1864b674d6ec6a10b2985104c/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/664bd46f4cfff6e1864b674d6ec6a10b2985104c/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower.cc?ref=664bd46f4cfff6e1864b674d6ec6a10b2985104c", "patch": "@@ -323,6 +323,32 @@ ASTLoweringExprWithBlock::visit (AST::WhileLoopExpr &expr)\n \t\t\t      expr.get_outer_attrs ());\n }\n \n+void\n+ASTLoweringExprWithBlock::visit (AST::ForLoopExpr &expr)\n+{\n+  HIR::BlockExpr *loop_block\n+    = ASTLoweringBlock::translate (expr.get_loop_block ().get (), &terminated);\n+  HIR::LoopLabel loop_label = lower_loop_label (expr.get_loop_label ());\n+  HIR::Expr *iterator_expr\n+    = ASTLoweringExpr::translate (expr.get_iterator_expr ().get (),\n+\t\t\t\t  &terminated);\n+  HIR::Pattern *loop_pattern\n+    = ASTLoweringPattern::translate (expr.get_pattern ().get ());\n+\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t UNKNOWN_LOCAL_DEFID);\n+\n+  translated\n+    = new HIR::ForLoopExpr (mapping,\n+\t\t\t    std::unique_ptr<HIR::Pattern> (loop_pattern),\n+\t\t\t    std::unique_ptr<HIR::Expr> (iterator_expr),\n+\t\t\t    std::unique_ptr<HIR::BlockExpr> (loop_block),\n+\t\t\t    expr.get_locus (), std::move (loop_label),\n+\t\t\t    expr.get_outer_attrs ());\n+}\n+\n void\n ASTLoweringExprWithBlock::visit (AST::MatchExpr &expr)\n {"}, {"sha": "4bf35efdbbe0ac87cba393eeaeecff0f3f3c0762", "filename": "gcc/rust/resolve/rust-ast-resolve-expr.cc", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/664bd46f4cfff6e1864b674d6ec6a10b2985104c/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/664bd46f4cfff6e1864b674d6ec6a10b2985104c/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.cc?ref=664bd46f4cfff6e1864b674d6ec6a10b2985104c", "patch": "@@ -420,6 +420,53 @@ ResolveExpr::visit (AST::WhileLoopExpr &expr)\n   resolve_expr (expr.get_loop_block ().get (), expr.get_node_id ());\n }\n \n+void\n+ResolveExpr::visit (AST::ForLoopExpr &expr)\n+{\n+  if (expr.has_loop_label ())\n+    {\n+      auto label = expr.get_loop_label ();\n+      if (label.get_lifetime ().get_lifetime_type ()\n+\t  != AST::Lifetime::LifetimeType::NAMED)\n+\t{\n+\t  rust_error_at (label.get_locus (),\n+\t\t\t \"Labels must be a named lifetime value\");\n+\t  return;\n+\t}\n+\n+      auto label_name = label.get_lifetime ().get_lifetime_name ();\n+      auto label_lifetime_node_id = label.get_lifetime ().get_node_id ();\n+      resolver->get_label_scope ().insert (\n+\tCanonicalPath::new_seg (label.get_node_id (), label_name),\n+\tlabel_lifetime_node_id, label.get_locus (), false,\n+\t[&] (const CanonicalPath &, NodeId, Location locus) -> void {\n+\t  rust_error_at (label.get_locus (), \"label redefined multiple times\");\n+\t  rust_error_at (locus, \"was defined here\");\n+\t});\n+      resolver->insert_new_definition (label_lifetime_node_id,\n+\t\t\t\t       Definition{label_lifetime_node_id,\n+\t\t\t\t\t\t  label.get_node_id ()});\n+    }\n+\n+  // this needs a new rib to contain the pattern\n+  NodeId scope_node_id = expr.get_node_id ();\n+  resolver->get_name_scope ().push (scope_node_id);\n+  resolver->get_type_scope ().push (scope_node_id);\n+  resolver->get_label_scope ().push (scope_node_id);\n+  resolver->push_new_name_rib (resolver->get_name_scope ().peek ());\n+  resolver->push_new_type_rib (resolver->get_type_scope ().peek ());\n+  resolver->push_new_label_rib (resolver->get_type_scope ().peek ());\n+\n+  // resolve the expression\n+  PatternDeclaration::go (expr.get_pattern ().get (), expr.get_node_id ());\n+  resolve_expr (expr.get_iterator_expr ().get (), expr.get_node_id ());\n+  resolve_expr (expr.get_loop_block ().get (), expr.get_node_id ());\n+\n+  resolver->get_name_scope ().pop ();\n+  resolver->get_type_scope ().pop ();\n+  resolver->get_label_scope ().pop ();\n+}\n+\n void\n ResolveExpr::visit (AST::ContinueExpr &expr)\n {"}, {"sha": "4f189decc9d26baf9c0cae53ffb5ca129050bd39", "filename": "gcc/rust/resolve/rust-ast-resolve-expr.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/664bd46f4cfff6e1864b674d6ec6a10b2985104c/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/664bd46f4cfff6e1864b674d6ec6a10b2985104c/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.h?ref=664bd46f4cfff6e1864b674d6ec6a10b2985104c", "patch": "@@ -99,6 +99,8 @@ class ResolveExpr : public ResolverBase\n \n   void visit (AST::WhileLoopExpr &expr) override;\n \n+  void visit (AST::ForLoopExpr &expr) override;\n+\n   void visit (AST::ContinueExpr &expr) override;\n \n   void visit (AST::BorrowExpr &expr) override;"}, {"sha": "603037e8d8fd93b3d21945ec6711e16897f7ca58", "filename": "gcc/rust/resolve/rust-ast-resolve-item.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/664bd46f4cfff6e1864b674d6ec6a10b2985104c/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/664bd46f4cfff6e1864b674d6ec6a10b2985104c/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.cc?ref=664bd46f4cfff6e1864b674d6ec6a10b2985104c", "patch": "@@ -613,6 +613,7 @@ ResolveItem::visit (AST::InherentImpl &impl_block)\n       resolver->get_name_scope ().pop ();\n       return;\n     }\n+  rust_assert (!self_cpath.is_empty ());\n \n   // Setup paths\n   bool canonicalize_type_args = !impl_block.has_generics ();\n@@ -637,6 +638,7 @@ ResolveItem::visit (AST::InherentImpl &impl_block)\n \t= CanonicalPath::new_seg (impl_block.get_node_id (), seg_buf);\n       cpath = canonical_prefix.append (seg);\n     }\n+\n   // done setup paths\n \n   auto Self"}, {"sha": "2b5c68447a08a107853bfdb8e85e0ace473bd37c", "filename": "gcc/rust/resolve/rust-ast-resolve-type.cc", "status": "modified", "additions": 32, "deletions": 17, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/664bd46f4cfff6e1864b674d6ec6a10b2985104c/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/664bd46f4cfff6e1864b674d6ec6a10b2985104c/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.cc?ref=664bd46f4cfff6e1864b674d6ec6a10b2985104c", "patch": "@@ -209,43 +209,58 @@ ResolveTypeToCanonicalPath::visit (AST::SliceType &slice)\n void\n ResolveType::visit (AST::ReferenceType &type)\n {\n-  type.get_type_referenced ()->accept_vis (*this);\n-\n-  if (canonical_path != nullptr && canonical_path->size () > 0)\n+  CanonicalPath path = CanonicalPath::create_empty ();\n+  resolved_node\n+    = ResolveType::go (type.get_type_referenced ().get (), type.get_node_id (),\n+\t\t       canonicalize_type_with_generics, &path);\n+  if (canonical_path != nullptr)\n     {\n-      std::string seg = canonical_path->get ();\n-      *canonical_path = CanonicalPath::new_seg (type.get_node_id (), \"&\" + seg);\n+      std::string ref_type_str = type.is_mut () ? \"mut\" : \"\";\n+      std::string ref_path = \"&\" + ref_type_str + \" \" + path.get ();\n+      *canonical_path = canonical_path->append (\n+\tCanonicalPath::new_seg (type.get_node_id (), ref_path));\n     }\n }\n \n void\n ResolveType::visit (AST::RawPointerType &type)\n {\n-  type.get_type_pointed_to ()->accept_vis (*this);\n-\n-  if (canonical_path != nullptr && canonical_path->size () > 0)\n+  CanonicalPath path = CanonicalPath::create_empty ();\n+  resolved_node\n+    = ResolveType::go (type.get_type_pointed_to ().get (), type.get_node_id (),\n+\t\t       canonicalize_type_with_generics, &path);\n+  if (canonical_path != nullptr)\n     {\n-      std::string seg = canonical_path->get ();\n-      *canonical_path = CanonicalPath::new_seg (type.get_node_id (), \"*\" + seg);\n+      std::string ptr_type_str\n+\t= type.get_pointer_type () == AST::RawPointerType::CONST ? \"const\"\n+\t\t\t\t\t\t\t\t : \"mut\";\n+      std::string ptr_path = \"*\" + ptr_type_str + \" \" + path.get ();\n+      *canonical_path = canonical_path->append (\n+\tCanonicalPath::new_seg (type.get_node_id (), ptr_path));\n     }\n }\n \n void\n ResolveType::visit (AST::InferredType &type)\n-{\n-  ok = true;\n-}\n+{}\n \n void\n ResolveType::visit (AST::NeverType &type)\n-{\n-  ok = true;\n-}\n+{}\n \n void\n ResolveType::visit (AST::SliceType &type)\n {\n-  type.get_elem_type ()->accept_vis (*this);\n+  CanonicalPath path = CanonicalPath::create_empty ();\n+  resolved_node\n+    = ResolveType::go (type.get_elem_type ().get (), type.get_node_id (),\n+\t\t       canonicalize_type_with_generics, &path);\n+  if (canonical_path != nullptr)\n+    {\n+      std::string slice_path = \"[\" + path.get () + \"]\";\n+      *canonical_path = canonical_path->append (\n+\tCanonicalPath::new_seg (type.get_node_id (), slice_path));\n+    }\n }\n \n ResolveRelativeTypePath::ResolveRelativeTypePath (CanonicalPath qualified_path)"}, {"sha": "d10cec2835bd6765e5710cf8010183a6c00f35b0", "filename": "gcc/rust/resolve/rust-ast-resolve-type.h", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/664bd46f4cfff6e1864b674d6ec6a10b2985104c/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/664bd46f4cfff6e1864b674d6ec6a10b2985104c/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h?ref=664bd46f4cfff6e1864b674d6ec6a10b2985104c", "patch": "@@ -211,15 +211,12 @@ class ResolveType : public ResolverBase\n     ResolveType resolver (parent, canonicalize_type_with_generics,\n \t\t\t  canonical_path);\n     type->accept_vis (resolver);\n-    if (!resolver.ok)\n-      rust_error_at (type->get_locus (), \"unresolved type\");\n \n     return resolver.resolved_node;\n   };\n \n   void visit (AST::BareFunctionType &fntype) override\n   {\n-    ok = true;\n     for (auto &param : fntype.get_function_params ())\n       ResolveType::go (param.get_type ().get (), fntype.get_node_id ());\n \n@@ -253,8 +250,6 @@ class ResolveType : public ResolverBase\n \treturn;\n       }\n \n-    ok = !rel_canonical_path.is_empty ();\n-\n     // lets try and resolve in one go else leave it up to the type resolver to\n     // figure outer\n \n@@ -331,7 +326,7 @@ class ResolveType : public ResolverBase\n \n   void visit (AST::QualifiedPathInType &path) override\n   {\n-    ok = ResolveRelativeTypePath::go (path);\n+    ResolveRelativeTypePath::go (path);\n   }\n \n   void visit (AST::ArrayType &type) override;"}]}