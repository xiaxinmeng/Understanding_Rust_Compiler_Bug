{"sha": "a4f0c29da8489f5c1f83597edfc77c65cb59858c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTRmMGMyOWRhODQ4OWY1YzFmODM1OTdlZGZjNzdjNjVjYjU5ODU4Yw==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2015-11-18T09:00:58Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2015-11-18T09:00:58Z"}, "message": "Fix memory leaks in tree-ssa-uninit.c\n\n\t* tree-ssa-uninit.c (convert_control_dep_chain_into_preds):\n\tFix GNU coding style.\n\t(find_def_preds): Use auto_vec.\n\t(destroy_predicate_vecs): Change signature of the function.\n\t(prune_uninit_phi_opnds_in_unrealizable_paths): Use the\n\tnew signature.\n\t(simplify_preds_4): Use destroy_predicate_vecs instread of\n\tjust releasing preds vector.\n\t(normalize_preds): Likewise.\n\t(is_use_properly_guarded): Use new signature of\n\tdestroy_predicate_vecs.\n\t(find_uninit_use): Likewise.\n\nFrom-SVN: r230519", "tree": {"sha": "1810fdda09b85b19dcc8e8a10725949f7e17162f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1810fdda09b85b19dcc8e8a10725949f7e17162f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a4f0c29da8489f5c1f83597edfc77c65cb59858c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4f0c29da8489f5c1f83597edfc77c65cb59858c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4f0c29da8489f5c1f83597edfc77c65cb59858c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4f0c29da8489f5c1f83597edfc77c65cb59858c/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0b176958df07659d96bf1ae3f42cf4607161bd1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b176958df07659d96bf1ae3f42cf4607161bd1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b176958df07659d96bf1ae3f42cf4607161bd1d"}], "stats": {"total": 48, "additions": 32, "deletions": 16}, "files": [{"sha": "71add6098cad25478419c067ac4e60a3246ab168", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4f0c29da8489f5c1f83597edfc77c65cb59858c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4f0c29da8489f5c1f83597edfc77c65cb59858c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a4f0c29da8489f5c1f83597edfc77c65cb59858c", "patch": "@@ -1,3 +1,18 @@\n+2015-11-18  Martin Liska  <mliska@suse.cz>\n+\n+\t* tree-ssa-uninit.c (convert_control_dep_chain_into_preds):\n+\tFix GNU coding style.\n+\t(find_def_preds): Use auto_vec.\n+\t(destroy_predicate_vecs): Change signature of the function.\n+\t(prune_uninit_phi_opnds_in_unrealizable_paths): Use the\n+\tnew signature.\n+\t(simplify_preds_4): Use destroy_predicate_vecs instread of\n+\tjust releasing preds vector.\n+\t(normalize_preds): Likewise.\n+\t(is_use_properly_guarded): Use new signature of\n+\tdestroy_predicate_vecs.\n+\t(find_uninit_use): Likewise.\n+\n 2015-11-18  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/67790"}, {"sha": "0709cce756102e53e9c5dc29ab0a829bb91d9692", "filename": "gcc/tree-ssa-uninit.c", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4f0c29da8489f5c1f83597edfc77c65cb59858c/gcc%2Ftree-ssa-uninit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4f0c29da8489f5c1f83597edfc77c65cb59858c/gcc%2Ftree-ssa-uninit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-uninit.c?ref=a4f0c29da8489f5c1f83597edfc77c65cb59858c", "patch": "@@ -628,9 +628,9 @@ convert_control_dep_chain_into_preds (vec<edge> *dep_chains,\n         }\n \n       if (!has_valid_pred)\n-        break;\n+\tbreak;\n       else\n-        preds->safe_push (t_chain);\n+\tpreds->safe_push (t_chain);\n     }\n   return has_valid_pred;\n }\n@@ -682,7 +682,7 @@ find_predicates (pred_chain_union *preds,\n \n static void\n collect_phi_def_edges (gphi *phi, basic_block cd_root,\n-                       vec<edge> *edges,\n+\t\t       auto_vec<edge> *edges,\n \t\t       hash_set<gimple *> *visited_phis)\n {\n   size_t i, n;\n@@ -739,7 +739,7 @@ find_def_preds (pred_chain_union *preds, gphi *phi)\n   size_t num_chains = 0, i, n;\n   vec<edge> dep_chains[MAX_NUM_CHAINS];\n   auto_vec<edge, MAX_CHAIN_LEN + 1> cur_chain;\n-  vec<edge> def_edges = vNULL;\n+  auto_vec<edge> def_edges;\n   bool has_valid_pred = false;\n   basic_block phi_bb, cd_root = 0;\n \n@@ -829,14 +829,14 @@ dump_predicates (gimple *usestmt, pred_chain_union preds,\n /* Destroys the predicate set *PREDS.  */\n \n static void\n-destroy_predicate_vecs (pred_chain_union preds)\n+destroy_predicate_vecs (pred_chain_union *preds)\n {\n   size_t i;\n \n-  size_t n = preds.length ();\n+  size_t n = preds->length ();\n   for (i = 0; i < n; i++)\n-    preds[i].release ();\n-  preds.release ();\n+    (*preds)[i].release ();\n+  preds->release ();\n }\n \n \n@@ -1103,7 +1103,7 @@ prune_uninit_phi_opnds_in_unrealizable_paths (gphi *phi,\n \t\t\t\t\t    uninit_opnds2,\n \t\t\t\t\t    &def_preds,\n \t\t\t\t\t    visited_phis);\n-\t      destroy_predicate_vecs (def_preds);\n+\t      destroy_predicate_vecs (&def_preds);\n \t      if (!ok)\n \t\treturn false;\n             }\n@@ -1769,7 +1769,8 @@ simplify_preds_4 (pred_chain_union *preds)\n             continue;\n           s_preds.safe_push ((*preds)[i]);\n         }\n-      preds->release ();\n+\n+      destroy_predicate_vecs (preds);\n       (*preds) = s_preds;\n       s_preds = vNULL;\n     }\n@@ -2148,7 +2149,7 @@ normalize_preds (pred_chain_union preds, gimple *use_or_def, bool is_use)\n       dump_predicates (use_or_def, norm_preds, is_use ? \"[USE]:\\n\" : \"[DEF]:\\n\");\n     }\n \n-  preds.release ();\n+  destroy_predicate_vecs (&preds);\n   return norm_preds;\n }\n \n@@ -2199,7 +2200,7 @@ is_use_properly_guarded (gimple *use_stmt,\n \n   if (!has_valid_preds)\n     {\n-      destroy_predicate_vecs (preds);\n+      destroy_predicate_vecs (&preds);\n       return false;\n     }\n \n@@ -2210,7 +2211,7 @@ is_use_properly_guarded (gimple *use_stmt,\n \n   if (is_properly_guarded)\n     {\n-      destroy_predicate_vecs (preds);\n+      destroy_predicate_vecs (&preds);\n       return true;\n     }\n \n@@ -2220,7 +2221,7 @@ is_use_properly_guarded (gimple *use_stmt,\n \n       if (!has_valid_preds)\n \t{\n-\t  destroy_predicate_vecs (preds);\n+\t  destroy_predicate_vecs (&preds);\n \t  return false;\n \t}\n \n@@ -2233,7 +2234,7 @@ is_use_properly_guarded (gimple *use_stmt,\n \n   is_properly_guarded = is_superset_of (*def_preds, preds);\n \n-  destroy_predicate_vecs (preds);\n+  destroy_predicate_vecs (&preds);\n   return is_properly_guarded;\n }\n \n@@ -2306,7 +2307,7 @@ find_uninit_use (gphi *phi, unsigned uninit_opnds,\n         }\n     }\n \n-  destroy_predicate_vecs (def_preds);\n+  destroy_predicate_vecs (&def_preds);\n   return ret;\n }\n "}]}