{"sha": "f8be3f56c18a8d9bb552820552d94b511cf87e35", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjhiZTNmNTZjMThhOGQ5YmI1NTI4MjA1NTJkOTRiNTExY2Y4N2UzNQ==", "commit": {"author": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2007-11-21T22:29:04Z"}, "committer": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2007-11-21T22:29:04Z"}, "message": "re PR target/34155 (ICE in simplify_binary_operation_1, at simplify-rtx.c:2666 on sh64)\n\n\tPR target/34155\n\t* config/sh/sh.md (binary_sf_op): Remove.\n\t(binary_sf_op0, binary_sf_op1): New define_insn_and_split.\n\t* config/sh/sh.c (sh_expand_binop_v2sf): Use gen_binary_sf_op0\n\tand gen_binary_sf_op1.\n\nFrom-SVN: r130335", "tree": {"sha": "a3752980f43980e81014f56909ca97d5a8cf72d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a3752980f43980e81014f56909ca97d5a8cf72d6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f8be3f56c18a8d9bb552820552d94b511cf87e35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8be3f56c18a8d9bb552820552d94b511cf87e35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8be3f56c18a8d9bb552820552d94b511cf87e35", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8be3f56c18a8d9bb552820552d94b511cf87e35/comments", "author": null, "committer": null, "parents": [{"sha": "12e88696599908bab3f59cb56c93cd32a7d3af74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12e88696599908bab3f59cb56c93cd32a7d3af74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12e88696599908bab3f59cb56c93cd32a7d3af74"}], "stats": {"total": 76, "additions": 51, "deletions": 25}, "files": [{"sha": "b128a5af979490a98c63b8dda3dd96bd872df115", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8be3f56c18a8d9bb552820552d94b511cf87e35/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8be3f56c18a8d9bb552820552d94b511cf87e35/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f8be3f56c18a8d9bb552820552d94b511cf87e35", "patch": "@@ -1,3 +1,11 @@\n+2007-11-21  Kaz Kojima  <kkojima@gcc.gnu.org>\n+\n+\tPR target/34155\n+\t* config/sh/sh.md (binary_sf_op): Remove.\n+\t(binary_sf_op0, binary_sf_op1): New define_insn_and_split.\n+\t* config/sh/sh.c (sh_expand_binop_v2sf): Use gen_binary_sf_op0\n+\tand gen_binary_sf_op1.\n+\n 2007-11-21  Hans-Peter Nilsson  <hp@axis.com>\n \n \t* regclass.c (init_reg_autoinc): Fix typo preventing test of"}, {"sha": "8d82fa2b2a218f334dd8455604b2a69e86634d72", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8be3f56c18a8d9bb552820552d94b511cf87e35/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8be3f56c18a8d9bb552820552d94b511cf87e35/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=f8be3f56c18a8d9bb552820552d94b511cf87e35", "patch": "@@ -9894,14 +9894,10 @@ sh_expand_unop_v2sf (enum rtx_code code, rtx op0, rtx op1)\n void\n sh_expand_binop_v2sf (enum rtx_code code, rtx op0, rtx op1, rtx op2)\n {\n-  rtx sel0 = const0_rtx;\n-  rtx sel1 = const1_rtx;\n-  rtx (*fn) (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx)\n-    = gen_binary_sf_op;\n   rtx op = gen_rtx_fmt_ee (code, SFmode, op1, op2);\n \n-  emit_insn ((*fn) (op0, op1, op2, op, sel0, sel0, sel0, sel1));\n-  emit_insn ((*fn) (op0, op1, op2, op, sel1, sel1, sel1, sel0));\n+  emit_insn (gen_binary_sf_op0 (op0, op1, op2, op));\n+  emit_insn (gen_binary_sf_op1 (op0, op1, op2, op));\n }\n \n /* Return the class of registers for which a mode change from FROM to TO"}, {"sha": "90353b2df7ba8deb79056106f01943858515b5ca", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 41, "deletions": 19, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8be3f56c18a8d9bb552820552d94b511cf87e35/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8be3f56c18a8d9bb552820552d94b511cf87e35/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=f8be3f56c18a8d9bb552820552d94b511cf87e35", "patch": "@@ -10450,39 +10450,61 @@ mov.l\\\\t1f,r0\\\\n\\\\\n }\"\n   [(set_attr \"type\" \"fparith_media\")])\n \n-(define_insn_and_split \"binary_sf_op\"\n+(define_insn_and_split \"binary_sf_op0\"\n   [(set (match_operand:V2SF 0 \"fp_arith_reg_operand\" \"=f\")\n-\t(vec_select:V2SF\n-\t (vec_concat:V2SF\n+\t(vec_concat:V2SF\n+\t  (match_operator:SF 3 \"binary_float_operator\"\n+\t    [(vec_select:SF (match_operand:V2SF 1 \"fp_arith_reg_operand\" \"f\")\n+\t\t\t    (parallel [(const_int 0)]))\n+\t     (vec_select:SF (match_operand:V2SF 2 \"fp_arith_reg_operand\" \"f\")\n+\t\t\t    (parallel [(const_int 0)]))])\n+\t  (vec_select:SF\n+\t   (match_dup 0)\n+\t   (parallel [(const_int 1)]))))]\n+  \"TARGET_SHMEDIA_FPU\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 4) (match_dup 5))]\n+  \"\n+{\n+  int endian = TARGET_LITTLE_ENDIAN ? 0 : 1;\n+  rtx op1 = gen_rtx_REG (SFmode,\n+\t\t\t true_regnum (operands[1]) + endian);\n+  rtx op2 = gen_rtx_REG (SFmode,\n+\t\t\t true_regnum (operands[2]) + endian);\n+\n+  operands[4] = gen_rtx_REG (SFmode,\n+\t\t\t     true_regnum (operands[0]) + endian);\n+  operands[5] = gen_rtx_fmt_ee (GET_CODE (operands[3]), SFmode, op1, op2);\n+}\"\n+  [(set_attr \"type\" \"fparith_media\")])\n+\n+(define_insn_and_split \"binary_sf_op1\"\n+  [(set (match_operand:V2SF 0 \"fp_arith_reg_operand\" \"=f\")\n+\t(vec_concat:V2SF\n \t  (vec_select:SF\n \t   (match_dup 0)\n-\t   (parallel [(match_operand 7 \"const_int_operand\" \"n\")]))\n+\t   (parallel [(const_int 0)]))\n \t  (match_operator:SF 3 \"binary_float_operator\"\n \t    [(vec_select:SF (match_operand:V2SF 1 \"fp_arith_reg_operand\" \"f\")\n-\t\t\t    (parallel [(match_operand 5\n-\t\t\t\t\t\"const_int_operand\" \"n\")]))\n+\t\t\t    (parallel [(const_int 1)]))\n \t     (vec_select:SF (match_operand:V2SF 2 \"fp_arith_reg_operand\" \"f\")\n-\t\t\t    (parallel [(match_operand 6\n-\t\t\t\t\t\"const_int_operand\" \"n\")]))]))\n-\t (parallel [(match_dup 7) (match_operand 4 \"const_int_operand\" \"n\")])))]\n-  \"TARGET_SHMEDIA_FPU && INTVAL (operands[4]) != INTVAL (operands[7])\"\n+\t\t\t    (parallel [(const_int 1)]))])))]\n+  \"TARGET_SHMEDIA_FPU\"\n   \"#\"\n   \"&& reload_completed\"\n-  [(set (match_dup 8) (match_dup 9))]\n+  [(set (match_dup 4) (match_dup 5))]\n   \"\n {\n   int endian = TARGET_LITTLE_ENDIAN ? 0 : 1;\n   rtx op1 = gen_rtx_REG (SFmode,\n-\t\t\t (true_regnum (operands[1])\n-\t\t\t  + (INTVAL (operands[5]) ^ endian)));\n+\t\t\t true_regnum (operands[1]) + (1 ^ endian));\n   rtx op2 = gen_rtx_REG (SFmode,\n-\t\t\t (true_regnum (operands[2])\n-\t\t\t  + (INTVAL (operands[6]) ^ endian)));\n+\t\t\t true_regnum (operands[2]) + (1 ^ endian));\n \n-  operands[8] = gen_rtx_REG (SFmode,\n-\t\t\t     (true_regnum (operands[0])\n-\t\t\t      + (INTVAL (operands[4]) ^ endian)));\n-  operands[9] = gen_rtx_fmt_ee (GET_CODE (operands[3]), SFmode, op1, op2);\n+  operands[4] = gen_rtx_REG (SFmode,\n+\t\t\t     true_regnum (operands[0]) + (1 ^ endian));\n+  operands[5] = gen_rtx_fmt_ee (GET_CODE (operands[3]), SFmode, op1, op2);\n }\"\n   [(set_attr \"type\" \"fparith_media\")])\n "}]}