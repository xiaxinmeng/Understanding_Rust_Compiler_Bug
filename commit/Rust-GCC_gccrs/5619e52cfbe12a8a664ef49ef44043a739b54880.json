{"sha": "5619e52cfbe12a8a664ef49ef44043a739b54880", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTYxOWU1MmNmYmUxMmE4YTY2NGVmNDllZjQ0MDQzYTczOWI1NDg4MA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2011-11-05T19:58:37Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2011-11-05T19:58:37Z"}, "message": "re PR tree-optimization/50693 (Loop optimization restricted by GOTOs)\n\n\tPR tree-optimization/50693\n\t* tree-cfg.c (gimple_can_merge_blocks_p): Allow merging with\n\tnon-forced user labels.\n\t(gimple_merge_blocks): Turn non-forced user labels into\n\tdebug bind stmt with the label as first operand and reset value.\n\t(gimple_duplicate_bb): Don't duplicate label debug stmts.\n\t* dwarf2out.c (gen_label_die): Handle NOTE_INSN_DELETED_DEBUG_LABEL.\n\t* final.c (final_scan_insn): Likewise.\n\t(rest_of_clean_state): Don't dump NOTE_INSN_DELETED_DEBUG_LABEL.\n\t* var-tracking.c (debug_label_num): New variable.\n\t(delete_debug_insns): Don't delete DEBUG_INSNs for LABEL_DECLs,\n\tinstead turn them into NOTE_INSN_DELETED_DEBUG_LABEL notes.\n\t* cfglayout.c (skip_insns_after_block, duplicate_insn_chain): Handle\n\tNOTE_INSN_DELETED_DEBUG_LABEL.\n\t(duplicate_insn_chain): Don't duplicate LABEL_DECL DEBUG_INSNs.\n\t* insn-notes.def (DELETED_DEBUG_LABEL): New note kind.\n\t* print-rtl.c (print_rtx): Handle NOTE_INSN_DELETED_DEBUG_LABEL.\n\t* gengtype.c (adjust_field_rtx_def): Likewise.\n\t* config/i386/i386.c (ix86_output_function_epilogue): For MachO\n\tclear CODE_LABEL_NUMBER of NOTE_INSN_DELETED_DEBUG_LABEL\n\tif their are at the end of function and nop hasn't been emitted.\n\t* config/rs6000/rs6000.c (rs6000_output_function_epilogue): Likewise.\n\nFrom-SVN: r181014", "tree": {"sha": "7b028a77e2bfe16e21bef7282ea5fce54ee5d004", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b028a77e2bfe16e21bef7282ea5fce54ee5d004"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5619e52cfbe12a8a664ef49ef44043a739b54880", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5619e52cfbe12a8a664ef49ef44043a739b54880", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5619e52cfbe12a8a664ef49ef44043a739b54880", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5619e52cfbe12a8a664ef49ef44043a739b54880/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "eed33268ffda4b25ae8d756d9e91a3425d5e96f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eed33268ffda4b25ae8d756d9e91a3425d5e96f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eed33268ffda4b25ae8d756d9e91a3425d5e96f4"}], "stats": {"total": 129, "additions": 122, "deletions": 7}, "files": [{"sha": "25eb1ce4bb12a5e27f81e99728b0ddd64a817d9e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5619e52cfbe12a8a664ef49ef44043a739b54880/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5619e52cfbe12a8a664ef49ef44043a739b54880/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5619e52cfbe12a8a664ef49ef44043a739b54880", "patch": "@@ -1,3 +1,28 @@\n+2011-11-05  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/50693\n+\t* tree-cfg.c (gimple_can_merge_blocks_p): Allow merging with\n+\tnon-forced user labels.\n+\t(gimple_merge_blocks): Turn non-forced user labels into\n+\tdebug bind stmt with the label as first operand and reset value.\n+\t(gimple_duplicate_bb): Don't duplicate label debug stmts.\n+\t* dwarf2out.c (gen_label_die): Handle NOTE_INSN_DELETED_DEBUG_LABEL.\n+\t* final.c (final_scan_insn): Likewise.\n+\t(rest_of_clean_state): Don't dump NOTE_INSN_DELETED_DEBUG_LABEL.\n+\t* var-tracking.c (debug_label_num): New variable.\n+\t(delete_debug_insns): Don't delete DEBUG_INSNs for LABEL_DECLs,\n+\tinstead turn them into NOTE_INSN_DELETED_DEBUG_LABEL notes.\n+\t* cfglayout.c (skip_insns_after_block, duplicate_insn_chain): Handle\n+\tNOTE_INSN_DELETED_DEBUG_LABEL.\n+\t(duplicate_insn_chain): Don't duplicate LABEL_DECL DEBUG_INSNs.\n+\t* insn-notes.def (DELETED_DEBUG_LABEL): New note kind.\n+\t* print-rtl.c (print_rtx): Handle NOTE_INSN_DELETED_DEBUG_LABEL.\n+\t* gengtype.c (adjust_field_rtx_def): Likewise.\n+\t* config/i386/i386.c (ix86_output_function_epilogue): For MachO\n+\tclear CODE_LABEL_NUMBER of NOTE_INSN_DELETED_DEBUG_LABEL\n+\tif their are at the end of function and nop hasn't been emitted.\n+\t* config/rs6000/rs6000.c (rs6000_output_function_epilogue): Likewise.\n+\n 2011-11-05  Georg-Johann Lay  <avr@gjlay.de>\n \n \tPR rtl-optimization/50448"}, {"sha": "22d3d87e68b7d264bdf134f7f438dfd63d766469", "filename": "gcc/cfglayout.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5619e52cfbe12a8a664ef49ef44043a739b54880/gcc%2Fcfglayout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5619e52cfbe12a8a664ef49ef44043a739b54880/gcc%2Fcfglayout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfglayout.c?ref=5619e52cfbe12a8a664ef49ef44043a739b54880", "patch": "@@ -149,6 +149,7 @@ skip_insns_after_block (basic_block bb)\n \t    break;\n \t  case NOTE_INSN_DELETED:\n \t  case NOTE_INSN_DELETED_LABEL:\n+\t  case NOTE_INSN_DELETED_DEBUG_LABEL:\n \t    continue;\n \t  default:\n \t    reorder_insns (insn, insn, last_insn);\n@@ -1174,6 +1175,10 @@ duplicate_insn_chain (rtx from, rtx to)\n       switch (GET_CODE (insn))\n \t{\n \tcase DEBUG_INSN:\n+\t  /* Don't duplicate label debug insns.  */\n+\t  if (TREE_CODE (INSN_VAR_LOCATION_DECL (insn)) == LABEL_DECL)\n+\t    break;\n+\t  /* FALLTHRU */\n \tcase INSN:\n \tcase CALL_INSN:\n \tcase JUMP_INSN:\n@@ -1219,6 +1224,7 @@ duplicate_insn_chain (rtx from, rtx to)\n \n \t    case NOTE_INSN_DELETED:\n \t    case NOTE_INSN_DELETED_LABEL:\n+\t    case NOTE_INSN_DELETED_DEBUG_LABEL:\n \t      /* No problem to strip these.  */\n \t    case NOTE_INSN_FUNCTION_BEG:\n \t      /* There is always just single entry to function.  */"}, {"sha": "ca62b229089a70ef61b41f195a495dd6717394e1", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5619e52cfbe12a8a664ef49ef44043a739b54880/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5619e52cfbe12a8a664ef49ef44043a739b54880/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=5619e52cfbe12a8a664ef49ef44043a739b54880", "patch": "@@ -10879,15 +10879,28 @@ ix86_output_function_epilogue (FILE *file ATTRIBUTE_UNUSED,\n      it looks like we might want one, insert a NOP.  */\n   {\n     rtx insn = get_last_insn ();\n+    rtx deleted_debug_label = NULL_RTX;\n     while (insn\n \t   && NOTE_P (insn)\n \t   && NOTE_KIND (insn) != NOTE_INSN_DELETED_LABEL)\n-      insn = PREV_INSN (insn);\n+      {\n+\t/* Don't insert a nop for NOTE_INSN_DELETED_DEBUG_LABEL\n+\t   notes only, instead set their CODE_LABEL_NUMBER to -1,\n+\t   otherwise there would be code generation differences\n+\t   in between -g and -g0.  */\n+\tif (NOTE_P (insn) && NOTE_KIND (insn) == NOTE_INSN_DELETED_DEBUG_LABEL)\n+\t  deleted_debug_label = insn;\n+\tinsn = PREV_INSN (insn);\n+      }\n     if (insn\n \t&& (LABEL_P (insn)\n \t    || (NOTE_P (insn)\n \t\t&& NOTE_KIND (insn) == NOTE_INSN_DELETED_LABEL)))\n       fputs (\"\\tnop\\n\", file);\n+    else if (deleted_debug_label)\n+      for (insn = deleted_debug_label; insn; insn = NEXT_INSN (insn))\n+\tif (NOTE_KIND (insn) == NOTE_INSN_DELETED_DEBUG_LABEL)\n+\t  CODE_LABEL_NUMBER (insn) = -1;\n   }\n #endif\n "}, {"sha": "779086a30b18695a02bd9d5b2779f56a2aea8ffd", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5619e52cfbe12a8a664ef49ef44043a739b54880/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5619e52cfbe12a8a664ef49ef44043a739b54880/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=5619e52cfbe12a8a664ef49ef44043a739b54880", "patch": "@@ -21461,15 +21461,28 @@ rs6000_output_function_epilogue (FILE *file,\n      it looks like we might want one, insert a NOP.  */\n   {\n     rtx insn = get_last_insn ();\n+    rtx deleted_debug_label = NULL_RTX;\n     while (insn\n \t   && NOTE_P (insn)\n \t   && NOTE_KIND (insn) != NOTE_INSN_DELETED_LABEL)\n-      insn = PREV_INSN (insn);\n+      {\n+\t/* Don't insert a nop for NOTE_INSN_DELETED_DEBUG_LABEL\n+\t   notes only, instead set their CODE_LABEL_NUMBER to -1,\n+\t   otherwise there would be code generation differences\n+\t   in between -g and -g0.  */\n+\tif (NOTE_P (insn) && NOTE_KIND (insn) == NOTE_INSN_DELETED_DEBUG_LABEL)\n+\t  deleted_debug_label = insn;\n+\tinsn = PREV_INSN (insn);\n+      }\n     if (insn\n \t&& (LABEL_P (insn)\n \t    || (NOTE_P (insn)\n \t\t&& NOTE_KIND (insn) == NOTE_INSN_DELETED_LABEL)))\n       fputs (\"\\tnop\\n\", file);\n+    else if (deleted_debug_label)\n+      for (insn = deleted_debug_label; insn; insn = NEXT_INSN (insn))\n+\tif (NOTE_KIND (insn) == NOTE_INSN_DELETED_DEBUG_LABEL)\n+\t  CODE_LABEL_NUMBER (insn) = -1;\n   }\n #endif\n "}, {"sha": "39be9a16e9c36ad359d86a338ae414a3afeed0cb", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5619e52cfbe12a8a664ef49ef44043a739b54880/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5619e52cfbe12a8a664ef49ef44043a739b54880/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=5619e52cfbe12a8a664ef49ef44043a739b54880", "patch": "@@ -18020,6 +18020,14 @@ gen_label_die (tree decl, dw_die_ref context_die)\n \t  ASM_GENERATE_INTERNAL_LABEL (label, \"L\", CODE_LABEL_NUMBER (insn));\n \t  add_AT_lbl_id (lbl_die, DW_AT_low_pc, label);\n \t}\n+      else if (insn\n+\t       && NOTE_P (insn)\n+\t       && NOTE_KIND (insn) == NOTE_INSN_DELETED_DEBUG_LABEL\n+\t       && CODE_LABEL_NUMBER (insn) != -1)\n+\t{\n+\t  ASM_GENERATE_INTERNAL_LABEL (label, \"LDL\", CODE_LABEL_NUMBER (insn));\n+\t  add_AT_lbl_id (lbl_die, DW_AT_low_pc, label);\n+\t}\n     }\n }\n "}, {"sha": "bd4e7a762a73c6e4fe9f7381ed47f28119d9dcec", "filename": "gcc/final.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5619e52cfbe12a8a664ef49ef44043a739b54880/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5619e52cfbe12a8a664ef49ef44043a739b54880/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=5619e52cfbe12a8a664ef49ef44043a739b54880", "patch": "@@ -2080,6 +2080,12 @@ final_scan_insn (rtx insn, FILE *file, int optimize_p ATTRIBUTE_UNUSED,\n \t  ASM_OUTPUT_DEBUG_LABEL (file, \"L\", CODE_LABEL_NUMBER (insn));\n \t  break;\n \n+\tcase NOTE_INSN_DELETED_DEBUG_LABEL:\n+\t  /* Similarly, but need to use different namespace for it.  */\n+\t  if (CODE_LABEL_NUMBER (insn) != -1)\n+\t    ASM_OUTPUT_DEBUG_LABEL (file, \"LDL\", CODE_LABEL_NUMBER (insn));\n+\t  break;\n+\n \tcase NOTE_INSN_VAR_LOCATION:\n \tcase NOTE_INSN_CALL_ARG_LOCATION:\n \t  if (!DECL_IGNORED_P (current_function_decl))\n@@ -4369,7 +4375,8 @@ rest_of_clean_state (void)\n \t      (NOTE_KIND (insn) != NOTE_INSN_VAR_LOCATION\n \t       && NOTE_KIND (insn) != NOTE_INSN_CALL_ARG_LOCATION\n \t       && NOTE_KIND (insn) != NOTE_INSN_BLOCK_BEG\n-\t       && NOTE_KIND (insn) != NOTE_INSN_BLOCK_END)))\n+\t       && NOTE_KIND (insn) != NOTE_INSN_BLOCK_END\n+\t       && NOTE_KIND (insn) != NOTE_INSN_DELETED_DEBUG_LABEL)))\n \tprint_rtl_single (final_output, insn);\n     }\n "}, {"sha": "c9c08a4db315f383d640540cf44672f00a557105", "filename": "gcc/gengtype.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5619e52cfbe12a8a664ef49ef44043a739b54880/gcc%2Fgengtype.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5619e52cfbe12a8a664ef49ef44043a739b54880/gcc%2Fgengtype.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype.c?ref=5619e52cfbe12a8a664ef49ef44043a739b54880", "patch": "@@ -1015,6 +1015,7 @@ adjust_field_rtx_def (type_p t, options_p ARG_UNUSED (opt))\n \t  {\n \t  case NOTE_INSN_MAX:\n \t  case NOTE_INSN_DELETED_LABEL:\n+\t  case NOTE_INSN_DELETED_DEBUG_LABEL:\n \t    note_flds = create_field (note_flds, &string_type, \"rt_str\");\n \t    break;\n "}, {"sha": "c1d621a1d166de8867a576b11ce57494336256f5", "filename": "gcc/insn-notes.def", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5619e52cfbe12a8a664ef49ef44043a739b54880/gcc%2Finsn-notes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5619e52cfbe12a8a664ef49ef44043a739b54880/gcc%2Finsn-notes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finsn-notes.def?ref=5619e52cfbe12a8a664ef49ef44043a739b54880", "patch": "@@ -36,6 +36,10 @@ INSN_NOTE (DELETED)\n \n /* Generated in place of user-declared labels when they are deleted.  */\n INSN_NOTE (DELETED_LABEL)\n+/* Similarly, but for labels that have been present in debug stmts\n+   earlier and thus will only appear with -g.  These must use different\n+   label namespace.  */\n+INSN_NOTE (DELETED_DEBUG_LABEL)\n \n /* These are used to mark the beginning and end of a lexical block.\n    See NOTE_BLOCK and reorder_blocks.  */"}, {"sha": "9bd8621c4edd6f0bfda0c4559e45c8214ef4689c", "filename": "gcc/print-rtl.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5619e52cfbe12a8a664ef49ef44043a739b54880/gcc%2Fprint-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5619e52cfbe12a8a664ef49ef44043a739b54880/gcc%2Fprint-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-rtl.c?ref=5619e52cfbe12a8a664ef49ef44043a739b54880", "patch": "@@ -283,6 +283,7 @@ print_rtx (const_rtx in_rtx)\n \t        }\n \n \t      case NOTE_INSN_DELETED_LABEL:\n+\t      case NOTE_INSN_DELETED_DEBUG_LABEL:\n \t\t{\n \t\t  const char *label = NOTE_DELETED_LABEL_NAME (in_rtx);\n \t\t  if (label)\n@@ -442,7 +443,8 @@ print_rtx (const_rtx in_rtx)\n \t  {\n \t    /* This field is only used for NOTE_INSN_DELETED_LABEL, and\n \t       other times often contains garbage from INSN->NOTE death.  */\n-\t    if (NOTE_KIND (in_rtx) == NOTE_INSN_DELETED_LABEL)\n+\t    if (NOTE_KIND (in_rtx) == NOTE_INSN_DELETED_LABEL\n+\t\t|| NOTE_KIND (in_rtx) == NOTE_INSN_DELETED_DEBUG_LABEL)\n \t      fprintf (outfile, \" %d\",  XINT (in_rtx, i));\n \t  }\n #if !defined(GENERATOR_FILE) && NUM_UNSPECV_VALUES > 0"}, {"sha": "28aea2f69332b99840c0e28b490a650b91eff23c", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5619e52cfbe12a8a664ef49ef44043a739b54880/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5619e52cfbe12a8a664ef49ef44043a739b54880/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=5619e52cfbe12a8a664ef49ef44043a739b54880", "patch": "@@ -1454,8 +1454,8 @@ gimple_can_merge_blocks_p (basic_block a, basic_block b)\n \tbreak;\n       lab = gimple_label_label (stmt);\n \n-      /* Do not remove user labels.  */\n-      if (!DECL_ARTIFICIAL (lab))\n+      /* Do not remove user forced labels.  */\n+      if (!DECL_ARTIFICIAL (lab) && FORCED_LABEL (lab))\n \treturn false;\n     }\n \n@@ -1701,6 +1701,15 @@ gimple_merge_blocks (basic_block a, basic_block b)\n \t      gimple_stmt_iterator dest_gsi = gsi_start_bb (a);\n \t      gsi_insert_before (&dest_gsi, stmt, GSI_NEW_STMT);\n \t    }\n+\t  /* Other user labels keep around in a form of a debug stmt.  */\n+\t  else if (!DECL_ARTIFICIAL (label) && MAY_HAVE_DEBUG_STMTS)\n+\t    {\n+\t      gimple dbg = gimple_build_debug_bind (label,\n+\t\t\t\t\t\t    integer_zero_node,\n+\t\t\t\t\t\t    stmt);\n+\t      gimple_debug_bind_reset_value (dbg);\n+\t      gsi_insert_before (&gsi, dbg, GSI_SAME_STMT);\n+\t    }\n \n \t  lp_nr = EH_LANDING_PAD_NR (label);\n \t  if (lp_nr)\n@@ -5207,6 +5216,12 @@ gimple_duplicate_bb (basic_block bb)\n       if (gimple_code (stmt) == GIMPLE_LABEL)\n \tcontinue;\n \n+      /* Don't duplicate label debug stmts.  */\n+      if (gimple_debug_bind_p (stmt)\n+\t  && TREE_CODE (gimple_debug_bind_get_var (stmt))\n+\t     == LABEL_DECL)\n+\tcontinue;\n+\n       /* Create a new copy of STMT and duplicate STMT's virtual\n \t operands.  */\n       copy = gimple_copy (stmt);"}, {"sha": "95bc02b183c6bd819f92f664190326ede1f353a4", "filename": "gcc/var-tracking.c", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5619e52cfbe12a8a664ef49ef44043a739b54880/gcc%2Fvar-tracking.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5619e52cfbe12a8a664ef49ef44043a739b54880/gcc%2Fvar-tracking.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvar-tracking.c?ref=5619e52cfbe12a8a664ef49ef44043a739b54880", "patch": "@@ -9517,6 +9517,12 @@ vt_initialize (void)\n   return true;\n }\n \n+/* This is *not* reset after each function.  It gives each\n+   NOTE_INSN_DELETED_DEBUG_LABEL in the entire compilation\n+   a unique label number.  */\n+\n+static int debug_label_num = 1;\n+\n /* Get rid of all debug insns from the insn stream.  */\n \n static void\n@@ -9532,7 +9538,22 @@ delete_debug_insns (void)\n     {\n       FOR_BB_INSNS_SAFE (bb, insn, next)\n \tif (DEBUG_INSN_P (insn))\n-\t  delete_insn (insn);\n+\t  {\n+\t    tree decl = INSN_VAR_LOCATION_DECL (insn);\n+\t    if (TREE_CODE (decl) == LABEL_DECL\n+\t\t&& DECL_NAME (decl)\n+\t\t&& !DECL_RTL_SET_P (decl))\n+\t      {\n+\t\tPUT_CODE (insn, NOTE);\n+\t\tNOTE_KIND (insn) = NOTE_INSN_DELETED_DEBUG_LABEL;\n+\t\tNOTE_DELETED_LABEL_NAME (insn)\n+\t\t  = IDENTIFIER_POINTER (DECL_NAME (decl));\n+\t\tSET_DECL_RTL (decl, insn);\n+\t\tCODE_LABEL_NUMBER (insn) = debug_label_num++;\n+\t      }\n+\t    else\n+\t      delete_insn (insn);\n+\t  }\n     }\n }\n "}]}