{"sha": "56b7c17e4966ca659a04153a62427eaf8895e3ad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTZiN2MxN2U0OTY2Y2E2NTlhMDQxNTNhNjI0MjdlYWY4ODk1ZTNhZA==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1993-04-25T21:24:15Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1993-04-25T21:24:15Z"}, "message": "(create_reg_dead_note): Rewrite so as to conserve registers killed not number of REG_DEAD notes.\n\n(create_reg_dead_note): Rewrite so as to conserve\nregisters killed not number of REG_DEAD notes.\n(schedule_block): Change comments about dead_notes variable.\n\nFrom-SVN: r4222", "tree": {"sha": "c3e074bef046c62bc6d26b8966e0ffb947006e77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c3e074bef046c62bc6d26b8966e0ffb947006e77"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/56b7c17e4966ca659a04153a62427eaf8895e3ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56b7c17e4966ca659a04153a62427eaf8895e3ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56b7c17e4966ca659a04153a62427eaf8895e3ad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56b7c17e4966ca659a04153a62427eaf8895e3ad/comments", "author": null, "committer": null, "parents": [{"sha": "51f0e748faaeb6f31deb2a8c38dd2b235fbdb137", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51f0e748faaeb6f31deb2a8c38dd2b235fbdb137", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51f0e748faaeb6f31deb2a8c38dd2b235fbdb137"}], "stats": {"total": 54, "additions": 47, "deletions": 7}, "files": [{"sha": "434f768aaaba6564ecd1fc725030af5032ff3d91", "filename": "gcc/sched.c", "status": "modified", "additions": 47, "deletions": 7, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56b7c17e4966ca659a04153a62427eaf8895e3ad/gcc%2Fsched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56b7c17e4966ca659a04153a62427eaf8895e3ad/gcc%2Fsched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched.c?ref=56b7c17e4966ca659a04153a62427eaf8895e3ad", "patch": "@@ -2508,12 +2508,19 @@ static void\n create_reg_dead_note (reg, insn)\n      rtx reg, insn;\n {\n-  rtx link = dead_notes;\n+  rtx link, backlink;\n \t\t\n-  if (link == 0)\n-    /* In theory, we should not end up with more REG_DEAD reg notes than we\n-       started with.  In practice, this can occur as the result of bugs in\n-       flow, combine and/or sched.  */\n+  /* The number of registers killed after scheduling must be the same as the\n+     number of registers killed before scheduling.  The number of REG_DEAD\n+     notes may not be conserved, i.e. two SImode hard register REG_DEAD notes\n+     might become one DImode hard register REG_DEAD note, but the number of\n+     registers killed will be conserved.\n+     \n+     We carefully remove REG_DEAD notes from the dead_notes list, so that\n+     there will be none left at the end.  If we run out early, then there\n+     is a bug somewhere in flow, combine and/or sched.  */\n+\n+  if (dead_notes == 0)\n     {\n #if 1\n       abort ();\n@@ -2523,7 +2530,40 @@ create_reg_dead_note (reg, insn)\n #endif\n     }\n   else\n-    dead_notes = XEXP (dead_notes, 1);\n+    {\n+      /* Number of regs killed by REG.  */\n+      int regs_killed = (REGNO (reg) >= FIRST_PSEUDO_REGISTER ? 1\n+\t\t\t : HARD_REGNO_NREGS (REGNO (reg), GET_MODE (reg)));\n+      /* Number of regs killed by REG_DEAD notes taken off the list.  */\n+      int reg_note_regs;\n+\n+      link = dead_notes;\n+      reg_note_regs = (REGNO (XEXP (link, 0)) >= FIRST_PSEUDO_REGISTER ? 1\n+\t\t       : HARD_REGNO_NREGS (REGNO (XEXP (link, 0)),\n+\t\t\t\t\t   GET_MODE (XEXP (link, 0))));\n+      while (reg_note_regs < regs_killed)\n+\t{\n+\t  link = XEXP (link, 1);\n+\t  reg_note_regs += (REGNO (XEXP (link, 0)) >= FIRST_PSEUDO_REGISTER ? 1\n+\t\t\t    : HARD_REGNO_NREGS (REGNO (XEXP (link, 0)),\n+\t\t\t\t\t\tGET_MODE (XEXP (link, 0))));\n+\t}\n+      dead_notes = XEXP (link, 1);\n+\n+      /* If we took too many regs kills off, put the extra ones back.  */\n+      while (reg_note_regs > regs_killed)\n+\t{\n+\t  rtx temp_reg, temp_link;\n+\n+\t  temp_reg = gen_rtx (REG, word_mode, 0);\n+\t  temp_link = rtx_alloc (EXPR_LIST);\n+\t  PUT_REG_NOTE_KIND (temp_link, REG_DEAD);\n+\t  XEXP (temp_link, 0) = temp_reg;\n+\t  XEXP (temp_link, 1) = dead_notes;\n+\t  dead_notes = temp_link;\n+\t  reg_note_regs--;\n+\t}\n+    }\n \n   XEXP (link, 0) = reg;\n   XEXP (link, 1) = REG_NOTES (insn);\n@@ -3654,7 +3694,7 @@ schedule_block (b, file)\n       head = note_head;\n     }\n \n-  /* In theory, there should be no REG_DEAD notes leftover at the end.\n+  /* There should be no REG_DEAD notes leftover at the end.\n      In practice, this can occur as the result of bugs in flow, combine.c,\n      and/or sched.c.  The values of the REG_DEAD notes remaining are\n      meaningless, because dead_notes is just used as a free list.  */"}]}