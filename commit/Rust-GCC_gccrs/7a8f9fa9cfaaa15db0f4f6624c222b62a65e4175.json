{"sha": "7a8f9fa9cfaaa15db0f4f6624c222b62a65e4175", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2E4ZjlmYTljZmFhYTE1ZGIwZjRmNjYyNGMyMjJiNjJhNjVlNDE3NQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1999-05-16T20:40:00Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1999-05-16T20:40:00Z"}, "message": "decl2.c (finish_objects): Don't use .?tors.* if we don't have ASM_OUTPUT_CONSTRUCTOR.\n\n\t* decl2.c (finish_objects): Don't use .?tors.* if we don't have\n\tASM_OUTPUT_CONSTRUCTOR.\n\t* friend.c (do_friend): Add attrlist arg.  Remove support for\n\tgetting a non-decl as 'decl'.\n\t* decl.c (grokfndecl): Remove attrlist arg.  Don't set attrs or\n\trtl.\n\t(grokdeclarator): Adjust.\n\t* cp-tree.h: Adjust.\n\t* parse.y (direct_new_declarator): Make the first one a\n\tnonmomentary_expr, too.\n\t* init.c (build_new): suspend_momentary while we're calculating\n\tthe size.\n\t(build_new_1): Don't copy size.\n\nFrom-SVN: r26952", "tree": {"sha": "fcb941de71b8594a9211b246fe7b2491fa4d6823", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fcb941de71b8594a9211b246fe7b2491fa4d6823"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a8f9fa9cfaaa15db0f4f6624c222b62a65e4175", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a8f9fa9cfaaa15db0f4f6624c222b62a65e4175", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a8f9fa9cfaaa15db0f4f6624c222b62a65e4175", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a8f9fa9cfaaa15db0f4f6624c222b62a65e4175/comments", "author": null, "committer": null, "parents": [{"sha": "88b117b74048dfb8fab4ba46a44da3ac995f597b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88b117b74048dfb8fab4ba46a44da3ac995f597b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88b117b74048dfb8fab4ba46a44da3ac995f597b"}], "stats": {"total": 1660, "additions": 829, "deletions": 831}, "files": [{"sha": "f0429a1411ef62c9f76151f27450a86381a22555", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a8f9fa9cfaaa15db0f4f6624c222b62a65e4175/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a8f9fa9cfaaa15db0f4f6624c222b62a65e4175/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7a8f9fa9cfaaa15db0f4f6624c222b62a65e4175", "patch": "@@ -1,3 +1,21 @@\n+1999-05-16  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* decl2.c (finish_objects): Don't use .?tors.* if we don't have\n+\tASM_OUTPUT_CONSTRUCTOR.\n+\n+\t* friend.c (do_friend): Add attrlist arg.  Remove support for\n+\tgetting a non-decl as 'decl'.\n+\t* decl.c (grokfndecl): Remove attrlist arg.  Don't set attrs or\n+\trtl.\n+\t(grokdeclarator): Adjust.\n+\t* cp-tree.h: Adjust.\n+\n+\t* parse.y (direct_new_declarator): Make the first one a\n+\tnonmomentary_expr, too.\n+\t* init.c (build_new): suspend_momentary while we're calculating\n+\tthe size.\n+\t(build_new_1): Don't copy size.\n+\n 1999-05-16  Mark Mitchell  <mark@codesourcery.com>\n \n \t* cp-tree.h (permanent_p): New function.\n@@ -209,7 +227,7 @@ Wed Apr 28 11:42:22 1999  Andreas Schwab  <schwab@issan.cs.uni-dortmund.de>\n \t* cp-tree.h (lang_decl_flags): Remove returns_first_arg and\n \tpreserves_first_arg.  Enlarge dummy accordingly.\n \t(DECL_TINFO_FN_P): New macro.\n-\t(SET_DECL_TINO_FN_P): Likeiwse.\n+\t(SET_DECL_TINFO_FN_P): Likeiwse.\n \t(DECL_RETURNS_FIRST_ARG): Remove.\n \t(DECL_PRESERVES_THIS): Likewise.\n \t(DECL_INIT_PRIORITY): New macro."}, {"sha": "249808974c0a4add1a1ca6fa867a827c50e826c8", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a8f9fa9cfaaa15db0f4f6624c222b62a65e4175/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a8f9fa9cfaaa15db0f4f6624c222b62a65e4175/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=7a8f9fa9cfaaa15db0f4f6624c222b62a65e4175", "patch": "@@ -3016,7 +3016,7 @@ extern int is_friend\t\t\t\tPROTO((tree, tree));\n extern void make_friend_class\t\t\tPROTO((tree, tree));\n extern void add_friend                          PROTO((tree, tree));\n extern void add_friends                         PROTO((tree, tree, tree));\n-extern tree do_friend\t\t\t\tPROTO((tree, tree, tree, tree, enum overload_flags, tree, int));\n+extern tree do_friend\t\t\t\tPROTO((tree, tree, tree, tree, tree, enum overload_flags, tree, int));\n \n /* in init.c */\n extern void init_init_processing\t\tPROTO((void));"}, {"sha": "9df5474c1e479516ddda90c8683f3c7643372549", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a8f9fa9cfaaa15db0f4f6624c222b62a65e4175/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a8f9fa9cfaaa15db0f4f6624c222b62a65e4175/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=7a8f9fa9cfaaa15db0f4f6624c222b62a65e4175", "patch": "@@ -161,7 +161,7 @@ static void warn_extern_redeclared_static PROTO((tree, tree));\n static void grok_reference_init PROTO((tree, tree, tree));\n static tree grokfndecl PROTO((tree, tree, tree, tree, int,\n \t\t\t      enum overload_flags, tree,\n-\t\t\t      tree, tree, int, int, int, int, int, int, tree));\n+\t\t\t      tree, int, int, int, int, int, int, tree));\n static tree grokvardecl PROTO((tree, tree, RID_BIT_TYPE *, int, int, tree));\n static tree lookup_tag PROTO((enum tree_code, tree,\n \t\t\t      struct binding_level *, int));\n@@ -8697,14 +8697,14 @@ bad_specifiers (object, type, virtualp, quals, inlinep, friendp, raises)\n \n static tree\n grokfndecl (ctype, type, declarator, orig_declarator, virtualp, flags, quals,\n-\t    raises, attrlist, check, friendp, publicp, inlinep, funcdef_flag,\n+\t    raises, check, friendp, publicp, inlinep, funcdef_flag,\n \t    template_count, in_namespace)\n      tree ctype, type;\n      tree declarator;\n      tree orig_declarator;\n      int virtualp;\n      enum overload_flags flags;\n-     tree quals, raises, attrlist;\n+     tree quals, raises;\n      int check, friendp, publicp, inlinep, funcdef_flag, template_count;\n      tree in_namespace;\n {\n@@ -8868,10 +8868,6 @@ grokfndecl (ctype, type, declarator, orig_declarator, virtualp, flags, quals,\n        tentative.  error_mark_node is replaced later with the BLOCK.  */\n     DECL_INITIAL (decl) = error_mark_node;\n \n-  if (attrlist)\n-    cplus_decl_attributes (decl, TREE_PURPOSE (attrlist), \n-\t\t\t   TREE_VALUE (attrlist));\n-\n   /* Caller will do the rest of this.  */\n   if (check < 0)\n     return decl;\n@@ -8964,8 +8960,6 @@ grokfndecl (ctype, type, declarator, orig_declarator, virtualp, flags, quals,\n       if (ctype == NULL_TREE || check)\n \treturn decl;\n \n-      make_decl_rtl (decl, NULL_PTR, 1);\n-\n       if (virtualp)\n \t{\n \t  DECL_VIRTUAL_P (decl) = 1;\n@@ -11306,7 +11300,7 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n \t\t\t       TREE_CODE (declarator) != TEMPLATE_ID_EXPR\n \t\t\t       ? declarator : dname,\n \t\t\t       declarator,\n-\t\t\t       virtualp, flags, quals, raises, attrlist,\n+\t\t\t       virtualp, flags, quals, raises,\n \t\t\t       friendp ? -1 : 0, friendp, publicp, inlinep,\n \t\t\t       funcdef_flag, template_count, in_namespace);\n \t    if (decl == NULL_TREE)\n@@ -11356,7 +11350,7 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n \t    /* All method decls are public, so tell grokfndecl to set\n \t       TREE_PUBLIC, also.  */\n \t    decl = grokfndecl (ctype, type, declarator, declarator,\n-\t\t\t       virtualp, flags, quals, raises, attrlist,\n+\t\t\t       virtualp, flags, quals, raises,\n \t\t\t       friendp ? -1 : 0, friendp, 1, 0, funcdef_flag,\n \t\t\t       template_count, in_namespace);\n \t    if (decl == NULL_TREE)\n@@ -11416,7 +11410,7 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n \t\t      }\n \n \t\t    t = do_friend (ctype, declarator, decl,\n-\t\t\t\t   last_function_parms, flags, quals,\n+\t\t\t\t   last_function_parms, attrlist, flags, quals,\n \t\t\t\t   funcdef_flag);\n \t\t  }\n \t\tif (t && funcdef_flag)\n@@ -11549,7 +11543,7 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n \t\t   || !RIDBIT_SETP (RID_STATIC, specbits));\n \n \tdecl = grokfndecl (ctype, type, original_name, declarator,\n-\t\t\t   virtualp, flags, quals, raises, attrlist,\n+\t\t\t   virtualp, flags, quals, raises,\n \t\t\t   1, friendp,\n \t\t\t   publicp, inlinep, funcdef_flag, \n \t\t\t   template_count, in_namespace);"}, {"sha": "6a7e14f7a25f0b057ee377122ab0768dd705eb30", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a8f9fa9cfaaa15db0f4f6624c222b62a65e4175/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a8f9fa9cfaaa15db0f4f6624c222b62a65e4175/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=7a8f9fa9cfaaa15db0f4f6624c222b62a65e4175", "patch": "@@ -2950,7 +2950,7 @@ finish_objects (method_type, initp)\n \tassemble_destructor (fnname);\n     }\n \n-#ifdef ASM_OUTPUT_SECTION_NAME\n+#if defined (ASM_OUTPUT_SECTION_NAME) && defined (ASM_OUTPUT_CONSTRUCTOR)\n   /* If we're using init priority we can't use assemble_*tor, but on ELF\n      targets we can stick the references into named sections for GNU ld\n      to collect.  */"}, {"sha": "5085ebc7747c265dd58841676b7d40c91343315b", "filename": "gcc/cp/friend.c", "status": "modified", "additions": 51, "deletions": 69, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a8f9fa9cfaaa15db0f4f6624c222b62a65e4175/gcc%2Fcp%2Ffriend.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a8f9fa9cfaaa15db0f4f6624c222b62a65e4175/gcc%2Fcp%2Ffriend.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ffriend.c?ref=7a8f9fa9cfaaa15db0f4f6624c222b62a65e4175", "patch": "@@ -330,13 +330,15 @@ make_friend_class (type, friend_type)\n    pointed to by `this'.  */\n \n tree\n-do_friend (ctype, declarator, decl, parmdecls, flags, quals, funcdef_flag)\n-     tree ctype, declarator, decl, parmdecls;\n+do_friend (ctype, declarator, decl, parmdecls, attrlist,\n+\t   flags, quals, funcdef_flag)\n+     tree ctype, declarator, decl, parmdecls, attrlist;\n      enum overload_flags flags;\n      tree quals;\n      int funcdef_flag;\n {\n   int is_friend_template = 0;\n+  tree prefix_attributes, attributes;\n \n   /* Every decl that gets here is a friend of something.  */\n   DECL_FRIEND_P (decl) = 1;\n@@ -350,8 +352,10 @@ do_friend (ctype, declarator, decl, parmdecls, flags, quals, funcdef_flag)\n \tdeclarator = DECL_NAME (get_first_fn (declarator));\n     }\n \n-  if (TREE_CODE (decl) == FUNCTION_DECL)\n-    is_friend_template = PROCESSING_REAL_TEMPLATE_DECL_P ();\n+  if (TREE_CODE (decl) != FUNCTION_DECL)\n+    my_friendly_abort (990513);\n+\n+  is_friend_template = PROCESSING_REAL_TEMPLATE_DECL_P ();\n \n   if (ctype)\n     {\n@@ -360,53 +364,35 @@ do_friend (ctype, declarator, decl, parmdecls, flags, quals, funcdef_flag)\n \tcname = DECL_NAME (cname);\n \n       /* A method friend.  */\n-      if (TREE_CODE (decl) == FUNCTION_DECL)\n+      if (flags == NO_SPECIAL && ctype && declarator == cname)\n+\tDECL_CONSTRUCTOR_P (decl) = 1;\n+\n+      /* This will set up DECL_ARGUMENTS for us.  */\n+      grokclassfn (ctype, decl, flags, quals);\n+\n+      if (is_friend_template)\n+\tdecl = DECL_TI_TEMPLATE (push_template_decl (decl));\n+      else if (template_class_depth (current_class_type))\n+\tdecl = push_template_decl_real (decl, /*is_friend=*/1);\n+\n+      /* We can't do lookup in a type that involves template\n+\t parameters.  Instead, we rely on tsubst_friend_function\n+\t to check the validity of the declaration later.  */\n+      if (uses_template_parms (ctype))\n+\tadd_friend (current_class_type, decl);\n+      /* A nested class may declare a member of an enclosing class\n+\t to be a friend, so we do lookup here even if CTYPE is in\n+\t the process of being defined.  */\n+      else if (TYPE_SIZE (ctype) != 0 || TYPE_BEING_DEFINED (ctype))\n \t{\n-\t  if (flags == NO_SPECIAL && ctype && declarator == cname)\n-\t    DECL_CONSTRUCTOR_P (decl) = 1;\n-\n-\t  /* This will set up DECL_ARGUMENTS for us.  */\n-\t  grokclassfn (ctype, decl, flags, quals);\n-\n-\t  if (is_friend_template)\n-\t    decl = DECL_TI_TEMPLATE (push_template_decl (decl));\n-\t  else if (template_class_depth (current_class_type))\n-\t    decl = push_template_decl_real (decl, /*is_friend=*/1);\n+\t  decl = check_classfn (ctype, decl);\n \n-\t  /* We can't do lookup in a type that involves template\n-\t     parameters.  Instead, we rely on tsubst_friend_function\n-\t     to check the validity of the declaration later.  */\n-\t  if (uses_template_parms (ctype))\n+\t  if (decl)\n \t    add_friend (current_class_type, decl);\n-\t  /* A nested class may declare a member of an enclosing class\n-\t     to be a friend, so we do lookup here even if CTYPE is in\n-\t     the process of being defined.  */\n-\t  else if (TYPE_SIZE (ctype) != 0 || TYPE_BEING_DEFINED (ctype))\n-\t    {\n-\t      decl = check_classfn (ctype, decl);\n-\n-\t      if (decl)\n-\t\tadd_friend (current_class_type, decl);\n-\t    }\n-\t  else\n-\t    cp_error (\"member `%D' declared as friend before type `%T' defined\",\n-\t\t      decl, ctype);\n \t}\n       else\n-\t{\n-\t  /* Possibly a bunch of method friends.  */\n-\n-\t  /* Get the class they belong to.  */\n-\t  tree ctype = IDENTIFIER_TYPE_VALUE (cname);\n-\t  tree fields = lookup_fnfields (TYPE_BINFO (ctype), declarator, 0);\n-\n-\t  if (fields)\n-\t    add_friends (current_class_type, declarator, ctype);\n-\t  else\n-\t    cp_error (\"method `%D' is not a member of class `%T'\",\n-\t\t      declarator, ctype);\n-\t  decl = void_type_node;\n-\t}\n+\tcp_error (\"member `%D' declared as friend before type `%T' defined\",\n+\t\t  decl, ctype);\n     }\n   /* A global friend.\n      @@ or possibly a friend from a base class ?!?  */\n@@ -459,32 +445,28 @@ do_friend (ctype, declarator, decl, parmdecls, flags, quals, funcdef_flag)\n \t\t  is_friend_template ? DECL_TI_TEMPLATE (decl) : decl);\n       DECL_FRIEND_P (decl) = 1;\n     }\n+\n+  /* Unfortunately, we have to handle attributes here.  Normally we would\n+     handle them in start_decl_1, but since this is a friend decl start_decl_1\n+     never gets to see it.  */\n+\n+  if (attrlist)\n+    {\n+      attributes = TREE_PURPOSE (attrlist);\n+      prefix_attributes = TREE_VALUE (attrlist);\n+    }\n   else\n     {\n-      /* @@ Should be able to ingest later definitions of this function\n-\t before use.  */\n-      tree decl = lookup_name_nonclass (declarator);\n-      if (decl == NULL_TREE)\n-\t{\n-\t  cp_warning (\"implicitly declaring `%T' as struct\", declarator);\n-\t  decl = xref_tag (record_type_node, declarator, 1);\n-\t  decl = TYPE_MAIN_DECL (decl);\n-\t}\n+      attributes = NULL_TREE;\n+      prefix_attributes = NULL_TREE;\n+    } \n \n-      /* Allow abbreviated declarations of overloaded functions,\n-\t but not if those functions are really class names.  */\n-      if (TREE_CODE (decl) == TREE_LIST && TREE_TYPE (TREE_PURPOSE (decl)))\n-\t{\n-\t  cp_warning (\"`friend %T' archaic, use `friend class %T' instead\",\n-\t\t      declarator, declarator);\n-\t  decl = TREE_TYPE (TREE_PURPOSE (decl));\n-\t}\n+#ifdef SET_DEFAULT_DECL_ATTRIBUTES\n+  SET_DEFAULT_DECL_ATTRIBUTES (decl, attributes);\n+#endif\n+  \n+  /* Set attributes here so if duplicate decl, will have proper attributes.  */\n+  cplus_decl_attributes (decl, attributes, prefix_attributes);\n \n-      if (TREE_CODE (decl) == TREE_LIST)\n-\tadd_friends (current_class_type, TREE_PURPOSE (decl), NULL_TREE);\n-      else\n-\tmake_friend_class (current_class_type, TREE_TYPE (decl));\n-      decl = void_type_node;\n-    }\n   return decl;\n }"}, {"sha": "aab25c3bf267a9a169bdb43d6842b4ecdcc7da03", "filename": "gcc/cp/init.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a8f9fa9cfaaa15db0f4f6624c222b62a65e4175/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a8f9fa9cfaaa15db0f4f6624c222b62a65e4175/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=7a8f9fa9cfaaa15db0f4f6624c222b62a65e4175", "patch": "@@ -1893,6 +1893,7 @@ build_new (placement, decl, init, use_global_new)\n   tree type, rval;\n   tree nelts = NULL_TREE, t;\n   int has_array = 0;\n+  int momentary;\n \n   tree pending_sizes = NULL_TREE;\n \n@@ -1952,6 +1953,9 @@ build_new (placement, decl, init, use_global_new)\n \t\t      == NULL_TREE)\n \t\t    pedwarn (\"size in array new must have integral type\");\n \n+\t\t  /* The size must live long so it can be used in a\n+\t\t     cleanup.  */\n+\t\t  momentary = suspend_momentary ();\n \t\t  this_nelts = save_expr (cp_convert (sizetype, this_nelts));\n \t\t  absdcl = TREE_OPERAND (absdcl, 0);\n \t          if (this_nelts == integer_zero_node)\n@@ -1961,6 +1965,7 @@ build_new (placement, decl, init, use_global_new)\n \t\t    }\n \t\t  else\n \t\t    nelts = build_binary_op (MULT_EXPR, nelts, this_nelts);\n+\t\t  resume_momentary (momentary);\n \t\t}\n \t    }\n \t  else\n@@ -2046,7 +2051,9 @@ build_new (placement, decl, init, use_global_new)\n      both new int and new int[10] return an int*.  5.3.4.  */\n   if (TREE_CODE (type) == ARRAY_TYPE && has_array == 0)\n     {\n+      momentary = suspend_momentary ();\n       nelts = array_type_nelts_top (type);\n+      resume_momentary (momentary);\n       has_array = 1;\n       type = TREE_TYPE (type);\n     }\n@@ -2429,9 +2436,6 @@ build_new_1 (exp)\n \t      fn = TREE_OPERAND (fn, 0);\n \t    }\n \n-\t  /* Copy size to the saveable obstack.  */\n-\t  size = mapcar (size, permanent_p);\n-\n \t  cleanup = build_op_delete_call (dcode, alloc_node, size, flags, fn);\n \n \t  resume_momentary (yes);"}, {"sha": "913b3238cd4323356fd536db4e8c2440e53ba17c", "filename": "gcc/cp/parse.c", "status": "modified", "additions": 742, "deletions": 742, "changes": 1484, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a8f9fa9cfaaa15db0f4f6624c222b62a65e4175/gcc%2Fcp%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a8f9fa9cfaaa15db0f4f6624c222b62a65e4175/gcc%2Fcp%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.c?ref=7a8f9fa9cfaaa15db0f4f6624c222b62a65e4175"}, {"sha": "c51b989130be77b6f5548812f59f02e326b74435", "filename": "gcc/cp/parse.y", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a8f9fa9cfaaa15db0f4f6624c222b62a65e4175/gcc%2Fcp%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a8f9fa9cfaaa15db0f4f6624c222b62a65e4175/gcc%2Fcp%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.y?ref=7a8f9fa9cfaaa15db0f4f6624c222b62a65e4175", "patch": "@@ -3123,7 +3123,7 @@ new_declarator:\n \n /* ANSI direct-new-declarator (5.3.4) */\n direct_new_declarator:\n-\t  '[' expr ']'\n+\t  '[' nonmomentary_expr ']'\n \t\t{ $$ = build_parse_node (ARRAY_REF, NULL_TREE, $2); }\n \t| direct_new_declarator '[' nonmomentary_expr ']'\n \t\t{ $$ = build_parse_node (ARRAY_REF, $$, $3); }"}]}