{"sha": "d7d01975ad2e01f5ac4dfd5670687eaf2a98574a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDdkMDE5NzVhZDJlMDFmNWFjNGRmZDU2NzA2ODdlYWYyYTk4NTc0YQ==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@cygnus.com", "date": "2000-03-15T22:06:16Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2000-03-15T22:06:16Z"}, "message": "Fix gcc tescase compile/990527-1.c by not passing %c to asm_fprintf\n\nFrom-SVN: r32569", "tree": {"sha": "9bcee37402c5d6d38bfd7815427d4aad3731dfd7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9bcee37402c5d6d38bfd7815427d4aad3731dfd7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d7d01975ad2e01f5ac4dfd5670687eaf2a98574a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7d01975ad2e01f5ac4dfd5670687eaf2a98574a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7d01975ad2e01f5ac4dfd5670687eaf2a98574a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7d01975ad2e01f5ac4dfd5670687eaf2a98574a/comments", "author": null, "committer": null, "parents": [{"sha": "e576beb079bada056d6c72eabf54701535c4772b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e576beb079bada056d6c72eabf54701535c4772b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e576beb079bada056d6c72eabf54701535c4772b"}], "stats": {"total": 89, "additions": 63, "deletions": 26}, "files": [{"sha": "4d39894df7f604952387dd78e95f2af12c04c064", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7d01975ad2e01f5ac4dfd5670687eaf2a98574a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7d01975ad2e01f5ac4dfd5670687eaf2a98574a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d7d01975ad2e01f5ac4dfd5670687eaf2a98574a", "patch": "@@ -1,3 +1,8 @@\n+2000-03-15  Nick Clifton  <nickc@cygnus.com>\n+\n+\t* config/arm/arm.c (arm_output_epilogue): Do not pass %c to\n+\tasm_fprintf().\n+\n 2000-03-15  Zack Weinberg  <zack@wolery.cumb.org>\n \n \t* cppfiles.c (open_include_file): New function."}, {"sha": "5081775579495559caacb79228a2a0cd41178741", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 58, "deletions": 26, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7d01975ad2e01f5ac4dfd5670687eaf2a98574a/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7d01975ad2e01f5ac4dfd5670687eaf2a98574a/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=d7d01975ad2e01f5ac4dfd5670687eaf2a98574a", "patch": "@@ -497,6 +497,12 @@ arm_override_options ()\n   if (write_symbols != NO_DEBUG && flag_omit_frame_pointer)\n     warning (\"-g with -fomit-frame-pointer may not give sensible debugging\");\n   \n+  if (TARGET_BUGGY_RETURN_IN_MEMORY && TARGET_ATPCS)\n+    {\n+      warning (\"-mbuggy-return-in-memory is overriden by -matpcs.\");\n+      target_flags &= ~ARM_FLAG_BUGGY_RETURN_IN_MEMORY;\n+    }\n+  \n   /* If stack checking is disabled, we can use r10 as the PIC register,\n      which keeps r9 available.  */\n   if (flag_pic && ! TARGET_APCS_STACK)\n@@ -1393,16 +1399,19 @@ arm_return_in_memory (type)\n      tree type;\n {\n   if (! AGGREGATE_TYPE_P (type))\n-    {\n-      /* All simple types are returned in registers. */\n-      return 0;\n-    }\n-  else if (int_size_in_bytes (type) > 4)\n-    {\n-      /* All structures/unions bigger than one word are returned in memory. */\n-      return 1;\n-    }\n-  else if (TREE_CODE (type) == RECORD_TYPE)\n+    /* All simple types are returned in registers. */\n+    return 0;\n+\n+  if (int_size_in_bytes (type) > 4)\n+    /* All structures/unions bigger than one word are returned in memory. */\n+    return 1;\n+\n+  if (TARGET_ATPCS)\n+    /* The ATPCS says that any structure or union of no larger than\n+       one word is returned in a register.  */\n+    return 0;\n+  \n+  if (TREE_CODE (type) == RECORD_TYPE)\n     {\n       tree field;\n \n@@ -1424,13 +1433,21 @@ arm_return_in_memory (type)\n \n       /* Check that the first field is valid for returning in a register...  */\n \n-      /* ... Floats are not allowed */\n-      if (FLOAT_TYPE_P (TREE_TYPE (field)))\n+      /* The APCS only says that the structrue must be integer-like.  It\n+\t does not say that it may not contain integer values.  Thus\n+\t struct { float a; } should be returned in a register.  Earlier\n+\t implementations got this wrong.  */\n+      if (TARGET_BUGGY_RETURN_IN_MEMORY\n+\t  && FLOAT_TYPE_P (TREE_TYPE (field)))\n \treturn 1;\n \n-      /* ... Aggregates that are not themselves valid for returning in\n-\t a register are not allowed.  */\n-      if (RETURN_IN_MEMORY (TREE_TYPE (field)))\n+      /* Similarly the APCS only insists that all the sub-fields of a\n+\t structure be addressible.  It does not insist that if these\n+\t sub-fields themselves are structures that they also conform\n+\t to the integer-like specification.  This is another thing\n+\t that the old compiler did incorrectly.  */\n+      if (TARGET_BUGGY_RETURN_IN_MEMORY\n+\t  && RETURN_IN_MEMORY (TREE_TYPE (field)))\n \treturn 1;\n \n       /* Now check the remaining fields, if any.  Only bitfields are allowed,\n@@ -1448,7 +1465,8 @@ arm_return_in_memory (type)\n \n       return 0;\n     }\n-  else if (TREE_CODE (type) == UNION_TYPE)\n+  \n+  if (TREE_CODE (type) == UNION_TYPE)\n     {\n       tree field;\n \n@@ -1471,8 +1489,8 @@ arm_return_in_memory (type)\n       return 0;\n     }\n   \n-  /* XXX Not sure what should be done for other aggregates, so put them in\n-     memory. */\n+  /* XXX Not sure what should be done for\n+     other aggregates so put them in memory.  */\n   return 1;\n }\n \n@@ -1631,6 +1649,20 @@ arm_comp_type_attributes (type1, type2)\n   return 1;\n }\n \n+/* Check the ARM specific attributes on the given function decl.\n+   If any of them would prevent the function from being inlined,\n+   return a tesxtual description of why not.  Otherwise return NULL.  */\n+const char *\n+arm_function_attribute_inlineable_p (fndecl)\n+     tree fndecl;\n+{\n+  if (lookup_attribute (\"naked\", DECL_MACHINE_ATTRIBUTES (fndecl)))\n+    return \"naked functions cannot be inlined\";\n+\n+  /* Allow functions with short_call and long_call attributes to be inlined.  */\n+  return NULL;\n+}\n+     \n /*  Encode long_call or short_call attribute by prefixing\n     symbol name in DECL with a special character FLAG.  */\n void\n@@ -3464,17 +3496,17 @@ multi_register_push (op, mode)\n }\n \n \f\n-/* Routines for use with attributes */\n+/* Routines for use with attributes.  */\n \n /* Return nonzero if ATTR is a valid attribute for DECL.\n-   ATTRIBUTES are any existing attributes and ARGS are the arguments\n-   supplied with ATTR.\n+   ATTRIBUTES are any existing attributes and ARGS are\n+   the arguments supplied with ATTR.\n \n    Supported attributes:\n \n-   naked: don't output any prologue or epilogue code, the user is assumed\n-   to do the right thing.  */\n-\n+     naked: don't output any prologue or epilogue code,\n+            the user is assumed to do the right thing.\n+*/\n int\n arm_valid_machine_decl_attribute (decl, attr, args)\n      tree decl;\n@@ -6206,8 +6238,8 @@ arm_output_epilogue ()\n \t      asm_fprintf (f, \"\\tbx\\t%r\\n\", LR_REGNUM);\n \t    }\n \t  else if (lr_save_eliminated)\n-\t    asm_fprintf (f, \"\\tmov%c\\t%r, %r\\n\",\n-\t\t\t TARGET_APCS_32 ? ' ' : 's',\n+\t    asm_fprintf (f, \n+\t\t\t TARGET_APCS_32 ? \"\\tmov\\t%r, %r\\n\" : \"\\tmovs\\t%r, %r\\n\",\n \t\t\t PC_REGNUM, LR_REGNUM);\n \t  else\n \t    print_multi_reg (f, \"ldmfd\\t%r!\", SP_REGNUM, live_regs_mask | 0x8000,"}]}