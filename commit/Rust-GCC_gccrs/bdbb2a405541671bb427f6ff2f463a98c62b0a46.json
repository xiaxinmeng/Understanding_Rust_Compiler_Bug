{"sha": "bdbb2a405541671bb427f6ff2f463a98c62b0a46", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmRiYjJhNDA1NTQxNjcxYmI0MjdmNmZmMmY0NjNhOThjNjJiMGE0Ng==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2019-07-04T08:06:35Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-07-04T08:06:35Z"}, "message": "[Ada] Bug in composition of equality for variant records\n\nThis patch fixes an omission in the construction of equality routines\nfor variant records, to take into account user-defined equality\nfunctions for components of the record. Previously the constructed\nequality routine for variant records used the predefined equality for\nall components, When composavility of equality was introduced for\nuntagged records, expansion of record equality was modified properly,\nbut not for the case of variant records, which use a different and more\ncomplex process to build the equality function.\n\n2019-07-04  Ed Schonberg  <schonberg@adacore.com>\n\ngcc/ada/\n\n\t* exp_ch4.ads, exp_ch4.adb (Build_Eq_Call): New visible\n\tsubprogram, extracted from Expand_Composite_Equality, to handle\n\tproperly the composition of equality for variant record types.\n\t* exp_ch3.adb (MAke_Eq_If): Use Build_Eq_Call for each\n\tcomponent, to handle properly the case of a component with a\n\tuser-defined equality. Revert to predefined equality if the\n\tuser-defined operation is abstract, to maintain compatibility\n\twith older versions,\n\ngcc/testsuite/\n\n\t* gnat.dg/equal6.adb, gnat.dg/equal6_types.adb,\n\tgnat.dg/equal6_types.ads: New testcase.\n\nFrom-SVN: r273062", "tree": {"sha": "3260367cd1c04b40b87c5d06b29c5333cb04cddf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3260367cd1c04b40b87c5d06b29c5333cb04cddf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bdbb2a405541671bb427f6ff2f463a98c62b0a46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdbb2a405541671bb427f6ff2f463a98c62b0a46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bdbb2a405541671bb427f6ff2f463a98c62b0a46", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdbb2a405541671bb427f6ff2f463a98c62b0a46/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fa528281a9d056bf5beb867333ea4eea638a102d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa528281a9d056bf5beb867333ea4eea638a102d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa528281a9d056bf5beb867333ea4eea638a102d"}], "stats": {"total": 282, "additions": 223, "deletions": 59}, "files": [{"sha": "1d6d8c02109a976cf8c55d438038925eb028c1e6", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdbb2a405541671bb427f6ff2f463a98c62b0a46/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdbb2a405541671bb427f6ff2f463a98c62b0a46/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=bdbb2a405541671bb427f6ff2f463a98c62b0a46", "patch": "@@ -1,3 +1,14 @@\n+2019-07-04  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch4.ads, exp_ch4.adb (Build_Eq_Call): New visible\n+\tsubprogram, extracted from Expand_Composite_Equality, to handle\n+\tproperly the composition of equality for variant record types.\n+\t* exp_ch3.adb (MAke_Eq_If): Use Build_Eq_Call for each\n+\tcomponent, to handle properly the case of a component with a\n+\tuser-defined equality. Revert to predefined equality if the\n+\tuser-defined operation is abstract, to maintain compatibility\n+\twith older versions,\n+\n 2019-07-04  Justin Squirek  <squirek@adacore.com>\n \n \t* exp_ch3.adb (Build_Initialization_Call): Fixup"}, {"sha": "6308b42d9dbd6d8db72e2092c06ef199e3557fbc", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 52, "deletions": 11, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdbb2a405541671bb427f6ff2f463a98c62b0a46/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdbb2a405541671bb427f6ff2f463a98c62b0a46/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=bdbb2a405541671bb427f6ff2f463a98c62b0a46", "patch": "@@ -9477,6 +9477,11 @@ package body Exp_Ch3 is\n \n    --  or a null statement if the list L is empty\n \n+   --  Equality may be user-defined for a given component type, in which case\n+   --  a function call is constructed instead of an operator node. This is an\n+   --  Ada 2012 change in the composability of equality for untagged composite\n+   --  types.\n+\n    function Make_Eq_If\n      (E : Entity_Id;\n       L : List_Id) return Node_Id\n@@ -9485,6 +9490,8 @@ package body Exp_Ch3 is\n       C          : Node_Id;\n       Field_Name : Name_Id;\n       Cond       : Node_Id;\n+      Next_Test  : Node_Id;\n+      Typ        : Entity_Id;\n \n    begin\n       if No (L) then\n@@ -9495,6 +9502,7 @@ package body Exp_Ch3 is\n \n          C := First_Non_Pragma (L);\n          while Present (C) loop\n+            Typ        := Etype (Defining_Identifier (C));\n             Field_Name := Chars (Defining_Identifier (C));\n \n             --  The tags must not be compared: they are not part of the value.\n@@ -9507,22 +9515,55 @@ package body Exp_Ch3 is\n             --  discriminants could be picked up in the private type case.\n \n             if Field_Name = Name_uParent\n-              and then Is_Interface (Etype (Defining_Identifier (C)))\n+              and then Is_Interface (Typ)\n             then\n                null;\n \n             elsif Field_Name /= Name_uTag then\n-               Evolve_Or_Else (Cond,\n-                 Make_Op_Ne (Loc,\n-                   Left_Opnd =>\n-                     Make_Selected_Component (Loc,\n-                       Prefix        => Make_Identifier (Loc, Name_X),\n-                       Selector_Name => Make_Identifier (Loc, Field_Name)),\n+               declare\n+                  Lhs : constant Node_Id :=\n+                    Make_Selected_Component (Loc,\n+                      Prefix        => Make_Identifier (Loc, Name_X),\n+                      Selector_Name => Make_Identifier (Loc, Field_Name));\n \n-                   Right_Opnd =>\n-                     Make_Selected_Component (Loc,\n-                       Prefix        => Make_Identifier (Loc, Name_Y),\n-                       Selector_Name => Make_Identifier (Loc, Field_Name))));\n+                  Rhs : constant Node_Id :=\n+                    Make_Selected_Component (Loc,\n+                      Prefix        => Make_Identifier (Loc, Name_Y),\n+                      Selector_Name => Make_Identifier (Loc, Field_Name));\n+                  Eq_Call : Node_Id;\n+\n+               begin\n+                  --  Build equality code with a user-defined operator, if\n+                  --  available, and with the predefined \"=\" otherwise.\n+                  --  For compatibility with older Ada versions, and preserve\n+                  --  the workings of some ASIS tools, we also use the\n+                  --  predefined operation if the component-type equality\n+                  --  is abstract, rather than raising Program_Error.\n+\n+                  if Ada_Version < Ada_2012 then\n+                     Next_Test := Make_Op_Ne (Loc, Lhs, Rhs);\n+\n+                  else\n+                     Eq_Call := Build_Eq_Call (Typ, Loc, Lhs, Rhs);\n+\n+                     if No (Eq_Call) then\n+                        Next_Test := Make_Op_Ne (Loc, Lhs, Rhs);\n+\n+                     --  If a component has a defined abstract equality,\n+                     --  its application raises Program_Error on that\n+                     --  component and therefore on the current variant.\n+\n+                     elsif Nkind (Eq_Call) = N_Raise_Program_Error then\n+                        Set_Etype (Eq_Call, Standard_Boolean);\n+                        Next_Test := Make_Op_Not (Loc, Eq_Call);\n+\n+                     else\n+                        Next_Test := Make_Op_Not (Loc, Eq_Call);\n+                     end if;\n+                  end if;\n+               end;\n+\n+               Evolve_Or_Else (Cond, Next_Test);\n             end if;\n \n             Next_Non_Pragma (C);"}, {"sha": "cacc9d438eb8f34023f267d7db0e84dd1ee853e5", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 48, "deletions": 48, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdbb2a405541671bb427f6ff2f463a98c62b0a46/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdbb2a405541671bb427f6ff2f463a98c62b0a46/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=bdbb2a405541671bb427f6ff2f463a98c62b0a46", "patch": "@@ -2338,52 +2338,6 @@ package body Exp_Ch4 is\n       Full_Type : Entity_Id;\n       Eq_Op     : Entity_Id;\n \n-      function Find_Primitive_Eq return Node_Id;\n-      --  AI05-0123: Locate primitive equality for type if it exists, and\n-      --  build the corresponding call. If operation is abstract, replace\n-      --  call with an explicit raise. Return Empty if there is no primitive.\n-\n-      -----------------------\n-      -- Find_Primitive_Eq --\n-      -----------------------\n-\n-      function Find_Primitive_Eq return Node_Id is\n-         Prim_E : Elmt_Id;\n-         Prim   : Node_Id;\n-\n-      begin\n-         Prim_E := First_Elmt (Collect_Primitive_Operations (Typ));\n-         while Present (Prim_E) loop\n-            Prim := Node (Prim_E);\n-\n-            --  Locate primitive equality with the right signature\n-\n-            if Chars (Prim) = Name_Op_Eq\n-              and then Etype (First_Formal (Prim)) =\n-                       Etype (Next_Formal (First_Formal (Prim)))\n-              and then Etype (Prim) = Standard_Boolean\n-            then\n-               if Is_Abstract_Subprogram (Prim) then\n-                  return\n-                    Make_Raise_Program_Error (Loc,\n-                      Reason => PE_Explicit_Raise);\n-\n-               else\n-                  return\n-                    Make_Function_Call (Loc,\n-                      Name                   => New_Occurrence_Of (Prim, Loc),\n-                      Parameter_Associations => New_List (Lhs, Rhs));\n-               end if;\n-            end if;\n-\n-            Next_Elmt (Prim_E);\n-         end loop;\n-\n-         --  If not found, predefined operation will be used\n-\n-         return Empty;\n-      end Find_Primitive_Eq;\n-\n    --  Start of processing for Expand_Composite_Equality\n \n    begin\n@@ -2654,7 +2608,7 @@ package body Exp_Ch4 is\n             --  a primitive equality declared for it.\n \n             declare\n-               Op : constant Node_Id := Find_Primitive_Eq;\n+               Op : constant Node_Id := Build_Eq_Call (Typ, Loc, Lhs, Rhs);\n \n             begin\n                --  Use user-defined primitive if it exists, otherwise use\n@@ -12599,7 +12553,53 @@ package body Exp_Ch4 is\n       Adjust_Result_Type (N, Typ);\n    end Expand_Short_Circuit_Operator;\n \n-   -------------------------------------\n+   -----------------------\n+   -- Build_Eq_Call --\n+   -----------------------\n+\n+   function Build_Eq_Call\n+     (Typ : Entity_Id;\n+      Loc : Source_Ptr;\n+      Lhs : Node_Id;\n+      Rhs : Node_Id) return Node_Id\n+   is\n+      Prim_E : Elmt_Id;\n+      Prim   : Node_Id;\n+\n+   begin\n+      Prim_E := First_Elmt (Collect_Primitive_Operations (Typ));\n+      while Present (Prim_E) loop\n+         Prim := Node (Prim_E);\n+\n+         --  Locate primitive equality with the right signature\n+\n+         if Chars (Prim) = Name_Op_Eq\n+           and then Etype (First_Formal (Prim)) =\n+                    Etype (Next_Formal (First_Formal (Prim)))\n+           and then Etype (Prim) = Standard_Boolean\n+         then\n+            if Is_Abstract_Subprogram (Prim) then\n+               return\n+                 Make_Raise_Program_Error (Loc,\n+                   Reason => PE_Explicit_Raise);\n+\n+            else\n+               return\n+                 Make_Function_Call (Loc,\n+                   Name                   => New_Occurrence_Of (Prim, Loc),\n+                   Parameter_Associations => New_List (Lhs, Rhs));\n+            end if;\n+         end if;\n+\n+         Next_Elmt (Prim_E);\n+      end loop;\n+\n+      --  If not found, predefined operation will be used\n+\n+      return Empty;\n+   end Build_Eq_Call;\n+\n+   ------------------------------------\n    -- Fixup_Universal_Fixed_Operation --\n    -------------------------------------\n "}, {"sha": "f2deaae3de8bb6bc5f599792b6cead2c30bec832", "filename": "gcc/ada/exp_ch4.ads", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdbb2a405541671bb427f6ff2f463a98c62b0a46/gcc%2Fada%2Fexp_ch4.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdbb2a405541671bb427f6ff2f463a98c62b0a46/gcc%2Fada%2Fexp_ch4.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.ads?ref=bdbb2a405541671bb427f6ff2f463a98c62b0a46", "patch": "@@ -29,6 +29,20 @@ with Types; use Types;\n \n package Exp_Ch4 is\n \n+   function Build_Eq_Call\n+     (Typ : Entity_Id;\n+      Loc : Source_Ptr;\n+      Lhs : Node_Id;\n+      Rhs : Node_Id) return Node_Id;\n+   --  AI05-0123: Locate primitive equality for type if it exists, and build\n+   --  the corresponding call. If operation is abstract, replace call with\n+   --  an explicit raise. Return Empty if there is no primitive.\n+   --  Used in the construction of record-equality routines for records here\n+   --  and for variant records in exp_ch3.adb. These two paths are distinct\n+   --  for historical but also technical reasons: for variant records the\n+   --  constructed function includes a case statement with nested returns,\n+   --  while for records without variants only a simple expression is needed.\n+\n    procedure Expand_N_Allocator                   (N : Node_Id);\n    procedure Expand_N_And_Then                    (N : Node_Id);\n    procedure Expand_N_Case_Expression             (N : Node_Id);"}, {"sha": "996a0ece0c01e365740298ba952dcdb82df076a5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdbb2a405541671bb427f6ff2f463a98c62b0a46/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdbb2a405541671bb427f6ff2f463a98c62b0a46/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bdbb2a405541671bb427f6ff2f463a98c62b0a46", "patch": "@@ -1,3 +1,8 @@\n+2019-07-04  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* gnat.dg/equal6.adb, gnat.dg/equal6_types.adb,\n+\tgnat.dg/equal6_types.ads: New testcase.\n+\n 2019-07-04  Justin Squirek  <squirek@adacore.com>\n \n \t* gnat.dg/allocator.adb: New testcase."}, {"sha": "dea772fcbbdf372542e8b8232e45cd33426dc900", "filename": "gcc/testsuite/gnat.dg/equal6.adb", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdbb2a405541671bb427f6ff2f463a98c62b0a46/gcc%2Ftestsuite%2Fgnat.dg%2Fequal6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdbb2a405541671bb427f6ff2f463a98c62b0a46/gcc%2Ftestsuite%2Fgnat.dg%2Fequal6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fequal6.adb?ref=bdbb2a405541671bb427f6ff2f463a98c62b0a46", "patch": "@@ -0,0 +1,29 @@\n+--  { dg-do run }\n+with Text_IO;\n+with Equal6_Types; use Equal6_Types;\n+\n+procedure Equal6 is\n+   Packets_In  : To_Evc_Optional_Packet_List_T;\n+   Packets_Out : To_Evc_Optional_Packet_List_T;\n+begin\n+   Packets_In.list (1) :=\n+     (Data_Used_Outside_Ertms_System =>\n+        (Mail_Box    =>\n+           (Receiver => 31,\n+            Data     => (Length => 12, Message => (0, others => 0)))));\n+\n+   Packets_Out.list (1) :=\n+     (Data_Used_Outside_Ertms_System =>\n+        (Mail_Box    =>\n+           (Receiver => 31,\n+            Data     => (Length => 12, Message => (0, others => 1)))));\n+\n+   if not (Packets_In = Packets_Out) then\n+      raise Program_Error;\n+   end if;\n+\n+   if not (Equal1_Called and then Equal2_Called) then\n+      raise Program_Error;\n+   end if;\n+\n+end Equal6;"}, {"sha": "7105b07e750e45242cfd6a7b9667a7f5075c77c9", "filename": "gcc/testsuite/gnat.dg/equal6_types.adb", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdbb2a405541671bb427f6ff2f463a98c62b0a46/gcc%2Ftestsuite%2Fgnat.dg%2Fequal6_types.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdbb2a405541671bb427f6ff2f463a98c62b0a46/gcc%2Ftestsuite%2Fgnat.dg%2Fequal6_types.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fequal6_types.adb?ref=bdbb2a405541671bb427f6ff2f463a98c62b0a46", "patch": "@@ -0,0 +1,15 @@\n+package body Equal6_Types is\n+\n+   function \"=\" (L, R : in Mail_Box_Data_T) return Boolean is\n+      use type Bits_T;\n+   begin\n+      Equal1_Called := True;\n+      return L.Message (1) = R.Message (1);\n+   end \"=\";\n+\n+   function \"=\" (L, R : in To_Evc_Optional_Packet_List_T) return Boolean is\n+   begin\n+      Equal2_Called := True;\n+      return L.List (1) = R.List (1);\n+   end \"=\";\n+end Equal6_Types;"}, {"sha": "90ec52bba87cdd54565878dfbac855571c334932", "filename": "gcc/testsuite/gnat.dg/equal6_types.ads", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdbb2a405541671bb427f6ff2f463a98c62b0a46/gcc%2Ftestsuite%2Fgnat.dg%2Fequal6_types.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdbb2a405541671bb427f6ff2f463a98c62b0a46/gcc%2Ftestsuite%2Fgnat.dg%2Fequal6_types.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fequal6_types.ads?ref=bdbb2a405541671bb427f6ff2f463a98c62b0a46", "patch": "@@ -0,0 +1,49 @@\n+package Equal6_Types is\n+   type Bit_T is range 0 .. 1;\n+\n+   type Bits_T is array (Positive range <>) of Bit_T;\n+\n+   type Nid_Xuser_T is range 0 .. 511;\n+\n+   Dispatch_P44_To_Ntc_C : constant Nid_Xuser_T := 102;\n+\n+   type Mail_Box_Data_T is record\n+      Length  : Natural;\n+      Message : Bits_T (1 .. 200);\n+   end record;\n+   function \"=\" (L, R : in Mail_Box_Data_T) return Boolean;\n+   Equal1_Called : Boolean := False;\n+\n+   type Mail_Box_T (Receiver : Nid_Xuser_T := Nid_Xuser_T'First) is record\n+      Data : Mail_Box_Data_T;\n+      case Receiver is\n+         when Dispatch_P44_To_Ntc_C =>\n+            Stm_Id : Positive;\n+         when others =>\n+            null;\n+      end case;\n+   end record;\n+\n+   type Data_Used_Outside_Ertms_System_T is record\n+      Mail_Box    : Mail_Box_T;\n+   end record;\n+\n+   type To_Evc_Optional_Packet_T\n+   is record\n+            Data_Used_Outside_Ertms_System : Data_Used_Outside_Ertms_System_T;\n+   end record;\n+\n+   type To_Evc_Optional_Packet_List_Length_T is range 0 .. 50;\n+   type To_Evc_Optional_Packet_Map_T is\n+     array\n+       (To_Evc_Optional_Packet_List_Length_T range <>)\n+            of To_Evc_Optional_Packet_T;\n+\n+   type To_Evc_Optional_Packet_List_T is record\n+      List : To_Evc_Optional_Packet_Map_T\n+        (1 .. To_Evc_Optional_Packet_List_Length_T'Last);\n+   end record;\n+   function \"=\" (L, R : in To_Evc_Optional_Packet_List_T) return Boolean;\n+   Equal2_Called : Boolean := False;\n+\n+end Equal6_Types;"}]}