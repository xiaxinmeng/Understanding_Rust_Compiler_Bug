{"sha": "8a5190956b9ee51221892574b54e22536000344d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGE1MTkwOTU2YjllZTUxMjIxODkyNTc0YjU0ZTIyNTM2MDAwMzQ0ZA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2011-05-14T19:45:28Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2011-05-14T19:45:28Z"}, "message": "tree-ssa-loop-im.c (SET_ALWAYS_EXECUTED_IN): New macro.\n\n\t* tree-ssa-loop-im.c (SET_ALWAYS_EXECUTED_IN): New macro.\n\t(fill_always_executed_in): Use [SET_]ALWAYS_EXECUTED_IN.\n\t(tree_ssa_lim_finalize): Likewise.\n\nFrom-SVN: r173762", "tree": {"sha": "5294074229cac9cd785ac2382417ae26db73e897", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5294074229cac9cd785ac2382417ae26db73e897"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8a5190956b9ee51221892574b54e22536000344d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a5190956b9ee51221892574b54e22536000344d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a5190956b9ee51221892574b54e22536000344d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a5190956b9ee51221892574b54e22536000344d/comments", "author": null, "committer": null, "parents": [{"sha": "486d481b392fae54d39413f3d1fc6851383fce47", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/486d481b392fae54d39413f3d1fc6851383fce47", "html_url": "https://github.com/Rust-GCC/gccrs/commit/486d481b392fae54d39413f3d1fc6851383fce47"}], "stats": {"total": 17, "additions": 11, "deletions": 6}, "files": [{"sha": "594f519fab4b96864c14cc74bc32a3201d5ec5b9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a5190956b9ee51221892574b54e22536000344d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a5190956b9ee51221892574b54e22536000344d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8a5190956b9ee51221892574b54e22536000344d", "patch": "@@ -1,3 +1,9 @@\n+2011-05-14  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* tree-ssa-loop-im.c (SET_ALWAYS_EXECUTED_IN): New macro.\n+\t(fill_always_executed_in): Use [SET_]ALWAYS_EXECUTED_IN.\n+\t(tree_ssa_lim_finalize): Likewise.\n+\n 2011-05-14  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/constraint.md (Yd, Yx): New register constraints."}, {"sha": "778edd49ff0ecca173d38175582f34bea85213ca", "filename": "gcc/tree-ssa-loop-im.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a5190956b9ee51221892574b54e22536000344d/gcc%2Ftree-ssa-loop-im.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a5190956b9ee51221892574b54e22536000344d/gcc%2Ftree-ssa-loop-im.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-im.c?ref=8a5190956b9ee51221892574b54e22536000344d", "patch": "@@ -197,9 +197,10 @@ static bool ref_indep_loop_p (struct loop *, mem_ref_p);\n /* Minimum cost of an expensive expression.  */\n #define LIM_EXPENSIVE ((unsigned) PARAM_VALUE (PARAM_LIM_EXPENSIVE))\n \n-/* The outermost loop for that execution of the header guarantees that the\n+/* The outermost loop for which execution of the header guarantees that the\n    block will be executed.  */\n #define ALWAYS_EXECUTED_IN(BB) ((struct loop *) (BB)->aux)\n+#define SET_ALWAYS_EXECUTED_IN(BB, VAL) ((BB)->aux = (void *) (VAL))\n \n static struct lim_aux_data *\n init_lim_data (gimple stmt)\n@@ -2440,7 +2441,7 @@ fill_always_executed_in (struct loop *loop, sbitmap contains_call)\n   edge e;\n   struct loop *inn_loop = loop;\n \n-  if (!loop->header->aux)\n+  if (ALWAYS_EXECUTED_IN (loop->header) == NULL)\n     {\n       bbs = get_loop_body_in_dom_order (loop);\n \n@@ -2482,7 +2483,7 @@ fill_always_executed_in (struct loop *loop, sbitmap contains_call)\n \n       while (1)\n \t{\n-\t  last->aux = loop;\n+\t  SET_ALWAYS_EXECUTED_IN (last, loop);\n \t  if (last == loop->header)\n \t    break;\n \t  last = get_immediate_dominator (CDI_DOMINATORS, last);\n@@ -2537,9 +2538,7 @@ tree_ssa_lim_finalize (void)\n   htab_t h;\n \n   FOR_EACH_BB (bb)\n-    {\n-      bb->aux = NULL;\n-    }\n+    SET_ALWAYS_EXECUTED_IN (bb, NULL);\n \n   pointer_map_destroy (lim_aux_data_map);\n "}]}