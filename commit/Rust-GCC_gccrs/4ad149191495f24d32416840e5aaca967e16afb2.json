{"sha": "4ad149191495f24d32416840e5aaca967e16afb2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGFkMTQ5MTkxNDk1ZjI0ZDMyNDE2ODQwZTVhYWNhOTY3ZTE2YWZiMg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-08-22T13:14:32Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-08-22T13:14:32Z"}, "message": "tree-ssa-loop-ch.c (copy_loop_headers): Remove redundant checking.\n\n2012-08-22  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-ssa-loop-ch.c (copy_loop_headers): Remove redundant checking.\n\t* tree-into-ssa.c (initialize_flags_in_bb): Use gcc_checking_assert\n\tinstead of gcc_assert.\n\t(mark_block_for_update): Likewise.\n\t(add_new_name_mapping): Likewise.\n\t(mark_def_sites): Likewise.\n\t(insert_phi_nodes_for): Likewise.\n\t(rewrite_debug_stmt_uses): Likewise.\n\t(rewrite_stmt): Likewise.\n\t(maybe_register_def): Likewise.\n\t(rewrite_update_phi_arguments): Likewise.\n\t(rewrite_update_enter_block): Likewise.\n\t(mark_def_interesting): Likewise.\n\t(prepare_def_site_for): Likewise.\n\t(insert_updated_phi_nodes_for): Likewise.\n\nFrom-SVN: r190593", "tree": {"sha": "d00a787c3f30c5ef493cbc04a0c2e658ff155c5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d00a787c3f30c5ef493cbc04a0c2e658ff155c5e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4ad149191495f24d32416840e5aaca967e16afb2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ad149191495f24d32416840e5aaca967e16afb2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ad149191495f24d32416840e5aaca967e16afb2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ad149191495f24d32416840e5aaca967e16afb2/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "156c01cf120bd8706d3aa915ccfc9cff94c4dc12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/156c01cf120bd8706d3aa915ccfc9cff94c4dc12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/156c01cf120bd8706d3aa915ccfc9cff94c4dc12"}], "stats": {"total": 73, "additions": 43, "deletions": 30}, "files": [{"sha": "1fec0b852a1b58436a6e73412f44921e5592f56d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad149191495f24d32416840e5aaca967e16afb2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad149191495f24d32416840e5aaca967e16afb2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4ad149191495f24d32416840e5aaca967e16afb2", "patch": "@@ -1,3 +1,21 @@\n+2012-08-22  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-ssa-loop-ch.c (copy_loop_headers): Remove redundant checking.\n+\t* tree-into-ssa.c (initialize_flags_in_bb): Use gcc_checking_assert\n+\tinstead of gcc_assert.\n+\t(mark_block_for_update): Likewise.\n+\t(add_new_name_mapping): Likewise.\n+\t(mark_def_sites): Likewise.\n+\t(insert_phi_nodes_for): Likewise.\n+\t(rewrite_debug_stmt_uses): Likewise.\n+\t(rewrite_stmt): Likewise.\n+\t(maybe_register_def): Likewise.\n+\t(rewrite_update_phi_arguments): Likewise.\n+\t(rewrite_update_enter_block): Likewise.\n+\t(mark_def_interesting): Likewise.\n+\t(prepare_def_site_for): Likewise.\n+\t(insert_updated_phi_nodes_for): Likewise.\n+\n 2012-08-22  Jakub Jelinek  <jakub@redhat.com>\n \n \t* tree-vect-loop.c (vect_transform_loop): Initialize"}, {"sha": "73692b912f3482ce36dac9da8fd222a5d4821476", "filename": "gcc/tree-into-ssa.c", "status": "modified", "additions": 25, "deletions": 26, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad149191495f24d32416840e5aaca967e16afb2/gcc%2Ftree-into-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad149191495f24d32416840e5aaca967e16afb2/gcc%2Ftree-into-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-into-ssa.c?ref=4ad149191495f24d32416840e5aaca967e16afb2", "patch": "@@ -426,7 +426,7 @@ initialize_flags_in_bb (basic_block bb)\n       /* We are going to use the operand cache API, such as\n \t SET_USE, SET_DEF, and FOR_EACH_IMM_USE_FAST.  The operand\n \t cache for each statement should be up-to-date.  */\n-      gcc_assert (!gimple_modified_p (stmt));\n+      gcc_checking_assert (!gimple_modified_p (stmt));\n       set_rewrite_uses (stmt, false);\n       set_register_defs (stmt, false);\n     }\n@@ -437,7 +437,7 @@ initialize_flags_in_bb (basic_block bb)\n static void\n mark_block_for_update (basic_block bb)\n {\n-  gcc_assert (blocks_to_update != NULL);\n+  gcc_checking_assert (blocks_to_update != NULL);\n   if (!bitmap_set_bit (blocks_to_update, bb->index))\n     return;\n   initialize_flags_in_bb (bb);\n@@ -588,7 +588,8 @@ static void\n add_new_name_mapping (tree new_tree, tree old)\n {\n   /* OLD and NEW_TREE must be different SSA names for the same symbol.  */\n-  gcc_assert (new_tree != old && SSA_NAME_VAR (new_tree) == SSA_NAME_VAR (old));\n+  gcc_checking_assert (new_tree != old\n+\t\t       && SSA_NAME_VAR (new_tree) == SSA_NAME_VAR (old));\n \n   /* We may need to grow NEW_SSA_NAMES and OLD_SSA_NAMES because our\n      caller may have created new names since the set was created.  */\n@@ -639,7 +640,7 @@ mark_def_sites (basic_block bb, gimple stmt, bitmap kills)\n      form, force an operand scan on every statement.  */\n   update_stmt (stmt);\n \n-  gcc_assert (blocks_to_update == NULL);\n+  gcc_checking_assert (blocks_to_update == NULL);\n   set_register_defs (stmt, false);\n   set_rewrite_uses (stmt, false);\n \n@@ -648,7 +649,7 @@ mark_def_sites (basic_block bb, gimple stmt, bitmap kills)\n       FOR_EACH_SSA_USE_OPERAND (use_p, stmt, iter, SSA_OP_USE)\n \t{\n \t  tree sym = USE_FROM_PTR (use_p);\n-\t  gcc_assert (DECL_P (sym));\n+\t  gcc_checking_assert (DECL_P (sym));\n \t  set_rewrite_uses (stmt, true);\n \t}\n       if (rewrite_uses_p (stmt))\n@@ -661,7 +662,7 @@ mark_def_sites (basic_block bb, gimple stmt, bitmap kills)\n   FOR_EACH_SSA_USE_OPERAND (use_p, stmt, iter, SSA_OP_ALL_USES)\n     {\n       tree sym = USE_FROM_PTR (use_p);\n-      gcc_assert (DECL_P (sym));\n+      gcc_checking_assert (DECL_P (sym));\n       if (!bitmap_bit_p (kills, DECL_UID (sym)))\n \tset_livein_block (sym, bb);\n       set_rewrite_uses (stmt, true);\n@@ -671,7 +672,7 @@ mark_def_sites (basic_block bb, gimple stmt, bitmap kills)\n      each def to the set of killed symbols.  */\n   FOR_EACH_SSA_TREE_OPERAND (def, stmt, iter, SSA_OP_ALL_DEFS)\n     {\n-      gcc_assert (DECL_P (def));\n+      gcc_checking_assert (DECL_P (def));\n       set_def_block (def, bb, false);\n       bitmap_set_bit (kills, DECL_UID (def));\n       set_register_defs (stmt, true);\n@@ -960,10 +961,7 @@ insert_phi_nodes_for (tree var, bitmap phi_insertion_points, bool update_p)\n   gimple phi;\n   basic_block bb;\n   bitmap_iterator bi;\n-  struct def_blocks_d *def_map;\n-\n-  def_map = find_def_blocks_for (var);\n-  gcc_assert (def_map);\n+  struct def_blocks_d *def_map = find_def_blocks_for (var);\n \n   /* Remove the blocks where we already have PHI nodes for VAR.  */\n   bitmap_and_compl_into (phi_insertion_points, def_map->phi_blocks);\n@@ -990,7 +988,7 @@ insert_phi_nodes_for (tree var, bitmap phi_insertion_points, bool update_p)\n \t  edge_iterator ei;\n \t  tree new_lhs;\n \n-\t  gcc_assert (update_p);\n+\t  gcc_checking_assert (update_p);\n \t  new_lhs = duplicate_ssa_name (var, NULL);\n \t  phi = create_phi_node (new_lhs, bb);\n \t  add_new_name_mapping (new_lhs, var);\n@@ -1008,7 +1006,7 @@ insert_phi_nodes_for (tree var, bitmap phi_insertion_points, bool update_p)\n \t{\n \t  tree tracked_var;\n \n-\t  gcc_assert (DECL_P (var));\n+\t  gcc_checking_assert (DECL_P (var));\n \t  phi = create_phi_node (var, bb);\n \n \t  tracked_var = target_for_debug_bind (var);\n@@ -1184,7 +1182,7 @@ rewrite_debug_stmt_uses (gimple stmt)\n     {\n       tree var = USE_FROM_PTR (use_p), def;\n       common_info_p info = get_common_info (var);\n-      gcc_assert (DECL_P (var));\n+      gcc_checking_assert (DECL_P (var));\n       def = info->current_def;\n       if (!def)\n \t{\n@@ -1304,7 +1302,7 @@ rewrite_stmt (gimple_stmt_iterator *si)\n \tFOR_EACH_SSA_USE_OPERAND (use_p, stmt, iter, SSA_OP_ALL_USES)\n \t  {\n \t    tree var = USE_FROM_PTR (use_p);\n-\t    gcc_assert (DECL_P (var));\n+\t    gcc_checking_assert (DECL_P (var));\n \t    SET_USE (use_p, get_reaching_def (var));\n \t  }\n     }\n@@ -1317,15 +1315,15 @@ rewrite_stmt (gimple_stmt_iterator *si)\n \ttree name;\n \ttree tracked_var;\n \n-\tgcc_assert (DECL_P (var));\n+\tgcc_checking_assert (DECL_P (var));\n \n \tif (gimple_clobber_p (stmt)\n \t    && is_gimple_reg (var))\n \t  {\n \t    /* If we rewrite a DECL into SSA form then drop its\n \t       clobber stmts and replace uses with a new default def.  */\n-\t    gcc_assert (TREE_CODE (var) == VAR_DECL\n-\t\t\t&& !gimple_vdef (stmt));\n+\t    gcc_checking_assert (TREE_CODE (var) == VAR_DECL\n+\t\t\t\t && !gimple_vdef (stmt));\n \t    gsi_replace (si, gimple_build_nop (), true);\n \t    register_new_def (get_or_create_ssa_default_def (cfun, var), var);\n \t    break;\n@@ -1850,7 +1848,7 @@ maybe_register_def (def_operand_p def_p, gimple stmt,\n \t\t  FOR_EACH_EDGE (e, ei, bb->succs)\n \t\t    if (!(e->flags & EDGE_EH))\n \t\t      {\n-\t\t\tgcc_assert (!ef);\n+\t\t\tgcc_checking_assert (!ef);\n \t\t\tef = e;\n \t\t      }\n \t\t  /* If there are other predecessors to ef->dest, then\n@@ -1996,7 +1994,7 @@ rewrite_update_phi_arguments (basic_block bb)\n \t  tree arg, lhs_sym, reaching_def = NULL;\n \t  use_operand_p arg_p;\n \n-  \t  gcc_assert (rewrite_uses_p (phi));\n+  \t  gcc_checking_assert (rewrite_uses_p (phi));\n \n \t  arg_p = PHI_ARG_DEF_PTR_FROM_EDGE (phi, e);\n \t  arg = USE_FROM_PTR (arg_p);\n@@ -2118,7 +2116,7 @@ rewrite_update_enter_block (struct dom_walk_data *walk_data ATTRIBUTE_UNUSED,\n   /* Step 2.  Rewrite every variable used in each statement in the block.  */\n   if (TEST_BIT (interesting_blocks, bb->index))\n     {\n-      gcc_assert (bitmap_bit_p (blocks_to_update, bb->index));\n+      gcc_checking_assert (bitmap_bit_p (blocks_to_update, bb->index));\n       for (gsi = gsi_start_bb (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n         rewrite_update_stmt (gsi_stmt (gsi), gsi);\n     }\n@@ -2428,7 +2426,7 @@ struct gimple_opt_pass pass_build_ssa =\n static void\n mark_def_interesting (tree var, gimple stmt, basic_block bb, bool insert_phi_p)\n {\n-  gcc_assert (bitmap_bit_p (blocks_to_update, bb->index));\n+  gcc_checking_assert (bitmap_bit_p (blocks_to_update, bb->index));\n   set_register_defs (stmt, true);\n \n   if (insert_phi_p)\n@@ -2636,14 +2634,15 @@ prepare_def_site_for (tree name, bool insert_phi_p)\n   gimple stmt;\n   basic_block bb;\n \n-  gcc_assert (names_to_release == NULL\n-\t      || !bitmap_bit_p (names_to_release, SSA_NAME_VERSION (name)));\n+  gcc_checking_assert (names_to_release == NULL\n+\t\t       || !bitmap_bit_p (names_to_release,\n+\t\t\t\t\t SSA_NAME_VERSION (name)));\n \n   stmt = SSA_NAME_DEF_STMT (name);\n   bb = gimple_bb (stmt);\n   if (bb)\n     {\n-      gcc_assert (bb->index < last_basic_block);\n+      gcc_checking_assert (bb->index < last_basic_block);\n       mark_block_for_update (bb);\n       mark_def_interesting (name, stmt, bb, insert_phi_p);\n     }\n@@ -2998,7 +2997,7 @@ insert_updated_phi_nodes_for (tree var, bitmap_head *dfs, bitmap blocks,\n       else\n \t{\n \t  /* Otherwise, do not prune the IDF for VAR.  */\n-\t  gcc_assert (update_flags == TODO_update_ssa_full_phi);\n+\t  gcc_checking_assert (update_flags == TODO_update_ssa_full_phi);\n \t  bitmap_copy (pruned_idf, idf);\n \t}\n     }"}, {"sha": "46097c2bea3eb2cf3294111a5b5768bddd0ee027", "filename": "gcc/tree-ssa-loop-ch.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad149191495f24d32416840e5aaca967e16afb2/gcc%2Ftree-ssa-loop-ch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad149191495f24d32416840e5aaca967e16afb2/gcc%2Ftree-ssa-loop-ch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ch.c?ref=4ad149191495f24d32416840e5aaca967e16afb2", "patch": "@@ -143,10 +143,6 @@ copy_loop_headers (void)\n       return 0;\n     }\n \n-#ifdef ENABLE_CHECKING\n-  verify_loop_structure ();\n-#endif\n-\n   bbs = XNEWVEC (basic_block, n_basic_blocks);\n   copied_bbs = XNEWVEC (basic_block, n_basic_blocks);\n   bbs_size = n_basic_blocks;"}]}