{"sha": "e516702202bcdc26181cf9fab120fcb15ca0c15d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTUxNjcwMjIwMmJjZGMyNjE4MWNmOWZhYjEyMGZjYjE1Y2EwYzE1ZA==", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2019-09-19T08:12:47Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-09-19T08:12:47Z"}, "message": "[Ada] gnatxref: infinite loop on symbols not found\n\nThis patch fixes a bug in which if a symbol is not found, gnatxref can\nsometimes enter an infinite loop. No impact on compilation.\n\n2019-09-19  Bob Duff  <duff@adacore.com>\n\ngcc/ada/\n\n\t* xref_lib.adb (Get_Symbol_Name): If we reach EOF in the first\n\tloop without finding the symbol, return \"???\". Otherwise, it's\n\tan infinite loop.\n\t(Parse_EOL): Assert that we're not already at EOF.  Remove\n\tprocessing of LF/CR -- there are no operating systems that use\n\tthat.\n\nFrom-SVN: r275932", "tree": {"sha": "31f92ae686a693ce3670782d8fd53b11dde69d63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/31f92ae686a693ce3670782d8fd53b11dde69d63"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e516702202bcdc26181cf9fab120fcb15ca0c15d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e516702202bcdc26181cf9fab120fcb15ca0c15d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e516702202bcdc26181cf9fab120fcb15ca0c15d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e516702202bcdc26181cf9fab120fcb15ca0c15d/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5d66b937e3d1bbdbaace1da7bc5fac8a94793108", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d66b937e3d1bbdbaace1da7bc5fac8a94793108", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d66b937e3d1bbdbaace1da7bc5fac8a94793108"}], "stats": {"total": 26, "additions": 18, "deletions": 8}, "files": [{"sha": "429e17ff2869ad47613ce8c3fee783f4e8c3274c", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e516702202bcdc26181cf9fab120fcb15ca0c15d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e516702202bcdc26181cf9fab120fcb15ca0c15d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=e516702202bcdc26181cf9fab120fcb15ca0c15d", "patch": "@@ -1,3 +1,12 @@\n+2019-09-19  Bob Duff  <duff@adacore.com>\n+\n+\t* xref_lib.adb (Get_Symbol_Name): If we reach EOF in the first\n+\tloop without finding the symbol, return \"???\". Otherwise, it's\n+\tan infinite loop.\n+\t(Parse_EOL): Assert that we're not already at EOF.  Remove\n+\tprocessing of LF/CR -- there are no operating systems that use\n+\tthat.\n+\n 2019-09-19  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* exp_ch6.adb (Is_Legal_Copy): Also return false for an aliased"}, {"sha": "eabf8b450e8cd403d06c9c51b28fc692e4b1bc03", "filename": "gcc/ada/xref_lib.adb", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e516702202bcdc26181cf9fab120fcb15ca0c15d/gcc%2Fada%2Fxref_lib.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e516702202bcdc26181cf9fab120fcb15ca0c15d/gcc%2Fada%2Fxref_lib.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fxref_lib.adb?ref=e516702202bcdc26181cf9fab120fcb15ca0c15d", "patch": "@@ -723,6 +723,8 @@ package body Xref_Lib is\n    is\n    begin\n       loop\n+         pragma Assert (Source (Ptr) /= EOF);\n+\n          --  Skip to end of line\n \n          while Source (Ptr) /= ASCII.CR and then Source (Ptr) /= ASCII.LF\n@@ -737,11 +739,9 @@ package body Xref_Lib is\n             Ptr := Ptr + 1;\n          end if;\n \n-         --  Skip past CR/LF or LF/CR combination\n+         --  Skip past CR/LF\n \n-         if (Source (Ptr) = ASCII.CR or else Source (Ptr) = ASCII.LF)\n-           and then Source (Ptr) /= Source (Ptr - 1)\n-         then\n+         if Source (Ptr - 1) = ASCII.CR and then Source (Ptr) = ASCII.LF then\n             Ptr := Ptr + 1;\n          end if;\n \n@@ -783,6 +783,7 @@ package body Xref_Lib is\n       --  line and column in the dependent unit number Eun. For this we need\n       --  to parse the ali file again because the parent entity is not in\n       --  the declaration table if it did not match the search pattern.\n+      --  If the symbol is not found, we return \"???\".\n \n       procedure Skip_To_Matching_Closing_Bracket;\n       --  When Ptr points to an opening square bracket, moves it to the\n@@ -803,6 +804,10 @@ package body Xref_Lib is\n          --  Look for the X lines corresponding to unit Eun\n \n          loop\n+            if Ali (Ptr) = EOF then\n+               return \"???\";\n+            end if;\n+\n             if Ali (Ptr) = 'X' then\n                Ptr := Ptr + 1;\n                Parse_Number (Ali, Ptr, E_Eun);\n@@ -832,10 +837,6 @@ package body Xref_Lib is\n             exit when Ali (Ptr) = EOF;\n          end loop;\n \n-         --  We were not able to find the symbol, this should not happen but\n-         --  since we don't want to stop here we return a string of three\n-         --  question marks as the symbol name.\n-\n          return \"???\";\n       end Get_Symbol_Name;\n "}]}