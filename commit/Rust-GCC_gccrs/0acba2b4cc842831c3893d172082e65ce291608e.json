{"sha": "0acba2b4cc842831c3893d172082e65ce291608e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGFjYmEyYjRjYzg0MjgzMWMzODkzZDE3MjA4MmU2NWNlMjkxNjA4ZQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2010-07-02T19:25:30Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2010-07-02T19:25:30Z"}, "message": "implicit-zee.c (combine_reaching_defs): Fix long lines.\n\n\t* implicit-zee.c (combine_reaching_defs): Fix long lines.\n\t(is_set_with_extension_DI): Delete.\n\t(struct zero_extend_info): New structure.\n\t(add_removable_zero_extend ): New function.\n\t(find_removable_zero_extends): Use note_stores to find SETs.\n\t(find_and_remove_ze): Fix long line, remove superfluous parentheses.\n\nFrom-SVN: r161736", "tree": {"sha": "3ac35e50bd44bc3874c026d4045abe4a0ee1ed1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ac35e50bd44bc3874c026d4045abe4a0ee1ed1b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0acba2b4cc842831c3893d172082e65ce291608e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0acba2b4cc842831c3893d172082e65ce291608e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0acba2b4cc842831c3893d172082e65ce291608e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0acba2b4cc842831c3893d172082e65ce291608e/comments", "author": null, "committer": null, "parents": [{"sha": "7a0208b79131d47d8ba5e91fd2ce0dead363a486", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a0208b79131d47d8ba5e91fd2ce0dead363a486", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a0208b79131d47d8ba5e91fd2ce0dead363a486"}], "stats": {"total": 174, "additions": 88, "deletions": 86}, "files": [{"sha": "8e9db93d44957a0ec159f0308da8acd29127b668", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0acba2b4cc842831c3893d172082e65ce291608e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0acba2b4cc842831c3893d172082e65ce291608e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0acba2b4cc842831c3893d172082e65ce291608e", "patch": "@@ -1,3 +1,12 @@\n+2010-07-02  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* implicit-zee.c (combine_reaching_defs): Fix long lines.\n+\t(is_set_with_extension_DI): Delete.\n+\t(struct zero_extend_info): New structure.\n+\t(add_removable_zero_extend ): New function.\n+\t(find_removable_zero_extends): Use note_stores to find SETs.\n+\t(find_and_remove_ze): Fix long line, remove superfluous parentheses.\n+\n 2010-07-02  Changpeng Fang  <changpeng.fang@amd.com>\n \n \t* tree-ssa-loop-prefetch.c (compute_miss_rate): Rename to"}, {"sha": "40a270bf8d7b0491bbf75bf832869a4c6e948cf1", "filename": "gcc/implicit-zee.c", "status": "modified", "additions": 79, "deletions": 86, "changes": 165, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0acba2b4cc842831c3893d172082e65ce291608e/gcc%2Fimplicit-zee.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0acba2b4cc842831c3893d172082e65ce291608e/gcc%2Fimplicit-zee.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fimplicit-zee.c?ref=0acba2b4cc842831c3893d172082e65ce291608e", "patch": "@@ -100,17 +100,17 @@ along with GCC; see the file COPYING3.  If not see\n    }\n    **********************************************\n \n-   $ gcc -O2 -fsee bad_code.c (Turned on existing sign-extension elimination.)\n+   $ gcc -O2 -fsee bad_code.c (Turned on existing sign-extension elimination)\n      ........\n      400315:       b8 4e 00 00 00          mov    $0x4e,%eax\n      40031a:       0f af f8                imul   %eax,%edi\n-     40031d:       89 ff                   mov    %edi,%edi  ---> Useless extend.\n+     40031d:       89 ff                   mov    %edi,%edi  --> Useless extend\n      40031f:       8b 04 bd 60 19 40 00    mov    0x401960(,%rdi,4),%eax\n      400326:       c3                      retq\n      ......\n      400330:       ba 2d 00 00 00          mov    $0x2d,%edx\n      400335:       0f af fa                imul   %edx,%edi\n-     400338:       89 ff                   mov    %edi,%edi  ---> Useless extend.\n+     400338:       89 ff                   mov    %edi,%edi  --> Useless extend\n      40033a:       8b 04 bd 60 19 40 00    mov    0x401960(,%rdi,4),%eax\n      400341:       c3                      retq\n \n@@ -141,14 +141,14 @@ along with GCC; see the file COPYING3.  If not see\n      return (unsigned long long)(z);\n    }\n \n-   $ gcc -O2 -fsee bad_code.c (Turned on existing sign-extension elimination.)\n+   $ gcc -O2 -fsee bad_code.c (Turned on existing sign-extension elimination)\n      ............\n      400360:       8d 14 3e                lea    (%rsi,%rdi,1),%edx\n      400363:       89 f8                   mov    %edi,%eax\n      400365:       29 f0                   sub    %esi,%eax\n      400367:       83 ff 65                cmp    $0x65,%edi\n      40036a:       0f 43 c2                cmovae %edx,%eax\n-     40036d:       89 c0                   mov    %eax,%eax ---> Useless extend.\n+     40036d:       89 c0                   mov    %eax,%eax  --> Useless extend\n      40036f:       c3                      retq\n \n    $ gcc -O2 -fzee bad_code.c\n@@ -165,16 +165,13 @@ along with GCC; see the file COPYING3.  If not see\n    Usefulness :\n    ----------\n \n-   This pass reduces the dynamic instruction count of a compression benchmark by\n-   2.8% and improves its run-time by about 1%.  The compression benchmark had the\n-   following code sequence in a very hot region of code before ZEE optimized it :\n+   This pass reduces the dynamic instruction count of a compression benchmark\n+   by 2.8% and improves its run time by about 1%.  The compression benchmark\n+   had the following code sequence in a very hot region of code before ZEE\n+   optimized it :\n \n    shr $0x5, %edx\n-   mov %edx, %edx --> Useless zero-extend.\n-\n-   How to turn on ?\n-   ----------------\n-   -fzee -O2.  */\n+   mov %edx, %edx --> Useless zero-extend  */\n \n \n #include \"config.h\"\n@@ -240,31 +237,6 @@ set_insn_status (rtx insn, enum insn_merge_code code)\n   is_insn_merge_attempted[INSN_UID (insn)] = code;\n }\n \n-/* Check to see if this zero-extend matches a pattern\n-   that could be eliminated.  This is called via\n-   for_each_rtx in function find_and_remove_ze.  */\n-\n-static int\n-is_set_with_extension_DI (rtx *expr, void *data)\n-{\n-  /* Looking only for patterns of the type :\n-     SET (REG:DI X) (ZERO_EXTEND (REG:SI x))\n-   */\n-\n-  if (GET_CODE (*expr) == SET\n-      && GET_MODE (SET_DEST (*expr)) == DImode\n-      && GET_CODE (SET_DEST (*expr)) == REG\n-      && GET_CODE (SET_SRC (*expr)) == ZERO_EXTEND\n-      && GET_CODE (XEXP (SET_SRC (*expr),0)) == REG\n-      && GET_MODE (XEXP (SET_SRC (*expr),0)) == SImode\n-      && REGNO (SET_DEST (*expr)) == REGNO (XEXP (SET_SRC (*expr),0)))\n-        {\n-          *(rtx **)(data) = expr;\n-          return 1;\n-        }\n-  return 0;\n-}\n-\n /* Given a insn (CURR_INSN) and a pointer to the SET rtx (ORIG_SET)\n    that needs to be modified, this code modifies the SET rtx to a\n    new SET rtx that zero_extends the right hand expression into a DImode\n@@ -737,7 +709,7 @@ combine_reaching_defs (rtx zero_extend_insn, rtx set_pat)\n       VEC_free (rtx, heap, defs_list);\n       VEC_free (rtx, heap, copies_list);\n       if (dump_file)\n-        fprintf (dump_file, \"All definitions have been merged previously...\\n\");\n+        fprintf (dump_file, \"All definitions have been merged previously.\\n\");\n       return true;\n     }\n \n@@ -812,8 +784,8 @@ combine_reaching_defs (rtx zero_extend_insn, rtx set_pat)\n         }\n       else\n         {\n-          /* Changes need not be cancelled explicitly as apply_change_group ()\n-             does it.   Print list of definitions in the dump_file for debug\n+          /* Changes need not be cancelled explicitly as apply_change_group\n+             does it.  Print list of definitions in the dump_file for debug\n              purposes.  This zero-extension cannot be deleted.  */\n \n           if (dump_file)\n@@ -838,50 +810,74 @@ combine_reaching_defs (rtx zero_extend_insn, rtx set_pat)\n   return false;\n }\n \n-/* Goes through the instruction stream looking for zero-extends.  If the zero\n-   extension instruction has atleast one def it adds it to a list of possible\n-   candidates for deletion.  It returns the list of candidates.  */\n+/* Carry information about zero-extensions while walking the RTL.  */\n+\n+struct zero_extend_info\n+{\n+  /* The insn where the zero-extension is.  */\n+  rtx insn;\n+\n+  /* The list of candidates.  */\n+  VEC (rtx, heap) *insn_list;\n+};\n+\n+/* Add a zero-extend pattern that could be eliminated.  This is called via\n+   note_stores from find_removable_zero_extends.  */\n+\n+static void\n+add_removable_zero_extend (rtx x ATTRIBUTE_UNUSED, const_rtx expr, void *data)\n+{\n+  struct zero_extend_info *zei = (struct zero_extend_info *)data;\n+  rtx src, dest;\n+\n+  /* We are looking for SET (REG:DI N) (ZERO_EXTEND (REG:SI N)).  */\n+  if (GET_CODE (expr) != SET)\n+    return;\n+\n+  src = SET_SRC (expr);\n+  dest = SET_DEST (expr);\n+\n+  if (REG_P (dest)\n+      && GET_MODE (dest) == DImode\n+      && GET_CODE (src) == ZERO_EXTEND\n+      && REG_P (XEXP (src, 0))\n+      && GET_MODE (XEXP (src, 0)) == SImode\n+      && REGNO (dest) == REGNO (XEXP (src, 0)))\n+    {\n+      if (get_defs (zei->insn, XEXP (src, 0), NULL))\n+\tVEC_safe_push (rtx, heap, zei->insn_list, zei->insn);\n+      else if (dump_file)\n+\t{\n+\t  fprintf (dump_file, \"Cannot eliminate zero-extension: \\n\");\n+\t  print_rtl_single (dump_file, zei->insn);\n+\t  fprintf (dump_file, \"No defs. Could be extending parameters.\\n\");\n+\t}\n+    }\n+}\n+\n+/* Traverse the instruction stream looking for zero-extends and return the\n+   list of candidates.  */\n \n static VEC (rtx,heap)*\n find_removable_zero_extends (void)\n {\n-  VEC (rtx, heap) *zeinsn_list;\n-  basic_block curr_block;\n-  rtx curr_insn;\n-  rtx *set_insn;\n-  rtx which_reg;\n-  int type ;\n-  int has_defs;\n-\n-  zeinsn_list = VEC_alloc (rtx, heap, 8);\n-  FOR_EACH_BB (curr_block)\n-    {\n-      FOR_BB_INSNS (curr_block, curr_insn)\n-        {\n-          if (!NONDEBUG_INSN_P (curr_insn))\n-            continue;\n+  struct zero_extend_info zei;\n+  basic_block bb;\n+  rtx insn;\n \n-          type = for_each_rtx (&PATTERN (curr_insn),\n-                               is_set_with_extension_DI,\n-                               (void *)&set_insn);\n+  zei.insn_list = VEC_alloc (rtx, heap, 8);\n \n-          if (!type)\n-            continue;\n+  FOR_EACH_BB (bb)\n+    FOR_BB_INSNS (bb, insn)\n+      {\n+\tif (!NONDEBUG_INSN_P (insn))\n+\t  continue;\n \n-          which_reg = XEXP (SET_SRC (*set_insn), 0);\n-          has_defs = get_defs (curr_insn, which_reg, NULL);\n-          if (has_defs)\n-            VEC_safe_push (rtx, heap, zeinsn_list, curr_insn);\n-          else if (dump_file)\n-            {\n-              fprintf (dump_file, \"Cannot eliminate zero extension : \\n\");\n-              print_rtl_single (dump_file, curr_insn);\n-              fprintf (dump_file,\n-                       \"This has no defs. Could be extending parameters.\\n\");\n-            }\n-        }\n-    }\n-  return zeinsn_list;\n+\tzei.insn = insn;\n+\tnote_stores (PATTERN (insn), add_removable_zero_extend, &zei);\n+      }\n+\n+  return zei.insn_list;\n }\n \n /* This is the main function that checks the insn stream for redundant\n@@ -906,13 +902,12 @@ find_and_remove_ze (void)\n \n   max_insn_uid = get_max_uid ();\n \n-  is_insn_merge_attempted = XNEWVEC (enum insn_merge_code,\n-                                     sizeof (enum insn_merge_code)* max_insn_uid);\n+  is_insn_merge_attempted\n+    = XNEWVEC (enum insn_merge_code,\n+\t       sizeof (enum insn_merge_code) * max_insn_uid);\n \n   for (i = 0; i < max_insn_uid; i++)\n-    {\n-      is_insn_merge_attempted[i] = MERGE_NOT_ATTEMPTED;\n-    }\n+    is_insn_merge_attempted[i] = MERGE_NOT_ATTEMPTED;\n \n   num_ze_opportunities = num_realized = 0;\n \n@@ -942,9 +937,7 @@ find_and_remove_ze (void)\n \n   /* Delete all useless zero extensions here in one sweep.  */\n   for (ix = 0; VEC_iterate (rtx, zeinsn_del_list, ix, curr_insn); ix++)\n-    {\n-      delete_insn (curr_insn);\n-    }\n+    delete_insn (curr_insn);\n \n   free (is_insn_merge_attempted);\n   VEC_free (rtx, heap, zeinsn_list);"}]}