{"sha": "8f17461bdfeed758f2be71529fc3af55a76ea3e1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGYxNzQ2MWJkZmVlZDc1OGYyYmU3MTUyOWZjM2FmNTVhNzZlYTNlMQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2020-05-18T15:52:14Z"}, "committer": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2020-05-18T15:52:14Z"}, "message": "i386: Avoid reversing a non-trapping comparison to a trapping one [PR95169]\n\ngcc/ChangeLog:\n\n\tPR target/95169\n\t* config/i386/i386-expand.c (ix86_expand_int_movcc):\n\t Avoid reversing a non-trapping comparison to a trapping one.\n\ntestsuite/ChangeLog:\n\n\tPR target/95169\n\t* gcc.target/i386/pr95169.c: New test.", "tree": {"sha": "15b4763a2f1151b5db1d0b8502f6cc74ac6de883", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/15b4763a2f1151b5db1d0b8502f6cc74ac6de883"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f17461bdfeed758f2be71529fc3af55a76ea3e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f17461bdfeed758f2be71529fc3af55a76ea3e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f17461bdfeed758f2be71529fc3af55a76ea3e1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f17461bdfeed758f2be71529fc3af55a76ea3e1/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b8f3117263ca79b3febadadb07732588d99d5f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b8f3117263ca79b3febadadb07732588d99d5f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b8f3117263ca79b3febadadb07732588d99d5f6"}], "stats": {"total": 67, "additions": 57, "deletions": 10}, "files": [{"sha": "4082217fd351eaf0c0c37a2dadb27f6f80498b6e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f17461bdfeed758f2be71529fc3af55a76ea3e1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f17461bdfeed758f2be71529fc3af55a76ea3e1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8f17461bdfeed758f2be71529fc3af55a76ea3e1", "patch": "@@ -1,3 +1,9 @@\n+2020-05-18  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/95169\n+\t* config/i386/i386-expand.c (ix86_expand_int_movcc):\n+\t Avoid reversing a non-trapping comparison to a trapping one.\n+\n 2020-05-18  Alex Coplan  <alex.coplan@arm.com>\n \n \t* config/arm/arm.c (output_move_double): Fix codegen when loading into"}, {"sha": "79f827fd65348f040bb24b922aa9ce453968b883", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f17461bdfeed758f2be71529fc3af55a76ea3e1/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f17461bdfeed758f2be71529fc3af55a76ea3e1/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=8f17461bdfeed758f2be71529fc3af55a76ea3e1", "patch": "@@ -3057,11 +3057,14 @@ ix86_expand_int_movcc (rtx operands[])\n \t    {\n \t      gcc_assert (!DECIMAL_FLOAT_MODE_P (cmp_mode));\n \n-\t      /* We may be reversing unordered compare to normal compare, that\n-\t\t is not valid in general (we may convert non-trapping condition\n-\t\t to trapping one), however on i386 we currently emit all\n-\t\t comparisons unordered.  */\n-\t      new_code = reverse_condition_maybe_unordered (code);\n+\t      /* We may be reversing a non-trapping\n+\t\t comparison to a trapping comparison.  */\n+\t\t  if (HONOR_NANS (cmp_mode) && flag_trapping_math\n+\t\t      && code != EQ && code != NE\n+\t\t      && code != ORDERED && code != UNORDERED)\n+\t\t    new_code = UNKNOWN;\n+\t\t  else\n+\t\t    new_code = reverse_condition_maybe_unordered (code);\n \t    }\n \t  else\n \t    new_code = ix86_reverse_condition (code, cmp_mode);\n@@ -3213,11 +3216,15 @@ ix86_expand_int_movcc (rtx operands[])\n \t\t{\n \t\t  gcc_assert (!DECIMAL_FLOAT_MODE_P (cmp_mode));\n \n-\t\t  /* We may be reversing unordered compare to normal compare,\n-\t\t     that is not valid in general (we may convert non-trapping\n-\t\t     condition to trapping one), however on i386 we currently\n-\t\t     emit all comparisons unordered.  */\n-\t\t  new_code = reverse_condition_maybe_unordered (code);\n+\t\t  /* We may be reversing a non-trapping\n+\t\t     comparison to a trapping comparison.  */\n+\t\t  if (HONOR_NANS (cmp_mode) && flag_trapping_math\n+\t\t      && code != EQ && code != NE\n+\t\t      && code != ORDERED && code != UNORDERED)\n+\t\t    new_code = UNKNOWN;\n+\t\t  else\n+\t\t    new_code = reverse_condition_maybe_unordered (code);\n+\n \t\t}\n \t      else\n \t\t{"}, {"sha": "320095c49ae09abbb01672a8a07a7b4e22250117", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f17461bdfeed758f2be71529fc3af55a76ea3e1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f17461bdfeed758f2be71529fc3af55a76ea3e1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8f17461bdfeed758f2be71529fc3af55a76ea3e1", "patch": "@@ -1,4 +1,10 @@\n+2020-05-18  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/95169\n+\t* gcc.target/i386/pr95169.c: New test.\n+\n 2020-05-18  Alex Coplan  <alex.coplan@arm.com>\n+\n \t* gcc.c-torture/compile/packed-aligned-1.c: New test.\n \t* gcc.c-torture/execute/packed-aligned.c: New test.\n "}, {"sha": "91411744228ecaf1f5b35b76f00c1c896adc696e", "filename": "gcc/testsuite/gcc.target/i386/pr95169.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f17461bdfeed758f2be71529fc3af55a76ea3e1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95169.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f17461bdfeed758f2be71529fc3af55a76ea3e1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95169.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95169.c?ref=8f17461bdfeed758f2be71529fc3af55a76ea3e1", "patch": "@@ -0,0 +1,28 @@\n+/* PR target/95169 */\n+/* { dg-do run { target ia32 } } */\n+/* { dg-options \"-O0 -march=i386 -mtune=generic\" } */\n+/* { dg-require-effective-target fenv_exceptions } */\n+\n+#include <fenv.h>\n+\n+void\n+f (double y)\n+{\n+  if (__builtin_expect (y == 0.0, 0))\n+    __builtin_abort ();\n+}\n+\n+int\n+main (void)\n+{\n+  double y = __builtin_nan (\"\");\n+\n+  feclearexcept (FE_INVALID);\n+\n+  f (y);\n+\n+  if (fetestexcept (FE_INVALID))\n+    __builtin_abort ();\n+\n+  return 0;\n+}"}]}