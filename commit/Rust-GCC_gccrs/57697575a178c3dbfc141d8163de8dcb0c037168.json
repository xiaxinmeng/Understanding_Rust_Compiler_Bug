{"sha": "57697575a178c3dbfc141d8163de8dcb0c037168", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTc2OTc1NzVhMTc4YzNkYmZjMTQxZDgxNjNkZThkY2IwYzAzNzE2OA==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-05-15T13:01:07Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-05-15T13:01:07Z"}, "message": "(reload): Don't start 2-group unless it could be finished.\n\nFrom-SVN: r4464", "tree": {"sha": "0af59d461ed7c7690d3e34166d1b90a7017d3cc3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0af59d461ed7c7690d3e34166d1b90a7017d3cc3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/57697575a178c3dbfc141d8163de8dcb0c037168", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57697575a178c3dbfc141d8163de8dcb0c037168", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57697575a178c3dbfc141d8163de8dcb0c037168", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57697575a178c3dbfc141d8163de8dcb0c037168/comments", "author": null, "committer": null, "parents": [{"sha": "668450ce64f733bcaf8c41f1c156c48a5e2afd1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/668450ce64f733bcaf8c41f1c156c48a5e2afd1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/668450ce64f733bcaf8c41f1c156c48a5e2afd1a"}], "stats": {"total": 6, "additions": 6, "deletions": 0}, "files": [{"sha": "32f6bf58c62ae8a038a46b6f02ccf8954e62f6f2", "filename": "gcc/reload1.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57697575a178c3dbfc141d8163de8dcb0c037168/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57697575a178c3dbfc141d8163de8dcb0c037168/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=57697575a178c3dbfc141d8163de8dcb0c037168", "patch": "@@ -1680,8 +1680,14 @@ reload (first, global, dumpfile)\n \t\t  if (i == FIRST_PSEUDO_REGISTER)\n \t\t    for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n \t\t      {\n+\t\t\tint k;\n \t\t\tj = potential_reload_regs[i];\n+\t\t\t/* Verify that J+1 is a potential reload reg.  */\n+\t\t\tfor (k = 0; k < FIRST_PSEUDO_REGISTER; k++)\n+\t\t\t  if (potential_reload_regs[k] == j + 1)\n+\t\t\t    break;\n \t\t\tif (j >= 0 && j + 1 < FIRST_PSEUDO_REGISTER\n+\t\t\t    && k < FIRST_PSEUDO_REGISTER\n \t\t\t    && spill_reg_order[j] < 0 && spill_reg_order[j + 1] < 0\n \t\t\t    && TEST_HARD_REG_BIT (reg_class_contents[class], j)\n \t\t\t    && TEST_HARD_REG_BIT (reg_class_contents[class], j + 1)"}]}