{"sha": "5434dc0730795cf6a2ef8a9fe20e4dcc9cd077be", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTQzNGRjMDczMDc5NWNmNmEyZWY4YTlmZTIwZTRkY2M5Y2QwNzdiZQ==", "commit": {"author": {"name": "Marcos Diaz", "email": "marcos.diaz@tallertechnologies.com", "date": "2015-01-15T05:29:12Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2015-01-15T05:29:12Z"}, "message": "common.opt: New option -fstack-protector-explicit.\n\n2015-01-14  Marcos Diaz <marcos.diaz@tallertechnologies.com>\n\n\t* common.opt: New option -fstack-protector-explicit.\n\t* cfgexpand.c (SPCT_FLAG_EXPLICIT): New enum.\n\t(stack_protect_decl_phase): Handle stack_protect attribute for\n\texplicit stack protection requests.\n\t(expand_used_vars): Similarly.\n\t* doc/cpp.texi (__SSP_EXPLICIT__): Document predefined macro.\n\t* doc/extend.texi: Add documentation for \"stack_protect\" attribute.\n\t* doc/invoke.texi: Add documentation for -fstack-protector-explicit.\n\n\t* c-cppbuiltin.c (c_cpp_builtins): New cpp define __SSP_EXPLICIT__\n\tfor the new option fstack-protector_explicit.\n\t* c-common.c (c_common_attribute_table): Add stack_protect attribute.\n\t(handle_stack_protect_attribute): New function.\n\n\t* gcc.dg/stackprotectexplicit1.c: New test.\n\t* g++.dg/stackprotectexplicit2.c: New test.\n\nFrom-SVN: r219633", "tree": {"sha": "491382b1163238c05c384ce06c8581bc06d76bfb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/491382b1163238c05c384ce06c8581bc06d76bfb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5434dc0730795cf6a2ef8a9fe20e4dcc9cd077be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5434dc0730795cf6a2ef8a9fe20e4dcc9cd077be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5434dc0730795cf6a2ef8a9fe20e4dcc9cd077be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5434dc0730795cf6a2ef8a9fe20e4dcc9cd077be/comments", "author": {"login": "mdmarcosdiaz", "id": 6313613, "node_id": "MDQ6VXNlcjYzMTM2MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/6313613?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mdmarcosdiaz", "html_url": "https://github.com/mdmarcosdiaz", "followers_url": "https://api.github.com/users/mdmarcosdiaz/followers", "following_url": "https://api.github.com/users/mdmarcosdiaz/following{/other_user}", "gists_url": "https://api.github.com/users/mdmarcosdiaz/gists{/gist_id}", "starred_url": "https://api.github.com/users/mdmarcosdiaz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mdmarcosdiaz/subscriptions", "organizations_url": "https://api.github.com/users/mdmarcosdiaz/orgs", "repos_url": "https://api.github.com/users/mdmarcosdiaz/repos", "events_url": "https://api.github.com/users/mdmarcosdiaz/events{/privacy}", "received_events_url": "https://api.github.com/users/mdmarcosdiaz/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1a0c69834516bf7731d34aa47febea6850ed773f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a0c69834516bf7731d34aa47febea6850ed773f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a0c69834516bf7731d34aa47febea6850ed773f"}], "stats": {"total": 156, "additions": 147, "deletions": 9}, "files": [{"sha": "701c6c6734af139d452952a71730dc943e9f8d5e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5434dc0730795cf6a2ef8a9fe20e4dcc9cd077be/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5434dc0730795cf6a2ef8a9fe20e4dcc9cd077be/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5434dc0730795cf6a2ef8a9fe20e4dcc9cd077be", "patch": "@@ -1,3 +1,14 @@\n+2015-01-14  Marcos Diaz <marcos.diaz@tallertechnologies.com>\n+\n+\t* common.opt: New option -fstack-protector-explicit.\n+\t* cfgexpand.c (SPCT_FLAG_EXPLICIT): New enum.\n+\t(stack_protect_decl_phase): Handle stack_protect attribute for\n+\texplicit stack protection requests.\n+\t(expand_used_vars): Similarly.\n+\t* doc/cpp.texi (__SSP_EXPLICIT__): Document predefined macro.\n+\t* doc/extend.texi: Add documentation for \"stack_protect\" attribute.\n+\t* doc/invoke.texi: Add documentation for -fstack-protector-explicit.\n+\n 2015-01-14  Oleg Endo  <olegendo@gcc.gnu.org>\n \n \tPR target/53988"}, {"sha": "976404579d2f8b92207b2d16cee9d068b01303b2", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5434dc0730795cf6a2ef8a9fe20e4dcc9cd077be/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5434dc0730795cf6a2ef8a9fe20e4dcc9cd077be/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=5434dc0730795cf6a2ef8a9fe20e4dcc9cd077be", "patch": "@@ -1,3 +1,10 @@\n+2015-01-14  Marcos Diaz <marcos.diaz@tallertechnologies.com>\n+\n+\t* c-cppbuiltin.c (c_cpp_builtins): New cpp define __SSP_EXPLICIT__\n+\tfor the new option fstack-protector_explicit.\n+\t* c-common.c (c_common_attribute_table): Add stack_protect attribute.\n+\t(handle_stack_protect_attribute): New function.\n+\n 2015-01-13  Martin Uecker <uecker@eecs.berkeley.edu>\n \n \t* c.opt: New option -Warray-bounds=."}, {"sha": "054f5a0e94af58fac7e56257a898e77b1562d876", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5434dc0730795cf6a2ef8a9fe20e4dcc9cd077be/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5434dc0730795cf6a2ef8a9fe20e4dcc9cd077be/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=5434dc0730795cf6a2ef8a9fe20e4dcc9cd077be", "patch": "@@ -327,6 +327,7 @@ static tree handle_no_address_safety_analysis_attribute (tree *, tree, tree,\n \t\t\t\t\t\t\t int, bool *);\n static tree handle_no_sanitize_undefined_attribute (tree *, tree, tree, int,\n \t\t\t\t\t\t    bool *);\n+static tree handle_stack_protect_attribute (tree *, tree, tree, int, bool *);\n static tree handle_noinline_attribute (tree *, tree, tree, int, bool *);\n static tree handle_noclone_attribute (tree *, tree, tree, int, bool *);\n static tree handle_leaf_attribute (tree *, tree, tree, int, bool *);\n@@ -657,6 +658,8 @@ const struct attribute_spec c_common_attribute_table[] =\n \t\t\t      handle_noreturn_attribute, false },\n   { \"volatile\",               0, 0, true,  false, false,\n \t\t\t      handle_noreturn_attribute, false },\n+  { \"stack_protect\",          0, 0, true,  false, false,\n+\t\t\t      handle_stack_protect_attribute, false },\n   { \"noinline\",               0, 0, true,  false, false,\n \t\t\t      handle_noinline_attribute, false },\n   { \"noclone\",                0, 0, true,  false, false,\n@@ -6769,6 +6772,25 @@ handle_no_sanitize_undefined_attribute (tree *node, tree name, tree, int,\n   return NULL_TREE;\n }\n \n+/* Handle a \"stack_protect\" attribute; arguments as in\n+   struct attribute_spec.handler.  */\n+static tree\n+handle_stack_protect_attribute (tree *node, tree name, tree, int,\n+\t\t\t\tbool *no_add_attrs)\n+{\n+  if (TREE_CODE (*node) != FUNCTION_DECL)\n+    {\n+      warning (OPT_Wattributes, \"%qE attribute ignored\", name);\n+      *no_add_attrs = true;\n+    }\n+  else\n+    DECL_ATTRIBUTES (*node) \n+      = tree_cons (get_identifier (\"stack_protect\"),\n+\t\t   NULL_TREE, DECL_ATTRIBUTES (*node));\n+\n+  return NULL_TREE;\n+}\n+\n /* Handle a \"noinline\" attribute; arguments as in\n    struct attribute_spec.handler.  */\n "}, {"sha": "0b00d59fd36e19d141f99a8504b6bc43291a44b7", "filename": "gcc/c-family/c-cppbuiltin.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5434dc0730795cf6a2ef8a9fe20e4dcc9cd077be/gcc%2Fc-family%2Fc-cppbuiltin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5434dc0730795cf6a2ef8a9fe20e4dcc9cd077be/gcc%2Fc-family%2Fc-cppbuiltin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-cppbuiltin.c?ref=5434dc0730795cf6a2ef8a9fe20e4dcc9cd077be", "patch": "@@ -1212,6 +1212,8 @@ c_cpp_builtins (cpp_reader *pfile)\n   /* Make the choice of the stack protector runtime visible to source code.\n      The macro names and values here were chosen for compatibility with an\n      earlier implementation, i.e. ProPolice.  */\n+  if (flag_stack_protect == 4)\n+    cpp_define (pfile, \"__SSP_EXPLICIT__=4\");\n   if (flag_stack_protect == 3)\n     cpp_define (pfile, \"__SSP_STRONG__=3\");\n   if (flag_stack_protect == 2)"}, {"sha": "c92c786ea388576b31022ce6f9b74eb9cde66cf0", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 27, "deletions": 6, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5434dc0730795cf6a2ef8a9fe20e4dcc9cd077be/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5434dc0730795cf6a2ef8a9fe20e4dcc9cd077be/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=5434dc0730795cf6a2ef8a9fe20e4dcc9cd077be", "patch": "@@ -1411,7 +1411,8 @@ clear_tree_used (tree block)\n enum {\n   SPCT_FLAG_DEFAULT = 1,\n   SPCT_FLAG_ALL = 2,\n-  SPCT_FLAG_STRONG = 3\n+  SPCT_FLAG_STRONG = 3,\n+  SPCT_FLAG_EXPLICIT = 4\n };\n \n /* Examine TYPE and determine a bit mask of the following features.  */\n@@ -1484,7 +1485,10 @@ stack_protect_decl_phase (tree decl)\n     has_short_buffer = true;\n \n   if (flag_stack_protect == SPCT_FLAG_ALL\n-      || flag_stack_protect == SPCT_FLAG_STRONG)\n+      || flag_stack_protect == SPCT_FLAG_STRONG\n+      || (flag_stack_protect == SPCT_FLAG_EXPLICIT\n+\t  && lookup_attribute (\"stack_protect\",\n+\t\t\t       DECL_ATTRIBUTES (current_function_decl))))\n     {\n       if ((bits & (SPCT_HAS_SMALL_CHAR_ARRAY | SPCT_HAS_LARGE_CHAR_ARRAY))\n \t  && !(bits & SPCT_HAS_AGGREGATE))\n@@ -1859,7 +1863,11 @@ expand_used_vars (void)\n \n       /* If stack protection is enabled, we don't share space between\n \t vulnerable data and non-vulnerable data.  */\n-      if (flag_stack_protect)\n+      if (flag_stack_protect != 0\n+\t  && (flag_stack_protect != SPCT_FLAG_EXPLICIT\n+\t      || (flag_stack_protect == SPCT_FLAG_EXPLICIT\n+\t\t  && lookup_attribute (\"stack_protect\",\n+\t\t\t\t       DECL_ATTRIBUTES (current_function_decl)))))\n \tadd_stack_protection_conflicts ();\n \n       /* Now that we have collected all stack variables, and have computed a\n@@ -1877,15 +1885,24 @@ expand_used_vars (void)\n \n     case SPCT_FLAG_STRONG:\n       if (gen_stack_protect_signal\n-\t  || cfun->calls_alloca || has_protected_decls)\n+\t  || cfun->calls_alloca || has_protected_decls\n+\t  || lookup_attribute (\"stack_protect\",\n+\t\t\t       DECL_ATTRIBUTES (current_function_decl)))\n \tcreate_stack_guard ();\n       break;\n \n     case SPCT_FLAG_DEFAULT:\n-      if (cfun->calls_alloca || has_protected_decls)\n+      if (cfun->calls_alloca || has_protected_decls\n+\t  || lookup_attribute (\"stack_protect\",\n+\t\t\t       DECL_ATTRIBUTES (current_function_decl)))\n \tcreate_stack_guard ();\n       break;\n \n+    case SPCT_FLAG_EXPLICIT:\n+      if (lookup_attribute (\"stack_protect\",\n+\t\t\t    DECL_ATTRIBUTES (current_function_decl)))\n+\tcreate_stack_guard ();\n+      break;\n     default:\n       ;\n     }\n@@ -1911,7 +1928,11 @@ expand_used_vars (void)\n \t  expand_stack_vars (stack_protect_decl_phase_1, &data);\n \n \t  /* Phase 2 contains other kinds of arrays.  */\n-\t  if (flag_stack_protect == 2)\n+\t  if (flag_stack_protect == SPCT_FLAG_ALL\n+\t      || flag_stack_protect == SPCT_FLAG_STRONG\n+\t      || (flag_stack_protect == SPCT_FLAG_EXPLICIT\n+\t\t  && lookup_attribute (\"stack_protect\",\n+\t\t\t\t       DECL_ATTRIBUTES (current_function_decl))))\n \t    expand_stack_vars (stack_protect_decl_phase_2, &data);\n \t}\n "}, {"sha": "c3219604836d468a6389c1070118b394d2c192af", "filename": "gcc/common.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5434dc0730795cf6a2ef8a9fe20e4dcc9cd077be/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5434dc0730795cf6a2ef8a9fe20e4dcc9cd077be/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=5434dc0730795cf6a2ef8a9fe20e4dcc9cd077be", "patch": "@@ -2093,6 +2093,10 @@ fstack-protector-strong\n Common Report RejectNegative Var(flag_stack_protect, 3)\n Use a smart stack protection method for certain functions\n \n+fstack-protector-explicit\n+Common Report RejectNegative Var(flag_stack_protect, 4)\n+Use stack protection method only for functions with the stack_protect attribute\n+\n fstack-usage\n Common RejectNegative Var(flag_stack_usage)\n Output stack usage information on a per-function basis"}, {"sha": "10b72e7e61b07138e5c72f79f258d4d7d07184a7", "filename": "gcc/doc/cpp.texi", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5434dc0730795cf6a2ef8a9fe20e4dcc9cd077be/gcc%2Fdoc%2Fcpp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5434dc0730795cf6a2ef8a9fe20e4dcc9cd077be/gcc%2Fdoc%2Fcpp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp.texi?ref=5434dc0730795cf6a2ef8a9fe20e4dcc9cd077be", "patch": "@@ -2351,6 +2351,10 @@ in use.\n This macro is defined, with value 3, when @option{-fstack-protector-strong} is\n in use.\n \n+@item __SSP_EXPLICIT__\n+This macro is defined, with value 4, when @option{-fstack-protector-explicit} is\n+in use.\n+\n @item __SANITIZE_ADDRESS__\n This macro is defined, with value 1, when @option{-fsanitize=address}\n or @option{-fsanitize=kernel-address} are in use."}, {"sha": "bf6d7102147deacff3ac0661aa9bba6d44396939", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5434dc0730795cf6a2ef8a9fe20e4dcc9cd077be/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5434dc0730795cf6a2ef8a9fe20e4dcc9cd077be/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=5434dc0730795cf6a2ef8a9fe20e4dcc9cd077be", "patch": "@@ -2207,7 +2207,7 @@ attributes are currently defined for functions on all targets:\n @code{no_sanitize_address}, @code{no_address_safety_analysis},\n @code{no_sanitize_thread},\n @code{no_sanitize_undefined}, @code{no_reorder}, @code{bnd_legacy},\n-@code{bnd_instrument},\n+@code{bnd_instrument}, @code{stack_protect},\n @code{error} and @code{warning}.\n Several other attributes are defined for functions on particular\n target systems.  Other attributes, including @code{section} are\n@@ -3444,6 +3444,12 @@ prologue which decides whether to split the stack.  Functions with the\n @code{no_split_stack} attribute do not have that prologue, and thus\n may run with only a small amount of stack space available.\n \n+@item stack_protect\n+@cindex @code{stack_protect} function attribute\n+This function attribute make a stack protection of the function if \n+flags @option{fstack-protector} or @option{fstack-protector-strong}\n+or @option{fstack-protector-explicit} are set.\n+\n @item noinline\n @cindex @code{noinline} function attribute\n This function attribute prevents a function from being considered for"}, {"sha": "638ed9ac0e1f1d4ee162090bda95da143815dc6a", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5434dc0730795cf6a2ef8a9fe20e4dcc9cd077be/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5434dc0730795cf6a2ef8a9fe20e4dcc9cd077be/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=5434dc0730795cf6a2ef8a9fe20e4dcc9cd077be", "patch": "@@ -428,8 +428,9 @@ Objective-C and Objective-C++ Dialects}.\n -fsel-sched-pipelining -fsel-sched-pipelining-outer-loops @gol\n -fsemantic-interposition @gol\n -fshrink-wrap -fsignaling-nans -fsingle-precision-constant @gol\n--fsplit-ivs-in-unroller -fsplit-wide-types -fssa-phiopt -fstack-protector @gol\n--fstack-protector-all -fstack-protector-strong -fstrict-aliasing @gol\n+-fsplit-ivs-in-unroller -fsplit-wide-types -fssa-phiopt @gol\n+-fstack-protector -fstack-protector-all -fstack-protector-strong @gol\n+-fstack-protector-explicit -fstrict-aliasing @gol\n -fstrict-overflow -fthread-jumps -ftracer -ftree-bit-ccp @gol\n -ftree-builtin-call-dce -ftree-ccp -ftree-ch @gol\n -ftree-coalesce-inline-vars -ftree-coalesce-vars -ftree-copy-prop @gol\n@@ -9838,6 +9839,11 @@ Like @option{-fstack-protector} but includes additional functions to\n be protected --- those that have local array definitions, or have\n references to local frame addresses.\n \n+@item -fstack-protector-explicit\n+@opindex fstack-protector-explicit\n+Like @option{-fstack-protector} but only protects those functions which\n+have the @code{stack_protect} attribute\n+\n @item -fsection-anchors\n @opindex fsection-anchors\n Try to reduce the number of symbolic address calculations by using"}, {"sha": "1c53160960f02118a52a82c4b93e326dc06bae96", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5434dc0730795cf6a2ef8a9fe20e4dcc9cd077be/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5434dc0730795cf6a2ef8a9fe20e4dcc9cd077be/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5434dc0730795cf6a2ef8a9fe20e4dcc9cd077be", "patch": "@@ -1,3 +1,8 @@\n+2015-01-14  Marcos Diaz <marcos.diaz@tallertechnologies.com>\n+\n+\t* gcc.dg/stackprotectexplicit1.c: New test.\n+\t* g++.dg/stackprotectexplicit2.c: New test.\n+\n 2015-01-14  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR target/61933"}, {"sha": "9cf9ab909c98f8a86655a3ad2322928d711a5402", "filename": "gcc/testsuite/g++.dg/stackprotectexplicit2.C", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5434dc0730795cf6a2ef8a9fe20e4dcc9cd077be/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fstackprotectexplicit2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5434dc0730795cf6a2ef8a9fe20e4dcc9cd077be/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fstackprotectexplicit2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fstackprotectexplicit2.C?ref=5434dc0730795cf6a2ef8a9fe20e4dcc9cd077be", "patch": "@@ -0,0 +1,27 @@\n+/* Test that stack protection is done on chosen functions. */\n+\n+/* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -fstack-protector-explicit\" } */\n+\n+int A()\n+{\n+\tint A[23];\n+\tchar b[22];\n+}\n+\n+int __attribute__((stack_protect)) B()\n+{\n+\tint a;\n+\tint b;\n+\treturn a+b;\n+}\n+\n+int __attribute__((stack_protect)) c()\n+{\n+\tint a;\n+\tchar b[34];\n+\treturn 0;\n+}\n+\n+\n+/* { dg-final { scan-assembler-times \"stack_chk_fail\" 2 } } */\n\\ No newline at end of file"}, {"sha": "658c297d9f58e74f56309a6f97fa623700d04817", "filename": "gcc/testsuite/gcc.dg/stackprotectexplicit1.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5434dc0730795cf6a2ef8a9fe20e4dcc9cd077be/gcc%2Ftestsuite%2Fgcc.dg%2Fstackprotectexplicit1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5434dc0730795cf6a2ef8a9fe20e4dcc9cd077be/gcc%2Ftestsuite%2Fgcc.dg%2Fstackprotectexplicit1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstackprotectexplicit1.c?ref=5434dc0730795cf6a2ef8a9fe20e4dcc9cd077be", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do run { target native } } */\n+/* { dg-options \"-fstack-protector-explicit\" } */\n+/* { dg-require-effective-target fstack_protector } */\n+\n+#include <stdlib.h>\n+\n+void\n+__stack_chk_fail (void)\n+{\n+  exit (0); /* pass */\n+}\n+\n+int __attribute__((stack_protect)) main ()\n+{\n+  int i;\n+  char foo[255];\n+\n+  // smash stack\n+  for (i = 0; i <= 400; i++)\n+    foo[i] = 42;\n+\n+  return 1; /* fail */\n+}"}]}