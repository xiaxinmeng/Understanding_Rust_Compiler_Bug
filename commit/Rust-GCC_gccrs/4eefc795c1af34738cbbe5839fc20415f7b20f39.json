{"sha": "4eefc795c1af34738cbbe5839fc20415f7b20f39", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGVlZmM3OTVjMWFmMzQ3MzhjYmJlNTgzOWZjMjA0MTVmN2IyMGYzOQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-12-08T22:28:29Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-12-08T22:28:29Z"}, "message": "re PR c++/51459 ('double free or corruption' involving std::function and lambdas)\n\n\tPR c++/51459\n\t* pt.c (tsubst_expr) [DECL_EXPR]: Handle capture proxies properly.\n\t* semantics.c (insert_capture_proxy): No longer static.\n\t* cp-tree.h: Declare it.\n\nFrom-SVN: r182141", "tree": {"sha": "66965afdbe726ca6806beb951c83c5821267d17b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/66965afdbe726ca6806beb951c83c5821267d17b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4eefc795c1af34738cbbe5839fc20415f7b20f39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4eefc795c1af34738cbbe5839fc20415f7b20f39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4eefc795c1af34738cbbe5839fc20415f7b20f39", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4eefc795c1af34738cbbe5839fc20415f7b20f39/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "13a3e5b6d8c650d9fb74d641dc058e14b44c6f9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13a3e5b6d8c650d9fb74d641dc058e14b44c6f9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13a3e5b6d8c650d9fb74d641dc058e14b44c6f9d"}], "stats": {"total": 62, "additions": 61, "deletions": 1}, "files": [{"sha": "70a93bd8df18bcd97beb1842ffe8e3c29dce8ef1", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4eefc795c1af34738cbbe5839fc20415f7b20f39/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4eefc795c1af34738cbbe5839fc20415f7b20f39/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4eefc795c1af34738cbbe5839fc20415f7b20f39", "patch": "@@ -1,3 +1,10 @@\n+2011-12-08  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/51459\n+\t* pt.c (tsubst_expr) [DECL_EXPR]: Handle capture proxies properly.\n+\t* semantics.c (insert_capture_proxy): No longer static.\n+\t* cp-tree.h: Declare it.\n+\n 2011-12-07  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/51401"}, {"sha": "87cb8b6d04e508136f70a14552062277688d32d4", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4eefc795c1af34738cbbe5839fc20415f7b20f39/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4eefc795c1af34738cbbe5839fc20415f7b20f39/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=4eefc795c1af34738cbbe5839fc20415f7b20f39", "patch": "@@ -5593,6 +5593,7 @@ extern void apply_lambda_return_type            (tree, tree);\n extern tree add_capture                         (tree, tree, tree, bool, bool);\n extern tree add_default_capture                 (tree, tree, tree);\n extern tree build_capture_proxy\t\t\t(tree);\n+extern void insert_capture_proxy\t\t(tree);\n extern void insert_pending_capture_proxies\t(void);\n extern bool is_capture_proxy\t\t\t(tree);\n extern bool is_normal_capture_proxy             (tree);"}, {"sha": "296cd545794d09f90b53c9760a80dba2217177c1", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4eefc795c1af34738cbbe5839fc20415f7b20f39/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4eefc795c1af34738cbbe5839fc20415f7b20f39/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=4eefc795c1af34738cbbe5839fc20415f7b20f39", "patch": "@@ -12810,6 +12810,11 @@ tsubst_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl,\n \t\t    && ANON_AGGR_TYPE_P (TREE_TYPE (decl)))\n \t\t  /* Anonymous aggregates are a special case.  */\n \t\t  finish_anon_union (decl);\n+\t\telse if (is_capture_proxy (DECL_EXPR_DECL (t)))\n+\t\t  {\n+\t\t    DECL_CONTEXT (decl) = current_function_decl;\n+\t\t    insert_capture_proxy (decl);\n+\t\t  }\n \t\telse\n \t\t  {\n \t\t    int const_init = false;"}, {"sha": "2dab6a722a6e5bf9a85c0a4cf3dbe96473ae7664", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4eefc795c1af34738cbbe5839fc20415f7b20f39/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4eefc795c1af34738cbbe5839fc20415f7b20f39/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=4eefc795c1af34738cbbe5839fc20415f7b20f39", "patch": "@@ -8804,7 +8804,7 @@ is_normal_capture_proxy (tree decl)\n /* VAR is a capture proxy created by build_capture_proxy; add it to the\n    current function, which is the operator() for the appropriate lambda.  */\n \n-static inline void\n+void\n insert_capture_proxy (tree var)\n {\n   cp_binding_level *b;"}, {"sha": "5c97305a784d10bf8e2cf0c5e5b2a1aff1917968", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4eefc795c1af34738cbbe5839fc20415f7b20f39/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4eefc795c1af34738cbbe5839fc20415f7b20f39/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4eefc795c1af34738cbbe5839fc20415f7b20f39", "patch": "@@ -1,3 +1,8 @@\n+2011-12-08  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/51459\n+\t* g++.dg/cpp0x/lambda/lambda-template4.C: New.\n+\n 2011-12-08  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/51466"}, {"sha": "a65727a1d43ba3526d910d16c9310ff4ee4641bc", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-template4.C", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4eefc795c1af34738cbbe5839fc20415f7b20f39/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-template4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4eefc795c1af34738cbbe5839fc20415f7b20f39/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-template4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-template4.C?ref=4eefc795c1af34738cbbe5839fc20415f7b20f39", "patch": "@@ -0,0 +1,42 @@\n+// PR c++/51459\n+// { dg-do run { target c++11 } }\n+\n+struct func {\n+    virtual ~func() { }\n+    virtual void operator()() const = 0;\n+    virtual func* clone() const = 0;\n+};\n+\n+template<typename T>\n+struct funcimpl : func {\n+    explicit funcimpl(T t) : t(t) { }\n+    void operator()() const { t(); }\n+    func* clone() const { return new funcimpl(*this); }\n+    T t;\n+};\n+\n+struct function\n+{\n+    func* p;\n+\n+    template<typename T>\n+        function(T t) : p(new funcimpl<T>(t)) { }\n+\n+    ~function() { delete p; }\n+\n+    function(const function& f) : p(f.p->clone()) { }\n+\n+    function& operator=(const function& ) = delete;\n+\n+    void operator()() const { (*p)(); }\n+};\n+\n+template <typename F>\n+function animate(F f) { return [=]{ f(); }; }\n+\n+int main()\n+{\n+  function linear1 = []{};\n+  function av(animate(linear1));\n+  av();\n+}"}]}