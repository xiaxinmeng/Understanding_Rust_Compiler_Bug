{"sha": "36be30f1bc093381c0a51d718c2b1ca1a668a9b2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzZiZTMwZjFiYzA5MzM4MWMwYTUxZDcxOGMyYjFjYTFhNjY4YTliMg==", "commit": {"author": {"name": "Kresten Krab Thorup", "email": "krab@gcc.gnu.org", "date": "1993-04-13T02:12:40Z"}, "committer": {"name": "Kresten Krab Thorup", "email": "krab@gcc.gnu.org", "date": "1993-04-13T02:12:40Z"}, "message": "includes changed to double quote style\n\nFrom-SVN: r4113", "tree": {"sha": "ed0bbb42f0c4a93cdd59a3aa9e8a0175eb33ff69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed0bbb42f0c4a93cdd59a3aa9e8a0175eb33ff69"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/36be30f1bc093381c0a51d718c2b1ca1a668a9b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36be30f1bc093381c0a51d718c2b1ca1a668a9b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36be30f1bc093381c0a51d718c2b1ca1a668a9b2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36be30f1bc093381c0a51d718c2b1ca1a668a9b2/comments", "author": null, "committer": null, "parents": [{"sha": "ba2e27865bfb811e66901776b953d2687a9359c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba2e27865bfb811e66901776b953d2687a9359c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba2e27865bfb811e66901776b953d2687a9359c5"}], "stats": {"total": 143, "additions": 113, "deletions": 30}, "files": [{"sha": "1b2b25204ca6fa224823d837042985e6d7d2e473", "filename": "gcc/objc/Object.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36be30f1bc093381c0a51d718c2b1ca1a668a9b2/gcc%2Fobjc%2FObject.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36be30f1bc093381c0a51d718c2b1ca1a668a9b2/gcc%2Fobjc%2FObject.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FObject.h?ref=36be30f1bc093381c0a51d718c2b1ca1a668a9b2", "patch": "@@ -26,7 +26,7 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #ifndef __object_INCLUDE_GNU\n #define __object_INCLUDE_GNU\n \n-#include <objc/objc.h>\n+#include \"objc/objc.h\"\n \n /*\n  * All classes are derived from Object.  As such,"}, {"sha": "6a38b4838c0c6584e97b798dab399ec713b8f9be", "filename": "gcc/objc/Protocol.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36be30f1bc093381c0a51d718c2b1ca1a668a9b2/gcc%2Fobjc%2FProtocol.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36be30f1bc093381c0a51d718c2b1ca1a668a9b2/gcc%2Fobjc%2FProtocol.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FProtocol.h?ref=36be30f1bc093381c0a51d718c2b1ca1a668a9b2", "patch": "@@ -26,7 +26,7 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #ifndef __Protocol_INCLUDE_GNU\n #define __Protocol_INCLUDE_GNU\n \n-#include <objc/Object.h>\t\n+#include \"objc/Object.h\"\n \n @interface Protocol : Object\n {"}, {"sha": "d3d4d6014d44c4ed06e435cfb7d244f05c187ec3", "filename": "gcc/objc/archive.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36be30f1bc093381c0a51d718c2b1ca1a668a9b2/gcc%2Fobjc%2Farchive.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36be30f1bc093381c0a51d718c2b1ca1a668a9b2/gcc%2Fobjc%2Farchive.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Farchive.c?ref=36be30f1bc093381c0a51d718c2b1ca1a668a9b2", "patch": "@@ -30,7 +30,6 @@ You should have received a copy of the GNU General Public License along with\n */\n \n #include \"runtime.h\"\n-#include <objc/objc-archive.h>\n \n #define __objc_fatal(format, args...) \\\n  { fprintf(stderr, \"archining: \"); \\"}, {"sha": "7189c1d5bc86602626717a1f9b5d0691d84abff0", "filename": "gcc/objc/hash.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36be30f1bc093381c0a51d718c2b1ca1a668a9b2/gcc%2Fobjc%2Fhash.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36be30f1bc093381c0a51d718c2b1ca1a668a9b2/gcc%2Fobjc%2Fhash.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fhash.c?ref=36be30f1bc093381c0a51d718c2b1ca1a668a9b2", "patch": "@@ -25,8 +25,8 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n \n #include \"assert.h\"\n \n-#include <objc/hash.h>\n-#include <objc/objc.h>\n+#include \"objc/hash.h\"\n+#include \"objc/objc.h\"\n \n #include \"runtime.h\"\t\t/* for DEBUG_PRINTF */\n "}, {"sha": "b4e08a50bb0c54a9457607c0fb2eee26acb9fd5f", "filename": "gcc/objc/misc.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36be30f1bc093381c0a51d718c2b1ca1a668a9b2/gcc%2Fobjc%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36be30f1bc093381c0a51d718c2b1ca1a668a9b2/gcc%2Fobjc%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fmisc.c?ref=36be30f1bc093381c0a51d718c2b1ca1a668a9b2", "patch": "@@ -26,9 +26,6 @@ You should have received a copy of the GNU General Public License along with\n \n #include \"runtime.h\"\n \n-void* malloc(size_t);\n-void* realloc(void*, size_t);\n-\n void objc_error(id object, const char* fmt, va_list);\n \n void (*_objc_error)(id, const char*, va_list) = objc_error;\n@@ -53,7 +50,7 @@ objc_fatal(const char* msg)\n void*\n __objc_xmalloc(size_t size)\n {\n-  void* res = malloc(size);\n+  void* res = (void*) malloc(size);\n   if(!res)\n     objc_fatal(\"Virtual memory exhausted\\n\");\n   return res;\n@@ -62,7 +59,7 @@ __objc_xmalloc(size_t size)\n void*\n __objc_xrealloc(void* mem, size_t size)\n {\n-  void* res = realloc(mem, size);\n+  void* res = (void*) realloc(mem, size);\n   if(!res)\n     objc_fatal(\"Virtual memory exhausted\\n\");\n   return res;"}, {"sha": "f5162cd510034d1555c27da0c51f6bef76912593", "filename": "gcc/objc/objc-api.h", "status": "modified", "additions": 97, "deletions": 2, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36be30f1bc093381c0a51d718c2b1ca1a668a9b2/gcc%2Fobjc%2Fobjc-api.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36be30f1bc093381c0a51d718c2b1ca1a668a9b2/gcc%2Fobjc%2Fobjc-api.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-api.h?ref=36be30f1bc093381c0a51d718c2b1ca1a668a9b2", "patch": "@@ -26,8 +26,9 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #ifndef __objc_api_INCLUDE_GNU\n #define __objc_api_INCLUDE_GNU\n \n-#include <stdlib.h>\n-#include <objc/objc.h>\n+#include \"objc/objc.h\"\n+#include \"objc/hash.h\"\n+\n \n static const ARGSIZE = 96;\t\t/* for `method_get_argsize()' */\n \n@@ -234,5 +235,99 @@ object_is_meta_class(id object)\n   return CLS_ISMETA((Class_t)object);\n }\n \n+/* Archiving stuff */\n+\n+typedef int (*objc_typed_read_func)(void*, char*, int);\n+typedef int (*objc_typed_write_func)(void*, const char*, int);\n+typedef int (*objc_typed_flush_func)(void*);\n+typedef int (*objc_typed_eof_func)(void*);\n+\n+#define OBJC_READONLY   0x01\n+#define OBJC_WRITEONLY  0x02\n+\n+#define OBJC_MANAGED_STREAM  0x01\n+#define OBJC_FILE_STREAM     0x02\n+#define OBJC_MEMORY_STREAM   0x04\n+\n+#define OBJC_TYPED_STREAM_VERSION 0x01\n+\n+struct objc_typed_stream {\n+  void* physical;\n+  cache_ptr object_table;\t/* read/written objects */\n+  cache_ptr stream_table;\t/* other read/written but shared things.. */\n+  cache_ptr class_table;\t/* class version mapping */\n+  cache_ptr object_refs;\t/* forward references */\n+  int mode;\t\t\t/* OBJC_READONLY or OBJC_WRITEONLY */\n+  int type;\t\t\t/* MANAGED, FILE, MEMORY etc bit string */\n+  int version;\t\t\t/* version used when writing */\n+  int writing_root_p;\n+  objc_typed_read_func read;\n+  objc_typed_write_func write;\n+  objc_typed_eof_func eof;\n+  objc_typed_flush_func flush;\n+};\n+\n+/* opcode masks */\n+#define _B_VALUE   0x1fU\n+#define _B_CODE    0xe0U\n+#define _B_SIGN    0x10U\n+#define _B_NUMBER  0x0fU\n+\n+/* standard opcodes */\n+#define _B_INVALID 0x00U\n+#define _B_SINT    0x20U\n+#define _B_NINT    0x40U\n+#define _B_SSTR    0x60U\n+#define _B_NSTR    0x80U\n+#define _B_RCOMM   0xa0U\n+#define _B_UCOMM   0xc0U\n+#define _B_EXT     0xe0U\n+\n+/* eXtension opcodes */\n+#define _BX_OBJECT  0x00U\n+#define _BX_CLASS   0x01U\n+#define _BX_SEL     0x02U\n+#define _BX_OBJREF  0x03U\n+#define _BX_OBJROOT 0x04U\n+#define _BX_EXT     0x1fU\n+\n+/*\n+** Read and write objects as specified by TYPE.  All the `last'\n+** arguments are pointers to the objects to read/write.  \n+*/\n+\n+int objc_write_type (TypedStream* stream, const char* type, const void* data);\n+int objc_read_type (TypedStream* stream, const char* type, void* data);\n+\n+int objc_write_types (TypedStream* stream, const char* type, ...);\n+int objc_read_types (TypedStream* stream, const char* type, ...);\n+\n+int objc_write_object_reference (TypedStream* stream, id object);\n+int objc_write_root_object (TypedStream* stream, id object);\n+\n+/*\n+** Convenience funtions\n+*/\n+\n+int objc_write_array (TypedStream* stream, const char* type,\n+\t\t      int count, const void* data);\n+int objc_read_array (TypedStream* stream, const char* type,\n+\t\t     int count, void* data);\n+\n+int objc_write_object (TypedStream* stream, id object);\n+\n+/*\n+** Open a typed stream for reading or writing.  MODE may be either of\n+** OBJC_READONLY or OBJC_WRITEONLY.  \n+*/\n+\n+TypedStream* objc_open_typed_stream (FILE* physical, int mode);\n+TypedStream* objc_open_typed_stream_for_file (const char* file_name, int mode);\n+\n+void objc_close_typed_stream (TypedStream* stream);\n+\n+BOOL objc_end_of_typed_stream (TypedStream* stream);\n+void objc_flush_typed_stream (TypedStream* stream);\n+\n \n #endif /* not __objc_api_INCLUDE_GNU */"}, {"sha": "972fe76944a84d5d25dca3d8fa571deee8223bb8", "filename": "gcc/objc/objc.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36be30f1bc093381c0a51d718c2b1ca1a668a9b2/gcc%2Fobjc%2Fobjc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36be30f1bc093381c0a51d718c2b1ca1a668a9b2/gcc%2Fobjc%2Fobjc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc.h?ref=36be30f1bc093381c0a51d718c2b1ca1a668a9b2", "patch": "@@ -42,7 +42,6 @@ extern const char* __objc_hash_lookup_id;\n #endif\n \n \n-#include <stddef.h>\n #include <stdarg.h>\n #include <stdio.h>\n \n@@ -415,8 +414,6 @@ typedef struct objc_category {\n */\n \n typedef struct objc_typed_stream TypedStream;\n-#include <objc/objc-archive.h>\n-\n \n /*\n ** Structure used when a message is send to a class's super class.  The"}, {"sha": "e37fb56ef626f7d3ffe036369073e17e54e14982", "filename": "gcc/objc/runtime.h", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36be30f1bc093381c0a51d718c2b1ca1a668a9b2/gcc%2Fobjc%2Fruntime.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36be30f1bc093381c0a51d718c2b1ca1a668a9b2/gcc%2Fobjc%2Fruntime.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fruntime.h?ref=36be30f1bc093381c0a51d718c2b1ca1a668a9b2", "patch": "@@ -27,17 +27,17 @@ You should have received a copy of the GNU General Public License along with\n #ifndef __objc_runtime_INCLUDE_GNU\n #define __objc_runtime_INCLUDE_GNU\n \n-#include <objc/objc.h>\t\t/* core data types */\n-#include <objc/objc-api.h>\t/* runtime api functions */\n+#include \"gstdarg.h\"\t\t/* for varargs and va_list's */\n+#include \"gstddef.h\"\t\t/* so noone else will get system versions */\n+#include \"assert.h\"\n \n-#include <objc/hash.h>\t\t/* hash structures */\n-#include <objc/list.h>\t\t/* linear lists */\n+#include \"objc/objc.h\"\t\t/* core data types */\n+#include \"objc/objc-api.h\"\t/* runtime api functions */\n \n-#include <stdio.h>\t\t/* argh! I hate this */\n-#include <stdarg.h>\t\t/* for varargs and va_list's */\n-#include <stdlib.h>\n+#include \"objc/hash.h\"\t\t/* hash structures */\n+#include \"objc/list.h\"\t\t/* linear lists */\n \n-#include <assert.h>\n+#include <stdio.h>\t\t/* argh! I hate this */\n \n extern void __objc_add_class_to_hash(Class_t); /* (objc-class.c) */\n extern void __objc_init_selector_tables();     /* (objc-sel.c) */\n@@ -62,11 +62,6 @@ extern int __objc_selector_max_index;\n \n BOOL __objc_responds_to (id object, SEL sel); /* for internal use only! */\n \n-/* standard functions */\n-int bcopy(void*, void*, size_t);\n-int vprintf(const char*, va_list);\n-\n-\n #endif /* not __objc_runtime_INCLUDE_GNU */\n \n "}, {"sha": "fdbe6699c242261d216ac8b7865d4e764c6eeb88", "filename": "gcc/objc/selector.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36be30f1bc093381c0a51d718c2b1ca1a668a9b2/gcc%2Fobjc%2Fselector.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36be30f1bc093381c0a51d718c2b1ca1a668a9b2/gcc%2Fobjc%2Fselector.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fselector.c?ref=36be30f1bc093381c0a51d718c2b1ca1a668a9b2", "patch": "@@ -25,7 +25,7 @@ You should have received a copy of the GNU General Public License along with\n    covered by the GNU General Public License.  */\n \n #include \"runtime.h\"\n-#include <objc/sarray.h>\n+#include \"objc/sarray.h\"\n \n /* Initial selector hash table size. Value doesnt matter much */\n #define SELECTOR_HASH_SIZE 128"}, {"sha": "06fd95a730d44e00295c0e1655275e0e33256999", "filename": "gcc/objc/sendmsg.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36be30f1bc093381c0a51d718c2b1ca1a668a9b2/gcc%2Fobjc%2Fsendmsg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36be30f1bc093381c0a51d718c2b1ca1a668a9b2/gcc%2Fobjc%2Fsendmsg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fsendmsg.c?ref=36be30f1bc093381c0a51d718c2b1ca1a668a9b2", "patch": "@@ -35,7 +35,7 @@ const char* __objc_hash_lookup_id = \"Method lookup uses hash caching\";\n #endif\n \n #ifdef OBJC_HASH_LOOKUP\n-#include <objc/cache.h>\n+#include \"objc/cache.h\"\n #endif\n \n #ifdef OBJC_SPARSE_LOOKUP"}]}