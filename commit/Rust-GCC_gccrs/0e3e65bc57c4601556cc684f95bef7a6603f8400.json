{"sha": "0e3e65bc57c4601556cc684f95bef7a6603f8400", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGUzZTY1YmM1N2M0NjAxNTU2Y2M2ODRmOTViZWY3YTY2MDNmODQwMA==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2006-04-21T05:10:22Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2006-04-21T05:10:22Z"}, "message": "re PR fortran/27122 (binary operator functions should require intent(in))\n\n2006-04-21 Paul Thomas <pault@gcc.gnu.org>\n\n\tPR fortran/27122\n\t* resolve.c (resolve_function): Remove general restriction on auto\n\tcharacter length function interfaces.\n\t(gfc_resolve_uops): Check restrictions on defined operator\n\tprocedures.\n\t(resolve_types): Call the check for defined operators.\n\n\tPR fortran/27113\n\t* trans-array.c (gfc_trans_array_constructor_subarray): Remove\n\tredundant gfc_todo_error.\n\t(get_array_ctor_var_strlen): Remove typo in enum.\n\n2006-04-21 Paul Thomas <pault@gcc.gnu.org>\n\n\tPR fortran/27122\n\t* gfortran.dg/defined_operators_1.f90: New test.\n\t* gfortran.dg/assumed_charlen_function_1.f90: Add new error and\n\tremove old ones associated, incorrectly, with Note 5.46.\n\n\tPR fortran/27113\n\t* gfortran.dg/character_array_constructor_1.f90: New test.\n\nFrom-SVN: r113133", "tree": {"sha": "a31e9836537d02894165673da7043f16acf8d08a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a31e9836537d02894165673da7043f16acf8d08a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e3e65bc57c4601556cc684f95bef7a6603f8400", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e3e65bc57c4601556cc684f95bef7a6603f8400", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e3e65bc57c4601556cc684f95bef7a6603f8400", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e3e65bc57c4601556cc684f95bef7a6603f8400/comments", "author": null, "committer": null, "parents": [{"sha": "56438901a68ebd4ae50ec6d8b590e7d83ae3b92c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56438901a68ebd4ae50ec6d8b590e7d83ae3b92c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56438901a68ebd4ae50ec6d8b590e7d83ae3b92c"}], "stats": {"total": 233, "additions": 203, "deletions": 30}, "files": [{"sha": "003f9312b7f80121faa5054568cd5f1b94343f64", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e3e65bc57c4601556cc684f95bef7a6603f8400/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e3e65bc57c4601556cc684f95bef7a6603f8400/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=0e3e65bc57c4601556cc684f95bef7a6603f8400", "patch": "@@ -1,3 +1,17 @@\n+2006-04-21 Paul Thomas <pault@gcc.gnu.org>\n+\n+\tPR fortran/27122\n+\t* resolve.c (resolve_function): Remove general restriction on auto\n+\tcharacter length function interfaces.\n+\t(gfc_resolve_uops): Check restrictions on defined operator\n+\tprocedures.\n+\t(resolve_types): Call the check for defined operators.\n+\n+\tPR fortran/27113\n+\t* trans-array.c (gfc_trans_array_constructor_subarray): Remove\n+\tredundant gfc_todo_error.\n+\t(get_array_ctor_var_strlen): Remove typo in enum.\n+\n 2006-04-18  Bernhard Fischer  <aldot@gcc.gnu.org>\n \n \t* parse.c (next_free): Use consistent error string between"}, {"sha": "fce232213672b2aeee613833f1cb4dd0cc5de3e7", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 73, "deletions": 20, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e3e65bc57c4601556cc684f95bef7a6603f8400/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e3e65bc57c4601556cc684f95bef7a6603f8400/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=0e3e65bc57c4601556cc684f95bef7a6603f8400", "patch": "@@ -1237,28 +1237,16 @@ resolve_function (gfc_expr * expr)\n   need_full_assumed_size--;\n \n   if (sym && sym->ts.type == BT_CHARACTER\n-\t  && sym->ts.cl && sym->ts.cl->length == NULL)\n+\t&& sym->ts.cl\n+\t&& sym->ts.cl->length == NULL\n+\t&& !sym->attr.dummy\n+\t&& !sym->attr.contained)\n     {\n-      if (sym->attr.if_source == IFSRC_IFBODY)\n-\t{\n-\t  /* This follows from a slightly odd requirement at 5.1.1.5 in the\n-\t     standard that allows assumed character length functions to be\n-\t     declared in interfaces but not used.  Picking up the symbol here,\n-\t     rather than resolve_symbol, accomplishes that.  */\n-\t  gfc_error (\"Function '%s' can be declared in an interface to \"\n-\t\t     \"return CHARACTER(*) but cannot be used at %L\",\n-\t\t     sym->name, &expr->where);\n-\t  return FAILURE;\n-\t}\n-\n       /* Internal procedures are taken care of in resolve_contained_fntype.  */\n-      if (!sym->attr.dummy && !sym->attr.contained)\n-\t{\n-\t  gfc_error (\"Function '%s' is declared CHARACTER(*) and cannot \"\n-\t\t     \"be used at %L since it is not a dummy argument\",\n-\t\t     sym->name, &expr->where);\n-\t  return FAILURE;\n-\t}\n+      gfc_error (\"Function '%s' is declared CHARACTER(*) and cannot \"\n+\t\t \"be used at %L since it is not a dummy argument\",\n+\t\t sym->name, &expr->where);\n+      return FAILURE;\n     }\n \n /* See if function is already resolved.  */\n@@ -6105,6 +6093,68 @@ resolve_fntype (gfc_namespace * ns)\n       }\n }\n \n+/* 12.3.2.1.1 Defined operators.  */\n+\n+static void\n+gfc_resolve_uops(gfc_symtree *symtree)\n+{\n+  gfc_interface *itr;\n+  gfc_symbol *sym;\n+  gfc_formal_arglist *formal;\n+\n+  if (symtree == NULL) \n+    return; \n+ \n+  gfc_resolve_uops (symtree->left);\n+  gfc_resolve_uops (symtree->right);\n+\n+  for (itr = symtree->n.uop->operator; itr; itr = itr->next)\n+    {\n+      sym = itr->sym;\n+      if (!sym->attr.function)\n+\tgfc_error(\"User operator procedure '%s' at %L must be a FUNCTION\",\n+\t\t  sym->name, &sym->declared_at);\n+\n+      if (sym->ts.type == BT_CHARACTER\n+\t    && !(sym->ts.cl && sym->ts.cl->length)\n+\t    && !(sym->result && sym->result->ts.cl && sym->result->ts.cl->length))\n+\tgfc_error(\"User operator procedure '%s' at %L cannot be assumed character \"\n+\t\t  \"length\", sym->name, &sym->declared_at);\n+\n+      formal = sym->formal;\n+      if (!formal || !formal->sym)\n+\t{\n+\t  gfc_error(\"User operator procedure '%s' at %L must have at least \"\n+\t\t    \"one argument\", sym->name, &sym->declared_at);\n+\t  continue;\n+\t}\n+\n+      if (formal->sym->attr.intent != INTENT_IN)\n+\tgfc_error (\"First argument of operator interface at %L must be \"\n+\t\t   \"INTENT(IN)\", &sym->declared_at);\n+\n+      if (formal->sym->attr.optional)\n+\tgfc_error (\"First argument of operator interface at %L cannot be \"\n+\t\t   \"optional\", &sym->declared_at);\n+\n+      formal = formal->next;\n+      if (!formal || !formal->sym)\n+\tcontinue;\n+\n+      if (formal->sym->attr.intent != INTENT_IN)\n+\tgfc_error (\"Second argument of operator interface at %L must be \"\n+\t\t   \"INTENT(IN)\", &sym->declared_at);\n+\n+      if (formal->sym->attr.optional)\n+\tgfc_error (\"Second argument of operator interface at %L cannot be \"\n+\t\t   \"optional\", &sym->declared_at);\n+\n+      if (formal->next)\n+\tgfc_error (\"Operator interface at %L must have, at most, two \"\n+\t\t   \"arguments\", &sym->declared_at);\n+    }\n+}\n+\n \n /* Examine all of the expressions associated with a program unit,\n    assign types to all intermediate expressions, make sure that all\n@@ -6164,6 +6214,9 @@ resolve_types (gfc_namespace * ns)\n   /* Warn about unused labels.  */\n   if (gfc_option.warn_unused_labels)\n     warn_unused_label (ns->st_labels);\n+\n+  gfc_resolve_uops (ns->uop_root);\n+    \n }\n \n "}, {"sha": "fcd2223d96b041209cbc41cc548c826cdd909aae", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e3e65bc57c4601556cc684f95bef7a6603f8400/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e3e65bc57c4601556cc684f95bef7a6603f8400/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=0e3e65bc57c4601556cc684f95bef7a6603f8400", "patch": "@@ -1035,9 +1035,6 @@ gfc_trans_array_constructor_subarray (stmtblock_t * pblock,\n   gfc_copy_loopinfo_to_se (&se, &loop);\n   se.ss = ss;\n \n-  if (expr->ts.type == BT_CHARACTER)\n-    gfc_todo_error (\"character arrays in constructors\");\n-\n   gfc_trans_array_ctor_element (&body, desc, *poffset, &se, expr);\n   gcc_assert (se.ss == gfc_ss_terminator);\n \n@@ -1311,7 +1308,7 @@ get_array_ctor_var_strlen (gfc_expr * expr, tree * len)\n \t  /* Array references don't change the string length.  */\n \t  break;\n \n-\tcase COMPONENT_REF:\n+\tcase REF_COMPONENT:\n \t  /* Use the length of the component.  */\n \t  ts = &ref->u.c.component->ts;\n \t  break;"}, {"sha": "bc315da37698d33ca6d0201df64a8275c0be864c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e3e65bc57c4601556cc684f95bef7a6603f8400/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e3e65bc57c4601556cc684f95bef7a6603f8400/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0e3e65bc57c4601556cc684f95bef7a6603f8400", "patch": "@@ -1,3 +1,13 @@\n+2006-04-21 Paul Thomas <pault@gcc.gnu.org>\n+\n+\tPR fortran/27122\n+\t* gfortran.dg/defined_operators_1.f90: New test.\n+\t* gfortran.dg/assumed_charlen_function_1.f90: Add new error and\n+\tremove old ones associated, incorrectly, with Note 5.46.\n+\n+\tPR fortran/27113\n+\t* gfortran.dg/character_array_constructor_1.f90: New test.\n+\n 2006-04-20  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc.dg/20060419-1.c: New test."}, {"sha": "a28934e2597e25f05b65398a1bb8aedbeb58ef5b", "filename": "gcc/testsuite/gfortran.dg/assumed_charlen_function_1.f90", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e3e65bc57c4601556cc684f95bef7a6603f8400/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_charlen_function_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e3e65bc57c4601556cc684f95bef7a6603f8400/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_charlen_function_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_charlen_function_1.f90?ref=0e3e65bc57c4601556cc684f95bef7a6603f8400", "patch": "@@ -17,7 +17,7 @@ END MODULE M1\n \r\n MODULE  INTEGER_SETS\r\n  INTERFACE  OPERATOR  (.IN.)\r\n-  FUNCTION ELEMENT(X,A)\r\n+  FUNCTION ELEMENT(X,A) ! { dg-error \"cannot be assumed character length\" }\r\n      USE M1\r\n      CHARACTER(LEN=*)      :: ELEMENT\r\n      INTEGER, INTENT(IN)   ::  X\r\n@@ -59,7 +59,6 @@ function not_OK (ch)\n   not_OK = ch\r\n end function not_OK\r\n \r\n-  use INTEGER_SETS\r\n   use m1\r\n \r\n   character(4) :: answer\r\n@@ -74,11 +73,8 @@ function ext (i)\n     end function ext\r\n   end interface\r\n \r\n-  answer = i.IN.z   ! { dg-error \"cannot be used|Operands of user operator\" }\r\n-  answer = ext (2)  ! { dg-error \"but cannot be used\" }\r\n-\r\n   answer = not_OK (\"unOK\") ! { dg-error \"since it is not a dummy\" }\r\n \r\n END\r\n \r\n-! { dg-final { cleanup-modules \"M1 INTEGER_SETS\" } }\r\n+! { dg-final { cleanup-modules \"M1\" } }\r"}, {"sha": "ac0f7e315df7f2694494f40ed39fba53c1a0c9ab", "filename": "gcc/testsuite/gfortran.dg/character_array_constructor_1.f90", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e3e65bc57c4601556cc684f95bef7a6603f8400/gcc%2Ftestsuite%2Fgfortran.dg%2Fcharacter_array_constructor_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e3e65bc57c4601556cc684f95bef7a6603f8400/gcc%2Ftestsuite%2Fgfortran.dg%2Fcharacter_array_constructor_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcharacter_array_constructor_1.f90?ref=0e3e65bc57c4601556cc684f95bef7a6603f8400", "patch": "@@ -0,0 +1,47 @@\n+! { dg-do run }\n+! Tests the fix for PR27113, in which character structure\n+! components would produce the TODO compilation error \"complex\n+! character array constructors\".\n+!\n+! Test based on part of tonto-2.2;\n+! Contributed by Paul Thomas  <pault@gcc.gnu.org>\n+!\n+  type BASIS_TYPE\n+    character(len=8) :: label\n+  end type\n+\n+  type(BASIS_TYPE), dimension(:), pointer :: ptr\n+  character(8), dimension(2) :: carray\n+\n+  allocate (ptr(2))\n+  ptr(1)%label = \"Label 1\"\n+  ptr(2)%label = \"Label 2\"\n+\n+! This is the original bug\n+  call read_library_data_((/ptr%label/))\n+\n+  carray(1) = \"Label 3\"\n+  carray(2) = \"Label 4\"\n+\n+! Mix a character array with the character component of a derived type pointer array.\n+  call read_library_data_((/carray, ptr%label/))\n+\n+! Finally, add a constant (character(8)).\n+  call read_library_data_((/carray, ptr%label, \"Label 5 \"/))\n+\n+contains\n+\n+  subroutine read_library_data_ (chr)\n+    character(*), dimension(:) :: chr\n+    character(len = len(chr)) :: tmp\n+    if (size(chr,1) == 2) then\n+      if (any (chr .ne. (/\"Label 1\", \"Label 2\"/))) call abort ()\n+    elseif (size(chr,1) == 4) then\n+      if (any (chr .ne. (/\"Label 3\", \"Label 4\",\"Label 1\", \"Label 2\"/))) call abort ()\n+    elseif (size(chr,1) == 5) then\n+      if (any (chr .ne. (/\"Label 3\", \"Label 4\",\"Label 1\", \"Label 2\", \"Label 5\"/))) &\n+          call abort ()\n+    end if\n+  end subroutine read_library_data_\n+\n+end"}, {"sha": "f7688b87a55b920216516bebb14b8ba409aff184", "filename": "gcc/testsuite/gfortran.dg/defined_operators_1.f90", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e3e65bc57c4601556cc684f95bef7a6603f8400/gcc%2Ftestsuite%2Fgfortran.dg%2Fdefined_operators_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e3e65bc57c4601556cc684f95bef7a6603f8400/gcc%2Ftestsuite%2Fgfortran.dg%2Fdefined_operators_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdefined_operators_1.f90?ref=0e3e65bc57c4601556cc684f95bef7a6603f8400", "patch": "@@ -0,0 +1,56 @@\n+! { dg-do compile }\n+! { dg-options \"-std=legacy\" }\n+! Tests the fix for PR27122, in which the requirements of 12.3.2.1.1\n+! for defined operators were not enforced.\n+! \n+! Based on PR test by Thomas Koenig  <tkoenig@gcc.gnu.org>\n+!\n+module mymod\n+  interface operator (.foo.)\n+     module procedure foo_0 ! { dg-error \"must have at least one argument\" }\n+     module procedure foo_1 ! { dg-error \"must be INTENT\" }\n+     module procedure foo_2 ! { dg-error \"cannot be optional\" }\n+     module procedure foo_3 ! { dg-error \"must have, at most, two arguments\" }\n+     module procedure foo_1_OK\n+     module procedure foo_2_OK\n+     function foo_chr (chr) ! { dg-error \"cannot be assumed character length\" }\n+       character(*) :: foo_chr\n+       character(*), intent(in) :: chr\n+     end function foo_chr\n+     subroutine bad_foo (chr) ! { dg-error \"must be a FUNCTION\" }\n+       character(*), intent(in) :: chr\n+     end subroutine bad_foo\n+  end interface\n+contains\n+  function foo_0 ()\n+    integer :: foo_1\n+    foo_0 = 1\n+  end function foo_0\n+  function foo_1 (a)\n+    integer :: foo_1\n+    integer :: a\n+    foo_1 = 1\n+  end function foo_1\n+  function foo_1_OK (a)\n+    integer :: foo_1_OK\n+    integer, intent (in) :: a\n+    foo_1_OK = 1\n+  end function foo_1_OK\n+  function foo_2 (a, b)\n+    integer :: foo_2\n+    integer, intent(in) :: a\n+    integer, intent(in), optional :: b\n+    foo_2 = 2 * a + b\n+  end function foo_2\n+  function foo_2_OK (a, b)\n+    real :: foo_2_OK\n+    real, intent(in) :: a\n+    real, intent(in) :: b\n+    foo_2_OK = 2.0 * a + b\n+  end function foo_2_OK\n+  function foo_3 (a, b, c)\n+    integer :: foo_3\n+    integer, intent(in) :: a, b, c\n+    foo_3 = a + 3 * b - c\n+  end function foo_3\n+end module mymod"}]}