{"sha": "723d95fe2b71f3bca4fbed6a1e4945d794f4698c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzIzZDk1ZmUyYjcxZjNiY2E0ZmJlZDZhMWU0OTQ1ZDc5NGY0Njk4Yw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2011-09-07T13:48:03Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2011-09-07T13:48:03Z"}, "message": "re PR target/49030 (ICE in get_arm_condition_code, at config/arm/arm.c:17180)\n\ngcc/\n\tPR target/49030\n\t* config/arm/arm-protos.h (maybe_get_arm_condition_code): Declare.\n\t* config/arm/arm.c (maybe_get_arm_condition_code): New function,\n\treusing the old code from get_arm_condition_code.  Return ARM_NV\n\tfor invalid comparison codes.\n\t(get_arm_condition_code): Redefine in terms of\n\tmaybe_get_arm_condition_code.\n\t* config/arm/predicates.md (arm_comparison_operator): Use\n\tmaybe_get_arm_condition_code.\n\ngcc/testsuite/\n\tPR target/49030\n\t* gcc.dg/torture/pr49030.c: New test.\n\nFrom-SVN: r178636", "tree": {"sha": "b14332fa27f780ac19d23e5c349f660b387fca7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b14332fa27f780ac19d23e5c349f660b387fca7a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/723d95fe2b71f3bca4fbed6a1e4945d794f4698c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/723d95fe2b71f3bca4fbed6a1e4945d794f4698c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/723d95fe2b71f3bca4fbed6a1e4945d794f4698c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/723d95fe2b71f3bca4fbed6a1e4945d794f4698c/comments", "author": null, "committer": null, "parents": [{"sha": "b7b1babae9578b47dfcbae36164d3da72dd17525", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7b1babae9578b47dfcbae36164d3da72dd17525", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7b1babae9578b47dfcbae36164d3da72dd17525"}], "stats": {"total": 85, "additions": 65, "deletions": 20}, "files": [{"sha": "64ae69e4c46fcd204dd86672ea49cd0700140552", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/723d95fe2b71f3bca4fbed6a1e4945d794f4698c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/723d95fe2b71f3bca4fbed6a1e4945d794f4698c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=723d95fe2b71f3bca4fbed6a1e4945d794f4698c", "patch": "@@ -1,3 +1,15 @@\n+2011-09-07  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\tPR target/49030\n+\t* config/arm/arm-protos.h (maybe_get_arm_condition_code): Declare.\n+\t* config/arm/arm.c (maybe_get_arm_condition_code): New function,\n+\treusing the old code from get_arm_condition_code.  Return ARM_NV\n+\tfor invalid comparison codes.\n+\t(get_arm_condition_code): Redefine in terms of\n+\tmaybe_get_arm_condition_code.\n+\t* config/arm/predicates.md (arm_comparison_operator): Use\n+\tmaybe_get_arm_condition_code.\n+\n 2011-09-07  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-ssa-forwprop.c (forward_propagate_into_gimple_cond):"}, {"sha": "9030e96052eff6cbba82199a463e6412d0eff8dd", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/723d95fe2b71f3bca4fbed6a1e4945d794f4698c/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/723d95fe2b71f3bca4fbed6a1e4945d794f4698c/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=723d95fe2b71f3bca4fbed6a1e4945d794f4698c", "patch": "@@ -184,6 +184,7 @@ extern int is_called_in_ARM_mode (tree);\n #endif\n extern int thumb_shiftable_const (unsigned HOST_WIDE_INT);\n #ifdef RTX_CODE\n+extern enum arm_cond_code maybe_get_arm_condition_code (rtx);\n extern void thumb1_final_prescan_insn (rtx);\n extern void thumb2_final_prescan_insn (rtx);\n extern const char *thumb_load_double_from_address (rtx *);"}, {"sha": "6311612a6cd21914cc094cfbd0701edb81a2a67c", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 25, "deletions": 16, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/723d95fe2b71f3bca4fbed6a1e4945d794f4698c/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/723d95fe2b71f3bca4fbed6a1e4945d794f4698c/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=723d95fe2b71f3bca4fbed6a1e4945d794f4698c", "patch": "@@ -17595,10 +17595,10 @@ arm_elf_asm_destructor (rtx symbol, int priority)\n    decremented/zeroed by arm_asm_output_opcode as the insns are output.  */\n \n /* Returns the index of the ARM condition code string in\n-   `arm_condition_codes'.  COMPARISON should be an rtx like\n-   `(eq (...) (...))'.  */\n-static enum arm_cond_code\n-get_arm_condition_code (rtx comparison)\n+   `arm_condition_codes', or ARM_NV if the comparison is invalid.\n+   COMPARISON should be an rtx like `(eq (...) (...))'.  */\n+enum arm_cond_code\n+maybe_get_arm_condition_code (rtx comparison)\n {\n   enum machine_mode mode = GET_MODE (XEXP (comparison, 0));\n   enum arm_cond_code code;\n@@ -17622,11 +17622,11 @@ get_arm_condition_code (rtx comparison)\n     case CC_DLTUmode: code = ARM_CC;\n \n     dominance:\n-      gcc_assert (comp_code == EQ || comp_code == NE);\n-\n       if (comp_code == EQ)\n \treturn ARM_INVERSE_CONDITION_CODE (code);\n-      return code;\n+      if (comp_code == NE)\n+\treturn code;\n+      return ARM_NV;\n \n     case CC_NOOVmode:\n       switch (comp_code)\n@@ -17635,23 +17635,23 @@ get_arm_condition_code (rtx comparison)\n \tcase EQ: return ARM_EQ;\n \tcase GE: return ARM_PL;\n \tcase LT: return ARM_MI;\n-\tdefault: gcc_unreachable ();\n+\tdefault: return ARM_NV;\n \t}\n \n     case CC_Zmode:\n       switch (comp_code)\n \t{\n \tcase NE: return ARM_NE;\n \tcase EQ: return ARM_EQ;\n-\tdefault: gcc_unreachable ();\n+\tdefault: return ARM_NV;\n \t}\n \n     case CC_Nmode:\n       switch (comp_code)\n \t{\n \tcase NE: return ARM_MI;\n \tcase EQ: return ARM_PL;\n-\tdefault: gcc_unreachable ();\n+\tdefault: return ARM_NV;\n \t}\n \n     case CCFPEmode:\n@@ -17676,7 +17676,7 @@ get_arm_condition_code (rtx comparison)\n \t  /* UNEQ and LTGT do not have a representation.  */\n \tcase UNEQ: /* Fall through.  */\n \tcase LTGT: /* Fall through.  */\n-\tdefault: gcc_unreachable ();\n+\tdefault: return ARM_NV;\n \t}\n \n     case CC_SWPmode:\n@@ -17692,15 +17692,15 @@ get_arm_condition_code (rtx comparison)\n \tcase GTU: return ARM_CC;\n \tcase LEU: return ARM_CS;\n \tcase LTU: return ARM_HI;\n-\tdefault: gcc_unreachable ();\n+\tdefault: return ARM_NV;\n \t}\n \n     case CC_Cmode:\n       switch (comp_code)\n \t{\n \tcase LTU: return ARM_CS;\n \tcase GEU: return ARM_CC;\n-\tdefault: gcc_unreachable ();\n+\tdefault: return ARM_NV;\n \t}\n \n     case CC_CZmode:\n@@ -17712,7 +17712,7 @@ get_arm_condition_code (rtx comparison)\n \tcase GTU: return ARM_HI;\n \tcase LEU: return ARM_LS;\n \tcase LTU: return ARM_CC;\n-\tdefault: gcc_unreachable ();\n+\tdefault: return ARM_NV;\n \t}\n \n     case CC_NCVmode:\n@@ -17722,7 +17722,7 @@ get_arm_condition_code (rtx comparison)\n \tcase LT: return ARM_LT;\n \tcase GEU: return ARM_CS;\n \tcase LTU: return ARM_CC;\n-\tdefault: gcc_unreachable ();\n+\tdefault: return ARM_NV;\n \t}\n \n     case CCmode:\n@@ -17738,13 +17738,22 @@ get_arm_condition_code (rtx comparison)\n \tcase GTU: return ARM_HI;\n \tcase LEU: return ARM_LS;\n \tcase LTU: return ARM_CC;\n-\tdefault: gcc_unreachable ();\n+\tdefault: return ARM_NV;\n \t}\n \n     default: gcc_unreachable ();\n     }\n }\n \n+/* Like maybe_get_arm_condition_code, but never return ARM_NV.  */\n+static enum arm_cond_code\n+get_arm_condition_code (rtx comparison)\n+{\n+  enum arm_cond_code code = maybe_get_arm_condition_code (comparison);\n+  gcc_assert (code != ARM_NV);\n+  return code;\n+}\n+\n /* Tell arm_asm_output_opcode to output IT blocks for conditionally executed\n    instructions.  */\n void"}, {"sha": "c7d6206b138e5f84db68004d4d88d4f59149321d", "filename": "gcc/config/arm/predicates.md", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/723d95fe2b71f3bca4fbed6a1e4945d794f4698c/gcc%2Fconfig%2Farm%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/723d95fe2b71f3bca4fbed6a1e4945d794f4698c/gcc%2Fconfig%2Farm%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fpredicates.md?ref=723d95fe2b71f3bca4fbed6a1e4945d794f4698c", "patch": "@@ -249,10 +249,9 @@\n ;; True for integer comparisons and, if FP is active, for comparisons\n ;; other than LTGT or UNEQ.\n (define_special_predicate \"arm_comparison_operator\"\n-  (ior (match_code \"eq,ne,le,lt,ge,gt,geu,gtu,leu,ltu\")\n-       (and (match_test \"TARGET_32BIT && TARGET_HARD_FLOAT\n-\t\t\t && (TARGET_FPA || TARGET_VFP)\")\n-            (match_code \"unordered,ordered,unlt,unle,unge,ungt\"))))\n+  (and (match_code \"eq,ne,le,lt,ge,gt,geu,gtu,leu,ltu,\n+\t\t    unordered,ordered,unlt,unle,unge,ungt\")\n+       (match_test \"maybe_get_arm_condition_code (op) != ARM_NV\")))\n \n (define_special_predicate \"lt_ge_comparison_operator\"\n   (match_code \"lt,ge\"))"}, {"sha": "c5433a4dcf0607a777d1f30522eb527153f41af5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/723d95fe2b71f3bca4fbed6a1e4945d794f4698c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/723d95fe2b71f3bca4fbed6a1e4945d794f4698c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=723d95fe2b71f3bca4fbed6a1e4945d794f4698c", "patch": "@@ -1,3 +1,8 @@\n+2011-09-07  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\tPR target/49030\n+\t* gcc.dg/torture/pr49030.c: New test.\n+\n 2011-09-07  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/50288"}, {"sha": "4b078a9e03c6390a788bec7203b5f87a91d77fcf", "filename": "gcc/testsuite/gcc.dg/torture/pr49030.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/723d95fe2b71f3bca4fbed6a1e4945d794f4698c/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr49030.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/723d95fe2b71f3bca4fbed6a1e4945d794f4698c/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr49030.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr49030.c?ref=723d95fe2b71f3bca4fbed6a1e4945d794f4698c", "patch": "@@ -0,0 +1,19 @@\n+void\n+sample_move_d32u24_sS (char *dst, float *src, unsigned long nsamples,\n+\t\t       unsigned long dst_skip)\n+{\n+  long long y;\n+  while (nsamples--)\n+    {\n+      y = (long long) (*src * 8388608.0f) << 8;\n+      if (y > 2147483647) {\n+\t*(int *) dst = 2147483647;\n+      } else if (y < -2147483647 - 1) {\n+\t*(int *) dst = -2147483647 - 1;\n+      } else {\n+\t*(int *) dst = (int) y;\n+      }\n+      dst += dst_skip;\n+      src++;\n+    }\n+}"}]}