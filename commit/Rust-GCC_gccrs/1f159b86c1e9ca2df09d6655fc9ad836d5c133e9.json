{"sha": "1f159b86c1e9ca2df09d6655fc9ad836d5c133e9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWYxNTliODZjMWU5Y2EyZGYwOWQ2NjU1ZmM5YWQ4MzZkNWMxMzNlOQ==", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2019-07-03T08:14:29Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-07-03T08:14:29Z"}, "message": "[Ada] Spell \"laid\" correctly\n\n2019-07-03  Bob Duff  <duff@adacore.com>\n\ngcc/ada/\n\n\t* einfo.ads, exp_util.adb, layout.ads, sinfo.ads: Spell \"laid\"\n\tcorrectly.\n\nFrom-SVN: r272970", "tree": {"sha": "280d4f6f0077e49e083b64ff501e30b72fb25132", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/280d4f6f0077e49e083b64ff501e30b72fb25132"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f159b86c1e9ca2df09d6655fc9ad836d5c133e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f159b86c1e9ca2df09d6655fc9ad836d5c133e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f159b86c1e9ca2df09d6655fc9ad836d5c133e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f159b86c1e9ca2df09d6655fc9ad836d5c133e9/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8334176aaaebf68214328518b84a64ee20c72580", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8334176aaaebf68214328518b84a64ee20c72580", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8334176aaaebf68214328518b84a64ee20c72580"}], "stats": {"total": 25, "additions": 15, "deletions": 10}, "files": [{"sha": "55691b663836022c78a62b4b5c82222a2a2d183e", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f159b86c1e9ca2df09d6655fc9ad836d5c133e9/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f159b86c1e9ca2df09d6655fc9ad836d5c133e9/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=1f159b86c1e9ca2df09d6655fc9ad836d5c133e9", "patch": "@@ -1,3 +1,8 @@\n+2019-07-03  Bob Duff  <duff@adacore.com>\n+\n+\t* einfo.ads, exp_util.adb, layout.ads, sinfo.ads: Spell \"laid\"\n+\tcorrectly.\n+\n 2019-07-03  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_ch13.adb (Analyze_Attribute_Definition_Clause): No error"}, {"sha": "9dc6cc24799e419cda37a3f97e655bd751b237f2", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f159b86c1e9ca2df09d6655fc9ad836d5c133e9/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f159b86c1e9ca2df09d6655fc9ad836d5c133e9/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=1f159b86c1e9ca2df09d6655fc9ad836d5c133e9", "patch": "@@ -3779,15 +3779,15 @@ package Einfo is\n \n --    Optimize_Alignment_Space (Flag241)\n --       Defined in type, subtype, variable, and constant entities. This\n---       flag records that the type or object is to be layed out in a manner\n+--       flag records that the type or object is to be laid out in a manner\n --       consistent with Optimize_Alignment (Space) mode. The compiler and\n --       binder ensure a consistent view of any given type or object. If pragma\n --       Optimize_Alignment (Off) mode applies to the type/object, then neither\n --       of the flags Optimize_Alignment_Space/Optimize_Alignment_Time is set.\n \n --    Optimize_Alignment_Time (Flag242)\n --       Defined in type, subtype, variable, and constant entities. This\n---       flag records that the type or object is to be layed out in a manner\n+--       flag records that the type or object is to be laid out in a manner\n --       consistent with Optimize_Alignment (Time) mode. The compiler and\n --       binder ensure a consistent view of any given type or object. If pragma\n --       Optimize_Alignment (Off) mode applies to the type/object, then neither"}, {"sha": "6b884ef384c41a8f86292a8c55941ef60b3bf67a", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f159b86c1e9ca2df09d6655fc9ad836d5c133e9/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f159b86c1e9ca2df09d6655fc9ad836d5c133e9/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=1f159b86c1e9ca2df09d6655fc9ad836d5c133e9", "patch": "@@ -8258,8 +8258,8 @@ package body Exp_Util is\n          return False;\n       end if;\n \n-      --  Here we have a tagged type, see if it has any unlayed out fields\n-      --  other than a possible tag and parent fields. If so, we return False.\n+      --  Here we have a tagged type, see if it has any component (other than\n+      --  tag and parent) with no component_clause. If so, we return False.\n \n       Comp := First_Component (U);\n       while Present (Comp) loop\n@@ -8273,7 +8273,7 @@ package body Exp_Util is\n          end if;\n       end loop;\n \n-      --  All components are layed out\n+      --  All components have clauses\n \n       return True;\n    end Is_Fully_Repped_Tagged_Type;"}, {"sha": "81162c1110992c53a51ee9a8cfe3bc065e8c4636", "filename": "gcc/ada/layout.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f159b86c1e9ca2df09d6655fc9ad836d5c133e9/gcc%2Fada%2Flayout.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f159b86c1e9ca2df09d6655fc9ad836d5c133e9/gcc%2Fada%2Flayout.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flayout.ads?ref=1f159b86c1e9ca2df09d6655fc9ad836d5c133e9", "patch": "@@ -34,7 +34,7 @@ package Layout is\n \n    --  The following procedures are called from Freeze, so all entities\n    --  for types and objects that get frozen (which should be all such\n-   --  entities which are seen by the back end) will get layed out by one\n+   --  entities which are seen by the back end) will get laid out by one\n    --  of these two procedures.\n \n    procedure Layout_Type (E : Entity_Id);"}, {"sha": "b3e1309882d423f953867ffb453b9844642c4f1d", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f159b86c1e9ca2df09d6655fc9ad836d5c133e9/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f159b86c1e9ca2df09d6655fc9ad836d5c133e9/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=1f159b86c1e9ca2df09d6655fc9ad836d5c133e9", "patch": "@@ -2857,7 +2857,7 @@ package Sinfo is\n       --  Einfo.\n \n       --  Note: N_Defining_Identifier is an extended node whose fields are\n-      --  deliberately layed out to match the layout of fields in an ordinary\n+      --  deliberately laid out to match the layout of fields in an ordinary\n       --  N_Identifier node allowing for easy alteration of an identifier\n       --  node into a defining identifier node. For details, see procedure\n       --  Sinfo.CN.Change_Identifier_To_Defining_Identifier.\n@@ -3204,7 +3204,7 @@ package Sinfo is\n       --  in package Einfo.\n \n       --  Note: N_Defining_Character_Literal is an extended node whose fields\n-      --  are deliberate layed out to match the layout of fields in an ordinary\n+      --  are deliberate laid out to match the layout of fields in an ordinary\n       --  N_Character_Literal node allowing for easy alteration of a character\n       --  literal node into a defining character literal node. For details, see\n       --  Sinfo.CN.Change_Character_Literal_To_Defining_Character_Literal.\n@@ -5429,7 +5429,7 @@ package Sinfo is\n       --  in package Einfo.\n \n       --  Note: N_Defining_Operator_Symbol is an extended node whose fields\n-      --  are deliberately layed out to match the layout of fields in an\n+      --  are deliberately laid out to match the layout of fields in an\n       --  ordinary N_Operator_Symbol node allowing for easy alteration of\n       --  an operator symbol node into a defining operator symbol node.\n       --  See Sinfo.CN.Change_Operator_Symbol_To_Defining_Operator_Symbol\n@@ -8035,7 +8035,7 @@ package Sinfo is\n       --  of this node, leaving the N_Selected_Component node used only when\n       --  the prefix is a record or protected type.\n \n-      --  The fields of the N_Expanded_Name node are layed out identically\n+      --  The fields of the N_Expanded_Name node are laid out identically\n       --  to those of the N_Selected_Component node, allowing conversion of\n       --  an expanded name node to a selected component node to be done\n       --  easily, see Sinfo.CN.Change_Selected_Component_To_Expanded_Name."}]}