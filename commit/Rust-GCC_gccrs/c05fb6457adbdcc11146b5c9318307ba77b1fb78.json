{"sha": "c05fb6457adbdcc11146b5c9318307ba77b1fb78", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzA1ZmI2NDU3YWRiZGNjMTExNDZiNWM5MzE4MzA3YmE3N2IxZmI3OA==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2018-05-21T22:25:03Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2018-05-21T22:25:03Z"}, "message": "re PR target/85657 (Make __ibm128 a separate type, even if long double uses the IBM double-double format)\n\n2018-05-21  Michael Meissner  <meissner@linux.ibm.com>\n\n\tPR target/85657\n\t* config/rs6000/rs6000-c.c (rs6000_cpu_cpp_builtins): Do not\n\tdefine __ibm128 as long double.\n\t* config/rs6000/rs6000.c (rs6000_init_builtins): Create __ibm128\n\tas a distinct type with IEEE 128-bit floating point is supported.\n\t(init_float128_ieee): Fix up conversions between IFmode and IEEE\n\t128-bit types to use the correct functions.\n\t(rs6000_expand_float128_convert): Use explicit FLOAT_EXTEND to\n\tconvert between 128-bit floating point types that have different\n\tmodes but the same representation, instead of using gen_lowpart to\n\tmakean alias.\n\t* config/rs6000/rs6000.md (IFKF): New iterator for IFmode and\n\tKFmode.\n\t(IFKF_reg): New attributes to give the register constraints for\n\tIFmode and KFmode.\n\t(extend<mode>tf2_internal): New insns to mark an explicit\n\tconversion between 128-bit floating point types that have a\n\tdifferent mode but share the same representation.\n\n[gcc/testsuite]\n2018-05-21  Michael Meissner  <meissner@linux.ibm.com>\n\n\tPR target/85657\n\t* gcc.target/powerpc/pr85657-1.c: New test for converting between\n\t__float128, __ibm128, and long double.\n\t* gcc.target/powerpc/pr85657-2.c: Likewise.\n\t* gcc.target/powerpc/pr85657-3.c: Likewise.\n\t* g++.dg/pr85667.C: New test to make sure __ibm128 is\n\timplementated as a separate type internally, and is not just an\n\talias for long double.\n\nFrom-SVN: r260490", "tree": {"sha": "04c68df3dcd4f1ec1c642491630dc026b63e69ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/04c68df3dcd4f1ec1c642491630dc026b63e69ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c05fb6457adbdcc11146b5c9318307ba77b1fb78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c05fb6457adbdcc11146b5c9318307ba77b1fb78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c05fb6457adbdcc11146b5c9318307ba77b1fb78", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c05fb6457adbdcc11146b5c9318307ba77b1fb78/comments", "author": null, "committer": null, "parents": [{"sha": "75705fa9fda3122269231260e6d04f23113eab2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75705fa9fda3122269231260e6d04f23113eab2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75705fa9fda3122269231260e6d04f23113eab2e"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "cec289203f6d7ad97ce3f13fa740d37e176dd1c7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c05fb6457adbdcc11146b5c9318307ba77b1fb78/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c05fb6457adbdcc11146b5c9318307ba77b1fb78/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c05fb6457adbdcc11146b5c9318307ba77b1fb78", "patch": "@@ -3,8 +3,8 @@\n \tPR target/85657\n \t* config/rs6000/rs6000-c.c (rs6000_cpu_cpp_builtins): Do not\n \tdefine __ibm128 as long double.\n-\t* config/rs6000/rs6000.c (rs6000_init_builtins): Always create\n-\t__ibm128 as a distinct type.\n+\t* config/rs6000/rs6000.c (rs6000_init_builtins): Create __ibm128\n+\tas a distinct type when IEEE 128-bit support is enabled.\n \t(init_float128_ieee): Fix up conversions between IFmode and IEEE\n \t128-bit types to use the correct functions.\n \t(rs6000_expand_float128_convert): Use explicit FLOAT_EXTEND to"}]}