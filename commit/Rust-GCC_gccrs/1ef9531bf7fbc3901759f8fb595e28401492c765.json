{"sha": "1ef9531bf7fbc3901759f8fb595e28401492c765", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWVmOTUzMWJmN2ZiYzM5MDE3NTlmOGZiNTk1ZTI4NDAxNDkyYzc2NQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-03-27T03:03:18Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-03-27T03:03:18Z"}, "message": "alpha.c (alpha_emit_set_const): Add a REG_EQUAL note if a non-trivial load was emitted.\n\n        * config/alpha/alpha.c (alpha_emit_set_const): Add a REG_EQUAL note\n        if a non-trivial load was emitted.\n        (alpha_emit_set_const_1): Remove obsolete extension.  Fix thinko\n        in high+extra+low case.\n\nFrom-SVN: r51428", "tree": {"sha": "e2bc2c0a6f407e455ee96f9b159290d494315c42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e2bc2c0a6f407e455ee96f9b159290d494315c42"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1ef9531bf7fbc3901759f8fb595e28401492c765", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ef9531bf7fbc3901759f8fb595e28401492c765", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ef9531bf7fbc3901759f8fb595e28401492c765", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ef9531bf7fbc3901759f8fb595e28401492c765/comments", "author": null, "committer": null, "parents": [{"sha": "62d3b526c6c1da3e5eae3f503e12694ef5e58be1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62d3b526c6c1da3e5eae3f503e12694ef5e58be1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62d3b526c6c1da3e5eae3f503e12694ef5e58be1"}], "stats": {"total": 31, "additions": 20, "deletions": 11}, "files": [{"sha": "946f695d05eb9266d536d6585ea66a70b33be978", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ef9531bf7fbc3901759f8fb595e28401492c765/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ef9531bf7fbc3901759f8fb595e28401492c765/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1ef9531bf7fbc3901759f8fb595e28401492c765", "patch": "@@ -1,3 +1,10 @@\n+2002-03-26  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/alpha/alpha.c (alpha_emit_set_const): Add a REG_EQUAL note\n+\tif a non-trivial load was emitted.\n+\t(alpha_emit_set_const_1): Remove obsolete extension.  Fix thinko\n+\tin high+extra+low case.\n+\n 2002-03-26  Richard Henderson  <rth@redhat.com>\n \n \t* config.gcc (sparc*-solaris): Use float_format=sparc."}, {"sha": "6893677a2066f392fa1730ece86bc4287c268129", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ef9531bf7fbc3901759f8fb595e28401492c765/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ef9531bf7fbc3901759f8fb595e28401492c765/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=1ef9531bf7fbc3901759f8fb595e28401492c765", "patch": "@@ -2250,8 +2250,18 @@ alpha_emit_set_const (target, mode, c, n)\n     }\n \n   /* Try 1 insn, then 2, then up to N.  */\n-  for (i = 1; i <= n && result == 0; i++)\n-    result = alpha_emit_set_const_1 (target, mode, c, i);\n+  for (i = 1; i <= n; i++)\n+    {\n+      result = alpha_emit_set_const_1 (target, mode, c, i);\n+      if (result)\n+\t{\n+\t  rtx insn = get_last_insn ();\n+\t  rtx set = single_set (insn);\n+\t  if (! CONSTANT_P (SET_SRC (set)))\n+\t    set_unique_reg_note (get_last_insn (), REG_EQUAL, GEN_INT (c));\n+\t  break;\n+\t}\n+    }\n \n   /* Allow for the case where we changed the mode of TARGET.  */\n   if (result == target)\n@@ -2276,15 +2286,6 @@ alpha_emit_set_const_1 (target, mode, c, n)\n     = (flag_expensive_optimizations && !no_new_pseudos ? 0 : target);\n   rtx temp, insn;\n \n-#if HOST_BITS_PER_WIDE_INT == 64\n-  /* We are only called for SImode and DImode.  If this is SImode, ensure that\n-     we are sign extended to a full word.  This does not make any sense when\n-     cross-compiling on a narrow machine.  */\n-\n-  if (mode == SImode)\n-    c = ((c & 0xffffffff) ^ 0x80000000) - 0x80000000;\n-#endif\n-\n   /* If this is a sign-extended 32-bit constant, we can do this in at most\n      three insns, so do it if we have enough insns left.  We always have\n      a sign-extended 32-bit constant when compiling on a narrow machine.  */\n@@ -2337,6 +2338,7 @@ alpha_emit_set_const_1 (target, mode, c, n)\n \t      insn = gen_rtx_PLUS (mode, temp, GEN_INT (extra << 16));\n \t      insn = gen_rtx_SET (VOIDmode, subtarget, insn);\n \t      emit_insn (insn);\n+\t      temp = subtarget;\n \t    }\n \n \t  if (target == NULL)"}]}