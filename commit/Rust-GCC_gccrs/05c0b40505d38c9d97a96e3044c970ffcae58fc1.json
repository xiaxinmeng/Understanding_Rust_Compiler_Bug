{"sha": "05c0b40505d38c9d97a96e3044c970ffcae58fc1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDVjMGI0MDUwNWQzOGM5ZDk3YTk2ZTMwNDRjOTcwZmZjYWU1OGZjMQ==", "commit": {"author": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1996-02-14T00:58:09Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1996-02-14T00:58:09Z"}, "message": "expr.c (store_constructor): Fix flow control thinko (merge error).\n\n* expr.c (store_constructor):  Fix flow control thinko (merge error).\n* expr.c (store_constructor):  Pass correct value to recursive call.\n\nFrom-SVN: r11272", "tree": {"sha": "90e689e9dbb3bbc4db1523e0a21290773ad5feaf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/90e689e9dbb3bbc4db1523e0a21290773ad5feaf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/05c0b40505d38c9d97a96e3044c970ffcae58fc1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05c0b40505d38c9d97a96e3044c970ffcae58fc1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05c0b40505d38c9d97a96e3044c970ffcae58fc1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05c0b40505d38c9d97a96e3044c970ffcae58fc1/comments", "author": null, "committer": null, "parents": [{"sha": "41531e5b361bb90404ae628066ef18c803d96a07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41531e5b361bb90404ae628066ef18c803d96a07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41531e5b361bb90404ae628066ef18c803d96a07"}], "stats": {"total": 39, "additions": 18, "deletions": 21}, "files": [{"sha": "a3ff4429c96928a190f69efc9c76f211912b4365", "filename": "gcc/expr.c", "status": "modified", "additions": 18, "deletions": 21, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05c0b40505d38c9d97a96e3044c970ffcae58fc1/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05c0b40505d38c9d97a96e3044c970ffcae58fc1/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=05c0b40505d38c9d97a96e3044c970ffcae58fc1", "patch": "@@ -3514,30 +3514,27 @@ store_constructor (exp, target, cleared)\n \t      tree hi_index = TREE_OPERAND (index, 1);\n \t      rtx index_r, pos_rtx, addr, hi_r, loop_top, loop_end;\n \t      struct nesting *loop;\n-\t\ttree position;\n+\t      HOST_WIDE_INT lo, hi, count;\n+\t      tree position;\n \n+\t      /* If the range is constant and \"small\", unroll the loop. */\n \t      if (TREE_CODE (lo_index) == INTEGER_CST\n-\t\t  && TREE_CODE (hi_index) == INTEGER_CST)\n+\t\t  && TREE_CODE (hi_index) == INTEGER_CST\n+\t\t  && (lo = TREE_INT_CST_LOW (lo_index),\n+\t\t      hi = TREE_INT_CST_LOW (hi_index),\n+\t\t      count = hi - lo + 1,\n+\t\t      (GET_CODE (target) != MEM\n+\t\t       || count <= 2\n+\t\t       || (TREE_CODE (TYPE_SIZE (elttype)) == INTEGER_CST\n+\t\t\t   && TREE_INT_CST_LOW (TYPE_SIZE (elttype)) * count\n+\t\t\t   <= 40 * 8))))\n \t\t{\n-\t\t  HOST_WIDE_INT lo = TREE_INT_CST_LOW (lo_index);\n-\t\t  HOST_WIDE_INT hi = TREE_INT_CST_LOW (hi_index);\n-\t\t  HOST_WIDE_INT count = hi - lo + 1;\n-\n-\t\t  /* If the range is constant and \"small\", unroll the loop.\n-\t\t     We must also use store_field if the target is not MEM. */\n-\t\t  if (GET_CODE (target) != MEM\n-\t\t      || count <= 2\n-\t\t      || (TREE_CODE (TYPE_SIZE (elttype)) == INTEGER_CST\n-\t\t\t  && TREE_INT_CST_LOW (TYPE_SIZE (elttype)) * count\n-\t\t\t  <= 40 * 8))\n+\t\t  lo -= minelt;  hi -= minelt;\n+\t\t  for (; lo <= hi; lo++)\n \t\t    {\n-\t\t      lo -= minelt;  hi -= minelt;\n-\t\t      for (; lo <= hi; lo++)\n-\t\t\t{\n-\t\t\t  bitpos = lo * TREE_INT_CST_LOW (TYPE_SIZE (elttype));\n-\t\t\t  store_constructor_field (target, bitsize, bitpos,\n-\t\t\t\t\t\t   mode, value, type, cleared);\n-\t\t\t}\n+\t\t      bitpos = lo * TREE_INT_CST_LOW (TYPE_SIZE (elttype));\n+\t\t      store_constructor_field (target, bitsize, bitpos,\n+\t\t\t\t\t       mode, value, type, cleared);\n \t\t    }\n \t\t}\n \t      else\n@@ -3575,7 +3572,7 @@ store_constructor (exp, target, cleared)\n \t\t  addr = gen_rtx (PLUS, Pmode, XEXP (target, 0), pos_rtx);\n \t\t  xtarget = change_address (target, mode, addr);\n \t\t  if (TREE_CODE (value) == CONSTRUCTOR)\n-\t\t    store_constructor (exp, xtarget, cleared);\n+\t\t    store_constructor (value, xtarget, cleared);\n \t\t  else\n \t\t    store_expr (value, xtarget, 0);\n "}]}