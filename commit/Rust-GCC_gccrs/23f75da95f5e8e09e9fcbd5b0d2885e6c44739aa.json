{"sha": "23f75da95f5e8e09e9fcbd5b0d2885e6c44739aa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjNmNzVkYTk1ZjVlOGUwOWU5ZmNiZDViMGQyODg1ZTZjNDQ3MzlhYQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-10-07T23:05:53Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-10-07T23:05:53Z"}, "message": "libstdc++: Fix non-reserved names in headers\n\nMy recent changes to std::exception_ptr moved some members to be inline\nin the header but didn't replace the variable names with reserved names.\n\nThe \"tmp\" variable must be fixed. The \"other\" parameter is actually a\nreserved name because of std::allocator<T>::rebind<U>::other but should\nbe fixed anyway.\n\nThere are also some bad uses of \"ForwardIterator\" in <ranges>.\n\nThere's also a \"il\" parameter in a std::seed_seq constructor in <random>\nwhich is only reserved since C++14.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/random.h (seed_seq(initializer_list<T>)): Rename\n\tparameter to use reserved name.\n\t* include/bits/ranges_algo.h (shift_left, shift_right): Rename\n\ttemplate parameters to use reserved name.\n\t* libsupc++/exception_ptr.h (exception_ptr): Likewise for\n\tparameters and local variables.\n\t* testsuite/17_intro/names.cc: Check \"il\". Do not check \"d\" and\n\t\"y\" in C++20 mode.", "tree": {"sha": "1059fc0a4af215ee6d77e2e22a839ba4d7d1702b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1059fc0a4af215ee6d77e2e22a839ba4d7d1702b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/23f75da95f5e8e09e9fcbd5b0d2885e6c44739aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23f75da95f5e8e09e9fcbd5b0d2885e6c44739aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23f75da95f5e8e09e9fcbd5b0d2885e6c44739aa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23f75da95f5e8e09e9fcbd5b0d2885e6c44739aa/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "635072248a426c933c74ef4431e82401249b6218", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/635072248a426c933c74ef4431e82401249b6218", "html_url": "https://github.com/Rust-GCC/gccrs/commit/635072248a426c933c74ef4431e82401249b6218"}], "stats": {"total": 51, "additions": 31, "deletions": 20}, "files": [{"sha": "4a6558c966a2385072b4a2c7a43d068af9027e50", "filename": "libstdc++-v3/include/bits/random.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23f75da95f5e8e09e9fcbd5b0d2885e6c44739aa/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23f75da95f5e8e09e9fcbd5b0d2885e6c44739aa/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h?ref=23f75da95f5e8e09e9fcbd5b0d2885e6c44739aa", "patch": "@@ -6063,7 +6063,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { }\n \n     template<typename _IntType>\n-      seed_seq(std::initializer_list<_IntType> il);\n+      seed_seq(std::initializer_list<_IntType> __il);\n \n     template<typename _InputIterator>\n       seed_seq(_InputIterator __begin, _InputIterator __end);"}, {"sha": "f1a4cc24c0d59d9872bda619b362a7cc249192c7", "filename": "libstdc++-v3/include/bits/ranges_algo.h", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23f75da95f5e8e09e9fcbd5b0d2885e6c44739aa/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23f75da95f5e8e09e9fcbd5b0d2885e6c44739aa/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_algo.h?ref=23f75da95f5e8e09e9fcbd5b0d2885e6c44739aa", "patch": "@@ -3696,10 +3696,10 @@ namespace ranges\n } // namespace ranges\n \n #define __cpp_lib_shift 201806L\n-  template<class ForwardIterator>\n-    constexpr ForwardIterator\n-    shift_left(ForwardIterator __first, ForwardIterator __last,\n-\t       typename iterator_traits<ForwardIterator>::difference_type __n)\n+  template<typename _ForwardIterator>\n+    constexpr _ForwardIterator\n+    shift_left(_ForwardIterator __first, _ForwardIterator __last,\n+\t       typename iterator_traits<_ForwardIterator>::difference_type __n)\n     {\n       __glibcxx_assert(__n >= 0);\n       if (__n == 0)\n@@ -3711,16 +3711,17 @@ namespace ranges\n       return std::move(std::move(__mid), std::move(__last), std::move(__first));\n     }\n \n-  template<class ForwardIterator>\n-    constexpr ForwardIterator\n-    shift_right(ForwardIterator __first, ForwardIterator __last,\n-\t\ttypename iterator_traits<ForwardIterator>::difference_type __n)\n+  template<typename _ForwardIterator>\n+    constexpr _ForwardIterator\n+    shift_right(_ForwardIterator __first, _ForwardIterator __last,\n+\t\ttypename iterator_traits<_ForwardIterator>::difference_type __n)\n     {\n       __glibcxx_assert(__n >= 0);\n       if (__n == 0)\n \treturn __first;\n \n-      using _Cat = typename iterator_traits<ForwardIterator>::iterator_category;\n+      using _Cat\n+\t= typename iterator_traits<_ForwardIterator>::iterator_category;\n       if constexpr (derived_from<_Cat, bidirectional_iterator_tag>)\n \t{\n \t  auto __mid = ranges::next(__last, -__n, __first);"}, {"sha": "4497d0e8581b759ddc524dfed7068ae8dd5c01d4", "filename": "libstdc++-v3/libsupc++/exception_ptr.h", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23f75da95f5e8e09e9fcbd5b0d2885e6c44739aa/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23f75da95f5e8e09e9fcbd5b0d2885e6c44739aa/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_ptr.h?ref=23f75da95f5e8e09e9fcbd5b0d2885e6c44739aa", "patch": "@@ -180,8 +180,9 @@ namespace std\n #ifndef _GLIBCXX_EH_PTR_COMPAT\n     inline\n #endif\n-    exception_ptr::exception_ptr(const exception_ptr& other) _GLIBCXX_NOEXCEPT\n-    : _M_exception_object(other._M_exception_object)\n+    exception_ptr::exception_ptr(const exception_ptr& __other)\n+      _GLIBCXX_NOEXCEPT\n+    : _M_exception_object(__other._M_exception_object)\n     {\n       if (_M_exception_object)\n \t_M_addref();\n@@ -200,21 +201,21 @@ namespace std\n     inline\n #endif\n     exception_ptr&\n-    exception_ptr::operator=(const exception_ptr& other) _GLIBCXX_USE_NOEXCEPT\n+    exception_ptr::operator=(const exception_ptr& __other) _GLIBCXX_USE_NOEXCEPT\n     {\n-      exception_ptr(other).swap(*this);\n+      exception_ptr(__other).swap(*this);\n       return *this;\n     }\n \n #ifndef _GLIBCXX_EH_PTR_COMPAT\n     inline\n #endif\n     void\n-    exception_ptr::swap(exception_ptr &other) _GLIBCXX_USE_NOEXCEPT\n+    exception_ptr::swap(exception_ptr &__other) _GLIBCXX_USE_NOEXCEPT\n     {\n-      void *tmp = _M_exception_object;\n-      _M_exception_object = other._M_exception_object;\n-      other._M_exception_object = tmp;\n+      void *__tmp = _M_exception_object;\n+      _M_exception_object = __other._M_exception_object;\n+      __other._M_exception_object = __tmp;\n     }\n \n #ifdef _GLIBCXX_EH_PTR_COMPAT"}, {"sha": "5a61c97e9899e9960692915a89080384f7e998ba", "filename": "libstdc++-v3/testsuite/17_intro/names.cc", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23f75da95f5e8e09e9fcbd5b0d2885e6c44739aa/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fnames.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23f75da95f5e8e09e9fcbd5b0d2885e6c44739aa/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fnames.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fnames.cc?ref=23f75da95f5e8e09e9fcbd5b0d2885e6c44739aa", "patch": "@@ -52,9 +52,10 @@\n #define b (\n #endif\n // <queue> and <stack> defined data members called c\n-#define d (\n #if __cplusplus <= 201703L\n-// <numbers> defines std::numbers::e\n+// <chrono> defines operator\"\"d in C++20\n+#define d (\n+// <numbers> defines std::numbers::e in C++20\n #define e (\n #endif\n #define f (\n@@ -98,7 +99,10 @@\n #define v (\n #define w (\n #define x (\n+#if __cplusplus <= 201703L\n+// <chrono> defines operator\"\"y in C++20\n #define y (\n+#endif\n #define z (\n \n #define tmp (\n@@ -107,6 +111,11 @@\n #define uses_allocator  (\n #endif\n \n+#if __cplusplus < 201402L\n+// <complex> defines operator\"\"il\n+#define il  (\n+#endif\n+\n #if __cplusplus < 201703L\n // <charconv> defines to_chars_result::ptr and to_chars_result::ec\n #define ec ("}]}