{"sha": "004afb984beb6efbe25f44a5857b1c27ebc2ec82", "node_id": "C_kwDOANBUbNoAKDAwNGFmYjk4NGJlYjZlZmJlMjVmNDRhNTg1N2IxYzI3ZWJjMmVjODI", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2021-11-04T15:07:28Z"}, "committer": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2021-11-04T17:15:36Z"}, "message": "Treat undefined operands as varying in GORI.\n\nIf the LHS is UNDEFINED simply stop calculating.  Treat op1 and op2\nas VARYING if they are UNDEFINED.\n\n\tPR tree-optimization/103079\n\tgcc/\n\t* gimple-range-gori.cc (gimple_range_calc_op1): Treat undefined as\n\tvarying.\n\t(gimple_range_calc_op2): Ditto.\n\n\tgcc/testsuite/\n\t* gcc.dg/pr103079.c: New.", "tree": {"sha": "6f9c5a694d125164cad695d5ef02fcd44d551fdb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f9c5a694d125164cad695d5ef02fcd44d551fdb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/004afb984beb6efbe25f44a5857b1c27ebc2ec82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/004afb984beb6efbe25f44a5857b1c27ebc2ec82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/004afb984beb6efbe25f44a5857b1c27ebc2ec82", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/004afb984beb6efbe25f44a5857b1c27ebc2ec82/comments", "author": null, "committer": null, "parents": [{"sha": "1ece90ffa9ce63b416296bd662b8117d9b538913", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ece90ffa9ce63b416296bd662b8117d9b538913", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ece90ffa9ce63b416296bd662b8117d9b538913"}], "stats": {"total": 60, "additions": 45, "deletions": 15}, "files": [{"sha": "2e58c23216b10530bc8fa7d4c200a89db1c7557e", "filename": "gcc/gimple-range-gori.cc", "status": "modified", "additions": 25, "deletions": 15, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/004afb984beb6efbe25f44a5857b1c27ebc2ec82/gcc%2Fgimple-range-gori.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/004afb984beb6efbe25f44a5857b1c27ebc2ec82/gcc%2Fgimple-range-gori.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-gori.cc?ref=004afb984beb6efbe25f44a5857b1c27ebc2ec82", "patch": "@@ -37,16 +37,13 @@ bool\n gimple_range_calc_op1 (irange &r, const gimple *stmt, const irange &lhs_range)\n {\n   gcc_checking_assert (gimple_num_ops (stmt) < 3);\n-\n-  // An empty range is viral.\n-  tree type = TREE_TYPE (gimple_range_operand1 (stmt));\n+  // Give up on empty ranges.\n   if (lhs_range.undefined_p ())\n-    {\n-      r.set_undefined ();\n-      return true;\n-    }\n+    return false;\n+\n   // Unary operations require the type of the first operand in the\n   // second range position.\n+  tree type = TREE_TYPE (gimple_range_operand1 (stmt));\n   int_range<2> type_range (type);\n   return gimple_range_handler (stmt)->op1_range (r, type, lhs_range,\n \t\t\t\t\t\t type_range);\n@@ -61,15 +58,23 @@ bool\n gimple_range_calc_op1 (irange &r, const gimple *stmt,\n \t\t       const irange &lhs_range, const irange &op2_range)\n {\n+  // Give up on empty ranges.\n+  if (lhs_range.undefined_p ())\n+    return false;\n+\n   // Unary operation are allowed to pass a range in for second operand\n   // as there are often additional restrictions beyond the type which\n   // can be imposed.  See operator_cast::op1_range().\n   tree type = TREE_TYPE (gimple_range_operand1 (stmt));\n-  // An empty range is viral.\n-  if (op2_range.undefined_p () || lhs_range.undefined_p ())\n+  // If op2 is undefined, solve as if it is varying.\n+  if (op2_range.undefined_p ())\n     {\n-      r.set_undefined ();\n-      return true;\n+      // This is sometimes invoked on single operand stmts.\n+      if (gimple_num_ops (stmt) < 3)\n+\treturn false;\n+      int_range<2> trange (TREE_TYPE (gimple_range_operand2 (stmt)));\n+      return gimple_range_handler (stmt)->op1_range (r, type, lhs_range,\n+\t\t\t\t\t\t     trange);\n     }\n   return gimple_range_handler (stmt)->op1_range (r, type, lhs_range,\n \t\t\t\t\t\t op2_range);\n@@ -84,12 +89,17 @@ bool\n gimple_range_calc_op2 (irange &r, const gimple *stmt,\n \t\t       const irange &lhs_range, const irange &op1_range)\n {\n+  // Give up on empty ranges.\n+  if (lhs_range.undefined_p ())\n+    return false;\n+\n   tree type = TREE_TYPE (gimple_range_operand2 (stmt));\n-  // An empty range is viral.\n-  if (op1_range.undefined_p () || lhs_range.undefined_p ())\n+  // If op1 is undefined, solve as if it is varying.\n+  if (op1_range.undefined_p ())\n     {\n-      r.set_undefined ();\n-      return true;\n+      int_range<2> trange (TREE_TYPE (gimple_range_operand1 (stmt)));\n+      return gimple_range_handler (stmt)->op2_range (r, type, lhs_range,\n+\t\t\t\t\t\t     trange);\n     }\n   return gimple_range_handler (stmt)->op2_range (r, type, lhs_range,\n \t\t\t\t\t\t op1_range);"}, {"sha": "7f6632fc6693fb988e1c0f66155a54af4c86a5b5", "filename": "gcc/testsuite/gcc.dg/pr103079.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/004afb984beb6efbe25f44a5857b1c27ebc2ec82/gcc%2Ftestsuite%2Fgcc.dg%2Fpr103079.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/004afb984beb6efbe25f44a5857b1c27ebc2ec82/gcc%2Ftestsuite%2Fgcc.dg%2Fpr103079.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr103079.c?ref=004afb984beb6efbe25f44a5857b1c27ebc2ec82", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Os -fdump-tree-vrp2\" } */\n+\n+int a, b = -2;\n+int main() {\n+  int d = 0;\n+  int t;\n+  if (b)\n+    goto t1;\n+  if (t) {\n+t1:\n+    if (!a)\n+      d = b;\n+    while (d > -1)\n+      ;\n+  }\n+  return 0;\n+}\n+/* { dg-final { scan-tree-dump \"PHI\" \"vrp2\" } } */\n+"}]}