{"sha": "f706cf1831e57964262a6ddd5d8bf96c7430b9af", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjcwNmNmMTgzMWU1Nzk2NDI2MmE2ZGRkNWQ4YmY5NmM3NDMwYjlhZg==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2010-11-05T22:30:54Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2010-11-05T22:30:54Z"}, "message": "user.cfg.in: Remove tr1_impl headers.\n\n2010-11-05  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* doc/doxygen/user.cfg.in: Remove tr1_impl headers.\n\n\t* testsuite/tr1/4_metaprogramming/integral_constant/requirements/\n\tconstexpr_data.cc: New.\n\n\t* testsuite/util/testsuite_tr1.h (LType, LTypeDerived, NLType): New.\n\t* testsuite/20_util/is_literal_type/value.cc: New.\n\t* testsuite/20_util/is_literal_type/requirements/typedefs.cc: Name.\n\t* testsuite/20_util/is_literal_type/requirements/\n\texplicit_instantiation.cc: New.\n\nFrom-SVN: r166381", "tree": {"sha": "7584d9bea179abf3e1b5e9560f20601b94287d12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7584d9bea179abf3e1b5e9560f20601b94287d12"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f706cf1831e57964262a6ddd5d8bf96c7430b9af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f706cf1831e57964262a6ddd5d8bf96c7430b9af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f706cf1831e57964262a6ddd5d8bf96c7430b9af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f706cf1831e57964262a6ddd5d8bf96c7430b9af/comments", "author": null, "committer": null, "parents": [{"sha": "8d598c74413a6db7810b2f5c0fc8fe08de3acecf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d598c74413a6db7810b2f5c0fc8fe08de3acecf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d598c74413a6db7810b2f5c0fc8fe08de3acecf"}], "stats": {"total": 236, "additions": 219, "deletions": 17}, "files": [{"sha": "ad8b235e04936c79f355a7c692c1a2c10d1a23e6", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f706cf1831e57964262a6ddd5d8bf96c7430b9af/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f706cf1831e57964262a6ddd5d8bf96c7430b9af/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f706cf1831e57964262a6ddd5d8bf96c7430b9af", "patch": "@@ -1,3 +1,16 @@\n+2010-11-05  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* doc/doxygen/user.cfg.in: Remove tr1_impl headers.\n+\n+\t* testsuite/tr1/4_metaprogramming/integral_constant/requirements/\n+\tconstexpr_data.cc: New.\n+\n+\t* testsuite/util/testsuite_tr1.h (LType, LTypeDerived, NLType): New.\n+\t* testsuite/20_util/is_literal_type/value.cc: New.\n+\t* testsuite/20_util/is_literal_type/requirements/typedefs.cc: Name.\n+\t* testsuite/20_util/is_literal_type/requirements/\n+\texplicit_instantiation.cc: New.\n+\n 2010-11-04  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR libstdc++/46303"}, {"sha": "ed5c5a14810816fa2b4f09b25b581cdcf819c6af", "filename": "libstdc++-v3/doc/doxygen/user.cfg.in", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f706cf1831e57964262a6ddd5d8bf96c7430b9af/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fuser.cfg.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f706cf1831e57964262a6ddd5d8bf96c7430b9af/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fuser.cfg.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fuser.cfg.in?ref=f706cf1831e57964262a6ddd5d8bf96c7430b9af", "patch": "@@ -586,6 +586,7 @@ INPUT                  = @srcdir@/doc/doxygen/doxygroups.cc \\\n                          @srcdir@/libsupc++/cxxabi.h \\\n                          @srcdir@/libsupc++/cxxabi-forced.h \\\n                          @srcdir@/libsupc++/exception \\\n+                         @srcdir@/libsupc++/exception_defines.h \\\n                          @srcdir@/libsupc++/exception_ptr.h \\\n                          @srcdir@/libsupc++/initializer_list \\\n                          @srcdir@/libsupc++/nested_exception.h \\\n@@ -665,6 +666,7 @@ INPUT                  = @srcdir@/doc/doxygen/doxygroups.cc \\\n                          include/backward/strstream \\\n                          include/debug/bitset \\\n                          include/debug/deque \\\n+                         include/debug/forward_list \\\n                          include/debug/list \\\n                          include/debug/map \\\n                          include/debug/set \\\n@@ -674,6 +676,7 @@ INPUT                  = @srcdir@/doc/doxygen/doxygroups.cc \\\n                          include/debug/vector \\\n                          include/profile/bitset \\\n                          include/profile/deque \\\n+                         include/profile/forward_list \\\n                          include/profile/list \\\n                          include/profile/map \\\n                          include/profile/set \\\n@@ -707,27 +710,14 @@ INPUT                  = @srcdir@/doc/doxygen/doxygroups.cc \\\n                          include/tr1/ctime \\\n                          include/tr1/cwchar \\\n                          include/tr1/cwctype \\\n-                         include/tr1_impl/array \\\n-                         include/tr1_impl/cctype \\\n-                         include/tr1_impl/cfenv \\\n-                         include/tr1_impl/cinttypes \\\n-                         include/tr1_impl/cmath \\\n-                         include/tr1_impl/complex \\\n-                         include/tr1_impl/cstdint \\\n-                         include/tr1_impl/cstdio \\\n-                         include/tr1_impl/cstdlib \\\n-                         include/tr1_impl/cwchar \\\n-                         include/tr1_impl/cwctype \\\n-                         include/tr1_impl/type_traits \\\n-                         include/tr1_impl/utility \\\n-                         include/tr1_impl \\\n                          include/decimal/decimal \\\n                          include/ \\\n                          include/@host_alias@/bits \\\n                          include/backward \\\n                          include/bits \\\n                          include/debug \\\n                          include/parallel \\\n+\t\t\t include/precompiled \\\n                          include/profile \\\n                          include/profile/impl \\\n                          include/ext \\"}, {"sha": "6669a1e89f83dcd16325f0fe329aef9baf5dc0e0", "filename": "libstdc++-v3/testsuite/20_util/is_literal_type/requirements/explicit_instantiation.cc", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f706cf1831e57964262a6ddd5d8bf96c7430b9af/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_literal_type%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f706cf1831e57964262a6ddd5d8bf96c7430b9af/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_literal_type%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_literal_type%2Frequirements%2Fexplicit_instantiation.cc?ref=f706cf1831e57964262a6ddd5d8bf96c7430b9af", "patch": "@@ -0,0 +1,30 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+// 2010-02-21  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// NB: This file is for testing type_traits with NO OTHER INCLUDES.\n+\n+#include <type_traits>\n+\n+namespace std\n+{\n+  typedef short test_type;\n+  template struct is_literal_type<test_type>;\n+}"}, {"sha": "25bc88f29fba1ad7a08a4bbc833f0c0a577d7590", "filename": "libstdc++-v3/testsuite/20_util/is_literal_type/requirements/typedefs.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f706cf1831e57964262a6ddd5d8bf96c7430b9af/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_literal_type%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f706cf1831e57964262a6ddd5d8bf96c7430b9af/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_literal_type%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_literal_type%2Frequirements%2Ftypedefs.cc?ref=f706cf1831e57964262a6ddd5d8bf96c7430b9af", "patch": "@@ -0,0 +1,36 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// 2010-02-21  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+//\n+// NB: This file is for testing type_traits with NO OTHER INCLUDES.\n+\n+#include <type_traits>\n+\n+// { dg-do compile }\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::is_literal_type<int>                test_type;\n+  typedef test_type::value_type               value_type;\n+  typedef test_type::type                     type;\n+  typedef test_type::type::value_type         type_value_type;\n+  typedef test_type::type::type               type_type;\n+}"}, {"sha": "77a6902b7685ab42c1de1e7e9be602d569b74bab", "filename": "libstdc++-v3/testsuite/20_util/is_literal_type/value.cc", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f706cf1831e57964262a6ddd5d8bf96c7430b9af/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_literal_type%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f706cf1831e57964262a6ddd5d8bf96c7430b9af/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_literal_type%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_literal_type%2Fvalue.cc?ref=f706cf1831e57964262a6ddd5d8bf96c7430b9af", "patch": "@@ -0,0 +1,54 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// 2010-03-23  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <type_traits>\n+#include <testsuite_hooks.h>\n+#include <testsuite_tr1.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using std::is_literal_type;\n+  using namespace __gnu_test;\n+\n+  VERIFY( (test_category<is_literal_type, int>(true)) );\n+  VERIFY( (test_category<is_literal_type, unsigned char>(true)) );\n+\n+  VERIFY( (test_category<is_literal_type, TType>(true)) );\n+  VERIFY( (test_category<is_literal_type, PODType>(true)) );\n+\n+  VERIFY( (test_category<is_literal_type, NType>(false)) );\n+  VERIFY( (test_category<is_literal_type, SLType>(false)) );\n+\n+  VERIFY( (test_category<is_literal_type, LType>(true)) );\n+  VERIFY( (test_category<is_literal_type, LType[5]>(true)) );\n+\n+  VERIFY( (test_category<is_literal_type, NLType>(false)) );\n+  VERIFY( (test_category<is_literal_type, NLType[5]>(false)) );\n+\n+  VERIFY( (test_category<is_literal_type, LTypeDerived>(true)) );\n+  VERIFY( (test_category<is_literal_type, LTypeDerived[5]>(true)) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "52497e1f443a4e6acc53804b2d3d4caea1e38b50", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/integral_constant/requirements/constexpr_data.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f706cf1831e57964262a6ddd5d8bf96c7430b9af/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fintegral_constant%2Frequirements%2Fconstexpr_data.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f706cf1831e57964262a6ddd5d8bf96c7430b9af/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fintegral_constant%2Frequirements%2Fconstexpr_data.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fintegral_constant%2Frequirements%2Fconstexpr_data.cc?ref=f706cf1831e57964262a6ddd5d8bf96c7430b9af", "patch": "@@ -0,0 +1,52 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <type_traits>\n+#include <testsuite_common_types.h>\n+\n+namespace __gnu_test\n+{\n+  struct constexpr_member_data\n+  {\n+    template<typename _Ttesttype>\n+      void\n+      operator()()\n+      {\n+\tstruct _Concept\n+\t{\n+\t  void __constraint()\n+\t  {\n+\t    constexpr auto v __attribute__((unused)) (_Ttesttype::value);\n+\t  }\n+\t};\n+\n+\t_Concept c;\n+\tc.__constraint();\n+      }\n+  };\n+}\n+\n+int main()\n+{\n+  __gnu_test::constexpr_member_data test;\n+  test.operator()<std::integral_constant<unsigned short, 69>>();\n+  test.operator()<std::integral_constant<bool, true>>();\n+  return 0;\n+}"}, {"sha": "6a48a309e1802293d9179b3027bf38b9deb5e6b3", "filename": "libstdc++-v3/testsuite/util/testsuite_tr1.h", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f706cf1831e57964262a6ddd5d8bf96c7430b9af/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_tr1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f706cf1831e57964262a6ddd5d8bf96c7430b9af/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_tr1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_tr1.h?ref=f706cf1831e57964262a6ddd5d8bf96c7430b9af", "patch": "@@ -57,7 +57,7 @@ namespace __gnu_test\n   // For testing tr1/type_traits/extent, which has a second template\n   // parameter.\n   template<template<typename, unsigned> class Property,\n-           typename Type, unsigned Uint>\n+\t   typename Type, unsigned Uint>\n     bool\n     test_property(typename Property<Type, Uint>::value_type value)\n     {\n@@ -80,7 +80,7 @@ namespace __gnu_test\n #endif\n \n   template<template<typename, typename> class Relationship,\n-           typename Type1, typename Type2>\n+\t   typename Type1, typename Type2>\n     bool\n     test_relationship(bool value)\n     {\n@@ -188,6 +188,33 @@ namespace __gnu_test\n     int j;\n   };\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+  struct LType // literal type\n+  {\n+    int _M_i;\n+\n+    constexpr LType(int __i) : _M_i(__i) { }\n+  };\n+\n+  struct LTypeDerived : public LType\n+  {\n+    constexpr LTypeDerived(int __i) : LType(__i) { }\n+  };\n+\n+  struct NLType // not literal type\n+  {\n+    int _M_i;\n+\n+    NLType() : _M_i(0) { }\n+\n+    constexpr NLType(int __i) : _M_i(__i) { }\n+\n+    NLType(const NLType& __other) : _M_i(__other._M_i) { }\n+\n+    ~NLType() { _M_i = 0; }\n+  };\n+#endif\n+\n   int truncate_float(float x) { return (int)x; }\n   long truncate_double(double x) { return (long)x; }\n \n@@ -251,7 +278,7 @@ namespace __gnu_test\n \n   // For use in 8_c_compatibility.\n   template<typename R, typename T>\n-    typename __gnu_cxx::__enable_if<std::__are_same<R, T>::__value, \n+    typename __gnu_cxx::__enable_if<std::__are_same<R, T>::__value,\n \t\t\t\t    bool>::__type\n     check_ret_type(T)\n     { return true; }"}]}