{"sha": "cc8d70cd9dd4719e408ab89a1648668a54ac31af", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2M4ZDcwY2Q5ZGQ0NzE5ZTQwOGFiODlhMTY0ODY2OGE1NGFjMzFhZg==", "commit": {"author": {"name": "Sa Liu", "email": "saliu@de.ibm.com", "date": "2006-12-11T00:53:42Z"}, "committer": {"name": "Ben Elliston", "email": "bje@gcc.gnu.org", "date": "2006-12-11T00:53:42Z"}, "message": "spu-elf.h (STARTFILE_SPEC): Update.\n\n\t* config/spu/spu-elf.h (STARTFILE_SPEC): Update.\n\t(ENDFILE_SPEC): Likewise.\n\t* config/spu/spu.opt (mstdmain): New option.\n\t* config/spu/crti.asm: Remove.\n\t* config/spu/crtn.asm: Likewise.\n\t* config/spu/crt0.c: Likewise.\n\t* config/spu/crtend.c: Likewise.\n\t* config/spu/t-spu-elf (EXTRA_MULTILIB_PARTS): Remove crt0 files\n\tlisted above.\n\t($(T)crti.o, $(T)crtn.o, $(T)crt1.o, $(T)crtend1.o): Remove.\n\t* doc/invoke.texi (SPU Options): Document -mstdmain.\n\nCo-Authored-By: Ben Elliston <bje@au.ibm.com>\n\nFrom-SVN: r119727", "tree": {"sha": "c33fcffc2506173c3323aa787571eeea10689c11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c33fcffc2506173c3323aa787571eeea10689c11"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cc8d70cd9dd4719e408ab89a1648668a54ac31af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc8d70cd9dd4719e408ab89a1648668a54ac31af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc8d70cd9dd4719e408ab89a1648668a54ac31af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc8d70cd9dd4719e408ab89a1648668a54ac31af/comments", "author": {"login": "sa-liu", "id": 47213938, "node_id": "MDQ6VXNlcjQ3MjEzOTM4", "avatar_url": "https://avatars.githubusercontent.com/u/47213938?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sa-liu", "html_url": "https://github.com/sa-liu", "followers_url": "https://api.github.com/users/sa-liu/followers", "following_url": "https://api.github.com/users/sa-liu/following{/other_user}", "gists_url": "https://api.github.com/users/sa-liu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sa-liu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sa-liu/subscriptions", "organizations_url": "https://api.github.com/users/sa-liu/orgs", "repos_url": "https://api.github.com/users/sa-liu/repos", "events_url": "https://api.github.com/users/sa-liu/events{/privacy}", "received_events_url": "https://api.github.com/users/sa-liu/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ea6f5c57de65853ab17c8db9bc594c06817b97b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea6f5c57de65853ab17c8db9bc594c06817b97b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea6f5c57de65853ab17c8db9bc594c06817b97b7"}], "stats": {"total": 335, "additions": 40, "deletions": 295}, "files": [{"sha": "23dfc078da958e8693653aacea252a2155eb6581", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc8d70cd9dd4719e408ab89a1648668a54ac31af/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc8d70cd9dd4719e408ab89a1648668a54ac31af/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cc8d70cd9dd4719e408ab89a1648668a54ac31af", "patch": "@@ -1,3 +1,18 @@\n+2006-12-11  Sa Liu  <saliu@de.ibm.com>\n+\t    Ben Elliston  <bje@au.ibm.com>\n+\n+\t* config/spu/spu-elf.h (STARTFILE_SPEC): Update.\n+\t(ENDFILE_SPEC): Likewise.\n+\t* config/spu/spu.opt (mstdmain): New option.\n+\t* config/spu/crti.asm: Remove.\n+\t* config/spu/crtn.asm: Likewise.\n+\t* config/spu/crt0.c: Likewise.\n+\t* config/spu/crtend.c: Likewise.\n+\t* config/spu/t-spu-elf (EXTRA_MULTILIB_PARTS): Remove crt0 files\n+\tlisted above.\n+\t($(T)crti.o, $(T)crtn.o, $(T)crt1.o, $(T)crtend1.o): Remove.\n+\t* doc/invoke.texi (SPU Options): Document -mstdmain.\n+\n 2006-12-10  Zdenek Dvorak <dvorakz@suse.cz>\n \n \t* doc/loop.texi: Document number_of_latch_executions and"}, {"sha": "eee15922f1f6acea738a3ccc50b219852a8bb7ab", "filename": "gcc/config/spu/crt0.c", "status": "removed", "additions": 0, "deletions": 131, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea6f5c57de65853ab17c8db9bc594c06817b97b7/gcc%2Fconfig%2Fspu%2Fcrt0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea6f5c57de65853ab17c8db9bc594c06817b97b7/gcc%2Fconfig%2Fspu%2Fcrt0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fcrt0.c?ref=ea6f5c57de65853ab17c8db9bc594c06817b97b7", "patch": "@@ -1,131 +0,0 @@\n-/* Copyright (C) 2006 Free Software Foundation, Inc.\n-  \n-   This file is free software; you can redistribute it and/or modify it under\n-   the terms of the GNU General Public License as published by the Free\n-   Software Foundation; either version 2 of the License, or (at your option)\n-   any later version.\n-  \n-   This file is distributed in the hope that it will be useful, but WITHOUT\n-   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-   FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-   for more details.\n-  \n-   You should have received a copy of the GNU General Public License\n-   along with this file; see the file COPYING.  If not, write to the Free\n-   Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n-   02110-1301, USA.  */\n-\n-/* As a special exception, if you link this library with files compiled with\n-   GCC to produce an executable, this does not cause the resulting executable\n-   to be covered by the GNU General Public License.  The exception does not\n-   however invalidate any other reasons why the executable file might be covered\n-   by the GNU General Public License. */\n-\n-extern int main(int, unsigned long long, unsigned long long);\n-void _start(int, unsigned long long, unsigned long long) __attribute__((__naked__));\n-\n-extern void exit(int);\n-\n-void _exit(int) __attribute__((__naked__));\n-\n-typedef void (*func_ptr) (void);\n-typedef __attribute__ ((__vector_size__(16))) unsigned int vec_uint4;\n-\n-extern vec_uint4 __stack[];\n-register vec_uint4 si_sp __asm__(\"$sp\");\n-register unsigned int si_r2 __asm__(\"$2\");\n-\n-extern char _end[];\n-\n-/* If we want these aligned we need to do it in the linker script. */\n-func_ptr __CTOR_LIST__[1]\n-  __attribute__ ((__section__(\".ctors\"), __aligned__(4)))\n-  = { (func_ptr) (-1) };\n-\n-static func_ptr __DTOR_LIST__[1]\n-  __attribute__((__section__(\".dtors\"), __aligned__(4)))\n-  = { (func_ptr) (-1) };\n-\n-void *__dso_handle = 0;\n-\n-/* According to the BE Linux ABI an SPU module is called with these\n- * parameters.  Also, $2 is set to the Available Stack Size.  */\n-void\n-_start(int spu_id,\n-       unsigned long long param,\n-       unsigned long long env)\n-{\n-  unsigned int stack_size;\n-  unsigned int sp = (unsigned int)(__stack - 2);\n-\n-  /* Initialize the stack.  __stack has been set to point to the top\n-     quadword of the stack.  The ABI requires at least a NULL terminated\n-     back chain and lr save area.  For example:\n-         +----------------+\n-\t | 0              |\n-         +----------------+  <-  __stack (e.g., 0x3fff0)\n-\t | space for $lr  |\n-         +----------------+\n-\t | back chain     |\n-         +----------------+  <-  $sp  (e.g., __stack - 32, 0x3ffd0)\n-  */\n-  __stack[0] = (vec_uint4){0, 0, 0, 0};\n-  __stack[-1] = (vec_uint4){0, 0, 0, 0};\n-\n-  /* Initialize the Available Stack Size word of the Stack Pointer\n-   * information register.  The BE Linux ABI passes the stack size in\n-   * $2, or use everything up to _end if $2 == 0. */\n-  stack_size = si_r2 == 0 ? sp - (unsigned int)_end : si_r2;\n-\n-  __stack[-2] = (vec_uint4){(unsigned int)__stack, stack_size, 0, 0};\n-\n-  si_sp = (vec_uint4){sp, stack_size, 0, 0};\n-\n-\n-  {\n-    extern func_ptr __CTOR_END__[];\n-    func_ptr *p;\n-\n-    /* The compiler assumes all symbols are 16 byte aligned, which is\n-     * not the case for __CTOR_END__.  This inline assembly makes sure\n-     * the address is loaded into a register for which the compiler does\n-     * not assume anything about alignment. */\n-    __asm__ (\"\\n\" : \"=r\" (p) : \"0\" (__CTOR_END__ - 1));\n-\n-    for (; *p != (func_ptr) -1; p--)\n-      (*p) ();\n-  }\n-\n-  exit(main(spu_id, param, env));\n-  __asm__ volatile ( \"\tstop\t0x20ff\");\n-}\n-\n-/* C99 requires _Exit */\n-void _Exit(int) __attribute__((__weak__, __alias__(\"_exit\")));\n-\n-void\n-_exit(int rc)\n-{\n-  {\n-    static func_ptr *p = 0;\n-    if (!p)\n-      {\n-\t/* See comment for __CTOR_END__ above. */\n-\t__asm__ (\"\" : \"=r\" (p) : \"0\" (__DTOR_LIST__ + 1));\n-\tfor (; *p; p++)\n-\t  (*p) ();\n-      }\n-  }\n-  /* Some self modifying code to return 'rc' in the 'stop' insn. */\n-  __asm__ volatile (\n-    \"\tori\t$3, %0,0\\n\"\n-    \"\tlqr\t$4, 1f\\n\"\n-    \"\tcbd\t$5, 1f+3($sp)\\n\"\n-    \"\tshufb\t$0, %0, $4, $5\\n\"\n-    \"\tstqr\t$0, 1f\\n\"\n-    \"\tsync\\n\"\n-    \"1:\\n\"\n-    \"\tstop\t0x2000\\n\"\n-    : : \"r\" (rc) );\n-}\n-"}, {"sha": "694a7eef2447f5f4d76ad45b034701741df1d778", "filename": "gcc/config/spu/crtend.c", "status": "removed", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea6f5c57de65853ab17c8db9bc594c06817b97b7/gcc%2Fconfig%2Fspu%2Fcrtend.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea6f5c57de65853ab17c8db9bc594c06817b97b7/gcc%2Fconfig%2Fspu%2Fcrtend.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fcrtend.c?ref=ea6f5c57de65853ab17c8db9bc594c06817b97b7", "patch": "@@ -1,32 +0,0 @@\n-/* Copyright (C) 2006 Free Software Foundation, Inc.\n-\n-   This file is free software; you can redistribute it and/or modify it under\n-   the terms of the GNU General Public License as published by the Free\n-   Software Foundation; either version 2 of the License, or (at your option) \n-   any later version.\n-\n-   This file is distributed in the hope that it will be useful, but WITHOUT\n-   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-   FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-   for more details.\n-\n-   You should have received a copy of the GNU General Public License\n-   along with this file; see the file COPYING.  If not, write to the Free\n-   Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n-   02110-1301, USA.  */\n-\n-/* As a special exception, if you link this library with files compiled with \n-   GCC to produce an executable, this does not cause the resulting executable \n-   to be covered by the GNU General Public License.  The exception does not \n-   however invalidate any other reasons why the executable file might be covered \n-   by the GNU General Public License. */\n-\n-typedef void (*func_ptr) (void);\n-\n-func_ptr __CTOR_END__[1]\n-  __attribute__ ((section(\".ctors\"), aligned(sizeof(func_ptr))))\n-  = { (func_ptr) (0) };\n-\n-func_ptr __DTOR_END__[1]\n-  __attribute__((section(\".dtors\"), aligned(sizeof(func_ptr))))\n-  = { (func_ptr) (0) };"}, {"sha": "dd0aa3da8adb2df16e45360a16eeaf140faee6ce", "filename": "gcc/config/spu/crti.asm", "status": "removed", "additions": 0, "deletions": 53, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea6f5c57de65853ab17c8db9bc594c06817b97b7/gcc%2Fconfig%2Fspu%2Fcrti.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea6f5c57de65853ab17c8db9bc594c06817b97b7/gcc%2Fconfig%2Fspu%2Fcrti.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fcrti.asm?ref=ea6f5c57de65853ab17c8db9bc594c06817b97b7", "patch": "@@ -1,53 +0,0 @@\n-#  Copyright (C) 2006 Free Software Foundation, Inc.\n-#\n-#  This file is free software; you can redistribute it and/or modify it under\n-#  the terms of the GNU General Public License as published by the Free\n-#  Software Foundation; either version 2 of the License, or (at your option) \n-#  any later version.\n-#\n-#  This file is distributed in the hope that it will be useful, but WITHOUT\n-#  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-#  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-#  for more details.\n-#\n-#  You should have received a copy of the GNU General Public License\n-#  along with this file; see the file COPYING.  If not, write to the Free\n-#  Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n-#  02110-1301, USA.  */\n-# \n-#    As a special exception, if you link this library with files\n-#    compiled with GCC to produce an executable, this does not cause\n-#    the resulting executable to be covered by the GNU General Public License.\n-#    This exception does not however invalidate any other reasons why\n-#    the executable file might be covered by the GNU General Public License.\n-# \n-\n-# This file just make a stack frame for the contents of the .fini and\n-# .init sections.  Users may put any desired instructions in those\n-# sections.\n-\n-\t# Note - this macro is complimented by the FUNC_END macro\n-\t# in crtn.asm.  If you change this macro you must also change\n-\t# that macro match.\n-.macro FUNC_START\n-\t#  Create a stack frame and save any call-preserved registers\n-\tai\t$sp, $sp, -16\n-\tstqd\t$lr, 0($sp)\n-.endm\n-\t\t\n-\t.file\t\t\"crti.asm\"\n-\n-\t.section\t\".init\"\n-\t.align 2\n-\t.global\t_init\n-_init:\n-\tFUNC_START\n-\t\n-\t\t\n-\t.section\t\".fini\"\n-\t.align\t2\n-\t.global\t_fini\n-_fini:\n-\tFUNC_START\n-\t\n-# end of crti.asm"}, {"sha": "27b5276198a0ea05455eeff661b99916c63ea82a", "filename": "gcc/config/spu/crtn.asm", "status": "removed", "additions": 0, "deletions": 54, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea6f5c57de65853ab17c8db9bc594c06817b97b7/gcc%2Fconfig%2Fspu%2Fcrtn.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea6f5c57de65853ab17c8db9bc594c06817b97b7/gcc%2Fconfig%2Fspu%2Fcrtn.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fcrtn.asm?ref=ea6f5c57de65853ab17c8db9bc594c06817b97b7", "patch": "@@ -1,54 +0,0 @@\n-#  Copyright (C) 2006 Free Software Foundation, Inc.\n-#\n-#  This file is free software; you can redistribute it and/or modify it under\n-#  the terms of the GNU General Public License as published by the Free\n-#  Software Foundation; either version 2 of the License, or (at your option) \n-#  any later version.\n-#\n-#  This file is distributed in the hope that it will be useful, but WITHOUT\n-#  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-#  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-#  for more details.\n-#\n-#  You should have received a copy of the GNU General Public License\n-#  along with this file; see the file COPYING.  If not, write to the Free\n-#  Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n-#  02110-1301, USA.  */\n-# \n-#    As a special exception, if you link this library with files\n-#    compiled with GCC to produce an executable, this does not cause\n-#    the resulting executable to be covered by the GNU General Public License.\n-#    This exception does not however invalidate any other reasons why\n-#    the executable file might be covered by the GNU General Public License.\n-# \n-\n-# This file just makes sure that the .fini and .init sections do in\n-# fact return.  Users may put any desired instructions in those sections.\n-# This file is the last thing linked into any executable.\n-\n-\t# Note - this macro is complimented by the FUNC_START macro\n-\t# in crti.asm.  If you change this macro you must also change\n-\t# that macro match.\n-\t#\n-\t# Note - we do not try any fancy optimisations of the return\n-\t# sequences here, it is just not worth it.  Instead keep things\n-\t# simple.  Restore all the save resgisters, including the link\n-\t# register and then perform the correct function return instruction.\n-.macro FUNC_END\n-\tlqd\t$lr, 0($sp)\n-\tai\t$sp, $sp, 16\n-\tbi\t$lr\n-.endm\n-\t\t\n-\t\n-\t.file\t\t\"crtn.asm\"\n-\n-\t.section\t\".init\"\n-\t;;\n-\tFUNC_END\n-\t\n-\t.section\t\".fini\"\n-\t;;\n-\tFUNC_END\n-\t\n-# end of crtn.asm"}, {"sha": "acdd467c03410d65f0d90b9c7ee53cee5e6b7632", "filename": "gcc/config/spu/spu-elf.h", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc8d70cd9dd4719e408ab89a1648668a54ac31af/gcc%2Fconfig%2Fspu%2Fspu-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc8d70cd9dd4719e408ab89a1648668a54ac31af/gcc%2Fconfig%2Fspu%2Fspu-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu-elf.h?ref=cc8d70cd9dd4719e408ab89a1648668a54ac31af", "patch": "@@ -25,11 +25,18 @@\n             asm_output_aligned_bss (FILE, DECL, NAME, SIZE, ALIGN)\n \n \n-#undef  STARTFILE_SPEC\n-#define STARTFILE_SPEC\t\"crt1%O%s\"\n+\n+/* Provide a STARTFILE_SPEC appropriate for GNU/Linux.  Here we add\n+   the GNU/Linux magical crtbegin.o file (see crtstuff.c) which\n+   provides part of the support for getting C++ file-scope static\n+   object constructed before entering `main'.  */\n+\n+#undef  STARTFILE_SPEC \n+#define STARTFILE_SPEC \"%{mstdmain: crt2.o%s} %{!mstdmain: crt1.o%s} \\\n+\t\t\tcrti.o%s crtbegin.o%s\"\n \n #undef  ENDFILE_SPEC\n-#define ENDFILE_SPEC\t\"crtend1%O%s\"\n+#define ENDFILE_SPEC   \"crtend.o%s crtn.o%s\"\n \n #define PREFERRED_DEBUGGING_TYPE DWARF2_DEBUG\n "}, {"sha": "5df242ebe9e6ebe4c32ca73431e127c701168865", "filename": "gcc/config/spu/spu.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc8d70cd9dd4719e408ab89a1648668a54ac31af/gcc%2Fconfig%2Fspu%2Fspu.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc8d70cd9dd4719e408ab89a1648668a54ac31af/gcc%2Fconfig%2Fspu%2Fspu.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.opt?ref=cc8d70cd9dd4719e408ab89a1648668a54ac31af", "patch": "@@ -36,6 +36,10 @@ munsafe-dma\n Target Report RejectNegative InverseMask(SAFE_DMA)\n volatile must be specified on any memory that is effected by DMA\n \n+mstdmain\n+Target Report Mask(STD_MAIN)\n+Use standard main function as entry for startup\n+\n mbranch-hints\n Target Report Mask(BRANCH_HINTS)\n Generate branch hints for branches"}, {"sha": "b02cbd4bbf1e9bf9e9034b38be3097459b2ab1fa", "filename": "gcc/config/spu/t-spu-elf", "status": "modified", "additions": 1, "deletions": 21, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc8d70cd9dd4719e408ab89a1648668a54ac31af/gcc%2Fconfig%2Fspu%2Ft-spu-elf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc8d70cd9dd4719e408ab89a1648668a54ac31af/gcc%2Fconfig%2Fspu%2Ft-spu-elf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Ft-spu-elf?ref=cc8d70cd9dd4719e408ab89a1648668a54ac31af", "patch": "@@ -54,31 +54,11 @@ CRTSTUFF_T_CFLAGS =\n # Neither gcc or newlib seem to have a standard way to generate multiple\n # crt*.o files.  So we don't use the standard crt0.o name anymore.\n \n-EXTRA_MULTILIB_PARTS = crtbegin.o crtend.o crti.o crtn.o crt1.o crtend1.o\n+EXTRA_MULTILIB_PARTS = crtbegin.o crtend.o\n \n LIBGCC = stmp-multilib\n INSTALL_LIBGCC = install-multilib\n \n-# Assemble startup files.\n-$(T)crti.o: $(srcdir)/config/spu/crti.asm $(GCC_PASSES)\n-\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(MULTILIB_CFLAGS) $(INCLUDES) \\\n-\t-c -o $(T)crti.o -x assembler-with-cpp $(srcdir)/config/spu/crti.asm\n-\n-$(T)crtn.o: $(srcdir)/config/spu/crtn.asm $(GCC_PASSES)\n-\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(MULTILIB_CFLAGS) $(INCLUDES) \\\n-\t-c -o $(T)crtn.o -x assembler-with-cpp $(srcdir)/config/spu/crtn.asm\n-\n-$(T)crt1.o: $(srcdir)/config/spu/crt0.c $(GCC_PASSES)\n-\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(MULTILIB_CFLAGS) $(INCLUDES) \\\n-\t-O2 \\\n-\t-c -o $(T)crt1.o $(srcdir)/config/spu/crt0.c\n-\n-$(T)crtend1.o: $(srcdir)/config/spu/crtend.c $(GCC_PASSES)\n-\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(MULTILIB_CFLAGS) $(INCLUDES) \\\n-\t-O2 \\\n-\t-c -o $(T)crtend1.o $(srcdir)/config/spu/crtend.c\n-\n-\n spu.o: $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n   $(RTL_H) $(REGS_H) hard-reg-set.h \\\n   real.h insn-config.h conditions.h insn-attr.h flags.h $(RECOG_H) \\"}, {"sha": "942ee90b4ab46f3cca0503e747e1547baef1233d", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc8d70cd9dd4719e408ab89a1648668a54ac31af/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc8d70cd9dd4719e408ab89a1648668a54ac31af/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=cc8d70cd9dd4719e408ab89a1648668a54ac31af", "patch": "@@ -733,7 +733,7 @@ See RS/6000 and PowerPC Options.\n @gccoptlist{-mwarn-reloc -merror-reloc @gol\n -msafe-dma -munsafe-dma @gol\n -mbranch-hints @gol\n--msmall-mem -mlarge-mem}\n+-msmall-mem -mlarge-mem -mstdmain}\n \n @emph{System V Options}\n @gccoptlist{-Qy  -Qn  -YP,@var{paths}  -Ym,@var{dir}}\n@@ -12920,6 +12920,15 @@ By default, GCC generates code assuming that addresses are never larger\n than 18 bits.  With @option{-mlarge-mem} code is generated that assumes\n a full 32 bit address.\n \n+@item -mstdmain\n+@opindex mstdmain\n+\n+By default, GCC links against startup code that assumes the SPU-style\n+main function interface (which has an unconventional parameter list).\n+With @option{-mstdmain}, GCC will link your program against startup\n+code that assumes a C99-style interface to @code{main}, including a\n+local copy of @code{argv} strings.\n+\n @end table\n \n @node System V Options"}]}