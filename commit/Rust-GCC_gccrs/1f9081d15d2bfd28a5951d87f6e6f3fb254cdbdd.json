{"sha": "1f9081d15d2bfd28a5951d87f6e6f3fb254cdbdd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWY5MDgxZDE1ZDJiZmQyOGE1OTUxZDg3ZjZlNmYzZmIyNTRjZGJkZA==", "commit": {"author": {"name": "Xinliang David Li", "email": "davidxl@gcc.gnu.org", "date": "2011-06-09T22:49:12Z"}, "committer": {"name": "Xinliang David Li", "email": "davidxl@gcc.gnu.org", "date": "2011-06-09T22:49:12Z"}, "message": "Revert r174848,174849\n\nFrom-SVN: r174864", "tree": {"sha": "90db0a19c995b30c6d8bb39190ca384e0d63716e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/90db0a19c995b30c6d8bb39190ca384e0d63716e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f9081d15d2bfd28a5951d87f6e6f3fb254cdbdd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f9081d15d2bfd28a5951d87f6e6f3fb254cdbdd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f9081d15d2bfd28a5951d87f6e6f3fb254cdbdd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f9081d15d2bfd28a5951d87f6e6f3fb254cdbdd/comments", "author": null, "committer": null, "parents": [{"sha": "54466dde7477a1ef8dacf54b89ab47ef59d83555", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54466dde7477a1ef8dacf54b89ab47ef59d83555", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54466dde7477a1ef8dacf54b89ab47ef59d83555"}], "stats": {"total": 210, "additions": 33, "deletions": 177}, "files": [{"sha": "614b7858a3f9ab585ff5a71a7af9fb4118f691a6", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f9081d15d2bfd28a5951d87f6e6f3fb254cdbdd/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f9081d15d2bfd28a5951d87f6e6f3fb254cdbdd/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=1f9081d15d2bfd28a5951d87f6e6f3fb254cdbdd", "patch": "@@ -1117,9 +1117,6 @@ cgraph_finalize_compilation_unit (void)\n       fflush (stderr);\n     }\n \n-  if (flag_dump_passes)\n-    dump_passes ();\n-\n   /* Gimplify and lower all functions, compute reachability and\n      remove unreachable nodes.  */\n   cgraph_analyze_functions ();"}, {"sha": "5a5360785bd9f69dec016a9d1e6ef82fa354dae5", "filename": "gcc/common.opt", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f9081d15d2bfd28a5951d87f6e6f3fb254cdbdd/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f9081d15d2bfd28a5951d87f6e6f3fb254cdbdd/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=1f9081d15d2bfd28a5951d87f6e6f3fb254cdbdd", "patch": "@@ -1012,10 +1012,6 @@ fdump-noaddr\n Common Report Var(flag_dump_noaddr)\n Suppress output of addresses in debugging dumps\n \n-fdump-passes\n-Common Var(flag_dump_passes) Init(0)\n-Dump optimization passes\n-\n fdump-unnumbered\n Common Report Var(flag_dump_unnumbered)\n Suppress output of instruction numbers, line number notes and addresses in debugging dumps"}, {"sha": "b7b17b19387f7b4c2b818c0228ed98cb72cfb601", "filename": "gcc/cprop.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f9081d15d2bfd28a5951d87f6e6f3fb254cdbdd/gcc%2Fcprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f9081d15d2bfd28a5951d87f6e6f3fb254cdbdd/gcc%2Fcprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcprop.c?ref=1f9081d15d2bfd28a5951d87f6e6f3fb254cdbdd", "patch": "@@ -1843,17 +1843,15 @@ one_cprop_pass (void)\n static bool\n gate_rtl_cprop (void)\n {\n-  return optimize > 0 && flag_gcse;\n+  return optimize > 0 && flag_gcse\n+    && !cfun->calls_setjmp\n+    && dbg_cnt (cprop);\n }\n \n static unsigned int\n execute_rtl_cprop (void)\n {\n   int changed;\n-\n-  if (cfun->calls_setjmp || !dbg_cnt (cprop))\n-    return 0;\n-\n   delete_unreachable_blocks ();\n   df_set_flags (DF_LR_RUN_DCE);\n   df_analyze ();\n@@ -1884,3 +1882,4 @@ struct rtl_opt_pass pass_rtl_cprop =\n   TODO_verify_flow | TODO_ggc_collect   /* todo_flags_finish */\n  }\n };\n+"}, {"sha": "0069f788edb061c14c55606a38026a9ba2062a5a", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f9081d15d2bfd28a5951d87f6e6f3fb254cdbdd/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f9081d15d2bfd28a5951d87f6e6f3fb254cdbdd/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=1f9081d15d2bfd28a5951d87f6e6f3fb254cdbdd", "patch": "@@ -291,7 +291,6 @@ Objective-C and Objective-C++ Dialects}.\n -fdump-translation-unit@r{[}-@var{n}@r{]} @gol\n -fdump-class-hierarchy@r{[}-@var{n}@r{]} @gol\n -fdump-ipa-all -fdump-ipa-cgraph -fdump-ipa-inline @gol\n--fdump-passes @gol\n -fdump-statistics @gol\n -fdump-tree-all @gol\n -fdump-tree-original@r{[}-@var{n}@r{]}  @gol\n@@ -5072,8 +5071,7 @@ pair seperated by a colon.  The range is inclusive in both ends.  If the range\n is trivial, the number pair can be simplified as a single number.  If the\n function's cgraph node's @var{uid} is falling within one of the specified ranges,\n the @var{pass} is disabled for that function.  The @var{uid} is shown in the\n-function header of a dump file, and pass names can be dumped by using option\n-@option{-fdump-passes}.\n+function header of a dump file.\n \n @item -fdisable-tree-@var{pass}\n @item -fdisable-tree-@var{pass}=@var{range-list}\n@@ -5497,11 +5495,6 @@ Dump after function inlining.\n \n @end table\n \n-@item -fdump-passes\n-@opindex fdump-passes\n-Dump the list of optimization passes that are turned on and off by\n-the current command line options.\n-\n @item -fdump-statistics-@var{option}\n @opindex fdump-statistics\n Enable and control dumping of pass statistics in a separate file.  The"}, {"sha": "1e5c291055fe700f62a6f2cea7906262cb1ce05c", "filename": "gcc/except.c", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f9081d15d2bfd28a5951d87f6e6f3fb254cdbdd/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f9081d15d2bfd28a5951d87f6e6f3fb254cdbdd/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=1f9081d15d2bfd28a5951d87f6e6f3fb254cdbdd", "patch": "@@ -1440,17 +1440,14 @@ finish_eh_generation (void)\n static bool\n gate_handle_eh (void)\n {\n-  return true;\n+  /* Nothing to do if no regions created.  */\n+  return cfun->eh->region_tree != NULL;\n }\n \n /* Complete generation of exception handling code.  */\n static unsigned int\n rest_of_handle_eh (void)\n {\n-  /* Nothing to do if no regions created.  */\n-  if (cfun->eh->region_tree == NULL)\n-    return 0;\n-\n   finish_eh_generation ();\n   cleanup_cfg (CLEANUP_NO_INSN_DEL);\n   return 0;\n@@ -2395,9 +2392,6 @@ convert_to_eh_region_ranges (void)\n   int min_labelno = 0, max_labelno = 0;\n   int saved_call_site_base = call_site_base;\n \n-  if (cfun->eh->region_tree == NULL)\n-    return 0;\n-\n   crtl->eh.action_record_data = VEC_alloc (uchar, gc, 64);\n \n   ar_hash = htab_create (31, action_record_hash, action_record_eq, free);\n@@ -2649,6 +2643,8 @@ static bool\n gate_convert_to_eh_region_ranges (void)\n {\n   /* Nothing to do for SJLJ exceptions or if no regions created.  */\n+  if (cfun->eh->region_tree == NULL)\n+    return false;\n   if (targetm.except_unwind_info (&global_options) == UI_SJLJ)\n     return false;\n   return true;"}, {"sha": "41fff7ab86b2bf9579b5486593a8aded98d212e5", "filename": "gcc/gcse.c", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f9081d15d2bfd28a5951d87f6e6f3fb254cdbdd/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f9081d15d2bfd28a5951d87f6e6f3fb254cdbdd/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=1f9081d15d2bfd28a5951d87f6e6f3fb254cdbdd", "patch": "@@ -3713,17 +3713,15 @@ static bool\n gate_rtl_pre (void)\n {\n   return optimize > 0 && flag_gcse\n-         && optimize_function_for_speed_p (cfun);\n+    && !cfun->calls_setjmp\n+    && optimize_function_for_speed_p (cfun)\n+    && dbg_cnt (pre);\n }\n \n static unsigned int\n execute_rtl_pre (void)\n {\n   int changed;\n-\n-  if (cfun->calls_setjmp || !dbg_cnt (pre))\n-    return 0;\n-\n   delete_unreachable_blocks ();\n   df_analyze ();\n   changed = one_pre_gcse_pass ();\n@@ -3737,20 +3735,18 @@ static bool\n gate_rtl_hoist (void)\n {\n   return optimize > 0 && flag_gcse\n-        /* It does not make sense to run code hoisting unless we are optimizing\n-         for code size -- it rarely makes programs faster, and can make then\n-         bigger if we did PRE (when optimizing for space, we don't run PRE).  */\n-        && optimize_function_for_size_p (cfun);\n+    && !cfun->calls_setjmp\n+    /* It does not make sense to run code hoisting unless we are optimizing\n+       for code size -- it rarely makes programs faster, and can make then\n+       bigger if we did PRE (when optimizing for space, we don't run PRE).  */\n+    && optimize_function_for_size_p (cfun)\n+    && dbg_cnt (hoist);\n }\n \n static unsigned int\n execute_rtl_hoist (void)\n {\n   int changed;\n-\n-  if (cfun->calls_setjmp || !dbg_cnt (hoist))\n-      return 0;\n-\n   delete_unreachable_blocks ();\n   df_analyze ();\n   changed = one_code_hoisting_pass ();\n@@ -3803,3 +3799,4 @@ struct rtl_opt_pass pass_rtl_hoist =\n };\n \n #include \"gt-gcse.h\"\n+"}, {"sha": "f06a67c4d90d6a6f0cc60279e37e13c2ae30a40d", "filename": "gcc/passes.c", "status": "modified", "additions": 6, "deletions": 100, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f9081d15d2bfd28a5951d87f6e6f3fb254cdbdd/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f9081d15d2bfd28a5951d87f6e6f3fb254cdbdd/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=1f9081d15d2bfd28a5951d87f6e6f3fb254cdbdd", "patch": "@@ -478,7 +478,7 @@ passr_eq (const void *p1, const void *p2)\n   return !strcmp (s1->unique_name, s2->unique_name);\n }\n \n-static htab_t name_to_pass_map = NULL;\n+static htab_t pass_name_tab = NULL;\n \n /* Register PASS with NAME.  */\n \n@@ -488,11 +488,11 @@ register_pass_name (struct opt_pass *pass, const char *name)\n   struct pass_registry **slot;\n   struct pass_registry pr;\n \n-  if (!name_to_pass_map)\n-    name_to_pass_map = htab_create (256, passr_hash, passr_eq, NULL);\n+  if (!pass_name_tab)\n+    pass_name_tab = htab_create (256, passr_hash, passr_eq, NULL);\n \n   pr.unique_name = name;\n-  slot = (struct pass_registry **) htab_find_slot (name_to_pass_map, &pr, INSERT);\n+  slot = (struct pass_registry **) htab_find_slot (pass_name_tab, &pr, INSERT);\n   if (!*slot)\n     {\n       struct pass_registry *new_pr;\n@@ -506,110 +506,16 @@ register_pass_name (struct opt_pass *pass, const char *name)\n     return; /* Ignore plugin passes.  */\n }\n \n-/* Map from pass id to canonicalized pass name.  */\n-\n-typedef const char *char_ptr;\n-DEF_VEC_P(char_ptr);\n-DEF_VEC_ALLOC_P(char_ptr, heap);\n-static VEC(char_ptr, heap) *pass_tab = NULL;\n-\n-/* Callback function for traversing NAME_TO_PASS_MAP.  */\n-\n-static int\n-pass_traverse (void **slot, void *data ATTRIBUTE_UNUSED)\n-{\n-  struct pass_registry **p = (struct pass_registry **)slot;\n-  struct opt_pass *pass = (*p)->pass;\n-\n-  gcc_assert (pass->static_pass_number > 0);\n-  gcc_assert (pass_tab);\n-\n-  VEC_replace (char_ptr, pass_tab, pass->static_pass_number,\n-               (*p)->unique_name);\n-\n-  return 1;\n-}\n-\n-/* The function traverses NAME_TO_PASS_MAP and creates a pass info\n-   table for dumping purpose.  */\n-\n-static void\n-create_pass_tab (void)\n-{\n-  if (!flag_dump_passes)\n-    return;\n-\n-  VEC_safe_grow_cleared (char_ptr, heap,\n-                         pass_tab, passes_by_id_size + 1);\n-  htab_traverse (name_to_pass_map, pass_traverse, NULL);\n-}\n-\n-static bool override_gate_status (struct opt_pass *, tree, bool);\n-\n-/* Dump the instantiated name for PASS. IS_ON indicates if PASS\n-   is turned on or not.  */\n-\n-static void\n-dump_one_pass (struct opt_pass *pass, int pass_indent)\n-{\n-  int indent = 3 * pass_indent;\n-  const char *pn;\n-  bool is_on, is_really_on;\n-\n-  is_on = (pass->gate == NULL) ? true : pass->gate();\n-  is_really_on = override_gate_status (pass, NULL, is_on);\n-\n-  if (pass->static_pass_number <= 0)\n-    pn = pass->name;\n-  else\n-    pn = VEC_index (char_ptr, pass_tab, pass->static_pass_number);\n-\n-  fprintf (stderr, \"%*s%-40s%*s:%s%s\\n\", indent, \" \", pn,\n-           (15 - indent < 0 ? 0 : 15 - indent), \" \",\n-           is_on ? \"  ON\" : \"  OFF\",\n-           ((!is_on) == (!is_really_on) ? \"\"\n-            : (is_really_on ? \" (FORCED_ON)\" : \" (FORCED_OFF)\")));\n-}\n-\n-/* Dump pass list PASS with indentation INDENT.  */\n-\n-static void\n-dump_pass_list (struct opt_pass *pass, int indent)\n-{\n-  do\n-    {\n-      dump_one_pass (pass, indent);\n-      if (pass->sub)\n-        dump_pass_list (pass->sub, indent + 1);\n-      pass = pass->next;\n-    }\n-  while (pass);\n-}\n-\n-/* Dump all optimization passes.  */\n-\n-void\n-dump_passes (void)\n-{\n-  create_pass_tab();\n-\n-  dump_pass_list (all_lowering_passes, 1);\n-  dump_pass_list (all_small_ipa_passes, 1);\n-  dump_pass_list (all_regular_ipa_passes, 1);\n-  dump_pass_list (all_lto_gen_passes, 1);\n-  dump_pass_list (all_passes, 1);\n-}\n-\n-\n /* Returns the pass with NAME.  */\n \n static struct opt_pass *\n get_pass_by_name (const char *name)\n {\n   struct pass_registry **slot, pr;\n \n+  gcc_assert (pass_name_tab);\n   pr.unique_name = name;\n-  slot = (struct pass_registry **) htab_find_slot (name_to_pass_map,\n+  slot = (struct pass_registry **) htab_find_slot (pass_name_tab,\n                                                    &pr, NO_INSERT);\n \n   if (!slot || !*slot)"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "gcc/testsuite/gcc.dg/dump-pass.c", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f9081d15d2bfd28a5951d87f6e6f3fb254cdbdd/gcc%2Ftestsuite%2Fgcc.dg%2Fdump-pass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f9081d15d2bfd28a5951d87f6e6f3fb254cdbdd/gcc%2Ftestsuite%2Fgcc.dg%2Fdump-pass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdump-pass.c?ref=1f9081d15d2bfd28a5951d87f6e6f3fb254cdbdd", "patch": "@@ -1,14 +0,0 @@\n-/* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-passes\" } */\n-\n-unsigned res;\n-\n-void\n-foo (unsigned code, int len)\n-{\n-  int i;\n-  for (i = 0; i < len; i++)\n-    res |= code & 1;\n-}\n-\n-/* { dg-prune-output \".*\" } */"}, {"sha": "ec2b438ca47c59d29b7a7e97c00b8e95c26412f9", "filename": "gcc/tree-complex.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f9081d15d2bfd28a5951d87f6e6f3fb254cdbdd/gcc%2Ftree-complex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f9081d15d2bfd28a5951d87f6e6f3fb254cdbdd/gcc%2Ftree-complex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-complex.c?ref=1f9081d15d2bfd28a5951d87f6e6f3fb254cdbdd", "patch": "@@ -1569,11 +1569,6 @@ tree_lower_complex (void)\n   gimple_stmt_iterator gsi;\n   basic_block bb;\n \n-  /* With errors, normal optimization passes are not run.  If we don't\n-     lower complex operations at all, rtl expansion will abort.  */\n-  if (cfun->curr_properties & PROP_gimple_lcx)\n-    return 0;\n-\n   if (!init_dont_simulate_again ())\n     return 0;\n \n@@ -1639,7 +1634,9 @@ struct gimple_opt_pass pass_lower_complex =\n static bool\n gate_no_optimization (void)\n {\n-  return true;\n+  /* With errors, normal optimization passes are not run.  If we don't\n+     lower complex operations at all, rtl expansion will abort.  */\n+  return !(cfun->curr_properties & PROP_gimple_lcx);\n }\n \n struct gimple_opt_pass pass_lower_complex_O0 ="}, {"sha": "e87c32e798b2575df83e05daa94fc0fb751d3f8a", "filename": "gcc/tree-eh.c", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f9081d15d2bfd28a5951d87f6e6f3fb254cdbdd/gcc%2Ftree-eh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f9081d15d2bfd28a5951d87f6e6f3fb254cdbdd/gcc%2Ftree-eh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-eh.c?ref=1f9081d15d2bfd28a5951d87f6e6f3fb254cdbdd", "patch": "@@ -3234,9 +3234,6 @@ execute_lower_eh_dispatch (void)\n   bool any_rewritten = false;\n   bool redirected = false;\n \n-  if (cfun->eh->region_tree == NULL)\n-    return 0;\n-\n   assign_filter_values ();\n \n   FOR_EACH_BB (bb)\n@@ -3257,7 +3254,7 @@ execute_lower_eh_dispatch (void)\n static bool\n gate_lower_eh_dispatch (void)\n {\n-  return true;\n+  return cfun->eh->region_tree != NULL;\n }\n \n struct gimple_opt_pass pass_lower_eh_dispatch =\n@@ -3986,12 +3983,8 @@ execute_cleanup_eh_1 (void)\n static unsigned int\n execute_cleanup_eh (void)\n {\n-  int ret;\n+  int ret = execute_cleanup_eh_1 ();\n \n-  if (cfun->eh == NULL || cfun->eh->region_tree == NULL)\n-    return 0;\n-\n-  ret = execute_cleanup_eh_1 ();\n   /* If the function no longer needs an EH personality routine\n      clear it.  This exposes cross-language inlining opportunities\n      and avoids references to a never defined personality routine.  */\n@@ -4005,7 +3998,7 @@ execute_cleanup_eh (void)\n static bool\n gate_cleanup_eh (void)\n {\n-  return true;\n+  return cfun->eh != NULL && cfun->eh->region_tree != NULL;\n }\n \n struct gimple_opt_pass pass_cleanup_eh = {"}, {"sha": "daf7202f4f6f7f3e33bc77bd511d9c5795b1d834", "filename": "gcc/tree-pass.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f9081d15d2bfd28a5951d87f6e6f3fb254cdbdd/gcc%2Ftree-pass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f9081d15d2bfd28a5951d87f6e6f3fb254cdbdd/gcc%2Ftree-pass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pass.h?ref=1f9081d15d2bfd28a5951d87f6e6f3fb254cdbdd", "patch": "@@ -639,6 +639,5 @@ extern void do_per_function_toporder (void (*) (void *), void *);\n \n extern void disable_pass (const char *);\n extern void enable_pass (const char *);\n-extern void dump_passes (void);\n \n #endif /* GCC_TREE_PASS_H */"}, {"sha": "46fc339a55a62f9aae228fd5df68621ba07b0870", "filename": "gcc/tree-stdarg.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f9081d15d2bfd28a5951d87f6e6f3fb254cdbdd/gcc%2Ftree-stdarg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f9081d15d2bfd28a5951d87f6e6f3fb254cdbdd/gcc%2Ftree-stdarg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-stdarg.c?ref=1f9081d15d2bfd28a5951d87f6e6f3fb254cdbdd", "patch": "@@ -627,7 +627,8 @@ check_all_va_list_escapes (struct stdarg_info *si)\n static bool\n gate_optimize_stdarg (void)\n {\n-  return true;\n+  /* This optimization is only for stdarg functions.  */\n+  return cfun->stdarg != 0;\n }\n \n \n@@ -644,10 +645,6 @@ execute_optimize_stdarg (void)\n   const char *funcname = NULL;\n   tree cfun_va_list;\n \n-  /* This optimization is only for stdarg functions.  */\n-  if (cfun->stdarg == 0)\n-    return 0;\n-\n   cfun->va_list_gpr_size = 0;\n   cfun->va_list_fpr_size = 0;\n   memset (&si, 0, sizeof (si));"}]}