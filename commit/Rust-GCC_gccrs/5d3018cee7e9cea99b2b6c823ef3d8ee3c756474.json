{"sha": "5d3018cee7e9cea99b2b6c823ef3d8ee3c756474", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQzMDE4Y2VlN2U5Y2VhOTliMmI2YzgyM2VmM2Q4ZWUzYzc1NjQ3NA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2005-08-31T16:16:31Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2005-08-31T16:16:31Z"}, "message": "i386.c (ix86_function_ok_for_sibcall): Fix test for fp return matching.\n\n        * config/i386/i386.c (ix86_function_ok_for_sibcall): Fix test for\n        fp return matching.\n\nFrom-SVN: r103679", "tree": {"sha": "b37f9107a9259d4503a982b9eb005d2b2d0e84f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b37f9107a9259d4503a982b9eb005d2b2d0e84f7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d3018cee7e9cea99b2b6c823ef3d8ee3c756474", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d3018cee7e9cea99b2b6c823ef3d8ee3c756474", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d3018cee7e9cea99b2b6c823ef3d8ee3c756474", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d3018cee7e9cea99b2b6c823ef3d8ee3c756474/comments", "author": null, "committer": null, "parents": [{"sha": "dc38a61086ce5044b9b78c48e7897179b819e06e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc38a61086ce5044b9b78c48e7897179b819e06e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc38a61086ce5044b9b78c48e7897179b819e06e"}], "stats": {"total": 20, "additions": 13, "deletions": 7}, "files": [{"sha": "e16091fcfe33570bda8b8d366773caa34cfb54c7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3018cee7e9cea99b2b6c823ef3d8ee3c756474/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3018cee7e9cea99b2b6c823ef3d8ee3c756474/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5d3018cee7e9cea99b2b6c823ef3d8ee3c756474", "patch": "@@ -1,3 +1,8 @@\n+2005-08-31  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/i386/i386.c (ix86_function_ok_for_sibcall): Fix test for\n+\tfp return matching.\n+\n 2005-08-31  Fariborz Jahanian <fjahanian@apple.com>\n \n \t* expr.c (expand_expr_real_1): Compare size of address "}, {"sha": "e3fd6e7a75d75ea1e6b27cfde0216813bf187c27", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3018cee7e9cea99b2b6c823ef3d8ee3c756474/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3018cee7e9cea99b2b6c823ef3d8ee3c756474/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=5d3018cee7e9cea99b2b6c823ef3d8ee3c756474", "patch": "@@ -1907,7 +1907,6 @@ ix86_function_ok_for_sibcall (tree decl, tree exp)\n {\n   tree func;\n   rtx a, b;\n-  bool one_void, one_reg;\n \n   /* If we are generating position-independent code, we cannot sibcall\n      optimize any indirect call, or a direct call to a global function,\n@@ -1936,12 +1935,14 @@ ix86_function_ok_for_sibcall (tree decl, tree exp)\n   a = ix86_function_value (TREE_TYPE (exp), func, false);\n   b = ix86_function_value (TREE_TYPE (DECL_RESULT (cfun->decl)),\n \t\t\t   cfun->decl, false);\n-  one_void = (VOID_TYPE_P (TREE_TYPE (exp))\n-\t      || VOID_TYPE_P (TREE_TYPE (DECL_RESULT (cfun->decl))));\n-  one_reg = ((REG_P (a) && !STACK_REG_P (a))\n-\t     || (REG_P (b) && !STACK_REG_P (b)));\n-  if (!(one_void && one_reg)\n-      && !rtx_equal_p (a, b))\n+  if (STACK_REG_P (a) || STACK_REG_P (b))\n+    {\n+      if (!rtx_equal_p (a, b))\n+\treturn false;\n+    }\n+  else if (VOID_TYPE_P (TREE_TYPE (DECL_RESULT (cfun->decl))))\n+    ;\n+  else if (!rtx_equal_p (a, b))\n     return false;\n \n   /* If this call is indirect, we'll need to be able to use a call-clobbered"}]}