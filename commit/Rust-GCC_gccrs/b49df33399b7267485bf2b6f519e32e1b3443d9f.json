{"sha": "b49df33399b7267485bf2b6f519e32e1b3443d9f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjQ5ZGYzMzM5OWI3MjY3NDg1YmYyYjZmNTE5ZTMyZTFiMzQ0M2Q5Zg==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@haight.constant.com", "date": "1999-11-22T23:35:50Z"}, "committer": {"name": "Martin v. L\u00f6wis", "email": "loewis@gcc.gnu.org", "date": "1999-11-22T23:35:50Z"}, "message": "stl_rope.h: Fix initialization order.\n\n        * stl_rope.h: Fix initialization order.\n        * stl_deque.h: Use static_casts<size_type>(signed_type).\n\nCo-Authored-By: Matthias Klose <doko@cs.tu-berlin.de>\n\nFrom-SVN: r30622", "tree": {"sha": "0677f09df86aa7dc2ab9c516aa4e167ae762f169", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0677f09df86aa7dc2ab9c516aa4e167ae762f169"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b49df33399b7267485bf2b6f519e32e1b3443d9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b49df33399b7267485bf2b6f519e32e1b3443d9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b49df33399b7267485bf2b6f519e32e1b3443d9f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b49df33399b7267485bf2b6f519e32e1b3443d9f/comments", "author": null, "committer": null, "parents": [{"sha": "a8196924328f5235c6739648f226534384b2a9b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8196924328f5235c6739648f226534384b2a9b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8196924328f5235c6739648f226534384b2a9b4"}], "stats": {"total": 47, "additions": 26, "deletions": 21}, "files": [{"sha": "43f3079f4b42261e795cc7349b62ff28120f5108", "filename": "libstdc++/stl/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b49df33399b7267485bf2b6f519e32e1b3443d9f/libstdc%2B%2B%2Fstl%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b49df33399b7267485bf2b6f519e32e1b3443d9f/libstdc%2B%2B%2Fstl%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B%2Fstl%2FChangeLog?ref=b49df33399b7267485bf2b6f519e32e1b3443d9f", "patch": "@@ -1,3 +1,9 @@\n+1999-11-10  Benjamin Kosnik  <bkoz@haight.constant.com>\n+            Matthias Klose  <doko@cs.tu-berlin.de>\n+\n+\t* stl_rope.h: Fix initialization order.\n+\t* stl_deque.h: Use static_casts<size_type>(signed_type).\n+\n 1999-11-06  Martin v. L\ufffdwis  <loewis@informatik.hu-berlin.de>\n \n \t* bitset (class bitset): Declare reference as our friend."}, {"sha": "af240af2efa5ea648c8156f6737454dd2f660776", "filename": "libstdc++/stl/stl_deque.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b49df33399b7267485bf2b6f519e32e1b3443d9f/libstdc%2B%2B%2Fstl%2Fstl_deque.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b49df33399b7267485bf2b6f519e32e1b3443d9f/libstdc%2B%2B%2Fstl%2Fstl_deque.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B%2Fstl%2Fstl_deque.h?ref=b49df33399b7267485bf2b6f519e32e1b3443d9f", "patch": "@@ -815,7 +815,7 @@ class deque : protected _Deque_base<_Tp, _Alloc, __bufsiz> {\n     iterator __next = __pos;\n     ++__next;\n     difference_type __index = __pos - _M_start;\n-    if (__index < (size() >> 1)) {\n+    if (static_cast<size_type>(__index) < (size() >> 1)) {\n       copy_backward(_M_start, __pos, __next);\n       pop_front();\n     }\n@@ -1048,7 +1048,7 @@ deque<_Tp,_Alloc,__bufsize>::erase(iterator __first, iterator __last)\n   else {\n     difference_type __n = __last - __first;\n     difference_type __elems_before = __first - _M_start;\n-    if (__elems_before < (size() - __n) / 2) {\n+    if (static_cast<size_type>(__elems_before) < (size() - __n) / 2) {\n       copy_backward(_M_start, __first, __last);\n       iterator __new_start = _M_start + __n;\n       destroy(_M_start, __new_start);\n@@ -1282,7 +1282,7 @@ deque<_Tp,_Alloc,__bufsize>::_M_insert_aux(iterator __pos,\n {\n   difference_type __index = __pos - _M_start;\n   value_type __x_copy = __x;\n-  if (__index < size() / 2) {\n+  if (static_cast<size_type>(__index) < size() / 2) {\n     push_front(front());\n     iterator __front1 = _M_start;\n     ++__front1;\n@@ -1311,7 +1311,7 @@ typename deque<_Tp,_Alloc,__bufsize>::iterator\n deque<_Tp,_Alloc,__bufsize>::_M_insert_aux(iterator __pos)\n {\n   difference_type __index = __pos - _M_start;\n-  if (__index < size() / 2) {\n+  if (static_cast<size_type>(__index) < size() / 2) {\n     push_front(front());\n     iterator __front1 = _M_start;\n     ++__front1;\n@@ -1344,7 +1344,7 @@ deque<_Tp,_Alloc,__bufsize>::_M_insert_aux(iterator __pos,\n   const difference_type __elems_before = __pos - _M_start;\n   size_type __length = size();\n   value_type __x_copy = __x;\n-  if (__elems_before < __length / 2) {\n+  if (static_cast<size_type>(__elems_before) < __length / 2) {\n     iterator __new_start = _M_reserve_elements_at_front(__n);\n     iterator __old_start = _M_start;\n     __pos = _M_start + __elems_before;\n@@ -1403,7 +1403,7 @@ deque<_Tp,_Alloc,__bufsize>::_M_insert_aux(iterator __pos,\n {\n   const difference_type __elemsbefore = __pos - _M_start;\n   size_type __length = size();\n-  if (__elemsbefore < __length / 2) {\n+  if (static_cast<size_type>(__elemsbefore) < __length / 2) {\n     iterator __new_start = _M_reserve_elements_at_front(__n);\n     iterator __old_start = _M_start;\n     __pos = _M_start + __elemsbefore;"}, {"sha": "0d8766a43bcc2283428434d6b0f5d70aa49c5074", "filename": "libstdc++/stl/stl_rope.h", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b49df33399b7267485bf2b6f519e32e1b3443d9f/libstdc%2B%2B%2Fstl%2Fstl_rope.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b49df33399b7267485bf2b6f519e32e1b3443d9f/libstdc%2B%2B%2Fstl%2Fstl_rope.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B%2Fstl%2Fstl_rope.h?ref=b49df33399b7267485bf2b6f519e32e1b3443d9f", "patch": "@@ -386,8 +386,8 @@ struct _Rope_RopeRep : public _Rope_rep_base<_CharT,_Alloc> {\n     typedef _Rope_rep_base<_CharT,_Alloc>::allocator_type allocator_type;\n     _Rope_RopeRep(_Tag __t, int __d, bool __b, size_t __size,\n                   allocator_type __a)\n-        : _M_tag(__t), _M_depth(__d), _M_is_balanced(__b), _M_c_string(0),\n-          _Rope_rep_base<_CharT,_Alloc>(__size, __a)\n+        : _Rope_rep_base<_CharT,_Alloc>(__size, __a),\n+          _M_tag(__t), _M_depth(__d), _M_is_balanced(__b), _M_c_string(0)\n     {\n #       ifndef __GC\n             _M_refcount = 1;\n@@ -562,8 +562,8 @@ struct _Rope_RopeLeaf : public _Rope_RopeRep<_CharT,_Alloc> {\n                                 /* doesn't matter.               */\n     typedef _Rope_rep_base<_CharT,_Alloc>::allocator_type allocator_type;\n     _Rope_RopeLeaf(__GC_CONST _CharT* __d, size_t __size, allocator_type __a)\n-        : _M_data(__d)\n-        , _Rope_RopeRep<_CharT,_Alloc>(_S_leaf, 0, true, __size, __a)\n+        : _Rope_RopeRep<_CharT,_Alloc>(_S_leaf, 0, true, __size, __a),\n+         _M_data(__d)\n         {\n         __stl_assert(__size > 0);\n         if (_S_is_basic_char_type((_CharT *)0)) {\n@@ -593,10 +593,10 @@ struct _Rope_RopeConcatenation : public _Rope_RopeRep<_CharT,_Alloc> {\n     _Rope_RopeConcatenation(_Rope_RopeRep<_CharT,_Alloc>* __l,\n                              _Rope_RopeRep<_CharT,_Alloc>* __r,\n                              allocator_type __a)\n-      : _M_left(__l), _M_right(__r)\n-      , _Rope_RopeRep<_CharT,_Alloc>(\n+      : _Rope_RopeRep<_CharT,_Alloc>(\n           _S_concat, max(__l->_M_depth, __r->_M_depth) + 1, false,\n-          __l->_M_size + __r->_M_size, __a)\n+          __l->_M_size + __r->_M_size, __a),\n+      _M_left(__l), _M_right(__r)\n       {}\n # ifndef __GC\n     ~_Rope_RopeConcatenation() {\n@@ -629,11 +629,12 @@ struct _Rope_RopeFunction : public _Rope_RopeRep<_CharT,_Alloc> {\n     typedef _Rope_rep_base<_CharT,_Alloc>::allocator_type allocator_type;\n     _Rope_RopeFunction(char_producer<_CharT>* __f, size_t __size,\n                         bool __d, allocator_type __a)\n-      : _M_fn(__f)\n+      :_Rope_RopeRep<_CharT,_Alloc>(_S_function, 0, true, __size, __a),\n+       _M_fn(__f)\n #       ifndef __GC\n       , _M_delete_when_done(__d)\n #       endif\n-      , _Rope_RopeRep<_CharT,_Alloc>(_S_function, 0, true, __size, __a) {\n+          {\n         __stl_assert(__size > 0);\n #       ifdef __GC\n             if (__d) {\n@@ -693,9 +694,7 @@ struct _Rope_RopeSubstring : public _Rope_RopeFunction<_CharT,_Alloc>,\n     typedef _Rope_rep_base<_CharT,_Alloc>::allocator_type allocator_type;\n     _Rope_RopeSubstring(_Rope_RopeRep<_CharT,_Alloc>* __b, size_t __s,\n                           size_t __l, allocator_type __a)\n-      : _M_base(__b)\n-      , _M_start(__s)\n-      , _Rope_RopeFunction<_CharT,_Alloc>(this, __l, false, __a) \n+      : _Rope_RopeFunction<_CharT,_Alloc>(this, __l, false, __a), _M_base(__b), _M_start(__s)  \n     {\n         __stl_assert(__l > 0);\n         __stl_assert(__s + __l <= __b->_M_size);\n@@ -766,16 +765,16 @@ class _Rope_char_ref_proxy {\n     _My_rope* _M_root;     // The whole rope.\n   public:\n     _Rope_char_ref_proxy(_My_rope* __r, size_t __p) :\n-        _M_pos(__p), _M_root(__r), _M_current_valid(false) {}\n+        _M_pos(__p), _M_current_valid(false), _M_root(__r) {}\n     _Rope_char_ref_proxy(const _Rope_char_ref_proxy& __x) :\n-        _M_pos(__x._M_pos), _M_root(__x._M_root), _M_current_valid(false) {}\n+        _M_pos(__x._M_pos), _M_current_valid(false), _M_root(__x._M_root) {}\n         // Don't preserve cache if the reference can outlive the\n         // expression.  We claim that's not possible without calling\n         // a copy constructor or generating reference to a proxy\n         // reference.  We declare the latter to have undefined semantics.\n     _Rope_char_ref_proxy(_My_rope* __r, size_t __p,\n                     _CharT __c) :\n-        _M_pos(__p), _M_root(__r), _M_current(__c), _M_current_valid(true) {}\n+        _M_pos(__p), _M_current(__c), _M_current_valid(true), _M_root(__r) {}\n     inline operator _CharT () const;\n     _Rope_char_ref_proxy& operator= (_CharT __c);\n     _Rope_char_ptr_proxy<_CharT,_Alloc> operator& () const;"}]}