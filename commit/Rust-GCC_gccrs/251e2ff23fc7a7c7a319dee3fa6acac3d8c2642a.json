{"sha": "251e2ff23fc7a7c7a319dee3fa6acac3d8c2642a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjUxZTJmZjIzZmM3YTdjN2EzMTlkZWUzZmE2YWNhYzNkOGMyNjQyYQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2005-04-04T19:41:14Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2005-04-04T19:41:14Z"}, "message": "system.h (GCOV_SIZE_TYPE): Unposion.\n\n\t* system.h (GCOV_SIZE_TYPE): Unposion.\n\t* gcov-io.h (GCOV_TYPE_NODE): Delete, replacing with...\n\t(GCOV_TYPE_SIZE): ...this new macro.\n\t* coverage.h (get_gcov_type, GCOV_TYPE_NODE): Declare.\n\t* coverage.c (get_gcov_type, get_gcov_unsigned_t): New functions.\n\t(rtl_coverage_counter_ref): Use GCOV_TYPE_SIZE.\n\t(build_fn_info_type, build_fn_info_value, build_ctr_info_type)\n\t(build_ctr_info_value, build_gcov_info): Use get_gcov_unsigned_t\n\tinstead of unsigned_intSI_type_node.\n\t* rtl-profile.c (rtl_gen_interval_profiler, rtl_gen_pow2_profiler)\n\t(rtl_gen_one_value_profiler_no_edge_manipulation)\n\t(rtl_gen_const_delta_profiler): Use GCOV_TYPE_SIZE.\n\t* value-prof.c: Include coverage.h.\n\nFrom-SVN: r97570", "tree": {"sha": "7d239f92c69c3cbd2da9ccdfddf5dc8bafbad712", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7d239f92c69c3cbd2da9ccdfddf5dc8bafbad712"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/251e2ff23fc7a7c7a319dee3fa6acac3d8c2642a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/251e2ff23fc7a7c7a319dee3fa6acac3d8c2642a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/251e2ff23fc7a7c7a319dee3fa6acac3d8c2642a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/251e2ff23fc7a7c7a319dee3fa6acac3d8c2642a/comments", "author": null, "committer": null, "parents": [{"sha": "d58a2b8348d629d857d93297ba944e903d2f7115", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d58a2b8348d629d857d93297ba944e903d2f7115", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d58a2b8348d629d857d93297ba944e903d2f7115"}], "stats": {"total": 91, "additions": 59, "deletions": 32}, "files": [{"sha": "20e9b39cd584ed6c10e4b703ad765e5ab384bc35", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/251e2ff23fc7a7c7a319dee3fa6acac3d8c2642a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/251e2ff23fc7a7c7a319dee3fa6acac3d8c2642a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=251e2ff23fc7a7c7a319dee3fa6acac3d8c2642a", "patch": "@@ -1,3 +1,19 @@\n+2004-04-04  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* system.h (GCOV_SIZE_TYPE): Unposion.\n+\t* gcov-io.h (GCOV_TYPE_NODE): Delete, replacing with...\n+\t(GCOV_TYPE_SIZE): ...this new macro.\n+\t* coverage.h (get_gcov_type, GCOV_TYPE_NODE): Declare.\n+\t* coverage.c (get_gcov_type, get_gcov_unsigned_t): New functions.\n+\t(rtl_coverage_counter_ref): Use GCOV_TYPE_SIZE.\n+\t(build_fn_info_type, build_fn_info_value, build_ctr_info_type)\n+\t(build_ctr_info_value, build_gcov_info): Use get_gcov_unsigned_t\n+\tinstead of unsigned_intSI_type_node.\n+\t* rtl-profile.c (rtl_gen_interval_profiler, rtl_gen_pow2_profiler)\n+\t(rtl_gen_one_value_profiler_no_edge_manipulation)\n+\t(rtl_gen_const_delta_profiler): Use GCOV_TYPE_SIZE.\n+\t* value-prof.c: Include coverage.h.\n+\n 2005-04-02  Daniel Berlin  <dberlin@dberlin.org>\n \t    Diego Novillo <dnovillo@redhat.com>\n \t    "}, {"sha": "a5a8f19a7ecef53b6aed454af8cceb5fc5caa757", "filename": "gcc/coverage.c", "status": "modified", "additions": 30, "deletions": 15, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/251e2ff23fc7a7c7a319dee3fa6acac3d8c2642a/gcc%2Fcoverage.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/251e2ff23fc7a7c7a319dee3fa6acac3d8c2642a/gcc%2Fcoverage.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcoverage.c?ref=251e2ff23fc7a7c7a319dee3fa6acac3d8c2642a", "patch": "@@ -120,7 +120,22 @@ static tree build_ctr_info_type (void);\n static tree build_ctr_info_value (unsigned, tree);\n static tree build_gcov_info (void);\n static void create_coverage (void);\n+\f\n+/* Return the type node for gcov_type.  */\n+\n+tree\n+get_gcov_type (void)\n+{\n+  return lang_hooks.types.type_for_size (GCOV_TYPE_SIZE, false);\n+}\n+\n+/* Return the type node for gcov_unsigned_t.  */\n \n+static tree\n+get_gcov_unsigned_t (void)\n+{\n+  return lang_hooks.types.type_for_size (32, true);\n+}\n \f\n static hashval_t\n htab_counts_entry_hash (const void *of)\n@@ -399,8 +414,7 @@ coverage_counter_alloc (unsigned counter, unsigned num)\n rtx\n rtl_coverage_counter_ref (unsigned counter, unsigned no)\n {\n-  unsigned gcov_size = tree_low_cst (TYPE_SIZE (GCOV_TYPE_NODE), 1);\n-  enum machine_mode mode = mode_for_size (gcov_size, MODE_INT, 0);\n+  enum machine_mode mode = mode_for_size (GCOV_TYPE_SIZE, MODE_INT, 0);\n   rtx ref;\n \n   gcc_assert (no < fn_n_ctrs[counter] - fn_b_ctrs[counter]);\n@@ -412,7 +426,8 @@ rtl_coverage_counter_ref (unsigned counter, unsigned no)\n \t\t\t       (tree_ctr_tables[counter]))));\n         SYMBOL_REF_FLAGS (ctr_labels[counter]) = SYMBOL_FLAG_LOCAL;\n       }\n-  ref = plus_constant (ctr_labels[counter], gcov_size / BITS_PER_UNIT * no);\n+  ref = plus_constant (ctr_labels[counter],\n+\t\t       GCOV_TYPE_SIZE / BITS_PER_UNIT * no);\n   ref = gen_rtx_MEM (mode, ref);\n   set_mem_alias_set (ref, new_alias_set ());\n   MEM_NOTRAP_P (ref) = 1;\n@@ -602,10 +617,10 @@ build_fn_info_type (unsigned int counters)\n   tree array_type;\n \n   /* ident */\n-  fields = build_decl (FIELD_DECL, NULL_TREE, unsigned_intSI_type_node);\n+  fields = build_decl (FIELD_DECL, NULL_TREE, get_gcov_unsigned_t ());\n \n   /* checksum */\n-  field = build_decl (FIELD_DECL, NULL_TREE, unsigned_intSI_type_node);\n+  field = build_decl (FIELD_DECL, NULL_TREE, get_gcov_unsigned_t ());\n   TREE_CHAIN (field) = fields;\n   fields = field;\n \n@@ -636,12 +651,12 @@ build_fn_info_value (const struct function_list *function, tree type)\n   tree array_value = NULL_TREE;\n \n   /* ident */\n-  value = tree_cons (fields, build_int_cstu (unsigned_intSI_type_node,\n+  value = tree_cons (fields, build_int_cstu (get_gcov_unsigned_t (),\n \t\t\t\t\t     function->ident), value);\n   fields = TREE_CHAIN (fields);\n \n   /* checksum */\n-  value = tree_cons (fields, build_int_cstu (unsigned_intSI_type_node,\n+  value = tree_cons (fields, build_int_cstu (get_gcov_unsigned_t (),\n \t\t\t\t\t     function->checksum), value);\n   fields = TREE_CHAIN (fields);\n \n@@ -674,7 +689,7 @@ build_ctr_info_type (void)\n   tree gcov_merge_fn_type;\n \n   /* counters */\n-  field = build_decl (FIELD_DECL, NULL_TREE, unsigned_intSI_type_node);\n+  field = build_decl (FIELD_DECL, NULL_TREE, get_gcov_unsigned_t ());\n   TREE_CHAIN (field) = fields;\n   fields = field;\n \n@@ -711,7 +726,7 @@ build_ctr_info_value (unsigned int counter, tree type)\n \n   /* counters */\n   value = tree_cons (fields,\n-\t\t     build_int_cstu (unsigned_intSI_type_node,\n+\t\t     build_int_cstu (get_gcov_unsigned_t (),\n \t\t\t\t     prg_n_ctrs[counter]),\n \t\t     value);\n   fields = TREE_CHAIN (fields);\n@@ -785,11 +800,11 @@ build_gcov_info (void)\n   const_type = build_qualified_type (type, TYPE_QUAL_CONST);\n \n   /* Version ident */\n-  field = build_decl (FIELD_DECL, NULL_TREE, unsigned_intSI_type_node);\n+  field = build_decl (FIELD_DECL, NULL_TREE, get_gcov_unsigned_t ());\n   TREE_CHAIN (field) = fields;\n   fields = field;\n-  value = tree_cons (field, build_int_cstu (unsigned_intSI_type_node,\n-\t\t\t\t\t    GCOV_VERSION), value);\n+  value = tree_cons (field, build_int_cstu (TREE_TYPE (field), GCOV_VERSION),\n+\t\t     value);\n \n   /* next -- NULL */\n   field = build_decl (FIELD_DECL, NULL_TREE, build_pointer_type (const_type));\n@@ -798,11 +813,11 @@ build_gcov_info (void)\n   value = tree_cons (field, null_pointer_node, value);\n \n   /* stamp */\n-  field = build_decl (FIELD_DECL, NULL_TREE, unsigned_intSI_type_node);\n+  field = build_decl (FIELD_DECL, NULL_TREE, get_gcov_unsigned_t ());\n   TREE_CHAIN (field) = fields;\n   fields = field;\n-  value = tree_cons (field, build_int_cstu (unsigned_intSI_type_node,\n-\t\t\t\t\t    local_tick), value);\n+  value = tree_cons (field, build_int_cstu (TREE_TYPE (field), local_tick),\n+\t\t     value);\n \n   /* Filename */\n   string_type = build_pointer_type (build_qualified_type (char_type_node,"}, {"sha": "d004e234d35119e277ccb30b3edb5a33ed2982a4", "filename": "gcc/coverage.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/251e2ff23fc7a7c7a319dee3fa6acac3d8c2642a/gcc%2Fcoverage.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/251e2ff23fc7a7c7a319dee3fa6acac3d8c2642a/gcc%2Fcoverage.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcoverage.h?ref=251e2ff23fc7a7c7a319dee3fa6acac3d8c2642a", "patch": "@@ -47,4 +47,8 @@ extern gcov_type *get_coverage_counts (unsigned /*counter*/,\n \t\t\t\t       unsigned /*expected*/,\n \t\t\t\t       const struct gcov_ctr_summary **);\n \n+extern tree get_gcov_type (void);\n+\n+#define GCOV_TYPE_NODE get_gcov_type ()\n+\n #endif"}, {"sha": "d0bacff92802e6157ea57d0bac46ca4d59ec19d3", "filename": "gcc/gcov-io.h", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/251e2ff23fc7a7c7a319dee3fa6acac3d8c2642a/gcc%2Fgcov-io.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/251e2ff23fc7a7c7a319dee3fa6acac3d8c2642a/gcc%2Fgcov-io.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov-io.h?ref=251e2ff23fc7a7c7a319dee3fa6acac3d8c2642a", "patch": "@@ -214,11 +214,7 @@ typedef HOST_WIDEST_INT gcov_type;\n #include <sys/types.h>\n #endif\n #else /*!IN_GCOV */\n-#if LONG_LONG_TYPE_SIZE > 32\n-#define GCOV_TYPE_NODE intDI_type_node\n-#else\n-#define GCOV_TYPE_NODE intSI_type_node\n-#endif\n+#define GCOV_TYPE_SIZE (LONG_LONG_TYPE_SIZE > 32 ? 64 : 32)\n #endif\n \n #if defined (HOST_HAS_F_SETLKW)"}, {"sha": "614525d44fec0c2312f004aca275f4d9d56b12b6", "filename": "gcc/rtl-profile.c", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/251e2ff23fc7a7c7a319dee3fa6acac3d8c2642a/gcc%2Frtl-profile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/251e2ff23fc7a7c7a319dee3fa6acac3d8c2642a/gcc%2Frtl-profile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl-profile.c?ref=251e2ff23fc7a7c7a319dee3fa6acac3d8c2642a", "patch": "@@ -83,14 +83,13 @@ rtl_gen_edge_profiler (int edgeno, edge e)\n static void\n rtl_gen_interval_profiler (histogram_value value, unsigned tag, unsigned base)\n {\n-  unsigned gcov_size = tree_low_cst (TYPE_SIZE (GCOV_TYPE_NODE), 1);\n-  enum machine_mode mode = mode_for_size (gcov_size, MODE_INT, 0);\n+  enum machine_mode mode = mode_for_size (GCOV_TYPE_SIZE, MODE_INT, 0);\n   rtx mem_ref, tmp, tmp1, mr, val;\n   rtx sequence;\n   rtx more_label = gen_label_rtx ();\n   rtx less_label = gen_label_rtx ();\n   rtx end_of_code_label = gen_label_rtx ();\n-  int per_counter = gcov_size / BITS_PER_UNIT;\n+  int per_counter = GCOV_TYPE_SIZE / BITS_PER_UNIT;\n   edge e = split_block (BLOCK_FOR_INSN (value->hvalue.rtl.insn),\n \t\t   PREV_INSN (value->hvalue.rtl.insn));\n \n@@ -169,13 +168,12 @@ rtl_gen_interval_profiler (histogram_value value, unsigned tag, unsigned base)\n static void\n rtl_gen_pow2_profiler (histogram_value value, unsigned tag, unsigned base)\n {\n-  unsigned gcov_size = tree_low_cst (TYPE_SIZE (GCOV_TYPE_NODE), 1);\n-  enum machine_mode mode = mode_for_size (gcov_size, MODE_INT, 0);\n+  enum machine_mode mode = mode_for_size (GCOV_TYPE_SIZE, MODE_INT, 0);\n   rtx mem_ref, tmp, mr, uval;\n   rtx sequence;\n   rtx end_of_code_label = gen_label_rtx ();\n   rtx loop_label = gen_label_rtx ();\n-  int per_counter = gcov_size / BITS_PER_UNIT;\n+  int per_counter = GCOV_TYPE_SIZE / BITS_PER_UNIT;\n   edge e = split_block (BLOCK_FOR_INSN (value->hvalue.rtl.insn),\n \t\t   PREV_INSN (value->hvalue.rtl.insn));\n \n@@ -245,8 +243,7 @@ static rtx\n rtl_gen_one_value_profiler_no_edge_manipulation (histogram_value value,\n \t\t\t\t\t\t unsigned tag, unsigned base)\n {\n-  unsigned gcov_size = tree_low_cst (TYPE_SIZE (GCOV_TYPE_NODE), 1);\n-  enum machine_mode mode = mode_for_size (gcov_size, MODE_INT, 0);\n+  enum machine_mode mode = mode_for_size (GCOV_TYPE_SIZE, MODE_INT, 0);\n   rtx stored_value_ref, counter_ref, all_ref, stored_value, counter, all;\n   rtx tmp, uval;\n   rtx sequence;\n@@ -340,8 +337,7 @@ static void\n rtl_gen_const_delta_profiler (histogram_value value, unsigned tag, unsigned base)\n {\n   histogram_value one_value_delta;\n-  unsigned gcov_size = tree_low_cst (TYPE_SIZE (GCOV_TYPE_NODE), 1);\n-  enum machine_mode mode = mode_for_size (gcov_size, MODE_INT, 0);\n+  enum machine_mode mode = mode_for_size (GCOV_TYPE_SIZE, MODE_INT, 0);\n   rtx stored_value_ref, stored_value, tmp, uval;\n   rtx sequence;\n   edge e = split_block (BLOCK_FOR_INSN (value->hvalue.rtl.insn),"}, {"sha": "d1b9d2e945c1bad27264e4913e53354e01c68a02", "filename": "gcc/system.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/251e2ff23fc7a7c7a319dee3fa6acac3d8c2642a/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/251e2ff23fc7a7c7a319dee3fa6acac3d8c2642a/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=251e2ff23fc7a7c7a319dee3fa6acac3d8c2642a", "patch": "@@ -646,8 +646,7 @@ extern void fancy_abort (const char *, int, const char *) ATTRIBUTE_NORETURN;\n \tPROMOTED_MODE EXPAND_BUILTIN_VA_END\t\t\t\t   \\\n \tLINKER_DOES_NOT_WORK_WITH_DWARF2 FUNCTION_ARG_KEEP_AS_REFERENCE\t   \\\n \tGIV_SORT_CRITERION MAX_LONG_TYPE_SIZE MAX_LONG_DOUBLE_TYPE_SIZE\t   \\\n-\tMAX_WCHAR_TYPE_SIZE GCOV_TYPE_SIZE SHARED_SECTION_ASM_OP\t   \\\n-\tINTEGRATE_THRESHOLD                                                \\\n+\tMAX_WCHAR_TYPE_SIZE SHARED_SECTION_ASM_OPINTEGRATE_THRESHOLD       \\\n \tFINAL_REG_PARM_STACK_SPACE MAYBE_REG_PARM_STACK_SPACE\t\t   \\\n \tTRADITIONAL_PIPELINE_INTERFACE DFA_PIPELINE_INTERFACE\t\t   \\\n \tDBX_OUTPUT_STANDARD_TYPES BUILTIN_SETJMP_FRAME_VALUE\t\t   \\"}, {"sha": "0ef054efc1921670fb8d7b5a064ff118cd146348", "filename": "gcc/value-prof.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/251e2ff23fc7a7c7a319dee3fa6acac3d8c2642a/gcc%2Fvalue-prof.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/251e2ff23fc7a7c7a319dee3fa6acac3d8c2642a/gcc%2Fvalue-prof.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-prof.c?ref=251e2ff23fc7a7c7a319dee3fa6acac3d8c2642a", "patch": "@@ -37,6 +37,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"tree-flow.h\"\n #include \"tree-flow-inline.h\"\n #include \"diagnostic.h\"\n+#include \"coverage.h\"\n #include \"tree.h\"\n #include \"gcov-io.h\"\n "}]}