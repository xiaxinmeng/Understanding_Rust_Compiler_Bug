{"sha": "d0ae0f51fa0dfc1f8dfbc9ea4e51e3389460568c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDBhZTBmNTFmYTBkZmMxZjhkZmJjOWVhNGU1MWUzMzg5NDYwNTY4Yw==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2015-05-19T08:00:41Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2015-05-19T08:00:41Z"}, "message": "re PR target/54236 ([SH] Improve addc and subc insn utilization)\n\ngcc/\n\tPR target/54236\n\t* config/sh/sh.md (*round_int_even): New insn_and_split and\n\taccompanying new unnamed split.\n\ngcc/testsuite/\n\tPR target/54236\n\t* gcc.target/sh/pr54236-2.c: Adjust expected insn counts.\n\nFrom-SVN: r223346", "tree": {"sha": "1fb5e48aebad887c32ed866714017cbe3bdd6479", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1fb5e48aebad887c32ed866714017cbe3bdd6479"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d0ae0f51fa0dfc1f8dfbc9ea4e51e3389460568c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0ae0f51fa0dfc1f8dfbc9ea4e51e3389460568c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0ae0f51fa0dfc1f8dfbc9ea4e51e3389460568c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0ae0f51fa0dfc1f8dfbc9ea4e51e3389460568c/comments", "author": null, "committer": null, "parents": [{"sha": "07a737f333f0d4352984664c1ab6d344f6e2c88c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07a737f333f0d4352984664c1ab6d344f6e2c88c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07a737f333f0d4352984664c1ab6d344f6e2c88c"}], "stats": {"total": 65, "additions": 61, "deletions": 4}, "files": [{"sha": "dd8f5c7f7aca122ac98647c064c8fafd9db946e6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0ae0f51fa0dfc1f8dfbc9ea4e51e3389460568c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0ae0f51fa0dfc1f8dfbc9ea4e51e3389460568c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d0ae0f51fa0dfc1f8dfbc9ea4e51e3389460568c", "patch": "@@ -1,3 +1,9 @@\n+2015-05-19  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\tPR target/54236\n+\t* config/sh/sh.md (*round_int_even): New insn_and_split and\n+\taccompanying new unnamed split.\n+\n 2015-05-19  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* bitmap.c (bitmap_set_range): Handle count==1 specially."}, {"sha": "3b669928a201ebda44217ec2e493bd100c75f344", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0ae0f51fa0dfc1f8dfbc9ea4e51e3389460568c/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0ae0f51fa0dfc1f8dfbc9ea4e51e3389460568c/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=d0ae0f51fa0dfc1f8dfbc9ea4e51e3389460568c", "patch": "@@ -1998,6 +1998,44 @@\n   [(set (match_dup 0) (minus:SI (match_dup 1) (match_dup 2)))\n    (set (match_dup 0) (plus:SI (match_dup 0) (const_int 1)))])\n \n+\n+;; The tree optimiziers canonicalize \n+;;    reg + (reg & 1)\n+;; into\n+;;    (reg + 1) & -2\n+;;\n+;; On SH2A an add-bclr sequence will be used to handle this.\n+;; On non-SH2A re-emit the add-and sequence to improve register utilization.\n+(define_insn_and_split \"*round_int_even\"\n+  [(set (match_operand:SI 0 \"arith_reg_dest\")\n+\t(and:SI (plus:SI (match_operand:SI 1 \"arith_reg_operand\")\n+\t\t\t (const_int 1))\n+\t\t(const_int -2)))]\n+  \"TARGET_SH1 && !TARGET_SH2A && can_create_pseudo_p ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (match_dup 0) (const_int -2))\n+   (set (match_dup 2) (plus:SI (match_dup 1) (const_int 1)))\n+   (set (match_dup 0) (and:SI (match_dup 0) (match_dup 2)))]\n+{\n+  operands[2] = gen_reg_rtx (SImode);\n+})\n+\n+;; If the *round_int_even pattern is combined with another plus,\n+;; convert it into an addc pattern to emit an shlr-addc sequence.\n+;; This split is taken by combine on non-SH2A and SH2A.\n+(define_split\n+  [(set (match_operand:SI 0 \"arith_reg_dest\")\n+\t(plus:SI (and:SI (plus:SI (match_operand:SI 1 \"arith_reg_operand\")\n+\t\t\t\t  (const_int 1))\n+\t\t\t (const_int -2))\n+\t\t (match_operand:SI 2 \"arith_reg_operand\")))]\n+  \"TARGET_SH1 && can_create_pseudo_p ()\"\n+  [(parallel [(set (match_dup 0)\n+\t\t   (plus:SI (plus:SI (match_dup 1) (match_dup 2))\n+\t\t\t    (and:SI (match_dup 1) (const_int 1))))\n+\t      (clobber (reg:SI T_REG))])])\n+\n ;; Split 'reg + T' into 'reg + 0 + T' to utilize the addc insn.\n ;; If the 0 constant can be CSE-ed, this becomes a one instruction\n ;; operation, as opposed to sequences such as"}, {"sha": "28533716d91421055bb9b7d28c739b0d683f7081", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0ae0f51fa0dfc1f8dfbc9ea4e51e3389460568c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0ae0f51fa0dfc1f8dfbc9ea4e51e3389460568c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d0ae0f51fa0dfc1f8dfbc9ea4e51e3389460568c", "patch": "@@ -1,3 +1,8 @@\n+2015-05-19  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\tPR target/54236\n+\t* gcc.target/sh/pr54236-2.c: Adjust expected insn counts.\n+\n 2015-05-19  Sameera Deshpande  <sameera.deshpande@imgtec.com>\n \n \t* gcc.target/mips/p5600-bonding.c : New file."}, {"sha": "b94c2c0a5e2fc232cfb54046b6e44a5ee1f48caf", "filename": "gcc/testsuite/gcc.target/sh/pr54236-2.c", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0ae0f51fa0dfc1f8dfbc9ea4e51e3389460568c/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54236-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0ae0f51fa0dfc1f8dfbc9ea4e51e3389460568c/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54236-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54236-2.c?ref=d0ae0f51fa0dfc1f8dfbc9ea4e51e3389460568c", "patch": "@@ -4,12 +4,19 @@\n /* { dg-do compile }  */\n /* { dg-options \"-O1\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\"} { \"\" } } */\n-/* { dg-final { scan-assembler-times \"addc\" 37 } } */\n-/* { dg-final { scan-assembler-times \"shlr\" 23 } } */\n+/* { dg-final { scan-assembler-times \"addc\" 36 } } */\n+/* { dg-final { scan-assembler-times \"shlr\" 22 } } */\n /* { dg-final { scan-assembler-times \"shll\" 14 } } */\n-/* { dg-final { scan-assembler-times \"add\\t\" 12 } } */\n+/* { dg-final { scan-assembler-times \"add\\tr\" 12 } } */\n /* { dg-final { scan-assembler-not \"movt\" } } */\n \n+/* { dg-final { scan-assembler-times \"add\\t#1\" 1 } } */\n+\n+/* { dg-final { scan-assembler-times \"mov\\t#-2\" 1 { target { ! sh2a } } } } */\n+/* { dg-final { scan-assembler-times \"and\\tr\" 1 { target { ! sh2a } } } } */\n+\n+/* { dg-final { scan-assembler-times \"bclr\\t#0\" 1 { target { sh2a } } } } */\n+\n int\n test_000 (int a, int c, int b, int d)\n {\n@@ -125,7 +132,8 @@ test_015 (int a, int c, int b, int d)\n int\n test_016 (int a, int b, int c, int d)\n {\n-  // 1x shlr, 1x addc\n+  // non-SH2A: 1x add #1, 1x mov #-2, 1x and\n+  // SH2A: 1x add #1, 1x blcr #0\n   return a + (a & 1);\n }\n "}]}