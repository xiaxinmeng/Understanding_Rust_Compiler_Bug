{"sha": "ffaf6f258a248a8c90267455c0e681ac1fb5345c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmZhZjZmMjU4YTI0OGE4YzkwMjY3NDU1YzBlNjgxYWMxZmI1MzQ1Yw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2009-09-27T12:36:43Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2009-09-27T12:36:43Z"}, "message": "fold-const.c (maybe_lvalue_p): Return false for M(IN|AX)_EXPR.\n\n\t* fold-const.c (maybe_lvalue_p): Return false for M(IN|AX)_EXPR.\n\t(extract_muldiv_1) <MINUS_EXPR>: Swap operands if necessary.\n\t* stor-layout.c (layout_type) <ARRAY_TYPE>: Do not take the maximum\n\tof the length and zero.\n\nFrom-SVN: r152217", "tree": {"sha": "66dacc33dc02bdfc687cd79b0deb3eb58a538bdd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/66dacc33dc02bdfc687cd79b0deb3eb58a538bdd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ffaf6f258a248a8c90267455c0e681ac1fb5345c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffaf6f258a248a8c90267455c0e681ac1fb5345c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ffaf6f258a248a8c90267455c0e681ac1fb5345c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffaf6f258a248a8c90267455c0e681ac1fb5345c/comments", "author": null, "committer": null, "parents": [{"sha": "464778c074aa55ea8d41713fc160a48c9e0df305", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/464778c074aa55ea8d41713fc160a48c9e0df305", "html_url": "https://github.com/Rust-GCC/gccrs/commit/464778c074aa55ea8d41713fc160a48c9e0df305"}], "stats": {"total": 32, "additions": 20, "deletions": 12}, "files": [{"sha": "cbe382069dbafa481644e94ce8ac462ca85a5915", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffaf6f258a248a8c90267455c0e681ac1fb5345c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffaf6f258a248a8c90267455c0e681ac1fb5345c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ffaf6f258a248a8c90267455c0e681ac1fb5345c", "patch": "@@ -1,3 +1,10 @@\n+2009-09-27  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* fold-const.c (maybe_lvalue_p): Return false for M(IN|AX)_EXPR.\n+\t(extract_muldiv_1) <MINUS_EXPR>: Swap operands if necessary.\n+\t* stor-layout.c (layout_type) <ARRAY_TYPE>: Do not take the maximum\n+\tof the length and zero.\n+\n 2009-09-27  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n \n \t* Makefile.in (TOPLEV_H): Use $(INPUT_H) not input.h."}, {"sha": "b080d85b471c0165718d14ee806648c40c64d26a", "filename": "gcc/fold-const.c", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffaf6f258a248a8c90267455c0e681ac1fb5345c/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffaf6f258a248a8c90267455c0e681ac1fb5345c/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=ffaf6f258a248a8c90267455c0e681ac1fb5345c", "patch": "@@ -2830,8 +2830,6 @@ maybe_lvalue_p (const_tree x)\n   case TARGET_EXPR:\n   case COND_EXPR:\n   case BIND_EXPR:\n-  case MIN_EXPR:\n-  case MAX_EXPR:\n     break;\n \n   default:\n@@ -6512,7 +6510,19 @@ extract_muldiv_1 (tree t, tree c, enum tree_code code, tree wide_type,\n       /* If this was a subtraction, negate OP1 and set it to be an addition.\n \t This simplifies the logic below.  */\n       if (tcode == MINUS_EXPR)\n-\ttcode = PLUS_EXPR, op1 = negate_expr (op1);\n+\t{\n+\t  tcode = PLUS_EXPR, op1 = negate_expr (op1);\n+\t  /* If OP1 was not easily negatable, the constant may be OP0.  */\n+\t  if (TREE_CODE (op0) == INTEGER_CST)\n+\t    {\n+\t      tree tem = op0;\n+\t      op0 = op1;\n+\t      op1 = tem;\n+\t      tem = t1;\n+\t      t1 = t2;\n+\t      t2 = tem;\n+\t    }\n+\t}\n \n       if (TREE_CODE (op1) != INTEGER_CST)\n \tbreak;"}, {"sha": "f34f2abbae1dc92d3d640aa849919dbb36e87c5e", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffaf6f258a248a8c90267455c0e681ac1fb5345c/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffaf6f258a248a8c90267455c0e681ac1fb5345c/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=ffaf6f258a248a8c90267455c0e681ac1fb5345c", "patch": "@@ -1968,15 +1968,6 @@ layout_type (tree type)\n \t\t\t\t\t\t\t    TREE_TYPE (lb),\n \t\t\t\t\t\t\t    ub, lb)));\n \n-\t    /* If neither bound is a constant and sizetype is signed, make\n-\t       sure the size is never negative.  We should really do this\n-\t       if *either* bound is non-constant, but this is the best\n-\t       compromise between C and Ada.  */\n-\t    if (!TYPE_UNSIGNED (sizetype)\n-\t\t&& TREE_CODE (TYPE_MIN_VALUE (index)) != INTEGER_CST\n-\t\t&& TREE_CODE (TYPE_MAX_VALUE (index)) != INTEGER_CST)\n-\t      length = size_binop (MAX_EXPR, length, size_zero_node);\n-\n \t    TYPE_SIZE (type) = size_binop (MULT_EXPR, element_size,\n \t\t\t\t\t   fold_convert (bitsizetype,\n \t\t\t\t\t\t\t length));"}]}