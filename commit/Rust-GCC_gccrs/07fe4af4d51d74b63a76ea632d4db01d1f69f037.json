{"sha": "07fe4af4d51d74b63a76ea632d4db01d1f69f037", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDdmZTRhZjRkNTFkNzRiNjNhNzZlYTYzMmQ0ZGIwMWQxZjY5ZjAzNw==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2020-03-18T21:58:45Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2020-03-18T23:17:28Z"}, "message": "rs6000: Add back some w* constraints (PR91886)\n\nIn May and June last year I deleted many of our (vector) constraints.\nWe can now just use \"wa\" for those, together with some other\nconditions, which can be per alternative using the \"enabled\" attribute\n(which in turn primarily uses the \"isa\" attribute).\n\nBut, it turns out that Clang implements some of those constraints as\nwell, and at least musl uses some of them.  It is easy for us to add\nthose contraints back (as undocumented aliases to \"wa\", which always\ndid mean the same thing for valid inline assembler code), so do that.\n\ngcc/\n\t* config/rs6000/constraints.md (wd, wf, wi, ws, ww): New undocumented\n\taliases for \"wa\".", "tree": {"sha": "1c49ef98584076690b0128de4ffc8958c775229b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1c49ef98584076690b0128de4ffc8958c775229b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/07fe4af4d51d74b63a76ea632d4db01d1f69f037", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07fe4af4d51d74b63a76ea632d4db01d1f69f037", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07fe4af4d51d74b63a76ea632d4db01d1f69f037", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07fe4af4d51d74b63a76ea632d4db01d1f69f037/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "529ea7d9596b26ba103578eeab448e9862a2d2c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/529ea7d9596b26ba103578eeab448e9862a2d2c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/529ea7d9596b26ba103578eeab448e9862a2d2c5"}], "stats": {"total": 16, "additions": 16, "deletions": 0}, "files": [{"sha": "66202f0253f5ea44b14836ff9e7c8e7e25a3672a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07fe4af4d51d74b63a76ea632d4db01d1f69f037/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07fe4af4d51d74b63a76ea632d4db01d1f69f037/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=07fe4af4d51d74b63a76ea632d4db01d1f69f037", "patch": "@@ -1,3 +1,8 @@\n+2020-03-18  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* config/rs6000/constraints.md (wd, wf, wi, ws, ww): New undocumented\n+\taliases for \"wa\".\n+\n 2020-03-12  Richard Sandiford  <richard.sandiford@arm.com>\n \n \tPR rtl-optimization/90275"}, {"sha": "c600535e3eaf622f80880ba9e3e4fb6c101ab914", "filename": "gcc/config/rs6000/constraints.md", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07fe4af4d51d74b63a76ea632d4db01d1f69f037/gcc%2Fconfig%2Frs6000%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07fe4af4d51d74b63a76ea632d4db01d1f69f037/gcc%2Fconfig%2Frs6000%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fconstraints.md?ref=07fe4af4d51d74b63a76ea632d4db01d1f69f037", "patch": "@@ -45,6 +45,17 @@\n   FPR (@code{vs0}@dots{}@code{vs31} are @code{f0}@dots{}@code{f31}) or a VR\n   (@code{vs32}@dots{}@code{vs63} are @code{v0}@dots{}@code{v31}).\")\n \n+(define_register_constraint \"wd\" \"rs6000_constraints[RS6000_CONSTRAINT_wa]\"\n+  \"@internal A compatibility alias for @code{wa}.\")\n+(define_register_constraint \"wf\" \"rs6000_constraints[RS6000_CONSTRAINT_wa]\"\n+  \"@internal A compatibility alias for @code{wa}.\")\n+(define_register_constraint \"wi\" \"rs6000_constraints[RS6000_CONSTRAINT_wa]\"\n+  \"@internal A compatibility alias for @code{wa}.\")\n+(define_register_constraint \"ws\" \"rs6000_constraints[RS6000_CONSTRAINT_wa]\"\n+  \"@internal A compatibility alias for @code{wa}.\")\n+(define_register_constraint \"ww\" \"rs6000_constraints[RS6000_CONSTRAINT_wa]\"\n+  \"@internal A compatibility alias for @code{wa}.\")\n+\n (define_register_constraint \"h\" \"SPECIAL_REGS\"\n   \"@internal A special register (@code{vrsave}, @code{ctr}, or @code{lr}).\")\n "}]}