{"sha": "fd87b7a7099bc82b2542b169c592c0dfc997029e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmQ4N2I3YTcwOTliYzgyYjI1NDJiMTY5YzU5MmMwZGZjOTk3MDI5ZQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2002-03-02T19:51:57Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2002-03-02T19:51:57Z"}, "message": "re PR c++/775 (2.97 error declaring nested class a friend)\n\ncp:\n        PR c++/775\n        * decl.c (lookup_tag): Only reject enum/class mismatch, not\n        class/union mismatch.\n        * parse.y (check_class_key): New function.\n        (structsp): Call it.Read from remote host gcc.gnu.org: Connection reset by peer\ntestsuite:\n        * g++.dg/other/classkey1.C: New test.\n\nFrom-SVN: r50230", "tree": {"sha": "fed3e389d12d8ef87e63a352e8dfcd37659de11a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fed3e389d12d8ef87e63a352e8dfcd37659de11a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fd87b7a7099bc82b2542b169c592c0dfc997029e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd87b7a7099bc82b2542b169c592c0dfc997029e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd87b7a7099bc82b2542b169c592c0dfc997029e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd87b7a7099bc82b2542b169c592c0dfc997029e/comments", "author": null, "committer": null, "parents": [{"sha": "4f647d52ec4534ff30bdb0729217ffd8ee899010", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f647d52ec4534ff30bdb0729217ffd8ee899010", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f647d52ec4534ff30bdb0729217ffd8ee899010"}], "stats": {"total": 55, "additions": 48, "deletions": 7}, "files": [{"sha": "013b826b8c26f334eec1a3880952de948132ef2c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd87b7a7099bc82b2542b169c592c0dfc997029e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd87b7a7099bc82b2542b169c592c0dfc997029e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=fd87b7a7099bc82b2542b169c592c0dfc997029e", "patch": "@@ -1,3 +1,11 @@\n+2002-03-02  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tPR c++/775\n+\t* decl.c (lookup_tag): Only reject enum/class mismatch, not\n+\tclass/union mismatch.\n+\t* parse.y (check_class_key): New function.\n+\t(structsp): Call it.\n+\n 2002-03-01  Michael Matz  <matz@suse.de>\n \n \t* typeck.c (cp_pointer_int_sum): Complete inner type which is"}, {"sha": "854a2c2a9fa0461e098b054fe3be9a40b55182ac", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd87b7a7099bc82b2542b169c592c0dfc997029e/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd87b7a7099bc82b2542b169c592c0dfc997029e/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=fd87b7a7099bc82b2542b169c592c0dfc997029e", "patch": "@@ -5345,7 +5345,7 @@ lookup_tag (form, name, binding_level, thislevel_only)\n \t    if (old && DECL_ORIGINAL_TYPE (TYPE_NAME (old)))\n \t      old = NULL_TREE;\n \t    if (old && TREE_CODE (old) != form\n-\t\t&& !(form != ENUMERAL_TYPE && TREE_CODE (old) == TEMPLATE_DECL))\n+\t\t&& (form == ENUMERAL_TYPE || TREE_CODE (old) == ENUMERAL_TYPE))\n \t      {\n \t\terror (\"`%#D' redeclared as %C\", old, form);\n \t\treturn NULL_TREE;\n@@ -5361,14 +5361,12 @@ lookup_tag (form, name, binding_level, thislevel_only)\n \t    if (TREE_PURPOSE (tail) == name)\n \t      {\n \t\tenum tree_code code = TREE_CODE (TREE_VALUE (tail));\n-\t\t/* Should tighten this up; it'll probably permit\n-\t\t   UNION_TYPE and a struct template, for example.  */\n+\t\t\n \t\tif (code != form\n-\t\t    && !(form != ENUMERAL_TYPE && code == TEMPLATE_DECL))\n+\t\t    && (form == ENUMERAL_TYPE || code == ENUMERAL_TYPE))\n \t\t  {\n \t\t    /* Definition isn't the kind we were looking for.  */\n-\t\t    error (\"`%#D' redeclared as %C\", TREE_VALUE (tail),\n-\t\t\t      form);\n+\t\t    error (\"`%#D' redeclared as %C\", TREE_VALUE (tail), form);\n \t\t    return NULL_TREE;\n \t\t  }\n \t\treturn TREE_VALUE (tail);"}, {"sha": "fd53a850cb25e1ca93f6bfc066cbfa3cebddd1a0", "filename": "gcc/cp/parse.y", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd87b7a7099bc82b2542b169c592c0dfc997029e/gcc%2Fcp%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd87b7a7099bc82b2542b169c592c0dfc997029e/gcc%2Fcp%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.y?ref=fd87b7a7099bc82b2542b169c592c0dfc997029e", "patch": "@@ -87,7 +87,8 @@ static tree parse_field PARAMS ((tree, tree, tree, tree));\n static tree parse_bitfield0 PARAMS ((tree, tree, tree, tree, tree));\n static tree parse_bitfield PARAMS ((tree, tree, tree));\n static tree parse_method PARAMS ((tree, tree, tree));\n-static void frob_specs PARAMS ((tree, tree)); \n+static void frob_specs PARAMS ((tree, tree));\n+static void check_class_key PARAMS ((tree, tree));\n \n /* Cons up an empty parameter list.  */\n static inline tree\n@@ -208,6 +209,17 @@ parse_method (declarator, specs_attrs, lookups)\n   return d;\n }\n \n+static void\n+check_class_key (key, aggr)\n+     tree key;\n+     tree aggr;\n+{\n+  if ((key == union_type_node) != (TREE_CODE (aggr) == UNION_TYPE))\n+    pedwarn (\"`%s' tag used in naming `%#T'\",\n+\t     key == union_type_node ? \"union\"\n+\t     : key == record_type_node ? \"struct\" : \"class\", aggr);\n+}\n+\n void\n cp_parse_init ()\n {\n@@ -2292,6 +2304,7 @@ structsp:\n \t\t      xref_basetypes (current_aggr, $1.t, type, $2);\n \t\t    }\n \t\t  $1.t = begin_class_definition (TREE_TYPE ($1.t)); \n+\t\t  check_class_key (current_aggr, $1.t);\n                   current_aggr = NULL_TREE; }\n           opt.component_decl_list '}' maybe_attribute\n \t\t{ \n@@ -2326,6 +2339,7 @@ structsp:\n \t\t{\n \t\t  $$.t = TREE_TYPE ($1.t);\n \t\t  $$.new_type_flag = $1.new_type_flag;\n+\t\t  check_class_key (current_aggr, $$.t);\n \t\t}\n \t;\n "}, {"sha": "5be459f6110ffee87b79503a027cc7c834981152", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd87b7a7099bc82b2542b169c592c0dfc997029e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd87b7a7099bc82b2542b169c592c0dfc997029e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fd87b7a7099bc82b2542b169c592c0dfc997029e", "patch": "@@ -1,3 +1,7 @@\n+2002-03-02  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* g++.dg/other/classkey1.C: New test.\n+\n 2002-03-01  Richard Henderson  <rth@redhat.com>\n \n \t* gcc.c-torture/compile/981223-1.x: New."}, {"sha": "17fb54065d0256701d93a00078b16f07d7264ec5", "filename": "gcc/testsuite/g++.dg/other/classkey1.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd87b7a7099bc82b2542b169c592c0dfc997029e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fclasskey1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd87b7a7099bc82b2542b169c592c0dfc997029e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fclasskey1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fclasskey1.C?ref=fd87b7a7099bc82b2542b169c592c0dfc997029e", "patch": "@@ -0,0 +1,17 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2002 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 28 Feb 2002 <nathan@codesourcery.com>\n+\n+// PR 775. Some mismatches which were broken.\n+\n+template <class T> struct A {};\n+union A<int> a; // { dg-error \"`union' tag\" \"\" }\n+\n+template <> union A<float> {}; // { dg-error \"`union' tag\" \"\" }\n+\n+struct B {};\n+union B b;\t// { dg-error \"`union' tag\" \"\" }\n+\n+union C {};\n+class C c;\t// { dg-error \"`class' tag\" \"\" }"}]}