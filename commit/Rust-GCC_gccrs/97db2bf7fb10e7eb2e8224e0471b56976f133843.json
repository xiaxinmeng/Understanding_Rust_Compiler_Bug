{"sha": "97db2bf7fb10e7eb2e8224e0471b56976f133843", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTdkYjJiZjdmYjEwZTdlYjJlODIyNGUwNDcxYjU2OTc2ZjEzMzg0Mw==", "commit": {"author": {"name": "Sriraman Tallam", "email": "tmsriram@google.com", "date": "2013-06-23T06:15:19Z"}, "committer": {"name": "Sriraman Tallam", "email": "tmsriram@gcc.gnu.org", "date": "2013-06-23T06:15:19Z"}, "message": "Allow mmintrin headers to work with function specific target opts.\n\nAllow mmintrin headers to work with function specific target opts.  Please\nsee discussion here:\nhttp://gcc.gnu.org/ml/gcc-patches/2013-04/msg00740.html\n\n\t* config/i386/i386.c (ix86_pragma_target_parse):  Restore target\n\twhen current target options does not apply.\n\t* config/i386/i386-protos.h (ix86_reset_previous_fndecl): New function.\n\t* config/i386/i386.c (ix86_reset_previous_fndecl): Ditto.\n\t* config/i386/bmiintrin.h: Pass appropriate target attributes to header.\n\t* config/i386/mmintrin.h: Ditto.\n\t* config/i386/nmmintrin.h: Ditto.\n\t* config/i386/avx2intrin.h: Ditto.\n\t* config/i386/fxsrintrin.h: Ditto.\n\t* config/i386/tbmintrin.h: Ditto.\n\t* config/i386/xsaveintrin.h: Ditto.\n\t* config/i386/f16cintrin.h: Ditto.\n\t* config/i386/xtestintrin.h: Ditto.\n\t* config/i386/xsaveoptintrin.h: Ditto.\n\t* config/i386/bmi2intrin.h: Ditto.\n\t* config/i386/lzcntintrin.h: Ditto.\n\t* config/i386/smmintrin.h: Ditto.\n\t* config/i386/wmmintrin.h: Ditto.\n\t* config/i386/x86intrin.h: Remove all header include guards.\n\t* config/i386/prfchwintrin.h: Ditto.\n\t* config/i386/pmmintrin.h: Ditto.\n\t* config/i386/tmmintrin.h: Ditto.\n\t* config/i386/xmmintrin.h: Ditto.\n\t* config/i386/popcntintrin.h: Ditto.\n\t* config/i386/rdseedintrin.h: Ditto.\n\t* config/i386/ammintrin.h: Ditto.\n\t* config/i386/emmintrin.h: Ditto.\n\t* config/i386/immintrin.h: Remove all header include guards.\n\t* config/i386/fma4intrin.h: Ditto.\n\t* config/i386/lwpintrin.h: Ditto.\n\t* config/i386/xopintrin.h: Ditto.\n\t* config/i386/ia32intrin.h: Ditto.\n\t* config/i386/avxintrin.h: Ditto.\n\t* config/i386/rtmintrin.h: Ditto.\n\t* config/i386/fmaintrin.h: Ditto.\n\t* config/i386/mm3dnow.h: Ditto.\n\n\t* testsuite/gcc.target/i386/intrinsics_1.c: New test.\n\t* testsuite/gcc.target/i386/intrinsics_2.c: Ditto.\n\t* testsuite/gcc.target/i386/intrinsics_3.c: Ditto.\n\t* testsuite/gcc.target/i386/intrinsics_4.c: Ditto.\n\t* testsuite/gcc.target/i386/intrinsics_5.c: Ditto.\n\t* testsuite/gcc.target/i386/intrinsics_6.c: Ditto.\n\t* testsuite/gcc.target/i386/avx-1.c: Provide macros for builtins\n\tneeding immediate arguments in f16cintrin.h and rtmintrin.h.\n\nFrom-SVN: r200349", "tree": {"sha": "bcbdec95b4f436d90004456b20b84ef68cf1e7c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bcbdec95b4f436d90004456b20b84ef68cf1e7c8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/97db2bf7fb10e7eb2e8224e0471b56976f133843", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97db2bf7fb10e7eb2e8224e0471b56976f133843", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97db2bf7fb10e7eb2e8224e0471b56976f133843", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97db2bf7fb10e7eb2e8224e0471b56976f133843/comments", "author": {"login": "tmsri", "id": 38991943, "node_id": "MDQ6VXNlcjM4OTkxOTQz", "avatar_url": "https://avatars.githubusercontent.com/u/38991943?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmsri", "html_url": "https://github.com/tmsri", "followers_url": "https://api.github.com/users/tmsri/followers", "following_url": "https://api.github.com/users/tmsri/following{/other_user}", "gists_url": "https://api.github.com/users/tmsri/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmsri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmsri/subscriptions", "organizations_url": "https://api.github.com/users/tmsri/orgs", "repos_url": "https://api.github.com/users/tmsri/repos", "events_url": "https://api.github.com/users/tmsri/events{/privacy}", "received_events_url": "https://api.github.com/users/tmsri/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "604b2bfcc43fa05d50651cca3a36b29b8fb08b18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/604b2bfcc43fa05d50651cca3a36b29b8fb08b18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/604b2bfcc43fa05d50651cca3a36b29b8fb08b18"}], "stats": {"total": 785, "additions": 579, "deletions": 206}, "files": [{"sha": "b84d379e55cdf017c5ee08a9e9882d587c0b3435", "filename": "gcc/ChangeLog", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97db2bf7fb10e7eb2e8224e0471b56976f133843/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97db2bf7fb10e7eb2e8224e0471b56976f133843/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=97db2bf7fb10e7eb2e8224e0471b56976f133843", "patch": "@@ -1,3 +1,42 @@\n+2013-06-23  Sriraman Tallam  <tmsriram@google.com>\n+\n+\t* config/i386/i386.c (ix86_pragma_target_parse):  Restore target\n+\twhen current target options does not apply.\n+\t* config/i386/i386-protos.h (ix86_reset_previous_fndecl): New function.\n+\t* config/i386/i386.c (ix86_reset_previous_fndecl): Ditto.\n+\t* config/i386/bmiintrin.h: Pass appropriate target attributes to header.\n+\t* config/i386/mmintrin.h: Ditto.\n+\t* config/i386/nmmintrin.h: Ditto.\n+\t* config/i386/avx2intrin.h: Ditto.\n+\t* config/i386/fxsrintrin.h: Ditto.\n+\t* config/i386/tbmintrin.h: Ditto.\n+\t* config/i386/xsaveintrin.h: Ditto.\n+\t* config/i386/f16cintrin.h: Ditto.\n+\t* config/i386/xtestintrin.h: Ditto.\n+\t* config/i386/xsaveoptintrin.h: Ditto.\n+\t* config/i386/bmi2intrin.h: Ditto.\n+\t* config/i386/lzcntintrin.h: Ditto.\n+\t* config/i386/smmintrin.h: Ditto.\n+\t* config/i386/wmmintrin.h: Ditto.\n+\t* config/i386/x86intrin.h: Remove all header include guards.\n+\t* config/i386/prfchwintrin.h: Ditto.\n+\t* config/i386/pmmintrin.h: Ditto.\n+\t* config/i386/tmmintrin.h: Ditto.\n+\t* config/i386/xmmintrin.h: Ditto.\n+\t* config/i386/popcntintrin.h: Ditto.\n+\t* config/i386/rdseedintrin.h: Ditto.\n+\t* config/i386/ammintrin.h: Ditto.\n+\t* config/i386/emmintrin.h: Ditto.\n+\t* config/i386/immintrin.h: Remove all header include guards.\n+\t* config/i386/fma4intrin.h: Ditto.\n+\t* config/i386/lwpintrin.h: Ditto.\n+\t* config/i386/xopintrin.h: Ditto.\n+\t* config/i386/ia32intrin.h: Ditto.\n+\t* config/i386/avxintrin.h: Ditto.\n+\t* config/i386/rtmintrin.h: Ditto.\n+\t* config/i386/fmaintrin.h: Ditto.\n+\t* config/i386/mm3dnow.h: Ditto.\n+\n 2013-06-22  Sriraman Tallam  <tmsriram@google.com>\n \n \t* common/config/i386/i386-common.c: Handle LZCNT."}, {"sha": "297b98dd0d85931904516e6249c2a0ff4c74dca5", "filename": "gcc/config/i386/ammintrin.h", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97db2bf7fb10e7eb2e8224e0471b56976f133843/gcc%2Fconfig%2Fi386%2Fammintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97db2bf7fb10e7eb2e8224e0471b56976f133843/gcc%2Fconfig%2Fi386%2Fammintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fammintrin.h?ref=97db2bf7fb10e7eb2e8224e0471b56976f133843", "patch": "@@ -27,13 +27,15 @@\n #ifndef _AMMINTRIN_H_INCLUDED\n #define _AMMINTRIN_H_INCLUDED\n \n-#ifndef __SSE4A__\n-# error \"SSE4A instruction set not enabled\"\n-#else\n-\n /* We need definitions from the SSE3, SSE2 and SSE header files*/\n #include <pmmintrin.h>\n \n+#ifndef __SSE4A__\n+#pragma GCC push_options\n+#pragma GCC target(\"sse4a\")\n+#define __DISABLE_SSE4A__\n+#endif /* __SSE4A__ */\n+\n extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_stream_sd (double * __P, __m128d __Y)\n {\n@@ -83,6 +85,9 @@ _mm_inserti_si64(__m128i __X, __m128i __Y, unsigned const int __I, unsigned cons\n \t\t\t\t      (unsigned int)(I), (unsigned int)(L)))\n #endif\n \n-#endif /* __SSE4A__ */\n+#ifdef __DISABLE_SSE4A__\n+#undef __DISABLE_SSE4A__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_SSE4A__ */\n \n #endif /* _AMMINTRIN_H_INCLUDED */"}, {"sha": "4030dfe2bc2b9b940ac1a66e5bc6c998969ad0bd", "filename": "gcc/config/i386/avx2intrin.h", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97db2bf7fb10e7eb2e8224e0471b56976f133843/gcc%2Fconfig%2Fi386%2Favx2intrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97db2bf7fb10e7eb2e8224e0471b56976f133843/gcc%2Fconfig%2Fi386%2Favx2intrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx2intrin.h?ref=97db2bf7fb10e7eb2e8224e0471b56976f133843", "patch": "@@ -25,6 +25,15 @@\n # error \"Never use <avx2intrin.h> directly; include <immintrin.h> instead.\"\n #endif\n \n+#ifndef _AVX2INTRIN_H_INCLUDED\n+#define _AVX2INTRIN_H_INCLUDED\n+\n+#ifndef __AVX2__\n+#pragma GCC push_options\n+#pragma GCC target(\"avx2\")\n+#define __DISABLE_AVX2__\n+#endif /* __AVX2__ */\n+\n /* Sum absolute 8-bit integer difference of adjacent groups of 4\n    byte integers in the first 2 operands.  Starting offsets within\n    operands are determined by the 3rd mask operand.  */\n@@ -1871,3 +1880,10 @@ _mm256_mask_i64gather_epi32 (__m128i src, int const *base,\n \t\t\t\t\t   (__v4si)(__m128i)MASK,  \\\n \t\t\t\t\t   (int)SCALE)\n #endif  /* __OPTIMIZE__ */\n+\n+#ifdef __DISABLE_AVX2__\n+#undef __DISABLE_AVX2__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_AVX2__ */\n+\n+#endif /* _AVX2INTRIN_H_INCLUDED */"}, {"sha": "7f2109a72994f0d9e782793b865a3c078e793e0b", "filename": "gcc/config/i386/avxintrin.h", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97db2bf7fb10e7eb2e8224e0471b56976f133843/gcc%2Fconfig%2Fi386%2Favxintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97db2bf7fb10e7eb2e8224e0471b56976f133843/gcc%2Fconfig%2Fi386%2Favxintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favxintrin.h?ref=97db2bf7fb10e7eb2e8224e0471b56976f133843", "patch": "@@ -28,6 +28,15 @@\n # error \"Never use <avxintrin.h> directly; include <immintrin.h> instead.\"\n #endif\n \n+#ifndef _AVXINTRIN_H_INCLUDED\n+#define _AVXINTRIN_H_INCLUDED\n+\n+#ifndef __AVX__\n+#pragma GCC push_options\n+#pragma GCC target(\"avx\")\n+#define __DISABLE_AVX__\n+#endif /* __AVX__ */\n+\n /* Internal data types for implementing the intrinsics.  */\n typedef double __v4df __attribute__ ((__vector_size__ (32)));\n typedef float __v8sf __attribute__ ((__vector_size__ (32)));\n@@ -1424,3 +1433,10 @@ _mm256_castsi128_si256 (__m128i __A)\n {\n   return (__m256i) __builtin_ia32_si256_si ((__v4si)__A);\n }\n+\n+#ifdef __DISABLE_AVX__\n+#undef __DISABLE_AVX__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_AVX__ */\n+\n+#endif /* _AVXINTRIN_H_INCLUDED */"}, {"sha": "0c6cb9616c8eeecac3f6a70a09118932982c2c66", "filename": "gcc/config/i386/bmi2intrin.h", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97db2bf7fb10e7eb2e8224e0471b56976f133843/gcc%2Fconfig%2Fi386%2Fbmi2intrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97db2bf7fb10e7eb2e8224e0471b56976f133843/gcc%2Fconfig%2Fi386%2Fbmi2intrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fbmi2intrin.h?ref=97db2bf7fb10e7eb2e8224e0471b56976f133843", "patch": "@@ -25,13 +25,15 @@\n # error \"Never use <bmi2intrin.h> directly; include <x86intrin.h> instead.\"\n #endif\n \n-#ifndef __BMI2__\n-# error \"BMI2 instruction set not enabled\"\n-#endif /* __BMI2__ */\n-\n #ifndef _BMI2INTRIN_H_INCLUDED\n #define _BMI2INTRIN_H_INCLUDED\n \n+#ifndef __BMI2__\n+#pragma GCC push_options\n+#pragma GCC target(\"bmi2\")\n+#define __DISABLE_BMI2__\n+#endif /* __BMI2__ */\n+\n extern __inline unsigned int\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _bzhi_u32 (unsigned int __X, unsigned int __Y)\n@@ -99,4 +101,9 @@ _mulx_u32 (unsigned int __X, unsigned int __Y, unsigned int *__P)\n \n #endif /* !__x86_64__  */\n \n+#ifdef __DISABLE_BMI2__\n+#undef __DISABLE_BMI2__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_BMI2__ */\n+\n #endif /* _BMI2INTRIN_H_INCLUDED */"}, {"sha": "cb6ffa556ff928dd5fb7d7afebeb67bea1a99b04", "filename": "gcc/config/i386/bmiintrin.h", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97db2bf7fb10e7eb2e8224e0471b56976f133843/gcc%2Fconfig%2Fi386%2Fbmiintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97db2bf7fb10e7eb2e8224e0471b56976f133843/gcc%2Fconfig%2Fi386%2Fbmiintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fbmiintrin.h?ref=97db2bf7fb10e7eb2e8224e0471b56976f133843", "patch": "@@ -25,13 +25,15 @@\n # error \"Never use <bmiintrin.h> directly; include <x86intrin.h> instead.\"\n #endif\n \n-#ifndef __BMI__\n-# error \"BMI instruction set not enabled\"\n-#endif /* __BMI__ */\n-\n #ifndef _BMIINTRIN_H_INCLUDED\n #define _BMIINTRIN_H_INCLUDED\n \n+#ifndef __BMI__\n+#pragma GCC push_options\n+#pragma GCC target(\"bmi\")\n+#define __DISABLE_BMI__\n+#endif /* __BMI__ */\n+\n extern __inline unsigned short __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n __tzcnt_u16 (unsigned short __X)\n {\n@@ -116,4 +118,9 @@ __tzcnt_u64 (unsigned long long __X)\n \n #endif /* __x86_64__  */\n \n+#ifdef __DISABLE_BMI__\n+#undef __DISABLE_BMI__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_BMI__ */\n+\n #endif /* _BMIINTRIN_H_INCLUDED */"}, {"sha": "c30f05657d6f3c7a4d1a540a7baa49ebe03f198f", "filename": "gcc/config/i386/emmintrin.h", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97db2bf7fb10e7eb2e8224e0471b56976f133843/gcc%2Fconfig%2Fi386%2Femmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97db2bf7fb10e7eb2e8224e0471b56976f133843/gcc%2Fconfig%2Fi386%2Femmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Femmintrin.h?ref=97db2bf7fb10e7eb2e8224e0471b56976f133843", "patch": "@@ -27,13 +27,15 @@\n #ifndef _EMMINTRIN_H_INCLUDED\n #define _EMMINTRIN_H_INCLUDED\n \n-#ifndef __SSE2__\n-# error \"SSE2 instruction set not enabled\"\n-#else\n-\n /* We need definitions from the SSE header files*/\n #include <xmmintrin.h>\n \n+#ifndef __SSE2__\n+#pragma GCC push_options\n+#pragma GCC target(\"sse2\")\n+#define __DISABLE_SSE2__\n+#endif /* __SSE2__ */\n+\n /* SSE2 */\n typedef double __v2df __attribute__ ((__vector_size__ (16)));\n typedef long long __v2di __attribute__ ((__vector_size__ (16)));\n@@ -1515,6 +1517,9 @@ _mm_castsi128_pd(__m128i __A)\n   return (__m128d) __A;\n }\n \n-#endif /* __SSE2__  */\n+#ifdef __DISABLE_SSE2__\n+#undef __DISABLE_SSE2__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_SSE2__ */\n \n #endif /* _EMMINTRIN_H_INCLUDED */"}, {"sha": "76f35fa1eac89f0762bb4eaf5f1a73cc07e26711", "filename": "gcc/config/i386/f16cintrin.h", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97db2bf7fb10e7eb2e8224e0471b56976f133843/gcc%2Fconfig%2Fi386%2Ff16cintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97db2bf7fb10e7eb2e8224e0471b56976f133843/gcc%2Fconfig%2Fi386%2Ff16cintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ff16cintrin.h?ref=97db2bf7fb10e7eb2e8224e0471b56976f133843", "patch": "@@ -25,13 +25,15 @@\n # error \"Never use <f16intrin.h> directly; include <x86intrin.h> or <immintrin.h> instead.\"\n #endif\n \n-#ifndef __F16C__\n-# error \"F16C instruction set not enabled\"\n-#else\n-\n #ifndef _F16CINTRIN_H_INCLUDED\n #define _F16CINTRIN_H_INCLUDED\n \n+#ifndef __F16C__\n+#pragma GCC push_options\n+#pragma GCC target(\"f16c\")\n+#define __DISABLE_F16C__\n+#endif /* __F16C__ */\n+\n extern __inline float __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _cvtsh_ss (unsigned short __S)\n {\n@@ -88,5 +90,9 @@ _mm256_cvtps_ph (__m256 __A, const int __I)\n   ((__m128i) __builtin_ia32_vcvtps2ph256 ((__v8sf)(__m256) A, (int) (I)))\n #endif /* __OPTIMIZE */\n \n+#ifdef __DISABLE_F16C__\n+#undef __DISABLE_F16C__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_F16C__ */\n+\n #endif /* _F16CINTRIN_H_INCLUDED */\n-#endif /* __F16C__ */"}, {"sha": "e615f3e7ba0488ba1e6c16be97d434bb1db62f8d", "filename": "gcc/config/i386/fma4intrin.h", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97db2bf7fb10e7eb2e8224e0471b56976f133843/gcc%2Fconfig%2Fi386%2Ffma4intrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97db2bf7fb10e7eb2e8224e0471b56976f133843/gcc%2Fconfig%2Fi386%2Ffma4intrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ffma4intrin.h?ref=97db2bf7fb10e7eb2e8224e0471b56976f133843", "patch": "@@ -28,13 +28,15 @@\n #ifndef _FMA4INTRIN_H_INCLUDED\n #define _FMA4INTRIN_H_INCLUDED\n \n-#ifndef __FMA4__\n-# error \"FMA4 instruction set not enabled\"\n-#else\n-\n /* We need definitions from the SSE4A, SSE3, SSE2 and SSE header files.  */\n #include <ammintrin.h>\n \n+#ifndef __FMA4__\n+#pragma GCC push_options\n+#pragma GCC target(\"fma4\")\n+#define __DISABLE_FMA4__\n+#endif /* __FMA4__ */\n+\n /* 128b Floating point multiply/add type instructions.  */\n extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_macc_ps (__m128 __A, __m128 __B, __m128 __C)\n@@ -231,6 +233,9 @@ _mm256_msubadd_pd (__m256d __A, __m256d __B, __m256d __C)\n   return (__m256d) __builtin_ia32_vfmaddsubpd256 ((__v4df)__A, (__v4df)__B, -(__v4df)__C);\n }\n \n-#endif\n+#ifdef __DISABLE_FMA4__\n+#undef __DISABLE_FMA4__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_FMA4__ */\n \n #endif"}, {"sha": "97de93fd146c92bd4b823b4d4b19457219d99261", "filename": "gcc/config/i386/fmaintrin.h", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97db2bf7fb10e7eb2e8224e0471b56976f133843/gcc%2Fconfig%2Fi386%2Ffmaintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97db2bf7fb10e7eb2e8224e0471b56976f133843/gcc%2Fconfig%2Fi386%2Ffmaintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ffmaintrin.h?ref=97db2bf7fb10e7eb2e8224e0471b56976f133843", "patch": "@@ -29,8 +29,10 @@\n #define _FMAINTRIN_H_INCLUDED\n \n #ifndef __FMA__\n-# error \"FMA instruction set not enabled\"\n-#else\n+#pragma GCC push_options\n+#pragma GCC target(\"fma\")\n+#define __DISABLE_FMA__\n+#endif /* __FMA__ */\n \n extern __inline __m128d\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n@@ -292,6 +294,9 @@ _mm256_fmsubadd_ps (__m256 __A, __m256 __B, __m256 __C)\n                                                 -(__v8sf)__C);\n }\n \n-#endif\n+#ifdef __DISABLE_FMA__\n+#undef __DISABLE_FMA__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_FMA__ */\n \n #endif"}, {"sha": "41d4085b010a56d371a6539ae2bfbe0c7e516916", "filename": "gcc/config/i386/fxsrintrin.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97db2bf7fb10e7eb2e8224e0471b56976f133843/gcc%2Fconfig%2Fi386%2Ffxsrintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97db2bf7fb10e7eb2e8224e0471b56976f133843/gcc%2Fconfig%2Fi386%2Ffxsrintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ffxsrintrin.h?ref=97db2bf7fb10e7eb2e8224e0471b56976f133843", "patch": "@@ -28,6 +28,12 @@\n #ifndef _FXSRINTRIN_H_INCLUDED\n #define _FXSRINTRIN_H_INCLUDED\n \n+#ifndef __FXSR__\n+#pragma GCC push_options\n+#pragma GCC target(\"fxsr\")\n+#define __DISABLE_FXSR__\n+#endif /* __FXSR__ */\n+\n extern __inline void\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _fxsave (void *__P)\n@@ -58,4 +64,10 @@ _fxrstor64 (void *__P)\n }\n #endif\n \n+#ifdef __DISABLE_FXSR__\n+#undef __DISABLE_FXSR__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_FXSR__ */\n+\n+\n #endif /* _FXSRINTRIN_H_INCLUDED */"}, {"sha": "31dd28a94cb5ef62972e6d64afdba2459459a82d", "filename": "gcc/config/i386/i386-c.c", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97db2bf7fb10e7eb2e8224e0471b56976f133843/gcc%2Fconfig%2Fi386%2Fi386-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97db2bf7fb10e7eb2e8224e0471b56976f133843/gcc%2Fconfig%2Fi386%2Fi386-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-c.c?ref=97db2bf7fb10e7eb2e8224e0471b56976f133843", "patch": "@@ -376,20 +376,23 @@ ix86_pragma_target_parse (tree args, tree pop_target)\n \n   if (! args)\n     {\n-      cur_tree = ((pop_target)\n-\t\t  ? pop_target\n-\t\t  : target_option_default_node);\n+      cur_tree = (pop_target ? pop_target : target_option_default_node);\n       cl_target_option_restore (&global_options,\n \t\t\t\tTREE_TARGET_OPTION (cur_tree));\n     }\n   else\n     {\n       cur_tree = ix86_valid_target_attribute_tree (args);\n-      if (!cur_tree)\n-\treturn false;\n+      if (!cur_tree || cur_tree == error_mark_node)\n+       {\n+         cl_target_option_restore (&global_options,\n+                                   TREE_TARGET_OPTION (prev_tree));\n+         return false;\n+       }\n     }\n \n   target_option_current_node = cur_tree;\n+  ix86_reset_previous_fndecl ();\n \n   /* Figure out the previous/current isa, arch, tune and the differences.  */\n   prev_opt  = TREE_TARGET_OPTION (prev_tree);"}, {"sha": "09667893910e07cca015e4ad8ce99d6ab66caa20", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97db2bf7fb10e7eb2e8224e0471b56976f133843/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97db2bf7fb10e7eb2e8224e0471b56976f133843/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=97db2bf7fb10e7eb2e8224e0471b56976f133843", "patch": "@@ -40,6 +40,8 @@ extern void ix86_output_addr_diff_elt (FILE *, int, int);\n extern enum calling_abi ix86_cfun_abi (void);\n extern enum calling_abi ix86_function_type_abi (const_tree);\n \n+extern void ix86_reset_previous_fndecl (void);\n+\n #ifdef RTX_CODE\n extern int standard_80387_constant_p (rtx);\n extern const char *standard_80387_constant_opcode (rtx);"}, {"sha": "e4799b6115035968796e321dd017763c0cbd36bf", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97db2bf7fb10e7eb2e8224e0471b56976f133843/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97db2bf7fb10e7eb2e8224e0471b56976f133843/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=97db2bf7fb10e7eb2e8224e0471b56976f133843", "patch": "@@ -4649,6 +4649,13 @@ ix86_can_inline_p (tree caller, tree callee)\n /* Remember the last target of ix86_set_current_function.  */\n static GTY(()) tree ix86_previous_fndecl;\n \n+/* Invalidate ix86_previous_fndecl cache.  */\n+void\n+ix86_reset_previous_fndecl (void)\n+{\n+  ix86_previous_fndecl = NULL_TREE;\n+}\n+\n /* Establish appropriate back-end context for processing the function\n    FNDECL.  The argument might be NULL to indicate processing at top\n    level, outside of any function scope.  */"}, {"sha": "b26dc46d2562e138f3aef2dc552f45b657311f58", "filename": "gcc/config/i386/ia32intrin.h", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97db2bf7fb10e7eb2e8224e0471b56976f133843/gcc%2Fconfig%2Fi386%2Fia32intrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97db2bf7fb10e7eb2e8224e0471b56976f133843/gcc%2Fconfig%2Fi386%2Fia32intrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fia32intrin.h?ref=97db2bf7fb10e7eb2e8224e0471b56976f133843", "patch": "@@ -49,7 +49,12 @@ __bswapd (int __X)\n   return __builtin_bswap32 (__X);\n }\n \n-#ifdef __SSE4_2__\n+#ifndef __SSE4_2__\n+#pragma GCC push_options\n+#pragma GCC target(\"sse4.2\")\n+#define __DISABLE_SSE4_2__\n+#endif /* __SSE4_2__ */\n+\n /* 32bit accumulate CRC32 (polynomial 0x11EDC6F41) value.  */\n extern __inline unsigned int\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n@@ -71,7 +76,11 @@ __crc32d (unsigned int __C, unsigned int __V)\n {\n   return __builtin_ia32_crc32si (__C, __V);\n }\n-#endif /* SSE4.2 */\n+\n+#ifdef __DISABLE_SSE4_2__\n+#undef __DISABLE_SSE4_2__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_SSE4_2__ */\n \n /* 32bit popcnt */\n extern __inline int\n@@ -186,15 +195,24 @@ __bswapq (long long __X)\n   return __builtin_bswap64 (__X);\n }\n \n-#ifdef __SSE4_2__\n+#ifndef __SSE4_2__\n+#pragma GCC push_options\n+#pragma GCC target(\"sse4.2\")\n+#define __DISABLE_SSE4_2__\n+#endif /* __SSE4_2__ */\n+\n /* 64bit accumulate CRC32 (polynomial 0x11EDC6F41) value.  */\n extern __inline unsigned long long\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n __crc32q (unsigned long long __C, unsigned long long __V)\n {\n   return __builtin_ia32_crc32di (__C, __V);\n }\n-#endif\n+\n+#ifdef __DISABLE_SSE4_2__\n+#undef __DISABLE_SSE4_2__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_SSE4_2__ */\n \n /* 64bit popcnt */\n extern __inline long long"}, {"sha": "e825c34a2566b444fcb672b1fb85bf43801055c1", "filename": "gcc/config/i386/immintrin.h", "status": "modified", "additions": 30, "deletions": 39, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97db2bf7fb10e7eb2e8224e0471b56976f133843/gcc%2Fconfig%2Fi386%2Fimmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97db2bf7fb10e7eb2e8224e0471b56976f133843/gcc%2Fconfig%2Fi386%2Fimmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fimmintrin.h?ref=97db2bf7fb10e7eb2e8224e0471b56976f133843", "patch": "@@ -24,71 +24,43 @@\n #ifndef _IMMINTRIN_H_INCLUDED\n #define _IMMINTRIN_H_INCLUDED\n \n-#ifdef __MMX__\n #include <mmintrin.h>\n-#endif\n \n-#ifdef __SSE__\n #include <xmmintrin.h>\n-#endif\n \n-#ifdef __SSE2__\n #include <emmintrin.h>\n-#endif\n \n-#ifdef __SSE3__\n #include <pmmintrin.h>\n-#endif\n \n-#ifdef __SSSE3__\n #include <tmmintrin.h>\n-#endif\n \n-#if defined (__SSE4_2__) || defined (__SSE4_1__)\n #include <smmintrin.h>\n-#endif\n \n-#if defined (__AES__) || defined (__PCLMUL__)\n #include <wmmintrin.h>\n-#endif\n \n-#ifdef __AVX__\n #include <avxintrin.h>\n-#endif\n \n-#ifdef __AVX2__\n #include <avx2intrin.h>\n-#endif\n \n-#ifdef __LZCNT__\n #include <lzcntintrin.h>\n-#endif\n \n-#ifdef __BMI__\n #include <bmiintrin.h>\n-#endif\n \n-#ifdef __BMI2__\n #include <bmi2intrin.h>\n-#endif\n \n-#ifdef __FMA__\n #include <fmaintrin.h>\n-#endif\n \n-#ifdef __F16C__\n #include <f16cintrin.h>\n-#endif\n \n-#ifdef __RTM__\n #include <rtmintrin.h>\n-#endif\n \n-#ifdef __RTM__\n #include <xtestintrin.h>\n-#endif\n \n-#ifdef __RDRND__\n+#ifndef __RDRND__\n+#pragma GCC push_options\n+#pragma GCC target(\"rdrnd\")\n+#define __DISABLE_RDRND__\n+#endif /* __RDRND__ */\n extern __inline int\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _rdrand16_step (unsigned short *__P)\n@@ -102,10 +74,18 @@ _rdrand32_step (unsigned int *__P)\n {\n   return __builtin_ia32_rdrand32_step (__P);\n }\n-#endif /* __RDRND__ */\n+#ifdef __DISABLE_RDRND__\n+#undef __DISABLE_RDRND__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_RDRND__ */\n \n #ifdef  __x86_64__\n-#ifdef __FSGSBASE__\n+\n+#ifndef __FSGSBASE__\n+#pragma GCC push_options\n+#pragma GCC target(\"fsgsbase\")\n+#define __DISABLE_FSGSBASE__\n+#endif /* __FSGSBASE__ */\n extern __inline unsigned int\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _readfsbase_u32 (void)\n@@ -161,16 +141,27 @@ _writegsbase_u64 (unsigned long long __B)\n {\n   __builtin_ia32_wrgsbase64 (__B);\n }\n-#endif /* __FSGSBASE__ */\n-\n-#ifdef __RDRND__\n+#ifdef __DISABLE_FSGSBASE__\n+#undef __DISABLE_FSGSBASE__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_FSGSBASE__ */\n+\n+#ifndef __RDRND__\n+#pragma GCC push_options\n+#pragma GCC target(\"rdrnd\")\n+#define __DISABLE_RDRND__\n+#endif /* __RDRND__ */\n extern __inline int\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _rdrand64_step (unsigned long long *__P)\n {\n   return __builtin_ia32_rdrand64_step (__P);\n }\n-#endif /* __RDRND__ */\n+#ifdef __DISABLE_RDRND__\n+#undef __DISABLE_RDRND__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_RDRND__ */\n+\n #endif /* __x86_64__  */\n \n #endif /* _IMMINTRIN_H_INCLUDED */"}, {"sha": "64ba7321fd9c74c3e4fbeeaaf5aa8220d38ed952", "filename": "gcc/config/i386/lwpintrin.h", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97db2bf7fb10e7eb2e8224e0471b56976f133843/gcc%2Fconfig%2Fi386%2Flwpintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97db2bf7fb10e7eb2e8224e0471b56976f133843/gcc%2Fconfig%2Fi386%2Flwpintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Flwpintrin.h?ref=97db2bf7fb10e7eb2e8224e0471b56976f133843", "patch": "@@ -29,8 +29,10 @@\n #define _LWPINTRIN_H_INCLUDED\n \n #ifndef __LWP__\n-# error \"LWP instruction set not enabled\"\n-#else\n+#pragma GCC push_options\n+#pragma GCC target(\"lwp\")\n+#define __DISABLE_LWP__\n+#endif /* __LWP__ */\n \n extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n __llwpcb (void *pcbAddress)\n@@ -95,6 +97,9 @@ __lwpins64 (unsigned long long data2, unsigned int data1, unsigned int flags)\n #endif\n #endif\n \n-#endif /* __LWP__ */\n+#ifdef __DISABLE_LWP__\n+#undef __DISABLE_LWP__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_LWP__ */\n \n #endif /* _LWPINTRIN_H_INCLUDED */"}, {"sha": "22b9ee7999e9a2eda400891632c66934728dfa9b", "filename": "gcc/config/i386/lzcntintrin.h", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97db2bf7fb10e7eb2e8224e0471b56976f133843/gcc%2Fconfig%2Fi386%2Flzcntintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97db2bf7fb10e7eb2e8224e0471b56976f133843/gcc%2Fconfig%2Fi386%2Flzcntintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Flzcntintrin.h?ref=97db2bf7fb10e7eb2e8224e0471b56976f133843", "patch": "@@ -25,13 +25,16 @@\n # error \"Never use <lzcntintrin.h> directly; include <x86intrin.h> instead.\"\n #endif\n \n-#ifndef __LZCNT__\n-# error \"LZCNT instruction is not enabled\"\n-#endif /* __LZCNT__ */\n \n #ifndef _LZCNTINTRIN_H_INCLUDED\n #define _LZCNTINTRIN_H_INCLUDED\n \n+#ifndef __LZCNT__\n+#pragma GCC push_options\n+#pragma GCC target(\"lzcnt\")\n+#define __DISABLE_LZCNT__\n+#endif /* __LZCNT__ */\n+\n extern __inline unsigned short __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n __lzcnt16 (unsigned short __X)\n {\n@@ -64,4 +67,9 @@ _lzcnt_u64 (unsigned long long __X)\n }\n #endif\n \n+#ifdef __DISABLE_LZCNT__\n+#undef __DISABLE_LZCNT__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_LZCNT__ */\n+\n #endif /* _LZCNTINTRIN_H_INCLUDED */"}, {"sha": "093d5e77932d9163ae6175cd19e1a90737604b87", "filename": "gcc/config/i386/mm3dnow.h", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97db2bf7fb10e7eb2e8224e0471b56976f133843/gcc%2Fconfig%2Fi386%2Fmm3dnow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97db2bf7fb10e7eb2e8224e0471b56976f133843/gcc%2Fconfig%2Fi386%2Fmm3dnow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmm3dnow.h?ref=97db2bf7fb10e7eb2e8224e0471b56976f133843", "patch": "@@ -27,11 +27,15 @@\n #ifndef _MM3DNOW_H_INCLUDED\n #define _MM3DNOW_H_INCLUDED\n \n-#ifdef __3dNOW__\n-\n #include <mmintrin.h>\n #include <prfchwintrin.h>\n \n+#ifndef __3dNOW__\n+#pragma GCC push_options\n+#pragma GCC target(\"3dnow\")\n+#define __DISABLE_3dNOW__\n+#endif /* __3dNOW__ */\n+\n extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _m_femms (void)\n {\n@@ -205,6 +209,10 @@ _m_pswapd (__m64 __A)\n }\n \n #endif /* __3dNOW_A__ */\n-#endif /* __3dNOW__ */\n+\n+#ifdef __DISABLE_3dNOW__\n+#undef __DISABLE_3dNOW__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_3dNOW__ */\n \n #endif /* _MM3DNOW_H_INCLUDED */"}, {"sha": "c0729709373936ea64088b5a8aa733bf8327347a", "filename": "gcc/config/i386/mmintrin.h", "status": "modified", "additions": 29, "deletions": 7, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97db2bf7fb10e7eb2e8224e0471b56976f133843/gcc%2Fconfig%2Fi386%2Fmmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97db2bf7fb10e7eb2e8224e0471b56976f133843/gcc%2Fconfig%2Fi386%2Fmmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmintrin.h?ref=97db2bf7fb10e7eb2e8224e0471b56976f133843", "patch": "@@ -28,8 +28,11 @@\n #define _MMINTRIN_H_INCLUDED\n \n #ifndef __MMX__\n-# error \"MMX instruction set not enabled\"\n-#else\n+#pragma GCC push_options\n+#pragma GCC target(\"mmx\")\n+#define __DISABLE_MMX__\n+#endif /* __MMX__ */\n+\n /* The Intel API is flexible enough that we must allow aliasing with other\n    vector types, and their scalar components.  */\n typedef int __m64 __attribute__ ((__vector_size__ (8), __may_alias__));\n@@ -303,13 +306,21 @@ _m_paddd (__m64 __m1, __m64 __m2)\n }\n \n /* Add the 64-bit values in M1 to the 64-bit values in M2.  */\n-#ifdef __SSE2__\n+#ifndef __SSE2__\n+#pragma GCC push_options\n+#pragma GCC target(\"sse2\")\n+#define __DISABLE_SSE2__\n+#endif /* __SSE2__ */\n+\n extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_add_si64 (__m64 __m1, __m64 __m2)\n {\n   return (__m64) __builtin_ia32_paddq ((__v1di)__m1, (__v1di)__m2);\n }\n-#endif\n+#ifdef __DISABLE_SSE2__\n+#undef __DISABLE_SSE2__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_SSE2__ */\n \n /* Add the 8-bit values in M1 to the 8-bit values in M2 using signed\n    saturated arithmetic.  */\n@@ -407,13 +418,21 @@ _m_psubd (__m64 __m1, __m64 __m2)\n }\n \n /* Add the 64-bit values in M1 to the 64-bit values in M2.  */\n-#ifdef __SSE2__\n+#ifndef __SSE2__\n+#pragma GCC push_options\n+#pragma GCC target(\"sse2\")\n+#define __DISABLE_SSE2__\n+#endif /* __SSE2__ */\n+\n extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_sub_si64 (__m64 __m1, __m64 __m2)\n {\n   return (__m64) __builtin_ia32_psubq ((__v1di)__m1, (__v1di)__m2);\n }\n-#endif\n+#ifdef __DISABLE_SSE2__\n+#undef __DISABLE_SSE2__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_SSE2__ */\n \n /* Subtract the 8-bit values in M2 from the 8-bit values in M1 using signed\n    saturating arithmetic.  */\n@@ -915,6 +934,9 @@ _mm_set1_pi8 (char __b)\n {\n   return _mm_set_pi8 (__b, __b, __b, __b, __b, __b, __b, __b);\n }\n+#ifdef __DISABLE_MMX__\n+#undef __DISABLE_MMX__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_MMX__ */\n \n-#endif /* __MMX__ */\n #endif /* _MMINTRIN_H_INCLUDED */"}, {"sha": "aefe3ef9e9037351d8bbd72af0fe4a82f7fcba09", "filename": "gcc/config/i386/nmmintrin.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97db2bf7fb10e7eb2e8224e0471b56976f133843/gcc%2Fconfig%2Fi386%2Fnmmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97db2bf7fb10e7eb2e8224e0471b56976f133843/gcc%2Fconfig%2Fi386%2Fnmmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fnmmintrin.h?ref=97db2bf7fb10e7eb2e8224e0471b56976f133843", "patch": "@@ -27,11 +27,7 @@\n #ifndef _NMMINTRIN_H_INCLUDED\n #define _NMMINTRIN_H_INCLUDED\n \n-#ifndef __SSE4_2__\n-# error \"SSE4.2 instruction set not enabled\"\n-#else\n /* We just include SSE4.1 header file.  */\n #include <smmintrin.h>\n-#endif /* __SSE4_2__ */\n \n #endif /* _NMMINTRIN_H_INCLUDED */"}, {"sha": "2447d5aa31b3498881c5188653e76130b0c1ca05", "filename": "gcc/config/i386/pmmintrin.h", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97db2bf7fb10e7eb2e8224e0471b56976f133843/gcc%2Fconfig%2Fi386%2Fpmmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97db2bf7fb10e7eb2e8224e0471b56976f133843/gcc%2Fconfig%2Fi386%2Fpmmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpmmintrin.h?ref=97db2bf7fb10e7eb2e8224e0471b56976f133843", "patch": "@@ -27,13 +27,15 @@\n #ifndef _PMMINTRIN_H_INCLUDED\n #define _PMMINTRIN_H_INCLUDED\n \n-#ifndef __SSE3__\n-# error \"SSE3 instruction set not enabled\"\n-#else\n-\n /* We need definitions from the SSE2 and SSE header files*/\n #include <emmintrin.h>\n \n+#ifndef __SSE3__\n+#pragma GCC push_options\n+#pragma GCC target(\"sse3\")\n+#define __DISABLE_SSE3__\n+#endif /* __SSE3__ */\n+\n /* Additional bits in the MXCSR.  */\n #define _MM_DENORMALS_ZERO_MASK\t\t0x0040\n #define _MM_DENORMALS_ZERO_ON\t\t0x0040\n@@ -122,6 +124,9 @@ _mm_mwait (unsigned int __E, unsigned int __H)\n   __builtin_ia32_mwait (__E, __H);\n }\n \n-#endif /* __SSE3__ */\n+#ifdef __DISABLE_SSE3__\n+#undef __DISABLE_SSE3__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_SSE3__ */\n \n #endif /* _PMMINTRIN_H_INCLUDED */"}, {"sha": "ee3a8e0d0761c00112f62f55e4f82da02a688511", "filename": "gcc/config/i386/popcntintrin.h", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97db2bf7fb10e7eb2e8224e0471b56976f133843/gcc%2Fconfig%2Fi386%2Fpopcntintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97db2bf7fb10e7eb2e8224e0471b56976f133843/gcc%2Fconfig%2Fi386%2Fpopcntintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpopcntintrin.h?ref=97db2bf7fb10e7eb2e8224e0471b56976f133843", "patch": "@@ -21,13 +21,15 @@\n    see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n    <http://www.gnu.org/licenses/>.  */\n \n-#ifndef __POPCNT__\n-# error \"POPCNT instruction set not enabled\"\n-#endif /* __POPCNT__ */\n-\n #ifndef _POPCNTINTRIN_H_INCLUDED\n #define _POPCNTINTRIN_H_INCLUDED\n \n+#ifndef __POPCNT__\n+#pragma GCC push_options\n+#pragma GCC target(\"popcnt\")\n+#define __DISABLE_POPCNT__\n+#endif /* __POPCNT__ */\n+\n /* Calculate a number of bits set to 1.  */\n extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_popcnt_u32 (unsigned int __X)\n@@ -43,4 +45,9 @@ _mm_popcnt_u64 (unsigned long long __X)\n }\n #endif\n \n+#ifdef __DISABLE_POPCNT__\n+#undef __DISABLE_POPCNT__\n+#pragma GCC pop_options\n+#endif  /* __DISABLE_POPCNT__ */\n+\n #endif /* _POPCNTINTRIN_H_INCLUDED */"}, {"sha": "73aa4cac7af28a823e6bc69657716fef25a8c5d3", "filename": "gcc/config/i386/prfchwintrin.h", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97db2bf7fb10e7eb2e8224e0471b56976f133843/gcc%2Fconfig%2Fi386%2Fprfchwintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97db2bf7fb10e7eb2e8224e0471b56976f133843/gcc%2Fconfig%2Fi386%2Fprfchwintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fprfchwintrin.h?ref=97db2bf7fb10e7eb2e8224e0471b56976f133843", "patch": "@@ -26,17 +26,24 @@\n #endif\n \n \n-#if !defined (__PRFCHW__) && !defined (__3dNOW__)\n-# error \"PRFCHW instruction not enabled\"\n-#endif /* __PRFCHW__ or  __3dNOW__*/\n-\n #ifndef _PRFCHWINTRIN_H_INCLUDED\n #define _PRFCHWINTRIN_H_INCLUDED\n \n+#ifndef __PRFCHW__\n+#pragma GCC push_options\n+#pragma GCC target(\"prfchw\")\n+#define __DISABLE_PRFCHW__\n+#endif /* __PRFCHW__ */\n+\n extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _m_prefetchw (void *__P)\n {\n   __builtin_prefetch (__P, 1, 3 /* _MM_HINT_T0 */);\n }\n \n+#ifdef __DISABLE_PRFCHW__\n+#undef __DISABLE_PRFCHW__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_PRFCHW__ */\n+\n #endif /* _PRFCHWINTRIN_H_INCLUDED */"}, {"sha": "3d040ab3af65c5b0c0ed29caa4499442fa339183", "filename": "gcc/config/i386/rdseedintrin.h", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97db2bf7fb10e7eb2e8224e0471b56976f133843/gcc%2Fconfig%2Fi386%2Frdseedintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97db2bf7fb10e7eb2e8224e0471b56976f133843/gcc%2Fconfig%2Fi386%2Frdseedintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Frdseedintrin.h?ref=97db2bf7fb10e7eb2e8224e0471b56976f133843", "patch": "@@ -25,12 +25,15 @@\n # error \"Never use <rdseedintrin.h> directly; include <x86intrin.h> instead.\"\n #endif\n \n+#ifndef _RDSEEDINTRIN_H_INCLUDED\n+#define _RDSEEDINTRIN_H_INCLUDED\n+\n #ifndef __RDSEED__\n-# error \"RDSEED instruction not enabled\"\n+#pragma GCC push_options\n+#pragma GCC target(\"rdseed\")\n+#define __DISABLE_RDSEED__\n #endif /* __RDSEED__ */\n \n-#ifndef _RDSEEDINTRIN_H_INCLUDED\n-#define _RDSEEDINTRIN_H_INCLUDED\n \n extern __inline int\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n@@ -55,4 +58,9 @@ _rdseed64_step (unsigned long long *p)\n }\n #endif\n \n+#ifdef __DISABLE_RDSEED__\n+#undef __DISABLE_RDSEED__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_RDSEED__ */\n+\n #endif /* _RDSEEDINTRIN_H_INCLUDED */"}, {"sha": "eb2812fd82e9f015c5c95ec3f3d83aaa593fa337", "filename": "gcc/config/i386/rtmintrin.h", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97db2bf7fb10e7eb2e8224e0471b56976f133843/gcc%2Fconfig%2Fi386%2Frtmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97db2bf7fb10e7eb2e8224e0471b56976f133843/gcc%2Fconfig%2Fi386%2Frtmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Frtmintrin.h?ref=97db2bf7fb10e7eb2e8224e0471b56976f133843", "patch": "@@ -25,13 +25,15 @@\n # error \"Never use <rtmintrin.h> directly; include <immintrin.h> instead.\"\n #endif\n \n-#ifndef __RTM__\n-# error \"RTM instruction set not enabled\"\n-#endif /* __RTM__ */\n-\n #ifndef _RTMINTRIN_H_INCLUDED\n #define _RTMINTRIN_H_INCLUDED\n \n+#ifndef __RTM__\n+#pragma GCC push_options\n+#pragma GCC target(\"rtm\")\n+#define __DISABLE_RTM__\n+#endif /* __RTM__ */\n+\n #define _XBEGIN_STARTED\t\t(~0u)\n #define _XABORT_EXPLICIT\t(1 << 0)\n #define _XABORT_RETRY\t\t(1 << 1)\n@@ -74,4 +76,9 @@ _xabort (const unsigned int imm)\n #define _xabort(N)  __builtin_ia32_xabort (N)\n #endif /* __OPTIMIZE__ */\n \n+#ifdef __DISABLE_RTM__\n+#undef __DISABLE_RTM__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_RTM__ */\n+\n #endif /* _RTMINTRIN_H_INCLUDED */"}, {"sha": "20fa2ca2f942668215dd2c8bca108ff09b05c90d", "filename": "gcc/config/i386/smmintrin.h", "status": "modified", "additions": 41, "deletions": 9, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97db2bf7fb10e7eb2e8224e0471b56976f133843/gcc%2Fconfig%2Fi386%2Fsmmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97db2bf7fb10e7eb2e8224e0471b56976f133843/gcc%2Fconfig%2Fi386%2Fsmmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsmmintrin.h?ref=97db2bf7fb10e7eb2e8224e0471b56976f133843", "patch": "@@ -27,14 +27,16 @@\n #ifndef _SMMINTRIN_H_INCLUDED\n #define _SMMINTRIN_H_INCLUDED\n \n-#ifndef __SSE4_1__\n-# error \"SSE4.1 instruction set not enabled\"\n-#else\n-\n /* We need definitions from the SSSE3, SSE3, SSE2 and SSE header\n    files.  */\n #include <tmmintrin.h>\n \n+#ifndef __SSE4_1__\n+#pragma GCC push_options\n+#pragma GCC target(\"sse4.1\")\n+#define __DISABLE_SSE4_1__\n+#endif /* __SSE4_1__ */\n+\n /* Rounding mode macros. */\n #define _MM_FROUND_TO_NEAREST_INT\t0x00\n #define _MM_FROUND_TO_NEG_INF\t\t0x01\n@@ -582,7 +584,11 @@ _mm_stream_load_si128 (__m128i *__X)\n   return (__m128i) __builtin_ia32_movntdqa ((__v2di *) __X);\n }\n \n-#ifdef __SSE4_2__\n+#ifndef __SSE4_2__\n+#pragma GCC push_options\n+#pragma GCC target(\"sse4.2\")\n+#define __DISABLE_SSE4_2__\n+#endif /* __SSE4_2__ */\n \n /* These macros specify the source data format.  */\n #define _SIDD_UBYTE_OPS\t\t\t0x00\n@@ -792,9 +798,29 @@ _mm_cmpgt_epi64 (__m128i __X, __m128i __Y)\n   return (__m128i) __builtin_ia32_pcmpgtq ((__v2di)__X, (__v2di)__Y);\n }\n \n-#ifdef __POPCNT__\n+#ifdef __DISABLE_SSE4_2__\n+#undef __DISABLE_SSE4_2__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_SSE4_2__ */\n+\n+#ifdef __DISABLE_SSE4_1__\n+#undef __DISABLE_SSE4_1__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_SSE4_1__ */\n+\n #include <popcntintrin.h>\n-#endif\n+\n+#ifndef __SSE4_1__\n+#pragma GCC push_options\n+#pragma GCC target(\"sse4.1\")\n+#define __DISABLE_SSE4_1__\n+#endif /* __SSE4_1__ */\n+\n+#ifndef __SSE4_2__\n+#pragma GCC push_options\n+#pragma GCC target(\"sse4.2\")\n+#define __DISABLE_SSE4_2__\n+#endif /* __SSE4_1__ */\n \n /* Accumulate CRC32 (polynomial 0x11EDC6F41) value.  */\n extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n@@ -823,8 +849,14 @@ _mm_crc32_u64 (unsigned long long __C, unsigned long long __V)\n }\n #endif\n \n-#endif /* __SSE4_2__ */\n+#ifdef __DISABLE_SSE4_2__\n+#undef __DISABLE_SSE4_2__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_SSE4_2__ */\n \n-#endif /* __SSE4_1__ */\n+#ifdef __DISABLE_SSE4_1__\n+#undef __DISABLE_SSE4_1__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_SSE4_1__ */\n \n #endif /* _SMMINTRIN_H_INCLUDED */"}, {"sha": "9235d6c713d9c9de7730ed8322df21f408eb76e5", "filename": "gcc/config/i386/tbmintrin.h", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97db2bf7fb10e7eb2e8224e0471b56976f133843/gcc%2Fconfig%2Fi386%2Ftbmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97db2bf7fb10e7eb2e8224e0471b56976f133843/gcc%2Fconfig%2Fi386%2Ftbmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ftbmintrin.h?ref=97db2bf7fb10e7eb2e8224e0471b56976f133843", "patch": "@@ -25,13 +25,15 @@\n # error \"Never use <tbmintrin.h> directly; include <x86intrin.h> instead.\"\n #endif\n \n-#ifndef __TBM__\n-# error \"TBM instruction set not enabled\"\n-#endif /* __TBM__ */\n-\n #ifndef _TBMINTRIN_H_INCLUDED\n #define _TBMINTRIN_H_INCLUDED\n \n+#ifndef __TBM__\n+#pragma GCC push_options\n+#pragma GCC target(\"tbm\")\n+#define __DISABLE_TBM__\n+#endif /* __TBM__ */\n+\n #ifdef __OPTIMIZE__\n extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n __bextri_u32 (unsigned int __X, const unsigned int __I)\n@@ -169,4 +171,10 @@ __tzmsk_u64 (unsigned long long __X)\n \n \n #endif /* __x86_64__  */\n+\n+#ifdef __DISABLE_TBM__\n+#undef __DISABLE_TBM__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_TBM__ */\n+\n #endif /* _TBMINTRIN_H_INCLUDED */"}, {"sha": "3f63b4f89343fa70c5ab68fd1bd1b2d9d9b2a373", "filename": "gcc/config/i386/tmmintrin.h", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97db2bf7fb10e7eb2e8224e0471b56976f133843/gcc%2Fconfig%2Fi386%2Ftmmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97db2bf7fb10e7eb2e8224e0471b56976f133843/gcc%2Fconfig%2Fi386%2Ftmmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ftmmintrin.h?ref=97db2bf7fb10e7eb2e8224e0471b56976f133843", "patch": "@@ -27,13 +27,15 @@\n #ifndef _TMMINTRIN_H_INCLUDED\n #define _TMMINTRIN_H_INCLUDED\n \n-#ifndef __SSSE3__\n-# error \"SSSE3 instruction set not enabled\"\n-#else\n-\n /* We need definitions from the SSE3, SSE2 and SSE header files*/\n #include <pmmintrin.h>\n \n+#ifndef __SSSE3__\n+#pragma GCC push_options\n+#pragma GCC target(\"ssse3\")\n+#define __DISABLE_SSSE3__\n+#endif /* __SSSE3__ */\n+\n extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_hadd_epi16 (__m128i __X, __m128i __Y)\n {\n@@ -239,6 +241,9 @@ _mm_abs_pi32 (__m64 __X)\n   return (__m64) __builtin_ia32_pabsd ((__v2si)__X);\n }\n \n-#endif /* __SSSE3__ */\n+#ifdef __DISABLE_SSSE3__\n+#undef __DISABLE_SSSE3__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_SSSE3__ */\n \n #endif /* _TMMINTRIN_H_INCLUDED */"}, {"sha": "defcfd82acccd4ccd3c8ae3c84dcaf2c72494ffb", "filename": "gcc/config/i386/wmmintrin.h", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97db2bf7fb10e7eb2e8224e0471b56976f133843/gcc%2Fconfig%2Fi386%2Fwmmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97db2bf7fb10e7eb2e8224e0471b56976f133843/gcc%2Fconfig%2Fi386%2Fwmmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fwmmintrin.h?ref=97db2bf7fb10e7eb2e8224e0471b56976f133843", "patch": "@@ -30,13 +30,14 @@\n /* We need definitions from the SSE2 header file.  */\n #include <emmintrin.h>\n \n-#if !defined (__AES__) && !defined (__PCLMUL__)\n-# error \"AES/PCLMUL instructions not enabled\"\n-#else\n-\n /* AES */\n \n-#ifdef __AES__\n+#ifndef __AES__\n+#pragma GCC push_options\n+#pragma GCC target(\"aes\")\n+#define __DISABLE_AES__\n+#endif /* __AES__ */\n+\n /* Performs 1 round of AES decryption of the first m128i using \n    the second m128i as a round key.  */\n extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n@@ -92,11 +93,20 @@ _mm_aeskeygenassist_si128 (__m128i __X, const int __C)\n   ((__m128i) __builtin_ia32_aeskeygenassist128 ((__v2di)(__m128i)(X),\t\\\n \t\t\t\t\t\t(int)(C)))\n #endif\n-#endif  /* __AES__ */\n+\n+#ifdef __DISABLE_AES__\n+#undef __DISABLE_AES__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_AES__ */\n \n /* PCLMUL */\n \n-#ifdef __PCLMUL__\n+#ifndef __PCLMUL__\n+#pragma GCC push_options\n+#pragma GCC target(\"pclmul\")\n+#define __DISABLE_PCLMUL__\n+#endif /* __PCLMUL__ */\n+\n /* Performs carry-less integer multiplication of 64-bit halves of\n    128-bit input operands.  The third parameter inducates which 64-bit\n    haves of the input parameters v1 and v2 should be used. It must be\n@@ -113,8 +123,10 @@ _mm_clmulepi64_si128 (__m128i __X, __m128i __Y, const int __I)\n   ((__m128i) __builtin_ia32_pclmulqdq128 ((__v2di)(__m128i)(X),\t\t\\\n \t\t\t\t\t  (__v2di)(__m128i)(Y), (int)(I)))\n #endif\n-#endif  /* __PCLMUL__  */\n \n-#endif /* __AES__/__PCLMUL__ */\n+#ifdef __DISABLE_PCLMUL__\n+#undef __DISABLE_PCLMUL__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_PCLMUL__ */\n \n #endif /* _WMMINTRIN_H_INCLUDED */"}, {"sha": "46ced969a9fc3615989b6a272bbcea1ffd5dc9dc", "filename": "gcc/config/i386/x86intrin.h", "status": "modified", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97db2bf7fb10e7eb2e8224e0471b56976f133843/gcc%2Fconfig%2Fi386%2Fx86intrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97db2bf7fb10e7eb2e8224e0471b56976f133843/gcc%2Fconfig%2Fi386%2Fx86intrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx86intrin.h?ref=97db2bf7fb10e7eb2e8224e0471b56976f133843", "patch": "@@ -26,96 +26,52 @@\n \n #include <ia32intrin.h>\n \n-#ifdef __MMX__\n #include <mmintrin.h>\n-#endif\n \n-#ifdef __SSE__\n #include <xmmintrin.h>\n-#endif\n \n-#ifdef __SSE2__\n #include <emmintrin.h>\n-#endif\n \n-#ifdef __SSE3__\n #include <pmmintrin.h>\n-#endif\n \n-#ifdef __SSSE3__\n #include <tmmintrin.h>\n-#endif\n \n-#ifdef __SSE4A__\n #include <ammintrin.h>\n-#endif\n \n-#if defined (__SSE4_2__) || defined (__SSE4_1__)\n #include <smmintrin.h>\n-#endif\n \n-#if defined (__AES__) || defined (__PCLMUL__)\n #include <wmmintrin.h>\n-#endif\n \n /* For including AVX instructions */\n #include <immintrin.h>\n \n-#ifdef __3dNOW__\n #include <mm3dnow.h>\n-#endif\n \n-#ifdef __FMA4__\n #include <fma4intrin.h>\n-#endif\n \n-#ifdef __XOP__\n #include <xopintrin.h>\n-#endif\n \n-#ifdef __LWP__\n #include <lwpintrin.h>\n-#endif\n \n-#ifdef __BMI__\n #include <bmiintrin.h>\n-#endif\n \n-#ifdef __BMI2__\n #include <bmi2intrin.h>\n-#endif\n \n-#ifdef __TBM__\n #include <tbmintrin.h>\n-#endif\n \n-#ifdef __LZCNT__\n #include <lzcntintrin.h>\n-#endif\n \n-#ifdef __POPCNT__\n #include <popcntintrin.h>\n-#endif\n \n-#ifdef __RDSEED__\n #include <rdseedintrin.h>\n-#endif\n \n-#ifdef __PRFCHW__\n #include <prfchwintrin.h>\n-#endif\n \n-#ifdef __FXSR__\n #include <fxsrintrin.h>\n-#endif\n \n-#ifdef __XSAVE__\n #include <xsaveintrin.h>\n-#endif\n \n-#ifdef __XSAVEOPT__\n #include <xsaveoptintrin.h>\n-#endif\n \n #include <adxintrin.h>\n "}, {"sha": "14d1e7fe2b0343d7cdb8b8b26809f613074c57b4", "filename": "gcc/config/i386/xmmintrin.h", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97db2bf7fb10e7eb2e8224e0471b56976f133843/gcc%2Fconfig%2Fi386%2Fxmmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97db2bf7fb10e7eb2e8224e0471b56976f133843/gcc%2Fconfig%2Fi386%2Fxmmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fxmmintrin.h?ref=97db2bf7fb10e7eb2e8224e0471b56976f133843", "patch": "@@ -27,16 +27,18 @@\n #ifndef _XMMINTRIN_H_INCLUDED\n #define _XMMINTRIN_H_INCLUDED\n \n-#ifndef __SSE__\n-# error \"SSE instruction set not enabled\"\n-#else\n-\n /* We need type definitions from the MMX header file.  */\n #include <mmintrin.h>\n \n /* Get _mm_malloc () and _mm_free ().  */\n #include <mm_malloc.h>\n \n+#ifndef __SSE__\n+#pragma GCC push_options\n+#pragma GCC target(\"sse\")\n+#define __DISABLE_SSE__\n+#endif /* __SSE__ */\n+\n /* The Intel API is flexible enough that we must allow aliasing with other\n    vector types, and their scalar components.  */\n typedef float __m128 __attribute__ ((__vector_size__ (16), __may_alias__));\n@@ -1242,9 +1244,11 @@ do {\t\t\t\t\t\t\t\t\t\\\n } while (0)\n \n /* For backward source compatibility.  */\n-#ifdef __SSE2__\n # include <emmintrin.h>\n-#endif\n \n-#endif /* __SSE__ */\n+#ifdef __DISABLE_SSE__\n+#undef __DISABLE_SSE__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_SSE__ */\n+\n #endif /* _XMMINTRIN_H_INCLUDED */"}, {"sha": "e0d148a081855c3844df023ab83210b55bd299bb", "filename": "gcc/config/i386/xopintrin.h", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97db2bf7fb10e7eb2e8224e0471b56976f133843/gcc%2Fconfig%2Fi386%2Fxopintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97db2bf7fb10e7eb2e8224e0471b56976f133843/gcc%2Fconfig%2Fi386%2Fxopintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fxopintrin.h?ref=97db2bf7fb10e7eb2e8224e0471b56976f133843", "patch": "@@ -28,12 +28,14 @@\n #ifndef _XOPMMINTRIN_H_INCLUDED\n #define _XOPMMINTRIN_H_INCLUDED\n \n-#ifndef __XOP__\n-# error \"XOP instruction set not enabled\"\n-#else\n-\n #include <fma4intrin.h>\n \n+#ifndef __XOP__\n+#pragma GCC push_options\n+#pragma GCC target(\"xop\")\n+#define __DISABLE_XOP__\n+#endif /* __XOP__ */\n+\n /* Integer multiply/add intructions. */\n extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_maccs_epi16(__m128i __A, __m128i __B, __m128i __C)\n@@ -830,6 +832,9 @@ _mm256_permute2_ps (__m256 __X, __m256 __Y, __m256i __C, const int __I)\n  \t\t\t\t\t  (int)(I)))\n #endif /* __OPTIMIZE__ */\n \n-#endif /* __XOP__ */\n+#ifdef __DISABLE_XOP__\n+#undef __DISABLE_XOP__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_XOP__ */\n \n #endif /* _XOPMMINTRIN_H_INCLUDED */"}, {"sha": "31c17b1d2c52ba4535b9d6d28d83590de8cefb97", "filename": "gcc/config/i386/xsaveintrin.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97db2bf7fb10e7eb2e8224e0471b56976f133843/gcc%2Fconfig%2Fi386%2Fxsaveintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97db2bf7fb10e7eb2e8224e0471b56976f133843/gcc%2Fconfig%2Fi386%2Fxsaveintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fxsaveintrin.h?ref=97db2bf7fb10e7eb2e8224e0471b56976f133843", "patch": "@@ -28,6 +28,12 @@\n #ifndef _XSAVEINTRIN_H_INCLUDED\n #define _XSAVEINTRIN_H_INCLUDED\n \n+#ifndef __XSAVE__\n+#pragma GCC push_options\n+#pragma GCC target(\"xsave\")\n+#define __DISABLE_XSAVE__\n+#endif /* __XSAVE__ */\n+\n extern __inline void\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _xsave (void *__P, long long __M)\n@@ -58,4 +64,9 @@ _xrstor64 (void *__P, long long __M)\n }\n #endif\n \n+#ifdef __DISABLE_XSAVE__\n+#undef __DISABLE_XSAVE__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_XSAVE__ */\n+\n #endif /* _XSAVEINTRIN_H_INCLUDED */"}, {"sha": "aa9538da33e3e230735610491573a95bf6c8849e", "filename": "gcc/config/i386/xsaveoptintrin.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97db2bf7fb10e7eb2e8224e0471b56976f133843/gcc%2Fconfig%2Fi386%2Fxsaveoptintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97db2bf7fb10e7eb2e8224e0471b56976f133843/gcc%2Fconfig%2Fi386%2Fxsaveoptintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fxsaveoptintrin.h?ref=97db2bf7fb10e7eb2e8224e0471b56976f133843", "patch": "@@ -28,6 +28,12 @@\n #ifndef _XSAVEOPTINTRIN_H_INCLUDED\n #define _XSAVEOPTINTRIN_H_INCLUDED\n \n+#ifndef __XSAVEOPT__\n+#pragma GCC push_options\n+#pragma GCC target(\"xsaveopt\")\n+#define __DISABLE_XSAVEOPT__\n+#endif /* __XSAVEOPT__ */\n+\n extern __inline void\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _xsaveopt (void *__P, long long __M)\n@@ -44,4 +50,9 @@ _xsaveopt64 (void *__P, long long __M)\n }\n #endif\n \n+#ifdef __DISABLE_XSAVEOPT__\n+#undef __DISABLE_XSAVEOPT__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_XSAVEOPT__ */\n+\n #endif /* _XSAVEOPTINTRIN_H_INCLUDED */"}, {"sha": "a6afa896b4fe1742febe6c15b82642e06bcfb2f5", "filename": "gcc/config/i386/xtestintrin.h", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97db2bf7fb10e7eb2e8224e0471b56976f133843/gcc%2Fconfig%2Fi386%2Fxtestintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97db2bf7fb10e7eb2e8224e0471b56976f133843/gcc%2Fconfig%2Fi386%2Fxtestintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fxtestintrin.h?ref=97db2bf7fb10e7eb2e8224e0471b56976f133843", "patch": "@@ -25,13 +25,15 @@\n # error \"Never use <xtestintrin.h> directly; include <immintrin.h> instead.\"\n #endif\n \n-#ifndef __RTM__\n-# error \"RTM instruction set not enabled\"\n-#endif /* __RTM__ */\n-\n #ifndef _XTESTINTRIN_H_INCLUDED\n #define _XTESTINTRIN_H_INCLUDED\n \n+#ifndef __RTM__\n+#pragma GCC push_options\n+#pragma GCC target(\"rtm\")\n+#define __DISABLE_RTM__\n+#endif /* __RTM__ */\n+\n /* Return non-zero if the instruction executes inside an RTM or HLE code\n    region.  Return zero otherwise.   */\n extern __inline int\n@@ -41,4 +43,9 @@ _xtest (void)\n   return __builtin_ia32_xtest ();\n }\n \n+#ifdef __DISABLE_RTM__\n+#undef __DISABLE_RTM__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_RTM__ */\n+\n #endif /* _XTESTINTRIN_H_INCLUDED */"}, {"sha": "3473c697e8e230658a60172321a3c591d35d5b00", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97db2bf7fb10e7eb2e8224e0471b56976f133843/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97db2bf7fb10e7eb2e8224e0471b56976f133843/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=97db2bf7fb10e7eb2e8224e0471b56976f133843", "patch": "@@ -1,3 +1,14 @@\n+2013-06-23  Sriraman Tallam  <tmsriram@google.com>\n+\n+\t* testsuite/gcc.target/i386/intrinsics_1.c: New test.\n+\t* testsuite/gcc.target/i386/intrinsics_2.c: Ditto.\n+\t* testsuite/gcc.target/i386/intrinsics_3.c: Ditto.\n+\t* testsuite/gcc.target/i386/intrinsics_4.c: Ditto.\n+\t* testsuite/gcc.target/i386/intrinsics_5.c: Ditto.\n+\t* testsuite/gcc.target/i386/intrinsics_6.c: Ditto.\n+\t* testsuite/gcc.target/i386/avx-1.c: Provide macros for builtins\n+\tneeding immediate arguments in f16cintrin.h and rtmintrin.h.\n+\n 2013-06-21  Tobias Burnus  <burnus@net-b.de>\n \n \t* gfortran.dg/finalize_17.f90: New."}, {"sha": "7496746aec8edcc60bb7586309e9ef753e343b2e", "filename": "gcc/testsuite/gcc.target/i386/avx-1.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97db2bf7fb10e7eb2e8224e0471b56976f133843/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97db2bf7fb10e7eb2e8224e0471b56976f133843/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c?ref=97db2bf7fb10e7eb2e8224e0471b56976f133843", "patch": "@@ -159,6 +159,13 @@\n #define __builtin_ia32_vec_ext_v4hi(A, N) __builtin_ia32_vec_ext_v4hi(A, 0)\n #define __builtin_ia32_shufps(A, B, N) __builtin_ia32_shufps(A, B, 0)\n \n+/* f16cintrin.h */\n+#define __builtin_ia32_vcvtps2ph(A, I) __builtin_ia32_vcvtps2ph(A, 0)\n+#define __builtin_ia32_vcvtps2ph256(A, I) __builtin_ia32_vcvtps2ph256(A, 0)\n+\n+/* rtmintrin.h */\n+#define __builtin_ia32_xabort(I) __builtin_ia32_xabort(0)\n+\n #include <wmmintrin.h>\n #include <immintrin.h>\n #include <mm3dnow.h>"}, {"sha": "802979f3b8b0f951dfa4df69075d9a72b00ec8ab", "filename": "gcc/testsuite/gcc.target/i386/intrinsics_1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97db2bf7fb10e7eb2e8224e0471b56976f133843/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fintrinsics_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97db2bf7fb10e7eb2e8224e0471b56976f133843/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fintrinsics_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fintrinsics_1.c?ref=97db2bf7fb10e7eb2e8224e0471b56976f133843", "patch": "@@ -0,0 +1,13 @@\n+/* Test case to check if intrinsics and function specific target\n+   optimizations work together.  Check by including x86intrin.h  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msse -mno-sse4.1 -mno-sse4.2\" } */\n+\n+#include <x86intrin.h>\n+\n+__attribute__((target(\"sse4.2\")))\n+__m128i foo(__m128i *V)\n+{\n+    return _mm_stream_load_si128(V);\n+}"}, {"sha": "329ac8864c7c218fb51e1437b81099ba4303ddbd", "filename": "gcc/testsuite/gcc.target/i386/intrinsics_2.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97db2bf7fb10e7eb2e8224e0471b56976f133843/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fintrinsics_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97db2bf7fb10e7eb2e8224e0471b56976f133843/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fintrinsics_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fintrinsics_2.c?ref=97db2bf7fb10e7eb2e8224e0471b56976f133843", "patch": "@@ -0,0 +1,13 @@\n+/* Test case to check if intrinsics and function specific target\n+   optimizations work together.  Check by including immintrin.h  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msse -mno-sse4.1\" } */\n+\n+#include <immintrin.h>\n+\n+__attribute__((target(\"sse4.2\")))\n+__m128i foo(__m128i *V)\n+{\n+    return _mm_stream_load_si128(V);\n+}"}, {"sha": "e5ea8a967ec3bf47b014ac154938e04cfdba263c", "filename": "gcc/testsuite/gcc.target/i386/intrinsics_3.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97db2bf7fb10e7eb2e8224e0471b56976f133843/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fintrinsics_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97db2bf7fb10e7eb2e8224e0471b56976f133843/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fintrinsics_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fintrinsics_3.c?ref=97db2bf7fb10e7eb2e8224e0471b56976f133843", "patch": "@@ -0,0 +1,15 @@\n+/* Test case to check if intrinsics and function specific target\n+   optimizations work together.  Check if the POPCNT specific intrinsics\n+   in included with popcntintrin.h get enabled by directly including\n+   popcntintrin.h  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msse -mno-sse4.1 -mno-sse4.2 -mno-popcnt\" } */\n+\n+#include <popcntintrin.h>\n+\n+__attribute__((target(\"popcnt\")))\n+long long foo(unsigned long long X)\n+{\n+    return _mm_popcnt_u64 (X);\n+}"}, {"sha": "4e124c90ef8425c2a2802c0fab60476d46f62f98", "filename": "gcc/testsuite/gcc.target/i386/intrinsics_4.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97db2bf7fb10e7eb2e8224e0471b56976f133843/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fintrinsics_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97db2bf7fb10e7eb2e8224e0471b56976f133843/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fintrinsics_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fintrinsics_4.c?ref=97db2bf7fb10e7eb2e8224e0471b56976f133843", "patch": "@@ -0,0 +1,14 @@\n+/* Test case to check if AVX intrinsics and function specific target\n+   optimizations work together.  Check by including immintrin.h  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msse -mno-avx\" } */\n+\n+#include <immintrin.h>\n+\n+__m256 a[10], b[10], c[10];\n+void __attribute__((target (\"avx\")))\n+foo (void)\n+{\n+  a[0] = _mm256_and_ps (b[0], c[0]);\n+}"}, {"sha": "e4486b17acd5598d693b5ce040ccac3dbb3776bc", "filename": "gcc/testsuite/gcc.target/i386/intrinsics_5.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97db2bf7fb10e7eb2e8224e0471b56976f133843/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fintrinsics_5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97db2bf7fb10e7eb2e8224e0471b56976f133843/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fintrinsics_5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fintrinsics_5.c?ref=97db2bf7fb10e7eb2e8224e0471b56976f133843", "patch": "@@ -0,0 +1,16 @@\n+/* Test case to check if intrinsics and function specific target\n+   optimizations work together.  Check if an error is issued in\n+   -O2 mode when foo calls an intrinsic without the right target\n+   attribute.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msse -mno-sse4.1 -mno-sse4.2\" } */\n+\n+#include <smmintrin.h>\n+\n+__m128i foo(__m128i *V)\n+{\n+    return _mm_stream_load_si128(V); /* { dg-error \"called from here\" } */\n+}\n+\n+/* { dg-prune-output \".*inlining failed.*\" }  */"}, {"sha": "eea22bb79517d4da2ee2740d6e19e127cf170740", "filename": "gcc/testsuite/gcc.target/i386/intrinsics_6.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97db2bf7fb10e7eb2e8224e0471b56976f133843/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fintrinsics_6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97db2bf7fb10e7eb2e8224e0471b56976f133843/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fintrinsics_6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fintrinsics_6.c?ref=97db2bf7fb10e7eb2e8224e0471b56976f133843", "patch": "@@ -0,0 +1,16 @@\n+/* Test case to check if intrinsics and function specific target\n+   optimizations work together.  Check if an error is issued in\n+   -O0 mode when foo calls an intrinsic without the right target\n+   attribute.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O0 -msse -mno-sse4.1 -mno-sse4.2\" } */\n+\n+#include <smmintrin.h>\n+\n+__m128i foo(__m128i *V)\n+{\n+    return _mm_stream_load_si128(V); /* { dg-error \"called from here\" } */\n+}\n+\n+/* { dg-prune-output \".*inlining failed.*\" }  */"}]}