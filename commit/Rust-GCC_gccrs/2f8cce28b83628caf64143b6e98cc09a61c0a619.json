{"sha": "2f8cce28b83628caf64143b6e98cc09a61c0a619", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmY4Y2NlMjhiODM2MjhjYWY2NDE0M2I2ZTk4Y2MwOWE2MWMwYTYxOQ==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2009-05-17T12:47:00Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2009-05-17T12:47:00Z"}, "message": "re PR fortran/36260 (Audit intrinsic.texi and check whether keyword= names match)\n\n\tPR fortran/36260\n\n\t* intrinsic.c (add_functions, add_subroutines): Fix argument\n\tnames and wrap long lines.\n\t* intrinsic.texi: Fix documentation and argument names of\n\tLOG_GAMMA, DATAN2, DBESJN, DTIME, ETIME, FSTAT, STAT, LSTAT,\n\tGET_COMMAND, IDATE, LTIME, MOVE_ALLOC, NINT, OR, PRODUCT,\n\tSUM, RAND, RANDOM_SEED, REAL, SELECTED_INT_KIND,\n\tSELECTED_REAL_KIND and XOR.\n\nFrom-SVN: r147633", "tree": {"sha": "2baa5fd326cb3fc365a22171422fa016788d6f35", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2baa5fd326cb3fc365a22171422fa016788d6f35"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2f8cce28b83628caf64143b6e98cc09a61c0a619", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f8cce28b83628caf64143b6e98cc09a61c0a619", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f8cce28b83628caf64143b6e98cc09a61c0a619", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f8cce28b83628caf64143b6e98cc09a61c0a619/comments", "author": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25e8fde82b0dd5f7a6024a2a7a7ec7f100c3ed8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25e8fde82b0dd5f7a6024a2a7a7ec7f100c3ed8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25e8fde82b0dd5f7a6024a2a7a7ec7f100c3ed8a"}], "stats": {"total": 374, "additions": 204, "deletions": 170}, "files": [{"sha": "b799e51d68ff2405b6ef0b0e5909e5c098afd028", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f8cce28b83628caf64143b6e98cc09a61c0a619/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f8cce28b83628caf64143b6e98cc09a61c0a619/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=2f8cce28b83628caf64143b6e98cc09a61c0a619", "patch": "@@ -1,3 +1,14 @@\n+2009-05-17  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/36260\n+\t* intrinsic.c (add_functions, add_subroutines): Fix argument\n+\tnames and wrap long lines.\n+\t* intrinsic.texi: Fix documentation and argument names of\n+\tLOG_GAMMA, DATAN2, DBESJN, DTIME, ETIME, FSTAT, STAT, LSTAT,\n+\tGET_COMMAND, IDATE, LTIME, MOVE_ALLOC, NINT, OR, PRODUCT,\n+\tSUM, RAND, RANDOM_SEED, REAL, SELECTED_INT_KIND,\n+\tSELECTED_REAL_KIND and XOR.\n+\n 2009-05-16  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \tPR fortran/33197"}, {"sha": "99cf7a9433202ccab7ac82660679c56ef8621d4f", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 50, "deletions": 47, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f8cce28b83628caf64143b6e98cc09a61c0a619/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f8cce28b83628caf64143b6e98cc09a61c0a619/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=2f8cce28b83628caf64143b6e98cc09a61c0a619", "patch": "@@ -962,7 +962,8 @@ add_functions (void)\n     *x = \"x\", *sh = \"shift\", *stg = \"string\", *ssg = \"substring\",\n     *y = \"y\", *sz = \"size\", *sta = \"string_a\", *stb = \"string_b\",\n     *z = \"z\", *ln = \"len\", *ut = \"unit\", *han = \"handler\",\n-    *num = \"number\", *tm = \"time\", *nm = \"name\", *md = \"mode\";\n+    *num = \"number\", *tm = \"time\", *nm = \"name\", *md = \"mode\",\n+    *vl = \"values\", *p1 = \"path1\", *p2 = \"path2\", *com = \"command\";\n \n   int di, dr, dd, dl, dc, dz, ii;\n \n@@ -1500,9 +1501,9 @@ add_functions (void)\n \n   make_generic (\"fraction\", GFC_ISYM_FRACTION, GFC_STD_F95);\n \n-  add_sym_2 (\"fstat\", GFC_ISYM_FSTAT, NO_CLASS, ACTUAL_NO, BT_INTEGER, di, GFC_STD_GNU,\n-\t     gfc_check_fstat, NULL, gfc_resolve_fstat,\n-\t     a, BT_INTEGER, di, REQUIRED, b, BT_INTEGER, di, REQUIRED);\n+  add_sym_2 (\"fstat\", GFC_ISYM_FSTAT, NO_CLASS, ACTUAL_NO, BT_INTEGER, di,\n+\t     GFC_STD_GNU, gfc_check_fstat, NULL, gfc_resolve_fstat,\n+\t     ut, BT_INTEGER, di, REQUIRED, vl, BT_INTEGER, di, REQUIRED);\n \n   make_generic (\"fstat\", GFC_ISYM_FSTAT, GFC_STD_GNU);\n \n@@ -1851,9 +1852,9 @@ add_functions (void)\n \n   make_generic (\"llt\", GFC_ISYM_LLT, GFC_STD_F77);\n \n-  add_sym_2 (\"link\", GFC_ISYM_LINK, NO_CLASS, ACTUAL_NO, BT_INTEGER, di, GFC_STD_GNU,\n-\t     gfc_check_link, NULL, gfc_resolve_link,\n-\t     a, BT_CHARACTER, dc, REQUIRED, b, BT_CHARACTER, dc, REQUIRED);\n+  add_sym_2 (\"link\", GFC_ISYM_LINK, NO_CLASS, ACTUAL_NO, BT_INTEGER, di,\n+\t     GFC_STD_GNU, gfc_check_link, NULL, gfc_resolve_link,\n+\t     p1, BT_CHARACTER, dc, REQUIRED, p2, BT_CHARACTER, dc, REQUIRED);\n \n   make_generic (\"link\", GFC_ISYM_LINK, GFC_STD_GNU);\n   \n@@ -1901,15 +1902,15 @@ add_functions (void)\n \n   make_generic (\"logical\", GFC_ISYM_LOGICAL, GFC_STD_F95);\n \n-  add_sym_2 (\"lstat\", GFC_ISYM_LSTAT, NO_CLASS, ACTUAL_NO, BT_INTEGER, di, GFC_STD_GNU,\n-\t     gfc_check_stat, NULL, gfc_resolve_lstat,\n-\t     a, BT_CHARACTER, dc, REQUIRED, b, BT_INTEGER, di, REQUIRED);\n+  add_sym_2 (\"lstat\", GFC_ISYM_LSTAT, NO_CLASS, ACTUAL_NO, BT_INTEGER, di,\n+\t     GFC_STD_GNU, gfc_check_stat, NULL, gfc_resolve_lstat,\n+\t     nm, BT_CHARACTER, dc, REQUIRED, vl, BT_INTEGER, di, REQUIRED);\n \n   make_generic (\"lstat\", GFC_ISYM_LSTAT, GFC_STD_GNU);\n \n-  add_sym_1 (\"malloc\", GFC_ISYM_MALLOC, NO_CLASS, ACTUAL_NO, BT_INTEGER, ii, GFC_STD_GNU,\n-\t     gfc_check_malloc, NULL, gfc_resolve_malloc, a, BT_INTEGER, di,\n-\t     REQUIRED);\n+  add_sym_1 (\"malloc\", GFC_ISYM_MALLOC, NO_CLASS, ACTUAL_NO, BT_INTEGER, ii,\n+\t     GFC_STD_GNU, gfc_check_malloc, NULL, gfc_resolve_malloc,\n+\t     sz, BT_INTEGER, di, REQUIRED);\n \n   make_generic (\"malloc\", GFC_ISYM_MALLOC, GFC_STD_GNU);\n \n@@ -1968,13 +1969,13 @@ add_functions (void)\n \n   make_generic (\"maxval\", GFC_ISYM_MAXVAL, GFC_STD_F95);\n \n-  add_sym_0 (\"mclock\", GFC_ISYM_MCLOCK, NO_CLASS, ACTUAL_NO, BT_INTEGER, di, GFC_STD_GNU,\n-\t     NULL, NULL, gfc_resolve_mclock);\n+  add_sym_0 (\"mclock\", GFC_ISYM_MCLOCK, NO_CLASS, ACTUAL_NO, BT_INTEGER, di,\n+\t     GFC_STD_GNU, NULL, NULL, gfc_resolve_mclock);\n \n   make_generic (\"mclock\", GFC_ISYM_MCLOCK, GFC_STD_GNU);\n \n-  add_sym_0 (\"mclock8\", GFC_ISYM_MCLOCK8, NO_CLASS, ACTUAL_NO, BT_INTEGER, di, GFC_STD_GNU,\n-\t     NULL, NULL, gfc_resolve_mclock8);\n+  add_sym_0 (\"mclock8\", GFC_ISYM_MCLOCK8, NO_CLASS, ACTUAL_NO, BT_INTEGER, di,\n+\t     GFC_STD_GNU, NULL, NULL, gfc_resolve_mclock8);\n \n   make_generic (\"mclock8\", GFC_ISYM_MCLOCK8, GFC_STD_GNU);\n \n@@ -2156,9 +2157,9 @@ add_functions (void)\n \n   make_generic (\"real\", GFC_ISYM_REAL, GFC_STD_F77);\n \n-  add_sym_2 (\"rename\", GFC_ISYM_RENAME, NO_CLASS, ACTUAL_NO, BT_INTEGER, di, GFC_STD_GNU,\n-\t     gfc_check_rename, NULL, gfc_resolve_rename,\n-\t     a, BT_CHARACTER, dc, REQUIRED, b, BT_CHARACTER, dc, REQUIRED);\n+  add_sym_2 (\"rename\", GFC_ISYM_RENAME, NO_CLASS, ACTUAL_NO, BT_INTEGER, di,\n+\t     GFC_STD_GNU, gfc_check_rename, NULL, gfc_resolve_rename,\n+\t     p1, BT_CHARACTER, dc, REQUIRED, p2, BT_CHARACTER, dc, REQUIRED);\n \n   make_generic (\"rename\", GFC_ISYM_RENAME, GFC_STD_GNU);\n   \n@@ -2339,9 +2340,9 @@ add_functions (void)\n \n   make_generic (\"sqrt\", GFC_ISYM_SQRT, GFC_STD_F77);\n \n-  add_sym_2 (\"stat\", GFC_ISYM_STAT, NO_CLASS, ACTUAL_NO, BT_INTEGER, di, GFC_STD_GNU,\n-\t     gfc_check_stat, NULL, gfc_resolve_stat,\n-\t     a, BT_CHARACTER, dc, REQUIRED, b, BT_INTEGER, di, REQUIRED);\n+  add_sym_2 (\"stat\", GFC_ISYM_STAT, NO_CLASS, ACTUAL_NO, BT_INTEGER, di,\n+\t     GFC_STD_GNU, gfc_check_stat, NULL, gfc_resolve_stat,\n+\t     nm, BT_CHARACTER, dc, REQUIRED, vl, BT_INTEGER, di, REQUIRED);\n \n   make_generic (\"stat\", GFC_ISYM_STAT, GFC_STD_GNU);\n \n@@ -2352,15 +2353,15 @@ add_functions (void)\n \n   make_generic (\"sum\", GFC_ISYM_SUM, GFC_STD_F95);\n \n-  add_sym_2 (\"symlnk\", GFC_ISYM_SYMLNK, NO_CLASS, ACTUAL_NO, BT_INTEGER, di, GFC_STD_GNU,\n-\t     gfc_check_symlnk, NULL, gfc_resolve_symlnk,\n-\t     a, BT_CHARACTER, dc, REQUIRED, b, BT_CHARACTER, dc, REQUIRED);\n+  add_sym_2 (\"symlnk\", GFC_ISYM_SYMLNK, NO_CLASS, ACTUAL_NO, BT_INTEGER, di,\n+\t     GFC_STD_GNU, gfc_check_symlnk, NULL, gfc_resolve_symlnk,\n+\t     p1, BT_CHARACTER, dc, REQUIRED, p2, BT_CHARACTER, dc, REQUIRED);\n \n   make_generic (\"symlnk\", GFC_ISYM_SYMLNK, GFC_STD_GNU);\n \n-  add_sym_1 (\"system\", GFC_ISYM_SYSTEM, NO_CLASS, ACTUAL_NO, BT_INTEGER, di, GFC_STD_GNU,\n-\t     NULL, NULL, NULL,\n-\t     c, BT_CHARACTER, dc, REQUIRED);\n+  add_sym_1 (\"system\", GFC_ISYM_SYSTEM, NO_CLASS, ACTUAL_NO, BT_INTEGER, di,\n+\t     GFC_STD_GNU, NULL, NULL, NULL,\n+\t     com, BT_CHARACTER, dc, REQUIRED);\n \n   make_generic (\"system\", GFC_ISYM_SYSTEM, GFC_STD_GNU);\n \n@@ -2441,16 +2442,16 @@ add_functions (void)\n   make_generic (\"ubound\", GFC_ISYM_UBOUND, GFC_STD_F95);\n \n   /* g77 compatibility for UMASK.  */\n-  add_sym_1 (\"umask\", GFC_ISYM_UMASK, NO_CLASS, ACTUAL_NO, BT_INTEGER, di, GFC_STD_GNU,\n-\t     gfc_check_umask, NULL, gfc_resolve_umask,\n-\t     a, BT_INTEGER, di, REQUIRED);\n+  add_sym_1 (\"umask\", GFC_ISYM_UMASK, NO_CLASS, ACTUAL_NO, BT_INTEGER, di,\n+\t     GFC_STD_GNU, gfc_check_umask, NULL, gfc_resolve_umask,\n+\t     msk, BT_INTEGER, di, REQUIRED);\n \n   make_generic (\"umask\", GFC_ISYM_UMASK, GFC_STD_GNU);\n \n   /* g77 compatibility for UNLINK.  */\n   add_sym_1 (\"unlink\", GFC_ISYM_UNLINK, NO_CLASS, ACTUAL_NO, BT_INTEGER, di, GFC_STD_GNU,\n \t     gfc_check_unlink, NULL, gfc_resolve_unlink,\n-\t     a, BT_CHARACTER, dc, REQUIRED);\n+\t     \"path\", BT_CHARACTER, dc, REQUIRED);\n \n   make_generic (\"unlink\", GFC_ISYM_UNLINK, GFC_STD_GNU);\n \n@@ -2469,9 +2470,9 @@ add_functions (void)\n \n   make_generic (\"verify\", GFC_ISYM_VERIFY, GFC_STD_F95);\n     \n-  add_sym_1 (\"loc\", GFC_ISYM_LOC, NO_CLASS, ACTUAL_NO, BT_INTEGER, ii, GFC_STD_GNU,\n-\t     gfc_check_loc, NULL, gfc_resolve_loc,\n-\t     ar, BT_UNKNOWN, 0, REQUIRED);\n+  add_sym_1 (\"loc\", GFC_ISYM_LOC, NO_CLASS, ACTUAL_NO, BT_INTEGER, ii,\n+\t     GFC_STD_GNU, gfc_check_loc, NULL, gfc_resolve_loc,\n+\t     x, BT_UNKNOWN, 0, REQUIRED);\n \t\t\n   make_generic (\"loc\", GFC_ISYM_LOC, GFC_STD_GNU);\n }\n@@ -2492,7 +2493,8 @@ add_subroutines (void)\n     *val = \"value\", *num = \"number\", *name = \"name\",\n     *trim_name = \"trim_name\", *ut = \"unit\", *han = \"handler\",\n     *sec = \"seconds\", *res = \"result\", *of = \"offset\", *md = \"mode\",\n-    *whence = \"whence\", *pos = \"pos\";\n+    *whence = \"whence\", *pos = \"pos\", *ptr = \"ptr\", *p1 = \"path1\",\n+    *p2 = \"path2\", *msk = \"mask\", *old = \"old\";\n \n   int di, dr, dc, dl, ii;\n \n@@ -2634,7 +2636,7 @@ add_subroutines (void)\n \n   add_sym_1s (\"srand\", GFC_ISYM_SRAND, NO_CLASS, BT_UNKNOWN, di, GFC_STD_GNU,\n \t      gfc_check_srand, NULL, gfc_resolve_srand,\n-\t      c, BT_INTEGER, 4, REQUIRED);\n+\t      \"seed\", BT_INTEGER, 4, REQUIRED);\n \n   add_sym_1s (\"exit\", GFC_ISYM_EXIT, NO_CLASS, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_exit, NULL, gfc_resolve_exit,\n@@ -2664,8 +2666,9 @@ add_subroutines (void)\n \t      gfc_check_fgetput_sub, NULL, gfc_resolve_fput_sub,\n \t      c, BT_CHARACTER, dc, REQUIRED, st, BT_INTEGER, di, OPTIONAL);\n \n-  add_sym_1s (\"free\", GFC_ISYM_FREE, NO_CLASS, BT_UNKNOWN, 0, GFC_STD_GNU, gfc_check_free,\n-\t      NULL, gfc_resolve_free, c, BT_INTEGER, ii, REQUIRED);\n+  add_sym_1s (\"free\", GFC_ISYM_FREE, NO_CLASS, BT_UNKNOWN, 0, GFC_STD_GNU,\n+\t      gfc_check_free, NULL, gfc_resolve_free,\n+\t      ptr, BT_INTEGER, ii, REQUIRED);\n \n   add_sym_4s (\"fseek\", GFC_ISYM_FSEEK, NO_CLASS, BT_UNKNOWN, 0, GFC_STD_GNU,\n               gfc_check_fseek_sub, NULL, gfc_resolve_fseek_sub,\n@@ -2686,21 +2689,21 @@ add_subroutines (void)\n \n   add_sym_3s (\"link\", GFC_ISYM_LINK, NO_CLASS, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_link_sub, NULL, gfc_resolve_link_sub,\n-\t      name, BT_CHARACTER, dc, REQUIRED, val, BT_CHARACTER,\n+\t      p1, BT_CHARACTER, dc, REQUIRED, p2, BT_CHARACTER,\n \t      dc, REQUIRED, st, BT_INTEGER, di, OPTIONAL);\n \n   add_sym_1s (\"perror\", GFC_ISYM_PERROR, NO_CLASS, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_perror, NULL, gfc_resolve_perror,\n-\t      c, BT_CHARACTER, dc, REQUIRED);\n+\t      \"string\", BT_CHARACTER, dc, REQUIRED);\n \n   add_sym_3s (\"rename\", GFC_ISYM_RENAME, NO_CLASS, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_rename_sub, NULL, gfc_resolve_rename_sub,\n-\t      name, BT_CHARACTER, dc, REQUIRED, val, BT_CHARACTER,\n+\t      p1, BT_CHARACTER, dc, REQUIRED, p2, BT_CHARACTER,\n \t      dc, REQUIRED, st, BT_INTEGER, di, OPTIONAL);\n \n   add_sym_1s (\"sleep\", GFC_ISYM_SLEEP, NO_CLASS, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_sleep_sub, NULL, gfc_resolve_sleep_sub,\n-\t      val, BT_INTEGER, di, REQUIRED);\n+\t      sec, BT_INTEGER, di, REQUIRED);\n \n   add_sym_3s (\"fstat\", GFC_ISYM_FSTAT, NO_CLASS, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_fstat_sub, NULL, gfc_resolve_fstat_sub,\n@@ -2724,7 +2727,7 @@ add_subroutines (void)\n \n   add_sym_3s (\"symlnk\", GFC_ISYM_SYMLINK, NO_CLASS, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_symlnk_sub, NULL, gfc_resolve_symlnk_sub,\n-\t      name, BT_CHARACTER, dc, REQUIRED, val, BT_CHARACTER,\n+\t      p1, BT_CHARACTER, dc, REQUIRED, p2, BT_CHARACTER,\n \t      dc, REQUIRED, st, BT_INTEGER, di, OPTIONAL);\n \n   add_sym_2s (\"system\", GFC_ISYM_SYSTEM, NO_CLASS, BT_UNKNOWN, 0, GFC_STD_GNU,\n@@ -2742,11 +2745,11 @@ add_subroutines (void)\n \n   add_sym_2s (\"umask\", GFC_ISYM_UMASK, NO_CLASS, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_umask_sub, NULL, gfc_resolve_umask_sub,\n-\t      val, BT_INTEGER, di, REQUIRED, num, BT_INTEGER, di, OPTIONAL);\n+\t      msk, BT_INTEGER, di, REQUIRED, old, BT_INTEGER, di, OPTIONAL);\n \n   add_sym_2s (\"unlink\", GFC_ISYM_UNLINK, NO_CLASS, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_unlink_sub, NULL, gfc_resolve_unlink_sub,\n-\t      c, BT_CHARACTER, dc, REQUIRED, st, BT_INTEGER, di, OPTIONAL);\n+\t      \"path\", BT_CHARACTER, dc, REQUIRED, st, BT_INTEGER, di, OPTIONAL);\n }\n \n "}, {"sha": "d560af78b37d7a81b7bb582c526564e03632ad12", "filename": "gcc/fortran/intrinsic.texi", "status": "modified", "additions": 143, "deletions": 123, "changes": 266, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f8cce28b83628caf64143b6e98cc09a61c0a619/gcc%2Ffortran%2Fintrinsic.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f8cce28b83628caf64143b6e98cc09a61c0a619/gcc%2Ffortran%2Fintrinsic.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.texi?ref=2f8cce28b83628caf64143b6e98cc09a61c0a619", "patch": "@@ -167,7 +167,6 @@ Some basic guidelines for editing this document:\n * @code{LEADZ}:         LEADZ,     Number of leading zero bits of an integer\n * @code{LEN}:           LEN,       Length of a character entity\n * @code{LEN_TRIM}:      LEN_TRIM,  Length of a character entity without trailing blank characters\n-* @code{LOG_GAMMA}:     LOG_GAMMA, Logarithm of the Gamma function\n * @code{LGE}:           LGE,       Lexical greater than or equal\n * @code{LGT}:           LGT,       Lexical greater than\n * @code{LINK}:          LINK,      Create a hard link\n@@ -177,6 +176,7 @@ Some basic guidelines for editing this document:\n * @code{LOC}:           LOC,       Returns the address of a variable\n * @code{LOG}:           LOG,       Logarithm function\n * @code{LOG10}:         LOG10,     Base 10 logarithm function \n+* @code{LOG_GAMMA}:     LOG_GAMMA, Logarithm of the Gamma function\n * @code{LOGICAL}:       LOGICAL,   Convert to logical type\n * @code{LONG}:          LONG,      Convert to integer type\n * @code{LSHIFT}:        LSHIFT,    Left shift bits\n@@ -1435,7 +1435,7 @@ end program test_atan2\n @item @emph{Specific names}:\n @multitable @columnfractions .20 .20 .20 .25\n @item Name            @tab Argument          @tab Return type    @tab Standard\n-@item @code{DATAN2(X)} @tab @code{REAL(8) X} @tab @code{REAL(8)} @tab Fortran 77 and later\n+@item @code{DATAN2(X, Y)} @tab @code{REAL(8) X}, @code{REAL(8) Y} @tab @code{REAL(8)} @tab Fortran 77 and later\n @end multitable\n @end table\n \n@@ -1634,9 +1634,9 @@ end program test_besjn\n \n @item @emph{Specific names}:\n @multitable @columnfractions .20 .20 .20 .25\n-@item Name             @tab Argument            @tab Return type       @tab Standard\n-@item @code{DBESJN(X)} @tab @code{INTEGER N} @tab @code{REAL(8)}    @tab GNU extension\n-@item                  @tab @code{REAL(8) X}    @tab                   @tab\n+@item Name                @tab Argument            @tab Return type       @tab Standard\n+@item @code{DBESJN(N, X)} @tab @code{INTEGER N}    @tab @code{REAL(8)}    @tab GNU extension\n+@item                     @tab @code{REAL(8) X}    @tab                   @tab\n @end multitable\n @end table\n \n@@ -2488,7 +2488,7 @@ Inquiry function\n @end multitable\n \n @item @emph{Return value}:\n-The return value is of type @code{INTEGER(4)}\n+The return value is an @code{INTEGER} of default kind.\n \n @item @emph{Example}:\n @smallexample\n@@ -3397,11 +3397,11 @@ end program test_dreal\n \n @table @asis\n @item @emph{Description}:\n-@code{DTIME(TARRAY, RESULT)} initially returns the number of seconds of runtime\n-since the start of the process's execution in @var{RESULT}.  @var{TARRAY}\n-returns the user and system components of this time in @code{TARRAY(1)} and\n-@code{TARRAY(2)} respectively. @var{RESULT} is equal to @code{TARRAY(1) +\n-TARRAY(2)}.\n+@code{DTIME(VALUES, TIME)} initially returns the number of seconds of runtime\n+since the start of the process's execution in @var{TIME}.  @var{VALUES}\n+returns the user and system components of this time in @code{VALUES(1)} and\n+@code{VALUES(2)} respectively. @var{TIME} is equal to @code{VALUES(1) +\n+VALUES(2)}.\n \n Subsequent invocations of @code{DTIME} return values accumulated since the\n previous invocation.\n@@ -3421,12 +3421,12 @@ results. If possible, use @code{CPU_TIME} instead.\n This intrinsic is provided in both subroutine and function forms; however,\n only one form can be used in any given program unit.\n \n-@var{TARRAY} and @var{RESULT} are @code{INTENT(OUT)} and provide the following:\n+@var{VALUES} and @var{TIME} are @code{INTENT(OUT)} and provide the following:\n \n @multitable @columnfractions .15 .30 .40\n-@item @tab @code{TARRAY(1)}: @tab User time in seconds.\n-@item @tab @code{TARRAY(2)}: @tab System time in seconds.\n-@item @tab @code{RESULT}: @tab Run time since start in seconds.\n+@item @tab @code{VALUES(1)}: @tab User time in seconds.\n+@item @tab @code{VALUES(2)}: @tab System time in seconds.\n+@item @tab @code{TIME}: @tab Run time since start in seconds.\n @end multitable\n \n @item @emph{Standard}:\n@@ -3437,14 +3437,14 @@ Subroutine, function\n \n @item @emph{Syntax}:\n @multitable @columnfractions .80\n-@item @code{CALL DTIME(TARRAY, RESULT)}.\n-@item @code{RESULT = DTIME(TARRAY)}, (not recommended).\n+@item @code{CALL DTIME(VALUES, TIME)}.\n+@item @code{TIME = DTIME(VALUES)}, (not recommended).\n @end multitable\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .70\n-@item @var{TARRAY}@tab The type shall be @code{REAL, DIMENSION(2)}.\n-@item @var{RESULT}@tab The type shall be @code{REAL}.\n+@item @var{VALUES}@tab The type shall be @code{REAL, DIMENSION(2)}.\n+@item @var{TIME}@tab The type shall be @code{REAL}.\n @end multitable\n \n @item @emph{Return value}:\n@@ -3716,10 +3716,10 @@ end program test_erfc_scaled\n \n @table @asis\n @item @emph{Description}:\n-@code{ETIME(TARRAY, RESULT)} returns the number of seconds of runtime\n-since the start of the process's execution in @var{RESULT}.  @var{TARRAY}\n-returns the user and system components of this time in @code{TARRAY(1)} and\n-@code{TARRAY(2)} respectively. @var{RESULT} is equal to @code{TARRAY(1) + TARRAY(2)}.\n+@code{ETIME(VALUES, TIME)} returns the number of seconds of runtime\n+since the start of the process's execution in @var{TIME}.  @var{VALUES}\n+returns the user and system components of this time in @code{VALUES(1)} and\n+@code{VALUES(2)} respectively. @var{TIME} is equal to @code{VALUES(1) + VALUES(2)}.\n \n On some systems, the underlying timings are represented using types with\n sufficiently small limits that overflows (wrap around) are possible, such as\n@@ -3730,12 +3730,12 @@ run of the compiled program.\n This intrinsic is provided in both subroutine and function forms; however,\n only one form can be used in any given program unit.\n \n-@var{TARRAY} and @var{RESULT} are @code{INTENT(OUT)} and provide the following:\n+@var{VALUES} and @var{TIME} are @code{INTENT(OUT)} and provide the following:\n \n @multitable @columnfractions .15 .30 .60\n-@item @tab @code{TARRAY(1)}: @tab User time in seconds.\n-@item @tab @code{TARRAY(2)}: @tab System time in seconds.\n-@item @tab @code{RESULT}: @tab Run time since start in seconds.\n+@item @tab @code{VALUES(1)}: @tab User time in seconds.\n+@item @tab @code{VALUES(2)}: @tab System time in seconds.\n+@item @tab @code{TIME}: @tab Run time since start in seconds.\n @end multitable\n \n @item @emph{Standard}:\n@@ -3746,14 +3746,14 @@ Subroutine, function\n \n @item @emph{Syntax}:\n @multitable @columnfractions .80\n-@item @code{CALL ETIME(TARRAY, RESULT)}.\n-@item @code{RESULT = ETIME(TARRAY)}, (not recommended).\n+@item @code{CALL ETIME(VALUES, TIME)}.\n+@item @code{TIME = ETIME(VALUES)}, (not recommended).\n @end multitable\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .70\n-@item @var{TARRAY}@tab The type shall be @code{REAL, DIMENSION(2)}.\n-@item @var{RESULT}@tab The type shall be @code{REAL}.\n+@item @var{VALUES}@tab The type shall be @code{REAL, DIMENSION(2)}.\n+@item @var{TIME}@tab The type shall be @code{REAL}.\n @end multitable\n \n @item @emph{Return value}:\n@@ -4557,7 +4557,7 @@ END PROGRAM\n @code{FSTAT} is identical to @ref{STAT}, except that information about an \n already opened file is obtained.\n \n-The elements in @code{BUFF} are the same as described by @ref{STAT}.\n+The elements in @code{VALUES} are the same as described by @ref{STAT}.\n \n This intrinsic is provided in both subroutine and function forms; however,\n only one form can be used in any given program unit.\n@@ -4569,12 +4569,12 @@ GNU extension\n Subroutine, function\n \n @item @emph{Syntax}:\n-@code{CALL FSTAT(UNIT, BUFF [, STATUS])}\n+@code{CALL FSTAT(UNIT, VALUES [, STATUS])}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .70\n @item @var{UNIT}   @tab An open I/O unit number of type @code{INTEGER}.\n-@item @var{BUFF}   @tab The type shall be @code{INTEGER(4), DIMENSION(13)}.\n+@item @var{VALUES} @tab The type shall be @code{INTEGER(4), DIMENSION(13)}.\n @item @var{STATUS} @tab (Optional) status flag of type @code{INTEGER(4)}. Returns 0 \n on success and a system specific error code otherwise.\n @end multitable\n@@ -4817,18 +4817,24 @@ Fortran 2003 and later\n Subroutine\n \n @item @emph{Syntax}:\n-@code{CALL GET_COMMAND(COMMAND)}\n+@code{CALL GET_COMMAND([COMMAND, LENGTH, STATUS])}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .70\n-@item @var{COMMAND} @tab Shall be of type @code{CHARACTER} and of default\n-kind.\n+@item @var{COMMAND} @tab (Optional) shall be of type @code{CHARACTER} and\n+of default kind.\n+@item @var{LENGTH} @tab (Optional) Shall be of type @code{INTEGER} and of\n+default kind.\n+@item @var{STATUS} @tab (Optional) Shall be of type @code{INTEGER} and of\n+default kind.\n @end multitable\n \n @item @emph{Return value}:\n-Stores the entire command line that was used to invoke the program in\n-@var{COMMAND}. If @var{COMMAND} is not large enough, the command will be\n-truncated. \n+If @var{COMMAND} is present, stores the entire command line that was used\n+to invoke the program in @var{COMMAND}. If @var{LENGTH} is present, it is\n+assigned the length of the command line. If @var{STATUS} is present, it\n+is assigned 0 upon success of the command, -1 if @var{COMMAND} is too\n+short to store the command line, or a positive value in case of an error.\n \n @item @emph{Example}:\n @smallexample\n@@ -4867,12 +4873,14 @@ Subroutine\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .70\n-@item @var{NUMBER} @tab Shall be a scalar of type @code{INTEGER(4)},\n-@math{@var{NUMBER} \\geq 0}\n+@item @var{NUMBER} @tab Shall be a scalar of type @code{INTEGER} and of\n+default kind, @math{@var{NUMBER} \\geq 0}\n @item @var{VALUE}  @tab Shall be a scalar of type @code{CHARACTER}\n and of default kind.\n-@item @var{LENGTH} @tab (Option) Shall be a scalar of type @code{INTEGER(4)}. \n-@item @var{STATUS} @tab (Option) Shall be a scalar of type @code{INTEGER(4)}. \n+@item @var{LENGTH} @tab (Option) Shall be a scalar of type @code{INTEGER}\n+and of default kind.\n+@item @var{STATUS} @tab (Option) Shall be a scalar of type @code{INTEGER}\n+and of default kind.\n @end multitable\n \n @item @emph{Return value}:\n@@ -5022,11 +5030,16 @@ Subroutine\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .70\n-@item @var{NAME}      @tab Shall be a scalar of type @code{CHARACTER(1)}. \n-@item @var{VALUE}     @tab Shall be a scalar of type @code{CHARACTER(1)}. \n-@item @var{LENGTH}    @tab Shall be a scalar of type @code{INTEGER(4)}. \n-@item @var{STATUS}    @tab Shall be a scalar of type @code{INTEGER(4)}. \n-@item @var{TRIM_NAME} @tab Shall be a scalar of type @code{LOGICAL(4)}. \n+@item @var{NAME}      @tab Shall be a scalar of type @code{CHARACTER}\n+and of default kind.\n+@item @var{VALUE}     @tab Shall be a scalar of type @code{CHARACTER}\n+and of default kind.\n+@item @var{LENGTH}    @tab Shall be a scalar of type @code{INTEGER}\n+and of default kind.\n+@item @var{STATUS}    @tab Shall be a scalar of type @code{INTEGER}\n+and of default kind.\n+@item @var{TRIM_NAME} @tab Shall be a scalar of type @code{LOGICAL}\n+and of default kind.\n @end multitable\n \n @item @emph{Return value}:\n@@ -5707,9 +5720,9 @@ end program read_val\n \n @table @asis\n @item @emph{Description}:\n-@code{IDATE(TARRAY)} Fills @var{TARRAY} with the numerical values at the  \n+@code{IDATE(VALUES)} Fills @var{VALUES} with the numerical values at the  \n current local time. The day (in the range 1-31), month (in the range 1-12), \n-and year appear in elements 1, 2, and 3 of @var{TARRAY}, respectively. \n+and year appear in elements 1, 2, and 3 of @var{VALUES}, respectively. \n The year has four significant digits.\n \n @item @emph{Standard}:\n@@ -7212,13 +7225,14 @@ The return value is of type @code{INTEGER} and of the same kind as\n \n @table @asis\n @item @emph{Description}:\n-@code{LSTAT} is identical to @ref{STAT}, except that if path is a symbolic link, \n-then the link itself is statted, not the file that it refers to.\n+@code{LSTAT} is identical to @ref{STAT}, except that if path is a\n+symbolic link, then the link itself is statted, not the file that it\n+refers to.\n \n-The elements in @code{BUFF} are the same as described by @ref{STAT}.\n+The elements in @code{VALUES} are the same as described by @ref{STAT}.\n \n-This intrinsic is provided in both subroutine and function forms; however,\n-only one form can be used in any given program unit.\n+This intrinsic is provided in both subroutine and function forms;\n+however, only one form can be used in any given program unit.\n \n @item @emph{Standard}:\n GNU extension\n@@ -7227,13 +7241,13 @@ GNU extension\n Subroutine, function\n \n @item @emph{Syntax}:\n-@code{CALL LSTAT(FILE, BUFF [, STATUS])}\n+@code{CALL LSTAT(NAME, VALUES [, STATUS])}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .70\n-@item @var{FILE}   @tab The type shall be @code{CHARACTER} of the default\n+@item @var{NAME}   @tab The type shall be @code{CHARACTER} of the default\n kind, a valid path within the file system.\n-@item @var{BUFF}   @tab The type shall be @code{INTEGER(4), DIMENSION(13)}.\n+@item @var{VALUES} @tab The type shall be @code{INTEGER(4), DIMENSION(13)}.\n @item @var{STATUS} @tab (Optional) status flag of type @code{INTEGER(4)}.\n Returns 0 on success and a system specific error code otherwise.\n @end multitable\n@@ -7254,8 +7268,8 @@ To stat an open file: @ref{FSTAT}, to stat a file: @ref{STAT}\n \n @table @asis\n @item @emph{Description}:\n-Given a system time value @var{STIME} (as provided by the @code{TIME8()}\n-intrinsic), fills @var{TARRAY} with values extracted from it appropriate\n+Given a system time value @var{TIME} (as provided by the @code{TIME8()}\n+intrinsic), fills @var{VALUES} with values extracted from it appropriate\n to the local time zone using @code{localtime(3)}.\n \n @item @emph{Standard}:\n@@ -7265,18 +7279,18 @@ GNU extension\n Subroutine\n \n @item @emph{Syntax}:\n-@code{CALL LTIME(STIME, TARRAY)}\n+@code{CALL LTIME(TIME, VALUES)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .70\n-@item @var{STIME}  @tab An @code{INTEGER} scalar expression\n+@item @var{TIME}  @tab An @code{INTEGER} scalar expression\n corresponding to a system time, with @code{INTENT(IN)}.\n-@item @var{TARRAY} @tab A default @code{INTEGER} array with 9 elements,\n+@item @var{VALUES} @tab A default @code{INTEGER} array with 9 elements,\n with @code{INTENT(OUT)}.\n @end multitable\n \n @item @emph{Return value}:\n-The elements of @var{TARRAY} are assigned as follows:\n+The elements of @var{VALUES} are assigned as follows:\n @enumerate\n @item Seconds after the minute, range 0--59 or 0--61 to allow for leap\n seconds\n@@ -8046,8 +8060,8 @@ end program\n \n @table @asis\n @item @emph{Description}:\n-@code{MOVE_ALLOC(SRC, DEST)} moves the allocation from @var{SRC} to\n-@var{DEST}.  @var{SRC} will become deallocated in the process.\n+@code{MOVE_ALLOC(FROM, TO)} moves the allocation from @var{FROM} to\n+@var{TO}.  @var{FROM} will become deallocated in the process.\n \n @item @emph{Standard}:\n Fortran 2003 and later\n@@ -8056,14 +8070,14 @@ Fortran 2003 and later\n Subroutine\n \n @item @emph{Syntax}:\n-@code{CALL MOVE_ALLOC(SRC, DEST)}\n+@code{CALL MOVE_ALLOC(FROM, TO)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .70\n-@item @var{SRC}  @tab @code{ALLOCATABLE}, @code{INTENT(INOUT)}, may be\n+@item @var{FROM}  @tab @code{ALLOCATABLE}, @code{INTENT(INOUT)}, may be\n of any type and kind.\n-@item @var{DEST} @tab @code{ALLOCATABLE}, @code{INTENT(OUT)}, shall be\n-of the same type, kind and rank as @var{SRC}.\n+@item @var{TO} @tab @code{ALLOCATABLE}, @code{INTENT(OUT)}, shall be\n+of the same type, kind and rank as @var{FROM}.\n @end multitable\n \n @item @emph{Return value}:\n@@ -8219,7 +8233,7 @@ end program newline\n \n @table @asis\n @item @emph{Description}:\n-@code{NINT(X)} rounds its argument to the nearest whole number.\n+@code{NINT(A)} rounds its argument to the nearest whole number.\n \n @item @emph{Standard}:\n Fortran 77 and later, with @var{KIND} argument Fortran 90 and later\n@@ -8228,11 +8242,11 @@ Fortran 77 and later, with @var{KIND} argument Fortran 90 and later\n Elemental function\n \n @item @emph{Syntax}:\n-@code{RESULT = NINT(X [, KIND])}\n+@code{RESULT = NINT(A [, KIND])}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .70\n-@item @var{X}    @tab The type of the argument shall be @code{REAL}.\n+@item @var{A}    @tab The type of the argument shall be @code{REAL}.\n @item @var{KIND} @tab (Optional) An @code{INTEGER} initialization\n expression indicating the kind parameter of the result.\n @end multitable\n@@ -8368,13 +8382,13 @@ GNU extension\n Function\n \n @item @emph{Syntax}:\n-@code{RESULT = OR(X, Y)}\n+@code{RESULT = OR(I, J)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .70\n-@item @var{X} @tab The type shall be either a scalar @code{INTEGER}\n+@item @var{I} @tab The type shall be either a scalar @code{INTEGER}\n type or a scalar @code{LOGICAL} type.\n-@item @var{Y} @tab The type shall be the same as the type of @var{X}.\n+@item @var{J} @tab The type shall be the same as the type of @var{J}.\n @end multitable\n \n @item @emph{Return value}:\n@@ -8606,8 +8620,10 @@ Fortran 95 and later\n Transformational function\n \n @item @emph{Syntax}:\n-@code{RESULT = PRODUCT(ARRAY[, MASK])}\n-@code{RESULT = PRODUCT(ARRAY, DIM[, MASK])}\n+@multitable @columnfractions .80\n+@item @code{RESULT = PRODUCT(ARRAY[, MASK])}\n+@item @code{RESULT = PRODUCT(ARRAY, DIM[, MASK])}\n+@end multitable\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .70\n@@ -8732,11 +8748,11 @@ GNU extension\n Function\n \n @item @emph{Syntax}:\n-@code{RESULT = RAND(FLAG)}\n+@code{RESULT = RAND(I)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .70\n-@item @var{FLAG} @tab Shall be a scalar @code{INTEGER} of kind 4.\n+@item @var{I} @tab Shall be a scalar @code{INTEGER} of kind 4.\n @end multitable\n \n @item @emph{Return value}:\n@@ -8839,7 +8855,7 @@ Fortran 95 and later\n Subroutine\n \n @item @emph{Syntax}:\n-@code{CALL RANDOM_SEED(SIZE, PUT, GET)}\n+@code{CALL RANDOM_SEED([SIZE, PUT, GET])}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .70\n@@ -8924,8 +8940,8 @@ See @code{PRECISION} for an example.\n \n @table @asis\n @item @emph{Description}:\n-@code{REAL(X [, KIND])} converts its argument @var{X} to a real type.  The\n-@code{REALPART(X)} function is provided for compatibility with @command{g77},\n+@code{REAL(A [, KIND])} converts its argument @var{A} to a real type.  The\n+@code{REALPART} function is provided for compatibility with @command{g77},\n and its use is strongly discouraged.\n \n @item @emph{Standard}:\n@@ -8936,13 +8952,13 @@ Elemental function\n \n @item @emph{Syntax}:\n @multitable @columnfractions .80\n-@item @code{RESULT = REAL(X [, KIND])}\n+@item @code{RESULT = REAL(A [, KIND])}\n @item @code{RESULT = REALPART(Z)}\n @end multitable\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .70\n-@item @var{X}    @tab Shall be @code{INTEGER}, @code{REAL}, or\n+@item @var{A}    @tab Shall be @code{INTEGER}, @code{REAL}, or\n @code{COMPLEX}.\n @item @var{KIND} @tab (Optional) An @code{INTEGER} initialization\n expression indicating the kind parameter of the result.\n@@ -8954,14 +8970,14 @@ the following rules:\n \n @table @asis\n @item (A)\n-@code{REAL(X)} is converted to a default real type if @var{X} is an \n+@code{REAL(A)} is converted to a default real type if @var{A} is an \n integer or real variable.\n @item (B)\n-@code{REAL(X)} is converted to a real type with the kind type parameter\n-of @var{X} if @var{X} is a complex variable.\n+@code{REAL(A)} is converted to a real type with the kind type parameter\n+of @var{A} if @var{A} is a complex variable.\n @item (C)\n-@code{REAL(X, KIND)} is converted to a real type with kind type\n-parameter @var{KIND} if @var{X} is a complex, integer, or real\n+@code{REAL(A, KIND)} is converted to a real type with kind type\n+parameter @var{KIND} if @var{A} is a complex, integer, or real\n variable.\n @end table\n \n@@ -9432,9 +9448,9 @@ end program ascii_kind\n \n @table @asis\n @item @emph{Description}:\n-@code{SELECTED_INT_KIND(I)} return the kind value of the smallest integer\n-type that can represent all values ranging from @math{-10^I} (exclusive)\n-to @math{10^I} (exclusive). If there is no integer kind that accommodates\n+@code{SELECTED_INT_KIND(R)} return the kind value of the smallest integer\n+type that can represent all values ranging from @math{-10^R} (exclusive)\n+to @math{10^R} (exclusive). If there is no integer kind that accommodates\n this range, @code{SELECTED_INT_KIND} returns @math{-1}.\n \n @item @emph{Standard}:\n@@ -9444,11 +9460,11 @@ Fortran 95 and later\n Transformational function\n \n @item @emph{Syntax}:\n-@code{RESULT = SELECTED_INT_KIND(I)}\n+@code{RESULT = SELECTED_INT_KIND(R)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .70\n-@item @var{I} @tab Shall be a scalar and of type @code{INTEGER}.\n+@item @var{R} @tab Shall be a scalar and of type @code{INTEGER}.\n @end multitable\n \n @item @emph{Example}:\n@@ -9489,7 +9505,7 @@ Fortran 95 and later\n Transformational function\n \n @item @emph{Syntax}:\n-@code{RESULT = SELECTED_REAL_KIND(P, R)}\n+@code{RESULT = SELECTED_REAL_KIND([P, R])}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .70\n@@ -10212,21 +10228,21 @@ This function returns information about a file. No permissions are required on\n the file itself, but execute (search) permission is required on all of the \n directories in path that lead to the file.\n \n-The elements that are obtained and stored in the array @code{BUFF}:\n+The elements that are obtained and stored in the array @code{VALUES}:\n @multitable @columnfractions .15 .70\n-@item @code{buff(1)}   @tab  Device ID \n-@item @code{buff(2)}   @tab  Inode number \n-@item @code{buff(3)}   @tab  File mode \n-@item @code{buff(4)}   @tab  Number of links \n-@item @code{buff(5)}   @tab  Owner's uid \n-@item @code{buff(6)}   @tab  Owner's gid \n-@item @code{buff(7)}   @tab  ID of device containing directory entry for file (0 if not available) \n-@item @code{buff(8)}   @tab  File size (bytes) \n-@item @code{buff(9)}   @tab  Last access time \n-@item @code{buff(10)}  @tab  Last modification time \n-@item @code{buff(11)}  @tab  Last file status change time \n-@item @code{buff(12)}  @tab  Preferred I/O block size (-1 if not available) \n-@item @code{buff(13)}  @tab  Number of blocks allocated (-1 if not available)\n+@item @code{VALUES(1)}   @tab  Device ID \n+@item @code{VALUES(2)}   @tab  Inode number \n+@item @code{VALUES(3)}   @tab  File mode \n+@item @code{VALUES(4)}   @tab  Number of links \n+@item @code{VALUES(5)}   @tab  Owner's uid \n+@item @code{VALUES(6)}   @tab  Owner's gid \n+@item @code{VALUES(7)}   @tab  ID of device containing directory entry for file (0 if not available) \n+@item @code{VALUES(8)}   @tab  File size (bytes) \n+@item @code{VALUES(9)}   @tab  Last access time \n+@item @code{VALUES(10)}  @tab  Last modification time \n+@item @code{VALUES(11)}  @tab  Last file status change time \n+@item @code{VALUES(12)}  @tab  Preferred I/O block size (-1 if not available) \n+@item @code{VALUES(13)}  @tab  Number of blocks allocated (-1 if not available)\n @end multitable\n \n Not all these elements are relevant on all systems. \n@@ -10242,13 +10258,13 @@ GNU extension\n Subroutine, function\n \n @item @emph{Syntax}:\n-@code{CALL STAT(FILE,BUFF[,STATUS])}\n+@code{CALL STAT(NAME, VALUES [, STATUS])}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .70\n-@item @var{FILE}   @tab The type shall be @code{CHARACTER}, of the\n+@item @var{NAME}   @tab The type shall be @code{CHARACTER}, of the\n default kind and a valid path within the file system.\n-@item @var{BUFF}   @tab The type shall be @code{INTEGER(4), DIMENSION(13)}.\n+@item @var{VALUES} @tab The type shall be @code{INTEGER(4), DIMENSION(13)}.\n @item @var{STATUS} @tab (Optional) status flag of type @code{INTEGER(4)}. Returns 0 \n on success and a system specific error code otherwise.\n @end multitable\n@@ -10305,8 +10321,10 @@ Fortran 95 and later\n Transformational function\n \n @item @emph{Syntax}:\n-@code{RESULT = SUM(ARRAY[, MASK])}\n-@code{RESULT = SUM(ARRAY, DIM[, MASK])}\n+@multitable @columnfractions .80\n+@item @code{RESULT = SUM(ARRAY[, MASK])}\n+@item @code{RESULT = SUM(ARRAY, DIM[, MASK])}\n+@end multitable\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .70\n@@ -10965,22 +10983,24 @@ the relevant dimension.\n \n @table @asis\n @item @emph{Description}:\n-Sets the file creation mask to @var{MASK} and returns the old value in\n-argument @var{OLD} if it is supplied. See @code{umask(2)}.\n+Sets the file creation mask to @var{MASK}. If called as a function, it\n+returns the old value. If called as a subroutine and argument @var{OLD}\n+if it is supplied, it is set to the old value. See @code{umask(2)}.\n \n @item @emph{Standard}:\n GNU extension\n \n @item @emph{Class}:\n-Subroutine\n+Subroutine, function\n \n @item @emph{Syntax}:\n @code{CALL UMASK(MASK [, OLD])}\n+@code{OLD = UMASK(MASK)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .70\n @item @var{MASK} @tab Shall be a scalar of type @code{INTEGER}.\n-@item @var{MASK} @tab (Optional) Shall be a scalar of type\n+@item @var{OLD} @tab (Optional) Shall be a scalar of type\n @code{INTEGER}.\n @end multitable\n \n@@ -11154,13 +11174,13 @@ GNU extension\n Function\n \n @item @emph{Syntax}:\n-@code{RESULT = XOR(X, Y)}\n+@code{RESULT = XOR(I, J)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .70\n-@item @var{X} @tab The type shall be either  a scalar @code{INTEGER}\n+@item @var{I} @tab The type shall be either  a scalar @code{INTEGER}\n type or a scalar @code{LOGICAL} type.\n-@item @var{Y} @tab The type shall be the same as the type of @var{I}.\n+@item @var{J} @tab The type shall be the same as the type of @var{I}.\n @end multitable\n \n @item @emph{Return value}:"}]}