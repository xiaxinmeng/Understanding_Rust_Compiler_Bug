{"sha": "351877cf314ab2874d576832691f273395e591f7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzUxODc3Y2YzMTRhYjI4NzRkNTc2ODMyNjkxZjI3MzM5NWU1OTFmNw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2010-10-19T19:58:20Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2010-10-19T19:58:20Z"}, "message": "Add patterns for FMA3.\n\nFrom-SVN: r165705", "tree": {"sha": "2d8cc7da65567246516c7c0713aad7e0295b4d61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2d8cc7da65567246516c7c0713aad7e0295b4d61"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/351877cf314ab2874d576832691f273395e591f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/351877cf314ab2874d576832691f273395e591f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/351877cf314ab2874d576832691f273395e591f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/351877cf314ab2874d576832691f273395e591f7/comments", "author": null, "committer": null, "parents": [{"sha": "b5829a84444ef9407ce67db589217495a6d0cf60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5829a84444ef9407ce67db589217495a6d0cf60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5829a84444ef9407ce67db589217495a6d0cf60"}], "stats": {"total": 587, "additions": 515, "deletions": 72}, "files": [{"sha": "5831956c1013ad4524277ea13d58d7b398b2e93e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/351877cf314ab2874d576832691f273395e591f7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/351877cf314ab2874d576832691f273395e591f7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=351877cf314ab2874d576832691f273395e591f7", "patch": "@@ -1,3 +1,17 @@\n+2010-10-19  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/i386/i386.c (bdesc_multi_arg): Use fma4i_fmadd_<mode>.\n+\t* config/i386/sse.md (fma<mode>4): Enable for FMA & SSE_MATH.\n+\t(fma4i_fmadd_<mode>): New.\n+\t(*split_fma, *split_fms, *split_fnma, *split_fnms): Rename from\n+\tfma4_fm*_<mode> and adjust to be pre-reload splitters to the \n+\tstandard fma patterns.\n+\t(fmaddsub_<mode>): Rename from fma4i_fmaddsub_<mode> and\n+\tenable for FMA.\n+\t(*fma_fmadd_<mode>, *fma_fmsub_<mode>): New.\n+\t(*fma_fmadd_<mode>, *fma_fmsub_<mode>): New.\n+\t(*fma_fmaddsub_<mode>, *fma_fmsubadd_<mode>): New.\n+\n 2010-10-19  Paul Koning  <pkoning@equallogic.com>\n \n \t* lower-subreg.c (resolve_shift_zext): Delete conditional code for"}, {"sha": "6668a62acb5c5e41eb28678bc9f1380c6c104452", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 32, "deletions": 12, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/351877cf314ab2874d576832691f273395e591f7/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/351877cf314ab2874d576832691f273395e591f7/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=351877cf314ab2874d576832691f273395e591f7", "patch": "@@ -23931,18 +23931,38 @@ static const struct builtin_description bdesc_args[] =\n \n static const struct builtin_description bdesc_multi_arg[] =\n {\n-  { OPTION_MASK_ISA_FMA4, CODE_FOR_fma4i_vmfmadd_v4sf,     \"__builtin_ia32_vfmaddss\",    IX86_BUILTIN_VFMADDSS,    UNKNOWN,      (int)MULTI_ARG_3_SF },\n-  { OPTION_MASK_ISA_FMA4, CODE_FOR_fma4i_vmfmadd_v2df,     \"__builtin_ia32_vfmaddsd\",    IX86_BUILTIN_VFMADDSD,    UNKNOWN,      (int)MULTI_ARG_3_DF },\n-\n-  { OPTION_MASK_ISA_FMA4, CODE_FOR_fmav4sf4,               \"__builtin_ia32_vfmaddps\",    IX86_BUILTIN_VFMADDPS,    UNKNOWN,   (int)MULTI_ARG_3_SF },\n-  { OPTION_MASK_ISA_FMA4, CODE_FOR_fmav2df4,               \"__builtin_ia32_vfmaddpd\",    IX86_BUILTIN_VFMADDPD,    UNKNOWN,   (int)MULTI_ARG_3_DF },\n-  { OPTION_MASK_ISA_FMA4, CODE_FOR_fmav8sf4,               \"__builtin_ia32_vfmaddps256\", IX86_BUILTIN_VFMADDPS256, UNKNOWN,   (int)MULTI_ARG_3_SF2 },\n-  { OPTION_MASK_ISA_FMA4, CODE_FOR_fmav4df4,               \"__builtin_ia32_vfmaddpd256\", IX86_BUILTIN_VFMADDPD256, UNKNOWN,   (int)MULTI_ARG_3_DF2 },\n-\n-  { OPTION_MASK_ISA_FMA4, CODE_FOR_fma4i_fmaddsub_v4sf,\t   \"__builtin_ia32_vfmaddsubps\", IX86_BUILTIN_VFMADDSUBPS,        UNKNOWN,  (int)MULTI_ARG_3_SF },\n-  { OPTION_MASK_ISA_FMA4, CODE_FOR_fma4i_fmaddsub_v2df,\t   \"__builtin_ia32_vfmaddsubpd\", IX86_BUILTIN_VFMADDSUBPD,        UNKNOWN,  (int)MULTI_ARG_3_DF },\n-  { OPTION_MASK_ISA_FMA4, CODE_FOR_fma4i_fmaddsub_v8sf,\t   \"__builtin_ia32_vfmaddsubps256\", IX86_BUILTIN_VFMADDSUBPS256,  UNKNOWN,  (int)MULTI_ARG_3_SF2 },\n-  { OPTION_MASK_ISA_FMA4, CODE_FOR_fma4i_fmaddsub_v4df,\t   \"__builtin_ia32_vfmaddsubpd256\", IX86_BUILTIN_VFMADDSUBPD256,  UNKNOWN,  (int)MULTI_ARG_3_DF2 },\n+  { OPTION_MASK_ISA_FMA4, CODE_FOR_fma4i_vmfmadd_v4sf,\n+    \"__builtin_ia32_vfmaddss\", IX86_BUILTIN_VFMADDSS,\n+    UNKNOWN, (int)MULTI_ARG_3_SF },\n+  { OPTION_MASK_ISA_FMA4, CODE_FOR_fma4i_vmfmadd_v2df,\n+    \"__builtin_ia32_vfmaddsd\", IX86_BUILTIN_VFMADDSD,\n+    UNKNOWN, (int)MULTI_ARG_3_DF },\n+\n+  { OPTION_MASK_ISA_FMA | OPTION_MASK_ISA_FMA4, CODE_FOR_fma4i_fmadd_v4sf,\n+    \"__builtin_ia32_vfmaddps\", IX86_BUILTIN_VFMADDPS,\n+    UNKNOWN, (int)MULTI_ARG_3_SF },\n+  { OPTION_MASK_ISA_FMA | OPTION_MASK_ISA_FMA4, CODE_FOR_fma4i_fmadd_v2df,\n+    \"__builtin_ia32_vfmaddpd\", IX86_BUILTIN_VFMADDPD,\n+    UNKNOWN, (int)MULTI_ARG_3_DF },\n+  { OPTION_MASK_ISA_FMA | OPTION_MASK_ISA_FMA4, CODE_FOR_fma4i_fmadd_v8sf,\n+    \"__builtin_ia32_vfmaddps256\", IX86_BUILTIN_VFMADDPS256,\n+    UNKNOWN, (int)MULTI_ARG_3_SF2 },\n+  { OPTION_MASK_ISA_FMA | OPTION_MASK_ISA_FMA4, CODE_FOR_fma4i_fmadd_v4df,\n+    \"__builtin_ia32_vfmaddpd256\", IX86_BUILTIN_VFMADDPD256,\n+    UNKNOWN, (int)MULTI_ARG_3_DF2 },\n+\n+  { OPTION_MASK_ISA_FMA | OPTION_MASK_ISA_FMA4, CODE_FOR_fmaddsub_v4sf,\n+    \"__builtin_ia32_vfmaddsubps\", IX86_BUILTIN_VFMADDSUBPS,\n+    UNKNOWN, (int)MULTI_ARG_3_SF },\n+  { OPTION_MASK_ISA_FMA | OPTION_MASK_ISA_FMA4, CODE_FOR_fmaddsub_v2df,\n+    \"__builtin_ia32_vfmaddsubpd\", IX86_BUILTIN_VFMADDSUBPD,\n+    UNKNOWN, (int)MULTI_ARG_3_DF },\n+  { OPTION_MASK_ISA_FMA | OPTION_MASK_ISA_FMA4, CODE_FOR_fmaddsub_v8sf,\n+    \"__builtin_ia32_vfmaddsubps256\", IX86_BUILTIN_VFMADDSUBPS256,\n+    UNKNOWN, (int)MULTI_ARG_3_SF2 },\n+  { OPTION_MASK_ISA_FMA | OPTION_MASK_ISA_FMA4, CODE_FOR_fmaddsub_v4df,\n+    \"__builtin_ia32_vfmaddsubpd256\", IX86_BUILTIN_VFMADDSUBPD256,\n+    UNKNOWN, (int)MULTI_ARG_3_DF2 },\n \n   { OPTION_MASK_ISA_XOP, CODE_FOR_xop_pcmov_v2di,        \"__builtin_ia32_vpcmov\",      IX86_BUILTIN_VPCMOV,\t UNKNOWN,      (int)MULTI_ARG_3_DI },\n   { OPTION_MASK_ISA_XOP, CODE_FOR_xop_pcmov_v2di,        \"__builtin_ia32_vpcmov_v2di\", IX86_BUILTIN_VPCMOV_V2DI, UNKNOWN,      (int)MULTI_ARG_3_DI },"}, {"sha": "2402c705893795b8543e9699877b2e304690a73d", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 217, "deletions": 60, "changes": 277, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/351877cf314ab2874d576832691f273395e591f7/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/351877cf314ab2874d576832691f273395e591f7/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=351877cf314ab2874d576832691f273395e591f7", "patch": "@@ -1770,13 +1770,24 @@\n \n ;; Intrinsic FMA operations.\n \n+;; The standard name for fma is only available with SSE math enabled.\n (define_expand \"fma<mode>4\"\n   [(set (match_operand:FMAMODE 0 \"register_operand\")\n \t(fma:FMAMODE\n \t  (match_operand:FMAMODE 1 \"nonimmediate_operand\")\n \t  (match_operand:FMAMODE 2 \"nonimmediate_operand\")\n \t  (match_operand:FMAMODE 3 \"nonimmediate_operand\")))]\n-  \"TARGET_FMA4\"\n+  \"(TARGET_FMA || TARGET_FMA4) && TARGET_SSE_MATH\"\n+  \"\")\n+\n+;; The builtin for fma4intrin.h is not constrained by SSE math enabled.\n+(define_expand \"fma4i_fmadd_<mode>\"\n+  [(set (match_operand:FMAMODE 0 \"register_operand\")\n+\t(fma:FMAMODE\n+\t  (match_operand:FMAMODE 1 \"nonimmediate_operand\")\n+\t  (match_operand:FMAMODE 2 \"nonimmediate_operand\")\n+\t  (match_operand:FMAMODE 3 \"nonimmediate_operand\")))]\n+  \"TARGET_FMA || TARGET_FMA4\"\n   \"\")\n \n (define_insn \"*fma4i_fmadd_<mode>\"\n@@ -1904,61 +1915,6 @@\n   [(set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-;; Non-intrinsic versions, matched when fused-multiply-add is allowed.\n-\n-(define_insn \"*fma4_fmadd_<mode>\"\n-  [(set (match_operand:FMAMODE 0 \"register_operand\" \"=x,x\")\n-\t(plus:FMAMODE\n-\t (mult:FMAMODE\n-\t  (match_operand:FMAMODE 1 \"nonimmediate_operand\" \"%x,x\")\n-\t  (match_operand:FMAMODE 2 \"nonimmediate_operand\" \" x,m\"))\n-\t (match_operand:FMAMODE 3 \"nonimmediate_operand\"  \"xm,x\")))]\n-  \"TARGET_FMA4 && TARGET_FUSED_MADD\"\n-  \"vfmadd<ssemodesuffix>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n-  [(set_attr \"type\" \"ssemuladd\")\n-   (set_attr \"mode\" \"<MODE>\")])\n-\n-;; Floating multiply and subtract.\n-(define_insn \"*fma4_fmsub_<mode>\"\n-  [(set (match_operand:FMAMODE 0 \"register_operand\" \"=x,x\")\n-\t(minus:FMAMODE\n-\t (mult:FMAMODE\n-\t  (match_operand:FMAMODE 1 \"nonimmediate_operand\" \"%x,x\")\n-\t  (match_operand:FMAMODE 2 \"nonimmediate_operand\" \" x,m\"))\n-\t (match_operand:FMAMODE 3 \"nonimmediate_operand\"  \"xm,x\")))]\n-  \"TARGET_FMA4 && TARGET_FUSED_MADD\"\n-  \"vfmsub<ssemodesuffix>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n-  [(set_attr \"type\" \"ssemuladd\")\n-   (set_attr \"mode\" \"<MODE>\")])\n-\n-;; Floating point negative multiply and add.\n-;; Rewrite (- (a * b) + c) into the canonical form: c - (a * b).\n-(define_insn \"*fma4_fnmadd_<mode>\"\n-  [(set (match_operand:FMAMODE 0 \"register_operand\" \"=x,x\")\n-\t(minus:FMAMODE\n-\t (match_operand:FMAMODE 3 \"nonimmediate_operand\"  \"xm,x\")\n-\t (mult:FMAMODE\n-\t  (match_operand:FMAMODE 1 \"nonimmediate_operand\" \"%x,x\")\n-\t  (match_operand:FMAMODE 2 \"nonimmediate_operand\" \" x,m\"))))]\n-  \"TARGET_FMA4 && TARGET_FUSED_MADD\"\n-  \"vfnmadd<ssemodesuffix>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n-  [(set_attr \"type\" \"ssemuladd\")\n-   (set_attr \"mode\" \"<MODE>\")])\n-\n-;; Floating point negative multiply and subtract.\n-(define_insn \"*fma4_fnmsub_<mode>\"\n-  [(set (match_operand:FMAMODE 0 \"register_operand\" \"=x,x\")\n-\t(minus:FMAMODE\n-\t (mult:FMAMODE\n-\t  (neg:FMAMODE\n-\t   (match_operand:FMAMODE 1 \"nonimmediate_operand\" \"%x,x\"))\n-\t  (match_operand:FMAMODE 2 \"nonimmediate_operand\"  \" x,m\"))\n-\t (match_operand:FMAMODE 3 \"nonimmediate_operand\"   \"xm,x\")))]\n-  \"TARGET_FMA4 && TARGET_FUSED_MADD\"\n-  \"vfnmsub<ssemodesuffix>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n-  [(set_attr \"type\" \"ssemuladd\")\n-   (set_attr \"mode\" \"<MODE>\")])\n-\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n ;;\n ;; FMA4 Parallel floating point multiply addsub and subadd operations.\n@@ -1974,7 +1930,17 @@\n ;;\n ;; But this doesn't seem useful in practice.\n \n-(define_insn \"fma4i_fmaddsub_<mode>\"\n+(define_expand \"fmaddsub_<mode>\"\n+  [(set (match_operand:AVXMODEF2P 0 \"register_operand\")\n+\t(unspec:AVXMODEF2P\n+\t  [(match_operand:AVXMODEF2P 1 \"nonimmediate_operand\")\n+\t   (match_operand:AVXMODEF2P 2 \"nonimmediate_operand\")\n+\t   (match_operand:AVXMODEF2P 3 \"nonimmediate_operand\")]\n+\t  UNSPEC_FMADDSUB))]\n+  \"TARGET_FMA || TARGET_FMA4\"\n+  \"\")\n+\n+(define_insn \"*fma4_fmaddsub_<mode>\"\n   [(set (match_operand:AVXMODEF2P 0 \"register_operand\" \"=x,x\")\n \t(unspec:AVXMODEF2P\n \t  [(match_operand:AVXMODEF2P 1 \"nonimmediate_operand\" \"%x,x\")\n@@ -1984,9 +1950,9 @@\n   \"TARGET_FMA4\"\n   \"vfmaddsubps\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"type\" \"ssemuladd\")\n-   (set_attr \"mode\" \"V8SF\")])\n+   (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"*fma4i_fmsubadd_<mode>\"\n+(define_insn \"*fma4_fmsubadd_<mode>\"\n   [(set (match_operand:AVXMODEF2P 0 \"register_operand\" \"=x,x\")\n \t(unspec:AVXMODEF2P\n \t  [(match_operand:AVXMODEF2P 1 \"nonimmediate_operand\" \"%x,x\")\n@@ -1997,7 +1963,198 @@\n   \"TARGET_FMA4\"\n   \"vfmsubaddps\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"type\" \"ssemuladd\")\n-   (set_attr \"mode\" \"V8SF\")])\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n+;;\n+;; FMA3 floating point multiply/accumulate instructions.\n+;;\n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n+\n+(define_insn \"*fma_fmadd_<mode>\"\n+  [(set (match_operand:FMAMODE 0 \"register_operand\" \"=x,x,x\")\n+\t(fma:FMAMODE\n+\t  (match_operand:FMAMODE 1 \"nonimmediate_operand\" \"%0, 0,x\")\n+\t  (match_operand:FMAMODE 2 \"nonimmediate_operand\" \"xm, x,xm\")\n+\t  (match_operand:FMAMODE 3 \"nonimmediate_operand\" \" x,xm,0\")))]\n+  \"TARGET_FMA\"\n+  \"@\n+   vfmadd132<ssemodesuffix>\\t{%2, %3, %0|%0, %3, %2}\n+   vfmadd312<ssemodesuffix>\\t{%3, %2, %0|%0, %2, %3}\n+   vfmadd231<ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"type\" \"ssemuladd\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"*fma_fmsub_<mode>\"\n+  [(set (match_operand:FMAMODE 0 \"register_operand\" \"=x,x,x\")\n+\t(fma:FMAMODE\n+\t  (match_operand:FMAMODE   1 \"nonimmediate_operand\" \"%0, 0,x\")\n+\t  (match_operand:FMAMODE   2 \"nonimmediate_operand\" \"xm, x,xm\")\n+\t  (neg:FMAMODE\n+\t    (match_operand:FMAMODE 3 \"nonimmediate_operand\" \" x,xm,0\"))))]\n+  \"TARGET_FMA\"\n+  \"@\n+   vfmsub132<ssemodesuffix>\\t{%2, %3, %0|%0, %3, %2}\n+   vfmsub312<ssemodesuffix>\\t{%3, %2, %0|%0, %2, %3}\n+   vfmsub231<ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"type\" \"ssemuladd\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"*fma_fmadd_<mode>\"\n+  [(set (match_operand:FMAMODE 0 \"register_operand\" \"=x,x,x\")\n+\t(fma:FMAMODE\n+\t  (neg:FMAMODE\n+\t    (match_operand:FMAMODE 1 \"nonimmediate_operand\" \"%0, 0,x\"))\n+\t  (match_operand:FMAMODE   2 \"nonimmediate_operand\" \"xm, x,xm\")\n+\t  (match_operand:FMAMODE   3 \"nonimmediate_operand\" \" x,xm,0\")))]\n+  \"TARGET_FMA\"\n+  \"@\n+   vfnmadd132<ssemodesuffix>\\t{%2, %3, %0|%0, %3, %2}\n+   vfnmadd312<ssemodesuffix>\\t{%3, %2, %0|%0, %2, %3}\n+   vfnmadd231<ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"type\" \"ssemuladd\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"*fma_fmsub_<mode>\"\n+  [(set (match_operand:FMAMODE 0 \"register_operand\" \"=x,x,x\")\n+\t(fma:FMAMODE\n+\t  (neg:FMAMODE\n+\t    (match_operand:FMAMODE 1 \"nonimmediate_operand\" \"%0, 0,x\"))\n+\t  (match_operand:FMAMODE   2 \"nonimmediate_operand\" \"xm, x,xm\")\n+\t  (neg:FMAMODE\n+\t    (match_operand:FMAMODE 3 \"nonimmediate_operand\" \" x,xm,0\"))))]\n+  \"TARGET_FMA\"\n+  \"@\n+   vfnmsub132<ssemodesuffix>\\t{%2, %3, %0|%0, %3, %2}\n+   vfnmsub312<ssemodesuffix>\\t{%3, %2, %0|%0, %2, %3}\n+   vfnmsub231<ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"type\" \"ssemuladd\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"*fma_fmaddsub_<mode>\"\n+  [(set (match_operand:AVXMODEF2P 0 \"register_operand\" \"=x,x,x\")\n+\t(unspec:AVXMODEF2P\n+\t  [(match_operand:AVXMODEF2P 1 \"nonimmediate_operand\" \"%0, 0,x\")\n+\t   (match_operand:AVXMODEF2P 2 \"nonimmediate_operand\" \"xm, x,xm\")\n+\t   (match_operand:AVXMODEF2P 3 \"nonimmediate_operand\" \" x,xm,0\")]\n+\t  UNSPEC_FMADDSUB))]\n+  \"TARGET_FMA\"\n+  \"@\n+   vfmaddsub132<ssemodesuffix>\\t{%2, %3, %0|%0, %3, %2}\n+   vfmaddsub213<ssemodesuffix>\\t{%3, %2, %0|%0, %2, %3}\n+   vfmaddsub231<ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"type\" \"ssemuladd\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"*fma_fmsubadd_<mode>\"\n+  [(set (match_operand:AVXMODEF2P 0 \"register_operand\" \"=x,x,x\")\n+\t(unspec:AVXMODEF2P\n+\t  [(match_operand:AVXMODEF2P   1 \"nonimmediate_operand\" \"%0, 0,x\")\n+\t   (match_operand:AVXMODEF2P   2 \"nonimmediate_operand\" \"xm, x,xm\")\n+\t   (neg:AVXMODEF2P\n+\t     (match_operand:AVXMODEF2P 3 \"nonimmediate_operand\" \" x,xm,0\"))]\n+\t  UNSPEC_FMADDSUB))]\n+  \"TARGET_FMA\"\n+  \"@\n+   vfmsubadd132<ssemodesuffix>\\t{%2, %3, %0|%0, %3, %2}\n+   vfmsubadd213<ssemodesuffix>\\t{%3, %2, %0|%0, %2, %3}\n+   vfmsubadd231<ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"type\" \"ssemuladd\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n+;;\n+;; Non-intrinsic versions, matched when fused-multiply-add is allowed.\n+;;\n+;; ??? If fused-madd were a generic flag, combine could do this without\n+;; needing splitters here in the backend.  Irritatingly, combine won't\n+;; recognize many of these with mere splits, since only 3 or more insns\n+;; are allowed to split during combine.  Thankfully, there's always a\n+;; split_all_insns pass that runs before reload.\n+;;\n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n+\n+(define_insn_and_split \"*split_fma\"\n+  [(set (match_operand:FMAMODE 0 \"register_operand\")\n+\t(plus:FMAMODE\n+\t  (mult:FMAMODE\n+\t    (match_operand:FMAMODE 1 \"nonimmediate_operand\")\n+\t    (match_operand:FMAMODE 2 \"nonimmediate_operand\"))\n+\t  (match_operand:FMAMODE 3 \"nonimmediate_operand\")))]\n+  \"TARGET_SSE_MATH && TARGET_FUSED_MADD\n+   && (TARGET_FMA || TARGET_FMA4)\n+   && !(reload_in_progress || reload_completed)\"\n+  { gcc_unreachable (); }\n+  \"&& 1\"\n+  [(set (match_dup 0)\n+\t(fma:FMAMODE\n+\t  (match_dup 1)\n+\t  (match_dup 2)\n+\t  (match_dup 3)))]\n+  \"\")\n+\n+;; Floating multiply and subtract.\n+(define_insn_and_split \"*split_fms\"\n+  [(set (match_operand:FMAMODE 0 \"register_operand\")\n+\t(minus:FMAMODE\n+\t  (mult:FMAMODE\n+\t    (match_operand:FMAMODE 1 \"nonimmediate_operand\")\n+\t    (match_operand:FMAMODE 2 \"nonimmediate_operand\"))\n+\t  (match_operand:FMAMODE 3 \"nonimmediate_operand\")))]\n+  \"TARGET_SSE_MATH && TARGET_FUSED_MADD\n+   && (TARGET_FMA || TARGET_FMA4)\n+   && !(reload_in_progress || reload_completed)\"\n+  { gcc_unreachable (); }\n+  \"&& 1\"\n+  [(set (match_dup 0)\n+\t(fma:FMAMODE\n+\t  (match_dup 1)\n+\t  (match_dup 2)\n+\t  (neg:FMAMODE (match_dup 3))))]\n+  \"\")\n+\n+;; Floating point negative multiply and add.\n+;; Recognize (-a * b + c) via the canonical form: c - (a * b).\n+(define_insn_and_split \"*split_fnma\"\n+  [(set (match_operand:FMAMODE 0 \"register_operand\")\n+\t(minus:FMAMODE\n+\t (match_operand:FMAMODE 3 \"nonimmediate_operand\")\n+\t (mult:FMAMODE\n+\t  (match_operand:FMAMODE 1 \"nonimmediate_operand\")\n+\t  (match_operand:FMAMODE 2 \"nonimmediate_operand\"))))]\n+  \"TARGET_SSE_MATH && TARGET_FUSED_MADD\n+   && (TARGET_FMA || TARGET_FMA4)\n+   && !(reload_in_progress || reload_completed)\"\n+  { gcc_unreachable (); }\n+  \"&& 1\"\n+  [(set (match_dup 0)\n+\t(fma:FMAMODE\n+\t  (neg:FMAMODE (match_dup 1))\n+\t  (match_dup 2)\n+\t  (match_dup 3)))]\n+  \"\")\n+\n+;; Floating point negative multiply and subtract.\n+;; Recognize (-a * b - c) via the canonical form: c - (-a * b).\n+(define_insn_and_split \"*split_fnms\"\n+  [(set (match_operand:FMAMODE 0 \"register_operand\")\n+\t(minus:FMAMODE\n+\t  (mult:FMAMODE\n+\t    (neg:FMAMODE\n+\t      (match_operand:FMAMODE 1 \"nonimmediate_operand\"))\n+\t    (match_operand:FMAMODE 2 \"nonimmediate_operand\"))\n+\t (match_operand:FMAMODE 3 \"nonimmediate_operand\")))]\n+  \"TARGET_SSE_MATH && TARGET_FUSED_MADD\n+   && (TARGET_FMA || TARGET_FMA4)\n+   && !(reload_in_progress || reload_completed)\"\n+  { gcc_unreachable (); }\n+  \"&& 1\"\n+  [(set (match_dup 0)\n+\t(fma:FMAMODE\n+\t  (neg:FMAMODE (match_dup 1))\n+\t  (match_dup 2)\n+\t  (neg:FMAMODE (match_dup 3))))]\n+  \"\")\n \n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n ;;"}, {"sha": "949a391ba72b4ada91e626c260752e63ee3490ac", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/351877cf314ab2874d576832691f273395e591f7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/351877cf314ab2874d576832691f273395e591f7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=351877cf314ab2874d576832691f273395e591f7", "patch": "@@ -1,3 +1,9 @@\n+2010-10-19  Richard Henderson  <rth@redhat.com>\n+\n+\t* gcc.target/i386/fma3-fma.c: New.\n+\t* gcc.target/i386/fma3-builtin.c: New.\n+\t* gcc.target/i386/fma4-builtin.c: New.\n+\n 2010-10-19  Richard Guenther  <rguenther@suse.de>\n \n \tPR testsuite/46081"}, {"sha": "ba8af5520e70497de3e09ddcb8c22d733827eb25", "filename": "gcc/testsuite/gcc.target/i386/fma3-builtin.c", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/351877cf314ab2874d576832691f273395e591f7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffma3-builtin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/351877cf314ab2874d576832691f273395e591f7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffma3-builtin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffma3-builtin.c?ref=351877cf314ab2874d576832691f273395e591f7", "patch": "@@ -0,0 +1,82 @@\n+/* Test that the compiler properly generates floating point multiply\n+   and add instructions FMA3 systems.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-options \"-O2 -mfma -mno-fma4\" } */\n+\n+#ifndef __FP_FAST_FMAF\n+# error \"__FP_FAST_FMAF should be defined\"\n+#endif\n+#ifndef __FP_FAST_FMA\n+# error \"__FP_FAST_FMA should be defined\"\n+#endif\n+\n+float\n+flt_mul_add (float a, float b, float c)\n+{\n+  return __builtin_fmaf (a, b, c);\n+}\n+\n+double\n+dbl_mul_add (double a, double b, double c)\n+{\n+  return __builtin_fma (a, b, c);\n+}\n+\n+float\n+flt_mul_sub (float a, float b, float c)\n+{\n+  return __builtin_fmaf (a, b, -c);\n+}\n+\n+double\n+dbl_mul_sub (double a, double b, double c)\n+{\n+  return __builtin_fma (a, b, -c);\n+}\n+\n+float\n+flt_neg_mul_add_1 (float a, float b, float c)\n+{\n+  return __builtin_fmaf (-a, b, c);\n+}\n+\n+double\n+dbl_neg_mul_add_1 (double a, double b, double c)\n+{\n+  return __builtin_fma (-a, b, c);\n+}\n+\n+float\n+flt_neg_mul_add_2 (float a, float b, float c)\n+{\n+  return __builtin_fmaf (a, -b, c);\n+}\n+\n+double\n+dbl_neg_mul_add_2 (double a, double b, double c)\n+{\n+  return __builtin_fma (a, -b, c);\n+}\n+\n+float\n+flt_neg_mul_sub (float a, float b, float c)\n+{\n+  return __builtin_fmaf (-a, b, -c);\n+}\n+\n+double\n+dbl_neg_mul_sub (double a, double b, double c)\n+{\n+  return __builtin_fma (-a, b, -c);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vfmadd...ss\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfmadd...sd\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfmsub...ss\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfmsub...sd\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfnmadd...ss\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vfnmadd...sd\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vfnmsub...ss\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfnmsub...sd\" 1 } } */"}, {"sha": "1cedba8ddc300adf57e79927b51ccd87b309f96a", "filename": "gcc/testsuite/gcc.target/i386/fma3-fma.c", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/351877cf314ab2874d576832691f273395e591f7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffma3-fma.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/351877cf314ab2874d576832691f273395e591f7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffma3-fma.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffma3-fma.c?ref=351877cf314ab2874d576832691f273395e591f7", "patch": "@@ -0,0 +1,82 @@\n+/* Test that the compiler properly optimizes floating point multiply\n+   and add instructions FMA3 systems.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-options \"-O2 -mfma -mno-fma4\" } */\n+\n+extern void exit (int);\n+\n+float\n+flt_mul_add (float a, float b, float c)\n+{\n+  return (a * b) + c;\n+}\n+\n+double\n+dbl_mul_add (double a, double b, double c)\n+{\n+  return (a * b) + c;\n+}\n+\n+float\n+flt_mul_sub (float a, float b, float c)\n+{\n+  return (a * b) - c;\n+}\n+\n+double\n+dbl_mul_sub (double a, double b, double c)\n+{\n+  return (a * b) - c;\n+}\n+\n+float\n+flt_neg_mul_add (float a, float b, float c)\n+{\n+  return (-(a * b)) + c;\n+}\n+\n+double\n+dbl_neg_mul_add (double a, double b, double c)\n+{\n+  return (-(a * b)) + c;\n+}\n+\n+float\n+flt_neg_mul_sub (float a, float b, float c)\n+{\n+  return (-(a * b)) - c;\n+}\n+\n+double\n+dbl_neg_mul_sub (double a, double b, double c)\n+{\n+  return (-(a * b)) - c;\n+}\n+\n+float  f[10] = { 2, 3, 4 };\n+double d[10] = { 2, 3, 4 };\n+\n+int main ()\n+{\n+  f[3] = flt_mul_add (f[0], f[1], f[2]);\n+  f[4] = flt_mul_sub (f[0], f[1], f[2]);\n+  f[5] = flt_neg_mul_add (f[0], f[1], f[2]);\n+  f[6] = flt_neg_mul_sub (f[0], f[1], f[2]);\n+\n+  d[3] = dbl_mul_add (d[0], d[1], d[2]);\n+  d[4] = dbl_mul_sub (d[0], d[1], d[2]);\n+  d[5] = dbl_neg_mul_add (d[0], d[1], d[2]);\n+  d[6] = dbl_neg_mul_sub (d[0], d[1], d[2]);\n+  exit (0);\n+}\n+\n+/* { dg-final { scan-assembler \"vfmadd...ss\" } } */\n+/* { dg-final { scan-assembler \"vfmadd...sd\" } } */\n+/* { dg-final { scan-assembler \"vfmsub...ss\" } } */\n+/* { dg-final { scan-assembler \"vfmsub...sd\" } } */\n+/* { dg-final { scan-assembler \"vfnmadd...ss\" } } */\n+/* { dg-final { scan-assembler \"vfnmadd...sd\" } } */\n+/* { dg-final { scan-assembler \"vfnmsub...ss\" } } */\n+/* { dg-final { scan-assembler \"vfnmsub...sd\" } } */"}, {"sha": "5659cf4f02f6605f3ac5e14133b630840482dc4e", "filename": "gcc/testsuite/gcc.target/i386/fma4-builtin.c", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/351877cf314ab2874d576832691f273395e591f7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffma4-builtin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/351877cf314ab2874d576832691f273395e591f7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffma4-builtin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffma4-builtin.c?ref=351877cf314ab2874d576832691f273395e591f7", "patch": "@@ -0,0 +1,82 @@\n+/* Test that the compiler properly generates floating point multiply\n+   and add instructions FMA4 systems.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-options \"-O2 -mfma4\" } */\n+\n+#ifndef __FP_FAST_FMAF\n+# error \"__FP_FAST_FMAF should be defined\"\n+#endif\n+#ifndef __FP_FAST_FMA\n+# error \"__FP_FAST_FMA should be defined\"\n+#endif\n+\n+float\n+flt_mul_add (float a, float b, float c)\n+{\n+  return __builtin_fmaf (a, b, c);\n+}\n+\n+double\n+dbl_mul_add (double a, double b, double c)\n+{\n+  return __builtin_fma (a, b, c);\n+}\n+\n+float\n+flt_mul_sub (float a, float b, float c)\n+{\n+  return __builtin_fmaf (a, b, -c);\n+}\n+\n+double\n+dbl_mul_sub (double a, double b, double c)\n+{\n+  return __builtin_fma (a, b, -c);\n+}\n+\n+float\n+flt_neg_mul_add_1 (float a, float b, float c)\n+{\n+  return __builtin_fmaf (-a, b, c);\n+}\n+\n+double\n+dbl_neg_mul_add_1 (double a, double b, double c)\n+{\n+  return __builtin_fma (-a, b, c);\n+}\n+\n+float\n+flt_neg_mul_add_2 (float a, float b, float c)\n+{\n+  return __builtin_fmaf (a, -b, c);\n+}\n+\n+double\n+dbl_neg_mul_add_2 (double a, double b, double c)\n+{\n+  return __builtin_fma (a, -b, c);\n+}\n+\n+float\n+flt_neg_mul_sub (float a, float b, float c)\n+{\n+  return __builtin_fmaf (-a, b, -c);\n+}\n+\n+double\n+dbl_neg_mul_sub (double a, double b, double c)\n+{\n+  return __builtin_fma (-a, b, -c);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vfmaddss\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfmaddsd\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfmsubss\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfmsubsd\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfnmaddss\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vfnmaddsd\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vfnmsubss\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfnmsubsd\" 1 } } */"}]}