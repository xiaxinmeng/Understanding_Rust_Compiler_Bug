{"sha": "f7a148304a71f3d3ad6845b7966fdc3af88c9e45", "node_id": "C_kwDOANBUbNoAKGY3YTE0ODMwNGE3MWYzZDNhZDY4NDViNzk2NmZkYzNhZjg4YzllNDU", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-07-01T10:40:29Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-07-01T10:50:18Z"}, "message": "libstdc++: Add nodiscard attribute to filesystem operations\n\nSome of these are not truly \"pure\" because they access the file system,\ne.g. exists and file_size, but they do not modify anything and are only\nuseful for the return value.\n\nIf you really want to use one of those functions just to check whether\nan error is reported (either via an exception or an error_code&\nargument) you can still do so, but you need to cast the discarded result\nto void.  Several tests need such a change, because they were indeed\nonly calling the functions to check for expected errors.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/fs_ops.h: Add nodiscard to all pure functions.\n\t* include/experimental/bits/fs_ops.h: Likewise.\n\t* testsuite/27_io/filesystem/operations/all.cc: Do not discard\n\tresults of absolute and canonical.\n\t* testsuite/27_io/filesystem/operations/absolute.cc: Cast\n\tdiscarded result to void.\n\t* testsuite/27_io/filesystem/operations/canonical.cc: Likewise.\n\t* testsuite/27_io/filesystem/operations/exists.cc: Likewise.\n\t* testsuite/27_io/filesystem/operations/is_empty.cc: Likewise.\n\t* testsuite/27_io/filesystem/operations/read_symlink.cc:\n\tLikewise.\n\t* testsuite/27_io/filesystem/operations/status.cc: Likewise.\n\t* testsuite/27_io/filesystem/operations/symlink_status.cc:\n\tLikewise.\n\t* testsuite/27_io/filesystem/operations/temp_directory_path.cc:\n\tLikewise.\n\t* testsuite/experimental/filesystem/operations/canonical.cc:\n\tLikewise.\n\t* testsuite/experimental/filesystem/operations/exists.cc:\n\tLikewise.\n\t* testsuite/experimental/filesystem/operations/is_empty.cc:\n\tLikewise.\n\t* testsuite/experimental/filesystem/operations/read_symlink.cc:\n\tLikewise.\n\t* testsuite/experimental/filesystem/operations/temp_directory_path.cc:\n\tLikewise.", "tree": {"sha": "169d21fb9e406517c960e42f57c529a5e56589f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/169d21fb9e406517c960e42f57c529a5e56589f3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f7a148304a71f3d3ad6845b7966fdc3af88c9e45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7a148304a71f3d3ad6845b7966fdc3af88c9e45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7a148304a71f3d3ad6845b7966fdc3af88c9e45", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7a148304a71f3d3ad6845b7966fdc3af88c9e45/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7780dc5b2d02785186583fc8eced3c9e3aec4552", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7780dc5b2d02785186583fc8eced3c9e3aec4552", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7780dc5b2d02785186583fc8eced3c9e3aec4552"}], "stats": {"total": 198, "additions": 174, "deletions": 24}, "files": [{"sha": "1ae8fe12374df758019b148737381e08c209c5e7", "filename": "libstdc++-v3/include/bits/fs_ops.h", "status": "modified", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7a148304a71f3d3ad6845b7966fdc3af88c9e45/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_ops.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7a148304a71f3d3ad6845b7966fdc3af88c9e45/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_ops.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_ops.h?ref=f7a148304a71f3d3ad6845b7966fdc3af88c9e45", "patch": "@@ -44,10 +44,16 @@ namespace filesystem\n    *  @{\n    */\n \n+  [[nodiscard]]\n   path absolute(const path& __p);\n+\n+  [[nodiscard]]\n   path absolute(const path& __p, error_code& __ec);\n \n+  [[nodiscard]]\n   path canonical(const path& __p);\n+\n+  [[nodiscard]]\n   path canonical(const path& __p, error_code& __ec);\n \n   inline void\n@@ -100,25 +106,34 @@ namespace filesystem\n   void create_symlink(const path& __to, const path& __new_symlink,\n \t\t      error_code& __ec) noexcept;\n \n+  [[nodiscard]]\n   path current_path();\n+\n+  [[nodiscard]]\n   path current_path(error_code& __ec);\n+\n   void current_path(const path& __p);\n   void current_path(const path& __p, error_code& __ec) noexcept;\n \n+  [[nodiscard]]\n   bool\n   equivalent(const path& __p1, const path& __p2);\n \n+  [[nodiscard]]\n   bool\n   equivalent(const path& __p1, const path& __p2, error_code& __ec) noexcept;\n \n+  [[nodiscard]]\n   inline bool\n   exists(file_status __s) noexcept\n   { return status_known(__s) && __s.type() != file_type::not_found; }\n \n+  [[nodiscard]]\n   inline bool\n   exists(const path& __p)\n   { return exists(status(__p)); }\n \n+  [[nodiscard]]\n   inline bool\n   exists(const path& __p, error_code& __ec) noexcept\n   {\n@@ -131,116 +146,153 @@ namespace filesystem\n     return false;\n   }\n \n+  [[nodiscard]]\n   uintmax_t file_size(const path& __p);\n+\n+  [[nodiscard]]\n   uintmax_t file_size(const path& __p, error_code& __ec) noexcept;\n \n+  [[nodiscard]]\n   uintmax_t hard_link_count(const path& __p);\n+\n+  [[nodiscard]]\n   uintmax_t hard_link_count(const path& __p, error_code& __ec) noexcept;\n \n+  [[nodiscard]]\n   inline bool\n   is_block_file(file_status __s) noexcept\n   { return __s.type() == file_type::block; }\n \n+  [[nodiscard]]\n   inline bool\n   is_block_file(const path& __p)\n   { return is_block_file(status(__p)); }\n \n+  [[nodiscard]]\n   inline bool\n   is_block_file(const path& __p, error_code& __ec) noexcept\n   { return is_block_file(status(__p, __ec)); }\n \n+  [[nodiscard]]\n   inline bool\n   is_character_file(file_status __s) noexcept\n   { return __s.type() == file_type::character; }\n \n+  [[nodiscard]]\n   inline bool\n   is_character_file(const path& __p)\n   { return is_character_file(status(__p)); }\n \n+  [[nodiscard]]\n   inline bool\n   is_character_file(const path& __p, error_code& __ec) noexcept\n   { return is_character_file(status(__p, __ec)); }\n \n+  [[nodiscard]]\n   inline bool\n   is_directory(file_status __s) noexcept\n   { return __s.type() == file_type::directory; }\n \n+  [[nodiscard]]\n   inline bool\n   is_directory(const path& __p)\n   { return is_directory(status(__p)); }\n \n+  [[nodiscard]]\n   inline bool\n   is_directory(const path& __p, error_code& __ec) noexcept\n   { return is_directory(status(__p, __ec)); }\n \n+  [[nodiscard]]\n   bool is_empty(const path& __p);\n+\n+  [[nodiscard]]\n   bool is_empty(const path& __p, error_code& __ec);\n \n+  [[nodiscard]]\n   inline bool\n   is_fifo(file_status __s) noexcept\n   { return __s.type() == file_type::fifo; }\n \n+  [[nodiscard]]\n   inline bool\n   is_fifo(const path& __p)\n   { return is_fifo(status(__p)); }\n \n+  [[nodiscard]]\n   inline bool\n   is_fifo(const path& __p, error_code& __ec) noexcept\n   { return is_fifo(status(__p, __ec)); }\n \n+  [[nodiscard]]\n   inline bool\n   is_other(file_status __s) noexcept\n   {\n     return exists(__s) && !is_regular_file(__s) && !is_directory(__s)\n       && !is_symlink(__s);\n   }\n \n+  [[nodiscard]]\n   inline bool\n   is_other(const path& __p)\n   { return is_other(status(__p)); }\n \n+  [[nodiscard]]\n   inline bool\n   is_other(const path& __p, error_code& __ec) noexcept\n   { return is_other(status(__p, __ec)); }\n \n+  [[nodiscard]]\n   inline bool\n   is_regular_file(file_status __s) noexcept\n   { return __s.type() == file_type::regular; }\n \n+  [[nodiscard]]\n   inline bool\n   is_regular_file(const path& __p)\n   { return is_regular_file(status(__p)); }\n \n+  [[nodiscard]]\n   inline bool\n   is_regular_file(const path& __p, error_code& __ec) noexcept\n   { return is_regular_file(status(__p, __ec)); }\n \n+  [[nodiscard]]\n   inline bool\n   is_socket(file_status __s) noexcept\n   { return __s.type() == file_type::socket; }\n \n+  [[nodiscard]]\n   inline bool\n   is_socket(const path& __p)\n   { return is_socket(status(__p)); }\n \n+  [[nodiscard]]\n   inline bool\n   is_socket(const path& __p, error_code& __ec) noexcept\n   { return is_socket(status(__p, __ec)); }\n \n+  [[nodiscard]]\n   inline bool\n   is_symlink(file_status __s) noexcept\n   { return __s.type() == file_type::symlink; }\n \n+  [[nodiscard]]\n   inline bool\n   is_symlink(const path& __p)\n   { return is_symlink(symlink_status(__p)); }\n \n+  [[nodiscard]]\n   inline bool\n   is_symlink(const path& __p, error_code& __ec) noexcept\n   { return is_symlink(symlink_status(__p, __ec)); }\n \n+  [[nodiscard]]\n   file_time_type  last_write_time(const path& __p);\n+\n+  [[nodiscard]]\n   file_time_type  last_write_time(const path& __p, error_code& __ec) noexcept;\n+\n   void last_write_time(const path& __p, file_time_type __new_time);\n   void last_write_time(const path& __p, file_time_type __new_time,\n \t\t       error_code& __ec) noexcept;\n@@ -257,19 +309,30 @@ namespace filesystem\n   permissions(const path& __p, perms __prms, perm_options __opts,\n \t      error_code& __ec) noexcept;\n \n+  [[nodiscard]]\n   inline path proximate(const path& __p, error_code& __ec)\n   { return proximate(__p, current_path(), __ec); }\n \n+  [[nodiscard]]\n   path proximate(const path& __p, const path& __base = current_path());\n+\n+  [[nodiscard]]\n   path proximate(const path& __p, const path& __base, error_code& __ec);\n \n+  [[nodiscard]]\n   path read_symlink(const path& __p);\n+\n+  [[nodiscard]]\n   path read_symlink(const path& __p, error_code& __ec);\n \n+  [[nodiscard]]\n   inline path relative(const path& __p, error_code& __ec)\n   { return relative(__p, current_path(), __ec); }\n \n+  [[nodiscard]]\n   path relative(const path& __p, const path& __base = current_path());\n+\n+  [[nodiscard]]\n   path relative(const path& __p, const path& __base, error_code& __ec);\n \n   bool remove(const path& __p);\n@@ -284,22 +347,38 @@ namespace filesystem\n   void resize_file(const path& __p, uintmax_t __size);\n   void resize_file(const path& __p, uintmax_t __size, error_code& __ec) noexcept;\n \n+  [[nodiscard]]\n   space_info space(const path& __p);\n+\n+  [[nodiscard]]\n   space_info space(const path& __p, error_code& __ec) noexcept;\n \n+  [[nodiscard]]\n   file_status status(const path& __p);\n+\n+  [[nodiscard]]\n   file_status status(const path& __p, error_code& __ec) noexcept;\n \n+  [[nodiscard]]\n   inline bool status_known(file_status __s) noexcept\n   { return __s.type() != file_type::none; }\n \n+  [[nodiscard]]\n   file_status symlink_status(const path& __p);\n+\n+  [[nodiscard]]\n   file_status symlink_status(const path& __p, error_code& __ec) noexcept;\n \n+  [[nodiscard]]\n   path temp_directory_path();\n+\n+  [[nodiscard]]\n   path temp_directory_path(error_code& __ec);\n \n+  [[nodiscard]]\n   path weakly_canonical(const path& __p);\n+\n+  [[nodiscard]]\n   path weakly_canonical(const path& __p, error_code& __ec);\n \n   /// @} group filesystem"}, {"sha": "e37dc9ae81117eded0559cc896385eb206d79dd9", "filename": "libstdc++-v3/include/experimental/bits/fs_ops.h", "status": "modified", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7a148304a71f3d3ad6845b7966fdc3af88c9e45/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ffs_ops.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7a148304a71f3d3ad6845b7966fdc3af88c9e45/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ffs_ops.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ffs_ops.h?ref=f7a148304a71f3d3ad6845b7966fdc3af88c9e45", "patch": "@@ -51,10 +51,16 @@ inline namespace v1\n    * @{\n    */\n \n+  [[__nodiscard__]]\n   path absolute(const path& __p, const path& __base = current_path());\n \n+  [[__nodiscard__]]\n   path canonical(const path& __p, const path& __base = current_path());\n+\n+  [[__nodiscard__]]\n   path canonical(const path& __p, error_code& __ec);\n+\n+  [[__nodiscard__]]\n   path canonical(const path& __p, const path& __base, error_code& __ec);\n \n   inline void\n@@ -66,6 +72,7 @@ inline namespace v1\n   { copy(__from, __to, copy_options::none, __ec); }\n \n   void copy(const path& __from, const path& __to, copy_options __options);\n+\n   void copy(const path& __from, const path& __to, copy_options __options,\n \t    error_code& __ec) noexcept;\n \n@@ -107,25 +114,34 @@ inline namespace v1\n   void create_symlink(const path& __to, const path& __new_symlink,\n \t\t      error_code& __ec) noexcept;\n \n+  [[__nodiscard__]]\n   path current_path();\n+\n+  [[__nodiscard__]]\n   path current_path(error_code& __ec);\n+\n   void current_path(const path& __p);\n   void current_path(const path& __p, error_code& __ec) noexcept;\n \n+  [[__nodiscard__]]\n   bool\n   equivalent(const path& __p1, const path& __p2);\n \n+  [[__nodiscard__]]\n   bool\n   equivalent(const path& __p1, const path& __p2, error_code& __ec) noexcept;\n \n+  [[__nodiscard__]]\n   inline bool\n   exists(file_status __s) noexcept\n   { return status_known(__s) && __s.type() != file_type::not_found; }\n \n+  [[__nodiscard__]]\n   inline bool\n   exists(const path& __p)\n   { return exists(status(__p)); }\n \n+  [[__nodiscard__]]\n   inline bool\n   exists(const path& __p, error_code& __ec) noexcept\n   {\n@@ -138,124 +154,163 @@ inline namespace v1\n     return false;\n   }\n \n+  [[__nodiscard__]]\n   uintmax_t file_size(const path& __p);\n+\n+  [[__nodiscard__]]\n   uintmax_t file_size(const path& __p, error_code& __ec) noexcept;\n \n+  [[__nodiscard__]]\n   uintmax_t hard_link_count(const path& __p);\n+\n+  [[__nodiscard__]]\n   uintmax_t hard_link_count(const path& __p, error_code& __ec) noexcept;\n \n+  [[__nodiscard__]]\n   inline bool\n   is_block_file(file_status __s) noexcept\n   { return __s.type() == file_type::block; }\n \n+  [[__nodiscard__]]\n   inline bool\n   is_block_file(const path& __p)\n   { return is_block_file(status(__p)); }\n \n+  [[__nodiscard__]]\n   inline bool\n   is_block_file(const path& __p, error_code& __ec) noexcept\n   { return is_block_file(status(__p, __ec)); }\n \n+  [[__nodiscard__]]\n   inline bool\n   is_character_file(file_status __s) noexcept\n   { return __s.type() == file_type::character; }\n \n+  [[__nodiscard__]]\n   inline bool\n   is_character_file(const path& __p)\n   { return is_character_file(status(__p)); }\n \n+  [[__nodiscard__]]\n   inline bool\n   is_character_file(const path& __p, error_code& __ec) noexcept\n   { return is_character_file(status(__p, __ec)); }\n \n+  [[__nodiscard__]]\n   inline bool\n   is_directory(file_status __s) noexcept\n   { return __s.type() == file_type::directory; }\n \n+  [[__nodiscard__]]\n   inline bool\n   is_directory(const path& __p)\n   { return is_directory(status(__p)); }\n \n+  [[__nodiscard__]]\n   inline bool\n   is_directory(const path& __p, error_code& __ec) noexcept\n   { return is_directory(status(__p, __ec)); }\n \n+  [[__nodiscard__]]\n   bool is_empty(const path& __p);\n+  [[__nodiscard__]]\n   bool is_empty(const path& __p, error_code& __ec) noexcept;\n \n+  [[__nodiscard__]]\n   inline bool\n   is_fifo(file_status __s) noexcept\n   { return __s.type() == file_type::fifo; }\n \n+  [[__nodiscard__]]\n   inline bool\n   is_fifo(const path& __p)\n   { return is_fifo(status(__p)); }\n \n+  [[__nodiscard__]]\n   inline bool\n   is_fifo(const path& __p, error_code& __ec) noexcept\n   { return is_fifo(status(__p, __ec)); }\n \n+  [[__nodiscard__]]\n   inline bool\n   is_other(file_status __s) noexcept\n   {\n     return exists(__s) && !is_regular_file(__s) && !is_directory(__s)\n       && !is_symlink(__s);\n   }\n \n+  [[__nodiscard__]]\n   inline bool\n   is_other(const path& __p)\n   { return is_other(status(__p)); }\n \n+  [[__nodiscard__]]\n   inline bool\n   is_other(const path& __p, error_code& __ec) noexcept\n   { return is_other(status(__p, __ec)); }\n \n+  [[__nodiscard__]]\n   inline bool\n   is_regular_file(file_status __s) noexcept\n   { return __s.type() == file_type::regular; }\n \n+  [[__nodiscard__]]\n   inline bool\n   is_regular_file(const path& __p)\n   { return is_regular_file(status(__p)); }\n \n+  [[__nodiscard__]]\n   inline bool\n   is_regular_file(const path& __p, error_code& __ec) noexcept\n   { return is_regular_file(status(__p, __ec)); }\n \n+  [[__nodiscard__]]\n   inline bool\n   is_socket(file_status __s) noexcept\n   { return __s.type() == file_type::socket; }\n \n+  [[__nodiscard__]]\n   inline bool\n   is_socket(const path& __p)\n   { return is_socket(status(__p)); }\n \n+  [[__nodiscard__]]\n   inline bool\n   is_socket(const path& __p, error_code& __ec) noexcept\n   { return is_socket(status(__p, __ec)); }\n \n+  [[__nodiscard__]]\n   inline bool\n   is_symlink(file_status __s) noexcept\n   { return __s.type() == file_type::symlink; }\n \n+  [[__nodiscard__]]\n   inline bool\n   is_symlink(const path& __p)\n   { return is_symlink(symlink_status(__p)); }\n \n+  [[__nodiscard__]]\n   inline bool\n   is_symlink(const path& __p, error_code& __ec) noexcept\n   { return is_symlink(symlink_status(__p, __ec)); }\n \n+  [[__nodiscard__]]\n   file_time_type  last_write_time(const path& __p);\n+\n+  [[__nodiscard__]]\n   file_time_type  last_write_time(const path& __p, error_code& __ec) noexcept;\n+\n   void last_write_time(const path& __p, file_time_type __new_time);\n   void last_write_time(const path& __p, file_time_type __new_time,\n \t\t       error_code& __ec) noexcept;\n \n   void permissions(const path& __p, perms __prms);\n   void permissions(const path& __p, perms __prms, error_code& __ec) noexcept;\n \n+  [[__nodiscard__]]\n   path read_symlink(const path& __p);\n+\n+  [[__nodiscard__]]\n   path read_symlink(const path& __p, error_code& __ec);\n \n   bool remove(const path& __p);\n@@ -270,22 +325,38 @@ inline namespace v1\n   void resize_file(const path& __p, uintmax_t __size);\n   void resize_file(const path& __p, uintmax_t __size, error_code& __ec) noexcept;\n \n+  [[__nodiscard__]]\n   space_info space(const path& __p);\n+\n+  [[__nodiscard__]]\n   space_info space(const path& __p, error_code& __ec) noexcept;\n \n+  [[__nodiscard__]]\n   file_status status(const path& __p);\n+\n+  [[__nodiscard__]]\n   file_status status(const path& __p, error_code& __ec) noexcept;\n \n+  [[__nodiscard__]]\n   inline bool status_known(file_status __s) noexcept\n   { return __s.type() != file_type::none; }\n \n+  [[__nodiscard__]]\n   file_status symlink_status(const path& __p);\n+\n+  [[__nodiscard__]]\n   file_status symlink_status(const path& __p, error_code& __ec) noexcept;\n \n+  [[__nodiscard__]]\n   path system_complete(const path& __p);\n+\n+  [[__nodiscard__]]\n   path system_complete(const path& __p, error_code& __ec);\n \n+  [[__nodiscard__]]\n   path temp_directory_path();\n+\n+  [[__nodiscard__]]\n   path temp_directory_path(error_code& __ec);\n \n   /// @} group filesystem-ts"}, {"sha": "295b755ada731923ccd1873b299b8616bebdf681", "filename": "libstdc++-v3/testsuite/27_io/filesystem/operations/absolute.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7a148304a71f3d3ad6845b7966fdc3af88c9e45/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fabsolute.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7a148304a71f3d3ad6845b7966fdc3af88c9e45/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fabsolute.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fabsolute.cc?ref=f7a148304a71f3d3ad6845b7966fdc3af88c9e45", "patch": "@@ -84,7 +84,7 @@ test03()\n   VERIFY( eabs.empty() );\n \n   try {\n-    absolute(path{});\n+    (void) absolute(path{});\n     VERIFY( false );\n   } catch (const std::filesystem::filesystem_error& e) {\n     VERIFY( e.code() == std::errc::invalid_argument );"}, {"sha": "3c8ab78b78ac55f6d58f1a909d060b2532119cf9", "filename": "libstdc++-v3/testsuite/27_io/filesystem/operations/all.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7a148304a71f3d3ad6845b7966fdc3af88c9e45/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fall.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7a148304a71f3d3ad6845b7966fdc3af88c9e45/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fall.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fall.cc?ref=f7a148304a71f3d3ad6845b7966fdc3af88c9e45", "patch": "@@ -42,11 +42,11 @@ main()\n   bool b [[maybe_unused]];\n   std::uintmax_t size;\n \n-  std::filesystem::absolute(p);\n-  std::filesystem::absolute(p, ec);\n+  p2 = std::filesystem::absolute(p);\n+  p2 = std::filesystem::absolute(p, ec);\n \n-  std::filesystem::canonical(p);\n-  std::filesystem::canonical(p, ec);\n+  p2 = std::filesystem::canonical(p);\n+  p2 = std::filesystem::canonical(p, ec);\n \n   std::filesystem::copy(p, p);\n   std::filesystem::copy(p, p, ec);"}, {"sha": "cb916a6f6b9c0ea4858e9fe67186be2d05c75ba9", "filename": "libstdc++-v3/testsuite/27_io/filesystem/operations/canonical.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7a148304a71f3d3ad6845b7966fdc3af88c9e45/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fcanonical.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7a148304a71f3d3ad6845b7966fdc3af88c9e45/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fcanonical.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fcanonical.cc?ref=f7a148304a71f3d3ad6845b7966fdc3af88c9e45", "patch": "@@ -31,7 +31,7 @@ test01()\n   const std::error_code bad_ec = make_error_code(std::errc::invalid_argument);\n   std::error_code ec;\n   auto p = __gnu_test::nonexistent_path();\n-  canonical( p, ec );\n+  (void) canonical( p, ec );\n   VERIFY( ec );\n \n   create_directory(p);\n@@ -90,7 +90,7 @@ test02()\n #if __cpp_exceptions\n   fs::path e1, e2;\n   try {\n-    canonical(p);\n+    (void) canonical(p);\n   } catch (const fs::filesystem_error& e) {\n     e1 = e.path1();\n     e2 = e.path2();"}, {"sha": "f9956970b253a1efd893b1f72f5316358c5ccc68", "filename": "libstdc++-v3/testsuite/27_io/filesystem/operations/exists.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7a148304a71f3d3ad6845b7966fdc3af88c9e45/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fexists.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7a148304a71f3d3ad6845b7966fdc3af88c9e45/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fexists.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fexists.cc?ref=f7a148304a71f3d3ad6845b7966fdc3af88c9e45", "patch": "@@ -95,7 +95,7 @@ test04()\n   ec.clear();\n   try\n   {\n-    exists(unr);\n+    (void) exists(unr);\n   }\n   catch(const std::filesystem::filesystem_error& ex)\n   {"}, {"sha": "d1dfd9f6dda6a07bff7e8e1e26ccac420b442d7d", "filename": "libstdc++-v3/testsuite/27_io/filesystem/operations/is_empty.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7a148304a71f3d3ad6845b7966fdc3af88c9e45/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fis_empty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7a148304a71f3d3ad6845b7966fdc3af88c9e45/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fis_empty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fis_empty.cc?ref=f7a148304a71f3d3ad6845b7966fdc3af88c9e45", "patch": "@@ -40,7 +40,7 @@ test01()\n   VERIFY( !result );\n \n   try {\n-    fs::is_empty(p);\n+    (void) fs::is_empty(p);\n   } catch (const fs::filesystem_error& e) {\n     ec2 = e.code();\n   }\n@@ -51,7 +51,7 @@ test01()\n   VERIFY( !result );\n \n   try {\n-    fs::is_empty(p/\"f\");\n+    (void) fs::is_empty(p/\"f\");\n   } catch (const fs::filesystem_error& e) {\n     ec2 = e.code();\n   }"}, {"sha": "28be8cc3a644019300774342105f7b49aa0d7c12", "filename": "libstdc++-v3/testsuite/27_io/filesystem/operations/read_symlink.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7a148304a71f3d3ad6845b7966fdc3af88c9e45/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fread_symlink.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7a148304a71f3d3ad6845b7966fdc3af88c9e45/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fread_symlink.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fread_symlink.cc?ref=f7a148304a71f3d3ad6845b7966fdc3af88c9e45", "patch": "@@ -31,7 +31,7 @@ test01()\n   auto p = __gnu_test::nonexistent_path();\n   std::error_code ec;\n \n-  read_symlink(p, ec);\n+  (void) read_symlink(p, ec);\n   VERIFY( ec );\n \n   fs::path tgt = \".\";"}, {"sha": "c43ba29fd7fb7fa80143478f5ba00939c7eafac4", "filename": "libstdc++-v3/testsuite/27_io/filesystem/operations/status.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7a148304a71f3d3ad6845b7966fdc3af88c9e45/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fstatus.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7a148304a71f3d3ad6845b7966fdc3af88c9e45/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fstatus.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fstatus.cc?ref=f7a148304a71f3d3ad6845b7966fdc3af88c9e45", "patch": "@@ -74,7 +74,7 @@ test03()\n   std::error_code ec2;\n   fs::path p, p2;\n   try {\n-    fs::symlink_status(f.path);\n+    (void) fs::symlink_status(f.path);\n   } catch (const fs::filesystem_error& e) {\n     caught = true;\n     p = e.path1();"}, {"sha": "c8fa5c0f27fd214a6de9f0ff38449effc9b6f84c", "filename": "libstdc++-v3/testsuite/27_io/filesystem/operations/symlink_status.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7a148304a71f3d3ad6845b7966fdc3af88c9e45/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fsymlink_status.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7a148304a71f3d3ad6845b7966fdc3af88c9e45/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fsymlink_status.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fsymlink_status.cc?ref=f7a148304a71f3d3ad6845b7966fdc3af88c9e45", "patch": "@@ -96,7 +96,7 @@ test03()\n   std::error_code ec2;\n   fs::path p, p2;\n   try {\n-    fs::symlink_status(f.path);\n+    (void) fs::symlink_status(f.path);\n   } catch (const fs::filesystem_error& e) {\n     caught = true;\n     p = e.path1();"}, {"sha": "09d97c5e01c45b953967c07b9936c06c2662786d", "filename": "libstdc++-v3/testsuite/27_io/filesystem/operations/temp_directory_path.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7a148304a71f3d3ad6845b7966fdc3af88c9e45/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Ftemp_directory_path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7a148304a71f3d3ad6845b7966fdc3af88c9e45/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Ftemp_directory_path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Ftemp_directory_path.cc?ref=f7a148304a71f3d3ad6845b7966fdc3af88c9e45", "patch": "@@ -117,7 +117,7 @@ test03()\n \n   std::error_code ec2;\n   try {\n-    fs::temp_directory_path();\n+    (void) fs::temp_directory_path();\n   } catch (const fs::filesystem_error& e) {\n     ec2 = e.code();\n   }\n@@ -142,7 +142,7 @@ test04()\n   std::error_code ec2;\n   std::string failed_path;\n   try {\n-    fs::temp_directory_path();\n+    (void) fs::temp_directory_path();\n   } catch (const fs::filesystem_error& e) {\n     ec2 = e.code();\n     // On Windows the returned path will be in preferred form, i.e. using L'\\\\'"}, {"sha": "92772db73ed1073853147256d7dc7b859f439ff7", "filename": "libstdc++-v3/testsuite/experimental/filesystem/operations/canonical.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7a148304a71f3d3ad6845b7966fdc3af88c9e45/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fcanonical.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7a148304a71f3d3ad6845b7966fdc3af88c9e45/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fcanonical.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fcanonical.cc?ref=f7a148304a71f3d3ad6845b7966fdc3af88c9e45", "patch": "@@ -30,11 +30,11 @@ test01()\n {\n   std::error_code ec;\n   auto p = __gnu_test::nonexistent_path();\n-  canonical( p, ec );\n+  (void) canonical( p, ec );\n   VERIFY( ec );\n \n   p = fs::current_path();\n-  canonical( p, ec );\n+  (void) canonical( p, ec );\n   VERIFY( !ec );\n \n   const auto root = fs::absolute(\"/\");\n@@ -67,7 +67,7 @@ test02()\n   fs::path p = \"rel\", base = __gnu_test::nonexistent_path();\n   fs::path e1, e2;\n   try {\n-    canonical(p, base);\n+    (void) canonical(p, base);\n   } catch (const fs::filesystem_error& e) {\n     e1 = e.path1();\n     e2 = e.path2();"}, {"sha": "271aff9717fb94d1f798bf05aab85f8ad5b18a6b", "filename": "libstdc++-v3/testsuite/experimental/filesystem/operations/exists.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7a148304a71f3d3ad6845b7966fdc3af88c9e45/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fexists.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7a148304a71f3d3ad6845b7966fdc3af88c9e45/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fexists.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fexists.cc?ref=f7a148304a71f3d3ad6845b7966fdc3af88c9e45", "patch": "@@ -89,7 +89,7 @@ test04()\n   ec.clear();\n   try\n   {\n-    exists(unr);\n+    (void) exists(unr);\n   }\n   catch(const std::experimental::filesystem::filesystem_error& ex)\n   {"}, {"sha": "da21c8da0be08ecebc36e482892a0b59038e68f6", "filename": "libstdc++-v3/testsuite/experimental/filesystem/operations/is_empty.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7a148304a71f3d3ad6845b7966fdc3af88c9e45/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fis_empty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7a148304a71f3d3ad6845b7966fdc3af88c9e45/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fis_empty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fis_empty.cc?ref=f7a148304a71f3d3ad6845b7966fdc3af88c9e45", "patch": "@@ -41,7 +41,7 @@ test01()\n   VERIFY( !result );\n \n   try {\n-    fs::is_empty(p);\n+    (void) fs::is_empty(p);\n   } catch (const fs::filesystem_error& e) {\n     ec2 = e.code();\n   }\n@@ -52,7 +52,7 @@ test01()\n   VERIFY( !result );\n \n   try {\n-    fs::is_empty(p/\"f\");\n+    (void) fs::is_empty(p/\"f\");\n   } catch (const fs::filesystem_error& e) {\n     ec2 = e.code();\n   }"}, {"sha": "a29ceeb349931f301fe97955acffe17592547418", "filename": "libstdc++-v3/testsuite/experimental/filesystem/operations/read_symlink.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7a148304a71f3d3ad6845b7966fdc3af88c9e45/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fread_symlink.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7a148304a71f3d3ad6845b7966fdc3af88c9e45/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fread_symlink.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fread_symlink.cc?ref=f7a148304a71f3d3ad6845b7966fdc3af88c9e45", "patch": "@@ -32,7 +32,7 @@ test01()\n   auto p = __gnu_test::nonexistent_path();\n   std::error_code ec;\n \n-  read_symlink(p, ec);\n+  (void) read_symlink(p, ec);\n   VERIFY( ec );\n \n   fs::path tgt = \".\";"}, {"sha": "d985f112f10b768b3ac180bb1b90dfecd36a731e", "filename": "libstdc++-v3/testsuite/experimental/filesystem/operations/temp_directory_path.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7a148304a71f3d3ad6845b7966fdc3af88c9e45/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Ftemp_directory_path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7a148304a71f3d3ad6845b7966fdc3af88c9e45/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Ftemp_directory_path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Ftemp_directory_path.cc?ref=f7a148304a71f3d3ad6845b7966fdc3af88c9e45", "patch": "@@ -118,7 +118,7 @@ test03()\n \n   std::error_code ec2;\n   try {\n-    fs::temp_directory_path();\n+    (void) fs::temp_directory_path();\n   } catch (const fs::filesystem_error& e) {\n     ec2 = e.code();\n   }\n@@ -143,7 +143,7 @@ test04()\n   std::error_code ec2;\n   std::string failed_path;\n   try {\n-    fs::temp_directory_path();\n+    (void) fs::temp_directory_path();\n   } catch (const fs::filesystem_error& e) {\n     ec2 = e.code();\n     // On Windows the returned path will be in preferred form, i.e. using L'\\\\'"}]}