{"sha": "0d94c6df183375caaa7f672e288a2094ca813749", "node_id": "C_kwDOANBUbNoAKDBkOTRjNmRmMTgzMzc1Y2FhYTdmNjcyZTI4OGEyMDk0Y2E4MTM3NDk", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2023-04-14T14:32:12Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2023-04-14T14:32:12Z"}, "message": "libstdc++: Implement P2278R4 \"cbegin should always return a constant iterator\"\n\nThis also implements the approved follow-up LWG issues 3765, 3766, 3769,\n3770, 3811, 3850, 3853, 3862 and 3872.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/ranges_base.h (const_iterator_t): Define for C++23.\n\t(const_sentinel_t): Likewise.\n\t(range_const_reference_t): Likewise.\n\t(constant_range): Likewise.\n\t(__cust_access::__possibly_const_range): Likewise, replacing ...\n\t(__cust_access::__as_const): ... this.\n\t(__cust_access::_CBegin::operator()): Redefine for C++23 as per P2278R4.\n\t(__cust_access::_CEnd::operator()): Likewise.\n\t(__cust_access::_CRBegin::operator()): Likewise.\n\t(__cust_access::_CREnd::operator()): Likewise.\n\t(__cust_access::_CData::operator()): Likewise.\n\t* include/bits/ranges_util.h (ranges::__detail::__different_from):\n\tMake it an alias of std::__detail::__different_from.\n\t(view_interface::cbegin): Define for C++23.\n\t(view_interface::cend): Likewise.\n\t* include/bits/stl_iterator.h (__detail::__different_from): Define.\n\t(iter_const_reference_t): Define for C++23.\n\t(__detail::__constant_iterator): Likewise.\n\t(__detail::__is_const_iterator): Likewise.\n\t(__detail::__not_a_const_iterator): Likewise.\n\t(__detail::__iter_const_rvalue_reference_t): Likewise.\n\t(__detail::__basic_const_iter_cat):: Likewise.\n\t(const_iterator): Likewise.\n\t(__detail::__const_sentinel): Likewise.\n\t(const_sentinel): Likewise.\n\t(basic_const_iterator): Likewise.\n\t(common_type<basic_const_iterator<_Tp>, _Up>): Likewise.\n\t(common_type<_Up, basic_const_iterator<_Tp>>): Likewise.\n\t(common_type<basic_const_iterator<_Tp>, basic_const_iterator<Up>>):\n\tLikewise.\n\t(make_const_iterator): Define for C++23.\n\t(make_const_sentinel): Likewise.\n\t* include/std/ranges (__cpp_lib_ranges_as_const): Likewise.\n\t(as_const_view): Likewise.\n\t(enable_borrowed_range<as_const_view>): Likewise.\n\t(views::__detail::__is_ref_view): Likewise.\n\t(views::__detail::__can_is_const_view): Likewise.\n\t(views::_AsConst, views::as_const): Likewise.\n\t* include/std/span (span::const_iterator): Likewise.\n\t(span::const_reverse_iterator): Likewise.\n\t(span::cbegin): Likewise.\n\t(span::cend): Likewise.\n\t(span::crbegin): Likewise.\n\t(span::crend): Likewise.\n\t* include/std/version (__cpp_lib_ranges_as_const): Likewise.\n\t* testsuite/std/ranges/adaptors/join.cc (test06): Adjust to\n\tbehave independently of C++20 vs C++23.\n\t* testsuite/std/ranges/version_c++23.cc: Verify value of\n\t__cpp_lib_ranges_as_const macro.\n\t* testsuite/24_iterators/const_iterator/1.cc: New test.\n\t* testsuite/std/ranges/adaptors/as_const/1.cc: New test.", "tree": {"sha": "0d5f5f1c1a656b0632467f560cb721e65298b112", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0d5f5f1c1a656b0632467f560cb721e65298b112"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d94c6df183375caaa7f672e288a2094ca813749", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d94c6df183375caaa7f672e288a2094ca813749", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d94c6df183375caaa7f672e288a2094ca813749", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d94c6df183375caaa7f672e288a2094ca813749/comments", "author": null, "committer": null, "parents": [{"sha": "2ab0d83e8880fe747af3f137aef382d2d4c09e4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ab0d83e8880fe747af3f137aef382d2d4c09e4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ab0d83e8880fe747af3f137aef382d2d4c09e4c"}], "stats": {"total": 834, "additions": 827, "deletions": 7}, "files": [{"sha": "698dac7b7c1ff64ba085d54c00d6e5ae64f7171f", "filename": "libstdc++-v3/include/bits/ranges_base.h", "status": "modified", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d94c6df183375caaa7f672e288a2094ca813749/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d94c6df183375caaa7f672e288a2094ca813749/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_base.h?ref=0d94c6df183375caaa7f672e288a2094ca813749", "patch": "@@ -515,6 +515,17 @@ namespace ranges\n   template<range _Range>\n     using sentinel_t = decltype(ranges::end(std::declval<_Range&>()));\n \n+#if __cplusplus > 202002L\n+  template<range _Range>\n+    using const_iterator_t = const_iterator<iterator_t<_Range>>;\n+\n+  template<range _Range>\n+    using const_sentinel_t = const_sentinel<sentinel_t<_Range>>;\n+\n+  template<range _Range>\n+    using range_const_reference_t = iter_const_reference_t<iterator_t<_Range>>;\n+#endif\n+\n   template<range _Range>\n     using range_difference_t = iter_difference_t<iterator_t<_Range>>;\n \n@@ -607,8 +618,25 @@ namespace ranges\n     concept common_range\n       = range<_Tp> && same_as<iterator_t<_Tp>, sentinel_t<_Tp>>;\n \n+#if __cplusplus > 202002L\n+  template<typename _Tp>\n+    concept constant_range\n+      = input_range<_Tp> && std::__detail::__constant_iterator<iterator_t<_Tp>>;\n+#endif\n+\n   namespace __cust_access\n   {\n+#if __cplusplus > 202020L\n+    template<typename _Range>\n+      constexpr auto&\n+      __possibly_const_range(_Range& __r) noexcept\n+      {\n+\tif constexpr (constant_range<const _Range> && !constant_range<_Range>)\n+\t  return const_cast<const _Range&>(__r);\n+\telse\n+\t  return __r;\n+      }\n+#else\n     // If _To is an lvalue-reference, return const _Tp&, otherwise const _Tp&&.\n     template<typename _To, typename _Tp>\n       constexpr decltype(auto)\n@@ -621,9 +649,24 @@ namespace ranges\n \telse\n \t  return static_cast<const _Tp&&>(__t);\n       }\n+#endif\n \n     struct _CBegin\n     {\n+#if __cplusplus > 202002L\n+      template<__maybe_borrowed_range _Tp>\n+\t[[nodiscard]]\n+\tconstexpr auto\n+\toperator()(_Tp&& __t) const\n+\tnoexcept(noexcept(std::make_const_iterator\n+\t\t\t  (ranges::begin(__cust_access::__possibly_const_range(__t)))))\n+\trequires requires { std::make_const_iterator\n+\t\t\t    (ranges::begin(__cust_access::__possibly_const_range(__t))); }\n+\t{\n+\t  auto& __r = __cust_access::__possibly_const_range(__t);\n+\t  return const_iterator_t<decltype(__r)>(ranges::begin(__r));\n+\t}\n+#else\n       template<typename _Tp>\n \t[[nodiscard]]\n \tconstexpr auto\n@@ -633,10 +676,25 @@ namespace ranges\n \t{\n \t  return _Begin{}(__cust_access::__as_const<_Tp>(__e));\n \t}\n+#endif\n     };\n \n     struct _CEnd final\n     {\n+#if __cplusplus > 202002L\n+      template<__maybe_borrowed_range _Tp>\n+\t[[nodiscard]]\n+\tconstexpr auto\n+\toperator()(_Tp&& __t) const\n+\tnoexcept(noexcept(std::make_const_sentinel\n+\t\t\t  (ranges::end(__cust_access::__possibly_const_range(__t)))))\n+\trequires requires { std::make_const_sentinel\n+\t\t\t    (ranges::end(__cust_access::__possibly_const_range(__t))); }\n+\t{\n+\t  auto& __r = __cust_access::__possibly_const_range(__t);\n+\t  return const_sentinel_t<decltype(__r)>(ranges::end(__r));\n+\t}\n+#else\n       template<typename _Tp>\n \t[[nodiscard]]\n \tconstexpr auto\n@@ -646,10 +704,25 @@ namespace ranges\n \t{\n \t  return _End{}(__cust_access::__as_const<_Tp>(__e));\n \t}\n+#endif\n     };\n \n     struct _CRBegin\n     {\n+#if __cplusplus > 202002L\n+      template<__maybe_borrowed_range _Tp>\n+\t[[nodiscard]]\n+\tconstexpr auto\n+\toperator()(_Tp&& __t) const\n+\tnoexcept(noexcept(std::make_const_iterator\n+\t\t\t  (ranges::rbegin(__cust_access::__possibly_const_range(__t)))))\n+\trequires requires { std::make_const_iterator\n+\t\t\t    (ranges::rbegin(__cust_access::__possibly_const_range(__t))); }\n+\t{\n+\t  auto& __r = __cust_access::__possibly_const_range(__t);\n+\t  return const_iterator<decltype(ranges::rbegin(__r))>(ranges::rbegin(__r));\n+\t}\n+#else\n       template<typename _Tp>\n \t[[nodiscard]]\n \tconstexpr auto\n@@ -659,10 +732,25 @@ namespace ranges\n \t{\n \t  return _RBegin{}(__cust_access::__as_const<_Tp>(__e));\n \t}\n+#endif\n     };\n \n     struct _CREnd\n     {\n+#if __cplusplus > 202002L\n+      template<__maybe_borrowed_range _Tp>\n+\t[[nodiscard]]\n+\tconstexpr auto\n+\toperator()(_Tp&& __t) const\n+\tnoexcept(noexcept(std::make_const_sentinel\n+\t\t\t  (ranges::rend(__cust_access::__possibly_const_range(__t)))))\n+\trequires requires { std::make_const_sentinel\n+\t\t\t    (ranges::rend(__cust_access::__possibly_const_range(__t))); }\n+\t{\n+\t  auto& __r = __cust_access::__possibly_const_range(__t);\n+\t  return const_sentinel<decltype(ranges::rend(__r))>(ranges::rend(__r));\n+\t}\n+#else\n       template<typename _Tp>\n \t[[nodiscard]]\n \tconstexpr auto\n@@ -672,10 +760,20 @@ namespace ranges\n \t{\n \t  return _REnd{}(__cust_access::__as_const<_Tp>(__e));\n \t}\n+#endif\n     };\n \n     struct _CData\n     {\n+#if __cplusplus > 202002L\n+      template<__maybe_borrowed_range _Tp>\n+\t[[nodiscard]]\n+\tconstexpr const auto*\n+\toperator()(_Tp&& __t) const\n+\tnoexcept(noexcept(ranges::data(__cust_access::__possibly_const_range(__t))))\n+\trequires requires { ranges::data(__cust_access::__possibly_const_range(__t)); }\n+\t{ return ranges::data(__cust_access::__possibly_const_range(__t)); }\n+#else\n       template<typename _Tp>\n \t[[nodiscard]]\n \tconstexpr auto\n@@ -685,6 +783,7 @@ namespace ranges\n \t{\n \t  return _Data{}(__cust_access::__as_const<_Tp>(__e));\n \t}\n+#endif\n     };\n \n   } // namespace __cust_access"}, {"sha": "f7e3538af97f6d0d783fdc3e06d50ce6a861e3fb", "filename": "libstdc++-v3/include/bits/ranges_util.h", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d94c6df183375caaa7f672e288a2094ca813749/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_util.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d94c6df183375caaa7f672e288a2094ca813749/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_util.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_util.h?ref=0d94c6df183375caaa7f672e288a2094ca813749", "patch": "@@ -53,9 +53,7 @@ namespace ranges\n       concept __has_arrow = input_iterator<_It>\n \t&& (is_pointer_v<_It> || requires(_It __it) { __it.operator->(); });\n \n-    template<typename _Tp, typename _Up>\n-      concept __different_from\n-\t= !same_as<remove_cvref_t<_Tp>, remove_cvref_t<_Up>>;\n+    using std::__detail::__different_from;\n   } // namespace __detail\n \n   /// The ranges::view_interface class template\n@@ -192,6 +190,24 @@ namespace ranges\n \tconstexpr decltype(auto)\n \toperator[](range_difference_t<_Range> __n) const\n \t{ return ranges::begin(_M_derived())[__n]; }\n+\n+#if __cplusplus > 202002L\n+      constexpr auto\n+      cbegin() requires input_range<_Derived>\n+      { return ranges::cbegin(_M_derived()); }\n+\n+      constexpr auto\n+      cbegin() const requires input_range<const _Derived>\n+      { return ranges::cbegin(_M_derived()); }\n+\n+      constexpr auto\n+      cend() requires input_range<_Derived>\n+      { return ranges::cend(_M_derived()); }\n+\n+      constexpr auto\n+      cend() const requires input_range<const _Derived>\n+      { return ranges::cend(_M_derived()); }\n+#endif\n     };\n \n   namespace __detail"}, {"sha": "b22d9a4fdb3a0090fcf790c0851d8110ce846a1c", "filename": "libstdc++-v3/include/bits/stl_iterator.h", "status": "modified", "additions": 367, "deletions": 0, "changes": 367, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d94c6df183375caaa7f672e288a2094ca813749/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d94c6df183375caaa7f672e288a2094ca813749/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h?ref=0d94c6df183375caaa7f672e288a2094ca813749", "patch": "@@ -102,6 +102,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     template<typename _Cat, typename _Limit, typename _Otherwise = _Cat>\n       using __clamp_iter_cat\n \t= __conditional_t<derived_from<_Cat, _Limit>, _Limit, _Otherwise>;\n+\n+    template<typename _Tp, typename _Up>\n+      concept __different_from\n+\t= !same_as<remove_cvref_t<_Tp>, remove_cvref_t<_Up>>;\n   }\n #endif\n \n@@ -2578,6 +2582,369 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t      add_pointer_t<iter_reference_t<_It>>,\n \t\t\t\t      void>;\n     };\n+\n+#if __cplusplus > 202020L\n+  template<indirectly_readable _It>\n+    using iter_const_reference_t\n+      = common_reference_t<const iter_value_t<_It>&&, iter_reference_t<_It>>;\n+\n+  template<input_iterator _It> class basic_const_iterator;\n+\n+  namespace __detail\n+  {\n+    template<typename _It>\n+      concept __constant_iterator = input_iterator<_It>\n+\t&& same_as<iter_const_reference_t<_It>, iter_reference_t<_It>>;\n+\n+    template<typename _Tp>\n+      inline constexpr bool __is_const_iterator = false;\n+\n+    template<typename _It>\n+      inline constexpr bool __is_const_iterator<basic_const_iterator<_It>> = true;\n+\n+    template<typename _Tp>\n+      concept __not_a_const_iterator = !__is_const_iterator<_Tp>;\n+\n+    template<indirectly_readable _It>\n+      using __iter_const_rvalue_reference_t\n+\t= common_reference_t<const iter_value_t<_It>&&, iter_rvalue_reference_t<_It>>;\n+\n+    template<typename _It>\n+      struct __basic_const_iterator_iter_cat\n+      { };\n+\n+    template<forward_iterator _It>\n+      struct __basic_const_iterator_iter_cat<_It>\n+      { using iterator_category = iterator_traits<_It>::iterator_category; };\n+  } // namespace detail\n+\n+  template<input_iterator _It>\n+    using const_iterator\n+      = __conditional_t<__detail::__constant_iterator<_It>, _It, basic_const_iterator<_It>>;\n+\n+  namespace __detail\n+  {\n+    template<typename _Sent>\n+      struct __const_sentinel\n+      { using type = _Sent; };\n+\n+    template<input_iterator _Sent>\n+      struct __const_sentinel<_Sent>\n+      { using type = const_iterator<_Sent>; };\n+  } // namespace __detail\n+\n+  template<semiregular _Sent>\n+    using const_sentinel = typename __detail::__const_sentinel<_Sent>::type;\n+\n+  template<input_iterator _It>\n+  class basic_const_iterator\n+  : public __detail::__basic_const_iterator_iter_cat<_It>\n+  {\n+    _It _M_current = _It();\n+    using __reference = iter_const_reference_t<_It>;\n+    using __rvalue_reference = __detail::__iter_const_rvalue_reference_t<_It>;\n+\n+    static auto\n+    _S_iter_concept()\n+    {\n+      if constexpr (contiguous_iterator<_It>)\n+\treturn contiguous_iterator_tag{};\n+      else if constexpr (random_access_iterator<_It>)\n+\treturn random_access_iterator_tag{};\n+      else if constexpr (bidirectional_iterator<_It>)\n+\treturn bidirectional_iterator_tag{};\n+      else if constexpr (forward_iterator<_It>)\n+\treturn forward_iterator_tag{};\n+      else\n+\treturn input_iterator_tag{};\n+    }\n+\n+    template<input_iterator _It2> friend class basic_const_iterator;\n+\n+  public:\n+    using iterator_concept = decltype(_S_iter_concept());\n+    using value_type = iter_value_t<_It>;\n+    using difference_type = iter_difference_t<_It>;\n+\n+    basic_const_iterator() requires default_initializable<_It> = default;\n+\n+    constexpr\n+    basic_const_iterator(_It __current)\n+    noexcept(is_nothrow_move_constructible_v<_It>)\n+    : _M_current(std::move(__current))\n+    { }\n+\n+    template<convertible_to<_It> _It2>\n+      constexpr\n+      basic_const_iterator(basic_const_iterator<_It2> __current)\n+      noexcept(is_nothrow_constructible_v<_It, _It2>)\n+      : _M_current(std::move(__current._M_current))\n+      { }\n+\n+    template<__detail::__different_from<basic_const_iterator> _Tp>\n+      requires convertible_to<_Tp, _It>\n+      constexpr\n+      basic_const_iterator(_Tp&& __current)\n+      noexcept(is_nothrow_constructible_v<_It, _Tp>)\n+      : _M_current(std::forward<_Tp>(__current))\n+      { }\n+\n+    constexpr const _It&\n+    base() const & noexcept\n+    { return _M_current; }\n+\n+    constexpr _It\n+    base() &&\n+    noexcept(is_nothrow_move_constructible_v<_It>)\n+    { return std::move(_M_current); }\n+\n+    constexpr __reference\n+    operator*() const\n+    noexcept(noexcept(static_cast<__reference>(*_M_current)))\n+    { return static_cast<__reference>(*_M_current); }\n+\n+    constexpr const auto*\n+    operator->() const\n+    noexcept(contiguous_iterator<_It> || noexcept(*_M_current))\n+    requires is_lvalue_reference_v<iter_reference_t<_It>>\n+      && same_as<remove_cvref_t<iter_reference_t<_It>>, value_type>\n+    {\n+      if constexpr (contiguous_iterator<_It>)\n+\treturn std::to_address(_M_current);\n+      else\n+\treturn std::__addressof(*_M_current);\n+    }\n+\n+    constexpr basic_const_iterator&\n+    operator++()\n+    noexcept(noexcept(++_M_current))\n+    {\n+      ++_M_current;\n+      return *this;\n+    }\n+\n+    constexpr void\n+    operator++(int)\n+    noexcept(noexcept(++_M_current))\n+    { ++_M_current; }\n+\n+    constexpr basic_const_iterator\n+    operator++(int)\n+    noexcept(noexcept(++*this) && is_nothrow_copy_constructible_v<basic_const_iterator>)\n+    requires forward_iterator<_It>\n+    {\n+      auto __tmp = *this;\n+      ++*this;\n+      return __tmp;\n+    }\n+\n+    constexpr basic_const_iterator&\n+    operator--()\n+    noexcept(noexcept(--_M_current))\n+    requires bidirectional_iterator<_It>\n+    {\n+      --_M_current;\n+      return *this;\n+    }\n+\n+    constexpr basic_const_iterator\n+    operator--(int)\n+    noexcept(noexcept(--*this) && is_nothrow_copy_constructible_v<basic_const_iterator>)\n+    requires bidirectional_iterator<_It>\n+    {\n+      auto __tmp = *this;\n+      --*this;\n+      return __tmp;\n+    }\n+\n+    constexpr basic_const_iterator&\n+    operator+=(difference_type __n)\n+    noexcept(noexcept(_M_current += __n))\n+    requires random_access_iterator<_It>\n+    {\n+      _M_current += __n;\n+      return *this;\n+    }\n+\n+    constexpr basic_const_iterator&\n+    operator-=(difference_type __n)\n+    noexcept(noexcept(_M_current -= __n))\n+    requires random_access_iterator<_It>\n+    {\n+      _M_current -= __n;\n+      return *this;\n+    }\n+\n+    constexpr __reference\n+    operator[](difference_type __n) const\n+    noexcept(noexcept(static_cast<__reference>(_M_current[__n])))\n+    requires random_access_iterator<_It>\n+    { return static_cast<__reference>(_M_current[__n]); }\n+\n+    template<sentinel_for<_It> _Sent>\n+      constexpr bool\n+      operator==(const _Sent& __s) const\n+      noexcept(noexcept(_M_current == __s))\n+      { return _M_current == __s; }\n+\n+    constexpr bool\n+    operator<(const basic_const_iterator& __y) const\n+    noexcept(noexcept(_M_current < __y._M_current))\n+    requires random_access_iterator<_It>\n+    { return _M_current < __y._M_current; }\n+\n+    constexpr bool\n+    operator>(const basic_const_iterator& __y) const\n+    noexcept(noexcept(_M_current > __y._M_current))\n+    requires random_access_iterator<_It>\n+    { return _M_current > __y._M_current; }\n+\n+    constexpr bool\n+    operator<=(const basic_const_iterator& __y) const\n+    noexcept(noexcept(_M_current <= __y._M_current))\n+    requires random_access_iterator<_It>\n+    { return _M_current <= __y._M_current; }\n+\n+    constexpr bool\n+    operator>=(const basic_const_iterator& __y) const\n+    noexcept(noexcept(_M_current >= __y._M_current))\n+    requires random_access_iterator<_It>\n+    { return _M_current >= __y._M_current; }\n+\n+    constexpr auto\n+    operator<=>(const basic_const_iterator& __y) const\n+    noexcept(noexcept(_M_current <=> __y._M_current))\n+    requires random_access_iterator<_It> && three_way_comparable<_It>\n+    { return _M_current <=> __y._M_current; }\n+\n+    template<__detail::__different_from<basic_const_iterator> _It2>\n+      constexpr bool\n+      operator<(const _It2& __y) const\n+      noexcept(noexcept(_M_current < __y))\n+      requires random_access_iterator<_It> && totally_ordered_with<_It, _It2>\n+      { return _M_current < __y; }\n+\n+    template<__detail::__different_from<basic_const_iterator> _It2>\n+      constexpr bool\n+      operator>(const _It2& __y) const\n+      noexcept(noexcept(_M_current > __y))\n+      requires random_access_iterator<_It> && totally_ordered_with<_It, _It2>\n+      { return _M_current > __y; }\n+\n+    template<__detail::__different_from<basic_const_iterator> _It2>\n+      constexpr bool\n+      operator<=(const _It2& __y) const\n+      noexcept(noexcept(_M_current <= __y))\n+      requires random_access_iterator<_It> && totally_ordered_with<_It, _It2>\n+      { return _M_current <= __y; }\n+\n+    template<__detail::__different_from<basic_const_iterator> _It2>\n+      constexpr bool\n+      operator>=(const _It2& __y) const\n+      noexcept(noexcept(_M_current >= __y))\n+      requires random_access_iterator<_It> && totally_ordered_with<_It, _It2>\n+      { return _M_current >= __y; }\n+\n+    template<__detail::__different_from<basic_const_iterator> _It2>\n+      constexpr auto\n+      operator<=>(const _It2& __y) const\n+      noexcept(noexcept(_M_current <=> __y))\n+      requires random_access_iterator<_It> && totally_ordered_with<_It, _It2>\n+\t&& three_way_comparable_with<_It, _It2>\n+      { return _M_current <=> __y; }\n+\n+    template<__detail::__not_a_const_iterator _It2>\n+      friend constexpr bool\n+      operator<(const _It2& __x, const basic_const_iterator& __y)\n+      noexcept(noexcept(__x < __y._M_current))\n+      requires random_access_iterator<_It> && totally_ordered_with<_It, _It2>\n+      { return __x < __y._M_current; }\n+\n+    template<__detail::__not_a_const_iterator _It2>\n+      friend constexpr bool\n+      operator>(const _It2& __x, const basic_const_iterator& __y)\n+      noexcept(noexcept(__x > __y._M_current))\n+      requires random_access_iterator<_It> && totally_ordered_with<_It, _It2>\n+      { return __x > __y._M_current; }\n+\n+    template<__detail::__not_a_const_iterator _It2>\n+      friend constexpr bool\n+      operator<=(const _It2& __x, const basic_const_iterator& __y)\n+      noexcept(noexcept(__x <= __y._M_current))\n+      requires random_access_iterator<_It> && totally_ordered_with<_It, _It2>\n+      { return __x <= __y._M_current; }\n+\n+    template<__detail::__not_a_const_iterator _It2>\n+      friend constexpr bool\n+      operator>=(const _It2& __x, const basic_const_iterator& __y)\n+      noexcept(noexcept(__x >= __y._M_current))\n+      requires random_access_iterator<_It> && totally_ordered_with<_It, _It2>\n+      { return __x >= __y._M_current; }\n+\n+    friend constexpr basic_const_iterator\n+    operator+(const basic_const_iterator& __i, difference_type __n)\n+    noexcept(noexcept(basic_const_iterator(__i._M_current + __n)))\n+    requires random_access_iterator<_It>\n+    { return basic_const_iterator(__i._M_current + __n); }\n+\n+    friend constexpr basic_const_iterator\n+    operator+(difference_type __n, const basic_const_iterator& __i)\n+    noexcept(noexcept(basic_const_iterator(__i._M_current + __n)))\n+    requires random_access_iterator<_It>\n+    { return basic_const_iterator(__i._M_current + __n); }\n+\n+    friend constexpr basic_const_iterator\n+    operator-(const basic_const_iterator& __i, difference_type __n)\n+    noexcept(noexcept(basic_const_iterator(__i._M_current - __n)))\n+    requires random_access_iterator<_It>\n+    { return basic_const_iterator(__i._M_current - __n); }\n+\n+    template<sized_sentinel_for<_It> _Sent>\n+      constexpr difference_type\n+      operator-(const _Sent& __y) const\n+      noexcept(noexcept(_M_current - __y))\n+      { return _M_current - __y; }\n+\n+    template<__detail::__not_a_const_iterator _Sent>\n+      requires sized_sentinel_for<_Sent, _It>\n+      friend constexpr difference_type\n+      operator-(const _Sent& __x, const basic_const_iterator& __y)\n+      noexcept(noexcept(__x - __y._M_current))\n+      { return __x - __y._M_current; }\n+\n+    friend constexpr __rvalue_reference\n+    iter_move(const basic_const_iterator& __i)\n+    noexcept(noexcept(static_cast<__rvalue_reference>(ranges::iter_move(__i._M_current))))\n+    { return static_cast<__rvalue_reference>(ranges::iter_move(__i._M_current)); }\n+  };\n+\n+  template<typename _Tp, common_with<_Tp> _Up>\n+    requires input_iterator<common_type_t<_Tp, _Up>>\n+    struct common_type<basic_const_iterator<_Tp>, _Up>\n+    { using type = basic_const_iterator<common_type_t<_Tp, _Up>>; };\n+\n+  template<typename _Tp, common_with<_Tp> _Up>\n+    requires input_iterator<common_type_t<_Tp, _Up>>\n+    struct common_type<_Up, basic_const_iterator<_Tp>>\n+    { using type = basic_const_iterator<common_type_t<_Tp, _Up>>; };\n+\n+  template<typename _Tp, common_with<_Tp> _Up>\n+    requires input_iterator<common_type_t<_Tp, _Up>>\n+    struct common_type<basic_const_iterator<_Tp>, basic_const_iterator<_Up>>\n+    { using type = basic_const_iterator<common_type_t<_Tp, _Up>>; };\n+\n+  template<input_iterator _It>\n+    constexpr const_iterator<_It>\n+    make_const_iterator(_It __it)\n+    noexcept(is_nothrow_convertible_v<_It, const_iterator<_It>>)\n+    { return __it; }\n+\n+  template<semiregular _Sent>\n+    constexpr const_sentinel<_Sent>\n+    make_const_sentinel(_Sent __s)\n+    noexcept(is_nothrow_convertible_v<_Sent, const_sentinel<_Sent>>)\n+    { return __s; }\n+#endif // C++23\n #endif // C++20\n \n   /// @} group iterators"}, {"sha": "283d757faa44ef5bc1b6774de8ef287278eea944", "filename": "libstdc++-v3/include/std/ranges", "status": "modified", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d94c6df183375caaa7f672e288a2094ca813749/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d94c6df183375caaa7f672e288a2094ca813749/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges?ref=0d94c6df183375caaa7f672e288a2094ca813749", "patch": "@@ -8929,6 +8929,112 @@ namespace views::__adaptor\n \n     inline constexpr _Enumerate enumerate;\n   }\n+\n+#define __cpp_lib_ranges_as_const 202207L\n+\n+  template<view _Vp>\n+    requires input_range<_Vp>\n+  class as_const_view : public view_interface<as_const_view<_Vp>>\n+  {\n+    _Vp _M_base = _Vp();\n+\n+  public:\n+    as_const_view() requires default_initializable<_Vp> = default;\n+\n+    constexpr explicit\n+    as_const_view(_Vp __base)\n+    noexcept(is_nothrow_move_constructible_v<_Vp>)\n+    : _M_base(std::move(__base))\n+    { }\n+\n+    constexpr _Vp\n+    base() const &\n+    noexcept(is_nothrow_copy_constructible_v<_Vp>)\n+    requires copy_constructible<_Vp>\n+    { return _M_base; }\n+\n+    constexpr _Vp\n+    base() &&\n+    noexcept(is_nothrow_move_constructible_v<_Vp>)\n+    { return std::move(_M_base); }\n+\n+    constexpr auto\n+    begin() requires (!__detail::__simple_view<_Vp>)\n+    { return ranges::cbegin(_M_base); }\n+\n+    constexpr auto\n+    begin() const requires range<const _Vp>\n+    { return ranges::cbegin(_M_base); }\n+\n+    constexpr auto\n+    end() requires (!__detail::__simple_view<_Vp>)\n+    { return ranges::cend(_M_base); }\n+\n+    constexpr auto\n+    end() const requires range<const _Vp>\n+    { return ranges::cend(_M_base); }\n+\n+    constexpr auto\n+    size() requires sized_range<_Vp>\n+    { return ranges::size(_M_base); }\n+\n+    constexpr auto\n+    size() const requires sized_range<const _Vp>\n+    { return ranges::size(_M_base); }\n+  };\n+\n+  template<typename _Range>\n+    as_const_view(_Range&&) -> as_const_view<views::all_t<_Range>>;\n+\n+  template<typename _Tp>\n+    inline constexpr bool enable_borrowed_range<as_const_view<_Tp>>\n+      = enable_borrowed_range<_Tp>;\n+\n+  namespace views\n+  {\n+    namespace __detail\n+    {\n+      template<typename _Tp>\n+\tinline constexpr bool __is_ref_view = false;\n+\n+      template<typename _Range>\n+\tinline constexpr bool __is_ref_view<ref_view<_Range>> = true;\n+\n+      template<typename _Range>\n+\tconcept __can_as_const_view = requires { as_const_view(std::declval<_Range>()); };\n+    }\n+\n+    struct _AsConst : __adaptor::_RangeAdaptorClosure\n+    {\n+      template<viewable_range _Range>\n+      constexpr auto\n+      operator()(_Range&& __r) const\n+      noexcept(noexcept(as_const_view(std::declval<_Range>())))\n+      requires __detail::__can_as_const_view<_Range>\n+      {\n+\tusing _Tp = remove_cvref_t<_Range>;\n+\tusing element_type = remove_reference_t<range_reference_t<_Range>>;\n+\tif constexpr (constant_range<views::all_t<_Range>>)\n+\t  return views::all(std::forward<_Range>(__r));\n+\telse if constexpr (__detail::__is_empty_view<_Tp>)\n+\t  return views::empty<const element_type>;\n+\telse if constexpr (std::__detail::__is_span<_Tp>)\n+\t  return span<const element_type, _Tp::extent>(std::forward<_Range>(__r));\n+\telse if constexpr (__detail::__is_ref_view<_Tp>\n+\t\t\t   && constant_range<const element_type>)\n+\t  return ref_view(static_cast<const element_type&>\n+\t\t\t  (std::forward<_Range>(__r).base()));\n+\telse if constexpr (is_lvalue_reference_v<_Range>\n+\t\t\t   && constant_range<_Tp>\n+\t\t\t   && !view<_Tp>)\n+\t  return ref_view(static_cast<const _Tp&>(__r));\n+\telse\n+\t  return as_const_view(std::forward<_Range>(__r));\n+      }\n+    };\n+\n+    inline constexpr _AsConst as_const;\n+  }\n #endif // C++23\n } // namespace ranges\n "}, {"sha": "6763389966503113f41fb9bcc545f34a9d474b17", "filename": "libstdc++-v3/include/std/span", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d94c6df183375caaa7f672e288a2094ca813749/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fspan", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d94c6df183375caaa7f672e288a2094ca813749/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fspan", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fspan?ref=0d94c6df183375caaa7f672e288a2094ca813749", "patch": "@@ -137,6 +137,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       using const_reference        = const element_type&;\n       using iterator = __gnu_cxx::__normal_iterator<pointer, span>;\n       using reverse_iterator       = std::reverse_iterator<iterator>;\n+#if __cplusplus > 202002L\n+      using const_iterator         = std::const_iterator<iterator>;\n+      using const_reverse_iterator = std::const_iterator<reverse_iterator>;\n+#endif\n \n       // member constants\n       static constexpr size_t extent = _Extent;\n@@ -301,6 +305,24 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       rend() const noexcept\n       { return reverse_iterator(this->begin()); }\n \n+#if __cplusplus > 202002L\n+      constexpr const_iterator\n+      cbegin() const noexcept\n+      { return begin(); }\n+\n+      constexpr const_iterator\n+      cend() const noexcept\n+      { return end(); }\n+\n+      constexpr const_reverse_iterator\n+      crbegin() const noexcept\n+      { return rbegin(); }\n+\n+      constexpr const_reverse_iterator\n+      crend() const noexcept\n+      { return rend(); }\n+#endif\n+\n       // subviews\n \n       template<size_t _Count>"}, {"sha": "9f31f25f1e9c62d597e6e2a0f1f9eb03ed573178", "filename": "libstdc++-v3/include/std/version", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d94c6df183375caaa7f672e288a2094ca813749/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d94c6df183375caaa7f672e288a2094ca813749/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion?ref=0d94c6df183375caaa7f672e288a2094ca813749", "patch": "@@ -339,6 +339,7 @@\n #define __cpp_lib_ranges_stride 202207L\n #define __cpp_lib_ranges_cartesian_product 202207L\n #define __cpp_lib_ranges_as_rvalue 202207L\n+#define __cpp_lib_ranges_as_const 202207L\n #define __cpp_lib_ranges_enumerate 202302L\n #define __cpp_lib_fold 202207L\n #if __cpp_constexpr_dynamic_alloc"}, {"sha": "51befd29541023d08118bc3a7c17fca933c03a4c", "filename": "libstdc++-v3/testsuite/24_iterators/const_iterator/1.cc", "status": "added", "additions": 140, "deletions": 0, "changes": 140, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d94c6df183375caaa7f672e288a2094ca813749/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fconst_iterator%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d94c6df183375caaa7f672e288a2094ca813749/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fconst_iterator%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fconst_iterator%2F1.cc?ref=0d94c6df183375caaa7f672e288a2094ca813749", "patch": "@@ -0,0 +1,140 @@\n+// { dg-options \"-std=gnu++23\" }\n+// { dg-do run { target c++23 } }\n+\n+#include <iterator>\n+#include <array>\n+#include <concepts>\n+#include <string_view>\n+#include <vector>\n+#include <testsuite_iterators.h>\n+\n+using __gnu_test::test_input_range;\n+using __gnu_test::test_forward_range;\n+using __gnu_test::test_bidirectional_range;\n+using __gnu_test::test_random_access_range;\n+\n+namespace ranges = std::ranges;\n+\n+template<class Iter, bool Const>\n+void\n+test01()\n+{\n+  if constexpr (Const)\n+    {\n+      static_assert( std::same_as<std::const_iterator<Iter>, Iter> );\n+      static_assert( std::same_as<std::const_sentinel<Iter>, Iter> );\n+      static_assert( std::same_as<std::iter_const_reference_t<Iter>,\n+\t\t\t\t std::iter_reference_t<Iter>> );\n+    }\n+  else\n+    {\n+      using Wrapped = std::basic_const_iterator<Iter>;\n+\n+      static_assert( std::same_as<std::const_iterator<Iter>, Wrapped> );\n+      static_assert( std::same_as<std::const_sentinel<Iter>, Wrapped> );\n+      static_assert( std::same_as<std::iter_const_reference_t<Iter>,\n+\t\t\t\t std::iter_reference_t<Wrapped>> );\n+\n+      static_assert( std::input_iterator<Iter> == std::input_iterator<Wrapped> );\n+      static_assert( std::forward_iterator<Iter> == std::forward_iterator<Wrapped> );\n+      static_assert( std::bidirectional_iterator<Iter> == std::bidirectional_iterator<Wrapped> );\n+      static_assert( std::random_access_iterator<Iter> == std::random_access_iterator<Wrapped> );\n+    }\n+}\n+\n+template<class Range, bool Const>\n+void\n+test02()\n+{\n+  if constexpr (Const)\n+    {\n+      static_assert( ranges::constant_range<Range> );\n+      static_assert( std::same_as<ranges::const_iterator_t<Range>, ranges::iterator_t<Range>> );\n+      static_assert( std::same_as<ranges::const_sentinel_t<Range>, ranges::sentinel_t<Range>> );\n+      static_assert( std::same_as<ranges::range_const_reference_t<Range>,\n+\t\t\t\t ranges::range_reference_t<Range>> );\n+\n+      static_assert( std::same_as<decltype(ranges::cbegin(std::declval<Range&>())),\n+\t\t\t\t decltype(ranges::begin(std::declval<Range&>()))> );\n+      static_assert( std::same_as<decltype(ranges::cend(std::declval<Range&>())),\n+\t\t\t\t decltype(ranges::end(std::declval<Range&>()))> );\n+    }\n+  else\n+    {\n+      static_assert( !ranges::constant_range<Range> );\n+      using Wrapped = std::basic_const_iterator<ranges::iterator_t<Range>>;\n+\n+      static_assert( std::same_as<ranges::const_iterator_t<Range>, Wrapped> );\n+      if constexpr (ranges::common_range<Range>)\n+\tstatic_assert( std::same_as<ranges::const_sentinel_t<Range>, Wrapped> );\n+      static_assert( std::same_as<ranges::range_const_reference_t<Range>,\n+\t\t\t\t std::iter_reference_t<Wrapped>> );\n+\n+      static_assert( ranges::input_range<Range> == std::input_iterator<Wrapped> );\n+      static_assert( ranges::forward_range<Range> == std::forward_iterator<Wrapped> );\n+      static_assert( ranges::bidirectional_range<Range> == std::bidirectional_iterator<Wrapped> );\n+      static_assert( ranges::random_access_range<Range> == std::random_access_iterator<Wrapped> );\n+\n+      if constexpr (ranges::constant_range<const Range&>)\n+\t{\n+\t  static_assert( std::same_as<decltype(ranges::cbegin(std::declval<Range&>())),\n+\t\t\t\t     decltype(ranges::begin(std::declval<const Range&>()))> );\n+\t  static_assert( std::same_as<decltype(ranges::cend(std::declval<Range&>())),\n+\t\t\t\t     decltype(ranges::end(std::declval<const Range&>()))> );\n+\t}\n+      else\n+\t{\n+\t  static_assert( std::same_as<decltype(ranges::cbegin(std::declval<Range&>())), Wrapped> );\n+\t  if constexpr (ranges::common_range<Range>)\n+\t    static_assert( std::same_as<decltype(ranges::cend(std::declval<Range&>())), Wrapped> );\n+\t}\n+    }\n+}\n+\n+void\n+test03()\n+{\n+  static_assert( std::same_as<std::const_sentinel<std::unreachable_sentinel_t>,\n+\t\t\t     std::unreachable_sentinel_t> );\n+}\n+\n+int\n+main()\n+{\n+  test01<int*, false>();\n+  test01<ranges::iterator_t<test_input_range<int>>, false>();\n+  test01<ranges::iterator_t<test_forward_range<int>>, false>();\n+  test01<ranges::iterator_t<test_bidirectional_range<int>>, false>();\n+  test01<ranges::iterator_t<test_random_access_range<int>>, false>();\n+  test01<std::array<int, 3>::iterator, false>();\n+  test01<std::vector<bool>::iterator, false>();\n+\n+  test01<const int*, true>();\n+  test01<ranges::iterator_t<test_input_range<const int>>, true>();\n+  test01<ranges::iterator_t<test_forward_range<const int>>, true>();\n+  test01<ranges::iterator_t<test_bidirectional_range<const int>>, true>();\n+  test01<ranges::iterator_t<test_random_access_range<const int>>, true>();\n+  test01<std::array<const int, 3>::iterator, true>();\n+  test01<std::string_view::iterator, true>();\n+  test01<std::vector<bool>::const_iterator, true>();\n+\n+  test02<int[42], false>();\n+  test02<test_input_range<int>, false>();\n+  test02<test_forward_range<int>, false>();\n+  test02<test_bidirectional_range<int>, false>();\n+  test02<test_random_access_range<int>, false>();\n+  test02<std::array<int, 3>, false>();\n+  test02<std::vector<bool>, false>();\n+\n+  test02<const int[42], true>();\n+  test02<test_input_range<const int>, true>();\n+  test02<test_forward_range<const int>, true>();\n+  test02<test_bidirectional_range<const int>, true>();\n+  test02<test_random_access_range<const int>, true>();\n+  test02<std::array<const int, 3>, true>();\n+  test02<const std::array<int, 3>, true>();\n+  test02<std::string_view, true>();\n+  test02<const std::vector<bool>, true>();\n+\n+  test03();\n+}"}, {"sha": "d04645f047ec0ebc517d566158a04ea2a2cf6dfa", "filename": "libstdc++-v3/testsuite/std/ranges/adaptors/as_const/1.cc", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d94c6df183375caaa7f672e288a2094ca813749/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fas_const%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d94c6df183375caaa7f672e288a2094ca813749/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fas_const%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fas_const%2F1.cc?ref=0d94c6df183375caaa7f672e288a2094ca813749", "patch": "@@ -0,0 +1,64 @@\n+// { dg-options \"-std=gnu++23\" }\n+// { dg-do run { target c++23 } }\n+\n+#include <ranges>\n+#include <algorithm>\n+#include <span>\n+#include <utility>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+\n+#if __cpp_lib_ranges_as_const != 202207L\n+# error \"Feature-test macro __cpp_lib_ranges_as_const has wrong value in <ranges>\"\n+#endif\n+\n+namespace ranges = std::ranges;\n+namespace views = std::views;\n+\n+constexpr bool\n+test01()\n+{\n+  int x[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n+  auto v = x | views::filter([](int x) { return (x % 2) == 0; }) | views::as_const;\n+\n+  using ty = decltype(v);\n+  static_assert(ranges::constant_range<ty>);\n+  static_assert(!ranges::constant_range<decltype(v.base())>);\n+  static_assert(std::same_as<ranges::range_reference_t<ty>, const int&>);\n+  static_assert(std::same_as<ranges::range_reference_t<decltype(v.base())>, int&>);\n+\n+  VERIFY( ranges::equal(v, (int[]){2, 4, 6, 8, 10}) );\n+  VERIFY( ranges::equal(v | views::reverse, (int[]){10, 8, 6, 4, 2}) );\n+\n+  return true;\n+}\n+\n+constexpr bool\n+test02()\n+{\n+  std::same_as<ranges::empty_view<const int>> auto v1\n+    = views::empty<int> | views::as_const;\n+\n+  int x[] = {1, 2, 3};\n+  std::same_as<ranges::as_const_view<ranges::ref_view<int[3]>>> auto v2\n+    = x | views::as_const;\n+  std::same_as<ranges::ref_view<const int[3]>> auto v3\n+    = std::as_const(x) | views::as_const;\n+  std::same_as<ranges::ref_view<const int[3]>> auto v4\n+    = std::as_const(x) | views::all | views::as_const;\n+  std::same_as<std::span<const int>> auto v5\n+    = std::span{x, x+3} | views::as_const;\n+\n+  std::same_as<ranges::as_const_view<ranges::chunk_view<ranges::ref_view<int[3]>>>> auto v6\n+     = x | views::chunk(2) | views::as_const;\n+  VERIFY( v6.size() == 2 );\n+\n+  return true;\n+}\n+\n+int\n+main()\n+{\n+  static_assert(test01());\n+  static_assert(test02());\n+}"}, {"sha": "7401d69b30d71b59ca180f2f058d31e70999aa06", "filename": "libstdc++-v3/testsuite/std/ranges/adaptors/join.cc", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d94c6df183375caaa7f672e288a2094ca813749/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fjoin.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d94c6df183375caaa7f672e288a2094ca813749/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fjoin.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fjoin.cc?ref=0d94c6df183375caaa7f672e288a2094ca813749", "patch": "@@ -24,6 +24,7 @@\n #include <sstream>\n #include <string>\n #include <string_view>\n+#include <utility>\n #include <vector>\n #include <testsuite_hooks.h>\n #include <testsuite_iterators.h>\n@@ -113,15 +114,15 @@ test06()\n \n   // Verify that _Iterator<false> is implicitly convertible to _Iterator<true>.\n   static_assert(!std::same_as<decltype(ranges::begin(v)),\n-\t\t\t      decltype(ranges::cbegin(v))>);\n-  auto a = ranges::cbegin(v);\n+\t\t\t      decltype(std::as_const(v).begin())>);\n+  auto a = std::as_const(v).begin();\n   a = ranges::begin(v);\n \n   // Verify that _Sentinel<false> is implicitly convertible to _Sentinel<true>.\n   static_assert(!ranges::common_range<decltype(v)>);\n   static_assert(!std::same_as<decltype(ranges::end(v)),\n-\t\t\t      decltype(ranges::cend(v))>);\n-  auto b = ranges::cend(v);\n+\t\t\t      decltype(std::as_const(v).end())>);\n+  auto b = std::as_const(v).end();\n   b = ranges::end(v);\n }\n "}, {"sha": "e2c14edc8ef316a4d9f3d86f0d0fcd12de12ec8d", "filename": "libstdc++-v3/testsuite/std/ranges/version_c++23.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d94c6df183375caaa7f672e288a2094ca813749/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fversion_c%2B%2B23.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d94c6df183375caaa7f672e288a2094ca813749/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fversion_c%2B%2B23.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fversion_c%2B%2B23.cc?ref=0d94c6df183375caaa7f672e288a2094ca813749", "patch": "@@ -45,6 +45,10 @@\n # error \"Feature-test macro __cpp_lib_ranges_as_rvalue has wrong value in <version>\"\n #endif\n \n+#if __cpp_lib_ranges_as_const != 202207L\n+# error \"Feature-test macro __cpp_lib_ranges_as_const has wrong value in <version>\"\n+#endif\n+\n #if __cpp_lib_ranges_enumerate != 202302L\n # error \"Feature-test macro __cpp_lib_ranges_enumerate has wrong value in <version>\"\n #endif"}]}