{"sha": "8bcc782ce9bbb9b4c7e6641d3219ad74820f0220", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGJjYzc4MmNlOWJiYjliNGM3ZTY2NDFkMzIxOWFkNzQ4MjBmMDIyMA==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2000-11-19T12:46:33Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2000-11-19T12:46:33Z"}, "message": "cplus-dem.c (grow_vect): Prototype.\n\n\t* cplus-dem.c (grow_vect): Prototype.\n\t(ada_demangle): Cast the arg of ctype macros to unsigned char.\n\nFrom-SVN: r37563", "tree": {"sha": "ce4a2123bb8615b0091e390026abe7e6b75de82c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ce4a2123bb8615b0091e390026abe7e6b75de82c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8bcc782ce9bbb9b4c7e6641d3219ad74820f0220", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bcc782ce9bbb9b4c7e6641d3219ad74820f0220", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8bcc782ce9bbb9b4c7e6641d3219ad74820f0220", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bcc782ce9bbb9b4c7e6641d3219ad74820f0220/comments", "author": null, "committer": null, "parents": [{"sha": "980c0b564e3cf8ddf5f49319546e398d21517e64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/980c0b564e3cf8ddf5f49319546e398d21517e64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/980c0b564e3cf8ddf5f49319546e398d21517e64"}], "stats": {"total": 17, "additions": 13, "deletions": 4}, "files": [{"sha": "5cc9678782ab9dbfd64d209b9c53e3d1dcd9daf8", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bcc782ce9bbb9b4c7e6641d3219ad74820f0220/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bcc782ce9bbb9b4c7e6641d3219ad74820f0220/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=8bcc782ce9bbb9b4c7e6641d3219ad74820f0220", "patch": "@@ -1,3 +1,8 @@\n+2000-11-19  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* cplus-dem.c (grow_vect): Prototype.\n+\t(ada_demangle): Cast the arg of ctype macros to unsigned char.\n+\n 2000-11-15  Hans-Peter Nilsson  <hp@bitrange.com>\n \n \t* cplus-dem.c (ada_demangle): Add back ATTRIBUTE_UNUSED for"}, {"sha": "ea43e7e60ce1b30df0c3263d3668ae3ae23e300e", "filename": "libiberty/cplus-dem.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bcc782ce9bbb9b4c7e6641d3219ad74820f0220/libiberty%2Fcplus-dem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bcc782ce9bbb9b4c7e6641d3219ad74820f0220/libiberty%2Fcplus-dem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcplus-dem.c?ref=8bcc782ce9bbb9b4c7e6641d3219ad74820f0220", "patch": "@@ -527,6 +527,9 @@ static void\n recursively_demangle PARAMS ((struct work_stuff *, const char **, string *,\n \t\t\t      int));\n \n+static void\n+grow_vect PARAMS ((void**, size_t*, size_t, int));\n+\n /* Translate count to integer, consuming tokens in the process.\n    Conversion terminates on the first non-digit character.\n \n@@ -995,8 +998,8 @@ ada_demangle (mangled, option)\n \t     sizeof (char));\n   demangled = demangling_buffer;\n   \n-  if (isdigit (mangled[len0 - 1])) {\n-    for (i = len0-2; i >= 0 && isdigit (mangled[i]); i -= 1)\n+  if (isdigit ((unsigned char)mangled[len0 - 1])) {\n+    for (i = len0-2; i >= 0 && isdigit ((unsigned char)mangled[i]); i -= 1)\n       ;\n     if (i > 1 && mangled[i] == '_' && mangled[i-1] == '_')\n       {\n@@ -1010,7 +1013,8 @@ ada_demangle (mangled, option)\n       }\n   }\n   \n-  for (i = 0, j = 0; i < len0 && ! isalpha (mangled[i]); i += 1, j += 1)\n+  for (i = 0, j = 0; i < len0 && ! isalpha ((unsigned char)mangled[i]);\n+       i += 1, j += 1)\n     demangled[j] = mangled[i];\n   \n   at_start_name = 1;\n@@ -1033,7 +1037,7 @@ ada_demangle (mangled, option)\n   demangled[j] = '\\000';\n   \n   for (i = 0; demangled[i] != '\\0'; i += 1)\n-    if (isupper (demangled[i]) || demangled[i] == ' ')\n+    if (isupper ((unsigned char)demangled[i]) || demangled[i] == ' ')\n       goto Suppress;\n \n   if (! changed)"}]}