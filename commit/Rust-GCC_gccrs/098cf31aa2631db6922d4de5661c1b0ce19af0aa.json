{"sha": "098cf31aa2631db6922d4de5661c1b0ce19af0aa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDk4Y2YzMWFhMjYzMWRiNjkyMmQ0ZGU1NjYxYzFiMGNlMTlhZjBhYQ==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-05-14T16:56:18Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-05-14T16:56:18Z"}, "message": "c++: Missing SFINAE with lookup_fnfields [PR78446]\n\nHere we're failing to do SFINAE in build_op_call when looking up the\nclass's operator() via lookup_fnfields, which calls lookup_member always\nwith complain=tf_warning_or_error; from there we would complain\nabout an ambiguous lookup for operator().\n\nThis patch fixes this by adding a tsubst_flags_t parameter to\nlookup_fnfields and adjusting all its callers appropriately.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/78446\n\t* call.c (build_op_call): Pass complain to lookup_fnfields.\n\t(build_special_member_call): Likewise.\n\t* class.c (type_requires_array_cookie): Pass tf_warning_or_error\n\tto lookup_fnfields.\n\t* cp-tree.h (lookup_fnfields): Add tsubst_flags_t parameter.\n\t* except.c (build_throw): Pass tf_warning_or_error to\n\tlookup_fnfields.\n\t* init.c (build_new_1): Pass complain to lookup_fnfields.\n\t* method.c (locate_fn_flags): Likewise.\n\t* name-lookup.c (lookup_name_real_1): Pass tf_warning_or_error\n\tto lookup_fnfields.\n\t* pt.c (tsubst_baselink): Pass complain to lookup_fnfields.\n\t* search.c (lookup_fnfields): New 'complain' parameter.  Pass it\n\tto lookup_member.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/78446\n\t* g++.dg/template/sfinae31.C: New test.", "tree": {"sha": "d8bc0802826202050d19c96ff6bea6cdeb11a1bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d8bc0802826202050d19c96ff6bea6cdeb11a1bf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/098cf31aa2631db6922d4de5661c1b0ce19af0aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/098cf31aa2631db6922d4de5661c1b0ce19af0aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/098cf31aa2631db6922d4de5661c1b0ce19af0aa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/098cf31aa2631db6922d4de5661c1b0ce19af0aa/comments", "author": null, "committer": null, "parents": [{"sha": "d975519ad1066ed0397714c91aafadadb52a63dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d975519ad1066ed0397714c91aafadadb52a63dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d975519ad1066ed0397714c91aafadadb52a63dd"}], "stats": {"total": 67, "additions": 54, "deletions": 13}, "files": [{"sha": "437495458e2a2ae230377c3b92a7b0de3d56948b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/098cf31aa2631db6922d4de5661c1b0ce19af0aa/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/098cf31aa2631db6922d4de5661c1b0ce19af0aa/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=098cf31aa2631db6922d4de5661c1b0ce19af0aa", "patch": "@@ -1,3 +1,21 @@\n+2020-05-14  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/78446\n+\t* call.c (build_op_call): Pass complain to lookup_fnfields.\n+\t(build_special_member_call): Likewise.\n+\t* class.c (type_requires_array_cookie): Pass tf_warning_or_error\n+\tto lookup_fnfields.\n+\t* cp-tree.h (lookup_fnfields): Add tsubst_flags_t parameter.\n+\t* except.c (build_throw): Pass tf_warning_or_error to\n+\tlookup_fnfields.\n+\t* init.c (build_new_1): Pass complain to lookup_fnfields.\n+\t* method.c (locate_fn_flags): Likewise.\n+\t* name-lookup.c (lookup_name_real_1): Pass tf_warning_or_error\n+\tto lookup_fnfields.\n+\t* pt.c (tsubst_baselink): Pass complain to lookup_fnfields.\n+\t* search.c (lookup_fnfields): New 'complain' parameter.  Pass it\n+\tto lookup_member.\n+\n 2020-05-14  Nathan Sidwell  <nathan@acm.org>\n \n \t* parser.c (cp_parser_diagnose_invalid_typename): Mention"}, {"sha": "c5871974eb155daa1d62ce9927c939a6b35c2b6b", "filename": "gcc/cp/call.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/098cf31aa2631db6922d4de5661c1b0ce19af0aa/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/098cf31aa2631db6922d4de5661c1b0ce19af0aa/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=098cf31aa2631db6922d4de5661c1b0ce19af0aa", "patch": "@@ -4792,7 +4792,7 @@ build_op_call_1 (tree obj, vec<tree, va_gc> **args, tsubst_flags_t complain)\n \n   if (TYPE_BINFO (type))\n     {\n-      fns = lookup_fnfields (TYPE_BINFO (type), call_op_identifier, 1);\n+      fns = lookup_fnfields (TYPE_BINFO (type), call_op_identifier, 1, complain);\n       if (fns == error_mark_node)\n \treturn error_mark_node;\n     }\n@@ -5978,7 +5978,7 @@ add_operator_candidates (z_candidate **candidates,\n   tree arg2_type = nargs > 1 ? TREE_TYPE ((*arglist)[1]) : NULL_TREE;\n   if (CLASS_TYPE_P (arg1_type))\n     {\n-      tree fns = lookup_fnfields (arg1_type, fnname, 1);\n+      tree fns = lookup_fnfields (arg1_type, fnname, 1, complain);\n       if (fns == error_mark_node)\n \treturn error_mark_node;\n       if (fns)\n@@ -6785,7 +6785,7 @@ build_op_delete_call (enum tree_code code, tree addr, tree size,\n \n        Therefore, we ask lookup_fnfields to complain about ambiguity.  */\n     {\n-      fns = lookup_fnfields (TYPE_BINFO (type), fnname, 1);\n+      fns = lookup_fnfields (TYPE_BINFO (type), fnname, 1, complain);\n       if (fns == error_mark_node)\n \treturn error_mark_node;\n     }\n@@ -9806,7 +9806,7 @@ build_special_member_call (tree instance, tree name, vec<tree, va_gc> **args,\n \t}\n     }\n \n-  fns = lookup_fnfields (binfo, name, 1);\n+  fns = lookup_fnfields (binfo, name, 1, complain);\n \n   /* When making a call to a constructor or destructor for a subobject\n      that uses virtual base classes, pass down a pointer to a VTT for"}, {"sha": "bab15524a606aac2914a0e4809943e6973a5e8c7", "filename": "gcc/cp/class.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/098cf31aa2631db6922d4de5661c1b0ce19af0aa/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/098cf31aa2631db6922d4de5661c1b0ce19af0aa/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=098cf31aa2631db6922d4de5661c1b0ce19af0aa", "patch": "@@ -5644,7 +5644,7 @@ type_requires_array_cookie (tree type)\n      a cookie.  */\n   fns = lookup_fnfields (TYPE_BINFO (type),\n \t\t\t ovl_op_identifier (false, VEC_DELETE_EXPR),\n-\t\t\t /*protect=*/0);\n+\t\t\t /*protect=*/0, tf_warning_or_error);\n   /* If there are no `operator []' members, or the lookup is\n      ambiguous, then we don't need a cookie.  */\n   if (!fns || fns == error_mark_node)"}, {"sha": "827b03dd5d5024b40e80548c07b73812c5671674", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/098cf31aa2631db6922d4de5661c1b0ce19af0aa/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/098cf31aa2631db6922d4de5661c1b0ce19af0aa/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=098cf31aa2631db6922d4de5661c1b0ce19af0aa", "patch": "@@ -7056,7 +7056,7 @@ extern tree dcast_base_hint\t\t\t(tree, tree);\n extern int accessible_p\t\t\t\t(tree, tree, bool);\n extern int accessible_in_template_p\t\t(tree, tree);\n extern tree lookup_field\t\t\t(tree, tree, int, bool);\n-extern tree lookup_fnfields\t\t\t(tree, tree, int);\n+extern tree lookup_fnfields\t\t\t(tree, tree, int, tsubst_flags_t);\n extern tree lookup_member\t\t\t(tree, tree, int, bool,\n \t\t\t\t\t\t tsubst_flags_t,\n \t\t\t\t\t\t access_failure_info *afi = NULL);"}, {"sha": "9e1aa5085d492ce5a2bfcaabd8998bc6de7e1b13", "filename": "gcc/cp/except.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/098cf31aa2631db6922d4de5661c1b0ce19af0aa/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/098cf31aa2631db6922d4de5661c1b0ce19af0aa/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=098cf31aa2631db6922d4de5661c1b0ce19af0aa", "patch": "@@ -821,7 +821,8 @@ build_throw (location_t loc, tree exp)\n       if (type_build_dtor_call (TREE_TYPE (object)))\n \t{\n \t  tree dtor_fn = lookup_fnfields (TYPE_BINFO (TREE_TYPE (object)),\n-\t\t\t\t\t  complete_dtor_identifier, 0);\n+\t\t\t\t\t  complete_dtor_identifier, 0,\n+\t\t\t\t\t  tf_warning_or_error);\n \t  dtor_fn = BASELINK_FUNCTIONS (dtor_fn);\n \t  mark_used (dtor_fn);\n \t  if (TYPE_HAS_NONTRIVIAL_DESTRUCTOR (TREE_TYPE (object)))"}, {"sha": "ef4b3c4dc3cc9cf684fa089bf582b53e33d60172", "filename": "gcc/cp/init.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/098cf31aa2631db6922d4de5661c1b0ce19af0aa/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/098cf31aa2631db6922d4de5661c1b0ce19af0aa/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=098cf31aa2631db6922d4de5661c1b0ce19af0aa", "patch": "@@ -3276,7 +3276,7 @@ build_new_1 (vec<tree, va_gc> **placement, tree type, tree nelts,\n       /* Create the argument list.  */\n       vec_safe_insert (*placement, 0, size);\n       /* Do name-lookup to find the appropriate operator.  */\n-      fns = lookup_fnfields (elt_type, fnname, /*protect=*/2);\n+      fns = lookup_fnfields (elt_type, fnname, /*protect=*/2, complain);\n       if (fns == NULL_TREE)\n \t{\n \t  if (complain & tf_error)"}, {"sha": "2d31462c90149ead50fdcb5cbd27d7d94e4fe686", "filename": "gcc/cp/method.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/098cf31aa2631db6922d4de5661c1b0ce19af0aa/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/098cf31aa2631db6922d4de5661c1b0ce19af0aa/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=098cf31aa2631db6922d4de5661c1b0ce19af0aa", "patch": "@@ -1646,7 +1646,7 @@ locate_fn_flags (tree type, tree name, tree argtype, int flags,\n \t}\n     }\n \n-  fns = lookup_fnfields (binfo, name, 0);\n+  fns = lookup_fnfields (binfo, name, 0, complain);\n   rval = build_new_method_call (ob, fns, &args, binfo, flags, &fn, complain);\n \n   if (fn && rval == error_mark_node)"}, {"sha": "2ff85f1cf5e29864950798b32a0d407858d0fc86", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/098cf31aa2631db6922d4de5661c1b0ce19af0aa/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/098cf31aa2631db6922d4de5661c1b0ce19af0aa/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=098cf31aa2631db6922d4de5661c1b0ce19af0aa", "patch": "@@ -6455,7 +6455,8 @@ lookup_name_real_1 (tree name, int prefer_type, int nonclass, bool block_p,\n \n \t  /* Lookup the conversion operator in the class.  */\n \t  class_type = level->this_entity;\n-\t  operators = lookup_fnfields (class_type, name, /*protect=*/0);\n+\t  operators = lookup_fnfields (class_type, name, /*protect=*/0,\n+\t\t\t\t       tf_warning_or_error);\n \t  if (operators)\n \t    return operators;\n \t}"}, {"sha": "61e6fa7484dfa30a036dcdf75dcf55c1b5a0243f", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/098cf31aa2631db6922d4de5661c1b0ce19af0aa/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/098cf31aa2631db6922d4de5661c1b0ce19af0aa/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=098cf31aa2631db6922d4de5661c1b0ce19af0aa", "patch": "@@ -16022,7 +16022,8 @@ tsubst_baselink (tree baselink, tree object_type,\n \t/* Treat as-if non-dependent below.  */\n \tdependent_p = false;\n \n-      baselink = lookup_fnfields (qualifying_scope, name, /*protect=*/1);\n+      baselink = lookup_fnfields (qualifying_scope, name, /*protect=*/1,\n+\t\t\t\t  complain);\n       if (!baselink)\n \t{\n \t  if ((complain & tf_error)"}, {"sha": "b9da2fccb7fefebbedf0ed353b20110b62a0ea83", "filename": "gcc/cp/search.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/098cf31aa2631db6922d4de5661c1b0ce19af0aa/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/098cf31aa2631db6922d4de5661c1b0ce19af0aa/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=098cf31aa2631db6922d4de5661c1b0ce19af0aa", "patch": "@@ -1347,10 +1347,11 @@ lookup_field (tree xbasetype, tree name, int protect, bool want_type)\n    return NULL_TREE.  */\n \n tree\n-lookup_fnfields (tree xbasetype, tree name, int protect)\n+lookup_fnfields (tree xbasetype, tree name, int protect,\n+\t\t tsubst_flags_t complain)\n {\n   tree rval = lookup_member (xbasetype, name, protect, /*want_type=*/false,\n-\t\t\t     tf_warning_or_error);\n+\t\t\t     complain);\n \n   /* Ignore non-functions, but propagate the ambiguity list.  */\n   if (!error_operand_p (rval)"}, {"sha": "b9b968a89a14655f3bf156137a9c9a621c560afd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/098cf31aa2631db6922d4de5661c1b0ce19af0aa/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/098cf31aa2631db6922d4de5661c1b0ce19af0aa/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=098cf31aa2631db6922d4de5661c1b0ce19af0aa", "patch": "@@ -1,3 +1,8 @@\n+2020-05-14  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/78446\n+\t* g++.dg/template/sfinae31.C: New test.\n+\n 2020-05-14  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n \n \tPR target/95046"}, {"sha": "b31a5aeb73aa81f004dd1cff0db1e6061992c3ce", "filename": "gcc/testsuite/g++.dg/template/sfinae31.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/098cf31aa2631db6922d4de5661c1b0ce19af0aa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fsfinae31.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/098cf31aa2631db6922d4de5661c1b0ce19af0aa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fsfinae31.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fsfinae31.C?ref=098cf31aa2631db6922d4de5661c1b0ce19af0aa", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/78446\n+// { dg-do compile { target c++11 } }\n+\n+struct A { void operator()(); };\n+struct B { void operator()(); };\n+struct C : A, B {};\n+\n+template<class T>\n+decltype(T()()) foo(int);\n+\n+template<class> int foo(...);\n+\n+using type = decltype(foo<C>(0));\n+using type = int;"}]}