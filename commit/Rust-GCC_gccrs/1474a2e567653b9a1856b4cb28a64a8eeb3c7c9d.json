{"sha": "1474a2e567653b9a1856b4cb28a64a8eeb3c7c9d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTQ3NGEyZTU2NzY1M2I5YTE4NTZiNGNiMjhhNjRhOGVlYjNjN2M5ZA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2019-04-20T06:18:39Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2019-04-20T06:18:39Z"}, "message": "PR c++/90190 - CTAD with list-constructor.\n\nThe passage quoted talks about an initializer list containing a single\nexpression, but a braced-init-list is not an expression.\n\n\t* pt.c (do_class_deduction): Don't try the single element deduction\n\tif the single element is also a braced list.\n\nFrom-SVN: r270468", "tree": {"sha": "c44f0a4514314df1b521b0a7c1ce72bbff4dc3d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c44f0a4514314df1b521b0a7c1ce72bbff4dc3d3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1474a2e567653b9a1856b4cb28a64a8eeb3c7c9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1474a2e567653b9a1856b4cb28a64a8eeb3c7c9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1474a2e567653b9a1856b4cb28a64a8eeb3c7c9d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1474a2e567653b9a1856b4cb28a64a8eeb3c7c9d/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d395d8e771fce88e46e5c3908e53669adb5b71c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d395d8e771fce88e46e5c3908e53669adb5b71c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d395d8e771fce88e46e5c3908e53669adb5b71c4"}], "stats": {"total": 47, "additions": 38, "deletions": 9}, "files": [{"sha": "11fc9de29b05c311da08d5354bd11acf381b82fb", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1474a2e567653b9a1856b4cb28a64a8eeb3c7c9d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1474a2e567653b9a1856b4cb28a64a8eeb3c7c9d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1474a2e567653b9a1856b4cb28a64a8eeb3c7c9d", "patch": "@@ -1,5 +1,9 @@\n 2019-04-19  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/90190 - CTAD with list-constructor.\n+\t* pt.c (do_class_deduction): Don't try the single element deduction\n+\tif the single element is also a braced list.\n+\n \tPR c++/90171 - ICE with destroying delete with size_t parm.\n \t* call.c (sized_deallocation_fn_p): New.  Use it instead of\n \tsecond_parm_is_size_t in most cases."}, {"sha": "5f73fac3e8fb4bfac9c46c9e5f75fd0f8e11138c", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1474a2e567653b9a1856b4cb28a64a8eeb3c7c9d/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1474a2e567653b9a1856b4cb28a64a8eeb3c7c9d/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=1474a2e567653b9a1856b4cb28a64a8eeb3c7c9d", "patch": "@@ -27325,15 +27325,18 @@ do_class_deduction (tree ptype, tree tmpl, tree init, int flags,\n \t     where U is a specialization of C or a class derived from a\n \t     specialization of C.  */\n \t  tree elt = CONSTRUCTOR_ELT (init, 0)->value;\n-\t  tree etype = TREE_TYPE (elt);\n-\n-\t  tree tparms = INNERMOST_TEMPLATE_PARMS (DECL_TEMPLATE_PARMS (tmpl));\n-\t  tree targs = make_tree_vec (TREE_VEC_LENGTH (tparms));\n-\t  int err = unify (tparms, targs, type, etype,\n-\t\t\t   UNIFY_ALLOW_DERIVED, /*explain*/false);\n-\t  if (err == 0)\n-\t    try_list_ctor = false;\n-\t  ggc_free (targs);\n+\t  if (!BRACE_ENCLOSED_INITIALIZER_P (elt))\n+\t    {\n+\t      tree etype = TREE_TYPE (elt);\n+\t      tree tparms = (INNERMOST_TEMPLATE_PARMS\n+\t\t\t     (DECL_TEMPLATE_PARMS (tmpl)));\n+\t      tree targs = make_tree_vec (TREE_VEC_LENGTH (tparms));\n+\t      int err = unify (tparms, targs, type, etype,\n+\t\t\t       UNIFY_ALLOW_DERIVED, /*explain*/false);\n+\t      if (err == 0)\n+\t\ttry_list_ctor = false;\n+\t      ggc_free (targs);\n+\t    }\n \t}\n       if (try_list_ctor || is_std_init_list (type))\n \targs = make_tree_vector_single (init);"}, {"sha": "e9711c1acb8e51371fc115c1c8cd80affc428bee", "filename": "gcc/testsuite/g++.dg/cpp1z/class-deduction65.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1474a2e567653b9a1856b4cb28a64a8eeb3c7c9d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction65.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1474a2e567653b9a1856b4cb28a64a8eeb3c7c9d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction65.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction65.C?ref=1474a2e567653b9a1856b4cb28a64a8eeb3c7c9d", "patch": "@@ -0,0 +1,22 @@\n+// PR c++/90190\n+// { dg-do compile { target c++17 } }\n+\n+#include <initializer_list>\n+\n+enum class X {};\n+\n+struct Term {\n+  double a;\n+  X i;\n+};\n+\n+template <class It = const Term *>\n+struct sum {\n+  sum(std::initializer_list<Term>) {}\n+};\n+\n+int main() {\n+  auto c2 = sum{{1, X()}, {2, X()}};\n+  auto c1 = sum{{1, X()}};  // fails only this\n+  auto c0 = sum{{}};\n+}"}]}