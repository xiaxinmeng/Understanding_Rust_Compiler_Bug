{"sha": "da27f5567c0dd3fccf035e14bb7010a0538648e4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGEyN2Y1NTY3YzBkZDNmY2NmMDM1ZTE0YmI3MDEwYTA1Mzg2NDhlNA==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2014-09-06T07:38:48Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2014-09-06T07:38:48Z"}, "message": "hashtable_policy.h (_Prime_rehash_policy): Constructor noexcept qualified.\n\n2014-09-06  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n\n\t* include/bits/hashtable_policy.h (_Prime_rehash_policy): Constructor\n\tnoexcept qualified.\n\t(_Hash_code_base<>): All specialization default constructible if\n\tpossible.\n\t(_Hashtable_base<>): Likewise.\n\t* include/bits/hashtable.h (_Hashtable<>()): Implementation defaulted.\n\t* include/bits/unordered_map.h (unordered_map<>::unordered_map()): New,\n\timplementation defaulted.\n\t(unordered_multimap<>::unordered_multimap()): Likewise.\n\t* include/bits/unordered_set.h\n\t(unordered_set<>::unordered_set()): Likewise.\n\t(unordered_multiset<>::unordered_multiset()): Likewise.\n\t* include/debug/unordered_map: Likewise.\n\t* include/debug/unordered_set: Likewise.\n\t* testsuite/23_containers/unordered_map/allocator/noexcept.cc\n\t(test04()): New.\n\t* testsuite/23_containers/unordered_multimap/allocator/noexcept.cc\n\t(test04()): New.\n\t* testsuite/23_containers/unordered_set/allocator/noexcept.cc\n\t(test04()): New.\n\t* testsuite/23_containers/unordered_multiset/allocator/noexcept.cc\n\t(test04()): New.\n\nFrom-SVN: r214986", "tree": {"sha": "f9fb62e347a8ece0f4fb4df66627af986bc27651", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f9fb62e347a8ece0f4fb4df66627af986bc27651"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da27f5567c0dd3fccf035e14bb7010a0538648e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da27f5567c0dd3fccf035e14bb7010a0538648e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da27f5567c0dd3fccf035e14bb7010a0538648e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da27f5567c0dd3fccf035e14bb7010a0538648e4/comments", "author": null, "committer": null, "parents": [{"sha": "4fe24839bee48ab1b1fb1e4da33045d238615b9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fe24839bee48ab1b1fb1e4da33045d238615b9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4fe24839bee48ab1b1fb1e4da33045d238615b9a"}], "stats": {"total": 170, "additions": 128, "deletions": 42}, "files": [{"sha": "bf3f48db3fbe1d173d36327727ceb17f0b7fad31", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da27f5567c0dd3fccf035e14bb7010a0538648e4/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da27f5567c0dd3fccf035e14bb7010a0538648e4/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=da27f5567c0dd3fccf035e14bb7010a0538648e4", "patch": "@@ -1,3 +1,28 @@\n+2014-09-06  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* include/bits/hashtable_policy.h (_Prime_rehash_policy): Constructor\n+\tnoexcept qualified.\n+\t(_Hash_code_base<>): All specialization default constructible if\n+\tpossible.\n+\t(_Hashtable_base<>): Likewise.\n+\t* include/bits/hashtable.h (_Hashtable<>()): Implementation defaulted.\n+\t* include/bits/unordered_map.h (unordered_map<>::unordered_map()): New,\n+\timplementation defaulted.\n+\t(unordered_multimap<>::unordered_multimap()): Likewise.\n+\t* include/bits/unordered_set.h\n+\t(unordered_set<>::unordered_set()): Likewise.\n+\t(unordered_multiset<>::unordered_multiset()): Likewise.\n+\t* include/debug/unordered_map: Likewise.\n+\t* include/debug/unordered_set: Likewise.\n+\t* testsuite/23_containers/unordered_map/allocator/noexcept.cc\n+\t(test04()): New.\n+\t* testsuite/23_containers/unordered_multimap/allocator/noexcept.cc\n+\t(test04()): New.\n+\t* testsuite/23_containers/unordered_set/allocator/noexcept.cc\n+\t(test04()): New.\n+\t* testsuite/23_containers/unordered_multiset/allocator/noexcept.cc\n+\t(test04()): New.\n+\n 2014-08-30  John David Anglin  <danglin@gcc.gnu.org>\n \n \t* config/abi/post/hppa-linux-gnu/baseline_symbols.txt: Update."}, {"sha": "0eb58cfb6ed47e2e772dd3a6d52b07fa7d7a19fb", "filename": "libstdc++-v3/include/bits/hashtable.h", "status": "modified", "additions": 32, "deletions": 27, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da27f5567c0dd3fccf035e14bb7010a0538648e4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da27f5567c0dd3fccf035e14bb7010a0538648e4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h?ref=da27f5567c0dd3fccf035e14bb7010a0538648e4", "patch": "@@ -310,10 +310,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t   const_local_iterator;\n \n     private:\n-      __bucket_type*\t\t_M_buckets;\n-      size_type\t\t\t_M_bucket_count;\n+      __bucket_type*\t\t_M_buckets\t\t= &_M_single_bucket;\n+      size_type\t\t\t_M_bucket_count\t\t= 1;\n       __node_base\t\t_M_before_begin;\n-      size_type\t\t\t_M_element_count;\n+      size_type\t\t\t_M_element_count\t= 0;\n       _RehashPolicy\t\t_M_rehash_policy;\n \n       // A single bucket used when only need for 1 bucket. Especially\n@@ -322,7 +322,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       // qualified.\n       // Note that we can't leave hashtable with 0 bucket without adding\n       // numerous checks in the code to avoid 0 modulus.\n-      __bucket_type\t\t_M_single_bucket;\n+      __bucket_type\t\t_M_single_bucket\t= nullptr;\n \n       bool\n       _M_uses_single_bucket(__bucket_type* __bkts) const\n@@ -382,8 +382,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       void\n       _M_reset() noexcept;\n \n+      _Hashtable(const _H1& __h1, const _H2& __h2, const _Hash& __h,\n+\t\t const _Equal& __eq, const _ExtractKey& __exk,\n+\t\t const allocator_type& __a)\n+\t: __hashtable_base(__exk, __h1, __h2, __h, __eq),\n+\t  __hashtable_alloc(__node_alloc_type(__a))\n+      { }\n+\n     public:\n       // Constructor, destructor, assignment, swap\n+      _Hashtable() = default;\n       _Hashtable(size_type __bucket_hint,\n \t\t const _H1&, const _H2&, const _Hash&,\n \t\t const _Equal&, const _ExtractKey&,\n@@ -407,12 +415,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       // Use delegating constructors.\n       explicit\n       _Hashtable(const allocator_type& __a)\n-      : _Hashtable(10, _H1(), _H2(), _Hash(), key_equal(),\n-\t\t   __key_extract(), __a)\n+\t: __hashtable_alloc(__node_alloc_type(__a))\n       { }\n \n       explicit\n-      _Hashtable(size_type __n = 10,\n+      _Hashtable(size_type __n,\n \t\t const _H1& __hf = _H1(),\n \t\t const key_equal& __eql = key_equal(),\n \t\t const allocator_type& __a = allocator_type())\n@@ -791,15 +798,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t       const _H1& __h1, const _H2& __h2, const _Hash& __h,\n \t       const _Equal& __eq, const _ExtractKey& __exk,\n \t       const allocator_type& __a)\n-    : __hashtable_base(__exk, __h1, __h2, __h, __eq),\n-      __map_base(),\n-      __rehash_base(),\n-      __hashtable_alloc(__node_alloc_type(__a)),\n-      _M_element_count(0),\n-      _M_rehash_policy()\n+      : _Hashtable(__h1, __h2, __h, __eq, __exk, __a)\n     {\n-      _M_bucket_count = _M_rehash_policy._M_next_bkt(__bucket_hint);\n-      _M_buckets = _M_allocate_buckets(_M_bucket_count);\n+      auto __bkt = _M_rehash_policy._M_next_bkt(__bucket_hint);\n+      if (__bkt > _M_bucket_count)\n+\t{\n+\t  _M_buckets = _M_allocate_buckets(__bkt);\n+\t  _M_bucket_count = __bkt;\n+\t}\n     }\n \n   template<typename _Key, typename _Value,\n@@ -814,20 +820,20 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t const _H1& __h1, const _H2& __h2, const _Hash& __h,\n \t\t const _Equal& __eq, const _ExtractKey& __exk,\n \t\t const allocator_type& __a)\n-      : __hashtable_base(__exk, __h1, __h2, __h, __eq),\n-\t__map_base(),\n-\t__rehash_base(),\n-\t__hashtable_alloc(__node_alloc_type(__a)),\n-\t_M_element_count(0),\n-\t_M_rehash_policy()\n+\t: _Hashtable(__h1, __h2, __h, __eq, __exk, __a)\n       {\n \tauto __nb_elems = __detail::__distance_fw(__f, __l);\n-\t_M_bucket_count =\n+\tauto __bkt_count =\n \t  _M_rehash_policy._M_next_bkt(\n \t    std::max(_M_rehash_policy._M_bkt_for_elements(__nb_elems),\n \t\t     __bucket_hint));\n \n-\t_M_buckets = _M_allocate_buckets(_M_bucket_count);\n+\tif (__bkt_count > _M_bucket_count)\n+\t  {\n+\t    _M_buckets = _M_allocate_buckets(__bkt_count);\n+\t    _M_bucket_count = __bkt_count;\n+\t  }\n+\n \t__try\n \t  {\n \t    for (; __f != __l; ++__f)\n@@ -1101,7 +1107,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __rehash_base(__ht),\n       __hashtable_alloc(\n \t__node_alloc_traits::_S_select_on_copy(__ht._M_node_allocator())),\n-      _M_buckets(),\n+      _M_buckets(nullptr),\n       _M_bucket_count(__ht._M_bucket_count),\n       _M_element_count(__ht._M_element_count),\n       _M_rehash_policy(__ht._M_rehash_policy)\n@@ -1175,7 +1181,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __map_base(__ht),\n       __rehash_base(__ht),\n       __hashtable_alloc(__node_alloc_type(__a)),\n-      _M_buckets(),\n+      _M_buckets(nullptr),\n       _M_bucket_count(__ht._M_bucket_count),\n       _M_element_count(__ht._M_element_count),\n       _M_rehash_policy(__ht._M_rehash_policy)\n@@ -1218,8 +1224,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     ~_Hashtable() noexcept\n     {\n       clear();\n-      if (_M_buckets)\n-\t_M_deallocate_buckets();\n+      _M_deallocate_buckets();\n     }\n \n   template<typename _Key, typename _Value,"}, {"sha": "74d1bd011cf14c4325d792f1941b79f26ba76ecf", "filename": "libstdc++-v3/include/bits/hashtable_policy.h", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da27f5567c0dd3fccf035e14bb7010a0538648e4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da27f5567c0dd3fccf035e14bb7010a0538648e4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h?ref=da27f5567c0dd3fccf035e14bb7010a0538648e4", "patch": "@@ -460,7 +460,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   /// smallest prime that keeps the load factor small enough.\n   struct _Prime_rehash_policy\n   {\n-    _Prime_rehash_policy(float __z = 1.0)\n+    _Prime_rehash_policy(float __z = 1.0) noexcept\n     : _M_max_load_factor(__z), _M_next_resize(0) { }\n \n     float\n@@ -1071,7 +1071,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef void* \t\t\t\t\t__hash_code;\n       typedef _Hash_node<_Value, false>\t\t\t__node_type;\n \n-      // We need the default constructor for the local iterators.\n+      // We need the default constructor for the local iterators and _Hashtable\n+      // default constructor.\n       _Hash_code_base() = default;\n \n       _Hash_code_base(const _ExtractKey& __ex, const _H1&, const _H2&,\n@@ -1161,7 +1162,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef std::size_t \t\t\t\t__hash_code;\n       typedef _Hash_node<_Value, false>\t\t\t__node_type;\n \n-      // We need the default constructor for the local iterators.\n+      // We need the default constructor for the local iterators and _Hashtable\n+      // default constructor.\n       _Hash_code_base() = default;\n \n       _Hash_code_base(const _ExtractKey& __ex,\n@@ -1250,6 +1252,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef std::size_t \t\t\t\t__hash_code;\n       typedef _Hash_node<_Value, true>\t\t\t__node_type;\n \n+      // We need the default constructor for _Hashtable default constructor.\n+      _Hash_code_base() = default;\n       _Hash_code_base(const _ExtractKey& __ex,\n \t\t      const _H1& __h1, const _H2& __h2,\n \t\t      const _Default_ranged_hash&)\n@@ -1694,6 +1698,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t\t__hash_code, __hash_cached::value>;\n \n   protected:\n+    _Hashtable_base() = default;\n     _Hashtable_base(const _ExtractKey& __ex, const _H1& __h1, const _H2& __h2,\n \t\t    const _Hash& __hash, const _Equal& __eq)\n     : __hash_code_base(__ex, __h1, __h2, __hash), _EqualEBO(__eq)\n@@ -1906,6 +1911,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t__alloc_rebind<__node_alloc_type, __bucket_type>;\n       using __bucket_alloc_traits = std::allocator_traits<__bucket_alloc_type>;\n \n+      _Hashtable_alloc() = default;\n       _Hashtable_alloc(const _Hashtable_alloc&) = default;\n       _Hashtable_alloc(_Hashtable_alloc&&) = default;\n "}, {"sha": "019201d1dcca66e670583b1ec7f9189cfe3fffe0", "filename": "libstdc++-v3/include/bits/unordered_map.h", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da27f5567c0dd3fccf035e14bb7010a0538648e4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da27f5567c0dd3fccf035e14bb7010a0538648e4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_map.h?ref=da27f5567c0dd3fccf035e14bb7010a0538648e4", "patch": "@@ -128,15 +128,18 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n       //construct/destroy/copy\n \n+      /// Default constructor.\n+      unordered_map() = default;\n+\n       /**\n        *  @brief  Default constructor creates no elements.\n-       *  @param __n  Initial number of buckets.\n+       *  @param __n  Minimal initial number of buckets.\n        *  @param __hf  A hash functor.\n        *  @param __eql  A key equality functor.\n        *  @param __a  An allocator object.\n        */\n       explicit\n-      unordered_map(size_type __n = 10,\n+      unordered_map(size_type __n,\n \t\t    const hasher& __hf = hasher(),\n \t\t    const key_equal& __eql = key_equal(),\n \t\t    const allocator_type& __a = allocator_type())\n@@ -840,15 +843,18 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n       //construct/destroy/copy\n \n+      /// Default constructor.\n+      unordered_multimap() = default;\n+\n       /**\n        *  @brief  Default constructor creates no elements.\n-       *  @param __n  Initial number of buckets.\n+       *  @param __n  Mnimal initial number of buckets.\n        *  @param __hf  A hash functor.\n        *  @param __eql  A key equality functor.\n        *  @param __a  An allocator object.\n        */\n       explicit\n-      unordered_multimap(size_type __n = 10,\n+      unordered_multimap(size_type __n,\n \t\t\t const hasher& __hf = hasher(),\n \t\t\t const key_equal& __eql = key_equal(),\n \t\t\t const allocator_type& __a = allocator_type())"}, {"sha": "161c6fbbe61e8dddf4d183b07e09688e1e81d2f0", "filename": "libstdc++-v3/include/bits/unordered_set.h", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da27f5567c0dd3fccf035e14bb7010a0538648e4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da27f5567c0dd3fccf035e14bb7010a0538648e4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_set.h?ref=da27f5567c0dd3fccf035e14bb7010a0538648e4", "patch": "@@ -121,15 +121,19 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       //@}\n \n       // construct/destroy/copy\n+\n+      /// Default constructor.\n+      unordered_set() = default;\n+\n       /**\n        *  @brief  Default constructor creates no elements.\n-       *  @param __n  Initial number of buckets.\n+       *  @param __n  Minimal initial number of buckets.\n        *  @param __hf  A hash functor.\n        *  @param __eql  A key equality functor.\n        *  @param __a  An allocator object.\n        */\n       explicit\n-      unordered_set(size_type __n = 10,\n+      unordered_set(size_type __n,\n \t\t    const hasher& __hf = hasher(),\n \t\t    const key_equal& __eql = key_equal(),\n \t\t    const allocator_type& __a = allocator_type())\n@@ -756,15 +760,19 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       //@}\n \n       // construct/destroy/copy\n+\n+      /// Default constructor.\n+      unordered_multiset() = default;\n+\n       /**\n        *  @brief  Default constructor creates no elements.\n-       *  @param __n  Initial number of buckets.\n+       *  @param __n  Minimal initial number of buckets.\n        *  @param __hf  A hash functor.\n        *  @param __eql  A key equality functor.\n        *  @param __a  An allocator object.\n        */\n       explicit\n-      unordered_multiset(size_type __n = 10,\n+      unordered_multiset(size_type __n,\n \t\t\t const hasher& __hf = hasher(),\n \t\t\t const key_equal& __eql = key_equal(),\n \t\t\t const allocator_type& __a = allocator_type())"}, {"sha": "b4ff69cfd8f7f35957b220148e7039add7ad979c", "filename": "libstdc++-v3/include/debug/unordered_map", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da27f5567c0dd3fccf035e14bb7010a0538648e4/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da27f5567c0dd3fccf035e14bb7010a0538648e4/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_map?ref=da27f5567c0dd3fccf035e14bb7010a0538648e4", "patch": "@@ -82,8 +82,10 @@ namespace __debug\n       typedef __gnu_debug::_Safe_local_iterator<\n \t_Base_const_local_iterator, unordered_map>\tconst_local_iterator;\n \n+      unordered_map() = default;\n+\n       explicit\n-      unordered_map(size_type __n = 10,\n+      unordered_map(size_type __n,\n \t\t    const hasher& __hf = hasher(),\n \t\t    const key_equal& __eql = key_equal(),\n \t\t    const allocator_type& __a = allocator_type())\n@@ -495,8 +497,10 @@ namespace __debug\n       typedef __gnu_debug::_Safe_local_iterator<\n \t_Base_const_local_iterator, unordered_multimap> const_local_iterator;\n \n+      unordered_multimap() = default;\n+\n       explicit\n-      unordered_multimap(size_type __n = 10,\n+      unordered_multimap(size_type __n,\n \t\t\t const hasher& __hf = hasher(),\n \t\t\t const key_equal& __eql = key_equal(),\n \t\t\t const allocator_type& __a = allocator_type())"}, {"sha": "f69f753ae493f4da7c09aa99e5babe3b3fb5243e", "filename": "libstdc++-v3/include/debug/unordered_set", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da27f5567c0dd3fccf035e14bb7010a0538648e4/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_set", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da27f5567c0dd3fccf035e14bb7010a0538648e4/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_set", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_set?ref=da27f5567c0dd3fccf035e14bb7010a0538648e4", "patch": "@@ -82,8 +82,10 @@ namespace __debug\n       typedef __gnu_debug::_Safe_local_iterator<\n \t_Base_const_local_iterator, unordered_set>\tconst_local_iterator;\n \n+      unordered_set() = default;\n+\n       explicit\n-      unordered_set(size_type __n = 10,\n+      unordered_set(size_type __n,\n \t\t    const hasher& __hf = hasher(),\n \t\t    const key_equal& __eql = key_equal(),\n \t\t    const allocator_type& __a = allocator_type())\n@@ -491,8 +493,10 @@ namespace __debug\n       typedef __gnu_debug::_Safe_local_iterator<\n \t_Base_const_local_iterator, unordered_multiset> const_local_iterator;\n \n+      unordered_multiset() = default;\n+\n       explicit\n-      unordered_multiset(size_type __n = 10,\n+      unordered_multiset(size_type __n,\n \t\t\t const hasher& __hf = hasher(),\n \t\t\t const key_equal& __eql = key_equal(),\n \t\t\t const allocator_type& __a = allocator_type())"}, {"sha": "9b282cfc45c0935d07f5e8b36aabb70e67c51a98", "filename": "libstdc++-v3/testsuite/23_containers/unordered_map/allocator/noexcept.cc", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da27f5567c0dd3fccf035e14bb7010a0538648e4/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fallocator%2Fnoexcept.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da27f5567c0dd3fccf035e14bb7010a0538648e4/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fallocator%2Fnoexcept.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fallocator%2Fnoexcept.cc?ref=da27f5567c0dd3fccf035e14bb7010a0538648e4", "patch": "@@ -76,3 +76,10 @@ void test03()\n   static_assert( noexcept( v1 = std::move(v2) ), \"Move assign cannot throw\" );\n   static_assert( !noexcept( v1.swap(v2) ), \"Swap can throw\" );\n }\n+\n+void test04()\n+{\n+  typedef std::unordered_map<int, int> test_type;\n+  static_assert( noexcept( test_type() ), \"Default constructor do not throw\" );\n+  static_assert( noexcept( test_type(test_type()) ), \"Move constructor do not throw\" );\n+}"}, {"sha": "aabf002559f639d233720459b83e4688e1d03702", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multimap/allocator/noexcept.cc", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da27f5567c0dd3fccf035e14bb7010a0538648e4/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Fallocator%2Fnoexcept.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da27f5567c0dd3fccf035e14bb7010a0538648e4/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Fallocator%2Fnoexcept.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Fallocator%2Fnoexcept.cc?ref=da27f5567c0dd3fccf035e14bb7010a0538648e4", "patch": "@@ -76,3 +76,10 @@ void test03()\n   static_assert( noexcept( v1 = std::move(v2) ), \"Move assign cannot throw\" );\n   static_assert( !noexcept( v1.swap(v2) ), \"Swap can throw\" );\n }\n+\n+void test04()\n+{\n+  typedef std::unordered_multimap<int, int> test_type;\n+  static_assert( noexcept( test_type() ), \"Default constructor do not throw\" );\n+  static_assert( noexcept( test_type(test_type()) ), \"Move constructor do not throw\" );\n+}"}, {"sha": "bf5e0e7573f438d14cd6c01ce5ae0f2b7cb264d6", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multiset/allocator/noexcept.cc", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da27f5567c0dd3fccf035e14bb7010a0538648e4/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Fallocator%2Fnoexcept.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da27f5567c0dd3fccf035e14bb7010a0538648e4/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Fallocator%2Fnoexcept.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Fallocator%2Fnoexcept.cc?ref=da27f5567c0dd3fccf035e14bb7010a0538648e4", "patch": "@@ -76,3 +76,10 @@ void test03()\n   static_assert( noexcept( v1 = std::move(v2) ), \"Move assign cannot throw\" );\n   static_assert( !noexcept( v1.swap(v2) ), \"Swap can throw\" );\n }\n+\n+void test04()\n+{\n+  typedef std::unordered_multiset<int> test_type;\n+  static_assert( noexcept( test_type() ), \"Default constructor do not throw\" );\n+  static_assert( noexcept( test_type(test_type()) ), \"Move constructor do not throw\" );\n+}"}, {"sha": "17c2dfaac162d44d16c704ab3d2347958c4b38a3", "filename": "libstdc++-v3/testsuite/23_containers/unordered_set/allocator/noexcept.cc", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da27f5567c0dd3fccf035e14bb7010a0538648e4/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Fallocator%2Fnoexcept.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da27f5567c0dd3fccf035e14bb7010a0538648e4/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Fallocator%2Fnoexcept.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Fallocator%2Fnoexcept.cc?ref=da27f5567c0dd3fccf035e14bb7010a0538648e4", "patch": "@@ -76,3 +76,10 @@ void test03()\n   static_assert( noexcept( v1 = std::move(v2) ), \"Move assign cannot throw\" );\n   static_assert( !noexcept( v1.swap(v2) ), \"Swap can throw\" );\n }\n+\n+void test04()\n+{\n+  typedef std::unordered_set<int> test_type;\n+  static_assert( noexcept( test_type() ), \"Default constructor do not throw\" );\n+  static_assert( noexcept( test_type(test_type()) ), \"Move constructor do not throw\" );\n+}"}]}