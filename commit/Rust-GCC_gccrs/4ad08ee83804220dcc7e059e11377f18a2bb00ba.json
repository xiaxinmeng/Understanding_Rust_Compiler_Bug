{"sha": "4ad08ee83804220dcc7e059e11377f18a2bb00ba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGFkMDhlZTgzODA0MjIwZGNjN2UwNTllMTEzNzdmMThhMmJiMDBiYQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2014-11-22T21:08:07Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2014-11-22T21:08:07Z"}, "message": "ipa.c (symbol_table::remove_unreachable_nodes): Mark all inline clones as having abstract origin used.\n\n\n\t* ipa.c (symbol_table::remove_unreachable_nodes): Mark all inline clones\n\tas having abstract origin used.\n\t* ipa-inline-transform.c (can_remove_node_now_p_1): Drop abstract origin check.\n\t(clone_inlined_nodes): Copy abstract originflag.\n\t* lto-cgraph.c (compute_ltrans_boundary): Use get_create to get abstract origin node.\n\nFrom-SVN: r217973", "tree": {"sha": "7f57169135a855a1a28976503c91b1195e9e7d5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f57169135a855a1a28976503c91b1195e9e7d5a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4ad08ee83804220dcc7e059e11377f18a2bb00ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ad08ee83804220dcc7e059e11377f18a2bb00ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ad08ee83804220dcc7e059e11377f18a2bb00ba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ad08ee83804220dcc7e059e11377f18a2bb00ba/comments", "author": null, "committer": null, "parents": [{"sha": "2d3a20632b8bbd0b80d2bbaba6d93032c0fb909b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d3a20632b8bbd0b80d2bbaba6d93032c0fb909b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d3a20632b8bbd0b80d2bbaba6d93032c0fb909b"}], "stats": {"total": 28, "additions": 23, "deletions": 5}, "files": [{"sha": "7a735d54f4c34b36ac7d0e39814b23839a076143", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad08ee83804220dcc7e059e11377f18a2bb00ba/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad08ee83804220dcc7e059e11377f18a2bb00ba/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4ad08ee83804220dcc7e059e11377f18a2bb00ba", "patch": "@@ -1,3 +1,11 @@\n+2014-11-22  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* ipa.c (symbol_table::remove_unreachable_nodes): Mark all inline clones\n+\tas having abstract origin used.\n+\t* ipa-inline-transform.c (can_remove_node_now_p_1): Drop abstract origin check.\n+\t(clone_inlined_nodes): Copy abstract originflag.\n+\t* lto-cgraph.c (compute_ltrans_boundary): Use get_create to get abstract origin node.\n+\n 2014-11-22  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* params.def (PARAM_MAX_COMPLETELY_PEELED_INSNS): Increase to 200."}, {"sha": "a64e4dd379cf1e2615786056eb36872ec287d0bc", "filename": "gcc/ipa-inline-transform.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad08ee83804220dcc7e059e11377f18a2bb00ba/gcc%2Fipa-inline-transform.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad08ee83804220dcc7e059e11377f18a2bb00ba/gcc%2Fipa-inline-transform.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline-transform.c?ref=4ad08ee83804220dcc7e059e11377f18a2bb00ba", "patch": "@@ -100,7 +100,6 @@ can_remove_node_now_p_1 (struct cgraph_node *node)\n      the callgraph so references can point to it.  */\n   return (!node->address_taken\n \t  && !node->has_aliases_p ()\n-\t  && !node->used_as_abstract_origin\n \t  && node->can_remove_if_no_direct_calls_p ()\n \t  /* Inlining might enable more devirtualizing, so we want to remove\n \t     those only after all devirtualizable virtual calls are processed.\n@@ -218,6 +217,7 @@ clone_inlined_nodes (struct cgraph_edge *e, bool duplicate,\n \t\t\t\t       update_original, vNULL, true,\n \t\t\t\t       inlining_into,\n \t\t\t\t       NULL);\n+\t  n->used_as_abstract_origin = e->callee->used_as_abstract_origin;\n \t  e->redirect_callee (n);\n \t}\n     }"}, {"sha": "4f87b75946cfb070b62e4c176b90a3418b7b06ab", "filename": "gcc/ipa.c", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad08ee83804220dcc7e059e11377f18a2bb00ba/gcc%2Fipa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad08ee83804220dcc7e059e11377f18a2bb00ba/gcc%2Fipa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa.c?ref=4ad08ee83804220dcc7e059e11377f18a2bb00ba", "patch": "@@ -360,9 +360,18 @@ symbol_table::remove_unreachable_nodes (bool before_inlining_p, FILE *file)\n \t      && DECL_ABSTRACT_ORIGIN (node->decl))\n \t    {\n \t      struct cgraph_node *origin_node\n-\t      = cgraph_node::get_create (DECL_ABSTRACT_ORIGIN (node->decl));\n-\t      origin_node->used_as_abstract_origin = true;\n-\t      enqueue_node (origin_node, &first, &reachable);\n+\t      = cgraph_node::get (DECL_ABSTRACT_ORIGIN (node->decl));\n+\t      if (origin_node && !origin_node->used_as_abstract_origin)\n+\t\t{\n+\t          origin_node->used_as_abstract_origin = true;\n+\t\t  gcc_assert (!origin_node->prev_sibling_clone);\n+\t\t  gcc_assert (!origin_node->next_sibling_clone);\n+\t\t  for (cgraph_node *n = origin_node->clones; n;\n+\t\t       n = n->next_sibling_clone)\n+\t\t    if (n->decl == DECL_ABSTRACT_ORIGIN (node->decl))\n+\t\t      n->used_as_abstract_origin = true;\n+\t          enqueue_node (origin_node, &first, &reachable);\n+\t\t}\n \t    }\n \t  /* If any symbol in a comdat group is reachable, force\n \t     all externally visible symbols in the same comdat"}, {"sha": "d424e145474f45b084831142768046fd147a70b9", "filename": "gcc/lto-cgraph.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad08ee83804220dcc7e059e11377f18a2bb00ba/gcc%2Flto-cgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad08ee83804220dcc7e059e11377f18a2bb00ba/gcc%2Flto-cgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-cgraph.c?ref=4ad08ee83804220dcc7e059e11377f18a2bb00ba", "patch": "@@ -877,7 +877,8 @@ compute_ltrans_boundary (lto_symtab_encoder_t in_encoder)\n       if (DECL_ABSTRACT_ORIGIN (node->decl))\n \t{\n \t  struct cgraph_node *origin_node\n-\t  = cgraph_node::get (DECL_ABSTRACT_ORIGIN (node->decl));\n+\t  = cgraph_node::get_create (DECL_ABSTRACT_ORIGIN (node->decl));\n+\t  origin_node->used_as_abstract_origin = true;\n \t  add_node_to (encoder, origin_node, true);\n \t}\n     }"}]}