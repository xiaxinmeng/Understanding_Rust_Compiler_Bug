{"sha": "962b96688689a73ddf5fb97d9c63514f98b49d27", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTYyYjk2Njg4Njg5YTczZGRmNWZiOTdkOWM2MzUxNGY5OGI0OWQyNw==", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.vnet.ibm.com", "date": "2017-11-06T13:47:46Z"}, "committer": {"name": "William Schmidt", "email": "wschmidt@gcc.gnu.org", "date": "2017-11-06T13:47:46Z"}, "message": "[gcc]\n\n2017-11-06  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\t* config/rs6000/altivec.md (*p9_vadu<mode>3) Rename to\n\tp9_vadu<mode>3.\n\t(usadv16qi): New define_expand.\n\t(usadv8hi): New define_expand.\n\n[gcc/testsuite]\n\n2017-11-06  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\t* gcc.target/powerpc/sad-vectorize-1.c: New file.\n\t* gcc.target/powerpc/sad-vectorize-2.c: New file.\n\t* gcc.target/powerpc/sad-vectorize-3.c: New file.\n\t* gcc.target/powerpc/sad-vectorize-4.c: New file.\n\nFrom-SVN: r254453", "tree": {"sha": "0280580b6e50f308e05691c5c526ef405bee3aa0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0280580b6e50f308e05691c5c526ef405bee3aa0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/962b96688689a73ddf5fb97d9c63514f98b49d27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/962b96688689a73ddf5fb97d9c63514f98b49d27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/962b96688689a73ddf5fb97d9c63514f98b49d27", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/962b96688689a73ddf5fb97d9c63514f98b49d27/comments", "author": {"login": "wschmidt-ibm", "id": 5520937, "node_id": "MDQ6VXNlcjU1MjA5Mzc=", "avatar_url": "https://avatars.githubusercontent.com/u/5520937?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wschmidt-ibm", "html_url": "https://github.com/wschmidt-ibm", "followers_url": "https://api.github.com/users/wschmidt-ibm/followers", "following_url": "https://api.github.com/users/wschmidt-ibm/following{/other_user}", "gists_url": "https://api.github.com/users/wschmidt-ibm/gists{/gist_id}", "starred_url": "https://api.github.com/users/wschmidt-ibm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wschmidt-ibm/subscriptions", "organizations_url": "https://api.github.com/users/wschmidt-ibm/orgs", "repos_url": "https://api.github.com/users/wschmidt-ibm/repos", "events_url": "https://api.github.com/users/wschmidt-ibm/events{/privacy}", "received_events_url": "https://api.github.com/users/wschmidt-ibm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8e7d1486f6635614f97e26f27ed8033f647ef6f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e7d1486f6635614f97e26f27ed8033f647ef6f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e7d1486f6635614f97e26f27ed8033f647ef6f2"}], "stats": {"total": 245, "additions": 244, "deletions": 1}, "files": [{"sha": "6ba0a808b92547a0b873c471a39cd9074d0fbc58", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/962b96688689a73ddf5fb97d9c63514f98b49d27/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/962b96688689a73ddf5fb97d9c63514f98b49d27/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=962b96688689a73ddf5fb97d9c63514f98b49d27", "patch": "@@ -1,3 +1,10 @@\n+2017-11-06  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+\t* config/rs6000/altivec.md (*p9_vadu<mode>3) Rename to\n+\tp9_vadu<mode>3.\n+\t(usadv16qi): New define_expand.\n+\t(usadv8hi): New define_expand.\n+\n 2017-11-06  Jan Hubicka  <hubicka@ucw.cz>\n \n \tPR bootstrap/82832"}, {"sha": "651f6c9b978f88bc7dc371ac3c37c47629f1c0dc", "filename": "gcc/config/rs6000/altivec.md", "status": "modified", "additions": 44, "deletions": 1, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/962b96688689a73ddf5fb97d9c63514f98b49d27/gcc%2Fconfig%2Frs6000%2Faltivec.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/962b96688689a73ddf5fb97d9c63514f98b49d27/gcc%2Fconfig%2Frs6000%2Faltivec.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.md?ref=962b96688689a73ddf5fb97d9c63514f98b49d27", "patch": "@@ -4020,7 +4020,7 @@\n   \"TARGET_P9_VECTOR\")\n \n ;; Vector absolute difference unsigned\n-(define_insn \"*p9_vadu<mode>3\"\n+(define_insn \"p9_vadu<mode>3\"\n   [(set (match_operand:VI 0 \"register_operand\" \"=v\")\n         (unspec:VI [(match_operand:VI 1 \"register_operand\" \"v\")\n \t\t    (match_operand:VI 2 \"register_operand\" \"v\")]\n@@ -4184,6 +4184,49 @@\n   \"vbpermd %0,%1,%2\"\n   [(set_attr \"type\" \"vecsimple\")])\n \n+;; Support for SAD (sum of absolute differences).\n+\n+;; Due to saturating semantics, we can't combine the sum-across\n+;; with the vector accumulate in vsum4ubs.  A vadduwm is needed.\n+(define_expand \"usadv16qi\"\n+  [(use (match_operand:V4SI 0 \"register_operand\"))\n+   (use (match_operand:V16QI 1 \"register_operand\"))\n+   (use (match_operand:V16QI 2 \"register_operand\"))\n+   (use (match_operand:V4SI 3 \"register_operand\"))]\n+  \"TARGET_P9_VECTOR\"\n+{\n+  rtx absd = gen_reg_rtx (V16QImode);\n+  rtx zero = gen_reg_rtx (V4SImode);\n+  rtx psum = gen_reg_rtx (V4SImode);\n+\n+  emit_insn (gen_p9_vaduv16qi3 (absd, operands[1], operands[2]));\n+  emit_insn (gen_altivec_vspltisw (zero, const0_rtx));\n+  emit_insn (gen_altivec_vsum4ubs (psum, absd, zero));\n+  emit_insn (gen_addv4si3 (operands[0], psum, operands[3]));\n+  DONE;\n+})\n+\n+;; Since vsum4shs is saturating and further performs signed\n+;; arithmetic, we can't combine the sum-across with the vector\n+;; accumulate in vsum4shs.  A vadduwm is needed.\n+(define_expand \"usadv8hi\"\n+  [(use (match_operand:V4SI 0 \"register_operand\"))\n+   (use (match_operand:V8HI 1 \"register_operand\"))\n+   (use (match_operand:V8HI 2 \"register_operand\"))\n+   (use (match_operand:V4SI 3 \"register_operand\"))]\n+  \"TARGET_P9_VECTOR\"\n+{\n+  rtx absd = gen_reg_rtx (V8HImode);\n+  rtx zero = gen_reg_rtx (V4SImode);\n+  rtx psum = gen_reg_rtx (V4SImode);\n+\n+  emit_insn (gen_p9_vaduv8hi3 (absd, operands[1], operands[2]));\n+  emit_insn (gen_altivec_vspltisw (zero, const0_rtx));\n+  emit_insn (gen_altivec_vsum4shs (psum, absd, zero));\n+  emit_insn (gen_addv4si3 (operands[0], psum, operands[3]));\n+  DONE;\n+})\n+\n ;; Decimal Integer operations\n (define_int_iterator UNSPEC_BCD_ADD_SUB [UNSPEC_BCDADD UNSPEC_BCDSUB])\n "}, {"sha": "dde8a35486e702774208ba8fbdb81e379080e94c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/962b96688689a73ddf5fb97d9c63514f98b49d27/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/962b96688689a73ddf5fb97d9c63514f98b49d27/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=962b96688689a73ddf5fb97d9c63514f98b49d27", "patch": "@@ -1,3 +1,10 @@\n+2017-11-06  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+\t* gcc.target/powerpc/sad-vectorize-1.c: New file.\n+\t* gcc.target/powerpc/sad-vectorize-2.c: New file.\n+\t* gcc.target/powerpc/sad-vectorize-3.c: New file.\n+\t* gcc.target/powerpc/sad-vectorize-4.c: New file.\n+\n 2017-11-06  Martin Liska  <mliska@suse.cz>\n \n \t* c-c++-common/cilk-plus/AN/pr57541-2.c (foo1): Return a value"}, {"sha": "b122bf5ce3e97df6fd0b0565955926ed20a9b0e3", "filename": "gcc/testsuite/gcc.target/powerpc/sad-vectorize-1.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/962b96688689a73ddf5fb97d9c63514f98b49d27/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsad-vectorize-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/962b96688689a73ddf5fb97d9c63514f98b49d27/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsad-vectorize-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsad-vectorize-1.c?ref=962b96688689a73ddf5fb97d9c63514f98b49d27", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-skip-if \"\" { powerpc*-*-aix* } } */\n+/* { dg-options \"-O3 -mcpu=power9\" } */\n+\n+/* Verify that we vectorize this SAD loop using vabsdub. */\n+\n+extern int abs (int __x) __attribute__ ((__nothrow__, __leaf__)) __attribute__ ((__const__));\n+\n+static int\n+foo (unsigned char *w, int i, unsigned char *x, int j)\n+{\n+  int tot = 0;\n+  for (int a = 0; a < 16; a++)\n+    {\n+      for (int b = 0; b < 16; b++)\n+\ttot += abs (w[b] - x[b]);\n+      w += i;\n+      x += j;\n+    }\n+  return tot;\n+}\n+\n+void\n+bar (unsigned char *w, unsigned char *x, int i, int *result)\n+{\n+  *result = foo (w, 16, x, i);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vabsdub\" 16 } } */\n+/* { dg-final { scan-assembler-times \"vsum4ubs\" 16 } } */\n+/* { dg-final { scan-assembler-times \"vadduwm\" 17 } } */\n+\n+/* Note: One of the 16 adds is optimized out (add with zero),\n+   leaving 15.  The extra two adds are for the final reduction.  */"}, {"sha": "b1b6de9ddea98528c598a4d1b286cf62bf3e88b2", "filename": "gcc/testsuite/gcc.target/powerpc/sad-vectorize-2.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/962b96688689a73ddf5fb97d9c63514f98b49d27/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsad-vectorize-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/962b96688689a73ddf5fb97d9c63514f98b49d27/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsad-vectorize-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsad-vectorize-2.c?ref=962b96688689a73ddf5fb97d9c63514f98b49d27", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-skip-if \"\" { powerpc*-*-aix* } } */\n+/* { dg-options \"-O3 -mcpu=power9\" } */\n+\n+/* Verify that we vectorize this SAD loop using vabsduh. */\n+\n+extern int abs (int __x) __attribute__ ((__nothrow__, __leaf__)) __attribute__ ((__const__));\n+\n+static int\n+foo (unsigned short *w, int i, unsigned short *x, int j)\n+{\n+  int tot = 0;\n+  for (int a = 0; a < 16; a++)\n+    {\n+      for (int b = 0; b < 8; b++)\n+\ttot += abs (w[b] - x[b]);\n+      w += i;\n+      x += j;\n+    }\n+  return tot;\n+}\n+\n+void\n+bar (unsigned short *w, unsigned short *x, int i, int *result)\n+{\n+  *result = foo (w, 8, x, i);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vabsduh\" 16 } } */\n+/* { dg-final { scan-assembler-times \"vsum4shs\" 16 } } */\n+/* { dg-final { scan-assembler-times \"vadduwm\" 17 } } */\n+\n+/* Note: One of the 16 adds is optimized out (add with zero),\n+   leaving 15.  The extra two adds are for the final reduction.  */"}, {"sha": "0513a507484ec889bfc0f5d2569bb8f507290d09", "filename": "gcc/testsuite/gcc.target/powerpc/sad-vectorize-3.c", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/962b96688689a73ddf5fb97d9c63514f98b49d27/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsad-vectorize-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/962b96688689a73ddf5fb97d9c63514f98b49d27/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsad-vectorize-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsad-vectorize-3.c?ref=962b96688689a73ddf5fb97d9c63514f98b49d27", "patch": "@@ -0,0 +1,57 @@\n+/* { dg-do run { target { powerpc*-*-linux* && { lp64 && p9vector_hw } } } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-O3 -mcpu=power9\" } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+\n+/* Verify that we get correct code when we vectorize this SAD loop using\n+   vabsdub. */\n+\n+extern void abort ();\n+extern int abs (int __x) __attribute__ ((__nothrow__, __leaf__)) __attribute__ ((__const__));\n+\n+static int\n+foo (unsigned char *w, int i, unsigned char *x, int j)\n+{\n+  int tot = 0;\n+  for (int a = 0; a < 16; a++)\n+    {\n+      for (int b = 0; b < 16; b++)\n+\ttot += abs (w[b] - x[b]);\n+      w += i;\n+      x += j;\n+    }\n+  return tot;\n+}\n+\n+void\n+bar (unsigned char *w, unsigned char *x, int i, int *result)\n+{\n+  *result = foo (w, 16, x, i);\n+}\n+\n+int\n+main ()\n+{\n+  unsigned char m[256];\n+  unsigned char n[256];\n+  int sum, i;\n+\n+  for (i = 0; i < 256; ++i)\n+    if (i % 2 == 0)\n+      {\n+\tm[i] = (i % 8) * 2 + 1;\n+\tn[i] = -(i % 8);\n+      }\n+    else\n+      {\n+\tm[i] = -((i % 8) * 2 + 2);\n+\tn[i] = -((i % 8) >> 1);\n+      }\n+  \n+  bar (m, n, 16, &sum);\n+\n+  if (sum != 32384)\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "2db016563a5076dc001e231109aff5462b1bd02d", "filename": "gcc/testsuite/gcc.target/powerpc/sad-vectorize-4.c", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/962b96688689a73ddf5fb97d9c63514f98b49d27/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsad-vectorize-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/962b96688689a73ddf5fb97d9c63514f98b49d27/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsad-vectorize-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsad-vectorize-4.c?ref=962b96688689a73ddf5fb97d9c63514f98b49d27", "patch": "@@ -0,0 +1,57 @@\n+/* { dg-do run { target { powerpc*-*-linux* && { lp64 && p9vector_hw } } } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-O3 -mcpu=power9\" } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+\n+/* Verify that we get correct code when we vectorize this SAD loop using\n+   vabsduh. */\n+\n+extern void abort ();\n+extern int abs (int __x) __attribute__ ((__nothrow__, __leaf__)) __attribute__ ((__const__));\n+\n+static int\n+foo (unsigned short *w, int i, unsigned short *x, int j)\n+{\n+  int tot = 0;\n+  for (int a = 0; a < 16; a++)\n+    {\n+      for (int b = 0; b < 8; b++)\n+\ttot += abs (w[b] - x[b]);\n+      w += i;\n+      x += j;\n+    }\n+  return tot;\n+}\n+\n+void\n+bar (unsigned short *w, unsigned short *x, int i, int *result)\n+{\n+  *result = foo (w, 8, x, i);\n+}\n+\n+int\n+main ()\n+{\n+  unsigned short m[128];\n+  unsigned short n[128];\n+  int sum, i;\n+\n+  for (i = 0; i < 128; ++i)\n+    if (i % 2 == 0)\n+      {\n+\tm[i] = (i % 8) * 2 + 1;\n+\tn[i] = i % 8;\n+      }\n+    else\n+      {\n+\tm[i] = (i % 8) * 4 - 3;\n+\tn[i] = (i % 8) >> 1;\n+      }\n+  \n+  bar (m, n, 8, &sum);\n+\n+  if (sum != 992)\n+    abort ();\n+\n+  return 0;\n+}"}]}