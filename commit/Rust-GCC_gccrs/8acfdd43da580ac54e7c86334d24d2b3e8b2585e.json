{"sha": "8acfdd43da580ac54e7c86334d24d2b3e8b2585e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGFjZmRkNDNkYTU4MGFjNTRlN2M4NjMzNGQyNGQyYjNlOGIyNTg1ZQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2003-02-05T09:40:57Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2003-02-05T09:40:57Z"}, "message": "i386.md (UNSPEC_BSF): Remove.\n\n        * config/i386/i386.md (UNSPEC_BSF): Remove.\n        (ffssi2): Split into cmove and no_cmove insns and splitters;\n        lose pentium float trick for now.\n        (ffssi_1): Add * to name; use CTZ instead of UNSPEC.\n        (ctzsi2, clzsi2, bsr): New.\n\nFrom-SVN: r62434", "tree": {"sha": "88fb0452e4b04572b0f5aef96a24eebb3b2056ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/88fb0452e4b04572b0f5aef96a24eebb3b2056ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8acfdd43da580ac54e7c86334d24d2b3e8b2585e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8acfdd43da580ac54e7c86334d24d2b3e8b2585e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8acfdd43da580ac54e7c86334d24d2b3e8b2585e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8acfdd43da580ac54e7c86334d24d2b3e8b2585e/comments", "author": null, "committer": null, "parents": [{"sha": "c407570a72cf04bdc69105cb46d3b25df08cf88e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c407570a72cf04bdc69105cb46d3b25df08cf88e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c407570a72cf04bdc69105cb46d3b25df08cf88e"}], "stats": {"total": 173, "additions": 87, "deletions": 86}, "files": [{"sha": "ee7f50da2cca15e52e260412a6d7f9910f040790", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8acfdd43da580ac54e7c86334d24d2b3e8b2585e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8acfdd43da580ac54e7c86334d24d2b3e8b2585e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8acfdd43da580ac54e7c86334d24d2b3e8b2585e", "patch": "@@ -1,3 +1,11 @@\n+2003-02-04  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/i386/i386.md (UNSPEC_BSF): Remove.\n+\t(ffssi2): Split into cmove and no_cmove insns and splitters;\n+\tlose pentium float trick for now.\n+\t(ffssi_1): Add * to name; use CTZ instead of UNSPEC.\n+\t(ctzsi2, clzsi2, bsr): New.\n+\n 2003-02-04  Richard Henderson  <rth@redhat.com>\n \n \t* config/ia64/ia64.c (rtx_needs_barrier): Handle POPCOUNT,"}, {"sha": "ffb2153bf3bc5cd6aadba87fa47d9286ee5667bb", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 79, "deletions": 86, "changes": 165, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8acfdd43da580ac54e7c86334d24d2b3e8b2585e/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8acfdd43da580ac54e7c86334d24d2b3e8b2585e/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=8acfdd43da580ac54e7c86334d24d2b3e8b2585e", "patch": "@@ -80,7 +80,6 @@\n    (UNSPEC_SCAS\t\t\t20)\n    (UNSPEC_SIN\t\t\t21)\n    (UNSPEC_COS\t\t\t22)\n-   (UNSPEC_BSF\t\t\t23)\n    (UNSPEC_FNSTSW\t\t24)\n    (UNSPEC_SAHF\t\t\t25)\n    (UNSPEC_FSTCW\t\t26)\n@@ -14110,104 +14109,98 @@\n   [(set_attr \"type\" \"leave\")])\n \f\n (define_expand \"ffssi2\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"\") \n-\t(ffs:SI (match_operand:SI 1 \"nonimmediate_operand\" \"\")))]\n+  [(parallel\n+     [(set (match_operand:SI 0 \"register_operand\" \"\") \n+\t   (ffs:SI (match_operand:SI 1 \"nonimmediate_operand\" \"\")))\n+      (clobber (match_scratch:SI 2 \"\"))\n+      (clobber (reg:CC 17))])]\n   \"\"\n-{\n-  rtx out = gen_reg_rtx (SImode), tmp = gen_reg_rtx (SImode);\n-  rtx in = operands[1];\n+  \"\")\n \n-  if (TARGET_CMOVE)\n-    {\n-      emit_move_insn (tmp, constm1_rtx);\n-      emit_insn (gen_ffssi_1 (out, in));\n-      emit_insn (gen_rtx_SET (VOIDmode, out,\n-\t\t  gen_rtx_IF_THEN_ELSE (SImode, \n-\t\t    gen_rtx_EQ (VOIDmode, gen_rtx_REG (CCZmode, FLAGS_REG),\n-\t\t\t\tconst0_rtx),\n-\t\t    tmp,\n-\t\t    out)));\n-      emit_insn (gen_addsi3 (out, out, const1_rtx));\n-      emit_move_insn (operands[0], out);\n-    }\n+(define_insn_and_split \"*ffs_cmove\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\") \n+\t(ffs:SI (match_operand:SI 1 \"nonimmediate_operand\" \"rm\")))\n+   (clobber (match_scratch:SI 2 \"=&r\"))\n+   (clobber (reg:CC 17))]\n+  \"TARGET_CMOVE\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 2) (const_int -1))\n+   (parallel [(set (reg:CCZ 17) (compare:CCZ (match_dup 1) (const_int 0)))\n+\t      (set (match_dup 0) (ctz:SI (match_dup 1)))])\n+   (set (match_dup 0) (if_then_else:SI\n+\t\t\t(eq (reg:CCZ 17) (const_int 0))\n+\t\t\t(match_dup 2)\n+\t\t\t(match_dup 0)))\n+   (parallel [(set (match_dup 0) (plus:SI (match_dup 0) (const_int 1)))\n+\t      (clobber (reg:CC 17))])]\n+  \"\")\n \n-  /* Pentium bsf instruction is extremely slow.  The following code is\n-     recommended by the Intel Optimizing Manual as a reasonable replacement:\n-           TEST    EAX,EAX\n-\t   JZ      SHORT BS2\n-\t   XOR     ECX,ECX\n-\t   MOV     DWORD PTR [TEMP+4],ECX\n-\t   SUB     ECX,EAX\n-\t   AND     EAX,ECX\n-\t   MOV     DWORD PTR [TEMP],EAX\n-\t   FILD    QWORD PTR [TEMP]\n-\t   FSTP    QWORD PTR [TEMP]\n-\t   WAIT    ; WAIT only needed for compatibility with\n-\t           ; earlier processors\n-\t   MOV     ECX, DWORD PTR [TEMP+4]\n-\t   SHR     ECX,20\n-\t   SUB     ECX,3FFH\n-\t   TEST    EAX,EAX       ; clear zero flag\n-       BS2:\n-     Following piece of code expand ffs to similar beast.\n-       */\n-\n-  else if (TARGET_PENTIUM && !optimize_size && TARGET_80387)\n-    {\n-      rtx label = gen_label_rtx ();\n-      rtx lo, hi;\n-      rtx mem = assign_386_stack_local (DImode, 0);\n-      rtx fptmp = gen_reg_rtx (DFmode);\n-      split_di (&mem, 1, &lo, &hi);\n-\n-      emit_move_insn (out, const0_rtx);\n-\n-      emit_cmp_and_jump_insns (in, const0_rtx, EQ, 0, SImode, 1, label);\n-\n-      emit_move_insn (hi, out);\n-      emit_insn (gen_subsi3 (out, out, in));\n-      emit_insn (gen_andsi3 (out, out, in));\n-      emit_move_insn (lo, out);\n-      emit_insn (gen_floatdidf2 (fptmp,mem));\n-      emit_move_insn (gen_rtx_MEM (DFmode, XEXP (mem, 0)), fptmp);\n-      emit_move_insn (out, hi);\n-      emit_insn (gen_lshrsi3 (out, out, GEN_INT (20)));\n-      emit_insn (gen_subsi3 (out, out, GEN_INT (0x3ff - 1)));\n-\n-      emit_label (label);\n-      LABEL_NUSES (label) = 1;\n-\n-      emit_move_insn (operands[0], out);\n-    }\n-  else\n-    {\n-      emit_move_insn (tmp, const0_rtx);\n-      emit_insn (gen_ffssi_1 (out, in));\n-      emit_insn (gen_rtx_SET (VOIDmode, \n-\t\t  gen_rtx_STRICT_LOW_PART (VOIDmode, gen_lowpart (QImode, tmp)),\n-\t\t  gen_rtx_EQ (QImode, gen_rtx_REG (CCZmode, FLAGS_REG),\n-\t\t\t      const0_rtx)));\n-      emit_insn (gen_negsi2 (tmp, tmp));\n-      emit_insn (gen_iorsi3 (out, out, tmp));\n-      emit_insn (gen_addsi3 (out, out, const1_rtx));\n-      emit_move_insn (operands[0], out);\n-    }\n-  DONE;  \n+(define_insn_and_split \"*ffs_no_cmove\"\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=r\") \n+\t(ffs:SI (match_operand:SI 1 \"nonimmediate_operand\" \"rm\")))\n+   (clobber (match_scratch:SI 2 \"=&r\"))\n+   (clobber (reg:CC 17))]\n+  \"\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 2) (const_int 0))\n+\t      (clobber (reg:CC 17))])\n+   (parallel [(set (reg:CCZ 17) (compare:CCZ (match_dup 1) (const_int 0)))\n+\t      (set (match_dup 0) (ctz:SI (match_dup 1)))])\n+   (set (strict_low_part (match_dup 3))\n+\t(eq:QI (reg:CCZ 17) (const_int 0)))\n+   (parallel [(set (match_dup 2) (neg:SI (match_dup 2)))\n+\t      (clobber (reg:CC 17))])\n+   (parallel [(set (match_dup 0) (ior:SI (match_dup 0) (match_dup 2)))\n+\t      (clobber (reg:CC 17))])\n+   (parallel [(set (match_dup 0) (plus:SI (match_dup 0) (const_int 1)))\n+\t      (clobber (reg:CC 17))])]\n+{\n+  operands[3] = gen_lowpart (QImode, operands[2]);\n })\n \n-(define_insn \"ffssi_1\"\n+(define_insn \"*ffssi_1\"\n   [(set (reg:CCZ 17)\n-        (compare:CCZ (match_operand:SI 1 \"nonimmediate_operand\" \"rm\")\n+\t(compare:CCZ (match_operand:SI 1 \"nonimmediate_operand\" \"rm\")\n \t\t     (const_int 0)))\n    (set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(unspec:SI [(match_dup 1)] UNSPEC_BSF))]\n+\t(ctz:SI (match_dup 1)))]\n+  \"\"\n+  \"bsf{l}\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"prefix_0f\" \"1\")\n+   (set_attr \"ppro_uops\" \"few\")])\n+\n+(define_insn \"ctzsi2\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(ctz:SI (match_operand:SI 1 \"nonimmediate_operand\" \"rm\")))\n+   (clobber (reg:CC 17))]\n   \"\"\n   \"bsf{l}\\t{%1, %0|%0, %1}\"\n   [(set_attr \"prefix_0f\" \"1\")\n    (set_attr \"ppro_uops\" \"few\")])\n \n-;; ffshi2 is not useful -- 4 word prefix ops are needed, which is larger\n-;; and slower than the two-byte movzx insn needed to do the work in SImode.\n+(define_expand \"clzsi2\"\n+  [(parallel\n+     [(set (match_operand:SI 0 \"register_operand\" \"\")\n+\t   (minus:SI (const_int 31)\n+\t\t     (clz:SI (match_operand:SI 1 \"nonimmediate_operand\" \"\"))))\n+      (clobber (reg:CC 17))])\n+   (parallel\n+     [(set (match_dup 0) (xor:SI (match_dup 0) (const_int 31)))\n+      (clobber (reg:CC 17))])]\n+  \"\"\n+  \"\")\n+\n+(define_insn \"*bsr\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(minus:SI (const_int 31)\n+\t\t  (clz:SI (match_operand:SI 1 \"nonimmediate_operand\" \"rm\"))))\n+   (clobber (reg:CC 17))]\n+  \"\"\n+  \"bsr{l}\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"prefix_0f\" \"1\")\n+   (set_attr \"ppro_uops\" \"few\")])\n \f\n ;; Thread-local storage patterns for ELF.\n ;;"}]}