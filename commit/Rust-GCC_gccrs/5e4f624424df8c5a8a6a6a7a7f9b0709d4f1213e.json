{"sha": "5e4f624424df8c5a8a6a6a7a7f9b0709d4f1213e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWU0ZjYyNDQyNGRmOGM1YThhNmE2YTdhN2Y5YjA3MDlkNGYxMjEzZQ==", "commit": {"author": {"name": "Clinton Popetz", "email": "cpopetz@cygnus.com", "date": "2000-01-14T21:19:51Z"}, "committer": {"name": "Clinton Popetz", "email": "cpopetz@gcc.gnu.org", "date": "2000-01-14T21:19:51Z"}, "message": "builtins.c (PAD_VARARGS_DOWN): Define.\n\n\t* builtins.c (PAD_VARARGS_DOWN): Define.\n\t(std_expand_builtin_va_arg): Use the above macro.\n\t* config/mips/mips.c (PAD_VARARGS_DOWN): Define.\n\t* tm.texi (Register Arguments): Document the above macro.\n\nFrom-SVN: r31421", "tree": {"sha": "f9a35a30ce0a91f50eb0507d969b47230adec015", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f9a35a30ce0a91f50eb0507d969b47230adec015"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5e4f624424df8c5a8a6a6a7a7f9b0709d4f1213e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e4f624424df8c5a8a6a6a7a7f9b0709d4f1213e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e4f624424df8c5a8a6a6a7a7f9b0709d4f1213e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e4f624424df8c5a8a6a6a7a7f9b0709d4f1213e/comments", "author": null, "committer": null, "parents": [{"sha": "06be917325903b12e7d679c65c9213b7880f3f9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06be917325903b12e7d679c65c9213b7880f3f9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06be917325903b12e7d679c65c9213b7880f3f9f"}], "stats": {"total": 39, "additions": 32, "deletions": 7}, "files": [{"sha": "c2ea56d2ba2bc331da591449da6a44f1d9425183", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e4f624424df8c5a8a6a6a7a7f9b0709d4f1213e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e4f624424df8c5a8a6a6a7a7f9b0709d4f1213e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5e4f624424df8c5a8a6a6a7a7f9b0709d4f1213e", "patch": "@@ -1,3 +1,10 @@\n+2000-01-14  Clinton Popetz  <cpopetz@cygnus.com>\n+\n+\t* builtins.c (PAD_VARARGS_DOWN): Define. \n+\t(std_expand_builtin_va_arg): Use the above macro.\n+\t* config/mips/mips.c (PAD_VARARGS_DOWN): Define.\n+\t* tm.texi (Register Arguments): Document the above macro.\n+\t\n 2000-01-14  Nick Clifton  <nickc@cygnus.com>\n \n \t* emit-rtl.c (emit_insn): If checking is enabled, make sure"}, {"sha": "1ca5b5dbb5e7f6dfab2daf2c5081164ecd21a23e", "filename": "gcc/builtins.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e4f624424df8c5a8a6a6a7a7f9b0709d4f1213e/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e4f624424df8c5a8a6a6a7a7f9b0709d4f1213e/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=5e4f624424df8c5a8a6a6a7a7f9b0709d4f1213e", "patch": "@@ -51,6 +51,10 @@ Boston, MA 02111-1307, USA.  */\n #define OUTGOING_REGNO(IN) (IN)\n #endif\n \n+#ifndef PAD_VARARGS_DOWN\n+#define PAD_VARARGS_DOWN BYTES_BIG_ENDIAN\n+#endif\n+\n tree (*lang_type_promotes_to) PARAMS ((tree));\n \n static int get_pointer_alignment\tPARAMS ((tree, unsigned));\n@@ -1967,7 +1971,7 @@ std_expand_builtin_va_arg (valist, type)\n \n   /* Get AP.  */\n   addr_tree = valist;\n-  if (BYTES_BIG_ENDIAN)\n+  if (PAD_VARARGS_DOWN)\n     {\n       /* Small args are padded downward.  */\n "}, {"sha": "43601a7d782dde65273f13c532a8f74ee445944f", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e4f624424df8c5a8a6a6a7a7f9b0709d4f1213e/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e4f624424df8c5a8a6a6a7a7f9b0709d4f1213e/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=5e4f624424df8c5a8a6a6a7a7f9b0709d4f1213e", "patch": "@@ -1,5 +1,5 @@\n /* Subroutines for insn-output.c for MIPS\n-   Copyright (C) 1989, 90, 91, 93-98, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1989, 90, 91, 93-98, 1999, 2000 Free Software Foundation, Inc.\n    Contributed by A. Lichnewsky, lich@inria.inria.fr.\n    Changes by Michael Meissner, meissner@osf.org.\n    64 bit r4000 support by Ian Lance Taylor, ian@cygnus.com, and\n@@ -4045,11 +4045,10 @@ mips_va_start (stdarg_p, valist, nextarg)\n      tree valist;\n      rtx nextarg;\n {\n-  int arg_words, fp_arg_words;\n+  int arg_words;\n   tree t;\n \n   arg_words = current_function_args_info.arg_words;\n-  fp_arg_words = current_function_args_info.fp_arg_words;\n \n   if (mips_abi == ABI_EABI)\n     {\n@@ -4059,6 +4058,11 @@ mips_va_start (stdarg_p, valist, nextarg)\n \t  tree gprv, fprv;\n \t  int gpro, fpro;\n \n+  \t  fpro = (8 - current_function_args_info.fp_arg_words);\n+\n+\t  if (!TARGET_64BIT)\n+\t\tfpro /= 2;\n+\n \t  f_fpr = TYPE_FIELDS (va_list_type_node);\n \t  f_rem = TREE_CHAIN (f_fpr);\n \t  f_gpr = TREE_CHAIN (f_rem);\n@@ -4084,16 +4088,15 @@ mips_va_start (stdarg_p, valist, nextarg)\n \t  expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n \n \t  t = build (MODIFY_EXPR, integer_type_node, rem,\n-\t\t     build_int_2 (8 - fp_arg_words, 0));\n+\t\t     build_int_2 (fpro, 0));\n \t  TREE_SIDE_EFFECTS (t) = 1;\n \t  expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n \n-\t  fpro = (8 - fp_arg_words) * 8;\n \t  if (fpro == 0)\n \t    fprv = gprv;\n \t  else\n \t    fprv = fold (build (PLUS_EXPR, ptr_type_node, gprv,\n-\t\t\t\tbuild_int_2 (-fpro, -1)));\n+\t\t\t\tbuild_int_2 (-(fpro*8), -1)));\n \n \t  if (! TARGET_64BIT)\n \t    fprv = fold (build (BIT_AND_EXPR, ptr_type_node, fprv,\n@@ -4199,6 +4202,9 @@ mips_va_arg (valist, type)\n \t      if (r != addr_rtx)\n \t\temit_move_insn (addr_rtx, r);\n \n+\t      /* Ensure that the POSTINCREMENT is emitted before lab_over */\n+\t      emit_queue();\n+\n \t      emit_jump (lab_over);\n \t      emit_barrier ();\n \t      emit_label (lab_false);"}, {"sha": "ed74148b35153b6de045f29fd14ba52317e39dd2", "filename": "gcc/tm.texi", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e4f624424df8c5a8a6a6a7a7f9b0709d4f1213e/gcc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e4f624424df8c5a8a6a6a7a7f9b0709d4f1213e/gcc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftm.texi?ref=5e4f624424df8c5a8a6a6a7a7f9b0709d4f1213e", "patch": "@@ -2943,6 +2943,14 @@ For little-endian machines, the default is to pad upward.  For\n big-endian machines, the default is to pad downward for an argument of\n constant size shorter than an @code{int}, and upward otherwise.\n \n+@findex PAD_VARARGS_DOWN\n+@item PAD_VARARGS_DOWN\n+If defined, a C expression which determines whether the default \n+implementation of va_arg will attempt to pad down before reading the \n+next argument, if that argument is smaller than its aligned space as\n+controlled by @code{PARM_BOUNDARY}.  If this macro is not defined, all such\n+arguments are padded down if @code{BYTES_BIG_ENDIAN} is true.\n+\n @findex FUNCTION_ARG_BOUNDARY\n @item FUNCTION_ARG_BOUNDARY (@var{mode}, @var{type})\n If defined, a C expression that gives the alignment boundary, in bits,"}]}