{"sha": "58ec0964b1d2f2ab197916cd661728f6a7a1736b", "node_id": "C_kwDOANBUbNoAKDU4ZWMwOTY0YjFkMmYyYWIxOTc5MTZjZDY2MTcyOGY2YTdhMTczNmI", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2022-01-25T21:20:51Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2022-01-25T21:22:49Z"}, "message": "Avoid recomputing PHI results after failure (PR104203).\n\nResolves:\nPR tree-optimization/104203 - huge compile-time regression in pointer_query\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/104203\n\t* gimple-ssa-warn-access.cc (pass_data pass_data_waccess): Use\n\tTV_WARN_ACCESS.\n\t* pointer-query.cc (access_ref::merge_ref): Change return type.\n\tConvert failure to a conservative success.\n\t(access_ref::get_ref): Adjust to the change above.  Short-circuit\n\tPHI evaluation after first failure turned into conservative success.\n\t* pointer-query.h (access_ref::merge_ref): Change return type.\n\t* timevar.def (TV_WARN_ACCESS): New timer variable.", "tree": {"sha": "556496226150209b836df2a38b4cc457eab9e86f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/556496226150209b836df2a38b4cc457eab9e86f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/58ec0964b1d2f2ab197916cd661728f6a7a1736b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58ec0964b1d2f2ab197916cd661728f6a7a1736b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58ec0964b1d2f2ab197916cd661728f6a7a1736b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58ec0964b1d2f2ab197916cd661728f6a7a1736b/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c1f274e3e090ee03bedc22dd7169b28e759974e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c1f274e3e090ee03bedc22dd7169b28e759974e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c1f274e3e090ee03bedc22dd7169b28e759974e"}], "stats": {"total": 49, "additions": 32, "deletions": 17}, "files": [{"sha": "afcf0f71becae5032e5cc0322779fca19ad84eda", "filename": "gcc/gimple-ssa-warn-access.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58ec0964b1d2f2ab197916cd661728f6a7a1736b/gcc%2Fgimple-ssa-warn-access.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58ec0964b1d2f2ab197916cd661728f6a7a1736b/gcc%2Fgimple-ssa-warn-access.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-warn-access.cc?ref=58ec0964b1d2f2ab197916cd661728f6a7a1736b", "patch": "@@ -2053,7 +2053,7 @@ const pass_data pass_data_waccess = {\n   GIMPLE_PASS,\n   \"waccess\",\n   OPTGROUP_NONE,\n-  TV_NONE,\n+  TV_WARN_ACCESS, /* timer variable */\n   PROP_cfg, /* properties_required  */\n   0,\t    /* properties_provided  */\n   0,\t    /* properties_destroyed  */"}, {"sha": "b092ef4fbdca114e16ffb88da131c68dfa25ea01", "filename": "gcc/pointer-query.cc", "status": "modified", "additions": 29, "deletions": 15, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58ec0964b1d2f2ab197916cd661728f6a7a1736b/gcc%2Fpointer-query.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58ec0964b1d2f2ab197916cd661728f6a7a1736b/gcc%2Fpointer-query.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpointer-query.cc?ref=58ec0964b1d2f2ab197916cd661728f6a7a1736b", "patch": "@@ -629,16 +629,24 @@ access_ref::phi () const\n    ARG refers to the null pointer.  Return true on success and false\n    on failure.  */\n \n-bool\n+void\n access_ref::merge_ref (vec<access_ref> *all_refs, tree arg, gimple *stmt,\n \t\t       int ostype, bool skip_null,\n \t\t       ssa_name_limit_t &snlim, pointer_query &qry)\n {\n   access_ref aref;\n   if (!compute_objsize_r (arg, stmt, false, ostype, &aref, snlim, &qry)\n       || aref.sizrng[0] < 0)\n-    /* This may be a PHI with all null pointer arguments.  */\n-    return false;\n+    {\n+      /* This may be a PHI with all null pointer arguments.  Handle it\n+\t conservatively by setting all properties to the most permissive\n+\t values. */\n+      base0 = false;\n+      offrng[0] = offrng[1] = 0;\n+      add_max_offset ();\n+      set_max_size_range ();\n+      return;\n+    }\n \n   if (all_refs)\n     {\n@@ -675,13 +683,13 @@ access_ref::merge_ref (vec<access_ref> *all_refs, tree arg, gimple *stmt,\n       if (arg_known_size)\n \tsizrng[0] = aref.sizrng[0];\n \n-      return true;\n+      return;\n     }\n \n   /* Disregard null pointers in PHIs with two or more arguments.\n      TODO: Handle this better!  */\n   if (nullp)\n-    return true;\n+    return;\n \n   const bool known_size = (sizrng[0] != 0 || sizrng[1] != maxobjsize);\n \n@@ -717,7 +725,7 @@ access_ref::merge_ref (vec<access_ref> *all_refs, tree arg, gimple *stmt,\n   sizrng[0] = minsize;\n   parmarray = merged_parmarray;\n \n-  return true;\n+  return;\n }\n \n /* Determine and return the largest object to which *THIS refers.  If\n@@ -755,14 +763,12 @@ access_ref::get_ref (vec<access_ref> *all_refs,\n \n \t  access_ref aref;\n \t  tree arg1 = gimple_assign_rhs1 (def_stmt);\n-\t  if (!aref.merge_ref (all_refs, arg1, def_stmt, ostype, false,\n-\t\t\t       *psnlim, *qry))\n-\t    return NULL_TREE;\n+\t  aref.merge_ref (all_refs, arg1, def_stmt, ostype, false,\n+\t\t\t  *psnlim, *qry);\n \n \t  tree arg2 = gimple_assign_rhs2 (def_stmt);\n-\t  if (!aref.merge_ref (all_refs, arg2, def_stmt, ostype, false,\n-\t\t\t       *psnlim, *qry))\n-\t    return NULL_TREE;\n+\t  aref.merge_ref (all_refs, arg2, def_stmt, ostype, false,\n+\t\t\t  *psnlim, *qry);\n \n \t  if (pref && pref != this)\n \t    {\n@@ -801,15 +807,23 @@ access_ref::get_ref (vec<access_ref> *all_refs,\n       phi_ref = *pref;\n     }\n \n+  const offset_int maxobjsize = wi::to_offset (max_object_size ());\n   const unsigned nargs = gimple_phi_num_args (phi_stmt);\n   for (unsigned i = 0; i < nargs; ++i)\n     {\n       access_ref phi_arg_ref;\n       bool skip_null = i || i + 1 < nargs;\n       tree arg = gimple_phi_arg_def (phi_stmt, i);\n-      if (!phi_ref.merge_ref (all_refs, arg, phi_stmt, ostype, skip_null,\n-\t\t\t      *psnlim, *qry))\n-\treturn NULL_TREE;\n+      phi_ref.merge_ref (all_refs, arg, phi_stmt, ostype, skip_null,\n+\t\t\t *psnlim, *qry);\n+\n+      if (!phi_ref.base0\n+\t  && phi_ref.sizrng[0] == 0\n+\t  && phi_ref.sizrng[1] >= maxobjsize)\n+\t/* When an argument results in the most permissive result,\n+\t   the remaining arguments cannot constrain it.  Short-circuit\n+\t   the evaluation.  */\n+\tbreak;\n     }\n \n   if (phi_ref.sizrng[0] < 0)"}, {"sha": "dbdcd593b793d56da30f354b13c566b919ee609e", "filename": "gcc/pointer-query.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58ec0964b1d2f2ab197916cd661728f6a7a1736b/gcc%2Fpointer-query.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58ec0964b1d2f2ab197916cd661728f6a7a1736b/gcc%2Fpointer-query.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpointer-query.h?ref=58ec0964b1d2f2ab197916cd661728f6a7a1736b", "patch": "@@ -67,7 +67,7 @@ struct access_ref\n   gphi *phi () const;\n \n   /* Merge the result for a pointer with *THIS.  */\n-  bool merge_ref (vec<access_ref> *all_refs, tree, gimple *, int, bool,\n+  void merge_ref (vec<access_ref> *all_refs, tree, gimple *, int, bool,\n \t\t  ssa_name_limit_t &, pointer_query &);\n \n   /* Return the object to which REF refers.  */"}, {"sha": "2dae5e1c760a80579145fe581baaf33011a0d736", "filename": "gcc/timevar.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58ec0964b1d2f2ab197916cd661728f6a7a1736b/gcc%2Ftimevar.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58ec0964b1d2f2ab197916cd661728f6a7a1736b/gcc%2Ftimevar.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftimevar.def?ref=58ec0964b1d2f2ab197916cd661728f6a7a1736b", "patch": "@@ -307,6 +307,7 @@ DEFTIMEVAR (TV_TREE_UBSAN            , \"tree ubsan\")\n DEFTIMEVAR (TV_INITIALIZE_RTL        , \"initialize rtl\")\n DEFTIMEVAR (TV_GIMPLE_LADDRESS       , \"address lowering\")\n DEFTIMEVAR (TV_TREE_LOOP_IFCVT       , \"tree loop if-conversion\")\n+DEFTIMEVAR (TV_WARN_ACCESS           , \"access analysis\")\n \n /* Everything else in rest_of_compilation not included above.  */\n DEFTIMEVAR (TV_EARLY_LOCAL\t     , \"early local passes\")"}]}