{"sha": "f21f475feca30d0c9fb74dfe3bb65a6d88d5311c", "node_id": "C_kwDOANBUbNoAKGYyMWY0NzVmZWNhMzBkMGM5ZmI3NGRmZTNiYjY1YTZkODhkNTMxMWM", "commit": {"author": {"name": "Faisal Abbas", "email": "90.abbasfaisal@gmail.com", "date": "2022-07-28T17:54:48Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-08-25T11:40:25Z"}, "message": "rust-constexpr.cc: add more cases to eval_constant_expression()\n\nFollowing cases have been added in this changeset:\n - LOOP_EXPR\n - WHILE_STMT\n - FOR_STMT\n\nThese need following supporting functions which are also ported:\n - eval_loop_expr\n - returns\n - breaks\n - continues\n - switches", "tree": {"sha": "17483b904b93b37334630e2768735405f16db365", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/17483b904b93b37334630e2768735405f16db365"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f21f475feca30d0c9fb74dfe3bb65a6d88d5311c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f21f475feca30d0c9fb74dfe3bb65a6d88d5311c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f21f475feca30d0c9fb74dfe3bb65a6d88d5311c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f21f475feca30d0c9fb74dfe3bb65a6d88d5311c/comments", "author": {"login": "abbasfaisal", "id": 9428333, "node_id": "MDQ6VXNlcjk0MjgzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/9428333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abbasfaisal", "html_url": "https://github.com/abbasfaisal", "followers_url": "https://api.github.com/users/abbasfaisal/followers", "following_url": "https://api.github.com/users/abbasfaisal/following{/other_user}", "gists_url": "https://api.github.com/users/abbasfaisal/gists{/gist_id}", "starred_url": "https://api.github.com/users/abbasfaisal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abbasfaisal/subscriptions", "organizations_url": "https://api.github.com/users/abbasfaisal/orgs", "repos_url": "https://api.github.com/users/abbasfaisal/repos", "events_url": "https://api.github.com/users/abbasfaisal/events{/privacy}", "received_events_url": "https://api.github.com/users/abbasfaisal/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a360c28cb6c2536a4ab3dfdaebb63ae05354a054", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a360c28cb6c2536a4ab3dfdaebb63ae05354a054", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a360c28cb6c2536a4ab3dfdaebb63ae05354a054"}], "stats": {"total": 178, "additions": 178, "deletions": 0}, "files": [{"sha": "cac28d6870f093acd8a07dfe474f0e50682c3406", "filename": "gcc/rust/backend/rust-constexpr.cc", "status": "modified", "additions": 154, "deletions": 0, "changes": 154, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f21f475feca30d0c9fb74dfe3bb65a6d88d5311c/gcc%2Frust%2Fbackend%2Frust-constexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f21f475feca30d0c9fb74dfe3bb65a6d88d5311c/gcc%2Frust%2Fbackend%2Frust-constexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-constexpr.cc?ref=f21f475feca30d0c9fb74dfe3bb65a6d88d5311c", "patch": "@@ -493,6 +493,10 @@ static tree\n eval_bit_field_ref (const constexpr_ctx *ctx, tree t, bool lval,\n \t\t    bool *non_constant_p, bool *overflow_p);\n \n+static tree\n+eval_loop_expr (const constexpr_ctx *ctx, tree t, bool *non_constant_p,\n+\t\tbool *overflow_p, tree *jump_target);\n+\n /* Variables and functions to manage constexpr call expansion context.\n    These do not need to be marked for PCH or GC.  */\n \n@@ -731,6 +735,12 @@ eval_constant_expression (const constexpr_ctx *ctx, tree t, bool lval,\n \t}\n       break;\n \n+    case LOOP_EXPR:\n+    case WHILE_STMT:\n+    case FOR_STMT:\n+      eval_loop_expr (ctx, t, non_constant_p, overflow_p, jump_target);\n+      break;\n+\n     case BIT_FIELD_REF:\n       r = eval_bit_field_ref (ctx, t, lval, non_constant_p, overflow_p);\n       break;\n@@ -774,6 +784,7 @@ eval_constant_expression (const constexpr_ctx *ctx, tree t, bool lval,\n       r = eval_conditional_expression (ctx, t, lval, non_constant_p, overflow_p,\n \t\t\t\t       jump_target);\n       break;\n+\n     default:\n       break;\n     }\n@@ -2760,6 +2771,149 @@ eval_bit_field_ref (const constexpr_ctx *ctx, tree t, bool lval,\n   return error_mark_node;\n }\n \n+/* Predicates for the meaning of *jump_target.  */\n+\n+static bool\n+returns (tree *jump_target)\n+{\n+  return *jump_target\n+\t && (TREE_CODE (*jump_target) == RETURN_EXPR\n+\t     || (TREE_CODE (*jump_target) == LABEL_DECL\n+\t\t && LABEL_DECL_CDTOR (*jump_target)));\n+}\n+\n+static bool\n+breaks (tree *jump_target)\n+{\n+  return *jump_target\n+\t && ((TREE_CODE (*jump_target) == LABEL_DECL\n+\t      && LABEL_DECL_BREAK (*jump_target))\n+\t     || TREE_CODE (*jump_target) == BREAK_STMT\n+\t     || TREE_CODE (*jump_target) == EXIT_EXPR);\n+}\n+\n+static bool\n+continues (tree *jump_target)\n+{\n+  return *jump_target\n+\t && ((TREE_CODE (*jump_target) == LABEL_DECL\n+\t      && LABEL_DECL_CONTINUE (*jump_target))\n+\t     || TREE_CODE (*jump_target) == CONTINUE_STMT);\n+}\n+\n+static bool\n+switches (tree *jump_target)\n+{\n+  return *jump_target && TREE_CODE (*jump_target) == INTEGER_CST;\n+}\n+\n+/* Evaluate a LOOP_EXPR for side-effects.  Handles break and return\n+   semantics; continue semantics are covered by cxx_eval_statement_list.  */\n+\n+static tree\n+eval_loop_expr (const constexpr_ctx *ctx, tree t, bool *non_constant_p,\n+\t\tbool *overflow_p, tree *jump_target)\n+{\n+  constexpr_ctx new_ctx = *ctx;\n+  tree local_target;\n+  if (!jump_target)\n+    {\n+      local_target = NULL_TREE;\n+      jump_target = &local_target;\n+    }\n+\n+  tree body, cond = NULL_TREE, expr = NULL_TREE;\n+  int count = 0;\n+  switch (TREE_CODE (t))\n+    {\n+    case LOOP_EXPR:\n+      body = LOOP_EXPR_BODY (t);\n+      break;\n+    case WHILE_STMT:\n+      body = WHILE_BODY (t);\n+      cond = WHILE_COND (t);\n+      count = -1;\n+      break;\n+    case FOR_STMT:\n+      if (FOR_INIT_STMT (t))\n+\teval_constant_expression (ctx, FOR_INIT_STMT (t), /*lval*/ false,\n+\t\t\t\t  non_constant_p, overflow_p, jump_target);\n+      if (*non_constant_p)\n+\treturn NULL_TREE;\n+      body = FOR_BODY (t);\n+      cond = FOR_COND (t);\n+      expr = FOR_EXPR (t);\n+      count = -1;\n+      break;\n+    default:\n+      gcc_unreachable ();\n+    }\n+  auto_vec<tree, 10> save_exprs;\n+  new_ctx.save_exprs = &save_exprs;\n+  do\n+    {\n+      if (count != -1)\n+\t{\n+\t  if (body)\n+\t    eval_constant_expression (&new_ctx, body, /*lval*/ false,\n+\t\t\t\t      non_constant_p, overflow_p, jump_target);\n+\t  if (breaks (jump_target))\n+\t    {\n+\t      *jump_target = NULL_TREE;\n+\t      break;\n+\t    }\n+\n+\t  if (TREE_CODE (t) != LOOP_EXPR && continues (jump_target))\n+\t    *jump_target = NULL_TREE;\n+\n+\t  if (expr)\n+\t    eval_constant_expression (&new_ctx, expr, /*lval*/ false,\n+\t\t\t\t      non_constant_p, overflow_p, jump_target);\n+\t}\n+\n+      if (cond)\n+\t{\n+\t  tree res = eval_constant_expression (&new_ctx, cond, /*lval*/ false,\n+\t\t\t\t\t       non_constant_p, overflow_p,\n+\t\t\t\t\t       jump_target);\n+\t  if (res)\n+\t    {\n+\t      if (verify_constant (res, ctx->quiet, non_constant_p, overflow_p))\n+\t\tbreak;\n+\t      if (integer_zerop (res))\n+\t\tbreak;\n+\t    }\n+\t  else\n+\t    gcc_assert (*jump_target);\n+\t}\n+\n+      /* Forget saved values of SAVE_EXPRs and TARGET_EXPRs.  */\n+      for (tree save_expr : save_exprs)\n+\tctx->global->values.remove (save_expr);\n+      save_exprs.truncate (0);\n+\n+      if (++count >= constexpr_loop_limit)\n+\t{\n+\t  if (!ctx->quiet)\n+\t    error_at (rs_expr_loc_or_input_loc (t),\n+\t\t      \"%<constexpr%> loop iteration count exceeds limit of %d \"\n+\t\t      \"(use %<-fconstexpr-loop-limit=%> to increase the limit)\",\n+\t\t      constexpr_loop_limit);\n+\t  *non_constant_p = true;\n+\t  break;\n+\t}\n+    }\n+  while (!returns (jump_target) && !breaks (jump_target)\n+\t && !continues (jump_target) && (!switches (jump_target) || count == 0)\n+\t && !*non_constant_p);\n+\n+  /* Forget saved values of SAVE_EXPRs and TARGET_EXPRs.  */\n+  for (tree save_expr : save_exprs)\n+    ctx->global->values.remove (save_expr);\n+\n+  return NULL_TREE;\n+}\n+\n // #include \"gt-rust-rust-constexpr.h\"\n \n } // namespace Compile"}, {"sha": "f9623a2848a4a4e6b23e52d08563e7412893dd86", "filename": "gcc/rust/backend/rust-tree.h", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f21f475feca30d0c9fb74dfe3bb65a6d88d5311c/gcc%2Frust%2Fbackend%2Frust-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f21f475feca30d0c9fb74dfe3bb65a6d88d5311c/gcc%2Frust%2Fbackend%2Frust-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-tree.h?ref=f21f475feca30d0c9fb74dfe3bb65a6d88d5311c", "patch": "@@ -1240,6 +1240,10 @@ extern GTY (()) tree cp_global_trees[CPTI_MAX];\n #define DECL_FUNCTION_MEMBER_P(NODE)                                           \\\n   (DECL_NONSTATIC_MEMBER_FUNCTION_P (NODE) || DECL_STATIC_FUNCTION_P (NODE))\n \n+/* Nonzero if NODE is the target for genericization of 'return' stmts\n+   in constructors/destructors of targetm.cxx.cdtor_returns_this targets.  */\n+#define LABEL_DECL_CDTOR(NODE) DECL_LANG_FLAG_2 (LABEL_DECL_CHECK (NODE))\n+\n #if defined ENABLE_TREE_CHECKING\n \n #define LANG_DECL_MIN_CHECK(NODE)                                              \\\n@@ -1334,6 +1338,26 @@ extern GTY (()) tree cp_global_trees[CPTI_MAX];\n #define DECL_INITIALIZED_BY_CONSTANT_EXPRESSION_P(NODE)                        \\\n   (TREE_LANG_FLAG_2 (VAR_DECL_CHECK (NODE)))\n \n+/* WHILE_STMT accessors. These give access to the condition of the\n+   while statement and the body of the while statement, respectively.  */\n+#define WHILE_COND(NODE) TREE_OPERAND (WHILE_STMT_CHECK (NODE), 0)\n+#define WHILE_BODY(NODE) TREE_OPERAND (WHILE_STMT_CHECK (NODE), 1)\n+\n+/* FOR_STMT accessors. These give access to the init statement,\n+   condition, update expression, and body of the for statement,\n+   respectively.  */\n+#define FOR_INIT_STMT(NODE) TREE_OPERAND (FOR_STMT_CHECK (NODE), 0)\n+#define FOR_COND(NODE) TREE_OPERAND (FOR_STMT_CHECK (NODE), 1)\n+#define FOR_EXPR(NODE) TREE_OPERAND (FOR_STMT_CHECK (NODE), 2)\n+#define FOR_BODY(NODE) TREE_OPERAND (FOR_STMT_CHECK (NODE), 3)\n+#define FOR_SCOPE(NODE) TREE_OPERAND (FOR_STMT_CHECK (NODE), 4)\n+\n+/* Nonzero if NODE is the target for genericization of 'break' stmts.  */\n+#define LABEL_DECL_BREAK(NODE) DECL_LANG_FLAG_0 (LABEL_DECL_CHECK (NODE))\n+\n+/* Nonzero if NODE is the target for genericization of 'continue' stmts.  */\n+#define LABEL_DECL_CONTINUE(NODE) DECL_LANG_FLAG_1 (LABEL_DECL_CHECK (NODE))\n+\n // Above macros are copied from gcc/c-family/c-common.h\n \n // Below macros are copied from gcc/cp/name-lookup.cc"}]}