{"sha": "3cb999d87f40529c3532a28346b3b4d0e4d0c733", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2NiOTk5ZDg3ZjQwNTI5YzM1MzJhMjgzNDZiM2I0ZDBlNGQwYzczMw==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "1999-07-27T20:10:38Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "1999-07-27T20:10:38Z"}, "message": "aix43.h (ASM_CPU_SPEC, [...]): Add rs64a and PPC630.\n\n\t* aix43.h (ASM_CPU_SPEC, CPP_CPU_SPEC): Add rs64a and PPC630.\n\t* rs6000.c (processor_target_table): Add powerpc64, rs64a, and PPC630.\n\t(rs6000_cpu): Choose between 32-bit and 64-bit default processors.\n\t(secndary_reload_class): Make TARGET_ELF conditional compile.\n\t(print_operand_address): Similar.\n\t(output_toc): Print all values as hex.\n\t(get_issue_rate): Rearrange and add RS64A and PPC630.\n\t* rs6000.h (processor_type): Add RS64A and PPC630.\n\t(PROCESSOR_POWERPC): Change to PROCESSOR_750.\n\t(PROCESSOR_POWERPC64): New.\n\t(PROMOTE_MODE): Use word_mode.\n\t(RTX_COSTS): Add RS64A and PPC630.\n\t* rs6000.md (scheduling information): Add lmul and ldiv\n\trepresenting 64-bit integer multiply and divide.  Add rs64a and\n\tPPC630 information.\n\t(ashldi3): Add support for \"rldic\" instruction.\n\t* sysv4.h (PROCESSOR_DEFAULT): Change to PROCESSOR_750.\n\nFrom-SVN: r28300", "tree": {"sha": "9a97d515d25f818d85520a43d7a773999e475524", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9a97d515d25f818d85520a43d7a773999e475524"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3cb999d87f40529c3532a28346b3b4d0e4d0c733", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cb999d87f40529c3532a28346b3b4d0e4d0c733", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3cb999d87f40529c3532a28346b3b4d0e4d0c733", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cb999d87f40529c3532a28346b3b4d0e4d0c733/comments", "author": null, "committer": null, "parents": [{"sha": "d3ec6b06ee02cb1084919ef4be2d794c435e270b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3ec6b06ee02cb1084919ef4be2d794c435e270b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3ec6b06ee02cb1084919ef4be2d794c435e270b"}], "stats": {"total": 363, "additions": 277, "deletions": 86}, "files": [{"sha": "f3c4a5a6cee4b0ec831ba3a29465f17c1de86501", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cb999d87f40529c3532a28346b3b4d0e4d0c733/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cb999d87f40529c3532a28346b3b4d0e4d0c733/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3cb999d87f40529c3532a28346b3b4d0e4d0c733", "patch": "@@ -1,3 +1,22 @@\n+Tue Jul 27 16:05:52 1999  David Edelsohn  <edelsohn@gnu.org>\n+\n+\t* aix43.h (ASM_CPU_SPEC, CPP_CPU_SPEC): Add rs64a and PPC630.\n+\t* rs6000.c (processor_target_table): Add powerpc64, rs64a, and PPC630.\n+\t(rs6000_cpu): Choose between 32-bit and 64-bit default processors.\n+\t(secndary_reload_class): Make TARGET_ELF conditional compile.\n+\t(print_operand_address): Similar.\n+\t(output_toc): Print all values as hex.\n+\t(get_issue_rate): Rearrange and add RS64A and PPC630.\n+\t* rs6000.h (processor_type): Add RS64A and PPC630.\n+\t(PROCESSOR_POWERPC64): New.\n+\t(PROMOTE_MODE): Use word_mode.\n+\t(RTX_COSTS): Add RS64A and PPC630.\n+\t* rs6000.md (scheduling information): Add lmul and ldiv\n+\trepresenting 64-bit integer multiply and divide.  Add rs64a and\n+\tPPC630 information.\n+\t(ashldi3): Add support for \"rldic\" instruction.\n+\t* sysv4.h (PROCESSOR_DEFAULT): Change to PROCESSOR_750.\n+\t\n Tue Jul 27 15:31:53 1999  Vladimir Makarov  <vmakarov@toad.to.cygnus.com>\n \n \t* config/sparc/sparc.c (sparc_override_options): Enable SPARCLITE"}, {"sha": "88c1a7656c33441d7236a798579cbebd75fd3311", "filename": "gcc/config/rs6000/aix43.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cb999d87f40529c3532a28346b3b4d0e4d0c733/gcc%2Fconfig%2Frs6000%2Faix43.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cb999d87f40529c3532a28346b3b4d0e4d0c733/gcc%2Fconfig%2Frs6000%2Faix43.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix43.h?ref=3cb999d87f40529c3532a28346b3b4d0e4d0c733", "patch": "@@ -81,6 +81,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n %{mcpu=rios2: -mpwr2} \\\n %{mcpu=rsc: -mpwr} \\\n %{mcpu=rsc1: -mpwr} \\\n+%{mcpu=rs64a: -mppc} \\\n %{mcpu=403: -mppc} \\\n %{mcpu=505: -mppc} \\\n %{mcpu=601: -m601} \\\n@@ -90,6 +91,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n %{mcpu=604: -m604} \\\n %{mcpu=604e: -m604} \\\n %{mcpu=620: -mppc} \\\n+%{mcpu=630: -mppc} \\\n %{mcpu=821: -mppc} \\\n %{mcpu=860: -mppc}\"\n \n@@ -125,6 +127,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n %{mcpu=rios2: -D_ARCH_PWR2} \\\n %{mcpu=rsc: -D_ARCH_PWR} \\\n %{mcpu=rsc1: -D_ARCH_PWR} \\\n+%{mcpu=rs64a: -D_ARCH_PPC} \\\n %{mcpu=403: -D_ARCH_PPC} \\\n %{mcpu=505: -D_ARCH_PPC} \\\n %{mcpu=601: -D_ARCH_PPC -D_ARCH_PWR} \\\n@@ -133,6 +136,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n %{mcpu=603e: -D_ARCH_PPC} \\\n %{mcpu=604: -D_ARCH_PPC} \\\n %{mcpu=620: -D_ARCH_PPC} \\\n+%{mcpu=630: -D_ARCH_PPC} \\\n %{mcpu=821: -D_ARCH_PPC} \\\n %{mcpu=860: -D_ARCH_PPC}\"\n "}, {"sha": "6987b2be6a31f47557dff77e19201cb6f218872f", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 58, "deletions": 37, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cb999d87f40529c3532a28346b3b4d0e4d0c733/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cb999d87f40529c3532a28346b3b4d0e4d0c733/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=3cb999d87f40529c3532a28346b3b4d0e4d0c733", "patch": "@@ -186,6 +186,9 @@ rs6000_override_options (default_cpu)\n \t {\"powerpc\", PROCESSOR_POWERPC,\n \t    MASK_POWERPC | MASK_NEW_MNEMONICS,\n \t    POWER_MASKS | POWERPC_OPT_MASKS | MASK_POWERPC64},\n+\t {\"powerpc64\", PROCESSOR_POWERPC64,\n+\t    MASK_POWERPC | MASK_POWERPC64 | MASK_NEW_MNEMONICS,\n+\t    POWER_MASKS | POWERPC_OPT_MASKS},\n \t {\"rios\", PROCESSOR_RIOS1,\n \t    MASK_POWER | MASK_MULTIPLE | MASK_STRING,\n \t    MASK_POWER2 | POWERPC_MASKS | MASK_NEW_MNEMONICS},\n@@ -201,6 +204,9 @@ rs6000_override_options (default_cpu)\n \t {\"rios2\", PROCESSOR_RIOS2,\n \t    MASK_POWER | MASK_MULTIPLE | MASK_STRING | MASK_POWER2,\n \t    POWERPC_MASKS | MASK_NEW_MNEMONICS},\n+\t {\"rs64a\", PROCESSOR_RS64A,\n+\t    MASK_POWERPC | MASK_NEW_MNEMONICS,\n+\t    POWER_MASKS | POWERPC_OPT_MASKS},\n \t {\"401\", PROCESSOR_PPC403,\n \t    MASK_POWERPC | MASK_SOFT_FLOAT | MASK_NEW_MNEMONICS,\n \t    POWER_MASKS | POWERPC_OPT_MASKS | MASK_POWERPC64},\n@@ -234,6 +240,9 @@ rs6000_override_options (default_cpu)\n \t {\"620\", PROCESSOR_PPC620,\n \t    MASK_POWERPC | MASK_PPC_GFXOPT | MASK_NEW_MNEMONICS,\n \t    POWER_MASKS | MASK_PPC_GPOPT},\n+\t {\"630\", PROCESSOR_PPC630,\n+\t    MASK_POWERPC | MASK_PPC_GFXOPT | MASK_NEW_MNEMONICS,\n+\t    POWER_MASKS | MASK_PPC_GPOPT},\n \t {\"740\", PROCESSOR_PPC750,\n  \t    MASK_POWERPC | MASK_PPC_GFXOPT | MASK_NEW_MNEMONICS,\n  \t    POWER_MASKS | MASK_PPC_GPOPT | MASK_POWERPC64},\n@@ -262,7 +271,7 @@ rs6000_override_options (default_cpu)\n \n   /* Identify the processor type */\n   rs6000_select[0].string = default_cpu;\n-  rs6000_cpu = PROCESSOR_DEFAULT;\n+  rs6000_cpu = TARGET_POWERPC64 ? PROCESSOR_DEFAULT64 : PROCESSOR_DEFAULT;\n \n   for (i = 0; i < sizeof (rs6000_select) / sizeof (rs6000_select[0]); i++)\n     {\n@@ -1072,7 +1081,7 @@ reg_or_mem_operand (op, mode)\n }\n \n /* Return 1 if the operand is a general register or memory operand without\n-   pre-inc or pre_dec which produces invalid form of PowerPC lwa\n+   pre_inc or pre_dec which produces invalid form of PowerPC lwa\n    instruction.  */\n \n int\n@@ -2355,15 +2364,16 @@ secondary_reload_class (class, mode, in)\n {\n   int regno;\n \n+#if TARGET_ELF\n   /* We can not copy a symbolic operand directly into anything other than\n      BASE_REGS for TARGET_ELF.  So indicate that a register from BASE_REGS\n      is needed as an intermediate register.  */\n-  if (TARGET_ELF\n-      && class != BASE_REGS\n+  if (class != BASE_REGS\n       && (GET_CODE (in) == SYMBOL_REF\n \t  || GET_CODE (in) == LABEL_REF\n \t  || GET_CODE (in) == CONST))\n     return BASE_REGS;\n+#endif\n \n   if (GET_CODE (in) == REG)\n     {\n@@ -2469,10 +2479,11 @@ rs6000_got_register (value)\n   /* The second flow pass currently (June 1999) can't update regs_ever_live\n      without disturbing other parts of the compiler, so update it here to\n      make the prolog/epilogue code happy. */\n-  if (no_new_pseudos && !regs_ever_live[PIC_OFFSET_TABLE_REGNUM])\n+  if (no_new_pseudos && ! regs_ever_live[PIC_OFFSET_TABLE_REGNUM])\n     regs_ever_live[PIC_OFFSET_TABLE_REGNUM] = 1;\n \n   current_function_uses_pic_offset_table = 1;\n+\n   return pic_offset_table_rtx;\n }\n \n@@ -3211,12 +3222,14 @@ print_operand_address (file, x)\n     }\n   else if (GET_CODE (x) == PLUS && GET_CODE (XEXP (x, 1)) == CONST_INT)\n     fprintf (file, \"%d(%s)\", INTVAL (XEXP (x, 1)), reg_names[ REGNO (XEXP (x, 0)) ]);\n-  else if (TARGET_ELF && !TARGET_64BIT && GET_CODE (x) == LO_SUM\n-\t   && GET_CODE (XEXP (x, 0)) == REG && CONSTANT_P (XEXP (x, 1)))\n+#if TARGET_ELF\n+  else if (GET_CODE (x) == LO_SUM && GET_CODE (XEXP (x, 0)) == REG\n+           && CONSTANT_P (XEXP (x, 1)))\n     {\n       output_addr_const (file, XEXP (x, 1));\n       fprintf (file, \"@l(%s)\", reg_names[ REGNO (XEXP (x, 0)) ]);\n     }\n+#endif\n   else\n     abort ();\n }\n@@ -4882,10 +4895,10 @@ output_toc (file, x, labelno)\n       else\n \t{\n \t  if (TARGET_MINIMAL_TOC)\n-\t    fprintf (file, \"\\t.long %ld\\n\\t.long %ld\\n\",\n+\t    fprintf (file, \"\\t.long 0x%lx\\n\\t.long 0x%lx\\n\",\n \t\t     (long)high, (long)low);\n \t  else\n-\t    fprintf (file, \"\\t.tc ID_%lx_%lx[TC],%ld,%ld\\n\",\n+\t    fprintf (file, \"\\t.tc ID_%lx_%lx[TC],0x%lx,0x%lx\\n\",\n \t\t     (long)high, (long)low, (long)high, (long)low);\n \t  return;\n \t}\n@@ -5259,7 +5272,8 @@ rs6000_adjust_priority (insn, priority)\n \n       case TYPE_IMUL:\n       case TYPE_IDIV:\n-\tfprintf (stderr, \"priority was %#x (%d) before adjustment\\n\", priority, priority);\n+\tfprintf (stderr, \"priority was %#x (%d) before adjustment\\n\",\n+\t\t priority, priority);\n \tif (priority >= 0 && priority < 0x01000000)\n \t  priority >>= 3;\n \tbreak;\n@@ -5274,21 +5288,18 @@ rs6000_adjust_priority (insn, priority)\n int get_issue_rate()\n {\n   switch (rs6000_cpu_attr) {\n-  case CPU_RIOS1:\n-    return 3;       /* ? */\n-  case CPU_RIOS2:\n-    return 4;\n-  case CPU_PPC601:\n-    return 3;       /* ? */\n+  case CPU_RIOS1:  /* ? */\n+  case CPU_RS64A:\n+  case CPU_PPC601: /* ? */\n+    return 3;\n   case CPU_PPC603:\n-    return 2; \n   case CPU_PPC750:\n     return 2; \n+  case CPU_RIOS2:\n   case CPU_PPC604:\n-    return 4;\n   case CPU_PPC604E:\n-    return 4;\n   case CPU_PPC620:\n+  case CPU_PPC630:\n     return 4;\n   default:\n     return 1;\n@@ -5518,9 +5529,9 @@ rs6000_valid_type_attribute_p (type, attributes, identifier, args)\n       if (is_attribute_p (\"dllexport\", identifier))\n \treturn (args == NULL_TREE);\n \n-      /* Exception attribute allows the user to specify 1-2 strings or identifiers\n-\t that will fill in the 3rd and 4th fields of the structured exception\n-\t table.  */\n+      /* Exception attribute allows the user to specify 1-2 strings\n+\t or identifiers that will fill in the 3rd and 4th fields\n+\t of the structured exception table.  */\n       if (is_attribute_p (\"exception\", identifier))\n \t{\n \t  int i;\n@@ -5565,6 +5576,7 @@ void\n rs6000_set_default_type_attributes (type)\n      tree type ATTRIBUTE_UNUSED;\n {\n+  return;\n }\n \n /* Return a dll import reference corresponding to a call's SYMBOL_REF */\n@@ -5590,13 +5602,15 @@ rs6000_dll_import_ref (call_ref)\n   strcat (p, call_name);\n   node = get_identifier (p);\n \n-  reg1 = force_reg (Pmode, gen_rtx_SYMBOL_REF (VOIDmode, IDENTIFIER_POINTER (node)));\n+  reg1 = force_reg (Pmode, gen_rtx_SYMBOL_REF (VOIDmode,\n+\t\t\t\t\t       IDENTIFIER_POINTER (node)));\n   emit_move_insn (reg2, gen_rtx_MEM (Pmode, reg1));\n \n   return reg2;\n }\n \n-/* Return a reference suitable for calling a function with the longcall attribute.  */\n+/* Return a reference suitable for calling a function with the\n+   longcall attribute.  */\n struct rtx_def *\n rs6000_longcall_ref (call_ref)\n      rtx call_ref;\n@@ -5666,25 +5680,27 @@ rs6000_select_section (decl, reloc)\n   else if (TREE_CODE (decl) == VAR_DECL)\n     {\n       if ((flag_pic && reloc)\n-\t  || !TREE_READONLY (decl)\n+\t  || ! TREE_READONLY (decl)\n \t  || TREE_SIDE_EFFECTS (decl)\n-\t  || !DECL_INITIAL (decl)\n+\t  || ! DECL_INITIAL (decl)\n \t  || (DECL_INITIAL (decl) != error_mark_node\n-\t      && !TREE_CONSTANT (DECL_INITIAL (decl))))\n+\t      && ! TREE_CONSTANT (DECL_INITIAL (decl))))\n \t{\n-\t  if (rs6000_sdata != SDATA_NONE && (size > 0) && (size <= g_switch_value))\n+\t  if (rs6000_sdata != SDATA_NONE && (size > 0)\n+\t      && (size <= g_switch_value))\n \t    sdata_section ();\n \t  else\n \t    data_section ();\n \t}\n       else\n \t{\n-\t  if (rs6000_sdata != SDATA_NONE && (size > 0) && (size <= g_switch_value))\n+\t  if (rs6000_sdata != SDATA_NONE && (size > 0)\n+\t      && (size <= g_switch_value))\n \t    {\n \t      if (rs6000_sdata == SDATA_EABI)\n \t\tsdata2_section ();\n \t      else\n-\t\tsdata_section ();\t/* System V doesn't have .sdata2/.sbss2 */\n+\t\tsdata_section ();  /* System V doesn't have .sdata2/.sbss2 */\n \t    }\n \t  else\n \t    const_section ();\n@@ -5695,7 +5711,6 @@ rs6000_select_section (decl, reloc)\n }\n \n \f\n-\n /* If we are referencing a function that is static or is known to be\n    in this file, make the SYMBOL_REF special.  We can use this to indicate\n    that we can branch to this function without emitting a no-op after the\n@@ -5746,12 +5761,18 @@ rs6000_encode_section_info (decl)\n \n       if ((size > 0 && size <= g_switch_value)\n \t  || (name\n-\t      && ((len == sizeof (\".sdata\")-1 && strcmp (name, \".sdata\") == 0)\n-\t\t  || (len == sizeof (\".sdata2\")-1 && strcmp (name, \".sdata2\") == 0)\n-\t\t  || (len == sizeof (\".sbss\")-1 && strcmp (name, \".sbss\") == 0)\n-\t\t  || (len == sizeof (\".sbss2\")-1 && strcmp (name, \".sbss2\") == 0)\n-\t\t  || (len == sizeof (\".PPC.EMB.sdata0\")-1 && strcmp (name, \".PPC.EMB.sdata0\") == 0)\n-\t\t  || (len == sizeof (\".PPC.EMB.sbss0\")-1 && strcmp (name, \".PPC.EMB.sbss0\") == 0))))\n+\t      && ((len == sizeof (\".sdata\")-1\n+\t\t   && strcmp (name, \".sdata\") == 0)\n+\t\t  || (len == sizeof (\".sdata2\")-1\n+\t\t      && strcmp (name, \".sdata2\") == 0)\n+\t\t  || (len == sizeof (\".sbss\")-1\n+\t\t      && strcmp (name, \".sbss\") == 0)\n+\t\t  || (len == sizeof (\".sbss2\")-1\n+\t\t      && strcmp (name, \".sbss2\") == 0)\n+\t\t  || (len == sizeof (\".PPC.EMB.sdata0\")-1\n+\t\t      && strcmp (name, \".PPC.EMB.sdata0\") == 0)\n+\t\t  || (len == sizeof (\".PPC.EMB.sbss0\")-1\n+\t\t      && strcmp (name, \".PPC.EMB.sbss0\") == 0))))\n \t{\n \t  rtx sym_ref = XEXP (DECL_RTL (decl), 0);\n \t  char *str = permalloc (2 + strlen (XSTR (sym_ref, 0)));"}, {"sha": "9da3c598819ba769aa304c33db471ce72dc91d97", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 32, "deletions": 8, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cb999d87f40529c3532a28346b3b4d0e4d0c733/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cb999d87f40529c3532a28346b3b4d0e4d0c733/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=3cb999d87f40529c3532a28346b3b4d0e4d0c733", "patch": "@@ -400,13 +400,15 @@ enum processor_type\n  {\n    PROCESSOR_RIOS1,\n    PROCESSOR_RIOS2,\n+   PROCESSOR_RS64A,\n    PROCESSOR_MPCCORE,\n    PROCESSOR_PPC403,\n    PROCESSOR_PPC601,\n    PROCESSOR_PPC603,\n    PROCESSOR_PPC604,\n    PROCESSOR_PPC604e,\n    PROCESSOR_PPC620,\n+   PROCESSOR_PPC630,\n    PROCESSOR_PPC750\n };\n \n@@ -416,12 +418,14 @@ extern enum processor_type rs6000_cpu;\n #define rs6000_cpu_attr ((enum attr_cpu)rs6000_cpu)\n \n /* Define generic processor types based upon current deployment.  */\n-#define PROCESSOR_COMMON  PROCESSOR_PPC601\n-#define PROCESSOR_POWER   PROCESSOR_RIOS1\n-#define PROCESSOR_POWERPC PROCESSOR_PPC604\n+#define PROCESSOR_COMMON    PROCESSOR_PPC601\n+#define PROCESSOR_POWER     PROCESSOR_RIOS1\n+#define PROCESSOR_POWERPC   PROCESSOR_PPC604\n+#define PROCESSOR_POWERPC64 PROCESSOR_RS64A\n \n /* Define the default processor.  This is overridden by other tm.h files.  */\n-#define PROCESSOR_DEFAULT PROCESSOR_RIOS1\n+#define PROCESSOR_DEFAULT   PROCESSOR_RIOS1\n+#define PROCESSOR_DEFAULT64 PROCESSOR_RS64A\n \n /* Specify the dialect of assembler to use.  New mnemonics is dialect one\n    and the old mnemonics are dialect zero.  */\n@@ -511,7 +515,7 @@ extern int rs6000_debug_arg;\t\t/* debug argument handling */\n #define PROMOTE_MODE(MODE,UNSIGNEDP,TYPE)\t\\\n   if (GET_MODE_CLASS (MODE) == MODE_INT\t\t\\\n       && GET_MODE_SIZE (MODE) < UNITS_PER_WORD) \\\n-    (MODE) = (! TARGET_POWERPC64 ? SImode : DImode);\n+    (MODE) = word_mode;\n \n /* Define this if function arguments should also be promoted using the above\n    procedure.  */\n@@ -1926,7 +1930,7 @@ typedef struct rs6000_args\n \n #define LEGITIMATE_LO_SUM_ADDRESS_P(MODE, X)\t\t\\\n   (TARGET_ELF\t\t\t\t\t\t\\\n-   && !flag_pic && !TARGET_TOC\t\t\t\t\\\n+   && ! flag_pic && ! TARGET_TOC\t\t\t\\\n    && (MODE) != DImode\t\t\t\t\t\\\n    && (MODE) != TImode\t\t\t\t\t\\\n    && (TARGET_HARD_FLOAT || (MODE) != DFmode)\t\t\\\n@@ -2307,6 +2311,12 @@ do {                                                                    \\\n \t\t? COSTS_N_INSNS (5)\t\t\t\t\t\\\n \t\t: INTVAL (XEXP (X, 1)) >= -256 && INTVAL (XEXP (X, 1)) <= 255 \\\n \t\t? COSTS_N_INSNS (3) : COSTS_N_INSNS (4));\t\t\\\n+      case PROCESSOR_RS64A:\t\t\t\t\t\t\\\n+        return (GET_CODE (XEXP (X, 1)) != CONST_INT\t\t\t\\\n+\t\t? GET_MODE (XEXP (X, 1)) != DImode\t\t\t\\\n+\t\t? COSTS_N_INSNS (20) : COSTS_N_INSNS (34)\t\t\\\n+\t\t: INTVAL (XEXP (X, 1)) >= -256 && INTVAL (XEXP (X, 1)) <= 255 \\\n+\t\t? COSTS_N_INSNS (12) : COSTS_N_INSNS (14));\t\t\\\n       case PROCESSOR_RIOS2:\t\t\t\t\t\t\\\n       case PROCESSOR_MPCCORE:\t\t\t\t\t\t\\\n       case PROCESSOR_PPC604e:\t\t\t\t\t\t\\\n@@ -2321,8 +2331,14 @@ do {                                                                    \\\n \t\t? COSTS_N_INSNS (2) : COSTS_N_INSNS (3));\t\t\\\n       case PROCESSOR_PPC403:\t\t\t\t\t\t\\\n       case PROCESSOR_PPC604:\t\t\t\t\t\t\\\n-      case PROCESSOR_PPC620:\t\t\t\t\t\t\\\n         return COSTS_N_INSNS (4);\t\t\t\t\t\\\n+      case PROCESSOR_PPC620:\t\t\t\t\t\t\\\n+      case PROCESSOR_PPC630:\t\t\t\t\t\t\\\n+        return (GET_CODE (XEXP (X, 1)) != CONST_INT\t\t\t\\\n+\t\t? GET_MODE (XEXP (X, 1)) != DImode\t\t\t\\\n+\t\t? COSTS_N_INSNS (4) : COSTS_N_INSNS (7)\t\t\t\\\n+\t\t: INTVAL (XEXP (X, 1)) >= -256 && INTVAL (XEXP (X, 1)) <= 255 \\\n+\t\t? COSTS_N_INSNS (3) : COSTS_N_INSNS (4));\t\t\\\n       }\t\t\t\t\t\t\t\t\t\\\n   case DIV:\t\t\t\t\t\t\t\t\\\n   case MOD:\t\t\t\t\t\t\t\t\\\n@@ -2338,6 +2354,10 @@ do {                                                                    \\\n \treturn COSTS_N_INSNS (19);\t\t\t\t\t\\\n       case PROCESSOR_RIOS2:\t\t\t\t\t\t\\\n \treturn COSTS_N_INSNS (13);\t\t\t\t\t\\\n+      case PROCESSOR_RS64A:\t\t\t\t\t\t\\\n+        return (GET_MODE (XEXP (X, 1)) != DImode\t\t\t\\\n+\t\t? COSTS_N_INSNS (65)\t\t\t\t\t\\\n+\t\t: COSTS_N_INSNS (67));\t\t\t\t\t\\\n       case PROCESSOR_MPCCORE:\t\t\t\t\t\t\\\n \treturn COSTS_N_INSNS (6);\t\t\t\t\t\\\n       case PROCESSOR_PPC403:\t\t\t\t\t\t\\\n@@ -2348,8 +2368,12 @@ do {                                                                    \\\n \treturn COSTS_N_INSNS (37);\t\t\t\t\t\\\n       case PROCESSOR_PPC604:\t\t\t\t\t\t\\\n       case PROCESSOR_PPC604e:\t\t\t\t\t\t\\\n-      case PROCESSOR_PPC620:\t\t\t\t\t\t\\\n \treturn COSTS_N_INSNS (20);\t\t\t\t\t\\\n+      case PROCESSOR_PPC620:\t\t\t\t\t\t\\\n+      case PROCESSOR_PPC630:\t\t\t\t\t\t\\\n+        return (GET_MODE (XEXP (X, 1)) != DImode\t\t\t\\\n+\t\t? COSTS_N_INSNS (21)\t\t\t\t\t\\\n+\t\t: COSTS_N_INSNS (37));\t\t\t\t\t\\\n       case PROCESSOR_PPC750:\t\t\t\t\t\t\\\n         return COSTS_N_INSNS (19);\t\t\t\t\t\\\n       }\t\t\t\t\t\t\t\t\t\\"}, {"sha": "baf0243f425e63898b83824832888eeb158b73ac", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 163, "deletions": 40, "changes": 203, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cb999d87f40529c3532a28346b3b4d0e4d0c733/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cb999d87f40529c3532a28346b3b4d0e4d0c733/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=3cb999d87f40529c3532a28346b3b4d0e4d0c733", "patch": "@@ -23,7 +23,7 @@\n \f\n ;; Define an insn type attribute.  This is used in function unit delay\n ;; computations.\n-(define_attr \"type\" \"integer,load,store,fpload,fpstore,imul,idiv,branch,compare,delayed_compare,fpcompare,mtjmpr,fp,dmul,sdiv,ddiv,ssqrt,dsqrt,jmpreg\"\n+(define_attr \"type\" \"integer,load,store,fpload,fpstore,imul,lmul,idiv,ldiv,branch,compare,delayed_compare,fpcompare,mtjmpr,fp,dmul,sdiv,ddiv,ssqrt,dsqrt,jmpreg\"\n   (const_string \"integer\"))\n \n ;; Length (in bytes).\n@@ -40,7 +40,7 @@\n ;; Processor type -- this attribute must exactly match the processor_type\n ;; enumeration in rs6000.h.\n \n-(define_attr \"cpu\" \"rios1,rios2,mpccore,ppc403,ppc601,ppc603,ppc604,ppc604e,ppc620,ppc750\"\n+(define_attr \"cpu\" \"rios1,rios2,rs64a,mpccore,ppc403,ppc601,ppc603,ppc604,ppc604e,ppc620,ppc630,ppc750\"\n   (const (symbol_ref \"rs6000_cpu_attr\")))\n \n ; (define_function_unit NAME MULTIPLICITY SIMULTANEITY\n@@ -50,12 +50,12 @@\n ; (POWER and 601 use Integer Unit)\n (define_function_unit \"lsu\" 1 0\n   (and (eq_attr \"type\" \"load\")\n-       (eq_attr \"cpu\" \"mpccore,ppc603,ppc604,ppc604e,ppc620,ppc750\"))\n+       (eq_attr \"cpu\" \"rs64a,mpccore,ppc603,ppc604,ppc604e,ppc620,ppc630,ppc750\"))\n   2 1)\n \n (define_function_unit \"lsu\" 1 0\n   (and (eq_attr \"type\" \"store,fpstore\")\n-       (eq_attr \"cpu\" \"mpccore,ppc603,ppc604,ppc604e,ppc620,ppc750\"))\n+       (eq_attr \"cpu\" \"rs64a,mpccore,ppc603,ppc604,ppc604e,ppc620,ppc630,ppc750\"))\n   1 1)\n \n (define_function_unit \"lsu\" 1 0\n@@ -65,7 +65,7 @@\n \n (define_function_unit \"lsu\" 1 0\n   (and (eq_attr \"type\" \"fpload\")\n-       (eq_attr \"cpu\" \"ppc604,ppc604e,ppc620\"))\n+       (eq_attr \"cpu\" \"rs64a,ppc604,ppc604e,ppc620,ppc630\"))\n   3 1)\n \n (define_function_unit \"iu\" 1 0\n@@ -103,10 +103,10 @@\n        (eq_attr \"cpu\" \"rios2\"))\n   1 1)\n \n-; Integer Unit (RIOS1, PPC601, PPC603)\n+; Integer Unit (RIOS1, PPC601, PPC603, RS64a)\n (define_function_unit \"iu\" 1 0\n   (and (eq_attr \"type\" \"integer\")\n-       (eq_attr \"cpu\" \"rios1,mpccore,ppc403,ppc601,ppc603\"))\n+       (eq_attr \"cpu\" \"rios1,rs64a,mpccore,ppc403,ppc601,ppc603\"))\n   1 1)\n \n (define_function_unit \"iu\" 1 0\n@@ -119,11 +119,31 @@\n        (eq_attr \"cpu\" \"rios1,ppc601,ppc603\"))\n   5 5)\n \n+(define_function_unit \"iu\" 1 0\n+  (and (eq_attr \"type\" \"imul\")\n+       (eq_attr \"cpu\" \"rs64a\"))\n+  20 14)\n+\n+(define_function_unit \"iu\" 1 0\n+  (and (eq_attr \"type\" \"lmul\")\n+       (eq_attr \"cpu\" \"rs64a\"))\n+  34 34)\n+\n (define_function_unit \"iu\" 1 0\n   (and (eq_attr \"type\" \"idiv\")\n        (eq_attr \"cpu\" \"rios1\"))\n   19 19)\n \n+(define_function_unit \"iu\" 1 0\n+  (and (eq_attr \"type\" \"idiv\")\n+       (eq_attr \"cpu\" \"rs64a\"))\n+  66 66)\n+\n+(define_function_unit \"iu\" 1 0\n+  (and (eq_attr \"type\" \"ldiv\")\n+       (eq_attr \"cpu\" \"rs64a\"))\n+  66 66)\n+\n (define_function_unit \"iu\" 1 0\n   (and (eq_attr \"type\" \"idiv\")\n        (eq_attr \"cpu\" \"ppc403\"))\n@@ -186,24 +206,49 @@\n ; from/to spr).\n (define_function_unit \"iu2\" 2 0\n   (and (eq_attr \"type\" \"integer\")\n-       (eq_attr \"cpu\" \"ppc604,ppc604e,ppc620\"))\n+       (eq_attr \"cpu\" \"ppc604,ppc604e,ppc620,ppc630\"))\n   1 1)\n \n (define_function_unit \"imuldiv\" 1 0\n   (and (eq_attr \"type\" \"imul\")\n-       (eq_attr \"cpu\" \"ppc604,ppc620\"))\n+       (eq_attr \"cpu\" \"ppc604\"))\n   4 2)\n \n+(define_function_unit \"imuldiv\" 1 0\n+  (and (eq_attr \"type\" \"imul\")\n+       (eq_attr \"cpu\" \"ppc620,ppc630\"))\n+  5 3)\n+\n+(define_function_unit \"imuldiv\" 1 0\n+  (and (eq_attr \"type\" \"lmul\")\n+       (eq_attr \"cpu\" \"ppc620,ppc630\"))\n+  5 3)\n+\n (define_function_unit \"imuldiv\" 1 0\n   (and (eq_attr \"type\" \"imul\")\n        (eq_attr \"cpu\" \"ppc604e\"))\n   2 1)\n \n (define_function_unit \"imuldiv\" 1 0\n   (and (eq_attr \"type\" \"idiv\")\n-       (eq_attr \"cpu\" \"ppc604,ppc604e,ppc620\"))\n+       (eq_attr \"cpu\" \"ppc604,ppc604e\"))\n   20 19)\n \n+(define_function_unit \"imuldiv\" 1 0\n+  (and (eq_attr \"type\" \"idiv\")\n+       (eq_attr \"cpu\" \"ppc620\"))\n+  37 36)\n+\n+(define_function_unit \"imuldiv\" 1 0\n+  (and (eq_attr \"type\" \"idiv\")\n+       (eq_attr \"cpu\" \"ppc630\"))\n+  21 20)\n+\n+(define_function_unit \"imuldiv\" 1 0\n+  (and (eq_attr \"type\" \"ldiv\")\n+       (eq_attr \"cpu\" \"ppc620,ppc630\"))\n+  37 36)\n+\n ; PPC750 has two integer units: a primary one which can perform all\n ; operations and a secondary one which is fed in lock step with the first\n ; and can perform \"simple\" integer operations.  \n@@ -243,7 +288,7 @@\n \n (define_function_unit \"iu\" 1 0\n   (and (eq_attr \"type\" \"compare,delayed_compare\")\n-       (eq_attr \"cpu\" \"mpccore,ppc403,ppc601,ppc603,ppc604,ppc604e,ppc620,ppc750\"))\n+       (eq_attr \"cpu\" \"rs64a,mpccore,ppc403,ppc601,ppc603,ppc604,ppc604e,ppc620,ppc630,ppc750\"))\n   3 1)\n \n (define_function_unit \"iu2\" 2 0   \n@@ -253,7 +298,7 @@\n \n (define_function_unit \"iu2\" 2 0\n   (and (eq_attr \"type\" \"compare,delayed_compare\")\n-       (eq_attr \"cpu\" \"ppc604,ppc604e,ppc620,ppc750\"))\n+       (eq_attr \"cpu\" \"ppc604,ppc604e,ppc620,ppc630,ppc750\"))\n   1 1)\n \n ; fp compare uses fp unit\n@@ -265,7 +310,7 @@\n ; rios1 and rios2 have different fpcompare delays\n (define_function_unit \"fpu2\" 2 0\n   (and (eq_attr \"type\" \"fpcompare\")\n-       (eq_attr \"cpu\" \"rios2\"))\n+       (eq_attr \"cpu\" \"rios2,ppc630\"))\n   5 1)\n \n ; on ppc601 and ppc603, fpcompare takes also 2 cycles from\n@@ -280,7 +325,7 @@\n ; fp compare uses fp unit\n (define_function_unit \"fpu\" 1 0\n   (and (eq_attr \"type\" \"fpcompare\")\n-       (eq_attr \"cpu\" \"ppc601,ppc603,ppc604,ppc604e,ppc620,ppc750\"))\n+       (eq_attr \"cpu\" \"rs64a,ppc601,ppc603,ppc604,ppc604e,ppc620,ppc750\"))\n   5 1)\n \n (define_function_unit \"fpu\" 1 0\n@@ -290,12 +335,12 @@\n \n (define_function_unit \"bpu\" 1 0\n   (and (eq_attr \"type\" \"mtjmpr\")\n-       (eq_attr \"cpu\" \"rios1,rios2\"))\n+       (eq_attr \"cpu\" \"rios1,rios2,rs64a\"))\n   5 1)\n \n (define_function_unit \"bpu\" 1 0\n   (and (eq_attr \"type\" \"mtjmpr\")\n-       (eq_attr \"cpu\" \"mpccore,ppc403,ppc601,ppc603,ppc604,ppc604e,ppc620,ppc750\"))\n+       (eq_attr \"cpu\" \"rs64a,mpccore,ppc403,ppc601,ppc603,ppc604,ppc604e,ppc620,ppc750\"))\n   4 1)\n \n ; all jumps/branches are executing on the bpu, in 1 cycle, for all machines.\n@@ -315,8 +360,8 @@\n \n (define_function_unit \"fpu\" 1 0\n   (and (eq_attr \"type\" \"fp\")\n-       (eq_attr \"cpu\" \"mpccore\"))\n-  4 4)\n+       (eq_attr \"cpu\" \"rs64a,mpccore\"))\n+  4 2)\n \n (define_function_unit \"fpu\" 1 0\n   (and (eq_attr \"type\" \"fp\")\n@@ -325,9 +370,14 @@\n \n (define_function_unit \"fpu\" 1 0\n   (and (eq_attr \"type\" \"fp\")\n-       (eq_attr \"cpu\" \"ppc603,ppc604,ppc604e,ppc620,ppc750\"))\n+       (eq_attr \"cpu\" \"ppc603,ppc750,ppc604,ppc604e,ppc620\"))\n   3 1)\n \n+(define_function_unit \"fpu\" 1 0\n+  (and (eq_attr \"type\" \"dmul\")\n+       (eq_attr \"cpu\" \"rs64a\"))\n+  7 2)\n+\n (define_function_unit \"fpu\" 1 0\n   (and (eq_attr \"type\" \"dmul\")\n        (eq_attr \"cpu\" \"mpccore\"))\n@@ -354,6 +404,11 @@\n        (eq_attr \"cpu\" \"rios1\"))\n   19 19)\n \n+(define_function_unit \"fpu\" 1 0\n+  (and (eq_attr \"type\" \"sdiv\")\n+       (eq_attr \"cpu\" \"rs64a\"))\n+  31 31)\n+\n (define_function_unit \"fpu\" 1 0\n   (and (eq_attr \"type\" \"sdiv\")\n        (eq_attr \"cpu\" \"ppc601\"))\n@@ -376,7 +431,7 @@\n \n (define_function_unit \"fpu\" 1 0\n   (and (eq_attr \"type\" \"ddiv\")\n-       (eq_attr \"cpu\" \"ppc601,ppc604,ppc604e,ppc620,ppc750\"))\n+       (eq_attr \"cpu\" \"rs64a,ppc601,ppc750,ppc604,ppc604e,ppc620\"))\n   31 31)\n \n (define_function_unit \"fpu\" 1 0\n@@ -400,21 +455,51 @@\n        (eq_attr \"cpu\" \"rios2\"))\n   2 1)\n \n+(define_function_unit \"fpu2\" 2 0\n+  (and (eq_attr \"type\" \"fp\")\n+       (eq_attr \"cpu\" \"ppc630\"))\n+  3 1)\n+\n (define_function_unit \"fpu2\" 2 0\n   (and (eq_attr \"type\" \"dmul\")\n        (eq_attr \"cpu\" \"rios2\"))\n   2 1)\n \n+(define_function_unit \"fpu2\" 2 0\n+  (and (eq_attr \"type\" \"dmul\")\n+       (eq_attr \"cpu\" \"ppc630\"))\n+  3 1)\n+\n (define_function_unit \"fpu2\" 2 0\n   (and (eq_attr \"type\" \"sdiv,ddiv\")\n        (eq_attr \"cpu\" \"rios2\"))\n   17 17)\n \n+(define_function_unit \"fpu2\" 2 0\n+  (and (eq_attr \"type\" \"sdiv\")\n+       (eq_attr \"cpu\" \"ppc630\"))\n+  17 17)\n+\n+(define_function_unit \"fpu2\" 2 0\n+  (and (eq_attr \"type\" \"ddiv\")\n+       (eq_attr \"cpu\" \"ppc630\"))\n+  21 21)\n+\n (define_function_unit \"fpu2\" 2 0\n   (and (eq_attr \"type\" \"ssqrt,dsqrt\")\n        (eq_attr \"cpu\" \"rios2\"))\n   26 26)\n \n+(define_function_unit \"fpu2\" 2 0\n+  (and (eq_attr \"type\" \"ssqrt\")\n+       (eq_attr \"cpu\" \"ppc630\"))\n+  18 18)\n+\n+(define_function_unit \"fpu2\" 2 0\n+  (and (eq_attr \"type\" \"dsqrt\")\n+       (eq_attr \"cpu\" \"ppc630\"))\n+  26 26)\n+\n \f\n ;; Start with fixed-point load and store insns.  Here we put only the more\n ;; complex forms.  Basic data transfer is done later.\n@@ -5037,7 +5122,7 @@\n \t\t (match_operand:DI 2 \"gpc_reg_operand\" \"r\")))]\n   \"TARGET_POWERPC64\"\n   \"mulld %0,%1,%2\"\n-   [(set_attr \"type\" \"imul\")])\n+   [(set_attr \"type\" \"lmul\")])\n \n (define_insn \"smuldi3_highpart\"\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n@@ -5049,7 +5134,7 @@\n \t\t      (const_int 64))))]\n   \"TARGET_POWERPC64\"\n   \"mulhd %0,%1,%2\"\n-  [(set_attr \"type\" \"imul\")])\n+  [(set_attr \"type\" \"lmul\")])\n \n (define_insn \"umuldi3_highpart\"\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n@@ -5061,7 +5146,7 @@\n \t\t      (const_int 64))))]\n   \"TARGET_POWERPC64\"\n   \"mulhdu %0,%1,%2\"\n-  [(set_attr \"type\" \"imul\")])\n+  [(set_attr \"type\" \"lmul\")])\n \n (define_expand \"divdi3\"\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n@@ -5137,15 +5222,15 @@\n                 (match_operand:DI 2 \"gpc_reg_operand\" \"r\")))]\n   \"TARGET_POWERPC64\"\n   \"divd %0,%1,%2\"\n-  [(set_attr \"type\" \"idiv\")])\n+  [(set_attr \"type\" \"ldiv\")])\n \n (define_insn \"udivdi3\"\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n         (udiv:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r\")\n                  (match_operand:DI 2 \"gpc_reg_operand\" \"r\")))]\n   \"TARGET_POWERPC64\"\n   \"divdu %0,%1,%2\"\n-  [(set_attr \"type\" \"idiv\")])\n+  [(set_attr \"type\" \"ldiv\")])\n \n (define_insn \"rotldi3\"\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n@@ -5357,6 +5442,42 @@\n   \"sld%I2. %0,%1,%H2\"\n   [(set_attr \"type\" \"delayed_compare\")])\n \n+(define_insn \"\"\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n+\t(and:DI (ashift:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r\")\n+\t\t\t   (match_operand:SI 2 \"const_int_operand\" \"i\"))\n+\t\t(match_operand:DI 3 \"mask64_operand\" \"S\")))]\n+  \"((GET_CODE (operands[3]) == CONST_INT\n+     ? INTVAL (operands[3]) : CONST_DOUBLE_LOW (operands[3])) & 1) == 1\"\n+  \"rldic %0,%1,%H2,%S3\")\n+\n+(define_insn \"\"\n+  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x\")\n+\t(compare:CC\n+\t (and:DI (ashift:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r\")\n+\t\t\t    (match_operand:SI 2 \"const_int_operand\" \"i\"))\n+\t\t (match_operand:DI 3 \"mask64_operand\" \"S\"))\n+\t (const_int 0)))\n+   (clobber (match_scratch:DI 4 \"=r\"))]\n+  \"((GET_CODE (operands[3]) == CONST_INT\n+     ? INTVAL (operands[3]) : CONST_DOUBLE_LOW (operands[3])) & 1) == 1\"\n+  \"rldic. %0,%1,%H2,%S3\"\n+  [(set_attr \"type\" \"delayed_compare\")])\n+\n+(define_insn \"\"\n+  [(set (match_operand:CC 4 \"cc_reg_operand\" \"=x\")\n+\t(compare:CC\n+\t (and:DI (ashift:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r\")\n+\t\t\t    (match_operand:SI 2 \"const_int_operand\" \"i\"))\n+\t\t (match_operand:DI 3 \"mask64_operand\" \"S\"))\n+\t (const_int 0)))\n+   (set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n+\t(and:DI (ashift:DI (match_dup 1) (match_dup 2)) (match_dup 3)))]\n+  \"((GET_CODE (operands[3]) == CONST_INT\n+     ? INTVAL (operands[3]) : CONST_DOUBLE_LOW (operands[3])) & 1) == 1\"\n+  \"rldic. %0,%1,%H2,%S3\"\n+  [(set_attr \"type\" \"delayed_compare\")])\n+\n (define_expand \"lshrdi3\"\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n \t(lshiftrt:DI (match_operand:DI 1 \"gpc_reg_operand\" \"\")\n@@ -6433,12 +6554,12 @@\n       else\n \treturn \\\"mr %0,%1\\;mr %L0,%L1\\\";\n     case 1:\n-      /* If the low-address word is used in the address, we must load it\n-\t last.  Otherwise, load it first.  Note that we cannot have\n-\t auto-increment in that case since the address register is known to be\n-\t dead.  */\n+      /* If the low-address word is used in the address, we must load\n+\t it last.  Otherwise, load it first.  Note that we cannot have\n+\t auto-increment in that case since the address register is\n+\t known to be dead.  */\n       if (refers_to_regno_p (REGNO (operands[0]), REGNO (operands[0]) + 1,\n-\t\t\t     operands [1], 0))\n+\t\t\t     operands[1], 0))\n \treturn \\\"{l|lwz} %L0,%L1\\;{l|lwz} %0,%1\\\";\n       else\n \treturn \\\"{l%U1|lwz%U1} %0,%1\\;{l|lwz} %L0,%L1\\\";\n@@ -6588,7 +6709,7 @@\n \t auto-increment in that case since the address register is known to be\n \t dead.  */\n       if (refers_to_regno_p (REGNO (operands[0]), REGNO (operands[0]) + 1,\n-\t\t\t     operands [1], 0))\n+\t\t\t     operands[1], 0))\n \treturn \\\"{l|lwz} %L0,%L1\\;{l|lwz} %0,%1\\\";\n       else\n \treturn \\\"{l%U1|lwz%U1} %0,%1\\;{l|lwz} %L0,%L1\\\";\n@@ -6962,7 +7083,7 @@\n \t auto-increment in that case since the address register is known to be\n \t dead.  */\n       if (refers_to_regno_p (REGNO (operands[0]), REGNO (operands[0]) + 1,\n-\t\t\t     operands [1], 0))\n+\t\t\t     operands[1], 0))\n \treturn \\\"ld %L0,%L1\\;ld %0,%1\\\";\n       else\n \treturn \\\"ld%U1 %0,%1\\;ld %L0,%L1\\\";\n@@ -10234,10 +10355,11 @@\n }\")\n \n (define_expand \"ctrsi\"\n-  [(parallel [(set (pc) (if_then_else (ne (match_operand:SI 0 \"register_operand\" \"\")\n-\t\t\t\t\t  (const_int 1))\n-\t\t\t\t      (label_ref (match_operand 1 \"\" \"\"))\n-\t\t\t\t      (pc)))\n+  [(parallel [(set (pc)\n+\t\t   (if_then_else (ne (match_operand:SI 0 \"register_operand\" \"\")\n+\t\t\t\t     (const_int 1))\n+\t\t\t\t (label_ref (match_operand 1 \"\" \"\"))\n+\t\t\t\t (pc)))\n \t      (set (match_dup 0)\n \t\t   (plus:SI (match_dup 0)\n \t\t\t    (const_int -1)))\n@@ -10247,10 +10369,11 @@\n   \"\")\n \n (define_expand \"ctrdi\"\n-  [(parallel [(set (pc) (if_then_else (ne (match_operand:DI 0 \"register_operand\" \"\")\n-\t\t\t\t\t  (const_int 1))\n-\t\t\t\t      (label_ref (match_operand 1 \"\" \"\"))\n-\t\t\t\t      (pc)))\n+  [(parallel [(set (pc)\n+\t\t   (if_then_else (ne (match_operand:DI 0 \"register_operand\" \"\")\n+\t\t\t\t     (const_int 1))\n+\t\t\t\t (label_ref (match_operand 1 \"\" \"\"))\n+\t\t\t\t (pc)))\n \t      (set (match_dup 0)\n \t\t   (plus:DI (match_dup 0)\n \t\t\t    (const_int -1)))"}, {"sha": "27b7168bb98f06cd8096e938e4c9c72d67ce1df5", "filename": "gcc/config/rs6000/sysv4.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cb999d87f40529c3532a28346b3b4d0e4d0c733/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cb999d87f40529c3532a28346b3b4d0e4d0c733/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsysv4.h?ref=3cb999d87f40529c3532a28346b3b4d0e4d0c733", "patch": "@@ -276,7 +276,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define TARGET_DEFAULT (MASK_POWERPC | MASK_NEW_MNEMONICS)\n \n #undef PROCESSOR_DEFAULT\n-#define PROCESSOR_DEFAULT PROCESSOR_PPC601\n+#define PROCESSOR_DEFAULT PROCESSOR_PPC750\n \n /* System V.4 uses register 13 as a pointer to the small data area,\n    so it is not available to the normal user.  */"}]}