{"sha": "d4c52634cef1d2e86c3b460a1128e3301ecf769d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDRjNTI2MzRjZWYxZDJlODZjM2I0NjBhMTEyOGUzMzAxZWNmNzY5ZA==", "commit": {"author": {"name": "Marc Glisse", "email": "marc.glisse@inria.fr", "date": "2013-05-14T12:06:27Z"}, "committer": {"name": "Marc Glisse", "email": "glisse@gcc.gnu.org", "date": "2013-05-14T12:06:27Z"}, "message": "re PR bootstrap/57266 (comparison between signed and unsigned integer expressions in fold_binary_loc breaks m68k bootstrap)\n\n2013-05-14  Marc Glisse  <marc.glisse@inria.fr>\n\n\tPR bootstrap/57266\n\t* fold-const.c (fold_binary_loc) <shift>: Use an unsigned\n\tvariable for the shift amount. Check that we shift by non-negative\n\tamounts.\n\nFrom-SVN: r198880", "tree": {"sha": "7b1f5f3eee75e4a26ff6eeaf75ffdb4e0d3c548d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b1f5f3eee75e4a26ff6eeaf75ffdb4e0d3c548d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d4c52634cef1d2e86c3b460a1128e3301ecf769d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4c52634cef1d2e86c3b460a1128e3301ecf769d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4c52634cef1d2e86c3b460a1128e3301ecf769d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4c52634cef1d2e86c3b460a1128e3301ecf769d/comments", "author": {"login": "mglisse", "id": 10097863, "node_id": "MDQ6VXNlcjEwMDk3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/10097863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mglisse", "html_url": "https://github.com/mglisse", "followers_url": "https://api.github.com/users/mglisse/followers", "following_url": "https://api.github.com/users/mglisse/following{/other_user}", "gists_url": "https://api.github.com/users/mglisse/gists{/gist_id}", "starred_url": "https://api.github.com/users/mglisse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mglisse/subscriptions", "organizations_url": "https://api.github.com/users/mglisse/orgs", "repos_url": "https://api.github.com/users/mglisse/repos", "events_url": "https://api.github.com/users/mglisse/events{/privacy}", "received_events_url": "https://api.github.com/users/mglisse/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2b2612629120fe1a8aaf46d126e5f2631ddc9cf8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b2612629120fe1a8aaf46d126e5f2631ddc9cf8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b2612629120fe1a8aaf46d126e5f2631ddc9cf8"}], "stats": {"total": 15, "additions": 11, "deletions": 4}, "files": [{"sha": "76ab15d6eb2917d475e5f253bc27b83ce24f873b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4c52634cef1d2e86c3b460a1128e3301ecf769d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4c52634cef1d2e86c3b460a1128e3301ecf769d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d4c52634cef1d2e86c3b460a1128e3301ecf769d", "patch": "@@ -1,3 +1,10 @@\n+2013-05-14  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\tPR bootstrap/57266\n+\t* fold-const.c (fold_binary_loc) <shift>: Use an unsigned\n+\tvariable for the shift amount. Check that we shift by non-negative\n+\tamounts.\n+\n 2013-05-14  Chung-Lin Tang  <cltang@codesourcery.com>\n \n \tPR target/42017"}, {"sha": "5d6bbbb10d8653017313aa7ddf8d64d5e8d2bd63", "filename": "gcc/fold-const.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4c52634cef1d2e86c3b460a1128e3301ecf769d/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4c52634cef1d2e86c3b460a1128e3301ecf769d/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=d4c52634cef1d2e86c3b460a1128e3301ecf769d", "patch": "@@ -12423,13 +12423,13 @@ fold_binary_loc (location_t loc,\n       prec = element_precision (type);\n \n       /* Turn (a OP c1) OP c2 into a OP (c1+c2).  */\n-      if (TREE_CODE (op0) == code && host_integerp (arg1, false)\n+      if (TREE_CODE (op0) == code && host_integerp (arg1, true)\n \t  && TREE_INT_CST_LOW (arg1) < prec\n-\t  && host_integerp (TREE_OPERAND (arg0, 1), false)\n+\t  && host_integerp (TREE_OPERAND (arg0, 1), true)\n \t  && TREE_INT_CST_LOW (TREE_OPERAND (arg0, 1)) < prec)\n \t{\n-\t  HOST_WIDE_INT low = (TREE_INT_CST_LOW (TREE_OPERAND (arg0, 1))\n-\t\t\t       + TREE_INT_CST_LOW (arg1));\n+\t  unsigned int low = (TREE_INT_CST_LOW (TREE_OPERAND (arg0, 1))\n+\t\t\t      + TREE_INT_CST_LOW (arg1));\n \n \t  /* Deal with a OP (c1 + c2) being undefined but (a OP c1) OP c2\n \t     being well defined.  */"}]}