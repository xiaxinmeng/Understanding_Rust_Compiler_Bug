{"sha": "78019d1649eb6c3677680240b147bc89e97e61a1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzgwMTlkMTY0OWViNmMzNjc3NjgwMjQwYjE0N2JjODllOTdlNjFhMQ==", "commit": {"author": {"name": "Steven G. Kargl", "email": "kargls@comcast.net", "date": "2005-11-27T15:47:56Z"}, "committer": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2005-11-27T15:47:56Z"}, "message": "re PR fortran/24917 (Handling of hexadecimal constants in gfortran)\n\nPR fortran/24917\n* primary.c (match_boz_constant):  Implement postfix BOZ constants;\n  (match_string_constant): Peek for b, o, z, and x\n\n* gfortran.dg/boz_6.f90: New test.\n\nFrom-SVN: r107568", "tree": {"sha": "c2c25b5f35afae402a680afcef40c895a744ad77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c2c25b5f35afae402a680afcef40c895a744ad77"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/78019d1649eb6c3677680240b147bc89e97e61a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78019d1649eb6c3677680240b147bc89e97e61a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78019d1649eb6c3677680240b147bc89e97e61a1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78019d1649eb6c3677680240b147bc89e97e61a1/comments", "author": null, "committer": null, "parents": [{"sha": "991bb832494d3e422ef703e317cd0dc21ab74ac3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/991bb832494d3e422ef703e317cd0dc21ab74ac3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/991bb832494d3e422ef703e317cd0dc21ab74ac3"}], "stats": {"total": 112, "additions": 78, "deletions": 34}, "files": [{"sha": "81f4e8a2967df7b10733c74b243548a8c9285283", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78019d1649eb6c3677680240b147bc89e97e61a1/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78019d1649eb6c3677680240b147bc89e97e61a1/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=78019d1649eb6c3677680240b147bc89e97e61a1", "patch": "@@ -1,3 +1,9 @@\n+2005-11-27  Steven G. Kargl  <kargls@comcast.net>\n+\n+\tPR fortran/24917\n+\t* primary.c (match_boz_constant):  Implement postfix BOZ constants;\n+\t(match_string_constant): Peek for b, o, z, and x\n+\n 2005-11-27  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n \n \tPR fortran/23912"}, {"sha": "d2b7068956f1a20a715d8138b4adb992dfb22930", "filename": "gcc/fortran/primary.c", "status": "modified", "additions": 52, "deletions": 34, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78019d1649eb6c3677680240b147bc89e97e61a1/gcc%2Ffortran%2Fprimary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78019d1649eb6c3677680240b147bc89e97e61a1/gcc%2Ffortran%2Fprimary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fprimary.c?ref=78019d1649eb6c3677680240b147bc89e97e61a1", "patch": "@@ -298,41 +298,56 @@ match_hollerith_constant (gfc_expr ** result)\n \n \n /* Match a binary, octal or hexadecimal constant that can be found in\n-   a DATA statement.  */\n+   a DATA statement.  The standard permits b'010...', o'73...', and\n+   z'a1...' where b, o, and z can be capital letters.  This function\n+   also accepts postfixed forms of the constants: '01...'b, '73...'o,\n+   and 'a1...'z.  An additional extension is the use of x for z.  */\n \n static match\n match_boz_constant (gfc_expr ** result)\n {\n-  int radix, delim, length, x_hex, kind;\n-  locus old_loc;\n+  int post, radix, delim, length, x_hex, kind;\n+  locus old_loc, start_loc;\n   char *buffer;\n   gfc_expr *e;\n \n-  old_loc = gfc_current_locus;\n+  start_loc = old_loc = gfc_current_locus;\n   gfc_gobble_whitespace ();\n \n   x_hex = 0;\n-  switch (gfc_next_char ())\n+  switch (post = gfc_next_char ())\n     {\n     case 'b':\n       radix = 2;\n+      post = 0;\n       break;\n     case 'o':\n       radix = 8;\n+      post = 0;\n       break;\n     case 'x':\n       x_hex = 1;\n       /* Fall through.  */\n     case 'z':\n       radix = 16;\n+      post = 0;\n+      break;\n+    case '\\'':\n+      /* Fall through.  */\n+    case '\\\"':\n+      delim = post;\n+      post = 1;\n+      radix = 16;  /* Set to accept any valid digit string.  */\n       break;\n     default:\n       goto backup;\n     }\n \n   /* No whitespace allowed here.  */\n \n-  delim = gfc_next_char ();\n+  if (post == 0)\n+    delim = gfc_next_char ();\n+\n   if (delim != '\\'' && delim != '\\\"')\n     goto backup;\n \n@@ -347,40 +362,36 @@ match_boz_constant (gfc_expr ** result)\n   length = match_digits (0, radix, NULL);\n   if (length == -1)\n     {\n-      switch (radix)\n-        {\n-\tcase 2:\n-          gfc_error (\"Empty set of digits in binary constant at %C\");\n-\t  break;\n-\tcase 8:\n-          gfc_error (\"Empty set of digits in octal constant at %C\");\n-\t  break;\n-\tcase 16:\n-          gfc_error (\"Empty set of digits in hexadecimal constant at %C\");\n-\t  break;\n-        default:\n-\t  gcc_unreachable ();\n-        }\n+      gfc_error (\"Empty set of digits in BOZ constant at %C\");\n       return MATCH_ERROR;\n     }\n \n   if (gfc_next_char () != delim)\n     {\n-      switch (radix)\n-        {\n-\tcase 2:\n-\t  gfc_error (\"Illegal character in binary constant at %C\");\n+      gfc_error (\"Illegal character in BOZ constant at %C\");\n+      return MATCH_ERROR;\n+    }\n+\n+  if (post == 1)\n+    {\n+      switch (gfc_next_char ())\n+\t{\n+\tcase 'b':\n+\t  radix = 2;\n \t  break;\n-\tcase 8:\n-\t  gfc_error (\"Illegal character in octal constant at %C\");\n+\tcase 'o':\n+\t  radix = 8;\n \t  break;\n-\tcase 16:\n-\t  gfc_error (\"Illegal character in hexadecimal constant at %C\");\n+\tcase 'x':\n+\t  /* Fall through.  */\n+\tcase 'z':\n+\t  radix = 16;\n \t  break;\n \tdefault:\n-\t  gcc_unreachable ();\n+\t  goto backup;\n \t}\n-      return MATCH_ERROR;\n+\tgfc_notify_std (GFC_STD_GNU, \"Extension: BOZ constant \"\n+\t\t\t\"at %C uses non-standard postfix syntax.\");\n     }\n \n   gfc_current_locus = old_loc;\n@@ -389,8 +400,9 @@ match_boz_constant (gfc_expr ** result)\n   memset (buffer, '\\0', length + 1);\n \n   match_digits (0, radix, buffer);\n-  gfc_next_char ();  /* Eat delimiter.  */\n-\n+  gfc_next_char ();    /* Eat delimiter.  */\n+  if (post == 1)\n+    gfc_next_char ();  /* Eat postfixed b, o, z, or x.  */\n \n   /* In section 5.2.5 and following C567 in the Fortran 2003 standard, we find\n      \"If a data-stmt-constant is a boz-literal-constant, the corresponding\n@@ -405,7 +417,6 @@ match_boz_constant (gfc_expr ** result)\n   if (gfc_range_check (e) != ARITH_OK)\n     {\n       gfc_error (\"Integer too big for integer kind %i at %C\", kind);\n-\n       gfc_free_expr (e);\n       return MATCH_ERROR;\n     }\n@@ -414,7 +425,7 @@ match_boz_constant (gfc_expr ** result)\n   return MATCH_YES;\n \n backup:\n-  gfc_current_locus = old_loc;\n+  gfc_current_locus = start_loc;\n   return MATCH_NO;\n }\n \n@@ -955,6 +966,13 @@ match_string_constant (gfc_expr ** result)\n       length++;\n     }\n \n+  /* Peek at the next character to see if it is a b, o, z, or x for the\n+     postfixed BOZ literal constants.  */\n+  c = gfc_peek_char ();\n+  if (c == 'b' || c == 'o' || c =='z' || c == 'x')\n+    goto no_match;\n+\n+\n   e = gfc_get_expr ();\n \n   e->expr_type = EXPR_CONSTANT;"}, {"sha": "cb692358746853d8c750d30cc44516dbfa7e7448", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78019d1649eb6c3677680240b147bc89e97e61a1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78019d1649eb6c3677680240b147bc89e97e61a1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=78019d1649eb6c3677680240b147bc89e97e61a1", "patch": "@@ -1,3 +1,8 @@\n+2005-11-27  Steven G. Kargl  <kargls@comcast.net>\n+\n+\tPR fortran/24917\n+\t*  gfortran.dg/boz_6.f90: New test.\n+\n 2005-11-27  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n \n \tPR fortran/23912"}, {"sha": "d7a287d58041e8a0823390a652cd27890071eb5c", "filename": "gcc/testsuite/gfortran.dg/boz_6.f90", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78019d1649eb6c3677680240b147bc89e97e61a1/gcc%2Ftestsuite%2Fgfortran.dg%2Fboz_6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78019d1649eb6c3677680240b147bc89e97e61a1/gcc%2Ftestsuite%2Fgfortran.dg%2Fboz_6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fboz_6.f90?ref=78019d1649eb6c3677680240b147bc89e97e61a1", "patch": "@@ -0,0 +1,15 @@\n+! { dg-do run }\n+! { dg-options \"-std=gnu\" }\n+! PR 24917\n+program test\n+  integer ib, io, iz, ix\n+  integer jb, jo, jz, jx\n+  data ib, jb /b'111', '111'b/\n+  data io, jo /o'234', '234'o/\n+  data iz, jz /z'abc', 'abc'z/\n+  data ix, jx /x'abc', 'abc'x/\n+  if (ib /= jb) call abort\n+  if (io /= jo) call abort\n+  if (iz /= jz) call abort\n+  if (ix /= jx) call abort\n+end program test"}]}