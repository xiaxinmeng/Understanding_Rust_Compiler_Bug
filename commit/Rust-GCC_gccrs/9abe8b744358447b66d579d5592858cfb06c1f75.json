{"sha": "9abe8b744358447b66d579d5592858cfb06c1f75", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWFiZThiNzQ0MzU4NDQ3YjY2ZDU3OWQ1NTkyODU4Y2ZiMDZjMWY3NQ==", "commit": {"author": {"name": "Mikhail Maltsev", "email": "maltsevm@gmail.com", "date": "2015-10-22T19:21:39Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2015-10-22T19:21:39Z"}, "message": "[PATCH 3/9] ENABLE_CHECKING refactoring: Java and Ada\n\n[PATCH 3/9] ENABLE_CHECKING refactoring: Java and Ada\ngcc/java/ChangeLog:\n\n2015-10-05  Mikhail Maltsev  <maltsevm@gmail.com>\n\n\t* decl.c (java_mark_decl_local): Use flag_checking instead of\n\tENABLE_CHECKING.\n\ngcc/ada/ChangeLog:\n\n2015-10-05  Mikhail Maltsev  <maltsevm@gmail.com>\n\n\t* gcc-interface/decl.c (gnat_to_gnu_entity): Use gcc_checking_assert.\n\t* gcc-interface/trans.c (assoc_to_constructor): Use flag_checking.\n\t* gcc-interface/utils.c (relate_alias_sets): Likewise.\n\t* gcc-interface/utils2.c (build_binary_op, build_unary_op): Use\n\tgcc_checking_assert\n\nFrom-SVN: r229185", "tree": {"sha": "2e0fcf004945df5a1a8ab799ddb07612058f555e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e0fcf004945df5a1a8ab799ddb07612058f555e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9abe8b744358447b66d579d5592858cfb06c1f75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9abe8b744358447b66d579d5592858cfb06c1f75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9abe8b744358447b66d579d5592858cfb06c1f75", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9abe8b744358447b66d579d5592858cfb06c1f75/comments", "author": {"login": "miyuki", "id": 4668268, "node_id": "MDQ6VXNlcjQ2NjgyNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/4668268?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miyuki", "html_url": "https://github.com/miyuki", "followers_url": "https://api.github.com/users/miyuki/followers", "following_url": "https://api.github.com/users/miyuki/following{/other_user}", "gists_url": "https://api.github.com/users/miyuki/gists{/gist_id}", "starred_url": "https://api.github.com/users/miyuki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miyuki/subscriptions", "organizations_url": "https://api.github.com/users/miyuki/orgs", "repos_url": "https://api.github.com/users/miyuki/repos", "events_url": "https://api.github.com/users/miyuki/events{/privacy}", "received_events_url": "https://api.github.com/users/miyuki/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "71e558ef30be263c83aa3cb48ba2b4fd13729ec3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71e558ef30be263c83aa3cb48ba2b4fd13729ec3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71e558ef30be263c83aa3cb48ba2b4fd13729ec3"}], "stats": {"total": 56, "additions": 30, "deletions": 26}, "files": [{"sha": "26dee605557f36f820aee72ef8cb27c209edbfd9", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9abe8b744358447b66d579d5592858cfb06c1f75/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9abe8b744358447b66d579d5592858cfb06c1f75/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=9abe8b744358447b66d579d5592858cfb06c1f75", "patch": "@@ -1,3 +1,11 @@\n+2015-10-22  Mikhail Maltsev  <maltsevm@gmail.com>\n+\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity): Use gcc_checking_assert.\n+\t* gcc-interface/trans.c (assoc_to_constructor): Use flag_checking.\n+\t* gcc-interface/utils.c (relate_alias_sets): Likewise.\n+\t* gcc-interface/utils2.c (build_binary_op, build_unary_op): Use\n+\tgcc_checking_assert\n+\n 2015-10-20  Yannick Moy  <moy@adacore.com>\n \n \t* fmap.adb, a-cihama.adb, sem_ch5.adb, make.adb, inline.adb,"}, {"sha": "3922bb80cb38c3b0413b45f27ac442bf5e973ec6", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9abe8b744358447b66d579d5592858cfb06c1f75/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9abe8b744358447b66d579d5592858cfb06c1f75/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=9abe8b744358447b66d579d5592858cfb06c1f75", "patch": "@@ -2710,10 +2710,8 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \n \t\t      TYPE_HAS_ACTUAL_BOUNDS_P (gnu_inner) = 1;\n \n-#ifdef ENABLE_CHECKING\n \t\t      /* Check for other cases of overloading.  */\n-\t\t      gcc_assert (!TYPE_ACTUAL_BOUNDS (gnu_inner));\n-#endif\n+\t\t      gcc_checking_assert (!TYPE_ACTUAL_BOUNDS (gnu_inner));\n \t\t    }\n \n \t\t  for (gnat_index = First_Index (gnat_entity);"}, {"sha": "ac190bece9807cf66c757f6df6e3ffb1093997d7", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9abe8b744358447b66d579d5592858cfb06c1f75/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9abe8b744358447b66d579d5592858cfb06c1f75/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=9abe8b744358447b66d579d5592858cfb06c1f75", "patch": "@@ -9411,11 +9411,12 @@ assoc_to_constructor (Entity_Id gnat_entity, Node_Id gnat_assoc, tree gnu_type)\n \n   gnu_result = extract_values (gnu_list, gnu_type);\n \n-#ifdef ENABLE_CHECKING\n-  /* Verify that every entry in GNU_LIST was used.  */\n-  for (; gnu_list; gnu_list = TREE_CHAIN (gnu_list))\n-    gcc_assert (TREE_ADDRESSABLE (gnu_list));\n-#endif\n+  if (flag_checking)\n+    {\n+      /* Verify that every entry in GNU_LIST was used.  */\n+      for (; gnu_list; gnu_list = TREE_CHAIN (gnu_list))\n+\tgcc_assert (TREE_ADDRESSABLE (gnu_list));\n+    }\n \n   return gnu_result;\n }"}, {"sha": "f270713748f9f47556d8d6391fc5acfc7473288b", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9abe8b744358447b66d579d5592858cfb06c1f75/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9abe8b744358447b66d579d5592858cfb06c1f75/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=9abe8b744358447b66d579d5592858cfb06c1f75", "patch": "@@ -1499,9 +1499,7 @@ relate_alias_sets (tree gnu_new_type, tree gnu_old_type, enum alias_set_op op)\n       /* The alias set shouldn't be copied between array types with different\n \t aliasing settings because this can break the aliasing relationship\n \t between the array type and its element type.  */\n-#ifndef ENABLE_CHECKING\n-      if (flag_strict_aliasing)\n-#endif\n+      if (flag_checking || flag_strict_aliasing)\n \tgcc_assert (!(TREE_CODE (gnu_new_type) == ARRAY_TYPE\n \t\t      && TREE_CODE (gnu_old_type) == ARRAY_TYPE\n \t\t      && TYPE_NONALIASED_COMPONENT (gnu_new_type)"}, {"sha": "13421b4f0513a1587e580046080110d28c2308d6", "filename": "gcc/ada/gcc-interface/utils2.c", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9abe8b744358447b66d579d5592858cfb06c1f75/gcc%2Fada%2Fgcc-interface%2Futils2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9abe8b744358447b66d579d5592858cfb06c1f75/gcc%2Fada%2Fgcc-interface%2Futils2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils2.c?ref=9abe8b744358447b66d579d5592858cfb06c1f75", "patch": "@@ -854,9 +854,8 @@ build_binary_op (enum tree_code op_code, tree result_type,\n     {\n     case INIT_EXPR:\n     case MODIFY_EXPR:\n-#ifdef ENABLE_CHECKING\n-      gcc_assert (result_type == NULL_TREE);\n-#endif\n+      gcc_checking_assert (result_type == NULL_TREE);\n+\n       /* If there were integral or pointer conversions on the LHS, remove\n \t them; we'll be putting them back below if needed.  Likewise for\n \t conversions between array and record types, except for justified\n@@ -1039,9 +1038,8 @@ build_binary_op (enum tree_code op_code, tree result_type,\n     case TRUTH_AND_EXPR:\n     case TRUTH_OR_EXPR:\n     case TRUTH_XOR_EXPR:\n-#ifdef ENABLE_CHECKING\n-      gcc_assert (TREE_CODE (get_base_type (result_type)) == BOOLEAN_TYPE);\n-#endif\n+      gcc_checking_assert (TREE_CODE (\n+\t\t\t\tget_base_type (result_type)) == BOOLEAN_TYPE);\n       operation_type = left_base_type;\n       left_operand = convert (operation_type, left_operand);\n       right_operand = convert (operation_type, right_operand);\n@@ -1053,9 +1051,8 @@ build_binary_op (enum tree_code op_code, tree result_type,\n     case LT_EXPR:\n     case EQ_EXPR:\n     case NE_EXPR:\n-#ifdef ENABLE_CHECKING\n-      gcc_assert (TREE_CODE (get_base_type (result_type)) == BOOLEAN_TYPE);\n-#endif\n+      gcc_checking_assert (TREE_CODE (\n+\t\t\t\tget_base_type (result_type)) == BOOLEAN_TYPE);\n       /* If either operand is a NULL_EXPR, just return a new one.  */\n       if (TREE_CODE (left_operand) == NULL_EXPR)\n \treturn build2 (op_code, result_type,\n@@ -1335,9 +1332,8 @@ build_unary_op (enum tree_code op_code, tree result_type, tree operand)\n       break;\n \n     case TRUTH_NOT_EXPR:\n-#ifdef ENABLE_CHECKING\n-      gcc_assert (TREE_CODE (get_base_type (result_type)) == BOOLEAN_TYPE);\n-#endif\n+      gcc_checking_assert (TREE_CODE (\n+\t\t\t\tget_base_type (result_type)) == BOOLEAN_TYPE);\n       result = invert_truthvalue_loc (EXPR_LOCATION (operand), operand);\n       /* When not optimizing, fold the result as invert_truthvalue_loc\n \t doesn't fold the result of comparisons.  This is intended to undo"}, {"sha": "3d1ad640ca4ba221337887a12eafaadcfe053322", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9abe8b744358447b66d579d5592858cfb06c1f75/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9abe8b744358447b66d579d5592858cfb06c1f75/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=9abe8b744358447b66d579d5592858cfb06c1f75", "patch": "@@ -1,3 +1,8 @@\n+2015-10-22  Mikhail Maltsev  <maltsevm@gmail.com>\n+\n+\t* decl.c (java_mark_decl_local): Use flag_checking instead of\n+\tENABLE_CHECKING.\n+\n 2015-07-15  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* expr.c: Remove multiline #include comment."}, {"sha": "2b33621d15ef11e7b5f53d2842cc3ac1882f509b", "filename": "gcc/java/decl.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9abe8b744358447b66d579d5592858cfb06c1f75/gcc%2Fjava%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9abe8b744358447b66d579d5592858cfb06c1f75/gcc%2Fjava%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fdecl.c?ref=9abe8b744358447b66d579d5592858cfb06c1f75", "patch": "@@ -1905,14 +1905,12 @@ java_mark_decl_local (tree decl)\n {\n   DECL_EXTERNAL (decl) = 0;\n \n-#ifdef ENABLE_CHECKING\n   /* Double check that we didn't pass the function to the callgraph early.  */\n-  if (TREE_CODE (decl) == FUNCTION_DECL)\n+  if (flag_checking && TREE_CODE (decl) == FUNCTION_DECL)\n     {\n       struct cgraph_node *node = cgraph_node::get (decl);\n       gcc_assert (!node || !node->definition);\n     }\n-#endif\n   gcc_assert (!DECL_RTL_SET_P (decl));\n }\n "}]}