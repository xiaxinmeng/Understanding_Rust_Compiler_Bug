{"sha": "e0b55676ccb8be00d5adf582b49d86ff2d7fc71c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTBiNTU2NzZjY2I4YmUwMGQ1YWRmNTgyYjQ5ZDg2ZmYyZDdmYzcxYw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2007-10-15T15:14:46Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2007-10-15T15:14:46Z"}, "message": "re PR tree-optimization/33619 (TER breaks some inline-asm code (again))\n\n\tPR tree-optimization/33619\n\t* tree-ssa-ter.c (is_replaceable_p): Return false for all\n\tcalls.\n\n\t* gcc.dg/pr33619.c: New test.\n\nFrom-SVN: r129350", "tree": {"sha": "dae62f8923fcc82a1202f1c8275a8bfb6bc75c5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dae62f8923fcc82a1202f1c8275a8bfb6bc75c5b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e0b55676ccb8be00d5adf582b49d86ff2d7fc71c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0b55676ccb8be00d5adf582b49d86ff2d7fc71c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0b55676ccb8be00d5adf582b49d86ff2d7fc71c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0b55676ccb8be00d5adf582b49d86ff2d7fc71c/comments", "author": null, "committer": null, "parents": [{"sha": "fc632f6e0f21d74881cbddf30553afbdaa69f608", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc632f6e0f21d74881cbddf30553afbdaa69f608", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc632f6e0f21d74881cbddf30553afbdaa69f608"}], "stats": {"total": 69, "additions": 59, "deletions": 10}, "files": [{"sha": "7fc03860542d7902b642b23b4d2c0903fa4e74d0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0b55676ccb8be00d5adf582b49d86ff2d7fc71c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0b55676ccb8be00d5adf582b49d86ff2d7fc71c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e0b55676ccb8be00d5adf582b49d86ff2d7fc71c", "patch": "@@ -1,6 +1,12 @@\n+2007-10-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/33619\n+\t* tree-ssa-ter.c (is_replaceable_p): Return false for all\n+\tcalls.\n+\n 2007-10-15  David Edelsohn  <edelsohn@gnu.org>\n \n-\t* config.gcc (powerpc-ibm-aix5*): Install altivec.h\n+\t* config.gcc (powerpc-ibm-aix5*): Install altivec.h.\n \n 2007-10-15  Richard Guenther  <rguenther@suse.de>\n \n@@ -12,7 +18,6 @@\n 2007-10-15  Maxim Kuvyrkov  <maxim@codesourcery.com>\n \n \tPR target/33133\n-\t\n \t* haifa-sched.c (process_insn_forw_deps_be_in_spec): Check if\n \tspeculation type of insn can be changed before trying to do that.\n "}, {"sha": "c541b3c88580f7e16346aa6d6e2fefb76143c705", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0b55676ccb8be00d5adf582b49d86ff2d7fc71c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0b55676ccb8be00d5adf582b49d86ff2d7fc71c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e0b55676ccb8be00d5adf582b49d86ff2d7fc71c", "patch": "@@ -1,3 +1,8 @@\n+2007-10-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/33619\n+\t* gcc.dg/pr33619.c: New test.\n+\n 2007-10-15  David Edelsohn  <edelsohn@gnu.org>\n \n \tlib/target-supports.exp (check_vmx_hw_available): Add -maltivec\n@@ -13,7 +18,6 @@\n 2007-10-15  Maxim Kuvyrkov  <maxim@codesourcery.com>\n \n \tPR target/33133\n-\n \t* gcc.c-torture/compile/pr33133.c: New test.\n \n 2007-10-14  Jerry DeLisle  <jvdelisle@gcc.gnu.org>"}, {"sha": "8011e69e6ade48bc4e6fb77abb589ea79ed6a997", "filename": "gcc/testsuite/gcc.dg/pr33619.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0b55676ccb8be00d5adf582b49d86ff2d7fc71c/gcc%2Ftestsuite%2Fgcc.dg%2Fpr33619.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0b55676ccb8be00d5adf582b49d86ff2d7fc71c/gcc%2Ftestsuite%2Fgcc.dg%2Fpr33619.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr33619.c?ref=e0b55676ccb8be00d5adf582b49d86ff2d7fc71c", "patch": "@@ -0,0 +1,45 @@\n+/* PR tree-optimization/33619 */\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+\n+#ifdef __powerpc__\n+# define REG1 __asm__ (\"3\")\n+# define REG2 __asm__ (\"4\")\n+#elif defined __x86_64__\n+# define REG1 __asm__ (\"rdi\")\n+# define REG2 __asm__ (\"rsi\")\n+#else\n+# define REG1\n+# define REG2\n+#endif\n+\n+static inline void\n+bar (unsigned long x, int y)\n+{\n+  register unsigned long p1 REG1 = x;\n+  register unsigned long p2 REG2 = y;\n+  __asm__ volatile (\"\" : \"=r\" (p1), \"=r\" (p2) : \"0\" (p1), \"1\" (p2) : \"memory\");\n+  if (p1 != 0xdeadUL || p2 != 0xbefUL)\n+    __builtin_abort ();\n+}\n+\n+__attribute__((const, noinline)) int\n+baz (int x)\n+{\n+  return x;\n+}\n+\n+__attribute__((noinline)) void\n+foo (unsigned long *x, int y)\n+{\n+  unsigned long a = *x;\n+  bar (a, baz (y));\n+}\n+\n+int\n+main (void)\n+{\n+  unsigned long a = 0xdeadUL;\n+  foo (&a, 0xbefUL);\n+  return 0;\n+}"}, {"sha": "d8553ce1c659e4ef465221a38635e7a89c86213b", "filename": "gcc/tree-ssa-ter.c", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0b55676ccb8be00d5adf582b49d86ff2d7fc71c/gcc%2Ftree-ssa-ter.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0b55676ccb8be00d5adf582b49d86ff2d7fc71c/gcc%2Ftree-ssa-ter.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ter.c?ref=e0b55676ccb8be00d5adf582b49d86ff2d7fc71c", "patch": "@@ -402,14 +402,9 @@ is_replaceable_p (tree stmt)\n       && DECL_HARD_REGISTER (GENERIC_TREE_OPERAND (stmt, 1)))\n     return false;\n \n-  /* Calls to functions with side-effects cannot be replaced.  */\n+  /* No function calls can be replaced.  */\n   if ((call_expr = get_call_expr_in (stmt)) != NULL_TREE)\n-    {\n-      int call_flags = call_expr_flags (call_expr);\n-      if (TREE_SIDE_EFFECTS (call_expr)\n-\t  && !(call_flags & (ECF_PURE | ECF_CONST | ECF_NORETURN)))\n-\treturn false;\n-    }\n+    return false;\n \n   /* Leave any stmt with volatile operands alone as well.  */\n   if (stmt_ann (stmt)->has_volatile_ops)"}]}