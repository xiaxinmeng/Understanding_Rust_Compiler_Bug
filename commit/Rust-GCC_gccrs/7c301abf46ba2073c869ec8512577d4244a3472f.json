{"sha": "7c301abf46ba2073c869ec8512577d4244a3472f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2MzMDFhYmY0NmJhMjA3M2M4NjllYzg1MTI1NzdkNDI0NGEzNDcyZg==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@merlin.codesourcery.com", "date": "2001-06-13T22:16:24Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2001-06-13T22:16:24Z"}, "message": "slice_array_assignment.cc (main): New test.\n\n        * testsuite/26_numerics/slice_array_assignment.cc (main): New test.\n\n        * include/bits/slice_array.h (slice_array<>::operator=): Make\n        public and implement.\n        (slice_array<>::slice_array): Make copy-constructor public.\n\n        * include/bits/valarray_array.h (__valarray_copy): Add another\n        overload to copy between strided arrays.\n\nFrom-SVN: r43352", "tree": {"sha": "e42d89dcf7599db25c8c34d42f86042ebcb3ad91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e42d89dcf7599db25c8c34d42f86042ebcb3ad91"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7c301abf46ba2073c869ec8512577d4244a3472f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c301abf46ba2073c869ec8512577d4244a3472f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c301abf46ba2073c869ec8512577d4244a3472f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c301abf46ba2073c869ec8512577d4244a3472f/comments", "author": null, "committer": null, "parents": [{"sha": "15a7ee9ff61afa94e00eaaff194add02b56555f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15a7ee9ff61afa94e00eaaff194add02b56555f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15a7ee9ff61afa94e00eaaff194add02b56555f2"}], "stats": {"total": 95, "additions": 90, "deletions": 5}, "files": [{"sha": "63eeb61109e4e83df94a94e3d7d823e88f332a8c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c301abf46ba2073c869ec8512577d4244a3472f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c301abf46ba2073c869ec8512577d4244a3472f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=7c301abf46ba2073c869ec8512577d4244a3472f", "patch": "@@ -1,3 +1,14 @@\n+2001-06-13  Gabriel Dos Reis  <gdr@merlin.codesourcery.com>\n+\n+\t* testsuite/26_numerics/slice_array_assignment.cc (main): New test.\n+\n+\t* include/bits/slice_array.h (slice_array<>::operator=): Make\n+\tpublic and implement.\n+\t(slice_array<>::slice_array): Make copy-constructor public.\n+\n+\t* include/bits/valarray_array.h (__valarray_copy): Add another\n+\toverload to copy between strided arrays.\n+\n 2001-06-13  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* acinclude.m4 (GLIBCPP_CONFIGURE): Bump version to 3.0.0."}, {"sha": "b2b118987fdebc1d6c2990a73f592a164b875559", "filename": "libstdc++-v3/include/bits/slice_array.h", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c301abf46ba2073c869ec8512577d4244a3472f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fslice_array.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c301abf46ba2073c869ec8512577d4244a3472f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fslice_array.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fslice_array.h?ref=7c301abf46ba2073c869ec8512577d4244a3472f", "patch": "@@ -42,7 +42,13 @@ namespace std\n     {\n     public:\n         typedef _Tp value_type;\n-        \n+\n+      // This constructor is implemented since we need to return a value.\n+      slice_array (const slice_array&);\n+\n+      // This operator must be public.  See DR-253.\n+      slice_array& operator= (const slice_array&);\n+\n         void operator=   (const valarray<_Tp>&) const;\n         void operator*=  (const valarray<_Tp>&) const;\n         void operator/=  (const valarray<_Tp>&) const;\n@@ -87,13 +93,9 @@ namespace std\n         const size_t     _M_sz;\n         const size_t     _M_stride;\n         const _Array<_Tp> _M_array;\n-        \n-        // this constructor is implemented since we need to return a value.\n-        slice_array (const slice_array&);\n \n         // not implemented\n         slice_array ();\n-        slice_array& operator= (const slice_array&);\n     };\n \n     template<typename _Tp>\n@@ -109,6 +111,15 @@ namespace std\n     //    template<typename _Tp>\n     //    inline slice_array<_Tp>::~slice_array () {}\n \n+  template<typename _Tp>\n+  inline slice_array<_Tp>&\n+  slice_array<_Tp>::operator=(const slice_array<_Tp>& __a)\n+  {\n+    __valarray_copy(_M_array, _M_sz, _M_stride, __a._M_array, __a._M_stride);\n+    return *this;\n+  }\n+\n+\n     template<typename _Tp>\n     inline void\n     slice_array<_Tp>::operator= (const _Tp& __t) "}, {"sha": "448de1b45243e028bb8d545cb60efd03354cd5a5", "filename": "libstdc++-v3/include/bits/valarray_array.h", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c301abf46ba2073c869ec8512577d4244a3472f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_array.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c301abf46ba2073c869ec8512577d4244a3472f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_array.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_array.h?ref=7c301abf46ba2073c869ec8512577d4244a3472f", "patch": "@@ -252,6 +252,18 @@ namespace std\n   __valarray_copy (const _Tp* __restrict__ __a, _Tp* __restrict__ __b,\n                    size_t __n, size_t __s)\n   { for (size_t __i=0; __i<__n; ++__i, ++__a, __b+=__s) *__b = *__a; }\n+\n+  // Copy strided array __src[<__n : __s1>] into another\n+  // strided array __dst[< : __s2>].  Their sizes must match.\n+  template<typename _Tp>\n+  inline void\n+  __valarray_copy(const _Tp* __restrict__ __src, size_t __n, size_t __s1,\n+                  _Tp* __restrict__ __dst, size_t __s2)\n+  {\n+    for (size_t __i = 0; __i < __n; ++__i)\n+      __dst[__i * __s2] = __src [ __i * __s1];\n+  }\n+\n   \n   // copy indexed __a[__i[<__n>]] in plain __b[<__n>]\n   template<typename _Tp>\n@@ -378,6 +390,13 @@ namespace std\n   inline void\n   __valarray_copy (_Array<_Tp> __a, _Array<_Tp> __b, size_t __n, size_t __s)\n   { __valarray_copy (__a._M_data, __b._M_data, __n, __s); }\n+\n+  template<typename _Tp>\n+  inline void\n+  __valarray_copy(_Array<_Tp> __a, size_t __n, size_t __s1,\n+                  _Array<_Tp> __b, size_t __s2)\n+  { __valarray_copy(__a._M_data, __n, __s1, __b._M_data, __s2); }\n+\n   \n   template<typename _Tp>\n   inline void"}, {"sha": "f2e20860b6c361e04cbbf5412479623c47fc2768", "filename": "libstdc++-v3/testsuite/26_numerics/slice_array_assignment.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c301abf46ba2073c869ec8512577d4244a3472f/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fslice_array_assignment.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c301abf46ba2073c869ec8512577d4244a3472f/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fslice_array_assignment.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fslice_array_assignment.cc?ref=7c301abf46ba2073c869ec8512577d4244a3472f", "patch": "@@ -0,0 +1,44 @@\n+// 20010613 gdr\n+\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+\n+// This is DR-253.  Test for accessible assignment-operators.\n+#include <valarray>\n+\n+int main()\n+{\n+  std::valarray<double> v(10), w(10);\n+  std::slice s(0, 0, 0);\n+\n+  v[s] = w[s];                  // dg-do compile\n+\n+  std::slice_array<double> t = v[s];\n+  \n+  return 0;\n+}"}]}