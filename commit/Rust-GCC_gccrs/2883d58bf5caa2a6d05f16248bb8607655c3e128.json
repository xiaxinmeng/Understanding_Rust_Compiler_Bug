{"sha": "2883d58bf5caa2a6d05f16248bb8607655c3e128", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjg4M2Q1OGJmNWNhYTJhNmQwNWYxNjI0OGJiODYwNzY1NWMzZTEyOA==", "commit": {"author": {"name": "Loren J. Rittle", "email": "ljrittle@acm.org", "date": "2001-11-28T05:17:59Z"}, "committer": {"name": "Loren J. Rittle", "email": "ljrittle@gcc.gnu.org", "date": "2001-11-28T05:17:59Z"}, "message": "basic_string.tcc (basic_string::_Rep::_S_create): Enforce allocation size blocking policy to reduce fragmentation and enhance...\n\n2001-11-27  Loren J. Rittle  <ljrittle@acm.org>\n            Paolo Carlini  <pcarlini@unitus.it>\n\n        * include/bits/basic_string.tcc (basic_string::_Rep::_S_create):\n        Enforce allocation size blocking policy to reduce\n        fragmentation and enhance performance with common malloc\n        implementations.\n\nCo-Authored-By: Paolo Carlini <pcarlini@unitus.it>\n\nFrom-SVN: r47398", "tree": {"sha": "6e607c30a729387545c0316b913f317c9857f048", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6e607c30a729387545c0316b913f317c9857f048"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2883d58bf5caa2a6d05f16248bb8607655c3e128", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2883d58bf5caa2a6d05f16248bb8607655c3e128", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2883d58bf5caa2a6d05f16248bb8607655c3e128", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2883d58bf5caa2a6d05f16248bb8607655c3e128/comments", "author": null, "committer": null, "parents": [{"sha": "86ade44cb2ce7df746d88f6491de469cc6a62c14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86ade44cb2ce7df746d88f6491de469cc6a62c14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86ade44cb2ce7df746d88f6491de469cc6a62c14"}], "stats": {"total": 56, "additions": 56, "deletions": 0}, "files": [{"sha": "70667905336a9036fe8f16e9a95b2239fbfba26b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2883d58bf5caa2a6d05f16248bb8607655c3e128/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2883d58bf5caa2a6d05f16248bb8607655c3e128/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=2883d58bf5caa2a6d05f16248bb8607655c3e128", "patch": "@@ -1,3 +1,11 @@\n+2001-11-27  Loren J. Rittle  <ljrittle@acm.org>\n+\t    Paolo Carlini  <pcarlini@unitus.it>\n+\n+\t* include/bits/basic_string.tcc (basic_string::_Rep::_S_create):\n+\tEnforce allocation size blocking policy to reduce\n+\tfragmentation and enhance performance with common malloc\n+\timplementations.\n+\n 2001-11-27  Benjamin Kosnik  <bkoz@redhat.com>\n \n \tNumeric facets cleanup."}, {"sha": "7a57f7df16033cd920ae1f8276a7ae51c6f92ffe", "filename": "libstdc++-v3/include/bits/basic_string.tcc", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2883d58bf5caa2a6d05f16248bb8607655c3e128/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2883d58bf5caa2a6d05f16248bb8607655c3e128/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc?ref=2883d58bf5caa2a6d05f16248bb8607655c3e128", "patch": "@@ -374,6 +374,54 @@ namespace std\n       // terminating null char_type() element, plus enough for the\n       // _Rep data structure. Whew. Seemingly so needy, yet so elemental.\n       size_t __size = (__capacity + 1) * sizeof(_CharT) + sizeof(_Rep);\n+\n+      // The standard places no restriction on allocating more memory\n+      // than is strictly needed within this layer at the moment or as\n+      // requested by an explicit application call to reserve().  Many\n+      // malloc implementations perform quite poorly when an\n+      // application attempts to allocate memory in a stepwise fashion\n+      // growing each allocation size by only 1 char.  Additionally,\n+      // it makes little sense to allocate less linear memory than the\n+      // natural blocking size of the malloc implementation.\n+      // Unfortunately, we would need a somewhat low-level calculation\n+      // with tuned parameters to get this perfect for any particular\n+      // malloc implementation.  Fortunately, generalizations about\n+      // common features seen among implementations seems to suffice.\n+      // This algorithm does not replace the need for an exponential\n+      // growth shaper to meet library specification.  Note: THIS IS\n+      // NOT THE CORRECT LOCATION FOR AN EXPONENTIAL GROWTH SHAPER\n+      // (since this code affect initial allocation as well as\n+      // reallocation).\n+\n+      // __pagesize need not match the actual VM page size for good\n+      // results in practice, thus we pick a common value on the low\n+      // side.  __malloc_header_size is an estimate of the amount of\n+      // overhead per memory allocation (in practice seen N * sizeof\n+      // (void*) where N is 0, 2 or 4).  According to folklore,\n+      // picking this value on the high side is better than\n+      // low-balling it (especially when this algorithm is used with\n+      // malloc implementations that allocate memory blocks rounded up\n+      // to a size which is a power of 2).\n+      const size_t __pagesize = 4096; // must be 2^i * __subpagesize\n+      const size_t __subpagesize = 128; // should be >> __malloc_header_size\n+      const size_t __malloc_header_size = 4 * sizeof (void*);\n+      if ((__size + __malloc_header_size) > __pagesize)\n+\t{\n+\t  size_t __extra =\n+\t    (__pagesize - ((__size + __malloc_header_size) % __pagesize))\n+\t    % __pagesize;\n+\t  __capacity += __extra / sizeof(_CharT);\n+\t  __size = (__capacity + 1) * sizeof(_CharT) + sizeof(_Rep);\n+\t}\n+      else if (__size > __subpagesize)\n+\t{\n+\t  size_t __extra =\n+\t    (__subpagesize - ((__size + __malloc_header_size) % __subpagesize))\n+\t    % __subpagesize;\n+\t  __capacity += __extra / sizeof(_CharT);\n+\t  __size = (__capacity + 1) * sizeof(_CharT) + sizeof(_Rep);\n+\t}\n+\n       // NB: Might throw, but no worries about a leak, mate: _Rep()\n       // does not throw.\n       void* __place = _Raw_bytes_alloc(__alloc).allocate(__size);"}]}