{"sha": "c18a5b6cadf88275078d4b72249c8174cf079041", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzE4YTViNmNhZGY4ODI3NTA3OGQ0YjcyMjQ5YzgxNzRjZjA3OTA0MQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2004-09-15T17:03:22Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2004-09-15T17:03:22Z"}, "message": "configure.ac: Check for COMDAT support.\n\n\t* configure.ac: Check for COMDAT support.  Robustify check for\n\tSHF_MERGE support.\n\t* configure: Regenerated.\n\t* config.in: Likewise.\n\t* langhooks-def.h (lhd_comdat_group): New function.\n\t(LANG_HOOKS_COMDAT_GROUP): New macro.\n\t(LANG_HOOKS_DECLS): Use it.\n\t* langhooks.c (lhd_comdat_group): Define.\n\t* langhooks.h (lang_hooks_for_decls): Add comdat_group.\n\t* output.h (named_section_flags): Make it a macro.\n\t(named_section_real): New function.\n\t(default_no_named_section): Add decl parameter.\n\t(default_elf_asm_named_section): Likewise.\n\t(default_coff_asm_named_section): Likewise.\n\t(default_pe_asm_named_section): Likewise.\n\t* target.h (gcc_target): Adjust type of named_section.\n\t* varasm.c (named_section_flags): Rename to named_section_real.\n\tAdd decl parameter.\n\t(default_no_named_section): Add decl parameter.\n\t(default_elf_asm_named_section): Use COMDAT, if available.  Deal\n\twith the case that ASM_COMMENT_START is \"@\".\n\t(default_coff_asm_named_section): Add decl parameter.\n\t(default_pe_asm_named_section): Likewise.\n\t* config/alpha/alpha.c (vms_asm_named_section): Add decl\n\tparameter.\n\t(unicosmk_asm_named_section): Likewise.\n\t* config/arm/arm.c (arm_elf_asm_named_section): Remove.\n\t* config/arm/elf.h (TARGET_ASM_NAMED_SECTION): Likewise.\n\t* config/c4x/c4x.c (c4x_asm_named_section): Add decl parameter.\n\t* config/cris/cris-protos.h (cris_target_asm_named_section):\n\tLikewise.\n\t* config/cris/cris.c (cris_target_asm_named_section):\n\tLikewise.\n\t* config/h8300/h8300.c (h8300_asm_named_section): Likewise.\n\t* config/i386/i386-protos.h (i386_pe_asm_named_section):\n\tLikewise.\n\t* config/i386/winnt.c (i386_pe_asm_named_section): Likewise.\n\t* config/m68k/m68k.c (m68k_coff_asm_named_section): Likewise.\n\t* config/mcore/mcore.c (mcore_asm_named_section): Likewise.\n\t* config/rs6000/rs6000.c (rs6000_xcoff_asm_named_section):\n\tLikewise.\n\t* config/sparc/sparc.c (sparce_elf_asm_named_section): Likewise.\n\n\t* cp-objcp-common.h (LANG_HOOKS_COMDAT_GROUP): Define.\n\t* cp-tree.h (cxx_comdat_group): Declare.\n\t* decl.c (cxx_comdat_group): New function.\n\nFrom-SVN: r87557", "tree": {"sha": "1bbafdfb7e81c8d5ce2b22d7551232d4de285de5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1bbafdfb7e81c8d5ce2b22d7551232d4de285de5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c18a5b6cadf88275078d4b72249c8174cf079041", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c18a5b6cadf88275078d4b72249c8174cf079041", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c18a5b6cadf88275078d4b72249c8174cf079041", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c18a5b6cadf88275078d4b72249c8174cf079041/comments", "author": null, "committer": null, "parents": [{"sha": "f13ab1ee140dbb6bb9d3bf490468d472efe51659", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f13ab1ee140dbb6bb9d3bf490468d472efe51659", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f13ab1ee140dbb6bb9d3bf490468d472efe51659"}], "stats": {"total": 411, "additions": 308, "deletions": 103}, "files": [{"sha": "e3505b1c2abc3b04a6e9f4c2ab3a668662570a8b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c18a5b6cadf88275078d4b72249c8174cf079041/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c18a5b6cadf88275078d4b72249c8174cf079041/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c18a5b6cadf88275078d4b72249c8174cf079041", "patch": "@@ -1,3 +1,54 @@\n+2004-09-15  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* configure.ac: Check for COMDAT support.  Robustify check for\n+\tSHF_MERGE support.\n+\t* configure: Regenerated.\n+\t* config.in: Likewise.\n+\t* langhooks-def.h (lhd_comdat_group): New function.\n+\t(LANG_HOOKS_COMDAT_GROUP): New macro.\n+\t(LANG_HOOKS_DECLS): Use it.\n+\t* langhooks.c (lhd_comdat_group): Define.\n+\t* langhooks.h (lang_hooks_for_decls): Add comdat_group.\n+\t* output.h (named_section_flags): Make it a macro.\n+\t(named_section_real): New function.\n+\t(default_no_named_section): Add decl parameter.\n+\t(default_elf_asm_named_section): Likewise.\n+\t(default_coff_asm_named_section): Likewise.\n+\t(default_pe_asm_named_section): Likewise.\n+\t* target.h (gcc_target): Adjust type of named_section.\n+\t* varasm.c (named_section_flags): Rename to named_section_real.\n+\tAdd decl parameter.\n+\t(default_no_named_section): Add decl parameter.\n+\t(default_elf_asm_named_section): Use COMDAT, if available.  Deal\n+\twith the case that ASM_COMMENT_START is \"@\".\n+\t(default_coff_asm_named_section): Add decl parameter.\n+\t(default_pe_asm_named_section): Likewise.\n+\t* config/alpha/alpha.c (vms_asm_named_section): Add decl\n+\tparameter.\n+\t(unicosmk_asm_named_section): Likewise.\n+\t* config/arm/arm.c (arm_elf_asm_named_section): Remove.\n+\t* config/arm/elf.h (TARGET_ASM_NAMED_SECTION): Likewise.\n+\t* config/c4x/c4x.c (c4x_asm_named_section): Add decl parameter.\n+\t* config/cris/cris-protos.h (cris_target_asm_named_section):\n+\tLikewise.\n+\t* config/cris/cris.c (cris_target_asm_named_section):\n+\tLikewise.\n+\t* config/darwin/darwin-protos.h (darwin_asm_named_section):\n+\tLikewise.\n+\t* config/darwin/darwin.c (darwin_asm_named_section): Likewise.\n+\t* config/h8300/h8300.c (h8300_asm_named_section): Likewise.\n+\t* config/i386/i386-protos.h (i386_pe_asm_named_section):\n+\tLikewise.\n+\t* config/i386/winnt.c (i386_pe_asm_named_section): Likewise.\n+\t* config/m68k/m68k.c (m68k_coff_asm_named_section): Likewise.\n+\t* config/mcore/mcore.c (mcore_asm_named_section): Likewise.\n+\t* config/rs6000/rs6000.c (rs6000_xcoff_asm_named_section):\n+\tLikewise.\n+\t* config/sparc/sparc.c (sparce_elf_asm_named_section): Likewise.\n+\t* cp/cp-lang.h (LANG_HOOKS_COMDAT_GROUP): Define.\n+\t* cp/cp-tree.h (cxx_comdat_group): Declare.\n+\t* cp/decl.c (cxx_comdat_group): New function.\n+\n 2004-09-15  Jan Hubicka  <jh@suse.cz>\n \n \t* tree-ssa.c (verify_flow_sensitive_alias_info): Do not walk dead nodes."}, {"sha": "1755c8a3721372aab4243c7916e1ee3b2086a966", "filename": "gcc/config.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c18a5b6cadf88275078d4b72249c8174cf079041/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c18a5b6cadf88275078d4b72249c8174cf079041/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=c18a5b6cadf88275078d4b72249c8174cf079041", "patch": "@@ -284,6 +284,9 @@\n /* Define if your assembler supports .balign and .p2align. */\n #undef HAVE_GAS_BALIGN_AND_P2ALIGN\n \n+/* Define 0/1 if your assembler supports COMDAT group. */\n+#undef HAVE_GAS_COMDAT_GROUP\n+\n /* Define if your assembler uses the new HImode fild and fist notation. */\n #undef HAVE_GAS_FILDS_FISTS\n "}, {"sha": "21aa38227973192913ca9bf58ff4ac0ec5238718", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c18a5b6cadf88275078d4b72249c8174cf079041/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c18a5b6cadf88275078d4b72249c8174cf079041/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=c18a5b6cadf88275078d4b72249c8174cf079041", "patch": "@@ -8455,7 +8455,8 @@ vms_section_type_flags (tree decl, const char *name, int reloc)\n    the section; 0 if the default should be used.  */\n \n static void\n-vms_asm_named_section (const char *name, unsigned int flags)\n+vms_asm_named_section (const char *name, unsigned int flags, \n+\t\t       tree decl ATTRIBUTE_UNUSED)\n {\n   fputc ('\\n', asm_out_file);\n   fprintf (asm_out_file, \".section\\t%s\", name);\n@@ -8679,7 +8680,8 @@ unicosmk_unique_section (tree decl, int reloc ATTRIBUTE_UNUSED)\n    the section; 0 if the default should be used.  */\n \n static void\n-unicosmk_asm_named_section (const char *name, unsigned int flags)\n+unicosmk_asm_named_section (const char *name, unsigned int flags, \n+\t\t\t    tree decl ATTRIBUTE_UNUSED)\n {\n   const char *kind;\n "}, {"sha": "ee334dff1b2b655e63d1c7b5a060ab45b18372ab", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 0, "deletions": 59, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c18a5b6cadf88275078d4b72249c8174cf079041/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c18a5b6cadf88275078d4b72249c8174cf079041/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=c18a5b6cadf88275078d4b72249c8174cf079041", "patch": "@@ -145,9 +145,6 @@ static rtx arm_expand_unop_builtin (enum insn_code, tree, rtx, int);\n static rtx arm_expand_builtin (tree, rtx, rtx, enum machine_mode, int);\n static void emit_constant_insn (rtx cond, rtx pattern);\n \n-#ifdef OBJECT_FORMAT_ELF\n-static void arm_elf_asm_named_section (const char *, unsigned int);\n-#endif\n #ifndef ARM_PE\n static void arm_encode_section_info (tree, rtx, int);\n #endif\n@@ -13771,62 +13768,6 @@ aof_file_end (void)\n }\n #endif /* AOF_ASSEMBLER */\n \n-#ifdef OBJECT_FORMAT_ELF\n-/* Switch to an arbitrary section NAME with attributes as specified\n-   by FLAGS.  ALIGN specifies any known alignment requirements for\n-   the section; 0 if the default should be used.\n-\n-   Differs from the default elf version only in the prefix character\n-   used before the section type.  */\n-\n-static void\n-arm_elf_asm_named_section (const char *name, unsigned int flags)\n-{\n-  char flagchars[10], *f = flagchars;\n-\n-  if (! named_section_first_declaration (name))\n-    {\n-      fprintf (asm_out_file, \"\\t.section\\t%s\\n\", name);\n-      return;\n-    }\n-\n-  if (!(flags & SECTION_DEBUG))\n-    *f++ = 'a';\n-  if (flags & SECTION_WRITE)\n-    *f++ = 'w';\n-  if (flags & SECTION_CODE)\n-    *f++ = 'x';\n-  if (flags & SECTION_SMALL)\n-    *f++ = 's';\n-  if (flags & SECTION_MERGE)\n-    *f++ = 'M';\n-  if (flags & SECTION_STRINGS)\n-    *f++ = 'S';\n-  if (flags & SECTION_TLS)\n-    *f++ = 'T';\n-  *f = '\\0';\n-\n-  fprintf (asm_out_file, \"\\t.section\\t%s,\\\"%s\\\"\", name, flagchars);\n-\n-  if (!(flags & SECTION_NOTYPE))\n-    {\n-      const char *type;\n-\n-      if (flags & SECTION_BSS)\n-\ttype = \"nobits\";\n-      else\n-\ttype = \"progbits\";\n-\n-      fprintf (asm_out_file, \",%%%s\", type);\n-\n-      if (flags & SECTION_ENTSIZE)\n-\tfprintf (asm_out_file, \",%d\", flags & SECTION_ENTSIZE);\n-    }\n-\n-  putc ('\\n', asm_out_file);\n-}\n-#endif\n-\n #ifndef ARM_PE\n /* Symbols in the text segment can be accessed without indirecting via the\n    constant pool; it may take an extra binary operation, but this is still"}, {"sha": "12759566ac4c52034848b6ed153569310e4e8d05", "filename": "gcc/config/arm/elf.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c18a5b6cadf88275078d4b72249c8174cf079041/gcc%2Fconfig%2Farm%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c18a5b6cadf88275078d4b72249c8174cf079041/gcc%2Fconfig%2Farm%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Felf.h?ref=c18a5b6cadf88275078d4b72249c8174cf079041", "patch": "@@ -119,9 +119,6 @@\n #define TARGET_ASM_FILE_START_APP_OFF true\n #define TARGET_ASM_FILE_START_FILE_DIRECTIVE true\n \f\n-#undef  TARGET_ASM_NAMED_SECTION\n-#define TARGET_ASM_NAMED_SECTION  arm_elf_asm_named_section\n-\f\n \n /* For PIC code we need to explicitly specify (PLT) and (GOT) relocs.  */\n #define NEED_PLT_RELOC\tflag_pic"}, {"sha": "2d6e66006eb95d88d3d2f1bc96d66725cff002ca", "filename": "gcc/config/c4x/c4x.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c18a5b6cadf88275078d4b72249c8174cf079041/gcc%2Fconfig%2Fc4x%2Fc4x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c18a5b6cadf88275078d4b72249c8174cf079041/gcc%2Fconfig%2Fc4x%2Fc4x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.c?ref=c18a5b6cadf88275078d4b72249c8174cf079041", "patch": "@@ -195,7 +195,7 @@ static int c4x_label_ref_used_p (rtx, rtx);\n static tree c4x_handle_fntype_attribute (tree *, tree, tree, int, bool *);\n const struct attribute_spec c4x_attribute_table[];\n static void c4x_insert_attributes (tree, tree *);\n-static void c4x_asm_named_section (const char *, unsigned int);\n+static void c4x_asm_named_section (const char *, unsigned int, tree);\n static int c4x_adjust_cost (rtx, rtx, rtx, int);\n static void c4x_globalize_label (FILE *, const char *);\n static bool c4x_rtx_costs (rtx, int, int, int *);\n@@ -4924,7 +4924,8 @@ c4x_init_libfuncs (void)\n }\n \n static void\n-c4x_asm_named_section (const char *name, unsigned int flags ATTRIBUTE_UNUSED)\n+c4x_asm_named_section (const char *name, unsigned int flags ATTRIBUTE_UNUSED,\n+\t\t       tree decl ATTRIBUTE_UNUSED)\n {\n   fprintf (asm_out_file, \"\\t.sect\\t\\\"%s\\\"\\n\", name);\n }"}, {"sha": "f085e5d741b5830c002c632eb674988610734b93", "filename": "gcc/config/cris/cris-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c18a5b6cadf88275078d4b72249c8174cf079041/gcc%2Fconfig%2Fcris%2Fcris-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c18a5b6cadf88275078d4b72249c8174cf079041/gcc%2Fconfig%2Fcris%2Fcris-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris-protos.h?ref=c18a5b6cadf88275078d4b72249c8174cf079041", "patch": "@@ -44,8 +44,8 @@ extern int cris_got_symbol (rtx);\n extern int cris_symbol (rtx);\n extern void cris_output_addr_const (FILE *, rtx);\n extern int cris_cfun_uses_pic_table (void);\n-extern void cris_target_asm_named_section (const char *, unsigned int);\n #endif /* RTX_CODE */\n+extern void cris_target_asm_named_section (const char *, unsigned int, tree);\n \n extern int cris_return_address_on_stack (void);\n "}, {"sha": "2021c711dca2e0e3128964a2c73ba0cf2449b133", "filename": "gcc/config/cris/cris.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c18a5b6cadf88275078d4b72249c8174cf079041/gcc%2Fconfig%2Fcris%2Fcris.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c18a5b6cadf88275078d4b72249c8174cf079041/gcc%2Fconfig%2Fcris%2Fcris.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.c?ref=c18a5b6cadf88275078d4b72249c8174cf079041", "patch": "@@ -2450,12 +2450,13 @@ cris_reg_overlap_mentioned_p (rtx x, rtx in)\n    We just dispatch to the functions for ELF and a.out.  */\n \n void\n-cris_target_asm_named_section (const char *name, unsigned int flags)\n+cris_target_asm_named_section (const char *name, unsigned int flags,\n+\t\t\t       tree decl)\n {\n   if (! TARGET_ELF)\n-    default_no_named_section (name, flags);\n+    default_no_named_section (name, flags, decl);\n   else\n-    default_elf_asm_named_section (name, flags);\n+    default_elf_asm_named_section (name, flags, decl);\n }\n \n /* The LEGITIMATE_PIC_OPERAND_P worker.  */"}, {"sha": "402311c6bb129ab076efdb17a29b39f98a898ff6", "filename": "gcc/config/darwin-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c18a5b6cadf88275078d4b72249c8174cf079041/gcc%2Fconfig%2Fdarwin-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c18a5b6cadf88275078d4b72249c8174cf079041/gcc%2Fconfig%2Fdarwin-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin-protos.h?ref=c18a5b6cadf88275078d4b72249c8174cf079041", "patch": "@@ -69,7 +69,7 @@ extern void machopic_select_rtx_section (enum machine_mode, rtx,\n \t\t\t\t\t unsigned HOST_WIDE_INT);\n \n extern void darwin_unique_section (tree decl, int reloc);\n-extern void darwin_asm_named_section (const char *, unsigned int);\n+extern void darwin_asm_named_section (const char *, unsigned int, tree);\n extern unsigned int darwin_section_type_flags (tree, const char *, int);\n extern void darwin_non_lazy_pcrel (FILE *, rtx);\n "}, {"sha": "249ebab247bcbc224219e3f6a38cd9cdf544622d", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c18a5b6cadf88275078d4b72249c8174cf079041/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c18a5b6cadf88275078d4b72249c8174cf079041/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=c18a5b6cadf88275078d4b72249c8174cf079041", "patch": "@@ -1187,7 +1187,9 @@ darwin_globalize_label (FILE *stream, const char *name)\n }\n \n void\n-darwin_asm_named_section (const char *name, unsigned int flags ATTRIBUTE_UNUSED)\n+darwin_asm_named_section (const char *name, \n+\t\t\t  unsigned int flags ATTRIBUTE_UNUSED,\n+\t\t\t  tree decl ATTRIBUTE_UNUSED)\n {\n   fprintf (asm_out_file, \".section %s\\n\", name);\n }"}, {"sha": "564eecdfca27dd8e05a75ec2b22b9025b1a1e069", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c18a5b6cadf88275078d4b72249c8174cf079041/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c18a5b6cadf88275078d4b72249c8174cf079041/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=c18a5b6cadf88275078d4b72249c8174cf079041", "patch": "@@ -114,7 +114,7 @@ static tree h8300_handle_fndecl_attribute (tree *, tree, tree, int, bool *);\n static tree h8300_handle_eightbit_data_attribute (tree *, tree, tree, int, bool *);\n static tree h8300_handle_tiny_data_attribute (tree *, tree, tree, int, bool *);\n #ifndef OBJECT_FORMAT_ELF\n-static void h8300_asm_named_section (const char *, unsigned int);\n+static void h8300_asm_named_section (const char *, unsigned int, tree);\n #endif\n static int h8300_and_costs (rtx);\n static int h8300_shift_costs (rtx);\n@@ -5889,7 +5889,8 @@ h8300_reorg (void)\n \n #ifndef OBJECT_FORMAT_ELF\n static void\n-h8300_asm_named_section (const char *name, unsigned int flags ATTRIBUTE_UNUSED)\n+h8300_asm_named_section (const char *name, unsigned int flags ATTRIBUTE_UNUSED,\n+\t\t\t tree decl)\n {\n   /* ??? Perhaps we should be using default_coff_asm_named_section.  */\n   fprintf (asm_out_file, \"\\t.section %s\\n\", name);"}, {"sha": "d663b0938a3c8ab6db808018e65b6a21eb42dc4b", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c18a5b6cadf88275078d4b72249c8174cf079041/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c18a5b6cadf88275078d4b72249c8174cf079041/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=c18a5b6cadf88275078d4b72249c8174cf079041", "patch": "@@ -206,7 +206,7 @@ extern int ix86_constant_alignment (tree, int);\n extern tree ix86_handle_shared_attribute (tree *, tree, tree, int, bool *);\n \n extern unsigned int i386_pe_section_type_flags (tree, const char *, int);\n-extern void i386_pe_asm_named_section (const char *, unsigned int);\n+extern void i386_pe_asm_named_section (const char *, unsigned int, tree);\n extern int x86_field_alignment (tree, int);\n #endif\n "}, {"sha": "676a34af429b868989a30855c454a99aa4085e75", "filename": "gcc/config/i386/winnt.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c18a5b6cadf88275078d4b72249c8174cf079041/gcc%2Fconfig%2Fi386%2Fwinnt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c18a5b6cadf88275078d4b72249c8174cf079041/gcc%2Fconfig%2Fi386%2Fwinnt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fwinnt.c?ref=c18a5b6cadf88275078d4b72249c8174cf079041", "patch": "@@ -622,7 +622,8 @@ i386_pe_section_type_flags (tree decl, const char *name, int reloc)\n }\n \n void\n-i386_pe_asm_named_section (const char *name, unsigned int flags)\n+i386_pe_asm_named_section (const char *name, unsigned int flags, \n+\t\t\t   tree decl ATTRIBUTE_UNUSED)\n {\n   char flagchars[8], *f = flagchars;\n "}, {"sha": "d85c7c60c0970c00c7459ecea6e5ecfa7cbf866f", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c18a5b6cadf88275078d4b72249c8174cf079041/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c18a5b6cadf88275078d4b72249c8174cf079041/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=c18a5b6cadf88275078d4b72249c8174cf079041", "patch": "@@ -108,7 +108,7 @@ static const char *singlemove_string (rtx *);\n static void m68k_output_function_prologue (FILE *, HOST_WIDE_INT);\n static void m68k_output_function_epilogue (FILE *, HOST_WIDE_INT);\n #ifdef M68K_TARGET_COFF\n-static void m68k_coff_asm_named_section (const char *, unsigned int);\n+static void m68k_coff_asm_named_section (const char *, unsigned int, tree);\n #endif /* M68K_TARGET_COFF */\n static void m68k_output_mi_thunk (FILE *, tree, HOST_WIDE_INT,\n \t\t\t\t\t  HOST_WIDE_INT, tree);\n@@ -3324,7 +3324,8 @@ output_xorsi3 (rtx *operands)\n /* Output assembly to switch to section NAME with attribute FLAGS.  */\n \n static void\n-m68k_coff_asm_named_section (const char *name, unsigned int flags)\n+m68k_coff_asm_named_section (const char *name, unsigned int flags, \n+\t\t\t     tree decl ATTRIBUTE_UNUSED)\n {\n   char flagchar;\n "}, {"sha": "bdcbde99de57632fc1661f40ba271e46fb2088fa", "filename": "gcc/config/mcore/mcore.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c18a5b6cadf88275078d4b72249c8174cf079041/gcc%2Fconfig%2Fmcore%2Fmcore.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c18a5b6cadf88275078d4b72249c8174cf079041/gcc%2Fconfig%2Fmcore%2Fmcore.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.c?ref=c18a5b6cadf88275078d4b72249c8174cf079041", "patch": "@@ -138,7 +138,7 @@ const struct attribute_spec mcore_attribute_table[];\n static tree       mcore_handle_naked_attribute  (tree *, tree, tree, int, bool *);\n #ifdef OBJECT_FORMAT_ELF\n static void\t  mcore_asm_named_section       (const char *,\n-\t\t\t\t\t\t\tunsigned int);\n+\t\t\t\t\t\t unsigned int, tree);\n #endif\n static void       mcore_unique_section\t        (tree, int);\n static void mcore_encode_section_info\t\t(tree, rtx, int);\n@@ -3424,7 +3424,9 @@ mcore_naked_function_p (void)\n \n #ifdef OBJECT_FORMAT_ELF\n static void\n-mcore_asm_named_section (const char *name, unsigned int flags ATTRIBUTE_UNUSED)\n+mcore_asm_named_section (const char *name, \n+\t\t\t unsigned int flags ATTRIBUTE_UNUSED,\n+\t\t\t tree decl ATTRIBUTE_UNUSED)\n {\n   fprintf (asm_out_file, \"\\t.section %s\\n\", name);\n }"}, {"sha": "322a7863a4898b18b45e3f443193c2f1f0a0c563", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c18a5b6cadf88275078d4b72249c8174cf079041/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c18a5b6cadf88275078d4b72249c8174cf079041/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=c18a5b6cadf88275078d4b72249c8174cf079041", "patch": "@@ -16932,7 +16932,8 @@ rs6000_xcoff_asm_globalize_label (FILE *stream, const char *name)\n }\n \n static void\n-rs6000_xcoff_asm_named_section (const char *name, unsigned int flags)\n+rs6000_xcoff_asm_named_section (const char *name, unsigned int flags,\n+\t\t\t\ttree decl ATTRIBUTE_UNUSED)\n {\n   int smclass;\n   static const char * const suffix[3] = { \"PR\", \"RO\", \"RW\" };"}, {"sha": "63d3f01cdca159526372f8f92156f00d7ffba117", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c18a5b6cadf88275078d4b72249c8174cf079041/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c18a5b6cadf88275078d4b72249c8174cf079041/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=c18a5b6cadf88275078d4b72249c8174cf079041", "patch": "@@ -304,7 +304,7 @@ static void emit_restore_regs (void);\n static void sparc_asm_function_prologue (FILE *, HOST_WIDE_INT);\n static void sparc_asm_function_epilogue (FILE *, HOST_WIDE_INT);\n #ifdef OBJECT_FORMAT_ELF\n-static void sparc_elf_asm_named_section (const char *, unsigned int);\n+static void sparc_elf_asm_named_section (const char *, unsigned int, tree);\n #endif\n \n static int sparc_adjust_cost (rtx, rtx, rtx, int);\n@@ -8060,13 +8060,14 @@ sparc_profile_hook (int labelno)\n \f\n #ifdef OBJECT_FORMAT_ELF\n static void\n-sparc_elf_asm_named_section (const char *name, unsigned int flags)\n+sparc_elf_asm_named_section (const char *name, unsigned int flags,\n+\t\t\t     tree decl)\n {\n   if (flags & SECTION_MERGE)\n     {\n       /* entsize cannot be expressed in this section attributes\n \t encoding style.  */\n-      default_elf_asm_named_section (name, flags);\n+      default_elf_asm_named_section (name, flags, decl);\n       return;\n     }\n "}, {"sha": "8a20fd34a8a0fb97a92900c7fff46917e883a1bb", "filename": "gcc/configure", "status": "modified", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c18a5b6cadf88275078d4b72249c8174cf079041/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c18a5b6cadf88275078d4b72249c8174cf079041/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=c18a5b6cadf88275078d4b72249c8174cf079041", "patch": "@@ -10835,12 +10835,117 @@ fi\n echo \"$as_me:$LINENO: result: $gcc_cv_as_shf_merge\" >&5\n echo \"${ECHO_T}$gcc_cv_as_shf_merge\" >&6\n \n+if test $gcc_cv_as_shf_merge = no; then\n+  echo \"$as_me:$LINENO: checking assembler for section merging support\" >&5\n+echo $ECHO_N \"checking assembler for section merging support... $ECHO_C\" >&6\n+if test \"${gcc_cv_as_shf_merge+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+  gcc_cv_as_shf_merge=no\n+    if test $in_tree_gas = yes; then\n+    if test $in_tree_gas_is_elf = yes \\\n+  && test $gcc_cv_gas_vers -ge `expr \\( \\( 2 \\* 1000 \\) + 12 \\) \\* 1000 + 0`\n+  then gcc_cv_as_shf_merge=yes\n+fi\n+  elif test x$gcc_cv_as != x; then\n+    echo '.section .rodata.str, \"aMS\", %progbits, 1' > conftest.s\n+    if { ac_try='$gcc_cv_as --fatal-warnings -o conftest.o conftest.s >&5'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }\n+    then\n+\tgcc_cv_as_shf_merge=yes\n+    else\n+      echo \"configure: failed program was\" >&5\n+      cat conftest.s >&5\n+    fi\n+    rm -f conftest.o conftest.s\n+  fi\n+fi\n+echo \"$as_me:$LINENO: result: $gcc_cv_as_shf_merge\" >&5\n+echo \"${ECHO_T}$gcc_cv_as_shf_merge\" >&6\n+\n+fi\n \n cat >>confdefs.h <<_ACEOF\n #define HAVE_GAS_SHF_MERGE `if test $gcc_cv_as_shf_merge = yes; then echo 1; else echo 0; fi`\n _ACEOF\n \n \n+echo \"$as_me:$LINENO: checking assembler for COMDAT group support\" >&5\n+echo $ECHO_N \"checking assembler for COMDAT group support... $ECHO_C\" >&6\n+if test \"${gcc_cv_as_comdat_group+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+  gcc_cv_as_comdat_group=no\n+    if test $in_tree_gas = yes; then\n+    if test $in_tree_gas_is_elf = yes \\\n+  && test $gcc_cv_gas_vers -ge `expr \\( \\( 2 \\* 1000 \\) + 15 \\) \\* 1000 + 91`\n+  then gcc_cv_as_comdat_group=yes\n+fi\n+  elif test x$gcc_cv_as != x; then\n+    echo '.section .text,\"axG\",@progbits,.foo,comdat' > conftest.s\n+    if { ac_try='$gcc_cv_as --fatal-warnings -o conftest.o conftest.s >&5'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }\n+    then\n+\tgcc_cv_as_comdat_group=yes\n+    else\n+      echo \"configure: failed program was\" >&5\n+      cat conftest.s >&5\n+    fi\n+    rm -f conftest.o conftest.s\n+  fi\n+fi\n+echo \"$as_me:$LINENO: result: $gcc_cv_as_comdat_group\" >&5\n+echo \"${ECHO_T}$gcc_cv_as_comdat_group\" >&6\n+\n+if test $gcc_cv_as_comdat_group = yes; then\n+  gcc_cv_as_comdat_group_percent=no\n+else\n+ echo \"$as_me:$LINENO: checking assembler for COMDAT group support\" >&5\n+echo $ECHO_N \"checking assembler for COMDAT group support... $ECHO_C\" >&6\n+if test \"${gcc_cv_as_comdat_group_percent+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+  gcc_cv_as_comdat_group_percent=no\n+    if test $in_tree_gas = yes; then\n+    if test $in_tree_gas_is_elf = yes \\\n+  && test $gcc_cv_gas_vers -ge `expr \\( \\( 2 \\* 1000 \\) + 15 \\) \\* 1000 + 91`\n+  then gcc_cv_as_comdat_group_percent=yes\n+fi\n+  elif test x$gcc_cv_as != x; then\n+    echo '.section .text,\"axG\",%progbits,.foo,comdat' > conftest.s\n+    if { ac_try='$gcc_cv_as --fatal-warnings -o conftest.o conftest.s >&5'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }\n+    then\n+\tgcc_cv_as_comdat_group_percent=yes\n+    else\n+      echo \"configure: failed program was\" >&5\n+      cat conftest.s >&5\n+    fi\n+    rm -f conftest.o conftest.s\n+  fi\n+fi\n+echo \"$as_me:$LINENO: result: $gcc_cv_as_comdat_group_percent\" >&5\n+echo \"${ECHO_T}$gcc_cv_as_comdat_group_percent\" >&6\n+\n+fi\n+\n+cat >>confdefs.h <<_ACEOF\n+#define HAVE_GAS_COMDAT_GROUP `if test $gcc_cv_as_comdat_group = yes || test $gcc_cv_as_comdat_group_percent = yes; then echo 1; else echo 0; fi`\n+_ACEOF\n+\n+\n # Thread-local storage - the check is heavily parametrized.\n conftest_s=\n tls_first_major="}, {"sha": "1ae739e7af2206ed9e7032784d927fe985eb3bd1", "filename": "gcc/configure.ac", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c18a5b6cadf88275078d4b72249c8174cf079041/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c18a5b6cadf88275078d4b72249c8174cf079041/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=c18a5b6cadf88275078d4b72249c8174cf079041", "patch": "@@ -2218,10 +2218,29 @@ fi\n gcc_GAS_CHECK_FEATURE(section merging support, gcc_cv_as_shf_merge,\n  [elf,2,12,0], [--fatal-warnings],\n  [.section .rodata.str, \"aMS\", @progbits, 1])\n+if test $gcc_cv_as_shf_merge = no; then\n+  gcc_GAS_CHECK_FEATURE(section merging support, gcc_cv_as_shf_merge,\n+    [elf,2,12,0], [--fatal-warnings],\n+    [.section .rodata.str, \"aMS\", %progbits, 1])\n+fi\n AC_DEFINE_UNQUOTED(HAVE_GAS_SHF_MERGE,\n   [`if test $gcc_cv_as_shf_merge = yes; then echo 1; else echo 0; fi`],\n [Define 0/1 if your assembler supports marking sections with SHF_MERGE flag.])\n \n+gcc_GAS_CHECK_FEATURE(COMDAT group support, gcc_cv_as_comdat_group,\n+ [elf,2,15,91], [--fatal-warnings],\n+ [.section .text,\"axG\",@progbits,.foo,comdat])\n+if test $gcc_cv_as_comdat_group = yes; then\n+  gcc_cv_as_comdat_group_percent=no\n+else\n+ gcc_GAS_CHECK_FEATURE(COMDAT group support, gcc_cv_as_comdat_group_percent,\n+   [elf,2,15,91], [--fatal-warnings],\n+   [.section .text,\"axG\",%progbits,.foo,comdat])\n+fi\n+AC_DEFINE_UNQUOTED(HAVE_GAS_COMDAT_GROUP,\n+  [`if test $gcc_cv_as_comdat_group = yes || test $gcc_cv_as_comdat_group_percent = yes; then echo 1; else echo 0; fi`],\n+[Define 0/1 if your assembler supports COMDAT group.])\n+\n # Thread-local storage - the check is heavily parametrized.\n conftest_s=\n tls_first_major="}, {"sha": "2be37070e5f19687a5acf8af16c77ebc214b9f4f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c18a5b6cadf88275078d4b72249c8174cf079041/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c18a5b6cadf88275078d4b72249c8174cf079041/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c18a5b6cadf88275078d4b72249c8174cf079041", "patch": "@@ -1,3 +1,9 @@\n+2004-09-15  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* cp-objcp-common.h (LANG_HOOKS_COMDAT_GROUP): Define.\n+\t* cp-tree.h (cxx_comdat_group): Declare.\n+\t* decl.c (cxx_comdat_group): New function.\n+\n 2004-09-15  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* search.c (get_pure_virtuals): Remove unused variables."}, {"sha": "a6ab3832a8fa8fb35b943f9fe425e373ef3a54f3", "filename": "gcc/cp/cp-objcp-common.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c18a5b6cadf88275078d4b72249c8174cf079041/gcc%2Fcp%2Fcp-objcp-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c18a5b6cadf88275078d4b72249c8174cf079041/gcc%2Fcp%2Fcp-objcp-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.h?ref=c18a5b6cadf88275078d4b72249c8174cf079041", "patch": "@@ -92,6 +92,8 @@ extern tree objcp_tsubst_copy_and_build (tree, tree, tsubst_flags_t,\n #define LANG_HOOKS_WARN_UNUSED_GLOBAL_DECL cxx_warn_unused_global_decl\n #undef LANG_HOOKS_WRITE_GLOBALS\n #define LANG_HOOKS_WRITE_GLOBALS lhd_do_nothing\n+#undef LANG_HOOKS_COMDAT_GROUP\n+#define LANG_HOOKS_COMDAT_GROUP cxx_comdat_group\n \n #undef LANG_HOOKS_FUNCTION_INIT\n #define LANG_HOOKS_FUNCTION_INIT cxx_push_function_context"}, {"sha": "22ac16589a4a9f3e30354f112df6b5fc9b15f4d8", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c18a5b6cadf88275078d4b72249c8174cf079041/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c18a5b6cadf88275078d4b72249c8174cf079041/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=c18a5b6cadf88275078d4b72249c8174cf079041", "patch": "@@ -3789,6 +3789,7 @@ extern tree builtin_function (const char *name, tree type,\n \t\t\t      const char *libname, tree attrs);\n extern tree check_elaborated_type_specifier     (enum tag_types, tree, bool);\n extern void warn_extern_redeclared_static (tree, tree);\n+extern const char *cxx_comdat_group             (tree);\n extern bool cp_missing_noreturn_ok_p\t\t(tree);\n extern void initialize_artificial_var            (tree, tree);\n "}, {"sha": "e56023bbce6c72a1af6fb1372faf277ad6389956", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c18a5b6cadf88275078d4b72249c8174cf079041/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c18a5b6cadf88275078d4b72249c8174cf079041/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=c18a5b6cadf88275078d4b72249c8174cf079041", "patch": "@@ -10883,4 +10883,24 @@ cp_missing_noreturn_ok_p (tree decl)\n   return DECL_MAIN_P (decl);\n }\n \n+/* Return the COMDAT group into which DECL should be placed.  */\n+\n+const char *\n+cxx_comdat_group (tree decl)\n+{\n+  tree name;\n+\n+  /* Virtual tables, construction virtual tables, and virtual table\n+     tables all go in a single COMDAT group, named after the primary\n+     virtual table.  */\n+  if (TREE_CODE (decl) == VAR_DECL && DECL_VTABLE_OR_VTT_P (decl))\n+    name = DECL_ASSEMBLER_NAME (CLASSTYPE_VTABLES (DECL_CONTEXT (decl)));\n+  /* For all other DECLs, the COMDAT group is the mangled name of the\n+     declaration itself.  */\n+  else\n+    name = DECL_ASSEMBLER_NAME (decl);\n+\n+  return IDENTIFIER_POINTER (name);\n+}\n+\n #include \"gt-cp-decl.h\""}, {"sha": "8b57a0311ab0ea25ca63bd328c4f6146b61cc11a", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c18a5b6cadf88275078d4b72249c8174cf079041/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c18a5b6cadf88275078d4b72249c8174cf079041/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=c18a5b6cadf88275078d4b72249c8174cf079041", "patch": "@@ -65,6 +65,7 @@ extern void lhd_incomplete_type_error (tree, tree);\n extern tree lhd_type_promotes_to (tree);\n extern void lhd_register_builtin_type (tree, const char *);\n extern bool lhd_decl_ok_for_sibcall (tree);\n+extern const char *lhd_comdat_group (tree);\n extern tree lhd_expr_size (tree);\n extern bool lhd_decl_uninit (tree);\n extern tree lhd_get_callee_fndecl (tree);\n@@ -234,6 +235,7 @@ extern tree lhd_make_node (enum tree_code);\n #define LANG_HOOKS_WRITE_GLOBALS write_global_declarations\n #define LANG_HOOKS_PREPARE_ASSEMBLE_VARIABLE NULL\n #define LANG_HOOKS_DECL_OK_FOR_SIBCALL\tlhd_decl_ok_for_sibcall\n+#define LANG_HOOKS_COMDAT_GROUP lhd_comdat_group\n \n #define LANG_HOOKS_DECLS { \\\n   LANG_HOOKS_GLOBAL_BINDINGS_P, \\\n@@ -244,6 +246,7 @@ extern tree lhd_make_node (enum tree_code);\n   LANG_HOOKS_WRITE_GLOBALS, \\\n   LANG_HOOKS_PREPARE_ASSEMBLE_VARIABLE, \\\n   LANG_HOOKS_DECL_OK_FOR_SIBCALL, \\\n+  LANG_HOOKS_COMDAT_GROUP \\\n }\n \n /* The whole thing.  The structure is defined in langhooks.h.  */"}, {"sha": "b1fd5b4df2c44cb073832e31b0088c40269b5559", "filename": "gcc/langhooks.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c18a5b6cadf88275078d4b72249c8174cf079041/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c18a5b6cadf88275078d4b72249c8174cf079041/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=c18a5b6cadf88275078d4b72249c8174cf079041", "patch": "@@ -456,6 +456,14 @@ lhd_decl_ok_for_sibcall (tree decl ATTRIBUTE_UNUSED)\n   return true;\n }\n \n+/* Return the COMDAT group into which DECL should be placed.  */\n+\n+const char *\n+lhd_comdat_group (tree decl)\n+{\n+  return IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl));\n+}\n+\n /* lang_hooks.decls.final_write_globals: perform final processing on\n    global variables.  */\n void"}, {"sha": "1b2dae10564492ebcfdd207de8388365ddeae870", "filename": "gcc/langhooks.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c18a5b6cadf88275078d4b72249c8174cf079041/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c18a5b6cadf88275078d4b72249c8174cf079041/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=c18a5b6cadf88275078d4b72249c8174cf079041", "patch": "@@ -183,6 +183,15 @@ struct lang_hooks_for_decls\n \n   /* True if this decl may be called via a sibcall.  */\n   bool (*ok_for_sibcall) (tree);\n+\n+  /* Return the COMDAT group into which this DECL should be placed.\n+     It is known that the DECL belongs in *some* COMDAT group when\n+     this hook is called.  The return value will be used immediately,\n+     but not explicitly deallocated, so implementations should not use\n+     xmalloc to allocate the string returned.  (Typically, the return\n+     value will be the string already stored in an\n+     IDENTIFIER_NODE.)  */\n+  const char * (*comdat_group) (tree);\n };\n \n /* Language-specific hooks.  See langhooks-def.h for defaults.  */"}, {"sha": "989a8dc174ea7c6a257e5efff22d850ef208ae03", "filename": "gcc/output.h", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c18a5b6cadf88275078d4b72249c8174cf079041/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c18a5b6cadf88275078d4b72249c8174cf079041/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=c18a5b6cadf88275078d4b72249c8174cf079041", "patch": "@@ -478,15 +478,17 @@ extern void no_asm_to_stream (FILE *);\n \n extern unsigned int get_named_section_flags (const char *);\n extern bool set_named_section_flags (const char *, unsigned int);\n-extern void named_section_flags (const char *, unsigned int);\n+#define named_section_flags(NAME, FLAGS) \\\n+  named_section_real((NAME), (FLAGS), /*decl=*/NULL_TREE)\n+extern void named_section_real (const char *, unsigned int, tree);\n extern bool named_section_first_declaration (const char *);\n extern unsigned int default_section_type_flags (tree, const char *, int);\n extern unsigned int default_section_type_flags_1 (tree, const char *, int, int);\n \n-extern void default_no_named_section (const char *, unsigned int);\n-extern void default_elf_asm_named_section (const char *, unsigned int);\n-extern void default_coff_asm_named_section (const char *, unsigned int);\n-extern void default_pe_asm_named_section (const char *, unsigned int);\n+extern void default_no_named_section (const char *, unsigned int, tree);\n+extern void default_elf_asm_named_section (const char *, unsigned int, tree);\n+extern void default_coff_asm_named_section (const char *, unsigned int, tree);\n+extern void default_pe_asm_named_section (const char *, unsigned int, tree);\n \n extern void default_stabs_asm_out_destructor (rtx, int);\n extern void default_named_section_asm_out_destructor (rtx, int);"}, {"sha": "a6d69e1938ea123dcc4186622b228e3569d4edf7", "filename": "gcc/target.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c18a5b6cadf88275078d4b72249c8174cf079041/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c18a5b6cadf88275078d4b72249c8174cf079041/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=c18a5b6cadf88275078d4b72249c8174cf079041", "patch": "@@ -107,9 +107,10 @@ struct gcc_target\n     /* Output the assembler code for function exit.  */\n     void (* function_epilogue) (FILE *, HOST_WIDE_INT);\n \n-    /* Switch to an arbitrary section NAME with attributes as\n-       specified by FLAGS.  */\n-    void (* named_section) (const char *, unsigned int);\n+    /* Tell assembler to change to section NAME with attributes FLAGS.\n+       If DECL is non-NULL, it is the VAR_DECL or FUNCTION_DECL with\n+       which this section is associated.  */\n+    void (* named_section) (const char *name, unsigned int flags, tree decl);\n \n     /* Switch to the section that holds the exception table.  */\n     void (* exception_section) (void);"}, {"sha": "e3b53da45f3ed742a651b3d4ecd195b757e68a3e", "filename": "gcc/varasm.c", "status": "modified", "additions": 35, "deletions": 11, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c18a5b6cadf88275078d4b72249c8174cf079041/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c18a5b6cadf88275078d4b72249c8174cf079041/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=c18a5b6cadf88275078d4b72249c8174cf079041", "patch": "@@ -417,17 +417,19 @@ set_named_section_flags (const char *section, unsigned int flags)\n   return true;\n }\n \n-/* Tell assembler to change to section NAME with attributes FLAGS.  */\n+/* Tell assembler to change to section NAME with attributes FLAGS.  If\n+   DECL is non-NULL, it is the VAR_DECL or FUNCTION_DECL with which\n+   this section is associated.  */\n \n void\n-named_section_flags (const char *name, unsigned int flags)\n+named_section_real (const char *name, unsigned int flags, tree decl)\n {\n   if (in_section != in_named || strcmp (name, in_named_name) != 0)\n     {\n       if (! set_named_section_flags (name, flags))\n \tabort ();\n \n-      targetm.asm_out.named_section (name, flags);\n+      targetm.asm_out.named_section (name, flags, decl);\n \n       if (flags & SECTION_FORGET)\n \tin_section = no_section;\n@@ -478,7 +480,7 @@ named_section (tree decl, const char *name, int reloc)\n \terror (\"%J%D causes a section type conflict\", decl, decl);\n     }\n \n-  named_section_flags (name, flags);\n+  named_section_real (name, flags, decl);\n }\n \n /* If required, set DECL_SECTION_NAME to a unique name.  */\n@@ -4582,19 +4584,26 @@ default_section_type_flags_1 (tree decl, const char *name, int reloc,\n \n void\n default_no_named_section (const char *name ATTRIBUTE_UNUSED,\n-\t\t\t  unsigned int flags ATTRIBUTE_UNUSED)\n+\t\t\t  unsigned int flags ATTRIBUTE_UNUSED,\n+\t\t\t  tree decl ATTRIBUTE_UNUSED)\n {\n   /* Some object formats don't support named sections at all.  The\n      front-end should already have flagged this as an error.  */\n   abort ();\n }\n \n void\n-default_elf_asm_named_section (const char *name, unsigned int flags)\n+default_elf_asm_named_section (const char *name, unsigned int flags,\n+\t\t\t       tree decl ATTRIBUTE_UNUSED)\n {\n   char flagchars[10], *f = flagchars;\n \n-  if (! named_section_first_declaration (name))\n+  /* If we have already declared this section, we can use an\n+     abbreviated form to switch back to it -- unless this section is\n+     part of a COMDAT groups, in which case GAS requires the full\n+     declaration every time.  */\n+  if (!(HAVE_GAS_COMDAT_GROUP && (flags & SECTION_LINKONCE))\n+      && ! named_section_first_declaration (name))\n     {\n       fprintf (asm_out_file, \"\\t.section\\t%s\\n\", name);\n       return;\n@@ -4614,30 +4623,44 @@ default_elf_asm_named_section (const char *name, unsigned int flags)\n     *f++ = 'S';\n   if (flags & SECTION_TLS)\n     *f++ = 'T';\n+  if (HAVE_GAS_COMDAT_GROUP && (flags & SECTION_LINKONCE))\n+    *f++ = 'G';\n   *f = '\\0';\n \n   fprintf (asm_out_file, \"\\t.section\\t%s,\\\"%s\\\"\", name, flagchars);\n \n   if (!(flags & SECTION_NOTYPE))\n     {\n       const char *type;\n+      const char *format;\n \n       if (flags & SECTION_BSS)\n \ttype = \"nobits\";\n       else\n \ttype = \"progbits\";\n \n-      fprintf (asm_out_file, \",@%s\", type);\n+      format = \",@%s\";\n+#ifdef ASM_COMMENT_START\n+      /* On platforms that use \"@\" as the assembly comment character,\n+\t use \"%\" instead.  */\n+      if (strcmp (ASM_COMMENT_START, \"@\") == 0)\n+\tformat = \",%%%s\";\n+#endif\n+      fprintf (asm_out_file, format, type);\n \n       if (flags & SECTION_ENTSIZE)\n \tfprintf (asm_out_file, \",%d\", flags & SECTION_ENTSIZE);\n+      if (HAVE_GAS_COMDAT_GROUP && (flags & SECTION_LINKONCE))\n+\tfprintf (asm_out_file, \",%s,comdat\", \n+\t\t lang_hooks.decls.comdat_group (decl));\n     }\n \n   putc ('\\n', asm_out_file);\n }\n \n void\n-default_coff_asm_named_section (const char *name, unsigned int flags)\n+default_coff_asm_named_section (const char *name, unsigned int flags, \n+\t\t\t\ttree decl ATTRIBUTE_UNUSED)\n {\n   char flagchars[8], *f = flagchars;\n \n@@ -4651,9 +4674,10 @@ default_coff_asm_named_section (const char *name, unsigned int flags)\n }\n \n void\n-default_pe_asm_named_section (const char *name, unsigned int flags)\n+default_pe_asm_named_section (const char *name, unsigned int flags,\n+\t\t\t      tree decl)\n {\n-  default_coff_asm_named_section (name, flags);\n+  default_coff_asm_named_section (name, flags, decl);\n \n   if (flags & SECTION_LINKONCE)\n     {"}]}