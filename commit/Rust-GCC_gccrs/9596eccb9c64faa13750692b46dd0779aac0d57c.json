{"sha": "9596eccb9c64faa13750692b46dd0779aac0d57c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTU5NmVjY2I5YzY0ZmFhMTM3NTA2OTJiNDZkZDA3NzlhYWMwZDU3Yw==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2020-07-05T23:10:54Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2020-07-05T23:17:54Z"}, "message": "cris: update recent patterns. Simplify cris_select_cc_mode.\n\nThe code in cris_select_cc_mode for selecting CC_NZmode was\npartly inconsistent with the comment and partly seemed\nambiguous.  I couldn't find a reason why I qualified selection\nof CC_NZmode on the setting operation once a matching user was\nspotted, so I just removed that.  The cris.c update was due to\nobserving the new test-case failing; the CC_NZmode compare\nwasn't eliminated.\n\nThe recently re-instated adds/addu/subs/subu/bound patterns are\nrewritten to replace the use of match_operator with iterators.\n\ngcc:\n\t* config/cris/cris.c (cris_select_cc_mode): Always return\n\tCC_NZmode for matching comparisons.  Clarify comments.\n\t* config/cris/cris-modes.def: Clarify mode comment.\n\t* config/cris/cris.md (plusminus, plusminusumin, plusumin): New\n\tcode iterators.\n\t(addsub, addsubbo, nd): New code iterator attributes.\n\t(\"*<addsub><su>qihi\"): Rename from \"*extopqihi\".  Use code\n\titerator constructs instead of match_operator constructs.\n\t(\"*<addsubbo><su><nd><mode>si<setnz>\"): Similar from\n\t\"*extop<mode>si<setnz>\".\n\t(\"*add<su>qihi_swap\"): Similar from \"*addxqihi_swap\".\n\t(\"*<addsubbo><su><nd><mode>si<setnz>_swap\"): Similar from\n\t\"*extop<mode>si<setnz>_swap\".\n\ngcc/testsuite:\n\t* gcc.target/cris/pr93372-39.c: New test.", "tree": {"sha": "ebcde04d5354812ffed4ce05c1e54f2a5f8cdab3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ebcde04d5354812ffed4ce05c1e54f2a5f8cdab3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9596eccb9c64faa13750692b46dd0779aac0d57c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9596eccb9c64faa13750692b46dd0779aac0d57c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9596eccb9c64faa13750692b46dd0779aac0d57c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9596eccb9c64faa13750692b46dd0779aac0d57c/comments", "author": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65f8403f1a99f965ad3ed36adc4f889cf95ee1eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65f8403f1a99f965ad3ed36adc4f889cf95ee1eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65f8403f1a99f965ad3ed36adc4f889cf95ee1eb"}], "stats": {"total": 157, "additions": 90, "deletions": 67}, "files": [{"sha": "874e4c19657e87db4e0d869b34c3cf06d3b741c9", "filename": "gcc/config/cris/cris-modes.def", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9596eccb9c64faa13750692b46dd0779aac0d57c/gcc%2Fconfig%2Fcris%2Fcris-modes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9596eccb9c64faa13750692b46dd0779aac0d57c/gcc%2Fconfig%2Fcris%2Fcris-modes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris-modes.def?ref=9596eccb9c64faa13750692b46dd0779aac0d57c", "patch": "@@ -25,9 +25,10 @@ along with GCC; see the file COPYING3.  If not see\n    have ordinary compares and incidental condition-code settings from\n    preceding instructions, setting a subset of N, Z, V and C to usable\n    values, from the perspective of comparing the result against zero\n-   (fpcraz).  The two subsets meaningful to gcc are all of N, Z, V, C\n-   versus just N, Z; some CC-users care only about N and/or Z and some\n-   that care about at least one of those flags together with V and/or C.\n+   (referred to below as \"fpcraz\").  The two subsets meaningful to gcc are\n+   all of N, Z, V, C versus just N, Z; some CC-users care only about N\n+   and/or Z and some that care about at least one of those flags together\n+   with V and/or C.\n \n    The plain \"CC_MODE (CC)\" (which is always present in gcc), is used to\n    reflect the \"unoptimized\" state, where the CC-setter is a compare\n@@ -37,9 +38,13 @@ along with GCC; see the file COPYING3.  If not see\n    or if optimization of CC-setter and CC-users, when CCmode setters can\n    be changed or replaced by either CC_NZmode or CC_NZVCmode.  To wit, all\n    users that require CC_NZVCmode must match only that mode at any time.\n-   All other users must match all CCmodes.  All setters that set only\n-   CC_NZmode must set only that mode.  All other setters must match\n-   setting all CCmodes.  */\n+   All other users must match all of CCmode, CC_NZmode, and CC_NZVCmode.\n+   All setters that set only CC_NZmode must match setting only that mode.\n+   All other setters must match setting all of CCmode, CC_NZmode, and\n+   CC_NZVCmode.\n+\n+   There's also other modes (i.e. CC_ZnNmode) with a separate set of\n+   setters and users not matched by the others. */\n \n /* Z and N flags only.  For a condition-code setter: only the Z and N\n    flags are set to usable values, fpcraz.  For a condition-code user: the"}, {"sha": "b26b9f2e883338c1157c5f0d0905c1c43177f6a6", "filename": "gcc/config/cris/cris.c", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9596eccb9c64faa13750692b46dd0779aac0d57c/gcc%2Fconfig%2Fcris%2Fcris.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9596eccb9c64faa13750692b46dd0779aac0d57c/gcc%2Fconfig%2Fcris%2Fcris.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.c?ref=9596eccb9c64faa13750692b46dd0779aac0d57c", "patch": "@@ -1530,21 +1530,11 @@ cris_select_cc_mode (enum rtx_code op, rtx x, rtx y)\n   if (GET_MODE_CLASS (GET_MODE (x)) != MODE_INT || y != const0_rtx)\n     return CCmode;\n \n-  /* If we have a comparison that doesn't have to look at V or C, check\n-     operand x; if it's a valid operator, return CC_NZmode, else CCmode,\n-     so we only use CC_NZmode for the cases where we don't actually have\n-     both V and C valid.  */\n+  /* If we have a comparison that doesn't have to look at V or C, return\n+     CC_NZmode.  */\n   if (op == EQ || op ==  NE || op ==  GTU || op ==  LEU\n       || op ==  LT || op ==  GE)\n-    {\n-      enum rtx_code e = GET_CODE (x);\n-\n-    /* Mentioning the rtx_code here is required but not sufficient: the\n-       insn also needs to be decorated with <setnz> (and the\n-       anonymization prefix <anz> for a named pattern).  */\n-      return e == PLUS || e == MINUS || e == MULT || e == NOT || e == NEG\n-\t? CC_NZmode : CCmode;\n-    }\n+    return CC_NZmode;\n \n   /* We should only get here for comparison operators.  */\n   gcc_assert (op ==  GEU || op ==  LTU || op ==  GT || op ==  LE);"}, {"sha": "ae6a27f5f2cb8f6659266b8e4e3d423ba834be07", "filename": "gcc/config/cris/cris.md", "status": "modified", "additions": 57, "deletions": 48, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9596eccb9c64faa13750692b46dd0779aac0d57c/gcc%2Fconfig%2Fcris%2Fcris.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9596eccb9c64faa13750692b46dd0779aac0d57c/gcc%2Fconfig%2Fcris%2Fcris.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.md?ref=9596eccb9c64faa13750692b46dd0779aac0d57c", "patch": "@@ -183,6 +183,25 @@\n (define_code_attr u [(sign_extend \"\") (zero_extend \"u\")])\n (define_code_attr su [(sign_extend \"s\") (zero_extend \"u\")])\n \n+;; For extended-operand variants.\n+(define_code_iterator plusminus [plus minus])\n+(define_code_attr addsub [(plus \"add\") (minus \"sub\")])\n+\n+;; Similar, other cases also matching bound/umin.\n+(define_code_iterator plusminusumin [plus minus umin])\n+\n+;; Ditto, commutative operators (i.e. not minus).\n+(define_code_iterator plusumin [plus umin])\n+\n+;; The addsubbo and nd code-attributes form a hack.  We need to output\n+;; \"addu.b\", \"subu.b\" but \"bound.b\" (no \"u\"-suffix) which means we'd\n+;; need to refer to one iterator from the next.  But, that can't be\n+;; done.  Instead output the \"u\" for unsigned as the \"u\" in \"bound\",\n+;; i.e. the mnemonic as three parts including the extend-letter, and\n+;; with an empty third part for \"add\" and \"sub\".\n+(define_code_attr addsubbo [(plus \"add\") (minus \"sub\") (umin \"bo\")])\n+(define_code_attr nd [(plus \"\") (minus \"\") (umin \"nd\")])\n+\n ;; For the shift variants.\n (define_code_iterator shift [ashiftrt lshiftrt ashift])\n (define_code_iterator shiftrt [ashiftrt lshiftrt])\n@@ -1113,82 +1132,72 @@\n ;; QImode to HImode\n ;; FIXME: GCC should widen.\n \n-(define_insn \"*extopqihi\"\n+(define_insn \"*<addsub><su>qihi\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r,r,r,r\")\n-\t(match_operator:HI\n-\t 3 \"cris_additive_operand_extend_operator\"\n-\t [(match_operand:HI 1 \"register_operand\" \"0,0,0,r\")\n-\t  (match_operator:HI\n-\t   4 \"cris_extend_operator\"\n-\t   [(match_operand:QI 2 \"nonimmediate_operand\" \"r,Q>,m,!To\")])]))\n+\t(plusminus:HI\n+\t (match_operand:HI 1 \"register_operand\" \"0,0,0,r\")\n+\t (szext:HI (match_operand:QI 2 \"nonimmediate_operand\" \"r,Q>,m,!To\"))))\n    (clobber (reg:CC CRIS_CC0_REGNUM))]\n   \"GET_MODE_SIZE (GET_MODE (operands[0])) <= UNITS_PER_WORD\n-   && (operands[1] != frame_pointer_rtx || GET_CODE (operands[3]) != PLUS)\"\n+   && (operands[1] != frame_pointer_rtx || <plusminus:CODE> != PLUS)\"\n   \"@\n-   %x3%E4.%m4 %2,%0\n-   %x3%E4.%m4 %2,%0\n-   %x3%E4.%m4 %2,%0\n-   %x3%E4.%m4 %2,%1,%0\"\n+   <addsub><su>.b %2,%0\n+   <addsub><su>.b %2,%0\n+   <addsub><su>.b %2,%0\n+   <addsub><su>.b %2,%1,%0\"\n   [(set_attr \"slottable\" \"yes,yes,no,no\")\n    (set_attr \"cc\" \"clobber\")])\n \n-(define_insn \"*extop<mode>si<setnz>\"\n+;; FIXME: bound is actually also <setnzvc>, but is so rarely used in this\n+;; form that it's not worthwhile to make that distinction.\n+(define_insn \"*<addsubbo><su><nd><mode>si<setnz>\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r,r,r\")\n-\t(match_operator:SI\n-\t 3 \"cris_operand_extend_operator\"\n-\t [(match_operand:SI 1 \"register_operand\" \"0,0,0,r\")\n-\t  (match_operator:SI\n-\t   4 \"cris_extend_operator\"\n-\t   [(match_operand:BW 2 \"nonimmediate_operand\" \"r,Q>,m,!To\")])]))\n-   (clobber (reg:CC CRIS_CC0_REGNUM))]\n-  \"(GET_CODE (operands[3]) != UMIN || GET_CODE (operands[4]) == ZERO_EXTEND)\n-   && GET_MODE_SIZE (GET_MODE (operands[0])) <= UNITS_PER_WORD\n-   && (operands[1] != frame_pointer_rtx || GET_CODE (operands[3]) != PLUS)\"\n+\t(plusminusumin:SI\n+\t (match_operand:SI 1 \"register_operand\" \"0,0,0,r\")\n+\t (szext:SI (match_operand:BW 2 \"nonimmediate_operand\" \"r,Q>,m,!To\"))))\n+   (clobber (reg:CC CRIS_CC0_REGNUM))]\n+  \"(<plusminusumin:CODE> != UMIN || <szext:CODE> == ZERO_EXTEND)\n+   && (operands[1] != frame_pointer_rtx || <plusminusumin:CODE> != PLUS)\"\n   \"@\n-   %x3%E4<m> %2,%0\n-   %x3%E4<m> %2,%0\n-   %x3%E4<m> %2,%0\n-   %x3%E4<m> %2,%1,%0\"\n+   <addsubbo><su><nd><m> %2,%0\n+   <addsubbo><su><nd><m> %2,%0\n+   <addsubbo><su><nd><m> %2,%0\n+   <addsubbo><su><nd><m> %2,%1,%0\"\n   [(set_attr \"slottable\" \"yes,yes,no,no\")])\n \f\n ;; We may have swapped operands for add or bound.\n ;; For commutative operands, these are the canonical forms.\n \n ;; QImode to HImode\n \n-(define_insn \"*addxqihi_swap\"\n+(define_insn \"*add<su>qihi_swap\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r,r,r,r\")\n \t(plus:HI\n-\t (match_operator:HI\n-\t  3 \"cris_extend_operator\"\n-\t  [(match_operand:QI 2 \"nonimmediate_operand\" \"r,Q>,m,!To\")])\n+\t (szext:HI (match_operand:QI 2 \"nonimmediate_operand\" \"r,Q>,m,!To\"))\n \t (match_operand:HI 1 \"register_operand\" \"0,0,0,r\")))\n    (clobber (reg:CC CRIS_CC0_REGNUM))]\n   \"operands[1] != frame_pointer_rtx\"\n   \"@\n-   add%e3.b %2,%0\n-   add%e3.b %2,%0\n-   add%e3.b %2,%0\n-   add%e3.b %2,%1,%0\"\n+   add<su>.b %2,%0\n+   add<su>.b %2,%0\n+   add<su>.b %2,%0\n+   add<su>.b %2,%1,%0\"\n   [(set_attr \"slottable\" \"yes,yes,no,no\")\n    (set_attr \"cc\" \"clobber\")])\n \n-(define_insn \"*extop<mode>si<setnz>_swap\"\n+(define_insn \"*<addsubbo><su><nd><mode>si<setnz>_swap\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r,r,r\")\n-\t(match_operator:SI\n-\t 4 \"cris_plus_or_bound_operator\"\n-\t [(match_operator:SI\n-\t   3 \"cris_extend_operator\"\n-\t   [(match_operand:BW 2 \"nonimmediate_operand\" \"r,Q>,m,!To\")])\n-\t  (match_operand:SI 1 \"register_operand\" \"0,0,0,r\")]))\n-   (clobber (reg:CC CRIS_CC0_REGNUM))]\n-  \"(GET_CODE (operands[4]) != UMIN || GET_CODE (operands[3]) == ZERO_EXTEND)\n+\t(plusumin:SI\n+\t (szext:SI (match_operand:BW 2 \"nonimmediate_operand\" \"r,Q>,m,!To\"))\n+\t (match_operand:SI 1 \"register_operand\" \"0,0,0,r\")))\n+   (clobber (reg:CC CRIS_CC0_REGNUM))]\n+  \"(<plusumin:CODE> != UMIN || <szext:CODE> == ZERO_EXTEND)\n    && operands[1] != frame_pointer_rtx\"\n   \"@\n-   %x4%E3<m> %2,%0\n-   %x4%E3<m> %2,%0\n-   %x4%E3<m> %2,%0\n-   %x4%E3<m> %2,%1,%0\"\n+   <addsubbo><su><nd><m> %2,%0\n+   <addsubbo><su><nd><m> %2,%0\n+   <addsubbo><su><nd><m> %2,%0\n+   <addsubbo><su><nd><m> %2,%1,%0\"\n   [(set_attr \"slottable\" \"yes,yes,no,no\")])\n \f\n ;; This is the special case when we use what corresponds to the"}, {"sha": "6cc387fd7949a4b278394d42bf4b142051345aa2", "filename": "gcc/testsuite/gcc.target/cris/pr93372-39.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9596eccb9c64faa13750692b46dd0779aac0d57c/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-39.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9596eccb9c64faa13750692b46dd0779aac0d57c/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-39.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-39.c?ref=9596eccb9c64faa13750692b46dd0779aac0d57c", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-final { scan-assembler-not {\\tcmp|\\ttest|\\tmovu|\\tmovs} } } */\n+/* { dg-final { scan-assembler-times \"\\tbound.b\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\tbound.w\" 1 } } */\n+\n+unsigned int ub (unsigned int a, unsigned char *b, int *c)\n+{\n+  unsigned int d = a < *b ? a : *b;\n+  *c = d == 0;\n+  return d;\n+}\n+\n+unsigned int us (unsigned int a, unsigned short *b, int *c)\n+{\n+  unsigned int d = a < *b ? a : *b;\n+  *c = d == 0;\n+  return d;\n+}"}]}