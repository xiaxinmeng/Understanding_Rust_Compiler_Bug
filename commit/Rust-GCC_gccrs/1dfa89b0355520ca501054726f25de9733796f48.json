{"sha": "1dfa89b0355520ca501054726f25de9733796f48", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWRmYTg5YjAzNTU1MjBjYTUwMTA1NDcyNmYyNWRlOTczMzc5NmY0OA==", "commit": {"author": {"name": "Kwok Cheung Yeung", "email": "kcy@codesourcery.com", "date": "2020-06-25T11:40:16Z"}, "committer": {"name": "Kwok Cheung Yeung", "email": "kcy@codesourcery.com", "date": "2020-06-25T13:06:12Z"}, "message": "fortran: Apply if clause to all sub-constructs in combined OpenMP constructs\n\nThe unmodified 'if' clause should be applied to all the sub-constructs that\naccept an 'if' clause in a combined OpenMP construct, and not just to the\n'parallel' sub-construct.\n\n2020-06-25  Kwok Cheung Yeung  <kcy@codesourcery.com>\n\ngcc/fortran/\n\n\t* trans-openmp.c (gfc_split_omp_clauses): Add if clause\n\tto target and simd sub-constructs.\n\ngcc/testsuite/\n\n\t* gfortran.dg/gomp/combined-if.f90: New.\n\nReviewed-by: Jakub Jelinek <jakub@redhat.com>", "tree": {"sha": "47089ecdd09b8912077f847688deb360b81951d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/47089ecdd09b8912077f847688deb360b81951d7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1dfa89b0355520ca501054726f25de9733796f48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1dfa89b0355520ca501054726f25de9733796f48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1dfa89b0355520ca501054726f25de9733796f48", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1dfa89b0355520ca501054726f25de9733796f48/comments", "author": {"login": "k-yeung", "id": 16960193, "node_id": "MDQ6VXNlcjE2OTYwMTkz", "avatar_url": "https://avatars.githubusercontent.com/u/16960193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/k-yeung", "html_url": "https://github.com/k-yeung", "followers_url": "https://api.github.com/users/k-yeung/followers", "following_url": "https://api.github.com/users/k-yeung/following{/other_user}", "gists_url": "https://api.github.com/users/k-yeung/gists{/gist_id}", "starred_url": "https://api.github.com/users/k-yeung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/k-yeung/subscriptions", "organizations_url": "https://api.github.com/users/k-yeung/orgs", "repos_url": "https://api.github.com/users/k-yeung/repos", "events_url": "https://api.github.com/users/k-yeung/events{/privacy}", "received_events_url": "https://api.github.com/users/k-yeung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "k-yeung", "id": 16960193, "node_id": "MDQ6VXNlcjE2OTYwMTkz", "avatar_url": "https://avatars.githubusercontent.com/u/16960193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/k-yeung", "html_url": "https://github.com/k-yeung", "followers_url": "https://api.github.com/users/k-yeung/followers", "following_url": "https://api.github.com/users/k-yeung/following{/other_user}", "gists_url": "https://api.github.com/users/k-yeung/gists{/gist_id}", "starred_url": "https://api.github.com/users/k-yeung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/k-yeung/subscriptions", "organizations_url": "https://api.github.com/users/k-yeung/orgs", "repos_url": "https://api.github.com/users/k-yeung/repos", "events_url": "https://api.github.com/users/k-yeung/events{/privacy}", "received_events_url": "https://api.github.com/users/k-yeung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2adb79eac663874593a28387db593fb4bb2995f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2adb79eac663874593a28387db593fb4bb2995f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2adb79eac663874593a28387db593fb4bb2995f"}], "stats": {"total": 115, "additions": 114, "deletions": 1}, "files": [{"sha": "67b709479ca9ae2221ba6058e6eee5e70d08256a", "filename": "gcc/fortran/trans-openmp.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dfa89b0355520ca501054726f25de9733796f48/gcc%2Ffortran%2Ftrans-openmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dfa89b0355520ca501054726f25de9733796f48/gcc%2Ffortran%2Ftrans-openmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-openmp.c?ref=1dfa89b0355520ca501054726f25de9733796f48", "patch": "@@ -4748,7 +4748,7 @@ gfc_split_omp_clauses (gfc_code *code,\n \t  clausesa[GFC_OMP_SPLIT_TARGET].if_exprs[OMP_IF_TARGET]\n \t    = code->ext.omp_clauses->if_exprs[OMP_IF_TARGET];\n \t  /* And this is copied to all.  */\n-\t  clausesa[GFC_OMP_SPLIT_PARALLEL].if_expr\n+\t  clausesa[GFC_OMP_SPLIT_TARGET].if_expr\n \t    = code->ext.omp_clauses->if_expr;\n \t}\n       if (mask & GFC_OMP_MASK_TEAMS)\n@@ -4832,6 +4832,9 @@ gfc_split_omp_clauses (gfc_code *code,\n \t  /* Duplicate collapse.  */\n \t  clausesa[GFC_OMP_SPLIT_SIMD].collapse\n \t    = code->ext.omp_clauses->collapse;\n+\t  /* And this is copied to all.  */\n+\t  clausesa[GFC_OMP_SPLIT_SIMD].if_expr\n+\t    = code->ext.omp_clauses->if_expr;\n \t}\n       if (mask & GFC_OMP_MASK_TASKLOOP)\n \t{"}, {"sha": "383086ca97ba7303afb21997facd56482175b553", "filename": "gcc/testsuite/gfortran.dg/gomp/combined-if.f90", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dfa89b0355520ca501054726f25de9733796f48/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fcombined-if.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dfa89b0355520ca501054726f25de9733796f48/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fcombined-if.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fcombined-if.f90?ref=1dfa89b0355520ca501054726f25de9733796f48", "patch": "@@ -0,0 +1,110 @@\n+! { dg-do compile }\n+! { dg-additional-options \"-fdump-tree-omplower\" }\n+\n+module combined_if\n+  implicit none\n+\n+  integer, parameter :: N = 100\n+  integer, parameter :: LIMIT = 60\n+  integer :: i, j\n+  integer, dimension(N) :: a = (/ (i, i = 1,N) /)\n+contains\n+  subroutine test_parallel_loop_simd\n+    do j = 1, N\n+      !$omp parallel do simd if(j .lt. LIMIT)\n+      do i = 1, N\n+        a(i) = a(i) + 1\n+      end do\n+    end do\n+  end subroutine\n+\n+  ! TODO: This currently fails with an internal compiler error\n+  ! (PR 95869)\n+  !subroutine test_target_parallel\n+  !  do j = 1, N\n+  !    !$omp target parallel if(j .lt. LIMIT) map(tofrom: a(1:N))\n+  !    do i = 1, N\n+  !      a(i) = a(i) + 1\n+  !    end do\n+  !    !$omp end target parallel\n+  !   end do\n+  !end subroutine\n+\n+  subroutine test_target_parallel_loop\n+    do j = 1, N\n+      !$omp target parallel do if(j .lt. LIMIT) map(tofrom: a(1:N))\n+      do i = 1, N\n+        a(i) = a(i) + 1\n+      end do\n+    end do\n+  end subroutine\n+\n+  subroutine test_target_parallel_loop_simd\n+    do j = 1, N\n+      !$omp target parallel do simd if(j .lt. LIMIT) map(tofrom: a(1:N))\n+      do i = 1, N\n+        a(i) = a(i) + 1\n+      end do\n+    end do\n+  end subroutine\n+\n+  subroutine test_target_simd\n+    do j = 1, N\n+      !$omp target simd if(j .lt. LIMIT) map(tofrom: a(1:N))\n+      do i = 1, N\n+        a(i) = a(i) + 1\n+      end do\n+    end do\n+  end subroutine\n+\n+  subroutine test_target_teams\n+    do j = 1, N\n+      !$omp target teams if(j .lt. LIMIT) map(tofrom: a(1:N))\n+      do i = 1, N\n+        a(i) = a(i) + 1\n+      end do\n+      !$omp end target teams\n+    end do\n+  end subroutine\n+\n+  subroutine test_target_teams_distribute\n+    do j = 1, N\n+      !$omp target teams distribute if(j .lt. LIMIT) map(tofrom: a(1:N))\n+      do i = 1, N\n+        a(i) = a(i) + 1\n+      end do\n+    end do\n+  end subroutine\n+\n+  subroutine test_target_teams_distibute_simd\n+    do j = 1, N\n+      !$omp target teams distribute simd if(j .lt. LIMIT) map(tofrom: a(1:N))\n+      do i = 1, N\n+        a(i) = a(i) + 1\n+      end do\n+    end do\n+  end subroutine\n+\n+  subroutine test_target_teams_distribute_parallel_loop\n+    do j = 1, N\n+      !$omp target teams distribute parallel do if(j .lt. LIMIT) map(tofrom: a(1:N))\n+      do i = 1, N\n+        a(i) = a(i) + 1\n+      end do\n+    end do\n+  end subroutine\n+    \n+  subroutine test_target_teams_distribute_parallel_loop_simd\n+    do j = 1, N\n+      !$omp target teams distribute parallel do simd if(j .lt. LIMIT) map(tofrom: a(1:N))\n+      do i = 1, N\n+        a(i) = a(i) + 1\n+      end do\n+    end do\n+  end subroutine\n+\n+end module\n+\n+! { dg-final { scan-tree-dump-times \"(?n)#pragma omp target.* if\\\\(\" 8 \"omplower\" } }\n+! { dg-final { scan-tree-dump-times \"(?n)#pragma omp simd.* if\\\\(\" 7 \"omplower\" } }\n+! { dg-final { scan-tree-dump-times \"(?n)#pragma omp parallel.* if\\\\(\" 5 \"omplower\" } }"}]}