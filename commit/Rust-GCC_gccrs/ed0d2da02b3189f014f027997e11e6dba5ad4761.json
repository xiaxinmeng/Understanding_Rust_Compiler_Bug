{"sha": "ed0d2da02b3189f014f027997e11e6dba5ad4761", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWQwZDJkYTAyYjMxODlmMDE0ZjAyNzk5N2UxMWU2ZGJhNWFkNDc2MQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2011-10-02T10:41:24Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2011-10-02T10:41:24Z"}, "message": "re PR lto/47247 (Linker plugin specification makes it difficult to handle COMDATs)\n\n\tPR lto/47247\n\t* lto-plugin.c (get_symbols_v2): New variable.\n\t(write_resolution): Use V2 API when available.\n\t(onload): Handle LDPT_GET_SYMBOLS_V2.\n\n\t* lto-symtab.c (lto_symtab_resolve_symbols): Do not resolve\n\twhen resolution is already availbale from plugin.\n\t(lto_symtab_merge_decls_1): Handle LDPR_PREVAILING_DEF_IRONLY_EXP.\n\t* cgraph.c (ld_plugin_symbol_resolution): Add prevailing_def_ironly_exp.\n\t* lto-cgraph.c (LDPR_NUM_KNOWN): Update.\n\t* ipa.c (varpool_externally_visible_p): IRONLY variables are never\n\texternally visible.\n\t* varasm.c (resolution_to_local_definition_p): Add\n\tLDPR_PREVAILING_DEF_IRONLY_EXP.\n\t(resolution_local_p): Likewise.\n\n\t* common.c (lto_resolution_str): Add new resolution.\n\t* common.h (lto_resolution_str): Likewise.\n\nFrom-SVN: r179424", "tree": {"sha": "05d172b704e7c63048f3ef9b5fd618f3b89ee016", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/05d172b704e7c63048f3ef9b5fd618f3b89ee016"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed0d2da02b3189f014f027997e11e6dba5ad4761", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed0d2da02b3189f014f027997e11e6dba5ad4761", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed0d2da02b3189f014f027997e11e6dba5ad4761", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed0d2da02b3189f014f027997e11e6dba5ad4761/comments", "author": null, "committer": null, "parents": [{"sha": "96d7b15ff3ded45c424b1a240a7db64d3ae975e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96d7b15ff3ded45c424b1a240a7db64d3ae975e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96d7b15ff3ded45c424b1a240a7db64d3ae975e3"}], "stats": {"total": 74, "additions": 60, "deletions": 14}, "files": [{"sha": "5373a31e291f65f41fea0bd325305e557baf659a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed0d2da02b3189f014f027997e11e6dba5ad4761/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed0d2da02b3189f014f027997e11e6dba5ad4761/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ed0d2da02b3189f014f027997e11e6dba5ad4761", "patch": "@@ -1,3 +1,17 @@\n+2011-10-02  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR lto/47247\n+\t* lto-symtab.c (lto_symtab_resolve_symbols): Do not resolve\n+\twhen resolution is already availbale from plugin.\n+\t(lto_symtab_merge_decls_1): Handle LDPR_PREVAILING_DEF_IRONLY_EXP.\n+\t* cgraph.c (ld_plugin_symbol_resolution): Add prevailing_def_ironly_exp.\n+\t* lto-cgraph.c (LDPR_NUM_KNOWN): Update.\n+\t* ipa.c (varpool_externally_visible_p): IRONLY variables are never\n+\texternally visible.\n+\t* varasm.c (resolution_to_local_definition_p): Add\n+\tLDPR_PREVAILING_DEF_IRONLY_EXP.\n+\t(resolution_local_p): Likewise.\n+\n 2011-10-01  David S. Miller  <davem@davemloft.net>\n \n \t* config/sparc/sparc.opt (VIS3): New option."}, {"sha": "84d6bd5198ab1e77fb9aa4b18c5ccb9a5cdb1e9b", "filename": "gcc/cgraph.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed0d2da02b3189f014f027997e11e6dba5ad4761/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed0d2da02b3189f014f027997e11e6dba5ad4761/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=ed0d2da02b3189f014f027997e11e6dba5ad4761", "patch": "@@ -110,7 +110,8 @@ const char * const ld_plugin_symbol_resolution_names[]=\n   \"preempted_ir\",\n   \"resolved_ir\",\n   \"resolved_exec\",\n-  \"resolved_dyn\"\n+  \"resolved_dyn\",\n+  \"prevailing_def_ironly_exp\"\n };\n \n static void cgraph_node_remove_callers (struct cgraph_node *node);"}, {"sha": "a8c4a358e04a48ea01ef040f0aa3f38d97910419", "filename": "gcc/ipa.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed0d2da02b3189f014f027997e11e6dba5ad4761/gcc%2Fipa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed0d2da02b3189f014f027997e11e6dba5ad4761/gcc%2Fipa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa.c?ref=ed0d2da02b3189f014f027997e11e6dba5ad4761", "patch": "@@ -685,6 +685,8 @@ varpool_externally_visible_p (struct varpool_node *vnode, bool aliased)\n      This is needed for i.e. references from asm statements.   */\n   if (varpool_used_from_object_file_p (vnode))\n     return true;\n+  if (vnode->resolution == LDPR_PREVAILING_DEF_IRONLY)\n+    return false;\n \n   /* As a special case, the COMDAT virutal tables can be unshared.\n      In LTO mode turn vtables into static variables.  The variable is readonly,"}, {"sha": "9254b8f90140b47aabef92ffec9522166d19fa69", "filename": "gcc/lto-cgraph.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed0d2da02b3189f014f027997e11e6dba5ad4761/gcc%2Flto-cgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed0d2da02b3189f014f027997e11e6dba5ad4761/gcc%2Flto-cgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-cgraph.c?ref=ed0d2da02b3189f014f027997e11e6dba5ad4761", "patch": "@@ -52,7 +52,7 @@ static void output_cgraph_opt_summary (cgraph_node_set set);\n static void input_cgraph_opt_summary (VEC (cgraph_node_ptr, heap) * nodes);\n \n /* Number of LDPR values known to GCC.  */\n-#define LDPR_NUM_KNOWN (LDPR_RESOLVED_DYN + 1)\n+#define LDPR_NUM_KNOWN (LDPR_PREVAILING_DEF_IRONLY_EXP + 1)\n \n /* Cgraph streaming is organized as set of record whose type\n    is indicated by a tag.  */"}, {"sha": "68c6231760e7d0be7f8ef1f69ef383253fe7b060", "filename": "gcc/lto-symtab.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed0d2da02b3189f014f027997e11e6dba5ad4761/gcc%2Flto-symtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed0d2da02b3189f014f027997e11e6dba5ad4761/gcc%2Flto-symtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-symtab.c?ref=ed0d2da02b3189f014f027997e11e6dba5ad4761", "patch": "@@ -441,12 +441,14 @@ lto_symtab_resolve_symbols (void **slot)\n \te->node = cgraph_get_node (e->decl);\n       else if (TREE_CODE (e->decl) == VAR_DECL)\n \te->vnode = varpool_get_node (e->decl);\n+      if (e->resolution == LDPR_PREVAILING_DEF_IRONLY\n+\t  || e->resolution == LDPR_PREVAILING_DEF_IRONLY_EXP\n+\t  || e->resolution == LDPR_PREVAILING_DEF)\n+\tprevailing = e;\n     }\n \n-  e = (lto_symtab_entry_t) *slot;\n-\n   /* If the chain is already resolved there is nothing else to do.  */\n-  if (e->resolution != LDPR_UNKNOWN)\n+  if (prevailing)\n     return;\n \n   /* Find the single non-replaceable prevailing symbol and\n@@ -586,6 +588,7 @@ lto_symtab_merge_decls_1 (void **slot, void *data ATTRIBUTE_UNUSED)\n   for (prevailing = (lto_symtab_entry_t) *slot;\n        prevailing\n        && prevailing->resolution != LDPR_PREVAILING_DEF_IRONLY\n+       && prevailing->resolution != LDPR_PREVAILING_DEF_IRONLY_EXP\n        && prevailing->resolution != LDPR_PREVAILING_DEF;\n        prevailing = prevailing->next)\n     ;\n@@ -595,6 +598,7 @@ lto_symtab_merge_decls_1 (void **slot, void *data ATTRIBUTE_UNUSED)\n     for (e = prevailing->next; e; e = e->next)\n       {\n \tif (e->resolution == LDPR_PREVAILING_DEF_IRONLY\n+\t    || e->resolution == LDPR_PREVAILING_DEF_IRONLY_EXP\n \t    || e->resolution == LDPR_PREVAILING_DEF)\n \t  fatal_error (\"multiple prevailing defs for %qE\",\n \t\t       DECL_NAME (prevailing->decl));\n@@ -685,9 +689,9 @@ lto_symtab_merge_decls_1 (void **slot, void *data ATTRIBUTE_UNUSED)\n      to handle UNKNOWN relocation well.\n \n      The problem with storing guessed decision is whether to use\n-     PREVAILING_DEF or PREVAILING_DEF_IRONLY.  First one would disable\n-     some whole program optimizations, while ther second would imply\n-     to many whole program assumptions.  */\n+     PREVAILING_DEF, PREVAILING_DEF_IRONLY, PREVAILING_DEF_IRONLY_EXP.\n+     First one would disable some whole program optimizations, while\n+     ther second would imply to many whole program assumptions.  */\n   if (prevailing->node && !flag_ltrans && !prevailing->guessed)\n     prevailing->node->resolution = prevailing->resolution;\n   else if (prevailing->vnode && !flag_ltrans && !prevailing->guessed)"}, {"sha": "d3d7ffd484ef09f8ddbda8e3bfd95a2fe0069667", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed0d2da02b3189f014f027997e11e6dba5ad4761/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed0d2da02b3189f014f027997e11e6dba5ad4761/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=ed0d2da02b3189f014f027997e11e6dba5ad4761", "patch": "@@ -1,3 +1,9 @@\n+2011-10-02  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR lto/47247\n+\t* common.c (lto_resolution_str): Add new resolution.\n+\t* common.h (lto_resolution_str): Likewise.\n+\n 2011-09-30  H.J. Lu  <hongjiu.lu@intel.com>\n \t    Andi Kleen  <ak@linux.intel.com>\n "}, {"sha": "a23fdbb8434bb1e62455864c14e39ee6f2ade1a8", "filename": "gcc/lto/common.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed0d2da02b3189f014f027997e11e6dba5ad4761/gcc%2Flto%2Fcommon.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed0d2da02b3189f014f027997e11e6dba5ad4761/gcc%2Flto%2Fcommon.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Fcommon.c?ref=ed0d2da02b3189f014f027997e11e6dba5ad4761", "patch": "@@ -31,7 +31,7 @@ const char *lto_visibility_str[4] __attribute__ ((visibility (\"hidden\"))) =\n  \"INTERNAL\", \"HIDDEN\"\n };\n \n-const char *lto_resolution_str[9] __attribute__ ((visibility (\"hidden\"))) =\n+const char *lto_resolution_str[10] __attribute__ ((visibility (\"hidden\"))) =\n {\n   \"UNKNOWN\",\n   \"UNDEF\",\n@@ -41,6 +41,7 @@ const char *lto_resolution_str[9] __attribute__ ((visibility (\"hidden\"))) =\n   \"PREEMPTED_IR\",\n   \"RESOLVED_IR\",\n   \"RESOLVED_EXEC\",\n-  \"RESOLVED_DYN\"\n+  \"RESOLVED_DYN\",\n+  \"PREVAILING_DEF_IRONLY_EXP\",\n };\n "}, {"sha": "6f9a6928916ce673e454a1295303c05baa1877f8", "filename": "gcc/lto/common.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed0d2da02b3189f014f027997e11e6dba5ad4761/gcc%2Flto%2Fcommon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed0d2da02b3189f014f027997e11e6dba5ad4761/gcc%2Flto%2Fcommon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Fcommon.h?ref=ed0d2da02b3189f014f027997e11e6dba5ad4761", "patch": "@@ -20,7 +20,7 @@ along with GCC; see the file COPYING3.  If not see\n \n \n \n-static const char *lto_resolution_str[9] =\n+static const char *lto_resolution_str[10] =\n {\n   \"UNKNOWN\",\n   \"UNDEF\",\n@@ -30,5 +30,6 @@ static const char *lto_resolution_str[9] =\n   \"PREEMPTED_IR\",\n   \"RESOLVED_IR\",\n   \"RESOLVED_EXEC\",\n-  \"RESOLVED_DYN\"\n+  \"RESOLVED_DYN\",\n+  \"PREVAILING_DEF_IRONLY_EXP\",\n };"}, {"sha": "9b4dfad5cbb35dc162f315ee9954b48e37fb957e", "filename": "gcc/varasm.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed0d2da02b3189f014f027997e11e6dba5ad4761/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed0d2da02b3189f014f027997e11e6dba5ad4761/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=ed0d2da02b3189f014f027997e11e6dba5ad4761", "patch": "@@ -6683,6 +6683,7 @@ static bool\n resolution_to_local_definition_p (enum ld_plugin_symbol_resolution resolution)\n {\n   return (resolution == LDPR_PREVAILING_DEF\n+\t  || resolution == LDPR_PREVAILING_DEF_IRONLY_EXP\n \t  || resolution == LDPR_PREVAILING_DEF_IRONLY);\n }\n \n@@ -6694,6 +6695,7 @@ resolution_local_p (enum ld_plugin_symbol_resolution resolution)\n {\n   return (resolution == LDPR_PREVAILING_DEF\n \t  || resolution == LDPR_PREVAILING_DEF_IRONLY\n+\t  || resolution == LDPR_PREVAILING_DEF_IRONLY_EXP\n \t  || resolution == LDPR_PREEMPTED_REG\n \t  || resolution == LDPR_PREEMPTED_IR\n \t  || resolution == LDPR_RESOLVED_IR"}, {"sha": "bf149e4b880d971e223b9093597c6f24d72ffa1b", "filename": "lto-plugin/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed0d2da02b3189f014f027997e11e6dba5ad4761/lto-plugin%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed0d2da02b3189f014f027997e11e6dba5ad4761/lto-plugin%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/lto-plugin%2FChangeLog?ref=ed0d2da02b3189f014f027997e11e6dba5ad4761", "patch": "@@ -1,3 +1,10 @@\n+2011-10-02  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR lto/47247\n+\t* lto-plugin.c (get_symbols_v2): New variable.\n+\t(write_resolution): Use V2 API when available.\n+\t(onload): Handle LDPT_GET_SYMBOLS_V2.\n+\n 2011-09-30  H.J. Lu  <hongjiu.lu@intel.com>\n \t    Andi Kleen  <ak@linux.intel.com>\n "}, {"sha": "d7a78136827866038d69e9cb154dec7202d87ee3", "filename": "lto-plugin/lto-plugin.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed0d2da02b3189f014f027997e11e6dba5ad4761/lto-plugin%2Flto-plugin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed0d2da02b3189f014f027997e11e6dba5ad4761/lto-plugin%2Flto-plugin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/lto-plugin%2Flto-plugin.c?ref=ed0d2da02b3189f014f027997e11e6dba5ad4761", "patch": "@@ -130,7 +130,7 @@ enum symbol_style\n static char *arguments_file_name;\n static ld_plugin_register_claim_file register_claim_file;\n static ld_plugin_register_all_symbols_read register_all_symbols_read;\n-static ld_plugin_get_symbols get_symbols;\n+static ld_plugin_get_symbols get_symbols, get_symbols_v2;\n static ld_plugin_register_cleanup register_cleanup;\n static ld_plugin_add_input_file add_input_file;\n static ld_plugin_add_input_library add_input_library;\n@@ -443,7 +443,12 @@ write_resolution (void)\n       struct plugin_symtab *symtab = &info->symtab;\n       struct ld_plugin_symbol *syms = symtab->syms;\n \n-      get_symbols (info->handle, symtab->nsyms, syms);\n+      /* Version 2 of API supports IRONLY_EXP resolution that is\n+         accepted by GCC-4.7 and newer.  */\n+      if (get_symbols_v2)\n+        get_symbols_v2 (info->handle, symtab->nsyms, syms);\n+      else\n+        get_symbols (info->handle, symtab->nsyms, syms);\n \n       finish_conflict_resolution (symtab, &info->conflicts);\n \n@@ -988,6 +993,9 @@ onload (struct ld_plugin_tv *tv)\n \tcase LDPT_REGISTER_ALL_SYMBOLS_READ_HOOK:\n \t  register_all_symbols_read = p->tv_u.tv_register_all_symbols_read;\n \t  break;\n+\tcase LDPT_GET_SYMBOLS_V2:\n+\t  get_symbols_v2 = p->tv_u.tv_get_symbols;\n+\t  break;\n \tcase LDPT_GET_SYMBOLS:\n \t  get_symbols = p->tv_u.tv_get_symbols;\n \t  break;"}]}