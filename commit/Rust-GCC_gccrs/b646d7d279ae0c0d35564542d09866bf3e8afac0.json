{"sha": "b646d7d279ae0c0d35564542d09866bf3e8afac0", "node_id": "C_kwDOANBUbNoAKGI2NDZkN2QyNzlhZTBjMGQzNTU2NDU0MmQwOTg2NmJmM2U4YWZhYzA", "commit": {"author": {"name": "Vineet Gupta", "email": "vineetg@rivosinc.com", "date": "2022-05-23T18:12:09Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2022-05-24T07:55:17Z"}, "message": "RISC-V: Inhibit FP <--> int register moves via tune param\n\nUnder extreme register pressure, compiler can use FP <--> int\nmoves as a cheap alternate to spilling to memory.\nThis was seen with SPEC2017 FP benchmark 507.cactu:\nML_BSSN_Advect.cc:ML_BSSN_Advect_Body()\n\n|\tfmv.d.x\tfa5,s9\t# PDupwindNthSymm2Xt1, PDupwindNthSymm2Xt1\n| .LVL325:\n|\tld\ts9,184(sp)\t\t# _12469, %sfp\n| ...\n| .LVL339:\n|\tfmv.x.d\ts4,fa5\t# PDupwindNthSymm2Xt1, PDupwindNthSymm2Xt1\n|\n\nThe FMV instructions could be costlier (than stack spill) on certain\nmicro-architectures, thus this needs to be a per-cpu tunable\n(default being to inhibit on all existing RV cpus).\n\nTestsuite run with new test reports 10 failures without the fix\ncorresponding to the build variations of pr105666.c\n\n| \t\t=== gcc Summary ===\n|\n| # of expected passes\t\t123318   (+10)\n| # of unexpected failures\t34       (-10)\n| # of unexpected successes\t4\n| # of expected failures\t780\n| # of unresolved testcases\t4\n| # of unsupported tests\t2796\n\ngcc/ChangeLog:\n\n\t* config/riscv/riscv.cc: (struct riscv_tune_param): Add\n\t  fmv_cost.\n\t(rocket_tune_info): Add default fmv_cost 8.\n\t(sifive_7_tune_info): Ditto.\n\t(thead_c906_tune_info): Ditto.\n\t(optimize_size_tune_info): Ditto.\n\t(riscv_register_move_cost): Use fmv_cost for int<->fp moves.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/riscv/pr105666.c: New test.\n\nSigned-off-by: Vineet Gupta <vineetg@rivosinc.com>", "tree": {"sha": "c60dfdaef8bc6ee7ccfaa38a818f02d88efa97e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c60dfdaef8bc6ee7ccfaa38a818f02d88efa97e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b646d7d279ae0c0d35564542d09866bf3e8afac0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b646d7d279ae0c0d35564542d09866bf3e8afac0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b646d7d279ae0c0d35564542d09866bf3e8afac0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b646d7d279ae0c0d35564542d09866bf3e8afac0/comments", "author": null, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b43836914bdc2a37563cf31359b2c4803bfe4374", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b43836914bdc2a37563cf31359b2c4803bfe4374", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b43836914bdc2a37563cf31359b2c4803bfe4374"}], "stats": {"total": 64, "additions": 64, "deletions": 0}, "files": [{"sha": "f83dc796d88438a1570abc50af703f3554fea2fc", "filename": "gcc/config/riscv/riscv.cc", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b646d7d279ae0c0d35564542d09866bf3e8afac0/gcc%2Fconfig%2Friscv%2Friscv.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b646d7d279ae0c0d35564542d09866bf3e8afac0/gcc%2Fconfig%2Friscv%2Friscv.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.cc?ref=b646d7d279ae0c0d35564542d09866bf3e8afac0", "patch": "@@ -220,6 +220,7 @@ struct riscv_tune_param\n   unsigned short issue_rate;\n   unsigned short branch_cost;\n   unsigned short memory_cost;\n+  unsigned short fmv_cost;\n   bool slow_unaligned_access;\n };\n \n@@ -285,6 +286,7 @@ static const struct riscv_tune_param rocket_tune_info = {\n   1,\t\t\t\t\t\t/* issue_rate */\n   3,\t\t\t\t\t\t/* branch_cost */\n   5,\t\t\t\t\t\t/* memory_cost */\n+  8,\t\t\t\t\t\t/* fmv_cost */\n   true,\t\t\t\t\t\t/* slow_unaligned_access */\n };\n \n@@ -298,6 +300,7 @@ static const struct riscv_tune_param sifive_7_tune_info = {\n   2,\t\t\t\t\t\t/* issue_rate */\n   4,\t\t\t\t\t\t/* branch_cost */\n   3,\t\t\t\t\t\t/* memory_cost */\n+  8,\t\t\t\t\t\t/* fmv_cost */\n   true,\t\t\t\t\t\t/* slow_unaligned_access */\n };\n \n@@ -311,6 +314,7 @@ static const struct riscv_tune_param thead_c906_tune_info = {\n   1,            /* issue_rate */\n   3,            /* branch_cost */\n   5,            /* memory_cost */\n+  8,\t\t/* fmv_cost */\n   false,            /* slow_unaligned_access */\n };\n \n@@ -324,6 +328,7 @@ static const struct riscv_tune_param optimize_size_tune_info = {\n   1,\t\t\t\t\t\t/* issue_rate */\n   1,\t\t\t\t\t\t/* branch_cost */\n   2,\t\t\t\t\t\t/* memory_cost */\n+  8,\t\t\t\t\t\t/* fmv_cost */\n   false,\t\t\t\t\t/* slow_unaligned_access */\n };\n \n@@ -4743,6 +4748,10 @@ static int\n riscv_register_move_cost (machine_mode mode,\n \t\t\t  reg_class_t from, reg_class_t to)\n {\n+  if ((from == FP_REGS && to == GR_REGS) ||\n+      (from == GR_REGS && to == FP_REGS))\n+    return tune_param->fmv_cost;\n+\n   return riscv_secondary_memory_needed (mode, from, to) ? 8 : 2;\n }\n "}, {"sha": "904f3bc0763f6b18a01f337b14dfa41c7acfa707", "filename": "gcc/testsuite/gcc.target/riscv/pr105666.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b646d7d279ae0c0d35564542d09866bf3e8afac0/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fpr105666.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b646d7d279ae0c0d35564542d09866bf3e8afac0/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fpr105666.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fpr105666.c?ref=b646d7d279ae0c0d35564542d09866bf3e8afac0", "patch": "@@ -0,0 +1,55 @@\n+/* Shamelessly plugged off gcc/testsuite/gcc.c-torture/execute/pr28982a.c.  \n+\n+   The idea is to induce high register pressure for both int/fp registers\n+   so that they spill. By default FMV instructions would be used to stash\n+   int reg to a fp reg (and vice-versa) but that could be costlier than\n+   spilling to stack.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64g -ffast-math\" } */\n+\n+#define NITER 4\n+#define NVARS 20\n+#define MULTI(X) \\\n+  X( 0), X( 1), X( 2), X( 3), X( 4), X( 5), X( 6), X( 7), X( 8), X( 9), \\\n+  X(10), X(11), X(12), X(13), X(14), X(15), X(16), X(17), X(18), X(19)\n+\n+#define DECLAREI(INDEX) inc##INDEX = incs[INDEX]\n+#define DECLAREF(INDEX) *ptr##INDEX = ptrs[INDEX], result##INDEX = 5\n+#define LOOP(INDEX) result##INDEX += result##INDEX * (*ptr##INDEX), ptr##INDEX += inc##INDEX\n+#define COPYOUT(INDEX) results[INDEX] = result##INDEX\n+\n+double *ptrs[NVARS];\n+double results[NVARS];\n+int incs[NVARS];\n+\n+void __attribute__((noinline))\n+foo (int n)\n+{\n+  int MULTI (DECLAREI);\n+  double MULTI (DECLAREF);\n+  while (n--)\n+    MULTI (LOOP);\n+  MULTI (COPYOUT);\n+}\n+\n+double input[NITER * NVARS];\n+\n+int\n+main (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < NVARS; i++)\n+    ptrs[i] = input + i, incs[i] = i;\n+  for (i = 0; i < NITER * NVARS; i++)\n+    input[i] = i;\n+  foo (NITER);\n+  for (i = 0; i < NVARS; i++)\n+    if (results[i] != i * NITER * (NITER + 1) / 2)\n+      return 1;\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler-not \"\\tfmv\\\\.d\\\\.x\\t\" } } */\n+/* { dg-final { scan-assembler-not \"\\tfmv\\\\.x\\\\.d\\t\" } } */"}]}