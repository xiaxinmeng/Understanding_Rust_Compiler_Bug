{"sha": "98c3e05ded26e33f52013b35696fd2ff69243e93", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OThjM2UwNWRlZDI2ZTMzZjUyMDEzYjM1Njk2ZmQyZmY2OTI0M2U5Mw==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1999-09-01T14:44:56Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1999-09-01T14:44:56Z"}, "message": "Avoids false positives with -Wcast-qual:\n\n\t* obstack.h (obstack_grow, obstack_grow0): Move (char*) casts\n\tin calls to `_obstack_memcpy' from here ...\n\n\t(_obstack_memcpy): ... to here, except in the __STDC__ case which\n\tdoesn't need it.\n\nFrom-SVN: r29028", "tree": {"sha": "857be0ae58c1bb2a02afe0e85d7b344ae44997dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/857be0ae58c1bb2a02afe0e85d7b344ae44997dc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/98c3e05ded26e33f52013b35696fd2ff69243e93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98c3e05ded26e33f52013b35696fd2ff69243e93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98c3e05ded26e33f52013b35696fd2ff69243e93", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98c3e05ded26e33f52013b35696fd2ff69243e93/comments", "author": null, "committer": null, "parents": [{"sha": "05d106753da1441283c516251fa6b1c8aa559892", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05d106753da1441283c516251fa6b1c8aa559892", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05d106753da1441283c516251fa6b1c8aa559892"}], "stats": {"total": 26, "additions": 19, "deletions": 7}, "files": [{"sha": "41af292ebbf388a5982f2b6a23b944d28079a4ac", "filename": "include/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98c3e05ded26e33f52013b35696fd2ff69243e93/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98c3e05ded26e33f52013b35696fd2ff69243e93/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=98c3e05ded26e33f52013b35696fd2ff69243e93", "patch": "@@ -1,3 +1,11 @@\n+1999-09-01  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* obstack.h (obstack_grow, obstack_grow0): Move (char*) casts\n+\tin calls to `_obstack_memcpy' from here ...\n+\n+\t(_obstack_memcpy): ... to here, except in the __STDC__ case which\n+\tdoesn't need it.\n+\n 1999-08-30  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* libiberty.h (getpwd): Prototype."}, {"sha": "a20ab55967a2aeba81039175b46ae304eb8ea214", "filename": "include/obstack.h", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98c3e05ded26e33f52013b35696fd2ff69243e93/include%2Fobstack.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98c3e05ded26e33f52013b35696fd2ff69243e93/include%2Fobstack.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Fobstack.h?ref=98c3e05ded26e33f52013b35696fd2ff69243e93", "patch": "@@ -143,12 +143,16 @@ extern \"C\" {\n \n #if defined _LIBC || defined HAVE_STRING_H\n # include <string.h>\n-# define _obstack_memcpy(To, From, N) memcpy ((To), (From), (N))\n+# if defined __STDC__ && __STDC__\n+#  define _obstack_memcpy(To, From, N) memcpy ((To), (From), (N))\n+# else\n+#  define _obstack_memcpy(To, From, N) memcpy ((To), (char *)(From), (N))\n+# endif\n #else\n # ifdef memcpy\n-#  define _obstack_memcpy(To, From, N) memcpy ((To), (From), (N))\n+#  define _obstack_memcpy(To, From, N) memcpy ((To), (char *)(From), (N))\n # else\n-#  define _obstack_memcpy(To, From, N) bcopy ((From), (To), (N))\n+#  define _obstack_memcpy(To, From, N) bcopy ((char *)(From), (To), (N))\n # endif\n #endif\n \n@@ -385,7 +389,7 @@ __extension__\t\t\t\t\t\t\t\t\\\n    int __len = (length);\t\t\t\t\t\t\\\n    if (__o->next_free + __len > __o->chunk_limit)\t\t\t\\\n      _obstack_newchunk (__o, __len);\t\t\t\t\t\\\n-   _obstack_memcpy (__o->next_free, (char *) (where), __len);\t\t\\\n+   _obstack_memcpy (__o->next_free, (where), __len);\t\t\t\\\n    __o->next_free += __len;\t\t\t\t\t\t\\\n    (void) 0; })\n \n@@ -395,7 +399,7 @@ __extension__\t\t\t\t\t\t\t\t\\\n    int __len = (length);\t\t\t\t\t\t\\\n    if (__o->next_free + __len + 1 > __o->chunk_limit)\t\t\t\\\n      _obstack_newchunk (__o, __len + 1);\t\t\t\t\\\n-   _obstack_memcpy (__o->next_free, (char *) (where), __len);\t\t\\\n+   _obstack_memcpy (__o->next_free, (where), __len);\t\t\t\\\n    __o->next_free += __len;\t\t\t\t\t\t\\\n    *(__o->next_free)++ = 0;\t\t\t\t\t\t\\\n    (void) 0; })\n@@ -510,14 +514,14 @@ __extension__\t\t\t\t\t\t\t\t\\\n ( (h)->temp = (length),\t\t\t\t\t\t\t\\\n   (((h)->next_free + (h)->temp > (h)->chunk_limit)\t\t\t\\\n    ? (_obstack_newchunk ((h), (h)->temp), 0) : 0),\t\t\t\\\n-  _obstack_memcpy ((h)->next_free, (char *) (where), (h)->temp),\t\\\n+  _obstack_memcpy ((h)->next_free, (where), (h)->temp),\t\t\t\\\n   (h)->next_free += (h)->temp)\n \n # define obstack_grow0(h,where,length)\t\t\t\t\t\\\n ( (h)->temp = (length),\t\t\t\t\t\t\t\\\n   (((h)->next_free + (h)->temp + 1 > (h)->chunk_limit)\t\t\t\\\n    ? (_obstack_newchunk ((h), (h)->temp + 1), 0) : 0),\t\t\t\\\n-  _obstack_memcpy ((h)->next_free, (char *) (where), (h)->temp),\t\\\n+  _obstack_memcpy ((h)->next_free, (where), (h)->temp),\t\t\t\\\n   (h)->next_free += (h)->temp,\t\t\t\t\t\t\\\n   *((h)->next_free)++ = 0)\n "}]}