{"sha": "fede8efad0bfa82997fd1ff49f84eb493231ca23", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmVkZThlZmFkMGJmYTgyOTk3ZmQxZmY0OWY4NGViNDkzMjMxY2EyMw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2011-06-10T10:15:30Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2011-06-10T10:15:30Z"}, "message": "ipa-utils.c (searchc): Use cgraph_function_or_thunk_node.\n\n\n\t* ipa-utils.c (searchc): Use cgraph_function_or_thunk_node.\n\t* ipa-pure-const.c (analyze_function): Aliases don't need analysis.\n\t(self_recursive_p): Use cgraph_function_node.\n\t(propagate_pure_const): Likewise.\n\t(propagate_nothrow): Likewise.\n\t* ipa-reference.c (ipa_reference_get_not_read_global): Use\n\tcgraph_function_node.\n\t(propagate_bits): Likewise.\n\t(propagate): Likewise.\n\nFrom-SVN: r174895", "tree": {"sha": "48d43b22dfa25b1fd6a1b3335c96ecedb737ae09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/48d43b22dfa25b1fd6a1b3335c96ecedb737ae09"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fede8efad0bfa82997fd1ff49f84eb493231ca23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fede8efad0bfa82997fd1ff49f84eb493231ca23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fede8efad0bfa82997fd1ff49f84eb493231ca23", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fede8efad0bfa82997fd1ff49f84eb493231ca23/comments", "author": null, "committer": null, "parents": [{"sha": "0127c76f613c84e31efdc6b1c6d1634718b8f691", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0127c76f613c84e31efdc6b1c6d1634718b8f691", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0127c76f613c84e31efdc6b1c6d1634718b8f691"}], "stats": {"total": 64, "additions": 45, "deletions": 19}, "files": [{"sha": "43ec6bfa7bfe79a11ba2d48839faa31a2709f02c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fede8efad0bfa82997fd1ff49f84eb493231ca23/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fede8efad0bfa82997fd1ff49f84eb493231ca23/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fede8efad0bfa82997fd1ff49f84eb493231ca23", "patch": "@@ -1,3 +1,15 @@\n+2011-06-10  Jan Hubicka  <jh@suse.cz>\n+\n+\t* ipa-utils.c (searchc): Use cgraph_function_or_thunk_node.\n+\t* ipa-pure-const.c (analyze_function): Aliases don't need analysis.\n+\t(self_recursive_p): Use cgraph_function_node.\n+\t(propagate_pure_const): Likewise.\n+\t(propagate_nothrow): Likewise.\n+\t* ipa-reference.c (ipa_reference_get_not_read_global): Use\n+\tcgraph_function_node.\n+\t(propagate_bits): Likewise.\n+\t(propagate): Likewise.\n+\n 2011-06-10  Ramana Radhakrishnan  <ramana.radhakrishnan@linaro.org>\n \t    Richard Earnshaw  <rearnsha@arm.com>\n "}, {"sha": "b56e48ad6f053c0b5e08eb5734285dda05423097", "filename": "gcc/ipa-pure-const.c", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fede8efad0bfa82997fd1ff49f84eb493231ca23/gcc%2Fipa-pure-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fede8efad0bfa82997fd1ff49f84eb493231ca23/gcc%2Fipa-pure-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-pure-const.c?ref=fede8efad0bfa82997fd1ff49f84eb493231ca23", "patch": "@@ -735,7 +735,7 @@ analyze_function (struct cgraph_node *fn, bool ipa)\n \t\t    flags_from_decl_or_type (fn->decl),\n \t\t    cgraph_node_cannot_return (fn));\n \n-  if (fn->thunk.thunk_p)\n+  if (fn->thunk.thunk_p || fn->alias)\n     {\n       /* Thunk gets propagated through, so nothing interesting happens.  */\n       gcc_assert (ipa);\n@@ -1070,14 +1070,16 @@ ignore_edge (struct cgraph_edge *e)\n   return (!e->can_throw_external);\n }\n \n-/* Return true if NODE is self recursive function.  */\n+/* Return true if NODE is self recursive function.\n+   ??? self recursive and indirectly recursive funcions should\n+   be the same, so this function seems unnecesary.  */\n \n static bool\n self_recursive_p (struct cgraph_node *node)\n {\n   struct cgraph_edge *e;\n   for (e = node->callees; e; e = e->next_callee)\n-    if (e->callee == node)\n+    if (cgraph_function_node (e->callee, NULL) == node)\n       return true;\n   return false;\n }\n@@ -1167,7 +1169,8 @@ propagate_pure_const (void)\n \t  /* Now walk the edges and merge in callee properties.  */\n \t  for (e = w->callees; e; e = e->next_callee)\n \t    {\n-\t      struct cgraph_node *y = e->callee;\n+\t      enum availability avail;\n+\t      struct cgraph_node *y = cgraph_function_node (e->callee, &avail);\n \t      enum pure_const_state_e edge_state = IPA_CONST;\n \t      bool edge_looping = false;\n \n@@ -1178,7 +1181,7 @@ propagate_pure_const (void)\n \t\t\t   cgraph_node_name (e->callee),\n \t\t\t   e->callee->uid);\n \t\t}\n-\t      if (cgraph_function_body_availability (y) > AVAIL_OVERWRITABLE)\n+\t      if (avail > AVAIL_OVERWRITABLE)\n \t\t{\n \t\t  funct_state y_l = get_function_state (y);\n \t\t  if (dump_file && (dump_flags & TDF_DETAILS))\n@@ -1396,9 +1399,10 @@ propagate_nothrow (void)\n \n \t  for (e = w->callees; e; e = e->next_callee)\n \t    {\n-\t      struct cgraph_node *y = e->callee;\n+\t      enum availability avail;\n+\t      struct cgraph_node *y = cgraph_function_node (e->callee, &avail);\n \n-\t      if (cgraph_function_body_availability (y) > AVAIL_OVERWRITABLE)\n+\t      if (avail > AVAIL_OVERWRITABLE)\n \t\t{\n \t\t  funct_state y_l = get_function_state (y);\n "}, {"sha": "7ee52dacda1dccc11625a6c92f78f190fa075693", "filename": "gcc/ipa-reference.c", "status": "modified", "additions": 19, "deletions": 9, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fede8efad0bfa82997fd1ff49f84eb493231ca23/gcc%2Fipa-reference.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fede8efad0bfa82997fd1ff49f84eb493231ca23/gcc%2Fipa-reference.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-reference.c?ref=fede8efad0bfa82997fd1ff49f84eb493231ca23", "patch": "@@ -196,7 +196,7 @@ ipa_reference_get_not_read_global (struct cgraph_node *fn)\n {\n   ipa_reference_optimization_summary_t info;\n \n-  info = get_reference_optimization_summary (fn);\n+  info = get_reference_optimization_summary (cgraph_function_node (fn, NULL));\n   if (info)\n     return info->statics_not_read;\n   else if (flags_from_decl_or_type (fn->decl) & ECF_LEAF)\n@@ -301,16 +301,17 @@ propagate_bits (ipa_reference_global_vars_info_t x_global, struct cgraph_node *x\n   struct cgraph_edge *e;\n   for (e = x->callees; e; e = e->next_callee)\n     {\n-      struct cgraph_node *y = e->callee;\n       enum availability avail;\n+      struct cgraph_node *y = cgraph_function_node (e->callee, &avail);\n \n-      avail = cgraph_function_body_availability (e->callee);\n+      if (!y)\n+\tcontinue;\n       /* Only look into nodes we can propagate something.  */\n       if (avail > AVAIL_OVERWRITABLE\n \t  || (avail == AVAIL_OVERWRITABLE\n-\t      && (flags_from_decl_or_type (e->callee->decl) & ECF_LEAF)))\n+\t      && (flags_from_decl_or_type (y->decl) & ECF_LEAF)))\n \t{\n-\t  int flags = flags_from_decl_or_type (e->callee->decl);\n+\t  int flags = flags_from_decl_or_type (y->decl);\n \t  if (get_reference_vars_info (y))\n \t    {\n \t      ipa_reference_vars_info_t y_info\n@@ -663,8 +664,12 @@ propagate (void)\n         read_write_all_from_decl (node, &read_all, &write_all);\n \n       for (e = node->callees; e; e = e->next_callee)\n-        if (cgraph_function_body_availability (e->callee) <= AVAIL_OVERWRITABLE)\n-          read_write_all_from_decl (e->callee, &read_all, &write_all);\n+\t{\n+\t  enum availability avail;\n+\t  struct cgraph_node *callee = cgraph_function_node (e->callee, &avail);\n+          if (!callee || avail <= AVAIL_OVERWRITABLE)\n+            read_write_all_from_decl (callee, &read_all, &write_all);\n+\t}\n \n       for (ie = node->indirect_calls; ie; ie = ie->next_callee)\n \tif (!(ie->indirect_info->ecf_flags & ECF_CONST))\n@@ -696,8 +701,13 @@ propagate (void)\n \t    read_write_all_from_decl (w, &read_all, &write_all);\n \n \t  for (e = w->callees; e; e = e->next_callee)\n-\t    if (cgraph_function_body_availability (e->callee) <= AVAIL_OVERWRITABLE)\n-\t      read_write_all_from_decl (e->callee, &read_all, &write_all);\n+\t    {\n+\t      enum availability avail;\n+\t      struct cgraph_node *callee = cgraph_function_node (e->callee, &avail);\n+\n+\t      if (avail <= AVAIL_OVERWRITABLE)\n+\t\tread_write_all_from_decl (callee, &read_all, &write_all);\n+\t    }\n \n \t  for (ie = w->indirect_calls; ie; ie = ie->next_callee)\n \t    if (!(ie->indirect_info->ecf_flags & ECF_CONST))"}, {"sha": "ae207369d18f6ca35f68274437a8f2429c0d5ba5", "filename": "gcc/ipa-utils.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fede8efad0bfa82997fd1ff49f84eb493231ca23/gcc%2Fipa-utils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fede8efad0bfa82997fd1ff49f84eb493231ca23/gcc%2Fipa-utils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-utils.c?ref=fede8efad0bfa82997fd1ff49f84eb493231ca23", "patch": "@@ -101,10 +101,10 @@ searchc (struct searchc_env* env, struct cgraph_node *v,\n   for (edge = v->callees; edge; edge = edge->next_callee)\n     {\n       struct ipa_dfs_info * w_info;\n-      struct cgraph_node *w = edge->callee;\n-      enum availability avail = cgraph_function_body_availability (w);\n+      enum availability avail;\n+      struct cgraph_node *w = cgraph_function_or_thunk_node (edge->callee, &avail);\n \n-      if (ignore_edge && ignore_edge (edge))\n+      if (!w || (ignore_edge && ignore_edge (edge)))\n         continue;\n \n       if (w->aux"}]}