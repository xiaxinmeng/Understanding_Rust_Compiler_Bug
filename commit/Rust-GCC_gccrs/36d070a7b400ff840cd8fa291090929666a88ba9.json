{"sha": "36d070a7b400ff840cd8fa291090929666a88ba9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzZkMDcwYTdiNDAwZmY4NDBjZDhmYTI5MTA5MDkyOTY2NmE4OGJhOQ==", "commit": {"author": {"name": "Vladimir Makarov", "email": "vmakarov@redhat.com", "date": "2018-12-04T15:10:46Z"}, "committer": {"name": "Vladimir Makarov", "email": "vmakarov@gcc.gnu.org", "date": "2018-12-04T15:10:46Z"}, "message": "re PR target/88282 (ICE in df_install_refs at gcc/df-scan.c:2379)\n\n2018-12-04  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR target/88282\n\t* ira-costs.c (exec): Try bigger class to use smaller register\n\tmove cost.\n\nFrom-SVN: r266784", "tree": {"sha": "80851352b6bbf8c5cca2dd10784657c438eff00e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/80851352b6bbf8c5cca2dd10784657c438eff00e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/36d070a7b400ff840cd8fa291090929666a88ba9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36d070a7b400ff840cd8fa291090929666a88ba9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36d070a7b400ff840cd8fa291090929666a88ba9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36d070a7b400ff840cd8fa291090929666a88ba9/comments", "author": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8f80bd89728ecc0653fc1121be40af829ca6092a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f80bd89728ecc0653fc1121be40af829ca6092a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f80bd89728ecc0653fc1121be40af829ca6092a"}], "stats": {"total": 44, "additions": 36, "deletions": 8}, "files": [{"sha": "1214f4439978b3449f0c56bc250e77d865da496a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36d070a7b400ff840cd8fa291090929666a88ba9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36d070a7b400ff840cd8fa291090929666a88ba9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=36d070a7b400ff840cd8fa291090929666a88ba9", "patch": "@@ -1,3 +1,9 @@\n+2018-12-04  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR target/88282\n+\t* ira-costs.c (exec): Try bigger class to use smaller register\n+\tmove cost.\n+\n 2018-12-04  Michael Ploujnikov  <michael.ploujnikov@oracle.com>\n \n \tPR ipa/88297"}, {"sha": "c3451f03992922adc79bfc663f814c76fdc14b21", "filename": "gcc/ira-costs.c", "status": "modified", "additions": 30, "deletions": 8, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36d070a7b400ff840cd8fa291090929666a88ba9/gcc%2Fira-costs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36d070a7b400ff840cd8fa291090929666a88ba9/gcc%2Fira-costs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-costs.c?ref=36d070a7b400ff840cd8fa291090929666a88ba9", "patch": "@@ -1314,28 +1314,50 @@ record_operand_costs (rtx_insn *insn, enum reg_class *pref)\n \t  machine_mode mode = GET_MODE (SET_SRC (set));\n \t  cost_classes_t cost_classes_ptr = regno_cost_classes[regno];\n \t  enum reg_class *cost_classes = cost_classes_ptr->classes;\n-\t  reg_class_t rclass, hard_reg_class, pref_class;\n+\t  reg_class_t rclass, hard_reg_class, pref_class, bigger_hard_reg_class;\n \t  int cost, k;\n+\t  move_table *move_costs;\n \t  bool dead_p = find_regno_note (insn, REG_DEAD, REGNO (src));\n \n \t  ira_init_register_move_cost_if_necessary (mode);\n+\t  move_costs = ira_register_move_cost[mode];\n \t  hard_reg_class = REGNO_REG_CLASS (other_regno);\n+\t  bigger_hard_reg_class = ira_pressure_class_translate[hard_reg_class];\n+\t  if (bigger_hard_reg_class == NO_REGS\n+\t      && (other_regno == STACK_POINTER_REGNUM\n+#ifdef STATIC_CHAIN_REGNUM\n+\t\t  || other_regno == STATIC_CHAIN_REGNUM\n+#endif\n+\t\t  || other_regno == FRAME_POINTER_REGNUM\n+\t\t  || other_regno == HARD_FRAME_POINTER_REGNUM))\n+\t    bigger_hard_reg_class = GENERAL_REGS;\n \t  /* Target code may return any cost for mode which does not\n \t     fit the the hard reg class (e.g. DImode for AREG on\n \t     i386).  Check this and use a bigger class to get the\n \t     right cost.  */\n \t  if (! ira_hard_reg_in_set_p (other_regno, mode,\n \t\t\t\t       reg_class_contents[hard_reg_class]))\n-\t    hard_reg_class = ira_pressure_class_translate[hard_reg_class];\n+\t    hard_reg_class = bigger_hard_reg_class;\n \t  i = regno == (int) REGNO (src) ? 1 : 0;\n \t  for (k = cost_classes_ptr->num - 1; k >= 0; k--)\n \t    {\n \t      rclass = cost_classes[k];\n-\t      cost = ((i == 0\n-\t\t       ? ira_register_move_cost[mode][hard_reg_class][rclass]\n-\t\t       : ira_register_move_cost[mode][rclass][hard_reg_class])\n-\t\t      * frequency);\n-\t      op_costs[i]->cost[k] = cost;\n+\t      cost = (i == 0\n+\t\t      ? move_costs[hard_reg_class][rclass]\n+\t\t      : move_costs[rclass][hard_reg_class]);\n+\t      /* Target code might define wrong big costs for smaller\n+\t\t reg classes or reg classes containing only fixed hard\n+\t\t regs.  Try a bigger class.  */\n+\t      if (bigger_hard_reg_class != hard_reg_class)\n+\t\t{\n+\t\t  int cost2 = (i == 0\n+\t\t\t       ? move_costs[bigger_hard_reg_class][rclass]\n+\t\t\t       : move_costs[rclass][bigger_hard_reg_class]);\n+\t\t  if (cost2 < cost)\n+\t\t    cost = cost2;\n+\t\t}\n+\t      \n+\t      op_costs[i]->cost[k] = cost * frequency;\n \t      /* If we have assigned a class to this allocno in our\n \t\t first pass, add a cost to this alternative\n \t\t corresponding to what we would add if this allocno\n@@ -1350,7 +1372,7 @@ record_operand_costs (rtx_insn *insn, enum reg_class *pref)\n \t\t  else if (ira_reg_class_intersect[pref_class][rclass]\n \t\t\t   == NO_REGS)\n \t\t    op_costs[i]->cost[k]\n-\t\t      += (ira_register_move_cost[mode][pref_class][rclass]\n+\t\t      += (move_costs[pref_class][rclass]\n \t\t\t  * frequency);\n \t\t}\n \t      /* If this insn is a single set copying operand 1 to"}]}