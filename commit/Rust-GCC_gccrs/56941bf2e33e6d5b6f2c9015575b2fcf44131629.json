{"sha": "56941bf2e33e6d5b6f2c9015575b2fcf44131629", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTY5NDFiZjJlMzNlNmQ1YjZmMmM5MDE1NTc1YjJmY2Y0NDEzMTYyOQ==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.co.uk", "date": "2002-09-20T19:44:09Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2002-09-20T19:44:09Z"}, "message": "cppmacro.c: Don't warn about function-like macros without '(' during pre-expandion.\n\n\t* cppmacro.c: Don't warn about function-like macros without\n\t'(' during pre-expandion.\ntestsuite:\n\t* gcc.dg/cpp/tr-warn2.c: Update.\n\nFrom-SVN: r57366", "tree": {"sha": "a172815d8a262a6580139d5d5ff77104790cee2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a172815d8a262a6580139d5d5ff77104790cee2b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/56941bf2e33e6d5b6f2c9015575b2fcf44131629", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56941bf2e33e6d5b6f2c9015575b2fcf44131629", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56941bf2e33e6d5b6f2c9015575b2fcf44131629", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56941bf2e33e6d5b6f2c9015575b2fcf44131629/comments", "author": {"login": "neilb-xx", "id": 160762, "node_id": "MDQ6VXNlcjE2MDc2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/160762?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neilb-xx", "html_url": "https://github.com/neilb-xx", "followers_url": "https://api.github.com/users/neilb-xx/followers", "following_url": "https://api.github.com/users/neilb-xx/following{/other_user}", "gists_url": "https://api.github.com/users/neilb-xx/gists{/gist_id}", "starred_url": "https://api.github.com/users/neilb-xx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neilb-xx/subscriptions", "organizations_url": "https://api.github.com/users/neilb-xx/orgs", "repos_url": "https://api.github.com/users/neilb-xx/repos", "events_url": "https://api.github.com/users/neilb-xx/events{/privacy}", "received_events_url": "https://api.github.com/users/neilb-xx/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "66a0dfebeb72645cdabc9661b7cdf2567be23d2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66a0dfebeb72645cdabc9661b7cdf2567be23d2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66a0dfebeb72645cdabc9661b7cdf2567be23d2a"}], "stats": {"total": 38, "additions": 28, "deletions": 10}, "files": [{"sha": "9d5bf6c06bb84e299241770ab49e1d945f80b3d8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56941bf2e33e6d5b6f2c9015575b2fcf44131629/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56941bf2e33e6d5b6f2c9015575b2fcf44131629/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=56941bf2e33e6d5b6f2c9015575b2fcf44131629", "patch": "@@ -1,3 +1,8 @@\n+2002-09-20  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* cppmacro.c: Don't warn about function-like macros without\n+\t'(' during pre-expandion.\n+\n 2002-09-20  Jim Wilson  <wilson@redhat.com>\n \n \t* config/v850/v850.c (current_function_anonymous_args): Delete."}, {"sha": "961109ad1004a7a557e63583edf57b251c1784d1", "filename": "gcc/cppmacro.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56941bf2e33e6d5b6f2c9015575b2fcf44131629/gcc%2Fcppmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56941bf2e33e6d5b6f2c9015575b2fcf44131629/gcc%2Fcppmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppmacro.c?ref=56941bf2e33e6d5b6f2c9015575b2fcf44131629", "patch": "@@ -1032,10 +1032,15 @@ expand_arg (pfile, arg)\n      macro_arg *arg;\n {\n   unsigned int capacity;\n+  bool saved_warn_trad;\n \n   if (arg->count == 0)\n     return;\n \n+  /* Don't warn about funlike macros when pre-expanding.  */\n+  saved_warn_trad = CPP_WTRADITIONAL (pfile);\n+  CPP_WTRADITIONAL (pfile) = 0;\n+\n   /* Loop, reading in the arguments.  */\n   capacity = 256;\n   arg->expanded = (const cpp_token **)\n@@ -1062,6 +1067,8 @@ expand_arg (pfile, arg)\n     }\n \n   _cpp_pop_context (pfile);\n+\n+  CPP_WTRADITIONAL (pfile) = saved_warn_trad;\n }\n \n /* Pop the current context off the stack, re-enabling the macro if the"}, {"sha": "eccae6335211e73df5bb0f343b717f4b5c1704d7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56941bf2e33e6d5b6f2c9015575b2fcf44131629/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56941bf2e33e6d5b6f2c9015575b2fcf44131629/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=56941bf2e33e6d5b6f2c9015575b2fcf44131629", "patch": "@@ -1,3 +1,7 @@\n+2002-09-20  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* gcc.dg/cpp/tr-warn2.c: Update.\n+\n 2002-09-20  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* gcc.c-torture/execute/20020720-1.x: Skip test on ARM-based systems."}, {"sha": "41be76e316e72064ebdaeca6db464f706adac22a", "filename": "gcc/testsuite/gcc.dg/cpp/tr-warn2.c", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56941bf2e33e6d5b6f2c9015575b2fcf44131629/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftr-warn2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56941bf2e33e6d5b6f2c9015575b2fcf44131629/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftr-warn2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftr-warn2.c?ref=56941bf2e33e6d5b6f2c9015575b2fcf44131629", "patch": "@@ -1,14 +1,16 @@\n /* K+R rejects use of function-like macros in non-function context.\n-   ANSI C explicitly permits this (the macro is not expanded).  */\n+   ANSI C explicitly permits this (the macro is not expanded).\n \n-/* { dg-do compile } */\n-/* { dg-options -Wtraditional } */\n-\n-enum { SIGN_EXTEND = 23 };\n+   We should not warn about this during pre-expansion of arguments,\n+   since traditional preprocessors don't do pre-expansion, and we get\n+   the warning anyway during the re-scan pass if and only if it is\n+   appropriate.  */\n \n-#define SIGN_EXTEND(v) (((v) < 0) ? -1 : 0)\n+/* { dg-do preprocess } */\n+/* { dg-options -Wtraditional } */\n \n-int fun()\n-{\n-  return SIGN_EXTEND;\t/* { dg-warning \"must be used with arguments\" } */\n-}\n+#define f(x) x\n+#define g(x) x / 2\n+f(g) (3)\t    /* { dg-bogus \"must be used with arguments\" } */\n+f 2\t\t    /* { dg-warning \"must be used with arguments\" } */\n+f(g) 3\t\t    /* { dg-warning \"must be used with arguments\" } */"}]}