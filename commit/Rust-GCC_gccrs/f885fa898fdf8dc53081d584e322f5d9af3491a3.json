{"sha": "f885fa898fdf8dc53081d584e322f5d9af3491a3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjg4NWZhODk4ZmRmOGRjNTMwODFkNTg0ZTMyMmY1ZDlhZjM0OTFhMw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2016-01-07T15:01:33Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-01-07T15:01:33Z"}, "message": "Use std::addressof in insert iterators, allocators and promises\n\n\tPR libstdc++/69105\n\tPR libstdc++/69106\n\tPR libstdc++/69114\n\t* include/bits/stl_iterator.h (back_insert_iterator,\n\tfront_insert_iterator, insert_iterator): Use __addressof (LWG 2324).\n\t* include/bits/uses_allocator.h (__use_alloc): Use __addressof.\n\t* include/std/future (__future::base::_State_baseV2::__setter):\n\tLikewise.\n\t* include/std/scoped_allocator (__outermost): Likewise.\n\t* testsuite/20_util/scoped_allocator/69114.cc: New.\n\t* testsuite/20_util/uses_allocator/69114.cc: New.\n\t* testsuite/30_threads/promise/69106.cc: New.\n\nFrom-SVN: r232129", "tree": {"sha": "30850f33b00dc6cf6fb619896993a9ff8417f621", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/30850f33b00dc6cf6fb619896993a9ff8417f621"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f885fa898fdf8dc53081d584e322f5d9af3491a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f885fa898fdf8dc53081d584e322f5d9af3491a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f885fa898fdf8dc53081d584e322f5d9af3491a3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f885fa898fdf8dc53081d584e322f5d9af3491a3/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64d3ef31dffb75b1a16837564eac5b613d49cafc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64d3ef31dffb75b1a16837564eac5b613d49cafc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64d3ef31dffb75b1a16837564eac5b613d49cafc"}], "stats": {"total": 167, "additions": 159, "deletions": 8}, "files": [{"sha": "782bae996757d7d76ef6a7bf6543e9708179bf2b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f885fa898fdf8dc53081d584e322f5d9af3491a3/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f885fa898fdf8dc53081d584e322f5d9af3491a3/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f885fa898fdf8dc53081d584e322f5d9af3491a3", "patch": "@@ -1,3 +1,18 @@\n+2016-01-07  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/69105\n+\tPR libstdc++/69106\n+\tPR libstdc++/69114\n+\t* include/bits/stl_iterator.h (back_insert_iterator,\n+\tfront_insert_iterator, insert_iterator): Use __addressof (LWG 2324).\n+\t* include/bits/uses_allocator.h (__use_alloc): Use __addressof.\n+\t* include/std/future (__future::base::_State_baseV2::__setter):\n+\tLikewise.\n+\t* include/std/scoped_allocator (__outermost): Likewise.\n+\t* testsuite/20_util/scoped_allocator/69114.cc: New.\n+\t* testsuite/20_util/uses_allocator/69114.cc: New.\n+\t* testsuite/30_threads/promise/69106.cc: New.\n+\n 2016-01-06  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/69092"}, {"sha": "3401cd0fb73d556716665b16af10b295e21bb2be", "filename": "libstdc++-v3/include/bits/stl_iterator.h", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f885fa898fdf8dc53081d584e322f5d9af3491a3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f885fa898fdf8dc53081d584e322f5d9af3491a3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h?ref=f885fa898fdf8dc53081d584e322f5d9af3491a3", "patch": "@@ -451,7 +451,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       /// The only way to create this %iterator is with a container.\n       explicit\n-      back_insert_iterator(_Container& __x) : container(&__x) { }\n+      back_insert_iterator(_Container& __x)\n+      : container(std::__addressof(__x)) { }\n \n       /**\n        *  @param  __value  An instance of whatever type\n@@ -541,7 +542,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef _Container          container_type;\n \n       /// The only way to create this %iterator is with a container.\n-      explicit front_insert_iterator(_Container& __x) : container(&__x) { }\n+      explicit front_insert_iterator(_Container& __x)\n+      : container(std::__addressof(__x)) { }\n \n       /**\n        *  @param  __value  An instance of whatever type\n@@ -640,7 +642,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  initial position (a normal %iterator into the container).\n       */\n       insert_iterator(_Container& __x, typename _Container::iterator __i)\n-      : container(&__x), iter(__i) {}\n+      : container(std::__addressof(__x)), iter(__i) {}\n \n       /**\n        *  @param  __value  An instance of whatever type"}, {"sha": "b3c3f60510ef0b7293f13a59f8627e182401261e", "filename": "libstdc++-v3/include/bits/uses_allocator.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f885fa898fdf8dc53081d584e322f5d9af3491a3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fuses_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f885fa898fdf8dc53081d584e322f5d9af3491a3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fuses_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fuses_allocator.h?ref=f885fa898fdf8dc53081d584e322f5d9af3491a3", "patch": "@@ -99,7 +99,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     __use_alloc(const _Alloc& __a)\n     {\n       __uses_alloc_t<_Tp, _Alloc, _Args...> __ret;\n-      __ret._M_a = &__a;\n+      __ret._M_a = std::__addressof(__a);\n       return __ret;\n     }\n "}, {"sha": "80b7b06a45f5a3e79be366ab3e758bc4f86622d5", "filename": "libstdc++-v3/include/std/future", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f885fa898fdf8dc53081d584e322f5d9af3491a3/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f885fa898fdf8dc53081d584e322f5d9af3491a3/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture?ref=f885fa898fdf8dc53081d584e322f5d9af3491a3", "patch": "@@ -507,7 +507,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         static _Setter<_Res, _Arg&&>\n         __setter(promise<_Res>* __prom, _Arg&& __arg)\n         {\n-          return _Setter<_Res, _Arg&&>{ __prom, &__arg };\n+          return _Setter<_Res, _Arg&&>{ __prom, std::__addressof(__arg) };\n         }\n \n       template<typename _Res>"}, {"sha": "aac2dfee66425eafedb4a6f68025e2a5d3d920e8", "filename": "libstdc++-v3/include/std/scoped_allocator", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f885fa898fdf8dc53081d584e322f5d9af3491a3/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fscoped_allocator", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f885fa898fdf8dc53081d584e322f5d9af3491a3/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fscoped_allocator", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fscoped_allocator?ref=f885fa898fdf8dc53081d584e322f5d9af3491a3", "patch": "@@ -50,7 +50,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _Alloc>\n     inline auto\n-    __do_outermost(_Alloc& __a, _Alloc*) -> decltype(__a.outer_allocator())\n+    __do_outermost(_Alloc& __a, int) -> decltype(__a.outer_allocator())\n     { return __a.outer_allocator(); }\n \n   template<typename _Alloc>\n@@ -61,8 +61,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // TODO: make recursive (see note in 20.12.4/1)\n   template<typename _Alloc>\n     inline auto\n-    __outermost(_Alloc& __a) -> decltype(__do_outermost(__a, &__a))\n-    { return __do_outermost(__a, &__a); }\n+    __outermost(_Alloc& __a)\n+    -> decltype(__do_outermost(__a, 0))\n+    { return __do_outermost(__a, 0); }\n \n   template<typename _OuterAlloc, typename... _InnerAllocs>\n     class scoped_allocator_adaptor;"}, {"sha": "6890d18779536a204daa577ab122d5c1f50c044f", "filename": "libstdc++-v3/testsuite/20_util/scoped_allocator/69114.cc", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f885fa898fdf8dc53081d584e322f5d9af3491a3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fscoped_allocator%2F69114.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f885fa898fdf8dc53081d584e322f5d9af3491a3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fscoped_allocator%2F69114.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fscoped_allocator%2F69114.cc?ref=f885fa898fdf8dc53081d584e322f5d9af3491a3", "patch": "@@ -0,0 +1,50 @@\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++11\" }\n+\n+// PR libstdc++/69114\n+\n+#include <scoped_allocator>\n+\n+template<typename T>\n+struct Alloc\n+{\n+  using value_type = T;\n+\n+  Alloc() = default;\n+\n+  template<typename U>\n+    Alloc(const Alloc<U>&) { }\n+\n+  T* allocate(std::size_t);\n+  void deallocate(T*, std::size_t);\n+\n+  bool operator==(const Alloc&) const { return true; }\n+  bool operator!=(const Alloc&) const { return false; }\n+\n+  void operator&() = delete;\n+};\n+\n+void\n+test01()\n+{\n+  using alloc_type = Alloc<std::pair<int, int>>;\n+  std::scoped_allocator_adaptor<alloc_type> a;\n+  a.construct(a.allocate(1));\n+}"}, {"sha": "0ab7ed33f152181e8a27e16b40d7bc62fa97f42d", "filename": "libstdc++-v3/testsuite/20_util/uses_allocator/69114.cc", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f885fa898fdf8dc53081d584e322f5d9af3491a3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fuses_allocator%2F69114.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f885fa898fdf8dc53081d584e322f5d9af3491a3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fuses_allocator%2F69114.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fuses_allocator%2F69114.cc?ref=f885fa898fdf8dc53081d584e322f5d9af3491a3", "patch": "@@ -0,0 +1,49 @@\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++11\" }\n+\n+// PR libstdc++/69114\n+\n+#include <tuple>\n+\n+template<typename T>\n+struct Alloc\n+{\n+  using value_type = T;\n+\n+  Alloc() = default;\n+\n+  template<typename U>\n+    Alloc(const Alloc<U>&) { }\n+\n+  T* allocate(std::size_t);\n+  void deallocate(T*, std::size_t);\n+\n+  bool operator==(const Alloc&) const { return true; }\n+  bool operator!=(const Alloc&) const { return false; }\n+\n+  void operator&() = delete;\n+};\n+\n+void\n+test01()\n+{\n+  Alloc<int> a;\n+  std::tuple<int> t(std::allocator_arg, a);\n+}"}, {"sha": "921ded13deaa676b8586a8157972a52fc5fd0c23", "filename": "libstdc++-v3/testsuite/30_threads/promise/69106.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f885fa898fdf8dc53081d584e322f5d9af3491a3/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2F69106.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f885fa898fdf8dc53081d584e322f5d9af3491a3/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2F69106.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2F69106.cc?ref=f885fa898fdf8dc53081d584e322f5d9af3491a3", "patch": "@@ -0,0 +1,34 @@\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+// { dg-require-atomic-builtins \"\" }\n+\n+#include <future>\n+\n+struct foo {\n+    void operator&() const = delete;\n+};\n+\n+void test01()\n+{\n+    std::promise<foo> p;\n+    p.set_value(foo());\n+}"}]}