{"sha": "0094f21b6186ed0ba4d580889164fb7ffd15b51f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDA5NGYyMWI2MTg2ZWQwYmE0ZDU4MDg4OTE2NGZiN2ZmZDE1YjUxZg==", "commit": {"author": {"name": "Julian Brown", "email": "julian@codesourcery.com", "date": "2011-07-08T17:30:43Z"}, "committer": {"name": "Julian Brown", "email": "jules@gcc.gnu.org", "date": "2011-07-08T17:30:43Z"}, "message": "neon.md (vec_shr_<mode>, [...]): Disable in big-endian mode.\n\n\tgcc/\n\t* config/arm/neon.md (vec_shr_<mode>, vec_shl_<mode>): Disable in\n\tbig-endian mode.\n\t(reduc_splus_<mode>, reduc_uplus_<mode>, reduc_smin_<mode>)\n\t(reduc_smax_<mode>, reduc_umin_<mode>, reduc_umax_<mode>)\n\t(neon_vec_unpack<US>_lo_<mode>, neon_vec_unpack<US>_hi_<mode>)\n\t(vec_unpack<US>_hi_<mode>, vec_unpack<US>_lo_<mode>)\n\t(neon_vec_<US>mult_lo_<mode>, vec_widen_<US>mult_lo_<mode>)\n\t(neon_vec_<US>mult_hi_<mode>, vec_widen_<US>mult_hi_<mode>)\n\t(vec_pack_trunc_<mode>, neon_vec_pack_trunc_<mode>): Disable for Q\n\tregisters in big-endian mode.\n\n\tgcc/testsuite/\n\t* lib/target-supports.exp\n\t(check_effective_target_arm_little_endian): New.\n\t(check_effective_target_vect_pack_trunc): Use above.\n\t(check_effective_target_vect_unpack): Likewise.\n\t(check_effective_target_vect_element_align): Test\n\tcheck_effective_target_arm_vect_no_misalign for ARM.\n\nFrom-SVN: r176050", "tree": {"sha": "4a47a99f3d86585455aa3623bed18af2e1685eff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4a47a99f3d86585455aa3623bed18af2e1685eff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0094f21b6186ed0ba4d580889164fb7ffd15b51f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0094f21b6186ed0ba4d580889164fb7ffd15b51f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0094f21b6186ed0ba4d580889164fb7ffd15b51f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0094f21b6186ed0ba4d580889164fb7ffd15b51f/comments", "author": {"login": "jtb20", "id": 6094880, "node_id": "MDQ6VXNlcjYwOTQ4ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/6094880?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jtb20", "html_url": "https://github.com/jtb20", "followers_url": "https://api.github.com/users/jtb20/followers", "following_url": "https://api.github.com/users/jtb20/following{/other_user}", "gists_url": "https://api.github.com/users/jtb20/gists{/gist_id}", "starred_url": "https://api.github.com/users/jtb20/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jtb20/subscriptions", "organizations_url": "https://api.github.com/users/jtb20/orgs", "repos_url": "https://api.github.com/users/jtb20/repos", "events_url": "https://api.github.com/users/jtb20/events{/privacy}", "received_events_url": "https://api.github.com/users/jtb20/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f8501f04ea07e18d68979c129d1ff2b1001e918d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8501f04ea07e18d68979c129d1ff2b1001e918d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8501f04ea07e18d68979c129d1ff2b1001e918d"}], "stats": {"total": 90, "additions": 67, "deletions": 23}, "files": [{"sha": "52f3d7b1fe68ada94b6fdf22479fe5827e1567b5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0094f21b6186ed0ba4d580889164fb7ffd15b51f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0094f21b6186ed0ba4d580889164fb7ffd15b51f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0094f21b6186ed0ba4d580889164fb7ffd15b51f", "patch": "@@ -1,3 +1,16 @@\n+2011-07-08  Julian Brown  <julian@codesourcery.com>\n+\n+\t* config/arm/neon.md (vec_shr_<mode>, vec_shl_<mode>): Disable in\n+\tbig-endian mode.\n+\t(reduc_splus_<mode>, reduc_uplus_<mode>, reduc_smin_<mode>)\n+\t(reduc_smax_<mode>, reduc_umin_<mode>, reduc_umax_<mode>)\n+\t(neon_vec_unpack<US>_lo_<mode>, neon_vec_unpack<US>_hi_<mode>)\n+\t(vec_unpack<US>_hi_<mode>, vec_unpack<US>_lo_<mode>)\n+\t(neon_vec_<US>mult_lo_<mode>, vec_widen_<US>mult_lo_<mode>)\n+\t(neon_vec_<US>mult_hi_<mode>, vec_widen_<US>mult_hi_<mode>)\n+\t(vec_pack_trunc_<mode>, neon_vec_pack_trunc_<mode>): Disable for Q\n+\tregisters in big-endian mode.\n+\n 2011-07-08  Bernd Schmidt  <bernds@codesourcery.com>\n \n \t* genattrtab.c (evaluate_eq_attr): Allow an attribute to be defined"}, {"sha": "becb5240a321496e103b07b14ada4bd350923ce8", "filename": "gcc/config/arm/neon.md", "status": "modified", "additions": 30, "deletions": 20, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0094f21b6186ed0ba4d580889164fb7ffd15b51f/gcc%2Fconfig%2Farm%2Fneon.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0094f21b6186ed0ba4d580889164fb7ffd15b51f/gcc%2Fconfig%2Farm%2Fneon.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon.md?ref=0094f21b6186ed0ba4d580889164fb7ffd15b51f", "patch": "@@ -1116,11 +1116,14 @@\n ;; shift-count granularity. That's good enough for the middle-end's current\n ;; needs.\n \n+;; Note that it's not safe to perform such an operation in big-endian mode,\n+;; due to element-ordering issues.\n+\n (define_expand \"vec_shr_<mode>\"\n   [(match_operand:VDQ 0 \"s_register_operand\" \"\")\n    (match_operand:VDQ 1 \"s_register_operand\" \"\")\n    (match_operand:SI 2 \"const_multiple_of_8_operand\" \"\")]\n-  \"TARGET_NEON\"\n+  \"TARGET_NEON && !BYTES_BIG_ENDIAN\"\n {\n   rtx zero_reg;\n   HOST_WIDE_INT num_bits = INTVAL (operands[2]);\n@@ -1148,7 +1151,7 @@\n   [(match_operand:VDQ 0 \"s_register_operand\" \"\")\n    (match_operand:VDQ 1 \"s_register_operand\" \"\")\n    (match_operand:SI 2 \"const_multiple_of_8_operand\" \"\")]\n-  \"TARGET_NEON\"\n+  \"TARGET_NEON && !BYTES_BIG_ENDIAN\"\n {\n   rtx zero_reg;\n   HOST_WIDE_INT num_bits = INTVAL (operands[2]);\n@@ -1344,7 +1347,8 @@\n (define_expand \"reduc_splus_<mode>\"\n   [(match_operand:VQ 0 \"s_register_operand\" \"\")\n    (match_operand:VQ 1 \"s_register_operand\" \"\")]\n-  \"TARGET_NEON && (!<Is_float_mode> || flag_unsafe_math_optimizations)\"\n+  \"TARGET_NEON && (!<Is_float_mode> || flag_unsafe_math_optimizations)\n+   && !BYTES_BIG_ENDIAN\"\n {\n   rtx step1 = gen_reg_rtx (<V_HALF>mode);\n   rtx res_d = gen_reg_rtx (<V_HALF>mode);\n@@ -1360,7 +1364,7 @@\n   [(set (match_operand:V2DI 0 \"s_register_operand\" \"=w\")\n \t(unspec:V2DI [(match_operand:V2DI 1 \"s_register_operand\" \"w\")]\n \t\t     UNSPEC_VPADD))]\n-  \"TARGET_NEON\"\n+  \"TARGET_NEON && !BYTES_BIG_ENDIAN\"\n   \"vadd.i64\\t%e0, %e1, %f1\"\n   [(set_attr \"neon_type\" \"neon_int_1\")]\n )\n@@ -1370,7 +1374,7 @@\n (define_expand \"reduc_uplus_<mode>\"\n   [(match_operand:VDQI 0 \"s_register_operand\" \"\")\n    (match_operand:VDQI 1 \"s_register_operand\" \"\")]\n-  \"TARGET_NEON\"\n+  \"TARGET_NEON && (<Is_d_reg> || !BYTES_BIG_ENDIAN)\"\n {\n   emit_insn (gen_reduc_splus_<mode> (operands[0], operands[1]));\n   DONE;\n@@ -1389,7 +1393,8 @@\n (define_expand \"reduc_smin_<mode>\"\n   [(match_operand:VQ 0 \"s_register_operand\" \"\")\n    (match_operand:VQ 1 \"s_register_operand\" \"\")]\n-  \"TARGET_NEON && (!<Is_float_mode> || flag_unsafe_math_optimizations)\"\n+  \"TARGET_NEON && (!<Is_float_mode> || flag_unsafe_math_optimizations)\n+   && !BYTES_BIG_ENDIAN\"\n {\n   rtx step1 = gen_reg_rtx (<V_HALF>mode);\n   rtx res_d = gen_reg_rtx (<V_HALF>mode);\n@@ -1414,7 +1419,8 @@\n (define_expand \"reduc_smax_<mode>\"\n   [(match_operand:VQ 0 \"s_register_operand\" \"\")\n    (match_operand:VQ 1 \"s_register_operand\" \"\")]\n-  \"TARGET_NEON && (!<Is_float_mode> || flag_unsafe_math_optimizations)\"\n+  \"TARGET_NEON && (!<Is_float_mode> || flag_unsafe_math_optimizations)\n+   && !BYTES_BIG_ENDIAN\"\n {\n   rtx step1 = gen_reg_rtx (<V_HALF>mode);\n   rtx res_d = gen_reg_rtx (<V_HALF>mode);\n@@ -1439,7 +1445,7 @@\n (define_expand \"reduc_umin_<mode>\"\n   [(match_operand:VQI 0 \"s_register_operand\" \"\")\n    (match_operand:VQI 1 \"s_register_operand\" \"\")]\n-  \"TARGET_NEON\"\n+  \"TARGET_NEON && !BYTES_BIG_ENDIAN\"\n {\n   rtx step1 = gen_reg_rtx (<V_HALF>mode);\n   rtx res_d = gen_reg_rtx (<V_HALF>mode);\n@@ -1464,7 +1470,7 @@\n (define_expand \"reduc_umax_<mode>\"\n   [(match_operand:VQI 0 \"s_register_operand\" \"\")\n    (match_operand:VQI 1 \"s_register_operand\" \"\")]\n-  \"TARGET_NEON\"\n+  \"TARGET_NEON && !BYTES_BIG_ENDIAN\"\n {\n   rtx step1 = gen_reg_rtx (<V_HALF>mode);\n   rtx res_d = gen_reg_rtx (<V_HALF>mode);\n@@ -5423,7 +5429,7 @@\n         (SE:<V_unpack> (vec_select:<V_HALF>\n \t\t\t  (match_operand:VU 1 \"register_operand\" \"w\")\n \t\t\t  (match_operand:VU 2 \"vect_par_constant_low\" \"\"))))]\n-  \"TARGET_NEON\"\n+  \"TARGET_NEON && !BYTES_BIG_ENDIAN\"\n   \"vmovl.<US><V_sz_elem> %q0, %e1\"\n   [(set_attr \"neon_type\" \"neon_shift_1\")]\n )\n@@ -5433,15 +5439,15 @@\n         (SE:<V_unpack> (vec_select:<V_HALF>\n \t\t\t  (match_operand:VU 1 \"register_operand\" \"w\")\n \t\t\t  (match_operand:VU 2 \"vect_par_constant_high\" \"\"))))]\n-  \"TARGET_NEON\"\n+  \"TARGET_NEON && !BYTES_BIG_ENDIAN\"\n   \"vmovl.<US><V_sz_elem> %q0, %f1\"\n   [(set_attr \"neon_type\" \"neon_shift_1\")]\n )\n \n (define_expand \"vec_unpack<US>_hi_<mode>\"\n   [(match_operand:<V_unpack> 0 \"register_operand\" \"\")\n    (SE:<V_unpack> (match_operand:VU 1 \"register_operand\"))]\n- \"TARGET_NEON\"\n+ \"TARGET_NEON && !BYTES_BIG_ENDIAN\"\n   {\n    rtvec v = rtvec_alloc (<V_mode_nunits>/2)  ;\n    rtx t1;\n@@ -5460,7 +5466,7 @@\n (define_expand \"vec_unpack<US>_lo_<mode>\"\n   [(match_operand:<V_unpack> 0 \"register_operand\" \"\")\n    (SE:<V_unpack> (match_operand:VU 1 \"register_operand\" \"\"))]\n- \"TARGET_NEON\"\n+ \"TARGET_NEON && !BYTES_BIG_ENDIAN\"\n   {\n    rtvec v = rtvec_alloc (<V_mode_nunits>/2)  ;\n    rtx t1;\n@@ -5483,7 +5489,7 @@\n  \t\t        (SE:<V_unpack> (vec_select:<V_HALF>\n                            (match_operand:VU 3 \"register_operand\" \"w\") \n                            (match_dup 2)))))]\n-  \"TARGET_NEON\"\n+  \"TARGET_NEON && !BYTES_BIG_ENDIAN\"\n   \"vmull.<US><V_sz_elem> %q0, %e1, %e3\"\n   [(set_attr \"neon_type\" \"neon_shift_1\")]\n )\n@@ -5492,7 +5498,7 @@\n   [(match_operand:<V_unpack> 0 \"register_operand\" \"\")\n    (SE:<V_unpack> (match_operand:VU 1 \"register_operand\" \"\"))\n    (SE:<V_unpack> (match_operand:VU 2 \"register_operand\" \"\"))]\n- \"TARGET_NEON\"\n+ \"TARGET_NEON && !BYTES_BIG_ENDIAN\"\n  {\n    rtvec v = rtvec_alloc (<V_mode_nunits>/2)  ;\n    rtx t1;\n@@ -5517,7 +5523,7 @@\n \t\t       (SE:<V_unpack> (vec_select:<V_HALF>\n \t\t\t    (match_operand:VU 3 \"register_operand\" \"w\") \n \t\t\t    (match_dup 2)))))]\n-  \"TARGET_NEON\"\n+  \"TARGET_NEON && !BYTES_BIG_ENDIAN\"\n   \"vmull.<US><V_sz_elem> %q0, %f1, %f3\"\n   [(set_attr \"neon_type\" \"neon_shift_1\")]\n )\n@@ -5526,7 +5532,7 @@\n   [(match_operand:<V_unpack> 0 \"register_operand\" \"\")\n    (SE:<V_unpack> (match_operand:VU 1 \"register_operand\" \"\"))\n    (SE:<V_unpack> (match_operand:VU 2 \"register_operand\" \"\"))]\n- \"TARGET_NEON\"\n+ \"TARGET_NEON && !BYTES_BIG_ENDIAN\"\n  {\n    rtvec v = rtvec_alloc (<V_mode_nunits>/2)  ;\n    rtx t1;\n@@ -5620,14 +5626,18 @@\n  }\n )\n \n+; FIXME: These instruction patterns can't be used safely in big-endian mode\n+; because the ordering of vector elements in Q registers is different from what\n+; the semantics of the instructions require.\n+\n (define_insn \"vec_pack_trunc_<mode>\"\n  [(set (match_operand:<V_narrow_pack> 0 \"register_operand\" \"=&w\")\n        (vec_concat:<V_narrow_pack> \n \t\t(truncate:<V_narrow> \n \t\t\t(match_operand:VN 1 \"register_operand\" \"w\"))\n \t\t(truncate:<V_narrow>\n \t\t\t(match_operand:VN 2 \"register_operand\" \"w\"))))]\n- \"TARGET_NEON\"\n+ \"TARGET_NEON && !BYTES_BIG_ENDIAN\"\n  \"vmovn.i<V_sz_elem>\\t%e0, %q1\\;vmovn.i<V_sz_elem>\\t%f0, %q2\"\n  [(set_attr \"neon_type\" \"neon_shift_1\")\n   (set_attr \"length\" \"8\")]\n@@ -5637,7 +5647,7 @@\n (define_insn \"neon_vec_pack_trunc_<mode>\"\n  [(set (match_operand:<V_narrow> 0 \"register_operand\" \"=w\")\n        (truncate:<V_narrow> (match_operand:VN 1 \"register_operand\" \"w\")))]\n- \"TARGET_NEON\"\n+ \"TARGET_NEON && !BYTES_BIG_ENDIAN\"\n  \"vmovn.i<V_sz_elem>\\t%P0, %q1\"\n  [(set_attr \"neon_type\" \"neon_shift_1\")]\n )\n@@ -5646,7 +5656,7 @@\n  [(match_operand:<V_narrow_pack> 0 \"register_operand\" \"\")\n   (match_operand:VSHFT 1 \"register_operand\" \"\")\n   (match_operand:VSHFT 2 \"register_operand\")]\n- \"TARGET_NEON\"\n+ \"TARGET_NEON && !BYTES_BIG_ENDIAN\"\n {\n   rtx tempreg = gen_reg_rtx (<V_DOUBLE>mode);\n   "}, {"sha": "b2ba49aea53fa9198ad81a6e9b198a66f96c4ef2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0094f21b6186ed0ba4d580889164fb7ffd15b51f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0094f21b6186ed0ba4d580889164fb7ffd15b51f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0094f21b6186ed0ba4d580889164fb7ffd15b51f", "patch": "@@ -1,3 +1,12 @@\n+2011-07-08  Julian Brown  <julian@codesourcery.com>\n+\n+\t* lib/target-supports.exp\n+\t(check_effective_target_arm_little_endian): New.\n+\t(check_effective_target_vect_pack_trunc): Use above.\n+\t(check_effective_target_vect_unpack): Likewise.\n+\t(check_effective_target_vect_element_align): Test\n+\tcheck_effective_target_arm_vect_no_misalign for ARM.\n+\n 2011-07-08  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/49673"}, {"sha": "6ef87ab13aef80bb35d0c2b2743106a31d205457", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0094f21b6186ed0ba4d580889164fb7ffd15b51f/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0094f21b6186ed0ba4d580889164fb7ffd15b51f/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=0094f21b6186ed0ba4d580889164fb7ffd15b51f", "patch": "@@ -1899,6 +1899,15 @@ proc check_effective_target_arm_nothumb { } {\n     }]\n }\n \n+# Return 1 if this is a little-endian ARM target\n+proc check_effective_target_arm_little_endian { } {\n+    return [check_no_compiler_messages arm_little_endian assembly {\n+\t#if !defined(__arm__) || !defined(__ARMEL__)\n+\t#error FOO\n+\t#endif\n+    }]\n+}\n+\n # Return 1 if this is an ARM target that only supports aligned vector accesses\n proc check_effective_target_arm_vect_no_misalign { } {\n     return [check_no_compiler_messages arm_vect_no_misalign assembly {\n@@ -2953,7 +2962,8 @@ proc check_effective_target_vect_pack_trunc { } {\n              || [istarget i?86-*-*]\n              || [istarget x86_64-*-*]\n              || [istarget spu-*-*]\n-             || ([istarget arm*-*-*] && [check_effective_target_arm_neon]) } {\n+             || ([istarget arm*-*-*] && [check_effective_target_arm_neon]\n+\t\t && [check_effective_target_arm_little_endian]) } {\n             set et_vect_pack_trunc_saved 1\n         }\n     }\n@@ -2978,7 +2988,8 @@ proc check_effective_target_vect_unpack { } {\n              || [istarget x86_64-*-*] \n              || [istarget spu-*-*]\n              || [istarget ia64-*-*]\n-             || ([istarget arm*-*-*] && [check_effective_target_arm_neon]) } {\n+             || ([istarget arm*-*-*] && [check_effective_target_arm_neon]\n+\t\t && [check_effective_target_arm_little_endian]) } {\n             set et_vect_unpack_saved 1\n         }\n     }\n@@ -3164,7 +3175,8 @@ proc check_effective_target_vect_element_align { } {\n \tverbose \"check_effective_target_vect_element_align: using cached result\" 2\n     } else {\n \tset et_vect_element_align 0\n-\tif { [istarget arm*-*-*]\n+\tif { ([istarget arm*-*-*]\n+\t      && ![check_effective_target_arm_vect_no_misalign])\n \t     || [check_effective_target_vect_hw_misalign] } {\n \t   set et_vect_element_align 1\n \t}"}]}