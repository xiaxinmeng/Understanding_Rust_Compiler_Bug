{"sha": "e9cb22313e73de3931d581b0918e52bf0b581d76", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTljYjIyMzEzZTczZGUzOTMxZDU4MWIwOTE4ZTUyYmYwYjU4MWQ3Ng==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2017-09-07T09:54:14Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-09-07T09:54:14Z"}, "message": "s-parame-ae653.ads: Removed.\n\n\t* s-parame-ae653.ads: Removed.\n\nFrom-SVN: r251839", "tree": {"sha": "b865a3af95db2d6b35021904e8186952ae38bf0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b865a3af95db2d6b35021904e8186952ae38bf0c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e9cb22313e73de3931d581b0918e52bf0b581d76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9cb22313e73de3931d581b0918e52bf0b581d76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9cb22313e73de3931d581b0918e52bf0b581d76", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9cb22313e73de3931d581b0918e52bf0b581d76/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fe683ef6e1f215fa4836b0698c2b0265ff2da618", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe683ef6e1f215fa4836b0698c2b0265ff2da618", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe683ef6e1f215fa4836b0698c2b0265ff2da618"}], "stats": {"total": 214, "additions": 4, "deletions": 210}, "files": [{"sha": "64a16dafdae138cfb71212cc83e2696fab2c9fb9", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9cb22313e73de3931d581b0918e52bf0b581d76/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9cb22313e73de3931d581b0918e52bf0b581d76/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=e9cb22313e73de3931d581b0918e52bf0b581d76", "patch": "@@ -1,3 +1,7 @@\n+2017-09-07  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* s-parame-ae653.ads: Removed.\n+\n 2017-09-07  Nicolas Roche  <roche@adacore.com>\n \n \t* s-traces-default.adb, s-trafor-default.adb, s-trafor-default.ads,"}, {"sha": "4969ad39ebff56ea8c99fd4bc95f257735262436", "filename": "gcc/ada/s-parame-ae653.ads", "status": "removed", "additions": 0, "deletions": 210, "changes": 210, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe683ef6e1f215fa4836b0698c2b0265ff2da618/gcc%2Fada%2Fs-parame-ae653.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe683ef6e1f215fa4836b0698c2b0265ff2da618/gcc%2Fada%2Fs-parame-ae653.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-parame-ae653.ads?ref=fe683ef6e1f215fa4836b0698c2b0265ff2da618", "patch": "@@ -1,210 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                         GNAT COMPILER COMPONENTS                         --\n---                                                                          --\n---                    S Y S T E M . P A R A M E T E R S                     --\n---                                                                          --\n---                                 S p e c                                  --\n---                                                                          --\n---          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n---                                                                          --\n--- As a special exception under Section 7 of GPL version 3, you are granted --\n--- additional permissions described in the GCC Runtime Library Exception,   --\n--- version 3.1, as published by the Free Software Foundation.               --\n---                                                                          --\n--- You should have received a copy of the GNU General Public License and    --\n--- a copy of the GCC Runtime Library Exception along with this program;     --\n--- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n--- <http://www.gnu.org/licenses/>.                                          --\n---                                                                          --\n--- GNAT was originally developed  by the GNAT team at  New York University. --\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n---  Version is used by VxWorks 653, VxWorks MILS, and VxWorks6 cert Ravenscar\n-\n---  This package defines some system dependent parameters for GNAT. These\n---  are values that are referenced by the runtime library and are therefore\n---  relevant to the target machine.\n-\n---  The parameters whose value is defined in the spec are not generally\n---  expected to be changed. If they are changed, it will be necessary to\n---  recompile the run-time library.\n-\n---  The parameters which are defined by functions can be changed by modifying\n---  the body of System.Parameters in file s-parame.adb. A change to this body\n---  requires only rebinding and relinking of the application.\n-\n---  Note: do not introduce any pragma Inline statements into this unit, since\n---  otherwise the relinking and rebinding capability would be deactivated.\n-\n-package System.Parameters is\n-   pragma Pure;\n-\n-   ---------------------------------------\n-   -- Task And Stack Allocation Control --\n-   ---------------------------------------\n-\n-   type Task_Storage_Size is new Integer;\n-   --  Type used in tasking units for task storage size\n-\n-   type Size_Type is new Task_Storage_Size;\n-   --  Type used to provide task storage size to runtime\n-\n-   Unspecified_Size : constant Size_Type := Size_Type'First;\n-   --  Value used to indicate that no size type is set\n-\n-   subtype Percentage is Size_Type range -1 .. 100;\n-   Dynamic : constant Size_Type := -1;\n-   --  The secondary stack ratio is a constant between 0 and 100 which\n-   --  determines the percentage of the allocated task stack that is\n-   --  used by the secondary stack (the rest being the primary stack).\n-   --  The special value of minus one indicates that the secondary\n-   --  stack is to be allocated from the heap instead.\n-\n-   Sec_Stack_Percentage : constant Percentage := 25;\n-   --  This constant defines the handling of the secondary stack\n-\n-   Sec_Stack_Dynamic : constant Boolean := Sec_Stack_Percentage = Dynamic;\n-   --  Convenient Boolean for testing for dynamic secondary stack\n-\n-   function Default_Stack_Size return Size_Type;\n-   --  Default task stack size used if none is specified\n-\n-   function Minimum_Stack_Size return Size_Type;\n-   --  Minimum task stack size permitted\n-\n-   function Adjust_Storage_Size (Size : Size_Type) return Size_Type;\n-   --  Given the storage size stored in the TCB, return the Storage_Size\n-   --  value required by the RM for the Storage_Size attribute. The\n-   --  required adjustment is as follows:\n-   --\n-   --    when Size = Unspecified_Size, return Default_Stack_Size\n-   --    when Size < Minimum_Stack_Size, return Minimum_Stack_Size\n-   --    otherwise return given Size\n-\n-   Default_Env_Stack_Size : constant Size_Type := 14_336;\n-   --  Assumed size of the environment task, if no other information\n-   --  is available. This value is used when stack checking is\n-   --  enabled and no GNAT_STACK_LIMIT environment variable is set.\n-   --  This value is chosen as the VxWorks default stack size is 20kB,\n-   --  and a little more than 4kB is necessary for the run time.\n-\n-   Stack_Grows_Down  : constant Boolean := True;\n-   --  This constant indicates whether the stack grows up (False) or\n-   --  down (True) in memory as functions are called. It is used for\n-   --  proper implementation of the stack overflow check.\n-\n-   ----------------------------------------------\n-   -- Characteristics of types in Interfaces.C --\n-   ----------------------------------------------\n-\n-   long_bits : constant := Long_Integer'Size;\n-   --  Number of bits in type long and unsigned_long. The normal convention\n-   --  is that this is the same as type Long_Integer, but this may not be true\n-   --  of all targets.\n-\n-   ptr_bits  : constant := Standard'Address_Size;\n-   subtype C_Address is System.Address;\n-   --  Number of bits in Interfaces.C pointers, normally a standard address\n-\n-   C_Malloc_Linkname : constant String := \"__gnat_malloc\";\n-   --  Name of runtime function used to allocate such a pointer\n-\n-   ----------------------------------------------\n-   -- Behavior of Pragma Finalize_Storage_Only --\n-   ----------------------------------------------\n-\n-   --  Garbage_Collected is a Boolean constant whose value indicates the\n-   --  effect of the pragma Finalize_Storage_Entry on a controlled type.\n-\n-   --    Garbage_Collected = False\n-\n-   --      The system releases all storage on program termination only,\n-   --      but not other garbage collection occurs, so finalization calls\n-   --      are omitted only for outer level objects can be omitted if\n-   --      pragma Finalize_Storage_Only is used.\n-\n-   --    Garbage_Collected = True\n-\n-   --      The system provides full garbage collection, so it is never\n-   --      necessary to release storage for controlled objects for which\n-   --      a pragma Finalize_Storage_Only is used.\n-\n-   Garbage_Collected : constant Boolean := False;\n-   --  The storage mode for this system (release on program exit)\n-\n-   ---------------------\n-   -- Tasking Profile --\n-   ---------------------\n-\n-   --  In the following sections, constant parameters are defined to\n-   --  allow some optimizations and fine tuning within the tasking run time\n-   --  based on restrictions on the tasking features.\n-\n-   ----------------------\n-   -- Locking Strategy --\n-   ----------------------\n-\n-   Single_Lock : constant Boolean := False;\n-   --  Indicates whether a single lock should be used within the tasking\n-   --  run-time to protect internal structures. If True, a single lock\n-   --  will be used, meaning less locking/unlocking operations, but also\n-   --  more global contention. In general, Single_Lock should be set to\n-   --  True on single processor machines, and to False to multi-processor\n-   --  systems, but this can vary from application to application and also\n-   --  depends on the scheduling policy.\n-\n-   -------------------\n-   -- Task Abortion --\n-   -------------------\n-\n-   No_Abort : constant Boolean := False;\n-   --  This constant indicates whether abort statements and asynchronous\n-   --  transfer of control (ATC) are disallowed. If set to True, it is\n-   --  assumed that neither construct is used, and the run time does not\n-   --  need to defer/undefer abort and check for pending actions at\n-   --  completion points. A value of True for No_Abort corresponds to:\n-   --  pragma Restrictions (No_Abort_Statements);\n-   --  pragma Restrictions (Max_Asynchronous_Select_Nesting => 0);\n-\n-   ---------------------\n-   -- Task Attributes --\n-   ---------------------\n-\n-   Max_Attribute_Count : constant := 8;\n-   --  Number of task attributes stored in the task control block\n-\n-   --------------------\n-   -- Runtime Traces --\n-   --------------------\n-\n-   Runtime_Traces : constant Boolean := False;\n-   --  This constant indicates whether the runtime outputs traces to a\n-   --  predefined output or not (True means that traces are output).\n-   --  See System.Traces for more details.\n-\n-   -----------------------\n-   -- Task Image Length --\n-   -----------------------\n-\n-   Max_Task_Image_Length : constant := 32;\n-   --  This constant specifies the maximum length of a task's image\n-\n-   ------------------------------\n-   -- Exception Message Length --\n-   ------------------------------\n-\n-   Default_Exception_Msg_Max_Length : constant := 200;\n-   --  This constant specifies the default number of characters to allow\n-   --  in an exception message (200 is minimum required by RM 11.4.1(18)).\n-\n-end System.Parameters;"}]}