{"sha": "8b9322f0a56fc6785e0165bb99619920a67cca09", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGI5MzIyZjBhNTZmYzY3ODVlMDE2NWJiOTk2MTk5MjBhNjdjY2EwOQ==", "commit": {"author": {"name": "Monk Chiang", "email": "sh.chiang04@gmail.com", "date": "2018-04-08T14:28:44Z"}, "committer": {"name": "Chung-Ju Wu", "email": "jasonwucj@gcc.gnu.org", "date": "2018-04-08T14:28:44Z"}, "message": "[NDS32] Add intrinsic functions for interrupt control.\n\ngcc/\n\t* config.gcc (nds32le-*-*, nds32be-*-*): Add nds32/nds32_intrinsic.h\n\tinto tm_file.\n\t* config/nds32/constants.md (unspec_volatile_element): Add enum values\n\tfor interrupt control.\n\t* config/nds32/nds32-intrinsic.c: Implementation of intrinsic\n\tfunctions for interrupt control.\n\t* config/nds32/nds32-intrinsic.md: Likewise.\n\t* config/nds32/nds32_intrinsic.h: Likewise.\n\t* config/nds32/nds32.h (nds32_builtins): Likewise.\n\nFrom-SVN: r259223", "tree": {"sha": "dd8ff1a870577132451e8eafeb02254cb3770d28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dd8ff1a870577132451e8eafeb02254cb3770d28"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8b9322f0a56fc6785e0165bb99619920a67cca09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b9322f0a56fc6785e0165bb99619920a67cca09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b9322f0a56fc6785e0165bb99619920a67cca09", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b9322f0a56fc6785e0165bb99619920a67cca09/comments", "author": {"login": "monkchiang", "id": 62004175, "node_id": "MDQ6VXNlcjYyMDA0MTc1", "avatar_url": "https://avatars.githubusercontent.com/u/62004175?v=4", "gravatar_id": "", "url": "https://api.github.com/users/monkchiang", "html_url": "https://github.com/monkchiang", "followers_url": "https://api.github.com/users/monkchiang/followers", "following_url": "https://api.github.com/users/monkchiang/following{/other_user}", "gists_url": "https://api.github.com/users/monkchiang/gists{/gist_id}", "starred_url": "https://api.github.com/users/monkchiang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/monkchiang/subscriptions", "organizations_url": "https://api.github.com/users/monkchiang/orgs", "repos_url": "https://api.github.com/users/monkchiang/repos", "events_url": "https://api.github.com/users/monkchiang/events{/privacy}", "received_events_url": "https://api.github.com/users/monkchiang/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5f2a98c3f5a3ce1cb169abaf23fe7a031ae88043", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f2a98c3f5a3ce1cb169abaf23fe7a031ae88043", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f2a98c3f5a3ce1cb169abaf23fe7a031ae88043"}], "stats": {"total": 662, "additions": 660, "deletions": 2}, "files": [{"sha": "2bffb97cb30b719b803f2b413f7ee75e6fb9ec91", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b9322f0a56fc6785e0165bb99619920a67cca09/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b9322f0a56fc6785e0165bb99619920a67cca09/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8b9322f0a56fc6785e0165bb99619920a67cca09", "patch": "@@ -1,3 +1,15 @@\n+2018-04-08  Monk Chiang  <sh.chiang04@gmail.com>\n+\n+\t* config.gcc (nds32le-*-*, nds32be-*-*): Add nds32/nds32_intrinsic.h\n+\tinto tm_file.\n+\t* config/nds32/constants.md (unspec_volatile_element): Add enum values\n+\tfor interrupt control.\n+\t* config/nds32/nds32-intrinsic.c: Implementation of intrinsic\n+\tfunctions for interrupt control.\n+\t* config/nds32/nds32-intrinsic.md: Likewise.\n+\t* config/nds32/nds32_intrinsic.h: Likewise.\n+\t* config/nds32/nds32.h (nds32_builtins): Likewise.\n+\n 2018-04-08  Chung-Ju Wu  <jasonwucj@gmail.com>\n \n \t* config/nds32/nds32.c (nds32_init_machine_status,"}, {"sha": "55c314afdbd3ad936792f681807ebb88ba494e6d", "filename": "gcc/config.gcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b9322f0a56fc6785e0165bb99619920a67cca09/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b9322f0a56fc6785e0165bb99619920a67cca09/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=8b9322f0a56fc6785e0165bb99619920a67cca09", "patch": "@@ -2335,13 +2335,13 @@ msp430*-*-*)\n nds32le-*-*)\n \ttarget_cpu_default=\"0\"\n \ttm_defines=\"${tm_defines}\"\n-\ttm_file=\"dbxelf.h elfos.h newlib-stdint.h ${tm_file}\"\n+\ttm_file=\"dbxelf.h elfos.h newlib-stdint.h ${tm_file} nds32/nds32_intrinsic.h\"\n \ttmake_file=\"nds32/t-nds32 nds32/t-mlibs\"\n \t;;\n nds32be-*-*)\n \ttarget_cpu_default=\"0|MASK_BIG_ENDIAN\"\n \ttm_defines=\"${tm_defines} TARGET_BIG_ENDIAN_DEFAULT=1\"\n-\ttm_file=\"dbxelf.h elfos.h newlib-stdint.h ${tm_file}\"\n+\ttm_file=\"dbxelf.h elfos.h newlib-stdint.h ${tm_file} nds32/nds32_intrinsic.h\"\n \ttmake_file=\"nds32/t-nds32 nds32/t-mlibs\"\n \t;;\n nios2-*-*)"}, {"sha": "c54cc92b5e7bfff07e232134c70e17f7f3bf12d2", "filename": "gcc/config/nds32/constants.md", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b9322f0a56fc6785e0165bb99619920a67cca09/gcc%2Fconfig%2Fnds32%2Fconstants.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b9322f0a56fc6785e0165bb99619920a67cca09/gcc%2Fconfig%2Fnds32%2Fconstants.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fconstants.md?ref=8b9322f0a56fc6785e0165bb99619920a67cca09", "patch": "@@ -122,6 +122,18 @@\n   UNSPEC_VOLATILE_TLBOP_PB\n   UNSPEC_VOLATILE_TLBOP_INV\n   UNSPEC_VOLATILE_TLBOP_FLUA\n+  UNSPEC_VOLATILE_ENABLE_INT\n+  UNSPEC_VOLATILE_DISABLE_INT\n+  UNSPEC_VOLATILE_SET_PENDING_SWINT\n+  UNSPEC_VOLATILE_CLR_PENDING_SWINT\n+  UNSPEC_VOLATILE_CLR_PENDING_HWINT\n+  UNSPEC_VOLATILE_GET_ALL_PENDING_INT\n+  UNSPEC_VOLATILE_GET_PENDING_INT\n+  UNSPEC_VOLATILE_SET_INT_PRIORITY\n+  UNSPEC_VOLATILE_GET_INT_PRIORITY\n+  UNSPEC_VOLATILE_SET_TRIG_LEVEL\n+  UNSPEC_VOLATILE_SET_TRIG_EDGE\n+  UNSPEC_VOLATILE_GET_TRIG_TYPE\n   UNSPEC_VOLATILE_RELAX_GROUP\n   UNSPEC_VOLATILE_POP25_RETURN\n ])"}, {"sha": "a835029fd52c0d29068b383c2eae8cf8ca6ea3fb", "filename": "gcc/config/nds32/nds32-intrinsic.c", "status": "modified", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b9322f0a56fc6785e0165bb99619920a67cca09/gcc%2Fconfig%2Fnds32%2Fnds32-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b9322f0a56fc6785e0165bb99619920a67cca09/gcc%2Fconfig%2Fnds32%2Fnds32-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32-intrinsic.c?ref=8b9322f0a56fc6785e0165bb99619920a67cca09", "patch": "@@ -467,6 +467,37 @@ nds32_expand_scw_builtin (enum insn_code icode, tree exp, rtx target)\n   return target;\n }\n \n+/* Expand set int priority builtins. */\n+static rtx\n+nds32_expand_priority_builtin (enum insn_code icode, tree exp, rtx target,\n+\t\t\t       const char *name)\n+{\n+  rtx pat;\n+  rtx op0 = nds32_read_argument (exp, 0);\n+  rtx op1 = nds32_read_argument (exp, 1);\n+\n+  /* set_int_priority intrinsic function that two arguments are immediate,\n+     so check whether auguments are immedite.  */\n+\n+  if (!nds32_check_constant_argument (icode, 0, op0, name))\n+    return NULL_RTX;\n+\n+  if (!nds32_check_constant_argument (icode, 1, op1, name))\n+    return NULL_RTX;\n+\n+  op0 = nds32_legitimize_argument (icode, 0, op0);\n+  op1 = nds32_legitimize_argument (icode, 1, op1);\n+\n+  /* Emit and return the new instruction. */\n+  pat = GEN_FCN (icode) (op0, op1);\n+\n+  if (! pat)\n+    return NULL_RTX;\n+\n+  emit_insn (pat);\n+  return target;\n+}\n+\n struct builtin_description\n {\n   const enum insn_code icode;\n@@ -490,6 +521,8 @@ static struct builtin_description bdesc_noarg[] =\n   NDS32_BUILTIN(unspec_fmfcsr, \"fmfcsr\", FMFCSR)\n   NDS32_BUILTIN(unspec_get_current_sp, \"get_current_sp\", GET_CURRENT_SP)\n   NDS32_BUILTIN(unspec_return_address, \"return_address\", RETURN_ADDRESS)\n+  NDS32_BUILTIN(unspec_get_all_pending_int, \"get_all_pending_int\",\n+\t\tGET_ALL_PENDING_INT)\n };\n \n /* Intrinsics that take just one argument.  */\n@@ -526,9 +559,20 @@ static struct builtin_description bdesc_1argimm[] =\n {\n   NDS32_BUILTIN(unspec_volatile_mfsr, \"mfsr\", MFSR)\n   NDS32_BUILTIN(unspec_volatile_mfusr, \"mfsr\", MFUSR)\n+  NDS32_BUILTIN(unspec_get_pending_int, \"get_pending_int\", GET_PENDING_INT)\n+  NDS32_BUILTIN(unspec_get_int_priority, \"get_int_priority\", GET_INT_PRIORITY)\n   NDS32_NO_TARGET_BUILTIN(unspec_trap, \"trap\", TRAP)\n   NDS32_NO_TARGET_BUILTIN(unspec_break, \"break\", BREAK)\n   NDS32_NO_TARGET_BUILTIN(unspec_syscall, \"syscall\", SYSCALL)\n+  NDS32_NO_TARGET_BUILTIN(unspec_enable_int, \"enable_int\", ENABLE_INT)\n+  NDS32_NO_TARGET_BUILTIN(unspec_disable_int, \"disable_int\", DISABLE_INT)\n+  NDS32_NO_TARGET_BUILTIN(unspec_clr_pending_hwint, \"clr_pending_hwint\",\n+\t\t\t  CLR_PENDING_HWINT)\n+  NDS32_NO_TARGET_BUILTIN(unspec_set_trig_level, \"set_trig_level\",\n+\t\t\t  SET_TRIG_LEVEL)\n+  NDS32_NO_TARGET_BUILTIN(unspec_set_trig_edge, \"set_trig_edge\",\n+\t\t\t  SET_TRIG_EDGE)\n+  NDS32_BUILTIN(unspec_get_trig_type, \"get_trig_type\", GET_TRIG_TYPE)\n };\n \n /* Intrinsics that take two arguments.  */\n@@ -739,6 +783,20 @@ nds32_expand_builtin_impl (tree exp,\n       emit_insn (gen_unspec_volatile_setgie_dis ());\n       emit_insn (gen_unspec_dsb ());\n       return target;\n+    case NDS32_BUILTIN_GIE_DIS:\n+      emit_insn (gen_unspec_volatile_setgie_dis ());\n+      emit_insn (gen_unspec_dsb ());\n+      return target;\n+    case NDS32_BUILTIN_GIE_EN:\n+      emit_insn (gen_unspec_volatile_setgie_en ());\n+      emit_insn (gen_unspec_dsb ());\n+      return target;\n+    case NDS32_BUILTIN_SET_PENDING_SWINT:\n+      emit_insn (gen_unspec_set_pending_swint ());\n+      return target;\n+    case NDS32_BUILTIN_CLR_PENDING_SWINT:\n+      emit_insn (gen_unspec_clr_pending_swint ());\n+      return target;\n     case NDS32_BUILTIN_CCTL_L1D_INVALALL:\n       emit_insn (gen_cctl_l1d_invalall());\n       return target;\n@@ -775,6 +833,10 @@ nds32_expand_builtin_impl (tree exp,\n     case NDS32_BUILTIN_SCW:\n       return nds32_expand_scw_builtin (CODE_FOR_unspec_volatile_scw,\n \t\t\t\t       exp, target);\n+    case NDS32_BUILTIN_SET_INT_PRIORITY:\n+      return nds32_expand_priority_builtin (CODE_FOR_unspec_set_int_priority,\n+\t\t\t\t\t    exp, target,\n+\t\t\t\t\t    \"__nds32__set_int_priority\");\n       return target;\n     default:\n       break;\n@@ -911,6 +973,21 @@ nds32_init_builtins_impl (void)\n   /* Interrupt.  */\n   ADD_NDS32_BUILTIN0 (\"setgie_en\", void, SETGIE_EN);\n   ADD_NDS32_BUILTIN0 (\"setgie_dis\", void, SETGIE_DIS);\n+  ADD_NDS32_BUILTIN0 (\"gie_en\", void, GIE_EN);\n+  ADD_NDS32_BUILTIN0 (\"gie_dis\", void, GIE_DIS);\n+  ADD_NDS32_BUILTIN1 (\"enable_int\", void, integer, ENABLE_INT);\n+  ADD_NDS32_BUILTIN1 (\"disable_int\", void, integer, DISABLE_INT);\n+  ADD_NDS32_BUILTIN0 (\"set_pending_swint\", void, SET_PENDING_SWINT);\n+  ADD_NDS32_BUILTIN0 (\"clr_pending_swint\", void, CLR_PENDING_SWINT);\n+  ADD_NDS32_BUILTIN0 (\"get_all_pending_int\", unsigned, GET_ALL_PENDING_INT);\n+  ADD_NDS32_BUILTIN1 (\"get_pending_int\", unsigned, integer, GET_PENDING_INT);\n+  ADD_NDS32_BUILTIN1 (\"get_int_priority\", unsigned, integer, GET_INT_PRIORITY);\n+  ADD_NDS32_BUILTIN2 (\"set_int_priority\", void, integer, integer,\n+\t\t      SET_INT_PRIORITY);\n+  ADD_NDS32_BUILTIN1 (\"clr_pending_hwint\", void, integer, CLR_PENDING_HWINT);\n+  ADD_NDS32_BUILTIN1 (\"set_trig_level\", void, integer, SET_TRIG_LEVEL);\n+  ADD_NDS32_BUILTIN1 (\"set_trig_edge\", void, integer, SET_TRIG_EDGE);\n+  ADD_NDS32_BUILTIN1 (\"get_trig_type\", unsigned, integer, GET_TRIG_TYPE);\n \n   /* Load and Store  */\n   ADD_NDS32_BUILTIN1 (\"llw\", unsigned, ptr_uint, LLW);"}, {"sha": "c7b3102ab59cc0357cadc492530cbac006d2557f", "filename": "gcc/config/nds32/nds32-intrinsic.md", "status": "modified", "additions": 439, "deletions": 0, "changes": 439, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b9322f0a56fc6785e0165bb99619920a67cca09/gcc%2Fconfig%2Fnds32%2Fnds32-intrinsic.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b9322f0a56fc6785e0165bb99619920a67cca09/gcc%2Fconfig%2Fnds32%2Fnds32-intrinsic.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32-intrinsic.md?ref=8b9322f0a56fc6785e0165bb99619920a67cca09", "patch": "@@ -164,6 +164,445 @@\n   [(set_attr \"type\" \"misc\")]\n )\n \n+(define_expand \"unspec_enable_int\"\n+  [(unspec_volatile:SI [(match_operand:SI 0 \"immediate_operand\" \"\")] UNSPEC_VOLATILE_ENABLE_INT)]\n+  \"\"\n+{\n+  rtx system_reg;\n+  rtx temp_reg = gen_reg_rtx (SImode);\n+\n+  /* Set system register form nds32_intrinsic_register_names[].  */\n+  if ((INTVAL (operands[0]) >= NDS32_INT_H16)\n+      && (INTVAL (operands[0]) <= NDS32_INT_H31))\n+    {\n+      system_reg =  GEN_INT (__NDS32_REG_INT_MASK2__);\n+      operands[0] = GEN_INT (1 << (INTVAL (operands[0])));\n+    }\n+  else if ((INTVAL (operands[0]) >= NDS32_INT_H32)\n+\t   && (INTVAL (operands[0]) <= NDS32_INT_H63))\n+    {\n+      system_reg =  GEN_INT (__NDS32_REG_INT_MASK3__);\n+      operands[0] = GEN_INT (1 << (INTVAL (operands[0]) - 32));\n+    }\n+  else\n+    {\n+      system_reg =  GEN_INT (__NDS32_REG_INT_MASK__);\n+\n+      if (INTVAL (operands[0]) == NDS32_INT_SWI)\n+        operands[0] = GEN_INT (1 << 16);\n+      else if ((INTVAL (operands[0]) >= NDS32_INT_ALZ)\n+\t       && (INTVAL (operands[0]) <= NDS32_INT_DSSIM))\n+\toperands[0] = GEN_INT (1 << (INTVAL (operands[0]) - 4));\n+      else\n+\toperands[0] = GEN_INT (1 << (INTVAL (operands[0])));\n+    }\n+\n+  emit_insn (gen_unspec_volatile_mfsr (temp_reg, system_reg));\n+  emit_insn (gen_iorsi3 (temp_reg, temp_reg, operands[0]));\n+  emit_insn (gen_unspec_volatile_mtsr (temp_reg, system_reg));\n+  emit_insn (gen_unspec_dsb ());\n+  DONE;\n+})\n+\n+(define_expand \"unspec_disable_int\"\n+  [(unspec_volatile:SI [(match_operand:SI 0 \"immediate_operand\" \"\")] UNSPEC_VOLATILE_DISABLE_INT)]\n+  \"\"\n+{\n+  rtx system_reg;\n+  rtx temp_reg = gen_reg_rtx (SImode);\n+\n+  /* Set system register form nds32_intrinsic_register_names[].  */\n+  if ((INTVAL (operands[0]) >= NDS32_INT_H16)\n+      && (INTVAL (operands[0]) <= NDS32_INT_H31))\n+    {\n+      system_reg =  GEN_INT (__NDS32_REG_INT_MASK2__);\n+      operands[0] = GEN_INT (~(1 << INTVAL (operands[0])));\n+    }\n+  else if ((INTVAL (operands[0]) >= NDS32_INT_H32)\n+\t   && (INTVAL (operands[0]) <= NDS32_INT_H63))\n+    {\n+      system_reg =  GEN_INT (__NDS32_REG_INT_MASK3__);\n+      operands[0] = GEN_INT (~(1 << (INTVAL (operands[0]) - 32)));\n+    }\n+  else\n+    {\n+      system_reg =  GEN_INT (__NDS32_REG_INT_MASK__);\n+\n+      if (INTVAL (operands[0]) == NDS32_INT_SWI)\n+        operands[0] = GEN_INT (~(1 << 16));\n+      else if ((INTVAL (operands[0]) >= NDS32_INT_ALZ)\n+\t       && (INTVAL (operands[0]) <= NDS32_INT_DSSIM))\n+\toperands[0] = GEN_INT (~(1 << (INTVAL (operands[0]) - 4)));\n+      else\n+\toperands[0] = GEN_INT (~(1 << INTVAL (operands[0])));\n+    }\n+\n+  emit_insn (gen_unspec_volatile_mfsr (temp_reg, system_reg));\n+  emit_insn (gen_andsi3 (temp_reg, temp_reg, operands[0]));\n+  emit_insn (gen_unspec_volatile_mtsr (temp_reg, system_reg));\n+  emit_insn (gen_unspec_dsb ());\n+  DONE;\n+})\n+\n+(define_expand \"unspec_set_pending_swint\"\n+  [(unspec_volatile:SI [(const_int 0)] UNSPEC_VOLATILE_SET_PENDING_SWINT)]\n+  \"\"\n+{\n+  /* Get $INT_PEND system register form nds32_intrinsic_register_names[]  */\n+  rtx system_reg =  GEN_INT (__NDS32_REG_INT_PEND__);\n+  rtx temp_reg = gen_reg_rtx (SImode);\n+\n+  emit_insn (gen_unspec_volatile_mfsr (temp_reg, system_reg));\n+  emit_insn (gen_iorsi3 (temp_reg, temp_reg, GEN_INT (65536)));\n+  emit_insn (gen_unspec_volatile_mtsr (temp_reg, system_reg));\n+  emit_insn (gen_unspec_dsb ());\n+  DONE;\n+})\n+\n+(define_expand \"unspec_clr_pending_swint\"\n+  [(unspec_volatile:SI [(const_int 0)] UNSPEC_VOLATILE_CLR_PENDING_SWINT)]\n+  \"\"\n+{\n+  /* Get $INT_PEND system register form nds32_intrinsic_register_names[]  */\n+  rtx system_reg =  GEN_INT (__NDS32_REG_INT_PEND__);\n+  rtx temp_reg = gen_reg_rtx (SImode);\n+\n+  emit_insn (gen_unspec_volatile_mfsr (temp_reg, system_reg));\n+  emit_insn (gen_andsi3 (temp_reg, temp_reg, GEN_INT (~(1 << 16))));\n+  emit_insn (gen_unspec_volatile_mtsr (temp_reg, system_reg));\n+  emit_insn (gen_unspec_dsb ());\n+  DONE;\n+})\n+\n+(define_expand \"unspec_clr_pending_hwint\"\n+  [(unspec_volatile:SI [(match_operand:SI 0 \"immediate_operand\" \"\")] UNSPEC_VOLATILE_CLR_PENDING_HWINT)]\n+  \"\"\n+{\n+  rtx system_reg = NULL_RTX;\n+  rtx temp_reg = gen_reg_rtx (SImode);\n+  rtx clr_hwint;\n+  unsigned offset = 0;\n+\n+  /* Set system register form nds32_intrinsic_register_names[].  */\n+  if ((INTVAL (operands[0]) >= NDS32_INT_H0)\n+      && (INTVAL (operands[0]) <= NDS32_INT_H15))\n+    {\n+      system_reg = GEN_INT (__NDS32_REG_INT_PEND__);\n+    }\n+  else if ((INTVAL (operands[0]) >= NDS32_INT_H16)\n+\t   && (INTVAL (operands[0]) <= NDS32_INT_H31))\n+    {\n+      system_reg = GEN_INT (__NDS32_REG_INT_PEND2__);\n+    }\n+  else if ((INTVAL (operands[0]) >= NDS32_INT_H32)\n+\t   && (INTVAL (operands[0]) <= NDS32_INT_H63))\n+    {\n+      system_reg = GEN_INT (__NDS32_REG_INT_PEND3__);\n+      offset = 32;\n+    }\n+  else\n+    error (\"__nds32__clr_pending_hwint not support NDS32_INT_SWI,\"\n+\t   \" NDS32_INT_ALZ, NDS32_INT_IDIVZE, NDS32_INT_DSSIM\");\n+\n+  /* $INT_PEND type is write one clear.  */\n+  clr_hwint = GEN_INT (1 << (INTVAL (operands[0]) - offset));\n+\n+  if (system_reg != NULL_RTX)\n+    {\n+      emit_move_insn (temp_reg, clr_hwint);\n+      emit_insn (gen_unspec_volatile_mtsr (temp_reg, system_reg));\n+      emit_insn (gen_unspec_dsb ());\n+    }\n+  DONE;\n+})\n+\n+(define_expand \"unspec_get_all_pending_int\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"\")\n+\t(unspec_volatile:SI [(const_int 0)] UNSPEC_VOLATILE_GET_ALL_PENDING_INT))]\n+  \"\"\n+{\n+  rtx system_reg = GEN_INT (__NDS32_REG_INT_PEND__);\n+  emit_insn (gen_unspec_volatile_mfsr (operands[0], system_reg));\n+  emit_insn (gen_unspec_dsb ());\n+  DONE;\n+})\n+\n+(define_expand \"unspec_get_pending_int\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"\")\n+\t(unspec_volatile:SI [(match_operand:SI 1 \"immediate_operand\" \"\")] UNSPEC_VOLATILE_GET_PENDING_INT))]\n+  \"\"\n+{\n+  rtx system_reg = NULL_RTX;\n+\n+  /* Set system register form nds32_intrinsic_register_names[].  */\n+  if ((INTVAL (operands[1]) >= NDS32_INT_H0)\n+      && (INTVAL (operands[1]) <= NDS32_INT_H15))\n+    {\n+      system_reg = GEN_INT (__NDS32_REG_INT_PEND__);\n+      operands[2] = GEN_INT (31 - INTVAL (operands[1]));\n+    }\n+  else if (INTVAL (operands[1]) == NDS32_INT_SWI)\n+    {\n+      system_reg = GEN_INT (__NDS32_REG_INT_PEND__);\n+      operands[2] = GEN_INT (15);\n+    }\n+  else if ((INTVAL (operands[1]) >= NDS32_INT_H16)\n+\t   && (INTVAL (operands[1]) <= NDS32_INT_H31))\n+    {\n+      system_reg = GEN_INT (__NDS32_REG_INT_PEND2__);\n+      operands[2] = GEN_INT (31 - INTVAL (operands[1]));\n+    }\n+  else if ((INTVAL (operands[1]) >= NDS32_INT_H32)\n+\t   && (INTVAL (operands[1]) <= NDS32_INT_H63))\n+    {\n+      system_reg = GEN_INT (__NDS32_REG_INT_PEND3__);\n+      operands[2] = GEN_INT (31 - (INTVAL (operands[1]) - 32));\n+    }\n+  else\n+    error (\"get_pending_int not support NDS32_INT_ALZ,\"\n+\t   \" NDS32_INT_IDIVZE, NDS32_INT_DSSIM\");\n+\n+  /* mfsr op0, sytem_reg  */\n+  if (system_reg != NULL_RTX)\n+    {\n+      emit_insn (gen_unspec_volatile_mfsr (operands[0], system_reg));\n+      emit_insn (gen_ashlsi3 (operands[0], operands[0], operands[2]));\n+      emit_insn (gen_lshrsi3 (operands[0], operands[0], GEN_INT (31)));\n+      emit_insn (gen_unspec_dsb ());\n+    }\n+  DONE;\n+})\n+\n+(define_expand \"unspec_set_int_priority\"\n+  [(unspec_volatile:SI [(match_operand:SI 0 \"immediate_operand\" \"\")\n+\t\t\t(match_operand:SI 1 \"immediate_operand\" \"\")] UNSPEC_VOLATILE_SET_INT_PRIORITY)]\n+  \"\"\n+{\n+  rtx system_reg = NULL_RTX;\n+  rtx priority = NULL_RTX;\n+  rtx mask = NULL_RTX;\n+  rtx temp_reg = gen_reg_rtx (SImode);\n+  rtx mask_reg = gen_reg_rtx (SImode);\n+  rtx set_reg = gen_reg_rtx (SImode);\n+  unsigned offset = 0;\n+\n+  /* Get system register form nds32_intrinsic_register_names[].  */\n+  if (INTVAL (operands[0]) <= NDS32_INT_H15)\n+    {\n+      system_reg =  GEN_INT (__NDS32_REG_INT_PRI__);\n+      offset = 0;\n+    }\n+  else if (INTVAL (operands[0]) >= NDS32_INT_H16\n+\t   && INTVAL (operands[0]) <= NDS32_INT_H31)\n+    {\n+      system_reg =  GEN_INT (__NDS32_REG_INT_PRI2__);\n+      /* The $INT_PRI2 first bit correspond to H16, so need\n+\t subtract 16.  */\n+      offset = 16;\n+    }\n+  else if (INTVAL (operands[0]) >= NDS32_INT_H32\n+\t   && INTVAL (operands[0]) <= NDS32_INT_H47)\n+    {\n+      system_reg =  GEN_INT (__NDS32_REG_INT_PRI3__);\n+      /* The $INT_PRI3 first bit correspond to H32, so need\n+\t subtract 32.  */\n+      offset = 32;\n+    }\n+  else if (INTVAL (operands[0]) >= NDS32_INT_H48\n+\t   && INTVAL (operands[0]) <= NDS32_INT_H63)\n+    {\n+      system_reg =  GEN_INT (__NDS32_REG_INT_PRI4__);\n+      /* The $INT_PRI3 first bit correspond to H48, so need\n+\t subtract 48.  */\n+      offset = 48;\n+    }\n+  else\n+    error (\"set_int_priority not support NDS32_INT_SWI,\"\n+\t   \" NDS32_INT_ALZ, NDS32_INT_IDIVZE, NDS32_INT_DSSIM\");\n+\n+  mask = GEN_INT (~(3 << 2 * (INTVAL (operands[0]) - offset)));\n+  priority = GEN_INT ((int) (INTVAL (operands[1])\n+\t\t\t     << ((INTVAL (operands[0]) - offset) * 2)));\n+\n+  if (system_reg != NULL_RTX)\n+    {\n+      emit_move_insn (mask_reg, mask);\n+      emit_move_insn (set_reg, priority);\n+      emit_insn (gen_unspec_volatile_mfsr (temp_reg, system_reg));\n+      emit_insn (gen_andsi3 (temp_reg, temp_reg, mask_reg));\n+      emit_insn (gen_iorsi3 (temp_reg, temp_reg, set_reg));\n+      emit_insn (gen_unspec_volatile_mtsr (temp_reg, system_reg));\n+      emit_insn (gen_unspec_dsb ());\n+    }\n+  DONE;\n+})\n+\n+(define_expand \"unspec_get_int_priority\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"\")\n+\t(unspec_volatile:SI [(match_operand:SI 1 \"immediate_operand\" \"\")] UNSPEC_VOLATILE_GET_INT_PRIORITY))]\n+  \"\"\n+{\n+  rtx system_reg = NULL_RTX;\n+  rtx priority = NULL_RTX;\n+  unsigned offset = 0;\n+\n+  /* Get system register form nds32_intrinsic_register_names[]  */\n+  if (INTVAL (operands[1]) <= NDS32_INT_H15)\n+    {\n+      system_reg =  GEN_INT (__NDS32_REG_INT_PRI__);\n+      offset = 0;\n+    }\n+  else if (INTVAL (operands[1]) >= NDS32_INT_H16\n+\t   && INTVAL (operands[1]) <= NDS32_INT_H31)\n+    {\n+      system_reg =  GEN_INT (__NDS32_REG_INT_PRI2__);\n+      /* The $INT_PRI2 first bit correspond to H16, so need\n+\t subtract 16.  */\n+      offset = 16;\n+    }\n+  else if (INTVAL (operands[1]) >= NDS32_INT_H32\n+\t   && INTVAL (operands[1]) <= NDS32_INT_H47)\n+    {\n+      system_reg =  GEN_INT (__NDS32_REG_INT_PRI3__);\n+      /* The $INT_PRI3 first bit correspond to H32, so need\n+\t subtract 32.  */\n+      offset = 32;\n+    }\n+  else if (INTVAL (operands[1]) >= NDS32_INT_H48\n+\t   && INTVAL (operands[1]) <= NDS32_INT_H63)\n+    {\n+      system_reg =  GEN_INT (__NDS32_REG_INT_PRI4__);\n+      /* The $INT_PRI4 first bit correspond to H48, so need\n+\t subtract 48.  */\n+      offset = 48;\n+    }\n+  else\n+    error (\"set_int_priority not support NDS32_INT_SWI,\"\n+\t   \" NDS32_INT_ALZ, NDS32_INT_IDIVZE, NDS32_INT_DSSIM\");\n+\n+  priority = GEN_INT (31 - 2 * (INTVAL (operands[1]) - offset));\n+\n+  if (system_reg != NULL_RTX)\n+    {\n+      emit_insn (gen_unspec_volatile_mfsr (operands[0], system_reg));\n+      emit_insn (gen_ashlsi3 (operands[0], operands[0], priority));\n+      emit_insn (gen_lshrsi3 (operands[0], operands[0], GEN_INT (30)));\n+      emit_insn (gen_unspec_dsb ());\n+    }\n+  DONE;\n+})\n+\n+(define_expand \"unspec_set_trig_level\"\n+  [(unspec_volatile:SI [(match_operand:SI 0 \"immediate_operand\" \"\")] UNSPEC_VOLATILE_SET_TRIG_LEVEL)]\n+  \"\"\n+{\n+  rtx system_reg = NULL_RTX;\n+  rtx temp_reg = gen_reg_rtx (SImode);\n+  rtx set_level;\n+  unsigned offset = 0;\n+\n+  if (INTVAL (operands[0]) >= NDS32_INT_H0\n+      && INTVAL (operands[0]) <= NDS32_INT_H31)\n+    {\n+      system_reg = GEN_INT (__NDS32_REG_INT_TRIGGER__);\n+      offset = 0;\n+    }\n+  else if (INTVAL (operands[0]) >= NDS32_INT_H32\n+\t   && INTVAL (operands[0]) <= NDS32_INT_H63)\n+    {\n+      system_reg = GEN_INT (__NDS32_REG_INT_TRIGGER2__);\n+      offset = 32;\n+    }\n+  else\n+    error (\"__nds32__set_trig_type_level not support NDS32_INT_SWI,\"\n+\t   \" NDS32_INT_ALZ, NDS32_INT_IDIVZE, NDS32_INT_DSSIM\");\n+\n+  if (system_reg != NULL_RTX)\n+    {\n+      /* TRIGGER register, 0 mean level triggered and 1 mean edge triggered. */\n+      set_level = GEN_INT (~(1 << (INTVAL (operands[0]) - offset)));\n+\n+      emit_insn (gen_unspec_volatile_mfsr (temp_reg, system_reg));\n+      emit_insn (gen_andsi3 (temp_reg, temp_reg, set_level));\n+      emit_insn (gen_unspec_volatile_mtsr (temp_reg, system_reg));\n+    }\n+  DONE;\n+})\n+\n+(define_expand \"unspec_set_trig_edge\"\n+  [(unspec_volatile:SI [(match_operand:SI 0 \"immediate_operand\" \"\")] UNSPEC_VOLATILE_SET_TRIG_EDGE)]\n+  \"\"\n+{\n+  rtx system_reg = NULL_RTX;\n+  rtx temp_reg = gen_reg_rtx (SImode);\n+  rtx set_level;\n+  unsigned offset = 0;\n+\n+  if (INTVAL (operands[0]) >= NDS32_INT_H0\n+      && INTVAL (operands[0]) <= NDS32_INT_H31)\n+    {\n+      system_reg = GEN_INT (__NDS32_REG_INT_TRIGGER__);\n+      offset = 0;\n+    }\n+  else if (INTVAL (operands[0]) >= NDS32_INT_H32\n+\t   && INTVAL (operands[0]) <= NDS32_INT_H63)\n+    {\n+      system_reg = GEN_INT (__NDS32_REG_INT_TRIGGER2__);\n+      offset = 32;\n+    }\n+  else\n+    error (\"__nds32__set_trig_type_edge not support NDS32_INT_SWI,\"\n+\t   \" NDS32_INT_ALZ, NDS32_INT_IDIVZE, NDS32_INT_DSSIM\");\n+\n+  if (system_reg != NULL_RTX)\n+    {\n+      /* TRIGGER register, 0 mean level triggered and 1 mean edge triggered. */\n+      set_level = GEN_INT ((1 << (INTVAL (operands[0]) - offset)));\n+\n+      emit_insn (gen_unspec_volatile_mfsr (temp_reg, system_reg));\n+      emit_insn (gen_iorsi3 (temp_reg, temp_reg, set_level));\n+      emit_insn (gen_unspec_volatile_mtsr (temp_reg, system_reg));\n+    }\n+  DONE;\n+})\n+\n+(define_expand \"unspec_get_trig_type\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"\")\n+\t(unspec_volatile:SI [(match_operand:SI 1 \"immediate_operand\" \"\")] UNSPEC_VOLATILE_GET_TRIG_TYPE))]\n+  \"\"\n+{\n+  rtx system_reg = NULL_RTX;\n+  rtx trig_type;\n+  unsigned offset = 0;\n+\n+  if (INTVAL (operands[1]) >= NDS32_INT_H0\n+      && INTVAL (operands[1]) <= NDS32_INT_H31)\n+    {\n+      system_reg = GEN_INT (__NDS32_REG_INT_TRIGGER__);\n+      offset = 0;\n+    }\n+  else if (INTVAL (operands[1]) >= NDS32_INT_H32\n+\t   && INTVAL (operands[1]) <= NDS32_INT_H63)\n+    {\n+      system_reg = GEN_INT (__NDS32_REG_INT_TRIGGER2__);\n+      offset = 32;\n+    }\n+  else\n+    error (\"__nds32__get_trig_type not support NDS32_INT_SWI,\"\n+\t   \" NDS32_INT_ALZ, NDS32_INT_IDIVZE, NDS32_INT_DSSIM\");\n+\n+  if (system_reg != NULL_RTX)\n+    {\n+      trig_type = GEN_INT (31 - (INTVAL (operands[1]) - offset));\n+\n+      emit_insn (gen_unspec_volatile_mfsr (operands[0], system_reg));\n+      emit_insn (gen_ashlsi3 (operands[0], operands[0], trig_type));\n+      emit_insn (gen_lshrsi3 (operands[0], operands[0], GEN_INT (31)));\n+      emit_insn (gen_unspec_dsb ());\n+    }\n+  DONE;\n+})\n+\n ;; ------------------------------------------------------------------------\n \n ;; Cache Synchronization Instructions"}, {"sha": "8203ab82d895a357eb3dd654f53ff2830cc07934", "filename": "gcc/config/nds32/nds32.h", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b9322f0a56fc6785e0165bb99619920a67cca09/gcc%2Fconfig%2Fnds32%2Fnds32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b9322f0a56fc6785e0165bb99619920a67cca09/gcc%2Fconfig%2Fnds32%2Fnds32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.h?ref=8b9322f0a56fc6785e0165bb99619920a67cca09", "patch": "@@ -498,6 +498,20 @@ enum nds32_builtins\n   NDS32_BUILTIN_UASTORE_HW,\n   NDS32_BUILTIN_UASTORE_W,\n   NDS32_BUILTIN_UASTORE_DW,\n+  NDS32_BUILTIN_GIE_DIS,\n+  NDS32_BUILTIN_GIE_EN,\n+  NDS32_BUILTIN_ENABLE_INT,\n+  NDS32_BUILTIN_DISABLE_INT,\n+  NDS32_BUILTIN_SET_PENDING_SWINT,\n+  NDS32_BUILTIN_CLR_PENDING_SWINT,\n+  NDS32_BUILTIN_CLR_PENDING_HWINT,\n+  NDS32_BUILTIN_GET_ALL_PENDING_INT,\n+  NDS32_BUILTIN_GET_PENDING_INT,\n+  NDS32_BUILTIN_SET_INT_PRIORITY,\n+  NDS32_BUILTIN_GET_INT_PRIORITY,\n+  NDS32_BUILTIN_SET_TRIG_LEVEL,\n+  NDS32_BUILTIN_SET_TRIG_EDGE,\n+  NDS32_BUILTIN_GET_TRIG_TYPE,\n   NDS32_BUILTIN_COUNT\n };\n "}, {"sha": "a299c6a1ed7ffc891705c83c51721074af54f011", "filename": "gcc/config/nds32/nds32_intrinsic.h", "status": "modified", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b9322f0a56fc6785e0165bb99619920a67cca09/gcc%2Fconfig%2Fnds32%2Fnds32_intrinsic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b9322f0a56fc6785e0165bb99619920a67cca09/gcc%2Fconfig%2Fnds32%2Fnds32_intrinsic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32_intrinsic.h?ref=8b9322f0a56fc6785e0165bb99619920a67cca09", "patch": "@@ -238,6 +238,78 @@ enum nds32_dpref\n \n /* ------------------------------------------------------------------------ */\n \n+/* Define interrupt number for intrinsic function.  */\n+#define NDS32_INT_H0 0\n+#define NDS32_INT_H1 1\n+#define NDS32_INT_H2 2\n+#define NDS32_INT_H3 3\n+#define NDS32_INT_H4 4\n+#define NDS32_INT_H5 5\n+#define NDS32_INT_H6 6\n+#define NDS32_INT_H7 7\n+#define NDS32_INT_H8 8\n+#define NDS32_INT_H9 9\n+#define NDS32_INT_H10 10\n+#define NDS32_INT_H11 11\n+#define NDS32_INT_H12 12\n+#define NDS32_INT_H13 13\n+#define NDS32_INT_H14 14\n+#define NDS32_INT_H15 15\n+#define NDS32_INT_H16 16\n+#define NDS32_INT_H17 17\n+#define NDS32_INT_H18 18\n+#define NDS32_INT_H19 19\n+#define NDS32_INT_H20 20\n+#define NDS32_INT_H21 21\n+#define NDS32_INT_H22 22\n+#define NDS32_INT_H23 23\n+#define NDS32_INT_H24 24\n+#define NDS32_INT_H25 25\n+#define NDS32_INT_H26 26\n+#define NDS32_INT_H27 27\n+#define NDS32_INT_H28 28\n+#define NDS32_INT_H29 29\n+#define NDS32_INT_H30 30\n+#define NDS32_INT_H31 31\n+#define NDS32_INT_H32 32\n+#define NDS32_INT_H33 33\n+#define NDS32_INT_H34 34\n+#define NDS32_INT_H35 35\n+#define NDS32_INT_H36 36\n+#define NDS32_INT_H37 37\n+#define NDS32_INT_H38 38\n+#define NDS32_INT_H39 39\n+#define NDS32_INT_H40 40\n+#define NDS32_INT_H41 41\n+#define NDS32_INT_H42 42\n+#define NDS32_INT_H43 43\n+#define NDS32_INT_H44 44\n+#define NDS32_INT_H45 45\n+#define NDS32_INT_H46 46\n+#define NDS32_INT_H47 47\n+#define NDS32_INT_H48 48\n+#define NDS32_INT_H49 49\n+#define NDS32_INT_H50 50\n+#define NDS32_INT_H51 51\n+#define NDS32_INT_H52 52\n+#define NDS32_INT_H53 53\n+#define NDS32_INT_H54 54\n+#define NDS32_INT_H55 55\n+#define NDS32_INT_H56 56\n+#define NDS32_INT_H57 57\n+#define NDS32_INT_H58 58\n+#define NDS32_INT_H59 59\n+#define NDS32_INT_H60 60\n+#define NDS32_INT_H61 61\n+#define NDS32_INT_H62 62\n+#define NDS32_INT_H63 63\n+#define NDS32_INT_SWI 64\n+#define NDS32_INT_ALZ 65\n+#define NDS32_INT_IDIVZE 66\n+#define NDS32_INT_DSSIM 67\n+\n+/* ------------------------------------------------------------------------ */\n+\n /* Define intrinsic register name macro for compatibility.  */\n #define NDS32_SR_CPU_VER               __NDS32_REG_CPU_VER__\n #define NDS32_SR_ICM_CFG               __NDS32_REG_ICM_CFG__\n@@ -502,6 +574,9 @@ enum nds32_dpref\n #define __nds32__setend_little() \\\n   (__builtin_nds32_setend_little())\n #define __nds32__setgie_en() \\\n+  (__builtin_nds32_setgie_en())\n+#define __nds32__setgie_dis() \\\n+  (__builtin_nds32_setgie_dis())\n \n #define __nds32__jr_itoff(a) \\\n   (__builtin_nds32_jr_itoff ((a)))\n@@ -616,4 +691,33 @@ enum nds32_dpref\n #define __nds32__tlbop_flua() \\\n (__builtin_nds32_tlbop_flua())\n \n+#define __nds32__gie_dis() \\\n+  (__builtin_nds32_gie_dis())\n+#define __nds32__gie_en() \\\n+  (__builtin_nds32_gie_en())\n+#define __nds32__enable_int(a) \\\n+  (__builtin_nds32_enable_int ((a)))\n+#define __nds32__disable_int(a) \\\n+  (__builtin_nds32_disable_int ((a)))\n+#define __nds32__set_pending_swint() \\\n+  (__builtin_nds32_set_pending_swint())\n+#define __nds32__clr_pending_swint() \\\n+  (__builtin_nds32_clr_pending_swint())\n+#define __nds32__clr_pending_hwint(a) \\\n+  (__builtin_nds32_clr_pending_hwint(a))\n+#define __nds32__get_all_pending_int() \\\n+  (__builtin_nds32_get_all_pending_int())\n+#define __nds32__get_pending_int(a) \\\n+  (__builtin_nds32_get_pending_int ((a)))\n+#define __nds32__set_int_priority(a, b) \\\n+  (__builtin_nds32_set_int_priority ((a), (b)))\n+#define __nds32__get_int_priority(a) \\\n+  (__builtin_nds32_get_int_priority ((a)))\n+#define __nds32__set_trig_type_level(a) \\\n+  (__builtin_nds32_set_trig_level(a))\n+#define __nds32__set_trig_type_edge(a) \\\n+  (__builtin_nds32_set_trig_edge(a))\n+#define __nds32__get_trig_type(a) \\\n+  (__builtin_nds32_get_trig_type ((a)))\n+\n #endif /* nds32_intrinsic.h */"}]}