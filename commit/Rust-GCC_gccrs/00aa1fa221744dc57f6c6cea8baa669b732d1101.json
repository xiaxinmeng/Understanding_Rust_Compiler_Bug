{"sha": "00aa1fa221744dc57f6c6cea8baa669b732d1101", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDBhYTFmYTIyMTc0NGRjNTdmNmM2Y2VhOGJhYTY2OWI3MzJkMTEwMQ==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2017-08-18T09:38:38Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2017-08-18T09:38:38Z"}, "message": "Add warn_if_not_aligned attribute\n\nAdd warn_if_not_aligned attribute as well as  command line options:\n-Wif-not-aligned and -Wpacked-not-aligned.\n\n__attribute__((warn_if_not_aligned(N))) causes compiler to issue a\nwarning if the field in a struct or union is not aligned to N:\n\ntypedef unsigned long long __u64\n  __attribute__((aligned(4),warn_if_not_aligned(8)));\n\nstruct foo\n{\n  int i1;\n  int i2;\n  __u64 x;\n};\n\n__u64 is aligned to 4 bytes.  But inside struct foo, __u64 should be\naligned at 8 bytes.  It is used to define struct foo in such a way that\nstruct foo has the same layout and x has the same alignment when __u64\nis aligned at either 4 or 8 bytes.\n\nSince struct foo is normally aligned to 4 bytes, a warning will be issued:\n\nwarning: alignment 4 of 'struct foo' is less than 8\n\nAlign struct foo to 8 bytes:\n\nstruct foo\n{\n  int i1;\n  int i2;\n  __u64 x;\n} __attribute__((aligned(8)));\n\nsilences the warning.  It also warns the field with misaligned offset:\n\nstruct foo\n{\n  int i1;\n  int i2;\n  int i3;\n  __u64 x;\n} __attribute__((aligned(8)));\n\nwarning: 'x' offset 12 in 'struct foo' isn't aligned to 8\n\nThis warning is controlled by -Wif-not-aligned and is enabled by default.\n\nWhen -Wpacked-not-aligned is used, the same warning is also issued for\nthe field with explicitly specified alignment in a packed struct or union:\n\nstruct __attribute__ ((aligned (8))) S8 { char a[8]; };\nstruct __attribute__ ((packed)) S {\n  struct S8 s8;\n};\n\nwarning: alignment 1 of 'struct S' is less than 8\n\nThis warning is disabled by default and enabled by -Wall.\n\ngcc/\n\n\tPR c/53037\n\t* print-tree.c (print_node): Support DECL_WARN_IF_NOT_ALIGN\n\tand TYPE_WARN_IF_NOT_ALIGN.\n\t* stor-layout.c (do_type_align): Merge DECL_WARN_IF_NOT_ALIGN.\n\t(handle_warn_if_not_align): New.\n\t(place_union_field): Call handle_warn_if_not_align.\n\t(place_field): Call handle_warn_if_not_align.  Copy\n\tTYPE_WARN_IF_NOT_ALIGN.\n\t(finish_builtin_struct): Copy TYPE_WARN_IF_NOT_ALIGN.\n\t(layout_type): Likewise.\n\t* tree-core.h (tree_type_common): Add warn_if_not_align.  Set\n\tspare to 18.\n\t(tree_decl_common): Add warn_if_not_align.\n\t* tree.c (build_range_type_1): Copy TYPE_WARN_IF_NOT_ALIGN.\n\t* tree.h (TYPE_WARN_IF_NOT_ALIGN): New.\n\t(SET_TYPE_WARN_IF_NOT_ALIGN): Likewise.\n\t(DECL_WARN_IF_NOT_ALIGN): Likewise.\n\t(SET_DECL_WARN_IF_NOT_ALIGN): Likewise.\n\t* doc/extend.texi: Document warn_if_not_aligned attribute.\n\t* doc/invoke.texi: Document -Wif-not-aligned and\n\t-Wpacked-not-aligned.\n\ngcc/c-family/\n\n\tPR c/53037\n\t* c-attribs.c (handle_warn_if_not_aligned_attribute): New.\n\t(c_common_attribute_table): Add warn_if_not_aligned.\n\t(handle_aligned_attribute): Renamed to ...\n\t(common_handle_aligned_attribute): Remove argument, name, and add\n\targument, warn_if_not_aligned.  Handle warn_if_not_aligned.\n\t(handle_aligned_attribute): New.\n\t* c.opt: Add -Wif-not-aligned and -Wpacked-not-aligned.\n\ngcc/c/\n\n\tPR c/53037\n\t* c-decl.c (merge_decls): Also merge DECL_WARN_IF_NOT_ALIGN.\n\t(check_bitfield_type_and_width): Don't allow bit-field with\n\twarn_if_not_aligned type.\n\ngcc/cp/\n\n\tPR c/53037\n\t* decl.c (duplicate_decls): Also merge DECL_WARN_IF_NOT_ALIGN.\n\t* decl2.c (grokbitfield): Don't allow bit-field with\n\twarn_if_not_aligned type.\n\ngcc/testsuite/\n\n\tPR c/53037\n\t* c-c++-common/pr53037-5.c: New test.\n\t* g++.dg/pr53037-1.C: Likewise.\n\t* g++.dg/pr53037-2.C: Likewise.\n\t* g++.dg/pr53037-3.C: Likewise.\n\t* g++.dg/pr53037-4.C: Likewise.\n\t* gcc.dg/pr53037-1.c: Likewise.\n\t* gcc.dg/pr53037-2.c: Likewise.\n\t* gcc.dg/pr53037-3.c: Likewise.\n\t* gcc.dg/pr53037-4.c: Likewise.\n\nFrom-SVN: r251180", "tree": {"sha": "1dbbe35f67ab9fc825f52d4cbe56fbeed0afafa3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1dbbe35f67ab9fc825f52d4cbe56fbeed0afafa3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/00aa1fa221744dc57f6c6cea8baa669b732d1101", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00aa1fa221744dc57f6c6cea8baa669b732d1101", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00aa1fa221744dc57f6c6cea8baa669b732d1101", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00aa1fa221744dc57f6c6cea8baa669b732d1101/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c32bd276c68f5089b7e8ee58a8bc85c9bd543455", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c32bd276c68f5089b7e8ee58a8bc85c9bd543455", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c32bd276c68f5089b7e8ee58a8bc85c9bd543455"}], "stats": {"total": 823, "additions": 809, "deletions": 14}, "files": [{"sha": "1fb9dab36d9e4d7ff3cc86cfb8be986a166bf2ef", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00aa1fa221744dc57f6c6cea8baa669b732d1101/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00aa1fa221744dc57f6c6cea8baa669b732d1101/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=00aa1fa221744dc57f6c6cea8baa669b732d1101", "patch": "@@ -1,3 +1,27 @@\n+2017-08-18  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR c/53037\n+\t* print-tree.c (print_node): Support DECL_WARN_IF_NOT_ALIGN\n+\tand TYPE_WARN_IF_NOT_ALIGN.\n+\t* stor-layout.c (do_type_align): Merge DECL_WARN_IF_NOT_ALIGN.\n+\t(handle_warn_if_not_align): New.\n+\t(place_union_field): Call handle_warn_if_not_align.\n+\t(place_field): Call handle_warn_if_not_align.  Copy\n+\tTYPE_WARN_IF_NOT_ALIGN.\n+\t(finish_builtin_struct): Copy TYPE_WARN_IF_NOT_ALIGN.\n+\t(layout_type): Likewise.\n+\t* tree-core.h (tree_type_common): Add warn_if_not_align.  Set\n+\tspare to 18.\n+\t(tree_decl_common): Add warn_if_not_align.\n+\t* tree.c (build_range_type_1): Copy TYPE_WARN_IF_NOT_ALIGN.\n+\t* tree.h (TYPE_WARN_IF_NOT_ALIGN): New.\n+\t(SET_TYPE_WARN_IF_NOT_ALIGN): Likewise.\n+\t(DECL_WARN_IF_NOT_ALIGN): Likewise.\n+\t(SET_DECL_WARN_IF_NOT_ALIGN): Likewise.\n+\t* doc/extend.texi: Document warn_if_not_aligned attribute.\n+\t* doc/invoke.texi: Document -Wif-not-aligned and\n+\t-Wpacked-not-aligned.\n+\n 2017-08-17  Martin Liska  <mliska@suse.cz>\n \n \tPR bootstrap/81864"}, {"sha": "aba158754d6f9a53d7ba14656914e3159bc89bae", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00aa1fa221744dc57f6c6cea8baa669b732d1101/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00aa1fa221744dc57f6c6cea8baa669b732d1101/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=00aa1fa221744dc57f6c6cea8baa669b732d1101", "patch": "@@ -1,3 +1,14 @@\n+2017-08-18  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR c/53037\n+\t* c-attribs.c (handle_warn_if_not_aligned_attribute): New.\n+\t(c_common_attribute_table): Add warn_if_not_aligned.\n+\t(handle_aligned_attribute): Renamed to ...\n+\t(common_handle_aligned_attribute): Remove argument, name, and add\n+\targument, warn_if_not_aligned.  Handle warn_if_not_aligned.\n+\t(handle_aligned_attribute): New.\n+\t* c.opt: Add -Wif-not-aligned and -Wpacked-not-aligned.\n+\n 2017-08-14  Martin Sebor  <msebor@redhat.com>\n \n \tPR c/81117"}, {"sha": "5f79468407f6d203d535dc8f384ab502de6fed18", "filename": "gcc/c-family/c-attribs.c", "status": "modified", "additions": 63, "deletions": 8, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00aa1fa221744dc57f6c6cea8baa669b732d1101/gcc%2Fc-family%2Fc-attribs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00aa1fa221744dc57f6c6cea8baa669b732d1101/gcc%2Fc-family%2Fc-attribs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-attribs.c?ref=00aa1fa221744dc57f6c6cea8baa669b732d1101", "patch": "@@ -89,6 +89,8 @@ static tree handle_destructor_attribute (tree *, tree, tree, int, bool *);\n static tree handle_mode_attribute (tree *, tree, tree, int, bool *);\n static tree handle_section_attribute (tree *, tree, tree, int, bool *);\n static tree handle_aligned_attribute (tree *, tree, tree, int, bool *);\n+static tree handle_warn_if_not_aligned_attribute (tree *, tree, tree,\n+\t\t\t\t\t\t  int, bool *);\n static tree handle_weak_attribute (tree *, tree, tree, int, bool *) ;\n static tree handle_noplt_attribute (tree *, tree, tree, int, bool *) ;\n static tree handle_alias_ifunc_attribute (bool, tree *, tree, tree, bool *);\n@@ -217,6 +219,9 @@ const struct attribute_spec c_common_attribute_table[] =\n \t\t\t      handle_section_attribute, false },\n   { \"aligned\",                0, 1, false, false, false,\n \t\t\t      handle_aligned_attribute, false },\n+  { \"warn_if_not_aligned\",    0, 1, false, false, false,\n+\t\t\t      handle_warn_if_not_aligned_attribute,\n+\t\t\t      false },\n   { \"weak\",                   0, 0, true,  false, false,\n \t\t\t      handle_weak_attribute, false },\n   { \"noplt\",                   0, 0, true,  false, false,\n@@ -1666,12 +1671,13 @@ check_cxx_fundamental_alignment_constraints (tree node,\n   return !alignment_too_large_p;\n }\n \n-/* Handle a \"aligned\" attribute; arguments as in\n-   struct attribute_spec.handler.  */\n+/* Common codes shared by handle_warn_if_not_aligned_attribute and\n+   handle_aligned_attribute.  */\n \n static tree\n-handle_aligned_attribute (tree *node, tree ARG_UNUSED (name), tree args,\n-\t\t\t  int flags, bool *no_add_attrs)\n+common_handle_aligned_attribute (tree *node, tree args, int flags,\n+\t\t\t\t bool *no_add_attrs,\n+\t\t\t\t bool warn_if_not_aligned_p)\n {\n   tree decl = NULL_TREE;\n   tree *type = NULL;\n@@ -1720,8 +1726,16 @@ handle_aligned_attribute (tree *node, tree ARG_UNUSED (name), tree args,\n       else\n \t*type = build_variant_type_copy (*type);\n \n-      SET_TYPE_ALIGN (*type, (1U << i) * BITS_PER_UNIT);\n-      TYPE_USER_ALIGN (*type) = 1;\n+      if (warn_if_not_aligned_p)\n+\t{\n+\t  SET_TYPE_WARN_IF_NOT_ALIGN (*type, (1U << i) * BITS_PER_UNIT);\n+\t  warn_if_not_aligned_p = false;\n+\t}\n+      else\n+\t{\n+\t  SET_TYPE_ALIGN (*type, (1U << i) * BITS_PER_UNIT);\n+\t  TYPE_USER_ALIGN (*type) = 1;\n+\t}\n     }\n   else if (! VAR_OR_FUNCTION_DECL_P (decl)\n \t   && TREE_CODE (decl) != FIELD_DECL)\n@@ -1754,13 +1768,54 @@ handle_aligned_attribute (tree *node, tree ARG_UNUSED (name), tree args,\n     }\n   else\n     {\n-      SET_DECL_ALIGN (decl, (1U << i) * BITS_PER_UNIT);\n-      DECL_USER_ALIGN (decl) = 1;\n+      if (warn_if_not_aligned_p)\n+\t{\n+\t  if (TREE_CODE (decl) == FIELD_DECL && !DECL_INITIAL (decl))\n+\t    {\n+\t      SET_DECL_WARN_IF_NOT_ALIGN (decl, (1U << i) * BITS_PER_UNIT);\n+\t      warn_if_not_aligned_p = false;\n+\t    }\n+\t}\n+      else\n+\t{\n+\t  SET_DECL_ALIGN (decl, (1U << i) * BITS_PER_UNIT);\n+\t  DECL_USER_ALIGN (decl) = 1;\n+\t}\n+    }\n+\n+  if (warn_if_not_aligned_p)\n+    {\n+      error (\"%<warn_if_not_aligned%> may not be specified for %q+D\",\n+\t     decl);\n+      *no_add_attrs = true;\n     }\n \n   return NULL_TREE;\n }\n \n+/* Handle a \"aligned\" attribute; arguments as in\n+   struct attribute_spec.handler.  */\n+\n+static tree\n+handle_aligned_attribute (tree *node, tree ARG_UNUSED (name), tree args,\n+\t\t\t  int flags, bool *no_add_attrs)\n+{\n+  return common_handle_aligned_attribute (node, args, flags,\n+\t\t\t\t\t no_add_attrs, false);\n+}\n+\n+/* Handle a \"warn_if_not_aligned\" attribute; arguments as in\n+   struct attribute_spec.handler.  */\n+\n+static tree\n+handle_warn_if_not_aligned_attribute (tree *node, tree ARG_UNUSED (name),\n+\t\t\t\t      tree args, int flags,\n+\t\t\t\t      bool *no_add_attrs)\n+{\n+  return common_handle_aligned_attribute (node, args, flags,\n+\t\t\t\t\t  no_add_attrs, true);\n+}\n+\n /* Handle a \"weak\" attribute; arguments as in\n    struct attribute_spec.handler.  */\n "}, {"sha": "3435fe90ccacef991baf3d0630796f17622af5ba", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00aa1fa221744dc57f6c6cea8baa669b732d1101/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00aa1fa221744dc57f6c6cea8baa669b732d1101/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=00aa1fa221744dc57f6c6cea8baa669b732d1101", "patch": "@@ -579,6 +579,10 @@ Wformat-truncation=\n C ObjC C++ ObjC++ Joined RejectNegative UInteger Var(warn_format_trunc) Warning LangEnabledBy(C ObjC C++ ObjC++,Wformat=, warn_format >= 1, 0) IntegerRange(0, 2)\n Warn about calls to snprintf and similar functions that truncate output.\n \n+Wif-not-aligned\n+C ObjC C++ ObjC++ Var(warn_if_not_aligned) Init(1) Warning\n+Warn when the field in a struct is not aligned.\n+\n Wignored-qualifiers\n C C++ Var(warn_ignored_qualifiers) Warning EnabledBy(Wextra)\n Warn whenever type qualifiers are ignored.\n@@ -710,6 +714,10 @@ Wnamespaces\n C++ ObjC++ Var(warn_namespaces) Warning\n Warn on namespace definition.\n \n+Wpacked-not-aligned\n+C ObjC C++ ObjC++ Var(warn_packed_not_aligned) Warning LangEnabledBy(C ObjC C++ ObjC++,Wall)\n+Warn when fields in a struct with the packed attribute are misaligned.\n+\n Wsized-deallocation\n C++ ObjC++ Var(warn_sized_deallocation) Warning EnabledBy(Wextra)\n Warn about missing sized deallocation functions."}, {"sha": "da12c3aefe1a4abb8cf762b4fdb4d87b32a3cc9d", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00aa1fa221744dc57f6c6cea8baa669b732d1101/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00aa1fa221744dc57f6c6cea8baa669b732d1101/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=00aa1fa221744dc57f6c6cea8baa669b732d1101", "patch": "@@ -1,3 +1,10 @@\n+2017-08-18  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR c/53037\n+\t* c-decl.c (merge_decls): Also merge DECL_WARN_IF_NOT_ALIGN.\n+\t(check_bitfield_type_and_width): Don't allow bit-field with\n+\twarn_if_not_aligned type.\n+\n 2017-08-14  Martin Sebor  <msebor@redhat.com>\n \n \tPR c/81117"}, {"sha": "d526f0e88e4e20a6000f93944e8a9e10732d99d5", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00aa1fa221744dc57f6c6cea8baa669b732d1101/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00aa1fa221744dc57f6c6cea8baa669b732d1101/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=00aa1fa221744dc57f6c6cea8baa669b732d1101", "patch": "@@ -2383,6 +2383,10 @@ merge_decls (tree newdecl, tree olddecl, tree newtype, tree oldtype)\n \t  SET_DECL_ALIGN (newdecl, DECL_ALIGN (olddecl));\n \t  DECL_USER_ALIGN (newdecl) |= DECL_USER_ALIGN (olddecl);\n \t}\n+      if (DECL_WARN_IF_NOT_ALIGN (olddecl)\n+\t  > DECL_WARN_IF_NOT_ALIGN (newdecl))\n+\tSET_DECL_WARN_IF_NOT_ALIGN (newdecl,\n+\t\t\t\t    DECL_WARN_IF_NOT_ALIGN (olddecl));\n     }\n \n   /* Keep the old rtl since we can safely use it.  */\n@@ -5395,6 +5399,13 @@ check_bitfield_type_and_width (location_t loc, tree *type, tree *width,\n       *type = unsigned_type_node;\n     }\n \n+  if (TYPE_WARN_IF_NOT_ALIGN (*type))\n+    {\n+      error_at (loc, \"cannot declare bit-field %qs with %<warn_if_not_aligned%> type\",\n+\t\tname);\n+      *type = unsigned_type_node;\n+    }\n+\n   type_mv = TYPE_MAIN_VARIANT (*type);\n   if (!in_system_header_at (input_location)\n       && type_mv != integer_type_node"}, {"sha": "427d9f3acc7f4db00f2f27f910db43f294c4be10", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00aa1fa221744dc57f6c6cea8baa669b732d1101/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00aa1fa221744dc57f6c6cea8baa669b732d1101/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=00aa1fa221744dc57f6c6cea8baa669b732d1101", "patch": "@@ -1,3 +1,10 @@\n+2017-08-18  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR c/53037\n+\t* decl.c (duplicate_decls): Also merge DECL_WARN_IF_NOT_ALIGN.\n+\t* decl2.c (grokbitfield): Don't allow bit-field with\n+\twarn_if_not_aligned type.\n+\n 2017-08-17  Nathan Sidwell  <nathan@acm.org>\n \n \t* cp-tree.def (TEMPLATE_TEMPLATE_PARM): Remove stale comment."}, {"sha": "5307e11cb94608513feb18b8598fe0652403bae2", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00aa1fa221744dc57f6c6cea8baa669b732d1101/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00aa1fa221744dc57f6c6cea8baa669b732d1101/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=00aa1fa221744dc57f6c6cea8baa669b732d1101", "patch": "@@ -2510,6 +2510,10 @@ next_arg:;\n       DECL_USER_ALIGN (newdecl) |= DECL_USER_ALIGN (olddecl);\n     }\n   DECL_USER_ALIGN (olddecl) = DECL_USER_ALIGN (newdecl);\n+  if (DECL_WARN_IF_NOT_ALIGN (olddecl)\n+      > DECL_WARN_IF_NOT_ALIGN (newdecl))\n+    SET_DECL_WARN_IF_NOT_ALIGN (newdecl,\n+\t\t\t\tDECL_WARN_IF_NOT_ALIGN (olddecl));\n   if (TREE_CODE (newdecl) == FIELD_DECL)\n     DECL_PACKED (olddecl) = DECL_PACKED (newdecl);\n "}, {"sha": "66d206ea851b351307814be01968e84458e190f4", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00aa1fa221744dc57f6c6cea8baa669b732d1101/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00aa1fa221744dc57f6c6cea8baa669b732d1101/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=00aa1fa221744dc57f6c6cea8baa669b732d1101", "patch": "@@ -1008,6 +1008,13 @@ grokbitfield (const cp_declarator *declarator,\n       return NULL_TREE;\n     }\n \n+  if (width && TYPE_WARN_IF_NOT_ALIGN (TREE_TYPE (value)))\n+    {\n+      error (\"cannot declare bit-field %qD with %<warn_if_not_aligned%> type\",\n+\t     DECL_NAME (value));\n+      return NULL_TREE;\n+    }\n+\n   if (DECL_IN_AGGR_P (value))\n     {\n       error (\"%qD is already defined in the class %qT\", value,"}, {"sha": "93d542d56f70d016fc871b3f240dbb4e162fc0e9", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00aa1fa221744dc57f6c6cea8baa669b732d1101/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00aa1fa221744dc57f6c6cea8baa669b732d1101/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=00aa1fa221744dc57f6c6cea8baa669b732d1101", "patch": "@@ -5780,6 +5780,41 @@ alignment.  See your linker documentation for further information.\n The @code{aligned} attribute can also be used for functions\n (@pxref{Common Function Attributes}.)\n \n+@cindex @code{warn_if_not_aligned} variable attribute\n+@item warn_if_not_aligned (@var{alignment})\n+This attribute specifies a threshold for the structure field, measured\n+in bytes.  If the structure field is aligned below the threshold, a\n+warning will be issued.  For example, the declaration:\n+\n+@smallexample\n+struct foo\n+@{\n+  int i1;\n+  int i2;\n+  unsigned long long x __attribute__((warn_if_not_aligned(16)));\n+@};\n+@end smallexample\n+\n+@noindent\n+causes the compiler to issue an warning on @code{struct foo}, like\n+@samp{warning: alignment 8 of 'struct foo' is less than 16}.\n+The compiler also issues a warning, like @samp{warning: 'x' offset\n+8 in 'struct foo' isn't aligned to 16}, when the structure field has\n+the misaligned offset:\n+\n+@smallexample\n+struct foo\n+@{\n+  int i1;\n+  int i2;\n+  unsigned long long x __attribute__((warn_if_not_aligned(16)));\n+@} __attribute__((aligned(16)));\n+@end smallexample\n+\n+This warning can be disabled by @option{-Wno-if-not-aligned}.\n+The @code{warn_if_not_aligned} attribute can also be used for types\n+(@pxref{Common Type Attributes}.)\n+\n @item cleanup (@var{cleanup_function})\n @cindex @code{cleanup} variable attribute\n The @code{cleanup} attribute runs a function when the variable goes\n@@ -6657,6 +6692,58 @@ alignment.  See your linker documentation for further information.\n The @code{aligned} attribute can only increase alignment.  Alignment\n can be decreased by specifying the @code{packed} attribute.  See below.\n \n+@cindex @code{warn_if_not_aligned} type attribute\n+@item warn_if_not_aligned (@var{alignment})\n+This attribute specifies a threshold for the structure field, measured\n+in bytes.  If the structure field is aligned below the threshold, a\n+warning will be issued.  For example, the declaration:\n+\n+@smallexample\n+typedef unsigned long long __u64\n+   __attribute__((aligned(4),warn_if_not_aligned(8)));\n+\n+struct foo\n+@{\n+  int i1;\n+  int i2;\n+  __u64 x;\n+@};\n+@end smallexample\n+\n+@noindent\n+causes the compiler to issue an warning on @code{struct foo}, like\n+@samp{warning: alignment 4 of 'struct foo' is less than 8}.\n+It is used to define @code{struct foo} in such a way that\n+@code{struct foo} has the same layout and the structure field @code{x}\n+has the same alignment when @code{__u64} is aligned at either 4 or\n+8 bytes.  Align @code{struct foo} to 8 bytes:\n+\n+@smallexample\n+struct foo\n+@{\n+  int i1;\n+  int i2;\n+  __u64 x;\n+@} __attribute__((aligned(8)));\n+@end smallexample\n+\n+@noindent\n+silences the warning.  The compiler also issues a warning, like\n+@samp{warning: 'x' offset 12 in 'struct foo' isn't aligned to 8},\n+when the structure field has the misaligned offset:\n+\n+@smallexample\n+struct foo\n+@{\n+  int i1;\n+  int i2;\n+  int i3;\n+  __u64 x;\n+@} __attribute__((aligned(8)));\n+@end smallexample\n+\n+This warning can be disabled by @option{-Wno-if-not-aligned}.\n+\n @item bnd_variable_size\n @cindex @code{bnd_variable_size} type attribute\n @cindex Pointer Bounds Checker attributes"}, {"sha": "40d0c8d5af1362ea8b6c205e99fb3f243951fe1c", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00aa1fa221744dc57f6c6cea8baa669b732d1101/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00aa1fa221744dc57f6c6cea8baa669b732d1101/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=00aa1fa221744dc57f6c6cea8baa669b732d1101", "patch": "@@ -284,6 +284,7 @@ Objective-C and Objective-C++ Dialects}.\n -Wformat-security  -Wformat-signedness  -Wformat-truncation=@var{n} @gol\n -Wformat-y2k  -Wframe-address @gol\n -Wframe-larger-than=@var{len}  -Wno-free-nonheap-object  -Wjump-misses-init @gol\n+-Wif-not-aligned @gol\n -Wignored-qualifiers  -Wignored-attributes  -Wincompatible-pointer-types @gol\n -Wimplicit  -Wimplicit-fallthrough  -Wimplicit-fallthrough=@var{n} @gol\n -Wimplicit-function-declaration  -Wimplicit-int @gol\n@@ -298,7 +299,7 @@ Objective-C and Objective-C++ Dialects}.\n -Wnormalized=@r{[}none@r{|}id@r{|}nfc@r{|}nfkc@r{]} @gol\n -Wnull-dereference  -Wodr  -Wno-overflow  -Wopenmp-simd  @gol\n -Woverride-init-side-effects  -Woverlength-strings @gol\n--Wpacked  -Wpacked-bitfield-compat  -Wpadded @gol\n+-Wpacked  -Wpacked-bitfield-compat -Wpacked-not-aligned -Wpadded @gol\n -Wparentheses  -Wno-pedantic-ms-format @gol\n -Wplacement-new  -Wplacement-new=@var{n} @gol\n -Wpointer-arith  -Wpointer-compare  -Wno-pointer-to-int-cast @gol\n@@ -4427,6 +4428,13 @@ switch (cond)\n \n The @option{-Wimplicit-fallthrough=3} warning is enabled by @option{-Wextra}.\n \n+@item -Wif-not-aligned @r{(C, C++, Objective-C and Objective-C++ only)}\n+@opindex Wif-not-aligned\n+@opindex Wno-if-not-aligned\n+Control if warning triggered by the @code{warn_if_not_aligned} attribute\n+should be issued.  This is is enabled by default.\n+Use @option{-Wno-if-not-aligned} to disable it.\n+\n @item -Wignored-qualifiers @r{(C and C++ only)}\n @opindex Wignored-qualifiers\n @opindex Wno-ignored-qualifiers\n@@ -6520,6 +6528,25 @@ struct foo\n This warning is enabled by default.  Use\n @option{-Wno-packed-bitfield-compat} to disable this warning.\n \n+@item -Wpacked-not-aligned @r{(C, C++, Objective-C and Objective-C++ only)}\n+@opindex Wpacked-not-aligned\n+@opindex Wno-packed-not-aligned\n+Warn if a structure field with explicitly specified alignment in a\n+packed struct or union is misaligned.  For example, a warning will\n+be issued on @code{struct S}, like, @code{warning: alignment 1 of\n+'struct S' is less than 8}, in this code:\n+\n+@smallexample\n+@group\n+struct __attribute__ ((aligned (8))) S8 @{ char a[8]; @};\n+struct __attribute__ ((packed)) S @{\n+  struct S8 s8;\n+@};\n+@end group\n+@end smallexample\n+\n+This warning is enabled by @option{-Wall}.\n+\n @item -Wpadded\n @opindex Wpadded\n @opindex Wno-padded"}, {"sha": "9497cb4f23838f6ce9bdc3911f97c4c5e39ef416", "filename": "gcc/print-tree.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00aa1fa221744dc57f6c6cea8baa669b732d1101/gcc%2Fprint-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00aa1fa221744dc57f6c6cea8baa669b732d1101/gcc%2Fprint-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-tree.c?ref=00aa1fa221744dc57f6c6cea8baa669b732d1101", "patch": "@@ -458,7 +458,8 @@ print_node (FILE *file, const char *prefix, tree node, int indent,\n \t  if (DECL_USER_ALIGN (node))\n \t    fprintf (file, \" user\");\n \n-\t  fprintf (file, \" align:%d\", DECL_ALIGN (node));\n+\t  fprintf (file, \" align:%d warn_if_not_align:%d\",\n+\t\t   DECL_ALIGN (node), DECL_WARN_IF_NOT_ALIGN (node));\n \t  if (code == FIELD_DECL)\n \t    fprintf (file, \" offset_align \" HOST_WIDE_INT_PRINT_UNSIGNED,\n \t\t     DECL_OFFSET_ALIGN (node));\n@@ -603,8 +604,10 @@ print_node (FILE *file, const char *prefix, tree node, int indent,\n       if (TYPE_USER_ALIGN (node))\n \tfprintf (file, \" user\");\n \n-      fprintf (file, \" align:%d symtab:%d alias-set \" HOST_WIDE_INT_PRINT_DEC,\n-\t       TYPE_ALIGN (node), TYPE_SYMTAB_ADDRESS (node),\n+      fprintf (file, \" align:%d warn_if_not_align:%d symtab:%d alias-set \"\n+\t       HOST_WIDE_INT_PRINT_DEC,\n+\t       TYPE_ALIGN (node), TYPE_WARN_IF_NOT_ALIGN (node),\n+\t       TYPE_SYMTAB_ADDRESS (node),\n \t       (HOST_WIDE_INT) TYPE_ALIAS_SET (node));\n \n       if (TYPE_STRUCTURAL_EQUALITY_P (node))"}, {"sha": "3028d55773a83e2ad674c07e2f140f3640d22c17", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00aa1fa221744dc57f6c6cea8baa669b732d1101/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00aa1fa221744dc57f6c6cea8baa669b732d1101/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=00aa1fa221744dc57f6c6cea8baa669b732d1101", "patch": "@@ -570,6 +570,8 @@ do_type_align (tree type, tree decl)\n       if (TREE_CODE (decl) == FIELD_DECL)\n \tDECL_USER_ALIGN (decl) = TYPE_USER_ALIGN (type);\n     }\n+  if (TYPE_WARN_IF_NOT_ALIGN (type) > DECL_WARN_IF_NOT_ALIGN (decl))\n+    SET_DECL_WARN_IF_NOT_ALIGN (decl, TYPE_WARN_IF_NOT_ALIGN (type));\n }\n \n /* Set the size, mode and alignment of a ..._DECL node.\n@@ -1074,6 +1076,57 @@ update_alignment_for_field (record_layout_info rli, tree field,\n   return desired_align;\n }\n \n+/* Issue a warning if the record alignment, RECORD_ALIGN, is less than\n+   the field alignment of FIELD or FIELD isn't aligned. */\n+\n+static void\n+handle_warn_if_not_align (tree field, unsigned int record_align)\n+{\n+  tree type = TREE_TYPE (field);\n+\n+  if (type == error_mark_node)\n+    return;\n+\n+  unsigned int warn_if_not_align = 0;\n+\n+  int opt_w = 0;\n+\n+  if (warn_if_not_aligned)\n+    {\n+      warn_if_not_align = DECL_WARN_IF_NOT_ALIGN (field);\n+      if (!warn_if_not_align)\n+\twarn_if_not_align = TYPE_WARN_IF_NOT_ALIGN (type);\n+      if (warn_if_not_align)\n+\topt_w = OPT_Wif_not_aligned;\n+    }\n+\n+  if (!warn_if_not_align\n+      && warn_packed_not_aligned\n+      && TYPE_USER_ALIGN (type))\n+    {\n+      warn_if_not_align = TYPE_ALIGN (type);\n+      opt_w = OPT_Wpacked_not_aligned;\n+    }\n+\n+  if (!warn_if_not_align)\n+    return;\n+\n+  tree context = DECL_CONTEXT (field);\n+\n+  warn_if_not_align /= BITS_PER_UNIT;\n+  record_align /= BITS_PER_UNIT;\n+  if ((record_align % warn_if_not_align) != 0)\n+    warning (opt_w, \"alignment %u of %qT is less than %u\",\n+\t     record_align, context, warn_if_not_align);\n+\n+  unsigned HOST_WIDE_INT off\n+    = (tree_to_uhwi (DECL_FIELD_OFFSET (field))\n+       + tree_to_uhwi (DECL_FIELD_BIT_OFFSET (field)) / BITS_PER_UNIT);\n+  if ((off % warn_if_not_align) != 0)\n+    warning (opt_w, \"%q+D offset %wu in %qT isn't aligned to %u\",\n+\t     field, off, context, warn_if_not_align);\n+}\n+\n /* Called from place_field to handle unions.  */\n \n static void\n@@ -1084,6 +1137,7 @@ place_union_field (record_layout_info rli, tree field)\n   DECL_FIELD_OFFSET (field) = size_zero_node;\n   DECL_FIELD_BIT_OFFSET (field) = bitsize_zero_node;\n   SET_DECL_OFFSET_ALIGN (field, BIGGEST_ALIGNMENT);\n+  handle_warn_if_not_align (field, rli->record_align);\n \n   /* If this is an ERROR_MARK return *after* having set the\n      field at the start of the union. This helps when parsing\n@@ -1169,6 +1223,7 @@ place_field (record_layout_info rli, tree field)\n       DECL_FIELD_OFFSET (field) = rli->offset;\n       DECL_FIELD_BIT_OFFSET (field) = rli->bitpos;\n       SET_DECL_OFFSET_ALIGN (field, rli->offset_align);\n+      handle_warn_if_not_align (field, rli->record_align);\n       return;\n     }\n \n@@ -1290,6 +1345,9 @@ place_field (record_layout_info rli, tree field)\n \n       if (! DECL_PACKED (field))\n \tTYPE_USER_ALIGN (rli->t) |= TYPE_USER_ALIGN (type);\n+\n+      SET_TYPE_WARN_IF_NOT_ALIGN (rli->t,\n+\t\t\t\t  TYPE_WARN_IF_NOT_ALIGN (type));\n     }\n \n #ifdef BITFIELD_NBYTES_LIMITED\n@@ -1328,6 +1386,8 @@ place_field (record_layout_info rli, tree field)\n \trli->bitpos = round_up (rli->bitpos, type_align);\n \n       TYPE_USER_ALIGN (rli->t) |= TYPE_USER_ALIGN (type);\n+      SET_TYPE_WARN_IF_NOT_ALIGN (rli->t,\n+\t\t\t\t  TYPE_WARN_IF_NOT_ALIGN (type));\n     }\n #endif\n \n@@ -1478,6 +1538,7 @@ place_field (record_layout_info rli, tree field)\n   DECL_FIELD_OFFSET (field) = rli->offset;\n   DECL_FIELD_BIT_OFFSET (field) = rli->bitpos;\n   SET_DECL_OFFSET_ALIGN (field, rli->offset_align);\n+  handle_warn_if_not_align (field, rli->record_align);\n \n   /* Evaluate nonconstant offsets only once, either now or as soon as safe.  */\n   if (TREE_CODE (DECL_FIELD_OFFSET (field)) != INTEGER_CST)\n@@ -2088,6 +2149,8 @@ finish_builtin_struct (tree type, const char *name, tree fields,\n     {\n       SET_TYPE_ALIGN (type, TYPE_ALIGN (align_type));\n       TYPE_USER_ALIGN (type) = TYPE_USER_ALIGN (align_type);\n+      SET_TYPE_WARN_IF_NOT_ALIGN (type,\n+\t\t\t\t  TYPE_WARN_IF_NOT_ALIGN (align_type));\n     }\n \n   layout_type (type);\n@@ -2324,6 +2387,9 @@ layout_type (tree type)\n \t  align = MAX (align, TYPE_ALIGN (type));\n \telse\n \t  TYPE_USER_ALIGN (type) = TYPE_USER_ALIGN (element);\n+\tif (!TYPE_WARN_IF_NOT_ALIGN (type))\n+\t  SET_TYPE_WARN_IF_NOT_ALIGN (type,\n+\t\t\t\t      TYPE_WARN_IF_NOT_ALIGN (element));\n #ifdef ROUND_TYPE_ALIGN\n \talign = ROUND_TYPE_ALIGN (type, align, BITS_PER_UNIT);\n #else"}, {"sha": "bcf24952e057985c1d80e00e5ff8bc505ec8e46a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00aa1fa221744dc57f6c6cea8baa669b732d1101/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00aa1fa221744dc57f6c6cea8baa669b732d1101/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=00aa1fa221744dc57f6c6cea8baa669b732d1101", "patch": "@@ -1,3 +1,16 @@\n+2017-08-18  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR c/53037\n+\t* c-c++-common/pr53037-5.c: New test.\n+\t* g++.dg/pr53037-1.C: Likewise.\n+\t* g++.dg/pr53037-2.C: Likewise.\n+\t* g++.dg/pr53037-3.C: Likewise.\n+\t* g++.dg/pr53037-4.C: Likewise.\n+\t* gcc.dg/pr53037-1.c: Likewise.\n+\t* gcc.dg/pr53037-2.c: Likewise.\n+\t* gcc.dg/pr53037-3.c: Likewise.\n+\t* gcc.dg/pr53037-4.c: Likewise.\n+\n 2017-08-17  Peter Bergner  <bergner@vnet.ibm.com>\n \n \t* gcc.target/powerpc/p8vector-int128-1.c: Remove use of -mvsx-timode."}, {"sha": "97d54b19acff1a727f1e024407f4810d4c906f25", "filename": "gcc/testsuite/c-c++-common/pr53037-5.c", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00aa1fa221744dc57f6c6cea8baa669b732d1101/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr53037-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00aa1fa221744dc57f6c6cea8baa669b732d1101/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr53037-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr53037-5.c?ref=00aa1fa221744dc57f6c6cea8baa669b732d1101", "patch": "@@ -0,0 +1,81 @@\n+/* PR c/53037.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O0 -Wno-if-not-aligned\" } */\n+\n+typedef unsigned long long __u64\n+  __attribute__((aligned(4),warn_if_not_aligned(8)));\n+\n+struct foo1\n+{\n+  int i1;\n+  int i2;\n+  int i3;\n+  __u64 x;\n+};\n+\n+struct foo2\n+{\n+  int i1;\n+  int i2;\n+  int i3;\n+  __u64 x;\n+} __attribute__((aligned(8)));\n+\n+struct foo3\n+{\n+  int i1;\n+  int i3;\n+  __u64 x;\n+};\n+\n+struct foo4\n+{\n+  int i1;\n+  int i2;\n+  __u64 x;\n+} __attribute__((aligned(8)));\n+\n+struct foo5\n+{\n+  int i1;\n+  int x __attribute__((warn_if_not_aligned(16)));\n+};\n+\n+struct foo6\n+{\n+  int i1;\n+  int x __attribute__((warn_if_not_aligned(16))); \n+} __attribute__((aligned(16)));\n+\n+struct foo7\n+{\n+  int i1;\n+  int i2;\n+  int i3;\n+  int i4;\n+  int x __attribute__((warn_if_not_aligned(16)));\n+} __attribute__((aligned(16)));\n+\n+union bar1\n+{\n+  int i1;\n+  __u64 x;\n+};\n+\n+union bar2\n+{\n+  int i1;\n+  __u64 x;\n+} __attribute__((aligned(8)));\n+\n+union bar3\n+{\n+  int i1;\n+  int x __attribute__((warn_if_not_aligned(16))); \n+};\n+\n+union bar4\n+{\n+  int i1;\n+  int x __attribute__((warn_if_not_aligned(16)));\n+} __attribute__((aligned(16)));"}, {"sha": "a3d8f99b54e2e8c0d5b5cc2e543f933650827cc9", "filename": "gcc/testsuite/g++.dg/pr53037-1.C", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00aa1fa221744dc57f6c6cea8baa669b732d1101/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr53037-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00aa1fa221744dc57f6c6cea8baa669b732d1101/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr53037-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr53037-1.C?ref=00aa1fa221744dc57f6c6cea8baa669b732d1101", "patch": "@@ -0,0 +1,81 @@\n+/* PR c/53037.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O0\" } */\n+\n+typedef unsigned long long __u64\n+  __attribute__((aligned(4),warn_if_not_aligned(8)));\n+\n+struct foo1 /* { dg-warning \"alignment 4 of 'foo1' is less than 8\" } */\n+{\n+  int i1;\n+  int i2;\n+  int i3;\n+  __u64 x; /* { dg-warning \"'foo1::x' offset 12 in 'foo1' isn't aligned to 8\" } */\n+};\n+\n+struct foo2\n+{\n+  int i1;\n+  int i2;\n+  int i3;\n+  __u64 x; /* { dg-warning \"'foo2::x' offset 12 in 'foo2' isn't aligned to 8\" } */\n+} __attribute__((aligned(8)));\n+\n+struct foo3 /* { dg-warning \"alignment 4 of 'foo3' is less than 8\" } */\n+{\n+  int i1;\n+  int i3;\n+  __u64 x;\n+};\n+\n+struct foo4\n+{\n+  int i1;\n+  int i2;\n+  __u64 x;\n+} __attribute__((aligned(8)));\n+\n+struct foo5 /* { dg-warning \"alignment 4 of 'foo5' is less than 16\" } */\n+{\n+  int i1;\n+  int x __attribute__((warn_if_not_aligned(16))); /* { dg-warning \"'foo5::x' offset 4 in 'foo5' isn't aligned to 16\" } */\n+};\n+\n+struct foo6\n+{\n+  int i1;\n+  int x __attribute__((warn_if_not_aligned(16))); /* { dg-warning \"'foo6::x' offset 4 in 'foo6' isn't aligned to 16\" } */\n+} __attribute__((aligned(16)));\n+\n+struct foo7\n+{\n+  int i1;\n+  int i2;\n+  int i3;\n+  int i4;\n+  int x __attribute__((warn_if_not_aligned(16)));\n+} __attribute__((aligned(16)));\n+\n+union bar1 /* { dg-warning \"alignment 4 of 'bar1' is less than 8\" } */\n+{\n+  int i1;\n+  __u64 x;\n+};\n+\n+union bar2\n+{\n+  int i1;\n+  __u64 x;\n+} __attribute__((aligned(8)));\n+\n+union bar3 /* { dg-warning \"alignment 4 of 'bar3' is less than 16\" } */\n+{\n+  int i1;\n+  int x __attribute__((warn_if_not_aligned(16))); \n+};\n+\n+union bar4\n+{\n+  int i1;\n+  int x __attribute__((warn_if_not_aligned(16)));\n+} __attribute__((aligned(16)));"}, {"sha": "e617f9051f06bb3d5f40a00022e90992f479f4b8", "filename": "gcc/testsuite/g++.dg/pr53037-2.C", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00aa1fa221744dc57f6c6cea8baa669b732d1101/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr53037-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00aa1fa221744dc57f6c6cea8baa669b732d1101/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr53037-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr53037-2.C?ref=00aa1fa221744dc57f6c6cea8baa669b732d1101", "patch": "@@ -0,0 +1,37 @@\n+/* PR c/53037.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O0 -Wpacked-not-aligned\" } */\n+\n+struct __attribute__ ((aligned (8))) S8 { char a[8]; };\n+struct __attribute__ ((packed)) S1 { /* { dg-warning \"alignment 1 of 'S1' is less than 8\" } */\n+  struct S8 s8;\n+};\n+\n+struct __attribute__ ((packed, aligned (8))) S2 {\n+  struct S8 s8;\n+};\n+\n+struct __attribute__ ((packed, aligned (8))) S3 {\n+  int i1;\n+  struct S8 s8; /* { dg-warning \"'S3::s8' offset 4 in 'S3' isn't aligned to 8\" } */\n+};\n+\n+struct __attribute__ ((packed, aligned (8))) S4 {\n+  int i1;\n+  int i2;\n+  struct S8 s8;\n+};\n+\n+struct __attribute__ ((packed)) S5 {\n+   long long ll;\n+};\n+\n+union __attribute__ ((packed)) U1 { /* { dg-warning \"alignment 1 of 'U1' is less than 8\" } */\n+  int i1;\n+  struct S8 s8;\n+};\n+\n+union __attribute__ ((packed, aligned (8))) U2 {\n+  int i1;\n+  struct S8 s8;\n+};"}, {"sha": "1ed6354f677c7112bb45a459a0abde51d9e22417", "filename": "gcc/testsuite/g++.dg/pr53037-3.C", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00aa1fa221744dc57f6c6cea8baa669b732d1101/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr53037-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00aa1fa221744dc57f6c6cea8baa669b732d1101/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr53037-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr53037-3.C?ref=00aa1fa221744dc57f6c6cea8baa669b732d1101", "patch": "@@ -0,0 +1,37 @@\n+/* PR c/53037.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O0 -Wall\" } */\n+\n+struct __attribute__ ((aligned (8))) S8 { char a[8]; };\n+struct __attribute__ ((packed)) S1 { /* { dg-warning \"alignment 1 of 'S1' is less than 8\" } */\n+  struct S8 s8;\n+};\n+\n+struct __attribute__ ((packed, aligned (8))) S2 {\n+  struct S8 s8;\n+};\n+\n+struct __attribute__ ((packed, aligned (8))) S3 {\n+  int i1;\n+  struct S8 s8; /* { dg-warning \"'S3::s8' offset 4 in 'S3' isn't aligned to 8\" } */\n+};\n+\n+struct __attribute__ ((packed, aligned (8))) S4 {\n+  int i1;\n+  int i2;\n+  struct S8 s8;\n+};\n+\n+struct __attribute__ ((packed)) S5 {\n+   long long ll;\n+};\n+\n+union __attribute__ ((packed)) U1 { /* { dg-warning \"alignment 1 of 'U1' is less than 8\" } */\n+  int i1;\n+  struct S8 s8;\n+};\n+\n+union __attribute__ ((packed, aligned (8))) U2 {\n+  int i1;\n+  struct S8 s8;\n+};"}, {"sha": "553dd9a6c45e88e3b283c06f1bac59e442197132", "filename": "gcc/testsuite/g++.dg/pr53037-4.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00aa1fa221744dc57f6c6cea8baa669b732d1101/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr53037-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00aa1fa221744dc57f6c6cea8baa669b732d1101/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr53037-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr53037-4.C?ref=00aa1fa221744dc57f6c6cea8baa669b732d1101", "patch": "@@ -0,0 +1,24 @@\n+/* PR c/53037.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O0\" } */\n+\n+int foo1 __attribute__((warn_if_not_aligned(8))); /* { dg-error \"'warn_if_not_aligned' may not be specified for 'foo1'\" } */\n+\n+__attribute__((warn_if_not_aligned(8)))\n+void\n+foo2 (void) /* { dg-error \"'warn_if_not_aligned' may not be specified for 'void foo2\\\\(\\\\)'\" } */\n+{\n+}\n+\n+struct foo3\n+{\n+  int i : 2 __attribute__((warn_if_not_aligned(8))); /* { dg-error \"'warn_if_not_aligned' may not be specified for 'i'\" } */\n+};\n+\n+typedef unsigned int __u32\n+  __attribute__((aligned(4),warn_if_not_aligned(8)));\n+\n+struct foo4\n+{\n+  __u32 i : 2; /* { dg-error \"cannot declare bit-field 'i' with 'warn_if_not_aligned' type\" } */\n+};"}, {"sha": "93af0a50cd4735bc5a111806b0892daa3e6874d3", "filename": "gcc/testsuite/gcc.dg/pr53037-1.c", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00aa1fa221744dc57f6c6cea8baa669b732d1101/gcc%2Ftestsuite%2Fgcc.dg%2Fpr53037-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00aa1fa221744dc57f6c6cea8baa669b732d1101/gcc%2Ftestsuite%2Fgcc.dg%2Fpr53037-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr53037-1.c?ref=00aa1fa221744dc57f6c6cea8baa669b732d1101", "patch": "@@ -0,0 +1,81 @@\n+/* PR c/53037.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O0\" } */\n+\n+typedef unsigned long long __u64\n+  __attribute__((aligned(4),warn_if_not_aligned(8)));\n+\n+struct foo1\n+{\n+  int i1;\n+  int i2;\n+  int i3;\n+  __u64 x; /* { dg-warning \"'x' offset 12 in 'struct foo1' isn't aligned to 8\" } */\n+}; /* { dg-warning \"alignment 4 of 'struct foo1' is less than 8\" } */\n+\n+struct foo2\n+{\n+  int i1;\n+  int i2;\n+  int i3;\n+  __u64 x; /* { dg-warning \"'x' offset 12 in 'struct foo2' isn't aligned to 8\" } */\n+} __attribute__((aligned(8)));\n+\n+struct foo3\n+{\n+  int i1;\n+  int i3;\n+  __u64 x;\n+}; /* { dg-warning \"alignment 4 of 'struct foo3' is less than 8\" } */\n+\n+struct foo4\n+{\n+  int i1;\n+  int i2;\n+  __u64 x;\n+} __attribute__((aligned(8)));\n+\n+struct foo5\n+{\n+  int i1;\n+  int x __attribute__((warn_if_not_aligned(16))); /* { dg-warning \"'x' offset 4 in 'struct foo5' isn't aligned to 16\" } */\n+}; /* { dg-warning \"alignment 4 of 'struct foo5' is less than 16\" } */\n+\n+struct foo6\n+{\n+  int i1;\n+  int x __attribute__((warn_if_not_aligned(16))); /* { dg-warning \"'x' offset 4 in 'struct foo6' isn't aligned to 16\" } */\n+} __attribute__((aligned(16)));\n+\n+struct foo7\n+{\n+  int i1;\n+  int i2;\n+  int i3;\n+  int i4;\n+  int x __attribute__((warn_if_not_aligned(16)));\n+} __attribute__((aligned(16)));\n+\n+union bar1\n+{\n+  int i1;\n+  __u64 x;\n+}; /* { dg-warning \"alignment 4 of 'union bar1' is less than 8\" } */\n+\n+union bar2\n+{\n+  int i1;\n+  __u64 x;\n+} __attribute__((aligned(8)));\n+\n+union bar3\n+{\n+  int i1;\n+  int x __attribute__((warn_if_not_aligned(16))); \n+}; /* { dg-warning \"alignment 4 of 'union bar3' is less than 16\" } */\n+\n+union bar4\n+{\n+  int i1;\n+  int x __attribute__((warn_if_not_aligned(16)));\n+} __attribute__((aligned(16)));"}, {"sha": "f9934a63e1762b7e3d2b9258760be8d3243f5c99", "filename": "gcc/testsuite/gcc.dg/pr53037-2.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00aa1fa221744dc57f6c6cea8baa669b732d1101/gcc%2Ftestsuite%2Fgcc.dg%2Fpr53037-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00aa1fa221744dc57f6c6cea8baa669b732d1101/gcc%2Ftestsuite%2Fgcc.dg%2Fpr53037-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr53037-2.c?ref=00aa1fa221744dc57f6c6cea8baa669b732d1101", "patch": "@@ -0,0 +1,37 @@\n+/* PR c/53037.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O0 -Wpacked-not-aligned\" } */\n+\n+struct __attribute__ ((aligned (8))) S8 { char a[8]; };\n+struct __attribute__ ((packed)) S1 {\n+  struct S8 s8;\n+}; /* { dg-warning \"alignment 1 of 'struct S1' is less than 8\" } */\n+\n+struct __attribute__ ((packed, aligned (8))) S2 {\n+  struct S8 s8;\n+};\n+\n+struct __attribute__ ((packed, aligned (8))) S3 {\n+  int i1;\n+  struct S8 s8; /* { dg-warning \"'s8' offset 4 in 'struct S3' isn't aligned to 8\" } */\n+};\n+\n+struct __attribute__ ((packed, aligned (8))) S4 {\n+  int i1;\n+  int i2;\n+  struct S8 s8;\n+};\n+\n+struct __attribute__ ((packed)) S5 {\n+   long long ll;\n+};\n+\n+union __attribute__ ((packed)) U1 {\n+  int i1;\n+  struct S8 s8;\n+}; /* { dg-warning \"alignment 1 of 'union U1' is less than 8\" } */\n+\n+union __attribute__ ((packed, aligned (8))) U2 {\n+  int i1;\n+  struct S8 s8;\n+};"}, {"sha": "fc69ae8e52e12e6eddbfe410e5b697bf3fc33e80", "filename": "gcc/testsuite/gcc.dg/pr53037-3.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00aa1fa221744dc57f6c6cea8baa669b732d1101/gcc%2Ftestsuite%2Fgcc.dg%2Fpr53037-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00aa1fa221744dc57f6c6cea8baa669b732d1101/gcc%2Ftestsuite%2Fgcc.dg%2Fpr53037-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr53037-3.c?ref=00aa1fa221744dc57f6c6cea8baa669b732d1101", "patch": "@@ -0,0 +1,37 @@\n+/* PR c/53037.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O0 -Wall\" } */\n+\n+struct __attribute__ ((aligned (8))) S8 { char a[8]; };\n+struct __attribute__ ((packed)) S1 {\n+  struct S8 s8;\n+}; /* { dg-warning \"alignment 1 of 'struct S1' is less than 8\" } */\n+\n+struct __attribute__ ((packed, aligned (8))) S2 {\n+  struct S8 s8;\n+};\n+\n+struct __attribute__ ((packed, aligned (8))) S3 {\n+  int i1;\n+  struct S8 s8; /* { dg-warning \"'s8' offset 4 in 'struct S3' isn't aligned to 8\" } */\n+};\n+\n+struct __attribute__ ((packed, aligned (8))) S4 {\n+  int i1;\n+  int i2;\n+  struct S8 s8;\n+};\n+\n+struct __attribute__ ((packed)) S5 {\n+   long long ll;\n+};\n+\n+union __attribute__ ((packed)) U1 {\n+  int i1;\n+  struct S8 s8;\n+}; /* { dg-warning \"alignment 1 of 'union U1' is less than 8\" } */\n+\n+union __attribute__ ((packed, aligned (8))) U2 {\n+  int i1;\n+  struct S8 s8;\n+};"}, {"sha": "feb3afad2bd64688951a3091f61cd4dd28a97576", "filename": "gcc/testsuite/gcc.dg/pr53037-4.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00aa1fa221744dc57f6c6cea8baa669b732d1101/gcc%2Ftestsuite%2Fgcc.dg%2Fpr53037-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00aa1fa221744dc57f6c6cea8baa669b732d1101/gcc%2Ftestsuite%2Fgcc.dg%2Fpr53037-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr53037-4.c?ref=00aa1fa221744dc57f6c6cea8baa669b732d1101", "patch": "@@ -0,0 +1,24 @@\n+/* PR c/53037.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O0\" } */\n+\n+int foo1 __attribute__((warn_if_not_aligned(8))); /* { dg-error \"'warn_if_not_aligned' may not be specified for 'foo1'\" } */\n+\n+__attribute__((warn_if_not_aligned(8)))\n+void\n+foo2 (void) /* { dg-error \"'warn_if_not_aligned' may not be specified for 'foo2'\" } */\n+{\n+}\n+\n+struct foo3\n+{\n+  int i : 2 __attribute__((warn_if_not_aligned(8))); /* { dg-error \"'warn_if_not_aligned' may not be specified for 'i'\" } */\n+};\n+\n+typedef unsigned int __u32\n+  __attribute__((aligned(4),warn_if_not_aligned(8)));\n+\n+struct foo4\n+{\n+  __u32 i : 2; /* { dg-error \"cannot declare bit-field 'i' with 'warn_if_not_aligned' type\" } */\n+};"}, {"sha": "dc358e86e82daf562d2e11964fb94e5662a16947", "filename": "gcc/tree-core.h", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00aa1fa221744dc57f6c6cea8baa669b732d1101/gcc%2Ftree-core.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00aa1fa221744dc57f6c6cea8baa669b732d1101/gcc%2Ftree-core.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-core.h?ref=00aa1fa221744dc57f6c6cea8baa669b732d1101", "patch": "@@ -1523,8 +1523,9 @@ struct GTY(()) tree_type_common {\n      so we need to store the value 32 (not 31, as we need the zero\n      as well), hence six bits.  */\n   unsigned align : 6;\n+  unsigned warn_if_not_align : 6;\n   unsigned typeless_storage : 1;\n-  unsigned spare : 24;\n+  unsigned spare : 18;\n \n   alias_set_type alias_set;\n   tree pointer_to;\n@@ -1631,7 +1632,11 @@ struct GTY(()) tree_decl_common {\n   /* DECL_ALIGN.  It should have the same size as TYPE_ALIGN.  */\n   unsigned int align : 6;\n \n-  /* 20 bits unused.  */\n+  /* DECL_WARN_IF_NOT_ALIGN.  It should have the same size as\n+     TYPE_WARN_IF_NOT_ALIGN.  */\n+  unsigned int warn_if_not_align : 6;\n+\n+  /* 14 bits unused.  */\n \n   /* UID for points-to sets, stable over copying from inlining.  */\n   unsigned int pt_uid;"}, {"sha": "d118b3ae977f6d8a5523f8fd5eb84fa67abe6ac1", "filename": "gcc/tree.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00aa1fa221744dc57f6c6cea8baa669b732d1101/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00aa1fa221744dc57f6c6cea8baa669b732d1101/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=00aa1fa221744dc57f6c6cea8baa669b732d1101", "patch": "@@ -7505,6 +7505,7 @@ build_range_type_1 (tree type, tree lowval, tree highval, bool shared)\n   TYPE_SIZE_UNIT (itype) = TYPE_SIZE_UNIT (type);\n   SET_TYPE_ALIGN (itype, TYPE_ALIGN (type));\n   TYPE_USER_ALIGN (itype) = TYPE_USER_ALIGN (type);\n+  SET_TYPE_WARN_IF_NOT_ALIGN (itype, TYPE_WARN_IF_NOT_ALIGN (type));\n \n   if (!shared)\n     return itype;"}, {"sha": "9fbf6402399a2e769b88bb1905868aa180e2d079", "filename": "gcc/tree.h", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00aa1fa221744dc57f6c6cea8baa669b732d1101/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00aa1fa221744dc57f6c6cea8baa669b732d1101/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=00aa1fa221744dc57f6c6cea8baa669b732d1101", "patch": "@@ -1919,6 +1919,16 @@ extern machine_mode element_mode (const_tree t);\n /* The alignment for NODE, in bytes.  */\n #define TYPE_ALIGN_UNIT(NODE) (TYPE_ALIGN (NODE) / BITS_PER_UNIT)\n \n+/* The minimum alignment necessary for objects of this type without\n+   warning.  The value is an int, measured in bits.  */\n+#define TYPE_WARN_IF_NOT_ALIGN(NODE) \\\n+    (TYPE_CHECK (NODE)->type_common.warn_if_not_align \\\n+     ? ((unsigned)1) << ((NODE)->type_common.warn_if_not_align - 1) : 0)\n+\n+/* Specify that TYPE_WARN_IF_NOT_ALIGN(NODE) is X.  */\n+#define SET_TYPE_WARN_IF_NOT_ALIGN(NODE, X) \\\n+    (TYPE_CHECK (NODE)->type_common.warn_if_not_align = ffs_hwi (X))\n+\n /* If your language allows you to declare types, and you want debug info\n    for them, then you need to generate corresponding TYPE_DECL nodes.\n    These \"stub\" TYPE_DECL nodes have no name, and simply point at the\n@@ -2371,6 +2381,16 @@ extern machine_mode element_mode (const_tree t);\n #define SET_DECL_ALIGN(NODE, X) \\\n     (DECL_COMMON_CHECK (NODE)->decl_common.align = ffs_hwi (X))\n \n+/* The minimum alignment necessary for the datum, in bits, without\n+   warning.  */\n+#define DECL_WARN_IF_NOT_ALIGN(NODE) \\\n+    (DECL_COMMON_CHECK (NODE)->decl_common.warn_if_not_align \\\n+     ? ((unsigned)1) << ((NODE)->decl_common.warn_if_not_align - 1) : 0)\n+\n+/* Specify that DECL_WARN_IF_NOT_ALIGN(NODE) is X.  */\n+#define SET_DECL_WARN_IF_NOT_ALIGN(NODE, X) \\\n+    (DECL_COMMON_CHECK (NODE)->decl_common.warn_if_not_align = ffs_hwi (X))\n+\n /* The alignment of NODE, in bytes.  */\n #define DECL_ALIGN_UNIT(NODE) (DECL_ALIGN (NODE) / BITS_PER_UNIT)\n /* Set if the alignment of this DECL has been set by the user, for"}]}