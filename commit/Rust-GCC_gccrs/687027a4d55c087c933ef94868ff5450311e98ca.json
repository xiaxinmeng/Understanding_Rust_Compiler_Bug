{"sha": "687027a4d55c087c933ef94868ff5450311e98ca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njg3MDI3YTRkNTVjMDg3YzkzM2VmOTQ4NjhmZjU0NTAzMTFlOThjYQ==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2011-05-16T14:20:19Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2011-05-16T14:20:19Z"}, "message": "re PR middle-end/27663 (missed-optimization transforming a byte array to unsigned long)\n\n\tPR target/27663\n\tPR target/41076\n\t* config/avr/predicates.md (const_8_16_24_operand): New predicate.\n\t* config/avr/avr.md (\"*ior<mode>qi.byte0\",\n\t\"*ior<mode>qi.byte1-3\"): New define_insn_and_split patterns.\n\nFrom-SVN: r173792", "tree": {"sha": "c33cf38081412e0395b8d552fc0d917f941aa4d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c33cf38081412e0395b8d552fc0d917f941aa4d1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/687027a4d55c087c933ef94868ff5450311e98ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/687027a4d55c087c933ef94868ff5450311e98ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/687027a4d55c087c933ef94868ff5450311e98ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/687027a4d55c087c933ef94868ff5450311e98ca/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f24a5190c25a90ec8734ce62b68c081681a314fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f24a5190c25a90ec8734ce62b68c081681a314fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f24a5190c25a90ec8734ce62b68c081681a314fe"}], "stats": {"total": 54, "additions": 54, "deletions": 0}, "files": [{"sha": "8ba223fe60fcc708266dcef72b532a11cd89fecc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/687027a4d55c087c933ef94868ff5450311e98ca/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/687027a4d55c087c933ef94868ff5450311e98ca/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=687027a4d55c087c933ef94868ff5450311e98ca", "patch": "@@ -1,3 +1,11 @@\n+2011-05-16  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\tPR target/27663\n+\tPR target/41076\n+\t* config/avr/predicates.md (const_8_16_24_operand): New predicate.\n+\t* config/avr/avr.md (\"*ior<mode>qi.byte0\",\n+\t\"*ior<mode>qi.byte1-3\"): New define_insn_and_split patterns.\n+\n 2011-05-16  Georg-Johann Lay  <avr@gjlay.de>\n \n \tPR target/45099"}, {"sha": "efe6bb6914f647e5ed7ec5f2829d5485c938a53b", "filename": "gcc/config/avr/avr.md", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/687027a4d55c087c933ef94868ff5450311e98ca/gcc%2Fconfig%2Favr%2Favr.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/687027a4d55c087c933ef94868ff5450311e98ca/gcc%2Fconfig%2Favr%2Favr.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.md?ref=687027a4d55c087c933ef94868ff5450311e98ca", "patch": "@@ -3388,3 +3388,42 @@\n \tclr __zero_reg__\"\n   [(set_attr \"length\" \"3\")\n    (set_attr \"cc\" \"clobber\")])\n+\n+\f\n+;; Some combine patterns that try to fix bad code when a value is composed\n+;; from byte parts like in PR27663.\n+;; The patterns give some release but the code still is not optimal,\n+;; in particular when subreg lowering (-fsplit-wide-types) is turned on.\n+;; That switch obfuscates things here and in many other places.\n+\n+(define_insn_and_split \"*ior<mode>qi.byte0\"\n+  [(set (match_operand:HISI 0 \"register_operand\"                 \"=r\")\n+        (ior:HISI\n+         (zero_extend:HISI (match_operand:QI 1 \"register_operand\" \"r\"))\n+         (match_operand:HISI 2 \"register_operand\"                 \"0\")))]\n+  \"\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(set (match_dup 3)\n+        (ior:QI (match_dup 3)\n+                (match_dup 1)))]\n+  {\n+    operands[3] = simplify_gen_subreg (QImode, operands[0], <MODE>mode, 0);\n+  })\n+\n+(define_insn_and_split \"*ior<mode>qi.byte1-3\"\n+  [(set (match_operand:HISI 0 \"register_operand\"                              \"=r\")\n+        (ior:HISI\n+         (ashift:HISI (zero_extend:HISI (match_operand:QI 1 \"register_operand\" \"r\"))\n+                      (match_operand:QI 2 \"const_8_16_24_operand\"              \"n\"))\n+         (match_operand:HISI 3 \"register_operand\"                              \"0\")))]\n+  \"INTVAL(operands[2]) < GET_MODE_BITSIZE (<MODE>mode)\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 4)\n+        (ior:QI (match_dup 4)\n+                (match_dup 1)))]\n+  {\n+    int byteno = INTVAL(operands[2]) / BITS_PER_UNIT;\n+    operands[4] = simplify_gen_subreg (QImode, operands[0], <MODE>mode, byteno);\n+  })"}, {"sha": "a7cc2ba052fa5e4a7113924bb1e38bd93160a10c", "filename": "gcc/config/avr/predicates.md", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/687027a4d55c087c933ef94868ff5450311e98ca/gcc%2Fconfig%2Favr%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/687027a4d55c087c933ef94868ff5450311e98ca/gcc%2Fconfig%2Favr%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Fpredicates.md?ref=687027a4d55c087c933ef94868ff5450311e98ca", "patch": "@@ -138,3 +138,10 @@\n (define_predicate \"pseudo_register_operand\"\n   (and (match_code \"reg\")\n        (match_test \"!HARD_REGISTER_P (op)\")))\n+\n+;; Return true if OP is a constant integer that is either\n+;; 8 or 16 or 24.\n+(define_predicate \"const_8_16_24_operand\"\n+  (and (match_code \"const_int\")\n+       (match_test \"8 == INTVAL(op) || 16 == INTVAL(op) || 24 == INTVAL(op)\")))\n+"}]}