{"sha": "b8318e484575a121d7512e8a495b1d793390ce4e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjgzMThlNDg0NTc1YTEyMWQ3NTEyZThhNDk1YjFkNzkzMzkwY2U0ZQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-08-08T23:55:09Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-08-08T23:55:09Z"}, "message": "(all patterns that use ins/inss and ext/exts): Disallow use of these\ninstructions when -mnobitfield is specified.\n\nFrom-SVN: r7879", "tree": {"sha": "30dc624b7f4d2724715ff0e6f1ecb40d8cf7294d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/30dc624b7f4d2724715ff0e6f1ecb40d8cf7294d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b8318e484575a121d7512e8a495b1d793390ce4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8318e484575a121d7512e8a495b1d793390ce4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8318e484575a121d7512e8a495b1d793390ce4e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8318e484575a121d7512e8a495b1d793390ce4e/comments", "author": null, "committer": null, "parents": [{"sha": "1a19d593a044bd8894447331cc1174fcc3f9cf09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a19d593a044bd8894447331cc1174fcc3f9cf09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a19d593a044bd8894447331cc1174fcc3f9cf09"}], "stats": {"total": 17, "additions": 10, "deletions": 7}, "files": [{"sha": "5bd05fa9697abcc9d9bca949a4737f58b7e6b9e2", "filename": "gcc/config/ns32k/ns32k.md", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8318e484575a121d7512e8a495b1d793390ce4e/gcc%2Fconfig%2Fns32k%2Fns32k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8318e484575a121d7512e8a495b1d793390ce4e/gcc%2Fconfig%2Fns32k%2Fns32k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k.md?ref=b8318e484575a121d7512e8a495b1d793390ce4e", "patch": "@@ -1861,7 +1861,7 @@\n     return \\\"adjspb %$-4\\\";\n }\")\n \n-;; The extsd/extd isntructions have the problem that they always access\n+;; The exts/ext instructions have the problem that they always access\n ;; 32 bits even if the bitfield is smaller. For example the instruction\n ;; \textsd 7(r1),r0,2,5\n ;; would read not only at address 7(r1) but also at 8(r1) to 10(r1).\n@@ -1876,14 +1876,17 @@\n ;;\textsd\t7(r1),r0,2,5\t5 bytes\n ;; takes about 21 cycles.\n ;;\n-;; So lets forget about extsd/extd on the 532.\n+;; The inss/ins instructions suffer from the same problem.\n+;;\n+;; A machine specific option (-mbitfield/-mnobitfield) is used\n+;; to allow/disallow the use of these instructions.\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"general_operand\" \"=g<\")\n \t(zero_extract:SI (match_operand:SI 1 \"register_operand\" \"g\")\n \t\t\t (match_operand:SI 2 \"const_int_operand\" \"i\")\n \t\t\t (match_operand:SI 3 \"general_operand\" \"rK\")))]\n-  \"! TARGET_32532\"\n+  \"TARGET_BITFIELD\"\n   \"*\n { if (GET_CODE (operands[3]) == CONST_INT)\n     return \\\"extsd %1,%0,%3,%2\\\";\n@@ -1895,7 +1898,7 @@\n \t(zero_extract:SI (match_operand:QI 1 \"general_operand\" \"g\")\n \t\t\t (match_operand:SI 2 \"const_int_operand\" \"i\")\n \t\t\t (match_operand:SI 3 \"general_operand\" \"rK\")))]\n-  \"! TARGET_32532\"\n+  \"TARGET_BITFIELD\"\n   \"*\n { if (GET_CODE (operands[3]) == CONST_INT)\n     return \\\"extsd %1,%0,%3,%2\\\";\n@@ -1907,7 +1910,7 @@\n \t\t\t (match_operand:SI 1 \"const_int_operand\" \"i\")\n \t\t\t (match_operand:SI 2 \"general_operand\" \"rn\"))\n \t(match_operand:SI 3 \"general_operand\" \"rm\"))]\n-  \"\"\n+  \"TARGET_BITFIELD\"\n   \"*\n { if (GET_CODE (operands[2]) == CONST_INT)\n     {\n@@ -1932,7 +1935,7 @@\n \t\t\t (match_operand:SI 1 \"const_int_operand\" \"i\")\n \t\t\t (match_operand:SI 2 \"general_operand\" \"rK\"))\n \t(match_operand:SI 3 \"general_operand\" \"rm\"))]\n-  \"\"\n+  \"TARGET_BITFIELD\"\n   \"*\n { if (GET_CODE (operands[2]) == CONST_INT)\n     if (INTVAL (operands[1]) <= 8)\n@@ -1949,7 +1952,7 @@\n \t\t\t (match_operand:SI 1 \"const_int_operand\" \"i\")\n \t\t\t (match_operand:SI 2 \"general_operand\" \"rK\"))\n \t(match_operand:SI 3 \"general_operand\" \"rm\"))]\n-  \"\"\n+  \"TARGET_BITFIELD\"\n   \"*\n { if (GET_CODE (operands[2]) == CONST_INT)\n     if (INTVAL (operands[1]) <= 8)"}]}