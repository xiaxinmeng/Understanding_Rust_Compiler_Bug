{"sha": "0ed4f879945c6e171f00fa010e047c79bf269548", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGVkNGY4Nzk5NDVjNmUxNzFmMDBmYTAxMGUwNDdjNzliZjI2OTU0OA==", "commit": {"author": {"name": "Rainer Orth", "email": "ro@CeBiTec.Uni-Bielefeld.DE", "date": "2014-11-13T10:22:22Z"}, "committer": {"name": "Rainer Orth", "email": "ro@gcc.gnu.org", "date": "2014-11-13T10:22:22Z"}, "message": "Enable libcc1 on Solaris\n\n\t* configure.ac (libcc1_cv_lib_sockets): Check for -lsocket -lnsl.\n\t* configure: Regenerate.\n\t* connection.cc: Include <string.h>.\n        * libcc1.cc (libcc1_compile): Use AF_UNIX instead of AF_LOCAL.\n\nFrom-SVN: r217471", "tree": {"sha": "605ae9e80d7559c7bfb37f3899c767187ebdeda6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/605ae9e80d7559c7bfb37f3899c767187ebdeda6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0ed4f879945c6e171f00fa010e047c79bf269548", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ed4f879945c6e171f00fa010e047c79bf269548", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ed4f879945c6e171f00fa010e047c79bf269548", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ed4f879945c6e171f00fa010e047c79bf269548/comments", "author": {"login": "rorth", "id": 3930951, "node_id": "MDQ6VXNlcjM5MzA5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3930951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rorth", "html_url": "https://github.com/rorth", "followers_url": "https://api.github.com/users/rorth/followers", "following_url": "https://api.github.com/users/rorth/following{/other_user}", "gists_url": "https://api.github.com/users/rorth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rorth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rorth/subscriptions", "organizations_url": "https://api.github.com/users/rorth/orgs", "repos_url": "https://api.github.com/users/rorth/repos", "events_url": "https://api.github.com/users/rorth/events{/privacy}", "received_events_url": "https://api.github.com/users/rorth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6a4f06787f9c0a9806a3f67a73dd12c33a8e8071", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a4f06787f9c0a9806a3f67a73dd12c33a8e8071", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a4f06787f9c0a9806a3f67a73dd12c33a8e8071"}], "stats": {"total": 156, "additions": 155, "deletions": 1}, "files": [{"sha": "1164c501022ba8fd215213d539d64def155c1723", "filename": "libcc1/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ed4f879945c6e171f00fa010e047c79bf269548/libcc1%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ed4f879945c6e171f00fa010e047c79bf269548/libcc1%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2FChangeLog?ref=0ed4f879945c6e171f00fa010e047c79bf269548", "patch": "@@ -1,3 +1,10 @@\n+2014-11-13  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* configure.ac (libcc1_cv_lib_sockets): Check for -lsocket -lnsl.\n+\t* configure: Regenerate.\n+\t* connection.cc: Include <string.h>.\n+        * libcc1.cc (libcc1_compile): Use AF_UNIX instead of AF_LOCAL.\n+\n 2014-11-11  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \tPR target/63610"}, {"sha": "d8daefb38defee4bc1a9e2fd1d56ff088c69479d", "filename": "libcc1/configure", "status": "modified", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ed4f879945c6e171f00fa010e047c79bf269548/libcc1%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ed4f879945c6e171f00fa010e047c79bf269548/libcc1%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2Fconfigure?ref=0ed4f879945c6e171f00fa010e047c79bf269548", "patch": "@@ -14371,6 +14371,122 @@ if test \"$GXX\" = yes; then\n fi\n \n \n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for socket libraries\" >&5\n+$as_echo_n \"checking for socket libraries... \" >&6; }\n+if test \"${libcc1_cv_lib_sockets+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  libcc1_cv_lib_sockets=\n+   libcc1_check_both=no\n+   ac_fn_c_check_func \"$LINENO\" \"connect\" \"ac_cv_func_connect\"\n+if test \"x$ac_cv_func_connect\" = x\"\"yes; then :\n+  libcc1_check_socket=no\n+else\n+  libcc1_check_socket=yes\n+fi\n+\n+   if test \"$libcc1_check_socket\" = \"yes\"; then\n+     unset ac_cv_func_connect\n+     { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for main in -lsocket\" >&5\n+$as_echo_n \"checking for main in -lsocket... \" >&6; }\n+if test \"${ac_cv_lib_socket_main+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  ac_check_lib_save_LIBS=$LIBS\n+LIBS=\"-lsocket  $LIBS\"\n+cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+\n+int\n+main ()\n+{\n+return main ();\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_link \"$LINENO\"; then :\n+  ac_cv_lib_socket_main=yes\n+else\n+  ac_cv_lib_socket_main=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext \\\n+    conftest$ac_exeext conftest.$ac_ext\n+LIBS=$ac_check_lib_save_LIBS\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_socket_main\" >&5\n+$as_echo \"$ac_cv_lib_socket_main\" >&6; }\n+if test \"x$ac_cv_lib_socket_main\" = x\"\"yes; then :\n+  libcc1_cv_lib_sockets=\"-lsocket\"\n+else\n+  libcc1_check_both=yes\n+fi\n+\n+   fi\n+   if test \"$libcc1_check_both\" = \"yes\"; then\n+     libcc1_old_libs=$LIBS\n+     LIBS=\"$LIBS -lsocket -lnsl\"\n+     unset ac_cv_func_accept\n+     ac_fn_c_check_func \"$LINENO\" \"accept\" \"ac_cv_func_accept\"\n+if test \"x$ac_cv_func_accept\" = x\"\"yes; then :\n+  libcc1_check_nsl=no\n+\t\t    libcc1_cv_lib_sockets=\"-lsocket -lnsl\"\n+fi\n+\n+     unset ac_cv_func_accept\n+     LIBS=$libcc1_old_libs\n+   fi\n+   unset ac_cv_func_gethostbyname\n+   libcc1_old_libs=\"$LIBS\"\n+   ac_fn_c_check_func \"$LINENO\" \"gethostbyname\" \"ac_cv_func_gethostbyname\"\n+if test \"x$ac_cv_func_gethostbyname\" = x\"\"yes; then :\n+\n+else\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for main in -lnsl\" >&5\n+$as_echo_n \"checking for main in -lnsl... \" >&6; }\n+if test \"${ac_cv_lib_nsl_main+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  ac_check_lib_save_LIBS=$LIBS\n+LIBS=\"-lnsl  $LIBS\"\n+cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+\n+int\n+main ()\n+{\n+return main ();\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_link \"$LINENO\"; then :\n+  ac_cv_lib_nsl_main=yes\n+else\n+  ac_cv_lib_nsl_main=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext \\\n+    conftest$ac_exeext conftest.$ac_ext\n+LIBS=$ac_check_lib_save_LIBS\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_nsl_main\" >&5\n+$as_echo \"$ac_cv_lib_nsl_main\" >&6; }\n+if test \"x$ac_cv_lib_nsl_main\" = x\"\"yes; then :\n+  libcc1_cv_lib_sockets=\"$libcc1_cv_lib_sockets -lnsl\"\n+fi\n+\n+fi\n+\n+   unset ac_cv_func_gethostbyname\n+   LIBS=$libcc1_old_libs\n+\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $libcc1_cv_lib_sockets\" >&5\n+$as_echo \"$libcc1_cv_lib_sockets\" >&6; }\n+LIBS=\"$LIBS $libcc1_cv_lib_sockets\"\n+\n # If any of these functions are missing, simply don't bother building\n # this plugin.\n # Check for plugin support"}, {"sha": "6c97afdf9c7773e85e30abbdc9b9df2142f73fee", "filename": "libcc1/configure.ac", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ed4f879945c6e171f00fa010e047c79bf269548/libcc1%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ed4f879945c6e171f00fa010e047c79bf269548/libcc1%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2Fconfigure.ac?ref=0ed4f879945c6e171f00fa010e047c79bf269548", "patch": "@@ -63,6 +63,36 @@ if test \"$GXX\" = yes; then\n fi\n AC_SUBST(libsuffix)\n \n+dnl Test for -lsocket and -lnsl.  Copied from libgo/configure.ac.\n+AC_CACHE_CHECK([for socket libraries], libcc1_cv_lib_sockets,\n+  [libcc1_cv_lib_sockets=\n+   libcc1_check_both=no\n+   AC_CHECK_FUNC(connect, libcc1_check_socket=no, libcc1_check_socket=yes)\n+   if test \"$libcc1_check_socket\" = \"yes\"; then\n+     unset ac_cv_func_connect\n+     AC_CHECK_LIB(socket, main, libcc1_cv_lib_sockets=\"-lsocket\",\n+     \t\t  libcc1_check_both=yes)\n+   fi\n+   if test \"$libcc1_check_both\" = \"yes\"; then\n+     libcc1_old_libs=$LIBS\n+     LIBS=\"$LIBS -lsocket -lnsl\"\n+     unset ac_cv_func_accept\n+     AC_CHECK_FUNC(accept,\n+\t\t   [libcc1_check_nsl=no\n+\t\t    libcc1_cv_lib_sockets=\"-lsocket -lnsl\"])\n+     unset ac_cv_func_accept\n+     LIBS=$libcc1_old_libs\n+   fi\n+   unset ac_cv_func_gethostbyname\n+   libcc1_old_libs=\"$LIBS\"\n+   AC_CHECK_FUNC(gethostbyname, ,\n+\t\t [AC_CHECK_LIB(nsl, main,\n+\t\t \t[libcc1_cv_lib_sockets=\"$libcc1_cv_lib_sockets -lnsl\"])])\n+   unset ac_cv_func_gethostbyname\n+   LIBS=$libcc1_old_libs\n+])\n+LIBS=\"$LIBS $libcc1_cv_lib_sockets\"\n+\n # If any of these functions are missing, simply don't bother building\n # this plugin.\n GCC_ENABLE_PLUGINS"}, {"sha": "5db42046ae7a2240aa5699782af67e0d0a7703a7", "filename": "libcc1/connection.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ed4f879945c6e171f00fa010e047c79bf269548/libcc1%2Fconnection.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ed4f879945c6e171f00fa010e047c79bf269548/libcc1%2Fconnection.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2Fconnection.cc?ref=0ed4f879945c6e171f00fa010e047c79bf269548", "patch": "@@ -21,6 +21,7 @@ along with GCC; see the file COPYING3.  If not see\n #include <string>\n #include <unistd.h>\n #include <sys/types.h>\n+#include <string.h>\n #include <errno.h>\n #include \"marshall.hh\"\n #include \"connection.hh\""}, {"sha": "7d7d2c190c7fcad124e53fedc208a04e0a07575e", "filename": "libcc1/libcc1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ed4f879945c6e171f00fa010e047c79bf269548/libcc1%2Flibcc1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ed4f879945c6e171f00fa010e047c79bf269548/libcc1%2Flibcc1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2Flibcc1.cc?ref=0ed4f879945c6e171f00fa010e047c79bf269548", "patch": "@@ -440,7 +440,7 @@ libcc1_compile (struct gcc_base_context *s,\n   libcc1 *self = (libcc1 *) s;\n \n   int fds[2];\n-  if (socketpair (AF_LOCAL, SOCK_STREAM, 0, fds) != 0)\n+  if (socketpair (AF_UNIX, SOCK_STREAM, 0, fds) != 0)\n     {\n       self->print (\"could not create socketpair\\n\");\n       return 0;"}]}