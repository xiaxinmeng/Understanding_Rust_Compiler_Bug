{"sha": "7269aee7d553dc3b89aadc00950024fde12631b4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzI2OWFlZTdkNTUzZGMzYjg5YWFkYzAwOTUwMDI0ZmRlMTI2MzFiNA==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2006-02-06T17:45:00Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2006-02-06T17:45:00Z"}, "message": "s390.c (TARGET_MANGLE_FUNDAMENTAL_TYPE): Define.\n\n2006-02-06  Aldy Hernandez  <aldyh@redhat.com>\n\n\t* config/s390/s390.c (TARGET_MANGLE_FUNDAMENTAL_TYPE): Define.\n\t(s390_mangle_fundamental_type): New.\n\t* config/s390/linux.h (TARGET_ALTERNATE_LONG_DOUBLE_MANGLING):\n\tDefine.\n\n\t* config/alpha/alpha.c (TARGET_MANGLE_FUNDAMENTAL_TYPE): Define.\n\t(alpha_mangle_fundamental_type): New.\n\t* config/alpha/linux.h (TARGET_ALTERNATE_LONG_DOUBLE_MANGLING):\n\tDefine.\n\n\t* config/sparc/linux.h (TARGET_ALTERNATE_LONG_DOUBLE_MANGLING):\n\tDefine.\n\t* config/sparc/linux64.h (TARGET_ALTERNATE_LONG_DOUBLE_MANGLING):\n\tDefine.\n\t* config/sparc/sparc.c (TARGET_MANGLE_FUNDAMENTAL_TYPE): Define.\n\t(sparc_mangle_fundamental_type): New.\n\nFrom-SVN: r110655", "tree": {"sha": "e8246f6bbbc449d315d9ddbf1bacb459740fd188", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e8246f6bbbc449d315d9ddbf1bacb459740fd188"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7269aee7d553dc3b89aadc00950024fde12631b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7269aee7d553dc3b89aadc00950024fde12631b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7269aee7d553dc3b89aadc00950024fde12631b4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7269aee7d553dc3b89aadc00950024fde12631b4/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "da8c4a55ee47e100e59e9a133b015ffcda086093", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da8c4a55ee47e100e59e9a133b015ffcda086093", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da8c4a55ee47e100e59e9a133b015ffcda086093"}], "stats": {"total": 95, "additions": 95, "deletions": 0}, "files": [{"sha": "943f0e07c68945f925f0adea9524ad3c632ad548", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7269aee7d553dc3b89aadc00950024fde12631b4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7269aee7d553dc3b89aadc00950024fde12631b4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7269aee7d553dc3b89aadc00950024fde12631b4", "patch": "@@ -1,3 +1,22 @@\n+2006-02-06  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* config/s390/s390.c (TARGET_MANGLE_FUNDAMENTAL_TYPE): Define.\n+\t(s390_mangle_fundamental_type): New.\n+\t* config/s390/linux.h (TARGET_ALTERNATE_LONG_DOUBLE_MANGLING):\n+\tDefine.\n+\n+\t* config/alpha/alpha.c (TARGET_MANGLE_FUNDAMENTAL_TYPE): Define.\n+\t(alpha_mangle_fundamental_type): New.\n+\t* config/alpha/linux.h (TARGET_ALTERNATE_LONG_DOUBLE_MANGLING):\n+\tDefine.\n+\n+\t* config/sparc/linux.h (TARGET_ALTERNATE_LONG_DOUBLE_MANGLING):\n+\tDefine.\n+\t* config/sparc/linux64.h (TARGET_ALTERNATE_LONG_DOUBLE_MANGLING):\n+\tDefine.\n+\t* config/sparc/sparc.c (TARGET_MANGLE_FUNDAMENTAL_TYPE): Define.\n+\t(sparc_mangle_fundamental_type): New.\n+\n 2006-02-06  Jakub Jelinek  <jakub@redhat.com>\n \n \t* config.gcc (s390-*-linux*): Add s390/t-linux to tmake_file."}, {"sha": "909035a269400562850a20b08d51ea55ea1524fc", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7269aee7d553dc3b89aadc00950024fde12631b4/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7269aee7d553dc3b89aadc00950024fde12631b4/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=7269aee7d553dc3b89aadc00950024fde12631b4", "patch": "@@ -235,6 +235,21 @@ alpha_handle_option (size_t code, const char *arg, int value)\n   return true;\n }\n \n+#ifdef TARGET_ALTERNATE_LONG_DOUBLE_MANGLING\n+/* Implement TARGET_MANGLE_FUNDAMENTAL_TYPE.  */\n+\n+static const char *\n+alpha_mangle_fundamental_type (tree type)\n+{\n+  if (TYPE_MAIN_VARIANT (type) == long_double_type_node\n+      && TARGET_LONG_DOUBLE_128)\n+    return \"g\";\n+\n+  /* For all other types, use normal C++ mangling.  */\n+  return NULL;\n+}\n+#endif\n+\n /* Parse target option strings.  */\n \n void\n@@ -10722,6 +10737,11 @@ alpha_init_libfuncs (void)\n #undef TARGET_HANDLE_OPTION\n #define TARGET_HANDLE_OPTION alpha_handle_option\n \n+#ifdef TARGET_ALTERNATE_LONG_DOUBLE_MANGLING\n+#undef TARGET_MANGLE_FUNDAMENTAL_TYPE\n+#define TARGET_MANGLE_FUNDAMENTAL_TYPE alpha_mangle_fundamental_type\n+#endif\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n \f"}, {"sha": "3aa9d0005da81dcc12ad50945c7e060a3cb0e213", "filename": "gcc/config/alpha/linux.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7269aee7d553dc3b89aadc00950024fde12631b4/gcc%2Fconfig%2Falpha%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7269aee7d553dc3b89aadc00950024fde12631b4/gcc%2Fconfig%2Falpha%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Flinux.h?ref=7269aee7d553dc3b89aadc00950024fde12631b4", "patch": "@@ -77,3 +77,6 @@ Boston, MA 02110-1301, USA.  */\n #endif\n \n #define MD_UNWIND_SUPPORT \"config/alpha/linux-unwind.h\"\n+\n+/* Define if long doubles should be mangled as 'g'.  */\n+#define TARGET_ALTERNATE_LONG_DOUBLE_MANGLING"}, {"sha": "fcb6dff0317304b0b15c21f7c4c1518f07606bd9", "filename": "gcc/config/s390/linux.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7269aee7d553dc3b89aadc00950024fde12631b4/gcc%2Fconfig%2Fs390%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7269aee7d553dc3b89aadc00950024fde12631b4/gcc%2Fconfig%2Fs390%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Flinux.h?ref=7269aee7d553dc3b89aadc00950024fde12631b4", "patch": "@@ -95,4 +95,7 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n #define TARGET_THREAD_SSP_OFFSET        (TARGET_64BIT ? 0x28 : 0x14)\n #endif\n \n+/* Define if long doubles should be mangled as 'g'.  */\n+#define TARGET_ALTERNATE_LONG_DOUBLE_MANGLING\n+\n #endif"}, {"sha": "bdf1512554126d79a5619c6c6aa8312f7692d2d2", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7269aee7d553dc3b89aadc00950024fde12631b4/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7269aee7d553dc3b89aadc00950024fde12631b4/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=7269aee7d553dc3b89aadc00950024fde12631b4", "patch": "@@ -4293,6 +4293,21 @@ s390_output_dwarf_dtprel (FILE *file, int size, rtx x)\n   fputs (\"@DTPOFF\", file);\n }\n \n+#ifdef TARGET_ALTERNATE_LONG_DOUBLE_MANGLING\n+/* Implement TARGET_MANGLE_FUNDAMENTAL_TYPE.  */\n+\n+static const char *\n+s390_mangle_fundamental_type (tree type)\n+{\n+  if (TYPE_MAIN_VARIANT (type) == long_double_type_node\n+      && TARGET_LONG_DOUBLE_128)\n+    return \"g\";\n+\n+  /* For all other types, use normal C++ mangling.  */\n+  return NULL;\n+}\n+#endif\n+\n /* In the name of slightly smaller debug output, and to cater to\n    general assembler lossage, recognize various UNSPEC sequences\n    and turn them back into a direct symbol reference.  */\n@@ -9185,6 +9200,11 @@ s390_reorg (void)\n #define TARGET_ASM_OUTPUT_DWARF_DTPREL s390_output_dwarf_dtprel\n #endif\n \n+#ifdef TARGET_ALTERNATE_LONG_DOUBLE_MANGLING\n+#undef TARGET_MANGLE_FUNDAMENTAL_TYPE\n+#define TARGET_MANGLE_FUNDAMENTAL_TYPE s390_mangle_fundamental_type\n+#endif\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n #include \"gt-s390.h\""}, {"sha": "df0fe58bc7352922fb98e47332d51db2e8425b25", "filename": "gcc/config/sparc/linux.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7269aee7d553dc3b89aadc00950024fde12631b4/gcc%2Fconfig%2Fsparc%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7269aee7d553dc3b89aadc00950024fde12631b4/gcc%2Fconfig%2Fsparc%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Flinux.h?ref=7269aee7d553dc3b89aadc00950024fde12631b4", "patch": "@@ -229,3 +229,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n /* sparc glibc provides __stack_chk_guard in [%g7 + 0x14].  */\n #define TARGET_THREAD_SSP_OFFSET\t0x14\n #endif\n+\n+/* Define if long doubles should be mangled as 'g'.  */\n+#define TARGET_ALTERNATE_LONG_DOUBLE_MANGLING"}, {"sha": "f997fee37f7cd4be42689b4cbc62473c40948d72", "filename": "gcc/config/sparc/linux64.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7269aee7d553dc3b89aadc00950024fde12631b4/gcc%2Fconfig%2Fsparc%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7269aee7d553dc3b89aadc00950024fde12631b4/gcc%2Fconfig%2Fsparc%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Flinux64.h?ref=7269aee7d553dc3b89aadc00950024fde12631b4", "patch": "@@ -364,3 +364,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n    sparc64 glibc provides it at [%g7 + 0x28].  */\n #define TARGET_THREAD_SSP_OFFSET\t(TARGET_ARCH64 ? 0x28 : 0x14)\n #endif\n+\n+/* Define if long doubles should be mangled as 'g'.  */\n+#define TARGET_ALTERNATE_LONG_DOUBLE_MANGLING"}, {"sha": "c633e8a9fc7c441395c6c4fd7fc32469781a7828", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7269aee7d553dc3b89aadc00950024fde12631b4/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7269aee7d553dc3b89aadc00950024fde12631b4/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=7269aee7d553dc3b89aadc00950024fde12631b4", "patch": "@@ -368,6 +368,9 @@ static int sparc_arg_partial_bytes (CUMULATIVE_ARGS *,\n static void sparc_dwarf_handle_frame_unspec (const char *, rtx, int);\n static void sparc_output_dwarf_dtprel (FILE *, int, rtx) ATTRIBUTE_UNUSED;\n static void sparc_file_end (void);\n+#ifdef TARGET_ALTERNATE_LONG_DOUBLE_MANGLING\n+static const char *sparc_mangle_fundamental_type (tree);\n+#endif\n #ifdef SUBTARGET_ATTRIBUTE_TABLE\n const struct attribute_spec sparc_attribute_table[];\n #endif\n@@ -527,6 +530,11 @@ static bool fpu_option_set = false;\n #undef TARGET_ASM_FILE_END\n #define TARGET_ASM_FILE_END sparc_file_end\n \n+#ifdef TARGET_ALTERNATE_LONG_DOUBLE_MANGLING\n+#undef TARGET_MANGLE_FUNDAMENTAL_TYPE\n+#define TARGET_MANGLE_FUNDAMENTAL_TYPE sparc_mangle_fundamental_type\n+#endif\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n /* Implement TARGET_HANDLE_OPTION.  */\n@@ -8713,6 +8721,22 @@ sparc_file_end (void)\n     file_end_indicate_exec_stack ();\n }\n \n+#ifdef TARGET_ALTERNATE_LONG_DOUBLE_MANGLING\n+/* Implement TARGET_MANGLE_FUNDAMENTAL_TYPE.  */\n+\n+static const char *\n+sparc_mangle_fundamental_type (tree type)\n+{\n+  if (!TARGET_64BIT\n+      && TYPE_MAIN_VARIANT (type) == long_double_type_node\n+      && TARGET_LONG_DOUBLE_128)\n+    return \"g\";\n+\n+  /* For all other types, use normal C++ mangling.  */\n+  return NULL;\n+}\n+#endif\n+\n /* Expand code to perform a 8 or 16-bit compare and swap by doing 32-bit\n    compare and swap on the word containing the byte or half-word.  */\n "}]}