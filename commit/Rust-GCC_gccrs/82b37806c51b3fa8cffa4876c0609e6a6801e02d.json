{"sha": "82b37806c51b3fa8cffa4876c0609e6a6801e02d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODJiMzc4MDZjNTFiM2ZhOGNmZmE0ODc2YzA2MDllNmE2ODAxZTAyZA==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2012-02-08T16:59:17Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2012-02-08T16:59:17Z"}, "message": "avr.md (SREG_ADDR): Remove constant definition.\n\n\t* config/avr/avr.md (SREG_ADDR): Remove constant definition.\n\t(SP_ADDR): Ditto.\n\t(RAMPZ_ADDR): Ditto.\n\t* config/avr/avr.c (avr_addr_t): New typedef.\n\t(avr_addr): New struct to hold RAM address of SPL, SPH, RAMPZ, SREG.\n\t(avr_init_expanders): Initialize it.\n\t(expand_prologue): Use avr_addr instead of RAMPZ_ADDR, SP_ADDR,\n\tSREG_ADDR.\n\t(expand_epilogue): Ditto.\n\t(avr_print_operand): Ditto.\n\t(avr_file_start): Ditto.\n\t(avr_emit_movmemhi): Ditto.\n\nFrom-SVN: r184011", "tree": {"sha": "784f83660c11c20b5d56ebc421c3f38966d38b5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/784f83660c11c20b5d56ebc421c3f38966d38b5d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/82b37806c51b3fa8cffa4876c0609e6a6801e02d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82b37806c51b3fa8cffa4876c0609e6a6801e02d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82b37806c51b3fa8cffa4876c0609e6a6801e02d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82b37806c51b3fa8cffa4876c0609e6a6801e02d/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "31432e219f044eb7195b9f802db88ace3e7fe8a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31432e219f044eb7195b9f802db88ace3e7fe8a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31432e219f044eb7195b9f802db88ace3e7fe8a1"}], "stats": {"total": 95, "additions": 63, "deletions": 32}, "files": [{"sha": "59369edfd4a38f2189999b27082064564ff2c4f3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82b37806c51b3fa8cffa4876c0609e6a6801e02d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82b37806c51b3fa8cffa4876c0609e6a6801e02d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=82b37806c51b3fa8cffa4876c0609e6a6801e02d", "patch": "@@ -1,3 +1,18 @@\n+2012-02-08  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\t* config/avr/avr.md (SREG_ADDR): Remove constant definition.\n+\t(SP_ADDR): Ditto.\n+\t(RAMPZ_ADDR): Ditto.\n+\t* config/avr/avr.c (avr_addr_t): New typedef.\n+\t(avr_addr): New struct to hold RAM address of SPL, SPH, RAMPZ, SREG.\n+\t(avr_init_expanders): Initialize it.\n+\t(expand_prologue): Use avr_addr instead of RAMPZ_ADDR, SP_ADDR,\n+\tSREG_ADDR.\n+\t(expand_epilogue): Ditto.\n+\t(avr_print_operand): Ditto.\n+\t(avr_file_start): Ditto.\n+\t(avr_emit_movmemhi): Ditto.\n+\n 2012-02-08  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/46886"}, {"sha": "5b71b366ffbbf113a757ccc15557b7523849c5d5", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 48, "deletions": 26, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82b37806c51b3fa8cffa4876c0609e6a6801e02d/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82b37806c51b3fa8cffa4876c0609e6a6801e02d/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=82b37806c51b3fa8cffa4876c0609e6a6801e02d", "patch": "@@ -104,6 +104,24 @@ static const char* const progmem_section_prefix[6] =\n     \".progmem5.data\"\n   };\n \n+/* Holding RAM addresses of some SFRs used by the compiler and that\n+   are unique over all devices in an architecture like 'avr4'.  */\n+  \n+typedef struct\n+{\n+  /* SREG: The pocessor status */\n+  int sreg;\n+\n+  /* RAMPZ: The high byte of 24-bit address used with ELPM */ \n+  int rampz;\n+\n+  /* SP: The stack pointer and its low and high byte */\n+  int sp_l;\n+  int sp_h;\n+} avr_addr_t;\n+\n+static avr_addr_t avr_addr;\n+\n \n /* Prototypes for local helper functions.  */\n \n@@ -394,6 +412,18 @@ avr_option_override (void)\n   avr_current_device = &avr_mcu_types[avr_mcu_index];\n   avr_current_arch = &avr_arch_types[avr_current_device->arch];\n   avr_extra_arch_macro = avr_current_device->macro;\n+  \n+  /* RAM addresses of some SFRs common to all Devices in respective Arch. */\n+\n+  /* SREG: Status Register containing flags like I (global IRQ) */\n+  avr_addr.sreg = 0x3F + avr_current_arch->sfr_offset;\n+\n+  /* RAMPZ: Address' high part when loading via ELPM */\n+  avr_addr.rampz = 0x3B + avr_current_arch->sfr_offset;\n+\n+  /* SP: Stack Pointer (SP_H:SP_L) */\n+  avr_addr.sp_l = 0x3D + avr_current_arch->sfr_offset;\n+  avr_addr.sp_h = avr_addr.sp_l + 1;\n \n   init_machine_status = avr_init_machine_status;\n \n@@ -433,7 +463,7 @@ avr_init_expanders (void)\n \n   lpm_addr_reg_rtx = gen_rtx_REG (HImode, REG_Z);\n \n-  rampz_rtx = gen_rtx_MEM (QImode, GEN_INT (RAMPZ_ADDR));\n+  rampz_rtx = gen_rtx_MEM (QImode, GEN_INT (avr_addr.rampz));\n \n   xstring_empty = gen_rtx_CONST_STRING (VOIDmode, \"\");\n   xstring_e = gen_rtx_CONST_STRING (VOIDmode, \"e\");\n@@ -1133,7 +1163,8 @@ expand_prologue (void)\n \n       /* Push SREG.  */\n       /* ??? There's no dwarf2 column reserved for SREG.  */\n-      emit_move_insn (tmp_reg_rtx, gen_rtx_MEM (QImode, GEN_INT (SREG_ADDR)));\n+      emit_move_insn (tmp_reg_rtx,\n+                      gen_rtx_MEM (QImode, GEN_INT (avr_addr.sreg)));\n       emit_push_byte (TMP_REGNO, false);\n \n       /* Push RAMPZ.  */\n@@ -1386,7 +1417,7 @@ expand_epilogue (bool sibcall_p)\n       /* Restore SREG using tmp reg as scratch.  */\n       \n       emit_pop_byte (TMP_REGNO);\n-      emit_move_insn (gen_rtx_MEM (QImode, GEN_INT (SREG_ADDR)), \n+      emit_move_insn (gen_rtx_MEM (QImode, GEN_INT (avr_addr.sreg)), \n                       tmp_reg_rtx);\n \n       /* Restore tmp REG.  */\n@@ -1869,17 +1900,14 @@ avr_print_operand (FILE *file, rtx x, int code)\n       else if (low_io_address_operand (x, VOIDmode)\n                || high_io_address_operand (x, VOIDmode))\n         {\n-          switch (ival)\n+          if (ival == avr_addr.rampz)       fprintf (file, \"__RAMPZ__\");\n+          else if (ival == avr_addr.sreg)   fprintf (file, \"__SREG__\");\n+          else if (ival == avr_addr.sp_l)   fprintf (file, \"__SP_L__\");\n+          else if (ival == avr_addr.sp_h)   fprintf (file, \"__SP_H__\");\n+          else\n             {\n-            case RAMPZ_ADDR: fprintf (file, \"__RAMPZ__\"); break;\n-            case SREG_ADDR: fprintf (file, \"__SREG__\"); break;\n-            case SP_ADDR:   fprintf (file, \"__SP_L__\"); break;\n-            case SP_ADDR+1: fprintf (file, \"__SP_H__\"); break;\n-              \n-            default:\n               fprintf (file, HOST_WIDE_INT_PRINT_HEX,\n                        ival - avr_current_arch->sfr_offset);\n-              break;\n             }\n         }\n       else\n@@ -7294,22 +7322,16 @@ avr_file_start (void)\n \n   default_file_start ();\n \n+  /* Print I/O addresses of some SFRs used with IN and OUT.  */\n+\n   if (!AVR_HAVE_8BIT_SP)\n-    fprintf (asm_out_file,\n-             \"__SP_H__ = 0x%02x\\n\",\n-             -sfr_offset + SP_ADDR + 1);\n+    fprintf (asm_out_file, \"__SP_H__ = 0x%02x\\n\", avr_addr.sp_h - sfr_offset);\n \n-  fprintf (asm_out_file,\n-           \"__SP_L__ = 0x%02x\\n\"\n-           \"__SREG__ = 0x%02x\\n\"\n-           \"__RAMPZ__ = 0x%02x\\n\"\n-           \"__tmp_reg__ = %d\\n\" \n-           \"__zero_reg__ = %d\\n\",\n-           -sfr_offset + SP_ADDR,\n-           -sfr_offset + SREG_ADDR,\n-           -sfr_offset + RAMPZ_ADDR,\n-           TMP_REGNO,\n-           ZERO_REGNO);\n+  fprintf (asm_out_file, \"__SP_L__ = 0x%02x\\n\", avr_addr.sp_l - sfr_offset);\n+  fprintf (asm_out_file, \"__SREG__ = 0x%02x\\n\", avr_addr.sreg - sfr_offset);\n+  fprintf (asm_out_file, \"__RAMPZ__ = 0x%02x\\n\", avr_addr.rampz - sfr_offset);\n+  fprintf (asm_out_file, \"__tmp_reg__ = %d\\n\", TMP_REGNO);\n+  fprintf (asm_out_file, \"__zero_reg__ = %d\\n\", ZERO_REGNO);\n }\n \n \n@@ -9736,7 +9758,7 @@ avr_emit_movmemhi (rtx *xop)\n       emit_move_insn (r23, a_hi8);\n       \n       insn = fun (addr0, addr1, xas, loop_reg, addr0, addr1,\n-                  lpm_reg_rtx, loop_reg16, r23, r23, GEN_INT (RAMPZ_ADDR));\n+                  lpm_reg_rtx, loop_reg16, r23, r23, GEN_INT (avr_addr.rampz));\n     }\n \n   set_mem_addr_space (SET_SRC (XVECEXP (insn, 0, 0)), as);"}, {"sha": "79c81b796120f939527177910880d4a05d427b61", "filename": "gcc/config/avr/avr.md", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82b37806c51b3fa8cffa4876c0609e6a6801e02d/gcc%2Fconfig%2Favr%2Favr.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82b37806c51b3fa8cffa4876c0609e6a6801e02d/gcc%2Fconfig%2Favr%2Favr.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.md?ref=82b37806c51b3fa8cffa4876c0609e6a6801e02d", "patch": "@@ -57,12 +57,6 @@\n    (LPM_REGNO\t0)\t; implicit target register of LPM\n    (TMP_REGNO\t0)\t; temporary register r0\n    (ZERO_REGNO\t1)\t; zero register r1\n-\n-   ;; RAM addresses of some SFRs common to all Devices.\n-\n-   (SREG_ADDR   0x5F)   ; Status Register\n-   (SP_ADDR     0x5D)   ; Stack Pointer\n-   (RAMPZ_ADDR  0x5B)   ; Address' high part when loading via ELPM\n    ])\n \n (define_c_enum \"unspec\""}]}