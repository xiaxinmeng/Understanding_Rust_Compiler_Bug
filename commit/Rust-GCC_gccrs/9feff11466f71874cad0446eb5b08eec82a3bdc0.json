{"sha": "9feff11466f71874cad0446eb5b08eec82a3bdc0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWZlZmYxMTQ2NmY3MTg3NGNhZDA0NDZlYjViMDhlZWM4MmEzYmRjMA==", "commit": {"author": {"name": "John David Anglin", "email": "dave.anglin@nrc-cnrc.gc.ca", "date": "2003-04-25T00:58:28Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2003-04-25T00:58:28Z"}, "message": "re PR rtl-optimization/8705 ([HP-PA] ICE in emit_move_insn_1, at expr.c:3101)\n\n\tPR opt/8705\n\t* gcse.c (try_replace_reg): On a successful substitution of a constant\n\tinto a single set, try to simplify the source of the set.\n\t* loop.c (scan_loop): Don't try to optimize a MODE_CC set with a\n\tconstant source.\n\nFrom-SVN: r66060", "tree": {"sha": "d187c59aebf3efeb9af07a85e938b7f451cd074a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d187c59aebf3efeb9af07a85e938b7f451cd074a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9feff11466f71874cad0446eb5b08eec82a3bdc0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9feff11466f71874cad0446eb5b08eec82a3bdc0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9feff11466f71874cad0446eb5b08eec82a3bdc0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9feff11466f71874cad0446eb5b08eec82a3bdc0/comments", "author": null, "committer": null, "parents": [{"sha": "13e7174292985ffa15d192d59da140b70e0d8a5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13e7174292985ffa15d192d59da140b70e0d8a5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13e7174292985ffa15d192d59da140b70e0d8a5f"}], "stats": {"total": 25, "additions": 24, "deletions": 1}, "files": [{"sha": "51371d311ac1e4a26e7cee240d6884bd36c8e1c2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9feff11466f71874cad0446eb5b08eec82a3bdc0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9feff11466f71874cad0446eb5b08eec82a3bdc0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9feff11466f71874cad0446eb5b08eec82a3bdc0", "patch": "@@ -1,3 +1,11 @@\n+2003-04-24  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n+\n+\tPR opt/8705\n+\t* gcse.c (try_replace_reg): On a successful substitution of a constant\n+\tinto a single set, try to simplify the source of the set.\n+\t* loop.c (scan_loop): Don't try to optimize a MODE_CC set with a\n+\tconstant source.\n+\n 2003-04-24  Neil Booth  <neil@daikokuya.co.uk>\n \n \t* cpplex.c (cpp_token_len): Tighten up."}, {"sha": "db2fb57ff2104a3d177d3dd409821354a28d88c2", "filename": "gcc/gcse.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9feff11466f71874cad0446eb5b08eec82a3bdc0/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9feff11466f71874cad0446eb5b08eec82a3bdc0/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=9feff11466f71874cad0446eb5b08eec82a3bdc0", "patch": "@@ -3963,6 +3963,15 @@ try_replace_reg (from, to, insn)\n   if (num_changes_pending () && apply_change_group ())\n     success = 1;\n \n+  /* Try to simplify SET_SRC if we have substituted a constant.  */\n+  if (success && set && CONSTANT_P (to))\n+    {\n+      src = simplify_rtx (SET_SRC (set));\n+\n+      if (src)\n+\tvalidate_change (insn, &SET_SRC (set), src, 0);\n+    }\n+\n   if (!success && set && reg_mentioned_p (from, SET_SRC (set)))\n     {\n       /* If above failed and this is a single set, try to simplify the source of"}, {"sha": "1bdc1bdca345682d89ebd48c41e4f20e4bc959b5", "filename": "gcc/loop.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9feff11466f71874cad0446eb5b08eec82a3bdc0/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9feff11466f71874cad0446eb5b08eec82a3bdc0/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=9feff11466f71874cad0446eb5b08eec82a3bdc0", "patch": "@@ -833,11 +833,17 @@ scan_loop (loop, flags)\n \t\t   That behavior is incorrect and was removed.  */\n \t\tinsert_temp = 1;\n \n+\t      /* Don't try to optimize a MODE_CC set with a constant\n+\t\t source.  It probably will be combined with a conditional\n+\t\t jump.  */\n+\t      if (GET_MODE_CLASS (GET_MODE (SET_DEST (set))) == MODE_CC\n+\t\t  && CONSTANT_P (src))\n+\t\t;\n \t      /* Don't try to optimize a register that was made\n \t\t by loop-optimization for an inner loop.\n \t\t We don't know its life-span, so we can't compute\n \t\t the benefit.  */\n-\t      if (REGNO (SET_DEST (set)) >= max_reg_before_loop)\n+\t      else if (REGNO (SET_DEST (set)) >= max_reg_before_loop)\n \t\t;\n \t      /* Don't move the source and add a reg-to-reg copy:\n \t\t - with -Os (this certainly increases size),"}]}