{"sha": "c1415b6e0baf02a393a2fb48fffd7532d6b1de01", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzE0MTViNmUwYmFmMDJhMzkzYTJmYjQ4ZmZmZDc1MzJkNmIxZGUwMQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-08-23T21:14:10Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-08-23T21:14:10Z"}, "message": "* config/i386/sse-22.c: Rearrange to fix sse-22a.c failure.\n\nFrom-SVN: r178017", "tree": {"sha": "fe2c03b05c52c5452138cc46ebab91a90b088ab1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fe2c03b05c52c5452138cc46ebab91a90b088ab1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c1415b6e0baf02a393a2fb48fffd7532d6b1de01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1415b6e0baf02a393a2fb48fffd7532d6b1de01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1415b6e0baf02a393a2fb48fffd7532d6b1de01", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1415b6e0baf02a393a2fb48fffd7532d6b1de01/comments", "author": null, "committer": null, "parents": [{"sha": "78d8c16ca93453666755e70c5931bffda080d12c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78d8c16ca93453666755e70c5931bffda080d12c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78d8c16ca93453666755e70c5931bffda080d12c"}], "stats": {"total": 76, "additions": 39, "deletions": 37}, "files": [{"sha": "89ea7b3e0da79a271406b8dbd9b7b0c1c6a9d8bb", "filename": "gcc/testsuite/gcc.target/i386/sse-22.c", "status": "modified", "additions": 39, "deletions": 37, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1415b6e0baf02a393a2fb48fffd7532d6b1de01/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1415b6e0baf02a393a2fb48fffd7532d6b1de01/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c?ref=c1415b6e0baf02a393a2fb48fffd7532d6b1de01", "patch": "@@ -161,9 +161,14 @@ test_4 (_mm_cmpestrz, int, __m128i, int, __m128i, int, 1)\n \n /* immintrin.h (AVX/AVX2/RDRND/FSGSBASE/F16C) */\n #ifdef DIFFERENT_PRAGMAS\n-#pragma GCC target (\"avx,rdrnd,fsgsbase,f16c\")\n+#pragma GCC target (\"avx,avx2,rdrnd,fsgsbase,f16c\")\n #endif\n #include <immintrin.h>\n+test_1 (_cvtss_sh, unsigned short, float, 1)\n+test_1 (_mm_cvtps_ph, __m128i, __m128, 1)\n+test_1 (_mm256_cvtps_ph, __m128i, __m256, 1)\n+\n+/* avxintrin.h */\n test_2 (_mm256_blend_pd, __m256d, __m256d, __m256d, 1)\n test_2 (_mm256_blend_ps, __m256, __m256, __m256, 1)\n test_2 (_mm256_dp_ps, __m256, __m256, __m256, 1)\n@@ -202,9 +207,39 @@ test_2 (_mm256_insert_epi64, __m256i, __m256i, long long, 1)\n #endif\n test_1 (_mm256_round_pd, __m256d, __m256d, 1)\n test_1 (_mm256_round_ps, __m256, __m256, 1)\n-test_1 (_cvtss_sh, unsigned short, float, 1)\n-test_1 (_mm_cvtps_ph, __m128i, __m128, 1)\n-test_1 (_mm256_cvtps_ph, __m128i, __m256, 1)\n+\n+/* avx2intrin.h */\n+test_2 ( _mm256_mpsadbw_epu8, __m256i, __m256i, __m256i, 1)\n+test_2 ( _mm256_alignr_epi8, __m256i, __m256i, __m256i, 1)\n+test_2 ( _mm256_blend_epi16, __m256i, __m256i, __m256i, 1)\n+test_1 ( _mm256_shuffle_epi32, __m256i, __m256i, 1)\n+test_1 ( _mm256_shufflehi_epi16, __m256i, __m256i, 1)\n+test_1 ( _mm256_shufflelo_epi16, __m256i, __m256i, 1)\n+test_1 ( _mm256_slli_si256, __m256i, __m256i, 8)\n+test_1 ( _mm256_srli_si256, __m256i, __m256i, 8)\n+test_2 ( _mm_blend_epi32, __m128i, __m128i, __m128i, 1)\n+test_2 ( _mm256_blend_epi32, __m256i, __m256i, __m256, 1)\n+test_1 ( _mm256_permute4x64_pd, __m256d, __m256d, 1)\n+test_1 ( _mm256_permute4x64_epi64, __m256i, __m256i, 1)\n+test_2 ( _mm256_permute2x128_si256, __m256i, __m256i, __m256i, 1)\n+test_1 ( _mm256_extracti128_si256, __m128i, __m256i, 1)\n+test_2 ( _mm256_inserti128_si256, __m256i, __m256i, __m128i, 1)\n+test_2 ( _mm_i32gather_pd, __m128d, double const *, __m128i, 1)\n+test_2 ( _mm256_i32gather_pd, __m256d, double const *, __m128i, 1)\n+test_2 ( _mm_i64gather_pd, __m128d, double const *, __m128i, 1)\n+test_2 ( _mm256_i64gather_pd, __m256d, double const *, __m256i, 1)\n+test_2 ( _mm_i32gather_ps, __m128, float const *, __m128i, 1)\n+test_2 ( _mm256_i32gather_ps, __m256, float const *, __m256i, 1)\n+test_2 ( _mm_i64gather_ps, __m128, float const *, __m128i, 1)\n+test_2 ( _mm256_i64gather_ps, __m128, float const *, __m256i, 1)\n+test_2 ( _mm_i32gather_epi64, __m128i, long long int const *, __m128i, 1)\n+test_2 ( _mm256_i32gather_epi64, __m256i, long long int const *, __m128i, 1)\n+test_2 ( _mm_i64gather_epi64, __m128i, long long int const *, __m128i, 1)\n+test_2 ( _mm256_i64gather_epi64,  __m256i, long long int const *, __m256i, 1)\n+test_2 ( _mm_i32gather_epi32, __m128i, int const *, __m128i, 1)\n+test_2 ( _mm256_i32gather_epi32, __m256i, int const *, __m256i, 1)\n+test_2 ( _mm_i64gather_epi32, __m128i, int const *, __m128i, 1)\n+test_2 ( _mm256_i64gather_epi32, __m128i, int const *, __m256i, 1)\n \n /* wmmintrin.h (AES/PCLMUL).  */\n #ifdef DIFFERENT_PRAGMAS\n@@ -248,36 +283,3 @@ test_1 ( __bextri_u32, unsigned int, unsigned int, 1)\n #ifdef __x86_64__\n test_1 ( __bextri_u64, unsigned long long, unsigned long long, 1)\n #endif\n-\n-/* avx2intrin.h */\n-test_2 ( _mm256_mpsadbw_epu8, __m256i, __m256i, __m256i, 1)\n-test_2 ( _mm256_alignr_epi8, __m256i, __m256i, __m256i, 1)\n-test_2 ( _mm256_blend_epi16, __m256i, __m256i, __m256i, 1)\n-test_1 ( _mm256_shuffle_epi32, __m256i, __m256i, 1)\n-test_1 ( _mm256_shufflehi_epi16, __m256i, __m256i, 1)\n-test_1 ( _mm256_shufflelo_epi16, __m256i, __m256i, 1)\n-test_1 ( _mm256_slli_si256, __m256i, __m256i, 8)\n-test_1 ( _mm256_srli_si256, __m256i, __m256i, 8)\n-test_2 ( _mm_blend_epi32, __m128i, __m128i, __m128i, 1)\n-test_2 ( _mm256_blend_epi32, __m256i, __m256i, __m256, 1)\n-test_1 ( _mm256_permute4x64_pd, __m256d, __m256d, 1)\n-test_1 ( _mm256_permute4x64_epi64, __m256i, __m256i, 1)\n-test_2 ( _mm256_permute2x128_si256, __m256i, __m256i, __m256i, 1)\n-test_1 ( _mm256_extracti128_si256, __m128i, __m256i, 1)\n-test_2 ( _mm256_inserti128_si256, __m256i, __m256i, __m128i, 1)\n-test_2 ( _mm_i32gather_pd, __m128d, double const *, __m128i, 1)\n-test_2 ( _mm256_i32gather_pd, __m256d, double const *, __m128i, 1)\n-test_2 ( _mm_i64gather_pd, __m128d, double const *, __m128i, 1)\n-test_2 ( _mm256_i64gather_pd, __m256d, double const *, __m256i, 1)\n-test_2 ( _mm_i32gather_ps, __m128, float const *, __m128i, 1)\n-test_2 ( _mm256_i32gather_ps, __m256, float const *, __m256i, 1)\n-test_2 ( _mm_i64gather_ps, __m128, float const *, __m128i, 1)\n-test_2 ( _mm256_i64gather_ps, __m128, float const *, __m256i, 1)\n-test_2 ( _mm_i32gather_epi64, __m128i, long long int const *, __m128i, 1)\n-test_2 ( _mm256_i32gather_epi64, __m256i, long long int const *, __m128i, 1)\n-test_2 ( _mm_i64gather_epi64, __m128i, long long int const *, __m128i, 1)\n-test_2 ( _mm256_i64gather_epi64,  __m256i, long long int const *, __m256i, 1)\n-test_2 ( _mm_i32gather_epi32, __m128i, int const *, __m128i, 1)\n-test_2 ( _mm256_i32gather_epi32, __m256i, int const *, __m256i, 1)\n-test_2 ( _mm_i64gather_epi32, __m128i, int const *, __m128i, 1)\n-test_2 ( _mm256_i64gather_epi32, __m128i, int const *, __m256i, 1)"}]}