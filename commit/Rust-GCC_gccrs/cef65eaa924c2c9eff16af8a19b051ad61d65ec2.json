{"sha": "cef65eaa924c2c9eff16af8a19b051ad61d65ec2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2VmNjVlYWE5MjRjMmM5ZWZmMTZhZjhhMTliMDUxYWQ2MWQ2NWVjMg==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2006-02-26T16:10:30Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2006-02-26T16:10:30Z"}, "message": "fold-const.c (fold_binary): Fold (X & 1) ^ 1 as (X & 1) == 0.\n\n\n\t* fold-const.c (fold_binary) <BIT_XOR_EXPR>: Fold (X & 1) ^ 1 as\n\t(X & 1) == 0.\n\t<BIT_AND_EXPR>: Fold (X ^ 1) & 1 and ~X & 1 as (X & 1) == 0.\n\n\t* gcc.dg/fold-even-1.c: New test case.\n\nFrom-SVN: r111454", "tree": {"sha": "023ddcdab0e55bd4a22ee47cd852342b1535a05e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/023ddcdab0e55bd4a22ee47cd852342b1535a05e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cef65eaa924c2c9eff16af8a19b051ad61d65ec2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cef65eaa924c2c9eff16af8a19b051ad61d65ec2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cef65eaa924c2c9eff16af8a19b051ad61d65ec2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cef65eaa924c2c9eff16af8a19b051ad61d65ec2/comments", "author": null, "committer": null, "parents": [{"sha": "a861485caf6698fe171b1d80a78f3f73091615eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a861485caf6698fe171b1d80a78f3f73091615eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a861485caf6698fe171b1d80a78f3f73091615eb"}], "stats": {"total": 72, "additions": 72, "deletions": 0}, "files": [{"sha": "90cff90c880b9de40e0c31f20d74b15d77f9ac7b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cef65eaa924c2c9eff16af8a19b051ad61d65ec2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cef65eaa924c2c9eff16af8a19b051ad61d65ec2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cef65eaa924c2c9eff16af8a19b051ad61d65ec2", "patch": "@@ -1,3 +1,9 @@\n+2006-02-26  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* fold-const.c (fold_binary) <BIT_XOR_EXPR>: Fold (X & 1) ^ 1 as\n+\t(X & 1) == 0.\n+\t<BIT_AND_EXPR>: Fold (X ^ 1) & 1 and ~X & 1 as (X & 1) == 0.\n+\n 2006-02-26  Roger Sayle  <roger@eyesopen.com>\n \t    James A. Morrison  <phython@gcc.gnu.org>\n "}, {"sha": "e85534ab2e1688bdfbc1891485c6d2a3a7ce1be8", "filename": "gcc/fold-const.c", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cef65eaa924c2c9eff16af8a19b051ad61d65ec2/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cef65eaa924c2c9eff16af8a19b051ad61d65ec2/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=cef65eaa924c2c9eff16af8a19b051ad61d65ec2", "patch": "@@ -8740,6 +8740,13 @@ fold_binary (enum tree_code code, tree type, tree op0, tree op1)\n \t\t\t    fold_convert (type, TREE_OPERAND (arg0, 0)),\n \t\t\t    fold_convert (type, TREE_OPERAND (arg1, 0)));\n \n+      /* Fold (X & 1) ^ 1 as (X & 1) == 0.  */\n+      if (TREE_CODE (arg0) == BIT_AND_EXPR\n+\t  && integer_onep (TREE_OPERAND (arg0, 1))\n+\t  && integer_onep (arg1))\n+\treturn fold_build2 (EQ_EXPR, type, arg0,\n+\t\t\t    build_int_cst (TREE_TYPE (arg0), 0));\n+\n       /* See if this can be simplified into a rotate first.  If that\n \t is unsuccessful continue in the association code.  */\n       goto bit_rotate;\n@@ -8792,6 +8799,28 @@ fold_binary (enum tree_code code, tree type, tree op0, tree op1)\n \t  && reorder_operands_p (arg0, TREE_OPERAND (arg1, 0)))\n \treturn omit_one_operand (type, arg0, TREE_OPERAND (arg1, 0));\n \n+      /* Fold (X ^ 1) & 1 as (X & 1) == 0.  */\n+      if (TREE_CODE (arg0) == BIT_XOR_EXPR\n+\t  && integer_onep (TREE_OPERAND (arg0, 1))\n+\t  && integer_onep (arg1))\n+\t{\n+\t  tem = TREE_OPERAND (arg0, 0);\n+\t  return fold_build2 (EQ_EXPR, type,\n+\t\t\t      fold_build2 (BIT_AND_EXPR, TREE_TYPE (tem), tem,\n+\t\t\t\t\t   build_int_cst (TREE_TYPE (tem), 1)),\n+\t\t\t      build_int_cst (TREE_TYPE (tem), 0));\n+\t}\n+      /* Fold ~X & 1 as (X & 1) == 0.  */\n+      if (TREE_CODE (arg0) == BIT_NOT_EXPR\n+\t  && integer_onep (arg1))\n+\t{\n+\t  tem = TREE_OPERAND (arg0, 0);\n+\t  return fold_build2 (EQ_EXPR, type,\n+\t\t\t      fold_build2 (BIT_AND_EXPR, TREE_TYPE (tem), tem,\n+\t\t\t\t\t   build_int_cst (TREE_TYPE (tem), 1)),\n+\t\t\t      build_int_cst (TREE_TYPE (tem), 0));\n+\t}\n+\n       t1 = distribute_bit_expr (code, type, arg0, arg1);\n       if (t1 != NULL_TREE)\n \treturn t1;"}, {"sha": "a93b73c66374498d484d97b59eaeaf79f2915325", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cef65eaa924c2c9eff16af8a19b051ad61d65ec2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cef65eaa924c2c9eff16af8a19b051ad61d65ec2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cef65eaa924c2c9eff16af8a19b051ad61d65ec2", "patch": "@@ -1,3 +1,7 @@\n+2006-02-26  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* gcc.dg/fold-even-1.c: New test case.\n+\n 2006-02-26  Roger Sayle  <roger@eyesopen.com>\n \n \tPR middle-end/21137"}, {"sha": "8e6539c924d2dfb6397e87bc73982caf4468444c", "filename": "gcc/testsuite/gcc.dg/fold-even-1.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cef65eaa924c2c9eff16af8a19b051ad61d65ec2/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-even-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cef65eaa924c2c9eff16af8a19b051ad61d65ec2/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-even-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-even-1.c?ref=cef65eaa924c2c9eff16af8a19b051ad61d65ec2", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-original\" } */\n+int test1(int a)\n+{\n+  return !(a & 1);\n+}\n+\n+int test2(int b)\n+{\n+  return (b & 1) == 0;\n+}\n+\n+int test3(int c)\n+{\n+  return (c & 1) ^ 1;\n+}\n+\n+int test4(int d)\n+{\n+  return (d ^ 1) & 1;\n+}\n+\n+int test5(int e)\n+{\n+  return ~e & 1;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"\\\\(a \\& 1\\\\) == 0\" 1 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"\\\\(b \\& 1\\\\) == 0\" 1 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"\\\\(c \\& 1\\\\) == 0\" 1 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"\\\\(d \\& 1\\\\) == 0\" 1 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"\\\\(e \\& 1\\\\) == 0\" 1 \"original\" } } */\n+/* { dg-final { cleanup-tree-dump \"original\" } } */"}]}