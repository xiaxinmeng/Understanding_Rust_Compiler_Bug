{"sha": "681056ae64c6f8bd4cc67e00cb87b4c7272eec5e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjgxMDU2YWU2NGM2ZjhiZDRjYzY3ZTAwY2I4N2I0YzcyNzJlZWM1ZQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2011-05-18T20:39:05Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2011-05-18T20:39:05Z"}, "message": "re PR c++/49039 (LLVM StringRef miscompilation with -O2)\n\n\tPR tree-optimization/49039\n\t* tree-vrp.c (extract_range_from_binary_expr): For\n\tMIN_EXPR <~[a, b], ~[c, d]> and MAX_EXPR <~[a, b], ~[c, d]>\n\treturn ~[MAX_EXPR <a, c>, MIN_EXPR <b, d>].\n\n\t* gcc.c-torture/execute/pr49039.c: New test.\n\t* gcc.dg/tree-ssa/pr49039.c: New test.\n\t* g++.dg/torture/pr49039.C: New test.\n\nFrom-SVN: r173876", "tree": {"sha": "affa7b875eb03cf2f2c87a940a527e1252d31696", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/affa7b875eb03cf2f2c87a940a527e1252d31696"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/681056ae64c6f8bd4cc67e00cb87b4c7272eec5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/681056ae64c6f8bd4cc67e00cb87b4c7272eec5e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/681056ae64c6f8bd4cc67e00cb87b4c7272eec5e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/681056ae64c6f8bd4cc67e00cb87b4c7272eec5e/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8199eea14f1ab32d805cc4be98ecfb5424a78671", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8199eea14f1ab32d805cc4be98ecfb5424a78671", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8199eea14f1ab32d805cc4be98ecfb5424a78671"}], "stats": {"total": 177, "additions": 167, "deletions": 10}, "files": [{"sha": "0850640b837f257a740c12ae86fc920ba7ec5f2e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/681056ae64c6f8bd4cc67e00cb87b4c7272eec5e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/681056ae64c6f8bd4cc67e00cb87b4c7272eec5e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=681056ae64c6f8bd4cc67e00cb87b4c7272eec5e", "patch": "@@ -1,3 +1,10 @@\n+2011-05-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/49039\n+\t* tree-vrp.c (extract_range_from_binary_expr): For\n+\tMIN_EXPR <~[a, b], ~[c, d]> and MAX_EXPR <~[a, b], ~[c, d]>\n+\treturn ~[MAX_EXPR <a, c>, MIN_EXPR <b, d>].\n+\n 2011-05-18  Tom de Vries  <tom@codesourcery.com>\n \n \tPR target/45098"}, {"sha": "bf4107cc42d38594b0df89b9e76a410aa15d425b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/681056ae64c6f8bd4cc67e00cb87b4c7272eec5e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/681056ae64c6f8bd4cc67e00cb87b4c7272eec5e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=681056ae64c6f8bd4cc67e00cb87b4c7272eec5e", "patch": "@@ -1,3 +1,10 @@\n+2011-05-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/49039\n+\t* gcc.c-torture/execute/pr49039.c: New test.\n+\t* gcc.dg/tree-ssa/pr49039.c: New test.\n+\t* g++.dg/torture/pr49039.C: New test.\n+\n 2011-05-18  Jason Merrill  <jason@redhat.com>\n \n \t* g++.dg/cpp0x/constexpr-incomplete3.C: New."}, {"sha": "f576cba42d64141e9b6c35531108ccd41438f267", "filename": "gcc/testsuite/g++.dg/torture/pr49039.C", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/681056ae64c6f8bd4cc67e00cb87b4c7272eec5e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr49039.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/681056ae64c6f8bd4cc67e00cb87b4c7272eec5e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr49039.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr49039.C?ref=681056ae64c6f8bd4cc67e00cb87b4c7272eec5e", "patch": "@@ -0,0 +1,76 @@\n+// PR tree-optimization/49039\n+// { dg-do run }\n+\n+template <class T1, class T2>\n+struct pair\n+{\n+  T1 first;\n+  T2 second;\n+  pair (const T1 & a, const T2 & b):first (a), second (b) {}\n+};\n+\n+template <class T1, class T2>\n+inline pair <T1, T2>\n+make_pair (T1 x, T2 y)\n+{\n+  return pair <T1, T2> (x, y);\n+}\n+\n+typedef __SIZE_TYPE__ size_t;\n+struct S\n+{\n+  const char *Data;\n+  size_t Length;\n+  static size_t min (size_t a, size_t b) { return a < b ? a : b; }\n+  static size_t max (size_t a, size_t b) { return a > b ? a : b; }\n+  S () :Data (0), Length (0) { }\n+  S (const char *Str) : Data (Str), Length (__builtin_strlen (Str)) {}\n+  S (const char *data, size_t length) : Data (data), Length (length) {}\n+  bool empty () const { return Length == 0; }\n+  size_t size () const { return Length; }\n+  S slice (size_t Start, size_t End) const\n+  {\n+    Start = min (Start, Length);\n+    End = min (max (Start, End), Length);\n+    return S (Data + Start, End - Start);\n+  }\n+  pair <S, S> split (char Separator) const\n+  {\n+    size_t Idx = find (Separator);\n+    if (Idx == ~size_t (0))\n+      return make_pair (*this, S ());\n+    return make_pair (slice (0, Idx), slice (Idx + 1, ~size_t (0)));\n+  }\n+  size_t find (char C, size_t From = 0) const\n+  {\n+    for (size_t i = min (From, Length), e = Length; i != e; ++i)\n+      if (Data[i] == C)\n+\treturn i;\n+    return ~size_t (0);\n+  }\n+};\n+\n+void\n+Test (const char *arg)\n+{\n+  S Desc (arg);\n+  while (!Desc.empty ())\n+    {\n+      pair <S, S> Split = Desc.split ('-');\n+      S Token = Split.first;\n+      Desc = Split.second;\n+      if (Token.empty ())\n+\tcontinue;\n+      Split = Token.split (':');\n+      S Specifier = Split.first;\n+      if (Specifier.empty ())\n+\t__builtin_abort ();\n+    }\n+}\n+\n+int\n+main ()\n+{\n+  Test (\"-\");\n+  return 0;\n+}"}, {"sha": "546d114fedcb2d54c3843745eb15496c8e70addc", "filename": "gcc/testsuite/gcc.c-torture/execute/pr49039.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/681056ae64c6f8bd4cc67e00cb87b4c7272eec5e/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr49039.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/681056ae64c6f8bd4cc67e00cb87b4c7272eec5e/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr49039.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr49039.c?ref=681056ae64c6f8bd4cc67e00cb87b4c7272eec5e", "patch": "@@ -0,0 +1,26 @@\n+/* PR tree-optimization/49039 */\n+extern void abort (void);\n+int cnt;\n+\n+__attribute__((noinline, noclone)) void\n+foo (unsigned int x, unsigned int y)\n+{\n+  unsigned int minv, maxv;\n+  if (x == 1 || y == -2U)\n+    return;\n+  minv = x < y ? x : y;\n+  maxv = x > y ? x : y;\n+  if (minv == 1)\n+    ++cnt;\n+  if (maxv == -2U)\n+    ++cnt;\n+}\n+\n+int\n+main ()\n+{\n+  foo (-2U, 1);\n+  if (cnt != 2)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "3500dbf2ac915264f98d61e222c8e99a4c0a2b28", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr49039.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/681056ae64c6f8bd4cc67e00cb87b4c7272eec5e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr49039.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/681056ae64c6f8bd4cc67e00cb87b4c7272eec5e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr49039.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr49039.c?ref=681056ae64c6f8bd4cc67e00cb87b4c7272eec5e", "patch": "@@ -0,0 +1,31 @@\n+/* PR tree-optimization/49039 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-vrp1\" } */\n+\n+extern void bar (void);\n+\n+void\n+foo (unsigned int x, unsigned int y)\n+{\n+  unsigned int minv, maxv;\n+  if (x >= 3 && x <= 6)\n+    return;\n+  if (y >= 5 && y <= 8)\n+    return;\n+  minv = x < y ? x : y;\n+  maxv = x > y ? x : y;\n+  if (minv == 5)\n+    bar ();\n+  if (minv == 6)\n+    bar ();\n+  if (maxv == 5)\n+    bar ();\n+  if (maxv == 6)\n+    bar ();\n+}\n+\n+/* { dg-final { scan-tree-dump \"Folding predicate minv_\\[0-9\\]* == 5 to 0\" \"vrp1\" } } */\n+/* { dg-final { scan-tree-dump \"Folding predicate minv_\\[0-9\\]* == 6 to 0\" \"vrp1\" } } */\n+/* { dg-final { scan-tree-dump \"Folding predicate maxv_\\[0-9\\]* == 5 to 0\" \"vrp1\" } } */\n+/* { dg-final { scan-tree-dump \"Folding predicate maxv_\\[0-9\\]* == 6 to 0\" \"vrp1\" } } */\n+/* { dg-final { cleanup-tree-dump \"vrp1\" } } */"}, {"sha": "2d3a6fcad703f2a22039d63145c9d32a690fe5fb", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/681056ae64c6f8bd4cc67e00cb87b4c7272eec5e/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/681056ae64c6f8bd4cc67e00cb87b4c7272eec5e/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=681056ae64c6f8bd4cc67e00cb87b4c7272eec5e", "patch": "@@ -1,5 +1,5 @@\n /* Support routines for Value Range Propagation (VRP).\n-   Copyright (C) 2005, 2006, 2007, 2008, 2009, 2010\n+   Copyright (C) 2005, 2006, 2007, 2008, 2009, 2010, 2011\n    Free Software Foundation, Inc.\n    Contributed by Diego Novillo <dnovillo@redhat.com>.\n \n@@ -2358,17 +2358,27 @@ extract_range_from_binary_expr (value_range_t *vr,\n \t op0 + op1 == 0, so we cannot claim that the sum is in ~[0,0].\n \t Note that we are guaranteed to have vr0.type == vr1.type at\n \t this point.  */\n-      if (code == PLUS_EXPR && vr0.type == VR_ANTI_RANGE)\n+      if (vr0.type == VR_ANTI_RANGE)\n \t{\n-\t  set_value_range_to_varying (vr);\n-\t  return;\n+\t  if (code == PLUS_EXPR)\n+\t    {\n+\t      set_value_range_to_varying (vr);\n+\t      return;\n+\t    }\n+\t  /* For MIN_EXPR and MAX_EXPR with two VR_ANTI_RANGEs,\n+\t     the resulting VR_ANTI_RANGE is the same - intersection\n+\t     of the two ranges.  */\n+\t  min = vrp_int_const_binop (MAX_EXPR, vr0.min, vr1.min);\n+\t  max = vrp_int_const_binop (MIN_EXPR, vr0.max, vr1.max);\n+\t}\n+      else\n+\t{\n+\t  /* For operations that make the resulting range directly\n+\t     proportional to the original ranges, apply the operation to\n+\t     the same end of each range.  */\n+\t  min = vrp_int_const_binop (code, vr0.min, vr1.min);\n+\t  max = vrp_int_const_binop (code, vr0.max, vr1.max);\n \t}\n-\n-      /* For operations that make the resulting range directly\n-\t proportional to the original ranges, apply the operation to\n-\t the same end of each range.  */\n-      min = vrp_int_const_binop (code, vr0.min, vr1.min);\n-      max = vrp_int_const_binop (code, vr0.max, vr1.max);\n \n       /* If both additions overflowed the range kind is still correct.\n \t This happens regularly with subtracting something in unsigned"}]}