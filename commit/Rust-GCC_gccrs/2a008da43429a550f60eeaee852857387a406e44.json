{"sha": "2a008da43429a550f60eeaee852857387a406e44", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmEwMDhkYTQzNDI5YTU1MGY2MGVlYWVlODUyODU3Mzg3YTQwNmU0NA==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2001-06-09T18:03:11Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2001-06-09T18:03:11Z"}, "message": "gcc.texi: Use @defcodeindex for the index of options.\n\n\t* doc/gcc.texi: Use @defcodeindex for the index of options.  Add\n\tmore index entries.  Use more logical markup where appropriate.\n\tUse TeX quotes and dashes.\n\nFrom-SVN: r43089", "tree": {"sha": "868205aa8394b4ca061093458ef89b7495a9e647", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/868205aa8394b4ca061093458ef89b7495a9e647"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a008da43429a550f60eeaee852857387a406e44", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a008da43429a550f60eeaee852857387a406e44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a008da43429a550f60eeaee852857387a406e44", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a008da43429a550f60eeaee852857387a406e44/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3478885a5e88aa02aaec632f49fdd7d0fae3e27c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3478885a5e88aa02aaec632f49fdd7d0fae3e27c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3478885a5e88aa02aaec632f49fdd7d0fae3e27c"}], "stats": {"total": 260, "additions": 135, "deletions": 125}, "files": [{"sha": "12f8649657ba5d4f856354b9fe440408be0d624b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a008da43429a550f60eeaee852857387a406e44/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a008da43429a550f60eeaee852857387a406e44/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2a008da43429a550f60eeaee852857387a406e44", "patch": "@@ -1,3 +1,9 @@\n+2001-06-09  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* doc/gcc.texi: Use @defcodeindex for the index of options.  Add\n+\tmore index entries.  Use more logical markup where appropriate.\n+\tUse TeX quotes and dashes.\n+\n 2001-06-09  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* unwind-pe.h: Conditionally qualify references to abort with"}, {"sha": "2ffd5532ac138640c83e679dca724fb50ce20eb9", "filename": "gcc/doc/gcc.texi", "status": "modified", "additions": 129, "deletions": 125, "changes": 254, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a008da43429a550f60eeaee852857387a406e44/gcc%2Fdoc%2Fgcc.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a008da43429a550f60eeaee852857387a406e44/gcc%2Fdoc%2Fgcc.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc.texi?ref=2a008da43429a550f60eeaee852857387a406e44", "patch": "@@ -76,7 +76,7 @@\n @end ifclear\n \n @c Create a separate index for command line options.\n-@defindex op\n+@defcodeindex op\n @c Merge the standard indexes into a single one.\n @syncodeindex fn cp\n @syncodeindex vr cp\n@@ -276,6 +276,9 @@ bugs.  It corresponds to GCC version 3.1.\n @chapter Compile C, C++, Objective C, Fortran, Java or CHILL\n \n @cindex Objective C\n+@cindex Fortran\n+@cindex Java\n+@cindex CHILL\n Several versions of the compiler (C, C++, Objective C, Fortran, Java\n and CHILL) are integrated; this is why we use the name\n ``GNU Compiler Collection''. GCC can compile programs written in any of these\n@@ -386,9 +389,9 @@ This standard, in both its forms, is commonly known as @dfn{C89}, or\n occasionally as @dfn{C90}, from the dates of ratification.  The ANSI\n standard, but not the ISO standard, also came with a Rationale\n document.  To select this standard in GCC, use one of the options\n-@samp{-ansi}, @samp{-std=c89} or @samp{-std=iso9899:1990}; to obtain\n+@option{-ansi}, @option{-std=c89} or @option{-std=iso9899:1990}; to obtain\n all the diagnostics required by the standard, you should also specify\n-@samp{-pedantic} (or @samp{-pedantic-errors} if you want them to be\n+@option{-pedantic} (or @option{-pedantic-errors} if you want them to be\n errors rather than warnings).  @xref{C Dialect Options,,Options\n Controlling C Dialect}.\n \n@@ -401,34 +404,34 @@ amendment added digraphs and @code{__STDC_VERSION__} to the language,\n but otherwise concerned the library.  This amendment is commonly known\n as @dfn{AMD1}; the amended standard is sometimes known as @dfn{C94} or\n @dfn{C95}.  To select this standard in GCC, use the option\n-@samp{-std=iso9899:199409} (with, as for other standard versions,\n-@samp{-pedantic} to receive all required diagnostics).\n+@option{-std=iso9899:199409} (with, as for other standard versions,\n+@option{-pedantic} to receive all required diagnostics).\n \n A new edition of the ISO C standard was published in 1999 as ISO/IEC\n 9899:1999, and is commonly known as @dfn{C99}.  GCC has incomplete\n support for this standard version; see\n @uref{http://gcc.gnu.org/c99status.html} for details.  To select this\n-standard, use @samp{-std=c99} or @samp{-std=iso9899:1999}.  (While in\n+standard, use @option{-std=c99} or @option{-std=iso9899:1999}.  (While in\n development, drafts of this standard version were referred to as\n @dfn{C9X}.)\n \n @opindex traditional\n GCC also has some limited support for traditional (pre-ISO) C with the\n-@samp{-traditional} option.  This support may be of use for compiling\n+@option{-traditional} option.  This support may be of use for compiling\n some very old programs that have not been updated to ISO C, but should\n not be used for new programs.  It will not work with some modern C\n libraries such as the GNU C library.\n \n By default, GCC provides some extensions to the C language that on\n rare occasions conflict with the C standard.  @xref{C\n Extensions,,Extensions to the C Language Family}.  Use of the\n-@samp{-std} options listed above will disable these extensions where\n+@option{-std} options listed above will disable these extensions where\n they conflict with the C standard version selected.  You may also\n select an extended version of the C language explicitly with\n-@samp{-std=gnu89} (for C89 with GNU extensions) or @samp{-std=gnu99}\n+@option{-std=gnu89} (for C89 with GNU extensions) or @option{-std=gnu99}\n (for C99 with GNU extensions).  The default, if no C language dialect\n-options are given, is @samp{-std=gnu89}; this will change to\n-@samp{-std=gnu99} in some future release when the C99 support is\n+options are given, is @option{-std=gnu89}; this will change to\n+@option{-std=gnu99} in some future release when the C99 support is\n complete.  Some features that are part of the C99 standard are\n accepted as extensions in C89 mode.\n \n@@ -460,7 +463,7 @@ implementation, defining @code{__STDC_HOSTED__} as @code{1} and\n presuming that when the names of ISO C functions are used, they have\n the semantics defined in the standard.  To make it act as a conforming\n freestanding implementation for a freestanding environment, use the\n-option @samp{-ffreestanding}; it will then define\n+option @option{-ffreestanding}; it will then define\n @code{__STDC_HOSTED__} to @code{0} and not make assumptions about the\n meanings of function names from the standard library.  To build an OS\n kernel, you may well still need to make your own arrangements for\n@@ -558,7 +561,7 @@ prototypes.\n \n @item\n @opindex pedantic-errors\n-When @samp{-pedantic-errors} is specified, GCC will incorrectly give\n+When @option{-pedantic-errors} is specified, GCC will incorrectly give\n an error message when a function name is specified in an expression\n involving the comma operator.\n @end itemize\n@@ -650,12 +653,12 @@ causes static variable destructors (currently used only in C++) not to\n be run.\n \n @item\n-Use of @samp{-I/usr/include} may cause trouble.\n+Use of @option{-I/usr/include} may cause trouble.\n \n Many systems come with header files that won't work with GCC unless\n corrected by @code{fixincludes}.  The corrected header files go in a new\n directory; GCC searches this directory before @file{/usr/include}.\n-If you use @samp{-I/usr/include}, this tells GCC to search\n+If you use @option{-I/usr/include}, this tells GCC to search\n @file{/usr/include} earlier on, before the corrected headers.  The\n result is that you get the uncorrected header files.\n \n@@ -689,11 +692,11 @@ parent across the call to @code{vfork}.\n If you encounter this, you can work around the problem by declaring\n variables @code{volatile} in the function that calls @code{vfork}, until\n the problem goes away, or by not declaring them @code{register} and not\n-using @samp{-O} for those source files.\n+using @option{-O} for those source files.\n @end ignore\n \n @item\n-On some SGI systems, when you use @samp{-lgl_s} as an option,\n+On some SGI systems, when you use @option{-lgl_s} as an option,\n it gets translated magically to @samp{-lgl_s -lX11_s -lc_s}.\n Naturally, this does not happen when you use GCC.\n You must specify all three options explicitly.\n@@ -749,7 +752,7 @@ this problem.\n @item\n Sun forgot to include a static version of @file{libdl.a} with some\n versions of SunOS (mainly 4.1).  This results in undefined symbols when\n-linking static binaries (that is, if you use @samp{-static}).  If you\n+linking static binaries (that is, if you use @option{-static}).  If you\n see undefined symbols @code{_dlclose}, @code{_dlsym} or @code{_dlopen}\n when linking, compile and link against the file\n @file{mit/util/misc/dlsym.c} from the MIT version of X windows.\n@@ -780,7 +783,7 @@ generate HP-UX unwind descriptors for such functions.  It may even be\n impossible to generate them.\n \n @item\n-Debugging (@samp{-g}) is not supported on the HP PA machine, unless you use\n+Debugging (@option{-g}) is not supported on the HP PA machine, unless you use\n the preliminary GNU tools (@pxref{Installation}).\n \n @item\n@@ -813,8 +816,8 @@ These warnings are harmless and can be safely ignored.\n \n @item\n The current version of the assembler (@file{/bin/as}) for the RS/6000\n-has certain problems that prevent the @samp{-g} option in GCC from\n-working.  Note that @file{Makefile.in} uses @samp{-g} by default when\n+has certain problems that prevent the @option{-g} option in GCC from\n+working.  Note that @file{Makefile.in} uses @option{-g} by default when\n compiling @file{libgcc2.c}.\n \n IBM has produced a fixed version of the assembler.  The upgraded\n@@ -832,7 +835,7 @@ as -u < /dev/null\n \n @noindent\n If the command exits normally, the assembler fix already is installed.\n-If the assembler complains that \"-u\" is an unknown flag, you need to\n+If the assembler complains that @option{-u} is an unknown flag, you need to\n order the fix.\n \n @item\n@@ -856,15 +859,15 @@ is undefined in ISO C.\n AIX on the RS/6000 provides support (NLS) for environments outside of\n the United States.  Compilers and assemblers use NLS to support\n locale-specific representations of various objects including\n-floating-point numbers (\".\" vs \",\" for separating decimal fractions).\n+floating-point numbers (@samp{.} vs @samp{,} for separating decimal fractions).\n There have been problems reported where the library linked with GCC does\n not produce the same floating-point formats that the assembler accepts.\n-If you have this problem, set the LANG environment variable to \"C\" or\n-\"En_US\".\n+If you have this problem, set the @env{LANG} environment variable to\n+@samp{C} or @samp{En_US}.\n \n @item\n @opindex fdollars-in-identifiers\n-Even if you specify @samp{-fdollars-in-identifiers},\n+Even if you specify @option{-fdollars-in-identifiers},\n you cannot successfully use @samp{$} in identifiers on the RS/6000 due\n to a restriction in the IBM assembler.  GAS supports these\n identifiers.\n@@ -879,7 +882,7 @@ by requesting PTF 421749 from IBM.\n There is an assembler bug in versions of DG/UX prior to 5.4.2.01 that\n occurs when the @samp{fldcr} instruction is used.  GCC uses\n @samp{fldcr} on the 88100 to serialize volatile memory references.  Use\n-the option @samp{-mno-serialize-volatile} if your version of the\n+the option @option{-mno-serialize-volatile} if your version of the\n assembler has this bug.\n \n @item\n@@ -912,7 +915,7 @@ what options are used.\n @opindex mhc-struct-return\n On the IBM RT PC, the MetaWare HighC compiler (hc) uses a different\n convention for structure and union returning.  Use the option\n-@samp{-mhc-struct-return} to tell GCC to use a convention compatible\n+@option{-mhc-struct-return} to tell GCC to use a convention compatible\n with it.\n \n @cindex Vax calling convention\n@@ -941,11 +944,11 @@ options:\n @end smallexample\n \n The first specifies where to find the library @file{libgcc.a}\n-specified with the @samp{-lgcc} option.\n+specified with the @option{-lgcc} option.\n \n-GCC does linking by invoking @code{ld}, just as @code{cc} does, and\n+GCC does linking by invoking @command{ld}, just as @command{cc} does, and\n there is no reason why it @emph{should} matter which compilation program\n-you use to invoke @code{ld}.  If someone tracks this problem down,\n+you use to invoke @command{ld}.  If someone tracks this problem down,\n it can probably be fixed easily.\n \n @item\n@@ -961,12 +964,12 @@ on.  If you think this may be happening to you, try using the GNU\n assembler; GAS version 2.1 supports ECOFF on Irix.\n \n @opindex noasmopt\n-Or use the @samp{-noasmopt} option when you compile GCC with itself,\n+Or use the @option{-noasmopt} option when you compile GCC with itself,\n and then again when you compile your program.  (This is a temporary\n kludge to turn off assembler optimization on Irix.)  If this proves to\n be what you need, edit the assembler spec in the file @file{specs} so\n-that it unconditionally passes @samp{-O0} to the assembler, and never\n-passes @samp{-O2} or @samp{-O3}.\n+that it unconditionally passes @option{-O0} to the assembler, and never\n+passes @option{-O2} or @option{-O3}.\n @end itemize\n \n @node External Bugs\n@@ -980,8 +983,8 @@ Certain programs have problems compiling.\n Parse errors may occur compiling X11 on a Decstation running Ultrix 4.2\n because of problems in DEC's versions of the X11 header files\n @file{X11/Xlib.h} and @file{X11/Xutil.h}.  People recommend adding\n-@samp{-I/usr/include/mit} to use the MIT versions of the header files,\n-using the @samp{-traditional} switch to turn off ISO C, or fixing the\n+@option{-I/usr/include/mit} to use the MIT versions of the header files,\n+using the @option{-traditional} switch to turn off ISO C, or fixing the\n header files by adding this:\n \n @example\n@@ -1022,7 +1025,7 @@ MALLOC=gmalloc.o\n @opindex traditional\n \n There are several noteworthy incompatibilities between GNU C and K&R\n-(non-ISO) versions of C.  The @samp{-traditional} option\n+(non-ISO) versions of C.  The @option{-traditional} option\n eliminates many of these incompatibilities, @emph{but not all}, by\n telling GNU C to behave like a K&R C compiler.\n \n@@ -1052,9 +1055,9 @@ constant.  Likewise @code{fscanf} and @code{scanf}.\n The best solution to these problems is to change the program to use\n @code{char}-array variables with initialization strings for these\n purposes instead of string constants.  But if this is not possible,\n-you can use the @samp{-fwritable-strings} flag, which directs GCC\n+you can use the @option{-fwritable-strings} flag, which directs GCC\n to handle string constants the same way most C compilers do.\n-@samp{-traditional} also has this effect, among others.\n+@option{-traditional} also has this effect, among others.\n \n @item\n @code{-2147483648} is positive.\n@@ -1074,7 +1077,7 @@ string constants.  For example, the following macro in GCC\n @noindent\n will produce output @code{\"a\"} regardless of what the argument @var{a} is.\n \n-The @samp{-traditional} option directs GCC to handle such cases\n+The @option{-traditional} option directs GCC to handle such cases\n (among others) in the old-fashioned (non-ISO) fashion.\n \n @cindex @code{setjmp} incompatibilities\n@@ -1108,10 +1111,10 @@ its first value is restored; otherwise, it keeps the last value stored\n in it.\n \n @opindex W\n-If you use the @samp{-W} option with the @samp{-O} option, you will\n+If you use the @option{-W} option with the @option{-O} option, you will\n get a warning when GCC thinks such a problem might be possible.\n \n-The @samp{-traditional} option directs GNU C to put variables in\n+The @option{-traditional} option directs GNU C to put variables in\n the stack by default, rather than in registers, in functions that\n call @code{setjmp}.  This results in the behavior found in\n traditional C compilers.\n@@ -1128,7 +1131,7 @@ foobar (\n @end example\n \n ISO C does not permit such a construct.  It would make sense to support\n-it when @samp{-traditional} is used, but it is too much work to\n+it when @option{-traditional} is used, but it is too much work to\n implement.\n \n @item\n@@ -1147,7 +1150,7 @@ have the same scope as any other declaration in the same place.\n In some other C compilers, a @code{extern} declaration affects all the\n rest of the file even if it happens within a block.\n \n-The @samp{-traditional} option directs GNU C to treat all @code{extern}\n+The @option{-traditional} option directs GNU C to treat all @code{extern}\n declarations as global, like traditional compilers.\n \n @item\n@@ -1161,7 +1164,7 @@ typedef long foo bar;\n \n In ISO C, this is not allowed: @code{long} and other type modifiers\n require an explicit @code{int}.  Because this criterion is expressed\n-by Bison grammar rules rather than C code, the @samp{-traditional}\n+by Bison grammar rules rather than C code, the @option{-traditional}\n flag cannot alter it.\n \n @cindex typedef names as function parameters\n@@ -1170,7 +1173,7 @@ PCC allows typedef names to be used as function parameters.  The\n difficulty described immediately above applies here too.\n \n @item\n-When in @samp{-traditional} mode, GCC allows the following erroneous\n+When in @option{-traditional} mode, GCC allows the following erroneous\n pair of declarations to appear together in a given scope:\n \n @example\n@@ -1180,7 +1183,7 @@ typedef foo foo;\n \n @item\n GCC treats all characters of identifiers as significant, even when in\n-@samp{-traditional} mode.  According to K&R-1 (2.2), ``No more than the\n+@option{-traditional} mode.  According to K&R-1 (2.2), ``No more than the\n first eight characters are significant, although more may be used.''.\n Also according to K&R-1 (2.2), ``An identifier is a sequence of letters\n and digits; the first character must be a letter.  The underscore _\n@@ -1210,7 +1213,7 @@ You can't expect this to work.\n \n The best solution to such a problem is to put the text into an actual\n C comment delimited by @samp{/*@dots{}*/}.  However,\n-@samp{-traditional} suppresses these error messages.\n+@option{-traditional} suppresses these error messages.\n \n @item\n Many user programs contain the declaration @samp{long time ();}.  In the\n@@ -1261,7 +1264,7 @@ but still returns small structures and unions in registers.\n \n @opindex fpcc-struct-return\n You can tell GCC to use a compatible convention for all structure and\n-union returning with the option @samp{-fpcc-struct-return}.\n+union returning with the option @option{-fpcc-struct-return}.\n \n @cindex preprocessing tokens\n @cindex preprocessing numbers\n@@ -1345,7 +1348,7 @@ what this means.  Beyond the library facilities required of such an\n implementation, the rest of the C library is supplied by the vendor of\n the operating system.  If that C library doesn't conform to the C\n standards, then your programs might get warnings (especially when using\n-@samp{-Wall}) that you don't expect.\n+@option{-Wall}) that you don't expect.\n \n For example, the @code{sprintf} function on SunOS 4.1.3 returns\n @code{char *} while the C standard says that @code{sprintf} returns an\n@@ -1446,7 +1449,7 @@ Compiled code moves values between memory and floating point registers\n at its convenience, and moving them into memory truncates them.\n \n @opindex ffloat-store\n-You can partially avoid this problem by using the @samp{-ffloat-store}\n+You can partially avoid this problem by using the @option{-ffloat-store}\n option (@pxref{Optimize Options}).\n \n @item\n@@ -1532,7 +1535,7 @@ temporary object.  The compiler may very well delete the object before\n you expect it to, leaving a pointer to garbage.  The most common place\n where this problem crops up is in classes like string classes,\n especially ones that define a conversion function to type @code{char *}\n-or @code{const char *} -- which is one reason why the standard\n+or @code{const char *}---which is one reason why the standard\n @code{string} class requires you to call the @code{c_str} member\n function.  However, any class that returns a pointer to some internal\n structure is potentially subject to this problem.\n@@ -1622,7 +1625,7 @@ unspecified whether @samp{Base::operator=} is called more than once when\n the implicit copy-assignment for Derived objects is invoked (as it is\n inside @samp{func} in the example).\n \n-g++ implements the \"intuitive\" algorithm for copy-assignment: assign all\n+g++ implements the ``intuitive'' algorithm for copy-assignment: assign all\n direct bases, then assign all members. In that algorithm, the virtual\n base subobject can be encountered many times. In the example, copying\n proceeds in the following order: @samp{val}, @samp{name} (via\n@@ -1634,41 +1637,41 @@ operator, the application can define whether and how the virtual base\n subobject is assigned.\n \n @node Protoize Caveats\n-@section Caveats of using @code{protoize}\n+@section Caveats of using @command{protoize}\n \n-The conversion programs @code{protoize} and @code{unprotoize} can\n+The conversion programs @command{protoize} and @command{unprotoize} can\n sometimes change a source file in a way that won't work unless you\n rearrange it.\n \n @itemize @bullet\n @item\n-@code{protoize} can insert references to a type name or type tag before\n+@command{protoize} can insert references to a type name or type tag before\n the definition, or in a file where they are not defined.\n \n If this happens, compiler error messages should show you where the new\n references are, so fixing the file by hand is straightforward.\n \n @item\n-There are some C constructs which @code{protoize} cannot figure out.\n+There are some C constructs which @command{protoize} cannot figure out.\n For example, it can't determine argument types for declaring a\n-pointer-to-function variable; this you must do by hand.  @code{protoize}\n+pointer-to-function variable; this you must do by hand.  @command{protoize}\n inserts a comment containing @samp{???} each time it finds such a\n variable; so you can find all such variables by searching for this\n string.  ISO C does not require declaring the argument types of\n pointer-to-function types.\n \n @item\n-Using @code{unprotoize} can easily introduce bugs.  If the program\n+Using @command{unprotoize} can easily introduce bugs.  If the program\n relied on prototypes to bring about conversion of arguments, these\n conversions will not take place in the program without prototypes.\n-One case in which you can be sure @code{unprotoize} is safe is when\n-you are removing prototypes that were made with @code{protoize}; if\n+One case in which you can be sure @command{unprotoize} is safe is when\n+you are removing prototypes that were made with @command{protoize}; if\n the program worked before without any prototypes, it will work again\n without them.\n \n @opindex Wconversion\n You can find all the places where this problem might occur by compiling\n-the program with the @samp{-Wconversion} option.  It prints a warning\n+the program with the @option{-Wconversion} option.  It prints a warning\n whenever an argument is converted.\n \n @item\n@@ -1680,14 +1683,14 @@ only a few functions have confusing macro calls, you can easily convert\n them manually.\n \n @item\n-@code{protoize} cannot get the argument types for a function whose\n+@command{protoize} cannot get the argument types for a function whose\n definition was not actually compiled due to preprocessing conditionals.\n-When this happens, @code{protoize} changes nothing in regard to such\n-a function.  @code{protoize} tries to detect such instances and warn\n+When this happens, @command{protoize} changes nothing in regard to such\n+a function.  @command{protoize} tries to detect such instances and warn\n about them.\n \n-You can generally work around this problem by using @code{protoize} step\n-by step, each time specifying a different set of @samp{-D} options for\n+You can generally work around this problem by using @command{protoize} step\n+by step, each time specifying a different set of @option{-D} options for\n compilation, until all of the functions have been converted.  There is\n no automatic way to verify that you have got them all, however.\n \n@@ -1707,7 +1710,7 @@ parenthesis of the function header).  This should circumvent the\n problem.\n \n @item\n-@code{unprotoize} can become confused when trying to convert a function\n+@command{unprotoize} can become confused when trying to convert a function\n definition or declaration which contains a declaration for a\n pointer-to-function formal argument which has the same name as the\n function being defined or declared.  We recommend you avoid such choices\n@@ -1759,7 +1762,7 @@ useful.\n \n @item\n @opindex fshort-enums\n-Making @samp{-fshort-enums} the default.\n+Making @option{-fshort-enums} the default.\n \n This would cause storage layout to be incompatible with most other C\n compilers.  And it doesn't seem very important, given that you can get\n@@ -1778,8 +1781,8 @@ alternative dialects of C.\n @opindex fsigned-bitfields\n @opindex funsigned-bitfields\n The GNU C compiler supports both dialects; you can specify the signed\n-dialect with @samp{-fsigned-bitfields} and the unsigned dialect with\n-@samp{-funsigned-bitfields}.  However, this leaves open the question of\n+dialect with @option{-fsigned-bitfields} and the unsigned dialect with\n+@option{-funsigned-bitfields}.  However, this leaves open the question of\n which dialect to use by default.\n \n Currently, the preferred dialect makes plain bitfields signed, because\n@@ -1829,14 +1832,14 @@ they write programs which have the same meaning in both C dialects.)\n @opindex ansi\n @opindex traditional\n @opindex std\n-Undefining @code{__STDC__} when @samp{-ansi} is not used.\n+Undefining @code{__STDC__} when @option{-ansi} is not used.\n \n Currently, GCC defines @code{__STDC__} as long as you don't use\n-@samp{-traditional}.  This provides good results in practice.\n+@option{-traditional}.  This provides good results in practice.\n \n Programmers normally use conditionals on @code{__STDC__} to ask whether\n it is safe to use certain features of ISO C, such as function\n-prototypes or ISO token concatenation.  Since plain @samp{gcc} supports\n+prototypes or ISO token concatenation.  Since plain @command{gcc} supports\n all the features of ISO C, the correct answer to these questions is\n ``yes''.\n \n@@ -1853,8 +1856,8 @@ Sometimes people say that defining @code{__STDC__} in a compiler that\n does not completely conform to the ISO C standard somehow violates the\n standard.  This is illogical.  The standard is a standard for compilers\n that claim to support ISO C, such as @samp{gcc -ansi}---not for other\n-compilers such as plain @samp{gcc}.  Whatever the ISO C standard says\n-is relevant to the design of plain @samp{gcc} without @samp{-ansi} only\n+compilers such as plain @command{gcc}.  Whatever the ISO C standard says\n+is relevant to the design of plain @command{gcc} without @option{-ansi} only\n for pragmatic reasons, not as a requirement.\n \n GCC normally defines @code{__STDC__} to be 1, and in addition\n@@ -1898,7 +1901,7 @@ cannot produce an empty one, which holds for C but is not always the\n case for C++.\n \n @opindex funroll-loops\n-Moreover, with @samp{-funroll-loops} small ``empty'' loops are already\n+Moreover, with @option{-funroll-loops} small ``empty'' loops are already\n removed, so the current behavior is both sub-optimal and inconsistent\n and will change in the future.\n \n@@ -1942,7 +1945,7 @@ ISO C requires a ``diagnostic'' message for certain kinds of invalid\n programs, but a warning is defined by GCC to count as a diagnostic.  If\n GCC produces a warning but not an error, that is correct ISO C support.\n If test suites call this ``failure'', they should be run with the GCC\n-option @samp{-pedantic-errors}, which will turn these warnings into\n+option @option{-pedantic-errors}, which will turn these warnings into\n errors.\n \n @end itemize\n@@ -1958,12 +1961,12 @@ warnings.  Each kind has a different purpose:\n \n @itemize @w{}\n @item\n-@emph{Errors} report problems that make it impossible to compile your\n+@dfn{Errors} report problems that make it impossible to compile your\n program.  GCC reports errors with the source file name and line\n number where the problem is apparent.\n \n @item\n-@emph{Warnings} report other unusual conditions in your code that\n+@dfn{Warnings} report other unusual conditions in your code that\n @emph{may} indicate a problem, although compilation can (and does)\n proceed.  Warning messages also report the source file name and line\n number, but include the text @samp{warning:} to distinguish them\n@@ -1973,8 +1976,8 @@ from error messages.\n Warnings may indicate danger points where you should check to make sure\n that your program really does what you intend; or the use of obsolete\n features; or the use of nonstandard features of GNU C or C++.  Many\n-warnings are issued only if you ask for them, with one of the @samp{-W}\n-options (for instance, @samp{-Wall} requests a variety of useful\n+warnings are issued only if you ask for them, with one of the @option{-W}\n+options (for instance, @option{-Wall} requests a variety of useful\n warnings).\n \n @opindex pedantic\n@@ -1984,8 +1987,8 @@ gratuitously rejects a program whose meaning is clear merely because\n (for instance) it fails to conform to a standard.  In some cases,\n however, the C and C++ standards specify that certain extensions are\n forbidden, and a diagnostic @emph{must} be issued by a conforming\n-compiler.  The @samp{-pedantic} option tells GCC to issue warnings in\n-such cases; @samp{-pedantic-errors} says to make them errors instead.\n+compiler.  The @option{-pedantic} option tells GCC to issue warnings in\n+such cases; @option{-pedantic-errors} says to make them errors instead.\n This does not mean that @emph{all} non-ISO constructs get warnings\n or errors.\n \n@@ -2148,7 +2151,7 @@ things:\n @itemize @bullet\n @item\n The version of GCC.  You can get this by running it with the\n-@samp{-v} option.\n+@option{-v} option.\n \n Without this, we won't know whether there is any point in looking for\n the bug in the current version of GCC.\n@@ -2157,9 +2160,9 @@ the bug in the current version of GCC.\n A complete input file that will reproduce the bug.  If the bug is in the\n C preprocessor, send a source file and any header files that it\n requires.  If the bug is in the compiler proper (@file{cc1}), send the\n-preprocessor output generated by adding @samp{-save-temps} to the\n+preprocessor output generated by adding @option{-save-temps} to the\n compilation command (@pxref{Debugging Options}).  When you do this, use\n-the same @samp{-I}, @samp{-D} or @samp{-U} options that you used in\n+the same @option{-I}, @option{-D} or @option{-U} options that you used in\n actual compilation. Then send the @var{input}.i or @var{input}.ii files\n generated.\n \n@@ -2183,7 +2186,7 @@ a certain percentage of wild goose chases.\n \n @item\n The command arguments you gave GCC to compile that example\n-and observe the bug.  For example, did you use @samp{-O}?  To guarantee\n+and observe the bug.  For example, did you use @option{-O}?  To guarantee\n you won't omit something important, list all the options.\n \n If we were to try to guess the arguments, we would probably guess wrong\n@@ -2248,7 +2251,7 @@ bug in the program itself.\n \n @item\n If you send examples of assembler code output from GCC,\n-please use @samp{-g} when you make them.  The debugging information\n+please use @option{-g} when you make them.  The debugging information\n includes source line numbers which are essential for correlating the\n output with the input.\n \n@@ -2449,7 +2452,7 @@ Use @samp{diff -c} to make your diffs.  Diffs without context are hard\n for us to install reliably.  More than that, they make it hard for us to\n study the diffs to decide whether we want to install them.  Unidiff\n format is better than contextless diffs, but not as easy to read as\n-@samp{-c} format.\n+@option{-c} format.\n \n If you have GNU diff, use @samp{diff -cp}, which shows the name of the\n function that each change occurs in.\n@@ -2919,20 +2922,20 @@ Note that running the testsuite may require additional tools be\n installed, such as TCL or dejagnu.\n \n @item bootstrap\n-Builds gcc three times - once with the native compiler, once with the\n+Builds gcc three times---once with the native compiler, once with the\n native-built compiler it just built, and once with the compiler it built\n the second time.  In theory, the last two should produce the same\n results, which @code{make compare} can check.  Each step of this process\n-is called a \"stage\", and the results of each stage N (N=1..3) are copied\n-to a subdirectory @file{stageN/}.\n+is called a ``stage'', and the results of each stage @var{N}\n+(@var{N} = 1@dots{}3) are copied to a subdirectory @file{stage@var{N}/}.\n \n @item bootstrap-lean\n Like @code{bootstrap}, except that the various stages are removed once\n they're no longer needed.  This saves disk space.\n \n @item bubblestrap\n Once bootstrapped, this incrementally rebuilds each of the three stages,\n-one at a time.  It does this by \"bubbling\" the stages up from their\n+one at a time.  It does this by ``bubbling'' the stages up from their\n stubdirectories, rebuilding them, and copying them back to their\n subdirectories.  This will allow you to, for example, quickly rebuild a\n bootstrapped compiler after changing the sources, without having to do a\n@@ -2946,14 +2949,15 @@ of which stage you're on or what invocation that stage needs.\n @item cleanstrap\n Removed everything (@code{make clean}) and rebuilds (@code{make bootstrap}).\n \n-@item stageN (N=1..4)\n-For each stage, moves the appropriate files to the stageN subdirectory.\n+@item stage@var{N} (@var{N} = 1@dots{}4)\n+For each stage, moves the appropriate files to the @file{stage@var{N}}\n+subdirectory.\n \n-@item unstageN (N=1..4)\n-Undoes the corresponding @code{stageN}.\n+@item unstage@var{N} (@var{N} = 1@dots{}4)\n+Undoes the corresponding @code{stage@var{N}}.\n \n-@item restageN (N=1..4)\n-Undoes the corresponding @code{stageN} and rebuilds it with the\n+@item restage@var{N} (@var{N} = 1@dots{}4)\n+Undoes the corresponding @code{stage@var{N}} and rebuilds it with the\n appropriate flags.\n \n @item compare\n@@ -3090,7 +3094,7 @@ Code compiled with GCC may call certain library routines.  Most of\n them handle arithmetic for which there are no instructions.  This\n includes multiply and divide on some machines, and floating point\n operations on any machine for which floating point support is disabled\n-with @samp{-msoft-float}.  Some standard parts of the C library, such as\n+with @option{-msoft-float}.  Some standard parts of the C library, such as\n @code{bcopy} or @code{memcpy}, are also called automatically.  The usual\n function call interface is used for calling the library routines.\n \n@@ -3144,7 +3148,7 @@ function\n \n Here is a list of all the passes of the compiler and their source files.\n Also included is a description of where debugging dumps can be requested\n-with @samp{-d} options.\n+with @option{-d} options.\n \n @itemize @bullet\n @item\n@@ -3260,7 +3264,7 @@ rtl when the function is called.  The header file @file{integrate.h}\n is also used for this purpose.\n \n @opindex dr\n-The option @samp{-dr} causes a debugging dump of the RTL code after\n+The option @option{-dr} causes a debugging dump of the RTL code after\n this pass.  This dump file's name is made by appending @samp{.rtl} to\n the input file name.\n \n@@ -3287,7 +3291,7 @@ optimizations described above.\n The source file of this pass is @file{jump.c}.\n \n @opindex dj\n-The option @samp{-dj} causes a debugging dump of the RTL code after\n+The option @option{-dj} causes a debugging dump of the RTL code after\n this pass is run for the first time.  This dump file's name is made by\n appending @samp{.jump} to the input file name.\n \n@@ -3304,7 +3308,7 @@ Jump threading.  This pass detects a condition jump that branches to an\n identical or inverse test.  Such jumps can be @samp{threaded} through\n the second conditional test.  The source code for this pass is in\n @file{jump.c}.  This optimization is only performed if\n-@samp{-fthread-jumps} is enabled.\n+@option{-fthread-jumps} is enabled.\n \n @cindex common subexpression elimination\n @cindex constant propagation\n@@ -3315,7 +3319,7 @@ propagation causes conditional jumps to become unconditional or to\n become no-ops, jump optimization is run again when CSE is finished.\n \n @opindex ds\n-The option @samp{-ds} causes a debugging dump of the RTL code after\n+The option @option{-ds} causes a debugging dump of the RTL code after\n this pass.  This dump file's name is made by appending @samp{.cse} to\n the input file name.\n \n@@ -3325,14 +3329,14 @@ the input file name.\n @item\n Global common subexpression elimination.  This pass performs GCSE\n using Morel-Renvoise Partial Redundancy Elimination, with the exception\n-that it does not try to move invariants out of loops - that is left to\n+that it does not try to move invariants out of loops---that is left to\n the loop optimization pass.  This pass also performs global constant\n and copy propagation.\n \n The source file for this pass is gcse.c.\n \n @opindex dG\n-The option @samp{-dG} causes a debugging dump of the RTL code after\n+The option @option{-dG} causes a debugging dump of the RTL code after\n this pass.  This dump file's name is made by appending @samp{.gcse} to\n the input file name.\n \n@@ -3347,18 +3351,18 @@ Its source files are @file{loop.c} and @file{unroll.c}, plus the header\n some functions in @file{integrate.c} and the header @file{integrate.h}.\n \n @opindex dL\n-The option @samp{-dL} causes a debugging dump of the RTL code after\n+The option @option{-dL} causes a debugging dump of the RTL code after\n this pass.  This dump file's name is made by appending @samp{.loop} to\n the input file name.\n \n @item\n @opindex frerun-cse-after-loop\n-If @samp{-frerun-cse-after-loop} was enabled, a second common\n+If @option{-frerun-cse-after-loop} was enabled, a second common\n subexpression elimination pass is performed after the loop optimization\n pass.  Jump threading is also done again at this time if it was specified.\n \n @opindex dt\n-The option @samp{-dt} causes a debugging dump of the RTL code after\n+The option @option{-dt} causes a debugging dump of the RTL code after\n this pass.  This dump file's name is made by appending @samp{.cse2} to\n the input file name.\n \n@@ -3378,7 +3382,7 @@ combines memory references with add or subtract instructions to make\n autoincrement or autodecrement addressing.\n \n @opindex df\n-The option @samp{-df} causes a debugging dump of the RTL code after\n+The option @option{-df} causes a debugging dump of the RTL code after\n this pass.  This dump file's name is made by appending @samp{.flow} to\n the input file name.  If stupid register allocation is in use, this\n dump file reflects the full results of such allocation.\n@@ -3392,7 +3396,7 @@ the instructions by substitution, simplifies the result using algebra,\n and then attempts to match the result against the machine description.\n \n @opindex dc\n-The option @samp{-dc} causes a debugging dump of the RTL code after\n+The option @option{-dc} causes a debugging dump of the RTL code after\n this pass.  This dump file's name is made by appending @samp{.combine}\n to the input file name.\n \n@@ -3405,7 +3409,7 @@ to change the registers used by the instruction to avoid the move\n instruction.\n \n @opindex dN\n-The option @samp{-dN} causes a debugging dump of the RTL code after\n+The option @option{-dN} causes a debugging dump of the RTL code after\n this pass.  This dump file's name is made by appending @samp{.regmove}\n to the input file name.\n \n@@ -3423,7 +3427,7 @@ Instruction scheduling is performed twice.  The first time is immediately\n after instruction combination and the second is immediately after reload.\n \n @opindex dS\n-The option @samp{-dS} causes a debugging dump of the RTL code after this\n+The option @option{-dS} causes a debugging dump of the RTL code after this\n pass is run for the first time.  The dump file's name is made by\n appending @samp{.sched} to the input file name.\n \n@@ -3442,7 +3446,7 @@ block.  Because the basic block is linear, it can use fast and\n powerful techniques to do a very good job.\n \n @opindex dl\n-The option @samp{-dl} causes a debugging dump of the RTL code after\n+The option @option{-dl} causes a debugging dump of the RTL code after\n this pass.  This dump file's name is made by appending @samp{.lreg} to\n the input file name.\n \n@@ -3470,7 +3474,7 @@ Source files are @file{reload.c} and @file{reload1.c}, plus the header\n @file{reload.h} used for communication between them.\n \n @opindex dg\n-The option @samp{-dg} causes a debugging dump of the RTL code after\n+The option @option{-dg} causes a debugging dump of the RTL code after\n this pass.  This dump file's name is made by appending @samp{.greg} to\n the input file name.\n \n@@ -3481,7 +3485,7 @@ Instruction scheduling is repeated here to try to avoid pipeline stalls\n due to memory loads generated for spilled pseudo registers.\n \n @opindex dR\n-The option @samp{-dR} causes a debugging dump of the RTL code after\n+The option @option{-dR} causes a debugging dump of the RTL code after\n this pass.  This dump file's name is made by appending @samp{.sched2}\n to the input file name.\n \n@@ -3492,7 +3496,7 @@ Jump optimization is repeated, this time including cross-jumping\n and deletion of no-op move instructions.\n \n @opindex dJ\n-The option @samp{-dJ} causes a debugging dump of the RTL code after\n+The option @option{-dJ} causes a debugging dump of the RTL code after\n this pass.  This dump file's name is made by appending @samp{.jump2}\n to the input file name.\n \n@@ -3504,7 +3508,7 @@ instructions that can go into the delay slots of other instructions,\n usually jumps and calls.  The source file name is @file{reorg.c}.\n \n @opindex dd\n-The option @samp{-dd} causes a debugging dump of the RTL code after\n+The option @option{-dd} causes a debugging dump of the RTL code after\n this pass.  This dump file's name is made by appending @samp{.dbr}\n to the input file name.\n \n@@ -3525,7 +3529,7 @@ for the floating-point registers of the Intel 80387 coprocessor.   The\n source file name is @file{reg-stack.c}.\n \n @opindex dk\n-The options @samp{-dk} causes a debugging dump of the RTL code after\n+The options @option{-dk} causes a debugging dump of the RTL code after\n this pass.  This dump file's name is made by appending @samp{.stack}\n to the input file name.\n \n@@ -3924,8 +3928,8 @@ procedure will build all combinations of compatible options.\n \n For example, if you set @code{MULTILIB_OPTIONS} to @samp{m68000/m68020\n msoft-float}, @file{Makefile} will build special versions of\n-@file{libgcc.a} using the following sets of options:  @samp{-m68000},\n-@samp{-m68020}, @samp{-msoft-float}, @samp{-m68000 -msoft-float}, and\n+@file{libgcc.a} using the following sets of options:  @option{-m68000},\n+@option{-m68020}, @option{-msoft-float}, @samp{-m68000 -msoft-float}, and\n @samp{-m68020 -msoft-float}.\n \n @findex MULTILIB_DIRNAMES\n@@ -3958,8 +3962,8 @@ case, set @code{MULTILIB_EXCEPTIONS} to be all of the switch exceptions\n in shell case syntax that should not be built.\n \n For example, in the PowerPC embedded ABI support, it is not desirable\n-to build libraries compiled with the @samp{-mcall-aix} option\n-and either of the @samp{-fleading-underscore} or @samp{-mlittle} options\n+to build libraries compiled with the @option{-mcall-aix} option\n+and either of the @option{-fleading-underscore} or @option{-mlittle} options\n at the same time.  Therefore @code{MULTILIB_EXCEPTIONS} is set to\n @code{*mcall-aix/*fleading-underscore* *mlittle/*mcall-aix*}.\n "}]}