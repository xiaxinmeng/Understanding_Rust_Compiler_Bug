{"sha": "ad269884765cfe6e5f4cf1f3abb50b4e74f79ac9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQyNjk4ODQ3NjVjZmU2ZTVmNGNmMWYzYWJiNTBiNGU3NGY3OWFjOQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2010-11-11T13:10:49Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-11-11T13:10:49Z"}, "message": "move.h (forward): Implement N3143, resolving US 90.\n\n2010-11-11  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/bits/move.h (forward): Implement N3143, resolving US 90.\n\t* testsuite/20_util/forward/a.cc: New.\n\t* testsuite/20_util/forward/b.cc: Likewise.\n\t* testsuite/20_util/forward/c_neg.cc: Likewise.\n\t* testsuite/20_util/forward/d.cc: Likewise.\n\t* testsuite/20_util/forward/e.cc: Likewise.\n\t* testsuite/20_util/forward/f_neg.cc: Likewise.\n\nFrom-SVN: r166599", "tree": {"sha": "050ae8b90da348b14f9b9812f34a3252849c5020", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/050ae8b90da348b14f9b9812f34a3252849c5020"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad269884765cfe6e5f4cf1f3abb50b4e74f79ac9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad269884765cfe6e5f4cf1f3abb50b4e74f79ac9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad269884765cfe6e5f4cf1f3abb50b4e74f79ac9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad269884765cfe6e5f4cf1f3abb50b4e74f79ac9/comments", "author": null, "committer": null, "parents": [{"sha": "280fedf0677108f96d3c701815bccc182eff9fb4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/280fedf0677108f96d3c701815bccc182eff9fb4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/280fedf0677108f96d3c701815bccc182eff9fb4"}], "stats": {"total": 493, "additions": 474, "deletions": 19}, "files": [{"sha": "a82999b2c7d9097b4ffb9b7131239f9890bfa28a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad269884765cfe6e5f4cf1f3abb50b4e74f79ac9/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad269884765cfe6e5f4cf1f3abb50b4e74f79ac9/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ad269884765cfe6e5f4cf1f3abb50b4e74f79ac9", "patch": "@@ -1,3 +1,13 @@\n+2010-11-11  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/bits/move.h (forward): Implement N3143, resolving US 90.\n+\t* testsuite/20_util/forward/a.cc: New.\n+\t* testsuite/20_util/forward/b.cc: Likewise.\n+\t* testsuite/20_util/forward/c_neg.cc: Likewise.\n+\t* testsuite/20_util/forward/d.cc: Likewise.\n+\t* testsuite/20_util/forward/e.cc: Likewise.\n+\t* testsuite/20_util/forward/f_neg.cc: Likewise.\n+\n 2010-11-10  Fran\u00e7ois Dumont  <francois.cppdevs@free.fr>\n \n \t* include/profile/unordered_map (unordered_map<>::_M_profile_size):"}, {"sha": "f351d01964f05dfccf48e62a8ea71bd25211e281", "filename": "libstdc++-v3/include/bits/move.h", "status": "modified", "additions": 10, "deletions": 19, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad269884765cfe6e5f4cf1f3abb50b4e74f79ac9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmove.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad269884765cfe6e5f4cf1f3abb50b4e74f79ac9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmove.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmove.h?ref=ad269884765cfe6e5f4cf1f3abb50b4e74f79ac9", "patch": "@@ -51,29 +51,20 @@ _GLIBCXX_END_NAMESPACE\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n   \n-  /// forward (as per N2835)\n-  /// Forward lvalues as rvalues.\n+  /// forward (as per N3143)\n   template<typename _Tp>\n-    inline typename enable_if<!is_lvalue_reference<_Tp>::value, _Tp&&>::type\n-    forward(typename std::common_type<_Tp>::type& __t)\n+    inline _Tp&&\n+    forward(typename std::remove_reference<_Tp>::type& __t) \n     { return static_cast<_Tp&&>(__t); }\n \n-  /// Forward rvalues as rvalues.\n   template<typename _Tp>\n-    inline typename enable_if<!is_lvalue_reference<_Tp>::value, _Tp&&>::type\n-    forward(typename std::common_type<_Tp>::type&& __t)\n-    { return static_cast<_Tp&&>(__t); }\n-\n-  // Forward lvalues as lvalues.\n-  template<typename _Tp>\n-    inline typename enable_if<is_lvalue_reference<_Tp>::value, _Tp>::type\n-    forward(typename std::common_type<_Tp>::type __t)\n-    { return __t; }\n-\n-  // Prevent forwarding rvalues as const lvalues.\n-  template<typename _Tp>\n-    inline typename enable_if<is_lvalue_reference<_Tp>::value, _Tp>::type\n-    forward(typename std::remove_reference<_Tp>::type&& __t) = delete;\n+    inline _Tp&&\n+    forward(typename std::remove_reference<_Tp>::type&& __t) \n+    {\n+      static_assert(!std::is_lvalue_reference<_Tp>::value, \"template argument\"\n+\t\t    \" substituting _Tp is an lvalue reference type\");\n+      return static_cast<_Tp&&>(__t);\n+    }\n \n   /**\n    *  @brief Move a value."}, {"sha": "296c9f449a222d847d1e5576cd021e425dbfdfba", "filename": "libstdc++-v3/testsuite/20_util/forward/a.cc", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad269884765cfe6e5f4cf1f3abb50b4e74f79ac9/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fforward%2Fa.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad269884765cfe6e5f4cf1f3abb50b4e74f79ac9/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fforward%2Fa.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fforward%2Fa.cc?ref=ad269884765cfe6e5f4cf1f3abb50b4e74f79ac9", "patch": "@@ -0,0 +1,77 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <list>\n+#include <testsuite_hooks.h>\n+\n+template <class T>\n+  struct C\n+  {\n+    T t_;\n+\n+    template <class U,\n+              class = typename std::enable_if\n+                    <\n+                        !std::is_lvalue_reference<U>::value\n+                    >::type>\n+      C(U&& u) : t_(std::forward<T>(std::move(u).get())) {}\n+  };\n+\n+class A\n+{\n+  int data_;\n+public:\n+  explicit\n+  A(int data = 1)\n+  : data_(data) {}\n+  \n+  ~A() { data_ = -1; }\n+\n+  void test() const\n+  {\n+    bool test __attribute__((unused)) = true;\n+    VERIFY( data_ == 3 );\n+  }\n+};\n+\n+class Awrap\n+{\n+  const A& a_;\n+public:\n+  explicit Awrap(const A& a) : a_(a) { }\n+  const A& get() const { return a_; }\n+};\n+\n+template <class C>\n+  void test(C c)\n+  {\n+    c.t_.test();\n+  }\n+\n+// http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2009/n2951.html\n+// Test A.\n+int main()\n+{\n+  std::list<C<const A&> > list;\n+  A a(3);\n+  C<const A&> c((Awrap(a)));\n+  list.push_back(c);\n+  test(c);\n+  test(list.front());\n+}"}, {"sha": "4168800b468be7954ae97d600c62e108c3830538", "filename": "libstdc++-v3/testsuite/20_util/forward/b.cc", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad269884765cfe6e5f4cf1f3abb50b4e74f79ac9/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fforward%2Fb.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad269884765cfe6e5f4cf1f3abb50b4e74f79ac9/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fforward%2Fb.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fforward%2Fb.cc?ref=ad269884765cfe6e5f4cf1f3abb50b4e74f79ac9", "patch": "@@ -0,0 +1,77 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <list>\n+#include <testsuite_hooks.h>\n+\n+template <class T>\n+  struct C\n+  {\n+    T t_;\n+\n+    template <class U,\n+              class = typename std::enable_if\n+                    <\n+                        !std::is_lvalue_reference<U>::value\n+                    >::type>\n+      C(U&& u) : t_(std::forward<T>(std::move(u).get())) {}\n+  };\n+\n+class A\n+{\n+  int data_;\n+public:\n+  explicit\n+  A(int data = 1)\n+  : data_(data) { }\n+\n+  ~A() { data_ = -1; }\n+\n+  void test() const\n+  {\n+    bool test __attribute__((unused)) = true;\n+    VERIFY( data_ == 3 );\n+  }\n+};\n+\n+class Awrap\n+{\n+  A a_;\n+public:\n+  explicit Awrap(const A& a) : a_(a) { }\n+  A get() const { return a_; }\n+};\n+\n+template <class C>\n+void test(C c)\n+{\n+  c.t_.test();\n+}\n+\n+// http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2009/n2951.html\n+// Test B.\n+int main()\n+{\n+  std::list<C<A> > list;\n+  A a(3);\n+  C<A> c((Awrap(a)));\n+  list.push_back(c);\n+  test(c);\n+  test(list.front());\n+}"}, {"sha": "919fe56cc2742444a0af85667d8acd48a2a8e3b1", "filename": "libstdc++-v3/testsuite/20_util/forward/c_neg.cc", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad269884765cfe6e5f4cf1f3abb50b4e74f79ac9/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fforward%2Fc_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad269884765cfe6e5f4cf1f3abb50b4e74f79ac9/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fforward%2Fc_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fforward%2Fc_neg.cc?ref=ad269884765cfe6e5f4cf1f3abb50b4e74f79ac9", "patch": "@@ -0,0 +1,78 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 64 }\n+\n+#include <list>\n+\n+template <class T>\n+  struct C\n+  {\n+    T t_;\n+\n+    template <class U,\n+\t      class = typename std::enable_if\n+                    <\n+\t                !std::is_lvalue_reference<U>::value\n+                    >::type>\n+      C(U&& u) : t_(std::forward<T>(std::move(u).get())) {}\n+  };\n+\n+class A\n+{\n+  int data_;\n+public:\n+  explicit\n+  A(int data = 1)\n+  : data_(data) { }\n+\n+  ~A() { data_ = -1; }\n+\n+  void test() const\n+  {\n+    __builtin_abort();\n+  }\n+};\n+\n+class Awrap\n+{\n+  const A& a_;\n+public:\n+  explicit Awrap(const A& a) : a_(a) {}\n+  const A /* & */ get() const { return a_; }\n+};\n+\n+template <class C>\n+  void test(C c)\n+  {\n+    c.t_.test();\n+  }\n+\n+// http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2009/n2951.html\n+// Test C.\n+int main()\n+{\n+  std::list<C<const A&> > list;\n+  A a(3);\n+  C<const A&> c((Awrap(a)));\n+  list.push_back(c);\n+  test(c);\n+  test(list.front());\n+}"}, {"sha": "c2c7eb3c887d2ecfb724ac2aeeb49e29421a80fb", "filename": "libstdc++-v3/testsuite/20_util/forward/d.cc", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad269884765cfe6e5f4cf1f3abb50b4e74f79ac9/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fforward%2Fd.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad269884765cfe6e5f4cf1f3abb50b4e74f79ac9/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fforward%2Fd.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fforward%2Fd.cc?ref=ad269884765cfe6e5f4cf1f3abb50b4e74f79ac9", "patch": "@@ -0,0 +1,78 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <list>\n+#include <testsuite_hooks.h>\n+\n+template <class T>\n+  struct C\n+  {\n+    T t_;\n+\n+    template <class U,\n+              class = typename std::enable_if\n+                    <\n+                        !std::is_lvalue_reference<U>::value\n+                    >::type>\n+      C(U&& u) : t_(std::forward<T>(std::move(u).get())) { }\n+  };\n+\n+class A\n+{\n+  int data_;\n+public:\n+  explicit\n+  A(int data = 1)\n+  : data_(data) { }\n+\n+  ~A() { data_ = -1; }\n+\n+  void test() const\n+  {\n+    bool test __attribute__((unused)) = true;\n+    VERIFY( data_ == 3 );\n+  }\n+};\n+\n+class Awrap\n+{\n+  A& a_;\n+public:\n+  explicit Awrap(A& a) : a_(a) { }\n+  const A& get() const { return a_; }\n+        A& get()       { return a_; }\n+};\n+\n+template <class C>\n+  void test(C c)\n+  {\n+    c.t_.test();\n+  }\n+\n+// http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2009/n2951.html\n+// Test D.\n+int main()\n+{\n+  std::list<C<const A&> > list;\n+  A a(3);\n+  C<const A&> c((Awrap(a)));\n+  list.push_back(c);\n+  test(c);\n+  test(list.front());\n+}"}, {"sha": "4d89cd1a8b015721c2401ace0155f35a6f96cc08", "filename": "libstdc++-v3/testsuite/20_util/forward/e.cc", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad269884765cfe6e5f4cf1f3abb50b4e74f79ac9/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fforward%2Fe.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad269884765cfe6e5f4cf1f3abb50b4e74f79ac9/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fforward%2Fe.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fforward%2Fe.cc?ref=ad269884765cfe6e5f4cf1f3abb50b4e74f79ac9", "patch": "@@ -0,0 +1,54 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <utility>\n+\n+template <class T>\n+  struct C\n+  {\n+    T t_;\n+\n+    C() { }\n+\n+    template <class U,\n+              class = typename std::enable_if\n+                    <\n+                        !std::is_lvalue_reference<U>::value\n+                    >::type>\n+      C(U&& u) : t_(std::forward<T>(std::move(u).get())) { }\n+\n+    C(C&& c) : t_(std::forward<T>(c.t_)) { }\n+  };\n+\n+template <class T>\n+  struct Derived\n+  : C<T>\n+  {\n+    Derived() { }\n+    Derived(Derived&& d) : C<T>(std::forward<C<T>>(d)) { }\n+  };\n+\n+// http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2009/n2951.html\n+// Test E.\n+int main()\n+{\n+  Derived<int> d;\n+  Derived<int> d2(std::move(d));\n+}"}, {"sha": "6b5a365efd1a966f4607f8b0b5a2883d04b45be1", "filename": "libstdc++-v3/testsuite/20_util/forward/f_neg.cc", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad269884765cfe6e5f4cf1f3abb50b4e74f79ac9/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fforward%2Ff_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad269884765cfe6e5f4cf1f3abb50b4e74f79ac9/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fforward%2Ff_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fforward%2Ff_neg.cc?ref=ad269884765cfe6e5f4cf1f3abb50b4e74f79ac9", "patch": "@@ -0,0 +1,90 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 64 }\n+\n+#include <utility>\n+\n+template <class T>\n+  struct C\n+  {\n+    T t_;\n+\n+    C() {}\n+\n+    explicit C(const T& t) : t_(t) { }\n+\n+    template <class U,\n+              class = typename std::enable_if\n+                    <\n+                        std::is_convertible<U, T>::value\n+                    >::type>\n+      C(C<U>&& c) : t_(std::forward<T>(c.t_)) { }\n+  };\n+\n+class B;\n+\n+class A\n+{\n+  int data_;\n+\n+  friend class B;\n+public:\n+  explicit\n+  A(int data = 1)\n+  : data_(data) { }\n+\n+  ~A() { data_ = -1; }\n+\n+  void test() const\n+  {\n+    __builtin_abort();\n+  }\n+};\n+\n+class B\n+{\n+  int data_;\n+public:\n+  explicit\n+  B(int data = 1)\n+  : data_(data) { }\n+\n+  B(const A& a) : data_(a.data_) { }\n+\n+  B(A&& a) : data_(a.data_) { a.data_ = 100; }\n+\n+  ~B() { data_ = -1; }\n+\n+  void test() const\n+  {\n+    __builtin_abort();\n+  }\n+};\n+\n+// http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2009/n2951.html\n+// Test F.\n+int main()\n+{\n+  A a(3);\n+  C<A> ca(a);\n+  C<const B&> cb(std::move(ca));\n+  cb.t_.test();\n+}"}]}