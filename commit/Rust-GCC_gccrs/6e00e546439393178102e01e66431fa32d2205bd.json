{"sha": "6e00e546439393178102e01e66431fa32d2205bd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmUwMGU1NDY0MzkzOTMxNzgxMDJlMDFlNjY0MzFmYTMyZDIyMDViZA==", "commit": {"author": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2009-05-24T09:14:53Z"}, "committer": {"name": "Olivier Hainque", "email": "hainque@gcc.gnu.org", "date": "2009-05-24T09:14:53Z"}, "message": "switch.adb (Is_Internal_GCC_Switch, [...]): Bodies of ...\n\n        * switch.adb (Is_Internal_GCC_Switch, Switch_Last): Bodies of ...\n        * switch.ads (Is_Internal_GCC_Switch, Switch_Last): New functions.\n        Add -auxbase variants to the list of recognized internal switches.\n        * back_end.adb (Scan_Back_End_Switches): Use the new functions and\n        adjust comments.\n        * lib.ads: Make comment on internal GCC switches more general.\n        * gcc-interface/lang-specs.h (specs for Ada): Pass -auxbase variants\n        as for C.\n\nFrom-SVN: r147830", "tree": {"sha": "621c8106644bb4e444801051be4bff97a4d67d53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/621c8106644bb4e444801051be4bff97a4d67d53"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e00e546439393178102e01e66431fa32d2205bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e00e546439393178102e01e66431fa32d2205bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e00e546439393178102e01e66431fa32d2205bd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e00e546439393178102e01e66431fa32d2205bd/comments", "author": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a70d6342473292caef639fdae67ae5b78b87b006", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a70d6342473292caef639fdae67ae5b78b87b006", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a70d6342473292caef639fdae67ae5b78b87b006"}], "stats": {"total": 98, "additions": 71, "deletions": 27}, "files": [{"sha": "6a652be62cd75d7b223fd41e22cfb30e1072ab0f", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e00e546439393178102e01e66431fa32d2205bd/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e00e546439393178102e01e66431fa32d2205bd/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=6e00e546439393178102e01e66431fa32d2205bd", "patch": "@@ -1,3 +1,14 @@\n+2009-05-24  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* switch.adb (Is_Internal_GCC_Switch, Switch_Last): Bodies of ...\n+\t* switch.ads (Is_Internal_GCC_Switch, Switch_Last): New functions.\n+\tAdd -auxbase variants to the list of recognized internal switches.\n+\t* back_end.adb (Scan_Back_End_Switches): Use the new functions and\n+\tadjust comments.\n+\t* lib.ads: Make comment on internal GCC switches more general.\n+\t* gcc-interface/lang-specs.h (specs for Ada): Pass -auxbase variants\n+\tas for C.\t\n+\t\n 2009-05-23  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/misc.c (gnat_get_subrange_bounds): Fix thinko."}, {"sha": "a15d9ecfc1688d175368f29e2edad0ca4d7d79b8", "filename": "gcc/ada/back_end.adb", "status": "modified", "additions": 9, "deletions": 19, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e00e546439393178102e01e66431fa32d2205bd/gcc%2Fada%2Fback_end.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e00e546439393178102e01e66431fa32d2205bd/gcc%2Fada%2Fback_end.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fback_end.adb?ref=6e00e546439393178102e01e66431fa32d2205bd", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -158,12 +158,10 @@ package body Back_End is\n       --  entire string should consist of valid switch characters, except that\n       --  an optional terminating NUL character is allowed.\n       --\n-      --  Back end switches have already been checked and processed by GCC\n-      --  in toplev.c, so no errors can occur and control will always return.\n-      --  The switches must still be scanned to skip the arguments of the\n-      --  \"-o\" or the (undocumented) \"-dumpbase\" switch, by incrementing\n-      --  the Next_Arg variable. The \"-dumpbase\" switch is used to set the\n-      --  basename for GCC dumpfiles.\n+      --  Back end switches have already been checked and processed by GCC in\n+      --  toplev.c, so no errors can occur and control will always return. The\n+      --  switches must still be scanned to skip \"-o\" or internal GCC switches\n+      --  with their argument.\n \n       -------------\n       -- Len_Arg --\n@@ -186,21 +184,13 @@ package body Back_End is\n \n       procedure Scan_Back_End_Switches (Switch_Chars : String) is\n          First : constant Positive := Switch_Chars'First + 1;\n-         Last  : Natural := Switch_Chars'Last;\n+         Last  : constant Natural  := Switch_Last (Switch_Chars);\n \n       begin\n-         if Last >= First\n-           and then Switch_Chars (Last) = ASCII.NUL\n-         then\n-            Last := Last - 1;\n-         end if;\n-\n-         --  For switches -o, -dumpbase, --param, skip following argument and\n-         --  do not store either the switch or the following argument.\n+         --  Skip -o or internal GCC switches together with their argument\n \n-         if Switch_Chars (First .. Last) = \"o\"        or else\n-            Switch_Chars (First .. Last) = \"dumpbase\" or else\n-            Switch_Chars (First .. Last) = \"-param\"\n+         if Switch_Chars (First .. Last) = \"o\"\n+           or else Is_Internal_GCC_Switch (Switch_Chars)\n          then\n             Next_Arg := Next_Arg + 1;\n "}, {"sha": "1afba3706b41309cb8311b262f70006830a623db", "filename": "gcc/ada/gcc-interface/lang-specs.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e00e546439393178102e01e66431fa32d2205bd/gcc%2Fada%2Fgcc-interface%2Flang-specs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e00e546439393178102e01e66431fa32d2205bd/gcc%2Fada%2Fgcc-interface%2Flang-specs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Flang-specs.h?ref=6e00e546439393178102e01e66431fa32d2205bd", "patch": "@@ -35,6 +35,7 @@\n  gnat1 %{I*} %{k8:-gnatk8} %{Wall:-gnatwa} %{w:-gnatws} %{!Q:-quiet}\\\n     %{nostdinc*} %{nostdlib*}\\\n     -dumpbase %{.adb:%b.adb}%{.ads:%b.ads}%{!.adb:%{!.ads:%b.ada}}\\\n+    %{c|S:%{o*:-auxbase-strip %*}%{!o*:-auxbase %b}}%{!c:%{!S:-auxbase %b}} \\\n     %{O*} %{W*} %{w} %{p} %{pg:-p} %{a} %{d*} %{f*}\\\n     %{coverage:-fprofile-arcs -ftest-coverage} \"\n #if CONFIG_DUAL_EXCEPTIONS"}, {"sha": "145d16dff0807ada15ff29abb35c955a6911ba70", "filename": "gcc/ada/lib.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e00e546439393178102e01e66431fa32d2205bd/gcc%2Fada%2Flib.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e00e546439393178102e01e66431fa32d2205bd/gcc%2Fada%2Flib.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib.ads?ref=6e00e546439393178102e01e66431fa32d2205bd", "patch": "@@ -734,9 +734,9 @@ private\n      Table_Name           => \"Linker_Option_Lines\");\n \n    --  The following table records the compilation switches used to compile\n-   --  the main unit. The table includes only switches and excludes -quiet,\n-   --  -dumpbase, and -o switches, since the latter are typically artifacts\n-   --  of the gcc/gnat1 interface.\n+   --  the main unit. The table includes only switches. It excludes -o\n+   --  switches as well as artifacts of the gcc/gnat1 interface such as\n+   --  -quiet, -dumpbase, or -auxbase.\n \n    --  This table is set as part of the compiler argument scanning in\n    --  Back_End. It can also be reset in -gnatc mode from the data in an"}, {"sha": "cb5c4d11f491c8e832995858f2ab6f0f4c348a56", "filename": "gcc/ada/switch.adb", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e00e546439393178102e01e66431fa32d2205bd/gcc%2Fada%2Fswitch.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e00e546439393178102e01e66431fa32d2205bd/gcc%2Fada%2Fswitch.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fswitch.adb?ref=6e00e546439393178102e01e66431fa32d2205bd", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -138,6 +138,22 @@ package body Switch is\n                       and then Switch_Chars (Ptr + 2 .. Ptr + 4) = \"RTS\"));\n    end Is_Front_End_Switch;\n \n+   ----------------------------\n+   -- Is_Internal_GCC_Switch --\n+   ----------------------------\n+\n+   function Is_Internal_GCC_Switch (Switch_Chars : String) return Boolean is\n+      First : constant Natural := Switch_Chars'First + 1;\n+      Last  : constant Natural := Switch_Last (Switch_Chars);\n+   begin\n+      return Is_Switch (Switch_Chars)\n+        and then\n+          (Switch_Chars (First .. Last) = \"-param\"        or else\n+           Switch_Chars (First .. Last) = \"dumpbase\"      or else\n+           Switch_Chars (First .. Last) = \"auxbase-strip\" or else\n+           Switch_Chars (First .. Last) = \"auxbase\");\n+   end Is_Internal_GCC_Switch;\n+\n    ---------------\n    -- Is_Switch --\n    ---------------\n@@ -148,6 +164,22 @@ package body Switch is\n         and then Switch_Chars (Switch_Chars'First) = '-';\n    end Is_Switch;\n \n+   -----------------\n+   -- Switch_last --\n+   -----------------\n+\n+   function Switch_Last (Switch_Chars : String) return Natural is\n+      Last : constant Natural := Switch_Chars'Last;\n+   begin\n+      if Last >= Switch_Chars'First\n+        and then Switch_Chars (Last) = ASCII.NUL\n+      then\n+         return Last - 1;\n+      else\n+         return Last;\n+      end if;\n+   end Switch_Last;\n+\n    -----------------\n    -- Nat_Present --\n    -----------------"}, {"sha": "027bf8354877c59335fb32923884dab4524a3ea1", "filename": "gcc/ada/switch.ads", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e00e546439393178102e01e66431fa32d2205bd/gcc%2Fada%2Fswitch.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e00e546439393178102e01e66431fa32d2205bd/gcc%2Fada%2Fswitch.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fswitch.ads?ref=6e00e546439393178102e01e66431fa32d2205bd", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -72,11 +72,21 @@ package Switch is\n    --  Returns True iff Switch_Chars represents a front-end switch, i.e. it\n    --  starts with -I, -gnat or -?RTS.\n \n-private\n+   function Is_Internal_GCC_Switch (Switch_Chars : String) return Boolean;\n+   --  Returns True iff Switch_Chars represents an internal GCC switch to be\n+   --  followed by a single argument, such as -dumpbase, --param or -auxbase.\n+   --  Eventhough passed by the \"gcc\" driver, these need not be stored in ALI\n+   --  files and may safely be ignored by non GCC back-ends.\n+\n+   function Switch_Last (Switch_Chars : String) return Natural;\n+   --  Index in Switch_Chars of the last relevant character for later string\n+   --  comparison purposes. This is typically 'Last, minus one if there is a\n+   --  terminating ASCII.NUL.\n \n+private\n    --  This section contains some common routines used by the tool dependent\n-   --  child packages (there is one such child package for each tool that\n-   --  uses Switches to scan switches - Compiler/gnatbind/gnatmake/.\n+   --  child packages (there is one such child package for each tool that uses\n+   --  Switches to scan switches - Compiler/gnatbind/gnatmake/.\n \n    Switch_Max_Value : constant := 999_999;\n    --  Maximum value permitted in switches that take a value"}]}