{"sha": "d83a4cf15dd544bbdcbe205217785b293dffd028", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDgzYTRjZjE1ZGQ1NDRiYmRjYmUyMDUyMTc3ODViMjkzZGZmZDAyOA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2019-08-16T16:00:25Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2019-08-16T16:00:25Z"}, "message": "tree-sra.c (build_reconstructed_reference): Return NULL_TREE instead of NULL.\n\n\t* tree-sra.c (build_reconstructed_reference): Return NULL_TREE instead\n\tof NULL.  Add guard for broken VIEW_CONVERT_EXPRs.\n\nFrom-SVN: r274576", "tree": {"sha": "dabd78b240dc4fd5668aad10f42d5563101a0a15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dabd78b240dc4fd5668aad10f42d5563101a0a15"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d83a4cf15dd544bbdcbe205217785b293dffd028", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d83a4cf15dd544bbdcbe205217785b293dffd028", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d83a4cf15dd544bbdcbe205217785b293dffd028", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d83a4cf15dd544bbdcbe205217785b293dffd028/comments", "author": null, "committer": null, "parents": [{"sha": "dc139eb184d5361147ac32c290a074a3bc28e29e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc139eb184d5361147ac32c290a074a3bc28e29e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc139eb184d5361147ac32c290a074a3bc28e29e"}], "stats": {"total": 50, "additions": 49, "deletions": 1}, "files": [{"sha": "e14ab3d7c912f47a90bcb2e62aa5de54bc7f4814", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d83a4cf15dd544bbdcbe205217785b293dffd028/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d83a4cf15dd544bbdcbe205217785b293dffd028/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d83a4cf15dd544bbdcbe205217785b293dffd028", "patch": "@@ -1,3 +1,8 @@\n+2019-08-16  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* tree-sra.c (build_reconstructed_reference): Return NULL_TREE instead\n+\tof NULL.  Add guard for broken VIEW_CONVERT_EXPRs.\n+\n 2019-08-16  Martin Sebor  <msebor@redhat.com>\n \n \t* tree.def (TYPE_SIZE): Clarify."}, {"sha": "9b7eff988119ed5d1d703f0cd91e1605ced176c3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d83a4cf15dd544bbdcbe205217785b293dffd028/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d83a4cf15dd544bbdcbe205217785b293dffd028/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d83a4cf15dd544bbdcbe205217785b293dffd028", "patch": "@@ -1,3 +1,7 @@\n+2019-08-16  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/opt81.ad[sb]: New test.\n+\n 2019-08-16  Martin Sebor  <msebor@redhat.com>\n \n \tPR testsuite/91458"}, {"sha": "057d846e5cd93d4f8217fcbd48298ea31c073f5d", "filename": "gcc/testsuite/gnat.dg/opt81.adb", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d83a4cf15dd544bbdcbe205217785b293dffd028/gcc%2Ftestsuite%2Fgnat.dg%2Fopt81.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d83a4cf15dd544bbdcbe205217785b293dffd028/gcc%2Ftestsuite%2Fgnat.dg%2Fopt81.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fopt81.adb?ref=d83a4cf15dd544bbdcbe205217785b293dffd028", "patch": "@@ -0,0 +1,20 @@\n+-- { dg-do compile }\n+-- { dg-options \"-O -gnatws\" }\n+\n+with Unchecked_Conversion;\n+\n+package body Opt81 is\n+\n+  procedure Copy (From, To : Rec) is\n+    Len : constant Natural := From.A.all'Length;\n+    subtype Fixed_String is String (1 .. Len);\n+    type Fixed_String_Access is access Fixed_String;\n+    function To_Fixed is new\n+      Unchecked_Conversion (Source => String_Access,\n+                            Target => Fixed_String_Access);\n+    S : Fixed_String_Access := To_Fixed (To.A);\n+  begin\n+    S (1 .. Len) := From.A.all;\n+  end;\n+\n+end Opt81;"}, {"sha": "743dcc2ef108ee761beed68e582e414a9b8b574c", "filename": "gcc/testsuite/gnat.dg/opt81.ads", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d83a4cf15dd544bbdcbe205217785b293dffd028/gcc%2Ftestsuite%2Fgnat.dg%2Fopt81.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d83a4cf15dd544bbdcbe205217785b293dffd028/gcc%2Ftestsuite%2Fgnat.dg%2Fopt81.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fopt81.ads?ref=d83a4cf15dd544bbdcbe205217785b293dffd028", "patch": "@@ -0,0 +1,15 @@\n+package Opt81 is\n+\n+  type String_Access is access String;\n+\n+  type Rec is record\n+    A : String_Access;\n+  end record;\n+\n+  for Rec use record\n+    A at 0 range 0 .. (Standard'Word_Size - 1);\n+  end record;\n+\n+  procedure Copy(From, To : Rec);\n+\n+end Opt81;"}, {"sha": "1505ce57d309c5d9aa7f8826db157ef2c66a83e0", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d83a4cf15dd544bbdcbe205217785b293dffd028/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d83a4cf15dd544bbdcbe205217785b293dffd028/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=d83a4cf15dd544bbdcbe205217785b293dffd028", "patch": "@@ -1812,11 +1812,15 @@ build_reconstructed_reference (location_t, tree base, struct access *model)\n   while (!types_compatible_p (TREE_TYPE (expr), TREE_TYPE (base)))\n     {\n       if (!handled_component_p (expr))\n-\treturn NULL;\n+\treturn NULL_TREE;\n       prev_expr = expr;\n       expr = TREE_OPERAND (expr, 0);\n     }\n \n+  /* Guard against broken VIEW_CONVERT_EXPRs...  */\n+  if (!prev_expr)\n+    return NULL_TREE;\n+\n   TREE_OPERAND (prev_expr, 0) = base;\n   tree ref = unshare_expr (model->expr);\n   TREE_OPERAND (prev_expr, 0) = expr;"}]}