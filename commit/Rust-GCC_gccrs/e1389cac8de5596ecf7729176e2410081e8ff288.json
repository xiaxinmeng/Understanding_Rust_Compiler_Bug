{"sha": "e1389cac8de5596ecf7729176e2410081e8ff288", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTEzODljYWM4ZGU1NTk2ZWNmNzcyOTE3NmUyNDEwMDgxZThmZjI4OA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "2000-09-24T23:46:46Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-09-24T23:46:46Z"}, "message": "* emit-rtl.c (gen_lowpart_common): Use trunc_int_for_mode.\n\nFrom-SVN: r36595", "tree": {"sha": "590212a97e0c307b3be377afad30ae195f1ca51e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/590212a97e0c307b3be377afad30ae195f1ca51e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e1389cac8de5596ecf7729176e2410081e8ff288", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1389cac8de5596ecf7729176e2410081e8ff288", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1389cac8de5596ecf7729176e2410081e8ff288", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1389cac8de5596ecf7729176e2410081e8ff288/comments", "author": null, "committer": null, "parents": [{"sha": "c06aa51eb96d2c2de44e8a14bf722c0909dce712", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c06aa51eb96d2c2de44e8a14bf722c0909dce712", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c06aa51eb96d2c2de44e8a14bf722c0909dce712"}], "stats": {"total": 13, "additions": 6, "deletions": 7}, "files": [{"sha": "7507986d61e52eb7980fdc013e6a6c0ba20d1600", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1389cac8de5596ecf7729176e2410081e8ff288/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1389cac8de5596ecf7729176e2410081e8ff288/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e1389cac8de5596ecf7729176e2410081e8ff288", "patch": "@@ -1,3 +1,7 @@\n+2000-09-24  Richard Henderson  <rth@cygnus.com>\n+\n+\t* emit-rtl.c (gen_lowpart_common): Use trunc_int_for_mode.\n+\n 2000-09-24  Mark Mitchell  <mark@codesourcery.com>\n \n \t* c-tree.texi: Moved here from cp/ir.texi.  Documented nested"}, {"sha": "ac5e9655c36ffe6fcbb491004bbd3a53f7f5249e", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1389cac8de5596ecf7729176e2410081e8ff288/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1389cac8de5596ecf7729176e2410081e8ff288/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=e1389cac8de5596ecf7729176e2410081e8ff288", "patch": "@@ -767,11 +767,7 @@ gen_lowpart_common (mode, x)\n     {\n       /* If MODE is twice the host word size, X is already the desired\n \t representation.  Otherwise, if MODE is wider than a word, we can't\n-\t do this.  If MODE is exactly a word, return just one CONST_INT.\n-\t If MODE is smaller than a word, clear the bits that don't belong\n-\t in our mode, unless they and our sign bit are all one.  So we get\n-\t either a reasonable negative value or a reasonable unsigned value\n-\t for this mode.  */\n+\t do this.  If MODE is exactly a word, return just one CONST_INT.  */\n \n       if (GET_MODE_BITSIZE (mode) >= 2 * HOST_BITS_PER_WIDE_INT)\n \treturn x;\n@@ -783,12 +779,11 @@ gen_lowpart_common (mode, x)\n       else\n \t{\n \t  /* MODE must be narrower than HOST_BITS_PER_WIDE_INT.  */\n-\t  int width = GET_MODE_BITSIZE (mode);\n \t  HOST_WIDE_INT val = (GET_CODE (x) == CONST_INT ? INTVAL (x)\n \t\t\t       : CONST_DOUBLE_LOW (x));\n \n \t  /* Sign extend to HOST_WIDE_INT.  */\n-\t  val = val << (HOST_BITS_PER_WIDE_INT - width) >> (HOST_BITS_PER_WIDE_INT - width);\n+\t  val = trunc_int_for_mode (val, mode);\n \n \t  return (GET_CODE (x) == CONST_INT && INTVAL (x) == val ? x\n \t\t  : GEN_INT (val));"}]}