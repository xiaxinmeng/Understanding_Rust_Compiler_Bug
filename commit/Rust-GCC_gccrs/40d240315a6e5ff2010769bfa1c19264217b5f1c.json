{"sha": "40d240315a6e5ff2010769bfa1c19264217b5f1c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDBkMjQwMzE1YTZlNWZmMjAxMDc2OWJmYTFjMTkyNjQyMTdiNWYxYw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2020-01-28T20:30:14Z"}, "committer": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2020-01-28T20:30:14Z"}, "message": "ipa: fix handling of multiple speculations (PR93318)\n\nThis patch started as work to resole Richard's comment on quadratic lookups\nin resolve_speculation. While doing it I however noticed multiple problems\nin the new speuclative call code which made the patch quite big. In\nparticular:\n 1) Before applying speculation we consider only targets with at lest\n    probability 1/2.\n    If profile is sane at most two targets can have probability greater or\n    equal to 1/2. So the new multi-target speculation code got enabled only\n    in very special scenario when there ae precisely two target with precise\n    probability 1/2 (which is tested by the single testcase).\n\n    As a conseuqence the multiple target logic got minimal test coverage and\n    this made us to miss several ICEs.\n 2) Profile updating in profile merging, tree-inline and indirect call\n    expansion was wrong which led to inconsistent profiles (as already seen\n    on the testcase).\n 3) Code responsible to turn speculative call to direct call was broken for\n    anything with more than one target.\n 4) There were multiple cases where call_site_hash went out of sync which\n    eventually leads to an ICE..\n 5) Some code expects that all speculative call targets forms a sequence in\n    the callee linked list but there is no code to maintain that invariant\n    nor a verifier.\nFixing this it became obvious that the current API of speculative_call_info is\nnot useful because it really builds on fact tht there are precisely three\ncomponents (direct call, ref and indirect call) in every speculative call\nsequence.  I ended up replacing it with iterator API for direct call\n(first_speculative_call_target, next_speculative_call_target) and accessors for\nthe other coponents updating comment in cgraph.h.\n\nFinally I made the work with call site hash more effetive by updating edge\nmanipulation to keep them in sequence. So first one can be looked up from the\nhash and then they can be iterated by callee.\n\nThere are other things that can be improved (for example the speculation should\nstart with most common target first), but I will try to keep that for next\nstage1. This patch is mostly about getting rid of ICE and profile corruption\nwhich is a regression from GCC 9.\n\nHonza\n\ngcc/ChangeLog:\n\n2020-01-28  Jan Hubicka  <hubicka@ucw.cz>\n\n\tPR lto/93318\n\t* cgraph.c (cgraph_add_edge_to_call_site_hash): Update call site\n\thash only when edge is first within the sequence.\n\t(cgraph_edge::set_call_stmt): Update handling of speculative calls.\n\t(symbol_table::create_edge): Do not set target_prob.\n\t(cgraph_edge::remove_caller): Watch for speculative calls when updating\n\tthe call site hash.\n\t(cgraph_edge::make_speculative): Drop target_prob parameter.\n\t(cgraph_edge::speculative_call_info): Remove.\n\t(cgraph_edge::first_speculative_call_target): New member function.\n\t(update_call_stmt_hash_for_removing_direct_edge): New function.\n\t(cgraph_edge::resolve_speculation): Rewrite to new API.\n\t(cgraph_edge::speculative_call_for_target): New member function.\n\t(cgraph_edge::make_direct): Rewrite to new API; fix handling of\n\tmultiple speculation targets.\n\t(cgraph_edge::redirect_call_stmt_to_callee): Likewise; fix updating\n\tof profile.\n\t(verify_speculative_call): Verify that targets form an interval.\n\t* cgraph.h (cgraph_edge::speculative_call_info): Remove.\n\t(cgraph_edge::first_speculative_call_target): New member function.\n\t(cgraph_edge::next_speculative_call_target): New member function.\n\t(cgraph_edge::speculative_call_target_ref): New member function.\n\t(cgraph_edge;:speculative_call_indirect_edge): New member funtion.\n\t(cgraph_edge): Remove target_prob.\n\t* cgraphclones.c (cgraph_node::set_call_stmt_including_clones):\n\tFix handling of speculative calls.\n\t* ipa-devirt.c (ipa_devirt): Fix handling of speculative cals.\n\t* ipa-fnsummary.c (analyze_function_body): Likewise.\n\t* ipa-inline.c (speculation_useful_p): Use new speculative call API.\n\t* ipa-profile.c (dump_histogram): Fix formating.\n\t(ipa_profile_generate_summary): Watch for overflows.\n\t(ipa_profile): Do not require probablity to be 1/2; update to new API.\n\t* ipa-prop.c (ipa_make_edge_direct_to_target): Update to new API.\n\t(update_indirect_edges_after_inlining): Update to new API.\n\t* ipa-utils.c (ipa_merge_profiles): Rewrite merging of speculative call\n\tprofiles.\n\t* profile-count.h: (profile_probability::adjusted): New.\n\t* tree-inline.c (copy_bb): Update to new speculative call API; fix\n\tupdating of profile.\n\t* value-prof.c (gimple_ic_transform): Rename to ...\n\t(dump_ic_profile): ... this one; update dumping.\n\t(stream_in_histogram_value): Fix formating.\n\t(gimple_value_profile_transformations): Update.\n\ngcc/testsuite/ChangeLog:\n\n2020-01-28  Jan Hubicka  <hubicka@ucw.cz>\n\n\t* g++.dg/tree-prof/indir-call-prof.C: Update template.\n\t* gcc.dg/tree-prof/crossmodule-indircall-1.c: Add more targets.\n\t* gcc.dg/tree-prof/crossmodule-indircall-1a.c: Add more targets.\n\t* gcc.dg/tree-prof/indir-call-prof.c: Update template.", "tree": {"sha": "619e93b2f818f2880d9e3857207aec25c00f7899", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/619e93b2f818f2880d9e3857207aec25c00f7899"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/40d240315a6e5ff2010769bfa1c19264217b5f1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40d240315a6e5ff2010769bfa1c19264217b5f1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40d240315a6e5ff2010769bfa1c19264217b5f1c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40d240315a6e5ff2010769bfa1c19264217b5f1c/comments", "author": null, "committer": null, "parents": [{"sha": "14e320dbc10cc796fd7ca0b6c44e0c9ac0901da9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14e320dbc10cc796fd7ca0b6c44e0c9ac0901da9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14e320dbc10cc796fd7ca0b6c44e0c9ac0901da9"}], "stats": {"total": 53, "additions": 53, "deletions": 0}, "files": [{"sha": "d124c4f43e81873071bda2bcd44a4d4fd7549f00", "filename": "gcc/ChangeLog", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40d240315a6e5ff2010769bfa1c19264217b5f1c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40d240315a6e5ff2010769bfa1c19264217b5f1c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=40d240315a6e5ff2010769bfa1c19264217b5f1c", "patch": "@@ -1,3 +1,49 @@\n+2020-01-28  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\tPR lto/93318\t\n+\t* cgraph.c (cgraph_add_edge_to_call_site_hash): Update call site\n+\thash only when edge is first within the sequence.\n+\t(cgraph_edge::set_call_stmt): Update handling of speculative calls.\n+\t(symbol_table::create_edge): Do not set target_prob.\n+\t(cgraph_edge::remove_caller): Watch for speculative calls when updating\n+\tthe call site hash.\n+\t(cgraph_edge::make_speculative): Drop target_prob parameter.\n+\t(cgraph_edge::speculative_call_info): Remove.\n+\t(cgraph_edge::first_speculative_call_target): New member function.\n+\t(update_call_stmt_hash_for_removing_direct_edge): New function.\n+\t(cgraph_edge::resolve_speculation): Rewrite to new API.\n+\t(cgraph_edge::speculative_call_for_target): New member function.\n+\t(cgraph_edge::make_direct): Rewrite to new API; fix handling of\n+\tmultiple speculation targets.\n+\t(cgraph_edge::redirect_call_stmt_to_callee): Likewise; fix updating\n+\tof profile.\n+\t(verify_speculative_call): Verify that targets form an interval.\n+\t* cgraph.h (cgraph_edge::speculative_call_info): Remove.\n+\t(cgraph_edge::first_speculative_call_target): New member function.\n+\t(cgraph_edge::next_speculative_call_target): New member function.\n+\t(cgraph_edge::speculative_call_target_ref): New member function.\n+\t(cgraph_edge;:speculative_call_indirect_edge): New member funtion.\n+\t(cgraph_edge): Remove target_prob.\n+\t* cgraphclones.c (cgraph_node::set_call_stmt_including_clones):\n+\tFix handling of speculative calls.\n+\t* ipa-devirt.c (ipa_devirt): Fix handling of speculative cals.\n+\t* ipa-fnsummary.c (analyze_function_body): Likewise.\n+\t* ipa-inline.c (speculation_useful_p): Use new speculative call API.\n+\t* ipa-profile.c (dump_histogram): Fix formating.\n+\t(ipa_profile_generate_summary): Watch for overflows.\n+\t(ipa_profile): Do not require probablity to be 1/2; update to new API.\n+\t* ipa-prop.c (ipa_make_edge_direct_to_target): Update to new API.\n+\t(update_indirect_edges_after_inlining): Update to new API.\n+\t* ipa-utils.c (ipa_merge_profiles): Rewrite merging of speculative call\n+\tprofiles.\n+\t* profile-count.h: (profile_probability::adjusted): New.\n+\t* tree-inline.c (copy_bb): Update to new speculative call API; fix\n+\tupdating of profile.\n+\t* value-prof.c (gimple_ic_transform): Rename to ...\n+\t(dump_ic_profile): ... this one; update dumping.\n+\t(stream_in_histogram_value): Fix formating.\n+\t(gimple_value_profile_transformations): Update.\n+\n 2020-01-28  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/91461"}, {"sha": "8610164c77b7109064a21858e2bd5ae2e00f46af", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40d240315a6e5ff2010769bfa1c19264217b5f1c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40d240315a6e5ff2010769bfa1c19264217b5f1c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=40d240315a6e5ff2010769bfa1c19264217b5f1c", "patch": "@@ -1,3 +1,10 @@\n+2020-01-28  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* g++.dg/tree-prof/indir-call-prof.C: Update template.\n+\t* gcc.dg/tree-prof/crossmodule-indircall-1.c: Add more targets.\n+\t* gcc.dg/tree-prof/crossmodule-indircall-1a.c: Add more targets.\n+\t* gcc.dg/tree-prof/indir-call-prof.c: Update template.\n+\n 2020-01-28  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/91461"}]}