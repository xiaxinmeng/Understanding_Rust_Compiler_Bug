{"sha": "bcfc2227c556f2801a657ce3007374732baa8333", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmNmYzIyMjdjNTU2ZjI4MDFhNjU3Y2UzMDA3Mzc0NzMyYmFhODMzMw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-01-19T14:14:54Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-01-19T18:56:22Z"}, "message": "PR c++/33799 - destroy return value, take 2.\n\nThis patch differs from the reverted patch for 33799 in that it adds the\nCLEANUP_STMT for the return value at the end of the function, and only if\nwe've seen a cleanup that might throw, so it should not affect most C++11\ncode.\n\n\t* cp-tree.h (current_retval_sentinel): New macro.\n\t(struct language_function): Add throwing_cleanup bitfield.\n\t* decl.c (cxx_maybe_build_cleanup): Set it.\n\t* except.c (maybe_set_retval_sentinel)\n\t(maybe_splice_retval_cleanup): New functions.\n\t* parser.c (cp_parser_compound_statement): Call\n\tmaybe_splice_retval_cleanup.\n\t* typeck.c (check_return_expr): Call maybe_set_retval_sentinel.", "tree": {"sha": "dc5c76be5ccee189500336763b3b157b7942ac47", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dc5c76be5ccee189500336763b3b157b7942ac47"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bcfc2227c556f2801a657ce3007374732baa8333", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcfc2227c556f2801a657ce3007374732baa8333", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bcfc2227c556f2801a657ce3007374732baa8333", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcfc2227c556f2801a657ce3007374732baa8333/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "303484a73541ea7f41dff0238157924e49c255ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/303484a73541ea7f41dff0238157924e49c255ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/303484a73541ea7f41dff0238157924e49c255ff"}], "stats": {"total": 123, "additions": 122, "deletions": 1}, "files": [{"sha": "ef8048260a313525c3489f6b5b7b4cbc85f716bb", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcfc2227c556f2801a657ce3007374732baa8333/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcfc2227c556f2801a657ce3007374732baa8333/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=bcfc2227c556f2801a657ce3007374732baa8333", "patch": "@@ -1,5 +1,15 @@\n 2020-01-19  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/33799 - destroy return value, take 2.\n+\t* cp-tree.h (current_retval_sentinel): New macro.\n+\t(struct language_function): Add throwing_cleanup bitfield.\n+\t* decl.c (cxx_maybe_build_cleanup): Set it.\n+\t* except.c (maybe_set_retval_sentinel)\n+\t(maybe_splice_retval_cleanup): New functions.\n+\t* parser.c (cp_parser_compound_statement): Call\n+\tmaybe_splice_retval_cleanup.\n+\t* typeck.c (check_return_expr): Call maybe_set_retval_sentinel.\n+\n \t* parser.c (cp_parser_lambda_body): Use cp_parser_function_body.\n \n 2020-01-18  Jakub Jelinek  <jakub@redhat.com>"}, {"sha": "890d5a2735090d30d283c50172aee0817a8d61e0", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcfc2227c556f2801a657ce3007374732baa8333/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcfc2227c556f2801a657ce3007374732baa8333/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=bcfc2227c556f2801a657ce3007374732baa8333", "patch": "@@ -1904,6 +1904,7 @@ struct GTY(()) language_function {\n   BOOL_BITFIELD can_throw : 1;\n \n   BOOL_BITFIELD invalid_constexpr : 1;\n+  BOOL_BITFIELD throwing_cleanup : 1;\n \n   hash_table<named_label_hash> *x_named_labels;\n \n@@ -1954,6 +1955,13 @@ struct GTY(()) language_function {\n \n #define current_vtt_parm cp_function_chain->x_vtt_parm\n \n+/* A boolean flag to control whether we need to clean up the return value if a\n+   local destructor throws.  Only used in functions that return by value a\n+   class with a destructor.  Which 'tors don't, so we can use the same\n+   field as current_vtt_parm.  */\n+\n+#define current_retval_sentinel current_vtt_parm\n+\n /* Set to 0 at beginning of a function definition, set to 1 if\n    a return statement that specifies a return value is seen.  */\n \n@@ -6686,6 +6694,9 @@ extern tree begin_eh_spec_block\t\t\t(void);\n extern void finish_eh_spec_block\t\t(tree, tree);\n extern tree build_eh_type_type\t\t\t(tree);\n extern tree cp_protect_cleanup_actions\t\t(void);\n+extern void maybe_splice_retval_cleanup\t\t(tree);\n+extern tree maybe_set_retval_sentinel\t\t(void);\n+\n extern tree template_parms_to_args\t\t(tree);\n extern tree template_parms_level_to_args\t(tree);\n extern tree generic_targs_for\t\t\t(tree);"}, {"sha": "28a79029d921e342056fafdbb748c9abf1ec8708", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcfc2227c556f2801a657ce3007374732baa8333/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcfc2227c556f2801a657ce3007374732baa8333/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=bcfc2227c556f2801a657ce3007374732baa8333", "patch": "@@ -17402,6 +17402,9 @@ cxx_maybe_build_cleanup (tree decl, tsubst_flags_t complain)\n       && !mark_used (decl, complain) && !(complain & tf_error))\n     return error_mark_node;\n \n+  if (cleanup && cfun && !expr_noexcept_p (cleanup, tf_none))\n+    cp_function_chain->throwing_cleanup = true;\n+\n   return cleanup;\n }\n "}, {"sha": "0b40234e228bb065ecba4cd946a07390bb7f032a", "filename": "gcc/cp/except.c", "status": "modified", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcfc2227c556f2801a657ce3007374732baa8333/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcfc2227c556f2801a657ce3007374732baa8333/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=bcfc2227c556f2801a657ce3007374732baa8333", "patch": "@@ -1325,4 +1325,76 @@ build_noexcept_spec (tree expr, tsubst_flags_t complain)\n     }\n }\n \n+/* If the current function has a cleanup that might throw, and the return value\n+   has a non-trivial destructor, return a MODIFY_EXPR to set\n+   current_retval_sentinel so that we know that the return value needs to be\n+   destroyed on throw.  Otherwise, returns NULL_TREE.  */\n+\n+tree\n+maybe_set_retval_sentinel ()\n+{\n+  if (processing_template_decl)\n+    return NULL_TREE;\n+  tree retval = DECL_RESULT (current_function_decl);\n+  if (!TYPE_HAS_NONTRIVIAL_DESTRUCTOR (TREE_TYPE (retval)))\n+    return NULL_TREE;\n+  if (!cp_function_chain->throwing_cleanup)\n+    return NULL_TREE;\n+\n+  if (!current_retval_sentinel)\n+    {\n+      /* Just create the temporary now, maybe_splice_retval_cleanup\n+\t will do the rest.  */\n+      current_retval_sentinel = create_temporary_var (boolean_type_node);\n+      DECL_INITIAL (current_retval_sentinel) = boolean_false_node;\n+      pushdecl_outermost_localscope (current_retval_sentinel);\n+    }\n+\n+  return build2 (MODIFY_EXPR, boolean_type_node,\n+\t\t current_retval_sentinel, boolean_true_node);\n+}\n+\n+/* COMPOUND_STMT is the STATEMENT_LIST for the current function body.  If\n+   current_retval_sentinel was set in this function, wrap the body in a\n+   CLEANUP_STMT to destroy the return value on throw.  */\n+\n+void\n+maybe_splice_retval_cleanup (tree compound_stmt)\n+{\n+  /* If need_retval_cleanup set current_retval_sentinel, wrap the function body\n+     in a CLEANUP_STMT to handle destroying the return value.  */\n+  if (!DECL_CONSTRUCTOR_P (current_function_decl)\n+      && !DECL_DESTRUCTOR_P (current_function_decl)\n+      && current_retval_sentinel)\n+    {\n+      location_t loc = DECL_SOURCE_LOCATION (current_function_decl);\n+\n+      /* Add a DECL_EXPR for current_retval_sentinel.  */\n+      tree_stmt_iterator iter = tsi_start (compound_stmt);\n+      tree retval = DECL_RESULT (current_function_decl);\n+      tree decl_expr = build_stmt (loc, DECL_EXPR, current_retval_sentinel);\n+      tsi_link_before (&iter, decl_expr, TSI_SAME_STMT);\n+\n+      /* Skip past other decls, they can't contain a return.  */\n+      while (TREE_CODE (tsi_stmt (iter)) == DECL_EXPR)\n+\ttsi_next (&iter);\n+      gcc_assert (!tsi_end_p (iter));\n+\n+      /* Wrap the rest of the STATEMENT_LIST in a CLEANUP_STMT.  */\n+      tree stmts = NULL_TREE;\n+      while (!tsi_end_p (iter))\n+\t{\n+\t  append_to_statement_list_force (tsi_stmt (iter), &stmts);\n+\t  tsi_delink (&iter);\n+\t}\n+      tree dtor = build_cleanup (retval);\n+      tree cond = build3 (COND_EXPR, void_type_node, current_retval_sentinel,\n+\t\t\t  dtor, void_node);\n+      tree cleanup = build_stmt (loc, CLEANUP_STMT,\n+\t\t\t\t stmts, cond, retval);\n+      CLEANUP_EH_ONLY (cleanup) = true;\n+      append_to_statement_list_force (cleanup, &compound_stmt);\n+    }\n+}\n+\n #include \"gt-cp-except.h\""}, {"sha": "caafbefda8e63013367ddad23942c06e25276f80", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcfc2227c556f2801a657ce3007374732baa8333/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcfc2227c556f2801a657ce3007374732baa8333/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=bcfc2227c556f2801a657ce3007374732baa8333", "patch": "@@ -11716,6 +11716,10 @@ cp_parser_compound_statement (cp_parser *parser, tree in_statement_expr,\n     cp_parser_label_declaration (parser);\n   /* Parse an (optional) statement-seq.  */\n   cp_parser_statement_seq_opt (parser, in_statement_expr);\n+\n+  if (function_body)\n+    maybe_splice_retval_cleanup (compound_stmt);\n+\n   /* Finish the compound-statement.  */\n   finish_compound_stmt (compound_stmt);\n   /* Consume the `}'.  */"}, {"sha": "5964c34272e473d74a727aa207df516c694e8e9a", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcfc2227c556f2801a657ce3007374732baa8333/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcfc2227c556f2801a657ce3007374732baa8333/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=bcfc2227c556f2801a657ce3007374732baa8333", "patch": "@@ -10090,6 +10090,9 @@ check_return_expr (tree retval, bool *no_warning)\n   if (retval && retval != result)\n     retval = build2 (INIT_EXPR, TREE_TYPE (result), result, retval);\n \n+  if (tree set = maybe_set_retval_sentinel ())\n+    retval = build2 (COMPOUND_EXPR, void_type_node, retval, set);\n+\n   return retval;\n }\n "}, {"sha": "5ef2f1dee8539340c4c1cbeddb4542044e3a3f12", "filename": "gcc/testsuite/g++.dg/eh/return1.C", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcfc2227c556f2801a657ce3007374732baa8333/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Freturn1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcfc2227c556f2801a657ce3007374732baa8333/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Freturn1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Freturn1.C?ref=bcfc2227c556f2801a657ce3007374732baa8333", "patch": "@@ -1,5 +1,5 @@\n // PR c++/33799\n-// { dg-do run { xfail *-*-* } }\n+// { dg-do run }\n \n extern \"C\" void abort();\n \n@@ -30,11 +30,29 @@ X f()\n   return X(false);\n }\n \n+X g()\n+{\n+  return X(true),X(false);\n+}\n+\n+void h()\n+{\n+#if __cplusplus >= 201103L\n+  []{ return X(true),X(false); }();\n+#endif\n+}\n+\n int main()\n {\n   try { f(); }\n   catch (...) {}\n \n+  try { g(); }\n+  catch (...) {}\n+\n+  try { h(); }\n+  catch (...) {}\n+\n   if (c != d)\n     throw;\n }"}]}