{"sha": "f35613b29cb15939a2a2f25b0275f7ee6c00a200", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjM1NjEzYjI5Y2IxNTkzOWEyYTJmMjViMDI3NWY3ZWU2YzAwYTIwMA==", "commit": {"author": {"name": "Andrew Pinski", "email": "apinski@cavium.com", "date": "2012-09-03T20:31:52Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2012-09-03T20:31:52Z"}, "message": "re PR tree-optimization/53395 (The LAPACK functions i(d|s)amax are more than two times slower after revision 187183)\n\n2012-09-03  Andrew Pinski  <apinski@cavium.com>\n\n\tPR tree-opt/53395\n\t* tree-if-conv.c (constant_or_ssa_name): New function.\n\t(fold_build_cond_expr): New function.\n\t(predicate_scalar_phi): Use fold_build_cond_expr instead of build3.\n\t(predicate_mem_writes): Likewise.\n\nFrom-SVN: r190904", "tree": {"sha": "5fbe5db82a98ffa2d46d0d28b36eb77d91279460", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5fbe5db82a98ffa2d46d0d28b36eb77d91279460"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f35613b29cb15939a2a2f25b0275f7ee6c00a200", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f35613b29cb15939a2a2f25b0275f7ee6c00a200", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f35613b29cb15939a2a2f25b0275f7ee6c00a200", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f35613b29cb15939a2a2f25b0275f7ee6c00a200/comments", "author": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "aa369472a27746c266746fac3f3568b173654a95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa369472a27746c266746fac3f3568b173654a95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa369472a27746c266746fac3f3568b173654a95"}], "stats": {"total": 73, "additions": 70, "deletions": 3}, "files": [{"sha": "eab8156531a7114b9f38d198abede8d697693802", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f35613b29cb15939a2a2f25b0275f7ee6c00a200/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f35613b29cb15939a2a2f25b0275f7ee6c00a200/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f35613b29cb15939a2a2f25b0275f7ee6c00a200", "patch": "@@ -1,3 +1,11 @@\n+2012-09-03  Andrew Pinski  <apinski@cavium.com>\n+\n+\tPR tree-opt/53395\n+\t* tree-if-conv.c (constant_or_ssa_name): New function.\n+\t(fold_build_cond_expr): New function.\n+\t(predicate_scalar_phi): Use fold_build_cond_expr instead of build3.\n+\t(predicate_mem_writes): Likewise.\n+\n 2012-09-03  Marc Glisse  <marc.glisse@inria.fr>\n \n \t* fold-const.c (fold_ternary_loc): Constant-propagate after"}, {"sha": "e9f65adddbd53d8f8aa3a01318e7141c3bab68f4", "filename": "gcc/tree-if-conv.c", "status": "modified", "additions": 62, "deletions": 3, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f35613b29cb15939a2a2f25b0275f7ee6c00a200/gcc%2Ftree-if-conv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f35613b29cb15939a2a2f25b0275f7ee6c00a200/gcc%2Ftree-if-conv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-if-conv.c?ref=f35613b29cb15939a2a2f25b0275f7ee6c00a200", "patch": "@@ -307,6 +307,65 @@ fold_or_predicates (location_t loc, tree c1, tree c2)\n   return fold_build2_loc (loc, TRUTH_OR_EXPR, boolean_type_node, c1, c2);\n }\n \n+/* Returns true if N is either a constant or a SSA_NAME.  */\n+\n+static bool\n+constant_or_ssa_name (tree n)\n+{\n+  switch (TREE_CODE (n))\n+    {\n+      case SSA_NAME:\n+      case INTEGER_CST:\n+      case REAL_CST:\n+      case COMPLEX_CST:\n+      case VECTOR_CST:\n+\treturn true;\n+      default:\n+\treturn false;\n+    }\n+}\n+\n+/* Returns either a COND_EXPR or the folded expression if the folded\n+   expression is a MIN_EXPR, a MAX_EXPR, an ABS_EXPR,\n+   a constant or a SSA_NAME. */\n+\n+static tree\n+fold_build_cond_expr (tree type, tree cond, tree rhs, tree lhs)\n+{\n+  tree rhs1, lhs1, cond_expr;\n+  cond_expr = fold_ternary (COND_EXPR, type, cond,\n+\t\t\t    rhs, lhs);\n+\n+  if (cond_expr == NULL_TREE)\n+    return build3 (COND_EXPR, type, cond, rhs, lhs);\n+\n+  STRIP_USELESS_TYPE_CONVERSION (cond_expr);\n+\n+  if (constant_or_ssa_name (cond_expr))\n+    return cond_expr;\n+\n+  if (TREE_CODE (cond_expr) == ABS_EXPR)\n+    {\n+      rhs1 = TREE_OPERAND (cond_expr, 1);\n+      STRIP_USELESS_TYPE_CONVERSION (rhs1);\n+      if (constant_or_ssa_name (rhs1))\n+\treturn build1 (ABS_EXPR, type, rhs1);\n+    }\n+\n+  if (TREE_CODE (cond_expr) == MIN_EXPR\n+      || TREE_CODE (cond_expr) == MAX_EXPR)\n+    {\n+      lhs1 = TREE_OPERAND (cond_expr, 0);\n+      STRIP_USELESS_TYPE_CONVERSION (lhs1);\n+      rhs1 = TREE_OPERAND (cond_expr, 1);\n+      STRIP_USELESS_TYPE_CONVERSION (rhs1);\n+      if (constant_or_ssa_name (rhs1)\n+\t  && constant_or_ssa_name (lhs1))\n+\treturn build2 (TREE_CODE (cond_expr), type, lhs1, rhs1);\n+    }\n+  return build3 (COND_EXPR, type, cond, rhs, lhs);\n+}\n+\n /* Add condition NC to the predicate list of basic block BB.  */\n \n static inline void\n@@ -1293,8 +1352,8 @@ predicate_scalar_phi (gimple phi, tree cond,\n \t\t\t   || bb_postdominates_preds (bb));\n \n       /* Build new RHS using selected condition and arguments.  */\n-      rhs = build3 (COND_EXPR, TREE_TYPE (res),\n-\t\t    unshare_expr (cond), arg_0, arg_1);\n+      rhs = fold_build_cond_expr (TREE_TYPE (res), unshare_expr (cond),\n+\t\t\t\t  arg_0, arg_1);\n     }\n \n   new_stmt = gimple_build_assign (res, rhs);\n@@ -1554,7 +1613,7 @@ predicate_mem_writes (loop_p loop)\n \t    cond = force_gimple_operand_gsi_1 (&gsi, unshare_expr (cond),\n \t\t\t\t\t       is_gimple_condexpr, NULL_TREE,\n \t\t\t\t\t       true, GSI_SAME_STMT);\n-\t    rhs = build3 (COND_EXPR, type, unshare_expr (cond), rhs, lhs);\n+\t    rhs = fold_build_cond_expr (type, unshare_expr (cond), rhs, lhs);\n \t    gimple_assign_set_rhs1 (stmt, ifc_temp_var (type, rhs, &gsi));\n \t    update_stmt (stmt);\n \t  }"}]}