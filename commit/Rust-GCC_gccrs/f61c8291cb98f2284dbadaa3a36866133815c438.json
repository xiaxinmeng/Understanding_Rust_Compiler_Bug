{"sha": "f61c8291cb98f2284dbadaa3a36866133815c438", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjYxYzgyOTFjYjk4ZjIyODRkYmFkYWEzYTM2ODY2MTMzODE1YzQzOA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2010-09-23T22:06:18Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2010-09-23T22:06:18Z"}, "message": "tree-flow.h (execute_update_addresses_taken): Adjust.\n\n\t* tree-flow.h (execute_update_addresses_taken): Adjust.\n\t* tree-ssa.c (maybe_optimize_var): Tweak comment and dump messages.\n\t(execute_update_addresses_taken): Remove parameter and OPTIMIZE test.\n\t* passes.c (execute_function_todo): Adjust calls to above function.\n\nFrom-SVN: r164571", "tree": {"sha": "c7aca0553f8807b3027757e66ed3dad50f7880a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c7aca0553f8807b3027757e66ed3dad50f7880a2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f61c8291cb98f2284dbadaa3a36866133815c438", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f61c8291cb98f2284dbadaa3a36866133815c438", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f61c8291cb98f2284dbadaa3a36866133815c438", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f61c8291cb98f2284dbadaa3a36866133815c438/comments", "author": null, "committer": null, "parents": [{"sha": "962b8a0e7e609d75dcb3e9b28bc381a4976695a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/962b8a0e7e609d75dcb3e9b28bc381a4976695a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/962b8a0e7e609d75dcb3e9b28bc381a4976695a9"}], "stats": {"total": 54, "additions": 28, "deletions": 26}, "files": [{"sha": "09b8a30e4b062cff93fe4b43d884d9546cd6241a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f61c8291cb98f2284dbadaa3a36866133815c438/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f61c8291cb98f2284dbadaa3a36866133815c438/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f61c8291cb98f2284dbadaa3a36866133815c438", "patch": "@@ -1,3 +1,10 @@\n+2010-09-23  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* tree-flow.h (execute_update_addresses_taken): Adjust.\n+\t* tree-ssa.c (maybe_optimize_var): Tweak comment and dump messages.\n+\t(execute_update_addresses_taken): Remove parameter and OPTIMIZE test.\n+\t* passes.c (execute_function_todo): Adjust calls to above function.\n+\n 2010-09-23  Anatoly Sokolov  <aesok@post.ru>\n \n \t* config/arm/arm.h (OUTPUT_ADDR_CONST_EXTRA): Remove."}, {"sha": "24bae5fcaf3237b9cf13fffb1103fadaecbe536c", "filename": "gcc/passes.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f61c8291cb98f2284dbadaa3a36866133815c438/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f61c8291cb98f2284dbadaa3a36866133815c438/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=f61c8291cb98f2284dbadaa3a36866133815c438", "patch": "@@ -1206,15 +1206,13 @@ execute_function_todo (void *data)\n       cfun->last_verified &= ~TODO_verify_ssa;\n     }\n \n-  if (flags & TODO_update_address_taken)\n-    execute_update_addresses_taken (true);\n-\n   if (flags & TODO_rebuild_alias)\n     {\n-      if (!(flags & TODO_update_address_taken))\n-\texecute_update_addresses_taken (true);\n+      execute_update_addresses_taken ();\n       compute_may_aliases ();\n     }\n+  else if (optimize && (flags & TODO_update_address_taken))\n+    execute_update_addresses_taken ();\n \n   if (flags & TODO_remove_unused_locals)\n     remove_unused_locals ();"}, {"sha": "85ad5342df3f9624b70b9d20489201f072dafa6f", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f61c8291cb98f2284dbadaa3a36866133815c438/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f61c8291cb98f2284dbadaa3a36866133815c438/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=f61c8291cb98f2284dbadaa3a36866133815c438", "patch": "@@ -559,7 +559,7 @@ extern void delete_tree_ssa (void);\n extern bool ssa_undefined_value_p (tree);\n extern void warn_uninit (tree, const char *, void *);\n extern unsigned int warn_uninitialized_vars (bool);\n-extern void execute_update_addresses_taken (bool);\n+extern void execute_update_addresses_taken (void);\n \n /* Call-back function for walk_use_def_chains().  At each reaching\n    definition, a function with this prototype is called.  */"}, {"sha": "0b83b37e02f31e8913f064e7a59139cf999008aa", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 17, "deletions": 20, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f61c8291cb98f2284dbadaa3a36866133815c438/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f61c8291cb98f2284dbadaa3a36866133815c438/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=f61c8291cb98f2284dbadaa3a36866133815c438", "patch": "@@ -1885,9 +1885,9 @@ non_rewritable_mem_ref_base (tree ref)\n   return NULL_TREE;\n }\n \n-/* When possible, clear ADDRESSABLE bit or set the REGISTER bit\n-   and mark the variable VAR for conversion into SSA.  Returns true\n-   when updating stmts is required.  */\n+/* When possible, clear TREE_ADDRESSABLE bit or set DECL_GIMPLE_REG_P bit and\n+   mark the variable VAR for conversion into SSA.  Return true when updating\n+   stmts is required.  */\n \n static bool\n maybe_optimize_var (tree var, bitmap addresses_taken, bitmap not_reg_needs)\n@@ -1918,11 +1918,12 @@ maybe_optimize_var (tree var, bitmap addresses_taken, bitmap not_reg_needs)\n       update_vops = true;\n       if (dump_file)\n \t{\n-\t  fprintf (dump_file, \"No longer having address taken \");\n+\t  fprintf (dump_file, \"No longer having address taken: \");\n \t  print_generic_expr (dump_file, var, 0);\n \t  fprintf (dump_file, \"\\n\");\n \t}\n     }\n+\n   if (!DECL_GIMPLE_REG_P (var)\n       && !bitmap_bit_p (not_reg_needs, DECL_UID (var))\n       && (TREE_CODE (TREE_TYPE (var)) == COMPLEX_TYPE\n@@ -1935,7 +1936,7 @@ maybe_optimize_var (tree var, bitmap addresses_taken, bitmap not_reg_needs)\n       update_vops = true;\n       if (dump_file)\n \t{\n-\t  fprintf (dump_file, \"Decl is now a gimple register \");\n+\t  fprintf (dump_file, \"Now a gimple register: \");\n \t  print_generic_expr (dump_file, var, 0);\n \t  fprintf (dump_file, \"\\n\");\n \t}\n@@ -1947,14 +1948,14 @@ maybe_optimize_var (tree var, bitmap addresses_taken, bitmap not_reg_needs)\n /* Compute TREE_ADDRESSABLE and DECL_GIMPLE_REG_P for local variables.  */\n \n void\n-execute_update_addresses_taken (bool do_optimize)\n+execute_update_addresses_taken (void)\n {\n-  tree var;\n   gimple_stmt_iterator gsi;\n   basic_block bb;\n   bitmap addresses_taken = BITMAP_ALLOC (NULL);\n   bitmap not_reg_needs = BITMAP_ALLOC (NULL);\n   bool update_vops = false;\n+  tree var;\n   unsigned i;\n \n   /* Collect into ADDRESSES_TAKEN all variables whose address is taken within\n@@ -2047,20 +2048,16 @@ execute_update_addresses_taken (bool do_optimize)\n \t}\n     }\n \n-  /* When possible, clear ADDRESSABLE bit or set the REGISTER bit\n-     and mark variable for conversion into SSA.  */\n-  if (optimize && do_optimize)\n-    {\n-      /* We cannot iterate over all referenced vars as that can contain\n-\t unused vars from BLOCK trees which cause code generation\n-\t differences for -g vs. -g0.  */\n-      for (var = DECL_ARGUMENTS (cfun->decl); var; var = DECL_CHAIN (var))\n-\tupdate_vops |= maybe_optimize_var (var, addresses_taken, not_reg_needs);\n-      FOR_EACH_VEC_ELT (tree, cfun->local_decls, i, var)\n-\tupdate_vops |= maybe_optimize_var (var, addresses_taken, not_reg_needs);\n-    }\n+  /* We cannot iterate over all referenced vars because that can contain\n+     unused vars from BLOCK trees, which causes code generation differences\n+     for -g vs. -g0.  */\n+  for (var = DECL_ARGUMENTS (cfun->decl); var; var = DECL_CHAIN (var))\n+    update_vops |= maybe_optimize_var (var, addresses_taken, not_reg_needs);\n+\n+  FOR_EACH_VEC_ELT (tree, cfun->local_decls, i, var)\n+    update_vops |= maybe_optimize_var (var, addresses_taken, not_reg_needs);\n \n-  /* Operand caches needs to be recomputed for operands referencing the updated\n+  /* Operand caches need to be recomputed for operands referencing the updated\n      variables.  */\n   if (update_vops)\n     {"}]}