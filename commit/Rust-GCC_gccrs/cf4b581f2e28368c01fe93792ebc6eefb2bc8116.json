{"sha": "cf4b581f2e28368c01fe93792ebc6eefb2bc8116", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2Y0YjU4MWYyZTI4MzY4YzAxZmU5Mzc5MmViYzZlZWZiMmJjODExNg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-01-07T12:38:51Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-01-07T12:38:51Z"}, "message": "Fix build for systems without POSIX truncate\n\nOlder versions of newlib do not provide truncate so add a configure\ncheck for it, and provide a fallback definition.\n\nThere were also some missing exports in the linker script, which went\nunnoticed because there are no tests for some functions. A new link-only\ntest checks that every filesystem operation function is defined by the\nlibrary.\n\n\t* acinclude.m4 (GLIBCXX_CHECK_FILESYSTEM_DEPS): Check for truncate.\n\t* config.h.in: Regenerate.\n\t* config/abi/pre/gnu.ver: Order patterns for filesystem operations\n\talphabetically and add missing entries for copy_symlink,\n\thard_link_count, rename, and resize_file.\n\t* configure: Regenerate.\n\t* src/c++17/fs_ops.cc (resize_file): Remove #if so posix::truncate is\n\tused unconditionally.\n\t* src/filesystem/ops-common.h (__gnu_posix::truncate)\n\t[!_GLIBCXX_HAVE_TRUNCATE]: Provide fallback definition that only\n\tsupports truncating to zero length.\n\t* testsuite/27_io/filesystem/operations/all.cc: New test.\n\t* testsuite/27_io/filesystem/operations/resize_file.cc: New test.\n\nFrom-SVN: r267647", "tree": {"sha": "e97aa3a3f62308d35f617bfdfd0d7cc819e035dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e97aa3a3f62308d35f617bfdfd0d7cc819e035dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cf4b581f2e28368c01fe93792ebc6eefb2bc8116", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf4b581f2e28368c01fe93792ebc6eefb2bc8116", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf4b581f2e28368c01fe93792ebc6eefb2bc8116", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf4b581f2e28368c01fe93792ebc6eefb2bc8116/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4bf2aabe36633d75852313caafe7efab71d5ba7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4bf2aabe36633d75852313caafe7efab71d5ba7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4bf2aabe36633d75852313caafe7efab71d5ba7"}], "stats": {"total": 415, "additions": 391, "deletions": 24}, "files": [{"sha": "274cf3fe56a882c2a319d8172d16af6ff968c916", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf4b581f2e28368c01fe93792ebc6eefb2bc8116/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf4b581f2e28368c01fe93792ebc6eefb2bc8116/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=cf4b581f2e28368c01fe93792ebc6eefb2bc8116", "patch": "@@ -1,3 +1,19 @@\n+2019-01-07  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* acinclude.m4 (GLIBCXX_CHECK_FILESYSTEM_DEPS): Check for truncate.\n+\t* config.h.in: Regenerate.\n+\t* config/abi/pre/gnu.ver: Order patterns for filesystem operations\n+\talphabetically and add missing entries for copy_symlink,\n+\thard_link_count, rename, and resize_file.\n+\t* configure: Regenerate.\n+\t* src/c++17/fs_ops.cc (resize_file): Remove #if so posix::truncate is\n+\tused unconditionally.\n+\t* src/filesystem/ops-common.h (__gnu_posix::truncate)\n+\t[!_GLIBCXX_HAVE_TRUNCATE]: Provide fallback definition that only\n+\tsupports truncating to zero length.\n+\t* testsuite/27_io/filesystem/operations/all.cc: New test.\n+\t* testsuite/27_io/filesystem/operations/resize_file.cc: New test.\n+\n 2019-01-06  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/86756"}, {"sha": "8950e4c88727feb5c868cbed13b3e7ecc2021ddb", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf4b581f2e28368c01fe93792ebc6eefb2bc8116/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf4b581f2e28368c01fe93792ebc6eefb2bc8116/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=cf4b581f2e28368c01fe93792ebc6eefb2bc8116", "patch": "@@ -4589,6 +4589,19 @@ dnl\n       AC_DEFINE(HAVE_SYMLINK, 1, [Define if symlink is available in <unistd.h>.])\n     fi\n     AC_MSG_RESULT($glibcxx_cv_symlink)\n+dnl\n+    AC_MSG_CHECKING([for truncate])\n+    AC_CACHE_VAL(glibcxx_cv_truncate, [dnl\n+      GCC_TRY_COMPILE_OR_LINK(\n+        [#include <unistd.h>],\n+        [truncate(\"\", 99);],\n+        [glibcxx_cv_truncate=yes],\n+        [glibcxx_cv_truncate=no])\n+    ])\n+    if test $glibcxx_cv_truncate = yes; then\n+      AC_DEFINE(HAVE_TRUNCATE, 1, [Define if truncate is available in <unistd.h>.])\n+    fi\n+    AC_MSG_RESULT($glibcxx_cv_truncate)\n dnl\n     CXXFLAGS=\"$ac_save_CXXFLAGS\"\n     AC_LANG_RESTORE"}, {"sha": "225ef1bff9f3d8c3b7712f5d491353e50f6301db", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf4b581f2e28368c01fe93792ebc6eefb2bc8116/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf4b581f2e28368c01fe93792ebc6eefb2bc8116/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=cf4b581f2e28368c01fe93792ebc6eefb2bc8116", "patch": "@@ -511,6 +511,9 @@\n /* Define to 1 if the target supports thread-local storage. */\n #undef HAVE_TLS\n \n+/* Define if truncate is available in <unistd.h>. */\n+#undef HAVE_TRUNCATE\n+\n /* Define to 1 if you have the <uchar.h> header file. */\n #undef HAVE_UCHAR_H\n "}, {"sha": "02a6ec90375dad749c18cb7d331c6199e7000c96", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 24, "deletions": 20, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf4b581f2e28368c01fe93792ebc6eefb2bc8116/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf4b581f2e28368c01fe93792ebc6eefb2bc8116/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=cf4b581f2e28368c01fe93792ebc6eefb2bc8116", "patch": "@@ -2167,31 +2167,35 @@ GLIBCXX_3.4.26 {\n     _ZNSt10filesystem7__cxx114pathpLERKS1_;\n     _ZT[IV]NSt10filesystem7__cxx1116filesystem_errorE;\n \n-    _ZNSt10filesystem10equivalent*;\n-    _ZNSt10filesystem10remove_all*;\n-    _ZNSt10filesystem11permissions*;\n-    _ZNSt10filesystem12current_path*;\n-    _ZNSt10filesystem12read_symlink*;\n-    _ZNSt10filesystem14create_symlink*;\n-    _ZNSt10filesystem14symlink_status*;\n-    _ZNSt10filesystem15last_write_time*;\n-    _ZNSt10filesystem16create_directory*;\n-    _ZNSt10filesystem16create_hard_link*;\n-    _ZNSt10filesystem16weakly_canonical*;\n-    _ZNSt10filesystem18create_directories*;\n-    _ZNSt10filesystem19temp_directory_path*;\n-    _ZNSt10filesystem24create_directory_symlink*;\n-    _ZNSt10filesystem4copy*;\n-    _ZNSt10filesystem5space*;\n-    _ZNSt10filesystem6remove*;\n-    _ZNSt10filesystem6status*;\n     _ZNSt10filesystem8absolute*;\n-    _ZNSt10filesystem8is_empty*;\n-    _ZNSt10filesystem8relative*;\n     _ZNSt10filesystem9canonical*;\n+    _ZNSt10filesystem4copy*;\n     _ZNSt10filesystem9copy_file*;\n+    _ZNSt10filesystem12copy_symlink*;\n+    _ZNSt10filesystem18create_directories*;\n+    _ZNSt10filesystem16create_directory*;\n+    _ZNSt10filesystem24create_directory_symlink*;\n+    _ZNSt10filesystem16create_hard_link*;\n+    _ZNSt10filesystem14create_symlink*;\n+    _ZNSt10filesystem12current_path*;\n+    _ZNSt10filesystem10equivalent*;\n     _ZNSt10filesystem9file_size*;\n+    _ZNSt10filesystem15hard_link_count*;\n+    _ZNSt10filesystem8is_empty*;\n+    _ZNSt10filesystem15last_write_time*;\n+    _ZNSt10filesystem11permissions*;\n     _ZNSt10filesystem9proximate*;\n+    _ZNSt10filesystem12read_symlink*;\n+    _ZNSt10filesystem8relative*;\n+    _ZNSt10filesystem6remove*;\n+    _ZNSt10filesystem10remove_all*;\n+    _ZNSt10filesystem6rename*;\n+    _ZNSt10filesystem11resize_file*;\n+    _ZNSt10filesystem5space*;\n+    _ZNSt10filesystem6status*;\n+    _ZNSt10filesystem14symlink_status*;\n+    _ZNSt10filesystem19temp_directory_path*;\n+    _ZNSt10filesystem16weakly_canonical*;\n \n     _ZNKSt10filesystem18directory_iteratordeEv;\n     _ZNKSt10filesystem28recursive_directory_iterator5depthEv;"}, {"sha": "15848e364ab26aa874b18d76b5aaf6705ddae5dc", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf4b581f2e28368c01fe93792ebc6eefb2bc8116/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf4b581f2e28368c01fe93792ebc6eefb2bc8116/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=cf4b581f2e28368c01fe93792ebc6eefb2bc8116", "patch": "@@ -81038,6 +81038,62 @@ $as_echo \"#define HAVE_SYMLINK 1\" >>confdefs.h\n     fi\n     { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $glibcxx_cv_symlink\" >&5\n $as_echo \"$glibcxx_cv_symlink\" >&6; }\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for truncate\" >&5\n+$as_echo_n \"checking for truncate... \" >&6; }\n+    if ${glibcxx_cv_truncate+:} false; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+        if test x$gcc_no_link = xyes; then\n+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+#include <unistd.h>\n+int\n+main ()\n+{\n+truncate(\"\", 99);\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_cxx_try_compile \"$LINENO\"; then :\n+  glibcxx_cv_truncate=yes\n+else\n+  glibcxx_cv_truncate=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+else\n+  if test x$gcc_no_link = xyes; then\n+  as_fn_error $? \"Link tests are not allowed after GCC_NO_EXECUTABLES.\" \"$LINENO\" 5\n+fi\n+cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+#include <unistd.h>\n+int\n+main ()\n+{\n+truncate(\"\", 99);\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_cxx_try_link \"$LINENO\"; then :\n+  glibcxx_cv_truncate=yes\n+else\n+  glibcxx_cv_truncate=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext \\\n+    conftest$ac_exeext conftest.$ac_ext\n+fi\n+\n+fi\n+\n+    if test $glibcxx_cv_truncate = yes; then\n+\n+$as_echo \"#define HAVE_TRUNCATE 1\" >>confdefs.h\n+\n+    fi\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $glibcxx_cv_truncate\" >&5\n+$as_echo \"$glibcxx_cv_truncate\" >&6; }\n     CXXFLAGS=\"$ac_save_CXXFLAGS\"\n     ac_ext=c\n ac_cpp='$CPP $CPPFLAGS'"}, {"sha": "edd9315980bc95c77cfe9de38f61bcb028fde79a", "filename": "libstdc++-v3/src/c++17/fs_ops.cc", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf4b581f2e28368c01fe93792ebc6eefb2bc8116/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffs_ops.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf4b581f2e28368c01fe93792ebc6eefb2bc8116/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffs_ops.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffs_ops.cc?ref=cf4b581f2e28368c01fe93792ebc6eefb2bc8116", "patch": "@@ -1268,16 +1268,12 @@ fs::resize_file(const path& p, uintmax_t size)\n void\n fs::resize_file(const path& p, uintmax_t size, error_code& ec) noexcept\n {\n-#ifdef _GLIBCXX_HAVE_UNISTD_H\n   if (size > static_cast<uintmax_t>(std::numeric_limits<off_t>::max()))\n     ec.assign(EINVAL, std::generic_category());\n   else if (posix::truncate(p.c_str(), size))\n     ec.assign(errno, std::generic_category());\n   else\n     ec.clear();\n-#else\n-  ec = std::make_error_code(std::errc::not_supported);\n-#endif\n }\n \n "}, {"sha": "55e482ff8f28c905a8a1454d75241e76c8e742a7", "filename": "libstdc++-v3/src/filesystem/ops-common.h", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf4b581f2e28368c01fe93792ebc6eefb2bc8116/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fops-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf4b581f2e28368c01fe93792ebc6eefb2bc8116/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fops-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fops-common.h?ref=cf4b581f2e28368c01fe93792ebc6eefb2bc8116", "patch": "@@ -29,6 +29,9 @@\n \n #ifdef _GLIBCXX_HAVE_UNISTD_H\n # include <unistd.h>\n+# ifdef _GLIBCXX_HAVE_FCNTL_H\n+#  include <fcntl.h>  // AT_FDCWD, O_TRUNC etc.\n+# endif\n # if defined(_GLIBCXX_HAVE_SYS_STAT_H) && defined(_GLIBCXX_HAVE_SYS_TYPES_H)\n #  include <sys/types.h>\n #  include <sys/stat.h>\n@@ -139,7 +142,23 @@ namespace __gnu_posix\n   using ::utime;\n # endif\n   using ::rename;\n+# ifdef _GLIBCXX_HAVE_TRUNCATE\n   using ::truncate;\n+# else\n+  inline int truncate(const char* path, off_t length)\n+  {\n+    if (length == 0)\n+      {\n+\tconst int fd = ::open(path, O_WRONLY|O_TRUNC);\n+\tif (fd == -1)\n+\t  return fd;\n+\t::close(fd);\n+\treturn 0;\n+      }\n+    errno = ENOTSUP;\n+    return -1;\n+  }\n+# endif\n   using char_type = char;\n #else // ! _GLIBCXX_FILESYSTEM_IS_WINDOWS && ! _GLIBCXX_HAVE_UNISTD_H\n   inline int open(const char*, int, ...) { errno = ENOTSUP; return -1; }"}, {"sha": "c9f34f4a7af13c4254363091beedfef6ea303ba2", "filename": "libstdc++-v3/testsuite/27_io/filesystem/operations/all.cc", "status": "added", "additions": 188, "deletions": 0, "changes": 188, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf4b581f2e28368c01fe93792ebc6eefb2bc8116/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fall.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf4b581f2e28368c01fe93792ebc6eefb2bc8116/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fall.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fall.cc?ref=cf4b581f2e28368c01fe93792ebc6eefb2bc8116", "patch": "@@ -0,0 +1,188 @@\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do run { target c++17 } }\n+\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17 -fno-inline\" }\n+// { dg-do link { target c++17 } }\n+\n+// C++17 30.10.15 Filesystem operation functions [fs.op.funcs]\n+\n+#include <filesystem>\n+\n+// Link-only test to ensure all operation functions are exported from the lib.\n+\n+int\n+main()\n+{\n+  const std::filesystem::path p;\n+  std::filesystem::path p2;\n+  const std::filesystem::copy_options copyopts{};\n+  const std::filesystem::file_status st{};\n+  std::filesystem::file_status st2;\n+  const std::filesystem::file_time_type t;\n+  std::filesystem::file_time_type t2;\n+  const std::filesystem::perms perms{};\n+  const std::filesystem::perm_options permopts{};\n+  std::filesystem::space_info sp;\n+  std::error_code ec;\n+  bool b;\n+  std::uintmax_t size;\n+\n+  std::filesystem::absolute(p);\n+  std::filesystem::absolute(p, ec);\n+\n+  std::filesystem::canonical(p);\n+  std::filesystem::canonical(p, ec);\n+\n+  std::filesystem::copy(p, p);\n+  std::filesystem::copy(p, p, ec);\n+  std::filesystem::copy(p, p, copyopts);\n+  std::filesystem::copy(p, p, copyopts, ec);\n+\n+  std::filesystem::copy_file(p, p);\n+  std::filesystem::copy_file(p, p, ec);\n+  std::filesystem::copy_file(p, p, copyopts);\n+  std::filesystem::copy_file(p, p, copyopts, ec);\n+\n+  std::filesystem::copy_symlink(p, p);\n+  std::filesystem::copy_symlink(p, p, ec);\n+\n+  std::filesystem::create_directories(p);\n+  std::filesystem::create_directories(p, ec);\n+\n+  std::filesystem::create_directory(p);\n+  std::filesystem::create_directory(p, ec);\n+\n+  std::filesystem::create_directory(p, p);\n+  std::filesystem::create_directory(p, p, ec);\n+\n+  std::filesystem::create_directory_symlink(p, p);\n+  std::filesystem::create_directory_symlink(p, p, ec);\n+\n+  std::filesystem::create_hard_link(p, p);\n+  std::filesystem::create_hard_link(p, p, ec);\n+\n+  std::filesystem::create_symlink(p, p);\n+  std::filesystem::create_symlink(p, p, ec);\n+\n+  p2 = std::filesystem::current_path();\n+  p2 = std::filesystem::current_path(ec);\n+  std::filesystem::current_path(p);\n+  std::filesystem::current_path(p, ec);\n+\n+  b = std::filesystem::equivalent(p, p);\n+  b = std::filesystem::equivalent(p, p, ec);\n+\n+  b = std::filesystem::exists(st);\n+  b = std::filesystem::exists(p);\n+  b = std::filesystem::exists(p, ec);\n+\n+  size = std::filesystem::file_size(p);\n+  size = std::filesystem::file_size(p, ec);\n+\n+  size = std::filesystem::hard_link_count(p);\n+  size = std::filesystem::hard_link_count(p, ec);\n+\n+  b = std::filesystem::is_block_file(st);\n+  b = std::filesystem::is_block_file(p);\n+  b = std::filesystem::is_block_file(p, ec);\n+\n+  b = std::filesystem::is_character_file(st);\n+  b = std::filesystem::is_character_file(p);\n+  b = std::filesystem::is_character_file(p, ec);\n+\n+  b = std::filesystem::is_directory(st);\n+  b = std::filesystem::is_directory(p);\n+  b = std::filesystem::is_directory(p, ec);\n+\n+  b = std::filesystem::is_empty(p);\n+  b = std::filesystem::is_empty(p, ec);\n+\n+  b = std::filesystem::is_fifo(st);\n+  b = std::filesystem::is_fifo(p);\n+  b = std::filesystem::is_fifo(p, ec);\n+\n+  b = std::filesystem::is_other(st);\n+  b = std::filesystem::is_other(p);\n+  b = std::filesystem::is_other(p, ec);\n+\n+  b = std::filesystem::is_regular_file(st);\n+  b = std::filesystem::is_regular_file(p);\n+  b = std::filesystem::is_regular_file(p, ec);\n+\n+  b = std::filesystem::is_socket(st);\n+  b = std::filesystem::is_socket(p);\n+  b = std::filesystem::is_socket(p, ec);\n+\n+  b = std::filesystem::is_symlink(st);\n+  b = std::filesystem::is_symlink(p);\n+  b = std::filesystem::is_symlink(p, ec);\n+\n+  t2 = std::filesystem::last_write_time(p);\n+  t2 = std::filesystem::last_write_time(p, ec);\n+  std::filesystem::last_write_time(p, t);\n+  std::filesystem::last_write_time(p, t, ec);\n+\n+  std::filesystem::permissions(p, perms);\n+  std::filesystem::permissions(p, perms, permopts);\n+  std::filesystem::permissions(p, perms, ec);\n+  std::filesystem::permissions(p, perms, permopts, ec);\n+\n+  p2 = std::filesystem::proximate(p, ec);\n+  p2 = std::filesystem::proximate(p);\n+  p2 = std::filesystem::proximate(p, p);\n+  p2 = std::filesystem::proximate(p, p, ec);\n+\n+  p2 = std::filesystem::read_symlink(p);\n+  p2 = std::filesystem::read_symlink(p, ec);\n+\n+  p2 = std::filesystem::relative(p, ec);\n+  p2 = std::filesystem::relative(p);\n+  p2 = std::filesystem::relative(p, p);\n+  p2 = std::filesystem::relative(p, p, ec);\n+\n+  b = std::filesystem::remove(p);\n+  b = std::filesystem::remove(p, ec);\n+\n+  size = std::filesystem::remove_all(p);\n+  size = std::filesystem::remove_all(p, ec);\n+\n+  std::filesystem::rename(p, p);\n+  std::filesystem::rename(p, p, ec);\n+\n+  std::filesystem::resize_file(p, size);\n+  std::filesystem::resize_file(p, size, ec);\n+\n+  sp = std::filesystem::space(p);\n+  sp = std::filesystem::space(p, ec);\n+\n+  st2 = std::filesystem::status(p);\n+  st2 = std::filesystem::status(p, ec);\n+\n+  b = std::filesystem::status_known(st);\n+\n+  st2 = std::filesystem::symlink_status(p);\n+  st2 = std::filesystem::symlink_status(p, ec);\n+\n+  p2 = std::filesystem::temp_directory_path();\n+  p2 = std::filesystem::temp_directory_path(ec);\n+\n+  p2 = std::filesystem::weakly_canonical(p);\n+  p2 = std::filesystem::weakly_canonical(p, ec);\n+}"}, {"sha": "953c4e1c664f7a370a480f603bfaa34b79b29471", "filename": "libstdc++-v3/testsuite/27_io/filesystem/operations/resize_file.cc", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf4b581f2e28368c01fe93792ebc6eefb2bc8116/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fresize_file.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf4b581f2e28368c01fe93792ebc6eefb2bc8116/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fresize_file.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fresize_file.cc?ref=cf4b581f2e28368c01fe93792ebc6eefb2bc8116", "patch": "@@ -0,0 +1,72 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do run { target c++17 } }\n+\n+// C++17 30.10.15.33 Resize file [fs.op.resize_file]\n+\n+#include <filesystem>\n+#include <string>\n+#include <fstream>\n+#include <testsuite_fs.h>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  auto p = __gnu_test::nonexistent_path();\n+  std::error_code ec;\n+  resize_file(p, 0, ec);\n+  VERIFY( ec );\n+  ec = {};\n+  resize_file(p, 1, ec);\n+  VERIFY( ec );\n+\n+  __gnu_test::scoped_file f(p);\n+  std::ofstream{p} << \"some text\";\n+  std::ifstream fin;\n+  std::string input;\n+\n+#ifdef _GLIBCXX_HAVE_TRUNCATE\n+  resize_file(p, 4, ec);\n+  VERIFY( !ec );\n+  fin.open(p);\n+  getline(fin, input);\n+  VERIFY( input.length() == 4 );\n+  fin.close();\n+\n+  resize_file(p, 2);\n+  fin.open(p);\n+  getline(fin, input);\n+  VERIFY( input.length() == 2 );\n+  fin.close();\n+#endif\n+\n+  resize_file(p, 0, ec);\n+  VERIFY( !ec );\n+  fin.open(p);\n+  getline(fin, input);\n+  VERIFY( input.length() == 0 );\n+  fin.close();\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}]}