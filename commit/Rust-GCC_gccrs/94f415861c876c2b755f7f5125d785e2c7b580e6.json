{"sha": "94f415861c876c2b755f7f5125d785e2c7b580e6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTRmNDE1ODYxYzg3NmMyYjc1NWY3ZjUxMjVkNzg1ZTJjN2I1ODBlNg==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-10-13T05:34:53Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-10-13T05:34:53Z"}, "message": "2003-10-13  Michael Koch  <konqueror@gmx.de>\n\n\t* java/net/JarURLConnection.java\n\t(jarFileURL): Added dcoumentation.\n\t(jarFileURLConnection): Reformated documentation.\n\t(entryName): Renamed from \"element\", documentation rewritten.\n\t(connectionCache): Renamed from \"conn_cache\", documentation\n\treformated.\n\t(JarURLConnection): Check URL protocol.\n\t(getEntryName): Use entryName.\n\t(connect): Use connectionCache.\n\t(getInputStream): Use entryName, fixed comment.\n\t(getJarEntry): Use entryName.\n\t(getHeaders): Use entryName.\n\t* java/net/URLConnection.java\n\t(addRequestProperty): Fixed documentation.\n\t(setDefaultRequestProptery): Added comment that it does nothing since\n\tJDK 1.3.\n\t(getDefaultRequestProperty): Likewise.\n\nFrom-SVN: r72420", "tree": {"sha": "180392150df900aa54518e207545032ef4c13d7e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/180392150df900aa54518e207545032ef4c13d7e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/94f415861c876c2b755f7f5125d785e2c7b580e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94f415861c876c2b755f7f5125d785e2c7b580e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94f415861c876c2b755f7f5125d785e2c7b580e6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94f415861c876c2b755f7f5125d785e2c7b580e6/comments", "author": null, "committer": null, "parents": [{"sha": "9917dcbafef6fbd683874267e2dba47a3467c9a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9917dcbafef6fbd683874267e2dba47a3467c9a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9917dcbafef6fbd683874267e2dba47a3467c9a4"}], "stats": {"total": 96, "additions": 66, "deletions": 30}, "files": [{"sha": "b9ddc97b07286fb23522afd982ec05212d7ab1e5", "filename": "libjava/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94f415861c876c2b755f7f5125d785e2c7b580e6/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94f415861c876c2b755f7f5125d785e2c7b580e6/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=94f415861c876c2b755f7f5125d785e2c7b580e6", "patch": "@@ -1,3 +1,23 @@\n+2003-10-13  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/net/JarURLConnection.java\n+\t(jarFileURL): Added dcoumentation.\n+\t(jarFileURLConnection): Reformated documentation.\n+\t(entryName): Renamed from \"element\", documentation rewritten.\n+\t(connectionCache): Renamed from \"conn_cache\", documentation\n+\treformated.\n+\t(JarURLConnection): Check URL protocol.\n+\t(getEntryName): Use entryName.\n+\t(connect): Use connectionCache.\n+\t(getInputStream): Use entryName, fixed comment.\n+\t(getJarEntry): Use entryName.\n+\t(getHeaders): Use entryName.\n+\t* java/net/URLConnection.java\n+\t(addRequestProperty): Fixed documentation.\n+\t(setDefaultRequestProptery): Added comment that it does nothing since\n+\tJDK 1.3.\n+\t(getDefaultRequestProperty): Likewise.\n+\n 2003-10-13  Michael Koch  <konqueror@gmx.de>\n \n \t* java/net/java/net/URLStreamHandlerFactory.java"}, {"sha": "e8838f4b828ff47d18e8b9b477cd0d5601988f90", "filename": "libjava/java/net/JarURLConnection.java", "status": "modified", "additions": 38, "deletions": 23, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94f415861c876c2b755f7f5125d785e2c7b580e6/libjava%2Fjava%2Fnet%2FJarURLConnection.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94f415861c876c2b755f7f5125d785e2c7b580e6/libjava%2Fjava%2Fnet%2FJarURLConnection.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FJarURLConnection.java?ref=94f415861c876c2b755f7f5125d785e2c7b580e6", "patch": "@@ -1,5 +1,5 @@\n /* JarURLConnection.java -- Class for manipulating remote jar files\n-   Copyright (C) 1998 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 2002, 2003 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -50,6 +50,7 @@\n import java.util.zip.ZipEntry;\n import java.util.Map;\n import java.util.Vector;\n+import java.util.HashMap;\n import java.util.Hashtable;\n import java.security.cert.Certificate;\n \n@@ -80,19 +81,29 @@\n  */\n public abstract class JarURLConnection extends URLConnection\n {\n-  // three different ways to say the same thing\n+  /**\n+   * This is the actual URL that points the remote jar file.  This is parsed\n+   * out of the jar URL by the constructor.\n+   */\n   private final URL jarFileURL;\n \n-  /** The connection to the jar file itself. A JarURLConnection\n-   *  can represent an entry in a jar file or an entire jar file.  In\n-   *  either case this describes just the jar file itself. */\n+  /**\n+   * The connection to the jar file itself. A JarURLConnection\n+   * can represent an entry in a jar file or an entire jar file.  In\n+   * either case this describes just the jar file itself.\n+   */\n   protected URLConnection jarFileURLConnection;\n \n-  // If this is a connection to a jar file element this is set, otherwise null.\n-  private final String element;\n+  /**\n+   * This is the jar file \"entry name\" or portion after the \"!/\" in the\n+   * URL which represents the pathname inside the actual jar file.\n+   */\n+  private final String entryName;\n \n-  // Cached JarURLConnection's \n-  static Hashtable conn_cache = new Hashtable();\n+  /**\n+   * Cached JarURLConnection objects .\n+   */\n+  static HashMap connectionCache = new HashMap();\n \n   /**\n    * Creates a JarURLConnection from an URL object\n@@ -108,6 +119,9 @@ protected JarURLConnection (URL url)\n   {\n     super (url);\n \n+    if (!url.getProtocol().equals (\"jar\"))\n+      throw new MalformedURLException (url + \": Not jar protocol.\");\n+\n     String spec = url.getFile();\n     int bang = spec.indexOf (\"!/\");\n     if (bang == -1)\n@@ -116,8 +130,8 @@ protected JarURLConnection (URL url)\n     // Extract the url for the jar itself.\n     jarFileURL = new URL (spec.substring (0, bang));\n \n-    // Get the name of the element, if any.\n-    element = (spec.length() == (bang + 2) ? null : spec.substring (bang + 2));\n+    // Get the name of the entry, if any.\n+    entryName = spec.length() == (bang + 2) ? null : spec.substring (bang + 2);\n   }\n \n   /**\n@@ -140,7 +154,7 @@ public URL getJarFileURL ()\n    */\n   public String getEntryName ()\n   {\n-    return element;\n+    return entryName;\n   }\n \n   public synchronized void connect() throws IOException\n@@ -151,14 +165,14 @@ public synchronized void connect() throws IOException\n \n     if (getUseCaches())\n       {\n-\tjarFileURLConnection = (URLConnection) conn_cache.get (jarFileURL);\n+\tjarFileURLConnection = (URLConnection) connectionCache.get (jarFileURL);\n \n \tif (jarFileURLConnection == null)\n \t  {\n \t    jarFileURLConnection = jarFileURL.openConnection ();\n \t    jarFileURLConnection.setUseCaches (true);\n \t    jarFileURLConnection.connect ();\n-\t    conn_cache.put (jarFileURL, jarFileURLConnection);\n+\t    connectionCache.put (jarFileURL, jarFileURLConnection);\n \t  }\n       }\n     else\n@@ -178,7 +192,7 @@ public InputStream getInputStream() throws IOException\n     if (! doInput)\n       throw new ProtocolException(\"Can't open InputStream if doInput is false\");\n \n-    if (element == null)\n+    if (entryName == null)\n       {\n \t// This is a JarURLConnection for the entire jar file.  \n \n@@ -187,23 +201,24 @@ public InputStream getInputStream() throws IOException\n \treturn new JarInputStream(jar_is);\n       }\n \n-    // Reaching this point, we're looking for an element of a jar file.\n+    // Reaching this point, we're looking for an entry of a jar file.\n \n     JarFile jarfile = null;\n \n     try\n       {\n \tjarfile = getJarFile ();\n       }\n-    catch (java.io.IOException x)\n+    catch (IOException x)\n       {\n \t/* ignore */\n       }\n     \n     if (jarfile != null)\n       {\n \t// this is the easy way...\n-\tZipEntry entry = jarfile.getEntry(element);\n+\tZipEntry entry = jarfile.getEntry (entryName);\n+        \n \tif (entry != null)\n \t  return jarfile.getInputStream (entry);\n \telse\n@@ -220,7 +235,7 @@ public InputStream getInputStream() throws IOException\n \t     ent != null; \n \t     ent = zis.getNextEntry ())\n \t  {\n-\t    if (element.equals (ent.getName ()))\n+\t    if (entryName.equals (ent.getName()))\n \t      {\n \t\tint size = (int)ent.getSize();\n \t\tbyte[] data = new byte[size];\n@@ -244,7 +259,7 @@ public JarEntry getJarEntry () throws IOException\n   {\n     JarFile jarfile = null;\n \n-    if (element == null)\n+    if (entryName == null)\n       return null;\n \n     if (! doInput)\n@@ -269,7 +284,7 @@ public JarEntry getJarEntry () throws IOException\n \t     ent != null; \n \t     ent = zis.getNextEntry ())\n \t  {\n-\t    if (element.equals (ent.getName ()))\n+\t    if (entryName.equals (ent.getName()))\n \t      {\n \t\treturn new JarEntry (ent);\n \t      }\n@@ -278,7 +293,7 @@ public JarEntry getJarEntry () throws IOException\n \n     else\n       {\n-\treturn jarfile.getJarEntry (element);\n+\treturn jarfile.getJarEntry (entryName);\n       }\n \n     return null;\n@@ -398,7 +413,7 @@ private void getHeaders() throws IOException\n     // Add the only header we know about right now:  Content-length.\n     long len = -1;\n \n-    if (element == null)\n+    if (entryName == null)\n       if (jarFileURLConnection != null)\n \tlen = jarFileURLConnection.getContentLength ();\n     else"}, {"sha": "370765f281f7cdd2a044d545102048cf74012013", "filename": "libjava/java/net/URLConnection.java", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94f415861c876c2b755f7f5125d785e2c7b580e6/libjava%2Fjava%2Fnet%2FURLConnection.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94f415861c876c2b755f7f5125d785e2c7b580e6/libjava%2Fjava%2Fnet%2FURLConnection.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FURLConnection.java?ref=94f415861c876c2b755f7f5125d785e2c7b580e6", "patch": "@@ -726,7 +726,7 @@ public void setRequestProperty(String key, String value)\n \n   /**\n    * Adds a new request property by a key/value pair.\n-   * This method does not overwrite* existing properties with the same key.\n+   * This method does not overwrite existing properties with the same key.\n    *\n    * @param key Key of the property to add\n    * @param value Value of the Property to add\n@@ -800,14 +800,14 @@ public Map getRequestProperties()\n    * @param key The request property name the default is being set for\n    * @param value The value to set the default to\n    *\n-   * @deprecated 1.3 The method setRequestProperty should be used instead\n+   * @deprecated 1.3 The method setRequestProperty should be used instead.\n+   * This method does nothing now.\n    *\n    * @see URLConnectionr#setRequestProperty(String key, String value)\n    */\n-  public static void setDefaultRequestProperty(String key, String value)\n+  public static void setDefaultRequestProperty (String key, String value)\n   {\n-    // Do nothing unless overridden by subclasses that support setting\n-    // default request properties.\n+    // This method does nothing since JDK 1.3.\n   }\n \n   /**\n@@ -819,13 +819,14 @@ public static void setDefaultRequestProperty(String key, String value)\n    *\n    * @return The value of the default property or null if not available\n    * \n-   * @deprecated 1.3 The method getRequestProperty should be used instead\n+   * @deprecated 1.3 The method getRequestProperty should be used instead.\n+   * This method does nothing now.\n    *\n    * @see URLConnection#getRequestProperty(String key)\n    */\n   public static String getDefaultRequestProperty(String key)\n   {\n-    // Overridden by subclasses that support default request properties.\n+    // This method does nothing since JDK 1.3.\n     return null;\n   }\n "}]}