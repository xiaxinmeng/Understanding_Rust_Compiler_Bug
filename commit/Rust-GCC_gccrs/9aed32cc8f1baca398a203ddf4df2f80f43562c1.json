{"sha": "9aed32cc8f1baca398a203ddf4df2f80f43562c1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWFlZDMyY2M4ZjFiYWNhMzk4YTIwM2RkZjRkZjJmODBmNDM1NjJjMQ==", "commit": {"author": {"name": "Alexandre Oliva", "email": "oliva@adacore.com", "date": "2021-05-05T00:49:41Z"}, "committer": {"name": "Alexandre Oliva", "email": "oliva@gnu.org", "date": "2021-05-05T00:49:41Z"}, "message": "restore EH on x86-vx7r2\n\nx86-vx7r2 needs svr4_dbx_register_map, but the default in i386/i386.h\nwas dbx_register_map, partially swapping ebp and esp in unwind info.\n\ni386/vxworks.h had a correct overrider, but it was conditional for\nvxworks < 7.  This patch reenables the overrider unconditionally.\n\n\nfor  gcc/ChangeLog\n\n\t* config/i386/vxworks.h (DBX_REGISTER_NUMBER): Make it\n\tunconditional.", "tree": {"sha": "5a1c8eca18ceaeefe5747834a9f564268b3621fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5a1c8eca18ceaeefe5747834a9f564268b3621fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9aed32cc8f1baca398a203ddf4df2f80f43562c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9aed32cc8f1baca398a203ddf4df2f80f43562c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9aed32cc8f1baca398a203ddf4df2f80f43562c1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9aed32cc8f1baca398a203ddf4df2f80f43562c1/comments", "author": null, "committer": null, "parents": [{"sha": "99e8df7a4cc0bb1bfa49e69ccb0f7e02c9755e3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99e8df7a4cc0bb1bfa49e69ccb0f7e02c9755e3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99e8df7a4cc0bb1bfa49e69ccb0f7e02c9755e3c"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "ebda7d9d26a34785e36861f07a40a9f57a383c82", "filename": "gcc/config/i386/vxworks.h", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aed32cc8f1baca398a203ddf4df2f80f43562c1/gcc%2Fconfig%2Fi386%2Fvxworks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aed32cc8f1baca398a203ddf4df2f80f43562c1/gcc%2Fconfig%2Fi386%2Fvxworks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fvxworks.h?ref=9aed32cc8f1baca398a203ddf4df2f80f43562c1", "patch": "@@ -37,13 +37,6 @@ along with GCC; see the file COPYING3.  If not see\n #define TARGET_SUBTARGET_DEFAULT \\\n \t(MASK_80387 | MASK_IEEE_FP | MASK_FLOAT_RETURNS | MASK_VECT8_RETURNS)\n \n-/* Provide our target specific DBX_REGISTER_NUMBER.  VxWorks relies on\n-   the SVR4 numbering.  */\n-\n-#undef DBX_REGISTER_NUMBER\n-#define DBX_REGISTER_NUMBER(n) \\\n-  (TARGET_64BIT ? dbx64_register_map[n] : svr4_dbx_register_map[n])\n-\n #undef PTRDIFF_TYPE\n #define PTRDIFF_TYPE (TARGET_LP64 ? \"long int\" : \"int\")\n \n@@ -61,6 +54,13 @@ along with GCC; see the file COPYING3.  If not see\n \n #endif\n \n+/* Provide our target specific DBX_REGISTER_NUMBER.  VxWorks relies on\n+   the SVR4 numbering.  */\n+\n+#undef DBX_REGISTER_NUMBER\n+#define DBX_REGISTER_NUMBER(n) \\\n+  (TARGET_64BIT ? dbx64_register_map[n] : svr4_dbx_register_map[n])\n+\n /* CPU macro definitions, ordered to account for VxWorks 7 not\n    supporting CPUs older than PENTIUM4 since SR0650.  */\n "}]}