{"sha": "c1b0a767f04a8ccbaff2a7b71d5c817cdb469630", "node_id": "C_kwDOANBUbNoAKGMxYjBhNzY3ZjA0YThjY2JhZmYyYTdiNzFkNWM4MTdjZGI0Njk2MzA", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2022-10-04T15:39:18Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2022-10-04T15:39:18Z"}, "message": "aarch64: Define __ARM_FEATURE_RCPC\n\nhttps://github.com/ARM-software/acle/pull/199 adds a new feature\nmacro for RCPC, for use in things like inline assembly.  This patch\nadds the associated support to GCC.\n\nAlso, RCPC is required for Armv8.3-A and later, but the armv8.3-a\nentry didn't include it.  This was probably harmless in practice\nsince GCC simply ignored the extension until now.  (The GAS\ndefinition is OK.)\n\ngcc/\n\t* config/aarch64/aarch64.h (AARCH64_ISA_RCPC): New macro.\n\t* config/aarch64/aarch64-arches.def (armv8.3-a): Include RCPC.\n\t* config/aarch64/aarch64-cores.def (thunderx3t110, zeus, neoverse-v1)\n\t(neoverse-512tvb, saphira): Remove RCPC from these Armv8.3-A+ cores.\n\t* config/aarch64/aarch64-c.cc (aarch64_update_cpp_builtins): Define\n\t__ARM_FEATURE_RCPC when appropriate.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/pragma_cpp_predefs_1.c: Add RCPC tests.", "tree": {"sha": "7e81ad2ee5927e60ab3a85c289b91a496021ff85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e81ad2ee5927e60ab3a85c289b91a496021ff85"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c1b0a767f04a8ccbaff2a7b71d5c817cdb469630", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1b0a767f04a8ccbaff2a7b71d5c817cdb469630", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1b0a767f04a8ccbaff2a7b71d5c817cdb469630", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1b0a767f04a8ccbaff2a7b71d5c817cdb469630/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8792047470073df0da4a5b91997d6058193d7676", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8792047470073df0da4a5b91997d6058193d7676", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8792047470073df0da4a5b91997d6058193d7676"}], "stats": {"total": 34, "additions": 28, "deletions": 6}, "files": [{"sha": "5a9eff3364894e74dd3bf7c79ebf273b6520c754", "filename": "gcc/config/aarch64/aarch64-arches.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1b0a767f04a8ccbaff2a7b71d5c817cdb469630/gcc%2Fconfig%2Faarch64%2Faarch64-arches.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1b0a767f04a8ccbaff2a7b71d5c817cdb469630/gcc%2Fconfig%2Faarch64%2Faarch64-arches.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-arches.def?ref=c1b0a767f04a8ccbaff2a7b71d5c817cdb469630", "patch": "@@ -33,7 +33,7 @@\n AARCH64_ARCH(\"armv8-a\",       generic,       V8A,       8,  (SIMD))\n AARCH64_ARCH(\"armv8.1-a\",     generic,       V8_1A,     8,  (V8A, LSE, CRC, RDMA))\n AARCH64_ARCH(\"armv8.2-a\",     generic,       V8_2A,     8,  (V8_1A))\n-AARCH64_ARCH(\"armv8.3-a\",     generic,       V8_3A,     8,  (V8_2A, PAUTH))\n+AARCH64_ARCH(\"armv8.3-a\",     generic,       V8_3A,     8,  (V8_2A, PAUTH, RCPC))\n AARCH64_ARCH(\"armv8.4-a\",     generic,       V8_4A,     8,  (V8_3A, F16FML, DOTPROD, FLAGM))\n AARCH64_ARCH(\"armv8.5-a\",     generic,       V8_5A,     8,  (V8_4A, SB, SSBS, PREDRES))\n AARCH64_ARCH(\"armv8.6-a\",     generic,       V8_6A,     8,  (V8_5A, I8MM, BF16))"}, {"sha": "e296c73350f1ec70f6017c11be54e0749bf114d5", "filename": "gcc/config/aarch64/aarch64-c.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1b0a767f04a8ccbaff2a7b71d5c817cdb469630/gcc%2Fconfig%2Faarch64%2Faarch64-c.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1b0a767f04a8ccbaff2a7b71d5c817cdb469630/gcc%2Fconfig%2Faarch64%2Faarch64-c.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-c.cc?ref=c1b0a767f04a8ccbaff2a7b71d5c817cdb469630", "patch": "@@ -202,6 +202,7 @@ aarch64_update_cpp_builtins (cpp_reader *pfile)\n \t\t\t\"__ARM_FEATURE_BF16_SCALAR_ARITHMETIC\", pfile);\n   aarch64_def_or_undef (TARGET_LS64,\n \t\t\t\"__ARM_FEATURE_LS64\", pfile);\n+  aarch64_def_or_undef (AARCH64_ISA_RCPC, \"__ARM_FEATURE_RCPC\", pfile);\n \n   /* Not for ACLE, but required to keep \"float.h\" correct if we switch\n      target between implementations that do or do not support ARMv8.2-A"}, {"sha": "b50628d6b5139f39e08b7f9913e0cd1816c5027b", "filename": "gcc/config/aarch64/aarch64-cores.def", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1b0a767f04a8ccbaff2a7b71d5c817cdb469630/gcc%2Fconfig%2Faarch64%2Faarch64-cores.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1b0a767f04a8ccbaff2a7b71d5c817cdb469630/gcc%2Fconfig%2Faarch64%2Faarch64-cores.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-cores.def?ref=c1b0a767f04a8ccbaff2a7b71d5c817cdb469630", "patch": "@@ -133,17 +133,17 @@ AARCH64_CORE(\"tsv110\",  tsv110, tsv110, V8_2A,  (CRYPTO, F16), tsv110,   0x48, 0\n /* ARMv8.3-A Architecture Processors.  */\n \n /* Marvell cores (TX3). */\n-AARCH64_CORE(\"thunderx3t110\",  thunderx3t110,  thunderx3t110, V8_3A,  (CRYPTO, RCPC, SM4, SHA3, F16FML), thunderx3t110, 0x43, 0x0b8, 0x0a)\n+AARCH64_CORE(\"thunderx3t110\",  thunderx3t110,  thunderx3t110, V8_3A,  (CRYPTO, SM4, SHA3, F16FML), thunderx3t110, 0x43, 0x0b8, 0x0a)\n \n /* ARMv8.4-A Architecture Processors.  */\n \n /* Arm ('A') cores.  */\n-AARCH64_CORE(\"zeus\", zeus, cortexa57, V8_4A,  (SVE, RCPC, I8MM, BF16, PROFILE, SSBS, RNG), neoversev1, 0x41, 0xd40, -1)\n-AARCH64_CORE(\"neoverse-v1\", neoversev1, cortexa57, V8_4A,  (SVE, RCPC, I8MM, BF16, PROFILE, SSBS, RNG), neoversev1, 0x41, 0xd40, -1)\n-AARCH64_CORE(\"neoverse-512tvb\", neoverse512tvb, cortexa57, V8_4A,  (SVE, RCPC, I8MM, BF16, PROFILE, SSBS, RNG), neoverse512tvb, INVALID_IMP, INVALID_CORE, -1)\n+AARCH64_CORE(\"zeus\", zeus, cortexa57, V8_4A,  (SVE, I8MM, BF16, PROFILE, SSBS, RNG), neoversev1, 0x41, 0xd40, -1)\n+AARCH64_CORE(\"neoverse-v1\", neoversev1, cortexa57, V8_4A,  (SVE, I8MM, BF16, PROFILE, SSBS, RNG), neoversev1, 0x41, 0xd40, -1)\n+AARCH64_CORE(\"neoverse-512tvb\", neoverse512tvb, cortexa57, V8_4A,  (SVE, I8MM, BF16, PROFILE, SSBS, RNG), neoverse512tvb, INVALID_IMP, INVALID_CORE, -1)\n \n /* Qualcomm ('Q') cores. */\n-AARCH64_CORE(\"saphira\",     saphira,    saphira,    V8_4A,  (CRYPTO, RCPC), saphira,   0x51, 0xC01, -1)\n+AARCH64_CORE(\"saphira\",     saphira,    saphira,    V8_4A,  (CRYPTO), saphira,   0x51, 0xC01, -1)\n \n /* ARMv8-A big.LITTLE implementations.  */\n "}, {"sha": "05da9af03679749059f30bb101524d295ac36846", "filename": "gcc/config/aarch64/aarch64.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1b0a767f04a8ccbaff2a7b71d5c817cdb469630/gcc%2Fconfig%2Faarch64%2Faarch64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1b0a767f04a8ccbaff2a7b71d5c817cdb469630/gcc%2Fconfig%2Faarch64%2Faarch64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.h?ref=c1b0a767f04a8ccbaff2a7b71d5c817cdb469630", "patch": "@@ -201,6 +201,7 @@ enum class aarch64_feature : unsigned char {\n #define AARCH64_ISA_SM4\t           (aarch64_isa_flags & AARCH64_FL_SM4)\n #define AARCH64_ISA_SHA3\t   (aarch64_isa_flags & AARCH64_FL_SHA3)\n #define AARCH64_ISA_F16FML\t   (aarch64_isa_flags & AARCH64_FL_F16FML)\n+#define AARCH64_ISA_RCPC\t   (aarch64_isa_flags & AARCH64_FL_RCPC)\n #define AARCH64_ISA_RCPC8_4\t   (aarch64_isa_flags & AARCH64_FL_V8_4A)\n #define AARCH64_ISA_RNG\t\t   (aarch64_isa_flags & AARCH64_FL_RNG)\n #define AARCH64_ISA_V8_5A\t   (aarch64_isa_flags & AARCH64_FL_V8_5A)"}, {"sha": "307fa3d67da929f9194264163b4ed1c66a585ee8", "filename": "gcc/testsuite/gcc.target/aarch64/pragma_cpp_predefs_1.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1b0a767f04a8ccbaff2a7b71d5c817cdb469630/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpragma_cpp_predefs_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1b0a767f04a8ccbaff2a7b71d5c817cdb469630/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpragma_cpp_predefs_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpragma_cpp_predefs_1.c?ref=c1b0a767f04a8ccbaff2a7b71d5c817cdb469630", "patch": "@@ -248,6 +248,26 @@\n #error \"__ARM_FEATURE_CRC32 is not defined but should be!\"\n #endif\n \n+#pragma GCC target (\"arch=armv8.2-a\")\n+#ifdef __ARM_FEATURE_RCPC\n+#error \"__ARM_FEATURE_RCPC is defined but should not be!\"\n+#endif\n+\n+#pragma GCC target (\"arch=armv8.2-a+rcpc\")\n+#ifndef __ARM_FEATURE_RCPC\n+#error \"__ARM_FEATURE_RCPC is not defined but should be!\"\n+#endif\n+\n+#pragma GCC target (\"+norcpc\")\n+#ifdef __ARM_FEATURE_RCPC\n+#error \"__ARM_FEATURE_RCPC is defined but should not be!\"\n+#endif\n+\n+#pragma GCC target (\"arch=armv8.3-a\")\n+#ifndef __ARM_FEATURE_RCPC\n+#error \"__ARM_FEATURE_RCPC is not defined but should be!\"\n+#endif\n+\n int\n foo (int a)\n {"}]}