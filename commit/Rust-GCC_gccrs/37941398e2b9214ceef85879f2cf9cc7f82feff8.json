{"sha": "37941398e2b9214ceef85879f2cf9cc7f82feff8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzc5NDEzOThlMmI5MjE0Y2VlZjg1ODc5ZjJjZjljYzdmODJmZWZmOA==", "commit": {"author": {"name": "Philippe De Muyter", "email": "phdm@macqel.be", "date": "2000-05-22T16:22:12Z"}, "committer": {"name": "Philippe De Muyter", "email": "phdm@gcc.gnu.org", "date": "2000-05-22T16:22:12Z"}, "message": "m68k.h (STORE_FLAG_VALUE): Macro set to (-1), not -1.\n\n\t* m68k/m68k.h (STORE_FLAG_VALUE): Macro set to (-1), not -1.\n\t* fx80/fx80.h, i370/i370.h, m88k/m88k.h (STORE_FLAG_VALUE): Ditto.\n\t* gmicro/gmicro.h, we32k/we32k.h (STORE_FLAG_VALUE): Ditto.\n\nFrom-SVN: r34081", "tree": {"sha": "7e8b8f654b4e4cf1ed240060a25c159ff265275e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e8b8f654b4e4cf1ed240060a25c159ff265275e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/37941398e2b9214ceef85879f2cf9cc7f82feff8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37941398e2b9214ceef85879f2cf9cc7f82feff8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37941398e2b9214ceef85879f2cf9cc7f82feff8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37941398e2b9214ceef85879f2cf9cc7f82feff8/comments", "author": {"login": "phdm", "id": 2923420, "node_id": "MDQ6VXNlcjI5MjM0MjA=", "avatar_url": "https://avatars.githubusercontent.com/u/2923420?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phdm", "html_url": "https://github.com/phdm", "followers_url": "https://api.github.com/users/phdm/followers", "following_url": "https://api.github.com/users/phdm/following{/other_user}", "gists_url": "https://api.github.com/users/phdm/gists{/gist_id}", "starred_url": "https://api.github.com/users/phdm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phdm/subscriptions", "organizations_url": "https://api.github.com/users/phdm/orgs", "repos_url": "https://api.github.com/users/phdm/repos", "events_url": "https://api.github.com/users/phdm/events{/privacy}", "received_events_url": "https://api.github.com/users/phdm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0d9a68e84221607f20781e66efda54888811ee44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d9a68e84221607f20781e66efda54888811ee44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d9a68e84221607f20781e66efda54888811ee44"}], "stats": {"total": 18, "additions": 12, "deletions": 6}, "files": [{"sha": "28911623773f8b5e013a6fdc0b74a32c792c6f39", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37941398e2b9214ceef85879f2cf9cc7f82feff8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37941398e2b9214ceef85879f2cf9cc7f82feff8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=37941398e2b9214ceef85879f2cf9cc7f82feff8", "patch": "@@ -1,3 +1,9 @@\n+Mon May 22 17:31:35 2000  Philippe De Muyter  <phdm@macqel.be>\n+\n+\t* m68k/m68k.h (STORE_FLAG_VALUE): Macro set to (-1), not -1.\n+\t* fx80/fx80.h, i370/i370.h, m88k/m88k.h (STORE_FLAG_VALUE): Ditto.\n+\t* gmicro/gmicro.h, we32k/we32k.h (STORE_FLAG_VALUE): Ditto.\n+\n 2000-05-22  Jakub Jelinek  <jakub@redhat.com>\n \n \t* config/sparc/sparc.md (movdf_insn_v9only_vis): fzero has"}, {"sha": "82e64556df15bb8cb434d627002047523b886413", "filename": "gcc/config/fx80/fx80.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37941398e2b9214ceef85879f2cf9cc7f82feff8/gcc%2Fconfig%2Ffx80%2Ffx80.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37941398e2b9214ceef85879f2cf9cc7f82feff8/gcc%2Fconfig%2Ffx80%2Ffx80.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffx80%2Ffx80.h?ref=37941398e2b9214ceef85879f2cf9cc7f82feff8", "patch": "@@ -853,7 +853,7 @@ extern enum reg_class regno_reg_class[];\n /* We assume that the store-condition-codes instructions store 0 for false\n    and some other value for true.  This is the value stored for true.  */\n \n-#define STORE_FLAG_VALUE -1\n+#define STORE_FLAG_VALUE (-1)\n \n /* When a prototype says `char' or `short', really pass an `int'.  */\n #define PROMOTE_PROTOTYPES 1"}, {"sha": "377adf1b08ffe6e8ba4bbfee26d3718c6ec5053d", "filename": "gcc/config/gmicro/gmicro.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37941398e2b9214ceef85879f2cf9cc7f82feff8/gcc%2Fconfig%2Fgmicro%2Fgmicro.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37941398e2b9214ceef85879f2cf9cc7f82feff8/gcc%2Fconfig%2Fgmicro%2Fgmicro.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgmicro%2Fgmicro.h?ref=37941398e2b9214ceef85879f2cf9cc7f82feff8", "patch": "@@ -1154,7 +1154,7 @@ extern enum reg_class regno_reg_class[];\n /* We assume that the store-condition-codes instructions store 0 for false\n    and some other value for true.  This is the value stored for true.  */\n \n-/* #define STORE_FLAG_VALUE -1 */\n+/* #define STORE_FLAG_VALUE (-1) */\n \n /* When a prototype says `char' or `short', really pass an `int'.  */\n #define PROMOTE_PROTOTYPES 1"}, {"sha": "ee6987494c4eb3967b9a4a4dac15e24b0a639082", "filename": "gcc/config/i370/i370.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37941398e2b9214ceef85879f2cf9cc7f82feff8/gcc%2Fconfig%2Fi370%2Fi370.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37941398e2b9214ceef85879f2cf9cc7f82feff8/gcc%2Fconfig%2Fi370%2Fi370.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi370%2Fi370.h?ref=37941398e2b9214ceef85879f2cf9cc7f82feff8", "patch": "@@ -908,7 +908,7 @@ enum reg_class\n /* We assume that the store-condition-codes instructions store 0 for false\n    and some other value for true.  This is the value stored for true.  */\n \n-/* #define STORE_FLAG_VALUE -1 */\n+/* #define STORE_FLAG_VALUE (-1) */\n \n /* When a prototype says `char' or `short', really pass an `int'.  */\n "}, {"sha": "83c783521a0c387d771008147bf6d15f514d5624", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37941398e2b9214ceef85879f2cf9cc7f82feff8/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37941398e2b9214ceef85879f2cf9cc7f82feff8/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=37941398e2b9214ceef85879f2cf9cc7f82feff8", "patch": "@@ -1664,7 +1664,7 @@ __transfer_from_trampoline ()\t\t\t\t\t\\\n /* We assume that the store-condition-codes instructions store 0 for false\n    and some other value for true.  This is the value stored for true.  */\n \n-#define STORE_FLAG_VALUE -1\n+#define STORE_FLAG_VALUE (-1)\n \n /* When a prototype says `char' or `short', really pass an `int'.  */\n #define PROMOTE_PROTOTYPES 1"}, {"sha": "ca2d0f73858ca281c4e0da953653e6ccb792d639", "filename": "gcc/config/m88k/m88k.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37941398e2b9214ceef85879f2cf9cc7f82feff8/gcc%2Fconfig%2Fm88k%2Fm88k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37941398e2b9214ceef85879f2cf9cc7f82feff8/gcc%2Fconfig%2Fm88k%2Fm88k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.h?ref=37941398e2b9214ceef85879f2cf9cc7f82feff8", "patch": "@@ -1540,7 +1540,7 @@ enum reg_class { NO_REGS, AP_REG, XRF_REGS, GENERAL_REGS, AGRF_REGS,\n \n /* We assume that the store-condition-codes instructions store 0 for false\n    and some other value for true.  This is the value stored for true.  */\n-#define STORE_FLAG_VALUE -1\n+#define STORE_FLAG_VALUE (-1)\n \n /* Specify the machine mode that pointers have.\n    After generation of rtl, the compiler makes no further distinction"}, {"sha": "660736a5c924bc75304e8600f062e15f91abe956", "filename": "gcc/config/we32k/we32k.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37941398e2b9214ceef85879f2cf9cc7f82feff8/gcc%2Fconfig%2Fwe32k%2Fwe32k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37941398e2b9214ceef85879f2cf9cc7f82feff8/gcc%2Fconfig%2Fwe32k%2Fwe32k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fwe32k%2Fwe32k.h?ref=37941398e2b9214ceef85879f2cf9cc7f82feff8", "patch": "@@ -662,7 +662,7 @@ enum reg_class { NO_REGS, GENERAL_REGS,\n /* We assume that the store-condition-codes instructions store 0 for false\n    and some other value for true.  This is the value stored for true.  */\n \n-#define STORE_FLAG_VALUE -1\n+#define STORE_FLAG_VALUE (-1)\n \n /* When a prototype says `char' or `short', really pass an `int'.  */\n #define PROMOTE_PROTOTYPES 1"}]}