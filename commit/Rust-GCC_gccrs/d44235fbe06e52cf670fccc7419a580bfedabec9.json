{"sha": "d44235fbe06e52cf670fccc7419a580bfedabec9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDQ0MjM1ZmJlMDZlNTJjZjY3MGZjY2M3NDE5YTU4MGJmZWRhYmVjOQ==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2018-09-17T11:22:27Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2018-09-17T11:22:27Z"}, "message": "re PR fortran/64120 ([F03] Wrong handling of allocatable character string)\n\n2018-09-17  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/64120\n\t* trans-decl.c (gfc_get_symbol_decl): Flag allocatable, scalar\n\tcharacters with a variable length expression for deferred init.\n\t(gfc_trans_deferred_vars): Perform the assignment for these\n\tsymbols by calling gfc_conv_string_length.\n\n2018-09-17  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/64120\n\t* gfortran.dg/allocatable_scalar_14.f90 : New test.\n\nFrom-SVN: r264365", "tree": {"sha": "c57268dca7f97e743b78d13dc2c8485eaef52229", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c57268dca7f97e743b78d13dc2c8485eaef52229"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d44235fbe06e52cf670fccc7419a580bfedabec9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d44235fbe06e52cf670fccc7419a580bfedabec9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d44235fbe06e52cf670fccc7419a580bfedabec9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d44235fbe06e52cf670fccc7419a580bfedabec9/comments", "author": null, "committer": null, "parents": [{"sha": "ecfb64f692c561ef16bca0ff17b3d7e9ee14b418", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecfb64f692c561ef16bca0ff17b3d7e9ee14b418", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ecfb64f692c561ef16bca0ff17b3d7e9ee14b418"}], "stats": {"total": 44, "additions": 44, "deletions": 0}, "files": [{"sha": "3980146aef7133159dcb88fedd8c40e0174a7700", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d44235fbe06e52cf670fccc7419a580bfedabec9/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d44235fbe06e52cf670fccc7419a580bfedabec9/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=d44235fbe06e52cf670fccc7419a580bfedabec9", "patch": "@@ -1,3 +1,11 @@\n+2018-09-17  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/64120\n+\t* trans-decl.c (gfc_get_symbol_decl): Flag allocatable, scalar\n+\tcharacters with a variable length expression for deferred init.\n+\t(gfc_trans_deferred_vars): Perform the assignment for these\n+\tsymbols by calling gfc_conv_string_length.\n+\n 2018-09-17  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/85954"}, {"sha": "06066eb93dd40795d8a6c3ec6aeebb8e674fc8dd", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d44235fbe06e52cf670fccc7419a580bfedabec9/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d44235fbe06e52cf670fccc7419a580bfedabec9/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=d44235fbe06e52cf670fccc7419a580bfedabec9", "patch": "@@ -1745,6 +1745,13 @@ gfc_get_symbol_decl (gfc_symbol * sym)\n \t  && !(sym->attr.use_assoc && !intrinsic_array_parameter)))\n     gfc_defer_symbol_init (sym);\n \n+  if (sym->ts.type == BT_CHARACTER\n+      && sym->attr.allocatable\n+      && !sym->attr.dimension\n+      && sym->ts.u.cl && sym->ts.u.cl->length\n+      && sym->ts.u.cl->length->expr_type == EXPR_VARIABLE)\n+    gfc_defer_symbol_init (sym);\n+\n   /* Associate names can use the hidden string length variable\n      of their associated target.  */\n   if (sym->ts.type == BT_CHARACTER\n@@ -4603,6 +4610,13 @@ gfc_trans_deferred_vars (gfc_symbol * proc_sym, gfc_wrapped_block * block)\n \t      gfc_set_backend_locus (&sym->declared_at);\n \t      gfc_start_block (&init);\n \n+\t      if (sym->ts.type == BT_CHARACTER\n+\t\t  && sym->attr.allocatable\n+\t\t  && !sym->attr.dimension\n+\t\t  && sym->ts.u.cl && sym->ts.u.cl->length\n+\t\t  && sym->ts.u.cl->length->expr_type == EXPR_VARIABLE)\n+\t\tgfc_conv_string_length (sym->ts.u.cl, NULL, &init);\n+\n \t      if (!sym->attr.pointer)\n \t\t{\n \t\t  /* Nullify and automatic deallocation of allocatable"}, {"sha": "bf186057dc7c06c211fc220a3cf682374a02884f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d44235fbe06e52cf670fccc7419a580bfedabec9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d44235fbe06e52cf670fccc7419a580bfedabec9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d44235fbe06e52cf670fccc7419a580bfedabec9", "patch": "@@ -1,3 +1,8 @@\n+2018-09-17  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/64120\n+\t* gfortran.dg/allocatable_scalar_14.f90 : New test.\n+\n 2018-09-17  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/87301"}, {"sha": "23f6bbfffa5c3c15d3387f66b1f8456ffa5c337a", "filename": "gcc/testsuite/gfortran.dg/allocatable_scalar_14.f90", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d44235fbe06e52cf670fccc7419a580bfedabec9/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_scalar_14.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d44235fbe06e52cf670fccc7419a580bfedabec9/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_scalar_14.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_scalar_14.f90?ref=d44235fbe06e52cf670fccc7419a580bfedabec9", "patch": "@@ -0,0 +1,17 @@\n+! { dg-do run }\n+!\n+! Test the fix for PR64120 in which the initialisation of the\n+! string length of 's' was not being done.\n+!\n+! Contributed by Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+!\n+   call g(1)\n+   call g(2)\n+contains\n+  subroutine g(x)\n+      integer :: x\n+      character(len=x), allocatable :: s\n+      allocate(s)\n+      if (len(s) .ne. x) stop x\n+  end subroutine\n+end"}]}