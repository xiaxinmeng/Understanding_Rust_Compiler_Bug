{"sha": "3a13e78582d1be59cd9e5ecb24f8f1c355261648", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2ExM2U3ODU4MmQxYmU1OWNkOWU1ZWNiMjRmOGYxYzM1NTI2MTY0OA==", "commit": {"author": {"name": "Thomas Quinot", "email": "quinot@adacore.com", "date": "2010-06-14T12:56:35Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-06-14T12:56:35Z"}, "message": "socket.c: Fix wrong condition in #ifdef\n\n2010-06-14  Thomas Quinot  <quinot@adacore.com>\n\n\t* socket.c: Fix wrong condition in #ifdef\n\t* g-socket.adb, g-sothco.ads: Functions imported from socket.c that\n\ttake or return char* values can't use Interfaces.C.Strings.chars_ptr,\n\tbecause on VMS this type is a 32-bit pointer which is not compatible\n\twith the default for C pointers for code compiled with gcc on that\n\tplatform.\n\nFrom-SVN: r160735", "tree": {"sha": "da97cc34e0d943bd7188f253703c8fdb1a724081", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/da97cc34e0d943bd7188f253703c8fdb1a724081"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3a13e78582d1be59cd9e5ecb24f8f1c355261648", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a13e78582d1be59cd9e5ecb24f8f1c355261648", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a13e78582d1be59cd9e5ecb24f8f1c355261648", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a13e78582d1be59cd9e5ecb24f8f1c355261648/comments", "author": null, "committer": null, "parents": [{"sha": "001c7783c467b58d6107b6cf5e4d9b101c4d80dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/001c7783c467b58d6107b6cf5e4d9b101c4d80dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/001c7783c467b58d6107b6cf5e4d9b101c4d80dc"}], "stats": {"total": 82, "additions": 50, "deletions": 32}, "files": [{"sha": "de2536ae6f7a2a70b2119174cc933a2c453e8487", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a13e78582d1be59cd9e5ecb24f8f1c355261648/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a13e78582d1be59cd9e5ecb24f8f1c355261648/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=3a13e78582d1be59cd9e5ecb24f8f1c355261648", "patch": "@@ -1,3 +1,12 @@\n+2010-06-14  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* socket.c: Fix wrong condition in #ifdef\n+\t* g-socket.adb, g-sothco.ads: Functions imported from socket.c that\n+\ttake or return char* values can't use Interfaces.C.Strings.chars_ptr,\n+\tbecause on VMS this type is a 32-bit pointer which is not compatible\n+\twith the default for C pointers for code compiled with gcc on that\n+\tplatform.\n+\n 2010-06-14  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_util (Is_VMS_Operator): New predicate to determine whether an"}, {"sha": "2a3fe6f39af77fb6bf55be983f6c98afc02d3efe", "filename": "gcc/ada/g-socket.adb", "status": "modified", "additions": 28, "deletions": 9, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a13e78582d1be59cd9e5ecb24f8f1c355261648/gcc%2Fada%2Fg-socket.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a13e78582d1be59cd9e5ecb24f8f1c355261648/gcc%2Fada%2Fg-socket.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socket.adb?ref=3a13e78582d1be59cd9e5ecb24f8f1c355261648", "patch": "@@ -175,6 +175,10 @@ package body GNAT.Sockets is\n    function To_Service_Entry (E : Servent_Access) return Service_Entry_Type;\n    --  Conversion function\n \n+   function Value (S : System.Address) return String;\n+   --  Same as Interfaces.C.Strings.Value but taking a System.Address (on VMS,\n+   --  chars_ptr is a 32-bit pointer, and here we need a 64-bit version).\n+\n    function To_Timeval (Val : Timeval_Duration) return Timeval;\n    --  Separate Val in seconds and microseconds\n \n@@ -1318,7 +1322,6 @@ package body GNAT.Sockets is\n       use Interfaces.C.Strings;\n \n       Img    : aliased char_array := To_C (Image);\n-      Cp     : constant chars_ptr := To_Chars_Ptr (Img'Unchecked_Access);\n       Addr   : aliased C.int;\n       Res    : C.int;\n       Result : Inet_Addr_Type;\n@@ -1331,7 +1334,7 @@ package body GNAT.Sockets is\n          Raise_Socket_Error (SOSC.EINVAL);\n       end if;\n \n-      Res := Inet_Pton (SOSC.AF_INET, Cp, Addr'Address);\n+      Res := Inet_Pton (SOSC.AF_INET, Img'Address, Addr'Address);\n \n       if Res < 0 then\n          Raise_Socket_Error (Socket_Errno);\n@@ -2342,12 +2345,12 @@ package body GNAT.Sockets is\n \n    begin\n       Aliases_Count := 0;\n-      while Hostent_H_Alias (E, C.int (Aliases_Count)) /= Null_Ptr loop\n+      while Hostent_H_Alias (E, C.int (Aliases_Count)) /= Null_Address loop\n          Aliases_Count := Aliases_Count + 1;\n       end loop;\n \n       Addresses_Count := 0;\n-      while Hostent_H_Addr (E, C.int (Addresses_Count)) /= Null_Ptr loop\n+      while Hostent_H_Addr (E, C.int (Addresses_Count)) /= Null_Address loop\n          Addresses_Count := Addresses_Count + 1;\n       end loop;\n \n@@ -2366,11 +2369,8 @@ package body GNAT.Sockets is\n          for J in Result.Addresses'Range loop\n             declare\n                Addr : In_Addr;\n-               function To_Address is\n-                 new Ada.Unchecked_Conversion (chars_ptr, System.Address);\n                for Addr'Address use\n-                 To_Address (Hostent_H_Addr\n-                               (E, C.int (J - Result.Addresses'First)));\n+                 Hostent_H_Addr (E, C.int (J - Result.Addresses'First));\n                pragma Import (Ada, Addr);\n             begin\n                To_Inet_Addr (Addr, Result.Addresses (J));\n@@ -2457,7 +2457,7 @@ package body GNAT.Sockets is\n \n    begin\n       Aliases_Count := 0;\n-      while Servent_S_Alias (E, C.int (Aliases_Count)) /= Null_Ptr loop\n+      while Servent_S_Alias (E, C.int (Aliases_Count)) /= Null_Address loop\n          Aliases_Count := Aliases_Count + 1;\n       end loop;\n \n@@ -2510,6 +2510,25 @@ package body GNAT.Sockets is\n       return (S, uS);\n    end To_Timeval;\n \n+   -----------\n+   -- Value --\n+   -----------\n+\n+   function Value (S : System.Address) return String is\n+      Str : String (1 .. Positive'Last);\n+      for Str'Address use S;\n+      pragma Import (Ada, Str);\n+\n+      Terminator : Positive := Str'First;\n+\n+   begin\n+      while Str (Terminator) /= ASCII.NUL loop\n+         Terminator := Terminator + 1;\n+      end loop;\n+\n+      return Str (1 .. Terminator - 1);\n+   end Value;\n+\n    -----------\n    -- Write --\n    -----------"}, {"sha": "63a6a22880637f153ae1dba47adf229ccd1e25bb", "filename": "gcc/ada/g-sothco.ads", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a13e78582d1be59cd9e5ecb24f8f1c355261648/gcc%2Fada%2Fg-sothco.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a13e78582d1be59cd9e5ecb24f8f1c355261648/gcc%2Fada%2Fg-sothco.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-sothco.ads?ref=3a13e78582d1be59cd9e5ecb24f8f1c355261648", "patch": "@@ -38,7 +38,6 @@ with Ada.Unchecked_Conversion;\n \n with Interfaces.C;\n with Interfaces.C.Pointers;\n-with Interfaces.C.Strings;\n \n package GNAT.Sockets.Thin_Common is\n \n@@ -215,11 +214,16 @@ package GNAT.Sockets.Thin_Common is\n    pragma Convention (C, Hostent_Access);\n    --  Access to host entry\n \n+   --  Note: the hostent and servent accessors that return char*\n+   --  values are compiled with GCC, and on VMS they always return\n+   --  64-bit pointers, so we can't use C.Strings.chars_ptr, which\n+   --  on VMS is 32 bits.\n+\n    function Hostent_H_Name\n-     (E : Hostent_Access) return C.Strings.chars_ptr;\n+     (E : Hostent_Access) return System.Address;\n \n    function Hostent_H_Alias\n-     (E : Hostent_Access; I : C.int) return C.Strings.chars_ptr;\n+     (E : Hostent_Access; I : C.int) return System.Address;\n \n    function Hostent_H_Addrtype\n      (E : Hostent_Access) return C.int;\n@@ -228,7 +232,7 @@ package GNAT.Sockets.Thin_Common is\n      (E : Hostent_Access) return C.int;\n \n    function Hostent_H_Addr\n-     (E : Hostent_Access; Index : C.int) return C.Strings.chars_ptr;\n+     (E : Hostent_Access; Index : C.int) return System.Address;\n \n    ---------------------\n    -- Service entries --\n@@ -246,16 +250,16 @@ package GNAT.Sockets.Thin_Common is\n    --  Access to service entry\n \n    function Servent_S_Name\n-     (E : Servent_Access) return C.Strings.chars_ptr;\n+     (E : Servent_Access) return System.Address;\n \n    function Servent_S_Alias\n-     (E : Servent_Access; Index : C.int) return C.Strings.chars_ptr;\n+     (E : Servent_Access; Index : C.int) return System.Address;\n \n    function Servent_S_Port\n      (E : Servent_Access) return C.unsigned_short;\n \n    function Servent_S_Proto\n-     (E : Servent_Access) return C.Strings.chars_ptr;\n+     (E : Servent_Access) return System.Address;\n \n    ------------------\n    -- NetDB access --\n@@ -378,7 +382,7 @@ package GNAT.Sockets.Thin_Common is\n \n    function Inet_Pton\n      (Af  : C.int;\n-      Cp  : C.Strings.chars_ptr;\n+      Cp  : System.Address;\n       Inp : System.Address) return C.int;\n \n    function C_Ioctl"}, {"sha": "e68f4359782a00927cfa9e9c659f032fbae7f79b", "filename": "gcc/ada/socket.c", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a13e78582d1be59cd9e5ecb24f8f1c355261648/gcc%2Fada%2Fsocket.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a13e78582d1be59cd9e5ecb24f8f1c355261648/gcc%2Fada%2Fsocket.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsocket.c?ref=3a13e78582d1be59cd9e5ecb24f8f1c355261648", "patch": "@@ -50,21 +50,7 @@\n  */\n typedef char *__netdb_char_ptr __attribute__ (( mode (SI) ));\n typedef __netdb_char_ptr *__netdb_char_ptr_ptr __attribute__ (( mode (SI) ));\n-# define NEED_STRUCT_xxxENT\n \n-#elif defined (__vxworks)\n-/*\n- * For VxWorks we emulate getXXXbyYYY using the proprietary VxWorks API.\n- */\n-typedef char *__netdb_char_ptr;\n-typedef __netdb_char_ptr *__netdb_char_ptr_ptr;\n-# define NEED_STRUCT_xxxENT\n-\n-#else\n-# undef NEED_STRUCT_xxxENT\n-#endif\n-\n-#ifdef NEED_STRUCT_xxxENT\n struct hostent {\n   __netdb_char_ptr     h_name;\n   __netdb_char_ptr_ptr h_aliases;\n@@ -125,7 +111,7 @@ extern int __gnat_hostent_h_addrtype (struct hostent *);\n extern int __gnat_hostent_h_length (struct hostent *);\n extern char * __gnat_hostent_h_addr (struct hostent *, int);\n \n-#if defined (__vxworks) || defined (_WIN32)\n+#ifndef HAVE_INET_PTON\n extern int  __gnat_inet_pton (int, const char *, void *);\n #endif\n \f"}]}