{"sha": "1124098bb22cbd60a4cdc18062ea81a79a1e8468", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTEyNDA5OGJiMjJjYmQ2MGE0Y2RjMTgwNjJlYTgxYTc5YTFlODQ2OA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2010-01-20T11:30:05Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2010-01-20T11:30:05Z"}, "message": "sel-sched.c (create_speculation_check): Remove set but not used variable twin.\n\n\t* sel-sched.c (create_speculation_check): Remove set but not used\n\tvariable twin.\n\t(try_transformation_cache): Remove set but not used variable ds.\n\t(calculate_privileged_insns): Remove set but not used variables\n\tcur_insn and min_spec_insn.\n\t(find_best_expr): Remove set but not used variable avail_n.\n\t* tree-predcom.c (base_names_in_chain_on): Remove set but not used\n\tvariable e.\n\t* cgraphunit.c (assemble_thunk): Remove set but not used variable\n\tfalse_label.\n\t* haifa-sched.c (remove_notes): Remove set but not used variable prev.\n\t* graphite-clast-to-gimple.c (gloog): Remove set but not used variable\n\tnew_scop_exit_edge.\n\n\t* decl.c (create_array_type_for_decl): Remove set but not used\n\tvariable error_msg.  Remove break stmts after return stmts.\n\nFrom-SVN: r156072", "tree": {"sha": "259c71279a44a29f881a32db911e94525a7fe98c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/259c71279a44a29f881a32db911e94525a7fe98c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1124098bb22cbd60a4cdc18062ea81a79a1e8468", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1124098bb22cbd60a4cdc18062ea81a79a1e8468", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1124098bb22cbd60a4cdc18062ea81a79a1e8468", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1124098bb22cbd60a4cdc18062ea81a79a1e8468/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "83a5ef25d3fcf70ca677a6bfe2e94a1302ab7f1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83a5ef25d3fcf70ca677a6bfe2e94a1302ab7f1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83a5ef25d3fcf70ca677a6bfe2e94a1302ab7f1a"}], "stats": {"total": 80, "additions": 35, "deletions": 45}, "files": [{"sha": "35fba8e70ff17e94fe99ca809c693030d925f3b8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1124098bb22cbd60a4cdc18062ea81a79a1e8468/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1124098bb22cbd60a4cdc18062ea81a79a1e8468/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1124098bb22cbd60a4cdc18062ea81a79a1e8468", "patch": "@@ -1,3 +1,19 @@\n+2010-01-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* sel-sched.c (create_speculation_check): Remove set but not used\n+\tvariable twin.\n+\t(try_transformation_cache): Remove set but not used variable ds.\n+\t(calculate_privileged_insns): Remove set but not used variables\n+\tcur_insn and min_spec_insn.\n+\t(find_best_expr): Remove set but not used variable avail_n.\n+\t* tree-predcom.c (base_names_in_chain_on): Remove set but not used\n+\tvariable e.\n+\t* cgraphunit.c (assemble_thunk): Remove set but not used variable\n+\tfalse_label.\n+\t* haifa-sched.c (remove_notes): Remove set but not used variable prev.\n+\t* graphite-clast-to-gimple.c (gloog): Remove set but not used variable\n+\tnew_scop_exit_edge.\n+\n 2010-01-20  Felyza Wishbringer  <fwishbringer@gmail.com>\n \n \tPR bootstrap/42786"}, {"sha": "9cd5f16f4889835598d4b6d6d15cb4114b08993c", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1124098bb22cbd60a4cdc18062ea81a79a1e8468/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1124098bb22cbd60a4cdc18062ea81a79a1e8468/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=1124098bb22cbd60a4cdc18062ea81a79a1e8468", "patch": "@@ -1465,7 +1465,7 @@ assemble_thunk (struct cgraph_node *node)\n \n       if (restmp && !this_adjusting)\n         {\n-\t  tree true_label = NULL_TREE, false_label = NULL_TREE;\n+\t  tree true_label = NULL_TREE;\n \n \t  if (TREE_CODE (TREE_TYPE (restmp)) == POINTER_TYPE)\n \t    {\n@@ -1479,7 +1479,6 @@ assemble_thunk (struct cgraph_node *node)\n \t      else_bb = create_basic_block (NULL, (void *) 0, else_bb);\n \t      remove_edge (single_succ_edge (bb));\n \t      true_label = gimple_block_label (then_bb);\n-\t      false_label = gimple_block_label (else_bb);\n \t      stmt = gimple_build_cond (NE_EXPR, restmp,\n \t      \t\t\t\tfold_convert (TREE_TYPE (restmp),\n \t\t\t\t\t\t      integer_zero_node),"}, {"sha": "8059a93ab7ef1d750710e6a20a775a53bafba3d4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1124098bb22cbd60a4cdc18062ea81a79a1e8468/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1124098bb22cbd60a4cdc18062ea81a79a1e8468/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1124098bb22cbd60a4cdc18062ea81a79a1e8468", "patch": "@@ -1,3 +1,8 @@\n+2010-01-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* decl.c (create_array_type_for_decl): Remove set but not used\n+\tvariable error_msg.  Remove break stmts after return stmts.\n+\n 2010-01-19  Dodji Seketeli  <dodji@redhat.com>\n \n \t* error.c (dump_template_parms, count_non_default_template_args):"}, {"sha": "962477161cb0302f80521f33f7f915f9187cdee0", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1124098bb22cbd60a4cdc18062ea81a79a1e8468/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1124098bb22cbd60a4cdc18062ea81a79a1e8468/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=1124098bb22cbd60a4cdc18062ea81a79a1e8468", "patch": "@@ -7422,15 +7422,11 @@ static tree\n create_array_type_for_decl (tree name, tree type, tree size)\n {\n   tree itype = NULL_TREE;\n-  const char* error_msg;\n \n   /* If things have already gone awry, bail now.  */\n   if (type == error_mark_node || size == error_mark_node)\n     return error_mark_node;\n \n-  /* Assume that everything will go OK.  */\n-  error_msg = NULL;\n-\n   /* If there are some types which cannot be array elements,\n      issue an error-message and return.  */\n   switch (TREE_CODE (type))\n@@ -7441,31 +7437,27 @@ create_array_type_for_decl (tree name, tree type, tree size)\n       else\n         error (\"creating array of void\");\n       return error_mark_node;\n-      break;\n \n     case FUNCTION_TYPE:\n       if (name)\n         error (\"declaration of %qD as array of functions\", name);\n       else\n         error (\"creating array of functions\");\n       return error_mark_node;\n-      break;\n \n     case REFERENCE_TYPE:\n       if (name)\n         error (\"declaration of %qD as array of references\", name);\n       else\n         error (\"creating array of references\");\n       return error_mark_node;\n-      break;\n \n     case METHOD_TYPE:\n       if (name)\n         error (\"declaration of %qD as array of function members\", name);\n       else\n         error (\"creating array of function members\");\n       return error_mark_node;\n-      break;\n \n     default:\n       break;"}, {"sha": "cc48859b37e1629162ab152a85067c8f2a59076c", "filename": "gcc/graphite-clast-to-gimple.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1124098bb22cbd60a4cdc18062ea81a79a1e8468/gcc%2Fgraphite-clast-to-gimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1124098bb22cbd60a4cdc18062ea81a79a1e8468/gcc%2Fgraphite-clast-to-gimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-clast-to-gimple.c?ref=1124098bb22cbd60a4cdc18062ea81a79a1e8468", "patch": "@@ -1430,7 +1430,6 @@ create_params_index (htab_t index_table, CloogProgram *prog) {\n bool\n gloog (scop_p scop, htab_t bb_pbb_mapping)\n {\n-  edge new_scop_exit_edge = NULL;\n   VEC (tree, heap) *newivs = VEC_alloc (tree, heap, 10);\n   loop_p context_loop;\n   sese region = SCOP_REGION (scop);\n@@ -1471,10 +1470,10 @@ gloog (scop_p scop, htab_t bb_pbb_mapping)\n \n   create_params_index (params_index, pc.prog);\n \n-  new_scop_exit_edge = translate_clast (region, context_loop, pc.stmt,\n-\t\t\t\t\tif_region->true_region->entry,\n-\t\t\t\t\trename_map, &newivs, newivs_index,\n-\t\t\t\t\tbb_pbb_mapping, 1, params_index);\n+  translate_clast (region, context_loop, pc.stmt,\n+\t\t   if_region->true_region->entry,\n+\t\t   rename_map, &newivs, newivs_index,\n+\t\t   bb_pbb_mapping, 1, params_index);\n   graphite_verify ();\n   sese_adjust_liveout_phis (region, rename_map,\n \t\t\t    if_region->region->exit->src,"}, {"sha": "b7f0cfce359ced98e1cfb5c4b4978f84cacabe8d", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1124098bb22cbd60a4cdc18062ea81a79a1e8468/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1124098bb22cbd60a4cdc18062ea81a79a1e8468/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=1124098bb22cbd60a4cdc18062ea81a79a1e8468", "patch": "@@ -1835,27 +1835,22 @@ concat_note_lists (rtx from_end, rtx *to_endp)\n void\n remove_notes (rtx head, rtx tail)\n {\n-  rtx next_tail, prev, insn, next;\n+  rtx next_tail, insn, next;\n \n   note_list = 0;\n   if (head == tail && !INSN_P (head))\n     return;\n \n   next_tail = NEXT_INSN (tail);\n-  prev = PREV_INSN (head);\n   for (insn = head; insn != next_tail; insn = next)\n     {\n       next = NEXT_INSN (insn);\n       if (!NOTE_P (insn))\n-\t{\n-\t  prev = insn;\n-\t  continue;\n-\t}\n+\tcontinue;\n \n       switch (NOTE_KIND (insn))\n \t{\n \tcase NOTE_INSN_BASIC_BLOCK:\n-\t  prev = insn;\n \t  continue;\n \n \tcase NOTE_INSN_EPILOGUE_BEG:"}, {"sha": "0981440fde77da4b9a024e871859c8f0b16c1c4c", "filename": "gcc/sel-sched.c", "status": "modified", "additions": 7, "deletions": 17, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1124098bb22cbd60a4cdc18062ea81a79a1e8468/gcc%2Fsel-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1124098bb22cbd60a4cdc18062ea81a79a1e8468/gcc%2Fsel-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsel-sched.c?ref=1124098bb22cbd60a4cdc18062ea81a79a1e8468", "patch": "@@ -1866,14 +1866,13 @@ create_speculation_check (expr_t c_expr, ds_t check_ds, insn_t orig_insn)\n   if (recovery_block != NULL)\n     {\n       rtx twin_rtx;\n-      insn_t twin;\n \n       twin_rtx = copy_rtx (PATTERN (EXPR_INSN_RTX (c_expr)));\n       twin_rtx = create_insn_rtx_from_pattern (twin_rtx, NULL_RTX);\n-      twin = sel_gen_recovery_insn_from_rtx_after (twin_rtx,\n-\t\t\t\t\t\t   INSN_EXPR (orig_insn),\n-\t\t\t\t\t\t   INSN_SEQNO (insn),\n-\t\t\t\t\t\t   bb_note (recovery_block));\n+      sel_gen_recovery_insn_from_rtx_after (twin_rtx,\n+\t\t\t\t\t    INSN_EXPR (orig_insn),\n+\t\t\t\t\t    INSN_SEQNO (insn),\n+\t\t\t\t\t    bb_note (recovery_block));\n     }\n \n   /* If we've generated a data speculation check, make sure\n@@ -2411,10 +2410,6 @@ try_transformation_cache (expr_t expr, insn_t insn,\n         EXPR_TARGET_AVAILABLE (expr) = false;\n       if (pti->type == TRANS_SPECULATION)\n         {\n-          ds_t ds;\n-\n-          ds = EXPR_SPEC_DONE_DS (expr);\n-\n           EXPR_SPEC_DONE_DS (expr) = pti->ds;\n           EXPR_NEEDS_SPEC_CHECK_P (expr) |= pti->needs_check;\n         }\n@@ -4216,7 +4211,6 @@ static int\n calculate_privileged_insns (void)\n {\n   expr_t cur_expr, min_spec_expr = NULL;\n-  insn_t cur_insn, min_spec_insn;\n   int privileged_n = 0, i;\n \n   for (i = 0; i < ready.n_ready; i++)\n@@ -4225,12 +4219,8 @@ calculate_privileged_insns (void)\n         continue;\n \n       if (! min_spec_expr)\n-        {\n-          min_spec_insn = ready_element (&ready, i);\n-          min_spec_expr = find_expr_for_ready (i, true);\n-        }\n+\tmin_spec_expr = find_expr_for_ready (i, true);\n \n-      cur_insn = ready_element (&ready, i);\n       cur_expr = find_expr_for_ready (i, true);\n \n       if (EXPR_SPEC (cur_expr) > EXPR_SPEC (min_spec_expr))\n@@ -4384,7 +4374,7 @@ find_best_expr (av_set_t *av_vliw_ptr, blist_t bnds, fence_t fence,\n   best = fill_ready_list (av_vliw_ptr, bnds, fence, pneed_stall);\n   if (best == NULL && ready.n_ready > 0)\n     {\n-      int privileged_n, index, avail_n;\n+      int privileged_n, index;\n \n       can_issue_more = invoke_reorder_hooks (fence);\n       if (can_issue_more > 0)\n@@ -4393,7 +4383,7 @@ find_best_expr (av_set_t *av_vliw_ptr, blist_t bnds, fence_t fence,\n              scheduled due to liveness restrictions on its destination register.\n              In the future, we'd like to choose once and then just probe insns\n              in the order of their priority.  */\n-          avail_n = invoke_dfa_lookahead_guard ();\n+          invoke_dfa_lookahead_guard ();\n           privileged_n = calculate_privileged_insns ();\n           can_issue_more = choose_best_insn (fence, privileged_n, &index);\n           if (can_issue_more)"}, {"sha": "ae59cd9fe79c1f64a13c6b1aa9de249555e19370", "filename": "gcc/tree-predcom.c", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1124098bb22cbd60a4cdc18062ea81a79a1e8468/gcc%2Ftree-predcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1124098bb22cbd60a4cdc18062ea81a79a1e8468/gcc%2Ftree-predcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-predcom.c?ref=1124098bb22cbd60a4cdc18062ea81a79a1e8468", "patch": "@@ -1889,7 +1889,6 @@ base_names_in_chain_on (struct loop *loop, tree name, tree var)\n {\n   gimple stmt, phi;\n   imm_use_iterator iter;\n-  edge e;\n \n   SSA_NAME_VAR (name) = var;\n \n@@ -1908,11 +1907,6 @@ base_names_in_chain_on (struct loop *loop, tree name, tree var)\n       if (!phi)\n \treturn;\n \n-      if (gimple_bb (phi) == loop->header)\n-\te = loop_latch_edge (loop);\n-      else\n-\te = single_pred_edge (gimple_bb (stmt));\n-\n       name = PHI_RESULT (phi);\n       SSA_NAME_VAR (name) = var;\n     }"}]}