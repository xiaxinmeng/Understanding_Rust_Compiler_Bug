{"sha": "9e28a77462f81a9a2ab9064d768bd7c9484047e1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWUyOGE3NzQ2MmY4MWE5YTJhYjkwNjRkNzY4YmQ3Yzk0ODQwNDdlMQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2016-09-30T13:43:37Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-09-30T13:43:37Z"}, "message": "Remove use of std::abs in experimental::{gcd,lcm}\n\n\tPR libstdc++/77801\n\t* include/experimental/numeric: Include <numeric>.\n\t(__abs): Define.\n\t(gcd, lcm): Use __abs instead of std::abs.\n\t* testsuite/experimental/numeric/77801.cc: New test.\n\t* testsuite/experimental/numeric/gcd.cc: Test unsigned inputs.\n\t* testsuite/experimental/numeric/lcm.cc: Likewise.\n\nFrom-SVN: r240656", "tree": {"sha": "77e5c5ef50d1cdbc1f0e24f43440f0714a6d9611", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/77e5c5ef50d1cdbc1f0e24f43440f0714a6d9611"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9e28a77462f81a9a2ab9064d768bd7c9484047e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e28a77462f81a9a2ab9064d768bd7c9484047e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e28a77462f81a9a2ab9064d768bd7c9484047e1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e28a77462f81a9a2ab9064d768bd7c9484047e1/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e70bbc6f1f55a9532219812309ec22b04b539367", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e70bbc6f1f55a9532219812309ec22b04b539367", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e70bbc6f1f55a9532219812309ec22b04b539367"}], "stats": {"total": 61, "additions": 57, "deletions": 4}, "files": [{"sha": "0bd62c549b83734dd273b9c00e6a93a98a6b7883", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e28a77462f81a9a2ab9064d768bd7c9484047e1/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e28a77462f81a9a2ab9064d768bd7c9484047e1/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=9e28a77462f81a9a2ab9064d768bd7c9484047e1", "patch": "@@ -1,3 +1,13 @@\n+2016-09-30  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/77801\n+\t* include/experimental/numeric: Include <numeric>.\n+\t(__abs): Define.\n+\t(gcd, lcm): Use __abs instead of std::abs.\n+\t* testsuite/experimental/numeric/77801.cc: New test.\n+\t* testsuite/experimental/numeric/gcd.cc: Test unsigned inputs.\n+\t* testsuite/experimental/numeric/lcm.cc: Likewise.\n+\n 2016-09-29  Ville Voutilainen  <ville.voutilainen@gmail.com>\n \n \tMake optional::reset noexcept, make optional::value"}, {"sha": "50897722682fa71c25342d7eaf499e6707804127", "filename": "libstdc++-v3/include/experimental/numeric", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e28a77462f81a9a2ab9064d768bd7c9484047e1/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fnumeric", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e28a77462f81a9a2ab9064d768bd7c9484047e1/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fnumeric", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fnumeric?ref=9e28a77462f81a9a2ab9064d768bd7c9484047e1", "patch": "@@ -39,8 +39,8 @@\n # include <bits/c++14_warning.h>\n #else\n \n+#include <numeric>\n #include <experimental/type_traits>\n-#include <cmath>\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n@@ -52,6 +52,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #define __cpp_lib_experimental_gcd_lcm 201411\n \n+  // std::abs is not constexpr and doesn't support unsigned integers.\n+  template<typename _Tp>\n+    constexpr\n+    enable_if_t<__and_<is_integral<_Tp>, is_signed<_Tp>>::value, _Tp>\n+    __abs(_Tp __val)\n+    { return __val < 0 ? -__val : __val; }\n+\n+  template<typename _Tp>\n+    constexpr\n+    enable_if_t<__and_<is_integral<_Tp>, is_unsigned<_Tp>>::value, _Tp>\n+    __abs(_Tp __val)\n+    { return __val; }\n+\n   // Greatest common divisor\n   template<typename _Mn, typename _Nn>\n     constexpr common_type_t<_Mn, _Nn>\n@@ -60,8 +73,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static_assert(is_integral<_Mn>::value, \"arguments to gcd are integers\");\n       static_assert(is_integral<_Nn>::value, \"arguments to gcd are integers\");\n \n-      return __m == 0 ? std::abs(__n)\n-\t: __n == 0 ? std::abs(__m)\n+      return __m == 0 ? fundamentals_v2::__abs(__n)\n+\t: __n == 0 ? fundamentals_v2::__abs(__m)\n \t: fundamentals_v2::gcd(__n, __m % __n);\n     }\n \n@@ -74,7 +87,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static_assert(is_integral<_Nn>::value, \"arguments to lcm are integers\");\n \n       return (__m != 0 && __n != 0)\n-\t? (std::abs(__m) / fundamentals_v2::gcd(__m, __n)) * std::abs(__n)\n+\t? (fundamentals_v2::__abs(__m) / fundamentals_v2::gcd(__m, __n))\n+\t  * fundamentals_v2::__abs(__n)\n \t: 0;\n     }\n "}, {"sha": "c4c8bfbfa449e489ea8cd6317ea4243c0c8b5877", "filename": "libstdc++-v3/testsuite/experimental/numeric/77801.cc", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e28a77462f81a9a2ab9064d768bd7c9484047e1/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnumeric%2F77801.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e28a77462f81a9a2ab9064d768bd7c9484047e1/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnumeric%2F77801.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnumeric%2F77801.cc?ref=9e28a77462f81a9a2ab9064d768bd7c9484047e1", "patch": "@@ -0,0 +1,22 @@\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++14 } }\n+\n+#include <cstdlib>\n+#include <experimental/numeric>\n+constexpr int i = std::experimental::gcd(4L, 5L); // PR libstdc++/77801"}, {"sha": "b3345dc5e6d79380a1db9260167f54c155d777e2", "filename": "libstdc++-v3/testsuite/experimental/numeric/gcd.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e28a77462f81a9a2ab9064d768bd7c9484047e1/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnumeric%2Fgcd.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e28a77462f81a9a2ab9064d768bd7c9484047e1/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnumeric%2Fgcd.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnumeric%2Fgcd.cc?ref=9e28a77462f81a9a2ab9064d768bd7c9484047e1", "patch": "@@ -25,3 +25,7 @@ static_assert(lcm(21, 6) == 42, \"\");\n static_assert(lcm(41, 0) == 0, \"LCD with zero is zero\");\n static_assert(lcm(0, 7) == 0, \"LCD with zero is zero\");\n static_assert(lcm(0, 0) == 0, \"no division by zero\");\n+\n+static_assert(lcm(1u, 2) == 2, \"unsigned and signed\");\n+static_assert(lcm(3, 4u) == 12, \"signed and unsigned\");\n+static_assert(lcm(5u, 6u) == 30, \"unsigned and unsigned\");"}, {"sha": "d90c15275413e1e87704dd492cfbff78dc153ea6", "filename": "libstdc++-v3/testsuite/experimental/numeric/lcm.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e28a77462f81a9a2ab9064d768bd7c9484047e1/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnumeric%2Flcm.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e28a77462f81a9a2ab9064d768bd7c9484047e1/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnumeric%2Flcm.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnumeric%2Flcm.cc?ref=9e28a77462f81a9a2ab9064d768bd7c9484047e1", "patch": "@@ -29,3 +29,6 @@ static_assert( gcd(0, 13) == 13, \"GCD of any number and 0 is that number\" );\n static_assert( gcd(29, 0) == 29, \"GCD of any number and 0 is that number\" );\n static_assert( gcd(0, 0) == 0, \"\" );\n \n+static_assert(gcd(1u, 2) == 1, \"unsigned and signed\");\n+static_assert(gcd(3, 4u) == 1, \"signed and unsigned\");\n+static_assert(gcd(5u, 6u) == 1, \"unsigned and unsigned\");"}]}