{"sha": "fcd424cecbe8874404fc92520954ec806e7886fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmNkNDI0Y2VjYmU4ODc0NDA0ZmM5MjUyMDk1NGVjODA2ZTc4ODZmYw==", "commit": {"author": {"name": "Tom de Vries", "email": "tom@codesourcery.com", "date": "2015-05-13T09:06:18Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2015-05-13T09:06:18Z"}, "message": "Gimplify va_arg ap based on do_deref\n\n2015-05-13  Tom de Vries  <tom@codesourcery.com>\n\n\tPR tree-optimization/66010\n\t* gimplify.h (gimplify_va_arg_internal): Remove declaration.\n\t* gimplify.c (gimplify_va_arg_internal): Remove and inline into ...\n\t* tree-stdarg.c (expand_ifn_va_arg_1): ... here.  Choose between lval\n\tand rval based on do_deref.\n\nFrom-SVN: r223120", "tree": {"sha": "329af8074710a22884ff6b12ff17c6f07afbea73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/329af8074710a22884ff6b12ff17c6f07afbea73"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fcd424cecbe8874404fc92520954ec806e7886fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcd424cecbe8874404fc92520954ec806e7886fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fcd424cecbe8874404fc92520954ec806e7886fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcd424cecbe8874404fc92520954ec806e7886fc/comments", "author": null, "committer": null, "parents": [{"sha": "7947dd0bdf9cfe2a704355b1e5d7c7f786c67b9b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7947dd0bdf9cfe2a704355b1e5d7c7f786c67b9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7947dd0bdf9cfe2a704355b1e5d7c7f786c67b9b"}], "stats": {"total": 44, "additions": 16, "deletions": 28}, "files": [{"sha": "c628832552423bdd38152c252018f45fa66267cf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcd424cecbe8874404fc92520954ec806e7886fc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcd424cecbe8874404fc92520954ec806e7886fc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fcd424cecbe8874404fc92520954ec806e7886fc", "patch": "@@ -1,3 +1,11 @@\n+2015-05-13  Tom de Vries  <tom@codesourcery.com>\n+\n+\tPR tree-optimization/66010\n+\t* gimplify.h (gimplify_va_arg_internal): Remove declaration.\n+\t* gimplify.c (gimplify_va_arg_internal): Remove and inline into ...\n+\t* tree-stdarg.c (expand_ifn_va_arg_1): ... here.  Choose between lval\n+\tand rval based on do_deref.\n+\n 2015-05-13  Ilya Enkovich  <ilya.enkovich@intel.com>\n \n \tPR target/65103"}, {"sha": "484647896e22b174fd38a1f0e410cf4c29c0e110", "filename": "gcc/gimplify.c", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcd424cecbe8874404fc92520954ec806e7886fc/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcd424cecbe8874404fc92520954ec806e7886fc/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=fcd424cecbe8874404fc92520954ec806e7886fc", "patch": "@@ -9302,32 +9302,6 @@ dummy_object (tree type)\n   return build2 (MEM_REF, type, t, t);\n }\n \n-/* Call the target expander for evaluating a va_arg call of VALIST\n-   and TYPE.  */\n-\n-tree\n-gimplify_va_arg_internal (tree valist, tree type, gimple_seq *pre_p,\n-\t\t\t  gimple_seq *post_p)\n-{\n-  tree have_va_type = TREE_TYPE (valist);\n-  tree cano_type = targetm.canonical_va_list_type (have_va_type);\n-\n-  if (cano_type != NULL_TREE)\n-    have_va_type = cano_type;\n-\n-  /* Make it easier for the backends by protecting the valist argument\n-     from multiple evaluations.  */\n-  if (TREE_CODE (have_va_type) == ARRAY_TYPE)\n-    {\n-      gcc_assert (TREE_CODE (TREE_TYPE (valist)) != ARRAY_TYPE);\n-      gimplify_expr (&valist, pre_p, post_p, is_gimple_val, fb_rvalue);\n-    }\n-  else\n-    gimplify_expr (&valist, pre_p, post_p, is_gimple_min_lval, fb_lvalue);\n-\n-  return targetm.gimplify_va_arg_expr (valist, type, pre_p, post_p);\n-}\n-\n /* Gimplify __builtin_va_arg, aka VA_ARG_EXPR, which is not really a\n    builtin function, but a very special sort of operator.  */\n "}, {"sha": "615925c1a78136892b3f2e250b64c4224c1b9e16", "filename": "gcc/gimplify.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcd424cecbe8874404fc92520954ec806e7886fc/gcc%2Fgimplify.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcd424cecbe8874404fc92520954ec806e7886fc/gcc%2Fgimplify.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.h?ref=fcd424cecbe8874404fc92520954ec806e7886fc", "patch": "@@ -82,7 +82,6 @@ extern void gimplify_function_tree (tree);\n extern enum gimplify_status gimplify_va_arg_expr (tree *, gimple_seq *,\n \t\t\t\t\t\t  gimple_seq *);\n gimple gimplify_assign (tree, tree, gimple_seq *);\n-extern tree gimplify_va_arg_internal (tree, tree, gimple_seq *, gimple_seq *);\n \n /* Return true if gimplify_one_sizepos doesn't need to gimplify\n    expr (when in TYPE_SIZE{,_UNIT} and similar type/decl size/bitsize"}, {"sha": "f8ff70ae38feca224ac2c73f9073c41e074b400d", "filename": "gcc/tree-stdarg.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcd424cecbe8874404fc92520954ec806e7886fc/gcc%2Ftree-stdarg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcd424cecbe8874404fc92520954ec806e7886fc/gcc%2Ftree-stdarg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-stdarg.c?ref=fcd424cecbe8874404fc92520954ec806e7886fc", "patch": "@@ -1059,7 +1059,14 @@ expand_ifn_va_arg_1 (function *fun)\n \n \tpush_gimplify_context (false);\n \n-\texpr = gimplify_va_arg_internal (ap, type, &pre, &post);\n+\t/* Make it easier for the backends by protecting the valist argument\n+\t   from multiple evaluations.  */\n+\tif (do_deref == integer_one_node)\n+\t  gimplify_expr (&ap, &pre, &post, is_gimple_min_lval, fb_lvalue);\n+\telse\n+\t  gimplify_expr (&ap, &pre, &post, is_gimple_val, fb_rvalue);\n+\n+\texpr = targetm.gimplify_va_arg_expr (ap, type, &pre, &post);\n \n \tlhs = gimple_call_lhs (stmt);\n \tif (lhs != NULL_TREE)"}]}