{"sha": "8950288333162caa68b85c71ed2d02f40976ddb9", "node_id": "C_kwDOANBUbNoAKDg5NTAyODgzMzMxNjJjYWE2OGI4NWM3MWVkMmQwMmY0MDk3NmRkYjk", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2022-10-17T16:15:16Z"}, "committer": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2022-10-17T16:15:16Z"}, "message": "Fortran: Fixes for kind=4 characters strings [PR107266]\n\n\tPR fortran/107266\n\ngcc/fortran/\n\t* trans-expr.cc (gfc_conv_string_parameter): Use passed\n\ttype to honor character kind.\n\t* trans-types.cc (gfc_sym_type): Honor character kind.\n\t* trans-decl.cc (gfc_conv_cfi_to_gfc): Fix handling kind=4\n\tcharacter strings.\n\ngcc/testsuite/\n\t* gfortran.dg/char4_decl.f90: New test.\n\t* gfortran.dg/char4_decl-2.f90: New test.", "tree": {"sha": "20b2d8a10c970cca56a552c01bfc66782031a456", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/20b2d8a10c970cca56a552c01bfc66782031a456"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8950288333162caa68b85c71ed2d02f40976ddb9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8950288333162caa68b85c71ed2d02f40976ddb9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8950288333162caa68b85c71ed2d02f40976ddb9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8950288333162caa68b85c71ed2d02f40976ddb9/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3bd5d9a28e1ce4d1615902397b5ad50909839d6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bd5d9a28e1ce4d1615902397b5ad50909839d6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3bd5d9a28e1ce4d1615902397b5ad50909839d6d"}], "stats": {"total": 143, "additions": 131, "deletions": 12}, "files": [{"sha": "4b570c3551ad40fc922cbba014cee974a15977cc", "filename": "gcc/fortran/trans-decl.cc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8950288333162caa68b85c71ed2d02f40976ddb9/gcc%2Ffortran%2Ftrans-decl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8950288333162caa68b85c71ed2d02f40976ddb9/gcc%2Ffortran%2Ftrans-decl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.cc?ref=8950288333162caa68b85c71ed2d02f40976ddb9", "patch": "@@ -7378,13 +7378,13 @@ gfc_conv_cfi_to_gfc (stmtblock_t *init, stmtblock_t *finally,\n   /* Set string length for len=:, only.  */\n   if (sym->ts.type == BT_CHARACTER && !sym->ts.u.cl->length)\n     {\n-      tmp = sym->ts.u.cl->backend_decl;\n+      tmp2 = gfc_get_cfi_desc_elem_len (cfi);\n+      tmp = fold_convert (TREE_TYPE (tmp2), sym->ts.u.cl->backend_decl);\n       if (sym->ts.kind != 1)\n \ttmp = fold_build2_loc (input_location, MULT_EXPR,\n-\t\t\t       gfc_array_index_type,\n-\t\t\t       sym->ts.u.cl->backend_decl, tmp);\n-      tmp2 = gfc_get_cfi_desc_elem_len (cfi);\n-      gfc_add_modify (&block, tmp2, fold_convert (TREE_TYPE (tmp2), tmp));\n+\t\t\t       TREE_TYPE (tmp2), tmp,\n+\t\t\t       build_int_cst (TREE_TYPE (tmp2), sym->ts.kind));\n+      gfc_add_modify (&block, tmp2, tmp);\n     }\n \n   if (!sym->attr.dimension)"}, {"sha": "e7b9211f17ecea39e5a49203728b2e7a7961bc7b", "filename": "gcc/fortran/trans-expr.cc", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8950288333162caa68b85c71ed2d02f40976ddb9/gcc%2Ffortran%2Ftrans-expr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8950288333162caa68b85c71ed2d02f40976ddb9/gcc%2Ffortran%2Ftrans-expr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.cc?ref=8950288333162caa68b85c71ed2d02f40976ddb9", "patch": "@@ -10374,15 +10374,15 @@ gfc_conv_string_parameter (gfc_se * se)\n        || TREE_CODE (TREE_TYPE (se->expr)) == INTEGER_TYPE)\n       && TYPE_STRING_FLAG (TREE_TYPE (se->expr)))\n     {\n+      type = TREE_TYPE (se->expr);\n       if (TREE_CODE (se->expr) != INDIRECT_REF)\n-\t{\n-\t  type = TREE_TYPE (se->expr);\n-          se->expr = gfc_build_addr_expr (build_pointer_type (type), se->expr);\n-\t}\n+\tse->expr = gfc_build_addr_expr (build_pointer_type (type), se->expr);\n       else\n \t{\n-\t  type = gfc_get_character_type_len (gfc_default_character_kind,\n-\t\t\t\t\t     se->string_length);\n+\t  if (TREE_CODE (type) == ARRAY_TYPE)\n+\t    type = TREE_TYPE (type);\n+\t  type = gfc_get_character_type_len_for_eltype (type,\n+\t\t\t\t\t\t\tse->string_length);\n \t  type = build_pointer_type (type);\n \t  se->expr = gfc_build_addr_expr (type, se->expr);\n \t}"}, {"sha": "fdce56defec8906e6bb5a06859c3c893b670ca98", "filename": "gcc/fortran/trans-types.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8950288333162caa68b85c71ed2d02f40976ddb9/gcc%2Ffortran%2Ftrans-types.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8950288333162caa68b85c71ed2d02f40976ddb9/gcc%2Ffortran%2Ftrans-types.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.cc?ref=8950288333162caa68b85c71ed2d02f40976ddb9", "patch": "@@ -2314,7 +2314,7 @@ gfc_sym_type (gfc_symbol * sym, bool is_bind_c)\n \t      && sym->ns->proc_name->attr.is_bind_c)\n \t  || (sym->ts.deferred && (!sym->ts.u.cl\n \t\t\t\t   || !sym->ts.u.cl->backend_decl))))\n-    type = gfc_character1_type_node;\n+    type = gfc_get_char_type (sym->ts.kind);\n   else\n     type = gfc_typenode_for_spec (&sym->ts, sym->attr.codimension);\n "}, {"sha": "d6461614a4ffcceca2a264604bb0d948d348f58d", "filename": "gcc/testsuite/gfortran.dg/char4_decl-2.f90", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8950288333162caa68b85c71ed2d02f40976ddb9/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar4_decl-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8950288333162caa68b85c71ed2d02f40976ddb9/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar4_decl-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar4_decl-2.f90?ref=8950288333162caa68b85c71ed2d02f40976ddb9", "patch": "@@ -0,0 +1,63 @@\n+! { dg-do run }\n+! { dg-additional-options \"-fdump-tree-original\" }\n+\n+! In this program shall be no kind=1,\n+! except for the 'argv' of the 'main' program.\n+\n+! PR fortran/107266\n+\n+! { dg-final { scan-tree-dump-times \"kind=1\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"character\\\\(kind=1\\\\) \\\\* \\\\* argv\\\\)\" 1 \"original\" } }\n+\n+\n+! { dg-final { scan-tree-dump-times \"character\\\\(kind=4\\\\) f \\\\(character\\\\(kind=4\\\\) x\\\\)\" 1 \"original\" } }\n+\n+character(kind=4) function f(x) bind(C)\n+  character(kind=4), value :: x\n+end\n+\n+program testit\n+  implicit none (type, external)\n+  character (kind=4, len=:), allocatable :: aa\n+  character (kind=4, len=:), pointer :: pp\n+\n+  pp => NULL ()\n+\n+  call frobf (aa, pp)\n+  if (.not. allocated (aa)) stop 101\n+  if (storage_size(aa) /= storage_size(4_'foo')) stop 1\n+  if (aa .ne. 4_'foo') stop 102\n+  if (.not. associated (pp)) stop 103\n+  if (storage_size(pp) /= storage_size(4_'bar')) stop 2\n+  if (pp .ne. 4_'bar') stop 104\n+\n+  pp => NULL ()\n+\n+  call frobc (aa, pp)\n+  if (.not. allocated (aa)) stop 105\n+  if (storage_size(aa) /= storage_size(4_'frog')) stop 3\n+  if (aa .ne. 4_'frog') stop 106\n+  if (.not. associated (pp)) stop 107\n+  if (storage_size(pp) /= storage_size(4_'toad')) stop 4\n+  if (pp .ne. 4_'toad') stop 108\n+\n+\n+  contains\n+\n+    subroutine frobf (a, p) Bind(C)\n+      character (kind=4, len=:), allocatable :: a\n+      character (kind=4, len=:), pointer :: p\n+      allocate (character(kind=4, len=3) :: p)\n+      a = 4_'foo'\n+      p = 4_'bar'\n+    end subroutine\n+\n+    subroutine frobc (a, p) Bind(C)\n+      character (kind=4, len=:), allocatable :: a\n+      character (kind=4, len=:), pointer :: p\n+      allocate (character(kind=4, len=4) :: p)\n+      a = 4_'frog'\n+      p = 4_'toad'\n+    end subroutine\n+\n+end program"}, {"sha": "bb6b6a8318a4ae9c2169ffec1b8c807df37fb0dd", "filename": "gcc/testsuite/gfortran.dg/char4_decl.f90", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8950288333162caa68b85c71ed2d02f40976ddb9/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar4_decl.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8950288333162caa68b85c71ed2d02f40976ddb9/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar4_decl.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar4_decl.f90?ref=8950288333162caa68b85c71ed2d02f40976ddb9", "patch": "@@ -0,0 +1,56 @@\n+! { dg-do run }\n+! { dg-additional-options \"-fdump-tree-original\" }\n+\n+! In this program shall be no kind=1,\n+! except for the 'argv' of the 'main' program.\n+\n+! Related PR fortran/107266\n+\n+! { dg-final { scan-tree-dump-times \"kind=1\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"character\\\\(kind=1\\\\) \\\\* \\\\* argv\\\\)\" 1 \"original\" } }\n+\n+program testit\n+  implicit none (type, external)\n+  character (kind=4, len=:), allocatable :: aa\n+  character (kind=4, len=:), pointer :: pp\n+\n+  pp => NULL ()\n+\n+  call frobf (aa, pp)\n+  if (.not. allocated (aa)) stop 101\n+  if (storage_size(aa) /= storage_size(4_'foo')) stop 1\n+  if (aa .ne. 4_'foo') stop 102\n+  if (.not. associated (pp)) stop 103\n+  if (storage_size(pp) /= storage_size(4_'bar')) stop 2\n+  if (pp .ne. 4_'bar') stop 104\n+\n+  pp => NULL ()\n+\n+  call frobc (aa, pp)\n+  if (.not. allocated (aa)) stop 105\n+  if (storage_size(aa) /= storage_size(4_'frog')) stop 3\n+  if (aa .ne. 4_'frog') stop 106\n+  if (.not. associated (pp)) stop 107\n+  if (storage_size(pp) /= storage_size(4_'toad')) stop 4\n+  if (pp .ne. 4_'toad') stop 108\n+\n+\n+  contains\n+\n+    subroutine frobf (a, p)\n+      character (kind=4, len=:), allocatable :: a\n+      character (kind=4, len=:), pointer :: p\n+      allocate (character(kind=4, len=3) :: p)\n+      a = 4_'foo'\n+      p = 4_'bar'\n+    end subroutine\n+\n+    subroutine frobc (a, p)\n+      character (kind=4, len=:), allocatable :: a\n+      character (kind=4, len=:), pointer :: p\n+      allocate (character(kind=4, len=4) :: p)\n+      a = 4_'frog'\n+      p = 4_'toad'\n+    end subroutine\n+\n+end program"}]}