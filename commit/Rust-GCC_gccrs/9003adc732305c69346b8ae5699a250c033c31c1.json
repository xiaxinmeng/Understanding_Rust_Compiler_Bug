{"sha": "9003adc732305c69346b8ae5699a250c033c31c1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTAwM2FkYzczMjMwNWM2OTM0NmI4YWU1Njk5YTI1MGMwMzNjMzFjMQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2017-09-22T14:49:52Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2017-09-22T14:49:52Z"}, "message": "C++: underline parameters in mismatching function calls\n\ngcc/cp/ChangeLog:\n\t* call.c (get_fndecl_argument_location): New function.\n\t(convert_like_real): Use it  when complaining about argument type\n\tmismatches.\n\t* cp-tree.h (struct cp_parameter_declarator): Add \"loc\" field.\n\t* parser.c (make_parameter_declarator): Add \"loc\" param and use\n\tit to initialize the new field.\n\t(cp_parser_translation_unit): Add UNKNOWN_LOCATION for \"loc\" of\n\tthe \"no_parameters\" parameter.\n\t(cp_parser_parameter_declaration_list): Set the location of the\n\tresult of grokdeclarator to be the parameter's loc, assuming no\n\terrors.\n\t(cp_parser_parameter_declaration): Generate a location for the\n\tparameter and pass to make_parameter_declarator.\n\ngcc/testsuite/ChangeLog:\n\t* g++.dg/diagnostic/param-type-mismatch.C: Update expected results\n\tto reflect highlighting of parameters; add test coverage for\n\tcallback parameters.\n\nFrom-SVN: r253096", "tree": {"sha": "cac019ce232d5ffc46759f8e504ae17c9a014285", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cac019ce232d5ffc46759f8e504ae17c9a014285"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9003adc732305c69346b8ae5699a250c033c31c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9003adc732305c69346b8ae5699a250c033c31c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9003adc732305c69346b8ae5699a250c033c31c1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9003adc732305c69346b8ae5699a250c033c31c1/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8c2ea6b20a48d626d3dae78ac177affb7f67e182", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c2ea6b20a48d626d3dae78ac177affb7f67e182", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c2ea6b20a48d626d3dae78ac177affb7f67e182"}], "stats": {"total": 139, "additions": 125, "deletions": 14}, "files": [{"sha": "7705321d9ebcb01d153c422325aa55612589bd78", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9003adc732305c69346b8ae5699a250c033c31c1/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9003adc732305c69346b8ae5699a250c033c31c1/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9003adc732305c69346b8ae5699a250c033c31c1", "patch": "@@ -1,3 +1,19 @@\n+2017-09-22  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* call.c (get_fndecl_argument_location): New function.\n+\t(convert_like_real): Use it  when complaining about argument type\n+\tmismatches.\n+\t* cp-tree.h (struct cp_parameter_declarator): Add \"loc\" field.\n+\t* parser.c (make_parameter_declarator): Add \"loc\" param and use\n+\tit to initialize the new field.\n+\t(cp_parser_translation_unit): Add UNKNOWN_LOCATION for \"loc\" of\n+\tthe \"no_parameters\" parameter.\n+\t(cp_parser_parameter_declaration_list): Set the location of the\n+\tresult of grokdeclarator to be the parameter's loc, assuming no\n+\terrors.\n+\t(cp_parser_parameter_declaration): Generate a location for the\n+\tparameter and pass to make_parameter_declarator.\n+\n 2017-09-20  Nathan Sidwell  <nathan@acm.org>\n \n \t* name-lookup.c (member_name_cmp): Use DECL_UID for final"}, {"sha": "e83cf99dc89af13e993a672fb3e67c9533057cb0", "filename": "gcc/cp/call.c", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9003adc732305c69346b8ae5699a250c033c31c1/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9003adc732305c69346b8ae5699a250c033c31c1/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=9003adc732305c69346b8ae5699a250c033c31c1", "patch": "@@ -6579,6 +6579,30 @@ maybe_print_user_conv_context (conversion *convs)\n \t}\n }\n \n+/* Locate the parameter with the given index within FNDECL.\n+   ARGNUM is zero based, -1 indicates the `this' argument of a method.\n+   Return the location of the FNDECL itself if there are problems.  */\n+\n+static location_t\n+get_fndecl_argument_location (tree fndecl, int argnum)\n+{\n+  int i;\n+  tree param;\n+\n+  /* Locate param by index within DECL_ARGUMENTS (fndecl).  */\n+  for (i = 0, param = FUNCTION_FIRST_USER_PARM (fndecl);\n+       i < argnum && param;\n+       i++, param = TREE_CHAIN (param))\n+    ;\n+\n+  /* If something went wrong (e.g. if we have a builtin and thus no arguments),\n+     return the location of FNDECL.  */\n+  if (param == NULL)\n+    return DECL_SOURCE_LOCATION (fndecl);\n+\n+  return DECL_SOURCE_LOCATION (param);\n+}\n+\n /* Perform the conversions in CONVS on the expression EXPR.  FN and\n    ARGNUM are used for diagnostics.  ARGNUM is zero based, -1\n    indicates the `this' argument of a method.  INNER is nonzero when\n@@ -6680,7 +6704,7 @@ convert_like_real (conversion *convs, tree expr, tree fn, int argnum,\n \tcomplained = permerror (loc, \"invalid conversion from %qH to %qI\",\n \t\t\t\tTREE_TYPE (expr), totype);\n       if (complained && fn)\n-\tinform (DECL_SOURCE_LOCATION (fn),\n+\tinform (get_fndecl_argument_location (fn, argnum),\n \t\t\"  initializing argument %P of %qD\", argnum, fn);\n \n       return cp_convert (totype, expr, complain);"}, {"sha": "7c1c54c78b526b3365b1def23817596a47ee2bf4", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9003adc732305c69346b8ae5699a250c033c31c1/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9003adc732305c69346b8ae5699a250c033c31c1/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=9003adc732305c69346b8ae5699a250c033c31c1", "patch": "@@ -5659,6 +5659,8 @@ struct cp_parameter_declarator {\n   tree default_argument;\n   /* True iff this is a template parameter pack.  */\n   bool template_parameter_pack_p;\n+  /* Location within source.  */\n+  location_t loc;\n };\n \n /* A declarator.  */"}, {"sha": "f9b6f278afbb66f699923c550180ca1f251ff948", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9003adc732305c69346b8ae5699a250c033c31c1/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9003adc732305c69346b8ae5699a250c033c31c1/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=9003adc732305c69346b8ae5699a250c033c31c1", "patch": "@@ -1691,6 +1691,7 @@ cp_parameter_declarator *\n make_parameter_declarator (cp_decl_specifier_seq *decl_specifiers,\n \t\t\t   cp_declarator *declarator,\n \t\t\t   tree default_argument,\n+\t\t\t   location_t loc,\n \t\t\t   bool template_parameter_pack_p = false)\n {\n   cp_parameter_declarator *parameter;\n@@ -1705,6 +1706,7 @@ make_parameter_declarator (cp_decl_specifier_seq *decl_specifiers,\n   parameter->declarator = declarator;\n   parameter->default_argument = default_argument;\n   parameter->template_parameter_pack_p = template_parameter_pack_p;\n+  parameter->loc = loc;\n \n   return parameter;\n }\n@@ -4379,7 +4381,8 @@ cp_parser_translation_unit (cp_parser* parser)\n       /* Create the error declarator.  */\n       cp_error_declarator = make_declarator (cdk_error);\n       /* Create the empty parameter list.  */\n-      no_parameters = make_parameter_declarator (NULL, NULL, NULL_TREE);\n+      no_parameters = make_parameter_declarator (NULL, NULL, NULL_TREE,\n+\t\t\t\t\t\t UNKNOWN_LOCATION);\n       /* Remember where the base of the declarator obstack lies.  */\n       declarator_obstack_base = obstack_next_free (&declarator_obstack);\n     }\n@@ -21218,6 +21221,8 @@ cp_parser_parameter_declaration_list (cp_parser* parser, bool *is_error)\n \t\t\t\t PARM,\n \t\t\t\t parameter->default_argument != NULL_TREE,\n \t\t\t\t &parameter->decl_specifiers.attributes);\n+\t  if (decl != error_mark_node && parameter->loc != UNKNOWN_LOCATION)\n+\t    DECL_SOURCE_LOCATION (decl) = parameter->loc;\n \t}\n \n       deprecated_state = DEPRECATED_NORMAL;\n@@ -21371,6 +21376,7 @@ cp_parser_parameter_declaration (cp_parser *parser,\n     = G_(\"types may not be defined in parameter types\");\n \n   /* Parse the declaration-specifiers.  */\n+  cp_token *decl_spec_token_start = cp_lexer_peek_token (parser->lexer);\n   cp_parser_decl_specifier_seq (parser,\n \t\t\t\tCP_PARSER_FLAGS_NONE,\n \t\t\t\t&decl_specifiers,\n@@ -21555,9 +21561,33 @@ cp_parser_parameter_declaration (cp_parser *parser,\n   else\n     default_argument = NULL_TREE;\n \n+  /* Generate a location for the parameter, ranging from the start of the\n+     initial token to the end of the final token (using input_location for\n+     the latter, set up by cp_lexer_set_source_position_from_token when\n+     consuming tokens).\n+\n+     If we have a identifier, then use it for the caret location, e.g.\n+\n+       extern int callee (int one, int (*two)(int, int), float three);\n+                                   ~~~~~~^~~~~~~~~~~~~~\n+\n+     otherwise, reuse the start location for the caret location e.g.:\n+\n+       extern int callee (int one, int (*)(int, int), float three);\n+                                   ^~~~~~~~~~~~~~~~~\n+\n+  */\n+  location_t caret_loc = (declarator && declarator->id_loc != UNKNOWN_LOCATION\n+\t\t\t  ? declarator->id_loc\n+\t\t\t  : decl_spec_token_start->location);\n+  location_t param_loc = make_location (caret_loc,\n+\t\t\t\t\tdecl_spec_token_start->location,\n+\t\t\t\t\tinput_location);\n+\n   return make_parameter_declarator (&decl_specifiers,\n \t\t\t\t    declarator,\n \t\t\t\t    default_argument,\n+\t\t\t\t    param_loc,\n \t\t\t\t    template_parameter_pack_p);\n }\n "}, {"sha": "baccb959a8830167293c194bc398d36650cd699f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9003adc732305c69346b8ae5699a250c033c31c1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9003adc732305c69346b8ae5699a250c033c31c1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9003adc732305c69346b8ae5699a250c033c31c1", "patch": "@@ -1,3 +1,9 @@\n+2017-09-22  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* g++.dg/diagnostic/param-type-mismatch.C: Update expected results\n+\tto reflect highlighting of parameters; add test coverage for\n+\tcallback parameters.\n+\n 2017-09-22  Richard Biener  <rguenther@suse.de>\n \n \t* gcc.dg/graphite/scop-24.c: New testcase."}, {"sha": "bc3a93812f5f39d0d4c63bd412c67638bba2d9a0", "filename": "gcc/testsuite/g++.dg/diagnostic/param-type-mismatch.C", "status": "modified", "additions": 45, "deletions": 12, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9003adc732305c69346b8ae5699a250c033c31c1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fparam-type-mismatch.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9003adc732305c69346b8ae5699a250c033c31c1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fparam-type-mismatch.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fparam-type-mismatch.C?ref=9003adc732305c69346b8ae5699a250c033c31c1", "patch": "@@ -3,10 +3,7 @@\n /* A collection of calls where argument 2 is of the wrong type.\n \n    TODO: we should put the caret and underline for the diagnostic\n-   at the second argument, rather than the close paren.\n-\n-   TODO: we should highlight the second parameter of the callee, rather\n-   than its name.  */\n+   at the second argument, rather than the close paren.  */\n \n /* decl, with argname.  */\n \n@@ -22,7 +19,7 @@ int test_1 (int first, int second, float third)\n   // { dg-message \"initializing argument 2 of 'int callee_1\\\\(int, const char\\\\*, float\\\\)'\" \"\" { target *-*-* } callee_1 }\n   /* { dg-begin-multiline-output \"\" }\n  extern int callee_1 (int one, const char *two, float three);\n-            ^~~~~~~~\n+                               ~~~~~~~~~~~~^~~\n      { dg-end-multiline-output \"\" } */\n }\n \n@@ -40,7 +37,7 @@ int test_2 (int first, int second, float third)\n   // { dg-message \"initializing argument 2 of 'int callee_2\\\\(int, const char\\\\*, float\\\\)'\" \"\" { target *-*-* } callee_2 }\n   /* { dg-begin-multiline-output \"\" }\n  extern int callee_2 (int, const char *, float);\n-            ^~~~~~~~\n+                           ^~~~~~~~~~~~\n      { dg-end-multiline-output \"\" } */\n }\n \n@@ -61,7 +58,7 @@ int test_3 (int first, int second, float third)\n   // { dg-message \"initializing argument 2 of 'int callee_3\\\\(int, const char\\\\*, float\\\\)'\" \"\" { target *-*-* } callee_3 }\n   /* { dg-begin-multiline-output \"\" }\n  static int callee_3 (int one, const char *two, float three)\n-            ^~~~~~~~\n+                               ~~~~~~~~~~~~^~~\n      { dg-end-multiline-output \"\" } */\n }\n \n@@ -78,7 +75,7 @@ int test_4 (int first, int second, float third)\n      { dg-end-multiline-output \"\" } */\n   /* { dg-begin-multiline-output \"\" }\n  struct s4 { static int member_1 (int one, const char *two, float three); };\n-                        ^~~~~~~~\n+                                           ~~~~~~~~~~~~^~~\n      { dg-end-multiline-output \"\" } */\n }\n \n@@ -96,7 +93,7 @@ int test_5 (int first, int second, float third)\n      { dg-end-multiline-output \"\" } */\n   /* { dg-begin-multiline-output \"\" }\n  struct s5 { int member_1 (int one, const char *two, float three); };\n-                 ^~~~~~~~\n+                                    ~~~~~~~~~~~~^~~\n      { dg-end-multiline-output \"\" } */\n }\n \n@@ -113,7 +110,7 @@ int test_6 (int first, int second, float third, s6 *ptr)\n      { dg-end-multiline-output \"\" } */\n   /* { dg-begin-multiline-output \"\" }\n  struct s6 { int member_1 (int one, const char *two, float three); };\n-                 ^~~~~~~~\n+                                    ~~~~~~~~~~~~^~~\n      { dg-end-multiline-output \"\" } */\n }\n \n@@ -153,7 +150,7 @@ int test_8 (int first, int second, float third)\n      { dg-end-multiline-output \"\" } */\n   /* { dg-begin-multiline-output \"\" }\n  struct s8 { static int member_1 (int one, T two, float three); };\n-                        ^~~~~~~~\n+                                           ~~^~~\n      { dg-end-multiline-output \"\" } */\n }\n \n@@ -172,7 +169,43 @@ int test_9 (int first, int second, float third)\n      { dg-end-multiline-output \"\" } */\n   /* { dg-begin-multiline-output \"\" }\n  struct s9 { int member_1 (int one, T two, float three); };\n-                 ^~~~~~~~\n+                                    ~~^~~\n+     { dg-end-multiline-output \"\" } */\n+}\n+\n+/* Callback with name.  */\n+\n+extern int callee_10 (int one, int (*two)(int, int), float three); // { dg-line callee_10 }\n+\n+int test_10 (int first, int second, float third)\n+{\n+  return callee_10 (first, second, third); // { dg-error \"invalid conversion from 'int' to 'int \\\\(\\\\*\\\\)\\\\(int, int\\\\)'\" }\n+  /* { dg-begin-multiline-output \"\" }\n+   return callee_10 (first, second, third);\n+                                         ^\n+     { dg-end-multiline-output \"\" } */\n+  // { dg-message \"initializing argument 2 of 'int callee_10\\\\(int, int \\\\(\\\\*\\\\)\\\\(int, int\\\\), float\\\\)'\" \"\" { target *-*-* } callee_10 }\n+  /* { dg-begin-multiline-output \"\" }\n+ extern int callee_10 (int one, int (*two)(int, int), float three);\n+                                ~~~~~~^~~~~~~~~~~~~~\n+     { dg-end-multiline-output \"\" } */\n+}\n+\n+/* Callback without name.  */\n+\n+extern int callee_11 (int one, int (*)(int, int), float three); // { dg-line callee_11 }\n+\n+int test_11 (int first, int second, float third)\n+{\n+  return callee_11 (first, second, third); // { dg-error \"invalid conversion from 'int' to 'int \\\\(\\\\*\\\\)\\\\(int, int\\\\)'\" }\n+  /* { dg-begin-multiline-output \"\" }\n+   return callee_11 (first, second, third);\n+                                         ^\n+     { dg-end-multiline-output \"\" } */\n+  // { dg-message \"initializing argument 2 of 'int callee_11\\\\(int, int \\\\(\\\\*\\\\)\\\\(int, int\\\\), float\\\\)'\" \"\" { target *-*-* } callee_11 }\n+  /* { dg-begin-multiline-output \"\" }\n+ extern int callee_11 (int one, int (*)(int, int), float three);\n+                                ^~~~~~~~~~~~~~~~~\n      { dg-end-multiline-output \"\" } */\n }\n "}]}