{"sha": "100fdb1f09b484ef100b638b28a260857d85f9dd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTAwZmRiMWYwOWI0ODRlZjEwMGI2MzhiMjhhMjYwODU3ZDg1ZjlkZA==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-05-15T14:59:01Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-05-18T19:50:12Z"}, "message": "c++: Don't add built-in operator for ++ on bool.\n\nThis feels extremely obscure but at least it's an opportunity to fix the\ncomments.  P0002R1 removed deprecated operator++(bool) in C++17 so let's\navoid adding a builtin overload candidate for ++ when the type is bool.\n\n\t* call.c (add_builtin_candidate): Don't create a builtin overload\n\tcandidate for ++ when type is bool in C++17.\n\n\t* g++.dg/overload/builtin5.C: New test.", "tree": {"sha": "843472f613abf74a1cb577886e164f7e1550a5c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/843472f613abf74a1cb577886e164f7e1550a5c5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/100fdb1f09b484ef100b638b28a260857d85f9dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/100fdb1f09b484ef100b638b28a260857d85f9dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/100fdb1f09b484ef100b638b28a260857d85f9dd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/100fdb1f09b484ef100b638b28a260857d85f9dd/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "642dc602f89b2c11d5d833a52f37b04427a27cab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/642dc602f89b2c11d5d833a52f37b04427a27cab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/642dc602f89b2c11d5d833a52f37b04427a27cab"}], "stats": {"total": 50, "additions": 42, "deletions": 8}, "files": [{"sha": "e9cd3eb453bbc9ccbc24f63654ca637a5623fcba", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/100fdb1f09b484ef100b638b28a260857d85f9dd/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/100fdb1f09b484ef100b638b28a260857d85f9dd/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=100fdb1f09b484ef100b638b28a260857d85f9dd", "patch": "@@ -1,4 +1,9 @@\n-2020-05-17  Marek Polacek  <polacek@redhat.com>\n+2020-05-18  Marek Polacek  <polacek@redhat.com>\n+\n+\t* call.c (add_builtin_candidate): Don't create a builtin overload\n+\tcandidate for ++ when type is bool in C++17.\n+\n+2020-05-18  Marek Polacek  <polacek@redhat.com>\n \n \t* cfns.h: Regenerated.\n "}, {"sha": "b96bc06a364b33ffba327c75fec59d6d449da88a", "filename": "gcc/cp/call.c", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/100fdb1f09b484ef100b638b28a260857d85f9dd/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/100fdb1f09b484ef100b638b28a260857d85f9dd/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=100fdb1f09b484ef100b638b28a260857d85f9dd", "patch": "@@ -2672,19 +2672,19 @@ add_builtin_candidate (struct z_candidate **candidates, enum tree_code code,\n   switch (code)\n     {\n \n-/* 4 For every pair T, VQ), where T is an arithmetic or  enumeration  type,\n+/* 4 For every pair (T, VQ), where T is an arithmetic type other than bool,\n      and  VQ  is  either  volatile or empty, there exist candidate operator\n      functions of the form\n \t     VQ T&   operator++(VQ T&);\n \t     T       operator++(VQ T&, int);\n-   5 For every pair T, VQ), where T is an enumeration type or an arithmetic\n-     type  other than bool, and VQ is either volatile or empty, there exist\n-     candidate operator functions of the form\n+   5 For every pair (T, VQ), where T is an arithmetic type other than bool,\n+     and VQ is either volatile or empty, there exist candidate operator\n+     functions of the form\n \t     VQ T&   operator--(VQ T&);\n \t     T       operator--(VQ T&, int);\n-   6 For every pair T, VQ), where T is  a  cv-qualified  or  cv-unqualified\n-     complete  object type, and VQ is either volatile or empty, there exist\n-     candidate operator functions of the form\n+   6 For every pair (T, VQ), where T is a cv-qualified or cv-unqualified object\n+     type, and VQ is either volatile or empty, there exist candidate operator\n+     functions of the form\n \t     T*VQ&   operator++(T*VQ&);\n \t     T*VQ&   operator--(T*VQ&);\n \t     T*      operator++(T*VQ&, int);\n@@ -2697,6 +2697,10 @@ add_builtin_candidate (struct z_candidate **candidates, enum tree_code code,\n       /* FALLTHRU */\n     case POSTINCREMENT_EXPR:\n     case PREINCREMENT_EXPR:\n+      /* P0002R1, Remove deprecated operator++(bool) added \"other than bool\"\n+\t to p4.  */\n+      if (TREE_CODE (type1) == BOOLEAN_TYPE && cxx_dialect >= cxx17)\n+\treturn;\n       if (ARITHMETIC_TYPE_P (type1) || TYPE_PTROB_P (type1))\n \t{\n \t  type1 = build_reference_type (type1);"}, {"sha": "0b5e1d31fa62990fff0290dd5bf757bd0f90d77c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/100fdb1f09b484ef100b638b28a260857d85f9dd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/100fdb1f09b484ef100b638b28a260857d85f9dd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=100fdb1f09b484ef100b638b28a260857d85f9dd", "patch": "@@ -1,3 +1,7 @@\n+2020-05-18  Marek Polacek  <polacek@redhat.com>\n+\n+\t* g++.dg/overload/builtin5.C: New test.\n+\n 2020-05-18  Doug Rupp  <rupp@adacore.com>\n \n \t* gcc.target/powerpc/pr71763.c: Require powerpc_vsx_ok."}, {"sha": "a30251dc79dcd5a4f47749a12fb79dd09ed4fcb0", "filename": "gcc/testsuite/g++.dg/overload/builtin5.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/100fdb1f09b484ef100b638b28a260857d85f9dd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Fbuiltin5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/100fdb1f09b484ef100b638b28a260857d85f9dd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Fbuiltin5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Fbuiltin5.C?ref=100fdb1f09b484ef100b638b28a260857d85f9dd", "patch": "@@ -0,0 +1,21 @@\n+// { dg-do compile { target c++17 } }\n+// Don't add built-in operator for ++ on bool.\n+\n+template<typename T>\n+struct S { operator T&(); };\n+\n+template<int> void\n+foo (S<bool>& s)\n+{\n+  --s; // { dg-error \"no match for\" }\n+  ++s; // { dg-error \"no match for\" }\n+  s++; // { dg-error \"declared for postfix\" }\n+  s--; // { dg-error \"declared for postfix\" }\n+}\n+\n+void\n+bar ()\n+{\n+  S<bool> s;\n+  foo<0> (s);\n+}"}]}