{"sha": "b450b08dfb78d46a64fe73ac4a6ce3aad9ce4baf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjQ1MGIwOGRmYjc4ZDQ2YTY0ZmU3M2FjNGE2Y2UzYWFkOWNlNGJhZg==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2019-03-03T13:16:40Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2019-03-03T13:16:40Z"}, "message": "re PR fortran/72714 ([Coarray] ICE in gfc_array_init_size, at fortran/trans-array.c:5235)\n\n2019-03-03  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/72714\n\t* resolve.c (resolve_allocate_expr): Add some tests for coarrays.\n\n2019-03-03  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/72714\n\t* gfortran.dg/coarray_allocate_11.f90: New test.\n\nFrom-SVN: r269352", "tree": {"sha": "cccf2db0c923a7abffdc02dd3d27f3276afc88ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cccf2db0c923a7abffdc02dd3d27f3276afc88ea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b450b08dfb78d46a64fe73ac4a6ce3aad9ce4baf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b450b08dfb78d46a64fe73ac4a6ce3aad9ce4baf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b450b08dfb78d46a64fe73ac4a6ce3aad9ce4baf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b450b08dfb78d46a64fe73ac4a6ce3aad9ce4baf/comments", "author": null, "committer": null, "parents": [{"sha": "4a1a6fd764f2f8a6535a5f4ab82688cc652a141a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a1a6fd764f2f8a6535a5f4ab82688cc652a141a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a1a6fd764f2f8a6535a5f4ab82688cc652a141a"}], "stats": {"total": 78, "additions": 72, "deletions": 6}, "files": [{"sha": "489ae1bc0cb4ea95ae28196e124de308d94d3e71", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b450b08dfb78d46a64fe73ac4a6ce3aad9ce4baf/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b450b08dfb78d46a64fe73ac4a6ce3aad9ce4baf/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=b450b08dfb78d46a64fe73ac4a6ce3aad9ce4baf", "patch": "@@ -1,3 +1,8 @@\n+2019-03-03  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/72714\n+\t* resolve.c (resolve_allocate_expr): Add some tests for coarrays.\n+\n 2019-03-02  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/89516"}, {"sha": "955978bf1ec6561d08926248727bf9e110981526", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 47, "deletions": 6, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b450b08dfb78d46a64fe73ac4a6ce3aad9ce4baf/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b450b08dfb78d46a64fe73ac4a6ce3aad9ce4baf/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=b450b08dfb78d46a64fe73ac4a6ce3aad9ce4baf", "patch": "@@ -7766,13 +7766,54 @@ resolve_allocate_expr (gfc_expr *e, gfc_code *code, bool *array_alloc_wo_spec)\n \n   if (codimension)\n     for (i = ar->dimen; i < ar->dimen + ar->codimen; i++)\n-      if (ar->dimen_type[i] == DIMEN_THIS_IMAGE)\n-\t{\n-\t  gfc_error (\"Coarray specification required in ALLOCATE statement \"\n-\t\t     \"at %L\", &e->where);\n-\t  goto failure;\n-\t}\n+      {\n+\tswitch (ar->dimen_type[i])\n+\t  {\n+\t  case DIMEN_THIS_IMAGE:\n+\t    gfc_error (\"Coarray specification required in ALLOCATE statement \"\n+\t\t       \"at %L\", &e->where);\n+\t    goto failure;\n+\n+\t  case  DIMEN_RANGE:\n+\t    if (ar->start[i] == 0 || ar->end[i] == 0)\n+\t      {\n+\t\t/* If ar->stride[i] is NULL, we issued a previous error.  */\n+\t\tif (ar->stride[i] == NULL)\n+\t\t  gfc_error (\"Bad array specification in ALLOCATE statement \"\n+\t\t\t     \"at %L\", &e->where);\n+\t\tgoto failure;\n+\t      }\n+\t    else if (gfc_dep_compare_expr (ar->start[i], ar->end[i]) == 1)\n+\t      {\n+\t\tgfc_error (\"Upper cobound is less than lower cobound at %L\",\n+\t\t\t   &ar->start[i]->where);\n+\t\tgoto failure;\n+\t      }\n+\t    break;\n+\n+\t  case DIMEN_ELEMENT:\n+\t    if (ar->start[i]->expr_type == EXPR_CONSTANT)\n+\t      {\n+\t\tgcc_assert (ar->start[i]->ts.type == BT_INTEGER);\n+\t\tif (mpz_cmp_si (ar->start[i]->value.integer, 1) < 0)\n+\t\t  {\n+\t\t    gfc_error (\"Upper cobound is less than lower cobound \"\n+\t\t\t       \" of 1 at %L\", &ar->start[i]->where);\n+\t\t    goto failure;\n+\t\t  }\n+\t      }\n+\t    break;\n+\n+\t  case DIMEN_STAR:\n+\t    break;\n \n+\t  default:\n+\t    gfc_error (\"Bad array specification in ALLOCATE statement at %L\",\n+\t\t       &e->where);\n+\t    goto failure;\n+\n+\t  }\n+      }\n   for (i = 0; i < ar->dimen; i++)\n     {\n       if (ar->type == AR_ELEMENT || ar->type == AR_FULL)"}, {"sha": "e7b54ea788216df7dff1cb8dd42a73d0ac509037", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b450b08dfb78d46a64fe73ac4a6ce3aad9ce4baf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b450b08dfb78d46a64fe73ac4a6ce3aad9ce4baf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b450b08dfb78d46a64fe73ac4a6ce3aad9ce4baf", "patch": "@@ -1,3 +1,8 @@\n+2019-03-03  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/72714\n+\t* gfortran.dg/coarray_allocate_11.f90: New test.\n+\n 2019-03-02  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/89516"}, {"sha": "0e806f0955b3ce27cb77bbe9551ca1c6bf161cfe", "filename": "gcc/testsuite/gfortran.dg/coarray_allocate_11.f90", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b450b08dfb78d46a64fe73ac4a6ce3aad9ce4baf/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_allocate_11.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b450b08dfb78d46a64fe73ac4a6ce3aad9ce4baf/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_allocate_11.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_allocate_11.f90?ref=b450b08dfb78d46a64fe73ac4a6ce3aad9ce4baf", "patch": "@@ -0,0 +1,15 @@\n+! { dg-do compile }\n+! { dg-additional-options -fcoarray=single }\n+program p\n+   integer, allocatable :: z[:,:]\n+   integer :: i\n+   allocate (z[1:,*]) ! { dg-error \"Bad array specification in ALLOCATE statement\" }\n+   allocate (z[:2,*]) ! { dg-error \"Bad array specification in ALLOCATE statement\" }\n+   allocate (z[2:1,*]) ! { dg-error \"Upper cobound is less than lower cobound\" }\n+   allocate (z[:0,*]) ! { dg-error \"Bad array specification in ALLOCATE statement\" }\n+   allocate (z[0,*]) ! { dg-error \"Upper cobound is less than lower cobound\" }\n+   allocate (z[1,*]) ! This is OK\n+   allocate (z[1:1,*]) ! This is OK\n+   allocate (z[i:i,*]) ! This is OK\n+   allocate (z[i:i-1,*]) ! { dg-error \"Upper cobound is less than lower cobound\" }\n+end"}]}