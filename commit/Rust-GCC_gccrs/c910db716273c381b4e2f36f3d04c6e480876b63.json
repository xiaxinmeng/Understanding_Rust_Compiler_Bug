{"sha": "c910db716273c381b4e2f36f3d04c6e480876b63", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzkxMGRiNzE2MjczYzM4MWI0ZTJmMzZmM2QwNGM2ZTQ4MDg3NmI2Mw==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2019-07-23T08:13:15Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-07-23T08:13:15Z"}, "message": "[Ada] Iterators are view-specific\n\nOperational aspects, such as Default_Iterator, are view-specific, and if\nsuch an aspect appears on the full view of a private type, an object of\nthe type cannot be iterated upon if it is not in the scope of the full\nview, This patch diagnoses properly an attempt to iterate over such an\nobject.\n\n2019-07-23  Ed Schonberg  <schonberg@adacore.com>\n\ngcc/ada/\n\n\t* aspects.ads: New table Operational_Aspect, used to distinguish\n\tbetween aspects that are view-specific, such as those related to\n\titerators, and representation aspects that apply to all views of\n\ta type.\n\t* aspects.adb (Find_Aspect): If the aspect being sought is\n\toperational, do not ecamine the full view of a private type to\n\tretrieve it.\n\t* sem_ch5.adb (Analyze_Iterator_Specification): Improve error\n\tmessage when the intended domain of iteration does not implement\n\tthe required iterator aspects.\n\ngcc/testsuite/\n\n\t* gnat.dg/iter5.adb: Add an expected error.\n\t* gnat.dg/iter6.adb: New testcase.\n\nFrom-SVN: r273722", "tree": {"sha": "3803b6f751ba27d3ba2f891617dad7aa5a6fcd4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3803b6f751ba27d3ba2f891617dad7aa5a6fcd4d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c910db716273c381b4e2f36f3d04c6e480876b63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c910db716273c381b4e2f36f3d04c6e480876b63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c910db716273c381b4e2f36f3d04c6e480876b63", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c910db716273c381b4e2f36f3d04c6e480876b63/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "15e79d66f00317d3acbfa1c93c9460a65174454b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15e79d66f00317d3acbfa1c93c9460a65174454b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15e79d66f00317d3acbfa1c93c9460a65174454b"}], "stats": {"total": 90, "additions": 87, "deletions": 3}, "files": [{"sha": "a40a774f0d610073705ef281d552fb336edb3f68", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c910db716273c381b4e2f36f3d04c6e480876b63/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c910db716273c381b4e2f36f3d04c6e480876b63/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=c910db716273c381b4e2f36f3d04c6e480876b63", "patch": "@@ -1,3 +1,16 @@\n+2019-07-23  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* aspects.ads: New table Operational_Aspect, used to distinguish\n+\tbetween aspects that are view-specific, such as those related to\n+\titerators, and representation aspects that apply to all views of\n+\ta type.\n+\t* aspects.adb (Find_Aspect): If the aspect being sought is\n+\toperational, do not ecamine the full view of a private type to\n+\tretrieve it.\n+\t* sem_ch5.adb (Analyze_Iterator_Specification): Improve error\n+\tmessage when the intended domain of iteration does not implement\n+\tthe required iterator aspects.\n+\n 2019-07-23  Yannick Moy  <moy@adacore.com>\n \n \t* sem_spark.ads (Is_Local_Context): New function."}, {"sha": "54c0e566ab00bbb9219c53ff67f0933ebc251023", "filename": "gcc/ada/aspects.adb", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c910db716273c381b4e2f36f3d04c6e480876b63/gcc%2Fada%2Faspects.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c910db716273c381b4e2f36f3d04c6e480876b63/gcc%2Fada%2Faspects.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faspects.adb?ref=c910db716273c381b4e2f36f3d04c6e480876b63", "patch": "@@ -225,7 +225,10 @@ package body Aspects is\n             Owner := Root_Type (Owner);\n          end if;\n \n-         if Is_Private_Type (Owner) and then Present (Full_View (Owner)) then\n+         if Is_Private_Type (Owner)\n+            and then Present (Full_View (Owner))\n+            and then not Operational_Aspect (A)\n+         then\n             Owner := Full_View (Owner);\n          end if;\n       end if;"}, {"sha": "2a6acc297a37e0a9cb5e5d45a02113c1c44b81c1", "filename": "gcc/ada/aspects.ads", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c910db716273c381b4e2f36f3d04c6e480876b63/gcc%2Fada%2Faspects.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c910db716273c381b4e2f36f3d04c6e480876b63/gcc%2Fada%2Faspects.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faspects.ads?ref=c910db716273c381b4e2f36f3d04c6e480876b63", "patch": "@@ -277,6 +277,20 @@ package Aspects is\n       Aspect_Warnings                   => True,\n       others                            => False);\n \n+   --  The following array indicates aspects that specify operational\n+   --  characteristics, and thus are view-specific. Representation\n+   --  aspects break privacy, as they are needed during expansion and\n+   --  code generation.\n+   --  List is currently incomplete ???\n+\n+   Operational_Aspect : constant array (Aspect_Id) of Boolean :=\n+     (Aspect_Constant_Indexing          => True,\n+      Aspect_Default_Iterator           => True,\n+      Aspect_Iterator_Element           => True,\n+      Aspect_Iterable                   => True,\n+      Aspect_Variable_Indexing          => True,\n+      others                            => False);\n+\n    --  The following array indicates aspects for which multiple occurrences of\n    --  the same aspect attached to the same declaration are allowed.\n "}, {"sha": "ebe610b88e834a7352a5d273345605cb634c84f4", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c910db716273c381b4e2f36f3d04c6e480876b63/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c910db716273c381b4e2f36f3d04c6e480876b63/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=c910db716273c381b4e2f36f3d04c6e480876b63", "patch": "@@ -2234,8 +2234,17 @@ package body Sem_Ch5 is\n                It : Interp;\n \n             begin\n+               --  THe domain of iteralion must implement either the RM\n+               --  iterator interface, or the SPARK Iterable aspect.\n+\n                if No (Iterator) then\n-                  null;  --  error reported below\n+                  if No\n+                     (Find_Aspect (Etype (Iter_Name), Aspect_Iterable))\n+                  then\n+                     Error_Msg_NE (\"cannot iterate over&\",\n+                       N, Base_Type (Etype (Iter_Name)));\n+                     return;\n+                  end if;\n \n                elsif not Is_Overloaded (Iterator) then\n                   Check_Reverse_Iteration (Etype (Iterator));"}, {"sha": "03cf4bb52ddf0f67e48f37d38da7e9a170840632", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c910db716273c381b4e2f36f3d04c6e480876b63/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c910db716273c381b4e2f36f3d04c6e480876b63/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c910db716273c381b4e2f36f3d04c6e480876b63", "patch": "@@ -1,3 +1,8 @@\n+2019-07-23  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* gnat.dg/iter5.adb: Add an expected error.\n+\t* gnat.dg/iter6.adb: New testcase.\n+\n 2019-07-23  Yannick Moy  <moy@adacore.com>\n \n \t* gnat.dg/ghost6.adb, gnat.dg/ghost6_pkg.ads: New testcase."}, {"sha": "fa21715d73dcefec43297cab8cbab9082a719bba", "filename": "gcc/testsuite/gnat.dg/iter5.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c910db716273c381b4e2f36f3d04c6e480876b63/gcc%2Ftestsuite%2Fgnat.dg%2Fiter5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c910db716273c381b4e2f36f3d04c6e480876b63/gcc%2Ftestsuite%2Fgnat.dg%2Fiter5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fiter5.adb?ref=c910db716273c381b4e2f36f3d04c6e480876b63", "patch": "@@ -4,7 +4,7 @@ with Iter5_Pkg;\n \n procedure Iter5 is\n begin\n-   for The_Filename of Iter5_Pkg.Iterator_For (\"C:\\Program_Files\") loop\n+   for The_Filename of Iter5_Pkg.Iterator_For (\"C:\\Program_Files\") loop  --  { dg-error \"cannot iterate over \\\"Item\\\"\" }\n       null;\n    end loop;\n end Iter5;"}, {"sha": "371352bc2f927abfce51cea7f4574a0aeb0aa170", "filename": "gcc/testsuite/gnat.dg/iter6.adb", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c910db716273c381b4e2f36f3d04c6e480876b63/gcc%2Ftestsuite%2Fgnat.dg%2Fiter6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c910db716273c381b4e2f36f3d04c6e480876b63/gcc%2Ftestsuite%2Fgnat.dg%2Fiter6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fiter6.adb?ref=c910db716273c381b4e2f36f3d04c6e480876b63", "patch": "@@ -0,0 +1,40 @@\n+--  { dg-do compile }\n+\n+with Ada.Iterator_Interfaces;\n+\n+procedure Iter6 is\n+  package Pkg is\n+  type Item (<>) is limited private;\n+   private\n+\n+   type Cursor is null record;\n+\n+  function Constant_Reference (The_Item     : aliased Item;\n+                               Unused_Index : Cursor) return String\n+     is (\"\");\n+\n+  function Has_More (Data : Cursor) return Boolean is (False);\n+\n+  package List_Iterator_Interfaces is new Ada.Iterator_Interfaces\n+    (Cursor, Has_More);\n+\n+   function Iterate (The_Item : Item)\n+\t\t    return List_Iterator_Interfaces.Forward_Iterator'class\n+     is (raise Program_Error);\n+\n+  type Item (Name_Length : Natural) is tagged limited record\n+     null;\n+  end record\n+  with\n+    Constant_Indexing => Constant_Reference,\n+    Default_Iterator  => Iterate,\n+    Iterator_Element  => String;\n+  end Pkg; use Pkg;\n+\n+  type Item_Ref is access Item;\n+  function F return Item_Ref is (null);\n+begin\n+   for I of F.all loop --  { dg-error \"cannot iterate over \\\"Item\\\"\" }\n+     null;\n+   end loop;\n+end;"}]}