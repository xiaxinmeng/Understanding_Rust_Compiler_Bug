{"sha": "c895acf211dd2cd196af66ebaf9f4ec43b1ce244", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzg5NWFjZjIxMWRkMmNkMTk2YWY2NmViYWY5ZjRlYzQzYjFjZTI0NA==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@codesourcery.com", "date": "2001-08-14T19:22:48Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2001-08-14T19:22:48Z"}, "message": "Makefile.in (OBJS): Add rtl-error.o\n\n\t* Makefile.in (OBJS): Add rtl-error.o\n\t(rtl-error.o): New rule.\n\t(diagnostic.o): Adjust dependency.\n\tdiagnostic.c (file_and_line_for_asm, diagnostic_for_asm,\n\terror_for_asm, _fatal_insn, _fatal_insn_not_found,\n\twarning_for_asm): Move to...\n\trtl-error.c: ...here.  New file.\n\nFrom-SVN: r44894", "tree": {"sha": "a43390515d7a718ae2f7dd177e7da03fab1bd131", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a43390515d7a718ae2f7dd177e7da03fab1bd131"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c895acf211dd2cd196af66ebaf9f4ec43b1ce244", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c895acf211dd2cd196af66ebaf9f4ec43b1ce244", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c895acf211dd2cd196af66ebaf9f4ec43b1ce244", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c895acf211dd2cd196af66ebaf9f4ec43b1ce244/comments", "author": null, "committer": null, "parents": [{"sha": "ddee9e8d0d65407e8a20a70a2f17f98fe0069500", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddee9e8d0d65407e8a20a70a2f17f98fe0069500", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ddee9e8d0d65407e8a20a70a2f17f98fe0069500"}], "stats": {"total": 321, "additions": 182, "deletions": 139}, "files": [{"sha": "06114049b966c7ecae6c1d7ef1d0f88fc1817083", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c895acf211dd2cd196af66ebaf9f4ec43b1ce244/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c895acf211dd2cd196af66ebaf9f4ec43b1ce244/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c895acf211dd2cd196af66ebaf9f4ec43b1ce244", "patch": "@@ -1,3 +1,13 @@\n+2001-08-14  Gabriel Dos Reis  <gdr@codesourcery.com>\n+\n+\t* Makefile.in (OBJS): Add rtl-error.o\n+\t(rtl-error.o): New rule.\n+\t(diagnostic.o): Adjust dependency.\n+\tdiagnostic.c (file_and_line_for_asm, diagnostic_for_asm,\n+\terror_for_asm, _fatal_insn, _fatal_insn_not_found,\n+\twarning_for_asm): Move to...\n+\trtl-error.c: ...here.  New file.\n+\n 2001-08-14  Richard Henderson  <rth@redhat.com>\n \n \t* dwarf2out.c (dwarf2out_frame_finish): Never emit .eh_frame"}, {"sha": "8ae2536e49b5b5e7f87bde8466c673abca47fd08", "filename": "gcc/Makefile.in", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c895acf211dd2cd196af66ebaf9f4ec43b1ce244/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c895acf211dd2cd196af66ebaf9f4ec43b1ce244/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=c895acf211dd2cd196af66ebaf9f4ec43b1ce244", "patch": "@@ -743,10 +743,10 @@ OBJS =\t\t\t\t\t\t\t\t\t\\\n  local-alloc.o loop.o mbchar.o optabs.o params.o predict.o print-rtl.o\t\\\n  print-tree.o profile.o real.o recog.o reg-stack.o regclass.o regmove.o\t\\\n  regrename.o reload.o reload1.o reorg.o resource.o rtl.o rtlanal.o\t\\\n- sbitmap.o sched-deps.o\tsched-ebb.o sched-rgn.o sched-vis.o sdbout.o\t\\\n- sibcall.o simplify-rtx.o splay-tree.o ssa.o ssa-ccp.o ssa-dce.o\t\\\n- stmt.o stor-layout.o stringpool.o timevar.o toplev.o tree.o unroll.o\t\\\n- varasm.o varray.o version.o xcoffout.o\t\t\t\t\t\\\n+ rtl-error.o sbitmap.o sched-deps.o sched-ebb.o sched-rgn.o sched-vis.o \\\n+ sdbout.o sibcall.o simplify-rtx.o splay-tree.o ssa.o ssa-ccp.o         \\\n+ ssa-dce.o stmt.o stor-layout.o stringpool.o timevar.o toplev.o tree.o  \\\n+ unroll.o varasm.o varray.o version.o xcoffout.o                        \\\n  $(GGC) $(out_object_file) $(EXTRA_OBJS)\n \n BACKEND = main.o libbackend.a\n@@ -1347,9 +1347,9 @@ stor-layout.o : stor-layout.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) flags.h \\\n    function.h $(EXPR_H) $(RTL_H) toplev.h $(GGC_H) $(TM_P_H)\n fold-const.o : fold-const.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) flags.h toplev.h \\\n    $(EXPR_H) $(RTL_H) $(GGC_H) $(TM_P_H)\n-diagnostic.o : diagnostic.c diagnostic.h diagnostic.def \\\n-   $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(RTL_H) $(TM_P_H) flags.h \\\n-   $(GGC_H) input.h $(INSN_ATTR_H) insn-config.h toplev.h intl.h\n+diagnostic.o : diagnostic.c diagnostic.h real.h diagnostic.def \\\n+   $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(TM_P_H) flags.h $(GGC_H) \\\n+   input.h toplev.h intl.h\n toplev.o : toplev.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(RTL_H) function.h \\\n    flags.h xcoffout.h input.h $(INSN_ATTR_H) output.h diagnostic.h \\\n    debug.h insn-config.h intl.h $(RECOG_H) Makefile toplev.h \\\n@@ -1361,6 +1361,9 @@ toplev.o : toplev.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(RTL_H) function.h \\\n \t  -c $(srcdir)/toplev.c\n main.o : main.c toplev.h\n \n+rtl-error.o: rtl-error.c system.h $(RTL_H) $(INSN_ATTR_H) insn-config.h \\\n+   input.h toplev.h intl.h diagnostic.h\n+\n rtl.o : rtl.c $(GCONFIG_H) $(SYSTEM_H) $(RTL_H) real.h $(GGC_H) errors.h\n \t$(CC) -c $(ALL_CFLAGS) -DGENERATOR_FILE $(ALL_CPPFLAGS) $(INCLUDES) $< $(OUTPUT_OPTION)\n "}, {"sha": "a23c83658ba2d5c43be17760c1dc51d1d70c9c19", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 0, "deletions": 132, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c895acf211dd2cd196af66ebaf9f4ec43b1ce244/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c895acf211dd2cd196af66ebaf9f4ec43b1ce244/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=c895acf211dd2cd196af66ebaf9f4ec43b1ce244", "patch": "@@ -27,14 +27,10 @@ Boston, MA 02111-1307, USA.  */\n #undef FLOAT /* This is for hpux. They should change hpux.  */\n #undef FFS  /* Some systems define this in param.h.  */\n #include \"system.h\"\n-\n #include \"tree.h\"\n-#include \"rtl.h\"\n #include \"tm_p.h\"\n #include \"flags.h\"\n #include \"input.h\"\n-#include \"insn-attr.h\"\n-#include \"insn-config.h\"\n #include \"toplev.h\"\n #include \"intl.h\"\n #include \"diagnostic.h\"\n@@ -73,8 +69,6 @@ static char *build_message_string PARAMS ((const char *, ...))\n static void output_do_printf PARAMS ((output_buffer *, const char *))\n      ATTRIBUTE_PRINTF (2, 0);\n static void format_with_decl PARAMS ((output_buffer *, tree));\n-static void file_and_line_for_asm PARAMS ((rtx, const char **, int *));\n-static void diagnostic_for_asm PARAMS ((rtx, const char *, va_list *, int));\n static void diagnostic_for_decl PARAMS ((tree, const char *, va_list *, int));\n static void set_real_maximum_length PARAMS ((output_buffer *));\n \n@@ -904,61 +898,6 @@ format_with_decl (buffer, decl)\n     }\n }\n \n-/* Figure file and line of the given INSN.  */\n-\n-static void\n-file_and_line_for_asm (insn, pfile, pline)\n-     rtx insn;\n-     const char **pfile;\n-     int *pline;\n-{\n-  rtx body = PATTERN (insn);\n-  rtx asmop;\n-\n-  /* Find the (or one of the) ASM_OPERANDS in the insn.  */\n-  if (GET_CODE (body) == SET && GET_CODE (SET_SRC (body)) == ASM_OPERANDS)\n-    asmop = SET_SRC (body);\n-  else if (GET_CODE (body) == ASM_OPERANDS)\n-    asmop = body;\n-  else if (GET_CODE (body) == PARALLEL\n-\t   && GET_CODE (XVECEXP (body, 0, 0)) == SET)\n-    asmop = SET_SRC (XVECEXP (body, 0, 0));\n-  else if (GET_CODE (body) == PARALLEL\n-\t   && GET_CODE (XVECEXP (body, 0, 0)) == ASM_OPERANDS)\n-    asmop = XVECEXP (body, 0, 0);\n-  else\n-    asmop = NULL;\n-\n-  if (asmop)\n-    {\n-      *pfile = ASM_OPERANDS_SOURCE_FILE (asmop);\n-      *pline = ASM_OPERANDS_SOURCE_LINE (asmop);\n-    }\n-  else\n-    {\n-      *pfile = input_filename;\n-      *pline = lineno;\n-    }\n-}\n-\n-/* Report a diagnostic MESSAGE (an errror or a WARNING) at the line number\n-   of the insn INSN.  This is used only when INSN is an `asm' with operands,\n-   and each ASM_OPERANDS records its own source file and line.  */\n-\n-static void\n-diagnostic_for_asm (insn, msg, args_ptr, warn)\n-     rtx insn;\n-     const char *msg;\n-     va_list *args_ptr;\n-     int warn;\n-{\n-  diagnostic_context dc;\n-\n-  set_diagnostic_context (&dc, msg, args_ptr, NULL, 0, warn);\n-  file_and_line_for_asm (insn, &diagnostic_file_location (&dc),\n-                         &diagnostic_line_location (&dc));\n-  report_diagnostic (&dc);\n-}\n \n /* Report a diagnostic MESSAGE at the declaration DECL.\n    MSG is a format string which uses %s to substitute the declaration\n@@ -1295,25 +1234,6 @@ error_with_decl VPARAMS ((tree decl, const char *msgid, ...))\n   va_end (ap);\n }\n \n-void\n-error_for_asm VPARAMS ((rtx insn, const char *msgid, ...))\n-{\n-#ifndef ANSI_PROTOTYPES\n-  rtx insn;\n-  const char *msgid;\n-#endif\n-  va_list ap;\n-\n-  VA_START (ap, msgid);\n-\n-#ifndef ANSI_PROTOTYPES\n-  insn = va_arg (ap, rtx);\n-  msgid = va_arg (ap, const char *);\n-#endif\n-\n-  diagnostic_for_asm (insn, msgid, &ap, /* warn = */ 0);\n-  va_end (ap);\n-}\n \n /* Report an error message.  The arguments are like that of printf.  */\n \n@@ -1416,38 +1336,6 @@ See %s for instructions.\\n\", GCCBUGURL);\n   exit (FATAL_EXIT_CODE);\n }\n \n-void\n-_fatal_insn (msgid, insn, file, line, function)\n-     const char *msgid;\n-     rtx insn;\n-     const char *file;\n-     int line;\n-     const char *function;\n-{\n-  error (\"%s\", _(msgid));\n-\n-  /* The above incremented error_count, but isn't an error that we want to\n-     count, so reset it here.  */\n-  errorcount--;\n-\n-  debug_rtx (insn);\n-  fancy_abort (file, line, function);\n-}\n-\n-void\n-_fatal_insn_not_found (insn, file, line, function)\n-     rtx insn;\n-     const char *file;\n-     int line;\n-     const char *function;\n-{\n-  if (INSN_CODE (insn) < 0)\n-    _fatal_insn (\"Unrecognizable insn:\", insn, file, line, function);\n-  else\n-    _fatal_insn (\"Insn does not satisfy its constraints:\",\n-\t\tinsn, file, line, function);\n-}\n-\n void\n warning_with_file_and_line VPARAMS ((const char *file, int line,\n \t\t\t\t     const char *msgid, ...))\n@@ -1493,26 +1381,6 @@ warning_with_decl VPARAMS ((tree decl, const char *msgid, ...))\n   va_end (ap);\n }\n \n-void\n-warning_for_asm VPARAMS ((rtx insn, const char *msgid, ...))\n-{\n-#ifndef ANSI_PROTOTYPES\n-  rtx insn;\n-  const char *msgid;\n-#endif\n-  va_list ap;\n-\n-  VA_START (ap, msgid);\n-\n-#ifndef ANSI_PROTOTYPES\n-  insn = va_arg (ap, rtx);\n-  msgid = va_arg (ap, const char *);\n-#endif\n-\n-  diagnostic_for_asm (insn, msgid, &ap, /* warn = */ 1);\n-  va_end (ap);\n-}\n-\n void\n warning VPARAMS ((const char *msgid, ...))\n {"}, {"sha": "d9b9bb68f9bfc3e326d7d1ff78bb4a644b440057", "filename": "gcc/rtl-error.c", "status": "added", "additions": 162, "deletions": 0, "changes": 162, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c895acf211dd2cd196af66ebaf9f4ec43b1ce244/gcc%2Frtl-error.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c895acf211dd2cd196af66ebaf9f4ec43b1ce244/gcc%2Frtl-error.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl-error.c?ref=c895acf211dd2cd196af66ebaf9f4ec43b1ce244", "patch": "@@ -0,0 +1,162 @@\n+/* RTL specific diagnostic subroutines for the GNU C compiler\n+   Copyright (C) 2001 Free Software Foundation, Inc.\n+   Contributed by Gabriel Dos Reis <gdr@codesourcery.com>\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+#include \"config.h\"\n+#undef FLOAT /* This is for hpux. They should change hpux.  */\n+#undef FFS  /* Some systems define this in param.h.  */\n+#include \"system.h\"\n+#include \"rtl.h\"\n+#include \"insn-attr.h\"\n+#include \"insn-config.h\"\n+#include \"input.h\"\n+#include \"toplev.h\"\n+#include \"intl.h\"\n+#include \"diagnostic.h\"\n+\n+static void file_and_line_for_asm PARAMS ((rtx, const char **, int *));\n+static void diagnostic_for_asm PARAMS ((rtx, const char *, va_list *, int));\n+\n+/* Figure file and line of the given INSN.  */\n+static void\n+file_and_line_for_asm (insn, pfile, pline)\n+     rtx insn;\n+     const char **pfile;\n+     int *pline;\n+{\n+  rtx body = PATTERN (insn);\n+  rtx asmop;\n+\n+  /* Find the (or one of the) ASM_OPERANDS in the insn.  */\n+  if (GET_CODE (body) == SET && GET_CODE (SET_SRC (body)) == ASM_OPERANDS)\n+    asmop = SET_SRC (body);\n+  else if (GET_CODE (body) == ASM_OPERANDS)\n+    asmop = body;\n+  else if (GET_CODE (body) == PARALLEL\n+\t   && GET_CODE (XVECEXP (body, 0, 0)) == SET)\n+    asmop = SET_SRC (XVECEXP (body, 0, 0));\n+  else if (GET_CODE (body) == PARALLEL\n+\t   && GET_CODE (XVECEXP (body, 0, 0)) == ASM_OPERANDS)\n+    asmop = XVECEXP (body, 0, 0);\n+  else\n+    asmop = NULL;\n+\n+  if (asmop)\n+    {\n+      *pfile = ASM_OPERANDS_SOURCE_FILE (asmop);\n+      *pline = ASM_OPERANDS_SOURCE_LINE (asmop);\n+    }\n+  else\n+    {\n+      *pfile = input_filename;\n+      *pline = lineno;\n+    }\n+}\n+\n+/* Report a diagnostic MESSAGE (an errror or a WARNING) at the line number\n+   of the insn INSN.  This is used only when INSN is an `asm' with operands,\n+   and each ASM_OPERANDS records its own source file and line.  */\n+static void\n+diagnostic_for_asm (insn, msg, args_ptr, warn)\n+     rtx insn;\n+     const char *msg;\n+     va_list *args_ptr;\n+     int warn;\n+{\n+  diagnostic_context dc;\n+\n+  set_diagnostic_context (&dc, msg, args_ptr, NULL, 0, warn);\n+  file_and_line_for_asm (insn, &diagnostic_file_location (&dc),\n+                         &diagnostic_line_location (&dc));\n+  report_diagnostic (&dc);\n+}\n+\n+void\n+error_for_asm VPARAMS ((rtx insn, const char *msgid, ...))\n+{\n+#ifndef ANSI_PROTOTYPES\n+  rtx insn;\n+  const char *msgid;\n+#endif\n+  va_list ap;\n+\n+  VA_START (ap, msgid);\n+\n+#ifndef ANSI_PROTOTYPES\n+  insn = va_arg (ap, rtx);\n+  msgid = va_arg (ap, const char *);\n+#endif\n+\n+  diagnostic_for_asm (insn, msgid, &ap, /* warn = */ 0);\n+  va_end (ap);\n+}\n+\n+void\n+warning_for_asm VPARAMS ((rtx insn, const char *msgid, ...))\n+{\n+#ifndef ANSI_PROTOTYPES\n+  rtx insn;\n+  const char *msgid;\n+#endif\n+  va_list ap;\n+\n+  VA_START (ap, msgid);\n+\n+#ifndef ANSI_PROTOTYPES\n+  insn = va_arg (ap, rtx);\n+  msgid = va_arg (ap, const char *);\n+#endif\n+\n+  diagnostic_for_asm (insn, msgid, &ap, /* warn = */ 1);\n+  va_end (ap);\n+}\n+\n+void\n+_fatal_insn (msgid, insn, file, line, function)\n+     const char *msgid;\n+     rtx insn;\n+     const char *file;\n+     int line;\n+     const char *function;\n+{\n+  error (\"%s\", _(msgid));\n+\n+  /* The above incremented error_count, but isn't an error that we want to\n+     count, so reset it here.  */\n+  errorcount--;\n+\n+  debug_rtx (insn);\n+  fancy_abort (file, line, function);\n+}\n+\n+void\n+_fatal_insn_not_found (insn, file, line, function)\n+     rtx insn;\n+     const char *file;\n+     int line;\n+     const char *function;\n+{\n+  if (INSN_CODE (insn) < 0)\n+    _fatal_insn (\"Unrecognizable insn:\", insn, file, line, function);\n+  else\n+    _fatal_insn (\"Insn does not satisfy its constraints:\",\n+\t\tinsn, file, line, function);\n+}\n+"}]}