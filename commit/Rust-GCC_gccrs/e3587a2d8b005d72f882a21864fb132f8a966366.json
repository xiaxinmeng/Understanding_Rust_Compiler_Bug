{"sha": "e3587a2d8b005d72f882a21864fb132f8a966366", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTM1ODdhMmQ4YjAwNWQ3MmY4ODJhMjE4NjRmYjEzMmY4YTk2NjM2Ng==", "commit": {"author": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2020-11-05T09:02:29Z"}, "committer": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2020-11-05T09:02:29Z"}, "message": "middle-end: Store and use the SLP instance kind when aborting load/store lanes\n\nThis patch stores the SLP instance kind in the SLP instance so that we can use\nit later when detecting load/store lanes support.\n\nThis also changes the load/store lane support check to only check if the SLP\nkind is a store.  This means that in order for the load/lanes to work all\ninstances must be of kind store.\n\ngcc/ChangeLog:\n\n\t* tree-vect-loop.c (vect_analyze_loop_2): Check kind.\n\t* tree-vect-slp.c (vect_build_slp_instance): New.\n\t(enum slp_instance_kind): Move to...\n\t* tree-vectorizer.h (enum slp_instance_kind): .. Here\n\t(SLP_INSTANCE_KIND): New.", "tree": {"sha": "057abcf3b4403444eac78664cd0483d3f0cd7454", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/057abcf3b4403444eac78664cd0483d3f0cd7454"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e3587a2d8b005d72f882a21864fb132f8a966366", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3587a2d8b005d72f882a21864fb132f8a966366", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3587a2d8b005d72f882a21864fb132f8a966366", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3587a2d8b005d72f882a21864fb132f8a966366/comments", "author": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "025f434a87336e38bf5140fba2005081876aa911", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/025f434a87336e38bf5140fba2005081876aa911", "html_url": "https://github.com/Rust-GCC/gccrs/commit/025f434a87336e38bf5140fba2005081876aa911"}], "stats": {"total": 22, "additions": 15, "deletions": 7}, "files": [{"sha": "ef2ea3d0fb0a133534a92d66d1a393c13a4404c1", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3587a2d8b005d72f882a21864fb132f8a966366/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3587a2d8b005d72f882a21864fb132f8a966366/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=e3587a2d8b005d72f882a21864fb132f8a966366", "patch": "@@ -2394,6 +2394,7 @@ vect_analyze_loop_2 (loop_vec_info loop_vinfo, bool &fatal, unsigned *n_stmts)\n \t  /* If the loads and stores can be handled with load/store-lane\n \t     instructions record it and move on to the next instance.  */\n \t  if (loads_permuted\n+\t      && SLP_INSTANCE_KIND (instance) == slp_inst_kind_store\n \t      && vect_store_lanes_supported (vectype, group_size, false))\n \t    {\n \t      FOR_EACH_VEC_ELT (SLP_INSTANCE_LOADS (instance), i, load_node)"}, {"sha": "420c3c93374b788d96779bf0b730d1bc47a98f58", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3587a2d8b005d72f882a21864fb132f8a966366/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3587a2d8b005d72f882a21864fb132f8a966366/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=e3587a2d8b005d72f882a21864fb132f8a966366", "patch": "@@ -2171,13 +2171,6 @@ calculate_unrolling_factor (poly_uint64 nunits, unsigned int group_size)\n   return exact_div (common_multiple (nunits, group_size), group_size);\n }\n \n-enum slp_instance_kind {\n-    slp_inst_kind_store,\n-    slp_inst_kind_reduc_group,\n-    slp_inst_kind_reduc_chain,\n-    slp_inst_kind_ctor\n-};\n-\n static bool\n vect_analyze_slp_instance (vec_info *vinfo,\n \t\t\t   scalar_stmts_to_slp_tree_map_t *bst_map,\n@@ -2253,6 +2246,7 @@ vect_build_slp_instance (vec_info *vinfo,\n \t  SLP_INSTANCE_UNROLLING_FACTOR (new_instance) = unrolling_factor;\n \t  SLP_INSTANCE_LOADS (new_instance) = vNULL;\n \t  SLP_INSTANCE_ROOT_STMT (new_instance) = root_stmt_info;\n+\t  SLP_INSTANCE_KIND (new_instance) = kind;\n \t  new_instance->reduc_phis = NULL;\n \t  new_instance->cost_vec = vNULL;\n \t  new_instance->subgraph_entries = vNULL;"}, {"sha": "3ccd0fd552d3695b73a9768da9c5b4ddc84af686", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3587a2d8b005d72f882a21864fb132f8a966366/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3587a2d8b005d72f882a21864fb132f8a966366/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=e3587a2d8b005d72f882a21864fb132f8a966366", "patch": "@@ -174,6 +174,15 @@ struct _slp_tree {\n   static void operator delete (void *, size_t);\n };\n \n+/* The enum describes the type of operations that an SLP instance\n+   can perform. */\n+\n+enum slp_instance_kind {\n+    slp_inst_kind_store,\n+    slp_inst_kind_reduc_group,\n+    slp_inst_kind_reduc_chain,\n+    slp_inst_kind_ctor\n+};\n \n /* SLP instance is a sequence of stmts in a loop that can be packed into\n    SIMD stmts.  */\n@@ -202,6 +211,9 @@ typedef class _slp_instance {\n      entries into the same subgraph, including itself.  */\n   vec<_slp_instance *> subgraph_entries;\n \n+  /* The type of operation the SLP instance is performing.  */\n+  slp_instance_kind kind;\n+\n   dump_user_location_t location () const;\n } *slp_instance;\n \n@@ -211,6 +223,7 @@ typedef class _slp_instance {\n #define SLP_INSTANCE_UNROLLING_FACTOR(S)         (S)->unrolling_factor\n #define SLP_INSTANCE_LOADS(S)                    (S)->loads\n #define SLP_INSTANCE_ROOT_STMT(S)                (S)->root_stmt\n+#define SLP_INSTANCE_KIND(S)                     (S)->kind\n \n #define SLP_TREE_CHILDREN(S)                     (S)->children\n #define SLP_TREE_SCALAR_STMTS(S)                 (S)->stmts"}]}