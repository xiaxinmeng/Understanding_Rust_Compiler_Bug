{"sha": "de67f943b858099b40f73632a51e66147ec79c9b", "node_id": "C_kwDOANBUbNoAKGRlNjdmOTQzYjg1ODA5OWI0MGY3MzYzMmE1MWU2NjE0N2VjNzljOWI", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-02-03T08:45:16Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-02-03T08:45:16Z"}, "message": "ranger: Fix up wi_fold_in_parts for small precision types [PR104334]\n\nThe wide-int.h templates expect that when an int/long etc. operand is used\nit will be sign-extended based on the types precision.\nwi_fold_in_parts passes 3 such non-zero constants to wi::lt_p, wi::gt_p\nand wi::eq_p - 1, 3 and 4, which means it was doing weird things if either\nsome of 1, 3 or 4 weren't representable in type, or if type was unsigned 3 bit\ntype 4 should be written as -4.\nThe following patch promotes the subtraction operands to widest_int and\nuses that as the type for ?h_range variables and compares them as such.\nWe don't need the overflow handling because there is never an overflow.\n\n2022-02-02  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/104334\n\t* range-op.cc (range_operator::wi_fold_in_parts): Change lh_range\n\tand rh_range type to widest_int and subtract in widest_int.  Remove\n\tov_rh, ov_lh and sign vars, always perform comparisons as signed\n\tand use >, < and == operators for it.\n\n\t* g++.dg/opt/pr104334.C: New test.", "tree": {"sha": "9b52aaa46e288416f582859387b7d3ea46e3df2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9b52aaa46e288416f582859387b7d3ea46e3df2c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/de67f943b858099b40f73632a51e66147ec79c9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de67f943b858099b40f73632a51e66147ec79c9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de67f943b858099b40f73632a51e66147ec79c9b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de67f943b858099b40f73632a51e66147ec79c9b/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54d21dd5b5c5c5539505b3e037cdecb3b0ab3918", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54d21dd5b5c5c5539505b3e037cdecb3b0ab3918", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54d21dd5b5c5c5539505b3e037cdecb3b0ab3918"}], "stats": {"total": 62, "additions": 50, "deletions": 12}, "files": [{"sha": "ebc21d6038a65125dbd125ef01ccfacd53ade97a", "filename": "gcc/range-op.cc", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de67f943b858099b40f73632a51e66147ec79c9b/gcc%2Frange-op.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de67f943b858099b40f73632a51e66147ec79c9b/gcc%2Frange-op.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frange-op.cc?ref=de67f943b858099b40f73632a51e66147ec79c9b", "patch": "@@ -144,22 +144,21 @@ range_operator::wi_fold_in_parts (irange &r, tree type,\n \t\t\t\t  const wide_int &rh_lb,\n \t\t\t\t  const wide_int &rh_ub) const\n {\n-  wi::overflow_type ov_rh, ov_lh;\n   int_range_max tmp;\n-  wide_int rh_range = wi::sub (rh_ub, rh_lb, TYPE_SIGN (type), &ov_rh);\n-  wide_int lh_range = wi::sub (lh_ub, lh_lb, TYPE_SIGN (type), &ov_lh);\n-  signop sign = TYPE_SIGN (type);;\n+  widest_int rh_range = wi::sub (widest_int::from (rh_ub, TYPE_SIGN (type)),\n+\t\t\t\t widest_int::from (rh_lb, TYPE_SIGN (type)));\n+  widest_int lh_range = wi::sub (widest_int::from (lh_ub, TYPE_SIGN (type)),\n+\t\t\t\t widest_int::from (lh_lb, TYPE_SIGN (type)));\n   // If there are 2, 3, or 4 values in the RH range, do them separately.\n   // Call wi_fold_in_parts to check the RH side.\n-  if (wi::gt_p (rh_range, 0, sign) && wi::lt_p (rh_range, 4, sign)\n-      && ov_rh == wi::OVF_NONE)\n+  if (rh_range > 0 && rh_range < 4)\n     {\n       wi_fold_in_parts (r, type, lh_lb, lh_ub, rh_lb, rh_lb);\n-      if (wi::gt_p (rh_range, 1, sign))\n+      if (rh_range > 1)\n \t{\n \t  wi_fold_in_parts (tmp, type, lh_lb, lh_ub, rh_lb + 1, rh_lb + 1);\n \t  r.union_ (tmp);\n-\t  if (wi::eq_p (rh_range, 3))\n+\t  if (rh_range == 3)\n \t    {\n \t      wi_fold_in_parts (tmp, type, lh_lb, lh_ub, rh_lb + 2, rh_lb + 2);\n \t      r.union_ (tmp);\n@@ -170,15 +169,14 @@ range_operator::wi_fold_in_parts (irange &r, tree type,\n     }\n   // Otherise check for 2, 3, or 4 values in the LH range and split them up.\n   // The RH side has been checked, so no recursion needed.\n-  else if (wi::gt_p (lh_range, 0, sign) && wi::lt_p (lh_range, 4, sign)\n-\t   && ov_lh == wi::OVF_NONE)\n+  else if (lh_range > 0 && lh_range < 4)\n     {\n       wi_fold (r, type, lh_lb, lh_lb, rh_lb, rh_ub);\n-      if (wi::gt_p (lh_range, 1, sign))\n+      if (lh_range > 1)\n \t{\n \t  wi_fold (tmp, type, lh_lb + 1, lh_lb + 1, rh_lb, rh_ub);\n \t  r.union_ (tmp);\n-\t  if (wi::eq_p (lh_range, 3))\n+\t  if (lh_range == 3)\n \t    {\n \t      wi_fold (tmp, type, lh_lb + 2, lh_lb + 2, rh_lb, rh_ub);\n \t      r.union_ (tmp);"}, {"sha": "8b75b6a9122275a37c4840c69635916c02e4fee5", "filename": "gcc/testsuite/g++.dg/opt/pr104334.C", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de67f943b858099b40f73632a51e66147ec79c9b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr104334.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de67f943b858099b40f73632a51e66147ec79c9b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr104334.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr104334.C?ref=de67f943b858099b40f73632a51e66147ec79c9b", "patch": "@@ -0,0 +1,40 @@\n+// PR tree-optimization/104334\n+// { dg-do run { target c++11 } }\n+// { dg-options \"-O2 --param logical-op-non-short-circuit=0\" }\n+\n+enum class A { A0, A1, A2, A3 };\n+int x;\n+\n+__attribute__((noipa)) void\n+baz ()\n+{\n+  x = 1;\n+}\n+\n+struct B {\n+  unsigned b : 2;\n+\n+  A\n+  foo () const\n+  {\n+    return static_cast<A> (b);\n+  }\n+\n+  __attribute__((noinline)) void\n+  bar ()\n+  {\n+    if (foo () == A::A2 || foo () == A::A3)\n+      baz ();\n+  }\n+};\n+\n+int\n+main ()\n+{\n+  B c;\n+  c.b = 2;\n+  c.bar ();\n+  if (x != 1)\n+    __builtin_abort ();\n+  return 0;\n+}"}]}