{"sha": "c67e6e1492b2e8cedf8a95731ee788dc919984be", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzY3ZTZlMTQ5MmIyZThjZWRmOGE5NTczMWVlNzg4ZGM5MTk5ODRiZQ==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2003-09-28T04:56:35Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2003-09-28T04:56:35Z"}, "message": "toplev.c (flag_evaluation_order): New global variable.\n\n\n\t* toplev.c (flag_evaluation_order): New global variable.\n\t* flags.h (flag_evaluation_order): Prototype here.\n\t* expr.c (expand_operands): If we need to preserve observable\n\tevaluation order, protect exp1 from clobbering exp0's result.\n\n\t* java/lang.c (java_init_options): Set flag_evaluation_order.\n\t* java/expr.c (force_evaluation_order): Don't attempt to force\n\tevaluation order of binary operations using save_expr.\n\t* java/parse.y (java_complete_lhs): No longer need to call\n\tforce_evaluation_order when constructing binary operators.\n\nFrom-SVN: r71873", "tree": {"sha": "59d5e4829907404d9cd123482f4ad1565deac1eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/59d5e4829907404d9cd123482f4ad1565deac1eb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c67e6e1492b2e8cedf8a95731ee788dc919984be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c67e6e1492b2e8cedf8a95731ee788dc919984be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c67e6e1492b2e8cedf8a95731ee788dc919984be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c67e6e1492b2e8cedf8a95731ee788dc919984be/comments", "author": null, "committer": null, "parents": [{"sha": "edaf3e0357bbc16c01ff9f341016a1e6969a617d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edaf3e0357bbc16c01ff9f341016a1e6969a617d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/edaf3e0357bbc16c01ff9f341016a1e6969a617d"}], "stats": {"total": 45, "additions": 34, "deletions": 11}, "files": [{"sha": "dccdbdab2f4a8faef74c32c4e953a28e2dd0ecec", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c67e6e1492b2e8cedf8a95731ee788dc919984be/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c67e6e1492b2e8cedf8a95731ee788dc919984be/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c67e6e1492b2e8cedf8a95731ee788dc919984be", "patch": "@@ -1,3 +1,10 @@\n+2003-09-27  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* toplev.c (flag_evaluation_order): New global variable.\n+\t* flags.h (flag_evaluation_order): Prototype here.\n+\t* expr.c (expand_operands): If we need to preserve observable\n+\tevaluation order, protect exp1 from clobbering exp0's result.\n+\n 2003-09-28  Andreas Jaeger  <aj@suse.de>\n \n \t* c-decl.c (finish_function): Convert definition to ISO C90."}, {"sha": "26eaab014520fafa0eeed745e4380e73a80dfd42", "filename": "gcc/expr.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c67e6e1492b2e8cedf8a95731ee788dc919984be/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c67e6e1492b2e8cedf8a95731ee788dc919984be/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=c67e6e1492b2e8cedf8a95731ee788dc919984be", "patch": "@@ -6553,6 +6553,10 @@ expand_operands (tree exp0, tree exp1, rtx target, rtx *op0, rtx *op1,\n     }\n   else\n     {\n+      /* If we need to preserve evaluation order, copy exp0 into its own\n+\t temporary variable so that it can't be clobbered by exp1.  */\n+      if (flag_evaluation_order && TREE_SIDE_EFFECTS (exp1))\n+\texp0 = save_expr (exp0);\n       *op0 = expand_expr (exp0, target, VOIDmode, modifier);\n       *op1 = expand_expr (exp1, NULL_RTX, VOIDmode, modifier);\n     }"}, {"sha": "4d6ea074174bffb0dda208109b991937969924cb", "filename": "gcc/flags.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c67e6e1492b2e8cedf8a95731ee788dc919984be/gcc%2Fflags.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c67e6e1492b2e8cedf8a95731ee788dc919984be/gcc%2Fflags.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflags.h?ref=c67e6e1492b2e8cedf8a95731ee788dc919984be", "patch": "@@ -604,6 +604,9 @@ extern int flag_trapv;\n /* Nonzero if the signed arithmetic overflow should wrap around.  */\n extern int flag_wrapv;\n \n+/* Nonzero if subexpressions must be evaluated from left-to-right.  */\n+extern int flag_evaluation_order;\n+\n /* Value of the -G xx switch, and whether it was passed or not.  */\n extern unsigned HOST_WIDE_INT g_switch_value;\n extern bool g_switch_set;"}, {"sha": "514c0978188710c70dd3c7b0049dd3e3b5de9e07", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c67e6e1492b2e8cedf8a95731ee788dc919984be/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c67e6e1492b2e8cedf8a95731ee788dc919984be/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=c67e6e1492b2e8cedf8a95731ee788dc919984be", "patch": "@@ -1,3 +1,11 @@\n+2003-09-27  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* lang.c (java_init_options): Set flag_evaluation_order.\n+\t* expr.c (force_evaluation_order): Don't attempt to force\n+\tevaluation order of binary operations using save_expr.\n+\t* parse.y (java_complete_lhs): No longer need to call\n+\tforce_evaluation_order when constructing binary operators.\n+\n 2003-09-27  Alexandre Petit-Bianco  <apbianco@redhat.com>\n \t    Bryce McKinlay  <bryce@mckinlay.net.nz>\n "}, {"sha": "272cb351e786345bef995e8f106479d222af228c", "filename": "gcc/java/expr.c", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c67e6e1492b2e8cedf8a95731ee788dc919984be/gcc%2Fjava%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c67e6e1492b2e8cedf8a95731ee788dc919984be/gcc%2Fjava%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexpr.c?ref=c67e6e1492b2e8cedf8a95731ee788dc919984be", "patch": "@@ -3324,16 +3324,11 @@ force_evaluation_order (tree node)\n {\n   if (flag_syntax_only)\n     return node;\n-  if (TREE_CODE_CLASS (TREE_CODE (node)) == '2')\n-    {\n-      if (TREE_SIDE_EFFECTS (TREE_OPERAND (node, 1)))\n-\tTREE_OPERAND (node, 0) = save_expr (TREE_OPERAND (node, 0));\n-    }\n-  else if (TREE_CODE (node) == CALL_EXPR\n-           || TREE_CODE (node) == NEW_CLASS_EXPR\n-           || (TREE_CODE (node) == COMPOUND_EXPR\n-               && TREE_CODE (TREE_OPERAND (node, 0)) == CALL_EXPR\n-               && TREE_CODE (TREE_OPERAND (node, 1)) == SAVE_EXPR)) \n+  if (TREE_CODE (node) == CALL_EXPR\n+      || TREE_CODE (node) == NEW_CLASS_EXPR\n+      || (TREE_CODE (node) == COMPOUND_EXPR\n+\t  && TREE_CODE (TREE_OPERAND (node, 0)) == CALL_EXPR\n+\t  && TREE_CODE (TREE_OPERAND (node, 1)) == SAVE_EXPR)) \n     {\n       tree arg, cmp;\n "}, {"sha": "a3ed3276ba4af4b7d40db3e08b17617989d2c569", "filename": "gcc/java/lang.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c67e6e1492b2e8cedf8a95731ee788dc919984be/gcc%2Fjava%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c67e6e1492b2e8cedf8a95731ee788dc919984be/gcc%2Fjava%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.c?ref=c67e6e1492b2e8cedf8a95731ee788dc919984be", "patch": "@@ -685,6 +685,9 @@ java_init_options (unsigned int argc ATTRIBUTE_UNUSED,\n   /* In Java arithmetic overflow always wraps around.  */\n   flag_wrapv = 1;\n \n+  /* Java requires left-to-right evaluation of subexpressions.  */\n+  flag_evaluation_order = 1;\n+\n   jcf_path_init ();\n \n   return CL_Java;"}, {"sha": "ebcf6800128a0049dea7b71984693eb7c5977759", "filename": "gcc/java/parse.y", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c67e6e1492b2e8cedf8a95731ee788dc919984be/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c67e6e1492b2e8cedf8a95731ee788dc919984be/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=c67e6e1492b2e8cedf8a95731ee788dc919984be", "patch": "@@ -12265,7 +12265,7 @@ java_complete_lhs (tree node)\n \n           TREE_OPERAND (node, 1) = nn;\n         }\n-      return force_evaluation_order (patch_binop (node, wfl_op1, wfl_op2));\n+      return patch_binop (node, wfl_op1, wfl_op2);\n \n     case INSTANCEOF_EXPR:\n       wfl_op1 = TREE_OPERAND (node, 0);"}, {"sha": "425a02597c1b60fe3babd8ff4f2ce7aae6ffa95c", "filename": "gcc/toplev.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c67e6e1492b2e8cedf8a95731ee788dc919984be/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c67e6e1492b2e8cedf8a95731ee788dc919984be/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=c67e6e1492b2e8cedf8a95731ee788dc919984be", "patch": "@@ -988,6 +988,9 @@ int flag_trapv = 0;\n /* Nonzero if signed arithmetic overflow should wrap around.  */\n int flag_wrapv = 0;\n \n+/* Nonzero if subexpressions must be evaluated from left-to-right.  */\n+int flag_evaluation_order = 0;\n+\n /* Add or remove a leading underscore from user symbols.  */\n int flag_leading_underscore = -1;\n "}]}