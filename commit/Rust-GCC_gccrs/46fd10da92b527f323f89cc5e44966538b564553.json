{"sha": "46fd10da92b527f323f89cc5e44966538b564553", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDZmZDEwZGE5MmI1MjdmMzIzZjg5Y2M1ZTQ0OTY2NTM4YjU2NDU1Mw==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2006-12-22T12:28:52Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2006-12-22T12:28:52Z"}, "message": "re PR rtl-optimization/29840 (build/genconditions ../../gcc/gcc/config/pa/pa.md > tmp-condmd.c: /bin/sh: 13354 Memory fault(coredump))\n\n2006-12-22  Paolo Bonzini  <bonzini@gnu.org>\n\n\tPR rtl-optimization/29840\n\n\t* fwprop.c (forward_propagate_into): Reject artificial uses/defs.\n\t(fwprop_init): Add DF_HARD_REGS to df_init call.\n\nFrom-SVN: r120147", "tree": {"sha": "36e2ee57526b4b3c6b8d4c517b51f0f8e348cb54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/36e2ee57526b4b3c6b8d4c517b51f0f8e348cb54"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/46fd10da92b527f323f89cc5e44966538b564553", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46fd10da92b527f323f89cc5e44966538b564553", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46fd10da92b527f323f89cc5e44966538b564553", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46fd10da92b527f323f89cc5e44966538b564553/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "af71363e455f4c60cf98f5ef42b4ddd8daedabd3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af71363e455f4c60cf98f5ef42b4ddd8daedabd3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af71363e455f4c60cf98f5ef42b4ddd8daedabd3"}], "stats": {"total": 13, "additions": 12, "deletions": 1}, "files": [{"sha": "dadfa10f62309abe1043f8d2c9b5a0ab2d55164c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46fd10da92b527f323f89cc5e44966538b564553/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46fd10da92b527f323f89cc5e44966538b564553/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=46fd10da92b527f323f89cc5e44966538b564553", "patch": "@@ -1,3 +1,10 @@\n+2006-12-22  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\tPR rtl-optimization/29840\n+\n+\t* fwprop.c (forward_propagate_into): Reject artificial uses/defs.\n+\t(fwprop_init): Add DF_HARD_REGS to df_init call.\n+\n 2006-12-21  Andrew Pinski  <pinskia@gmail.com>\n \n \t* tree-nested.c (create_tmp_var_for): Check for vector type"}, {"sha": "46e1a553ad54535a93833d06ad147e55fa9e07f0", "filename": "gcc/fwprop.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46fd10da92b527f323f89cc5e44966538b564553/gcc%2Ffwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46fd10da92b527f323f89cc5e44966538b564553/gcc%2Ffwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffwprop.c?ref=46fd10da92b527f323f89cc5e44966538b564553", "patch": "@@ -846,6 +846,8 @@ forward_propagate_into (struct df_ref *use)\n \n   if (DF_REF_FLAGS (use) & DF_REF_READ_WRITE)\n     return;\n+  if (DF_REF_FLAGS (use) & DF_REF_ARTIFICIAL)\n+    return;\n \n   /* Only consider uses that have a single definition.  */\n   defs = DF_REF_CHAIN (use);\n@@ -855,6 +857,8 @@ forward_propagate_into (struct df_ref *use)\n   def = defs->ref;\n   if (DF_REF_FLAGS (def) & DF_REF_READ_WRITE)\n     return;\n+  if (DF_REF_FLAGS (def) & DF_REF_ARTIFICIAL)\n+    return;\n \n   /* Do not propagate loop invariant definitions inside the loop if\n      we are going to unroll.  */\n@@ -899,7 +903,7 @@ fwprop_init (void)\n \n   /* Now set up the dataflow problem (we only want use-def chains) and\n      put the dataflow solver to work.  */\n-  df = df_init (DF_SUBREGS | DF_EQUIV_NOTES);\n+  df = df_init (DF_HARD_REGS | DF_SUBREGS | DF_EQUIV_NOTES);\n   df_chain_add_problem (df, DF_UD_CHAIN);\n   df_analyze (df);\n   df_dump (df, dump_file);"}]}