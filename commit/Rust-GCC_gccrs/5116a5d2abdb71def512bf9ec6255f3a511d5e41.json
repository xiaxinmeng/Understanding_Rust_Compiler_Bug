{"sha": "5116a5d2abdb71def512bf9ec6255f3a511d5e41", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTExNmE1ZDJhYmRiNzFkZWY1MTJiZjllYzYyNTVmM2E1MTFkNWU0MQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@codesourcery.com", "date": "2005-09-30T15:36:26Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2005-09-30T15:36:26Z"}, "message": "tree-vect-transform.c, [...]: Fix comment typos.\n\n\t* tree-vect-transform.c, config/ms1/ms1.md,\n\tconfig/s390/s390.c, config/v850/v850.md: Fix comment typos.\n\tFollow spelling conventions.\n\t* doc/invoke.texi, doc/md.texi: Fix typos.\n\nFrom-SVN: r104817", "tree": {"sha": "5d9c2509ab43e109caf93d2dee946c2ca4497df4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5d9c2509ab43e109caf93d2dee946c2ca4497df4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5116a5d2abdb71def512bf9ec6255f3a511d5e41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5116a5d2abdb71def512bf9ec6255f3a511d5e41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5116a5d2abdb71def512bf9ec6255f3a511d5e41", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5116a5d2abdb71def512bf9ec6255f3a511d5e41/comments", "author": null, "committer": null, "parents": [{"sha": "5dc2e33320cada5471dfa0fa219c302d367b75c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5dc2e33320cada5471dfa0fa219c302d367b75c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5dc2e33320cada5471dfa0fa219c302d367b75c1"}], "stats": {"total": 27, "additions": 17, "deletions": 10}, "files": [{"sha": "aaa7c8cbac0487a30f90596986553becf05a91ad", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5116a5d2abdb71def512bf9ec6255f3a511d5e41/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5116a5d2abdb71def512bf9ec6255f3a511d5e41/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5116a5d2abdb71def512bf9ec6255f3a511d5e41", "patch": "@@ -1,3 +1,10 @@\n+2005-09-30  Kazu Hirata  <kazu@codesourcery.com>\n+\n+\t* tree-vect-transform.c, config/ms1/ms1.md,\n+\tconfig/s390/s390.c, config/v850/v850.md: Fix comment typos.\n+\tFollow spelling conventions.\n+\t* doc/invoke.texi, doc/md.texi: Fix typos.\n+\n 2005-09-30  Andrew Macleod  <amacleod@redat.com>\n \n \tPR tree-optimization/21430"}, {"sha": "22c6b59eab3a38754fa439a74ffae809affb0bb4", "filename": "gcc/config/ms1/ms1.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5116a5d2abdb71def512bf9ec6255f3a511d5e41/gcc%2Fconfig%2Fms1%2Fms1.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5116a5d2abdb71def512bf9ec6255f3a511d5e41/gcc%2Fconfig%2Fms1%2Fms1.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fms1%2Fms1.md?ref=5116a5d2abdb71def512bf9ec6255f3a511d5e41", "patch": "@@ -243,7 +243,7 @@\n \tDONE;\n     }\n \n-   /* If the load is a psuedo register in a stack slot, some simplification\n+   /* If the load is a pseudo register in a stack slot, some simplification\n       can be made because the loads are aligned */\n   if ( (! TARGET_BYTE_ACCESS) \n         && (reload_in_progress && GET_CODE (operands[1]) == SUBREG\n@@ -417,7 +417,7 @@\n \tDONE;\n     }\n \n-   /* If the load is a psuedo register in a stack slot, some simplification\n+   /* If the load is a pseudo register in a stack slot, some simplification\n       can be made because the loads are aligned */\n   if ( (reload_in_progress && GET_CODE (operands[1]) == SUBREG\n \t  && GET_CODE (SUBREG_REG (operands[1])) == REG"}, {"sha": "5284db160df0cd8b8fed5c6abf056230f4705dde", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5116a5d2abdb71def512bf9ec6255f3a511d5e41/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5116a5d2abdb71def512bf9ec6255f3a511d5e41/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=5116a5d2abdb71def512bf9ec6255f3a511d5e41", "patch": "@@ -1099,7 +1099,7 @@ s390_overlap_p (rtx mem1, rtx mem2, HOST_WIDE_INT size)\n      Overlapping operations would otherwise be recognized by the S/390 hardware\n      and would fall back to a slower implementation. Allowing overlapping \n      operations would lead to slow code but not to wrong code. Therefore we are\n-     somewhat optimistict if we cannot prove that the memory blocks are \n+     somewhat optimistic if we cannot prove that the memory blocks are \n      overlapping.\n      That's why we return false here although this may accept operations on\n      overlapping memory areas.  */"}, {"sha": "9b353063410a2476098d534d65c62bd4410dfb06", "filename": "gcc/config/v850/v850.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5116a5d2abdb71def512bf9ec6255f3a511d5e41/gcc%2Fconfig%2Fv850%2Fv850.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5116a5d2abdb71def512bf9ec6255f3a511d5e41/gcc%2Fconfig%2Fv850%2Fv850.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.md?ref=5116a5d2abdb71def512bf9ec6255f3a511d5e41", "patch": "@@ -1309,7 +1309,7 @@\n   /* Branch to the default label if out of range of the table.  */\n   emit_jump_insn (gen_bgtu (operands[4]));\n \n-  /* Disabled because the switch pattern is not being recognised\n+  /* Disabled because the switch pattern is not being recognized\n      properly at the moment.  eg. compiling vfscanf.c in newlib.  */\n   if (0 && ! TARGET_BIG_SWITCH && TARGET_V850E)\n     {"}, {"sha": "1a5030131e665ccc44b143dec89ddbd65251d447", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5116a5d2abdb71def512bf9ec6255f3a511d5e41/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5116a5d2abdb71def512bf9ec6255f3a511d5e41/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=5116a5d2abdb71def512bf9ec6255f3a511d5e41", "patch": "@@ -5912,7 +5912,7 @@ Bound on size of expressions used in the scalar evolutions analyzer.\n Large expressions slow the analyzer.\n \n @item vect-max-version-checks\n-The maxinum number of runtime checks that can be performed when doing\n+The maximum number of runtime checks that can be performed when doing\n loop versioning in the vectorizer.  See option ftree-vect-loop-version\n for more information.\n "}, {"sha": "460f24df10a9fb24c73d98bc698322e4ddc9b993", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5116a5d2abdb71def512bf9ec6255f3a511d5e41/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5116a5d2abdb71def512bf9ec6255f3a511d5e41/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=5116a5d2abdb71def512bf9ec6255f3a511d5e41", "patch": "@@ -3086,14 +3086,14 @@ modes.\n \n @cindex @code{reduc_splus_@var{m}} instruction pattern\n @item @samp{reduc_splus_@var{m}}\n-Compute the sum of the signed elements of a vector. The vector is opernad 1, \n-and the scalar result is stored in the least significant bits of opernad 0 \n+Compute the sum of the signed elements of a vector. The vector is operand 1, \n+and the scalar result is stored in the least significant bits of operand 0 \n (also a vector). The output and input vector should have the same modes.\n \n @cindex @code{reduc_uplus_@var{m}} instruction pattern\n @item @samp{reduc_uplus_@var{m}}\n-Compute the sum of the unsigned elements of a vector. The vector is opernad 1, \n-and the scalar result is stored in the least significant bits of opernad 0 \n+Compute the sum of the unsigned elements of a vector. The vector is operand 1, \n+and the scalar result is stored in the least significant bits of operand 0 \n (also a vector). The output and input vector should have the same modes.\n \n @cindex @code{vec_shl_@var{m}} instruction pattern"}, {"sha": "bc37bd2dce4abe02d4dfd5957f53e339ef855f63", "filename": "gcc/tree-vect-transform.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5116a5d2abdb71def512bf9ec6255f3a511d5e41/gcc%2Ftree-vect-transform.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5116a5d2abdb71def512bf9ec6255f3a511d5e41/gcc%2Ftree-vect-transform.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-transform.c?ref=5116a5d2abdb71def512bf9ec6255f3a511d5e41", "patch": "@@ -1781,7 +1781,7 @@ vectorizable_load (tree stmt, block_stmt_iterator *bsi, tree *vec_stmt)\n \t     the value of the parameter and no global variables are touched\n \t     which makes the builtin a \"const\" function.  Requiring the\n \t     builtin to have the \"const\" attribute makes it unnecessary\n-\t     to call mark_call_clobbered_vars_to_rename.  */\n+\t     to call mark_call_clobbered.  */\n \t  gcc_assert (TREE_READONLY (builtin_decl));\n \t}\n       else"}]}