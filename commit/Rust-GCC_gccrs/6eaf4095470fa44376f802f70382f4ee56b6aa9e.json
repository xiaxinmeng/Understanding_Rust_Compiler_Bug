{"sha": "6eaf4095470fa44376f802f70382f4ee56b6aa9e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmVhZjQwOTU0NzBmYTQ0Mzc2ZjgwMmY3MDM4MmY0ZWU1NmI2YWE5ZQ==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2005-06-16T08:46:01Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-06-16T08:46:01Z"}, "message": "sem_eval.adb (Subtypes_Statically_Match): Use discriminant constraint of full view if present...\n\n2005-06-14  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_eval.adb (Subtypes_Statically_Match): Use discriminant\n\tconstraint of full view if present, when other type is discriminated.\n\t(Eval_Relational_Op): Recognize tests of pointer values against Null,\n\twhen the pointer is known to be non-null, and emit appropriate warning.\n\nFrom-SVN: r101059", "tree": {"sha": "b5a58ece38f3e1a9748c25bdb49ddd646cd44c7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b5a58ece38f3e1a9748c25bdb49ddd646cd44c7a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6eaf4095470fa44376f802f70382f4ee56b6aa9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6eaf4095470fa44376f802f70382f4ee56b6aa9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6eaf4095470fa44376f802f70382f4ee56b6aa9e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6eaf4095470fa44376f802f70382f4ee56b6aa9e/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4875fbba522250df604c97432853faa273468088", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4875fbba522250df604c97432853faa273468088", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4875fbba522250df604c97432853faa273468088"}], "stats": {"total": 33, "additions": 32, "deletions": 1}, "files": [{"sha": "954fe02379032f9d7372005f66e7338ca38ace45", "filename": "gcc/ada/sem_eval.adb", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eaf4095470fa44376f802f70382f4ee56b6aa9e/gcc%2Fada%2Fsem_eval.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eaf4095470fa44376f802f70382f4ee56b6aa9e/gcc%2Fada%2Fsem_eval.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.adb?ref=6eaf4095470fa44376f802f70382f4ee56b6aa9e", "patch": "@@ -2199,6 +2199,26 @@ package body Sem_Eval is\n                return;\n             end if;\n          end;\n+\n+      --  Another special case: comparisons against null for pointers that\n+      --  are known to be non-null. This is useful when migrating from Ada95\n+      --  code when non-null restrictions are added to type declarations and\n+      --  parameter specifications.\n+\n+      elsif Is_Access_Type (Typ)\n+        and then Comes_From_Source (N)\n+        and then\n+          ((Is_Entity_Name (Left)\n+             and then Is_Known_Non_Null (Entity (Left))\n+             and then Nkind (Right) = N_Null)\n+          or else\n+            (Is_Entity_Name (Right)\n+              and then Is_Known_Non_Null (Entity (Right))\n+              and then Nkind (Left) = N_Null))\n+      then\n+         Fold_Uint (N, Test (Nkind (N) = N_Op_Ne), False);\n+         Warn_On_Known_Condition (N);\n+         return;\n       end if;\n \n       --  Can only fold if type is scalar (don't fold string ops)\n@@ -3906,8 +3926,19 @@ package body Sem_Eval is\n       --  Type with discriminants\n \n       elsif Has_Discriminants (T1) or else Has_Discriminants (T2) then\n+\n+         --  We really need comments here ???\n+\n          if Has_Discriminants (T1) /= Has_Discriminants (T2) then\n-            return False;\n+            if In_Instance\n+              and then Is_Private_Type (T2)\n+              and then Present (Full_View (T2))\n+              and then Has_Discriminants (Full_View (T2))\n+            then\n+               return Subtypes_Statically_Match (T1, Full_View (T2));\n+            else\n+               return False;\n+            end if;\n          end if;\n \n          declare"}]}