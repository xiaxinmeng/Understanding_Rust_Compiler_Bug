{"sha": "bf3478059df1a948c6b728754150d25b1d5610b1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmYzNDc4MDU5ZGYxYTk0OGM2YjcyODc1NDE1MGQyNWIxZDU2MTBiMQ==", "commit": {"author": {"name": "Warren Levy", "email": "warrenl@cygnus.com", "date": "2000-10-05T23:57:16Z"}, "committer": {"name": "Warren Levy", "email": "warrenl@gcc.gnu.org", "date": "2000-10-05T23:57:16Z"}, "message": "Makefile.am: Removed java/io/Replaceable.java and java/io/Resolvable.java.\n\n\t* Makefile.am: Removed java/io/Replaceable.java and\n\tjava/io/Resolvable.java.\n\t* Makefile.in: Rebuilt.\n\t* gcj/javaprims.h: Removed Replaceable and Resolvable from java.io\n\tnamespace.\n\t* java/io/ObjectInputStream.java (processResolution): Fixed typo\n\tin method name.\n\t(processResolution): Handle readResolve method via reflection with\n\tremoval of Resolvable interface.\n\t* java/io/ObjectOutputStream.java (writeObject): Handle writeReplace\n\tmethod via reflection with removal of Replaceable interface.\n\t* java/io/Replaceable.java: Removed.\n\t* java/io/Resolvable.java: Removed.\n\t* java/security/Key.java (serialVersionUID): New field.\n\t* java/security/Provider.java (serialVersionUID): New field.\n\t* java/security/interfaces/DSAPrivateKey.java (serialVersionUID):\n\tNew field.\n\t* java/security/interfaces/DSAPublicKey.java (serialVersionUID):\n        New field.\n\t* java/sql/DataTruncation.java (serialVersionUID): New field.\n\t* java/sql/SQLException.java (serialVersionUID): New field.\n\t* java/sql/SQLWarning.java (serialVersionUID): New field.\n\t* java/util/Date.java (serialVersionUID): New field.\n\t(millis): Made transient.\n\t(readObject): New method.\n\t(writeObject): New method.\n\nSerialization mods.\nNote:  The interfaces java.io.Replaceable and java.io.Resolvable were only\ntemporary additions to JDK 1.2 beta versions and were not included\nin the JDK 1.2 final.  The Serialization spec instructs how to deal\nwith their methods (via reflection).\n\nFrom-SVN: r36736", "tree": {"sha": "ab6da2cb575ebc39dc451d7b89674a8d23e7af54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab6da2cb575ebc39dc451d7b89674a8d23e7af54"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf3478059df1a948c6b728754150d25b1d5610b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf3478059df1a948c6b728754150d25b1d5610b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf3478059df1a948c6b728754150d25b1d5610b1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf3478059df1a948c6b728754150d25b1d5610b1/comments", "author": null, "committer": null, "parents": [{"sha": "cc0cbae17ebe0b5c9a9152cd867d2ae5a5e943db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc0cbae17ebe0b5c9a9152cd867d2ae5a5e943db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc0cbae17ebe0b5c9a9152cd867d2ae5a5e943db"}], "stats": {"total": 398, "additions": 194, "deletions": 204}, "files": [{"sha": "f85f2959bbaff127d446c50d58f04fa95d08957a", "filename": "libjava/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf3478059df1a948c6b728754150d25b1d5610b1/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf3478059df1a948c6b728754150d25b1d5610b1/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=bf3478059df1a948c6b728754150d25b1d5610b1", "patch": "@@ -1,3 +1,32 @@\n+2000-10-05  Warren Levy  <warrenl@cygnus.com>\n+\n+\t* Makefile.am: Removed java/io/Replaceable.java and\n+\tjava/io/Resolvable.java.\n+\t* Makefile.in: Rebuilt.\n+\t* gcj/javaprims.h: Removed Replaceable and Resolvable from java.io\n+\tnamespace.\n+\t* java/io/ObjectInputStream.java (processResolution): Fixed typo\n+\tin method name.\n+\t(processResolution): Handle readResolve method via reflection with\n+\tremoval of Resolvable interface.\n+\t* java/io/ObjectOutputStream.java (writeObject): Handle writeReplace\n+\tmethod via reflection with removal of Replaceable interface.\n+\t* java/io/Replaceable.java: Removed.\n+\t* java/io/Resolvable.java: Removed.\n+\t* java/security/Key.java (serialVersionUID): New field.\n+\t* java/security/Provider.java (serialVersionUID): New field.\n+\t* java/security/interfaces/DSAPrivateKey.java (serialVersionUID):\n+\tNew field.\n+\t* java/security/interfaces/DSAPublicKey.java (serialVersionUID):\n+        New field.\n+\t* java/sql/DataTruncation.java (serialVersionUID): New field.\n+\t* java/sql/SQLException.java (serialVersionUID): New field.\n+\t* java/sql/SQLWarning.java (serialVersionUID): New field.\n+\t* java/util/Date.java (serialVersionUID): New field.\n+\t(millis): Made transient.\n+\t(readObject): New method.\n+\t(writeObject): New method.\n+\n 2000-10-05  Tom Tromey  <tromey@cygnus.com>\n \n \t* gnu/gcj/convert/natIconv.cc (init): Terminate buffer."}, {"sha": "36ea2d07f0c7e59447c91f23aaf5140e239df0be", "filename": "libjava/Makefile.am", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf3478059df1a948c6b728754150d25b1d5610b1/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf3478059df1a948c6b728754150d25b1d5610b1/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=bf3478059df1a948c6b728754150d25b1d5610b1", "patch": "@@ -813,8 +813,6 @@ java/io/PushbackInputStream.java \\\n java/io/PushbackReader.java \\\n java/io/RandomAccessFile.java \\\n java/io/Reader.java \\\n-java/io/Replaceable.java \\\n-java/io/Resolvable.java\t\\\n java/io/SequenceInputStream.java \\\n java/io/Serializable.java \\\n java/io/SerializablePermission.java \\"}, {"sha": "85a5b9cb8edd99b73609ca31c914a152389a04c8", "filename": "libjava/Makefile.in", "status": "modified", "additions": 70, "deletions": 68, "changes": 138, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf3478059df1a948c6b728754150d25b1d5610b1/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf3478059df1a948c6b728754150d25b1d5610b1/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=bf3478059df1a948c6b728754150d25b1d5610b1", "patch": "@@ -68,6 +68,7 @@ AR = @AR@\n AS = @AS@\n CC = @CC@\n COMPPATH = @COMPPATH@\n+CPP = @CPP@\n CXX = @CXX@\n CXXCPP = @CXXCPP@\n DIRLTDL = @DIRLTDL@\n@@ -78,8 +79,6 @@ EXEEXT = @EXEEXT@\n FORCELIBGCCSPEC = @FORCELIBGCCSPEC@\n GCDEPS = @GCDEPS@\n GCINCS = @GCINCS@\n-GCJ = @GCJ@\n-GCJFLAGS = @GCJFLAGS@\n GCLIBS = @GCLIBS@\n GCOBJS = @GCOBJS@\n GCSPEC = @GCSPEC@\n@@ -96,11 +95,9 @@ LN_S = @LN_S@\n MAINT = @MAINT@\n MAKEINFO = @MAKEINFO@\n OBJDUMP = @OBJDUMP@\n-OBJEXT = @OBJEXT@\n PACKAGE = @PACKAGE@\n PERL = @PERL@\n RANLIB = @RANLIB@\n-STRIP = @STRIP@\n SYSDEP_SOURCES = @SYSDEP_SOURCES@\n SYSTEMSPEC = @SYSTEMSPEC@\n THREADDEPS = @THREADDEPS@\n@@ -118,40 +115,27 @@ here = @here@\n libgcj_basedir = @libgcj_basedir@\n \n AUTOMAKE_OPTIONS = foreign no-installinfo\n-@TESTSUBDIR_TRUE@SUBDIRS = \\\n-@TESTSUBDIR_TRUE@$(DIRLTDL) testsuite gcj include\n-@TESTSUBDIR_FALSE@SUBDIRS = \\\n-@TESTSUBDIR_FALSE@$(DIRLTDL) gcj include\n-@USE_LIBDIR_TRUE@toolexeclibdir = \\\n-@USE_LIBDIR_TRUE@$(libdir)$(MULTISUBDIR)\n-@USE_LIBDIR_FALSE@toolexeclibdir = \\\n-@USE_LIBDIR_FALSE@$(toolexecdir)/lib$(MULTISUBDIR)\n-@USE_LIBDIR_FALSE@toolexecdir = \\\n-@USE_LIBDIR_FALSE@$(exec_prefix)/$(target_alias)\n+@TESTSUBDIR_TRUE@SUBDIRS = @TESTSUBDIR_TRUE@$(DIRLTDL) testsuite gcj include\n+@TESTSUBDIR_FALSE@SUBDIRS = @TESTSUBDIR_FALSE@$(DIRLTDL) gcj include\n+@USE_LIBDIR_TRUE@toolexeclibdir = @USE_LIBDIR_TRUE@$(libdir)$(MULTISUBDIR)\n+@USE_LIBDIR_FALSE@toolexeclibdir = @USE_LIBDIR_FALSE@$(toolexecdir)/lib$(MULTISUBDIR)\n+@USE_LIBDIR_FALSE@toolexecdir = @USE_LIBDIR_FALSE@$(exec_prefix)/$(target_alias)\n \n toolexeclib_LTLIBRARIES = libgcj.la\n toolexeclib_DATA = libgcj.spec\n data_DATA = libgcj.zip\n \n-@NEEDS_DATA_START_TRUE@toolexeclib_LIBRARIES = \\\n-@NEEDS_DATA_START_TRUE@libgcjdata.a\n-@NEEDS_DATA_START_TRUE@libgcjdata_a_SOURCES = \\\n-@NEEDS_DATA_START_TRUE@libgcjdata.c\n+@NEEDS_DATA_START_TRUE@toolexeclib_LIBRARIES = @NEEDS_DATA_START_TRUE@libgcjdata.a\n+@NEEDS_DATA_START_TRUE@libgcjdata_a_SOURCES = @NEEDS_DATA_START_TRUE@libgcjdata.c\n \n-@NATIVE_TRUE@bin_PROGRAMS = \\\n-@NATIVE_TRUE@jv-convert gij\n+@NATIVE_TRUE@bin_PROGRAMS = @NATIVE_TRUE@jv-convert gij\n \n bin_SCRIPTS = addr2name.awk\n-@CANADIAN_TRUE@@NULL_TARGET_TRUE@ZIP = \\\n-@CANADIAN_TRUE@@NULL_TARGET_TRUE@$(MULTIBUILDTOP)../$(COMPPATH)/zip/zip$(EXEEXT)\n-@CANADIAN_TRUE@@NULL_TARGET_FALSE@ZIP = \\\n-@CANADIAN_TRUE@@NULL_TARGET_FALSE@zip\n-@CANADIAN_FALSE@ZIP = \\\n-@CANADIAN_FALSE@$(MULTIBUILDTOP)../$(COMPPATH)/zip/zip$(EXEEXT)\n-@CANADIAN_TRUE@GCJH = \\\n-@CANADIAN_TRUE@gcjh\n-@CANADIAN_FALSE@GCJH = \\\n-@CANADIAN_FALSE@$(MULTIBUILDTOP)../$(COMPPATH)/gcc/gcjh$(EXEEXT)\n+@CANADIAN_TRUE@@NULL_TARGET_TRUE@ZIP = @CANADIAN_TRUE@@NULL_TARGET_TRUE@$(MULTIBUILDTOP)../$(COMPPATH)/zip/zip$(EXEEXT)\n+@CANADIAN_TRUE@@NULL_TARGET_FALSE@ZIP = @CANADIAN_TRUE@@NULL_TARGET_FALSE@zip\n+@CANADIAN_FALSE@ZIP = @CANADIAN_FALSE@$(MULTIBUILDTOP)../$(COMPPATH)/zip/zip$(EXEEXT)\n+@CANADIAN_TRUE@GCJH = @CANADIAN_TRUE@gcjh\n+@CANADIAN_FALSE@GCJH = @CANADIAN_FALSE@$(MULTIBUILDTOP)../$(COMPPATH)/gcc/gcjh$(EXEEXT)\n \n GCJCOMPILE = $(LIBTOOL) --mode=compile $(GCJ) -fassume-compiled -fclasspath=$(here) -L$(here) $(JC1FLAGS) -c\n GCJLINK = $(LIBTOOL) --mode=link $(GCJ) -L$(here) $(JC1FLAGS) $(LDFLAGS) -o $@\n@@ -166,10 +150,8 @@ AM_CXXFLAGS = -fno-rtti -fvtable-thunks -fasynchronous-exceptions \\\n \t-fdollars-in-identifiers \\\n \t@LIBGCJ_CXXFLAGS@ @EXCEPTIONSPEC@ $(WARNINGS) -D_GNU_SOURCE\n \n-@USING_GCC_TRUE@AM_CFLAGS = \\\n-@USING_GCC_TRUE@@LIBGCJ_CFLAGS@ $(WARNINGS)\n-@USING_GCC_FALSE@AM_CFLAGS = \\\n-@USING_GCC_FALSE@@LIBGCJ_CFLAGS@\n+@USING_GCC_TRUE@AM_CFLAGS = @USING_GCC_TRUE@@LIBGCJ_CFLAGS@ $(WARNINGS)\n+@USING_GCC_FALSE@AM_CFLAGS = @USING_GCC_FALSE@@LIBGCJ_CFLAGS@\n \n JCFLAGS = -g\n JC1FLAGS = -g @LIBGCJ_JAVAFLAGS@\n@@ -221,8 +203,7 @@ extra_headers = java/lang/Object.h java/lang/Class.h\n \n NM = nm\n \n-@NATIVE_TRUE@@MAINTAINER_MODE_TRUE@noinst_PROGRAMS = \\\n-@NATIVE_TRUE@@MAINTAINER_MODE_TRUE@gen-from-JIS\n+@NATIVE_TRUE@@MAINTAINER_MODE_TRUE@noinst_PROGRAMS = @NATIVE_TRUE@@MAINTAINER_MODE_TRUE@gen-from-JIS\n \n CONVERT_DIR = gnu/gcj/convert\n \n@@ -596,8 +577,6 @@ java/io/PushbackInputStream.java \\\n java/io/PushbackReader.java \\\n java/io/RandomAccessFile.java \\\n java/io/Reader.java \\\n-java/io/Replaceable.java \\\n-java/io/Resolvable.java\t\\\n java/io/SequenceInputStream.java \\\n java/io/Serializable.java \\\n java/io/SerializablePermission.java \\\n@@ -1015,7 +994,7 @@ CPPFLAGS = @CPPFLAGS@\n LDFLAGS = @LDFLAGS@\n LIBS = @LIBS@\n libgcjdata_a_LIBADD = \n-@NEEDS_DATA_START_TRUE@libgcjdata_a_OBJECTS =  libgcjdata.$(OBJEXT)\n+@NEEDS_DATA_START_TRUE@libgcjdata_a_OBJECTS =  libgcjdata.o\n LTLIBRARIES =  $(toolexeclib_LTLIBRARIES)\n \n libgcj_la_OBJECTS =  prims.lo posix.lo jni.lo exception.lo resolve.lo \\\n@@ -1026,7 +1005,7 @@ defineclass.lo interpret.lo name-finder.lo\n PROGRAMS =  $(bin_PROGRAMS) $(noinst_PROGRAMS)\n \n jv_convert_OBJECTS = \n-gij_OBJECTS =  gij.$(OBJEXT)\n+gij_OBJECTS =  gij.o\n gen_from_JIS_OBJECTS = \n gen_from_JIS_LDFLAGS = \n SCRIPTS =  $(bin_SCRIPTS)\n@@ -1044,13 +1023,14 @@ LINK = $(LIBTOOL) --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(LDFLAGS) -o $@\n DATA =  $(data_DATA) $(toolexeclib_DATA)\n \n DIST_COMMON =  README COPYING ChangeLog Makefile.am Makefile.in NEWS \\\n-THANKS acinclude.m4 aclocal.m4 configure configure.in \\\n-libgcj-test.spec.in libgcj.spec.in\n+THANKS acconfig.h acinclude.m4 aclocal.m4 configure configure.in \\\n+include/config.h.in include/stamp-h.in libgcj-test.spec.in \\\n+libgcj.spec.in\n \n \n DISTFILES = $(DIST_COMMON) $(SOURCES) $(HEADERS) $(TEXINFOS) $(EXTRA_DIST)\n \n-TAR = tar\n+TAR = gtar\n GZIP_ENV = --best\n DIST_SUBDIRS =  @DIRLTDL@ testsuite gcj include @DIRLTDL@ gcj include\n DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n@@ -1282,8 +1262,7 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/java/io/PipedWriter.P .deps/java/io/PrintStream.P \\\n .deps/java/io/PrintWriter.P .deps/java/io/PushbackInputStream.P \\\n .deps/java/io/PushbackReader.P .deps/java/io/RandomAccessFile.P \\\n-.deps/java/io/Reader.P .deps/java/io/Replaceable.P \\\n-.deps/java/io/Resolvable.P .deps/java/io/SequenceInputStream.P \\\n+.deps/java/io/Reader.P .deps/java/io/SequenceInputStream.P \\\n .deps/java/io/Serializable.P .deps/java/io/SerializablePermission.P \\\n .deps/java/io/StreamCorruptedException.P \\\n .deps/java/io/StreamTokenizer.P .deps/java/io/StringBufferInputStream.P \\\n@@ -1504,7 +1483,7 @@ OBJECTS = $(libgcjdata_a_OBJECTS) $(libgcj_la_OBJECTS) $(jv_convert_OBJECTS) $(g\n \n all: all-redirect\n .SUFFIXES:\n-.SUFFIXES: .S .c .cc .class .h .java .lo .o .obj .s\n+.SUFFIXES: .S .c .cc .class .h .java .lo .o .s\n $(srcdir)/Makefile.in: @MAINTAINER_MODE_TRUE@ Makefile.am $(top_srcdir)/configure.in $(ACLOCAL_M4) \n \tcd $(top_srcdir) && $(AUTOMAKE) --foreign Makefile\n \n@@ -1519,6 +1498,34 @@ config.status: $(srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)\n \t$(SHELL) ./config.status --recheck\n $(srcdir)/configure: @MAINTAINER_MODE_TRUE@$(srcdir)/configure.in $(ACLOCAL_M4) $(CONFIGURE_DEPENDENCIES)\n \tcd $(srcdir) && $(AUTOCONF)\n+\n+include/config.h: include/stamp-h\n+\t@if test ! -f $@; then \\\n+\t\trm -f include/stamp-h; \\\n+\t\t$(MAKE) include/stamp-h; \\\n+\telse :; fi\n+include/stamp-h: $(srcdir)/include/config.h.in $(top_builddir)/config.status\n+\tcd $(top_builddir) \\\n+\t  && CONFIG_FILES= CONFIG_HEADERS=include/config.h \\\n+\t     $(SHELL) ./config.status\n+\t@echo timestamp > include/stamp-h 2> /dev/null\n+$(srcdir)/include/config.h.in: @MAINTAINER_MODE_TRUE@$(srcdir)/include/stamp-h.in\n+\t@if test ! -f $@; then \\\n+\t\trm -f $(srcdir)/include/stamp-h.in; \\\n+\t\t$(MAKE) $(srcdir)/include/stamp-h.in; \\\n+\telse :; fi\n+$(srcdir)/include/stamp-h.in: $(top_srcdir)/configure.in $(ACLOCAL_M4) acconfig.h\n+\tcd $(top_srcdir) && $(AUTOHEADER)\n+\t@echo timestamp > $(srcdir)/include/stamp-h.in 2> /dev/null\n+\n+mostlyclean-hdr:\n+\n+clean-hdr:\n+\n+distclean-hdr:\n+\t-rm -f include/config.h\n+\n+maintainer-clean-hdr:\n libgcj.spec: $(top_builddir)/config.status libgcj.spec.in\n \tcd $(top_builddir) && CONFIG_FILES=$@ CONFIG_HEADERS= $(SHELL) ./config.status\n libgcj-test.spec: $(top_builddir)/config.status libgcj-test.spec.in\n@@ -1556,11 +1563,6 @@ uninstall-toolexeclibLIBRARIES:\n \t  rm -f $(DESTDIR)$(toolexeclibdir)/$$p; \\\n \tdone\n \n-# FIXME: We should only use cygpath when building on Windows,\n-# and only if it is available.\n-.c.obj:\n-\t$(COMPILE) -c `cygpath -w $<`\n-\n .s.o:\n \t$(COMPILE) -c $<\n \n@@ -1569,7 +1571,6 @@ uninstall-toolexeclibLIBRARIES:\n \n mostlyclean-compile:\n \t-rm -f *.o core *.core\n-\t-rm -f *.$(OBJEXT)\n \n clean-compile:\n \n@@ -1693,8 +1694,6 @@ uninstall-binSCRIPTS:\n \tdone\n .cc.o:\n \t$(CXXCOMPILE) -c $<\n-.cc.obj:\n-\t$(CXXCOMPILE) -c `cygpath -w $<`\n .cc.lo:\n \t$(LTCXXCOMPILE) -c $<\n \n@@ -1871,7 +1870,7 @@ distdir: $(DISTFILES)\n \t@for file in $(DISTFILES); do \\\n \t  d=$(srcdir); \\\n \t  if test -d $$d/$$file; then \\\n-\t    cp -pr $$/$$file $(distdir)/$$file; \\\n+\t    cp -pr $$d/$$file $(distdir)/$$file; \\\n \t  else \\\n \t    test -f $(distdir)/$$file \\\n \t    || ln $$d/$$file $(distdir)/$$file 2> /dev/null \\\n@@ -1989,31 +1988,33 @@ distclean-generic:\n \t-rm -f config.cache config.log stamp-h stamp-h[0-9]*\n \n maintainer-clean-generic:\n-mostlyclean-am:  mostlyclean-toolexeclibLIBRARIES mostlyclean-compile \\\n-\t\tmostlyclean-libtool mostlyclean-toolexeclibLTLIBRARIES \\\n+mostlyclean-am:  mostlyclean-hdr mostlyclean-toolexeclibLIBRARIES \\\n+\t\tmostlyclean-compile mostlyclean-libtool \\\n+\t\tmostlyclean-toolexeclibLTLIBRARIES \\\n \t\tmostlyclean-binPROGRAMS mostlyclean-noinstPROGRAMS \\\n \t\tmostlyclean-tags mostlyclean-depend mostlyclean-generic\n \n mostlyclean: mostlyclean-recursive\n \n-clean-am:  clean-toolexeclibLIBRARIES clean-compile clean-libtool \\\n-\t\tclean-toolexeclibLTLIBRARIES clean-binPROGRAMS \\\n-\t\tclean-noinstPROGRAMS clean-tags clean-depend \\\n-\t\tclean-generic mostlyclean-am clean-local\n+clean-am:  clean-hdr clean-toolexeclibLIBRARIES clean-compile \\\n+\t\tclean-libtool clean-toolexeclibLTLIBRARIES \\\n+\t\tclean-binPROGRAMS clean-noinstPROGRAMS clean-tags \\\n+\t\tclean-depend clean-generic mostlyclean-am clean-local\n \n clean: clean-recursive\n \n-distclean-am:  distclean-toolexeclibLIBRARIES distclean-compile \\\n-\t\tdistclean-libtool distclean-toolexeclibLTLIBRARIES \\\n-\t\tdistclean-binPROGRAMS distclean-noinstPROGRAMS \\\n-\t\tdistclean-tags distclean-depend distclean-generic \\\n-\t\tclean-am\n+distclean-am:  distclean-hdr distclean-toolexeclibLIBRARIES \\\n+\t\tdistclean-compile distclean-libtool \\\n+\t\tdistclean-toolexeclibLTLIBRARIES distclean-binPROGRAMS \\\n+\t\tdistclean-noinstPROGRAMS distclean-tags \\\n+\t\tdistclean-depend distclean-generic clean-am\n \t-rm -f libtool\n \n distclean: distclean-recursive\n \t-rm -f config.status\n \n-maintainer-clean-am:  maintainer-clean-toolexeclibLIBRARIES \\\n+maintainer-clean-am:  maintainer-clean-hdr \\\n+\t\tmaintainer-clean-toolexeclibLIBRARIES \\\n \t\tmaintainer-clean-compile maintainer-clean-libtool \\\n \t\tmaintainer-clean-toolexeclibLTLIBRARIES \\\n \t\tmaintainer-clean-binPROGRAMS \\\n@@ -2026,7 +2027,8 @@ maintainer-clean-am:  maintainer-clean-toolexeclibLIBRARIES \\\n maintainer-clean: maintainer-clean-recursive\n \t-rm -f config.status\n \n-.PHONY: mostlyclean-toolexeclibLIBRARIES distclean-toolexeclibLIBRARIES \\\n+.PHONY: mostlyclean-hdr distclean-hdr clean-hdr maintainer-clean-hdr \\\n+mostlyclean-toolexeclibLIBRARIES distclean-toolexeclibLIBRARIES \\\n clean-toolexeclibLIBRARIES maintainer-clean-toolexeclibLIBRARIES \\\n uninstall-toolexeclibLIBRARIES install-toolexeclibLIBRARIES \\\n mostlyclean-compile distclean-compile clean-compile \\"}, {"sha": "2d8719520ec957b82295416b0d3db01fed99d6ce", "filename": "libjava/gcj/javaprims.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf3478059df1a948c6b728754150d25b1d5610b1/libjava%2Fgcj%2Fjavaprims.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf3478059df1a948c6b728754150d25b1d5610b1/libjava%2Fgcj%2Fjavaprims.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgcj%2Fjavaprims.h?ref=bf3478059df1a948c6b728754150d25b1d5610b1", "patch": "@@ -103,8 +103,6 @@ extern \"Java\"\n       class PushbackReader;\n       class RandomAccessFile;\n       class Reader;\n-      class Replaceable;\n-      class Resolvable;\n       class SequenceInputStream;\n       class Serializable;\n       class SerializablePermission;"}, {"sha": "c1d6d6c0bc4e17832aff325370441c1e4e9b6ebb", "filename": "libjava/java/io/ObjectInputStream.java", "status": "modified", "additions": 28, "deletions": 8, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf3478059df1a948c6b728754150d25b1d5610b1/libjava%2Fjava%2Fio%2FObjectInputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf3478059df1a948c6b728754150d25b1d5610b1/libjava%2Fjava%2Fio%2FObjectInputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FObjectInputStream.java?ref=bf3478059df1a948c6b728754150d25b1d5610b1", "patch": "@@ -1,5 +1,5 @@\n /* ObjectInputStream.java -- Class used to read serialized objects\n-   Copyright (C) 1998, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2000 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -37,6 +37,7 @@\n import gnu.java.lang.reflect.TypeSignature;\n import java.lang.reflect.Field;\n import java.lang.reflect.Method;\n+import java.lang.reflect.InvocationTargetException;\n \n \n \n@@ -189,7 +190,7 @@ public final Object readObject () throws ClassNotFoundException, IOException\n       {\n //\tDEBUG (\"STRING \");\n \tString s = this.realInputStream.readUTF ();\n-\tret_val = processResoultion (s, assignNewHandle (s));\n+\tret_val = processResolution (s, assignNewHandle (s));\n \tbreak;\n       }\n \n@@ -202,7 +203,7 @@ public final Object readObject () throws ClassNotFoundException, IOException\n \tObject array = Array.newInstance (componenetType, length);\n \tint handle = assignNewHandle (array);\n \treadArrayElements (array, componenetType);\n-\tret_val = processResoultion (array, handle);\n+\tret_val = processResolution (array, handle);\n \tbreak;\n       }\n \n@@ -250,7 +251,7 @@ public final Object readObject () throws ClassNotFoundException, IOException\n \t  if (read_from_blocks)\n \t    setBlockDataMode (false);\n \n-\t  ret_val = processResoultion (obj, handle);\n+\t  ret_val = processResolution (obj, handle);\n \t  break;\n \t} // end if (Externalizable.class.isAssignableFrom (clazz))\n \n@@ -315,7 +316,7 @@ public final Object readObject () throws ClassNotFoundException, IOException\n \n \tthis.currentObject = null;\n \tthis.currentObjectStreamClass = null;\n-\tret_val = processResoultion (obj, handle);\n+\tret_val = processResolution (obj, handle);\n \tbreak;\n       }\n \n@@ -937,11 +938,30 @@ private int assignNewHandle (Object obj)\n   }\n \n \n-  private Object processResoultion (Object obj, int handle)\n+  private Object processResolution (Object obj, int handle)\n     throws IOException\n   {\n-    if (obj instanceof Resolvable)\n-      obj = ((Resolvable)obj).readResolve ();\n+    if (obj instanceof Serializable)\n+      {\n+        Method m = null; \n+\ttry\n+\t{\n+\t  Class classArgs[] = {};\n+\t  m = obj.getClass ().getDeclaredMethod (\"readResolve\", classArgs);\n+\t  // m can't be null by definition since an exception would\n+\t  // have been thrown so a check for null is not needed.\n+\t  obj = m.invoke (obj, new Object[] {});\t\n+\t}\n+\tcatch (NoSuchMethodException ignore)\n+\t{\n+\t}\n+\tcatch (IllegalAccessException ignore)\n+\t{\n+\t}\n+\tcatch (InvocationTargetException ignore)\n+\t{\n+\t}\n+      }\n \n     if (this.resolveEnabled)\n       obj = resolveObject (obj);"}, {"sha": "cd6202ef87745e8c676df020442570c074c7022c", "filename": "libjava/java/io/ObjectOutputStream.java", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf3478059df1a948c6b728754150d25b1d5610b1/libjava%2Fjava%2Fio%2FObjectOutputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf3478059df1a948c6b728754150d25b1d5610b1/libjava%2Fjava%2Fio%2FObjectOutputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FObjectOutputStream.java?ref=bf3478059df1a948c6b728754150d25b1d5610b1", "patch": "@@ -30,6 +30,7 @@\n import java.lang.reflect.Array;\n import java.lang.reflect.Field;\n import java.lang.reflect.Method;\n+import java.lang.reflect.InvocationTargetException;\n import java.util.Hashtable;\n \n import gnu.java.io.ObjectIdentityWrapper;\n@@ -241,13 +242,33 @@ public final void writeObject (Object obj) throws IOException\n \n \tObject replacedObject = null;\n \n-\tif ((replacementEnabled || obj instanceof Replaceable)\n+\tif ((replacementEnabled || obj instanceof Serializable)\n \t    && ! replaceDone)\n \t{\n \t  replacedObject = obj;\n \n-\t  if (obj instanceof Replaceable)\n-\t    obj = ((Replaceable)obj).writeReplace ();\n+\t  if (obj instanceof Serializable)\n+\t    {\n+\t      Method m = null;\n+\t      try\n+\t      {\n+\t        Class classArgs[] = {};\n+\t\tm = obj.getClass ().getDeclaredMethod (\"writeReplace\",\n+\t\t\t\t\t\t       classArgs);\n+\t\t// m can't be null by definition since an exception would\n+\t\t// have been thrown so a check for null is not needed.\n+\t\tobj = m.invoke (obj, new Object[] {});\n+\t      }\n+\t      catch (NoSuchMethodException ignore)\n+\t      {\n+\t      }\n+\t      catch (IllegalAccessException ignore)\n+\t      {\n+\t      }\n+\t      catch (InvocationTargetException ignore)\n+\t      {\n+\t      }\n+\t    }\n \n \t  if (replacementEnabled)\n \t    obj = replaceObject (obj);"}, {"sha": "1035ab51c0c60fbf93a46815e335fac793b637e4", "filename": "libjava/java/io/Replaceable.java", "status": "removed", "additions": 0, "deletions": 54, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc0cbae17ebe0b5c9a9152cd867d2ae5a5e943db/libjava%2Fjava%2Fio%2FReplaceable.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc0cbae17ebe0b5c9a9152cd867d2ae5a5e943db/libjava%2Fjava%2Fio%2FReplaceable.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FReplaceable.java?ref=cc0cbae17ebe0b5c9a9152cd867d2ae5a5e943db", "patch": "@@ -1,54 +0,0 @@\n-/* Replaceable.java -- Replace an object with another object\n-   Copyright (C) 1998 Free Software Foundation, Inc.\n-\n-This file is part of GNU Classpath.\n-\n-GNU Classpath is free software; you can redistribute it and/or modify\n-it under the terms of the GNU General Public License as published by\n-the Free Software Foundation; either version 2, or (at your option)\n-any later version.\n- \n-GNU Classpath is distributed in the hope that it will be useful, but\n-WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-General Public License for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with GNU Classpath; see the file COPYING.  If not, write to the\n-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n-02111-1307 USA.\n-\n-As a special exception, if you link this library with other files to\n-produce an executable, this library does not by itself cause the\n-resulting executable to be covered by the GNU General Public License.\n-This exception does not however invalidate any other reasons why the\n-executable file might be covered by the GNU General Public License. */\n-\n-\n-package java.io;\n-\n-/**\n-  * This interface is used to indicate that an object may want to have\n-  * another object serialized instead of itself.  It contains one method\n-  * that is to be called when an object is to be serialized.  That method\n-  * is reponsible for returning the real object that should be serialized\n-  * instead of object being queried.\n-  *\n-  * @version 0.0\n-  *\n-  * @author Aaron M. Renn (arenn@urbanophile.com)\n-  */\n-public interface Replaceable extends Serializable\n-{\n-\n-/**\n-  * This method returns the object that should be serialized instead of\n-  * this object\n-  *\n-  * @return The real object that should be serialized\n-  */\n-public abstract Object\n-writeReplace();\n-\n-} // interface Replaceable\n-"}, {"sha": "b7250de60d1f398afd7bf487f44ded0e3f988f7d", "filename": "libjava/java/io/Resolvable.java", "status": "removed", "additions": 0, "deletions": 52, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc0cbae17ebe0b5c9a9152cd867d2ae5a5e943db/libjava%2Fjava%2Fio%2FResolvable.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc0cbae17ebe0b5c9a9152cd867d2ae5a5e943db/libjava%2Fjava%2Fio%2FResolvable.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FResolvable.java?ref=cc0cbae17ebe0b5c9a9152cd867d2ae5a5e943db", "patch": "@@ -1,52 +0,0 @@\n-/* Resolvable.java -- Returns an object to replace the one being de-serialized\n-   Copyright (C) 1998 Free Software Foundation, Inc.\n-\n-This file is part of GNU Classpath.\n-\n-GNU Classpath is free software; you can redistribute it and/or modify\n-it under the terms of the GNU General Public License as published by\n-the Free Software Foundation; either version 2, or (at your option)\n-any later version.\n- \n-GNU Classpath is distributed in the hope that it will be useful, but\n-WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-General Public License for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with GNU Classpath; see the file COPYING.  If not, write to the\n-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n-02111-1307 USA.\n-\n-As a special exception, if you link this library with other files to\n-produce an executable, this library does not by itself cause the\n-resulting executable to be covered by the GNU General Public License.\n-This exception does not however invalidate any other reasons why the\n-executable file might be covered by the GNU General Public License. */\n-\n-\n-package java.io;\n-\n-/**\n-  * This interface is implemented when an object wishes to return another\n-  * object to replace it during de-serialization.  It has one method that\n-  * returns the object that should be used to replace the original object.\n-  *\n-  * @version 0.0\n-  *\n-  * @author Aaron M. Renn (arenn@urbanophile.com)\n-  */\n-public interface Resolvable extends Serializable\n-{\n-\n-/**\n-  * This method returns the object that should be used to replace the \n-  * original object during de-serialization.\n-  *\n-  * @return The replacement object\n-  */\n-public abstract Object\n-readResolve();\n-\n-} // interface Resolvable\n-"}, {"sha": "ae73bf691b0b721088d920b0d1870529601e09bd", "filename": "libjava/java/security/Key.java", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf3478059df1a948c6b728754150d25b1d5610b1/libjava%2Fjava%2Fsecurity%2FKey.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf3478059df1a948c6b728754150d25b1d5610b1/libjava%2Fjava%2Fsecurity%2FKey.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FKey.java?ref=bf3478059df1a948c6b728754150d25b1d5610b1", "patch": "@@ -20,8 +20,7 @@\n  \n public interface Key extends Serializable\n {\n-  // FIXME: need to set this at some point when serialization is implemented.\n-  // public static final long serialVersionUID = 0L;\n+  public static final long serialVersionUID = 6603384152749567654L;\n \n   public String getAlgorithm();\n   public String getFormat();"}, {"sha": "fbaa3c013d0fdf51aac9d884a709deb5555e5859", "filename": "libjava/java/security/Provider.java", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf3478059df1a948c6b728754150d25b1d5610b1/libjava%2Fjava%2Fsecurity%2FProvider.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf3478059df1a948c6b728754150d25b1d5610b1/libjava%2Fjava%2Fsecurity%2FProvider.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FProvider.java?ref=bf3478059df1a948c6b728754150d25b1d5610b1", "patch": "@@ -1,5 +1,5 @@\n /* Provider.java -- Security provider information\n-   Copyright (C) 1998, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2000 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -68,6 +68,8 @@ public abstract class Provider extends Properties implements Serializable\n   */\n private double version;\n \n+private static final long serialVersionUID = -4298000515446427739L;\n+\n /*************************************************************************/\n \n /*"}, {"sha": "5d70136d385f89308d0de78ffc9ef5f3d89efeee", "filename": "libjava/java/security/interfaces/DSAPrivateKey.java", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf3478059df1a948c6b728754150d25b1d5610b1/libjava%2Fjava%2Fsecurity%2Finterfaces%2FDSAPrivateKey.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf3478059df1a948c6b728754150d25b1d5610b1/libjava%2Fjava%2Fsecurity%2Finterfaces%2FDSAPrivateKey.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2Finterfaces%2FDSAPrivateKey.java?ref=bf3478059df1a948c6b728754150d25b1d5610b1", "patch": "@@ -21,8 +21,7 @@\n  \n public interface DSAPrivateKey extends DSAKey, PrivateKey\n {\n-  // FIXME: need to set this at some point when serialization is implemented.\n-  // public static final long serialVersionUID = 0L;\n+  public static final long serialVersionUID = 7776497482533790279L;\n \n   public BigInteger getX();\n }"}, {"sha": "a8bb88544ee203909cf9c62c25a2ca5c2570a764", "filename": "libjava/java/security/interfaces/DSAPublicKey.java", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf3478059df1a948c6b728754150d25b1d5610b1/libjava%2Fjava%2Fsecurity%2Finterfaces%2FDSAPublicKey.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf3478059df1a948c6b728754150d25b1d5610b1/libjava%2Fjava%2Fsecurity%2Finterfaces%2FDSAPublicKey.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2Finterfaces%2FDSAPublicKey.java?ref=bf3478059df1a948c6b728754150d25b1d5610b1", "patch": "@@ -21,8 +21,7 @@\n  \n public interface DSAPublicKey extends DSAKey, PublicKey\n {\n-  // FIXME: need to set this at some point when serialization is implemented.\n-  // public static final long serialVersionUID = 0L;\n+  public static final long serialVersionUID = 1234526332779022332L;\n \n   public BigInteger getY();\n }"}, {"sha": "eabd46c1906f6d24e3f548866e5ade9c650281bf", "filename": "libjava/java/sql/DataTruncation.java", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf3478059df1a948c6b728754150d25b1d5610b1/libjava%2Fjava%2Fsql%2FDataTruncation.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf3478059df1a948c6b728754150d25b1d5610b1/libjava%2Fjava%2Fsql%2FDataTruncation.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsql%2FDataTruncation.java?ref=bf3478059df1a948c6b728754150d25b1d5610b1", "patch": "@@ -1,5 +1,5 @@\n /* DataTruncation.java -- Warning when data has been truncated.\n-   Copyright (C) 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -72,6 +72,8 @@ public class DataTruncation extends SQLWarning implements java.io.Serializable\n   */\n private int transferSize;\n \n+private static final long serialVersionUID = 6464298989504059473L;\n+\n /*************************************************************************/\n \n /*"}, {"sha": "650d3c6e574b485fdd6bf531c1fa88f0078d90a8", "filename": "libjava/java/sql/SQLException.java", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf3478059df1a948c6b728754150d25b1d5610b1/libjava%2Fjava%2Fsql%2FSQLException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf3478059df1a948c6b728754150d25b1d5610b1/libjava%2Fjava%2Fsql%2FSQLException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsql%2FSQLException.java?ref=bf3478059df1a948c6b728754150d25b1d5610b1", "patch": "@@ -1,5 +1,5 @@\n /* SQLException.java -- General SQL exception\n-   Copyright (C) 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -59,6 +59,8 @@ public class SQLException extends Exception implements java.io.Serializable\n   */\n private int vendorCode;\n \n+private static final long serialVersionUID = 2135244094396331484L;\n+\n /*************************************************************************/\n \n /*"}, {"sha": "0318262235f11c5a80488980d13d7f5e485eb5cd", "filename": "libjava/java/sql/SQLWarning.java", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf3478059df1a948c6b728754150d25b1d5610b1/libjava%2Fjava%2Fsql%2FSQLWarning.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf3478059df1a948c6b728754150d25b1d5610b1/libjava%2Fjava%2Fsql%2FSQLWarning.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsql%2FSQLWarning.java?ref=bf3478059df1a948c6b728754150d25b1d5610b1", "patch": "@@ -1,5 +1,5 @@\n /* SQLWarning.java -- Database access warnings.\n-   Copyright (C) 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -132,5 +132,7 @@ public class SQLWarning extends SQLException implements java.io.Serializable\n   super.setNextException(e);\n }\n \n+private static final long serialVersionUID = 3917336774604784856L;\n+\n } // class SQLWarning\n "}, {"sha": "4b76b8ab6eff09f5facc991a921e4b7eccdcb621", "filename": "libjava/java/util/Date.java", "status": "modified", "additions": 28, "deletions": 5, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf3478059df1a948c6b728754150d25b1d5610b1/libjava%2Fjava%2Futil%2FDate.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf3478059df1a948c6b728754150d25b1d5610b1/libjava%2Fjava%2Futil%2FDate.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FDate.java?ref=bf3478059df1a948c6b728754150d25b1d5610b1", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+/* Copyright (C) 1998, 1999, 2000  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -18,13 +18,13 @@\n  * \"The Java Language Specification\", ISBN 0-201-63451-1,\n  * and O'Reilly's \"Java in a Nutshell\".\n  * Status:  Need to re-write toString().\n- *   Missing:  ToGMTString and toLocaleString.\n- *   Serialization spec:  Specifies readObject/writeObject.\n+ *   Missing:  ToGMTString.\n  */\n-\n public class Date implements java.io.Serializable, Cloneable\n {\n-  private long millis;\n+  private static final long serialVersionUID = 7523967970034938905L;\n+\n+  transient private long millis;\n \n   public Date() { millis = System.currentTimeMillis(); }\n \n@@ -480,4 +480,27 @@ public static long UTC (int year, int month, int date,\n     cal.set(year+1900, month, date, hours, minutes, seconds);\n     return cal.getTimeInMillis();\n   }\n+\n+  /**\n+   * Reads an Object from the stream.\n+   */\n+  private void readObject (java.io.ObjectInputStream input)\n+    throws java.io.IOException, ClassNotFoundException\n+  {\n+    input.defaultReadObject ();\n+    millis = input.readLong ();\n+  }\n+\n+  /**\n+   * Writes an Object to the stream.\n+   * @serialdata A long value representing the offset from the epoch\n+   * in milliseconds.  This is the same value that is returned by the\n+   * method getTime().\n+   */\n+  private void writeObject (java.io.ObjectOutputStream output)\n+    throws java.io.IOException\n+  {\n+    output.defaultWriteObject ();\n+    output.writeLong (millis);\n+  }\n }"}]}