{"sha": "931a9c05c2c373fc1b7a52e9e2d27718e2395896", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTMxYTljMDVjMmMzNzNmYzFiN2E1MmU5ZTJkMjc3MThlMjM5NTg5Ng==", "commit": {"author": {"name": "Giovanni Bajo", "email": "giovannibajo@gcc.gnu.org", "date": "2003-12-16T15:54:28Z"}, "committer": {"name": "Giovanni Bajo", "email": "giovannibajo@gcc.gnu.org", "date": "2003-12-16T15:54:28Z"}, "message": "semantics.c (finish_id_expression): Refactor the code to handle template parameters...\n\n\t* semantics.c (finish_id_expression): Refactor the code to handle\n\ttemplate parameters, and emit a more informative error message\n\twhen they are used within non integral constant expressions.\n\nFrom-SVN: r74700", "tree": {"sha": "5afd8cce9ceab35df290769d4595b8a5cdf5d96d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5afd8cce9ceab35df290769d4595b8a5cdf5d96d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/931a9c05c2c373fc1b7a52e9e2d27718e2395896", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/931a9c05c2c373fc1b7a52e9e2d27718e2395896", "html_url": "https://github.com/Rust-GCC/gccrs/commit/931a9c05c2c373fc1b7a52e9e2d27718e2395896", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/931a9c05c2c373fc1b7a52e9e2d27718e2395896/comments", "author": {"login": "rasky", "id": 1014109, "node_id": "MDQ6VXNlcjEwMTQxMDk=", "avatar_url": "https://avatars.githubusercontent.com/u/1014109?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rasky", "html_url": "https://github.com/rasky", "followers_url": "https://api.github.com/users/rasky/followers", "following_url": "https://api.github.com/users/rasky/following{/other_user}", "gists_url": "https://api.github.com/users/rasky/gists{/gist_id}", "starred_url": "https://api.github.com/users/rasky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rasky/subscriptions", "organizations_url": "https://api.github.com/users/rasky/orgs", "repos_url": "https://api.github.com/users/rasky/repos", "events_url": "https://api.github.com/users/rasky/events{/privacy}", "received_events_url": "https://api.github.com/users/rasky/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rasky", "id": 1014109, "node_id": "MDQ6VXNlcjEwMTQxMDk=", "avatar_url": "https://avatars.githubusercontent.com/u/1014109?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rasky", "html_url": "https://github.com/rasky", "followers_url": "https://api.github.com/users/rasky/followers", "following_url": "https://api.github.com/users/rasky/following{/other_user}", "gists_url": "https://api.github.com/users/rasky/gists{/gist_id}", "starred_url": "https://api.github.com/users/rasky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rasky/subscriptions", "organizations_url": "https://api.github.com/users/rasky/orgs", "repos_url": "https://api.github.com/users/rasky/repos", "events_url": "https://api.github.com/users/rasky/events{/privacy}", "received_events_url": "https://api.github.com/users/rasky/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd852e4d70875d93d0f1fc57946e14f885468a31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd852e4d70875d93d0f1fc57946e14f885468a31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd852e4d70875d93d0f1fc57946e14f885468a31"}], "stats": {"total": 54, "additions": 37, "deletions": 17}, "files": [{"sha": "4a19573adf63c3fd36fc81222cdc2c2f01fb6272", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/931a9c05c2c373fc1b7a52e9e2d27718e2395896/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/931a9c05c2c373fc1b7a52e9e2d27718e2395896/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=931a9c05c2c373fc1b7a52e9e2d27718e2395896", "patch": "@@ -1,3 +1,9 @@\n+2003-12-16  Giovanni Bajo  <giovannibajo@gcc.gnu.org>\n+\n+\t* semantics.c (finish_id_expression): Refactor the code to handle\n+\ttemplate parameters, and emit a more informative error message\n+\twhen they are used within non integral constant expressions.\n+\r\n 2003-12-16  Nathan Sidwell  <nathan@codesourcery.com>\n \n \tPR c++/13387"}, {"sha": "a33a540c676e83a7a7d17f380cff686d3d94ef83", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 31, "deletions": 17, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/931a9c05c2c373fc1b7a52e9e2d27718e2395896/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/931a9c05c2c373fc1b7a52e9e2d27718e2395896/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=931a9c05c2c373fc1b7a52e9e2d27718e2395896", "patch": "@@ -2392,12 +2392,30 @@ finish_id_expression (tree id_expression,\n     }\n \n   /* If the name resolved to a template parameter, there is no\n-     need to look it up again later.  Similarly, we resolve\n-     enumeration constants to their underlying values.  */\n-  if (TREE_CODE (decl) == CONST_DECL)\n+     need to look it up again later.  */\n+  if ((TREE_CODE (decl) == CONST_DECL && DECL_TEMPLATE_PARM_P (decl))\n+      || TREE_CODE (decl) == TEMPLATE_PARM_INDEX)\n     {\n       *idk = CP_ID_KIND_NONE;\n-      if (DECL_TEMPLATE_PARM_P (decl) || !processing_template_decl)\n+      if (TREE_CODE (decl) == TEMPLATE_PARM_INDEX)\n+\tdecl = TEMPLATE_PARM_DECL (decl);\n+      if (constant_expression_p \n+\t  && !INTEGRAL_OR_ENUMERATION_TYPE_P (TREE_TYPE (decl))) \n+\t{\n+\t  if (!allow_non_constant_expression_p)\n+\t    error (\"template parameter `%D' of type `%T' is not allowed in \"\n+\t\t   \"an integral constant expression because it is not of \"\n+\t\t   \"integral or enumeration type\", decl, TREE_TYPE (decl));\n+\t  *non_constant_expression_p = true;\n+\t}\n+      return DECL_INITIAL (decl);\n+    }\n+  /* Similarly, we resolve enumeration constants to their \n+     underlying values.  */\n+  else if (TREE_CODE (decl) == CONST_DECL)\n+    {\n+      *idk = CP_ID_KIND_NONE;\n+      if (!processing_template_decl)\n \treturn DECL_INITIAL (decl);\n       return decl;\n     }\n@@ -2516,21 +2534,17 @@ finish_id_expression (tree id_expression,\n \t}\n \n       /* Only certain kinds of names are allowed in constant\n-\t expression.  Enumerators have already been handled above.  */\n+       expression.  Enumerators and template parameters \n+       have already been handled above.  */\n       if (constant_expression_p)\n \t{\n-\t  /* Non-type template parameters of integral or enumeration\n-\t     type are OK.  */\n-\t  if (TREE_CODE (decl) == TEMPLATE_PARM_INDEX\n-\t      && INTEGRAL_OR_ENUMERATION_TYPE_P (TREE_TYPE (decl)))\n-\t  ;\n-\t  /* Const variables or static data members of integral or\n-\t     enumeration types initialized with constant expressions\n-\t     are OK.  */\n-\t  else if (TREE_CODE (decl) == VAR_DECL\n-\t\t   && CP_TYPE_CONST_P (TREE_TYPE (decl))\n-\t\t   && INTEGRAL_OR_ENUMERATION_TYPE_P (TREE_TYPE (decl))\n-\t\t   && DECL_INITIALIZED_BY_CONSTANT_EXPRESSION_P (decl))\n+\t    /* Const variables or static data members of integral or\n+\t      enumeration types initialized with constant expressions\n+\t      are OK.  */\n+\t  if (TREE_CODE (decl) == VAR_DECL\n+\t      && CP_TYPE_CONST_P (TREE_TYPE (decl))\n+\t      && INTEGRAL_OR_ENUMERATION_TYPE_P (TREE_TYPE (decl))\n+\t      && DECL_INITIALIZED_BY_CONSTANT_EXPRESSION_P (decl))\n \t    ;\n \t  else\n \t    {"}]}