{"sha": "3bdb97b8b97757eaf5aae67bd300c1a58dd00027", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2JkYjk3YjhiOTc3NTdlYWY1YWFlNjdiZDMwMGMxYTU4ZGQwMDAyNw==", "commit": {"author": {"name": "Andreas Krebbel", "email": "Andreas.Krebbel@de.ibm.com", "date": "2012-01-17T20:37:46Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2012-01-17T20:37:46Z"}, "message": "re PR middle-end/50325 (76 new fails with rev. 177691)\n\ngcc/\n2012-01-17  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n\t    Richard Sandiford  <rdsandiford@googlemail.com>\n\n\tPR middle-end/50325\n\tPR middle-end/51192\n\t* optabs.h (simplify_expand_binop): Declare.\n\t* optabs.c (simplify_expand_binop): Make global.\n\t* expmed.c (store_bit_field_1): Use simplify_expand_binop on big\n\tendian targets if the source cannot be exactly covered by word\n\tmode chunks.\n\nCo-Authored-By: Richard Sandiford <rdsandiford@googlemail.com>\n\nFrom-SVN: r183262", "tree": {"sha": "0817497fe59c2693e5501c674272b3c4672529f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0817497fe59c2693e5501c674272b3c4672529f3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3bdb97b8b97757eaf5aae67bd300c1a58dd00027", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bdb97b8b97757eaf5aae67bd300c1a58dd00027", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3bdb97b8b97757eaf5aae67bd300c1a58dd00027", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bdb97b8b97757eaf5aae67bd300c1a58dd00027/comments", "author": null, "committer": null, "parents": [{"sha": "cd2705aadedff9e94b72b66cfc1e45937bec8602", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd2705aadedff9e94b72b66cfc1e45937bec8602", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd2705aadedff9e94b72b66cfc1e45937bec8602"}], "stats": {"total": 35, "additions": 31, "deletions": 4}, "files": [{"sha": "6def41fee76b7b8fdf0130f551556cd51765aa4f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bdb97b8b97757eaf5aae67bd300c1a58dd00027/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bdb97b8b97757eaf5aae67bd300c1a58dd00027/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3bdb97b8b97757eaf5aae67bd300c1a58dd00027", "patch": "@@ -1,3 +1,14 @@\n+2012-01-17  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n+\t    Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\tPR middle-end/50325\n+\tPR middle-end/51192\n+\t* optabs.h (simplify_expand_binop): Declare.\n+\t* optabs.c (simplify_expand_binop): Make global.\n+\t* expmed.c (store_bit_field_1): Use simplify_expand_binop on big\n+\tendian targets if the source cannot be exactly covered by word\n+\tmode chunks.\n+\n 2012-01-17  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR bootstrap/51872"}, {"sha": "09a933da5f5b63abb84a472c4055f3cc9e92726d", "filename": "gcc/expmed.c", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bdb97b8b97757eaf5aae67bd300c1a58dd00027/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bdb97b8b97757eaf5aae67bd300c1a58dd00027/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=3bdb97b8b97757eaf5aae67bd300c1a58dd00027", "patch": "@@ -557,9 +557,21 @@ store_bit_field_1 (rtx str_rtx, unsigned HOST_WIDE_INT bitsize,\n \t\t\t\t\t    0)\n \t\t\t\t     : (int) i * BITS_PER_WORD);\n \t  rtx value_word = operand_subword_force (value, wordnum, fieldmode);\n-\n-\t  if (!store_bit_field_1 (op0, MIN (BITS_PER_WORD,\n-\t\t\t\t\t    bitsize - i * BITS_PER_WORD),\n+\t  unsigned HOST_WIDE_INT new_bitsize =\n+\t    MIN (BITS_PER_WORD, bitsize - i * BITS_PER_WORD);\n+\n+\t  /* If the remaining chunk doesn't have full wordsize we have\n+\t     to make sure that for big endian machines the higher order\n+\t     bits are used.  */\n+\t  if (new_bitsize < BITS_PER_WORD && BYTES_BIG_ENDIAN && !backwards)\n+\t    value_word = simplify_expand_binop (word_mode, lshr_optab,\n+\t\t\t\t\t\tvalue_word,\n+\t\t\t\t\t\tGEN_INT (BITS_PER_WORD\n+\t\t\t\t\t\t\t - new_bitsize),\n+\t\t\t\t\t\tNULL_RTX, true,\n+\t\t\t\t\t\tOPTAB_LIB_WIDEN);\n+\n+\t  if (!store_bit_field_1 (op0, new_bitsize,\n \t\t\t\t  bitnum + bit_offset,\n \t\t\t\t  bitregion_start, bitregion_end,\n \t\t\t\t  word_mode,"}, {"sha": "a532ba3d5389b9f556265d3f5dbc9e2a65606814", "filename": "gcc/optabs.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bdb97b8b97757eaf5aae67bd300c1a58dd00027/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bdb97b8b97757eaf5aae67bd300c1a58dd00027/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=3bdb97b8b97757eaf5aae67bd300c1a58dd00027", "patch": "@@ -659,7 +659,7 @@ expand_ternary_op (enum machine_mode mode, optab ternary_optab, rtx op0,\n    calculated at compile time.  The arguments and return value are\n    otherwise the same as for expand_binop.  */\n \n-static rtx\n+rtx\n simplify_expand_binop (enum machine_mode mode, optab binoptab,\n \t\t       rtx op0, rtx op1, rtx target, int unsignedp,\n \t\t       enum optab_methods methods)"}, {"sha": "6ad6dae9ab676b4c3dd8839e9147ded239bf980c", "filename": "gcc/optabs.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bdb97b8b97757eaf5aae67bd300c1a58dd00027/gcc%2Foptabs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bdb97b8b97757eaf5aae67bd300c1a58dd00027/gcc%2Foptabs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.h?ref=3bdb97b8b97757eaf5aae67bd300c1a58dd00027", "patch": "@@ -859,6 +859,10 @@ extern rtx expand_ternary_op (enum machine_mode mode, optab ternary_optab,\n extern rtx expand_binop (enum machine_mode, optab, rtx, rtx, rtx, int,\n \t\t\t enum optab_methods);\n \n+extern rtx simplify_expand_binop (enum machine_mode mode, optab binoptab,\n+\t\t\t\t  rtx op0, rtx op1, rtx target, int unsignedp,\n+\t\t\t\t  enum optab_methods methods);\n+\n extern bool force_expand_binop (enum machine_mode, optab, rtx, rtx, rtx, int,\n \t\t\t\tenum optab_methods);\n "}]}