{"sha": "a7f8415c05fa2ba336a071c211f09c0e76f2bb0a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTdmODQxNWMwNWZhMmJhMzM2YTA3MWMyMTFmMDljMGU3NmYyYmIwYQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2018-02-08T18:56:17Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2018-02-08T18:56:17Z"}, "message": "constexpr.c (cxx_eval_component_reference): Use INDIRECT_REF_P.\n\n2018-02-08  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* constexpr.c (cxx_eval_component_reference): Use INDIRECT_REF_P.\n\t* lambda.c (build_capture_proxy): Likewise.\n\t* search.c (field_access_p): Likewise.\n\t* semantics.c (omp_clause_decl, omp_privatize_field,\n\tfinish_omp_clauses): Likewise.\n\nFrom-SVN: r257503", "tree": {"sha": "8305a011127fc413b8af099dc8d73a9a11ae152a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8305a011127fc413b8af099dc8d73a9a11ae152a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a7f8415c05fa2ba336a071c211f09c0e76f2bb0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7f8415c05fa2ba336a071c211f09c0e76f2bb0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7f8415c05fa2ba336a071c211f09c0e76f2bb0a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7f8415c05fa2ba336a071c211f09c0e76f2bb0a/comments", "author": null, "committer": null, "parents": [{"sha": "739745618a4202f3bf515494175eacae6ff05d2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/739745618a4202f3bf515494175eacae6ff05d2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/739745618a4202f3bf515494175eacae6ff05d2d"}], "stats": {"total": 20, "additions": 14, "deletions": 6}, "files": [{"sha": "be4db4b789adec026629141c0d136c4968c5a7de", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7f8415c05fa2ba336a071c211f09c0e76f2bb0a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7f8415c05fa2ba336a071c211f09c0e76f2bb0a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a7f8415c05fa2ba336a071c211f09c0e76f2bb0a", "patch": "@@ -1,3 +1,11 @@\n+2018-02-08  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* constexpr.c (cxx_eval_component_reference): Use INDIRECT_REF_P.\n+\t* lambda.c (build_capture_proxy): Likewise.\n+\t* search.c (field_access_p): Likewise.\n+\t* semantics.c (omp_clause_decl, omp_privatize_field,\n+\tfinish_omp_clauses): Likewise.\n+\n 2018-02-08  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/83806"}, {"sha": "39a2e1ab578ceff57db50ac04390bf77e757ca2a", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7f8415c05fa2ba336a071c211f09c0e76f2bb0a/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7f8415c05fa2ba336a071c211f09c0e76f2bb0a/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=a7f8415c05fa2ba336a071c211f09c0e76f2bb0a", "patch": "@@ -2463,7 +2463,7 @@ cxx_eval_component_reference (const constexpr_ctx *ctx, tree t,\n   tree whole = cxx_eval_constant_expression (ctx, orig_whole,\n \t\t\t\t\t     lval,\n \t\t\t\t\t     non_constant_p, overflow_p);\n-  if (TREE_CODE (whole) == INDIRECT_REF\n+  if (INDIRECT_REF_P (whole)\n       && integer_zerop (TREE_OPERAND (whole, 0))\n       && !ctx->quiet)\n     error (\"dereferencing a null pointer in %qE\", orig_whole);"}, {"sha": "2545eae9ce914e6f251a31b9d231b2768dff6346", "filename": "gcc/cp/lambda.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7f8415c05fa2ba336a071c211f09c0e76f2bb0a/gcc%2Fcp%2Flambda.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7f8415c05fa2ba336a071c211f09c0e76f2bb0a/gcc%2Fcp%2Flambda.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flambda.c?ref=a7f8415c05fa2ba336a071c211f09c0e76f2bb0a", "patch": "@@ -450,7 +450,7 @@ build_capture_proxy (tree member, tree init)\n \t{\n \t  if (PACK_EXPANSION_P (init))\n \t    init = PACK_EXPANSION_PATTERN (init);\n-\t  if (TREE_CODE (init) == INDIRECT_REF)\n+\t  if (INDIRECT_REF_P (init))\n \t    init = TREE_OPERAND (init, 0);\n \t  STRIP_NOPS (init);\n \t}"}, {"sha": "796209f0e7245614e9c091dd37e288cadc18bdde", "filename": "gcc/cp/search.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7f8415c05fa2ba336a071c211f09c0e76f2bb0a/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7f8415c05fa2ba336a071c211f09c0e76f2bb0a/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=a7f8415c05fa2ba336a071c211f09c0e76f2bb0a", "patch": "@@ -1636,7 +1636,7 @@ field_access_p (tree component_ref, tree field_decl, tree field_type)\n     return false;\n \n   tree indirect_ref = TREE_OPERAND (component_ref, 0);\n-  if (TREE_CODE (indirect_ref) != INDIRECT_REF)\n+  if (!INDIRECT_REF_P (indirect_ref))\n     return false;\n \n   tree ptr = STRIP_NOPS (TREE_OPERAND (indirect_ref, 0));"}, {"sha": "f0cee68e46f454dd667e83d3e1867ff2c6c68420", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7f8415c05fa2ba336a071c211f09c0e76f2bb0a/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7f8415c05fa2ba336a071c211f09c0e76f2bb0a/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=a7f8415c05fa2ba336a071c211f09c0e76f2bb0a", "patch": "@@ -4391,7 +4391,7 @@ omp_clause_decl_field (tree decl)\n       && DECL_OMP_PRIVATIZED_MEMBER (decl))\n     {\n       tree f = DECL_VALUE_EXPR (decl);\n-      if (TREE_CODE (f) == INDIRECT_REF)\n+      if (INDIRECT_REF_P (f))\n \tf = TREE_OPERAND (f, 0);\n       if (TREE_CODE (f) == COMPONENT_REF)\n \t{\n@@ -4446,7 +4446,7 @@ omp_privatize_field (tree t, bool shared)\n     omp_private_member_map = new hash_map<tree, tree>;\n   if (TREE_CODE (TREE_TYPE (t)) == REFERENCE_TYPE)\n     {\n-      gcc_assert (TREE_CODE (m) == INDIRECT_REF);\n+      gcc_assert (INDIRECT_REF_P (m));\n       m = TREE_OPERAND (m, 0);\n     }\n   tree vb = NULL_TREE;\n@@ -5864,7 +5864,7 @@ finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t\t  if (TREE_CODE (t) == POINTER_PLUS_EXPR)\n \t\t    t = TREE_OPERAND (t, 0);\n \t\t  if (TREE_CODE (t) == ADDR_EXPR\n-\t\t      || TREE_CODE (t) == INDIRECT_REF)\n+\t\t      || INDIRECT_REF_P (t))\n \t\t    t = TREE_OPERAND (t, 0);\n \t\t}\n \t      tree n = omp_clause_decl_field (t);"}]}