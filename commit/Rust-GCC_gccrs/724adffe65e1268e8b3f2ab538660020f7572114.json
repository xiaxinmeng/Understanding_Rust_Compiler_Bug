{"sha": "724adffe65e1268e8b3f2ab538660020f7572114", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzI0YWRmZmU2NWUxMjY4ZThiM2YyYWI1Mzg2NjAwMjBmNzU3MjExNA==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-07-27T10:08:38Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-08-03T01:10:27Z"}, "message": "Support cond_add/sub/mul/div for vector float/double.\n\ngcc/ChangeLog:\n\n\t* config/i386/sse.md (cond_<insn><mode>):New expander.\n\t(cond_mul<mode>): Ditto.\n\t(cond_div<mode>): Ditto.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/cond_op_addsubmuldiv_double-1.c: New test.\n\t* gcc.target/i386/cond_op_addsubmuldiv_double-2.c: New test.\n\t* gcc.target/i386/cond_op_addsubmuldiv_float-1.c: New test.\n\t* gcc.target/i386/cond_op_addsubmuldiv_float-2.c: New test.", "tree": {"sha": "ca108013839313b16dcc140097e9be05aaff7bb4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ca108013839313b16dcc140097e9be05aaff7bb4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/724adffe65e1268e8b3f2ab538660020f7572114", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/724adffe65e1268e8b3f2ab538660020f7572114", "html_url": "https://github.com/Rust-GCC/gccrs/commit/724adffe65e1268e8b3f2ab538660020f7572114", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/724adffe65e1268e8b3f2ab538660020f7572114/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7459bfa8a37a4fbd6ed5153bff76f49d372b4ace", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7459bfa8a37a4fbd6ed5153bff76f49d372b4ace", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7459bfa8a37a4fbd6ed5153bff76f49d372b4ace"}], "stats": {"total": 183, "additions": 183, "deletions": 0}, "files": [{"sha": "8bf1764d3d521f5b4c2c8135c531744ecdb132f7", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/724adffe65e1268e8b3f2ab538660020f7572114/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/724adffe65e1268e8b3f2ab538660020f7572114/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=724adffe65e1268e8b3f2ab538660020f7572114", "patch": "@@ -1891,6 +1891,24 @@\n }\n   [(set_attr \"isa\" \"noavx,noavx,avx,avx\")])\n \n+(define_expand \"cond_<insn><mode>\"\n+  [(set (match_operand:VF 0 \"register_operand\")\n+\t(vec_merge:VF\n+\t  (plusminus:VF\n+\t    (match_operand:VF 2 \"vector_operand\")\n+\t    (match_operand:VF 3 \"vector_operand\"))\n+\t  (match_operand:VF 4 \"nonimm_or_0_operand\")\n+\t  (match_operand:<avx512fmaskmode> 1 \"register_operand\")))]\n+  \"<MODE_SIZE> == 64 || TARGET_AVX512VL\"\n+{\n+  emit_insn (gen_<insn><mode>3_mask (operands[0],\n+\t\t\t\t     operands[2],\n+\t\t\t\t     operands[3],\n+\t\t\t\t     operands[4],\n+\t\t\t\t     operands[1]));\n+  DONE;\n+})\n+\n (define_expand \"<insn><mode>3<mask_name><round_name>\"\n   [(set (match_operand:VF 0 \"register_operand\")\n \t(plusminus:VF\n@@ -1953,6 +1971,24 @@\n    (set_attr \"prefix\" \"<round_scalar_prefix>\")\n    (set_attr \"mode\" \"<ssescalarmode>\")])\n \n+(define_expand \"cond_mul<mode>\"\n+  [(set (match_operand:VF 0 \"register_operand\")\n+\t(vec_merge:VF\n+\t  (mult:VF\n+\t    (match_operand:VF 2 \"vector_operand\")\n+\t    (match_operand:VF 3 \"vector_operand\"))\n+\t  (match_operand:VF 4 \"nonimm_or_0_operand\")\n+\t  (match_operand:<avx512fmaskmode> 1 \"register_operand\")))]\n+  \"<MODE_SIZE> == 64 || TARGET_AVX512VL\"\n+{\n+  emit_insn (gen_mul<mode>3_mask (operands[0],\n+\t\t\t\t     operands[2],\n+\t\t\t\t     operands[3],\n+\t\t\t\t     operands[4],\n+\t\t\t\t     operands[1]));\n+  DONE;\n+})\n+\n (define_expand \"mul<mode>3<mask_name><round_name>\"\n   [(set (match_operand:VF 0 \"register_operand\")\n \t(mult:VF\n@@ -2041,6 +2077,24 @@\n     }\n })\n \n+(define_expand \"cond_div<mode>\"\n+  [(set (match_operand:VF 0 \"register_operand\")\n+\t(vec_merge:VF\n+\t  (div:VF\n+\t    (match_operand:VF 2 \"register_operand\")\n+\t    (match_operand:VF 3 \"vector_operand\"))\n+\t  (match_operand:VF 4 \"nonimm_or_0_operand\")\n+\t  (match_operand:<avx512fmaskmode> 1 \"register_operand\")))]\n+  \"<MODE_SIZE> == 64 || TARGET_AVX512VL\"\n+{\n+  emit_insn (gen_<sse>_div<mode>3_mask (operands[0],\n+\t\t\t\t\toperands[2],\n+\t\t\t\t\toperands[3],\n+\t\t\t\t\toperands[4],\n+\t\t\t\t\toperands[1]));\n+  DONE;\n+})\n+\n (define_insn \"<sse>_div<mode>3<mask_name><round_name>\"\n   [(set (match_operand:VF 0 \"register_operand\" \"=x,v\")\n \t(div:VF"}, {"sha": "1092cba9876d6bed0e04b5faf337a5235076742d", "filename": "gcc/testsuite/gcc.target/i386/cond_op_addsubmuldiv_double-1.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/724adffe65e1268e8b3f2ab538660020f7572114/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_addsubmuldiv_double-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/724adffe65e1268e8b3f2ab538660020f7572114/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_addsubmuldiv_double-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_addsubmuldiv_double-1.c?ref=724adffe65e1268e8b3f2ab538660020f7572114", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=skylake-avx512 -fdump-tree-vect\" } */\n+/* { dg-final { scan-tree-dump \".COND_ADD\" \"vect\" } } */\n+/* { dg-final { scan-tree-dump \".COND_SUB\" \"vect\" } } */\n+/* { dg-final { scan-tree-dump \".COND_MUL\" \"vect\" } } */\n+/* { dg-final { scan-tree-dump \".COND_RDIV\" \"vect\" } } */\n+\n+#ifndef NUM\n+#define NUM 800\n+#endif\n+#ifndef TYPE\n+#define TYPE double\n+#endif\n+\n+TYPE a[NUM], b[NUM], c[NUM], d[NUM], e[NUM], j[NUM];\n+\n+#define BIN(OPNAME, OP)\t\t\t\t\\\n+  void\t\t\t\t\t\t\\\n+  __attribute__ ((noipa,optimize (\"O3\")))\t\\\n+  foo_##OPNAME ()\t\t\t\t\\\n+  {\t\t\t\t\t\t\\\n+    for (int i = 0; i != NUM; i++)\t\t\\\n+      if (b[i] < c[i])\t\t\t\t\\\n+\ta[i] = d[i] OP e[i];\t\t\t\\\n+  }\n+\n+\n+BIN (add, +);\n+BIN (sub, -);\n+BIN (mul, *);\n+BIN (div, /);"}, {"sha": "360891f3d21ad4dc4774331988679fe151889ee5", "filename": "gcc/testsuite/gcc.target/i386/cond_op_addsubmuldiv_double-2.c", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/724adffe65e1268e8b3f2ab538660020f7572114/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_addsubmuldiv_double-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/724adffe65e1268e8b3f2ab538660020f7572114/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_addsubmuldiv_double-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_addsubmuldiv_double-2.c?ref=724adffe65e1268e8b3f2ab538660020f7572114", "patch": "@@ -0,0 +1,85 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512vl -mprefer-vector-width=256\" } */\n+\n+#define AVX512VL\n+#ifndef CHECK\n+#define CHECK \"avx512f-helper.h\"\n+#endif\n+\n+#include CHECK\n+\n+#include \"cond_op_addsubmuldiv_double-1.c\"\n+#define BINO2(OPNAME, OP)\t\t\t\\\n+  void\t\t\t\t\t\t\\\n+  __attribute__ ((noipa,optimize (\"O2\")))\t\\\n+  foo_o2_##OPNAME ()\t\t\t\t\\\n+  {\t\t\t\t\t\t\\\n+    for (int i = 0; i != NUM; i++)\t\t\\\n+      if (b[i] < c[i])\t\t\t\t\\\n+\tj[i] = d[i] OP e[i];\t\t\t\\\n+  }\n+\n+\n+BINO2 (add, +);\n+BINO2 (sub, -);\n+BINO2 (mul, *);\n+BINO2 (div, /);\n+\n+static void\n+test_256 (void)\n+{\n+  int sign = -1;\n+  for (int i = 0; i != NUM; i++)\n+    {\n+      a[i] = 0.0;\n+      d[i] = i * 0.5;\n+      e[i] = i * i * 0.3 - i * 0.9 + 15.3;\n+      b[i] = i * 0.83;\n+      c[i] = b[i] + sign;\n+      sign *= -1;\n+      j[i] = b[i] < c[i] ? 1.0 : 0.0;\n+    }\n+  foo_add ();\n+  foo_o2_add ();\n+  for (int i = 0; i != NUM; i++)\n+    {\n+      if (a[i] != j[i])\n+\tabort ();\n+      a[i] = 0.0;\n+      j[i] = b[i] < c[i] ? 1.0 : 0.0;\n+    }\n+\n+  foo_sub ();\n+  foo_o2_sub ();\n+  for (int i = 0; i != NUM; i++)\n+    {\n+      if (a[i] != j[i])\n+  \tabort ();\n+      a[i] = 0.0;\n+      j[i] = b[i] < c[i] ? 1.0 : 0.0;\n+    }\n+\n+  foo_mul ();\n+  foo_o2_mul ();\n+  for (int i = 0; i != NUM; i++)\n+    {\n+      if (a[i] != j[i])\n+\tabort ();\n+      a[i] = 0.0;\n+      j[i] = b[i] < c[i] ? 1.0 : 0.0;\n+    }\n+\n+  foo_div ();\n+  foo_o2_div ();\n+  for (int i = 0; i != NUM; i++)\n+    {\n+      if (a[i] != j[i])\n+  \tabort ();\n+    }\n+}\n+\n+static void\n+test_128 ()\n+{\n+  \n+}"}, {"sha": "d4975271e261df3aff55541e67d726f436a885dc", "filename": "gcc/testsuite/gcc.target/i386/cond_op_addsubmuldiv_float-1.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/724adffe65e1268e8b3f2ab538660020f7572114/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_addsubmuldiv_float-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/724adffe65e1268e8b3f2ab538660020f7572114/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_addsubmuldiv_float-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_addsubmuldiv_float-1.c?ref=724adffe65e1268e8b3f2ab538660020f7572114", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=skylake-avx512 -DTYPE=float -fdump-tree-vect\" } */\n+/* { dg-final { scan-tree-dump \".COND_ADD\" \"vect\" } } */\n+/* { dg-final { scan-tree-dump \".COND_SUB\" \"vect\" } } */\n+/* { dg-final { scan-tree-dump \".COND_MUL\" \"vect\" } } */\n+/* { dg-final { scan-tree-dump \".COND_RDIV\" \"vect\" } } */\n+\n+#include \"cond_op_addsubmuldiv_double-1.c\"\n+"}, {"sha": "20ed737cbf362ee09023dac76ae1bab5069b2afa", "filename": "gcc/testsuite/gcc.target/i386/cond_op_addsubmuldiv_float-2.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/724adffe65e1268e8b3f2ab538660020f7572114/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_addsubmuldiv_float-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/724adffe65e1268e8b3f2ab538660020f7572114/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_addsubmuldiv_float-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_addsubmuldiv_float-2.c?ref=724adffe65e1268e8b3f2ab538660020f7572114", "patch": "@@ -0,0 +1,4 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512vl -mprefer-vector-width=256 -DTYPE=float\" } */\n+\n+#include \"cond_op_addsubmuldiv_double-2.c\""}]}