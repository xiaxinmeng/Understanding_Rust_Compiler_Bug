{"sha": "6832dd39d7b5ede0122a27633ef1859ce3d893a6", "node_id": "C_kwDOANBUbNoAKDY4MzJkZDM5ZDdiNWVkZTAxMjJhMjc2MzNlZjE4NTljZTNkODkzYTY", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-09-03T08:40:10Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-09-04T06:09:42Z"}, "message": "Add real_isdenormal.\n\nThere are 6 idioms of the same check and I'd like to add more.\n\nIt seems there are macros as well as functions for things like\nREAL_VALUE_ISINF and REAL_VALUE_NEGATIVE.  I don't know if there was\nhistorical need for this duplicity, but I think it's cleaner if we\nstart gravitating towards inline functions only.\n\ngcc/ChangeLog:\n\n\t* real.cc (encode_ieee_single): Use real_isdenormal.\n\t(encode_ieee_double): Same.\n\t(encode_ieee_extended): Same.\n\t(encode_ieee_quad): Same.\n\t(encode_ieee_half): Same.\n\t(encode_arm_bfloat_half): Same.\n\t* real.h (real_isdenormal): New.", "tree": {"sha": "e3d91e6b4a6c4a6f224a45ee9e0d682c82fae5ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e3d91e6b4a6c4a6f224a45ee9e0d682c82fae5ef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6832dd39d7b5ede0122a27633ef1859ce3d893a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6832dd39d7b5ede0122a27633ef1859ce3d893a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6832dd39d7b5ede0122a27633ef1859ce3d893a6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6832dd39d7b5ede0122a27633ef1859ce3d893a6/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83f2f22850a647bcf1e7cd155fb2ed67f23fc4b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83f2f22850a647bcf1e7cd155fb2ed67f23fc4b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83f2f22850a647bcf1e7cd155fb2ed67f23fc4b3"}], "stats": {"total": 19, "additions": 13, "deletions": 6}, "files": [{"sha": "73bbac645d9a8649056774b3eb99bcae4b080388", "filename": "gcc/real.cc", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6832dd39d7b5ede0122a27633ef1859ce3d893a6/gcc%2Freal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6832dd39d7b5ede0122a27633ef1859ce3d893a6/gcc%2Freal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.cc?ref=6832dd39d7b5ede0122a27633ef1859ce3d893a6", "patch": "@@ -2954,7 +2954,7 @@ encode_ieee_single (const struct real_format *fmt, long *buf,\n {\n   unsigned long image, sig, exp;\n   unsigned long sign = r->sign;\n-  bool denormal = (r->sig[SIGSZ-1] & SIG_MSB) == 0;\n+  bool denormal = real_isdenormal (r);\n \n   image = sign << 31;\n   sig = (r->sig[SIGSZ-1] >> (HOST_BITS_PER_LONG - 24)) & 0x7fffff;\n@@ -3175,7 +3175,7 @@ encode_ieee_double (const struct real_format *fmt, long *buf,\n {\n   unsigned long image_lo, image_hi, sig_lo, sig_hi, exp;\n   unsigned long sign = r->sign;\n-  bool denormal = (r->sig[SIGSZ-1] & SIG_MSB) == 0;\n+  bool denormal = real_isdenormal (r);\n \n   image_hi = sign << 31;\n   image_lo = 0;\n@@ -3433,7 +3433,7 @@ encode_ieee_extended (const struct real_format *fmt, long *buf,\n \t\t      const REAL_VALUE_TYPE *r)\n {\n   unsigned long image_hi, sig_hi, sig_lo;\n-  bool denormal = (r->sig[SIGSZ-1] & SIG_MSB) == 0;\n+  bool denormal = real_isdenormal (r);\n \n   image_hi = r->sign << 15;\n   sig_hi = sig_lo = 0;\n@@ -3964,7 +3964,7 @@ encode_ieee_quad (const struct real_format *fmt, long *buf,\n {\n   unsigned long image3, image2, image1, image0, exp;\n   unsigned long sign = r->sign;\n-  bool denormal = (r->sig[SIGSZ-1] & SIG_MSB) == 0;\n+  bool denormal = real_isdenormal (r);\n   REAL_VALUE_TYPE u;\n \n   image3 = sign << 31;\n@@ -4721,7 +4721,7 @@ encode_ieee_half (const struct real_format *fmt, long *buf,\n {\n   unsigned long image, sig, exp;\n   unsigned long sign = r->sign;\n-  bool denormal = (r->sig[SIGSZ-1] & SIG_MSB) == 0;\n+  bool denormal = real_isdenormal (r);\n \n   image = sign << 15;\n   sig = (r->sig[SIGSZ-1] >> (HOST_BITS_PER_LONG - 11)) & 0x3ff;\n@@ -4835,7 +4835,7 @@ encode_arm_bfloat_half (const struct real_format *fmt, long *buf,\n {\n   unsigned long image, sig, exp;\n   unsigned long sign = r->sign;\n-  bool denormal = (r->sig[SIGSZ-1] & SIG_MSB) == 0;\n+  bool denormal = real_isdenormal (r);\n \n   image = sign << 15;\n   sig = (r->sig[SIGSZ-1] >> (HOST_BITS_PER_LONG - 8)) & 0x7f;"}, {"sha": "f9528d765ec00b1e1244feee527135c7efc1638f", "filename": "gcc/real.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6832dd39d7b5ede0122a27633ef1859ce3d893a6/gcc%2Freal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6832dd39d7b5ede0122a27633ef1859ce3d893a6/gcc%2Freal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.h?ref=6832dd39d7b5ede0122a27633ef1859ce3d893a6", "patch": "@@ -286,6 +286,13 @@ extern bool real_isnan (const REAL_VALUE_TYPE *);\n /* Determine whether a floating-point value X is a signaling NaN.  */\n extern bool real_issignaling_nan (const REAL_VALUE_TYPE *);\n \n+/* Determine whether a floating-point value X is a denormal.  */\n+inline bool\n+real_isdenormal (const REAL_VALUE_TYPE *r)\n+{\n+  return (r->sig[SIGSZ-1] & SIG_MSB) == 0;\n+}\n+\n /* Determine whether a floating-point value X is finite.  */\n extern bool real_isfinite (const REAL_VALUE_TYPE *);\n "}]}