{"sha": "33e6755738a59a47e0f2e436e01b72514043e8cb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzNlNjc1NTczOGE1OWE0N2UwZjJlNDM2ZTAxYjcyNTE0MDQzZThjYg==", "commit": {"author": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2013-05-05T20:47:24Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2013-05-05T20:47:24Z"}, "message": "config.gcc (hppa*-*-*): Remove MASK_BIG_SWITCH from CPU default.\n\n\t* config.gcc (hppa*-*-*): Remove MASK_BIG_SWITCH from CPU default.\n\t* config/pa/pa.opt: Make mbig-switch a no-op.\n\t* config/pa/pa.h (TARGET_DEFAULT): Remove MASK_BIG_SWITCH.\n\t(CASE_VECTOR_MODE): Always return SImode.\n\t(ASM_OUTPUT_ADDR_VEC_ELT, ASM_OUTPUT_ADDR_DIFF_ELT): Remove code\n\tfor the !TARGET_BIG_SWITCH case.\n\t* config/pa/pa-linux.h: Likewise.\n\t* config/pa/pa-openbsd.h: Likewise.\n\t* config/pa/pa-hpux.h: Define TARGET_DEFAULT to 0.\n\t* config/pa/pa.md (short_jump): Remove define_insn.\n\t(casesi): Remove code for the !TARGET_BIG_SWITCH case.\n\t(casesi0): Remove define_insn.\n\t(type): Remove btable_branch.\n\t(pa_combine_type): Likewise.\n\t(in_nullified_branch_delay): Likewise.\n\t(in_call_delay): Likewise.\n\t(define_delay): Likewise.\n\t(define_insn_reservation \"Z3\"): Likewise.\n\t(define_insn_reservation \"Z4\"): Likewise.\n\t* config/pa/pa.c  (pa_reorg): Remove code for !TARGET_BIG_SWITCH.\n\t(pa_adjust_insn_length): Remove adjustment for btable branches.\n\t* doc/invoke.texi (HPPA Options): Delete documentation for mbig-switch\n\tand mno-big-switch\n\n\nCo-Authored-By: John David Anglin <dave.anglin@nrc-cnrc.gc.ca>\n\nFrom-SVN: r198612", "tree": {"sha": "9397ce89ab5ec3f7f3bb5a5766dcba0134104626", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9397ce89ab5ec3f7f3bb5a5766dcba0134104626"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/33e6755738a59a47e0f2e436e01b72514043e8cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33e6755738a59a47e0f2e436e01b72514043e8cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33e6755738a59a47e0f2e436e01b72514043e8cb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33e6755738a59a47e0f2e436e01b72514043e8cb/comments", "author": null, "committer": null, "parents": [{"sha": "3095685e6d324d98cfebc9f72201a8d4f1d1458c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3095685e6d324d98cfebc9f72201a8d4f1d1458c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3095685e6d324d98cfebc9f72201a8d4f1d1458c"}], "stats": {"total": 304, "additions": 93, "deletions": 211}, "files": [{"sha": "80bc8bc1bcd84b1352402ff244fa386e0b52b9cd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33e6755738a59a47e0f2e436e01b72514043e8cb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33e6755738a59a47e0f2e436e01b72514043e8cb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=33e6755738a59a47e0f2e436e01b72514043e8cb", "patch": "@@ -1,3 +1,30 @@\n+2013-05-05  Steven Bosscher  <steven@gcc.gnu.org>\n+\t    John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n+\n+\t* config.gcc (hppa*-*-*): Remove MASK_BIG_SWITCH from CPU default.\n+\t* config/pa/pa.opt: Make mbig-switch a no-op.\n+\t* config/pa/pa.h (TARGET_DEFAULT): Remove MASK_BIG_SWITCH.\n+\t(CASE_VECTOR_MODE): Always return SImode.\n+\t(ASM_OUTPUT_ADDR_VEC_ELT, ASM_OUTPUT_ADDR_DIFF_ELT): Remove code\n+\tfor the !TARGET_BIG_SWITCH case.\n+\t* config/pa/pa-linux.h: Likewise.\n+\t* config/pa/pa-openbsd.h: Likewise.\n+\t* config/pa/pa-hpux.h: Define TARGET_DEFAULT to 0.\n+\t* config/pa/pa.md (short_jump): Remove define_insn.\n+\t(casesi): Remove code for the !TARGET_BIG_SWITCH case.\n+\t(casesi0): Remove define_insn.\n+\t(type): Remove btable_branch.\n+\t(pa_combine_type): Likewise.\n+\t(in_nullified_branch_delay): Likewise.\n+\t(in_call_delay): Likewise.\n+\t(define_delay): Likewise.\n+\t(define_insn_reservation \"Z3\"): Likewise.\n+\t(define_insn_reservation \"Z4\"): Likewise.\n+\t* config/pa/pa.c  (pa_reorg): Remove code for !TARGET_BIG_SWITCH.\n+\t(pa_adjust_insn_length): Remove adjustment for btable branches.\n+\t* doc/invoke.texi (HPPA Options): Delete documentation for mbig-switch\n+\tand mno-big-switch\n+\n 2013-05-05  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/sse.md (*vec_extract<ssevecmodelower>_0): Merge"}, {"sha": "add6e31ff6be60c36715b5b9a9620cdd6426950d", "filename": "gcc/config.gcc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33e6755738a59a47e0f2e436e01b72514043e8cb/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33e6755738a59a47e0f2e436e01b72514043e8cb/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=33e6755738a59a47e0f2e436e01b72514043e8cb", "patch": "@@ -3698,10 +3698,9 @@ case ${target} in\n \t\t;;\n \n \thppa*-*-*)\n-\t\ttarget_cpu_default2=\"MASK_BIG_SWITCH\"\n \t\tif test x$gas = xyes\n \t\tthen\n-\t\t\ttarget_cpu_default2=\"${target_cpu_default2}|MASK_GAS|MASK_JUMP_IN_DELAY\"\n+\t\t\ttarget_cpu_default2=\"MASK_GAS|MASK_JUMP_IN_DELAY\"\n \t\tfi\n \t\t;;\n "}, {"sha": "c384824fbf6f5d142e9dbcdf342d7ec3d795a9d5", "filename": "gcc/config/pa/pa-hpux.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33e6755738a59a47e0f2e436e01b72514043e8cb/gcc%2Fconfig%2Fpa%2Fpa-hpux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33e6755738a59a47e0f2e436e01b72514043e8cb/gcc%2Fconfig%2Fpa%2Fpa-hpux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-hpux.h?ref=33e6755738a59a47e0f2e436e01b72514043e8cb", "patch": "@@ -25,7 +25,7 @@ along with GCC; see the file COPYING3.  If not see\n #define HPUX_LONG_DOUBLE_LIBRARY 1\n \n #undef TARGET_DEFAULT\n-#define TARGET_DEFAULT MASK_BIG_SWITCH\n+#define TARGET_DEFAULT 0\n \n /* Make GCC agree with types.h.  */\n #undef SIZE_TYPE"}, {"sha": "fd4d22a7aad6c10a9ea8fc255fa2fe278a3994ec", "filename": "gcc/config/pa/pa-linux.h", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33e6755738a59a47e0f2e436e01b72514043e8cb/gcc%2Fconfig%2Fpa%2Fpa-linux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33e6755738a59a47e0f2e436e01b72514043e8cb/gcc%2Fconfig%2Fpa%2Fpa-linux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-linux.h?ref=33e6755738a59a47e0f2e436e01b72514043e8cb", "patch": "@@ -78,17 +78,11 @@ along with GCC; see the file COPYING3.  If not see\n \n #undef ASM_OUTPUT_ADDR_VEC_ELT\n #define ASM_OUTPUT_ADDR_VEC_ELT(FILE, VALUE) \\\n-  if (TARGET_BIG_SWITCH)\t\t\t\t\t\\\n-    fprintf (FILE, \"\\t.word .L%d\\n\", VALUE);\t\t\t\\\n-  else\t\t\t\t\t\t\t\t\\\n-    fprintf (FILE, \"\\tb .L%d\\n\\tnop\\n\", VALUE)\n+  fprintf (FILE, \"\\t.word .L%d\\n\", VALUE)\n \n #undef ASM_OUTPUT_ADDR_DIFF_ELT\n #define ASM_OUTPUT_ADDR_DIFF_ELT(FILE, BODY, VALUE, REL) \\\n-  if (TARGET_BIG_SWITCH)\t\t\t\t\t\\\n-    fprintf (FILE, \"\\t.word .L%d-.L%d\\n\", VALUE, REL);\t\t\\\n-  else\t\t\t\t\t\t\t\t\\\n-    fprintf (FILE, \"\\tb .L%d\\n\\tnop\\n\", VALUE)\n+  fprintf (FILE, \"\\t.word .L%d-.L%d\\n\", VALUE, REL)\n \n /* Use the default.  */\n #undef ASM_OUTPUT_LABEL"}, {"sha": "39b7bd2328495dd6916e2a0fcd25badc3636f17a", "filename": "gcc/config/pa/pa-openbsd.h", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33e6755738a59a47e0f2e436e01b72514043e8cb/gcc%2Fconfig%2Fpa%2Fpa-openbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33e6755738a59a47e0f2e436e01b72514043e8cb/gcc%2Fconfig%2Fpa%2Fpa-openbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-openbsd.h?ref=33e6755738a59a47e0f2e436e01b72514043e8cb", "patch": "@@ -49,17 +49,11 @@ along with GCC; see the file COPYING3.  If not see\n \n #undef ASM_OUTPUT_ADDR_VEC_ELT\n #define ASM_OUTPUT_ADDR_VEC_ELT(FILE, VALUE) \\\n-  if (TARGET_BIG_SWITCH)\t\t\t\t\t\\\n-    fprintf (FILE, \"\\t.word .L%d\\n\", VALUE);\t\t\t\\\n-  else\t\t\t\t\t\t\t\t\\\n-    fprintf (FILE, \"\\tb .L%d\\n\\tnop\\n\", VALUE)\n+  fprintf (FILE, \"\\t.word .L%d\\n\", VALUE)\n \n #undef ASM_OUTPUT_ADDR_DIFF_ELT\n #define ASM_OUTPUT_ADDR_DIFF_ELT(FILE, BODY, VALUE, REL) \\\n-  if (TARGET_BIG_SWITCH)\t\t\t\t\t\\\n-    fprintf (FILE, \"\\t.word .L%d-.L%d\\n\", VALUE, REL);\t\t\\\n-  else\t\t\t\t\t\t\t\t\\\n-    fprintf (FILE, \"\\tb .L%d\\n\\tnop\\n\", VALUE)\n+  fprintf (FILE, \"\\t.word .L%d-.L%d\\n\", VALUE, REL)\n \n /* Use the default.  */\n #undef ASM_OUTPUT_LABEL"}, {"sha": "0167a5d7109b59b0f4d2ba33ec8c683d6c25495f", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 28, "deletions": 120, "changes": 148, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33e6755738a59a47e0f2e436e01b72514043e8cb/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33e6755738a59a47e0f2e436e01b72514043e8cb/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=33e6755738a59a47e0f2e436e01b72514043e8cb", "patch": "@@ -4927,20 +4927,14 @@ pa_adjust_insn_length (rtx insn, int length)\n \t}\n     }\n \n-  /* Jumps inside switch tables which have unfilled delay slots need\n-     adjustment.  */\n-  if (JUMP_P (insn)\n-      && GET_CODE (pat) == PARALLEL\n-      && get_attr_type (insn) == TYPE_BTABLE_BRANCH)\n-    length += 4;\n   /* Block move pattern.  */\n-  else if (NONJUMP_INSN_P (insn)\n-\t   && GET_CODE (pat) == PARALLEL\n-\t   && GET_CODE (XVECEXP (pat, 0, 0)) == SET\n-\t   && GET_CODE (XEXP (XVECEXP (pat, 0, 0), 0)) == MEM\n-\t   && GET_CODE (XEXP (XVECEXP (pat, 0, 0), 1)) == MEM\n-\t   && GET_MODE (XEXP (XVECEXP (pat, 0, 0), 0)) == BLKmode\n-\t   && GET_MODE (XEXP (XVECEXP (pat, 0, 0), 1)) == BLKmode)\n+  if (NONJUMP_INSN_P (insn)\n+      && GET_CODE (pat) == PARALLEL\n+      && GET_CODE (XVECEXP (pat, 0, 0)) == SET\n+      && GET_CODE (XEXP (XVECEXP (pat, 0, 0), 0)) == MEM\n+      && GET_CODE (XEXP (XVECEXP (pat, 0, 0), 1)) == MEM\n+      && GET_MODE (XEXP (XVECEXP (pat, 0, 0), 0)) == BLKmode\n+      && GET_MODE (XEXP (XVECEXP (pat, 0, 0), 1)) == BLKmode)\n     length += compute_movmem_length (insn) - 4;\n   /* Block clear pattern.  */\n   else if (NONJUMP_INSN_P (insn)\n@@ -8947,36 +8941,10 @@ pa_following_call (rtx insn)\n /* We use this hook to perform a PA specific optimization which is difficult\n    to do in earlier passes.\n \n-   We want the delay slots of branches within jump tables to be filled.\n-   None of the compiler passes at the moment even has the notion that a\n-   PA jump table doesn't contain addresses, but instead contains actual\n-   instructions!\n-\n-   Because we actually jump into the table, the addresses of each entry\n-   must stay constant in relation to the beginning of the table (which\n-   itself must stay constant relative to the instruction to jump into\n-   it).  I don't believe we can guarantee earlier passes of the compiler\n-   will adhere to those rules.\n-\n-   So, late in the compilation process we find all the jump tables, and\n-   expand them into real code -- e.g. each entry in the jump table vector\n-   will get an appropriate label followed by a jump to the final target.\n-\n-   Reorg and the final jump pass can then optimize these branches and\n-   fill their delay slots.  We end up with smaller, more efficient code.\n-\n-   The jump instructions within the table are special; we must be able\n-   to identify them during assembly output (if the jumps don't get filled\n-   we need to emit a nop rather than nullifying the delay slot)).  We\n-   identify jumps in switch tables by using insns with the attribute\n-   type TYPE_BTABLE_BRANCH.\n-\n-   We also surround the jump table itself with BEGIN_BRTAB and END_BRTAB\n-   insns.  This serves two purposes, first it prevents jump.c from\n-   noticing that the last N entries in the table jump to the instruction\n-   immediately after the table and deleting the jumps.  Second, those\n-   insns mark where we should emit .begin_brtab and .end_brtab directives\n-   when using GAS (allows for better link time optimizations).  */\n+   We surround the jump table itself with BEGIN_BRTAB and END_BRTAB\n+   insns.  Those insns mark where we should emit .begin_brtab and\n+   .end_brtab directives when using GAS.  This allows for better link\n+   time optimizations.  */\n \n static void\n pa_reorg (void)\n@@ -8988,83 +8956,23 @@ pa_reorg (void)\n   if (pa_cpu < PROCESSOR_8000)\n     pa_combine_instructions ();\n \n-\n-  /* This is fairly cheap, so always run it if optimizing.  */\n-  if (optimize > 0 && !TARGET_BIG_SWITCH)\n-    {\n-      /* Find and explode all ADDR_VEC or ADDR_DIFF_VEC insns.  */\n-      for (insn = get_insns (); insn; insn = NEXT_INSN (insn))\n-\t{\n-\t  rtx pattern, tmp, location, label;\n-\t  unsigned int length, i;\n-\n-\t  /* Find an ADDR_VEC or ADDR_DIFF_VEC insn to explode.  */\n-\t  if (! JUMP_TABLE_DATA_P (insn))\n-\t    continue;\n-\n-\t  /* Emit marker for the beginning of the branch table.  */\n-\t  emit_insn_before (gen_begin_brtab (), insn);\n-\n-\t  pattern = PATTERN (insn);\n-\t  location = PREV_INSN (insn);\n-          length = XVECLEN (pattern, GET_CODE (pattern) == ADDR_DIFF_VEC);\n-\n-\t  for (i = 0; i < length; i++)\n-\t    {\n-\t      /* Emit a label before each jump to keep jump.c from\n-\t\t removing this code.  */\n-\t      tmp = gen_label_rtx ();\n-\t      LABEL_NUSES (tmp) = 1;\n-\t      emit_label_after (tmp, location);\n-\t      location = NEXT_INSN (location);\n-\n-\t      if (GET_CODE (pattern) == ADDR_VEC)\n-\t\tlabel = XEXP (XVECEXP (pattern, 0, i), 0);\n-\t      else\n-\t\tlabel = XEXP (XVECEXP (pattern, 1, i), 0);\n-\n-\t      tmp = gen_short_jump (label);\n-\n-\t      /* Emit the jump itself.  */\n-\t      tmp = emit_jump_insn_after (tmp, location);\n-\t      JUMP_LABEL (tmp) = label;\n-\t      LABEL_NUSES (label)++;\n-\t      location = NEXT_INSN (location);\n-\n-\t      /* Emit a BARRIER after the jump.  */\n-\t      emit_barrier_after (location);\n-\t      location = NEXT_INSN (location);\n-\t    }\n-\n-\t  /* Emit marker for the end of the branch table.  */\n-\t  emit_insn_before (gen_end_brtab (), location);\n-\t  location = NEXT_INSN (location);\n-\t  emit_barrier_after (location);\n-\n-\t  /* Delete the ADDR_VEC or ADDR_DIFF_VEC.  */\n-\t  delete_insn (insn);\n-\t}\n-    }\n-  else\n-    {\n-      /* Still need brtab marker insns.  FIXME: the presence of these\n-\t markers disables output of the branch table to readonly memory,\n-\t and any alignment directives that might be needed.  Possibly,\n-\t the begin_brtab insn should be output before the label for the\n-\t table.  This doesn't matter at the moment since the tables are\n-\t always output in the text section.  */\n-      for (insn = get_insns (); insn; insn = NEXT_INSN (insn))\n-\t{\n-\t  /* Find an ADDR_VEC insn.  */\n-\t  if (! JUMP_TABLE_DATA_P (insn))\n-\t    continue;\n-\n-\t  /* Now generate markers for the beginning and end of the\n-\t     branch table.  */\n-\t  emit_insn_before (gen_begin_brtab (), insn);\n-\t  emit_insn_after (gen_end_brtab (), insn);\n-\t}\n-    }\n+    /* Still need brtab marker insns.  FIXME: the presence of these\n+       markers disables output of the branch table to readonly memory,\n+       and any alignment directives that might be needed.  Possibly,\n+       the begin_brtab insn should be output before the label for the\n+       table.  This doesn't matter at the moment since the tables are\n+       always output in the text section.  */\n+    for (insn = get_insns (); insn; insn = NEXT_INSN (insn))\n+      {\n+\t/* Find an ADDR_VEC insn.  */\n+\tif (! JUMP_TABLE_DATA_P (insn))\n+\t  continue;\n+\n+\t/* Now generate markers for the beginning and end of the\n+\t   branch table.  */\n+\temit_insn_before (gen_begin_brtab (), insn);\n+\temit_insn_after (gen_end_brtab (), insn);\n+      }\n }\n \n /* The PA has a number of odd instructions which can perform multiple"}, {"sha": "f32fd4042dc7a91bddd301e4b9825bef806515bd", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 16, "deletions": 21, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33e6755738a59a47e0f2e436e01b72514043e8cb/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33e6755738a59a47e0f2e436e01b72514043e8cb/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=33e6755738a59a47e0f2e436e01b72514043e8cb", "patch": "@@ -114,7 +114,7 @@ extern unsigned long total_code_bytes;\n #define TARGET_HPUX_UNWIND_LIBRARY 0\n \n #ifndef TARGET_DEFAULT\n-#define TARGET_DEFAULT (MASK_GAS | MASK_JUMP_IN_DELAY | MASK_BIG_SWITCH)\n+#define TARGET_DEFAULT (MASK_GAS | MASK_JUMP_IN_DELAY)\n #endif\n \n #ifndef TARGET_CPU_DEFAULT\n@@ -984,11 +984,9 @@ do {\t\t\t\t\t\t\t\t\t     \\\n #define FUNCTION_NAME_P(NAME)  (*(NAME) == '@')\n \n /* Specify the machine mode that this machine uses for the index in the\n-   tablejump instruction.  For small tables, an element consists of a\n-   ia-relative branch and its delay slot.  When -mbig-switch is specified,\n-   we use a 32-bit absolute address for non-pic code, and a 32-bit offset\n-   for both 32 and 64-bit pic code.  */\n-#define CASE_VECTOR_MODE (TARGET_BIG_SWITCH ? SImode : DImode)\n+   tablejump instruction.  We use a 32-bit absolute address for non-pic code,\n+   and a 32-bit offset for 32 and 64-bit pic code.  */\n+#define CASE_VECTOR_MODE SImode\n \n /* Jump tables must be 32-bit aligned, no matter the size of the element.  */\n #define ADDR_VEC_ALIGN(ADDR_VEC) 2\n@@ -1165,13 +1163,16 @@ do {\t\t\t\t\t\t\t\t\t     \\\n   pa_output_ascii ((FILE), (P), (SIZE))\n \n /* Jump tables are always placed in the text section.  Technically, it\n-   is possible to put them in the readonly data section when -mbig-switch\n-   is specified.  This has the benefit of getting the table out of .text\n-   and reducing branch lengths as a result.  The downside is that an\n-   additional insn (addil) is needed to access the table when generating\n-   PIC code.  The address difference table also has to use 32-bit\n-   pc-relative relocations.  Currently, GAS does not support these\n-   relocations, although it is easily modified to do this operation.\n+   is possible to put them in the readonly data section.  This has the\n+   benefit of getting the table out of .text and reducing branch lengths\n+   as a result.\n+\n+   The downside is that an additional insn (addil) is needed to access\n+   the table when generating PIC code.  The address difference table\n+   also has to use 32-bit pc-relative relocations.  Currently, GAS does\n+   not support these relocations, although it is easily modified to do\n+   this operation.\n+\n    The table entries need to look like \"$L1+(.+8-$L0)-$PIC_pcrel$0\"\n    when using ELF GAS.  A simple difference can be used when using\n    SOM GAS or the HP assembler.  The final downside is GDB complains\n@@ -1182,20 +1183,14 @@ do {\t\t\t\t\t\t\t\t\t     \\\n /* This is how to output an element of a case-vector that is absolute.  */\n \n #define ASM_OUTPUT_ADDR_VEC_ELT(FILE, VALUE)  \\\n-  if (TARGET_BIG_SWITCH)\t\t\t\t\t\t\\\n-    fprintf (FILE, \"\\t.word L$%04d\\n\", VALUE);\t\t\t\t\\\n-  else\t\t\t\t\t\t\t\t\t\\\n-    fprintf (FILE, \"\\tb L$%04d\\n\\tnop\\n\", VALUE)\n+  fprintf (FILE, \"\\t.word L$%04d\\n\", VALUE)\n \n /* This is how to output an element of a case-vector that is relative. \n    Since we always place jump tables in the text section, the difference\n    is absolute and requires no relocation.  */\n \n #define ASM_OUTPUT_ADDR_DIFF_ELT(FILE, BODY, VALUE, REL)  \\\n-  if (TARGET_BIG_SWITCH)\t\t\t\t\t\t\\\n-    fprintf (FILE, \"\\t.word L$%04d-L$%04d\\n\", VALUE, REL);\t\t\\\n-  else\t\t\t\t\t\t\t\t\t\\\n-    fprintf (FILE, \"\\tb L$%04d\\n\\tnop\\n\", VALUE)\n+  fprintf (FILE, \"\\t.word L$%04d-L$%04d\\n\", VALUE, REL)\n \n /* This is how to output an assembler line that says to advance the\n    location counter to a multiple of 2**LOG bytes.  */"}, {"sha": "be07d2a229a0b371742628775dd5971274b4e68c", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 12, "deletions": 41, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33e6755738a59a47e0f2e436e01b72514043e8cb/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33e6755738a59a47e0f2e436e01b72514043e8cb/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=33e6755738a59a47e0f2e436e01b72514043e8cb", "patch": "@@ -123,7 +123,7 @@\n ;; type \"binary\" insns have two input operands (1,2) and one output (0)\n \n (define_attr \"type\"\n-  \"move,unary,binary,shift,nullshift,compare,load,store,uncond_branch,btable_branch,branch,cbranch,fbranch,call,sibcall,dyncall,fpload,fpstore,fpalu,fpcc,fpmulsgl,fpmuldbl,fpdivsgl,fpdivdbl,fpsqrtsgl,fpsqrtdbl,multi,milli,sh_func_adrs,parallel_branch,fpstore_load,store_fpload\"\n+  \"move,unary,binary,shift,nullshift,compare,load,store,uncond_branch,branch,cbranch,fbranch,call,sibcall,dyncall,fpload,fpstore,fpalu,fpcc,fpmulsgl,fpmuldbl,fpdivsgl,fpdivdbl,fpsqrtsgl,fpsqrtdbl,multi,milli,sh_func_adrs,parallel_branch,fpstore_load,store_fpload\"\n   (const_string \"binary\"))\n \n (define_attr \"pa_combine_type\"\n@@ -166,7 +166,7 @@\n ;; For conditional branches. Frame related instructions are not allowed\n ;; because they confuse the unwind support.\n (define_attr \"in_branch_delay\" \"false,true\"\n-  (if_then_else (and (eq_attr \"type\" \"!uncond_branch,btable_branch,branch,cbranch,fbranch,call,sibcall,dyncall,multi,milli,sh_func_adrs,parallel_branch\")\n+  (if_then_else (and (eq_attr \"type\" \"!uncond_branch,branch,cbranch,fbranch,call,sibcall,dyncall,multi,milli,sh_func_adrs,parallel_branch\")\n \t\t     (eq_attr \"length\" \"4\")\n \t\t     (not (match_test \"RTX_FRAME_RELATED_P (insn)\")))\n \t\t(const_string \"true\")\n@@ -175,7 +175,7 @@\n ;; Disallow instructions which use the FPU since they will tie up the FPU\n ;; even if the instruction is nullified.\n (define_attr \"in_nullified_branch_delay\" \"false,true\"\n-  (if_then_else (and (eq_attr \"type\" \"!uncond_branch,btable_branch,branch,cbranch,fbranch,call,sibcall,dyncall,multi,milli,sh_func_adrs,fpcc,fpalu,fpmulsgl,fpmuldbl,fpdivsgl,fpdivdbl,fpsqrtsgl,fpsqrtdbl,parallel_branch\")\n+  (if_then_else (and (eq_attr \"type\" \"!uncond_branch,branch,cbranch,fbranch,call,sibcall,dyncall,multi,milli,sh_func_adrs,fpcc,fpalu,fpmulsgl,fpmuldbl,fpdivsgl,fpdivdbl,fpsqrtsgl,fpsqrtdbl,parallel_branch\")\n \t\t     (eq_attr \"length\" \"4\")\n \t\t     (not (match_test \"RTX_FRAME_RELATED_P (insn)\")))\n \t\t(const_string \"true\")\n@@ -184,7 +184,7 @@\n ;; For calls and millicode calls.  Allow unconditional branches in the\n ;; delay slot.\n (define_attr \"in_call_delay\" \"false,true\"\n-  (cond [(and (eq_attr \"type\" \"!uncond_branch,btable_branch,branch,cbranch,fbranch,call,sibcall,dyncall,multi,milli,sh_func_adrs,parallel_branch\")\n+  (cond [(and (eq_attr \"type\" \"!uncond_branch,branch,cbranch,fbranch,call,sibcall,dyncall,multi,milli,sh_func_adrs,parallel_branch\")\n \t      (eq_attr \"length\" \"4\")\n \t      (not (match_test \"RTX_FRAME_RELATED_P (insn)\")))\n \t   (const_string \"true\")\n@@ -208,7 +208,7 @@\n   [(eq_attr \"in_call_delay\" \"true\") (nil) (nil)])\n \n ;; Return and other similar instructions.\n-(define_delay (eq_attr \"type\" \"btable_branch,branch,parallel_branch\")\n+(define_delay (eq_attr \"type\" \"branch,parallel_branch\")\n   [(eq_attr \"in_branch_delay\" \"true\") (nil) (nil)])\n \n ;; Floating point conditional branch delay slot description.\n@@ -657,15 +657,15 @@\n ;; to assume have zero latency.\n (define_insn_reservation \"Z3\" 0\n   (and\n-    (eq_attr \"type\" \"!load,fpload,store,fpstore,uncond_branch,btable_branch,branch,cbranch,fbranch,call,sibcall,dyncall,multi,milli,sh_func_adrs,parallel_branch,fpcc,fpalu,fpmulsgl,fpmuldbl,fpsqrtsgl,fpsqrtdbl,fpdivsgl,fpdivdbl,fpstore_load,store_fpload\")\n+    (eq_attr \"type\" \"!load,fpload,store,fpstore,uncond_branch,branch,cbranch,fbranch,call,sibcall,dyncall,multi,milli,sh_func_adrs,parallel_branch,fpcc,fpalu,fpmulsgl,fpmuldbl,fpsqrtsgl,fpsqrtdbl,fpdivsgl,fpdivdbl,fpstore_load,store_fpload\")\n     (eq_attr \"cpu\" \"8000\"))\n   \"inm_8000,rnm_8000\")\n \n ;; Branches use both slots in the non-memory issue and\n ;; retirement unit.\n (define_insn_reservation \"Z4\" 0\n   (and\n-    (eq_attr \"type\" \"uncond_branch,btable_branch,branch,cbranch,fbranch,call,sibcall,dyncall,multi,milli,sh_func_adrs,parallel_branch\")\n+    (eq_attr \"type\" \"uncond_branch,branch,cbranch,fbranch,call,sibcall,dyncall,multi,milli,sh_func_adrs,parallel_branch\")\n     (eq_attr \"cpu\" \"8000\"))\n   \"inm0_8000+inm1_8000,rnm0_8000+rnm1_8000\")\n \n@@ -6959,16 +6959,6 @@\n   [(set_attr \"type\" \"branch\")\n    (set_attr \"length\" \"4\")])\n \n-;;; This jump is used in branch tables where the insn length is fixed.\n-;;; The length of this insn is adjusted if the delay slot is not filled.\n-(define_insn \"short_jump\"\n-  [(set (pc) (label_ref (match_operand 0 \"\" \"\")))\n-   (const_int 0)]\n-  \"\"\n-  \"b%* %l0%#\"\n-  [(set_attr \"type\" \"btable_branch\")\n-   (set_attr \"length\" \"4\")])\n-\n ;; Subroutines of \"casesi\".\n ;; operand 0 is index\n ;; operand 1 is the minimum bound\n@@ -7028,34 +7018,15 @@\n       operands[0] = index;\n     }\n \n-  if (TARGET_BIG_SWITCH)\n-    {\n-      if (TARGET_64BIT)\n-\temit_jump_insn (gen_casesi64p (operands[0], operands[3]));\n-      else if (flag_pic)\n-\temit_jump_insn (gen_casesi32p (operands[0], operands[3]));\n-      else\n-\temit_jump_insn (gen_casesi32 (operands[0], operands[3]));\n-    }\n+  if (TARGET_64BIT)\n+    emit_jump_insn (gen_casesi64p (operands[0], operands[3]));\n+  else if (flag_pic)\n+    emit_jump_insn (gen_casesi32p (operands[0], operands[3]));\n   else\n-    emit_jump_insn (gen_casesi0 (operands[0], operands[3]));\n+    emit_jump_insn (gen_casesi32 (operands[0], operands[3]));\n   DONE;\n }\")\n \n-;;; The rtl for this pattern doesn't accurately describe what the insn\n-;;; actually does, particularly when case-vector elements are exploded\n-;;; in pa_reorg.  However, the initial SET in these patterns must show\n-;;; the connection of the insn to the following jump table.\n-(define_insn \"casesi0\"\n-  [(set (pc) (mem:SI (plus:SI\n-\t\t       (mult:SI (match_operand:SI 0 \"register_operand\" \"r\")\n-\t\t\t\t(const_int 4))\n-\t\t       (label_ref (match_operand 1 \"\" \"\")))))]\n-  \"\"\n-  \"blr,n %0,%%r0\\;nop\"\n-  [(set_attr \"type\" \"multi\")\n-   (set_attr \"length\" \"8\")])\n-\n ;;; 32-bit code, absolute branch table.\n (define_insn \"casesi32\"\n   [(set (pc) (mem:SI (plus:SI"}, {"sha": "50198028101b4ed9119bcdea3090616e33139732", "filename": "gcc/config/pa/pa.opt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33e6755738a59a47e0f2e436e01b72514043e8cb/gcc%2Fconfig%2Fpa%2Fpa.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33e6755738a59a47e0f2e436e01b72514043e8cb/gcc%2Fconfig%2Fpa%2Fpa.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.opt?ref=33e6755738a59a47e0f2e436e01b72514043e8cb", "patch": "@@ -38,8 +38,8 @@ Target RejectNegative\n Generate PA2.0 code (requires binutils 2.10 or later)\n \n mbig-switch\n-Target Report Mask(BIG_SWITCH)\n-Generate code for huge switch statements\n+Target Ignore\n+Does nothing.  Preserved for backward compatibility.\n \n mdisable-fpregs\n Target Report Mask(DISABLE_FPREGS)"}, {"sha": "49ed64fc6d4ed41b4abdd77dfc0668392a393a7e", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33e6755738a59a47e0f2e436e01b72514043e8cb/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33e6755738a59a47e0f2e436e01b72514043e8cb/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=33e6755738a59a47e0f2e436e01b72514043e8cb", "patch": "@@ -618,11 +618,11 @@ Objective-C and Objective-C++ Dialects}.\n \n @emph{HPPA Options}\n @gccoptlist{-march=@var{architecture-type} @gol\n--mbig-switch  -mdisable-fpregs  -mdisable-indexing @gol\n+-mdisable-fpregs  -mdisable-indexing @gol\n -mfast-indirect-calls  -mgas  -mgnu-ld   -mhp-ld @gol\n -mfixed-range=@var{register-range} @gol\n -mjump-in-delay -mlinker-opt -mlong-calls @gol\n--mlong-load-store  -mno-big-switch  -mno-disable-fpregs @gol\n+-mlong-load-store  -mno-disable-fpregs @gol\n -mno-disable-indexing  -mno-fast-indirect-calls  -mno-gas @gol\n -mno-jump-in-delay  -mno-long-load-store @gol\n -mno-portable-runtime  -mno-soft-float @gol\n@@ -13510,12 +13510,6 @@ other way around.\n @opindex mpa-risc-2-0\n Synonyms for @option{-march=1.0}, @option{-march=1.1}, and @option{-march=2.0} respectively.\n \n-@item -mbig-switch\n-@opindex mbig-switch\n-Generate code suitable for big switch tables.  Use this option only if\n-the assembler/linker complain about out-of-range branches within a switch\n-table.\n-\n @item -mjump-in-delay\n @opindex mjump-in-delay\n Fill delay slots of function calls with unconditional jump instructions"}]}