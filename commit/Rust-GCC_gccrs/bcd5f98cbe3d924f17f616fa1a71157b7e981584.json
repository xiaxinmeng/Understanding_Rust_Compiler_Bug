{"sha": "bcd5f98cbe3d924f17f616fa1a71157b7e981584", "node_id": "C_kwDOANBUbNoAKGJjZDVmOThjYmUzZDkyNGYxN2Y2MTZmYTFhNzExNTdiN2U5ODE1ODQ", "commit": {"author": {"name": "Philipp Tomsich", "email": "philipp.tomsich@vrull.eu", "date": "2022-11-14T23:50:44Z"}, "committer": {"name": "Philipp Tomsich", "email": "philipp.tomsich@vrull.eu", "date": "2022-11-14T23:50:44Z"}, "message": "Revert \"RISC-V: Add instruction fusion (for ventana-vt1)\"\n\nThis reverts commit 991cfe5b30cb06611aa03d8c67860552785faba8.", "tree": {"sha": "ef204fb45f71e9b2395d948fe4b1d24995d33ad8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ef204fb45f71e9b2395d948fe4b1d24995d33ad8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bcd5f98cbe3d924f17f616fa1a71157b7e981584", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcd5f98cbe3d924f17f616fa1a71157b7e981584", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bcd5f98cbe3d924f17f616fa1a71157b7e981584", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcd5f98cbe3d924f17f616fa1a71157b7e981584/comments", "author": {"login": "ptomsich", "id": 14983582, "node_id": "MDQ6VXNlcjE0OTgzNTgy", "avatar_url": "https://avatars.githubusercontent.com/u/14983582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptomsich", "html_url": "https://github.com/ptomsich", "followers_url": "https://api.github.com/users/ptomsich/followers", "following_url": "https://api.github.com/users/ptomsich/following{/other_user}", "gists_url": "https://api.github.com/users/ptomsich/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptomsich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptomsich/subscriptions", "organizations_url": "https://api.github.com/users/ptomsich/orgs", "repos_url": "https://api.github.com/users/ptomsich/repos", "events_url": "https://api.github.com/users/ptomsich/events{/privacy}", "received_events_url": "https://api.github.com/users/ptomsich/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ptomsich", "id": 14983582, "node_id": "MDQ6VXNlcjE0OTgzNTgy", "avatar_url": "https://avatars.githubusercontent.com/u/14983582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptomsich", "html_url": "https://github.com/ptomsich", "followers_url": "https://api.github.com/users/ptomsich/followers", "following_url": "https://api.github.com/users/ptomsich/following{/other_user}", "gists_url": "https://api.github.com/users/ptomsich/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptomsich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptomsich/subscriptions", "organizations_url": "https://api.github.com/users/ptomsich/orgs", "repos_url": "https://api.github.com/users/ptomsich/repos", "events_url": "https://api.github.com/users/ptomsich/events{/privacy}", "received_events_url": "https://api.github.com/users/ptomsich/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c41bbfcaf9d6ef5b57a7e89bba70b861c08a686b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c41bbfcaf9d6ef5b57a7e89bba70b861c08a686b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c41bbfcaf9d6ef5b57a7e89bba70b861c08a686b"}], "stats": {"total": 220, "additions": 0, "deletions": 220}, "files": [{"sha": "cceddd7053387e78dea13f77cf32be79162a655c", "filename": "gcc/config/riscv/riscv.cc", "status": "modified", "additions": 0, "deletions": 220, "changes": 220, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcd5f98cbe3d924f17f616fa1a71157b7e981584/gcc%2Fconfig%2Friscv%2Friscv.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcd5f98cbe3d924f17f616fa1a71157b7e981584/gcc%2Fconfig%2Friscv%2Friscv.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.cc?ref=bcd5f98cbe3d924f17f616fa1a71157b7e981584", "patch": "@@ -215,19 +215,6 @@ struct riscv_integer_op {\n    The worst case is LUI, ADDI, SLLI, ADDI, SLLI, ADDI, SLLI, ADDI.  */\n #define RISCV_MAX_INTEGER_OPS 8\n \n-enum riscv_fusion_pairs\n-{\n-  RISCV_FUSE_NOTHING = 0,\n-  RISCV_FUSE_ZEXTW = (1 << 0),\n-  RISCV_FUSE_ZEXTH = (1 << 1),\n-  RISCV_FUSE_ZEXTWS = (1 << 2),\n-  RISCV_FUSE_LDINDEXED = (1 << 3),\n-  RISCV_FUSE_LUI_ADDI = (1 << 4),\n-  RISCV_FUSE_AUIPC_ADDI = (1 << 5),\n-  RISCV_FUSE_LUI_LD = (1 << 6),\n-  RISCV_FUSE_AUIPC_LD = (1 << 7),\n-};\n-\n /* Costs of various operations on the different architectures.  */\n \n struct riscv_tune_param\n@@ -242,7 +229,6 @@ struct riscv_tune_param\n   unsigned short memory_cost;\n   unsigned short fmv_cost;\n   bool slow_unaligned_access;\n-  unsigned int fusible_ops;\n };\n \n /* Information about one micro-arch we know about.  */\n@@ -330,7 +316,6 @@ static const struct riscv_tune_param rocket_tune_info = {\n   5,\t\t\t\t\t\t/* memory_cost */\n   8,\t\t\t\t\t\t/* fmv_cost */\n   true,\t\t\t\t\t\t/* slow_unaligned_access */\n-  RISCV_FUSE_NOTHING,                           /* fusible_ops */\n };\n \n /* Costs to use when optimizing for Sifive 7 Series.  */\n@@ -345,7 +330,6 @@ static const struct riscv_tune_param sifive_7_tune_info = {\n   3,\t\t\t\t\t\t/* memory_cost */\n   8,\t\t\t\t\t\t/* fmv_cost */\n   true,\t\t\t\t\t\t/* slow_unaligned_access */\n-  RISCV_FUSE_NOTHING,                           /* fusible_ops */\n };\n \n /* Costs to use when optimizing for T-HEAD c906.  */\n@@ -360,7 +344,6 @@ static const struct riscv_tune_param thead_c906_tune_info = {\n   5,            /* memory_cost */\n   8,\t\t/* fmv_cost */\n   false,            /* slow_unaligned_access */\n-  RISCV_FUSE_NOTHING,                           /* fusible_ops */\n };\n \n /* Costs to use when optimizing for size.  */\n@@ -375,7 +358,6 @@ static const struct riscv_tune_param optimize_size_tune_info = {\n   2,\t\t\t\t\t\t/* memory_cost */\n   8,\t\t\t\t\t\t/* fmv_cost */\n   false,\t\t\t\t\t/* slow_unaligned_access */\n-  RISCV_FUSE_NOTHING,                           /* fusible_ops */\n };\n \n /* Costs to use when optimizing for Ventana Micro VT1.  */\n@@ -390,10 +372,6 @@ static const struct riscv_tune_param ventana_vt1_tune_info = {\n   5,\t\t\t\t\t\t/* memory_cost */\n   8,\t\t\t\t\t\t/* fmv_cost */\n   false,\t\t\t\t\t/* slow_unaligned_access */\n-  ( RISCV_FUSE_ZEXTW | RISCV_FUSE_ZEXTH |       /* fusible_ops */\n-    RISCV_FUSE_ZEXTWS | RISCV_FUSE_LDINDEXED |\n-    RISCV_FUSE_LUI_ADDI | RISCV_FUSE_AUIPC_ADDI |\n-    RISCV_FUSE_LUI_LD | RISCV_FUSE_AUIPC_LD )\n };\n \n static tree riscv_handle_fndecl_attribute (tree *, tree, tree, int, bool *);\n@@ -5633,200 +5611,6 @@ riscv_issue_rate (void)\n   return tune_param->issue_rate;\n }\n \n-/* Implement TARGET_SCHED_MACRO_FUSION_P.  Return true if target supports\n-   instruction fusion of some sort.  */\n-\n-static bool\n-riscv_macro_fusion_p (void)\n-{\n-  return tune_param->fusible_ops != RISCV_FUSE_NOTHING;\n-}\n-\n-/* Return true iff the instruction fusion described by OP is enabled.  */\n-\n-static bool\n-riscv_fusion_enabled_p(enum riscv_fusion_pairs op)\n-{\n-  return tune_param->fusible_ops & op;\n-}\n-\n-/* Implement TARGET_SCHED_MACRO_FUSION_PAIR_P.  Return true if PREV and CURR\n-   should be kept together during scheduling.  */\n-\n-static bool\n-riscv_macro_fusion_pair_p (rtx_insn *prev, rtx_insn *curr)\n-{\n-  rtx prev_set = single_set (prev);\n-  rtx curr_set = single_set (curr);\n-  /* prev and curr are simple SET insns i.e. no flag setting or branching.  */\n-  bool simple_sets_p = prev_set && curr_set && !any_condjump_p (curr);\n-\n-  if (!riscv_macro_fusion_p ())\n-    return false;\n-\n-  if (simple_sets_p\n-      && (riscv_fusion_enabled_p (RISCV_FUSE_ZEXTW)\n-\t  || riscv_fusion_enabled_p (RISCV_FUSE_ZEXTH)))\n-    {\n-      /* We are trying to match the following:\n-\t   prev (slli) == (set (reg:DI rD)\n-\t\t\t       (ashift:DI (reg:DI rS) (const_int 32)))\n-\t   curr (slri) == (set (reg:DI rD)\n-\t\t\t       (lshiftrt:DI (reg:DI rD) (const_int <shift>)))\n-\t with <shift> being either 32 for FUSE_ZEXTW, or\n-\t\t\t less than 32 for FUSE_ZEXTWS. */\n-\n-      if (GET_CODE (SET_SRC (prev_set)) == ASHIFT\n-\t  && GET_CODE (SET_SRC (curr_set)) == LSHIFTRT\n-\t  && REG_P (SET_DEST (prev_set))\n-\t  && REG_P (SET_DEST (curr_set))\n-\t  && REGNO (SET_DEST (prev_set)) == REGNO (SET_DEST (curr_set))\n-\t  && REGNO (XEXP (SET_SRC (curr_set), 0)) == REGNO (SET_DEST (curr_set))\n-\t  && CONST_INT_P (XEXP (SET_SRC (prev_set), 1))\n-\t  && CONST_INT_P (XEXP (SET_SRC (curr_set), 1))\n-\t  && INTVAL (XEXP (SET_SRC (prev_set), 1)) == 32\n-\t  && ((INTVAL (XEXP (SET_SRC (curr_set), 1)) == 32\n-\t       && riscv_fusion_enabled_p (RISCV_FUSE_ZEXTW))\n-\t      || (INTVAL (XEXP (SET_SRC (curr_set), 1)) < 32\n-\t\t  && riscv_fusion_enabled_p (RISCV_FUSE_ZEXTWS))))\n-\treturn true;\n-    }\n-\n-  if (simple_sets_p && riscv_fusion_enabled_p (RISCV_FUSE_ZEXTH))\n-    {\n-      /* We are trying to match the following:\n-\t   prev (slli) == (set (reg:DI rD)\n-\t\t\t       (ashift:DI (reg:DI rS) (const_int 48)))\n-\t   curr (slri) == (set (reg:DI rD)\n-\t\t\t       (lshiftrt:DI (reg:DI rD) (const_int 48))) */\n-\n-      if (GET_CODE (SET_SRC (prev_set)) == ASHIFT\n-\t  && GET_CODE (SET_SRC (curr_set)) == LSHIFTRT\n-\t  && REG_P (SET_DEST (prev_set))\n-\t  && REG_P (SET_DEST (curr_set))\n-\t  && REGNO (SET_DEST (prev_set)) == REGNO (SET_DEST (curr_set))\n-\t  && REGNO (XEXP (SET_SRC (curr_set), 0)) == REGNO (SET_DEST (curr_set))\n-\t  && CONST_INT_P (XEXP (SET_SRC (prev_set), 1))\n-\t  && CONST_INT_P (XEXP (SET_SRC (curr_set), 1))\n-\t  && INTVAL (XEXP (SET_SRC (prev_set), 1)) == 48\n-\t  && INTVAL (XEXP (SET_SRC (curr_set), 1)) == 48)\n-\treturn true;\n-    }\n-\n-  if (simple_sets_p && riscv_fusion_enabled_p (RISCV_FUSE_LDINDEXED))\n-    {\n-      /* We are trying to match the following:\n-\t   prev (add) == (set (reg:DI rD)\n-\t\t\t      (plus:DI (reg:DI rS1) (reg:DI rS2))\n-\t   curr (ld)  == (set (reg:DI rD)\n-\t\t\t      (mem:DI (reg:DI rD))) */\n-\n-      if (MEM_P (SET_SRC (curr_set))\n-\t  && REG_P (XEXP (SET_SRC (curr_set), 0))\n-\t  && REGNO (XEXP (SET_SRC (curr_set), 0)) == REGNO (SET_DEST (prev_set))\n-\t  && GET_CODE (SET_SRC (prev_set)) == PLUS\n-\t  && REG_P (XEXP (SET_SRC (prev_set), 0))\n-\t  && REG_P (XEXP (SET_SRC (prev_set), 1)))\n-\treturn true;\n-\n-      /* We are trying to match the following:\n-\t   prev (add) == (set (reg:DI rD)\n-\t\t\t      (plus:DI (reg:DI rS1) (reg:DI rS2)))\n-\t   curr (lw)  == (set (any_extend:DI (mem:SUBX (reg:DI rD)))) */\n-\n-      if ((GET_CODE (SET_SRC (curr_set)) == SIGN_EXTEND\n-\t   || (GET_CODE (SET_SRC (curr_set)) == ZERO_EXTEND))\n-\t  && MEM_P (XEXP (SET_SRC (curr_set), 0))\n-\t  && REG_P (XEXP (XEXP (SET_SRC (curr_set), 0), 0))\n-\t  && REGNO (XEXP (XEXP (SET_SRC (curr_set), 0), 0)) == REGNO (SET_DEST (prev_set))\n-\t  && GET_CODE (SET_SRC (prev_set)) == PLUS\n-\t  && REG_P (XEXP (SET_SRC (prev_set), 0))\n-\t  && REG_P (XEXP (SET_SRC (prev_set), 1)))\n-\treturn true;\n-    }\n-\n-  if (simple_sets_p && riscv_fusion_enabled_p (RISCV_FUSE_LUI_ADDI))\n-    {\n-      /* We are trying to match the following:\n-\t   prev (lui)  == (set (reg:DI rD) (const_int UPPER_IMM_20))\n-\t   curr (addi) == (set (reg:DI rD)\n-\t\t\t       (plus:DI (reg:DI rD) (const_int IMM12))) */\n-\n-      if ((GET_CODE (SET_SRC (curr_set)) == LO_SUM\n-\t   || (GET_CODE (SET_SRC (curr_set)) == PLUS\n-\t       && CONST_INT_P (XEXP (SET_SRC (curr_set), 1))\n-\t       && SMALL_OPERAND (INTVAL (XEXP (SET_SRC (curr_set), 1)))))\n-\t  && (GET_CODE (SET_SRC (prev_set)) == HIGH\n-\t      || (CONST_INT_P (SET_SRC (prev_set))\n-\t\t  && LUI_OPERAND (INTVAL (SET_SRC (prev_set))))))\n-\treturn true;\n-    }\n-\n-  if (simple_sets_p && riscv_fusion_enabled_p (RISCV_FUSE_AUIPC_ADDI))\n-    {\n-      /* We are trying to match the following:\n-\t   prev (auipc) == (set (reg:DI rD) (unspec:DI [...] UNSPEC_AUIPC))\n-\t   curr (addi)  == (set (reg:DI rD)\n-\t\t\t\t(plus:DI (reg:DI rD) (const_int IMM12)))\n-\t and\n-\t   prev (auipc) == (set (reg:DI rD) (unspec:DI [...] UNSPEC_AUIPC))\n-\t   curr (addi)  == (set (reg:DI rD)\n-\t\t\t\t(lo_sum:DI (reg:DI rD) (const_int IMM12))) */\n-\n-      if (GET_CODE (SET_SRC (prev_set)) == UNSPEC\n-\t  && XINT (prev_set, 1) == UNSPEC_AUIPC\n-\t  && (GET_CODE (SET_SRC (curr_set)) == LO_SUM\n-\t      || (GET_CODE (SET_SRC (curr_set)) == PLUS\n-\t\t  && SMALL_OPERAND (INTVAL (XEXP (SET_SRC (curr_set), 1))))))\n-\n-\treturn true;\n-    }\n-\n-  if (simple_sets_p && riscv_fusion_enabled_p (RISCV_FUSE_LUI_LD))\n-    {\n-      /* We are trying to match the following:\n-\t   prev (lui)  == (set (reg:DI rD) (const_int UPPER_IMM_20))\n-\t   curr (ld)  == (set (reg:DI rD)\n-\t\t\t      (mem:DI (plus:DI (reg:DI rD) (const_int IMM12)))) */\n-\n-      if (CONST_INT_P (SET_SRC (prev_set))\n-\t  && LUI_OPERAND (INTVAL (SET_SRC (prev_set)))\n-\t  && MEM_P (SET_SRC (curr_set))\n-\t  && GET_CODE (XEXP (SET_SRC (curr_set), 0)) == PLUS)\n-\treturn true;\n-\n-      if (GET_CODE (SET_SRC (prev_set)) == HIGH\n-\t  && MEM_P (SET_SRC (curr_set))\n-\t  && GET_CODE (XEXP (SET_SRC (curr_set), 0)) == LO_SUM\n-\t  && REGNO (SET_DEST (prev_set)) == REGNO (XEXP (XEXP (SET_SRC (curr_set), 0), 0)))\n-\treturn true;\n-\n-      if (GET_CODE (SET_SRC (prev_set)) == HIGH\n-\t  && (GET_CODE (SET_SRC (curr_set)) == SIGN_EXTEND\n-\t      || GET_CODE (SET_SRC (curr_set)) == ZERO_EXTEND)\n-\t  && MEM_P (XEXP (SET_SRC (curr_set), 0))\n-\t  && (GET_CODE (XEXP (XEXP (SET_SRC (curr_set), 0), 0)) == LO_SUM\n-\t      && REGNO (SET_DEST (prev_set)) == REGNO (XEXP (XEXP (XEXP (SET_SRC (curr_set), 0), 0), 0))))\n-\treturn true;\n-    }\n-\n-  if (simple_sets_p && riscv_fusion_enabled_p (RISCV_FUSE_AUIPC_LD))\n-    {\n-      /* We are trying to match the following:\n-\t   prev (auipc) == (set (reg:DI rD) (unspec:DI [...] UNSPEC_AUIPC))\n-\t   curr (ld)  == (set (reg:DI rD)\n-\t\t\t      (mem:DI (plus:DI (reg:DI rD) (const_int IMM12)))) */\n-\n-      if (GET_CODE (SET_SRC (prev_set)) == UNSPEC\n-\t  && XINT (prev_set, 1) == UNSPEC_AUIPC\n-\t  && MEM_P (SET_SRC (curr_set))\n-\t  && GET_CODE (XEXP (SET_SRC (curr_set), 0)) == PLUS)\n-\treturn true;\n-    }\n-\n-  return false;\n-}\n-\n /* Auxiliary function to emit RISC-V ELF attribute. */\n static void\n riscv_emit_attribute ()\n@@ -6849,10 +6633,6 @@ riscv_dwarf_poly_indeterminate_value (unsigned int i, unsigned int *factor,\n \n #undef TARGET_SCHED_ISSUE_RATE\n #define TARGET_SCHED_ISSUE_RATE riscv_issue_rate\n-#undef TARGET_SCHED_MACRO_FUSION_P\n-#define TARGET_SCHED_MACRO_FUSION_P riscv_macro_fusion_p\n-#undef TARGET_SCHED_MACRO_FUSION_PAIR_P\n-#define TARGET_SCHED_MACRO_FUSION_PAIR_P riscv_macro_fusion_pair_p\n \n #undef TARGET_FUNCTION_OK_FOR_SIBCALL\n #define TARGET_FUNCTION_OK_FOR_SIBCALL riscv_function_ok_for_sibcall"}]}