{"sha": "fe11b51bd316141618b41292e74b4439b02860ac", "node_id": "C_kwDOANBUbNoAKGZlMTFiNTFiZDMxNjE0MTYxOGI0MTI5MmU3NGI0NDM5YjAyODYwYWM", "commit": {"author": {"name": "Pierre-Emmanuel Patry", "email": "pierre-emmanuel.patry@embecosm.com", "date": "2023-03-30T14:35:53Z"}, "committer": {"name": "CohenArthur", "email": "arthur.cohen@embecosm.com", "date": "2023-04-05T08:20:48Z"}, "message": "expand: Add inner attribute expansion stubs\n\nAdd function stubs for inner attribute proc macros expansion.\n\ngcc/rust/ChangeLog:\n\n\t* expand/rust-expand-visitor.cc (ExpandVisitor::visit): Add call\n\tto inner attribute stub.\n\t(ExpandVisitor::expand_inner_attribute): Expand one single\n\tattribute.\n\t(ExpandVisitor::visit_inner_using_attrs): Expand a given item\n\tusing a vector of attributes.\n\t(ExpandVisitor::visit_inner_attrs): Visit inner attributes of a\n\tgiven item.\n\t* expand/rust-expand-visitor.h: Add function prototypes.\n\nSigned-off-by: Pierre-Emmanuel Patry <pierre-emmanuel.patry@embecosm.com>", "tree": {"sha": "81ef0a1177e9fbb6625040b4a09615e6ee378d47", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/81ef0a1177e9fbb6625040b4a09615e6ee378d47"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fe11b51bd316141618b41292e74b4439b02860ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe11b51bd316141618b41292e74b4439b02860ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe11b51bd316141618b41292e74b4439b02860ac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe11b51bd316141618b41292e74b4439b02860ac/comments", "author": {"login": "P-E-P", "id": 32375388, "node_id": "MDQ6VXNlcjMyMzc1Mzg4", "avatar_url": "https://avatars.githubusercontent.com/u/32375388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/P-E-P", "html_url": "https://github.com/P-E-P", "followers_url": "https://api.github.com/users/P-E-P/followers", "following_url": "https://api.github.com/users/P-E-P/following{/other_user}", "gists_url": "https://api.github.com/users/P-E-P/gists{/gist_id}", "starred_url": "https://api.github.com/users/P-E-P/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/P-E-P/subscriptions", "organizations_url": "https://api.github.com/users/P-E-P/orgs", "repos_url": "https://api.github.com/users/P-E-P/repos", "events_url": "https://api.github.com/users/P-E-P/events{/privacy}", "received_events_url": "https://api.github.com/users/P-E-P/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b109e685aae985e8feef0bd14728ba580c731d2f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b109e685aae985e8feef0bd14728ba580c731d2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b109e685aae985e8feef0bd14728ba580c731d2f"}], "stats": {"total": 49, "additions": 47, "deletions": 2}, "files": [{"sha": "b2d1cf3e0c3d7bfc013b060792c7fa396d1ed901", "filename": "gcc/rust/expand/rust-expand-visitor.cc", "status": "modified", "additions": 39, "deletions": 2, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe11b51bd316141618b41292e74b4439b02860ac/gcc%2Frust%2Fexpand%2Frust-expand-visitor.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe11b51bd316141618b41292e74b4439b02860ac/gcc%2Frust%2Fexpand%2Frust-expand-visitor.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-expand-visitor.cc?ref=fe11b51bd316141618b41292e74b4439b02860ac", "patch": "@@ -762,8 +762,11 @@ void\n ExpandVisitor::visit (AST::Module &module)\n {\n   if (module.get_kind () == AST::Module::ModuleKind::LOADED)\n-    for (auto &item : module.get_items ())\n-      visit (item);\n+    {\n+      visit_inner_attrs (module);\n+      for (auto &item : module.get_items ())\n+\tvisit (item);\n+    }\n }\n \n void\n@@ -789,6 +792,8 @@ ExpandVisitor::visit (AST::UseDeclaration &use_decl)\n void\n ExpandVisitor::visit (AST::Function &function)\n {\n+  visit_inner_using_attrs (function,\n+\t\t\t   function.get_definition ()->get_inner_attrs ());\n   for (auto &param : function.get_generic_params ())\n     visit (param);\n \n@@ -954,6 +959,7 @@ ExpandVisitor::visit (AST::Trait &trait)\n void\n ExpandVisitor::visit (AST::InherentImpl &impl)\n {\n+  visit_inner_attrs (impl);\n   // just expand sub-stuff - can't actually strip generic params themselves\n   for (auto &generic : impl.get_generic_params ())\n     visit (generic);\n@@ -978,6 +984,7 @@ ExpandVisitor::visit (AST::InherentImpl &impl)\n void\n ExpandVisitor::visit (AST::TraitImpl &impl)\n {\n+  visit_inner_attrs (impl);\n   // just expand sub-stuff - can't actually strip generic params themselves\n   for (auto &param : impl.get_generic_params ())\n     visit (param);\n@@ -1035,6 +1042,7 @@ ExpandVisitor::visit (AST::ExternalFunctionItem &item)\n void\n ExpandVisitor::visit (AST::ExternBlock &block)\n {\n+  visit_inner_attrs (block);\n   std::function<std::unique_ptr<AST::ExternalItem> (AST::SingleASTNode)>\n     extractor\n     = [] (AST::SingleASTNode node) { return node.take_external_item (); };\n@@ -1341,6 +1349,35 @@ ExpandVisitor::visit (AST::BareFunctionType &type)\n     visit (type.get_return_type ());\n }\n \n+template <typename T>\n+void\n+ExpandVisitor::expand_inner_attribute (T &item, AST::SimplePath &path)\n+{\n+  // TODO: Warn about instability ?\n+  // FIXME: Implement expansion for that particular path\n+}\n+\n+template <typename T>\n+void\n+ExpandVisitor::visit_inner_using_attrs (T &item,\n+\t\t\t\t\tstd::vector<AST::Attribute> &attrs)\n+{\n+  for (auto it = attrs.begin (); it != attrs.end (); /* erase => No increment*/)\n+    {\n+      auto current = *it;\n+\n+      it = attrs.erase (it);\n+      expand_inner_attribute (item, current.get_path ());\n+    }\n+}\n+\n+template <typename T>\n+void\n+ExpandVisitor::visit_inner_attrs (T &item)\n+{\n+  visit_inner_using_attrs (item, item.get_inner_attrs ());\n+}\n+\n template <typename T>\n void\n ExpandVisitor::expand_derive (const T &item,"}, {"sha": "66dc1870628c4cefa9788756425fe0df6239052e", "filename": "gcc/rust/expand/rust-expand-visitor.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe11b51bd316141618b41292e74b4439b02860ac/gcc%2Frust%2Fexpand%2Frust-expand-visitor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe11b51bd316141618b41292e74b4439b02860ac/gcc%2Frust%2Fexpand%2Frust-expand-visitor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-expand-visitor.h?ref=fe11b51bd316141618b41292e74b4439b02860ac", "patch": "@@ -313,6 +313,14 @@ class ExpandVisitor : public AST::ASTVisitor\n   void visit (AST::InferredType &) override;\n   void visit (AST::BareFunctionType &type) override;\n \n+  template <typename T>\n+  void expand_inner_attribute (T &item, AST::SimplePath &Path);\n+\n+  template <typename T>\n+  void visit_inner_using_attrs (T &item, std::vector<AST::Attribute> &attrs);\n+\n+  template <typename T> void visit_inner_attrs (T &item);\n+\n   bool is_derive (AST::Attribute &attr);\n \n   template <typename T>"}]}