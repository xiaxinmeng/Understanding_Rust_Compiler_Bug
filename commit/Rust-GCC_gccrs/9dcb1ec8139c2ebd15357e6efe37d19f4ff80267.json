{"sha": "9dcb1ec8139c2ebd15357e6efe37d19f4ff80267", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWRjYjFlYzgxMzljMmViZDE1MzU3ZTZlZmUzN2QxOWY0ZmY4MDI2Nw==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2002-11-01T12:03:40Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2002-11-01T12:03:40Z"}, "message": "ByteOrder.java: New file.\n\n2002-11-01  Michael Koch  <konqueror@gmx.de>\n\n\t* java/nio/ByteOrder.java: New file.\n\t* java/nio/channels/DatagramChannel.java:\n\t(DatagramChannel): New constructor.\n\t* java/nio/channels/Pipe.java: New file.\n\t* java/nio/channels/SelectableChannel.java: New file.\n\t* java/nio/channels/SelectionKey.java: New file.\n\t* java/nio/channels/Selector.java: New file.\n\t* java/nio/channels/ServerSocketChannel.java\n\t(ServerSocketChannel): New constructor.\n\t* java/nio/channels/SocketChannel.java\n\t(SocketChannel): New constructor.\n\t* java/nio/channels/Pipe.java: New file.\n\t* java/nio/channels/spi/AbstractChannel.java: New file.\n\t* java/nio/channels/spi/AbstractInterruptibleChannel.java: New file.\n\t* java/nio/channels/spi/AbstractSelectableChannel.java:\n\tLicense added\n\t(AbstractSelectableChannel): New stubbed method.\n\t* java/nio/channels/spi/AbstractSelectionKey.java: New file.\n\t* java/nio/channels/spi/AbstractSelector.java: New file.\n\t* java/nio/channels/spi/SelectorProvider.java: New file.\n\t* java/nio/charset/Charset.java: New file.\n\t* java/nio/charset/CoderMalfunctionError.java: New file.\n\t* java/nio/charset/CodingErrorAction.java: New file.\n\t* java/nio/charset/spi/CharsetProvider.java\n\t(charsetForName): Uncommented.\n\t* Makefile.am (java_native_source_files): Added new files.\n\t* Makefile.in: Regenerated.\n\nFrom-SVN: r58713", "tree": {"sha": "98c97770f4673a67f522bcdbce39858aa29df2a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/98c97770f4673a67f522bcdbce39858aa29df2a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9dcb1ec8139c2ebd15357e6efe37d19f4ff80267", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9dcb1ec8139c2ebd15357e6efe37d19f4ff80267", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9dcb1ec8139c2ebd15357e6efe37d19f4ff80267", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9dcb1ec8139c2ebd15357e6efe37d19f4ff80267/comments", "author": null, "committer": null, "parents": [{"sha": "075fc17aa50627c58a902aca1b27a74a7c7f7311", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/075fc17aa50627c58a902aca1b27a74a7c7f7311", "html_url": "https://github.com/Rust-GCC/gccrs/commit/075fc17aa50627c58a902aca1b27a74a7c7f7311"}], "stats": {"total": 1174, "additions": 1166, "deletions": 8}, "files": [{"sha": "66d6f5e828f514893c1c62fb811add76e4c92bec", "filename": "libjava/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dcb1ec8139c2ebd15357e6efe37d19f4ff80267/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dcb1ec8139c2ebd15357e6efe37d19f4ff80267/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=9dcb1ec8139c2ebd15357e6efe37d19f4ff80267", "patch": "@@ -1,3 +1,33 @@\n+2002-11-01  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/nio/ByteOrder.java: New file.\n+\t* java/nio/channels/DatagramChannel.java:\n+\t(DatagramChannel): New constructor.\n+\t* java/nio/channels/Pipe.java: New file.\n+\t* java/nio/channels/SelectableChannel.java: New file.\n+\t* java/nio/channels/SelectionKey.java: New file.\n+\t* java/nio/channels/Selector.java: New file.\n+\t* java/nio/channels/ServerSocketChannel.java\n+\t(ServerSocketChannel): New constructor.\n+\t* java/nio/channels/SocketChannel.java\n+\t(SocketChannel): New constructor.\n+\t* java/nio/channels/Pipe.java: New file.\n+\t* java/nio/channels/spi/AbstractChannel.java: New file.\n+\t* java/nio/channels/spi/AbstractInterruptibleChannel.java: New file.\n+\t* java/nio/channels/spi/AbstractSelectableChannel.java:\n+\tLicense added\n+\t(AbstractSelectableChannel): New stubbed method.\n+\t* java/nio/channels/spi/AbstractSelectionKey.java: New file.\n+\t* java/nio/channels/spi/AbstractSelector.java: New file.\n+\t* java/nio/channels/spi/SelectorProvider.java: New file.\n+\t* java/nio/charset/Charset.java: New file.\n+\t* java/nio/charset/CoderMalfunctionError.java: New file.\n+\t* java/nio/charset/CodingErrorAction.java: New file.\n+\t* java/nio/charset/spi/CharsetProvider.java\n+\t(charsetForName): Uncommented.\n+\t* Makefile.am (java_native_source_files): Added new files.\n+\t* Makefile.in: Regenerated.\n+\n 2002-11-01  Michael Koch  <konqueror@gmx.de>\n \n \t* java/net/InetAddress.java:"}, {"sha": "e55c964fe9e54283a4880ab32b82ea6b3198234b", "filename": "libjava/Makefile.am", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dcb1ec8139c2ebd15357e6efe37d19f4ff80267/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dcb1ec8139c2ebd15357e6efe37d19f4ff80267/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=9dcb1ec8139c2ebd15357e6efe37d19f4ff80267", "patch": "@@ -1958,6 +1958,7 @@ java/net/UnknownHostException.java \\\n java/net/UnknownServiceException.java \\\n java/nio/Buffer.java \\\n java/nio/ByteBuffer.java \\\n+java/nio/ByteOrder.java \\\n java/nio/MappedByteBuffer.java \\\n java/nio/channels/AlreadyConnectedException.java \\\n java/nio/channels/ByteChannel.java \\\n@@ -1967,13 +1968,25 @@ java/nio/channels/DatagramChannel.java \\\n java/nio/channels/GatheringByteChannel.java \\\n java/nio/channels/IllegalBlockingModeException.java \\\n java/nio/channels/InterruptibleChannel.java \\\n+java/nio/channels/Pipe.java \\\n java/nio/channels/ReadableByteChannel.java \\\n java/nio/channels/ScatteringByteChannel.java \\\n+java/nio/channels/SelectableChannel.java \\\n+java/nio/channels/SelectionKey.java \\\n+java/nio/channels/Selector.java \\\n java/nio/channels/ServerSocketChannel.java \\\n java/nio/channels/SocketChannel.java \\\n java/nio/channels/WritableByteChannel.java \\\n java/nio/channels/spi/AbstractSelectableChannel.java \\\n+java/nio/channels/spi/AbstractChannel.java \\\n+java/nio/channels/spi/AbstractInterruptibleChannel.java \\\n+java/nio/channels/spi/AbstractSelectionKey.java \\\n+java/nio/channels/spi/AbstractSelector.java \\\n+java/nio/channels/spi/SelectorProvider.java \\\n+java/nio/charset/Charset.java \\\n java/nio/charset/CharacterCodingException.java \\\n+java/nio/charset/CoderMalfunctionError.java \\\n+java/nio/charset/CodingErrorAction.java \\\n java/nio/charset/IllegalCharsetNameException.java \\\n java/nio/charset/MalformedInputException.java \\\n java/nio/charset/UnmappableCharacterException.java \\"}, {"sha": "02093faa799e25bdc34a6def0d7d946e34df336d", "filename": "libjava/Makefile.in", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dcb1ec8139c2ebd15357e6efe37d19f4ff80267/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dcb1ec8139c2ebd15357e6efe37d19f4ff80267/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=9dcb1ec8139c2ebd15357e6efe37d19f4ff80267", "patch": "@@ -1708,6 +1708,7 @@ java/net/UnknownHostException.java \\\n java/net/UnknownServiceException.java \\\n java/nio/Buffer.java \\\n java/nio/ByteBuffer.java \\\n+java/nio/ByteOrder.java \\\n java/nio/MappedByteBuffer.java \\\n java/nio/channels/AlreadyConnectedException.java \\\n java/nio/channels/ByteChannel.java \\\n@@ -1717,13 +1718,25 @@ java/nio/channels/DatagramChannel.java \\\n java/nio/channels/GatheringByteChannel.java \\\n java/nio/channels/IllegalBlockingModeException.java \\\n java/nio/channels/InterruptibleChannel.java \\\n+java/nio/channels/Pipe.java \\\n java/nio/channels/ReadableByteChannel.java \\\n java/nio/channels/ScatteringByteChannel.java \\\n+java/nio/channels/SelectableChannel.java \\\n+java/nio/channels/SelectionKey.java \\\n+java/nio/channels/Selector.java \\\n java/nio/channels/ServerSocketChannel.java \\\n java/nio/channels/SocketChannel.java \\\n java/nio/channels/WritableByteChannel.java \\\n java/nio/channels/spi/AbstractSelectableChannel.java \\\n+java/nio/channels/spi/AbstractChannel.java \\\n+java/nio/channels/spi/AbstractInterruptibleChannel.java \\\n+java/nio/channels/spi/AbstractSelectionKey.java \\\n+java/nio/channels/spi/AbstractSelector.java \\\n+java/nio/channels/spi/SelectorProvider.java \\\n+java/nio/charset/Charset.java \\\n java/nio/charset/CharacterCodingException.java \\\n+java/nio/charset/CoderMalfunctionError.java \\\n+java/nio/charset/CodingErrorAction.java \\\n java/nio/charset/IllegalCharsetNameException.java \\\n java/nio/charset/MalformedInputException.java \\\n java/nio/charset/UnmappableCharacterException.java \\\n@@ -2959,21 +2972,34 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/java/net/natInetAddress.P .deps/java/net/natNetworkInterface.P \\\n .deps/java/net/natPlainDatagramSocketImpl.P \\\n .deps/java/net/natPlainSocketImpl.P .deps/java/nio/Buffer.P \\\n-.deps/java/nio/ByteBuffer.P .deps/java/nio/MappedByteBuffer.P \\\n+.deps/java/nio/ByteBuffer.P .deps/java/nio/ByteOrder.P \\\n+.deps/java/nio/MappedByteBuffer.P \\\n .deps/java/nio/channels/AlreadyConnectedException.P \\\n .deps/java/nio/channels/ByteChannel.P .deps/java/nio/channels/Channel.P \\\n .deps/java/nio/channels/ClosedChannelException.P \\\n .deps/java/nio/channels/DatagramChannel.P \\\n .deps/java/nio/channels/GatheringByteChannel.P \\\n .deps/java/nio/channels/IllegalBlockingModeException.P \\\n .deps/java/nio/channels/InterruptibleChannel.P \\\n+.deps/java/nio/channels/Pipe.P \\\n .deps/java/nio/channels/ReadableByteChannel.P \\\n .deps/java/nio/channels/ScatteringByteChannel.P \\\n+.deps/java/nio/channels/SelectableChannel.P \\\n+.deps/java/nio/channels/SelectionKey.P \\\n+.deps/java/nio/channels/Selector.P \\\n .deps/java/nio/channels/ServerSocketChannel.P \\\n .deps/java/nio/channels/SocketChannel.P \\\n .deps/java/nio/channels/WritableByteChannel.P \\\n+.deps/java/nio/channels/spi/AbstractChannel.P \\\n+.deps/java/nio/channels/spi/AbstractInterruptibleChannel.P \\\n .deps/java/nio/channels/spi/AbstractSelectableChannel.P \\\n+.deps/java/nio/channels/spi/AbstractSelectionKey.P \\\n+.deps/java/nio/channels/spi/AbstractSelector.P \\\n+.deps/java/nio/channels/spi/SelectorProvider.P \\\n .deps/java/nio/charset/CharacterCodingException.P \\\n+.deps/java/nio/charset/Charset.P \\\n+.deps/java/nio/charset/CoderMalfunctionError.P \\\n+.deps/java/nio/charset/CodingErrorAction.P \\\n .deps/java/nio/charset/IllegalCharsetNameException.P \\\n .deps/java/nio/charset/MalformedInputException.P \\\n .deps/java/nio/charset/UnmappableCharacterException.P \\"}, {"sha": "010fa29d0b696ef2a6a25db5f3510e22444ed1f4", "filename": "libjava/java/nio/ByteOrder.java", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dcb1ec8139c2ebd15357e6efe37d19f4ff80267/libjava%2Fjava%2Fnio%2FByteOrder.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dcb1ec8139c2ebd15357e6efe37d19f4ff80267/libjava%2Fjava%2Fnio%2FByteOrder.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FByteOrder.java?ref=9dcb1ec8139c2ebd15357e6efe37d19f4ff80267", "patch": "@@ -0,0 +1,60 @@\n+/* ByteOrder.java -- \n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package java.nio;\n+\n+\n+public final class ByteOrder\n+{\n+  public static final ByteOrder BIG_ENDIAN     = new ByteOrder();\n+  public static final ByteOrder LITTLE_ENDIAN  = new ByteOrder();\n+\n+  public static ByteOrder nativeOrder()\n+  {\n+    return BIG_ENDIAN;\n+  }\n+\n+  public String toString()\n+  {\n+    return this == BIG_ENDIAN ? \"BIG_ENDIAN\" : \"LITTLE_ENDIAN\";\n+  }\n+\n+  // This class can only be instantiated here.\n+  private ByteOrder ()\n+  {\n+  }\n+}"}, {"sha": "301f33e20a0e3b02bce3c6f8f9ed733414752cab", "filename": "libjava/java/nio/channels/DatagramChannel.java", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dcb1ec8139c2ebd15357e6efe37d19f4ff80267/libjava%2Fjava%2Fnio%2Fchannels%2FDatagramChannel.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dcb1ec8139c2ebd15357e6efe37d19f4ff80267/libjava%2Fjava%2Fnio%2Fchannels%2FDatagramChannel.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2Fchannels%2FDatagramChannel.java?ref=9dcb1ec8139c2ebd15357e6efe37d19f4ff80267", "patch": "@@ -38,10 +38,13 @@\n package java.nio.channels;\n \n import java.nio.channels.spi.AbstractSelectableChannel;\n+import java.nio.channels.spi.SelectorProvider;\n \n-public class DatagramChannel\n+public abstract class DatagramChannel\n   extends AbstractSelectableChannel\n {\n+  public DatagramChannel (SelectorProvider provider)\n+  {\n+    super (provider);\n+  }\n }\n-\n-\t       "}, {"sha": "9c3c6cdc2dee834bf732541a4d3f061fc50ecc50", "filename": "libjava/java/nio/channels/Pipe.java", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dcb1ec8139c2ebd15357e6efe37d19f4ff80267/libjava%2Fjava%2Fnio%2Fchannels%2FPipe.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dcb1ec8139c2ebd15357e6efe37d19f4ff80267/libjava%2Fjava%2Fnio%2Fchannels%2FPipe.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2Fchannels%2FPipe.java?ref=9dcb1ec8139c2ebd15357e6efe37d19f4ff80267", "patch": "@@ -0,0 +1,79 @@\n+/* Pipe.java -- \n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package java.nio.channels;\n+\n+import java.nio.channels.spi.AbstractSelectableChannel;\n+import java.nio.channels.spi.SelectorProvider;\n+\n+public abstract class Pipe\n+{\n+  public abstract static class SinkChannel\n+    extends AbstractSelectableChannel\n+    implements WritableByteChannel, GatheringByteChannel\n+  {\n+    protected SinkChannel(SelectorProvider provider)\n+    {\n+      super (provider);\n+    }\n+  }\n+\n+  public abstract static class SourceChannel\n+    extends AbstractSelectableChannel\n+    implements ReadableByteChannel, ScatteringByteChannel\n+  {\n+    protected SourceChannel(SelectorProvider provider)\n+    {\n+      super (provider);\n+    }\n+  }\n+    \n+  protected Pipe()\n+  {\n+  }\n+\n+  /**\n+   * @exception IOException If an error occurs\n+   */\n+  public static Pipe open()\n+  {\n+    return null;\n+  }\n+    \n+  public abstract Pipe.SinkChannel sink();\n+  public abstract Pipe.SourceChannel source();   \n+}"}, {"sha": "7b3a50e9bcda1604a20cdc03cd916f756aa0c0b7", "filename": "libjava/java/nio/channels/SelectableChannel.java", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dcb1ec8139c2ebd15357e6efe37d19f4ff80267/libjava%2Fjava%2Fnio%2Fchannels%2FSelectableChannel.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dcb1ec8139c2ebd15357e6efe37d19f4ff80267/libjava%2Fjava%2Fnio%2Fchannels%2FSelectableChannel.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2Fchannels%2FSelectableChannel.java?ref=9dcb1ec8139c2ebd15357e6efe37d19f4ff80267", "patch": "@@ -0,0 +1,89 @@\n+/* SelectableChannel.java -- \n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package java.nio.channels;\n+\n+import java.nio.channels.spi.AbstractInterruptibleChannel;\n+import java.nio.channels.spi.SelectorProvider;\n+\n+public abstract class SelectableChannel\n+  extends AbstractInterruptibleChannel\n+{\n+  protected SelectableChannel()\n+  {\n+  }\n+  \n+  public abstract  Object blockingLock();\n+\n+  /**\n+   * @exception ClosedChannelException FIXME\n+   * @exception IllegalBlockingModeException FIXME\n+   * @exception IOException FIXME\n+   */\n+  public abstract  SelectableChannel configureBlocking(boolean block);\n+  \n+  public abstract  boolean isBlocking();\n+  \n+  public abstract  boolean isRegistered();\n+  \n+  public abstract  SelectionKey keyFor(Selector sel);\n+  \n+  public abstract  SelectorProvider provider();\n+  \n+  /**\n+   * @exception CancelledKeyException FIXME\n+   * @exception ClosedChannelException FIXME\n+   * @exception IllegalArgumentException FIXME\n+   * @exception IllegalBlockingModeException FIXME\n+   * @exception IllegalSelectorException FIXME\n+   */\n+  public final SelectionKey register(Selector sel, int ops) throws java.nio.channels.ClosedChannelException\n+  {\n+    return register(sel, ops, null);\n+  }\n+  \n+  /**\n+   * @exception CancelledKeyException FIXME\n+   * @exception ClosedChannelException FIXME\n+   * @exception IllegalArgumentException FIXME\n+   * @exception IllegalBlockingModeException FIXME\n+   * @exception IllegalSelectorException FIXME\n+   */\n+  public abstract  SelectionKey register(Selector sel, int ops, Object att) throws java.nio.channels.ClosedChannelException;\n+  \n+  public abstract  int validOps();  \n+}"}, {"sha": "6835d1d99db8f8c73a42c2b79289714c59824cf1", "filename": "libjava/java/nio/channels/SelectionKey.java", "status": "added", "additions": 120, "deletions": 0, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dcb1ec8139c2ebd15357e6efe37d19f4ff80267/libjava%2Fjava%2Fnio%2Fchannels%2FSelectionKey.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dcb1ec8139c2ebd15357e6efe37d19f4ff80267/libjava%2Fjava%2Fnio%2Fchannels%2FSelectionKey.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2Fchannels%2FSelectionKey.java?ref=9dcb1ec8139c2ebd15357e6efe37d19f4ff80267", "patch": "@@ -0,0 +1,120 @@\n+/* SelectionKey.java -- \n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package java.nio.channels;\n+\n+public abstract class SelectionKey\n+{\n+  public static final int OP_ACCEPT  = 1<<0;\n+  public static final int OP_CONNECT = 1<<1;\n+  public static final int OP_READ    = 1<<2;\n+  public static final int OP_WRITE   = 1<<3;\n+    \n+  Object attached;\n+    \n+  protected SelectionKey()\n+  {\n+  }\n+\n+  public final Object attach(Object obj)\n+  {\n+    Object old = attached;\n+    attached = obj;\n+    return old;\n+  }\n+    \n+  public final Object attachment()\n+  {\n+    return attached;\n+  }    \n+\n+  /**\n+   * @exception CancelledKeyException FIXME\n+   */\n+  public final boolean isAcceptable()\n+  { \n+    return (readyOps() & OP_ACCEPT) != 0;\n+  }\n+\n+  /**\n+   * @exception CancelledKeyException FIXME\n+   */\n+  public final boolean isConnectable()\n+  {\n+    return (readyOps() & OP_CONNECT) != 0;  \n+  }        \n+  \n+  /**\n+   * @exception CancelledKeyException FIXME\n+   */\n+  public final boolean isReadable()\n+  {\n+    return (readyOps() & OP_READ) != 0; \n+  }\n+  \n+  /**\n+   * @exception CancelledKeyException FIXME\n+   */\n+  public final boolean isWritable()\n+  {\n+    return (readyOps() & OP_WRITE) != 0;\n+  }\n+\n+  public abstract void cancel(); \n+  \n+  public abstract SelectableChannel channel();\n+  \n+  /**\n+   * @exception CancelledKeyException FIXME\n+   */\n+  public abstract int interestOps();\n+  \n+  /**\n+   * @exception CancelledKeyException FIXME\n+   * @exception IllegalArgumentException FIXME\n+   */\n+  public abstract SelectionKey interestOps(int ops);\n+  \n+  public abstract boolean isValid();\n+ \n+  /**\n+   * @exception CancelledKeyException FIXME\n+   */\n+  public abstract int readyOps();\n+  \n+  public abstract Selector selector();\n+}"}, {"sha": "715bc7f98bb8d86d7e4754b9eec6eb8b78cd4f4a", "filename": "libjava/java/nio/channels/Selector.java", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dcb1ec8139c2ebd15357e6efe37d19f4ff80267/libjava%2Fjava%2Fnio%2Fchannels%2FSelector.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dcb1ec8139c2ebd15357e6efe37d19f4ff80267/libjava%2Fjava%2Fnio%2Fchannels%2FSelector.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2Fchannels%2FSelector.java?ref=9dcb1ec8139c2ebd15357e6efe37d19f4ff80267", "patch": "@@ -0,0 +1,96 @@\n+/* Selector.java -- \n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package java.nio.channels;\n+\n+import java.util.Set;\n+import java.nio.channels.spi.SelectorProvider;\n+\n+public abstract class Selector\n+{\n+  protected Selector()\n+  {\n+  }\n+ \n+  /**\n+   * @exception IOException If an error occurs\n+   */\n+  public static Selector open()\n+  {\n+\treturn SelectorProvider.provider().openSelector();\n+  }\n+\n+  /**\n+   * @exception IOException If an error occurs\n+   */\n+  public abstract void close();\n+  \n+  public abstract boolean isOpen();\n+  \n+  /**\n+   * @exception ClosedSelectorException FIXME\n+   */\n+  public abstract Set keys();\n+  \n+  public abstract SelectorProvider provider();\n+  \n+  /**\n+   * @exception ClosedSelectorException FIXME\n+   * @exception IOException If an error occurs\n+   */\n+  public abstract int select();\n+  \n+  /**\n+   * @exception ClosedSelectorException FIXME\n+   * @exception IllegalArgumentException FIXME\n+   * @exception IOException If an error occurs\n+   */\n+  public abstract int select(long timeout);\n+  \n+  /**\n+   * @exception ClosedSelectorException FIXME\n+   */\n+  public abstract Set selectedKeys();\n+  \n+  /**\n+   * @exception ClosedSelectorException FIXME\n+   * @exception IOException If an error occurs\n+   */\n+  public abstract int selectNow();\n+  \n+  public abstract Selector wakeup();\n+}"}, {"sha": "e423bd10b43f5e617969c2e3734e1f8f1d6db42a", "filename": "libjava/java/nio/channels/ServerSocketChannel.java", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dcb1ec8139c2ebd15357e6efe37d19f4ff80267/libjava%2Fjava%2Fnio%2Fchannels%2FServerSocketChannel.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dcb1ec8139c2ebd15357e6efe37d19f4ff80267/libjava%2Fjava%2Fnio%2Fchannels%2FServerSocketChannel.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2Fchannels%2FServerSocketChannel.java?ref=9dcb1ec8139c2ebd15357e6efe37d19f4ff80267", "patch": "@@ -38,8 +38,13 @@\n package java.nio.channels;\n \n import java.nio.channels.spi.AbstractSelectableChannel;\n+import java.nio.channels.spi.SelectorProvider;\n \n-public class ServerSocketChannel\n+public abstract class ServerSocketChannel\n   extends AbstractSelectableChannel\n {\n+  public ServerSocketChannel (SelectorProvider provider)\n+  {\n+    super (provider);\n+  }\n }"}, {"sha": "dc6e1d2d96afccf42838a9e4eee06fd192304808", "filename": "libjava/java/nio/channels/SocketChannel.java", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dcb1ec8139c2ebd15357e6efe37d19f4ff80267/libjava%2Fjava%2Fnio%2Fchannels%2FSocketChannel.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dcb1ec8139c2ebd15357e6efe37d19f4ff80267/libjava%2Fjava%2Fnio%2Fchannels%2FSocketChannel.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2Fchannels%2FSocketChannel.java?ref=9dcb1ec8139c2ebd15357e6efe37d19f4ff80267", "patch": "@@ -38,8 +38,13 @@\n package java.nio.channels;\n \n import java.nio.channels.spi.AbstractSelectableChannel;\n+import java.nio.channels.spi.SelectorProvider;\n \n-public class SocketChannel\n+public abstract class SocketChannel\n   extends AbstractSelectableChannel\n {\n+  public SocketChannel (SelectorProvider provider)\n+  {\n+    super (provider);\n+  }\n }"}, {"sha": "3d7fe7ac799efafe7611b9fc304247bb8cab76fb", "filename": "libjava/java/nio/channels/spi/AbstractChannel.java", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dcb1ec8139c2ebd15357e6efe37d19f4ff80267/libjava%2Fjava%2Fnio%2Fchannels%2Fspi%2FAbstractChannel.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dcb1ec8139c2ebd15357e6efe37d19f4ff80267/libjava%2Fjava%2Fnio%2Fchannels%2Fspi%2FAbstractChannel.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2Fchannels%2Fspi%2FAbstractChannel.java?ref=9dcb1ec8139c2ebd15357e6efe37d19f4ff80267", "patch": "@@ -0,0 +1,57 @@\n+/* AbstractChannel.java -- \n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package java.nio.channels.spi;\n+\n+import java.io.IOException;\n+import java.nio.channels.Channel;\n+\n+public abstract class AbstractChannel implements Channel\n+{\n+  boolean opened;\n+\n+  public boolean isOpen()\n+  {\n+    return opened;\n+  }\n+\n+  public void close() throws IOException\n+  {\n+    if (! isOpen())\n+      return;\n+  }\n+}"}, {"sha": "235b995d2def7230346e5bc6bc052e3d561c3db7", "filename": "libjava/java/nio/channels/spi/AbstractInterruptibleChannel.java", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dcb1ec8139c2ebd15357e6efe37d19f4ff80267/libjava%2Fjava%2Fnio%2Fchannels%2Fspi%2FAbstractInterruptibleChannel.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dcb1ec8139c2ebd15357e6efe37d19f4ff80267/libjava%2Fjava%2Fnio%2Fchannels%2Fspi%2FAbstractInterruptibleChannel.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2Fchannels%2Fspi%2FAbstractInterruptibleChannel.java?ref=9dcb1ec8139c2ebd15357e6efe37d19f4ff80267", "patch": "@@ -0,0 +1,87 @@\n+/* AbstractInterruptibleChannel.java -- \n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package java.nio.channels.spi;\n+\n+import java.io.IOException;\n+import java.nio.channels.Channel;\n+import java.nio.channels.InterruptibleChannel;\n+\n+public abstract class AbstractInterruptibleChannel\n+  implements Channel, InterruptibleChannel\n+{\n+  boolean opened = false;\n+\n+  protected AbstractInterruptibleChannel()\n+  {\n+  }\n+\n+  protected final void begin()\n+  {\n+    // Marks the beginning of an I/O operation that might block indefinitely.\n+  }\n+    \n+  /**\n+   * @exception IOException If an error occurs\n+   */\n+  public final void close() throws IOException\n+  {\n+    // Closes this channel.\n+    implCloseChannel();\n+  }\n+\n+  /**\n+   * @exception AsynchronousCloseException FIXME\n+   * @exception ClosedByInterruptException FIXME\n+   */\n+  protected final void end(boolean completed)\n+  {\n+    // Marks the end of an I/O operation that might block indefinitely.\n+  }   \n+\n+  /**\n+   * @exception IOException If an error occurs\n+   */\n+  protected abstract void implCloseChannel() throws IOException;\n+\n+  public final boolean isOpen()\n+  {\n+    // Tells whether or not this channel is open.\n+    return opened;\n+  }\n+}\n+"}, {"sha": "42bb1f24bb415f73425d029c1c546c19f8c22ff8", "filename": "libjava/java/nio/channels/spi/AbstractSelectableChannel.java", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dcb1ec8139c2ebd15357e6efe37d19f4ff80267/libjava%2Fjava%2Fnio%2Fchannels%2Fspi%2FAbstractSelectableChannel.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dcb1ec8139c2ebd15357e6efe37d19f4ff80267/libjava%2Fjava%2Fnio%2Fchannels%2Fspi%2FAbstractSelectableChannel.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2Fchannels%2Fspi%2FAbstractSelectableChannel.java?ref=9dcb1ec8139c2ebd15357e6efe37d19f4ff80267", "patch": "@@ -1,7 +1,51 @@\n+/* AbstractSelectableChannel.java --\n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n package java.nio.channels.spi;\n \n+import java.nio.channels.SelectableChannel;\n+\n public abstract class AbstractSelectableChannel\n+  extends SelectableChannel\n {\n+  protected AbstractSelectableChannel (SelectorProvider provider)\n+  {\n+  }\n+  \n   public final boolean isBlocking()\n   {\n     return true;"}, {"sha": "e14e3b330ae0677f2024c9386972df4dd6e567ab", "filename": "libjava/java/nio/channels/spi/AbstractSelectionKey.java", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dcb1ec8139c2ebd15357e6efe37d19f4ff80267/libjava%2Fjava%2Fnio%2Fchannels%2Fspi%2FAbstractSelectionKey.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dcb1ec8139c2ebd15357e6efe37d19f4ff80267/libjava%2Fjava%2Fnio%2Fchannels%2Fspi%2FAbstractSelectionKey.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2Fchannels%2Fspi%2FAbstractSelectionKey.java?ref=9dcb1ec8139c2ebd15357e6efe37d19f4ff80267", "patch": "@@ -0,0 +1,66 @@\n+/* AbstractSelectionKey.java -- \n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package java.nio.channels.spi;\n+\n+import java.nio.channels.SelectionKey;\n+\n+public abstract class AbstractSelectionKey\n+  extends SelectionKey\n+{\n+  boolean ok = true;\n+\n+  protected AbstractSelectionKey ()\n+  {\n+  }\n+ \n+  public final void cancel ()\n+  {\n+    if (ok)\n+      {\n+        selector ().selectedKeys ().add (this);\n+      }\n+    \n+    ok = false;\n+  }\n+\n+  public final boolean isValid ()\n+  {\n+    return ok;\n+  }\n+}\n+"}, {"sha": "033a8d7f98b3807bc666835d34209d979c01e1d5", "filename": "libjava/java/nio/channels/spi/AbstractSelector.java", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dcb1ec8139c2ebd15357e6efe37d19f4ff80267/libjava%2Fjava%2Fnio%2Fchannels%2Fspi%2FAbstractSelector.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dcb1ec8139c2ebd15357e6efe37d19f4ff80267/libjava%2Fjava%2Fnio%2Fchannels%2Fspi%2FAbstractSelector.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2Fchannels%2Fspi%2FAbstractSelector.java?ref=9dcb1ec8139c2ebd15357e6efe37d19f4ff80267", "patch": "@@ -0,0 +1,100 @@\n+/* AbstractSelector.java -- \n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package java.nio.channels.spi;\n+\n+import java.nio.channels.SelectionKey;\n+import java.nio.channels.Selector;\n+import java.util.List;\n+import java.util.Set;\n+\n+public abstract class AbstractSelector extends Selector\n+{\n+  boolean closed = true;\n+  SelectorProvider provider;\n+\n+  protected AbstractSelector(SelectorProvider provider)\n+  {\n+    this.provider = provider;\n+  }\n+ \n+  protected final void begin()\n+  {\n+  }\n+\n+  /**\n+   * @exception IOException If an error occurs\n+   */\n+  public final void close()\n+  {\n+    if (closed)\n+      return;\n+    closed = true;\n+    implCloseSelector();\n+  }\n+\n+  protected final void deregister(AbstractSelectionKey key)\n+  {\n+    cancelledKeys().remove(key);\n+  }\n+    \n+  protected final void end()\n+  {\n+  }\n+    \n+  public final boolean isOpen()\n+  {\n+    return ! closed;\n+  }\n+    \n+  public final SelectorProvider provider()\n+  {\n+    return provider;\n+  }\n+    \n+  protected final Set cancelledKeys()\n+  {\n+    return null;\n+  }\n+  \n+  /**\n+   * @exception IOException If an error occurs\n+   */\n+  protected abstract void implCloseSelector();\t\n+  \n+  protected abstract SelectionKey register(AbstractSelectableChannel ch, int ops, Object att);   \n+}"}, {"sha": "93ea5378f6b53cf5d3389aee3e870bee11c452f8", "filename": "libjava/java/nio/channels/spi/SelectorProvider.java", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dcb1ec8139c2ebd15357e6efe37d19f4ff80267/libjava%2Fjava%2Fnio%2Fchannels%2Fspi%2FSelectorProvider.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dcb1ec8139c2ebd15357e6efe37d19f4ff80267/libjava%2Fjava%2Fnio%2Fchannels%2Fspi%2FSelectorProvider.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2Fchannels%2Fspi%2FSelectorProvider.java?ref=9dcb1ec8139c2ebd15357e6efe37d19f4ff80267", "patch": "@@ -0,0 +1,82 @@\n+/* SelectorProvider.java -- \n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package java.nio.channels.spi;\n+\n+import java.nio.channels.DatagramChannel;\n+import java.nio.channels.Pipe;\n+import java.nio.channels.ServerSocketChannel;\n+import java.nio.channels.SocketChannel;\n+\n+/**\n+ * @since 1.4\n+ */\n+public abstract class SelectorProvider\n+{\n+  static SelectorProvider pr;\n+    \n+  /**\n+   * Creates the <code>SelectorProvider<code> object\n+   *\n+   * @exception SecurityException If a security manager has been installed and\n+   * it denies RuntimePermission(\"selectorProvider\")\n+   */\n+  protected SelectorProvider()\n+  {\n+    SecurityManager sm = System.getSecurityManager ();\n+    if (sm != null)\n+      sm.checkPermission (new RuntimePermission (\"selectorProvider\"));\n+  }\n+    \n+  public abstract  DatagramChannel openDatagramChannel();\n+\n+  public abstract  Pipe openPipe();\n+  \n+  public abstract  AbstractSelector openSelector();\n+  \n+  public abstract  ServerSocketChannel openServerSocketChannel();\n+  \n+  public abstract  SocketChannel openSocketChannel();\n+   \n+  /**\n+   * Returns the global <code>SelectorProvider</code> object\n+   */\n+  public static SelectorProvider provider()\n+  {\n+    return pr;\n+  }\n+}"}, {"sha": "2a1338feae45561b4987393db6d7158ca14af9b1", "filename": "libjava/java/nio/charset/Charset.java", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dcb1ec8139c2ebd15357e6efe37d19f4ff80267/libjava%2Fjava%2Fnio%2Fcharset%2FCharset.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dcb1ec8139c2ebd15357e6efe37d19f4ff80267/libjava%2Fjava%2Fnio%2Fcharset%2FCharset.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2Fcharset%2FCharset.java?ref=9dcb1ec8139c2ebd15357e6efe37d19f4ff80267", "patch": "@@ -0,0 +1,90 @@\n+/* Charset.java -- \n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package java.nio.charset;\n+\n+\n+import java.nio.*;\n+\n+public class Charset\n+{\n+    public static Charset forName(String name)\n+    {\n+\treturn new Charset();\n+    }\n+\n+/*\n+    public CharsetDecoder newDecoder()\n+    {\t\n+\treturn new CharsetDecoder(this,2,2)\n+\t    {\n+\t\tprotected CoderResult decodeLoop(ByteBuffer  in,\n+\t\t\t\t\t\t CharBuffer  out)\n+\t\t{\n+\t\t    while (in.hasRemaining())\n+\t\t\t{\n+\t\t\t    char a = (char) in.get();\n+\t\t\t    out.put(a);\n+\t\t\t}\n+\t\t    return null;\n+\t\t}\n+\t    };\n+    }\n+\n+    public CharsetEncoder newEncoder()\n+    {\t\t\n+\treturn new CharsetEncoder(this,2,2)\n+\t    {\n+\t\tprotected CoderResult encodeLoop(CharBuffer  in,\n+\t\t\t\t\t\t ByteBuffer  out)\n+\t\t{\n+\t\t    //System.out.println(\"in encode loop:\"+in.hasRemaining());\n+\n+\t\t    while (in.hasRemaining())\n+\t\t\t{\n+\t\t\t    char a = in.get();\n+\t\t\t    out.put((byte)a);\n+\n+\t\t\t    //int len = out.position();\n+\t\t\t    //System.out.println(\"pos=\"+len + \",\"+a);\n+\t\t\t}\n+\t\t    return null;\n+\t\t}\n+\t    };\n+    }\n+ */\n+}"}, {"sha": "16c23bfa2247c98bf028500638197640f9313e19", "filename": "libjava/java/nio/charset/CoderMalfunctionError.java", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dcb1ec8139c2ebd15357e6efe37d19f4ff80267/libjava%2Fjava%2Fnio%2Fcharset%2FCoderMalfunctionError.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dcb1ec8139c2ebd15357e6efe37d19f4ff80267/libjava%2Fjava%2Fnio%2Fcharset%2FCoderMalfunctionError.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2Fcharset%2FCoderMalfunctionError.java?ref=9dcb1ec8139c2ebd15357e6efe37d19f4ff80267", "patch": "@@ -0,0 +1,52 @@\n+/* CoderMalfunctionError.java -- \n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package java.nio.charset;\n+\n+/**\n+ * @since 1.4\n+ */\n+class CoderMalfunctionError extends Error\n+{\n+  /**\n+   * Creates the error\n+   */\n+  public CoderMalfunctionError(Exception cause)\n+  {\n+    super (cause);\n+  }\n+}"}, {"sha": "463107712f6baa2685702dd966df1638cb0808a4", "filename": "libjava/java/nio/charset/CodingErrorAction.java", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dcb1ec8139c2ebd15357e6efe37d19f4ff80267/libjava%2Fjava%2Fnio%2Fcharset%2FCodingErrorAction.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dcb1ec8139c2ebd15357e6efe37d19f4ff80267/libjava%2Fjava%2Fnio%2Fcharset%2FCodingErrorAction.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2Fcharset%2FCodingErrorAction.java?ref=9dcb1ec8139c2ebd15357e6efe37d19f4ff80267", "patch": "@@ -0,0 +1,54 @@\n+/* CodingErrorAction.java -- \n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package java.nio.charset;\n+\n+\n+class CodingErrorAction\n+{\n+  public static final CodingErrorAction IGNORE;\n+  public static final CodingErrorAction REPLACE;\n+  public static final CodingErrorAction REPORT;\n+\n+  /**\n+   * FIXME\n+   */\n+  public String toString ()\n+  {\n+    return \"\";\n+  }\n+}"}, {"sha": "32346a0457c006d639cd65a292cdad928f222163", "filename": "libjava/java/nio/charset/spi/CharsetProvider.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dcb1ec8139c2ebd15357e6efe37d19f4ff80267/libjava%2Fjava%2Fnio%2Fcharset%2Fspi%2FCharsetProvider.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dcb1ec8139c2ebd15357e6efe37d19f4ff80267/libjava%2Fjava%2Fnio%2Fcharset%2Fspi%2FCharsetProvider.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2Fcharset%2Fspi%2FCharsetProvider.java?ref=9dcb1ec8139c2ebd15357e6efe37d19f4ff80267", "patch": "@@ -37,7 +37,7 @@\n \n package java.nio.charset.spi;\n \n-//import java.nio.charset.Charset;\n+import java.nio.charset.Charset;\n import java.util.Iterator;\n \n /**\n@@ -84,5 +84,5 @@ protected CharsetProvider()\n    *\n    * @return the charset, or null if not supported\n    */\n-  //public abstract Charset charsetForName(String name);\n+  public abstract Charset charsetForName(String name);\n } // class CharsetProvider"}]}