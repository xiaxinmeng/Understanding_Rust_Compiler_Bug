{"sha": "8cbd5ce01a5ed18a55e06f78933d33279c1817c3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGNiZDVjZTAxYTVlZDE4YTU1ZTA2Zjc4OTMzZDMzMjc5YzE4MTdjMw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2003-04-17T01:38:28Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2003-04-17T01:38:28Z"}, "message": "arc.c (arc_encode_section_info): Remove.\n\n        * arc.c (arc_encode_section_info): Remove.\n        (arc_assemble_integer): Use SYMBOL_REF_FUNCTION_P.\n        (arc_print_operand, arc_print_operand_address): Likewise.\n        * arc.h (EXTRA_CONSTRAINT): Likewise.\n\nFrom-SVN: r65716", "tree": {"sha": "b8f97ef1e361f31f4ec20f73e93ccccb7059a0b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b8f97ef1e361f31f4ec20f73e93ccccb7059a0b7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8cbd5ce01a5ed18a55e06f78933d33279c1817c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cbd5ce01a5ed18a55e06f78933d33279c1817c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8cbd5ce01a5ed18a55e06f78933d33279c1817c3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cbd5ce01a5ed18a55e06f78933d33279c1817c3/comments", "author": null, "committer": null, "parents": [{"sha": "96c6931df4d8809e4adf59a64977ac3889f6560b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96c6931df4d8809e4adf59a64977ac3889f6560b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96c6931df4d8809e4adf59a64977ac3889f6560b"}], "stats": {"total": 32, "additions": 11, "deletions": 21}, "files": [{"sha": "4aa7b393b64da6a5c1d6a76590de32716edda81e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cbd5ce01a5ed18a55e06f78933d33279c1817c3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cbd5ce01a5ed18a55e06f78933d33279c1817c3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8cbd5ce01a5ed18a55e06f78933d33279c1817c3", "patch": "@@ -1,3 +1,10 @@\n+2003-04-16  Richard Henderson  <rth@redhat.com>\n+\n+\t* arc.c (arc_encode_section_info): Remove.\n+\t(arc_assemble_integer): Use SYMBOL_REF_FUNCTION_P.\t\n+\t(arc_print_operand, arc_print_operand_address): Likewise.\n+\t* arc.h (EXTRA_CONSTRAINT): Likewise.\n+\n 2003-04-16  Roger Sayle  <roger@eyesopen.com>\n \n \t* c-semantics.c (find_reachable_label): New function to find a"}, {"sha": "5dcb105b05114da99f65e0b69e9250392f3ef336", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 3, "deletions": 20, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cbd5ce01a5ed18a55e06f78933d33279c1817c3/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cbd5ce01a5ed18a55e06f78933d33279c1817c3/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=8cbd5ce01a5ed18a55e06f78933d33279c1817c3", "patch": "@@ -94,7 +94,6 @@ static tree arc_handle_interrupt_attribute PARAMS ((tree *, tree, tree, int, boo\n static bool arc_assemble_integer PARAMS ((rtx, unsigned int, int));\n static void arc_output_function_prologue PARAMS ((FILE *, HOST_WIDE_INT));\n static void arc_output_function_epilogue PARAMS ((FILE *, HOST_WIDE_INT));\n-static void arc_encode_section_info PARAMS ((tree, int));\n static void arc_internal_label PARAMS ((FILE *, const char *, unsigned long));\n static bool arc_rtx_costs PARAMS ((rtx, int, int, int *));\n static int arc_address_cost PARAMS ((rtx));\n@@ -113,8 +112,6 @@ static int arc_address_cost PARAMS ((rtx));\n #define TARGET_ASM_FUNCTION_EPILOGUE arc_output_function_epilogue\n #undef TARGET_ATTRIBUTE_TABLE\n #define TARGET_ATTRIBUTE_TABLE arc_attribute_table\n-#undef TARGET_ENCODE_SECTION_INFO\n-#define TARGET_ENCODE_SECTION_INFO arc_encode_section_info\n #undef TARGET_ASM_INTERNAL_LABEL\n #define TARGET_ASM_INTERNAL_LABEL arc_internal_label\n \n@@ -1194,7 +1191,7 @@ arc_assemble_integer (x, size, aligned_p)\n      int aligned_p;\n {\n   if (size == UNITS_PER_WORD && aligned_p\n-      && ((GET_CODE (x) == SYMBOL_REF && SYMBOL_REF_FLAG (x))\n+      && ((GET_CODE (x) == SYMBOL_REF && SYMBOL_REF_FUNCTION_P (x))\n \t  || GET_CODE (x) == LABEL_REF))\n     {\n       fputs (\"\\t.word\\t%st(\", asm_out_file);\n@@ -1777,7 +1774,7 @@ arc_print_operand (file, x, code)\n \toutput_operand_lossage (\"invalid operand to %%R code\");\n       return;\n     case 'S' :\n-      if ((GET_CODE (x) == SYMBOL_REF && SYMBOL_REF_FLAG (x))\n+      if ((GET_CODE (x) == SYMBOL_REF && SYMBOL_REF_FUNCTION_P (x))\n \t  || GET_CODE (x) == LABEL_REF)\n \t{\n \t  fprintf (file, \"%%st(\");\n@@ -1902,7 +1899,7 @@ arc_print_operand_address (file, addr)\n       fputs (reg_names[REGNO (addr)], file);\n       break;\n     case SYMBOL_REF :\n-      if (/*???*/ 0 && SYMBOL_REF_FLAG (addr))\n+      if (/*???*/ 0 && SYMBOL_REF_FUNCTION_P (addr))\n \t{\n \t  fprintf (file, \"%%st(\");\n \t  output_addr_const (file, addr);\n@@ -2414,20 +2411,6 @@ arc_va_arg (valist, type)\n   return addr_rtx;\n }\n \n-/* On the ARC, function addresses are not the same as normal addresses.\n-   Branch to absolute address insns take an address that is right-shifted\n-   by 2.  We encode the fact that we have a function here, and then emit a\n-   special assembler op when outputting the address.  */\n-\n-static void\n-arc_encode_section_info (decl, first)\n-     tree decl;\n-     int first ATTRIBUTE_UNUSED;\n-{\n-  if (TREE_CODE (decl) == FUNCTION_DECL)\n-    SYMBOL_REF_FLAG (XEXP (DECL_RTL (decl), 0)) = 1;\n-}\n-\n /* This is how to output a definition of an internal numbered label where\n    PREFIX is the class of label and NUM is the number within the class.  */\n "}, {"sha": "4282f55ecc94a3daa3c0d04fb55c989b4c217941", "filename": "gcc/config/arc/arc.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cbd5ce01a5ed18a55e06f78933d33279c1817c3/gcc%2Fconfig%2Farc%2Farc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cbd5ce01a5ed18a55e06f78933d33279c1817c3/gcc%2Fconfig%2Farc%2Farc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.h?ref=8cbd5ce01a5ed18a55e06f78933d33279c1817c3", "patch": "@@ -520,7 +520,7 @@ extern enum reg_class arc_regno_reg_class[FIRST_PSEUDO_REGISTER];\n /* ??? This currently isn't used.  Waiting for PIC.  */\n #if 0\n #define EXTRA_CONSTRAINT(VALUE, C) \\\n-((C) == 'R' ? (SYMBOL_REF_FLAG (VALUE) || GET_CODE (VALUE) == LABEL_REF) \\\n+((C) == 'R' ? (SYMBOL_REF_FUNCTION_P (VALUE) || GET_CODE (VALUE) == LABEL_REF) \\\n  : 0)\n #endif\n \f"}]}