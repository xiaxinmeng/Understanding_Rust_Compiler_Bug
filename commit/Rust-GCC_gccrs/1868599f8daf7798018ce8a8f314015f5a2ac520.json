{"sha": "1868599f8daf7798018ce8a8f314015f5a2ac520", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTg2ODU5OWY4ZGFmNzc5ODAxOGNlOGE4ZjMxNDAxNWY1YTJhYzUyMA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-04-22T17:17:15Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-04-22T19:34:19Z"}, "message": "libgfortran: Provide some further math library fallbacks [PR94694]\n\nThe following patch provides some further math library fallbacks.\nfmaf can be implemented using fma if available, fma and fmal can use\nx * y + z as fallback, it is not perfect, but e.g. glibc on various arches\nhas been using that as fallback for many years,\nand copysign/copysignl/fabs/fabsl can be implemented using corresponding\n__builtin_* if we make sure that gcc expands it inline instead of using\na library call (these days it is expanded inline on most targets).\n\n2020-04-22  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR libfortran/94694\n\tPR libfortran/94586\n\t* configure.ac: Add math func checks for fmaf, fma and fmal.  Add\n\tHAVE_INLINE_BUILTIN_COPYSIGN check.\n\t* c99_protos.h (copysign, fmaf, fma, fmal): Provide fallback\n\tprototypes.\n\t(HAVE_COPYSIGN, HAVE_FMAF, HAVE_FMA, HAVE_FMAL): Define if not\n\tdefined and fallback version is provided.\n\t* intrinsics/c99_functions.c (copysign, fmaf, fma, fmal): Provide\n\tfallback implementations if possible\n\t* configure: Regenerated.\n\t* config.h.in: Regenerated.\n\n\t* math.m4 (GCC_CHECK_MATH_INLINE_BUILTIN_FALLBACK1,\n\tGCC_CHECK_MATH_INLINE_BUILTIN_FALLBACK2): New.", "tree": {"sha": "4a9e4d8e1017d6bc4c3f1de3eaff89af049d9c90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4a9e4d8e1017d6bc4c3f1de3eaff89af049d9c90"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1868599f8daf7798018ce8a8f314015f5a2ac520", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1868599f8daf7798018ce8a8f314015f5a2ac520", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1868599f8daf7798018ce8a8f314015f5a2ac520", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1868599f8daf7798018ce8a8f314015f5a2ac520/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "545f1addf7247a800bbb943650efaa4c35d3bd1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/545f1addf7247a800bbb943650efaa4c35d3bd1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/545f1addf7247a800bbb943650efaa4c35d3bd1d"}], "stats": {"total": 552, "additions": 551, "deletions": 1}, "files": [{"sha": "82b6d35ede7a4a2bb3fad115d3ad5f968733a275", "filename": "config/ChangeLog", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1868599f8daf7798018ce8a8f314015f5a2ac520/config%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1868599f8daf7798018ce8a8f314015f5a2ac520/config%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2FChangeLog?ref=1868599f8daf7798018ce8a8f314015f5a2ac520", "patch": "@@ -1,8 +1,14 @@\n+2020-04-22  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR libfortran/94694\n+\tPR libfortran/94586\n+\t* math.m4 (GCC_CHECK_MATH_INLINE_BUILTIN_FALLBACK1,\n+\tGCC_CHECK_MATH_INLINE_BUILTIN_FALLBACK2): New.\n+\n 2020-02-12  Sandra Loosemore  <sandra@codesourcery.com>\n \n \tPR libstdc++/79193\n \tPR libstdc++/88999\n-\n \t* no-executables.m4: Use a non-empty program to test for linker\n \tsupport.\n "}, {"sha": "e1e88d075edeec4ac7eb731878750596b14dc37c", "filename": "config/math.m4", "status": "modified", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1868599f8daf7798018ce8a8f314015f5a2ac520/config%2Fmath.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1868599f8daf7798018ce8a8f314015f5a2ac520/config%2Fmath.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2Fmath.m4?ref=1868599f8daf7798018ce8a8f314015f5a2ac520", "patch": "@@ -48,3 +48,67 @@ main ()\n                        [Define to 1 if you have the `$1' function.])\n   fi\n ])\n+\n+dnl GCC_CHECK_MATH_INLINE_BUILTIN_FALLBACK1([name], [type])\n+dnl\n+dnl Check if math function NAME fallback for function with single\n+dnl TYPE argument and TYPE result can be implemented using\n+dnl __builtin_NAME expanded inline without needing unavailable math\n+dnl library function.\n+AC_DEFUN([GCC_CHECK_MATH_INLINE_BUILTIN_FALLBACK1],\n+[\n+  AC_REQUIRE([GCC_CHECK_LIBM])\n+if test $gcc_cv_math_func_$1 = no; then\n+  AC_CACHE_CHECK([for inline __builtin_$1], [gcc_cv_math_inline_builtin_$1],\n+\t\t [AC_LINK_IFELSE([AC_LANG_SOURCE([\n+$2\n+$1_fallback ($2 x)\n+{\n+  return __builtin_$1 (x);\n+}\n+\n+int\n+main ()\n+{\n+  return 0;\n+}\n+])],\n+[gcc_cv_math_inline_builtin_$1=yes],\n+[gcc_cv_math_inline_builtin_$1=no])])\n+  if test $gcc_cv_math_inline_builtin_$1 = yes; then\n+    AC_DEFINE_UNQUOTED(AS_TR_CPP(HAVE_INLINE_BUILTIN_$1),[1],\n+\t      [Define to 1 if `__builtin_$1' is expanded inline.])\n+  fi\n+fi])\n+\n+dnl GCC_CHECK_MATH_INLINE_BUILTIN_FALLBACK2([name], [type])\n+dnl\n+dnl Check if math function NAME fallback for function with two\n+dnl TYPE arguments and TYPE result can be implemented using\n+dnl __builtin_NAME expanded inline without needing unavailable math\n+dnl library function.\n+AC_DEFUN([GCC_CHECK_MATH_INLINE_BUILTIN_FALLBACK2],\n+[\n+  AC_REQUIRE([GCC_CHECK_LIBM])\n+if test $gcc_cv_math_func_$1 = no; then\n+  AC_CACHE_CHECK([for inline __builtin_$1], [gcc_cv_math_inline_builtin_$1],\n+\t\t [AC_LINK_IFELSE([AC_LANG_SOURCE([\n+$2\n+$1_fallback ($2 x, $2 y)\n+{\n+  return __builtin_$1 (x, y);\n+}\n+\n+int\n+main ()\n+{\n+  return 0;\n+}\n+])],\n+[gcc_cv_math_inline_builtin_$1=yes],\n+[gcc_cv_math_inline_builtin_$1=no])])\n+  if test $gcc_cv_math_inline_builtin_$1 = yes; then\n+    AC_DEFINE_UNQUOTED(AS_TR_CPP(HAVE_INLINE_BUILTIN_$1),[1],\n+\t      [Define to 1 if `__builtin_$1' is expanded inline.])\n+  fi\n+fi])"}, {"sha": "e4d3756f0cab41e2a45f7f8eda116a110bde896d", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1868599f8daf7798018ce8a8f314015f5a2ac520/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1868599f8daf7798018ce8a8f314015f5a2ac520/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=1868599f8daf7798018ce8a8f314015f5a2ac520", "patch": "@@ -1,3 +1,18 @@\n+2020-04-22  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR libfortran/94694\n+\tPR libfortran/94586\n+\t* configure.ac: Add math func checks for fmaf, fma and fmal.  Add\n+\tHAVE_INLINE_BUILTIN_COPYSIGN check.\n+\t* c99_protos.h (copysign, fmaf, fma, fmal): Provide fallback\n+\tprototypes.\n+\t(HAVE_COPYSIGN, HAVE_FMAF, HAVE_FMA, HAVE_FMAL): Define if not\n+\tdefined and fallback version is provided.\n+\t* intrinsics/c99_functions.c (copysign, fmaf, fma, fmal): Provide\n+\tfallback implementations if possible\n+\t* configure: Regenerated.\n+\t* config.h.in: Regenerated.\n+\n 2020-04-19  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n \n \t* config/fpu-387.h (local_feraiseexcept) [__SSE_MATH__]:"}, {"sha": "1ffc645cfeb6dfd305dd1051b6dc660ed8ce4b6c", "filename": "libgfortran/c99_protos.h", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1868599f8daf7798018ce8a8f314015f5a2ac520/libgfortran%2Fc99_protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1868599f8daf7798018ce8a8f314015f5a2ac520/libgfortran%2Fc99_protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fc99_protos.h?ref=1868599f8daf7798018ce8a8f314015f5a2ac520", "patch": "@@ -71,6 +71,16 @@ extern float ceilf(float);\n extern float copysignf(float, float);\n #endif\n \n+#if !defined(HAVE_COPYSIGN) && defined(HAVE_INLINE_BUILTIN_COPYSIGN)\n+#define HAVE_COPYSIGN 1\n+extern double copysign(double, double);\n+#endif\n+\n+#if !defined(HAVE_COPYSIGNL) && defined(HAVE_INLINE_BUILTIN_COPYSIGNL)\n+#define HAVE_COPYSIGNL 1\n+extern long double copysignl(long double, long double);\n+#endif\n+\n #ifndef HAVE_COSF\n #define HAVE_COSF 1\n extern float cosf(float);\n@@ -91,6 +101,16 @@ extern float expf(float);\n extern float fabsf(float);\n #endif\n \n+#if !defined(HAVE_FABS) && defined(HAVE_INLINE_BUILTIN_FABS)\n+#define HAVE_FABS 1\n+extern double fabs(double);\n+#endif\n+\n+#if !defined(HAVE_FABSL) && defined(HAVE_INLINE_BUILTIN_FABSL)\n+#define HAVE_FABSL 1\n+extern long double fabsl(long double);\n+#endif\n+\n #ifndef HAVE_FLOORF\n #define HAVE_FLOORF 1\n extern float floorf(float);\n@@ -628,6 +648,20 @@ extern float tgammaf (float);\n extern float lgammaf (float);\n #endif\n \n+#ifndef HAVE_FMA\n+#define HAVE_FMA 1\n+extern double fma(double, double, double);\n+#endif\n+\n+#ifndef HAVE_FMAF\n+#define HAVE_FMAF 1\n+extern float fmaf(float, float, float);\n+#endif\n+\n+#ifndef HAVE_FMAL\n+#define HAVE_FMAL 1\n+extern long double fmal(long double, long double, long double);\n+#endif\n \n #endif  /* C99_PROTOS_H  */\n "}, {"sha": "2d58188e50ce1fbf38167d13d3202ea143f96c9c", "filename": "libgfortran/config.h.in", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1868599f8daf7798018ce8a8f314015f5a2ac520/libgfortran%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1868599f8daf7798018ce8a8f314015f5a2ac520/libgfortran%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfig.h.in?ref=1868599f8daf7798018ce8a8f314015f5a2ac520", "patch": "@@ -381,12 +381,21 @@\n /* Define to 1 if you have the `floorl' function. */\n #undef HAVE_FLOORL\n \n+/* Define to 1 if you have the `fma' function. */\n+#undef HAVE_FMA\n+\n /* Define if FMA3 instructions can be compiled. */\n #undef HAVE_FMA3\n \n /* Define if FMA4 instructions can be compiled. */\n #undef HAVE_FMA4\n \n+/* Define to 1 if you have the `fmaf' function. */\n+#undef HAVE_FMAF\n+\n+/* Define to 1 if you have the `fmal' function. */\n+#undef HAVE_FMAL\n+\n /* Define to 1 if you have the `fmod' function. */\n #undef HAVE_FMOD\n \n@@ -504,6 +513,18 @@\n /* Define to 1 if you have the <ieeefp.h> header file. */\n #undef HAVE_IEEEFP_H\n \n+/* Define to 1 if `__builtin_copysign' is expanded inline. */\n+#undef HAVE_INLINE_BUILTIN_COPYSIGN\n+\n+/* Define to 1 if `__builtin_copysignl' is expanded inline. */\n+#undef HAVE_INLINE_BUILTIN_COPYSIGNL\n+\n+/* Define to 1 if `__builtin_fabs' is expanded inline. */\n+#undef HAVE_INLINE_BUILTIN_FABS\n+\n+/* Define to 1 if `__builtin_fabsl' is expanded inline. */\n+#undef HAVE_INLINE_BUILTIN_FABSL\n+\n /* Define to 1 if the system has the type `intptr_t'. */\n #undef HAVE_INTPTR_T\n "}, {"sha": "b4cf854ddb399ae206b96a5f0924f19d935ad7c4", "filename": "libgfortran/configure", "status": "modified", "additions": 325, "deletions": 0, "changes": 325, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1868599f8daf7798018ce8a8f314015f5a2ac520/libgfortran%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1868599f8daf7798018ce8a8f314015f5a2ac520/libgfortran%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure?ref=1868599f8daf7798018ce8a8f314015f5a2ac520", "patch": "@@ -19848,6 +19848,150 @@ _ACEOF\n \n \n \n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for fmaf\" >&5\n+$as_echo_n \"checking for fmaf... \" >&6; }\n+if ${gcc_cv_math_func_fmaf+:} false; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  if test x$gcc_no_link = xyes; then\n+  as_fn_error $? \"Link tests are not allowed after GCC_NO_EXECUTABLES.\" \"$LINENO\" 5\n+fi\n+cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+#ifdef HAVE_COMPLEX_H\n+#include <complex.h>\n+#endif\n+#ifdef HAVE_MATH_H\n+#include <math.h>\n+#endif\n+\n+int (*ptr)() = (int (*)())fmaf;\n+\n+int\n+main ()\n+{\n+  return 0;\n+}\n+\n+_ACEOF\n+if ac_fn_c_try_link \"$LINENO\"; then :\n+  gcc_cv_math_func_fmaf=yes\n+else\n+  gcc_cv_math_func_fmaf=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext \\\n+    conftest$ac_exeext conftest.$ac_ext\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_math_func_fmaf\" >&5\n+$as_echo \"$gcc_cv_math_func_fmaf\" >&6; }\n+  if test $gcc_cv_math_func_fmaf = yes; then\n+\n+cat >>confdefs.h <<_ACEOF\n+#define HAVE_FMAF 1\n+_ACEOF\n+\n+  fi\n+\n+\n+\n+\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for fma\" >&5\n+$as_echo_n \"checking for fma... \" >&6; }\n+if ${gcc_cv_math_func_fma+:} false; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  if test x$gcc_no_link = xyes; then\n+  as_fn_error $? \"Link tests are not allowed after GCC_NO_EXECUTABLES.\" \"$LINENO\" 5\n+fi\n+cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+#ifdef HAVE_COMPLEX_H\n+#include <complex.h>\n+#endif\n+#ifdef HAVE_MATH_H\n+#include <math.h>\n+#endif\n+\n+int (*ptr)() = (int (*)())fma;\n+\n+int\n+main ()\n+{\n+  return 0;\n+}\n+\n+_ACEOF\n+if ac_fn_c_try_link \"$LINENO\"; then :\n+  gcc_cv_math_func_fma=yes\n+else\n+  gcc_cv_math_func_fma=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext \\\n+    conftest$ac_exeext conftest.$ac_ext\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_math_func_fma\" >&5\n+$as_echo \"$gcc_cv_math_func_fma\" >&6; }\n+  if test $gcc_cv_math_func_fma = yes; then\n+\n+cat >>confdefs.h <<_ACEOF\n+#define HAVE_FMA 1\n+_ACEOF\n+\n+  fi\n+\n+\n+\n+\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for fmal\" >&5\n+$as_echo_n \"checking for fmal... \" >&6; }\n+if ${gcc_cv_math_func_fmal+:} false; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  if test x$gcc_no_link = xyes; then\n+  as_fn_error $? \"Link tests are not allowed after GCC_NO_EXECUTABLES.\" \"$LINENO\" 5\n+fi\n+cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+#ifdef HAVE_COMPLEX_H\n+#include <complex.h>\n+#endif\n+#ifdef HAVE_MATH_H\n+#include <math.h>\n+#endif\n+\n+int (*ptr)() = (int (*)())fmal;\n+\n+int\n+main ()\n+{\n+  return 0;\n+}\n+\n+_ACEOF\n+if ac_fn_c_try_link \"$LINENO\"; then :\n+  gcc_cv_math_func_fmal=yes\n+else\n+  gcc_cv_math_func_fmal=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext \\\n+    conftest$ac_exeext conftest.$ac_ext\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_math_func_fmal\" >&5\n+$as_echo \"$gcc_cv_math_func_fmal\" >&6; }\n+  if test $gcc_cv_math_func_fmal = yes; then\n+\n+cat >>confdefs.h <<_ACEOF\n+#define HAVE_FMAL 1\n+_ACEOF\n+\n+  fi\n+\n+\n+\n+\n   { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for fmodf\" >&5\n $as_echo_n \"checking for fmodf... \" >&6; }\n if ${gcc_cv_math_func_fmodf+:} false; then :\n@@ -25559,6 +25703,187 @@ $as_echo \"#define HAVE_CLOG 1\" >>confdefs.h\n fi\n \n \n+\n+\n+if test $gcc_cv_math_func_copysign = no; then\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for inline __builtin_copysign\" >&5\n+$as_echo_n \"checking for inline __builtin_copysign... \" >&6; }\n+if ${gcc_cv_math_inline_builtin_copysign+:} false; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  if test x$gcc_no_link = xyes; then\n+  as_fn_error $? \"Link tests are not allowed after GCC_NO_EXECUTABLES.\" \"$LINENO\" 5\n+fi\n+cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+double\n+copysign_fallback (double x, double y)\n+{\n+  return __builtin_copysign (x, y);\n+}\n+\n+int\n+main ()\n+{\n+  return 0;\n+}\n+\n+_ACEOF\n+if ac_fn_c_try_link \"$LINENO\"; then :\n+  gcc_cv_math_inline_builtin_copysign=yes\n+else\n+  gcc_cv_math_inline_builtin_copysign=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext \\\n+    conftest$ac_exeext conftest.$ac_ext\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_math_inline_builtin_copysign\" >&5\n+$as_echo \"$gcc_cv_math_inline_builtin_copysign\" >&6; }\n+  if test $gcc_cv_math_inline_builtin_copysign = yes; then\n+\n+cat >>confdefs.h <<_ACEOF\n+#define HAVE_INLINE_BUILTIN_COPYSIGN 1\n+_ACEOF\n+\n+  fi\n+fi\n+\n+\n+if test $gcc_cv_math_func_copysignl = no; then\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for inline __builtin_copysignl\" >&5\n+$as_echo_n \"checking for inline __builtin_copysignl... \" >&6; }\n+if ${gcc_cv_math_inline_builtin_copysignl+:} false; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  if test x$gcc_no_link = xyes; then\n+  as_fn_error $? \"Link tests are not allowed after GCC_NO_EXECUTABLES.\" \"$LINENO\" 5\n+fi\n+cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+long double\n+copysignl_fallback (long double x, long double y)\n+{\n+  return __builtin_copysignl (x, y);\n+}\n+\n+int\n+main ()\n+{\n+  return 0;\n+}\n+\n+_ACEOF\n+if ac_fn_c_try_link \"$LINENO\"; then :\n+  gcc_cv_math_inline_builtin_copysignl=yes\n+else\n+  gcc_cv_math_inline_builtin_copysignl=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext \\\n+    conftest$ac_exeext conftest.$ac_ext\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_math_inline_builtin_copysignl\" >&5\n+$as_echo \"$gcc_cv_math_inline_builtin_copysignl\" >&6; }\n+  if test $gcc_cv_math_inline_builtin_copysignl = yes; then\n+\n+cat >>confdefs.h <<_ACEOF\n+#define HAVE_INLINE_BUILTIN_COPYSIGNL 1\n+_ACEOF\n+\n+  fi\n+fi\n+\n+\n+if test $gcc_cv_math_func_fabs = no; then\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for inline __builtin_fabs\" >&5\n+$as_echo_n \"checking for inline __builtin_fabs... \" >&6; }\n+if ${gcc_cv_math_inline_builtin_fabs+:} false; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  if test x$gcc_no_link = xyes; then\n+  as_fn_error $? \"Link tests are not allowed after GCC_NO_EXECUTABLES.\" \"$LINENO\" 5\n+fi\n+cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+double\n+fabs_fallback (double x)\n+{\n+  return __builtin_fabs (x);\n+}\n+\n+int\n+main ()\n+{\n+  return 0;\n+}\n+\n+_ACEOF\n+if ac_fn_c_try_link \"$LINENO\"; then :\n+  gcc_cv_math_inline_builtin_fabs=yes\n+else\n+  gcc_cv_math_inline_builtin_fabs=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext \\\n+    conftest$ac_exeext conftest.$ac_ext\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_math_inline_builtin_fabs\" >&5\n+$as_echo \"$gcc_cv_math_inline_builtin_fabs\" >&6; }\n+  if test $gcc_cv_math_inline_builtin_fabs = yes; then\n+\n+cat >>confdefs.h <<_ACEOF\n+#define HAVE_INLINE_BUILTIN_FABS 1\n+_ACEOF\n+\n+  fi\n+fi\n+\n+\n+if test $gcc_cv_math_func_fabsl = no; then\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for inline __builtin_fabsl\" >&5\n+$as_echo_n \"checking for inline __builtin_fabsl... \" >&6; }\n+if ${gcc_cv_math_inline_builtin_fabsl+:} false; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  if test x$gcc_no_link = xyes; then\n+  as_fn_error $? \"Link tests are not allowed after GCC_NO_EXECUTABLES.\" \"$LINENO\" 5\n+fi\n+cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+long double\n+fabsl_fallback (long double x)\n+{\n+  return __builtin_fabsl (x);\n+}\n+\n+int\n+main ()\n+{\n+  return 0;\n+}\n+\n+_ACEOF\n+if ac_fn_c_try_link \"$LINENO\"; then :\n+  gcc_cv_math_inline_builtin_fabsl=yes\n+else\n+  gcc_cv_math_inline_builtin_fabsl=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext \\\n+    conftest$ac_exeext conftest.$ac_ext\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_math_inline_builtin_fabsl\" >&5\n+$as_echo \"$gcc_cv_math_inline_builtin_fabsl\" >&6; }\n+  if test $gcc_cv_math_inline_builtin_fabsl = yes; then\n+\n+cat >>confdefs.h <<_ACEOF\n+#define HAVE_INLINE_BUILTIN_FABSL 1\n+_ACEOF\n+\n+  fi\n+fi\n+\n # Check whether the system has a working stat()\n \n   { $as_echo \"$as_me:${as_lineno-$LINENO}: checking whether the target stat is reliable\" >&5"}, {"sha": "711dc60ff78e97c13b3b86db69e2aa2b2d290b76", "filename": "libgfortran/configure.ac", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1868599f8daf7798018ce8a8f314015f5a2ac520/libgfortran%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1868599f8daf7798018ce8a8f314015f5a2ac520/libgfortran%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure.ac?ref=1868599f8daf7798018ce8a8f314015f5a2ac520", "patch": "@@ -392,6 +392,9 @@ GCC_CHECK_MATH_FUNC([cabsl])\n GCC_CHECK_MATH_FUNC([floorf])\n GCC_CHECK_MATH_FUNC([floor])\n GCC_CHECK_MATH_FUNC([floorl])\n+GCC_CHECK_MATH_FUNC([fmaf])\n+GCC_CHECK_MATH_FUNC([fma])\n+GCC_CHECK_MATH_FUNC([fmal])\n GCC_CHECK_MATH_FUNC([fmodf])\n GCC_CHECK_MATH_FUNC([fmod])\n GCC_CHECK_MATH_FUNC([fmodl])\n@@ -516,6 +519,11 @@ GCC_CHECK_MATH_FUNC([catanl])\n # On AIX, clog is present in libm as __clog\n AC_CHECK_LIB([m],[__clog],[AC_DEFINE([HAVE_CLOG],[1],[libm includes clog])])\n \n+GCC_CHECK_MATH_INLINE_BUILTIN_FALLBACK2([copysign], [double])\n+GCC_CHECK_MATH_INLINE_BUILTIN_FALLBACK2([copysignl], [long double])\n+GCC_CHECK_MATH_INLINE_BUILTIN_FALLBACK1([fabs], [double])\n+GCC_CHECK_MATH_INLINE_BUILTIN_FALLBACK1([fabsl], [long double])\n+\n # Check whether the system has a working stat()\n LIBGFOR_CHECK_WORKING_STAT\n "}, {"sha": "b75d1777c4c098e84665d6f1793ff3710872f76b", "filename": "libgfortran/intrinsics/c99_functions.c", "status": "modified", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1868599f8daf7798018ce8a8f314015f5a2ac520/libgfortran%2Fintrinsics%2Fc99_functions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1868599f8daf7798018ce8a8f314015f5a2ac520/libgfortran%2Fintrinsics%2Fc99_functions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fc99_functions.c?ref=1868599f8daf7798018ce8a8f314015f5a2ac520", "patch": "@@ -229,6 +229,17 @@ ceilf (float x)\n }\n #endif\n \n+#if !defined(HAVE_COPYSIGN) && defined(HAVE_INLINE_BUILTIN_COPYSIGN)\n+#define HAVE_COPYSIGN 1\n+double copysign (double x, double y);\n+\n+double\n+copysign (double x, double y)\n+{\n+  return __builtin_copysign (x, y);\n+}\n+#endif\n+\n #ifndef HAVE_COPYSIGNF\n #define HAVE_COPYSIGNF 1\n float copysignf (float x, float y);\n@@ -240,6 +251,17 @@ copysignf (float x, float y)\n }\n #endif\n \n+#if !defined(HAVE_COPYSIGNL) && defined(HAVE_INLINE_BUILTIN_COPYSIGNL)\n+#define HAVE_COPYSIGNL 1\n+long double copysignl (long double x, long double y);\n+\n+long double\n+copysignl (long double x, long double y)\n+{\n+  return __builtin_copysignl (x, y);\n+}\n+#endif\n+\n #ifndef HAVE_COSF\n #define HAVE_COSF 1\n float cosf (float x);\n@@ -273,6 +295,17 @@ expf (float x)\n }\n #endif\n \n+#if !defined(HAVE_FABS) && defined(HAVE_INLINE_BUILTIN_FABS)\n+#define HAVE_FABS 1\n+double fabs (double x);\n+\n+double\n+fabs (double x)\n+{\n+  return __builtin_fabs (x);\n+}\n+#endif\n+\n #ifndef HAVE_FABSF\n #define HAVE_FABSF 1\n float fabsf (float x);\n@@ -284,6 +317,17 @@ fabsf (float x)\n }\n #endif\n \n+#if !defined(HAVE_FABSL) && defined(HAVE_INLINE_BUILTIN_FABSL)\n+#define HAVE_FABSL 1\n+long double fabsl (long double x);\n+\n+long double\n+fabsl (long double x)\n+{\n+  return __builtin_fabsl (x);\n+}\n+#endif\n+\n #ifndef HAVE_FLOORF\n #define HAVE_FLOORF 1\n float floorf (float x);\n@@ -2112,3 +2156,36 @@ lgammaf (float x)\n   return (float) lgamma ((double) x);\n }\n #endif\n+\n+#ifndef HAVE_FMA\n+#define HAVE_FMA 1\n+double fma (double, double, double);\n+\n+double\n+fma (double x, double y, double z)\n+{\n+  return x * y + z;\n+}\n+#endif\n+\n+#ifndef HAVE_FMAF\n+#define HAVE_FMAF 1\n+float fmaf (float, float, float);\n+\n+float\n+fmaf (float x, float y, float z)\n+{\n+  return fma (x, y, z);\n+}\n+#endif\n+\n+#ifndef HAVE_FMAL\n+#define HAVE_FMAL 1\n+long double fmal (long double, long double, long double);\n+\n+long double\n+fmal (long double x, long double y, long double z)\n+{\n+  return x * y + z;\n+}\n+#endif"}]}