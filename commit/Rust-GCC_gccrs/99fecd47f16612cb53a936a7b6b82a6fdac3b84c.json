{"sha": "99fecd47f16612cb53a936a7b6b82a6fdac3b84c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTlmZWNkNDdmMTY2MTJjYjUzYTkzNmE3YjZiODJhNmZkYWMzYjg0Yw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2010-07-15T10:01:07Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2010-07-15T10:01:07Z"}, "message": "cgraph.c: Include lto-streamer.h\n\n\n\t* cgraph.c: Include lto-streamer.h\n\t(change_decl_assembler_name): Work when assembler name hash is at place.\n\t(cgraph_make_decl_local): When localizing COMDAT symbol at WPA stage, be\n\tsure to rename it to avoid name clash.\n\t* ipa.c (cgraph_externally_visible_p, function_and_variable_visibility):\n\tLocalize hidden symbols only when locally defined.\n\nFrom-SVN: r162211", "tree": {"sha": "11277a792886817993fe98270d49a0e11e619778", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/11277a792886817993fe98270d49a0e11e619778"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/99fecd47f16612cb53a936a7b6b82a6fdac3b84c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99fecd47f16612cb53a936a7b6b82a6fdac3b84c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99fecd47f16612cb53a936a7b6b82a6fdac3b84c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99fecd47f16612cb53a936a7b6b82a6fdac3b84c/comments", "author": null, "committer": null, "parents": [{"sha": "79c743005119639f4d30b82a708613a072e26681", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79c743005119639f4d30b82a708613a072e26681", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79c743005119639f4d30b82a708613a072e26681"}], "stats": {"total": 97, "additions": 85, "deletions": 12}, "files": [{"sha": "5efdf1a24cd59bc05e1c6bb3e992d1f75e6f200f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99fecd47f16612cb53a936a7b6b82a6fdac3b84c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99fecd47f16612cb53a936a7b6b82a6fdac3b84c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=99fecd47f16612cb53a936a7b6b82a6fdac3b84c", "patch": "@@ -1,3 +1,12 @@\n+2010-07-15  Jan Hubicka  <jh@suse.cz>\n+\n+\t* cgraph.c: Include lto-streamer.h\n+\t(change_decl_assembler_name): Work when assembler name hash is at place.\n+\t(cgraph_make_decl_local): When localizing COMDAT symbol at WPA stage, be\n+\tsure to rename it to avoid name clash.\n+\t* ipa.c (cgraph_externally_visible_p, function_and_variable_visibility):\n+\tLocalize hidden symbols only when locally defined.\n+\n 2010-07-15  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.h (SHIFT_COUNT_TRUNCATED): Expand comment."}, {"sha": "66a88db4610bac79fa9dd89c42ab70eb3c581ce3", "filename": "gcc/cgraph.c", "status": "modified", "additions": 68, "deletions": 10, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99fecd47f16612cb53a936a7b6b82a6fdac3b84c/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99fecd47f16612cb53a936a7b6b82a6fdac3b84c/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=99fecd47f16612cb53a936a7b6b82a6fdac3b84c", "patch": "@@ -97,6 +97,7 @@ The callgraph:\n #include \"diagnostic-core.h\"\n #include \"rtl.h\"\n #include \"ipa-utils.h\"\n+#include \"lto-streamer.h\"\n \n static void cgraph_node_remove_callers (struct cgraph_node *node);\n static inline void cgraph_edge_remove_caller (struct cgraph_edge *e);\n@@ -1975,20 +1976,43 @@ debug_cgraph (void)\n void\n change_decl_assembler_name (tree decl, tree name)\n {\n-  gcc_assert (!assembler_name_hash);\n+  struct cgraph_node *node;\n+  void **slot;\n   if (!DECL_ASSEMBLER_NAME_SET_P (decl))\n+    SET_DECL_ASSEMBLER_NAME (decl, name);\n+  else\n     {\n-      SET_DECL_ASSEMBLER_NAME (decl, name);\n-      return;\n-    }\n-  if (name == DECL_ASSEMBLER_NAME (decl))\n-    return;\n+      if (name == DECL_ASSEMBLER_NAME (decl))\n+\treturn;\n \n-  if (TREE_SYMBOL_REFERENCED (DECL_ASSEMBLER_NAME (decl))\n-      && DECL_RTL_SET_P (decl))\n-    warning (0, \"%D renamed after being referenced in assembly\", decl);\n+      if (assembler_name_hash\n+\t  && TREE_CODE (decl) == FUNCTION_DECL\n+\t  && (node = cgraph_get_node_or_alias (decl)) != NULL)\n+\t{\n+\t  tree old_name = DECL_ASSEMBLER_NAME (decl);\n+\t  slot = htab_find_slot_with_hash (assembler_name_hash, old_name,\n+\t\t\t\t\t   decl_assembler_name_hash (old_name),\n+\t\t\t\t\t   NO_INSERT);\n+\t  /* Inline clones are not hashed.  */\n+\t  if (slot && *slot == node)\n+\t    htab_clear_slot (assembler_name_hash, slot);\n+\t}\n+      if (TREE_SYMBOL_REFERENCED (DECL_ASSEMBLER_NAME (decl))\n+\t  && DECL_RTL_SET_P (decl))\n+\twarning (0, \"%D renamed after being referenced in assembly\", decl);\n \n-  SET_DECL_ASSEMBLER_NAME (decl, name);\n+      SET_DECL_ASSEMBLER_NAME (decl, name);\n+    }\n+  if (assembler_name_hash\n+      && TREE_CODE (decl) == FUNCTION_DECL\n+      && (node = cgraph_get_node_or_alias (decl)) != NULL)\n+    {\n+      slot = htab_find_slot_with_hash (assembler_name_hash, name,\n+\t\t\t\t       decl_assembler_name_hash (name),\n+\t\t\t\t       INSERT);\n+      gcc_assert (!*slot);\n+      *slot = node;\n+    }\n }\n \n /* Add a top-level asm statement to the list.  */\n@@ -2459,6 +2483,40 @@ cgraph_make_decl_local (tree decl)\n \n   if (DECL_COMDAT (decl))\n     {\n+      /* It is possible that we are linking against library defining same COMDAT\n+\t function.  To avoid conflict we need to rename our local name of the\n+\t function just in the case WHOPR partitioning decide to make it hidden\n+\t to avoid cross partition references.  */\n+      if (flag_wpa)\n+\t{\n+\t  const char *old_name;\n+\n+\t  old_name  = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl));\n+\t  if (TREE_CODE (decl) == FUNCTION_DECL)\n+\t    {\n+\t      struct cgraph_node *node = cgraph_get_node_or_alias (decl);\n+\t      change_decl_assembler_name (decl,\n+\t\t\t\t\t  clone_function_name (decl, \"local\"));\n+\t      if (node->local.lto_file_data)\n+\t\tlto_record_renamed_decl (node->local.lto_file_data,\n+\t\t\t\t\t old_name,\n+\t\t\t\t\t IDENTIFIER_POINTER\n+\t\t\t\t\t   (DECL_ASSEMBLER_NAME (decl)));\n+\t    }\n+\t  else if (TREE_CODE (decl) == VAR_DECL)\n+\t    {\n+\t      struct varpool_node *vnode = varpool_get_node (decl);\n+\t      /* change_decl_assembler_name will warn here on vtables because\n+\t\t C++ frontend still sets TREE_SYMBOL_REFERENCED on them.  */\n+\t      SET_DECL_ASSEMBLER_NAME (decl,\n+\t\t\t\t       clone_function_name (decl, \"local\"));\n+\t      if (vnode->lto_file_data)\n+\t\tlto_record_renamed_decl (vnode->lto_file_data,\n+\t\t\t\t\t old_name,\n+\t\t\t\t\t IDENTIFIER_POINTER\n+\t\t\t\t\t   (DECL_ASSEMBLER_NAME (decl)));\n+\t    }\n+\t}\n       DECL_SECTION_NAME (decl) = 0;\n       DECL_COMDAT (decl) = 0;\n     }"}, {"sha": "4be3fcfc95919af836a3f9311038cc1bc70c421b", "filename": "gcc/ipa.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99fecd47f16612cb53a936a7b6b82a6fdac3b84c/gcc%2Fipa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99fecd47f16612cb53a936a7b6b82a6fdac3b84c/gcc%2Fipa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa.c?ref=99fecd47f16612cb53a936a7b6b82a6fdac3b84c", "patch": "@@ -582,7 +582,10 @@ cgraph_externally_visible_p (struct cgraph_node *node, bool whole_program, bool\n     return true;\n \n   /* When doing link time optimizations, hidden symbols become local.  */\n-  if (in_lto_p && DECL_VISIBILITY (node->decl) == VISIBILITY_HIDDEN)\n+  if (in_lto_p && DECL_VISIBILITY (node->decl) == VISIBILITY_HIDDEN\n+      /* Be sure that node is defined in IR file, not in other object\n+\t file.  In that case we don't set used_from_other_object_file.  */\n+      && node->analyzed)\n     ;\n   else if (!whole_program)\n     return true;\n@@ -779,7 +782,10 @@ function_and_variable_visibility (bool whole_program)\n \t       /* When doing linktime optimizations, all hidden symbols will\n \t\t  become local.  */\n \t       && (!in_lto_p\n-\t\t   || DECL_VISIBILITY (vnode->decl) != VISIBILITY_HIDDEN))\n+\t\t   || DECL_VISIBILITY (vnode->decl) != VISIBILITY_HIDDEN\n+\t\t   /* We can get prevailing decision in other object file.\n+\t\t      In this case we do not sed used_from_object_file.  */\n+\t\t   || !vnode->finalized))\n               || vnode->used_from_object_file\n \t      || pointer_set_contains (aliased_vnodes, vnode)\n \t      || lookup_attribute (\"externally_visible\","}]}