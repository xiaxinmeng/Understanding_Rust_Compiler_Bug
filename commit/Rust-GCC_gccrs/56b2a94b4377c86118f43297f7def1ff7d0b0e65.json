{"sha": "56b2a94b4377c86118f43297f7def1ff7d0b0e65", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTZiMmE5NGI0Mzc3Yzg2MTE4ZjQzMjk3ZjdkZWYxZmY3ZDBiMGU2NQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2017-06-29T14:38:09Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2017-06-29T14:38:09Z"}, "message": "call.c (check_dtor_name): Use constructor_name for enums too.\n\n\t* call.c (check_dtor_name): Use constructor_name for enums too.\n\t(build_new_method_call_1): Use constructor_name for cdtors and\n\tshow ~ for dtor.\n\t* class.c (build_self_reference): Use TYPE_NAME to get name of\n\tself reference.\n\t* name-lookup (constructor_name): Use DECL_NAME directly.\n\t(constructor_name_p): Reimplement.\n\t(push_class_level_binding_1): Use TYPE_NAME directly.\n\nFrom-SVN: r249789", "tree": {"sha": "2fba0f27577752747ea9c39055b84df584d17c17", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2fba0f27577752747ea9c39055b84df584d17c17"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/56b2a94b4377c86118f43297f7def1ff7d0b0e65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56b2a94b4377c86118f43297f7def1ff7d0b0e65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56b2a94b4377c86118f43297f7def1ff7d0b0e65", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56b2a94b4377c86118f43297f7def1ff7d0b0e65/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "79a2e690b4654e88437aa40627f24068dc5216f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79a2e690b4654e88437aa40627f24068dc5216f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79a2e690b4654e88437aa40627f24068dc5216f5"}], "stats": {"total": 43, "additions": 23, "deletions": 20}, "files": [{"sha": "cd1252beeda0c3bc130afc90358a1461788d919f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56b2a94b4377c86118f43297f7def1ff7d0b0e65/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56b2a94b4377c86118f43297f7def1ff7d0b0e65/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=56b2a94b4377c86118f43297f7def1ff7d0b0e65", "patch": "@@ -1,5 +1,14 @@\n 2017-06-29  Nathan Sidwell  <nathan@acm.org>\n \n+\t* call.c (check_dtor_name): Use constructor_name for enums too.\n+\t(build_new_method_call_1): Use constructor_name for cdtors and\n+\tshow ~ for dtor.\n+\t* class.c (build_self_reference): Use TYPE_NAME to get name of\n+\tself reference.\n+\t* name-lookup (constructor_name): Use DECL_NAME directly.\n+\t(constructor_name_p): Reimplement.\n+\t(push_class_level_binding_1): Use TYPE_NAME directly.\n+\n \t* class.c (finish_struct): Use OVL_P.\n \t(get_vfield_name): Measure constructor_name length.\n \t* cp-tree.h (SET_CLASS_TYPE_P): Add RECORD_OR_UNION_CHECK."}, {"sha": "06758203b89e7682f8ab441d8f67f3ae0b08c021", "filename": "gcc/cp/call.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56b2a94b4377c86118f43297f7def1ff7d0b0e65/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56b2a94b4377c86118f43297f7def1ff7d0b0e65/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=56b2a94b4377c86118f43297f7def1ff7d0b0e65", "patch": "@@ -231,9 +231,8 @@ check_dtor_name (tree basetype, tree name)\n   else if (identifier_p (name))\n     {\n       if ((MAYBE_CLASS_TYPE_P (basetype)\n-\t   && name == constructor_name (basetype))\n-\t  || (TREE_CODE (basetype) == ENUMERAL_TYPE\n-\t      && name == TYPE_IDENTIFIER (basetype)))\n+\t   || TREE_CODE (basetype) == ENUMERAL_TYPE)\n+\t  && name == constructor_name (basetype))\n \treturn true;\n       else\n \tname = get_type_value (name);\n@@ -9139,17 +9138,18 @@ build_new_method_call_1 (tree instance, tree fns, vec<tree, va_gc> **args,\n \t    {\n \t      tree arglist = build_tree_list_vec (user_args);\n \t      tree errname = name;\n+\t      bool twiddle = false;\n \t      if (IDENTIFIER_CDTOR_P (errname))\n \t\t{\n-\t\t  tree fn = DECL_ORIGIN (OVL_FIRST (fns));\n-\t\t  errname = DECL_NAME (fn);\n+\t\t  twiddle = IDENTIFIER_DTOR_P (errname);\n+\t\t  errname = constructor_name (basetype);\n \t\t}\n \t      if (explicit_targs)\n \t\terrname = lookup_template_function (errname, explicit_targs);\n \t      if (skip_first_for_error)\n \t\targlist = TREE_CHAIN (arglist);\n-\t      error (\"no matching function for call to %<%T::%E(%A)%#V%>\",\n-\t\t     basetype, errname, arglist,\n+\t      error (\"no matching function for call to %<%T::%s%E(%A)%#V%>\",\n+\t\t     basetype, &\"~\"[!twiddle], errname, arglist,\n \t\t     TREE_TYPE (instance));\n \t    }\n \t  print_z_candidates (location_of (name), candidates);"}, {"sha": "c7ea3f4f5002c22a39429385cd97d9d41fc857ff", "filename": "gcc/cp/class.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56b2a94b4377c86118f43297f7def1ff7d0b0e65/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56b2a94b4377c86118f43297f7def1ff7d0b0e65/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=56b2a94b4377c86118f43297f7def1ff7d0b0e65", "patch": "@@ -8550,9 +8550,8 @@ print_class_statistics (void)\n void\n build_self_reference (void)\n {\n-  tree name = constructor_name (current_class_type);\n+  tree name = DECL_NAME (TYPE_NAME (current_class_type));\n   tree value = build_lang_decl (TYPE_DECL, name, current_class_type);\n-  tree saved_cas;\n \n   DECL_NONLOCAL (value) = 1;\n   DECL_CONTEXT (value) = current_class_type;\n@@ -8563,7 +8562,7 @@ build_self_reference (void)\n   if (processing_template_decl)\n     value = push_template_decl (value);\n \n-  saved_cas = current_access_specifier;\n+  tree saved_cas = current_access_specifier;\n   current_access_specifier = access_public_node;\n   finish_member_declaration (value);\n   current_access_specifier = saved_cas;"}, {"sha": "1f492a4898f8896df544cbc7e66825c36aa17486", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56b2a94b4377c86118f43297f7def1ff7d0b0e65/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56b2a94b4377c86118f43297f7def1ff7d0b0e65/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=56b2a94b4377c86118f43297f7def1ff7d0b0e65", "patch": "@@ -3188,7 +3188,9 @@ set_identifier_type_value (tree id, tree decl)\n tree\n constructor_name (tree type)\n {\n-  return TYPE_IDENTIFIER (TYPE_MAIN_VARIANT (type));\n+  tree decl = TYPE_NAME (TYPE_MAIN_VARIANT (type));\n+\n+  return decl ? DECL_NAME (decl) : NULL_TREE;\n }\n \n /* Returns TRUE if NAME is the name for the constructor for TYPE,\n@@ -3199,19 +3201,12 @@ constructor_name_p (tree name, tree type)\n {\n   gcc_assert (MAYBE_CLASS_TYPE_P (type));\n \n-  if (!name)\n-    return false;\n-\n-  if (!identifier_p (name))\n-    return false;\n-\n   /* These don't have names.  */\n   if (TREE_CODE (type) == DECLTYPE_TYPE\n       || TREE_CODE (type) == TYPEOF_TYPE)\n     return false;\n \n-  tree ctor_name = constructor_name (type);\n-  if (name == ctor_name)\n+  if (name && name == constructor_name (type))\n     return true;\n \n   return false;\n@@ -3962,7 +3957,7 @@ push_class_level_binding_1 (tree name, tree x)\n        /* A data member of an anonymous union.  */\n        || (TREE_CODE (x) == FIELD_DECL\n \t   && DECL_CONTEXT (x) != current_class_type))\n-      && DECL_NAME (x) == constructor_name (current_class_type))\n+      && DECL_NAME (x) == DECL_NAME (TYPE_NAME (current_class_type)))\n     {\n       tree scope = context_for_name_lookup (x);\n       if (TYPE_P (scope) && same_type_p (scope, current_class_type))"}]}