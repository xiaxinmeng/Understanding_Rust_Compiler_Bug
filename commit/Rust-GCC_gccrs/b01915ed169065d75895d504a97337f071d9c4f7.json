{"sha": "b01915ed169065d75895d504a97337f071d9c4f7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjAxOTE1ZWQxNjkwNjVkNzU4OTVkNTA0YTk3MzM3ZjA3MWQ5YzRmNw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-03-22T08:28:49Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-03-22T08:28:49Z"}, "message": "re PR target/70329 (wrong code with -mavx512bw and 64byte vectors)\n\n\tPR target/70329\n\t* config/i386/i386.c (ix86_expand_vecop_qihi): Don't bother computing\n\td.perm[i] for i >= d.nelt.  If not full_interleave, compute d.perm[i]\n\tin a way that works also for AVX512BW.\n\n\t* gcc.target/i386/avx512bw-pr70329-1.c: New test.\n\t* gcc.target/i386/avx512bw-pr70329-2.c: New test.\n\nFrom-SVN: r234394", "tree": {"sha": "00376c15a56bd48797743cba1135cd15e27ce6fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/00376c15a56bd48797743cba1135cd15e27ce6fb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b01915ed169065d75895d504a97337f071d9c4f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b01915ed169065d75895d504a97337f071d9c4f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b01915ed169065d75895d504a97337f071d9c4f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b01915ed169065d75895d504a97337f071d9c4f7/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4e3e2cf17dda5d1ded1fb49822a1f0fb563b47c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e3e2cf17dda5d1ded1fb49822a1f0fb563b47c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e3e2cf17dda5d1ded1fb49822a1f0fb563b47c5"}], "stats": {"total": 85, "additions": 81, "deletions": 4}, "files": [{"sha": "6dc6643b51e23417fefa017522dc45492316e114", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b01915ed169065d75895d504a97337f071d9c4f7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b01915ed169065d75895d504a97337f071d9c4f7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b01915ed169065d75895d504a97337f071d9c4f7", "patch": "@@ -1,5 +1,10 @@\n 2016-03-22  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR target/70329\n+\t* config/i386/i386.c (ix86_expand_vecop_qihi): Don't bother computing\n+\td.perm[i] for i >= d.nelt.  If not full_interleave, compute d.perm[i]\n+\tin a way that works also for AVX512BW.\n+\n \tPR target/70300\n \t* config/i386/i386.md (cvtsd2ss splitter): Unpack in destination\n \tinstead of source if operands[1] is xmm16 and above and"}, {"sha": "a4aad4feafacc7534723df7740788d222a9ead86", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b01915ed169065d75895d504a97337f071d9c4f7/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b01915ed169065d75895d504a97337f071d9c4f7/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=b01915ed169065d75895d504a97337f071d9c4f7", "patch": "@@ -51910,16 +51910,24 @@ ix86_expand_vecop_qihi (enum rtx_code code, rtx dest, rtx op1, rtx op2)\n     {\n       /* For SSE2, we used an full interleave, so the desired\n \t results are in the even elements.  */\n-      for (i = 0; i < 64; ++i)\n+      for (i = 0; i < d.nelt; ++i)\n \td.perm[i] = i * 2;\n     }\n   else\n     {\n       /* For AVX, the interleave used above was not cross-lane.  So the\n \t extraction is evens but with the second and third quarter swapped.\n-\t Happily, that is even one insn shorter than even extraction.  */\n-      for (i = 0; i < 64; ++i)\n-\td.perm[i] = i * 2 + ((i & 24) == 8 ? 16 : (i & 24) == 16 ? -16 : 0);\n+\t Happily, that is even one insn shorter than even extraction.\n+\t For AVX512BW we have 4 lanes.  We extract evens from within a lane,\n+\t always first from the first and then from the second source operand,\n+\t the index bits above the low 4 bits remains the same.\n+\t Thus, for d.nelt == 32 we want permutation\n+\t 0,2,4,..14, 32,34,36,..46, 16,18,20,..30, 48,50,52,..62\n+\t and for d.nelt == 64 we want permutation\n+\t 0,2,4,..14, 64,66,68,..78, 16,18,20,..30, 80,82,84,..94,\n+\t 32,34,36,..46, 96,98,100,..110, 48,50,52,..62, 112,114,116,..126.  */\n+      for (i = 0; i < d.nelt; ++i)\n+\td.perm[i] = ((i * 2) & 14) + ((i & 8) ? d.nelt : 0) + (i & ~15);\n     }\n \n   ok = ix86_expand_vec_perm_const_1 (&d);"}, {"sha": "73b4eb286d12db361a959bb2a01635d03eeb1ec3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b01915ed169065d75895d504a97337f071d9c4f7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b01915ed169065d75895d504a97337f071d9c4f7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b01915ed169065d75895d504a97337f071d9c4f7", "patch": "@@ -1,5 +1,9 @@\n 2016-03-22  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR target/70329\n+\t* gcc.target/i386/avx512bw-pr70329-1.c: New test.\n+\t* gcc.target/i386/avx512bw-pr70329-2.c: New test.\n+\n \tPR target/70300\n \t* gcc.target/i386/pr70300.c: New test.\n "}, {"sha": "bb9a9551d0c9c4414c42e53924de54345fc8e4d5", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-pr70329-1.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b01915ed169065d75895d504a97337f071d9c4f7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-pr70329-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b01915ed169065d75895d504a97337f071d9c4f7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-pr70329-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-pr70329-1.c?ref=b01915ed169065d75895d504a97337f071d9c4f7", "patch": "@@ -0,0 +1,27 @@\n+/* PR target/70329 */\n+/* { dg-do run } */\n+/* { dg-options \"-O0 -mavx512bw\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#define AVX512BW\n+#include \"avx512f-helper.h\"\n+\n+typedef unsigned char A __attribute__ ((vector_size (64)));\n+typedef unsigned int B __attribute__ ((vector_size (64)));\n+\n+unsigned __attribute__ ((noinline, noclone))\n+foo (A a, A b, B c)\n+{\n+  a *= b;\n+  c[1] += a[8];\n+  return c[1];\n+}\n+\n+void\n+TEST (void)\n+{\n+  A a = (A) { 1, 2, 3, 4, 5, 6, 7, 8, 9 };\n+  unsigned x = foo (a, a, (B) { 1, 2 });\n+  if (x != 83)\n+    abort ();\n+}"}, {"sha": "731b92607949c577224270740d0935f0366a624d", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-pr70329-2.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b01915ed169065d75895d504a97337f071d9c4f7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-pr70329-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b01915ed169065d75895d504a97337f071d9c4f7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-pr70329-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-pr70329-2.c?ref=b01915ed169065d75895d504a97337f071d9c4f7", "patch": "@@ -0,0 +1,33 @@\n+/* PR target/70329 */\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ftree-vectorize -mavx512bw\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#define AVX512BW\n+#include \"avx512f-helper.h\"\n+\n+__attribute__((noinline, noclone)) void\n+foo (unsigned char *src1, unsigned char *src2, unsigned char *dst)\n+{\n+  int i;\n+\n+  for (i = 0; i < 64; i++)\n+    dst[i] = (unsigned char) ((int) src1[i] * (int) src2[i]);\n+}\n+\n+void\n+TEST (void)\n+{\n+  unsigned char a[64], b[64], c[64];\n+  int i;\n+\n+  for (i = 0; i < 64; i++)\n+    {\n+      a[i] = i;\n+      b[i] = (i + 1);\n+    }\n+  foo (a, b, c);\n+  for (i = 0; i < 64; i++)\n+    if (c[i] != (unsigned char) (i * (i + 1)))\n+      abort ();\n+}"}]}