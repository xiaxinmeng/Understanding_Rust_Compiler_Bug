{"sha": "c14f7160a1403c21443013a8af8a29e1ddbfe488", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzE0ZjcxNjBhMTQwM2MyMTQ0MzAxM2E4YWY4YTI5ZTFkZGJmZTQ4OA==", "commit": {"author": {"name": "Martin v. L\u00f6wis", "email": "loewis@informatik.hu-berlin.de", "date": "2000-03-19T18:25:27Z"}, "committer": {"name": "Martin v. L\u00f6wis", "email": "loewis@gcc.gnu.org", "date": "2000-03-19T18:25:27Z"}, "message": "emit-rtl.c (push_to_full_sequence, [...]): New functions.\n\n\t* emit-rtl.c (push_to_full_sequence, end_full_sequence): New functions.\n\t* except.c (emit_cleanup_handler): Use them.\n\t(expand_end_all_catch): Likewise.\n\t* function.c (fixup_var_refs): Likewise.\n\t(expand_function_end): Clear catch_clauses_last.\n\t* rtl.h (push_to_full_sequence, end_full_sequence): Declare.\n\t* except.h (struct eh_status): New field x_catch_clauses_last.\n\t(catch_clauses_last): New define.\n\n\t* cp/except.c (expand_exception_blocks): Clear catch_clauses_last.\n\n\t* java/except.c (emit_handlers): Clear catch_clauses_last.\n\nFrom-SVN: r32643", "tree": {"sha": "741fb4699c20e2b971024d7d050b856266030a84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/741fb4699c20e2b971024d7d050b856266030a84"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c14f7160a1403c21443013a8af8a29e1ddbfe488", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c14f7160a1403c21443013a8af8a29e1ddbfe488", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c14f7160a1403c21443013a8af8a29e1ddbfe488", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c14f7160a1403c21443013a8af8a29e1ddbfe488/comments", "author": null, "committer": null, "parents": [{"sha": "d88f311b6384b7fc22fe799225097782cb502b9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d88f311b6384b7fc22fe799225097782cb502b9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d88f311b6384b7fc22fe799225097782cb502b9d"}], "stats": {"total": 72, "additions": 59, "deletions": 13}, "files": [{"sha": "7f6c40c436a26006a090166df3dadf80275f6184", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c14f7160a1403c21443013a8af8a29e1ddbfe488/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c14f7160a1403c21443013a8af8a29e1ddbfe488/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c14f7160a1403c21443013a8af8a29e1ddbfe488", "patch": "@@ -1,4 +1,13 @@\n-2000-03-18  Martin v. L\ufffdwis  <loewis@informatik.hu-berlin.de>\n+2000-03-19  Martin v. L\ufffdwis  <loewis@informatik.hu-berlin.de>\n+\n+\t* emit-rtl.c (push_to_full_sequence, end_full_sequence): New functions.\n+\t* except.c (emit_cleanup_handler): Use them.\n+\t(expand_end_all_catch): Likewise.\n+\t* function.c (fixup_var_refs): Likewise.\n+\t(expand_function_end): Clear catch_clauses_last.\n+\t* rtl.h (push_to_full_sequence, end_full_sequence): Declare.\n+\t* except.h (struct eh_status): New field x_catch_clauses_last.\n+\t(catch_clauses_last): New define.\n \n \t* Makefile.in (tree.o): Depend on HASHTAB_H.\n \t* tree.c: Include hashtab.h."}, {"sha": "83cec30b863bb1578fe6695afa3725c8370efe44", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c14f7160a1403c21443013a8af8a29e1ddbfe488/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c14f7160a1403c21443013a8af8a29e1ddbfe488/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c14f7160a1403c21443013a8af8a29e1ddbfe488", "patch": "@@ -1,3 +1,7 @@\n+2000-03-19  Martin v. L\ufffdwis  <loewis@informatik.hu-berlin.de>\n+\n+\t* except.c (expand_exception_blocks): Clear catch_clauses_last.\n+\n 2000-03-18  Mark Mitchell  <mark@codesourcery.com>\n \n \t* cp-tree.h (CLEAR_DECL_C_BIT_FIELD): New macro."}, {"sha": "8e32659a302dd1cd3399b7e3b5a518fdb613afe5", "filename": "gcc/cp/except.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c14f7160a1403c21443013a8af8a29e1ddbfe488/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c14f7160a1403c21443013a8af8a29e1ddbfe488/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=c14f7160a1403c21443013a8af8a29e1ddbfe488", "patch": "@@ -796,13 +796,13 @@ expand_exception_blocks ()\n \texpand_eh_region_start ();\n \n       emit_insns (catch_clauses);\n-      catch_clauses = NULL_RTX;\n+      catch_clauses = catch_clauses_last = NULL_RTX;\n \n       if (exceptions_via_longjmp == 0)\n \texpand_eh_region_end (build_terminate_handler ());\n \n       emit_insns (catch_clauses);\n-      catch_clauses = NULL_RTX;\n+      catch_clauses = catch_clauses_last = NULL_RTX;\n       emit_label (funcend);\n     }\n }"}, {"sha": "e238cfa43acbc33a312d278d70ceb4e857f59753", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c14f7160a1403c21443013a8af8a29e1ddbfe488/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c14f7160a1403c21443013a8af8a29e1ddbfe488/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=c14f7160a1403c21443013a8af8a29e1ddbfe488", "patch": "@@ -3422,6 +3422,20 @@ push_to_sequence (first)\n   last_insn = last;\n }\n \n+/* Set up the insn chain from a chain stort in FIRST to LAST.  */\n+\n+void\n+push_to_full_sequence (first, last)\n+     rtx first, last;\n+{\n+  start_sequence ();\n+  first_insn = first;\n+  last_insn = last;\n+  /* We really should have the end of the insn chain here.  */\n+  if (last && NEXT_INSN (last))\n+    abort ();\n+}\n+\n /* Set up the outer-level insn chain\n    as the current sequence, saving the previously current one.  */\n \n@@ -3484,6 +3498,18 @@ end_sequence ()\n   free (tem);\n }\n \n+/* This works like end_sequence, but records the old sequence in FIRST\n+   and LAST.  */\n+\n+void\n+end_full_sequence (first, last)\n+     rtx *first, *last;\n+{\n+  *first = first_insn;\n+  *last = last_insn;\n+  end_sequence();\n+}\n+\n /* Return 1 if currently emitting into a sequence.  */\n \n int"}, {"sha": "31467783b15efed4b15d88210c3a94d182ec09ec", "filename": "gcc/except.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c14f7160a1403c21443013a8af8a29e1ddbfe488/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c14f7160a1403c21443013a8af8a29e1ddbfe488/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=c14f7160a1403c21443013a8af8a29e1ddbfe488", "patch": "@@ -1865,10 +1865,9 @@ emit_cleanup_handler (entry)\n   end_sequence ();\n \n   /* And add it to the CATCH_CLAUSES.  */\n-  push_to_sequence (catch_clauses);\n+  push_to_full_sequence (catch_clauses, catch_clauses_last);\n   emit_insns (handler_insns);\n-  catch_clauses = get_insns ();\n-  end_sequence ();\n+  end_full_sequence (&catch_clauses, &catch_clauses_last);\n \n   /* Now we've left the handler.  */\n   pop_ehqueue ();\n@@ -1990,10 +1989,9 @@ expand_end_all_catch ()\n   pop_label_entry (&outer_context_label_stack);\n \n   /* Add the new sequence of catches to the main one for this function.  */\n-  push_to_sequence (catch_clauses);\n+  push_to_full_sequence (catch_clauses, catch_clauses_last);\n   emit_insns (new_catch_clause);\n-  catch_clauses = get_insns ();\n-  end_sequence ();\n+  end_full_sequence (&catch_clauses, &catch_clauses_last);\n   \n   /* Here we fall through into the continuation code.  */\n }"}, {"sha": "ee9ea6056250c175a78d3b3f838bcd1ae54ca13c", "filename": "gcc/except.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c14f7160a1403c21443013a8af8a29e1ddbfe488/gcc%2Fexcept.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c14f7160a1403c21443013a8af8a29e1ddbfe488/gcc%2Fexcept.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.h?ref=c14f7160a1403c21443013a8af8a29e1ddbfe488", "patch": "@@ -120,6 +120,8 @@ struct eh_status\n   /* Insns for all of the exception handlers for the current function.\n      They are currently emitted by the frontend code.  */\n   rtx x_catch_clauses;\n+  /* End of exception handler insn sequence.  */\n+  rtx x_catch_clauses_last;\n   /* A random data area for the front end's own use.  */\n   struct label_node *x_false_label_stack;\n   /* Keeps track of the label to resume to should one want to resume\n@@ -142,6 +144,7 @@ struct eh_status\n #define catchstack (cfun->eh->x_catchstack)\n #define ehqueue (cfun->eh->x_ehqueue)\n #define catch_clauses (cfun->eh->x_catch_clauses)\n+#define catch_clauses_last (cfun->eh->x_catch_clauses_last)\n #define false_label_stack (cfun->eh->x_false_label_stack)\n #define caught_return_label_stack (cfun->eh->x_caught_return_label_stack)\n #define protect_list (cfun->eh->x_protect_list)"}, {"sha": "aed4c60fa0c16488a36eae2766287f9bacad7e75", "filename": "gcc/function.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c14f7160a1403c21443013a8af8a29e1ddbfe488/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c14f7160a1403c21443013a8af8a29e1ddbfe488/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=c14f7160a1403c21443013a8af8a29e1ddbfe488", "patch": "@@ -1548,10 +1548,10 @@ fixup_var_refs (var, promoted_mode, unsignedp, ht)\n     }\n \n   /* Scan the catch clauses for exception handling too.  */\n-  push_to_sequence (catch_clauses);\n+  push_to_full_sequence (catch_clauses, catch_clauses_last);\n   fixup_var_refs_insns (var, promoted_mode, unsignedp, catch_clauses,\n \t\t\t0, 0);\n-  end_sequence ();\n+  end_full_sequence (&catch_clauses, &catch_clauses_last);\n \n   /* Scan sequences saved in CALL_PLACEHOLDERS too.  */\n   for (insn = first_insn; insn; insn = NEXT_INSN (insn))\n@@ -6549,7 +6549,7 @@ expand_function_end (filename, line, end_bindings)\n \n     /* If there are any catch_clauses remaining, output them now.  */\n     emit_insns (catch_clauses);\n-    catch_clauses = NULL_RTX;\n+    catch_clauses = catch_clauses_last = NULL_RTX;\n     /* If the above emitted any code, may sure we jump around it.  */\n     if (last != get_last_insn ())\n       {"}, {"sha": "f96e28713f2d4b6385eb7da4a9b2c7a673361404", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c14f7160a1403c21443013a8af8a29e1ddbfe488/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c14f7160a1403c21443013a8af8a29e1ddbfe488/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=c14f7160a1403c21443013a8af8a29e1ddbfe488", "patch": "@@ -1,3 +1,7 @@\n+2000-03-19  Martin v. L\ufffdwis  <loewis@informatik.hu-berlin.de>\n+\n+\t* except.c (emit_handlers): Clear catch_clauses_last.\n+\n Fri Mar 17 08:09:14 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* class.c (make_field_value): Properly handle sizes."}, {"sha": "80f24f8339b663c16f9fc58b4d683b9f5fafba69", "filename": "gcc/java/except.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c14f7160a1403c21443013a8af8a29e1ddbfe488/gcc%2Fjava%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c14f7160a1403c21443013a8af8a29e1ddbfe488/gcc%2Fjava%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexcept.c?ref=c14f7160a1403c21443013a8af8a29e1ddbfe488", "patch": "@@ -433,7 +433,7 @@ emit_handlers ()\n       emit_jump (funcend);\n \n       emit_insns (catch_clauses);\n-      catch_clauses = NULL_RTX;\n+      catch_clauses = catch_clauses_last = NULL_RTX;\n       expand_leftover_cleanups ();\n \n       emit_label (funcend);"}, {"sha": "fc344cef75bdc23d9e61495b3fe4a351d69560fa", "filename": "gcc/rtl.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c14f7160a1403c21443013a8af8a29e1ddbfe488/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c14f7160a1403c21443013a8af8a29e1ddbfe488/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=c14f7160a1403c21443013a8af8a29e1ddbfe488", "patch": "@@ -1012,6 +1012,8 @@ extern rtx get_last_insn_anywhere\tPARAMS ((void));\n extern void start_sequence\t\tPARAMS ((void));\n extern void push_to_sequence\t\tPARAMS ((rtx));\n extern void end_sequence\t\tPARAMS ((void));\n+extern void push_to_full_sequence\tPARAMS ((rtx, rtx));\n+extern void end_full_sequence\t\tPARAMS ((rtx*, rtx*));\n extern rtx gen_sequence\t\t\tPARAMS ((void));\n extern rtx immed_double_const\t\tPARAMS ((HOST_WIDE_INT, HOST_WIDE_INT, enum machine_mode));\n extern rtx force_const_mem\t\tPARAMS ((enum machine_mode, rtx));"}]}