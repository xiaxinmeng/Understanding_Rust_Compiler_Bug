{"sha": "d6cb6d6a1c2279deebb45e658cde66f1f91cae05", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDZjYjZkNmExYzIyNzlkZWViYjQ1ZTY1OGNkZTY2ZjFmOTFjYWUwNQ==", "commit": {"author": {"name": "Wilco Dijkstra", "email": "wdijkstr@arm.com", "date": "2018-05-23T12:28:43Z"}, "committer": {"name": "Wilco Dijkstra", "email": "wilco@gcc.gnu.org", "date": "2018-05-23T12:28:43Z"}, "message": "[AArch64] Simplify frame pointer logic\n\nSimplify frame pointer logic.  Add aarch64_needs_frame_chain to\ndecide when to emit the frame chain using clearer logic.\nIntroduce aarch64_use_frame_pointer which contains the value of\n-fno-omit-frame-pointer (flag_omit_frame_pointer is set to a magic\nvalue so that the mid-end won't force the frame pointer in all\ncases, and leaf frame pointer emission can't be supported). \n\n    gcc/\n\t* config/aarch64/aarch64.c (aarch64_use_frame_pointer):\n\tAdd new boolean.\n\t(aarch64_needs_frame_chain): New function.\n\t(aarch64_parse_override_string): Set aarch64_use_frame_pointer.\n\nFrom-SVN: r260606", "tree": {"sha": "a9528dadde928e8289c84df482ee2af0c713cd29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a9528dadde928e8289c84df482ee2af0c713cd29"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d6cb6d6a1c2279deebb45e658cde66f1f91cae05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6cb6d6a1c2279deebb45e658cde66f1f91cae05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6cb6d6a1c2279deebb45e658cde66f1f91cae05", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6cb6d6a1c2279deebb45e658cde66f1f91cae05/comments", "author": null, "committer": null, "parents": [{"sha": "675d044c852044111c656f86c273a0c5f11ad3d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/675d044c852044111c656f86c273a0c5f11ad3d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/675d044c852044111c656f86c273a0c5f11ad3d5"}], "stats": {"total": 53, "additions": 36, "deletions": 17}, "files": [{"sha": "04b42be972699d35d68c6756b5083824f69b5a38", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6cb6d6a1c2279deebb45e658cde66f1f91cae05/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6cb6d6a1c2279deebb45e658cde66f1f91cae05/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d6cb6d6a1c2279deebb45e658cde66f1f91cae05", "patch": "@@ -1,3 +1,10 @@\n+2018-05-23  Wilco Dijkstra  <wdijkstr@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_use_frame_pointer):\n+\tAdd new boolean.\n+\t(aarch64_needs_frame_chain): New function.\n+\t(aarch64_parse_override_string): Set aarch64_use_frame_pointer.\n+\n 2018-05-23  Sudakshina Das  <sudi.das@arm.com>\n \n \tPR target/84882"}, {"sha": "774519236663144ce133046177f9fac986e563f1", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 29, "deletions": 17, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6cb6d6a1c2279deebb45e658cde66f1f91cae05/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6cb6d6a1c2279deebb45e658cde66f1f91cae05/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=d6cb6d6a1c2279deebb45e658cde66f1f91cae05", "patch": "@@ -220,6 +220,9 @@ unsigned long aarch64_tune_flags = 0;\n /* Global flag for PC relative loads.  */\n bool aarch64_pcrelative_literal_loads;\n \n+/* Global flag for whether frame pointer is enabled.  */\n+bool aarch64_use_frame_pointer;\n+\n /* Support for command line parsing of boolean flags in the tuning\n    structures.  */\n struct aarch64_flag_desc\n@@ -3950,6 +3953,25 @@ aarch64_output_probe_stack_range (rtx reg1, rtx reg2)\n   return \"\";\n }\n \n+/* Determine whether a frame chain needs to be generated.  */\n+static bool\n+aarch64_needs_frame_chain (void)\n+{\n+  /* Force a frame chain for EH returns so the return address is at FP+8.  */\n+  if (frame_pointer_needed || crtl->calls_eh_return)\n+    return true;\n+\n+  /* A leaf function cannot have calls or write LR.  */\n+  bool is_leaf = crtl->is_leaf && !df_regs_ever_live_p (LR_REGNUM);\n+\n+  /* Don't use a frame chain in leaf functions if leaf frame pointers\n+     are disabled.  */\n+  if (flag_omit_leaf_frame_pointer && is_leaf)\n+    return false;\n+\n+  return aarch64_use_frame_pointer;\n+}\n+\n /* Mark the registers that need to be saved by the callee and calculate\n    the size of the callee-saved registers area and frame record (both FP\n    and LR may be omitted).  */\n@@ -3962,17 +3984,7 @@ aarch64_layout_frame (void)\n   if (reload_completed && cfun->machine->frame.laid_out)\n     return;\n \n-  /* Force a frame chain for EH returns so the return address is at FP+8.  */\n-  cfun->machine->frame.emit_frame_chain\n-    = frame_pointer_needed || crtl->calls_eh_return;\n-\n-  /* Emit a frame chain if the frame pointer is enabled.\n-     If -momit-leaf-frame-pointer is used, do not use a frame chain\n-     in leaf functions which do not use LR.  */\n-  if (flag_omit_frame_pointer == 2\n-      && !(flag_omit_leaf_frame_pointer && crtl->is_leaf\n-\t   && !df_regs_ever_live_p (LR_REGNUM)))\n-    cfun->machine->frame.emit_frame_chain = true;\n+  cfun->machine->frame.emit_frame_chain = aarch64_needs_frame_chain ();\n \n #define SLOT_NOT_REQUIRED (-2)\n #define SLOT_REQUIRED     (-1)\n@@ -10502,12 +10514,12 @@ aarch64_override_options_after_change_1 (struct gcc_options *opts)\n   /* PR 70044: We have to be careful about being called multiple times for the\n      same function.  This means all changes should be repeatable.  */\n \n-  /* If the frame pointer is enabled, set it to a special value that behaves\n-     similar to frame pointer omission.  If we don't do this all leaf functions\n-     will get a frame pointer even if flag_omit_leaf_frame_pointer is set.\n-     If flag_omit_frame_pointer has this special value, we must force the\n-     frame pointer if not in a leaf function.  We also need to force it in a\n-     leaf function if flag_omit_frame_pointer is not set or if LR is used.  */\n+  /* Set aarch64_use_frame_pointer based on -fno-omit-frame-pointer.\n+     Disable the frame pointer flag so the mid-end will not use a frame\n+     pointer in leaf functions in order to support -fomit-leaf-frame-pointer.\n+     Set x_flag_omit_frame_pointer to the special value 2 to differentiate\n+     between -fomit-frame-pointer (1) and -fno-omit-frame-pointer (2).  */\n+  aarch64_use_frame_pointer = opts->x_flag_omit_frame_pointer != 1;\n   if (opts->x_flag_omit_frame_pointer == 0)\n     opts->x_flag_omit_frame_pointer = 2;\n "}]}