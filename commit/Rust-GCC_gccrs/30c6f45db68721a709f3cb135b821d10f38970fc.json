{"sha": "30c6f45db68721a709f3cb135b821d10f38970fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzBjNmY0NWRiNjg3MjFhNzA5ZjNjYjEzNWI4MjFkMTBmMzg5NzBmYw==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@nildram.co.uk", "date": "2007-12-16T09:54:34Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2007-12-16T09:54:34Z"}, "message": "re PR rtl-optimization/34415 (Possible miscompilation on MIPS)\n\ngcc/\n\tPR rtl-optimization/34415\n\t* df.h (DF_LR_IN, DF_LR_OUT): Update comments.\n\t* resource.c (mark_target_live_regs): Use DF_LR_IN rather than\n\tdf_get_live_in.  Don't handle pseudos.\n\ngcc/testsuite/\n\tPR rtl-optimization/34415\n\t* gcc.c-torture/execute/pr34415.c: New test.\n\nFrom-SVN: r130987", "tree": {"sha": "472ece16a2d2361e3f9da5e4bce513a52f486963", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/472ece16a2d2361e3f9da5e4bce513a52f486963"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/30c6f45db68721a709f3cb135b821d10f38970fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30c6f45db68721a709f3cb135b821d10f38970fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30c6f45db68721a709f3cb135b821d10f38970fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30c6f45db68721a709f3cb135b821d10f38970fc/comments", "author": null, "committer": null, "parents": [{"sha": "cf79e386370fc308919194aca227933b186250b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf79e386370fc308919194aca227933b186250b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf79e386370fc308919194aca227933b186250b8"}], "stats": {"total": 62, "additions": 50, "deletions": 12}, "files": [{"sha": "4dac20691b7e6a3af58fcc498a06c1ea89f8a4c5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30c6f45db68721a709f3cb135b821d10f38970fc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30c6f45db68721a709f3cb135b821d10f38970fc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=30c6f45db68721a709f3cb135b821d10f38970fc", "patch": "@@ -1,3 +1,10 @@\n+2007-12-16  Richard Sandiford  <rsandifo@nildram.co.uk>\n+\n+\tPR rtl-optimization/34415\n+\t* df.h (DF_LR_IN, DF_LR_OUT): Update comments.\n+\t* resource.c (mark_target_live_regs): Use DF_LR_IN rather than\n+\tdf_get_live_in.  Don't handle pseudos.\n+\n 2007-12-16  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR bootstrap/34003"}, {"sha": "04bac49bf0a19847bdf379a2cc93c543793557a6", "filename": "gcc/df.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30c6f45db68721a709f3cb135b821d10f38970fc/gcc%2Fdf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30c6f45db68721a709f3cb135b821d10f38970fc/gcc%2Fdf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf.h?ref=30c6f45db68721a709f3cb135b821d10f38970fc", "patch": "@@ -559,9 +559,9 @@ struct df\n #define DF_LIVE_IN(BB) (DF_LIVE_BB_INFO(BB)->in) \n #define DF_LIVE_OUT(BB) (DF_LIVE_BB_INFO(BB)->out) \n \n-/* These macros are currently used by only reg-stack since it is not\n-   tolerant of uninitialized variables.  This intolerance should be\n-   fixed because it causes other problems.  */ \n+/* These macros are used by passes that are not tolerant of\n+   uninitialized variables.  This intolerance should eventually\n+   be fixed.  */\n #define DF_LR_IN(BB) (DF_LR_BB_INFO(BB)->in) \n #define DF_LR_OUT(BB) (DF_LR_BB_INFO(BB)->out) \n "}, {"sha": "2ffde4f8e6fe5b7518808f448ff80a573c68bf1e", "filename": "gcc/resource.c", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30c6f45db68721a709f3cb135b821d10f38970fc/gcc%2Fresource.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30c6f45db68721a709f3cb135b821d10f38970fc/gcc%2Fresource.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fresource.c?ref=30c6f45db68721a709f3cb135b821d10f38970fc", "patch": "@@ -958,23 +958,15 @@ mark_target_live_regs (rtx insns, rtx target, struct resources *res)\n      TARGET.  Otherwise, we must assume everything is live.  */\n   if (b != -1)\n     {\n-      regset regs_live = df_get_live_in (BASIC_BLOCK (b));\n+      regset regs_live = DF_LR_IN (BASIC_BLOCK (b));\n       rtx start_insn, stop_insn;\n-      reg_set_iterator rsi;\n \n       /* Compute hard regs live at start of block -- this is the real hard regs\n \t marked live, plus live pseudo regs that have been renumbered to\n \t hard regs.  */\n \n       REG_SET_TO_HARD_REG_SET (current_live_regs, regs_live);\n \n-      EXECUTE_IF_SET_IN_REG_SET (regs_live, FIRST_PSEUDO_REGISTER, i, rsi)\n-\t{\n-\t  if (reg_renumber[i] >= 0)\n-\t    add_to_hard_reg_set (&current_live_regs, PSEUDO_REGNO_MODE (i),\n-\t\t\t\treg_renumber[i]);\n-\t}\n-\n       /* Get starting and ending insn, handling the case where each might\n \t be a SEQUENCE.  */\n       start_insn = (b == ENTRY_BLOCK_PTR->next_bb->index ? "}, {"sha": "06a2195d963bb76e4d493807223119b8c2b66a9f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30c6f45db68721a709f3cb135b821d10f38970fc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30c6f45db68721a709f3cb135b821d10f38970fc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=30c6f45db68721a709f3cb135b821d10f38970fc", "patch": "@@ -1,3 +1,8 @@\n+2007-12-16  Richard Sandiford  <rsandifo@nildram.co.uk>\n+\n+\tPR rtl-optimization/34415\n+\t* gcc.c-torture/execute/pr34415.c: New test.\n+\n 2007-12-16  Danny Smith <dannysmith@users.sourceforge.net>\n \n \t* gcc.target/i386/fastcall-1.c: (f4): Change return type to"}, {"sha": "ec75394afe0f8381445d326101d04dae3963e29e", "filename": "gcc/testsuite/gcc.c-torture/execute/pr34415.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30c6f45db68721a709f3cb135b821d10f38970fc/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr34415.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30c6f45db68721a709f3cb135b821d10f38970fc/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr34415.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr34415.c?ref=30c6f45db68721a709f3cb135b821d10f38970fc", "patch": "@@ -0,0 +1,34 @@\n+const char *__attribute__((noinline))\n+foo (const char *p)\n+{\n+  const char *end;\n+  int len = 1;\n+  for (;;)\n+    {\n+      int c = *p;\n+      c = (c >= 'a' && c <= 'z' ? c - 'a' + 'A' : c);\n+      if (c == 'B')\n+\tend = p;\n+      else if (c == 'A')\n+\t{\n+\t  end = p;\n+\t  do\n+\t    p++;\n+\t  while (*p == '+');\n+\t}\n+      else\n+\tbreak;\n+      p++;\n+      len++;\n+    }\n+  if (len > 2 && *p == ':')\n+    p = end;\n+  return p;\n+}\n+\n+int\n+main (void)\n+{\n+  const char *input = \"Bbb:\";\n+  return foo (input) != input + 2;\n+}"}]}