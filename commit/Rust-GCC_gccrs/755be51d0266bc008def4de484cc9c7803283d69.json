{"sha": "755be51d0266bc008def4de484cc9c7803283d69", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzU1YmU1MWQwMjY2YmMwMDhkZWY0ZGU0ODRjYzljNzgwMzI4M2Q2OQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2015-12-04T17:32:40Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2015-12-04T17:32:40Z"}, "message": "PR libstdc++/57060 cope with invalid thread IDs\n\n\tPR libstdc++/57060\n\t* include/std/thread (operator==(thread::id, thread::id)): Do not use\n\t__gthread_equal.\n\t(operator<(thread::id, thread::id)): Add comment.\n\t(this_thread::get_id()): Do not use __gthread_self for single-threaded\n\tprograms using glibc.\n\t* testsuite/30_threads/this_thread/57060.cc: New.\n\nFrom-SVN: r231289", "tree": {"sha": "497aba097b51602810d2e63632cc24a664634e0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/497aba097b51602810d2e63632cc24a664634e0f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/755be51d0266bc008def4de484cc9c7803283d69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/755be51d0266bc008def4de484cc9c7803283d69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/755be51d0266bc008def4de484cc9c7803283d69", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/755be51d0266bc008def4de484cc9c7803283d69/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "586cdac8e5af3fff142829e579558f8728e56f81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/586cdac8e5af3fff142829e579558f8728e56f81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/586cdac8e5af3fff142829e579558f8728e56f81"}], "stats": {"total": 74, "additions": 71, "deletions": 3}, "files": [{"sha": "f77428e1b2f43f3d0d842a8ce9d8695769a4b5d3", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/755be51d0266bc008def4de484cc9c7803283d69/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/755be51d0266bc008def4de484cc9c7803283d69/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=755be51d0266bc008def4de484cc9c7803283d69", "patch": "@@ -1,3 +1,13 @@\n+2015-12-04  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/57060\n+\t* include/std/thread (operator==(thread::id, thread::id)): Do not use\n+\t__gthread_equal.\n+\t(operator<(thread::id, thread::id)): Add comment.\n+\t(this_thread::get_id()): Do not use __gthread_self for single-threaded\n+\tprograms using glibc.\n+\t* testsuite/30_threads/this_thread/57060.cc: New.\n+\n 2015-12-02  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/56383"}, {"sha": "efdd83e75f70eba273191f19ef3d914cfc4c3b23", "filename": "libstdc++-v3/include/std/thread", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/755be51d0266bc008def4de484cc9c7803283d69/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/755be51d0266bc008def4de484cc9c7803283d69/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread?ref=755be51d0266bc008def4de484cc9c7803283d69", "patch": "@@ -89,11 +89,21 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       friend bool\n       operator==(thread::id __x, thread::id __y) noexcept\n-      { return __gthread_equal(__x._M_thread, __y._M_thread); }\n+      {\n+\t// pthread_equal is undefined if either thread ID is not valid, so we\n+\t// can't safely use __gthread_equal on default-constructed values (nor\n+\t// the non-zero value returned by this_thread::get_id() for\n+\t// single-threaded programs using GNU libc). Assume EqualityComparable.\n+\treturn __x._M_thread == __y._M_thread;\n+      }\n \n       friend bool\n       operator<(thread::id __x, thread::id __y) noexcept\n-      { return __x._M_thread < __y._M_thread; }\n+      {\n+\t// Pthreads doesn't define any way to do this, so we just have to\n+\t// assume native_handle_type is LessThanComparable.\n+\treturn __x._M_thread < __y._M_thread;\n+      }\n \n       template<class _CharT, class _Traits>\n \tfriend basic_ostream<_CharT, _Traits>&\n@@ -269,7 +279,18 @@ _GLIBCXX_END_NAMESPACE_VERSION\n \n     /// get_id\n     inline thread::id\n-    get_id() noexcept { return thread::id(__gthread_self()); }\n+    get_id() noexcept\n+    {\n+#ifdef __GLIBC__\n+      // For the GNU C library pthread_self() is usable without linking to\n+      // libpthread.so but returns 0, so we cannot use it in single-threaded\n+      // programs, because this_thread::get_id() != thread::id{} must be true.\n+      // We know that pthread_t is an integral type in the GNU C library.\n+      if (!__gthread_active_p())\n+\treturn thread::id(1);\n+#endif\n+      return thread::id(__gthread_self());\n+    }\n \n     /// yield\n     inline void"}, {"sha": "c9327192742f540b4cbbaa25f7ebe0cffd07f54e", "filename": "libstdc++-v3/testsuite/30_threads/this_thread/57060.cc", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/755be51d0266bc008def4de484cc9c7803283d69/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthis_thread%2F57060.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/755be51d0266bc008def4de484cc9c7803283d69/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthis_thread%2F57060.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthis_thread%2F57060.cc?ref=755be51d0266bc008def4de484cc9c7803283d69", "patch": "@@ -0,0 +1,37 @@\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target *-*-gnu* } }\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-require-gthreads \"\" }\n+\n+// N.B. this test intentionally does *not* use -pthread\n+\n+#include <thread>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  VERIFY( std::this_thread::get_id() != std::thread::id() );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}]}