{"sha": "e5b7b845d58a711cf917e0d8c56a8e2a3e515d47", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTViN2I4NDVkNThhNzExY2Y5MTdlMGQ4YzU2YThlMmEzZTUxNWQ0Nw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-06-28T00:23:23Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-06-28T00:23:23Z"}, "message": "(adddi3, subdi3, negdi3): New patterns.\n\nFrom-SVN: r12341", "tree": {"sha": "fde131d1fa848a49c70e7920487d6278ee620d5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fde131d1fa848a49c70e7920487d6278ee620d5b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e5b7b845d58a711cf917e0d8c56a8e2a3e515d47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5b7b845d58a711cf917e0d8c56a8e2a3e515d47", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5b7b845d58a711cf917e0d8c56a8e2a3e515d47", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5b7b845d58a711cf917e0d8c56a8e2a3e515d47/comments", "author": null, "committer": null, "parents": [{"sha": "8bca29225cba386c6ed05c39b251ace8cc24429f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bca29225cba386c6ed05c39b251ace8cc24429f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8bca29225cba386c6ed05c39b251ace8cc24429f"}], "stats": {"total": 112, "additions": 111, "deletions": 1}, "files": [{"sha": "28e65e6df9149eebc2609278a031405658ed8263", "filename": "gcc/config/ns32k/ns32k.md", "status": "modified", "additions": 111, "deletions": 1, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5b7b845d58a711cf917e0d8c56a8e2a3e515d47/gcc%2Fconfig%2Fns32k%2Fns32k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5b7b845d58a711cf917e0d8c56a8e2a3e515d47/gcc%2Fconfig%2Fns32k%2Fns32k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k.md?ref=e5b7b845d58a711cf917e0d8c56a8e2a3e515d47", "patch": "@@ -1,5 +1,5 @@\n ;;- Machine description for GNU compiler, ns32000 Version\n-;;  Copyright (C) 1988, 1994 Free Software Foundation, Inc.\n+;;  Copyright (C) 1988, 1994, 1996 Free Software Foundation, Inc.\n ;;  Contributed by Michael Tiemann (tiemann@cygnus.com)\n \n ;; This file is part of GNU CC.\n@@ -858,6 +858,47 @@\n   \"GET_CODE (operands[1]) == CONST_INT\"\n   \"addr %c1(sp),%0\")\n \n+(define_insn \"adddi3\"\n+  [(set (match_operand:DI 0 \"general_operand\" \"=ro\")\n+\t(plus:DI (match_operand:DI 1 \"general_operand\" \"%0\")\n+\t\t (match_operand:DI 2 \"general_operand\" \"ron\")))]\n+  \"\"\n+  \"*\n+{\n+  rtx low[3], high[3], xops[4];\n+  split_di (operands, 3, low, high);\n+  xops[0] = low[0];\n+  xops[1] = high[0];\n+  xops[2] = low[2];\n+  xops[3] = high[2];\n+\n+  if (GET_CODE (xops[2]) == CONST_INT)\n+    {\n+      int i = INTVAL (xops[2]);\n+\n+      if (i <= 7 && i >= -8) \n+        {\n+          if (i == 0)\n+\t    {\n+\t      i = INTVAL (xops[3]);\n+\t      if (i <= 7 && i >= -8)\n+                output_asm_insn (\\\"addqd %$%3,%1\\\", xops);\n+\t      else\n+                output_asm_insn (\\\"addd %$%3,%1\\\", xops);\n+\t    }\n+\t  else\n+\t    {\n+              output_asm_insn (\\\"addqd %$%2,%0\\\", xops);\n+              output_asm_insn (\\\"addcd %$%3,%1\\\", xops);\n+\t    }\n+\t  return \\\"\\\";\n+\t}\n+    }\n+  output_asm_insn (\\\"addd %2,%0\\\", xops);\n+  output_asm_insn (\\\"addcd %3,%1\\\", xops);\n+  return \\\"\\\";\n+}\")\n+\n (define_insn \"addsi3\"\n   [(set (match_operand:SI 0 \"general_operand\" \"=g,=g&<\")\n \t(plus:SI (match_operand:SI 1 \"general_operand\" \"%0,r\")\n@@ -971,6 +1012,47 @@\n   return \\\"adjspd %$%0\\\";\n }\")\n \n+(define_insn \"subdi3\"\n+  [(set (match_operand:DI 0 \"general_operand\" \"=ro\")\n+\t(minus:DI (match_operand:DI 1 \"general_operand\" \"0\")\n+\t\t  (match_operand:DI 2 \"general_operand\" \"ron\")))]\n+  \"\"\n+  \"*\n+{\n+  rtx low[3], high[3], xops[4];\n+  split_di (operands, 3, low, high);\n+  xops[0] = low[0];\n+  xops[1] = high[0];\n+  xops[2] = low[2];\n+  xops[3] = high[2];\n+\n+  if (GET_CODE (xops[2]) == CONST_INT)\n+    {\n+      int i = INTVAL (xops[2]);\n+\n+      if (i <= 8 && i >= -7)\n+        {\n+          if (i == 0)\n+\t    {\n+\t      i = INTVAL (xops[3]);\n+\t      if (i <= 8 && i >= -7)\n+                output_asm_insn (\\\"addqd %$%n3,%1\\\", xops);\n+\t      else\n+                output_asm_insn (\\\"subd %$%3,%1\\\", xops);\n+\t    }\n+\t  else\n+\t    {\n+              output_asm_insn (\\\"addqd %$%n2,%0\\\", xops);\n+              output_asm_insn (\\\"subcd %$%3,%1\\\", xops);\n+\t    }\n+\t  return \\\"\\\";\n+\t}\n+    }\n+  output_asm_insn (\\\"subd %2,%0\\\", xops);\n+  output_asm_insn (\\\"subcd %3,%1\\\", xops);\n+  return \\\"\\\";\n+}\")\n+\n (define_insn \"subsi3\"\n   [(set (match_operand:SI 0 \"general_operand\" \"=g\")\n \t(minus:SI (match_operand:SI 1 \"general_operand\" \"0\")\n@@ -1390,6 +1472,34 @@\n   \"TARGET_32081\"\n   \"negf %1,%0\")\n \n+(define_insn \"negdi2\"\n+  [(set (match_operand:DI 0 \"general_operand\" \"=ro\")\n+\t(neg:DI (match_operand:DI 1 \"general_operand\" \"ro\")))]\n+  \"\"\n+  \"*\n+{\n+  rtx low[2], high[2], xops[4];\n+  split_di (operands, 2, low, high);\n+  xops[0] = low[0];\n+  xops[1] = high[0];\n+  xops[2] = low[1];\n+  xops[3] = high[1];\n+\n+  if (rtx_equal_p (operands[0], operands[1]))\n+    {\n+      output_asm_insn (\\\"negd %3,%1\\\", xops);\n+      output_asm_insn (\\\"negd %2,%0\\\", xops);\n+      output_asm_insn (\\\"subcd %$0,%1\\\", xops);\n+    }\n+  else\n+    {\n+      output_asm_insn (\\\"negd %2,%0\\\", xops);\n+      output_asm_insn (\\\"movqd %$0,%1\\\", xops);\n+      output_asm_insn (\\\"subcd %3,%1\\\", xops);\n+    }\n+  return \\\"\\\"; \n+}\")\n+\n (define_insn \"negsi2\"\n   [(set (match_operand:SI 0 \"general_operand\" \"=g<\")\n \t(neg:SI (match_operand:SI 1 \"general_operand\" \"rmn\")))]"}]}