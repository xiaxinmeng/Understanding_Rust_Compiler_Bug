{"sha": "00a3a76a37a8fed897688134750dc261640c1180", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDBhM2E3NmEzN2E4ZmVkODk3Njg4MTM0NzUwZGMyNjE2NDBjMTE4MA==", "commit": {"author": {"name": "Andrew Stubbs", "email": "ams@codesourcery.com", "date": "2012-04-30T13:52:07Z"}, "committer": {"name": "Andrew Stubbs", "email": "ams@gcc.gnu.org", "date": "2012-04-30T13:52:07Z"}, "message": "arm.c (neon_valid_immediate): Allow const_int.\n\n2012-04-30  Andrew Stubbs  <ams@codesourcery.com>\n\n\t* config/arm/arm.c (neon_valid_immediate): Allow const_int.\n\t(arm_print_operand): Add 'x' format.\n\t* config/arm/constraints.md (Dn): Allow const_int.\n\t* config/arm/neon.md (neon_mov<mode>): Use VDX to allow DImode.\n\tUse 'x' format to print constants.\n\t* config/arm/predicates.md (imm_for_neon_mov_operand): Allow const_int.\n\t* config/arm/vfp.md (movdi_vfp): Disable for const_int when neon\n\tis enabled.\n\t(movdi_vfp_cortexa8): Likewise.\n\nFrom-SVN: r186983", "tree": {"sha": "d01a1c281be6a2d51e39a0ffbda66be010d76483", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d01a1c281be6a2d51e39a0ffbda66be010d76483"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/00a3a76a37a8fed897688134750dc261640c1180", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00a3a76a37a8fed897688134750dc261640c1180", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00a3a76a37a8fed897688134750dc261640c1180", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00a3a76a37a8fed897688134750dc261640c1180/comments", "author": {"login": "ams-cs", "id": 2235130, "node_id": "MDQ6VXNlcjIyMzUxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2235130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ams-cs", "html_url": "https://github.com/ams-cs", "followers_url": "https://api.github.com/users/ams-cs/followers", "following_url": "https://api.github.com/users/ams-cs/following{/other_user}", "gists_url": "https://api.github.com/users/ams-cs/gists{/gist_id}", "starred_url": "https://api.github.com/users/ams-cs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ams-cs/subscriptions", "organizations_url": "https://api.github.com/users/ams-cs/orgs", "repos_url": "https://api.github.com/users/ams-cs/repos", "events_url": "https://api.github.com/users/ams-cs/events{/privacy}", "received_events_url": "https://api.github.com/users/ams-cs/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "84ba08357c84b614ed19dfcc473641f63a972eba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84ba08357c84b614ed19dfcc473641f63a972eba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84ba08357c84b614ed19dfcc473641f63a972eba"}], "stats": {"total": 67, "additions": 55, "deletions": 12}, "files": [{"sha": "dccd2ca5f34c3c7356f5b5a38440f2abb8d021a2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00a3a76a37a8fed897688134750dc261640c1180/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00a3a76a37a8fed897688134750dc261640c1180/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=00a3a76a37a8fed897688134750dc261640c1180", "patch": "@@ -1,3 +1,15 @@\n+2012-04-30  Andrew Stubbs  <ams@codesourcery.com>\n+\n+\t* config/arm/arm.c (neon_valid_immediate): Allow const_int.\n+\t(arm_print_operand): Add 'x' format.\n+\t* config/arm/constraints.md (Dn): Allow const_int.\n+\t* config/arm/neon.md (neon_mov<mode>): Use VDX to allow DImode.\n+\tUse 'x' format to print constants.\n+\t* config/arm/predicates.md (imm_for_neon_mov_operand): Allow const_int.\n+\t* config/arm/vfp.md (movdi_vfp): Disable for const_int when neon\n+\tis enabled.\n+\t(movdi_vfp_cortexa8): Likewise.\n+\n 2012-04-30  Ian Bolton\t<ian.bolton@arm.com>\n \t    Sameera Deshpande  <sameera.deshpande@arm.com>\n \t    Greta Yorsh\t <greta.yorsh@arm.com>"}, {"sha": "b4df624d3b415ee5a87ab0e362f37633f46c864f", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00a3a76a37a8fed897688134750dc261640c1180/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00a3a76a37a8fed897688134750dc261640c1180/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=00a3a76a37a8fed897688134750dc261640c1180", "patch": "@@ -8911,11 +8911,25 @@ neon_valid_immediate (rtx op, enum machine_mode mode, int inverse,\n       break;\t\t\t\t\t\\\n     }\n \n-  unsigned int i, elsize = 0, idx = 0, n_elts = CONST_VECTOR_NUNITS (op);\n-  unsigned int innersize = GET_MODE_SIZE (GET_MODE_INNER (mode));\n+  unsigned int i, elsize = 0, idx = 0, n_elts;\n+  unsigned int innersize;\n   unsigned char bytes[16];\n   int immtype = -1, matches;\n   unsigned int invmask = inverse ? 0xff : 0;\n+  bool vector = GET_CODE (op) == CONST_VECTOR;\n+\n+  if (vector)\n+    {\n+      n_elts = CONST_VECTOR_NUNITS (op);\n+      innersize = GET_MODE_SIZE (GET_MODE_INNER (mode));\n+    }\n+  else\n+    {\n+      n_elts = 1;\n+      if (mode == VOIDmode)\n+\tmode = DImode;\n+      innersize = GET_MODE_SIZE (mode);\n+    }\n \n   /* Vectors of float constants.  */\n   if (GET_MODE_CLASS (mode) == MODE_VECTOR_FLOAT)\n@@ -8951,7 +8965,7 @@ neon_valid_immediate (rtx op, enum machine_mode mode, int inverse,\n   /* Splat vector constant out into a byte vector.  */\n   for (i = 0; i < n_elts; i++)\n     {\n-      rtx el = CONST_VECTOR_ELT (op, i);\n+      rtx el = vector ? CONST_VECTOR_ELT (op, i) : op;\n       unsigned HOST_WIDE_INT elpart;\n       unsigned int part, parts;\n \n@@ -17579,6 +17593,19 @@ arm_print_operand (FILE *stream, rtx x, int code)\n \t}\n       return;\n \n+    /* An integer that we want to print in HEX.  */\n+    case 'x':\n+      switch (GET_CODE (x))\n+\t{\n+\tcase CONST_INT:\n+\t  fprintf (stream, \"#\" HOST_WIDE_INT_PRINT_HEX, INTVAL (x));\n+\t  break;\n+\n+\tdefault:\n+\t  output_operand_lossage (\"Unsupported operand for code '%c'\", code);\n+\t}\n+      return;\n+\n     case 'B':\n       if (GET_CODE (x) == CONST_INT)\n \t{"}, {"sha": "0b80e1fe91e76d4ead3b64181285a07079de6faa", "filename": "gcc/config/arm/constraints.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00a3a76a37a8fed897688134750dc261640c1180/gcc%2Fconfig%2Farm%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00a3a76a37a8fed897688134750dc261640c1180/gcc%2Fconfig%2Farm%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fconstraints.md?ref=00a3a76a37a8fed897688134750dc261640c1180", "patch": "@@ -260,9 +260,9 @@\n \n (define_constraint \"Dn\"\n  \"@internal\n-  In ARM/Thumb-2 state a const_vector which can be loaded with a Neon vmov\n-  immediate instruction.\"\n- (and (match_code \"const_vector\")\n+  In ARM/Thumb-2 state a const_vector or const_int which can be loaded with a\n+  Neon vmov immediate instruction.\"\n+ (and (match_code \"const_vector,const_int\")\n       (match_test \"TARGET_32BIT\n \t\t   && imm_for_neon_mov_operand (op, GET_MODE (op))\")))\n "}, {"sha": "960bf313076bf80767719d2d96f319da36220cac", "filename": "gcc/config/arm/neon.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00a3a76a37a8fed897688134750dc261640c1180/gcc%2Fconfig%2Farm%2Fneon.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00a3a76a37a8fed897688134750dc261640c1180/gcc%2Fconfig%2Farm%2Fneon.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon.md?ref=00a3a76a37a8fed897688134750dc261640c1180", "patch": "@@ -156,9 +156,9 @@\n (define_attr \"vqh_mnem\" \"vadd,vmin,vmax\" (const_string \"vadd\"))\n \n (define_insn \"*neon_mov<mode>\"\n-  [(set (match_operand:VD 0 \"nonimmediate_operand\"\n+  [(set (match_operand:VDX 0 \"nonimmediate_operand\"\n \t  \"=w,Uv,w, w,  ?r,?w,?r,?r, ?Us\")\n-\t(match_operand:VD 1 \"general_operand\"\n+\t(match_operand:VDX 1 \"general_operand\"\n \t  \" w,w, Dn,Uvi, w, r, r, Usi,r\"))]\n   \"TARGET_NEON\n    && (register_operand (operands[0], <MODE>mode)\n@@ -177,7 +177,7 @@\n       if (width == 0)\n         return \"vmov.f32\\t%P0, %1  @ <mode>\";\n       else\n-        sprintf (templ, \"vmov.i%d\\t%%P0, %%1  @ <mode>\", width);\n+        sprintf (templ, \"vmov.i%d\\t%%P0, %%x1  @ <mode>\", width);\n \n       return templ;\n     }"}, {"sha": "fa2027c8ff020f11350505ee8fb2800eac59b8d0", "filename": "gcc/config/arm/predicates.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00a3a76a37a8fed897688134750dc261640c1180/gcc%2Fconfig%2Farm%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00a3a76a37a8fed897688134750dc261640c1180/gcc%2Fconfig%2Farm%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fpredicates.md?ref=00a3a76a37a8fed897688134750dc261640c1180", "patch": "@@ -504,7 +504,7 @@\n })\n \n (define_predicate \"imm_for_neon_mov_operand\"\n-  (match_code \"const_vector\")\n+  (match_code \"const_vector,const_int\")\n {\n   return neon_immediate_valid_for_move (op, mode, NULL, NULL);\n })"}, {"sha": "20614144d29bba86450d01d4ff83f2e2582fac96", "filename": "gcc/config/arm/vfp.md", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00a3a76a37a8fed897688134750dc261640c1180/gcc%2Fconfig%2Farm%2Fvfp.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00a3a76a37a8fed897688134750dc261640c1180/gcc%2Fconfig%2Farm%2Fvfp.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fvfp.md?ref=00a3a76a37a8fed897688134750dc261640c1180", "patch": "@@ -138,7 +138,9 @@\n        (match_operand:DI 1 \"di_operand\"              \"r,rDa,Db,Dc,mi,mi,r,r,w,w,Uvi,w\"))]\n   \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_VFP && arm_tune != cortexa8\n    && (   register_operand (operands[0], DImode)\n-       || register_operand (operands[1], DImode))\"\n+       || register_operand (operands[1], DImode))\n+   && !(TARGET_NEON && CONST_INT_P (operands[1])\n+        && neon_immediate_valid_for_move (operands[1], DImode, NULL, NULL))\"\n   \"*\n   switch (which_alternative)\n     {\n@@ -187,7 +189,9 @@\n        (match_operand:DI 1 \"di_operand\"              \"r,rDa,Db,Dc,mi,mi,r,r,w,w,Uvi,w\"))]\n   \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_VFP && arm_tune == cortexa8\n     && (   register_operand (operands[0], DImode)\n-        || register_operand (operands[1], DImode))\"\n+        || register_operand (operands[1], DImode))\n+    && !(TARGET_NEON && CONST_INT_P (operands[1])\n+\t && neon_immediate_valid_for_move (operands[1], DImode, NULL, NULL))\"\n   \"*\n   switch (which_alternative)\n     {"}]}