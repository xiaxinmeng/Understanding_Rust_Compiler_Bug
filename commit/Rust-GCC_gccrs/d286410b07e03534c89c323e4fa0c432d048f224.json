{"sha": "d286410b07e03534c89c323e4fa0c432d048f224", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDI4NjQxMGIwN2UwMzUzNGM4OWMzMjNlNGZhMGM0MzJkMDQ4ZjIyNA==", "commit": {"author": {"name": "Alexander Ivchenko", "email": "alexander.ivchenko@intel.com", "date": "2014-09-24T08:04:04Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2014-09-24T08:04:04Z"}, "message": "AVX-512. Add shuffles (pd, 32x4, etc.).\n\ngcc/\n\t* config/i386/i386.c\n\t(ix86_expand_args_builtin): Handle CODE_FOR_sse2_shufpd,\n\tCODE_FOR_sse2_sse2_shufpd_mask, CODE_FOR_sse2_avx512dq_shuf_f64x2_mask,\n\tCODE_FOR_sse2_avx512dq_shuf_i64x2_mask,\n\tCODE_FOR_sse2_avx512vl_shuf_i32x4_mask and\n\tCODE_FOR_sse2_avx512vl_shuf_f32x4_mask.\n\t* config/i386/sse.md\n\t(define_expand \"avx512dq_shuf_<shuffletype>64x2_mask\"): New.\n\t(define_insn\n\t\"<mask_codefor>avx512dq_shuf_<shuffletype>64x2_1<mask_name>\"): Ditto.\n\t(define_expand \"avx512vl_shuf_<shuffletype>32x4_mask\"): Ditto.\n\t(define_insn\n\t\"<mask_codefor>avx512vl_shuf_<shuffletype>32x4_1<mask_name>\"): Ditto.\n\t(define_expand \"avx512vl_pshufdv3_mask\"): Ditto.\n\t(define_insn \"avx2_pshufd_1<mask_name>\"): Add masking.\n\t(define_expand \"avx512vl_pshufd_mask\"): New.\n\t(define_insn \"sse2_pshufd_1<mask_name>\"): Add masking.\n\n\nCo-Authored-By: Andrey Turetskiy <andrey.turetskiy@intel.com>\nCo-Authored-By: Anna Tikhonova <anna.tikhonova@intel.com>\nCo-Authored-By: Ilya Tocar <ilya.tocar@intel.com>\nCo-Authored-By: Ilya Verbin <ilya.verbin@intel.com>\nCo-Authored-By: Kirill Yukhin <kirill.yukhin@intel.com>\nCo-Authored-By: Maxim Kuznetsov <maxim.kuznetsov@intel.com>\nCo-Authored-By: Michael Zolotukhin <michael.v.zolotukhin@intel.com>\n\nFrom-SVN: r215543", "tree": {"sha": "bf44b18e71f5c7039608c0d10917d8317b7febae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bf44b18e71f5c7039608c0d10917d8317b7febae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d286410b07e03534c89c323e4fa0c432d048f224", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d286410b07e03534c89c323e4fa0c432d048f224", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d286410b07e03534c89c323e4fa0c432d048f224", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d286410b07e03534c89c323e4fa0c432d048f224/comments", "author": null, "committer": null, "parents": [{"sha": "d0337ddca57bd43865679081a4a8d26502d4fd83", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0337ddca57bd43865679081a4a8d26502d4fd83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0337ddca57bd43865679081a4a8d26502d4fd83"}], "stats": {"total": 199, "additions": 188, "deletions": 11}, "files": [{"sha": "6fd0bf9e0b511ca6dae4c890f03ed51cbaee8bbc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d286410b07e03534c89c323e4fa0c432d048f224/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d286410b07e03534c89c323e4fa0c432d048f224/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d286410b07e03534c89c323e4fa0c432d048f224", "patch": "@@ -1,3 +1,30 @@\n+2014-09-24  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n+\t    Maxim Kuznetsov  <maxim.kuznetsov@intel.com>\n+\t    Anna Tikhonova  <anna.tikhonova@intel.com>\n+\t    Ilya Tocar  <ilya.tocar@intel.com>\n+\t    Andrey Turetskiy  <andrey.turetskiy@intel.com>\n+\t    Ilya Verbin  <ilya.verbin@intel.com>\n+\t    Kirill Yukhin  <kirill.yukhin@intel.com>\n+\t    Michael Zolotukhin  <michael.v.zolotukhin@intel.com>\n+\n+\t* config/i386/i386.c\n+\t(ix86_expand_args_builtin): Handle CODE_FOR_sse2_shufpd,\n+\tCODE_FOR_sse2_sse2_shufpd_mask, CODE_FOR_sse2_avx512dq_shuf_f64x2_mask,\n+\tCODE_FOR_sse2_avx512dq_shuf_i64x2_mask,\n+\tCODE_FOR_sse2_avx512vl_shuf_i32x4_mask and\n+\tCODE_FOR_sse2_avx512vl_shuf_f32x4_mask.\n+\t* config/i386/sse.md\n+\t(define_expand \"avx512dq_shuf_<shuffletype>64x2_mask\"): New.\n+\t(define_insn\n+\t\"<mask_codefor>avx512dq_shuf_<shuffletype>64x2_1<mask_name>\"): Ditto.\n+\t(define_expand \"avx512vl_shuf_<shuffletype>32x4_mask\"): Ditto.\n+\t(define_insn\n+\t\"<mask_codefor>avx512vl_shuf_<shuffletype>32x4_1<mask_name>\"): Ditto.\n+\t(define_expand \"avx512vl_pshufdv3_mask\"): Ditto.\n+\t(define_insn \"avx2_pshufd_1<mask_name>\"): Add masking.\n+\t(define_expand \"avx512vl_pshufd_mask\"): New.\n+\t(define_insn \"sse2_pshufd_1<mask_name>\"): Add masking.\n+\n 2014-09-24  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n \t    Maxim Kuznetsov  <maxim.kuznetsov@intel.com>\n \t    Anna Tikhonova  <anna.tikhonova@intel.com>"}, {"sha": "d70420d4814d1eb58d1e55f8ca0de1df1682f9c8", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d286410b07e03534c89c323e4fa0c432d048f224/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d286410b07e03534c89c323e4fa0c432d048f224/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=d286410b07e03534c89c323e4fa0c432d048f224", "patch": "@@ -34107,6 +34107,12 @@ ix86_expand_args_builtin (const struct builtin_description *d,\n \t      case CODE_FOR_avx512f_vinserti32x4_mask:\n \t      case CODE_FOR_avx512f_vextractf32x4_mask:\n \t      case CODE_FOR_avx512f_vextracti32x4_mask:\n+\t      case CODE_FOR_sse2_shufpd:\n+\t      case CODE_FOR_sse2_shufpd_mask:\n+\t      case CODE_FOR_avx512dq_shuf_f64x2_mask:\n+\t      case CODE_FOR_avx512dq_shuf_i64x2_mask:\n+\t      case CODE_FOR_avx512vl_shuf_i32x4_mask:\n+\t      case CODE_FOR_avx512vl_shuf_f32x4_mask:\n \t\terror (\"the last argument must be a 2-bit immediate\");\n \t\treturn const0_rtx;\n "}, {"sha": "dddf16d7ec5240b098d961e5d24f0238bcfb665f", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 155, "deletions": 11, "changes": 166, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d286410b07e03534c89c323e4fa0c432d048f224/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d286410b07e03534c89c323e4fa0c432d048f224/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=d286410b07e03534c89c323e4fa0c432d048f224", "patch": "@@ -11336,6 +11336,51 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"XI\")])\n \n+(define_expand \"avx512dq_shuf_<shuffletype>64x2_mask\"\n+  [(match_operand:VI8F_256 0 \"register_operand\")\n+   (match_operand:VI8F_256 1 \"register_operand\")\n+   (match_operand:VI8F_256 2 \"nonimmediate_operand\")\n+   (match_operand:SI 3 \"const_0_to_3_operand\")\n+   (match_operand:VI8F_256 4 \"register_operand\")\n+   (match_operand:QI 5 \"register_operand\")]\n+  \"TARGET_AVX512DQ\"\n+{\n+  int mask = INTVAL (operands[3]);\n+  emit_insn (gen_avx512dq_shuf_<shuffletype>64x2_1_mask\n+      (operands[0], operands[1], operands[2],\n+       GEN_INT (((mask >> 0) & 1) * 2 + 0),\n+       GEN_INT (((mask >> 0) & 1) * 2 + 1),\n+       GEN_INT (((mask >> 1) & 1) * 2 + 4),\n+       GEN_INT (((mask >> 1) & 1) * 2 + 5),\n+       operands[4], operands[5]));\n+  DONE;\n+})\n+\n+(define_insn \"<mask_codefor>avx512dq_shuf_<shuffletype>64x2_1<mask_name>\"\n+  [(set (match_operand:VI8F_256 0 \"register_operand\" \"=v\")\n+\t(vec_select:VI8F_256\n+\t  (vec_concat:<ssedoublemode>\n+\t    (match_operand:VI8F_256 1 \"register_operand\" \"v\")\n+\t    (match_operand:VI8F_256 2 \"nonimmediate_operand\" \"vm\"))\n+\t  (parallel [(match_operand 3  \"const_0_to_3_operand\")\n+\t\t     (match_operand 4  \"const_0_to_3_operand\")\n+\t\t     (match_operand 5  \"const_4_to_7_operand\")\n+\t\t     (match_operand 6  \"const_4_to_7_operand\")])))]\n+  \"TARGET_AVX512VL\n+   && (INTVAL (operands[3]) == (INTVAL (operands[4]) - 1)\n+       && INTVAL (operands[5]) == (INTVAL (operands[6]) - 1))\"\n+{\n+  int mask;\n+  mask = INTVAL (operands[3]) / 2;\n+  mask |= (INTVAL (operands[5]) - 4) / 2 << 1;\n+  operands[3] = GEN_INT (mask);\n+  return \"vshuf<shuffletype>64x2\\t{%3, %2, %1, %0<mask_operand7>|%0<mask_operand7>, %1, %2, %3}\";\n+}\n+  [(set_attr \"type\" \"sselog\")\n+   (set_attr \"length_immediate\" \"1\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"XI\")])\n+\n (define_expand \"avx512f_shuf_<shuffletype>64x2_mask\"\n   [(match_operand:V8FI 0 \"register_operand\")\n    (match_operand:V8FI 1 \"register_operand\")\n@@ -11394,6 +11439,64 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n+(define_expand \"avx512vl_shuf_<shuffletype>32x4_mask\"\n+  [(match_operand:VI4F_256 0 \"register_operand\")\n+   (match_operand:VI4F_256 1 \"register_operand\")\n+   (match_operand:VI4F_256 2 \"nonimmediate_operand\")\n+   (match_operand:SI 3 \"const_0_to_3_operand\")\n+   (match_operand:VI4F_256 4 \"register_operand\")\n+   (match_operand:QI 5 \"register_operand\")]\n+  \"TARGET_AVX512VL\"\n+{\n+  int mask = INTVAL (operands[3]);\n+  emit_insn (gen_avx512vl_shuf_<shuffletype>32x4_1_mask\n+      (operands[0], operands[1], operands[2],\n+       GEN_INT (((mask >> 0) & 1) * 4 + 0),\n+       GEN_INT (((mask >> 0) & 1) * 4 + 1),\n+       GEN_INT (((mask >> 0) & 1) * 4 + 2),\n+       GEN_INT (((mask >> 0) & 1) * 4 + 3),\n+       GEN_INT (((mask >> 1) & 1) * 4 + 8),\n+       GEN_INT (((mask >> 1) & 1) * 4 + 9),\n+       GEN_INT (((mask >> 1) & 1) * 4 + 10),\n+       GEN_INT (((mask >> 1) & 1) * 4 + 11),\n+       operands[4], operands[5]));\n+  DONE;\n+})\n+\n+(define_insn \"<mask_codefor>avx512vl_shuf_<shuffletype>32x4_1<mask_name>\"\n+  [(set (match_operand:VI4F_256 0 \"register_operand\" \"=v\")\n+\t(vec_select:VI4F_256\n+\t  (vec_concat:<ssedoublemode>\n+\t    (match_operand:VI4F_256 1 \"register_operand\" \"v\")\n+\t    (match_operand:VI4F_256 2 \"nonimmediate_operand\" \"vm\"))\n+\t  (parallel [(match_operand 3  \"const_0_to_7_operand\")\n+\t\t     (match_operand 4  \"const_0_to_7_operand\")\n+\t\t     (match_operand 5  \"const_0_to_7_operand\")\n+\t\t     (match_operand 6  \"const_0_to_7_operand\")\n+\t\t     (match_operand 7  \"const_8_to_15_operand\")\n+\t\t     (match_operand 8  \"const_8_to_15_operand\")\n+\t\t     (match_operand 9  \"const_8_to_15_operand\")\n+\t\t     (match_operand 10 \"const_8_to_15_operand\")])))]\n+  \"TARGET_AVX512VL\n+   && (INTVAL (operands[3]) == (INTVAL (operands[4]) - 1)\n+       && INTVAL (operands[3]) == (INTVAL (operands[5]) - 2)\n+       && INTVAL (operands[3]) == (INTVAL (operands[6]) - 3)\n+       && INTVAL (operands[7]) == (INTVAL (operands[8]) - 1)\n+       && INTVAL (operands[7]) == (INTVAL (operands[9]) - 2)\n+       && INTVAL (operands[7]) == (INTVAL (operands[10]) - 3))\"\n+{\n+  int mask;\n+  mask = INTVAL (operands[3]) / 4;\n+  mask |= (INTVAL (operands[7]) - 8) / 4 << 1;\n+  operands[3] = GEN_INT (mask);\n+\n+  return \"vshuf<shuffletype>32x4\\t{%3, %2, %1, %0<mask_operand11>|%0<mask_operand11>, %1, %2, %3}\";\n+}\n+  [(set_attr \"type\" \"sselog\")\n+   (set_attr \"length_immediate\" \"1\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n (define_expand \"avx512f_shuf_<shuffletype>32x4_mask\"\n   [(match_operand:V16FI 0 \"register_operand\")\n    (match_operand:V16FI 1 \"register_operand\")\n@@ -11554,6 +11657,28 @@\n    (set_attr \"length_immediate\" \"1\")\n    (set_attr \"mode\" \"XI\")])\n \n+(define_expand \"avx512vl_pshufdv3_mask\"\n+  [(match_operand:V8SI 0 \"register_operand\")\n+   (match_operand:V8SI 1 \"nonimmediate_operand\")\n+   (match_operand:SI 2 \"const_0_to_255_operand\")\n+   (match_operand:V8SI 3 \"register_operand\")\n+   (match_operand:QI 4 \"register_operand\")]\n+  \"TARGET_AVX512VL\"\n+{\n+  int mask = INTVAL (operands[2]);\n+  emit_insn (gen_avx2_pshufd_1_mask (operands[0], operands[1],\n+\t\t\t\tGEN_INT ((mask >> 0) & 3),\n+\t\t\t\tGEN_INT ((mask >> 2) & 3),\n+\t\t\t\tGEN_INT ((mask >> 4) & 3),\n+\t\t\t\tGEN_INT ((mask >> 6) & 3),\n+\t\t\t\tGEN_INT (((mask >> 0) & 3) + 4),\n+\t\t\t\tGEN_INT (((mask >> 2) & 3) + 4),\n+\t\t\t\tGEN_INT (((mask >> 4) & 3) + 4),\n+\t\t\t\tGEN_INT (((mask >> 6) & 3) + 4),\n+                operands[3], operands[4]));\n+  DONE;\n+})\n+\n (define_expand \"avx2_pshufdv3\"\n   [(match_operand:V8SI 0 \"register_operand\")\n    (match_operand:V8SI 1 \"nonimmediate_operand\")\n@@ -11573,10 +11698,10 @@\n   DONE;\n })\n \n-(define_insn \"avx2_pshufd_1\"\n-  [(set (match_operand:V8SI 0 \"register_operand\" \"=x\")\n+(define_insn \"avx2_pshufd_1<mask_name>\"\n+  [(set (match_operand:V8SI 0 \"register_operand\" \"=v\")\n \t(vec_select:V8SI\n-\t  (match_operand:V8SI 1 \"nonimmediate_operand\" \"xm\")\n+\t  (match_operand:V8SI 1 \"nonimmediate_operand\" \"vm\")\n \t  (parallel [(match_operand 2 \"const_0_to_3_operand\")\n \t\t     (match_operand 3 \"const_0_to_3_operand\")\n \t\t     (match_operand 4 \"const_0_to_3_operand\")\n@@ -11586,6 +11711,7 @@\n \t\t     (match_operand 8 \"const_4_to_7_operand\")\n \t\t     (match_operand 9 \"const_4_to_7_operand\")])))]\n   \"TARGET_AVX2\n+   && <mask_avx512vl_condition>\n    && INTVAL (operands[2]) + 4 == INTVAL (operands[6])\n    && INTVAL (operands[3]) + 4 == INTVAL (operands[7])\n    && INTVAL (operands[4]) + 4 == INTVAL (operands[8])\n@@ -11598,13 +11724,31 @@\n   mask |= INTVAL (operands[5]) << 6;\n   operands[2] = GEN_INT (mask);\n \n-  return \"vpshufd\\t{%2, %1, %0|%0, %1, %2}\";\n+  return \"vpshufd\\t{%2, %1, %0<mask_operand10>|%0<mask_operand10>, %1, %2}\";\n }\n   [(set_attr \"type\" \"sselog1\")\n-   (set_attr \"prefix\" \"vex\")\n+   (set_attr \"prefix\" \"maybe_evex\")\n    (set_attr \"length_immediate\" \"1\")\n    (set_attr \"mode\" \"OI\")])\n \n+(define_expand \"avx512vl_pshufd_mask\"\n+  [(match_operand:V4SI 0 \"register_operand\")\n+   (match_operand:V4SI 1 \"nonimmediate_operand\")\n+   (match_operand:SI 2 \"const_0_to_255_operand\")\n+   (match_operand:V4SI 3 \"register_operand\")\n+   (match_operand:QI 4 \"register_operand\")]\n+  \"TARGET_AVX512VL\"\n+{\n+  int mask = INTVAL (operands[2]);\n+  emit_insn (gen_sse2_pshufd_1_mask (operands[0], operands[1],\n+\t\t\t\tGEN_INT ((mask >> 0) & 3),\n+\t\t\t\tGEN_INT ((mask >> 2) & 3),\n+\t\t\t\tGEN_INT ((mask >> 4) & 3),\n+\t\t\t\tGEN_INT ((mask >> 6) & 3),\n+                operands[3], operands[4]));\n+  DONE;\n+})\n+\n (define_expand \"sse2_pshufd\"\n   [(match_operand:V4SI 0 \"register_operand\")\n    (match_operand:V4SI 1 \"nonimmediate_operand\")\n@@ -11620,15 +11764,15 @@\n   DONE;\n })\n \n-(define_insn \"sse2_pshufd_1\"\n-  [(set (match_operand:V4SI 0 \"register_operand\" \"=x\")\n+(define_insn \"sse2_pshufd_1<mask_name>\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n \t(vec_select:V4SI\n-\t  (match_operand:V4SI 1 \"nonimmediate_operand\" \"xm\")\n+\t  (match_operand:V4SI 1 \"nonimmediate_operand\" \"vm\")\n \t  (parallel [(match_operand 2 \"const_0_to_3_operand\")\n \t\t     (match_operand 3 \"const_0_to_3_operand\")\n \t\t     (match_operand 4 \"const_0_to_3_operand\")\n \t\t     (match_operand 5 \"const_0_to_3_operand\")])))]\n-  \"TARGET_SSE2\"\n+  \"TARGET_SSE2 && <mask_avx512vl_condition>\"\n {\n   int mask = 0;\n   mask |= INTVAL (operands[2]) << 0;\n@@ -11637,11 +11781,11 @@\n   mask |= INTVAL (operands[5]) << 6;\n   operands[2] = GEN_INT (mask);\n \n-  return \"%vpshufd\\t{%2, %1, %0|%0, %1, %2}\";\n+  return \"%vpshufd\\t{%2, %1, %0<mask_operand6>|%0<mask_operand6>, %1, %2}\";\n }\n   [(set_attr \"type\" \"sselog1\")\n    (set_attr \"prefix_data16\" \"1\")\n-   (set_attr \"prefix\" \"maybe_vex\")\n+   (set_attr \"prefix\" \"<mask_prefix2>\")\n    (set_attr \"length_immediate\" \"1\")\n    (set_attr \"mode\" \"TI\")])\n "}]}