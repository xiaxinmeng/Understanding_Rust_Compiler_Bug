{"sha": "5c41fdfb418ef48ef2d6d82adacd178bbf77db7f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWM0MWZkZmI0MThlZjQ4ZWYyZDZkODJhZGFjZDE3OGJiZjc3ZGI3Zg==", "commit": {"author": {"name": "John David Anglin", "email": "dave@hiauly1.hia.nrc.ca", "date": "2002-01-15T22:37:00Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2002-01-15T22:37:00Z"}, "message": "vax.c (vax_rtx_cost): Return MAX_COST for unsupported MULT, UDIV and UMOD modes.\n\n\t* vax.c (vax_rtx_cost): Return MAX_COST for unsupported MULT, UDIV\n\tand UMOD modes.\n\n\t* vax.h (INDEX_TERM_P): Restrict indexing to modes which have a size\n\tless than or equal to eight bytes.\n\n\t* vax.md (andsi3): Remove constraints and change SET destination\n\toperand type to nonimmediate_operand.\n\t(andhi3, andqi3): Likewise.  Don't clear high order bits of operand 1\n\twhen it is a CONST_INT.\n\nFrom-SVN: r48882", "tree": {"sha": "1b026c2aa4a23dafa1d649ca4beed2195517c7ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1b026c2aa4a23dafa1d649ca4beed2195517c7ef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c41fdfb418ef48ef2d6d82adacd178bbf77db7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c41fdfb418ef48ef2d6d82adacd178bbf77db7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c41fdfb418ef48ef2d6d82adacd178bbf77db7f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c41fdfb418ef48ef2d6d82adacd178bbf77db7f/comments", "author": null, "committer": null, "parents": [{"sha": "de097a2d7d044caf6841fa395bb322d4ef8ba841", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de097a2d7d044caf6841fa395bb322d4ef8ba841", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de097a2d7d044caf6841fa395bb322d4ef8ba841"}], "stats": {"total": 56, "additions": 35, "deletions": 21}, "files": [{"sha": "52f1fb4287e8757cd32c827691991b030dc82f36", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c41fdfb418ef48ef2d6d82adacd178bbf77db7f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c41fdfb418ef48ef2d6d82adacd178bbf77db7f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5c41fdfb418ef48ef2d6d82adacd178bbf77db7f", "patch": "@@ -1,3 +1,16 @@\n+2002-01-15  John David Anglin  <dave@hiauly1.hia.nrc.ca>\n+\n+\t* vax.c (vax_rtx_cost): Return MAX_COST for unsupported MULT, UDIV\n+\tand UMOD modes.\n+\n+\t* vax.h (INDEX_TERM_P): Restrict indexing to modes which have a size\n+\tless than or equal to eight bytes.\n+\n+\t* vax.md (andsi3): Remove constraints and change SET destination\n+\toperand type to nonimmediate_operand.\n+\t(andhi3, andqi3): Likewise.  Don't clear high order bits of operand 1\n+\twhen it is a CONST_INT.\n+\n 2002-01-15  Jason Merrill  <jason@redhat.com>\n \n \t* c-common.def (FILE_STMT): New code."}, {"sha": "8be850a0030223bd64a320af2e0f645183c45ddc", "filename": "gcc/config/vax/vax.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c41fdfb418ef48ef2d6d82adacd178bbf77db7f/gcc%2Fconfig%2Fvax%2Fvax.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c41fdfb418ef48ef2d6d82adacd178bbf77db7f/gcc%2Fconfig%2Fvax%2Fvax.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.c?ref=5c41fdfb418ef48ef2d6d82adacd178bbf77db7f", "patch": "@@ -1,5 +1,5 @@\n /* Subroutines for insn-output.c for VAX.\n-   Copyright (C) 1987, 1994, 1995, 1997, 1998, 1999, 2000\n+   Copyright (C) 1987, 1994, 1995, 1997, 1998, 1999, 2000, 2001, 2002\n    Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n@@ -521,13 +521,12 @@ vax_rtx_cost (x)\n \t  c = 10;\t\t/* 3-4 on VAX 9000, 20-28 on VAX 2 */\n \t  break;\n \tdefault:\n-\t  /* Careful, init_expmed generates arbitrary rtx and\n-\t     computes costs, so we can't abort.  */\n-\t  c = 1000;\n-\t  break;\n+\t  return MAX_COST;\t/* Mode is not supported.  */\n \t}\n       break;\n     case UDIV:\n+      if (mode != SImode)\n+\treturn MAX_COST;\t/* Mode is not supported.  */\n       c = 17;\n       break;\n     case DIV:\n@@ -543,6 +542,8 @@ vax_rtx_cost (x)\n       c = 23;\n       break;\n     case UMOD:\n+      if (mode != SImode)\n+\treturn MAX_COST;\t/* Mode is not supported.  */\n       c = 29;\n       break;\n     case FLOAT:"}, {"sha": "47a086650b925579155fa59f90ec18248853dc7d", "filename": "gcc/config/vax/vax.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c41fdfb418ef48ef2d6d82adacd178bbf77db7f/gcc%2Fconfig%2Fvax%2Fvax.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c41fdfb418ef48ef2d6d82adacd178bbf77db7f/gcc%2Fconfig%2Fvax%2Fvax.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.h?ref=5c41fdfb418ef48ef2d6d82adacd178bbf77db7f", "patch": "@@ -689,14 +689,14 @@ enum reg_class { NO_REGS, ALL_REGS, LIM_REG_CLASSES };\n       && GET_CODE (xfoob) == REG && REG_OK_FOR_BASE_P (xfoob))\t\t\\\n     goto ADDR; }\n \n-/* 1 if PROD is either a reg times size of mode MODE\n-   or just a reg, if MODE is just one byte.\n+/* 1 if PROD is either a reg times size of mode MODE and MODE is less\n+   than or equal 8 bytes, or just a reg if MODE is one byte.\n    This macro's expansion uses the temporary variables xfoo0 and xfoo1\n    that must be declared in the surrounding context.  */\n #define INDEX_TERM_P(PROD, MODE)   \\\n (GET_MODE_SIZE (MODE) == 1\t\t\t\t\t\t\\\n  ? (GET_CODE (PROD) == REG && REG_OK_FOR_BASE_P (PROD))\t\t\t\\\n- : (GET_CODE (PROD) == MULT\t\t\t\t\t\t\\\n+ : (GET_CODE (PROD) == MULT && GET_MODE_SIZE (MODE) <= 8\t\t\\\n     &&\t\t\t\t\t\t\t\t\t\\\n     (xfoo0 = XEXP (PROD, 0), xfoo1 = XEXP (PROD, 1),\t\t\t\\\n      ((((GET_CODE (xfoo0) == CONST_INT\t\t\t\t\t\\"}, {"sha": "c19427908df3e44bde753e26c782e930a93700eb", "filename": "gcc/config/vax/vax.md", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c41fdfb418ef48ef2d6d82adacd178bbf77db7f/gcc%2Fconfig%2Fvax%2Fvax.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c41fdfb418ef48ef2d6d82adacd178bbf77db7f/gcc%2Fconfig%2Fvax%2Fvax.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.md?ref=5c41fdfb418ef48ef2d6d82adacd178bbf77db7f", "patch": "@@ -1,6 +1,6 @@\n ;; Machine description for GNU compiler, VAX Version\n-;; Copyright (C) 1987, 1988, 1991, 1994, 1995, 1996, 1998, 1999, 2000, 2001\n-;; Free Software Foundation, Inc.\n+;; Copyright (C) 1987, 1988, 1991, 1994, 1995, 1996, 1998, 1999, 2000, 2001,\n+;; 2002 Free Software Foundation, Inc.\n \n ;; This file is part of GNU CC.\n \n@@ -896,9 +896,9 @@\n \f\n ;; Bit-and on the VAX is done with a clear-bits insn.\n (define_expand \"andsi3\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=g\")\n-\t(and:SI (not:SI (match_operand:SI 1 \"general_operand\" \"g\"))\n-\t\t(match_operand:SI 2 \"general_operand\" \"g\")))]\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"\")\n+\t(and:SI (not:SI (match_operand:SI 1 \"general_operand\" \"\"))\n+\t\t(match_operand:SI 2 \"general_operand\" \"\")))]\n   \"\"\n   \"\n {\n@@ -919,9 +919,9 @@\n }\")\n \n (define_expand \"andhi3\"\n-  [(set (match_operand:HI 0 \"general_operand\" \"=g\")\n-\t(and:HI (not:HI (match_operand:HI 1 \"general_operand\" \"g\"))\n-\t\t(match_operand:HI 2 \"general_operand\" \"g\")))]\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"\")\n+\t(and:HI (not:HI (match_operand:HI 1 \"general_operand\" \"\"))\n+\t\t(match_operand:HI 2 \"general_operand\" \"\")))]\n   \"\"\n   \"\n {\n@@ -935,15 +935,15 @@\n     }\n \n   if (GET_CODE (op1) == CONST_INT)\n-    operands[1] = GEN_INT (65535 & ~INTVAL (op1));\n+    operands[1] = GEN_INT (~INTVAL (op1));\n   else\n     operands[1] = expand_unop (HImode, one_cmpl_optab, op1, 0, 1);\n }\")\n \n (define_expand \"andqi3\"\n-  [(set (match_operand:QI 0 \"general_operand\" \"=g\")\n-\t(and:QI (not:QI (match_operand:QI 1 \"general_operand\" \"g\"))\n-\t\t(match_operand:QI 2 \"general_operand\" \"g\")))]\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"\")\n+\t(and:QI (not:QI (match_operand:QI 1 \"general_operand\" \"\"))\n+\t\t(match_operand:QI 2 \"general_operand\" \"\")))]\n   \"\"\n   \"\n {\n@@ -957,7 +957,7 @@\n    }\n \n   if (GET_CODE (op1) == CONST_INT)\n-    operands[1] = GEN_INT (255 & ~INTVAL (op1));\n+    operands[1] = GEN_INT (~INTVAL (op1));\n   else\n     operands[1] = expand_unop (QImode, one_cmpl_optab, op1, 0, 1);\n }\")"}]}