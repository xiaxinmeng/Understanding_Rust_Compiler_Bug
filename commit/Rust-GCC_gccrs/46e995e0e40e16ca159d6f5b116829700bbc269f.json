{"sha": "46e995e0e40e16ca159d6f5b116829700bbc269f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDZlOTk1ZTBlNDBlMTZjYTE1OWQ2ZjViMTE2ODI5NzAwYmJjMjY5Zg==", "commit": {"author": {"name": "Paul Brook", "email": "paul@codesourcery.com", "date": "2004-06-29T14:50:35Z"}, "committer": {"name": "Paul Brook", "email": "pbrook@gcc.gnu.org", "date": "2004-06-29T14:50:35Z"}, "message": "target-def.h (TARGET_CXX_GET_COOKIE_SIZE, [...]): Define.\n\ngcc/\n\t* target-def.h (TARGET_CXX_GET_COOKIE_SIZE,\n\tTARGET_CXX_COOKIE_HAS_SIZE): Define.\n\t(TARGET_CXX): Use them.\n\t* target.h (struct gcc_target): Add cxx.get_cookie_size and\n\tcxx.cookie_has_size.\n\t* targhooks.c (default_cxx_get_cookie_size): New fucntion.\n\t* targhooks.h (default_cxx_get_cookie_size): Add prototype.\n\t* config/arm/arm.c (TARGET_CXX_GET_COOKIE_SIZE,\n\tTARGET_CXX_COOKIE_HAS_SIZE): Define.\n\t(arm_get_cookie_size, arm_cookie_has_size): New functions.\n\t* Make-lang.in (cp/init.o): Add dependency on $(TARGET_H).\n\t* doc/tm.texi: Document TARGET_CXX_GET_COOKIE_SIZE and\n\tTARGET_CXX_COOKIE_HAS_SIZE.\ngcc/cp/\n\t* init.c: Include target.h.\n\t(get_cookie_size): Remove and replace with target hook.\n\tUpdate callers.\n\t(build_new_1): Store the element size in the cookie.\nlibstdc++-v3/\n\t* libsupc++/vec.cc (__cxa_vec_new2, __cxa_vec_new3): Store the\n\telement size in the cookie.\ntestsuite/\n\t* g++.old-deja/g++.abi/arraynew.C: Handle ARM EABI cookies.\n\t* g++.old-deja/g++.abi/cxa_vec.C: Allocate larger cookies for AEABI.\n\nFrom-SVN: r83854", "tree": {"sha": "f6a9a6cf28955476ec2789692fe97c33db01c297", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f6a9a6cf28955476ec2789692fe97c33db01c297"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/46e995e0e40e16ca159d6f5b116829700bbc269f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46e995e0e40e16ca159d6f5b116829700bbc269f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46e995e0e40e16ca159d6f5b116829700bbc269f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46e995e0e40e16ca159d6f5b116829700bbc269f/comments", "author": null, "committer": null, "parents": [{"sha": "50a2de961ffa6022ac3084c94f76d1462be04845", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50a2de961ffa6022ac3084c94f76d1462be04845", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50a2de961ffa6022ac3084c94f76d1462be04845"}], "stats": {"total": 229, "additions": 188, "deletions": 41}, "files": [{"sha": "3ad291e0a924a18a820988bede589904700d82c5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46e995e0e40e16ca159d6f5b116829700bbc269f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46e995e0e40e16ca159d6f5b116829700bbc269f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=46e995e0e40e16ca159d6f5b116829700bbc269f", "patch": "@@ -1,3 +1,19 @@\n+2004-06-29  Paul Brook  <paul@codesourcery.com>\n+\n+\t* target-def.h (TARGET_CXX_GET_COOKIE_SIZE,\n+\tTARGET_CXX_COOKIE_HAS_SIZE): Define.\n+\t(TARGET_CXX): Use them.\n+\t* target.h (struct gcc_target): Add cxx.get_cookie_size and\n+\tcxx.cookie_has_size.\n+\t* targhooks.c (default_cxx_get_cookie_size): New fucntion.\n+\t* targhooks.h (default_cxx_get_cookie_size): Add prototype.\n+\t* config/arm/arm.c (TARGET_CXX_GET_COOKIE_SIZE,\n+\tTARGET_CXX_COOKIE_HAS_SIZE): Define.\n+\t(arm_get_cookie_size, arm_cookie_has_size): New functions.\n+\t* Make-lang.in (cp/init.o): Add dependency on $(TARGET_H).\n+\t* doc/tm.texi: Document TARGET_CXX_GET_COOKIE_SIZE and\n+\tTARGET_CXX_COOKIE_HAS_SIZE.\n+\n 2004-06-29  J\"orn Rennecke <joern.rennecke@superh.com>\n \n \t* cfglayout.c (fixup_reorder_chain): Don't do anything for"}, {"sha": "7cd1573a03c91dad3b69e78e560554c00ff6e1e1", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46e995e0e40e16ca159d6f5b116829700bbc269f/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46e995e0e40e16ca159d6f5b116829700bbc269f/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=46e995e0e40e16ca159d6f5b116829700bbc269f", "patch": "@@ -164,6 +164,8 @@ static bool arm_align_anon_bitfield (void);\n \n static tree arm_cxx_guard_type (void);\n static bool arm_cxx_guard_mask_bit (void);\n+static tree arm_get_cookie_size (tree);\n+static bool arm_cookie_has_size (void);\n \n \f\n /* Initialize the GCC target structure.  */\n@@ -273,6 +275,12 @@ static bool arm_cxx_guard_mask_bit (void);\n #undef TARGET_CXX_GUARD_MASK_BIT\n #define TARGET_CXX_GUARD_MASK_BIT arm_cxx_guard_mask_bit\n \n+#undef TARGET_CXX_GET_COOKIE_SIZE\n+#define TARGET_CXX_GET_COOKIE_SIZE arm_get_cookie_size\n+\n+#undef TARGET_CXX_COOKIE_HAS_SIZE\n+#define TARGET_CXX_COOKIE_HAS_SIZE arm_cookie_has_size\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Obstack for minipool constant handling.  */\n@@ -14564,3 +14572,28 @@ arm_cxx_guard_mask_bit (void)\n {\n   return TARGET_AAPCS_BASED;\n }\n+\n+\n+/* The EABI specifies that all array cookies are 8 bytes long.  */\n+\n+static tree\n+arm_get_cookie_size (tree type)\n+{\n+  tree size;\n+\n+  if (!TARGET_AAPCS_BASED)\n+    return default_cxx_get_cookie_size (type);\n+\n+  size = build_int_2 (8, 0);\n+  TREE_TYPE (size) = sizetype;\n+  return size;\n+}\n+\n+\n+/* The EABI says that array cookies should also contain the element size.  */\n+\n+static bool\n+arm_cookie_has_size (void)\n+{\n+  return TARGET_AAPCS_BASED;\n+}"}, {"sha": "203c36a24cba59b6b8c103f87f8407e2753ac337", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46e995e0e40e16ca159d6f5b116829700bbc269f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46e995e0e40e16ca159d6f5b116829700bbc269f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=46e995e0e40e16ca159d6f5b116829700bbc269f", "patch": "@@ -1,3 +1,10 @@\n+2004-06-29  Paul Brook  <paul@codesourcery.com>\n+\n+\t* init.c: Include target.h.\n+\t(get_cookie_size): Remove and replace with target hook.\n+\tUpdate callers.\n+\t(build_new_1): Store the element size in the cookie.\n+\n 2004-06-29  Nathan Sidwell  <nathan@codesourcery.com>\n \n \tPR c++/16260"}, {"sha": "34fb529fbc8c98a7d5d62397a497adb7b014de5f", "filename": "gcc/cp/Make-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46e995e0e40e16ca159d6f5b116829700bbc269f/gcc%2Fcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46e995e0e40e16ca159d6f5b116829700bbc269f/gcc%2Fcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMake-lang.in?ref=46e995e0e40e16ca159d6f5b116829700bbc269f", "patch": "@@ -235,7 +235,7 @@ cp/call.o: cp/call.c $(CXX_TREE_H) $(TM_H) flags.h toplev.h $(RTL_H) $(EXPR_H) \\\n      diagnostic.h intl.h gt-cp-call.h convert.h target.h\n cp/friend.o: cp/friend.c $(CXX_TREE_H) $(TM_H) flags.h $(RTL_H) toplev.h $(EXPR_H)\n cp/init.o: cp/init.c $(CXX_TREE_H) $(TM_H) flags.h $(RTL_H) $(EXPR_H) toplev.h \\\n-  except.h\n+  except.h $(TARGET_H)\n cp/method.o: cp/method.c $(CXX_TREE_H) $(TM_H) toplev.h $(RTL_H) $(EXPR_H) \\\n   $(TM_P_H) $(TARGET_H) gt-cp-method.h\n cp/cvt.o: cp/cvt.c $(CXX_TREE_H) $(TM_H) cp/decl.h flags.h toplev.h convert.h"}, {"sha": "4e02b9d2baeb4de89432183c42fdee134c838cdd", "filename": "gcc/cp/init.c", "status": "modified", "additions": 19, "deletions": 29, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46e995e0e40e16ca159d6f5b116829700bbc269f/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46e995e0e40e16ca159d6f5b116829700bbc269f/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=46e995e0e40e16ca159d6f5b116829700bbc269f", "patch": "@@ -34,6 +34,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"output.h\"\n #include \"except.h\"\n #include \"toplev.h\"\n+#include \"target.h\"\n \n static bool begin_init_stmts (tree *, tree *);\n static tree finish_init_stmts (bool, tree, tree);\n@@ -52,7 +53,6 @@ static tree get_temp_regvar (tree, tree);\n static tree dfs_initialize_vtbl_ptrs (tree, void *);\n static tree build_default_init (tree, tree);\n static tree build_new_1\t(tree);\n-static tree get_cookie_size (tree);\n static tree build_dtor_call (tree, special_function_kind, int);\n static tree build_field_list (tree, tree, int *);\n static tree build_vtbl_address (tree);\n@@ -1756,29 +1756,6 @@ build_java_class_ref (tree type)\n   return class_decl;\n }\n \n-/* Returns the size of the cookie to use when allocating an array\n-   whose elements have the indicated TYPE.  Assumes that it is already\n-   known that a cookie is needed.  */\n-\n-static tree\n-get_cookie_size (tree type)\n-{\n-  tree cookie_size;\n-\n-  /* We need to allocate an additional max (sizeof (size_t), alignof\n-     (true_type)) bytes.  */\n-  tree sizetype_size;\n-  tree type_align;\n-  \n-  sizetype_size = size_in_bytes (sizetype);\n-  type_align = size_int (TYPE_ALIGN_UNIT (type));\n-  if (INT_CST_LT_UNSIGNED (type_align, sizetype_size))\n-    cookie_size = sizetype_size;\n-  else\n-    cookie_size = type_align;\n-\n-  return cookie_size;\n-}\n \n /* Called from cplus_expand_expr when expanding a NEW_EXPR.  The return\n    value is immediately handed to expand_expr.  */\n@@ -1925,7 +1902,7 @@ build_new_1 (tree exp)\n \t  /* If a cookie is required, add some extra space.  */\n \t  if (has_array && TYPE_VEC_NEW_USES_COOKIE (true_type))\n \t    {\n-\t      cookie_size = get_cookie_size (true_type);\n+\t      cookie_size = targetm.cxx.get_cookie_size (true_type);\n \t      size = size_binop (PLUS_EXPR, size, cookie_size);\n \t    }\n \t  /* Create the argument list.  */\n@@ -1948,7 +1925,7 @@ build_new_1 (tree exp)\n \t  /* Use a global operator new.  */\n \t  /* See if a cookie might be required.  */\n \t  if (has_array && TYPE_VEC_NEW_USES_COOKIE (true_type))\n-\t    cookie_size = get_cookie_size (true_type);\n+\t    cookie_size = targetm.cxx.get_cookie_size (true_type);\n \t  else\n \t    cookie_size = NULL_TREE;\n \n@@ -2019,6 +1996,7 @@ build_new_1 (tree exp)\n   if (cookie_size)\n     {\n       tree cookie;\n+      tree cookie_ptr;\n \n       /* Adjust so we're pointing to the start of the object.  */\n       data_addr = get_target_expr (build (PLUS_EXPR, full_pointer_type,\n@@ -2027,11 +2005,23 @@ build_new_1 (tree exp)\n       /* Store the number of bytes allocated so that we can know how\n \t many elements to destroy later.  We use the last sizeof\n \t (size_t) bytes to store the number of elements.  */\n-      cookie = build (MINUS_EXPR, build_pointer_type (sizetype),\n+      cookie_ptr = build (MINUS_EXPR, build_pointer_type (sizetype),\n \t\t      data_addr, size_in_bytes (sizetype));\n-      cookie = build_indirect_ref (cookie, NULL);\n+      cookie = build_indirect_ref (cookie_ptr, NULL);\n \n       cookie_expr = build (MODIFY_EXPR, sizetype, cookie, nelts);\n+\n+      if (targetm.cxx.cookie_has_size ())\n+\t{\n+\t  /* Also store the element size.  */\n+\t  cookie_ptr = build (MINUS_EXPR, build_pointer_type (sizetype),\n+\t\t\t      cookie_ptr, size_in_bytes (sizetype));\n+\t  cookie = build_indirect_ref (cookie_ptr, NULL);\n+\t  cookie = build (MODIFY_EXPR, sizetype, cookie,\n+\t\t\t  size_in_bytes(true_type));\n+\t  cookie_expr = build (COMPOUND_EXPR, TREE_TYPE (cookie_expr),\n+\t\t\t       cookie, cookie_expr);\n+\t}\n       data_addr = TARGET_EXPR_SLOT (data_addr);\n     }\n   else\n@@ -2278,7 +2268,7 @@ build_vec_delete_1 (tree base, tree maxindex, tree type,\n \t{\n \t  tree cookie_size;\n \n-\t  cookie_size = get_cookie_size (type);\n+\t  cookie_size = targetm.cxx.get_cookie_size (type);\n \t  base_tbd \n \t    = cp_convert (ptype,\n \t\t\t  cp_build_binary_op (MINUS_EXPR,"}, {"sha": "944477def10e4af2c5f094393ed67be22d3097d6", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46e995e0e40e16ca159d6f5b116829700bbc269f/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46e995e0e40e16ca159d6f5b116829700bbc269f/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=46e995e0e40e16ca159d6f5b116829700bbc269f", "patch": "@@ -8477,6 +8477,19 @@ This hook determines how guard variables are used.  It should return\n @code{true} indicates the least significant bit should be used.\n @end deftypefn\n \n+@deftypefn {Target Hook} tree TARGET_CXX_GET_COOKIE_SIZE (tree @var{type})\n+This hook returns the size of the cookie to use when allocating an array\n+whose elements have the indicated @var{type}.  Assumes that it is already\n+known that a cookie is needed.  The default is\n+@code{max(sizeof (size_t), alignof(type))}, as defined in section 2.7 of the\n+IA64/Generic C++ ABI.\n+@end deftypefn\n+\n+@deftypefn {Target Hook} bool TARGET_CXX_COOKIE_HAS_SIZE (void)\n+This hook should return @code{true} if the element size should be stored in\n+array cookies.  The default is to return @code{false}.\n+@end deftypefn\n+\n @node Misc\n @section Miscellaneous Parameters\n @cindex parameters, miscellaneous"}, {"sha": "0761a06f7169f10179c364840a9f9fb34aba6342", "filename": "gcc/target-def.h", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46e995e0e40e16ca159d6f5b116829700bbc269f/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46e995e0e40e16ca159d6f5b116829700bbc269f/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=46e995e0e40e16ca159d6f5b116829700bbc269f", "patch": "@@ -400,10 +400,20 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n #define TARGET_CXX_GUARD_MASK_BIT hook_bool_void_false\n #endif\n \n+#ifndef TARGET_CXX_GET_COOKIE_SIZE\n+#define TARGET_CXX_GET_COOKIE_SIZE default_cxx_get_cookie_size\n+#endif\n+\n+#ifndef TARGET_CXX_COOKIE_HAS_SIZE\n+#define TARGET_CXX_COOKIE_HAS_SIZE hook_bool_void_false\n+#endif\n+\n #define TARGET_CXX\t\t\\\n   {\t\t\t\t\\\n     TARGET_CXX_GUARD_TYPE,\t\\\n-    TARGET_CXX_GUARD_MASK_BIT\t\\\n+    TARGET_CXX_GUARD_MASK_BIT,\t\\\n+    TARGET_CXX_GET_COOKIE_SIZE,\t\\\n+    TARGET_CXX_COOKIE_HAS_SIZE\t\\\n   }\n \n /* The whole shebang.  */"}, {"sha": "da37fcd23bdccb4bef8e1ce5ad1699908140d851", "filename": "gcc/target.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46e995e0e40e16ca159d6f5b116829700bbc269f/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46e995e0e40e16ca159d6f5b116829700bbc269f/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=46e995e0e40e16ca159d6f5b116829700bbc269f", "patch": "@@ -482,6 +482,11 @@ struct gcc_target\n     tree (*guard_type) (void);\n     /* Return true if only the low bit of the guard should be tested.  */\n     bool (*guard_mask_bit) (void);\n+    /* Returns the size of the array cookie for an array of type.  */\n+    tree (*get_cookie_size) (tree);\n+    /* Returns true if the element size should be stored in the\n+       array cookie.  */\n+    bool (*cookie_has_size) (void);\n   } cxx;\n \n   /* Leave the boolean fields at the end.  */"}, {"sha": "a2745c4cbcd3c5b969a36ff60907102f3eae20af", "filename": "gcc/targhooks.c", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46e995e0e40e16ca159d6f5b116829700bbc269f/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46e995e0e40e16ca159d6f5b116829700bbc269f/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=46e995e0e40e16ca159d6f5b116829700bbc269f", "patch": "@@ -143,3 +143,28 @@ default_cxx_guard_type (void)\n {\n   return long_long_integer_type_node;\n }\n+\n+\n+/* Returns the size of the cookie to use when allocating an array\n+   whose elements have the indicated TYPE.  Assumes that it is already\n+   known that a cookie is needed.  */\n+\n+tree\n+default_cxx_get_cookie_size (tree type)\n+{\n+  tree cookie_size;\n+\n+  /* We need to allocate an additional max (sizeof (size_t), alignof\n+     (true_type)) bytes.  */\n+  tree sizetype_size;\n+  tree type_align;\n+  \n+  sizetype_size = size_in_bytes (sizetype);\n+  type_align = size_int (TYPE_ALIGN_UNIT (type));\n+  if (INT_CST_LT_UNSIGNED (type_align, sizetype_size))\n+    cookie_size = sizetype_size;\n+  else\n+    cookie_size = type_align;\n+\n+  return cookie_size;\n+}"}, {"sha": "fba17f82001c640d29945c70b2a8cd266e138c67", "filename": "gcc/targhooks.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46e995e0e40e16ca159d6f5b116829700bbc269f/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46e995e0e40e16ca159d6f5b116829700bbc269f/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=46e995e0e40e16ca159d6f5b116829700bbc269f", "patch": "@@ -33,3 +33,4 @@ extern bool default_pretend_outgoing_varargs_named (CUMULATIVE_ARGS *);\n \n extern bool hook_bool_CUMULATIVE_ARGS_true (CUMULATIVE_ARGS *);\n extern tree default_cxx_guard_type (void);\n+extern tree default_cxx_get_cookie_size (tree);"}, {"sha": "1bc26719b394d371e90eac0366421b85fc85ba0c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46e995e0e40e16ca159d6f5b116829700bbc269f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46e995e0e40e16ca159d6f5b116829700bbc269f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=46e995e0e40e16ca159d6f5b116829700bbc269f", "patch": "@@ -1,3 +1,8 @@\n+2004-06-29  Paul Brook  <paul@codesourcery.com>\n+\n+\t* g++.old-deja/g++.abi/arraynew.C: Handle ARM EABI cookies.\n+\t* g++.old-deja/g++.abi/cxa_vec.C: Allocate larger cookies for AEABI.\n+\n 2004-06-29  Nathan Sidwell  <nathan@codesourcery.com>\n \n \tPR c++/16260"}, {"sha": "273d137b85e64004cc8a05084b5274eb678c60d1", "filename": "gcc/testsuite/g++.old-deja/g++.abi/arraynew.C", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46e995e0e40e16ca159d6f5b116829700bbc269f/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.abi%2Farraynew.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46e995e0e40e16ca159d6f5b116829700bbc269f/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.abi%2Farraynew.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.abi%2Farraynew.C?ref=46e995e0e40e16ca159d6f5b116829700bbc269f", "patch": "@@ -36,37 +36,59 @@ template <typename T>\n void check_cookie (int i)\n {\n   void* a = new T[11];\n+  size_t x;\n   \n   // Compute the cookie location manually.\n-  size_t x = __alignof__ (T);\n+#ifdef __ARM_EABI__\n+  x = 8;\n+#else\n+  x = __alignof__ (T);\n   if (x < sizeof (size_t))\n     x = sizeof (size_t);\n+#endif\n   if ((char *) a - x != (char *) p)\n     exit (i);\n \n   // Check the cookie value.\n   size_t *sp = ((size_t *) a) - 1;\n   if (*sp != 11)\n     exit (i);\n+\n+#ifdef __ARM_EABI__\n+  size_t *sp = ((size_t *) a) - 2;\n+  if (*sp != sizeof (T))\n+    exit (i);\n+#endif\n }\n \n template <typename T>\n void check_placement_cookie (int i)\n {\n   p = malloc (sizeof (T) * 11 + 100);\n   void* a = new (p) T[11];\n+  size_t x;\n   \n   // Compute the cookie location manually.\n-  size_t x = __alignof__ (T);\n+#ifdef __ARM_EABI__\n+  x = 8;\n+#else\n+  x = __alignof__ (T);\n   if (x < sizeof (size_t))\n     x = sizeof (size_t);\n+#endif\n   if ((char *) a - x != (char *) p)\n     exit (i);\n \n   // Check the cookie value.\n   size_t *sp = ((size_t *) a) - 1;\n   if (*sp != 11)\n     exit (i);\n+\n+#ifdef __ARM_EABI__\n+  size_t *sp = ((size_t *) a) - 2;\n+  if (*sp != sizeof (T))\n+    exit (i);\n+#endif\n }\n \n struct X {};"}, {"sha": "a6fdc44e597fcf1eea6f71d919a8455a7819f32d", "filename": "gcc/testsuite/g++.old-deja/g++.abi/cxa_vec.C", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46e995e0e40e16ca159d6f5b116829700bbc269f/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.abi%2Fcxa_vec.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46e995e0e40e16ca159d6f5b116829700bbc269f/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.abi%2Fcxa_vec.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.abi%2Fcxa_vec.C?ref=46e995e0e40e16ca159d6f5b116829700bbc269f", "patch": "@@ -14,6 +14,13 @@ static int ctor_count = 0;\n static int dtor_count = 0;\n static bool dtor_repeat = false;\n \n+// Allocate enough padding to hold an array cookie.\n+#ifdef __ARM_EABI__\n+#define padding 8\n+#else\n+#define padding (sizeof (std::size_t))\n+#endif\n+\n // our pseudo ctors and dtors\n static void ctor (void *)\n {\n@@ -71,8 +78,8 @@ void test0 ()\n       \n       try\n         {\n-          void *ary = abi::__cxa_vec_new (5, 1, sizeof (std::size_t), ctor, dtor);\n-          abi::__cxa_vec_delete (ary, 1, sizeof (std::size_t), dtor);\n+          void *ary = abi::__cxa_vec_new (5, 1, padding, ctor, dtor);\n+          abi::__cxa_vec_delete (ary, 1, padding, dtor);\n           if (ctor_count || dtor_count || blocks)\n             longjmp (jump, 1);\n         }\n@@ -105,7 +112,7 @@ void test1 ()\n       ctor_count = 4;\n       try\n         {\n-          void *ary = abi::__cxa_vec_new (5, 1, sizeof (std::size_t), ctor, dtor);\n+          void *ary = abi::__cxa_vec_new (5, 1, padding, ctor, dtor);\n           longjmp (jump, 1);\n         }\n       catch (...)\n@@ -138,8 +145,8 @@ void test2 ()\n       dtor_count = 3;\n       try\n         {\n-          void *ary = abi::__cxa_vec_new (5, 1, sizeof (std::size_t), ctor, dtor);\n-          abi::__cxa_vec_delete (ary, 1, sizeof (std::size_t), dtor);\n+          void *ary = abi::__cxa_vec_new (5, 1, padding, ctor, dtor);\n+          abi::__cxa_vec_delete (ary, 1, padding, dtor);\n           longjmp (jump, 1);\n         }\n       catch (...)\n@@ -174,8 +181,8 @@ void test3 ()\n       dtor_repeat = true;\n       try\n         {\n-          void *ary = abi::__cxa_vec_new (5, 1, sizeof (std::size_t), ctor, dtor);\n-          abi::__cxa_vec_delete (ary, 1, sizeof (std::size_t), dtor);\n+          void *ary = abi::__cxa_vec_new (5, 1, padding, ctor, dtor);\n+          abi::__cxa_vec_delete (ary, 1, padding, dtor);\n           longjmp (jump, 1);\n         }\n       catch (...)\n@@ -212,7 +219,7 @@ void test4 ()\n       dtor_count = 2;\n       try\n         {\n-          void *ary = abi::__cxa_vec_new (5, 1, sizeof (std::size_t), ctor, dtor);\n+          void *ary = abi::__cxa_vec_new (5, 1, padding, ctor, dtor);\n           longjmp (jump, 1);\n         }\n       catch (...)"}, {"sha": "e433113f1f2b9641251c8cd38e404d8c46afd020", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46e995e0e40e16ca159d6f5b116829700bbc269f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46e995e0e40e16ca159d6f5b116829700bbc269f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=46e995e0e40e16ca159d6f5b116829700bbc269f", "patch": "@@ -1,3 +1,8 @@\n+2004-06-29  Paul Brook  <paul@codesourcery.com>\n+\n+\t* libsupc++/vec.cc (__cxa_vec_new2, __cxa_vec_new3): Store the\n+\telement size in the cookie.\n+\n 2004-06-28  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/bits/cpp_type_traits.h: Move the additions to"}, {"sha": "eb7851b0588b71bc33fdef944f5d8ac370a32cd1", "filename": "libstdc++-v3/libsupc++/vec.cc", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46e995e0e40e16ca159d6f5b116829700bbc269f/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fvec.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46e995e0e40e16ca159d6f5b116829700bbc269f/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fvec.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fvec.cc?ref=46e995e0e40e16ca159d6f5b116829700bbc269f", "patch": "@@ -96,6 +96,10 @@ namespace __cxxabiv1\n       {\n \tbase += padding_size;\n \treinterpret_cast <std::size_t *> (base)[-1] = element_count;\n+#ifdef __ARM_EABI__\n+\t// ARM EABI array cookies also contain the element size.\n+\treinterpret_cast <std::size_t *> (base)[-2] = element_size;\n+#endif\n       }\n     try\n       {\n@@ -131,6 +135,10 @@ namespace __cxxabiv1\n       {\n \tbase += padding_size;\n \treinterpret_cast<std::size_t *>(base)[-1] = element_count;\n+#ifdef __ARM_EABI__\n+\t// ARM EABI array cookies also contain the element size.\n+\treinterpret_cast <std::size_t *> (base)[-2] = element_size;\n+#endif\n       }\n     try\n       {"}]}