{"sha": "b65538149bb5d374aa7d5082500f64886a4dfb23", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjY1NTM4MTQ5YmI1ZDM3NGFhN2Q1MDgyNTAwZjY0ODg2YTRkZmIyMw==", "commit": {"author": {"name": "Steven Bosscher", "email": "s.bosscher@student.tudelft.nl", "date": "2003-02-22T05:35:28Z"}, "committer": {"name": "Andreas Jaeger", "email": "aj@gcc.gnu.org", "date": "2003-02-22T05:35:28Z"}, "message": "re PR c/8828 (gcc reports some code is unreachable when it is not)\n\n2003-02-22  Steven Bosscher  <s.bosscher@student.tudelft.nl>\n\n\tPR c/8828\n\t* jump.c (never_reached_warning): Don't fall through BARRRIER\n\tinsns.  Update comments to reflect what the function really does.\n\nFrom-SVN: r63275", "tree": {"sha": "a37986796fe69ede4e085f84ad5dffcbdbc662c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a37986796fe69ede4e085f84ad5dffcbdbc662c1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b65538149bb5d374aa7d5082500f64886a4dfb23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b65538149bb5d374aa7d5082500f64886a4dfb23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b65538149bb5d374aa7d5082500f64886a4dfb23", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b65538149bb5d374aa7d5082500f64886a4dfb23/comments", "author": null, "committer": null, "parents": [{"sha": "26182e150e12399cdd151a70f46e3c937add775c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26182e150e12399cdd151a70f46e3c937add775c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26182e150e12399cdd151a70f46e3c937add775c"}], "stats": {"total": 31, "additions": 16, "deletions": 15}, "files": [{"sha": "249d0f5ef2cc8aef8421b56a112000413106d7ec", "filename": "gcc/ChangeLog", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b65538149bb5d374aa7d5082500f64886a4dfb23/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b65538149bb5d374aa7d5082500f64886a4dfb23/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b65538149bb5d374aa7d5082500f64886a4dfb23", "patch": "@@ -4,8 +4,8 @@\n \t* toplev.c (process_options): If flag_detailed_statistics is set,\n \tthen set time_report as well.\n \n-        PR c/8828\n-        * jump.c (never_reached_warning): Don't fall through BARRRIER\n+\tPR c/8828\n+\t* jump.c (never_reached_warning): Don't fall through BARRRIER\n \tinsns.  Update comments to reflect what the function really does.\n \n 2003-02-21  Roger Sayle  <roger@eyesopen.com>"}, {"sha": "b4e0d1c043fe2a36231075e221c5aa3e3ed9b7d3", "filename": "gcc/jump.c", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b65538149bb5d374aa7d5082500f64886a4dfb23/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b65538149bb5d374aa7d5082500f64886a4dfb23/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=b65538149bb5d374aa7d5082500f64886a4dfb23", "patch": "@@ -1706,9 +1706,9 @@ delete_computation (insn)\n }\n \f\n /* Delete insn INSN from the chain of insns and update label ref counts\n-   and delete insns now unreachable. \n+   and delete insns now unreachable.\n \n-   Returns the first insn after INSN that was not deleted. \n+   Returns the first insn after INSN that was not deleted.\n \n    Usage of this instruction is deprecated.  Use delete_insn instead and\n    subsequent cfg_cleanup pass to delete unreachable code if needed.  */\n@@ -1893,14 +1893,14 @@ delete_for_peephole (from, to)\n      is also an unconditional jump in that case.  */\n }\n \f\n-/* We have determined that INSN is never reached, and are about to\n-   delete it.  Print a warning if the user asked for one.\n+/* We have determined that AVOIDED_INSN is never reached, and are\n+   about to delete it.  If the insn chain between AVOIDED_INSN and\n+   FINISH contains more than one line from the current function, and\n+   contains at least one operation, print a warning if the user asked\n+   for it.  If FINISH is NULL, look between AVOIDED_INSN and a LABEL.\n \n-   To try to make this warning more useful, this should only be called\n-   once per basic block not reached, and it only warns when the basic\n-   block contains more than one line from the current function, and\n-   contains at least one operation.  CSE and inlining can duplicate insns,\n-   so it's possible to get spurious warnings from this.  */\n+   CSE and inlining can duplicate insns, so it's possible to get\n+   spurious warnings from this.  */\n \n void\n never_reached_warning (avoided_insn, finish)\n@@ -1910,15 +1910,16 @@ never_reached_warning (avoided_insn, finish)\n   rtx a_line_note = NULL;\n   int two_avoided_lines = 0, contains_insn = 0, reached_end = 0;\n \n-  if (! warn_notreached)\n+  if (!warn_notreached)\n     return;\n \n-  /* Scan forwards, looking at LINE_NUMBER notes, until\n-     we hit a LABEL or we run out of insns.  */\n+  /* Scan forwards, looking at LINE_NUMBER notes, until we hit a LABEL\n+     in case FINISH is NULL, otherwise until we run out of insns.  */\n \n   for (insn = avoided_insn; insn != NULL; insn = NEXT_INSN (insn))\n     {\n-      if (finish == NULL && GET_CODE (insn) == CODE_LABEL)\n+      if ((finish == NULL && GET_CODE (insn) == CODE_LABEL)\n+\t  || GET_CODE (insn) == BARRIER)\n \tbreak;\n \n       if (GET_CODE (insn) == NOTE\t\t/* A line number note?  */"}]}