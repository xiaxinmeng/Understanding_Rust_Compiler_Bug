{"sha": "ceea48fc64eb7d5fe8c2ecfd61f6cda7918e40c1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2VlYTQ4ZmM2NGViN2Q1ZmU4YzJlY2ZkNjFmNmNkYTc5MThlNDBjMQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2016-07-13T11:08:37Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-07-13T11:08:37Z"}, "message": "Add non-const overload of std::string::data()\n\nAlso fix confusion between pointer and _CharT*, so that allocators with\nfancy pointers work correctly.\n\n\t* include/bits/basic_string.h [_GLIBCXX_USE_CXX11_ABI] (_M_c_str):\n\tNew function.\n\t(_M_disjunct, basic_string(const basic_string&, size_t)): Use data()\n\tinstead of _M_data().\n\t(basic_string(const basic_string&, size_t, size_t, const _Alloc&)):\n\tLikewise.\n\t(append(const basic_string&)): Likewise.\n\t(append(const basic_string&, size_type, size_type)): Likewise.\n\t(assign(const basic_string&, size_type, size_type)): Likewise.\n\t(insert(size_type, const basic_string&)): Likewise.\n\t(insert(size_type, const basic_string&, size_type, size_type)):\n\tLikewise.\n\t(replace(size_type, size_type, const basic_string&, size_type,\n\tsize_type)): Likewise.\n\t(replace(__const_iterator, __const_iterator, const basic_string&)):\n\tLikewise.\n\t(c_str(), data()): Use c_str() instead of _M_data().\n\t(data()): Add non-const overload as per LWG 2391 and P0272R1.\n\t(compare(const basic_string&)): Use data() instead of _M_data().\n\t[!_GLIBCXX_USE_CXX11_ABI] (data()): Add non-const overload.\n\t* include/bits/basic_string.tcc [_GLIBCXX_USE_CXX11_ABI] (_M_mutate):\n\tPass raw pointers to _S_copy.\n\t(_M_erase, _M_replace_aux): Pass raw pointers to _S_move and\n\t_S_assign.\n\t(find(const _CharT*, size_type, size_type)): Use data instead of\n\t_M_data().\n\t* testsuite/21_strings/basic_string/allocator/char/ext_ptr.cc: New.\n\t* testsuite/21_strings/basic_string/operations/data/char/2.cc: New.\n\t* testsuite/21_strings/basic_string/operations/data/wchar_t/2.cc: New.\n\nFrom-SVN: r238291", "tree": {"sha": "13cd8c4c8df5f3c9af5fdd00260d2e74accbc60d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/13cd8c4c8df5f3c9af5fdd00260d2e74accbc60d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ceea48fc64eb7d5fe8c2ecfd61f6cda7918e40c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ceea48fc64eb7d5fe8c2ecfd61f6cda7918e40c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ceea48fc64eb7d5fe8c2ecfd61f6cda7918e40c1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ceea48fc64eb7d5fe8c2ecfd61f6cda7918e40c1/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7ed8938d6a62e532c89c25f54851b8c4fef1d88", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7ed8938d6a62e532c89c25f54851b8c4fef1d88", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7ed8938d6a62e532c89c25f54851b8c4fef1d88"}], "stats": {"total": 239, "additions": 214, "deletions": 25}, "files": [{"sha": "17e612b265904f342c8b3f302b86bc50b70be0e5", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceea48fc64eb7d5fe8c2ecfd61f6cda7918e40c1/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceea48fc64eb7d5fe8c2ecfd61f6cda7918e40c1/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ceea48fc64eb7d5fe8c2ecfd61f6cda7918e40c1", "patch": "@@ -1,3 +1,35 @@\n+2016-07-13  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/basic_string.h [_GLIBCXX_USE_CXX11_ABI] (_M_c_str):\n+\tNew function.\n+\t(_M_disjunct, basic_string(const basic_string&, size_t)): Use data()\n+\tinstead of _M_data().\n+\t(basic_string(const basic_string&, size_t, size_t, const _Alloc&)):\n+\tLikewise.\n+\t(append(const basic_string&)): Likewise.\n+\t(append(const basic_string&, size_type, size_type)): Likewise.\n+\t(assign(const basic_string&, size_type, size_type)): Likewise.\n+\t(insert(size_type, const basic_string&)): Likewise.\n+\t(insert(size_type, const basic_string&, size_type, size_type)):\n+\tLikewise.\n+\t(replace(size_type, size_type, const basic_string&, size_type,\n+\tsize_type)): Likewise.\n+\t(replace(__const_iterator, __const_iterator, const basic_string&)):\n+\tLikewise.\n+\t(c_str(), data()): Use c_str() instead of _M_data().\n+\t(data()): Add non-const overload as per LWG 2391 and P0272R1.\n+\t(compare(const basic_string&)): Use data() instead of _M_data().\n+\t[!_GLIBCXX_USE_CXX11_ABI] (data()): Add non-const overload.\n+\t* include/bits/basic_string.tcc [_GLIBCXX_USE_CXX11_ABI] (_M_mutate):\n+\tPass raw pointers to _S_copy.\n+\t(_M_erase, _M_replace_aux): Pass raw pointers to _S_move and\n+\t_S_assign.\n+\t(find(const _CharT*, size_type, size_type)): Use data instead of\n+\t_M_data().\n+\t* testsuite/21_strings/basic_string/allocator/char/ext_ptr.cc: New.\n+\t* testsuite/21_strings/basic_string/operations/data/char/2.cc: New.\n+\t* testsuite/21_strings/basic_string/operations/data/wchar_t/2.cc: New.\n+\n 2016-07-12  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* libsupc++/new: Remove nothrow sized deletes (LWG 2458)."}, {"sha": "f60d9e0b9678078100d06109f57ed9e07d025d06", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 40, "deletions": 17, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceea48fc64eb7d5fe8c2ecfd61f6cda7918e40c1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceea48fc64eb7d5fe8c2ecfd61f6cda7918e40c1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=ceea48fc64eb7d5fe8c2ecfd61f6cda7918e40c1", "patch": "@@ -155,6 +155,11 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n #endif\n       }\n \n+      // Get a raw pointer (rather than _Alloc::pointer).\n+      _CharT*\n+      _M_c_str() const\n+      { return std::__addressof(*_M_dataplus._M_p); }\n+\n       void\n       _M_capacity(size_type __capacity)\n       { _M_allocated_capacity = __capacity; }\n@@ -285,8 +290,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       bool\n       _M_disjunct(const _CharT* __s) const _GLIBCXX_NOEXCEPT\n       {\n-\treturn (less<const _CharT*>()(__s, _M_data())\n-\t\t|| less<const _CharT*>()(_M_data() + this->size(), __s));\n+\treturn (less<const _CharT*>()(__s, data())\n+\t\t|| less<const _CharT*>()(data() + this->size(), __s));\n       }\n \n       // When __n = 1 way faster than the general multichar\n@@ -411,7 +416,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \t\t   size_type __n = npos)\n       : _M_dataplus(_M_local_data())\n       {\n-\tconst _CharT* __start = __str._M_data()\n+\tconst _CharT* __start = __str.data()\n \t  + __str._M_check(__pos, \"basic_string::basic_string\");\n \t_M_construct(__start, __start + __str._M_limit(__pos, __n));\n       }\n@@ -427,8 +432,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \t\t   size_type __n, const _Alloc& __a)\n       : _M_dataplus(_M_local_data(), __a)\n       {\n-\tconst _CharT* __start\n-\t  = __str._M_data() + __str._M_check(__pos, \"string::string\");\n+\tconst _CharT* __start = __str.data()\n+\t  + __str._M_check(__pos, \"basic_string::basic_string\");\n \t_M_construct(__start, __start + __str._M_limit(__pos, __n));\n       }\n \n@@ -1066,7 +1071,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        */\n       basic_string&\n       append(const basic_string& __str)\n-      { return _M_append(__str._M_data(), __str.size()); }\n+      { return _M_append(__str.data(), __str.size()); }\n \n       /**\n        *  @brief  Append a substring.\n@@ -1083,7 +1088,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        */\n       basic_string&\n       append(const basic_string& __str, size_type __pos, size_type __n)\n-      { return _M_append(__str._M_data()\n+      { return _M_append(__str.data()\n \t\t\t + __str._M_check(__pos, \"basic_string::append\"),\n \t\t\t __str._M_limit(__pos, __n)); }\n \n@@ -1216,7 +1221,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        */\n       basic_string&\n       assign(const basic_string& __str, size_type __pos, size_type __n)\n-      { return _M_replace(size_type(0), this->size(), __str._M_data()\n+      { return _M_replace(size_type(0), this->size(), __str.data()\n \t\t\t  + __str._M_check(__pos, \"basic_string::assign\"),\n \t\t\t  __str._M_limit(__pos, __n)); }\n \n@@ -1413,7 +1418,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       basic_string&\n       insert(size_type __pos1, const basic_string& __str)\n       { return this->replace(__pos1, size_type(0),\n-\t\t\t     __str._M_data(), __str.size()); }\n+\t\t\t     __str.data(), __str.size()); }\n \n       /**\n        *  @brief  Insert a substring.\n@@ -1436,7 +1441,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       basic_string&\n       insert(size_type __pos1, const basic_string& __str,\n \t     size_type __pos2, size_type __n)\n-      { return this->replace(__pos1, size_type(0), __str._M_data()\n+      { return this->replace(__pos1, size_type(0), __str.data()\n \t\t\t     + __str._M_check(__pos2, \"basic_string::insert\"),\n \t\t\t     __str._M_limit(__pos2, __n)); }\n \n@@ -1619,7 +1624,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       */\n       basic_string&\n       replace(size_type __pos, size_type __n, const basic_string& __str)\n-      { return this->replace(__pos, __n, __str._M_data(), __str.size()); }\n+      { return this->replace(__pos, __n, __str.data(), __str.size()); }\n \n       /**\n        *  @brief  Replace characters with value from another string.\n@@ -1642,7 +1647,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       basic_string&\n       replace(size_type __pos1, size_type __n1, const basic_string& __str,\n \t      size_type __pos2, size_type __n2)\n-      { return this->replace(__pos1, __n1, __str._M_data()\n+      { return this->replace(__pos1, __n1, __str.data()\n \t\t\t     + __str._M_check(__pos2, \"basic_string::replace\"),\n \t\t\t     __str._M_limit(__pos2, __n2)); }\n \n@@ -1734,7 +1739,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       basic_string&\n       replace(__const_iterator __i1, __const_iterator __i2,\n \t      const basic_string& __str)\n-      { return this->replace(__i1, __i2, __str._M_data(), __str.size()); }\n+      { return this->replace(__i1, __i2, __str.data(), __str.size()); }\n \n       /**\n        *  @brief  Replace range of characters with C substring.\n@@ -1975,17 +1980,29 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       */\n       const _CharT*\n       c_str() const _GLIBCXX_NOEXCEPT\n-      { return _M_data(); }\n+      { return _M_c_str(); }\n \n       /**\n        *  @brief  Return const pointer to contents.\n        *\n-       *  This is a handle to internal data.  Do not modify or dire things may\n+       *  This is a pointer to internal data.  Do not modify or dire things may\n        *  happen.\n       */\n       const _CharT*\n       data() const _GLIBCXX_NOEXCEPT\n-      { return _M_data(); }\n+      { return _M_c_str(); }\n+\n+#if __cplusplus > 201402L\n+      /**\n+       *  @brief  Return non-const pointer to contents.\n+       *\n+       *  This is a pointer to the character sequence held by the string.\n+       *  Modifying the characters in the sequence is allowed.\n+      */\n+      _CharT*\n+      data() noexcept\n+      { return _M_c_str(); }\n+#endif\n \n       /**\n        *  @brief  Return copy of allocator used to construct this string.\n@@ -2405,7 +2422,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \tconst size_type __osize = __str.size();\n \tconst size_type __len = std::min(__size, __osize);\n \n-\tint __r = traits_type::compare(_M_data(), __str.data(), __len);\n+\tint __r = traits_type::compare(data(), __str.data(), __len);\n \tif (!__r)\n \t  __r = _S_compare(__size, __osize);\n \treturn __r;\n@@ -4361,6 +4378,12 @@ _GLIBCXX_END_NAMESPACE_CXX11\n       data() const _GLIBCXX_NOEXCEPT\n       { return _M_data(); }\n \n+#if __cplusplus > 201402L\n+      _CharT*\n+      data() noexcept\n+      { return _M_data(); }\n+#endif\n+\n       /**\n        *  @brief  Return copy of allocator used to construct this string.\n       */"}, {"sha": "1e6d38eb0f3bdcb5bce298dd83f962fa88c9d604", "filename": "libstdc++-v3/include/bits/basic_string.tcc", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceea48fc64eb7d5fe8c2ecfd61f6cda7918e40c1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceea48fc64eb7d5fe8c2ecfd61f6cda7918e40c1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc?ref=ceea48fc64eb7d5fe8c2ecfd61f6cda7918e40c1", "patch": "@@ -315,14 +315,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       size_type __new_capacity = length() + __len2 - __len1;\n       pointer __r = _M_create(__new_capacity, capacity());\n+      _CharT* __p = std::__addressof(*__r);\n \n       if (__pos)\n-\tthis->_S_copy(__r, _M_data(), __pos);\n+\tthis->_S_copy(__p, _M_c_str(), __pos);\n       if (__s && __len2)\n-\tthis->_S_copy(__r + __pos, __s, __len2);\n+\tthis->_S_copy(__p + __pos, __s, __len2);\n       if (__how_much)\n-\tthis->_S_copy(__r + __pos + __len2,\n-\t\t      _M_data() + __pos + __len1, __how_much);\n+\tthis->_S_copy(__p + __pos + __len2,\n+\t\t      _M_c_str() + __pos + __len1, __how_much);\n \n       _M_dispose();\n       _M_data(__r);\n@@ -336,8 +337,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       const size_type __how_much = length() - __pos - __n;\n \n+      _CharT* __p = _M_c_str();\n       if (__how_much && __n)\n-\tthis->_S_move(_M_data() + __pos, _M_data() + __pos + __n, __how_much);\n+\tthis->_S_move(__p + __pos, __p + __pos + __n, __how_much);\n \n       _M_set_length(length() - __n);\n     }\n@@ -400,7 +402,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       if (__new_size <= this->capacity())\n \t{\n-\t  pointer __p = this->_M_data() + __pos1;\n+\t  _CharT* __p = this->_M_c_str() + __pos1;\n \n \t  const size_type __how_much = __old_size - __pos1 - __n1;\n \t  if (__how_much && __n1 != __n2)\n@@ -410,7 +412,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tthis->_M_mutate(__pos1, __n1, 0, __n2);\n \n       if (__n2)\n-\tthis->_S_assign(this->_M_data() + __pos1, __n2, __c);\n+\tthis->_S_assign(this->_M_c_str() + __pos1, __n2, __c);\n \n       this->_M_set_length(__new_size);\n       return *this;\n@@ -1179,7 +1181,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       __glibcxx_requires_string_len(__s, __n);\n       const size_type __size = this->size();\n-      const _CharT* __data = _M_data();\n+      const _CharT* __data = data();\n \n       if (__n == 0)\n \treturn __pos <= __size ? __pos : npos;"}, {"sha": "0cc8e17dbb9b351a26e9b869bf4102d90ca1a4a5", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/allocator/char/ext_ptr.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceea48fc64eb7d5fe8c2ecfd61f6cda7918e40c1/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fchar%2Fext_ptr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceea48fc64eb7d5fe8c2ecfd61f6cda7918e40c1/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fchar%2Fext_ptr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fchar%2Fext_ptr.cc?ref=ceea48fc64eb7d5fe8c2ecfd61f6cda7918e40c1", "patch": "@@ -0,0 +1,52 @@\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++11\" }\n+\n+#include <string>\n+#include <memory>\n+#include <testsuite_hooks.h>\n+#include <testsuite_allocator.h>\n+\n+using C = char;\n+const C c = 'a';\n+using traits = std::char_traits<C>;\n+\n+// basic_string is not required to support fancy pointers:\n+// http://cplusplus.github.io/LWG/lwg-closed.html#2084\n+\n+using __gnu_test::CustomPointerAlloc;\n+\n+void test01()\n+{\n+#if _GLIBCXX_USE_CXX11_ABI\n+  bool test __attribute__((unused)) = true;\n+  typedef CustomPointerAlloc<C> alloc_type;\n+  typedef std::basic_string<C, traits, alloc_type> test_type;\n+  test_type v;\n+  v.assign(1, c);\n+  VERIFY( ++v.begin() == v.end() );\n+\n+  v.assign(100, c);\n+  VERIFY( (v.begin() + 100) == v.end() );\n+#endif\n+}\n+\n+int main()\n+{\n+  test01();\n+}"}, {"sha": "046780df4103da292111a612ae061a9eeaf0c3e4", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/operations/data/char/2.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceea48fc64eb7d5fe8c2ecfd61f6cda7918e40c1/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Fdata%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceea48fc64eb7d5fe8c2ecfd61f6cda7918e40c1/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Fdata%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Fdata%2Fchar%2F2.cc?ref=ceea48fc64eb7d5fe8c2ecfd61f6cda7918e40c1", "patch": "@@ -0,0 +1,40 @@\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17\" }\n+\n+// 21.3.1.7 [string.ops] string operations\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  std::string s;\n+  char* p = s.data();\n+  VERIFY( *p == '\\0' );\n+  s = \"a string that is longer than a short string\";\n+  p = s.data();\n+  VERIFY( p == &s.front() );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}, {"sha": "d4a3206d3b23d23007225bbd240f3b9439a55b0d", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/operations/data/wchar_t/2.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceea48fc64eb7d5fe8c2ecfd61f6cda7918e40c1/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Fdata%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceea48fc64eb7d5fe8c2ecfd61f6cda7918e40c1/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Fdata%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Fdata%2Fwchar_t%2F2.cc?ref=ceea48fc64eb7d5fe8c2ecfd61f6cda7918e40c1", "patch": "@@ -0,0 +1,40 @@\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17\" }\n+\n+// 21.3.1.7 [string.ops] string operations\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  std::wstring s;\n+  wchar_t* p = s.data();\n+  VERIFY( *p == L'\\0' );\n+  s = L\"a string that is longer than a short string\";\n+  p = s.data();\n+  VERIFY( p == &s.front() );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}]}