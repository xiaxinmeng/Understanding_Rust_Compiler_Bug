{"sha": "ceb7eb8f8c513d895c3520637274f21b791dbf06", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2ViN2ViOGY4YzUxM2Q4OTVjMzUyMDYzNzI3NGYyMWI3OTFkYmYwNg==", "commit": {"author": {"name": "Diego Novillo", "email": "dnovillo@redhat.com", "date": "2004-11-23T23:38:12Z"}, "committer": {"name": "Diego Novillo", "email": "dnovillo@gcc.gnu.org", "date": "2004-11-23T23:38:12Z"}, "message": "tree-into-ssa.c (DEF_VEC_MALLOC_P(basic_block)): Declare.\n\n\n\t* tree-into-ssa.c (DEF_VEC_MALLOC_P(basic_block)): Declare.\n\t(insert_phi_nodes_for): Change third argument to VEC(basic_block).\n\t* tree-ssa-dom.c (avail_exprs_stack): Change type to VEC(tree_on_heap).\n\tUpdate all users.\n\t(stmts_to_rescan): Likewise.\n\t(const_and_copies_stack): Likewise.\n\t(nonzero_vars_stack): Likewise.\n\t(vrp_variables_stack): Likewise.\n\nFrom-SVN: r91122", "tree": {"sha": "51f2ca2fdcb72af01011b01dd31247e044e32f9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/51f2ca2fdcb72af01011b01dd31247e044e32f9a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ceb7eb8f8c513d895c3520637274f21b791dbf06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ceb7eb8f8c513d895c3520637274f21b791dbf06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ceb7eb8f8c513d895c3520637274f21b791dbf06", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ceb7eb8f8c513d895c3520637274f21b791dbf06/comments", "author": null, "committer": null, "parents": [{"sha": "794693c02da2eeb1764eeebe53ad69330ac3478c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/794693c02da2eeb1764eeebe53ad69330ac3478c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/794693c02da2eeb1764eeebe53ad69330ac3478c"}], "stats": {"total": 151, "additions": 78, "deletions": 73}, "files": [{"sha": "95dcb34366f7c8830e7fcc9323ecf8a9b995da1e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceb7eb8f8c513d895c3520637274f21b791dbf06/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceb7eb8f8c513d895c3520637274f21b791dbf06/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ceb7eb8f8c513d895c3520637274f21b791dbf06", "patch": "@@ -1,3 +1,14 @@\n+2004-11-23  Diego Novillo  <dnovillo@redhat.com>\n+\n+\t* tree-into-ssa.c (DEF_VEC_MALLOC_P(basic_block)): Declare.\n+\t(insert_phi_nodes_for): Change third argument to VEC(basic_block).\n+\t* tree-ssa-dom.c (avail_exprs_stack): Change type to VEC(tree_on_heap).\n+\tUpdate all users.\n+\t(stmts_to_rescan): Likewise.\n+\t(const_and_copies_stack): Likewise.\n+\t(nonzero_vars_stack): Likewise.\n+\t(vrp_variables_stack): Likewise.\n+\n 2004-11-23  Richard Henderson  <rth@redhat.com>\n \n \t* cse.c (record_jump_cond_subreg): New."}, {"sha": "197118518329e50bbb4cdaac85522f6e9ba87745", "filename": "gcc/tree-into-ssa.c", "status": "modified", "additions": 20, "deletions": 21, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceb7eb8f8c513d895c3520637274f21b791dbf06/gcc%2Ftree-into-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceb7eb8f8c513d895c3520637274f21b791dbf06/gcc%2Ftree-into-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-into-ssa.c?ref=ceb7eb8f8c513d895c3520637274f21b791dbf06", "patch": "@@ -86,7 +86,7 @@ static htab_t def_blocks;\n /* Stack of trees used to restore the global currdefs to its original\n    state after completing rewriting of a block and its dominator children.\n \n-   This varray is used in two contexts.  The first is rewriting of _DECL\n+   This vector is used in two contexts.  The first is rewriting of _DECL\n    nodes into SSA_NAMEs.  In that context it's elements have the\n    following properties:\n \n@@ -100,7 +100,7 @@ static htab_t def_blocks;\n      current block. \n \n \n-   This varray is also used when rewriting an SSA_NAME which has multiple\n+   This vector is also used when rewriting an SSA_NAME which has multiple\n    definition sites into multiple SSA_NAMEs.  In that context entries come\n    in pairs.\n \n@@ -111,7 +111,8 @@ static htab_t def_blocks;\n      with the current block.  */\n static VEC(tree_on_heap) *block_defs_stack;\n \n-/* FIXME: The other stacks should also be VEC(tree_on_heap).  */\n+/* Basic block vectors used in this file ought to be allocated in the heap.  */\n+DEF_VEC_MALLOC_P(basic_block);\n \n /* Global data to attach to the main dominator walk structure.  */\n struct mark_def_sites_global_data\n@@ -155,7 +156,7 @@ static void insert_phi_nodes (bitmap *, bitmap);\n static void rewrite_stmt (struct dom_walk_data *, basic_block,\n \t\t\t  block_stmt_iterator);\n static inline void rewrite_operand (use_operand_p);\n-static void insert_phi_nodes_for (tree, bitmap *, varray_type *);\n+static void insert_phi_nodes_for (tree, bitmap *, VEC(basic_block) *);\n static tree get_reaching_def (tree);\n static hashval_t def_blocks_hash (const void *);\n static int def_blocks_eq (const void *, const void *);\n@@ -584,11 +585,11 @@ prepare_def_operand_for_rename (tree def, size_t *uid_p)\n \n /* Helper for insert_phi_nodes.  If VAR needs PHI nodes, insert them\n    at the dominance frontier (DFS) of blocks defining VAR.\n-   WORK_STACK is the varray used to implement the worklist of basic\n+   WORK_STACK is the vector used to implement the worklist of basic\n    blocks.  */\n \n static inline\n-void insert_phi_nodes_1 (tree var, bitmap *dfs, varray_type *work_stack)\n+void insert_phi_nodes_1 (tree var, bitmap *dfs, VEC(basic_block) *work_stack)\n {\n   if (get_phi_state (var) != NEED_PHI_STATE_NO)\n     insert_phi_nodes_for (var, dfs, work_stack);\n@@ -606,14 +607,14 @@ static void\n insert_phi_nodes (bitmap *dfs, bitmap names_to_rename)\n {\n   unsigned i;\n-  varray_type work_stack;\n+  VEC(basic_block) *work_stack;\n   bitmap_iterator bi;\n \n   timevar_push (TV_TREE_INSERT_PHI_NODES);\n \n-  /* Array WORK_STACK is a stack of CFG blocks.  Each block that contains\n+  /* Vector WORK_STACK is a stack of CFG blocks.  Each block that contains\n      an assignment or PHI node will be pushed to this stack.  */\n-  VARRAY_GENERIC_PTR_NOGC_INIT (work_stack, last_basic_block, \"work_stack\");\n+  work_stack = VEC_alloc (basic_block, last_basic_block);\n \n   /* Iterate over all variables in VARS_TO_RENAME.  For each variable, add\n      to the work list all the blocks that have a definition for the\n@@ -624,19 +625,19 @@ insert_phi_nodes (bitmap *dfs, bitmap names_to_rename)\n       EXECUTE_IF_SET_IN_BITMAP (names_to_rename, 0, i, bi)\n \t{\n \t  if (ssa_name (i))\n-\t    insert_phi_nodes_1 (ssa_name (i), dfs, &work_stack);\n+\t    insert_phi_nodes_1 (ssa_name (i), dfs, work_stack);\n \t}\n     }\n   else if (vars_to_rename)\n     EXECUTE_IF_SET_IN_BITMAP (vars_to_rename, 0, i, bi)\n       {\n-\tinsert_phi_nodes_1 (referenced_var (i), dfs, &work_stack);\n+\tinsert_phi_nodes_1 (referenced_var (i), dfs, work_stack);\n       }\n   else\n     for (i = 0; i < num_referenced_vars; i++)\n-      insert_phi_nodes_1 (referenced_var (i), dfs, &work_stack);\n+      insert_phi_nodes_1 (referenced_var (i), dfs, work_stack);\n \n-  VARRAY_FREE (work_stack);\n+  VEC_free (basic_block, work_stack);\n \n   timevar_pop (TV_TREE_INSERT_PHI_NODES);\n }\n@@ -994,11 +995,11 @@ htab_statistics (FILE *file, htab_t htab)\n \n \n /* Insert PHI nodes for variable VAR using the dominance frontier\n-   information given in DFS.  WORK_STACK is the varray used to\n+   information given in DFS.  WORK_STACK is the vector used to\n    implement the worklist of basic blocks.  */\n \n static void\n-insert_phi_nodes_for (tree var, bitmap *dfs, varray_type *work_stack)\n+insert_phi_nodes_for (tree var, bitmap *dfs, VEC(basic_block) *work_stack)\n {\n   struct def_blocks_d *def_map;\n   bitmap phi_insertion_points;\n@@ -1016,7 +1017,7 @@ insert_phi_nodes_for (tree var, bitmap *dfs, varray_type *work_stack)\n \n   EXECUTE_IF_SET_IN_BITMAP (def_map->def_blocks, 0, bb_index, bi)\n     {\n-      VARRAY_PUSH_GENERIC_PTR_NOGC (*work_stack, BASIC_BLOCK (bb_index));\n+      VEC_quick_push (basic_block, work_stack, BASIC_BLOCK (bb_index));\n     }\n \n   /* Pop a block off the worklist, add every block that appears in\n@@ -1031,23 +1032,21 @@ insert_phi_nodes_for (tree var, bitmap *dfs, varray_type *work_stack)\n      determine if fully pruned or semi pruned SSA form was appropriate.\n \n      We now always use fully pruned SSA form.  */\n-  while (VARRAY_ACTIVE_SIZE (*work_stack) > 0)\n+  while (VEC_length (basic_block, work_stack) > 0)\n     {\n       unsigned dfs_index;\n       bitmap_iterator bi;\n \n-      bb = VARRAY_TOP_GENERIC_PTR_NOGC (*work_stack);\n+      bb = VEC_pop (basic_block, work_stack);\n       bb_index = bb->index;\n-\n-      VARRAY_POP (*work_stack);\n       \n       EXECUTE_IF_AND_COMPL_IN_BITMAP (dfs[bb_index],\n \t\t\t\t      phi_insertion_points,\n \t\t\t\t      0, dfs_index, bi)\n \t{\n \t  basic_block bb = BASIC_BLOCK (dfs_index);\n \n-\t  VARRAY_PUSH_GENERIC_PTR_NOGC (*work_stack, bb);\n+\t  VEC_quick_push (basic_block, work_stack, bb);\n \t  bitmap_set_bit (phi_insertion_points, dfs_index);\n \t}\n     }"}, {"sha": "d88d683154edcb4b29ba54e19a67a5ba32ed8048", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 47, "deletions": 52, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceb7eb8f8c513d895c3520637274f21b791dbf06/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceb7eb8f8c513d895c3520637274f21b791dbf06/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=ceb7eb8f8c513d895c3520637274f21b791dbf06", "patch": "@@ -93,7 +93,7 @@ static htab_t avail_exprs;\n    (null).  When we finish processing the block, we pop off entries and\n    remove the expressions from the global hash table until we hit the\n    marker.  */\n-static varray_type avail_exprs_stack;\n+static VEC(tree_on_heap) *avail_exprs_stack;\n \n /* Stack of trees used to restore the global currdefs to its original\n    state after completing optimization of a block and its dominator children.\n@@ -106,9 +106,7 @@ static varray_type avail_exprs_stack;\n \n    A NULL node is used to mark the last node associated with the\n    current block.  */\n-VEC(tree_on_heap) *block_defs_stack;\n-\n-/* FIXME: The other stacks should also be VEC(tree_on_heap).  */\n+static VEC(tree_on_heap) *block_defs_stack;\n \n /* Stack of statements we need to rescan during finalization for newly\n    exposed variables.\n@@ -117,7 +115,7 @@ VEC(tree_on_heap) *block_defs_stack;\n    expressions are removed from AVAIL_EXPRS.  Else we may change the\n    hash code for an expression and be unable to find/remove it from\n    AVAIL_EXPRS.  */\n-varray_type stmts_to_rescan;\n+static VEC(tree_on_heap) *stmts_to_rescan;\n \n /* Structure for entries in the expression hash table.\n \n@@ -149,7 +147,7 @@ struct expr_hash_elt\n \n    A NULL entry is used to mark the end of pairs which need to be\n    restored during finalization of this block.  */\n-static varray_type const_and_copies_stack;\n+static VEC(tree_on_heap) *const_and_copies_stack;\n \n /* Bitmap of SSA_NAMEs known to have a nonzero value, even if we do not\n    know their exact value.  */\n@@ -160,7 +158,7 @@ static bitmap nonzero_vars;\n \n    A NULL entry is used to mark the end of names needing their \n    entry in NONZERO_VARS cleared during finalization of this block.  */\n-static varray_type nonzero_vars_stack;\n+static VEC(tree_on_heap) *nonzero_vars_stack;\n \n /* Track whether or not we have changed the control flow graph.  */\n static bool cfg_altered;\n@@ -238,7 +236,6 @@ static htab_t vrp_data;\n \n /* An entry in the VRP_DATA hash table.  We record the variable and a\n    varray of VRP_ELEMENT records associated with that variable.  */\n-\n struct vrp_hash_elt\n {\n   tree var;\n@@ -254,7 +251,7 @@ struct vrp_hash_elt\n    list to determine which variables need their VRP data updated.\n \n    A NULL entry marks the end of the SSA_NAMEs associated with this block.  */\n-static varray_type vrp_variables_stack;\n+static VEC(tree_on_heap) *vrp_variables_stack;\n \n struct eq_expr_value\n {\n@@ -385,12 +382,12 @@ tree_ssa_dominator_optimize (void)\n   /* Create our hash tables.  */\n   avail_exprs = htab_create (1024, real_avail_expr_hash, avail_expr_eq, free);\n   vrp_data = htab_create (ceil_log2 (num_ssa_names), vrp_hash, vrp_eq, free);\n-  VARRAY_TREE_INIT (avail_exprs_stack, 20, \"Available expression stack\");\n+  avail_exprs_stack = VEC_alloc (tree_on_heap, 20);\n   block_defs_stack = VEC_alloc (tree_on_heap, 20);\n-  VARRAY_TREE_INIT (const_and_copies_stack, 20, \"Block const_and_copies stack\");\n-  VARRAY_TREE_INIT (nonzero_vars_stack, 20, \"Block nonzero_vars stack\");\n-  VARRAY_TREE_INIT (vrp_variables_stack, 20, \"Block vrp_variables stack\");\n-  VARRAY_TREE_INIT (stmts_to_rescan, 20, \"Statements to rescan\");\n+  const_and_copies_stack = VEC_alloc (tree_on_heap, 20);\n+  nonzero_vars_stack = VEC_alloc (tree_on_heap, 20);\n+  vrp_variables_stack = VEC_alloc (tree_on_heap, 20);\n+  stmts_to_rescan = VEC_alloc (tree_on_heap, 20);\n   nonzero_vars = BITMAP_XMALLOC ();\n   need_eh_cleanup = BITMAP_XMALLOC ();\n \n@@ -506,7 +503,11 @@ tree_ssa_dominator_optimize (void)\n     }\n   \n   VEC_free (tree_on_heap, block_defs_stack);\n-  block_defs_stack = NULL;\n+  VEC_free (tree_on_heap, avail_exprs_stack);\n+  VEC_free (tree_on_heap, const_and_copies_stack);\n+  VEC_free (tree_on_heap, nonzero_vars_stack);\n+  VEC_free (tree_on_heap, vrp_variables_stack);\n+  VEC_free (tree_on_heap, stmts_to_rescan);\n }\n \n static bool\n@@ -808,11 +809,11 @@ dom_opt_initialize_block (struct dom_walk_data *walk_data ATTRIBUTE_UNUSED,\n \n   /* Push a marker on the stacks of local information so that we know how\n      far to unwind when we finalize this block.  */\n-  VARRAY_PUSH_TREE (avail_exprs_stack, NULL_TREE);\n+  VEC_safe_push (tree_on_heap, avail_exprs_stack, NULL_TREE);\n   VEC_safe_push (tree_on_heap, block_defs_stack, NULL_TREE);\n-  VARRAY_PUSH_TREE (const_and_copies_stack, NULL_TREE);\n-  VARRAY_PUSH_TREE (nonzero_vars_stack, NULL_TREE);\n-  VARRAY_PUSH_TREE (vrp_variables_stack, NULL_TREE);\n+  VEC_safe_push (tree_on_heap, const_and_copies_stack, NULL_TREE);\n+  VEC_safe_push (tree_on_heap, nonzero_vars_stack, NULL_TREE);\n+  VEC_safe_push (tree_on_heap, vrp_variables_stack, NULL_TREE);\n \n   record_equivalences_from_incoming_edge (bb);\n \n@@ -868,11 +869,10 @@ static void\n remove_local_expressions_from_table (void)\n {\n   /* Remove all the expressions made available in this block.  */\n-  while (VARRAY_ACTIVE_SIZE (avail_exprs_stack) > 0)\n+  while (VEC_length (tree_on_heap, avail_exprs_stack) > 0)\n     {\n       struct expr_hash_elt element;\n-      tree expr = VARRAY_TOP_TREE (avail_exprs_stack);\n-      VARRAY_POP (avail_exprs_stack);\n+      tree expr = VEC_pop (tree_on_heap, avail_exprs_stack);\n \n       if (expr == NULL_TREE)\n \tbreak;\n@@ -888,10 +888,9 @@ remove_local_expressions_from_table (void)\n static void\n restore_nonzero_vars_to_original_value (void)\n {\n-  while (VARRAY_ACTIVE_SIZE (nonzero_vars_stack) > 0)\n+  while (VEC_length (tree_on_heap, nonzero_vars_stack) > 0)\n     {\n-      tree name = VARRAY_TOP_TREE (nonzero_vars_stack);\n-      VARRAY_POP (nonzero_vars_stack);\n+      tree name = VEC_pop (tree_on_heap, nonzero_vars_stack);\n \n       if (name == NULL)\n \tbreak;\n@@ -907,19 +906,16 @@ restore_nonzero_vars_to_original_value (void)\n static void\n restore_vars_to_original_value (void)\n {\n-  while (VARRAY_ACTIVE_SIZE (const_and_copies_stack) > 0)\n+  while (VEC_length (tree_on_heap, const_and_copies_stack) > 0)\n     {\n       tree prev_value, dest;\n \n-      dest = VARRAY_TOP_TREE (const_and_copies_stack);\n-      VARRAY_POP (const_and_copies_stack);\n+      dest = VEC_pop (tree_on_heap, const_and_copies_stack);\n \n       if (dest == NULL)\n \tbreak;\n \n-      prev_value = VARRAY_TOP_TREE (const_and_copies_stack);\n-      VARRAY_POP (const_and_copies_stack);\n-\n+      prev_value = VEC_pop (tree_on_heap, const_and_copies_stack);\n       SSA_NAME_VALUE (dest) =  prev_value;\n     }\n }\n@@ -1001,9 +997,9 @@ dom_opt_finalize_block (struct dom_walk_data *walk_data, basic_block bb)\n \t  /* Push a marker onto the available expression stack so that we\n \t     unwind any expressions related to the TRUE arm before processing\n \t     the false arm below.  */\n-\t  VARRAY_PUSH_TREE (avail_exprs_stack, NULL_TREE);\n+\t  VEC_safe_push (tree_on_heap, avail_exprs_stack, NULL_TREE);\n \t  VEC_safe_push (tree_on_heap, block_defs_stack, NULL_TREE);\n-\t  VARRAY_PUSH_TREE (const_and_copies_stack, NULL_TREE);\n+\t  VEC_safe_push (tree_on_heap, const_and_copies_stack, NULL_TREE);\n \n \t  edge_info = true_edge->aux;\n \n@@ -1105,9 +1101,9 @@ dom_opt_finalize_block (struct dom_walk_data *walk_data, basic_block bb)\n      To be efficient, we note which variables have had their values\n      constrained in this block.  So walk over each variable in the\n      VRP_VARIABLEs array.  */\n-  while (VARRAY_ACTIVE_SIZE (vrp_variables_stack) > 0)\n+  while (VEC_length (tree_on_heap, vrp_variables_stack) > 0)\n     {\n-      tree var = VARRAY_TOP_TREE (vrp_variables_stack);\n+      tree var = VEC_pop (tree_on_heap, vrp_variables_stack);\n       struct vrp_hash_elt vrp_hash_elt, *vrp_hash_elt_p;\n       void **slot;\n \n@@ -1118,8 +1114,6 @@ dom_opt_finalize_block (struct dom_walk_data *walk_data, basic_block bb)\n \t we are done.  */\n       varray_type var_vrp_records;\n \n-      VARRAY_POP (vrp_variables_stack);\n-\n       if (var == NULL)\n \tbreak;\n \n@@ -1145,15 +1139,15 @@ dom_opt_finalize_block (struct dom_walk_data *walk_data, basic_block bb)\n \n   /* If we queued any statements to rescan in this block, then\n      go ahead and rescan them now.  */\n-  while (VARRAY_ACTIVE_SIZE (stmts_to_rescan) > 0)\n+  while (VEC_length (tree_on_heap, stmts_to_rescan) > 0)\n     {\n-      tree stmt = VARRAY_TOP_TREE (stmts_to_rescan);\n+      tree stmt = VEC_last (tree_on_heap, stmts_to_rescan);\n       basic_block stmt_bb = bb_for_stmt (stmt);\n \n       if (stmt_bb != bb)\n \tbreak;\n \n-      VARRAY_POP (stmts_to_rescan);\n+      VEC_pop (tree_on_heap, stmts_to_rescan);\n       mark_new_vars_to_rename (stmt, vars_to_rename);\n     }\n }\n@@ -1388,7 +1382,7 @@ record_var_is_nonzero (tree var)\n \n   /* Record this SSA_NAME so that we can reset the global table\n      when we leave this block.  */\n-  VARRAY_PUSH_TREE (nonzero_vars_stack, var);\n+  VEC_safe_push (tree_on_heap, nonzero_vars_stack, var);\n }\n \n /* Enter a statement into the true/false expression hash table indicating\n@@ -1407,7 +1401,7 @@ record_cond (tree cond, tree value)\n   if (*slot == NULL)\n     {\n       *slot = (void *) element;\n-      VARRAY_PUSH_TREE (avail_exprs_stack, cond);\n+      VEC_safe_push (tree_on_heap, avail_exprs_stack, cond);\n     }\n   else\n     free (element);\n@@ -1546,8 +1540,8 @@ record_const_or_copy_1 (tree x, tree y, tree prev_x)\n {\n   SSA_NAME_VALUE (x) = y;\n \n-  VARRAY_PUSH_TREE (const_and_copies_stack, prev_x);\n-  VARRAY_PUSH_TREE (const_and_copies_stack, x);\n+  VEC_safe_push (tree_on_heap, const_and_copies_stack, prev_x);\n+  VEC_safe_push (tree_on_heap, const_and_copies_stack, x);\n }\n \n \n@@ -1580,7 +1574,7 @@ loop_depth_of_name (tree x)\n \n \n /* Record that X is equal to Y in const_and_copies.  Record undo\n-   information in the block-local varray.  */\n+   information in the block-local vector.  */\n \n static void\n record_const_or_copy (tree x, tree y)\n@@ -3059,7 +3053,7 @@ optimize_stmt (struct dom_walk_data *walk_data, basic_block bb,\n     }\n \n   if (may_have_exposed_new_symbols)\n-    VARRAY_PUSH_TREE (stmts_to_rescan, bsi_stmt (si));\n+    VEC_safe_push (tree_on_heap, stmts_to_rescan, bsi_stmt (si));\n }\n \n /* Replace the RHS of STMT with NEW_RHS.  If RHS can be found in the\n@@ -3094,24 +3088,24 @@ update_rhs_and_lookup_avail_expr (tree stmt, tree new_rhs, bool insert)\n \n      We know the call in optimize_stmt did not find an existing entry\n      in the hash table, so a new entry was created.  At the same time\n-     this statement was pushed onto the BLOCK_AVAIL_EXPRS varray. \n+     this statement was pushed onto the AVAIL_EXPRS_STACK vector. \n \n      If this call failed to find an existing entry on the hash table,\n      then the new version of this statement was entered into the\n      hash table.  And this statement was pushed onto BLOCK_AVAIL_EXPR\n      for the second time.  So there are two copies on BLOCK_AVAIL_EXPRs\n \n      If this call succeeded, we still have one copy of this statement\n-     on the BLOCK_AVAIL_EXPRs varray.\n+     on the BLOCK_AVAIL_EXPRs vector.\n \n      For both cases, we need to pop the most recent entry off the\n-     BLOCK_AVAIL_EXPRs varray.  For the case where we never found this\n+     BLOCK_AVAIL_EXPRs vector.  For the case where we never found this\n      statement in the hash tables, that will leave precisely one\n      copy of this statement on BLOCK_AVAIL_EXPRs.  For the case where\n      we found a copy of this statement in the second hash table lookup\n      we want _no_ copies of this statement in BLOCK_AVAIL_EXPRs.  */\n   if (insert)\n-    VARRAY_POP (avail_exprs_stack);\n+    VEC_pop (tree_on_heap, avail_exprs_stack);\n \n   /* And make sure we record the fact that we modified this\n      statement.  */\n@@ -3187,7 +3181,8 @@ lookup_avail_expr (tree stmt, bool insert)\n   if (*slot == NULL)\n     {\n       *slot = (void *) element;\n-      VARRAY_PUSH_TREE (avail_exprs_stack, stmt ? stmt : element->rhs);\n+      VEC_safe_push (tree_on_heap, avail_exprs_stack,\n+\t\t     stmt ? stmt : element->rhs);\n       return NULL_TREE;\n     }\n \n@@ -3319,7 +3314,7 @@ record_range (tree cond, basic_block bb)\n \tVARRAY_GENERIC_PTR_INIT (*vrp_records_p, 2, \"vrp records\");\n       \n       VARRAY_PUSH_GENERIC_PTR (*vrp_records_p, element);\n-      VARRAY_PUSH_TREE (vrp_variables_stack, TREE_OPERAND (cond, 0));\n+      VEC_safe_push (tree_on_heap, vrp_variables_stack, TREE_OPERAND (cond, 0));\n     }\n }\n "}]}