{"sha": "9316ad3b4354cbf2980f86902e54884e918c472a", "node_id": "C_kwDOANBUbNoAKDkzMTZhZDNiNDM1NGNiZjI5ODBmODY5MDJlNTQ4ODRlOTE4YzQ3MmE", "commit": {"author": {"name": "Julian Brown", "email": "julian@codesourcery.com", "date": "2022-12-06T12:18:33Z"}, "committer": {"name": "Julian Brown", "email": "julian@codesourcery.com", "date": "2022-12-14T14:11:45Z"}, "message": "OpenMP/Fortran: Combined directives with map/firstprivate of same symbol\n\nThis patch fixes a case where a combined directive (e.g. \"!$omp target\nparallel ...\") contains both a map and a firstprivate clause for the\nsame variable.  When the combined directive is split into two nested\ndirectives, the outer \"target\" gets the \"map\" clause, and the inner\n\"parallel\" gets the \"firstprivate\" clause, like so:\n\n  !$omp target parallel map(x) firstprivate(x)\n\n  -->\n\n  !$omp target map(x)\n    !$omp parallel firstprivate(x)\n      ...\n\nWhen there is no map of the same variable, the firstprivate is distributed\nto both directives, e.g. for 'y' in:\n\n  !$omp target parallel map(x) firstprivate(y)\n\n  -->\n\n  !$omp target map(x) firstprivate(y)\n    !$omp parallel firstprivate(y)\n      ...\n\nThis is not a recent regression, but appear to fix a long-standing ICE.\n(The included testcase is based on one by Tobias.)\n\n2022-12-06  Julian Brown  <julian@codesourcery.com>\n\ngcc/fortran/\n\t* trans-openmp.cc (gfc_add_firstprivate_if_unmapped): New function.\n\t(gfc_split_omp_clauses): Call above.\n\nlibgomp/\n\t* testsuite/libgomp.fortran/combined-directive-splitting-1.f90: New\n\ttest.", "tree": {"sha": "cb5a59f6ed70616e18e38d1036166ffa79b5283e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb5a59f6ed70616e18e38d1036166ffa79b5283e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9316ad3b4354cbf2980f86902e54884e918c472a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9316ad3b4354cbf2980f86902e54884e918c472a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9316ad3b4354cbf2980f86902e54884e918c472a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9316ad3b4354cbf2980f86902e54884e918c472a/comments", "author": {"login": "jtb20", "id": 6094880, "node_id": "MDQ6VXNlcjYwOTQ4ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/6094880?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jtb20", "html_url": "https://github.com/jtb20", "followers_url": "https://api.github.com/users/jtb20/followers", "following_url": "https://api.github.com/users/jtb20/following{/other_user}", "gists_url": "https://api.github.com/users/jtb20/gists{/gist_id}", "starred_url": "https://api.github.com/users/jtb20/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jtb20/subscriptions", "organizations_url": "https://api.github.com/users/jtb20/orgs", "repos_url": "https://api.github.com/users/jtb20/repos", "events_url": "https://api.github.com/users/jtb20/events{/privacy}", "received_events_url": "https://api.github.com/users/jtb20/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jtb20", "id": 6094880, "node_id": "MDQ6VXNlcjYwOTQ4ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/6094880?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jtb20", "html_url": "https://github.com/jtb20", "followers_url": "https://api.github.com/users/jtb20/followers", "following_url": "https://api.github.com/users/jtb20/following{/other_user}", "gists_url": "https://api.github.com/users/jtb20/gists{/gist_id}", "starred_url": "https://api.github.com/users/jtb20/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jtb20/subscriptions", "organizations_url": "https://api.github.com/users/jtb20/orgs", "repos_url": "https://api.github.com/users/jtb20/repos", "events_url": "https://api.github.com/users/jtb20/events{/privacy}", "received_events_url": "https://api.github.com/users/jtb20/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "881c6cabce5d0b27285ed41bd6dabdf48848cce7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/881c6cabce5d0b27285ed41bd6dabdf48848cce7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/881c6cabce5d0b27285ed41bd6dabdf48848cce7"}], "stats": {"total": 78, "additions": 76, "deletions": 2}, "files": [{"sha": "395bcc98e001a91fd96419278e947c7e3fa7b383", "filename": "gcc/fortran/trans-openmp.cc", "status": "modified", "additions": 35, "deletions": 2, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9316ad3b4354cbf2980f86902e54884e918c472a/gcc%2Ffortran%2Ftrans-openmp.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9316ad3b4354cbf2980f86902e54884e918c472a/gcc%2Ffortran%2Ftrans-openmp.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-openmp.cc?ref=9316ad3b4354cbf2980f86902e54884e918c472a", "patch": "@@ -5968,6 +5968,39 @@ gfc_add_clause_implicitly (gfc_omp_clauses *clauses_out,\n     }\n }\n \n+/* Kind of opposite to above, add firstprivate to CLAUSES_OUT if it is mapped\n+   in CLAUSES_IN's FIRSTPRIVATE list but not its MAP list.  */\n+\n+static void\n+gfc_add_firstprivate_if_unmapped (gfc_omp_clauses *clauses_out,\n+\t\t\t\t  gfc_omp_clauses *clauses_in)\n+{\n+  gfc_omp_namelist *n = clauses_in->lists[OMP_LIST_FIRSTPRIVATE];\n+  gfc_omp_namelist **tail = NULL;\n+\n+  for (; n != NULL; n = n->next)\n+    {\n+      gfc_omp_namelist *n2 = clauses_out->lists[OMP_LIST_MAP];\n+      for (; n2 != NULL; n2 = n2->next)\n+\tif (n->sym == n2->sym)\n+\t  break;\n+      if (n2 == NULL)\n+\t{\n+\t  gfc_omp_namelist *dup = gfc_get_omp_namelist ();\n+\t  *dup = *n;\n+\t  dup->next = NULL;\n+\t  if (!tail)\n+\t    {\n+\t      tail = &clauses_out->lists[OMP_LIST_FIRSTPRIVATE];\n+\t      while (*tail && (*tail)->next)\n+\t\ttail = &(*tail)->next;\n+\t    }\n+\t  *tail = dup;\n+\t  tail = &(*tail)->next;\n+\t}\n+    }\n+}\n+\n static void\n gfc_free_split_omp_clauses (gfc_code *code, gfc_omp_clauses *clausesa)\n {\n@@ -6351,8 +6384,8 @@ gfc_split_omp_clauses (gfc_code *code,\n \t simd and masked/master.  Put it on the outermost of those and duplicate\n \t on parallel and teams.  */\n       if (mask & GFC_OMP_MASK_TARGET)\n-\tclausesa[GFC_OMP_SPLIT_TARGET].lists[OMP_LIST_FIRSTPRIVATE]\n-\t  = code->ext.omp_clauses->lists[OMP_LIST_FIRSTPRIVATE];\n+\tgfc_add_firstprivate_if_unmapped (&clausesa[GFC_OMP_SPLIT_TARGET],\n+\t\t\t\t\t  code->ext.omp_clauses);\n       if (mask & GFC_OMP_MASK_TEAMS)\n \tclausesa[GFC_OMP_SPLIT_TEAMS].lists[OMP_LIST_FIRSTPRIVATE]\n \t  = code->ext.omp_clauses->lists[OMP_LIST_FIRSTPRIVATE];"}, {"sha": "e662a2bd3b20ac1b82ba228d7a819127894f1ea9", "filename": "libgomp/testsuite/libgomp.fortran/combined-directive-splitting-1.f90", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9316ad3b4354cbf2980f86902e54884e918c472a/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fcombined-directive-splitting-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9316ad3b4354cbf2980f86902e54884e918c472a/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fcombined-directive-splitting-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fcombined-directive-splitting-1.f90?ref=9316ad3b4354cbf2980f86902e54884e918c472a", "patch": "@@ -0,0 +1,41 @@\n+module m\n+  integer :: a = 1\n+  !$omp declare target enter(a)\n+end module m\n+\n+module m2\n+contains\n+subroutine bar()\n+  use m\n+  implicit none\n+  !$omp declare target\n+  a = a + 5\n+end subroutine bar\n+end module m2\n+\n+program p\n+  use m\n+  use m2\n+  implicit none\n+  integer :: b, i\n+\n+  !$omp target parallel do map(always, tofrom: a) firstprivate(a)\n+    do i = 1, 1\n+      a = 7\n+      call bar()\n+      if (a /= 7) error stop 1\n+      a = a + 8\n+    end do\n+  if (a /= 6) error stop 2\n+\n+  b = 3\n+  !$omp target parallel do map(always, tofrom: a) firstprivate(b)\n+    do i = 1, 1\n+      a = 3\n+      call bar ()\n+      if (a /= 8) error stop 3\n+      a = a + b\n+    end do\n+  if (a /= 11) error stop 4\n+end program p\n+"}]}