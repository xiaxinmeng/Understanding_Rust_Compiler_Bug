{"sha": "a824924d41d55947679aaaac216611133c633b76", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTgyNDkyNGQ0MWQ1NTk0NzY3OWFhYWFjMjE2NjExMTMzYzYzM2I3Ng==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@bitrange.com", "date": "2002-02-06T05:13:12Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@gcc.gnu.org", "date": "2002-02-06T05:13:12Z"}, "message": "Implement using \"base addresses\" in insn operands as default.\n\n\t* config/mmix/mmix.c (mmix_conditional_register_usage): if\n\t-mabi=gnu, modify fixed_regs to fit the GNU ABI.\n\t(mmix_extra_constraint): Use 'R' to indicate that GETA should be\n\tused to read the rtx value.\n\t(mmix_target_asm_function_epilogue): Fix spacing.\n\t(mmix_constant_address_p): Handle TARGET_BASE_ADDRESSES.\n\t(mmix_legitimate_address): Ditto.\n\t(mmix_encode_section_info): Set SYMBOL_REF_FLAG on rtx:es that\n\tshould be loaded with a GETA insn.  Don't allocate needless extra\n\tchar for nul termination and fix misleading comment.\n\t(mmix_print_operand_address): Handle constants if\n\tTARGET_BASE_ADDRESSES.\n\t(mmix_output_register_setting): Use base addressing if\n\tTARGET_BASE_ADDRESSES and the number of insns is 3.\n\t* config/mmix/t-mmix (MULTILIB_EXTRA_OPTS): New.\n\t* config/mmix/mmix.md (\"movdi\"): Change the alternative with GETA\n\tto use R as constraint, add LDA to match s.\n\t* config/mmix/mmix.h (TARGET_BASE_ADDRESSES): New.\n\t(TARGET_DEFAULT): Add TARGET_MASK_BASE_ADDRESSES.\n\t(TARGET_SWITCHES): Add -mbase-addresses, -mno-base-addresses.\n\t(FIXED_REGISTERS): Make registers $231..$246 fixed by default.\n\t(MMIX_MMIXWARE_ABI_REG_ALLOC_ORDER): Move $231..$246 last, in\n\torder with other fixed registers.\n\t(MMIX_GNU_ABI_REG_ALLOC_ORDER): Put forward $231, in order with\n\tother parameter/call-clobbered registers.\n\t* doc/invoke.texi (Option Summary) <MMIX Options>: Add\n\t-mbase-addresses, -mno-base-addresses.\n\t(MMIX Options): Ditto.\n\nFrom-SVN: r49536", "tree": {"sha": "eaf6a20cb7edaa510d6dcf08ca7445e4975d029e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eaf6a20cb7edaa510d6dcf08ca7445e4975d029e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a824924d41d55947679aaaac216611133c633b76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a824924d41d55947679aaaac216611133c633b76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a824924d41d55947679aaaac216611133c633b76", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a824924d41d55947679aaaac216611133c633b76/comments", "author": null, "committer": null, "parents": [{"sha": "282cb01bc29cdac825eedc4b8ad74085c2d76918", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/282cb01bc29cdac825eedc4b8ad74085c2d76918", "html_url": "https://github.com/Rust-GCC/gccrs/commit/282cb01bc29cdac825eedc4b8ad74085c2d76918"}], "stats": {"total": 252, "additions": 195, "deletions": 57}, "files": [{"sha": "bdaa34aa2f970e2da0e1c666c09bf4b24312a217", "filename": "gcc/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a824924d41d55947679aaaac216611133c633b76/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a824924d41d55947679aaaac216611133c633b76/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a824924d41d55947679aaaac216611133c633b76", "patch": "@@ -1,3 +1,35 @@\n+2002-02-06  Hans-Peter Nilsson  <hp@bitrange.com>\n+\n+\tImplement using \"base addresses\" in insn operands as default.\n+\t* config/mmix/mmix.c (mmix_conditional_register_usage): if\n+\t-mabi=gnu, modify fixed_regs to fit the GNU ABI.\n+\t(mmix_extra_constraint): Use 'R' to indicate that GETA should be\n+\tused to read the rtx value.\n+\t(mmix_target_asm_function_epilogue): Fix spacing.\n+\t(mmix_constant_address_p): Handle TARGET_BASE_ADDRESSES.\n+\t(mmix_legitimate_address): Ditto.\n+\t(mmix_encode_section_info): Set SYMBOL_REF_FLAG on rtx:es that\n+\tshould be loaded with a GETA insn.  Don't allocate needless extra\n+\tchar for nul termination and fix misleading comment.\n+\t(mmix_print_operand_address): Handle constants if\n+\tTARGET_BASE_ADDRESSES.\n+\t(mmix_output_register_setting): Use base addressing if\n+\tTARGET_BASE_ADDRESSES and the number of insns is 3.\n+\t* config/mmix/t-mmix (MULTILIB_EXTRA_OPTS): New.\n+\t* config/mmix/mmix.md (\"movdi\"): Change the alternative with GETA\n+\tto use R as constraint, add LDA to match s.\n+\t* config/mmix/mmix.h (TARGET_BASE_ADDRESSES): New.\n+\t(TARGET_DEFAULT): Add TARGET_MASK_BASE_ADDRESSES.\n+\t(TARGET_SWITCHES): Add -mbase-addresses, -mno-base-addresses.\n+\t(FIXED_REGISTERS): Make registers $231..$246 fixed by default.\n+\t(MMIX_MMIXWARE_ABI_REG_ALLOC_ORDER): Move $231..$246 last, in\n+\torder with other fixed registers.\n+\t(MMIX_GNU_ABI_REG_ALLOC_ORDER): Put forward $231, in order with\n+\tother parameter/call-clobbered registers.\n+\t* doc/invoke.texi (Option Summary) <MMIX Options>: Add\n+\t-mbase-addresses, -mno-base-addresses.\n+\t(MMIX Options): Ditto.\n+\n 2002-02-05  John David Anglin  <dave@hiauly1.hia.nrc.ca>\n \n \t* pa.h (PREDICATE_CODES): Add reg_before_reload_operand."}, {"sha": "8192d9b6a66a6c22362fba5c6c9adf910d2118c0", "filename": "gcc/config/mmix/mmix.c", "status": "modified", "additions": 118, "deletions": 47, "changes": 165, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a824924d41d55947679aaaac216611133c633b76/gcc%2Fconfig%2Fmmix%2Fmmix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a824924d41d55947679aaaac216611133c633b76/gcc%2Fconfig%2Fmmix%2Fmmix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.c?ref=a824924d41d55947679aaaac216611133c633b76", "patch": "@@ -228,6 +228,12 @@ mmix_conditional_register_usage ()\n \t mmixware ABI.  */\n       for (i = 15; i <= 30; i++)\n \tcall_used_regs[i] = 0;\n+\n+      /* \"Unfix\" the parameter registers.  */\n+      for (i = MMIX_RESERVED_GNU_ARG_0_REGNUM;\n+\t   i < MMIX_RESERVED_GNU_ARG_0_REGNUM + MMIX_MAX_ARGS_IN_REGS;\n+\t   i++)\n+\tfixed_regs[i] = 0;\n     }\n \n   /* Step over the \":\" in special register names.  */\n@@ -334,14 +340,34 @@ mmix_extra_constraint (x, c, strict)\n       ? strict_memory_address_p (Pmode, x)\n       : memory_address_p (Pmode, x);\n \n+  /* R asks whether x is to be loaded with GETA or something else.  Right\n+     now, only a SYMBOL_REF and LABEL_REF can fit for\n+     TARGET_BASE_ADDRESSES.\n+\n+     Only constant symbolic addresses apply.  With TARGET_BASE_ADDRESSES,\n+     we just allow straight LABEL_REF or SYMBOL_REFs with SYMBOL_REF_FLAG\n+     set right now; only function addresses and code labels.  If we change\n+     to let SYMBOL_REF_FLAG be set on other symbols, we have to check\n+     inside CONST expressions.  When TARGET_BASE_ADDRESSES is not in\n+     effect, a \"raw\" constant check together with mmix_constant_address_p\n+     is all that's needed; we want all constant addresses to be loaded\n+     with GETA then.  */\n+  if (c == 'R')\n+    return\n+      GET_CODE (x) != CONST_INT && GET_CODE (x) != CONST_DOUBLE\n+      && mmix_constant_address_p (x)\n+      && (! TARGET_BASE_ADDRESSES\n+\t  || (GET_CODE (x) == LABEL_REF\n+\t      || (GET_CODE (x) == SYMBOL_REF && SYMBOL_REF_FLAG (x))));\n+\n   if (GET_CODE (x) != CONST_DOUBLE || GET_MODE (x) != VOIDmode)\n     return 0;\n \n   value = mmix_intval (x);\n \n   /* We used to map Q->J, R->K, S->L, T->N, U->O, but we don't have to any\n-     more ('U' taken for address_operand).  Some letters map outside of\n-     CONST_INT, though; we still use 'S' and 'T'.  */\n+     more ('U' taken for address_operand, 'R' similarly).  Some letters map\n+     outside of CONST_INT, though; we still use 'S' and 'T'.  */\n   if (c == 'S')\n     return mmix_shiftable_wyde_value (value);\n   else if (c == 'T')\n@@ -1017,7 +1043,7 @@ mmix_target_asm_function_epilogue (stream, locals_size)\n   if (frame_pointer_needed)\n     stack_space_to_deallocate += 8;\n \n-  /* Make sure we don't get an unaligned stack. */\n+  /* Make sure we don't get an unaligned stack.  */\n   if ((stack_space_to_deallocate % 8) != 0)\n     internal_error (\"stack frame not a multiple of octabyte: %d\",\n \t\t    stack_space_to_deallocate);\n@@ -1354,34 +1380,35 @@ mmix_initialize_trampoline (trampaddr, fnaddr, static_chain)\n \n /* We must exclude constant addresses that have an increment that is not a\n    multiple of four bytes because of restrictions of the GETA\n-   instruction.  FIXME: No, I don't think so.  Just add a constraint.  */\n+   instruction, unless TARGET_BASE_ADDRESSES.  */\n \n int\n mmix_constant_address_p (x)\n      rtx x;\n {\n   RTX_CODE code = GET_CODE (x);\n   int addend = 0;\n+  /* When using \"base addresses\", anything constant goes.  */\n+  int constant_ok = TARGET_BASE_ADDRESSES != 0;\n \n   if (code == LABEL_REF || code == SYMBOL_REF)\n     return 1;\n \n   if (code == CONSTANT_P_RTX || code == HIGH)\n     /* FIXME: Don't know how to dissect these.  Avoid them for now.  */\n-    return 0;\n+    return constant_ok;\n \n   switch (code)\n     {\n     case LABEL_REF:\n     case SYMBOL_REF:\n       return 1;\n \n-    case PLUS:\n-      /* Can we get a naked PLUS? */\n     case CONSTANT_P_RTX:\n     case HIGH:\n-      /* FIXME: Don't know how to dissect these.  Avoid them for now.  */\n-      return 0;\n+      /* FIXME: Don't know how to dissect these.  Avoid them for now,\n+\t except we know they're constants.  */\n+      return constant_ok;\n \n     case CONST_INT:\n       addend = INTVAL (x);\n@@ -1390,7 +1417,7 @@ mmix_constant_address_p (x)\n     case CONST_DOUBLE:\n       if (GET_MODE (x) != VOIDmode)\n \t/* Strange that we got here.  FIXME: Check if we do.  */\n-\treturn 0;\n+\treturn constant_ok;\n       addend = CONST_DOUBLE_LOW (x);\n       break;\n \n@@ -1410,17 +1437,17 @@ mmix_constant_address_p (x)\n \t\t      && GET_MODE (x1) == VOIDmode)))\n \t    addend = mmix_intval (x1);\n \t  else\n-\t    return 0;\n+\t    return constant_ok;\n \t}\n       else\n-\treturn 0;\n+\treturn constant_ok;\n       break;\n \n     default:\n       return 0;\n     }\n \n-  return (addend & 3) == 0;\n+  return constant_ok || (addend & 3) == 0;\n }\n \n /* Return 1 if the address is OK, otherwise 0.\n@@ -1445,7 +1472,9 @@ mmix_legitimate_address (mode, x, strict_checking)\n   /* We only accept:\n      (mem reg)\n      (mem (plus reg reg))\n-     (mem (plus reg 0..255)).  */\n+     (mem (plus reg 0..255)).\n+     unless TARGET_BASE_ADDRESSES, in which case we accept all\n+     (mem constant_address) too.  */\n \n \n     /* (mem reg) */\n@@ -1465,21 +1494,23 @@ mmix_legitimate_address (mode, x, strict_checking)\n \t  x2 = tem;\n \t}\n \n-      /* (mem (plus (reg) (?))) */\n+      /* (mem (plus (reg?) (?))) */\n       if (!REG_P (x1) || !MMIX_REG_OK (x1))\n-\treturn 0;\n+\treturn TARGET_BASE_ADDRESSES && mmix_constant_address_p (x);\n \n-      /* (mem (plus (reg) (reg))) */\n+      /* (mem (plus (reg) (reg?))) */\n       if (REG_P (x2) && MMIX_REG_OK (x2))\n \treturn 1;\n \n-      /* (mem (plus (reg) (0..255))) */\n+      /* (mem (plus (reg) (0..255?))) */\n       if (GET_CODE (x2) == CONST_INT\n \t  && CONST_OK_FOR_LETTER_P (INTVAL (x2), 'I'))\n \treturn 1;\n+\n+      return 0;\n     }\n \n-  return 0;\n+  return TARGET_BASE_ADDRESSES && mmix_constant_address_p (x);\n }\n \n /* LEGITIMATE_CONSTANT_P.  */\n@@ -1676,34 +1707,41 @@ mmix_encode_section_info (decl)\n     {\n       /* For non-visible declarations, add a \"@\" prefix, which we skip\n \t when the label is output.  If the label does not have this\n-\t prefix, a \":\" is output.\n+\t prefix, a \":\" is output if -mtoplevel-symbols.\n \n \t Note that this does not work for data that is declared extern and\n \t later defined as static.  If there's code in between, that code\n-\t will refer to the extern declaration.  And vice versa.  Until we\n-\t can get rid of mmixal, we have to assume that code is\n-\t well-behaved.  */\n+\t will refer to the extern declaration, and vice versa.  This just\n+\t means that when -mtoplevel-symbols is in use, we can just handle\n+\t well-behaved ISO-compliant code.  */\n \n       const char *str = XSTR (XEXP (DECL_RTL (decl), 0), 0);\n       int len = strlen (str);\n       char *newstr;\n \n-      /* Doing as rs6000 seems safe; always use ggc.  Except don't copy\n-\t the suspected off-by-one bug.\n-\t FIXME: Is it still there? yes 2001-08-23\n-\t Why is the return type of ggc_alloc_string const?  */\n-      newstr = (char *) ggc_alloc_string (\"\", len + 2);\n+      /* Why is the return type of ggc_alloc_string const?  */\n+      newstr = (char *) ggc_alloc_string (\"\", len + 1);\n \n       strcpy (newstr + 1, str);\n       *newstr = '@';\n       XSTR (XEXP (DECL_RTL (decl), 0), 0) = newstr;\n     }\n \n-  /* FIXME: Later on, add SYMBOL_REF_FLAG for things that we can reach\n-     from here via GETA, to check in LEGITIMATE_CONSTANT_P.  Needs to have\n-     different options for the cases where we want *all* to be assumed\n-     reachable via GETA, or all constant symbols, or just text symbols in\n-     this file, or perhaps just the constant pool.  */\n+  /* Set SYMBOL_REF_FLAG for things that we want to access with GETA.  We\n+     may need different options to reach for different things with GETA.\n+     For now, functions and things we know or have been told are constant.  */\n+  if (TREE_CODE (decl) == FUNCTION_DECL\n+      || TREE_CONSTANT (decl)\n+      || (TREE_CODE (decl) == VAR_DECL\n+\t  && TREE_READONLY (decl)\n+\t  && !TREE_SIDE_EFFECTS (decl)\n+\t  && (!DECL_INITIAL (decl)\n+\t      || TREE_CONSTANT (DECL_INITIAL (decl)))))\n+    {\n+      rtx rtl = (TREE_CODE_CLASS (TREE_CODE (decl)) != 'd'\n+                 ? TREE_CST_RTL (decl) : DECL_RTL (decl));\n+      SYMBOL_REF_FLAG (XEXP (rtl, 0)) = 1;\n+    }\n }\n \n /* STRIP_NAME_ENCODING.  */\n@@ -2351,6 +2389,12 @@ mmix_print_operand_address (stream, x)\n \t}\n     }\n \n+  if (TARGET_BASE_ADDRESSES && mmix_legitimate_constant_p (x))\n+    {\n+      output_addr_const (stream, x);\n+      return;\n+    }\n+\n   fatal_insn (\"MMIX Internal: This is not a recognized address\", x);\n }\n \n@@ -2514,25 +2558,52 @@ mmix_output_register_setting (stream, regno, value, do_begin_end)\n       static const char *const higher_parts[] = {\"L\", \"ML\", \"MH\", \"H\"};\n       const char *op = \"SET\";\n       const char *line_begin = \"\";\n+      int insns = 0;\n       int i;\n+      HOST_WIDEST_INT tmpvalue = value;\n \n-      /* Output pertinent parts of the 4-wyde sequence.\n-\t Still more to do if we want this to be optimal, but hey...\n-\t Note that the zero case has been handled above.  */\n-      for (i = 0; i < 4 && value != 0; i++)\n+      /* Compute the number of insns needed to output this constant.  */\n+      for (i = 0; i < 4 && tmpvalue != 0; i++)\n+\t{\n+\t  if (tmpvalue & 65535)\n+\t    insns++;\n+\t  tmpvalue >>= 16;\n+\t}\n+      if (TARGET_BASE_ADDRESSES && insns == 3)\n+\t{\n+\t  /* The number three is based on a static observation on\n+\t     ghostscript-6.52.  Two and four are excluded because there\n+\t     are too many such constants, and each unique constant (maybe\n+\t     offset by 1..255) were used few times compared to other uses,\n+\t     e.g. addresses.\n+\n+\t     We use base-plus-offset addressing to force it into a global\n+\t     register; we just use a \"LDA reg,VALUE\", which will cause the\n+\t     assembler and linker to DTRT (for constants as well as\n+\t     addresses).  */\n+\t  fprintf (stream, \"LDA %s,\", reg_names[regno]);\n+\t  mmix_output_octa (stream, value, 0);\n+\t}\n+      else\n \t{\n-\t  if (value & 65535)\n+\t  /* Output pertinent parts of the 4-wyde sequence.\n+\t     Still more to do if we want this to be optimal, but hey...\n+\t     Note that the zero case has been handled above.  */\n+\t  for (i = 0; i < 4 && value != 0; i++)\n \t    {\n-\t      fprintf (stream, \"%s%s%s %s,#%x\", line_begin, op,\n-\t\t       higher_parts[i], reg_names[regno],\n-\t\t       (int) (value & 65535));\n-\t      /* The first one sets the rest of the bits to 0, the next\n-\t\t ones add set bits.  */\n-\t      op = \"INC\";\n-\t      line_begin = \"\\n\\t\";\n-\t    }\n+\t      if (value & 65535)\n+\t\t{\n+\t\t  fprintf (stream, \"%s%s%s %s,#%x\", line_begin, op,\n+\t\t\t   higher_parts[i], reg_names[regno],\n+\t\t\t   (int) (value & 65535));\n+\t\t  /* The first one sets the rest of the bits to 0, the next\n+\t\t     ones add set bits.  */\n+\t\t  op = \"INC\";\n+\t\t  line_begin = \"\\n\\t\";\n+\t\t}\n \n-\t  value >>= 16;\n+\t      value >>= 16;\n+\t    }\n \t}\n     }\n "}, {"sha": "74229acd6a4171f8f3b9088be1e05ba938bb06b2", "filename": "gcc/config/mmix/mmix.h", "status": "modified", "additions": 24, "deletions": 7, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a824924d41d55947679aaaac216611133c633b76/gcc%2Fconfig%2Fmmix%2Fmmix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a824924d41d55947679aaaac216611133c633b76/gcc%2Fconfig%2Fmmix%2Fmmix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.h?ref=a824924d41d55947679aaaac216611133c633b76", "patch": "@@ -157,6 +157,16 @@ extern int target_flags;\n #define TARGET_MASK_TOPLEVEL_SYMBOLS 32\n #define TARGET_MASK_BRANCH_PREDICT 64\n \n+/* We use the term \"base address\" since that's what Knuth uses.  The base\n+   address goes in a global register.  When addressing, it's more like\n+   \"base address plus offset\", with the offset being 0..255 from the base,\n+   which itself can be a symbol plus an offset.  The effect is like having\n+   a constant pool in global registers, code offseting from those\n+   registers (automatically causing a request for a suitable constant base\n+   address register) without having to know the specific register or the\n+   specific offset.  */\n+#define TARGET_MASK_BASE_ADDRESSES 128\n+\n /* FIXME: Get rid of this one.  */\n #define TARGET_LIBFUNC (target_flags & TARGET_MASK_LIBFUNCS)\n #define TARGET_ABI_GNU (target_flags & TARGET_MASK_ABI_GNU)\n@@ -165,9 +175,10 @@ extern int target_flags;\n #define TARGET_KNUTH_DIVISION (target_flags & TARGET_MASK_KNUTH_DIVISION)\n #define TARGET_TOPLEVEL_SYMBOLS (target_flags & TARGET_MASK_TOPLEVEL_SYMBOLS)\n #define TARGET_BRANCH_PREDICT (target_flags & TARGET_MASK_BRANCH_PREDICT)\n+#define TARGET_BASE_ADDRESSES (target_flags & TARGET_MASK_BASE_ADDRESSES)\n \n #define TARGET_DEFAULT \\\n- (TARGET_MASK_BRANCH_PREDICT)\n+ (TARGET_MASK_BRANCH_PREDICT | TARGET_MASK_BASE_ADDRESSES)\n \n /* FIXME: Provide a way to *load* the epsilon register.  */\n #define TARGET_SWITCHES\t\t\t\t\t\t\t\\\n@@ -198,6 +209,10 @@ extern int target_flags;\n    N_(\"Use P-mnemonics for branches statically predicted as taken\")},\t\\\n   {\"no-branch-predict\",\t-TARGET_MASK_BRANCH_PREDICT,\t\t\t\\\n    N_(\"Don't use P-mnemonics for branches\")},\t\t\t\t\\\n+  {\"base-addresses\",\tTARGET_MASK_BASE_ADDRESSES,\t\t\t\\\n+   N_(\"Use addresses that allocate global registers\")},\t\t\t\\\n+  {\"no-base-addresses\",\t-TARGET_MASK_BASE_ADDRESSES,\t\t\t\\\n+   N_(\"Do not use addresses that allocate global registers\")},\t\t\\\n   {\"\",\t\t\tTARGET_DEFAULT, \"\"}}\n \n /* Unfortunately, this must not reference anything in \"mmix.c\".  */\n@@ -366,8 +381,8 @@ extern int target_flags;\n    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \\\n    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \\\n    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \\\n-   1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, \\\n+   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \\\n+   1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, \\\n    1, 1, 0, 0, 0, 1 \\\n  }\n \n@@ -419,8 +434,6 @@ extern int target_flags;\n    24, 25, 26, 27, 28, 29, 30, 31,    \t\t\\\n \t\t\t\t\t\t\\\n    252, 251, 250, 249, 248, 247, \t\t\\\n-   246, 245, 244, 243, 242, 241, 240, 239,\t\\\n-   238, 237, 236, 235, 234, 233, 232, 231,\t\\\n \t\t\t\t\t\t\\\n    253,\t\t\t\t\t\t\\\n \t\t\t\t\t\t\\\n@@ -451,6 +464,9 @@ extern int target_flags;\n    208, 209, 210, 211, 212, 213, 214, 215,\t\\\n    216, 217, 218, 219, 220, 221, 222, 223,\t\\\n    224, 225, 226, 227, 228, 229, 230, 231,\t\\\n+   232, 233, 234, 235, 236, 237, 238, 239,\t\\\n+   240, 241, 242, 243, 244, 245, 246,\t\t\\\n+\t\t\t\t\t\t\\\n    254, 255, 256, 257, 261 \t\t\t\\\n  }\n \n@@ -469,7 +485,7 @@ extern int target_flags;\n #define MMIX_GNU_ABI_REG_ALLOC_ORDER\t\t\\\n {  252, 251, 250, 249, 248, 247, 246,\t\t\\\n    245, 244, 243, 242, 241, 240, 239, 238,\t\\\n-   237, 236, 235, 234, 233, 232,\t\t\\\n+   237, 236, 235, 234, 233, 232, 231,\t\t\\\n \t\t\t\t\t\t\\\n    0, 1, 2, 3, 4, 5, 6, 7,\t\t\t\\\n    8, 9, 10, 11, 12, 13, 14, 15,\t\t\\\n@@ -504,7 +520,8 @@ extern int target_flags;\n    200, 201, 202, 203, 204, 205, 206, 207,\t\\\n    208, 209, 210, 211, 212, 213, 214, 215,\t\\\n    216, 217, 218, 219, 220, 221, 222, 223,\t\\\n-   224, 225, 226, 227, 228, 229, 230, 231,\t\\\n+   224, 225, 226, 227, 228, 229, 230,\t\t\\\n+\t\t\t\t\t\t\\\n    254, 255, 256, 257, 261 \t\t\t\\\n  }\n "}, {"sha": "da555ff2d88e9b537feb7159991766cf1c5f0ca7", "filename": "gcc/config/mmix/mmix.md", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a824924d41d55947679aaaac216611133c633b76/gcc%2Fconfig%2Fmmix%2Fmmix.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a824924d41d55947679aaaac216611133c633b76/gcc%2Fconfig%2Fmmix%2Fmmix.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.md?ref=a824924d41d55947679aaaac216611133c633b76", "patch": "@@ -88,8 +88,8 @@\n \n ;; We assume all \"s\" are addresses.  Does that hold?\n (define_insn \"movdi\"\n-  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,r ,r,x,r,m,r,m,r,??r\")\n-\t(match_operand:DI 1 \"general_operand\"\t    \"r,LS,K,r,x,I,m,r,s,n\"))]\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,r ,r,x,r,m,r,m,r,r,??r\")\n+\t(match_operand:DI 1 \"general_operand\"\t    \"r,LS,K,r,x,I,m,r,R,s,n\"))]\n   \"\"\n   \"@\n    SET %0,%1\n@@ -101,6 +101,7 @@\n    LDO %0,%1\n    STOU %1,%0\n    GETA %0,%1\n+   LDA %0,%1\n    %r0%I1\")\n \n ;; Note that we move around the float as a collection of bits; no"}, {"sha": "fcfe7c7229c0e4b551870f6636c7757fe424a1d1", "filename": "gcc/config/mmix/t-mmix", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a824924d41d55947679aaaac216611133c633b76/gcc%2Fconfig%2Fmmix%2Ft-mmix", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a824924d41d55947679aaaac216611133c633b76/gcc%2Fconfig%2Fmmix%2Ft-mmix", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Ft-mmix?ref=a824924d41d55947679aaaac216611133c633b76", "patch": "@@ -13,6 +13,9 @@ EXTRA_MULTILIB_PARTS = crti.o crtn.o crtbegin.o crtend.o\n MULTILIB_OPTIONS = mabi=gnu\n MULTILIB_DIRNAMES = gnuabi\n \n+# Don't use global registers in libraries.\n+MULTILIB_EXTRA_OPTS = mno-base-addresses\n+\n $(T)crti.o: $(srcdir)/config/mmix/crti.asm $(GCC_PASSES)\n \t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(MULTILIB_CFLAGS) $(INCLUDES) \\\n \t-c -o $(T)crti.o -x assembler-with-cpp $(srcdir)/config/mmix/crti.asm"}, {"sha": "c5f88bed27873e08c726acd2a60c412fccf97339", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a824924d41d55947679aaaac216611133c633b76/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a824924d41d55947679aaaac216611133c633b76/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=a824924d41d55947679aaaac216611133c633b76", "patch": "@@ -593,7 +593,8 @@ in the following sections.\n @gccoptlist{\n -mlibfuncs -mno-libfuncs -mepsilon -mno-epsilon -mabi=gnu @gol\n -mabi=mmixware -mzero-extend -mknuthdiv -mtoplevel-symbols @gol\n--melf -mbranch-predict -mno-branch-predict}\n+-melf -mbranch-predict -mno-branch-predict -mbase-addresses @gol\n+-mno-base-addresses}\n \n @emph{IA-64 Options}\n @gccoptlist{\n@@ -9513,6 +9514,19 @@ Generate an executable in the ELF format, rather than the default\n @opindex mno-branch-predict\n Use (do not use) the probable-branch instructions, when static branch\n prediction indicates a probable branch.\n+\n+@item -mbase-addresses\n+@itemx -mno-base-addresses\n+@opindex mbase-addresses\n+@opindex mno-base-addresses\n+Generate (do not generate) code that uses @emph{base addresses}.  Using a\n+base address automatically generates a request (handled by the assembler\n+and the linker) for a constant to be set up in a global register.  The\n+register is used for one or more base address requests within the range 0\n+to 255 from the value held in the register.  The generally leads to short\n+and fast code, but the number of different data items that can be\n+addressed is limited.  This means that a program that uses lots of static\n+data may require @option{-mno-base-addresses}.\n @end table\n \n @node PDP-11 Options"}]}