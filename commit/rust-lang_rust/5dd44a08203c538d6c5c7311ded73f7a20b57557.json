{"sha": "5dd44a08203c538d6c5c7311ded73f7a20b57557", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkZDQ0YTA4MjAzYzUzOGQ2YzVjNzMxMWRlZDczZjdhMjBiNTc1NTc=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-11-22T10:00:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-22T10:00:44Z"}, "message": "Merge #2347\n\n2347: More correct expand macro r=matklad a=edwin0cheng\n\n\n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>", "tree": {"sha": "4660f68a90b79bc7a7b62adf825d32f0e41dacb2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4660f68a90b79bc7a7b62adf825d32f0e41dacb2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5dd44a08203c538d6c5c7311ded73f7a20b57557", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd17HMCRBK7hj4Ov3rIwAAdHIIAFCfS+xVk2SqrX8wc4O8WL/0\nH0NxIT4W0M+DwI6muwpn42ZXya2SVhItObvJP0J7FYReEDuKNgijRkZbaFqRB32x\nzNELvKdgmS2sjiNyOF8/7/BsP8FqAIwE4Ry37zZSSjbR++C2sbn6goUaWDybGZyY\nQYqmCft36WYYX4XlAjlIiIF/iHQ58RcrYrrMcuyO6heuqBGKhDePdTkNtMBDWG5D\n6vHBBr4wk7cPMRkH9J/8nWVLlX3GX73GJPFlThS4SZCdE/z1flx+DI+mLAQeC/FP\nHQKdBVMFv06w367QwiNa1SDW6l08tSgLSiGDwEAfGTyo8u2jQW3U0FwaDuV3nTY=\n=Ru3D\n-----END PGP SIGNATURE-----\n", "payload": "tree 4660f68a90b79bc7a7b62adf825d32f0e41dacb2\nparent f24aa7a45ad6ffbbae56d5bca50afd6aefa1a4c7\nparent a92ad59a02665672921ded490ca2103bd57d9af1\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1574416844 +0000\ncommitter GitHub <noreply@github.com> 1574416844 +0000\n\nMerge #2347\n\n2347: More correct expand macro r=matklad a=edwin0cheng\n\n\n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5dd44a08203c538d6c5c7311ded73f7a20b57557", "html_url": "https://github.com/rust-lang/rust/commit/5dd44a08203c538d6c5c7311ded73f7a20b57557", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5dd44a08203c538d6c5c7311ded73f7a20b57557/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f24aa7a45ad6ffbbae56d5bca50afd6aefa1a4c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/f24aa7a45ad6ffbbae56d5bca50afd6aefa1a4c7", "html_url": "https://github.com/rust-lang/rust/commit/f24aa7a45ad6ffbbae56d5bca50afd6aefa1a4c7"}, {"sha": "a92ad59a02665672921ded490ca2103bd57d9af1", "url": "https://api.github.com/repos/rust-lang/rust/commits/a92ad59a02665672921ded490ca2103bd57d9af1", "html_url": "https://github.com/rust-lang/rust/commit/a92ad59a02665672921ded490ca2103bd57d9af1"}], "stats": {"total": 34, "additions": 32, "deletions": 2}, "files": [{"sha": "673301b10ade100ab4cef509d8389a95417e4d2e", "filename": "crates/ra_ide_api/src/expand_macro.rs", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/5dd44a08203c538d6c5c7311ded73f7a20b57557/crates%2Fra_ide_api%2Fsrc%2Fexpand_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dd44a08203c538d6c5c7311ded73f7a20b57557/crates%2Fra_ide_api%2Fsrc%2Fexpand_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fexpand_macro.rs?ref=5dd44a08203c538d6c5c7311ded73f7a20b57557", "patch": "@@ -40,7 +40,7 @@ fn expand_macro_recur(\n     let analyzer = hir::SourceAnalyzer::new(db, source, None);\n     let expansion = analyzer.expand(db, macro_call)?;\n     let macro_file_id = expansion.file_id();\n-    let expanded: SyntaxNode = db.parse_or_expand(macro_file_id)?;\n+    let mut expanded: SyntaxNode = db.parse_or_expand(macro_file_id)?;\n \n     let children = expanded.descendants().filter_map(ast::MacroCall::cast);\n     let mut replaces = FxHashMap::default();\n@@ -49,7 +49,14 @@ fn expand_macro_recur(\n         let node = hir::Source::new(macro_file_id, &child);\n         let new_node = expand_macro_recur(db, source, node)?;\n \n-        replaces.insert(child.syntax().clone().into(), new_node.into());\n+        // Replace the whole node if it is root\n+        // `replace_descendants` will not replace the parent node\n+        // but `SyntaxNode::descendants include itself\n+        if expanded == *child.syntax() {\n+            expanded = new_node;\n+        } else {\n+            replaces.insert(child.syntax().clone().into(), new_node.into());\n+        }\n     }\n \n     Some(replace_descendants(&expanded, &replaces))\n@@ -217,4 +224,27 @@ fn some_thing() -> u32 {\n }\n \"###);\n     }\n+\n+    #[test]\n+    fn macro_expand_match_ast_inside_let_statement() {\n+        let res = check_expand_macro(\n+            r#\"\n+        //- /lib.rs\n+        macro_rules! match_ast {\n+            (match $node:ident { $($tt:tt)* }) => { match_ast!(match ($node) { $($tt)* }) };        \n+            (match ($node:expr) {}) => {{}};\n+        }        \n+\n+        fn main() {        \n+            let p = f(|it| {\n+                let res = mat<|>ch_ast! { match c {}};\n+                Some(res)\n+            })?;\n+        }\n+        \"#,\n+        );\n+\n+        assert_eq!(res.name, \"match_ast\");\n+        assert_snapshot!(res.expansion, @r###\"{}\"###);\n+    }\n }"}]}