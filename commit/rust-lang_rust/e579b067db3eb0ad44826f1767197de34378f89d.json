{"sha": "e579b067db3eb0ad44826f1767197de34378f89d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1NzliMDY3ZGIzZWIwYWQ0NDgyNmYxNzY3MTk3ZGUzNDM3OGY4OWQ=", "commit": {"author": {"name": "Maik Klein", "email": "maikklein@googlemail.com", "date": "2017-10-25T14:14:51Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-12-18T15:08:48Z"}, "message": "Move trans_item and monomorphize to rustc_mir", "tree": {"sha": "c27c77bb29926042a23b60d1dd2de2fb72ffe6a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c27c77bb29926042a23b60d1dd2de2fb72ffe6a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e579b067db3eb0ad44826f1767197de34378f89d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e579b067db3eb0ad44826f1767197de34378f89d", "html_url": "https://github.com/rust-lang/rust/commit/e579b067db3eb0ad44826f1767197de34378f89d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e579b067db3eb0ad44826f1767197de34378f89d/comments", "author": {"login": "MaikKlein", "id": 1994306, "node_id": "MDQ6VXNlcjE5OTQzMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1994306?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MaikKlein", "html_url": "https://github.com/MaikKlein", "followers_url": "https://api.github.com/users/MaikKlein/followers", "following_url": "https://api.github.com/users/MaikKlein/following{/other_user}", "gists_url": "https://api.github.com/users/MaikKlein/gists{/gist_id}", "starred_url": "https://api.github.com/users/MaikKlein/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MaikKlein/subscriptions", "organizations_url": "https://api.github.com/users/MaikKlein/orgs", "repos_url": "https://api.github.com/users/MaikKlein/repos", "events_url": "https://api.github.com/users/MaikKlein/events{/privacy}", "received_events_url": "https://api.github.com/users/MaikKlein/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "094c02121843402465714003eec9501962570720", "url": "https://api.github.com/repos/rust-lang/rust/commits/094c02121843402465714003eec9501962570720", "html_url": "https://github.com/rust-lang/rust/commit/094c02121843402465714003eec9501962570720"}], "stats": {"total": 269, "additions": 134, "deletions": 135}, "files": [{"sha": "a38ee45743c962e9532836f7331d618955ed31e6", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e579b067db3eb0ad44826f1767197de34378f89d/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e579b067db3eb0ad44826f1767197de34378f89d/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=e579b067db3eb0ad44826f1767197de34378f89d", "patch": "@@ -207,7 +207,7 @@ use common::{def_ty, instance_ty, type_has_metadata};\n use monomorphize::{self, Instance};\n use rustc::util::nodemap::{FxHashSet, FxHashMap, DefIdMap};\n \n-use rustc_trans_utils::trans_item::{TransItemExt, DefPathBasedNames, InstantiationMode};\n+use monomorphize::mono_item::{TransItemExt, DefPathBasedNames, InstantiationMode};\n \n use rustc_data_structures::bitvec::BitVector;\n "}, {"sha": "f56de9c0fd80167aa2086aa76a2d9bae7bd614dc", "filename": "src/librustc_mir/monomorphize/mod.rs", "status": "modified", "additions": 128, "deletions": 0, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/e579b067db3eb0ad44826f1767197de34378f89d/src%2Flibrustc_mir%2Fmonomorphize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e579b067db3eb0ad44826f1767197de34378f89d/src%2Flibrustc_mir%2Fmonomorphize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fmod.rs?ref=e579b067db3eb0ad44826f1767197de34378f89d", "patch": "@@ -1 +1,129 @@\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use rustc::hir::def_id::DefId;\n+use rustc::middle::lang_items::DropInPlaceFnLangItem;\n+use rustc::traits;\n+use rustc::ty::adjustment::CustomCoerceUnsized;\n+use rustc::ty::subst::Kind;\n+use rustc::ty::{self, Ty, TyCtxt};\n+\n+pub use rustc::ty::Instance;\n+\n pub mod collector;\n+pub mod mono_item;\n+\n+fn fn_once_adapter_instance<'a, 'tcx>(\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    closure_did: DefId,\n+    substs: ty::ClosureSubsts<'tcx>,\n+    ) -> Instance<'tcx> {\n+    debug!(\"fn_once_adapter_shim({:?}, {:?})\",\n+           closure_did,\n+           substs);\n+    let fn_once = tcx.lang_items().fn_once_trait().unwrap();\n+    let call_once = tcx.associated_items(fn_once)\n+        .find(|it| it.kind == ty::AssociatedKind::Method)\n+        .unwrap().def_id;\n+    let def = ty::InstanceDef::ClosureOnceShim { call_once };\n+\n+    let self_ty = tcx.mk_closure_from_closure_substs(\n+        closure_did, substs);\n+\n+    let sig = substs.closure_sig(closure_did, tcx);\n+    let sig = tcx.erase_late_bound_regions_and_normalize(&sig);\n+    assert_eq!(sig.inputs().len(), 1);\n+    let substs = tcx.mk_substs([\n+        Kind::from(self_ty),\n+        Kind::from(sig.inputs()[0]),\n+    ].iter().cloned());\n+\n+    debug!(\"fn_once_adapter_shim: self_ty={:?} sig={:?}\", self_ty, sig);\n+    Instance { def, substs }\n+}\n+\n+fn needs_fn_once_adapter_shim(actual_closure_kind: ty::ClosureKind,\n+                              trait_closure_kind: ty::ClosureKind)\n+                              -> Result<bool, ()>\n+{\n+    match (actual_closure_kind, trait_closure_kind) {\n+        (ty::ClosureKind::Fn, ty::ClosureKind::Fn) |\n+        (ty::ClosureKind::FnMut, ty::ClosureKind::FnMut) |\n+        (ty::ClosureKind::FnOnce, ty::ClosureKind::FnOnce) => {\n+            // No adapter needed.\n+           Ok(false)\n+        }\n+        (ty::ClosureKind::Fn, ty::ClosureKind::FnMut) => {\n+            // The closure fn `llfn` is a `fn(&self, ...)`.  We want a\n+            // `fn(&mut self, ...)`. In fact, at trans time, these are\n+            // basically the same thing, so we can just return llfn.\n+            Ok(false)\n+        }\n+        (ty::ClosureKind::Fn, ty::ClosureKind::FnOnce) |\n+        (ty::ClosureKind::FnMut, ty::ClosureKind::FnOnce) => {\n+            // The closure fn `llfn` is a `fn(&self, ...)` or `fn(&mut\n+            // self, ...)`.  We want a `fn(self, ...)`. We can produce\n+            // this by doing something like:\n+            //\n+            //     fn call_once(self, ...) { call_mut(&self, ...) }\n+            //     fn call_once(mut self, ...) { call_mut(&mut self, ...) }\n+            //\n+            // These are both the same at trans time.\n+            Ok(true)\n+        }\n+        _ => Err(()),\n+    }\n+}\n+\n+pub fn resolve_closure<'a, 'tcx> (\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    def_id: DefId,\n+    substs: ty::ClosureSubsts<'tcx>,\n+    requested_kind: ty::ClosureKind)\n+    -> Instance<'tcx>\n+{\n+    let actual_kind = substs.closure_kind(def_id, tcx);\n+\n+    match needs_fn_once_adapter_shim(actual_kind, requested_kind) {\n+        Ok(true) => fn_once_adapter_instance(tcx, def_id, substs),\n+        _ => Instance::new(def_id, substs.substs)\n+    }\n+}\n+\n+pub fn resolve_drop_in_place<'a, 'tcx>(\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    ty: Ty<'tcx>)\n+    -> ty::Instance<'tcx>\n+{\n+    let def_id = tcx.require_lang_item(DropInPlaceFnLangItem);\n+    let substs = tcx.intern_substs(&[Kind::from(ty)]);\n+    Instance::resolve(tcx, ty::ParamEnv::empty(traits::Reveal::All), def_id, substs).unwrap()\n+}\n+\n+pub fn custom_coerce_unsize_info<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                                           source_ty: Ty<'tcx>,\n+                                           target_ty: Ty<'tcx>)\n+                                           -> CustomCoerceUnsized {\n+    let def_id = tcx.lang_items().coerce_unsized_trait().unwrap();\n+\n+    let trait_ref = ty::Binder(ty::TraitRef {\n+        def_id: def_id,\n+        substs: tcx.mk_substs_trait(source_ty, &[target_ty])\n+    });\n+\n+    match tcx.trans_fulfill_obligation( (ty::ParamEnv::empty(traits::Reveal::All), trait_ref)) {\n+        traits::VtableImpl(traits::VtableImplData { impl_def_id, .. }) => {\n+            tcx.coerce_unsized_info(impl_def_id).custom_kind.unwrap()\n+        }\n+        vtable => {\n+            bug!(\"invalid CoerceUnsized vtable: {:?}\", vtable);\n+        }\n+    }\n+}"}, {"sha": "cf852a3f782d78a4129a8370d22115619b160444", "filename": "src/librustc_mir/monomorphize/mono_item.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e579b067db3eb0ad44826f1767197de34378f89d/src%2Flibrustc_mir%2Fmonomorphize%2Fmono_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e579b067db3eb0ad44826f1767197de34378f89d/src%2Flibrustc_mir%2Fmonomorphize%2Fmono_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fmono_item.rs?ref=e579b067db3eb0ad44826f1767197de34378f89d", "patch": "@@ -14,7 +14,7 @@\n //! item-path. This is used for unit testing the code that generates\n //! paths etc in all kinds of annoying scenarios.\n \n-use common;\n+use rustc_trans_utils::common;\n use monomorphize::Instance;\n use rustc::hir;\n use rustc::hir::def_id::DefId;", "previous_filename": "src/librustc_trans_utils/trans_item.rs"}, {"sha": "6bd8034fe59d36099b4db367b93c0ec811af0f2f", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e579b067db3eb0ad44826f1767197de34378f89d/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e579b067db3eb0ad44826f1767197de34378f89d/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=e579b067db3eb0ad44826f1767197de34378f89d", "patch": "@@ -89,7 +89,7 @@ use syntax::ast;\n use mir::operand::OperandValue;\n \n pub use rustc_trans_utils::{find_exported_symbols, check_for_rustc_errors_attr};\n-pub use rustc_trans_utils::trans_item::linkage_by_name;\n+pub use rustc_mir::monomorphize::mono_item::linkage_by_name;\n \n pub struct StatRecorder<'a, 'tcx: 'a> {\n     ccx: &'a CrateContext<'a, 'tcx>,"}, {"sha": "bf25e74de8b12fad3f2f1e21d4ea6187837f2653", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e579b067db3eb0ad44826f1767197de34378f89d/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e579b067db3eb0ad44826f1767197de34378f89d/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=e579b067db3eb0ad44826f1767197de34378f89d", "patch": "@@ -85,7 +85,7 @@ use rustc::session::config::{OutputFilenames, OutputType};\n use rustc::ty::{self, TyCtxt};\n use rustc::util::nodemap::{FxHashSet, FxHashMap};\n \n-use rustc_trans_utils::monomorphize;\n+use rustc_mir::monomorphize;\n \n mod diagnostics;\n "}, {"sha": "7930643a4ac833fae5ff8236fd93f24e2e90f300", "filename": "src/librustc_trans/trans_item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e579b067db3eb0ad44826f1767197de34378f89d/src%2Flibrustc_trans%2Ftrans_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e579b067db3eb0ad44826f1767197de34378f89d/src%2Flibrustc_trans%2Ftrans_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans_item.rs?ref=e579b067db3eb0ad44826f1767197de34378f89d", "patch": "@@ -36,8 +36,8 @@ use std::fmt;\n \n pub use rustc::middle::trans::TransItem;\n \n-pub use rustc_trans_utils::trans_item::*;\n-pub use rustc_trans_utils::trans_item::TransItemExt as BaseTransItemExt;\n+pub use rustc_mir::monomorphize::mono_item::*;\n+pub use rustc_mir::monomorphize::mono_item::TransItemExt as BaseTransItemExt;\n \n pub trait TransItemExt<'a, 'tcx>: fmt::Debug + BaseTransItemExt<'a, 'tcx> {\n     fn define(&self, ccx: &CrateContext<'a, 'tcx>) {"}, {"sha": "6de8aa765777a8e5a67b923d00c4956e6d0de5ef", "filename": "src/librustc_trans_utils/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e579b067db3eb0ad44826f1767197de34378f89d/src%2Flibrustc_trans_utils%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e579b067db3eb0ad44826f1767197de34378f89d/src%2Flibrustc_trans_utils%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans_utils%2Flib.rs?ref=e579b067db3eb0ad44826f1767197de34378f89d", "patch": "@@ -46,8 +46,6 @@ use rustc::util::nodemap::NodeSet;\n \n pub mod common;\n pub mod link;\n-pub mod trans_item;\n-pub mod monomorphize;\n pub mod trans_crate;\n \n /// check for the #[rustc_error] annotation, which forces an"}, {"sha": "d586d1ac31506aa63676a5350435b1e9085424e2", "filename": "src/librustc_trans_utils/monomorphize.rs", "status": "removed", "additions": 0, "deletions": 127, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/094c02121843402465714003eec9501962570720/src%2Flibrustc_trans_utils%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/094c02121843402465714003eec9501962570720/src%2Flibrustc_trans_utils%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans_utils%2Fmonomorphize.rs?ref=094c02121843402465714003eec9501962570720", "patch": "@@ -1,127 +0,0 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-use rustc::hir::def_id::DefId;\n-use rustc::middle::lang_items::DropInPlaceFnLangItem;\n-use rustc::traits;\n-use rustc::ty::adjustment::CustomCoerceUnsized;\n-use rustc::ty::subst::Kind;\n-use rustc::ty::{self, Ty, TyCtxt};\n-\n-pub use rustc::ty::Instance;\n-\n-fn fn_once_adapter_instance<'a, 'tcx>(\n-    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    closure_did: DefId,\n-    substs: ty::ClosureSubsts<'tcx>,\n-    ) -> Instance<'tcx> {\n-    debug!(\"fn_once_adapter_shim({:?}, {:?})\",\n-           closure_did,\n-           substs);\n-    let fn_once = tcx.lang_items().fn_once_trait().unwrap();\n-    let call_once = tcx.associated_items(fn_once)\n-        .find(|it| it.kind == ty::AssociatedKind::Method)\n-        .unwrap().def_id;\n-    let def = ty::InstanceDef::ClosureOnceShim { call_once };\n-\n-    let self_ty = tcx.mk_closure_from_closure_substs(\n-        closure_did, substs);\n-\n-    let sig = substs.closure_sig(closure_did, tcx);\n-    let sig = tcx.erase_late_bound_regions_and_normalize(&sig);\n-    assert_eq!(sig.inputs().len(), 1);\n-    let substs = tcx.mk_substs([\n-        Kind::from(self_ty),\n-        Kind::from(sig.inputs()[0]),\n-    ].iter().cloned());\n-\n-    debug!(\"fn_once_adapter_shim: self_ty={:?} sig={:?}\", self_ty, sig);\n-    Instance { def, substs }\n-}\n-\n-fn needs_fn_once_adapter_shim(actual_closure_kind: ty::ClosureKind,\n-                              trait_closure_kind: ty::ClosureKind)\n-                              -> Result<bool, ()>\n-{\n-    match (actual_closure_kind, trait_closure_kind) {\n-        (ty::ClosureKind::Fn, ty::ClosureKind::Fn) |\n-        (ty::ClosureKind::FnMut, ty::ClosureKind::FnMut) |\n-        (ty::ClosureKind::FnOnce, ty::ClosureKind::FnOnce) => {\n-            // No adapter needed.\n-           Ok(false)\n-        }\n-        (ty::ClosureKind::Fn, ty::ClosureKind::FnMut) => {\n-            // The closure fn `llfn` is a `fn(&self, ...)`.  We want a\n-            // `fn(&mut self, ...)`. In fact, at trans time, these are\n-            // basically the same thing, so we can just return llfn.\n-            Ok(false)\n-        }\n-        (ty::ClosureKind::Fn, ty::ClosureKind::FnOnce) |\n-        (ty::ClosureKind::FnMut, ty::ClosureKind::FnOnce) => {\n-            // The closure fn `llfn` is a `fn(&self, ...)` or `fn(&mut\n-            // self, ...)`.  We want a `fn(self, ...)`. We can produce\n-            // this by doing something like:\n-            //\n-            //     fn call_once(self, ...) { call_mut(&self, ...) }\n-            //     fn call_once(mut self, ...) { call_mut(&mut self, ...) }\n-            //\n-            // These are both the same at trans time.\n-            Ok(true)\n-        }\n-        _ => Err(()),\n-    }\n-}\n-\n-pub fn resolve_closure<'a, 'tcx> (\n-    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    def_id: DefId,\n-    substs: ty::ClosureSubsts<'tcx>,\n-    requested_kind: ty::ClosureKind)\n-    -> Instance<'tcx>\n-{\n-    let actual_kind = substs.closure_kind(def_id, tcx);\n-\n-    match needs_fn_once_adapter_shim(actual_kind, requested_kind) {\n-        Ok(true) => fn_once_adapter_instance(tcx, def_id, substs),\n-        _ => Instance::new(def_id, substs.substs)\n-    }\n-}\n-\n-pub fn resolve_drop_in_place<'a, 'tcx>(\n-    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    ty: Ty<'tcx>)\n-    -> ty::Instance<'tcx>\n-{\n-    let def_id = tcx.require_lang_item(DropInPlaceFnLangItem);\n-    let substs = tcx.intern_substs(&[Kind::from(ty)]);\n-    Instance::resolve(tcx, ty::ParamEnv::empty(traits::Reveal::All), def_id, substs).unwrap()\n-}\n-\n-pub fn custom_coerce_unsize_info<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                           source_ty: Ty<'tcx>,\n-                                           target_ty: Ty<'tcx>)\n-                                           -> CustomCoerceUnsized {\n-    let def_id = tcx.lang_items().coerce_unsized_trait().unwrap();\n-\n-    let trait_ref = ty::Binder(ty::TraitRef {\n-        def_id: def_id,\n-        substs: tcx.mk_substs_trait(source_ty, &[target_ty])\n-    });\n-\n-    match tcx.trans_fulfill_obligation( (ty::ParamEnv::empty(traits::Reveal::All), trait_ref)) {\n-        traits::VtableImpl(traits::VtableImplData { impl_def_id, .. }) => {\n-            tcx.coerce_unsized_info(impl_def_id).custom_kind.unwrap()\n-        }\n-        vtable => {\n-            bug!(\"invalid CoerceUnsized vtable: {:?}\", vtable);\n-        }\n-    }\n-}\n-"}]}