{"sha": "c17628be18b1c99b1cb4c78b28670068da0f2fc4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxNzYyOGJlMThiMWM5OWIxY2I0Yzc4YjI4NjcwMDY4ZGEwZjJmYzQ=", "commit": {"author": {"name": "Stefan Schindler", "email": "dns2utf8@estada.ch", "date": "2021-08-09T20:34:44Z"}, "committer": {"name": "Stefan Schindler", "email": "dns2utf8@estada.ch", "date": "2021-08-09T22:47:05Z"}, "message": "Implement summarised results", "tree": {"sha": "0f91b3d703e2fc5e8b41418d48a16f6c05677206", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f91b3d703e2fc5e8b41418d48a16f6c05677206"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c17628be18b1c99b1cb4c78b28670068da0f2fc4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c17628be18b1c99b1cb4c78b28670068da0f2fc4", "html_url": "https://github.com/rust-lang/rust/commit/c17628be18b1c99b1cb4c78b28670068da0f2fc4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c17628be18b1c99b1cb4c78b28670068da0f2fc4/comments", "author": {"login": "dns2utf8", "id": 739070, "node_id": "MDQ6VXNlcjczOTA3MA==", "avatar_url": "https://avatars.githubusercontent.com/u/739070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dns2utf8", "html_url": "https://github.com/dns2utf8", "followers_url": "https://api.github.com/users/dns2utf8/followers", "following_url": "https://api.github.com/users/dns2utf8/following{/other_user}", "gists_url": "https://api.github.com/users/dns2utf8/gists{/gist_id}", "starred_url": "https://api.github.com/users/dns2utf8/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dns2utf8/subscriptions", "organizations_url": "https://api.github.com/users/dns2utf8/orgs", "repos_url": "https://api.github.com/users/dns2utf8/repos", "events_url": "https://api.github.com/users/dns2utf8/events{/privacy}", "received_events_url": "https://api.github.com/users/dns2utf8/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dns2utf8", "id": 739070, "node_id": "MDQ6VXNlcjczOTA3MA==", "avatar_url": "https://avatars.githubusercontent.com/u/739070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dns2utf8", "html_url": "https://github.com/dns2utf8", "followers_url": "https://api.github.com/users/dns2utf8/followers", "following_url": "https://api.github.com/users/dns2utf8/following{/other_user}", "gists_url": "https://api.github.com/users/dns2utf8/gists{/gist_id}", "starred_url": "https://api.github.com/users/dns2utf8/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dns2utf8/subscriptions", "organizations_url": "https://api.github.com/users/dns2utf8/orgs", "repos_url": "https://api.github.com/users/dns2utf8/repos", "events_url": "https://api.github.com/users/dns2utf8/events{/privacy}", "received_events_url": "https://api.github.com/users/dns2utf8/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eca2b3be3d7d52cb03277fb86e57cf3bc969694a", "url": "https://api.github.com/repos/rust-lang/rust/commits/eca2b3be3d7d52cb03277fb86e57cf3bc969694a", "html_url": "https://github.com/rust-lang/rust/commit/eca2b3be3d7d52cb03277fb86e57cf3bc969694a"}], "stats": {"total": 91, "additions": 54, "deletions": 37}, "files": [{"sha": "92535f34178395bf494a9afef198efd8d69b28d3", "filename": "src/tools/rustdoc-gui/tester.js", "status": "modified", "additions": 54, "deletions": 37, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/c17628be18b1c99b1cb4c78b28670068da0f2fc4/src%2Ftools%2Frustdoc-gui%2Ftester.js", "raw_url": "https://github.com/rust-lang/rust/raw/c17628be18b1c99b1cb4c78b28670068da0f2fc4/src%2Ftools%2Frustdoc-gui%2Ftester.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-gui%2Ftester.js?ref=c17628be18b1c99b1cb4c78b28670068da0f2fc4", "patch": "@@ -70,12 +70,33 @@ function parseOptions(args) {\n     return null;\n }\n \n-function print_test_successful() {\n-    process.stdout.write(\".\");\n+/// Print single char status information without \\n\n+function char_printer(n_tests) {\n+    const max_per_line = 10;\n+    let current = 0;\n+    return {\n+        successful: function() {\n+            current += 1;\n+            if (current % max_per_line === 0) {\n+                process.stdout.write(`. (${current}/${n_tests})\\n`);\n+            } else {\n+                process.stdout.write(\".\");\n+            }\n+        },\n+        erroneous: function() {\n+            current += 1;\n+            if (current % max_per_line === 0) {\n+                process.stderr.write(`F (${current}/${n_tests})\\n`);\n+            } else {\n+                process.stderr.write(\"F\");\n+            }\n+        },\n+    };\n }\n \n-function print_test_erroneous() {\n-    process.stderr.write(\"F\");\n+/// Sort array by .file_name property\n+function by_filename(a, b) {\n+    return a.file_name - b.file_name;\n }\n \n async function main(argv) {\n@@ -129,32 +150,36 @@ async function main(argv) {\n     console.log(`Running ${files.length} rustdoc-gui tests...`);\n     process.setMaxListeners(files.length + 1);\n     let tests = [];\n-    let results = new Array(files.length);\n-    // poormans enum\n-    const RUN_SUCCESS = 42, RUN_FAILED = 23, RUN_ERRORED = 13;\n+    let results = {\n+        successful: [],\n+        failed: [],\n+        errored: [],\n+    };\n+    const status_bar = char_printer(files.length);\n     for (let i = 0; i < files.length; ++i) {\n-        const testPath = path.join(opts[\"tests_folder\"], files[i]);\n+        const file_name = files[i];\n+        const testPath = path.join(opts[\"tests_folder\"], file_name);\n         tests.push(\n             runTest(testPath, options)\n             .then(out => {\n                 const [output, nb_failures] = out;\n-                results[i] = {\n-                    status: nb_failures === 0 ? RUN_SUCCESS : RUN_FAILED,\n+                results[nb_failures === 0 ? \"successful\" : \"failed\"].push({\n+                    file_name: file_name,\n                     output: output,\n-                };\n+                });\n                 if (nb_failures > 0) {\n-                    print_test_erroneous()\n+                    status_bar.erroneous()\n                     failed = true;\n                 } else {\n-                    print_test_successful()\n+                    status_bar.successful()\n                 }\n             })\n             .catch(err => {\n-                results[i] = {\n-                    status: RUN_ERRORED,\n+                results.errored.push({\n+                    file_name: file_name,\n                     output: err,\n-                };\n-                print_test_erroneous();\n+                });\n+                status_bar.erroneous();\n                 failed = true;\n             })\n         );\n@@ -166,28 +191,20 @@ async function main(argv) {\n     // final \\n after the tests\n     console.log(\"\\n\");\n \n-    results.forEach(r => {\n-        switch (r.status) {\n-            case RUN_SUCCESS:\n-                if (debug === false) {\n-                    break;\n-                }\n-            case RUN_FAILED:\n-                console.log(r.output);\n-                break;\n-            case RUN_ERRORED:\n-                // skip\n-                break;\n-            default:\n-                console.error(`unexpected status = ${r.status}`);\n-                process.exit(4);\n-        }\n+    if (debug === false) {\n+        results.successful.sort(by_filename);\n+        results.successful.forEach(r => {\n+            console.log(r.output);\n+        });\n+    }\n+    results.failed.sort(by_filename);\n+    results.failed.forEach(r => {\n+        console.log(r.output);\n     });\n     // print run errors on the bottom so developers see them better\n-    results.forEach(r => {\n-        if (r.status === RUN_ERRORED) {\n-            console.error(r.output);\n-        }\n+    results.errored.sort(by_filename);\n+    results.errored.forEach(r => {\n+        console.error(r.output);\n     });\n \n     if (failed) {"}]}