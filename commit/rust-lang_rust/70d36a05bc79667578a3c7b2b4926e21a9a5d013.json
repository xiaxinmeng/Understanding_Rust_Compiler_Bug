{"sha": "70d36a05bc79667578a3c7b2b4926e21a9a5d013", "node_id": "C_kwDOAAsO6NoAKDcwZDM2YTA1YmM3OTY2NzU3OGEzYzdiMmI0OTI2ZTIxYTlhNWQwMTM", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2022-01-19T22:36:44Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2022-01-19T22:36:44Z"}, "message": "Show a more informative panic message when `DefPathHash` does not exist\n\nThis should hopefully make it easier to debug incremental compilation\nbugs like #93096 without affecting performance.", "tree": {"sha": "b990459b91653577c32e4b3c9ab1cfa762650eea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b990459b91653577c32e4b3c9ab1cfa762650eea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70d36a05bc79667578a3c7b2b4926e21a9a5d013", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAmHokqkACgkQtAh+UQ6Y\nsWTCuA//W+M0j7Fh0eOlXDvf5X4XJUX+BaHF7e0SHpNlM8USrE/8x07ftVRVuF8R\nfy46JEFfa2sRNaBfqf/dr33686g1/iTJQrAfSReE5oUE1LZJfChUvhGG+BEomsxp\nu0mlkrNL9mu22fUva55uND5vyA/C2Z7XaiaUaHqe6Ilw3llwfsbOtVRMRHxMe4DP\n8lyjI6dIGZuN6nCWQ5llu/zt1jovvjZQI/tQ+msi5ceZAoQDyR5Q6ix+McsCZfJo\n1SlaWTPTEWbo8I3y03O8wO4UhAJYGEFXoIGlJZsLS2YoGszSqgrvhL+Nk69VzhuL\nwcBJYWzhgW0rjt0XlbmALonAvg2f7o0R60F5SVeIbRu97nGMzEjAEMa1fduQYwwL\n6DTygUCyWaF3+si/Xsr+A9XwpW7YDxH63+cuFZZYZZ3KIx9iSpAKoFl9wjut9oCM\nUz8/TVMRy+qYPpk38d2XGULWYBbkiFe24DPXhjTtxoVSIEETl5rcz5Y/b2E1DegM\nRFAZ6pInuysAd08PV7zzh8RSTQM3oHZZCDLP71tdZXx0C2zWCphiFOR9iTcXYyaL\nn4R+GUqRTed0jPp4XqDBGg4K5g3+ATYgzjsLxUCN2ZgujxwtKMB8LuWOUQEM9Ih/\n9nOV3bXG13pESgPAOtiYubRgimZgcgSd3GFZHEQh7EaR87K0+Bg=\n=Wa3U\n-----END PGP SIGNATURE-----", "payload": "tree b990459b91653577c32e4b3c9ab1cfa762650eea\nparent 5e57faa78aa7661c6000204591558f6665f11abc\nauthor Aaron Hill <aa1ronham@gmail.com> 1642631804 -0500\ncommitter Aaron Hill <aa1ronham@gmail.com> 1642631804 -0500\n\nShow a more informative panic message when `DefPathHash` does not exist\n\nThis should hopefully make it easier to debug incremental compilation\nbugs like #93096 without affecting performance.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70d36a05bc79667578a3c7b2b4926e21a9a5d013", "html_url": "https://github.com/rust-lang/rust/commit/70d36a05bc79667578a3c7b2b4926e21a9a5d013", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70d36a05bc79667578a3c7b2b4926e21a9a5d013/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e57faa78aa7661c6000204591558f6665f11abc", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e57faa78aa7661c6000204591558f6665f11abc", "html_url": "https://github.com/rust-lang/rust/commit/5e57faa78aa7661c6000204591558f6665f11abc"}], "stats": {"total": 23, "additions": 17, "deletions": 6}, "files": [{"sha": "e839f7fc7779a6763ff53369a87c2747f2076d7f", "filename": "compiler/rustc_hir/src/definitions.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/70d36a05bc79667578a3c7b2b4926e21a9a5d013/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70d36a05bc79667578a3c7b2b4926e21a9a5d013/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs?ref=70d36a05bc79667578a3c7b2b4926e21a9a5d013", "patch": "@@ -449,13 +449,17 @@ impl Definitions {\n     }\n \n     #[inline(always)]\n-    pub fn local_def_path_hash_to_def_id(&self, hash: DefPathHash) -> LocalDefId {\n+    pub fn local_def_path_hash_to_def_id(\n+        &self,\n+        hash: DefPathHash,\n+        err: &mut dyn FnMut() -> !,\n+    ) -> LocalDefId {\n         debug_assert!(hash.stable_crate_id() == self.stable_crate_id);\n         self.table\n             .def_path_hash_to_index\n             .get(&hash)\n             .map(|local_def_index| LocalDefId { local_def_index })\n-            .unwrap()\n+            .unwrap_or_else(|| err())\n     }\n \n     pub fn def_path_hash_to_def_index_map(&self) -> &DefPathHashMap {"}, {"sha": "d20be0a34d2d5f525f456c9c604d3426678e8d2f", "filename": "compiler/rustc_middle/src/dep_graph/dep_node.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70d36a05bc79667578a3c7b2b4926e21a9a5d013/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70d36a05bc79667578a3c7b2b4926e21a9a5d013/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs?ref=70d36a05bc79667578a3c7b2b4926e21a9a5d013", "patch": "@@ -266,7 +266,9 @@ impl DepNodeExt for DepNode {\n     /// has been removed.\n     fn extract_def_id<'tcx>(&self, tcx: TyCtxt<'tcx>) -> Option<DefId> {\n         if self.kind.fingerprint_style(tcx) == FingerprintStyle::DefPathHash {\n-            Some(tcx.def_path_hash_to_def_id(DefPathHash(self.hash.into())))\n+            Some(tcx.def_path_hash_to_def_id(DefPathHash(self.hash.into()), &mut || {\n+                panic!(\"Failed to extract DefId: {:?} {}\", self.kind, self.hash)\n+            }))\n         } else {\n             None\n         }"}, {"sha": "b493ff16203801bf6fbd3496b384f7af9230600b", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/70d36a05bc79667578a3c7b2b4926e21a9a5d013/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70d36a05bc79667578a3c7b2b4926e21a9a5d013/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=70d36a05bc79667578a3c7b2b4926e21a9a5d013", "patch": "@@ -1308,15 +1308,18 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// Converts a `DefPathHash` to its corresponding `DefId` in the current compilation\n     /// session, if it still exists. This is used during incremental compilation to\n     /// turn a deserialized `DefPathHash` into its current `DefId`.\n-    pub fn def_path_hash_to_def_id(self, hash: DefPathHash) -> DefId {\n+    pub fn def_path_hash_to_def_id(self, hash: DefPathHash, err: &mut dyn FnMut() -> !) -> DefId {\n         debug!(\"def_path_hash_to_def_id({:?})\", hash);\n \n         let stable_crate_id = hash.stable_crate_id();\n \n         // If this is a DefPathHash from the local crate, we can look up the\n         // DefId in the tcx's `Definitions`.\n         if stable_crate_id == self.sess.local_stable_crate_id() {\n-            self.untracked_resolutions.definitions.local_def_path_hash_to_def_id(hash).to_def_id()\n+            self.untracked_resolutions\n+                .definitions\n+                .local_def_path_hash_to_def_id(hash, err)\n+                .to_def_id()\n         } else {\n             // If this is a DefPathHash from an upstream crate, let the CrateStore map\n             // it to a DefId."}, {"sha": "5f6d9b050b2e54442546faf071c2177b316469dd", "filename": "compiler/rustc_query_impl/src/on_disk_cache.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70d36a05bc79667578a3c7b2b4926e21a9a5d013/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70d36a05bc79667578a3c7b2b4926e21a9a5d013/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs?ref=70d36a05bc79667578a3c7b2b4926e21a9a5d013", "patch": "@@ -761,7 +761,9 @@ impl<'a, 'tcx> Decodable<CacheDecoder<'a, 'tcx>> for DefId {\n         // If we get to this point, then all of the query inputs were green,\n         // which means that the definition with this hash is guaranteed to\n         // still exist in the current compilation session.\n-        Ok(d.tcx().def_path_hash_to_def_id(def_path_hash))\n+        Ok(d.tcx().def_path_hash_to_def_id(def_path_hash, &mut || {\n+            panic!(\"Failed to convert DefPathHash {:?}\", def_path_hash)\n+        }))\n     }\n }\n "}]}