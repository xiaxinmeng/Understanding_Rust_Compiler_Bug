{"sha": "88ea7e5234bff0c4fcf5859aa6d5dd8d0608b853", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4ZWE3ZTUyMzRiZmYwYzRmY2Y1ODU5YWE2ZDVkZDhkMDYwOGI4NTM=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-06-01T17:58:18Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-06-10T08:05:52Z"}, "message": "Use min_specialization in the remaining rustc crates", "tree": {"sha": "f8d0910ee3c4de7e013bd894bd8c7fb6c2a9b2a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8d0910ee3c4de7e013bd894bd8c7fb6c2a9b2a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88ea7e5234bff0c4fcf5859aa6d5dd8d0608b853", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88ea7e5234bff0c4fcf5859aa6d5dd8d0608b853", "html_url": "https://github.com/rust-lang/rust/commit/88ea7e5234bff0c4fcf5859aa6d5dd8d0608b853", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88ea7e5234bff0c4fcf5859aa6d5dd8d0608b853/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "feb3536eba10c2e4585d066629598f03d5ddc7c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/feb3536eba10c2e4585d066629598f03d5ddc7c6", "html_url": "https://github.com/rust-lang/rust/commit/feb3536eba10c2e4585d066629598f03d5ddc7c6"}], "stats": {"total": 621, "additions": 373, "deletions": 248}, "files": [{"sha": "4ea5ec3c1de8215a5afbef033faa2350d16a5c9d", "filename": "src/librustc_arena/lib.rs", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/88ea7e5234bff0c4fcf5859aa6d5dd8d0608b853/src%2Flibrustc_arena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88ea7e5234bff0c4fcf5859aa6d5dd8d0608b853/src%2Flibrustc_arena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_arena%2Flib.rs?ref=88ea7e5234bff0c4fcf5859aa6d5dd8d0608b853", "patch": "@@ -610,7 +610,7 @@ macro_rules! which_arena_for_type {\n \n #[macro_export]\n macro_rules! declare_arena {\n-    ([], [$($a:tt $name:ident: $ty:ty,)*], $tcx:lifetime) => {\n+    ([], [$($a:tt $name:ident: $ty:ty, $gen_ty:ty;)*], $tcx:lifetime) => {\n         #[derive(Default)]\n         pub struct Arena<$tcx> {\n             pub dropless: $crate::DroplessArena,\n@@ -619,17 +619,17 @@ macro_rules! declare_arena {\n         }\n \n         #[marker]\n-        pub trait ArenaAllocatable {}\n+        pub trait ArenaAllocatable<'tcx> {}\n \n-        impl<T: Copy> ArenaAllocatable for T {}\n+        impl<'tcx, T: Copy> ArenaAllocatable<'tcx> for T {}\n \n-        unsafe trait ArenaField<'tcx>: Sized {\n+        unsafe trait ArenaField<'tcx>: Sized + ArenaAllocatable<'tcx> {\n             /// Returns a specific arena to allocate from.\n             /// If `None` is returned, the `DropArena` will be used.\n             fn arena<'a>(arena: &'a Arena<'tcx>) -> Option<&'a $crate::TypedArena<Self>>;\n         }\n \n-        unsafe impl<'tcx, T> ArenaField<'tcx> for T {\n+        unsafe impl<'tcx, T: ArenaAllocatable<'tcx>> ArenaField<'tcx> for T {\n             #[inline]\n             default fn arena<'a>(_: &'a Arena<'tcx>) -> Option<&'a $crate::TypedArena<Self>> {\n                 panic!()\n@@ -638,18 +638,27 @@ macro_rules! declare_arena {\n \n         $(\n             #[allow(unused_lifetimes)]\n-            impl<$tcx> ArenaAllocatable for $ty {}\n-            unsafe impl<$tcx> ArenaField<$tcx> for $ty {\n+            impl<$tcx> ArenaAllocatable<$tcx> for $ty {}\n+            unsafe impl<$tcx, '_x, '_y, '_z, '_w> ArenaField<$tcx> for $gen_ty where Self: ArenaAllocatable<$tcx> {\n                 #[inline]\n                 fn arena<'a>(_arena: &'a Arena<$tcx>) -> Option<&'a $crate::TypedArena<Self>> {\n-                    $crate::which_arena_for_type!($a[&_arena.$name])\n+                    // SAFETY: We only implement `ArenaAllocatable<$tcx>` for\n+                    // `$ty`, so `$ty` and Self are the same type\n+                    unsafe {\n+                        ::std::mem::transmute::<\n+                            Option<&'a $crate::TypedArena<$ty>>,\n+                            Option<&'a $crate::TypedArena<Self>>,\n+                        >(\n+                            $crate::which_arena_for_type!($a[&_arena.$name])\n+                        )\n+                    }\n                 }\n             }\n         )*\n \n         impl<'tcx> Arena<'tcx> {\n             #[inline]\n-            pub fn alloc<T: ArenaAllocatable>(&self, value: T) -> &mut T {\n+            pub fn alloc<T: ArenaAllocatable<'tcx>>(&self, value: T) -> &mut T {\n                 if !::std::mem::needs_drop::<T>() {\n                     return self.dropless.alloc(value);\n                 }\n@@ -667,7 +676,7 @@ macro_rules! declare_arena {\n                 self.dropless.alloc_slice(value)\n             }\n \n-            pub fn alloc_from_iter<'a, T: ArenaAllocatable>(\n+            pub fn alloc_from_iter<'a, T: ArenaAllocatable<'tcx>>(\n                 &'a self,\n                 iter: impl ::std::iter::IntoIterator<Item = T>,\n             ) -> &'a mut [T] {"}, {"sha": "7b1535351262a6139c7775e7e864dd945628be7a", "filename": "src/librustc_ast_lowering/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88ea7e5234bff0c4fcf5859aa6d5dd8d0608b853/src%2Flibrustc_ast_lowering%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88ea7e5234bff0c4fcf5859aa6d5dd8d0608b853/src%2Flibrustc_ast_lowering%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Flib.rs?ref=88ea7e5234bff0c4fcf5859aa6d5dd8d0608b853", "patch": "@@ -33,7 +33,7 @@\n #![feature(array_value_iter)]\n #![feature(crate_visibility_modifier)]\n #![feature(marker_trait_attr)]\n-#![feature(specialization)] // FIXME: min_specialization does not work\n+#![feature(min_specialization)]\n #![feature(or_patterns)]\n #![recursion_limit = \"256\"]\n "}, {"sha": "f439db715310cc1ac204ffffd302786b81e53aaf", "filename": "src/librustc_hir/arena.rs", "status": "modified", "additions": 35, "deletions": 35, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/88ea7e5234bff0c4fcf5859aa6d5dd8d0608b853/src%2Flibrustc_hir%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88ea7e5234bff0c4fcf5859aa6d5dd8d0608b853/src%2Flibrustc_hir%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Farena.rs?ref=88ea7e5234bff0c4fcf5859aa6d5dd8d0608b853", "patch": "@@ -12,41 +12,41 @@ macro_rules! arena_types {\n     ($macro:path, $args:tt, $tcx:lifetime) => (\n         $macro!($args, [\n             // HIR types\n-            [few] hir_krate: rustc_hir::Crate<$tcx>,\n-            [] arm: rustc_hir::Arm<$tcx>,\n-            [] asm_operand: rustc_hir::InlineAsmOperand<$tcx>,\n-            [] asm_template: rustc_ast::ast::InlineAsmTemplatePiece,\n-            [] attribute: rustc_ast::ast::Attribute,\n-            [] block: rustc_hir::Block<$tcx>,\n-            [] bare_fn_ty: rustc_hir::BareFnTy<$tcx>,\n-            [few] global_asm: rustc_hir::GlobalAsm,\n-            [] generic_arg: rustc_hir::GenericArg<$tcx>,\n-            [] generic_args: rustc_hir::GenericArgs<$tcx>,\n-            [] generic_bound: rustc_hir::GenericBound<$tcx>,\n-            [] generic_param: rustc_hir::GenericParam<$tcx>,\n-            [] expr: rustc_hir::Expr<$tcx>,\n-            [] field: rustc_hir::Field<$tcx>,\n-            [] field_pat: rustc_hir::FieldPat<$tcx>,\n-            [] fn_decl: rustc_hir::FnDecl<$tcx>,\n-            [] foreign_item: rustc_hir::ForeignItem<$tcx>,\n-            [] impl_item_ref: rustc_hir::ImplItemRef<$tcx>,\n-            [few] inline_asm: rustc_hir::InlineAsm<$tcx>,\n-            [few] llvm_inline_asm: rustc_hir::LlvmInlineAsm<$tcx>,\n-            [] local: rustc_hir::Local<$tcx>,\n-            [few] macro_def: rustc_hir::MacroDef<$tcx>,\n-            [] param: rustc_hir::Param<$tcx>,\n-            [] pat: rustc_hir::Pat<$tcx>,\n-            [] path: rustc_hir::Path<$tcx>,\n-            [] path_segment: rustc_hir::PathSegment<$tcx>,\n-            [] poly_trait_ref: rustc_hir::PolyTraitRef<$tcx>,\n-            [] qpath: rustc_hir::QPath<$tcx>,\n-            [] stmt: rustc_hir::Stmt<$tcx>,\n-            [] struct_field: rustc_hir::StructField<$tcx>,\n-            [] trait_item_ref: rustc_hir::TraitItemRef,\n-            [] ty: rustc_hir::Ty<$tcx>,\n-            [] type_binding: rustc_hir::TypeBinding<$tcx>,\n-            [] variant: rustc_hir::Variant<$tcx>,\n-            [] where_predicate: rustc_hir::WherePredicate<$tcx>,\n+            [few] hir_krate: rustc_hir::Crate<$tcx>, rustc_hir::Crate<'_x>;\n+            [] arm: rustc_hir::Arm<$tcx>, rustc_hir::Arm<'_x>;\n+            [] asm_operand: rustc_hir::InlineAsmOperand<$tcx>, rustc_hir::InlineAsmOperand<'_x>;\n+            [] asm_template: rustc_ast::ast::InlineAsmTemplatePiece, rustc_ast::ast::InlineAsmTemplatePiece;\n+            [] attribute: rustc_ast::ast::Attribute, rustc_ast::ast::Attribute;\n+            [] block: rustc_hir::Block<$tcx>, rustc_hir::Block<'_x>;\n+            [] bare_fn_ty: rustc_hir::BareFnTy<$tcx>, rustc_hir::BareFnTy<'_x>;\n+            [few] global_asm: rustc_hir::GlobalAsm, rustc_hir::GlobalAsm;\n+            [] generic_arg: rustc_hir::GenericArg<$tcx>, rustc_hir::GenericArg<'_x>;\n+            [] generic_args: rustc_hir::GenericArgs<$tcx>, rustc_hir::GenericArgs<'_x>;\n+            [] generic_bound: rustc_hir::GenericBound<$tcx>, rustc_hir::GenericBound<'_x>;\n+            [] generic_param: rustc_hir::GenericParam<$tcx>, rustc_hir::GenericParam<'_x>;\n+            [] expr: rustc_hir::Expr<$tcx>, rustc_hir::Expr<'_x>;\n+            [] field: rustc_hir::Field<$tcx>, rustc_hir::Field<'_x>;\n+            [] field_pat: rustc_hir::FieldPat<$tcx>, rustc_hir::FieldPat<'_x>;\n+            [] fn_decl: rustc_hir::FnDecl<$tcx>, rustc_hir::FnDecl<'_x>;\n+            [] foreign_item: rustc_hir::ForeignItem<$tcx>, rustc_hir::ForeignItem<'_x>;\n+            [] impl_item_ref: rustc_hir::ImplItemRef<$tcx>, rustc_hir::ImplItemRef<'_x>;\n+            [few] inline_asm: rustc_hir::InlineAsm<$tcx>, rustc_hir::InlineAsm<'_x>;\n+            [few] llvm_inline_asm: rustc_hir::LlvmInlineAsm<$tcx>, rustc_hir::LlvmInlineAsm<'_x>;\n+            [] local: rustc_hir::Local<$tcx>, rustc_hir::Local<'_x>;\n+            [few] macro_def: rustc_hir::MacroDef<$tcx>, rustc_hir::MacroDef<'_x>;\n+            [] param: rustc_hir::Param<$tcx>, rustc_hir::Param<'_x>;\n+            [] pat: rustc_hir::Pat<$tcx>, rustc_hir::Pat<'_x>;\n+            [] path: rustc_hir::Path<$tcx>, rustc_hir::Path<'_x>;\n+            [] path_segment: rustc_hir::PathSegment<$tcx>, rustc_hir::PathSegment<'_x>;\n+            [] poly_trait_ref: rustc_hir::PolyTraitRef<$tcx>, rustc_hir::PolyTraitRef<'_x>;\n+            [] qpath: rustc_hir::QPath<$tcx>, rustc_hir::QPath<'_x>;\n+            [] stmt: rustc_hir::Stmt<$tcx>, rustc_hir::Stmt<'_x>;\n+            [] struct_field: rustc_hir::StructField<$tcx>, rustc_hir::StructField<'_x>;\n+            [] trait_item_ref: rustc_hir::TraitItemRef, rustc_hir::TraitItemRef;\n+            [] ty: rustc_hir::Ty<$tcx>, rustc_hir::Ty<'_x>;\n+            [] type_binding: rustc_hir::TypeBinding<$tcx>, rustc_hir::TypeBinding<'_x>;\n+            [] variant: rustc_hir::Variant<$tcx>, rustc_hir::Variant<'_x>;\n+            [] where_predicate: rustc_hir::WherePredicate<$tcx>, rustc_hir::WherePredicate<'_x>;\n         ], $tcx);\n     )\n }"}, {"sha": "8af526e3ad31b31171753d27693d72764ac624d1", "filename": "src/librustc_infer/infer/canonical/query_response.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88ea7e5234bff0c4fcf5859aa6d5dd8d0608b853/src%2Flibrustc_infer%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88ea7e5234bff0c4fcf5859aa6d5dd8d0608b853/src%2Flibrustc_infer%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fcanonical%2Fquery_response.rs?ref=88ea7e5234bff0c4fcf5859aa6d5dd8d0608b853", "patch": "@@ -56,7 +56,7 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n     ) -> Fallible<CanonicalizedQueryResponse<'tcx, T>>\n     where\n         T: Debug + TypeFoldable<'tcx>,\n-        Canonical<'tcx, QueryResponse<'tcx, T>>: ArenaAllocatable,\n+        Canonical<'tcx, QueryResponse<'tcx, T>>: ArenaAllocatable<'tcx>,\n     {\n         let query_response = self.make_query_response(inference_vars, answer, fulfill_cx)?;\n         let canonical_result = self.canonicalize_response(&query_response);"}, {"sha": "c17d5311e8fe6393d23de5e463abf7fc70588d13", "filename": "src/librustc_macros/src/query.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88ea7e5234bff0c4fcf5859aa6d5dd8d0608b853/src%2Flibrustc_macros%2Fsrc%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88ea7e5234bff0c4fcf5859aa6d5dd8d0608b853/src%2Flibrustc_macros%2Fsrc%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_macros%2Fsrc%2Fquery.rs?ref=88ea7e5234bff0c4fcf5859aa6d5dd8d0608b853", "patch": "@@ -433,7 +433,7 @@ pub fn rustc_queries(input: TokenStream) -> TokenStream {\n \n                 try_load_from_on_disk_cache_stream.extend(quote! {\n                     ::rustc_middle::dep_graph::DepKind::#name => {\n-                        if <#arg as DepNodeParams<TyCtxt<'_>>>::CAN_RECONSTRUCT_QUERY_KEY {\n+                        if <#arg as DepNodeParams<TyCtxt<'_>>>::can_reconstruct_query_key() {\n                             debug_assert!($tcx.dep_graph\n                                             .node_color($dep_node)\n                                             .map(|c| c.is_green())\n@@ -490,7 +490,7 @@ pub fn rustc_queries(input: TokenStream) -> TokenStream {\n             // Add a match arm to force the query given the dep node\n             dep_node_force_stream.extend(quote! {\n                 ::rustc_middle::dep_graph::DepKind::#name => {\n-                    if <#arg as DepNodeParams<TyCtxt<'_>>>::CAN_RECONSTRUCT_QUERY_KEY {\n+                    if <#arg as DepNodeParams<TyCtxt<'_>>>::can_reconstruct_query_key() {\n                         if let Some(key) = <#arg as DepNodeParams<TyCtxt<'_>>>::recover($tcx, $dep_node) {\n                             force_query::<crate::ty::query::queries::#name<'_>, _>(\n                                 $tcx,"}, {"sha": "76e39a476c6d89f73507f29525a488c62a8e5e67", "filename": "src/librustc_metadata/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88ea7e5234bff0c4fcf5859aa6d5dd8d0608b853/src%2Flibrustc_metadata%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88ea7e5234bff0c4fcf5859aa6d5dd8d0608b853/src%2Flibrustc_metadata%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flib.rs?ref=88ea7e5234bff0c4fcf5859aa6d5dd8d0608b853", "patch": "@@ -7,7 +7,7 @@\n #![feature(nll)]\n #![feature(or_patterns)]\n #![feature(proc_macro_internals)]\n-#![feature(specialization)] // FIXME: min_specialization ICEs\n+#![feature(min_specialization)]\n #![feature(stmt_expr_attributes)]\n #![recursion_limit = \"256\"]\n "}, {"sha": "fdb5daa9855296382b0599218974505a726b7f6a", "filename": "src/librustc_metadata/rmeta/decoder.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/88ea7e5234bff0c4fcf5859aa6d5dd8d0608b853/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88ea7e5234bff0c4fcf5859aa6d5dd8d0608b853/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs?ref=88ea7e5234bff0c4fcf5859aa6d5dd8d0608b853", "patch": "@@ -30,7 +30,7 @@ use rustc_middle::mir::{self, interpret, Body, Promoted};\n use rustc_middle::ty::codec::TyDecoder;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_middle::util::common::record_time;\n-use rustc_serialize::{opaque, Decodable, Decoder, SpecializedDecoder};\n+use rustc_serialize::{opaque, Decodable, Decoder, SpecializedDecoder, UseSpecializedDecodable};\n use rustc_session::Session;\n use rustc_span::source_map::{respan, Spanned};\n use rustc_span::symbol::{sym, Ident, Symbol};\n@@ -218,15 +218,15 @@ impl<'a, 'tcx> Metadata<'a, 'tcx> for (&'a CrateMetadataRef<'a>, TyCtxt<'tcx>) {\n     }\n }\n \n-impl<'a, 'tcx, T: Decodable> Lazy<T> {\n+impl<'a, 'tcx, T: Decodable> Lazy<T, ()> {\n     fn decode<M: Metadata<'a, 'tcx>>(self, metadata: M) -> T {\n         let mut dcx = metadata.decoder(self.position.get());\n         dcx.lazy_state = LazyState::NodeStart(self.position);\n         T::decode(&mut dcx).unwrap()\n     }\n }\n \n-impl<'a: 'x, 'tcx: 'x, 'x, T: Decodable> Lazy<[T]> {\n+impl<'a: 'x, 'tcx: 'x, 'x, T: Decodable> Lazy<[T], usize> {\n     fn decode<M: Metadata<'a, 'tcx>>(\n         self,\n         metadata: M,\n@@ -321,20 +321,20 @@ impl<'a, 'tcx> TyDecoder<'tcx> for DecodeContext<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx, T> SpecializedDecoder<Lazy<T>> for DecodeContext<'a, 'tcx> {\n+impl<'a, 'tcx, T> SpecializedDecoder<Lazy<T, ()>> for DecodeContext<'a, 'tcx> {\n     fn specialized_decode(&mut self) -> Result<Lazy<T>, Self::Error> {\n         self.read_lazy_with_meta(())\n     }\n }\n \n-impl<'a, 'tcx, T> SpecializedDecoder<Lazy<[T]>> for DecodeContext<'a, 'tcx> {\n+impl<'a, 'tcx, T> SpecializedDecoder<Lazy<[T], usize>> for DecodeContext<'a, 'tcx> {\n     fn specialized_decode(&mut self) -> Result<Lazy<[T]>, Self::Error> {\n         let len = self.read_usize()?;\n         if len == 0 { Ok(Lazy::empty()) } else { self.read_lazy_with_meta(len) }\n     }\n }\n \n-impl<'a, 'tcx, I: Idx, T> SpecializedDecoder<Lazy<Table<I, T>>> for DecodeContext<'a, 'tcx>\n+impl<'a, 'tcx, I: Idx, T> SpecializedDecoder<Lazy<Table<I, T>, usize>> for DecodeContext<'a, 'tcx>\n where\n     Option<T>: FixedSizeEncoding,\n {\n@@ -515,8 +515,9 @@ impl<'a, 'tcx> SpecializedDecoder<Fingerprint> for DecodeContext<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx, T: Decodable> SpecializedDecoder<mir::ClearCrossCrate<T>>\n-    for DecodeContext<'a, 'tcx>\n+impl<'a, 'tcx, T> SpecializedDecoder<mir::ClearCrossCrate<T>> for DecodeContext<'a, 'tcx>\n+where\n+    mir::ClearCrossCrate<T>: UseSpecializedDecodable,\n {\n     #[inline]\n     fn specialized_decode(&mut self) -> Result<mir::ClearCrossCrate<T>, Self::Error> {"}, {"sha": "1258e02bcd4bcb0a68241ce9ac384445fa91126f", "filename": "src/librustc_metadata/rmeta/encoder.rs", "status": "modified", "additions": 25, "deletions": 10, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/88ea7e5234bff0c4fcf5859aa6d5dd8d0608b853/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88ea7e5234bff0c4fcf5859aa6d5dd8d0608b853/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs?ref=88ea7e5234bff0c4fcf5859aa6d5dd8d0608b853", "patch": "@@ -27,7 +27,7 @@ use rustc_middle::mir::{self, interpret};\n use rustc_middle::traits::specialization_graph;\n use rustc_middle::ty::codec::{self as ty_codec, TyEncoder};\n use rustc_middle::ty::{self, SymbolName, Ty, TyCtxt};\n-use rustc_serialize::{opaque, Encodable, Encoder, SpecializedEncoder};\n+use rustc_serialize::{opaque, Encodable, Encoder, SpecializedEncoder, UseSpecializedEncodable};\n use rustc_session::config::CrateType;\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n@@ -93,13 +93,13 @@ impl<'tcx> Encoder for EncodeContext<'tcx> {\n     }\n }\n \n-impl<'tcx, T> SpecializedEncoder<Lazy<T>> for EncodeContext<'tcx> {\n+impl<'tcx, T> SpecializedEncoder<Lazy<T, ()>> for EncodeContext<'tcx> {\n     fn specialized_encode(&mut self, lazy: &Lazy<T>) -> Result<(), Self::Error> {\n         self.emit_lazy_distance(*lazy)\n     }\n }\n \n-impl<'tcx, T> SpecializedEncoder<Lazy<[T]>> for EncodeContext<'tcx> {\n+impl<'tcx, T> SpecializedEncoder<Lazy<[T], usize>> for EncodeContext<'tcx> {\n     fn specialized_encode(&mut self, lazy: &Lazy<[T]>) -> Result<(), Self::Error> {\n         self.emit_usize(lazy.meta)?;\n         if lazy.meta == 0 {\n@@ -109,7 +109,7 @@ impl<'tcx, T> SpecializedEncoder<Lazy<[T]>> for EncodeContext<'tcx> {\n     }\n }\n \n-impl<'tcx, I: Idx, T> SpecializedEncoder<Lazy<Table<I, T>>> for EncodeContext<'tcx>\n+impl<'tcx, I: Idx, T> SpecializedEncoder<Lazy<Table<I, T>, usize>> for EncodeContext<'tcx>\n where\n     Option<T>: FixedSizeEncoding,\n {\n@@ -228,8 +228,13 @@ impl<'tcx> SpecializedEncoder<LocalDefId> for EncodeContext<'tcx> {\n     }\n }\n \n-impl<'tcx> SpecializedEncoder<Ty<'tcx>> for EncodeContext<'tcx> {\n-    fn specialized_encode(&mut self, ty: &Ty<'tcx>) -> Result<(), Self::Error> {\n+impl<'a, 'b, 'tcx> SpecializedEncoder<&'a ty::TyS<'b>> for EncodeContext<'tcx>\n+where\n+    &'a ty::TyS<'b>: UseSpecializedEncodable,\n+{\n+    fn specialized_encode(&mut self, ty: &&'a ty::TyS<'b>) -> Result<(), Self::Error> {\n+        debug_assert!(self.tcx.lift(ty).is_some());\n+        let ty = unsafe { std::mem::transmute::<&&'a ty::TyS<'b>, &&'tcx ty::TyS<'tcx>>(ty) };\n         ty_codec::encode_with_shorthand(self, ty, |ecx| &mut ecx.type_shorthands)\n     }\n }\n@@ -251,12 +256,19 @@ impl<'tcx> SpecializedEncoder<interpret::AllocId> for EncodeContext<'tcx> {\n     }\n }\n \n-impl<'tcx> SpecializedEncoder<&'tcx [(ty::Predicate<'tcx>, Span)]> for EncodeContext<'tcx> {\n+impl<'a, 'b, 'tcx> SpecializedEncoder<&'a [(ty::Predicate<'b>, Span)]> for EncodeContext<'tcx> {\n     fn specialized_encode(\n         &mut self,\n-        predicates: &&'tcx [(ty::Predicate<'tcx>, Span)],\n+        predicates: &&'a [(ty::Predicate<'b>, Span)],\n     ) -> Result<(), Self::Error> {\n-        ty_codec::encode_spanned_predicates(self, predicates, |ecx| &mut ecx.predicate_shorthands)\n+        debug_assert!(self.tcx.lift(*predicates).is_some());\n+        let predicates = unsafe {\n+            std::mem::transmute::<\n+                &&'a [(ty::Predicate<'b>, Span)],\n+                &&'tcx [(ty::Predicate<'tcx>, Span)],\n+            >(predicates)\n+        };\n+        ty_codec::encode_spanned_predicates(self, &predicates, |ecx| &mut ecx.predicate_shorthands)\n     }\n }\n \n@@ -266,7 +278,10 @@ impl<'tcx> SpecializedEncoder<Fingerprint> for EncodeContext<'tcx> {\n     }\n }\n \n-impl<'tcx, T: Encodable> SpecializedEncoder<mir::ClearCrossCrate<T>> for EncodeContext<'tcx> {\n+impl<'tcx, T> SpecializedEncoder<mir::ClearCrossCrate<T>> for EncodeContext<'tcx>\n+where\n+    mir::ClearCrossCrate<T>: UseSpecializedEncodable,\n+{\n     fn specialized_encode(&mut self, _: &mir::ClearCrossCrate<T>) -> Result<(), Self::Error> {\n         Ok(())\n     }"}, {"sha": "f861d63aba0f3c4f77cf6927c732b0bb3624ef61", "filename": "src/librustc_middle/arena.rs", "status": "modified", "additions": 53, "deletions": 23, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/88ea7e5234bff0c4fcf5859aa6d5dd8d0608b853/src%2Flibrustc_middle%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88ea7e5234bff0c4fcf5859aa6d5dd8d0608b853/src%2Flibrustc_middle%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Farena.rs?ref=88ea7e5234bff0c4fcf5859aa6d5dd8d0608b853", "patch": "@@ -11,79 +11,109 @@\n macro_rules! arena_types {\n     ($macro:path, $args:tt, $tcx:lifetime) => (\n         $macro!($args, [\n-            [] layouts: rustc_target::abi::Layout,\n+            [] layouts: rustc_target::abi::Layout, rustc_target::abi::Layout;\n             // AdtDef are interned and compared by address\n-            [] adt_def: rustc_middle::ty::AdtDef,\n-            [decode] tables: rustc_middle::ty::TypeckTables<$tcx>,\n-            [] const_allocs: rustc_middle::mir::interpret::Allocation,\n+            [] adt_def: rustc_middle::ty::AdtDef, rustc_middle::ty::AdtDef;\n+            [decode] tables: rustc_middle::ty::TypeckTables<$tcx>, rustc_middle::ty::TypeckTables<'_x>;\n+            [] const_allocs: rustc_middle::mir::interpret::Allocation, rustc_middle::mir::interpret::Allocation;\n             // Required for the incremental on-disk cache\n-            [few, decode] mir_keys: rustc_hir::def_id::DefIdSet,\n-            [] region_scope_tree: rustc_middle::middle::region::ScopeTree,\n+            [few, decode] mir_keys: rustc_hir::def_id::DefIdSet, rustc_hir::def_id::DefIdSet;\n+            [] region_scope_tree: rustc_middle::middle::region::ScopeTree, rustc_middle::middle::region::ScopeTree;\n             [] dropck_outlives:\n                 rustc_middle::infer::canonical::Canonical<'tcx,\n                     rustc_middle::infer::canonical::QueryResponse<'tcx,\n                         rustc_middle::traits::query::DropckOutlivesResult<'tcx>\n                     >\n                 >,\n+                rustc_middle::infer::canonical::Canonical<'_x,\n+                    rustc_middle::infer::canonical::QueryResponse<'_y,\n+                        rustc_middle::traits::query::DropckOutlivesResult<'_z>\n+                    >\n+                >;\n             [] normalize_projection_ty:\n                 rustc_middle::infer::canonical::Canonical<'tcx,\n                     rustc_middle::infer::canonical::QueryResponse<'tcx,\n                         rustc_middle::traits::query::NormalizationResult<'tcx>\n                     >\n                 >,\n+                rustc_middle::infer::canonical::Canonical<'_x,\n+                    rustc_middle::infer::canonical::QueryResponse<'_y,\n+                        rustc_middle::traits::query::NormalizationResult<'_z>\n+                    >\n+                >;\n             [] implied_outlives_bounds:\n                 rustc_middle::infer::canonical::Canonical<'tcx,\n                     rustc_middle::infer::canonical::QueryResponse<'tcx,\n                         Vec<rustc_middle::traits::query::OutlivesBound<'tcx>>\n                     >\n                 >,\n+                rustc_middle::infer::canonical::Canonical<'_x,\n+                    rustc_middle::infer::canonical::QueryResponse<'_y,\n+                        Vec<rustc_middle::traits::query::OutlivesBound<'_z>>\n+                    >\n+                >;\n             [] type_op_subtype:\n                 rustc_middle::infer::canonical::Canonical<'tcx,\n                     rustc_middle::infer::canonical::QueryResponse<'tcx, ()>\n                 >,\n+                rustc_middle::infer::canonical::Canonical<'_x,\n+                    rustc_middle::infer::canonical::QueryResponse<'_y, ()>\n+                >;\n             [] type_op_normalize_poly_fn_sig:\n                 rustc_middle::infer::canonical::Canonical<'tcx,\n                     rustc_middle::infer::canonical::QueryResponse<'tcx, rustc_middle::ty::PolyFnSig<'tcx>>\n                 >,\n+                rustc_middle::infer::canonical::Canonical<'_x,\n+                    rustc_middle::infer::canonical::QueryResponse<'_y, rustc_middle::ty::PolyFnSig<'_z>>\n+                >;\n             [] type_op_normalize_fn_sig:\n                 rustc_middle::infer::canonical::Canonical<'tcx,\n                     rustc_middle::infer::canonical::QueryResponse<'tcx, rustc_middle::ty::FnSig<'tcx>>\n                 >,\n+                rustc_middle::infer::canonical::Canonical<'_x,\n+                    rustc_middle::infer::canonical::QueryResponse<'_y, rustc_middle::ty::FnSig<'_z>>\n+                >;\n             [] type_op_normalize_predicate:\n                 rustc_middle::infer::canonical::Canonical<'tcx,\n                     rustc_middle::infer::canonical::QueryResponse<'tcx, rustc_middle::ty::Predicate<'tcx>>\n                 >,\n+                rustc_middle::infer::canonical::Canonical<'_x,\n+                    rustc_middle::infer::canonical::QueryResponse<'_y, rustc_middle::ty::Predicate<'_z>>\n+                >;\n             [] type_op_normalize_ty:\n                 rustc_middle::infer::canonical::Canonical<'tcx,\n                     rustc_middle::infer::canonical::QueryResponse<'tcx, rustc_middle::ty::Ty<'tcx>>\n                 >,\n-            [few] all_traits: Vec<rustc_hir::def_id::DefId>,\n-            [few] privacy_access_levels: rustc_middle::middle::privacy::AccessLevels,\n-            [few] foreign_module: rustc_middle::middle::cstore::ForeignModule,\n-            [few] foreign_modules: Vec<rustc_middle::middle::cstore::ForeignModule>,\n-            [] upvars_mentioned: rustc_data_structures::fx::FxIndexMap<rustc_hir::HirId, rustc_hir::Upvar>,\n-            [] object_safety_violations: rustc_middle::traits::ObjectSafetyViolation,\n-            [] codegen_unit: rustc_middle::mir::mono::CodegenUnit<$tcx>,\n-            [] attribute: rustc_ast::ast::Attribute,\n-            [] name_set: rustc_data_structures::fx::FxHashSet<rustc_span::symbol::Symbol>,\n-            [] hir_id_set: rustc_hir::HirIdSet,\n+                rustc_middle::infer::canonical::Canonical<'_x,\n+                    rustc_middle::infer::canonical::QueryResponse<'_y, &'_z rustc_middle::ty::TyS<'_w>>\n+                >;\n+            [few] all_traits: Vec<rustc_hir::def_id::DefId>, Vec<rustc_hir::def_id::DefId>;\n+            [few] privacy_access_levels: rustc_middle::middle::privacy::AccessLevels, rustc_middle::middle::privacy::AccessLevels;\n+            [few] foreign_module: rustc_middle::middle::cstore::ForeignModule, rustc_middle::middle::cstore::ForeignModule;\n+            [few] foreign_modules: Vec<rustc_middle::middle::cstore::ForeignModule>, Vec<rustc_middle::middle::cstore::ForeignModule>;\n+            [] upvars_mentioned: rustc_data_structures::fx::FxIndexMap<rustc_hir::HirId, rustc_hir::Upvar>, rustc_data_structures::fx::FxIndexMap<rustc_hir::HirId, rustc_hir::Upvar>;\n+            [] object_safety_violations: rustc_middle::traits::ObjectSafetyViolation, rustc_middle::traits::ObjectSafetyViolation;\n+            [] codegen_unit: rustc_middle::mir::mono::CodegenUnit<$tcx>, rustc_middle::mir::mono::CodegenUnit<'_x>;\n+            [] attribute: rustc_ast::ast::Attribute, rustc_ast::ast::Attribute;\n+            [] name_set: rustc_data_structures::fx::FxHashSet<rustc_span::symbol::Symbol>, rustc_data_structures::fx::FxHashSet<rustc_span::symbol::Symbol>;\n+            [] hir_id_set: rustc_hir::HirIdSet, rustc_hir::HirIdSet;\n \n             // Interned types\n-            [] tys: rustc_middle::ty::TyS<$tcx>,\n+            [] tys: rustc_middle::ty::TyS<$tcx>, rustc_middle::ty::TyS<'_x>;\n \n             // HIR query types\n-            [few] indexed_hir: rustc_middle::hir::map::IndexedHir<$tcx>,\n-            [few] hir_definitions: rustc_hir::definitions::Definitions,\n-            [] hir_owner: rustc_middle::hir::Owner<$tcx>,\n-            [] hir_owner_nodes: rustc_middle::hir::OwnerNodes<$tcx>,\n+            [few] indexed_hir: rustc_middle::hir::map::IndexedHir<$tcx>, rustc_middle::hir::map::IndexedHir<'_x>;\n+            [few] hir_definitions: rustc_hir::definitions::Definitions, rustc_hir::definitions::Definitions;\n+            [] hir_owner: rustc_middle::hir::Owner<$tcx>, rustc_middle::hir::Owner<'_x>;\n+            [] hir_owner_nodes: rustc_middle::hir::OwnerNodes<$tcx>, rustc_middle::hir::OwnerNodes<'_x>;\n \n             // Note that this deliberately duplicates items in the `rustc_hir::arena`,\n             // since we need to allocate this type on both the `rustc_hir` arena\n             // (during lowering) and the `librustc_middle` arena (for decoding MIR)\n-            [decode] asm_template: rustc_ast::ast::InlineAsmTemplatePiece,\n+            [decode] asm_template: rustc_ast::ast::InlineAsmTemplatePiece, rustc_ast::ast::InlineAsmTemplatePiece;\n \n             // This is used to decode the &'tcx [Span] for InlineAsm's line_spans.\n-            [decode] span: rustc_span::Span,\n+            [decode] span: rustc_span::Span, rustc_span::Span;\n         ], $tcx);\n     )\n }"}, {"sha": "b14f17dee60603f4340116a64edd286038525ef7", "filename": "src/librustc_middle/dep_graph/dep_node.rs", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/88ea7e5234bff0c4fcf5859aa6d5dd8d0608b853/src%2Flibrustc_middle%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88ea7e5234bff0c4fcf5859aa6d5dd8d0608b853/src%2Flibrustc_middle%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fdep_graph%2Fdep_node.rs?ref=88ea7e5234bff0c4fcf5859aa6d5dd8d0608b853", "patch": "@@ -128,7 +128,7 @@ macro_rules! define_dep_nodes {\n                             // tuple args\n                             $({\n                                 return <$tuple_arg_ty as DepNodeParams<TyCtxt<'_>>>\n-                                    ::CAN_RECONSTRUCT_QUERY_KEY;\n+                                    ::can_reconstruct_query_key();\n                             })*\n \n                             true\n@@ -304,7 +304,10 @@ rustc_dep_node_append!([define_dep_nodes!][ <'tcx>\n ]);\n \n impl<'tcx> DepNodeParams<TyCtxt<'tcx>> for DefId {\n-    const CAN_RECONSTRUCT_QUERY_KEY: bool = true;\n+    #[inline]\n+    fn can_reconstruct_query_key() -> bool {\n+        true\n+    }\n \n     fn to_fingerprint(&self, tcx: TyCtxt<'tcx>) -> Fingerprint {\n         tcx.def_path_hash(*self).0\n@@ -320,7 +323,10 @@ impl<'tcx> DepNodeParams<TyCtxt<'tcx>> for DefId {\n }\n \n impl<'tcx> DepNodeParams<TyCtxt<'tcx>> for LocalDefId {\n-    const CAN_RECONSTRUCT_QUERY_KEY: bool = true;\n+    #[inline]\n+    fn can_reconstruct_query_key() -> bool {\n+        true\n+    }\n \n     fn to_fingerprint(&self, tcx: TyCtxt<'tcx>) -> Fingerprint {\n         self.to_def_id().to_fingerprint(tcx)\n@@ -336,7 +342,10 @@ impl<'tcx> DepNodeParams<TyCtxt<'tcx>> for LocalDefId {\n }\n \n impl<'tcx> DepNodeParams<TyCtxt<'tcx>> for CrateNum {\n-    const CAN_RECONSTRUCT_QUERY_KEY: bool = true;\n+    #[inline]\n+    fn can_reconstruct_query_key() -> bool {\n+        true\n+    }\n \n     fn to_fingerprint(&self, tcx: TyCtxt<'tcx>) -> Fingerprint {\n         let def_id = DefId { krate: *self, index: CRATE_DEF_INDEX };\n@@ -353,7 +362,10 @@ impl<'tcx> DepNodeParams<TyCtxt<'tcx>> for CrateNum {\n }\n \n impl<'tcx> DepNodeParams<TyCtxt<'tcx>> for (DefId, DefId) {\n-    const CAN_RECONSTRUCT_QUERY_KEY: bool = false;\n+    #[inline]\n+    fn can_reconstruct_query_key() -> bool {\n+        false\n+    }\n \n     // We actually would not need to specialize the implementation of this\n     // method but it's faster to combine the hashes than to instantiate a full\n@@ -375,7 +387,10 @@ impl<'tcx> DepNodeParams<TyCtxt<'tcx>> for (DefId, DefId) {\n }\n \n impl<'tcx> DepNodeParams<TyCtxt<'tcx>> for HirId {\n-    const CAN_RECONSTRUCT_QUERY_KEY: bool = false;\n+    #[inline]\n+    fn can_reconstruct_query_key() -> bool {\n+        false\n+    }\n \n     // We actually would not need to specialize the implementation of this\n     // method but it's faster to combine the hashes than to instantiate a full"}, {"sha": "62c92e988ba60b12c18ab26996d91dea103d58be", "filename": "src/librustc_middle/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88ea7e5234bff0c4fcf5859aa6d5dd8d0608b853/src%2Flibrustc_middle%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88ea7e5234bff0c4fcf5859aa6d5dd8d0608b853/src%2Flibrustc_middle%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Flib.rs?ref=88ea7e5234bff0c4fcf5859aa6d5dd8d0608b853", "patch": "@@ -42,7 +42,7 @@\n #![feature(option_expect_none)]\n #![feature(or_patterns)]\n #![feature(range_is_empty)]\n-#![feature(specialization)] // FIXME: min_specialization does not work\n+#![feature(min_specialization)]\n #![feature(track_caller)]\n #![feature(trusted_len)]\n #![feature(vec_remove_item)]"}, {"sha": "f159b82536fe27a2de08352e8d96236dfc9245f9", "filename": "src/librustc_middle/mir/mod.rs", "status": "modified", "additions": 33, "deletions": 4, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/88ea7e5234bff0c4fcf5859aa6d5dd8d0608b853/src%2Flibrustc_middle%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88ea7e5234bff0c4fcf5859aa6d5dd8d0608b853/src%2Flibrustc_middle%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fmod.rs?ref=88ea7e5234bff0c4fcf5859aa6d5dd8d0608b853", "patch": "@@ -457,8 +457,39 @@ impl<T> ClearCrossCrate<T> {\n     }\n }\n \n-impl<T: Encodable> rustc_serialize::UseSpecializedEncodable for ClearCrossCrate<T> {}\n-impl<T: Decodable> rustc_serialize::UseSpecializedDecodable for ClearCrossCrate<T> {}\n+const TAG_CLEAR_CROSS_CRATE_CLEAR: u8 = 0;\n+const TAG_CLEAR_CROSS_CRATE_SET: u8 = 1;\n+\n+impl<T: Encodable> rustc_serialize::UseSpecializedEncodable for ClearCrossCrate<T> {\n+    #[inline]\n+    fn default_encode<E: rustc_serialize::Encoder>(&self, e: &mut E) -> Result<(), E::Error> {\n+        match *self {\n+            ClearCrossCrate::Clear => TAG_CLEAR_CROSS_CRATE_CLEAR.encode(e),\n+            ClearCrossCrate::Set(ref val) => {\n+                TAG_CLEAR_CROSS_CRATE_SET.encode(e)?;\n+                val.encode(e)\n+            }\n+        }\n+    }\n+}\n+impl<T: Decodable> rustc_serialize::UseSpecializedDecodable for ClearCrossCrate<T> {\n+    #[inline]\n+    fn default_decode<D>(d: &mut D) -> Result<ClearCrossCrate<T>, D::Error>\n+    where\n+        D: rustc_serialize::Decoder,\n+    {\n+        let discr = u8::decode(d)?;\n+\n+        match discr {\n+            TAG_CLEAR_CROSS_CRATE_CLEAR => Ok(ClearCrossCrate::Clear),\n+            TAG_CLEAR_CROSS_CRATE_SET => {\n+                let val = T::decode(d)?;\n+                Ok(ClearCrossCrate::Set(val))\n+            }\n+            _ => unreachable!(),\n+        }\n+    }\n+}\n \n /// Grouped information about the source code origin of a MIR entity.\n /// Intended to be inspected by diagnostics and debuginfo.\n@@ -1952,8 +1983,6 @@ impl<V, T> ProjectionElem<V, T> {\n /// and the index is a local.\n pub type PlaceElem<'tcx> = ProjectionElem<Local, Ty<'tcx>>;\n \n-impl<'tcx> Copy for PlaceElem<'tcx> {}\n-\n // At least on 64 bit systems, `PlaceElem` should not be larger than two pointers.\n #[cfg(target_arch = \"x86_64\")]\n static_assert_size!(PlaceElem<'_>, 16);"}, {"sha": "1a8e5c45dd2f7f6a16a0a946c49f236005f26414", "filename": "src/librustc_middle/ty/codec.rs", "status": "modified", "additions": 85, "deletions": 57, "changes": 142, "blob_url": "https://github.com/rust-lang/rust/blob/88ea7e5234bff0c4fcf5859aa6d5dd8d0608b853/src%2Flibrustc_middle%2Fty%2Fcodec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88ea7e5234bff0c4fcf5859aa6d5dd8d0608b853/src%2Flibrustc_middle%2Fty%2Fcodec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fcodec.rs?ref=88ea7e5234bff0c4fcf5859aa6d5dd8d0608b853", "patch": "@@ -97,7 +97,7 @@ where\n \n pub fn encode_spanned_predicates<'tcx, E, C>(\n     encoder: &mut E,\n-    predicates: &'tcx [(ty::Predicate<'tcx>, Span)],\n+    predicates: &[(ty::Predicate<'tcx>, Span)],\n     cache: C,\n ) -> Result<(), E::Error>\n where\n@@ -139,7 +139,7 @@ pub trait TyDecoder<'tcx>: Decoder {\n }\n \n #[inline]\n-pub fn decode_arena_allocable<D, T: ArenaAllocatable + Decodable>(\n+pub fn decode_arena_allocable<'tcx, D, T: ArenaAllocatable<'tcx> + Decodable>(\n     decoder: &mut D,\n ) -> Result<&'tcx T, D::Error>\n where\n@@ -149,7 +149,7 @@ where\n }\n \n #[inline]\n-pub fn decode_arena_allocable_slice<D, T: ArenaAllocatable + Decodable>(\n+pub fn decode_arena_allocable_slice<'tcx, D, T: ArenaAllocatable<'tcx> + Decodable>(\n     decoder: &mut D,\n ) -> Result<&'tcx [T], D::Error>\n where\n@@ -318,18 +318,38 @@ macro_rules! __impl_decoder_methods {\n macro_rules! impl_arena_allocatable_decoder {\n     ([]$args:tt) => {};\n     ([decode $(, $attrs:ident)*]\n-     [[$DecoderName:ident [$($typaram:tt),*]], [$name:ident: $ty:ty], $tcx:lifetime]) => {\n-        impl<$($typaram),*> SpecializedDecoder<&$tcx $ty> for $DecoderName<$($typaram),*> {\n+     [[$DecoderName:ident [$($typaram:tt),*]], [$name:ident: $ty:ty, $gen_ty:ty], $tcx:lifetime]) => {\n+         // FIXME(#36588): These impls are horribly unsound as they allow\n+         // the caller to pick any lifetime for `'tcx`, including `'static`.\n+        #[allow(unused_lifetimes)]\n+        impl<'_x, '_y, '_z, '_w, '_a, $($typaram),*> SpecializedDecoder<&'_a $gen_ty>\n+        for $DecoderName<$($typaram),*>\n+        where &'_a $gen_ty: UseSpecializedDecodable\n+        {\n             #[inline]\n-            fn specialized_decode(&mut self) -> Result<&$tcx $ty, Self::Error> {\n-                decode_arena_allocable(self)\n+            fn specialized_decode(&mut self) -> Result<&'_a $gen_ty, Self::Error> {\n+                unsafe {\n+                    std::mem::transmute::<\n+                        Result<&$tcx $ty, Self::Error>,\n+                        Result<&'_a $gen_ty, Self::Error>,\n+                    >(decode_arena_allocable(self))\n+                }\n             }\n         }\n \n-        impl<$($typaram),*> SpecializedDecoder<&$tcx [$ty]> for $DecoderName<$($typaram),*> {\n+        #[allow(unused_lifetimes)]\n+        impl<'_x, '_y, '_z, '_w, '_a, $($typaram),*> SpecializedDecoder<&'_a [$gen_ty]>\n+        for $DecoderName<$($typaram),*>\n+        where &'_a [$gen_ty]: UseSpecializedDecodable\n+        {\n             #[inline]\n-            fn specialized_decode(&mut self) -> Result<&$tcx [$ty], Self::Error> {\n-                decode_arena_allocable_slice(self)\n+            fn specialized_decode(&mut self) -> Result<&'_a [$gen_ty], Self::Error> {\n+                unsafe {\n+                    std::mem::transmute::<\n+                        Result<&$tcx [$ty], Self::Error>,\n+                        Result<&'_a [$gen_ty], Self::Error>,\n+                    >(decode_arena_allocable_slice(self))\n+                }\n             }\n         }\n     };\n@@ -340,9 +360,9 @@ macro_rules! impl_arena_allocatable_decoder {\n \n #[macro_export]\n macro_rules! impl_arena_allocatable_decoders {\n-    ($args:tt, [$($a:tt $name:ident: $ty:ty,)*], $tcx:lifetime) => {\n+    ($args:tt, [$($a:tt $name:ident: $ty:ty, $gen_ty:ty;)*], $tcx:lifetime) => {\n         $(\n-            impl_arena_allocatable_decoder!($a [$args, [$name: $ty], $tcx]);\n+            impl_arena_allocatable_decoder!($a [$args, [$name: $ty, $gen_ty], $tcx]);\n         )*\n     }\n }\n@@ -352,14 +372,15 @@ macro_rules! implement_ty_decoder {\n     ($DecoderName:ident <$($typaram:tt),*>) => {\n         mod __ty_decoder_impl {\n             use std::borrow::Cow;\n+            use std::mem::transmute;\n \n-            use rustc_serialize::{Decoder, SpecializedDecoder};\n+            use rustc_serialize::{Decoder, SpecializedDecoder, UseSpecializedDecodable};\n \n             use $crate::infer::canonical::CanonicalVarInfos;\n             use $crate::ty;\n             use $crate::ty::codec::*;\n-            use $crate::ty::subst::SubstsRef;\n-            use rustc_hir::def_id::{CrateNum};\n+            use $crate::ty::subst::InternalSubsts;\n+            use rustc_hir::def_id::CrateNum;\n \n             use rustc_span::Span;\n \n@@ -398,8 +419,7 @@ macro_rules! implement_ty_decoder {\n             }\n \n             // FIXME(#36588): These impls are horribly unsound as they allow\n-            // the caller to pick any lifetime for `'tcx`, including `'static`,\n-            // by using the unspecialized proxies to them.\n+            // the caller to pick any lifetime for `'tcx`, including `'static`.\n \n             rustc_hir::arena_types!(impl_arena_allocatable_decoders, [$DecoderName [$($typaram),*]], 'tcx);\n             arena_types!(impl_arena_allocatable_decoders, [$DecoderName [$($typaram),*]], 'tcx);\n@@ -411,90 +431,98 @@ macro_rules! implement_ty_decoder {\n                 }\n             }\n \n-            impl<$($typaram),*> SpecializedDecoder<ty::Ty<'tcx>>\n-            for $DecoderName<$($typaram),*> {\n-                fn specialized_decode(&mut self) -> Result<ty::Ty<'tcx>, Self::Error> {\n-                    decode_ty(self)\n+            impl<'_x, '_y, $($typaram),*> SpecializedDecoder<&'_x ty::TyS<'_y>>\n+            for $DecoderName<$($typaram),*>\n+            where &'_x ty::TyS<'_y>: UseSpecializedDecodable\n+            {\n+                fn specialized_decode(&mut self) -> Result<&'_x ty::TyS<'_y>, Self::Error> {\n+                    unsafe { transmute::<Result<ty::Ty<'tcx>, Self::Error>, Result<&'_x ty::TyS<'_y>, Self::Error>>(decode_ty(self)) }\n                 }\n             }\n \n-            impl<$($typaram),*> SpecializedDecoder<&'tcx [(ty::Predicate<'tcx>, Span)]>\n-            for $DecoderName<$($typaram),*> {\n+            impl<'_x, '_y, $($typaram),*> SpecializedDecoder<&'_x [(ty::Predicate<'_y>, Span)]>\n+            for $DecoderName<$($typaram),*>\n+            where &'_x [(ty::Predicate<'_y>, Span)]: UseSpecializedDecodable {\n                 fn specialized_decode(&mut self)\n-                                      -> Result<&'tcx [(ty::Predicate<'tcx>, Span)], Self::Error> {\n-                    decode_spanned_predicates(self)\n+                                      -> Result<&'_x [(ty::Predicate<'_y>, Span)], Self::Error>\n+                {\n+                    unsafe { transmute(decode_spanned_predicates(self)) }\n                 }\n             }\n \n-            impl<$($typaram),*> SpecializedDecoder<SubstsRef<'tcx>>\n-            for $DecoderName<$($typaram),*> {\n-                fn specialized_decode(&mut self) -> Result<SubstsRef<'tcx>, Self::Error> {\n-                    decode_substs(self)\n+            impl<'_x, '_y, $($typaram),*> SpecializedDecoder<&'_x InternalSubsts<'_y>>\n+            for $DecoderName<$($typaram),*>\n+            where &'_x InternalSubsts<'_y>: UseSpecializedDecodable {\n+                fn specialized_decode(&mut self) -> Result<&'_x InternalSubsts<'_y>, Self::Error> {\n+                    unsafe { transmute(decode_substs(self)) }\n                 }\n             }\n \n-            impl<$($typaram),*> SpecializedDecoder<$crate::mir::Place<'tcx>>\n+            impl<'_x, $($typaram),*> SpecializedDecoder<$crate::mir::Place<'_x>>\n             for $DecoderName<$($typaram),*> {\n                 fn specialized_decode(\n                     &mut self\n-                ) -> Result<$crate::mir::Place<'tcx>, Self::Error> {\n-                    decode_place(self)\n+                ) -> Result<$crate::mir::Place<'_x>, Self::Error> {\n+                    unsafe { transmute(decode_place(self)) }\n                 }\n             }\n \n-            impl<$($typaram),*> SpecializedDecoder<ty::Region<'tcx>>\n+            impl<'_x, $($typaram),*> SpecializedDecoder<ty::Region<'_x>>\n             for $DecoderName<$($typaram),*> {\n-                fn specialized_decode(&mut self) -> Result<ty::Region<'tcx>, Self::Error> {\n-                    decode_region(self)\n+                fn specialized_decode(&mut self) -> Result<ty::Region<'_x>, Self::Error> {\n+                    unsafe { transmute(decode_region(self)) }\n                 }\n             }\n \n-            impl<$($typaram),*> SpecializedDecoder<&'tcx ty::List<ty::Ty<'tcx>>>\n-            for $DecoderName<$($typaram),*> {\n+            impl<'_x, '_y, '_z, $($typaram),*> SpecializedDecoder<&'_x ty::List<&'_y ty::TyS<'_z>>>\n+            for $DecoderName<$($typaram),*>\n+            where &'_x ty::List<&'_y ty::TyS<'_z>>: UseSpecializedDecodable {\n                 fn specialized_decode(&mut self)\n-                                      -> Result<&'tcx ty::List<ty::Ty<'tcx>>, Self::Error> {\n-                    decode_ty_slice(self)\n+                                      -> Result<&'_x ty::List<&'_y ty::TyS<'_z>>, Self::Error> {\n+                    unsafe { transmute(decode_ty_slice(self)) }\n                 }\n             }\n \n-            impl<$($typaram),*> SpecializedDecoder<&'tcx ty::AdtDef>\n+            impl<'_x, $($typaram),*> SpecializedDecoder<&'_x ty::AdtDef>\n             for $DecoderName<$($typaram),*> {\n-                fn specialized_decode(&mut self) -> Result<&'tcx ty::AdtDef, Self::Error> {\n-                    decode_adt_def(self)\n+                fn specialized_decode(&mut self) -> Result<&'_x ty::AdtDef, Self::Error> {\n+                    unsafe { transmute(decode_adt_def(self)) }\n                 }\n             }\n \n-            impl<$($typaram),*> SpecializedDecoder<&'tcx ty::List<ty::ExistentialPredicate<'tcx>>>\n-                for $DecoderName<$($typaram),*> {\n+            impl<'_x, '_y, $($typaram),*> SpecializedDecoder<&'_x ty::List<ty::ExistentialPredicate<'_y>>>\n+            for $DecoderName<$($typaram),*>\n+            where &'_x ty::List<ty::ExistentialPredicate<'_y>>: UseSpecializedDecodable {\n                 fn specialized_decode(&mut self)\n-                    -> Result<&'tcx ty::List<ty::ExistentialPredicate<'tcx>>, Self::Error> {\n-                    decode_existential_predicate_slice(self)\n+                    -> Result<&'_x ty::List<ty::ExistentialPredicate<'_y>>, Self::Error> {\n+                        unsafe { transmute(decode_existential_predicate_slice(self)) }\n                 }\n             }\n \n-            impl<$($typaram),*> SpecializedDecoder<CanonicalVarInfos<'tcx>>\n+            impl<'_x, $($typaram),*> SpecializedDecoder<CanonicalVarInfos<'_x>>\n                 for $DecoderName<$($typaram),*> {\n                 fn specialized_decode(&mut self)\n-                    -> Result<CanonicalVarInfos<'tcx>, Self::Error> {\n-                    decode_canonical_var_infos(self)\n+                    -> Result<CanonicalVarInfos<'_x>, Self::Error> {\n+                        unsafe { transmute(decode_canonical_var_infos(self)) }\n                 }\n             }\n \n-            impl<$($typaram),*> SpecializedDecoder<&'tcx $crate::ty::Const<'tcx>>\n-            for $DecoderName<$($typaram),*> {\n-                fn specialized_decode(&mut self) -> Result<&'tcx ty::Const<'tcx>, Self::Error> {\n-                    decode_const(self)\n+            impl<'_x, '_y, $($typaram),*> SpecializedDecoder<&'_x $crate::ty::Const<'_y>>\n+            for $DecoderName<$($typaram),*>\n+            where &'_x $crate::ty::Const<'_y>: UseSpecializedDecodable {\n+                fn specialized_decode(&mut self) -> Result<&'_x ty::Const<'_y>, Self::Error> {\n+                    unsafe { transmute(decode_const(self)) }\n                 }\n             }\n \n-            impl<$($typaram),*> SpecializedDecoder<&'tcx $crate::mir::interpret::Allocation>\n+            impl<'_x, $($typaram),*> SpecializedDecoder<&'_x $crate::mir::interpret::Allocation>\n             for $DecoderName<$($typaram),*> {\n                 fn specialized_decode(\n                     &mut self\n-                ) -> Result<&'tcx $crate::mir::interpret::Allocation, Self::Error> {\n-                    decode_allocation(self)\n+                ) -> Result<&'_x $crate::mir::interpret::Allocation, Self::Error> {\n+                    unsafe { transmute(decode_allocation(self)) }\n                 }\n             }\n         }\n-    }\n+    };\n }"}, {"sha": "5374dff422425e938e066c8628616d68a59cb9f4", "filename": "src/librustc_middle/ty/query/on_disk_cache.rs", "status": "modified", "additions": 16, "deletions": 44, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/88ea7e5234bff0c4fcf5859aa6d5dd8d0608b853/src%2Flibrustc_middle%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88ea7e5234bff0c4fcf5859aa6d5dd8d0608b853/src%2Flibrustc_middle%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fquery%2Fon_disk_cache.rs?ref=88ea7e5234bff0c4fcf5859aa6d5dd8d0608b853", "patch": "@@ -1,6 +1,6 @@\n use crate::dep_graph::{DepNodeIndex, SerializedDepNodeIndex};\n+use crate::mir::interpret;\n use crate::mir::interpret::{AllocDecodingSession, AllocDecodingState};\n-use crate::mir::{self, interpret};\n use crate::ty::codec::{self as ty_codec, TyDecoder, TyEncoder};\n use crate::ty::context::TyCtxt;\n use crate::ty::{self, Ty};\n@@ -26,9 +26,6 @@ use std::mem;\n \n const TAG_FILE_FOOTER: u128 = 0xC0FFEE_C0FFEE_C0FFEE_C0FFEE_C0FFEE;\n \n-const TAG_CLEAR_CROSS_CRATE_CLEAR: u8 = 0;\n-const TAG_CLEAR_CROSS_CRATE_SET: u8 = 1;\n-\n const TAG_NO_EXPN_DATA: u8 = 0;\n const TAG_EXPN_DATA_SHORTHAND: u8 = 1;\n const TAG_EXPN_DATA_INLINE: u8 = 2;\n@@ -667,24 +664,6 @@ impl<'a, 'tcx> SpecializedDecoder<Fingerprint> for CacheDecoder<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx, T: Decodable> SpecializedDecoder<mir::ClearCrossCrate<T>>\n-    for CacheDecoder<'a, 'tcx>\n-{\n-    #[inline]\n-    fn specialized_decode(&mut self) -> Result<mir::ClearCrossCrate<T>, Self::Error> {\n-        let discr = u8::decode(self)?;\n-\n-        match discr {\n-            TAG_CLEAR_CROSS_CRATE_CLEAR => Ok(mir::ClearCrossCrate::Clear),\n-            TAG_CLEAR_CROSS_CRATE_SET => {\n-                let val = T::decode(self)?;\n-                Ok(mir::ClearCrossCrate::Set(val))\n-            }\n-            _ => unreachable!(),\n-        }\n-    }\n-}\n-\n //- ENCODING -------------------------------------------------------------------\n \n /// An encoder that can write the incr. comp. cache.\n@@ -828,26 +807,36 @@ where\n     }\n }\n \n-impl<'a, 'tcx, E> SpecializedEncoder<Ty<'tcx>> for CacheEncoder<'a, 'tcx, E>\n+impl<'a, 'b, 'c, 'tcx, E> SpecializedEncoder<&'b ty::TyS<'c>> for CacheEncoder<'a, 'tcx, E>\n where\n     E: 'a + TyEncoder,\n+    &'b ty::TyS<'c>: UseSpecializedEncodable,\n {\n     #[inline]\n-    fn specialized_encode(&mut self, ty: &Ty<'tcx>) -> Result<(), Self::Error> {\n+    fn specialized_encode(&mut self, ty: &&'b ty::TyS<'c>) -> Result<(), Self::Error> {\n+        debug_assert!(self.tcx.lift(ty).is_some());\n+        let ty = unsafe { std::mem::transmute::<&&'b ty::TyS<'c>, &&'tcx ty::TyS<'tcx>>(ty) };\n         ty_codec::encode_with_shorthand(self, ty, |encoder| &mut encoder.type_shorthands)\n     }\n }\n \n-impl<'a, 'tcx, E> SpecializedEncoder<&'tcx [(ty::Predicate<'tcx>, Span)]>\n+impl<'a, 'b, 'c, 'tcx, E> SpecializedEncoder<&'b [(ty::Predicate<'c>, Span)]>\n     for CacheEncoder<'a, 'tcx, E>\n where\n     E: 'a + TyEncoder,\n {\n     #[inline]\n     fn specialized_encode(\n         &mut self,\n-        predicates: &&'tcx [(ty::Predicate<'tcx>, Span)],\n+        predicates: &&'b [(ty::Predicate<'c>, Span)],\n     ) -> Result<(), Self::Error> {\n+        debug_assert!(self.tcx.lift(*predicates).is_some());\n+        let predicates = unsafe {\n+            std::mem::transmute::<\n+                &&'b [(ty::Predicate<'c>, Span)],\n+                &&'tcx [(ty::Predicate<'tcx>, Span)],\n+            >(predicates)\n+        };\n         ty_codec::encode_spanned_predicates(self, predicates, |encoder| {\n             &mut encoder.predicate_shorthands\n         })\n@@ -890,23 +879,6 @@ impl<'a, 'tcx> SpecializedEncoder<Fingerprint> for CacheEncoder<'a, 'tcx, opaque\n     }\n }\n \n-impl<'a, 'tcx, E, T> SpecializedEncoder<mir::ClearCrossCrate<T>> for CacheEncoder<'a, 'tcx, E>\n-where\n-    E: 'a + TyEncoder,\n-    T: Encodable,\n-{\n-    #[inline]\n-    fn specialized_encode(&mut self, val: &mir::ClearCrossCrate<T>) -> Result<(), Self::Error> {\n-        match *val {\n-            mir::ClearCrossCrate::Clear => TAG_CLEAR_CROSS_CRATE_CLEAR.encode(self),\n-            mir::ClearCrossCrate::Set(ref val) => {\n-                TAG_CLEAR_CROSS_CRATE_SET.encode(self)?;\n-                val.encode(self)\n-            }\n-        }\n-    }\n-}\n-\n macro_rules! encoder_methods {\n     ($($name:ident($ty:ty);)*) => {\n         #[inline]\n@@ -995,7 +967,7 @@ fn encode_query_results<'a, 'tcx, Q, E>(\n     query_result_index: &mut EncodedQueryResultIndex,\n ) -> Result<(), E::Error>\n where\n-    Q: super::QueryDescription<TyCtxt<'tcx>>,\n+    Q: super::QueryDescription<TyCtxt<'tcx>> + super::QueryAccessors<TyCtxt<'tcx>>,\n     Q::Value: Encodable,\n     E: 'a + TyEncoder,\n {"}, {"sha": "3c44662441890431f15e70a74d318aa4f4015759", "filename": "src/librustc_middle/ty/query/profiling_support.rs", "status": "modified", "additions": 32, "deletions": 9, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/88ea7e5234bff0c4fcf5859aa6d5dd8d0608b853/src%2Flibrustc_middle%2Fty%2Fquery%2Fprofiling_support.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88ea7e5234bff0c4fcf5859aa6d5dd8d0608b853/src%2Flibrustc_middle%2Fty%2Fquery%2Fprofiling_support.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fquery%2Fprofiling_support.rs?ref=88ea7e5234bff0c4fcf5859aa6d5dd8d0608b853", "patch": "@@ -112,30 +112,53 @@ impl<T: Debug> IntoSelfProfilingString for T {\n     }\n }\n \n-impl IntoSelfProfilingString for DefId {\n+impl<T: SpecIntoSelfProfilingString> IntoSelfProfilingString for T {\n     fn to_self_profile_string(&self, builder: &mut QueryKeyStringBuilder<'_, '_, '_>) -> StringId {\n+        self.spec_to_self_profile_string(builder)\n+    }\n+}\n+\n+#[rustc_specialization_trait]\n+pub trait SpecIntoSelfProfilingString: Debug {\n+    fn spec_to_self_profile_string(\n+        &self,\n+        builder: &mut QueryKeyStringBuilder<'_, '_, '_>,\n+    ) -> StringId;\n+}\n+\n+impl SpecIntoSelfProfilingString for DefId {\n+    fn spec_to_self_profile_string(\n+        &self,\n+        builder: &mut QueryKeyStringBuilder<'_, '_, '_>,\n+    ) -> StringId {\n         builder.def_id_to_string_id(*self)\n     }\n }\n \n-impl IntoSelfProfilingString for CrateNum {\n-    fn to_self_profile_string(&self, builder: &mut QueryKeyStringBuilder<'_, '_, '_>) -> StringId {\n+impl SpecIntoSelfProfilingString for CrateNum {\n+    fn spec_to_self_profile_string(\n+        &self,\n+        builder: &mut QueryKeyStringBuilder<'_, '_, '_>,\n+    ) -> StringId {\n         builder.def_id_to_string_id(DefId { krate: *self, index: CRATE_DEF_INDEX })\n     }\n }\n \n-impl IntoSelfProfilingString for DefIndex {\n-    fn to_self_profile_string(&self, builder: &mut QueryKeyStringBuilder<'_, '_, '_>) -> StringId {\n+impl SpecIntoSelfProfilingString for DefIndex {\n+    fn spec_to_self_profile_string(\n+        &self,\n+        builder: &mut QueryKeyStringBuilder<'_, '_, '_>,\n+    ) -> StringId {\n         builder.def_id_to_string_id(DefId { krate: LOCAL_CRATE, index: *self })\n     }\n }\n \n-impl<T0, T1> IntoSelfProfilingString for (T0, T1)\n+impl<T0, T1> SpecIntoSelfProfilingString for (T0, T1)\n where\n-    T0: IntoSelfProfilingString + Debug,\n-    T1: IntoSelfProfilingString + Debug,\n+    T0: SpecIntoSelfProfilingString,\n+    T1: SpecIntoSelfProfilingString,\n {\n-    default fn to_self_profile_string(\n+    fn spec_to_self_profile_string(\n         &self,\n         builder: &mut QueryKeyStringBuilder<'_, '_, '_>,\n     ) -> StringId {"}, {"sha": "b1f76ff6a03bd2ad6a26f526e24c1e005a7fc6fd", "filename": "src/librustc_middle/ty/query/values.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/88ea7e5234bff0c4fcf5859aa6d5dd8d0608b853/src%2Flibrustc_middle%2Fty%2Fquery%2Fvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88ea7e5234bff0c4fcf5859aa6d5dd8d0608b853/src%2Flibrustc_middle%2Fty%2Fquery%2Fvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fquery%2Fvalues.rs?ref=88ea7e5234bff0c4fcf5859aa6d5dd8d0608b853", "patch": "@@ -1,4 +1,4 @@\n-use crate::ty::{self, AdtSizedConstraint, Ty, TyCtxt};\n+use crate::ty::{self, AdtSizedConstraint, Ty, TyCtxt, TyS};\n \n use rustc_span::symbol::Symbol;\n \n@@ -13,9 +13,11 @@ impl<'tcx, T> Value<'tcx> for T {\n     }\n }\n \n-impl<'tcx> Value<'tcx> for Ty<'tcx> {\n-    fn from_cycle_error(tcx: TyCtxt<'tcx>) -> Ty<'tcx> {\n-        tcx.types.err\n+impl<'tcx> Value<'tcx> for &'_ TyS<'_> {\n+    fn from_cycle_error(tcx: TyCtxt<'tcx>) -> Self {\n+        // SAFETY: This is never called when `Self` is not `Ty<'tcx>`.\n+        // FIXME: Represent the above fact in the trait system somehow.\n+        unsafe { std::mem::transmute::<Ty<'tcx>, Ty<'_>>(tcx.types.err) }\n     }\n }\n \n@@ -25,8 +27,14 @@ impl<'tcx> Value<'tcx> for ty::SymbolName {\n     }\n }\n \n-impl<'tcx> Value<'tcx> for AdtSizedConstraint<'tcx> {\n+impl<'tcx> Value<'tcx> for AdtSizedConstraint<'_> {\n     fn from_cycle_error(tcx: TyCtxt<'tcx>) -> Self {\n-        AdtSizedConstraint(tcx.intern_type_list(&[tcx.types.err]))\n+        // SAFETY: This is never called when `Self` is not `AdtSizedConstraint<'tcx>`.\n+        // FIXME: Represent the above fact in the trait system somehow.\n+        unsafe {\n+            std::mem::transmute::<AdtSizedConstraint<'tcx>, AdtSizedConstraint<'_>>(\n+                AdtSizedConstraint(tcx.intern_type_list(&[tcx.types.err])),\n+            )\n+        }\n     }\n }"}, {"sha": "34333382a22a8321e950fcdf2095d339ed5090c9", "filename": "src/librustc_middle/ty/sty.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88ea7e5234bff0c4fcf5859aa6d5dd8d0608b853/src%2Flibrustc_middle%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88ea7e5234bff0c4fcf5859aa6d5dd8d0608b853/src%2Flibrustc_middle%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fsty.rs?ref=88ea7e5234bff0c4fcf5859aa6d5dd8d0608b853", "patch": "@@ -2404,8 +2404,6 @@ impl<'tcx> Const<'tcx> {\n     }\n }\n \n-impl<'tcx> rustc_serialize::UseSpecializedDecodable for &'tcx Const<'tcx> {}\n-\n /// Represents a constant in Rust.\n #[derive(Copy, Clone, Debug, Eq, PartialEq, PartialOrd, Ord, RustcEncodable, RustcDecodable, Hash)]\n #[derive(HashStable)]"}, {"sha": "002b0f9c165dde4f3a967699dc1d72a659dc4773", "filename": "src/librustc_query_system/dep_graph/dep_node.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/88ea7e5234bff0c4fcf5859aa6d5dd8d0608b853/src%2Flibrustc_query_system%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88ea7e5234bff0c4fcf5859aa6d5dd8d0608b853/src%2Flibrustc_query_system%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_query_system%2Fdep_graph%2Fdep_node.rs?ref=88ea7e5234bff0c4fcf5859aa6d5dd8d0608b853", "patch": "@@ -91,7 +91,7 @@ impl<K: DepKind> fmt::Debug for DepNode<K> {\n }\n \n pub trait DepNodeParams<Ctxt: DepContext>: fmt::Debug + Sized {\n-    const CAN_RECONSTRUCT_QUERY_KEY: bool;\n+    fn can_reconstruct_query_key() -> bool;\n \n     /// This method turns the parameters of a DepNodeConstructor into an opaque\n     /// Fingerprint to be used in DepNode.\n@@ -108,7 +108,7 @@ pub trait DepNodeParams<Ctxt: DepContext>: fmt::Debug + Sized {\n     /// This method tries to recover the query key from the given `DepNode`,\n     /// something which is needed when forcing `DepNode`s during red-green\n     /// evaluation. The query system will only call this method if\n-    /// `CAN_RECONSTRUCT_QUERY_KEY` is `true`.\n+    /// `can_reconstruct_query_key()` is `true`.\n     /// It is always valid to return `None` here, in which case incremental\n     /// compilation will treat the query as having changed instead of forcing it.\n     fn recover(tcx: Ctxt, dep_node: &DepNode<Ctxt::DepKind>) -> Option<Self>;\n@@ -118,7 +118,10 @@ impl<Ctxt: DepContext, T> DepNodeParams<Ctxt> for T\n where\n     T: HashStable<Ctxt::StableHashingContext> + fmt::Debug,\n {\n-    default const CAN_RECONSTRUCT_QUERY_KEY: bool = false;\n+    #[inline]\n+    default fn can_reconstruct_query_key() -> bool {\n+        false\n+    }\n \n     default fn to_fingerprint(&self, tcx: Ctxt) -> Fingerprint {\n         let mut hcx = tcx.create_stable_hashing_context();"}, {"sha": "12450a4ccd3ebc3937871f5b8cb3527644ece231", "filename": "src/librustc_query_system/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88ea7e5234bff0c4fcf5859aa6d5dd8d0608b853/src%2Flibrustc_query_system%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88ea7e5234bff0c4fcf5859aa6d5dd8d0608b853/src%2Flibrustc_query_system%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_query_system%2Flib.rs?ref=88ea7e5234bff0c4fcf5859aa6d5dd8d0608b853", "patch": "@@ -4,7 +4,7 @@\n #![feature(const_panic)]\n #![feature(core_intrinsics)]\n #![feature(hash_raw_entry)]\n-#![feature(specialization)] // FIXME: min_specialization rejects `default const`\n+#![feature(min_specialization)]\n #![feature(stmt_expr_attributes)]\n #![feature(vec_remove_item)]\n "}, {"sha": "3dc3e783820963e4e0dc417c8c44380f92ab0b7a", "filename": "src/librustc_serialize/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88ea7e5234bff0c4fcf5859aa6d5dd8d0608b853/src%2Flibrustc_serialize%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88ea7e5234bff0c4fcf5859aa6d5dd8d0608b853/src%2Flibrustc_serialize%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_serialize%2Flib.rs?ref=88ea7e5234bff0c4fcf5859aa6d5dd8d0608b853", "patch": "@@ -10,7 +10,7 @@ Core encoding and decoding interfaces.\n     test(attr(allow(unused_variables), deny(warnings)))\n )]\n #![feature(box_syntax)]\n-#![feature(specialization)] // FIXME: min_specialization does not work\n+#![feature(min_specialization)]\n #![feature(never_type)]\n #![feature(nll)]\n #![feature(associated_type_bounds)]"}, {"sha": "29c5737ad895abc8b834394fcb6f328ddefb1ee4", "filename": "src/librustc_serialize/serialize.rs", "status": "modified", "additions": 15, "deletions": 21, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/88ea7e5234bff0c4fcf5859aa6d5dd8d0608b853/src%2Flibrustc_serialize%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88ea7e5234bff0c4fcf5859aa6d5dd8d0608b853/src%2Flibrustc_serialize%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_serialize%2Fserialize.rs?ref=88ea7e5234bff0c4fcf5859aa6d5dd8d0608b853", "patch": "@@ -635,24 +635,6 @@ impl<T> Decodable for PhantomData<T> {\n     }\n }\n \n-impl<'a, T: ?Sized + Encodable> Encodable for &'a T {\n-    fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n-        (**self).encode(s)\n-    }\n-}\n-\n-impl<T: ?Sized + Encodable> Encodable for Box<T> {\n-    fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n-        (**self).encode(s)\n-    }\n-}\n-\n-impl<T: Decodable> Decodable for Box<T> {\n-    fn decode<D: Decoder>(d: &mut D) -> Result<Box<T>, D::Error> {\n-        Ok(box Decodable::decode(d)?)\n-    }\n-}\n-\n impl<T: Decodable> Decodable for Box<[T]> {\n     fn decode<D: Decoder>(d: &mut D) -> Result<Box<[T]>, D::Error> {\n         let v: Vec<T> = Decodable::decode(d)?;\n@@ -1008,8 +990,20 @@ impl<T: UseSpecializedDecodable> Decodable for T {\n // for this exact reason.\n // May be fixable in a simpler fashion via the\n // more complex lattice model for specialization.\n-impl<'a, T: ?Sized + Encodable> UseSpecializedEncodable for &'a T {}\n-impl<T: ?Sized + Encodable> UseSpecializedEncodable for Box<T> {}\n-impl<T: Decodable> UseSpecializedDecodable for Box<T> {}\n+impl<'a, T: ?Sized + Encodable> UseSpecializedEncodable for &'a T {\n+    fn default_encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n+        (**self).encode(s)\n+    }\n+}\n+impl<T: ?Sized + Encodable> UseSpecializedEncodable for Box<T> {\n+    fn default_encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n+        (**self).encode(s)\n+    }\n+}\n+impl<T: Decodable> UseSpecializedDecodable for Box<T> {\n+    fn default_decode<D: Decoder>(d: &mut D) -> Result<Box<T>, D::Error> {\n+        Ok(box Decodable::decode(d)?)\n+    }\n+}\n impl<'a, T: Decodable> UseSpecializedDecodable for &'a T {}\n impl<'a, T: Decodable> UseSpecializedDecodable for &'a [T] {}"}, {"sha": "f244785b49d2fdf3dd5e4050543217b5549171e5", "filename": "src/librustc_trait_selection/infer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88ea7e5234bff0c4fcf5859aa6d5dd8d0608b853/src%2Flibrustc_trait_selection%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88ea7e5234bff0c4fcf5859aa6d5dd8d0608b853/src%2Flibrustc_trait_selection%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Finfer.rs?ref=88ea7e5234bff0c4fcf5859aa6d5dd8d0608b853", "patch": "@@ -90,7 +90,7 @@ pub trait InferCtxtBuilderExt<'tcx> {\n     where\n         K: TypeFoldable<'tcx>,\n         R: Debug + TypeFoldable<'tcx>,\n-        Canonical<'tcx, QueryResponse<'tcx, R>>: ArenaAllocatable;\n+        Canonical<'tcx, QueryResponse<'tcx, R>>: ArenaAllocatable<'tcx>;\n }\n \n impl<'tcx> InferCtxtBuilderExt<'tcx> for InferCtxtBuilder<'tcx> {\n@@ -118,7 +118,7 @@ impl<'tcx> InferCtxtBuilderExt<'tcx> for InferCtxtBuilder<'tcx> {\n     where\n         K: TypeFoldable<'tcx>,\n         R: Debug + TypeFoldable<'tcx>,\n-        Canonical<'tcx, QueryResponse<'tcx, R>>: ArenaAllocatable,\n+        Canonical<'tcx, QueryResponse<'tcx, R>>: ArenaAllocatable<'tcx>,\n     {\n         self.enter_with_canonical(\n             DUMMY_SP,"}]}