{"sha": "20fad0f5fff381210bfe79b35a5fe8332ec86b34", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwZmFkMGY1ZmZmMzgxMjEwYmZlNzliMzVhNWZlODMzMmVjODZiMzQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-03T07:25:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-03T07:25:56Z"}, "message": "auto merge of #8257 : mozilla/rust/rollup, r=thestinger\n\n1f9c392 r=brson\r\n54e685d r=graydon\r\n1992765 r=thestinger\r\n75155cd r=bblum\r\ndef8891 r=graydon", "tree": {"sha": "c37eb6f6c0e4cbfb1009d6d018745f22b32a93f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c37eb6f6c0e4cbfb1009d6d018745f22b32a93f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20fad0f5fff381210bfe79b35a5fe8332ec86b34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20fad0f5fff381210bfe79b35a5fe8332ec86b34", "html_url": "https://github.com/rust-lang/rust/commit/20fad0f5fff381210bfe79b35a5fe8332ec86b34", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20fad0f5fff381210bfe79b35a5fe8332ec86b34/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "deddb009f0003734d3c73fa859826d57ec600270", "url": "https://api.github.com/repos/rust-lang/rust/commits/deddb009f0003734d3c73fa859826d57ec600270", "html_url": "https://github.com/rust-lang/rust/commit/deddb009f0003734d3c73fa859826d57ec600270"}, {"sha": "def88913d80e153d956ce85f8155d77455bcfe5e", "url": "https://api.github.com/repos/rust-lang/rust/commits/def88913d80e153d956ce85f8155d77455bcfe5e", "html_url": "https://github.com/rust-lang/rust/commit/def88913d80e153d956ce85f8155d77455bcfe5e"}], "stats": {"total": 173, "additions": 120, "deletions": 53}, "files": [{"sha": "af69997f02e8d9a70de872b58cc93ccfe68c1989", "filename": "src/libextra/arc.rs", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/20fad0f5fff381210bfe79b35a5fe8332ec86b34/src%2Flibextra%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20fad0f5fff381210bfe79b35a5fe8332ec86b34/src%2Flibextra%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Farc.rs?ref=20fad0f5fff381210bfe79b35a5fe8332ec86b34", "patch": "@@ -140,14 +140,14 @@ impl<T:Freeze+Send> Arc<T> {\n     }\n }\n \n-/**\n- * Duplicate an atomically reference counted wrapper.\n- *\n- * The resulting two `arc` objects will point to the same underlying data\n- * object. However, one of the `arc` objects can be sent to another task,\n- * allowing them to share the underlying data.\n- */\n impl<T:Freeze + Send> Clone for Arc<T> {\n+    /**\n+    * Duplicate an atomically reference counted wrapper.\n+    *\n+    * The resulting two `arc` objects will point to the same underlying data\n+    * object. However, one of the `arc` objects can be sent to another task,\n+    * allowing them to share the underlying data.\n+    */\n     fn clone(&self) -> Arc<T> {\n         Arc { x: self.x.clone() }\n     }\n@@ -164,7 +164,7 @@ struct MutexArc<T> { priv x: UnsafeAtomicRcBox<MutexArcInner<T>> }\n \n \n impl<T:Send> Clone for MutexArc<T> {\n-    /// Duplicate a mutex-protected Arc, as arc::clone.\n+    /// Duplicate a mutex-protected Arc. See arc::clone for more details.\n     fn clone(&self) -> MutexArc<T> {\n         // NB: Cloning the underlying mutex is not necessary. Its reference\n         // count would be exactly the same as the shared state's.\n@@ -312,12 +312,10 @@ struct RWArc<T> {\n     priv x: UnsafeAtomicRcBox<RWArcInner<T>>,\n }\n \n-impl<T:Freeze + Send> RWArc<T> {\n-    /// Duplicate a rwlock-protected Arc, as arc::clone.\n-    pub fn clone(&self) -> RWArc<T> {\n-        RWArc {\n-            x: self.x.clone(),\n-        }\n+impl<T:Freeze + Send> Clone for RWArc<T> {\n+    /// Duplicate a rwlock-protected Arc. See arc::clone for more details.\n+    fn clone(&self) -> RWArc<T> {\n+        RWArc { x: self.x.clone() }\n     }\n \n }"}, {"sha": "42f3fdc52798d6e930fb72183fa05e84b07309ad", "filename": "src/libextra/bitv.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/20fad0f5fff381210bfe79b35a5fe8332ec86b34/src%2Flibextra%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20fad0f5fff381210bfe79b35a5fe8332ec86b34/src%2Flibextra%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fbitv.rs?ref=20fad0f5fff381210bfe79b35a5fe8332ec86b34", "patch": "@@ -1638,9 +1638,9 @@ mod tests {\n     fn bench_btv_small_iter(b: &mut BenchHarness) {\n         let bitv = Bitv::new(uint::bits, false);\n         do b.iter {\n-            let mut sum = 0;\n+            let mut _sum = 0;\n             foreach pres in bitv.iter() {\n-                sum += pres as uint;\n+                _sum += pres as uint;\n             }\n         }\n     }\n@@ -1649,9 +1649,9 @@ mod tests {\n     fn bench_bitv_big_iter(b: &mut BenchHarness) {\n         let bitv = Bitv::new(BENCH_BITS, false);\n         do b.iter {\n-            let mut sum = 0;\n+            let mut _sum = 0;\n             foreach pres in bitv.iter() {\n-                sum += pres as uint;\n+                _sum += pres as uint;\n             }\n         }\n     }\n@@ -1661,9 +1661,9 @@ mod tests {\n         let bitv = BitvSet::from_bitv(from_fn(BENCH_BITS,\n                                               |idx| {idx % 3 == 0}));\n         do b.iter {\n-            let mut sum = 0;\n+            let mut _sum = 0;\n             foreach idx in bitv.iter() {\n-                sum += idx;\n+                _sum += idx;\n             }\n         }\n     }"}, {"sha": "b43962dae40feec64c2c71c3c5a8296e6ce38b0e", "filename": "src/libextra/flatpipes.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/20fad0f5fff381210bfe79b35a5fe8332ec86b34/src%2Flibextra%2Fflatpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20fad0f5fff381210bfe79b35a5fe8332ec86b34/src%2Flibextra%2Fflatpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fflatpipes.rs?ref=20fad0f5fff381210bfe79b35a5fe8332ec86b34", "patch": "@@ -633,16 +633,12 @@ pub mod bytepipes {\n #[cfg(test)]\n mod test {\n \n-    use flatpipes::{Flattener, Unflattener};\n-    use flatpipes::bytepipes::*;\n+    use flatpipes::BytePort;\n     use flatpipes::pod;\n     use flatpipes::serial;\n     use io_util::BufReader;\n-    use flatpipes::{BytePort, FlatChan, FlatPort};\n \n-    use std::comm;\n     use std::io::BytesWriter;\n-    use std::result;\n     use std::task;\n \n     #[test]\n@@ -727,7 +723,11 @@ mod test {\n \n     // FIXME #2064: Networking doesn't work on x86\n     // XXX Broken until networking support is added back\n-    /*#[test]\n+    /*\n+    use flatpipes::{Flattener, Unflattener, FlatChan, FlatPort};\n+    use flatpipes::bytepipes::*;\n+\n+    #[test]\n     #[cfg(target_arch = \"x86_64\")]\n     fn test_pod_tcp_stream() {\n         fn reader_port(buf: TcpSocketBuf\n@@ -767,6 +767,8 @@ mod test {\n         port: uint) {\n \n         use std::cell::Cell;\n+        use std::comm;\n+        use std::result;\n         use net::ip;\n         use net::tcp;\n         use uv;"}, {"sha": "9922106a66380a0003d62a0dd720b9244006529e", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20fad0f5fff381210bfe79b35a5fe8332ec86b34/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20fad0f5fff381210bfe79b35a5fe8332ec86b34/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=20fad0f5fff381210bfe79b35a5fe8332ec86b34", "patch": "@@ -1159,7 +1159,7 @@ fn store_non_ref_bindings(bcx: @mut Block,\n                     add_clean_temp_mem(bcx, lldest, binding_info.ty);\n                     temp_cleanups.push(lldest);\n                     temp_cleanups\n-                }\n+                };\n             }\n             TrByRef => {}\n         }"}, {"sha": "feecb82eaab9041262a2fd3e21b5e3e7574b119e", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/20fad0f5fff381210bfe79b35a5fe8332ec86b34/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20fad0f5fff381210bfe79b35a5fe8332ec86b34/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=20fad0f5fff381210bfe79b35a5fe8332ec86b34", "patch": "@@ -2750,13 +2750,8 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n       }\n       ast::expr_vec(ref args, mutbl) => {\n         let t: ty::t = fcx.infcx().next_ty_var();\n-        let mut arg_is_bot = false;\n-        let mut arg_is_err = false;\n         foreach e in args.iter() {\n             check_expr_has_type(fcx, *e, t);\n-            let arg_t = fcx.expr_ty(*e);\n-            arg_is_bot |= ty::type_is_bot(arg_t);\n-            arg_is_err |= ty::type_is_error(arg_t);\n         }\n         let typ = ty::mk_evec(tcx, ty::mt {ty: t, mutbl: mutbl},\n                               ty::vstore_fixed(args.len()));"}, {"sha": "c662e5997afa6414d0fb797887d3a79a3a24d2ac", "filename": "src/libstd/logging.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/20fad0f5fff381210bfe79b35a5fe8332ec86b34/src%2Flibstd%2Flogging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20fad0f5fff381210bfe79b35a5fe8332ec86b34/src%2Flibstd%2Flogging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flogging.rs?ref=20fad0f5fff381210bfe79b35a5fe8332ec86b34", "patch": "@@ -85,6 +85,16 @@ pub fn log_type<T>(level: u32, object: &T) {\n fn newsched_log_str(msg: ~str) {\n     use rt::task::Task;\n     use rt::local::Local;\n+    use str::StrSlice;\n+    use container::Container;\n+\n+    // Truncate the string\n+    let buf_bytes = 256;\n+    let msg = if msg.len() > buf_bytes {\n+        msg.slice(0, buf_bytes) + \"[...]\"\n+    } else {\n+        msg\n+    };\n \n     unsafe {\n         match Local::try_unsafe_borrow::<Task>() {"}, {"sha": "547c453b02d1a143f5697cc84ecb189a601ac9c6", "filename": "src/libstd/option.rs", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/20fad0f5fff381210bfe79b35a5fe8332ec86b34/src%2Flibstd%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20fad0f5fff381210bfe79b35a5fe8332ec86b34/src%2Flibstd%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Foption.rs?ref=20fad0f5fff381210bfe79b35a5fe8332ec86b34", "patch": "@@ -235,19 +235,24 @@ impl<T> Option<T> {\n         self.take().map_consume_default(def, blk)\n     }\n \n-    /// Apply a function to the contained value or do nothing\n-    pub fn mutate(&mut self, f: &fn(T) -> T) {\n+    /// Apply a function to the contained value or do nothing.\n+    /// Returns true if the contained value was mutated.\n+    pub fn mutate(&mut self, f: &fn(T) -> T) -> bool {\n         if self.is_some() {\n             *self = Some(f(self.take_unwrap()));\n-        }\n+            true\n+        } else { false }\n     }\n \n-    /// Apply a function to the contained value or set it to a default\n-    pub fn mutate_default(&mut self, def: T, f: &fn(T) -> T) {\n+    /// Apply a function to the contained value or set it to a default.\n+    /// Returns true if the contained value was mutated, or false if set to the default.\n+    pub fn mutate_default(&mut self, def: T, f: &fn(T) -> T) -> bool {\n         if self.is_some() {\n             *self = Some(f(self.take_unwrap()));\n+            true\n         } else {\n             *self = Some(def);\n+            false\n         }\n     }\n \n@@ -575,4 +580,18 @@ mod tests {\n         assert_eq!(it.size_hint(), (0, Some(0)));\n         assert!(it.next().is_none());\n     }\n+\n+    #[test]\n+    fn test_mutate() {\n+        let mut x = Some(3i);\n+        assert!(x.mutate(|i| i+1));\n+        assert_eq!(x, Some(4i));\n+        assert!(x.mutate_default(0, |i| i+1));\n+        assert_eq!(x, Some(5i));\n+        x = None;\n+        assert!(!x.mutate(|i| i+1));\n+        assert_eq!(x, None);\n+        assert!(!x.mutate_default(0i, |i| i+1));\n+        assert_eq!(x, Some(0i));\n+    }\n }"}, {"sha": "1f6adaf040b7e45c6f57f43ffd14863a06513618", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 51, "deletions": 8, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/20fad0f5fff381210bfe79b35a5fe8332ec86b34/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20fad0f5fff381210bfe79b35a5fe8332ec86b34/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=20fad0f5fff381210bfe79b35a5fe8332ec86b34", "patch": "@@ -2141,11 +2141,15 @@ macro_rules! iterator {\n                         None\n                     } else {\n                         let old = self.ptr;\n-                        // purposefully don't use 'ptr.offset' because for\n-                        // vectors with 0-size elements this would return the\n-                        // same pointer.\n-                        self.ptr = cast::transmute(self.ptr as uint +\n-                                                   sys::nonzero_size_of::<T>());\n+                        self.ptr = if sys::size_of::<T>() == 0 {\n+                            // purposefully don't use 'ptr.offset' because for\n+                            // vectors with 0-size elements this would return the\n+                            // same pointer.\n+                            cast::transmute(self.ptr as uint + 1)\n+                        } else {\n+                            self.ptr.offset(1)\n+                        };\n+\n                         Some(cast::transmute(old))\n                     }\n                 }\n@@ -2171,9 +2175,12 @@ macro_rules! double_ended_iterator {\n                     if self.end == self.ptr {\n                         None\n                     } else {\n-                        // See above for why 'ptr.offset' isn't used\n-                        self.end = cast::transmute(self.end as uint -\n-                                                   sys::nonzero_size_of::<T>());\n+                        self.end = if sys::size_of::<T>() == 0 {\n+                            // See above for why 'ptr.offset' isn't used\n+                            cast::transmute(self.end as uint - 1)\n+                        } else {\n+                            self.end.offset(-1)\n+                        };\n                         Some(cast::transmute(self.end))\n                     }\n                 }\n@@ -3566,3 +3573,39 @@ mod tests {\n         assert!(cnt == 3);\n     }\n }\n+\n+#[cfg(test)]\n+mod bench {\n+    use extra::test::BenchHarness;\n+    use vec;\n+    use option::*;\n+\n+    #[bench]\n+    fn iterator(bh: &mut BenchHarness) {\n+        // peculiar numbers to stop LLVM from optimising the summation\n+        // out.\n+        let v = vec::from_fn(100, |i| i ^ (i << 1) ^ (i >> 1));\n+\n+        do bh.iter {\n+            let mut sum = 0;\n+            foreach x in v.iter() {\n+                sum += *x;\n+            }\n+            // sum == 11806, to stop dead code elimination.\n+            if sum == 0 {fail!()}\n+        }\n+    }\n+\n+    #[bench]\n+    fn mut_iterator(bh: &mut BenchHarness) {\n+        let mut v = vec::from_elem(100, 0);\n+\n+        do bh.iter {\n+            let mut i = 0;\n+            foreach x in v.mut_iter() {\n+                *x = i;\n+                i += 1;\n+            }\n+        }\n+    }\n+}"}, {"sha": "8e70c2c3561a2fce2364f19b98791a4929bc5981", "filename": "src/test/run-fail/assert-macro-explicit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20fad0f5fff381210bfe79b35a5fe8332ec86b34/src%2Ftest%2Frun-fail%2Fassert-macro-explicit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20fad0f5fff381210bfe79b35a5fe8332ec86b34/src%2Ftest%2Frun-fail%2Fassert-macro-explicit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fassert-macro-explicit.rs?ref=20fad0f5fff381210bfe79b35a5fe8332ec86b34", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern:task failed at 'assertion failed: false'\n+// error-pattern:failed at 'assertion failed: false'\n \n fn main() {\n     assert!(false);"}, {"sha": "2159f68cc71701cf42c5d8812c4cecd833a2dc90", "filename": "src/test/run-fail/assert-macro-fmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20fad0f5fff381210bfe79b35a5fe8332ec86b34/src%2Ftest%2Frun-fail%2Fassert-macro-fmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20fad0f5fff381210bfe79b35a5fe8332ec86b34/src%2Ftest%2Frun-fail%2Fassert-macro-fmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fassert-macro-fmt.rs?ref=20fad0f5fff381210bfe79b35a5fe8332ec86b34", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern:task failed at 'test-assert-fmt 42 rust'\n+// error-pattern:failed at 'test-assert-fmt 42 rust'\n \n fn main() {\n     assert!(false, \"test-assert-fmt %d %s\", 42, \"rust\");"}, {"sha": "f45af290b3d3da28e271af0fe7296aaf0f84150c", "filename": "src/test/run-fail/assert-macro-owned.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20fad0f5fff381210bfe79b35a5fe8332ec86b34/src%2Ftest%2Frun-fail%2Fassert-macro-owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20fad0f5fff381210bfe79b35a5fe8332ec86b34/src%2Ftest%2Frun-fail%2Fassert-macro-owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fassert-macro-owned.rs?ref=20fad0f5fff381210bfe79b35a5fe8332ec86b34", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern:task failed at 'test-assert-owned'\n+// error-pattern:failed at 'test-assert-owned'\n \n fn main() {\n     assert!(false, ~\"test-assert-owned\");"}, {"sha": "a35258462deaa7f4ad569034ee07916d4981e939", "filename": "src/test/run-fail/assert-macro-static.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20fad0f5fff381210bfe79b35a5fe8332ec86b34/src%2Ftest%2Frun-fail%2Fassert-macro-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20fad0f5fff381210bfe79b35a5fe8332ec86b34/src%2Ftest%2Frun-fail%2Fassert-macro-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fassert-macro-static.rs?ref=20fad0f5fff381210bfe79b35a5fe8332ec86b34", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern:task failed at 'test-assert-static'\n+// error-pattern:failed at 'test-assert-static'\n \n fn main() {\n     assert!(false, \"test-assert-static\");"}, {"sha": "13e3a6a31a8fa535139ddbe6710d9d5a41925781", "filename": "src/test/run-fail/fail-macro-explicit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20fad0f5fff381210bfe79b35a5fe8332ec86b34/src%2Ftest%2Frun-fail%2Ffail-macro-explicit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20fad0f5fff381210bfe79b35a5fe8332ec86b34/src%2Ftest%2Frun-fail%2Ffail-macro-explicit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ffail-macro-explicit.rs?ref=20fad0f5fff381210bfe79b35a5fe8332ec86b34", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern:task failed at 'explicit failure'\n+// error-pattern:failed at 'explicit failure'\n \n fn main() {\n     fail!();"}, {"sha": "5fc51ac674581e34f6c64c571fd3a76d811e7792", "filename": "src/test/run-fail/fail-macro-fmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20fad0f5fff381210bfe79b35a5fe8332ec86b34/src%2Ftest%2Frun-fail%2Ffail-macro-fmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20fad0f5fff381210bfe79b35a5fe8332ec86b34/src%2Ftest%2Frun-fail%2Ffail-macro-fmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ffail-macro-fmt.rs?ref=20fad0f5fff381210bfe79b35a5fe8332ec86b34", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern:task failed at 'test-fail-fmt 42 rust'\n+// error-pattern:failed at 'test-fail-fmt 42 rust'\n \n fn main() {\n     fail!(\"test-fail-fmt %d %s\", 42, \"rust\");"}, {"sha": "e59f5bdcaa1797d8e2507614879291f3f9488f1e", "filename": "src/test/run-fail/fail-macro-owned.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20fad0f5fff381210bfe79b35a5fe8332ec86b34/src%2Ftest%2Frun-fail%2Ffail-macro-owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20fad0f5fff381210bfe79b35a5fe8332ec86b34/src%2Ftest%2Frun-fail%2Ffail-macro-owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ffail-macro-owned.rs?ref=20fad0f5fff381210bfe79b35a5fe8332ec86b34", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern:task failed at 'test-fail-owned'\n+// error-pattern:failed at 'test-fail-owned'\n \n fn main() {\n     fail!(\"test-fail-owned\");"}, {"sha": "688ca4ce7e5720145a6a7f2efc721753639c3bae", "filename": "src/test/run-fail/fail-macro-static.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20fad0f5fff381210bfe79b35a5fe8332ec86b34/src%2Ftest%2Frun-fail%2Ffail-macro-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20fad0f5fff381210bfe79b35a5fe8332ec86b34/src%2Ftest%2Frun-fail%2Ffail-macro-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ffail-macro-static.rs?ref=20fad0f5fff381210bfe79b35a5fe8332ec86b34", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern:task failed at 'test-fail-static'\n+// error-pattern:failed at 'test-fail-static'\n \n fn main() {\n     fail!(\"test-fail-static\");"}]}