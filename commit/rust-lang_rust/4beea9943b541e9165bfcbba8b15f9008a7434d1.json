{"sha": "4beea9943b541e9165bfcbba8b15f9008a7434d1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiZWVhOTk0M2I1NDFlOTE2NWJmY2JiYThiMTVmOTAwOGE3NDM0ZDE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-06-11T14:50:16Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-06-26T14:59:40Z"}, "message": "make `Subtype` a true query", "tree": {"sha": "02cd122369f3fc93e01e51fe8f641787035104bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02cd122369f3fc93e01e51fe8f641787035104bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4beea9943b541e9165bfcbba8b15f9008a7434d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4beea9943b541e9165bfcbba8b15f9008a7434d1", "html_url": "https://github.com/rust-lang/rust/commit/4beea9943b541e9165bfcbba8b15f9008a7434d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4beea9943b541e9165bfcbba8b15f9008a7434d1/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71ce2e7eb6d941def725e85b8e9a23c75472ec62", "url": "https://api.github.com/repos/rust-lang/rust/commits/71ce2e7eb6d941def725e85b8e9a23c75472ec62", "html_url": "https://github.com/rust-lang/rust/commit/71ce2e7eb6d941def725e85b8e9a23c75472ec62"}], "stats": {"total": 113, "additions": 98, "deletions": 15}, "files": [{"sha": "6f0b794129bd43a7053ead7306e9b0a1526a63da", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4beea9943b541e9165bfcbba8b15f9008a7434d1/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4beea9943b541e9165bfcbba8b15f9008a7434d1/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=4beea9943b541e9165bfcbba8b15f9008a7434d1", "patch": "@@ -71,7 +71,8 @@ use std::fmt;\n use std::hash::Hash;\n use syntax_pos::symbol::InternedString;\n use traits::query::{\n-    CanonicalProjectionGoal, CanonicalTyGoal, CanonicalTypeOpEqGoal, CanonicalPredicateGoal,\n+    CanonicalProjectionGoal, CanonicalTyGoal, CanonicalTypeOpEqGoal, CanonicalTypeOpSubtypeGoal,\n+    CanonicalPredicateGoal,\n };\n use ty::{TyCtxt, Instance, InstanceDef, ParamEnv, ParamEnvAnd, PolyTraitRef, Ty};\n use ty::subst::Substs;\n@@ -649,6 +650,7 @@ define_dep_nodes!( <'tcx>\n     [] DropckOutlives(CanonicalTyGoal<'tcx>),\n     [] EvaluateObligation(CanonicalPredicateGoal<'tcx>),\n     [] TypeOpEq(CanonicalTypeOpEqGoal<'tcx>),\n+    [] TypeOpSubtype(CanonicalTypeOpSubtypeGoal<'tcx>),\n \n     [] SubstituteNormalizeAndTestPredicates { key: (DefId, &'tcx Substs<'tcx>) },\n "}, {"sha": "47f55b7e5e41a814b8509e2924b9b713e7542625", "filename": "src/librustc/traits/query/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4beea9943b541e9165bfcbba8b15f9008a7434d1/src%2Flibrustc%2Ftraits%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4beea9943b541e9165bfcbba8b15f9008a7434d1/src%2Flibrustc%2Ftraits%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fmod.rs?ref=4beea9943b541e9165bfcbba8b15f9008a7434d1", "patch": "@@ -35,6 +35,9 @@ pub type CanonicalPredicateGoal<'tcx> =\n pub type CanonicalTypeOpEqGoal<'tcx> =\n     Canonical<'tcx, type_op::eq::Eq<'tcx>>;\n \n+pub type CanonicalTypeOpSubtypeGoal<'tcx> =\n+    Canonical<'tcx, type_op::subtype::Subtype<'tcx>>;\n+\n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n pub struct NoSolution;\n "}, {"sha": "01f9386bec46033f160e3dd1d0b3c3adb9003cbc", "filename": "src/librustc/traits/query/type_op/subtype.rs", "status": "modified", "additions": 38, "deletions": 13, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/4beea9943b541e9165bfcbba8b15f9008a7434d1/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fsubtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4beea9943b541e9165bfcbba8b15f9008a7434d1/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fsubtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fsubtype.rs?ref=4beea9943b541e9165bfcbba8b15f9008a7434d1", "patch": "@@ -8,15 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use infer::{InferCtxt, InferResult};\n-use traits::ObligationCause;\n+use infer::canonical::{Canonical, CanonicalizedQueryResult};\n use ty::{ParamEnv, Ty, TyCtxt};\n \n-#[derive(Debug)]\n+#[derive(Copy, Clone, Debug, Hash, PartialEq, Eq)]\n pub struct Subtype<'tcx> {\n-    param_env: ParamEnv<'tcx>,\n-    sub: Ty<'tcx>,\n-    sup: Ty<'tcx>,\n+    pub param_env: ParamEnv<'tcx>,\n+    pub sub: Ty<'tcx>,\n+    pub sup: Ty<'tcx>,\n }\n \n impl<'tcx> Subtype<'tcx> {\n@@ -29,20 +28,46 @@ impl<'tcx> Subtype<'tcx> {\n     }\n }\n \n-impl<'gcx, 'tcx> super::TypeOp<'gcx, 'tcx> for Subtype<'tcx> {\n-    type Output = ();\n+impl<'gcx: 'tcx, 'tcx> super::QueryTypeOp<'gcx, 'tcx> for Subtype<'tcx> {\n+    type QueryResult = ();\n \n-    fn trivial_noop(self, _tcx: TyCtxt<'_, 'gcx, 'tcx>) -> Result<Self::Output, Self> {\n+    fn trivial_noop(self, _tcx: TyCtxt<'_, 'gcx, 'tcx>) -> Result<(), Self> {\n         if self.sub == self.sup {\n             Ok(())\n         } else {\n             Err(self)\n         }\n     }\n \n-    fn perform(self, infcx: &InferCtxt<'_, 'gcx, 'tcx>) -> InferResult<'tcx, Self::Output> {\n-        infcx\n-            .at(&ObligationCause::dummy(), self.param_env)\n-            .sup(self.sup, self.sub)\n+    fn param_env(&self) -> ParamEnv<'tcx> {\n+        self.param_env\n     }\n+\n+    fn perform_query(\n+        tcx: TyCtxt<'_, 'gcx, 'tcx>,\n+        canonicalized: Canonical<'gcx, Subtype<'gcx>>,\n+    ) -> CanonicalizedQueryResult<'gcx, ()> {\n+        tcx.type_op_subtype(canonicalized).unwrap()\n+    }\n+}\n+\n+BraceStructTypeFoldableImpl! {\n+    impl<'tcx> TypeFoldable<'tcx> for Subtype<'tcx> {\n+        param_env,\n+        sub,\n+        sup,\n+    }\n+}\n+\n+BraceStructLiftImpl! {\n+    impl<'a, 'tcx> Lift<'tcx> for Subtype<'a> {\n+        type Lifted = Subtype<'tcx>;\n+        param_env,\n+        sub,\n+        sup,\n+    }\n+}\n+\n+impl_stable_hash_for! {\n+    struct Subtype<'tcx> { param_env, sub, sup }\n }"}, {"sha": "bccdec270998ee67ca820f01a5f3346919e1fc2a", "filename": "src/librustc/ty/query/config.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4beea9943b541e9165bfcbba8b15f9008a7434d1/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4beea9943b541e9165bfcbba8b15f9008a7434d1/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs?ref=4beea9943b541e9165bfcbba8b15f9008a7434d1", "patch": "@@ -14,6 +14,7 @@ use hir::def_id::{CrateNum, DefId, DefIndex};\n use mir::interpret::{GlobalId, ConstValue};\n use traits::query::{\n     CanonicalPredicateGoal, CanonicalProjectionGoal, CanonicalTyGoal, CanonicalTypeOpEqGoal,\n+    CanonicalTypeOpSubtypeGoal,\n };\n use ty::{self, ParamEnvAnd, Ty, TyCtxt};\n use ty::subst::Substs;\n@@ -110,6 +111,12 @@ impl<'tcx> QueryDescription<'tcx> for queries::type_op_eq<'tcx> {\n     }\n }\n \n+impl<'tcx> QueryDescription<'tcx> for queries::type_op_subtype<'tcx> {\n+    fn describe(_tcx: TyCtxt, goal: CanonicalTypeOpSubtypeGoal<'tcx>) -> String {\n+        format!(\"evaluating `type_op_eq` `{:?}`\", goal)\n+    }\n+}\n+\n impl<'tcx> QueryDescription<'tcx> for queries::is_copy_raw<'tcx> {\n     fn describe(_tcx: TyCtxt, env: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> String {\n         format!(\"computing whether `{}` is `Copy`\", env.value)"}, {"sha": "e848fa2c347d396a3f4935f3437cf3413be64fe0", "filename": "src/librustc/ty/query/mod.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4beea9943b541e9165bfcbba8b15f9008a7434d1/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4beea9943b541e9165bfcbba8b15f9008a7434d1/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs?ref=4beea9943b541e9165bfcbba8b15f9008a7434d1", "patch": "@@ -34,7 +34,7 @@ use session::{CompileResult, CrateDisambiguator};\n use session::config::OutputFilenames;\n use traits::{self, Vtable};\n use traits::query::{CanonicalPredicateGoal, CanonicalProjectionGoal,\n-                    CanonicalTyGoal, CanonicalTypeOpEqGoal, NoSolution};\n+                    CanonicalTyGoal, CanonicalTypeOpEqGoal, CanonicalTypeOpSubtypeGoal, NoSolution};\n use traits::query::dropck_outlives::{DtorckConstraint, DropckOutlivesResult};\n use traits::query::normalize::NormalizationResult;\n use traits::specialization_graph;\n@@ -454,6 +454,14 @@ define_queries! { <'tcx>\n         NoSolution,\n     >,\n \n+    /// Do not call this query directly: invoke `infcx.at().subtype()` instead.\n+    [] fn type_op_subtype: TypeOpSubtype(\n+        CanonicalTypeOpSubtypeGoal<'tcx>\n+    ) -> Result<\n+        Lrc<Canonical<'tcx, canonical::QueryResult<'tcx, ()>>>,\n+        NoSolution,\n+    >,\n+\n     [] fn substitute_normalize_and_test_predicates:\n         substitute_normalize_and_test_predicates_node((DefId, &'tcx Substs<'tcx>)) -> bool,\n "}, {"sha": "2380764252b08807731a0258f45431a6aeca092f", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4beea9943b541e9165bfcbba8b15f9008a7434d1/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4beea9943b541e9165bfcbba8b15f9008a7434d1/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=4beea9943b541e9165bfcbba8b15f9008a7434d1", "patch": "@@ -1029,6 +1029,7 @@ pub fn force_from_dep_node<'a, 'gcx, 'lcx>(tcx: TyCtxt<'a, 'gcx, 'lcx>,\n         DepKind::DropckOutlives |\n         DepKind::EvaluateObligation |\n         DepKind::TypeOpEq |\n+        DepKind::TypeOpSubtype |\n         DepKind::SubstituteNormalizeAndTestPredicates |\n         DepKind::InstanceDefSizeEstimate |\n         DepKind::ProgramClausesForEnv |"}, {"sha": "671e352c0e4d0b475ab7b623714449280c37dffb", "filename": "src/librustc_traits/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4beea9943b541e9165bfcbba8b15f9008a7434d1/src%2Flibrustc_traits%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4beea9943b541e9165bfcbba8b15f9008a7434d1/src%2Flibrustc_traits%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flib.rs?ref=4beea9943b541e9165bfcbba8b15f9008a7434d1", "patch": "@@ -35,6 +35,7 @@ mod normalize_projection_ty;\n mod normalize_erasing_regions;\n pub mod lowering;\n mod type_op_eq;\n+mod type_op_subtype;\n \n use rustc::ty::query::Providers;\n \n@@ -49,6 +50,7 @@ pub fn provide(p: &mut Providers) {\n         program_clauses_for_env: lowering::program_clauses_for_env,\n         evaluate_obligation: evaluate_obligation::evaluate_obligation,\n         type_op_eq: type_op_eq::type_op_eq,\n+        type_op_subtype: type_op_subtype::type_op_subtype,\n         ..*p\n     };\n }"}, {"sha": "1fa5ec915f23babc1b16d7e4b672db998d5b596b", "filename": "src/librustc_traits/type_op_subtype.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/4beea9943b541e9165bfcbba8b15f9008a7434d1/src%2Flibrustc_traits%2Ftype_op_subtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4beea9943b541e9165bfcbba8b15f9008a7434d1/src%2Flibrustc_traits%2Ftype_op_subtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Ftype_op_subtype.rs?ref=4beea9943b541e9165bfcbba8b15f9008a7434d1", "patch": "@@ -0,0 +1,35 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use rustc::infer::canonical::{Canonical, QueryResult};\n+use rustc::traits::query::type_op::subtype::Subtype;\n+use rustc::traits::query::NoSolution;\n+use rustc::traits::{FulfillmentContext, ObligationCause};\n+use rustc::ty::TyCtxt;\n+use rustc_data_structures::sync::Lrc;\n+use syntax::codemap::DUMMY_SP;\n+\n+crate fn type_op_subtype<'tcx>(\n+    tcx: TyCtxt<'_, 'tcx, 'tcx>,\n+    canonicalized: Canonical<'tcx, Subtype<'tcx>>,\n+) -> Result<Lrc<Canonical<'tcx, QueryResult<'tcx, ()>>>, NoSolution> {\n+    let tcx = tcx.global_tcx();\n+    tcx.infer_ctxt().enter(|ref infcx| {\n+        let (Subtype { param_env, sub, sup }, canonical_inference_vars) =\n+            infcx.instantiate_canonical_with_fresh_inference_vars(DUMMY_SP, &canonicalized);\n+        let fulfill_cx = &mut FulfillmentContext::new();\n+        let obligations = match infcx.at(&ObligationCause::dummy(), param_env).sup(sup, sub) {\n+            Ok(v) => v.into_obligations(),\n+            Err(_) => return Err(NoSolution),\n+        };\n+        fulfill_cx.register_predicate_obligations(infcx, obligations);\n+        infcx.make_canonicalized_query_result(canonical_inference_vars, (), fulfill_cx)\n+    })\n+}"}]}