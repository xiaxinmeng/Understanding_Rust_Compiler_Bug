{"sha": "4bdfb0741dbcecd5279a2635c3280726db0604b5", "node_id": "C_kwDOAAsO6NoAKDRiZGZiMDc0MWRiY2VjZDUyNzlhMjYzNWMzMjgwNzI2ZGIwNjA0YjU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-17T13:08:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-17T13:08:47Z"}, "message": "Auto merge of #10097 - flip1995:rustup, r=flip1995\n\nRustup\n\nr? `@ghost`\n\nI'm on the train and my internet is too bad to download the necessary toolchain, so I have to use CI to find sync fallout.\n\nchangelog: none\n<!-- changelog_checked -->", "tree": {"sha": "4328872848adfd0126eba3d52350824e46d4fa69", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4328872848adfd0126eba3d52350824e46d4fa69"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4bdfb0741dbcecd5279a2635c3280726db0604b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4bdfb0741dbcecd5279a2635c3280726db0604b5", "html_url": "https://github.com/rust-lang/rust/commit/4bdfb0741dbcecd5279a2635c3280726db0604b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4bdfb0741dbcecd5279a2635c3280726db0604b5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "391b2a6fac5bed704c606173eafe938eb5625347", "url": "https://api.github.com/repos/rust-lang/rust/commits/391b2a6fac5bed704c606173eafe938eb5625347", "html_url": "https://github.com/rust-lang/rust/commit/391b2a6fac5bed704c606173eafe938eb5625347"}, {"sha": "7198989d45e4e47ccc30077c522468cac172766c", "url": "https://api.github.com/repos/rust-lang/rust/commits/7198989d45e4e47ccc30077c522468cac172766c", "html_url": "https://github.com/rust-lang/rust/commit/7198989d45e4e47ccc30077c522468cac172766c"}], "stats": {"total": 247, "additions": 129, "deletions": 118}, "files": [{"sha": "e1b15cc49da4ca9331764abe68f22580d8142bfb", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4bdfb0741dbcecd5279a2635c3280726db0604b5/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4bdfb0741dbcecd5279a2635c3280726db0604b5/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=4bdfb0741dbcecd5279a2635c3280726db0604b5", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"clippy\"\n-version = \"0.1.67\"\n+version = \"0.1.68\"\n description = \"A bunch of helpful lints to avoid common pitfalls in Rust\"\n repository = \"https://github.com/rust-lang/rust-clippy\"\n readme = \"README.md\""}, {"sha": "38a87017635ba221e4916241082ead8127f4db62", "filename": "clippy_lints/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4bdfb0741dbcecd5279a2635c3280726db0604b5/clippy_lints%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4bdfb0741dbcecd5279a2635c3280726db0604b5/clippy_lints%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2FCargo.toml?ref=4bdfb0741dbcecd5279a2635c3280726db0604b5", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"clippy_lints\"\n-version = \"0.1.67\"\n+version = \"0.1.68\"\n description = \"A bunch of helpful lints to avoid common pitfalls in Rust\"\n repository = \"https://github.com/rust-lang/rust-clippy\"\n readme = \"README.md\""}, {"sha": "7b43d8ccc67d1fec92a5be0389860e9c8c6658a5", "filename": "clippy_lints/src/dereference.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4bdfb0741dbcecd5279a2635c3280726db0604b5/clippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bdfb0741dbcecd5279a2635c3280726db0604b5/clippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdereference.rs?ref=4bdfb0741dbcecd5279a2635c3280726db0604b5", "patch": "@@ -1244,7 +1244,7 @@ fn is_mixed_projection_predicate<'tcx>(\n         let mut projection_ty = projection_predicate.projection_ty;\n         loop {\n             match projection_ty.self_ty().kind() {\n-                ty::Projection(inner_projection_ty) => {\n+                ty::Alias(ty::Projection, inner_projection_ty) => {\n                     projection_ty = *inner_projection_ty;\n                 }\n                 ty::Param(param_ty) => {\n@@ -1330,7 +1330,7 @@ fn replace_types<'tcx>(\n                     && let Some(term_ty) = projection_predicate.term.ty()\n                     && let ty::Param(term_param_ty) = term_ty.kind()\n                 {\n-                    let item_def_id = projection_predicate.projection_ty.item_def_id;\n+                    let item_def_id = projection_predicate.projection_ty.def_id;\n                     let assoc_item = cx.tcx.associated_item(item_def_id);\n                     let projection = cx.tcx\n                         .mk_projection(assoc_item.def_id, cx.tcx.mk_substs_trait(new_ty, []));\n@@ -1390,10 +1390,15 @@ fn ty_auto_deref_stability<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>, precedenc\n                 continue;\n             },\n             ty::Param(_) => TyPosition::new_deref_stable_for_result(precedence, ty),\n-            ty::Projection(_) if ty.has_non_region_param() => TyPosition::new_deref_stable_for_result(precedence, ty),\n-            ty::Infer(_) | ty::Error(_) | ty::Bound(..) | ty::Opaque(..) | ty::Placeholder(_) | ty::Dynamic(..) => {\n-                Position::ReborrowStable(precedence).into()\n+            ty::Alias(ty::Projection, _) if ty.has_non_region_param() => {\n+                TyPosition::new_deref_stable_for_result(precedence, ty)\n             },\n+            ty::Infer(_)\n+            | ty::Error(_)\n+            | ty::Bound(..)\n+            | ty::Alias(ty::Opaque, ..)\n+            | ty::Placeholder(_)\n+            | ty::Dynamic(..) => Position::ReborrowStable(precedence).into(),\n             ty::Adt(..) if ty.has_placeholders() || ty.has_opaque_types() => {\n                 Position::ReborrowStable(precedence).into()\n             },\n@@ -1417,7 +1422,7 @@ fn ty_auto_deref_stability<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>, precedenc\n             | ty::Closure(..)\n             | ty::Never\n             | ty::Tuple(_)\n-            | ty::Projection(_) => {\n+            | ty::Alias(ty::Projection, _) => {\n                 Position::DerefStable(precedence, ty.is_sized(cx.tcx, cx.param_env.without_caller_bounds())).into()\n             },\n         };"}, {"sha": "cf3483d4c00b17134724bbc51eafcf6abb904aaa", "filename": "clippy_lints/src/derive.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4bdfb0741dbcecd5279a2635c3280726db0604b5/clippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bdfb0741dbcecd5279a2635c3280726db0604b5/clippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderive.rs?ref=4bdfb0741dbcecd5279a2635c3280726db0604b5", "patch": "@@ -15,7 +15,7 @@ use rustc_middle::hir::nested_filter;\n use rustc_middle::traits::Reveal;\n use rustc_middle::ty::{\n     self, Binder, BoundConstness, Clause, GenericParamDefKind, ImplPolarity, ParamEnv, PredicateKind, TraitPredicate,\n-    TraitRef, Ty, TyCtxt,\n+    Ty, TyCtxt,\n };\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n@@ -513,10 +513,7 @@ fn param_env_for_derived_eq(tcx: TyCtxt<'_>, did: DefId, eq_trait_id: DefId) ->\n         tcx.mk_predicates(ty_predicates.iter().map(|&(p, _)| p).chain(\n             params.iter().filter(|&&(_, needs_eq)| needs_eq).map(|&(param, _)| {\n                 tcx.mk_predicate(Binder::dummy(PredicateKind::Clause(Clause::Trait(TraitPredicate {\n-                    trait_ref: TraitRef::new(\n-                        eq_trait_id,\n-                        tcx.mk_substs(std::iter::once(tcx.mk_param_from_def(param))),\n-                    ),\n+                    trait_ref: tcx.mk_trait_ref(eq_trait_id, [tcx.mk_param_from_def(param)]),\n                     constness: BoundConstness::NotConst,\n                     polarity: ImplPolarity::Positive,\n                 }))))"}, {"sha": "1f56d0118a404b50d88b938620c01b70fcc11212", "filename": "clippy_lints/src/disallowed_types.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4bdfb0741dbcecd5279a2635c3280726db0604b5/clippy_lints%2Fsrc%2Fdisallowed_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bdfb0741dbcecd5279a2635c3280726db0604b5/clippy_lints%2Fsrc%2Fdisallowed_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdisallowed_types.rs?ref=4bdfb0741dbcecd5279a2635c3280726db0604b5", "patch": "@@ -106,7 +106,9 @@ impl<'tcx> LateLintPass<'tcx> for DisallowedTypes {\n \n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'tcx>) {\n         if let ItemKind::Use(path, UseKind::Single) = &item.kind {\n-            self.check_res_emit(cx, &path.res, item.span);\n+            for res in &path.res {\n+                self.check_res_emit(cx, res, item.span);\n+            }\n         }\n     }\n "}, {"sha": "a92f7548ff254d16a2f51b255675650d139e8734", "filename": "clippy_lints/src/from_over_into.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4bdfb0741dbcecd5279a2635c3280726db0604b5/clippy_lints%2Fsrc%2Ffrom_over_into.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bdfb0741dbcecd5279a2635c3280726db0604b5/clippy_lints%2Fsrc%2Ffrom_over_into.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffrom_over_into.rs?ref=4bdfb0741dbcecd5279a2635c3280726db0604b5", "patch": "@@ -78,7 +78,7 @@ impl<'tcx> LateLintPass<'tcx> for FromOverInto {\n             && let Some(GenericArgs { args: [GenericArg::Type(target_ty)], .. }) = into_trait_seg.args\n             && let Some(middle_trait_ref) = cx.tcx.impl_trait_ref(item.owner_id)\n             && cx.tcx.is_diagnostic_item(sym::Into, middle_trait_ref.def_id)\n-            && !matches!(middle_trait_ref.substs.type_at(1).kind(), ty::Opaque(..))\n+            && !matches!(middle_trait_ref.substs.type_at(1).kind(), ty::Alias(ty::Opaque, _))\n         {\n             span_lint_and_then(\n                 cx,\n@@ -127,7 +127,7 @@ impl<'a, 'tcx> Visitor<'tcx> for SelfFinder<'a, 'tcx> {\n         self.cx.tcx.hir()\n     }\n \n-    fn visit_path(&mut self, path: &'tcx Path<'tcx>, _id: HirId) {\n+    fn visit_path(&mut self, path: &Path<'tcx>, _id: HirId) {\n         for segment in path.segments {\n             match segment.ident.name {\n                 kw::SelfLower => self.lower.push(segment.ident.span),"}, {"sha": "989f83cf80d5972301fc06eef9604796f674a7b8", "filename": "clippy_lints/src/future_not_send.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4bdfb0741dbcecd5279a2635c3280726db0604b5/clippy_lints%2Fsrc%2Ffuture_not_send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bdfb0741dbcecd5279a2635c3280726db0604b5/clippy_lints%2Fsrc%2Ffuture_not_send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffuture_not_send.rs?ref=4bdfb0741dbcecd5279a2635c3280726db0604b5", "patch": "@@ -4,7 +4,7 @@ use rustc_hir::intravisit::FnKind;\n use rustc_hir::{Body, FnDecl, HirId};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::ty::{Clause, EarlyBinder, Opaque, PredicateKind};\n+use rustc_middle::ty::{self, AliasTy, Clause, EarlyBinder, PredicateKind};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::{sym, Span};\n use rustc_trait_selection::traits::error_reporting::suggestions::TypeErrCtxtExt;\n@@ -62,11 +62,11 @@ impl<'tcx> LateLintPass<'tcx> for FutureNotSend {\n             return;\n         }\n         let ret_ty = return_ty(cx, hir_id);\n-        if let Opaque(id, subst) = *ret_ty.kind() {\n-            let preds = cx.tcx.explicit_item_bounds(id);\n+        if let ty::Alias(ty::Opaque, AliasTy { def_id, substs, .. }) = *ret_ty.kind() {\n+            let preds = cx.tcx.explicit_item_bounds(def_id);\n             let mut is_future = false;\n             for &(p, _span) in preds {\n-                let p = EarlyBinder(p).subst(cx.tcx, subst);\n+                let p = EarlyBinder(p).subst(cx.tcx, substs);\n                 if let Some(trait_pred) = p.to_opt_poly_trait_pred() {\n                     if Some(trait_pred.skip_binder().trait_ref.def_id) == cx.tcx.lang_items().future_trait() {\n                         is_future = true;"}, {"sha": "6a4861747d267c83663ca3e405a8d61d13564c26", "filename": "clippy_lints/src/invalid_utf8_in_unchecked.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4bdfb0741dbcecd5279a2635c3280726db0604b5/clippy_lints%2Fsrc%2Finvalid_utf8_in_unchecked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bdfb0741dbcecd5279a2635c3280726db0604b5/clippy_lints%2Fsrc%2Finvalid_utf8_in_unchecked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finvalid_utf8_in_unchecked.rs?ref=4bdfb0741dbcecd5279a2635c3280726db0604b5", "patch": "@@ -33,7 +33,7 @@ impl<'tcx> LateLintPass<'tcx> for InvalidUtf8InUnchecked {\n         if let Some([arg]) = match_function_call(cx, expr, &paths::STR_FROM_UTF8_UNCHECKED) {\n             match &arg.kind {\n                 ExprKind::Lit(Spanned { node: lit, .. }) => {\n-                    if let LitKind::ByteStr(bytes) = &lit\n+                    if let LitKind::ByteStr(bytes, _) = &lit\n                         && std::str::from_utf8(bytes).is_err()\n                     {\n                         lint(cx, expr.span);"}, {"sha": "424c0d9e798288257d0347c61c666a12574b5f23", "filename": "clippy_lints/src/large_include_file.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4bdfb0741dbcecd5279a2635c3280726db0604b5/clippy_lints%2Fsrc%2Flarge_include_file.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bdfb0741dbcecd5279a2635c3280726db0604b5/clippy_lints%2Fsrc%2Flarge_include_file.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flarge_include_file.rs?ref=4bdfb0741dbcecd5279a2635c3280726db0604b5", "patch": "@@ -60,7 +60,7 @@ impl LateLintPass<'_> for LargeIncludeFile {\n             then {\n                 let len = match &lit.node {\n                     // include_bytes\n-                    LitKind::ByteStr(bstr) => bstr.len(),\n+                    LitKind::ByteStr(bstr, _) => bstr.len(),\n                     // include_str\n                     LitKind::Str(sym, _) => sym.as_str().len(),\n                     _ => return,"}, {"sha": "e88d1764a24896a23d168a5b01c2d908e851e804", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4bdfb0741dbcecd5279a2635c3280726db0604b5/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bdfb0741dbcecd5279a2635c3280726db0604b5/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=4bdfb0741dbcecd5279a2635c3280726db0604b5", "patch": "@@ -501,7 +501,7 @@ fn has_is_empty(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n                 .filter_by_name_unhygienic(is_empty)\n                 .any(|item| is_is_empty(cx, item))\n         }),\n-        ty::Projection(ref proj) => has_is_empty_impl(cx, proj.item_def_id),\n+        ty::Alias(ty::Projection, ref proj) => has_is_empty_impl(cx, proj.def_id),\n         ty::Adt(id, _) => has_is_empty_impl(cx, id.did()),\n         ty::Array(..) | ty::Slice(..) | ty::Str => true,\n         _ => false,"}, {"sha": "26ae4b409c79570d116147e24477ee335bda9c3f", "filename": "clippy_lints/src/macro_use.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4bdfb0741dbcecd5279a2635c3280726db0604b5/clippy_lints%2Fsrc%2Fmacro_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bdfb0741dbcecd5279a2635c3280726db0604b5/clippy_lints%2Fsrc%2Fmacro_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmacro_use.rs?ref=4bdfb0741dbcecd5279a2635c3280726db0604b5", "patch": "@@ -95,7 +95,10 @@ impl<'tcx> LateLintPass<'tcx> for MacroUseImports {\n             let hir_id = item.hir_id();\n             let attrs = cx.tcx.hir().attrs(hir_id);\n             if let Some(mac_attr) = attrs.iter().find(|attr| attr.has_name(sym::macro_use));\n-            if let Res::Def(DefKind::Mod, id) = path.res;\n+            if let Some(id) = path.res.iter().find_map(|res| match res {\n+                Res::Def(DefKind::Mod, id) => Some(id),\n+                _ => None,\n+            });\n             if !id.is_local();\n             then {\n                 for kid in cx.tcx.module_children(id).iter() {"}, {"sha": "72cdb9c17361676240c5d767cd34a67db9164dbd", "filename": "clippy_lints/src/manual_retain.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4bdfb0741dbcecd5279a2635c3280726db0604b5/clippy_lints%2Fsrc%2Fmanual_retain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bdfb0741dbcecd5279a2635c3280726db0604b5/clippy_lints%2Fsrc%2Fmanual_retain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_retain.rs?ref=4bdfb0741dbcecd5279a2635c3280726db0604b5", "patch": "@@ -70,7 +70,8 @@ impl<'tcx> LateLintPass<'tcx> for ManualRetain {\n             && seg.args.is_none()\n             && let hir::ExprKind::MethodCall(_, target_expr, [], _) = &collect_expr.kind\n             && let Some(collect_def_id) = cx.typeck_results().type_dependent_def_id(collect_expr.hir_id)\n-            && match_def_path(cx, collect_def_id, &paths::CORE_ITER_COLLECT) {\n+            && cx.tcx.is_diagnostic_item(sym::iterator_collect_fn, collect_def_id)\n+        {\n             check_into_iter(cx, parent_expr, left_expr, target_expr, &self.msrv);\n             check_iter(cx, parent_expr, left_expr, target_expr, &self.msrv);\n             check_to_owned(cx, parent_expr, left_expr, target_expr, &self.msrv);"}, {"sha": "158e6caa4de5485ebcc7b30bd7eb806bc822f84b", "filename": "clippy_lints/src/matches/match_same_arms.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4bdfb0741dbcecd5279a2635c3280726db0604b5/clippy_lints%2Fsrc%2Fmatches%2Fmatch_same_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bdfb0741dbcecd5279a2635c3280726db0604b5/clippy_lints%2Fsrc%2Fmatches%2Fmatch_same_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fmatch_same_arms.rs?ref=4bdfb0741dbcecd5279a2635c3280726db0604b5", "patch": "@@ -282,7 +282,7 @@ impl<'a> NormalizedPat<'a> {\n                 // TODO: Handle negative integers. They're currently treated as a wild match.\n                 ExprKind::Lit(lit) => match lit.node {\n                     LitKind::Str(sym, _) => Self::LitStr(sym),\n-                    LitKind::ByteStr(ref bytes) => Self::LitBytes(bytes),\n+                    LitKind::ByteStr(ref bytes, _) => Self::LitBytes(bytes),\n                     LitKind::Byte(val) => Self::LitInt(val.into()),\n                     LitKind::Char(val) => Self::LitInt(val.into()),\n                     LitKind::Int(val, _) => Self::LitInt(val),"}, {"sha": "f4d3ef3b742509f40debe7616bb272b7f295f274", "filename": "clippy_lints/src/methods/needless_collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4bdfb0741dbcecd5279a2635c3280726db0604b5/clippy_lints%2Fsrc%2Fmethods%2Fneedless_collect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bdfb0741dbcecd5279a2635c3280726db0604b5/clippy_lints%2Fsrc%2Fmethods%2Fneedless_collect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fneedless_collect.rs?ref=4bdfb0741dbcecd5279a2635c3280726db0604b5", "patch": "@@ -151,7 +151,7 @@ fn iterates_same_ty<'tcx>(cx: &LateContext<'tcx>, iter_ty: Ty<'tcx>, collect_ty:\n         && let Some(into_iter_item_proj) = make_projection(cx.tcx, into_iter_trait, item, [collect_ty])\n         && let Ok(into_iter_item_ty) = cx.tcx.try_normalize_erasing_regions(\n             cx.param_env,\n-            cx.tcx.mk_projection(into_iter_item_proj.item_def_id, into_iter_item_proj.substs)\n+            cx.tcx.mk_projection(into_iter_item_proj.def_id, into_iter_item_proj.substs)\n         )\n     {\n         iter_item_ty == into_iter_item_ty"}, {"sha": "910ee14855e234d21507ff2ef01eb25061461bbb", "filename": "clippy_lints/src/methods/option_map_unwrap_or.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4bdfb0741dbcecd5279a2635c3280726db0604b5/clippy_lints%2Fsrc%2Fmethods%2Foption_map_unwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bdfb0741dbcecd5279a2635c3280726db0604b5/clippy_lints%2Fsrc%2Fmethods%2Foption_map_unwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Foption_map_unwrap_or.rs?ref=4bdfb0741dbcecd5279a2635c3280726db0604b5", "patch": "@@ -97,7 +97,7 @@ struct UnwrapVisitor<'a, 'tcx> {\n impl<'a, 'tcx> Visitor<'tcx> for UnwrapVisitor<'a, 'tcx> {\n     type NestedFilter = nested_filter::All;\n \n-    fn visit_path(&mut self, path: &'tcx Path<'_>, _id: HirId) {\n+    fn visit_path(&mut self, path: &Path<'tcx>, _id: HirId) {\n         self.identifiers.insert(ident(path));\n         walk_path(self, path);\n     }\n@@ -116,7 +116,7 @@ struct MapExprVisitor<'a, 'tcx> {\n impl<'a, 'tcx> Visitor<'tcx> for MapExprVisitor<'a, 'tcx> {\n     type NestedFilter = nested_filter::All;\n \n-    fn visit_path(&mut self, path: &'tcx Path<'_>, _id: HirId) {\n+    fn visit_path(&mut self, path: &Path<'tcx>, _id: HirId) {\n         if self.identifiers.contains(&ident(path)) {\n             self.found_identifier = true;\n             return;"}, {"sha": "773174679dbdce618b244bfdfe9f5516d2eaaa0f", "filename": "clippy_lints/src/missing_enforced_import_rename.rs", "status": "modified", "additions": 31, "deletions": 28, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/4bdfb0741dbcecd5279a2635c3280726db0604b5/clippy_lints%2Fsrc%2Fmissing_enforced_import_rename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bdfb0741dbcecd5279a2635c3280726db0604b5/clippy_lints%2Fsrc%2Fmissing_enforced_import_rename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_enforced_import_rename.rs?ref=4bdfb0741dbcecd5279a2635c3280726db0604b5", "patch": "@@ -66,35 +66,38 @@ impl LateLintPass<'_> for ImportRename {\n     }\n \n     fn check_item(&mut self, cx: &LateContext<'_>, item: &Item<'_>) {\n-        if_chain! {\n-            if let ItemKind::Use(path, UseKind::Single) = &item.kind;\n-            if let Res::Def(_, id) = path.res;\n-            if let Some(name) = self.renames.get(&id);\n-            // Remove semicolon since it is not present for nested imports\n-            let span_without_semi = cx.sess().source_map().span_until_char(item.span, ';');\n-            if let Some(snip) = snippet_opt(cx, span_without_semi);\n-            if let Some(import) = match snip.split_once(\" as \") {\n-                None => Some(snip.as_str()),\n-                Some((import, rename)) => {\n-                    if rename.trim() == name.as_str() {\n-                        None\n-                    } else {\n-                        Some(import.trim())\n+        if let ItemKind::Use(path, UseKind::Single) = &item.kind {\n+            for &res in &path.res {\n+                if_chain! {\n+                    if let Res::Def(_, id) = res;\n+                    if let Some(name) = self.renames.get(&id);\n+                    // Remove semicolon since it is not present for nested imports\n+                    let span_without_semi = cx.sess().source_map().span_until_char(item.span, ';');\n+                    if let Some(snip) = snippet_opt(cx, span_without_semi);\n+                    if let Some(import) = match snip.split_once(\" as \") {\n+                        None => Some(snip.as_str()),\n+                        Some((import, rename)) => {\n+                            if rename.trim() == name.as_str() {\n+                                None\n+                            } else {\n+                                Some(import.trim())\n+                            }\n+                        },\n+                    };\n+                    then {\n+                        span_lint_and_sugg(\n+                            cx,\n+                            MISSING_ENFORCED_IMPORT_RENAMES,\n+                            span_without_semi,\n+                            \"this import should be renamed\",\n+                            \"try\",\n+                            format!(\n+                                \"{import} as {name}\",\n+                            ),\n+                            Applicability::MachineApplicable,\n+                        );\n                     }\n-                },\n-            };\n-            then {\n-                span_lint_and_sugg(\n-                    cx,\n-                    MISSING_ENFORCED_IMPORT_RENAMES,\n-                    span_without_semi,\n-                    \"this import should be renamed\",\n-                    \"try\",\n-                    format!(\n-                        \"{import} as {name}\",\n-                    ),\n-                    Applicability::MachineApplicable,\n-                );\n+                }\n             }\n         }\n     }"}, {"sha": "c2a8db7df038b9355ca6abf1e9833436688ce033", "filename": "clippy_lints/src/redundant_pub_crate.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4bdfb0741dbcecd5279a2635c3280726db0604b5/clippy_lints%2Fsrc%2Fredundant_pub_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bdfb0741dbcecd5279a2635c3280726db0604b5/clippy_lints%2Fsrc%2Fredundant_pub_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_pub_crate.rs?ref=4bdfb0741dbcecd5279a2635c3280726db0604b5", "patch": "@@ -84,7 +84,11 @@ impl<'tcx> LateLintPass<'tcx> for RedundantPubCrate {\n \n fn is_not_macro_export<'tcx>(item: &'tcx Item<'tcx>) -> bool {\n     if let ItemKind::Use(path, _) = item.kind {\n-        if let Res::Def(DefKind::Macro(MacroKind::Bang), _) = path.res {\n+        if path\n+            .res\n+            .iter()\n+            .all(|res| matches!(res, Res::Def(DefKind::Macro(MacroKind::Bang), _)))\n+        {\n             return false;\n         }\n     } else if let ItemKind::Macro(..) = item.kind {"}, {"sha": "d46f6a6352c63ead2b1418c911e887ce0eaefe4b", "filename": "clippy_lints/src/single_component_path_imports.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4bdfb0741dbcecd5279a2635c3280726db0604b5/clippy_lints%2Fsrc%2Fsingle_component_path_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bdfb0741dbcecd5279a2635c3280726db0604b5/clippy_lints%2Fsrc%2Fsingle_component_path_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsingle_component_path_imports.rs?ref=4bdfb0741dbcecd5279a2635c3280726db0604b5", "patch": "@@ -149,7 +149,7 @@ impl SingleComponentPathImports {\n \n                 // keep track of `use some_module;` usages\n                 if segments.len() == 1 {\n-                    if let UseTreeKind::Simple(None, _, _) = use_tree.kind {\n+                    if let UseTreeKind::Simple(None) = use_tree.kind {\n                         let name = segments[0].ident.name;\n                         if !macros.contains(&name) {\n                             single_use_usages.push(SingleUse {\n@@ -169,7 +169,7 @@ impl SingleComponentPathImports {\n                         for tree in trees {\n                             let segments = &tree.0.prefix.segments;\n                             if segments.len() == 1 {\n-                                if let UseTreeKind::Simple(None, _, _) = tree.0.kind {\n+                                if let UseTreeKind::Simple(None) = tree.0.kind {\n                                     let name = segments[0].ident.name;\n                                     if !macros.contains(&name) {\n                                         single_use_usages.push(SingleUse {"}, {"sha": "397633f533b22c767b3e1186d4f172c9341e31c2", "filename": "clippy_lints/src/unnecessary_self_imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4bdfb0741dbcecd5279a2635c3280726db0604b5/clippy_lints%2Fsrc%2Funnecessary_self_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bdfb0741dbcecd5279a2635c3280726db0604b5/clippy_lints%2Fsrc%2Funnecessary_self_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funnecessary_self_imports.rs?ref=4bdfb0741dbcecd5279a2635c3280726db0604b5", "patch": "@@ -57,7 +57,7 @@ impl EarlyLintPass for UnnecessarySelfImports {\n                             format!(\n                                 \"{}{};\",\n                                 last_segment.ident,\n-                                if let UseTreeKind::Simple(Some(alias), ..) = self_tree.kind { format!(\" as {alias}\") } else { String::new() },\n+                                if let UseTreeKind::Simple(Some(alias)) = self_tree.kind { format!(\" as {alias}\") } else { String::new() },\n                             ),\n                             Applicability::MaybeIncorrect,\n                         );"}, {"sha": "7ee785804f0a564ad9b2a68cc46d75022159aec5", "filename": "clippy_lints/src/unsafe_removed_from_name.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4bdfb0741dbcecd5279a2635c3280726db0604b5/clippy_lints%2Fsrc%2Funsafe_removed_from_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bdfb0741dbcecd5279a2635c3280726db0604b5/clippy_lints%2Fsrc%2Funsafe_removed_from_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funsafe_removed_from_name.rs?ref=4bdfb0741dbcecd5279a2635c3280726db0604b5", "patch": "@@ -39,7 +39,7 @@ impl EarlyLintPass for UnsafeNameRemoval {\n \n fn check_use_tree(use_tree: &UseTree, cx: &EarlyContext<'_>, span: Span) {\n     match use_tree.kind {\n-        UseTreeKind::Simple(Some(new_name), ..) => {\n+        UseTreeKind::Simple(Some(new_name)) => {\n             let old_name = use_tree\n                 .prefix\n                 .segments\n@@ -48,7 +48,7 @@ fn check_use_tree(use_tree: &UseTree, cx: &EarlyContext<'_>, span: Span) {\n                 .ident;\n             unsafe_to_safe_check(old_name, new_name, cx, span);\n         },\n-        UseTreeKind::Simple(None, ..) | UseTreeKind::Glob => {},\n+        UseTreeKind::Simple(None) | UseTreeKind::Glob => {},\n         UseTreeKind::Nested(ref nested_use_tree) => {\n             for (use_tree, _) in nested_use_tree {\n                 check_use_tree(use_tree, cx, span);"}, {"sha": "bd7daf0773caf914b7d3bd4b34b9ba88e4f5cba6", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4bdfb0741dbcecd5279a2635c3280726db0604b5/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bdfb0741dbcecd5279a2635c3280726db0604b5/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=4bdfb0741dbcecd5279a2635c3280726db0604b5", "patch": "@@ -299,7 +299,7 @@ impl<'a, 'tcx> PrintVisitor<'a, 'tcx> {\n                 };\n                 kind!(\"Float(_, {float_ty})\");\n             },\n-            LitKind::ByteStr(ref vec) => {\n+            LitKind::ByteStr(ref vec, _) => {\n                 bind!(self, vec);\n                 kind!(\"ByteStr(ref {vec})\");\n                 chain!(self, \"let [{:?}] = **{vec}\", vec.value);"}, {"sha": "9afe02c1e47da00cadc26e240f6e4d34d6fe99ae", "filename": "clippy_lints/src/utils/internal_lints/invalid_paths.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4bdfb0741dbcecd5279a2635c3280726db0604b5/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Finvalid_paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bdfb0741dbcecd5279a2635c3280726db0604b5/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Finvalid_paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Finvalid_paths.rs?ref=4bdfb0741dbcecd5279a2635c3280726db0604b5", "patch": "@@ -7,7 +7,7 @@ use rustc_hir::def::DefKind;\n use rustc_hir::Item;\n use rustc_hir_analysis::hir_ty_to_ty;\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::ty::{self, fast_reject::SimplifiedTypeGen, FloatTy};\n+use rustc_middle::ty::{self, fast_reject::SimplifiedType, FloatTy};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::symbol::Symbol;\n \n@@ -73,10 +73,10 @@ pub fn check_path(cx: &LateContext<'_>, path: &[&str]) -> bool {\n     let lang_items = cx.tcx.lang_items();\n     // This list isn't complete, but good enough for our current list of paths.\n     let incoherent_impls = [\n-        SimplifiedTypeGen::FloatSimplifiedType(FloatTy::F32),\n-        SimplifiedTypeGen::FloatSimplifiedType(FloatTy::F64),\n-        SimplifiedTypeGen::SliceSimplifiedType,\n-        SimplifiedTypeGen::StrSimplifiedType,\n+        SimplifiedType::FloatSimplifiedType(FloatTy::F32),\n+        SimplifiedType::FloatSimplifiedType(FloatTy::F64),\n+        SimplifiedType::SliceSimplifiedType,\n+        SimplifiedType::StrSimplifiedType,\n     ]\n     .iter()\n     .flat_map(|&ty| cx.tcx.incoherent_impls(ty).iter().copied());"}, {"sha": "786d9608c851ee1001e1c59c36c1a0911e313544", "filename": "clippy_lints/src/utils/internal_lints/lint_without_lint_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4bdfb0741dbcecd5279a2635c3280726db0604b5/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Flint_without_lint_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bdfb0741dbcecd5279a2635c3280726db0604b5/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Flint_without_lint_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Flint_without_lint_pass.rs?ref=4bdfb0741dbcecd5279a2635c3280726db0604b5", "patch": "@@ -330,7 +330,7 @@ struct LintCollector<'a, 'tcx> {\n impl<'a, 'tcx> Visitor<'tcx> for LintCollector<'a, 'tcx> {\n     type NestedFilter = nested_filter::All;\n \n-    fn visit_path(&mut self, path: &'tcx Path<'_>, _: HirId) {\n+    fn visit_path(&mut self, path: &Path<'_>, _: HirId) {\n         if path.segments.len() == 1 {\n             self.output.insert(path.segments[0].ident.name);\n         }"}, {"sha": "857abe77e21f239c6225a1dd06b6d45348d38d5b", "filename": "clippy_lints/src/utils/internal_lints/metadata_collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4bdfb0741dbcecd5279a2635c3280726db0604b5/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bdfb0741dbcecd5279a2635c3280726db0604b5/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs?ref=4bdfb0741dbcecd5279a2635c3280726db0604b5", "patch": "@@ -1019,7 +1019,7 @@ impl<'a, 'hir> intravisit::Visitor<'hir> for ApplicabilityResolver<'a, 'hir> {\n         self.cx.tcx.hir()\n     }\n \n-    fn visit_path(&mut self, path: &'hir hir::Path<'hir>, _id: hir::HirId) {\n+    fn visit_path(&mut self, path: &hir::Path<'hir>, _id: hir::HirId) {\n         for (index, enum_value) in paths::APPLICABILITY_VALUES.iter().enumerate() {\n             if match_path(path, enum_value) {\n                 self.add_new_index(index);"}, {"sha": "e4d1ee195c4dfb10aed5eed874f7de6fe280d84d", "filename": "clippy_lints/src/wildcard_imports.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4bdfb0741dbcecd5279a2635c3280726db0604b5/clippy_lints%2Fsrc%2Fwildcard_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bdfb0741dbcecd5279a2635c3280726db0604b5/clippy_lints%2Fsrc%2Fwildcard_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwildcard_imports.rs?ref=4bdfb0741dbcecd5279a2635c3280726db0604b5", "patch": "@@ -176,7 +176,8 @@ impl LateLintPass<'_> for WildcardImports {\n                     format!(\"{import_source_snippet}::{imports_string}\")\n                 };\n \n-                let (lint, message) = if let Res::Def(DefKind::Enum, _) = use_path.res {\n+                // Glob imports always have a single resolution.\n+                let (lint, message) = if let Res::Def(DefKind::Enum, _) = use_path.res[0] {\n                     (ENUM_GLOB_USE, \"usage of wildcard import for enum variants\")\n                 } else {\n                     (WILDCARD_IMPORTS, \"usage of wildcard import\")"}, {"sha": "ac6a566b9cd3ae5f208e9c4758a71c79f5867b50", "filename": "clippy_utils/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4bdfb0741dbcecd5279a2635c3280726db0604b5/clippy_utils%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4bdfb0741dbcecd5279a2635c3280726db0604b5/clippy_utils%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2FCargo.toml?ref=4bdfb0741dbcecd5279a2635c3280726db0604b5", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"clippy_utils\"\n-version = \"0.1.67\"\n+version = \"0.1.68\"\n edition = \"2021\"\n publish = false\n "}, {"sha": "49e5f283db08904b5e273449a9f3696343dcab3a", "filename": "clippy_utils/src/ast_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4bdfb0741dbcecd5279a2635c3280726db0604b5/clippy_utils%2Fsrc%2Fast_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bdfb0741dbcecd5279a2635c3280726db0604b5/clippy_utils%2Fsrc%2Fast_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fast_utils.rs?ref=4bdfb0741dbcecd5279a2635c3280726db0604b5", "patch": "@@ -566,7 +566,7 @@ pub fn eq_use_tree_kind(l: &UseTreeKind, r: &UseTreeKind) -> bool {\n     use UseTreeKind::*;\n     match (l, r) {\n         (Glob, Glob) => true,\n-        (Simple(l, _, _), Simple(r, _, _)) => both(l, r, |l, r| eq_id(*l, *r)),\n+        (Simple(l), Simple(r)) => both(l, r, |l, r| eq_id(*l, *r)),\n         (Nested(l), Nested(r)) => over(l, r, |(l, _), (r, _)| eq_use_tree(l, r)),\n         _ => false,\n     }"}, {"sha": "43f0df145f0ec606a4393b7ea73db736b376195d", "filename": "clippy_utils/src/check_proc_macro.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4bdfb0741dbcecd5279a2635c3280726db0604b5/clippy_utils%2Fsrc%2Fcheck_proc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bdfb0741dbcecd5279a2635c3280726db0604b5/clippy_utils%2Fsrc%2Fcheck_proc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fcheck_proc_macro.rs?ref=4bdfb0741dbcecd5279a2635c3280726db0604b5", "patch": "@@ -69,7 +69,9 @@ fn lit_search_pat(lit: &LitKind) -> (Pat, Pat) {\n         LitKind::Str(_, StrStyle::Cooked) => (Pat::Str(\"\\\"\"), Pat::Str(\"\\\"\")),\n         LitKind::Str(_, StrStyle::Raw(0)) => (Pat::Str(\"r\"), Pat::Str(\"\\\"\")),\n         LitKind::Str(_, StrStyle::Raw(_)) => (Pat::Str(\"r#\"), Pat::Str(\"#\")),\n-        LitKind::ByteStr(_) => (Pat::Str(\"b\\\"\"), Pat::Str(\"\\\"\")),\n+        LitKind::ByteStr(_, StrStyle::Cooked) => (Pat::Str(\"b\\\"\"), Pat::Str(\"\\\"\")),\n+        LitKind::ByteStr(_, StrStyle::Raw(0)) => (Pat::Str(\"br\\\"\"), Pat::Str(\"\\\"\")),\n+        LitKind::ByteStr(_, StrStyle::Raw(_)) => (Pat::Str(\"br#\\\"\"), Pat::Str(\"#\")),\n         LitKind::Byte(_) => (Pat::Str(\"b'\"), Pat::Str(\"'\")),\n         LitKind::Char(_) => (Pat::Str(\"'\"), Pat::Str(\"'\")),\n         LitKind::Int(_, LitIntType::Signed(IntTy::Isize)) => (Pat::Num, Pat::Str(\"isize\")),"}, {"sha": "7a637d32babecab6656bd5705f5dbf1873449f60", "filename": "clippy_utils/src/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4bdfb0741dbcecd5279a2635c3280726db0604b5/clippy_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bdfb0741dbcecd5279a2635c3280726db0604b5/clippy_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fconsts.rs?ref=4bdfb0741dbcecd5279a2635c3280726db0604b5", "patch": "@@ -210,7 +210,7 @@ pub fn lit_to_mir_constant(lit: &LitKind, ty: Option<Ty<'_>>) -> Constant {\n     match *lit {\n         LitKind::Str(ref is, _) => Constant::Str(is.to_string()),\n         LitKind::Byte(b) => Constant::Int(u128::from(b)),\n-        LitKind::ByteStr(ref s) => Constant::Binary(Lrc::clone(s)),\n+        LitKind::ByteStr(ref s, _) => Constant::Binary(Lrc::clone(s)),\n         LitKind::Char(c) => Constant::Char(c),\n         LitKind::Int(n, _) => Constant::Int(n),\n         LitKind::Float(ref is, LitFloatType::Suffixed(fty)) => match fty {"}, {"sha": "43e2d1ec826c2343b9d6dea43c11ae3fe3789917", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4bdfb0741dbcecd5279a2635c3280726db0604b5/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bdfb0741dbcecd5279a2635c3280726db0604b5/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=4bdfb0741dbcecd5279a2635c3280726db0604b5", "patch": "@@ -97,7 +97,7 @@ use rustc_middle::hir::place::PlaceBase;\n use rustc_middle::ty as rustc_ty;\n use rustc_middle::ty::adjustment::{Adjust, Adjustment, AutoBorrow};\n use rustc_middle::ty::binding::BindingMode;\n-use rustc_middle::ty::fast_reject::SimplifiedTypeGen::{\n+use rustc_middle::ty::fast_reject::SimplifiedType::{\n     ArraySimplifiedType, BoolSimplifiedType, CharSimplifiedType, FloatSimplifiedType, IntSimplifiedType,\n     PtrSimplifiedType, SliceSimplifiedType, StrSimplifiedType, UintSimplifiedType,\n };"}, {"sha": "9ca50105ae57d0e93c96f7b48d1030bb10011c85", "filename": "clippy_utils/src/paths.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4bdfb0741dbcecd5279a2635c3280726db0604b5/clippy_utils%2Fsrc%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bdfb0741dbcecd5279a2635c3280726db0604b5/clippy_utils%2Fsrc%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fpaths.rs?ref=4bdfb0741dbcecd5279a2635c3280726db0604b5", "patch": "@@ -20,7 +20,6 @@ pub const BTREEMAP_CONTAINS_KEY: [&str; 6] = [\"alloc\", \"collections\", \"btree\", \"\n pub const BTREEMAP_INSERT: [&str; 6] = [\"alloc\", \"collections\", \"btree\", \"map\", \"BTreeMap\", \"insert\"];\n pub const BTREESET_ITER: [&str; 6] = [\"alloc\", \"collections\", \"btree\", \"set\", \"BTreeSet\", \"iter\"];\n pub const CLONE_TRAIT_METHOD: [&str; 4] = [\"core\", \"clone\", \"Clone\", \"clone\"];\n-pub const CORE_ITER_COLLECT: [&str; 6] = [\"core\", \"iter\", \"traits\", \"iterator\", \"Iterator\", \"collect\"];\n pub const CORE_ITER_CLONED: [&str; 6] = [\"core\", \"iter\", \"traits\", \"iterator\", \"Iterator\", \"cloned\"];\n pub const CORE_ITER_COPIED: [&str; 6] = [\"core\", \"iter\", \"traits\", \"iterator\", \"Iterator\", \"copied\"];\n pub const CORE_ITER_FILTER: [&str; 6] = [\"core\", \"iter\", \"traits\", \"iterator\", \"Iterator\", \"filter\"];"}, {"sha": "e5d7da682813c16d4883f2985d0963c03eb03a7c", "filename": "clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4bdfb0741dbcecd5279a2635c3280726db0604b5/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bdfb0741dbcecd5279a2635c3280726db0604b5/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=4bdfb0741dbcecd5279a2635c3280726db0604b5", "patch": "@@ -82,7 +82,7 @@ fn check_ty<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>, span: Span) -> McfResult {\n             ty::Ref(_, _, hir::Mutability::Mut) => {\n                 return Err((span, \"mutable references in const fn are unstable\".into()));\n             },\n-            ty::Opaque(..) => return Err((span, \"`impl Trait` in const fn is unstable\".into())),\n+            ty::Alias(ty::Opaque, ..) => return Err((span, \"`impl Trait` in const fn is unstable\".into())),\n             ty::FnPtr(..) => {\n                 return Err((span, \"function pointers in const fn are unstable\".into()));\n             },\n@@ -301,11 +301,7 @@ fn check_terminator<'tcx>(\n             check_operand(tcx, value, span, body)\n         },\n \n-        TerminatorKind::SwitchInt {\n-            discr,\n-            switch_ty: _,\n-            targets: _,\n-        } => check_operand(tcx, discr, span, body),\n+        TerminatorKind::SwitchInt { discr, targets: _ } => check_operand(tcx, discr, span, body),\n \n         TerminatorKind::Abort => Err((span, \"abort is not stable in const fn\".into())),\n         TerminatorKind::GeneratorDrop | TerminatorKind::Yield { .. } => {"}, {"sha": "2773da70d7880c2b387b96bfebabe33963051adb", "filename": "clippy_utils/src/ty.rs", "status": "modified", "additions": 17, "deletions": 19, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/4bdfb0741dbcecd5279a2635c3280726db0604b5/clippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bdfb0741dbcecd5279a2635c3280726db0604b5/clippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fty.rs?ref=4bdfb0741dbcecd5279a2635c3280726db0604b5", "patch": "@@ -16,8 +16,8 @@ use rustc_infer::infer::{\n use rustc_lint::LateContext;\n use rustc_middle::mir::interpret::{ConstValue, Scalar};\n use rustc_middle::ty::{\n-    self, AdtDef, AssocKind, Binder, BoundRegion, DefIdTree, FnSig, IntTy, List, ParamEnv, Predicate, PredicateKind,\n-    ProjectionTy, Region, RegionKind, SubstsRef, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable, TypeVisitor, UintTy,\n+    self, AdtDef, AliasTy, AssocKind, Binder, BoundRegion, DefIdTree, FnSig, IntTy, List, ParamEnv, Predicate,\n+    PredicateKind, Region, RegionKind, SubstsRef, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable, TypeVisitor, UintTy,\n     VariantDef, VariantDiscr,\n };\n use rustc_middle::ty::{GenericArg, GenericArgKind};\n@@ -85,7 +85,7 @@ pub fn contains_ty_adt_constructor_opaque<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'\n                     return true;\n                 }\n \n-                if let ty::Opaque(def_id, _) = *inner_ty.kind() {\n+                if let ty::Alias(ty::Opaque, ty::AliasTy { def_id, .. }) = *inner_ty.kind() {\n                     if !seen.insert(def_id) {\n                         return false;\n                     }\n@@ -266,7 +266,7 @@ pub fn is_must_use_ty<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n             is_must_use_ty(cx, *ty)\n         },\n         ty::Tuple(substs) => substs.iter().any(|ty| is_must_use_ty(cx, ty)),\n-        ty::Opaque(def_id, _) => {\n+        ty::Alias(ty::Opaque, ty::AliasTy { def_id, .. }) => {\n             for (predicate, _) in cx.tcx.explicit_item_bounds(*def_id) {\n                 if let ty::PredicateKind::Clause(ty::Clause::Trait(trait_predicate)) = predicate.kind().skip_binder() {\n                     if cx.tcx.has_attr(trait_predicate.trait_ref.def_id, sym::must_use) {\n@@ -647,7 +647,9 @@ pub fn ty_sig<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> Option<ExprFnSig<'t\n             Some(ExprFnSig::Closure(decl, subs.as_closure().sig()))\n         },\n         ty::FnDef(id, subs) => Some(ExprFnSig::Sig(cx.tcx.bound_fn_sig(id).subst(cx.tcx, subs), Some(id))),\n-        ty::Opaque(id, _) => sig_from_bounds(cx, ty, cx.tcx.item_bounds(id), cx.tcx.opt_parent(id)),\n+        ty::Alias(ty::Opaque, ty::AliasTy { def_id, .. }) => {\n+            sig_from_bounds(cx, ty, cx.tcx.item_bounds(def_id), cx.tcx.opt_parent(def_id))\n+        },\n         ty::FnPtr(sig) => Some(ExprFnSig::Sig(sig, None)),\n         ty::Dynamic(bounds, _, _) => {\n             let lang_items = cx.tcx.lang_items();\n@@ -666,7 +668,7 @@ pub fn ty_sig<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> Option<ExprFnSig<'t\n                 _ => None,\n             }\n         },\n-        ty::Projection(proj) => match cx.tcx.try_normalize_erasing_regions(cx.param_env, ty) {\n+        ty::Alias(ty::Projection, proj) => match cx.tcx.try_normalize_erasing_regions(cx.param_env, ty) {\n             Ok(normalized_ty) if normalized_ty != ty => ty_sig(cx, normalized_ty),\n             _ => sig_for_projection(cx, proj).or_else(|| sig_from_bounds(cx, ty, cx.param_env.caller_bounds(), None)),\n         },\n@@ -701,8 +703,7 @@ fn sig_from_bounds<'tcx>(\n                 inputs = Some(i);\n             },\n             PredicateKind::Clause(ty::Clause::Projection(p))\n-                if Some(p.projection_ty.item_def_id) == lang_items.fn_once_output()\n-                    && p.projection_ty.self_ty() == ty =>\n+                if Some(p.projection_ty.def_id) == lang_items.fn_once_output() && p.projection_ty.self_ty() == ty =>\n             {\n                 if output.is_some() {\n                     // Multiple different fn trait impls. Is this even allowed?\n@@ -717,14 +718,14 @@ fn sig_from_bounds<'tcx>(\n     inputs.map(|ty| ExprFnSig::Trait(ty, output, predicates_id))\n }\n \n-fn sig_for_projection<'tcx>(cx: &LateContext<'tcx>, ty: ProjectionTy<'tcx>) -> Option<ExprFnSig<'tcx>> {\n+fn sig_for_projection<'tcx>(cx: &LateContext<'tcx>, ty: AliasTy<'tcx>) -> Option<ExprFnSig<'tcx>> {\n     let mut inputs = None;\n     let mut output = None;\n     let lang_items = cx.tcx.lang_items();\n \n     for (pred, _) in cx\n         .tcx\n-        .bound_explicit_item_bounds(ty.item_def_id)\n+        .bound_explicit_item_bounds(ty.def_id)\n         .subst_iter_copied(cx.tcx, ty.substs)\n     {\n         match pred.kind().skip_binder() {\n@@ -742,7 +743,7 @@ fn sig_for_projection<'tcx>(cx: &LateContext<'tcx>, ty: ProjectionTy<'tcx>) -> O\n                 inputs = Some(i);\n             },\n             PredicateKind::Clause(ty::Clause::Projection(p))\n-                if Some(p.projection_ty.item_def_id) == lang_items.fn_once_output() =>\n+                if Some(p.projection_ty.def_id) == lang_items.fn_once_output() =>\n             {\n                 if output.is_some() {\n                     // Multiple different fn trait impls. Is this even allowed?\n@@ -996,13 +997,13 @@ pub fn make_projection<'tcx>(\n     container_id: DefId,\n     assoc_ty: Symbol,\n     substs: impl IntoIterator<Item = impl Into<GenericArg<'tcx>>>,\n-) -> Option<ProjectionTy<'tcx>> {\n+) -> Option<AliasTy<'tcx>> {\n     fn helper<'tcx>(\n         tcx: TyCtxt<'tcx>,\n         container_id: DefId,\n         assoc_ty: Symbol,\n         substs: SubstsRef<'tcx>,\n-    ) -> Option<ProjectionTy<'tcx>> {\n+    ) -> Option<AliasTy<'tcx>> {\n         let Some(assoc_item) = tcx\n             .associated_items(container_id)\n             .find_by_name_and_kind(tcx, Ident::with_dummy_span(assoc_ty), AssocKind::Type, container_id)\n@@ -1055,10 +1056,7 @@ pub fn make_projection<'tcx>(\n             }\n         }\n \n-        Some(ProjectionTy {\n-            substs,\n-            item_def_id: assoc_item.def_id,\n-        })\n+        Some(tcx.mk_alias_ty(assoc_item.def_id, substs))\n     }\n     helper(\n         tcx,\n@@ -1081,7 +1079,7 @@ pub fn make_normalized_projection<'tcx>(\n     assoc_ty: Symbol,\n     substs: impl IntoIterator<Item = impl Into<GenericArg<'tcx>>>,\n ) -> Option<Ty<'tcx>> {\n-    fn helper<'tcx>(tcx: TyCtxt<'tcx>, param_env: ParamEnv<'tcx>, ty: ProjectionTy<'tcx>) -> Option<Ty<'tcx>> {\n+    fn helper<'tcx>(tcx: TyCtxt<'tcx>, param_env: ParamEnv<'tcx>, ty: AliasTy<'tcx>) -> Option<Ty<'tcx>> {\n         #[cfg(debug_assertions)]\n         if let Some((i, subst)) = ty\n             .substs\n@@ -1097,7 +1095,7 @@ pub fn make_normalized_projection<'tcx>(\n             );\n             return None;\n         }\n-        match tcx.try_normalize_erasing_regions(param_env, tcx.mk_projection(ty.item_def_id, ty.substs)) {\n+        match tcx.try_normalize_erasing_regions(param_env, tcx.mk_projection(ty.def_id, ty.substs)) {\n             Ok(ty) => Some(ty),\n             Err(e) => {\n                 debug_assert!(false, \"failed to normalize type `{ty}`: {e:#?}\");"}, {"sha": "ab3976a13bdbbf4f8524e965e209f62165f623ce", "filename": "clippy_utils/src/usage.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4bdfb0741dbcecd5279a2635c3280726db0604b5/clippy_utils%2Fsrc%2Fusage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bdfb0741dbcecd5279a2635c3280726db0604b5/clippy_utils%2Fsrc%2Fusage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fusage.rs?ref=4bdfb0741dbcecd5279a2635c3280726db0604b5", "patch": "@@ -128,7 +128,7 @@ impl<'a, 'tcx> intravisit::Visitor<'tcx> for BindingUsageFinder<'a, 'tcx> {\n         }\n     }\n \n-    fn visit_path(&mut self, path: &'tcx hir::Path<'tcx>, _: hir::HirId) {\n+    fn visit_path(&mut self, path: &hir::Path<'tcx>, _: hir::HirId) {\n         if let hir::def::Res::Local(id) = path.res {\n             if self.binding_ids.contains(&id) {\n                 self.usage_found = true;"}, {"sha": "c01e1062cb5445c2557a08692ff35eb79212db2d", "filename": "declare_clippy_lint/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4bdfb0741dbcecd5279a2635c3280726db0604b5/declare_clippy_lint%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4bdfb0741dbcecd5279a2635c3280726db0604b5/declare_clippy_lint%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/declare_clippy_lint%2FCargo.toml?ref=4bdfb0741dbcecd5279a2635c3280726db0604b5", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"declare_clippy_lint\"\n-version = \"0.1.67\"\n+version = \"0.1.68\"\n edition = \"2021\"\n publish = false\n "}, {"sha": "8e21cef32abb63ff135e93acb27ef0d644e97de9", "filename": "rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4bdfb0741dbcecd5279a2635c3280726db0604b5/rust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/4bdfb0741dbcecd5279a2635c3280726db0604b5/rust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-toolchain?ref=4bdfb0741dbcecd5279a2635c3280726db0604b5", "patch": "@@ -1,3 +1,3 @@\n [toolchain]\n-channel = \"nightly-2022-12-01\"\n+channel = \"nightly-2022-12-17\"\n components = [\"cargo\", \"llvm-tools\", \"rust-src\", \"rust-std\", \"rustc\", \"rustc-dev\", \"rustfmt\"]"}, {"sha": "3ca45404e44bb88290ad846bccca89f21b88f6a7", "filename": "tests/ui-internal/unnecessary_def_path_hardcoded_path.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4bdfb0741dbcecd5279a2635c3280726db0604b5/tests%2Fui-internal%2Funnecessary_def_path_hardcoded_path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4bdfb0741dbcecd5279a2635c3280726db0604b5/tests%2Fui-internal%2Funnecessary_def_path_hardcoded_path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-internal%2Funnecessary_def_path_hardcoded_path.stderr?ref=4bdfb0741dbcecd5279a2635c3280726db0604b5", "patch": "@@ -7,14 +7,6 @@ LL |     const DEREF_TRAIT: [&str; 4] = [\"core\", \"ops\", \"deref\", \"Deref\"];\n    = help: convert all references to use `sym::Deref`\n    = note: `-D clippy::unnecessary-def-path` implied by `-D warnings`\n \n-error: hardcoded path to a diagnostic item\n-  --> $DIR/unnecessary_def_path_hardcoded_path.rs:12:43\n-   |\n-LL |     const DEREF_TRAIT_METHOD: [&str; 5] = [\"core\", \"ops\", \"deref\", \"Deref\", \"deref\"];\n-   |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: convert all references to use `sym::deref_method`\n-\n error: hardcoded path to a language item\n   --> $DIR/unnecessary_def_path_hardcoded_path.rs:11:40\n    |\n@@ -23,5 +15,13 @@ LL |     const DEREF_MUT_TRAIT: [&str; 4] = [\"core\", \"ops\", \"deref\", \"DerefMut\"]\n    |\n    = help: convert all references to use `LangItem::DerefMut`\n \n+error: hardcoded path to a diagnostic item\n+  --> $DIR/unnecessary_def_path_hardcoded_path.rs:12:43\n+   |\n+LL |     const DEREF_TRAIT_METHOD: [&str; 5] = [\"core\", \"ops\", \"deref\", \"Deref\", \"deref\"];\n+   |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: convert all references to use `sym::deref_method`\n+\n error: aborting due to 3 previous errors\n "}, {"sha": "61843124ccd91f03e3b4cd760aeccb1b7fc40102", "filename": "tests/ui/macro_use_imports.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4bdfb0741dbcecd5279a2635c3280726db0604b5/tests%2Fui%2Fmacro_use_imports.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4bdfb0741dbcecd5279a2635c3280726db0604b5/tests%2Fui%2Fmacro_use_imports.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacro_use_imports.stderr?ref=4bdfb0741dbcecd5279a2635c3280726db0604b5", "patch": "@@ -1,8 +1,8 @@\n error: `macro_use` attributes are no longer needed in the Rust 2018 edition\n-  --> $DIR/macro_use_imports.rs:23:5\n+  --> $DIR/macro_use_imports.rs:25:5\n    |\n LL |     #[macro_use]\n-   |     ^^^^^^^^^^^^ help: remove the attribute and import the macro directly, try: `use mac::{inner::foofoo, inner::try_err};`\n+   |     ^^^^^^^^^^^^ help: remove the attribute and import the macro directly, try: `use mac::inner::nested::string_add;`\n    |\n    = note: `-D clippy::macro-use-imports` implied by `-D warnings`\n \n@@ -13,10 +13,10 @@ LL |     #[macro_use]\n    |     ^^^^^^^^^^^^ help: remove the attribute and import the macro directly, try: `use mini_mac::ClippyMiniMacroTest;`\n \n error: `macro_use` attributes are no longer needed in the Rust 2018 edition\n-  --> $DIR/macro_use_imports.rs:25:5\n+  --> $DIR/macro_use_imports.rs:23:5\n    |\n LL |     #[macro_use]\n-   |     ^^^^^^^^^^^^ help: remove the attribute and import the macro directly, try: `use mac::inner::nested::string_add;`\n+   |     ^^^^^^^^^^^^ help: remove the attribute and import the macro directly, try: `use mac::{inner::foofoo, inner::try_err};`\n \n error: `macro_use` attributes are no longer needed in the Rust 2018 edition\n   --> $DIR/macro_use_imports.rs:19:5"}]}