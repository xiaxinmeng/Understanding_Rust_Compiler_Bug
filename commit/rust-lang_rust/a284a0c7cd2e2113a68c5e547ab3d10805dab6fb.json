{"sha": "a284a0c7cd2e2113a68c5e547ab3d10805dab6fb", "node_id": "C_kwDOAAsO6NoAKGEyODRhMGM3Y2QyZTIxMTNhNjhjNWU1NDdhYjNkMTA4MDVkYWI2ZmI", "commit": {"author": {"name": "DropDemBits", "email": "r3usrlnd@gmail.com", "date": "2023-03-26T21:46:56Z"}, "committer": {"name": "DropDemBits", "email": "r3usrlnd@gmail.com", "date": "2023-03-26T21:46:56Z"}, "message": "internal: Introduce Structured Snippet API", "tree": {"sha": "34effad4948444f4431525461fa8d5b31a90e275", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/34effad4948444f4431525461fa8d5b31a90e275"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a284a0c7cd2e2113a68c5e547ab3d10805dab6fb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQTeuYGhWxN6R+Ctnb9/4CpsHt+gdQUCZCC9UAAKCRB/4CpsHt+g\ndSjDAPsFlAeBAPVfEvomP+EIEUf1XhRxGl/hOD0hSALrSbbL+gD/ajnh2OWaOoCS\ny7PeIDzzV28kG+lBel3IWNzgI6/NcgM=\n=szDR\n-----END PGP SIGNATURE-----", "payload": "tree 34effad4948444f4431525461fa8d5b31a90e275\nparent b99d5eb97315faca04a33bae40bd2fb809ba9d46\nauthor DropDemBits <r3usrlnd@gmail.com> 1679867216 -0400\ncommitter DropDemBits <r3usrlnd@gmail.com> 1679867216 -0400\n\ninternal: Introduce Structured Snippet API\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a284a0c7cd2e2113a68c5e547ab3d10805dab6fb", "html_url": "https://github.com/rust-lang/rust/commit/a284a0c7cd2e2113a68c5e547ab3d10805dab6fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a284a0c7cd2e2113a68c5e547ab3d10805dab6fb/comments", "author": {"login": "DropDemBits", "id": 13354275, "node_id": "MDQ6VXNlcjEzMzU0Mjc1", "avatar_url": "https://avatars.githubusercontent.com/u/13354275?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DropDemBits", "html_url": "https://github.com/DropDemBits", "followers_url": "https://api.github.com/users/DropDemBits/followers", "following_url": "https://api.github.com/users/DropDemBits/following{/other_user}", "gists_url": "https://api.github.com/users/DropDemBits/gists{/gist_id}", "starred_url": "https://api.github.com/users/DropDemBits/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DropDemBits/subscriptions", "organizations_url": "https://api.github.com/users/DropDemBits/orgs", "repos_url": "https://api.github.com/users/DropDemBits/repos", "events_url": "https://api.github.com/users/DropDemBits/events{/privacy}", "received_events_url": "https://api.github.com/users/DropDemBits/received_events", "type": "User", "site_admin": false}, "committer": {"login": "DropDemBits", "id": 13354275, "node_id": "MDQ6VXNlcjEzMzU0Mjc1", "avatar_url": "https://avatars.githubusercontent.com/u/13354275?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DropDemBits", "html_url": "https://github.com/DropDemBits", "followers_url": "https://api.github.com/users/DropDemBits/followers", "following_url": "https://api.github.com/users/DropDemBits/following{/other_user}", "gists_url": "https://api.github.com/users/DropDemBits/gists{/gist_id}", "starred_url": "https://api.github.com/users/DropDemBits/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DropDemBits/subscriptions", "organizations_url": "https://api.github.com/users/DropDemBits/orgs", "repos_url": "https://api.github.com/users/DropDemBits/repos", "events_url": "https://api.github.com/users/DropDemBits/events{/privacy}", "received_events_url": "https://api.github.com/users/DropDemBits/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b99d5eb97315faca04a33bae40bd2fb809ba9d46", "url": "https://api.github.com/repos/rust-lang/rust/commits/b99d5eb97315faca04a33bae40bd2fb809ba9d46", "html_url": "https://github.com/rust-lang/rust/commit/b99d5eb97315faca04a33bae40bd2fb809ba9d46"}], "stats": {"total": 112, "additions": 111, "deletions": 1}, "files": [{"sha": "1cc7be6813861a4a03fee85e8d374678ca6f4b3a", "filename": "crates/ide-db/src/source_change.rs", "status": "modified", "additions": 111, "deletions": 1, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/a284a0c7cd2e2113a68c5e547ab3d10805dab6fb/crates%2Fide-db%2Fsrc%2Fsource_change.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a284a0c7cd2e2113a68c5e547ab3d10805dab6fb/crates%2Fide-db%2Fsrc%2Fsource_change.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fsource_change.rs?ref=a284a0c7cd2e2113a68c5e547ab3d10805dab6fb", "patch": "@@ -7,7 +7,7 @@ use std::{collections::hash_map::Entry, iter, mem};\n \n use base_db::{AnchoredPathBuf, FileId};\n use stdx::{hash::NoHashHashMap, never};\n-use syntax::{algo, AstNode, SyntaxNode, SyntaxNodePtr, TextRange, TextSize};\n+use syntax::{algo, ast, ted, AstNode, SyntaxNode, SyntaxNodePtr, TextRange, TextSize};\n use text_edit::{TextEdit, TextEditBuilder};\n \n use crate::SnippetCap;\n@@ -99,13 +99,21 @@ pub struct SourceChangeBuilder {\n \n     /// Maps the original, immutable `SyntaxNode` to a `clone_for_update` twin.\n     pub mutated_tree: Option<TreeMutator>,\n+    /// Keeps track of where to place snippets\n+    pub snippet_builder: Option<SnippetBuilder>,\n }\n \n pub struct TreeMutator {\n     immutable: SyntaxNode,\n     mutable_clone: SyntaxNode,\n }\n \n+#[derive(Default)]\n+pub struct SnippetBuilder {\n+    /// Where to place snippets at\n+    places: Vec<PlaceSnippet>,\n+}\n+\n impl TreeMutator {\n     pub fn new(immutable: &SyntaxNode) -> TreeMutator {\n         let immutable = immutable.ancestors().last().unwrap();\n@@ -131,6 +139,7 @@ impl SourceChangeBuilder {\n             source_change: SourceChange::default(),\n             trigger_signature_help: false,\n             mutated_tree: None,\n+            snippet_builder: None,\n         }\n     }\n \n@@ -140,6 +149,17 @@ impl SourceChangeBuilder {\n     }\n \n     fn commit(&mut self) {\n+        // Render snippets first so that they get bundled into the tree diff\n+        if let Some(mut snippets) = self.snippet_builder.take() {\n+            // Last snippet always has stop index 0\n+            let last_stop = snippets.places.pop().unwrap();\n+            last_stop.place(0);\n+\n+            for (index, stop) in snippets.places.into_iter().enumerate() {\n+                stop.place(index + 1)\n+            }\n+        }\n+\n         if let Some(tm) = self.mutated_tree.take() {\n             algo::diff(&tm.immutable, &tm.mutable_clone).into_text_edit(&mut self.edit)\n         }\n@@ -214,6 +234,33 @@ impl SourceChangeBuilder {\n         self.trigger_signature_help = true;\n     }\n \n+    /// Adds a tabstop snippet to place the cursor before `node`\n+    pub fn add_tabstop_before(&mut self, _cap: SnippetCap, node: impl AstNode) {\n+        assert!(node.syntax().parent().is_some());\n+\n+        let snippet_builder = self.snippet_builder.get_or_insert(SnippetBuilder { places: vec![] });\n+        snippet_builder.places.push(PlaceSnippet::Before(node.syntax().clone()));\n+        self.source_change.is_snippet = true;\n+    }\n+\n+    /// Adds a tabstop snippet to place the cursor after `node`\n+    pub fn add_tabstop_after(&mut self, _cap: SnippetCap, node: impl AstNode) {\n+        assert!(node.syntax().parent().is_some());\n+\n+        let snippet_builder = self.snippet_builder.get_or_insert(SnippetBuilder { places: vec![] });\n+        snippet_builder.places.push(PlaceSnippet::After(node.syntax().clone()));\n+        self.source_change.is_snippet = true;\n+    }\n+\n+    /// Adds a snippet to move the cursor selected over `node`\n+    pub fn add_placeholder_snippet(&mut self, _cap: SnippetCap, node: impl AstNode) {\n+        assert!(node.syntax().parent().is_some());\n+\n+        let snippet_builder = self.snippet_builder.get_or_insert(SnippetBuilder { places: vec![] });\n+        snippet_builder.places.push(PlaceSnippet::Over(node.syntax().clone()));\n+        self.source_change.is_snippet = true;\n+    }\n+\n     pub fn finish(mut self) -> SourceChange {\n         self.commit();\n         mem::take(&mut self.source_change)\n@@ -236,3 +283,66 @@ impl From<FileSystemEdit> for SourceChange {\n         }\n     }\n }\n+\n+enum PlaceSnippet {\n+    /// Place a tabstop before a node\n+    Before(SyntaxNode),\n+    /// Place a tabstop before a node\n+    After(SyntaxNode),\n+    /// Place a placeholder snippet in place of the node\n+    Over(SyntaxNode),\n+}\n+\n+impl PlaceSnippet {\n+    /// Places the snippet before or over a node with the given tab stop index\n+    fn place(self, order: usize) {\n+        // ensure the target node is still attached\n+        match &self {\n+            PlaceSnippet::Before(node) | PlaceSnippet::After(node) | PlaceSnippet::Over(node) => {\n+                // node should still be in the tree, but if it isn't\n+                // then it's okay to just ignore this place\n+                if stdx::never!(node.parent().is_none()) {\n+                    return;\n+                }\n+            }\n+        }\n+\n+        match self {\n+            PlaceSnippet::Before(node) => {\n+                ted::insert_raw(ted::Position::before(&node), Self::make_tab_stop(order));\n+            }\n+            PlaceSnippet::After(node) => {\n+                ted::insert_raw(ted::Position::after(&node), Self::make_tab_stop(order));\n+            }\n+            PlaceSnippet::Over(node) => {\n+                let position = ted::Position::before(&node);\n+                node.detach();\n+\n+                let snippet = ast::SourceFile::parse(&format!(\"${{{order}:_}}\"))\n+                    .syntax_node()\n+                    .clone_for_update();\n+\n+                let placeholder =\n+                    snippet.descendants().find_map(ast::UnderscoreExpr::cast).unwrap();\n+                ted::replace(placeholder.syntax(), node);\n+\n+                ted::insert_raw(position, snippet);\n+            }\n+        }\n+    }\n+\n+    fn make_tab_stop(order: usize) -> SyntaxNode {\n+        let stop = ast::SourceFile::parse(&format!(\"stop!(${order})\"))\n+            .syntax_node()\n+            .descendants()\n+            .find_map(ast::TokenTree::cast)\n+            .unwrap()\n+            .syntax()\n+            .clone_for_update();\n+\n+        stop.first_token().unwrap().detach();\n+        stop.last_token().unwrap().detach();\n+\n+        stop\n+    }\n+}"}]}