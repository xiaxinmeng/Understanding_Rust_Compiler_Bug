{"sha": "33b0b7148fa4eacf43c204b2505867a4cd8e4735", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzYjBiNzE0OGZhNGVhY2Y0M2MyMDRiMjUwNTg2N2E0Y2Q4ZTQ3MzU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-21T08:32:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-21T08:32:19Z"}, "message": "Auto merge of #57792 - Centril:rollup, r=Centril\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #56796 (Change bounds on `TryFrom` blanket impl to use `Into` instead of `From`)\n - #57768 (Continue parsing after parent type args and suggest using angle brackets)\n - #57769 (Suggest correct cast for struct fields with shorthand syntax)\n - #57783 (Add \"dereference boxed value\" suggestion.)\n - #57784 (Add span for bad doc comment)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "5fbc9f7aa1ea1c430548853e5c3bf13f643b9a25", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5fbc9f7aa1ea1c430548853e5c3bf13f643b9a25"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/33b0b7148fa4eacf43c204b2505867a4cd8e4735", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/33b0b7148fa4eacf43c204b2505867a4cd8e4735", "html_url": "https://github.com/rust-lang/rust/commit/33b0b7148fa4eacf43c204b2505867a4cd8e4735", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/33b0b7148fa4eacf43c204b2505867a4cd8e4735/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5f5a2715ed8685bc19fd589a23c7c658c2fe6bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5f5a2715ed8685bc19fd589a23c7c658c2fe6bd", "html_url": "https://github.com/rust-lang/rust/commit/b5f5a2715ed8685bc19fd589a23c7c658c2fe6bd"}, {"sha": "00c60d115cfb979c4ca39bb1ce3afc7bf0548d79", "url": "https://api.github.com/repos/rust-lang/rust/commits/00c60d115cfb979c4ca39bb1ce3afc7bf0548d79", "html_url": "https://github.com/rust-lang/rust/commit/00c60d115cfb979c4ca39bb1ce3afc7bf0548d79"}], "stats": {"total": 572, "additions": 484, "deletions": 88}, "files": [{"sha": "203be541e492f1c3d381a94e4ef445b3c45568d3", "filename": "src/libcore/convert.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/33b0b7148fa4eacf43c204b2505867a4cd8e4735/src%2Flibcore%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33b0b7148fa4eacf43c204b2505867a4cd8e4735/src%2Flibcore%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fconvert.rs?ref=33b0b7148fa4eacf43c204b2505867a4cd8e4735", "patch": "@@ -463,11 +463,11 @@ impl<T, U> TryInto<U> for T where U: TryFrom<T>\n // Infallible conversions are semantically equivalent to fallible conversions\n // with an uninhabited error type.\n #[unstable(feature = \"try_from\", issue = \"33417\")]\n-impl<T, U> TryFrom<U> for T where T: From<U> {\n+impl<T, U> TryFrom<U> for T where U: Into<T> {\n     type Error = !;\n \n     fn try_from(value: U) -> Result<Self, Self::Error> {\n-        Ok(T::from(value))\n+        Ok(U::into(value))\n     }\n }\n "}, {"sha": "f7af135bc76052edd657418ec8ad44d9f23370f8", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/33b0b7148fa4eacf43c204b2505867a4cd8e4735/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33b0b7148fa4eacf43c204b2505867a4cd8e4735/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=33b0b7148fa4eacf43c204b2505867a4cd8e4735", "patch": "@@ -31,6 +31,7 @@\n //! in the HIR, especially for multiple identifiers.\n \n use dep_graph::DepGraph;\n+use errors::Applicability;\n use hir::{self, ParamName};\n use hir::HirVec;\n use hir::map::{DefKey, DefPathData, Definitions};\n@@ -1806,7 +1807,7 @@ impl<'a> LoweringContext<'a> {\n         explicit_owner: Option<NodeId>,\n     ) -> hir::PathSegment {\n         let (mut generic_args, infer_types) = if let Some(ref generic_args) = segment.args {\n-            let msg = \"parenthesized parameters may only be used with a trait\";\n+            let msg = \"parenthesized type parameters may only be used with a `Fn` trait\";\n             match **generic_args {\n                 GenericArgs::AngleBracketed(ref data) => {\n                     self.lower_angle_bracketed_parameter_data(data, param_mode, itctx)\n@@ -1823,10 +1824,25 @@ impl<'a> LoweringContext<'a> {\n                         (hir::GenericArgs::none(), true)\n                     }\n                     ParenthesizedGenericArgs::Err => {\n-                        struct_span_err!(self.sess, data.span, E0214, \"{}\", msg)\n-                            .span_label(data.span, \"only traits may use parentheses\")\n-                            .emit();\n-                        (hir::GenericArgs::none(), true)\n+                        let mut err = struct_span_err!(self.sess, data.span, E0214, \"{}\", msg);\n+                        err.span_label(data.span, \"only `Fn` traits may use parentheses\");\n+                        if let Ok(snippet) = self.sess.source_map().span_to_snippet(data.span) {\n+                            // Do not suggest going from `Trait()` to `Trait<>`\n+                            if data.inputs.len() > 0 {\n+                                err.span_suggestion_with_applicability(\n+                                    data.span,\n+                                    \"use angle brackets instead\",\n+                                    format!(\"<{}>\", &snippet[1..snippet.len() - 1]),\n+                                    Applicability::MaybeIncorrect,\n+                                );\n+                            }\n+                        };\n+                        err.emit();\n+                        (self.lower_angle_bracketed_parameter_data(\n+                            &data.as_angle_bracketed_args(),\n+                            param_mode,\n+                            itctx).0,\n+                         false)\n                     }\n                 },\n             }"}, {"sha": "35f6e6aa610ad8d052f4f35ca78fc96596fd2579", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/33b0b7148fa4eacf43c204b2505867a4cd8e4735/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33b0b7148fa4eacf43c204b2505867a4cd8e4735/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=33b0b7148fa4eacf43c204b2505867a4cd8e4735", "patch": "@@ -485,12 +485,29 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    fn note_error_origin(&self, err: &mut DiagnosticBuilder<'tcx>, cause: &ObligationCause<'tcx>) {\n+    fn note_error_origin(\n+        &self,\n+        err: &mut DiagnosticBuilder<'tcx>,\n+        cause: &ObligationCause<'tcx>,\n+        exp_found: Option<ty::error::ExpectedFound<Ty<'tcx>>>,\n+    ) {\n         match cause.code {\n             ObligationCauseCode::MatchExpressionArmPattern { span, ty } => {\n                 if ty.is_suggestable() {  // don't show type `_`\n                     err.span_label(span, format!(\"this match expression has type `{}`\", ty));\n                 }\n+                if let Some(ty::error::ExpectedFound { found, .. }) = exp_found {\n+                    if ty.is_box() && ty.boxed_ty() == found {\n+                        if let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(span) {\n+                            err.span_suggestion_with_applicability(\n+                                span,\n+                                \"consider dereferencing the boxed value\",\n+                                format!(\"*{}\", snippet),\n+                                Applicability::MachineApplicable,\n+                            );\n+                        }\n+                    }\n+                }\n             }\n             ObligationCauseCode::MatchExpressionArm { arm_span, source } => match source {\n                 hir::MatchSource::IfLetDesugar { .. } => {\n@@ -1013,7 +1030,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n \n         // It reads better to have the error origin as the final\n         // thing.\n-        self.note_error_origin(diag, &cause);\n+        self.note_error_origin(diag, &cause, exp_found);\n     }\n \n     /// When encountering a case where `.as_ref()` on a `Result` or `Option` would be appropriate,"}, {"sha": "d985bdae491d09d6d2dd40f47a648b632cce65cb", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 36, "deletions": 12, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/33b0b7148fa4eacf43c204b2505867a4cd8e4735/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33b0b7148fa4eacf43c204b2505867a4cd8e4735/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=33b0b7148fa4eacf43c204b2505867a4cd8e4735", "patch": "@@ -454,12 +454,13 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         false\n     }\n \n-    pub fn check_for_cast(&self,\n-                      err: &mut DiagnosticBuilder<'tcx>,\n-                      expr: &hir::Expr,\n-                      checked_ty: Ty<'tcx>,\n-                      expected_ty: Ty<'tcx>)\n-                      -> bool {\n+    pub fn check_for_cast(\n+        &self,\n+        err: &mut DiagnosticBuilder<'tcx>,\n+        expr: &hir::Expr,\n+        checked_ty: Ty<'tcx>,\n+        expected_ty: Ty<'tcx>,\n+    ) -> bool {\n         let parent_id = self.tcx.hir().get_parent_node(expr.id);\n         if let Some(parent) = self.tcx.hir().find(parent_id) {\n             // Shouldn't suggest `.into()` on `const`s.\n@@ -487,17 +488,40 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         // For now, don't suggest casting with `as`.\n         let can_cast = false;\n \n+        let mut prefix = String::new();\n+        if let Some(hir::Node::Expr(hir::Expr {\n+            node: hir::ExprKind::Struct(_, fields, _),\n+            ..\n+        })) = self.tcx.hir().find(self.tcx.hir().get_parent_node(expr.id)) {\n+            // `expr` is a literal field for a struct, only suggest if appropriate\n+            for field in fields {\n+                if field.expr.id == expr.id && field.is_shorthand {\n+                    // This is a field literal\n+                    prefix = format!(\"{}: \", field.ident);\n+                    break;\n+                }\n+            }\n+            if &prefix == \"\" {\n+                // Likely a field was meant, but this field wasn't found. Do not suggest anything.\n+                return false;\n+            }\n+        }\n+\n         let needs_paren = expr.precedence().order() < (PREC_POSTFIX as i8);\n \n         if let Ok(src) = self.tcx.sess.source_map().span_to_snippet(expr.span) {\n             let msg = format!(\"you can cast an `{}` to `{}`\", checked_ty, expected_ty);\n-            let cast_suggestion = format!(\"{}{}{} as {}\",\n-                                          if needs_paren { \"(\" } else { \"\" },\n-                                          src,\n-                                          if needs_paren { \")\" } else { \"\" },\n-                                          expected_ty);\n+            let cast_suggestion = format!(\n+                \"{}{}{}{} as {}\",\n+                prefix,\n+                if needs_paren { \"(\" } else { \"\" },\n+                src,\n+                if needs_paren { \")\" } else { \"\" },\n+                expected_ty,\n+            );\n             let into_suggestion = format!(\n-                \"{}{}{}.into()\",\n+                \"{}{}{}{}.into()\",\n+                prefix,\n                 if needs_paren { \"(\" } else { \"\" },\n                 src,\n                 if needs_paren { \")\" } else { \"\" },"}, {"sha": "405cf612543fbc4e1ad21d97070c691346959287", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/33b0b7148fa4eacf43c204b2505867a4cd8e4735/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33b0b7148fa4eacf43c204b2505867a4cd8e4735/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=33b0b7148fa4eacf43c204b2505867a4cd8e4735", "patch": "@@ -192,6 +192,16 @@ pub struct ParenthesisedArgs {\n     pub output: Option<P<Ty>>,\n }\n \n+impl ParenthesisedArgs {\n+    pub fn as_angle_bracketed_args(&self) -> AngleBracketedArgs {\n+        AngleBracketedArgs {\n+            span: self.span,\n+            args: self.inputs.iter().cloned().map(|input| GenericArg::Type(input)).collect(),\n+            bindings: vec![],\n+        }\n+    }\n+}\n+\n // hack to ensure that we don't try to access the private parts of `NodeId` in this module\n mod node_id_inner {\n     use rustc_data_structures::indexed_vec::Idx;"}, {"sha": "439eec5b0c48decc98ce14826fabd6bfcb8a90e1", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/33b0b7148fa4eacf43c204b2505867a4cd8e4735/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33b0b7148fa4eacf43c204b2505867a4cd8e4735/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=33b0b7148fa4eacf43c204b2505867a4cd8e4735", "patch": "@@ -2176,11 +2176,11 @@ impl<'a> Parser<'a> {\n               style != PathStyle::Mod && self.check(&token::ModSep)\n                                       && self.look_ahead(1, |t| is_args_start(t)) {\n             // Generic arguments are found - `<`, `(`, `::<` or `::(`.\n-            let lo = self.span;\n             if self.eat(&token::ModSep) && style == PathStyle::Type && enable_warning {\n                 self.diagnostic().struct_span_warn(self.prev_span, \"unnecessary path disambiguator\")\n                                  .span_label(self.prev_span, \"try removing `::`\").emit();\n             }\n+            let lo = self.span;\n \n             let args = if self.eat_lt() {\n                 // `<'a, T, A = U>`\n@@ -4483,13 +4483,17 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Emit an expected item after attributes error.\n-    fn expected_item_err(&self, attrs: &[Attribute]) {\n+    fn expected_item_err(&mut self, attrs: &[Attribute]) -> PResult<'a,  ()> {\n         let message = match attrs.last() {\n             Some(&Attribute { is_sugared_doc: true, .. }) => \"expected item after doc comment\",\n             _ => \"expected item after attributes\",\n         };\n \n-        self.span_err(self.prev_span, message);\n+        let mut err = self.diagnostic().struct_span_err(self.prev_span, message);\n+        if attrs.last().unwrap().is_sugared_doc {\n+            err.span_label(self.prev_span, \"this doc comment doesn't document anything\");\n+        }\n+        Err(err)\n     }\n \n     /// Parse a statement. This stops just before trailing semicolons on everything but items.\n@@ -7636,7 +7640,7 @@ impl<'a> Parser<'a> {\n             }\n             None => {\n                 if !attrs.is_empty()  {\n-                    self.expected_item_err(&attrs);\n+                    self.expected_item_err(&attrs)?;\n                 }\n \n                 self.unexpected()\n@@ -7699,7 +7703,7 @@ impl<'a> Parser<'a> {\n         }\n \n         if !attributes_allowed && !attrs.is_empty() {\n-            self.expected_item_err(&attrs);\n+            self.expected_item_err(&attrs)?;\n         }\n         Ok(None)\n     }"}, {"sha": "4522ce3a8d6173921dadd7a0ae67edf22ca3af56", "filename": "src/test/run-pass/try_from.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/33b0b7148fa4eacf43c204b2505867a4cd8e4735/src%2Ftest%2Frun-pass%2Ftry_from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33b0b7148fa4eacf43c204b2505867a4cd8e4735/src%2Ftest%2Frun-pass%2Ftry_from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftry_from.rs?ref=33b0b7148fa4eacf43c204b2505867a4cd8e4735", "patch": "@@ -0,0 +1,37 @@\n+// This test relies on `TryFrom` being blanket impl for all `T: Into`\n+// and `TryInto` being blanket impl for all `U: TryFrom`\n+\n+// This test was added to show the motivation for doing this\n+// over `TryFrom` being blanket impl for all `T: From`\n+\n+#![feature(try_from, never_type)]\n+\n+use std::convert::TryInto;\n+\n+struct Foo<T> {\n+    t: T,\n+}\n+\n+// This fails to compile due to coherence restrictions\n+// as of Rust version 1.32.x, therefore it could not be used\n+// instead of the `Into` version of the impl, and serves as\n+// motivation for a blanket impl for all `T: Into`, instead\n+// of a blanket impl for all `T: From`\n+/*\n+impl<T> From<Foo<T>> for Box<T> {\n+    fn from(foo: Foo<T>) -> Box<T> {\n+        Box::new(foo.t)\n+    }\n+}\n+*/\n+\n+impl<T> Into<Vec<T>> for Foo<T> {\n+    fn into(self) -> Vec<T> {\n+        vec![self.t]\n+    }\n+}\n+\n+pub fn main() {\n+    let _: Result<Vec<i32>, !> = Foo { t: 10 }.try_into();\n+}\n+"}, {"sha": "c2ae321aa5e504f09980313c3ac3a1f02646030f", "filename": "src/test/ui/e0119/conflict-with-std.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33b0b7148fa4eacf43c204b2505867a4cd8e4735/src%2Ftest%2Fui%2Fe0119%2Fconflict-with-std.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/33b0b7148fa4eacf43c204b2505867a4cd8e4735/src%2Ftest%2Fui%2Fe0119%2Fconflict-with-std.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fe0119%2Fconflict-with-std.stderr?ref=33b0b7148fa4eacf43c204b2505867a4cd8e4735", "patch": "@@ -25,7 +25,7 @@ LL | impl TryFrom<X> for X { //~ ERROR conflicting implementations\n    |\n    = note: conflicting implementation in crate `core`:\n            - impl<T, U> std::convert::TryFrom<U> for T\n-             where T: std::convert::From<U>;\n+             where U: std::convert::Into<T>;\n \n error: aborting due to 3 previous errors\n "}, {"sha": "a10f2c00578c63d41af185fa0f96868b8f3d104f", "filename": "src/test/ui/error-codes/E0214.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/33b0b7148fa4eacf43c204b2505867a4cd8e4735/src%2Ftest%2Fui%2Ferror-codes%2FE0214.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/33b0b7148fa4eacf43c204b2505867a4cd8e4735/src%2Ftest%2Fui%2Ferror-codes%2FE0214.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0214.stderr?ref=33b0b7148fa4eacf43c204b2505867a4cd8e4735", "patch": "@@ -1,8 +1,11 @@\n-error[E0214]: parenthesized parameters may only be used with a trait\n+error[E0214]: parenthesized type parameters may only be used with a `Fn` trait\n   --> $DIR/E0214.rs:2:15\n    |\n LL |     let v: Vec(&str) = vec![\"foo\"];\n-   |               ^^^^^^ only traits may use parentheses\n+   |               ^^^^^^\n+   |               |\n+   |               only `Fn` traits may use parentheses\n+   |               help: use angle brackets instead: `<&str>`\n \n error: aborting due to previous error\n "}, {"sha": "1c640af8d02b9311b8dae6a75025853a8fda3194", "filename": "src/test/ui/issues/issue-23589.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/33b0b7148fa4eacf43c204b2505867a4cd8e4735/src%2Ftest%2Fui%2Fissues%2Fissue-23589.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33b0b7148fa4eacf43c204b2505867a4cd8e4735/src%2Ftest%2Fui%2Fissues%2Fissue-23589.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23589.rs?ref=33b0b7148fa4eacf43c204b2505867a4cd8e4735", "patch": "@@ -1,4 +1,5 @@\n fn main() {\n     let v: Vec(&str) = vec!['1', '2'];\n-    //~^ ERROR parenthesized parameters may only be used with a trait\n+    //~^ ERROR parenthesized type parameters may only be used with a `Fn` trait\n+    //~| ERROR mismatched types\n }"}, {"sha": "bc2007ba39cc632965b4128485a5f194ecbac66f", "filename": "src/test/ui/issues/issue-23589.stderr", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/33b0b7148fa4eacf43c204b2505867a4cd8e4735/src%2Ftest%2Fui%2Fissues%2Fissue-23589.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/33b0b7148fa4eacf43c204b2505867a4cd8e4735/src%2Ftest%2Fui%2Fissues%2Fissue-23589.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23589.stderr?ref=33b0b7148fa4eacf43c204b2505867a4cd8e4735", "patch": "@@ -1,9 +1,22 @@\n-error[E0214]: parenthesized parameters may only be used with a trait\n+error[E0214]: parenthesized type parameters may only be used with a `Fn` trait\n   --> $DIR/issue-23589.rs:2:15\n    |\n LL |     let v: Vec(&str) = vec!['1', '2'];\n-   |               ^^^^^^ only traits may use parentheses\n+   |               ^^^^^^\n+   |               |\n+   |               only `Fn` traits may use parentheses\n+   |               help: use angle brackets instead: `<&str>`\n \n-error: aborting due to previous error\n+error[E0308]: mismatched types\n+  --> $DIR/issue-23589.rs:2:29\n+   |\n+LL |     let v: Vec(&str) = vec!['1', '2'];\n+   |                             ^^^ expected &str, found char\n+   |\n+   = note: expected type `&str`\n+              found type `char`\n+\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0214`.\n+Some errors occurred: E0214, E0308.\n+For more information about an error, try `rustc --explain E0214`."}, {"sha": "2234f68f246292a00449eb0ec2f11f6c5d7a389e", "filename": "src/test/ui/issues/issue-32995-2.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/33b0b7148fa4eacf43c204b2505867a4cd8e4735/src%2Ftest%2Fui%2Fissues%2Fissue-32995-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33b0b7148fa4eacf43c204b2505867a4cd8e4735/src%2Ftest%2Fui%2Fissues%2Fissue-32995-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32995-2.rs?ref=33b0b7148fa4eacf43c204b2505867a4cd8e4735", "patch": "@@ -2,17 +2,17 @@\n \n fn main() {\n     { fn f<X: ::std::marker()::Send>() {} }\n-    //~^ ERROR parenthesized parameters may only be used with a trait\n+    //~^ ERROR parenthesized type parameters may only be used with a `Fn` trait\n     //~| WARN previously accepted\n \n     { fn f() -> impl ::std::marker()::Send { } }\n-    //~^ ERROR parenthesized parameters may only be used with a trait\n+    //~^ ERROR parenthesized type parameters may only be used with a `Fn` trait\n     //~| WARN previously accepted\n }\n \n #[derive(Clone)]\n struct X;\n \n impl ::std::marker()::Copy for X {}\n-//~^ ERROR parenthesized parameters may only be used with a trait\n+//~^ ERROR parenthesized type parameters may only be used with a `Fn` trait\n //~| WARN previously accepted"}, {"sha": "104b76cba2df933b107a96454adea65036331dd0", "filename": "src/test/ui/issues/issue-32995-2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/33b0b7148fa4eacf43c204b2505867a4cd8e4735/src%2Ftest%2Fui%2Fissues%2Fissue-32995-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/33b0b7148fa4eacf43c204b2505867a4cd8e4735/src%2Ftest%2Fui%2Fissues%2Fissue-32995-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32995-2.stderr?ref=33b0b7148fa4eacf43c204b2505867a4cd8e4735", "patch": "@@ -1,4 +1,4 @@\n-error: parenthesized parameters may only be used with a trait\n+error: parenthesized type parameters may only be used with a `Fn` trait\n   --> $DIR/issue-32995-2.rs:4:28\n    |\n LL |     { fn f<X: ::std::marker()::Send>() {} }\n@@ -8,7 +8,7 @@ LL |     { fn f<X: ::std::marker()::Send>() {} }\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #42238 <https://github.com/rust-lang/rust/issues/42238>\n \n-error: parenthesized parameters may only be used with a trait\n+error: parenthesized type parameters may only be used with a `Fn` trait\n   --> $DIR/issue-32995-2.rs:8:35\n    |\n LL |     { fn f() -> impl ::std::marker()::Send { } }\n@@ -17,7 +17,7 @@ LL |     { fn f() -> impl ::std::marker()::Send { } }\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #42238 <https://github.com/rust-lang/rust/issues/42238>\n \n-error: parenthesized parameters may only be used with a trait\n+error: parenthesized type parameters may only be used with a `Fn` trait\n   --> $DIR/issue-32995-2.rs:16:19\n    |\n LL | impl ::std::marker()::Copy for X {}"}, {"sha": "c32fb63f1e5845a9c0ca18815f3516668ca58fe1", "filename": "src/test/ui/issues/issue-32995.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/33b0b7148fa4eacf43c204b2505867a4cd8e4735/src%2Ftest%2Fui%2Fissues%2Fissue-32995.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33b0b7148fa4eacf43c204b2505867a4cd8e4735/src%2Ftest%2Fui%2Fissues%2Fissue-32995.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32995.rs?ref=33b0b7148fa4eacf43c204b2505867a4cd8e4735", "patch": "@@ -2,32 +2,32 @@\n \n fn main() {\n     let x: usize() = 1;\n-    //~^ ERROR parenthesized parameters may only be used with a trait\n+    //~^ ERROR parenthesized type parameters may only be used with a `Fn` trait\n     //~| WARN previously accepted\n \n     let b: ::std::boxed()::Box<_> = Box::new(1);\n-    //~^ ERROR parenthesized parameters may only be used with a trait\n+    //~^ ERROR parenthesized type parameters may only be used with a `Fn` trait\n     //~| WARN previously accepted\n \n     let p = ::std::str::()::from_utf8(b\"foo\").unwrap();\n-    //~^ ERROR parenthesized parameters may only be used with a trait\n+    //~^ ERROR parenthesized type parameters may only be used with a `Fn` trait\n     //~| WARN previously accepted\n \n     let p = ::std::str::from_utf8::()(b\"foo\").unwrap();\n-    //~^ ERROR parenthesized parameters may only be used with a trait\n+    //~^ ERROR parenthesized type parameters may only be used with a `Fn` trait\n     //~| WARN previously accepted\n \n     let o : Box<::std::marker()::Send> = Box::new(1);\n-    //~^ ERROR parenthesized parameters may only be used with a trait\n+    //~^ ERROR parenthesized type parameters may only be used with a `Fn` trait\n     //~| WARN previously accepted\n \n     let o : Box<Send + ::std::marker()::Sync> = Box::new(1);\n-    //~^ ERROR parenthesized parameters may only be used with a trait\n+    //~^ ERROR parenthesized type parameters may only be used with a `Fn` trait\n     //~| WARN previously accepted\n }\n \n fn foo<X:Default>() {\n     let d : X() = Default::default();\n-    //~^ ERROR parenthesized parameters may only be used with a trait\n+    //~^ ERROR parenthesized type parameters may only be used with a `Fn` trait\n     //~| WARN previously accepted\n }"}, {"sha": "97b4b7fa76ca81354b7e6c6b89ce02923501a68a", "filename": "src/test/ui/issues/issue-32995.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/33b0b7148fa4eacf43c204b2505867a4cd8e4735/src%2Ftest%2Fui%2Fissues%2Fissue-32995.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/33b0b7148fa4eacf43c204b2505867a4cd8e4735/src%2Ftest%2Fui%2Fissues%2Fissue-32995.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32995.stderr?ref=33b0b7148fa4eacf43c204b2505867a4cd8e4735", "patch": "@@ -1,4 +1,4 @@\n-error: parenthesized parameters may only be used with a trait\n+error: parenthesized type parameters may only be used with a `Fn` trait\n   --> $DIR/issue-32995.rs:4:17\n    |\n LL |     let x: usize() = 1;\n@@ -8,7 +8,7 @@ LL |     let x: usize() = 1;\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #42238 <https://github.com/rust-lang/rust/issues/42238>\n \n-error: parenthesized parameters may only be used with a trait\n+error: parenthesized type parameters may only be used with a `Fn` trait\n   --> $DIR/issue-32995.rs:8:24\n    |\n LL |     let b: ::std::boxed()::Box<_> = Box::new(1);\n@@ -17,25 +17,25 @@ LL |     let b: ::std::boxed()::Box<_> = Box::new(1);\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #42238 <https://github.com/rust-lang/rust/issues/42238>\n \n-error: parenthesized parameters may only be used with a trait\n-  --> $DIR/issue-32995.rs:12:23\n+error: parenthesized type parameters may only be used with a `Fn` trait\n+  --> $DIR/issue-32995.rs:12:25\n    |\n LL |     let p = ::std::str::()::from_utf8(b\"foo\").unwrap();\n-   |                       ^^^^\n+   |                         ^^\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #42238 <https://github.com/rust-lang/rust/issues/42238>\n \n-error: parenthesized parameters may only be used with a trait\n-  --> $DIR/issue-32995.rs:16:34\n+error: parenthesized type parameters may only be used with a `Fn` trait\n+  --> $DIR/issue-32995.rs:16:36\n    |\n LL |     let p = ::std::str::from_utf8::()(b\"foo\").unwrap();\n-   |                                  ^^^^\n+   |                                    ^^\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #42238 <https://github.com/rust-lang/rust/issues/42238>\n \n-error: parenthesized parameters may only be used with a trait\n+error: parenthesized type parameters may only be used with a `Fn` trait\n   --> $DIR/issue-32995.rs:20:30\n    |\n LL |     let o : Box<::std::marker()::Send> = Box::new(1);\n@@ -44,7 +44,7 @@ LL |     let o : Box<::std::marker()::Send> = Box::new(1);\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #42238 <https://github.com/rust-lang/rust/issues/42238>\n \n-error: parenthesized parameters may only be used with a trait\n+error: parenthesized type parameters may only be used with a `Fn` trait\n   --> $DIR/issue-32995.rs:24:37\n    |\n LL |     let o : Box<Send + ::std::marker()::Sync> = Box::new(1);\n@@ -53,7 +53,7 @@ LL |     let o : Box<Send + ::std::marker()::Sync> = Box::new(1);\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #42238 <https://github.com/rust-lang/rust/issues/42238>\n \n-error: parenthesized parameters may only be used with a trait\n+error: parenthesized type parameters may only be used with a `Fn` trait\n   --> $DIR/issue-32995.rs:30:14\n    |\n LL |     let d : X() = Default::default();"}, {"sha": "d0aae23b2fce603ed30f539b71b079d1635ce23b", "filename": "src/test/ui/issues/issue-57741-1.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/33b0b7148fa4eacf43c204b2505867a4cd8e4735/src%2Ftest%2Fui%2Fissues%2Fissue-57741-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33b0b7148fa4eacf43c204b2505867a4cd8e4735/src%2Ftest%2Fui%2Fissues%2Fissue-57741-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-57741-1.rs?ref=33b0b7148fa4eacf43c204b2505867a4cd8e4735", "patch": "@@ -0,0 +1,18 @@\n+#![allow(warnings)]\n+\n+// This tests that the `help: consider dereferencing the boxed value` suggestion isn't made\n+// because the box doesn't deref to the type of the arm.\n+\n+enum S {\n+    A { a: usize },\n+    B { b: usize },\n+}\n+\n+fn main() {\n+    let x = Box::new(3u32);\n+    let y = match x {\n+        S::A { a } | S::B { b: a } => a,\n+        //~^ ERROR mismatched types [E0308]\n+        //~^^ ERROR mismatched types [E0308]\n+    };\n+}"}, {"sha": "d36424b83b4e17d5ac63db219e0cf7853f7cbaf3", "filename": "src/test/ui/issues/issue-57741-1.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/33b0b7148fa4eacf43c204b2505867a4cd8e4735/src%2Ftest%2Fui%2Fissues%2Fissue-57741-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/33b0b7148fa4eacf43c204b2505867a4cd8e4735/src%2Ftest%2Fui%2Fissues%2Fissue-57741-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-57741-1.stderr?ref=33b0b7148fa4eacf43c204b2505867a4cd8e4735", "patch": "@@ -0,0 +1,25 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-57741-1.rs:14:9\n+   |\n+LL |     let y = match x {\n+   |                   - this match expression has type `std::boxed::Box<u32>`\n+LL |         S::A { a } | S::B { b: a } => a,\n+   |         ^^^^^^^^^^ expected struct `std::boxed::Box`, found enum `S`\n+   |\n+   = note: expected type `std::boxed::Box<u32>`\n+              found type `S`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-57741-1.rs:14:22\n+   |\n+LL |     let y = match x {\n+   |                   - this match expression has type `std::boxed::Box<u32>`\n+LL |         S::A { a } | S::B { b: a } => a,\n+   |                      ^^^^^^^^^^^^^ expected struct `std::boxed::Box`, found enum `S`\n+   |\n+   = note: expected type `std::boxed::Box<u32>`\n+              found type `S`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "4cae080033ca27ea6b768bd78dbf47fffe74af9c", "filename": "src/test/ui/issues/issue-57741.fixed", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/33b0b7148fa4eacf43c204b2505867a4cd8e4735/src%2Ftest%2Fui%2Fissues%2Fissue-57741.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/33b0b7148fa4eacf43c204b2505867a4cd8e4735/src%2Ftest%2Fui%2Fissues%2Fissue-57741.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-57741.fixed?ref=33b0b7148fa4eacf43c204b2505867a4cd8e4735", "patch": "@@ -0,0 +1,31 @@\n+// run-rustfix\n+\n+#![allow(warnings)]\n+\n+// This tests that the `help: consider dereferencing the boxed value` suggestion is made and works.\n+\n+enum S {\n+    A { a: usize },\n+    B { b: usize },\n+}\n+\n+enum T {\n+    A(usize),\n+    B(usize),\n+}\n+\n+fn main() {\n+    let x = Box::new(T::A(3));\n+    let y = match *x {\n+        T::A(a) | T::B(a) => a,\n+        //~^ ERROR mismatched types [E0308]\n+        //~^^ ERROR mismatched types [E0308]\n+    };\n+\n+    let x = Box::new(S::A { a: 3 });\n+    let y = match *x {\n+        S::A { a } | S::B { b: a } => a,\n+        //~^ ERROR mismatched types [E0308]\n+        //~^^ ERROR mismatched types [E0308]\n+    };\n+}"}, {"sha": "e2658295af791719153f9259f520867351f7944b", "filename": "src/test/ui/issues/issue-57741.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/33b0b7148fa4eacf43c204b2505867a4cd8e4735/src%2Ftest%2Fui%2Fissues%2Fissue-57741.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33b0b7148fa4eacf43c204b2505867a4cd8e4735/src%2Ftest%2Fui%2Fissues%2Fissue-57741.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-57741.rs?ref=33b0b7148fa4eacf43c204b2505867a4cd8e4735", "patch": "@@ -0,0 +1,31 @@\n+// run-rustfix\n+\n+#![allow(warnings)]\n+\n+// This tests that the `help: consider dereferencing the boxed value` suggestion is made and works.\n+\n+enum S {\n+    A { a: usize },\n+    B { b: usize },\n+}\n+\n+enum T {\n+    A(usize),\n+    B(usize),\n+}\n+\n+fn main() {\n+    let x = Box::new(T::A(3));\n+    let y = match x {\n+        T::A(a) | T::B(a) => a,\n+        //~^ ERROR mismatched types [E0308]\n+        //~^^ ERROR mismatched types [E0308]\n+    };\n+\n+    let x = Box::new(S::A { a: 3 });\n+    let y = match x {\n+        S::A { a } | S::B { b: a } => a,\n+        //~^ ERROR mismatched types [E0308]\n+        //~^^ ERROR mismatched types [E0308]\n+    };\n+}"}, {"sha": "a26b1d20ca3cb146a4f9b1436cd64d3308b4e630", "filename": "src/test/ui/issues/issue-57741.stderr", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/33b0b7148fa4eacf43c204b2505867a4cd8e4735/src%2Ftest%2Fui%2Fissues%2Fissue-57741.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/33b0b7148fa4eacf43c204b2505867a4cd8e4735/src%2Ftest%2Fui%2Fissues%2Fissue-57741.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-57741.stderr?ref=33b0b7148fa4eacf43c204b2505867a4cd8e4735", "patch": "@@ -0,0 +1,59 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-57741.rs:20:9\n+   |\n+LL |     let y = match x {\n+   |                   -\n+   |                   |\n+   |                   this match expression has type `std::boxed::Box<T>`\n+   |                   help: consider dereferencing the boxed value: `*x`\n+LL |         T::A(a) | T::B(a) => a,\n+   |         ^^^^^^^ expected struct `std::boxed::Box`, found enum `T`\n+   |\n+   = note: expected type `std::boxed::Box<T>`\n+              found type `T`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-57741.rs:20:19\n+   |\n+LL |     let y = match x {\n+   |                   -\n+   |                   |\n+   |                   this match expression has type `std::boxed::Box<T>`\n+   |                   help: consider dereferencing the boxed value: `*x`\n+LL |         T::A(a) | T::B(a) => a,\n+   |                   ^^^^^^^ expected struct `std::boxed::Box`, found enum `T`\n+   |\n+   = note: expected type `std::boxed::Box<T>`\n+              found type `T`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-57741.rs:27:9\n+   |\n+LL |     let y = match x {\n+   |                   -\n+   |                   |\n+   |                   this match expression has type `std::boxed::Box<S>`\n+   |                   help: consider dereferencing the boxed value: `*x`\n+LL |         S::A { a } | S::B { b: a } => a,\n+   |         ^^^^^^^^^^ expected struct `std::boxed::Box`, found enum `S`\n+   |\n+   = note: expected type `std::boxed::Box<S>`\n+              found type `S`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-57741.rs:27:22\n+   |\n+LL |     let y = match x {\n+   |                   -\n+   |                   |\n+   |                   this match expression has type `std::boxed::Box<S>`\n+   |                   help: consider dereferencing the boxed value: `*x`\n+LL |         S::A { a } | S::B { b: a } => a,\n+   |                      ^^^^^^^^^^^^^ expected struct `std::boxed::Box`, found enum `S`\n+   |\n+   = note: expected type `std::boxed::Box<S>`\n+              found type `S`\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "5809d64e8067843dd0f6e31621d1d59ca9d5b2d5", "filename": "src/test/ui/parser/doc-before-eof.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33b0b7148fa4eacf43c204b2505867a4cd8e4735/src%2Ftest%2Fui%2Fparser%2Fdoc-before-eof.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/33b0b7148fa4eacf43c204b2505867a4cd8e4735/src%2Ftest%2Fui%2Fparser%2Fdoc-before-eof.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdoc-before-eof.stderr?ref=33b0b7148fa4eacf43c204b2505867a4cd8e4735", "patch": "@@ -2,7 +2,7 @@ error: expected item after doc comment\n   --> $DIR/doc-before-eof.rs:3:1\n    |\n LL | /// hi //~ERROR expected item after doc comment\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ this doc comment doesn't document anything\n \n error: aborting due to previous error\n "}, {"sha": "8cc9c916a7afd6b3531399f9102277e1a0825f34", "filename": "src/test/ui/parser/doc-before-extern-rbrace.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33b0b7148fa4eacf43c204b2505867a4cd8e4735/src%2Ftest%2Fui%2Fparser%2Fdoc-before-extern-rbrace.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/33b0b7148fa4eacf43c204b2505867a4cd8e4735/src%2Ftest%2Fui%2Fparser%2Fdoc-before-extern-rbrace.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdoc-before-extern-rbrace.stderr?ref=33b0b7148fa4eacf43c204b2505867a4cd8e4735", "patch": "@@ -2,7 +2,7 @@ error: expected item after doc comment\n   --> $DIR/doc-before-extern-rbrace.rs:2:5\n    |\n LL |     /// hi\n-   |     ^^^^^^\n+   |     ^^^^^^ this doc comment doesn't document anything\n \n error: aborting due to previous error\n "}, {"sha": "4eaf351f676c8963906faec647d7db7c6fc49a81", "filename": "src/test/ui/parser/doc-before-mod-rbrace.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33b0b7148fa4eacf43c204b2505867a4cd8e4735/src%2Ftest%2Fui%2Fparser%2Fdoc-before-mod-rbrace.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/33b0b7148fa4eacf43c204b2505867a4cd8e4735/src%2Ftest%2Fui%2Fparser%2Fdoc-before-mod-rbrace.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdoc-before-mod-rbrace.stderr?ref=33b0b7148fa4eacf43c204b2505867a4cd8e4735", "patch": "@@ -2,7 +2,7 @@ error: expected item after doc comment\n   --> $DIR/doc-before-mod-rbrace.rs:4:5\n    |\n LL |     /// document\n-   |     ^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^ this doc comment doesn't document anything\n \n error: aborting due to previous error\n "}, {"sha": "2183c74da0acbf43c92ff13a7d0be5f3a9300ea2", "filename": "src/test/ui/parser/type-parameters-in-field-exprs.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/33b0b7148fa4eacf43c204b2505867a4cd8e4735/src%2Ftest%2Fui%2Fparser%2Ftype-parameters-in-field-exprs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/33b0b7148fa4eacf43c204b2505867a4cd8e4735/src%2Ftest%2Fui%2Fparser%2Ftype-parameters-in-field-exprs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftype-parameters-in-field-exprs.stderr?ref=33b0b7148fa4eacf43c204b2505867a4cd8e4735", "patch": "@@ -1,20 +1,20 @@\n error: field expressions may not have generic arguments\n-  --> $DIR/type-parameters-in-field-exprs.rs:13:8\n+  --> $DIR/type-parameters-in-field-exprs.rs:13:10\n    |\n LL |     f.x::<isize>;\n-   |        ^^^^^^^^^\n+   |          ^^^^^^^\n \n error: field expressions may not have generic arguments\n-  --> $DIR/type-parameters-in-field-exprs.rs:15:8\n+  --> $DIR/type-parameters-in-field-exprs.rs:15:10\n    |\n LL |     f.x::<>;\n-   |        ^^^^\n+   |          ^^\n \n error: field expressions may not have generic arguments\n-  --> $DIR/type-parameters-in-field-exprs.rs:17:8\n+  --> $DIR/type-parameters-in-field-exprs.rs:17:10\n    |\n LL |     f.x::();\n-   |        ^^^^\n+   |          ^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "965ca7000be80f7d9e805b2838dbb7e7051951f6", "filename": "src/test/ui/span/macro-ty-params.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/33b0b7148fa4eacf43c204b2505867a4cd8e4735/src%2Ftest%2Fui%2Fspan%2Fmacro-ty-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/33b0b7148fa4eacf43c204b2505867a4cd8e4735/src%2Ftest%2Fui%2Fspan%2Fmacro-ty-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmacro-ty-params.stderr?ref=33b0b7148fa4eacf43c204b2505867a4cd8e4735", "patch": "@@ -1,14 +1,14 @@\n error: generic arguments in macro path\n-  --> $DIR/macro-ty-params.rs:10:8\n+  --> $DIR/macro-ty-params.rs:10:10\n    |\n LL |     foo::<T>!(); //~ ERROR generic arguments in macro path\n-   |        ^^^^^\n+   |          ^^^\n \n error: generic arguments in macro path\n-  --> $DIR/macro-ty-params.rs:11:8\n+  --> $DIR/macro-ty-params.rs:11:10\n    |\n LL |     foo::<>!(); //~ ERROR generic arguments in macro path\n-   |        ^^^^\n+   |          ^^\n \n error: unexpected generic arguments in path\n   --> $DIR/macro-ty-params.rs:12:8"}, {"sha": "2ce12220723df745d7986ea148ccc39722f5502e", "filename": "src/test/ui/suggestions/type-mismatch-struct-field-shorthand-2.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/33b0b7148fa4eacf43c204b2505867a4cd8e4735/src%2Ftest%2Fui%2Fsuggestions%2Ftype-mismatch-struct-field-shorthand-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33b0b7148fa4eacf43c204b2505867a4cd8e4735/src%2Ftest%2Fui%2Fsuggestions%2Ftype-mismatch-struct-field-shorthand-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftype-mismatch-struct-field-shorthand-2.rs?ref=33b0b7148fa4eacf43c204b2505867a4cd8e4735", "patch": "@@ -0,0 +1,9 @@\n+struct RGB { r: f64, g: f64, b: f64 }\n+\n+fn main() {\n+    let (r, g, c): (f32, f32, f32) = (0., 0., 0.);\n+    let _ = RGB { r, g, c };\n+    //~^ ERROR mismatched types\n+    //~| ERROR mismatched types\n+    //~| ERROR struct `RGB` has no field named `c`\n+}"}, {"sha": "d0f9e1f7f7c8ee433d9390bd438b8e9f5fc0867a", "filename": "src/test/ui/suggestions/type-mismatch-struct-field-shorthand-2.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/33b0b7148fa4eacf43c204b2505867a4cd8e4735/src%2Ftest%2Fui%2Fsuggestions%2Ftype-mismatch-struct-field-shorthand-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/33b0b7148fa4eacf43c204b2505867a4cd8e4735/src%2Ftest%2Fui%2Fsuggestions%2Ftype-mismatch-struct-field-shorthand-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftype-mismatch-struct-field-shorthand-2.stderr?ref=33b0b7148fa4eacf43c204b2505867a4cd8e4735", "patch": "@@ -0,0 +1,30 @@\n+error[E0308]: mismatched types\n+  --> $DIR/type-mismatch-struct-field-shorthand-2.rs:5:19\n+   |\n+LL |     let _ = RGB { r, g, c };\n+   |                   ^ expected f64, found f32\n+help: you can cast an `f32` to `f64` in a lossless way\n+   |\n+LL |     let _ = RGB { r: r.into(), g, c };\n+   |                   ^^^^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/type-mismatch-struct-field-shorthand-2.rs:5:22\n+   |\n+LL |     let _ = RGB { r, g, c };\n+   |                      ^ expected f64, found f32\n+help: you can cast an `f32` to `f64` in a lossless way\n+   |\n+LL |     let _ = RGB { r, g: g.into(), c };\n+   |                      ^^^^^^^^^^^\n+\n+error[E0560]: struct `RGB` has no field named `c`\n+  --> $DIR/type-mismatch-struct-field-shorthand-2.rs:5:25\n+   |\n+LL |     let _ = RGB { r, g, c };\n+   |                         ^ help: a field with a similar name exists: `b`\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors occurred: E0308, E0560.\n+For more information about an error, try `rustc --explain E0308`."}, {"sha": "91758c0b218823d54d2fb1c13b613a922ff7f1fb", "filename": "src/test/ui/suggestions/type-mismatch-struct-field-shorthand.fixed", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/33b0b7148fa4eacf43c204b2505867a4cd8e4735/src%2Ftest%2Fui%2Fsuggestions%2Ftype-mismatch-struct-field-shorthand.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/33b0b7148fa4eacf43c204b2505867a4cd8e4735/src%2Ftest%2Fui%2Fsuggestions%2Ftype-mismatch-struct-field-shorthand.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftype-mismatch-struct-field-shorthand.fixed?ref=33b0b7148fa4eacf43c204b2505867a4cd8e4735", "patch": "@@ -0,0 +1,12 @@\n+// run-rustfix\n+#![allow(dead_code)]\n+\n+struct RGB { r: f64, g: f64, b: f64 }\n+\n+fn main() {\n+    let (r, g, b): (f32, f32, f32) = (0., 0., 0.);\n+    let _ = RGB { r: r.into(), g: g.into(), b: b.into() };\n+    //~^ ERROR mismatched types\n+    //~| ERROR mismatched types\n+    //~| ERROR mismatched types\n+}"}, {"sha": "9d3a17a72b21e21ffdf1bca23c9f6950cfcbbf2a", "filename": "src/test/ui/suggestions/type-mismatch-struct-field-shorthand.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/33b0b7148fa4eacf43c204b2505867a4cd8e4735/src%2Ftest%2Fui%2Fsuggestions%2Ftype-mismatch-struct-field-shorthand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33b0b7148fa4eacf43c204b2505867a4cd8e4735/src%2Ftest%2Fui%2Fsuggestions%2Ftype-mismatch-struct-field-shorthand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftype-mismatch-struct-field-shorthand.rs?ref=33b0b7148fa4eacf43c204b2505867a4cd8e4735", "patch": "@@ -0,0 +1,12 @@\n+// run-rustfix\n+#![allow(dead_code)]\n+\n+struct RGB { r: f64, g: f64, b: f64 }\n+\n+fn main() {\n+    let (r, g, b): (f32, f32, f32) = (0., 0., 0.);\n+    let _ = RGB { r, g, b };\n+    //~^ ERROR mismatched types\n+    //~| ERROR mismatched types\n+    //~| ERROR mismatched types\n+}"}, {"sha": "6bc16ba8b70fa927c25cc1657401649dce32f244", "filename": "src/test/ui/suggestions/type-mismatch-struct-field-shorthand.stderr", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/33b0b7148fa4eacf43c204b2505867a4cd8e4735/src%2Ftest%2Fui%2Fsuggestions%2Ftype-mismatch-struct-field-shorthand.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/33b0b7148fa4eacf43c204b2505867a4cd8e4735/src%2Ftest%2Fui%2Fsuggestions%2Ftype-mismatch-struct-field-shorthand.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftype-mismatch-struct-field-shorthand.stderr?ref=33b0b7148fa4eacf43c204b2505867a4cd8e4735", "patch": "@@ -0,0 +1,33 @@\n+error[E0308]: mismatched types\n+  --> $DIR/type-mismatch-struct-field-shorthand.rs:8:19\n+   |\n+LL |     let _ = RGB { r, g, b };\n+   |                   ^ expected f64, found f32\n+help: you can cast an `f32` to `f64` in a lossless way\n+   |\n+LL |     let _ = RGB { r: r.into(), g, b };\n+   |                   ^^^^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/type-mismatch-struct-field-shorthand.rs:8:22\n+   |\n+LL |     let _ = RGB { r, g, b };\n+   |                      ^ expected f64, found f32\n+help: you can cast an `f32` to `f64` in a lossless way\n+   |\n+LL |     let _ = RGB { r, g: g.into(), b };\n+   |                      ^^^^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/type-mismatch-struct-field-shorthand.rs:8:25\n+   |\n+LL |     let _ = RGB { r, g, b };\n+   |                         ^ expected f64, found f32\n+help: you can cast an `f32` to `f64` in a lossless way\n+   |\n+LL |     let _ = RGB { r, g, b: b.into() };\n+   |                         ^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "c96a6fa8b6c91b2942840cc765e3d0e3635c6132", "filename": "src/test/ui/unboxed-closures/unboxed-closure-sugar-used-on-struct-1.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/33b0b7148fa4eacf43c204b2505867a4cd8e4735/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33b0b7148fa4eacf43c204b2505867a4cd8e4735/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct-1.rs?ref=33b0b7148fa4eacf43c204b2505867a4cd8e4735", "patch": "@@ -6,7 +6,8 @@ struct Bar<A> {\n \n fn bar() {\n     let x: Box<Bar()> = panic!();\n-    //~^ ERROR parenthesized parameters may only be used with a trait\n+    //~^ ERROR parenthesized type parameters may only be used with a `Fn` trait\n+    //~| ERROR wrong number of type arguments: expected 1, found 0\n }\n \n fn main() { }"}, {"sha": "fa52e66fb03495495e075d746e03fbf6f9c6ea4f", "filename": "src/test/ui/unboxed-closures/unboxed-closure-sugar-used-on-struct-1.stderr", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/33b0b7148fa4eacf43c204b2505867a4cd8e4735/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/33b0b7148fa4eacf43c204b2505867a4cd8e4735/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct-1.stderr?ref=33b0b7148fa4eacf43c204b2505867a4cd8e4735", "patch": "@@ -1,9 +1,16 @@\n-error[E0214]: parenthesized parameters may only be used with a trait\n+error[E0214]: parenthesized type parameters may only be used with a `Fn` trait\n   --> $DIR/unboxed-closure-sugar-used-on-struct-1.rs:8:19\n    |\n LL |     let x: Box<Bar()> = panic!();\n-   |                   ^^ only traits may use parentheses\n+   |                   ^^ only `Fn` traits may use parentheses\n \n-error: aborting due to previous error\n+error[E0107]: wrong number of type arguments: expected 1, found 0\n+  --> $DIR/unboxed-closure-sugar-used-on-struct-1.rs:8:16\n+   |\n+LL |     let x: Box<Bar()> = panic!();\n+   |                ^^^^^ expected 1 type argument\n+\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0214`.\n+Some errors occurred: E0107, E0214.\n+For more information about an error, try `rustc --explain E0107`."}, {"sha": "79ced1ecfb1a04734b4825a2afa6f79356cf76d5", "filename": "src/test/ui/unboxed-closures/unboxed-closure-sugar-used-on-struct-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33b0b7148fa4eacf43c204b2505867a4cd8e4735/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33b0b7148fa4eacf43c204b2505867a4cd8e4735/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct-3.rs?ref=33b0b7148fa4eacf43c204b2505867a4cd8e4735", "patch": "@@ -12,7 +12,7 @@ fn bar() {\n     let b = Bar::<isize, usize>::new(); // OK\n \n     let b = Bar::(isize, usize)::new(); // OK too (for the parser)\n-    //~^ ERROR parenthesized parameters may only be used with a trait\n+    //~^ ERROR parenthesized type parameters may only be used with a `Fn` trait\n }\n \n fn main() {}"}, {"sha": "7d05ca55ffdb0bec1d39d2a0a88ead18b691dc2a", "filename": "src/test/ui/unboxed-closures/unboxed-closure-sugar-used-on-struct-3.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/33b0b7148fa4eacf43c204b2505867a4cd8e4735/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/33b0b7148fa4eacf43c204b2505867a4cd8e4735/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct-3.stderr?ref=33b0b7148fa4eacf43c204b2505867a4cd8e4735", "patch": "@@ -1,8 +1,11 @@\n-error[E0214]: parenthesized parameters may only be used with a trait\n-  --> $DIR/unboxed-closure-sugar-used-on-struct-3.rs:14:16\n+error[E0214]: parenthesized type parameters may only be used with a `Fn` trait\n+  --> $DIR/unboxed-closure-sugar-used-on-struct-3.rs:14:18\n    |\n LL |     let b = Bar::(isize, usize)::new(); // OK too (for the parser)\n-   |                ^^^^^^^^^^^^^^^^ only traits may use parentheses\n+   |                  ^^^^^^^^^^^^^^\n+   |                  |\n+   |                  only `Fn` traits may use parentheses\n+   |                  help: use angle brackets instead: `<isize, usize>`\n \n error: aborting due to previous error\n "}, {"sha": "1af7f55674c6aa9c388533563b60ddac19084443", "filename": "src/test/ui/unboxed-closures/unboxed-closure-sugar-used-on-struct.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/33b0b7148fa4eacf43c204b2505867a4cd8e4735/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33b0b7148fa4eacf43c204b2505867a4cd8e4735/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct.rs?ref=33b0b7148fa4eacf43c204b2505867a4cd8e4735", "patch": "@@ -5,8 +5,8 @@ struct Bar<A> {\n }\n \n fn foo(b: Box<Bar()>) {\n-    //~^ ERROR parenthesized parameters may only be used with a trait\n-    //~| ERROR the type placeholder `_` is not allowed within types on item signatures\n+    //~^ ERROR parenthesized type parameters may only be used with a `Fn` trait\n+    //~| ERROR wrong number of type arguments: expected 1, found 0\n }\n \n fn main() { }"}, {"sha": "b34237937ee1cb0f28dbacebac9274770aa585d4", "filename": "src/test/ui/unboxed-closures/unboxed-closure-sugar-used-on-struct.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/33b0b7148fa4eacf43c204b2505867a4cd8e4735/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/33b0b7148fa4eacf43c204b2505867a4cd8e4735/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct.stderr?ref=33b0b7148fa4eacf43c204b2505867a4cd8e4735", "patch": "@@ -1,16 +1,16 @@\n-error[E0214]: parenthesized parameters may only be used with a trait\n+error[E0214]: parenthesized type parameters may only be used with a `Fn` trait\n   --> $DIR/unboxed-closure-sugar-used-on-struct.rs:7:18\n    |\n LL | fn foo(b: Box<Bar()>) {\n-   |                  ^^ only traits may use parentheses\n+   |                  ^^ only `Fn` traits may use parentheses\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+error[E0107]: wrong number of type arguments: expected 1, found 0\n   --> $DIR/unboxed-closure-sugar-used-on-struct.rs:7:15\n    |\n LL | fn foo(b: Box<Bar()>) {\n-   |               ^^^^^ not allowed in type signatures\n+   |               ^^^^^ expected 1 type argument\n \n error: aborting due to 2 previous errors\n \n-Some errors occurred: E0121, E0214.\n-For more information about an error, try `rustc --explain E0121`.\n+Some errors occurred: E0107, E0214.\n+For more information about an error, try `rustc --explain E0107`."}]}