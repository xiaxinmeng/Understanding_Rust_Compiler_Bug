{"sha": "45582079bc24e85fb0c7b292311d84d1fa173542", "node_id": "C_kwDOAAsO6NoAKDQ1NTgyMDc5YmMyNGU4NWZiMGM3YjI5MjMxMWQ4NGQxZmExNzM1NDI", "commit": {"author": {"name": "Josh Triplett", "email": "josh@joshtriplett.org", "date": "2022-05-20T02:06:05Z"}, "committer": {"name": "Josh Triplett", "email": "josh@joshtriplett.org", "date": "2022-05-21T20:42:47Z"}, "message": "Expand the explanation of OsString capacity", "tree": {"sha": "3c24eefc1214889cc9ecd9a7d62a3e162a23057f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c24eefc1214889cc9ecd9a7d62a3e162a23057f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45582079bc24e85fb0c7b292311d84d1fa173542", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45582079bc24e85fb0c7b292311d84d1fa173542", "html_url": "https://github.com/rust-lang/rust/commit/45582079bc24e85fb0c7b292311d84d1fa173542", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45582079bc24e85fb0c7b292311d84d1fa173542/comments", "author": {"login": "joshtriplett", "id": 162737, "node_id": "MDQ6VXNlcjE2MjczNw==", "avatar_url": "https://avatars.githubusercontent.com/u/162737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joshtriplett", "html_url": "https://github.com/joshtriplett", "followers_url": "https://api.github.com/users/joshtriplett/followers", "following_url": "https://api.github.com/users/joshtriplett/following{/other_user}", "gists_url": "https://api.github.com/users/joshtriplett/gists{/gist_id}", "starred_url": "https://api.github.com/users/joshtriplett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joshtriplett/subscriptions", "organizations_url": "https://api.github.com/users/joshtriplett/orgs", "repos_url": "https://api.github.com/users/joshtriplett/repos", "events_url": "https://api.github.com/users/joshtriplett/events{/privacy}", "received_events_url": "https://api.github.com/users/joshtriplett/received_events", "type": "User", "site_admin": false}, "committer": {"login": "joshtriplett", "id": 162737, "node_id": "MDQ6VXNlcjE2MjczNw==", "avatar_url": "https://avatars.githubusercontent.com/u/162737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joshtriplett", "html_url": "https://github.com/joshtriplett", "followers_url": "https://api.github.com/users/joshtriplett/followers", "following_url": "https://api.github.com/users/joshtriplett/following{/other_user}", "gists_url": "https://api.github.com/users/joshtriplett/gists{/gist_id}", "starred_url": "https://api.github.com/users/joshtriplett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joshtriplett/subscriptions", "organizations_url": "https://api.github.com/users/joshtriplett/orgs", "repos_url": "https://api.github.com/users/joshtriplett/repos", "events_url": "https://api.github.com/users/joshtriplett/events{/privacy}", "received_events_url": "https://api.github.com/users/joshtriplett/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81e21080b6a6419c093ef68d1a3943d946313d1d", "url": "https://api.github.com/repos/rust-lang/rust/commits/81e21080b6a6419c093ef68d1a3943d946313d1d", "html_url": "https://github.com/rust-lang/rust/commit/81e21080b6a6419c093ef68d1a3943d946313d1d"}], "stats": {"total": 17, "additions": 14, "deletions": 3}, "files": [{"sha": "e37d314b3e893fb435a48d605c64ef59957f7b34", "filename": "library/std/src/ffi/os_str.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/45582079bc24e85fb0c7b292311d84d1fa173542/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45582079bc24e85fb0c7b292311d84d1fa173542/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs?ref=45582079bc24e85fb0c7b292311d84d1fa173542", "patch": "@@ -45,10 +45,21 @@ use crate::sys_common::{AsInner, FromInner, IntoInner};\n /// values, encoded in a less-strict variant of UTF-8. This is useful to\n /// understand when handling capacity and length values.\n ///\n-/// # Capacity of OsString\n+/// # Capacity of `OsString`\n ///\n-/// Capacity means UTF-8 byte size for OS strings which created from\n-/// valid unicode, and not otherwise specified for other contents.\n+/// Capacity uses units of UTF-8 bytes for OS strings which were created from valid unicode, and\n+/// uses units of bytes in an unspecified encoding for other contents. On a given target, all\n+/// `OsString` and `OsStr` values use the same units for capacity, so the following will work:\n+/// ```\n+/// use std::ffi::{OsStr, OsString};\n+///\n+/// fn concat_os_strings(a: &OsStr, b: &OsStr) -> OsString {\n+///     let mut ret = OsString::with_capacity(a.len() + b.len()); // This will allocate\n+///     ret.push(a); // This will not allocate further\n+///     ret.push(b); // This will not allocate further\n+///     ret\n+/// }\n+/// ```\n ///\n /// # Creating an `OsString`\n ///"}]}