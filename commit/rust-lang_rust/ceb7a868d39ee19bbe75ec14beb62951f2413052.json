{"sha": "ceb7a868d39ee19bbe75ec14beb62951f2413052", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlYjdhODY4ZDM5ZWUxOWJiZTc1ZWMxNGJlYjYyOTUxZjI0MTMwNTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-27T08:19:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-27T08:19:23Z"}, "message": "Auto merge of #7466 - xFrednet:5393-use-more-diagnostic-items, r=flip1995\n\nUse diagnostic items where possible\n\nClippy still uses a bunch of paths in places that could easily use already defined diagnostic items. This PR updates all references to such paths and also removes a bunch of them that are no longer needed after this cleanup.\n\nSome paths are also used to construct new paths and can therefore not be removed that easily. I've added a doc comment to those instances that recommends the use of the diagnostic item where possible.\n\nAnd that's it, cleaning crew signing off :broom: :wastebasket:\n\n---\n\nchangelog: none\n\n(only internal improvements)\n\ncc: #5393", "tree": {"sha": "6fe2bfd20723997871a78edec7c6576c2490087d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6fe2bfd20723997871a78edec7c6576c2490087d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ceb7a868d39ee19bbe75ec14beb62951f2413052", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ceb7a868d39ee19bbe75ec14beb62951f2413052", "html_url": "https://github.com/rust-lang/rust/commit/ceb7a868d39ee19bbe75ec14beb62951f2413052", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ceb7a868d39ee19bbe75ec14beb62951f2413052/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd2b43dfb79e508635166b66a8eb04df934b35ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd2b43dfb79e508635166b66a8eb04df934b35ce", "html_url": "https://github.com/rust-lang/rust/commit/fd2b43dfb79e508635166b66a8eb04df934b35ce"}, {"sha": "ecf85f4bdc319f9d9d853d1fff68a8a25e64c7a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/ecf85f4bdc319f9d9d853d1fff68a8a25e64c7a8", "html_url": "https://github.com/rust-lang/rust/commit/ecf85f4bdc319f9d9d853d1fff68a8a25e64c7a8"}], "stats": {"total": 207, "additions": 109, "deletions": 98}, "files": [{"sha": "48316c3a61df00c1a509704bc531b0d9daaab183", "filename": "clippy_lints/src/from_over_into.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ceb7a868d39ee19bbe75ec14beb62951f2413052/clippy_lints%2Fsrc%2Ffrom_over_into.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb7a868d39ee19bbe75ec14beb62951f2413052/clippy_lints%2Fsrc%2Ffrom_over_into.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffrom_over_into.rs?ref=ceb7a868d39ee19bbe75ec14beb62951f2413052", "patch": "@@ -1,11 +1,11 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n-use clippy_utils::paths::INTO;\n-use clippy_utils::{match_def_path, meets_msrv, msrvs};\n+use clippy_utils::{meets_msrv, msrvs};\n use if_chain::if_chain;\n use rustc_hir as hir;\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n+use rustc_span::symbol::sym;\n \n declare_clippy_lint! {\n     /// **What it does:** Searches for implementations of the `Into<..>` trait and suggests to implement `From<..>` instead.\n@@ -62,7 +62,7 @@ impl LateLintPass<'_> for FromOverInto {\n         if_chain! {\n             if let hir::ItemKind::Impl{ .. } = &item.kind;\n             if let Some(impl_trait_ref) = cx.tcx.impl_trait_ref(item.def_id);\n-            if match_def_path(cx, impl_trait_ref.def_id, &INTO);\n+            if cx.tcx.is_diagnostic_item(sym::into_trait, impl_trait_ref.def_id);\n \n             then {\n                 span_lint_and_help("}, {"sha": "879d6a75bbeddc87c5c3e632f5735d6e86821db4", "filename": "clippy_lints/src/implicit_hasher.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ceb7a868d39ee19bbe75ec14beb62951f2413052/clippy_lints%2Fsrc%2Fimplicit_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb7a868d39ee19bbe75ec14beb62951f2413052/clippy_lints%2Fsrc%2Fimplicit_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fimplicit_hasher.rs?ref=ceb7a868d39ee19bbe75ec14beb62951f2413052", "patch": "@@ -17,10 +17,9 @@ use rustc_typeck::hir_ty_to_ty;\n use if_chain::if_chain;\n \n use clippy_utils::diagnostics::{multispan_sugg, span_lint_and_then};\n-use clippy_utils::paths;\n+use clippy_utils::differing_macro_contexts;\n use clippy_utils::source::{snippet, snippet_opt};\n use clippy_utils::ty::is_type_diagnostic_item;\n-use clippy_utils::{differing_macro_contexts, match_def_path};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for public `impl` or `fn` missing generalization\n@@ -337,7 +336,7 @@ impl<'a, 'b, 'tcx> Visitor<'tcx> for ImplicitHasherConstructorVisitor<'a, 'b, 't\n                     return;\n                 }\n \n-                if match_def_path(self.cx, ty_did, &paths::HASHMAP) {\n+                if self.cx.tcx.is_diagnostic_item(sym::hashmap_type, ty_did) {\n                     if method.ident.name == sym::new {\n                         self.suggestions\n                             .insert(e.span, \"HashMap::default()\".to_string());\n@@ -350,7 +349,7 @@ impl<'a, 'b, 'tcx> Visitor<'tcx> for ImplicitHasherConstructorVisitor<'a, 'b, 't\n                             ),\n                         );\n                     }\n-                } else if match_def_path(self.cx, ty_did, &paths::HASHSET) {\n+                } else if self.cx.tcx.is_diagnostic_item(sym::hashset_type, ty_did) {\n                     if method.ident.name == sym::new {\n                         self.suggestions\n                             .insert(e.span, \"HashSet::default()\".to_string());"}, {"sha": "295a4e1fccb0ac63103ff04ece42bd8df67b4e01", "filename": "clippy_lints/src/infinite_iter.rs", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ceb7a868d39ee19bbe75ec14beb62951f2413052/clippy_lints%2Fsrc%2Finfinite_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb7a868d39ee19bbe75ec14beb62951f2413052/clippy_lints%2Fsrc%2Finfinite_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finfinite_iter.rs?ref=ceb7a868d39ee19bbe75ec14beb62951f2413052", "patch": "@@ -1,9 +1,10 @@\n use clippy_utils::diagnostics::span_lint;\n-use clippy_utils::ty::{implements_trait, match_type};\n+use clippy_utils::ty::{implements_trait, is_type_diagnostic_item};\n use clippy_utils::{get_trait_def_id, higher, is_qpath_def_path, paths};\n use rustc_hir::{BorrowKind, Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::symbol::{sym, Symbol};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for iteration that is guaranteed to be infinite.\n@@ -202,15 +203,15 @@ const COMPLETING_METHODS: [(&str, usize); 12] = [\n ];\n \n /// the paths of types that are known to be infinitely allocating\n-const INFINITE_COLLECTORS: [&[&str]; 8] = [\n-    &paths::BINARY_HEAP,\n-    &paths::BTREEMAP,\n-    &paths::BTREESET,\n-    &paths::HASHMAP,\n-    &paths::HASHSET,\n-    &paths::LINKED_LIST,\n-    &paths::VEC,\n-    &paths::VEC_DEQUE,\n+const INFINITE_COLLECTORS: &[Symbol] = &[\n+    sym::BinaryHeap,\n+    sym::BTreeMap,\n+    sym::BTreeSet,\n+    sym::hashmap_type,\n+    sym::hashset_type,\n+    sym::LinkedList,\n+    sym::vec_type,\n+    sym::vecdeque_type,\n ];\n \n fn complete_infinite_iter(cx: &LateContext<'_>, expr: &Expr<'_>) -> Finiteness {\n@@ -235,7 +236,10 @@ fn complete_infinite_iter(cx: &LateContext<'_>, expr: &Expr<'_>) -> Finiteness {\n                 }\n             } else if method.ident.name == sym!(collect) {\n                 let ty = cx.typeck_results().expr_ty(expr);\n-                if INFINITE_COLLECTORS.iter().any(|path| match_type(cx, ty, path)) {\n+                if INFINITE_COLLECTORS\n+                    .iter()\n+                    .any(|diag_item| is_type_diagnostic_item(cx, ty, *diag_item))\n+                {\n                     return is_infinite(cx, &args[0]);\n                 }\n             }"}, {"sha": "1bab0d99b695c3348e4d20ace42fb3fc6ee643ff", "filename": "clippy_lints/src/loops/explicit_into_iter_loop.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ceb7a868d39ee19bbe75ec14beb62951f2413052/clippy_lints%2Fsrc%2Floops%2Fexplicit_into_iter_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb7a868d39ee19bbe75ec14beb62951f2413052/clippy_lints%2Fsrc%2Floops%2Fexplicit_into_iter_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fexplicit_into_iter_loop.rs?ref=ceb7a868d39ee19bbe75ec14beb62951f2413052", "patch": "@@ -1,16 +1,17 @@\n use super::EXPLICIT_INTO_ITER_LOOP;\n use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::is_trait_method;\n use clippy_utils::source::snippet_with_applicability;\n-use clippy_utils::{match_trait_method, paths};\n use rustc_errors::Applicability;\n use rustc_hir::Expr;\n use rustc_lint::LateContext;\n use rustc_middle::ty::TyS;\n+use rustc_span::symbol::sym;\n \n pub(super) fn check(cx: &LateContext<'_>, self_arg: &'hir Expr<'hir>, call_expr: &Expr<'_>) {\n     let self_ty = cx.typeck_results().expr_ty(self_arg);\n     let self_ty_adjusted = cx.typeck_results().expr_ty_adjusted(self_arg);\n-    if !(TyS::same_type(self_ty, self_ty_adjusted) && match_trait_method(cx, call_expr, &paths::INTO_ITERATOR)) {\n+    if !(TyS::same_type(self_ty, self_ty_adjusted) && is_trait_method(cx, call_expr, sym::IntoIterator)) {\n         return;\n     }\n "}, {"sha": "50bc096ba228cf3d0acb5436a3fac5a8a26dd25b", "filename": "clippy_lints/src/loops/explicit_iter_loop.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ceb7a868d39ee19bbe75ec14beb62951f2413052/clippy_lints%2Fsrc%2Floops%2Fexplicit_iter_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb7a868d39ee19bbe75ec14beb62951f2413052/clippy_lints%2Fsrc%2Floops%2Fexplicit_iter_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fexplicit_iter_loop.rs?ref=ceb7a868d39ee19bbe75ec14beb62951f2413052", "patch": "@@ -1,8 +1,8 @@\n use super::EXPLICIT_ITER_LOOP;\n use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::is_trait_method;\n use clippy_utils::source::snippet_with_applicability;\n-use clippy_utils::ty::{is_type_diagnostic_item, match_type};\n-use clippy_utils::{match_trait_method, paths};\n+use clippy_utils::ty::is_type_diagnostic_item;\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, Mutability};\n use rustc_lint::LateContext;\n@@ -12,7 +12,7 @@ use rustc_span::sym;\n pub(super) fn check(cx: &LateContext<'_>, self_arg: &Expr<'_>, arg: &Expr<'_>, method_name: &str) {\n     let should_lint = match method_name {\n         \"iter\" | \"iter_mut\" => is_ref_iterable_type(cx, self_arg),\n-        \"into_iter\" if match_trait_method(cx, arg, &paths::INTO_ITERATOR) => {\n+        \"into_iter\" if is_trait_method(cx, arg, sym::IntoIterator) => {\n             let receiver_ty = cx.typeck_results().expr_ty(self_arg);\n             let receiver_ty_adjusted = cx.typeck_results().expr_ty_adjusted(self_arg);\n             let ref_receiver_ty = cx.tcx.mk_ref(\n@@ -55,13 +55,13 @@ fn is_ref_iterable_type(cx: &LateContext<'_>, e: &Expr<'_>) -> bool {\n     let ty = cx.typeck_results().expr_ty(e);\n     is_iterable_array(ty, cx) ||\n     is_type_diagnostic_item(cx, ty, sym::vec_type) ||\n-    match_type(cx, ty, &paths::LINKED_LIST) ||\n+    is_type_diagnostic_item(cx, ty, sym::LinkedList) ||\n     is_type_diagnostic_item(cx, ty, sym::hashmap_type) ||\n     is_type_diagnostic_item(cx, ty, sym::hashset_type) ||\n     is_type_diagnostic_item(cx, ty, sym::vecdeque_type) ||\n-    match_type(cx, ty, &paths::BINARY_HEAP) ||\n-    match_type(cx, ty, &paths::BTREEMAP) ||\n-    match_type(cx, ty, &paths::BTREESET)\n+    is_type_diagnostic_item(cx, ty, sym::BinaryHeap) ||\n+    is_type_diagnostic_item(cx, ty, sym::BTreeMap) ||\n+    is_type_diagnostic_item(cx, ty, sym::BTreeSet)\n }\n \n fn is_iterable_array<'tcx>(ty: Ty<'tcx>, cx: &LateContext<'tcx>) -> bool {"}, {"sha": "82bf49f5b49a46c499158445258d5f1808835464", "filename": "clippy_lints/src/loops/for_kv_map.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ceb7a868d39ee19bbe75ec14beb62951f2413052/clippy_lints%2Fsrc%2Floops%2Ffor_kv_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb7a868d39ee19bbe75ec14beb62951f2413052/clippy_lints%2Fsrc%2Floops%2Ffor_kv_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Ffor_kv_map.rs?ref=ceb7a868d39ee19bbe75ec14beb62951f2413052", "patch": "@@ -1,9 +1,9 @@\n use super::FOR_KV_MAP;\n use clippy_utils::diagnostics::{multispan_sugg, span_lint_and_then};\n use clippy_utils::source::snippet;\n-use clippy_utils::ty::{is_type_diagnostic_item, match_type};\n+use clippy_utils::sugg;\n+use clippy_utils::ty::is_type_diagnostic_item;\n use clippy_utils::visitors::LocalUsedVisitor;\n-use clippy_utils::{paths, sugg};\n use rustc_hir::{BorrowKind, Expr, ExprKind, Mutability, Pat, PatKind};\n use rustc_lint::LateContext;\n use rustc_middle::ty;\n@@ -39,7 +39,7 @@ pub(super) fn check<'tcx>(\n                 _ => arg,\n             };\n \n-            if is_type_diagnostic_item(cx, ty, sym::hashmap_type) || match_type(cx, ty, &paths::BTREEMAP) {\n+            if is_type_diagnostic_item(cx, ty, sym::hashmap_type) || is_type_diagnostic_item(cx, ty, sym::BTreeMap) {\n                 span_lint_and_then(\n                     cx,\n                     FOR_KV_MAP,"}, {"sha": "d7f600b3ab2b0ae94638b286f744ccf4430185e8", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ceb7a868d39ee19bbe75ec14beb62951f2413052/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb7a868d39ee19bbe75ec14beb62951f2413052/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=ceb7a868d39ee19bbe75ec14beb62951f2413052", "patch": "@@ -1793,8 +1793,8 @@ mod redundant_pattern_match {\n             || is_type_diagnostic_item(cx, ty, sym::Rc)\n             || is_type_diagnostic_item(cx, ty, sym::Arc)\n             || is_type_diagnostic_item(cx, ty, sym::cstring_type)\n-            || match_type(cx, ty, &paths::BTREEMAP)\n-            || match_type(cx, ty, &paths::LINKED_LIST)\n+            || is_type_diagnostic_item(cx, ty, sym::BTreeMap)\n+            || is_type_diagnostic_item(cx, ty, sym::LinkedList)\n             || match_type(cx, ty, &paths::WEAK_RC)\n             || match_type(cx, ty, &paths::WEAK_ARC)\n         {"}, {"sha": "66fb85deae5e62244f2a3899b76c04aafb4afaa0", "filename": "clippy_lints/src/methods/get_unwrap.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ceb7a868d39ee19bbe75ec14beb62951f2413052/clippy_lints%2Fsrc%2Fmethods%2Fget_unwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb7a868d39ee19bbe75ec14beb62951f2413052/clippy_lints%2Fsrc%2Fmethods%2Fget_unwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fget_unwrap.rs?ref=ceb7a868d39ee19bbe75ec14beb62951f2413052", "patch": "@@ -1,8 +1,8 @@\n use super::utils::derefs_to_slice;\n use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::get_parent_expr;\n use clippy_utils::source::snippet_with_applicability;\n-use clippy_utils::ty::{is_type_diagnostic_item, match_type};\n-use clippy_utils::{get_parent_expr, paths};\n+use clippy_utils::ty::is_type_diagnostic_item;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n@@ -36,7 +36,7 @@ pub(super) fn check<'tcx>(\n     } else if !is_mut && is_type_diagnostic_item(cx, expr_ty, sym::hashmap_type) {\n         needs_ref = true;\n         \"HashMap\"\n-    } else if !is_mut && match_type(cx, expr_ty, &paths::BTREEMAP) {\n+    } else if !is_mut && is_type_diagnostic_item(cx, expr_ty, sym::BTreeMap) {\n         needs_ref = true;\n         \"BTreeMap\"\n     } else {"}, {"sha": "b69f57f50e0f901f9a0a14cba3af196b49bcfc64", "filename": "clippy_lints/src/methods/iter_count.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ceb7a868d39ee19bbe75ec14beb62951f2413052/clippy_lints%2Fsrc%2Fmethods%2Fiter_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb7a868d39ee19bbe75ec14beb62951f2413052/clippy_lints%2Fsrc%2Fmethods%2Fiter_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fiter_count.rs?ref=ceb7a868d39ee19bbe75ec14beb62951f2413052", "patch": "@@ -1,8 +1,7 @@\n use super::utils::derefs_to_slice;\n use clippy_utils::diagnostics::span_lint_and_sugg;\n-use clippy_utils::paths;\n use clippy_utils::source::snippet_with_applicability;\n-use clippy_utils::ty::{is_type_diagnostic_item, match_type};\n+use clippy_utils::ty::is_type_diagnostic_item;\n use rustc_errors::Applicability;\n use rustc_hir::Expr;\n use rustc_lint::LateContext;\n@@ -22,13 +21,13 @@ pub(crate) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'_>, recv: &'tcx E\n         \"HashSet\"\n     } else if is_type_diagnostic_item(cx, ty, sym::hashmap_type) {\n         \"HashMap\"\n-    } else if match_type(cx, ty, &paths::BTREEMAP) {\n+    } else if is_type_diagnostic_item(cx, ty, sym::BTreeMap) {\n         \"BTreeMap\"\n-    } else if match_type(cx, ty, &paths::BTREESET) {\n+    } else if is_type_diagnostic_item(cx, ty, sym::BTreeSet) {\n         \"BTreeSet\"\n-    } else if match_type(cx, ty, &paths::LINKED_LIST) {\n+    } else if is_type_diagnostic_item(cx, ty, sym::LinkedList) {\n         \"LinkedList\"\n-    } else if match_type(cx, ty, &paths::BINARY_HEAP) {\n+    } else if is_type_diagnostic_item(cx, ty, sym::BinaryHeap) {\n         \"BinaryHeap\"\n     } else {\n         return;"}, {"sha": "ef615b0aa40a8e61995b4e63692ab9fe86d4cc3e", "filename": "clippy_lints/src/methods/or_fun_call.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ceb7a868d39ee19bbe75ec14beb62951f2413052/clippy_lints%2Fsrc%2Fmethods%2For_fun_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb7a868d39ee19bbe75ec14beb62951f2413052/clippy_lints%2Fsrc%2Fmethods%2For_fun_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2For_fun_call.rs?ref=ceb7a868d39ee19bbe75ec14beb62951f2413052", "patch": "@@ -2,7 +2,7 @@ use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::eager_or_lazy::is_lazyness_candidate;\n use clippy_utils::source::{snippet, snippet_with_applicability, snippet_with_macro_callsite};\n use clippy_utils::ty::{implements_trait, is_type_diagnostic_item, match_type};\n-use clippy_utils::{contains_return, get_trait_def_id, last_path_segment, paths};\n+use clippy_utils::{contains_return, last_path_segment, paths};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n@@ -41,7 +41,7 @@ pub(super) fn check<'tcx>(\n             let path = last_path_segment(qpath).ident.name;\n             if matches!(path, kw::Default | sym::new);\n             let arg_ty = cx.typeck_results().expr_ty(arg);\n-            if let Some(default_trait_id) = get_trait_def_id(cx, &paths::DEFAULT_TRAIT);\n+            if let Some(default_trait_id) = cx.tcx.get_diagnostic_item(sym::Default);\n             if implements_trait(cx, arg_ty, default_trait_id, &[]);\n \n             then {"}, {"sha": "68f7cdf6ea0b3e4684e0e875bda97f1e2a0e516b", "filename": "clippy_lints/src/mut_key.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ceb7a868d39ee19bbe75ec14beb62951f2413052/clippy_lints%2Fsrc%2Fmut_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb7a868d39ee19bbe75ec14beb62951f2413052/clippy_lints%2Fsrc%2Fmut_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_key.rs?ref=ceb7a868d39ee19bbe75ec14beb62951f2413052", "patch": "@@ -1,11 +1,12 @@\n use clippy_utils::diagnostics::span_lint;\n-use clippy_utils::{match_def_path, paths, trait_ref_of_method};\n+use clippy_utils::trait_ref_of_method;\n use rustc_hir as hir;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::TypeFoldable;\n use rustc_middle::ty::{Adt, Array, RawPtr, Ref, Slice, Tuple, Ty, TypeAndMut};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n+use rustc_span::symbol::sym;\n use std::iter;\n \n declare_clippy_lint! {\n@@ -99,9 +100,9 @@ fn check_sig<'tcx>(cx: &LateContext<'tcx>, item_hir_id: hir::HirId, decl: &hir::\n fn check_ty<'tcx>(cx: &LateContext<'tcx>, span: Span, ty: Ty<'tcx>) {\n     let ty = ty.peel_refs();\n     if let Adt(def, substs) = ty.kind() {\n-        if [&paths::HASHMAP, &paths::BTREEMAP, &paths::HASHSET, &paths::BTREESET]\n+        if [sym::hashmap_type, sym::BTreeMap, sym::hashset_type, sym::BTreeMap]\n             .iter()\n-            .any(|path| match_def_path(cx, def.did, &**path))\n+            .any(|diag_item| cx.tcx.is_diagnostic_item(*diag_item, def.did))\n             && is_mutable_type(cx, substs.type_at(0), span)\n         {\n             span_lint(cx, MUTABLE_KEY_TYPE, span, \"mutable key type\");"}, {"sha": "283b1847b6c995a098abad534214b5410db93c45", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ceb7a868d39ee19bbe75ec14beb62951f2413052/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb7a868d39ee19bbe75ec14beb62951f2413052/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=ceb7a868d39ee19bbe75ec14beb62951f2413052", "patch": "@@ -103,7 +103,6 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessPassByValue {\n         }\n \n         // Allow `Borrow` or functions to be taken by value\n-        let borrow_trait = need!(get_trait_def_id(cx, &paths::BORROW_TRAIT));\n         let allowed_traits = [\n             need!(cx.tcx.lang_items().fn_trait()),\n             need!(cx.tcx.lang_items().fn_once_trait()),\n@@ -167,7 +166,7 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessPassByValue {\n                 let preds = preds.iter().filter(|t| t.self_ty() == ty).collect::<Vec<_>>();\n \n                 (\n-                    preds.iter().any(|t| t.def_id() == borrow_trait),\n+                    preds.iter().any(|t| cx.tcx.is_diagnostic_item(sym::Borrow, t.def_id())),\n                     !preds.is_empty() && {\n                         let ty_empty_region = cx.tcx.mk_imm_ref(cx.tcx.lifetimes.re_root_empty, ty);\n                         preds.iter().all(|t| {"}, {"sha": "bc409dd6efb4dc79982c0e4ed4e8dd7782dce078", "filename": "clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ceb7a868d39ee19bbe75ec14beb62951f2413052/clippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb7a868d39ee19bbe75ec14beb62951f2413052/clippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnew_without_default.rs?ref=ceb7a868d39ee19bbe75ec14beb62951f2413052", "patch": "@@ -1,8 +1,7 @@\n use clippy_utils::diagnostics::span_lint_hir_and_then;\n-use clippy_utils::paths;\n+use clippy_utils::return_ty;\n use clippy_utils::source::snippet;\n use clippy_utils::sugg::DiagnosticBuilderExt;\n-use clippy_utils::{get_trait_def_id, return_ty};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n@@ -105,7 +104,7 @@ impl<'tcx> LateLintPass<'tcx> for NewWithoutDefault {\n                             let self_def_id = cx.tcx.hir().local_def_id(cx.tcx.hir().get_parent_item(id));\n                             let self_ty = cx.tcx.type_of(self_def_id);\n                             if TyS::same_type(self_ty, return_ty(cx, id));\n-                            if let Some(default_trait_id) = get_trait_def_id(cx, &paths::DEFAULT_TRAIT);\n+                            if let Some(default_trait_id) = cx.tcx.get_diagnostic_item(sym::Default);\n                             then {\n                                 if self.impling_types.is_none() {\n                                     let mut impls = HirIdSet::default();"}, {"sha": "b15447622a8af922a00ef838130f26a701806b38", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ceb7a868d39ee19bbe75ec14beb62951f2413052/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb7a868d39ee19bbe75ec14beb62951f2413052/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=ceb7a868d39ee19bbe75ec14beb62951f2413052", "patch": "@@ -4,7 +4,7 @@ use clippy_utils::diagnostics::{span_lint, span_lint_and_sugg, span_lint_and_the\n use clippy_utils::ptr::get_spans;\n use clippy_utils::source::snippet_opt;\n use clippy_utils::ty::{is_type_diagnostic_item, match_type, walk_ptrs_hir_ty};\n-use clippy_utils::{expr_path_res, is_lint_allowed, match_any_def_paths, paths};\n+use clippy_utils::{expr_path_res, is_lint_allowed, match_any_diagnostic_items, paths};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{\n@@ -419,7 +419,7 @@ fn get_rptr_lm<'tcx>(ty: &'tcx Ty<'tcx>) -> Option<(&'tcx Lifetime, Mutability,\n fn is_null_path(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n     if let ExprKind::Call(pathexp, []) = expr.kind {\n         expr_path_res(cx, pathexp).opt_def_id().map_or(false, |id| {\n-            match_any_def_paths(cx, id, &[&paths::PTR_NULL, &paths::PTR_NULL_MUT]).is_some()\n+            match_any_diagnostic_items(cx, id, &[sym::ptr_null, sym::ptr_null_mut]).is_some()\n         })\n     } else {\n         false"}, {"sha": "b1965cfd601b17e5317f83cd6a6511cfaabfbca8", "filename": "clippy_lints/src/size_of_in_element_count.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ceb7a868d39ee19bbe75ec14beb62951f2413052/clippy_lints%2Fsrc%2Fsize_of_in_element_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb7a868d39ee19bbe75ec14beb62951f2413052/clippy_lints%2Fsrc%2Fsize_of_in_element_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsize_of_in_element_count.rs?ref=ceb7a868d39ee19bbe75ec14beb62951f2413052", "patch": "@@ -67,7 +67,7 @@ fn get_pointee_ty_and_count_expr(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) -\n     const FUNCTIONS: [&[&str]; 8] = [\n         &paths::PTR_COPY_NONOVERLAPPING,\n         &paths::PTR_COPY,\n-        &paths::WRITE_BYTES,\n+        &paths::PTR_WRITE_BYTES,\n         &paths::PTR_SWAP_NONOVERLAPPING,\n         &paths::PTR_SLICE_FROM_RAW_PARTS,\n         &paths::PTR_SLICE_FROM_RAW_PARTS_MUT,"}, {"sha": "89fd5faa165f4810e8db52d23ec8c94b1ffdd1c7", "filename": "clippy_lints/src/transmute/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ceb7a868d39ee19bbe75ec14beb62951f2413052/clippy_lints%2Fsrc%2Ftransmute%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb7a868d39ee19bbe75ec14beb62951f2413052/clippy_lints%2Fsrc%2Ftransmute%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Fmod.rs?ref=ceb7a868d39ee19bbe75ec14beb62951f2413052", "patch": "@@ -12,11 +12,12 @@ mod useless_transmute;\n mod utils;\n mod wrong_transmute;\n \n-use clippy_utils::{in_constant, match_def_path, paths};\n+use clippy_utils::in_constant;\n use if_chain::if_chain;\n use rustc_hir::{Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::symbol::sym;\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for transmutes that can't ever be correct on any\n@@ -328,7 +329,7 @@ impl<'tcx> LateLintPass<'tcx> for Transmute {\n             if let ExprKind::Call(path_expr, args) = e.kind;\n             if let ExprKind::Path(ref qpath) = path_expr.kind;\n             if let Some(def_id) = cx.qpath_res(qpath, path_expr.hir_id).opt_def_id();\n-            if match_def_path(cx, def_id, &paths::TRANSMUTE);\n+            if cx.tcx.is_diagnostic_item(sym::transmute, def_id);\n             then {\n                 // Avoid suggesting from/to bits and dereferencing raw pointers in const contexts.\n                 // See https://github.com/rust-lang/rust/issues/73736 for progress on making them `const fn`."}, {"sha": "868c41aab43b5229c51eba9d11a2555d4f3583ba", "filename": "clippy_lints/src/transmute/unsound_collection_transmute.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ceb7a868d39ee19bbe75ec14beb62951f2413052/clippy_lints%2Fsrc%2Ftransmute%2Funsound_collection_transmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb7a868d39ee19bbe75ec14beb62951f2413052/clippy_lints%2Fsrc%2Ftransmute%2Funsound_collection_transmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Funsound_collection_transmute.rs?ref=ceb7a868d39ee19bbe75ec14beb62951f2413052", "patch": "@@ -1,28 +1,29 @@\n use super::utils::is_layout_incompatible;\n use super::UNSOUND_COLLECTION_TRANSMUTE;\n use clippy_utils::diagnostics::span_lint;\n-use clippy_utils::{match_def_path, paths};\n+use clippy_utils::match_any_diagnostic_items;\n use rustc_hir::Expr;\n use rustc_lint::LateContext;\n use rustc_middle::ty::{self, Ty};\n+use rustc_span::symbol::{sym, Symbol};\n \n // used to check for UNSOUND_COLLECTION_TRANSMUTE\n-static COLLECTIONS: &[&[&str]] = &[\n-    &paths::VEC,\n-    &paths::VEC_DEQUE,\n-    &paths::BINARY_HEAP,\n-    &paths::BTREESET,\n-    &paths::BTREEMAP,\n-    &paths::HASHSET,\n-    &paths::HASHMAP,\n+static COLLECTIONS: &[Symbol] = &[\n+    sym::vec_type,\n+    sym::vecdeque_type,\n+    sym::BinaryHeap,\n+    sym::BTreeSet,\n+    sym::BTreeMap,\n+    sym::hashset_type,\n+    sym::hashmap_type,\n ];\n \n /// Checks for `unsound_collection_transmute` lint.\n /// Returns `true` if it's triggered, otherwise returns `false`.\n pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>, from_ty: Ty<'tcx>, to_ty: Ty<'tcx>) -> bool {\n     match (&from_ty.kind(), &to_ty.kind()) {\n         (ty::Adt(from_adt, from_substs), ty::Adt(to_adt, to_substs)) => {\n-            if from_adt.did != to_adt.did || !COLLECTIONS.iter().any(|path| match_def_path(cx, to_adt.did, path)) {\n+            if from_adt.did != to_adt.did || match_any_diagnostic_items(cx, to_adt.did, COLLECTIONS).is_none() {\n                 return false;\n             }\n             if from_substs"}, {"sha": "0c39d4d8cf466946236724348f1448d091692268", "filename": "clippy_lints/src/transmuting_null.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ceb7a868d39ee19bbe75ec14beb62951f2413052/clippy_lints%2Fsrc%2Ftransmuting_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb7a868d39ee19bbe75ec14beb62951f2413052/clippy_lints%2Fsrc%2Ftransmuting_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmuting_null.rs?ref=ceb7a868d39ee19bbe75ec14beb62951f2413052", "patch": "@@ -1,12 +1,13 @@\n use clippy_utils::consts::{constant_context, Constant};\n use clippy_utils::diagnostics::span_lint;\n-use clippy_utils::{is_expr_path_def_path, paths};\n+use clippy_utils::is_expr_diagnostic_item;\n use if_chain::if_chain;\n use rustc_ast::LitKind;\n use rustc_hir::{Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::symbol::sym;\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for transmute calls which would receive a null pointer.\n@@ -38,7 +39,7 @@ impl<'tcx> LateLintPass<'tcx> for TransmutingNull {\n \n         if_chain! {\n             if let ExprKind::Call(func, [arg]) = expr.kind;\n-            if is_expr_path_def_path(cx, func, &paths::TRANSMUTE);\n+            if is_expr_diagnostic_item(cx, func, sym::transmute);\n \n             then {\n                 // Catching transmute over constants that resolve to `null`.\n@@ -67,7 +68,7 @@ impl<'tcx> LateLintPass<'tcx> for TransmutingNull {\n                 // `std::mem::transmute(std::ptr::null::<i32>())`\n                 if_chain! {\n                     if let ExprKind::Call(func1, []) = arg.kind;\n-                    if is_expr_path_def_path(cx, func1, &paths::PTR_NULL);\n+                    if is_expr_diagnostic_item(cx, func1, sym::ptr_null);\n                     then {\n                         span_lint(cx, TRANSMUTING_NULL, expr.span, LINT_MSG)\n                     }"}, {"sha": "5fb708741e58aa4c8b14c677ac3a0b1a264f93d7", "filename": "clippy_lints/src/types/linked_list.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ceb7a868d39ee19bbe75ec14beb62951f2413052/clippy_lints%2Fsrc%2Ftypes%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb7a868d39ee19bbe75ec14beb62951f2413052/clippy_lints%2Fsrc%2Ftypes%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Flinked_list.rs?ref=ceb7a868d39ee19bbe75ec14beb62951f2413052", "patch": "@@ -1,12 +1,12 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n-use clippy_utils::{match_def_path, paths};\n use rustc_hir::{self as hir, def_id::DefId};\n use rustc_lint::LateContext;\n+use rustc_span::symbol::sym;\n \n use super::LINKEDLIST;\n \n pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, def_id: DefId) -> bool {\n-    if match_def_path(cx, def_id, &paths::LINKED_LIST) {\n+    if cx.tcx.is_diagnostic_item(sym::LinkedList, def_id) {\n         span_lint_and_help(\n             cx,\n             LINKEDLIST,"}, {"sha": "25a959d3e416c24d89cba853f514d1ca96e448ff", "filename": "clippy_lints/src/useless_conversion.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ceb7a868d39ee19bbe75ec14beb62951f2413052/clippy_lints%2Fsrc%2Fuseless_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb7a868d39ee19bbe75ec14beb62951f2413052/clippy_lints%2Fsrc%2Fuseless_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuseless_conversion.rs?ref=ceb7a868d39ee19bbe75ec14beb62951f2413052", "patch": "@@ -2,7 +2,7 @@ use clippy_utils::diagnostics::{span_lint_and_help, span_lint_and_sugg};\n use clippy_utils::source::{snippet, snippet_with_macro_callsite};\n use clippy_utils::sugg::Sugg;\n use clippy_utils::ty::{is_type_diagnostic_item, same_type_and_consts};\n-use clippy_utils::{get_parent_expr, match_def_path, match_trait_method, paths};\n+use clippy_utils::{get_parent_expr, is_trait_method, match_def_path, paths};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, ExprKind, HirId, MatchSource};\n@@ -64,7 +64,7 @@ impl<'tcx> LateLintPass<'tcx> for UselessConversion {\n             },\n \n             ExprKind::MethodCall(name, .., args, _) => {\n-                if match_trait_method(cx, e, &paths::INTO) && &*name.ident.as_str() == \"into\" {\n+                if is_trait_method(cx, e, sym::into_trait) && &*name.ident.as_str() == \"into\" {\n                     let a = cx.typeck_results().expr_ty(e);\n                     let b = cx.typeck_results().expr_ty(&args[0]);\n                     if same_type_and_consts(a, b) {\n@@ -80,7 +80,7 @@ impl<'tcx> LateLintPass<'tcx> for UselessConversion {\n                         );\n                     }\n                 }\n-                if match_trait_method(cx, e, &paths::INTO_ITERATOR) && name.ident.name == sym::into_iter {\n+                if is_trait_method(cx, e, sym::IntoIterator) && name.ident.name == sym::into_iter {\n                     if let Some(parent_expr) = get_parent_expr(cx, e) {\n                         if let ExprKind::MethodCall(parent_name, ..) = parent_expr.kind {\n                             if parent_name.ident.name != sym::into_iter {\n@@ -104,7 +104,7 @@ impl<'tcx> LateLintPass<'tcx> for UselessConversion {\n                     }\n                 }\n                 if_chain! {\n-                    if match_trait_method(cx, e, &paths::TRY_INTO_TRAIT) && name.ident.name == sym::try_into;\n+                    if is_trait_method(cx, e, sym::try_into_trait) && name.ident.name == sym::try_into;\n                     let a = cx.typeck_results().expr_ty(e);\n                     let b = cx.typeck_results().expr_ty(&args[0]);\n                     if is_type_diagnostic_item(cx, a, sym::result_type);"}, {"sha": "d6a8112218f13d81f32ed7d37ff5deeca0414e4b", "filename": "clippy_lints/src/zero_sized_map_values.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ceb7a868d39ee19bbe75ec14beb62951f2413052/clippy_lints%2Fsrc%2Fzero_sized_map_values.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb7a868d39ee19bbe75ec14beb62951f2413052/clippy_lints%2Fsrc%2Fzero_sized_map_values.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fzero_sized_map_values.rs?ref=ceb7a868d39ee19bbe75ec14beb62951f2413052", "patch": "@@ -1,6 +1,5 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n-use clippy_utils::paths;\n-use clippy_utils::ty::{is_normalizable, is_type_diagnostic_item, match_type};\n+use clippy_utils::ty::{is_normalizable, is_type_diagnostic_item};\n use if_chain::if_chain;\n use rustc_hir::{self as hir, HirId, ItemKind, Node};\n use rustc_lint::{LateContext, LateLintPass};\n@@ -49,7 +48,7 @@ impl LateLintPass<'_> for ZeroSizedMapValues {\n             if !hir_ty.span.from_expansion();\n             if !in_trait_impl(cx, hir_ty.hir_id);\n             let ty = ty_from_hir_ty(cx, hir_ty);\n-            if is_type_diagnostic_item(cx, ty, sym::hashmap_type) || match_type(cx, ty, &paths::BTREEMAP);\n+            if is_type_diagnostic_item(cx, ty, sym::hashmap_type) || is_type_diagnostic_item(cx, ty, sym::BTreeMap);\n             if let Adt(_, substs) = ty.kind();\n             let ty = substs.type_at(1);\n             // Fixes https://github.com/rust-lang/rust-clippy/issues/7447 because of"}, {"sha": "6dfb8c38a76689b50dc7af72bae1b8487b68a094", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ceb7a868d39ee19bbe75ec14beb62951f2413052/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb7a868d39ee19bbe75ec14beb62951f2413052/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=ceb7a868d39ee19bbe75ec14beb62951f2413052", "patch": "@@ -411,12 +411,22 @@ pub fn is_qpath_def_path(cx: &LateContext<'_>, path: &QPath<'_>, hir_id: HirId,\n }\n \n /// If the expression is a path, resolves it to a `DefId` and checks if it matches the given path.\n+///\n+/// Please use `is_expr_diagnostic_item` if the target is a diagnostic item.\n pub fn is_expr_path_def_path(cx: &LateContext<'_>, expr: &Expr<'_>, segments: &[&str]) -> bool {\n     expr_path_res(cx, expr)\n         .opt_def_id()\n         .map_or(false, |id| match_def_path(cx, id, segments))\n }\n \n+/// If the expression is a path, resolves it to a `DefId` and checks if it matches the given\n+/// diagnostic item.\n+pub fn is_expr_diagnostic_item(cx: &LateContext<'_>, expr: &Expr<'_>, diag_item: Symbol) -> bool {\n+    expr_path_res(cx, expr)\n+        .opt_def_id()\n+        .map_or(false, |id| cx.tcx.is_diagnostic_item(diag_item, id))\n+}\n+\n /// THIS METHOD IS DEPRECATED and will eventually be removed since it does not match against the\n /// entire path or resolved `DefId`. Prefer using `match_def_path`. Consider getting a `DefId` from\n /// `QPath::Resolved.1.res.opt_def_id()`.\n@@ -1231,13 +1241,23 @@ pub fn match_function_call<'tcx>(\n \n /// Checks if the given `DefId` matches any of the paths. Returns the index of matching path, if\n /// any.\n+///\n+/// Please use `match_any_diagnostic_items` if the targets are all diagnostic items.\n pub fn match_any_def_paths(cx: &LateContext<'_>, did: DefId, paths: &[&[&str]]) -> Option<usize> {\n     let search_path = cx.get_def_path(did);\n     paths\n         .iter()\n         .position(|p| p.iter().map(|x| Symbol::intern(x)).eq(search_path.iter().copied()))\n }\n \n+/// Checks if the given `DefId` matches any of provided diagnostic items. Returns the index of\n+/// matching path, if any.\n+pub fn match_any_diagnostic_items(cx: &LateContext<'_>, def_id: DefId, diag_items: &[Symbol]) -> Option<usize> {\n+    diag_items\n+        .iter()\n+        .position(|item| cx.tcx.is_diagnostic_item(*item, def_id))\n+}\n+\n /// Checks if the given `DefId` matches the path.\n pub fn match_def_path<'tcx>(cx: &LateContext<'tcx>, did: DefId, syms: &[&str]) -> bool {\n     // We should probably move to Symbols in Clippy as well rather than interning every time."}, {"sha": "b0c3fe1e5a7121d56cafc32e45a0f872536d633b", "filename": "clippy_utils/src/paths.rs", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ceb7a868d39ee19bbe75ec14beb62951f2413052/clippy_utils%2Fsrc%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb7a868d39ee19bbe75ec14beb62951f2413052/clippy_utils%2Fsrc%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fpaths.rs?ref=ceb7a868d39ee19bbe75ec14beb62951f2413052", "patch": "@@ -21,21 +21,19 @@ pub const ASMUT_TRAIT: [&str; 3] = [\"core\", \"convert\", \"AsMut\"];\n pub const ASREF_TRAIT: [&str; 3] = [\"core\", \"convert\", \"AsRef\"];\n pub(super) const BEGIN_PANIC: [&str; 3] = [\"std\", \"panicking\", \"begin_panic\"];\n pub(super) const BEGIN_PANIC_FMT: [&str; 3] = [\"std\", \"panicking\", \"begin_panic_fmt\"];\n-pub const BINARY_HEAP: [&str; 4] = [\"alloc\", \"collections\", \"binary_heap\", \"BinaryHeap\"];\n+/// Preferably use the diagnostic item `sym::Borrow` where possible\n pub const BORROW_TRAIT: [&str; 3] = [\"core\", \"borrow\", \"Borrow\"];\n-pub const BTREEMAP: [&str; 5] = [\"alloc\", \"collections\", \"btree\", \"map\", \"BTreeMap\"];\n pub const BTREEMAP_CONTAINS_KEY: [&str; 6] = [\"alloc\", \"collections\", \"btree\", \"map\", \"BTreeMap\", \"contains_key\"];\n pub const BTREEMAP_ENTRY: [&str; 6] = [\"alloc\", \"collections\", \"btree\", \"map\", \"entry\", \"Entry\"];\n pub const BTREEMAP_INSERT: [&str; 6] = [\"alloc\", \"collections\", \"btree\", \"map\", \"BTreeMap\", \"insert\"];\n-pub const BTREESET: [&str; 5] = [\"alloc\", \"collections\", \"btree\", \"set\", \"BTreeSet\"];\n pub const CLONE_TRAIT_METHOD: [&str; 4] = [\"core\", \"clone\", \"Clone\", \"clone\"];\n pub const CMP_MAX: [&str; 3] = [\"core\", \"cmp\", \"max\"];\n pub const CMP_MIN: [&str; 3] = [\"core\", \"cmp\", \"min\"];\n pub const COW: [&str; 3] = [\"alloc\", \"borrow\", \"Cow\"];\n pub const CSTRING_AS_C_STR: [&str; 5] = [\"std\", \"ffi\", \"c_str\", \"CString\", \"as_c_str\"];\n-pub const DEFAULT_TRAIT: [&str; 3] = [\"core\", \"default\", \"Default\"];\n pub const DEFAULT_TRAIT_METHOD: [&str; 4] = [\"core\", \"default\", \"Default\", \"default\"];\n pub const DEREF_MUT_TRAIT_METHOD: [&str; 5] = [\"core\", \"ops\", \"deref\", \"DerefMut\", \"deref_mut\"];\n+/// Preferably use the diagnostic item `sym::deref_method` where possible\n pub const DEREF_TRAIT_METHOD: [&str; 5] = [\"core\", \"ops\", \"deref\", \"Deref\", \"deref\"];\n pub const DIR_BUILDER: [&str; 3] = [\"std\", \"fs\", \"DirBuilder\"];\n pub const DISPLAY_TRAIT: [&str; 3] = [\"core\", \"fmt\", \"Display\"];\n@@ -55,20 +53,16 @@ pub const FROM_ITERATOR_METHOD: [&str; 6] = [\"core\", \"iter\", \"traits\", \"collect\"\n pub const FROM_STR_METHOD: [&str; 5] = [\"core\", \"str\", \"traits\", \"FromStr\", \"from_str\"];\n pub const FUTURE_FROM_GENERATOR: [&str; 3] = [\"core\", \"future\", \"from_generator\"];\n pub const HASH: [&str; 3] = [\"core\", \"hash\", \"Hash\"];\n-pub const HASHMAP: [&str; 5] = [\"std\", \"collections\", \"hash\", \"map\", \"HashMap\"];\n pub const HASHMAP_CONTAINS_KEY: [&str; 6] = [\"std\", \"collections\", \"hash\", \"map\", \"HashMap\", \"contains_key\"];\n pub const HASHMAP_ENTRY: [&str; 5] = [\"std\", \"collections\", \"hash\", \"map\", \"Entry\"];\n pub const HASHMAP_INSERT: [&str; 6] = [\"std\", \"collections\", \"hash\", \"map\", \"HashMap\", \"insert\"];\n-pub const HASHSET: [&str; 5] = [\"std\", \"collections\", \"hash\", \"set\", \"HashSet\"];\n #[cfg(feature = \"internal-lints\")]\n pub const IDENT: [&str; 3] = [\"rustc_span\", \"symbol\", \"Ident\"];\n #[cfg(feature = \"internal-lints\")]\n pub const IDENT_AS_STR: [&str; 4] = [\"rustc_span\", \"symbol\", \"Ident\", \"as_str\"];\n pub const INDEX: [&str; 3] = [\"core\", \"ops\", \"Index\"];\n pub const INDEX_MUT: [&str; 3] = [\"core\", \"ops\", \"IndexMut\"];\n pub const INSERT_STR: [&str; 4] = [\"alloc\", \"string\", \"String\", \"insert_str\"];\n-pub const INTO: [&str; 3] = [\"core\", \"convert\", \"Into\"];\n-pub const INTO_ITERATOR: [&str; 5] = [\"core\", \"iter\", \"traits\", \"collect\", \"IntoIterator\"];\n pub const IO_READ: [&str; 3] = [\"std\", \"io\", \"Read\"];\n pub const IO_WRITE: [&str; 3] = [\"std\", \"io\", \"Write\"];\n pub const IPADDR_V4: [&str; 5] = [\"std\", \"net\", \"ip\", \"IpAddr\", \"V4\"];\n@@ -79,7 +73,6 @@ pub const KW_MODULE: [&str; 3] = [\"rustc_span\", \"symbol\", \"kw\"];\n #[cfg(feature = \"internal-lints\")]\n pub const LATE_CONTEXT: [&str; 2] = [\"rustc_lint\", \"LateContext\"];\n pub const LIBC_STRLEN: [&str; 2] = [\"libc\", \"strlen\"];\n-pub const LINKED_LIST: [&str; 4] = [\"alloc\", \"collections\", \"linked_list\", \"LinkedList\"];\n #[cfg(any(feature = \"internal-lints\", feature = \"metadata-collector-lint\"))]\n pub const LINT: [&str; 2] = [\"rustc_lint_defs\", \"Lint\"];\n pub const MEM_DISCRIMINANT: [&str; 3] = [\"core\", \"mem\", \"discriminant\"];\n@@ -93,6 +86,7 @@ pub const MEM_SIZE_OF_VAL: [&str; 3] = [\"core\", \"mem\", \"size_of_val\"];\n pub const MUTEX_GUARD: [&str; 4] = [\"std\", \"sync\", \"mutex\", \"MutexGuard\"];\n pub const OPEN_OPTIONS: [&str; 3] = [\"std\", \"fs\", \"OpenOptions\"];\n pub const OPS_MODULE: [&str; 2] = [\"core\", \"ops\"];\n+/// Preferably use the diagnostic item `sym::option_type` where possible\n pub const OPTION: [&str; 3] = [\"core\", \"option\", \"Option\"];\n pub const OPTION_NONE: [&str; 4] = [\"core\", \"option\", \"Option\", \"None\"];\n pub const OPTION_SOME: [&str; 4] = [\"core\", \"option\", \"Option\", \"Some\"];\n@@ -116,8 +110,6 @@ pub const POLL_READY: [&str; 5] = [\"core\", \"task\", \"poll\", \"Poll\", \"Ready\"];\n pub const PTR_COPY: [&str; 3] = [\"core\", \"intrinsics\", \"copy\"];\n pub const PTR_COPY_NONOVERLAPPING: [&str; 3] = [\"core\", \"intrinsics\", \"copy_nonoverlapping\"];\n pub const PTR_EQ: [&str; 3] = [\"core\", \"ptr\", \"eq\"];\n-pub const PTR_NULL: [&str; 3] = [\"core\", \"ptr\", \"null\"];\n-pub const PTR_NULL_MUT: [&str; 3] = [\"core\", \"ptr\", \"null_mut\"];\n pub const PTR_SLICE_FROM_RAW_PARTS: [&str; 3] = [\"core\", \"ptr\", \"slice_from_raw_parts\"];\n pub const PTR_SLICE_FROM_RAW_PARTS_MUT: [&str; 3] = [\"core\", \"ptr\", \"slice_from_raw_parts_mut\"];\n pub const PTR_SWAP_NONOVERLAPPING: [&str; 3] = [\"core\", \"ptr\", \"swap_nonoverlapping\"];\n@@ -141,6 +133,7 @@ pub const REGEX_BYTES_NEW: [&str; 4] = [\"regex\", \"re_bytes\", \"Regex\", \"new\"];\n pub const REGEX_BYTES_SET_NEW: [&str; 5] = [\"regex\", \"re_set\", \"bytes\", \"RegexSet\", \"new\"];\n pub const REGEX_NEW: [&str; 4] = [\"regex\", \"re_unicode\", \"Regex\", \"new\"];\n pub const REGEX_SET_NEW: [&str; 5] = [\"regex\", \"re_set\", \"unicode\", \"RegexSet\", \"new\"];\n+/// Preferably use the diagnostic item `sym::result_type` where possible\n pub const RESULT: [&str; 3] = [\"core\", \"result\", \"Result\"];\n pub const RESULT_ERR: [&str; 4] = [\"core\", \"result\", \"Result\", \"Err\"];\n pub const RESULT_OK: [&str; 4] = [\"core\", \"result\", \"Result\", \"Ok\"];\n@@ -176,16 +169,11 @@ pub const SYM_MODULE: [&str; 3] = [\"rustc_span\", \"symbol\", \"sym\"];\n pub const SYNTAX_CONTEXT: [&str; 3] = [\"rustc_span\", \"hygiene\", \"SyntaxContext\"];\n pub const TO_OWNED_METHOD: [&str; 4] = [\"alloc\", \"borrow\", \"ToOwned\", \"to_owned\"];\n pub const TO_STRING_METHOD: [&str; 4] = [\"alloc\", \"string\", \"ToString\", \"to_string\"];\n-pub const TRANSMUTE: [&str; 4] = [\"core\", \"intrinsics\", \"\", \"transmute\"];\n pub const TRY_FROM: [&str; 4] = [\"core\", \"convert\", \"TryFrom\", \"try_from\"];\n-pub const TRY_INTO_TRAIT: [&str; 3] = [\"core\", \"convert\", \"TryInto\"];\n-pub const VEC: [&str; 3] = [\"alloc\", \"vec\", \"Vec\"];\n pub const VEC_AS_MUT_SLICE: [&str; 4] = [\"alloc\", \"vec\", \"Vec\", \"as_mut_slice\"];\n pub const VEC_AS_SLICE: [&str; 4] = [\"alloc\", \"vec\", \"Vec\", \"as_slice\"];\n-pub const VEC_DEQUE: [&str; 4] = [\"alloc\", \"collections\", \"vec_deque\", \"VecDeque\"];\n pub const VEC_FROM_ELEM: [&str; 3] = [\"alloc\", \"vec\", \"from_elem\"];\n pub const VEC_NEW: [&str; 4] = [\"alloc\", \"vec\", \"Vec\", \"new\"];\n pub const VEC_RESIZE: [&str; 4] = [\"alloc\", \"vec\", \"Vec\", \"resize\"];\n pub const WEAK_ARC: [&str; 3] = [\"alloc\", \"sync\", \"Weak\"];\n pub const WEAK_RC: [&str; 3] = [\"alloc\", \"rc\", \"Weak\"];\n-pub const WRITE_BYTES: [&str; 3] = [\"core\", \"intrinsics\", \"write_bytes\"];"}, {"sha": "be7b7a9af19207b78f30ba8d48f06f6f8a98ef2b", "filename": "tests/ui-internal/match_type_on_diag_item.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ceb7a868d39ee19bbe75ec14beb62951f2413052/tests%2Fui-internal%2Fmatch_type_on_diag_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb7a868d39ee19bbe75ec14beb62951f2413052/tests%2Fui-internal%2Fmatch_type_on_diag_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-internal%2Fmatch_type_on_diag_item.rs?ref=ceb7a868d39ee19bbe75ec14beb62951f2413052", "patch": "@@ -27,7 +27,6 @@ impl<'tcx> LateLintPass<'tcx> for Pass {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr) {\n         let ty = cx.typeck_results().expr_ty(expr);\n \n-        let _ = match_type(cx, ty, &paths::VEC); // FIXME: Doesn't lint external paths\n         let _ = match_type(cx, ty, &OPTION);\n         let _ = match_type(cx, ty, &[\"core\", \"result\", \"Result\"]);\n "}, {"sha": "f5d92fc615c2069902cb4b532ab4280e23b9d777", "filename": "tests/ui-internal/match_type_on_diag_item.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ceb7a868d39ee19bbe75ec14beb62951f2413052/tests%2Fui-internal%2Fmatch_type_on_diag_item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ceb7a868d39ee19bbe75ec14beb62951f2413052/tests%2Fui-internal%2Fmatch_type_on_diag_item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-internal%2Fmatch_type_on_diag_item.stderr?ref=ceb7a868d39ee19bbe75ec14beb62951f2413052", "patch": "@@ -1,5 +1,5 @@\n error: usage of `clippy_utils::ty::match_type()` on a type diagnostic item\n-  --> $DIR/match_type_on_diag_item.rs:31:17\n+  --> $DIR/match_type_on_diag_item.rs:30:17\n    |\n LL |         let _ = match_type(cx, ty, &OPTION);\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `clippy_utils::ty::is_type_diagnostic_item(cx, ty, sym::option_type)`\n@@ -12,13 +12,13 @@ LL | #![deny(clippy::internal)]\n    = note: `#[deny(clippy::match_type_on_diagnostic_item)]` implied by `#[deny(clippy::internal)]`\n \n error: usage of `clippy_utils::ty::match_type()` on a type diagnostic item\n-  --> $DIR/match_type_on_diag_item.rs:32:17\n+  --> $DIR/match_type_on_diag_item.rs:31:17\n    |\n LL |         let _ = match_type(cx, ty, &[\"core\", \"result\", \"Result\"]);\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `clippy_utils::ty::is_type_diagnostic_item(cx, ty, sym::result_type)`\n \n error: usage of `clippy_utils::ty::match_type()` on a type diagnostic item\n-  --> $DIR/match_type_on_diag_item.rs:35:17\n+  --> $DIR/match_type_on_diag_item.rs:34:17\n    |\n LL |         let _ = clippy_utils::ty::match_type(cx, ty, rc_path);\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `clippy_utils::ty::is_type_diagnostic_item(cx, ty, sym::Rc)`"}]}