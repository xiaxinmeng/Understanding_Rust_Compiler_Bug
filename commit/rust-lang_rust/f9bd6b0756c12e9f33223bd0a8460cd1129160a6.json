{"sha": "f9bd6b0756c12e9f33223bd0a8460cd1129160a6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5YmQ2YjA3NTZjMTJlOWYzMzIyM2JkMGE4NDYwY2QxMTI5MTYwYTY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-04-05T10:46:36Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-04-05T10:46:36Z"}, "message": "nits; test running no doctests", "tree": {"sha": "bfbac1c1367a0b8892a6932d1ce833bfde77827b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bfbac1c1367a0b8892a6932d1ce833bfde77827b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9bd6b0756c12e9f33223bd0a8460cd1129160a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9bd6b0756c12e9f33223bd0a8460cd1129160a6", "html_url": "https://github.com/rust-lang/rust/commit/f9bd6b0756c12e9f33223bd0a8460cd1129160a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9bd6b0756c12e9f33223bd0a8460cd1129160a6/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e66a89c8afe8da0c784943502343c8620c156366", "url": "https://api.github.com/repos/rust-lang/rust/commits/e66a89c8afe8da0c784943502343c8620c156366", "html_url": "https://github.com/rust-lang/rust/commit/e66a89c8afe8da0c784943502343c8620c156366"}], "stats": {"total": 15, "additions": 8, "deletions": 7}, "files": [{"sha": "b9c46ff41cb5c6796fc9a89ad56333c5cd56afcf", "filename": "cargo-miri/bin.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f9bd6b0756c12e9f33223bd0a8460cd1129160a6/cargo-miri%2Fbin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9bd6b0756c12e9f33223bd0a8460cd1129160a6/cargo-miri%2Fbin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/cargo-miri%2Fbin.rs?ref=f9bd6b0756c12e9f33223bd0a8460cd1129160a6", "patch": "@@ -683,6 +683,7 @@ fn phase_cargo_rustc(mut args: env::Args) {\n             let mut cmd = miri();\n \n             // Ensure --emit argument for a check-only build is present.\n+            // We cannot use the usual helpers since we need to check specifically in `env.args`.\n             if let Some(i) = env.args.iter().position(|arg| arg.starts_with(\"--emit=\")) {\n                 // For `no_run` tests, rustdoc passes a `--emit` flag; make sure it has the right shape.\n                 assert_eq!(env.args[i], \"--emit=metadata\");\n@@ -877,7 +878,7 @@ fn phase_cargo_rustdoc(fst_arg: &str, mut args: env::Args) {\n \n     // phase_cargo_miri sets the RUSTDOC env var to ourselves, so we can't use that here;\n     // just default to a straight-forward invocation for now:\n-    let mut cmd = Command::new(OsString::from(\"rustdoc\"));\n+    let mut cmd = Command::new(\"rustdoc\");\n \n     // Because of the way the main function is structured, we have to take the first argument spearately\n     // from the rest; to simplify the following argument patching loop, we'll just skip that one.\n@@ -888,6 +889,7 @@ fn phase_cargo_rustdoc(fst_arg: &str, mut args: env::Args) {\n     cmd.arg(fst_arg);\n \n     let runtool_flag = \"--runtool\";\n+    // `crossmode` records if *any* argument matches `runtool_flag`; here we check the first one.\n     let mut crossmode = fst_arg == runtool_flag;\n     while let Some(arg) = args.next() {\n         if arg == extern_flag {\n@@ -950,9 +952,8 @@ fn main() {\n         return;\n     }\n \n-    // The way rustdoc invokes rustc is indistuingishable from the way cargo invokes rustdoc\n-    // by the arguments alone, and we can't take from the args iterator in this case.\n-    // phase_cargo_rustdoc sets this environment variable to let us disambiguate here\n+    // The way rustdoc invokes rustc is indistuingishable from the way cargo invokes rustdoc by the\n+    // arguments alone. `phase_cargo_rustdoc` sets this environment variable to let us disambiguate.\n     let invoked_by_rustdoc = env::var_os(\"MIRI_CALLED_FROM_RUSTDOC\").is_some();\n     if invoked_by_rustdoc {\n         // ...however, we then also see this variable when rustdoc invokes us as the testrunner!"}, {"sha": "84c4a129ad3e55d0ee59d6ea8de7e58fe389181e", "filename": "test-cargo-miri/run-test.py", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f9bd6b0756c12e9f33223bd0a8460cd1129160a6/test-cargo-miri%2Frun-test.py", "raw_url": "https://github.com/rust-lang/rust/raw/f9bd6b0756c12e9f33223bd0a8460cd1129160a6/test-cargo-miri%2Frun-test.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Frun-test.py?ref=f9bd6b0756c12e9f33223bd0a8460cd1129160a6", "patch": "@@ -113,9 +113,9 @@ def test_cargo_miri_test():\n         default_ref, \"test.stderr-empty.ref\",\n         env={'MIRIFLAGS': \"-Zmiri-seed=feed\"},\n     )\n-    test(\"`cargo miri test` (no isolation)\",\n-        cargo_miri(\"test\"),\n-        default_ref, \"test.stderr-empty.ref\",\n+    test(\"`cargo miri test` (no isolation, no doctests)\",\n+        cargo_miri(\"test\") + [\"--bins\", \"--tests\"], # no `--lib`, we disabled that in `Cargo.toml`\n+        \"test.cross-target.stdout.ref\", \"test.stderr-empty.ref\",\n         env={'MIRIFLAGS': \"-Zmiri-disable-isolation\"},\n     )\n     test(\"`cargo miri test` (raw-ptr tracking)\","}]}