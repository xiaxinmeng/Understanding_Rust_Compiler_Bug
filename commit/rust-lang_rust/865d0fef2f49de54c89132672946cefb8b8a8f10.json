{"sha": "865d0fef2f49de54c89132672946cefb8b8a8f10", "node_id": "C_kwDOAAsO6NoAKDg2NWQwZmVmMmY0OWRlNTRjODkxMzI2NzI5NDZjZWZiOGI4YThmMTA", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-03-31T18:10:37Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-04-29T22:28:42Z"}, "message": "Ban non-static lifetimes from AnonConst on AST.\n\nThe extra diagnostics come from the compiler no longer aborting before\ntypeck.", "tree": {"sha": "717a5bc734b4dfcee90902d587889a3172c05a24", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/717a5bc734b4dfcee90902d587889a3172c05a24"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/865d0fef2f49de54c89132672946cefb8b8a8f10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/865d0fef2f49de54c89132672946cefb8b8a8f10", "html_url": "https://github.com/rust-lang/rust/commit/865d0fef2f49de54c89132672946cefb8b8a8f10", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/865d0fef2f49de54c89132672946cefb8b8a8f10/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b711723d415bdadb3b1a6cc2458f05480c06b49b", "url": "https://api.github.com/repos/rust-lang/rust/commits/b711723d415bdadb3b1a6cc2458f05480c06b49b", "html_url": "https://github.com/rust-lang/rust/commit/b711723d415bdadb3b1a6cc2458f05480c06b49b"}], "stats": {"total": 75, "additions": 37, "deletions": 38}, "files": [{"sha": "9622553319d953d4dff53e1a387284bbe691982f", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/865d0fef2f49de54c89132672946cefb8b8a8f10/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/865d0fef2f49de54c89132672946cefb8b8a8f10/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=865d0fef2f49de54c89132672946cefb8b8a8f10", "patch": "@@ -204,6 +204,11 @@ enum LifetimeRibKind {\n     /// lifetimes in const generics. See issue #74052 for discussion.\n     ConstGeneric,\n \n+    /// Non-static lifetimes are prohibited in anonymous constants under `min_const_generics`.\n+    /// This function will emit an error if `generic_const_exprs` is not enabled, the body identified by\n+    /// `body_id` is an anonymous constant and `lifetime_ref` is non-static.\n+    AnonConst,\n+\n     /// For **Modern** cases, create a new anonymous region parameter\n     /// and reference that.\n     ///\n@@ -532,7 +537,9 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n     }\n     fn visit_anon_const(&mut self, constant: &'ast AnonConst) {\n         // We deal with repeat expressions explicitly in `resolve_expr`.\n-        self.resolve_anon_const(constant, IsRepeatExpr::No);\n+        self.with_lifetime_rib(LifetimeRibKind::AnonConst, |this| {\n+            this.resolve_anon_const(constant, IsRepeatExpr::No);\n+        })\n     }\n     fn visit_expr(&mut self, expr: &'ast Expr) {\n         self.resolve_expr(expr, None);\n@@ -1117,7 +1124,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                             this.ribs[TypeNS].push(forward_ty_ban_rib);\n                             this.ribs[ValueNS].push(forward_const_ban_rib);\n                             this.with_lifetime_rib(LifetimeRibKind::ConstGeneric, |this| {\n-                                this.visit_anon_const(expr)\n+                                this.resolve_anon_const(expr, IsRepeatExpr::No)\n                             });\n                             forward_const_ban_rib = this.ribs[ValueNS].pop().unwrap();\n                             forward_ty_ban_rib = this.ribs[TypeNS].pop().unwrap();\n@@ -1174,6 +1181,11 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                     self.r.lifetimes_res_map.insert(lifetime.id, LifetimeRes::Error);\n                     return;\n                 }\n+                LifetimeRibKind::AnonConst => {\n+                    self.maybe_emit_forbidden_non_static_lifetime_error(lifetime);\n+                    self.r.lifetimes_res_map.insert(lifetime.id, LifetimeRes::Error);\n+                    return;\n+                }\n                 _ => {}\n             }\n         }\n@@ -3076,9 +3088,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n             is_repeat,\n             constant.value.is_potential_trivial_const_param(),\n             None,\n-            |this| {\n-                visit::walk_anon_const(this, constant);\n-            },\n+            |this| visit::walk_anon_const(this, constant),\n         );\n     }\n \n@@ -3229,7 +3239,12 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n             }\n             ExprKind::Repeat(ref elem, ref ct) => {\n                 self.visit_expr(elem);\n-                self.resolve_anon_const(ct, IsRepeatExpr::Yes);\n+                self.with_lifetime_rib(LifetimeRibKind::AnonConst, |this| {\n+                    this.resolve_anon_const(ct, IsRepeatExpr::Yes)\n+                });\n+            }\n+            ExprKind::ConstBlock(ref ct) => {\n+                self.resolve_anon_const(ct, IsRepeatExpr::No);\n             }\n             ExprKind::Index(ref elem, ref idx) => {\n                 self.resolve_expr(elem, Some(expr));"}, {"sha": "894ff0f17f8a1c6ee3b3552318e5034b77ba4944", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 16, "deletions": 28, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/865d0fef2f49de54c89132672946cefb8b8a8f10/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/865d0fef2f49de54c89132672946cefb8b8a8f10/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=865d0fef2f49de54c89132672946cefb8b8a8f10", "patch": "@@ -1901,6 +1901,22 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n         )\n         .emit();\n     }\n+\n+    /// Non-static lifetimes are prohibited in anonymous constants under `min_const_generics`.\n+    /// This function will emit an error if `generic_const_exprs` is not enabled, the body identified by\n+    /// `body_id` is an anonymous constant and `lifetime_ref` is non-static.\n+    crate fn maybe_emit_forbidden_non_static_lifetime_error(&self, lifetime_ref: &ast::Lifetime) {\n+        let feature_active = self.r.session.features_untracked().generic_const_exprs;\n+        if !feature_active {\n+            feature_err(\n+                &self.r.session.parse_sess,\n+                sym::generic_const_exprs,\n+                lifetime_ref.ident.span,\n+                \"a non-static lifetime is not allowed in a `const`\",\n+            )\n+            .emit();\n+        }\n+    }\n }\n \n impl<'tcx> LifetimeContext<'_, 'tcx> {\n@@ -2398,32 +2414,4 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n             _ => unreachable!(),\n         }\n     }\n-\n-    /// Non-static lifetimes are prohibited in anonymous constants under `min_const_generics`.\n-    /// This function will emit an error if `generic_const_exprs` is not enabled, the body identified by\n-    /// `body_id` is an anonymous constant and `lifetime_ref` is non-static.\n-    crate fn maybe_emit_forbidden_non_static_lifetime_error(\n-        &self,\n-        body_id: hir::BodyId,\n-        lifetime_ref: &'tcx hir::Lifetime,\n-    ) {\n-        let is_anon_const = matches!(\n-            self.tcx.def_kind(self.tcx.hir().body_owner_def_id(body_id)),\n-            hir::def::DefKind::AnonConst\n-        );\n-        let is_allowed_lifetime = matches!(\n-            lifetime_ref.name,\n-            hir::LifetimeName::Implicit | hir::LifetimeName::Static | hir::LifetimeName::Underscore\n-        );\n-\n-        if !self.tcx.lazy_normalization() && is_anon_const && !is_allowed_lifetime {\n-            feature_err(\n-                &self.tcx.sess.parse_sess,\n-                sym::generic_const_exprs,\n-                lifetime_ref.span,\n-                \"a non-static lifetime is not allowed in a `const`\",\n-            )\n-            .emit();\n-        }\n-    }\n }"}, {"sha": "35a40a0a32131823047d5c398971d63f00b4c32d", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/865d0fef2f49de54c89132672946cefb8b8a8f10/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/865d0fef2f49de54c89132672946cefb8b8a8f10/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=865d0fef2f49de54c89132672946cefb8b8a8f10", "patch": "@@ -2243,10 +2243,6 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         let result = loop {\n             match *scope {\n                 Scope::Body { id, s } => {\n-                    // Non-static lifetimes are prohibited in anonymous constants without\n-                    // `generic_const_exprs`.\n-                    self.maybe_emit_forbidden_non_static_lifetime_error(id, lifetime_ref);\n-\n                     outermost_body = Some(id);\n                     scope = s;\n                 }"}]}