{"sha": "18f86baa625e2b1731f044ceecf96662cfc41f6f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4Zjg2YmFhNjI1ZTJiMTczMWYwNDRjZWVjZjk2NjYyY2ZjNDFmNmY=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-07-28T15:39:04Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-07-28T15:39:04Z"}, "message": "Stop reexporting `hir_def`'s `ItemInNs` from HIR", "tree": {"sha": "d68806b7f8efdefe99952ee376e86269a0a5cb0b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d68806b7f8efdefe99952ee376e86269a0a5cb0b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/18f86baa625e2b1731f044ceecf96662cfc41f6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/18f86baa625e2b1731f044ceecf96662cfc41f6f", "html_url": "https://github.com/rust-lang/rust/commit/18f86baa625e2b1731f044ceecf96662cfc41f6f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/18f86baa625e2b1731f044ceecf96662cfc41f6f/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1662c3470d68351aea6426e9909386a74b2738b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/1662c3470d68351aea6426e9909386a74b2738b9", "html_url": "https://github.com/rust-lang/rust/commit/1662c3470d68351aea6426e9909386a74b2738b9"}], "stats": {"total": 87, "additions": 60, "deletions": 27}, "files": [{"sha": "98c51652d95b6a27ff14b22e1545d76333e27525", "filename": "crates/hir/src/from_id.rs", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/18f86baa625e2b1731f044ceecf96662cfc41f6f/crates%2Fhir%2Fsrc%2Ffrom_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18f86baa625e2b1731f044ceecf96662cfc41f6f/crates%2Fhir%2Fsrc%2Ffrom_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Ffrom_id.rs?ref=18f86baa625e2b1731f044ceecf96662cfc41f6f", "patch": "@@ -5,14 +5,13 @@\n \n use hir_def::{\n     expr::{LabelId, PatId},\n-    item_scope::ItemInNs,\n     AdtId, AssocItemId, DefWithBodyId, EnumVariantId, FieldId, GenericDefId, GenericParamId,\n     ModuleDefId, VariantId,\n };\n \n use crate::{\n-    Adt, AssocItem, BuiltinType, DefWithBody, Field, GenericDef, GenericParam, Label, Local,\n-    MacroDef, ModuleDef, Variant, VariantDef,\n+    Adt, AssocItem, BuiltinType, DefWithBody, Field, GenericDef, GenericParam, ItemInNs, Label,\n+    Local, ModuleDef, Variant, VariantDef,\n };\n \n macro_rules! from_id {\n@@ -258,19 +257,22 @@ impl From<(DefWithBodyId, LabelId)> for Label {\n     }\n }\n \n-impl From<MacroDef> for ItemInNs {\n-    fn from(macro_def: MacroDef) -> Self {\n-        ItemInNs::Macros(macro_def.into())\n+impl From<hir_def::item_scope::ItemInNs> for ItemInNs {\n+    fn from(it: hir_def::item_scope::ItemInNs) -> Self {\n+        match it {\n+            hir_def::item_scope::ItemInNs::Types(it) => ItemInNs::Types(it.into()),\n+            hir_def::item_scope::ItemInNs::Values(it) => ItemInNs::Values(it.into()),\n+            hir_def::item_scope::ItemInNs::Macros(it) => ItemInNs::Macros(it.into()),\n+        }\n     }\n }\n \n-impl From<ModuleDef> for ItemInNs {\n-    fn from(module_def: ModuleDef) -> Self {\n-        match module_def {\n-            ModuleDef::Static(_) | ModuleDef::Const(_) | ModuleDef::Function(_) => {\n-                ItemInNs::Values(module_def.into())\n-            }\n-            _ => ItemInNs::Types(module_def.into()),\n+impl From<ItemInNs> for hir_def::item_scope::ItemInNs {\n+    fn from(it: ItemInNs) -> Self {\n+        match it {\n+            ItemInNs::Types(it) => Self::Types(it.into()),\n+            ItemInNs::Values(it) => Self::Values(it.into()),\n+            ItemInNs::Macros(it) => Self::Macros(it.into()),\n         }\n     }\n }"}, {"sha": "7ee302306f52e2049a30fef5b5699d6c6f3c6f3f", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 40, "deletions": 6, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/18f86baa625e2b1731f044ceecf96662cfc41f6f/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18f86baa625e2b1731f044ceecf96662cfc41f6f/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=18f86baa625e2b1731f044ceecf96662cfc41f6f", "patch": "@@ -108,7 +108,6 @@ pub use {\n         attr::{Attr, Attrs, AttrsWithOwner, Documentation},\n         find_path::PrefixKind,\n         import_map,\n-        item_scope::ItemInNs, // FIXME: don't re-export ItemInNs, as it uses raw ids.\n         nameres::ModuleSource,\n         path::{ModPath, PathKind},\n         type_ref::{Mutability, TypeRef},\n@@ -194,9 +193,11 @@ impl Crate {\n         query: import_map::Query,\n     ) -> impl Iterator<Item = Either<ModuleDef, MacroDef>> {\n         let _p = profile::span(\"query_external_importables\");\n-        import_map::search_dependencies(db, self.into(), query).into_iter().map(|item| match item {\n-            ItemInNs::Types(mod_id) | ItemInNs::Values(mod_id) => Either::Left(mod_id.into()),\n-            ItemInNs::Macros(mac_id) => Either::Right(mac_id.into()),\n+        import_map::search_dependencies(db, self.into(), query).into_iter().map(|item| {\n+            match ItemInNs::from(item) {\n+                ItemInNs::Types(mod_id) | ItemInNs::Values(mod_id) => Either::Left(mod_id),\n+                ItemInNs::Macros(mac_id) => Either::Right(mac_id),\n+            }\n         })\n     }\n \n@@ -656,7 +657,7 @@ impl Module {\n     /// Finds a path that can be used to refer to the given item from within\n     /// this module, if possible.\n     pub fn find_use_path(self, db: &dyn DefDatabase, item: impl Into<ItemInNs>) -> Option<ModPath> {\n-        hir_def::find_path::find_path(db, item.into(), self.into())\n+        hir_def::find_path::find_path(db, item.into().into(), self.into())\n     }\n \n     /// Finds a path that can be used to refer to the given item from within\n@@ -667,7 +668,7 @@ impl Module {\n         item: impl Into<ItemInNs>,\n         prefix_kind: PrefixKind,\n     ) -> Option<ModPath> {\n-        hir_def::find_path::find_path_prefixed(db, item.into(), self.into(), prefix_kind)\n+        hir_def::find_path::find_path_prefixed(db, item.into().into(), self.into(), prefix_kind)\n     }\n }\n \n@@ -1567,6 +1568,39 @@ impl MacroDef {\n     }\n }\n \n+#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash)]\n+pub enum ItemInNs {\n+    Types(ModuleDef),\n+    Values(ModuleDef),\n+    Macros(MacroDef),\n+}\n+\n+impl From<MacroDef> for ItemInNs {\n+    fn from(it: MacroDef) -> Self {\n+        Self::Macros(it)\n+    }\n+}\n+\n+impl From<ModuleDef> for ItemInNs {\n+    fn from(module_def: ModuleDef) -> Self {\n+        match module_def {\n+            ModuleDef::Static(_) | ModuleDef::Const(_) | ModuleDef::Function(_) => {\n+                ItemInNs::Values(module_def)\n+            }\n+            _ => ItemInNs::Types(module_def),\n+        }\n+    }\n+}\n+\n+impl ItemInNs {\n+    pub fn as_module_def(self) -> Option<ModuleDef> {\n+        match self {\n+            ItemInNs::Types(id) | ItemInNs::Values(id) => Some(id),\n+            ItemInNs::Macros(_) => None,\n+        }\n+    }\n+}\n+\n /// Invariant: `inner.as_assoc_item(db).is_some()`\n /// We do not actively enforce this invariant.\n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]"}, {"sha": "28d7f3a346ccba2d6165884d670fc6fb6efd3667", "filename": "crates/ide_assists/src/handlers/qualify_path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/18f86baa625e2b1731f044ceecf96662cfc41f6f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fqualify_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18f86baa625e2b1731f044ceecf96662cfc41f6f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fqualify_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fqualify_path.rs?ref=18f86baa625e2b1731f044ceecf96662cfc41f6f", "patch": "@@ -176,7 +176,7 @@ fn find_trait_method(\n }\n \n fn item_as_trait(db: &RootDatabase, item: hir::ItemInNs) -> Option<hir::Trait> {\n-    let item_module_def = hir::ModuleDef::from(item.as_module_def_id()?);\n+    let item_module_def = item.as_module_def()?;\n \n     if let hir::ModuleDef::Trait(trait_) = item_module_def {\n         Some(trait_)"}, {"sha": "a69c1c00801229ffe6c416862041ea2024aae695", "filename": "crates/ide_assists/src/handlers/replace_derive_with_manual_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/18f86baa625e2b1731f044ceecf96662cfc41f6f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18f86baa625e2b1731f044ceecf96662cfc41f6f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs?ref=18f86baa625e2b1731f044ceecf96662cfc41f6f", "patch": "@@ -67,7 +67,7 @@ pub(crate) fn replace_derive_with_manual_impl(\n         items_locator::AssocItemSearch::Exclude,\n         Some(items_locator::DEFAULT_QUERY_SEARCH_LIMIT.inner()),\n     )\n-    .filter_map(|item| match ModuleDef::from(item.as_module_def_id()?) {\n+    .filter_map(|item| match item.as_module_def()? {\n         ModuleDef::Trait(trait_) => Some(trait_),\n         _ => None,\n     })"}, {"sha": "23489aca99a488469a654429cea9a1dde520a375", "filename": "crates/ide_db/src/helpers/import_assets.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/18f86baa625e2b1731f044ceecf96662cfc41f6f/crates%2Fide_db%2Fsrc%2Fhelpers%2Fimport_assets.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18f86baa625e2b1731f044ceecf96662cfc41f6f/crates%2Fide_db%2Fsrc%2Fhelpers%2Fimport_assets.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Fimport_assets.rs?ref=18f86baa625e2b1731f044ceecf96662cfc41f6f", "patch": "@@ -620,6 +620,5 @@ fn path_import_candidate(\n }\n \n fn item_as_assoc(db: &RootDatabase, item: ItemInNs) -> Option<AssocItem> {\n-    item.as_module_def_id()\n-        .and_then(|module_def_id| ModuleDef::from(module_def_id).as_assoc_item(db))\n+    item.as_module_def().and_then(|module_def| module_def.as_assoc_item(db))\n }"}, {"sha": "bf170ffb8349bd80f8f1967e4ae13e5c858748a4", "filename": "crates/ide_db/src/items_locator.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/18f86baa625e2b1731f044ceecf96662cfc41f6f/crates%2Fide_db%2Fsrc%2Fitems_locator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18f86baa625e2b1731f044ceecf96662cfc41f6f/crates%2Fide_db%2Fsrc%2Fitems_locator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fitems_locator.rs?ref=18f86baa625e2b1731f044ceecf96662cfc41f6f", "patch": "@@ -5,7 +5,7 @@\n use either::Either;\n use hir::{\n     import_map::{self, ImportKind},\n-    AsAssocItem, Crate, ItemInNs, ModuleDef, Semantics,\n+    AsAssocItem, Crate, ItemInNs, Semantics,\n };\n use limit::Limit;\n use syntax::{ast, AstNode, SyntaxKind::NAME};\n@@ -147,7 +147,5 @@ fn get_name_definition(\n }\n \n fn is_assoc_item(item: ItemInNs, db: &RootDatabase) -> bool {\n-    item.as_module_def_id()\n-        .and_then(|module_def_id| ModuleDef::from(module_def_id).as_assoc_item(db))\n-        .is_some()\n+    item.as_module_def().and_then(|module_def| module_def.as_assoc_item(db)).is_some()\n }"}]}