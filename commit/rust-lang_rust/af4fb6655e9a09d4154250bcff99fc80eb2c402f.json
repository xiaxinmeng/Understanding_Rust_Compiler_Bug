{"sha": "af4fb6655e9a09d4154250bcff99fc80eb2c402f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmNGZiNjY1NWU5YTA5ZDQxNTQyNTBiY2ZmOTlmYzgwZWIyYzQwMmY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-12-19T14:25:25Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-12-19T14:25:25Z"}, "message": "implement GetCommandLineW, GetEnvironmentVariableW, GetConsoleScreenBufferInfo, SetConsoleTextAttribute, GetSystemInfo", "tree": {"sha": "49732eb4c1349605ed7486fb130029cd011b838e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/49732eb4c1349605ed7486fb130029cd011b838e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af4fb6655e9a09d4154250bcff99fc80eb2c402f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af4fb6655e9a09d4154250bcff99fc80eb2c402f", "html_url": "https://github.com/rust-lang/rust/commit/af4fb6655e9a09d4154250bcff99fc80eb2c402f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af4fb6655e9a09d4154250bcff99fc80eb2c402f/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7c523f72ee0850972cc8a37b6780d2fe1666b0c", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7c523f72ee0850972cc8a37b6780d2fe1666b0c", "html_url": "https://github.com/rust-lang/rust/commit/e7c523f72ee0850972cc8a37b6780d2fe1666b0c"}], "stats": {"total": 116, "additions": 93, "deletions": 23}, "files": [{"sha": "16d18dbfe6dc29652687826a3d72054412c99701", "filename": "src/fn_call.rs", "status": "modified", "additions": 39, "deletions": 8, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/af4fb6655e9a09d4154250bcff99fc80eb2c402f/src%2Ffn_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af4fb6655e9a09d4154250bcff99fc80eb2c402f/src%2Ffn_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffn_call.rs?ref=af4fb6655e9a09d4154250bcff99fc80eb2c402f", "patch": "@@ -562,27 +562,50 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a+'mir>: crate::MiriEvalContextExt<'a,\n             },\n \n             // Windows API stubs\n+            \"SetLastError\" => {\n+                let err = this.read_scalar(args[0])?.to_u32()?;\n+                this.machine.last_error = err;\n+            }\n+            \"GetLastError\" => {\n+                this.write_scalar(Scalar::from_uint(this.machine.last_error, Size::from_bits(32)), dest)?;\n+            }\n+\n             \"AddVectoredExceptionHandler\" => {\n                 // any non zero value works for the stdlib. This is just used for stackoverflows anyway\n                 this.write_scalar(Scalar::from_int(1, dest.layout.size), dest)?;\n             },\n             \"InitializeCriticalSection\" |\n             \"EnterCriticalSection\" |\n             \"LeaveCriticalSection\" |\n-            \"DeleteCriticalSection\" |\n-            \"SetLastError\" => {\n-                // Function does not return anything, nothing to do\n+            \"DeleteCriticalSection\" => {\n+                // Nothing to do, not even a return value\n             },\n             \"GetModuleHandleW\" |\n             \"GetProcAddress\" |\n-            \"TryEnterCriticalSection\" => {\n+            \"TryEnterCriticalSection\" |\n+            \"GetConsoleScreenBufferInfo\" |\n+            \"SetConsoleTextAttribute\" => {\n                 // pretend these do not exist/nothing happened, by returning zero\n                 this.write_null(dest)?;\n             },\n-            \"GetLastError\" => {\n-                // this is c::ERROR_CALL_NOT_IMPLEMENTED\n-                this.write_scalar(Scalar::from_int(120, dest.layout.size), dest)?;\n-            },\n+            \"GetSystemInfo\" => {\n+                let system_info = this.deref_operand(args[0])?;\n+                let system_info_ptr = system_info.ptr.to_ptr()?;\n+                // initialize with 0\n+                this.memory_mut().get_mut(system_info_ptr.alloc_id)?\n+                    .write_repeat(tcx, system_info_ptr, 0, system_info.layout.size)?;\n+                // set number of processors to 1\n+                let dword_size = Size::from_bytes(4);\n+                let offset = 2*dword_size + 3*tcx.pointer_size();\n+                this.memory_mut().get_mut(system_info_ptr.alloc_id)?\n+                    .write_scalar(\n+                        tcx,\n+                        system_info_ptr.offset(offset, tcx)?,\n+                        Scalar::from_int(1, dword_size).into(),\n+                        dword_size,\n+                    )?;\n+            }\n+\n             \"TlsAlloc\" => {\n                 // This just creates a key; Windows does not natively support TLS dtors.\n \n@@ -649,6 +672,14 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a+'mir>: crate::MiriEvalContextExt<'a,\n                 // Everything is a pipe\n                 this.write_null(dest)?;\n             }\n+            \"GetEnvironmentVariableW\" => {\n+                // This is not the env var you are looking for\n+                this.machine.last_error = 203; // ERROR_ENVVAR_NOT_FOUND\n+                this.write_null(dest)?;\n+            }\n+            \"GetCommandLineW\" => {\n+                this.write_scalar(Scalar::Ptr(this.machine.cmd_line.unwrap()), dest)?;\n+            }\n \n             // We can't execute anything else\n             _ => {"}, {"sha": "bc5e8363e89e0b33d1b48bd46e3a53cfbc989c9d", "filename": "src/lib.rs", "status": "modified", "additions": 54, "deletions": 15, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/af4fb6655e9a09d4154250bcff99fc80eb2c402f/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af4fb6655e9a09d4154250bcff99fc80eb2c402f/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=af4fb6655e9a09d4154250bcff99fc80eb2c402f", "patch": "@@ -18,7 +18,7 @@ use std::borrow::Cow;\n use std::env;\n \n use rustc::ty::{self, TyCtxt, query::TyCtxtAt};\n-use rustc::ty::layout::{TyLayout, LayoutOf, Size};\n+use rustc::ty::layout::{TyLayout, LayoutOf, Size, Align};\n use rustc::hir::{self, def_id::DefId};\n use rustc::mir;\n \n@@ -123,24 +123,56 @@ pub fn create_ecx<'a, 'mir: 'a, 'tcx: 'mir>(\n     let dest = ecx.eval_place(&mir::Place::Local(args.next().unwrap()))?;\n     let argc = Scalar::from_int(1, dest.layout.size);\n     ecx.write_scalar(argc, dest)?;\n-    let argc_place = ecx.allocate(dest.layout, MiriMemoryKind::Env.into())?;\n-    ecx.write_scalar(argc, argc_place.into())?;\n-    ecx.machine.argc = Some(argc_place.ptr.to_ptr()?);\n+    // Store argc for macOS _NSGetArgc\n+    {\n+        let argc_place = ecx.allocate(dest.layout, MiriMemoryKind::Env.into())?;\n+        ecx.write_scalar(argc, argc_place.into())?;\n+        ecx.machine.argc = Some(argc_place.ptr.to_ptr()?);\n+    }\n \n     // FIXME: extract main source file path\n     // Third argument (argv): &[b\"foo\"]\n+    const CMD: &str = \"running-in-miri\";\n     let dest = ecx.eval_place(&mir::Place::Local(args.next().unwrap()))?;\n-    let foo = ecx.memory_mut().allocate_static_bytes(b\"foo\\0\").with_default_tag();\n-    let foo_ty = ecx.tcx.mk_imm_ptr(ecx.tcx.types.u8);\n-    let foo_layout = ecx.layout_of(foo_ty)?;\n-    let foo_place = ecx.allocate(foo_layout, MiriMemoryKind::Env.into())?;\n-    ecx.write_scalar(Scalar::Ptr(foo), foo_place.into())?;\n-    ecx.memory_mut().mark_immutable(foo_place.to_ptr()?.alloc_id)?;\n-    let argv = foo_place.ptr;\n-    ecx.write_scalar(argv, dest)?;\n-    let argv_place = ecx.allocate(dest.layout, MiriMemoryKind::Env.into())?;\n-    ecx.write_scalar(argv, argv_place.into())?;\n-    ecx.machine.argv = Some(argv_place.ptr.to_ptr()?);\n+    let cmd = ecx.memory_mut().allocate_static_bytes(CMD.as_bytes()).with_default_tag();\n+    let raw_str_layout = ecx.layout_of(ecx.tcx.mk_imm_ptr(ecx.tcx.types.u8))?;\n+    let cmd_place = ecx.allocate(raw_str_layout, MiriMemoryKind::Env.into())?;\n+    ecx.write_scalar(Scalar::Ptr(cmd), cmd_place.into())?;\n+    ecx.memory_mut().mark_immutable(cmd_place.to_ptr()?.alloc_id)?;\n+    // Store argv for macOS _NSGetArgv\n+    {\n+        let argv = cmd_place.ptr;\n+        ecx.write_scalar(argv, dest)?;\n+        let argv_place = ecx.allocate(dest.layout, MiriMemoryKind::Env.into())?;\n+        ecx.write_scalar(argv, argv_place.into())?;\n+        ecx.machine.argv = Some(argv_place.ptr.to_ptr()?);\n+    }\n+    // Store cmdline as UTF-16 for Windows GetCommandLineW\n+    {\n+        let tcx = &{ecx.tcx.tcx};\n+        let cmd_utf16: Vec<u16> = CMD.encode_utf16()\n+            .chain(Some(0)) // add 0-terminator\n+            .collect();\n+        let cmd_ptr = ecx.memory_mut().allocate(\n+            Size::from_bytes(cmd_utf16.len() as u64 * 2),\n+            Align::from_bytes(2).unwrap(),\n+            MiriMemoryKind::Env.into(),\n+        )?.with_default_tag();\n+        ecx.machine.cmd_line = Some(cmd_ptr);\n+        // store the UTF-16 string\n+        let char_size = Size::from_bytes(2);\n+        let cmd_alloc = ecx.memory_mut().get_mut(cmd_ptr.alloc_id)?;\n+        let mut cur_ptr = cmd_ptr;\n+        for &c in cmd_utf16.iter() {\n+            cmd_alloc.write_scalar(\n+                tcx,\n+                cur_ptr,\n+                Scalar::from_uint(c, char_size).into(),\n+                char_size,\n+            )?;\n+            cur_ptr = cur_ptr.offset(char_size, tcx)?;\n+        }\n+    }\n \n     assert!(args.next().is_none(), \"start lang item has more arguments than expected\");\n \n@@ -263,8 +295,13 @@ pub struct Evaluator<'tcx> {\n \n     /// Program arguments (`Option` because we can only initialize them after creating the ecx).\n     /// These are *pointers* to argc/argv because macOS.\n+    /// We also need the full cmdline as one string because Window.\n     pub(crate) argc: Option<Pointer<Borrow>>,\n     pub(crate) argv: Option<Pointer<Borrow>>,\n+    pub(crate) cmd_line: Option<Pointer<Borrow>>,\n+\n+    /// Last OS error\n+    pub(crate) last_error: u32,\n \n     /// TLS state\n     pub(crate) tls: TlsData<'tcx>,\n@@ -282,6 +319,8 @@ impl<'tcx> Evaluator<'tcx> {\n             env_vars: HashMap::default(),\n             argc: None,\n             argv: None,\n+            cmd_line: None,\n+            last_error: 0,\n             tls: TlsData::default(),\n             validate,\n             stacked_borrows: stacked_borrows::State::default(),"}]}