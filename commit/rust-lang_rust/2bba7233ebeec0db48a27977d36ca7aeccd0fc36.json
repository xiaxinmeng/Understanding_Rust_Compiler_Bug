{"sha": "2bba7233ebeec0db48a27977d36ca7aeccd0fc36", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiYmE3MjMzZWJlZWMwZGI0OGEyNzk3N2QzNmNhN2FlY2NkMGZjMzY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-02-17T16:06:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-02-17T16:06:49Z"}, "message": "auto merge of #12331 : bjz/rust/count-ones, r=alexcrichton\n\nThis is inspired by the [function naming in the Julia standard library](http://docs.julialang.org/en/release-0.2/stdlib/base/#Base.count_ones). It seems like a more self-explanatory name, and is more consistent with the accompanying methods, `leading_zeros` and `trailing_zeros`.", "tree": {"sha": "3a29554f27b831d8df815edc867843c643881870", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a29554f27b831d8df815edc867843c643881870"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2bba7233ebeec0db48a27977d36ca7aeccd0fc36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2bba7233ebeec0db48a27977d36ca7aeccd0fc36", "html_url": "https://github.com/rust-lang/rust/commit/2bba7233ebeec0db48a27977d36ca7aeccd0fc36", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2bba7233ebeec0db48a27977d36ca7aeccd0fc36/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88028693b842c7f6197d8d7dbc79e5019aa6f641", "url": "https://api.github.com/repos/rust-lang/rust/commits/88028693b842c7f6197d8d7dbc79e5019aa6f641", "html_url": "https://github.com/rust-lang/rust/commit/88028693b842c7f6197d8d7dbc79e5019aa6f641"}, {"sha": "79f52cf9ba20c36860bee8f775498a0880189ac1", "url": "https://api.github.com/repos/rust-lang/rust/commits/79f52cf9ba20c36860bee8f775498a0880189ac1", "html_url": "https://github.com/rust-lang/rust/commit/79f52cf9ba20c36860bee8f775498a0880189ac1"}], "stats": {"total": 132, "additions": 91, "deletions": 41}, "files": [{"sha": "d036f2c70d7efa722d34157528f493708ea06372", "filename": "src/libextra/enum_set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2bba7233ebeec0db48a27977d36ca7aeccd0fc36/src%2Flibextra%2Fenum_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bba7233ebeec0db48a27977d36ca7aeccd0fc36/src%2Flibextra%2Fenum_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fenum_set.rs?ref=2bba7233ebeec0db48a27977d36ca7aeccd0fc36", "patch": "@@ -129,7 +129,7 @@ impl<E:CLike> Iterator<E> for Items<E> {\n     }\n \n     fn size_hint(&self) -> (uint, Option<uint>) {\n-        let exact = self.bits.population_count();\n+        let exact = self.bits.count_ones();\n         (exact, Some(exact))\n     }\n }"}, {"sha": "2c68914d21fb0f89c7135d56e63a38591ae85001", "filename": "src/librustc/middle/trans/adt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2bba7233ebeec0db48a27977d36ca7aeccd0fc36/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bba7233ebeec0db48a27977d36ca7aeccd0fc36/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs?ref=2bba7233ebeec0db48a27977d36ca7aeccd0fc36", "patch": "@@ -432,7 +432,7 @@ fn generic_type_of(cx: &CrateContext, r: &Repr, name: Option<&str>, sizing: bool\n                 4 => Type::array(&Type::i32(), align_units),\n                 8 if machine::llalign_of_min(cx, Type::i64()) == 8 =>\n                                  Type::array(&Type::i64(), align_units),\n-                a if a.population_count() == 1 => Type::array(&Type::vector(&Type::i32(), a / 4),\n+                a if a.count_ones() == 1 => Type::array(&Type::vector(&Type::i32(), a / 4),\n                                                               align_units),\n                 _ => fail!(\"unsupported enum alignment: {:?}\", align)\n             };"}, {"sha": "cbeff5d4aa21ee8eed9ed8f5816042b07cf1ffbd", "filename": "src/libstd/num/i16.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2bba7233ebeec0db48a27977d36ca7aeccd0fc36/src%2Flibstd%2Fnum%2Fi16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bba7233ebeec0db48a27977d36ca7aeccd0fc36/src%2Flibstd%2Fnum%2Fi16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fi16.rs?ref=2bba7233ebeec0db48a27977d36ca7aeccd0fc36", "patch": "@@ -25,15 +25,17 @@ use unstable::intrinsics;\n int_module!(i16, 16)\n \n impl Bitwise for i16 {\n-    /// Counts the number of bits set. Wraps LLVM's `ctpop` intrinsic.\n+    /// Returns the number of ones in the binary representation of the number.\n     #[inline]\n-    fn population_count(&self) -> i16 { unsafe { intrinsics::ctpop16(*self) } }\n+    fn count_ones(&self) -> i16 { unsafe { intrinsics::ctpop16(*self) } }\n \n-    /// Counts the number of leading zeros. Wraps LLVM's `ctlz` intrinsic.\n+    /// Returns the number of leading zeros in the in the binary representation\n+    /// of the number.\n     #[inline]\n     fn leading_zeros(&self) -> i16 { unsafe { intrinsics::ctlz16(*self) } }\n \n-    /// Counts the number of trailing zeros. Wraps LLVM's `cttz` intrinsic.\n+    /// Returns the number of trailing zeros in the in the binary representation\n+    /// of the number.\n     #[inline]\n     fn trailing_zeros(&self) -> i16 { unsafe { intrinsics::cttz16(*self) } }\n }"}, {"sha": "9afc1a145453ea425e0f8661ef207d9c1d7fcd71", "filename": "src/libstd/num/i32.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2bba7233ebeec0db48a27977d36ca7aeccd0fc36/src%2Flibstd%2Fnum%2Fi32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bba7233ebeec0db48a27977d36ca7aeccd0fc36/src%2Flibstd%2Fnum%2Fi32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fi32.rs?ref=2bba7233ebeec0db48a27977d36ca7aeccd0fc36", "patch": "@@ -25,15 +25,17 @@ use unstable::intrinsics;\n int_module!(i32, 32)\n \n impl Bitwise for i32 {\n-    /// Counts the number of bits set. Wraps LLVM's `ctpop` intrinsic.\n+    /// Returns the number of ones in the binary representation of the number.\n     #[inline]\n-    fn population_count(&self) -> i32 { unsafe { intrinsics::ctpop32(*self) } }\n+    fn count_ones(&self) -> i32 { unsafe { intrinsics::ctpop32(*self) } }\n \n-    /// Counts the number of leading zeros. Wraps LLVM's `ctlz` intrinsic.\n+    /// Returns the number of leading zeros in the in the binary representation\n+    /// of the number.\n     #[inline]\n     fn leading_zeros(&self) -> i32 { unsafe { intrinsics::ctlz32(*self) } }\n \n-    /// Counts the number of trailing zeros. Wraps LLVM's `cttz` intrinsic.\n+    /// Returns the number of trailing zeros in the in the binary representation\n+    /// of the number.\n     #[inline]\n     fn trailing_zeros(&self) -> i32 { unsafe { intrinsics::cttz32(*self) } }\n }"}, {"sha": "f1e9f5a4fdc06f3c39f09a76e2fab81f6de0efe0", "filename": "src/libstd/num/i64.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2bba7233ebeec0db48a27977d36ca7aeccd0fc36/src%2Flibstd%2Fnum%2Fi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bba7233ebeec0db48a27977d36ca7aeccd0fc36/src%2Flibstd%2Fnum%2Fi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fi64.rs?ref=2bba7233ebeec0db48a27977d36ca7aeccd0fc36", "patch": "@@ -27,15 +27,16 @@ use unstable::intrinsics;\n int_module!(i64, 64)\n \n impl Bitwise for i64 {\n-    /// Counts the number of bits set. Wraps LLVM's `ctpop` intrinsic.\n+    /// Returns the number of ones in the binary representation of the number.\n     #[inline]\n-    fn population_count(&self) -> i64 { unsafe { intrinsics::ctpop64(*self) } }\n+    fn count_ones(&self) -> i64 { unsafe { intrinsics::ctpop64(*self) } }\n \n-    /// Counts the number of leading zeros. Wraps LLVM's `ctlz` intrinsic.\n+    /// Returns the number of leading zeros in the in the binary representation\n+    /// of the number.\n     #[inline]\n     fn leading_zeros(&self) -> i64 { unsafe { intrinsics::ctlz64(*self) } }\n \n-    /// Counts the number of trailing zeros. Wraps LLVM's `cttz` intrinsic.\n+    /// Counts the number of trailing zeros.\n     #[inline]\n     fn trailing_zeros(&self) -> i64 { unsafe { intrinsics::cttz64(*self) } }\n }"}, {"sha": "e0e549b731a07b8a22996d34313f6083a57c86c5", "filename": "src/libstd/num/i8.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2bba7233ebeec0db48a27977d36ca7aeccd0fc36/src%2Flibstd%2Fnum%2Fi8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bba7233ebeec0db48a27977d36ca7aeccd0fc36/src%2Flibstd%2Fnum%2Fi8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fi8.rs?ref=2bba7233ebeec0db48a27977d36ca7aeccd0fc36", "patch": "@@ -25,15 +25,17 @@ use unstable::intrinsics;\n int_module!(i8, 8)\n \n impl Bitwise for i8 {\n-    /// Counts the number of bits set. Wraps LLVM's `ctpop` intrinsic.\n+    /// Returns the number of ones in the binary representation of the number.\n     #[inline]\n-    fn population_count(&self) -> i8 { unsafe { intrinsics::ctpop8(*self) } }\n+    fn count_ones(&self) -> i8 { unsafe { intrinsics::ctpop8(*self) } }\n \n-    /// Counts the number of leading zeros. Wraps LLVM's `ctlz` intrinsic.\n+    /// Returns the number of leading zeros in the in the binary representation\n+    /// of the number.\n     #[inline]\n     fn leading_zeros(&self) -> i8 { unsafe { intrinsics::ctlz8(*self) } }\n \n-    /// Counts the number of trailing zeros. Wraps LLVM's `cttz` intrinsic.\n+    /// Returns the number of trailing zeros in the in the binary representation\n+    /// of the number.\n     #[inline]\n     fn trailing_zeros(&self) -> i8 { unsafe { intrinsics::cttz8(*self) } }\n }"}, {"sha": "d525639045e73ebbc60b13658405cc214a4ecab3", "filename": "src/libstd/num/int.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2bba7233ebeec0db48a27977d36ca7aeccd0fc36/src%2Flibstd%2Fnum%2Fint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bba7233ebeec0db48a27977d36ca7aeccd0fc36/src%2Flibstd%2Fnum%2Fint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fint.rs?ref=2bba7233ebeec0db48a27977d36ca7aeccd0fc36", "patch": "@@ -27,30 +27,34 @@ use unstable::intrinsics;\n \n #[cfg(target_word_size = \"32\")]\n impl Bitwise for int {\n-    /// Counts the number of bits set. Wraps LLVM's `ctpop` intrinsic.\n+    /// Returns the number of ones in the binary representation of the number.\n     #[inline]\n-    fn population_count(&self) -> int { (*self as i32).population_count() as int }\n+    fn count_ones(&self) -> int { (*self as i32).count_ones() as int }\n \n-    /// Counts the number of leading zeros. Wraps LLVM's `ctlz` intrinsic.\n+    /// Returns the number of leading zeros in the in the binary representation\n+    /// of the number.\n     #[inline]\n     fn leading_zeros(&self) -> int { (*self as i32).leading_zeros() as int }\n \n-    /// Counts the number of trailing zeros. Wraps LLVM's `cttz` intrinsic.\n+    /// Returns the number of trailing zeros in the in the binary representation\n+    /// of the number.\n     #[inline]\n     fn trailing_zeros(&self) -> int { (*self as i32).trailing_zeros() as int }\n }\n \n #[cfg(target_word_size = \"64\")]\n impl Bitwise for int {\n-    /// Counts the number of bits set. Wraps LLVM's `ctpop` intrinsic.\n+    /// Returns the number of ones in the binary representation of the number.\n     #[inline]\n-    fn population_count(&self) -> int { (*self as i64).population_count() as int }\n+    fn count_ones(&self) -> int { (*self as i64).count_ones() as int }\n \n-    /// Counts the number of leading zeros. Wraps LLVM's `ctlz` intrinsic.\n+    /// Returns the number of leading zeros in the in the binary representation\n+    /// of the number.\n     #[inline]\n     fn leading_zeros(&self) -> int { (*self as i64).leading_zeros() as int }\n \n-    /// Counts the number of trailing zeros. Wraps LLVM's `cttz` intrinsic.\n+    /// Returns the number of trailing zeros in the in the binary representation\n+    /// of the number.\n     #[inline]\n     fn trailing_zeros(&self) -> int { (*self as i64).trailing_zeros() as int }\n }"}, {"sha": "3ecc6f32017ea77b727c1c847ce62b2054394828", "filename": "src/libstd/num/int_macros.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2bba7233ebeec0db48a27977d36ca7aeccd0fc36/src%2Flibstd%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bba7233ebeec0db48a27977d36ca7aeccd0fc36/src%2Flibstd%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fint_macros.rs?ref=2bba7233ebeec0db48a27977d36ca7aeccd0fc36", "patch": "@@ -614,8 +614,17 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_bitcount() {\n-        assert_eq!((0b010101 as $T).population_count(), 3);\n+    fn test_count_ones() {\n+        assert_eq!((0b0101100 as $T).count_ones(), 3);\n+        assert_eq!((0b0100001 as $T).count_ones(), 2);\n+        assert_eq!((0b1111001 as $T).count_ones(), 5);\n+    }\n+\n+    #[test]\n+    fn test_count_zeros() {\n+        assert_eq!((0b0101100 as $T).count_zeros(), BITS as $T - 3);\n+        assert_eq!((0b0100001 as $T).count_zeros(), BITS as $T - 2);\n+        assert_eq!((0b1111001 as $T).count_zeros(), BITS as $T - 5);\n     }\n \n     #[test]"}, {"sha": "33690a5fddb0f5938cae488d39933ddf14c48c7b", "filename": "src/libstd/num/mod.rs", "status": "modified", "additions": 25, "deletions": 6, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/2bba7233ebeec0db48a27977d36ca7aeccd0fc36/src%2Flibstd%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bba7233ebeec0db48a27977d36ca7aeccd0fc36/src%2Flibstd%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fmod.rs?ref=2bba7233ebeec0db48a27977d36ca7aeccd0fc36", "patch": "@@ -375,18 +375,35 @@ pub trait Bitwise: Bounded\n                  + BitXor<Self,Self>\n                  + Shl<Self,Self>\n                  + Shr<Self,Self> {\n-    /// Returns the number of bits set in the number.\n+    /// Returns the number of ones in the binary representation of the number.\n     ///\n     /// # Example\n     ///\n     /// ```rust\n     /// use std::num::Bitwise;\n     ///\n-    /// let n = 0b0101000u16;\n-    /// assert_eq!(n.population_count(), 2);\n+    /// let n = 0b01001100u8;\n+    /// assert_eq!(n.count_ones(), 3);\n     /// ```\n-    fn population_count(&self) -> Self;\n-    /// Returns the number of leading zeros in the number.\n+    fn count_ones(&self) -> Self;\n+\n+    /// Returns the number of zeros in the binary representation of the number.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```rust\n+    /// use std::num::Bitwise;\n+    ///\n+    /// let n = 0b01001100u8;\n+    /// assert_eq!(n.count_zeros(), 5);\n+    /// ```\n+    #[inline]\n+    fn count_zeros(&self) -> Self {\n+        (!*self).count_ones()\n+    }\n+\n+    /// Returns the number of leading zeros in the in the binary representation\n+    /// of the number.\n     ///\n     /// # Example\n     ///\n@@ -397,7 +414,9 @@ pub trait Bitwise: Bounded\n     /// assert_eq!(n.leading_zeros(), 10);\n     /// ```\n     fn leading_zeros(&self) -> Self;\n-    /// Returns the number of trailing zeros in the number.\n+\n+    /// Returns the number of trailing zeros in the in the binary representation\n+    /// of the number.\n     ///\n     /// # Example\n     ///"}, {"sha": "4fc30b43895e41f570ac81a2c5c46f840d28abf0", "filename": "src/libstd/num/uint_macros.rs", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/2bba7233ebeec0db48a27977d36ca7aeccd0fc36/src%2Flibstd%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bba7233ebeec0db48a27977d36ca7aeccd0fc36/src%2Flibstd%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fuint_macros.rs?ref=2bba7233ebeec0db48a27977d36ca7aeccd0fc36", "patch": "@@ -266,19 +266,21 @@ impl ToStrRadix for $T {\n impl Primitive for $T {}\n \n impl Bitwise for $T {\n-    /// Counts the number of bits set. Wraps LLVM's `ctpop` intrinsic.\n+    /// Returns the number of ones in the binary representation of the number.\n     #[inline]\n-    fn population_count(&self) -> $T {\n-        (*self as $T_SIGNED).population_count() as $T\n+    fn count_ones(&self) -> $T {\n+        (*self as $T_SIGNED).count_ones() as $T\n     }\n \n-    /// Counts the number of leading zeros. Wraps LLVM's `ctlz` intrinsic.\n+    /// Returns the number of leading zeros in the in the binary representation\n+    /// of the number.\n     #[inline]\n     fn leading_zeros(&self) -> $T {\n         (*self as $T_SIGNED).leading_zeros() as $T\n     }\n \n-    /// Counts the number of trailing zeros. Wraps LLVM's `cttz` intrinsic.\n+    /// Returns the number of trailing zeros in the in the binary representation\n+    /// of the number.\n     #[inline]\n     fn trailing_zeros(&self) -> $T {\n         (*self as $T_SIGNED).trailing_zeros() as $T\n@@ -375,8 +377,17 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_bitcount() {\n-        assert_eq!((0b010101 as $T).population_count(), 3);\n+    fn test_count_ones() {\n+        assert_eq!((0b0101100 as $T).count_ones(), 3);\n+        assert_eq!((0b0100001 as $T).count_ones(), 2);\n+        assert_eq!((0b1111001 as $T).count_ones(), 5);\n+    }\n+\n+    #[test]\n+    fn test_count_zeros() {\n+        assert_eq!((0b0101100 as $T).count_zeros(), BITS as $T - 3);\n+        assert_eq!((0b0100001 as $T).count_zeros(), BITS as $T - 2);\n+        assert_eq!((0b1111001 as $T).count_zeros(), BITS as $T - 5);\n     }\n \n     #[test]"}]}