{"sha": "525438b6a9161f9c2bf80e495526b8fe10125947", "node_id": "C_kwDOAAsO6NoAKDUyNTQzOGI2YTkxNjFmOWMyYmY4MGU0OTU1MjZiOGZlMTAxMjU5NDc", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-04-09T03:58:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-09T03:58:42Z"}, "message": "Rollup merge of #95599 - niluxv:strict-provenance-lint, r=michaelwoerister\n\nStrict provenance lints\n\nSee #95488.\nThis PR introduces two unstable (allow by default) lints to which lint on int2ptr and ptr2int casts, as the former is not possible in the strict provenance model and the latter can be written nicer using the `.addr()` API.\nBased on an initial version of the lint by ```@Gankra``` in #95199.", "tree": {"sha": "dd2cb3175e287b1264fa5a2a22fb0827a3205934", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd2cb3175e287b1264fa5a2a22fb0827a3205934"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/525438b6a9161f9c2bf80e495526b8fe10125947", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiUQRyCRBK7hj4Ov3rIwAAsloIAEG4Fx9bGxCkP0vVKmZ+sxso\n5FEhumdyb5qvIG8RjSD5+PFRf49mJd/2tn72qzgIeK+fOXunAzGTv2xYlK3mA0Xh\nNqTY1/zlZ8Ew8p3F50PDzc1CPt/CKs+J90HCMhIfijMo6NDjawv1KB/Y1qRuOmrx\nLxSQjJtK9DdqMQgq9I+d8d1kxKLPwrYukMC6PjNivI7w80DLPDXWoIYmJbUuANtq\n3r2o6Nc441wA3trLKVOZl7WxwfYhKBrskJ8IzinYLiOtos9ROdO9sRgr9zenN/mX\nR6B0S1Ddi/LOfG3sn+BsU0R8iYPvB1dxlhQoxzviNP6EEfkJpDGH2oJ7i0Sv5as=\n=6g1a\n-----END PGP SIGNATURE-----\n", "payload": "tree dd2cb3175e287b1264fa5a2a22fb0827a3205934\nparent 9010879c0ac4256e867280421eb94ffae2cd9ad3\nparent 98a483423720bda1f51a22f01b378fa8e8e8b9a3\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1649476722 +0200\ncommitter GitHub <noreply@github.com> 1649476722 +0200\n\nRollup merge of #95599 - niluxv:strict-provenance-lint, r=michaelwoerister\n\nStrict provenance lints\n\nSee #95488.\nThis PR introduces two unstable (allow by default) lints to which lint on int2ptr and ptr2int casts, as the former is not possible in the strict provenance model and the latter can be written nicer using the `.addr()` API.\nBased on an initial version of the lint by ```@Gankra``` in #95199.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/525438b6a9161f9c2bf80e495526b8fe10125947", "html_url": "https://github.com/rust-lang/rust/commit/525438b6a9161f9c2bf80e495526b8fe10125947", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/525438b6a9161f9c2bf80e495526b8fe10125947/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9010879c0ac4256e867280421eb94ffae2cd9ad3", "url": "https://api.github.com/repos/rust-lang/rust/commits/9010879c0ac4256e867280421eb94ffae2cd9ad3", "html_url": "https://github.com/rust-lang/rust/commit/9010879c0ac4256e867280421eb94ffae2cd9ad3"}, {"sha": "98a483423720bda1f51a22f01b378fa8e8e8b9a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/98a483423720bda1f51a22f01b378fa8e8e8b9a3", "html_url": "https://github.com/rust-lang/rust/commit/98a483423720bda1f51a22f01b378fa8e8e8b9a3"}], "stats": {"total": 346, "additions": 342, "deletions": 4}, "files": [{"sha": "8340a0b360ef7f08549580373253d327ba5ba640", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/525438b6a9161f9c2bf80e495526b8fe10125947/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/525438b6a9161f9c2bf80e495526b8fe10125947/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=525438b6a9161f9c2bf80e495526b8fe10125947", "patch": "@@ -505,6 +505,8 @@ declare_features! (\n     (active, static_nobundle, \"1.16.0\", Some(37403), None),\n     /// Allows attributes on expressions and non-item statements.\n     (active, stmt_expr_attributes, \"1.6.0\", Some(15701), None),\n+    /// Allows lints part of the strict provenance effort.\n+    (active, strict_provenance, \"1.61.0\", Some(95228), None),\n     /// Allows the use of `#[target_feature]` on safe functions.\n     (active, target_feature_11, \"1.45.0\", Some(69098), None),\n     /// Allows using `#[thread_local]` on `static` items."}, {"sha": "89ce307d12cd707f0bc6bc550bf64baf0aea5add", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/525438b6a9161f9c2bf80e495526b8fe10125947/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/525438b6a9161f9c2bf80e495526b8fe10125947/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=525438b6a9161f9c2bf80e495526b8fe10125947", "patch": "@@ -2648,6 +2648,96 @@ declare_lint! {\n     };\n }\n \n+declare_lint! {\n+    /// The `fuzzy_provenance_casts` lint detects an `as` cast between an integer\n+    /// and a pointer.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust\n+    /// #![feature(strict_provenance)]\n+    /// #![warn(fuzzy_provenance_casts)]\n+    ///\n+    /// fn main() {\n+    ///     let _dangling = 16_usize as *const u8;\n+    /// }\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// This lint is part of the strict provenance effort, see [issue #95228].\n+    /// Casting an integer to a pointer is considered bad style, as a pointer\n+    /// contains, besides the *address* also a *provenance*, indicating what\n+    /// memory the pointer is allowed to read/write. Casting an integer, which\n+    /// doesn't have provenance, to a pointer requires the compiler to assign\n+    /// (guess) provenance. The compiler assigns \"all exposed valid\" (see the\n+    /// docs of [`ptr::from_exposed_addr`] for more information about this\n+    /// \"exposing\"). This penalizes the optimiser and is not well suited for\n+    /// dynamic analysis/dynamic program verification (e.g. Miri or CHERI\n+    /// platforms).\n+    ///\n+    /// It is much better to use [`ptr::with_addr`] instead to specify the\n+    /// provenance you want. If using this function is not possible because the\n+    /// code relies on exposed provenance then there is as an escape hatch\n+    /// [`ptr::from_exposed_addr`].\n+    ///\n+    /// [issue #95228]: https://github.com/rust-lang/rust/issues/95228\n+    /// [`ptr::with_addr`]: https://doc.rust-lang.org/core/ptr/fn.with_addr\n+    /// [`ptr::from_exposed_addr`]: https://doc.rust-lang.org/core/ptr/fn.from_exposed_addr\n+    pub FUZZY_PROVENANCE_CASTS,\n+    Allow,\n+    \"a fuzzy integer to pointer cast is used\",\n+    @feature_gate = sym::strict_provenance;\n+}\n+\n+declare_lint! {\n+    /// The `lossy_provenance_casts` lint detects an `as` cast between a pointer\n+    /// and an integer.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust\n+    /// #![feature(strict_provenance)]\n+    /// #![warn(lossy_provenance_casts)]\n+    ///\n+    /// fn main() {\n+    ///     let x: u8 = 37;\n+    ///     let _addr: usize = &x as *const u8 as usize;\n+    /// }\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// This lint is part of the strict provenance effort, see [issue #95228].\n+    /// Casting a pointer to an integer is a lossy operation, because beyond\n+    /// just an *address* a pointer may be associated with a particular\n+    /// *provenance*. This information is used by the optimiser and for dynamic\n+    /// analysis/dynamic program verification (e.g. Miri or CHERI platforms).\n+    ///\n+    /// Since this cast is lossy, it is considered good style to use the\n+    /// [`ptr::addr`] method instead, which has a similar effect, but doesn't\n+    /// \"expose\" the pointer provenance. This improves optimisation potential.\n+    /// See the docs of [`ptr::addr`] and [`ptr::expose_addr`] for more information\n+    /// about exposing pointer provenance.\n+    ///\n+    /// If your code can't comply with strict provenance and needs to expose\n+    /// the provenance, then there is [`ptr::expose_addr`] as an escape hatch,\n+    /// which preserves the behaviour of `as usize` casts while being explicit\n+    /// about the semantics.\n+    ///\n+    /// [issue #95228]: https://github.com/rust-lang/rust/issues/95228\n+    /// [`ptr::addr`]: https://doc.rust-lang.org/core/ptr/fn.addr\n+    /// [`ptr::expose_addr`]: https://doc.rust-lang.org/core/ptr/fn.expose_addr\n+    pub LOSSY_PROVENANCE_CASTS,\n+    Allow,\n+    \"a lossy pointer to integer cast is used\",\n+    @feature_gate = sym::strict_provenance;\n+}\n+\n declare_lint! {\n     /// The `const_evaluatable_unchecked` lint detects a generic constant used\n     /// in a type.\n@@ -3101,6 +3191,8 @@ declare_lint_pass! {\n         UNSAFE_OP_IN_UNSAFE_FN,\n         INCOMPLETE_INCLUDE,\n         CENUM_IMPL_DROP_CAST,\n+        FUZZY_PROVENANCE_CASTS,\n+        LOSSY_PROVENANCE_CASTS,\n         CONST_EVALUATABLE_UNCHECKED,\n         INEFFECTIVE_UNSTABLE_TRAIT_IMPL,\n         MUST_NOT_SUSPEND,"}, {"sha": "dc4d10f699c7517b7e8a900d26c8c6051d369367", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/525438b6a9161f9c2bf80e495526b8fe10125947/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/525438b6a9161f9c2bf80e495526b8fe10125947/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=525438b6a9161f9c2bf80e495526b8fe10125947", "patch": "@@ -1348,6 +1348,7 @@ symbols! {\n         str_trim,\n         str_trim_end,\n         str_trim_start,\n+        strict_provenance,\n         stringify,\n         stringify_macro,\n         struct_field_attributes,"}, {"sha": "6091b8fee00b679f8ad0d57da0146a1696976aff", "filename": "compiler/rustc_typeck/src/check/cast.rs", "status": "modified", "additions": 83, "deletions": 4, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/525438b6a9161f9c2bf80e495526b8fe10125947/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/525438b6a9161f9c2bf80e495526b8fe10125947/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs?ref=525438b6a9161f9c2bf80e495526b8fe10125947", "patch": "@@ -807,11 +807,22 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n \n             // ptr -> *\n             (Ptr(m_e), Ptr(m_c)) => self.check_ptr_ptr_cast(fcx, m_e, m_c), // ptr-ptr-cast\n-            (Ptr(m_expr), Int(_)) => self.check_ptr_addr_cast(fcx, m_expr), // ptr-addr-cast\n-            (FnPtr, Int(_)) => Ok(CastKind::FnPtrAddrCast),\n \n-            // * -> ptr\n-            (Int(_), Ptr(mt)) => self.check_addr_ptr_cast(fcx, mt), // addr-ptr-cast\n+            // ptr-addr-cast\n+            (Ptr(m_expr), Int(t_c)) => {\n+                self.lossy_provenance_ptr2int_lint(fcx, t_c);\n+                self.check_ptr_addr_cast(fcx, m_expr)\n+            }\n+            (FnPtr, Int(_)) => {\n+                // FIXME(#95489): there should eventually be a lint for these casts\n+                Ok(CastKind::FnPtrAddrCast)\n+            }\n+            // addr-ptr-cast\n+            (Int(_), Ptr(mt)) => {\n+                self.fuzzy_provenance_int2ptr_lint(fcx);\n+                self.check_addr_ptr_cast(fcx, mt)\n+            }\n+            // fn-ptr-cast\n             (FnPtr, Ptr(mt)) => self.check_fptr_ptr_cast(fcx, mt),\n \n             // prim -> prim\n@@ -973,6 +984,74 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n             }\n         }\n     }\n+\n+    fn lossy_provenance_ptr2int_lint(&self, fcx: &FnCtxt<'a, 'tcx>, t_c: ty::cast::IntTy) {\n+        fcx.tcx.struct_span_lint_hir(\n+            lint::builtin::LOSSY_PROVENANCE_CASTS,\n+            self.expr.hir_id,\n+            self.span,\n+            |err| {\n+                let mut err = err.build(&format!(\n+                    \"under strict provenance it is considered bad style to cast pointer `{}` to integer `{}`\",\n+                    self.expr_ty, self.cast_ty\n+                ));\n+\n+                let msg = \"use `.addr()` to obtain the address of a pointer\";\n+                if let Ok(snippet) = fcx.tcx.sess.source_map().span_to_snippet(self.expr.span) {\n+                    let scalar_cast = match t_c {\n+                        ty::cast::IntTy::U(ty::UintTy::Usize) => String::new(),\n+                        _ => format!(\" as {}\", self.cast_ty),\n+                    };\n+                    err.span_suggestion(\n+                        self.span,\n+                        msg,\n+                        format!(\"({}).addr(){}\", snippet, scalar_cast),\n+                        Applicability::MaybeIncorrect\n+                    );\n+                } else {\n+                    err.help(msg);\n+                }\n+                err.help(\n+                    \"if you can't comply with strict provenance and need to expose the pointer\\\n+                    provenance you can use `.expose_addr()` instead\"\n+                );\n+\n+                err.emit();\n+            },\n+        );\n+    }\n+\n+    fn fuzzy_provenance_int2ptr_lint(&self, fcx: &FnCtxt<'a, 'tcx>) {\n+        fcx.tcx.struct_span_lint_hir(\n+            lint::builtin::FUZZY_PROVENANCE_CASTS,\n+            self.expr.hir_id,\n+            self.span,\n+            |err| {\n+\n+                let mut err = err.build(&format!(\n+                    \"strict provenance disallows casting integer `{}` to pointer `{}`\",\n+                    self.expr_ty, self.cast_ty\n+                ));\n+                let msg = \"use `.with_addr()` to adjust a valid pointer in the same allocation, to this address\";\n+                if let Ok(snippet) = fcx.tcx.sess.source_map().span_to_snippet(self.expr.span) {\n+                    err.span_suggestion(\n+                        self.span,\n+                        msg,\n+                        format!(\"(...).with_addr({})\", snippet),\n+                        Applicability::HasPlaceholders,\n+                    );\n+                } else {\n+                    err.help(msg);\n+                }\n+                err.help(\n+                    \"if you can't comply with strict provenance and don't have a pointer with \\\n+                    the correct provenance you can use `std::ptr::from_exposed_addr()` instead\"\n+                 );\n+\n+                err.emit();\n+            },\n+        );\n+    }\n }\n \n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {"}, {"sha": "dc60f3f375d3c5b3bfad30fbd210e827380d33dc", "filename": "src/doc/unstable-book/src/language-features/strict-provenance.md", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/525438b6a9161f9c2bf80e495526b8fe10125947/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fstrict-provenance.md", "raw_url": "https://github.com/rust-lang/rust/raw/525438b6a9161f9c2bf80e495526b8fe10125947/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fstrict-provenance.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fstrict-provenance.md?ref=525438b6a9161f9c2bf80e495526b8fe10125947", "patch": "@@ -0,0 +1,22 @@\n+# `strict_provenance`\n+\n+The tracking issue for this feature is: [#95228]\n+\n+[#95228]: https://github.com/rust-lang/rust/issues/95228\n+-----\n+\n+The `strict_provenance` feature allows to enable the `fuzzy_provenance_casts` and `lossy_provenance_casts` lints.\n+These lint on casts between integers and pointers, that are recommended against or invalid in the strict provenance model.\n+The same feature gate is also used for the experimental strict provenance API in `std` (actually `core`).\n+\n+## Example\n+\n+```rust\n+#![feature(strict_provenance)]\n+#![warn(fuzzy_provenance_casts)]\n+\n+fn main() {\n+    let _dangling = 16_usize as *const u8;\n+    //~^ WARNING: strict provenance disallows casting integer `usize` to pointer `*const u8`\n+}\n+```"}, {"sha": "75d0ee5700d075af3f05920c77163935ae01a10c", "filename": "src/test/ui/feature-gates/feature-gate-strict_provenance.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/525438b6a9161f9c2bf80e495526b8fe10125947/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-strict_provenance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/525438b6a9161f9c2bf80e495526b8fe10125947/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-strict_provenance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-strict_provenance.rs?ref=525438b6a9161f9c2bf80e495526b8fe10125947", "patch": "@@ -0,0 +1,19 @@\n+// check-pass\n+\n+#![deny(fuzzy_provenance_casts)]\n+//~^ WARNING unknown lint: `fuzzy_provenance_casts`\n+//~| WARNING unknown lint: `fuzzy_provenance_casts`\n+//~| WARNING unknown lint: `fuzzy_provenance_casts`\n+#![deny(lossy_provenance_casts)]\n+//~^ WARNING unknown lint: `lossy_provenance_casts`\n+//~| WARNING unknown lint: `lossy_provenance_casts`\n+//~| WARNING unknown lint: `lossy_provenance_casts`\n+\n+fn main() {\n+    // no warnings emitted since the lints are not activated\n+\n+    let _dangling = 16_usize as *const u8;\n+\n+    let x: u8 = 37;\n+    let _addr: usize = &x as *const u8 as usize;\n+}"}, {"sha": "34bd240c304a744edc68c084d678286d79fa8193", "filename": "src/test/ui/feature-gates/feature-gate-strict_provenance.stderr", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/525438b6a9161f9c2bf80e495526b8fe10125947/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-strict_provenance.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/525438b6a9161f9c2bf80e495526b8fe10125947/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-strict_provenance.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-strict_provenance.stderr?ref=525438b6a9161f9c2bf80e495526b8fe10125947", "patch": "@@ -0,0 +1,63 @@\n+warning: unknown lint: `fuzzy_provenance_casts`\n+  --> $DIR/feature-gate-strict_provenance.rs:3:1\n+   |\n+LL | #![deny(fuzzy_provenance_casts)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(unknown_lints)]` on by default\n+   = note: the `fuzzy_provenance_casts` lint is unstable\n+   = note: see issue #95228 <https://github.com/rust-lang/rust/issues/95228> for more information\n+   = help: add `#![feature(strict_provenance)]` to the crate attributes to enable\n+\n+warning: unknown lint: `lossy_provenance_casts`\n+  --> $DIR/feature-gate-strict_provenance.rs:7:1\n+   |\n+LL | #![deny(lossy_provenance_casts)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the `lossy_provenance_casts` lint is unstable\n+   = note: see issue #95228 <https://github.com/rust-lang/rust/issues/95228> for more information\n+   = help: add `#![feature(strict_provenance)]` to the crate attributes to enable\n+\n+warning: unknown lint: `fuzzy_provenance_casts`\n+  --> $DIR/feature-gate-strict_provenance.rs:3:1\n+   |\n+LL | #![deny(fuzzy_provenance_casts)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the `fuzzy_provenance_casts` lint is unstable\n+   = note: see issue #95228 <https://github.com/rust-lang/rust/issues/95228> for more information\n+   = help: add `#![feature(strict_provenance)]` to the crate attributes to enable\n+\n+warning: unknown lint: `lossy_provenance_casts`\n+  --> $DIR/feature-gate-strict_provenance.rs:7:1\n+   |\n+LL | #![deny(lossy_provenance_casts)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the `lossy_provenance_casts` lint is unstable\n+   = note: see issue #95228 <https://github.com/rust-lang/rust/issues/95228> for more information\n+   = help: add `#![feature(strict_provenance)]` to the crate attributes to enable\n+\n+warning: unknown lint: `fuzzy_provenance_casts`\n+  --> $DIR/feature-gate-strict_provenance.rs:3:1\n+   |\n+LL | #![deny(fuzzy_provenance_casts)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the `fuzzy_provenance_casts` lint is unstable\n+   = note: see issue #95228 <https://github.com/rust-lang/rust/issues/95228> for more information\n+   = help: add `#![feature(strict_provenance)]` to the crate attributes to enable\n+\n+warning: unknown lint: `lossy_provenance_casts`\n+  --> $DIR/feature-gate-strict_provenance.rs:7:1\n+   |\n+LL | #![deny(lossy_provenance_casts)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the `lossy_provenance_casts` lint is unstable\n+   = note: see issue #95228 <https://github.com/rust-lang/rust/issues/95228> for more information\n+   = help: add `#![feature(strict_provenance)]` to the crate attributes to enable\n+\n+warning: 6 warnings emitted\n+"}, {"sha": "d2d72a68f139676a3d9f20a988348a3b4c1ac7e9", "filename": "src/test/ui/lint/lint-strict-provenance-fuzzy-casts.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/525438b6a9161f9c2bf80e495526b8fe10125947/src%2Ftest%2Fui%2Flint%2Flint-strict-provenance-fuzzy-casts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/525438b6a9161f9c2bf80e495526b8fe10125947/src%2Ftest%2Fui%2Flint%2Flint-strict-provenance-fuzzy-casts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-strict-provenance-fuzzy-casts.rs?ref=525438b6a9161f9c2bf80e495526b8fe10125947", "patch": "@@ -0,0 +1,7 @@\n+#![feature(strict_provenance)]\n+#![deny(fuzzy_provenance_casts)]\n+\n+fn main() {\n+    let dangling = 16_usize as *const u8;\n+    //~^ ERROR strict provenance disallows casting integer `usize` to pointer `*const u8`\n+}"}, {"sha": "e50d243b6ad6db566de4cae586a49cb47d3261e2", "filename": "src/test/ui/lint/lint-strict-provenance-fuzzy-casts.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/525438b6a9161f9c2bf80e495526b8fe10125947/src%2Ftest%2Fui%2Flint%2Flint-strict-provenance-fuzzy-casts.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/525438b6a9161f9c2bf80e495526b8fe10125947/src%2Ftest%2Fui%2Flint%2Flint-strict-provenance-fuzzy-casts.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-strict-provenance-fuzzy-casts.stderr?ref=525438b6a9161f9c2bf80e495526b8fe10125947", "patch": "@@ -0,0 +1,19 @@\n+error: strict provenance disallows casting integer `usize` to pointer `*const u8`\n+  --> $DIR/lint-strict-provenance-fuzzy-casts.rs:5:20\n+   |\n+LL |     let dangling = 16_usize as *const u8;\n+   |                    ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-strict-provenance-fuzzy-casts.rs:2:9\n+   |\n+LL | #![deny(fuzzy_provenance_casts)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^\n+   = help: if you can't comply with strict provenance and don't have a pointer with the correct provenance you can use `std::ptr::from_exposed_addr()` instead\n+help: use `.with_addr()` to adjust a valid pointer in the same allocation, to this address\n+   |\n+LL |     let dangling = (...).with_addr(16_usize);\n+   |                    ~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+error: aborting due to previous error\n+"}, {"sha": "3690fbc904d9933927825de609ffba6f6c8b74ee", "filename": "src/test/ui/lint/lint-strict-provenance-lossy-casts.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/525438b6a9161f9c2bf80e495526b8fe10125947/src%2Ftest%2Fui%2Flint%2Flint-strict-provenance-lossy-casts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/525438b6a9161f9c2bf80e495526b8fe10125947/src%2Ftest%2Fui%2Flint%2Flint-strict-provenance-lossy-casts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-strict-provenance-lossy-casts.rs?ref=525438b6a9161f9c2bf80e495526b8fe10125947", "patch": "@@ -0,0 +1,11 @@\n+#![feature(strict_provenance)]\n+#![deny(lossy_provenance_casts)]\n+\n+fn main() {\n+    let x: u8 = 37;\n+    let addr: usize = &x as *const u8 as usize;\n+    //~^ ERROR under strict provenance it is considered bad style to cast pointer `*const u8` to integer `usize`\n+\n+    let addr_32bit = &x as *const u8 as u32;\n+    //~^ ERROR under strict provenance it is considered bad style to cast pointer `*const u8` to integer `u32`\n+}"}, {"sha": "489cb03ddd316352b922a8420619a4f7cc7cf607", "filename": "src/test/ui/lint/lint-strict-provenance-lossy-casts.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/525438b6a9161f9c2bf80e495526b8fe10125947/src%2Ftest%2Fui%2Flint%2Flint-strict-provenance-lossy-casts.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/525438b6a9161f9c2bf80e495526b8fe10125947/src%2Ftest%2Fui%2Flint%2Flint-strict-provenance-lossy-casts.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-strict-provenance-lossy-casts.stderr?ref=525438b6a9161f9c2bf80e495526b8fe10125947", "patch": "@@ -0,0 +1,23 @@\n+error: under strict provenance it is considered bad style to cast pointer `*const u8` to integer `usize`\n+  --> $DIR/lint-strict-provenance-lossy-casts.rs:6:23\n+   |\n+LL |     let addr: usize = &x as *const u8 as usize;\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.addr()` to obtain the address of a pointer: `(&x as *const u8).addr()`\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-strict-provenance-lossy-casts.rs:2:9\n+   |\n+LL | #![deny(lossy_provenance_casts)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^\n+   = help: if you can't comply with strict provenance and need to expose the pointerprovenance you can use `.expose_addr()` instead\n+\n+error: under strict provenance it is considered bad style to cast pointer `*const u8` to integer `u32`\n+  --> $DIR/lint-strict-provenance-lossy-casts.rs:9:22\n+   |\n+LL |     let addr_32bit = &x as *const u8 as u32;\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^ help: use `.addr()` to obtain the address of a pointer: `(&x as *const u8).addr() as u32`\n+   |\n+   = help: if you can't comply with strict provenance and need to expose the pointerprovenance you can use `.expose_addr()` instead\n+\n+error: aborting due to 2 previous errors\n+"}]}