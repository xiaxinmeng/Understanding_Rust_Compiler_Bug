{"sha": "31563f53d9237c21423533c16a15c37b10a6f418", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxNTYzZjUzZDkyMzdjMjE0MjM1MzNjMTZhMTVjMzdiMTBhNmY0MTg=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-03-29T16:06:36Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-03-29T16:06:36Z"}, "message": "Merge remote-tracking branch 'remotes/origin/incoming' into serial", "tree": {"sha": "48f404b5938d867d42b60e9276bf9d639e93d5d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48f404b5938d867d42b60e9276bf9d639e93d5d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/31563f53d9237c21423533c16a15c37b10a6f418", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/31563f53d9237c21423533c16a15c37b10a6f418", "html_url": "https://github.com/rust-lang/rust/commit/31563f53d9237c21423533c16a15c37b10a6f418", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/31563f53d9237c21423533c16a15c37b10a6f418/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1a83e6986470d2db81474bb7fd3eadada78b0a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1a83e6986470d2db81474bb7fd3eadada78b0a4", "html_url": "https://github.com/rust-lang/rust/commit/d1a83e6986470d2db81474bb7fd3eadada78b0a4"}, {"sha": "5da9e12778ddafb46e4a5013dd133af98f3dfb98", "url": "https://api.github.com/repos/rust-lang/rust/commits/5da9e12778ddafb46e4a5013dd133af98f3dfb98", "html_url": "https://github.com/rust-lang/rust/commit/5da9e12778ddafb46e4a5013dd133af98f3dfb98"}], "stats": {"total": 690, "additions": 362, "deletions": 328}, "files": [{"sha": "922fad82f39d221ab2823b6a60beaa3e8ac3fcf8", "filename": "doc/tutorial-tasks.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/doc%2Ftutorial-tasks.md", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/doc%2Ftutorial-tasks.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial-tasks.md?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -188,7 +188,7 @@ spawns the child task.\n \n ~~~~\n # use core::task::spawn;\n-# use core::comm::{stream, Port, Chan};\n+# use core::comm::stream;\n # fn some_expensive_computation() -> int { 42 }\n # let (port, chan) = stream();\n do spawn || {\n@@ -208,7 +208,7 @@ computation, then waits for the child's result to arrive on the\n port:\n \n ~~~~\n-# use core::comm::{stream, Port, Chan};\n+# use core::comm::{stream};\n # fn some_other_expensive_computation() {}\n # let (port, chan) = stream::<int>();\n # chan.send(0);\n@@ -277,7 +277,7 @@ might look like the example below.\n \n ~~~\n # use core::task::spawn;\n-# use core::comm::{stream, Port, Chan};\n+# use core::comm::stream;\n \n // Create a vector of ports, one for each child task\n let ports = do vec::from_fn(3) |init_val| {"}, {"sha": "9f36786648aba9083200f45fe23b993dd87e3d78", "filename": "doc/tutorial.md", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -875,8 +875,7 @@ the compiler that unsafety does not leak outside of the unsafe block, and is\n used to create safe concepts on top of low-level code.\n \n ~~~~\n-use core::libc::funcs::c95::stdlib::{calloc, free};\n-use core::libc::types::os::arch::c95::size_t;\n+use core::libc::{calloc, free, size_t};\n \n fn main() {\n     unsafe {\n@@ -909,9 +908,7 @@ The unsafe code from above can be contained behind a safe API that prevents\n memory leaks or use-after-free:\n \n ~~~~\n-use core::libc::funcs::c95::stdlib::{calloc, free};\n-use core::libc::types::common::c95::c_void;\n-use core::libc::types::os::arch::c95::size_t;\n+use core::libc::{calloc, free, c_void, size_t};\n \n struct Blob { priv ptr: *c_void }\n \n@@ -985,7 +982,9 @@ when it is collected.\n \n If an object doesn't contain garbage-collected boxes, it consists of a single\n ownership tree and is given the `Owned` trait which allows it to be sent\n-between tasks.\n+between tasks. Custom destructors can only be implemented directly on types\n+that are `Owned`, but garbage-collected boxes can still *contain* types with\n+custom destructors.\n \n # Boxes\n "}, {"sha": "3302b353d69aab6d1229f8176712f319c62cd0e3", "filename": "src/compiletest/procsrv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Fcompiletest%2Fprocsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Fcompiletest%2Fprocsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fprocsrv.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -12,7 +12,7 @@ use core::prelude::*;\n \n use core::io::{ReaderUtil, WriterUtil};\n use core::io;\n-use core::libc::{c_int, pid_t};\n+use core::libc::c_int;\n use core::os;\n use core::run::spawn_process;\n use core::run;"}, {"sha": "a07c6b4811b6c5371ac460b1126f77a346014bec", "filename": "src/libcore/cleanup.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibcore%2Fcleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibcore%2Fcleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcleanup.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -11,11 +11,13 @@\n #[doc(hidden)];\n \n use libc::{c_char, c_void, intptr_t, uintptr_t};\n-use ptr::{mut_null, null, to_unsafe_ptr};\n+use ptr::mut_null;\n use repr::BoxRepr;\n use sys::TypeDesc;\n use cast::transmute;\n \n+#[cfg(notest)] use ptr::to_unsafe_ptr;\n+\n /**\n  * Runtime structures\n  *"}, {"sha": "731ef42599538b490dc04294d20f75e854082dd0", "filename": "src/libcore/comm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibcore%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibcore%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcomm.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -429,7 +429,7 @@ pub fn try_send_one<T: Owned>(chan: ChanOne<T>, data: T)\n \n #[cfg(test)]\n pub mod test {\n-    use either::{Either, Left, Right};\n+    use either::Right;\n     use super::{Chan, Port, oneshot, recv_one, stream};\n \n     #[test]"}, {"sha": "2f35c1e0bb15ed0dfd143a9a983ac3b588a39c06", "filename": "src/libcore/gc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibcore%2Fgc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibcore%2Fgc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fgc.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -38,7 +38,7 @@ with destructors.\n */\n \n use cast;\n-use container::{Container, Mutable, Map, Set};\n+use container::{Map, Set};\n use io;\n use libc::{size_t, uintptr_t};\n use option::{None, Option, Some};"}, {"sha": "10abaf04912cca4c039bccc8500474bfeb68aeec", "filename": "src/libcore/hash.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibcore%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibcore%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -20,7 +20,7 @@\n  */\n \n use io;\n-use io::{Writer, WriterUtil};\n+use io::Writer;\n use to_bytes::IterBytes;\n use uint;\n use vec;"}, {"sha": "aa75a77b334a988c1a2cc44e3310a14aec82626e", "filename": "src/libcore/hashmap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibcore%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibcore%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhashmap.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -681,7 +681,7 @@ pub mod linear {\n \n     #[test]\n     mod test_map {\n-        use container::{Container, Mutable, Map, Set};\n+        use container::{Container, Map, Set};\n         use option::{None, Some};\n         use hashmap::linear::LinearMap;\n         use hashmap::linear;\n@@ -859,7 +859,7 @@ pub mod linear {\n #[test]\n     mod test_set {\n         use hashmap::linear;\n-        use container::{Container, Mutable, Map, Set};\n+        use container::{Container, Map, Set};\n         use vec;\n \n         #[test]"}, {"sha": "aedbbd6e29828d9c74c97846d27592d28931cbc6", "filename": "src/libcore/io.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibcore%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibcore%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fio.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -18,7 +18,7 @@ use result::Result;\n \n use int;\n use libc;\n-use libc::{c_int, c_long, c_uint, c_void, size_t, ssize_t};\n+use libc::{c_int, c_long, c_void, size_t, ssize_t};\n use libc::consts::os::posix88::*;\n use os;\n use cast;"}, {"sha": "0aec9f08cb4b5c486a77870f0d62df0b5c0483a1", "filename": "src/libcore/num/float.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibcore%2Fnum%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibcore%2Fnum%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ffloat.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -24,12 +24,13 @@ use f64;\n use num::NumCast;\n use num::strconv;\n use num;\n-use option::{None, Option, Some};\n+use option::Option;\n use to_str;\n use from_str;\n \n #[cfg(notest)] use cmp::{Eq, Ord};\n #[cfg(notest)] use ops;\n+#[cfg(test)] use option::{Some, None};\n \n pub use f64::{add, sub, mul, div, rem, lt, le, eq, ne, ge, gt};\n pub use f64::logarithm;"}, {"sha": "0fe96c8b3442e32e7f81ac13bdcd3d3393148189", "filename": "src/libcore/num/num.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibcore%2Fnum%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibcore%2Fnum%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fnum.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -9,9 +9,9 @@\n // except according to those terms.\n \n //! An interface for numeric types\n-use cmp::{Ord, Eq};\n-use ops::{Add, Div, Modulo, Mul, Neg, Sub};\n-use option::{None, Option, Some};\n+use cmp::Ord;\n+use ops::{Div, Mul, Neg};\n+use option::Option;\n use kinds::Copy;\n \n pub mod strconv;"}, {"sha": "410799f43ce877b84bba2d55c311d25ed9585419", "filename": "src/libcore/num/uint-template.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibcore%2Fnum%2Fuint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibcore%2Fnum%2Fuint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fuint-template.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -16,7 +16,7 @@ use from_str::FromStr;\n use num::{ToStrRadix, FromStrRadix};\n use num::strconv;\n use num;\n-use option::{None, Option, Some};\n+use option::Option;\n use prelude::*;\n \n #[cfg(notest)] use cmp::{Eq, Ord};"}, {"sha": "fa10f39c90d087a53bb324ac790c6c3844ae4dd7", "filename": "src/libcore/os.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibcore%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibcore%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fos.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -29,7 +29,7 @@\n use cast;\n use io;\n use libc;\n-use libc::{c_char, c_void, c_int, c_uint, size_t, ssize_t};\n+use libc::{c_char, c_void, c_int, size_t};\n use libc::{mode_t, pid_t, FILE};\n use option;\n use option::{Some, None};\n@@ -397,7 +397,7 @@ pub fn pipe() -> Pipe {\n         // first, as in rust_run_program.\n         let mut fds = Pipe {in: 0 as c_int,\n                     out: 0 as c_int };\n-        let res = libc::pipe(&mut fds.in, 1024 as c_uint,\n+        let res = libc::pipe(&mut fds.in, 1024 as ::libc::c_uint,\n                              (libc::O_BINARY | libc::O_NOINHERIT) as c_int);\n         fail_unless!((res == 0 as c_int));\n         fail_unless!((fds.in != -1 as c_int && fds.in != 0 as c_int));\n@@ -431,7 +431,7 @@ pub fn self_exe_path() -> Option<Path> {\n                            KERN_PROC as c_int,\n                            KERN_PROC_PATHNAME as c_int, -1 as c_int];\n                 let mut sz = sz;\n-                sysctl(vec::raw::to_ptr(mib), vec::len(mib) as c_uint,\n+                sysctl(vec::raw::to_ptr(mib), vec::len(mib) as ::libc::c_uint,\n                        buf as *mut c_void, &mut sz, ptr::null(),\n                        0u as size_t) == (0 as c_int)\n             }\n@@ -670,7 +670,7 @@ pub fn list_dir(p: &Path) -> ~[~str] {\n         #[cfg(target_os = \"freebsd\")]\n         #[cfg(target_os = \"macos\")]\n         unsafe fn get_list(p: &Path) -> ~[~str] {\n-            use libc::{DIR, dirent_t};\n+            use libc::{dirent_t};\n             use libc::{opendir, readdir, closedir};\n             extern mod rustrt {\n                 unsafe fn rust_list_dir_val(ptr: *dirent_t)\n@@ -1257,7 +1257,7 @@ pub mod consts {\n mod tests {\n     use libc::{c_int, c_void, size_t};\n     use libc;\n-    use option::{None, Option, Some};\n+    use option::Some;\n     use option;\n     use os::{as_c_charp, env, getcwd, getenv, make_absolute, real_args};\n     use os::{remove_file, setenv};"}, {"sha": "132ac11566d6f5ec47105da5e8d03ba4f651ae67", "filename": "src/libcore/pipes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibcore%2Fpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibcore%2Fpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpipes.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -958,9 +958,9 @@ pub mod rt {\n \n #[cfg(test)]\n pub mod test {\n-    use either::{Either, Left, Right};\n+    use either::Right;\n     use comm::{Chan, Port, oneshot, recv_one, stream, Select2,\n-               GenericPort, GenericChan, Peekable};\n+               GenericChan, Peekable};\n \n     #[test]\n     pub fn test_select2() {"}, {"sha": "9c3bf04b2a8f501bc5ae3c6893119c582efa8f9a", "filename": "src/libcore/prelude.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibcore%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibcore%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprelude.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -21,6 +21,10 @@ pub use ops::{Shl, Shr, Index};\n pub use option::{Option, Some, None};\n pub use result::{Result, Ok, Err};\n \n+/* Reexported functions */\n+\n+pub use io::{print, println};\n+\n /* Reexported types and traits */\n \n pub use clone::Clone;"}, {"sha": "ecc60f61e183552722c7be2550802df453f514d7", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -13,7 +13,6 @@\n use cast;\n use libc;\n use libc::{c_void, size_t};\n-use unstable::intrinsics::{memmove32,memmove64};\n use sys;\n \n #[cfg(test)] use vec;\n@@ -116,12 +115,14 @@ pub fn is_not_null<T>(ptr: *const T) -> bool { !is_null(ptr) }\n #[inline(always)]\n #[cfg(target_word_size = \"32\")]\n pub unsafe fn copy_memory<T>(dst: *mut T, src: *const T, count: uint) {\n+    use unstable::intrinsics::memmove32;\n     let n = count * sys::size_of::<T>();\n     memmove32(dst as *mut u8, src as *u8, n as u32);\n }\n #[inline(always)]\n #[cfg(target_word_size = \"64\")]\n pub unsafe fn copy_memory<T>(dst: *mut T, src: *const T, count: uint) {\n+    use unstable::intrinsics::memmove64;\n     let n = count * sys::size_of::<T>();\n     memmove64(dst as *mut u8, src as *u8, n as u64);\n }"}, {"sha": "687d9030d45e77542109991e6e03fb1e513378d8", "filename": "src/libcore/rand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibcore%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibcore%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frand.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -574,7 +574,7 @@ pub fn random() -> uint {\n \n #[cfg(test)]\n pub mod tests {\n-    use option::{None, Option, Some};\n+    use option::{Option, Some};\n     use rand;\n \n     #[test]"}, {"sha": "3e11febc5bfaa7e8b4a8d5997e67a8732316b3b6", "filename": "src/libcore/reflect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibcore%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibcore%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Freflect.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -14,7 +14,7 @@ Runtime type reflection\n \n */\n \n-use intrinsic::{TyDesc, get_tydesc, visit_tydesc, TyVisitor};\n+use intrinsic::{TyDesc, TyVisitor};\n use libc::c_void;\n use sys;\n use vec;"}, {"sha": "de3c81b5361ed24a501775ee5c83ab180b6f4900", "filename": "src/libcore/repr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibcore%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibcore%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frepr.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -23,7 +23,7 @@ use libc::c_void;\n use managed;\n use ptr;\n use reflect;\n-use reflect::{MovePtr, MovePtrAdaptor, align};\n+use reflect::{MovePtr, align};\n use sys;\n use to_str::ToStr;\n use vec::UnboxedVecRepr;"}, {"sha": "224f28a0329f82392846b1d54b048bef4b18ede0", "filename": "src/libcore/rt/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibcore%2Frt%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibcore%2Frt%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fcontext.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -160,7 +160,7 @@ fn initialize_call_frame(regs: &mut Registers, fptr: *c_void, arg: *c_void, sp:\n type Registers = [uint, ..32];\n \n #[cfg(target_arch = \"arm\")]\n-fn new_regs() -> ~Registers { ~[0, .. 32] }\n+fn new_regs() -> ~Registers { ~([0, .. 32]) }\n \n #[cfg(target_arch = \"arm\")]\n fn initialize_call_frame(regs: &mut Registers, fptr: *c_void, arg: *c_void, sp: *mut uint) {\n@@ -178,7 +178,7 @@ fn initialize_call_frame(regs: &mut Registers, fptr: *c_void, arg: *c_void, sp:\n type Registers = [uint, ..32];\n \n #[cfg(target_arch = \"mips\")]\n-fn new_regs() -> ~Registers { ~[0, .. 32] }\n+fn new_regs() -> ~Registers { ~([0, .. 32]) }\n \n #[cfg(target_arch = \"mips\")]\n fn initialize_call_frame(regs: &mut Registers, fptr: *c_void, arg: *c_void, sp: *mut uint) {"}, {"sha": "b7f3ed280a84555a2ff568bb7964985f3a3c52c8", "filename": "src/libcore/rt/io/file.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibcore%2Frt%2Fio%2Ffile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibcore%2Frt%2Fio%2Ffile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fio%2Ffile.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -9,8 +9,6 @@\n // except according to those terms.\n \n use prelude::*;\n-use super::super::sched::*;\n-use super::super::rtio::*;\n use super::Stream;\n \n pub struct FileStream;"}, {"sha": "80635560380ab102e559183ac0ba3760a71b3c73", "filename": "src/libcore/rt/thread_local_storage.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibcore%2Frt%2Fthread_local_storage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibcore%2Frt%2Fthread_local_storage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fthread_local_storage.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use libc::{c_void};\n+use libc::c_void;\n #[cfg(unix)]\n-use libc::{c_uint, c_ulong, c_int};\n+use libc::c_int;\n #[cfg(unix)]\n use ptr::null;\n #[cfg(windows)]\n@@ -36,13 +36,13 @@ pub unsafe fn get(key: Key) -> *mut c_void {\n \n #[cfg(target_os=\"macos\")]\n #[allow(non_camel_case_types)] // foreign type\n-type pthread_key_t = c_ulong;\n+type pthread_key_t = ::libc::c_ulong;\n \n #[cfg(target_os=\"linux\")]\n #[cfg(target_os=\"freebsd\")]\n #[cfg(target_os=\"android\")]\n #[allow(non_camel_case_types)] // foreign type\n-type pthread_key_t = c_uint;\n+type pthread_key_t = ::libc::c_uint;\n \n #[cfg(unix)]\n extern {"}, {"sha": "2bd5023f22fa5dfdd1660b5357e1da727cb22ed7", "filename": "src/libcore/rt/uv/mod.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibcore%2Frt%2Fuv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibcore%2Frt%2Fuv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fuv%2Fmod.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -39,16 +39,13 @@ use str::raw::from_c_str;\n use to_str::ToStr;\n use vec;\n use ptr;\n-use libc::{c_void, c_int, size_t, malloc, free, ssize_t};\n-use cast::{transmute, transmute_mut_region};\n+use libc::{c_void, c_int, size_t, malloc, free};\n+use cast::transmute;\n use ptr::null;\n use super::uvll;\n-use super::uvll::*;\n use unstable::finally::Finally;\n \n #[cfg(test)] use unstable::run_in_bare_thread;\n-#[cfg(test)] use super::thread::Thread;\n-#[cfg(test)] use cell::Cell;\n \n pub use self::file::{FsRequest, FsCallback};\n pub use self::net::{StreamWatcher, TcpWatcher};"}, {"sha": "697b4ad94c1df9f40fcacfcb539e9e81019204fb", "filename": "src/libcore/rt/uv/net.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibcore%2Frt%2Fuv%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibcore%2Frt%2Fuv%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fuv%2Fnet.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -10,7 +10,7 @@\n \n use prelude::*;\n use libc::{size_t, ssize_t, c_int, c_void};\n-use cast::{transmute, transmute_mut_region};\n+use cast::transmute_mut_region;\n use super::super::uvll;\n use super::super::uvll::*;\n use super::{Loop, Watcher, Request, UvError, Buf, Callback, NativeHandle, NullCallback,"}, {"sha": "959ab23a46193aa16f32d97a24a05dab1bf87311", "filename": "src/libcore/run.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibcore%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibcore%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frun.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -458,7 +458,7 @@ pub fn waitpid(pid: pid_t) -> int {\n \n #[cfg(test)]\n mod tests {\n-    use option::{None, Some};\n+    use option::None;\n     use os;\n     use run::{readclose, writeclose};\n     use run;"}, {"sha": "f73202e16ede4801b9c7848db8dba954a8ea626e", "filename": "src/libcore/str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -21,7 +21,7 @@ use at_vec;\n use cast;\n use char;\n use clone::Clone;\n-use cmp::{Equiv, TotalEq, TotalOrd, Ordering, Less, Equal, Greater};\n+use cmp::{TotalOrd, Ordering, Less, Equal, Greater};\n use libc;\n use option::{None, Option, Some};\n use ptr;\n@@ -31,7 +31,7 @@ use uint;\n use vec;\n use to_str::ToStr;\n \n-#[cfg(notest)] use cmp::{Eq, Ord};\n+#[cfg(notest)] use cmp::{Eq, Ord, Equiv, TotalEq};\n \n /*\n Section: Creating a string"}, {"sha": "0cd78d4b847d13c4b7b529e1fd7c63771f3f985c", "filename": "src/libcore/task/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibcore%2Ftask%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibcore%2Ftask%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fmod.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -36,13 +36,15 @@\n use cell::Cell;\n use cmp::Eq;\n use result::Result;\n-use comm::{stream, Chan, GenericChan, GenericPort, Port, SharedChan};\n+use comm::{stream, Chan, GenericChan, GenericPort, Port};\n use prelude::*;\n use result;\n use task::rt::{task_id, sched_id, rust_task};\n use util;\n use util::replace;\n \n+#[cfg(test)] use comm::SharedChan;\n+\n mod local_data_priv;\n pub mod local_data;\n pub mod rt;"}, {"sha": "fcd5ac7cdbb6ed0e42995c60a5a370b37ea3665c", "filename": "src/libcore/task/spawn.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibcore%2Ftask%2Fspawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibcore%2Ftask%2Fspawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fspawn.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -75,7 +75,7 @@\n use cast;\n use cell::Cell;\n use container::Map;\n-use comm::{Chan, GenericChan, GenericPort, Port, stream};\n+use comm::{Chan, GenericChan};\n use prelude::*;\n use unstable;\n use ptr;\n@@ -86,10 +86,12 @@ use task::rt;\n use task::{Failure, ManualThreads, PlatformThread, SchedOpts, SingleThreaded};\n use task::{Success, TaskOpts, TaskResult, ThreadPerCore, ThreadPerTask};\n use task::{ExistingScheduler, SchedulerHandle};\n-use task::{default_task_opts, unkillable};\n+use task::unkillable;\n use uint;\n use util;\n \n+#[cfg(test)] use task::default_task_opts;\n+\n macro_rules! move_it (\n     { $x:expr } => ( unsafe { let y = *ptr::addr_of(&($x)); y } )\n )"}, {"sha": "6da3dfc262882076e3db563925e62b8ea3940c21", "filename": "src/libcore/unstable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibcore%2Funstable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibcore%2Funstable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funstable.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -15,7 +15,7 @@ use libc;\n use comm::{GenericChan, GenericPort};\n use prelude::*;\n use task;\n-use task::{TaskBuilder, atomically};\n+use task::atomically;\n \n #[path = \"unstable/at_exit.rs\"]\n pub mod at_exit;"}, {"sha": "f85f62011078f537308df6bdf7aee0a60e9310c1", "filename": "src/libcore/unstable/at_exit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibcore%2Funstable%2Fat_exit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibcore%2Funstable%2Fat_exit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funstable%2Fat_exit.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use cast;\n-use libc::{c_void, size_t};\n+use libc::size_t;\n use rand::RngUtil;\n use rand;\n use sys;"}, {"sha": "7863d5d241c2990b8c8117b694d1112242f1be94", "filename": "src/libcore/unstable/exchange_alloc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibcore%2Funstable%2Fexchange_alloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibcore%2Funstable%2Fexchange_alloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funstable%2Fexchange_alloc.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use sys::{TypeDesc, size_of};\n-use libc::{c_void, size_t, uintptr_t};\n+use libc::{c_void, size_t};\n use c_malloc = libc::malloc;\n use c_free = libc::free;\n use managed::raw::{BoxHeaderRepr, BoxRepr};"}, {"sha": "794ac0c85af614c384b459e503602246db335448", "filename": "src/libcore/unstable/global.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibcore%2Funstable%2Fglobal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibcore%2Funstable%2Fglobal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funstable%2Fglobal.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -28,7 +28,7 @@ avoid hitting the mutex.\n use cast::{transmute, reinterpret_cast};\n use clone::Clone;\n use kinds::Owned;\n-use libc::{c_void, uintptr_t};\n+use libc::{c_void};\n use option::{Option, Some, None};\n use ops::Drop;\n use unstable::{Exclusive, exclusive};"}, {"sha": "6de324f3101312687c545541492a92f2d2a8bd7d", "filename": "src/libcore/unstable/weak_task.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibcore%2Funstable%2Fweak_task.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibcore%2Funstable%2Fweak_task.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funstable%2Fweak_task.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -27,7 +27,9 @@ use unstable::at_exit::at_exit;\n use unstable::finally::Finally;\n use unstable::global::global_data_clone_create;\n use task::rt::{task_id, get_task_id};\n-use task::{Task, task, spawn};\n+use task::task;\n+\n+#[cfg(test)] use task::spawn;\n \n type ShutdownMsg = ();\n "}, {"sha": "f6528564538d687c026a5a315cb7bbcbfd3a7c41", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -14,7 +14,7 @@\n \n use container::{Container, Mutable};\n use cast;\n-use cmp::{Eq, Equiv, Ord, TotalEq, TotalOrd, Ordering, Less, Equal, Greater};\n+use cmp::{Eq, Ord, TotalEq, TotalOrd, Ordering, Less, Equal, Greater};\n use clone::Clone;\n use iter::BaseIter;\n use iter;\n@@ -28,6 +28,8 @@ use sys;\n use uint;\n use vec;\n \n+#[cfg(notest)] use cmp::Equiv;\n+\n pub mod rustrt {\n     use libc;\n     use sys;"}, {"sha": "1c85536d195486af00e12ead3181bb956b624af5", "filename": "src/libfuzzer/fuzzer.rc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibfuzzer%2Ffuzzer.rc", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibfuzzer%2Ffuzzer.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfuzzer%2Ffuzzer.rc?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -33,7 +33,7 @@ extern mod syntax(vers = \"0.6\");\n use core::*;\n use core::io::WriterUtil;\n \n-use syntax::{ast, ast_util, fold, visit, codemap};\n+use syntax::{ast, fold, visit, codemap};\n use syntax::parse;\n use syntax::print::pprust;\n use syntax::diagnostic;"}, {"sha": "807ea7d492d600d2e84f7f4d0c7f409c77c3e3bb", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -14,7 +14,7 @@ use back::rpath;\n use driver::session::Session;\n use driver::session;\n use lib::llvm::llvm;\n-use lib::llvm::{ModuleRef, mk_pass_manager, mk_target_data, True, False};\n+use lib::llvm::ModuleRef;\n use lib;\n use metadata::common::LinkMeta;\n use metadata::{encoder, csearch, cstore};\n@@ -25,7 +25,7 @@ use util::ppaux;\n use core::char;\n use core::hash::Streaming;\n use core::hash;\n-use core::io::{Writer, WriterUtil};\n+use core::io::WriterUtil;\n use core::libc::{c_int, c_uint, c_char};\n use core::os::consts::{macos, freebsd, linux, android, win32};\n use core::os;\n@@ -86,7 +86,7 @@ pub mod jit {\n     use back::link::llvm_err;\n     use driver::session::Session;\n     use lib::llvm::llvm;\n-    use lib::llvm::{ModuleRef, PassManagerRef, mk_target_data};\n+    use lib::llvm::{ModuleRef, PassManagerRef};\n     use metadata::cstore;\n \n     use core::cast;\n@@ -171,11 +171,11 @@ pub mod write {\n     use driver::session::Session;\n     use driver::session;\n     use lib::llvm::llvm;\n-    use lib::llvm::{False, True, ModuleRef, mk_pass_manager, mk_target_data};\n+    use lib::llvm::{False, ModuleRef, mk_pass_manager, mk_target_data};\n     use lib;\n \n     use core::prelude::*;\n-    use core::libc::{c_char, c_int, c_uint};\n+    use core::libc::{c_int, c_uint};\n     use core::path::Path;\n     use core::str;\n     use core::run;"}, {"sha": "4cdd279e2fc25ff1303c0241a1b95e019869e569", "filename": "src/librustc/back/upcall.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fback%2Fupcall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fback%2Fupcall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Fupcall.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -11,11 +11,8 @@\n \n use driver::session;\n use middle::trans::base;\n-use middle::trans::common::{T_fn, T_i1, T_i8, T_i32,\n-                               T_int, T_nil,\n-                               T_opaque_vec, T_ptr, T_unique_ptr,\n-                               T_size_t, T_void, T_vec2};\n-use lib::llvm::{TypeNames, ModuleRef, ValueRef, TypeRef};\n+use middle::trans::common::{T_fn, T_i8, T_i32, T_int, T_ptr, T_void};\n+use lib::llvm::{ModuleRef, ValueRef, TypeRef};\n \n pub struct Upcalls {\n     trace: ValueRef,"}, {"sha": "3aa0959317a4aa35ae838bf2a8f677d9792a9684", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -13,7 +13,7 @@ use core::prelude::*;\n use back::link;\n use back::{arm, x86, x86_64, mips};\n use driver::session::{Aggressive};\n-use driver::session::{Session, Session_, OptLevel, No, Less, Default};\n+use driver::session::{Session, Session_, No, Less, Default};\n use driver::session;\n use front;\n use lib::llvm::llvm;"}, {"sha": "fa79217619df66d1360c7dcd692a9e48293c94e0", "filename": "src/librustc/lib/llvm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib%2Fllvm.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -11,7 +11,7 @@\n use core::prelude::*;\n \n use core::hashmap::linear::LinearMap;\n-use core::libc::{c_char, c_int, c_uint, c_longlong, c_ulonglong};\n+use core::libc::c_uint;\n use core::option;\n use core::ptr;\n use core::str;\n@@ -223,7 +223,7 @@ pub enum SectionIterator_opaque {}\n pub type SectionIteratorRef = *SectionIterator_opaque;\n \n pub mod llvm {\n-    use super::{AsmDialect, AtomicBinOp, AtomicOrdering, BasicBlockRef};\n+    use super::{AtomicBinOp, AtomicOrdering, BasicBlockRef};\n     use super::{Bool, BuilderRef, ContextRef, MemoryBufferRef, ModuleRef};\n     use super::{ObjectFileRef, Opcode, PassManagerRef, PassManagerBuilderRef};\n     use super::{SectionIteratorRef, TargetDataRef, TypeKind, TypeRef, UseRef};"}, {"sha": "3a6e567cdbce549921a8d0c29ae4e68c14b6eec6", "filename": "src/librustc/metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcreader.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -26,7 +26,7 @@ use syntax::codemap::{span, dummy_sp};\n use syntax::diagnostic::span_handler;\n use syntax::parse::token::ident_interner;\n use syntax::visit;\n-use syntax::{ast, ast_util};\n+use syntax::ast;\n \n // Traverses an AST, reading all the information about use'd crates and extern\n // libraries necessary for later resolving, typechecking, linking, etc."}, {"sha": "51cc964e460d853c20764094d510bfcccb1b5a18", "filename": "src/librustc/metadata/cstore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcstore.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -20,7 +20,7 @@ use metadata::decoder;\n use core::hashmap::linear::LinearMap;\n use core::vec;\n use std;\n-use syntax::{ast, attr};\n+use syntax::ast;\n use syntax::parse::token::ident_interner;\n \n // A map from external crate numbers (as decoded from some crate file) to"}, {"sha": "29161a6db6425f0600b47257dcdac95a536641a1", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -22,7 +22,7 @@ use metadata::decoder;\n use metadata::tydecode::{parse_ty_data, parse_def_id, parse_bounds_data};\n use middle::{ty, resolve};\n \n-use core::hash::{Hash, HashUtil};\n+use core::hash::HashUtil;\n use core::int;\n use core::io::WriterUtil;\n use core::io;"}, {"sha": "8c90ec3f7f393166924af3a375b14e12c871225f", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -24,8 +24,8 @@ use middle;\n use util::ppaux::ty_to_str;\n \n use core::flate;\n-use core::hash::{Hash, HashUtil};\n-use core::hashmap::linear::{LinearMap, LinearSet};\n+use core::hash::HashUtil;\n+use core::hashmap::linear::LinearMap;\n use core::int;\n use core::io::{Writer, WriterUtil};\n use core::io;"}, {"sha": "823d8e58d11085964ecb0fb10a28ce3e654405d7", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -23,7 +23,7 @@ use core::uint;\n use core::vec;\n use syntax::ast;\n use syntax::ast::*;\n-use syntax::codemap::{respan, dummy_sp};\n+use syntax::codemap::dummy_sp;\n use syntax::opt_vec;\n \n // Compact string representation for ty::t values. API ty_str &"}, {"sha": "e54036e66c0f6c3c16ed4c5b8b2c9169f6572d7a", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -13,7 +13,7 @@\n \n use core::prelude::*;\n \n-use middle::ty::{Vid, param_ty};\n+use middle::ty::param_ty;\n use middle::ty;\n \n use core::hashmap::linear::LinearMap;\n@@ -24,7 +24,6 @@ use core::vec;\n use syntax::ast::*;\n use syntax::diagnostic::span_handler;\n use syntax::print::pprust::*;\n-use middle::ty::Vid;\n \n pub struct ctxt {\n     diag: @span_handler,"}, {"sha": "f480ccd6241df74a0b9d1768f050715fd8806677", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -20,7 +20,7 @@ use metadata::tydecode;\n use metadata::tydecode::{DefIdSource, NominalType, TypeWithId, TypeParameter};\n use metadata::tyencode;\n use middle::freevars::freevar_entry;\n-use middle::typeck::{method_origin, method_map_entry, vtable_res};\n+use middle::typeck::{method_origin, method_map_entry};\n use middle::{ty, typeck, moves};\n use middle;\n use util::ppaux::ty_to_str;"}, {"sha": "ac74dc25fd0d77e877ec549090eea5e02edc2ecd", "filename": "src/librustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -24,7 +24,7 @@ use middle::borrowck::{Loan, bckerr, BorrowckCtxt, inherent_mutability};\n use middle::borrowck::{ReqMaps, root_map_key, save_and_restore_managed};\n use middle::borrowck::{MoveError, MoveOk, MoveFromIllegalCmt};\n use middle::borrowck::{MoveWhileBorrowed};\n-use middle::mem_categorization::{cat_arg, cat_binding, cat_comp, cat_deref};\n+use middle::mem_categorization::{cat_arg, cat_comp, cat_deref};\n use middle::mem_categorization::{cat_local, cat_rvalue, cat_self};\n use middle::mem_categorization::{cat_special, cmt, gc_ptr, loan_path, lp_arg};\n use middle::mem_categorization::{lp_comp, lp_deref, lp_local};\n@@ -33,7 +33,7 @@ use util::ppaux::ty_to_str;\n \n use core::hashmap::linear::LinearSet;\n use core::uint;\n-use syntax::ast::{m_const, m_imm, m_mutbl};\n+use syntax::ast::m_mutbl;\n use syntax::ast;\n use syntax::ast_util;\n use syntax::codemap::span;"}, {"sha": "925659984d4bd886bc6302b9b33720b0387c75fd", "filename": "src/librustc/middle/borrowck/gather_loans.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -24,8 +24,7 @@ use middle::borrowck::{LoanKind, TotalFreeze, PartialFreeze,\n                        TotalTake, PartialTake, Immobile};\n use middle::borrowck::ReqMaps;\n use middle::borrowck::loan;\n-use middle::mem_categorization::{cat_binding, cat_discr, cmt, comp_variant};\n-use middle::mem_categorization::{mem_categorization_ctxt};\n+use middle::mem_categorization::{cmt, mem_categorization_ctxt};\n use middle::pat_util;\n use middle::ty::{ty_region};\n use middle::ty;\n@@ -166,7 +165,7 @@ fn req_loans_in_expr(ex: @ast::expr,\n         visit::visit_expr(ex, self, vt);\n       }\n \n-      ast::expr_method_call(rcvr, _, _, ref args, _) => {\n+      ast::expr_method_call(_, _, _, ref args, _) => {\n         let arg_tys = ty::ty_fn_args(ty::node_id_to_type(self.tcx(),\n                                                          ex.callee_id));\n         let scope_r = ty::re_scope(ex.id);"}, {"sha": "146e0c712a33de3d3843f670365e0bc91212ada6", "filename": "src/librustc/middle/borrowck/loan.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmiddle%2Fborrowck%2Floan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmiddle%2Fborrowck%2Floan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Floan.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -55,8 +55,8 @@ use middle::mem_categorization::{gc_ptr, region_ptr};\n use middle::ty;\n use util::common::indenter;\n \n-use core::result::{Err, Ok, Result};\n-use syntax::ast::{m_const, m_imm, m_mutbl};\n+use core::result::{Err, Ok};\n+use syntax::ast::m_imm;\n use syntax::ast;\n \n pub fn loan(bccx: @BorrowckCtxt,"}, {"sha": "3f4f7469832f5d3f1fbd193eac864985bf034f20", "filename": "src/librustc/middle/borrowck/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -231,14 +231,14 @@ use middle::region;\n use middle::ty;\n use middle::typeck;\n use middle::moves;\n-use util::common::{indenter, stmt_set};\n+use util::common::stmt_set;\n use util::ppaux::note_and_explain_region;\n \n use core::hashmap::linear::{LinearSet, LinearMap};\n use core::io;\n use core::result::{Result, Ok, Err};\n use core::to_bytes;\n-use syntax::ast::{mutability, m_mutbl, m_imm, m_const};\n+use syntax::ast::{mutability, m_imm};\n use syntax::ast;\n use syntax::codemap::span;\n "}, {"sha": "9fb95fd489e45151caff71800054f4f709d9224d", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -11,7 +11,7 @@\n use core::prelude::*;\n \n use middle::const_eval::{compare_const_vals, lookup_const_by_id};\n-use middle::const_eval::{eval_const_expr, const_val, const_int, const_bool};\n+use middle::const_eval::{eval_const_expr, const_val, const_bool};\n use middle::pat_util::*;\n use middle::ty::*;\n use middle::ty;\n@@ -23,7 +23,7 @@ use core::uint;\n use core::vec;\n use std::sort;\n use syntax::ast::*;\n-use syntax::ast_util::{variant_def_ids, unguarded_pat, walk_pat};\n+use syntax::ast_util::{unguarded_pat, walk_pat};\n use syntax::codemap::{span, dummy_sp, spanned};\n use syntax::visit;\n "}, {"sha": "a25e2f49e099ec20d1a6b3e43755070d59315b09", "filename": "src/librustc/middle/kind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fkind.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -20,7 +20,7 @@ use util::ppaux::{ty_to_str, tys_to_str};\n \n use syntax::ast::*;\n use syntax::attr::attrs_contains_name;\n-use syntax::codemap::{span, spanned};\n+use syntax::codemap::span;\n use syntax::print::pprust::expr_to_str;\n use syntax::{visit, ast_util};\n "}, {"sha": "566a52c3894d1ea7eb7ad23d97c3356af3b81a52", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -23,13 +23,13 @@\n use core::prelude::*;\n \n use driver::session::Session;\n-use metadata::csearch::{each_lang_item, get_item_attrs};\n-use metadata::cstore::{iter_crate_data};\n-use syntax::ast::{crate, def_fn, def_id, def_ty, lit_str, meta_item};\n+use metadata::csearch::each_lang_item;\n+use metadata::cstore::iter_crate_data;\n+use syntax::ast::{crate, def_id, lit_str, meta_item};\n use syntax::ast::{meta_list, meta_name_value, meta_word};\n-use syntax::ast_util::{local_def};\n+use syntax::ast_util::local_def;\n use syntax::visit::{default_simple_visitor, mk_simple_visitor, SimpleVisitor};\n-use syntax::visit::{visit_crate, visit_item};\n+use syntax::visit::visit_crate;\n \n use core::hashmap::linear::LinearMap;\n use core::ptr;"}, {"sha": "398b17a65b30c48fe741e4a2f568234f89f590cd", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -35,8 +35,8 @@ use std::smallintmap::SmallIntMap;\n use syntax::attr;\n use syntax::codemap::span;\n use syntax::codemap;\n-use syntax::print::pprust::{expr_to_str, mode_to_str, pat_to_str};\n-use syntax::{ast, ast_util, visit};\n+use syntax::print::pprust::mode_to_str;\n+use syntax::{ast, visit};\n \n /**\n  * A 'lint' check is a kind of miscellaneous constraint that a user _might_"}, {"sha": "980fb5319f8c80554b0681e5c5ccc362c231ad79", "filename": "src/librustc/middle/moves.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmoves.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -211,8 +211,7 @@ use core::prelude::*;\n use middle::pat_util::{pat_bindings};\n use middle::freevars;\n use middle::ty;\n-use middle::typeck::{method_map, method_map_entry};\n-use middle::typeck::check::{DerefArgs, DoDerefArgs, DontDerefArgs};\n+use middle::typeck::method_map;\n use util::ppaux;\n use util::common::indenter;\n \n@@ -221,8 +220,7 @@ use core::vec;\n use syntax::ast::*;\n use syntax::ast_util;\n use syntax::visit;\n-use syntax::visit::{fn_kind, fk_item_fn, fk_method, fk_dtor,\n-                    fk_anon, fk_fn_block, vt};\n+use syntax::visit::vt;\n use syntax::print::pprust;\n use syntax::codemap::span;\n "}, {"sha": "0e47dabcce9004f060510d2f1067960776e30634", "filename": "src/librustc/middle/pat_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmiddle%2Fpat_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmiddle%2Fpat_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fpat_util.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -15,7 +15,7 @@ use middle::resolve;\n use core::hashmap::linear::LinearMap;\n use syntax::ast::*;\n use syntax::ast_util::{path_to_ident, walk_pat};\n-use syntax::codemap::{span, respan};\n+use syntax::codemap::span;\n \n pub type PatIdMap = LinearMap<ident, node_id>;\n "}, {"sha": "8371a6785d13da593a968c0e7e9a86356b6e87f8", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 24, "deletions": 27, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -13,52 +13,52 @@ use core::prelude::*;\n use driver::session;\n use driver::session::Session;\n use metadata::csearch::{each_path, get_method_names_if_trait};\n-use metadata::csearch::{get_static_methods_if_impl, get_struct_fields};\n-use metadata::csearch::{get_type_name_if_impl};\n+use metadata::csearch::get_static_methods_if_impl;\n+use metadata::csearch::get_type_name_if_impl;\n use metadata::cstore::find_extern_mod_stmt_cnum;\n use metadata::decoder::{def_like, dl_def, dl_field, dl_impl};\n use middle::lang_items::LanguageItems;\n use middle::lint::{deny, allow, forbid, level, unused_imports, warn};\n use middle::lint::{get_lint_level, get_lint_settings_level};\n-use middle::pat_util::{pat_bindings};\n+use middle::pat_util::pat_bindings;\n \n use core::str;\n use core::vec;\n use syntax::ast::{RegionTyParamBound, TraitTyParamBound, _mod, add, arm};\n use syntax::ast::{binding_mode, bitand, bitor, bitxor, blk};\n use syntax::ast::{bind_infer, bind_by_ref, bind_by_copy};\n-use syntax::ast::{crate, crate_num, decl_item, def, def_arg, def_binding};\n+use syntax::ast::{crate, decl_item, def, def_arg, def_binding};\n use syntax::ast::{def_const, def_foreign_mod, def_fn, def_id, def_label};\n use syntax::ast::{def_local, def_mod, def_prim_ty, def_region, def_self};\n use syntax::ast::{def_self_ty, def_static_method, def_struct, def_ty};\n use syntax::ast::{def_ty_param, def_typaram_binder};\n use syntax::ast::{def_upvar, def_use, def_variant, expr, expr_assign_op};\n-use syntax::ast::{expr_binary, expr_break, expr_cast, expr_field};\n+use syntax::ast::{expr_binary, expr_break, expr_field};\n use syntax::ast::{expr_fn_block, expr_index, expr_method_call, expr_path};\n use syntax::ast::{def_prim_ty, def_region, def_self, def_ty, def_ty_param};\n use syntax::ast::{def_upvar, def_use, def_variant, div, eq};\n use syntax::ast::{expr, expr_again, expr_assign_op};\n use syntax::ast::{expr_index, expr_loop};\n use syntax::ast::{expr_path, expr_struct, expr_unary, fn_decl};\n use syntax::ast::{foreign_item, foreign_item_const, foreign_item_fn, ge};\n-use syntax::ast::{Generics};\n-use syntax::ast::{gt, ident, impure_fn, inherited, item, item_struct};\n+use syntax::ast::Generics;\n+use syntax::ast::{gt, ident, inherited, item, item_struct};\n use syntax::ast::{item_const, item_enum, item_fn, item_foreign_mod};\n use syntax::ast::{item_impl, item_mac, item_mod, item_trait, item_ty, le};\n-use syntax::ast::{local, local_crate, lt, method, mode, module_ns, mul};\n+use syntax::ast::{local, local_crate, lt, method, mode, mul};\n use syntax::ast::{named_field, ne, neg, node_id, pat, pat_enum, pat_ident};\n-use syntax::ast::{path, pat_box, pat_lit, pat_range, pat_struct};\n-use syntax::ast::{pat_tup, pat_uniq, pat_wild, prim_ty, private, provided};\n+use syntax::ast::{path, pat_lit, pat_range, pat_struct};\n+use syntax::ast::{prim_ty, private, provided};\n use syntax::ast::{public, required, rem, self_ty_, shl, shr, stmt_decl};\n use syntax::ast::{struct_dtor, struct_field, struct_variant_kind};\n use syntax::ast::{sty_static, subtract, trait_ref, tuple_variant_kind, Ty};\n use syntax::ast::{ty_bool, ty_char, ty_f, ty_f32, ty_f64, ty_float, ty_i};\n use syntax::ast::{ty_i16, ty_i32, ty_i64, ty_i8, ty_int, TyParam, ty_path};\n use syntax::ast::{ty_str, ty_u, ty_u16, ty_u32, ty_u64, ty_u8, ty_uint};\n-use syntax::ast::{type_value_ns, unnamed_field};\n+use syntax::ast::unnamed_field;\n use syntax::ast::{variant, view_item, view_item_extern_mod};\n use syntax::ast::{view_item_use, view_path_glob, view_path_list};\n-use syntax::ast::{view_path_simple, visibility, anonymous, named, not};\n+use syntax::ast::{view_path_simple, anonymous, named, not};\n use syntax::ast::{unsafe_fn};\n use syntax::ast_util::{def_id_of_def, local_def};\n use syntax::ast_util::{path_to_ident, walk_pat, trait_method_to_ty_method};\n@@ -67,15 +67,16 @@ use syntax::ast_util::{variant_visibility_to_privacy, visibility_to_privacy};\n use syntax::attr::{attr_metas, contains_name, attrs_contains_name};\n use syntax::parse::token::ident_interner;\n use syntax::parse::token::special_idents;\n-use syntax::print::pprust::{pat_to_str, path_to_str};\n+use syntax::print::pprust::path_to_str;\n use syntax::codemap::{span, dummy_sp};\n-use syntax::visit::{default_visitor, fk_method, mk_vt, Visitor, visit_block};\n-use syntax::visit::{visit_crate, visit_expr, visit_expr_opt, visit_fn};\n-use syntax::visit::{visit_foreign_item, visit_item, visit_method_helper};\n+use syntax::visit::{default_visitor, mk_vt, Visitor, visit_block};\n+use syntax::visit::{visit_crate, visit_expr, visit_expr_opt};\n+use syntax::visit::{visit_foreign_item, visit_item};\n use syntax::visit::{visit_mod, visit_ty, vt};\n use syntax::opt_vec::OptVec;\n \n-use core::str::{connect, each_split_str};\n+use core::option::Some;\n+use core::str::each_split_str;\n use core::hashmap::linear::{LinearMap, LinearSet};\n \n // Definition mapping\n@@ -1425,7 +1426,6 @@ pub impl Resolver {\n \n                     // Build up the import directives.\n                     let module_ = self.get_module_from_parent(parent);\n-                    let state = @mut ImportState();\n                     match view_path.node {\n                         view_path_simple(binding, full_path, _, _) => {\n                             let source_ident = *full_path.idents.last();\n@@ -1435,28 +1435,25 @@ pub impl Resolver {\n                                                         module_,\n                                                         module_path,\n                                                         subclass,\n-                                                        view_path.span,\n-                                                        state);\n+                                                        view_path.span);\n                         }\n                         view_path_list(_, ref source_idents, _) => {\n-                            for (*source_idents).each |source_ident| {\n+                            for source_idents.each |source_ident| {\n                                 let name = source_ident.node.name;\n                                 let subclass = @SingleImport(name, name);\n                                 self.build_import_directive(privacy,\n                                                             module_,\n                                                             copy module_path,\n                                                             subclass,\n-                                                            view_path.span,\n-                                                            state);\n+                                                            source_ident.span);\n                             }\n                         }\n                         view_path_glob(_, _) => {\n                             self.build_import_directive(privacy,\n                                                         module_,\n                                                         module_path,\n                                                         @GlobImport,\n-                                                        view_path.span,\n-                                                        state);\n+                                                        view_path.span);\n                         }\n                     }\n                 }\n@@ -1842,8 +1839,7 @@ pub impl Resolver {\n                               module_: @mut Module,\n                               +module_path: ~[ident],\n                               subclass: @ImportDirectiveSubclass,\n-                              span: span,\n-                              state: @mut ImportState) {\n+                              span: span) {\n         let directive = @ImportDirective(privacy, module_path,\n                                          subclass, span);\n         module_.imports.push(directive);\n@@ -1867,6 +1863,7 @@ pub impl Resolver {\n                     }\n                     None => {\n                         debug!(\"(building import directive) creating new\");\n+                        let state = @mut ImportState();\n                         let resolution = @mut ImportResolution(privacy,\n                                                                span,\n                                                                state);"}, {"sha": "1564b20e4d23f2507c4a00ac708593baf279ba43", "filename": "src/librustc/middle/trans/adt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -54,7 +54,7 @@ use core::libc::c_ulonglong;\n use core::option::{Option, Some, None};\n use core::vec;\n \n-use lib::llvm::{ValueRef, TypeRef, True, False};\n+use lib::llvm::{ValueRef, TypeRef, True};\n use middle::trans::_match;\n use middle::trans::build::*;\n use middle::trans::common::*;"}, {"sha": "4a28f014a9d830510f9a6b8e9f4d1de4c679ec9c", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -34,7 +34,7 @@ use lib::llvm::{True, False};\n use lib::llvm::{llvm, mk_target_data, mk_type_names};\n use lib;\n use metadata::common::LinkMeta;\n-use metadata::{csearch, cstore, decoder, encoder};\n+use metadata::{csearch, cstore, encoder};\n use middle::astencode;\n use middle::borrowck::RootInfo;\n use middle::resolve;\n@@ -63,7 +63,7 @@ use middle::trans::type_of;\n use middle::trans::type_of::*;\n use middle::ty;\n use util::common::indenter;\n-use util::ppaux::{ty_to_str, ty_to_short_str};\n+use util::ppaux::ty_to_str;\n use util::ppaux;\n \n use core::hash;\n@@ -72,14 +72,14 @@ use core::int;\n use core::io;\n use core::libc::{c_uint, c_ulonglong};\n use core::uint;\n-use std::{time, list};\n+use std::time;\n use syntax::ast::ident;\n-use syntax::ast_map::{path, path_elt_to_str, path_mod, path_name};\n-use syntax::ast_util::{def_id_of_def, local_def, path_to_ident};\n+use syntax::ast_map::{path, path_elt_to_str, path_name};\n+use syntax::ast_util::{local_def, path_to_ident};\n use syntax::attr;\n use syntax::codemap::span;\n use syntax::parse::token::special_idents;\n-use syntax::print::pprust::{expr_to_str, stmt_to_str, path_to_str};\n+use syntax::print::pprust::stmt_to_str;\n use syntax::visit;\n use syntax::{ast, ast_util, codemap, ast_map};\n "}, {"sha": "ed6cbc20209c07df170a04c834d86c2291d6c8d8", "filename": "src/librustc/middle/trans/build.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n use lib::llvm::llvm;\n-use lib::llvm::{CallConv, TypeKind, AtomicBinOp, AtomicOrdering, AsmDialect};\n-use lib::llvm::{Opcode, IntPredicate, RealPredicate, True, False};\n+use lib::llvm::{CallConv, AtomicBinOp, AtomicOrdering, AsmDialect};\n+use lib::llvm::{Opcode, IntPredicate, RealPredicate, False};\n use lib::llvm::{ValueRef, TypeRef, BasicBlockRef, BuilderRef, ModuleRef};\n use lib;\n use middle::trans::common::*;\n@@ -19,7 +19,7 @@ use syntax::codemap::span;\n use core::prelude::*;\n use core::cast;\n use core::hashmap::linear::LinearMap;\n-use core::libc::{c_uint, c_int, c_ulonglong, c_char};\n+use core::libc::{c_uint, c_ulonglong, c_char};\n use core::libc;\n use core::option::Some;\n use core::ptr;"}, {"sha": "1e05cf258c7194fec081189b9c0abec5aaefea14", "filename": "src/librustc/middle/trans/cabi_mips.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_mips.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_mips.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_mips.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -11,9 +11,9 @@\n use core::{ptr, vec, uint};\n use core::option::*;\n use core::libc::c_uint;\n-use lib::llvm::{llvm, TypeRef, ValueRef, Integer, Pointer, Float, Double};\n+use lib::llvm::{llvm, TypeRef, Integer, Pointer, Float, Double};\n use lib::llvm::{Struct, Array, Attribute};\n-use lib::llvm::{StructRetAttribute, ByValAttribute};\n+use lib::llvm::{StructRetAttribute};\n use middle::trans::common::*;\n use middle::trans::cabi::*;\n "}, {"sha": "896ebd1625755336ad58764e3f1bbc41ce81e04f", "filename": "src/librustc/middle/trans/cabi_x86_64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86_64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86_64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86_64.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -11,7 +11,7 @@\n // The classification code for the x86_64 ABI is taken from the clay language\n // https://github.com/jckarter/clay/blob/master/compiler/src/externals.cpp\n \n-use lib::llvm::{llvm, TypeRef, ValueRef, Integer, Pointer, Float, Double};\n+use lib::llvm::{llvm, TypeRef, Integer, Pointer, Float, Double};\n use lib::llvm::{Struct, Array, Attribute};\n use lib::llvm::{StructRetAttribute, ByValAttribute};\n use lib::llvm::struct_tys;"}, {"sha": "aef1fb762de73521085172cd71fbf010961abc96", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -21,7 +21,7 @@ use core::prelude::*;\n use back::abi;\n use driver::session;\n use lib;\n-use lib::llvm::{ValueRef, TypeRef};\n+use lib::llvm::ValueRef;\n use lib::llvm::llvm;\n use metadata::csearch;\n use middle::trans::base;"}, {"sha": "0ea5007ca9146601f09f5187d51335609bfd19f2", "filename": "src/librustc/middle/trans/closure.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -12,13 +12,13 @@ use core::prelude::*;\n \n use back::abi;\n use back::link::{mangle_internal_name_by_path_and_seq};\n-use lib::llvm::{llvm, ValueRef, TypeRef};\n+use lib::llvm::{llvm, ValueRef};\n use middle::moves;\n use middle::trans::base::*;\n use middle::trans::build::*;\n use middle::trans::callee;\n use middle::trans::common::*;\n-use middle::trans::datum::{Datum, INIT, ByRef, ByValue, ZeroMem};\n+use middle::trans::datum::{Datum, INIT, ByRef, ZeroMem};\n use middle::trans::expr;\n use middle::trans::glue;\n use middle::trans::machine;\n@@ -27,7 +27,7 @@ use middle::ty;\n use util::ppaux::ty_to_str;\n \n use syntax::ast;\n-use syntax::ast_map::{path, path_mod, path_name};\n+use syntax::ast_map::path_name;\n use syntax::ast_util;\n use syntax::parse::token::special_idents;\n "}, {"sha": "b8c0b7f41d59e2a681563eb688c9d0a84b7b6989", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -16,7 +16,7 @@\n \n use core::prelude::*;\n \n-use back::{link, abi, upcall};\n+use back::{abi, upcall};\n use driver::session;\n use driver::session::Session;\n use lib::llvm::{ModuleRef, ValueRef, TypeRef, BasicBlockRef, BuilderRef};"}, {"sha": "a495350a73f37c2e0ac61f3578b3011d06627f61", "filename": "src/librustc/middle/trans/consts.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -11,7 +11,8 @@\n use core::prelude::*;\n \n use back::abi;\n-use lib::llvm::{llvm, ValueRef, TypeRef, Bool, True, False};\n+use lib::llvm::{llvm, SetLinkage, InternalLinkage, PrivateLinkage,\n+                ValueRef, TypeRef, Bool, True, False};\n use metadata::csearch;\n use middle::const_eval;\n use middle::trans::adt;\n@@ -27,7 +28,7 @@ use middle::ty;\n use util::ppaux::{expr_repr, ty_to_str};\n \n use core::libc::c_uint;\n-use syntax::{ast, ast_util, codemap, ast_map};\n+use syntax::{ast, ast_util, ast_map};\n use util::ppaux::ty_to_str;\n \n pub fn const_lit(cx: @CrateContext, e: @ast::expr, lit: ast::lit)\n@@ -104,6 +105,7 @@ fn const_addr_of(cx: @CrateContext, cv: ValueRef) -> ValueRef {\n         };\n         llvm::LLVMSetInitializer(gv, cv);\n         llvm::LLVMSetGlobalConstant(gv, True);\n+        SetLinkage(gv, PrivateLinkage);\n         gv\n     }\n }\n@@ -483,6 +485,7 @@ fn const_expr_unadjusted(cx: @CrateContext, e: @ast::expr) -> ValueRef {\n                 };\n                 llvm::LLVMSetInitializer(gv, cv);\n                 llvm::LLVMSetGlobalConstant(gv, True);\n+                SetLinkage(gv, PrivateLinkage);\n                 let p = const_ptrcast(cx, gv, llunitty);\n                 C_struct(~[p, sz])\n               }"}, {"sha": "452a021ab51d885f14119cf868a36c0e7bd97fd3", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -24,7 +24,7 @@ use core::hashmap::linear::LinearMap;\n use core::libc;\n use core::option;\n use core::sys;\n-use syntax::codemap::{span, CharPos};\n+use syntax::codemap::span;\n use syntax::parse::token::ident_interner;\n use syntax::{ast, codemap, ast_util, ast_map};\n "}, {"sha": "6825c3896e485e443c868eefd6347de63fd9cbbd", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -123,7 +123,7 @@ use core::prelude::*;\n \n use back::abi;\n use lib;\n-use lib::llvm::{ValueRef, TypeRef, llvm, True};\n+use lib::llvm::{ValueRef, TypeRef, llvm};\n use metadata::csearch;\n use middle::borrowck::root_map_key;\n use middle::trans::_match;\n@@ -132,7 +132,7 @@ use middle::trans::asm;\n use middle::trans::base;\n use middle::trans::base::*;\n use middle::trans::build::*;\n-use middle::trans::callee::{AutorefArg, DoAutorefArg, DontAutorefArg};\n+use middle::trans::callee::DoAutorefArg;\n use middle::trans::callee;\n use middle::trans::closure;\n use middle::trans::common::*;"}, {"sha": "038f5b793277f34954cfe4f29bf712f869c064b4", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -16,7 +16,7 @@ use driver::session::arch_x86_64;\n use driver::session::arch_arm;\n use driver::session::arch_mips;\n use lib::llvm::{SequentiallyConsistent, Acquire, Release, Xchg};\n-use lib::llvm::{llvm, TypeRef, ValueRef, Integer, Pointer, Float, Double};\n+use lib::llvm::{TypeRef, ValueRef};\n use lib;\n use middle::trans::base::*;\n use middle::trans::cabi;\n@@ -27,7 +27,7 @@ use middle::trans::build::*;\n use middle::trans::callee::*;\n use middle::trans::common::*;\n use middle::trans::datum::*;\n-use middle::trans::expr::{Dest, Ignore};\n+use middle::trans::expr::Ignore;\n use middle::trans::machine::llsize_of;\n use middle::trans::glue;\n use middle::trans::machine;"}, {"sha": "cb20e5bbd32c3ba3438ef549bd31988a1d139085", "filename": "src/librustc/middle/trans/inline.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmiddle%2Ftrans%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmiddle%2Ftrans%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Finline.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -14,14 +14,14 @@ use metadata::csearch;\n use middle::astencode;\n use middle::trans::base::{get_insn_ctxt};\n use middle::trans::base::{impl_owned_self, impl_self, no_self};\n-use middle::trans::base::{trans_item, get_item_val, self_arg, trans_fn};\n+use middle::trans::base::{trans_item, get_item_val, trans_fn};\n use middle::trans::common::*;\n use middle::ty;\n use util::ppaux::ty_to_str;\n \n use core::vec;\n use syntax::ast;\n-use syntax::ast_map::{path, path_mod, path_name};\n+use syntax::ast_map::path_name;\n use syntax::ast_util::local_def;\n \n // `translate` will be true if this function is allowed to translate the"}, {"sha": "1b9f7bae0e93fc46cdd90e4b1c0ac804cb5dcc02", "filename": "src/librustc/middle/trans/machine.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmachine.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -12,8 +12,8 @@\n \n use core::prelude::*;\n \n-use lib::llvm::{ModuleRef, ValueRef, TypeRef, BasicBlockRef, BuilderRef};\n-use lib::llvm::{True, False, Bool};\n+use lib::llvm::{ValueRef, TypeRef};\n+use lib::llvm::False;\n use lib::llvm::llvm;\n use middle::trans::common::*;\n use middle::trans::type_of;"}, {"sha": "ae2d7bbee50657b8273570239db0efb72eb45b69", "filename": "src/librustc/middle/trans/meth.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -10,10 +10,10 @@\n \n use core::prelude::*;\n \n-use back::{link, abi};\n+use back::abi;\n use driver;\n use lib::llvm::llvm;\n-use lib::llvm::{ValueRef, TypeRef};\n+use lib::llvm::ValueRef;\n use lib;\n use metadata::csearch;\n use middle::trans::base::*;\n@@ -31,9 +31,9 @@ use middle::ty;\n use middle::ty::arg;\n use middle::typeck;\n use util::common::indenter;\n-use util::ppaux::{ty_to_str, tys_to_str};\n+use util::ppaux::ty_to_str;\n \n-use syntax::ast_map::{path, path_mod, path_name, node_id_to_str};\n+use syntax::ast_map::{path, path_mod, path_name};\n use syntax::ast_util;\n use syntax::{ast, ast_map};\n "}, {"sha": "29760eb0bb509e5e41f71b252eea0f27d0b0a6b6", "filename": "src/librustc/middle/trans/monomorphize.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -16,8 +16,8 @@ use lib::llvm::ValueRef;\n use middle::trans::base::{get_insn_ctxt};\n use middle::trans::base::{set_inline_hint_if_appr, set_inline_hint};\n use middle::trans::base::{trans_enum_variant, trans_struct_dtor};\n-use middle::trans::base::{trans_fn, impl_self, decl_internal_cdecl_fn};\n-use middle::trans::base::{trans_item, get_item_val, no_self, self_arg};\n+use middle::trans::base::{trans_fn, decl_internal_cdecl_fn};\n+use middle::trans::base::{get_item_val, no_self};\n use middle::trans::base;\n use middle::trans::common::*;\n use middle::trans::datum;\n@@ -35,7 +35,7 @@ use util::ppaux::ty_to_str;\n use core::vec;\n use syntax::ast;\n use syntax::ast_map;\n-use syntax::ast_map::{path, path_mod, path_name};\n+use syntax::ast_map::path_name;\n use syntax::ast_util::local_def;\n use syntax::opt_vec;\n use syntax::parse::token::special_idents;"}, {"sha": "f1c625e13aa82f410b26bcfd0a5f7cab18458bc6", "filename": "src/librustc/middle/trans/reachable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmiddle%2Ftrans%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmiddle%2Ftrans%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Freachable.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -28,7 +28,7 @@ use syntax::ast_util::def_id_of_def;\n use syntax::attr;\n use syntax::codemap;\n use syntax::print::pprust::expr_to_str;\n-use syntax::{visit, ast_util, ast_map};\n+use syntax::{visit, ast_map};\n \n pub type map = @LinearSet<node_id>;\n "}, {"sha": "08337c918b0f5ebae9d50a2208c73320b2298408", "filename": "src/librustc/middle/trans/shape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmiddle%2Ftrans%2Fshape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmiddle%2Ftrans%2Fshape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fshape.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -13,7 +13,7 @@\n \n \n use lib::llvm::llvm;\n-use lib::llvm::{True, False, ModuleRef, TypeRef, ValueRef};\n+use lib::llvm::{True, ModuleRef, ValueRef};\n use middle::trans::common::*;\n use middle::trans;\n "}, {"sha": "a4495192b18179e9feeaf71ac748f46f5e985a39", "filename": "src/librustc/middle/trans/type_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -35,7 +35,7 @@ use middle::trans::inline;\n use middle::ty;\n use middle::typeck;\n \n-use core::option::{Some, None, Option};\n+use core::option::{Some, None};\n use core::uint;\n use core::vec;\n use std::list::{List, Cons, Nil};"}, {"sha": "5e46fb512d4ceeea4fcff7442bd19367fc5e3d67", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -23,7 +23,7 @@ use middle::ty;\n use middle::typeck;\n use middle;\n use util::ppaux::{note_and_explain_region, bound_region_to_str};\n-use util::ppaux::{region_to_str, explain_region, vstore_to_str};\n+use util::ppaux::{region_to_str, vstore_to_str};\n use util::ppaux::{trait_store_to_str, ty_to_str, tys_to_str};\n use util::common::{indenter};\n "}, {"sha": "eb106f3b91f72c61da2d1135804813afa8ab5460", "filename": "src/librustc/middle/typeck/astconv.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -55,12 +55,12 @@\n use core::prelude::*;\n \n use middle::const_eval;\n-use middle::ty::{arg, field, substs};\n+use middle::ty::{arg, substs};\n use middle::ty::{ty_param_substs_and_ty};\n use middle::ty;\n-use middle::typeck::rscope::{in_binding_rscope};\n-use middle::typeck::rscope::{region_scope, type_rscope, RegionError};\n-use middle::typeck::rscope::{RegionParamNames};\n+use middle::typeck::rscope::in_binding_rscope;\n+use middle::typeck::rscope::{region_scope, RegionError};\n+use middle::typeck::rscope::RegionParamNames;\n \n use core::result;\n use core::vec;"}, {"sha": "18d84b967874fa9df95295361f010618052380f9", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -81,11 +81,11 @@ use core::prelude::*;\n use middle::const_eval;\n use middle::pat_util::pat_id_map;\n use middle::pat_util;\n-use middle::ty::{TyVid, Vid, FnSig, VariantInfo_, field};\n+use middle::ty::{FnSig, VariantInfo_};\n use middle::ty::{ty_param_bounds_and_ty, ty_param_substs_and_ty};\n-use middle::ty::{re_bound, br_cap_avoid, substs, arg, param_ty};\n+use middle::ty::{substs, arg, param_ty};\n use middle::ty;\n-use middle::typeck::astconv::{AstConv, ast_path_to_ty};\n+use middle::typeck::astconv::AstConv;\n use middle::typeck::astconv::{ast_region_to_region, ast_ty_to_ty};\n use middle::typeck::astconv;\n use middle::typeck::check::_match::pat_ctxt;\n@@ -97,16 +97,15 @@ use middle::typeck::check::method::{TransformTypeNormally};\n use middle::typeck::check::regionmanip::replace_bound_regions_in_fn_sig;\n use middle::typeck::check::vtable::{LocationInfo, VtableContext};\n use middle::typeck::CrateCtxt;\n-use middle::typeck::infer::{resolve_type, force_tvar, mk_eqty};\n+use middle::typeck::infer::{resolve_type, force_tvar};\n use middle::typeck::infer;\n-use middle::typeck::rscope::{binding_rscope, bound_self_region};\n+use middle::typeck::rscope::bound_self_region;\n use middle::typeck::rscope::{RegionError, RegionParameterization};\n-use middle::typeck::rscope::{in_binding_rscope, region_scope, type_rscope};\n+use middle::typeck::rscope::region_scope;\n use middle::typeck::rscope;\n-use middle::typeck::{isr_alist, lookup_def_ccx, method_map_entry};\n-use middle::typeck::{method_map, vtable_map};\n-use middle::typeck::{method_origin, method_self, method_trait, no_params};\n-use middle::typeck::{require_same_types};\n+use middle::typeck::{isr_alist, lookup_def_ccx};\n+use middle::typeck::no_params;\n+use middle::typeck::{require_same_types, method_map, vtable_map};\n use util::common::{block_query, indenter, loop_query};\n use util::ppaux::{bound_region_to_str, expr_repr, pat_repr};\n use util::ppaux;\n@@ -119,12 +118,12 @@ use core::result;\n use core::str;\n use core::vec;\n use std::list::Nil;\n-use syntax::ast::{provided, required, ty_i};\n+use syntax::ast::{provided, required};\n use syntax::ast;\n use syntax::ast_map;\n-use syntax::ast_util::{Private, Public, is_local, local_def};\n+use syntax::ast_util::local_def;\n use syntax::ast_util;\n-use syntax::codemap::{span, spanned, respan};\n+use syntax::codemap::span;\n use syntax::codemap;\n use syntax::opt_vec::OptVec;\n use syntax::opt_vec;"}, {"sha": "d161df22976f6da03659ca9f29d56f64bd47496e", "filename": "src/librustc/middle/typeck/check/regionck.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -30,13 +30,13 @@ this point a bit better.\n use core::prelude::*;\n \n use middle::freevars::get_freevars;\n-use middle::pat_util::{pat_bindings, pat_is_binding};\n+use middle::pat_util::pat_bindings;\n use middle::ty::{encl_region, re_scope};\n use middle::ty;\n use middle::typeck::check::FnCtxt;\n use middle::typeck::check::lookup_def;\n-use middle::typeck::infer::{fres, resolve_and_force_all_but_regions};\n-use middle::typeck::infer::{resolve_type};\n+use middle::typeck::infer::resolve_and_force_all_but_regions;\n+use middle::typeck::infer::resolve_type;\n use util::ppaux::{note_and_explain_region, ty_to_str};\n \n use core::result;"}, {"sha": "d485ca447fcc35bfc790e65e73d5f14f0fbf7663", "filename": "src/librustc/middle/typeck/check/vtable.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -15,16 +15,16 @@ use middle::ty::{param_ty, substs};\n use middle::ty;\n use middle::typeck::check::{FnCtxt, impl_self_ty};\n use middle::typeck::check::{structurally_resolved_type};\n-use middle::typeck::infer::{fixup_err_to_str, InferCtxt};\n+use middle::typeck::infer::fixup_err_to_str;\n use middle::typeck::infer::{resolve_and_force_all_but_regions, resolve_type};\n use middle::typeck::infer;\n use middle::typeck::{CrateCtxt, vtable_origin, vtable_param, vtable_res};\n-use middle::typeck::{vtable_static};\n+use middle::typeck::vtable_static;\n use util::common::indenter;\n use util::ppaux::tys_to_str;\n use util::ppaux;\n \n-use core::result::{Result, Ok, Err};\n+use core::result::{Ok, Err};\n use core::result;\n use core::uint;\n use core::vec;"}, {"sha": "31301db2a0a1becef1f3370a49c1c3b128ff2390", "filename": "src/librustc/middle/typeck/check/writeback.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -19,15 +19,15 @@ use middle::ty::arg;\n use middle::ty;\n use middle::typeck::check::{FnCtxt, SelfInfo};\n use middle::typeck::infer::{force_all, resolve_all, resolve_region};\n-use middle::typeck::infer::{resolve_type};\n+use middle::typeck::infer::resolve_type;\n use middle::typeck::infer;\n-use middle::typeck::{method_map_entry};\n use middle::typeck::{vtable_origin, vtable_static, vtable_param};\n-use middle::typeck::{vtable_param, write_substs_to_tcx};\n-use middle::typeck::{write_ty_to_tcx};\n+use middle::typeck::method_map_entry;\n+use middle::typeck::write_substs_to_tcx;\n+use middle::typeck::write_ty_to_tcx;\n use util::ppaux;\n \n-use core::result::{Result, Ok, Err};\n+use core::result::{Ok, Err};\n use core::vec;\n use syntax::ast;\n use syntax::codemap::span;"}, {"sha": "498ad2c5bffcb4bcdcc3fd38d75f1a012958da73", "filename": "src/librustc/middle/typeck/coherence.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -17,7 +17,7 @@\n use core::prelude::*;\n \n use driver;\n-use metadata::csearch::{ProvidedTraitMethodInfo, each_path, get_impl_traits};\n+use metadata::csearch::{each_path, get_impl_traits};\n use metadata::csearch::{get_impls_for_mod};\n use metadata::csearch;\n use metadata::cstore::{CStore, iter_crate_data};\n@@ -35,14 +35,11 @@ use middle::ty::{type_is_ty_var};\n use middle::ty;\n use middle::typeck::CrateCtxt;\n use middle::typeck::infer::combine::Combine;\n-use middle::typeck::infer::{InferCtxt, can_mk_subty};\n+use middle::typeck::infer::InferCtxt;\n use middle::typeck::infer::{new_infer_ctxt, resolve_ivar};\n use middle::typeck::infer::{resolve_nested_tvar, resolve_type};\n use syntax::ast::{crate, def_id, def_mod, def_ty};\n-use syntax::ast::{item, item_struct, item_const, item_enum, item_fn};\n-use syntax::ast::{item_foreign_mod, item_impl, item_mac, item_mod};\n-use syntax::ast::{item_trait, item_ty, local_crate, method, node_id};\n-use syntax::ast::{trait_ref};\n+use syntax::ast::{item, item_impl, item_mod, local_crate, method, trait_ref};\n use syntax::ast;\n use syntax::ast_map::node_item;\n use syntax::ast_map;"}, {"sha": "f2d10d534277589dafefac5bc48a6d4255573229", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -33,7 +33,7 @@ are represented as `ty_param()` instances.\n use core::prelude::*;\n \n use metadata::csearch;\n-use middle::ty::{InstantiatedTraitRef, arg};\n+use middle::ty::InstantiatedTraitRef;\n use middle::ty::{substs, ty_param_bounds_and_ty, ty_param_substs_and_ty};\n use middle::ty;\n use middle::typeck::astconv::{AstConv, ty_of_arg};"}, {"sha": "e2b135a6a64014f1ff90a89de3c9dc562b18ee5b", "filename": "src/librustc/middle/typeck/infer/coercion.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcoercion.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -66,19 +66,19 @@ we may want to adjust precisely when coercions occur.\n \n use core::prelude::*;\n \n-use middle::ty::{TyVar, AutoPtr, AutoBorrowVec, AutoBorrowFn};\n-use middle::ty::{AutoAdjustment, AutoDerefRef, AutoRef};\n-use middle::ty::{vstore_slice, vstore_box, vstore_uniq, vstore_fixed};\n+use middle::ty::{AutoPtr, AutoBorrowVec, AutoBorrowFn};\n+use middle::ty::{AutoDerefRef, AutoRef};\n+use middle::ty::{vstore_slice, vstore_box, vstore_uniq};\n use middle::ty::{mt};\n use middle::ty;\n use middle::typeck::infer::{CoerceResult, resolve_type};\n use middle::typeck::infer::combine::CombineFields;\n use middle::typeck::infer::sub::Sub;\n use middle::typeck::infer::to_str::InferStr;\n use middle::typeck::infer::resolve::try_resolve_tvar_shallow;\n-use util::common::{indent, indenter};\n+use util::common::indenter;\n \n-use syntax::ast::{m_const, m_imm, m_mutbl};\n+use syntax::ast::m_imm;\n use syntax::ast;\n \n // Note: Coerce is not actually a combiner, in that it does not"}, {"sha": "f90bc8314a4d1c64ae7c7dbdc4417c7f61456cc4", "filename": "src/librustc/middle/typeck/infer/combine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -68,7 +68,7 @@ use util::common::indent;\n \n use core::result::{iter_vec2, map_vec2};\n use core::vec;\n-use syntax::ast::{Onceness, purity, ret_style};\n+use syntax::ast::{Onceness, purity};\n use syntax::ast;\n use syntax::opt_vec;\n use syntax::codemap::span;"}, {"sha": "2ed73061743936fba72bc2166fd7fa607d591903", "filename": "src/librustc/middle/typeck/infer/glb.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fglb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fglb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fglb.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -21,8 +21,7 @@ use middle::typeck::infer::{cres, InferCtxt};\n use middle::typeck::isr_alist;\n use syntax::ast;\n use syntax::ast::{Many, Once, extern_fn, impure_fn, m_const, m_imm, m_mutbl};\n-use syntax::ast::{noreturn, pure_fn, ret_style, return_val, unsafe_fn};\n-use syntax::ast::{Onceness, purity};\n+use syntax::ast::{pure_fn, unsafe_fn, Onceness, purity};\n use syntax::codemap::span;\n use util::common::{indent, indenter};\n use util::ppaux::mt_to_str;"}, {"sha": "8821926be35c4e08088a795ff9f6336dbd38c606", "filename": "src/librustc/middle/typeck/infer/lub.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flub.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -24,8 +24,8 @@ use util::ppaux::mt_to_str;\n \n use std::list;\n use syntax::ast;\n-use syntax::ast::{Many, Once, extern_fn, m_const, impure_fn, noreturn};\n-use syntax::ast::{pure_fn, ret_style, return_val, unsafe_fn};\n+use syntax::ast::{Many, Once, extern_fn, m_const, impure_fn};\n+use syntax::ast::{pure_fn, unsafe_fn};\n use syntax::ast::{Onceness, purity};\n use syntax::codemap::span;\n "}, {"sha": "ca59ee0328a66abcb75fae5454513aca3b4e3f98", "filename": "src/librustc/middle/typeck/infer/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -264,16 +264,16 @@ use middle::typeck::infer::sub::Sub;\n use middle::typeck::infer::to_str::InferStr;\n use middle::typeck::infer::unify::{ValsAndBindings, Root};\n use middle::typeck::isr_alist;\n-use util::common::{indent, indenter};\n-use util::ppaux::{bound_region_to_str, ty_to_str, mt_to_str};\n+use util::common::indent;\n+use util::ppaux::{bound_region_to_str, ty_to_str};\n \n use core::cmp::Eq;\n-use core::result::{Result, Ok, Err, map_vec, map_vec2, iter_vec2};\n+use core::result::{Result, Ok, Err};\n use core::result;\n use core::vec;\n use std::list::Nil;\n use std::smallintmap::SmallIntMap;\n-use syntax::ast::{m_const, m_imm, m_mutbl};\n+use syntax::ast::{m_imm, m_mutbl};\n use syntax::ast;\n use syntax::codemap;\n use syntax::codemap::span;"}, {"sha": "19c06804ea0c730d004ff821dfcce90a59a206de", "filename": "src/librustc/middle/typeck/infer/region_inference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -549,7 +549,7 @@ use util::ppaux::note_and_explain_region;\n \n use core::cell::{Cell, empty_cell};\n use core::hashmap::linear::{LinearMap, LinearSet};\n-use core::result::{Err, Ok, Result};\n+use core::result::{Err, Ok};\n use core::to_bytes;\n use core::uint;\n use core::vec;"}, {"sha": "1fcd89ea73f964c1625ee2ee200c26b49b39c3e5", "filename": "src/librustc/middle/typeck/infer/sub.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fsub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fsub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fsub.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -25,7 +25,7 @@ use util::ppaux::bound_region_to_str;\n use std::list::Nil;\n use std::list;\n use syntax::ast;\n-use syntax::ast::{Onceness, m_const, purity, ret_style};\n+use syntax::ast::{Onceness, m_const, purity};\n use syntax::codemap::span;\n \n "}, {"sha": "559d29e66efbac02859dc8d7a2cd210641245ad2", "filename": "src/librustc/middle/typeck/infer/to_str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fto_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fto_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fto_str.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -11,14 +11,14 @@\n use core::prelude::*;\n \n use middle::ty::{FnSig, Vid};\n-use middle::ty::{IntVarValue, IntType, UintType};\n+use middle::ty::IntVarValue;\n use middle::ty;\n use middle::typeck::infer::{Bound, Bounds};\n use middle::typeck::infer::InferCtxt;\n use middle::typeck::infer::unify::{Redirect, Root, VarValue};\n use util::ppaux::{mt_to_str, ty_to_str};\n \n-use syntax::{ast, ast_util};\n+use syntax::ast;\n \n use core::uint;\n use core::str;"}, {"sha": "3c5470dc22fa6ef6b1c83271916c6f47485627ef", "filename": "src/librustc/middle/typeck/infer/unify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Funify.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -13,7 +13,7 @@ use std::smallintmap::SmallIntMap;\n \n use middle::ty::{Vid, expected_found, IntVarValue};\n use middle::ty;\n-use middle::typeck::infer::{Bound, Bounds, cres, uok, ures};\n+use middle::typeck::infer::{Bounds, uok, ures};\n use middle::typeck::infer::InferCtxt;\n use middle::typeck::infer::to_str::InferStr;\n use syntax::ast;"}, {"sha": "ea577c758affc9d77ae9fee238f2a7009604aede", "filename": "src/librustc/middle/typeck/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -58,11 +58,11 @@ use util::ppaux;\n use core::hashmap::linear::LinearMap;\n use core::result;\n use core::vec;\n-use std::list::{List, Nil, Cons};\n+use std::list::List;\n use std::list;\n-use syntax::codemap::{span, spanned, respan};\n+use syntax::codemap::span;\n use syntax::print::pprust::*;\n-use syntax::{ast, ast_util, ast_map};\n+use syntax::{ast, ast_map};\n \n #[path = \"check/mod.rs\"]\n pub mod check;"}, {"sha": "48ed754a4a625dffe041d975bffa8b638d0ecbf5", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -11,7 +11,7 @@\n use core::prelude::*;\n \n use middle::ty;\n-use middle::ty::{arg, canon_mode};\n+use middle::ty::canon_mode;\n use middle::ty::{bound_region, br_anon, br_named, br_self, br_cap_avoid,\n                  br_fresh};\n use middle::ty::{ctxt, field, method};\n@@ -27,7 +27,7 @@ use middle::ty::{ty_uint, ty_unboxed_vec, ty_infer};\n use metadata::encoder;\n use syntax::codemap::span;\n use syntax::print::pprust;\n-use syntax::print::pprust::{path_to_str, mode_to_str};\n+use syntax::print::pprust::mode_to_str;\n use syntax::{ast, ast_util};\n use syntax::ast_map;\n "}, {"sha": "d3108f690c144878969215fa0123a8579eff7f08", "filename": "src/librustdoc/astsrv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustdoc%2Fastsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustdoc%2Fastsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fastsrv.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -22,7 +22,7 @@ use core::prelude::*;\n use parse;\n \n use core::cell::Cell;\n-use core::comm::{stream, Chan, SharedChan, Port};\n+use core::comm::{stream, SharedChan, Port};\n use rustc::driver::driver;\n use rustc::driver::session::Session;\n use rustc::driver::session::{basic_options, options};"}, {"sha": "e1996409a7694f4de9e872973e18c5ce6b58c2f6", "filename": "src/librustdoc/page_pass.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustdoc%2Fpage_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustdoc%2Fpage_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpage_pass.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -19,7 +19,7 @@ use core::prelude::*;\n \n use astsrv;\n use config;\n-use doc::{ItemUtils, PageUtils};\n+use doc::ItemUtils;\n use doc;\n use fold::Fold;\n use fold;\n@@ -29,6 +29,8 @@ use util::NominalOp;\n use core::comm::*;\n use syntax::ast;\n \n+#[cfg(test)] use doc::PageUtils;\n+\n pub fn mk_pass(output_style: config::OutputStyle) -> Pass {\n     Pass {\n         name: ~\"page\","}, {"sha": "98c4c0409d4b3c02f64b1001e87e8c470bcee61e", "filename": "src/librusti/rusti.rc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrusti%2Frusti.rc", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrusti%2Frusti.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrusti%2Frusti.rc?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -29,9 +29,9 @@ extern mod rustc(vers = \"0.6\");\n extern mod syntax(vers = \"0.6\");\n \n use core::*;\n-use core::io::{ReaderUtil, WriterUtil};\n+use core::io::WriterUtil;\n use rustc::driver::{driver, session};\n-use syntax::{ast, ast_util, codemap, diagnostic, fold, parse, print, visit};\n+use syntax::{ast, diagnostic};\n use syntax::ast_util::*;\n use syntax::parse::token;\n use syntax::print::{pp, pprust};"}, {"sha": "caab57dd23abbff52eb6f6fdef75c5f031526077", "filename": "src/librustpkg/rustpkg.rc", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustpkg%2Frustpkg.rc", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustpkg%2Frustpkg.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Frustpkg.rc?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -29,14 +29,13 @@ extern mod syntax(vers = \"0.6\");\n use core::*;\n use core::container::Map;\n use core::hashmap::linear::LinearMap;\n-use core::io::{ReaderUtil, WriterUtil};\n+use core::io::WriterUtil;\n use rustc::driver::{driver, session};\n use rustc::metadata::filesearch;\n use std::net::url;\n use std::{json, semver, getopts};\n use syntax::codemap::spanned;\n-use syntax::{ast, attr, codemap, diagnostic, parse, visit};\n-\n+use syntax::{ast, diagnostic};\n use util::Package;\n \n mod usage;"}, {"sha": "f9dc13f198922f2d2ffcf1ba2aa2be62697b16ed", "filename": "src/librustpkg/util.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustpkg%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibrustpkg%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Futil.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -9,18 +9,18 @@\n // except according to those terms.\n \n use core::*;\n-use core::hash::{Hash, HashUtil, Streaming};\n+use core::hash::Streaming;\n use core::hashmap::linear::LinearMap;\n use rustc::driver::{driver, session};\n use rustc::metadata::filesearch;\n use std::getopts::groups::getopts;\n use std::semver;\n use std::{json, term, sort, getopts};\n use syntax::ast_util::*;\n-use syntax::codemap::{span, dummy_sp, spanned};\n+use syntax::codemap::{dummy_sp, spanned};\n use syntax::ext::base::{mk_ctxt, ext_ctxt};\n use syntax::ext::build;\n-use syntax::{ast, attr, codemap, diagnostic, fold, parse, visit};\n+use syntax::{ast, attr, codemap, diagnostic, fold};\n \n pub struct Package {\n     id: ~str,"}, {"sha": "9671112bec01f7b9904297d605b84ef73888653e", "filename": "src/libstd/bigint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibstd%2Fbigint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibstd%2Fbigint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbigint.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -866,7 +866,7 @@ mod biguint_tests {\n \n     use core::*;\n     use core::num::{IntConvertible, Zero, One};\n-    use super::{BigInt, BigUint, BigDigit};\n+    use super::{BigUint, BigDigit};\n \n     #[test]\n     fn test_from_slice() {"}, {"sha": "ffb8dfd6e83cb2e2eef2afeb4b97e9f052dca2af", "filename": "src/libstd/ebml.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibstd%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibstd%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Febml.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -54,7 +54,7 @@ pub enum EbmlEncoderTag {\n \n pub mod reader {\n     use ebml::{Doc, EbmlEncoderTag, EsBool, EsEnum, EsEnumBody, EsEnumVid};\n-    use ebml::{EsF32, EsF64, EsFloat, EsI16, EsI32, EsI64, EsI8, EsInt};\n+    use ebml::{EsI16, EsI32, EsI64, EsI8, EsInt};\n     use ebml::{EsLabel, EsOpaque, EsStr, EsU16, EsU32, EsU64, EsU8, EsUint};\n     use ebml::{EsVec, EsVecElt, EsVecLen, TaggedDoc};\n     use serialize;\n@@ -421,10 +421,10 @@ pub mod reader {\n }\n \n pub mod writer {\n-    use ebml::{Doc, EbmlEncoderTag, EsBool, EsEnum, EsEnumBody, EsEnumVid};\n-    use ebml::{EsF32, EsF64, EsFloat, EsI16, EsI32, EsI64, EsI8, EsInt};\n+    use ebml::{EbmlEncoderTag, EsBool, EsEnum, EsEnumBody, EsEnumVid};\n+    use ebml::{EsI16, EsI32, EsI64, EsI8, EsInt};\n     use ebml::{EsLabel, EsOpaque, EsStr, EsU16, EsU32, EsU64, EsU8, EsUint};\n-    use ebml::{EsVec, EsVecElt, EsVecLen, TaggedDoc};\n+    use ebml::{EsVec, EsVecElt, EsVecLen};\n \n     use core::io;\n     use core::str;"}, {"sha": "52cd0f51b5a52611d62fbb5d32ac749eb66cc61c", "filename": "src/libstd/flatpipes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibstd%2Fflatpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibstd%2Fflatpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fflatpipes.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -334,13 +334,13 @@ pub impl<T,F:Flattener<T>,C:ByteChan> FlatChan<T, F, C> {\n \n pub mod flatteners {\n     use ebml;\n-    use flatpipes::{ByteChan, BytePort, Flattener, Unflattener};\n+    use flatpipes::{Flattener, Unflattener};\n     use io_util::BufReader;\n     use json;\n     use serialize::{Encoder, Decoder, Encodable, Decodable};\n \n     use core::cast;\n-    use core::io::{Writer, Reader, BytesWriter, ReaderUtil};\n+    use core::io::{Writer, Reader, ReaderUtil};\n     use core::prelude::*;\n     use core::ptr;\n     use core::sys::size_of;\n@@ -637,7 +637,7 @@ mod test {\n     use net::tcp::TcpSocketBuf;\n \n     use core::int;\n-    use core::io::{BytesReader, BytesWriter};\n+    use core::io::BytesWriter;\n     use core::prelude::*;\n     use core::result;\n     use core::task;"}, {"sha": "8504b3e8ae5e0232c9eeca8ac608d9b26c1a54c2", "filename": "src/libstd/future.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibstd%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibstd%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffuture.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -23,7 +23,7 @@\n \n use core::cast;\n use core::cell::Cell;\n-use core::comm::{oneshot, ChanOne, PortOne, send_one, recv_one};\n+use core::comm::{oneshot, PortOne, send_one};\n use core::pipes::recv;\n use core::prelude::*;\n use core::task;"}, {"sha": "4525dc0ae61c0073d8735b14452c61e0957a4656", "filename": "src/libstd/getopts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibstd%2Fgetopts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibstd%2Fgetopts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fgetopts.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -461,7 +461,7 @@ pub enum FailType {\n  */\n pub mod groups {\n     use getopts::{HasArg, Long, Maybe, Multi, No, Occur, Opt, Optional, Req};\n-    use getopts::{Result, Short, Yes};\n+    use getopts::{Short, Yes};\n \n     use core::prelude::*;\n     use core::str;"}, {"sha": "4fd06f4316444c326deac528bb294a2af20af0ab", "filename": "src/libstd/net_ip.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibstd%2Fnet_ip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibstd%2Fnet_ip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_ip.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -149,7 +149,7 @@ pub fn get_addr(node: &str, iotask: &iotask)\n }\n \n pub mod v4 {\n-    use net::ip::{IpAddr, Ipv4, Ipv6, ParseAddrErr};\n+    use net::ip::{IpAddr, Ipv4, ParseAddrErr};\n     use uv::ll;\n     use uv_ip4_addr = uv::ll::ip4_addr;\n     use uv_ip4_name = uv::ll::ip4_name;"}, {"sha": "998b8640b68829ec77457b26e800e02999375087", "filename": "src/libstd/net_tcp.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibstd%2Fnet_tcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibstd%2Fnet_tcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_tcp.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -24,7 +24,7 @@ use core::io::{Reader, ReaderUtil, Writer};\n use core::io;\n use core::libc::size_t;\n use core::libc;\n-use core::comm::{stream, Chan, Port, SharedChan};\n+use core::comm::{stream, Port, SharedChan};\n use core::prelude::*;\n use core::ptr;\n use core::result::{Result};\n@@ -1449,7 +1449,7 @@ pub mod test {\n     use uv;\n \n     use core::io;\n-    use core::comm::{stream, Chan, Port, SharedChan};\n+    use core::comm::{stream, SharedChan};\n     use core::prelude::*;\n     use core::result;\n     use core::str;"}, {"sha": "761a17352a97998e7b2e7f177115d77dcc3b25b6", "filename": "src/libstd/sort.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibstd%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibstd%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsort.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -13,7 +13,7 @@\n use core::cmp::{Eq, Ord};\n use core::prelude::*;\n use core::util;\n-use core::vec::{len, push};\n+use core::vec::len;\n use core::vec;\n \n type Le<'self, T> = &'self fn(v1: &T, v2: &T) -> bool;"}, {"sha": "dbfe3d6a8b57f9e2768de54d7e89c9129f546c10", "filename": "src/libstd/task_pool.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibstd%2Ftask_pool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibstd%2Ftask_pool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask_pool.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -11,12 +11,14 @@\n /// A task pool abstraction. Useful for achieving predictable CPU\n /// parallelism.\n \n-use core::comm::{Chan, Port};\n+use core::comm::Chan;\n use core::prelude::*;\n-use core::task::{SchedMode, SingleThreaded};\n+use core::task::SchedMode;\n use core::task;\n use core::vec;\n \n+#[cfg(test)] use core::task::SingleThreaded;\n+\n enum Msg<T> {\n     Execute(~fn(&T)),\n     Quit"}, {"sha": "853a17abb55bb2261f6c48b39f540b58141539b6", "filename": "src/libstd/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibstd%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibstd%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftest.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -26,7 +26,7 @@ use core::either::Either;\n use core::either;\n use core::io::WriterUtil;\n use core::io;\n-use core::comm::{stream, Chan, Port, SharedChan};\n+use core::comm::{stream, SharedChan};\n use core::option;\n use core::prelude::*;\n use core::result;"}, {"sha": "3130abdc7cd9919c26a3b797dae3a7939efad02e", "filename": "src/libstd/uv_global_loop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibstd%2Fuv_global_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibstd%2Fuv_global_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_global_loop.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -14,9 +14,9 @@ use iotask = uv_iotask;\n use uv_iotask::{IoTask, spawn_iotask};\n \n use core::clone::Clone;\n-use core::comm::{Port, Chan, SharedChan, select2i};\n+use core::comm::Chan;\n use core::option::{Some, None};\n-use core::task::{task, SingleThreaded, spawn};\n+use core::task::task;\n use core::task;\n use core::unstable::global::{global_data_clone_create, global_data_clone};\n use core::unstable::weak_task::weaken_task;"}, {"sha": "f6cc35e0c9ea088474441fbfb36137e3375b8440", "filename": "src/libstd/uv_ll.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibstd%2Fuv_ll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibstd%2Fuv_ll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_ll.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -375,11 +375,15 @@ pub mod uv_ll_struct_stubgen {\n     #[cfg(target_os = \"freebsd\")]\n     use super::{\n         uv_async_t_32bit_unix_riders,\n-        uv_tcp_t_32bit_unix_riders,\n         uv_timer_t_32bit_unix_riders,\n         uv_write_t_32bit_unix_riders,\n     };\n \n+    #[cfg(target_os = \"linux\")]\n+    #[cfg(target_os = \"android\")]\n+    #[cfg(target_os = \"freebsd\")]\n+    use super::uv_tcp_t_32bit_unix_riders;\n+\n     pub fn gen_stub_uv_tcp_t() -> uv_tcp_t {\n         return gen_stub_os();\n         #[cfg(target_os = \"linux\")]"}, {"sha": "a6d9ba224d725a4637169d84fc18dd69e7a8f978", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -10,7 +10,7 @@\n \n // The Rust abstract syntax tree.\n \n-use codemap::{span, FileName, spanned};\n+use codemap::{span, spanned};\n \n use core::cast;\n use core::option::{None, Option, Some};"}, {"sha": "11178054b4c32975c7d64eed69fb94fb7b6e375e", "filename": "src/libsyntax/ast_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibsyntax%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibsyntax%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -12,7 +12,7 @@ use core::prelude::*;\n \n use ast::*;\n use ast;\n-use ast_util::{inlined_item_utils, path_to_ident, stmt_id};\n+use ast_util::{inlined_item_utils, stmt_id};\n use ast_util;\n use attr;\n use codemap;"}, {"sha": "131b6616df6d4d0e48e4ba80b66ce381d898049f", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -13,7 +13,7 @@ use core::prelude::*;\n use ast::*;\n use ast;\n use ast_util;\n-use codemap::{span, BytePos, dummy_sp, spanned};\n+use codemap::{span, dummy_sp, spanned};\n use parse::token;\n use visit;\n use opt_vec;"}, {"sha": "93e2ad64c8c2311a542ee6ad689f8e3562e2b722", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -12,12 +12,12 @@ use core::prelude::*;\n \n use ast;\n use codemap;\n-use codemap::{CodeMap, span, ExpnInfo, ExpandedFrom, dummy_sp};\n-use codemap::{CallInfo, NameAndSpan};\n+use codemap::{CodeMap, span, ExpnInfo, ExpandedFrom};\n+use codemap::CallInfo;\n use diagnostic::span_handler;\n use ext;\n use parse;\n-use parse::{parser, token};\n+use parse::token;\n \n use core::vec;\n use core::hashmap::linear::LinearMap;"}, {"sha": "c9e17715999396081047318031a9b5acefba1963", "filename": "src/libsyntax/ext/deriving/clone.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -11,14 +11,7 @@\n use core::prelude::*;\n \n use ast;\n-use ast::{TraitTyParamBound, Ty, and, bind_by_ref, binop, deref, enum_def};\n-use ast::{expr, expr_match, ident, impure_fn, item, item_};\n-use ast::{item_enum, item_impl, item_struct, Generics};\n-use ast::{m_imm, meta_item, method};\n-use ast::{named_field, or, pat, pat_ident, pat_wild, public, pure_fn};\n-use ast::{stmt, struct_def, struct_variant_kind};\n-use ast::{sty_region, tuple_variant_kind, ty_nil, TyParam};\n-use ast::{TyParamBound, ty_path, ty_rptr, unnamed_field, variant};\n+use ast::*;\n use ext::base::ext_ctxt;\n use ext::build;\n use ext::deriving::*;"}, {"sha": "07b2835d44cdf72b0994f6f0ed1bf4ecb25feabb", "filename": "src/libsyntax/ext/deriving/eq.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibsyntax%2Fext%2Fderiving%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibsyntax%2Fext%2Fderiving%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Feq.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -11,14 +11,7 @@\n use core::prelude::*;\n \n use ast;\n-use ast::{TraitTyParamBound, Ty, and, bind_by_ref, binop, deref, enum_def};\n-use ast::{expr, expr_match, ident, impure_fn, item, item_};\n-use ast::{item_enum, item_impl, item_struct, Generics};\n-use ast::{m_imm, meta_item, method};\n-use ast::{named_field, or, pat, pat_ident, pat_wild, public, pure_fn};\n-use ast::{stmt, struct_def, struct_variant_kind};\n-use ast::{sty_region, tuple_variant_kind, ty_nil, TyParam};\n-use ast::{TyParamBound, ty_path, ty_rptr, unnamed_field, variant};\n+use ast::*;\n use ext::base::ext_ctxt;\n use ext::build;\n use ext::deriving::*;"}, {"sha": "e2a43591ef02671909759d97b14997a18891cbcd", "filename": "src/libsyntax/ext/deriving/iter_bytes.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibsyntax%2Fext%2Fderiving%2Fiter_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibsyntax%2Fext%2Fderiving%2Fiter_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fiter_bytes.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -11,14 +11,7 @@\n use core::prelude::*;\n \n use ast;\n-use ast::{TraitTyParamBound, Ty, and, bind_by_ref, binop, deref, enum_def};\n-use ast::{expr, expr_match, ident, impure_fn, item, item_};\n-use ast::{item_enum, item_impl, item_struct, Generics};\n-use ast::{m_imm, meta_item, method};\n-use ast::{named_field, or, pat, pat_ident, pat_wild, public, pure_fn};\n-use ast::{stmt, struct_def, struct_variant_kind};\n-use ast::{sty_region, tuple_variant_kind, ty_nil, TyParam};\n-use ast::{TyParamBound, ty_path, ty_rptr, unnamed_field, variant};\n+use ast::*;\n use ext::base::ext_ctxt;\n use ext::build;\n use ext::deriving::*;"}, {"sha": "e2c52fad1102af449c1fdb171e9781cbf2b6a3cb", "filename": "src/libsyntax/ext/deriving/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -14,17 +14,17 @@\n use core::prelude::*;\n \n use ast;\n-use ast::{TraitTyParamBound, Ty, and, bind_by_ref, binop, deref, enum_def};\n-use ast::{expr, expr_match, ident, impure_fn, item, item_};\n+use ast::{TraitTyParamBound, Ty, bind_by_ref, deref, enum_def};\n+use ast::{expr, expr_match, ident, item, item_};\n use ast::{item_enum, item_impl, item_struct, Generics};\n use ast::{m_imm, meta_item, method};\n-use ast::{named_field, or, pat, pat_ident, pat_wild, public, pure_fn};\n-use ast::{stmt, struct_def, struct_variant_kind};\n-use ast::{sty_region, tuple_variant_kind, ty_nil, TyParam};\n-use ast::{TyParamBound, ty_path, ty_rptr, unnamed_field, variant};\n+use ast::{named_field, pat, pat_ident, public};\n+use ast::{struct_def, struct_variant_kind};\n+use ast::{tuple_variant_kind};\n+use ast::{ty_path, unnamed_field, variant};\n use ext::base::ext_ctxt;\n use ext::build;\n-use codemap::{span, spanned};\n+use codemap::span;\n use parse::token::special_idents::clownshoes_extensions;\n use opt_vec;\n "}, {"sha": "6f49fe02239d31a781ef334841dc9a2335f5cadc", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -12,15 +12,15 @@ use core::prelude::*;\n \n use ast::{blk_, attribute_, attr_outer, meta_word};\n use ast::{crate, expr_, expr_mac, mac_invoc_tt};\n-use ast::{tt_delim, tt_tok, item_mac, stmt_, stmt_mac, stmt_expr, stmt_semi};\n+use ast::{item_mac, stmt_, stmt_mac, stmt_expr, stmt_semi};\n use ast;\n use attr;\n use codemap;\n use codemap::{span, CallInfo, ExpandedFrom, NameAndSpan, spanned};\n use ext::base::*;\n use fold::*;\n use parse;\n-use parse::{parser, parse_item_from_source_str, new_parser_from_tts};\n+use parse::{parse_item_from_source_str};\n \n use core::vec;\n "}, {"sha": "075474a2a0d030b60d2ce4ed1a85208a62d9406d", "filename": "src/libsyntax/ext/pipes/ast_builder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -15,12 +15,12 @@\n \n use core::prelude::*;\n \n-use ast::{ident, node_id};\n+use ast::ident;\n use ast;\n use ast_util;\n use codemap::{span, respan, dummy_sp, spanned};\n use codemap;\n-use ext::base::{ext_ctxt, mk_ctxt};\n+use ext::base::ext_ctxt;\n use ext::quote::rt::*;\n use opt_vec;\n use opt_vec::OptVec;"}, {"sha": "81b2442ea8257987e074f0bd11aaf26bc674fd16", "filename": "src/libsyntax/ext/pipes/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibsyntax%2Fext%2Fpipes%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibsyntax%2Fext%2Fpipes%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fmod.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -49,7 +49,7 @@ use ext::base;\n use ext::base::ext_ctxt;\n use ext::pipes::parse_proto::proto_parser;\n use ext::pipes::pipec::gen_init;\n-use ext::pipes::proto::{visit, protocol};\n+use ext::pipes::proto::visit;\n use parse::lexer::{new_tt_reader, reader};\n use parse::parser::Parser;\n "}, {"sha": "e6619d6dcfae060298bfc0ef0003c80553a594d5", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -19,8 +19,8 @@ use parse::parser::Parser;\n use parse::token::{Token, EOF, to_str, nonterminal};\n use parse::token;\n \n-use core::hashmap::linear::LinearMap;\n use core::prelude::*;\n+use core::hashmap::linear::LinearMap;\n \n /* This is an Earley-like parser, without support for in-grammar nonterminals,\n only by calling out to the main rust parser for named nonterminals (which it"}, {"sha": "9a8c288c3a17281bfdaf0616116ba743e7dbca43", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -22,7 +22,7 @@ use ext::tt::macro_parser::{parse, parse_or_else, success, failure};\n use parse::lexer::{new_tt_reader, reader};\n use parse::parser::Parser;\n use parse::token::special_idents;\n-use parse::token::{FAT_ARROW, SEMI, LBRACE, RBRACE, nt_matchers, nt_tt};\n+use parse::token::{FAT_ARROW, SEMI, nt_matchers, nt_tt};\n use print;\n \n use core::io;"}, {"sha": "0804951327a22c510f28e36d89a5cc5d99ae5e42", "filename": "src/libsyntax/parse/comments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibsyntax%2Fparse%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibsyntax%2Fparse%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fcomments.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -11,7 +11,7 @@\n use core::prelude::*;\n \n use ast;\n-use codemap::{BytePos, CharPos, CodeMap, FileMap, Pos};\n+use codemap::{BytePos, CharPos, CodeMap, Pos};\n use diagnostic;\n use parse::lexer::{is_whitespace, get_str_from, reader};\n use parse::lexer::{StringReader, bump, is_eof, nextch, TokenAndSpan};"}, {"sha": "cdb67129c355bb9df9ecb1f99381c675d2842d08", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -13,16 +13,16 @@\n \n use ast::node_id;\n use ast;\n-use codemap::{span, CodeMap, FileMap, CharPos, BytePos};\n+use codemap::{span, CodeMap};\n use codemap;\n use diagnostic::{span_handler, mk_span_handler, mk_handler, Emitter};\n use parse::attr::parser_attr;\n-use parse::lexer::{reader, StringReader};\n+use parse::lexer::reader;\n use parse::parser::Parser;\n use parse::token::{ident_interner, mk_ident_interner};\n \n use core::io;\n-use core::option::{None, Option, Some};\n+use core::option::{None, Option};\n use core::path::Path;\n use core::result::{Err, Ok, Result};\n "}, {"sha": "d93e5995d4f8ed232c13b717a25f7fe374ed640c", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -14,7 +14,7 @@ use ast::{Sigil, BorrowedSigil, ManagedSigil, OwnedSigil, RustAbi};\n use ast::{CallSugar, NoSugar, DoSugar, ForSugar};\n use ast::{TyBareFn, TyClosure};\n use ast::{RegionTyParamBound, TraitTyParamBound};\n-use ast::{provided, public, pure_fn, purity};\n+use ast::{provided, public, purity};\n use ast::{_mod, add, arg, arm, attribute, bind_by_ref, bind_infer};\n use ast::{bind_by_copy, bitand, bitor, bitxor, blk};\n use ast::{blk_check_mode, box, by_copy, by_ref};\n@@ -27,7 +27,7 @@ use ast::{expr_field, expr_fn_block, expr_if, expr_index};\n use ast::{expr_lit, expr_log, expr_loop, expr_loop_body, expr_mac};\n use ast::{expr_method_call, expr_paren, expr_path, expr_repeat};\n use ast::{expr_ret, expr_swap, expr_struct, expr_tup, expr_unary};\n-use ast::{expr_vec, expr_vstore, expr_vstore_mut_box, expr_inline_asm};\n+use ast::{expr_vec, expr_vstore, expr_vstore_mut_box};\n use ast::{expr_vstore_slice, expr_vstore_box};\n use ast::{expr_vstore_mut_slice, expr_while, extern_fn, field, fn_decl};\n use ast::{expr_vstore_uniq, TyClosure, TyBareFn, Onceness, Once, Many};\n@@ -41,7 +41,7 @@ use ast::{m_imm, m_mutbl, mac_, mac_invoc_tt, matcher, match_nonterminal};\n use ast::{match_seq, match_tok, method, mode, module_ns, mt, mul, mutability};\n use ast::{named_field, neg, node_id, noreturn, not, pat, pat_box, pat_enum};\n use ast::{pat_ident, pat_lit, pat_range, pat_region, pat_struct};\n-use ast::{pat_tup, pat_uniq, pat_wild, path, private};\n+use ast::{pat_tup, pat_uniq, pat_wild, private};\n use ast::{rem, required};\n use ast::{ret_style, return_val, self_ty, shl, shr, stmt, stmt_decl};\n use ast::{stmt_expr, stmt_semi, stmt_mac, struct_def, struct_field};\n@@ -50,25 +50,25 @@ use ast::{sty_box, sty_region, sty_static, sty_uniq, sty_value};\n use ast::{token_tree, trait_method, trait_ref, tt_delim, tt_seq, tt_tok};\n use ast::{tt_nonterminal, tuple_variant_kind, Ty, ty_, ty_bot, ty_box};\n use ast::{ty_field, ty_fixed_length_vec, ty_closure, ty_bare_fn};\n-use ast::{ty_infer, ty_mac, ty_method};\n+use ast::{ty_infer, ty_method};\n use ast::{ty_nil, TyParam, TyParamBound, ty_path, ty_ptr, ty_rptr};\n use ast::{ty_tup, ty_u32, ty_uniq, ty_vec, type_value_ns, uniq};\n-use ast::{unnamed_field, unsafe_blk, unsafe_fn, variant, view_item};\n+use ast::{unnamed_field, unsafe_blk, unsafe_fn, view_item};\n use ast::{view_item_, view_item_extern_mod, view_item_use};\n use ast::{view_path, view_path_glob, view_path_list, view_path_simple};\n-use ast::{visibility, vstore, vstore_box, vstore_fixed, vstore_slice};\n+use ast::visibility;\n use ast;\n use ast_util::{ident_to_path, operator_prec};\n use ast_util;\n-use codemap::{span,FssNone, BytePos, spanned, respan, mk_sp};\n+use codemap::{span, BytePos, spanned, mk_sp};\n use codemap;\n use parse::attr::parser_attr;\n use parse::classify;\n use parse::common::{seq_sep_none, token_to_str};\n use parse::common::{seq_sep_trailing_disallowed, seq_sep_trailing_allowed};\n use parse::lexer::reader;\n use parse::lexer::TokenAndSpan;\n-use parse::obsolete::{ObsoleteClassTraits, ObsoleteModeInFnType};\n+use parse::obsolete::{ObsoleteClassTraits};\n use parse::obsolete::{ObsoleteLet, ObsoleteFieldTerminator};\n use parse::obsolete::{ObsoleteMoveInit, ObsoleteBinaryMove};\n use parse::obsolete::{ObsoleteSyntax, ObsoleteLowerCaseKindBounds};\n@@ -78,7 +78,7 @@ use parse::obsolete::{ObsoleteMutVector, ObsoleteTraitImplVisibility};\n use parse::obsolete::{ObsoleteRecordType, ObsoleteRecordPattern};\n use parse::obsolete::{ObsoletePostFnTySigil};\n use parse::obsolete::{ObsoleteBareFnType, ObsoleteNewtypeEnum};\n-use parse::obsolete::{ObsoleteMode, ObsoleteImplicitSelf};\n+use parse::obsolete::ObsoleteMode;\n use parse::obsolete::{ObsoleteLifetimeNotation, ObsoleteConstManagedPointer};\n use parse::obsolete::{ObsoletePurity, ObsoleteStaticMethod};\n use parse::obsolete::{ObsoleteConstItem, ObsoleteFixedLengthVectorType};\n@@ -90,7 +90,7 @@ use parse::{new_sub_parser_from_file, next_node_id, ParseSess};\n use opt_vec;\n use opt_vec::OptVec;\n \n-use core::either::{Either, Left, Right};\n+use core::either::Either;\n use core::either;\n use core::hashmap::linear::LinearSet;\n use core::vec;\n@@ -3107,11 +3107,15 @@ pub impl Parser {\n         // XXX: clownshoes\n         let ident = special_idents::clownshoes_extensions;\n \n+        // Special case: if the next identifier that follows is '(', don't\n+        // allow this to be parsed as a trait.\n+        let could_be_trait = *self.token != token::LPAREN;\n+\n         // Parse the trait.\n         let mut ty = self.parse_ty(false);\n \n         // Parse traits, if necessary.\n-        let opt_trait = if self.eat_keyword(&~\"for\") {\n+        let opt_trait = if could_be_trait && self.eat_keyword(&~\"for\") {\n             // New-style trait. Reinterpret the type as a trait.\n             let opt_trait_ref = match ty.node {\n                 ty_path(path, node_id) => {"}, {"sha": "66907471c98f69f692fb313540009665f63de6d7", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -19,11 +19,11 @@ use attr;\n use codemap::{CodeMap, BytePos};\n use codemap;\n use diagnostic;\n-use parse::classify::{expr_is_simple_block, expr_requires_semi_to_be_stmt};\n+use parse::classify::expr_is_simple_block;\n use parse::token::ident_interner;\n-use parse::{comments, lexer, token};\n+use parse::{comments, token};\n use parse;\n-use print::pp::{break_offset, word, Printer, space, zerobreak, hardbreak};\n+use print::pp::{break_offset, word, space, zerobreak, hardbreak};\n use print::pp::{breaks, consistent, inconsistent, eof};\n use print::pp;\n use print::pprust;"}, {"sha": "5f907b35e412f8e976c6b0b1f62a6cf3073d0a27", "filename": "src/test/compile-fail/issue-4335.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Ftest%2Fcompile-fail%2Fissue-4335.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Ftest%2Fcompile-fail%2Fissue-4335.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-4335.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -8,10 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// xfail-test\n fn id<T>(t: T) -> T { t }\n \n-fn f<T>(v: &'r T) -> &'r fn()->T { id::<&'r fn()->T>(|| *v) } //~ ERROR ???\n+fn f<'r, T>(v: &'r T) -> &'r fn()->T { id::<&'r fn()->T>(|| *v) } //~ ERROR cannot infer an appropriate lifetime due to conflicting requirements\n \n fn main() {\n     let v = &5;"}, {"sha": "f3b0a1f73f93352c0f1e61d716507843954e3549", "filename": "src/test/compile-fail/unused-imports-warn.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Ftest%2Fcompile-fail%2Funused-imports-warn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Ftest%2Fcompile-fail%2Funused-imports-warn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funused-imports-warn.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -17,14 +17,19 @@ use core::either::Right;        //~ ERROR unused import\n use core::util::*;              // shouldn't get errors for not using\n                                 // everything imported\n \n-// Should only get one error instead of two errors here\n+// Should get errors for both 'Some' and 'None'\n use core::option::{Some, None}; //~ ERROR unused import\n+                                //~^ ERROR unused import\n \n use core::io::ReaderUtil;       //~ ERROR unused import\n // Be sure that if we just bring some methods into scope that they're also\n // counted as being used.\n use core::io::WriterUtil;\n \n+// Make sure this import is warned about when at least one of its imported names\n+// is unused\n+use core::vec::{filter, map};   //~ ERROR unused import\n+\n mod foo {\n     pub struct Point{x: int, y: int}\n     pub struct Square{p: Point, h: uint, w: uint}\n@@ -51,4 +56,7 @@ fn main() {\n     let a = 3;\n     ignore(a);\n     io::stdout().write_str(~\"a\");\n+    let _a = do map(~[2]) |&x| {\n+      x + 2\n+    };\n }"}, {"sha": "8e65c15f1c4ae42ac2a24d8d63e695c8b2960cfd", "filename": "src/test/run-pass/issue-4325.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Ftest%2Frun-pass%2Fissue-4325.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Ftest%2Frun-pass%2Fissue-4325.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4325.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct Node<'self, T> {\n+  val: T,\n+  next: Option<&'self Node<'self, T>>\n+}\n+\n+impl<'self, T> Node<'self, T> {\n+  fn get(&self) -> &'self T {\n+    match self.next {\n+      Some(ref next) => next.get(),\n+      None => &self.val\n+    }\n+  }\n+}\n+\n+fn main() {}"}, {"sha": "159ba4bb2559e1f712c176ab1444d1cc673dae70", "filename": "src/test/run-pass/issue-4333.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/31563f53d9237c21423533c16a15c37b10a6f418/src%2Ftest%2Frun-pass%2Fissue-4333.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31563f53d9237c21423533c16a15c37b10a6f418/src%2Ftest%2Frun-pass%2Fissue-4333.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4333.rs?ref=31563f53d9237c21423533c16a15c37b10a6f418", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let stdout = &io::stdout() as &io::WriterUtil;\n+    stdout.write_line(\"Hello!\");\n+}"}]}