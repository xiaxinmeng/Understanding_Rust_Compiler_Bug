{"sha": "e5df0cc770893d3139f7b5610e09eebe5df79ae1", "node_id": "C_kwDOAAsO6NoAKGU1ZGYwY2M3NzA4OTNkMzEzOWY3YjU2MTBlMDllZWJlNWRmNzlhZTE", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-03T00:10:44Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-07T01:40:31Z"}, "message": "adjust tests for removal of unsized_locals", "tree": {"sha": "f533d473788094d94bfae9d6542fe624ca21cf52", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f533d473788094d94bfae9d6542fe624ca21cf52"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5df0cc770893d3139f7b5610e09eebe5df79ae1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5df0cc770893d3139f7b5610e09eebe5df79ae1", "html_url": "https://github.com/rust-lang/rust/commit/e5df0cc770893d3139f7b5610e09eebe5df79ae1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5df0cc770893d3139f7b5610e09eebe5df79ae1/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5f1c263806880280a3e4d9b01170791d360c618", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5f1c263806880280a3e4d9b01170791d360c618", "html_url": "https://github.com/rust-lang/rust/commit/d5f1c263806880280a3e4d9b01170791d360c618"}], "stats": {"total": 98, "additions": 77, "deletions": 21}, "files": [{"sha": "8dd07c585c627a3f68c773755bc458d4dc042889", "filename": "tests/fail/unsized-local.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e5df0cc770893d3139f7b5610e09eebe5df79ae1/tests%2Ffail%2Funsized-local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5df0cc770893d3139f7b5610e09eebe5df79ae1/tests%2Ffail%2Funsized-local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Funsized-local.rs?ref=e5df0cc770893d3139f7b5610e09eebe5df79ae1", "patch": "@@ -0,0 +1,23 @@\n+#![feature(unsized_locals)]\n+#![allow(incomplete_features)]\n+\n+fn main() {\n+    pub trait Foo {\n+        fn foo(self) -> String;\n+    }\n+\n+    struct A;\n+\n+    impl Foo for A {\n+        fn foo(self) -> String {\n+            format!(\"hello\")\n+        }\n+    }\n+\n+    let x = *(Box::new(A) as Box<dyn Foo>); //~ERROR unsized locals are not supported\n+    assert_eq!(x.foo(), format!(\"hello\"));\n+\n+    // I'm not sure whether we want this to work\n+    let x = Box::new(A) as Box<dyn Foo>;\n+    assert_eq!(x.foo(), format!(\"hello\"));\n+}"}, {"sha": "8277bc4546cb197dc7010657eebc90bd81d37025", "filename": "tests/fail/unsized-local.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e5df0cc770893d3139f7b5610e09eebe5df79ae1/tests%2Ffail%2Funsized-local.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5df0cc770893d3139f7b5610e09eebe5df79ae1/tests%2Ffail%2Funsized-local.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Funsized-local.stderr?ref=e5df0cc770893d3139f7b5610e09eebe5df79ae1", "patch": "@@ -0,0 +1,14 @@\n+error: unsupported operation: unsized locals are not supported\n+  --> $DIR/unsized-local.rs:LL:CC\n+   |\n+LL |     let x = *(Box::new(A) as Box<dyn Foo>);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unsized locals are not supported\n+   |\n+   = help: this is likely not a bug in the program; it indicates that the program performed an operation that the interpreter does not support\n+   = note: backtrace:\n+   = note: inside `main` at $DIR/unsized-local.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "908d521a0d8163a1568c67d6a0bf1ef90b6d6dd5", "filename": "tests/pass/dyn-traits.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e5df0cc770893d3139f7b5610e09eebe5df79ae1/tests%2Fpass%2Fdyn-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5df0cc770893d3139f7b5610e09eebe5df79ae1/tests%2Fpass%2Fdyn-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fdyn-traits.rs?ref=e5df0cc770893d3139f7b5610e09eebe5df79ae1", "patch": "@@ -1,6 +1,3 @@\n-#![feature(unsized_locals, unsized_fn_params)]\n-#![allow(incomplete_features)]\n-\n fn ref_box_dyn() {\n     struct Struct(i32);\n \n@@ -75,6 +72,9 @@ fn box_box_trait() {\n     assert!(unsafe { DROPPED });\n }\n \n+// Disabled for now: unsized locals are not supported,\n+// their current MIR encoding is just not great.\n+/*\n fn unsized_dyn() {\n     pub trait Foo {\n         fn foo(self) -> String;\n@@ -95,7 +95,6 @@ fn unsized_dyn() {\n     let x = Box::new(A) as Box<dyn Foo>;\n     assert_eq!(x.foo(), format!(\"hello\"));\n }\n-\n fn unsized_dyn_autoderef() {\n     pub trait Foo {\n         fn foo(self) -> String;\n@@ -140,12 +139,9 @@ fn unsized_dyn_autoderef() {\n     let x = Box::new(|| \"hello\".to_owned()) as Box<dyn FnMut() -> String>;\n     assert_eq!(&x.foo() as &str, \"hello\");\n }\n+*/\n \n fn main() {\n     ref_box_dyn();\n     box_box_trait();\n-\n-    // \"exotic\" receivers\n-    unsized_dyn();\n-    unsized_dyn_autoderef();\n }"}, {"sha": "bbab1125a0afdc38dae846dda160081d993c4540", "filename": "tests/pass/unsized-tuple-impls.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d5f1c263806880280a3e4d9b01170791d360c618/tests%2Fpass%2Funsized-tuple-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5f1c263806880280a3e4d9b01170791d360c618/tests%2Fpass%2Funsized-tuple-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Funsized-tuple-impls.rs?ref=d5f1c263806880280a3e4d9b01170791d360c618", "patch": "@@ -1,13 +0,0 @@\n-#![feature(unsized_tuple_coercion)]\n-use std::mem;\n-\n-fn main() {\n-    let x: &(i32, i32, [i32]) = &(0, 1, [2, 3]);\n-    let y: &(i32, i32, [i32]) = &(0, 1, [2, 3, 4]);\n-    let mut a = [y, x];\n-    a.sort();\n-    assert_eq!(a, [x, y]);\n-\n-    assert_eq!(&format!(\"{:?}\", a), \"[(0, 1, [2, 3]), (0, 1, [2, 3, 4])]\");\n-    assert_eq!(mem::size_of_val(x), 16);\n-}"}, {"sha": "c7e0c7925753fcf43aef70fe8a593c6739a97439", "filename": "tests/pass/unsized.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/e5df0cc770893d3139f7b5610e09eebe5df79ae1/tests%2Fpass%2Funsized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5df0cc770893d3139f7b5610e09eebe5df79ae1/tests%2Fpass%2Funsized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Funsized.rs?ref=e5df0cc770893d3139f7b5610e09eebe5df79ae1", "patch": "@@ -0,0 +1,36 @@\n+#![feature(unsized_tuple_coercion)]\n+#![feature(unsized_fn_params)]\n+\n+use std::mem;\n+\n+fn unsized_tuple() {\n+    let x: &(i32, i32, [i32]) = &(0, 1, [2, 3]);\n+    let y: &(i32, i32, [i32]) = &(0, 1, [2, 3, 4]);\n+    let mut a = [y, x];\n+    a.sort();\n+    assert_eq!(a, [x, y]);\n+\n+    assert_eq!(&format!(\"{:?}\", a), \"[(0, 1, [2, 3]), (0, 1, [2, 3, 4])]\");\n+    assert_eq!(mem::size_of_val(x), 16);\n+}\n+\n+fn unsized_params() {\n+    pub fn f0(_f: dyn FnOnce()) {}\n+    pub fn f1(_s: str) {}\n+    pub fn f2(_x: i32, _y: [i32]) {}\n+    pub fn f3(_p: dyn Send) {}\n+\n+    let c: Box<dyn FnOnce()> = Box::new(|| {});\n+    f0(*c);\n+    let foo = \"foo\".to_string().into_boxed_str();\n+    f1(*foo);\n+    let sl: Box::<[i32]> = [0, 1, 2].to_vec().into_boxed_slice();\n+    f2(5, *sl);\n+    let p: Box<dyn Send> = Box::new((1, 2));\n+    f3(*p);\n+}\n+\n+fn main() {\n+    unsized_tuple();\n+    unsized_params();\n+}"}]}