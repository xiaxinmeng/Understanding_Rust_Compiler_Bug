{"sha": "0b7af403843d54c3200f8f9accbd2b279d6a7a0c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiN2FmNDAzODQzZDU0YzMyMDBmOGY5YWNjYmQyYjI3OWQ2YTdhMGM=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-08-18T00:49:54Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-08-18T00:49:54Z"}, "message": "rustc: Use explicit return blocks", "tree": {"sha": "423c9870e2c7f86a712e991b4373afecbbaf5bd0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/423c9870e2c7f86a712e991b4373afecbbaf5bd0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b7af403843d54c3200f8f9accbd2b279d6a7a0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b7af403843d54c3200f8f9accbd2b279d6a7a0c", "html_url": "https://github.com/rust-lang/rust/commit/0b7af403843d54c3200f8f9accbd2b279d6a7a0c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b7af403843d54c3200f8f9accbd2b279d6a7a0c/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df51fe36f190ab8831549d7f8854372fa142f8b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/df51fe36f190ab8831549d7f8854372fa142f8b3", "html_url": "https://github.com/rust-lang/rust/commit/df51fe36f190ab8831549d7f8854372fa142f8b3"}], "stats": {"total": 66, "additions": 36, "deletions": 30}, "files": [{"sha": "8ecac617e1953e5805656cde1bfd150b84c1abe2", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 30, "deletions": 27, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/0b7af403843d54c3200f8f9accbd2b279d6a7a0c/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b7af403843d54c3200f8f9accbd2b279d6a7a0c/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=0b7af403843d54c3200f8f9accbd2b279d6a7a0c", "patch": "@@ -1269,8 +1269,7 @@ fn make_copy_glue(cx: &@block_ctxt, v: ValueRef, t: &ty::t) {\n         bcx = iter_structural_ty(bcx, v, t, bind copy_ty(_, _, _)).bcx;\n     } else { bcx = cx; }\n \n-    bcx = trans_fn_cleanups(bcx);\n-    bcx.build.RetVoid();\n+    build_return(bcx);\n }\n \n fn incr_refcnt_of_boxed(cx: &@block_ctxt, box_ptr: ValueRef) -> result {\n@@ -1376,8 +1375,7 @@ fn make_free_glue(cx: &@block_ctxt, v0: ValueRef, t: &ty::t) {\n           _ { rslt(cx, C_nil()) }\n         };\n \n-    let bcx = trans_fn_cleanups(rs.bcx);\n-    bcx.build.RetVoid();\n+    build_return(rs.bcx);\n }\n \n fn maybe_free_ivec_heap_part(cx: &@block_ctxt, v0: ValueRef, unit_ty: ty::t)\n@@ -1446,8 +1444,7 @@ fn make_drop_glue(cx: &@block_ctxt, v0: ValueRef, t: &ty::t) {\n           }\n         };\n \n-    let bcx = trans_fn_cleanups(rs.bcx);\n-    bcx.build.RetVoid();\n+    build_return(rs.bcx);\n }\n \n fn trans_res_drop(cx: @block_ctxt, rs: ValueRef, did: &ast::def_id,\n@@ -3727,8 +3724,7 @@ fn trans_for_each(cx: &@block_ctxt, local: &@ast::local, seq: &@ast::expr,\n \n     if !r.bcx.build.is_terminated() {\n         // if terminated is true, no need for the ret-fail\n-        let bcx = trans_fn_cleanups(r.bcx);\n-        bcx.build.RetVoid();\n+        build_return(r.bcx);\n     }\n \n     // Step 3: Call iter passing [lliterbody, llenv], plus other args.\n@@ -4407,7 +4403,7 @@ fn trans_bind_thunk(cx: &@local_ctxt, sp: &span, incoming_fty: &ty::t,\n     lltargetfn = bcx.build.PointerCast(lltargetfn, T_ptr(T_ptr(lltargetty)));\n     lltargetfn = bcx.build.Load(lltargetfn);\n     llvm::LLVMSetTailCall(bcx.build.FastCall(lltargetfn, llargs), 1);\n-    bcx.build.RetVoid();\n+    build_return(bcx);\n     finish_fn(fcx, lltop);\n     ret {val: llthunk, ty: llthunk_ty};\n }\n@@ -5448,11 +5444,14 @@ fn trans_ret(cx: &@block_ctxt, e: &option::t<@ast::expr>) -> result {\n           parent_none. { more_cleanups = false; }\n         }\n     }\n-    bcx = trans_fn_cleanups(bcx);\n-    bcx.build.RetVoid();\n+    build_return(bcx);\n     ret rslt(new_sub_block_ctxt(bcx, \"ret.unreachable\"), C_nil());\n }\n \n+fn build_return(bcx: &@block_ctxt) {\n+    bcx.build.Br(bcx_fcx(bcx).llreturn);\n+}\n+\n fn trans_be(cx: &@block_ctxt, e: &@ast::expr) -> result {\n     // FIXME: This should be a typestate precondition\n \n@@ -5610,16 +5609,15 @@ fn trans_block_cleanups(cx: &@block_ctxt, cleanup_cx: &@block_ctxt) ->\n     ret bcx;\n }\n \n-fn trans_fn_cleanups(bcx: &@block_ctxt) -> @block_ctxt {\n-    alt bcx_fcx(bcx).llobstacktoken {\n+fn trans_fn_cleanups(fcx: &@fn_ctxt, build: &lib::llvm::builder) {\n+    alt fcx.llobstacktoken {\n         some(lltoken_) {\n             let lltoken = lltoken_; // satisfy alias checker\n-            bcx.build.Call(bcx_ccx(bcx).upcalls.dynastack_free,\n-                           ~[bcx_fcx(bcx).lltaskptr, lltoken]);\n+            build.Call(fcx_ccx(fcx).upcalls.dynastack_free, ~[fcx.lltaskptr,\n+                                                              lltoken]);\n         }\n         none. { /* nothing to do */ }\n     }\n-    ret bcx;\n }\n \n iter block_locals(b: &ast::blk) -> @ast::local {\n@@ -5778,11 +5776,13 @@ fn mk_standard_basic_blocks(llfn: ValueRef) ->\n    {sa: BasicBlockRef,\n     ca: BasicBlockRef,\n     dt: BasicBlockRef,\n-    da: BasicBlockRef} {\n+    da: BasicBlockRef,\n+    rt: BasicBlockRef} {\n     ret {sa: llvm::LLVMAppendBasicBlock(llfn, str::buf(\"static_allocas\")),\n          ca: llvm::LLVMAppendBasicBlock(llfn, str::buf(\"copy_args\")),\n          dt: llvm::LLVMAppendBasicBlock(llfn, str::buf(\"derived_tydescs\")),\n-         da: llvm::LLVMAppendBasicBlock(llfn, str::buf(\"dynamic_allocas\"))};\n+         da: llvm::LLVMAppendBasicBlock(llfn, str::buf(\"dynamic_allocas\")),\n+         rt: llvm::LLVMAppendBasicBlock(llfn, str::buf(\"return\"))};\n }\n \n \n@@ -5816,6 +5816,7 @@ fn new_fn_ctxt_w_id(cx: @local_ctxt, sp: &span, llfndecl: ValueRef,\n           mutable llderivedtydescs_first: llbbs.dt,\n           mutable llderivedtydescs: llbbs.dt,\n           mutable lldynamicallocas: llbbs.da,\n+          mutable llreturn: llbbs.rt,\n           mutable llobstacktoken: none::<ValueRef>,\n           mutable llself: none::<val_self_pair>,\n           mutable lliterbody: none::<ValueRef>,\n@@ -5998,12 +5999,16 @@ fn populate_fn_ctxt_from_llself(fcx: @fn_ctxt, llself: val_self_pair) {\n \n \n // Ties up the llstaticallocas -> llcopyargs -> llderivedtydescs ->\n-// lldynamicallocas -> lltop edges.\n+// lldynamicallocas -> lltop edges, and builds the return block.\n fn finish_fn(fcx: &@fn_ctxt, lltop: BasicBlockRef) {\n     new_builder(fcx.llstaticallocas).Br(fcx.llcopyargs);\n     new_builder(fcx.llcopyargs).Br(fcx.llderivedtydescs_first);\n     new_builder(fcx.llderivedtydescs).Br(fcx.lldynamicallocas);\n     new_builder(fcx.lldynamicallocas).Br(lltop);\n+\n+    let ret_builder = new_builder(fcx.llreturn);\n+    trans_fn_cleanups(fcx, ret_builder);\n+    ret_builder.RetVoid();\n }\n \n // trans_closure: Builds an LLVM function out of a source function.\n@@ -6070,8 +6075,7 @@ fn trans_closure(bcx_maybe: &option::t<@block_ctxt>,\n     if !is_terminated(bcx) {\n         // FIXME: until LLVM has a unit type, we are moving around\n         // C_nil values rather than their void type.\n-        bcx = trans_fn_cleanups(bcx);\n-        bcx.build.RetVoid();\n+        build_return(bcx);\n     }\n \n     // Insert the mandatory first few basic blocks before lltop.\n@@ -6137,7 +6141,7 @@ fn trans_res_ctor(cx: @local_ctxt, sp: &span, dtor: &ast::_fn,\n     let flag = GEP_tup_like(bcx, tup_t, llretptr, ~[0, 0]);\n     bcx = flag.bcx;\n     bcx.build.Store(C_int(1), flag.val);\n-    bcx.build.RetVoid();\n+    build_return(bcx);\n     finish_fn(fcx, lltop);\n }\n \n@@ -6227,8 +6231,7 @@ fn trans_tag_variant(cx: @local_ctxt, tag_id: ast::node_id,\n         i += 1u;\n     }\n     bcx = trans_block_cleanups(bcx, find_scope_cx(bcx));\n-    bcx = trans_fn_cleanups(bcx);\n-    bcx.build.RetVoid();\n+    build_return(bcx);\n     finish_fn(fcx, lltop);\n }\n \n@@ -6433,7 +6436,7 @@ fn create_main_wrapper(ccx: &@crate_ctxt, sp: &span,\n             };\n             bcx.build.FastCall(main_llfn, args);\n         }\n-        bcx.build.RetVoid();\n+        build_return(bcx);\n \n         let lltop = bcx.llbb;\n         finish_fn(fcx, lltop);\n@@ -6473,7 +6476,7 @@ fn create_main_wrapper(ccx: &@crate_ctxt, sp: &span,\n                          llargvarg];\n             bcx.build.FastCall(main_llfn, args);\n         }\n-        bcx.build.RetVoid();\n+        build_return(bcx);\n \n         let lltop = bcx.llbb;\n         finish_fn(fcx, lltop);\n@@ -6754,7 +6757,7 @@ fn decl_native_fn_and_pair(ccx: &@crate_ctxt, sp: &span, path: &[str],\n     for d: {val: ValueRef, ty: ty::t} in drop_args {\n         bcx = drop_ty(bcx, d.val, d.ty).bcx;\n     }\n-    bcx.build.RetVoid();\n+    build_return(bcx);\n     finish_fn(fcx, lltop);\n }\n "}, {"sha": "2285aeefc8f17f0e5ba62df22be72bc8e8d7fd38", "filename": "src/comp/middle/trans_common.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0b7af403843d54c3200f8f9accbd2b279d6a7a0c/src%2Fcomp%2Fmiddle%2Ftrans_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b7af403843d54c3200f8f9accbd2b279d6a7a0c/src%2Fcomp%2Fmiddle%2Ftrans_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_common.rs?ref=0b7af403843d54c3200f8f9accbd2b279d6a7a0c", "patch": "@@ -214,6 +214,8 @@ type fn_ctxt = {\n     // alloca'd by code in llallocas?\n     mutable lldynamicallocas: BasicBlockRef,\n \n+    mutable llreturn: BasicBlockRef,\n+\n     // The token used to clear the dynamic allocas at the end of this frame.\n     // Will be |none| if there are no dynamic allocas.\n     mutable llobstacktoken: option::t<ValueRef>,\n@@ -451,6 +453,7 @@ fn bcx_tcx(bcx: &@block_ctxt) -> ty::ctxt { ret bcx.fcx.lcx.ccx.tcx; }\n fn bcx_ccx(bcx: &@block_ctxt) -> @crate_ctxt { ret bcx.fcx.lcx.ccx; }\n fn bcx_lcx(bcx: &@block_ctxt) -> @local_ctxt { ret bcx.fcx.lcx; }\n fn bcx_fcx(bcx: &@block_ctxt) -> @fn_ctxt { ret bcx.fcx; }\n+fn fcx_ccx(fcx: &@fn_ctxt)    -> @crate_ctxt { ret fcx.lcx.ccx; }\n fn fcx_tcx(fcx: &@fn_ctxt)    -> ty::ctxt { ret fcx.lcx.ccx.tcx; }\n fn lcx_ccx(lcx: &@local_ctxt) -> @crate_ctxt { ret lcx.ccx; }\n fn ccx_tcx(ccx: &@crate_ctxt) -> ty::ctxt { ret ccx.tcx; }"}, {"sha": "aa21ad5cb0cb368b6a41558a76b958a5bf4fca96", "filename": "src/comp/middle/trans_objects.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0b7af403843d54c3200f8f9accbd2b279d6a7a0c/src%2Fcomp%2Fmiddle%2Ftrans_objects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b7af403843d54c3200f8f9accbd2b279d6a7a0c/src%2Fcomp%2Fmiddle%2Ftrans_objects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_objects.rs?ref=0b7af403843d54c3200f8f9accbd2b279d6a7a0c", "patch": "@@ -192,7 +192,7 @@ fn trans_obj(cx: @local_ctxt, sp: &span, ob: &ast::_obj,\n         let p = bcx.build.PointerCast(box.box, llbox_ty);\n         bcx.build.Store(p, pair_box);\n     }\n-    bcx.build.RetVoid();\n+    build_return(bcx);\n \n     // Insert the mandatory first few basic blocks before lltop.\n     finish_fn(fcx, lltop);\n@@ -710,7 +710,7 @@ fn process_bkwding_mthd(cx: @local_ctxt, sp: &span, m: @ty::method,\n     // And, finally, call the outer method.\n     bcx.build.FastCall(llouter_mthd, llouter_mthd_args);\n \n-    bcx.build.RetVoid();\n+    build_return(bcx);\n     finish_fn(fcx, lltop);\n \n     ret llbackwarding_fn;\n@@ -882,7 +882,7 @@ fn process_fwding_mthd(cx: @local_ctxt, sp: &span, m: @ty::method,\n     // And, finally, call the original (inner) method.\n     bcx.build.FastCall(llorig_mthd, llorig_mthd_args);\n \n-    bcx.build.RetVoid();\n+    build_return(bcx);\n     finish_fn(fcx, lltop);\n \n     ret llforwarding_fn;"}]}