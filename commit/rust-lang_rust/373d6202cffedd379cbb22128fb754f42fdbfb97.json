{"sha": "373d6202cffedd379cbb22128fb754f42fdbfb97", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3M2Q2MjAyY2ZmZWRkMzc5Y2JiMjIxMjhmYjc1NGY0MmZkYmZiOTc=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-04-29T22:45:53Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-04-29T22:45:53Z"}, "message": "rollup merge of #24935: pnkfelix/lint-repr-c-drop\n\nLint: warn when mixing `#[repr(C)]` with Drop\n\nFix #24585", "tree": {"sha": "fbbcb904074483392a3b5640a471ff3d9166ff5e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fbbcb904074483392a3b5640a471ff3d9166ff5e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/373d6202cffedd379cbb22128fb754f42fdbfb97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/373d6202cffedd379cbb22128fb754f42fdbfb97", "html_url": "https://github.com/rust-lang/rust/commit/373d6202cffedd379cbb22128fb754f42fdbfb97", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/373d6202cffedd379cbb22128fb754f42fdbfb97/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0cca57712db0ec2949824913a590fc806f7d003b", "url": "https://api.github.com/repos/rust-lang/rust/commits/0cca57712db0ec2949824913a590fc806f7d003b", "html_url": "https://github.com/rust-lang/rust/commit/0cca57712db0ec2949824913a590fc806f7d003b"}, {"sha": "2e23d8196e94d5b4a8c383e834829f900ab368c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e23d8196e94d5b4a8c383e834829f900ab368c3", "html_url": "https://github.com/rust-lang/rust/commit/2e23d8196e94d5b4a8c383e834829f900ab368c3"}], "stats": {"total": 114, "additions": 114, "deletions": 0}, "files": [{"sha": "cc2c9b735ea44b881aa9d763af3ea37919eb13b7", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/373d6202cffedd379cbb22128fb754f42fdbfb97/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373d6202cffedd379cbb22128fb754f42fdbfb97/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=373d6202cffedd379cbb22128fb754f42fdbfb97", "patch": "@@ -2142,3 +2142,57 @@ impl LintPass for UnstableFeatures {\n         }\n     }\n }\n+\n+/// Lints for attempts to impl Drop on types that have `#[repr(C)]`\n+/// attribute (see issue #24585).\n+#[derive(Copy, Clone)]\n+pub struct DropWithReprExtern;\n+\n+declare_lint! {\n+    DROP_WITH_REPR_EXTERN,\n+    Warn,\n+    \"use of #[repr(C)] on a type that implements Drop\"\n+}\n+\n+impl LintPass for DropWithReprExtern {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(DROP_WITH_REPR_EXTERN)\n+    }\n+    fn check_crate(&mut self, ctx: &Context, _: &ast::Crate) {\n+        for dtor_did in ctx.tcx.destructors.borrow().iter() {\n+            let (drop_impl_did, dtor_self_type) =\n+                if dtor_did.krate == ast::LOCAL_CRATE {\n+                    let impl_did = ctx.tcx.map.get_parent_did(dtor_did.node);\n+                    let ty = ty::lookup_item_type(ctx.tcx, impl_did).ty;\n+                    (impl_did, ty)\n+                } else {\n+                    continue;\n+                };\n+\n+            match dtor_self_type.sty {\n+                ty::ty_enum(self_type_did, _) |\n+                ty::ty_struct(self_type_did, _) |\n+                ty::ty_closure(self_type_did, _) => {\n+                    let hints = ty::lookup_repr_hints(ctx.tcx, self_type_did);\n+                    if hints.iter().any(|attr| *attr == attr::ReprExtern) &&\n+                        ty::ty_dtor(ctx.tcx, self_type_did).has_drop_flag() {\n+                        let drop_impl_span = ctx.tcx.map.def_id_span(drop_impl_did,\n+                                                                     codemap::DUMMY_SP);\n+                        let self_defn_span = ctx.tcx.map.def_id_span(self_type_did,\n+                                                                     codemap::DUMMY_SP);\n+                        ctx.span_lint(DROP_WITH_REPR_EXTERN,\n+                                      drop_impl_span,\n+                                      \"implementing Drop adds hidden state to types, \\\n+                                       possibly conflicting with `#[repr(C)]`\");\n+                        // FIXME #19668: could be span_lint_note instead of manual guard.\n+                        if ctx.current_level(DROP_WITH_REPR_EXTERN) != Level::Allow {\n+                            ctx.sess().span_note(self_defn_span,\n+                                               \"the `#[repr(C)]` attribute is attached here\");\n+                        }\n+                    }\n+                }\n+                _ => {}\n+            }\n+        }\n+    }\n+}"}, {"sha": "970f9c634a2caad2c4cbe4abb402786486e03c5f", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/373d6202cffedd379cbb22128fb754f42fdbfb97/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373d6202cffedd379cbb22128fb754f42fdbfb97/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=373d6202cffedd379cbb22128fb754f42fdbfb97", "patch": "@@ -108,6 +108,7 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n                  UnconditionalRecursion,\n                  InvalidNoMangleItems,\n                  PluginAsLibrary,\n+                 DropWithReprExtern,\n                  );\n \n     add_builtin_with_new!(sess,"}, {"sha": "2df57b08f283c3f3dd9350ba7b8cacb7682f1fd0", "filename": "src/test/compile-fail/lint-no-drop-on-repr-extern.rs", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/373d6202cffedd379cbb22128fb754f42fdbfb97/src%2Ftest%2Fcompile-fail%2Flint-no-drop-on-repr-extern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373d6202cffedd379cbb22128fb754f42fdbfb97/src%2Ftest%2Fcompile-fail%2Flint-no-drop-on-repr-extern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-no-drop-on-repr-extern.rs?ref=373d6202cffedd379cbb22128fb754f42fdbfb97", "patch": "@@ -0,0 +1,59 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check we reject structs that mix a `Drop` impl with `#[repr(C)]`.\n+//\n+// As a special case, also check that we do not warn on such structs\n+// if they also are declared with `#[unsafe_no_drop_flag]`\n+\n+#![feature(unsafe_no_drop_flag)]\n+#![deny(drop_with_repr_extern)]\n+\n+#[repr(C)] struct As { x: Box<i8> }\n+#[repr(C)] enum Ae { Ae(Box<i8>), _None }\n+\n+struct Bs { x: Box<i8> }\n+enum Be { Be(Box<i8>), _None }\n+\n+#[repr(C)] struct Cs { x: Box<i8> }\n+//~^ NOTE the `#[repr(C)]` attribute is attached here\n+\n+impl Drop for Cs { fn drop(&mut self) { } }\n+//~^ ERROR implementing Drop adds hidden state to types, possibly conflicting with `#[repr(C)]`\n+\n+#[repr(C)] enum Ce { Ce(Box<i8>), _None }\n+//~^ NOTE the `#[repr(C)]` attribute is attached here\n+\n+impl Drop for Ce { fn drop(&mut self) { } }\n+//~^ ERROR implementing Drop adds hidden state to types, possibly conflicting with `#[repr(C)]`\n+\n+#[unsafe_no_drop_flag]\n+#[repr(C)] struct Ds { x: Box<i8> }\n+\n+impl Drop for Ds { fn drop(&mut self) { } }\n+\n+#[unsafe_no_drop_flag]\n+#[repr(C)] enum De { De(Box<i8>), _None }\n+\n+impl Drop for De { fn drop(&mut self) { } }\n+\n+fn main() {\n+    let a = As { x: Box::new(3) };\n+    let b = Bs { x: Box::new(3) };\n+    let c = Cs { x: Box::new(3) };\n+    let d = Ds { x: Box::new(3) };\n+\n+    println!(\"{:?}\", (*a.x, *b.x, *c.x, *d.x));\n+\n+    let _a = Ae::Ae(Box::new(3));\n+    let _b = Be::Be(Box::new(3));\n+    let _c = Ce::Ce(Box::new(3));\n+    let _d = De::De(Box::new(3));\n+}"}]}