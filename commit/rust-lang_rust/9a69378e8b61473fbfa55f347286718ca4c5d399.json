{"sha": "9a69378e8b61473fbfa55f347286718ca4c5d399", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhNjkzNzhlOGI2MTQ3M2ZiZmE1NWYzNDcyODY3MThjYTRjNWQzOTk=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2015-01-30T10:16:59Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2015-02-24T12:14:16Z"}, "message": "rustc: load DefAssociatedTy from cross-crate metadata. Fixes #20542.", "tree": {"sha": "f271d58f8d123942bff5beaf646883139ce8e896", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f271d58f8d123942bff5beaf646883139ce8e896"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a69378e8b61473fbfa55f347286718ca4c5d399", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a69378e8b61473fbfa55f347286718ca4c5d399", "html_url": "https://github.com/rust-lang/rust/commit/9a69378e8b61473fbfa55f347286718ca4c5d399", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a69378e8b61473fbfa55f347286718ca4c5d399/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9739ae4d09a637b914171c873953bb8c13daa0c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/9739ae4d09a637b914171c873953bb8c13daa0c0", "html_url": "https://github.com/rust-lang/rust/commit/9739ae4d09a637b914171c873953bb8c13daa0c0"}], "stats": {"total": 65, "additions": 38, "deletions": 27}, "files": [{"sha": "6d2269b74a218a1e86a0095448f0f904c15f958b", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 25, "deletions": 17, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/9a69378e8b61473fbfa55f347286718ca4c5d399/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a69378e8b61473fbfa55f347286718ca4c5d399/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=9a69378e8b61473fbfa55f347286718ca4c5d399", "patch": "@@ -172,16 +172,13 @@ fn item_visibility(item: rbml::Doc) -> ast::Visibility {\n     }\n }\n \n-fn item_sort(item: rbml::Doc) -> char {\n+fn item_sort(item: rbml::Doc) -> Option<char> {\n     let mut ret = None;\n     reader::tagged_docs(item, tag_item_trait_item_sort, |doc| {\n         ret = Some(doc.as_str_slice().as_bytes()[0] as char);\n         false\n     });\n-    match ret {\n-        Some(r) => r,\n-        None => panic!(\"No item_sort found\")\n-    }\n+    ret\n }\n \n fn item_symbol(item: rbml::Doc) -> String {\n@@ -344,7 +341,14 @@ fn item_to_def_like(item: rbml::Doc, did: ast::DefId, cnum: ast::CrateNum)\n                 _ => panic!()\n             }\n         }\n-        Type => DlDef(def::DefTy(did, false)),\n+        Type => {\n+            if item_sort(item) == Some('t') {\n+                let trait_did = item_reqd_and_translated_parent_item(cnum, item);\n+                DlDef(def::DefAssociatedTy(trait_did, did))\n+            } else {\n+                DlDef(def::DefTy(did, false))\n+            }\n+        }\n         Mod => DlDef(def::DefMod(did)),\n         ForeignMod => DlDef(def::DefForeignMod(did)),\n         StructVariant => {\n@@ -829,8 +833,10 @@ pub fn get_impl_items(cdata: Cmd, impl_id: ast::NodeId)\n                         tag_item_impl_item, |doc| {\n         let def_id = item_def_id(doc, cdata);\n         match item_sort(doc) {\n-            'r' | 'p' => impl_items.push(ty::MethodTraitItemId(def_id)),\n-            't' => impl_items.push(ty::TypeTraitItemId(def_id)),\n+            Some('r') | Some('p') => {\n+                impl_items.push(ty::MethodTraitItemId(def_id))\n+            }\n+            Some('t') => impl_items.push(ty::TypeTraitItemId(def_id)),\n             _ => panic!(\"unknown impl item sort\"),\n         }\n         true\n@@ -854,14 +860,14 @@ pub fn get_trait_item_name_and_kind(intr: Rc<IdentInterner>,\n     let doc = lookup_item(id, cdata.data());\n     let name = item_name(&*intr, doc);\n     match item_sort(doc) {\n-        'r' | 'p' => {\n+        Some('r') | Some('p') => {\n             let explicit_self = get_explicit_self(doc);\n             (name, def::TraitItemKind::from_explicit_self_category(explicit_self))\n         }\n-        't' => (name, def::TypeTraitItemKind),\n+        Some('t') => (name, def::TypeTraitItemKind),\n         c => {\n             panic!(\"get_trait_item_name_and_kind(): unknown trait item kind \\\n-                   in metadata: `{}`\", c)\n+                   in metadata: `{:?}`\", c)\n         }\n     }\n }\n@@ -887,7 +893,7 @@ pub fn get_impl_or_trait_item<'tcx>(intr: Rc<IdentInterner>,\n     let vis = item_visibility(method_doc);\n \n     match item_sort(method_doc) {\n-        'r' | 'p' => {\n+        Some('r') | Some('p') => {\n             let generics = doc_generics(method_doc, tcx, cdata, tag_method_ty_generics);\n             let predicates = doc_predicates(method_doc, tcx, cdata, tag_method_ty_generics);\n             let fty = doc_method_fty(method_doc, tcx, cdata);\n@@ -904,7 +910,7 @@ pub fn get_impl_or_trait_item<'tcx>(intr: Rc<IdentInterner>,\n                                                         container,\n                                                         provided_source)))\n         }\n-        't' => {\n+        Some('t') => {\n             ty::TypeTraitItem(Rc::new(ty::AssociatedType {\n                 name: name,\n                 vis: vis,\n@@ -924,8 +930,10 @@ pub fn get_trait_item_def_ids(cdata: Cmd, id: ast::NodeId)\n     reader::tagged_docs(item, tag_item_trait_item, |mth| {\n         let def_id = item_def_id(mth, cdata);\n         match item_sort(mth) {\n-            'r' | 'p' => result.push(ty::MethodTraitItemId(def_id)),\n-            't' => result.push(ty::TypeTraitItemId(def_id)),\n+            Some('r') | Some('p') => {\n+                result.push(ty::MethodTraitItemId(def_id));\n+            }\n+            Some('t') => result.push(ty::TypeTraitItemId(def_id)),\n             _ => panic!(\"unknown trait item sort\"),\n         }\n         true\n@@ -954,7 +962,7 @@ pub fn get_provided_trait_methods<'tcx>(intr: Rc<IdentInterner>,\n         let did = item_def_id(mth_id, cdata);\n         let mth = lookup_item(did.node, data);\n \n-        if item_sort(mth) == 'p' {\n+        if item_sort(mth) == Some('p') {\n             let trait_item = get_impl_or_trait_item(intr.clone(),\n                                                     cdata,\n                                                     did.node,\n@@ -1558,7 +1566,7 @@ pub fn is_associated_type(cdata: Cmd, id: ast::NodeId) -> bool {\n     let items = reader::get_doc(rbml::Doc::new(cdata.data()), tag_items);\n     match maybe_find_item(id, items) {\n         None => false,\n-        Some(item) => item_sort(item) == 't',\n+        Some(item) => item_sort(item) == Some('t'),\n     }\n }\n "}, {"sha": "c4b874f793019e0842b87a86d406c1bdcd0dbc05", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9a69378e8b61473fbfa55f347286718ca4c5d399/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a69378e8b61473fbfa55f347286718ca4c5d399/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=9a69378e8b61473fbfa55f347286718ca4c5d399", "patch": "@@ -442,7 +442,8 @@ impl tr for def::Def {\n           },\n           def::DefTrait(did) => def::DefTrait(did.tr(dcx)),\n           def::DefTy(did, is_enum) => def::DefTy(did.tr(dcx), is_enum),\n-          def::DefAssociatedTy(did) => def::DefAssociatedTy(did.tr(dcx)),\n+          def::DefAssociatedTy(trait_did, did) =>\n+              def::DefAssociatedTy(trait_did.tr(dcx), did.tr(dcx)),\n           def::DefAssociatedPath(def::TyParamProvenance::FromSelf(did), ident) =>\n               def::DefAssociatedPath(def::TyParamProvenance::FromSelf(did.tr(dcx)), ident),\n           def::DefAssociatedPath(def::TyParamProvenance::FromParam(did), ident) =>"}, {"sha": "a341b55333f4123b210f35c97e517d609359c973", "filename": "src/librustc/middle/def.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a69378e8b61473fbfa55f347286718ca4c5d399/src%2Flibrustc%2Fmiddle%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a69378e8b61473fbfa55f347286718ca4c5d399/src%2Flibrustc%2Fmiddle%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdef.rs?ref=9a69378e8b61473fbfa55f347286718ca4c5d399", "patch": "@@ -32,7 +32,7 @@ pub enum Def {\n     DefLocal(ast::NodeId),\n     DefVariant(ast::DefId /* enum */, ast::DefId /* variant */, bool /* is_structure */),\n     DefTy(ast::DefId, bool /* is_enum */),\n-    DefAssociatedTy(ast::DefId),\n+    DefAssociatedTy(ast::DefId /* trait */, ast::DefId),\n     // A partially resolved path to an associated type `T::U` where `T` is a concrete\n     // type (indicated by the DefId) which implements a trait which has an associated\n     // type `U` (indicated by the Ident).\n@@ -134,7 +134,7 @@ impl Def {\n         match *self {\n             DefFn(id, _) | DefStaticMethod(id, _) | DefMod(id) |\n             DefForeignMod(id) | DefStatic(id, _) |\n-            DefVariant(_, id, _) | DefTy(id, _) | DefAssociatedTy(id) |\n+            DefVariant(_, id, _) | DefTy(id, _) | DefAssociatedTy(_, id) |\n             DefTyParam(_, _, id, _) | DefUse(id) | DefStruct(id) | DefTrait(id) |\n             DefMethod(id, _, _) | DefConst(id) |\n             DefAssociatedPath(TyParamProvenance::FromSelf(id), _) |"}, {"sha": "7c6e537f0be2317fca34c98200a0533d4f62acf4", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9a69378e8b61473fbfa55f347286718ca4c5d399/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a69378e8b61473fbfa55f347286718ca4c5d399/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=9a69378e8b61473fbfa55f347286718ca4c5d399", "patch": "@@ -638,8 +638,8 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                                     &new_parent,\n                                     ForbidDuplicateTypesAndModules,\n                                     typedef.span);\n-                            let def = DefAssociatedTy(local_def(\n-                                typedef.id));\n+                            let def = DefAssociatedTy(local_def(item.id),\n+                                                      local_def(typedef.id));\n                             // NB: not IMPORTABLE\n                             let modifiers = if typedef.vis == ast::Public {\n                                 PUBLIC\n@@ -716,8 +716,8 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                             (name, static_flag)\n                         }\n                         ast::TypeTraitItem(ref associated_type) => {\n-                            let def = DefAssociatedTy(local_def(\n-                                    associated_type.ty_param.id));\n+                            let def = DefAssociatedTy(local_def(item.id),\n+                                                      local_def(associated_type.ty_param.id));\n \n                             let name_bindings =\n                                 self.add_child(associated_type.ty_param.ident.name,"}, {"sha": "8b5cb1f97466656a3b07de0d64faeb327dd7b8d8", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9a69378e8b61473fbfa55f347286718ca4c5d399/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a69378e8b61473fbfa55f347286718ca4c5d399/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=9a69378e8b61473fbfa55f347286718ca4c5d399", "patch": "@@ -1236,9 +1236,8 @@ pub fn ast_ty_to_ty<'tcx>(this: &AstConv<'tcx>,\n                     def::DefPrimTy(_) => {\n                         panic!(\"DefPrimTy arm missed in previous ast_ty_to_prim_ty call\");\n                     }\n-                    def::DefAssociatedTy(trait_type_id) => {\n-                        let path_str = tcx.map.path_to_string(\n-                            tcx.map.get_parent(trait_type_id.node));\n+                    def::DefAssociatedTy(trait_id, _) => {\n+                        let path_str = ty::item_path_str(tcx, trait_id);\n                         span_err!(tcx.sess, ast_ty.span, E0223,\n                                           \"ambiguous associated \\\n                                                    type; specify the type \\"}, {"sha": "becbc27138b770e700d524844357252c7c017c95", "filename": "src/test/compile-fail/associated-types-in-ambiguous-context.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9a69378e8b61473fbfa55f347286718ca4c5d399/src%2Ftest%2Fcompile-fail%2Fassociated-types-in-ambiguous-context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a69378e8b61473fbfa55f347286718ca4c5d399/src%2Ftest%2Fcompile-fail%2Fassociated-types-in-ambiguous-context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-in-ambiguous-context.rs?ref=9a69378e8b61473fbfa55f347286718ca4c5d399", "patch": "@@ -22,5 +22,8 @@ trait Grab {\n     //~^ ERROR ambiguous associated type\n }\n \n+type X = std::ops::Deref::Target;\n+//~^ ERROR ambiguous associated type\n+\n fn main() {\n }"}]}