{"sha": "3a15482b9c602d162c6c26c36ab608eb1bef953d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhMTU0ODJiOWM2MDJkMTYyYzZjMjZjMzZhYjYwOGViMWJlZjk1M2Q=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-11-01T15:26:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-11-01T15:26:24Z"}, "message": "auto merge of #10218 : alexcrichton/rust/stdio-flush-safe, r=cmr\n\nThe previous method was unsound because you could very easily create two mutable\r\npointers which alias the same location (not sound behavior). This hides the\r\nfunction which does so and then exports an explicit flush() function (with\r\ndocumentation about how it works).", "tree": {"sha": "d2999811b6f86f5c6508c3dbb7ce3aacc51cdfed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d2999811b6f86f5c6508c3dbb7ce3aacc51cdfed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a15482b9c602d162c6c26c36ab608eb1bef953d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a15482b9c602d162c6c26c36ab608eb1bef953d", "html_url": "https://github.com/rust-lang/rust/commit/3a15482b9c602d162c6c26c36ab608eb1bef953d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a15482b9c602d162c6c26c36ab608eb1bef953d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a300314827899fbf505ede381767583aa6f4504e", "url": "https://api.github.com/repos/rust-lang/rust/commits/a300314827899fbf505ede381767583aa6f4504e", "html_url": "https://github.com/rust-lang/rust/commit/a300314827899fbf505ede381767583aa6f4504e"}, {"sha": "8f258ab532eebce705b5eb27cc8635400992ca54", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f258ab532eebce705b5eb27cc8635400992ca54", "html_url": "https://github.com/rust-lang/rust/commit/8f258ab532eebce705b5eb27cc8635400992ca54"}], "stats": {"total": 41, "additions": 27, "deletions": 14}, "files": [{"sha": "1284ab736560fb9b6269b72b1ff3fcda8c5b8161", "filename": "src/libstd/rt/io/stdio.rs", "status": "modified", "additions": 27, "deletions": 14, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/3a15482b9c602d162c6c26c36ab608eb1bef953d/src%2Flibstd%2Frt%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a15482b9c602d162c6c26c36ab608eb1bef953d/src%2Flibstd%2Frt%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fstdio.rs?ref=3a15482b9c602d162c6c26c36ab608eb1bef953d", "patch": "@@ -112,20 +112,17 @@ pub fn stderr() -> StdWriter {\n     do src(libc::STDERR_FILENO, false) |src| { StdWriter { inner: src } }\n }\n \n-/// Executes a closure with the local task's handle on stdout. By default, this\n-/// stream is a buffering stream, so the handled yielded to the given closure\n-/// can be used to flush the stdout stream (if necessary). The buffering used is\n-/// line-buffering when stdout is attached to a terminal, and a fixed sized\n-/// buffer if it is not attached to a terminal.\n-///\n-/// Note that handles generated via the `stdout()` function all output to the\n-/// same stream, and output among all task may be interleaved as a result of\n-/// this. This is provided to have access to the default stream for `print` and\n-/// `println` (and the related macros) for this task.\n-///\n-/// Also note that logging macros do not use this stream. Using the logging\n-/// macros will emit output to stderr.\n-pub fn with_task_stdout(f: &fn(&mut Writer)) {\n+// Helper to access the local task's stdout handle\n+//\n+// Note that this is not a safe function to expose because you can create an\n+// aliased pointer very easily:\n+//\n+//  do with_task_stdout |io1| {\n+//      do with_task_stdout |io2| {\n+//          // io1 aliases io2\n+//      }\n+//  }\n+fn with_task_stdout(f: &fn(&mut Writer)) {\n     use rt::local::Local;\n     use rt::task::Task;\n \n@@ -153,6 +150,22 @@ pub fn with_task_stdout(f: &fn(&mut Writer)) {\n     }\n }\n \n+/// Flushes the local task's stdout handle.\n+///\n+/// By default, this stream is a buffering stream, flushing may be necessary to\n+/// ensure output is on the terminal screen. The buffering used is\n+/// line-buffering when stdout is attached to a terminal, and a fixed sized\n+/// buffer if it is not attached to a terminal.\n+///\n+/// Note that logging macros do not use this stream. Using the logging macros\n+/// will emit output to stderr, and while they are line buffered the log\n+/// messages are always terminated in a newline (no need to flush).\n+pub fn flush() {\n+    do with_task_stdout |io| {\n+        io.flush();\n+    }\n+}\n+\n /// Prints a string to the stdout of the current process. No newline is emitted\n /// after the string is printed.\n pub fn print(s: &str) {"}]}