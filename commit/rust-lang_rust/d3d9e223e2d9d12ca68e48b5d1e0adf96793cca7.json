{"sha": "d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7", "node_id": "C_kwDOAAsO6NoAKGQzZDllMjIzZTJkOWQxMmNhNjhlNDhiNWQxZTBhZGY5Njc5M2NjYTc", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-08-17T10:55:09Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-08-18T09:00:21Z"}, "message": "Update rustdoc-json test files", "tree": {"sha": "d591b9e3683806513f29e320a9b9ec9e94d284fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d591b9e3683806513f29e320a9b9ec9e94d284fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7", "html_url": "https://github.com/rust-lang/rust/commit/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57c85bd97da336a2199d1b157fb18e70efcafd35", "url": "https://api.github.com/repos/rust-lang/rust/commits/57c85bd97da336a2199d1b157fb18e70efcafd35", "html_url": "https://github.com/rust-lang/rust/commit/57c85bd97da336a2199d1b157fb18e70efcafd35"}], "stats": {"total": 1119, "additions": 552, "deletions": 567}, "files": [{"sha": "2eb413fb40203092f8d9c42d7a37bbbfa798a9d6", "filename": "src/test/rustdoc-json/assoc_items.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Fassoc_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Fassoc_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fassoc_items.rs?ref=d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7", "patch": "@@ -1,29 +1,27 @@\n #![no_std]\n \n-// @has assoc_items.json\n-\n pub struct Simple;\n \n impl Simple {\n-    // @has - \"$.index[*][?(@.name=='CONSTANT')].kind\" \\\"assoc_const\\\"\n+    // @has \"$.index[*][?(@.name=='CONSTANT')].kind\" \\\"assoc_const\\\"\n     pub const CONSTANT: usize = 0;\n }\n \n pub trait EasyToImpl {\n-    // @has - \"$.index[*][?(@.name=='ToDeclare')].kind\" \\\"assoc_type\\\"\n-    // @has - \"$.index[*][?(@.name=='ToDeclare')].inner.default\" null\n+    // @has \"$.index[*][?(@.name=='ToDeclare')].kind\" \\\"assoc_type\\\"\n+    // @has \"$.index[*][?(@.name=='ToDeclare')].inner.default\" null\n     type ToDeclare;\n-    // @has - \"$.index[*][?(@.name=='AN_ATTRIBUTE')].kind\" \\\"assoc_const\\\"\n-    // @has - \"$.index[*][?(@.name=='AN_ATTRIBUTE')].inner.default\" null\n+    // @has \"$.index[*][?(@.name=='AN_ATTRIBUTE')].kind\" \\\"assoc_const\\\"\n+    // @has \"$.index[*][?(@.name=='AN_ATTRIBUTE')].inner.default\" null\n     const AN_ATTRIBUTE: usize;\n }\n \n impl EasyToImpl for Simple {\n-    // @has - \"$.index[*][?(@.name=='ToDeclare')].inner.default.kind\" \\\"primitive\\\"\n-    // @has - \"$.index[*][?(@.name=='ToDeclare')].inner.default.inner\" \\\"usize\\\"\n+    // @has \"$.index[*][?(@.name=='ToDeclare')].inner.default.kind\" \\\"primitive\\\"\n+    // @has \"$.index[*][?(@.name=='ToDeclare')].inner.default.inner\" \\\"usize\\\"\n     type ToDeclare = usize;\n-    // @has - \"$.index[*][?(@.name=='AN_ATTRIBUTE')].inner.type.kind\" \\\"primitive\\\"\n-    // @has - \"$.index[*][?(@.name=='AN_ATTRIBUTE')].inner.type.inner\" \\\"usize\\\"\n-    // @has - \"$.index[*][?(@.name=='AN_ATTRIBUTE')].inner.default\" \\\"12\\\"\n+    // @has \"$.index[*][?(@.name=='AN_ATTRIBUTE')].inner.type.kind\" \\\"primitive\\\"\n+    // @has \"$.index[*][?(@.name=='AN_ATTRIBUTE')].inner.type.inner\" \\\"usize\\\"\n+    // @has \"$.index[*][?(@.name=='AN_ATTRIBUTE')].inner.default\" \\\"12\\\"\n     const AN_ATTRIBUTE: usize = 12;\n }"}, {"sha": "edc1f73c866db4287d36f339933348b4269b7861", "filename": "src/test/rustdoc-json/assoc_type.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Fassoc_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Fassoc_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fassoc_type.rs?ref=d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7", "patch": "@@ -1,10 +1,9 @@\n // Regression test for <https://github.com/rust-lang/rust/issues/98547>.\n \n-// @has assoc_type.json\n-// @has - \"$.index[*][?(@.name=='Trait')]\"\n-// @has - \"$.index[*][?(@.name=='AssocType')]\"\n-// @has - \"$.index[*][?(@.name=='S')]\"\n-// @has - \"$.index[*][?(@.name=='S2')]\"\n+// @has \"$.index[*][?(@.name=='Trait')]\"\n+// @has \"$.index[*][?(@.name=='AssocType')]\"\n+// @has \"$.index[*][?(@.name=='S')]\"\n+// @has \"$.index[*][?(@.name=='S2')]\"\n \n pub trait Trait {\n     type AssocType;"}, {"sha": "c5cc87ca1eb30eaf23d0f9337af036842536d1ce", "filename": "src/test/rustdoc-json/blanket_impls.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Fblanket_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Fblanket_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fblanket_impls.rs?ref=d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7", "patch": "@@ -2,8 +2,7 @@\n \n #![no_std]\n \n-// @has blanket_impls.json\n-// @has - \"$.index[*][?(@.name=='Error')].kind\" \\\"assoc_type\\\"\n-// @has - \"$.index[*][?(@.name=='Error')].inner.default.kind\" \\\"resolved_path\\\"\n-// @has - \"$.index[*][?(@.name=='Error')].inner.default.inner.name\" \\\"Infallible\\\"\n+// @has \"$.index[*][?(@.name=='Error')].kind\" \\\"assoc_type\\\"\n+// @has \"$.index[*][?(@.name=='Error')].inner.default.kind\" \\\"resolved_path\\\"\n+// @has \"$.index[*][?(@.name=='Error')].inner.default.inner.name\" \\\"Infallible\\\"\n pub struct ForBlanketTryFromImpl;"}, {"sha": "6573166c47f222c41235de6726caa27d525da8bf", "filename": "src/test/rustdoc-json/doc_hidden_failure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Fdoc_hidden_failure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Fdoc_hidden_failure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fdoc_hidden_failure.rs?ref=d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7", "patch": "@@ -14,7 +14,7 @@ mod auto {\n     }\n }\n \n-// @count doc_hidden_failure.json \"$.index[*][?(@.name=='builders')]\" 2\n+// @count \"$.index[*][?(@.name=='builders')]\" 2\n pub use auto::*;\n \n pub mod builders {"}, {"sha": "c5e063a055c56c4e067fc4d59f84f8beebd47c71", "filename": "src/test/rustdoc-json/enum_variant_hidden.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Fenum_variant_hidden.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Fenum_variant_hidden.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fenum_variant_hidden.rs?ref=d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7", "patch": "@@ -3,10 +3,10 @@\n #![no_core]\n #![feature(no_core)]\n \n-// @has enum_variant_hidden.json \"$.index[*][?(@.name=='ParseError')]\"\n-// @has - \"$.index[*][?(@.name=='UnexpectedEndTag')]\"\n-// @is - \"$.index[*][?(@.name=='UnexpectedEndTag')].inner.variant_kind\" '\"tuple\"'\n-// @is - \"$.index[*][?(@.name=='UnexpectedEndTag')].inner.variant_inner\" []\n+// @has \"$.index[*][?(@.name=='ParseError')]\"\n+// @has \"$.index[*][?(@.name=='UnexpectedEndTag')]\"\n+// @is \"$.index[*][?(@.name=='UnexpectedEndTag')].inner.variant_kind\" '\"tuple\"'\n+// @is \"$.index[*][?(@.name=='UnexpectedEndTag')].inner.variant_inner\" []\n \n pub enum ParseError {\n     UnexpectedEndTag(#[doc(hidden)] u32),"}, {"sha": "704ec35d2f0ba60186feb0b0818f866d6e1100a1", "filename": "src/test/rustdoc-json/enums/variant_struct.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Fenums%2Fvariant_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Fenums%2Fvariant_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fenums%2Fvariant_struct.rs?ref=d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7", "patch": "@@ -1,9 +1,9 @@\n-// @has variant_struct.json \"$.index[*][?(@.name=='EnumStruct')].visibility\" \\\"public\\\"\n-// @has - \"$.index[*][?(@.name=='EnumStruct')].kind\" \\\"enum\\\"\n+// @has \"$.index[*][?(@.name=='EnumStruct')].visibility\" \\\"public\\\"\n+// @has \"$.index[*][?(@.name=='EnumStruct')].kind\" \\\"enum\\\"\n pub enum EnumStruct {\n-    // @has - \"$.index[*][?(@.name=='VariantS')].inner.variant_kind\" \\\"struct\\\"\n-    // @has - \"$.index[*][?(@.name=='x')].kind\" \\\"struct_field\\\"\n-    // @has - \"$.index[*][?(@.name=='y')].kind\" \\\"struct_field\\\"\n+    // @has \"$.index[*][?(@.name=='VariantS')].inner.variant_kind\" \\\"struct\\\"\n+    // @has \"$.index[*][?(@.name=='x')].kind\" \\\"struct_field\\\"\n+    // @has \"$.index[*][?(@.name=='y')].kind\" \\\"struct_field\\\"\n     VariantS {\n         x: u32,\n         y: String,"}, {"sha": "71ddd73ec76a4eddd8e08da355695d461fe9edbc", "filename": "src/test/rustdoc-json/enums/variant_tuple_struct.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Fenums%2Fvariant_tuple_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Fenums%2Fvariant_tuple_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fenums%2Fvariant_tuple_struct.rs?ref=d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7", "patch": "@@ -1,8 +1,8 @@\n-// @has variant_tuple_struct.json \"$.index[*][?(@.name=='EnumTupleStruct')].visibility\" \\\"public\\\"\n-// @has - \"$.index[*][?(@.name=='EnumTupleStruct')].kind\" \\\"enum\\\"\n+// @has \"$.index[*][?(@.name=='EnumTupleStruct')].visibility\" \\\"public\\\"\n+// @has \"$.index[*][?(@.name=='EnumTupleStruct')].kind\" \\\"enum\\\"\n pub enum EnumTupleStruct {\n-    // @has - \"$.index[*][?(@.name=='VariantA')].inner.variant_kind\" \\\"tuple\\\"\n-    // @has - \"$.index[*][?(@.name=='0')].kind\" \\\"struct_field\\\"\n-    // @has - \"$.index[*][?(@.name=='1')].kind\" \\\"struct_field\\\"\n+    // @has \"$.index[*][?(@.name=='VariantA')].inner.variant_kind\" \\\"tuple\\\"\n+    // @has \"$.index[*][?(@.name=='0')].kind\" \\\"struct_field\\\"\n+    // @has \"$.index[*][?(@.name=='1')].kind\" \\\"struct_field\\\"\n     VariantA(u32, String),\n }"}, {"sha": "3c1a453d12de2f04405e4edfcfd0bf0c70d8a814", "filename": "src/test/rustdoc-json/fn_pointer/abi.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Ffn_pointer%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Ffn_pointer%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Ffn_pointer%2Fabi.rs?ref=d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7", "patch": "@@ -3,23 +3,23 @@\n #![feature(abi_vectorcall)]\n #![feature(c_unwind)]\n \n-// @is abi.json \"$.index[*][?(@.name=='AbiRust')].inner.type.inner.header.abi\" \\\"Rust\\\"\n+// @is \"$.index[*][?(@.name=='AbiRust')].inner.type.inner.header.abi\" \\\"Rust\\\"\n pub type AbiRust = fn();\n \n-// @is - \"$.index[*][?(@.name=='AbiC')].inner.type.inner.header.abi\" '{\"C\": {\"unwind\": false}}'\n+// @is \"$.index[*][?(@.name=='AbiC')].inner.type.inner.header.abi\" '{\"C\": {\"unwind\": false}}'\n pub type AbiC = extern \"C\" fn();\n \n-// @is - \"$.index[*][?(@.name=='AbiSystem')].inner.type.inner.header.abi\" '{\"System\": {\"unwind\": false}}'\n+// @is \"$.index[*][?(@.name=='AbiSystem')].inner.type.inner.header.abi\" '{\"System\": {\"unwind\": false}}'\n pub type AbiSystem = extern \"system\" fn();\n \n-// @is - \"$.index[*][?(@.name=='AbiCUnwind')].inner.type.inner.header.abi\" '{\"C\": {\"unwind\": true}}'\n+// @is \"$.index[*][?(@.name=='AbiCUnwind')].inner.type.inner.header.abi\" '{\"C\": {\"unwind\": true}}'\n pub type AbiCUnwind = extern \"C-unwind\" fn();\n \n-// @is - \"$.index[*][?(@.name=='AbiSystemUnwind')].inner.type.inner.header.abi\" '{\"System\": {\"unwind\": true}}'\n+// @is \"$.index[*][?(@.name=='AbiSystemUnwind')].inner.type.inner.header.abi\" '{\"System\": {\"unwind\": true}}'\n pub type AbiSystemUnwind = extern \"system-unwind\" fn();\n \n-// @is - \"$.index[*][?(@.name=='AbiVecorcall')].inner.type.inner.header.abi.Other\" '\"\\\"vectorcall\\\"\"'\n+// @is \"$.index[*][?(@.name=='AbiVecorcall')].inner.type.inner.header.abi.Other\" '\"\\\"vectorcall\\\"\"'\n pub type AbiVecorcall = extern \"vectorcall\" fn();\n \n-// @is - \"$.index[*][?(@.name=='AbiVecorcallUnwind')].inner.type.inner.header.abi.Other\" '\"\\\"vectorcall-unwind\\\"\"'\n+// @is \"$.index[*][?(@.name=='AbiVecorcallUnwind')].inner.type.inner.header.abi.Other\" '\"\\\"vectorcall-unwind\\\"\"'\n pub type AbiVecorcallUnwind = extern \"vectorcall-unwind\" fn();"}, {"sha": "a93b01ac2c4ebf4cee17d0ff5a76017fa415a205", "filename": "src/test/rustdoc-json/fn_pointer/generics.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Ffn_pointer%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Ffn_pointer%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Ffn_pointer%2Fgenerics.rs?ref=d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7", "patch": "@@ -3,12 +3,12 @@\n #![feature(no_core)]\n #![no_core]\n \n-// @count generics.json \"$.index[*][?(@.name=='WithHigherRankTraitBounds')].inner.type.inner.decl.inputs[*]\" 1\n-// @is - \"$.index[*][?(@.name=='WithHigherRankTraitBounds')].inner.type.inner.decl.inputs[0][0]\" '\"val\"'\n-// @is - \"$.index[*][?(@.name=='WithHigherRankTraitBounds')].inner.type.inner.decl.inputs[0][1].kind\" '\"borrowed_ref\"'\n-// @is - \"$.index[*][?(@.name=='WithHigherRankTraitBounds')].inner.type.inner.decl.inputs[0][1].inner.lifetime\" \\\"\\'c\\\"\n-// @is - \"$.index[*][?(@.name=='WithHigherRankTraitBounds')].inner.type.inner.decl.output\" '{ \"kind\": \"primitive\", \"inner\": \"i32\" }'\n-// @count - \"$.index[*][?(@.name=='WithHigherRankTraitBounds')].inner.type.inner.generic_params[*]\" 1\n-// @is - \"$.index[*][?(@.name=='WithHigherRankTraitBounds')].inner.type.inner.generic_params[0].name\" \\\"\\'c\\\"\n-// @is - \"$.index[*][?(@.name=='WithHigherRankTraitBounds')].inner.type.inner.generic_params[0].kind\" '{ \"lifetime\": { \"outlives\": [] } }'\n+// @count \"$.index[*][?(@.name=='WithHigherRankTraitBounds')].inner.type.inner.decl.inputs[*]\" 1\n+// @is \"$.index[*][?(@.name=='WithHigherRankTraitBounds')].inner.type.inner.decl.inputs[0][0]\" '\"val\"'\n+// @is \"$.index[*][?(@.name=='WithHigherRankTraitBounds')].inner.type.inner.decl.inputs[0][1].kind\" '\"borrowed_ref\"'\n+// @is \"$.index[*][?(@.name=='WithHigherRankTraitBounds')].inner.type.inner.decl.inputs[0][1].inner.lifetime\" \\\"\\'c\\\"\n+// @is \"$.index[*][?(@.name=='WithHigherRankTraitBounds')].inner.type.inner.decl.output\" '{ \"kind\": \"primitive\", \"inner\": \"i32\" }'\n+// @count \"$.index[*][?(@.name=='WithHigherRankTraitBounds')].inner.type.inner.generic_params[*]\" 1\n+// @is \"$.index[*][?(@.name=='WithHigherRankTraitBounds')].inner.type.inner.generic_params[0].name\" \\\"\\'c\\\"\n+// @is \"$.index[*][?(@.name=='WithHigherRankTraitBounds')].inner.type.inner.generic_params[0].kind\" '{ \"lifetime\": { \"outlives\": [] } }'\n pub type WithHigherRankTraitBounds = for<'c> fn(val: &'c i32) -> i32;"}, {"sha": "bd65bb3eefe2c5e420c2248e3f4b833cdfbdfa3c", "filename": "src/test/rustdoc-json/fn_pointer/qualifiers.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Ffn_pointer%2Fqualifiers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Ffn_pointer%2Fqualifiers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Ffn_pointer%2Fqualifiers.rs?ref=d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7", "patch": "@@ -1,9 +1,9 @@\n-// @is qualifiers.json \"$.index[*][?(@.name=='FnPointer')].inner.type.inner.header.unsafe\" false\n-// @is - \"$.index[*][?(@.name=='FnPointer')].inner.type.inner.header.const\" false\n-// @is - \"$.index[*][?(@.name=='FnPointer')].inner.type.inner.header.async\" false\n+// @is \"$.index[*][?(@.name=='FnPointer')].inner.type.inner.header.unsafe\" false\n+// @is \"$.index[*][?(@.name=='FnPointer')].inner.type.inner.header.const\" false\n+// @is \"$.index[*][?(@.name=='FnPointer')].inner.type.inner.header.async\" false\n pub type FnPointer = fn();\n \n-// @is - \"$.index[*][?(@.name=='UnsafePointer')].inner.type.inner.header.unsafe\" true\n-// @is - \"$.index[*][?(@.name=='UnsafePointer')].inner.type.inner.header.const\" false\n-// @is - \"$.index[*][?(@.name=='UnsafePointer')].inner.type.inner.header.async\" false\n+// @is \"$.index[*][?(@.name=='UnsafePointer')].inner.type.inner.header.unsafe\" true\n+// @is \"$.index[*][?(@.name=='UnsafePointer')].inner.type.inner.header.const\" false\n+// @is \"$.index[*][?(@.name=='UnsafePointer')].inner.type.inner.header.async\" false\n pub type UnsafePointer = unsafe fn();"}, {"sha": "0e8b78bc0e6eb84c96f5e6f2a9dd8cee3c362e4f", "filename": "src/test/rustdoc-json/fns/abi.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Ffns%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Ffns%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Ffns%2Fabi.rs?ref=d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7", "patch": "@@ -3,23 +3,23 @@\n #![feature(abi_vectorcall)]\n #![feature(c_unwind)]\n \n-// @is abi.json \"$.index[*][?(@.name=='abi_rust')].inner.header.abi\" \\\"Rust\\\"\n+// @is \"$.index[*][?(@.name=='abi_rust')].inner.header.abi\" \\\"Rust\\\"\n pub fn abi_rust() {}\n \n-// @is - \"$.index[*][?(@.name=='abi_c')].inner.header.abi\" '{\"C\": {\"unwind\": false}}'\n+// @is \"$.index[*][?(@.name=='abi_c')].inner.header.abi\" '{\"C\": {\"unwind\": false}}'\n pub extern \"C\" fn abi_c() {}\n \n-// @is - \"$.index[*][?(@.name=='abi_system')].inner.header.abi\" '{\"System\": {\"unwind\": false}}'\n+// @is \"$.index[*][?(@.name=='abi_system')].inner.header.abi\" '{\"System\": {\"unwind\": false}}'\n pub extern \"system\" fn abi_system() {}\n \n-// @is - \"$.index[*][?(@.name=='abi_c_unwind')].inner.header.abi\" '{\"C\": {\"unwind\": true}}'\n+// @is \"$.index[*][?(@.name=='abi_c_unwind')].inner.header.abi\" '{\"C\": {\"unwind\": true}}'\n pub extern \"C-unwind\" fn abi_c_unwind() {}\n \n-// @is - \"$.index[*][?(@.name=='abi_system_unwind')].inner.header.abi\" '{\"System\": {\"unwind\": true}}'\n+// @is \"$.index[*][?(@.name=='abi_system_unwind')].inner.header.abi\" '{\"System\": {\"unwind\": true}}'\n pub extern \"system-unwind\" fn abi_system_unwind() {}\n \n-// @is - \"$.index[*][?(@.name=='abi_vectorcall')].inner.header.abi.Other\" '\"\\\"vectorcall\\\"\"'\n+// @is \"$.index[*][?(@.name=='abi_vectorcall')].inner.header.abi.Other\" '\"\\\"vectorcall\\\"\"'\n pub extern \"vectorcall\" fn abi_vectorcall() {}\n \n-// @is - \"$.index[*][?(@.name=='abi_vectorcall_unwind')].inner.header.abi.Other\" '\"\\\"vectorcall-unwind\\\"\"'\n+// @is \"$.index[*][?(@.name=='abi_vectorcall_unwind')].inner.header.abi.Other\" '\"\\\"vectorcall-unwind\\\"\"'\n pub extern \"vectorcall-unwind\" fn abi_vectorcall_unwind() {}"}, {"sha": "eec295efec0f05ac0aeca0ec68168ab7fc8c55c5", "filename": "src/test/rustdoc-json/fns/generic_args.rs", "status": "modified", "additions": 48, "deletions": 48, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Ffns%2Fgeneric_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Ffns%2Fgeneric_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Ffns%2Fgeneric_args.rs?ref=d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7", "patch": "@@ -3,65 +3,65 @@\n #![feature(no_core)]\n #![no_core]\n \n-// @set foo = generic_args.json \"$.index[*][?(@.name=='Foo')].id\"\n+// @set foo = \"$.index[*][?(@.name=='Foo')].id\"\n pub trait Foo {}\n \n-// @set generic_foo = generic_args.json \"$.index[*][?(@.name=='GenericFoo')].id\"\n+// @set generic_foo = \"$.index[*][?(@.name=='GenericFoo')].id\"\n pub trait GenericFoo<'a> {}\n \n-// @is - \"$.index[*][?(@.name=='generics')].inner.generics.where_predicates\" \"[]\"\n-// @count - \"$.index[*][?(@.name=='generics')].inner.generics.params[*]\" 1\n-// @is - \"$.index[*][?(@.name=='generics')].inner.generics.params[0].name\" '\"F\"'\n-// @is - \"$.index[*][?(@.name=='generics')].inner.generics.params[0].kind.type.default\" 'null'\n-// @count - \"$.index[*][?(@.name=='generics')].inner.generics.params[0].kind.type.bounds[*]\" 1\n-// @is - \"$.index[*][?(@.name=='generics')].inner.generics.params[0].kind.type.bounds[0].trait_bound.trait.id\" '$foo'\n-// @count - \"$.index[*][?(@.name=='generics')].inner.decl.inputs[*]\" 1\n-// @is - \"$.index[*][?(@.name=='generics')].inner.decl.inputs[0][0]\" '\"f\"'\n-// @is - \"$.index[*][?(@.name=='generics')].inner.decl.inputs[0][1].kind\" '\"generic\"'\n-// @is - \"$.index[*][?(@.name=='generics')].inner.decl.inputs[0][1].inner\" '\"F\"'\n+// @is \"$.index[*][?(@.name=='generics')].inner.generics.where_predicates\" \"[]\"\n+// @count \"$.index[*][?(@.name=='generics')].inner.generics.params[*]\" 1\n+// @is \"$.index[*][?(@.name=='generics')].inner.generics.params[0].name\" '\"F\"'\n+// @is \"$.index[*][?(@.name=='generics')].inner.generics.params[0].kind.type.default\" 'null'\n+// @count \"$.index[*][?(@.name=='generics')].inner.generics.params[0].kind.type.bounds[*]\" 1\n+// @is \"$.index[*][?(@.name=='generics')].inner.generics.params[0].kind.type.bounds[0].trait_bound.trait.id\" '$foo'\n+// @count \"$.index[*][?(@.name=='generics')].inner.decl.inputs[*]\" 1\n+// @is \"$.index[*][?(@.name=='generics')].inner.decl.inputs[0][0]\" '\"f\"'\n+// @is \"$.index[*][?(@.name=='generics')].inner.decl.inputs[0][1].kind\" '\"generic\"'\n+// @is \"$.index[*][?(@.name=='generics')].inner.decl.inputs[0][1].inner\" '\"F\"'\n pub fn generics<F: Foo>(f: F) {}\n \n-// @is - \"$.index[*][?(@.name=='impl_trait')].inner.generics.where_predicates\" \"[]\"\n-// @count - \"$.index[*][?(@.name=='impl_trait')].inner.generics.params[*]\" 1\n-// @is - \"$.index[*][?(@.name=='impl_trait')].inner.generics.params[0].name\" '\"impl Foo\"'\n-// @is - \"$.index[*][?(@.name=='impl_trait')].inner.generics.params[0].kind.type.bounds[0].trait_bound.trait.id\" $foo\n-// @count - \"$.index[*][?(@.name=='impl_trait')].inner.decl.inputs[*]\" 1\n-// @is - \"$.index[*][?(@.name=='impl_trait')].inner.decl.inputs[0][0]\" '\"f\"'\n-// @is - \"$.index[*][?(@.name=='impl_trait')].inner.decl.inputs[0][1].kind\" '\"impl_trait\"'\n-// @count - \"$.index[*][?(@.name=='impl_trait')].inner.decl.inputs[0][1].inner[*]\" 1\n-// @is - \"$.index[*][?(@.name=='impl_trait')].inner.decl.inputs[0][1].inner[0].trait_bound.trait.id\" $foo\n+// @is \"$.index[*][?(@.name=='impl_trait')].inner.generics.where_predicates\" \"[]\"\n+// @count \"$.index[*][?(@.name=='impl_trait')].inner.generics.params[*]\" 1\n+// @is \"$.index[*][?(@.name=='impl_trait')].inner.generics.params[0].name\" '\"impl Foo\"'\n+// @is \"$.index[*][?(@.name=='impl_trait')].inner.generics.params[0].kind.type.bounds[0].trait_bound.trait.id\" $foo\n+// @count \"$.index[*][?(@.name=='impl_trait')].inner.decl.inputs[*]\" 1\n+// @is \"$.index[*][?(@.name=='impl_trait')].inner.decl.inputs[0][0]\" '\"f\"'\n+// @is \"$.index[*][?(@.name=='impl_trait')].inner.decl.inputs[0][1].kind\" '\"impl_trait\"'\n+// @count \"$.index[*][?(@.name=='impl_trait')].inner.decl.inputs[0][1].inner[*]\" 1\n+// @is \"$.index[*][?(@.name=='impl_trait')].inner.decl.inputs[0][1].inner[0].trait_bound.trait.id\" $foo\n pub fn impl_trait(f: impl Foo) {}\n \n-// @count - \"$.index[*][?(@.name=='where_clase')].inner.generics.params[*]\" 3\n-// @is - \"$.index[*][?(@.name=='where_clase')].inner.generics.params[0].name\" '\"F\"'\n-// @is - \"$.index[*][?(@.name=='where_clase')].inner.generics.params[0].kind\" '{\"type\": {\"bounds\": [], \"default\": null, \"synthetic\": false}}'\n-// @count - \"$.index[*][?(@.name=='where_clase')].inner.decl.inputs[*]\" 3\n-// @is - \"$.index[*][?(@.name=='where_clase')].inner.decl.inputs[0][0]\" '\"f\"'\n-// @is - \"$.index[*][?(@.name=='where_clase')].inner.decl.inputs[0][1].kind\" '\"generic\"'\n-// @is - \"$.index[*][?(@.name=='where_clase')].inner.decl.inputs[0][1].inner\" '\"F\"'\n-// @count - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[*]\" 3\n+// @count \"$.index[*][?(@.name=='where_clase')].inner.generics.params[*]\" 3\n+// @is \"$.index[*][?(@.name=='where_clase')].inner.generics.params[0].name\" '\"F\"'\n+// @is \"$.index[*][?(@.name=='where_clase')].inner.generics.params[0].kind\" '{\"type\": {\"bounds\": [], \"default\": null, \"synthetic\": false}}'\n+// @count \"$.index[*][?(@.name=='where_clase')].inner.decl.inputs[*]\" 3\n+// @is \"$.index[*][?(@.name=='where_clase')].inner.decl.inputs[0][0]\" '\"f\"'\n+// @is \"$.index[*][?(@.name=='where_clase')].inner.decl.inputs[0][1].kind\" '\"generic\"'\n+// @is \"$.index[*][?(@.name=='where_clase')].inner.decl.inputs[0][1].inner\" '\"F\"'\n+// @count \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[*]\" 3\n \n-// @is - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[0].bound_predicate.type\" '{\"inner\": \"F\", \"kind\": \"generic\"}'\n-// @count - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[0].bound_predicate.bounds[*]\" 1\n-// @is - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[0].bound_predicate.bounds[0].trait_bound.trait.id\" $foo\n+// @is \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[0].bound_predicate.type\" '{\"inner\": \"F\", \"kind\": \"generic\"}'\n+// @count \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[0].bound_predicate.bounds[*]\" 1\n+// @is \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[0].bound_predicate.bounds[0].trait_bound.trait.id\" $foo\n \n-// @is - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[1].bound_predicate.type\" '{\"inner\": \"G\", \"kind\": \"generic\"}'\n-// @count - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[1].bound_predicate.bounds[*]\" 1\n-// @is - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[1].bound_predicate.bounds[0].trait_bound.trait.id\" $generic_foo\n-// @count - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[1].bound_predicate.bounds[0].trait_bound.generic_params[*]\" 1\n-// @is - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[1].bound_predicate.bounds[0].trait_bound.generic_params[0].name\" \\\"\\'a\\\"\n-// @is - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[1].bound_predicate.bounds[0].trait_bound.generic_params[0].kind\" '{ \"lifetime\": { \"outlives\": [] } }'\n-// @is - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[1].bound_predicate.generic_params\" \"[]\"\n+// @is \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[1].bound_predicate.type\" '{\"inner\": \"G\", \"kind\": \"generic\"}'\n+// @count \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[1].bound_predicate.bounds[*]\" 1\n+// @is \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[1].bound_predicate.bounds[0].trait_bound.trait.id\" $generic_foo\n+// @count \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[1].bound_predicate.bounds[0].trait_bound.generic_params[*]\" 1\n+// @is \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[1].bound_predicate.bounds[0].trait_bound.generic_params[0].name\" \\\"\\'a\\\"\n+// @is \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[1].bound_predicate.bounds[0].trait_bound.generic_params[0].kind\" '{ \"lifetime\": { \"outlives\": [] } }'\n+// @is \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[1].bound_predicate.generic_params\" \"[]\"\n \n-// @is - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[2].bound_predicate.type.kind\" '\"borrowed_ref\"'\n-// @is - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[2].bound_predicate.type.inner.lifetime\" \\\"\\'b\\\"\n-// @is - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[2].bound_predicate.type.inner.type\" '{\"inner\": \"H\", \"kind\": \"generic\"}'\n-// @count - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[2].bound_predicate.bounds[*]\" 1\n-// @is - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[2].bound_predicate.bounds[0].trait_bound.trait.id\" $foo\n-// @is - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[2].bound_predicate.bounds[0].trait_bound.generic_params\" \"[]\"\n-// @count - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[2].bound_predicate.generic_params[*]\" 1\n-// @is - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[2].bound_predicate.generic_params[0].name\" \\\"\\'b\\\"\n-// @is - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[2].bound_predicate.generic_params[0].kind\" '{ \"lifetime\": { \"outlives\": [] } }'\n+// @is \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[2].bound_predicate.type.kind\" '\"borrowed_ref\"'\n+// @is \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[2].bound_predicate.type.inner.lifetime\" \\\"\\'b\\\"\n+// @is \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[2].bound_predicate.type.inner.type\" '{\"inner\": \"H\", \"kind\": \"generic\"}'\n+// @count \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[2].bound_predicate.bounds[*]\" 1\n+// @is \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[2].bound_predicate.bounds[0].trait_bound.trait.id\" $foo\n+// @is \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[2].bound_predicate.bounds[0].trait_bound.generic_params\" \"[]\"\n+// @count \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[2].bound_predicate.generic_params[*]\" 1\n+// @is \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[2].bound_predicate.generic_params[0].name\" \\\"\\'b\\\"\n+// @is \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[2].bound_predicate.generic_params[0].kind\" '{ \"lifetime\": { \"outlives\": [] } }'\n pub fn where_clase<F, G, H>(f: F, g: G, h: H)\n where\n     F: Foo,"}, {"sha": "a9bc2d5d727d399b67717e95801d191cff5f246e", "filename": "src/test/rustdoc-json/fns/generic_returns.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Ffns%2Fgeneric_returns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Ffns%2Fgeneric_returns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Ffns%2Fgeneric_returns.rs?ref=d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7", "patch": "@@ -3,15 +3,15 @@\n #![feature(no_core)]\n #![no_core]\n \n-// @count generic_returns.json \"$.index[*][?(@.name=='generic_returns')].inner.items[*]\" 2\n+// @count \"$.index[*][?(@.name=='generic_returns')].inner.items[*]\" 2\n \n-// @set foo = - \"$.index[*][?(@.name=='Foo')].id\"\n+// @set foo = \"$.index[*][?(@.name=='Foo')].id\"\n pub trait Foo {}\n \n-// @is - \"$.index[*][?(@.name=='get_foo')].inner.decl.inputs\" []\n-// @is - \"$.index[*][?(@.name=='get_foo')].inner.decl.output.kind\" '\"impl_trait\"'\n-// @count - \"$.index[*][?(@.name=='get_foo')].inner.decl.output.inner[*]\" 1\n-// @is - \"$.index[*][?(@.name=='get_foo')].inner.decl.output.inner[0].trait_bound.trait.id\" $foo\n+// @is \"$.index[*][?(@.name=='get_foo')].inner.decl.inputs\" []\n+// @is \"$.index[*][?(@.name=='get_foo')].inner.decl.output.kind\" '\"impl_trait\"'\n+// @count \"$.index[*][?(@.name=='get_foo')].inner.decl.output.inner[*]\" 1\n+// @is \"$.index[*][?(@.name=='get_foo')].inner.decl.output.inner[0].trait_bound.trait.id\" $foo\n pub fn get_foo() -> impl Foo {\n     Fooer {}\n }"}, {"sha": "e47c8c25513f6087cee6d706fc45014a2cb4cc50", "filename": "src/test/rustdoc-json/fns/generics.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Ffns%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Ffns%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Ffns%2Fgenerics.rs?ref=d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7", "patch": "@@ -3,24 +3,24 @@\n #![feature(no_core)]\n #![no_core]\n \n-// @set wham_id = generics.json \"$.index[*][?(@.name=='Wham')].id\"\n+// @set wham_id = \"$.index[*][?(@.name=='Wham')].id\"\n pub trait Wham {}\n \n-// @is    - \"$.index[*][?(@.name=='one_generic_param_fn')].inner.generics.where_predicates\" []\n-// @count - \"$.index[*][?(@.name=='one_generic_param_fn')].inner.generics.params[*]\" 1\n-// @is    - \"$.index[*][?(@.name=='one_generic_param_fn')].inner.generics.params[0].name\" '\"T\"'\n-// @has   - \"$.index[*][?(@.name=='one_generic_param_fn')].inner.generics.params[0].kind.type.synthetic\" false\n-// @has   - \"$.index[*][?(@.name=='one_generic_param_fn')].inner.generics.params[0].kind.type.bounds[0].trait_bound.trait.id\" $wham_id\n-// @is    - \"$.index[*][?(@.name=='one_generic_param_fn')].inner.decl.inputs\" '[[\"w\", {\"inner\": \"T\", \"kind\": \"generic\"}]]'\n+// @is    \"$.index[*][?(@.name=='one_generic_param_fn')].inner.generics.where_predicates\" []\n+// @count \"$.index[*][?(@.name=='one_generic_param_fn')].inner.generics.params[*]\" 1\n+// @is    \"$.index[*][?(@.name=='one_generic_param_fn')].inner.generics.params[0].name\" '\"T\"'\n+// @has   \"$.index[*][?(@.name=='one_generic_param_fn')].inner.generics.params[0].kind.type.synthetic\" false\n+// @has   \"$.index[*][?(@.name=='one_generic_param_fn')].inner.generics.params[0].kind.type.bounds[0].trait_bound.trait.id\" $wham_id\n+// @is    \"$.index[*][?(@.name=='one_generic_param_fn')].inner.decl.inputs\" '[[\"w\", {\"inner\": \"T\", \"kind\": \"generic\"}]]'\n pub fn one_generic_param_fn<T: Wham>(w: T) {}\n \n-// @is    - \"$.index[*][?(@.name=='one_synthetic_generic_param_fn')].inner.generics.where_predicates\" []\n-// @count - \"$.index[*][?(@.name=='one_synthetic_generic_param_fn')].inner.generics.params[*]\" 1\n-// @is    - \"$.index[*][?(@.name=='one_synthetic_generic_param_fn')].inner.generics.params[0].name\" '\"impl Wham\"'\n-// @has   - \"$.index[*][?(@.name=='one_synthetic_generic_param_fn')].inner.generics.params[0].kind.type.synthetic\" true\n-// @has   - \"$.index[*][?(@.name=='one_synthetic_generic_param_fn')].inner.generics.params[0].kind.type.bounds[0].trait_bound.trait.id\" $wham_id\n-// @count - \"$.index[*][?(@.name=='one_synthetic_generic_param_fn')].inner.decl.inputs[*]\" 1\n-// @is    - \"$.index[*][?(@.name=='one_synthetic_generic_param_fn')].inner.decl.inputs[0][0]\" '\"w\"'\n-// @is    - \"$.index[*][?(@.name=='one_synthetic_generic_param_fn')].inner.decl.inputs[0][1].kind\" '\"impl_trait\"'\n-// @is    - \"$.index[*][?(@.name=='one_synthetic_generic_param_fn')].inner.decl.inputs[0][1].inner[0].trait_bound.trait.id\" $wham_id\n+// @is    \"$.index[*][?(@.name=='one_synthetic_generic_param_fn')].inner.generics.where_predicates\" []\n+// @count \"$.index[*][?(@.name=='one_synthetic_generic_param_fn')].inner.generics.params[*]\" 1\n+// @is    \"$.index[*][?(@.name=='one_synthetic_generic_param_fn')].inner.generics.params[0].name\" '\"impl Wham\"'\n+// @has   \"$.index[*][?(@.name=='one_synthetic_generic_param_fn')].inner.generics.params[0].kind.type.synthetic\" true\n+// @has   \"$.index[*][?(@.name=='one_synthetic_generic_param_fn')].inner.generics.params[0].kind.type.bounds[0].trait_bound.trait.id\" $wham_id\n+// @count \"$.index[*][?(@.name=='one_synthetic_generic_param_fn')].inner.decl.inputs[*]\" 1\n+// @is    \"$.index[*][?(@.name=='one_synthetic_generic_param_fn')].inner.decl.inputs[0][0]\" '\"w\"'\n+// @is    \"$.index[*][?(@.name=='one_synthetic_generic_param_fn')].inner.decl.inputs[0][1].kind\" '\"impl_trait\"'\n+// @is    \"$.index[*][?(@.name=='one_synthetic_generic_param_fn')].inner.decl.inputs[0][1].inner[0].trait_bound.trait.id\" $wham_id\n pub fn one_synthetic_generic_param_fn(w: impl Wham) {}"}, {"sha": "7ff542900423bd6fe486becb8854206ccaed9abb", "filename": "src/test/rustdoc-json/fns/qualifiers.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Ffns%2Fqualifiers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Ffns%2Fqualifiers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Ffns%2Fqualifiers.rs?ref=d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7", "patch": "@@ -1,33 +1,33 @@\n // edition:2018\n \n-// @is qualifiers.json \"$.index[*][?(@.name=='nothing_fn')].inner.header.async\" false\n-// @is - \"$.index[*][?(@.name=='nothing_fn')].inner.header.const\"  false\n-// @is - \"$.index[*][?(@.name=='nothing_fn')].inner.header.unsafe\" false\n+// @is \"$.index[*][?(@.name=='nothing_fn')].inner.header.async\" false\n+// @is \"$.index[*][?(@.name=='nothing_fn')].inner.header.const\"  false\n+// @is \"$.index[*][?(@.name=='nothing_fn')].inner.header.unsafe\" false\n pub fn nothing_fn() {}\n \n-// @is - \"$.index[*][?(@.name=='unsafe_fn')].inner.header.async\"  false\n-// @is - \"$.index[*][?(@.name=='unsafe_fn')].inner.header.const\"  false\n-// @is - \"$.index[*][?(@.name=='unsafe_fn')].inner.header.unsafe\" true\n+// @is \"$.index[*][?(@.name=='unsafe_fn')].inner.header.async\"  false\n+// @is \"$.index[*][?(@.name=='unsafe_fn')].inner.header.const\"  false\n+// @is \"$.index[*][?(@.name=='unsafe_fn')].inner.header.unsafe\" true\n pub unsafe fn unsafe_fn() {}\n \n-// @is - \"$.index[*][?(@.name=='const_fn')].inner.header.async\"  false\n-// @is - \"$.index[*][?(@.name=='const_fn')].inner.header.const\"  true\n-// @is - \"$.index[*][?(@.name=='const_fn')].inner.header.unsafe\" false\n+// @is \"$.index[*][?(@.name=='const_fn')].inner.header.async\"  false\n+// @is \"$.index[*][?(@.name=='const_fn')].inner.header.const\"  true\n+// @is \"$.index[*][?(@.name=='const_fn')].inner.header.unsafe\" false\n pub const fn const_fn() {}\n \n-// @is - \"$.index[*][?(@.name=='async_fn')].inner.header.async\"  true\n-// @is - \"$.index[*][?(@.name=='async_fn')].inner.header.const\"  false\n-// @is - \"$.index[*][?(@.name=='async_fn')].inner.header.unsafe\" false\n+// @is \"$.index[*][?(@.name=='async_fn')].inner.header.async\"  true\n+// @is \"$.index[*][?(@.name=='async_fn')].inner.header.const\"  false\n+// @is \"$.index[*][?(@.name=='async_fn')].inner.header.unsafe\" false\n pub async fn async_fn() {}\n \n-// @is - \"$.index[*][?(@.name=='async_unsafe_fn')].inner.header.async\"  true\n-// @is - \"$.index[*][?(@.name=='async_unsafe_fn')].inner.header.const\"  false\n-// @is - \"$.index[*][?(@.name=='async_unsafe_fn')].inner.header.unsafe\" true\n+// @is \"$.index[*][?(@.name=='async_unsafe_fn')].inner.header.async\"  true\n+// @is \"$.index[*][?(@.name=='async_unsafe_fn')].inner.header.const\"  false\n+// @is \"$.index[*][?(@.name=='async_unsafe_fn')].inner.header.unsafe\" true\n pub async unsafe fn async_unsafe_fn() {}\n \n-// @is - \"$.index[*][?(@.name=='const_unsafe_fn')].inner.header.async\"  false\n-// @is - \"$.index[*][?(@.name=='const_unsafe_fn')].inner.header.const\"  true\n-// @is - \"$.index[*][?(@.name=='const_unsafe_fn')].inner.header.unsafe\" true\n+// @is \"$.index[*][?(@.name=='const_unsafe_fn')].inner.header.async\"  false\n+// @is \"$.index[*][?(@.name=='const_unsafe_fn')].inner.header.const\"  true\n+// @is \"$.index[*][?(@.name=='const_unsafe_fn')].inner.header.unsafe\" true\n pub const unsafe fn const_unsafe_fn() {}\n \n // It's impossible for a function to be both const and async, so no test for that"}, {"sha": "cbaa0621dc2bb6bf42de3a77c52a7a142a0156ce", "filename": "src/test/rustdoc-json/generic-associated-types/gats.rs", "status": "modified", "additions": 19, "deletions": 21, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Fgeneric-associated-types%2Fgats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Fgeneric-associated-types%2Fgats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fgeneric-associated-types%2Fgats.rs?ref=d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7", "patch": "@@ -8,37 +8,35 @@ pub trait Sized {}\n \n pub trait Display {}\n \n-// @has gats.json\n pub trait LendingIterator {\n-    // @count - \"$.index[*][?(@.name=='LendingItem')].inner.generics.params[*]\" 1\n-    // @is - \"$.index[*][?(@.name=='LendingItem')].inner.generics.params[*].name\" \\\"\\'a\\\"\n-    // @count - \"$.index[*][?(@.name=='LendingItem')].inner.generics.where_predicates[*]\" 1\n-    // @is - \"$.index[*][?(@.name=='LendingItem')].inner.generics.where_predicates[*].bound_predicate.type.inner\" \\\"Self\\\"\n-    // @is - \"$.index[*][?(@.name=='LendingItem')].inner.generics.where_predicates[*].bound_predicate.bounds[*].outlives\" \\\"\\'a\\\"\n-    // @count - \"$.index[*][?(@.name=='LendingItem')].inner.bounds[*]\" 1\n+    // @count \"$.index[*][?(@.name=='LendingItem')].inner.generics.params[*]\" 1\n+    // @is \"$.index[*][?(@.name=='LendingItem')].inner.generics.params[*].name\" \\\"\\'a\\\"\n+    // @count \"$.index[*][?(@.name=='LendingItem')].inner.generics.where_predicates[*]\" 1\n+    // @is \"$.index[*][?(@.name=='LendingItem')].inner.generics.where_predicates[*].bound_predicate.type.inner\" \\\"Self\\\"\n+    // @is \"$.index[*][?(@.name=='LendingItem')].inner.generics.where_predicates[*].bound_predicate.bounds[*].outlives\" \\\"\\'a\\\"\n+    // @count \"$.index[*][?(@.name=='LendingItem')].inner.bounds[*]\" 1\n     type LendingItem<'a>: Display\n     where\n         Self: 'a;\n \n-    // @is - \"$.index[*][?(@.name=='lending_next')].inner.decl.output.kind\" \\\"qualified_path\\\"\n-    // @count - \"$.index[*][?(@.name=='lending_next')].inner.decl.output.inner.args.angle_bracketed.args[*]\" 1\n-    // @count - \"$.index[*][?(@.name=='lending_next')].inner.decl.output.inner.args.angle_bracketed.bindings[*]\" 0\n-    // @is - \"$.index[*][?(@.name=='lending_next')].inner.decl.output.inner.self_type.inner\" \\\"Self\\\"\n-    // @is - \"$.index[*][?(@.name=='lending_next')].inner.decl.output.inner.name\" \\\"LendingItem\\\"\n+    // @is \"$.index[*][?(@.name=='lending_next')].inner.decl.output.kind\" \\\"qualified_path\\\"\n+    // @count \"$.index[*][?(@.name=='lending_next')].inner.decl.output.inner.args.angle_bracketed.args[*]\" 1\n+    // @count \"$.index[*][?(@.name=='lending_next')].inner.decl.output.inner.args.angle_bracketed.bindings[*]\" 0\n+    // @is \"$.index[*][?(@.name=='lending_next')].inner.decl.output.inner.self_type.inner\" \\\"Self\\\"\n+    // @is \"$.index[*][?(@.name=='lending_next')].inner.decl.output.inner.name\" \\\"LendingItem\\\"\n     fn lending_next<'a>(&'a self) -> Self::LendingItem<'a>;\n }\n \n-// @has gats.json\n pub trait Iterator {\n-    // @count - \"$.index[*][?(@.name=='Item')].inner.generics.params[*]\" 0\n-    // @count - \"$.index[*][?(@.name=='Item')].inner.generics.where_predicates[*]\" 0\n-    // @count - \"$.index[*][?(@.name=='Item')].inner.bounds[*]\" 1\n+    // @count \"$.index[*][?(@.name=='Item')].inner.generics.params[*]\" 0\n+    // @count \"$.index[*][?(@.name=='Item')].inner.generics.where_predicates[*]\" 0\n+    // @count \"$.index[*][?(@.name=='Item')].inner.bounds[*]\" 1\n     type Item: Display;\n \n-    // @is - \"$.index[*][?(@.name=='next')].inner.decl.output.kind\" \\\"qualified_path\\\"\n-    // @count - \"$.index[*][?(@.name=='next')].inner.decl.output.inner.args.angle_bracketed.args[*]\" 0\n-    // @count - \"$.index[*][?(@.name=='next')].inner.decl.output.inner.args.angle_bracketed.bindings[*]\" 0\n-    // @is - \"$.index[*][?(@.name=='next')].inner.decl.output.inner.self_type.inner\" \\\"Self\\\"\n-    // @is - \"$.index[*][?(@.name=='next')].inner.decl.output.inner.name\" \\\"Item\\\"\n+    // @is \"$.index[*][?(@.name=='next')].inner.decl.output.kind\" \\\"qualified_path\\\"\n+    // @count \"$.index[*][?(@.name=='next')].inner.decl.output.inner.args.angle_bracketed.args[*]\" 0\n+    // @count \"$.index[*][?(@.name=='next')].inner.decl.output.inner.args.angle_bracketed.bindings[*]\" 0\n+    // @is \"$.index[*][?(@.name=='next')].inner.decl.output.inner.self_type.inner\" \\\"Self\\\"\n+    // @is \"$.index[*][?(@.name=='next')].inner.decl.output.inner.name\" \\\"Item\\\"\n     fn next<'a>(&'a self) -> Self::Item;\n }"}, {"sha": "31f41d0f335bee4c65026030015cc349406eb570", "filename": "src/test/rustdoc-json/generic_impl.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Fgeneric_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Fgeneric_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fgeneric_impl.rs?ref=d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7", "patch": "@@ -1,9 +1,8 @@\n // Regression test for <https://github.com/rust-lang/rust/issues/97986>.\n \n-// @has generic_impl.json\n-// @has - \"$.index[*][?(@.name=='f')]\"\n-// @has - \"$.index[*][?(@.name=='AssocTy')]\"\n-// @has - \"$.index[*][?(@.name=='AssocConst')]\"\n+// @has \"$.index[*][?(@.name=='f')]\"\n+// @has \"$.index[*][?(@.name=='AssocTy')]\"\n+// @has \"$.index[*][?(@.name=='AssocConst')]\"\n \n pub mod m {\n     pub struct S;"}, {"sha": "00051b1219974f9f4bcc73d941428f6ffd581e7e", "filename": "src/test/rustdoc-json/glob_import.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Fglob_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Fglob_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fglob_import.rs?ref=d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7", "patch": "@@ -4,9 +4,8 @@\n #![no_std]\n #![no_core]\n \n-// @has glob_import.json\n-// @has - \"$.index[*][?(@.name=='glob')]\"\n-// @has - \"$.index[*][?(@.kind=='import')].inner.name\" \\\"*\\\"\n+// @has \"$.index[*][?(@.name=='glob')]\"\n+// @has \"$.index[*][?(@.kind=='import')].inner.name\" \\\"*\\\"\n \n \n mod m1 {"}, {"sha": "50d85241427306033c0240e9e57993c95932eb7a", "filename": "src/test/rustdoc-json/impls/auto.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Fimpls%2Fauto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Fimpls%2Fauto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fimpls%2Fauto.rs?ref=d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7", "patch": "@@ -12,7 +12,7 @@ impl Foo {\n }\n \n // Testing spans, so all tests below code\n-// @is auto.json \"$.index[*][?(@.kind=='impl' && @.inner.synthetic==true)].span\" null\n-// @is - \"$.index[*][?(@.docs=='has span')].span.begin\" \"[10, 0]\"\n-// @is - \"$.index[*][?(@.docs=='has span')].span.end\" \"[12, 1]\"\n+// @is \"$.index[*][?(@.kind=='impl' && @.inner.synthetic==true)].span\" null\n+// @is \"$.index[*][?(@.docs=='has span')].span.begin\" \"[10, 0]\"\n+// @is \"$.index[*][?(@.docs=='has span')].span.end\" \"[12, 1]\"\n pub struct Foo;"}, {"sha": "2fb4a84b9a67b4811fa88839f66c31875e8f627f", "filename": "src/test/rustdoc-json/impls/blanket_with_local.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Fimpls%2Fblanket_with_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Fimpls%2Fblanket_with_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fimpls%2Fblanket_with_local.rs?ref=d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7", "patch": "@@ -1,11 +1,11 @@\n // Test for the ICE in rust/83718\n // A blanket impl plus a local type together shouldn't result in mismatched ID issues\n \n-// @has blanket_with_local.json \"$.index[*][?(@.name=='Load')]\"\n+// @has \"$.index[*][?(@.name=='Load')]\"\n pub trait Load {\n-    // @has - \"$.index[*][?(@.name=='load')]\"\n+    // @has \"$.index[*][?(@.name=='load')]\"\n     fn load() {}\n-    // @has - \"$.index[*][?(@.name=='write')]\"\n+    // @has \"$.index[*][?(@.name=='write')]\"\n     fn write(self) {}\n }\n \n@@ -14,5 +14,5 @@ impl<P> Load for P {\n     fn write(self) {}\n }\n \n-// @has - \"$.index[*][?(@.name=='Wrapper')]\"\n+// @has \"$.index[*][?(@.name=='Wrapper')]\"\n pub struct Wrapper {}"}, {"sha": "a34046ac12fb5356190f444de100ca99278133a0", "filename": "src/test/rustdoc-json/impls/import_from_private.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Fimpls%2Fimport_from_private.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Fimpls%2Fimport_from_private.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fimpls%2Fimport_from_private.rs?ref=d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7", "patch": "@@ -4,21 +4,21 @@\n #![no_core]\n \n mod bar {\n-    // @set baz = import_from_private.json \"$.index[*][?(@.kind=='struct')].id\"\n+    // @set baz = \"$.index[*][?(@.kind=='struct')].id\"\n     pub struct Baz;\n-    // @set impl = - \"$.index[*][?(@.kind=='impl')].id\"\n+    // @set impl = \"$.index[*][?(@.kind=='impl')].id\"\n     impl Baz {\n-        // @set doit = - \"$.index[*][?(@.kind=='method')].id\"\n+        // @set doit = \"$.index[*][?(@.kind=='method')].id\"\n         pub fn doit() {}\n     }\n }\n \n-// @set import = - \"$.index[*][?(@.kind=='import')].id\"\n+// @set import = \"$.index[*][?(@.kind=='import')].id\"\n pub use bar::Baz;\n \n // FIXME(adotinthevoid): Use hasexact once #99474 lands\n \n-// @has - \"$.index[*][?(@.kind=='module')].inner.items[*]\" $import\n-// @is  - \"$.index[*][?(@.kind=='import')].inner.id\" $baz\n-// @has - \"$.index[*][?(@.kind=='struct')].inner.impls[*]\" $impl\n-// @has - \"$.index[*][?(@.kind=='impl')].inner.items[*]\" $doit\n+// @has \"$.index[*][?(@.kind=='module')].inner.items[*]\" $import\n+// @is  \"$.index[*][?(@.kind=='import')].inner.id\" $baz\n+// @has \"$.index[*][?(@.kind=='struct')].inner.impls[*]\" $impl\n+// @has \"$.index[*][?(@.kind=='impl')].inner.items[*]\" $doit"}, {"sha": "3446b212c563df71b97bc019b36943410d00ce57", "filename": "src/test/rustdoc-json/keyword.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Fkeyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Fkeyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fkeyword.rs?ref=d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7", "patch": "@@ -6,16 +6,15 @@\n #![feature(rustdoc_internals)]\n #![no_std]\n \n-// @has keyword.json\n-// @!has - \"$.index[*][?(@.name=='match')]\"\n-// @has - \"$.index[*][?(@.name=='foo')]\"\n+// @!has \"$.index[*][?(@.name=='match')]\"\n+// @has \"$.index[*][?(@.name=='foo')]\"\n \n #[doc(keyword = \"match\")]\n /// this is a test!\n pub mod foo {}\n \n-// @!has - \"$.index[*][?(@.name=='hello')]\"\n-// @!has - \"$.index[*][?(@.name=='bar')]\"\n+// @!has \"$.index[*][?(@.name=='hello')]\"\n+// @!has \"$.index[*][?(@.name=='bar')]\"\n #[doc(keyword = \"hello\")]\n /// hello\n mod bar {}"}, {"sha": "326dab8e57aceb517e72ff0ce806b1478e4e448b", "filename": "src/test/rustdoc-json/lifetime/longest.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Flifetime%2Flongest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Flifetime%2Flongest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Flifetime%2Flongest.rs?ref=d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7", "patch": "@@ -3,30 +3,30 @@\n #![feature(no_core)]\n #![no_core]\n \n-// @is longest.json \"$.index[*][?(@.name=='longest')].inner.generics.params[0].name\"  \\\"\\'a\\\"\n-// @is - \"$.index[*][?(@.name=='longest')].inner.generics.params[0].kind\"  '{\"lifetime\": {\"outlives\": []}}'\n-// @is - \"$.index[*][?(@.name=='longest')].inner.generics.params[0].kind\"  '{\"lifetime\": {\"outlives\": []}}'\n-// @count - \"$.index[*][?(@.name=='longest')].inner.generics.params[*]\" 1\n-// @is - \"$.index[*][?(@.name=='longest')].inner.generics.where_predicates\" []\n+// @is \"$.index[*][?(@.name=='longest')].inner.generics.params[0].name\"  \\\"\\'a\\\"\n+// @is \"$.index[*][?(@.name=='longest')].inner.generics.params[0].kind\"  '{\"lifetime\": {\"outlives\": []}}'\n+// @is \"$.index[*][?(@.name=='longest')].inner.generics.params[0].kind\"  '{\"lifetime\": {\"outlives\": []}}'\n+// @count \"$.index[*][?(@.name=='longest')].inner.generics.params[*]\" 1\n+// @is \"$.index[*][?(@.name=='longest')].inner.generics.where_predicates\" []\n \n-// @count - \"$.index[*][?(@.name=='longest')].inner.decl.inputs[*]\" 2\n-// @is - \"$.index[*][?(@.name=='longest')].inner.decl.inputs[0][0]\" '\"l\"'\n-// @is - \"$.index[*][?(@.name=='longest')].inner.decl.inputs[1][0]\" '\"r\"'\n+// @count \"$.index[*][?(@.name=='longest')].inner.decl.inputs[*]\" 2\n+// @is \"$.index[*][?(@.name=='longest')].inner.decl.inputs[0][0]\" '\"l\"'\n+// @is \"$.index[*][?(@.name=='longest')].inner.decl.inputs[1][0]\" '\"r\"'\n \n-// @is - \"$.index[*][?(@.name=='longest')].inner.decl.inputs[0][1].kind\" '\"borrowed_ref\"'\n-// @is - \"$.index[*][?(@.name=='longest')].inner.decl.inputs[0][1].inner.lifetime\" \\\"\\'a\\\"\n-// @is - \"$.index[*][?(@.name=='longest')].inner.decl.inputs[0][1].inner.mutable\" false\n-// @is - \"$.index[*][?(@.name=='longest')].inner.decl.inputs[0][1].inner.type\" '{\"inner\": \"str\", \"kind\": \"primitive\"}'\n+// @is \"$.index[*][?(@.name=='longest')].inner.decl.inputs[0][1].kind\" '\"borrowed_ref\"'\n+// @is \"$.index[*][?(@.name=='longest')].inner.decl.inputs[0][1].inner.lifetime\" \\\"\\'a\\\"\n+// @is \"$.index[*][?(@.name=='longest')].inner.decl.inputs[0][1].inner.mutable\" false\n+// @is \"$.index[*][?(@.name=='longest')].inner.decl.inputs[0][1].inner.type\" '{\"inner\": \"str\", \"kind\": \"primitive\"}'\n \n-// @is - \"$.index[*][?(@.name=='longest')].inner.decl.inputs[1][1].kind\" '\"borrowed_ref\"'\n-// @is - \"$.index[*][?(@.name=='longest')].inner.decl.inputs[1][1].inner.lifetime\" \\\"\\'a\\\"\n-// @is - \"$.index[*][?(@.name=='longest')].inner.decl.inputs[1][1].inner.mutable\" false\n-// @is - \"$.index[*][?(@.name=='longest')].inner.decl.inputs[1][1].inner.type\" '{\"inner\": \"str\", \"kind\": \"primitive\"}'\n+// @is \"$.index[*][?(@.name=='longest')].inner.decl.inputs[1][1].kind\" '\"borrowed_ref\"'\n+// @is \"$.index[*][?(@.name=='longest')].inner.decl.inputs[1][1].inner.lifetime\" \\\"\\'a\\\"\n+// @is \"$.index[*][?(@.name=='longest')].inner.decl.inputs[1][1].inner.mutable\" false\n+// @is \"$.index[*][?(@.name=='longest')].inner.decl.inputs[1][1].inner.type\" '{\"inner\": \"str\", \"kind\": \"primitive\"}'\n \n-// @is - \"$.index[*][?(@.name=='longest')].inner.decl.output.kind\" '\"borrowed_ref\"'\n-// @is - \"$.index[*][?(@.name=='longest')].inner.decl.output.inner.lifetime\" \\\"\\'a\\\"\n-// @is - \"$.index[*][?(@.name=='longest')].inner.decl.output.inner.mutable\" false\n-// @is - \"$.index[*][?(@.name=='longest')].inner.decl.output.inner.type\" '{\"inner\": \"str\", \"kind\": \"primitive\"}'\n+// @is \"$.index[*][?(@.name=='longest')].inner.decl.output.kind\" '\"borrowed_ref\"'\n+// @is \"$.index[*][?(@.name=='longest')].inner.decl.output.inner.lifetime\" \\\"\\'a\\\"\n+// @is \"$.index[*][?(@.name=='longest')].inner.decl.output.inner.mutable\" false\n+// @is \"$.index[*][?(@.name=='longest')].inner.decl.output.inner.type\" '{\"inner\": \"str\", \"kind\": \"primitive\"}'\n \n pub fn longest<'a>(l: &'a str, r: &'a str) -> &'a str {\n     if l.len() > r.len() { l } else { r }"}, {"sha": "e15a533efdc03596825e3331a316e234106ee8ba", "filename": "src/test/rustdoc-json/lifetime/outlives.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Flifetime%2Foutlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Flifetime%2Foutlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Flifetime%2Foutlives.rs?ref=d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7", "patch": "@@ -3,21 +3,21 @@\n #![feature(no_core)]\n #![no_core]\n \n-// @count outlives.json \"$.index[*][?(@.name=='foo')].inner.generics.params[*]\" 3\n-// @is - \"$.index[*][?(@.name=='foo')].inner.generics.where_predicates\" []\n-// @is - \"$.index[*][?(@.name=='foo')].inner.generics.params[0].name\" \\\"\\'a\\\"\n-// @is - \"$.index[*][?(@.name=='foo')].inner.generics.params[1].name\" \\\"\\'b\\\"\n-// @is - \"$.index[*][?(@.name=='foo')].inner.generics.params[2].name\" '\"T\"'\n-// @is - \"$.index[*][?(@.name=='foo')].inner.generics.params[0].kind.lifetime.outlives\" []\n-// @is - \"$.index[*][?(@.name=='foo')].inner.generics.params[1].kind.lifetime.outlives\" [\\\"\\'a\\\"]\n-// @is - \"$.index[*][?(@.name=='foo')].inner.generics.params[2].kind.type.default\" null\n-// @count - \"$.index[*][?(@.name=='foo')].inner.generics.params[2].kind.type.bounds[*]\" 1\n-// @is - \"$.index[*][?(@.name=='foo')].inner.generics.params[2].kind.type.bounds[0].outlives\" \\\"\\'b\\\"\n-// @is - \"$.index[*][?(@.name=='foo')].inner.decl.inputs[0][1].kind\" '\"borrowed_ref\"'\n-// @is - \"$.index[*][?(@.name=='foo')].inner.decl.inputs[0][1].inner.lifetime\" \\\"\\'a\\\"\n-// @is - \"$.index[*][?(@.name=='foo')].inner.decl.inputs[0][1].inner.mutable\" false\n-// @is - \"$.index[*][?(@.name=='foo')].inner.decl.inputs[0][1].inner.type.kind\" '\"borrowed_ref\"'\n-// @is - \"$.index[*][?(@.name=='foo')].inner.decl.inputs[0][1].inner.type.inner.lifetime\" \\\"\\'b\\\"\n-// @is - \"$.index[*][?(@.name=='foo')].inner.decl.inputs[0][1].inner.type.inner.mutable\" false\n-// @is - \"$.index[*][?(@.name=='foo')].inner.decl.inputs[0][1].inner.type.inner.type\" '{\"inner\": \"T\", \"kind\": \"generic\"}'\n+// @count \"$.index[*][?(@.name=='foo')].inner.generics.params[*]\" 3\n+// @is \"$.index[*][?(@.name=='foo')].inner.generics.where_predicates\" []\n+// @is \"$.index[*][?(@.name=='foo')].inner.generics.params[0].name\" \\\"\\'a\\\"\n+// @is \"$.index[*][?(@.name=='foo')].inner.generics.params[1].name\" \\\"\\'b\\\"\n+// @is \"$.index[*][?(@.name=='foo')].inner.generics.params[2].name\" '\"T\"'\n+// @is \"$.index[*][?(@.name=='foo')].inner.generics.params[0].kind.lifetime.outlives\" []\n+// @is \"$.index[*][?(@.name=='foo')].inner.generics.params[1].kind.lifetime.outlives\" [\\\"\\'a\\\"]\n+// @is \"$.index[*][?(@.name=='foo')].inner.generics.params[2].kind.type.default\" null\n+// @count \"$.index[*][?(@.name=='foo')].inner.generics.params[2].kind.type.bounds[*]\" 1\n+// @is \"$.index[*][?(@.name=='foo')].inner.generics.params[2].kind.type.bounds[0].outlives\" \\\"\\'b\\\"\n+// @is \"$.index[*][?(@.name=='foo')].inner.decl.inputs[0][1].kind\" '\"borrowed_ref\"'\n+// @is \"$.index[*][?(@.name=='foo')].inner.decl.inputs[0][1].inner.lifetime\" \\\"\\'a\\\"\n+// @is \"$.index[*][?(@.name=='foo')].inner.decl.inputs[0][1].inner.mutable\" false\n+// @is \"$.index[*][?(@.name=='foo')].inner.decl.inputs[0][1].inner.type.kind\" '\"borrowed_ref\"'\n+// @is \"$.index[*][?(@.name=='foo')].inner.decl.inputs[0][1].inner.type.inner.lifetime\" \\\"\\'b\\\"\n+// @is \"$.index[*][?(@.name=='foo')].inner.decl.inputs[0][1].inner.type.inner.mutable\" false\n+// @is \"$.index[*][?(@.name=='foo')].inner.decl.inputs[0][1].inner.type.inner.type\" '{\"inner\": \"T\", \"kind\": \"generic\"}'\n pub fn foo<'a, 'b: 'a, T: 'b>(_: &'a &'b T) {}"}, {"sha": "4c97d97ceba5265596354e2a90828517150f4df1", "filename": "src/test/rustdoc-json/methods/abi.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Fmethods%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Fmethods%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fmethods%2Fabi.rs?ref=d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7", "patch": "@@ -5,51 +5,51 @@\n #![feature(no_core)]\n #![no_core]\n \n-// @has abi.json \"$.index[*][?(@.name=='Foo')]\"\n+// @has \"$.index[*][?(@.name=='Foo')]\"\n pub struct Foo;\n \n impl Foo {\n-    // @is - \"$.index[*][?(@.name=='abi_rust')].inner.header.abi\" \\\"Rust\\\"\n+    // @is \"$.index[*][?(@.name=='abi_rust')].inner.header.abi\" \\\"Rust\\\"\n     pub fn abi_rust() {}\n \n-    // @is - \"$.index[*][?(@.name=='abi_c')].inner.header.abi\" '{\"C\": {\"unwind\": false}}'\n+    // @is \"$.index[*][?(@.name=='abi_c')].inner.header.abi\" '{\"C\": {\"unwind\": false}}'\n     pub extern \"C\" fn abi_c() {}\n \n-    // @is - \"$.index[*][?(@.name=='abi_system')].inner.header.abi\" '{\"System\": {\"unwind\": false}}'\n+    // @is \"$.index[*][?(@.name=='abi_system')].inner.header.abi\" '{\"System\": {\"unwind\": false}}'\n     pub extern \"system\" fn abi_system() {}\n \n-    // @is - \"$.index[*][?(@.name=='abi_c_unwind')].inner.header.abi\" '{\"C\": {\"unwind\": true}}'\n+    // @is \"$.index[*][?(@.name=='abi_c_unwind')].inner.header.abi\" '{\"C\": {\"unwind\": true}}'\n     pub extern \"C-unwind\" fn abi_c_unwind() {}\n \n-    // @is - \"$.index[*][?(@.name=='abi_system_unwind')].inner.header.abi\" '{\"System\": {\"unwind\": true}}'\n+    // @is \"$.index[*][?(@.name=='abi_system_unwind')].inner.header.abi\" '{\"System\": {\"unwind\": true}}'\n     pub extern \"system-unwind\" fn abi_system_unwind() {}\n \n-    // @is - \"$.index[*][?(@.name=='abi_vectorcall')].inner.header.abi.Other\" '\"\\\"vectorcall\\\"\"'\n+    // @is \"$.index[*][?(@.name=='abi_vectorcall')].inner.header.abi.Other\" '\"\\\"vectorcall\\\"\"'\n     pub extern \"vectorcall\" fn abi_vectorcall() {}\n \n-    // @is - \"$.index[*][?(@.name=='abi_vectorcall_unwind')].inner.header.abi.Other\" '\"\\\"vectorcall-unwind\\\"\"'\n+    // @is \"$.index[*][?(@.name=='abi_vectorcall_unwind')].inner.header.abi.Other\" '\"\\\"vectorcall-unwind\\\"\"'\n     pub extern \"vectorcall-unwind\" fn abi_vectorcall_unwind() {}\n }\n \n pub trait Bar {\n-    // @is - \"$.index[*][?(@.name=='trait_abi_rust')].inner.header.abi\" \\\"Rust\\\"\n+    // @is \"$.index[*][?(@.name=='trait_abi_rust')].inner.header.abi\" \\\"Rust\\\"\n     fn trait_abi_rust() {}\n \n-    // @is - \"$.index[*][?(@.name=='trait_abi_c')].inner.header.abi\" '{\"C\": {\"unwind\": false}}'\n+    // @is \"$.index[*][?(@.name=='trait_abi_c')].inner.header.abi\" '{\"C\": {\"unwind\": false}}'\n     extern \"C\" fn trait_abi_c() {}\n \n-    // @is - \"$.index[*][?(@.name=='trait_abi_system')].inner.header.abi\" '{\"System\": {\"unwind\": false}}'\n+    // @is \"$.index[*][?(@.name=='trait_abi_system')].inner.header.abi\" '{\"System\": {\"unwind\": false}}'\n     extern \"system\" fn trait_abi_system() {}\n \n-    // @is - \"$.index[*][?(@.name=='trait_abi_c_unwind')].inner.header.abi\" '{\"C\": {\"unwind\": true}}'\n+    // @is \"$.index[*][?(@.name=='trait_abi_c_unwind')].inner.header.abi\" '{\"C\": {\"unwind\": true}}'\n     extern \"C-unwind\" fn trait_abi_c_unwind() {}\n \n-    // @is - \"$.index[*][?(@.name=='trait_abi_system_unwind')].inner.header.abi\" '{\"System\": {\"unwind\": true}}'\n+    // @is \"$.index[*][?(@.name=='trait_abi_system_unwind')].inner.header.abi\" '{\"System\": {\"unwind\": true}}'\n     extern \"system-unwind\" fn trait_abi_system_unwind() {}\n \n-    // @is - \"$.index[*][?(@.name=='trait_abi_vectorcall')].inner.header.abi.Other\" '\"\\\"vectorcall\\\"\"'\n+    // @is \"$.index[*][?(@.name=='trait_abi_vectorcall')].inner.header.abi.Other\" '\"\\\"vectorcall\\\"\"'\n     extern \"vectorcall\" fn trait_abi_vectorcall() {}\n \n-    // @is - \"$.index[*][?(@.name=='trait_abi_vectorcall_unwind')].inner.header.abi.Other\" '\"\\\"vectorcall-unwind\\\"\"'\n+    // @is \"$.index[*][?(@.name=='trait_abi_vectorcall_unwind')].inner.header.abi.Other\" '\"\\\"vectorcall-unwind\\\"\"'\n     extern \"vectorcall-unwind\" fn trait_abi_vectorcall_unwind() {}\n }"}, {"sha": "b9a5e56012e3a77238bd7ac5286a5f89bc67a414", "filename": "src/test/rustdoc-json/methods/qualifiers.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Fmethods%2Fqualifiers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Fmethods%2Fqualifiers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fmethods%2Fqualifiers.rs?ref=d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7", "patch": "@@ -3,34 +3,34 @@\n pub struct Foo;\n \n impl Foo {\n-    // @is qualifiers.json \"$.index[*][?(@.name=='const_meth')].inner.header.async\" false\n-    // @is - \"$.index[*][?(@.name=='const_meth')].inner.header.const\"  true\n-    // @is - \"$.index[*][?(@.name=='const_meth')].inner.header.unsafe\" false\n+    // @is \"$.index[*][?(@.name=='const_meth')].inner.header.async\" false\n+    // @is \"$.index[*][?(@.name=='const_meth')].inner.header.const\"  true\n+    // @is \"$.index[*][?(@.name=='const_meth')].inner.header.unsafe\" false\n     pub const fn const_meth() {}\n \n-    // @is - \"$.index[*][?(@.name=='nothing_meth')].inner.header.async\"  false\n-    // @is - \"$.index[*][?(@.name=='nothing_meth')].inner.header.const\"  false\n-    // @is - \"$.index[*][?(@.name=='nothing_meth')].inner.header.unsafe\" false\n+    // @is \"$.index[*][?(@.name=='nothing_meth')].inner.header.async\"  false\n+    // @is \"$.index[*][?(@.name=='nothing_meth')].inner.header.const\"  false\n+    // @is \"$.index[*][?(@.name=='nothing_meth')].inner.header.unsafe\" false\n     pub fn nothing_meth() {}\n \n-    // @is - \"$.index[*][?(@.name=='unsafe_meth')].inner.header.async\"  false\n-    // @is - \"$.index[*][?(@.name=='unsafe_meth')].inner.header.const\"  false\n-    // @is - \"$.index[*][?(@.name=='unsafe_meth')].inner.header.unsafe\" true\n+    // @is \"$.index[*][?(@.name=='unsafe_meth')].inner.header.async\"  false\n+    // @is \"$.index[*][?(@.name=='unsafe_meth')].inner.header.const\"  false\n+    // @is \"$.index[*][?(@.name=='unsafe_meth')].inner.header.unsafe\" true\n     pub unsafe fn unsafe_meth() {}\n \n-    // @is - \"$.index[*][?(@.name=='async_meth')].inner.header.async\"  true\n-    // @is - \"$.index[*][?(@.name=='async_meth')].inner.header.const\"  false\n-    // @is - \"$.index[*][?(@.name=='async_meth')].inner.header.unsafe\" false\n+    // @is \"$.index[*][?(@.name=='async_meth')].inner.header.async\"  true\n+    // @is \"$.index[*][?(@.name=='async_meth')].inner.header.const\"  false\n+    // @is \"$.index[*][?(@.name=='async_meth')].inner.header.unsafe\" false\n     pub async fn async_meth() {}\n \n-    // @is - \"$.index[*][?(@.name=='async_unsafe_meth')].inner.header.async\"  true\n-    // @is - \"$.index[*][?(@.name=='async_unsafe_meth')].inner.header.const\"  false\n-    // @is - \"$.index[*][?(@.name=='async_unsafe_meth')].inner.header.unsafe\" true\n+    // @is \"$.index[*][?(@.name=='async_unsafe_meth')].inner.header.async\"  true\n+    // @is \"$.index[*][?(@.name=='async_unsafe_meth')].inner.header.const\"  false\n+    // @is \"$.index[*][?(@.name=='async_unsafe_meth')].inner.header.unsafe\" true\n     pub async unsafe fn async_unsafe_meth() {}\n \n-    // @is - \"$.index[*][?(@.name=='const_unsafe_meth')].inner.header.async\"  false\n-    // @is - \"$.index[*][?(@.name=='const_unsafe_meth')].inner.header.const\"  true\n-    // @is - \"$.index[*][?(@.name=='const_unsafe_meth')].inner.header.unsafe\" true\n+    // @is \"$.index[*][?(@.name=='const_unsafe_meth')].inner.header.async\"  false\n+    // @is \"$.index[*][?(@.name=='const_unsafe_meth')].inner.header.const\"  true\n+    // @is \"$.index[*][?(@.name=='const_unsafe_meth')].inner.header.unsafe\" true\n     pub const unsafe fn const_unsafe_meth() {}\n \n     // It's impossible for a method to be both const and async, so no test for that"}, {"sha": "73ec9392ce94bf1f86681168802594ccf0fc8e2e", "filename": "src/test/rustdoc-json/nested.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Fnested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Fnested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fnested.rs?ref=d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7", "patch": "@@ -1,31 +1,31 @@\n // edition:2018\n // compile-flags: --crate-version 1.0.0\n \n-// @is nested.json \"$.crate_version\" \\\"1.0.0\\\"\n-// @is - \"$.index[*][?(@.name=='nested')].kind\" \\\"module\\\"\n-// @is - \"$.index[*][?(@.name=='nested')].inner.is_crate\" true\n+// @is \"$.crate_version\" \\\"1.0.0\\\"\n+// @is \"$.index[*][?(@.name=='nested')].kind\" \\\"module\\\"\n+// @is \"$.index[*][?(@.name=='nested')].inner.is_crate\" true\n \n-// @set l1_id = - \"$.index[*][?(@.name=='l1')].id\"\n-// @ismany - \"$.index[*][?(@.name=='nested')].inner.items[*]\" $l1_id\n+// @set l1_id = \"$.index[*][?(@.name=='l1')].id\"\n+// @ismany \"$.index[*][?(@.name=='nested')].inner.items[*]\" $l1_id\n \n-// @is nested.json \"$.index[*][?(@.name=='l1')].kind\" \\\"module\\\"\n-// @is - \"$.index[*][?(@.name=='l1')].inner.is_crate\" false\n+// @is \"$.index[*][?(@.name=='l1')].kind\" \\\"module\\\"\n+// @is \"$.index[*][?(@.name=='l1')].inner.is_crate\" false\n pub mod l1 {\n-    // @is nested.json \"$.index[*][?(@.name=='l3')].kind\" \\\"module\\\"\n-    // @is - \"$.index[*][?(@.name=='l3')].inner.is_crate\" false\n-    // @set l3_id = - \"$.index[*][?(@.name=='l3')].id\"\n+    // @is \"$.index[*][?(@.name=='l3')].kind\" \\\"module\\\"\n+    // @is \"$.index[*][?(@.name=='l3')].inner.is_crate\" false\n+    // @set l3_id = \"$.index[*][?(@.name=='l3')].id\"\n     pub mod l3 {\n \n-        // @is nested.json \"$.index[*][?(@.name=='L4')].kind\" \\\"struct\\\"\n-        // @is - \"$.index[*][?(@.name=='L4')].inner.struct_type\" \\\"unit\\\"\n-        // @set l4_id = - \"$.index[*][?(@.name=='L4')].id\"\n-        // @ismany - \"$.index[*][?(@.name=='l3')].inner.items[*]\" $l4_id\n+        // @is \"$.index[*][?(@.name=='L4')].kind\" \\\"struct\\\"\n+        // @is \"$.index[*][?(@.name=='L4')].inner.struct_type\" \\\"unit\\\"\n+        // @set l4_id = \"$.index[*][?(@.name=='L4')].id\"\n+        // @ismany \"$.index[*][?(@.name=='l3')].inner.items[*]\" $l4_id\n         pub struct L4;\n     }\n-    // @is nested.json \"$.index[*][?(@.inner.source=='l3::L4')].kind\" \\\"import\\\"\n-    // @is - \"$.index[*][?(@.inner.source=='l3::L4')].inner.glob\" false\n-    // @is - \"$.index[*][?(@.inner.source=='l3::L4')].inner.id\" $l4_id\n-    // @set l4_use_id = - \"$.index[*][?(@.inner.source=='l3::L4')].id\"\n+    // @is \"$.index[*][?(@.inner.source=='l3::L4')].kind\" \\\"import\\\"\n+    // @is \"$.index[*][?(@.inner.source=='l3::L4')].inner.glob\" false\n+    // @is \"$.index[*][?(@.inner.source=='l3::L4')].inner.id\" $l4_id\n+    // @set l4_use_id = \"$.index[*][?(@.inner.source=='l3::L4')].id\"\n     pub use l3::L4;\n }\n-// @ismany - \"$.index[*][?(@.name=='l1')].inner.items[*]\" $l3_id $l4_use_id\n+// @ismany \"$.index[*][?(@.name=='l1')].inner.items[*]\" $l3_id $l4_use_id"}, {"sha": "04b1a358fba4ea0710d6bec46145b8d9b28ef2a0", "filename": "src/test/rustdoc-json/output_generics.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Foutput_generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Foutput_generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Foutput_generics.rs?ref=d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7", "patch": "@@ -2,12 +2,11 @@\n \n // This is a regression test for #98009.\n \n-// @has output_generics.json\n-// @has - \"$.index[*][?(@.name=='this_compiles')]\"\n-// @has - \"$.index[*][?(@.name=='this_does_not')]\"\n-// @has - \"$.index[*][?(@.name=='Events')]\"\n-// @has - \"$.index[*][?(@.name=='Other')]\"\n-// @has - \"$.index[*][?(@.name=='Trait')]\"\n+// @has \"$.index[*][?(@.name=='this_compiles')]\"\n+// @has \"$.index[*][?(@.name=='this_does_not')]\"\n+// @has \"$.index[*][?(@.name=='Events')]\"\n+// @has \"$.index[*][?(@.name=='Other')]\"\n+// @has \"$.index[*][?(@.name=='Trait')]\"\n \n struct Events<R>(R);\n "}, {"sha": "6454dd7f51fab144871182c30e841e0c524546d2", "filename": "src/test/rustdoc-json/primitive.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Fprimitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Fprimitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fprimitive.rs?ref=d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7", "patch": "@@ -5,16 +5,16 @@\n #[doc(primitive = \"usize\")]\n mod usize {}\n \n-// @set local_crate_id = primitive.json \"$.index[*][?(@.name=='primitive')].crate_id\"\n+// @set local_crate_id = \"$.index[*][?(@.name=='primitive')].crate_id\"\n \n-// @has - \"$.index[*][?(@.name=='ilog10')]\"\n-// @!is - \"$.index[*][?(@.name=='ilog10')].crate_id\" $local_crate_id\n-// @has - \"$.index[*][?(@.name=='checked_add')]\"\n-// @!is - \"$.index[*][?(@.name=='checked_add')]\" $local_crate_id\n-// @!has - \"$.index[*][?(@.name=='is_ascii_uppercase')]\"\n+// @has \"$.index[*][?(@.name=='ilog10')]\"\n+// @!is \"$.index[*][?(@.name=='ilog10')].crate_id\" $local_crate_id\n+// @has \"$.index[*][?(@.name=='checked_add')]\"\n+// @!is \"$.index[*][?(@.name=='checked_add')]\" $local_crate_id\n+// @!has \"$.index[*][?(@.name=='is_ascii_uppercase')]\"\n \n-// @is - \"$.index[*][?(@.kind=='import' && @.inner.name=='my_i32')].inner.id\" null\n+// @is \"$.index[*][?(@.kind=='import' && @.inner.name=='my_i32')].inner.id\" null\n pub use i32 as my_i32;\n \n-// @is - \"$.index[*][?(@.kind=='import' && @.inner.name=='u32')].inner.id\" null\n+// @is \"$.index[*][?(@.kind=='import' && @.inner.name=='u32')].inner.id\" null\n pub use u32;"}, {"sha": "56b35cd14c0f2677b23d1dcfda5b4d8ccc839f49", "filename": "src/test/rustdoc-json/primitive_overloading.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Fprimitive_overloading.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Fprimitive_overloading.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fprimitive_overloading.rs?ref=d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7", "patch": "@@ -7,9 +7,8 @@\n \n #![no_core]\n \n-// @has primitive_overloading.json\n-// @has - \"$.index[*][?(@.name=='usize')]\"\n-// @has - \"$.index[*][?(@.name=='prim')]\"\n+// @has \"$.index[*][?(@.name=='usize')]\"\n+// @has \"$.index[*][?(@.name=='prim')]\"\n \n #[doc(primitive = \"usize\")]\n /// This is the built-in type `usize`."}, {"sha": "491a7b1add4839e4abe6a9689d83b5ea72f02e67", "filename": "src/test/rustdoc-json/primitives.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Fprimitives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Fprimitives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fprimitives.rs?ref=d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7", "patch": "@@ -1,22 +1,22 @@\n #![feature(never_type)]\n \n-// @has primitives.json \"$.index[*][?(@.name=='PrimNever')].visibility\" \\\"public\\\"\n-// @has - \"$.index[*][?(@.name=='PrimNever')].inner.type.kind\" \\\"primitive\\\"\n-// @has - \"$.index[*][?(@.name=='PrimNever')].inner.type.inner\" \\\"never\\\"\n+// @has \"$.index[*][?(@.name=='PrimNever')].visibility\" \\\"public\\\"\n+// @has \"$.index[*][?(@.name=='PrimNever')].inner.type.kind\" \\\"primitive\\\"\n+// @has \"$.index[*][?(@.name=='PrimNever')].inner.type.inner\" \\\"never\\\"\n pub type PrimNever = !;\n \n-// @has - \"$.index[*][?(@.name=='PrimStr')].inner.type.kind\" \\\"primitive\\\"\n-// @has - \"$.index[*][?(@.name=='PrimStr')].inner.type.inner\" \\\"str\\\"\n+// @has \"$.index[*][?(@.name=='PrimStr')].inner.type.kind\" \\\"primitive\\\"\n+// @has \"$.index[*][?(@.name=='PrimStr')].inner.type.inner\" \\\"str\\\"\n pub type PrimStr = str;\n \n-// @has - \"$.index[*][?(@.name=='PrimBool')].inner.type.kind\" \\\"primitive\\\"\n-// @has - \"$.index[*][?(@.name=='PrimBool')].inner.type.inner\" \\\"bool\\\"\n+// @has \"$.index[*][?(@.name=='PrimBool')].inner.type.kind\" \\\"primitive\\\"\n+// @has \"$.index[*][?(@.name=='PrimBool')].inner.type.inner\" \\\"bool\\\"\n pub type PrimBool = bool;\n \n-// @has - \"$.index[*][?(@.name=='PrimChar')].inner.type.kind\" \\\"primitive\\\"\n-// @has - \"$.index[*][?(@.name=='PrimChar')].inner.type.inner\" \\\"char\\\"\n+// @has \"$.index[*][?(@.name=='PrimChar')].inner.type.kind\" \\\"primitive\\\"\n+// @has \"$.index[*][?(@.name=='PrimChar')].inner.type.inner\" \\\"char\\\"\n pub type PrimChar = char;\n \n-// @has - \"$.index[*][?(@.name=='PrimU8')].inner.type.kind\" \\\"primitive\\\"\n-// @has - \"$.index[*][?(@.name=='PrimU8')].inner.type.inner\" \\\"u8\\\"\n+// @has \"$.index[*][?(@.name=='PrimU8')].inner.type.kind\" \\\"primitive\\\"\n+// @has \"$.index[*][?(@.name=='PrimU8')].inner.type.inner\" \\\"u8\\\"\n pub type PrimU8 = u8;"}, {"sha": "f076feb7185a76bdccfce3457928c5331500be5a", "filename": "src/test/rustdoc-json/reexport/export_extern_crate_as_self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Freexport%2Fexport_extern_crate_as_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Freexport%2Fexport_extern_crate_as_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Freexport%2Fexport_extern_crate_as_self.rs?ref=d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7", "patch": "@@ -7,5 +7,5 @@\n \n // ignore-tidy-linelength\n \n-// @is export_extern_crate_as_self.json \"$.index[*][?(@.kind=='module')].name\" \\\"export_extern_crate_as_self\\\"\n+// @is \"$.index[*][?(@.kind=='module')].name\" \\\"export_extern_crate_as_self\\\"\n pub extern crate self as export_extern_crate_as_self; // Must be the same name as the crate already has"}, {"sha": "7a1e8c11ffa75018bbf28f9860b8b95b4d80fe43", "filename": "src/test/rustdoc-json/reexport/glob_extern.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Freexport%2Fglob_extern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Freexport%2Fglob_extern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Freexport%2Fglob_extern.rs?ref=d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7", "patch": "@@ -3,21 +3,21 @@\n #![no_core]\n #![feature(no_core)]\n \n-// @is glob_extern.json \"$.index[*][?(@.name=='mod1')].kind\" \\\"module\\\"\n-// @is - \"$.index[*][?(@.name=='mod1')].inner.is_stripped\" \"true\"\n+// @is \"$.index[*][?(@.name=='mod1')].kind\" \\\"module\\\"\n+// @is \"$.index[*][?(@.name=='mod1')].inner.is_stripped\" \"true\"\n mod mod1 {\n     extern \"C\" {\n-        // @set public_fn_id = - \"$.index[*][?(@.name=='public_fn')].id\"\n+        // @set public_fn_id = \"$.index[*][?(@.name=='public_fn')].id\"\n         pub fn public_fn();\n-        // @!has - \"$.index[*][?(@.name=='private_fn')]\"\n+        // @!has \"$.index[*][?(@.name=='private_fn')]\"\n         fn private_fn();\n     }\n-    // @ismany - \"$.index[*][?(@.name=='mod1')].inner.items[*]\" $public_fn_id\n-    // @set mod1_id = - \"$.index[*][?(@.name=='mod1')].id\"\n+    // @ismany \"$.index[*][?(@.name=='mod1')].inner.items[*]\" $public_fn_id\n+    // @set mod1_id = \"$.index[*][?(@.name=='mod1')].id\"\n }\n \n-// @is - \"$.index[*][?(@.kind=='import')].inner.glob\" true\n-// @is - \"$.index[*][?(@.kind=='import')].inner.id\" $mod1_id\n-// @set use_id = - \"$.index[*][?(@.kind=='import')].id\"\n-// @ismany - \"$.index[*][?(@.name=='glob_extern')].inner.items[*]\" $use_id\n+// @is \"$.index[*][?(@.kind=='import')].inner.glob\" true\n+// @is \"$.index[*][?(@.kind=='import')].inner.id\" $mod1_id\n+// @set use_id = \"$.index[*][?(@.kind=='import')].id\"\n+// @ismany \"$.index[*][?(@.name=='glob_extern')].inner.items[*]\" $use_id\n pub use mod1::*;"}, {"sha": "3a83a20818b8a1efed57d192cd75c5b6deba1456", "filename": "src/test/rustdoc-json/reexport/glob_private.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Freexport%2Fglob_private.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Freexport%2Fglob_private.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Freexport%2Fglob_private.rs?ref=d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7", "patch": "@@ -3,31 +3,31 @@\n #![no_core]\n #![feature(no_core)]\n \n-// @is glob_private.json \"$.index[*][?(@.name=='mod1')].kind\" \\\"module\\\"\n-// @is glob_private.json \"$.index[*][?(@.name=='mod1')].inner.is_stripped\" \"true\"\n+// @is \"$.index[*][?(@.name=='mod1')].kind\" \\\"module\\\"\n+// @is \"$.index[*][?(@.name=='mod1')].inner.is_stripped\" \"true\"\n mod mod1 {\n-    // @is - \"$.index[*][?(@.name=='mod2')].kind\" \\\"module\\\"\n-    // @is - \"$.index[*][?(@.name=='mod2')].inner.is_stripped\" \"true\"\n+    // @is \"$.index[*][?(@.name=='mod2')].kind\" \\\"module\\\"\n+    // @is \"$.index[*][?(@.name=='mod2')].inner.is_stripped\" \"true\"\n     mod mod2 {\n-        // @set m2pub_id = - \"$.index[*][?(@.name=='Mod2Public')].id\"\n+        // @set m2pub_id = \"$.index[*][?(@.name=='Mod2Public')].id\"\n         pub struct Mod2Public;\n \n-        // @!has - \"$.index[*][?(@.name=='Mod2Private')]\"\n+        // @!has \"$.index[*][?(@.name=='Mod2Private')]\"\n         struct Mod2Private;\n     }\n \n-    // @set mod2_use_id = - \"$.index[*][?(@.kind=='import' && @.inner.name=='mod2')].id\"\n+    // @set mod2_use_id = \"$.index[*][?(@.kind=='import' && @.inner.name=='mod2')].id\"\n     pub use self::mod2::*;\n \n-    // @set m1pub_id = - \"$.index[*][?(@.name=='Mod1Public')].id\"\n+    // @set m1pub_id = \"$.index[*][?(@.name=='Mod1Public')].id\"\n     pub struct Mod1Public;\n-    // @!has - \"$.index[*][?(@.name=='Mod1Private')]\"\n+    // @!has \"$.index[*][?(@.name=='Mod1Private')]\"\n     struct Mod1Private;\n }\n \n-// @set mod1_use_id = - \"$.index[*][?(@.kind=='import' && @.inner.name=='mod1')].id\"\n+// @set mod1_use_id = \"$.index[*][?(@.kind=='import' && @.inner.name=='mod1')].id\"\n pub use mod1::*;\n \n-// @ismany - \"$.index[*][?(@.name=='mod2')].inner.items[*]\" $m2pub_id\n-// @ismany - \"$.index[*][?(@.name=='mod1')].inner.items[*]\" $m1pub_id $mod2_use_id\n-// @ismany - \"$.index[*][?(@.name=='glob_private')].inner.items[*]\" $mod1_use_id\n+// @ismany \"$.index[*][?(@.name=='mod2')].inner.items[*]\" $m2pub_id\n+// @ismany \"$.index[*][?(@.name=='mod1')].inner.items[*]\" $m1pub_id $mod2_use_id\n+// @ismany \"$.index[*][?(@.name=='glob_private')].inner.items[*]\" $mod1_use_id"}, {"sha": "68cb694f4994913b564e1d2a0af795b506a80aa2", "filename": "src/test/rustdoc-json/reexport/in_root_and_mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Freexport%2Fin_root_and_mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Freexport%2Fin_root_and_mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Freexport%2Fin_root_and_mod.rs?ref=d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7", "patch": "@@ -1,17 +1,17 @@\n #![feature(no_core)]\n #![no_core]\n \n-// @is in_root_and_mod.json \"$.index[*][?(@.name=='foo')].kind\" \\\"module\\\"\n-// @is in_root_and_mod.json \"$.index[*][?(@.name=='foo')].inner.is_stripped\" \"true\"\n+// @is \"$.index[*][?(@.name=='foo')].kind\" \\\"module\\\"\n+// @is \"$.index[*][?(@.name=='foo')].inner.is_stripped\" \"true\"\n mod foo {\n-    // @has - \"$.index[*][?(@.name=='Foo')]\"\n+    // @has \"$.index[*][?(@.name=='Foo')]\"\n     pub struct Foo;\n }\n \n-// @has - \"$.index[*][?(@.kind=='import' && @.inner.source=='foo::Foo')]\"\n+// @has \"$.index[*][?(@.kind=='import' && @.inner.source=='foo::Foo')]\"\n pub use foo::Foo;\n \n pub mod bar {\n-    // @has - \"$.index[*][?(@.kind=='import' && @.inner.source=='crate::foo::Foo')]\"\n+    // @has \"$.index[*][?(@.kind=='import' && @.inner.source=='crate::foo::Foo')]\"\n     pub use crate::foo::Foo;\n }"}, {"sha": "f6d932d927b8d51a15d49f7aeb01b61f04db0a1c", "filename": "src/test/rustdoc-json/reexport/in_root_and_mod_pub.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Freexport%2Fin_root_and_mod_pub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Freexport%2Fin_root_and_mod_pub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Freexport%2Fin_root_and_mod_pub.rs?ref=d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7", "patch": "@@ -2,19 +2,19 @@\n #![no_core]\n \n pub mod foo {\n-    // @set bar_id = in_root_and_mod_pub.json \"$.index[*][?(@.name=='Bar')].id\"\n-    // @ismany - \"$.index[*][?(@.name=='foo')].inner.items[*]\" $bar_id\n+    // @set bar_id = \"$.index[*][?(@.name=='Bar')].id\"\n+    // @ismany \"$.index[*][?(@.name=='foo')].inner.items[*]\" $bar_id\n     pub struct Bar;\n }\n \n-// @set root_import_id = - \"$.index[*][?(@.inner.source=='foo::Bar')].id\"\n-// @is - \"$.index[*][?(@.inner.source=='foo::Bar')].inner.id\" $bar_id\n-// @has - \"$.index[*][?(@.name=='in_root_and_mod_pub')].inner.items[*]\" $root_import_id\n+// @set root_import_id = \"$.index[*][?(@.inner.source=='foo::Bar')].id\"\n+// @is \"$.index[*][?(@.inner.source=='foo::Bar')].inner.id\" $bar_id\n+// @has \"$.index[*][?(@.name=='in_root_and_mod_pub')].inner.items[*]\" $root_import_id\n pub use foo::Bar;\n \n pub mod baz {\n-    // @set baz_import_id = - \"$.index[*][?(@.inner.source=='crate::foo::Bar')].id\"\n-    // @is - \"$.index[*][?(@.inner.source=='crate::foo::Bar')].inner.id\" $bar_id\n-    // @ismany - \"$.index[*][?(@.name=='baz')].inner.items[*]\" $baz_import_id\n+    // @set baz_import_id = \"$.index[*][?(@.inner.source=='crate::foo::Bar')].id\"\n+    // @is \"$.index[*][?(@.inner.source=='crate::foo::Bar')].inner.id\" $bar_id\n+    // @ismany \"$.index[*][?(@.name=='baz')].inner.items[*]\" $baz_import_id\n     pub use crate::foo::Bar;\n }"}, {"sha": "b4882100f06562285914e32489a8d47329b1b80b", "filename": "src/test/rustdoc-json/reexport/macro.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Freexport%2Fmacro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Freexport%2Fmacro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Freexport%2Fmacro.rs?ref=d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7", "patch": "@@ -3,13 +3,13 @@\n #![no_core]\n #![feature(no_core)]\n \n-// @set repro_id = macro.json \"$.index[*][?(@.name=='repro')].id\"\n+// @set repro_id = \"$.index[*][?(@.name=='repro')].id\"\n #[macro_export]\n macro_rules! repro {\n     () => {};\n }\n \n-// @set repro2_id = macro.json \"$.index[*][?(@.inner.name=='repro2')].id\"\n+// @set repro2_id = \"$.index[*][?(@.inner.name=='repro2')].id\"\n pub use crate::repro as repro2;\n \n-// @ismany macro.json \"$.index[*][?(@.name=='macro')].inner.items[*]\" $repro_id $repro2_id\n+// @ismany \"$.index[*][?(@.name=='macro')].inner.items[*]\" $repro_id $repro2_id"}, {"sha": "687a3b2ac8b2c94968a6e5b4c53fc5c4c581c886", "filename": "src/test/rustdoc-json/reexport/private_twice_one_inline.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Freexport%2Fprivate_twice_one_inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Freexport%2Fprivate_twice_one_inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Freexport%2Fprivate_twice_one_inline.rs?ref=d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7", "patch": "@@ -10,19 +10,19 @@\n extern crate pub_struct as foo;\n #[doc(inline)]\n \n-// @set crate_use_id = private_twice_one_inline.json \"$.index[*][?(@.docs=='Hack A')].id\"\n-// @set foo_id = - \"$.index[*][?(@.docs=='Hack A')].inner.id\"\n+// @set crate_use_id = \"$.index[*][?(@.docs=='Hack A')].id\"\n+// @set foo_id = \"$.index[*][?(@.docs=='Hack A')].inner.id\"\n /// Hack A\n pub use foo::Foo;\n \n-// @set bar_id = - \"$.index[*][?(@.name=='bar')].id\"\n+// @set bar_id = \"$.index[*][?(@.name=='bar')].id\"\n pub mod bar {\n-    // @is - \"$.index[*][?(@.docs=='Hack B')].inner.id\" $foo_id\n-    // @set bar_use_id = - \"$.index[*][?(@.docs=='Hack B')].id\"\n-    // @ismany - \"$.index[*][?(@.name=='bar')].inner.items[*]\" $bar_use_id\n+    // @is \"$.index[*][?(@.docs=='Hack B')].inner.id\" $foo_id\n+    // @set bar_use_id = \"$.index[*][?(@.docs=='Hack B')].id\"\n+    // @ismany \"$.index[*][?(@.name=='bar')].inner.items[*]\" $bar_use_id\n     /// Hack B\n     pub use foo::Foo;\n }\n \n-// @ismany - \"$.index[*][?(@.kind=='import')].id\" $crate_use_id $bar_use_id\n-// @ismany - \"$.index[*][?(@.name=='private_twice_one_inline')].inner.items[*]\" $bar_id $crate_use_id\n+// @ismany \"$.index[*][?(@.kind=='import')].id\" $crate_use_id $bar_use_id\n+// @ismany \"$.index[*][?(@.name=='private_twice_one_inline')].inner.items[*]\" $bar_id $crate_use_id"}, {"sha": "ec78b06d09ac873e5c113199244ef9bf0c29d2ae", "filename": "src/test/rustdoc-json/reexport/private_two_names.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Freexport%2Fprivate_two_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Freexport%2Fprivate_two_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Freexport%2Fprivate_two_names.rs?ref=d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7", "patch": "@@ -6,18 +6,18 @@\n #![no_core]\n #![feature(no_core)]\n \n-// @is private_two_names.json \"$.index[*][?(@.name=='style')].kind\" \\\"module\\\"\n-// @is private_two_names.json \"$.index[*][?(@.name=='style')].inner.is_stripped\" \"true\"\n+// @is \"$.index[*][?(@.name=='style')].kind\" \\\"module\\\"\n+// @is \"$.index[*][?(@.name=='style')].inner.is_stripped\" \"true\"\n mod style {\n-    // @set color_struct_id = - \"$.index[*][?(@.kind=='struct' && @.name=='Color')].id\"\n+    // @set color_struct_id = \"$.index[*][?(@.kind=='struct' && @.name=='Color')].id\"\n     pub struct Color;\n }\n \n-// @is - \"$.index[*][?(@.kind=='import' && @.inner.name=='Color')].inner.id\" $color_struct_id\n-// @set color_export_id = - \"$.index[*][?(@.kind=='import' && @.inner.name=='Color')].id\"\n+// @is \"$.index[*][?(@.kind=='import' && @.inner.name=='Color')].inner.id\" $color_struct_id\n+// @set color_export_id = \"$.index[*][?(@.kind=='import' && @.inner.name=='Color')].id\"\n pub use style::Color;\n-// @is - \"$.index[*][?(@.kind=='import' && @.inner.name=='Colour')].inner.id\" $color_struct_id\n-// @set colour_export_id = - \"$.index[*][?(@.kind=='import' && @.inner.name=='Colour')].id\"\n+// @is \"$.index[*][?(@.kind=='import' && @.inner.name=='Colour')].inner.id\" $color_struct_id\n+// @set colour_export_id = \"$.index[*][?(@.kind=='import' && @.inner.name=='Colour')].id\"\n pub use style::Color as Colour;\n \n-// @ismany - \"$.index[*][?(@.name=='private_two_names')].inner.items[*]\" $color_export_id $colour_export_id\n+// @ismany \"$.index[*][?(@.name=='private_two_names')].inner.items[*]\" $color_export_id $colour_export_id"}, {"sha": "1537f834481f49f49287c5a339c63ce8248464de", "filename": "src/test/rustdoc-json/reexport/rename_private.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Freexport%2Frename_private.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Freexport%2Frename_private.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Freexport%2Frename_private.rs?ref=d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7", "patch": "@@ -3,12 +3,12 @@\n #![no_core]\n #![feature(no_core)]\n \n-// @is rename_private.json \"$.index[*][?(@.name=='inner')].kind\" \\\"module\\\"\n-// @is rename_private.json \"$.index[*][?(@.name=='inner')].inner.is_stripped\" \"true\"\n+// @is \"$.index[*][?(@.name=='inner')].kind\" \\\"module\\\"\n+// @is \"$.index[*][?(@.name=='inner')].inner.is_stripped\" \"true\"\n mod inner {\n-    // @has - \"$.index[*][?(@.name=='Public')]\"\n+    // @has \"$.index[*][?(@.name=='Public')]\"\n     pub struct Public;\n }\n \n-// @is - \"$.index[*][?(@.kind=='import')].inner.name\" \\\"NewName\\\"\n+// @is \"$.index[*][?(@.kind=='import')].inner.name\" \\\"NewName\\\"\n pub use inner::Public as NewName;"}, {"sha": "e30907fe2561883361aff1e03cebff90cd0cce48", "filename": "src/test/rustdoc-json/reexport/rename_public.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Freexport%2Frename_public.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Freexport%2Frename_public.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Freexport%2Frename_public.rs?ref=d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7", "patch": "@@ -3,15 +3,15 @@\n #![no_core]\n #![feature(no_core)]\n \n-// @set inner_id = rename_public.json \"$.index[*][?(@.name=='inner')].id\"\n+// @set inner_id = \"$.index[*][?(@.name=='inner')].id\"\n pub mod inner {\n-    // @set public_id = - \"$.index[*][?(@.name=='Public')].id\"\n-    // @ismany - \"$.index[*][?(@.name=='inner')].inner.items[*]\" $public_id\n+    // @set public_id = \"$.index[*][?(@.name=='Public')].id\"\n+    // @ismany \"$.index[*][?(@.name=='inner')].inner.items[*]\" $public_id\n     pub struct Public;\n }\n-// @set import_id = - \"$.index[*][?(@.inner.name=='NewName')].id\"\n-// @!has - \"$.index[*][?(@.inner.name=='Public')]\"\n-// @is - \"$.index[*][?(@.inner.name=='NewName')].inner.source\" \\\"inner::Public\\\"\n+// @set import_id = \"$.index[*][?(@.inner.name=='NewName')].id\"\n+// @!has \"$.index[*][?(@.inner.name=='Public')]\"\n+// @is \"$.index[*][?(@.inner.name=='NewName')].inner.source\" \\\"inner::Public\\\"\n pub use inner::Public as NewName;\n \n-// @ismany - \"$.index[*][?(@.name=='rename_public')].inner.items[*]\" $inner_id $import_id\n+// @ismany \"$.index[*][?(@.name=='rename_public')].inner.items[*]\" $inner_id $import_id"}, {"sha": "880dbdc4416e94ac67612a839a054a14d2a95265", "filename": "src/test/rustdoc-json/reexport/same_type_reexported_more_than_once.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Freexport%2Fsame_type_reexported_more_than_once.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Freexport%2Fsame_type_reexported_more_than_once.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Freexport%2Fsame_type_reexported_more_than_once.rs?ref=d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7", "patch": "@@ -6,18 +6,16 @@\n #![no_std]\n #![no_core]\n \n-// @has same_type_reexported_more_than_once.json\n-\n mod inner {\n-    // @set trait_id = - \"$.index[*][?(@.name=='Trait')].id\"\n+    // @set trait_id = \"$.index[*][?(@.name=='Trait')].id\"\n     pub trait Trait {}\n }\n \n-// @set export_id = - \"$.index[*][?(@.inner.name=='Trait')].id\"\n-// @is - \"$.index[*][?(@.inner.name=='Trait')].inner.id\" $trait_id\n+// @set export_id = \"$.index[*][?(@.inner.name=='Trait')].id\"\n+// @is \"$.index[*][?(@.inner.name=='Trait')].inner.id\" $trait_id\n pub use inner::Trait;\n-// @set reexport_id = - \"$.index[*][?(@.inner.name=='Reexport')].id\"\n-// @is - \"$.index[*][?(@.inner.name=='Reexport')].inner.id\" $trait_id\n+// @set reexport_id = \"$.index[*][?(@.inner.name=='Reexport')].id\"\n+// @is \"$.index[*][?(@.inner.name=='Reexport')].inner.id\" $trait_id\n pub use inner::Trait as Reexport;\n \n-// @ismany - \"$.index[*][?(@.name=='same_type_reexported_more_than_once')].inner.items[*]\" $reexport_id $export_id\n+// @ismany \"$.index[*][?(@.name=='same_type_reexported_more_than_once')].inner.items[*]\" $reexport_id $export_id"}, {"sha": "82348b383c363b741d7007a0a6d39227c0fce5af", "filename": "src/test/rustdoc-json/reexport/simple_private.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Freexport%2Fsimple_private.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Freexport%2Fsimple_private.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Freexport%2Fsimple_private.rs?ref=d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7", "patch": "@@ -2,16 +2,16 @@\n #![no_core]\n #![feature(no_core)]\n \n-// @is simple_private.json \"$.index[*][?(@.name=='inner')].kind\" \\\"module\\\"\n-// @is simple_private.json \"$.index[*][?(@.name=='inner')].inner.is_stripped\" \"true\"\n+// @is \"$.index[*][?(@.name=='inner')].kind\" \\\"module\\\"\n+// @is \"$.index[*][?(@.name=='inner')].inner.is_stripped\" \"true\"\n mod inner {\n-    // @set pub_id = - \"$.index[*][?(@.name=='Public')].id\"\n+    // @set pub_id = \"$.index[*][?(@.name=='Public')].id\"\n     pub struct Public;\n }\n \n-// @is - \"$.index[*][?(@.kind=='import')].inner.name\" \\\"Public\\\"\n-// @set use_id = - \"$.index[*][?(@.kind=='import')].id\"\n+// @is \"$.index[*][?(@.kind=='import')].inner.name\" \\\"Public\\\"\n+// @set use_id = \"$.index[*][?(@.kind=='import')].id\"\n pub use inner::Public;\n \n-// @ismany - \"$.index[*][?(@.name=='inner')].inner.items[*]\" $pub_id\n-// @ismany - \"$.index[*][?(@.name=='simple_private')].inner.items[*]\" $use_id\n+// @ismany \"$.index[*][?(@.name=='inner')].inner.items[*]\" $pub_id\n+// @ismany \"$.index[*][?(@.name=='simple_private')].inner.items[*]\" $use_id"}, {"sha": "e64a0dcb769fa5c23e8d48e52f145a4cbdb30529", "filename": "src/test/rustdoc-json/reexport/simple_public.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Freexport%2Fsimple_public.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Freexport%2Fsimple_public.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Freexport%2Fsimple_public.rs?ref=d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7", "patch": "@@ -3,16 +3,16 @@\n #![no_core]\n #![feature(no_core)]\n \n-// @set inner_id = simple_public.json \"$.index[*][?(@.name=='inner')].id\"\n+// @set inner_id = \"$.index[*][?(@.name=='inner')].id\"\n pub mod inner {\n \n-    // @set public_id = - \"$.index[*][?(@.name=='Public')].id\"\n-    // @ismany - \"$.index[*][?(@.name=='inner')].inner.items[*]\" $public_id\n+    // @set public_id = \"$.index[*][?(@.name=='Public')].id\"\n+    // @ismany \"$.index[*][?(@.name=='inner')].inner.items[*]\" $public_id\n     pub struct Public;\n }\n \n-// @set import_id = - \"$.index[*][?(@.inner.name=='Public')].id\"\n-// @is - \"$.index[*][?(@.inner.name=='Public')].inner.source\" \\\"inner::Public\\\"\n+// @set import_id = \"$.index[*][?(@.inner.name=='Public')].id\"\n+// @is \"$.index[*][?(@.inner.name=='Public')].inner.source\" \\\"inner::Public\\\"\n pub use inner::Public;\n \n-// @ismany - \"$.index[*][?(@.name=='simple_public')].inner.items[*]\" $import_id $inner_id\n+// @ismany \"$.index[*][?(@.name=='simple_public')].inner.items[*]\" $import_id $inner_id"}, {"sha": "a8d1fae30dfef49ff60196020e6beaca7ea8437e", "filename": "src/test/rustdoc-json/return_private.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Freturn_private.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Freturn_private.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Freturn_private.rs?ref=d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7", "patch": "@@ -8,8 +8,8 @@ mod secret {\n     pub struct Secret;\n }\n \n-// @is return_private.json \"$.index[*][?(@.name=='get_secret')].kind\" \\\"function\\\"\n-// @is return_private.json \"$.index[*][?(@.name=='get_secret')].inner.decl.output.inner.name\" \\\"secret::Secret\\\"\n+// @is \"$.index[*][?(@.name=='get_secret')].kind\" \\\"function\\\"\n+// @is \"$.index[*][?(@.name=='get_secret')].inner.decl.output.inner.name\" \\\"secret::Secret\\\"\n pub fn get_secret() -> secret::Secret {\n     secret::Secret\n }"}, {"sha": "33e95ce69d05947a34fdcd55d13f336bc5255b14", "filename": "src/test/rustdoc-json/stripped_modules.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Fstripped_modules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Fstripped_modules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fstripped_modules.rs?ref=d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7", "patch": "@@ -1,20 +1,20 @@\n #![no_core]\n #![feature(no_core)]\n \n-// @!has stripped_modules.json \"$.index[*][?(@.name=='no_pub_inner')]\"\n+// @!has \"$.index[*][?(@.name=='no_pub_inner')]\"\n mod no_pub_inner {\n     fn priv_inner() {}\n }\n \n-// @!has - \"$.index[*][?(@.name=='pub_inner_unreachable')]\"\n+// @!has \"$.index[*][?(@.name=='pub_inner_unreachable')]\"\n mod pub_inner_unreachable {\n-    // @!has - \"$.index[*][?(@.name=='pub_inner_1')]\"\n+    // @!has \"$.index[*][?(@.name=='pub_inner_1')]\"\n     pub fn pub_inner_1() {}\n }\n \n-// @has - \"$.index[*][?(@.name=='pub_inner_reachable')]\"\n+// @has \"$.index[*][?(@.name=='pub_inner_reachable')]\"\n mod pub_inner_reachable {\n-    // @has - \"$.index[*][?(@.name=='pub_inner_2')]\"\n+    // @has \"$.index[*][?(@.name=='pub_inner_2')]\"\n     pub fn pub_inner_2() {}\n }\n "}, {"sha": "2ad9e86096c36b273c179836e81477336bb88605", "filename": "src/test/rustdoc-json/structs/plain_empty.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Fstructs%2Fplain_empty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Fstructs%2Fplain_empty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fstructs%2Fplain_empty.rs?ref=d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7", "patch": "@@ -1,6 +1,6 @@\n-// @has plain_empty.json \"$.index[*][?(@.name=='PlainEmpty')].visibility\" \\\"public\\\"\n-// @has - \"$.index[*][?(@.name=='PlainEmpty')].kind\" \\\"struct\\\"\n-// @has - \"$.index[*][?(@.name=='PlainEmpty')].inner.struct_type\" \\\"plain\\\"\n-// @has - \"$.index[*][?(@.name=='PlainEmpty')].inner.fields_stripped\" false\n-// @has - \"$.index[*][?(@.name=='PlainEmpty')].inner.fields\" []\n+// @has \"$.index[*][?(@.name=='PlainEmpty')].visibility\" \\\"public\\\"\n+// @has \"$.index[*][?(@.name=='PlainEmpty')].kind\" \\\"struct\\\"\n+// @has \"$.index[*][?(@.name=='PlainEmpty')].inner.struct_type\" \\\"plain\\\"\n+// @has \"$.index[*][?(@.name=='PlainEmpty')].inner.fields_stripped\" false\n+// @has \"$.index[*][?(@.name=='PlainEmpty')].inner.fields\" []\n pub struct PlainEmpty {}"}, {"sha": "91fac359422e91c4314aa162664a57a79e411105", "filename": "src/test/rustdoc-json/structs/tuple.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Fstructs%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Fstructs%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fstructs%2Ftuple.rs?ref=d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7", "patch": "@@ -1,5 +1,5 @@\n-// @has tuple.json \"$.index[*][?(@.name=='Tuple')].visibility\" \\\"public\\\"\n-// @has - \"$.index[*][?(@.name=='Tuple')].kind\" \\\"struct\\\"\n-// @has - \"$.index[*][?(@.name=='Tuple')].inner.struct_type\" \\\"tuple\\\"\n-// @has - \"$.index[*][?(@.name=='Tuple')].inner.fields_stripped\" true\n+// @has \"$.index[*][?(@.name=='Tuple')].visibility\" \\\"public\\\"\n+// @has \"$.index[*][?(@.name=='Tuple')].kind\" \\\"struct\\\"\n+// @has \"$.index[*][?(@.name=='Tuple')].inner.struct_type\" \\\"tuple\\\"\n+// @has \"$.index[*][?(@.name=='Tuple')].inner.fields_stripped\" true\n pub struct Tuple(u32, String);"}, {"sha": "85a515b5e78ac427c4788d2bf1c97b7b483eba52", "filename": "src/test/rustdoc-json/structs/unit.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Fstructs%2Funit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Fstructs%2Funit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fstructs%2Funit.rs?ref=d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7", "patch": "@@ -1,5 +1,5 @@\n-// @has unit.json \"$.index[*][?(@.name=='Unit')].visibility\" \\\"public\\\"\n-// @has - \"$.index[*][?(@.name=='Unit')].kind\" \\\"struct\\\"\n-// @has - \"$.index[*][?(@.name=='Unit')].inner.struct_type\" \\\"unit\\\"\n-// @has - \"$.index[*][?(@.name=='Unit')].inner.fields\" []\n+// @has \"$.index[*][?(@.name=='Unit')].visibility\" \\\"public\\\"\n+// @has \"$.index[*][?(@.name=='Unit')].kind\" \\\"struct\\\"\n+// @has \"$.index[*][?(@.name=='Unit')].inner.struct_type\" \\\"unit\\\"\n+// @has \"$.index[*][?(@.name=='Unit')].inner.fields\" []\n pub struct Unit;"}, {"sha": "b0ad1883f8a2f6eba718354746596cd4269ff820", "filename": "src/test/rustdoc-json/structs/with_generics.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Fstructs%2Fwith_generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Fstructs%2Fwith_generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fstructs%2Fwith_generics.rs?ref=d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7", "patch": "@@ -1,13 +1,13 @@\n use std::collections::HashMap;\n \n-// @has with_generics.json \"$.index[*][?(@.name=='WithGenerics')].visibility\" \\\"public\\\"\n-// @has - \"$.index[*][?(@.name=='WithGenerics')].kind\" \\\"struct\\\"\n-// @has - \"$.index[*][?(@.name=='WithGenerics')].inner.generics.params[0].name\" \\\"T\\\"\n-// @has - \"$.index[*][?(@.name=='WithGenerics')].inner.generics.params[0].kind.type\"\n-// @has - \"$.index[*][?(@.name=='WithGenerics')].inner.generics.params[1].name\" \\\"U\\\"\n-// @has - \"$.index[*][?(@.name=='WithGenerics')].inner.generics.params[1].kind.type\"\n-// @has - \"$.index[*][?(@.name=='WithGenerics')].inner.struct_type\" \\\"plain\\\"\n-// @has - \"$.index[*][?(@.name=='WithGenerics')].inner.fields_stripped\" true\n+// @has \"$.index[*][?(@.name=='WithGenerics')].visibility\" \\\"public\\\"\n+// @has \"$.index[*][?(@.name=='WithGenerics')].kind\" \\\"struct\\\"\n+// @has \"$.index[*][?(@.name=='WithGenerics')].inner.generics.params[0].name\" \\\"T\\\"\n+// @has \"$.index[*][?(@.name=='WithGenerics')].inner.generics.params[0].kind.type\"\n+// @has \"$.index[*][?(@.name=='WithGenerics')].inner.generics.params[1].name\" \\\"U\\\"\n+// @has \"$.index[*][?(@.name=='WithGenerics')].inner.generics.params[1].kind.type\"\n+// @has \"$.index[*][?(@.name=='WithGenerics')].inner.struct_type\" \\\"plain\\\"\n+// @has \"$.index[*][?(@.name=='WithGenerics')].inner.fields_stripped\" true\n pub struct WithGenerics<T, U> {\n     stuff: Vec<T>,\n     things: HashMap<U, U>,"}, {"sha": "b74050dde78696c55d7342038a83bb5df02270fb", "filename": "src/test/rustdoc-json/structs/with_primitives.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Fstructs%2Fwith_primitives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Fstructs%2Fwith_primitives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fstructs%2Fwith_primitives.rs?ref=d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7", "patch": "@@ -1,9 +1,9 @@\n-// @has with_primitives.json \"$.index[*][?(@.name=='WithPrimitives')].visibility\" \\\"public\\\"\n-// @has - \"$.index[*][?(@.name=='WithPrimitives')].kind\" \\\"struct\\\"\n-// @has - \"$.index[*][?(@.name=='WithPrimitives')].inner.generics.params[0].name\" \\\"\\'a\\\"\n-// @has - \"$.index[*][?(@.name=='WithPrimitives')].inner.generics.params[0].kind.lifetime.outlives\" []\n-// @has - \"$.index[*][?(@.name=='WithPrimitives')].inner.struct_type\" \\\"plain\\\"\n-// @has - \"$.index[*][?(@.name=='WithPrimitives')].inner.fields_stripped\" true\n+// @has \"$.index[*][?(@.name=='WithPrimitives')].visibility\" \\\"public\\\"\n+// @has \"$.index[*][?(@.name=='WithPrimitives')].kind\" \\\"struct\\\"\n+// @has \"$.index[*][?(@.name=='WithPrimitives')].inner.generics.params[0].name\" \\\"\\'a\\\"\n+// @has \"$.index[*][?(@.name=='WithPrimitives')].inner.generics.params[0].kind.lifetime.outlives\" []\n+// @has \"$.index[*][?(@.name=='WithPrimitives')].inner.struct_type\" \\\"plain\\\"\n+// @has \"$.index[*][?(@.name=='WithPrimitives')].inner.fields_stripped\" true\n pub struct WithPrimitives<'a> {\n     num: u32,\n     s: &'a str,"}, {"sha": "4565aba65879d7e56c018b6fc71eb1e037a7f9ef", "filename": "src/test/rustdoc-json/traits/has_body.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Ftraits%2Fhas_body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Ftraits%2Fhas_body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Ftraits%2Fhas_body.rs?ref=d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7", "patch": "@@ -1,21 +1,21 @@\n-// @has has_body.json \"$.index[*][?(@.name=='Foo')]\"\n+// @has \"$.index[*][?(@.name=='Foo')]\"\n pub trait Foo {\n-    // @has - \"$.index[*][?(@.name=='no_self')].inner.has_body\" false\n+    // @has \"$.index[*][?(@.name=='no_self')].inner.has_body\" false\n     fn no_self();\n-    // @has - \"$.index[*][?(@.name=='move_self')].inner.has_body\" false\n+    // @has \"$.index[*][?(@.name=='move_self')].inner.has_body\" false\n     fn move_self(self);\n-    // @has - \"$.index[*][?(@.name=='ref_self')].inner.has_body\" false\n+    // @has \"$.index[*][?(@.name=='ref_self')].inner.has_body\" false\n     fn ref_self(&self);\n \n-    // @has - \"$.index[*][?(@.name=='no_self_def')].inner.has_body\" true\n+    // @has \"$.index[*][?(@.name=='no_self_def')].inner.has_body\" true\n     fn no_self_def() {}\n-    // @has - \"$.index[*][?(@.name=='move_self_def')].inner.has_body\" true\n+    // @has \"$.index[*][?(@.name=='move_self_def')].inner.has_body\" true\n     fn move_self_def(self) {}\n-    // @has - \"$.index[*][?(@.name=='ref_self_def')].inner.has_body\" true\n+    // @has \"$.index[*][?(@.name=='ref_self_def')].inner.has_body\" true\n     fn ref_self_def(&self) {}\n }\n \n pub trait Bar: Clone {\n-    // @has - \"$.index[*][?(@.name=='method')].inner.has_body\" false\n+    // @has \"$.index[*][?(@.name=='method')].inner.has_body\" false\n     fn method(&self, param: usize);\n }"}, {"sha": "db3fe5df73920c43b86207712f87a05c1326d489", "filename": "src/test/rustdoc-json/traits/implementors.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Ftraits%2Fimplementors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Ftraits%2Fimplementors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Ftraits%2Fimplementors.rs?ref=d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7", "patch": "@@ -1,19 +1,19 @@\n #![feature(no_core)]\n #![no_core]\n \n-// @set wham = implementors.json \"$.index[*][?(@.name=='Wham')].id\"\n-// @count - \"$.index[*][?(@.name=='Wham')].inner.implementations[*]\" 1\n-// @set gmWham = - \"$.index[*][?(@.name=='Wham')].inner.implementations[0]\"\n+// @set wham = \"$.index[*][?(@.name=='Wham')].id\"\n+// @count \"$.index[*][?(@.name=='Wham')].inner.implementations[*]\" 1\n+// @set gmWham = \"$.index[*][?(@.name=='Wham')].inner.implementations[0]\"\n pub trait Wham {}\n \n-// @count - \"$.index[*][?(@.name=='GeorgeMichael')].inner.impls[*]\" 1\n-// @is - \"$.index[*][?(@.name=='GeorgeMichael')].inner.impls[0]\" $gmWham\n-// @set gm = - \"$.index[*][?(@.name=='Wham')].id\"\n+// @count \"$.index[*][?(@.name=='GeorgeMichael')].inner.impls[*]\" 1\n+// @is \"$.index[*][?(@.name=='GeorgeMichael')].inner.impls[0]\" $gmWham\n+// @set gm = \"$.index[*][?(@.name=='Wham')].id\"\n \n // jsonpath_lib isnt expressive enough (for now) to get the \"impl\" item, so we\n // just check it isn't pointing to the type, but when you port to jsondocck-ng\n // check what the impl item is\n-// @!is - \"$.index[*][?(@.name=='Wham')].inner.implementations[0]\" $gm\n+// @!is \"$.index[*][?(@.name=='Wham')].inner.implementations[0]\" $gm\n pub struct GeorgeMichael {}\n \n impl Wham for GeorgeMichael {}"}, {"sha": "4048fdd74b490835c65408c7a4efe50ca55c8a31", "filename": "src/test/rustdoc-json/traits/supertrait.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Ftraits%2Fsupertrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Ftraits%2Fsupertrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Ftraits%2Fsupertrait.rs?ref=d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7", "patch": "@@ -4,23 +4,23 @@\n #![feature(lang_items)]\n #![no_core]\n \n-// @set loud_id = supertrait.json \"$.index[*][?(@.name=='Loud')].id\"\n+// @set loud_id = \"$.index[*][?(@.name=='Loud')].id\"\n pub trait Loud {}\n \n-// @set very_loud_id = - \"$.index[*][?(@.name=='VeryLoud')].id\"\n-// @count - \"$.index[*][?(@.name=='VeryLoud')].inner.bounds[*]\" 1\n-// @is -    \"$.index[*][?(@.name=='VeryLoud')].inner.bounds[0].trait_bound.trait.id\" $loud_id\n+// @set very_loud_id = \"$.index[*][?(@.name=='VeryLoud')].id\"\n+// @count \"$.index[*][?(@.name=='VeryLoud')].inner.bounds[*]\" 1\n+// @is    \"$.index[*][?(@.name=='VeryLoud')].inner.bounds[0].trait_bound.trait.id\" $loud_id\n pub trait VeryLoud: Loud {}\n \n-// @set sounds_good_id = - \"$.index[*][?(@.name=='SoundsGood')].id\"\n+// @set sounds_good_id = \"$.index[*][?(@.name=='SoundsGood')].id\"\n pub trait SoundsGood {}\n \n-// @count - \"$.index[*][?(@.name=='MetalBand')].inner.bounds[*]\" 2\n-// @is -    \"$.index[*][?(@.name=='MetalBand')].inner.bounds[0].trait_bound.trait.id\" $very_loud_id\n-// @is -    \"$.index[*][?(@.name=='MetalBand')].inner.bounds[1].trait_bound.trait.id\" $sounds_good_id\n+// @count \"$.index[*][?(@.name=='MetalBand')].inner.bounds[*]\" 2\n+// @is    \"$.index[*][?(@.name=='MetalBand')].inner.bounds[0].trait_bound.trait.id\" $very_loud_id\n+// @is    \"$.index[*][?(@.name=='MetalBand')].inner.bounds[1].trait_bound.trait.id\" $sounds_good_id\n pub trait MetalBand: VeryLoud + SoundsGood {}\n \n-// @count - \"$.index[*][?(@.name=='DnabLatem')].inner.bounds[*]\" 2\n-// @is -    \"$.index[*][?(@.name=='DnabLatem')].inner.bounds[1].trait_bound.trait.id\" $very_loud_id\n-// @is -    \"$.index[*][?(@.name=='DnabLatem')].inner.bounds[0].trait_bound.trait.id\" $sounds_good_id\n+// @count \"$.index[*][?(@.name=='DnabLatem')].inner.bounds[*]\" 2\n+// @is    \"$.index[*][?(@.name=='DnabLatem')].inner.bounds[1].trait_bound.trait.id\" $very_loud_id\n+// @is    \"$.index[*][?(@.name=='DnabLatem')].inner.bounds[0].trait_bound.trait.id\" $sounds_good_id\n pub trait DnabLatem: SoundsGood + VeryLoud {}"}, {"sha": "03c6481f80ea29bcab2ab13b5c4d259094f2206f", "filename": "src/test/rustdoc-json/type/dyn.rs", "status": "modified", "additions": 39, "deletions": 39, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Ftype%2Fdyn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Ftype%2Fdyn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Ftype%2Fdyn.rs?ref=d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7", "patch": "@@ -1,48 +1,48 @@\n // ignore-tidy-linelength\n use std::fmt::Debug;\n \n-// @count dyn.json \"$.index[*][?(@.name=='dyn')].inner.items[*]\" 3\n-// @set sync_int_gen = - \"$.index[*][?(@.name=='SyncIntGen')].id\"\n-// @set ref_fn       = - \"$.index[*][?(@.name=='RefFn')].id\"\n-// @set weird_order  = - \"$.index[*][?(@.name=='WeirdOrder')].id\"\n-// @has - \"$.index[*][?(@.name=='dyn')].inner.items[*]\" $sync_int_gen\n-// @has - \"$.index[*][?(@.name=='dyn')].inner.items[*]\" $ref_fn\n-// @has - \"$.index[*][?(@.name=='dyn')].inner.items[*]\" $weird_order\n+// @count \"$.index[*][?(@.name=='dyn')].inner.items[*]\" 3\n+// @set sync_int_gen = \"$.index[*][?(@.name=='SyncIntGen')].id\"\n+// @set ref_fn       = \"$.index[*][?(@.name=='RefFn')].id\"\n+// @set weird_order  = \"$.index[*][?(@.name=='WeirdOrder')].id\"\n+// @has \"$.index[*][?(@.name=='dyn')].inner.items[*]\" $sync_int_gen\n+// @has \"$.index[*][?(@.name=='dyn')].inner.items[*]\" $ref_fn\n+// @has \"$.index[*][?(@.name=='dyn')].inner.items[*]\" $weird_order\n \n-// @is    - \"$.index[*][?(@.name=='SyncIntGen')].kind\" \\\"typedef\\\"\n-// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.generics\" '{\"params\": [], \"where_predicates\": []}'\n-// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.kind\" \\\"resolved_path\\\"\n-// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.name\" \\\"Box\\\"\n-// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.bindings\" []\n-// @count - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args\" 1\n-// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.kind\" \\\"dyn_trait\\\"\n-// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.lifetime\" \\\"\\'static\\\"\n-// @count - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.traits[*]\" 3\n-// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.traits[0].generic_params\" []\n-// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.traits[1].generic_params\" []\n-// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.traits[2].generic_params\" []\n-// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.traits[0].trait.name\" '\"Fn\"'\n-// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.traits[1].trait.name\" '\"Send\"'\n-// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.traits[2].trait.name\" '\"Sync\"'\n-// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.traits[0].trait.args\" '{\"parenthesized\": {\"inputs\": [],\"output\": {\"inner\": \"i32\",\"kind\": \"primitive\"}}}'\n+// @is    \"$.index[*][?(@.name=='SyncIntGen')].kind\" \\\"typedef\\\"\n+// @is    \"$.index[*][?(@.name=='SyncIntGen')].inner.generics\" '{\"params\": [], \"where_predicates\": []}'\n+// @is    \"$.index[*][?(@.name=='SyncIntGen')].inner.type.kind\" \\\"resolved_path\\\"\n+// @is    \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.name\" \\\"Box\\\"\n+// @is    \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.bindings\" []\n+// @count \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args\" 1\n+// @is    \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.kind\" \\\"dyn_trait\\\"\n+// @is    \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.lifetime\" \\\"\\'static\\\"\n+// @count \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.traits[*]\" 3\n+// @is    \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.traits[0].generic_params\" []\n+// @is    \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.traits[1].generic_params\" []\n+// @is    \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.traits[2].generic_params\" []\n+// @is    \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.traits[0].trait.name\" '\"Fn\"'\n+// @is    \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.traits[1].trait.name\" '\"Send\"'\n+// @is    \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.traits[2].trait.name\" '\"Sync\"'\n+// @is    \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.traits[0].trait.args\" '{\"parenthesized\": {\"inputs\": [],\"output\": {\"inner\": \"i32\",\"kind\": \"primitive\"}}}'\n pub type SyncIntGen = Box<dyn Fn() -> i32 + Send + Sync + 'static>;\n \n-// @is - \"$.index[*][?(@.name=='RefFn')].kind\" \\\"typedef\\\"\n-// @is - \"$.index[*][?(@.name=='RefFn')].inner.generics\" '{\"params\": [{\"kind\": {\"lifetime\": {\"outlives\": []}},\"name\": \"'\\''a\"}],\"where_predicates\": []}'\n-// @is - \"$.index[*][?(@.name=='RefFn')].inner.type.kind\" '\"borrowed_ref\"'\n-// @is - \"$.index[*][?(@.name=='RefFn')].inner.type.inner.mutable\" 'false'\n-// @is - \"$.index[*][?(@.name=='RefFn')].inner.type.inner.lifetime\" \"\\\"'a\\\"\"\n-// @is - \"$.index[*][?(@.name=='RefFn')].inner.type.inner.type.kind\" '\"dyn_trait\"'\n-// @is - \"$.index[*][?(@.name=='RefFn')].inner.type.inner.type.inner.lifetime\" null\n-// @count - \"$.index[*][?(@.name=='RefFn')].inner.type.inner.type.inner.traits[*]\" 1\n-// @is - \"$.index[*][?(@.name=='RefFn')].inner.type.inner.type.inner.traits[0].generic_params\" '[{\"kind\": {\"lifetime\": {\"outlives\": []}},\"name\": \"'\\''b\"}]'\n-// @is - \"$.index[*][?(@.name=='RefFn')].inner.type.inner.type.inner.traits[0].trait.name\" '\"Fn\"'\n-// @is - \"$.index[*][?(@.name=='RefFn')].inner.type.inner.type.inner.traits[0].trait.args.parenthesized.inputs[0].kind\" '\"borrowed_ref\"'\n-// @is - \"$.index[*][?(@.name=='RefFn')].inner.type.inner.type.inner.traits[0].trait.args.parenthesized.inputs[0].inner.lifetime\" \"\\\"'b\\\"\"\n-// @is - \"$.index[*][?(@.name=='RefFn')].inner.type.inner.type.inner.traits[0].trait.args.parenthesized.output.kind\" '\"borrowed_ref\"'\n-// @is - \"$.index[*][?(@.name=='RefFn')].inner.type.inner.type.inner.traits[0].trait.args.parenthesized.output.inner.lifetime\" \"\\\"'b\\\"\"\n+// @is \"$.index[*][?(@.name=='RefFn')].kind\" \\\"typedef\\\"\n+// @is \"$.index[*][?(@.name=='RefFn')].inner.generics\" '{\"params\": [{\"kind\": {\"lifetime\": {\"outlives\": []}},\"name\": \"'\\''a\"}],\"where_predicates\": []}'\n+// @is \"$.index[*][?(@.name=='RefFn')].inner.type.kind\" '\"borrowed_ref\"'\n+// @is \"$.index[*][?(@.name=='RefFn')].inner.type.inner.mutable\" 'false'\n+// @is \"$.index[*][?(@.name=='RefFn')].inner.type.inner.lifetime\" \"\\\"'a\\\"\"\n+// @is \"$.index[*][?(@.name=='RefFn')].inner.type.inner.type.kind\" '\"dyn_trait\"'\n+// @is \"$.index[*][?(@.name=='RefFn')].inner.type.inner.type.inner.lifetime\" null\n+// @count \"$.index[*][?(@.name=='RefFn')].inner.type.inner.type.inner.traits[*]\" 1\n+// @is \"$.index[*][?(@.name=='RefFn')].inner.type.inner.type.inner.traits[0].generic_params\" '[{\"kind\": {\"lifetime\": {\"outlives\": []}},\"name\": \"'\\''b\"}]'\n+// @is \"$.index[*][?(@.name=='RefFn')].inner.type.inner.type.inner.traits[0].trait.name\" '\"Fn\"'\n+// @is \"$.index[*][?(@.name=='RefFn')].inner.type.inner.type.inner.traits[0].trait.args.parenthesized.inputs[0].kind\" '\"borrowed_ref\"'\n+// @is \"$.index[*][?(@.name=='RefFn')].inner.type.inner.type.inner.traits[0].trait.args.parenthesized.inputs[0].inner.lifetime\" \"\\\"'b\\\"\"\n+// @is \"$.index[*][?(@.name=='RefFn')].inner.type.inner.type.inner.traits[0].trait.args.parenthesized.output.kind\" '\"borrowed_ref\"'\n+// @is \"$.index[*][?(@.name=='RefFn')].inner.type.inner.type.inner.traits[0].trait.args.parenthesized.output.inner.lifetime\" \"\\\"'b\\\"\"\n pub type RefFn<'a> = &'a dyn for<'b> Fn(&'b i32) -> &'b i32;\n \n-// @is    - \"$.index[*][?(@.name=='WeirdOrder')].inner.type.inner.args.angle_bracketed.args[0].type.inner.traits[0].trait.name\" '\"Send\"'\n-// @is    - \"$.index[*][?(@.name=='WeirdOrder')].inner.type.inner.args.angle_bracketed.args[0].type.inner.traits[1].trait.name\" '\"Debug\"'\n+// @is    \"$.index[*][?(@.name=='WeirdOrder')].inner.type.inner.args.angle_bracketed.args[0].type.inner.traits[0].trait.name\" '\"Send\"'\n+// @is    \"$.index[*][?(@.name=='WeirdOrder')].inner.type.inner.args.angle_bracketed.args[0].type.inner.traits[1].trait.name\" '\"Debug\"'\n pub type WeirdOrder = Box<dyn Send + Debug>;"}, {"sha": "d7216ec7675a35bb817f6851469a29e56feba00a", "filename": "src/test/rustdoc-json/type/fn_lifetime.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Ftype%2Ffn_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Ftype%2Ffn_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Ftype%2Ffn_lifetime.rs?ref=d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7", "patch": "@@ -1,27 +1,27 @@\n // ignore-tidy-linelength\n \n-// @is fn_lifetime.json \"$.index[*][?(@.name=='GenericFn')].kind\" \\\"typedef\\\"\n+// @is \"$.index[*][?(@.name=='GenericFn')].kind\" \\\"typedef\\\"\n \n-// @ismany    - \"$.index[*][?(@.name=='GenericFn')].inner.generics.params[*].name\" \\\"\\'a\\\"\n-// @has   - \"$.index[*][?(@.name=='GenericFn')].inner.generics.params[*].kind.lifetime\"\n-// @count - \"$.index[*][?(@.name=='GenericFn')].inner.generics.params[*].kind.lifetime.outlives[*]\" 0\n-// @count - \"$.index[*][?(@.name=='GenericFn')].inner.generics.where_predicates[*]\" 0\n-// @is    - \"$.index[*][?(@.name=='GenericFn')].inner.type.kind\" \\\"function_pointer\\\"\n-// @count - \"$.index[*][?(@.name=='GenericFn')].inner.type.inner.generic_params[*]\" 0\n-// @count - \"$.index[*][?(@.name=='GenericFn')].inner.type.inner.decl.inputs[*]\" 1\n-// @is    - \"$.index[*][?(@.name=='GenericFn')].inner.type.inner.decl.inputs[*][1].inner.lifetime\" \\\"\\'a\\\"\n-// @is    - \"$.index[*][?(@.name=='GenericFn')].inner.type.inner.decl.output.inner.lifetime\" \\\"\\'a\\\"\n+// @ismany \"$.index[*][?(@.name=='GenericFn')].inner.generics.params[*].name\" \\\"\\'a\\\"\n+// @has    \"$.index[*][?(@.name=='GenericFn')].inner.generics.params[*].kind.lifetime\"\n+// @count  \"$.index[*][?(@.name=='GenericFn')].inner.generics.params[*].kind.lifetime.outlives[*]\" 0\n+// @count  \"$.index[*][?(@.name=='GenericFn')].inner.generics.where_predicates[*]\" 0\n+// @is     \"$.index[*][?(@.name=='GenericFn')].inner.type.kind\" \\\"function_pointer\\\"\n+// @count  \"$.index[*][?(@.name=='GenericFn')].inner.type.inner.generic_params[*]\" 0\n+// @count  \"$.index[*][?(@.name=='GenericFn')].inner.type.inner.decl.inputs[*]\" 1\n+// @is     \"$.index[*][?(@.name=='GenericFn')].inner.type.inner.decl.inputs[*][1].inner.lifetime\" \\\"\\'a\\\"\n+// @is     \"$.index[*][?(@.name=='GenericFn')].inner.type.inner.decl.output.inner.lifetime\" \\\"\\'a\\\"\n \n pub type GenericFn<'a> = fn(&'a i32) -> &'a i32;\n \n-// @is fn_lifetime.json \"$.index[*][?(@.name=='ForAll')].kind\" \\\"typedef\\\"\n-// @count - \"$.index[*][?(@.name=='ForAll')].inner.generics.params[*]\" 0\n-// @count - \"$.index[*][?(@.name=='ForAll')].inner.generics.where_predicates[*]\" 0\n-// @count - \"$.index[*][?(@.name=='ForAll')].inner.type.inner.generic_params[*]\" 1\n-// @is    - \"$.index[*][?(@.name=='ForAll')].inner.type.inner.generic_params[*].name\" \\\"\\'a\\\"\n-// @has   - \"$.index[*][?(@.name=='ForAll')].inner.type.inner.generic_params[*].kind.lifetime\"\n-// @count - \"$.index[*][?(@.name=='ForAll')].inner.type.inner.generic_params[*].kind.lifetime.outlives[*]\" 0\n-// @count - \"$.index[*][?(@.name=='ForAll')].inner.type.inner.decl.inputs[*]\" 1\n-// @is    - \"$.index[*][?(@.name=='ForAll')].inner.type.inner.decl.inputs[*][1].inner.lifetime\" \\\"\\'a\\\"\n-// @is    - \"$.index[*][?(@.name=='ForAll')].inner.type.inner.decl.output.inner.lifetime\" \\\"\\'a\\\"\n+// @is    \"$.index[*][?(@.name=='ForAll')].kind\" \\\"typedef\\\"\n+// @count \"$.index[*][?(@.name=='ForAll')].inner.generics.params[*]\" 0\n+// @count \"$.index[*][?(@.name=='ForAll')].inner.generics.where_predicates[*]\" 0\n+// @count \"$.index[*][?(@.name=='ForAll')].inner.type.inner.generic_params[*]\" 1\n+// @is    \"$.index[*][?(@.name=='ForAll')].inner.type.inner.generic_params[*].name\" \\\"\\'a\\\"\n+// @has   \"$.index[*][?(@.name=='ForAll')].inner.type.inner.generic_params[*].kind.lifetime\"\n+// @count \"$.index[*][?(@.name=='ForAll')].inner.type.inner.generic_params[*].kind.lifetime.outlives[*]\" 0\n+// @count \"$.index[*][?(@.name=='ForAll')].inner.type.inner.decl.inputs[*]\" 1\n+// @is    \"$.index[*][?(@.name=='ForAll')].inner.type.inner.decl.inputs[*][1].inner.lifetime\" \\\"\\'a\\\"\n+// @is    \"$.index[*][?(@.name=='ForAll')].inner.type.inner.decl.output.inner.lifetime\" \\\"\\'a\\\"\n pub type ForAll = for<'a> fn(&'a i32) -> &'a i32;"}, {"sha": "9c6d4540bfb59d08c1ddc1d45355f1db6bd5d43a", "filename": "src/test/rustdoc-json/type/generic_default.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Ftype%2Fgeneric_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Ftype%2Fgeneric_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Ftype%2Fgeneric_default.rs?ref=d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7", "patch": "@@ -1,33 +1,33 @@\n // ignore-tidy-linelength\n \n-// @set result = generic_default.json \"$.index[*][?(@.name=='Result')].id\"\n+// @set result = \"$.index[*][?(@.name=='Result')].id\"\n pub enum Result<T, E> {\n     Ok(T),\n     Err(E),\n }\n \n-// @set my_error = - \"$.index[*][?(@.name=='MyError')].id\"\n+// @set my_error = \"$.index[*][?(@.name=='MyError')].id\"\n pub struct MyError {}\n \n-// @is    - \"$.index[*][?(@.name=='MyResult')].kind\" \\\"typedef\\\"\n-// @count - \"$.index[*][?(@.name=='MyResult')].inner.generics.where_predicates[*]\" 0\n-// @count - \"$.index[*][?(@.name=='MyResult')].inner.generics.params[*]\" 2\n-// @is    - \"$.index[*][?(@.name=='MyResult')].inner.generics.params[0].name\" \\\"T\\\"\n-// @is    - \"$.index[*][?(@.name=='MyResult')].inner.generics.params[1].name\" \\\"E\\\"\n-// @has   - \"$.index[*][?(@.name=='MyResult')].inner.generics.params[0].kind.type\"\n-// @has   - \"$.index[*][?(@.name=='MyResult')].inner.generics.params[1].kind.type\"\n-// @count - \"$.index[*][?(@.name=='MyResult')].inner.generics.params[0].kind.type.bounds[*]\" 0\n-// @count - \"$.index[*][?(@.name=='MyResult')].inner.generics.params[1].kind.type.bounds[*]\" 0\n-// @is    - \"$.index[*][?(@.name=='MyResult')].inner.generics.params[0].kind.type.default\" null\n-// @is    - \"$.index[*][?(@.name=='MyResult')].inner.generics.params[1].kind.type.default.kind\" \\\"resolved_path\\\"\n-// @is    - \"$.index[*][?(@.name=='MyResult')].inner.generics.params[1].kind.type.default.inner.id\" $my_error\n-// @is    - \"$.index[*][?(@.name=='MyResult')].inner.generics.params[1].kind.type.default.inner.name\" \\\"MyError\\\"\n-// @is    - \"$.index[*][?(@.name=='MyResult')].inner.type.kind\" \\\"resolved_path\\\"\n-// @is    - \"$.index[*][?(@.name=='MyResult')].inner.type.inner.id\" $result\n-// @is    - \"$.index[*][?(@.name=='MyResult')].inner.type.inner.name\" \\\"Result\\\"\n-// @is    - \"$.index[*][?(@.name=='MyResult')].inner.type.inner.args.angle_bracketed.bindings\" []\n-// @is    - \"$.index[*][?(@.name=='MyResult')].inner.type.inner.args.angle_bracketed.args[0].type.kind\" \\\"generic\\\"\n-// @is    - \"$.index[*][?(@.name=='MyResult')].inner.type.inner.args.angle_bracketed.args[1].type.kind\" \\\"generic\\\"\n-// @is    - \"$.index[*][?(@.name=='MyResult')].inner.type.inner.args.angle_bracketed.args[0].type.inner\" \\\"T\\\"\n-// @is    - \"$.index[*][?(@.name=='MyResult')].inner.type.inner.args.angle_bracketed.args[1].type.inner\" \\\"E\\\"\n+// @is    \"$.index[*][?(@.name=='MyResult')].kind\" \\\"typedef\\\"\n+// @count \"$.index[*][?(@.name=='MyResult')].inner.generics.where_predicates[*]\" 0\n+// @count \"$.index[*][?(@.name=='MyResult')].inner.generics.params[*]\" 2\n+// @is    \"$.index[*][?(@.name=='MyResult')].inner.generics.params[0].name\" \\\"T\\\"\n+// @is    \"$.index[*][?(@.name=='MyResult')].inner.generics.params[1].name\" \\\"E\\\"\n+// @has   \"$.index[*][?(@.name=='MyResult')].inner.generics.params[0].kind.type\"\n+// @has   \"$.index[*][?(@.name=='MyResult')].inner.generics.params[1].kind.type\"\n+// @count \"$.index[*][?(@.name=='MyResult')].inner.generics.params[0].kind.type.bounds[*]\" 0\n+// @count \"$.index[*][?(@.name=='MyResult')].inner.generics.params[1].kind.type.bounds[*]\" 0\n+// @is    \"$.index[*][?(@.name=='MyResult')].inner.generics.params[0].kind.type.default\" null\n+// @is    \"$.index[*][?(@.name=='MyResult')].inner.generics.params[1].kind.type.default.kind\" \\\"resolved_path\\\"\n+// @is    \"$.index[*][?(@.name=='MyResult')].inner.generics.params[1].kind.type.default.inner.id\" $my_error\n+// @is    \"$.index[*][?(@.name=='MyResult')].inner.generics.params[1].kind.type.default.inner.name\" \\\"MyError\\\"\n+// @is    \"$.index[*][?(@.name=='MyResult')].inner.type.kind\" \\\"resolved_path\\\"\n+// @is    \"$.index[*][?(@.name=='MyResult')].inner.type.inner.id\" $result\n+// @is    \"$.index[*][?(@.name=='MyResult')].inner.type.inner.name\" \\\"Result\\\"\n+// @is    \"$.index[*][?(@.name=='MyResult')].inner.type.inner.args.angle_bracketed.bindings\" []\n+// @is    \"$.index[*][?(@.name=='MyResult')].inner.type.inner.args.angle_bracketed.args[0].type.kind\" \\\"generic\\\"\n+// @is    \"$.index[*][?(@.name=='MyResult')].inner.type.inner.args.angle_bracketed.args[1].type.kind\" \\\"generic\\\"\n+// @is    \"$.index[*][?(@.name=='MyResult')].inner.type.inner.args.angle_bracketed.args[0].type.inner\" \\\"T\\\"\n+// @is    \"$.index[*][?(@.name=='MyResult')].inner.type.inner.args.angle_bracketed.args[1].type.inner\" \\\"E\\\"\n pub type MyResult<T, E = MyError> = Result<T, E>;"}, {"sha": "2c4ee00d468d4ba4841dd7982d835a06e2e2239e", "filename": "src/test/rustdoc-json/type/hrtb.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Ftype%2Fhrtb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Ftype%2Fhrtb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Ftype%2Fhrtb.rs?ref=d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7", "patch": "@@ -1,9 +1,7 @@\n // ignore-tidy-linelength\n \n-// @has hrtb.json\n-\n-// @is - \"$.index[*][?(@.name=='genfn')].inner.generics.where_predicates[0].bound_predicate.type\" '{\"inner\": \"F\",\"kind\": \"generic\"}'\n-// @is - \"$.index[*][?(@.name=='genfn')].inner.generics.where_predicates[0].bound_predicate.generic_params\" '[{\"kind\": {\"lifetime\": {\"outlives\": []}},\"name\": \"'\\''a\"},{\"kind\": {\"lifetime\": {\"outlives\": []}},\"name\": \"'\\''b\"}]'\n+// @is \"$.index[*][?(@.name=='genfn')].inner.generics.where_predicates[0].bound_predicate.type\" '{\"inner\": \"F\",\"kind\": \"generic\"}'\n+// @is \"$.index[*][?(@.name=='genfn')].inner.generics.where_predicates[0].bound_predicate.generic_params\" '[{\"kind\": {\"lifetime\": {\"outlives\": []}},\"name\": \"'\\''a\"},{\"kind\": {\"lifetime\": {\"outlives\": []}},\"name\": \"'\\''b\"}]'\n pub fn genfn<F>(f: F)\n where\n     for<'a, 'b> F: Fn(&'a i32, &'b i32),\n@@ -12,14 +10,14 @@ where\n     f(&zero, &zero);\n }\n \n-// @is - \"$.index[*][?(@.name=='dynfn')].inner.generics\" '{\"params\": [], \"where_predicates\": []}'\n-// @is - \"$.index[*][?(@.name=='dynfn')].inner.generics\" '{\"params\": [], \"where_predicates\": []}'\n-// @is - \"$.index[*][?(@.name=='dynfn')].inner.decl.inputs[0][1].kind\" '\"borrowed_ref\"'\n-// @is - \"$.index[*][?(@.name=='dynfn')].inner.decl.inputs[0][1].inner.type.kind\" '\"dyn_trait\"'\n-// @is - \"$.index[*][?(@.name=='dynfn')].inner.decl.inputs[0][1].inner.type.inner.lifetime\" null\n-// @count - \"$.index[*][?(@.name=='dynfn')].inner.decl.inputs[0][1].inner.type.inner.traits[*]\" 1\n-// @is - \"$.index[*][?(@.name=='dynfn')].inner.decl.inputs[0][1].inner.type.inner.traits[0].generic_params\" '[{\"kind\": {\"lifetime\": {\"outlives\": []}},\"name\": \"'\\''a\"},{\"kind\": {\"lifetime\": {\"outlives\": []}},\"name\": \"'\\''b\"}]'\n-// @is - \"$.index[*][?(@.name=='dynfn')].inner.decl.inputs[0][1].inner.type.inner.traits[0].trait.name\" '\"Fn\"'\n+// @is \"$.index[*][?(@.name=='dynfn')].inner.generics\" '{\"params\": [], \"where_predicates\": []}'\n+// @is \"$.index[*][?(@.name=='dynfn')].inner.generics\" '{\"params\": [], \"where_predicates\": []}'\n+// @is \"$.index[*][?(@.name=='dynfn')].inner.decl.inputs[0][1].kind\" '\"borrowed_ref\"'\n+// @is \"$.index[*][?(@.name=='dynfn')].inner.decl.inputs[0][1].inner.type.kind\" '\"dyn_trait\"'\n+// @is \"$.index[*][?(@.name=='dynfn')].inner.decl.inputs[0][1].inner.type.inner.lifetime\" null\n+// @count \"$.index[*][?(@.name=='dynfn')].inner.decl.inputs[0][1].inner.type.inner.traits[*]\" 1\n+// @is \"$.index[*][?(@.name=='dynfn')].inner.decl.inputs[0][1].inner.type.inner.traits[0].generic_params\" '[{\"kind\": {\"lifetime\": {\"outlives\": []}},\"name\": \"'\\''a\"},{\"kind\": {\"lifetime\": {\"outlives\": []}},\"name\": \"'\\''b\"}]'\n+// @is \"$.index[*][?(@.name=='dynfn')].inner.decl.inputs[0][1].inner.type.inner.traits[0].trait.name\" '\"Fn\"'\n pub fn dynfn(f: &dyn for<'a, 'b> Fn(&'a i32, &'b i32)) {\n     let zero = 0;\n     f(&zero, &zero);"}, {"sha": "8dfbbfc1baed408014329579cb1108b7dacfa711", "filename": "src/test/rustdoc-json/unions/impl.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Funions%2Fimpl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Funions%2Fimpl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Funions%2Fimpl.rs?ref=d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7", "patch": "@@ -1,15 +1,15 @@\n #![no_std]\n \n-// @has impl.json \"$.index[*][?(@.name=='Ux')].visibility\" \\\"public\\\"\n-// @has - \"$.index[*][?(@.name=='Ux')].kind\" \\\"union\\\"\n+// @has \"$.index[*][?(@.name=='Ux')].visibility\" \\\"public\\\"\n+// @has \"$.index[*][?(@.name=='Ux')].kind\" \\\"union\\\"\n pub union Ux {\n     a: u32,\n     b: u64\n }\n \n-// @has - \"$.index[*][?(@.name=='Num')].visibility\" \\\"public\\\"\n-// @has - \"$.index[*][?(@.name=='Num')].kind\" \\\"trait\\\"\n+// @has \"$.index[*][?(@.name=='Num')].visibility\" \\\"public\\\"\n+// @has \"$.index[*][?(@.name=='Num')].kind\" \\\"trait\\\"\n pub trait Num {}\n \n-// @count - \"$.index[*][?(@.name=='Ux')].inner.impls\" 1\n+// @count \"$.index[*][?(@.name=='Ux')].inner.impls\" 1\n impl Num for Ux {}"}, {"sha": "5467f68477fc70460655460bd8af126062d48d33", "filename": "src/test/rustdoc-json/unions/union.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Funions%2Funion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7/src%2Ftest%2Frustdoc-json%2Funions%2Funion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Funions%2Funion.rs?ref=d3d9e223e2d9d12ca68e48b5d1e0adf96793cca7", "patch": "@@ -1,6 +1,6 @@\n-// @has union.json \"$.index[*][?(@.name=='Union')].visibility\" \\\"public\\\"\n-// @has - \"$.index[*][?(@.name=='Union')].kind\" \\\"union\\\"\n-// @!has - \"$.index[*][?(@.name=='Union')].inner.struct_type\"\n+// @has \"$.index[*][?(@.name=='Union')].visibility\" \\\"public\\\"\n+// @has \"$.index[*][?(@.name=='Union')].kind\" \\\"union\\\"\n+// @!has \"$.index[*][?(@.name=='Union')].inner.struct_type\"\n pub union Union {\n     int: i32,\n     float: f32,"}]}