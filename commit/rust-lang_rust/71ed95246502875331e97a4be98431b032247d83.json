{"sha": "71ed95246502875331e97a4be98431b032247d83", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxZWQ5NTI0NjUwMjg3NTMzMWU5N2E0YmU5ODQzMWIwMzIyNDdkODM=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-03-17T09:36:06Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-03-17T09:36:06Z"}, "message": "Simplify primitive type reprs.", "tree": {"sha": "1eac33e57d9c57439261102a658e25b637a5c931", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1eac33e57d9c57439261102a658e25b637a5c931"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71ed95246502875331e97a4be98431b032247d83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71ed95246502875331e97a4be98431b032247d83", "html_url": "https://github.com/rust-lang/rust/commit/71ed95246502875331e97a4be98431b032247d83", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71ed95246502875331e97a4be98431b032247d83/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c55d4b07fd2b896e303efe4d4ad4401a19ce97aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/c55d4b07fd2b896e303efe4d4ad4401a19ce97aa", "html_url": "https://github.com/rust-lang/rust/commit/c55d4b07fd2b896e303efe4d4ad4401a19ce97aa"}], "stats": {"total": 44, "additions": 16, "deletions": 28}, "files": [{"sha": "ca0a96a1767e3fbe20180cf1a284cd376c2ac949", "filename": "src/interpreter.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/71ed95246502875331e97a4be98431b032247d83/src%2Finterpreter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71ed95246502875331e97a4be98431b032247d83/src%2Finterpreter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter.rs?ref=71ed95246502875331e97a4be98431b032247d83", "patch": "@@ -571,19 +571,18 @@ impl<'a, 'tcx: 'a> Interpreter<'a, 'tcx> {\n     fn ty_to_repr(&self, ty: ty::Ty<'tcx>) -> Repr {\n         use syntax::ast::{IntTy, UintTy};\n         match ty.subst(self.tcx, self.current_substs()).sty {\n-            ty::TyBool => Repr::Bool,\n-\n+            ty::TyBool => Repr::Primitive { size: 1 },\n             ty::TyInt(IntTy::Is)  => Repr::isize(),\n-            ty::TyInt(IntTy::I8)  => Repr::I8,\n-            ty::TyInt(IntTy::I16) => Repr::I16,\n-            ty::TyInt(IntTy::I32) => Repr::I32,\n-            ty::TyInt(IntTy::I64) => Repr::I64,\n+            ty::TyInt(IntTy::I8)  => Repr::Primitive { size: 1 },\n+            ty::TyInt(IntTy::I16) => Repr::Primitive { size: 2 },\n+            ty::TyInt(IntTy::I32) => Repr::Primitive { size: 4 },\n+            ty::TyInt(IntTy::I64) => Repr::Primitive { size: 8 },\n \n             ty::TyUint(UintTy::Us)  => Repr::usize(),\n-            ty::TyUint(UintTy::U8)  => Repr::U8,\n-            ty::TyUint(UintTy::U16) => Repr::U16,\n-            ty::TyUint(UintTy::U32) => Repr::U32,\n-            ty::TyUint(UintTy::U64) => Repr::U64,\n+            ty::TyUint(UintTy::U8)  => Repr::Primitive { size: 1 },\n+            ty::TyUint(UintTy::U16) => Repr::Primitive { size: 2 },\n+            ty::TyUint(UintTy::U32) => Repr::Primitive { size: 4 },\n+            ty::TyUint(UintTy::U64) => Repr::Primitive { size: 8 },\n \n             ty::TyTuple(ref fields) => self.make_product_repr(fields.iter().cloned()),\n "}, {"sha": "612f8e4938e61ddcdb46170536f8bad481ba967d", "filename": "src/memory.rs", "status": "modified", "additions": 7, "deletions": 18, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/71ed95246502875331e97a4be98431b032247d83/src%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71ed95246502875331e97a4be98431b032247d83/src%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmemory.rs?ref=71ed95246502875331e97a4be98431b032247d83", "patch": "@@ -40,9 +40,10 @@ pub struct FieldRepr {\n \n #[derive(Clone, Debug, PartialEq, Eq)]\n pub enum Repr {\n-    Bool,\n-    I8, I16, I32, I64,\n-    U8, U16, U32, U64,\n+    /// Representation for a primitive type such as a boolean, integer, or character.\n+    Primitive {\n+        size: usize\n+    },\n \n     Pointer,\n     FatPointer,\n@@ -361,29 +362,17 @@ impl Pointer {\n impl Repr {\n     // TODO(tsion): Choice is based on host machine's type size. Should this be how miri works?\n     pub fn isize() -> Self {\n-        match mem::size_of::<isize>() {\n-            4 => Repr::I32,\n-            8 => Repr::I64,\n-            _ => unimplemented!(),\n-        }\n+        Repr::Primitive { size: mem::size_of::<isize>() }\n     }\n \n     // TODO(tsion): Choice is based on host machine's type size. Should this be how miri works?\n     pub fn usize() -> Self {\n-        match mem::size_of::<isize>() {\n-            4 => Repr::U32,\n-            8 => Repr::U64,\n-            _ => unimplemented!(),\n-        }\n+        Repr::Primitive { size: mem::size_of::<usize>() }\n     }\n \n     pub fn size(&self) -> usize {\n         match *self {\n-            Repr::Bool => 1,\n-            Repr::I8  | Repr::U8  => 1,\n-            Repr::I16 | Repr::U16 => 2,\n-            Repr::I32 | Repr::U32 => 4,\n-            Repr::I64 | Repr::U64 => 8,\n+            Repr::Primitive { size } => size,\n             Repr::Product { size, .. } => size,\n             Repr::Sum { discr_size, max_variant_size, .. } => discr_size + max_variant_size,\n             Repr::Array { elem_size, length } => elem_size * length,"}]}