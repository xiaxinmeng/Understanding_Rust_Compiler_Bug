{"sha": "b84f294c4672018e237e8196eef59bb668b805f2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4NGYyOTRjNDY3MjAxOGUyMzdlODE5NmVlZjU5YmI2NjhiODA1ZjI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-20T21:24:14Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T21:01:29Z"}, "message": "librustc: De-`@mut` `glbs` and `lubs` in `RegionVarBindings`", "tree": {"sha": "787f33588748eedc94182f5b56d89c428d5d0f2a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/787f33588748eedc94182f5b56d89c428d5d0f2a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b84f294c4672018e237e8196eef59bb668b805f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b84f294c4672018e237e8196eef59bb668b805f2", "html_url": "https://github.com/rust-lang/rust/commit/b84f294c4672018e237e8196eef59bb668b805f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b84f294c4672018e237e8196eef59bb668b805f2/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bdfd0b5ae081240697fb087f59c42ab9ba070bef", "url": "https://api.github.com/repos/rust-lang/rust/commits/bdfd0b5ae081240697fb087f59c42ab9ba070bef", "html_url": "https://github.com/rust-lang/rust/commit/bdfd0b5ae081240697fb087f59c42ab9ba070bef"}], "stats": {"total": 36, "additions": 21, "deletions": 15}, "files": [{"sha": "7808733d9b408b4361ffd8fb848f723c02a84e2a", "filename": "src/librustc/middle/typeck/infer/region_inference/mod.rs", "status": "modified", "additions": 21, "deletions": 15, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/b84f294c4672018e237e8196eef59bb668b805f2/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b84f294c4672018e237e8196eef59bb668b805f2/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference%2Fmod.rs?ref=b84f294c4672018e237e8196eef59bb668b805f2", "patch": "@@ -90,8 +90,8 @@ pub struct RegionVarBindings {\n     tcx: ty::ctxt,\n     var_origins: ~[RegionVariableOrigin],\n     constraints: RefCell<HashMap<Constraint, SubregionOrigin>>,\n-    lubs: CombineMap,\n-    glbs: CombineMap,\n+    lubs: RefCell<CombineMap>,\n+    glbs: RefCell<CombineMap>,\n     skolemization_count: Cell<uint>,\n     bound_count: Cell<uint>,\n \n@@ -116,8 +116,8 @@ pub fn RegionVarBindings(tcx: ty::ctxt) -> RegionVarBindings {\n         var_origins: ~[],\n         values: None,\n         constraints: RefCell::new(HashMap::new()),\n-        lubs: HashMap::new(),\n-        glbs: HashMap::new(),\n+        lubs: RefCell::new(HashMap::new()),\n+        glbs: RefCell::new(HashMap::new()),\n         skolemization_count: Cell::new(0),\n         bound_count: Cell::new(0),\n         undo_log: ~[]\n@@ -162,10 +162,12 @@ impl RegionVarBindings {\n                 constraints.get().remove(constraint);\n               }\n               AddCombination(Glb, ref regions) => {\n-                self.glbs.remove(regions);\n+                let mut glbs = self.glbs.borrow_mut();\n+                glbs.get().remove(regions);\n               }\n               AddCombination(Lub, ref regions) => {\n-                self.lubs.remove(regions);\n+                let mut lubs = self.lubs.borrow_mut();\n+                lubs.get().remove(regions);\n               }\n             }\n         }\n@@ -345,10 +347,8 @@ impl RegionVarBindings {\n         }\n     }\n \n-    fn combine_map<'a>(&'a mut self,\n-                       t: CombineMapType)\n-                       -> &'a mut CombineMap\n-    {\n+    fn combine_map<'a>(&'a mut self, t: CombineMapType)\n+                   -> &'a mut RefCell<CombineMap> {\n         match t {\n             Glb => &mut self.glbs,\n             Lub => &mut self.lubs,\n@@ -365,14 +365,20 @@ impl RegionVarBindings {\n                                  new_r: Region|)\n                         -> Region {\n         let vars = TwoRegions { a: a, b: b };\n-        match self.combine_map(t).find(&vars) {\n-            Some(&c) => {\n-                return ReInfer(ReVar(c));\n+        {\n+            let map = self.combine_map(t).borrow();\n+            match map.get().find(&vars) {\n+                Some(&c) => {\n+                    return ReInfer(ReVar(c));\n+                }\n+                None => {}\n             }\n-            None => {}\n         }\n         let c = self.new_region_var(infer::MiscVariable(origin.span()));\n-        self.combine_map(t).insert(vars, c);\n+        {\n+            let mut map = self.combine_map(t).borrow_mut();\n+            map.get().insert(vars, c);\n+        }\n         if self.in_snapshot() {\n             self.undo_log.push(AddCombination(t, vars));\n         }"}]}