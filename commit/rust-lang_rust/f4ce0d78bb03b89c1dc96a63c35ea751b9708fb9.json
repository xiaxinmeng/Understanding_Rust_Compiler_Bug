{"sha": "f4ce0d78bb03b89c1dc96a63c35ea751b9708fb9", "node_id": "C_kwDOAAsO6NoAKGY0Y2UwZDc4YmIwM2I4OWMxZGM5NmE2M2MzNWVhNzUxYjk3MDhmYjk", "commit": {"author": {"name": "Benjamin Coenen", "email": "5719034+bnjjj@users.noreply.github.com", "date": "2022-01-06T14:42:29Z"}, "committer": {"name": "Benjamin Coenen", "email": "5719034+bnjjj@users.noreply.github.com", "date": "2022-01-06T14:42:29Z"}, "message": "add better default behavior on fill struct fields diagnostic\n\nSigned-off-by: Benjamin Coenen <5719034+bnjjj@users.noreply.github.com>", "tree": {"sha": "c970196f156122c6846c76e8185159ffd51a4498", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c970196f156122c6846c76e8185159ffd51a4498"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4ce0d78bb03b89c1dc96a63c35ea751b9708fb9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4ce0d78bb03b89c1dc96a63c35ea751b9708fb9", "html_url": "https://github.com/rust-lang/rust/commit/f4ce0d78bb03b89c1dc96a63c35ea751b9708fb9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4ce0d78bb03b89c1dc96a63c35ea751b9708fb9/comments", "author": {"login": "bnjjj", "id": 5719034, "node_id": "MDQ6VXNlcjU3MTkwMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5719034?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bnjjj", "html_url": "https://github.com/bnjjj", "followers_url": "https://api.github.com/users/bnjjj/followers", "following_url": "https://api.github.com/users/bnjjj/following{/other_user}", "gists_url": "https://api.github.com/users/bnjjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/bnjjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bnjjj/subscriptions", "organizations_url": "https://api.github.com/users/bnjjj/orgs", "repos_url": "https://api.github.com/users/bnjjj/repos", "events_url": "https://api.github.com/users/bnjjj/events{/privacy}", "received_events_url": "https://api.github.com/users/bnjjj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bnjjj", "id": 5719034, "node_id": "MDQ6VXNlcjU3MTkwMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5719034?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bnjjj", "html_url": "https://github.com/bnjjj", "followers_url": "https://api.github.com/users/bnjjj/followers", "following_url": "https://api.github.com/users/bnjjj/following{/other_user}", "gists_url": "https://api.github.com/users/bnjjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/bnjjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bnjjj/subscriptions", "organizations_url": "https://api.github.com/users/bnjjj/orgs", "repos_url": "https://api.github.com/users/bnjjj/repos", "events_url": "https://api.github.com/users/bnjjj/events{/privacy}", "received_events_url": "https://api.github.com/users/bnjjj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "336c899a07063c56c4a0b9f4764fbe5f9729ea51", "url": "https://api.github.com/repos/rust-lang/rust/commits/336c899a07063c56c4a0b9f4764fbe5f9729ea51", "html_url": "https://github.com/rust-lang/rust/commit/336c899a07063c56c4a0b9f4764fbe5f9729ea51"}], "stats": {"total": 141, "additions": 103, "deletions": 38}, "files": [{"sha": "3b734ac662902c8c628cda2c2b055fb81d125855", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f4ce0d78bb03b89c1dc96a63c35ea751b9708fb9/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4ce0d78bb03b89c1dc96a63c35ea751b9708fb9/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=f4ce0d78bb03b89c1dc96a63c35ea751b9708fb9", "patch": "@@ -2695,7 +2695,7 @@ impl Type {\n     // This would be nicer if it just returned an iterator, but that runs into\n     // lifetime problems, because we need to borrow temp `CrateImplDefs`.\n     pub fn iterate_assoc_items<T>(\n-        self,\n+        &self,\n         db: &dyn HirDatabase,\n         krate: Crate,\n         mut callback: impl FnMut(AssocItem) -> Option<T>,\n@@ -2709,7 +2709,7 @@ impl Type {\n     }\n \n     fn iterate_assoc_items_dyn(\n-        self,\n+        &self,\n         db: &dyn HirDatabase,\n         krate: Crate,\n         callback: &mut dyn FnMut(AssocItemId) -> bool,\n@@ -2751,6 +2751,7 @@ impl Type {\n     ) -> Option<T> {\n         let _p = profile::span(\"iterate_method_candidates\");\n         let mut slot = None;\n+\n         self.iterate_method_candidates_dyn(\n             db,\n             krate,"}, {"sha": "1a451ae79f513cf77e6f2679bfd3fdf0ada6e47d", "filename": "crates/hir_ty/src/method_resolution.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f4ce0d78bb03b89c1dc96a63c35ea751b9708fb9/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4ce0d78bb03b89c1dc96a63c35ea751b9708fb9/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs?ref=f4ce0d78bb03b89c1dc96a63c35ea751b9708fb9", "patch": "@@ -542,6 +542,7 @@ pub fn iterate_method_candidates_dyn(\n \n             let deref_chain = autoderef_method_receiver(db, krate, ty);\n             let mut deref_chains = stdx::slice_tails(&deref_chain);\n+\n             deref_chains.try_for_each(|deref_chain| {\n                 iterate_method_candidates_with_autoref(\n                     deref_chain,"}, {"sha": "8aca6ab37521e6f68d030c632039a39544e43562", "filename": "crates/ide_diagnostics/src/handlers/missing_fields.rs", "status": "modified", "additions": 92, "deletions": 27, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/f4ce0d78bb03b89c1dc96a63c35ea751b9708fb9/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fmissing_fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4ce0d78bb03b89c1dc96a63c35ea751b9708fb9/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fmissing_fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fmissing_fields.rs?ref=f4ce0d78bb03b89c1dc96a63c35ea751b9708fb9", "patch": "@@ -1,7 +1,7 @@\n use either::Either;\n use hir::{\n     db::{AstDatabase, HirDatabase},\n-    known, HirDisplay, InFile, SemanticsScope, Type,\n+    known, AssocItem, HirDisplay, InFile, Type,\n };\n use ide_db::{assists::Assist, helpers::FamousDefs, source_change::SourceChange};\n use rustc_hash::FxHashMap;\n@@ -74,8 +74,7 @@ fn fixes(ctx: &DiagnosticsContext<'_>, d: &hir::MissingFields) -> Option<Vec<Ass\n     let generate_fill_expr = |ty: &Type| match ctx.config.expr_fill_default {\n         crate::ExprFillDefaultMode::Todo => Some(make::ext::expr_todo()),\n         crate::ExprFillDefaultMode::DefaultImpl => {\n-            let scope = ctx.sema.scope(&root);\n-            let default_constr = get_default_constructor(ctx, d, &scope, ty);\n+            let default_constr = get_default_constructor(ctx, d, ty);\n             match default_constr {\n                 Some(default_constr) => Some(default_constr),\n                 _ => Some(make::ext::expr_todo()),\n@@ -134,7 +133,6 @@ fn make_ty(ty: &hir::Type, db: &dyn HirDatabase, module: hir::Module) -> ast::Ty\n fn get_default_constructor(\n     ctx: &DiagnosticsContext<'_>,\n     d: &hir::MissingFields,\n-    scope: &SemanticsScope,\n     ty: &Type,\n ) -> Option<ast::Expr> {\n     if let Some(builtin_ty) = ty.as_builtin() {\n@@ -151,33 +149,35 @@ fn get_default_constructor(\n             return Some(make::ext::empty_str());\n         }\n     }\n+\n     let krate = ctx.sema.to_module_def(d.file.original_file(ctx.sema.db))?.krate();\n     let module = krate.root_module(ctx.sema.db);\n-    let default_trait = FamousDefs(&ctx.sema, Some(krate)).core_default_Default()?;\n-    let traits_in_scope = scope.visible_traits();\n \n-    // Look for a ::new() method\n-    // FIXME: doesn't work for now\n-    let has_new_method = ty\n-        .iterate_method_candidates(\n-            ctx.sema.db,\n-            krate,\n-            &traits_in_scope,\n-            Some(&known::new),\n-            |_, func| {\n-                if func.assoc_fn_params(ctx.sema.db).is_empty()\n+    // Look for a ::new() associated function\n+    let has_new_func = ty\n+        .iterate_assoc_items(ctx.sema.db, krate, |assoc_item| {\n+            if let AssocItem::Function(func) = assoc_item {\n+                if func.name(ctx.sema.db) == known::new\n+                    && func.assoc_fn_params(ctx.sema.db).is_empty()\n                     && func.self_param(ctx.sema.db).is_none()\n                 {\n                     return Some(());\n                 }\n-                None\n-            },\n-        )\n+            }\n+\n+            None\n+        })\n         .is_some();\n \n-    if has_new_method {\n+    if has_new_func {\n         Some(make::ext::expr_ty_new(&make_ty(ty, ctx.sema.db, module)))\n-    } else if !ty.is_array() && ty.impls_trait(ctx.sema.db, default_trait, &[]) {\n+    } else if !ty.is_array()\n+        && ty.impls_trait(\n+            ctx.sema.db,\n+            FamousDefs(&ctx.sema, Some(krate)).core_default_Default()?,\n+            &[],\n+        )\n+    {\n         Some(make::ext::expr_ty_default(&make_ty(ty, ctx.sema.db, module)))\n     } else {\n         None\n@@ -264,7 +264,7 @@ fn here() {}\n macro_rules! id { ($($tt:tt)*) => { $($tt)*}; }\n \n fn main() {\n-    let _x = id![Foo {a:42, b: todo!() }];\n+    let _x = id![Foo {a:42, b: 0 }];\n }\n \n pub struct Foo { pub a: i32, pub b: i32 }\n@@ -286,7 +286,7 @@ fn test_fn() {\n struct TestStruct { one: i32, two: i64 }\n \n fn test_fn() {\n-    let s = TestStruct { one: todo!(), two: todo!() };\n+    let s = TestStruct { one: 0, two: 0 };\n }\n \"#,\n         );\n@@ -306,7 +306,7 @@ impl TestStruct {\n struct TestStruct { one: i32 }\n \n impl TestStruct {\n-    fn test_fn() { let s = Self { one: todo!() }; }\n+    fn test_fn() { let s = Self { one: 0 }; }\n }\n \"#,\n         );\n@@ -354,7 +354,72 @@ fn test_fn() {\n struct TestStruct { one: i32, two: i64 }\n \n fn test_fn() {\n-    let s = TestStruct{ two: 2, one: todo!() };\n+    let s = TestStruct{ two: 2, one: 0 };\n+}\n+\",\n+        );\n+    }\n+\n+    #[test]\n+    fn test_fill_struct_fields_new() {\n+        check_fix(\n+            r#\"\n+struct TestWithNew(usize);\n+impl TestWithNew {\n+    pub fn new() -> Self {\n+        Self(0)\n+    }\n+}\n+struct TestStruct { one: i32, two: TestWithNew }\n+\n+fn test_fn() {\n+    let s = TestStruct{ $0 };\n+}\n+\"#,\n+            r\"\n+struct TestWithNew(usize);\n+impl TestWithNew {\n+    pub fn new() -> Self {\n+        Self(0)\n+    }\n+}\n+struct TestStruct { one: i32, two: TestWithNew }\n+\n+fn test_fn() {\n+    let s = TestStruct{ one: 0, two: TestWithNew::new()  };\n+}\n+\",\n+        );\n+    }\n+\n+    #[test]\n+    fn test_fill_struct_fields_default() {\n+        check_fix(\n+            r#\"\n+//- minicore: default\n+struct TestWithDefault(usize);\n+impl Default for TestWithDefault {\n+    pub fn default() -> Self {\n+        Self(0)\n+    }\n+}\n+struct TestStruct { one: i32, two: TestWithDefault }\n+\n+fn test_fn() {\n+    let s = TestStruct{ $0 };\n+}\n+\"#,\n+            r\"\n+struct TestWithDefault(usize);\n+impl Default for TestWithDefault {\n+    pub fn default() -> Self {\n+        Self(0)\n+    }\n+}\n+struct TestStruct { one: i32, two: TestWithDefault }\n+\n+fn test_fn() {\n+    let s = TestStruct{ one: 0, two: TestWithDefault::default()  };\n }\n \",\n         );\n@@ -374,7 +439,7 @@ fn test_fn() {\n struct TestStruct { r#type: u8 }\n \n fn test_fn() {\n-    TestStruct { r#type: todo!()  };\n+    TestStruct { r#type: 0  };\n }\n \",\n         );\n@@ -485,7 +550,7 @@ fn f() {\n     let b = 1usize;\n     S {\n         a,\n-        b: todo!(),\n+        b: 0,\n     };\n }\n \"#,"}, {"sha": "479a121c681e61e518f3703d2df76d7649f512a8", "filename": "crates/ide_diagnostics/src/tests.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f4ce0d78bb03b89c1dc96a63c35ea751b9708fb9/crates%2Fide_diagnostics%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4ce0d78bb03b89c1dc96a63c35ea751b9708fb9/crates%2Fide_diagnostics%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_diagnostics%2Fsrc%2Ftests.rs?ref=f4ce0d78bb03b89c1dc96a63c35ea751b9708fb9", "patch": "@@ -9,7 +9,7 @@ use ide_db::{\n use stdx::trim_indent;\n use test_utils::{assert_eq_text, extract_annotations};\n \n-use crate::{DiagnosticsConfig, Severity};\n+use crate::{DiagnosticsConfig, ExprFillDefaultMode, Severity};\n \n /// Takes a multi-file input fixture with annotated cursor positions,\n /// and checks that:\n@@ -36,14 +36,12 @@ fn check_nth_fix(nth: usize, ra_fixture_before: &str, ra_fixture_after: &str) {\n     let after = trim_indent(ra_fixture_after);\n \n     let (db, file_position) = RootDatabase::with_position(ra_fixture_before);\n-    let diagnostic = super::diagnostics(\n-        &db,\n-        &DiagnosticsConfig::default(),\n-        &AssistResolveStrategy::All,\n-        file_position.file_id,\n-    )\n-    .pop()\n-    .expect(\"no diagnostics\");\n+    let mut conf = DiagnosticsConfig::default();\n+    conf.expr_fill_default = ExprFillDefaultMode::DefaultImpl;\n+    let diagnostic =\n+        super::diagnostics(&db, &conf, &AssistResolveStrategy::All, file_position.file_id)\n+            .pop()\n+            .expect(\"no diagnostics\");\n     let fix = &diagnostic.fixes.expect(\"diagnostic misses fixes\")[nth];\n     let actual = {\n         let source_change = fix.source_change.as_ref().unwrap();"}]}