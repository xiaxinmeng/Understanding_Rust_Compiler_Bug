{"sha": "f29f21285efd38574e5a36b24a36b21f233ee336", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyOWYyMTI4NWVmZDM4NTc0ZTVhMzZiMjRhMzZiMjFmMjMzZWUzMzY=", "commit": {"author": {"name": "Josh Stone", "email": "cuviper@gmail.com", "date": "2020-08-20T17:07:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-20T17:07:19Z"}, "message": "Rollup merge of #75672 - kofls:intradoc-fix, r=jyn514\n\nMove to intra-doc links for task.rs and vec.rs\n\nPartial fix for #75080\n\nlinks for [`get`], [`get_mut`] skipped due to #75643\nlink for [`copy_from_slice`] skipped due to #63351", "tree": {"sha": "b6667184e8af368f8f72f3282898b105e49a4fee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b6667184e8af368f8f72f3282898b105e49a4fee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f29f21285efd38574e5a36b24a36b21f233ee336", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfPq3ICRBK7hj4Ov3rIwAAdHIIAFY3sZRaao4Cpuw0flWF34sl\n0TPGln5d74FSZdxgZbcTo/z6/NLJG72BGv6D6stTgjLP1Zbj0ZNCZaitagOXZzlh\nW8YNA1AECmlN6W31BCQ2Tzvj6IdvIc7NI4xcXI2FuttDjOJiPGJI1dJ3jFtWLFS+\nCKTIBM4tgMF4bDyOJ2CVkFE/H4Zhl4Eclv4mb3OrXJ62yJpyxhaDYeG0Q9yGs8+Q\nTOAFAjugk/Pxlxsx8Sl1masyWOAKeJNaJDYqSqp10JwniOqDH7TOmk0NZxUN44hX\nIFByKu4rFXE0blTAnyjLiJRcBCO6d3fbownsq2Pu5Hza74/Q6R0+63tmJWRdHY8=\n=w0Vn\n-----END PGP SIGNATURE-----\n", "payload": "tree b6667184e8af368f8f72f3282898b105e49a4fee\nparent 5fff3824bc77cd7052e2515f82259e32f8ad1486\nparent 632db79ad68de5b793d56757f54898134af91aa3\nauthor Josh Stone <cuviper@gmail.com> 1597943239 -0700\ncommitter GitHub <noreply@github.com> 1597943239 -0700\n\nRollup merge of #75672 - kofls:intradoc-fix, r=jyn514\n\nMove to intra-doc links for task.rs and vec.rs\n\nPartial fix for #75080\n\nlinks for [`get`], [`get_mut`] skipped due to #75643\nlink for [`copy_from_slice`] skipped due to #63351\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f29f21285efd38574e5a36b24a36b21f233ee336", "html_url": "https://github.com/rust-lang/rust/commit/f29f21285efd38574e5a36b24a36b21f233ee336", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f29f21285efd38574e5a36b24a36b21f233ee336/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5fff3824bc77cd7052e2515f82259e32f8ad1486", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fff3824bc77cd7052e2515f82259e32f8ad1486", "html_url": "https://github.com/rust-lang/rust/commit/5fff3824bc77cd7052e2515f82259e32f8ad1486"}, {"sha": "632db79ad68de5b793d56757f54898134af91aa3", "url": "https://api.github.com/repos/rust-lang/rust/commits/632db79ad68de5b793d56757f54898134af91aa3", "html_url": "https://github.com/rust-lang/rust/commit/632db79ad68de5b793d56757f54898134af91aa3"}], "stats": {"total": 78, "additions": 30, "deletions": 48}, "files": [{"sha": "5edc5796056692deb69dfb8a21d7f59770b51e4f", "filename": "library/alloc/src/task.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f29f21285efd38574e5a36b24a36b21f233ee336/library%2Falloc%2Fsrc%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f29f21285efd38574e5a36b24a36b21f233ee336/library%2Falloc%2Fsrc%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Ftask.rs?ref=f29f21285efd38574e5a36b24a36b21f233ee336", "patch": "@@ -13,11 +13,9 @@ use crate::sync::Arc;\n ///\n /// This trait is a memory-safe and ergonomic alternative to constructing a\n /// [`RawWaker`]. It supports the common executor design in which the data used\n-/// to wake up a task is stored in an [`Arc`][arc]. Some executors (especially\n+/// to wake up a task is stored in an [`Arc`]. Some executors (especially\n /// those for embedded systems) cannot use this API, which is why [`RawWaker`]\n /// exists as an alternative for those systems.\n-///\n-/// [arc]: ../../std/sync/struct.Arc.html\n #[unstable(feature = \"wake_trait\", issue = \"69912\")]\n pub trait Wake {\n     /// Wake this task."}, {"sha": "058a06e1326f82152318ca3b77e490609f0629c7", "filename": "library/alloc/src/vec.rs", "status": "modified", "additions": 29, "deletions": 45, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/f29f21285efd38574e5a36b24a36b21f233ee336/library%2Falloc%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f29f21285efd38574e5a36b24a36b21f233ee336/library%2Falloc%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec.rs?ref=f29f21285efd38574e5a36b24a36b21f233ee336", "patch": "@@ -50,12 +50,9 @@\n //! v[1] = v[1] + 5;\n //! ```\n //!\n-//! [`Vec<T>`]: ../../std/vec/struct.Vec.html\n-//! [`new`]: ../../std/vec/struct.Vec.html#method.new\n-//! [`push`]: ../../std/vec/struct.Vec.html#method.push\n-//! [`Index`]: ../../std/ops/trait.Index.html\n-//! [`IndexMut`]: ../../std/ops/trait.IndexMut.html\n-//! [`vec!`]: ../../std/macro.vec.html\n+//! [`Vec<T>`]: Vec\n+//! [`new`]: Vec::new\n+//! [`push`]: Vec::push\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n@@ -278,22 +275,18 @@ use crate::raw_vec::RawVec;\n /// `Vec` does not currently guarantee the order in which elements are dropped.\n /// The order has changed in the past and may change again.\n ///\n-/// [`vec!`]: ../../std/macro.vec.html\n /// [`get`]: ../../std/vec/struct.Vec.html#method.get\n /// [`get_mut`]: ../../std/vec/struct.Vec.html#method.get_mut\n-/// [`Index`]: ../../std/ops/trait.Index.html\n-/// [`String`]: ../../std/string/struct.String.html\n-/// [`&str`]: ../../std/primitive.str.html\n-/// [`Vec::with_capacity`]: ../../std/vec/struct.Vec.html#method.with_capacity\n-/// [`Vec::new`]: ../../std/vec/struct.Vec.html#method.new\n-/// [`shrink_to_fit`]: ../../std/vec/struct.Vec.html#method.shrink_to_fit\n-/// [`capacity`]: ../../std/vec/struct.Vec.html#method.capacity\n-/// [`mem::size_of::<T>`]: ../../std/mem/fn.size_of.html\n-/// [`len`]: ../../std/vec/struct.Vec.html#method.len\n-/// [`push`]: ../../std/vec/struct.Vec.html#method.push\n-/// [`insert`]: ../../std/vec/struct.Vec.html#method.insert\n-/// [`reserve`]: ../../std/vec/struct.Vec.html#method.reserve\n-/// [owned slice]: ../../std/boxed/struct.Box.html\n+/// [`String`]: crate::string::String\n+/// [`&str`]: type@str\n+/// [`shrink_to_fit`]: Vec::shrink_to_fit\n+/// [`capacity`]: Vec::capacity\n+/// [`mem::size_of::<T>`]: core::mem::size_of\n+/// [`len`]: Vec::len\n+/// [`push`]: Vec::push\n+/// [`insert`]: Vec::insert\n+/// [`reserve`]: Vec::reserve\n+/// [owned slice]: Box\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[cfg_attr(not(test), rustc_diagnostic_item = \"vec_type\")]\n pub struct Vec<T> {\n@@ -375,7 +368,7 @@ impl<T> Vec<T> {\n     /// into a `Vec` with the [`from_raw_parts`] function, allowing\n     /// the destructor to perform the cleanup.\n     ///\n-    /// [`from_raw_parts`]: #method.from_raw_parts\n+    /// [`from_raw_parts`]: Vec::from_raw_parts\n     ///\n     /// # Examples\n     ///\n@@ -430,8 +423,8 @@ impl<T> Vec<T> {\n     /// that nothing else uses the pointer after calling this\n     /// function.\n     ///\n-    /// [`String`]: ../../std/string/struct.String.html\n-    /// [`dealloc`]: ../../alloc/alloc/trait.GlobalAlloc.html#tymethod.dealloc\n+    /// [`String`]: crate::string::String\n+    /// [`dealloc`]: crate::alloc::GlobalAlloc::dealloc\n     ///\n     /// # Examples\n     ///\n@@ -661,7 +654,7 @@ impl<T> Vec<T> {\n     ///\n     /// Note that this will drop any excess capacity.\n     ///\n-    /// [owned slice]: ../../std/boxed/struct.Box.html\n+    /// [owned slice]: Box\n     ///\n     /// # Examples\n     ///\n@@ -732,8 +725,8 @@ impl<T> Vec<T> {\n     /// assert_eq!(vec, []);\n     /// ```\n     ///\n-    /// [`clear`]: #method.clear\n-    /// [`drain`]: #method.drain\n+    /// [`clear`]: Vec::clear\n+    /// [`drain`]: Vec::drain\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn truncate(&mut self, len: usize) {\n         // This is safe because:\n@@ -812,7 +805,7 @@ impl<T> Vec<T> {\n     /// }\n     /// ```\n     ///\n-    /// [`as_mut_ptr`]: #method.as_mut_ptr\n+    /// [`as_mut_ptr`]: Vec::as_mut_ptr\n     #[stable(feature = \"vec_as_ptr\", since = \"1.37.0\")]\n     #[inline]\n     pub fn as_ptr(&self) -> *const T {\n@@ -868,17 +861,17 @@ impl<T> Vec<T> {\n     /// is done using one of the safe operations instead, such as\n     /// [`truncate`], [`resize`], [`extend`], or [`clear`].\n     ///\n-    /// [`truncate`]: #method.truncate\n-    /// [`resize`]: #method.resize\n-    /// [`extend`]: ../../std/iter/trait.Extend.html#tymethod.extend\n-    /// [`clear`]: #method.clear\n+    /// [`truncate`]: Vec::truncate\n+    /// [`resize`]: Vec::resize\n+    /// [`extend`]: Extend::extend\n+    /// [`clear`]: Vec::clear\n     ///\n     /// # Safety\n     ///\n     /// - `new_len` must be less than or equal to [`capacity()`].\n     /// - The elements at `old_len..new_len` must be initialized.\n     ///\n-    /// [`capacity()`]: #method.capacity\n+    /// [`capacity()`]: Vec::capacity\n     ///\n     /// # Examples\n     ///\n@@ -1217,8 +1210,6 @@ impl<T> Vec<T> {\n     /// Removes the last element from a vector and returns it, or [`None`] if it\n     /// is empty.\n     ///\n-    /// [`None`]: ../../std/option/enum.Option.html#variant.None\n-    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -1482,8 +1473,7 @@ impl<T> Vec<T> {\n     /// assert_eq!(vec, [2, 4, 8, 16]);\n     /// ```\n     ///\n-    /// [`resize`]: #method.resize\n-    /// [`Clone`]: ../../std/clone/trait.Clone.html\n+    /// [`resize`]: Vec::resize\n     #[stable(feature = \"vec_resize_with\", since = \"1.33.0\")]\n     pub fn resize_with<F>(&mut self, new_len: usize, f: F)\n     where\n@@ -1534,7 +1524,7 @@ impl<T> Vec<T> {\n     /// reading from a file) before marking the data as initialized using the\n     /// [`set_len`] method.\n     ///\n-    /// [`set_len`]: #method.set_len\n+    /// [`set_len`]: Vec::set_len\n     ///\n     /// # Examples\n     ///\n@@ -1593,9 +1583,7 @@ impl<T: Clone> Vec<T> {\n     /// assert_eq!(vec, [1, 2]);\n     /// ```\n     ///\n-    /// [`Clone`]: ../../std/clone/trait.Clone.html\n-    /// [`Default`]: ../../std/default/trait.Default.html\n-    /// [`resize_with`]: #method.resize_with\n+    /// [`resize_with`]: Vec::resize_with\n     #[stable(feature = \"vec_resize\", since = \"1.5.0\")]\n     pub fn resize(&mut self, new_len: usize, value: T) {\n         let len = self.len();\n@@ -1657,10 +1645,7 @@ impl<T: Default> Vec<T> {\n     /// assert_eq!(vec, [1, 2]);\n     /// ```\n     ///\n-    /// [`resize`]: #method.resize\n-    /// [`Default::default()`]: ../../std/default/trait.Default.html#tymethod.default\n-    /// [`Default`]: ../../std/default/trait.Default.html\n-    /// [`Clone`]: ../../std/clone/trait.Clone.html\n+    /// [`resize`]: Vec::resize\n     #[unstable(feature = \"vec_resize_default\", issue = \"41758\")]\n     #[rustc_deprecated(\n         reason = \"This is moving towards being removed in favor \\\n@@ -2341,7 +2326,6 @@ impl<T> Vec<T> {\n     /// Note that `drain_filter` also lets you mutate every element in the filter closure,\n     /// regardless of whether you choose to keep or remove it.\n     ///\n-    ///\n     /// # Examples\n     ///\n     /// Splitting an array into evens and odds, reusing the original allocation:"}]}