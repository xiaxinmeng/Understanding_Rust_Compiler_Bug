{"sha": "39207a358bdbaf3d4ba921c2b7cce786cf2c7cef", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5MjA3YTM1OGJkYmFmM2Q0YmE5MjFjMmI3Y2NlNzg2Y2YyYzdjZWY=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-08-19T17:47:38Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-08-24T19:48:10Z"}, "message": "Remove ifmt hax and implement fprintf", "tree": {"sha": "a58ff500afb02e8ef9de4931f0a91fdf6709b5f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a58ff500afb02e8ef9de4931f0a91fdf6709b5f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39207a358bdbaf3d4ba921c2b7cce786cf2c7cef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39207a358bdbaf3d4ba921c2b7cce786cf2c7cef", "html_url": "https://github.com/rust-lang/rust/commit/39207a358bdbaf3d4ba921c2b7cce786cf2c7cef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39207a358bdbaf3d4ba921c2b7cce786cf2c7cef/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59ca7a88db8583199f91fec067cfc332aae33195", "url": "https://api.github.com/repos/rust-lang/rust/commits/59ca7a88db8583199f91fec067cfc332aae33195", "html_url": "https://github.com/rust-lang/rust/commit/59ca7a88db8583199f91fec067cfc332aae33195"}], "stats": {"total": 56, "additions": 39, "deletions": 17}, "files": [{"sha": "03204fd30ea1ca7d7e9902e285863bba1f3aa58c", "filename": "src/libstd/fmt/mod.rs", "status": "modified", "additions": 39, "deletions": 17, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/39207a358bdbaf3d4ba921c2b7cce786cf2c7cef/src%2Flibstd%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39207a358bdbaf3d4ba921c2b7cce786cf2c7cef/src%2Flibstd%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffmt%2Fmod.rs?ref=39207a358bdbaf3d4ba921c2b7cce786cf2c7cef", "patch": "@@ -399,6 +399,43 @@ pub trait Pointer { fn fmt(&Self, &mut Formatter); }\n #[allow(missing_doc)]\n pub trait Float { fn fmt(&Self, &mut Formatter); }\n \n+/// The fprintf function takes an output stream, a precompiled format string,\n+/// and a list of arguments. The arguments will be formatted according to the\n+/// specified format string into the output stream provided.\n+///\n+/// See the documentation for `sprintf` for why this function is unsafe and care\n+/// should be taken if calling it manually.\n+///\n+/// Thankfully the rust compiler provides the macro `fmtf!` which will perform\n+/// all of this validation at compile-time and provides a safe interface for\n+/// invoking this function.\n+///\n+/// # Arguments\n+///\n+///   * output - the buffer to write output to\n+///   * fmts - the precompiled format string to emit\n+///   * args - the list of arguments to the format string. These are only the\n+///            positional arguments (not named)\n+///\n+/// Note that this function assumes that there are enough arguments for the\n+/// format string.\n+pub unsafe fn fprintf(output: &mut io::Writer,\n+                      fmt: &[rt::Piece], args: &[Argument]) {\n+    let mut formatter = Formatter {\n+        flags: 0,\n+        width: None,\n+        precision: None,\n+        buf: output,\n+        align: parse::AlignUnknown,\n+        fill: ' ',\n+        args: args,\n+        curarg: args.iter(),\n+    };\n+    for piece in fmt.iter() {\n+        formatter.run(piece, None);\n+    }\n+}\n+\n /// The sprintf function takes a precompiled format string and a list of\n /// arguments, to return the resulting formatted string.\n ///\n@@ -422,23 +459,8 @@ pub trait Float { fn fmt(&Self, &mut Formatter); }\n /// Note that this function assumes that there are enough arguments for the\n /// format string.\n pub unsafe fn sprintf(fmt: &[rt::Piece], args: &[Argument]) -> ~str {\n-    let output = MemWriter::new();\n-    {\n-        let mut formatter = Formatter {\n-            flags: 0,\n-            width: None,\n-            precision: None,\n-            // FIXME(#8248): shouldn't need a transmute\n-            buf: cast::transmute(&output as &io::Writer),\n-            align: parse::AlignUnknown,\n-            fill: ' ',\n-            args: args,\n-            curarg: args.iter(),\n-        };\n-        for piece in fmt.iter() {\n-            formatter.run(piece, None);\n-        }\n-    }\n+    let mut output = MemWriter::new();\n+    fprintf(&mut output as &mut io::Writer, fmt, args);\n     return str::from_bytes_owned(output.inner());\n }\n "}]}