{"sha": "1547dd66f9c3c2ba9e4998f8d4885e4f7bd62c52", "node_id": "C_kwDOAAsO6NoAKDE1NDdkZDY2ZjljM2MyYmE5ZTQ5OThmOGQ0ODg1ZTRmN2JkNjJjNTI", "commit": {"author": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2022-11-28T14:17:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-28T14:17:02Z"}, "message": "Merge pull request #318 from thomcc/simd_from_slice\n\nAvoid a scalar loop in `Simd::from_slice`", "tree": {"sha": "a173eea6e87d964259b1e62d49dc497a0a038751", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a173eea6e87d964259b1e62d49dc497a0a038751"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1547dd66f9c3c2ba9e4998f8d4885e4f7bd62c52", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjhMLeCRBK7hj4Ov3rIwAA4k0IAIh7HTUJ4uN3MNdE7n6QnHYy\nfHd9P5FNyahyNatqoB/T8xt8lnOU/L9E3gkYRqIbDWvN2JIYIRJY4awJ0WHEf1Kg\n7TO4DP73loxFNqf5PYcsg4oPr21unTN5gVdvCbOozoUfMIOFOwH84DArlhc+95k4\nKi2HxHxtLBtHwNtAzkThL7W4//2bwUGIhzrltwYJklp4ieTY3zv6GeOFvjCQZHPC\nD/Zt2pA2S9Du5Bot08DzNP0BUrYfWWdFynTSiAU2kzXdDbqa5/BmnMbvZPyzUwY7\na1rjBYV00xoasxjKaE7g2FwfN+0C7ifXafJPN4IxLfCVPVucgOFzxRNR/PmS60Y=\n=qVs3\n-----END PGP SIGNATURE-----\n", "payload": "tree a173eea6e87d964259b1e62d49dc497a0a038751\nparent 645ab61a16ea5c60b5cb5359dc9ae6a5c6c7eae1\nparent 54b6f6923e281ba68d13269b43faa927c6df83d5\nauthor Caleb Zulawski <caleb.zulawski@gmail.com> 1669645022 -0500\ncommitter GitHub <noreply@github.com> 1669645022 -0500\n\nMerge pull request #318 from thomcc/simd_from_slice\n\nAvoid a scalar loop in `Simd::from_slice`"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1547dd66f9c3c2ba9e4998f8d4885e4f7bd62c52", "html_url": "https://github.com/rust-lang/rust/commit/1547dd66f9c3c2ba9e4998f8d4885e4f7bd62c52", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1547dd66f9c3c2ba9e4998f8d4885e4f7bd62c52/comments", "author": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "645ab61a16ea5c60b5cb5359dc9ae6a5c6c7eae1", "url": "https://api.github.com/repos/rust-lang/rust/commits/645ab61a16ea5c60b5cb5359dc9ae6a5c6c7eae1", "html_url": "https://github.com/rust-lang/rust/commit/645ab61a16ea5c60b5cb5359dc9ae6a5c6c7eae1"}, {"sha": "54b6f6923e281ba68d13269b43faa927c6df83d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/54b6f6923e281ba68d13269b43faa927c6df83d5", "html_url": "https://github.com/rust-lang/rust/commit/54b6f6923e281ba68d13269b43faa927c6df83d5"}], "stats": {"total": 12, "additions": 5, "deletions": 7}, "files": [{"sha": "927b1654f8e8e06d3049e3f2b9947e70730477d2", "filename": "crates/core_simd/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1547dd66f9c3c2ba9e4998f8d4885e4f7bd62c52/crates%2Fcore_simd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1547dd66f9c3c2ba9e4998f8d4885e4f7bd62c52/crates%2Fcore_simd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Flib.rs?ref=1547dd66f9c3c2ba9e4998f8d4885e4f7bd62c52", "patch": "@@ -1,5 +1,6 @@\n #![no_std]\n #![feature(\n+    const_ptr_read,\n     convert_float_to_int,\n     decl_macro,\n     intra_doc_pointers,"}, {"sha": "51b0d999a81379ff17f86023c8889d8ee1702a42", "filename": "crates/core_simd/src/vector.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1547dd66f9c3c2ba9e4998f8d4885e4f7bd62c52/crates%2Fcore_simd%2Fsrc%2Fvector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1547dd66f9c3c2ba9e4998f8d4885e4f7bd62c52/crates%2Fcore_simd%2Fsrc%2Fvector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvector.rs?ref=1547dd66f9c3c2ba9e4998f8d4885e4f7bd62c52", "patch": "@@ -174,13 +174,10 @@ where\n             slice.len() >= LANES,\n             \"slice length must be at least the number of lanes\"\n         );\n-        let mut array = [slice[0]; LANES];\n-        let mut i = 0;\n-        while i < LANES {\n-            array[i] = slice[i];\n-            i += 1;\n-        }\n-        Self(array)\n+        // Safety:\n+        // - We've checked the length is sufficient.\n+        // - `T` and `Simd<T, N>` are Copy types.\n+        unsafe { slice.as_ptr().cast::<Self>().read_unaligned() }\n     }\n \n     /// Performs lanewise conversion of a SIMD vector's elements to another SIMD-valid type."}]}