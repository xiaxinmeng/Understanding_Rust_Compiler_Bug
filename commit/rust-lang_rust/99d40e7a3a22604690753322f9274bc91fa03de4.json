{"sha": "99d40e7a3a22604690753322f9274bc91fa03de4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5ZDQwZTdhM2EyMjYwNDY5MDc1MzMyMmY5Mjc0YmM5MWZhMDNkZTQ=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-06-11T16:20:15Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-06-11T16:34:30Z"}, "message": "Don't stringify `cfg_attr`-gated attributes\n\nThis preserves the assigned `TokenId`s", "tree": {"sha": "9538be2b7dc921afff9c36ed96ee5ccb6b8e47e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9538be2b7dc921afff9c36ed96ee5ccb6b8e47e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99d40e7a3a22604690753322f9274bc91fa03de4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99d40e7a3a22604690753322f9274bc91fa03de4", "html_url": "https://github.com/rust-lang/rust/commit/99d40e7a3a22604690753322f9274bc91fa03de4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99d40e7a3a22604690753322f9274bc91fa03de4/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d6eef1350ee0793fcd2a0eb191cdb127b76a49d", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d6eef1350ee0793fcd2a0eb191cdb127b76a49d", "html_url": "https://github.com/rust-lang/rust/commit/1d6eef1350ee0793fcd2a0eb191cdb127b76a49d"}], "stats": {"total": 22, "additions": 18, "deletions": 4}, "files": [{"sha": "d9f9fadc1068e2351c446ac176ce28c639bcb688", "filename": "crates/hir_def/src/attr.rs", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/99d40e7a3a22604690753322f9274bc91fa03de4/crates%2Fhir_def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99d40e7a3a22604690753322f9274bc91fa03de4/crates%2Fhir_def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fattr.rs?ref=99d40e7a3a22604690753322f9274bc91fa03de4", "patch": "@@ -106,7 +106,9 @@ impl RawAttrs {\n     ) -> Self {\n         let entries = collect_attrs(owner)\n             .flat_map(|(id, attr)| match attr {\n-                Either::Left(attr) => Attr::from_src(db, attr, hygiene, id),\n+                Either::Left(attr) => {\n+                    attr.meta().and_then(|meta| Attr::from_src(db, meta, hygiene, id))\n+                }\n                 Either::Right(comment) => comment.doc_comment().map(|doc| Attr {\n                     id,\n                     input: Some(Interned::new(AttrInput::Literal(SmolStr::new(doc)))),\n@@ -172,10 +174,9 @@ impl RawAttrs {\n                 let index = attr.id;\n                 let attrs = parts.filter(|a| !a.is_empty()).filter_map(|attr| {\n                     let tree = Subtree { delimiter: None, token_trees: attr.to_vec() };\n-                    let attr = ast::Attr::parse(&format!(\"#[{}]\", tree)).ok()?;\n                     // FIXME hygiene\n                     let hygiene = Hygiene::new_unhygienic();\n-                    Attr::from_src(db, attr, &hygiene, index)\n+                    Attr::from_tt(db, &tree, &hygiene, index)\n                 });\n \n                 let cfg_options = &crate_graph[krate].cfg_options;\n@@ -664,7 +665,7 @@ impl fmt::Display for AttrInput {\n impl Attr {\n     fn from_src(\n         db: &dyn DefDatabase,\n-        ast: ast::Attr,\n+        ast: ast::Meta,\n         hygiene: &Hygiene,\n         id: AttrId,\n     ) -> Option<Attr> {\n@@ -683,6 +684,19 @@ impl Attr {\n         Some(Attr { id, path, input })\n     }\n \n+    fn from_tt(\n+        db: &dyn DefDatabase,\n+        tt: &tt::Subtree,\n+        hygiene: &Hygiene,\n+        id: AttrId,\n+    ) -> Option<Attr> {\n+        let (parse, _) =\n+            mbe::token_tree_to_syntax_node(tt, hir_expand::FragmentKind::MetaItem).ok()?;\n+        let ast = ast::Meta::cast(parse.syntax_node())?;\n+\n+        Self::from_src(db, ast, hygiene, id)\n+    }\n+\n     /// Parses this attribute as a `#[derive]`, returns an iterator that yields all contained paths\n     /// to derive macros.\n     ///"}]}