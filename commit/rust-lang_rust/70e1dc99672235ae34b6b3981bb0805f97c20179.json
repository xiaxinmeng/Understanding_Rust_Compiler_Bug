{"sha": "70e1dc99672235ae34b6b3981bb0805f97c20179", "node_id": "C_kwDOAAsO6NoAKDcwZTFkYzk5NjcyMjM1YWUzNGI2YjM5ODFiYjA4MDVmOTdjMjAxNzk", "commit": {"author": {"name": "Thom Chiovoloni", "email": "thom@shift.click", "date": "2023-06-04T21:54:28Z"}, "committer": {"name": "Thom Chiovoloni", "email": "thom@shift.click", "date": "2023-06-04T21:54:28Z"}, "message": "Avoid unwind across `extern \"C\"` in `thread_local::fast_local.rs`", "tree": {"sha": "f9a6a97d650b894a5fe545fcd5e46423fc61d3ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9a6a97d650b894a5fe545fcd5e46423fc61d3ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70e1dc99672235ae34b6b3981bb0805f97c20179", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN SSH SIGNATURE-----\nU1NIU0lHAAAAAQAAADMAAAALc3NoLWVkMjU1MTkAAAAgMrDyZKNSLq6TEmWvPtNWv4vJNv\nay7sfrM7c6iOWHdh8AAAADZ2l0AAAAAAAAAAZzaGE1MTIAAABTAAAAC3NzaC1lZDI1NTE5\nAAAAQKf5595A9EdoiCxpGsMS73Xygayy8ZZxsFubNTms350k7Qg2t3HzwDQuZPgvGMyXg2\nCJfSDnHDSJ7zOVc93vag0=\n-----END SSH SIGNATURE-----", "payload": "tree f9a6a97d650b894a5fe545fcd5e46423fc61d3ce\nparent 398fa2187c88de46c13c142f600064483a563c86\nauthor Thom Chiovoloni <thom@shift.click> 1685915668 -0700\ncommitter Thom Chiovoloni <thom@shift.click> 1685915668 -0700\n\nAvoid unwind across `extern \"C\"` in `thread_local::fast_local.rs`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70e1dc99672235ae34b6b3981bb0805f97c20179", "html_url": "https://github.com/rust-lang/rust/commit/70e1dc99672235ae34b6b3981bb0805f97c20179", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70e1dc99672235ae34b6b3981bb0805f97c20179/comments", "author": {"login": "thomcc", "id": 860665, "node_id": "MDQ6VXNlcjg2MDY2NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/860665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomcc", "html_url": "https://github.com/thomcc", "followers_url": "https://api.github.com/users/thomcc/followers", "following_url": "https://api.github.com/users/thomcc/following{/other_user}", "gists_url": "https://api.github.com/users/thomcc/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomcc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomcc/subscriptions", "organizations_url": "https://api.github.com/users/thomcc/orgs", "repos_url": "https://api.github.com/users/thomcc/repos", "events_url": "https://api.github.com/users/thomcc/events{/privacy}", "received_events_url": "https://api.github.com/users/thomcc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thomcc", "id": 860665, "node_id": "MDQ6VXNlcjg2MDY2NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/860665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomcc", "html_url": "https://github.com/thomcc", "followers_url": "https://api.github.com/users/thomcc/followers", "following_url": "https://api.github.com/users/thomcc/following{/other_user}", "gists_url": "https://api.github.com/users/thomcc/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomcc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomcc/subscriptions", "organizations_url": "https://api.github.com/users/thomcc/orgs", "repos_url": "https://api.github.com/users/thomcc/repos", "events_url": "https://api.github.com/users/thomcc/events{/privacy}", "received_events_url": "https://api.github.com/users/thomcc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "398fa2187c88de46c13c142f600064483a563c86", "url": "https://api.github.com/repos/rust-lang/rust/commits/398fa2187c88de46c13c142f600064483a563c86", "html_url": "https://github.com/rust-lang/rust/commit/398fa2187c88de46c13c142f600064483a563c86"}], "stats": {"total": 45, "additions": 33, "deletions": 12}, "files": [{"sha": "bc5da1a189677c9955764e48693bbec8eeccf769", "filename": "library/std/src/sys/common/thread_local/fast_local.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/70e1dc99672235ae34b6b3981bb0805f97c20179/library%2Fstd%2Fsrc%2Fsys%2Fcommon%2Fthread_local%2Ffast_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70e1dc99672235ae34b6b3981bb0805f97c20179/library%2Fstd%2Fsrc%2Fsys%2Fcommon%2Fthread_local%2Ffast_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fcommon%2Fthread_local%2Ffast_local.rs?ref=70e1dc99672235ae34b6b3981bb0805f97c20179", "patch": "@@ -33,28 +33,29 @@ pub macro thread_local_inner {\n             // 1 == dtor registered, dtor not run\n             // 2 == dtor registered and is running or has run\n             #[thread_local]\n-            static mut STATE: $crate::primitive::u8 = 0;\n+            static STATE: $crate::cell::Cell<$crate::primitive::u8> = $crate::cell::Cell::new(0);\n \n+            // Safety: Performs `drop_in_place(ptr as *mut $t)`, and requires\n+            // all that comes with it.\n             unsafe extern \"C\" fn destroy(ptr: *mut $crate::primitive::u8) {\n-                let ptr = ptr as *mut $t;\n-\n-                unsafe {\n-                    $crate::debug_assert_eq!(STATE, 1);\n-                    STATE = 2;\n-                    $crate::ptr::drop_in_place(ptr);\n-                }\n+                $crate::thread::local_impl::abort_on_dtor_unwind(|| {\n+                    let old_state = STATE.replace(2);\n+                    $crate::debug_assert_eq!(old_state, 1);\n+                    // Safety: safety requirement is passed on to caller.\n+                    unsafe { $crate::ptr::drop_in_place(ptr.cast::<$t>()); }\n+                });\n             }\n \n             unsafe {\n-                match STATE {\n+                match STATE.get() {\n                     // 0 == we haven't registered a destructor, so do\n                     //   so now.\n                     0 => {\n                         $crate::thread::local_impl::Key::<$t>::register_dtor(\n                             $crate::ptr::addr_of_mut!(VAL) as *mut $crate::primitive::u8,\n                             destroy,\n                         );\n-                        STATE = 1;\n+                        STATE.set(1);\n                         $crate::option::Option::Some(&VAL)\n                     }\n                     // 1 == the destructor is registered and the value\n@@ -148,7 +149,6 @@ impl<T> fmt::Debug for Key<T> {\n         f.debug_struct(\"Key\").finish_non_exhaustive()\n     }\n }\n-\n impl<T> Key<T> {\n     pub const fn new() -> Key<T> {\n         Key { inner: LazyKeyInner::new(), dtor_state: Cell::new(DtorState::Unregistered) }"}, {"sha": "975509bd412b072b0598cbac038d025216116a64", "filename": "library/std/src/sys/common/thread_local/mod.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/70e1dc99672235ae34b6b3981bb0805f97c20179/library%2Fstd%2Fsrc%2Fsys%2Fcommon%2Fthread_local%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70e1dc99672235ae34b6b3981bb0805f97c20179/library%2Fstd%2Fsrc%2Fsys%2Fcommon%2Fthread_local%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fcommon%2Fthread_local%2Fmod.rs?ref=70e1dc99672235ae34b6b3981bb0805f97c20179", "patch": "@@ -101,3 +101,24 @@ mod lazy {\n         }\n     }\n }\n+\n+/// Run a callback in a scenario which must not unwind (such as a `extern \"C\"\n+/// fn` declared in a user crate). If the callback unwinds anyway, then\n+/// `rtabort` with a message about thread local panicking on drop.\n+#[inline]\n+pub fn abort_on_dtor_unwind(f: impl FnOnce()) {\n+    // Using a guard like this is lower cost.\n+    let guard = DtorUnwindGuard;\n+    f();\n+    core::mem::forget(guard);\n+\n+    struct DtorUnwindGuard;\n+    impl Drop for DtorUnwindGuard {\n+        #[inline]\n+        fn drop(&mut self) {\n+            // This is not terribly descriptive, but it doesn't need to be as we'll\n+            // already have printed a panic message at this point.\n+            rtabort!(\"thread local panicked on drop\");\n+        }\n+    }\n+}"}, {"sha": "d9973185bc45ef7f3f6dd7dc173432463815b027", "filename": "library/std/src/thread/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70e1dc99672235ae34b6b3981bb0805f97c20179/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70e1dc99672235ae34b6b3981bb0805f97c20179/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs?ref=70e1dc99672235ae34b6b3981bb0805f97c20179", "patch": "@@ -206,7 +206,7 @@ cfg_if::cfg_if! {\n         #[doc(hidden)]\n         #[unstable(feature = \"thread_local_internals\", issue = \"none\")]\n         pub mod local_impl {\n-            pub use crate::sys::common::thread_local::{thread_local_inner, Key};\n+            pub use crate::sys::common::thread_local::{thread_local_inner, Key, abort_on_dtor_unwind};\n         }\n     }\n }"}]}