{"sha": "654d12ff8930a332a4cdcfccc6c1c34700e2f3b7", "node_id": "C_kwDOAAsO6NoAKDY1NGQxMmZmODkzMGEzMzJhNGNkY2ZjY2M2YzFjMzQ3MDBlMmYzYjc", "commit": {"author": {"name": "y21", "email": "30553356+y21@users.noreply.github.com", "date": "2023-04-20T20:43:59Z"}, "committer": {"name": "y21", "email": "30553356+y21@users.noreply.github.com", "date": "2023-04-20T20:43:59Z"}, "message": "use is_inside_const_context query for in_constant", "tree": {"sha": "51d7785a53beda4ace1b47bfc2d7d7d1ce273b87", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/51d7785a53beda4ace1b47bfc2d7d7d1ce273b87"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/654d12ff8930a332a4cdcfccc6c1c34700e2f3b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/654d12ff8930a332a4cdcfccc6c1c34700e2f3b7", "html_url": "https://github.com/rust-lang/rust/commit/654d12ff8930a332a4cdcfccc6c1c34700e2f3b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/654d12ff8930a332a4cdcfccc6c1c34700e2f3b7/comments", "author": {"login": "y21", "id": 30553356, "node_id": "MDQ6VXNlcjMwNTUzMzU2", "avatar_url": "https://avatars.githubusercontent.com/u/30553356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/y21", "html_url": "https://github.com/y21", "followers_url": "https://api.github.com/users/y21/followers", "following_url": "https://api.github.com/users/y21/following{/other_user}", "gists_url": "https://api.github.com/users/y21/gists{/gist_id}", "starred_url": "https://api.github.com/users/y21/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/y21/subscriptions", "organizations_url": "https://api.github.com/users/y21/orgs", "repos_url": "https://api.github.com/users/y21/repos", "events_url": "https://api.github.com/users/y21/events{/privacy}", "received_events_url": "https://api.github.com/users/y21/received_events", "type": "User", "site_admin": false}, "committer": {"login": "y21", "id": 30553356, "node_id": "MDQ6VXNlcjMwNTUzMzU2", "avatar_url": "https://avatars.githubusercontent.com/u/30553356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/y21", "html_url": "https://github.com/y21", "followers_url": "https://api.github.com/users/y21/followers", "following_url": "https://api.github.com/users/y21/following{/other_user}", "gists_url": "https://api.github.com/users/y21/gists{/gist_id}", "starred_url": "https://api.github.com/users/y21/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/y21/subscriptions", "organizations_url": "https://api.github.com/users/y21/orgs", "repos_url": "https://api.github.com/users/y21/repos", "events_url": "https://api.github.com/users/y21/events{/privacy}", "received_events_url": "https://api.github.com/users/y21/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c976ad07ee5ce330b612caff8d49397e8ddcdc28", "url": "https://api.github.com/repos/rust-lang/rust/commits/c976ad07ee5ce330b612caff8d49397e8ddcdc28", "html_url": "https://github.com/rust-lang/rust/commit/c976ad07ee5ce330b612caff8d49397e8ddcdc28"}], "stats": {"total": 52, "additions": 21, "deletions": 31}, "files": [{"sha": "98d6f29765f4d2f200ae8fbc8bed4d0f21b48766", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 4, "deletions": 28, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/654d12ff8930a332a4cdcfccc6c1c34700e2f3b7/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/654d12ff8930a332a4cdcfccc6c1c34700e2f3b7/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=654d12ff8930a332a4cdcfccc6c1c34700e2f3b7", "patch": "@@ -86,10 +86,10 @@ use rustc_hir::hir_id::{HirIdMap, HirIdSet};\n use rustc_hir::intravisit::{walk_expr, FnKind, Visitor};\n use rustc_hir::LangItem::{OptionNone, ResultErr, ResultOk};\n use rustc_hir::{\n-    self as hir, def, Arm, ArrayLen, BindingAnnotation, Block, BlockCheckMode, Body, Closure, Constness, Destination,\n-    Expr, ExprKind, FnDecl, HirId, Impl, ImplItem, ImplItemKind, ImplItemRef, IsAsync, Item, ItemKind, LangItem, Local,\n+    self as hir, def, Arm, ArrayLen, BindingAnnotation, Block, BlockCheckMode, Body, Closure, Destination, Expr,\n+    ExprKind, FnDecl, HirId, Impl, ImplItem, ImplItemKind, ImplItemRef, IsAsync, Item, ItemKind, LangItem, Local,\n     MatchSource, Mutability, Node, OwnerId, Param, Pat, PatKind, Path, PathSegment, PrimTy, QPath, Stmt, StmtKind,\n-    TraitItem, TraitItemKind, TraitItemRef, TraitRef, TyKind, UnOp,\n+    TraitItem, TraitItemRef, TraitRef, TyKind, UnOp,\n };\n use rustc_lexer::{tokenize, TokenKind};\n use rustc_lint::{LateContext, Level, Lint, LintContext};\n@@ -197,31 +197,7 @@ pub fn find_binding_init<'tcx>(cx: &LateContext<'tcx>, hir_id: HirId) -> Option<\n /// }\n /// ```\n pub fn in_constant(cx: &LateContext<'_>, id: HirId) -> bool {\n-    let parent_id = cx.tcx.hir().get_parent_item(id).def_id;\n-    match cx.tcx.hir().get_by_def_id(parent_id) {\n-        Node::Item(&Item {\n-            kind: ItemKind::Const(..) | ItemKind::Static(..) | ItemKind::Enum(..),\n-            ..\n-        })\n-        | Node::TraitItem(&TraitItem {\n-            kind: TraitItemKind::Const(..),\n-            ..\n-        })\n-        | Node::ImplItem(&ImplItem {\n-            kind: ImplItemKind::Const(..),\n-            ..\n-        })\n-        | Node::AnonConst(_) => true,\n-        Node::Item(&Item {\n-            kind: ItemKind::Fn(ref sig, ..),\n-            ..\n-        })\n-        | Node::ImplItem(&ImplItem {\n-            kind: ImplItemKind::Fn(ref sig, _),\n-            ..\n-        }) => sig.header.constness == Constness::Const,\n-        _ => false,\n-    }\n+    cx.tcx.hir().is_inside_const_context(id)\n }\n \n /// Checks if a `Res` refers to a constructor of a `LangItem`"}, {"sha": "fbb10a133e2b0a5a83a81fccf0ad618e969cb555", "filename": "tests/ui/bool_to_int_with_if.fixed", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/654d12ff8930a332a4cdcfccc6c1c34700e2f3b7/tests%2Fui%2Fbool_to_int_with_if.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/654d12ff8930a332a4cdcfccc6c1c34700e2f3b7/tests%2Fui%2Fbool_to_int_with_if.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbool_to_int_with_if.fixed?ref=654d12ff8930a332a4cdcfccc6c1c34700e2f3b7", "patch": "@@ -1,6 +1,6 @@\n //@run-rustfix\n \n-#![feature(let_chains)]\n+#![feature(let_chains, inline_const)]\n #![warn(clippy::bool_to_int_with_if)]\n #![allow(unused, dead_code, clippy::unnecessary_operation, clippy::no_effect)]\n \n@@ -79,6 +79,13 @@ fn main() {\n \n     pub const SHOULD_NOT_LINT: usize = if true { 1 } else { 0 };\n \n+    // https://github.com/rust-lang/rust-clippy/issues/10452\n+    let should_not_lint = [(); if true { 1 } else { 0 }];\n+\n+    let should_not_lint = const {\n+        if true { 1 } else { 0 }\n+    };\n+\n     some_fn(a);\n }\n "}, {"sha": "709a18d63e401c00f5f7a2d974dfaef8fd3d80cf", "filename": "tests/ui/bool_to_int_with_if.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/654d12ff8930a332a4cdcfccc6c1c34700e2f3b7/tests%2Fui%2Fbool_to_int_with_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/654d12ff8930a332a4cdcfccc6c1c34700e2f3b7/tests%2Fui%2Fbool_to_int_with_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbool_to_int_with_if.rs?ref=654d12ff8930a332a4cdcfccc6c1c34700e2f3b7", "patch": "@@ -1,6 +1,6 @@\n //@run-rustfix\n \n-#![feature(let_chains)]\n+#![feature(let_chains, inline_const)]\n #![warn(clippy::bool_to_int_with_if)]\n #![allow(unused, dead_code, clippy::unnecessary_operation, clippy::no_effect)]\n \n@@ -111,6 +111,13 @@ fn main() {\n \n     pub const SHOULD_NOT_LINT: usize = if true { 1 } else { 0 };\n \n+    // https://github.com/rust-lang/rust-clippy/issues/10452\n+    let should_not_lint = [(); if true { 1 } else { 0 }];\n+\n+    let should_not_lint = const {\n+        if true { 1 } else { 0 }\n+    };\n+\n     some_fn(a);\n }\n "}, {"sha": "3bdae75cad22b037d7d03c1325a3663ea0a0e2a6", "filename": "tests/ui/bool_to_int_with_if.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/654d12ff8930a332a4cdcfccc6c1c34700e2f3b7/tests%2Fui%2Fbool_to_int_with_if.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/654d12ff8930a332a4cdcfccc6c1c34700e2f3b7/tests%2Fui%2Fbool_to_int_with_if.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbool_to_int_with_if.stderr?ref=654d12ff8930a332a4cdcfccc6c1c34700e2f3b7", "patch": "@@ -98,7 +98,7 @@ LL | |     };\n    = note: `!b as i32` or `(!b).into()` can also be valid options\n \n error: boolean to int conversion using if\n-  --> $DIR/bool_to_int_with_if.rs:119:5\n+  --> $DIR/bool_to_int_with_if.rs:126:5\n    |\n LL |     if a { 1 } else { 0 }\n    |     ^^^^^^^^^^^^^^^^^^^^^ help: replace with from: `u8::from(a)`"}]}