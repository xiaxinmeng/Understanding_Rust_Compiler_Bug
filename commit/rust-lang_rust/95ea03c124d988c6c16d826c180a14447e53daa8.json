{"sha": "95ea03c124d988c6c16d826c180a14447e53daa8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1ZWEwM2MxMjRkOTg4YzZjMTZkODI2YzE4MGExNDQ0N2U1M2RhYTg=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-04-05T08:20:12Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-04-05T08:20:12Z"}, "message": "add empty line before backtrace, to separate it from help text", "tree": {"sha": "00b26974bdce4765f607959bfd68c50840b85304", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00b26974bdce4765f607959bfd68c50840b85304"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/95ea03c124d988c6c16d826c180a14447e53daa8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/95ea03c124d988c6c16d826c180a14447e53daa8", "html_url": "https://github.com/rust-lang/rust/commit/95ea03c124d988c6c16d826c180a14447e53daa8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/95ea03c124d988c6c16d826c180a14447e53daa8/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0eccf1d9aa753a04b6dd0b276c9bd11a1fd5534e", "url": "https://api.github.com/repos/rust-lang/rust/commits/0eccf1d9aa753a04b6dd0b276c9bd11a1fd5534e", "html_url": "https://github.com/rust-lang/rust/commit/0eccf1d9aa753a04b6dd0b276c9bd11a1fd5534e"}], "stats": {"total": 14, "additions": 9, "deletions": 5}, "files": [{"sha": "d12b21be5a606e7de2976dd9029163fb325b8b6c", "filename": "src/diagnostics.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/95ea03c124d988c6c16d826c180a14447e53daa8/src%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95ea03c124d988c6c16d826c180a14447e53daa8/src%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdiagnostics.rs?ref=95ea03c124d988c6c16d826c180a14447e53daa8", "patch": "@@ -102,7 +102,7 @@ pub fn report_error<'tcx, 'mir>(\n \n     e.print_backtrace();\n     let msg = e.to_string();\n-    report_msg(ecx, &format!(\"{}: {}\", title, msg), msg, &helps, true)\n+    report_msg(ecx, &format!(\"{}: {}\", title, msg), msg, helps, true)\n }\n \n /// Report an error or note (depending on the `error` argument) at the current frame's current statement.\n@@ -111,7 +111,7 @@ fn report_msg<'tcx, 'mir>(\n     ecx: &InterpCx<'mir, 'tcx, Evaluator<'tcx>>,\n     title: &str,\n     span_msg: String,\n-    helps: &[String],\n+    mut helps: Vec<String>,\n     error: bool,\n ) -> Option<i64> {\n     let span = if let Some(frame) = ecx.stack().last() {\n@@ -125,8 +125,12 @@ fn report_msg<'tcx, 'mir>(\n         ecx.tcx.sess.diagnostic().span_note_diag(span, title)\n     };\n     err.span_label(span, span_msg);\n-    for help in helps {\n-        err.help(help);\n+    if !helps.is_empty() {\n+        // Add visual separator before backtrace.\n+        helps.last_mut().unwrap().push_str(\"\\n\");\n+        for help in helps {\n+            err.help(&help);\n+        }\n     }\n     // Add backtrace\n     let frames = ecx.generate_stacktrace();\n@@ -178,7 +182,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     CreatedAlloc(AllocId(id)) =>\n                         format!(\"created allocation with id {}\", id),\n                 };\n-                report_msg(this, \"tracking was triggered\", msg, &[], false);\n+                report_msg(this, \"tracking was triggered\", msg, vec![], false);\n             }\n         });\n     }"}]}