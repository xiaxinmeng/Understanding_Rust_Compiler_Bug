{"sha": "c4dee401700170c95c649682d62ad150d6b5fdeb", "node_id": "C_kwDOAAsO6NoAKGM0ZGVlNDAxNzAwMTcwYzk1YzY0OTY4MmQ2MmFkMTUwZDZiNWZkZWI", "commit": {"author": {"name": "Eric Holk", "email": "ericholk@microsoft.com", "date": "2021-10-22T19:45:02Z"}, "committer": {"name": "Eric Holk", "email": "ericholk@microsoft.com", "date": "2022-01-18T22:25:24Z"}, "message": "Track drops across multiple yields", "tree": {"sha": "4c9d99394a482d4c54c68f6c7501e20830b99bcd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c9d99394a482d4c54c68f6c7501e20830b99bcd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4dee401700170c95c649682d62ad150d6b5fdeb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4dee401700170c95c649682d62ad150d6b5fdeb", "html_url": "https://github.com/rust-lang/rust/commit/c4dee401700170c95c649682d62ad150d6b5fdeb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4dee401700170c95c649682d62ad150d6b5fdeb/comments", "author": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f712df8c5dfa14a01525dc28f38d731eedcc7263", "url": "https://api.github.com/repos/rust-lang/rust/commits/f712df8c5dfa14a01525dc28f38d731eedcc7263", "html_url": "https://github.com/rust-lang/rust/commit/f712df8c5dfa14a01525dc28f38d731eedcc7263"}], "stats": {"total": 103, "additions": 75, "deletions": 28}, "files": [{"sha": "75dd223d014d485804e5a3a1dd97815d76770c46", "filename": "compiler/rustc_middle/src/middle/region.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c4dee401700170c95c649682d62ad150d6b5fdeb/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4dee401700170c95c649682d62ad150d6b5fdeb/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fregion.rs?ref=c4dee401700170c95c649682d62ad150d6b5fdeb", "patch": "@@ -308,7 +308,7 @@ pub struct ScopeTree {\n     /// The reason is that semantically, until the `box` expression returns,\n     /// the values are still owned by their containing expressions. So\n     /// we'll see that `&x`.\n-    pub yield_in_scope: FxHashMap<Scope, YieldData>,\n+    pub yield_in_scope: FxHashMap<Scope, Vec<YieldData>>,\n \n     /// The number of visit_expr and visit_pat calls done in the body.\n     /// Used to sanity check visit_expr/visit_pat call count when\n@@ -423,8 +423,8 @@ impl ScopeTree {\n \n     /// Checks whether the given scope contains a `yield`. If so,\n     /// returns `Some(YieldData)`. If not, returns `None`.\n-    pub fn yield_in_scope(&self, scope: Scope) -> Option<YieldData> {\n-        self.yield_in_scope.get(&scope).cloned()\n+    pub fn yield_in_scope(&self, scope: Scope) -> Option<&Vec<YieldData>> {\n+        self.yield_in_scope.get(&scope)\n     }\n \n     /// Gives the number of expressions visited in a body."}, {"sha": "8b22c46f01ba63eacc1a78b38f2c27a4c5e8d815", "filename": "compiler/rustc_passes/src/region.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c4dee401700170c95c649682d62ad150d6b5fdeb/compiler%2Frustc_passes%2Fsrc%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4dee401700170c95c649682d62ad150d6b5fdeb/compiler%2Frustc_passes%2Fsrc%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fregion.rs?ref=c4dee401700170c95c649682d62ad150d6b5fdeb", "patch": "@@ -365,7 +365,8 @@ fn resolve_expr<'tcx>(visitor: &mut RegionResolutionVisitor<'tcx>, expr: &'tcx h\n             let target_scopes = visitor.fixup_scopes.drain(start_point..);\n \n             for scope in target_scopes {\n-                let mut yield_data = visitor.scope_tree.yield_in_scope.get_mut(&scope).unwrap();\n+                let mut yield_data =\n+                    visitor.scope_tree.yield_in_scope.get_mut(&scope).unwrap().last_mut().unwrap();\n                 let count = yield_data.expr_and_pat_count;\n                 let span = yield_data.span;\n \n@@ -428,7 +429,13 @@ fn resolve_expr<'tcx>(visitor: &mut RegionResolutionVisitor<'tcx>, expr: &'tcx h\n             };\n             let data =\n                 YieldData { span, expr_and_pat_count: visitor.expr_and_pat_count, source: *source };\n-            visitor.scope_tree.yield_in_scope.insert(scope, data);\n+            match visitor.scope_tree.yield_in_scope.get_mut(&scope) {\n+                Some(yields) => yields.push(data),\n+                None => {\n+                    visitor.scope_tree.yield_in_scope.insert(scope, vec![data]);\n+                }\n+            }\n+\n             if visitor.pessimistic_yield {\n                 debug!(\"resolve_expr in pessimistic_yield - marking scope {:?} for fixup\", scope);\n                 visitor.fixup_scopes.push(scope);"}, {"sha": "ba4080031a213bf56f77fb248391dab09c90510c", "filename": "compiler/rustc_typeck/src/check/generator_interior.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/c4dee401700170c95c649682d62ad150d6b5fdeb/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4dee401700170c95c649682d62ad150d6b5fdeb/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs?ref=c4dee401700170c95c649682d62ad150d6b5fdeb", "patch": "@@ -69,29 +69,29 @@ impl<'a, 'tcx> InteriorVisitor<'a, 'tcx> {\n                     //\n                     // See the mega-comment at `yield_in_scope` for a proof.\n \n-                    debug!(\n-                        \"comparing counts yield: {} self: {}, source_span = {:?}\",\n-                        yield_data.expr_and_pat_count, self.expr_count, source_span\n-                    );\n-\n-                    match self.drop_ranges.get(&hir_id) {\n-                        Some(range) if range.contains(yield_data.expr_and_pat_count) => {\n-                            debug!(\"value is dropped at yield point; not recording\");\n-                            return None\n-                        }\n-                        _ => (),\n-                    }\n-\n-                    // If it is a borrowing happening in the guard,\n-                    // it needs to be recorded regardless because they\n-                    // do live across this yield point.\n-                    if guard_borrowing_from_pattern\n-                        || yield_data.expr_and_pat_count >= self.expr_count\n-                    {\n-                        Some(yield_data)\n-                    } else {\n-                        None\n-                    }\n+                    yield_data\n+                        .iter()\n+                        .find(|yield_data| {\n+                            debug!(\n+                                \"comparing counts yield: {} self: {}, source_span = {:?}\",\n+                                yield_data.expr_and_pat_count, self.expr_count, source_span\n+                            );\n+\n+                            match self.drop_ranges.get(&hir_id) {\n+                                Some(range) if range.contains(yield_data.expr_and_pat_count) => {\n+                                    debug!(\"value is dropped at yield point; not recording\");\n+                                    return false;\n+                                }\n+                                _ => (),\n+                            }\n+\n+                            // If it is a borrowing happening in the guard,\n+                            // it needs to be recorded regardless because they\n+                            // do live across this yield point.\n+                            guard_borrowing_from_pattern\n+                                || yield_data.expr_and_pat_count >= self.expr_count\n+                        })\n+                        .cloned()\n                 })\n             })\n             .unwrap_or_else(|| {"}, {"sha": "f484cbb8d67d575aa046e0fa9b7d9f69e7fc3bca", "filename": "src/test/ui/generator/drop-yield-twice.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c4dee401700170c95c649682d62ad150d6b5fdeb/src%2Ftest%2Fui%2Fgenerator%2Fdrop-yield-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4dee401700170c95c649682d62ad150d6b5fdeb/src%2Ftest%2Fui%2Fgenerator%2Fdrop-yield-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fdrop-yield-twice.rs?ref=c4dee401700170c95c649682d62ad150d6b5fdeb", "patch": "@@ -0,0 +1,15 @@\n+#![feature(negative_impls, generators)]\n+\n+struct Foo(i32);\n+impl !Send for Foo {}\n+\n+fn main() {\n+    assert_send(|| { //~ ERROR generator cannot be sent between threads safely\n+        let guard = Foo(42);\n+        yield;\n+        drop(guard);\n+        yield;\n+    })\n+}\n+\n+fn assert_send<T: Send>(_: T) {}"}, {"sha": "f821f2f40055f35dea715a44b55bd4f0870c787e", "filename": "src/test/ui/generator/drop-yield-twice.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c4dee401700170c95c649682d62ad150d6b5fdeb/src%2Ftest%2Fui%2Fgenerator%2Fdrop-yield-twice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4dee401700170c95c649682d62ad150d6b5fdeb/src%2Ftest%2Fui%2Fgenerator%2Fdrop-yield-twice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fdrop-yield-twice.stderr?ref=c4dee401700170c95c649682d62ad150d6b5fdeb", "patch": "@@ -0,0 +1,25 @@\n+error: generator cannot be sent between threads safely\n+  --> $DIR/drop-yield-twice.rs:7:5\n+   |\n+LL |     assert_send(|| {\n+   |     ^^^^^^^^^^^ generator is not `Send`\n+   |\n+   = help: within `[generator@$DIR/drop-yield-twice.rs:7:17: 12:6]`, the trait `Send` is not implemented for `Foo`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/drop-yield-twice.rs:9:9\n+   |\n+LL |         let guard = Foo(42);\n+   |             ----- has type `Foo` which is not `Send`\n+LL |         yield;\n+   |         ^^^^^ yield occurs here, with `guard` maybe used later\n+...\n+LL |     })\n+   |     - `guard` is later dropped here\n+note: required by a bound in `assert_send`\n+  --> $DIR/drop-yield-twice.rs:15:19\n+   |\n+LL | fn assert_send<T: Send>(_: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+\n+error: aborting due to previous error\n+"}]}