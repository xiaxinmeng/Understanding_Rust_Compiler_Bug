{"sha": "33713bca490ca217b587b8841252b5adb6cbaf5d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzNzEzYmNhNDkwY2EyMTdiNTg3Yjg4NDEyNTJiNWFkYjZjYmFmNWQ=", "commit": {"author": {"name": "Robin Kruppe", "email": "robin.kruppe@gmail.com", "date": "2016-02-04T13:09:59Z"}, "committer": {"name": "Robin Kruppe", "email": "robin.kruppe@gmail.com", "date": "2016-02-04T15:28:08Z"}, "message": "drive-by doc fixes", "tree": {"sha": "8dedc3209e4181931a438a6f86ae939d169a1015", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8dedc3209e4181931a438a6f86ae939d169a1015"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/33713bca490ca217b587b8841252b5adb6cbaf5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/33713bca490ca217b587b8841252b5adb6cbaf5d", "html_url": "https://github.com/rust-lang/rust/commit/33713bca490ca217b587b8841252b5adb6cbaf5d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/33713bca490ca217b587b8841252b5adb6cbaf5d/comments", "author": null, "committer": null, "parents": [{"sha": "cc68f2c6bfeece790748474f0b1e232079212942", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc68f2c6bfeece790748474f0b1e232079212942", "html_url": "https://github.com/rust-lang/rust/commit/cc68f2c6bfeece790748474f0b1e232079212942"}], "stats": {"total": 13, "additions": 7, "deletions": 6}, "files": [{"sha": "896d63b9f0a01112aadadc68b59951da377b1858", "filename": "src/etc/test-float-parse/runtests.py", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/33713bca490ca217b587b8841252b5adb6cbaf5d/src%2Fetc%2Ftest-float-parse%2Fruntests.py", "raw_url": "https://github.com/rust-lang/rust/raw/33713bca490ca217b587b8841252b5adb6cbaf5d/src%2Fetc%2Ftest-float-parse%2Fruntests.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Ftest-float-parse%2Fruntests.py?ref=33713bca490ca217b587b8841252b5adb6cbaf5d", "patch": "@@ -21,8 +21,9 @@\n \n The actual tests (generating decimal strings and feeding them to dec2flt) is\n performed by a set of stand-along rust programs. This script compiles, runs,\n-and supervises them. In particular, the programs report the strings they\n-generate and the floating point numbers they converted those strings to.\n+and supervises them. The programs report the strings they generate and the\n+floating point numbers they converted those strings to, and this script\n+checks that the results are correct.\n \n You can run specific tests rather than all of them by giving their names\n (without .rs extension) as command line parameters.\n@@ -64,9 +65,9 @@\n exit code that's not 0, the test fails.\n The output on stdout is treated as (f64, f32, decimal) record, encoded thusly:\n \n-- The first eight bytes are a binary64 (native endianness).\n-- The following four bytes are a binary32 (native endianness).\n-- Then the corresponding string input follows, in ASCII (no newline).\n+- First, the bits of the f64 encoded as an ASCII hex string.\n+- Second, the bits of the f32 encoded as an ASCII hex string.\n+- Then the corresponding string input, in ASCII\n - The record is terminated with a newline.\n \n Incomplete records are an error. Not-a-Number bit patterns are invalid too."}, {"sha": "e33c2814bf2f42727ecb791bd505520dfd5a32c6", "filename": "src/libcore/num/dec2flt/algorithm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33713bca490ca217b587b8841252b5adb6cbaf5d/src%2Flibcore%2Fnum%2Fdec2flt%2Falgorithm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33713bca490ca217b587b8841252b5adb6cbaf5d/src%2Flibcore%2Fnum%2Fdec2flt%2Falgorithm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fdec2flt%2Falgorithm.rs?ref=33713bca490ca217b587b8841252b5adb6cbaf5d", "patch": "@@ -127,7 +127,7 @@ fn algorithm_r<T: RawFloat>(f: &Big, e: i16, z0: T) -> T {\n         // This is written a bit awkwardly because our bignums don't support\n         // negative numbers, so we use the absolute value + sign information.\n         // The multiplication with m_digits can't overflow. If `x` or `y` are large enough that\n-        // we need to worry about overflow, then they are also large enough that`make_ratio` has\n+        // we need to worry about overflow, then they are also large enough that `make_ratio` has\n         // reduced the fraction by a factor of 2^64 or more.\n         let (d2, d_negative) = if x >= y {\n             // Don't need x any more, save a clone()."}]}