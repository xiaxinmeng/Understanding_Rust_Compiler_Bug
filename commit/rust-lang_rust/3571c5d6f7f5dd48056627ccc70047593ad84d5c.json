{"sha": "3571c5d6f7f5dd48056627ccc70047593ad84d5c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1NzFjNWQ2ZjdmNWRkNDgwNTY2MjdjY2M3MDA0NzU5M2FkODRkNWM=", "commit": {"author": {"name": "Caleb Cartwright", "email": "caleb.cartwright@outlook.com", "date": "2021-01-09T17:23:36Z"}, "committer": {"name": "Caleb Cartwright", "email": "calebcartwright@users.noreply.github.com", "date": "2021-01-09T18:11:52Z"}, "message": "fix: maintain redundant semis on items in statement pos", "tree": {"sha": "0747fb9bacb9caa7d62c71e00bc1a1e6e821201e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0747fb9bacb9caa7d62c71e00bc1a1e6e821201e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3571c5d6f7f5dd48056627ccc70047593ad84d5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3571c5d6f7f5dd48056627ccc70047593ad84d5c", "html_url": "https://github.com/rust-lang/rust/commit/3571c5d6f7f5dd48056627ccc70047593ad84d5c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3571c5d6f7f5dd48056627ccc70047593ad84d5c/comments", "author": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c59b147d675546cda43462f21c0ae0bf3788eaf3", "url": "https://api.github.com/repos/rust-lang/rust/commits/c59b147d675546cda43462f21c0ae0bf3788eaf3", "html_url": "https://github.com/rust-lang/rust/commit/c59b147d675546cda43462f21c0ae0bf3788eaf3"}], "stats": {"total": 142, "additions": 129, "deletions": 13}, "files": [{"sha": "15055d46d30a5cce90156205e0f0623183fd26d1", "filename": "src/visitor.rs", "status": "modified", "additions": 44, "deletions": 13, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/3571c5d6f7f5dd48056627ccc70047593ad84d5c/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3571c5d6f7f5dd48056627ccc70047593ad84d5c/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=3571c5d6f7f5dd48056627ccc70047593ad84d5c", "patch": "@@ -112,7 +112,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n         mk_sp(self.last_pos, hi)\n     }\n \n-    fn visit_stmt(&mut self, stmt: &Stmt<'_>) {\n+    fn visit_stmt(&mut self, stmt: &Stmt<'_>, include_empty_semi: bool) {\n         debug!(\n             \"visit_stmt: {}\",\n             self.parse_sess.span_to_debug_info(stmt.span())\n@@ -127,22 +127,31 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                 .map_or(false, |i| starts_with_newline(&snippet[i..]));\n             let snippet = snippet.trim();\n             if !snippet.is_empty() {\n-                if original_starts_with_newline {\n-                    self.push_str(\"\\n\");\n+                // FIXME(calebcartwright 2021-01-03) - This exists strictly to maintain legacy\n+                // formatting where rustfmt would preserve redundant semicolons on Items in a\n+                // statement position.\n+                // See comment within `walk_stmts` for more info\n+                if include_empty_semi {\n+                    self.format_missing(stmt.span().hi());\n+                } else {\n+                    if original_starts_with_newline {\n+                        self.push_str(\"\\n\");\n+                    }\n+\n+                    self.push_str(&self.block_indent.to_string(self.config));\n+                    self.push_str(snippet);\n                 }\n-                self.push_str(&self.block_indent.to_string(self.config));\n-                self.push_str(snippet);\n+            } else if include_empty_semi {\n+                self.push_str(\";\");\n             }\n-\n             self.last_pos = stmt.span().hi();\n             return;\n         }\n \n         match stmt.as_ast_node().kind {\n             ast::StmtKind::Item(ref item) => {\n                 self.visit_item(item);\n-                // Handle potential `;` after the item.\n-                self.format_missing(stmt.span().hi());\n+                self.last_pos = stmt.span().hi();\n             }\n             ast::StmtKind::Local(..) | ast::StmtKind::Expr(..) | ast::StmtKind::Semi(..) => {\n                 let attrs = get_attrs_from_stmt(stmt.as_ast_node());\n@@ -899,7 +908,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n         self.visit_items_with_reordering(&ptr_vec_to_ref_vec(&m.items));\n     }\n \n-    fn walk_stmts(&mut self, stmts: &[Stmt<'_>]) {\n+    fn walk_stmts(&mut self, stmts: &[Stmt<'_>], include_current_empty_semi: bool) {\n         if stmts.is_empty() {\n             return;\n         }\n@@ -912,16 +921,38 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n             .collect();\n \n         if items.is_empty() {\n-            self.visit_stmt(&stmts[0]);\n-            self.walk_stmts(&stmts[1..]);\n+            self.visit_stmt(&stmts[0], include_current_empty_semi);\n+\n+            // FIXME(calebcartwright 2021-01-03) - This exists strictly to maintain legacy\n+            // formatting where rustfmt would preserve redundant semicolons on Items in a\n+            // statement position.\n+            //\n+            // Starting in rustc-ap-* v692 (~2020-12-01) the rustc parser now parses this as\n+            // two separate statements (Item and Empty kinds), whereas before it was parsed as\n+            // a single statement with the statement's span including the redundant semicolon.\n+            //\n+            // rustfmt typically tosses unnecessary/redundant semicolons, and eventually we\n+            // should toss these as well, but doing so at this time would\n+            // break the Stability Guarantee\n+            // N.B. This could be updated to utilize the version gates.\n+            let include_next_empty = if stmts.len() > 1 {\n+                match (&stmts[0].as_ast_node().kind, &stmts[1].as_ast_node().kind) {\n+                    (ast::StmtKind::Item(_), ast::StmtKind::Empty) => true,\n+                    _ => false,\n+                }\n+            } else {\n+                false\n+            };\n+\n+            self.walk_stmts(&stmts[1..], include_next_empty);\n         } else {\n             self.visit_items_with_reordering(&items);\n-            self.walk_stmts(&stmts[items.len()..]);\n+            self.walk_stmts(&stmts[items.len()..], false);\n         }\n     }\n \n     fn walk_block_stmts(&mut self, b: &ast::Block) {\n-        self.walk_stmts(&Stmt::from_ast_nodes(b.stmts.iter()))\n+        self.walk_stmts(&Stmt::from_ast_nodes(b.stmts.iter()), false)\n     }\n \n     fn format_mod("}, {"sha": "c840b8ce105dd7289dad96e76148651a13850f62", "filename": "tests/source/statements.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/3571c5d6f7f5dd48056627ccc70047593ad84d5c/tests%2Fsource%2Fstatements.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3571c5d6f7f5dd48056627ccc70047593ad84d5c/tests%2Fsource%2Fstatements.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fstatements.rs?ref=3571c5d6f7f5dd48056627ccc70047593ad84d5c", "patch": "@@ -0,0 +1,43 @@\n+// FIXME(calebcartwright) - Hopefully one day we can\n+// elide these redundant semis like we do in other contexts.\n+fn redundant_item_semis() {\n+    impl Foo {\n+            fn get(&self) -> usize {\n+                5\n+            }\n+        };\n+        \n+            impl Bar {\n+            fn get(&self) -> usize {\n+                5\n+            }\n+        } /*asdfsf*/;\n+        \n+        \n+    impl Baz {\n+        fn get(&self) -> usize {\n+            5\n+        }\n+    } /*asdfsf*/\n+    \n+    // why would someone do this\n+    ;\n+    \n+    \n+        impl Qux {\n+        fn get(&self) -> usize {\n+            5\n+        }\n+    } \n+    \n+    // why\n+    ;\n+    \n+            impl Lorem {\n+        fn get(&self) -> usize {\n+            5\n+        }\n+    } \n+    // oh why\n+    ;\n+}\n\\ No newline at end of file"}, {"sha": "c1e7dc464c2a0e8857244f1bb055d8c45dddd5c0", "filename": "tests/target/statements.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/3571c5d6f7f5dd48056627ccc70047593ad84d5c/tests%2Ftarget%2Fstatements.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3571c5d6f7f5dd48056627ccc70047593ad84d5c/tests%2Ftarget%2Fstatements.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fstatements.rs?ref=3571c5d6f7f5dd48056627ccc70047593ad84d5c", "patch": "@@ -0,0 +1,42 @@\n+// FIXME(calebcartwright) - Hopefully one day we can\n+// elide these redundant semis like we do in other contexts.\n+fn redundant_item_semis() {\n+    impl Foo {\n+        fn get(&self) -> usize {\n+            5\n+        }\n+    };\n+\n+    impl Bar {\n+        fn get(&self) -> usize {\n+            5\n+        }\n+    } /*asdfsf*/\n+    ;\n+\n+    impl Baz {\n+        fn get(&self) -> usize {\n+            5\n+        }\n+    } /*asdfsf*/\n+\n+    // why would someone do this\n+    ;\n+\n+    impl Qux {\n+        fn get(&self) -> usize {\n+            5\n+        }\n+    }\n+\n+    // why\n+    ;\n+\n+    impl Lorem {\n+        fn get(&self) -> usize {\n+            5\n+        }\n+    }\n+    // oh why\n+    ;\n+}"}]}