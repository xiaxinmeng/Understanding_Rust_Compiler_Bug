{"sha": "15940767481e82594b7d1c8fb4805521e681f854", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1OTQwNzY3NDgxZTgyNTk0YjdkMWM4ZmI0ODA1NTIxZTY4MWY4NTQ=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-06-05T17:41:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-05T17:41:34Z"}, "message": "Rollup merge of #83646 - glittershark:bound-map, r=m-ou-se\n\nAdd a map method to Bound\n\nAdd a map method to std::ops::range::Bound, patterned off of the method\nof the same name on Option.\n\nHave left off creating a tracking issue initially, but as soon as I get the go-ahead from a reviewer I'll make that right away \ud83d\ude04", "tree": {"sha": "70ac562ddefb5da065bdf81c9fdca4d1ee442aad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70ac562ddefb5da065bdf81c9fdca4d1ee442aad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15940767481e82594b7d1c8fb4805521e681f854", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgu7dRCRBK7hj4Ov3rIwAArk8IADetYhOQQu+sAQ0C4P7OT1xZ\ntxQXJximlCYdqVDKovXE8QiHm8TBqfQ3uPQ9PLJkP+sHQwCvmI2ltB1XEHlOBy4f\ne8NdYmi6YAbgUFqV9jWl0BCtRndWzXy8OPBqsGo8tyCnaQPO9I5JthA9J7V/J4Dq\nFWeUp5jNGDlDx5Mn0sp/ts8OQPRfrGNptzyHA1cEIvWjiIOc2hU09QIm3lTOS2d8\n3pfD4C3VUeW4i/F00Ncf0BV/s26WRSpSfV8sNJEKoWSVuH9AMM5EvrxBljXburyL\nUomox58x0mi2J6z4UBaVPkGYULFqajipShcZH/lh/UoZeWbVW7p3oNWooMY2xSA=\n=WIig\n-----END PGP SIGNATURE-----\n", "payload": "tree 70ac562ddefb5da065bdf81c9fdca4d1ee442aad\nparent 9104c898eb323f9edd205acf87c2b2d6badeddd7\nparent 223c0d2a852be3dc74e0bfee875d63fcf161c757\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1622914894 +0200\ncommitter GitHub <noreply@github.com> 1622914894 +0200\n\nRollup merge of #83646 - glittershark:bound-map, r=m-ou-se\n\nAdd a map method to Bound\n\nAdd a map method to std::ops::range::Bound, patterned off of the method\nof the same name on Option.\n\nHave left off creating a tracking issue initially, but as soon as I get the go-ahead from a reviewer I'll make that right away \ud83d\ude04\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15940767481e82594b7d1c8fb4805521e681f854", "html_url": "https://github.com/rust-lang/rust/commit/15940767481e82594b7d1c8fb4805521e681f854", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15940767481e82594b7d1c8fb4805521e681f854/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9104c898eb323f9edd205acf87c2b2d6badeddd7", "url": "https://api.github.com/repos/rust-lang/rust/commits/9104c898eb323f9edd205acf87c2b2d6badeddd7", "html_url": "https://github.com/rust-lang/rust/commit/9104c898eb323f9edd205acf87c2b2d6badeddd7"}, {"sha": "223c0d2a852be3dc74e0bfee875d63fcf161c757", "url": "https://api.github.com/repos/rust-lang/rust/commits/223c0d2a852be3dc74e0bfee875d63fcf161c757", "html_url": "https://github.com/rust-lang/rust/commit/223c0d2a852be3dc74e0bfee875d63fcf161c757"}], "stats": {"total": 36, "additions": 35, "deletions": 1}, "files": [{"sha": "684e6bb4a0fba0b34e149fdebf34c9ea19b30f44", "filename": "library/core/src/ops/range.rs", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/15940767481e82594b7d1c8fb4805521e681f854/library%2Fcore%2Fsrc%2Fops%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15940767481e82594b7d1c8fb4805521e681f854/library%2Fcore%2Fsrc%2Fops%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Frange.rs?ref=15940767481e82594b7d1c8fb4805521e681f854", "patch": "@@ -674,10 +674,10 @@ pub enum Bound<T> {\n     Unbounded,\n }\n \n-#[unstable(feature = \"bound_as_ref\", issue = \"80996\")]\n impl<T> Bound<T> {\n     /// Converts from `&Bound<T>` to `Bound<&T>`.\n     #[inline]\n+    #[unstable(feature = \"bound_as_ref\", issue = \"80996\")]\n     pub fn as_ref(&self) -> Bound<&T> {\n         match *self {\n             Included(ref x) => Included(x),\n@@ -688,13 +688,47 @@ impl<T> Bound<T> {\n \n     /// Converts from `&mut Bound<T>` to `Bound<&T>`.\n     #[inline]\n+    #[unstable(feature = \"bound_as_ref\", issue = \"80996\")]\n     pub fn as_mut(&mut self) -> Bound<&mut T> {\n         match *self {\n             Included(ref mut x) => Included(x),\n             Excluded(ref mut x) => Excluded(x),\n             Unbounded => Unbounded,\n         }\n     }\n+\n+    /// Maps a `Bound<T>` to a `Bound<U>` by applying a function to the contained value (including\n+    /// both `Included` and `Excluded`), returning a `Bound` of the same kind.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(bound_map)]\n+    /// use std::ops::Bound::*;\n+    ///\n+    /// let bound_string = Included(\"Hello, World!\");\n+    ///\n+    /// assert_eq!(bound_string.map(|s| s.len()), Included(13));\n+    /// ```\n+    ///\n+    /// ```\n+    /// #![feature(bound_map)]\n+    /// use std::ops::Bound;\n+    /// use Bound::*;\n+    ///\n+    /// let unbounded_string: Bound<String> = Unbounded;\n+    ///\n+    /// assert_eq!(unbounded_string.map(|s| s.len()), Unbounded);\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"bound_map\", issue = \"86026\")]\n+    pub fn map<U, F: FnOnce(T) -> U>(self, f: F) -> Bound<U> {\n+        match self {\n+            Unbounded => Unbounded,\n+            Included(x) => Included(f(x)),\n+            Excluded(x) => Excluded(f(x)),\n+        }\n+    }\n }\n \n impl<T: Clone> Bound<&T> {"}]}