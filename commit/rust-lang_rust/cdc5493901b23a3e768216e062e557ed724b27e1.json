{"sha": "cdc5493901b23a3e768216e062e557ed724b27e1", "node_id": "C_kwDOAAsO6NoAKGNkYzU0OTM5MDFiMjNhM2U3NjgyMTZlMDYyZTU1N2VkNzI0YjI3ZTE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-01T19:17:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-01T19:17:36Z"}, "message": "Auto merge of #13327 - Veykril:proc-macro-srv-config, r=Veykril\n\nAdd config for supplying sysroot path", "tree": {"sha": "8d4c0a1cb3715884c7dbde73d5e6e6f91ee2dafb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d4c0a1cb3715884c7dbde73d5e6e6f91ee2dafb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cdc5493901b23a3e768216e062e557ed724b27e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cdc5493901b23a3e768216e062e557ed724b27e1", "html_url": "https://github.com/rust-lang/rust/commit/cdc5493901b23a3e768216e062e557ed724b27e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cdc5493901b23a3e768216e062e557ed724b27e1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf5cad8e775fb326465e5c1b98693e5d259da156", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf5cad8e775fb326465e5c1b98693e5d259da156", "html_url": "https://github.com/rust-lang/rust/commit/bf5cad8e775fb326465e5c1b98693e5d259da156"}, {"sha": "5424c51158ba5d4410695bca055709051797a44b", "url": "https://api.github.com/repos/rust-lang/rust/commits/5424c51158ba5d4410695bca055709051797a44b", "html_url": "https://github.com/rust-lang/rust/commit/5424c51158ba5d4410695bca055709051797a44b"}], "stats": {"total": 127, "additions": 87, "deletions": 40}, "files": [{"sha": "8e690f1125a015fd82725255a71bca4b3bbda411", "filename": "crates/project-model/src/cargo_workspace.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cdc5493901b23a3e768216e062e557ed724b27e1/crates%2Fproject-model%2Fsrc%2Fcargo_workspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdc5493901b23a3e768216e062e557ed724b27e1/crates%2Fproject-model%2Fsrc%2Fcargo_workspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fcargo_workspace.rs?ref=cdc5493901b23a3e768216e062e557ed724b27e1", "patch": "@@ -94,9 +94,8 @@ pub struct CargoConfig {\n     pub features: CargoFeatures,\n     /// rustc target\n     pub target: Option<String>,\n-    /// Don't load sysroot crates (`std`, `core` & friends). Might be useful\n-    /// when debugging isolated issues.\n-    pub no_sysroot: bool,\n+    /// Sysroot loading behavior\n+    pub sysroot: Option<RustcSource>,\n     /// rustc private crate source\n     pub rustc_source: Option<RustcSource>,\n     /// crates to disable `#[cfg(test)]` on"}, {"sha": "bc37e3d132a6ce6f70da3ab54cf3abe4a89f3091", "filename": "crates/project-model/src/sysroot.rs", "status": "modified", "additions": 29, "deletions": 13, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/cdc5493901b23a3e768216e062e557ed724b27e1/crates%2Fproject-model%2Fsrc%2Fsysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdc5493901b23a3e768216e062e557ed724b27e1/crates%2Fproject-model%2Fsrc%2Fsysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fsysroot.rs?ref=cdc5493901b23a3e768216e062e557ed724b27e1", "patch": "@@ -67,11 +67,14 @@ impl Sysroot {\n     pub fn crates<'a>(&'a self) -> impl Iterator<Item = SysrootCrate> + ExactSizeIterator + 'a {\n         self.crates.iter().map(|(id, _data)| id)\n     }\n+}\n \n+impl Sysroot {\n     pub fn discover(dir: &AbsPath, extra_env: &FxHashMap<String, String>) -> Result<Sysroot> {\n         tracing::debug!(\"Discovering sysroot for {}\", dir.display());\n         let sysroot_dir = discover_sysroot_dir(dir, extra_env)?;\n-        let sysroot_src_dir = discover_sysroot_src_dir(&sysroot_dir, dir, extra_env)?;\n+        let sysroot_src_dir =\n+            discover_sysroot_src_dir_or_add_component(&sysroot_dir, dir, extra_env)?;\n         let res = Sysroot::load(sysroot_dir, sysroot_src_dir)?;\n         Ok(res)\n     }\n@@ -87,6 +90,14 @@ impl Sysroot {\n             .and_then(|sysroot_dir| get_rustc_src(&sysroot_dir))\n     }\n \n+    pub fn with_sysroot_dir(sysroot_dir: AbsPathBuf) -> Result<Sysroot> {\n+        let sysroot_src_dir = discover_sysroot_src_dir(&sysroot_dir).ok_or_else(|| {\n+            format_err!(\"can't load standard library from sysroot {}\", sysroot_dir.display())\n+        })?;\n+        let res = Sysroot::load(sysroot_dir, sysroot_src_dir)?;\n+        Ok(res)\n+    }\n+\n     pub fn load(sysroot_dir: AbsPathBuf, sysroot_src_dir: AbsPathBuf) -> Result<Sysroot> {\n         let mut sysroot =\n             Sysroot { root: sysroot_dir, src_root: sysroot_src_dir, crates: Arena::default() };\n@@ -162,23 +173,28 @@ fn discover_sysroot_dir(\n     Ok(AbsPathBuf::assert(PathBuf::from(stdout)))\n }\n \n-fn discover_sysroot_src_dir(\n-    sysroot_path: &AbsPathBuf,\n-    current_dir: &AbsPath,\n-    extra_env: &FxHashMap<String, String>,\n-) -> Result<AbsPathBuf> {\n+fn discover_sysroot_src_dir(sysroot_path: &AbsPathBuf) -> Option<AbsPathBuf> {\n     if let Ok(path) = env::var(\"RUST_SRC_PATH\") {\n-        let path = AbsPathBuf::try_from(path.as_str())\n-            .map_err(|path| format_err!(\"RUST_SRC_PATH must be absolute: {}\", path.display()))?;\n-        let core = path.join(\"core\");\n-        if fs::metadata(&core).is_ok() {\n-            tracing::debug!(\"Discovered sysroot by RUST_SRC_PATH: {}\", path.display());\n-            return Ok(path);\n+        if let Ok(path) = AbsPathBuf::try_from(path.as_str()) {\n+            let core = path.join(\"core\");\n+            if fs::metadata(&core).is_ok() {\n+                tracing::debug!(\"Discovered sysroot by RUST_SRC_PATH: {}\", path.display());\n+                return Some(path);\n+            }\n+            tracing::debug!(\"RUST_SRC_PATH is set, but is invalid (no core: {:?}), ignoring\", core);\n+        } else {\n+            tracing::debug!(\"RUST_SRC_PATH is set, but is invalid, ignoring\");\n         }\n-        tracing::debug!(\"RUST_SRC_PATH is set, but is invalid (no core: {:?}), ignoring\", core);\n     }\n \n     get_rust_src(sysroot_path)\n+}\n+fn discover_sysroot_src_dir_or_add_component(\n+    sysroot_path: &AbsPathBuf,\n+    current_dir: &AbsPath,\n+    extra_env: &FxHashMap<String, String>,\n+) -> Result<AbsPathBuf> {\n+    discover_sysroot_src_dir(sysroot_path)\n         .or_else(|| {\n             let mut rustup = Command::new(toolchain::rustup());\n             rustup.envs(extra_env);"}, {"sha": "72ddf809288aa35338ac2a283db0ed30336cd677", "filename": "crates/project-model/src/workspace.rs", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/cdc5493901b23a3e768216e062e557ed724b27e1/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdc5493901b23a3e768216e062e557ed724b27e1/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fworkspace.rs?ref=cdc5493901b23a3e768216e062e557ed724b27e1", "patch": "@@ -188,17 +188,26 @@ impl ProjectWorkspace {\n                 })?;\n                 let cargo = CargoWorkspace::new(meta);\n \n-                let sysroot = if config.no_sysroot {\n-                    None\n-                } else {\n-                    Some(Sysroot::discover(cargo_toml.parent(), &config.extra_env).with_context(\n-                        || {\n+                let sysroot = match &config.sysroot {\n+                    Some(RustcSource::Path(path)) => {\n+                        Some(Sysroot::with_sysroot_dir(path.clone()).with_context(|| {\n                             format!(\n+                                \"Failed to find sysroot for Cargo.toml file {}.\",\n+                                cargo_toml.display()\n+                            )\n+                        })?)\n+                    }\n+                    Some(RustcSource::Discover) => Some(\n+                        Sysroot::discover(cargo_toml.parent(), &config.extra_env).with_context(\n+                            || {\n+                                format!(\n                             \"Failed to find sysroot for Cargo.toml file {}. Is rust-src installed?\",\n                             cargo_toml.display()\n                         )\n-                        },\n-                    )?)\n+                            },\n+                        )?,\n+                    ),\n+                    None => None,\n                 };\n \n                 let rustc_dir = match &config.rustc_source {"}, {"sha": "01fccc83e8227be05109dd1ada0528c24ed92a28", "filename": "crates/rust-analyzer/src/cli/analysis_stats.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cdc5493901b23a3e768216e062e557ed724b27e1/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdc5493901b23a3e768216e062e557ed724b27e1/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs?ref=cdc5493901b23a3e768216e062e557ed724b27e1", "patch": "@@ -24,7 +24,7 @@ use ide_db::base_db::{\n use itertools::Itertools;\n use oorandom::Rand32;\n use profile::{Bytes, StopWatch};\n-use project_model::{CargoConfig, ProjectManifest, ProjectWorkspace};\n+use project_model::{CargoConfig, ProjectManifest, ProjectWorkspace, RustcSource};\n use rayon::prelude::*;\n use rustc_hash::FxHashSet;\n use stdx::format_to;\n@@ -55,7 +55,10 @@ impl flags::AnalysisStats {\n         };\n \n         let mut cargo_config = CargoConfig::default();\n-        cargo_config.no_sysroot = self.no_sysroot;\n+        cargo_config.sysroot = match self.no_sysroot {\n+            true => None,\n+            false => Some(RustcSource::Discover),\n+        };\n         let load_cargo_config = LoadCargoConfig {\n             load_out_dirs_from_check: !self.disable_build_scripts,\n             with_proc_macro: !self.disable_proc_macros,"}, {"sha": "577a8640a4c00acd659e6dfe6b6e3cadb5e95aca", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/cdc5493901b23a3e768216e062e557ed724b27e1/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdc5493901b23a3e768216e062e557ed724b27e1/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=cdc5493901b23a3e768216e062e557ed724b27e1", "patch": "@@ -94,8 +94,13 @@ config_data! {\n         cargo_features: CargoFeaturesDef      = \"[]\",\n         /// Whether to pass `--no-default-features` to cargo.\n         cargo_noDefaultFeatures: bool    = \"false\",\n-        /// Internal config for debugging, disables loading of sysroot crates.\n-        cargo_noSysroot: bool            = \"false\",\n+        /// Relative path to the sysroot, or \"discover\" to try to automatically find it via\n+        /// \"rustc --print sysroot\".\n+        ///\n+        /// Unsetting this disables sysroot loading.\n+        ///\n+        /// This option does not take effect until rust-analyzer is restarted.\n+        cargo_sysroot: Option<String>    = \"\\\"discover\\\"\",\n         /// Compilation target override (target triple).\n         cargo_target: Option<String>     = \"null\",\n         /// Unsets `#[cfg(test)]` for the specified crates.\n@@ -1030,6 +1035,13 @@ impl Config {\n                 RustcSource::Path(self.root_path.join(rustc_src))\n             }\n         });\n+        let sysroot = self.data.cargo_sysroot.as_ref().map(|sysroot| {\n+            if sysroot == \"discover\" {\n+                RustcSource::Discover\n+            } else {\n+                RustcSource::Path(self.root_path.join(sysroot))\n+            }\n+        });\n \n         CargoConfig {\n             features: match &self.data.cargo_features {\n@@ -1040,7 +1052,7 @@ impl Config {\n                 },\n             },\n             target: self.data.cargo_target.clone(),\n-            no_sysroot: self.data.cargo_noSysroot,\n+            sysroot,\n             rustc_source,\n             unset_test_crates: UnsetTestCrates::Only(self.data.cargo_unsetTest.clone()),\n             wrap_rustc_in_build_scripts: self.data.cargo_buildScripts_useRustcWrapper,"}, {"sha": "fa55f7d90c49db01e7a0d8019615599a43dafdd3", "filename": "crates/rust-analyzer/tests/slow-tests/main.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cdc5493901b23a3e768216e062e557ed724b27e1/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdc5493901b23a3e768216e062e557ed724b27e1/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fmain.rs?ref=cdc5493901b23a3e768216e062e557ed724b27e1", "patch": "@@ -59,7 +59,7 @@ use std::collections::Spam;\n \"#,\n     )\n     .with_config(serde_json::json!({\n-        \"cargo\": { \"noSysroot\": false }\n+        \"cargo\": { \"sysroot\": \"discover\" }\n     }))\n     .server()\n     .wait_until_workspace_is_loaded();\n@@ -614,7 +614,7 @@ fn main() {{}}\n         librs, libs\n     ))\n     .with_config(serde_json::json!({\n-        \"cargo\": { \"noSysroot\": false }\n+        \"cargo\": { \"sysroot\": \"discover\" }\n     }))\n     .server()\n     .wait_until_workspace_is_loaded();\n@@ -742,7 +742,7 @@ fn main() {\n             \"buildScripts\": {\n                 \"enable\": true\n             },\n-            \"noSysroot\": true,\n+            \"sysroot\": null,\n         }\n     }))\n     .server()\n@@ -900,7 +900,7 @@ pub fn foo(_input: TokenStream) -> TokenStream {\n             \"buildScripts\": {\n                 \"enable\": true\n             },\n-            \"noSysroot\": true,\n+            \"sysroot\": null,\n         },\n         \"procMacro\": {\n             \"enable\": true,"}, {"sha": "7257445dabe05f108da9bebcb6c61162bc72137b", "filename": "crates/rust-analyzer/tests/slow-tests/support.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cdc5493901b23a3e768216e062e557ed724b27e1/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fsupport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdc5493901b23a3e768216e062e557ed724b27e1/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fsupport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fsupport.rs?ref=cdc5493901b23a3e768216e062e557ed724b27e1", "patch": "@@ -34,7 +34,7 @@ impl<'a> Project<'a> {\n             config: serde_json::json!({\n                 \"cargo\": {\n                     // Loading standard library is costly, let's ignore it by default\n-                    \"noSysroot\": true,\n+                    \"sysroot\": null,\n                     // Can't use test binary as rustc wrapper.\n                     \"buildScripts\": {\n                         \"useRustcWrapper\": false"}, {"sha": "4ac75b4bbfd965712d6415c7f888eb77d10cb975", "filename": "docs/dev/README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cdc5493901b23a3e768216e062e557ed724b27e1/docs%2Fdev%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/cdc5493901b23a3e768216e062e557ed724b27e1/docs%2Fdev%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2FREADME.md?ref=cdc5493901b23a3e768216e062e557ed724b27e1", "patch": "@@ -98,7 +98,7 @@ After I am done with the fix, I use `cargo xtask install --client` to try the ne\n If I need to fix something in the `rust-analyzer` crate, I feel sad because it's on the boundary between the two processes, and working there is slow.\n I usually just `cargo xtask install --server` and poke changes from my live environment.\n Note that this uses `--release`, which is usually faster overall, because loading stdlib into debug version of rust-analyzer takes a lot of time.\n-To speed things up, sometimes I open a temporary hello-world project which has `\"rust-analyzer.cargo.noSysroot\": true` in `.code/settings.json`.\n+To speed things up, sometimes I open a temporary hello-world project which has `\"rust-analyzer.cargo.sysroot\": null` in `.code/settings.json`.\n This flag causes rust-analyzer to skip loading the sysroot, which greatly reduces the amount of things rust-analyzer needs to do, and makes printf's more useful.\n Note that you should only use the `eprint!` family of macros for debugging: stdout is used for LSP communication, and `print!` would break it.\n "}, {"sha": "acf0aaea859a28c988bbcf682f01b07a64789fcc", "filename": "docs/user/generated_config.adoc", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cdc5493901b23a3e768216e062e557ed724b27e1/docs%2Fuser%2Fgenerated_config.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/cdc5493901b23a3e768216e062e557ed724b27e1/docs%2Fuser%2Fgenerated_config.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fgenerated_config.adoc?ref=cdc5493901b23a3e768216e062e557ed724b27e1", "patch": "@@ -64,10 +64,15 @@ Set this to `\"all\"` to pass `--all-features` to cargo.\n --\n Whether to pass `--no-default-features` to cargo.\n --\n-[[rust-analyzer.cargo.noSysroot]]rust-analyzer.cargo.noSysroot (default: `false`)::\n+[[rust-analyzer.cargo.sysroot]]rust-analyzer.cargo.sysroot (default: `\"discover\"`)::\n +\n --\n-Internal config for debugging, disables loading of sysroot crates.\n+Relative path to the sysroot, or \"discover\" to try to automatically find it via\n+\"rustc --print sysroot\".\n+\n+Unsetting this disables sysroot loading.\n+\n+This option does not take effect until rust-analyzer is restarted.\n --\n [[rust-analyzer.cargo.target]]rust-analyzer.cargo.target (default: `null`)::\n +"}, {"sha": "f1dd3aa79ff043b664b519cea469bfe32d520116", "filename": "editors/code/package.json", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cdc5493901b23a3e768216e062e557ed724b27e1/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/cdc5493901b23a3e768216e062e557ed724b27e1/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=cdc5493901b23a3e768216e062e557ed724b27e1", "patch": "@@ -468,10 +468,13 @@\n                     \"default\": false,\n                     \"type\": \"boolean\"\n                 },\n-                \"rust-analyzer.cargo.noSysroot\": {\n-                    \"markdownDescription\": \"Internal config for debugging, disables loading of sysroot crates.\",\n-                    \"default\": false,\n-                    \"type\": \"boolean\"\n+                \"rust-analyzer.cargo.sysroot\": {\n+                    \"markdownDescription\": \"Relative path to the sysroot, or \\\"discover\\\" to try to automatically find it via\\n\\\"rustc --print sysroot\\\".\\n\\nUnsetting this disables sysroot loading.\\n\\nThis option does not take effect until rust-analyzer is restarted.\",\n+                    \"default\": \"discover\",\n+                    \"type\": [\n+                        \"null\",\n+                        \"string\"\n+                    ]\n                 },\n                 \"rust-analyzer.cargo.target\": {\n                     \"markdownDescription\": \"Compilation target override (target triple).\","}]}