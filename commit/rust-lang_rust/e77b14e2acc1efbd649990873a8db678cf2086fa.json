{"sha": "e77b14e2acc1efbd649990873a8db678cf2086fa", "node_id": "C_kwDOAAsO6NoAKGU3N2IxNGUyYWNjMWVmYmQ2NDk5OTA4NzNhOGRiNjc4Y2YyMDg2ZmE", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-05-01T17:17:05Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-05-01T23:56:23Z"}, "message": "Relax implicit `R: Sized` bound on `BufReader<R>`", "tree": {"sha": "abb0b2b95543579d0946a8c24edcbc1b37d18389", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/abb0b2b95543579d0946a8c24edcbc1b37d18389"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e77b14e2acc1efbd649990873a8db678cf2086fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e77b14e2acc1efbd649990873a8db678cf2086fa", "html_url": "https://github.com/rust-lang/rust/commit/e77b14e2acc1efbd649990873a8db678cf2086fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e77b14e2acc1efbd649990873a8db678cf2086fa/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7d8c88b64843d05761576aa093a34a8bc176817", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7d8c88b64843d05761576aa093a34a8bc176817", "html_url": "https://github.com/rust-lang/rust/commit/b7d8c88b64843d05761576aa093a34a8bc176817"}], "stats": {"total": 31, "additions": 17, "deletions": 14}, "files": [{"sha": "3edf9d747ce895f46e99935507a174817f56fb4d", "filename": "library/std/src/io/buffered/bufreader.rs", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e77b14e2acc1efbd649990873a8db678cf2086fa/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fbufreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e77b14e2acc1efbd649990873a8db678cf2086fa/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fbufreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fbufreader.rs?ref=e77b14e2acc1efbd649990873a8db678cf2086fa", "patch": "@@ -47,9 +47,9 @@ use buffer::Buffer;\n /// }\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub struct BufReader<R> {\n-    inner: R,\n+pub struct BufReader<R: ?Sized> {\n     buf: Buffer,\n+    inner: R,\n }\n \n impl<R: Read> BufReader<R> {\n@@ -95,7 +95,7 @@ impl<R: Read> BufReader<R> {\n     }\n }\n \n-impl<R> BufReader<R> {\n+impl<R: ?Sized> BufReader<R> {\n     /// Gets a reference to the underlying reader.\n     ///\n     /// It is inadvisable to directly read from the underlying reader.\n@@ -213,7 +213,10 @@ impl<R> BufReader<R> {\n     /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn into_inner(self) -> R {\n+    pub fn into_inner(self) -> R\n+    where\n+        R: Sized,\n+    {\n         self.inner\n     }\n \n@@ -226,13 +229,13 @@ impl<R> BufReader<R> {\n \n // This is only used by a test which asserts that the initialization-tracking is correct.\n #[cfg(test)]\n-impl<R> BufReader<R> {\n+impl<R: ?Sized> BufReader<R> {\n     pub fn initialized(&self) -> usize {\n         self.buf.initialized()\n     }\n }\n \n-impl<R: Seek> BufReader<R> {\n+impl<R: ?Sized + Seek> BufReader<R> {\n     /// Seeks relative to the current position. If the new position lies within the buffer,\n     /// the buffer will not be flushed, allowing for more efficient seeks.\n     /// This method does not return the location of the underlying reader, so the caller\n@@ -257,7 +260,7 @@ impl<R: Seek> BufReader<R> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<R: Read> Read for BufReader<R> {\n+impl<R: ?Sized + Read> Read for BufReader<R> {\n     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n         // If we don't have any buffered data and we're doing a massive read\n         // (larger than our internal buffer), bypass our internal buffer\n@@ -371,7 +374,7 @@ impl<R: Read> Read for BufReader<R> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<R: Read> BufRead for BufReader<R> {\n+impl<R: ?Sized + Read> BufRead for BufReader<R> {\n     fn fill_buf(&mut self) -> io::Result<&[u8]> {\n         self.buf.fill_buf(&mut self.inner)\n     }\n@@ -384,11 +387,11 @@ impl<R: Read> BufRead for BufReader<R> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<R> fmt::Debug for BufReader<R>\n where\n-    R: fmt::Debug,\n+    R: ?Sized + fmt::Debug,\n {\n     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt.debug_struct(\"BufReader\")\n-            .field(\"reader\", &self.inner)\n+            .field(\"reader\", &&self.inner)\n             .field(\n                 \"buffer\",\n                 &format_args!(\"{}/{}\", self.buf.filled() - self.buf.pos(), self.capacity()),\n@@ -398,7 +401,7 @@ where\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<R: Seek> Seek for BufReader<R> {\n+impl<R: ?Sized + Seek> Seek for BufReader<R> {\n     /// Seek to an offset, in bytes, in the underlying reader.\n     ///\n     /// The position used for seeking with <code>[SeekFrom::Current]\\(_)</code> is the\n@@ -491,7 +494,7 @@ impl<R: Seek> Seek for BufReader<R> {\n     }\n }\n \n-impl<T> SizeHint for BufReader<T> {\n+impl<T: ?Sized> SizeHint for BufReader<T> {\n     #[inline]\n     fn lower_bound(&self) -> usize {\n         SizeHint::lower_bound(self.get_ref()) + self.buffer().len()"}, {"sha": "bb329dc2446b304b55f81f040dba40729628fd56", "filename": "library/std/src/io/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e77b14e2acc1efbd649990873a8db678cf2086fa/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e77b14e2acc1efbd649990873a8db678cf2086fa/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fmod.rs?ref=e77b14e2acc1efbd649990873a8db678cf2086fa", "patch": "@@ -2753,7 +2753,7 @@ trait SizeHint {\n     }\n }\n \n-impl<T> SizeHint for T {\n+impl<T: ?Sized> SizeHint for T {\n     #[inline]\n     default fn lower_bound(&self) -> usize {\n         0"}, {"sha": "81b081e0070e38b88b787658a586a4e383a0cbdc", "filename": "library/std/src/sys/unix/kernel_copy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e77b14e2acc1efbd649990873a8db678cf2086fa/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fkernel_copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e77b14e2acc1efbd649990873a8db678cf2086fa/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fkernel_copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fkernel_copy.rs?ref=e77b14e2acc1efbd649990873a8db678cf2086fa", "patch": "@@ -466,7 +466,7 @@ impl<T: CopyRead> CopyRead for Take<T> {\n     }\n }\n \n-impl<T: CopyRead> CopyRead for BufReader<T> {\n+impl<T: ?Sized + CopyRead> CopyRead for BufReader<T> {\n     fn drain_to<W: Write>(&mut self, writer: &mut W, outer_limit: u64) -> Result<u64> {\n         let buf = self.buffer();\n         let buf = &buf[0..min(buf.len(), outer_limit.try_into().unwrap_or(usize::MAX))];"}]}