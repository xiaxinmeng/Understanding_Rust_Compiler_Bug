{"sha": "99d4ea4f399a81f09a04045ac3f0bce022d0f1ba", "node_id": "C_kwDOAAsO6NoAKDk5ZDRlYTRmMzk5YTgxZjA5YTA0MDQ1YWMzZjBiY2UwMjJkMGYxYmE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-16T12:58:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-16T12:58:43Z"}, "message": "Auto merge of #10356 - JirkaVebr:let_underscore_untyped, r=llogiq\n\nAdd `let_underscore_untyped`\n\nFixes #6842\n\nThis adds a new pedantic `let_underscore_untyped` lint which checks for `let _ = <expr>`, and suggests to either provide a type annotation, or to remove the `let` keyword. That way the author is forced to specify the type they intended to ignore, and thus get forced to re-visit the decision should the type of `<expr>` change. Alternatively, they can drop the `let` keyword to truly just ignore the value no matter what.\n\nr? `@llogiq`\n\nchangelog: New lint: [let_underscore_untyped]", "tree": {"sha": "259b32f7e4a788a587fd93f1f853a9848275da91", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/259b32f7e4a788a587fd93f1f853a9848275da91"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99d4ea4f399a81f09a04045ac3f0bce022d0f1ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99d4ea4f399a81f09a04045ac3f0bce022d0f1ba", "html_url": "https://github.com/rust-lang/rust/commit/99d4ea4f399a81f09a04045ac3f0bce022d0f1ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99d4ea4f399a81f09a04045ac3f0bce022d0f1ba/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4369a67a9b5654c016329fa34e1281fc920c2f33", "url": "https://api.github.com/repos/rust-lang/rust/commits/4369a67a9b5654c016329fa34e1281fc920c2f33", "html_url": "https://github.com/rust-lang/rust/commit/4369a67a9b5654c016329fa34e1281fc920c2f33"}, {"sha": "0b1ae20365f4363fdc5462fae3b3a3bd8ee214e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b1ae20365f4363fdc5462fae3b3a3bd8ee214e6", "html_url": "https://github.com/rust-lang/rust/commit/0b1ae20365f4363fdc5462fae3b3a3bd8ee214e6"}], "stats": {"total": 237, "additions": 199, "deletions": 38}, "files": [{"sha": "feab94c52a51a238c9f42b96b18e29d748a3ecbc", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/99d4ea4f399a81f09a04045ac3f0bce022d0f1ba/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/99d4ea4f399a81f09a04045ac3f0bce022d0f1ba/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=99d4ea4f399a81f09a04045ac3f0bce022d0f1ba", "patch": "@@ -4494,6 +4494,7 @@ Released 2018-09-13\n [`let_underscore_future`]: https://rust-lang.github.io/rust-clippy/master/index.html#let_underscore_future\n [`let_underscore_lock`]: https://rust-lang.github.io/rust-clippy/master/index.html#let_underscore_lock\n [`let_underscore_must_use`]: https://rust-lang.github.io/rust-clippy/master/index.html#let_underscore_must_use\n+[`let_underscore_untyped`]: https://rust-lang.github.io/rust-clippy/master/index.html#let_underscore_untyped\n [`let_unit_value`]: https://rust-lang.github.io/rust-clippy/master/index.html#let_unit_value\n [`linkedlist`]: https://rust-lang.github.io/rust-clippy/master/index.html#linkedlist\n [`logic_bug`]: https://rust-lang.github.io/rust-clippy/master/index.html#logic_bug"}, {"sha": "420214d9256d8a050d80a97aa3154da1db80e9e2", "filename": "clippy_dev/src/new_lint.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/99d4ea4f399a81f09a04045ac3f0bce022d0f1ba/clippy_dev%2Fsrc%2Fnew_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99d4ea4f399a81f09a04045ac3f0bce022d0f1ba/clippy_dev%2Fsrc%2Fnew_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fnew_lint.rs?ref=99d4ea4f399a81f09a04045ac3f0bce022d0f1ba", "patch": "@@ -1,5 +1,6 @@\n use crate::clippy_project_root;\n use indoc::{formatdoc, writedoc};\n+use std::fmt;\n use std::fmt::Write as _;\n use std::fs::{self, OpenOptions};\n use std::io::prelude::*;\n@@ -256,7 +257,7 @@ fn get_lint_file_contents(lint: &LintData<'_>, enable_msrv: bool) -> String {\n         )\n     });\n \n-    let _ = write!(result, \"{}\", get_lint_declaration(&name_upper, category));\n+    let _: fmt::Result = write!(result, \"{}\", get_lint_declaration(&name_upper, category));\n \n     result.push_str(&if enable_msrv {\n         formatdoc!(\n@@ -353,7 +354,7 @@ fn create_lint_for_ty(lint: &LintData<'_>, enable_msrv: bool, ty: &str) -> io::R\n     let mut lint_file_contents = String::new();\n \n     if enable_msrv {\n-        let _ = writedoc!(\n+        let _: fmt::Result = writedoc!(\n             lint_file_contents,\n             r#\"\n                 use clippy_utils::msrvs::{{self, Msrv}};\n@@ -373,7 +374,7 @@ fn create_lint_for_ty(lint: &LintData<'_>, enable_msrv: bool, ty: &str) -> io::R\n             name_upper = name_upper,\n         );\n     } else {\n-        let _ = writedoc!(\n+        let _: fmt::Result = writedoc!(\n             lint_file_contents,\n             r#\"\n                 use rustc_lint::{{{context_import}, LintContext}};\n@@ -521,7 +522,7 @@ fn setup_mod_file(path: &Path, lint: &LintData<'_>) -> io::Result<&'static str>\n         .chain(std::iter::once(&*lint_name_upper))\n         .filter(|s| !s.is_empty())\n     {\n-        let _ = write!(new_arr_content, \"\\n    {ident},\");\n+        let _: fmt::Result = write!(new_arr_content, \"\\n    {ident},\");\n     }\n     new_arr_content.push('\\n');\n "}, {"sha": "779e4d0e1e308dc39e467e7a6969b965ac4e9d6e", "filename": "clippy_dev/src/update_lints.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/99d4ea4f399a81f09a04045ac3f0bce022d0f1ba/clippy_dev%2Fsrc%2Fupdate_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99d4ea4f399a81f09a04045ac3f0bce022d0f1ba/clippy_dev%2Fsrc%2Fupdate_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fupdate_lints.rs?ref=99d4ea4f399a81f09a04045ac3f0bce022d0f1ba", "patch": "@@ -5,7 +5,7 @@ use itertools::Itertools;\n use rustc_lexer::{tokenize, unescape, LiteralKind, TokenKind};\n use std::collections::{HashMap, HashSet};\n use std::ffi::OsStr;\n-use std::fmt::Write;\n+use std::fmt::{self, Write};\n use std::fs::{self, OpenOptions};\n use std::io::{self, Read, Seek, SeekFrom, Write as _};\n use std::ops::Range;\n@@ -691,7 +691,7 @@ fn gen_deprecated(lints: &[DeprecatedLint]) -> String {\n     let mut output = GENERATED_FILE_COMMENT.to_string();\n     output.push_str(\"{\\n\");\n     for lint in lints {\n-        let _ = write!(\n+        let _: fmt::Result = write!(\n             output,\n             concat!(\n                 \"    store.register_removed(\\n\",\n@@ -726,7 +726,7 @@ fn gen_declared_lints<'a>(\n         if !is_public {\n             output.push_str(\"    #[cfg(feature = \\\"internal\\\")]\\n\");\n         }\n-        let _ = writeln!(output, \"    crate::{module_name}::{lint_name}_INFO,\");\n+        let _: fmt::Result = writeln!(output, \"    crate::{module_name}::{lint_name}_INFO,\");\n     }\n     output.push_str(\"];\\n\");\n "}, {"sha": "0962c3ce66c19f57a57d2fb9c78eeb785031d91c", "filename": "clippy_lints/src/declared_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/99d4ea4f399a81f09a04045ac3f0bce022d0f1ba/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99d4ea4f399a81f09a04045ac3f0bce022d0f1ba/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdeclared_lints.rs?ref=99d4ea4f399a81f09a04045ac3f0bce022d0f1ba", "patch": "@@ -224,6 +224,7 @@ pub(crate) static LINTS: &[&crate::LintInfo] = &[\n     crate::let_underscore::LET_UNDERSCORE_FUTURE_INFO,\n     crate::let_underscore::LET_UNDERSCORE_LOCK_INFO,\n     crate::let_underscore::LET_UNDERSCORE_MUST_USE_INFO,\n+    crate::let_underscore::LET_UNDERSCORE_UNTYPED_INFO,\n     crate::lifetimes::EXTRA_UNUSED_LIFETIMES_INFO,\n     crate::lifetimes::NEEDLESS_LIFETIMES_INFO,\n     crate::literal_representation::DECIMAL_LITERAL_REPRESENTATION_INFO,"}, {"sha": "48a54f60253c85032b9698d7d058f607db07a378", "filename": "clippy_lints/src/entry.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/99d4ea4f399a81f09a04045ac3f0bce022d0f1ba/clippy_lints%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99d4ea4f399a81f09a04045ac3f0bce022d0f1ba/clippy_lints%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fentry.rs?ref=99d4ea4f399a81f09a04045ac3f0bce022d0f1ba", "patch": "@@ -6,7 +6,7 @@ use clippy_utils::{\n     source::{reindent_multiline, snippet_indent, snippet_with_applicability, snippet_with_context},\n     SpanlessEq,\n };\n-use core::fmt::Write;\n+use core::fmt::{self, Write};\n use rustc_errors::Applicability;\n use rustc_hir::{\n     hir_id::HirIdSet,\n@@ -536,7 +536,7 @@ impl<'tcx> InsertSearchResults<'tcx> {\n             if is_expr_used_or_unified(cx.tcx, insertion.call) {\n                 write_wrapped(&mut res, insertion, ctxt, app);\n             } else {\n-                let _ = write!(\n+                let _: fmt::Result = write!(\n                     res,\n                     \"e.insert({})\",\n                     snippet_with_context(cx, insertion.value.span, ctxt, \"..\", app).0\n@@ -552,7 +552,7 @@ impl<'tcx> InsertSearchResults<'tcx> {\n         (\n             self.snippet(cx, span, app, |res, insertion, ctxt, app| {\n                 // Insertion into a map would return `Some(&mut value)`, but the entry returns `&mut value`\n-                let _ = write!(\n+                let _: fmt::Result = write!(\n                     res,\n                     \"Some(e.insert({}))\",\n                     snippet_with_context(cx, insertion.value.span, ctxt, \"..\", app).0\n@@ -566,7 +566,7 @@ impl<'tcx> InsertSearchResults<'tcx> {\n         (\n             self.snippet(cx, span, app, |res, insertion, ctxt, app| {\n                 // Insertion into a map would return `None`, but the entry returns a mutable reference.\n-                let _ = if is_expr_final_block_expr(cx.tcx, insertion.call) {\n+                let _: fmt::Result = if is_expr_final_block_expr(cx.tcx, insertion.call) {\n                     write!(\n                         res,\n                         \"e.insert({});\\n{}None\","}, {"sha": "1ad886f2cf35fe5a7b6526d2bae3baaa1971f502", "filename": "clippy_lints/src/inconsistent_struct_constructor.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/99d4ea4f399a81f09a04045ac3f0bce022d0f1ba/clippy_lints%2Fsrc%2Finconsistent_struct_constructor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99d4ea4f399a81f09a04045ac3f0bce022d0f1ba/clippy_lints%2Fsrc%2Finconsistent_struct_constructor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finconsistent_struct_constructor.rs?ref=99d4ea4f399a81f09a04045ac3f0bce022d0f1ba", "patch": "@@ -7,7 +7,7 @@ use rustc_hir::{self as hir, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::symbol::Symbol;\n-use std::fmt::Write as _;\n+use std::fmt::{self, Write as _};\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -90,7 +90,7 @@ impl<'tcx> LateLintPass<'tcx> for InconsistentStructConstructor {\n                 let mut fields_snippet = String::new();\n                 let (last_ident, idents) = ordered_fields.split_last().unwrap();\n                 for ident in idents {\n-                    let _ = write!(fields_snippet, \"{ident}, \");\n+                    let _: fmt::Result = write!(fields_snippet, \"{ident}, \");\n                 }\n                 fields_snippet.push_str(&last_ident.to_string());\n "}, {"sha": "7600777fab97039f41f4064d664386d6f9d372bd", "filename": "clippy_lints/src/let_underscore.rs", "status": "modified", "additions": 51, "deletions": 1, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/99d4ea4f399a81f09a04045ac3f0bce022d0f1ba/clippy_lints%2Fsrc%2Flet_underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99d4ea4f399a81f09a04045ac3f0bce022d0f1ba/clippy_lints%2Fsrc%2Flet_underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_underscore.rs?ref=99d4ea4f399a81f09a04045ac3f0bce022d0f1ba", "patch": "@@ -90,7 +90,45 @@ declare_clippy_lint! {\n     \"non-binding `let` on a future\"\n }\n \n-declare_lint_pass!(LetUnderscore => [LET_UNDERSCORE_MUST_USE, LET_UNDERSCORE_LOCK, LET_UNDERSCORE_FUTURE]);\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for `let _ = <expr>` without a type annotation, and suggests to either provide one,\n+    /// or remove the `let` keyword altogether.\n+    ///\n+    /// ### Why is this bad?\n+    /// The `let _ = <expr>` expression ignores the value of `<expr>` but will remain doing so even\n+    /// if the type were to change, thus potentially introducing subtle bugs. By supplying a type\n+    /// annotation, one will be forced to re-visit the decision to ignore the value in such cases.\n+    ///\n+    /// ### Known problems\n+    /// The `_ = <expr>` is not properly supported by some tools (e.g. IntelliJ) and may seem odd\n+    /// to many developers. This lint also partially overlaps with the other `let_underscore_*`\n+    /// lints.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// fn foo() -> Result<u32, ()> {\n+    ///     Ok(123)\n+    /// }\n+    /// let _ = foo();\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// fn foo() -> Result<u32, ()> {\n+    ///     Ok(123)\n+    /// }\n+    /// // Either provide a type annotation:\n+    /// let _: Result<u32, ()> = foo();\n+    /// // \u2026or drop the let keyword:\n+    /// _ = foo();\n+    /// ```\n+    #[clippy::version = \"1.69.0\"]\n+    pub LET_UNDERSCORE_UNTYPED,\n+    pedantic,\n+    \"non-binding `let` without a type annotation\"\n+}\n+\n+declare_lint_pass!(LetUnderscore => [LET_UNDERSCORE_MUST_USE, LET_UNDERSCORE_LOCK, LET_UNDERSCORE_FUTURE, LET_UNDERSCORE_UNTYPED]);\n \n const SYNC_GUARD_PATHS: [&[&str]; 3] = [\n     &paths::PARKING_LOT_MUTEX_GUARD,\n@@ -148,6 +186,18 @@ impl<'tcx> LateLintPass<'tcx> for LetUnderscore {\n                     \"consider explicitly using function result\",\n                 );\n             }\n+\n+            if local.pat.default_binding_modes && local.ty.is_none() {\n+                // When `default_binding_modes` is true, the `let` keyword is present.\n+                span_lint_and_help(\n+                    cx,\n+                    LET_UNDERSCORE_UNTYPED,\n+                    local.span,\n+                    \"non-binding `let` without a type annotation\",\n+                    None,\n+                    \"consider adding a type annotation or removing the `let` keyword\",\n+                );\n+            }\n         }\n     }\n }"}, {"sha": "dadcd9c5135c25cf0e1d8fa56cca74ced58ffbee", "filename": "clippy_lints/src/literal_representation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99d4ea4f399a81f09a04045ac3f0bce022d0f1ba/clippy_lints%2Fsrc%2Fliteral_representation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99d4ea4f399a81f09a04045ac3f0bce022d0f1ba/clippy_lints%2Fsrc%2Fliteral_representation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fliteral_representation.rs?ref=99d4ea4f399a81f09a04045ac3f0bce022d0f1ba", "patch": "@@ -488,7 +488,7 @@ impl DecimalLiteralRepresentation {\n             then {\n                 let hex = format!(\"{val:#X}\");\n                 let num_lit = NumericLiteral::new(&hex, num_lit.suffix, false);\n-                let _ = Self::do_lint(num_lit.integer).map_err(|warning_type| {\n+                let _: Result<(), ()> = Self::do_lint(num_lit.integer).map_err(|warning_type| {\n                     warning_type.display(num_lit.format(), cx, span);\n                 });\n             }"}, {"sha": "349fcd2274d3ec61a7b0e2352298999c2265138e", "filename": "clippy_lints/src/module_style.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99d4ea4f399a81f09a04045ac3f0bce022d0f1ba/clippy_lints%2Fsrc%2Fmodule_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99d4ea4f399a81f09a04045ac3f0bce022d0f1ba/clippy_lints%2Fsrc%2Fmodule_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmodule_style.rs?ref=99d4ea4f399a81f09a04045ac3f0bce022d0f1ba", "patch": "@@ -134,7 +134,7 @@ fn process_paths_for_mod_files<'a>(\n     mod_folders: &mut FxHashSet<&'a OsStr>,\n ) {\n     let mut comp = path.components().rev().peekable();\n-    let _ = comp.next();\n+    let _: Option<_> = comp.next();\n     if path.ends_with(\"mod.rs\") {\n         mod_folders.insert(comp.peek().map(|c| c.as_os_str()).unwrap_or_default());\n     }"}, {"sha": "c225398ad2a8fdfed1a54fec623970ef62f0e8ec", "filename": "clippy_utils/src/numeric_literal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99d4ea4f399a81f09a04045ac3f0bce022d0f1ba/clippy_utils%2Fsrc%2Fnumeric_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99d4ea4f399a81f09a04045ac3f0bce022d0f1ba/clippy_utils%2Fsrc%2Fnumeric_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fnumeric_literal.rs?ref=99d4ea4f399a81f09a04045ac3f0bce022d0f1ba", "patch": "@@ -186,7 +186,7 @@ impl<'a> NumericLiteral<'a> {\n         // The exponent may have a sign, output it early, otherwise it will be\n         // treated as a digit\n         if digits.clone().next() == Some('-') {\n-            let _ = digits.next();\n+            let _: Option<char> = digits.next();\n             output.push('-');\n         }\n "}, {"sha": "51e270d330c88d78eb102856950e7257a1a9777c", "filename": "clippy_utils/src/sugg.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/99d4ea4f399a81f09a04045ac3f0bce022d0f1ba/clippy_utils%2Fsrc%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99d4ea4f399a81f09a04045ac3f0bce022d0f1ba/clippy_utils%2Fsrc%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fsugg.rs?ref=99d4ea4f399a81f09a04045ac3f0bce022d0f1ba", "patch": "@@ -20,7 +20,7 @@ use rustc_middle::mir::{FakeReadCause, Mutability};\n use rustc_middle::ty;\n use rustc_span::source_map::{BytePos, CharPos, Pos, Span, SyntaxContext};\n use std::borrow::Cow;\n-use std::fmt::{Display, Write as _};\n+use std::fmt::{self, Display, Write as _};\n use std::ops::{Add, Neg, Not, Sub};\n \n /// A helper type to build suggestion correctly handling parentheses.\n@@ -932,7 +932,7 @@ impl<'tcx> Delegate<'tcx> for DerefDelegate<'_, 'tcx> {\n             if cmt.place.projections.is_empty() {\n                 // handle item without any projection, that needs an explicit borrowing\n                 // i.e.: suggest `&x` instead of `x`\n-                let _ = write!(self.suggestion_start, \"{start_snip}&{ident_str}\");\n+                let _: fmt::Result = write!(self.suggestion_start, \"{start_snip}&{ident_str}\");\n             } else {\n                 // cases where a parent `Call` or `MethodCall` is using the item\n                 // i.e.: suggest `.contains(&x)` for `.find(|x| [1, 2, 3].contains(x)).is_none()`\n@@ -947,7 +947,7 @@ impl<'tcx> Delegate<'tcx> for DerefDelegate<'_, 'tcx> {\n                         // given expression is the self argument and will be handled completely by the compiler\n                         // i.e.: `|x| x.is_something()`\n                         ExprKind::MethodCall(_, self_expr, ..) if self_expr.hir_id == cmt.hir_id => {\n-                            let _ = write!(self.suggestion_start, \"{start_snip}{ident_str_with_proj}\");\n+                            let _: fmt::Result = write!(self.suggestion_start, \"{start_snip}{ident_str_with_proj}\");\n                             self.next_pos = span.hi();\n                             return;\n                         },\n@@ -1055,7 +1055,7 @@ impl<'tcx> Delegate<'tcx> for DerefDelegate<'_, 'tcx> {\n                     }\n                 }\n \n-                let _ = write!(self.suggestion_start, \"{start_snip}{replacement_str}\");\n+                let _: fmt::Result = write!(self.suggestion_start, \"{start_snip}{replacement_str}\");\n             }\n             self.next_pos = span.hi();\n         }"}, {"sha": "23c85298027597f33bcef3cec8ff5a591f64982c", "filename": "lintcheck/src/main.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/99d4ea4f399a81f09a04045ac3f0bce022d0f1ba/lintcheck%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99d4ea4f399a81f09a04045ac3f0bce022d0f1ba/lintcheck%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lintcheck%2Fsrc%2Fmain.rs?ref=99d4ea4f399a81f09a04045ac3f0bce022d0f1ba", "patch": "@@ -17,9 +17,9 @@ use crate::recursive::LintcheckServer;\n use std::collections::{HashMap, HashSet};\n use std::env;\n use std::env::consts::EXE_SUFFIX;\n-use std::fmt::Write as _;\n+use std::fmt::{self, Write as _};\n use std::fs;\n-use std::io::ErrorKind;\n+use std::io::{self, ErrorKind};\n use std::path::{Path, PathBuf};\n use std::process::Command;\n use std::sync::atomic::{AtomicUsize, Ordering};\n@@ -145,8 +145,8 @@ impl ClippyWarning {\n             }\n \n             let mut output = String::from(\"| \");\n-            let _ = write!(output, \"[`{file_with_pos}`]({file}#L{})\", self.line);\n-            let _ = write!(output, r#\" | `{:<50}` | \"{}\" |\"#, self.lint_type, self.message);\n+            let _: fmt::Result = write!(output, \"[`{file_with_pos}`]({file}#L{})\", self.line);\n+            let _: fmt::Result = write!(output, r#\" | `{:<50}` | \"{}\" |\"#, self.lint_type, self.message);\n             output.push('\\n');\n             output\n         } else {\n@@ -632,7 +632,7 @@ fn main() {\n         .unwrap();\n \n     let server = config.recursive.then(|| {\n-        let _ = fs::remove_dir_all(\"target/lintcheck/shared_target_dir/recursive\");\n+        let _: io::Result<()> = fs::remove_dir_all(\"target/lintcheck/shared_target_dir/recursive\");\n \n         LintcheckServer::spawn(recursive_options)\n     });\n@@ -689,7 +689,7 @@ fn main() {\n     write!(text, \"{}\", all_msgs.join(\"\")).unwrap();\n     text.push_str(\"\\n\\n### ICEs:\\n\");\n     for (cratename, msg) in &ices {\n-        let _ = write!(text, \"{cratename}: '{msg}'\");\n+        let _: fmt::Result = write!(text, \"{cratename}: '{msg}'\");\n     }\n \n     println!(\"Writing logs to {}\", config.lintcheck_results_path.display());"}, {"sha": "bcb33c5c7e37e713f2b04e0d276e2d16eda5f44a", "filename": "tests/ui/let_underscore_untyped.rs", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/99d4ea4f399a81f09a04045ac3f0bce022d0f1ba/tests%2Fui%2Flet_underscore_untyped.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99d4ea4f399a81f09a04045ac3f0bce022d0f1ba/tests%2Fui%2Flet_underscore_untyped.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_underscore_untyped.rs?ref=99d4ea4f399a81f09a04045ac3f0bce022d0f1ba", "patch": "@@ -0,0 +1,54 @@\n+#![allow(unused)]\n+#![warn(clippy::let_underscore_untyped)]\n+\n+use std::future::Future;\n+use std::{boxed::Box, fmt::Display};\n+\n+fn a() -> u32 {\n+    1\n+}\n+\n+fn b<T>(x: T) -> T {\n+    x\n+}\n+\n+fn c() -> impl Display {\n+    1\n+}\n+\n+fn d(x: &u32) -> &u32 {\n+    x\n+}\n+\n+fn e() -> Result<u32, ()> {\n+    Ok(1)\n+}\n+\n+fn f() -> Box<dyn Display> {\n+    Box::new(1)\n+}\n+\n+fn main() {\n+    let _ = a();\n+    let _ = b(1);\n+    let _ = c();\n+    let _ = d(&1);\n+    let _ = e();\n+    let _ = f();\n+\n+    _ = a();\n+    _ = b(1);\n+    _ = c();\n+    _ = d(&1);\n+    _ = e();\n+    _ = f();\n+\n+    let _: u32 = a();\n+    let _: u32 = b(1);\n+    let _: &u32 = d(&1);\n+    let _: Result<_, _> = e();\n+    let _: Box<_> = f();\n+\n+    #[allow(clippy::let_underscore_untyped)]\n+    let _ = a();\n+}"}, {"sha": "36c3d1214d6b3e1831a5b605fdf1e351466e7b4f", "filename": "tests/ui/let_underscore_untyped.stderr", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/99d4ea4f399a81f09a04045ac3f0bce022d0f1ba/tests%2Fui%2Flet_underscore_untyped.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99d4ea4f399a81f09a04045ac3f0bce022d0f1ba/tests%2Fui%2Flet_underscore_untyped.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_underscore_untyped.stderr?ref=99d4ea4f399a81f09a04045ac3f0bce022d0f1ba", "patch": "@@ -0,0 +1,51 @@\n+error: non-binding `let` without a type annotation\n+  --> $DIR/let_underscore_untyped.rs:32:5\n+   |\n+LL |     let _ = a();\n+   |     ^^^^^^^^^^^^\n+   |\n+   = help: consider adding a type annotation or removing the `let` keyword\n+   = note: `-D clippy::let-underscore-untyped` implied by `-D warnings`\n+\n+error: non-binding `let` without a type annotation\n+  --> $DIR/let_underscore_untyped.rs:33:5\n+   |\n+LL |     let _ = b(1);\n+   |     ^^^^^^^^^^^^^\n+   |\n+   = help: consider adding a type annotation or removing the `let` keyword\n+\n+error: non-binding `let` without a type annotation\n+  --> $DIR/let_underscore_untyped.rs:34:5\n+   |\n+LL |     let _ = c();\n+   |     ^^^^^^^^^^^^\n+   |\n+   = help: consider adding a type annotation or removing the `let` keyword\n+\n+error: non-binding `let` without a type annotation\n+  --> $DIR/let_underscore_untyped.rs:35:5\n+   |\n+LL |     let _ = d(&1);\n+   |     ^^^^^^^^^^^^^^\n+   |\n+   = help: consider adding a type annotation or removing the `let` keyword\n+\n+error: non-binding `let` without a type annotation\n+  --> $DIR/let_underscore_untyped.rs:36:5\n+   |\n+LL |     let _ = e();\n+   |     ^^^^^^^^^^^^\n+   |\n+   = help: consider adding a type annotation or removing the `let` keyword\n+\n+error: non-binding `let` without a type annotation\n+  --> $DIR/let_underscore_untyped.rs:37:5\n+   |\n+LL |     let _ = f();\n+   |     ^^^^^^^^^^^^\n+   |\n+   = help: consider adding a type annotation or removing the `let` keyword\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "8e2f11389f8988442f8bcbf80fc724be571d5809", "filename": "tests/ui/map_flatten_fixable.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/99d4ea4f399a81f09a04045ac3f0bce022d0f1ba/tests%2Fui%2Fmap_flatten_fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/99d4ea4f399a81f09a04045ac3f0bce022d0f1ba/tests%2Fui%2Fmap_flatten_fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_flatten_fixable.fixed?ref=99d4ea4f399a81f09a04045ac3f0bce022d0f1ba", "patch": "@@ -1,6 +1,7 @@\n // run-rustfix\n \n #![warn(clippy::all, clippy::pedantic)]\n+#![allow(clippy::let_underscore_untyped)]\n #![allow(clippy::missing_docs_in_private_items)]\n #![allow(clippy::map_identity)]\n #![allow(clippy::redundant_closure)]"}, {"sha": "a783a99c4ffd39907be0348b289af6c702bdbfe8", "filename": "tests/ui/map_flatten_fixable.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/99d4ea4f399a81f09a04045ac3f0bce022d0f1ba/tests%2Fui%2Fmap_flatten_fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99d4ea4f399a81f09a04045ac3f0bce022d0f1ba/tests%2Fui%2Fmap_flatten_fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_flatten_fixable.rs?ref=99d4ea4f399a81f09a04045ac3f0bce022d0f1ba", "patch": "@@ -1,6 +1,7 @@\n // run-rustfix\n \n #![warn(clippy::all, clippy::pedantic)]\n+#![allow(clippy::let_underscore_untyped)]\n #![allow(clippy::missing_docs_in_private_items)]\n #![allow(clippy::map_identity)]\n #![allow(clippy::redundant_closure)]"}, {"sha": "c91f0b9ae94fec2626997de308d60c006d6ffaa4", "filename": "tests/ui/map_flatten_fixable.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/99d4ea4f399a81f09a04045ac3f0bce022d0f1ba/tests%2Fui%2Fmap_flatten_fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99d4ea4f399a81f09a04045ac3f0bce022d0f1ba/tests%2Fui%2Fmap_flatten_fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_flatten_fixable.stderr?ref=99d4ea4f399a81f09a04045ac3f0bce022d0f1ba", "patch": "@@ -1,49 +1,49 @@\n error: called `map(..).flatten()` on `Iterator`\n-  --> $DIR/map_flatten_fixable.rs:17:47\n+  --> $DIR/map_flatten_fixable.rs:18:47\n    |\n LL |     let _: Vec<_> = vec![5_i8; 6].into_iter().map(option_id).flatten().collect();\n    |                                               ^^^^^^^^^^^^^^^^^^^^^^^^ help: try replacing `map` with `filter_map` and remove the `.flatten()`: `filter_map(option_id)`\n    |\n    = note: `-D clippy::map-flatten` implied by `-D warnings`\n \n error: called `map(..).flatten()` on `Iterator`\n-  --> $DIR/map_flatten_fixable.rs:18:47\n+  --> $DIR/map_flatten_fixable.rs:19:47\n    |\n LL |     let _: Vec<_> = vec![5_i8; 6].into_iter().map(option_id_ref).flatten().collect();\n    |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try replacing `map` with `filter_map` and remove the `.flatten()`: `filter_map(option_id_ref)`\n \n error: called `map(..).flatten()` on `Iterator`\n-  --> $DIR/map_flatten_fixable.rs:19:47\n+  --> $DIR/map_flatten_fixable.rs:20:47\n    |\n LL |     let _: Vec<_> = vec![5_i8; 6].into_iter().map(option_id_closure).flatten().collect();\n    |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try replacing `map` with `filter_map` and remove the `.flatten()`: `filter_map(option_id_closure)`\n \n error: called `map(..).flatten()` on `Iterator`\n-  --> $DIR/map_flatten_fixable.rs:20:47\n+  --> $DIR/map_flatten_fixable.rs:21:47\n    |\n LL |     let _: Vec<_> = vec![5_i8; 6].into_iter().map(|x| x.checked_add(1)).flatten().collect();\n    |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try replacing `map` with `filter_map` and remove the `.flatten()`: `filter_map(|x| x.checked_add(1))`\n \n error: called `map(..).flatten()` on `Iterator`\n-  --> $DIR/map_flatten_fixable.rs:23:47\n+  --> $DIR/map_flatten_fixable.rs:24:47\n    |\n LL |     let _: Vec<_> = vec![5_i8; 6].into_iter().map(|x| 0..x).flatten().collect();\n    |                                               ^^^^^^^^^^^^^^^^^^^^^^^ help: try replacing `map` with `flat_map` and remove the `.flatten()`: `flat_map(|x| 0..x)`\n \n error: called `map(..).flatten()` on `Option`\n-  --> $DIR/map_flatten_fixable.rs:26:40\n+  --> $DIR/map_flatten_fixable.rs:27:40\n    |\n LL |     let _: Option<_> = (Some(Some(1))).map(|x| x).flatten();\n    |                                        ^^^^^^^^^^^^^^^^^^^^ help: try replacing `map` with `and_then` and remove the `.flatten()`: `and_then(|x| x)`\n \n error: called `map(..).flatten()` on `Result`\n-  --> $DIR/map_flatten_fixable.rs:29:42\n+  --> $DIR/map_flatten_fixable.rs:30:42\n    |\n LL |     let _: Result<_, &str> = (Ok(Ok(1))).map(|x| x).flatten();\n    |                                          ^^^^^^^^^^^^^^^^^^^^ help: try replacing `map` with `and_then` and remove the `.flatten()`: `and_then(|x| x)`\n \n error: called `map(..).flatten()` on `Iterator`\n-  --> $DIR/map_flatten_fixable.rs:38:10\n+  --> $DIR/map_flatten_fixable.rs:39:10\n    |\n LL |           .map(|n| match n {\n    |  __________^\n@@ -72,7 +72,7 @@ LL ~         });\n    |\n \n error: called `map(..).flatten()` on `Option`\n-  --> $DIR/map_flatten_fixable.rs:58:10\n+  --> $DIR/map_flatten_fixable.rs:59:10\n    |\n LL |           .map(|_| {\n    |  __________^"}, {"sha": "1519e4da9348a482ca2fda1dd94e7373b722e173", "filename": "tests/ui/methods.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/99d4ea4f399a81f09a04045ac3f0bce022d0f1ba/tests%2Fui%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99d4ea4f399a81f09a04045ac3f0bce022d0f1ba/tests%2Fui%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.rs?ref=99d4ea4f399a81f09a04045ac3f0bce022d0f1ba", "patch": "@@ -4,6 +4,7 @@\n #![allow(\n     clippy::disallowed_names,\n     clippy::default_trait_access,\n+    clippy::let_underscore_untyped,\n     clippy::missing_docs_in_private_items,\n     clippy::missing_safety_doc,\n     clippy::non_ascii_literal,"}, {"sha": "4643e09e2702835ac9803b6050b49f1ba7267171", "filename": "tests/ui/methods.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/99d4ea4f399a81f09a04045ac3f0bce022d0f1ba/tests%2Fui%2Fmethods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99d4ea4f399a81f09a04045ac3f0bce022d0f1ba/tests%2Fui%2Fmethods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.stderr?ref=99d4ea4f399a81f09a04045ac3f0bce022d0f1ba", "patch": "@@ -1,5 +1,5 @@\n error: methods called `new` usually return `Self`\n-  --> $DIR/methods.rs:104:5\n+  --> $DIR/methods.rs:105:5\n    |\n LL | /     fn new() -> i32 {\n LL | |         0\n@@ -9,7 +9,7 @@ LL | |     }\n    = note: `-D clippy::new-ret-no-self` implied by `-D warnings`\n \n error: called `filter(..).next()` on an `Iterator`. This is more succinctly expressed by calling `.find(..)` instead\n-  --> $DIR/methods.rs:125:13\n+  --> $DIR/methods.rs:126:13\n    |\n LL |       let _ = v.iter().filter(|&x| {\n    |  _____________^"}]}