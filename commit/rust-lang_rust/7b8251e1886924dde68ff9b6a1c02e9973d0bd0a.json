{"sha": "7b8251e1886924dde68ff9b6a1c02e9973d0bd0a", "node_id": "C_kwDOAAsO6NoAKDdiODI1MWUxODg2OTI0ZGRlNjhmZjliNmExYzAyZTk5NzNkMGJkMGE", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2023-01-17T02:52:43Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2023-01-17T02:52:43Z"}, "message": "Account for method call and indexing when looking for inner-most path in expression", "tree": {"sha": "b59f9b76537a3c299aada7cc9c6cf598132e0afa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b59f9b76537a3c299aada7cc9c6cf598132e0afa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b8251e1886924dde68ff9b6a1c02e9973d0bd0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b8251e1886924dde68ff9b6a1c02e9973d0bd0a", "html_url": "https://github.com/rust-lang/rust/commit/7b8251e1886924dde68ff9b6a1c02e9973d0bd0a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b8251e1886924dde68ff9b6a1c02e9973d0bd0a/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6111e8d232964f11eb3540ed7228de6e13782df", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6111e8d232964f11eb3540ed7228de6e13782df", "html_url": "https://github.com/rust-lang/rust/commit/c6111e8d232964f11eb3540ed7228de6e13782df"}], "stats": {"total": 48, "additions": 40, "deletions": 8}, "files": [{"sha": "19855075ced80d7383d01be49f5d4e5dc946aedd", "filename": "compiler/rustc_borrowck/src/diagnostics/explain_borrow.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b8251e1886924dde68ff9b6a1c02e9973d0bd0a/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fexplain_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b8251e1886924dde68ff9b6a1c02e9973d0bd0a/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fexplain_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fexplain_borrow.rs?ref=7b8251e1886924dde68ff9b6a1c02e9973d0bd0a", "patch": "@@ -77,7 +77,9 @@ impl<'tcx> BorrowExplanation<'tcx> {\n                 if let Some(mut expr) = expr_finder.result {\n                     while let hir::ExprKind::AddrOf(_, _, inner)\n                         | hir::ExprKind::Unary(hir::UnOp::Deref, inner)\n-                        | hir::ExprKind::Field(inner, _) = &expr.kind\n+                        | hir::ExprKind::Field(inner, _)\n+                        | hir::ExprKind::MethodCall(_, inner, _, _)\n+                        | hir::ExprKind::Index(inner, _) = &expr.kind\n                     {\n                         expr = inner;\n                     }"}, {"sha": "5140b58934a5cf34467d7f02ece576f315ba09e2", "filename": "tests/ui/box/leak-alloc.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b8251e1886924dde68ff9b6a1c02e9973d0bd0a/tests%2Fui%2Fbox%2Fleak-alloc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b8251e1886924dde68ff9b6a1c02e9973d0bd0a/tests%2Fui%2Fbox%2Fleak-alloc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox%2Fleak-alloc.stderr?ref=7b8251e1886924dde68ff9b6a1c02e9973d0bd0a", "patch": "@@ -1,6 +1,8 @@\n error[E0505]: cannot move out of `alloc` because it is borrowed\n   --> $DIR/leak-alloc.rs:26:10\n    |\n+LL |     let alloc = Alloc {};\n+   |         ----- binding `alloc` declared here\n LL |     let boxed = Box::new_in(10, alloc.by_ref());\n    |                                 -------------- borrow of `alloc` occurs here\n LL |     let theref = Box::leak(boxed);"}, {"sha": "4585b22974cdbc91ae3f80dfaef8ae88853f34a7", "filename": "tests/ui/dropck/drop-with-active-borrows-1.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b8251e1886924dde68ff9b6a1c02e9973d0bd0a/tests%2Fui%2Fdropck%2Fdrop-with-active-borrows-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b8251e1886924dde68ff9b6a1c02e9973d0bd0a/tests%2Fui%2Fdropck%2Fdrop-with-active-borrows-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdropck%2Fdrop-with-active-borrows-1.stderr?ref=7b8251e1886924dde68ff9b6a1c02e9973d0bd0a", "patch": "@@ -1,6 +1,8 @@\n error[E0505]: cannot move out of `a` because it is borrowed\n   --> $DIR/drop-with-active-borrows-1.rs:4:10\n    |\n+LL |     let a = \"\".to_string();\n+   |         - binding `a` declared here\n LL |     let b: Vec<&str> = a.lines().collect();\n    |                        --------- borrow of `a` occurs here\n LL |     drop(a);"}, {"sha": "b9a3a124acb61d91be4246ad201094fdbf452786", "filename": "tests/ui/generator/dropck.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7b8251e1886924dde68ff9b6a1c02e9973d0bd0a/tests%2Fui%2Fgenerator%2Fdropck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b8251e1886924dde68ff9b6a1c02e9973d0bd0a/tests%2Fui%2Fgenerator%2Fdropck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fdropck.stderr?ref=7b8251e1886924dde68ff9b6a1c02e9973d0bd0a", "patch": "@@ -1,6 +1,9 @@\n error[E0597]: `*cell` does not live long enough\n   --> $DIR/dropck.rs:10:40\n    |\n+LL |     let (mut gen, cell);\n+   |                   ---- binding `cell` declared here\n+LL |     cell = Box::new(RefCell::new(0));\n LL |     let ref_ = Box::leak(Box::new(Some(cell.borrow_mut())));\n    |                                        ^^^^^^^^^^^^^^^^^ borrowed value does not live long enough\n ..."}, {"sha": "2d3b48832c527c83f1c878d47636ac4f887b3da7", "filename": "tests/ui/issues/issue-52126-assign-op-invariance.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b8251e1886924dde68ff9b6a1c02e9973d0bd0a/tests%2Fui%2Fissues%2Fissue-52126-assign-op-invariance.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b8251e1886924dde68ff9b6a1c02e9973d0bd0a/tests%2Fui%2Fissues%2Fissue-52126-assign-op-invariance.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-52126-assign-op-invariance.stderr?ref=7b8251e1886924dde68ff9b6a1c02e9973d0bd0a", "patch": "@@ -1,6 +1,8 @@\n error[E0597]: `line` does not live long enough\n   --> $DIR/issue-52126-assign-op-invariance.rs:34:28\n    |\n+LL |     for line in vec![\"123456789\".to_string(), \"12345678\".to_string()] {\n+   |         ---- binding `line` declared here\n LL |         let v: Vec<&str> = line.split_whitespace().collect();\n    |                            ^^^^^^^^^^^^^^^^^^^^^^^ borrowed value does not live long enough\n ..."}, {"sha": "520b2ce50526f9044cd5e720c270038beb453a86", "filename": "tests/ui/macros/format-args-temporaries-in-write.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b8251e1886924dde68ff9b6a1c02e9973d0bd0a/tests%2Fui%2Fmacros%2Fformat-args-temporaries-in-write.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b8251e1886924dde68ff9b6a1c02e9973d0bd0a/tests%2Fui%2Fmacros%2Fformat-args-temporaries-in-write.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacros%2Fformat-args-temporaries-in-write.stderr?ref=7b8251e1886924dde68ff9b6a1c02e9973d0bd0a", "patch": "@@ -1,6 +1,8 @@\n error[E0597]: `mutex` does not live long enough\n   --> $DIR/format-args-temporaries-in-write.rs:41:27\n    |\n+LL |         let mutex = Mutex;\n+   |             ----- binding `mutex` declared here\n LL |         write!(Out, \"{}\", mutex.lock()) /* no semicolon */\n    |                           ^^^^^^^^^^^^\n    |                           |\n@@ -16,6 +18,8 @@ LL |     };\n error[E0597]: `mutex` does not live long enough\n   --> $DIR/format-args-temporaries-in-write.rs:47:29\n    |\n+LL |         let mutex = Mutex;\n+   |             ----- binding `mutex` declared here\n LL |         writeln!(Out, \"{}\", mutex.lock()) /* no semicolon */\n    |                             ^^^^^^^^^^^^\n    |                             |"}, {"sha": "0b3425f2b1a1cec9ffa14bf5c5a606d3cb9bf5ed", "filename": "tests/ui/match/issue-74050-end-span.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b8251e1886924dde68ff9b6a1c02e9973d0bd0a/tests%2Fui%2Fmatch%2Fissue-74050-end-span.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b8251e1886924dde68ff9b6a1c02e9973d0bd0a/tests%2Fui%2Fmatch%2Fissue-74050-end-span.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch%2Fissue-74050-end-span.stderr?ref=7b8251e1886924dde68ff9b6a1c02e9973d0bd0a", "patch": "@@ -4,6 +4,7 @@ error[E0597]: `arg` does not live long enough\n LL |     let _arg = match args.next() {\n    |         ---- borrow later stored here\n LL |         Some(arg) => {\n+   |              --- binding `arg` declared here\n LL |             match arg.to_str() {\n    |                   ^^^^^^^^^^^^ borrowed value does not live long enough\n ..."}, {"sha": "91d237b1d1a9085273d9778e9850ecc101c5423c", "filename": "tests/ui/moves/move-fn-self-receiver.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b8251e1886924dde68ff9b6a1c02e9973d0bd0a/tests%2Fui%2Fmoves%2Fmove-fn-self-receiver.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b8251e1886924dde68ff9b6a1c02e9973d0bd0a/tests%2Fui%2Fmoves%2Fmove-fn-self-receiver.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmoves%2Fmove-fn-self-receiver.stderr?ref=7b8251e1886924dde68ff9b6a1c02e9973d0bd0a", "patch": "@@ -75,6 +75,8 @@ LL |     fn use_pin_box_self(self: Pin<Box<Self>>) {}\n error[E0505]: cannot move out of `mut_foo` because it is borrowed\n   --> $DIR/move-fn-self-receiver.rs:50:5\n    |\n+LL |     let mut mut_foo = Foo;\n+   |         ----------- binding `mut_foo` declared here\n LL |     let ret = mut_foo.use_mut_self();\n    |               ---------------------- borrow of `mut_foo` occurs here\n LL |     mut_foo;"}, {"sha": "d41d462f2bcb0130bc4f032ddf223b7d3b29bd87", "filename": "tests/ui/nll/issue-54556-niconii.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7b8251e1886924dde68ff9b6a1c02e9973d0bd0a/tests%2Fui%2Fnll%2Fissue-54556-niconii.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b8251e1886924dde68ff9b6a1c02e9973d0bd0a/tests%2Fui%2Fnll%2Fissue-54556-niconii.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fissue-54556-niconii.stderr?ref=7b8251e1886924dde68ff9b6a1c02e9973d0bd0a", "patch": "@@ -1,6 +1,9 @@\n error[E0597]: `counter` does not live long enough\n   --> $DIR/issue-54556-niconii.rs:22:20\n    |\n+LL |     let counter = Mutex;\n+   |         ------- binding `counter` declared here\n+LL |\n LL |     if let Ok(_) = counter.lock() { }\n    |                    ^^^^^^^^^^^^^^\n    |                    |"}, {"sha": "ad556f281df126b5b48419044847fbd44d2ef781", "filename": "tests/ui/span/borrowck-let-suggestion-suffixes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b8251e1886924dde68ff9b6a1c02e9973d0bd0a/tests%2Fui%2Fspan%2Fborrowck-let-suggestion-suffixes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b8251e1886924dde68ff9b6a1c02e9973d0bd0a/tests%2Fui%2Fspan%2Fborrowck-let-suggestion-suffixes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspan%2Fborrowck-let-suggestion-suffixes.rs?ref=7b8251e1886924dde68ff9b6a1c02e9973d0bd0a", "patch": "@@ -8,6 +8,7 @@ fn f() {\n \n     {\n         let young = ['y'];       // statement 3\n+        //~^ NOTE binding `young` declared here\n \n         v2.push(&young[0]);      // statement 4\n         //~^ ERROR `young[_]` does not live long enough"}, {"sha": "545b235a552d18986f6810756dc92d5c330860bb", "filename": "tests/ui/span/borrowck-let-suggestion-suffixes.stderr", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7b8251e1886924dde68ff9b6a1c02e9973d0bd0a/tests%2Fui%2Fspan%2Fborrowck-let-suggestion-suffixes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b8251e1886924dde68ff9b6a1c02e9973d0bd0a/tests%2Fui%2Fspan%2Fborrowck-let-suggestion-suffixes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspan%2Fborrowck-let-suggestion-suffixes.stderr?ref=7b8251e1886924dde68ff9b6a1c02e9973d0bd0a", "patch": "@@ -1,6 +1,9 @@\n error[E0597]: `young[_]` does not live long enough\n-  --> $DIR/borrowck-let-suggestion-suffixes.rs:12:17\n+  --> $DIR/borrowck-let-suggestion-suffixes.rs:13:17\n    |\n+LL |         let young = ['y'];       // statement 3\n+   |             ----- binding `young` declared here\n+...\n LL |         v2.push(&young[0]);      // statement 4\n    |                 ^^^^^^^^^ borrowed value does not live long enough\n ...\n@@ -11,7 +14,7 @@ LL |     (v1, v2, v3, /* v4 is above. */ v5).use_ref();\n    |          -- borrow later used here\n \n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/borrowck-let-suggestion-suffixes.rs:19:14\n+  --> $DIR/borrowck-let-suggestion-suffixes.rs:20:14\n    |\n LL |     v3.push(&id('x'));           // statement 6\n    |              ^^^^^^^ - temporary value is freed at the end of this statement\n@@ -28,7 +31,7 @@ LL ~     v3.push(&binding);           // statement 6\n    |\n \n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/borrowck-let-suggestion-suffixes.rs:29:18\n+  --> $DIR/borrowck-let-suggestion-suffixes.rs:30:18\n    |\n LL |         v4.push(&id('y'));\n    |                  ^^^^^^^ - temporary value is freed at the end of this statement\n@@ -41,7 +44,7 @@ LL |         v4.use_ref();\n    = note: consider using a `let` binding to create a longer lived value\n \n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/borrowck-let-suggestion-suffixes.rs:40:14\n+  --> $DIR/borrowck-let-suggestion-suffixes.rs:41:14\n    |\n LL |     v5.push(&id('z'));\n    |              ^^^^^^^ - temporary value is freed at the end of this statement"}, {"sha": "281248626c82609a881e1caff5b1ce56b9bb3de5", "filename": "tests/ui/span/destructor-restrictions.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b8251e1886924dde68ff9b6a1c02e9973d0bd0a/tests%2Fui%2Fspan%2Fdestructor-restrictions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b8251e1886924dde68ff9b6a1c02e9973d0bd0a/tests%2Fui%2Fspan%2Fdestructor-restrictions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspan%2Fdestructor-restrictions.stderr?ref=7b8251e1886924dde68ff9b6a1c02e9973d0bd0a", "patch": "@@ -1,6 +1,8 @@\n error[E0597]: `*a` does not live long enough\n   --> $DIR/destructor-restrictions.rs:8:10\n    |\n+LL |         let a = Box::new(RefCell::new(4));\n+   |             - binding `a` declared here\n LL |         *a.borrow() + 1\n    |          ^^^^^^^^^^\n    |          |"}, {"sha": "e1a377203e2962551a4d7425ac5cb630201961e7", "filename": "tests/ui/span/issue-23338-locals-die-before-temps-of-body.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b8251e1886924dde68ff9b6a1c02e9973d0bd0a/tests%2Fui%2Fspan%2Fissue-23338-locals-die-before-temps-of-body.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b8251e1886924dde68ff9b6a1c02e9973d0bd0a/tests%2Fui%2Fspan%2Fissue-23338-locals-die-before-temps-of-body.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspan%2Fissue-23338-locals-die-before-temps-of-body.stderr?ref=7b8251e1886924dde68ff9b6a1c02e9973d0bd0a", "patch": "@@ -1,6 +1,8 @@\n error[E0597]: `y` does not live long enough\n   --> $DIR/issue-23338-locals-die-before-temps-of-body.rs:10:5\n    |\n+LL |     let y = x;\n+   |         - binding `y` declared here\n LL |     y.borrow().clone()\n    |     ^^^^^^^^^^\n    |     |\n@@ -22,6 +24,8 @@ LL |     let x = y.borrow().clone(); x\n error[E0597]: `y` does not live long enough\n   --> $DIR/issue-23338-locals-die-before-temps-of-body.rs:17:9\n    |\n+LL |         let y = x;\n+   |             - binding `y` declared here\n LL |         y.borrow().clone()\n    |         ^^^^^^^^^^\n    |         |"}, {"sha": "a0afd33f7c7c4c941616bf1b772a47fe775f53b4", "filename": "tests/ui/span/issue-40157.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7b8251e1886924dde68ff9b6a1c02e9973d0bd0a/tests%2Fui%2Fspan%2Fissue-40157.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b8251e1886924dde68ff9b6a1c02e9973d0bd0a/tests%2Fui%2Fspan%2Fissue-40157.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspan%2Fissue-40157.stderr?ref=7b8251e1886924dde68ff9b6a1c02e9973d0bd0a", "patch": "@@ -2,9 +2,10 @@ error[E0597]: `foo` does not live long enough\n   --> $DIR/issue-40157.rs:2:53\n    |\n LL |     {println!(\"{:?}\", match { let foo = vec![1, 2]; foo.get(1) } { x => x });}\n-   |                                                     ^^^^^^^^^^ - `foo` dropped here while still borrowed\n-   |                                                     |\n-   |                                                     borrowed value does not live long enough\n+   |                                   ---               ^^^^^^^^^^ - `foo` dropped here while still borrowed\n+   |                                   |                 |\n+   |                                   |                 borrowed value does not live long enough\n+   |                                   binding `foo` declared here\n \n error: aborting due to previous error\n "}]}