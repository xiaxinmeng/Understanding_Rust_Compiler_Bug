{"sha": "1b613ff9fcec4b4468de76779ccd37c7281e09b5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiNjEzZmY5ZmNlYzRiNDQ2OGRlNzY3NzljY2QzN2M3MjgxZTA5YjU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-01-30T03:59:52Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-01-30T06:14:08Z"}, "message": "librustc: Strdup unique strings instead of copying in byte by byte. Shaves 2MB off librustc at -O0.", "tree": {"sha": "22bc7903829928ad17cd5bc7203df6978e2731f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/22bc7903829928ad17cd5bc7203df6978e2731f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b613ff9fcec4b4468de76779ccd37c7281e09b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b613ff9fcec4b4468de76779ccd37c7281e09b5", "html_url": "https://github.com/rust-lang/rust/commit/1b613ff9fcec4b4468de76779ccd37c7281e09b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b613ff9fcec4b4468de76779ccd37c7281e09b5/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a47fa9b32f664beb4a50527e547c81cf6d6629bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/a47fa9b32f664beb4a50527e547c81cf6d6629bf", "html_url": "https://github.com/rust-lang/rust/commit/a47fa9b32f664beb4a50527e547c81cf6d6629bf"}], "stats": {"total": 52, "additions": 45, "deletions": 7}, "files": [{"sha": "f9de0bc91fd5a417b367d506a286ab399cddf77b", "filename": "src/libcore/rt.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1b613ff9fcec4b4468de76779ccd37c7281e09b5/src%2Flibcore%2Frt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b613ff9fcec4b4468de76779ccd37c7281e09b5/src%2Flibcore%2Frt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt.rs?ref=1b613ff9fcec4b4468de76779ccd37c7281e09b5", "patch": "@@ -14,7 +14,7 @@\n //! Runtime calls emitted by the compiler.\n \n use cast::transmute;\n-use libc::{c_char, c_void, size_t, uintptr_t};\n+use libc::{c_char, c_uchar, c_void, size_t, uintptr_t};\n use managed::raw::BoxRepr;\n use str;\n use sys;\n@@ -123,6 +123,11 @@ pub unsafe fn check_not_borrowed(a: *u8) {\n     }\n }\n \n+#[lang=\"strdup_uniq\"]\n+pub unsafe fn strdup_uniq(ptr: *c_uchar, len: uint) -> ~str {\n+    str::raw::from_buf_len(ptr, len)\n+}\n+\n // Local Variables:\n // mode: rust;\n // fill-column: 78;"}, {"sha": "dcfa1755d09bba1ff46578568d6c82b8356fcc84", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1b613ff9fcec4b4468de76779ccd37c7281e09b5/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b613ff9fcec4b4468de76779ccd37c7281e09b5/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=1b613ff9fcec4b4468de76779ccd37c7281e09b5", "patch": "@@ -74,16 +74,17 @@ pub enum LangItem {\n     BorrowAsImmFnLangItem,      // 30\n     ReturnToMutFnLangItem,      // 31\n     CheckNotBorrowedFnLangItem, // 32\n+    StrDupUniqFnLangItem,       // 33\n }\n \n struct LanguageItems {\n-    items: [ Option<def_id> * 33 ]\n+    items: [ Option<def_id> * 34 ]\n }\n \n impl LanguageItems {\n     static pub fn new() -> LanguageItems {\n         LanguageItems {\n-            items: [ None, ..33 ]\n+            items: [ None, ..34 ]\n         }\n     }\n \n@@ -133,6 +134,7 @@ impl LanguageItems {\n             30 => \"borrow_as_imm\",\n             31 => \"return_to_mut\",\n             32 => \"check_not_borrowed\",\n+            33 => \"strdup_uniq\",\n \n             _ => \"???\"\n         }\n@@ -243,6 +245,9 @@ impl LanguageItems {\n     pub fn check_not_borrowed_fn(&const self) -> def_id {\n         self.items[CheckNotBorrowedFnLangItem as uint].get()\n     }\n+    pub fn strdup_uniq_fn(&const self) -> def_id {\n+        self.items[StrDupUniqFnLangItem as uint].get()\n+    }\n }\n \n fn LanguageItemCollector(crate: @crate,\n@@ -289,6 +294,7 @@ fn LanguageItemCollector(crate: @crate,\n     item_refs.insert(~\"return_to_mut\", ReturnToMutFnLangItem as uint);\n     item_refs.insert(~\"check_not_borrowed\",\n                      CheckNotBorrowedFnLangItem as uint);\n+    item_refs.insert(~\"strdup_uniq\", StrDupUniqFnLangItem as uint);\n \n     LanguageItemCollector {\n         crate: crate,"}, {"sha": "54e6d25718b74a88ad725bd8b0ee2e8ed643fdfc", "filename": "src/librustc/middle/trans/tvec.rs", "status": "modified", "additions": 31, "deletions": 4, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/1b613ff9fcec4b4468de76779ccd37c7281e09b5/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b613ff9fcec4b4468de76779ccd37c7281e09b5/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs?ref=1b613ff9fcec4b4468de76779ccd37c7281e09b5", "patch": "@@ -276,10 +276,9 @@ fn trans_lit_str(bcx: block,\n \n \n fn trans_uniq_or_managed_vstore(bcx: block,\n-                            heap: heap,\n-                            vstore_expr: @ast::expr,\n-                            content_expr: @ast::expr) -> DatumBlock\n-{\n+                                heap: heap,\n+                                vstore_expr: @ast::expr,\n+                                content_expr: @ast::expr) -> DatumBlock {\n     //!\n     //\n     // @[...] or ~[...] (also @\"...\" or ~\"...\") allocate boxes in the\n@@ -289,6 +288,34 @@ fn trans_uniq_or_managed_vstore(bcx: block,\n            bcx.expr_to_str(vstore_expr), heap);\n     let _indenter = indenter();\n \n+    // Handle ~\"\".\n+    match heap {\n+        heap_exchange => {\n+            match content_expr.node {\n+                ast::expr_lit(@ast::spanned {\n+                    node: ast::lit_str(s), _\n+                }) => {\n+                    let llptrval = C_cstr(bcx.ccx(), copy *s);\n+                    let llptrval = PointerCast(bcx, llptrval, T_ptr(T_i8()));\n+                    let llsizeval = C_uint(bcx.ccx(), s.len());\n+                    let typ = ty::mk_estr(bcx.tcx(), ty::vstore_uniq);\n+                    let lldestval = datum::scratch_datum(bcx, typ, false);\n+                    let bcx = callee::trans_rtcall_or_lang_call(\n+                        bcx,\n+                        bcx.tcx().lang_items.strdup_uniq_fn(),\n+                        ~[ llptrval, llsizeval ],\n+                        expr::SaveIn(lldestval.to_ref_llval(bcx)));\n+                    return datum::DatumBlock {\n+                        bcx: bcx,\n+                        datum: lldestval\n+                    };\n+                }\n+                _ => {}\n+            }\n+        }\n+        heap_shared => {}\n+    }\n+\n     let vt = vec_types_from_expr(bcx, vstore_expr);\n     let count = elements_required(bcx, content_expr);\n "}]}