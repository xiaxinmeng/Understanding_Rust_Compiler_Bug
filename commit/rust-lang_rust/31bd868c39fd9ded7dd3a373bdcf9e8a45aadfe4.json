{"sha": "31bd868c39fd9ded7dd3a373bdcf9e8a45aadfe4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxYmQ4NjhjMzlmZDlkZWQ3ZGQzYTM3M2JkY2Y5ZThhNDVhYWRmZTQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-12T21:50:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-12T21:50:27Z"}, "message": "Auto merge of #85218 - kornelski:pointerinline, r=scottmcm\n\n#[inline(always)] on basic pointer methods\n\nRetryng #85201 with only inlining pointer methods. The goal is to make pointers behave just like pointers in O0, mainly to reduce overhead in debug builds.\n\ncc `@scottmcm`", "tree": {"sha": "0c563a7d89e10b9f38b6a068c0cfcfc555fce49e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c563a7d89e10b9f38b6a068c0cfcfc555fce49e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/31bd868c39fd9ded7dd3a373bdcf9e8a45aadfe4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/31bd868c39fd9ded7dd3a373bdcf9e8a45aadfe4", "html_url": "https://github.com/rust-lang/rust/commit/31bd868c39fd9ded7dd3a373bdcf9e8a45aadfe4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/31bd868c39fd9ded7dd3a373bdcf9e8a45aadfe4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21e92b97309e15b16bc6b8dd4509d5e3ad4c430d", "url": "https://api.github.com/repos/rust-lang/rust/commits/21e92b97309e15b16bc6b8dd4509d5e3ad4c430d", "html_url": "https://github.com/rust-lang/rust/commit/21e92b97309e15b16bc6b8dd4509d5e3ad4c430d"}, {"sha": "377374071919d9c00b5cf9cfcad9292f9168e329", "url": "https://api.github.com/repos/rust-lang/rust/commits/377374071919d9c00b5cf9cfcad9292f9168e329", "html_url": "https://github.com/rust-lang/rust/commit/377374071919d9c00b5cf9cfcad9292f9168e329"}], "stats": {"total": 50, "additions": 25, "deletions": 25}, "files": [{"sha": "750279ac0dbdc8e0d493122446e5725eab3098c5", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/31bd868c39fd9ded7dd3a373bdcf9e8a45aadfe4/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31bd868c39fd9ded7dd3a373bdcf9e8a45aadfe4/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=31bd868c39fd9ded7dd3a373bdcf9e8a45aadfe4", "patch": "@@ -42,7 +42,7 @@ impl<T: ?Sized> *mut T {\n     /// Casts to a pointer of another type.\n     #[stable(feature = \"ptr_cast\", since = \"1.38.0\")]\n     #[rustc_const_stable(feature = \"const_ptr_cast\", since = \"1.38.0\")]\n-    #[inline]\n+    #[inline(always)]\n     pub const fn cast<U>(self) -> *mut U {\n         self as _\n     }\n@@ -551,7 +551,7 @@ impl<T: ?Sized> *mut T {\n     /// ```\n     #[stable(feature = \"ptr_offset_from\", since = \"1.47.0\")]\n     #[rustc_const_unstable(feature = \"const_ptr_offset_from\", issue = \"41079\")]\n-    #[inline]\n+    #[inline(always)]\n     pub const unsafe fn offset_from(self, origin: *const T) -> isize\n     where\n         T: Sized,\n@@ -859,7 +859,7 @@ impl<T: ?Sized> *mut T {\n     /// [`ptr::read`]: crate::ptr::read()\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[rustc_const_unstable(feature = \"const_ptr_read\", issue = \"80377\")]\n-    #[inline]\n+    #[inline(always)]\n     pub const unsafe fn read(self) -> T\n     where\n         T: Sized,\n@@ -879,7 +879,7 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// [`ptr::read_volatile`]: crate::ptr::read_volatile()\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n-    #[inline]\n+    #[inline(always)]\n     pub unsafe fn read_volatile(self) -> T\n     where\n         T: Sized,\n@@ -898,7 +898,7 @@ impl<T: ?Sized> *mut T {\n     /// [`ptr::read_unaligned`]: crate::ptr::read_unaligned()\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[rustc_const_unstable(feature = \"const_ptr_read\", issue = \"80377\")]\n-    #[inline]\n+    #[inline(always)]\n     pub const unsafe fn read_unaligned(self) -> T\n     where\n         T: Sized,\n@@ -917,7 +917,7 @@ impl<T: ?Sized> *mut T {\n     /// [`ptr::copy`]: crate::ptr::copy()\n     #[rustc_const_unstable(feature = \"const_intrinsic_copy\", issue = \"80697\")]\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n-    #[inline]\n+    #[inline(always)]\n     pub const unsafe fn copy_to(self, dest: *mut T, count: usize)\n     where\n         T: Sized,\n@@ -936,7 +936,7 @@ impl<T: ?Sized> *mut T {\n     /// [`ptr::copy_nonoverlapping`]: crate::ptr::copy_nonoverlapping()\n     #[rustc_const_unstable(feature = \"const_intrinsic_copy\", issue = \"80697\")]\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n-    #[inline]\n+    #[inline(always)]\n     pub const unsafe fn copy_to_nonoverlapping(self, dest: *mut T, count: usize)\n     where\n         T: Sized,\n@@ -955,7 +955,7 @@ impl<T: ?Sized> *mut T {\n     /// [`ptr::copy`]: crate::ptr::copy()\n     #[rustc_const_unstable(feature = \"const_intrinsic_copy\", issue = \"80697\")]\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n-    #[inline]\n+    #[inline(always)]\n     pub const unsafe fn copy_from(self, src: *const T, count: usize)\n     where\n         T: Sized,\n@@ -974,7 +974,7 @@ impl<T: ?Sized> *mut T {\n     /// [`ptr::copy_nonoverlapping`]: crate::ptr::copy_nonoverlapping()\n     #[rustc_const_unstable(feature = \"const_intrinsic_copy\", issue = \"80697\")]\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n-    #[inline]\n+    #[inline(always)]\n     pub const unsafe fn copy_from_nonoverlapping(self, src: *const T, count: usize)\n     where\n         T: Sized,\n@@ -989,7 +989,7 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// [`ptr::drop_in_place`]: crate::ptr::drop_in_place()\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n-    #[inline]\n+    #[inline(always)]\n     pub unsafe fn drop_in_place(self) {\n         // SAFETY: the caller must uphold the safety contract for `drop_in_place`.\n         unsafe { drop_in_place(self) }\n@@ -1003,7 +1003,7 @@ impl<T: ?Sized> *mut T {\n     /// [`ptr::write`]: crate::ptr::write()\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[rustc_const_unstable(feature = \"const_ptr_write\", issue = \"none\")]\n-    #[inline]\n+    #[inline(always)]\n     pub const unsafe fn write(self, val: T)\n     where\n         T: Sized,\n@@ -1019,7 +1019,7 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// [`ptr::write_bytes`]: crate::ptr::write_bytes()\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n-    #[inline]\n+    #[inline(always)]\n     pub unsafe fn write_bytes(self, val: u8, count: usize)\n     where\n         T: Sized,\n@@ -1039,7 +1039,7 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// [`ptr::write_volatile`]: crate::ptr::write_volatile()\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n-    #[inline]\n+    #[inline(always)]\n     pub unsafe fn write_volatile(self, val: T)\n     where\n         T: Sized,\n@@ -1058,7 +1058,7 @@ impl<T: ?Sized> *mut T {\n     /// [`ptr::write_unaligned`]: crate::ptr::write_unaligned()\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[rustc_const_unstable(feature = \"const_ptr_write\", issue = \"none\")]\n-    #[inline]\n+    #[inline(always)]\n     pub const unsafe fn write_unaligned(self, val: T)\n     where\n         T: Sized,\n@@ -1074,7 +1074,7 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// [`ptr::replace`]: crate::ptr::replace()\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n-    #[inline]\n+    #[inline(always)]\n     pub unsafe fn replace(self, src: T) -> T\n     where\n         T: Sized,\n@@ -1091,7 +1091,7 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// [`ptr::swap`]: crate::ptr::swap()\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n-    #[inline]\n+    #[inline(always)]\n     pub unsafe fn swap(self, with: *mut T)\n     where\n         T: Sized,\n@@ -1170,7 +1170,7 @@ impl<T> *mut [T] {\n     /// let slice: *mut [i8] = ptr::slice_from_raw_parts_mut(ptr::null_mut(), 3);\n     /// assert_eq!(slice.len(), 3);\n     /// ```\n-    #[inline]\n+    #[inline(always)]\n     #[unstable(feature = \"slice_ptr_len\", issue = \"71146\")]\n     #[rustc_const_unstable(feature = \"const_slice_ptr_len\", issue = \"71146\")]\n     pub const fn len(self) -> usize {\n@@ -1190,7 +1190,7 @@ impl<T> *mut [T] {\n     /// let slice: *mut [i8] = ptr::slice_from_raw_parts_mut(ptr::null_mut(), 3);\n     /// assert_eq!(slice.as_mut_ptr(), 0 as *mut i8);\n     /// ```\n-    #[inline]\n+    #[inline(always)]\n     #[unstable(feature = \"slice_ptr_get\", issue = \"74265\")]\n     #[rustc_const_unstable(feature = \"slice_ptr_get\", issue = \"74265\")]\n     pub const fn as_mut_ptr(self) -> *mut T {\n@@ -1217,7 +1217,7 @@ impl<T> *mut [T] {\n     /// }\n     /// ```\n     #[unstable(feature = \"slice_ptr_get\", issue = \"74265\")]\n-    #[inline]\n+    #[inline(always)]\n     pub unsafe fn get_unchecked_mut<I>(self, index: I) -> *mut I::Output\n     where\n         I: SliceIndex<[T]>,\n@@ -1332,7 +1332,7 @@ impl<T> *mut [T] {\n // Equality for pointers\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized> PartialEq for *mut T {\n-    #[inline]\n+    #[inline(always)]\n     fn eq(&self, other: &*mut T) -> bool {\n         *self == *other\n     }\n@@ -1357,27 +1357,27 @@ impl<T: ?Sized> Ord for *mut T {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized> PartialOrd for *mut T {\n-    #[inline]\n+    #[inline(always)]\n     fn partial_cmp(&self, other: &*mut T) -> Option<Ordering> {\n         Some(self.cmp(other))\n     }\n \n-    #[inline]\n+    #[inline(always)]\n     fn lt(&self, other: &*mut T) -> bool {\n         *self < *other\n     }\n \n-    #[inline]\n+    #[inline(always)]\n     fn le(&self, other: &*mut T) -> bool {\n         *self <= *other\n     }\n \n-    #[inline]\n+    #[inline(always)]\n     fn gt(&self, other: &*mut T) -> bool {\n         *self > *other\n     }\n \n-    #[inline]\n+    #[inline(always)]\n     fn ge(&self, other: &*mut T) -> bool {\n         *self >= *other\n     }"}]}