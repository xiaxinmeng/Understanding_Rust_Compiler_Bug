{"sha": "23a5fb811e3e0c76153c9161c7a6eedb2714b554", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzYTVmYjgxMWUzZTBjNzYxNTNjOTE2MWM3YTZlZWRiMjcxNGI1NTQ=", "commit": {"author": {"name": "johnthagen", "email": "johnthagen@users.noreply.github.com", "date": "2017-10-11T11:33:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-10-11T11:33:46Z"}, "message": "Merge branch 'master' into pep8-bootstrap", "tree": {"sha": "457cbc4e2d7f634750186f6fe200509ce71177b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/457cbc4e2d7f634750186f6fe200509ce71177b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23a5fb811e3e0c76153c9161c7a6eedb2714b554", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23a5fb811e3e0c76153c9161c7a6eedb2714b554", "html_url": "https://github.com/rust-lang/rust/commit/23a5fb811e3e0c76153c9161c7a6eedb2714b554", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23a5fb811e3e0c76153c9161c7a6eedb2714b554/comments", "author": {"login": "johnthagen", "id": 10340167, "node_id": "MDQ6VXNlcjEwMzQwMTY3", "avatar_url": "https://avatars.githubusercontent.com/u/10340167?v=4", "gravatar_id": "", "url": "https://api.github.com/users/johnthagen", "html_url": "https://github.com/johnthagen", "followers_url": "https://api.github.com/users/johnthagen/followers", "following_url": "https://api.github.com/users/johnthagen/following{/other_user}", "gists_url": "https://api.github.com/users/johnthagen/gists{/gist_id}", "starred_url": "https://api.github.com/users/johnthagen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/johnthagen/subscriptions", "organizations_url": "https://api.github.com/users/johnthagen/orgs", "repos_url": "https://api.github.com/users/johnthagen/repos", "events_url": "https://api.github.com/users/johnthagen/events{/privacy}", "received_events_url": "https://api.github.com/users/johnthagen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a263a78b28dd1cef60025b0681689d7b6188d693", "url": "https://api.github.com/repos/rust-lang/rust/commits/a263a78b28dd1cef60025b0681689d7b6188d693", "html_url": "https://github.com/rust-lang/rust/commit/a263a78b28dd1cef60025b0681689d7b6188d693"}, {"sha": "264aafe0566e521bbc95bd3f44dae97591c9fd20", "url": "https://api.github.com/repos/rust-lang/rust/commits/264aafe0566e521bbc95bd3f44dae97591c9fd20", "html_url": "https://github.com/rust-lang/rust/commit/264aafe0566e521bbc95bd3f44dae97591c9fd20"}], "stats": {"total": 1687, "additions": 897, "deletions": 790}, "files": [{"sha": "779acb9fab44451354c7ae67533c9db4978269f1", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23a5fb811e3e0c76153c9161c7a6eedb2714b554/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/23a5fb811e3e0c76153c9161c7a6eedb2714b554/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=23a5fb811e3e0c76153c9161c7a6eedb2714b554", "patch": "@@ -193,7 +193,7 @@ Snapshot binaries are currently built and tested on several platforms:\n You may find that other platforms work, but these are our officially\n supported build environments that are most likely to work.\n \n-Rust currently needs between 600MiB and 1.5GiB to build, depending on platform.\n+Rust currently needs between 600MiB and 1.5GiB of RAM to build, depending on platform.\n If it hits swap, it will take a very long time to build.\n \n There is more advice about hacking on Rust in [CONTRIBUTING.md]."}, {"sha": "ebacc62b0fdda6d76c01fe999646ddca6b533496", "filename": "src/bootstrap/README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Fbootstrap%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Fbootstrap%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FREADME.md?ref=23a5fb811e3e0c76153c9161c7a6eedb2714b554", "patch": "@@ -39,7 +39,7 @@ The script accepts commands, flags, and arguments to determine what to do:\n   ```\n \n   If files are dirty that would normally be rebuilt from stage 0, that can be\n-  overidden using `--keep-stage 0`. Using `--keep-stage n` will skip all steps\n+  overridden using `--keep-stage 0`. Using `--keep-stage n` will skip all steps\n   that belong to stage n or earlier:\n \n   ```"}, {"sha": "54a3dbafe272aac09a7e8a0af2c84d143b4be412", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=23a5fb811e3e0c76153c9161c7a6eedb2714b554", "patch": "@@ -31,8 +31,6 @@ extern crate bootstrap;\n \n use std::env;\n use std::ffi::OsString;\n-use std::io;\n-use std::io::prelude::*;\n use std::str::FromStr;\n use std::path::PathBuf;\n use std::process::{Command, ExitStatus};\n@@ -270,7 +268,7 @@ fn main() {\n     }\n \n     if verbose > 1 {\n-        writeln!(&mut io::stderr(), \"rustc command: {:?}\", cmd).unwrap();\n+        eprintln!(\"rustc command: {:?}\", cmd);\n     }\n \n     // Actually run the compiler!"}, {"sha": "64f76aa2ef43f645b29d7d402fae63fb06b9507e", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=23a5fb811e3e0c76153c9161c7a6eedb2714b554", "patch": "@@ -499,7 +499,7 @@ def get_toml(self, key):\n \n         If the key does not exists, the result is None:\n \n-        >>> rb.get_toml(\"key3\") == None\n+        >>> rb.get_toml(\"key3\") is None\n         True\n         \"\"\"\n         for line in self.config_toml.splitlines():"}, {"sha": "a296fa9459d7301da90af5460718be0bdf22d860", "filename": "src/bootstrap/configure.py", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Fbootstrap%2Fconfigure.py", "raw_url": "https://github.com/rust-lang/rust/raw/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Fbootstrap%2Fconfigure.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfigure.py?ref=23a5fb811e3e0c76153c9161c7a6eedb2714b554", "patch": "@@ -358,7 +358,7 @@ def set(key, value):\n \n \n # Here we walk through the constructed configuration we have from the parsed\n-# command line arguemnts. We then apply each piece of configuration by\n+# command line arguments. We then apply each piece of configuration by\n # basically just doing a `sed` to change the various configuration line to what\n # we've got configure.\n def to_toml(value):\n@@ -372,7 +372,7 @@ def to_toml(value):\n     elif isinstance(value, str):\n         return \"'\" + value + \"'\"\n     else:\n-        raise 'no toml'\n+        raise RuntimeError('no toml')\n \n \n def configure_section(lines, config):\n@@ -392,9 +392,9 @@ def configure_section(lines, config):\n for section_key in config:\n     section_config = config[section_key]\n     if section_key not in sections:\n-        raise RuntimeError(\"config key {} not in sections\".format(key))\n+        raise RuntimeError(\"config key {} not in sections\".format(section_key))\n \n-    if section_key == 'target':\n+    if __key == 'target':\n         for target in section_config:\n             configure_section(targets[target], section_config[target])\n     else:"}, {"sha": "3aa2b9d58d57afe921423acea218aef31f4f994a", "filename": "src/ci/docker/scripts/android-sdk.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Fci%2Fdocker%2Fscripts%2Fandroid-sdk.sh", "raw_url": "https://github.com/rust-lang/rust/raw/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Fci%2Fdocker%2Fscripts%2Fandroid-sdk.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fscripts%2Fandroid-sdk.sh?ref=23a5fb811e3e0c76153c9161c7a6eedb2714b554", "patch": "@@ -31,7 +31,7 @@ download_sysimage() {\n     # Keep printing yes to accept the licenses\n     while true; do echo yes; sleep 10; done | \\\n         /android/sdk/tools/android update sdk -a --no-ui \\\n-            --filter \"$filter\"\n+            --filter \"$filter\" --no-https\n }\n \n create_avd() {"}, {"sha": "24a0ce0ac3611270cd6630a26b1595d48afcc40d", "filename": "src/etc/lldb_batchmode.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Fetc%2Flldb_batchmode.py", "raw_url": "https://github.com/rust-lang/rust/raw/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Fetc%2Flldb_batchmode.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Flldb_batchmode.py?ref=23a5fb811e3e0c76153c9161c7a6eedb2714b554", "patch": "@@ -81,7 +81,7 @@ def execute_command(command_interpreter, command):\n \n     if res.Succeeded():\n         if res.HasResult():\n-            print(normalize_whitespace(res.GetOutput()), end='\\n')\n+            print(normalize_whitespace(res.GetOutput() or ''), end='\\n')\n \n         # If the command introduced any breakpoints, make sure to register\n         # them with the breakpoint"}, {"sha": "2f282c8281d6eeba11b412101461aef4a2f3baa3", "filename": "src/grammar/lexer.l", "status": "modified", "additions": 45, "deletions": 28, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Fgrammar%2Flexer.l", "raw_url": "https://github.com/rust-lang/rust/raw/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Fgrammar%2Flexer.l", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar%2Flexer.l?ref=23a5fb811e3e0c76153c9161c7a6eedb2714b554", "patch": "@@ -85,43 +85,60 @@ ident [a-zA-Z\\x80-\\xff_][a-zA-Z0-9\\x80-\\xff_]*\n <blockcomment>(.|\\n)   { }\n \n _        { return UNDERSCORE; }\n+abstract { return ABSTRACT; }\n+alignof  { return ALIGNOF; }\n as       { return AS; }\n+become   { return BECOME; }\n box      { return BOX; }\n break    { return BREAK; }\n+catch    { return CATCH; }\n const    { return CONST; }\n continue { return CONTINUE; }\n crate    { return CRATE; }\n+default  { return DEFAULT; }\n+do       { return DO; }\n else     { return ELSE; }\n enum     { return ENUM; }\n extern   { return EXTERN; }\n false    { return FALSE; }\n+final    { return FINAL; }\n fn       { return FN; }\n for      { return FOR; }\n if       { return IF; }\n impl     { return IMPL; }\n in       { return IN; }\n let      { return LET; }\n loop     { return LOOP; }\n+macro    { return MACRO; }\n match    { return MATCH; }\n mod      { return MOD; }\n move     { return MOVE; }\n mut      { return MUT; }\n+offsetof { return OFFSETOF; }\n+override { return OVERRIDE; }\n priv     { return PRIV; }\n proc     { return PROC; }\n+pure     { return PURE; }\n pub      { return PUB; }\n ref      { return REF; }\n return   { return RETURN; }\n self     { return SELF; }\n+sizeof   { return SIZEOF; }\n static   { return STATIC; }\n struct   { return STRUCT; }\n+super    { return SUPER; }\n trait    { return TRAIT; }\n true     { return TRUE; }\n type     { return TYPE; }\n typeof   { return TYPEOF; }\n+union    { return UNION; }\n unsafe   { return UNSAFE; }\n+unsized  { return UNSIZED; }\n use      { return USE; }\n+virtual  { return VIRTUAL; }\n where    { return WHERE; }\n while    { return WHILE; }\n+yield    { return YIELD; }\n \n {ident}  { return IDENT; }\n \n@@ -189,25 +206,25 @@ while    { return WHILE; }\n \\>\\>= { return SHREQ; }\n \\>    { return '>'; }\n \n-\\x27                                  { BEGIN(ltorchar); yymore(); }\n-<ltorchar>static                      { BEGIN(INITIAL); return STATIC_LIFETIME; }\n-<ltorchar>{ident}                     { BEGIN(INITIAL); return LIFETIME; }\n-<ltorchar>\\\\[nrt\\\\\\x27\\x220]\\x27      { BEGIN(suffix); return LIT_CHAR; }\n-<ltorchar>\\\\x[0-9a-fA-F]{2}\\x27       { BEGIN(suffix); return LIT_CHAR; }\n-<ltorchar>\\\\u\\{[0-9a-fA-F]?{6}\\}\\x27  { BEGIN(suffix); return LIT_CHAR; }\n-<ltorchar>.\\x27                       { BEGIN(suffix); return LIT_CHAR; }\n-<ltorchar>[\\x80-\\xff]{2,4}\\x27        { BEGIN(suffix); return LIT_CHAR; }\n-<ltorchar><<EOF>>                     { BEGIN(INITIAL); return -1; }\n+\\x27                                      { BEGIN(ltorchar); yymore(); }\n+<ltorchar>static                          { BEGIN(INITIAL); return STATIC_LIFETIME; }\n+<ltorchar>{ident}                         { BEGIN(INITIAL); return LIFETIME; }\n+<ltorchar>\\\\[nrt\\\\\\x27\\x220]\\x27          { BEGIN(suffix); return LIT_CHAR; }\n+<ltorchar>\\\\x[0-9a-fA-F]{2}\\x27           { BEGIN(suffix); return LIT_CHAR; }\n+<ltorchar>\\\\u\\{([0-9a-fA-F]_*){1,6}\\}\\x27 { BEGIN(suffix); return LIT_CHAR; }\n+<ltorchar>.\\x27                           { BEGIN(suffix); return LIT_CHAR; }\n+<ltorchar>[\\x80-\\xff]{2,4}\\x27            { BEGIN(suffix); return LIT_CHAR; }\n+<ltorchar><<EOF>>                         { BEGIN(INITIAL); return -1; }\n \n b\\x22              { BEGIN(bytestr); yymore(); }\n <bytestr>\\x22      { BEGIN(suffix); return LIT_BYTE_STR; }\n \n-<bytestr><<EOF>>                { return -1; }\n-<bytestr>\\\\[n\\nrt\\\\\\x27\\x220]   { yymore(); }\n-<bytestr>\\\\x[0-9a-fA-F]{2}      { yymore(); }\n-<bytestr>\\\\u\\{[0-9a-fA-F]?{6}\\} { yymore(); }\n-<bytestr>\\\\[^n\\nrt\\\\\\x27\\x220]  { return -1; }\n-<bytestr>(.|\\n)                 { yymore(); }\n+<bytestr><<EOF>>                     { return -1; }\n+<bytestr>\\\\[n\\nrt\\\\\\x27\\x220]        { yymore(); }\n+<bytestr>\\\\x[0-9a-fA-F]{2}           { yymore(); }\n+<bytestr>\\\\u\\{([0-9a-fA-F]_*){1,6}\\} { yymore(); }\n+<bytestr>\\\\[^n\\nrt\\\\\\x27\\x220]       { return -1; }\n+<bytestr>(.|\\n)                      { yymore(); }\n \n br\\x22                      { BEGIN(rawbytestr_nohash); yymore(); }\n <rawbytestr_nohash>\\x22     { BEGIN(suffix); return LIT_BYTE_STR_RAW; }\n@@ -252,13 +269,13 @@ br/# {\n }\n <rawbytestr><<EOF>> { return -1; }\n \n-b\\x27                        { BEGIN(byte); yymore(); }\n-<byte>\\\\[nrt\\\\\\x27\\x220]\\x27 { BEGIN(INITIAL); return LIT_BYTE; }\n-<byte>\\\\x[0-9a-fA-F]{2}\\x27  { BEGIN(INITIAL); return LIT_BYTE; }\n-<byte>\\\\u[0-9a-fA-F]{4}\\x27  { BEGIN(INITIAL); return LIT_BYTE; }\n-<byte>\\\\U[0-9a-fA-F]{8}\\x27  { BEGIN(INITIAL); return LIT_BYTE; }\n-<byte>.\\x27                  { BEGIN(INITIAL); return LIT_BYTE; }\n-<byte><<EOF>>                { BEGIN(INITIAL); return -1; }\n+b\\x27                           { BEGIN(byte); yymore(); }\n+<byte>\\\\[nrt\\\\\\x27\\x220]\\x27    { BEGIN(INITIAL); return LIT_BYTE; }\n+<byte>\\\\x[0-9a-fA-F]{2}\\x27     { BEGIN(INITIAL); return LIT_BYTE; }\n+<byte>\\\\u([0-9a-fA-F]_*){4}\\x27 { BEGIN(INITIAL); return LIT_BYTE; }\n+<byte>\\\\U([0-9a-fA-F]_*){8}\\x27 { BEGIN(INITIAL); return LIT_BYTE; }\n+<byte>.\\x27                     { BEGIN(INITIAL); return LIT_BYTE; }\n+<byte><<EOF>>                   { BEGIN(INITIAL); return -1; }\n \n r\\x22           { BEGIN(rawstr); yymore(); }\n <rawstr>\\x22    { BEGIN(suffix); return LIT_STR_RAW; }\n@@ -310,12 +327,12 @@ r/#             {\n \\x22                     { BEGIN(str); yymore(); }\n <str>\\x22                { BEGIN(suffix); return LIT_STR; }\n \n-<str><<EOF>>                { return -1; }\n-<str>\\\\[n\\nr\\rt\\\\\\x27\\x220] { yymore(); }\n-<str>\\\\x[0-9a-fA-F]{2}      { yymore(); }\n-<str>\\\\u\\{[0-9a-fA-F]?{6}\\} { yymore(); }\n-<str>\\\\[^n\\nrt\\\\\\x27\\x220]  { return -1; }\n-<str>(.|\\n)                 { yymore(); }\n+<str><<EOF>>                     { return -1; }\n+<str>\\\\[n\\nr\\rt\\\\\\x27\\x220]      { yymore(); }\n+<str>\\\\x[0-9a-fA-F]{2}           { yymore(); }\n+<str>\\\\u\\{([0-9a-fA-F]_*){1,6}\\} { yymore(); }\n+<str>\\\\[^n\\nrt\\\\\\x27\\x220]       { return -1; }\n+<str>(.|\\n)                      { yymore(); }\n \n \\<-  { return LARROW; }\n -\\>  { return RARROW; }"}, {"sha": "de1f96aac504653db2d440a8426ea623143abc29", "filename": "src/grammar/parser-lalr.y", "status": "modified", "additions": 208, "deletions": 158, "changes": 366, "blob_url": "https://github.com/rust-lang/rust/blob/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Fgrammar%2Fparser-lalr.y", "raw_url": "https://github.com/rust-lang/rust/raw/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Fgrammar%2Fparser-lalr.y", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar%2Fparser-lalr.y?ref=23a5fb811e3e0c76153c9161c7a6eedb2714b554", "patch": "@@ -62,33 +62,49 @@ extern char *yytext;\n // keywords\n %token SELF\n %token STATIC\n+%token ABSTRACT\n+%token ALIGNOF\n %token AS\n+%token BECOME\n %token BREAK\n+%token CATCH\n %token CRATE\n+%token DO\n %token ELSE\n %token ENUM\n %token EXTERN\n %token FALSE\n+%token FINAL\n %token FN\n %token FOR\n %token IF\n %token IMPL\n %token IN\n %token LET\n %token LOOP\n+%token MACRO\n %token MATCH\n %token MOD\n %token MOVE\n %token MUT\n+%token OFFSETOF\n+%token OVERRIDE\n %token PRIV\n %token PUB\n+%token PURE\n %token REF\n %token RETURN\n+%token SIZEOF\n %token STRUCT\n+%token SUPER\n+%token UNION\n+%token UNSIZED\n %token TRUE\n %token TRAIT\n %token TYPE\n %token UNSAFE\n+%token VIRTUAL\n+%token YIELD\n %token DEFAULT\n %token USE\n %token WHILE\n@@ -141,6 +157,10 @@ extern char *yytext;\n // 'foo:bar . <' is shifted (in a trait reference occurring in a\n // bounds list), parsing as foo:(bar<baz>) rather than (foo:bar)<baz>.\n %precedence IDENT\n+ // Put the weak keywords that can be used as idents here as well\n+%precedence CATCH\n+%precedence DEFAULT\n+%precedence UNION\n \n // A couple fake-precedence symbols to use in rules associated with +\n // and < in trailing type contexts. These come up when you have a type\n@@ -161,13 +181,13 @@ extern char *yytext;\n %precedence FOR\n \n // Binops & unops, and their precedences\n+%precedence '?'\n %precedence BOX\n-%precedence BOXPLACE\n %nonassoc DOTDOT\n \n // RETURN needs to be lower-precedence than tokens that start\n // prefix_exprs\n-%precedence RETURN\n+%precedence RETURN YIELD\n \n %right '=' SHLEQ SHREQ MINUSEQ ANDEQ OREQ PLUSEQ STAREQ SLASHEQ CARETEQ PERCENTEQ\n %right LARROW\n@@ -321,6 +341,8 @@ view_path\n | path_no_types_allowed MOD_SEP '{' idents_or_self ',' '}' { $$ = mk_node(\"ViewPathList\", 2, $1, $4); }\n |                       MOD_SEP '{' idents_or_self ',' '}' { $$ = mk_node(\"ViewPathList\", 1, $3); }\n | path_no_types_allowed MOD_SEP '*'                        { $$ = mk_node(\"ViewPathGlob\", 1, $1); }\n+|                       MOD_SEP '*'                        { $$ = mk_atom(\"ViewPathGlob\"); }\n+|                               '*'                        { $$ = mk_atom(\"ViewPathGlob\"); }\n |                               '{'                '}'     { $$ = mk_atom(\"ViewPathListEmpty\"); }\n |                               '{' idents_or_self '}'     { $$ = mk_node(\"ViewPathList\", 1, $2); }\n |                               '{' idents_or_self ',' '}' { $$ = mk_node(\"ViewPathList\", 1, $2); }\n@@ -334,6 +356,7 @@ block_item\n | item_foreign_mod          { $$ = mk_node(\"ItemForeignMod\", 1, $1); }\n | item_struct\n | item_enum\n+| item_union\n | item_trait\n | item_impl\n ;\n@@ -387,6 +410,7 @@ struct_decl_field\n struct_tuple_fields\n : struct_tuple_field                          { $$ = mk_node(\"StructFields\", 1, $1); }\n | struct_tuple_fields ',' struct_tuple_field  { $$ = ext_node($1, 1, $3); }\n+| %empty                                      { $$ = mk_none(); }\n ;\n \n struct_tuple_field\n@@ -417,6 +441,11 @@ enum_args\n | %empty                         { $$ = mk_none(); }\n ;\n \n+// unions\n+item_union\n+: UNION ident generic_params maybe_where_clause '{' struct_decl_fields '}'     { $$ = mk_node(\"ItemUnion\", 0); }\n+| UNION ident generic_params maybe_where_clause '{' struct_decl_fields ',' '}' { $$ = mk_node(\"ItemUnion\", 0); }\n+\n item_mod\n : MOD ident ';'                                 { $$ = mk_node(\"ItemMod\", 1, $2); }\n | MOD ident '{' maybe_mod_items '}'             { $$ = mk_node(\"ItemMod\", 2, $2, $4); }\n@@ -475,7 +504,7 @@ visibility\n \n idents_or_self\n : ident_or_self                    { $$ = mk_node(\"IdentsOrSelf\", 1, $1); }\n-| ident_or_self AS ident           { $$ = mk_node(\"IdentsOrSelf\", 2, $1, $3); }\n+| idents_or_self AS ident          { $$ = mk_node(\"IdentsOrSelf\", 2, $1, $3); }\n | idents_or_self ',' ident_or_self { $$ = ext_node($1, 1, $3); }\n ;\n \n@@ -515,6 +544,7 @@ trait_item\n : trait_const\n | trait_type\n | trait_method\n+| maybe_outer_attrs item_macro { $$ = mk_node(\"TraitMacroItem\", 2, $1, $2); }\n ;\n \n trait_const\n@@ -547,36 +577,48 @@ trait_method\n ;\n \n type_method\n-: attrs_and_vis maybe_unsafe FN ident generic_params fn_decl_with_self_allow_anon_params maybe_where_clause ';'\n+: maybe_outer_attrs maybe_unsafe FN ident generic_params fn_decl_with_self_allow_anon_params maybe_where_clause ';'\n {\n   $$ = mk_node(\"TypeMethod\", 6, $1, $2, $4, $5, $6, $7);\n }\n-| attrs_and_vis maybe_unsafe EXTERN maybe_abi FN ident generic_params fn_decl_with_self_allow_anon_params maybe_where_clause ';'\n+| maybe_outer_attrs CONST maybe_unsafe FN ident generic_params fn_decl_with_self_allow_anon_params maybe_where_clause ';'\n+{\n+  $$ = mk_node(\"TypeMethod\", 6, $1, $3, $5, $6, $7, $8);\n+}\n+| maybe_outer_attrs maybe_unsafe EXTERN maybe_abi FN ident generic_params fn_decl_with_self_allow_anon_params maybe_where_clause ';'\n {\n   $$ = mk_node(\"TypeMethod\", 7, $1, $2, $4, $6, $7, $8, $9);\n }\n ;\n \n method\n-: attrs_and_vis maybe_unsafe FN ident generic_params fn_decl_with_self_allow_anon_params maybe_where_clause inner_attrs_and_block\n+: maybe_outer_attrs maybe_unsafe FN ident generic_params fn_decl_with_self_allow_anon_params maybe_where_clause inner_attrs_and_block\n {\n   $$ = mk_node(\"Method\", 7, $1, $2, $4, $5, $6, $7, $8);\n }\n-| attrs_and_vis maybe_unsafe EXTERN maybe_abi FN ident generic_params fn_decl_with_self_allow_anon_params maybe_where_clause inner_attrs_and_block\n+| maybe_outer_attrs CONST maybe_unsafe FN ident generic_params fn_decl_with_self_allow_anon_params maybe_where_clause inner_attrs_and_block\n+{\n+  $$ = mk_node(\"Method\", 7, $1, $3, $5, $6, $7, $8, $9);\n+}\n+| maybe_outer_attrs maybe_unsafe EXTERN maybe_abi FN ident generic_params fn_decl_with_self_allow_anon_params maybe_where_clause inner_attrs_and_block\n {\n   $$ = mk_node(\"Method\", 8, $1, $2, $4, $6, $7, $8, $9, $10);\n }\n ;\n \n impl_method\n-: attrs_and_vis maybe_unsafe FN ident generic_params fn_decl_with_self maybe_where_clause inner_attrs_and_block\n+: attrs_and_vis maybe_default maybe_unsafe FN ident generic_params fn_decl_with_self maybe_where_clause inner_attrs_and_block\n {\n-  $$ = mk_node(\"Method\", 7, $1, $2, $4, $5, $6, $7, $8);\n+  $$ = mk_node(\"Method\", 8, $1, $2, $3, $5, $6, $7, $8, $9);\n }\n-| attrs_and_vis maybe_unsafe EXTERN maybe_abi FN ident generic_params fn_decl_with_self maybe_where_clause inner_attrs_and_block\n+| attrs_and_vis maybe_default CONST maybe_unsafe FN ident generic_params fn_decl_with_self maybe_where_clause inner_attrs_and_block\n {\n   $$ = mk_node(\"Method\", 8, $1, $2, $4, $6, $7, $8, $9, $10);\n }\n+| attrs_and_vis maybe_default maybe_unsafe EXTERN maybe_abi FN ident generic_params fn_decl_with_self maybe_where_clause inner_attrs_and_block\n+{\n+  $$ = mk_node(\"Method\", 9, $1, $2, $3, $5, $7, $8, $9, $10, $11);\n+}\n ;\n \n // There are two forms of impl:\n@@ -638,26 +680,39 @@ impl_item\n | impl_type\n ;\n \n+maybe_default\n+: DEFAULT { $$ = mk_atom(\"Default\"); }\n+| %empty { $$ = mk_none(); }\n+;\n+\n impl_const\n-: attrs_and_vis item_const { $$ = mk_node(\"ImplConst\", 1, $1, $2); }\n+: attrs_and_vis maybe_default item_const { $$ = mk_node(\"ImplConst\", 3, $1, $2, $3); }\n ;\n \n impl_type\n-: attrs_and_vis TYPE ident generic_params '=' ty_sum ';'  { $$ = mk_node(\"ImplType\", 4, $1, $3, $4, $6); }\n+: attrs_and_vis maybe_default TYPE ident generic_params '=' ty_sum ';'  { $$ = mk_node(\"ImplType\", 5, $1, $2, $4, $5, $7); }\n ;\n \n item_fn\n : FN ident generic_params fn_decl maybe_where_clause inner_attrs_and_block\n {\n   $$ = mk_node(\"ItemFn\", 5, $2, $3, $4, $5, $6);\n }\n+| CONST FN ident generic_params fn_decl maybe_where_clause inner_attrs_and_block\n+{\n+  $$ = mk_node(\"ItemFn\", 5, $3, $4, $5, $6, $7);\n+}\n ;\n \n item_unsafe_fn\n : UNSAFE FN ident generic_params fn_decl maybe_where_clause inner_attrs_and_block\n {\n   $$ = mk_node(\"ItemUnsafeFn\", 5, $3, $4, $5, $6, $7);\n }\n+| CONST UNSAFE FN ident generic_params fn_decl maybe_where_clause inner_attrs_and_block\n+{\n+  $$ = mk_node(\"ItemUnsafeFn\", 5, $4, $5, $6, $7, $8);\n+}\n | UNSAFE EXTERN maybe_abi FN ident generic_params fn_decl maybe_where_clause inner_attrs_and_block\n {\n   $$ = mk_node(\"ItemUnsafeFn\", 6, $3, $5, $6, $7, $8, $9);\n@@ -723,12 +778,6 @@ inferrable_param\n : pat maybe_ty_ascription { $$ = mk_node(\"InferrableParam\", 2, $1, $2); }\n ;\n \n-maybe_unboxed_closure_kind\n-: %empty\n-| ':'\n-| '&' maybe_mut ':'\n-;\n-\n maybe_comma_params\n : ','            { $$ = mk_none(); }\n | ',' params     { $$ = $2; }\n@@ -784,7 +833,8 @@ ret_ty\n ;\n \n generic_params\n-: '<' lifetimes '>'                   { $$ = mk_node(\"Generics\", 2, $2, mk_none()); }\n+: '<' '>'                             { $$ = mk_node(\"Generics\", 2, mk_none(), mk_none()); }\n+| '<' lifetimes '>'                   { $$ = mk_node(\"Generics\", 2, $2, mk_none()); }\n | '<' lifetimes ',' '>'               { $$ = mk_node(\"Generics\", 2, $2, mk_none()); }\n | '<' lifetimes SHR                   { push_back('>'); $$ = mk_node(\"Generics\", 2, $2, mk_none()); }\n | '<' lifetimes ',' SHR               { push_back('>'); $$ = mk_node(\"Generics\", 2, $2, mk_none()); }\n@@ -837,6 +887,8 @@ path_no_types_allowed\n | MOD_SEP ident                       { $$ = mk_node(\"ViewPath\", 1, $2); }\n | SELF                                { $$ = mk_node(\"ViewPath\", 1, mk_atom(\"Self\")); }\n | MOD_SEP SELF                        { $$ = mk_node(\"ViewPath\", 1, mk_atom(\"Self\")); }\n+| SUPER                               { $$ = mk_node(\"ViewPath\", 1, mk_atom(\"Super\")); }\n+| MOD_SEP SUPER                       { $$ = mk_node(\"ViewPath\", 1, mk_atom(\"Super\")); }\n | path_no_types_allowed MOD_SEP ident { $$ = ext_node($1, 1, $3); }\n ;\n \n@@ -882,7 +934,7 @@ generic_args\n ;\n \n generic_values\n-: maybe_lifetimes maybe_ty_sums_and_or_bindings { $$ = mk_node(\"GenericValues\", 2, $1, $2); }\n+: maybe_ty_sums_and_or_bindings { $$ = mk_node(\"GenericValues\", 1, $1); }\n ;\n \n maybe_ty_sums_and_or_bindings\n@@ -910,12 +962,11 @@ pat\n | ANDAND pat                                      { $$ = mk_node(\"PatRegion\", 1, mk_node(\"PatRegion\", 1, $2)); }\n | '(' ')'                                         { $$ = mk_atom(\"PatUnit\"); }\n | '(' pat_tup ')'                                 { $$ = mk_node(\"PatTup\", 1, $2); }\n-| '(' pat_tup ',' ')'                             { $$ = mk_node(\"PatTup\", 1, $2); }\n | '[' pat_vec ']'                                 { $$ = mk_node(\"PatVec\", 1, $2); }\n | lit_or_path\n | lit_or_path DOTDOTDOT lit_or_path               { $$ = mk_node(\"PatRange\", 2, $1, $3); }\n | path_expr '{' pat_struct '}'                    { $$ = mk_node(\"PatStruct\", 2, $1, $3); }\n-| path_expr '(' DOTDOT ')'                        { $$ = mk_node(\"PatEnum\", 1, $1); }\n+| path_expr '(' ')'                               { $$ = mk_node(\"PatEnum\", 2, $1, mk_none()); }\n | path_expr '(' pat_tup ')'                       { $$ = mk_node(\"PatEnum\", 2, $1, $3); }\n | path_expr '!' maybe_ident delimited_token_trees { $$ = mk_node(\"PatMac\", 3, $1, $3, $4); }\n | binding_mode ident                              { $$ = mk_node(\"PatIdent\", 2, $1, $2); }\n@@ -953,6 +1004,7 @@ pat_field\n | BOX binding_mode ident        { $$ = mk_node(\"PatField\", 3, mk_atom(\"box\"), $2, $3); }\n |              ident ':' pat    { $$ = mk_node(\"PatField\", 2, $1, $3); }\n | binding_mode ident ':' pat    { $$ = mk_node(\"PatField\", 3, $1, $2, $4); }\n+|        LIT_INTEGER ':' pat    { $$ = mk_node(\"PatField\", 2, mk_atom(yytext), $3); }\n ;\n \n pat_fields\n@@ -965,11 +1017,26 @@ pat_struct\n | pat_fields ','             { $$ = mk_node(\"PatStruct\", 2, $1, mk_atom(\"false\")); }\n | pat_fields ',' DOTDOT      { $$ = mk_node(\"PatStruct\", 2, $1, mk_atom(\"true\")); }\n | DOTDOT                     { $$ = mk_node(\"PatStruct\", 1, mk_atom(\"true\")); }\n+| %empty                     { $$ = mk_node(\"PatStruct\", 1, mk_none()); }\n ;\n \n pat_tup\n-: pat               { $$ = mk_node(\"pat_tup\", 1, $1); }\n-| pat_tup ',' pat   { $$ = ext_node($1, 1, $3); }\n+: pat_tup_elts                                  { $$ = mk_node(\"PatTup\", 2, $1, mk_none()); }\n+| pat_tup_elts                             ','  { $$ = mk_node(\"PatTup\", 2, $1, mk_none()); }\n+| pat_tup_elts     DOTDOT                       { $$ = mk_node(\"PatTup\", 2, $1, mk_none()); }\n+| pat_tup_elts ',' DOTDOT                       { $$ = mk_node(\"PatTup\", 2, $1, mk_none()); }\n+| pat_tup_elts     DOTDOT ',' pat_tup_elts      { $$ = mk_node(\"PatTup\", 2, $1, $4); }\n+| pat_tup_elts     DOTDOT ',' pat_tup_elts ','  { $$ = mk_node(\"PatTup\", 2, $1, $4); }\n+| pat_tup_elts ',' DOTDOT ',' pat_tup_elts      { $$ = mk_node(\"PatTup\", 2, $1, $5); }\n+| pat_tup_elts ',' DOTDOT ',' pat_tup_elts ','  { $$ = mk_node(\"PatTup\", 2, $1, $5); }\n+|                  DOTDOT ',' pat_tup_elts      { $$ = mk_node(\"PatTup\", 2, mk_none(), $3); }\n+|                  DOTDOT ',' pat_tup_elts ','  { $$ = mk_node(\"PatTup\", 2, mk_none(), $3); }\n+|                  DOTDOT                       { $$ = mk_node(\"PatTup\", 2, mk_none(), mk_none()); }\n+;\n+\n+pat_tup_elts\n+: pat                    { $$ = mk_node(\"PatTupElts\", 1, $1); }\n+| pat_tup_elts ',' pat   { $$ = ext_node($1, 1, $3); }\n ;\n \n pat_vec\n@@ -1007,24 +1074,25 @@ ty\n ;\n \n ty_prim\n-: %prec IDENT path_generic_args_without_colons              { $$ = mk_node(\"TyPath\", 2, mk_node(\"global\", 1, mk_atom(\"false\")), $1); }\n-| %prec IDENT MOD_SEP path_generic_args_without_colons      { $$ = mk_node(\"TyPath\", 2, mk_node(\"global\", 1, mk_atom(\"true\")), $2); }\n-| %prec IDENT SELF MOD_SEP path_generic_args_without_colons { $$ = mk_node(\"TyPath\", 2, mk_node(\"self\", 1, mk_atom(\"true\")), $3); }\n-| BOX ty                                                    { $$ = mk_node(\"TyBox\", 1, $2); }\n-| '*' maybe_mut_or_const ty                                 { $$ = mk_node(\"TyPtr\", 2, $2, $3); }\n-| '&' ty                                                    { $$ = mk_node(\"TyRptr\", 2, mk_atom(\"MutImmutable\"), $2); }\n-| '&' MUT ty                                                { $$ = mk_node(\"TyRptr\", 2, mk_atom(\"MutMutable\"), $3); }\n-| ANDAND ty                                                 { $$ = mk_node(\"TyRptr\", 1, mk_node(\"TyRptr\", 2, mk_atom(\"MutImmutable\"), $2)); }\n-| ANDAND MUT ty                                             { $$ = mk_node(\"TyRptr\", 1, mk_node(\"TyRptr\", 2, mk_atom(\"MutMutable\"), $3)); }\n-| '&' lifetime maybe_mut ty                                 { $$ = mk_node(\"TyRptr\", 3, $2, $3, $4); }\n-| ANDAND lifetime maybe_mut ty                              { $$ = mk_node(\"TyRptr\", 1, mk_node(\"TyRptr\", 3, $2, $3, $4)); }\n-| '[' ty ']'                                                { $$ = mk_node(\"TyVec\", 1, $2); }\n-| '[' ty ',' DOTDOT expr ']'                                { $$ = mk_node(\"TyFixedLengthVec\", 2, $2, $5); }\n-| '[' ty ';' expr ']'                                       { $$ = mk_node(\"TyFixedLengthVec\", 2, $2, $4); }\n-| TYPEOF '(' expr ')'                                       { $$ = mk_node(\"TyTypeof\", 1, $3); }\n-| UNDERSCORE                                                { $$ = mk_atom(\"TyInfer\"); }\n+: %prec IDENT path_generic_args_without_colons                                               { $$ = mk_node(\"TyPath\", 2, mk_node(\"global\", 1, mk_atom(\"false\")), $1); }\n+| %prec IDENT MOD_SEP path_generic_args_without_colons                                       { $$ = mk_node(\"TyPath\", 2, mk_node(\"global\", 1, mk_atom(\"true\")), $2); }\n+| %prec IDENT SELF MOD_SEP path_generic_args_without_colons                                  { $$ = mk_node(\"TyPath\", 2, mk_node(\"self\", 1, mk_atom(\"true\")), $3); }\n+| %prec IDENT path_generic_args_without_colons '!' maybe_ident delimited_token_trees         { $$ = mk_node(\"TyMacro\", 3, $1, $3, $4); }\n+| %prec IDENT MOD_SEP path_generic_args_without_colons '!' maybe_ident delimited_token_trees { $$ = mk_node(\"TyMacro\", 3, $2, $4, $5); }\n+| BOX ty                                                                                     { $$ = mk_node(\"TyBox\", 1, $2); }\n+| '*' maybe_mut_or_const ty                                                                  { $$ = mk_node(\"TyPtr\", 2, $2, $3); }\n+| '&' ty                                                                                     { $$ = mk_node(\"TyRptr\", 2, mk_atom(\"MutImmutable\"), $2); }\n+| '&' MUT ty                                                                                 { $$ = mk_node(\"TyRptr\", 2, mk_atom(\"MutMutable\"), $3); }\n+| ANDAND ty                                                                                  { $$ = mk_node(\"TyRptr\", 1, mk_node(\"TyRptr\", 2, mk_atom(\"MutImmutable\"), $2)); }\n+| ANDAND MUT ty                                                                              { $$ = mk_node(\"TyRptr\", 1, mk_node(\"TyRptr\", 2, mk_atom(\"MutMutable\"), $3)); }\n+| '&' lifetime maybe_mut ty                                                                  { $$ = mk_node(\"TyRptr\", 3, $2, $3, $4); }\n+| ANDAND lifetime maybe_mut ty                                                               { $$ = mk_node(\"TyRptr\", 1, mk_node(\"TyRptr\", 3, $2, $3, $4)); }\n+| '[' ty ']'                                                                                 { $$ = mk_node(\"TyVec\", 1, $2); }\n+| '[' ty ',' DOTDOT expr ']'                                                                 { $$ = mk_node(\"TyFixedLengthVec\", 2, $2, $5); }\n+| '[' ty ';' expr ']'                                                                        { $$ = mk_node(\"TyFixedLengthVec\", 2, $2, $4); }\n+| TYPEOF '(' expr ')'                                                                        { $$ = mk_node(\"TyTypeof\", 1, $3); }\n+| UNDERSCORE                                                                                 { $$ = mk_atom(\"TyInfer\"); }\n | ty_bare_fn\n-| ty_proc\n | for_in_type\n ;\n \n@@ -1046,17 +1114,12 @@ ty_closure\n |        OROR maybe_bounds ret_ty                { $$ = mk_node(\"TyClosure\", 2, $2, $3); }\n ;\n \n-ty_proc\n-: PROC generic_params fn_params maybe_bounds ret_ty { $$ = mk_node(\"TyProc\", 4, $2, $3, $4, $5); }\n-;\n-\n for_in_type\n : FOR '<' maybe_lifetimes '>' for_in_type_suffix { $$ = mk_node(\"ForInType\", 2, $3, $5); }\n ;\n \n for_in_type_suffix\n-: ty_proc\n-| ty_bare_fn\n+: ty_bare_fn\n | trait_ref\n | ty_closure\n ;\n@@ -1100,13 +1163,23 @@ ty_sums\n ;\n \n ty_sum\n-: ty                     { $$ = mk_node(\"TySum\", 1, $1); }\n-| ty '+' ty_param_bounds { $$ = mk_node(\"TySum\", 2, $1, $3); }\n+: ty_sum_elt            { $$ = mk_node(\"TySum\", 1, $1); }\n+| ty_sum '+' ty_sum_elt { $$ = ext_node($1, 1, $3); }\n+;\n+\n+ty_sum_elt\n+: ty\n+| lifetime\n ;\n \n ty_prim_sum\n-: ty_prim                     { $$ = mk_node(\"TySum\", 1, $1); }\n-| ty_prim '+' ty_param_bounds { $$ = mk_node(\"TySum\", 2, $1, $3); }\n+: ty_prim_sum_elt                 { $$ = mk_node(\"TySum\", 1, $1); }\n+| ty_prim_sum '+' ty_prim_sum_elt { $$ = ext_node($1, 1, $3); }\n+;\n+\n+ty_prim_sum_elt\n+: ty_prim\n+| lifetime\n ;\n \n maybe_ty_param_bounds\n@@ -1127,6 +1200,7 @@ boundseq\n polybound\n : FOR '<' maybe_lifetimes '>' bound { $$ = mk_node(\"PolyBound\", 2, $3, $5); }\n | bound\n+| '?' FOR '<' maybe_lifetimes '>' bound { $$ = mk_node(\"PolyBound\", 2, $4, $6); }\n | '?' bound { $$ = $2; }\n ;\n \n@@ -1244,26 +1318,22 @@ maybe_stmts\n // block, nonblock-prefix, and nonblock-nonprefix.\n //\n // In non-stmts contexts, expr can relax this trichotomy.\n-//\n-// There is also one other expr subtype: nonparen_expr disallows exprs\n-// surrounded by parens (including tuple expressions), this is\n-// necessary for BOX (place) expressions, so a parens expr following\n-// the BOX is always parsed as the place.\n \n stmts\n : stmt           { $$ = mk_node(\"stmts\", 1, $1); }\n | stmts stmt     { $$ = ext_node($1, 1, $2); }\n ;\n \n stmt\n-: let\n+: maybe_outer_attrs let     { $$ = $2; }\n |                 stmt_item\n |             PUB stmt_item { $$ = $2; }\n | outer_attrs     stmt_item { $$ = $2; }\n | outer_attrs PUB stmt_item { $$ = $3; }\n | full_block_expr\n-| block\n-| nonblock_expr ';'\n+| maybe_outer_attrs block   { $$ = $2; }\n+|             nonblock_expr ';'\n+| outer_attrs nonblock_expr ';' { $$ = $2; }\n | ';'                   { $$ = mk_none(); }\n ;\n \n@@ -1296,7 +1366,9 @@ path_expr\n // expressions.\n path_generic_args_with_colons\n : ident                                              { $$ = mk_node(\"components\", 1, $1); }\n+| SUPER                                              { $$ = mk_atom(\"Super\"); }\n | path_generic_args_with_colons MOD_SEP ident        { $$ = ext_node($1, 1, $3); }\n+| path_generic_args_with_colons MOD_SEP SUPER        { $$ = ext_node($1, 1, mk_atom(\"Super\")); }\n | path_generic_args_with_colons MOD_SEP generic_args { $$ = ext_node($1, 1, $3); }\n ;\n \n@@ -1313,6 +1385,7 @@ nonblock_expr\n | SELF                                                          { $$ = mk_node(\"ExprPath\", 1, mk_node(\"ident\", 1, mk_atom(\"self\"))); }\n | macro_expr                                                    { $$ = mk_node(\"ExprMac\", 1, $1); }\n | path_expr '{' struct_expr_fields '}'                          { $$ = mk_node(\"ExprStruct\", 2, $1, $3); }\n+| nonblock_expr '?'                                             { $$ = mk_node(\"ExprTry\", 1, $1); }\n | nonblock_expr '.' path_generic_args_with_colons               { $$ = mk_node(\"ExprField\", 2, $1, $3); }\n | nonblock_expr '.' LIT_INTEGER                                 { $$ = mk_node(\"ExprTupleIndex\", 1, $1); }\n | nonblock_expr '[' maybe_expr ']'                              { $$ = mk_node(\"ExprIndex\", 2, $1, $3); }\n@@ -1325,6 +1398,8 @@ nonblock_expr\n | RETURN expr                                                   { $$ = mk_node(\"ExprRet\", 1, $2); }\n | BREAK                                                         { $$ = mk_node(\"ExprBreak\", 0); }\n | BREAK lifetime                                                { $$ = mk_node(\"ExprBreak\", 1, $2); }\n+| YIELD                                                         { $$ = mk_node(\"ExprYield\", 0); }\n+| YIELD expr                                                    { $$ = mk_node(\"ExprYield\", 1, $2); }\n | nonblock_expr LARROW expr                                     { $$ = mk_node(\"ExprInPlace\", 2, $1, $3); }\n | nonblock_expr '=' expr                                        { $$ = mk_node(\"ExprAssign\", 2, $1, $3); }\n | nonblock_expr SHLEQ expr                                      { $$ = mk_node(\"ExprAssignShl\", 2, $1, $3); }\n@@ -1360,8 +1435,8 @@ nonblock_expr\n |               DOTDOT expr                                     { $$ = mk_node(\"ExprRange\", 2, mk_none(), $2); }\n |               DOTDOT                                          { $$ = mk_node(\"ExprRange\", 2, mk_none(), mk_none()); }\n | nonblock_expr AS ty                                           { $$ = mk_node(\"ExprCast\", 2, $1, $3); }\n-| BOX nonparen_expr                                             { $$ = mk_node(\"ExprBox\", 1, $2); }\n-| %prec BOXPLACE BOX '(' maybe_expr ')' nonblock_expr           { $$ = mk_node(\"ExprBox\", 2, $3, $5); }\n+| nonblock_expr ':' ty                                          { $$ = mk_node(\"ExprTypeAscr\", 2, $1, $3); }\n+| BOX expr                                                      { $$ = mk_node(\"ExprBox\", 1, $2); }\n | expr_qualified_path\n | nonblock_prefix_expr\n ;\n@@ -1373,6 +1448,7 @@ expr\n | SELF                                                { $$ = mk_node(\"ExprPath\", 1, mk_node(\"ident\", 1, mk_atom(\"self\"))); }\n | macro_expr                                          { $$ = mk_node(\"ExprMac\", 1, $1); }\n | path_expr '{' struct_expr_fields '}'                { $$ = mk_node(\"ExprStruct\", 2, $1, $3); }\n+| expr '?'                                            { $$ = mk_node(\"ExprTry\", 1, $1); }\n | expr '.' path_generic_args_with_colons              { $$ = mk_node(\"ExprField\", 2, $1, $3); }\n | expr '.' LIT_INTEGER                                { $$ = mk_node(\"ExprTupleIndex\", 1, $1); }\n | expr '[' maybe_expr ']'                             { $$ = mk_node(\"ExprIndex\", 2, $1, $3); }\n@@ -1385,6 +1461,8 @@ expr\n | RETURN expr                                         { $$ = mk_node(\"ExprRet\", 1, $2); }\n | BREAK                                               { $$ = mk_node(\"ExprBreak\", 0); }\n | BREAK ident                                         { $$ = mk_node(\"ExprBreak\", 1, $2); }\n+| YIELD                                               { $$ = mk_node(\"ExprYield\", 0); }\n+| YIELD expr                                          { $$ = mk_node(\"ExprYield\", 1, $2); }\n | expr LARROW expr                                    { $$ = mk_node(\"ExprInPlace\", 2, $1, $3); }\n | expr '=' expr                                       { $$ = mk_node(\"ExprAssign\", 2, $1, $3); }\n | expr SHLEQ expr                                     { $$ = mk_node(\"ExprAssignShl\", 2, $1, $3); }\n@@ -1420,69 +1498,8 @@ expr\n |      DOTDOT expr                                    { $$ = mk_node(\"ExprRange\", 2, mk_none(), $2); }\n |      DOTDOT                                         { $$ = mk_node(\"ExprRange\", 2, mk_none(), mk_none()); }\n | expr AS ty                                          { $$ = mk_node(\"ExprCast\", 2, $1, $3); }\n-| BOX nonparen_expr                                   { $$ = mk_node(\"ExprBox\", 1, $2); }\n-| %prec BOXPLACE BOX '(' maybe_expr ')' expr          { $$ = mk_node(\"ExprBox\", 2, $3, $5); }\n-| expr_qualified_path\n-| block_expr\n-| block\n-| nonblock_prefix_expr\n-;\n-\n-nonparen_expr\n-: lit                                                 { $$ = mk_node(\"ExprLit\", 1, $1); }\n-| %prec IDENT\n-  path_expr                                           { $$ = mk_node(\"ExprPath\", 1, $1); }\n-| SELF                                                { $$ = mk_node(\"ExprPath\", 1, mk_node(\"ident\", 1, mk_atom(\"self\"))); }\n-| macro_expr                                          { $$ = mk_node(\"ExprMac\", 1, $1); }\n-| path_expr '{' struct_expr_fields '}'                { $$ = mk_node(\"ExprStruct\", 2, $1, $3); }\n-| nonparen_expr '.' path_generic_args_with_colons     { $$ = mk_node(\"ExprField\", 2, $1, $3); }\n-| nonparen_expr '.' LIT_INTEGER                       { $$ = mk_node(\"ExprTupleIndex\", 1, $1); }\n-| nonparen_expr '[' maybe_expr ']'                    { $$ = mk_node(\"ExprIndex\", 2, $1, $3); }\n-| nonparen_expr '(' maybe_exprs ')'                   { $$ = mk_node(\"ExprCall\", 2, $1, $3); }\n-| '[' vec_expr ']'                                    { $$ = mk_node(\"ExprVec\", 1, $2); }\n-| CONTINUE                                            { $$ = mk_node(\"ExprAgain\", 0); }\n-| CONTINUE ident                                      { $$ = mk_node(\"ExprAgain\", 1, $2); }\n-| RETURN                                              { $$ = mk_node(\"ExprRet\", 0); }\n-| RETURN expr                                         { $$ = mk_node(\"ExprRet\", 1, $2); }\n-| BREAK                                               { $$ = mk_node(\"ExprBreak\", 0); }\n-| BREAK ident                                         { $$ = mk_node(\"ExprBreak\", 1, $2); }\n-| nonparen_expr LARROW nonparen_expr                  { $$ = mk_node(\"ExprInPlace\", 2, $1, $3); }\n-| nonparen_expr '=' nonparen_expr                     { $$ = mk_node(\"ExprAssign\", 2, $1, $3); }\n-| nonparen_expr SHLEQ nonparen_expr                   { $$ = mk_node(\"ExprAssignShl\", 2, $1, $3); }\n-| nonparen_expr SHREQ nonparen_expr                   { $$ = mk_node(\"ExprAssignShr\", 2, $1, $3); }\n-| nonparen_expr MINUSEQ nonparen_expr                 { $$ = mk_node(\"ExprAssignSub\", 2, $1, $3); }\n-| nonparen_expr ANDEQ nonparen_expr                   { $$ = mk_node(\"ExprAssignBitAnd\", 2, $1, $3); }\n-| nonparen_expr OREQ nonparen_expr                    { $$ = mk_node(\"ExprAssignBitOr\", 2, $1, $3); }\n-| nonparen_expr PLUSEQ nonparen_expr                  { $$ = mk_node(\"ExprAssignAdd\", 2, $1, $3); }\n-| nonparen_expr STAREQ nonparen_expr                  { $$ = mk_node(\"ExprAssignMul\", 2, $1, $3); }\n-| nonparen_expr SLASHEQ nonparen_expr                 { $$ = mk_node(\"ExprAssignDiv\", 2, $1, $3); }\n-| nonparen_expr CARETEQ nonparen_expr                 { $$ = mk_node(\"ExprAssignBitXor\", 2, $1, $3); }\n-| nonparen_expr PERCENTEQ nonparen_expr               { $$ = mk_node(\"ExprAssignRem\", 2, $1, $3); }\n-| nonparen_expr OROR nonparen_expr                    { $$ = mk_node(\"ExprBinary\", 3, mk_atom(\"BiOr\"), $1, $3); }\n-| nonparen_expr ANDAND nonparen_expr                  { $$ = mk_node(\"ExprBinary\", 3, mk_atom(\"BiAnd\"), $1, $3); }\n-| nonparen_expr EQEQ nonparen_expr                    { $$ = mk_node(\"ExprBinary\", 3, mk_atom(\"BiEq\"), $1, $3); }\n-| nonparen_expr NE nonparen_expr                      { $$ = mk_node(\"ExprBinary\", 3, mk_atom(\"BiNe\"), $1, $3); }\n-| nonparen_expr '<' nonparen_expr                     { $$ = mk_node(\"ExprBinary\", 3, mk_atom(\"BiLt\"), $1, $3); }\n-| nonparen_expr '>' nonparen_expr                     { $$ = mk_node(\"ExprBinary\", 3, mk_atom(\"BiGt\"), $1, $3); }\n-| nonparen_expr LE nonparen_expr                      { $$ = mk_node(\"ExprBinary\", 3, mk_atom(\"BiLe\"), $1, $3); }\n-| nonparen_expr GE nonparen_expr                      { $$ = mk_node(\"ExprBinary\", 3, mk_atom(\"BiGe\"), $1, $3); }\n-| nonparen_expr '|' nonparen_expr                     { $$ = mk_node(\"ExprBinary\", 3, mk_atom(\"BiBitOr\"), $1, $3); }\n-| nonparen_expr '^' nonparen_expr                     { $$ = mk_node(\"ExprBinary\", 3, mk_atom(\"BiBitXor\"), $1, $3); }\n-| nonparen_expr '&' nonparen_expr                     { $$ = mk_node(\"ExprBinary\", 3, mk_atom(\"BiBitAnd\"), $1, $3); }\n-| nonparen_expr SHL nonparen_expr                     { $$ = mk_node(\"ExprBinary\", 3, mk_atom(\"BiShl\"), $1, $3); }\n-| nonparen_expr SHR nonparen_expr                     { $$ = mk_node(\"ExprBinary\", 3, mk_atom(\"BiShr\"), $1, $3); }\n-| nonparen_expr '+' nonparen_expr                     { $$ = mk_node(\"ExprBinary\", 3, mk_atom(\"BiAdd\"), $1, $3); }\n-| nonparen_expr '-' nonparen_expr                     { $$ = mk_node(\"ExprBinary\", 3, mk_atom(\"BiSub\"), $1, $3); }\n-| nonparen_expr '*' nonparen_expr                     { $$ = mk_node(\"ExprBinary\", 3, mk_atom(\"BiMul\"), $1, $3); }\n-| nonparen_expr '/' nonparen_expr                     { $$ = mk_node(\"ExprBinary\", 3, mk_atom(\"BiDiv\"), $1, $3); }\n-| nonparen_expr '%' nonparen_expr                     { $$ = mk_node(\"ExprBinary\", 3, mk_atom(\"BiRem\"), $1, $3); }\n-| nonparen_expr DOTDOT                                { $$ = mk_node(\"ExprRange\", 2, $1, mk_none()); }\n-| nonparen_expr DOTDOT nonparen_expr                  { $$ = mk_node(\"ExprRange\", 2, $1, $3); }\n-|               DOTDOT nonparen_expr                  { $$ = mk_node(\"ExprRange\", 2, mk_none(), $2); }\n-|               DOTDOT                                { $$ = mk_node(\"ExprRange\", 2, mk_none(), mk_none()); }\n-| nonparen_expr AS ty                                 { $$ = mk_node(\"ExprCast\", 2, $1, $3); }\n-| BOX nonparen_expr                                   { $$ = mk_node(\"ExprBox\", 1, $2); }\n-| %prec BOXPLACE BOX '(' maybe_expr ')' expr          { $$ = mk_node(\"ExprBox\", 1, $3, $5); }\n+| expr ':' ty                                         { $$ = mk_node(\"ExprTypeAscr\", 2, $1, $3); }\n+| BOX expr                                            { $$ = mk_node(\"ExprBox\", 1, $2); }\n | expr_qualified_path\n | block_expr\n | block\n@@ -1495,6 +1512,7 @@ expr_nostruct\n   path_expr                                           { $$ = mk_node(\"ExprPath\", 1, $1); }\n | SELF                                                { $$ = mk_node(\"ExprPath\", 1, mk_node(\"ident\", 1, mk_atom(\"self\"))); }\n | macro_expr                                          { $$ = mk_node(\"ExprMac\", 1, $1); }\n+| expr_nostruct '?'                                   { $$ = mk_node(\"ExprTry\", 1, $1); }\n | expr_nostruct '.' path_generic_args_with_colons     { $$ = mk_node(\"ExprField\", 2, $1, $3); }\n | expr_nostruct '.' LIT_INTEGER                       { $$ = mk_node(\"ExprTupleIndex\", 1, $1); }\n | expr_nostruct '[' maybe_expr ']'                    { $$ = mk_node(\"ExprIndex\", 2, $1, $3); }\n@@ -1507,6 +1525,8 @@ expr_nostruct\n | RETURN expr                                         { $$ = mk_node(\"ExprRet\", 1, $2); }\n | BREAK                                               { $$ = mk_node(\"ExprBreak\", 0); }\n | BREAK ident                                         { $$ = mk_node(\"ExprBreak\", 1, $2); }\n+| YIELD                                               { $$ = mk_node(\"ExprYield\", 0); }\n+| YIELD expr                                          { $$ = mk_node(\"ExprYield\", 1, $2); }\n | expr_nostruct LARROW expr_nostruct                  { $$ = mk_node(\"ExprInPlace\", 2, $1, $3); }\n | expr_nostruct '=' expr_nostruct                     { $$ = mk_node(\"ExprAssign\", 2, $1, $3); }\n | expr_nostruct SHLEQ expr_nostruct                   { $$ = mk_node(\"ExprAssignShl\", 2, $1, $3); }\n@@ -1542,8 +1562,8 @@ expr_nostruct\n |               DOTDOT expr_nostruct                  { $$ = mk_node(\"ExprRange\", 2, mk_none(), $2); }\n |               DOTDOT                                { $$ = mk_node(\"ExprRange\", 2, mk_none(), mk_none()); }\n | expr_nostruct AS ty                                 { $$ = mk_node(\"ExprCast\", 2, $1, $3); }\n-| BOX nonparen_expr                                   { $$ = mk_node(\"ExprBox\", 1, $2); }\n-| %prec BOXPLACE BOX '(' maybe_expr ')' expr_nostruct { $$ = mk_node(\"ExprBox\", 1, $3, $5); }\n+| expr_nostruct ':' ty                                { $$ = mk_node(\"ExprTypeAscr\", 2, $1, $3); }\n+| BOX expr                                            { $$ = mk_node(\"ExprBox\", 1, $2); }\n | expr_qualified_path\n | block_expr\n | block\n@@ -1558,7 +1578,6 @@ nonblock_prefix_expr_nostruct\n | ANDAND maybe_mut expr_nostruct            { $$ = mk_node(\"ExprAddrOf\", 1, mk_node(\"ExprAddrOf\", 2, $2, $3)); }\n | lambda_expr_nostruct\n | MOVE lambda_expr_nostruct                 { $$ = $2; }\n-| proc_expr_nostruct\n ;\n \n nonblock_prefix_expr\n@@ -1569,7 +1588,6 @@ nonblock_prefix_expr\n | ANDAND maybe_mut expr            { $$ = mk_node(\"ExprAddrOf\", 1, mk_node(\"ExprAddrOf\", 2, $2, $3)); }\n | lambda_expr\n | MOVE lambda_expr                 { $$ = $2; }\n-| proc_expr\n ;\n \n expr_qualified_path\n@@ -1606,43 +1624,42 @@ maybe_as_trait_ref\n \n lambda_expr\n : %prec LAMBDA\n-  OROR ret_ty expr                                        { $$ = mk_node(\"ExprFnBlock\", 3, mk_none(), $2, $3); }\n-| %prec LAMBDA\n-  '|' maybe_unboxed_closure_kind '|' ret_ty expr          { $$ = mk_node(\"ExprFnBlock\", 3, mk_none(), $4, $5); }\n+  OROR ret_ty expr                                    { $$ = mk_node(\"ExprFnBlock\", 3, mk_none(), $2, $3); }\n | %prec LAMBDA\n-  '|' inferrable_params '|' ret_ty expr                   { $$ = mk_node(\"ExprFnBlock\", 3, $2, $4, $5); }\n+  '|' '|' ret_ty expr                                 { $$ = mk_node(\"ExprFnBlock\", 3, mk_none(), $3, $4); }\n | %prec LAMBDA\n-  '|' '&' maybe_mut ':' inferrable_params '|' ret_ty expr { $$ = mk_node(\"ExprFnBlock\", 3, $5, $7, $8); }\n+  '|' inferrable_params '|' ret_ty expr               { $$ = mk_node(\"ExprFnBlock\", 3, $2, $4, $5); }\n | %prec LAMBDA\n-  '|' ':' inferrable_params '|' ret_ty expr               { $$ = mk_node(\"ExprFnBlock\", 3, $3, $5, $6); }\n+  '|' inferrable_params OROR lambda_expr_no_first_bar { $$ = mk_node(\"ExprFnBlock\", 3, $2, mk_none(), $4); }\n ;\n \n-lambda_expr_nostruct\n+lambda_expr_no_first_bar\n : %prec LAMBDA\n-  OROR expr_nostruct                                        { $$ = mk_node(\"ExprFnBlock\", 2, mk_none(), $2); }\n-| %prec LAMBDA\n-  '|' maybe_unboxed_closure_kind '|'  expr_nostruct         { $$ = mk_node(\"ExprFnBlock\", 2, mk_none(), $4); }\n+  '|' ret_ty expr                                 { $$ = mk_node(\"ExprFnBlock\", 3, mk_none(), $2, $3); }\n | %prec LAMBDA\n-  '|' inferrable_params '|' expr_nostruct                   { $$ = mk_node(\"ExprFnBlock\", 2, $2, $4); }\n+  inferrable_params '|' ret_ty expr               { $$ = mk_node(\"ExprFnBlock\", 3, $1, $3, $4); }\n | %prec LAMBDA\n-  '|' '&' maybe_mut ':' inferrable_params '|' expr_nostruct { $$ = mk_node(\"ExprFnBlock\", 2, $5, $7); }\n-| %prec LAMBDA\n-  '|' ':' inferrable_params '|' expr_nostruct               { $$ = mk_node(\"ExprFnBlock\", 2, $3, $5); }\n-\n+  inferrable_params OROR lambda_expr_no_first_bar { $$ = mk_node(\"ExprFnBlock\", 3, $1, mk_none(), $3); }\n ;\n \n-proc_expr\n+lambda_expr_nostruct\n : %prec LAMBDA\n-  PROC '(' ')' expr                         { $$ = mk_node(\"ExprProc\", 2, mk_none(), $4); }\n+  OROR expr_nostruct                                           { $$ = mk_node(\"ExprFnBlock\", 2, mk_none(), $2); }\n+| %prec LAMBDA\n+  '|' '|' ret_ty expr_nostruct                                 { $$ = mk_node(\"ExprFnBlock\", 3, mk_none(), $3, $4); }\n | %prec LAMBDA\n-  PROC '(' inferrable_params ')' expr       { $$ = mk_node(\"ExprProc\", 2, $3, $5); }\n+  '|' inferrable_params '|' expr_nostruct                      { $$ = mk_node(\"ExprFnBlock\", 2, $2, $4); }\n+| %prec LAMBDA\n+  '|' inferrable_params OROR lambda_expr_nostruct_no_first_bar { $$ = mk_node(\"ExprFnBlock\", 3, $2, mk_none(), $4); }\n ;\n \n-proc_expr_nostruct\n+lambda_expr_nostruct_no_first_bar\n : %prec LAMBDA\n-  PROC '(' ')' expr_nostruct                     { $$ = mk_node(\"ExprProc\", 2, mk_none(), $4); }\n+  '|' ret_ty expr_nostruct                                 { $$ = mk_node(\"ExprFnBlock\", 3, mk_none(), $2, $3); }\n+| %prec LAMBDA\n+  inferrable_params '|' ret_ty expr_nostruct               { $$ = mk_node(\"ExprFnBlock\", 3, $1, $3, $4); }\n | %prec LAMBDA\n-  PROC '(' inferrable_params ')' expr_nostruct   { $$ = mk_node(\"ExprProc\", 2, $3, $5); }\n+  inferrable_params OROR lambda_expr_nostruct_no_first_bar { $$ = mk_node(\"ExprFnBlock\", 3, $1, mk_none(), $3); }\n ;\n \n vec_expr\n@@ -1654,6 +1671,7 @@ struct_expr_fields\n : field_inits\n | field_inits ','\n | maybe_field_inits default_field_init { $$ = ext_node($1, 1, $2); }\n+| %empty                               { $$ = mk_none(); }\n ;\n \n maybe_field_inits\n@@ -1668,7 +1686,9 @@ field_inits\n ;\n \n field_init\n-: ident ':' expr   { $$ = mk_node(\"FieldInit\", 2, $1, $3); }\n+: ident                { $$ = mk_node(\"FieldInit\", 1, $1); }\n+| ident ':' expr       { $$ = mk_node(\"FieldInit\", 2, $1, $3); }\n+| LIT_INTEGER ':' expr { $$ = mk_node(\"FieldInit\", 2, mk_atom(yytext), $3); }\n ;\n \n default_field_init\n@@ -1689,10 +1709,18 @@ block_expr\n \n full_block_expr\n : block_expr\n-| full_block_expr '.' path_generic_args_with_colons %prec IDENT         { $$ = mk_node(\"ExprField\", 2, $1, $3); }\n-| full_block_expr '.' path_generic_args_with_colons '[' maybe_expr ']'  { $$ = mk_node(\"ExprIndex\", 3, $1, $3, $5); }\n-| full_block_expr '.' path_generic_args_with_colons '(' maybe_exprs ')' { $$ = mk_node(\"ExprCall\", 3, $1, $3, $5); }\n-| full_block_expr '.' LIT_INTEGER                                       { $$ = mk_node(\"ExprTupleIndex\", 1, $1); }\n+| block_expr_dot\n+;\n+\n+block_expr_dot\n+: block_expr     '.' path_generic_args_with_colons %prec IDENT         { $$ = mk_node(\"ExprField\", 2, $1, $3); }\n+| block_expr_dot '.' path_generic_args_with_colons %prec IDENT         { $$ = mk_node(\"ExprField\", 2, $1, $3); }\n+| block_expr     '.' path_generic_args_with_colons '[' maybe_expr ']'  { $$ = mk_node(\"ExprIndex\", 3, $1, $3, $5); }\n+| block_expr_dot '.' path_generic_args_with_colons '[' maybe_expr ']'  { $$ = mk_node(\"ExprIndex\", 3, $1, $3, $5); }\n+| block_expr     '.' path_generic_args_with_colons '(' maybe_exprs ')' { $$ = mk_node(\"ExprCall\", 3, $1, $3, $5); }\n+| block_expr_dot '.' path_generic_args_with_colons '(' maybe_exprs ')' { $$ = mk_node(\"ExprCall\", 3, $1, $3, $5); }\n+| block_expr     '.' LIT_INTEGER                                       { $$ = mk_node(\"ExprTupleIndex\", 1, $1); }\n+| block_expr_dot '.' LIT_INTEGER                                       { $$ = mk_node(\"ExprTupleIndex\", 1, $1); }\n ;\n \n expr_match\n@@ -1714,12 +1742,13 @@ match_clause\n ;\n \n nonblock_match_clause\n-: maybe_outer_attrs pats_or maybe_guard FAT_ARROW nonblock_expr   { $$ = mk_node(\"Arm\", 4, $1, $2, $3, $5); }\n-| maybe_outer_attrs pats_or maybe_guard FAT_ARROW full_block_expr { $$ = mk_node(\"Arm\", 4, $1, $2, $3, $5); }\n+: maybe_outer_attrs pats_or maybe_guard FAT_ARROW nonblock_expr  { $$ = mk_node(\"ArmNonblock\", 4, $1, $2, $3, $5); }\n+| maybe_outer_attrs pats_or maybe_guard FAT_ARROW block_expr_dot { $$ = mk_node(\"ArmNonblock\", 4, $1, $2, $3, $5); }\n ;\n \n block_match_clause\n-: maybe_outer_attrs pats_or maybe_guard FAT_ARROW block { $$ = mk_node(\"Arm\", 4, $1, $2, $3, $5); }\n+: maybe_outer_attrs pats_or maybe_guard FAT_ARROW block      { $$ = mk_node(\"ArmBlock\", 4, $1, $2, $3, $5); }\n+| maybe_outer_attrs pats_or maybe_guard FAT_ARROW block_expr { $$ = mk_node(\"ArmBlock\", 4, $1, $2, $3, $5); }\n ;\n \n maybe_guard\n@@ -1796,6 +1825,10 @@ maybe_ident\n \n ident\n : IDENT                      { $$ = mk_node(\"ident\", 1, mk_atom(yytext)); }\n+// Weak keywords that can be used as identifiers\n+| CATCH                      { $$ = mk_node(\"ident\", 1, mk_atom(yytext)); }\n+| DEFAULT                    { $$ = mk_node(\"ident\", 1, mk_atom(yytext)); }\n+| UNION                      { $$ = mk_node(\"ident\", 1, mk_atom(yytext)); }\n ;\n \n unpaired_token\n@@ -1836,35 +1869,52 @@ unpaired_token\n | LIFETIME                   { $$ = mk_atom(yytext); }\n | SELF                       { $$ = mk_atom(yytext); }\n | STATIC                     { $$ = mk_atom(yytext); }\n+| ABSTRACT                   { $$ = mk_atom(yytext); }\n+| ALIGNOF                    { $$ = mk_atom(yytext); }\n | AS                         { $$ = mk_atom(yytext); }\n+| BECOME                     { $$ = mk_atom(yytext); }\n | BREAK                      { $$ = mk_atom(yytext); }\n+| CATCH                      { $$ = mk_atom(yytext); }\n | CRATE                      { $$ = mk_atom(yytext); }\n+| DEFAULT                    { $$ = mk_atom(yytext); }\n+| DO                         { $$ = mk_atom(yytext); }\n | ELSE                       { $$ = mk_atom(yytext); }\n | ENUM                       { $$ = mk_atom(yytext); }\n | EXTERN                     { $$ = mk_atom(yytext); }\n | FALSE                      { $$ = mk_atom(yytext); }\n+| FINAL                      { $$ = mk_atom(yytext); }\n | FN                         { $$ = mk_atom(yytext); }\n | FOR                        { $$ = mk_atom(yytext); }\n | IF                         { $$ = mk_atom(yytext); }\n | IMPL                       { $$ = mk_atom(yytext); }\n | IN                         { $$ = mk_atom(yytext); }\n | LET                        { $$ = mk_atom(yytext); }\n | LOOP                       { $$ = mk_atom(yytext); }\n+| MACRO                      { $$ = mk_atom(yytext); }\n | MATCH                      { $$ = mk_atom(yytext); }\n | MOD                        { $$ = mk_atom(yytext); }\n | MOVE                       { $$ = mk_atom(yytext); }\n | MUT                        { $$ = mk_atom(yytext); }\n+| OFFSETOF                   { $$ = mk_atom(yytext); }\n+| OVERRIDE                   { $$ = mk_atom(yytext); }\n | PRIV                       { $$ = mk_atom(yytext); }\n | PUB                        { $$ = mk_atom(yytext); }\n+| PURE                       { $$ = mk_atom(yytext); }\n | REF                        { $$ = mk_atom(yytext); }\n | RETURN                     { $$ = mk_atom(yytext); }\n | STRUCT                     { $$ = mk_atom(yytext); }\n+| SIZEOF                     { $$ = mk_atom(yytext); }\n+| SUPER                      { $$ = mk_atom(yytext); }\n | TRUE                       { $$ = mk_atom(yytext); }\n | TRAIT                      { $$ = mk_atom(yytext); }\n | TYPE                       { $$ = mk_atom(yytext); }\n+| UNION                      { $$ = mk_atom(yytext); }\n | UNSAFE                     { $$ = mk_atom(yytext); }\n+| UNSIZED                    { $$ = mk_atom(yytext); }\n | USE                        { $$ = mk_atom(yytext); }\n+| VIRTUAL                    { $$ = mk_atom(yytext); }\n | WHILE                      { $$ = mk_atom(yytext); }\n+| YIELD                      { $$ = mk_atom(yytext); }\n | CONTINUE                   { $$ = mk_atom(yytext); }\n | PROC                       { $$ = mk_atom(yytext); }\n | BOX                        { $$ = mk_atom(yytext); }\n@@ -1942,4 +1992,4 @@ brackets_delimited_token_trees\n                $2,\n                mk_node(\"TTTok\", 1, mk_atom(\"]\")));\n }\n-;\n\\ No newline at end of file\n+;"}, {"sha": "15ea738ed0057edd741da93228106a9c3aa8fca8", "filename": "src/grammar/tokens.h", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Fgrammar%2Ftokens.h", "raw_url": "https://github.com/rust-lang/rust/raw/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Fgrammar%2Ftokens.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar%2Ftokens.h?ref=23a5fb811e3e0c76153c9161c7a6eedb2714b554", "patch": "@@ -30,6 +30,7 @@ enum Token {\n   DOTDOT,\n   DOTDOTDOT,\n   MOD_SEP,\n+  LARROW,\n   RARROW,\n   FAT_ARROW,\n   LIT_BYTE,\n@@ -47,35 +48,52 @@ enum Token {\n   // keywords\n   SELF,\n   STATIC,\n+  ABSTRACT,\n+  ALIGNOF,\n   AS,\n+  BECOME,\n   BREAK,\n+  CATCH,\n   CRATE,\n+  DEFAULT,\n+  DO,\n   ELSE,\n   ENUM,\n   EXTERN,\n   FALSE,\n+  FINAL,\n   FN,\n   FOR,\n   IF,\n   IMPL,\n   IN,\n   LET,\n   LOOP,\n+  MACRO,\n   MATCH,\n   MOD,\n   MOVE,\n   MUT,\n+  OFFSETOF,\n+  OVERRIDE,\n   PRIV,\n   PUB,\n+  PURE,\n   REF,\n   RETURN,\n+  SIZEOF,\n   STRUCT,\n+  SUPER,\n+  UNION,\n   TRUE,\n   TRAIT,\n   TYPE,\n   UNSAFE,\n+  UNSIZED,\n   USE,\n+  VIRTUAL,\n   WHILE,\n+  YIELD,\n   CONTINUE,\n   PROC,\n   BOX,"}, {"sha": "79292d390e5d25b71059656be8383835b13a9cfe", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 40, "deletions": 4, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=23a5fb811e3e0c76153c9161c7a6eedb2714b554", "patch": "@@ -269,7 +269,38 @@ impl<T: ?Sized> Box<T> {\n     #[stable(feature = \"box_raw\", since = \"1.4.0\")]\n     #[inline]\n     pub unsafe fn from_raw(raw: *mut T) -> Self {\n-        mem::transmute(raw)\n+        Box::from_unique(Unique::new_unchecked(raw))\n+    }\n+\n+    /// Constructs a `Box` from a `Unique<T>` pointer.\n+    ///\n+    /// After calling this function, the memory is owned by a `Box` and `T` can\n+    /// then be destroyed and released upon drop.\n+    ///\n+    /// # Safety\n+    ///\n+    /// A `Unique<T>` can be safely created via [`Unique::new`] and thus doesn't\n+    /// necessarily own the data pointed to nor is the data guaranteed to live\n+    /// as long as the pointer.\n+    ///\n+    /// [`Unique::new`]: ../../core/ptr/struct.Unique.html#method.new\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(unique)]\n+    ///\n+    /// fn main() {\n+    ///     let x = Box::new(5);\n+    ///     let ptr = Box::into_unique(x);\n+    ///     let x = unsafe { Box::from_unique(ptr) };\n+    /// }\n+    /// ```\n+    #[unstable(feature = \"unique\", reason = \"needs an RFC to flesh out design\",\n+               issue = \"27730\")]\n+    #[inline]\n+    pub unsafe fn from_unique(u: Unique<T>) -> Self {\n+        mem::transmute(u)\n     }\n \n     /// Consumes the `Box`, returning the wrapped raw pointer.\n@@ -295,21 +326,26 @@ impl<T: ?Sized> Box<T> {\n     #[stable(feature = \"box_raw\", since = \"1.4.0\")]\n     #[inline]\n     pub fn into_raw(b: Box<T>) -> *mut T {\n-        unsafe { mem::transmute(b) }\n+        Box::into_unique(b).as_ptr()\n     }\n \n     /// Consumes the `Box`, returning the wrapped pointer as `Unique<T>`.\n     ///\n     /// After calling this function, the caller is responsible for the\n     /// memory previously managed by the `Box`. In particular, the\n     /// caller should properly destroy `T` and release the memory. The\n-    /// proper way to do so is to convert the raw pointer back into a\n-    /// `Box` with the [`Box::from_raw`] function.\n+    /// proper way to do so is to either convert the `Unique<T>` pointer:\n+    ///\n+    /// - Into a `Box` with the [`Box::from_unique`] function.\n+    ///\n+    /// - Into a raw pointer and back into a `Box` with the [`Box::from_raw`]\n+    ///   function.\n     ///\n     /// Note: this is an associated function, which means that you have\n     /// to call it as `Box::into_unique(b)` instead of `b.into_unique()`. This\n     /// is so that there is no conflict with a method on the inner type.\n     ///\n+    /// [`Box::from_unique`]: struct.Box.html#method.from_unique\n     /// [`Box::from_raw`]: struct.Box.html#method.from_raw\n     ///\n     /// # Examples"}, {"sha": "680a0f5b2c03febe0f73663c7b7f476e469e1fb4", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=23a5fb811e3e0c76153c9161c7a6eedb2714b554", "patch": "@@ -836,7 +836,7 @@ pub unsafe fn transmute_copy<T, U>(src: &T) -> U {\n ///\n /// See the `discriminant` function in this module for more information.\n #[stable(feature = \"discriminant_value\", since = \"1.21.0\")]\n-pub struct Discriminant<T>(u64, PhantomData<*const T>);\n+pub struct Discriminant<T>(u64, PhantomData<fn() -> T>);\n \n // N.B. These trait implementations cannot be derived because we don't want any bounds on T.\n "}, {"sha": "f55a1c81463f77ab0a8a6dd7c1946ae3c0c33a4a", "filename": "src/libcore/tests/mem.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Flibcore%2Ftests%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Flibcore%2Ftests%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fmem.rs?ref=23a5fb811e3e0c76153c9161c7a6eedb2714b554", "patch": "@@ -121,3 +121,19 @@ fn test_transmute() {\n     }\n }\n \n+#[test]\n+#[allow(dead_code)]\n+fn test_discriminant_send_sync() {\n+    enum Regular {\n+        A,\n+        B(i32)\n+    }\n+    enum NotSendSync {\n+        A(*const i32)\n+    }\n+\n+    fn is_send_sync<T: Send + Sync>() { }\n+\n+    is_send_sync::<Discriminant<Regular>>();\n+    is_send_sync::<Discriminant<NotSendSync>>();\n+}"}, {"sha": "cf30966fa89715c2ff695069b5ca9f00321df21f", "filename": "src/libproc_macro/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Flibproc_macro%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Flibproc_macro%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Flib.rs?ref=23a5fb811e3e0c76153c9161c7a6eedb2714b554", "patch": "@@ -488,7 +488,7 @@ impl Literal {\n     pub fn string(string: &str) -> Literal {\n         let mut escaped = String::new();\n         for ch in string.chars() {\n-            escaped.extend(ch.escape_unicode());\n+            escaped.extend(ch.escape_debug());\n         }\n         Literal(token::Literal(token::Lit::Str_(Symbol::intern(&escaped)), None))\n     }"}, {"sha": "fc1c5e187ecc7b79d95d67dcd4df548b66f0ad44", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=23a5fb811e3e0c76153c9161c7a6eedb2714b554", "patch": "@@ -1100,6 +1100,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"generate a graphical HTML report of time spent in trans and LLVM\"),\n     thinlto: bool = (false, parse_bool, [TRACKED],\n         \"enable ThinLTO when possible\"),\n+    inline_in_all_cgus: Option<bool> = (None, parse_opt_bool, [TRACKED],\n+        \"control whether #[inline] functions are in all cgus\"),\n }\n \n pub fn default_lib_output() -> CrateType {\n@@ -1711,7 +1713,7 @@ pub fn build_session_options_and_crate_config(matches: &getopts::Matches)\n \n     let codegen_units = codegen_units.unwrap_or_else(|| {\n         match opt_level {\n-            // If we're compiling at `-O0` then default to 32 codegen units.\n+            // If we're compiling at `-O0` then default to 16 codegen units.\n             // The number here shouldn't matter too too much as debug mode\n             // builds don't rely on performance at all, meaning that lost\n             // opportunities for inlining through multiple codegen units is\n@@ -1729,7 +1731,21 @@ pub fn build_session_options_and_crate_config(matches: &getopts::Matches)\n             // unit takes *too* long to build we'll be guaranteed that all\n             // cpus will finish pretty closely to one another and we should\n             // make relatively optimal use of system resources\n-            OptLevel::No => 32,\n+            //\n+            // Another note worth mentioning here, however, is that this number\n+            // isn't *too* high. When codegen units are increased that means we\n+            // currently have to codegen `#[inline]` functions into each codegen\n+            // unit, which means the more codegen units we're using the more we\n+            // may be generating. In other words, increasing codegen units may\n+            // increase the overall work the compiler does. If we don't have\n+            // enough cores to make up for this loss then increasing the number\n+            // of codegen units could become an overall loss!\n+            //\n+            // As a result we choose a hopefully conservative value 16, which\n+            // should be more than the number of cpus of most hardware compiling\n+            // Rust but also not too much for 2-4 core machines to have too much\n+            // loss of compile time.\n+            OptLevel::No => 16,\n \n             // All other optimization levels default use one codegen unit,\n             // the historical default in Rust for a Long Time."}, {"sha": "9af4606f1f1f616a9a8f7117fb97a09b3fa438cf", "filename": "src/librustc_back/target/le32_unknown_nacl.rs", "status": "removed", "additions": 0, "deletions": 51, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/a263a78b28dd1cef60025b0681689d7b6188d693/src%2Flibrustc_back%2Ftarget%2Fle32_unknown_nacl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a263a78b28dd1cef60025b0681689d7b6188d693/src%2Flibrustc_back%2Ftarget%2Fle32_unknown_nacl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fle32_unknown_nacl.rs?ref=a263a78b28dd1cef60025b0681689d7b6188d693", "patch": "@@ -1,51 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-use LinkerFlavor;\n-use super::{LinkArgs, Target, TargetOptions, TargetResult};\n-\n-pub fn target() -> TargetResult {\n-    let mut pre_link_args = LinkArgs::new();\n-    pre_link_args.insert(LinkerFlavor::Gcc,\n-                         vec![\"--pnacl-exceptions=sjlj\".to_string(),\n-                              \"--target=le32-unknown-nacl\".to_string(),\n-                              \"-Wl,--start-group\".to_string()]);\n-    let mut post_link_args = LinkArgs::new();\n-    post_link_args.insert(LinkerFlavor::Gcc,\n-                          vec![\"-Wl,--end-group\".to_string()]);\n-\n-    let opts = TargetOptions {\n-        linker: \"pnacl-clang\".to_string(),\n-        ar: \"pnacl-ar\".to_string(),\n-\n-        pre_link_args,\n-        post_link_args,\n-        dynamic_linking: false,\n-        executables: true,\n-        exe_suffix: \".pexe\".to_string(),\n-        linker_is_gnu: true,\n-        allow_asm: false,\n-        max_atomic_width: Some(32),\n-        .. Default::default()\n-    };\n-    Ok(Target {\n-        llvm_target: \"le32-unknown-nacl\".to_string(),\n-        target_endian: \"little\".to_string(),\n-        target_pointer_width: \"32\".to_string(),\n-        target_c_int_width: \"32\".to_string(),\n-        target_os: \"nacl\".to_string(),\n-        target_env: \"newlib\".to_string(),\n-        target_vendor: \"unknown\".to_string(),\n-        data_layout: \"e-i64:64:64-p:32:32:32-v128:32:32\".to_string(),\n-        arch: \"le32\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n-        options: opts,\n-    })\n-}"}, {"sha": "039e015365651032998b36b07a4dcca048746066", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=23a5fb811e3e0c76153c9161c7a6eedb2714b554", "patch": "@@ -215,7 +215,6 @@ supported_targets! {\n     (\"i686-pc-windows-msvc\", i686_pc_windows_msvc),\n     (\"i586-pc-windows-msvc\", i586_pc_windows_msvc),\n \n-    (\"le32-unknown-nacl\", le32_unknown_nacl),\n     (\"asmjs-unknown-emscripten\", asmjs_unknown_emscripten),\n     (\"wasm32-unknown-emscripten\", wasm32_unknown_emscripten),\n     (\"wasm32-experimental-emscripten\", wasm32_experimental_emscripten),"}, {"sha": "56d5f5ffa3f6c6abe2756878357433892b529e70", "filename": "src/librustc_data_structures/graph/mod.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Flibrustc_data_structures%2Fgraph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Flibrustc_data_structures%2Fgraph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fgraph%2Fmod.rs?ref=23a5fb811e3e0c76153c9161c7a6eedb2714b554", "patch": "@@ -31,7 +31,7 @@\n //! be indexed by the direction (see the type `Direction`).\n \n use bitvec::BitVector;\n-use std::fmt::{Formatter, Error, Debug};\n+use std::fmt::Debug;\n use std::usize;\n use snapshot_vec::{SnapshotVec, SnapshotVecDelegate};\n \n@@ -48,6 +48,7 @@ pub struct Node<N> {\n     pub data: N,\n }\n \n+#[derive(Debug)]\n pub struct Edge<E> {\n     next_edge: [EdgeIndex; 2], // see module comment\n     source: NodeIndex,\n@@ -69,18 +70,6 @@ impl<N> SnapshotVecDelegate for Edge<N> {\n     fn reverse(_: &mut Vec<Edge<N>>, _: ()) {}\n }\n \n-impl<E: Debug> Debug for Edge<E> {\n-    fn fmt(&self, f: &mut Formatter) -> Result<(), Error> {\n-        write!(f,\n-               \"Edge {{ next_edge: [{:?}, {:?}], source: {:?}, target: {:?}, data: {:?} }}\",\n-               self.next_edge[0],\n-               self.next_edge[1],\n-               self.source,\n-               self.target,\n-               self.data)\n-    }\n-}\n-\n #[derive(Copy, Clone, PartialEq, Eq, Debug, Hash)]\n pub struct NodeIndex(pub usize);\n "}, {"sha": "cd21060aff652ad343a08bb35fa22c1dc31d2d87", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=23a5fb811e3e0c76153c9161c7a6eedb2714b554", "patch": "@@ -1238,7 +1238,7 @@ pub fn monitor<F: FnOnce() + Send + 'static>(f: F) {\n                              errors::Level::Note);\n             }\n \n-            writeln!(io::stderr(), \"{}\", str::from_utf8(&data.lock().unwrap()).unwrap()).unwrap();\n+            eprintln!(\"{}\", str::from_utf8(&data.lock().unwrap()).unwrap());\n         }\n \n         exit_on_err();"}, {"sha": "75efe135f65e784545dbd7375e100304500e49c3", "filename": "src/librustc_llvm/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Flibrustc_llvm%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Flibrustc_llvm%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fbuild.rs?ref=23a5fb811e3e0c76153c9161c7a6eedb2714b554", "patch": "@@ -88,7 +88,7 @@ fn main() {\n     let is_crossed = target != host;\n \n     let mut optional_components =\n-        vec![\"x86\", \"arm\", \"aarch64\", \"mips\", \"powerpc\", \"pnacl\",\n+        vec![\"x86\", \"arm\", \"aarch64\", \"mips\", \"powerpc\",\n              \"systemz\", \"jsbackend\", \"webassembly\", \"msp430\", \"sparc\", \"nvptx\"];\n \n     let mut version_cmd = Command::new(&llvm_config);"}, {"sha": "98172bca1778625da8ce88b02513b4788055a9b8", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=23a5fb811e3e0c76153c9161c7a6eedb2714b554", "patch": "@@ -346,10 +346,6 @@ pub fn initialize_available_targets() {\n                  LLVMInitializePowerPCTargetMC,\n                  LLVMInitializePowerPCAsmPrinter,\n                  LLVMInitializePowerPCAsmParser);\n-    init_target!(llvm_component = \"pnacl\",\n-                 LLVMInitializePNaClTargetInfo,\n-                 LLVMInitializePNaClTarget,\n-                 LLVMInitializePNaClTargetMC);\n     init_target!(llvm_component = \"systemz\",\n                  LLVMInitializeSystemZTargetInfo,\n                  LLVMInitializeSystemZTarget,"}, {"sha": "c3b6ede24b0d423179873706d7305cb4fb4c390e", "filename": "src/librustc_trans/abi.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Flibrustc_trans%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Flibrustc_trans%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fabi.rs?ref=23a5fb811e3e0c76153c9161c7a6eedb2714b554", "patch": "@@ -751,9 +751,7 @@ impl<'a, 'tcx> FnType<'tcx> {\n                 Some(ty.boxed_ty())\n             }\n \n-            ty::TyRef(b, mt) => {\n-                use rustc::ty::{BrAnon, ReLateBound};\n-\n+            ty::TyRef(_, mt) => {\n                 // `&mut` pointer parameters never alias other parameters, or mutable global data\n                 //\n                 // `&T` where `T` contains no `UnsafeCell<U>` is immutable, and can be marked as\n@@ -779,13 +777,6 @@ impl<'a, 'tcx> FnType<'tcx> {\n                     arg.attrs.set(ArgAttribute::ReadOnly);\n                 }\n \n-                // When a reference in an argument has no named lifetime, it's\n-                // impossible for that reference to escape this function\n-                // (returned or stored beyond the call by a closure).\n-                if let ReLateBound(_, BrAnon(_)) = *b {\n-                    arg.attrs.set(ArgAttribute::NoCapture);\n-                }\n-\n                 Some(mt.ty)\n             }\n             _ => None"}, {"sha": "66a27f1c4a9b1d91e6365d02baf98d2a57d65295", "filename": "src/librustc_trans/back/symbol_names.rs", "status": "modified", "additions": 38, "deletions": 16, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Flibrustc_trans%2Fback%2Fsymbol_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Flibrustc_trans%2Fback%2Fsymbol_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fsymbol_names.rs?ref=23a5fb811e3e0c76153c9161c7a6eedb2714b554", "patch": "@@ -98,8 +98,10 @@\n //! DefPaths which are much more robust in the face of changes to the code base.\n \n use monomorphize::Instance;\n+use trans_item::{TransItemExt, InstantiationMode};\n \n use rustc::middle::weak_lang_items;\n+use rustc::middle::trans::TransItem;\n use rustc::hir::def_id::DefId;\n use rustc::hir::map as hir_map;\n use rustc::ty::{self, Ty, TyCtxt, TypeFoldable};\n@@ -150,7 +152,10 @@ pub fn provide(providers: &mut Providers) {\n fn get_symbol_hash<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n                              // the DefId of the item this name is for\n-                             def_id: Option<DefId>,\n+                             def_id: DefId,\n+\n+                             // instance this name will be for\n+                             instance: Instance<'tcx>,\n \n                              // type of the item, without any generic\n                              // parameters substituted; this is\n@@ -160,7 +165,7 @@ fn get_symbol_hash<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n                              // values for generic type parameters,\n                              // if any.\n-                             substs: Option<&'tcx Substs<'tcx>>)\n+                             substs: &'tcx Substs<'tcx>)\n                              -> u64 {\n     debug!(\"get_symbol_hash(def_id={:?}, parameters={:?})\", def_id, substs);\n \n@@ -170,7 +175,7 @@ fn get_symbol_hash<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         // the main symbol name is not necessarily unique; hash in the\n         // compiler's internal def-path, guaranteeing each symbol has a\n         // truly unique path\n-        hasher.hash(def_id.map(|def_id| tcx.def_path_hash(def_id)));\n+        hasher.hash(tcx.def_path_hash(def_id));\n \n         // Include the main item-type. Note that, in this case, the\n         // assertions about `needs_subst` may not hold, but this item-type\n@@ -186,19 +191,36 @@ fn get_symbol_hash<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         }\n \n         // also include any type parameters (for generic items)\n-        if let Some(substs) = substs {\n-            assert!(!substs.has_erasable_regions());\n-            assert!(!substs.needs_subst());\n-            substs.visit_with(&mut hasher);\n-\n-            // If this is an instance of a generic function, we also hash in\n-            // the ID of the instantiating crate. This avoids symbol conflicts\n-            // in case the same instances is emitted in two crates of the same\n-            // project.\n-            if substs.types().next().is_some() {\n-                hasher.hash(tcx.crate_name.as_str());\n-                hasher.hash(tcx.sess.local_crate_disambiguator().as_str());\n+        assert!(!substs.has_erasable_regions());\n+        assert!(!substs.needs_subst());\n+        substs.visit_with(&mut hasher);\n+\n+        let mut avoid_cross_crate_conflicts = false;\n+\n+        // If this is an instance of a generic function, we also hash in\n+        // the ID of the instantiating crate. This avoids symbol conflicts\n+        // in case the same instances is emitted in two crates of the same\n+        // project.\n+        if substs.types().next().is_some() {\n+            avoid_cross_crate_conflicts = true;\n+        }\n+\n+        // If we're dealing with an instance of a function that's inlined from\n+        // another crate but we're marking it as globally shared to our\n+        // compliation (aka we're not making an internal copy in each of our\n+        // codegen units) then this symbol may become an exported (but hidden\n+        // visibility) symbol. This means that multiple crates may do the same\n+        // and we want to be sure to avoid any symbol conflicts here.\n+        match TransItem::Fn(instance).instantiation_mode(tcx) {\n+            InstantiationMode::GloballyShared { may_conflict: true } => {\n+                avoid_cross_crate_conflicts = true;\n             }\n+            _ => {}\n+        }\n+\n+        if avoid_cross_crate_conflicts {\n+            hasher.hash(tcx.crate_name.as_str());\n+            hasher.hash(tcx.sess.local_crate_disambiguator().as_str());\n         }\n     });\n \n@@ -309,7 +331,7 @@ fn compute_symbol_name<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, instance: Instance\n     // and should not matter anyhow.\n     let instance_ty = tcx.erase_regions(&instance_ty);\n \n-    let hash = get_symbol_hash(tcx, Some(def_id), instance_ty, Some(substs));\n+    let hash = get_symbol_hash(tcx, def_id, instance, instance_ty, substs);\n \n     SymbolPathBuffer::from_interned(tcx.def_symbol_name(def_id)).finish(hash)\n }"}, {"sha": "22b09a0e26931b4961432644a4891032ca6a4ab7", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=23a5fb811e3e0c76153c9161c7a6eedb2714b554", "patch": "@@ -1247,7 +1247,7 @@ fn start_executing_work(tcx: TyCtxt,\n                         modules_config: Arc<ModuleConfig>,\n                         metadata_config: Arc<ModuleConfig>,\n                         allocator_config: Arc<ModuleConfig>)\n-                        -> thread::JoinHandle<CompiledModules> {\n+                        -> thread::JoinHandle<Result<CompiledModules, ()>> {\n     let coordinator_send = tcx.tx_to_llvm_workers.clone();\n     let mut exported_symbols = FxHashMap();\n     exported_symbols.insert(LOCAL_CRATE, tcx.exported_symbols(LOCAL_CRATE));\n@@ -1695,7 +1695,7 @@ fn start_executing_work(tcx: TyCtxt,\n                 Message::Done { result: Err(()), worker_id: _ } => {\n                     shared_emitter.fatal(\"aborting due to worker thread failure\");\n                     // Exit the coordinator thread\n-                    panic!(\"aborting due to worker thread failure\")\n+                    return Err(())\n                 }\n                 Message::TranslateItem => {\n                     bug!(\"the coordinator should not receive translation requests\")\n@@ -1721,11 +1721,11 @@ fn start_executing_work(tcx: TyCtxt,\n         let compiled_metadata_module = compiled_metadata_module\n             .expect(\"Metadata module not compiled?\");\n \n-        CompiledModules {\n+        Ok(CompiledModules {\n             modules: compiled_modules,\n             metadata_module: compiled_metadata_module,\n             allocator_module: compiled_allocator_module,\n-        }\n+        })\n     });\n \n     // A heuristic that determines if we have enough LLVM WorkItems in the\n@@ -2018,15 +2018,19 @@ pub struct OngoingCrateTranslation {\n     coordinator_send: Sender<Box<Any + Send>>,\n     trans_worker_receive: Receiver<Message>,\n     shared_emitter_main: SharedEmitterMain,\n-    future: thread::JoinHandle<CompiledModules>,\n+    future: thread::JoinHandle<Result<CompiledModules, ()>>,\n     output_filenames: Arc<OutputFilenames>,\n }\n \n impl OngoingCrateTranslation {\n     pub fn join(self, sess: &Session, dep_graph: &DepGraph) -> CrateTranslation {\n         self.shared_emitter_main.check(sess, true);\n         let compiled_modules = match self.future.join() {\n-            Ok(compiled_modules) => compiled_modules,\n+            Ok(Ok(compiled_modules)) => compiled_modules,\n+            Ok(Err(())) => {\n+                sess.abort_if_errors();\n+                panic!(\"expected abort due to worker thread errors\")\n+            },\n             Err(_) => {\n                 sess.fatal(\"Error during translation/LLVM phase.\");\n             }"}, {"sha": "17e00ac134666b0ae99329d66159d71616bc7d01", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=23a5fb811e3e0c76153c9161c7a6eedb2714b554", "patch": "@@ -1231,9 +1231,6 @@ fn collect_and_partition_translation_items<'a, 'tcx>(\n             .collect::<Vec<_>>()\n     });\n \n-    assert!(tcx.sess.opts.codegen_units == codegen_units.len() ||\n-            tcx.sess.opts.debugging_opts.incremental.is_some());\n-\n     let translation_items: DefIdSet = items.iter().filter_map(|trans_item| {\n         match *trans_item {\n             TransItem::Fn(ref instance) => Some(instance.def_id()),"}, {"sha": "9d1e36fa581061e79bc624f2cadc9e28a021d616", "filename": "src/librustc_trans/collector.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Flibrustc_trans%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Flibrustc_trans%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcollector.rs?ref=23a5fb811e3e0c76153c9161c7a6eedb2714b554", "patch": "@@ -401,9 +401,9 @@ fn collect_items_rec<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n }\n \n fn record_accesses<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                        caller: TransItem<'tcx>,\n-                                        callees: &[TransItem<'tcx>],\n-                                        inlining_map: &mut InliningMap<'tcx>) {\n+                             caller: TransItem<'tcx>,\n+                             callees: &[TransItem<'tcx>],\n+                             inlining_map: &mut InliningMap<'tcx>) {\n     let is_inlining_candidate = |trans_item: &TransItem<'tcx>| {\n         trans_item.instantiation_mode(tcx) == InstantiationMode::LocalCopy\n     };"}, {"sha": "0d46ea64f9f7f8b45f15b6848b6e8563af7ff28f", "filename": "src/librustc_trans/partitioning.rs", "status": "modified", "additions": 56, "deletions": 66, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Flibrustc_trans%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Flibrustc_trans%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fpartitioning.rs?ref=23a5fb811e3e0c76153c9161c7a6eedb2714b554", "patch": "@@ -279,75 +279,74 @@ fn place_root_translation_items<'a, 'tcx, I>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let mut internalization_candidates = FxHashSet();\n \n     for trans_item in trans_items {\n-        let is_root = trans_item.instantiation_mode(tcx) == InstantiationMode::GloballyShared;\n+        match trans_item.instantiation_mode(tcx) {\n+            InstantiationMode::GloballyShared { .. } => {}\n+            InstantiationMode::LocalCopy => continue,\n+        }\n \n-        if is_root {\n-            let characteristic_def_id = characteristic_def_id_of_trans_item(tcx, trans_item);\n-            let is_volatile = is_incremental_build &&\n-                              trans_item.is_generic_fn();\n+        let characteristic_def_id = characteristic_def_id_of_trans_item(tcx, trans_item);\n+        let is_volatile = is_incremental_build &&\n+                          trans_item.is_generic_fn();\n \n-            let codegen_unit_name = match characteristic_def_id {\n-                Some(def_id) => compute_codegen_unit_name(tcx, def_id, is_volatile),\n-                None => Symbol::intern(FALLBACK_CODEGEN_UNIT).as_str(),\n-            };\n+        let codegen_unit_name = match characteristic_def_id {\n+            Some(def_id) => compute_codegen_unit_name(tcx, def_id, is_volatile),\n+            None => Symbol::intern(FALLBACK_CODEGEN_UNIT).as_str(),\n+        };\n \n-            let make_codegen_unit = || {\n-                CodegenUnit::new(codegen_unit_name.clone())\n-            };\n+        let make_codegen_unit = || {\n+            CodegenUnit::new(codegen_unit_name.clone())\n+        };\n \n-            let codegen_unit = codegen_units.entry(codegen_unit_name.clone())\n-                                                .or_insert_with(make_codegen_unit);\n-\n-            let (linkage, visibility) = match trans_item.explicit_linkage(tcx) {\n-                Some(explicit_linkage) => (explicit_linkage, Visibility::Default),\n-                None => {\n-                    match trans_item {\n-                        TransItem::Fn(ref instance) => {\n-                            let visibility = match instance.def {\n-                                InstanceDef::Item(def_id) => {\n-                                    if def_id.is_local() {\n-                                        if tcx.is_exported_symbol(def_id) {\n-                                            Visibility::Default\n-                                        } else {\n-                                            internalization_candidates.insert(trans_item);\n-                                            Visibility::Hidden\n-                                        }\n+        let codegen_unit = codegen_units.entry(codegen_unit_name.clone())\n+                                            .or_insert_with(make_codegen_unit);\n+\n+        let (linkage, visibility) = match trans_item.explicit_linkage(tcx) {\n+            Some(explicit_linkage) => (explicit_linkage, Visibility::Default),\n+            None => {\n+                match trans_item {\n+                    TransItem::Fn(ref instance) => {\n+                        let visibility = match instance.def {\n+                            InstanceDef::Item(def_id) => {\n+                                if def_id.is_local() {\n+                                    if tcx.is_exported_symbol(def_id) {\n+                                        Visibility::Default\n                                     } else {\n-                                        internalization_candidates.insert(trans_item);\n                                         Visibility::Hidden\n                                     }\n+                                } else {\n+                                    Visibility::Hidden\n                                 }\n-                                InstanceDef::FnPtrShim(..) |\n-                                InstanceDef::Virtual(..) |\n-                                InstanceDef::Intrinsic(..) |\n-                                InstanceDef::ClosureOnceShim { .. } |\n-                                InstanceDef::DropGlue(..) |\n-                                InstanceDef::CloneShim(..) => {\n-                                    bug!(\"partitioning: Encountered unexpected\n-                                          root translation item: {:?}\",\n-                                          trans_item)\n-                                }\n-                            };\n-                            (Linkage::External, visibility)\n-                        }\n-                        TransItem::Static(node_id) |\n-                        TransItem::GlobalAsm(node_id) => {\n-                            let def_id = tcx.hir.local_def_id(node_id);\n-                            let visibility = if tcx.is_exported_symbol(def_id) {\n-                                Visibility::Default\n-                            } else {\n-                                internalization_candidates.insert(trans_item);\n+                            }\n+                            InstanceDef::FnPtrShim(..) |\n+                            InstanceDef::Virtual(..) |\n+                            InstanceDef::Intrinsic(..) |\n+                            InstanceDef::ClosureOnceShim { .. } |\n+                            InstanceDef::DropGlue(..) |\n+                            InstanceDef::CloneShim(..) => {\n                                 Visibility::Hidden\n-                            };\n-                            (Linkage::External, visibility)\n-                        }\n+                            }\n+                        };\n+                        (Linkage::External, visibility)\n+                    }\n+                    TransItem::Static(node_id) |\n+                    TransItem::GlobalAsm(node_id) => {\n+                        let def_id = tcx.hir.local_def_id(node_id);\n+                        let visibility = if tcx.is_exported_symbol(def_id) {\n+                            Visibility::Default\n+                        } else {\n+                            Visibility::Hidden\n+                        };\n+                        (Linkage::External, visibility)\n                     }\n                 }\n-            };\n-\n-            codegen_unit.items_mut().insert(trans_item, (linkage, visibility));\n-            roots.insert(trans_item);\n+            }\n+        };\n+        if visibility == Visibility::Hidden {\n+            internalization_candidates.insert(trans_item);\n         }\n+\n+        codegen_unit.items_mut().insert(trans_item, (linkage, visibility));\n+        roots.insert(trans_item);\n     }\n \n     // always ensure we have at least one CGU; otherwise, if we have a\n@@ -390,15 +389,6 @@ fn merge_codegen_units<'tcx>(initial_partitioning: &mut PreInliningPartitioning<\n     for (index, cgu) in codegen_units.iter_mut().enumerate() {\n         cgu.set_name(numbered_codegen_unit_name(crate_name, index));\n     }\n-\n-    // If the initial partitioning contained less than target_cgu_count to begin\n-    // with, we won't have enough codegen units here, so add a empty units until\n-    // we reach the target count\n-    while codegen_units.len() < target_cgu_count {\n-        let index = codegen_units.len();\n-        let name = numbered_codegen_unit_name(crate_name, index);\n-        codegen_units.push(CodegenUnit::new(name));\n-    }\n }\n \n fn place_inlined_translation_items<'tcx>(initial_partitioning: PreInliningPartitioning<'tcx>,"}, {"sha": "e40b1617d0a01d12ba9b631514e62d4af9c15123", "filename": "src/librustc_trans/trans_item.rs", "status": "modified", "additions": 32, "deletions": 5, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Flibrustc_trans%2Ftrans_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Flibrustc_trans%2Ftrans_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans_item.rs?ref=23a5fb811e3e0c76153c9161c7a6eedb2714b554", "patch": "@@ -26,6 +26,7 @@ use monomorphize::Instance;\n use rustc::hir;\n use rustc::hir::def_id::DefId;\n use rustc::middle::trans::{Linkage, Visibility};\n+use rustc::session::config::OptLevel;\n use rustc::traits;\n use rustc::ty::{self, Ty, TyCtxt, TypeFoldable};\n use rustc::ty::subst::{Subst, Substs};\n@@ -44,7 +45,20 @@ pub use rustc::middle::trans::TransItem;\n pub enum InstantiationMode {\n     /// There will be exactly one instance of the given TransItem. It will have\n     /// external linkage so that it can be linked to from other codegen units.\n-    GloballyShared,\n+    GloballyShared {\n+        /// In some compilation scenarios we may decide to take functions that\n+        /// are typically `LocalCopy` and instead move them to `GloballyShared`\n+        /// to avoid translating them a bunch of times. In this situation,\n+        /// however, our local copy may conflict with other crates also\n+        /// inlining the same function.\n+        ///\n+        /// This flag indicates that this situation is occuring, and informs\n+        /// symbol name calculation that some extra mangling is needed to\n+        /// avoid conflicts. Note that this may eventually go away entirely if\n+        /// ThinLTO enables us to *always* have a globally shared instance of a\n+        /// function within one crate's compilation.\n+        may_conflict: bool,\n+    },\n \n     /// Each codegen unit containing a reference to the given TransItem will\n     /// have its own private copy of the function (with internal linkage).\n@@ -154,18 +168,31 @@ pub trait TransItemExt<'a, 'tcx>: fmt::Debug {\n     fn instantiation_mode(&self,\n                           tcx: TyCtxt<'a, 'tcx, 'tcx>)\n                           -> InstantiationMode {\n+        let inline_in_all_cgus =\n+            tcx.sess.opts.debugging_opts.inline_in_all_cgus.unwrap_or_else(|| {\n+                tcx.sess.opts.optimize != OptLevel::No\n+            });\n+\n         match *self.as_trans_item() {\n             TransItem::Fn(ref instance) => {\n                 if self.explicit_linkage(tcx).is_none() &&\n                     common::requests_inline(tcx, instance)\n                 {\n-                    InstantiationMode::LocalCopy\n+                    if inline_in_all_cgus {\n+                        InstantiationMode::LocalCopy\n+                    } else {\n+                        InstantiationMode::GloballyShared  { may_conflict: true }\n+                    }\n                 } else {\n-                    InstantiationMode::GloballyShared\n+                    InstantiationMode::GloballyShared  { may_conflict: false }\n                 }\n             }\n-            TransItem::Static(..) => InstantiationMode::GloballyShared,\n-            TransItem::GlobalAsm(..) => InstantiationMode::GloballyShared,\n+            TransItem::Static(..) => {\n+                InstantiationMode::GloballyShared { may_conflict: false }\n+            }\n+            TransItem::GlobalAsm(..) => {\n+                InstantiationMode::GloballyShared { may_conflict: false }\n+            }\n         }\n     }\n "}, {"sha": "6b7a5b3af9669935ee6e27d9b029f0e842941d9c", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=23a5fb811e3e0c76153c9161c7a6eedb2714b554", "patch": "@@ -1464,7 +1464,7 @@ impl<'tcx> ExplicitSelf<'tcx> {\n     /// declaration like `self: SomeType` into either `self`,\n     /// `&self`, `&mut self`, or `Box<self>`. We do this here\n     /// by some simple pattern matching. A more precise check\n-    /// is done later in `check_method_self_type()`.\n+    /// is done later in `check_method_receiver()`.\n     ///\n     /// Examples:\n     ///\n@@ -1475,7 +1475,7 @@ impl<'tcx> ExplicitSelf<'tcx> {\n     ///     fn method2(self: &T); // ExplicitSelf::ByValue\n     ///     fn method3(self: Box<&T>); // ExplicitSelf::ByBox\n     ///\n-    ///     // Invalid cases will be caught later by `check_method_self_type`:\n+    ///     // Invalid cases will be caught later by `check_method_receiver`:\n     ///     fn method_err1(self: &mut T); // ExplicitSelf::ByReference\n     /// }\n     /// ```"}, {"sha": "e3ce403f3c17baa60ded8e1321678f41de939a30", "filename": "src/librustdoc/clean/cfg.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fcfg.rs?ref=23a5fb811e3e0c76153c9161c7a6eedb2714b554", "patch": "@@ -337,7 +337,6 @@ impl<'a> fmt::Display for Html<'a> {\n                         \"l4re\" => \"L4Re\",\n                         \"linux\" => \"Linux\",\n                         \"macos\" => \"macOS\",\n-                        \"nacl\" => \"NaCl\",\n                         \"netbsd\" => \"NetBSD\",\n                         \"openbsd\" => \"OpenBSD\",\n                         \"redox\" => \"Redox\",\n@@ -886,4 +885,4 @@ mod test {\n                 only.\"\n         );\n     }\n-}\n\\ No newline at end of file\n+}"}, {"sha": "2f7bd5e39a14927aad28c8988b82ae497e66680f", "filename": "src/librustdoc/externalfiles.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Flibrustdoc%2Fexternalfiles.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Flibrustdoc%2Fexternalfiles.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fexternalfiles.rs?ref=23a5fb811e3e0c76153c9161c7a6eedb2714b554", "patch": "@@ -10,7 +10,6 @@\n \n use std::fs::File;\n use std::io::prelude::*;\n-use std::io;\n use std::path::Path;\n use std::str;\n use html::markdown::{Markdown, RenderType};\n@@ -70,17 +69,13 @@ pub fn load_string<P: AsRef<Path>>(file_path: P) -> Result<String, LoadStringErr\n     let result = File::open(file_path)\n                       .and_then(|mut f| f.read_to_end(&mut contents));\n     if let Err(e) = result {\n-        let _ = writeln!(&mut io::stderr(),\n-                         \"error reading `{}`: {}\",\n-                         file_path.display(), e);\n+        eprintln!(\"error reading `{}`: {}\", file_path.display(), e);\n         return Err(LoadStringError::ReadFail);\n     }\n     match str::from_utf8(&contents) {\n         Ok(s) => Ok(s.to_string()),\n         Err(_) => {\n-            let _ = writeln!(&mut io::stderr(),\n-                             \"error reading `{}`: not UTF-8\",\n-                             file_path.display());\n+            eprintln!(\"error reading `{}`: not UTF-8\", file_path.display());\n             Err(LoadStringError::BadUtf8)\n         }\n     }"}, {"sha": "484285e91f6e9093564c7b85b06f1fa1d3a225c1", "filename": "src/librustdoc/markdown.rs", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Flibrustdoc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Flibrustdoc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown.rs?ref=23a5fb811e3e0c76153c9161c7a6eedb2714b554", "patch": "@@ -11,7 +11,6 @@\n use std::default::Default;\n use std::fs::File;\n use std::io::prelude::*;\n-use std::io;\n use std::path::{PathBuf, Path};\n \n use getopts;\n@@ -75,20 +74,15 @@ pub fn render(input: &str, mut output: PathBuf, matches: &getopts::Matches,\n \n     let mut out = match File::create(&output) {\n         Err(e) => {\n-            let _ = writeln!(&mut io::stderr(),\n-                             \"rustdoc: {}: {}\",\n-                             output.display(), e);\n+            eprintln!(\"rustdoc: {}: {}\", output.display(), e);\n             return 4;\n         }\n         Ok(f) => f\n     };\n \n     let (metadata, text) = extract_leading_metadata(&input_str);\n     if metadata.is_empty() {\n-        let _ = writeln!(\n-            &mut io::stderr(),\n-            \"rustdoc: invalid markdown file: no initial lines starting with `# ` or `%`\"\n-        );\n+        eprintln!(\"rustdoc: invalid markdown file: no initial lines starting with `# ` or `%`\");\n         return 5;\n     }\n     let title = metadata[0];\n@@ -138,9 +132,7 @@ pub fn render(input: &str, mut output: PathBuf, matches: &getopts::Matches,\n \n     match err {\n         Err(e) => {\n-            let _ = writeln!(&mut io::stderr(),\n-                             \"rustdoc: cannot write to `{}`: {}\",\n-                             output.display(), e);\n+            eprintln!(\"rustdoc: cannot write to `{}`: {}\", output.display(), e);\n             6\n         }\n         Ok(_) => 0"}, {"sha": "09565dd7664c2f98872634231a5dbca9f867b679", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=23a5fb811e3e0c76153c9161c7a6eedb2714b554", "patch": "@@ -495,11 +495,10 @@ impl Collector {\n                 found = entry.remove_item(&test).is_some();\n             }\n             if !found {\n-                let _ = writeln!(&mut io::stderr(),\n-                                 \"WARNING: {} Code block is not currently run as a test, but will \\\n-                                  in future versions of rustdoc. Please ensure this code block is \\\n-                                  a runnable test, or use the `ignore` directive.\",\n-                                 name);\n+                eprintln!(\"WARNING: {} Code block is not currently run as a test, but will \\\n+                           in future versions of rustdoc. Please ensure this code block is \\\n+                           a runnable test, or use the `ignore` directive.\",\n+                          name);\n                 return\n             }\n         }"}, {"sha": "122f15d1d4c4feed68c29b5af7d1c6bcf7c7079f", "filename": "src/libstd/os/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Flibstd%2Fos%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Flibstd%2Fos%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fmod.rs?ref=23a5fb811e3e0c76153c9161c7a6eedb2714b554", "patch": "@@ -38,7 +38,6 @@ pub mod linux;\n #[cfg(all(not(dox), target_os = \"haiku\"))]      pub mod haiku;\n #[cfg(all(not(dox), target_os = \"ios\"))]        pub mod ios;\n #[cfg(all(not(dox), target_os = \"macos\"))]      pub mod macos;\n-#[cfg(all(not(dox), target_os = \"nacl\"))]       pub mod nacl;\n #[cfg(all(not(dox), target_os = \"netbsd\"))]     pub mod netbsd;\n #[cfg(all(not(dox), target_os = \"openbsd\"))]    pub mod openbsd;\n #[cfg(all(not(dox), target_os = \"solaris\"))]    pub mod solaris;"}, {"sha": "3e0fb44b01e30bd9719b61d9672ef9806deffcea", "filename": "src/libstd/os/nacl/fs.rs", "status": "removed", "additions": 0, "deletions": 128, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/a263a78b28dd1cef60025b0681689d7b6188d693/src%2Flibstd%2Fos%2Fnacl%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a263a78b28dd1cef60025b0681689d7b6188d693/src%2Flibstd%2Fos%2Fnacl%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fnacl%2Ffs.rs?ref=a263a78b28dd1cef60025b0681689d7b6188d693", "patch": "@@ -1,128 +0,0 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n-\n-use libc;\n-\n-use fs::Metadata;\n-use sys_common::AsInner;\n-\n-#[allow(deprecated)]\n-use os::nacl::raw;\n-\n-/// OS-specific extension methods for `fs::Metadata`\n-#[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n-pub trait MetadataExt {\n-    /// Gain a reference to the underlying `stat` structure which contains\n-    /// the raw information returned by the OS.\n-    ///\n-    /// The contents of the returned `stat` are **not** consistent across\n-    /// Unix platforms. The `os::unix::fs::MetadataExt` trait contains the\n-    /// cross-Unix abstractions contained within the raw stat.\n-    #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n-    #[rustc_deprecated(since = \"1.8.0\",\n-                       reason = \"deprecated in favor of the accessor \\\n-                                 methods of this trait\")]\n-    #[allow(deprecated)]\n-    fn as_raw_stat(&self) -> &raw::stat;\n-\n-    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n-    fn st_dev(&self) -> u64;\n-    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n-    fn st_ino(&self) -> u64;\n-    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n-    fn st_mode(&self) -> u32;\n-    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n-    fn st_nlink(&self) -> u64;\n-    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n-    fn st_uid(&self) -> u32;\n-    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n-    fn st_gid(&self) -> u32;\n-    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n-    fn st_rdev(&self) -> u64;\n-    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n-    fn st_size(&self) -> u64;\n-    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n-    fn st_atime(&self) -> i64;\n-    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n-    fn st_atime_nsec(&self) -> i64;\n-    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n-    fn st_mtime(&self) -> i64;\n-    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n-    fn st_mtime_nsec(&self) -> i64;\n-    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n-    fn st_ctime(&self) -> i64;\n-    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n-    fn st_ctime_nsec(&self) -> i64;\n-    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n-    fn st_blksize(&self) -> u64;\n-    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n-    fn st_blocks(&self) -> u64;\n-}\n-\n-#[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n-impl MetadataExt for Metadata {\n-    #[allow(deprecated)]\n-    fn as_raw_stat(&self) -> &raw::stat {\n-        unsafe {\n-            &*(self.as_inner().as_inner() as *const libc::stat64\n-                                          as *const raw::stat)\n-        }\n-    }\n-    fn st_dev(&self) -> u64 {\n-        self.as_inner().as_inner().st_dev as u64\n-    }\n-    fn st_ino(&self) -> u64 {\n-        self.as_inner().as_inner().st_ino as u64\n-    }\n-    fn st_mode(&self) -> u32 {\n-        self.as_inner().as_inner().st_mode as u32\n-    }\n-    fn st_nlink(&self) -> u64 {\n-        self.as_inner().as_inner().st_nlink as u64\n-    }\n-    fn st_uid(&self) -> u32 {\n-        self.as_inner().as_inner().st_uid as u32\n-    }\n-    fn st_gid(&self) -> u32 {\n-        self.as_inner().as_inner().st_gid as u32\n-    }\n-    fn st_rdev(&self) -> u64 {\n-        self.as_inner().as_inner().st_rdev as u64\n-    }\n-    fn st_size(&self) -> u64 {\n-        self.as_inner().as_inner().st_size as u64\n-    }\n-    fn st_atime(&self) -> i64 {\n-        self.as_inner().as_inner().st_atime as i64\n-    }\n-    fn st_atime_nsec(&self) -> i64 {\n-        self.as_inner().as_inner().st_atime_nsec as i64\n-    }\n-    fn st_mtime(&self) -> i64 {\n-        self.as_inner().as_inner().st_mtime as i64\n-    }\n-    fn st_mtime_nsec(&self) -> i64 {\n-        self.as_inner().as_inner().st_mtime_nsec as i64\n-    }\n-    fn st_ctime(&self) -> i64 {\n-        self.as_inner().as_inner().st_ctime as i64\n-    }\n-    fn st_ctime_nsec(&self) -> i64 {\n-        self.as_inner().as_inner().st_ctime_nsec as i64\n-    }\n-    fn st_blksize(&self) -> u64 {\n-        self.as_inner().as_inner().st_blksize as u64\n-    }\n-    fn st_blocks(&self) -> u64 {\n-        self.as_inner().as_inner().st_blocks as u64\n-    }\n-}"}, {"sha": "3c3d4410a2a16bc89dc93499fb10eff32d5da164", "filename": "src/libstd/os/nacl/raw.rs", "status": "removed", "additions": 0, "deletions": 56, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/a263a78b28dd1cef60025b0681689d7b6188d693/src%2Flibstd%2Fos%2Fnacl%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a263a78b28dd1cef60025b0681689d7b6188d693/src%2Flibstd%2Fos%2Fnacl%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fnacl%2Fraw.rs?ref=a263a78b28dd1cef60025b0681689d7b6188d693", "patch": "@@ -1,56 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! Nacl-specific raw type definitions\n-\n-#![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-#![rustc_deprecated(since = \"1.8.0\",\n-                    reason = \"these type aliases are no longer supported by \\\n-                              the standard library, the `libc` crate on \\\n-                              crates.io should be used instead for the correct \\\n-                              definitions\")]\n-#![allow(deprecated)]\n-\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type time_t = i64;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type off_t = u64;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type dev_t = u64;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type ino_t = u64;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type pid_t = i32;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type uid_t = u32;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type gid_t = u32;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type mode_t = u32;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type nlink_t = u64;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blksize_t = u64;\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blkcnt_t = u64;\n-\n-#[stable(feature = \"pthread_t\", since = \"1.8.0\")]\n-pub type pthread_t = usize;\n-\n-#[repr(C)]\n-#[derive(Copy, Clone)]\n-#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-pub struct stat {\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub st_dev: dev_t,\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub st_ino: ino_t,\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub st_mode: mode_t,\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub st_nlink: nlink_t,\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub st_uid: uid_t,\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub st_gid: gid_t,\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub st_rdev: dev_t,\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub st_size: off_t,\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub st_blksize: blksize_t,\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub st_blocks: blkcnt_t,\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub st_atime: time_t,\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub st_atime_nsec: i64,\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub st_mtime: time_t,\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub st_mtime_nsec: i64,\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub st_ctime: time_t,\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub st_ctime_nsec: i64,\n-}"}, {"sha": "7d8ce4154fbfc073b5a187d433ae4085c0840337", "filename": "src/libstd/process.rs", "status": "modified", "additions": 109, "deletions": 4, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=23a5fb811e3e0c76153c9161c7a6eedb2714b554", "patch": "@@ -742,21 +742,128 @@ impl fmt::Debug for Output {\n     }\n }\n \n-/// Describes what to do with a standard I/O stream for a child process.\n+/// Describes what to do with a standard I/O stream for a child process when\n+/// passed to the [`stdin`], [`stdout`], and [`stderr`] methods of [`Command`].\n+///\n+/// [`stdin`]: struct.Command.html#method.stdin\n+/// [`stdout`]: struct.Command.html#method.stdout\n+/// [`stderr`]: struct.Command.html#method.stderr\n+/// [`Command`]: struct.Command.html\n #[stable(feature = \"process\", since = \"1.0.0\")]\n pub struct Stdio(imp::Stdio);\n \n impl Stdio {\n     /// A new pipe should be arranged to connect the parent and child processes.\n+    ///\n+    /// # Examples\n+    ///\n+    /// With stdout:\n+    ///\n+    /// ```no_run\n+    /// use std::process::{Command, Stdio};\n+    ///\n+    /// let output = Command::new(\"echo\")\n+    ///     .arg(\"Hello, world!\")\n+    ///     .stdout(Stdio::piped())\n+    ///     .output()\n+    ///     .expect(\"Failed to execute command\");\n+    ///\n+    /// assert_eq!(String::from_utf8_lossy(&output.stdout), \"Hello, world!\\n\");\n+    /// // Nothing echoed to console\n+    /// ```\n+    ///\n+    /// With stdin:\n+    ///\n+    /// ```no_run\n+    /// use std::io::Write;\n+    /// use std::process::{Command, Stdio};\n+    ///\n+    /// let mut child = Command::new(\"rev\")\n+    ///     .stdin(Stdio::piped())\n+    ///     .stdout(Stdio::piped())\n+    ///     .spawn()\n+    ///     .expect(\"Failed to spawn child process\");\n+    ///\n+    /// {\n+    ///     let mut stdin = child.stdin.as_mut().expect(\"Failed to open stdin\");\n+    ///     stdin.write_all(\"Hello, world!\".as_bytes()).expect(\"Failed to write to stdin\");\n+    /// }\n+    ///\n+    /// let output = child.wait_with_output().expect(\"Failed to read stdout\");\n+    /// assert_eq!(String::from_utf8_lossy(&output.stdout), \"!dlrow ,olleH\\n\");\n+    /// ```\n     #[stable(feature = \"process\", since = \"1.0.0\")]\n     pub fn piped() -> Stdio { Stdio(imp::Stdio::MakePipe) }\n \n     /// The child inherits from the corresponding parent descriptor.\n+    ///\n+    /// # Examples\n+    ///\n+    /// With stdout:\n+    ///\n+    /// ```no_run\n+    /// use std::process::{Command, Stdio};\n+    ///\n+    /// let output = Command::new(\"echo\")\n+    ///     .arg(\"Hello, world!\")\n+    ///     .stdout(Stdio::inherit())\n+    ///     .output()\n+    ///     .expect(\"Failed to execute command\");\n+    ///\n+    /// assert_eq!(String::from_utf8_lossy(&output.stdout), \"\");\n+    /// // \"Hello, world!\" echoed to console\n+    /// ```\n+    ///\n+    /// With stdin:\n+    ///\n+    /// ```no_run\n+    /// use std::process::{Command, Stdio};\n+    ///\n+    /// let output = Command::new(\"rev\")\n+    ///     .stdin(Stdio::inherit())\n+    ///     .stdout(Stdio::piped())\n+    ///     .output()\n+    ///     .expect(\"Failed to execute command\");\n+    ///\n+    /// println!(\"You piped in the reverse of: {}\", String::from_utf8_lossy(&output.stdout));\n+    /// ```\n     #[stable(feature = \"process\", since = \"1.0.0\")]\n     pub fn inherit() -> Stdio { Stdio(imp::Stdio::Inherit) }\n \n     /// This stream will be ignored. This is the equivalent of attaching the\n     /// stream to `/dev/null`\n+    ///\n+    /// # Examples\n+    ///\n+    /// With stdout:\n+    ///\n+    /// ```no_run\n+    /// use std::process::{Command, Stdio};\n+    ///\n+    /// let output = Command::new(\"echo\")\n+    ///     .arg(\"Hello, world!\")\n+    ///     .stdout(Stdio::null())\n+    ///     .output()\n+    ///     .expect(\"Failed to execute command\");\n+    ///\n+    /// assert_eq!(String::from_utf8_lossy(&output.stdout), \"\");\n+    /// // Nothing echoed to console\n+    /// ```\n+    ///\n+    /// With stdin:\n+    ///\n+    /// ```no_run\n+    /// use std::process::{Command, Stdio};\n+    ///\n+    /// let output = Command::new(\"rev\")\n+    ///     .stdin(Stdio::null())\n+    ///     .stdout(Stdio::piped())\n+    ///     .output()\n+    ///     .expect(\"Failed to execute command\");\n+    ///\n+    /// assert_eq!(String::from_utf8_lossy(&output.stdout), \"\");\n+    /// // Ignores any piped-in input\n+    /// ```\n     #[stable(feature = \"process\", since = \"1.0.0\")]\n     pub fn null() -> Stdio { Stdio(imp::Stdio::Null) }\n }\n@@ -1083,8 +1190,6 @@ impl Child {\n /// function and compute the exit code from its return value:\n ///\n /// ```\n-/// use std::io::{self, Write};\n-///\n /// fn run_app() -> Result<(), ()> {\n ///     // Application logic here\n ///     Ok(())\n@@ -1094,7 +1199,7 @@ impl Child {\n ///     ::std::process::exit(match run_app() {\n ///        Ok(_) => 0,\n ///        Err(err) => {\n-///            writeln!(io::stderr(), \"error: {:?}\", err).unwrap();\n+///            eprintln!(\"error: {:?}\", err);\n ///            1\n ///        }\n ///     });"}, {"sha": "ce1a07b31b2ed0b01acdf897f6d68af2a34c45d3", "filename": "src/libstd/sync/mpsc/mod.rs", "status": "modified", "additions": 3, "deletions": 21, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs?ref=23a5fb811e3e0c76153c9161c7a6eedb2714b554", "patch": "@@ -919,7 +919,7 @@ impl<T> Drop for Sender<T> {\n #[stable(feature = \"mpsc_debug\", since = \"1.8.0\")]\n impl<T> fmt::Debug for Sender<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        write!(f, \"Sender {{ .. }}\")\n+        f.debug_struct(\"Sender\").finish()\n     }\n }\n \n@@ -1049,7 +1049,7 @@ impl<T> Drop for SyncSender<T> {\n #[stable(feature = \"mpsc_debug\", since = \"1.8.0\")]\n impl<T> fmt::Debug for SyncSender<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        write!(f, \"SyncSender {{ .. }}\")\n+        f.debug_struct(\"SyncSender\").finish()\n     }\n }\n \n@@ -1551,7 +1551,7 @@ impl<T> Drop for Receiver<T> {\n #[stable(feature = \"mpsc_debug\", since = \"1.8.0\")]\n impl<T> fmt::Debug for Receiver<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        write!(f, \"Receiver {{ .. }}\")\n+        f.debug_struct(\"Receiver\").finish()\n     }\n }\n \n@@ -3009,22 +3009,4 @@ mod sync_tests {\n             repro()\n         }\n     }\n-\n-    #[test]\n-    fn fmt_debug_sender() {\n-        let (tx, _) = channel::<i32>();\n-        assert_eq!(format!(\"{:?}\", tx), \"Sender { .. }\");\n-    }\n-\n-    #[test]\n-    fn fmt_debug_recv() {\n-        let (_, rx) = channel::<i32>();\n-        assert_eq!(format!(\"{:?}\", rx), \"Receiver { .. }\");\n-    }\n-\n-    #[test]\n-    fn fmt_debug_sync_sender() {\n-        let (tx, _) = sync_channel::<i32>(1);\n-        assert_eq!(format!(\"{:?}\", tx), \"SyncSender { .. }\");\n-    }\n }"}, {"sha": "a9f3cea243f366c61e0abf759c474c95a00581ae", "filename": "src/libstd/sync/mpsc/select.rs", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs?ref=23a5fb811e3e0c76153c9161c7a6eedb2714b554", "patch": "@@ -354,13 +354,13 @@ impl Iterator for Packets {\n \n impl fmt::Debug for Select {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        write!(f, \"Select {{ .. }}\")\n+        f.debug_struct(\"Select\").finish()\n     }\n }\n \n impl<'rx, T:Send+'rx> fmt::Debug for Handle<'rx, T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        write!(f, \"Handle {{ .. }}\")\n+        f.debug_struct(\"Handle\").finish()\n     }\n }\n \n@@ -774,18 +774,4 @@ mod tests {\n             }\n         }\n     }\n-\n-    #[test]\n-    fn fmt_debug_select() {\n-        let sel = Select::new();\n-        assert_eq!(format!(\"{:?}\", sel), \"Select { .. }\");\n-    }\n-\n-    #[test]\n-    fn fmt_debug_handle() {\n-        let (_, rx) = channel::<i32>();\n-        let sel = Select::new();\n-        let handle = sel.handle(&rx);\n-        assert_eq!(format!(\"{:?}\", handle), \"Handle { .. }\");\n-    }\n }"}, {"sha": "eb507858b92b23f5bd8dd76f88add49e76a4650d", "filename": "src/libstd/sync/mutex.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Flibstd%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Flibstd%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmutex.rs?ref=23a5fb811e3e0c76153c9161c7a6eedb2714b554", "patch": "@@ -394,11 +394,18 @@ impl<T: ?Sized + Default> Default for Mutex<T> {\n impl<T: ?Sized + fmt::Debug> fmt::Debug for Mutex<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match self.try_lock() {\n-            Ok(guard) => write!(f, \"Mutex {{ data: {:?} }}\", &*guard),\n+            Ok(guard) => f.debug_struct(\"Mutex\").field(\"data\", &&*guard).finish(),\n             Err(TryLockError::Poisoned(err)) => {\n-                write!(f, \"Mutex {{ data: Poisoned({:?}) }}\", &**err.get_ref())\n+                f.debug_struct(\"Mutex\").field(\"data\", &&**err.get_ref()).finish()\n             },\n-            Err(TryLockError::WouldBlock) => write!(f, \"Mutex {{ <locked> }}\")\n+            Err(TryLockError::WouldBlock) => {\n+                struct LockedPlaceholder;\n+                impl fmt::Debug for LockedPlaceholder {\n+                    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result { f.write_str(\"<locked>\") }\n+                }\n+\n+                f.debug_struct(\"Mutex\").field(\"data\", &LockedPlaceholder).finish()\n+            }\n         }\n     }\n }"}, {"sha": "5c49d6b58459ccb76988a2680372ee7ae826602a", "filename": "src/libstd/sync/rwlock.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Flibstd%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Flibstd%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Frwlock.rs?ref=23a5fb811e3e0c76153c9161c7a6eedb2714b554", "patch": "@@ -428,11 +428,18 @@ unsafe impl<#[may_dangle] T: ?Sized> Drop for RwLock<T> {\n impl<T: ?Sized + fmt::Debug> fmt::Debug for RwLock<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match self.try_read() {\n-            Ok(guard) => write!(f, \"RwLock {{ data: {:?} }}\", &*guard),\n+            Ok(guard) => f.debug_struct(\"RwLock\").field(\"data\", &&*guard).finish(),\n             Err(TryLockError::Poisoned(err)) => {\n-                write!(f, \"RwLock {{ data: Poisoned({:?}) }}\", &**err.get_ref())\n+                f.debug_struct(\"RwLock\").field(\"data\", &&**err.get_ref()).finish()\n             },\n-            Err(TryLockError::WouldBlock) => write!(f, \"RwLock {{ <locked> }}\")\n+            Err(TryLockError::WouldBlock) => {\n+                struct LockedPlaceholder;\n+                impl fmt::Debug for LockedPlaceholder {\n+                    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result { f.write_str(\"<locked>\") }\n+                }\n+\n+                f.debug_struct(\"RwLock\").field(\"data\", &LockedPlaceholder).finish()\n+            }\n         }\n     }\n }"}, {"sha": "00cf7eca75dc3eaf8148896027e938d621fd85a4", "filename": "src/libstd/sys/unix/env.rs", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Flibstd%2Fsys%2Funix%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Flibstd%2Fsys%2Funix%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fenv.rs?ref=23a5fb811e3e0c76153c9161c7a6eedb2714b554", "patch": "@@ -118,27 +118,6 @@ pub mod os {\n     pub const EXE_EXTENSION: &'static str = \"\";\n }\n \n-#[cfg(all(target_os = \"nacl\", not(target_arch = \"le32\")))]\n-pub mod os {\n-    pub const FAMILY: &'static str = \"unix\";\n-    pub const OS: &'static str = \"nacl\";\n-    pub const DLL_PREFIX: &'static str = \"lib\";\n-    pub const DLL_SUFFIX: &'static str = \".so\";\n-    pub const DLL_EXTENSION: &'static str = \"so\";\n-    pub const EXE_SUFFIX: &'static str = \".nexe\";\n-    pub const EXE_EXTENSION: &'static str = \"nexe\";\n-}\n-#[cfg(all(target_os = \"nacl\", target_arch = \"le32\"))]\n-pub mod os {\n-    pub const FAMILY: &'static str = \"unix\";\n-    pub const OS: &'static str = \"pnacl\";\n-    pub const DLL_PREFIX: &'static str = \"lib\";\n-    pub const DLL_SUFFIX: &'static str = \".pso\";\n-    pub const DLL_EXTENSION: &'static str = \"pso\";\n-    pub const EXE_SUFFIX: &'static str = \".pexe\";\n-    pub const EXE_EXTENSION: &'static str = \"pexe\";\n-}\n-\n #[cfg(target_os = \"haiku\")]\n pub mod os {\n     pub const FAMILY: &'static str = \"unix\";"}, {"sha": "c2772e2e2cc9a35e7317fbb326b22520b80bb82a", "filename": "src/libstd/sys/unix/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fmod.rs?ref=23a5fb811e3e0c76153c9161c7a6eedb2714b554", "patch": "@@ -22,7 +22,6 @@ use libc;\n #[cfg(all(not(dox), target_os = \"haiku\"))]     pub use os::haiku as platform;\n #[cfg(all(not(dox), target_os = \"ios\"))]       pub use os::ios as platform;\n #[cfg(all(not(dox), target_os = \"macos\"))]     pub use os::macos as platform;\n-#[cfg(all(not(dox), target_os = \"nacl\"))]      pub use os::nacl as platform;\n #[cfg(all(not(dox), target_os = \"netbsd\"))]    pub use os::netbsd as platform;\n #[cfg(all(not(dox), target_os = \"openbsd\"))]   pub use os::openbsd as platform;\n #[cfg(all(not(dox), target_os = \"solaris\"))]   pub use os::solaris as platform;\n@@ -77,11 +76,11 @@ pub fn init() {\n         reset_sigpipe();\n     }\n \n-    #[cfg(not(any(target_os = \"nacl\", target_os = \"emscripten\", target_os=\"fuchsia\")))]\n+    #[cfg(not(any(target_os = \"emscripten\", target_os=\"fuchsia\")))]\n     unsafe fn reset_sigpipe() {\n         assert!(signal(libc::SIGPIPE, libc::SIG_IGN) != libc::SIG_ERR);\n     }\n-    #[cfg(any(target_os = \"nacl\", target_os = \"emscripten\", target_os=\"fuchsia\"))]\n+    #[cfg(any(target_os = \"emscripten\", target_os=\"fuchsia\"))]\n     unsafe fn reset_sigpipe() {}\n }\n "}, {"sha": "d8c30534eede2c2e55a7253183b9f1f4a92b9d61", "filename": "src/libstd/sys/unix/os.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos.rs?ref=23a5fb811e3e0c76153c9161c7a6eedb2714b554", "patch": "@@ -483,12 +483,10 @@ pub fn home_dir() -> Option<PathBuf> {\n \n     #[cfg(any(target_os = \"android\",\n               target_os = \"ios\",\n-              target_os = \"nacl\",\n               target_os = \"emscripten\"))]\n     unsafe fn fallback() -> Option<OsString> { None }\n     #[cfg(not(any(target_os = \"android\",\n                   target_os = \"ios\",\n-                  target_os = \"nacl\",\n                   target_os = \"emscripten\")))]\n     unsafe fn fallback() -> Option<OsString> {\n         let amt = match libc::sysconf(libc::_SC_GETPW_R_SIZE_MAX) {"}, {"sha": "383434b1cd870316fb4d0bf5c2b6e12e0a21373b", "filename": "src/libstd/sys/unix/process/process_common.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs?ref=23a5fb811e3e0c76153c9161c7a6eedb2714b554", "patch": "@@ -464,7 +464,6 @@ mod tests {\n     // test from being flaky we ignore it on macOS.\n     #[test]\n     #[cfg_attr(target_os = \"macos\", ignore)]\n-    #[cfg_attr(target_os = \"nacl\", ignore)] // no signals on NaCl.\n     // When run under our current QEMU emulation test suite this test fails,\n     // although the reason isn't very clear as to why. For now this test is\n     // ignored there."}, {"sha": "a7a67ed36e82363e5cf11182d7626e372adf8c1e", "filename": "src/libstd/sys/unix/process/process_fuchsia.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_fuchsia.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_fuchsia.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_fuchsia.rs?ref=23a5fb811e3e0c76153c9161c7a6eedb2714b554", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use io;\n-use libc;\n+use libc::{self, size_t};\n use mem;\n use ptr;\n \n@@ -148,8 +148,8 @@ impl Process {\n         use sys::process::zircon::*;\n \n         let mut proc_info: zx_info_process_t = Default::default();\n-        let mut actual: zx_size_t = 0;\n-        let mut avail: zx_size_t = 0;\n+        let mut actual: size_t = 0;\n+        let mut avail: size_t = 0;\n \n         unsafe {\n             zx_cvt(zx_object_wait_one(self.handle.raw(), ZX_TASK_TERMINATED,\n@@ -171,8 +171,8 @@ impl Process {\n         use sys::process::zircon::*;\n \n         let mut proc_info: zx_info_process_t = Default::default();\n-        let mut actual: zx_size_t = 0;\n-        let mut avail: zx_size_t = 0;\n+        let mut actual: size_t = 0;\n+        let mut avail: size_t = 0;\n \n         unsafe {\n             let status = zx_object_wait_one(self.handle.raw(), ZX_TASK_TERMINATED,"}, {"sha": "743c458d580c68ebe77c791333df2757357bff1d", "filename": "src/libstd/sys/unix/process/process_unix.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs?ref=23a5fb811e3e0c76153c9161c7a6eedb2714b554", "patch": "@@ -184,8 +184,8 @@ impl Command {\n             *sys::os::environ() = envp.as_ptr();\n         }\n \n-        // NaCl has no signal support.\n-        #[cfg(not(any(target_os = \"nacl\", target_os = \"emscripten\")))]\n+        // emscripten has no signal support.\n+        #[cfg(not(any(target_os = \"emscripten\")))]\n         {\n             use mem;\n             // Reset signal handling so the child process starts in a"}, {"sha": "90864e6ef3ff28589fa835f0b9a6e6c48f2defec", "filename": "src/libstd/sys/unix/process/zircon.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fzircon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fzircon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fzircon.rs?ref=23a5fb811e3e0c76153c9161c7a6eedb2714b554", "patch": "@@ -15,15 +15,13 @@ use io;\n use os::raw::c_char;\n use u64;\n \n-use libc::{c_int, c_void};\n+use libc::{c_int, c_void, size_t};\n \n-pub type zx_handle_t = i32;\n+pub type zx_handle_t = u32;\n pub type zx_vaddr_t = usize;\n pub type zx_rights_t = u32;\n pub type zx_status_t = i32;\n \n-pub type zx_size_t = usize;\n-\n pub const ZX_HANDLE_INVALID: zx_handle_t = 0;\n \n pub type zx_time_t = u64;\n@@ -115,36 +113,37 @@ extern {\n                               pending: *mut zx_signals_t) -> zx_status_t;\n \n     pub fn zx_object_get_info(handle: zx_handle_t, topic: u32, buffer: *mut c_void,\n-                              buffer_size: zx_size_t, actual_size: *mut zx_size_t,\n-                              avail: *mut zx_size_t) -> zx_status_t;\n+                              buffer_size: size_t, actual_size: *mut size_t,\n+                              avail: *mut size_t) -> zx_status_t;\n }\n \n // From `enum special_handles` in system/ulib/launchpad/launchpad.c\n // HND_LOADER_SVC = 0\n // HND_EXEC_VMO = 1\n-pub const HND_SPECIAL_COUNT: usize = 2;\n+// HND_SEGMENTS_VMAR = 2\n+const HND_SPECIAL_COUNT: c_int = 3;\n \n #[repr(C)]\n pub struct launchpad_t {\n     argc: u32,\n     envc: u32,\n     args: *const c_char,\n-    args_len: usize,\n+    args_len: size_t,\n     env: *const c_char,\n-    env_len: usize,\n+    env_len: size_t,\n \n     handles: *mut zx_handle_t,\n     handles_info: *mut u32,\n-    handle_count: usize,\n-    handle_alloc: usize,\n+    handle_count: size_t,\n+    handle_alloc: size_t,\n \n     entry: zx_vaddr_t,\n     base: zx_vaddr_t,\n     vdso_base: zx_vaddr_t,\n \n-    stack_size: usize,\n+    stack_size: size_t,\n \n-    special_handles: [zx_handle_t; HND_SPECIAL_COUNT],\n+    special_handles: [zx_handle_t; HND_SPECIAL_COUNT as usize],\n     loader_message: bool,\n }\n "}, {"sha": "8f78c2e6f59d7d384a701fa0fc6c573c1aa15583", "filename": "src/libstd/sys_common/backtrace.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Flibstd%2Fsys_common%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Flibstd%2Fsys_common%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fbacktrace.rs?ref=23a5fb811e3e0c76153c9161c7a6eedb2714b554", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![cfg_attr(target_os = \"nacl\", allow(dead_code))]\n-\n /// Common code for printing the backtrace in the same way across the different\n /// supported platforms.\n "}, {"sha": "ce43ec6d9abf585f70b910403824a59555e70762", "filename": "src/libstd/sys_common/remutex.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Flibstd%2Fsys_common%2Fremutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Flibstd%2Fsys_common%2Fremutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fremutex.rs?ref=23a5fb811e3e0c76153c9161c7a6eedb2714b554", "patch": "@@ -116,11 +116,18 @@ impl<T> Drop for ReentrantMutex<T> {\n impl<T: fmt::Debug + 'static> fmt::Debug for ReentrantMutex<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match self.try_lock() {\n-            Ok(guard) => write!(f, \"ReentrantMutex {{ data: {:?} }}\", &*guard),\n+            Ok(guard) => f.debug_struct(\"ReentrantMutex\").field(\"data\", &*guard).finish(),\n             Err(TryLockError::Poisoned(err)) => {\n-                write!(f, \"ReentrantMutex {{ data: Poisoned({:?}) }}\", &**err.get_ref())\n+                f.debug_struct(\"ReentrantMutex\").field(\"data\", &**err.get_ref()).finish()\n             },\n-            Err(TryLockError::WouldBlock) => write!(f, \"ReentrantMutex {{ <locked> }}\")\n+            Err(TryLockError::WouldBlock) => {\n+                struct LockedPlaceholder;\n+                impl fmt::Debug for LockedPlaceholder {\n+                    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result { f.write_str(\"<locked>\") }\n+                }\n+\n+                f.debug_struct(\"ReentrantMutex\").field(\"data\", &LockedPlaceholder).finish()\n+            }\n         }\n     }\n }"}, {"sha": "07bbddc62b9f9f5e07cad2d1e8c158878cfc8a71", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=23a5fb811e3e0c76153c9161c7a6eedb2714b554", "patch": "@@ -485,15 +485,17 @@ impl Builder {\n /// let (tx, rx) = channel();\n ///\n /// let sender = thread::spawn(move || {\n-///     let _ = tx.send(\"Hello, thread\".to_owned());\n+///     tx.send(\"Hello, thread\".to_owned())\n+///         .expect(\"Unable to send on channel\");\n /// });\n ///\n /// let receiver = thread::spawn(move || {\n-///     println!(\"{}\", rx.recv().unwrap());\n+///     let value = rx.recv().expect(\"Unable to receive from channel\");\n+///     println!(\"{}\", value);\n /// });\n ///\n-/// let _ = sender.join();\n-/// let _ = receiver.join();\n+/// sender.join().expect(\"The sender thread has panicked\");\n+/// receiver.join().expect(\"The receiver thread has panicked\");\n /// ```\n ///\n /// A thread can also return a value through its [`JoinHandle`], you can use\n@@ -1192,7 +1194,7 @@ impl<T> JoinInner<T> {\n ///     });\n /// });\n ///\n-/// let _ = original_thread.join();\n+/// original_thread.join().expect(\"The thread being joined has panicked\");\n /// println!(\"Original thread is joined.\");\n ///\n /// // We make sure that the new thread has time to run, before the main"}, {"sha": "ff020445715d4511263fe8f70b95915c2a289bd5", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=23a5fb811e3e0c76153c9161c7a6eedb2714b554", "patch": "@@ -2890,17 +2890,30 @@ impl<'a> Parser<'a> {\n \n                 match self.parse_path(PathStyle::Expr) {\n                     Ok(path) => {\n+                        let (op_noun, op_verb) = match self.token {\n+                            token::Lt => (\"comparison\", \"comparing\"),\n+                            token::BinOp(token::Shl) => (\"shift\", \"shifting\"),\n+                            _ => {\n+                                // We can end up here even without `<` being the next token, for\n+                                // example because `parse_ty_no_plus` returns `Err` on keywords,\n+                                // but `parse_path` returns `Ok` on them due to error recovery.\n+                                // Return original error and parser state.\n+                                mem::replace(self, parser_snapshot_after_type);\n+                                return Err(type_err);\n+                            }\n+                        };\n+\n                         // Successfully parsed the type path leaving a `<` yet to parse.\n                         type_err.cancel();\n \n                         // Report non-fatal diagnostics, keep `x as usize` as an expression\n                         // in AST and continue parsing.\n                         let msg = format!(\"`<` is interpreted as a start of generic \\\n-                                           arguments for `{}`, not a comparison\", path);\n+                                           arguments for `{}`, not a {}\", path, op_noun);\n                         let mut err = self.sess.span_diagnostic.struct_span_err(self.span, &msg);\n                         err.span_label(self.look_ahead_span(1).to(parser_snapshot_after_type.span),\n                                        \"interpreted as generic arguments\");\n-                        err.span_label(self.span, \"not interpreted as comparison\");\n+                        err.span_label(self.span, format!(\"not interpreted as {}\", op_noun));\n \n                         let expr = mk_expr(self, P(Ty {\n                             span: path.span,\n@@ -2911,7 +2924,7 @@ impl<'a> Parser<'a> {\n                         let expr_str = self.sess.codemap().span_to_snippet(expr.span)\n                                                 .unwrap_or(pprust::expr_to_string(&expr));\n                         err.span_suggestion(expr.span,\n-                                            \"try comparing the casted value\",\n+                                            &format!(\"try {} the casted value\", op_verb),\n                                             format!(\"({})\", expr_str));\n                         err.emit();\n "}, {"sha": "d30d79ece15c73cf62d566b10cc74dff87d18e11", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=23a5fb811e3e0c76153c9161c7a6eedb2714b554", "patch": "@@ -339,8 +339,11 @@ impl serialize::UseSpecializedDecodable for Span {\n }\n \n fn default_span_debug(span: Span, f: &mut fmt::Formatter) -> fmt::Result {\n-    write!(f, \"Span {{ lo: {:?}, hi: {:?}, ctxt: {:?} }}\",\n-           span.lo(), span.hi(), span.ctxt())\n+    f.debug_struct(\"Span\")\n+        .field(\"lo\", &span.lo())\n+        .field(\"hi\", &span.hi())\n+        .field(\"ctxt\", &span.ctxt())\n+        .finish()\n }\n \n impl fmt::Debug for Span {"}, {"sha": "e8a1242c8145f64bbac2d30a7369f4ceaeed8f78", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=23a5fb811e3e0c76153c9161c7a6eedb2714b554", "patch": "@@ -1554,16 +1554,14 @@ impl MetricMap {\n /// elimination.\n ///\n /// This function is a no-op, and does not even read from `dummy`.\n-#[cfg(not(any(all(target_os = \"nacl\", target_arch = \"le32\"),\n-              target_arch = \"asmjs\", target_arch = \"wasm32\")))]\n+#[cfg(not(any(target_arch = \"asmjs\", target_arch = \"wasm32\")))]\n pub fn black_box<T>(dummy: T) -> T {\n     // we need to \"use\" the argument in some way LLVM can't\n     // introspect.\n     unsafe { asm!(\"\" : : \"r\"(&dummy)) }\n     dummy\n }\n-#[cfg(any(all(target_os = \"nacl\", target_arch = \"le32\"),\n-          target_arch = \"asmjs\", target_arch = \"wasm32\"))]\n+#[cfg(any(target_arch = \"asmjs\", target_arch = \"wasm32\"))]\n #[inline(never)]\n pub fn black_box<T>(dummy: T) -> T {\n     dummy"}, {"sha": "20ea8d70302205f1084b7745ef24475b86e8c2c4", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=23a5fb811e3e0c76153c9161c7a6eedb2714b554", "patch": "@@ -57,7 +57,7 @@ static AtomicOrdering fromRust(LLVMAtomicOrdering Ordering) {\n   llvm_unreachable(\"Invalid LLVMAtomicOrdering value!\");\n }\n \n-static char *LastError;\n+static LLVM_THREAD_LOCAL char *LastError;\n \n extern \"C\" LLVMMemoryBufferRef\n LLVMRustCreateMemoryBufferWithContentsOfFile(const char *Path) {"}, {"sha": "b8033b88fb75eaec0b2d81ea031821bb8baa1dec", "filename": "src/test/codegen-units/item-collection/drop_in_place_intrinsic.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fdrop_in_place_intrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fdrop_in_place_intrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fdrop_in_place_intrinsic.rs?ref=23a5fb811e3e0c76153c9161c7a6eedb2714b554", "patch": "@@ -10,6 +10,7 @@\n \n // ignore-tidy-linelength\n // compile-flags:-Zprint-trans-items=eager\n+// compile-flags:-Zinline-in-all-cgus\n \n //~ TRANS_ITEM fn core::ptr[0]::drop_in_place[0]<drop_in_place_intrinsic::StructWithDtor[0]> @@ drop_in_place_intrinsic0[Internal]\n struct StructWithDtor(u32);"}, {"sha": "65936d12e316fde81392057ffbaeb02f1309d9ed", "filename": "src/test/codegen-units/item-collection/generic-drop-glue.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fgeneric-drop-glue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fgeneric-drop-glue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fgeneric-drop-glue.rs?ref=23a5fb811e3e0c76153c9161c7a6eedb2714b554", "patch": "@@ -10,6 +10,7 @@\n \n // ignore-tidy-linelength\n // compile-flags:-Zprint-trans-items=eager\n+// compile-flags:-Zinline-in-all-cgus\n \n #![deny(dead_code)]\n "}, {"sha": "e32366d15c33718c82a64b88b9713ab6c131de38", "filename": "src/test/codegen-units/item-collection/instantiation-through-vtable.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Finstantiation-through-vtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Finstantiation-through-vtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Finstantiation-through-vtable.rs?ref=23a5fb811e3e0c76153c9161c7a6eedb2714b554", "patch": "@@ -10,6 +10,7 @@\n \n // ignore-tidy-linelength\n // compile-flags:-Zprint-trans-items=eager\n+// compile-flags:-Zinline-in-all-cgus\n \n #![deny(dead_code)]\n "}, {"sha": "5765f230e8bd4331336bd9fb7235595dc449a4ed", "filename": "src/test/codegen-units/item-collection/non-generic-drop-glue.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fnon-generic-drop-glue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fnon-generic-drop-glue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fnon-generic-drop-glue.rs?ref=23a5fb811e3e0c76153c9161c7a6eedb2714b554", "patch": "@@ -10,6 +10,7 @@\n \n // ignore-tidy-linelength\n // compile-flags:-Zprint-trans-items=eager\n+// compile-flags:-Zinline-in-all-cgus\n \n #![deny(dead_code)]\n "}, {"sha": "be560690e51903563fb616c20cd51430c353c804", "filename": "src/test/codegen-units/item-collection/transitive-drop-glue.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftransitive-drop-glue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftransitive-drop-glue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftransitive-drop-glue.rs?ref=23a5fb811e3e0c76153c9161c7a6eedb2714b554", "patch": "@@ -10,6 +10,7 @@\n \n // ignore-tidy-linelength\n // compile-flags:-Zprint-trans-items=eager\n+// compile-flags:-Zinline-in-all-cgus\n \n #![deny(dead_code)]\n "}, {"sha": "ad1475a73f7cc58aad6987f8625673112f1bba07", "filename": "src/test/codegen-units/item-collection/tuple-drop-glue.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftuple-drop-glue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftuple-drop-glue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftuple-drop-glue.rs?ref=23a5fb811e3e0c76153c9161c7a6eedb2714b554", "patch": "@@ -10,6 +10,7 @@\n \n // ignore-tidy-linelength\n // compile-flags:-Zprint-trans-items=eager\n+// compile-flags:-Zinline-in-all-cgus\n \n #![deny(dead_code)]\n "}, {"sha": "d7e457cde8a9092c15fd3fe97ef32328ac9a09e7", "filename": "src/test/codegen-units/item-collection/unsizing.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Funsizing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Funsizing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Funsizing.rs?ref=23a5fb811e3e0c76153c9161c7a6eedb2714b554", "patch": "@@ -10,6 +10,7 @@\n \n // ignore-tidy-linelength\n // compile-flags:-Zprint-trans-items=eager\n+// compile-flags:-Zinline-in-all-cgus\n \n #![deny(dead_code)]\n #![feature(coerce_unsized)]"}, {"sha": "29528644ed0a055c714fe8ea7082e9dd27c7f46a", "filename": "src/test/codegen-units/partitioning/extern-drop-glue.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fextern-drop-glue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fextern-drop-glue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fextern-drop-glue.rs?ref=23a5fb811e3e0c76153c9161c7a6eedb2714b554", "patch": "@@ -13,6 +13,7 @@\n // We specify -Z incremental here because we want to test the partitioning for\n // incremental compilation\n // compile-flags:-Zprint-trans-items=lazy -Zincremental=tmp/partitioning-tests/extern-drop-glue\n+// compile-flags:-Zinline-in-all-cgus\n \n #![allow(dead_code)]\n #![crate_type=\"lib\"]"}, {"sha": "4bfd35b59bc120a7c20ad86f8ed4c1195d9f2422", "filename": "src/test/codegen-units/partitioning/inlining-from-extern-crate.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Finlining-from-extern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Finlining-from-extern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Finlining-from-extern-crate.rs?ref=23a5fb811e3e0c76153c9161c7a6eedb2714b554", "patch": "@@ -12,6 +12,7 @@\n // We specify -Z incremental here because we want to test the partitioning for\n // incremental compilation\n // compile-flags:-Zprint-trans-items=lazy -Zincremental=tmp/partitioning-tests/inlining-from-extern-crate\n+// compile-flags:-Zinline-in-all-cgus\n \n #![crate_type=\"lib\"]\n "}, {"sha": "65e91343ccfcf2c957678d49949fb4f2be65ec3a", "filename": "src/test/codegen-units/partitioning/local-drop-glue.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-drop-glue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-drop-glue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-drop-glue.rs?ref=23a5fb811e3e0c76153c9161c7a6eedb2714b554", "patch": "@@ -12,6 +12,7 @@\n // We specify -Z incremental here because we want to test the partitioning for\n // incremental compilation\n // compile-flags:-Zprint-trans-items=lazy -Zincremental=tmp/partitioning-tests/local-drop-glue\n+// compile-flags:-Zinline-in-all-cgus\n \n #![allow(dead_code)]\n #![crate_type=\"lib\"]"}, {"sha": "ccc8f03a40ffebb2e6678e0b8f15a42c32be732a", "filename": "src/test/codegen-units/partitioning/local-inlining-but-not-all.rs", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-inlining-but-not-all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-inlining-but-not-all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-inlining-but-not-all.rs?ref=23a5fb811e3e0c76153c9161c7a6eedb2714b554", "patch": "@@ -0,0 +1,54 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-tidy-linelength\n+// We specify -Z incremental here because we want to test the partitioning for\n+// incremental compilation\n+// compile-flags:-Zprint-trans-items=lazy -Zincremental=tmp/partitioning-tests/local-inlining-but-not-all\n+// compile-flags:-Zinline-in-all-cgus=no\n+\n+#![allow(dead_code)]\n+#![crate_type=\"lib\"]\n+\n+mod inline {\n+\n+    //~ TRANS_ITEM fn local_inlining_but_not_all::inline[0]::inlined_function[0] @@ local_inlining_but_not_all-inline[External]\n+    #[inline(always)]\n+    pub fn inlined_function()\n+    {\n+\n+    }\n+}\n+\n+mod user1 {\n+    use super::inline;\n+\n+    //~ TRANS_ITEM fn local_inlining_but_not_all::user1[0]::foo[0] @@ local_inlining_but_not_all-user1[Internal]\n+    fn foo() {\n+        inline::inlined_function();\n+    }\n+}\n+\n+mod user2 {\n+    use super::inline;\n+\n+    //~ TRANS_ITEM fn local_inlining_but_not_all::user2[0]::bar[0] @@ local_inlining_but_not_all-user2[Internal]\n+    fn bar() {\n+        inline::inlined_function();\n+    }\n+}\n+\n+mod non_user {\n+\n+    //~ TRANS_ITEM fn local_inlining_but_not_all::non_user[0]::baz[0] @@ local_inlining_but_not_all-non_user[Internal]\n+    fn baz() {\n+\n+    }\n+}"}, {"sha": "f31761912412e270191e1707614cb658c8117a48", "filename": "src/test/codegen-units/partitioning/local-inlining.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-inlining.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-inlining.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-inlining.rs?ref=23a5fb811e3e0c76153c9161c7a6eedb2714b554", "patch": "@@ -12,6 +12,7 @@\n // We specify -Z incremental here because we want to test the partitioning for\n // incremental compilation\n // compile-flags:-Zprint-trans-items=lazy -Zincremental=tmp/partitioning-tests/local-inlining\n+// compile-flags:-Zinline-in-all-cgus\n \n #![allow(dead_code)]\n #![crate_type=\"lib\"]"}, {"sha": "bda76a8789f0f07790e6b9c20462627a584fb391", "filename": "src/test/codegen-units/partitioning/local-transitive-inlining.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-transitive-inlining.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-transitive-inlining.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-transitive-inlining.rs?ref=23a5fb811e3e0c76153c9161c7a6eedb2714b554", "patch": "@@ -12,6 +12,7 @@\n // We specify -Z incremental here because we want to test the partitioning for\n // incremental compilation\n // compile-flags:-Zprint-trans-items=lazy -Zincremental=tmp/partitioning-tests/local-transitive-inlining\n+// compile-flags:-Zinline-in-all-cgus\n \n #![allow(dead_code)]\n #![crate_type=\"lib\"]"}, {"sha": "302f9312b57095ef125cd5f27fd9e7aa9454fe2d", "filename": "src/test/codegen-units/partitioning/vtable-through-const.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fvtable-through-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fvtable-through-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fvtable-through-const.rs?ref=23a5fb811e3e0c76153c9161c7a6eedb2714b554", "patch": "@@ -13,6 +13,7 @@\n // We specify -Z incremental here because we want to test the partitioning for\n // incremental compilation\n // compile-flags:-Zprint-trans-items=lazy -Zincremental=tmp/partitioning-tests/vtable-through-const\n+// compile-flags:-Zinline-in-all-cgus\n \n // This test case makes sure, that references made through constants are\n // recorded properly in the InliningMap."}, {"sha": "6a6d6f90b2e69acab3553106cd1959620dcd7118", "filename": "src/test/codegen/float_math.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Ftest%2Fcodegen%2Ffloat_math.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Ftest%2Fcodegen%2Ffloat_math.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Ffloat_math.rs?ref=23a5fb811e3e0c76153c9161c7a6eedb2714b554", "patch": "@@ -19,7 +19,7 @@ use std::intrinsics::{fadd_fast, fsub_fast, fmul_fast, fdiv_fast, frem_fast};\n #[no_mangle]\n pub fn add(x: f32, y: f32) -> f32 {\n // CHECK: fadd float\n-// CHECK-NOT fast\n+// CHECK-NOT: fast\n     x + y\n }\n "}, {"sha": "914632e96ba316569dbb52f5e733b03bbdd4bbfe", "filename": "src/test/incremental/macro_export.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Ftest%2Fincremental%2Fmacro_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Ftest%2Fincremental%2Fmacro_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fmacro_export.rs?ref=23a5fb811e3e0c76153c9161c7a6eedb2714b554", "patch": "@@ -8,10 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: -Zincremental=tmp/cfail-tests/incr_comp_with_macro_export\n+// revisions: cfail1 cfail2 cfail3\n // must-compile-successfully\n \n-\n // This test case makes sure that we can compile with incremental compilation\n // enabled when there are macros exported from this crate. (See #37756)\n ", "previous_filename": "src/test/compile-fail/incr_comp_with_macro_export.rs"}, {"sha": "51191dd7087e483e3f9ae7eabdfe067bbfc83a72", "filename": "src/test/run-fail/mir_drop_panics.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Ftest%2Frun-fail%2Fmir_drop_panics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Ftest%2Frun-fail%2Fmir_drop_panics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmir_drop_panics.rs?ref=23a5fb811e3e0c76153c9161c7a6eedb2714b554", "patch": "@@ -10,15 +10,14 @@\n \n // error-pattern:panic 1\n // error-pattern:drop 2\n-use std::io::{self, Write};\n \n struct Droppable(u32);\n impl Drop for Droppable {\n     fn drop(&mut self) {\n         if self.0 == 1 {\n             panic!(\"panic 1\");\n         } else {\n-            write!(io::stderr(), \"drop {}\", self.0);\n+            eprint!(\"drop {}\", self.0);\n         }\n     }\n }"}, {"sha": "69f934272b75cd72a8ffe701ddbdc324ae6b7a98", "filename": "src/test/run-fail/mir_dynamic_drops_1.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Ftest%2Frun-fail%2Fmir_dynamic_drops_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Ftest%2Frun-fail%2Fmir_dynamic_drops_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmir_dynamic_drops_1.rs?ref=23a5fb811e3e0c76153c9161c7a6eedb2714b554", "patch": "@@ -9,18 +9,17 @@\n // except according to those terms.\n // error-pattern:drop 1\n // error-pattern:drop 2\n-use std::io::{self, Write};\n \n \n /// Structure which will not allow to be dropped twice.\n struct Droppable<'a>(&'a mut bool, u32);\n impl<'a> Drop for Droppable<'a> {\n     fn drop(&mut self) {\n         if *self.0 {\n-            writeln!(io::stderr(), \"{} dropped twice\", self.1);\n+            eprintln!(\"{} dropped twice\", self.1);\n             ::std::process::exit(1);\n         }\n-        writeln!(io::stderr(), \"drop {}\", self.1);\n+        eprintln!(\"drop {}\", self.1);\n         *self.0 = true;\n     }\n }"}, {"sha": "d2fe50401ab8de4a6da8dc44169f13dac44fe103", "filename": "src/test/run-fail/mir_dynamic_drops_2.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Ftest%2Frun-fail%2Fmir_dynamic_drops_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Ftest%2Frun-fail%2Fmir_dynamic_drops_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmir_dynamic_drops_2.rs?ref=23a5fb811e3e0c76153c9161c7a6eedb2714b554", "patch": "@@ -9,18 +9,17 @@\n // except according to those terms.\n \n // error-pattern:drop 1\n-use std::io::{self, Write};\n \n \n /// Structure which will not allow to be dropped twice.\n struct Droppable<'a>(&'a mut bool, u32);\n impl<'a> Drop for Droppable<'a> {\n     fn drop(&mut self) {\n         if *self.0 {\n-            writeln!(io::stderr(), \"{} dropped twice\", self.1);\n+            eprintln!(\"{} dropped twice\", self.1);\n             ::std::process::exit(1);\n         }\n-        writeln!(io::stderr(), \"drop {}\", self.1);\n+        eprintln!(\"drop {}\", self.1);\n         *self.0 = true;\n     }\n }"}, {"sha": "ecc35ee9b2409545c814ab498e730ab9b03556be", "filename": "src/test/run-fail/mir_dynamic_drops_3.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Ftest%2Frun-fail%2Fmir_dynamic_drops_3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Ftest%2Frun-fail%2Fmir_dynamic_drops_3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmir_dynamic_drops_3.rs?ref=23a5fb811e3e0c76153c9161c7a6eedb2714b554", "patch": "@@ -12,18 +12,17 @@\n // error-pattern:drop 3\n // error-pattern:drop 2\n // error-pattern:drop 1\n-use std::io::{self, Write};\n \n \n /// Structure which will not allow to be dropped twice.\n struct Droppable<'a>(&'a mut bool, u32);\n impl<'a> Drop for Droppable<'a> {\n     fn drop(&mut self) {\n         if *self.0 {\n-            writeln!(io::stderr(), \"{} dropped twice\", self.1);\n+            eprintln!(\"{} dropped twice\", self.1);\n             ::std::process::exit(1);\n         }\n-        writeln!(io::stderr(), \"drop {}\", self.1);\n+        eprintln!(\"drop {}\", self.1);\n         *self.0 = true;\n     }\n }"}, {"sha": "9c851eb7346bb295bedfc10fc41fb88980d52cfd", "filename": "src/test/run-fail/mir_trans_calls_converging_drops.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Ftest%2Frun-fail%2Fmir_trans_calls_converging_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Ftest%2Frun-fail%2Fmir_trans_calls_converging_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmir_trans_calls_converging_drops.rs?ref=23a5fb811e3e0c76153c9161c7a6eedb2714b554", "patch": "@@ -12,17 +12,15 @@\n // error-pattern:0 dropped\n // error-pattern:exit\n \n-use std::io::{self, Write};\n-\n struct Droppable(u8);\n impl Drop for Droppable {\n     fn drop(&mut self) {\n-        write!(io::stderr(), \"{} dropped\\n\", self.0);\n+        eprintln!(\"{} dropped\", self.0);\n     }\n }\n \n fn converging_fn() {\n-    write!(io::stderr(), \"converging_fn called\\n\");\n+    eprintln!(\"converging_fn called\");\n }\n \n fn mir(d: Droppable) {"}, {"sha": "6f10521155648a8e83fe5f34caa721d34e9191ed", "filename": "src/test/run-fail/mir_trans_calls_converging_drops_2.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Ftest%2Frun-fail%2Fmir_trans_calls_converging_drops_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Ftest%2Frun-fail%2Fmir_trans_calls_converging_drops_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmir_trans_calls_converging_drops_2.rs?ref=23a5fb811e3e0c76153c9161c7a6eedb2714b554", "patch": "@@ -12,18 +12,16 @@\n // error-pattern:dropped\n // error-pattern:exit\n \n-use std::io::{self, Write};\n-\n struct Droppable;\n impl Drop for Droppable {\n     fn drop(&mut self) {\n-        write!(io::stderr(), \"dropped\\n\");\n+        eprintln!(\"dropped\");\n     }\n }\n \n // return value of this function is copied into the return slot\n fn complex() -> u64 {\n-    write!(io::stderr(), \"complex called\\n\");\n+    eprintln!(\"complex called\");\n     42\n }\n "}, {"sha": "f8fbe8f79cc622bd8068a4c00d2e056354019898", "filename": "src/test/run-fail/mir_trans_calls_diverging_drops.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Ftest%2Frun-fail%2Fmir_trans_calls_diverging_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Ftest%2Frun-fail%2Fmir_trans_calls_diverging_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmir_trans_calls_diverging_drops.rs?ref=23a5fb811e3e0c76153c9161c7a6eedb2714b554", "patch": "@@ -11,12 +11,10 @@\n // error-pattern:diverging_fn called\n // error-pattern:0 dropped\n \n-use std::io::{self, Write};\n-\n struct Droppable(u8);\n impl Drop for Droppable {\n     fn drop(&mut self) {\n-        write!(io::stderr(), \"{} dropped\", self.0);\n+        eprintln!(\"{} dropped\", self.0);\n     }\n }\n "}, {"sha": "68f1c4ed0bceddc17d52ac9b413d64c95fb1bc96", "filename": "src/test/run-fail/panic-set-handler.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Ftest%2Frun-fail%2Fpanic-set-handler.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Ftest%2Frun-fail%2Fpanic-set-handler.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fpanic-set-handler.rs?ref=23a5fb811e3e0c76153c9161c7a6eedb2714b554", "patch": "@@ -13,11 +13,10 @@\n #![feature(panic_handler)]\n \n use std::panic;\n-use std::io::{self, Write};\n \n fn main() {\n     panic::set_hook(Box::new(|i| {\n-        write!(io::stderr(), \"greetings from the panic handler\");\n+        eprint!(\"greetings from the panic handler\");\n     }));\n     panic!(\"foobar\");\n }"}, {"sha": "072139a8c9b802c8fe653c82ef1a0f06cade2537", "filename": "src/test/run-fail/panic-set-unset-handler.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Ftest%2Frun-fail%2Fpanic-set-unset-handler.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Ftest%2Frun-fail%2Fpanic-set-unset-handler.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fpanic-set-unset-handler.rs?ref=23a5fb811e3e0c76153c9161c7a6eedb2714b554", "patch": "@@ -13,11 +13,10 @@\n #![feature(panic_handler)]\n \n use std::panic;\n-use std::io::{self, Write};\n \n fn main() {\n     panic::set_hook(Box::new(|i| {\n-        write!(io::stderr(), \"greetings from the panic handler\");\n+        eprint!(\"greetings from the panic handler\");\n     }));\n     panic::take_hook();\n     panic!(\"foobar\");"}, {"sha": "ccd4e1b0e715a9f72cbabc15bedcf8aea1159fb5", "filename": "src/test/run-make/sepcomp-cci-copies/Makefile", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Ftest%2Frun-make%2Fsepcomp-cci-copies%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Ftest%2Frun-make%2Fsepcomp-cci-copies%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsepcomp-cci-copies%2FMakefile?ref=23a5fb811e3e0c76153c9161c7a6eedb2714b554", "patch": "@@ -5,5 +5,6 @@\n \n all:\n \t$(RUSTC) cci_lib.rs\n-\t$(RUSTC) foo.rs --emit=llvm-ir -C codegen-units=3\n+\t$(RUSTC) foo.rs --emit=llvm-ir -C codegen-units=3 \\\n+\t\t-Z inline-in-all-cgus\n \t[ \"$$(cat \"$(TMPDIR)\"/foo.*.ll | grep -c define\\ .*cci_fn)\" -eq \"2\" ]"}, {"sha": "1d20d940000f4d4e4f17f18257bff61dd4a040d8", "filename": "src/test/run-make/sepcomp-inlining/Makefile", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Ftest%2Frun-make%2Fsepcomp-inlining%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Ftest%2Frun-make%2Fsepcomp-inlining%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsepcomp-inlining%2FMakefile?ref=23a5fb811e3e0c76153c9161c7a6eedb2714b554", "patch": "@@ -7,7 +7,8 @@\n # in only one compilation unit.\n \n all:\n-\t$(RUSTC) foo.rs --emit=llvm-ir -C codegen-units=3\n+\t$(RUSTC) foo.rs --emit=llvm-ir -C codegen-units=3 \\\n+\t\t-Z inline-in-all-cgus\n \t[ \"$$(cat \"$(TMPDIR)\"/foo.*.ll | grep -c define\\ i32\\ .*inlined)\" -eq \"0\" ]\n \t[ \"$$(cat \"$(TMPDIR)\"/foo.*.ll | grep -c define\\ internal\\ i32\\ .*inlined)\" -eq \"2\" ]\n \t[ \"$$(cat \"$(TMPDIR)\"/foo.*.ll | grep -c define\\ hidden\\ i32\\ .*normal)\" -eq \"1\" ]"}, {"sha": "5ea96daa3ef85c90cc5dfce536f1e9f444cbf166", "filename": "src/test/run-make/target-specs/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Ftest%2Frun-make%2Ftarget-specs%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Ftest%2Frun-make%2Ftarget-specs%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Ftarget-specs%2FMakefile?ref=23a5fb811e3e0c76153c9161c7a6eedb2714b554", "patch": "@@ -5,5 +5,5 @@ all:\n \t$(RUSTC) foo.rs --target=my-invalid-platform.json 2>&1 | grep -q \"Error loading target specification\"\n \t$(RUSTC) foo.rs --target=my-incomplete-platform.json 2>&1 | grep 'Field llvm-target'\n \tRUST_TARGET_PATH=. $(RUSTC) foo.rs --target=my-awesome-platform --crate-type=lib --emit=asm\n-\tRUST_TARGET_PATH=. $(RUSTC) foo.rs --target=x86_64-unknown-linux-gnu --crate-type=lib --emit=asm\n+\tRUST_TARGET_PATH=. $(RUSTC) foo.rs --target=my-x86_64-unknown-linux-gnu-platform --crate-type=lib --emit=asm\n \t$(RUSTC) -Z unstable-options --target=my-awesome-platform.json --print target-spec-json > $(TMPDIR)/test-platform.json && $(RUSTC) -Z unstable-options --target=$(TMPDIR)/test-platform.json --print target-spec-json | diff -q $(TMPDIR)/test-platform.json -"}, {"sha": "3ae01d72fcc18c4e0f617ef535ec99b81b4f38f8", "filename": "src/test/run-make/target-specs/my-x86_64-unknown-linux-gnu-platform.json", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Ftest%2Frun-make%2Ftarget-specs%2Fmy-x86_64-unknown-linux-gnu-platform.json", "raw_url": "https://github.com/rust-lang/rust/raw/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Ftest%2Frun-make%2Ftarget-specs%2Fmy-x86_64-unknown-linux-gnu-platform.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Ftarget-specs%2Fmy-x86_64-unknown-linux-gnu-platform.json?ref=23a5fb811e3e0c76153c9161c7a6eedb2714b554", "patch": "@@ -1,6 +1,6 @@\n {\n     \"pre-link-args\": [\"-m64\"],\n-    \"data-layout\": \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128\",\n+    \"data-layout\": \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\",\n     \"linker-flavor\": \"gcc\",\n     \"llvm-target\": \"x86_64-unknown-linux-gnu\",\n     \"target-endian\": \"little\",", "previous_filename": "src/test/run-make/target-specs/x86_64-unknown-linux-gnu.json"}, {"sha": "f9233026a1e6e2628a841faf01aec2f14c5607ce", "filename": "src/test/run-pass/backtrace-debuginfo.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Ftest%2Frun-pass%2Fbacktrace-debuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Ftest%2Frun-pass%2Fbacktrace-debuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbacktrace-debuginfo.rs?ref=23a5fb811e3e0c76153c9161c7a6eedb2714b554", "patch": "@@ -19,8 +19,6 @@\n // ignore-pretty issue #37195\n // ignore-emscripten spawning processes is not supported\n \n-use std::io;\n-use std::io::prelude::*;\n use std::env;\n \n #[path = \"backtrace-debuginfo-aux.rs\"] mod aux;\n@@ -163,7 +161,7 @@ fn main() {\n     let args: Vec<String> = env::args().collect();\n     if args.len() >= 2 {\n         let case = args[1].parse().unwrap();\n-        writeln!(&mut io::stderr(), \"test case {}\", case).unwrap();\n+        eprintln!(\"test case {}\", case);\n         outer(case, pos!());\n         println!(\"done.\");\n     } else {"}, {"sha": "c8e0cd1763ffa14acd62c441eb3d56ac850f9524", "filename": "src/test/ui/issue-22644.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Ftest%2Fui%2Fissue-22644.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Ftest%2Fui%2Fissue-22644.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-22644.rs?ref=23a5fb811e3e0c76153c9161c7a6eedb2714b554", "patch": "@@ -35,5 +35,7 @@ fn main() {\n                    <\n                    5);\n \n+    println!(\"{}\", a as usize << long_name);\n+\n     println!(\"{}\", a: &mut 4);\n }"}, {"sha": "f4967c4803bee28b8a01fc5bd1fa1f111deb913b", "filename": "src/test/ui/issue-22644.stderr", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Ftest%2Fui%2Fissue-22644.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Ftest%2Fui%2Fissue-22644.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-22644.stderr?ref=23a5fb811e3e0c76153c9161c7a6eedb2714b554", "patch": "@@ -76,9 +76,18 @@ help: try comparing the casted value\n 33 | \n  ...\n \n+error: `<` is interpreted as a start of generic arguments for `usize`, not a shift\n+  --> $DIR/issue-22644.rs:38:31\n+   |\n+38 |     println!(\"{}\", a as usize << long_name);\n+   |                    ---------- ^^ --------- interpreted as generic arguments\n+   |                    |          |\n+   |                    |          not interpreted as shift\n+   |                    help: try shifting the casted value: `(a as usize)`\n+\n error: expected type, found `4`\n-  --> $DIR/issue-22644.rs:38:28\n+  --> $DIR/issue-22644.rs:40:28\n    |\n-38 |     println!(\"{}\", a: &mut 4);\n+40 |     println!(\"{}\", a: &mut 4);\n    |                            ^ expecting a type here because of type ascription\n "}, {"sha": "abf572118fc68ce3fca4cab7d7d81bc8e89d70e8", "filename": "src/test/ui/issue-44406.rs", "status": "renamed", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Ftest%2Fui%2Fissue-44406.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Ftest%2Fui%2Fissue-44406.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-44406.rs?ref=23a5fb811e3e0c76153c9161c7a6eedb2714b554", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -8,9 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Nacl-specific definitions\n+macro_rules! foo {\n+    ($rest: tt) => {\n+        bar(baz: $rest)\n+    }\n+}\n \n-#![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-\n-pub mod raw;\n-pub mod fs;\n+fn main() {\n+    foo!(true);\n+}", "previous_filename": "src/libstd/os/nacl/mod.rs"}, {"sha": "e07face24bab7b0c4acfd1dfd4e8693e64e5a208", "filename": "src/test/ui/issue-44406.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Ftest%2Fui%2Fissue-44406.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Ftest%2Fui%2Fissue-44406.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-44406.stderr?ref=23a5fb811e3e0c76153c9161c7a6eedb2714b554", "patch": "@@ -0,0 +1,26 @@\n+error: expected identifier, found keyword `true`\n+  --> $DIR/issue-44406.rs:18:10\n+   |\n+18 |     foo!(true);\n+   |          ^^^^\n+\n+error: expected type, found keyword `true`\n+  --> $DIR/issue-44406.rs:18:10\n+   |\n+13 |         bar(baz: $rest)\n+   |                - help: did you mean to use `;` here?\n+...\n+18 |     foo!(true);\n+   |          ^^^^ expecting a type here because of type ascription\n+\n+error: expected one of `!`, `&&`, `&`, `(`, `*`, `.`, `;`, `<`, `?`, `[`, `_`, `extern`, `fn`, `for`, `impl`, `unsafe`, `}`, an operator, or lifetime, found `true`\n+  --> $DIR/issue-44406.rs:18:10\n+   |\n+13 |         bar(baz: $rest)\n+   |                 - expected one of 19 possible tokens here\n+...\n+18 |     foo!(true);\n+   |          ^^^^ unexpected token\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "191958387912e811f29114e0443b05a01a2f5f3e", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=23a5fb811e3e0c76153c9161c7a6eedb2714b554", "patch": "@@ -567,6 +567,19 @@ impl Config {\n             None\n         }\n     }\n+\n+    pub fn find_rust_src_root(&self) -> Option<PathBuf> {\n+        let mut path = self.src_base.clone();\n+        let path_postfix = Path::new(\"src/etc/lldb_batchmode.py\");\n+\n+        while path.pop() {\n+            if path.join(&path_postfix).is_file() {\n+                return Some(path);\n+            }\n+        }\n+\n+        None\n+    }\n }\n \n pub fn lldb_version_to_int(version_string: &str) -> isize {"}, {"sha": "306497da9e3f9df5d2cd67b7f1502ae97c6050b1", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=23a5fb811e3e0c76153c9161c7a6eedb2714b554", "patch": "@@ -489,15 +489,28 @@ fn stamp(config: &Config, testpaths: &TestPaths) -> PathBuf {\n }\n \n fn up_to_date(config: &Config, testpaths: &TestPaths, props: &EarlyProps) -> bool {\n+    let rust_src_dir = config.find_rust_src_root().expect(\n+        \"Could not find Rust source root\",\n+    );\n     let stamp = mtime(&stamp(config, testpaths));\n-    let mut inputs = vec![\n-        mtime(&testpaths.file),\n-        mtime(&config.rustc_path),\n-    ];\n+    let mut inputs = vec![mtime(&testpaths.file), mtime(&config.rustc_path)];\n     for aux in props.aux.iter() {\n-        inputs.push(mtime(&testpaths.file.parent().unwrap()\n-                                         .join(\"auxiliary\")\n-                                         .join(aux)));\n+        inputs.push(mtime(\n+            &testpaths.file.parent().unwrap().join(\"auxiliary\").join(\n+                aux,\n+            ),\n+        ));\n+    }\n+    // Relevant pretty printer files\n+    let pretty_printer_files = [\n+        \"src/etc/debugger_pretty_printers_common.py\",\n+        \"src/etc/gdb_load_rust_pretty_printers.py\",\n+        \"src/etc/gdb_rust_pretty_printing.py\",\n+        \"src/etc/lldb_batchmode.py\",\n+        \"src/etc/lldb_rust_formatters.py\",\n+    ];\n+    for pretty_printer_file in &pretty_printer_files {\n+        inputs.push(mtime(&rust_src_dir.join(pretty_printer_file)));\n     }\n     for lib in config.run_lib_path.read_dir().unwrap() {\n         let lib = lib.unwrap();"}, {"sha": "870e08cc6e595b59269e43b3454c00f50b4f8734", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 14, "deletions": 22, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=23a5fb811e3e0c76153c9161c7a6eedb2714b554", "patch": "@@ -571,9 +571,10 @@ actual:\\n\\\n                 }\n             }\n \n-            _=> {\n-                let rust_src_root = self.find_rust_src_root()\n-                                        .expect(\"Could not find Rust source root\");\n+            _ => {\n+                let rust_src_root = self.config.find_rust_src_root().expect(\n+                    \"Could not find Rust source root\",\n+                );\n                 let rust_pp_module_rel_path = Path::new(\"./src/etc\");\n                 let rust_pp_module_abs_path = rust_src_root.join(rust_pp_module_rel_path)\n                                                            .to_str()\n@@ -664,19 +665,6 @@ actual:\\n\\\n         self.check_debugger_output(&debugger_run_result, &check_lines);\n     }\n \n-    fn find_rust_src_root(&self) -> Option<PathBuf> {\n-        let mut path = self.config.src_base.clone();\n-        let path_postfix = Path::new(\"src/etc/lldb_batchmode.py\");\n-\n-        while path.pop() {\n-            if path.join(&path_postfix).is_file() {\n-                return Some(path);\n-            }\n-        }\n-\n-        None\n-    }\n-\n     fn run_debuginfo_lldb_test(&self) {\n         assert!(self.revision.is_none(), \"revisions not relevant here\");\n \n@@ -735,7 +723,9 @@ actual:\\n\\\n         script_str.push_str(\"version\\n\");\n \n         // Switch LLDB into \"Rust mode\"\n-        let rust_src_root = self.find_rust_src_root().expect(\"Could not find Rust source root\");\n+        let rust_src_root = self.config.find_rust_src_root().expect(\n+            \"Could not find Rust source root\",\n+        );\n         let rust_pp_module_rel_path = Path::new(\"./src/etc/lldb_rust_formatters.py\");\n         let rust_pp_module_abs_path = rust_src_root.join(rust_pp_module_rel_path)\n                                                    .to_str()\n@@ -1717,11 +1707,13 @@ actual:\\n\\\n         if self.props.check_test_line_numbers_match {\n             self.check_rustdoc_test_option(proc_res);\n         } else {\n-            let root = self.find_rust_src_root().unwrap();\n-            let res = self.cmd2procres(Command::new(&self.config.docck_python)\n-                                       .arg(root.join(\"src/etc/htmldocck.py\"))\n-                                       .arg(out_dir)\n-                                       .arg(&self.testpaths.file));\n+            let root = self.config.find_rust_src_root().unwrap();\n+            let res = self.cmd2procres(\n+                Command::new(&self.config.docck_python)\n+                    .arg(root.join(\"src/etc/htmldocck.py\"))\n+                    .arg(out_dir)\n+                    .arg(&self.testpaths.file),\n+            );\n             if !res.status.success() {\n                 self.fatal_proc_rec(\"htmldocck failed!\", &res);\n             }"}, {"sha": "c316ec467620a468d138785d74faf5108c8cabd7", "filename": "src/tools/tidy/src/lib.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs?ref=23a5fb811e3e0c76153c9161c7a6eedb2714b554", "patch": "@@ -33,10 +33,9 @@ macro_rules! t {\n \n macro_rules! tidy_error {\n     ($bad:expr, $fmt:expr, $($arg:tt)*) => ({\n-        use std::io::Write;\n         *$bad = true;\n-        write!(::std::io::stderr(), \"tidy error: \").expect(\"could not write to stderr\");\n-        writeln!(::std::io::stderr(), $fmt, $($arg)*).expect(\"could not write to stderr\");\n+        eprint!(\"tidy error: \");\n+        eprintln!($fmt, $($arg)*);\n     });\n }\n "}, {"sha": "f6640c902bcb47e798debf9e23518d4256669514", "filename": "src/tools/tidy/src/main.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23a5fb811e3e0c76153c9161c7a6eedb2714b554/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs?ref=23a5fb811e3e0c76153c9161c7a6eedb2714b554", "patch": "@@ -22,7 +22,6 @@ use tidy::*;\n use std::process;\n use std::path::PathBuf;\n use std::env;\n-use std::io::{self, Write};\n \n fn main() {\n     let path = env::args_os().skip(1).next().expect(\"need an argument\");\n@@ -44,7 +43,7 @@ fn main() {\n     }\n \n     if bad {\n-        writeln!(io::stderr(), \"some tidy checks failed\").expect(\"could not write to stderr\");\n+        eprintln!(\"some tidy checks failed\");\n         process::exit(1);\n     }\n }"}]}