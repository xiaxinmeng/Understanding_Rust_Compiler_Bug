{"sha": "2c268b9a5f4502271b0eec1071f6eaf4d535cea8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjMjY4YjlhNWY0NTAyMjcxYjBlZWMxMDcxZjZlYWY0ZDUzNWNlYTg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-17T11:28:21Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-17T11:37:41Z"}, "message": "Move tests", "tree": {"sha": "8f6a09190a1de167bf1eb82b99716f2ceb365297", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f6a09190a1de167bf1eb82b99716f2ceb365297"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c268b9a5f4502271b0eec1071f6eaf4d535cea8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c268b9a5f4502271b0eec1071f6eaf4d535cea8", "html_url": "https://github.com/rust-lang/rust/commit/2c268b9a5f4502271b0eec1071f6eaf4d535cea8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c268b9a5f4502271b0eec1071f6eaf4d535cea8/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ca0e9e00e5a55bd591ae0a85fb00918b111e063", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ca0e9e00e5a55bd591ae0a85fb00918b111e063", "html_url": "https://github.com/rust-lang/rust/commit/2ca0e9e00e5a55bd591ae0a85fb00918b111e063"}], "stats": {"total": 145, "additions": 71, "deletions": 74}, "files": [{"sha": "fd245705c12452fb21c766527ad61f88e3247789", "filename": "crates/ra_ide/src/display/navigation_target.rs", "status": "modified", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/2c268b9a5f4502271b0eec1071f6eaf4d535cea8/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c268b9a5f4502271b0eec1071f6eaf4d535cea8/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=2c268b9a5f4502271b0eec1071f6eaf4d535cea8", "patch": "@@ -418,3 +418,74 @@ pub(crate) fn description_from_symbol(db: &RootDatabase, symbol: &FileSymbol) ->\n         }\n     }\n }\n+\n+#[cfg(test)]\n+mod tests {\n+    use expect::expect;\n+\n+    use crate::{mock_analysis::single_file, Query};\n+\n+    #[test]\n+    fn test_nav_for_symbol() {\n+        let (analysis, _) = single_file(\n+            r#\"\n+enum FooInner { }\n+fn foo() { enum FooInner { } }\n+\"#,\n+        );\n+\n+        let navs = analysis.symbol_search(Query::new(\"FooInner\".to_string())).unwrap();\n+        expect![[r#\"\n+            [\n+                NavigationTarget {\n+                    file_id: FileId(\n+                        1,\n+                    ),\n+                    full_range: 0..17,\n+                    focus_range: Some(\n+                        5..13,\n+                    ),\n+                    name: \"FooInner\",\n+                    kind: ENUM_DEF,\n+                    container_name: None,\n+                    description: Some(\n+                        \"enum FooInner\",\n+                    ),\n+                    docs: None,\n+                },\n+                NavigationTarget {\n+                    file_id: FileId(\n+                        1,\n+                    ),\n+                    full_range: 29..46,\n+                    focus_range: Some(\n+                        34..42,\n+                    ),\n+                    name: \"FooInner\",\n+                    kind: ENUM_DEF,\n+                    container_name: Some(\n+                        \"foo\",\n+                    ),\n+                    description: Some(\n+                        \"enum FooInner\",\n+                    ),\n+                    docs: None,\n+                },\n+            ]\n+        \"#]]\n+        .assert_debug_eq(&navs);\n+    }\n+\n+    #[test]\n+    fn test_world_symbols_are_case_sensitive() {\n+        let (analysis, _) = single_file(\n+            r#\"\n+fn foo() {}\n+struct Foo;\n+\"#,\n+        );\n+\n+        let navs = analysis.symbol_search(Query::new(\"foo\".to_string())).unwrap();\n+        assert_eq!(navs.len(), 2)\n+    }\n+}"}, {"sha": "dc9192d42cd30adfe8df82671edfcec92632d9a8", "filename": "crates/ra_ide/src/lib.rs", "status": "modified", "additions": 0, "deletions": 74, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/2c268b9a5f4502271b0eec1071f6eaf4d535cea8/crates%2Fra_ide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c268b9a5f4502271b0eec1071f6eaf4d535cea8/crates%2Fra_ide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Flib.rs?ref=2c268b9a5f4502271b0eec1071f6eaf4d535cea8", "patch": "@@ -526,77 +526,3 @@ fn analysis_is_send() {\n     fn is_send<T: Send>() {}\n     is_send::<Analysis>();\n }\n-\n-#[cfg(test)]\n-mod tests {\n-    use crate::{display::NavigationTarget, mock_analysis::single_file, Query};\n-    use ra_syntax::{\n-        SmolStr,\n-        SyntaxKind::{FN_DEF, STRUCT_DEF},\n-    };\n-\n-    #[test]\n-    fn test_world_symbols_with_no_container() {\n-        let code = r#\"\n-    enum FooInner { }\n-    \"#;\n-\n-        let mut symbols = get_symbols_matching(code, \"FooInner\");\n-\n-        let s = symbols.pop().unwrap();\n-\n-        assert_eq!(s.name, \"FooInner\");\n-        assert!(s.container_name.is_none());\n-    }\n-\n-    #[test]\n-    fn test_world_symbols_include_container_name() {\n-        let code = r#\"\n-fn foo() {\n-    enum FooInner { }\n-}\n-    \"#;\n-\n-        let mut symbols = get_symbols_matching(code, \"FooInner\");\n-\n-        let s = symbols.pop().unwrap();\n-\n-        assert_eq!(s.name, \"FooInner\");\n-        assert_eq!(s.container_name, Some(SmolStr::new(\"foo\")));\n-\n-        let code = r#\"\n-mod foo {\n-    struct FooInner;\n-}\n-    \"#;\n-\n-        let mut symbols = get_symbols_matching(code, \"FooInner\");\n-\n-        let s = symbols.pop().unwrap();\n-\n-        assert_eq!(s.name, \"FooInner\");\n-        assert_eq!(s.container_name, Some(SmolStr::new(\"foo\")));\n-    }\n-\n-    #[test]\n-    fn test_world_symbols_are_case_sensitive() {\n-        let code = r#\"\n-fn foo() {}\n-\n-struct Foo;\n-        \"#;\n-\n-        let symbols = get_symbols_matching(code, \"Foo\");\n-\n-        let fn_match = symbols.iter().find(|s| s.name == \"foo\").map(|s| s.kind);\n-        let struct_match = symbols.iter().find(|s| s.name == \"Foo\").map(|s| s.kind);\n-\n-        assert_eq!(fn_match, Some(FN_DEF));\n-        assert_eq!(struct_match, Some(STRUCT_DEF));\n-    }\n-\n-    fn get_symbols_matching(text: &str, query: &str) -> Vec<NavigationTarget> {\n-        let (analysis, _) = single_file(text);\n-        analysis.symbol_search(Query::new(query.into())).unwrap()\n-    }\n-}"}]}