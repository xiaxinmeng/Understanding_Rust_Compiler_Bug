{"sha": "97a57ec909e61ecabadfce11fb9b36b2fe3783df", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3YTU3ZWM5MDllNjFlY2FiYWRmY2UxMWZiOWIzNmIyZmUzNzgzZGY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-11-07T11:31:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-11-07T11:31:25Z"}, "message": "auto merge of #18714 : nikomatsakis/rust/issue-18621-deref-for-refs, r=aturon\n\nlibs: add Deref, DerefMut impls for references, fixing a bug in compiler in the process that was blocking this.\r\n\r\nr? @aturon", "tree": {"sha": "eb496871cde9494ec1a7900589b6ed1e36a22b7e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb496871cde9494ec1a7900589b6ed1e36a22b7e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97a57ec909e61ecabadfce11fb9b36b2fe3783df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97a57ec909e61ecabadfce11fb9b36b2fe3783df", "html_url": "https://github.com/rust-lang/rust/commit/97a57ec909e61ecabadfce11fb9b36b2fe3783df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97a57ec909e61ecabadfce11fb9b36b2fe3783df/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "932eec7d702cf2cf55554e2431c3cb0fecd19014", "url": "https://api.github.com/repos/rust-lang/rust/commits/932eec7d702cf2cf55554e2431c3cb0fecd19014", "html_url": "https://github.com/rust-lang/rust/commit/932eec7d702cf2cf55554e2431c3cb0fecd19014"}, {"sha": "f2aaed8338d80afccd2159d9c819d8d0f300cb55", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2aaed8338d80afccd2159d9c819d8d0f300cb55", "html_url": "https://github.com/rust-lang/rust/commit/f2aaed8338d80afccd2159d9c819d8d0f300cb55"}], "stats": {"total": 86, "additions": 78, "deletions": 8}, "files": [{"sha": "c4f53d744673ffe0eaeed138350244e3b58e8287", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97a57ec909e61ecabadfce11fb9b36b2fe3783df/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97a57ec909e61ecabadfce11fb9b36b2fe3783df/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=97a57ec909e61ecabadfce11fb9b36b2fe3783df", "patch": "@@ -166,7 +166,7 @@ impl<T: Send + Sync + Clone> Arc<T> {\n         // additional reference of either kind.\n         if self.inner().strong.load(atomic::SeqCst) != 1 ||\n            self.inner().weak.load(atomic::SeqCst) != 1 {\n-            *self = Arc::new(self.deref().clone())\n+            *self = Arc::new((**self).clone())\n         }\n         // This unsafety is ok because we're guaranteed that the pointer\n         // returned is the *only* pointer that will ever be returned to T. Our"}, {"sha": "52328a6929e20794a42b639a5ab7a4a99bbbf336", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/97a57ec909e61ecabadfce11fb9b36b2fe3783df/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97a57ec909e61ecabadfce11fb9b36b2fe3783df/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=97a57ec909e61ecabadfce11fb9b36b2fe3783df", "patch": "@@ -805,6 +805,16 @@ pub trait Deref<Sized? Result> {\n     fn deref<'a>(&'a self) -> &'a Result;\n }\n \n+#[cfg(not(stage0))]\n+impl<'a, Sized? T> Deref<T> for &'a T {\n+    fn deref(&self) -> &T { *self }\n+}\n+\n+#[cfg(not(stage0))]\n+impl<'a, Sized? T> Deref<T> for &'a mut T {\n+    fn deref(&self) -> &T { *self }\n+}\n+\n /**\n  *\n  * The `DerefMut` trait is used to specify the functionality of dereferencing\n@@ -845,6 +855,11 @@ pub trait DerefMut<Sized? Result>: Deref<Result> {\n     fn deref_mut<'a>(&'a mut self) -> &'a mut Result;\n }\n \n+#[cfg(not(stage0))]\n+impl<'a, Sized? T> DerefMut<T> for &'a mut T {\n+    fn deref_mut(&mut self) -> &mut T { *self }\n+}\n+\n /// A version of the call operator that takes an immutable receiver.\n #[lang=\"fn\"]\n pub trait Fn<Args,Result> {"}, {"sha": "ef616a4a07afebf73969d48fffa4393599febf66", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/97a57ec909e61ecabadfce11fb9b36b2fe3783df/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97a57ec909e61ecabadfce11fb9b36b2fe3783df/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=97a57ec909e61ecabadfce11fb9b36b2fe3783df", "patch": "@@ -1702,13 +1702,18 @@ impl<'a, 'tcx> LookupContext<'a, 'tcx> {\n                             PreferMutLvalue);\n                     }\n                     ast::ExprUnary(ast::UnDeref, ref base_expr) => {\n-                        check::try_overloaded_deref(\n-                            self.fcx,\n-                            expr.span,\n-                            Some(MethodCall::expr(expr.id)),\n-                            Some(&**base_expr),\n-                            self.fcx.expr_ty(&**base_expr),\n-                            PreferMutLvalue);\n+                        // if this is an overloaded deref, then re-evaluate with\n+                        // a preference for mut\n+                        let method_call = MethodCall::expr(expr.id);\n+                        if self.fcx.inh.method_map.borrow().contains_key(&method_call) {\n+                            check::try_overloaded_deref(\n+                                self.fcx,\n+                                expr.span,\n+                                Some(method_call),\n+                                Some(&**base_expr),\n+                                self.fcx.expr_ty(&**base_expr),\n+                                PreferMutLvalue);\n+                        }\n                     }\n                     _ => {}\n                 }"}, {"sha": "fd964cdf02c5363fe8c15b12b7694dd6cfd78539", "filename": "src/libstd/collections/hash/table.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/97a57ec909e61ecabadfce11fb9b36b2fe3783df/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97a57ec909e61ecabadfce11fb9b36b2fe3783df/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs?ref=97a57ec909e61ecabadfce11fb9b36b2fe3783df", "patch": "@@ -166,18 +166,22 @@ impl<K, V> RawBucket<K, V> {\n }\n \n // For parameterizing over mutability.\n+\n+#[cfg(stage0)]\n impl<'t, K, V> Deref<RawTable<K, V>> for &'t RawTable<K, V> {\n     fn deref(&self) -> &RawTable<K, V> {\n         &**self\n     }\n }\n \n+#[cfg(stage0)]\n impl<'t, K, V> Deref<RawTable<K, V>> for &'t mut RawTable<K, V> {\n     fn deref(&self) -> &RawTable<K,V> {\n         &**self\n     }\n }\n \n+#[cfg(stage0)]\n impl<'t, K, V> DerefMut<RawTable<K, V>> for &'t mut RawTable<K, V> {\n     fn deref_mut(&mut self) -> &mut RawTable<K,V> {\n         &mut **self"}, {"sha": "dcf7c483b2cdc3b3bfc15de3ca4a790a50c85efa", "filename": "src/test/run-pass/deref-mut-on-ref.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/97a57ec909e61ecabadfce11fb9b36b2fe3783df/src%2Ftest%2Frun-pass%2Fderef-mut-on-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97a57ec909e61ecabadfce11fb9b36b2fe3783df/src%2Ftest%2Frun-pass%2Fderef-mut-on-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderef-mut-on-ref.rs?ref=97a57ec909e61ecabadfce11fb9b36b2fe3783df", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that `&mut T` implements `DerefMut<T>`\n+\n+fn inc<T:DerefMut<int>>(mut t: T) {\n+    *t += 1;\n+}\n+\n+fn main() {\n+    let mut x: int = 5;\n+    inc(&mut x);\n+    assert_eq!(x, 6);\n+}"}, {"sha": "27e7d8f3ba2a42079dd419d8bb947b19a3675968", "filename": "src/test/run-pass/deref-on-ref.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/97a57ec909e61ecabadfce11fb9b36b2fe3783df/src%2Ftest%2Frun-pass%2Fderef-on-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97a57ec909e61ecabadfce11fb9b36b2fe3783df/src%2Ftest%2Frun-pass%2Fderef-on-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderef-on-ref.rs?ref=97a57ec909e61ecabadfce11fb9b36b2fe3783df", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that `&T` and `&mut T` implement `Deref<T>`\n+\n+fn deref<U:Copy,T:Deref<U>>(t: T) -> U {\n+    *t\n+}\n+\n+fn main() {\n+    let x: int = 3;\n+    let y = deref(&x);\n+    assert_eq!(y, 3);\n+\n+    let mut x: int = 4;\n+    let y = deref(&mut x);\n+    assert_eq!(y, 4);\n+}"}]}