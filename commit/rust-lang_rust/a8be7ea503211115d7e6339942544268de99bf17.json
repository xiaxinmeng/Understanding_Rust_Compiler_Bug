{"sha": "a8be7ea503211115d7e6339942544268de99bf17", "node_id": "C_kwDOAAsO6NoAKGE4YmU3ZWE1MDMyMTExMTVkN2U2MzM5OTQyNTQ0MjY4ZGU5OWJmMTc", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-11-18T18:27:32Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-11-18T18:27:32Z"}, "message": "Implement new simd_shuffle signature", "tree": {"sha": "1a199945be4e72d4587a988af6cf33129c7de33f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a199945be4e72d4587a988af6cf33129c7de33f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8be7ea503211115d7e6339942544268de99bf17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8be7ea503211115d7e6339942544268de99bf17", "html_url": "https://github.com/rust-lang/rust/commit/a8be7ea503211115d7e6339942544268de99bf17", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8be7ea503211115d7e6339942544268de99bf17/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da83c84103e5f091ad1bee4823a6cc85bdf320a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/da83c84103e5f091ad1bee4823a6cc85bdf320a0", "html_url": "https://github.com/rust-lang/rust/commit/da83c84103e5f091ad1bee4823a6cc85bdf320a0"}], "stats": {"total": 29, "additions": 28, "deletions": 1}, "files": [{"sha": "73f5d367686e28393115aa8ae507b5d58b2d6f30", "filename": "src/intrinsics/simd.rs", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/a8be7ea503211115d7e6339942544268de99bf17/src%2Fintrinsics%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8be7ea503211115d7e6339942544268de99bf17/src%2Fintrinsics%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fsimd.rs?ref=a8be7ea503211115d7e6339942544268de99bf17", "patch": "@@ -67,7 +67,34 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n         _ if intrinsic.as_str().starts_with(\"simd_shuffle\"), (c x, c y, o idx) {\n             validate_simd_type!(fx, intrinsic, span, x.layout().ty);\n \n-            let n: u16 = intrinsic.as_str()[\"simd_shuffle\".len()..].parse().unwrap();\n+            // If this intrinsic is the older \"simd_shuffleN\" form, simply parse the integer.\n+            // If there is no suffix, use the index array length.\n+            let n: u16 = if intrinsic == sym::simd_shuffle {\n+                // Make sure this is actually an array, since typeck only checks the length-suffixed\n+                // version of this intrinsic.\n+                let idx_ty = fx.monomorphize(idx.ty(fx.mir, fx.tcx));\n+                match idx_ty.kind() {\n+                    ty::Array(ty, len) if matches!(ty.kind(), ty::Uint(ty::UintTy::U32)) => {\n+                        len.try_eval_usize(fx.tcx, ty::ParamEnv::reveal_all()).unwrap_or_else(|| {\n+                            span_bug!(span, \"could not evaluate shuffle index array length\")\n+                        }).try_into().unwrap()\n+                    }\n+                    _ => {\n+                        fx.tcx.sess.span_err(\n+                            span,\n+                            &format!(\n+                                \"simd_shuffle index must be an array of `u32`, got `{}`\",\n+                                idx_ty,\n+                            ),\n+                        );\n+                        // Prevent verifier error\n+                        crate::trap::trap_unreachable(fx, \"compilation should not have succeeded\");\n+                        return;\n+                    }\n+                }\n+            } else {\n+                intrinsic.as_str()[\"simd_shuffle\".len()..].parse().unwrap()\n+            };\n \n             assert_eq!(x.layout(), y.layout());\n             let layout = x.layout();"}]}