{"sha": "306259c64595807db0632f0a293bd06bf034f97b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwNjI1OWM2NDU5NTgwN2RiMDYzMmYwYTI5M2JkMDZiZjAzNGY5N2I=", "commit": {"author": {"name": "Nikita Popov", "email": "nikita.ppv@gmail.com", "date": "2021-08-20T19:13:18Z"}, "committer": {"name": "Nikita Popov", "email": "nikita.ppv@gmail.com", "date": "2021-08-21T08:08:05Z"}, "message": "Always use llvm.used for coverage symbols\n\nThis follows what clang does in CoverageMappingGen. Using just\nllvm.compiler.used is insufficient at least for MSVC targets.", "tree": {"sha": "757c73de7a527061579740270feca3793c9e1a20", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/757c73de7a527061579740270feca3793c9e1a20"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/306259c64595807db0632f0a293bd06bf034f97b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/306259c64595807db0632f0a293bd06bf034f97b", "html_url": "https://github.com/rust-lang/rust/commit/306259c64595807db0632f0a293bd06bf034f97b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/306259c64595807db0632f0a293bd06bf034f97b/comments", "author": {"login": "nikic", "id": 216080, "node_id": "MDQ6VXNlcjIxNjA4MA==", "avatar_url": "https://avatars.githubusercontent.com/u/216080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikic", "html_url": "https://github.com/nikic", "followers_url": "https://api.github.com/users/nikic/followers", "following_url": "https://api.github.com/users/nikic/following{/other_user}", "gists_url": "https://api.github.com/users/nikic/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikic/subscriptions", "organizations_url": "https://api.github.com/users/nikic/orgs", "repos_url": "https://api.github.com/users/nikic/repos", "events_url": "https://api.github.com/users/nikic/events{/privacy}", "received_events_url": "https://api.github.com/users/nikic/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikic", "id": 216080, "node_id": "MDQ6VXNlcjIxNjA4MA==", "avatar_url": "https://avatars.githubusercontent.com/u/216080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikic", "html_url": "https://github.com/nikic", "followers_url": "https://api.github.com/users/nikic/followers", "following_url": "https://api.github.com/users/nikic/following{/other_user}", "gists_url": "https://api.github.com/users/nikic/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikic/subscriptions", "organizations_url": "https://api.github.com/users/nikic/orgs", "repos_url": "https://api.github.com/users/nikic/repos", "events_url": "https://api.github.com/users/nikic/events{/privacy}", "received_events_url": "https://api.github.com/users/nikic/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3ae726f30401acb1aacf5600f5a2a2883a0c9d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3ae726f30401acb1aacf5600f5a2a2883a0c9d4", "html_url": "https://github.com/rust-lang/rust/commit/f3ae726f30401acb1aacf5600f5a2a2883a0c9d4"}], "stats": {"total": 94, "additions": 59, "deletions": 35}, "files": [{"sha": "a6bdbd11899deab8bb81cba65f3b8a7889d13bea", "filename": "compiler/rustc_codegen_llvm/src/base.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/306259c64595807db0632f0a293bd06bf034f97b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/306259c64595807db0632f0a293bd06bf034f97b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbase.rs?ref=306259c64595807db0632f0a293bd06bf034f97b", "patch": "@@ -162,11 +162,13 @@ pub fn compile_codegen_unit(\n                 cx.coverageinfo_finalize();\n             }\n \n-            // Create the llvm.compiler.used variable\n-            // This variable has type [N x i8*] and is stored in the llvm.metadata section\n+            // Create the llvm.used and llvm.compiler.used variables.\n             if !cx.used_statics().borrow().is_empty() {\n                 cx.create_used_variable()\n             }\n+            if !cx.compiler_used_statics().borrow().is_empty() {\n+                cx.create_compiler_used_variable()\n+            }\n \n             // Finalize debuginfo\n             if cx.sess().opts.debuginfo != DebugInfo::None {"}, {"sha": "e1baf95e1d9e5c0325f9addcc3abf471b579aeaf", "filename": "compiler/rustc_codegen_llvm/src/consts.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/306259c64595807db0632f0a293bd06bf034f97b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/306259c64595807db0632f0a293bd06bf034f97b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs?ref=306259c64595807db0632f0a293bd06bf034f97b", "patch": "@@ -474,14 +474,27 @@ impl StaticMethods for CodegenCx<'ll, 'tcx> {\n             }\n \n             if attrs.flags.contains(CodegenFnAttrFlags::USED) {\n-                self.add_used_global(g);\n+                // The semantics of #[used] in Rust only require the symbol to make it into the\n+                // object file. It is explicitly allowed for the linker to strip the symbol if it\n+                // is dead. As such, use llvm.compiler.used instead of llvm.used.\n+                // Additionally, https://reviews.llvm.org/D97448 in LLVM 13 started emitting unique\n+                // sections with SHF_GNU_RETAIN flag for llvm.used symbols, which may trigger bugs\n+                // in some versions of the gold linker.\n+                self.add_compiler_used_global(g);\n             }\n         }\n     }\n \n-    /// Add a global value to a list to be stored in the `llvm.compiler.used` variable, an array of i8*.\n+    /// Add a global value to a list to be stored in the `llvm.used` variable, an array of i8*.\n     fn add_used_global(&self, global: &'ll Value) {\n         let cast = unsafe { llvm::LLVMConstPointerCast(global, self.type_i8p()) };\n         self.used_statics.borrow_mut().push(cast);\n     }\n+\n+    /// Add a global value to a list to be stored in the `llvm.compiler.used` variable,\n+    /// an array of i8*.\n+    fn add_compiler_used_global(&self, global: &'ll Value) {\n+        let cast = unsafe { llvm::LLVMConstPointerCast(global, self.type_i8p()) };\n+        self.compiler_used_statics.borrow_mut().push(cast);\n+    }\n }"}, {"sha": "35c866d48a41b489ca4a2ce200ecbce082041914", "filename": "compiler/rustc_codegen_llvm/src/context.rs", "status": "modified", "additions": 29, "deletions": 17, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/306259c64595807db0632f0a293bd06bf034f97b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/306259c64595807db0632f0a293bd06bf034f97b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs?ref=306259c64595807db0632f0a293bd06bf034f97b", "patch": "@@ -71,9 +71,13 @@ pub struct CodegenCx<'ll, 'tcx> {\n     /// to constants.)\n     pub statics_to_rauw: RefCell<Vec<(&'ll Value, &'ll Value)>>,\n \n+    /// Statics that will be placed in the llvm.used variable\n+    /// See <https://llvm.org/docs/LangRef.html#the-llvm-used-global-variable> for details\n+    pub used_statics: RefCell<Vec<&'ll Value>>,\n+\n     /// Statics that will be placed in the llvm.compiler.used variable\n     /// See <https://llvm.org/docs/LangRef.html#the-llvm-compiler-used-global-variable> for details\n-    pub used_statics: RefCell<Vec<&'ll Value>>,\n+    pub compiler_used_statics: RefCell<Vec<&'ll Value>>,\n \n     /// Mapping of non-scalar types to llvm types and field remapping if needed.\n     pub type_lowering: RefCell<FxHashMap<(Ty<'tcx>, Option<VariantIdx>), TypeLowering<'ll>>>,\n@@ -325,6 +329,7 @@ impl<'ll, 'tcx> CodegenCx<'ll, 'tcx> {\n             const_globals: Default::default(),\n             statics_to_rauw: RefCell::new(Vec::new()),\n             used_statics: RefCell::new(Vec::new()),\n+            compiler_used_statics: RefCell::new(Vec::new()),\n             type_lowering: Default::default(),\n             scalar_lltypes: Default::default(),\n             pointee_infos: Default::default(),\n@@ -347,6 +352,18 @@ impl<'ll, 'tcx> CodegenCx<'ll, 'tcx> {\n     pub fn coverage_context(&'a self) -> Option<&'a coverageinfo::CrateCoverageContext<'ll, 'tcx>> {\n         self.coverage_cx.as_ref()\n     }\n+\n+    fn create_used_variable_impl(&self, name: &'static CStr, values: &[&'ll Value]) {\n+        let section = cstr!(\"llvm.metadata\");\n+        let array = self.const_array(&self.type_ptr_to(self.type_i8()), values);\n+\n+        unsafe {\n+            let g = llvm::LLVMAddGlobal(self.llmod, self.val_ty(array), name.as_ptr());\n+            llvm::LLVMSetInitializer(g, array);\n+            llvm::LLVMRustSetLinkage(g, llvm::Linkage::AppendingLinkage);\n+            llvm::LLVMSetSection(g, section.as_ptr());\n+        }\n+    }\n }\n \n impl MiscMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n@@ -437,6 +454,10 @@ impl MiscMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n         &self.used_statics\n     }\n \n+    fn compiler_used_statics(&self) -> &RefCell<Vec<&'ll Value>> {\n+        &self.compiler_used_statics\n+    }\n+\n     fn set_frame_pointer_type(&self, llfn: &'ll Value) {\n         attributes::set_frame_pointer_type(self, llfn)\n     }\n@@ -447,23 +468,14 @@ impl MiscMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n     }\n \n     fn create_used_variable(&self) {\n-        // The semantics of #[used] in Rust only require the symbol to make it into the object\n-        // file. It is explicitly allowed for the linker to strip the symbol if it is dead.\n-        // As such, use llvm.compiler.used instead of llvm.used.\n-        // Additionally, https://reviews.llvm.org/D97448 in LLVM 13 started emitting unique\n-        // sections with SHF_GNU_RETAIN flag for llvm.used symbols, which may trigger bugs in\n-        // some versions of the gold linker.\n-        let name = cstr!(\"llvm.compiler.used\");\n-        let section = cstr!(\"llvm.metadata\");\n-        let array =\n-            self.const_array(&self.type_ptr_to(self.type_i8()), &*self.used_statics.borrow());\n+        self.create_used_variable_impl(cstr!(\"llvm.used\"), &*self.used_statics.borrow());\n+    }\n \n-        unsafe {\n-            let g = llvm::LLVMAddGlobal(self.llmod, self.val_ty(array), name.as_ptr());\n-            llvm::LLVMSetInitializer(g, array);\n-            llvm::LLVMRustSetLinkage(g, llvm::Linkage::AppendingLinkage);\n-            llvm::LLVMSetSection(g, section.as_ptr());\n-        }\n+    fn create_compiler_used_variable(&self) {\n+        self.create_used_variable_impl(\n+            cstr!(\"llvm.compiler.used\"),\n+            &*self.compiler_used_statics.borrow(),\n+        );\n     }\n \n     fn declare_c_main(&self, fn_type: Self::Type) -> Option<Self::Function> {"}, {"sha": "4266e42ec2b50359dfe1574bf9e06e5473bf2a92", "filename": "compiler/rustc_codegen_ssa/src/traits/misc.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/306259c64595807db0632f0a293bd06bf034f97b/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/306259c64595807db0632f0a293bd06bf034f97b/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fmisc.rs?ref=306259c64595807db0632f0a293bd06bf034f97b", "patch": "@@ -16,9 +16,11 @@ pub trait MiscMethods<'tcx>: BackendTypes {\n     fn sess(&self) -> &Session;\n     fn codegen_unit(&self) -> &'tcx CodegenUnit<'tcx>;\n     fn used_statics(&self) -> &RefCell<Vec<Self::Value>>;\n+    fn compiler_used_statics(&self) -> &RefCell<Vec<Self::Value>>;\n     fn set_frame_pointer_type(&self, llfn: Self::Function);\n     fn apply_target_cpu_attr(&self, llfn: Self::Function);\n     fn create_used_variable(&self);\n+    fn create_compiler_used_variable(&self);\n     /// Declares the extern \"C\" main function for the entry point. Returns None if the symbol already exists.\n     fn declare_c_main(&self, fn_type: Self::Type) -> Option<Self::Function>;\n }"}, {"sha": "a2a3cb56c78062f34196314999482f66e5f1a4b4", "filename": "compiler/rustc_codegen_ssa/src/traits/statics.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/306259c64595807db0632f0a293bd06bf034f97b/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fstatics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/306259c64595807db0632f0a293bd06bf034f97b/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fstatics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fstatics.rs?ref=306259c64595807db0632f0a293bd06bf034f97b", "patch": "@@ -6,17 +6,15 @@ pub trait StaticMethods: BackendTypes {\n     fn static_addr_of(&self, cv: Self::Value, align: Align, kind: Option<&str>) -> Self::Value;\n     fn codegen_static(&self, def_id: DefId, is_mutable: bool);\n \n-    /// Mark the given global value as \"used\", to prevent a backend from potentially removing a\n-    /// static variable that may otherwise appear unused.\n-    ///\n-    /// Static variables in Rust can be annotated with the `#[used]` attribute to direct the `rustc`\n-    /// compiler to mark the variable as a \"used global\".\n-    ///\n-    /// ```no_run\n-    /// #[used]\n-    /// static FOO: u32 = 0;\n-    /// ```\n+    /// Mark the given global value as \"used\", to prevent the compiler and linker from potentially\n+    /// removing a static variable that may otherwise appear unused.\n     fn add_used_global(&self, global: Self::Value);\n+\n+    /// Same as add_used_global(), but only prevent the compiler from potentially removing an\n+    /// otherwise unused symbol. The linker is still permitted to drop it.\n+    ///\n+    /// This corresponds to the semantics of the `#[used]` attribute.\n+    fn add_compiler_used_global(&self, global: Self::Value);\n }\n \n pub trait StaticBuilderMethods: BackendTypes {"}, {"sha": "8e5f210468773cd91c97eea4ea6f14c302380e8f", "filename": "src/test/run-make-fulldeps/coverage-llvmir/filecheck.testprog.txt", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/306259c64595807db0632f0a293bd06bf034f97b/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-llvmir%2Ffilecheck.testprog.txt", "raw_url": "https://github.com/rust-lang/rust/raw/306259c64595807db0632f0a293bd06bf034f97b/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-llvmir%2Ffilecheck.testprog.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-llvmir%2Ffilecheck.testprog.txt?ref=306259c64595807db0632f0a293bd06bf034f97b", "patch": "@@ -28,11 +28,8 @@ CHECK-SAME:   section \"[[INSTR_PROF_DATA]]\"{{.*}}, align 8\n CHECK:        @__llvm_prf_nm = private constant\n CHECK-SAME:   section \"[[INSTR_PROF_NAME]]\", align 1\n \n-CHECK:        @llvm.compiler.used = appending global\n-CHECK-SAME:   i8* bitcast ({ {{.*}} }* @__llvm_coverage_mapping to i8*)\n-WINDOWS-SAME: i8* bitcast (i32 ()* @__llvm_profile_runtime_user to i8*)\n-CHECK-SAME:   section \"llvm.metadata\"\n CHECK:        @llvm.used = appending global\n+CHECK-SAME:   i8* bitcast ({ {{.*}} }* @__llvm_coverage_mapping to i8*)\n CHECK-SAME:   i8* getelementptr inbounds ({{.*}}* @__llvm_prf_nm, i32 0, i32 0)\n CHECK-SAME:   section \"llvm.metadata\"\n "}]}