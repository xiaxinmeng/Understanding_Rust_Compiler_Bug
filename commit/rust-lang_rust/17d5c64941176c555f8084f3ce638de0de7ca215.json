{"sha": "17d5c64941176c555f8084f3ce638de0de7ca215", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3ZDVjNjQ5NDExNzZjNTU1ZjgwODRmM2NlNjM4ZGUwZGU3Y2EyMTU=", "commit": {"author": {"name": "Angus Lees", "email": "gus@inodes.org", "date": "2014-08-01T05:37:04Z"}, "committer": {"name": "Angus Lees", "email": "gus@inodes.org", "date": "2014-08-01T05:39:00Z"}, "message": "Change strptime::match_strs to use borrowed rather than owned strings\n\nAlso modernise a few constructs in match_strs().", "tree": {"sha": "241a339baf6dc9bdeda3cf3dc046f14d99339c7b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/241a339baf6dc9bdeda3cf3dc046f14d99339c7b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/17d5c64941176c555f8084f3ce638de0de7ca215", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/17d5c64941176c555f8084f3ce638de0de7ca215", "html_url": "https://github.com/rust-lang/rust/commit/17d5c64941176c555f8084f3ce638de0de7ca215", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/17d5c64941176c555f8084f3ce638de0de7ca215/comments", "author": {"login": "anguslees", "id": 224224, "node_id": "MDQ6VXNlcjIyNDIyNA==", "avatar_url": "https://avatars.githubusercontent.com/u/224224?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anguslees", "html_url": "https://github.com/anguslees", "followers_url": "https://api.github.com/users/anguslees/followers", "following_url": "https://api.github.com/users/anguslees/following{/other_user}", "gists_url": "https://api.github.com/users/anguslees/gists{/gist_id}", "starred_url": "https://api.github.com/users/anguslees/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anguslees/subscriptions", "organizations_url": "https://api.github.com/users/anguslees/orgs", "repos_url": "https://api.github.com/users/anguslees/repos", "events_url": "https://api.github.com/users/anguslees/events{/privacy}", "received_events_url": "https://api.github.com/users/anguslees/received_events", "type": "User", "site_admin": false}, "committer": {"login": "anguslees", "id": 224224, "node_id": "MDQ6VXNlcjIyNDIyNA==", "avatar_url": "https://avatars.githubusercontent.com/u/224224?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anguslees", "html_url": "https://github.com/anguslees", "followers_url": "https://api.github.com/users/anguslees/followers", "following_url": "https://api.github.com/users/anguslees/following{/other_user}", "gists_url": "https://api.github.com/users/anguslees/gists{/gist_id}", "starred_url": "https://api.github.com/users/anguslees/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anguslees/subscriptions", "organizations_url": "https://api.github.com/users/anguslees/orgs", "repos_url": "https://api.github.com/users/anguslees/repos", "events_url": "https://api.github.com/users/anguslees/events{/privacy}", "received_events_url": "https://api.github.com/users/anguslees/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b495933a7fdc5e7b28ddbb058d1e2dab330ace7b", "url": "https://api.github.com/repos/rust-lang/rust/commits/b495933a7fdc5e7b28ddbb058d1e2dab330ace7b", "html_url": "https://github.com/rust-lang/rust/commit/b495933a7fdc5e7b28ddbb058d1e2dab330ace7b"}], "stats": {"total": 104, "additions": 45, "deletions": 59}, "files": [{"sha": "16e8f764a894319499b59a88bbf5f9c196b41688", "filename": "src/libtime/lib.rs", "status": "modified", "additions": 45, "deletions": 59, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/17d5c64941176c555f8084f3ce638de0de7ca215/src%2Flibtime%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17d5c64941176c555f8084f3ce638de0de7ca215/src%2Flibtime%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtime%2Flib.rs?ref=17d5c64941176c555f8084f3ce638de0de7ca215", "patch": "@@ -387,29 +387,15 @@ impl Tm {\n /// Parses the time from the string according to the format string.\n pub fn strptime(s: &str, format: &str) -> Result<Tm, String> {\n     fn match_str(s: &str, pos: uint, needle: &str) -> bool {\n-        let mut i = pos;\n-        for ch in needle.bytes() {\n-            if s.as_bytes()[i] != ch {\n-                return false;\n-            }\n-            i += 1u;\n-        }\n-        return true;\n+        return s.slice_from(pos).starts_with(needle);\n     }\n \n-    fn match_strs(ss: &str, pos: uint, strs: &[(String, i32)])\n+    fn match_strs(ss: &str, pos: uint, strs: &[(&str, i32)])\n       -> Option<(i32, uint)> {\n-        let mut i = 0u;\n-        let len = strs.len();\n-        while i < len {\n-            match strs[i] { // can't use let due to let-pattern bugs\n-                (ref needle, value) => {\n-                    if match_str(ss, pos, needle.as_slice()) {\n-                        return Some((value, pos + needle.len()));\n-                    }\n-                }\n+        for &(needle, value) in strs.iter() {\n+            if match_str(ss, pos, needle) {\n+                return Some((value, pos + needle.len()));\n             }\n-            i += 1u;\n         }\n \n         None\n@@ -493,59 +479,59 @@ pub fn strptime(s: &str, format: &str) -> Result<Tm, String> {\n       -> Result<uint, String> {\n         match ch {\n           'A' => match match_strs(s, pos, [\n-              (\"Sunday\".to_string(), 0_i32),\n-              (\"Monday\".to_string(), 1_i32),\n-              (\"Tuesday\".to_string(), 2_i32),\n-              (\"Wednesday\".to_string(), 3_i32),\n-              (\"Thursday\".to_string(), 4_i32),\n-              (\"Friday\".to_string(), 5_i32),\n-              (\"Saturday\".to_string(), 6_i32)\n+              (\"Sunday\", 0_i32),\n+              (\"Monday\", 1_i32),\n+              (\"Tuesday\", 2_i32),\n+              (\"Wednesday\", 3_i32),\n+              (\"Thursday\", 4_i32),\n+              (\"Friday\", 5_i32),\n+              (\"Saturday\", 6_i32)\n           ]) {\n             Some(item) => { let (v, pos) = item; tm.tm_wday = v; Ok(pos) }\n             None => Err(\"Invalid day\".to_string())\n           },\n           'a' => match match_strs(s, pos, [\n-              (\"Sun\".to_string(), 0_i32),\n-              (\"Mon\".to_string(), 1_i32),\n-              (\"Tue\".to_string(), 2_i32),\n-              (\"Wed\".to_string(), 3_i32),\n-              (\"Thu\".to_string(), 4_i32),\n-              (\"Fri\".to_string(), 5_i32),\n-              (\"Sat\".to_string(), 6_i32)\n+              (\"Sun\", 0_i32),\n+              (\"Mon\", 1_i32),\n+              (\"Tue\", 2_i32),\n+              (\"Wed\", 3_i32),\n+              (\"Thu\", 4_i32),\n+              (\"Fri\", 5_i32),\n+              (\"Sat\", 6_i32)\n           ]) {\n             Some(item) => { let (v, pos) = item; tm.tm_wday = v; Ok(pos) }\n             None => Err(\"Invalid day\".to_string())\n           },\n           'B' => match match_strs(s, pos, [\n-              (\"January\".to_string(), 0_i32),\n-              (\"February\".to_string(), 1_i32),\n-              (\"March\".to_string(), 2_i32),\n-              (\"April\".to_string(), 3_i32),\n-              (\"May\".to_string(), 4_i32),\n-              (\"June\".to_string(), 5_i32),\n-              (\"July\".to_string(), 6_i32),\n-              (\"August\".to_string(), 7_i32),\n-              (\"September\".to_string(), 8_i32),\n-              (\"October\".to_string(), 9_i32),\n-              (\"November\".to_string(), 10_i32),\n-              (\"December\".to_string(), 11_i32)\n+              (\"January\", 0_i32),\n+              (\"February\", 1_i32),\n+              (\"March\", 2_i32),\n+              (\"April\", 3_i32),\n+              (\"May\", 4_i32),\n+              (\"June\", 5_i32),\n+              (\"July\", 6_i32),\n+              (\"August\", 7_i32),\n+              (\"September\", 8_i32),\n+              (\"October\", 9_i32),\n+              (\"November\", 10_i32),\n+              (\"December\", 11_i32)\n           ]) {\n             Some(item) => { let (v, pos) = item; tm.tm_mon = v; Ok(pos) }\n             None => Err(\"Invalid month\".to_string())\n           },\n           'b' | 'h' => match match_strs(s, pos, [\n-              (\"Jan\".to_string(), 0_i32),\n-              (\"Feb\".to_string(), 1_i32),\n-              (\"Mar\".to_string(), 2_i32),\n-              (\"Apr\".to_string(), 3_i32),\n-              (\"May\".to_string(), 4_i32),\n-              (\"Jun\".to_string(), 5_i32),\n-              (\"Jul\".to_string(), 6_i32),\n-              (\"Aug\".to_string(), 7_i32),\n-              (\"Sep\".to_string(), 8_i32),\n-              (\"Oct\".to_string(), 9_i32),\n-              (\"Nov\".to_string(), 10_i32),\n-              (\"Dec\".to_string(), 11_i32)\n+              (\"Jan\", 0_i32),\n+              (\"Feb\", 1_i32),\n+              (\"Mar\", 2_i32),\n+              (\"Apr\", 3_i32),\n+              (\"May\", 4_i32),\n+              (\"Jun\", 5_i32),\n+              (\"Jul\", 6_i32),\n+              (\"Aug\", 7_i32),\n+              (\"Sep\", 8_i32),\n+              (\"Oct\", 9_i32),\n+              (\"Nov\", 10_i32),\n+              (\"Dec\", 11_i32)\n           ]) {\n             Some(item) => { let (v, pos) = item; tm.tm_mon = v; Ok(pos) }\n             None => Err(\"Invalid month\".to_string())\n@@ -659,13 +645,13 @@ pub fn strptime(s: &str, format: &str) -> Result<Tm, String> {\n           }\n           'n' => parse_char(s, pos, '\\n'),\n           'P' => match match_strs(s, pos,\n-                                  [(\"am\".to_string(), 0_i32), (\"pm\".to_string(), 12_i32)]) {\n+                                  [(\"am\", 0_i32), (\"pm\", 12_i32)]) {\n \n             Some(item) => { let (v, pos) = item; tm.tm_hour += v; Ok(pos) }\n             None => Err(\"Invalid hour\".to_string())\n           },\n           'p' => match match_strs(s, pos,\n-                                  [(\"AM\".to_string(), 0_i32), (\"PM\".to_string(), 12_i32)]) {\n+                                  [(\"AM\", 0_i32), (\"PM\", 12_i32)]) {\n \n             Some(item) => { let (v, pos) = item; tm.tm_hour += v; Ok(pos) }\n             None => Err(\"Invalid hour\".to_string())"}]}