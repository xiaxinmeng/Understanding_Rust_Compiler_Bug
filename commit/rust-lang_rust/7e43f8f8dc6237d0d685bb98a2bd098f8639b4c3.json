{"sha": "7e43f8f8dc6237d0d685bb98a2bd098f8639b4c3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlNDNmOGY4ZGM2MjM3ZDBkNjg1YmI5OGEyYmQwOThmODYzOWI0YzM=", "commit": {"author": {"name": "Daniel Patterson", "email": "dbp@riseup.net", "date": "2012-08-01T22:04:33Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-08-03T18:28:19Z"}, "message": "std::net::url - change alt to match, ret to return, as per recent syntax changes", "tree": {"sha": "ed48ae55ce99146e42eab8a668327bfcdf127f8e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed48ae55ce99146e42eab8a668327bfcdf127f8e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e43f8f8dc6237d0d685bb98a2bd098f8639b4c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e43f8f8dc6237d0d685bb98a2bd098f8639b4c3", "html_url": "https://github.com/rust-lang/rust/commit/7e43f8f8dc6237d0d685bb98a2bd098f8639b4c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e43f8f8dc6237d0d685bb98a2bd098f8639b4c3/comments", "author": null, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64eb497d344d7baab0c23753faca24a41590dab8", "url": "https://api.github.com/repos/rust-lang/rust/commits/64eb497d344d7baab0c23753faca24a41590dab8", "html_url": "https://github.com/rust-lang/rust/commit/64eb497d344d7baab0c23753faca24a41590dab8"}], "stats": {"total": 50, "additions": 25, "deletions": 25}, "files": [{"sha": "227b10a2e8114b3addc7fde81b6a212b60b450a9", "filename": "src/libstd/net_url.rs", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/7e43f8f8dc6237d0d685bb98a2bd098f8639b4c3/src%2Flibstd%2Fnet_url.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e43f8f8dc6237d0d685bb98a2bd098f8639b4c3/src%2Flibstd%2Fnet_url.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_url.rs?ref=7e43f8f8dc6237d0d685bb98a2bd098f8639b4c3", "patch": "@@ -47,7 +47,7 @@ fn encode_inner(s: ~str, full_url: bool) -> ~str {\n \n         while !rdr.eof() {\n             let ch = rdr.read_byte() as char;\n-            alt ch {\n+            match ch {\n               // unreserved:\n               'A' to 'Z' |\n               'a' to 'z' |\n@@ -57,7 +57,7 @@ fn encode_inner(s: ~str, full_url: bool) -> ~str {\n               }\n               _ {\n                 if full_url {\n-                    alt ch {\n+                    match ch {\n                       // gen-delims:\n                       ':' | '/' | '?' | '#' | '[' | ']' | '@' |\n \n@@ -105,14 +105,14 @@ fn decode_inner(s: ~str, full_url: bool) -> ~str {\n         let mut out = ~\"\";\n \n         while !rdr.eof() {\n-            alt rdr.read_char() {\n+            match rdr.read_char() {\n               '%' {\n                 let bytes = rdr.read_bytes(2u);\n                 let ch = uint::parse_buf(bytes, 16u).get() as char;\n \n                 if full_url {\n                     // Only decode some characters:\n-                    alt ch {\n+                    match ch {\n                       // gen-delims:\n                       ':' | '/' | '?' | '#' | '[' | ']' | '@' |\n \n@@ -160,7 +160,7 @@ fn encode_plus(s: ~str) -> ~str {\n \n         while !rdr.eof() {\n             let ch = rdr.read_byte() as char;\n-            alt ch {\n+            match ch {\n               'A' to 'Z' | 'a' to 'z' | '0' to '9' | '_' | '.' | '-' {\n                 str::push_char(out, ch);\n               }\n@@ -211,10 +211,10 @@ fn decode_form_urlencoded(s: ~[u8]) ->\n         let mut parsing_key = true;\n \n         while !rdr.eof() {\n-            alt rdr.read_char() {\n+            match rdr.read_char() {\n               '&' | ';' {\n                 if key != ~\"\" && value != ~\"\" {\n-                    let values = alt m.find(key) {\n+                    let values = match m.find(key) {\n                       some(values) { values }\n                       none {\n                         let values = @dvec();\n@@ -231,7 +231,7 @@ fn decode_form_urlencoded(s: ~[u8]) ->\n               }\n               '=' { parsing_key = false; }\n               ch {\n-                let ch = alt ch {\n+                let ch = match ch {\n                   '%' {\n                     uint::parse_buf(rdr.read_bytes(2u), 16u).get() as char\n                   }\n@@ -249,7 +249,7 @@ fn decode_form_urlencoded(s: ~[u8]) ->\n         }\n \n         if key != ~\"\" && value != ~\"\" {\n-            let values = alt m.find(key) {\n+            let values = match m.find(key) {\n               some(values) { values }\n               none {\n                 let values = @dvec();\n@@ -268,24 +268,24 @@ fn decode_form_urlencoded(s: ~[u8]) ->\n fn split_char_first(s: ~str, c: char) -> (~str, ~str) {\n     let len = str::len(s);\n     let mut index = len;\n-    let mut match_ = 0;\n+    let mut mat = 0;\n     do io::with_str_reader(s) |rdr| {\n         let mut ch : char;\n         while !rdr.eof() {\n             ch = rdr.read_byte() as char;\n             if ch == c {\n                 // found a match, adjust markers\n                 index = rdr.tell()-1;\n-                match_ = 1;\n+                mat = 1;\n                 break;\n             }\n         }\n     }\n-    if index+match_ == len {\n+    if index+mat == len {\n         return (str::slice(s, 0, index), ~\"\");\n     } else {\n         return (str::slice(s, 0, index),\n-             str::slice(s, index + match_, str::len(s)));\n+             str::slice(s, index + mat, str::len(s)));\n     }\n }\n \n@@ -332,7 +332,7 @@ fn query_to_str(query: query) -> ~str {\n // returns the scheme and the rest of the url, or a parsing error\n fn get_scheme(rawurl: ~str) -> result::result<(~str, ~str), @~str> {\n     for str::each_chari(rawurl) |i,c| {\n-        alt c {\n+        match c {\n           'A' to 'Z' | 'a' to 'z' { again; }\n           '0' to '9' | '+' | '-' | '.' {\n             if i == 0 {\n@@ -392,7 +392,7 @@ fn get_authority(rawurl: ~str) ->\n         if i < 2 { again; } // ignore the leading //\n \n         // deal with input class first\n-        alt c {\n+        match c {\n           '0' to '9' { }\n           'A' to 'F' | 'a' to 'f' {\n             if in == digit {\n@@ -412,10 +412,10 @@ fn get_authority(rawurl: ~str) ->\n         }\n \n         // now process states\n-        alt c {\n+        match c {\n           ':' {\n             colon_count += 1;\n-            alt st {\n+            match st {\n               start {\n                 pos = i;\n                 st = pass_host_port;\n@@ -458,7 +458,7 @@ fn get_authority(rawurl: ~str) ->\n           '@' {\n             in = digit; // reset input class\n             colon_count = 0; // reset count\n-            alt st {\n+            match st {\n               start {\n                 let user = str::slice(rawurl, begin, i);\n                 userinfo = option::some({user : user,\n@@ -489,7 +489,7 @@ fn get_authority(rawurl: ~str) ->\n     }\n \n     // finish up\n-    alt st {\n+    match st {\n       start {\n         if end+1 == len {\n             host = str::slice(rawurl, begin, end+1);\n@@ -527,7 +527,7 @@ fn get_path(rawurl: ~str, authority : bool) ->\n     let len = str::len(rawurl);\n     let mut end = len;\n     for str::each_chari(rawurl) |i,c| {\n-        alt c {\n+        match c {\n           'A' to 'Z' | 'a' to 'z' | '0' to '9' | '&' |'\\'' | '(' | ')' | '.'\n           | '@' | ':' | '%' | '/' | '+' | '!' | '*' | ',' | ';' | '=' {\n             again;\n@@ -657,11 +657,11 @@ fn to_str(url: url) -> ~str {\n     };\n \n     return str::concat(~[copy url.scheme,\n-                         ~\":\",\n-                         authority,\n-                         copy url.path,\n-                         query,\n-                         fragment]);\n+                      ~\":\",\n+                      authority,\n+                      copy url.path,\n+                      query,\n+                      fragment]);\n }\n \n impl of to_str::to_str for url {"}]}