{"sha": "84e202e6b36250dfc319aa5a869ad1df29b4b55a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0ZTIwMmU2YjM2MjUwZGZjMzE5YWE1YTg2OWFkMWRmMjliNGI1NWE=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-08-13T18:35:49Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-08-13T18:35:49Z"}, "message": "review comments", "tree": {"sha": "1542e8c008bf374f6ca5e5f7711360123f8f214e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1542e8c008bf374f6ca5e5f7711360123f8f214e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/84e202e6b36250dfc319aa5a869ad1df29b4b55a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/84e202e6b36250dfc319aa5a869ad1df29b4b55a", "html_url": "https://github.com/rust-lang/rust/commit/84e202e6b36250dfc319aa5a869ad1df29b4b55a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/84e202e6b36250dfc319aa5a869ad1df29b4b55a/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "105b3a0b02baa0dd974731648ae9438ba420811b", "url": "https://api.github.com/repos/rust-lang/rust/commits/105b3a0b02baa0dd974731648ae9438ba420811b", "html_url": "https://github.com/rust-lang/rust/commit/105b3a0b02baa0dd974731648ae9438ba420811b"}], "stats": {"total": 21, "additions": 9, "deletions": 12}, "files": [{"sha": "74cab00d3c1ebd67b225ca81038b0798e6a87cc3", "filename": "src/libsyntax/source_map.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/84e202e6b36250dfc319aa5a869ad1df29b4b55a/src%2Flibsyntax%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84e202e6b36250dfc319aa5a869ad1df29b4b55a/src%2Flibsyntax%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fsource_map.rs?ref=84e202e6b36250dfc319aa5a869ad1df29b4b55a", "patch": "@@ -519,7 +519,7 @@ impl SourceMap {\n     /// extract function takes three arguments: a string slice containing the source, an index in\n     /// the slice for the beginning of the span and an index in the slice for the end of the span.\n     fn span_to_source<F>(&self, sp: Span, extract_source: F) -> Result<String, SpanSnippetError>\n-        where F: Fn(&str, usize, usize) -> String\n+        where F: Fn(&str, usize, usize) -> Result<String, SpanSnippetError>\n     {\n         if sp.lo() > sp.hi() {\n             return Err(SpanSnippetError::IllFormedSpan(sp));\n@@ -554,15 +554,9 @@ impl SourceMap {\n             }\n \n             if let Some(ref src) = local_begin.sf.src {\n-                if !src.is_char_boundary(start_index) || !src.is_char_boundary(end_index) {\n-                    return Err(SpanSnippetError::IllFormedSpan(sp));\n-                }\n-                return Ok(extract_source(src, start_index, end_index));\n+                return extract_source(src, start_index, end_index);\n             } else if let Some(src) = local_begin.sf.external_src.borrow().get_source() {\n-                if !src.is_char_boundary(start_index) || !src.is_char_boundary(end_index) {\n-                    return Err(SpanSnippetError::IllFormedSpan(sp));\n-                }\n-                return Ok(extract_source(src, start_index, end_index));\n+                return extract_source(src, start_index, end_index);\n             } else {\n                 return Err(SpanSnippetError::SourceNotAvailable {\n                     filename: local_begin.sf.name.clone()\n@@ -573,8 +567,9 @@ impl SourceMap {\n \n     /// Returns the source snippet as `String` corresponding to the given `Span`\n     pub fn span_to_snippet(&self, sp: Span) -> Result<String, SpanSnippetError> {\n-        self.span_to_source(sp, |src, start_index, end_index| src[start_index..end_index]\n-                                                                .to_string())\n+        self.span_to_source(sp, |src, start_index, end_index| src.get(start_index..end_index)\n+            .map(|s| s.to_string())\n+            .ok_or_else(|| SpanSnippetError::IllFormedSpan(sp)))\n     }\n \n     pub fn span_to_margin(&self, sp: Span) -> Option<usize> {\n@@ -588,7 +583,9 @@ impl SourceMap {\n \n     /// Returns the source snippet as `String` before the given `Span`\n     pub fn span_to_prev_source(&self, sp: Span) -> Result<String, SpanSnippetError> {\n-        self.span_to_source(sp, |src, start_index, _| src[..start_index].to_string())\n+        self.span_to_source(sp, |src, start_index, _| src.get(..start_index)\n+            .map(|s| s.to_string())\n+            .ok_or_else(|| SpanSnippetError::IllFormedSpan(sp)))\n     }\n \n     /// Extend the given `Span` to just after the previous occurrence of `c`. Return the same span"}]}