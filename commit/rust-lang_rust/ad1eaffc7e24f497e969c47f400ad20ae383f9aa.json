{"sha": "ad1eaffc7e24f497e969c47f400ad20ae383f9aa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkMWVhZmZjN2UyNGY0OTdlOTY5YzQ3ZjQwMGFkMjBhZTM4M2Y5YWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-19T03:45:50Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-19T03:45:50Z"}, "message": "Auto merge of #88143 - GuillaumeGomez:rollup-sgh318f, r=GuillaumeGomez\n\nRollup of 10 pull requests\n\nSuccessful merges:\n\n - #87818 (Fix anchors display in rustdoc)\n - #87983 (Use more accurate spans when proposing adding lifetime to item)\n - #88012 (Change WASI's `RawFd` from `u32` to `c_int` (`i32`).)\n - #88031 (Make `BuildHasher` object safe)\n - #88036 (Fix dead code warning when inline const is used in pattern)\n - #88082 (Take into account jobs number for rustdoc GUI tests)\n - #88109 (Fix environment variable getter docs)\n - #88111 (Add background-color on clickable definitions in source code)\n - #88129 (Fix dataflow graphviz bug, make dataflow graphviz modules public)\n - #88136 (Move private_unused.rs test to impl-trait)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "73902e1b4a0079845cf5a0cd0a45e14eb7de1578", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73902e1b4a0079845cf5a0cd0a45e14eb7de1578"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad1eaffc7e24f497e969c47f400ad20ae383f9aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad1eaffc7e24f497e969c47f400ad20ae383f9aa", "html_url": "https://github.com/rust-lang/rust/commit/ad1eaffc7e24f497e969c47f400ad20ae383f9aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad1eaffc7e24f497e969c47f400ad20ae383f9aa/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d300391ede6de79469670957b508072d132a2a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d300391ede6de79469670957b508072d132a2a0", "html_url": "https://github.com/rust-lang/rust/commit/6d300391ede6de79469670957b508072d132a2a0"}, {"sha": "9bbb57c6ab4d0693b42e6a050ba9ddf8b857a804", "url": "https://api.github.com/repos/rust-lang/rust/commits/9bbb57c6ab4d0693b42e6a050ba9ddf8b857a804", "html_url": "https://github.com/rust-lang/rust/commit/9bbb57c6ab4d0693b42e6a050ba9ddf8b857a804"}], "stats": {"total": 411, "additions": 303, "deletions": 108}, "files": [{"sha": "35115ca9db75600faa25620bd43d87cf270d9370", "filename": "compiler/rustc_mir/src/dataflow/framework/fmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad1eaffc7e24f497e969c47f400ad20ae383f9aa/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fframework%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad1eaffc7e24f497e969c47f400ad20ae383f9aa/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fframework%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fframework%2Ffmt.rs?ref=ad1eaffc7e24f497e969c47f400ad20ae383f9aa", "patch": "@@ -33,7 +33,7 @@ pub trait DebugWithContext<C>: Eq + fmt::Debug {\n         }\n \n         write!(f, \"\\u{001f}-\")?;\n-        self.fmt_with(ctxt, f)\n+        old.fmt_with(ctxt, f)\n     }\n }\n "}, {"sha": "a5badc07d1017518a42456588a323fba799f1793", "filename": "compiler/rustc_mir/src/dataflow/framework/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad1eaffc7e24f497e969c47f400ad20ae383f9aa/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fframework%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad1eaffc7e24f497e969c47f400ad20ae383f9aa/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fframework%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fframework%2Fmod.rs?ref=ad1eaffc7e24f497e969c47f400ad20ae383f9aa", "patch": "@@ -42,7 +42,7 @@ mod cursor;\n mod direction;\n mod engine;\n pub mod fmt;\n-mod graphviz;\n+pub mod graphviz;\n pub mod lattice;\n mod visitor;\n "}, {"sha": "4ca757cf269e4470e45fdb884dd5d7ccdf129e09", "filename": "compiler/rustc_mir/src/dataflow/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad1eaffc7e24f497e969c47f400ad20ae383f9aa/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad1eaffc7e24f497e969c47f400ad20ae383f9aa/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fmod.rs?ref=ad1eaffc7e24f497e969c47f400ad20ae383f9aa", "patch": "@@ -5,7 +5,7 @@ use rustc_span::symbol::{sym, Symbol};\n \n pub(crate) use self::drop_flag_effects::*;\n pub use self::framework::{\n-    fmt, lattice, visit_results, Analysis, AnalysisDomain, Backward, BorrowckFlowState,\n+    fmt, graphviz, lattice, visit_results, Analysis, AnalysisDomain, Backward, BorrowckFlowState,\n     BorrowckResults, Engine, Forward, GenKill, GenKillAnalysis, JoinSemiLattice, Results,\n     ResultsCursor, ResultsRefCursor, ResultsVisitor, SwitchIntEdgeEffects,\n };"}, {"sha": "3e466b5060febad46d9057bbf047054bad41eb37", "filename": "compiler/rustc_mir/src/util/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad1eaffc7e24f497e969c47f400ad20ae383f9aa/compiler%2Frustc_mir%2Fsrc%2Futil%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad1eaffc7e24f497e969c47f400ad20ae383f9aa/compiler%2Frustc_mir%2Fsrc%2Futil%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Futil%2Fmod.rs?ref=ad1eaffc7e24f497e969c47f400ad20ae383f9aa", "patch": "@@ -18,4 +18,4 @@ pub use self::alignment::is_disaligned;\n pub use self::find_self_call::find_self_call;\n pub use self::generic_graph::graphviz_safe_def_name;\n pub use self::graphviz::write_mir_graphviz;\n-pub use self::pretty::{dump_enabled, dump_mir, write_mir_pretty, PassWhere};\n+pub use self::pretty::{dump_enabled, dump_mir, write_mir_fn, write_mir_pretty, PassWhere};"}, {"sha": "ae65222f3f22fc450d959293fa9a4152799382dc", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ad1eaffc7e24f497e969c47f400ad20ae383f9aa/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad1eaffc7e24f497e969c47f400ad20ae383f9aa/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=ad1eaffc7e24f497e969c47f400ad20ae383f9aa", "patch": "@@ -15,6 +15,7 @@ use rustc_middle::middle::privacy;\n use rustc_middle::ty::{self, DefIdTree, TyCtxt};\n use rustc_session::lint;\n use rustc_span::symbol::{sym, Symbol};\n+use std::mem;\n \n // Any local node that may call something in its body block should be\n // explored. For example, if it's a live Node::Item that is a\n@@ -395,8 +396,14 @@ impl<'tcx> Visitor<'tcx> for MarkSymbolVisitor<'tcx> {\n     }\n \n     fn visit_anon_const(&mut self, c: &'tcx hir::AnonConst) {\n+        // When inline const blocks are used in pattern position, paths\n+        // referenced by it should be considered as used.\n+        let in_pat = mem::replace(&mut self.in_pat, false);\n+\n         self.live_symbols.insert(self.tcx.hir().local_def_id(c.hir_id));\n         intravisit::walk_anon_const(self, c);\n+\n+        self.in_pat = in_pat;\n     }\n }\n "}, {"sha": "a602a58e517125ed32ef43c1e61387f35e812fa0", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 76, "deletions": 10, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/ad1eaffc7e24f497e969c47f400ad20ae383f9aa/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad1eaffc7e24f497e969c47f400ad20ae383f9aa/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=ad1eaffc7e24f497e969c47f400ad20ae383f9aa", "patch": "@@ -2073,20 +2073,85 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n                         continue;\n                     }\n                 });\n+\n+                struct Lifetime(Span, String);\n+                impl Lifetime {\n+                    fn is_unnamed(&self) -> bool {\n+                        self.1.starts_with('&') && !self.1.starts_with(\"&'\")\n+                    }\n+                    fn is_underscore(&self) -> bool {\n+                        self.1.starts_with(\"&'_ \")\n+                    }\n+                    fn is_named(&self) -> bool {\n+                        self.1.starts_with(\"&'\")\n+                    }\n+                    fn suggestion(&self, sugg: String) -> Option<(Span, String)> {\n+                        Some(\n+                            match (\n+                                self.is_unnamed(),\n+                                self.is_underscore(),\n+                                self.is_named(),\n+                                sugg.starts_with(\"&\"),\n+                            ) {\n+                                (true, _, _, false) => (self.span_unnamed_borrow(), sugg),\n+                                (true, _, _, true) => {\n+                                    (self.span_unnamed_borrow(), sugg[1..].to_string())\n+                                }\n+                                (_, true, _, false) => {\n+                                    (self.span_underscore_borrow(), sugg.trim().to_string())\n+                                }\n+                                (_, true, _, true) => {\n+                                    (self.span_underscore_borrow(), sugg[1..].trim().to_string())\n+                                }\n+                                (_, _, true, false) => {\n+                                    (self.span_named_borrow(), sugg.trim().to_string())\n+                                }\n+                                (_, _, true, true) => {\n+                                    (self.span_named_borrow(), sugg[1..].trim().to_string())\n+                                }\n+                                _ => return None,\n+                            },\n+                        )\n+                    }\n+                    fn span_unnamed_borrow(&self) -> Span {\n+                        let lo = self.0.lo() + BytePos(1);\n+                        self.0.with_lo(lo).with_hi(lo)\n+                    }\n+                    fn span_named_borrow(&self) -> Span {\n+                        let lo = self.0.lo() + BytePos(1);\n+                        self.0.with_lo(lo)\n+                    }\n+                    fn span_underscore_borrow(&self) -> Span {\n+                        let lo = self.0.lo() + BytePos(1);\n+                        let hi = lo + BytePos(2);\n+                        self.0.with_lo(lo).with_hi(hi)\n+                    }\n+                }\n+\n                 for param in params {\n                     if let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(param.span) {\n-                        if snippet.starts_with('&') && !snippet.starts_with(\"&'\") {\n-                            introduce_suggestion\n-                                .push((param.span, format!(\"&'a {}\", &snippet[1..])));\n-                        } else if let Some(stripped) = snippet.strip_prefix(\"&'_ \") {\n-                            introduce_suggestion.push((param.span, format!(\"&'a {}\", &stripped)));\n+                        if let Some((span, sugg)) =\n+                            Lifetime(param.span, snippet).suggestion(\"'a \".to_string())\n+                        {\n+                            introduce_suggestion.push((span, sugg));\n                         }\n                     }\n                 }\n-                for ((span, _), sugg) in spans_with_counts.iter().copied().zip(suggs.iter()) {\n-                    if let Some(sugg) = sugg {\n-                        introduce_suggestion.push((span, sugg.to_string()));\n-                    }\n+                for (span, sugg) in spans_with_counts.iter().copied().zip(suggs.iter()).filter_map(\n+                    |((span, _), sugg)| match &sugg {\n+                        Some(sugg) => Some((span, sugg.to_string())),\n+                        _ => None,\n+                    },\n+                ) {\n+                    let (span, sugg) = self\n+                        .tcx\n+                        .sess\n+                        .source_map()\n+                        .span_to_snippet(span)\n+                        .ok()\n+                        .and_then(|snippet| Lifetime(span, snippet).suggestion(sugg.clone()))\n+                        .unwrap_or((span, sugg));\n+                    introduce_suggestion.push((span, sugg.to_string()));\n                 }\n                 err.multipart_suggestion_with_style(\n                     &msg,\n@@ -2159,7 +2224,8 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n                 for ((span, _), snippet) in spans_with_counts.iter().copied().zip(snippets.iter()) {\n                     match snippet.as_deref() {\n                         Some(\"\") => spans_suggs.push((span, \"'lifetime, \".to_string())),\n-                        Some(\"&\") => spans_suggs.push((span, \"&'lifetime \".to_string())),\n+                        Some(\"&\") => spans_suggs\n+                            .push((span.with_lo(span.lo() + BytePos(1)), \"'lifetime \".to_string())),\n                         _ => {}\n                     }\n                 }"}, {"sha": "77161e961e79812b2b931c457b9efb1546d23f3f", "filename": "library/core/src/hash/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ad1eaffc7e24f497e969c47f400ad20ae383f9aa/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad1eaffc7e24f497e969c47f400ad20ae383f9aa/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs?ref=ad1eaffc7e24f497e969c47f400ad20ae383f9aa", "patch": "@@ -520,7 +520,10 @@ pub trait BuildHasher {\n     /// );\n     /// ```\n     #[unstable(feature = \"build_hasher_simple_hash_one\", issue = \"86161\")]\n-    fn hash_one<T: Hash>(&self, x: T) -> u64 {\n+    fn hash_one<T: Hash>(&self, x: T) -> u64\n+    where\n+        Self: Sized,\n+    {\n         let mut hasher = self.build_hasher();\n         x.hash(&mut hasher);\n         hasher.finish()"}, {"sha": "72ccdd4848a47ec4979c12744f3173b3ca286b84", "filename": "library/core/tests/hash/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ad1eaffc7e24f497e969c47f400ad20ae383f9aa/library%2Fcore%2Ftests%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad1eaffc7e24f497e969c47f400ad20ae383f9aa/library%2Fcore%2Ftests%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fhash%2Fmod.rs?ref=ad1eaffc7e24f497e969c47f400ad20ae383f9aa", "patch": "@@ -1,7 +1,7 @@\n mod sip;\n \n use std::default::Default;\n-use std::hash::{Hash, Hasher};\n+use std::hash::{BuildHasher, Hash, Hasher};\n use std::rc::Rc;\n \n struct MyHasher {\n@@ -139,3 +139,10 @@ fn test_indirect_hasher() {\n     }\n     assert_eq!(hasher.hash, 5);\n }\n+\n+#[test]\n+fn test_build_hasher_object_safe() {\n+    use std::collections::hash_map::{DefaultHasher, RandomState};\n+\n+    let _: &dyn BuildHasher<Hasher = DefaultHasher> = &RandomState::new();\n+}"}, {"sha": "a7465200955595eb463a178823e147a325fc4a1f", "filename": "library/std/src/env.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ad1eaffc7e24f497e969c47f400ad20ae383f9aa/library%2Fstd%2Fsrc%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad1eaffc7e24f497e969c47f400ad20ae383f9aa/library%2Fstd%2Fsrc%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fenv.rs?ref=ad1eaffc7e24f497e969c47f400ad20ae383f9aa", "patch": "@@ -185,9 +185,13 @@ impl fmt::Debug for VarsOs {\n ///\n /// # Errors\n ///\n-/// Returns `[None]` if the environment variable isn't set.\n-/// Returns `[None]` if the environment variable is not valid Unicode. If this is not\n-/// desired, consider using [`var_os`].\n+/// This function will return an error if the environment variable isn't set.\n+///\n+/// This function may return an error if the environment variable's name contains\n+/// the equal sign character (`=`) or the NUL character.\n+///\n+/// This function will return an error if the environment variable's value is\n+/// not valid Unicode. If this is not desired, consider using [`var_os`].\n ///\n /// # Examples\n ///\n@@ -221,8 +225,13 @@ fn _var(key: &OsStr) -> Result<String, VarError> {\n ///\n /// # Errors\n ///\n-/// Returns `[None]` if the variable isn't set.\n-/// May return `[None]` if the variable value contains the NUL character.\n+/// This function returns an error if the environment variable isn't set.\n+///\n+/// This function may return an error if the environment variable's name contains\n+/// the equal sign character (`=`) or the NUL character.\n+///\n+/// This function may return an error if the environment variable's value contains\n+/// the NUL character.\n ///\n /// # Examples\n ///"}, {"sha": "b6bc74da8e7b5b5dc0f525747df6676eb41badb8", "filename": "library/std/src/os/wasi/io.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ad1eaffc7e24f497e969c47f400ad20ae383f9aa/library%2Fstd%2Fsrc%2Fos%2Fwasi%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad1eaffc7e24f497e969c47f400ad20ae383f9aa/library%2Fstd%2Fsrc%2Fos%2Fwasi%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwasi%2Fio.rs?ref=ad1eaffc7e24f497e969c47f400ad20ae383f9aa", "patch": "@@ -6,11 +6,18 @@\n use crate::fs;\n use crate::io;\n use crate::net;\n+use crate::os::raw;\n use crate::sys;\n use crate::sys_common::{AsInner, FromInner, IntoInner};\n \n /// Raw file descriptors.\n-pub type RawFd = u32;\n+///\n+/// This has type `c_int` to ease compatibility with code that also compiles on\n+/// Unix configurations, however unlike Unix and POSIX, in WASI negative file\n+/// descriptors are valid. Only `-1` is reserved for indicating errors. Code\n+/// intending to be portable across Unix platforms and WASI should avoid\n+/// assuming that negative file descriptors are invalid.\n+pub type RawFd = raw::c_int;\n \n /// A trait to extract the raw WASI file descriptor from an underlying\n /// object.\n@@ -161,41 +168,41 @@ impl IntoRawFd for fs::File {\n impl AsRawFd for io::Stdin {\n     #[inline]\n     fn as_raw_fd(&self) -> RawFd {\n-        libc::STDIN_FILENO as RawFd\n+        libc::STDIN_FILENO\n     }\n }\n \n impl AsRawFd for io::Stdout {\n     #[inline]\n     fn as_raw_fd(&self) -> RawFd {\n-        libc::STDOUT_FILENO as RawFd\n+        libc::STDOUT_FILENO\n     }\n }\n \n impl AsRawFd for io::Stderr {\n     #[inline]\n     fn as_raw_fd(&self) -> RawFd {\n-        libc::STDERR_FILENO as RawFd\n+        libc::STDERR_FILENO\n     }\n }\n \n impl<'a> AsRawFd for io::StdinLock<'a> {\n     #[inline]\n     fn as_raw_fd(&self) -> RawFd {\n-        libc::STDIN_FILENO as RawFd\n+        libc::STDIN_FILENO\n     }\n }\n \n impl<'a> AsRawFd for io::StdoutLock<'a> {\n     #[inline]\n     fn as_raw_fd(&self) -> RawFd {\n-        libc::STDOUT_FILENO as RawFd\n+        libc::STDOUT_FILENO\n     }\n }\n \n impl<'a> AsRawFd for io::StderrLock<'a> {\n     #[inline]\n     fn as_raw_fd(&self) -> RawFd {\n-        libc::STDERR_FILENO as RawFd\n+        libc::STDERR_FILENO\n     }\n }"}, {"sha": "1f6ea8d6e8df3d9ad2ed1c53cba034fd63ff25f6", "filename": "library/std/src/sys/wasi/fd.rs", "status": "modified", "additions": 54, "deletions": 35, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/ad1eaffc7e24f497e969c47f400ad20ae383f9aa/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad1eaffc7e24f497e969c47f400ad20ae383f9aa/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ffd.rs?ref=ad1eaffc7e24f497e969c47f400ad20ae383f9aa", "patch": "@@ -5,10 +5,11 @@ use super::err2io;\n use crate::io::{self, IoSlice, IoSliceMut, SeekFrom};\n use crate::mem;\n use crate::net::Shutdown;\n+use crate::os::raw::c_int;\n \n #[derive(Debug)]\n pub struct WasiFd {\n-    fd: wasi::Fd,\n+    fd: c_int,\n }\n \n fn iovec<'a>(a: &'a mut [IoSliceMut<'_>]) -> &'a [wasi::Iovec] {\n@@ -26,38 +27,38 @@ fn ciovec<'a>(a: &'a [IoSlice<'_>]) -> &'a [wasi::Ciovec] {\n }\n \n impl WasiFd {\n-    pub unsafe fn from_raw(fd: wasi::Fd) -> WasiFd {\n+    pub unsafe fn from_raw(fd: c_int) -> WasiFd {\n         WasiFd { fd }\n     }\n \n-    pub fn into_raw(self) -> wasi::Fd {\n+    pub fn into_raw(self) -> c_int {\n         let ret = self.fd;\n         mem::forget(self);\n         ret\n     }\n \n-    pub fn as_raw(&self) -> wasi::Fd {\n+    pub fn as_raw(&self) -> c_int {\n         self.fd\n     }\n \n     pub fn datasync(&self) -> io::Result<()> {\n-        unsafe { wasi::fd_datasync(self.fd).map_err(err2io) }\n+        unsafe { wasi::fd_datasync(self.fd as wasi::Fd).map_err(err2io) }\n     }\n \n     pub fn pread(&self, bufs: &mut [IoSliceMut<'_>], offset: u64) -> io::Result<usize> {\n-        unsafe { wasi::fd_pread(self.fd, iovec(bufs), offset).map_err(err2io) }\n+        unsafe { wasi::fd_pread(self.fd as wasi::Fd, iovec(bufs), offset).map_err(err2io) }\n     }\n \n     pub fn pwrite(&self, bufs: &[IoSlice<'_>], offset: u64) -> io::Result<usize> {\n-        unsafe { wasi::fd_pwrite(self.fd, ciovec(bufs), offset).map_err(err2io) }\n+        unsafe { wasi::fd_pwrite(self.fd as wasi::Fd, ciovec(bufs), offset).map_err(err2io) }\n     }\n \n     pub fn read(&self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n-        unsafe { wasi::fd_read(self.fd, iovec(bufs)).map_err(err2io) }\n+        unsafe { wasi::fd_read(self.fd as wasi::Fd, iovec(bufs)).map_err(err2io) }\n     }\n \n     pub fn write(&self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n-        unsafe { wasi::fd_write(self.fd, ciovec(bufs)).map_err(err2io) }\n+        unsafe { wasi::fd_write(self.fd as wasi::Fd, ciovec(bufs)).map_err(err2io) }\n     }\n \n     pub fn seek(&self, pos: SeekFrom) -> io::Result<u64> {\n@@ -66,37 +67,37 @@ impl WasiFd {\n             SeekFrom::End(pos) => (wasi::WHENCE_END, pos),\n             SeekFrom::Current(pos) => (wasi::WHENCE_CUR, pos),\n         };\n-        unsafe { wasi::fd_seek(self.fd, offset, whence).map_err(err2io) }\n+        unsafe { wasi::fd_seek(self.fd as wasi::Fd, offset, whence).map_err(err2io) }\n     }\n \n     pub fn tell(&self) -> io::Result<u64> {\n-        unsafe { wasi::fd_tell(self.fd).map_err(err2io) }\n+        unsafe { wasi::fd_tell(self.fd as wasi::Fd).map_err(err2io) }\n     }\n \n     // FIXME: __wasi_fd_fdstat_get\n \n     pub fn set_flags(&self, flags: wasi::Fdflags) -> io::Result<()> {\n-        unsafe { wasi::fd_fdstat_set_flags(self.fd, flags).map_err(err2io) }\n+        unsafe { wasi::fd_fdstat_set_flags(self.fd as wasi::Fd, flags).map_err(err2io) }\n     }\n \n     pub fn set_rights(&self, base: wasi::Rights, inheriting: wasi::Rights) -> io::Result<()> {\n-        unsafe { wasi::fd_fdstat_set_rights(self.fd, base, inheriting).map_err(err2io) }\n+        unsafe { wasi::fd_fdstat_set_rights(self.fd as wasi::Fd, base, inheriting).map_err(err2io) }\n     }\n \n     pub fn sync(&self) -> io::Result<()> {\n-        unsafe { wasi::fd_sync(self.fd).map_err(err2io) }\n+        unsafe { wasi::fd_sync(self.fd as wasi::Fd).map_err(err2io) }\n     }\n \n     pub fn advise(&self, offset: u64, len: u64, advice: wasi::Advice) -> io::Result<()> {\n-        unsafe { wasi::fd_advise(self.fd, offset, len, advice).map_err(err2io) }\n+        unsafe { wasi::fd_advise(self.fd as wasi::Fd, offset, len, advice).map_err(err2io) }\n     }\n \n     pub fn allocate(&self, offset: u64, len: u64) -> io::Result<()> {\n-        unsafe { wasi::fd_allocate(self.fd, offset, len).map_err(err2io) }\n+        unsafe { wasi::fd_allocate(self.fd as wasi::Fd, offset, len).map_err(err2io) }\n     }\n \n     pub fn create_directory(&self, path: &str) -> io::Result<()> {\n-        unsafe { wasi::path_create_directory(self.fd, path).map_err(err2io) }\n+        unsafe { wasi::path_create_directory(self.fd as wasi::Fd, path).map_err(err2io) }\n     }\n \n     pub fn link(\n@@ -107,7 +108,14 @@ impl WasiFd {\n         new_path: &str,\n     ) -> io::Result<()> {\n         unsafe {\n-            wasi::path_link(self.fd, old_flags, old_path, new_fd.fd, new_path).map_err(err2io)\n+            wasi::path_link(\n+                self.fd as wasi::Fd,\n+                old_flags,\n+                old_path,\n+                new_fd.fd as wasi::Fd,\n+                new_path,\n+            )\n+            .map_err(err2io)\n         }\n     }\n \n@@ -122,33 +130,42 @@ impl WasiFd {\n     ) -> io::Result<WasiFd> {\n         unsafe {\n             wasi::path_open(\n-                self.fd,\n+                self.fd as wasi::Fd,\n                 dirflags,\n                 path,\n                 oflags,\n                 fs_rights_base,\n                 fs_rights_inheriting,\n                 fs_flags,\n             )\n-            .map(|fd| WasiFd::from_raw(fd))\n+            .map(|fd| WasiFd::from_raw(fd as c_int))\n             .map_err(err2io)\n         }\n     }\n \n     pub fn readdir(&self, buf: &mut [u8], cookie: wasi::Dircookie) -> io::Result<usize> {\n-        unsafe { wasi::fd_readdir(self.fd, buf.as_mut_ptr(), buf.len(), cookie).map_err(err2io) }\n+        unsafe {\n+            wasi::fd_readdir(self.fd as wasi::Fd, buf.as_mut_ptr(), buf.len(), cookie)\n+                .map_err(err2io)\n+        }\n     }\n \n     pub fn readlink(&self, path: &str, buf: &mut [u8]) -> io::Result<usize> {\n-        unsafe { wasi::path_readlink(self.fd, path, buf.as_mut_ptr(), buf.len()).map_err(err2io) }\n+        unsafe {\n+            wasi::path_readlink(self.fd as wasi::Fd, path, buf.as_mut_ptr(), buf.len())\n+                .map_err(err2io)\n+        }\n     }\n \n     pub fn rename(&self, old_path: &str, new_fd: &WasiFd, new_path: &str) -> io::Result<()> {\n-        unsafe { wasi::path_rename(self.fd, old_path, new_fd.fd, new_path).map_err(err2io) }\n+        unsafe {\n+            wasi::path_rename(self.fd as wasi::Fd, old_path, new_fd.fd as wasi::Fd, new_path)\n+                .map_err(err2io)\n+        }\n     }\n \n     pub fn filestat_get(&self) -> io::Result<wasi::Filestat> {\n-        unsafe { wasi::fd_filestat_get(self.fd).map_err(err2io) }\n+        unsafe { wasi::fd_filestat_get(self.fd as wasi::Fd).map_err(err2io) }\n     }\n \n     pub fn filestat_set_times(\n@@ -157,19 +174,21 @@ impl WasiFd {\n         mtim: wasi::Timestamp,\n         fstflags: wasi::Fstflags,\n     ) -> io::Result<()> {\n-        unsafe { wasi::fd_filestat_set_times(self.fd, atim, mtim, fstflags).map_err(err2io) }\n+        unsafe {\n+            wasi::fd_filestat_set_times(self.fd as wasi::Fd, atim, mtim, fstflags).map_err(err2io)\n+        }\n     }\n \n     pub fn filestat_set_size(&self, size: u64) -> io::Result<()> {\n-        unsafe { wasi::fd_filestat_set_size(self.fd, size).map_err(err2io) }\n+        unsafe { wasi::fd_filestat_set_size(self.fd as wasi::Fd, size).map_err(err2io) }\n     }\n \n     pub fn path_filestat_get(\n         &self,\n         flags: wasi::Lookupflags,\n         path: &str,\n     ) -> io::Result<wasi::Filestat> {\n-        unsafe { wasi::path_filestat_get(self.fd, flags, path).map_err(err2io) }\n+        unsafe { wasi::path_filestat_get(self.fd as wasi::Fd, flags, path).map_err(err2io) }\n     }\n \n     pub fn path_filestat_set_times(\n@@ -181,33 +200,33 @@ impl WasiFd {\n         fstflags: wasi::Fstflags,\n     ) -> io::Result<()> {\n         unsafe {\n-            wasi::path_filestat_set_times(self.fd, flags, path, atim, mtim, fstflags)\n+            wasi::path_filestat_set_times(self.fd as wasi::Fd, flags, path, atim, mtim, fstflags)\n                 .map_err(err2io)\n         }\n     }\n \n     pub fn symlink(&self, old_path: &str, new_path: &str) -> io::Result<()> {\n-        unsafe { wasi::path_symlink(old_path, self.fd, new_path).map_err(err2io) }\n+        unsafe { wasi::path_symlink(old_path, self.fd as wasi::Fd, new_path).map_err(err2io) }\n     }\n \n     pub fn unlink_file(&self, path: &str) -> io::Result<()> {\n-        unsafe { wasi::path_unlink_file(self.fd, path).map_err(err2io) }\n+        unsafe { wasi::path_unlink_file(self.fd as wasi::Fd, path).map_err(err2io) }\n     }\n \n     pub fn remove_directory(&self, path: &str) -> io::Result<()> {\n-        unsafe { wasi::path_remove_directory(self.fd, path).map_err(err2io) }\n+        unsafe { wasi::path_remove_directory(self.fd as wasi::Fd, path).map_err(err2io) }\n     }\n \n     pub fn sock_recv(\n         &self,\n         ri_data: &mut [IoSliceMut<'_>],\n         ri_flags: wasi::Riflags,\n     ) -> io::Result<(usize, wasi::Roflags)> {\n-        unsafe { wasi::sock_recv(self.fd, iovec(ri_data), ri_flags).map_err(err2io) }\n+        unsafe { wasi::sock_recv(self.fd as wasi::Fd, iovec(ri_data), ri_flags).map_err(err2io) }\n     }\n \n     pub fn sock_send(&self, si_data: &[IoSlice<'_>], si_flags: wasi::Siflags) -> io::Result<usize> {\n-        unsafe { wasi::sock_send(self.fd, ciovec(si_data), si_flags).map_err(err2io) }\n+        unsafe { wasi::sock_send(self.fd as wasi::Fd, ciovec(si_data), si_flags).map_err(err2io) }\n     }\n \n     pub fn sock_shutdown(&self, how: Shutdown) -> io::Result<()> {\n@@ -216,14 +235,14 @@ impl WasiFd {\n             Shutdown::Write => wasi::SDFLAGS_WR,\n             Shutdown::Both => wasi::SDFLAGS_WR | wasi::SDFLAGS_RD,\n         };\n-        unsafe { wasi::sock_shutdown(self.fd, how).map_err(err2io) }\n+        unsafe { wasi::sock_shutdown(self.fd as wasi::Fd, how).map_err(err2io) }\n     }\n }\n \n impl Drop for WasiFd {\n     fn drop(&mut self) {\n         // FIXME: can we handle the return code here even though we can't on\n         // unix?\n-        let _ = unsafe { wasi::fd_close(self.fd) };\n+        let _ = unsafe { wasi::fd_close(self.fd as wasi::Fd) };\n     }\n }"}, {"sha": "55c9c652a8bbb7cf62652ddc82915338298c34af", "filename": "library/std/src/sys/wasi/fs.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ad1eaffc7e24f497e969c47f400ad20ae383f9aa/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad1eaffc7e24f497e969c47f400ad20ae383f9aa/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ffs.rs?ref=ad1eaffc7e24f497e969c47f400ad20ae383f9aa", "patch": "@@ -6,6 +6,7 @@ use crate::fmt;\n use crate::io::{self, IoSlice, IoSliceMut, SeekFrom};\n use crate::iter;\n use crate::mem::{self, ManuallyDrop};\n+use crate::os::raw::c_int;\n use crate::os::wasi::ffi::{OsStrExt, OsStringExt};\n use crate::path::{Path, PathBuf};\n use crate::ptr;\n@@ -454,8 +455,8 @@ impl File {\n     }\n }\n \n-impl FromInner<u32> for File {\n-    fn from_inner(fd: u32) -> File {\n+impl FromInner<c_int> for File {\n+    fn from_inner(fd: c_int) -> File {\n         unsafe { File { fd: WasiFd::from_raw(fd) } }\n     }\n }\n@@ -653,7 +654,7 @@ fn open_parent(p: &Path) -> io::Result<(ManuallyDrop<WasiFd>, PathBuf)> {\n             let relative = CStr::from_ptr(relative_path).to_bytes().to_vec();\n \n             return Ok((\n-                ManuallyDrop::new(WasiFd::from_raw(fd as u32)),\n+                ManuallyDrop::new(WasiFd::from_raw(fd as c_int)),\n                 PathBuf::from(OsString::from_vec(relative)),\n             ));\n         }"}, {"sha": "50b7352933e57744d83fc04062895742fb9272f2", "filename": "library/std/src/sys/wasi/net.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ad1eaffc7e24f497e969c47f400ad20ae383f9aa/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad1eaffc7e24f497e969c47f400ad20ae383f9aa/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fnet.rs?ref=ad1eaffc7e24f497e969c47f400ad20ae383f9aa", "patch": "@@ -5,6 +5,7 @@ use crate::convert::TryFrom;\n use crate::fmt;\n use crate::io::{self, IoSlice, IoSliceMut};\n use crate::net::{Ipv4Addr, Ipv6Addr, Shutdown, SocketAddr};\n+use crate::os::raw::c_int;\n use crate::sys::unsupported;\n use crate::sys_common::FromInner;\n use crate::time::Duration;\n@@ -115,8 +116,8 @@ impl TcpStream {\n     }\n }\n \n-impl FromInner<u32> for TcpStream {\n-    fn from_inner(fd: u32) -> TcpStream {\n+impl FromInner<c_int> for TcpStream {\n+    fn from_inner(fd: c_int) -> TcpStream {\n         unsafe { TcpStream { fd: WasiFd::from_raw(fd) } }\n     }\n }\n@@ -181,8 +182,8 @@ impl TcpListener {\n     }\n }\n \n-impl FromInner<u32> for TcpListener {\n-    fn from_inner(fd: u32) -> TcpListener {\n+impl FromInner<c_int> for TcpListener {\n+    fn from_inner(fd: c_int) -> TcpListener {\n         unsafe { TcpListener { fd: WasiFd::from_raw(fd) } }\n     }\n }\n@@ -331,8 +332,8 @@ impl UdpSocket {\n     }\n }\n \n-impl FromInner<u32> for UdpSocket {\n-    fn from_inner(fd: u32) -> UdpSocket {\n+impl FromInner<c_int> for UdpSocket {\n+    fn from_inner(fd: c_int) -> UdpSocket {\n         unsafe { UdpSocket { fd: WasiFd::from_raw(fd) } }\n     }\n }"}, {"sha": "8782f333a1fa4597da17399f921d52fb1dd6925e", "filename": "library/std/src/sys/wasi/stdio.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ad1eaffc7e24f497e969c47f400ad20ae383f9aa/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad1eaffc7e24f497e969c47f400ad20ae383f9aa/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fstdio.rs?ref=ad1eaffc7e24f497e969c47f400ad20ae383f9aa", "patch": "@@ -3,6 +3,7 @@\n use super::fd::WasiFd;\n use crate::io::{self, IoSlice, IoSliceMut};\n use crate::mem::ManuallyDrop;\n+use crate::os::raw;\n \n pub struct Stdin;\n pub struct Stdout;\n@@ -14,7 +15,7 @@ impl Stdin {\n     }\n \n     #[inline]\n-    pub fn as_raw_fd(&self) -> u32 {\n+    pub fn as_raw_fd(&self) -> raw::c_int {\n         0\n     }\n }\n@@ -40,7 +41,7 @@ impl Stdout {\n     }\n \n     #[inline]\n-    pub fn as_raw_fd(&self) -> u32 {\n+    pub fn as_raw_fd(&self) -> raw::c_int {\n         1\n     }\n }\n@@ -69,7 +70,7 @@ impl Stderr {\n     }\n \n     #[inline]\n-    pub fn as_raw_fd(&self) -> u32 {\n+    pub fn as_raw_fd(&self) -> raw::c_int {\n         2\n     }\n }"}, {"sha": "d12e86b7c1deb1832e71510d1a5b6fd73059c666", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad1eaffc7e24f497e969c47f400ad20ae383f9aa/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad1eaffc7e24f497e969c47f400ad20ae383f9aa/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=ad1eaffc7e24f497e969c47f400ad20ae383f9aa", "patch": "@@ -933,6 +933,8 @@ impl Step for RustdocGUI {\n         let mut command = Command::new(&nodejs);\n         command\n             .arg(builder.build.src.join(\"src/tools/rustdoc-gui/tester.js\"))\n+            .arg(\"--jobs\")\n+            .arg(&builder.jobs().to_string())\n             .arg(\"--doc-folder\")\n             .arg(out_dir.join(\"doc\"))\n             .arg(\"--tests-folder\")"}, {"sha": "dab6d655c6a874c5aa3e35839db36df9581074ea", "filename": "src/librustdoc/html/static/css/themes/ayu.css", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ad1eaffc7e24f497e969c47f400ad20ae383f9aa/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "raw_url": "https://github.com/rust-lang/rust/raw/ad1eaffc7e24f497e969c47f400ad20ae383f9aa/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css?ref=ad1eaffc7e24f497e969c47f400ad20ae383f9aa", "patch": "@@ -216,6 +216,9 @@ nav.main .separator {\n a {\n \tcolor: #c5c5c5;\n }\n+body.source .example-wrap pre.rust a {\n+\tbackground: #c5c5c5;\n+}\n \n .docblock:not(.type-decl) a:not(.srclink):not(.test-arrow),\n .docblock-short a:not(.srclink):not(.test-arrow), .item-info a,"}, {"sha": "d9348be6994e2a1d676cf3b8a6ea9c6e8ea57af0", "filename": "src/librustdoc/html/static/css/themes/dark.css", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ad1eaffc7e24f497e969c47f400ad20ae383f9aa/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/ad1eaffc7e24f497e969c47f400ad20ae383f9aa/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css?ref=ad1eaffc7e24f497e969c47f400ad20ae383f9aa", "patch": "@@ -177,6 +177,9 @@ nav.main .separator {\n a {\n \tcolor: #ddd;\n }\n+body.source .example-wrap pre.rust a {\n+\tbackground: #333;\n+}\n \n .docblock:not(.type-decl) a:not(.srclink):not(.test-arrow),\n .docblock-short a:not(.srclink):not(.test-arrow), .item-info a,"}, {"sha": "0ffe5929ea59376e14b0da7948a7de273cac808d", "filename": "src/librustdoc/html/static/css/themes/light.css", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ad1eaffc7e24f497e969c47f400ad20ae383f9aa/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "raw_url": "https://github.com/rust-lang/rust/raw/ad1eaffc7e24f497e969c47f400ad20ae383f9aa/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css?ref=ad1eaffc7e24f497e969c47f400ad20ae383f9aa", "patch": "@@ -172,6 +172,9 @@ nav.main .separator {\n a {\n \tcolor: #000;\n }\n+body.source .example-wrap pre.rust a {\n+\tbackground: #eee;\n+}\n \n .docblock:not(.type-decl) a:not(.srclink):not(.test-arrow),\n .docblock-short a:not(.srclink):not(.test-arrow), .item-info a,"}, {"sha": "fbd77d96700911550dcd9264d3b32e9bd77e9895", "filename": "src/test/ui/error-codes/E0106.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad1eaffc7e24f497e969c47f400ad20ae383f9aa/src%2Ftest%2Fui%2Ferror-codes%2FE0106.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad1eaffc7e24f497e969c47f400ad20ae383f9aa/src%2Ftest%2Fui%2Ferror-codes%2FE0106.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0106.stderr?ref=ad1eaffc7e24f497e969c47f400ad20ae383f9aa", "patch": "@@ -59,7 +59,7 @@ LL | type MyStr = &str;\n help: consider introducing a named lifetime parameter\n    |\n LL | type MyStr<'a> = &'a str;\n-   |           ++++   ~~~\n+   |           ++++    ++\n \n error: aborting due to 5 previous errors\n "}, {"sha": "e82cbf7e8e5ef08efabb39dd5033699506608712", "filename": "src/test/ui/generic-associated-types/gat-trait-path-generic-type-arg.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad1eaffc7e24f497e969c47f400ad20ae383f9aa/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-generic-type-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad1eaffc7e24f497e969c47f400ad20ae383f9aa/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-generic-type-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-generic-type-arg.stderr?ref=ad1eaffc7e24f497e969c47f400ad20ae383f9aa", "patch": "@@ -15,7 +15,7 @@ LL |     type F<T1> = &[u8];\n help: consider introducing a named lifetime parameter\n    |\n LL |     type F<'a, T1> = &'a [u8];\n-   |            +++       ~~~\n+   |            +++        ++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "44955c58889aa95141d95d687ccd4360bd95ce4a", "filename": "src/test/ui/impl-header-lifetime-elision/assoc-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad1eaffc7e24f497e969c47f400ad20ae383f9aa/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fassoc-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad1eaffc7e24f497e969c47f400ad20ae383f9aa/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fassoc-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fassoc-type.stderr?ref=ad1eaffc7e24f497e969c47f400ad20ae383f9aa", "patch": "@@ -7,7 +7,7 @@ LL |     type Output = &i32;\n help: consider introducing a named lifetime parameter\n    |\n LL |     type Output<'a> = &'a i32;\n-   |                ++++   ~~~\n+   |                ++++    ++\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/assoc-type.rs:16:20"}, {"sha": "92268f1861d63535de87ea1563f9dfd4b41256e8", "filename": "src/test/ui/impl-trait/private_unused.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ad1eaffc7e24f497e969c47f400ad20ae383f9aa/src%2Ftest%2Fui%2Fimpl-trait%2Fprivate_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad1eaffc7e24f497e969c47f400ad20ae383f9aa/src%2Ftest%2Fui%2Fimpl-trait%2Fprivate_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fprivate_unused.rs?ref=ad1eaffc7e24f497e969c47f400ad20ae383f9aa", "previous_filename": "src/test/ui/type-alias-impl-trait/private_unused.rs"}, {"sha": "18f69bb57755a54c4d47659a657c01cb9cdb7fa2", "filename": "src/test/ui/issues/issue-19707.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ad1eaffc7e24f497e969c47f400ad20ae383f9aa/src%2Ftest%2Fui%2Fissues%2Fissue-19707.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad1eaffc7e24f497e969c47f400ad20ae383f9aa/src%2Ftest%2Fui%2Fissues%2Fissue-19707.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19707.stderr?ref=ad1eaffc7e24f497e969c47f400ad20ae383f9aa", "patch": "@@ -9,11 +9,11 @@ LL | type Foo = fn(&u8, &u8) -> &u8;\n help: consider making the type lifetime-generic with a new `'a` lifetime\n    |\n LL | type Foo = for<'a> fn(&'a u8, &'a u8) -> &'a u8;\n-   |            +++++++    ~~~~~~  ~~~~~~     ~~~\n+   |            +++++++     ++      ++         ++\n help: consider introducing a named lifetime parameter\n    |\n LL | type Foo<'a> = fn(&'a u8, &'a u8) -> &'a u8;\n-   |         ++++      ~~~~~~  ~~~~~~     ~~~\n+   |         ++++       ++      ++         ++\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/issue-19707.rs:5:27\n@@ -26,11 +26,11 @@ LL | fn bar<F: Fn(&u8, &u8) -> &u8>(f: &F) {}\n help: consider making the bound lifetime-generic with a new `'a` lifetime\n    |\n LL | fn bar<F: for<'a> Fn(&'a u8, &'a u8) -> &'a u8>(f: &F) {}\n-   |           +++++++    ~~~~~~  ~~~~~~     ~~~\n+   |           +++++++     ++      ++         ++\n help: consider introducing a named lifetime parameter\n    |\n LL | fn bar<'a, F: Fn(&'a u8, &'a u8) -> &'a u8>(f: &F) {}\n-   |        +++       ~~~~~~  ~~~~~~     ~~~\n+   |        +++        ++      ++         ++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "bb7cdcbb100fff8aa94011cce119d2bcd743ed11", "filename": "src/test/ui/issues/issue-26638.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad1eaffc7e24f497e969c47f400ad20ae383f9aa/src%2Ftest%2Fui%2Fissues%2Fissue-26638.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad1eaffc7e24f497e969c47f400ad20ae383f9aa/src%2Ftest%2Fui%2Fissues%2Fissue-26638.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26638.stderr?ref=ad1eaffc7e24f497e969c47f400ad20ae383f9aa", "patch": "@@ -8,7 +8,7 @@ LL | fn parse_type(iter: Box<dyn Iterator<Item=&str>+'static>) -> &str { iter.ne\n help: consider introducing a named lifetime parameter\n    |\n LL | fn parse_type<'a>(iter: Box<dyn Iterator<Item=&str>+'static>) -> &'a str { iter.next() }\n-   |              ++++                                                ~~~\n+   |              ++++                                                 ++\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/issue-26638.rs:4:40"}, {"sha": "e5f492af5b366375419267dcf17f3f9ef03f7b6d", "filename": "src/test/ui/issues/issue-30255.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ad1eaffc7e24f497e969c47f400ad20ae383f9aa/src%2Ftest%2Fui%2Fissues%2Fissue-30255.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad1eaffc7e24f497e969c47f400ad20ae383f9aa/src%2Ftest%2Fui%2Fissues%2Fissue-30255.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-30255.stderr?ref=ad1eaffc7e24f497e969c47f400ad20ae383f9aa", "patch": "@@ -8,7 +8,7 @@ LL | fn f(a: &S, b: i32) -> &i32 {\n help: consider introducing a named lifetime parameter\n    |\n LL | fn f<'a>(a: &'a S, b: i32) -> &'a i32 {\n-   |     ++++    ~~~~~             ~~~\n+   |     ++++     ++                ++\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/issue-30255.rs:14:34\n@@ -20,7 +20,7 @@ LL | fn g(a: &S, b: bool, c: &i32) -> &i32 {\n help: consider introducing a named lifetime parameter\n    |\n LL | fn g<'a>(a: &'a S, b: bool, c: &'a i32) -> &'a i32 {\n-   |     ++++    ~~~~~              ~~~~~~~     ~~~\n+   |     ++++     ++                 ++          ++\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/issue-30255.rs:19:44\n@@ -32,7 +32,7 @@ LL | fn h(a: &bool, b: bool, c: &S, d: &i32) -> &i32 {\n help: consider introducing a named lifetime parameter\n    |\n LL | fn h<'a>(a: &'a bool, b: bool, c: &'a S, d: &'a i32) -> &'a i32 {\n-   |     ++++    ~~~~~~~~              ~~~~~     ~~~~~~~     ~~~\n+   |     ++++     ++                    ++        ++          ++\n \n error: aborting due to 3 previous errors\n "}, {"sha": "0e69cd50f6a825a90318c1942258775227ab2aa0", "filename": "src/test/ui/lifetimes/lifetime-elision-return-type-requires-explicit-lifetime.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad1eaffc7e24f497e969c47f400ad20ae383f9aa/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-requires-explicit-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad1eaffc7e24f497e969c47f400ad20ae383f9aa/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-requires-explicit-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-requires-explicit-lifetime.stderr?ref=ad1eaffc7e24f497e969c47f400ad20ae383f9aa", "patch": "@@ -20,7 +20,7 @@ LL | fn g(_x: &isize, _y: &isize) -> &isize {\n help: consider introducing a named lifetime parameter\n    |\n LL | fn g<'a>(_x: &'a isize, _y: &'a isize) -> &'a isize {\n-   |     ++++     ~~~~~~~~~      ~~~~~~~~~     ~~~\n+   |     ++++      ++             ++            ++\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/lifetime-elision-return-type-requires-explicit-lifetime.rs:17:19\n@@ -32,7 +32,7 @@ LL | fn h(_x: &Foo) -> &isize {\n help: consider introducing a named lifetime parameter\n    |\n LL | fn h<'a>(_x: &'a Foo) -> &'a isize {\n-   |     ++++     ~~~~~~~     ~~~\n+   |     ++++      ++          ++\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/lifetime-elision-return-type-requires-explicit-lifetime.rs:21:20"}, {"sha": "bcc3e9510ac97ced275c9a9a5fc63633da289733", "filename": "src/test/ui/lifetimes/lifetime-errors/ex1b-return-no-names-if-else.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad1eaffc7e24f497e969c47f400ad20ae383f9aa/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1b-return-no-names-if-else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad1eaffc7e24f497e969c47f400ad20ae383f9aa/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1b-return-no-names-if-else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1b-return-no-names-if-else.stderr?ref=ad1eaffc7e24f497e969c47f400ad20ae383f9aa", "patch": "@@ -8,7 +8,7 @@ LL | fn foo(x: &i32, y: &i32) -> &i32 {\n help: consider introducing a named lifetime parameter\n    |\n LL | fn foo<'a>(x: &'a i32, y: &'a i32) -> &'a i32 {\n-   |       ++++    ~~~~~~~     ~~~~~~~     ~~~\n+   |       ++++     ++          ++          ++\n \n error: aborting due to previous error\n "}, {"sha": "4c6211a279a58e9483da41ba47f542e0e86b0a16", "filename": "src/test/ui/lint/dead-code/anon-const-in-pat.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/ad1eaffc7e24f497e969c47f400ad20ae383f9aa/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fanon-const-in-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad1eaffc7e24f497e969c47f400ad20ae383f9aa/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fanon-const-in-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fanon-const-in-pat.rs?ref=ad1eaffc7e24f497e969c47f400ad20ae383f9aa", "patch": "@@ -0,0 +1,45 @@\n+// check-pass\n+#![feature(inline_const)]\n+#![allow(incomplete_features)]\n+#![deny(dead_code)]\n+\n+const fn one() -> i32 {\n+    1\n+}\n+\n+const fn two() -> i32 {\n+    2\n+}\n+\n+const fn three() -> i32 {\n+    3\n+}\n+\n+fn inline_const() {\n+    // rust-lang/rust#78171: dead_code lint triggers even though function is used in const pattern\n+    match 1 {\n+        const { one() } => {}\n+        _ => {}\n+    }\n+}\n+\n+fn inline_const_range() {\n+    match 1 {\n+        1 ..= const { two() } => {}\n+        _ => {}\n+    }\n+}\n+\n+struct S<const C: i32>;\n+\n+fn const_generic_arg() {\n+    match S::<3> {\n+        S::<{three()}> => {}\n+    }\n+}\n+\n+fn main() {\n+    inline_const();\n+    inline_const_range();\n+    const_generic_arg();\n+}"}, {"sha": "65b9f68817aa42f28d951d1a4ce5cf929d2523b7", "filename": "src/test/ui/rfc1623-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad1eaffc7e24f497e969c47f400ad20ae383f9aa/src%2Ftest%2Fui%2Frfc1623-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad1eaffc7e24f497e969c47f400ad20ae383f9aa/src%2Ftest%2Fui%2Frfc1623-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1623-2.stderr?ref=ad1eaffc7e24f497e969c47f400ad20ae383f9aa", "patch": "@@ -9,7 +9,7 @@ LL | static NON_ELIDABLE_FN: &fn(&u8, &u8) -> &u8 =\n help: consider making the type lifetime-generic with a new `'a` lifetime\n    |\n LL | static NON_ELIDABLE_FN: &for<'a> fn(&'a u8, &'a u8) -> &'a u8 =\n-   |                          +++++++    ~~~~~~  ~~~~~~     ~~~\n+   |                          +++++++     ++      ++         ++\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/rfc1623-2.rs:10:39\n@@ -22,7 +22,7 @@ LL |     &(non_elidable as fn(&u8, &u8) -> &u8);\n help: consider making the type lifetime-generic with a new `'a` lifetime\n    |\n LL |     &(non_elidable as for<'a> fn(&'a u8, &'a u8) -> &'a u8);\n-   |                       +++++++    ~~~~~~  ~~~~~~     ~~~\n+   |                       +++++++     ++      ++         ++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "7c0f8d199a965b111a9c9be6479f379988499391", "filename": "src/test/ui/suggestions/fn-missing-lifetime-in-item.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad1eaffc7e24f497e969c47f400ad20ae383f9aa/src%2Ftest%2Fui%2Fsuggestions%2Ffn-missing-lifetime-in-item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad1eaffc7e24f497e969c47f400ad20ae383f9aa/src%2Ftest%2Fui%2Fsuggestions%2Ffn-missing-lifetime-in-item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffn-missing-lifetime-in-item.stderr?ref=ad1eaffc7e24f497e969c47f400ad20ae383f9aa", "patch": "@@ -25,11 +25,11 @@ LL | struct S2<F: Fn(&i32, &i32) -> &i32>(F);\n help: consider making the bound lifetime-generic with a new `'a` lifetime\n    |\n LL | struct S2<F: for<'a> Fn(&'a i32, &'a i32) -> &'a i32>(F);\n-   |              +++++++    ~~~~~~~  ~~~~~~~     ~~~\n+   |              +++++++     ++       ++          ++\n help: consider introducing a named lifetime parameter\n    |\n LL | struct S2<'a, F: Fn(&'a i32, &'a i32) -> &'a i32>(F);\n-   |           +++       ~~~~~~~  ~~~~~~~     ~~~\n+   |           +++        ++       ++          ++\n \n error[E0582]: binding for associated type `Output` references lifetime `'a`, which does not appear in the trait input types\n   --> $DIR/fn-missing-lifetime-in-item.rs:3:40"}, {"sha": "70c96feb1de4c7dc461009449a6892dcee1b8e80", "filename": "src/test/ui/suggestions/issue-84592.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad1eaffc7e24f497e969c47f400ad20ae383f9aa/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84592.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad1eaffc7e24f497e969c47f400ad20ae383f9aa/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84592.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84592.stderr?ref=ad1eaffc7e24f497e969c47f400ad20ae383f9aa", "patch": "@@ -10,7 +10,7 @@ LL | fn two_lifetimes_needed(a: &(), b: &()) -> TwoLifetimes<'_, '_> {\n help: consider introducing a named lifetime parameter\n    |\n LL | fn two_lifetimes_needed<'a>(a: &'a (), b: &'a ()) -> TwoLifetimes<'a, 'a> {\n-   |                        ++++    ~~~~~~     ~~~~~~                  ~~  ~~\n+   |                        ++++     ++         ++                     ~~  ~~\n \n error: aborting due to previous error\n "}, {"sha": "14dbbfffb0e622b8fc1f5b76a0dd24292e7ef112", "filename": "src/test/ui/suggestions/issue-86667.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad1eaffc7e24f497e969c47f400ad20ae383f9aa/src%2Ftest%2Fui%2Fsuggestions%2Fissue-86667.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad1eaffc7e24f497e969c47f400ad20ae383f9aa/src%2Ftest%2Fui%2Fsuggestions%2Fissue-86667.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-86667.stderr?ref=ad1eaffc7e24f497e969c47f400ad20ae383f9aa", "patch": "@@ -8,7 +8,7 @@ LL | async fn a(s1: &str, s2: &str) -> &str {\n help: consider introducing a named lifetime parameter\n    |\n LL | async fn a<'a>(s1: &'a str, s2: &'a str) -> &'a str {\n-   |           ++++     ~~~~~~~      ~~~~~~~     ~~~\n+   |           ++++      ++           ++          ++\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/issue-86667.rs:11:29\n@@ -20,7 +20,7 @@ LL | fn b(s1: &str, s2: &str) -> &str {\n help: consider introducing a named lifetime parameter\n    |\n LL | fn b<'a>(s1: &'a str, s2: &'a str) -> &'a str {\n-   |     ++++     ~~~~~~~      ~~~~~~~     ~~~\n+   |     ++++      ++           ++          ++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "33f9d092e6ee0444a7b5d685e11c7b54c1404053", "filename": "src/test/ui/suggestions/missing-lt-for-hrtb.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad1eaffc7e24f497e969c47f400ad20ae383f9aa/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-lt-for-hrtb.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad1eaffc7e24f497e969c47f400ad20ae383f9aa/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-lt-for-hrtb.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-lt-for-hrtb.stderr?ref=ad1eaffc7e24f497e969c47f400ad20ae383f9aa", "patch": "@@ -47,7 +47,7 @@ LL | struct V<'a>(&'a dyn for<'b> Fn(&X) -> &X);\n help: consider using one of the available lifetimes here\n    |\n LL | struct V<'a>(&'a dyn for<'b> Fn(&X) -> &'lifetime X);\n-   |                                        ~~~~~~~~~~\n+   |                                         +++++++++\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/missing-lt-for-hrtb.rs:5:41"}, {"sha": "f147b4463e2f21e7af310676bbb9c9e16c4790b0", "filename": "src/test/ui/suggestions/return-elided-lifetime.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ad1eaffc7e24f497e969c47f400ad20ae383f9aa/src%2Ftest%2Fui%2Fsuggestions%2Freturn-elided-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad1eaffc7e24f497e969c47f400ad20ae383f9aa/src%2Ftest%2Fui%2Fsuggestions%2Freturn-elided-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Freturn-elided-lifetime.stderr?ref=ad1eaffc7e24f497e969c47f400ad20ae383f9aa", "patch": "@@ -80,7 +80,7 @@ LL | fn f3(s: &S) -> &i32 { loop {} }\n help: consider introducing a named lifetime parameter\n    |\n LL | fn f3<'a>(s: &'a S) -> &'a i32 { loop {} }\n-   |      ++++    ~~~~~     ~~~\n+   |      ++++     ++        ++\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/return-elided-lifetime.rs:21:26\n@@ -92,7 +92,7 @@ LL | fn f3_(s: &S, t: &S) -> (&i32, &i32) { loop {} }\n help: consider introducing a named lifetime parameter\n    |\n LL | fn f3_<'a>(s: &'a S, t: &'a S) -> (&'a i32, &i32) { loop {} }\n-   |       ++++    ~~~~~     ~~~~~      ~~~\n+   |       ++++     ++        ++         ++\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/return-elided-lifetime.rs:21:32\n@@ -104,7 +104,7 @@ LL | fn f3_(s: &S, t: &S) -> (&i32, &i32) { loop {} }\n help: consider introducing a named lifetime parameter\n    |\n LL | fn f3_<'a>(s: &'a S, t: &'a S) -> (&i32, &'a i32) { loop {} }\n-   |       ++++    ~~~~~     ~~~~~            ~~~\n+   |       ++++     ++        ++               ++\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/return-elided-lifetime.rs:25:42\n@@ -121,7 +121,7 @@ LL | fn f4<'a, 'b>(a: &'a i32, b: &'b i32) -> &i32 { loop {} }\n help: consider using one of the available lifetimes here\n    |\n LL | fn f4<'a, 'b>(a: &'a i32, b: &'b i32) -> &'lifetime i32 { loop {} }\n-   |                                          ~~~~~~~~~~\n+   |                                           +++++++++\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/return-elided-lifetime.rs:27:44\n@@ -138,7 +138,7 @@ LL | fn f4_<'a, 'b>(a: &'a i32, b: &'b i32) -> (&i32, &i32) { loop {} }\n help: consider using one of the available lifetimes here\n    |\n LL | fn f4_<'a, 'b>(a: &'a i32, b: &'b i32) -> (&'lifetime i32, &i32) { loop {} }\n-   |                                            ~~~~~~~~~~\n+   |                                             +++++++++\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/return-elided-lifetime.rs:27:50\n@@ -155,7 +155,7 @@ LL | fn f4_<'a, 'b>(a: &'a i32, b: &'b i32) -> (&i32, &i32) { loop {} }\n help: consider using one of the available lifetimes here\n    |\n LL | fn f4_<'a, 'b>(a: &'a i32, b: &'b i32) -> (&i32, &'lifetime i32) { loop {} }\n-   |                                                  ~~~~~~~~~~\n+   |                                                   +++++++++\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/return-elided-lifetime.rs:31:35"}, {"sha": "6a104e8f94b32f435da81896372da004756f8195", "filename": "src/test/ui/underscore-lifetime/in-fn-return-illegal.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad1eaffc7e24f497e969c47f400ad20ae383f9aa/src%2Ftest%2Fui%2Funderscore-lifetime%2Fin-fn-return-illegal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad1eaffc7e24f497e969c47f400ad20ae383f9aa/src%2Ftest%2Fui%2Funderscore-lifetime%2Fin-fn-return-illegal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fin-fn-return-illegal.stderr?ref=ad1eaffc7e24f497e969c47f400ad20ae383f9aa", "patch": "@@ -8,7 +8,7 @@ LL | fn foo(x: &u32, y: &u32) -> &'_ u32 { loop { } }\n help: consider introducing a named lifetime parameter\n    |\n LL | fn foo<'a>(x: &'a u32, y: &'a u32) -> &'a u32 { loop { } }\n-   |       ++++    ~~~~~~~     ~~~~~~~      ~~\n+   |       ++++     ++          ++          ~~\n \n error: aborting due to previous error\n "}, {"sha": "22bf1fdba326f303031a711d6bbd73597edc9375", "filename": "src/test/ui/underscore-lifetime/underscore-lifetime-binders.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad1eaffc7e24f497e969c47f400ad20ae383f9aa/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-lifetime-binders.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad1eaffc7e24f497e969c47f400ad20ae383f9aa/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-lifetime-binders.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-lifetime-binders.stderr?ref=ad1eaffc7e24f497e969c47f400ad20ae383f9aa", "patch": "@@ -43,7 +43,7 @@ LL | fn foo2(_: &'_ u8, y: &'_ u8) -> &'_ u8 { y }\n help: consider introducing a named lifetime parameter\n    |\n LL | fn foo2<'a>(_: &'a u8, y: &'a u8) -> &'a u8 { y }\n-   |        ++++    ~~~~~~     ~~~~~~      ~~\n+   |        ++++     ~~         ~~         ~~\n \n error: aborting due to 5 previous errors\n "}, {"sha": "e697e1f86a9d51f5ea536ee695e7147340ba859e", "filename": "src/tools/rustdoc-gui/tester.js", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ad1eaffc7e24f497e969c47f400ad20ae383f9aa/src%2Ftools%2Frustdoc-gui%2Ftester.js", "raw_url": "https://github.com/rust-lang/rust/raw/ad1eaffc7e24f497e969c47f400ad20ae383f9aa/src%2Ftools%2Frustdoc-gui%2Ftester.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-gui%2Ftester.js?ref=ad1eaffc7e24f497e969c47f400ad20ae383f9aa", "patch": "@@ -17,6 +17,11 @@ function showHelp() {\n     console.log(\"  --no-headless              : disable headless mode\");\n     console.log(\"  --help                     : show this message then quit\");\n     console.log(\"  --tests-folder [PATH]      : location of the .GOML tests folder\");\n+    console.log(\"  --jobs [NUMBER]            : number of threads to run tests on\");\n+}\n+\n+function isNumeric(s) {\n+    return /^\\d+$/.test(s);\n }\n \n function parseOptions(args) {\n@@ -27,6 +32,7 @@ function parseOptions(args) {\n         \"debug\": false,\n         \"show_text\": false,\n         \"no_headless\": false,\n+        \"jobs\": -1,\n     };\n     var correspondances = {\n         \"--doc-folder\": \"doc_folder\",\n@@ -39,13 +45,21 @@ function parseOptions(args) {\n     for (var i = 0; i < args.length; ++i) {\n         if (args[i] === \"--doc-folder\"\n             || args[i] === \"--tests-folder\"\n-            || args[i] === \"--file\") {\n+            || args[i] === \"--file\"\n+            || args[i] === \"--jobs\") {\n             i += 1;\n             if (i >= args.length) {\n                 console.log(\"Missing argument after `\" + args[i - 1] + \"` option.\");\n                 return null;\n             }\n-            if (args[i - 1] !== \"--file\") {\n+            if (args[i - 1] === \"--jobs\") {\n+                if (!isNumeric(args[i])) {\n+                    console.log(\n+                        \"`--jobs` option expects a positive number, found `\" + args[i] + \"`\");\n+                    return null;\n+                }\n+                opts[\"jobs\"] = parseInt(args[i]);\n+            } else if (args[i - 1] !== \"--file\") {\n                 opts[correspondances[args[i - 1]]] = args[i];\n             } else {\n                 opts[\"files\"].push(args[i]);\n@@ -158,7 +172,11 @@ async function main(argv) {\n     files.sort();\n \n     console.log(`Running ${files.length} rustdoc-gui tests...`);\n-    process.setMaxListeners(files.length + 1);\n+    if (opts[\"jobs\"] < 1) {\n+        process.setMaxListeners(files.length + 1);\n+    } else {\n+        process.setMaxListeners(opts[\"jobs\"]);\n+    }\n     let tests = [];\n     let results = {\n         successful: [],"}]}