{"sha": "448cc578a903730d422f6e638641787d0dbd7bc7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0OGNjNTc4YTkwMzczMGQ0MjJmNmU2Mzg2NDE3ODdkMGRiZDdiYzc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-16T09:03:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-16T09:03:38Z"}, "message": "Auto merge of #48557 - matthewjasper:allow-trvial-bounds, r=nikomatsakis\n\nImplement RFC 2056 trivial constraints in where clauses\n\nThis is an implementation of the new behaviour for #48214. Tests are mostly updated to show the effects of this. Feature gate hasn't been added yet.\n\nSome things that are worth noting and are maybe not want we want\n\n* `&mut T: Copy` doesn't allow as much as someone might expect because there is often an implicit reborrow.\n* ~There isn't a check that a where clause is well-formed any more, so `where Vec<str>: Debug` is now allowed (without a `str: Sized` bound).~\n\nr? @nikomatsakis", "tree": {"sha": "a33e1b1cee698283eaf2431c9b909d7ddd39e192", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a33e1b1cee698283eaf2431c9b909d7ddd39e192"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/448cc578a903730d422f6e638641787d0dbd7bc7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/448cc578a903730d422f6e638641787d0dbd7bc7", "html_url": "https://github.com/rust-lang/rust/commit/448cc578a903730d422f6e638641787d0dbd7bc7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/448cc578a903730d422f6e638641787d0dbd7bc7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ec2058bfee1e6c57d4c84d873737f84d4636bea", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ec2058bfee1e6c57d4c84d873737f84d4636bea", "html_url": "https://github.com/rust-lang/rust/commit/3ec2058bfee1e6c57d4c84d873737f84d4636bea"}, {"sha": "be2900c33b043ca2002bdb11870e8d26c3e410f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/be2900c33b043ca2002bdb11870e8d26c3e410f3", "html_url": "https://github.com/rust-lang/rust/commit/be2900c33b043ca2002bdb11870e8d26c3e410f3"}], "stats": {"total": 1149, "additions": 1084, "deletions": 65}, "files": [{"sha": "e4520bce68199a5ea233cc1053ffc2a4ead7464b", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/448cc578a903730d422f6e638641787d0dbd7bc7/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/448cc578a903730d422f6e638641787d0dbd7bc7/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=448cc578a903730d422f6e638641787d0dbd7bc7", "patch": "@@ -1479,6 +1479,14 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             }\n             ObligationCauseCode::ReturnType(_) |\n             ObligationCauseCode::BlockTailExpression(_) => (),\n+            ObligationCauseCode::TrivialBound => {\n+                err.help(\"see issue #48214\");\n+                if tcx.sess.opts.unstable_features.is_nightly_build() {\n+                    err.help(\"add #![feature(trivial_bounds)] to the \\\n+                              crate attributes to enable\",\n+                    );\n+                }\n+            }\n         }\n     }\n "}, {"sha": "94ee39470772fe7165cb5f803d3da602aedf38a1", "filename": "src/librustc/traits/fulfill.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/448cc578a903730d422f6e638641787d0dbd7bc7/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/448cc578a903730d422f6e638641787d0dbd7bc7/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ffulfill.rs?ref=448cc578a903730d422f6e638641787d0dbd7bc7", "patch": "@@ -330,7 +330,7 @@ fn process_predicate<'a, 'gcx, 'tcx>(\n         ty::Predicate::Trait(ref data) => {\n             let trait_obligation = obligation.with(data.clone());\n \n-            if data.is_global() {\n+            if data.is_global() && !data.has_late_bound_regions() {\n                 // no type variables present, can use evaluation for better caching.\n                 // FIXME: consider caching errors too.\n                 if selcx.infcx().predicate_must_hold(&obligation) {"}, {"sha": "f4f0c47899d4e679f2d2cffe5a77c5037a82c12b", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/448cc578a903730d422f6e638641787d0dbd7bc7/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/448cc578a903730d422f6e638641787d0dbd7bc7/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=448cc578a903730d422f6e638641787d0dbd7bc7", "patch": "@@ -243,6 +243,9 @@ pub enum ObligationCauseCode<'tcx> {\n \n     /// Block implicit return\n     BlockTailExpression(ast::NodeId),\n+\n+    /// #[feature(trivial_bounds)] is not enabled\n+    TrivialBound,\n }\n \n #[derive(Clone, Debug, PartialEq, Eq, Hash)]\n@@ -641,17 +644,8 @@ pub fn normalize_param_env_or_error<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     let predicates: Vec<_> =\n         util::elaborate_predicates(tcx, unnormalized_env.caller_bounds.to_vec())\n-        .filter(|p| !p.is_global()) // (*)\n         .collect();\n \n-    // (*) Any predicate like `i32: Trait<u32>` or whatever doesn't\n-    // need to be in the *environment* to be proven, so screen those\n-    // out. This is important for the soundness of inter-fn\n-    // caching. Note though that we should probably check that these\n-    // predicates hold at the point where the environment is\n-    // constructed, but I am not currently doing so out of laziness.\n-    // -nmatsakis\n-\n     debug!(\"normalize_param_env_or_error: elaborated-predicates={:?}\",\n            predicates);\n "}, {"sha": "bd7ec4a12b0c635df7dc4aa5206ff63acc8e66d7", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 28, "deletions": 37, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/448cc578a903730d422f6e638641787d0dbd7bc7/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/448cc578a903730d422f6e638641787d0dbd7bc7/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=448cc578a903730d422f6e638641787d0dbd7bc7", "patch": "@@ -305,9 +305,6 @@ enum BuiltinImplConditions<'tcx> {\n     /// There is no built-in impl. There may be some other\n     /// candidate (a where-clause or user-defined impl).\n     None,\n-    /// There is *no* impl for this, builtin or not. Ignore\n-    /// all where-clauses.\n-    Never,\n     /// It is unknown whether there is an impl.\n     Ambiguous\n }\n@@ -781,13 +778,13 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                                                 mut obligation: TraitObligation<'tcx>)\n                                                 -> Result<EvaluationResult, OverflowError>\n     {\n-        debug!(\"evaluate_trait_predicate_recursively({:?})\",\n-               obligation);\n+        debug!(\"evaluate_trait_predicate_recursively({:?})\", obligation);\n \n-        if !self.intercrate.is_some() && obligation.is_global() {\n-            // If a param env is consistent, global obligations do not depend on its particular\n-            // value in order to work, so we can clear out the param env and get better\n-            // caching. (If the current param env is inconsistent, we don't care what happens).\n+        if self.intercrate.is_none() && obligation.is_global()\n+            && obligation.param_env.caller_bounds.iter().all(|bound| bound.needs_subst()) {\n+            // If a param env has no global bounds, global obligations do not\n+            // depend on its particular value in order to work, so we can clear\n+            // out the param env and get better caching.\n             debug!(\"evaluate_trait_predicate_recursively({:?}) - in global\", obligation);\n             obligation.param_env = obligation.param_env.without_caller_bounds();\n         }\n@@ -1451,22 +1448,22 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n             let sized_conditions = self.sized_conditions(obligation);\n             self.assemble_builtin_bound_candidates(sized_conditions,\n                                                    &mut candidates)?;\n-         } else if lang_items.unsize_trait() == Some(def_id) {\n-             self.assemble_candidates_for_unsizing(obligation, &mut candidates);\n-         } else {\n-             if lang_items.clone_trait() == Some(def_id) {\n-                 // Same builtin conditions as `Copy`, i.e. every type which has builtin support\n-                 // for `Copy` also has builtin support for `Clone`, + tuples and arrays of `Clone`\n-                 // types have builtin support for `Clone`.\n-                 let clone_conditions = self.copy_clone_conditions(obligation);\n-                 self.assemble_builtin_bound_candidates(clone_conditions, &mut candidates)?;\n-             }\n-\n-             self.assemble_generator_candidates(obligation, &mut candidates)?;\n-             self.assemble_closure_candidates(obligation, &mut candidates)?;\n-             self.assemble_fn_pointer_candidates(obligation, &mut candidates)?;\n-             self.assemble_candidates_from_impls(obligation, &mut candidates)?;\n-             self.assemble_candidates_from_object_ty(obligation, &mut candidates);\n+        } else if lang_items.unsize_trait() == Some(def_id) {\n+            self.assemble_candidates_for_unsizing(obligation, &mut candidates);\n+        } else {\n+            if lang_items.clone_trait() == Some(def_id) {\n+                // Same builtin conditions as `Copy`, i.e. every type which has builtin support\n+                // for `Copy` also has builtin support for `Clone`, + tuples and arrays of `Clone`\n+                // types have builtin support for `Clone`.\n+                let clone_conditions = self.copy_clone_conditions(obligation);\n+                self.assemble_builtin_bound_candidates(clone_conditions, &mut candidates)?;\n+            }\n+\n+            self.assemble_generator_candidates(obligation, &mut candidates)?;\n+            self.assemble_closure_candidates(obligation, &mut candidates)?;\n+            self.assemble_fn_pointer_candidates(obligation, &mut candidates)?;\n+            self.assemble_candidates_from_impls(obligation, &mut candidates)?;\n+            self.assemble_candidates_from_object_ty(obligation, &mut candidates);\n         }\n \n         self.assemble_candidates_from_projected_tys(obligation, &mut candidates);\n@@ -2081,13 +2078,8 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n     // BUILTIN BOUNDS\n     //\n     // These cover the traits that are built-in to the language\n-    // itself.  This includes `Copy` and `Sized` for sure. For the\n-    // moment, it also includes `Send` / `Sync` and a few others, but\n-    // those will hopefully change to library-defined traits in the\n-    // future.\n+    // itself: `Copy`, `Clone` and `Sized`.\n \n-    // HACK: if this returns an error, selection exits without considering\n-    // other impls.\n     fn assemble_builtin_bound_candidates<'o>(&mut self,\n                                              conditions: BuiltinImplConditions<'tcx>,\n                                              candidates: &mut SelectionCandidateSet<'tcx>)\n@@ -2106,14 +2098,13 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                 debug!(\"assemble_builtin_bound_candidates: ambiguous builtin\");\n                 Ok(candidates.ambiguous = true)\n             }\n-            BuiltinImplConditions::Never => { Err(Unimplemented) }\n         }\n     }\n \n     fn sized_conditions(&mut self, obligation: &TraitObligation<'tcx>)\n                      -> BuiltinImplConditions<'tcx>\n     {\n-        use self::BuiltinImplConditions::{Ambiguous, None, Never, Where};\n+        use self::BuiltinImplConditions::{Ambiguous, None, Where};\n \n         // NOTE: binder moved to (*)\n         let self_ty = self.infcx.shallow_resolve(\n@@ -2130,7 +2121,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                 Where(ty::Binder::dummy(Vec::new()))\n             }\n \n-            ty::TyStr | ty::TySlice(_) | ty::TyDynamic(..) | ty::TyForeign(..) => Never,\n+            ty::TyStr | ty::TySlice(_) | ty::TyDynamic(..) | ty::TyForeign(..) => None,\n \n             ty::TyTuple(tys) => {\n                 Where(ty::Binder::bind(tys.last().into_iter().cloned().collect()))\n@@ -2164,7 +2155,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n         let self_ty = self.infcx.shallow_resolve(\n             obligation.predicate.skip_binder().self_ty());\n \n-        use self::BuiltinImplConditions::{Ambiguous, None, Never, Where};\n+        use self::BuiltinImplConditions::{Ambiguous, None, Where};\n \n         match self_ty.sty {\n             ty::TyInfer(ty::IntVar(_)) | ty::TyInfer(ty::FloatVar(_)) |\n@@ -2182,7 +2173,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n             ty::TyDynamic(..) | ty::TyStr | ty::TySlice(..) |\n             ty::TyGenerator(..) | ty::TyGeneratorWitness(..) | ty::TyForeign(..) |\n             ty::TyRef(_, _, hir::MutMutable) => {\n-                Never\n+                None\n             }\n \n             ty::TyArray(element_ty, _) => {\n@@ -2202,7 +2193,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                 if is_copy_trait || is_clone_trait {\n                     Where(ty::Binder::bind(substs.upvar_tys(def_id, self.tcx()).collect()))\n                 } else {\n-                    Never\n+                    None\n                 }\n             }\n "}, {"sha": "b9593047af4159b045b154c2aef7e92002222769", "filename": "src/librustc/traits/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/448cc578a903730d422f6e638641787d0dbd7bc7/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/448cc578a903730d422f6e638641787d0dbd7bc7/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs?ref=448cc578a903730d422f6e638641787d0dbd7bc7", "patch": "@@ -243,6 +243,7 @@ impl<'a, 'tcx> Lift<'tcx> for traits::ObligationCauseCode<'a> {\n             super::IntrinsicType => Some(super::IntrinsicType),\n             super::MethodReceiver => Some(super::MethodReceiver),\n             super::BlockTailExpression(id) => Some(super::BlockTailExpression(id)),\n+            super::TrivialBound => Some(super::TrivialBound),\n         }\n     }\n }"}, {"sha": "e913f8f568adab3ecb0a07747bee4ba01c5a1b67", "filename": "src/librustc/ty/flags.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/448cc578a903730d422f6e638641787d0dbd7bc7/src%2Flibrustc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/448cc578a903730d422f6e638641787d0dbd7bc7/src%2Flibrustc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fflags.rs?ref=448cc578a903730d422f6e638641787d0dbd7bc7", "patch": "@@ -79,7 +79,7 @@ impl FlagComputation {\n             }\n \n             &ty::TyParam(ref p) => {\n-                self.add_flags(TypeFlags::HAS_LOCAL_NAMES);\n+                self.add_flags(TypeFlags::HAS_FREE_LOCAL_NAMES);\n                 if p.is_self() {\n                     self.add_flags(TypeFlags::HAS_SELF);\n                 } else {\n@@ -89,7 +89,7 @@ impl FlagComputation {\n \n             &ty::TyGenerator(_, ref substs, _) => {\n                 self.add_flags(TypeFlags::HAS_TY_CLOSURE);\n-                self.add_flags(TypeFlags::HAS_LOCAL_NAMES);\n+                self.add_flags(TypeFlags::HAS_FREE_LOCAL_NAMES);\n                 self.add_substs(&substs.substs);\n             }\n \n@@ -101,12 +101,12 @@ impl FlagComputation {\n \n             &ty::TyClosure(_, ref substs) => {\n                 self.add_flags(TypeFlags::HAS_TY_CLOSURE);\n-                self.add_flags(TypeFlags::HAS_LOCAL_NAMES);\n+                self.add_flags(TypeFlags::HAS_FREE_LOCAL_NAMES);\n                 self.add_substs(&substs.substs);\n             }\n \n             &ty::TyInfer(infer) => {\n-                self.add_flags(TypeFlags::HAS_LOCAL_NAMES); // it might, right?\n+                self.add_flags(TypeFlags::HAS_FREE_LOCAL_NAMES); // it might, right?\n                 self.add_flags(TypeFlags::HAS_TY_INFER);\n                 match infer {\n                     ty::FreshTy(_) |"}, {"sha": "a1f9fd76b02dcefd79a9b55fc047414336e0b801", "filename": "src/librustc/ty/fold.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/448cc578a903730d422f6e638641787d0dbd7bc7/src%2Flibrustc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/448cc578a903730d422f6e638641787d0dbd7bc7/src%2Flibrustc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffold.rs?ref=448cc578a903730d422f6e638641787d0dbd7bc7", "patch": "@@ -116,10 +116,14 @@ pub trait TypeFoldable<'tcx>: fmt::Debug + Clone {\n \n     /// Indicates whether this value references only 'global'\n     /// types/lifetimes that are the same regardless of what fn we are\n-    /// in. This is used for caching. Errs on the side of returning\n-    /// false.\n+    /// in. This is used for caching.\n     fn is_global(&self) -> bool {\n-        !self.has_type_flags(TypeFlags::HAS_LOCAL_NAMES)\n+        !self.has_type_flags(TypeFlags::HAS_FREE_LOCAL_NAMES)\n+    }\n+\n+    /// True if there are any late-bound regions\n+    fn has_late_bound_regions(&self) -> bool {\n+        self.has_type_flags(TypeFlags::HAS_RE_LATE_BOUND)\n     }\n }\n "}, {"sha": "eb638d7c9a1a8aee70a2eb9cf6a2d0508ba31da5", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/448cc578a903730d422f6e638641787d0dbd7bc7/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/448cc578a903730d422f6e638641787d0dbd7bc7/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=448cc578a903730d422f6e638641787d0dbd7bc7", "patch": "@@ -441,7 +441,7 @@ bitflags! {\n \n         // true if there are \"names\" of types and regions and so forth\n         // that are local to a particular fn\n-        const HAS_LOCAL_NAMES    = 1 << 10;\n+        const HAS_FREE_LOCAL_NAMES    = 1 << 10;\n \n         // Present if the type belongs in a local type context.\n         // Only set for TyInfer other than Fresh.\n@@ -455,6 +455,10 @@ bitflags! {\n         // ought to be true only for the results of canonicalization.\n         const HAS_CANONICAL_VARS = 1 << 13;\n \n+        /// Does this have any `ReLateBound` regions? Used to check\n+        /// if a global bound is safe to evaluate.\n+        const HAS_RE_LATE_BOUND = 1 << 14;\n+\n         const NEEDS_SUBST        = TypeFlags::HAS_PARAMS.bits |\n                                    TypeFlags::HAS_SELF.bits |\n                                    TypeFlags::HAS_RE_EARLY_BOUND.bits;\n@@ -472,9 +476,10 @@ bitflags! {\n                                   TypeFlags::HAS_TY_ERR.bits |\n                                   TypeFlags::HAS_PROJECTION.bits |\n                                   TypeFlags::HAS_TY_CLOSURE.bits |\n-                                  TypeFlags::HAS_LOCAL_NAMES.bits |\n+                                  TypeFlags::HAS_FREE_LOCAL_NAMES.bits |\n                                   TypeFlags::KEEP_IN_LOCAL_TCX.bits |\n-                                  TypeFlags::HAS_CANONICAL_VARS.bits;\n+                                  TypeFlags::HAS_CANONICAL_VARS.bits |\n+                                  TypeFlags::HAS_RE_LATE_BOUND.bits;\n     }\n }\n "}, {"sha": "5c0217fc3f51e2cb3c5c080306b4b054240610e3", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/448cc578a903730d422f6e638641787d0dbd7bc7/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/448cc578a903730d422f6e638641787d0dbd7bc7/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=448cc578a903730d422f6e638641787d0dbd7bc7", "patch": "@@ -1268,7 +1268,9 @@ impl RegionKind {\n                 flags = flags | TypeFlags::HAS_FREE_REGIONS;\n                 flags = flags | TypeFlags::HAS_RE_SKOL;\n             }\n-            ty::ReLateBound(..) => { }\n+            ty::ReLateBound(..) => {\n+                flags = flags | TypeFlags::HAS_RE_LATE_BOUND;\n+            }\n             ty::ReEarlyBound(..) => {\n                 flags = flags | TypeFlags::HAS_FREE_REGIONS;\n                 flags = flags | TypeFlags::HAS_RE_EARLY_BOUND;\n@@ -1291,8 +1293,8 @@ impl RegionKind {\n         }\n \n         match *self {\n-            ty::ReStatic | ty::ReEmpty | ty::ReErased => (),\n-            _ => flags = flags | TypeFlags::HAS_LOCAL_NAMES,\n+            ty::ReStatic | ty::ReEmpty | ty::ReErased | ty::ReLateBound(..) => (),\n+            _ => flags = flags | TypeFlags::HAS_FREE_LOCAL_NAMES,\n         }\n \n         debug!(\"type_flags({:?}) = {:?}\", self, flags);"}, {"sha": "0b1e9081a725e6696f04bd967ad4d1fa080336f1", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/448cc578a903730d422f6e638641787d0dbd7bc7/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/448cc578a903730d422f6e638641787d0dbd7bc7/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=448cc578a903730d422f6e638641787d0dbd7bc7", "patch": "@@ -1591,3 +1591,61 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ExternCrate {\n         self.0 += 1;\n     }\n }\n+\n+/// Lint for trait and lifetime bounds that don't depend on type parameters\n+/// which either do nothing, or stop the item from being used.\n+pub struct TrivialConstraints;\n+\n+declare_lint! {\n+    TRIVIAL_BOUNDS,\n+    Warn,\n+    \"these bounds don't depend on an type parameters\"\n+}\n+\n+impl LintPass for TrivialConstraints {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(TRIVIAL_BOUNDS)\n+    }\n+}\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TrivialConstraints {\n+    fn check_item(\n+        &mut self,\n+        cx: &LateContext<'a, 'tcx>,\n+        item: &'tcx hir::Item,\n+    ) {\n+        use rustc::ty::fold::TypeFoldable;\n+        use rustc::ty::Predicate::*;\n+\n+\n+        if cx.tcx.features().trivial_bounds {\n+            let def_id = cx.tcx.hir.local_def_id(item.id);\n+            let predicates = cx.tcx.predicates_of(def_id);\n+            for predicate in &predicates.predicates {\n+                let predicate_kind_name = match *predicate {\n+                    Trait(..) => \"Trait\",\n+                    TypeOutlives(..) |\n+                    RegionOutlives(..) => \"Lifetime\",\n+\n+                    // Ignore projections, as they can only be global\n+                    // if the trait bound is global\n+                    Projection(..) |\n+                    // Ignore bounds that a user can't type\n+                    WellFormed(..) |\n+                    ObjectSafe(..) |\n+                    ClosureKind(..) |\n+                    Subtype(..) |\n+                    ConstEvaluatable(..) => continue,\n+                };\n+                if predicate.is_global() {\n+                    cx.span_lint(\n+                        TRIVIAL_BOUNDS,\n+                        item.span,\n+                        &format!(\"{} bound {} does not depend on any type \\\n+                                or lifetime parameters\", predicate_kind_name, predicate),\n+                    );\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "ae44ea6b65b9ac596f6b39a8dee13be8a8e7b87b", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/448cc578a903730d422f6e638641787d0dbd7bc7/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/448cc578a903730d422f6e638641787d0dbd7bc7/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=448cc578a903730d422f6e638641787d0dbd7bc7", "patch": "@@ -137,6 +137,7 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n                  UnreachablePub,\n                  TypeAliasBounds,\n                  UnusedBrokenConst,\n+                 TrivialConstraints,\n                  );\n \n     add_builtin_with_new!(sess,"}, {"sha": "0fc8c9cc316aca0188d71b184fcf147e88b7faff", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/448cc578a903730d422f6e638641787d0dbd7bc7/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/448cc578a903730d422f6e638641787d0dbd7bc7/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=448cc578a903730d422f6e638641787d0dbd7bc7", "patch": "@@ -47,6 +47,12 @@ impl<'a, 'gcx, 'tcx> CheckWfFcxBuilder<'a, 'gcx, 'tcx> {\n         let param_env = self.param_env;\n         self.inherited.enter(|inh| {\n             let fcx = FnCtxt::new(&inh, param_env, id);\n+            if !inh.tcx.features().trivial_bounds {\n+                // As predicates are cached rather than obligations, this\n+                // needsto be called first so that they are checked with an\n+                // empty param_env.\n+                check_false_global_bounds(&fcx, span, id);\n+            }\n             let wf_tys = f(&fcx, fcx.tcx.global_tcx());\n             fcx.select_all_obligations_or_error();\n             fcx.regionck_item(id, span, &wf_tys);\n@@ -686,6 +692,41 @@ fn reject_shadowing_parameters(tcx: TyCtxt, def_id: DefId) {\n     }\n }\n \n+/// Feature gates RFC 2056 - trivial bounds, checking for global bounds that\n+/// aren't true.\n+fn check_false_global_bounds<'a, 'gcx, 'tcx>(\n+        fcx: &FnCtxt<'a, 'gcx, 'tcx>,\n+        span: Span,\n+        id: ast::NodeId,\n+) {\n+    use rustc::ty::TypeFoldable;\n+\n+    let empty_env = ty::ParamEnv::empty();\n+\n+    let def_id = fcx.tcx.hir.local_def_id(id);\n+    let predicates = fcx.tcx.predicates_of(def_id).predicates;\n+    // Check elaborated bounds\n+    let implied_obligations = traits::elaborate_predicates(fcx.tcx, predicates);\n+\n+    for pred in implied_obligations {\n+        // Match the existing behavior.\n+        if pred.is_global() && !pred.has_late_bound_regions() {\n+            let obligation = traits::Obligation::new(\n+                traits::ObligationCause::new(\n+                    span,\n+                    id,\n+                    traits::TrivialBound,\n+                ),\n+                empty_env,\n+                pred,\n+            );\n+            fcx.register_predicate(obligation);\n+        }\n+    }\n+\n+    fcx.select_all_obligations_or_error();\n+}\n+\n pub struct CheckTypeWellFormedVisitor<'a, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n }"}, {"sha": "bf78723e41365f8f5e961e59015a9214c042af88", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/448cc578a903730d422f6e638641787d0dbd7bc7/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/448cc578a903730d422f6e638641787d0dbd7bc7/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=448cc578a903730d422f6e638641787d0dbd7bc7", "patch": "@@ -463,6 +463,9 @@ declare_features! (\n \n     // Allows use of the :literal macro fragment specifier (RFC 1576)\n     (active, macro_literal_matcher, \"1.27.0\", Some(35625), None),\n+\n+    // inconsistent bounds in where clauses\n+    (active, trivial_bounds, \"1.28.0\", Some(48214), None),\n );\n \n declare_features! ("}, {"sha": "d437fc019fda04f5ccec10d0d72548eb96a52445", "filename": "src/test/compile-fail/cross-fn-cache-hole.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/448cc578a903730d422f6e638641787d0dbd7bc7/src%2Ftest%2Fcompile-fail%2Fcross-fn-cache-hole.rs", "raw_url": "https://github.com/rust-lang/rust/raw/448cc578a903730d422f6e638641787d0dbd7bc7/src%2Ftest%2Fcompile-fail%2Fcross-fn-cache-hole.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcross-fn-cache-hole.rs?ref=448cc578a903730d422f6e638641787d0dbd7bc7", "patch": "@@ -11,10 +11,9 @@\n // Check that when there are vacuous predicates in the environment\n // (which make a fn uncallable) we don't erroneously cache those and\n // then consider them satisfied elsewhere. The current technique for\n-// doing this is just to filter \"global\" predicates out of the\n-// environment, which means that we wind up with an error in the\n-// function `vacuous`, because even though `i32: Bar<u32>` is implied\n-// by its where clause, that where clause never holds.\n+// doing this is to not use global caches when there is a chance that\n+// the environment contains such a predicate.\n+// We still error for `i32: Bar<u32>` pending #48214\n \n trait Foo<X,Y>: Bar<X> {\n }"}, {"sha": "b07c23c3fc72da5ec4721be552483a4e80178305", "filename": "src/test/compile-fail/issue-42796.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/448cc578a903730d422f6e638641787d0dbd7bc7/src%2Ftest%2Fcompile-fail%2Fissue-42796.rs", "raw_url": "https://github.com/rust-lang/rust/raw/448cc578a903730d422f6e638641787d0dbd7bc7/src%2Ftest%2Fcompile-fail%2Fissue-42796.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-42796.rs?ref=448cc578a903730d422f6e638641787d0dbd7bc7", "patch": "@@ -17,7 +17,7 @@ impl<T, Smoke> Mirror<Smoke> for T {\n }\n \n pub fn poison<S>(victim: String) where <String as Mirror<S>>::Image: Copy {\n-    loop { drop(victim); } //~ ERROR use of moved value\n+    loop { drop(victim); }\n }\n \n fn main() {"}, {"sha": "2d2d491bd4df3f1c1507f019371b0a7db82fc1e7", "filename": "src/test/ui/feature-gate-trivial_bounds-lint.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/448cc578a903730d422f6e638641787d0dbd7bc7/src%2Ftest%2Fui%2Ffeature-gate-trivial_bounds-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/448cc578a903730d422f6e638641787d0dbd7bc7/src%2Ftest%2Fui%2Ffeature-gate-trivial_bounds-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-trivial_bounds-lint.rs?ref=448cc578a903730d422f6e638641787d0dbd7bc7", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// run-pass\n+\n+#![allow(unused)]\n+#![deny(trivial_bounds)] // Ignored without the trivial_bounds feature flag.\n+\n+struct A where i32: Copy;\n+\n+fn main() {}"}, {"sha": "ecc6896b75488ee0d31b704cc50216500c269074", "filename": "src/test/ui/feature-gate-trivial_bounds.rs", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/448cc578a903730d422f6e638641787d0dbd7bc7/src%2Ftest%2Fui%2Ffeature-gate-trivial_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/448cc578a903730d422f6e638641787d0dbd7bc7/src%2Ftest%2Fui%2Ffeature-gate-trivial_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-trivial_bounds.rs?ref=448cc578a903730d422f6e638641787d0dbd7bc7", "patch": "@@ -0,0 +1,78 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![allow(unused)]\n+#![allow(type_alias_bounds)]\n+\n+pub trait Foo {\n+    fn test(&self);\n+}\n+\n+fn generic_function<X: Foo>(x: X) {}\n+\n+enum E where i32: Foo { V } //~ ERROR\n+\n+struct S where i32: Foo; //~ ERROR\n+\n+trait T where i32: Foo {} //~ ERROR\n+\n+union U where i32: Foo { f: i32 } //~ ERROR\n+\n+type Y where i32: Foo = (); // OK - bound is ignored\n+\n+impl Foo for () where i32: Foo { //~ ERROR\n+    fn test(&self) {\n+        3i32.test();\n+        Foo::test(&4i32);\n+        generic_function(5i32);\n+    }\n+}\n+\n+fn f() where i32: Foo //~ ERROR\n+{\n+    let s = S;\n+    3i32.test();\n+    Foo::test(&4i32);\n+    generic_function(5i32);\n+}\n+\n+fn use_op(s: String) -> String where String: ::std::ops::Neg<Output=String> { //~ ERROR\n+    -s\n+}\n+\n+fn use_for() where i32: Iterator { //~ ERROR\n+    for _ in 2i32 {}\n+}\n+\n+trait A {}\n+\n+impl A for i32 {}\n+\n+struct Dst<X: ?Sized> {\n+    x: X,\n+}\n+\n+struct TwoStrs(str, str) where str: Sized; //~ ERROR\n+\n+fn unsized_local() where Dst<A>: Sized { //~ ERROR\n+    let x: Dst<A> = *(Box::new(Dst { x: 1 }) as Box<Dst<A>>);\n+}\n+\n+fn return_str() -> str where str: Sized { //~ ERROR\n+    *\"Sized\".to_string().into_boxed_str()\n+}\n+\n+// This is currently accepted because the function pointer isn't\n+// considered global.\n+fn global_hr(x: fn(&())) where fn(&()): Foo { // OK\n+    x.test();\n+}\n+\n+fn main() {}"}, {"sha": "0794e86175b25b62e0ea2c65f905c9318857531d", "filename": "src/test/ui/feature-gate-trivial_bounds.stderr", "status": "added", "additions": 127, "deletions": 0, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/448cc578a903730d422f6e638641787d0dbd7bc7/src%2Ftest%2Fui%2Ffeature-gate-trivial_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/448cc578a903730d422f6e638641787d0dbd7bc7/src%2Ftest%2Fui%2Ffeature-gate-trivial_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-trivial_bounds.stderr?ref=448cc578a903730d422f6e638641787d0dbd7bc7", "patch": "@@ -0,0 +1,127 @@\n+error[E0277]: the trait bound `i32: Foo` is not satisfied\n+  --> $DIR/feature-gate-trivial_bounds.rs:20:1\n+   |\n+LL | enum E where i32: Foo { V } //~ ERROR\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Foo` is not implemented for `i32`\n+   |\n+   = help: see issue #48214\n+   = help: add #![feature(trivial_bounds)] to the crate attributes to enable\n+\n+error[E0277]: the trait bound `i32: Foo` is not satisfied\n+  --> $DIR/feature-gate-trivial_bounds.rs:22:1\n+   |\n+LL | struct S where i32: Foo; //~ ERROR\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Foo` is not implemented for `i32`\n+   |\n+   = help: see issue #48214\n+   = help: add #![feature(trivial_bounds)] to the crate attributes to enable\n+\n+error[E0277]: the trait bound `i32: Foo` is not satisfied\n+  --> $DIR/feature-gate-trivial_bounds.rs:24:1\n+   |\n+LL | trait T where i32: Foo {} //~ ERROR\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Foo` is not implemented for `i32`\n+   |\n+   = help: see issue #48214\n+   = help: add #![feature(trivial_bounds)] to the crate attributes to enable\n+\n+error[E0277]: the trait bound `i32: Foo` is not satisfied\n+  --> $DIR/feature-gate-trivial_bounds.rs:26:1\n+   |\n+LL | union U where i32: Foo { f: i32 } //~ ERROR\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Foo` is not implemented for `i32`\n+   |\n+   = help: see issue #48214\n+   = help: add #![feature(trivial_bounds)] to the crate attributes to enable\n+\n+error[E0277]: the trait bound `i32: Foo` is not satisfied\n+  --> $DIR/feature-gate-trivial_bounds.rs:30:1\n+   |\n+LL | / impl Foo for () where i32: Foo { //~ ERROR\n+LL | |     fn test(&self) {\n+LL | |         3i32.test();\n+LL | |         Foo::test(&4i32);\n+LL | |         generic_function(5i32);\n+LL | |     }\n+LL | | }\n+   | |_^ the trait `Foo` is not implemented for `i32`\n+   |\n+   = help: see issue #48214\n+   = help: add #![feature(trivial_bounds)] to the crate attributes to enable\n+\n+error[E0277]: the trait bound `i32: Foo` is not satisfied\n+  --> $DIR/feature-gate-trivial_bounds.rs:38:1\n+   |\n+LL | / fn f() where i32: Foo //~ ERROR\n+LL | | {\n+LL | |     let s = S;\n+LL | |     3i32.test();\n+LL | |     Foo::test(&4i32);\n+LL | |     generic_function(5i32);\n+LL | | }\n+   | |_^ the trait `Foo` is not implemented for `i32`\n+   |\n+   = help: see issue #48214\n+   = help: add #![feature(trivial_bounds)] to the crate attributes to enable\n+\n+error[E0277]: the trait bound `std::string::String: std::ops::Neg` is not satisfied\n+  --> $DIR/feature-gate-trivial_bounds.rs:46:1\n+   |\n+LL | / fn use_op(s: String) -> String where String: ::std::ops::Neg<Output=String> { //~ ERROR\n+LL | |     -s\n+LL | | }\n+   | |_^ the trait `std::ops::Neg` is not implemented for `std::string::String`\n+   |\n+   = help: see issue #48214\n+   = help: add #![feature(trivial_bounds)] to the crate attributes to enable\n+\n+error[E0277]: the trait bound `i32: std::iter::Iterator` is not satisfied\n+  --> $DIR/feature-gate-trivial_bounds.rs:50:1\n+   |\n+LL | / fn use_for() where i32: Iterator { //~ ERROR\n+LL | |     for _ in 2i32 {}\n+LL | | }\n+   | |_^ `i32` is not an iterator; maybe try calling `.iter()` or a similar method\n+   |\n+   = help: the trait `std::iter::Iterator` is not implemented for `i32`\n+   = help: see issue #48214\n+   = help: add #![feature(trivial_bounds)] to the crate attributes to enable\n+\n+error[E0277]: the trait bound `str: std::marker::Sized` is not satisfied\n+  --> $DIR/feature-gate-trivial_bounds.rs:62:1\n+   |\n+LL | struct TwoStrs(str, str) where str: Sized; //~ ERROR\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `str` does not have a constant size known at compile-time\n+   |\n+   = help: the trait `std::marker::Sized` is not implemented for `str`\n+   = help: see issue #48214\n+   = help: add #![feature(trivial_bounds)] to the crate attributes to enable\n+\n+error[E0277]: the trait bound `A + 'static: std::marker::Sized` is not satisfied in `Dst<A + 'static>`\n+  --> $DIR/feature-gate-trivial_bounds.rs:64:1\n+   |\n+LL | / fn unsized_local() where Dst<A>: Sized { //~ ERROR\n+LL | |     let x: Dst<A> = *(Box::new(Dst { x: 1 }) as Box<Dst<A>>);\n+LL | | }\n+   | |_^ `A + 'static` does not have a constant size known at compile-time\n+   |\n+   = help: within `Dst<A + 'static>`, the trait `std::marker::Sized` is not implemented for `A + 'static`\n+   = note: required because it appears within the type `Dst<A + 'static>`\n+   = help: see issue #48214\n+   = help: add #![feature(trivial_bounds)] to the crate attributes to enable\n+\n+error[E0277]: the trait bound `str: std::marker::Sized` is not satisfied\n+  --> $DIR/feature-gate-trivial_bounds.rs:68:1\n+   |\n+LL | / fn return_str() -> str where str: Sized { //~ ERROR\n+LL | |     *\"Sized\".to_string().into_boxed_str()\n+LL | | }\n+   | |_^ `str` does not have a constant size known at compile-time\n+   |\n+   = help: the trait `std::marker::Sized` is not implemented for `str`\n+   = help: see issue #48214\n+   = help: add #![feature(trivial_bounds)] to the crate attributes to enable\n+\n+error: aborting due to 11 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "937266d6d55735ef09906485dbb5bd3723bf9163", "filename": "src/test/ui/issue-48728.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/448cc578a903730d422f6e638641787d0dbd7bc7/src%2Ftest%2Fui%2Fissue-48728.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/448cc578a903730d422f6e638641787d0dbd7bc7/src%2Ftest%2Fui%2Fissue-48728.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-48728.stderr?ref=448cc578a903730d422f6e638641787d0dbd7bc7", "patch": "@@ -6,6 +6,8 @@ LL | #[derive(Clone)] //~ ERROR conflicting implementations of trait `std::clone\n ...\n LL | impl<T: Clone + ?Sized> Clone for Node<[T]> {\n    | ------------------------------------------- first implementation here\n+   |\n+   = note: upstream crates may add new impl of trait `std::clone::Clone` for type `[_]` in future versions\n \n error: aborting due to previous error\n "}, {"sha": "49c9df95bc7720d347463c32d4e921351cdc5bd2", "filename": "src/test/ui/trivial-bounds-inconsistent-associated-functions.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/448cc578a903730d422f6e638641787d0dbd7bc7/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-associated-functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/448cc578a903730d422f6e638641787d0dbd7bc7/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-associated-functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-associated-functions.rs?ref=448cc578a903730d422f6e638641787d0dbd7bc7", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// run-pass\n+// Inconsistent bounds with trait implementations\n+\n+#![feature(trivial_bounds)]\n+#![allow(unused)]\n+\n+trait A {\n+    fn foo(&self) -> Self where Self: Copy;\n+}\n+\n+impl A for str {\n+    fn foo(&self) -> Self where Self: Copy { *\"\" }\n+}\n+\n+impl A for i32 {\n+    fn foo(&self) -> Self { 3 }\n+}\n+\n+fn main() {}"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "src/test/ui/trivial-bounds-inconsistent-associated-functions.stderr", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/448cc578a903730d422f6e638641787d0dbd7bc7/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-associated-functions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/448cc578a903730d422f6e638641787d0dbd7bc7/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-associated-functions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-associated-functions.stderr?ref=448cc578a903730d422f6e638641787d0dbd7bc7"}, {"sha": "66547863db2fd2c8eecc7815c7e916872ef82996", "filename": "src/test/ui/trivial-bounds-inconsistent-copy-reborrow.nll.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/448cc578a903730d422f6e638641787d0dbd7bc7/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-copy-reborrow.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/448cc578a903730d422f6e638641787d0dbd7bc7/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-copy-reborrow.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-copy-reborrow.nll.stderr?ref=448cc578a903730d422f6e638641787d0dbd7bc7", "patch": "@@ -0,0 +1,19 @@\n+error[E0596]: cannot borrow immutable item `**t` as mutable\n+  --> $DIR/trivial-bounds-inconsistent-copy-reborrow.rs:16:5\n+   |\n+LL |     *t //~ ERROR\n+   |     ^^ cannot borrow as mutable\n+   |\n+   = note: the value which is causing this path not to be mutable is...: `*t`\n+\n+error[E0596]: cannot borrow immutable item `**t` as mutable\n+  --> $DIR/trivial-bounds-inconsistent-copy-reborrow.rs:20:6\n+   |\n+LL |     {*t} //~ ERROR\n+   |      ^^ cannot borrow as mutable\n+   |\n+   = note: the value which is causing this path not to be mutable is...: `*t`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0596`."}, {"sha": "2c4d9d813856c857d416fb660ffa5efdc0b97777", "filename": "src/test/ui/trivial-bounds-inconsistent-copy-reborrow.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/448cc578a903730d422f6e638641787d0dbd7bc7/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-copy-reborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/448cc578a903730d422f6e638641787d0dbd7bc7/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-copy-reborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-copy-reborrow.rs?ref=448cc578a903730d422f6e638641787d0dbd7bc7", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check that reborrows are still illegal with Copy mutable references\n+#![feature(trivial_bounds)]\n+#![allow(unused)]\n+\n+fn reborrow_mut<'a>(t: &'a &'a mut i32) -> &'a mut i32 where &'a mut i32: Copy {\n+    *t //~ ERROR\n+}\n+\n+fn copy_reborrow_mut<'a>(t: &'a &'a mut i32) -> &'a mut i32 where &'a mut i32: Copy {\n+    {*t} //~ ERROR\n+}\n+\n+fn main() {}"}, {"sha": "bea2bb66857f2971961a5b79488624bb28296b47", "filename": "src/test/ui/trivial-bounds-inconsistent-copy-reborrow.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/448cc578a903730d422f6e638641787d0dbd7bc7/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-copy-reborrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/448cc578a903730d422f6e638641787d0dbd7bc7/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-copy-reborrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-copy-reborrow.stderr?ref=448cc578a903730d422f6e638641787d0dbd7bc7", "patch": "@@ -0,0 +1,19 @@\n+error[E0389]: cannot borrow data mutably in a `&` reference\n+  --> $DIR/trivial-bounds-inconsistent-copy-reborrow.rs:16:5\n+   |\n+LL | fn reborrow_mut<'a>(t: &'a &'a mut i32) -> &'a mut i32 where &'a mut i32: Copy {\n+   |                        --------------- use `&'a mut &'a mut i32` here to make mutable\n+LL |     *t //~ ERROR\n+   |     ^^ assignment into an immutable reference\n+\n+error[E0389]: cannot borrow data mutably in a `&` reference\n+  --> $DIR/trivial-bounds-inconsistent-copy-reborrow.rs:20:6\n+   |\n+LL | fn copy_reborrow_mut<'a>(t: &'a &'a mut i32) -> &'a mut i32 where &'a mut i32: Copy {\n+   |                             --------------- use `&'a mut &'a mut i32` here to make mutable\n+LL |     {*t} //~ ERROR\n+   |      ^^ assignment into an immutable reference\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0389`."}, {"sha": "375885a02c75a56f70217508cae3ece7b8558754", "filename": "src/test/ui/trivial-bounds-inconsistent-copy.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/448cc578a903730d422f6e638641787d0dbd7bc7/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/448cc578a903730d422f6e638641787d0dbd7bc7/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-copy.rs?ref=448cc578a903730d422f6e638641787d0dbd7bc7", "patch": "@@ -0,0 +1,43 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// run-pass\n+// Check tautalogically false `Copy` bounds\n+#![feature(trivial_bounds)]\n+#![allow(unused)]\n+\n+fn copy_string(t: String) -> String where String: Copy {\n+    is_copy(&t);\n+    let x = t;\n+    drop(t);\n+    t\n+}\n+\n+fn copy_out_string(t: &String) -> String where String: Copy {\n+    *t\n+}\n+\n+fn copy_string_with_param<T>(x: String) where String: Copy {\n+    let y = x;\n+    let z = x;\n+}\n+\n+// Check that no reborrowing occurs\n+fn copy_mut<'a>(t: &&'a mut i32) -> &'a mut i32 where for<'b> &'b mut i32: Copy {\n+    is_copy(t);\n+    let x = *t;\n+    drop(x);\n+    x\n+}\n+\n+fn is_copy<T: Copy>(t: &T) {}\n+\n+\n+fn main() {}"}, {"sha": "ae639005756118826cad4408855dafd731fd22c6", "filename": "src/test/ui/trivial-bounds-inconsistent-copy.stderr", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/448cc578a903730d422f6e638641787d0dbd7bc7/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/448cc578a903730d422f6e638641787d0dbd7bc7/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-copy.stderr?ref=448cc578a903730d422f6e638641787d0dbd7bc7", "patch": "@@ -0,0 +1,41 @@\n+warning: Trait bound std::string::String: std::marker::Copy does not depend on any type or lifetime parameters\n+  --> $DIR/trivial-bounds-inconsistent-copy.rs:16:1\n+   |\n+LL | / fn copy_string(t: String) -> String where String: Copy {\n+LL | |     is_copy(&t);\n+LL | |     let x = t;\n+LL | |     drop(t);\n+LL | |     t\n+LL | | }\n+   | |_^\n+   |\n+   = note: #[warn(trivial_bounds)] on by default\n+\n+warning: Trait bound std::string::String: std::marker::Copy does not depend on any type or lifetime parameters\n+  --> $DIR/trivial-bounds-inconsistent-copy.rs:23:1\n+   |\n+LL | / fn copy_out_string(t: &String) -> String where String: Copy {\n+LL | |     *t\n+LL | | }\n+   | |_^\n+\n+warning: Trait bound std::string::String: std::marker::Copy does not depend on any type or lifetime parameters\n+  --> $DIR/trivial-bounds-inconsistent-copy.rs:27:1\n+   |\n+LL | / fn copy_string_with_param<T>(x: String) where String: Copy {\n+LL | |     let y = x;\n+LL | |     let z = x;\n+LL | | }\n+   | |_^\n+\n+warning: Trait bound for<'b> &'b mut i32: std::marker::Copy does not depend on any type or lifetime parameters\n+  --> $DIR/trivial-bounds-inconsistent-copy.rs:33:1\n+   |\n+LL | / fn copy_mut<'a>(t: &&'a mut i32) -> &'a mut i32 where for<'b> &'b mut i32: Copy {\n+LL | |     is_copy(t);\n+LL | |     let x = *t;\n+LL | |     drop(x);\n+LL | |     x\n+LL | | }\n+   | |_^\n+"}, {"sha": "14ba11c44de138639e830677d847907c29556f50", "filename": "src/test/ui/trivial-bounds-inconsistent-sized.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/448cc578a903730d422f6e638641787d0dbd7bc7/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-sized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/448cc578a903730d422f6e638641787d0dbd7bc7/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-sized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-sized.rs?ref=448cc578a903730d422f6e638641787d0dbd7bc7", "patch": "@@ -0,0 +1,34 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// run-pass\n+// Check tautalogically false `Sized` bounds\n+#![feature(trivial_bounds)]\n+#![allow(unused)]\n+\n+trait A {}\n+\n+impl A for i32 {}\n+\n+struct T<X: ?Sized> {\n+    x: X,\n+}\n+\n+struct S(str, str) where str: Sized;\n+\n+fn unsized_local() where for<'a> T<A + 'a>: Sized {\n+    let x: T<A> = *(Box::new(T { x: 1 }) as Box<T<A>>);\n+}\n+\n+fn return_str() -> str where str: Sized {\n+    *\"Sized\".to_string().into_boxed_str()\n+}\n+\n+fn main() {}"}, {"sha": "ee2ff7d7861396d5353f2b5e9817e1ca389b2fd1", "filename": "src/test/ui/trivial-bounds-inconsistent-sized.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/448cc578a903730d422f6e638641787d0dbd7bc7/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-sized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/448cc578a903730d422f6e638641787d0dbd7bc7/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-sized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-sized.stderr?ref=448cc578a903730d422f6e638641787d0dbd7bc7", "patch": "@@ -0,0 +1,24 @@\n+warning: Trait bound str: std::marker::Sized does not depend on any type or lifetime parameters\n+  --> $DIR/trivial-bounds-inconsistent-sized.rs:24:1\n+   |\n+LL | struct S(str, str) where str: Sized;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[warn(trivial_bounds)] on by default\n+\n+warning: Trait bound for<'a> T<A + 'a>: std::marker::Sized does not depend on any type or lifetime parameters\n+  --> $DIR/trivial-bounds-inconsistent-sized.rs:26:1\n+   |\n+LL | / fn unsized_local() where for<'a> T<A + 'a>: Sized {\n+LL | |     let x: T<A> = *(Box::new(T { x: 1 }) as Box<T<A>>);\n+LL | | }\n+   | |_^\n+\n+warning: Trait bound str: std::marker::Sized does not depend on any type or lifetime parameters\n+  --> $DIR/trivial-bounds-inconsistent-sized.rs:30:1\n+   |\n+LL | / fn return_str() -> str where str: Sized {\n+LL | |     *\"Sized\".to_string().into_boxed_str()\n+LL | | }\n+   | |_^\n+"}, {"sha": "5fcdbfc437a81387c402e1d05f9f6337af34d916", "filename": "src/test/ui/trivial-bounds-inconsistent-well-formed.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/448cc578a903730d422f6e638641787d0dbd7bc7/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-well-formed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/448cc578a903730d422f6e638641787d0dbd7bc7/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-well-formed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-well-formed.rs?ref=448cc578a903730d422f6e638641787d0dbd7bc7", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// run-pass\n+// Test that inconsistent bounds are used in well-formedness checks\n+#![feature(trivial_bounds)]\n+\n+use std::fmt::Debug;\n+\n+pub fn foo() where Vec<str>: Debug, str: Copy {\n+    let x = vec![*\"1\"];\n+    println!(\"{:?}\", x);\n+}\n+\n+fn main() {}"}, {"sha": "b51ecd49900712badeaa4feaf79983d5b8f92677", "filename": "src/test/ui/trivial-bounds-inconsistent-well-formed.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/448cc578a903730d422f6e638641787d0dbd7bc7/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-well-formed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/448cc578a903730d422f6e638641787d0dbd7bc7/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-well-formed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-well-formed.stderr?ref=448cc578a903730d422f6e638641787d0dbd7bc7", "patch": "@@ -0,0 +1,20 @@\n+warning: Trait bound std::vec::Vec<str>: std::fmt::Debug does not depend on any type or lifetime parameters\n+  --> $DIR/trivial-bounds-inconsistent-well-formed.rs:17:1\n+   |\n+LL | / pub fn foo() where Vec<str>: Debug, str: Copy {\n+LL | |     let x = vec![*\"1\"];\n+LL | |     println!(\"{:?}\", x);\n+LL | | }\n+   | |_^\n+   |\n+   = note: #[warn(trivial_bounds)] on by default\n+\n+warning: Trait bound str: std::marker::Copy does not depend on any type or lifetime parameters\n+  --> $DIR/trivial-bounds-inconsistent-well-formed.rs:17:1\n+   |\n+LL | / pub fn foo() where Vec<str>: Debug, str: Copy {\n+LL | |     let x = vec![*\"1\"];\n+LL | |     println!(\"{:?}\", x);\n+LL | | }\n+   | |_^\n+"}, {"sha": "2c8b873b8c9462db590283b28bf0778bd62ac0e4", "filename": "src/test/ui/trivial-bounds-inconsistent.rs", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/448cc578a903730d422f6e638641787d0dbd7bc7/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/448cc578a903730d422f6e638641787d0dbd7bc7/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent.rs?ref=448cc578a903730d422f6e638641787d0dbd7bc7", "patch": "@@ -0,0 +1,81 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// run-pass\n+\n+// Check that tautalogically false bounds are accepted, and are used\n+// in type inference.\n+#![feature(trivial_bounds)]\n+#![allow(unused)]\n+\n+pub trait Foo {\n+    fn test(&self);\n+}\n+\n+fn generic_function<X: Foo>(x: X) {}\n+\n+enum E where i32: Foo { V }\n+\n+struct S where i32: Foo;\n+\n+trait T where i32: Foo {}\n+\n+union U where i32: Foo { f: i32 }\n+\n+type Y where i32: Foo = ();\n+\n+impl Foo for () where i32: Foo {\n+    fn test(&self) {\n+        3i32.test();\n+        Foo::test(&4i32);\n+        generic_function(5i32);\n+    }\n+}\n+\n+fn f() where i32: Foo {\n+    let s = S;\n+    3i32.test();\n+    Foo::test(&4i32);\n+    generic_function(5i32);\n+}\n+\n+fn g() where &'static str: Foo {\n+    \"Foo\".test();\n+    Foo::test(&\"Foo\");\n+    generic_function(\"Foo\");\n+}\n+\n+trait A {}\n+\n+impl A for i32 {}\n+\n+struct Dst<X: ?Sized> {\n+    x: X,\n+}\n+\n+struct TwoStrs(str, str) where str: Sized;\n+\n+fn unsized_local() where for<'a> Dst<A + 'a>: Sized {\n+    let x: Dst<A> = *(Box::new(Dst { x: 1 }) as Box<Dst<A>>);\n+}\n+\n+fn return_str() -> str where str: Sized {\n+    *\"Sized\".to_string().into_boxed_str()\n+}\n+\n+fn use_op(s: String) -> String where String: ::std::ops::Neg<Output=String> {\n+    -s\n+}\n+\n+fn use_for() where i32: Iterator {\n+    for _ in 2i32 {}\n+}\n+\n+fn main() {}"}, {"sha": "ee3c7518294773e9dfee69b672440a4c2cbee720", "filename": "src/test/ui/trivial-bounds-inconsistent.stderr", "status": "added", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/448cc578a903730d422f6e638641787d0dbd7bc7/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/448cc578a903730d422f6e638641787d0dbd7bc7/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent.stderr?ref=448cc578a903730d422f6e638641787d0dbd7bc7", "patch": "@@ -0,0 +1,112 @@\n+warning: Trait bound i32: Foo does not depend on any type or lifetime parameters\n+  --> $DIR/trivial-bounds-inconsistent.rs:24:1\n+   |\n+LL | enum E where i32: Foo { V }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[warn(trivial_bounds)] on by default\n+\n+warning: Trait bound i32: Foo does not depend on any type or lifetime parameters\n+  --> $DIR/trivial-bounds-inconsistent.rs:26:1\n+   |\n+LL | struct S where i32: Foo;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: Trait bound i32: Foo does not depend on any type or lifetime parameters\n+  --> $DIR/trivial-bounds-inconsistent.rs:28:1\n+   |\n+LL | trait T where i32: Foo {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: Trait bound i32: Foo does not depend on any type or lifetime parameters\n+  --> $DIR/trivial-bounds-inconsistent.rs:30:1\n+   |\n+LL | union U where i32: Foo { f: i32 }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: where clauses are not enforced in type aliases\n+  --> $DIR/trivial-bounds-inconsistent.rs:32:14\n+   |\n+LL | type Y where i32: Foo = ();\n+   |              ^^^^^^^^\n+   |\n+   = note: #[warn(type_alias_bounds)] on by default\n+   = help: the clause will not be checked when the type alias is used, and should be removed\n+\n+warning: Trait bound i32: Foo does not depend on any type or lifetime parameters\n+  --> $DIR/trivial-bounds-inconsistent.rs:32:1\n+   |\n+LL | type Y where i32: Foo = ();\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: Trait bound i32: Foo does not depend on any type or lifetime parameters\n+  --> $DIR/trivial-bounds-inconsistent.rs:34:1\n+   |\n+LL | / impl Foo for () where i32: Foo {\n+LL | |     fn test(&self) {\n+LL | |         3i32.test();\n+LL | |         Foo::test(&4i32);\n+LL | |         generic_function(5i32);\n+LL | |     }\n+LL | | }\n+   | |_^\n+\n+warning: Trait bound i32: Foo does not depend on any type or lifetime parameters\n+  --> $DIR/trivial-bounds-inconsistent.rs:42:1\n+   |\n+LL | / fn f() where i32: Foo {\n+LL | |     let s = S;\n+LL | |     3i32.test();\n+LL | |     Foo::test(&4i32);\n+LL | |     generic_function(5i32);\n+LL | | }\n+   | |_^\n+\n+warning: Trait bound &'static str: Foo does not depend on any type or lifetime parameters\n+  --> $DIR/trivial-bounds-inconsistent.rs:49:1\n+   |\n+LL | / fn g() where &'static str: Foo {\n+LL | |     \"Foo\".test();\n+LL | |     Foo::test(&\"Foo\");\n+LL | |     generic_function(\"Foo\");\n+LL | | }\n+   | |_^\n+\n+warning: Trait bound str: std::marker::Sized does not depend on any type or lifetime parameters\n+  --> $DIR/trivial-bounds-inconsistent.rs:63:1\n+   |\n+LL | struct TwoStrs(str, str) where str: Sized;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: Trait bound for<'a> Dst<A + 'a>: std::marker::Sized does not depend on any type or lifetime parameters\n+  --> $DIR/trivial-bounds-inconsistent.rs:65:1\n+   |\n+LL | / fn unsized_local() where for<'a> Dst<A + 'a>: Sized {\n+LL | |     let x: Dst<A> = *(Box::new(Dst { x: 1 }) as Box<Dst<A>>);\n+LL | | }\n+   | |_^\n+\n+warning: Trait bound str: std::marker::Sized does not depend on any type or lifetime parameters\n+  --> $DIR/trivial-bounds-inconsistent.rs:69:1\n+   |\n+LL | / fn return_str() -> str where str: Sized {\n+LL | |     *\"Sized\".to_string().into_boxed_str()\n+LL | | }\n+   | |_^\n+\n+warning: Trait bound std::string::String: std::ops::Neg does not depend on any type or lifetime parameters\n+  --> $DIR/trivial-bounds-inconsistent.rs:73:1\n+   |\n+LL | / fn use_op(s: String) -> String where String: ::std::ops::Neg<Output=String> {\n+LL | |     -s\n+LL | | }\n+   | |_^\n+\n+warning: Trait bound i32: std::iter::Iterator does not depend on any type or lifetime parameters\n+  --> $DIR/trivial-bounds-inconsistent.rs:77:1\n+   |\n+LL | / fn use_for() where i32: Iterator {\n+LL | |     for _ in 2i32 {}\n+LL | | }\n+   | |_^\n+"}, {"sha": "9850ec2bd1fc0b8e946cac2c9375cdd92d96cecd", "filename": "src/test/ui/trivial-bounds-leak-copy.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/448cc578a903730d422f6e638641787d0dbd7bc7/src%2Ftest%2Fui%2Ftrivial-bounds-leak-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/448cc578a903730d422f6e638641787d0dbd7bc7/src%2Ftest%2Fui%2Ftrivial-bounds-leak-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds-leak-copy.rs?ref=448cc578a903730d422f6e638641787d0dbd7bc7", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check that false Copy bounds don't leak\n+#![feature(trivial_bounds)]\n+\n+fn copy_out_string(t: &String) -> String where String: Copy {\n+    *t\n+}\n+\n+fn move_out_string(t: &String) -> String {\n+    *t //~ ERROR\n+}\n+\n+fn main() {}"}, {"sha": "3c3fcbf9b803c8642cf0526dfec27a4a28b15eee", "filename": "src/test/ui/trivial-bounds-leak-copy.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/448cc578a903730d422f6e638641787d0dbd7bc7/src%2Ftest%2Fui%2Ftrivial-bounds-leak-copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/448cc578a903730d422f6e638641787d0dbd7bc7/src%2Ftest%2Fui%2Ftrivial-bounds-leak-copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds-leak-copy.stderr?ref=448cc578a903730d422f6e638641787d0dbd7bc7", "patch": "@@ -0,0 +1,9 @@\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/trivial-bounds-leak-copy.rs:19:5\n+   |\n+LL |     *t //~ ERROR\n+   |     ^^ cannot move out of borrowed content\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0507`."}, {"sha": "98cb5b2b503325f9e37cfaccae68bca781cca798", "filename": "src/test/ui/trivial-bounds-leak.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/448cc578a903730d422f6e638641787d0dbd7bc7/src%2Ftest%2Fui%2Ftrivial-bounds-leak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/448cc578a903730d422f6e638641787d0dbd7bc7/src%2Ftest%2Fui%2Ftrivial-bounds-leak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds-leak.rs?ref=448cc578a903730d422f6e638641787d0dbd7bc7", "patch": "@@ -0,0 +1,42 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check that false bounds don't leak\n+#![feature(trivial_bounds)]\n+\n+pub trait Foo {\n+    fn test(&self);\n+}\n+\n+fn return_str() -> str where str: Sized {\n+    *\"Sized\".to_string().into_boxed_str()\n+}\n+\n+fn cant_return_str() -> str { //~ ERROR\n+    *\"Sized\".to_string().into_boxed_str()\n+}\n+\n+fn my_function() where i32: Foo\n+{\n+    3i32.test();\n+    Foo::test(&4i32);\n+    generic_function(5i32);\n+}\n+\n+fn foo() {\n+    3i32.test(); //~ ERROR\n+    Foo::test(&4i32); //~ ERROR\n+    generic_function(5i32); //~ ERROR\n+}\n+\n+fn generic_function<T: Foo>(t: T) {}\n+\n+fn main() {}\n+"}, {"sha": "df91ba0dd2ac5b2b6513be46ab98f5a5b9909f3d", "filename": "src/test/ui/trivial-bounds-leak.stderr", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/448cc578a903730d422f6e638641787d0dbd7bc7/src%2Ftest%2Fui%2Ftrivial-bounds-leak.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/448cc578a903730d422f6e638641787d0dbd7bc7/src%2Ftest%2Fui%2Ftrivial-bounds-leak.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds-leak.stderr?ref=448cc578a903730d422f6e638641787d0dbd7bc7", "patch": "@@ -0,0 +1,47 @@\n+error[E0277]: the trait bound `str: std::marker::Sized` is not satisfied\n+  --> $DIR/trivial-bounds-leak.rs:22:25\n+   |\n+LL | fn cant_return_str() -> str { //~ ERROR\n+   |                         ^^^ `str` does not have a constant size known at compile-time\n+   |\n+   = help: the trait `std::marker::Sized` is not implemented for `str`\n+   = note: the return type of a function must have a statically known size\n+\n+error[E0599]: no method named `test` found for type `i32` in the current scope\n+  --> $DIR/trivial-bounds-leak.rs:34:10\n+   |\n+LL |     3i32.test(); //~ ERROR\n+   |          ^^^^\n+   |\n+   = help: items from traits can only be used if the trait is implemented and in scope\n+   = note: the following trait defines an item `test`, perhaps you need to implement it:\n+           candidate #1: `Foo`\n+\n+error[E0277]: the trait bound `i32: Foo` is not satisfied\n+  --> $DIR/trivial-bounds-leak.rs:35:5\n+   |\n+LL |     Foo::test(&4i32); //~ ERROR\n+   |     ^^^^^^^^^ the trait `Foo` is not implemented for `i32`\n+   |\n+note: required by `Foo::test`\n+  --> $DIR/trivial-bounds-leak.rs:15:5\n+   |\n+LL |     fn test(&self);\n+   |     ^^^^^^^^^^^^^^^\n+\n+error[E0277]: the trait bound `i32: Foo` is not satisfied\n+  --> $DIR/trivial-bounds-leak.rs:36:5\n+   |\n+LL |     generic_function(5i32); //~ ERROR\n+   |     ^^^^^^^^^^^^^^^^ the trait `Foo` is not implemented for `i32`\n+   |\n+note: required by `generic_function`\n+  --> $DIR/trivial-bounds-leak.rs:39:1\n+   |\n+LL | fn generic_function<T: Foo>(t: T) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 4 previous errors\n+\n+Some errors occurred: E0277, E0599.\n+For more information about an error, try `rustc --explain E0277`."}, {"sha": "e6988cb9f8bfe5689007c40e7d80469be4967983", "filename": "src/test/ui/trivial-bounds-lint.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/448cc578a903730d422f6e638641787d0dbd7bc7/src%2Ftest%2Fui%2Ftrivial-bounds-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/448cc578a903730d422f6e638641787d0dbd7bc7/src%2Ftest%2Fui%2Ftrivial-bounds-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds-lint.rs?ref=448cc578a903730d422f6e638641787d0dbd7bc7", "patch": "@@ -0,0 +1,50 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(trivial_bounds)]\n+#![allow(unused)]\n+#![deny(trivial_bounds)]\n+\n+struct A where i32: Copy; //~ ERROR\n+\n+trait X<T: Copy> {}\n+\n+trait Y<T>: Copy {}\n+\n+trait Z {\n+    type S: Copy;\n+}\n+\n+// Check only the bound the user writes trigger the lint\n+fn trivial_elaboration<T>() where T: X<i32> + Z<S = i32>, i32: Y<T> {} // OK\n+\n+fn global_param() where i32: X<()> {} //~ ERROR\n+\n+// Should only error on the trait bound, not the implicit\n+// projection bound <i32 as Z>::S == i32.\n+fn global_projection() where i32: Z<S = i32> {} //~ ERROR\n+\n+impl A {\n+    fn new() -> A { A }\n+}\n+\n+// Lifetime bounds should be linted as well\n+fn global_lifetimes() where i32: 'static, &'static str: 'static {}\n+//~^ ERROR\n+//~| ERROR\n+\n+fn local_lifetimes<'a>() where i32: 'a, &'a str: 'a {} // OK\n+\n+fn global_outlives() where 'static: 'static {} //~ ERROR\n+\n+// Check that each bound is checked individually\n+fn mixed_bounds<T: Copy>() where i32: X<T> + Copy {} //~ ERROR\n+\n+fn main() {}"}, {"sha": "6a3e1981025cf7c8c34b10c011f93d75a3887ac6", "filename": "src/test/ui/trivial-bounds-lint.stderr", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/448cc578a903730d422f6e638641787d0dbd7bc7/src%2Ftest%2Fui%2Ftrivial-bounds-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/448cc578a903730d422f6e638641787d0dbd7bc7/src%2Ftest%2Fui%2Ftrivial-bounds-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds-lint.stderr?ref=448cc578a903730d422f6e638641787d0dbd7bc7", "patch": "@@ -0,0 +1,50 @@\n+error: Trait bound i32: std::marker::Copy does not depend on any type or lifetime parameters\n+  --> $DIR/trivial-bounds-lint.rs:15:1\n+   |\n+LL | struct A where i32: Copy; //~ ERROR\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/trivial-bounds-lint.rs:13:9\n+   |\n+LL | #![deny(trivial_bounds)]\n+   |         ^^^^^^^^^^^^^^\n+\n+error: Trait bound i32: X<()> does not depend on any type or lifetime parameters\n+  --> $DIR/trivial-bounds-lint.rs:28:1\n+   |\n+LL | fn global_param() where i32: X<()> {} //~ ERROR\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: Trait bound i32: Z does not depend on any type or lifetime parameters\n+  --> $DIR/trivial-bounds-lint.rs:32:1\n+   |\n+LL | fn global_projection() where i32: Z<S = i32> {} //~ ERROR\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: Lifetime bound i32 : 'static does not depend on any type or lifetime parameters\n+  --> $DIR/trivial-bounds-lint.rs:39:1\n+   |\n+LL | fn global_lifetimes() where i32: 'static, &'static str: 'static {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: Lifetime bound &'static str : 'static does not depend on any type or lifetime parameters\n+  --> $DIR/trivial-bounds-lint.rs:39:1\n+   |\n+LL | fn global_lifetimes() where i32: 'static, &'static str: 'static {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: Lifetime bound 'static : 'static does not depend on any type or lifetime parameters\n+  --> $DIR/trivial-bounds-lint.rs:45:1\n+   |\n+LL | fn global_outlives() where 'static: 'static {} //~ ERROR\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: Trait bound i32: std::marker::Copy does not depend on any type or lifetime parameters\n+  --> $DIR/trivial-bounds-lint.rs:48:1\n+   |\n+LL | fn mixed_bounds<T: Copy>() where i32: X<T> + Copy {} //~ ERROR\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 7 previous errors\n+"}]}