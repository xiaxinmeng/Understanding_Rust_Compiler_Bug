{"sha": "789b4d1a4f9a4c0cfbce51f0939b5ec322abca0c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4OWI0ZDFhNGY5YTRjMGNmYmNlNTFmMDkzOWI1ZWMzMjJhYmNhMGM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-04T10:11:39Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-04T10:11:39Z"}, "message": "typos", "tree": {"sha": "cc9bb1a4f3e29ba73244607595cff9f2c5951f9a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc9bb1a4f3e29ba73244607595cff9f2c5951f9a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/789b4d1a4f9a4c0cfbce51f0939b5ec322abca0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/789b4d1a4f9a4c0cfbce51f0939b5ec322abca0c", "html_url": "https://github.com/rust-lang/rust/commit/789b4d1a4f9a4c0cfbce51f0939b5ec322abca0c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/789b4d1a4f9a4c0cfbce51f0939b5ec322abca0c/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8c7d8dc8e8f779e6468e83f79456ed1916a93d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8c7d8dc8e8f779e6468e83f79456ed1916a93d7", "html_url": "https://github.com/rust-lang/rust/commit/f8c7d8dc8e8f779e6468e83f79456ed1916a93d7"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "68f985ce65202b9eb5df0f739a26959489096d95", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/789b4d1a4f9a4c0cfbce51f0939b5ec322abca0c/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/789b4d1a4f9a4c0cfbce51f0939b5ec322abca0c/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=789b4d1a4f9a4c0cfbce51f0939b5ec322abca0c", "patch": "@@ -1047,15 +1047,15 @@ impl<T: ?Sized> DerefMut for ManuallyDrop<T> {\n ///\n /// let x: &i32 = mem::zeroed(); // undefined behavior!\n /// ```\n-/// This is exploitet by the compiler for various optimizations, such as eliding\n+/// This is exploited by the compiler for various optimizations, such as eliding\n /// run-time checks and optimizing `enum` layout.\n ///\n /// Not initializing memory at all (instead of 0-initializing it) causes the same\n /// issue: after all, the initial value of the variable might just happen to be\n /// one that violates the invariant.\n ///\n /// `MaybeUninit` serves to enable unsafe code to deal with uninitialized data:\n-/// it is a signal to the compiler indicating that the data here may *not*\n+/// it is a signal to the compiler indicating that the data here might *not*\n /// be initialized:\n /// ```rust\n /// use std::mem::MaybeUninit;"}]}