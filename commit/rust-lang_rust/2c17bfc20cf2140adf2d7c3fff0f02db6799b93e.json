{"sha": "2c17bfc20cf2140adf2d7c3fff0f02db6799b93e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjMTdiZmMyMGNmMjE0MGFkZjJkN2MzZmZmMGYwMmRiNjc5OWI5M2U=", "commit": {"author": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2015-09-18T13:46:58Z"}, "committer": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2015-09-18T13:46:58Z"}, "message": "Skip no-op adjustments in trans\n\nThat allows us to keep using trans_into() in case of adjustments that\nmay actually be ignored in trans because they are a plain deref/ref pair\nwith no overloaded deref or unsizing.\n\nUnoptimized(!) benchmarks from servo/servo#7638\n\nBefore\n```\ntest goser::bench_clone                          ... bench:      17,701 ns/iter (+/- 58) = 30 MB/s\ntest goser::bincode::bench_decoder               ... bench:      33,715 ns/iter (+/- 300) = 11 MB/s\ntest goser::bincode::bench_deserialize           ... bench:      36,804 ns/iter (+/- 329) = 9 MB/s\ntest goser::bincode::bench_encoder               ... bench:      34,695 ns/iter (+/- 149) = 11 MB/s\ntest goser::bincode::bench_populate              ... bench:      18,879 ns/iter (+/- 88)\ntest goser::bincode::bench_serialize             ... bench:      31,668 ns/iter (+/- 156) = 11 MB/s\ntest goser::capnp::bench_deserialize             ... bench:       2,049 ns/iter (+/- 87) = 218 MB/s\ntest goser::capnp::bench_deserialize_packed      ... bench:      10,707 ns/iter (+/- 258) = 31 MB/s\ntest goser::capnp::bench_populate                ... bench:         635 ns/iter (+/- 5)\ntest goser::capnp::bench_serialize               ... bench:      35,657 ns/iter (+/- 155) = 12 MB/s\ntest goser::capnp::bench_serialize_packed        ... bench:      37,881 ns/iter (+/- 146) = 8 MB/s\ntest goser::msgpack::bench_decoder               ... bench:      50,634 ns/iter (+/- 307) = 5 MB/s\ntest goser::msgpack::bench_encoder               ... bench:      25,738 ns/iter (+/- 90) = 11 MB/s\ntest goser::msgpack::bench_populate              ... bench:      18,900 ns/iter (+/- 138)\ntest goser::protobuf::bench_decoder              ... bench:       2,791 ns/iter (+/- 29) = 102 MB/s\ntest goser::protobuf::bench_encoder              ... bench:      75,414 ns/iter (+/- 358) = 3 MB/s\ntest goser::protobuf::bench_populate             ... bench:      19,248 ns/iter (+/- 92)\ntest goser::rustc_serialize_json::bench_decoder  ... bench:     109,999 ns/iter (+/- 797) = 5 MB/s\ntest goser::rustc_serialize_json::bench_encoder  ... bench:      58,777 ns/iter (+/- 418) = 10 MB/s\ntest goser::rustc_serialize_json::bench_populate ... bench:      18,887 ns/iter (+/- 76)\ntest goser::serde_json::bench_deserializer       ... bench:     104,803 ns/iter (+/- 770) = 5 MB/s\ntest goser::serde_json::bench_populate           ... bench:      18,890 ns/iter (+/- 69)\ntest goser::serde_json::bench_serializer         ... bench:      75,046 ns/iter (+/- 435) = 8 MB/s\n```\n\nAfter\n```\ntest goser::bench_clone                          ... bench:      16,052 ns/iter (+/- 188) = 34 MB/s\ntest goser::bincode::bench_decoder               ... bench:      31,194 ns/iter (+/- 941) = 12 MB/s\ntest goser::bincode::bench_deserialize           ... bench:      33,934 ns/iter (+/- 352) = 10 MB/s\ntest goser::bincode::bench_encoder               ... bench:      30,737 ns/iter (+/- 1,969) = 13 MB/s\ntest goser::bincode::bench_populate              ... bench:      17,234 ns/iter (+/- 176)\ntest goser::bincode::bench_serialize             ... bench:      28,269 ns/iter (+/- 452) = 12 MB/s\ntest goser::capnp::bench_deserialize             ... bench:       2,019 ns/iter (+/- 85) = 221 MB/s\ntest goser::capnp::bench_deserialize_packed      ... bench:      10,662 ns/iter (+/- 527) = 31 MB/s\ntest goser::capnp::bench_populate                ... bench:         607 ns/iter (+/- 2)\ntest goser::capnp::bench_serialize               ... bench:      30,488 ns/iter (+/- 219) = 14 MB/s\ntest goser::capnp::bench_serialize_packed        ... bench:      33,731 ns/iter (+/- 201) = 9 MB/s\ntest goser::msgpack::bench_decoder               ... bench:      46,921 ns/iter (+/- 461) = 6 MB/s\ntest goser::msgpack::bench_encoder               ... bench:      22,315 ns/iter (+/- 96) = 12 MB/s\ntest goser::msgpack::bench_populate              ... bench:      17,268 ns/iter (+/- 73)\ntest goser::protobuf::bench_decoder              ... bench:       2,658 ns/iter (+/- 44) = 107 MB/s\ntest goser::protobuf::bench_encoder              ... bench:      71,024 ns/iter (+/- 359) = 4 MB/s\ntest goser::protobuf::bench_populate             ... bench:      17,704 ns/iter (+/- 104)\ntest goser::rustc_serialize_json::bench_decoder  ... bench:     107,867 ns/iter (+/- 759) = 5 MB/s\ntest goser::rustc_serialize_json::bench_encoder  ... bench:      52,327 ns/iter (+/- 479) = 11 MB/s\ntest goser::rustc_serialize_json::bench_populate ... bench:      17,262 ns/iter (+/- 68)\ntest goser::serde_json::bench_deserializer       ... bench:      99,156 ns/iter (+/- 657) = 6 MB/s\ntest goser::serde_json::bench_populate           ... bench:      17,264 ns/iter (+/- 77)\ntest goser::serde_json::bench_serializer         ... bench:      66,135 ns/iter (+/- 392) = 9 MB/s\n\n```", "tree": {"sha": "96a3d7171d5e04829e05bc82ee6f3a900e0c4c16", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96a3d7171d5e04829e05bc82ee6f3a900e0c4c16"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c17bfc20cf2140adf2d7c3fff0f02db6799b93e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c17bfc20cf2140adf2d7c3fff0f02db6799b93e", "html_url": "https://github.com/rust-lang/rust/commit/2c17bfc20cf2140adf2d7c3fff0f02db6799b93e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c17bfc20cf2140adf2d7c3fff0f02db6799b93e/comments", "author": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cff04117064ddee95f425c49f22c8aa5a3a665d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/cff04117064ddee95f425c49f22c8aa5a3a665d4", "html_url": "https://github.com/rust-lang/rust/commit/cff04117064ddee95f425c49f22c8aa5a3a665d4"}], "stats": {"total": 42, "additions": 41, "deletions": 1}, "files": [{"sha": "370e5667c1fefc790c79f1cd39a565539035259c", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/2c17bfc20cf2140adf2d7c3fff0f02db6799b93e/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c17bfc20cf2140adf2d7c3fff0f02db6799b93e/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=2c17bfc20cf2140adf2d7c3fff0f02db6799b93e", "patch": "@@ -119,7 +119,7 @@ pub fn trans_into<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n \n     debuginfo::set_source_location(bcx.fcx, expr.id, expr.span);\n \n-    if bcx.tcx().tables.borrow().adjustments.contains_key(&expr.id) {\n+    if adjustment_required(bcx, expr) {\n         // use trans, which may be less efficient but\n         // which will perform the adjustments:\n         let datum = unpack_datum!(bcx, trans(bcx, expr));\n@@ -334,6 +334,37 @@ pub fn unsized_info<'ccx, 'tcx>(ccx: &CrateContext<'ccx, 'tcx>,\n     }\n }\n \n+fn adjustment_required<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n+                                   expr: &hir::Expr) -> bool {\n+    let adjustment = match bcx.tcx().tables.borrow().adjustments.get(&expr.id).cloned() {\n+        None => { return false; }\n+        Some(adj) => adj\n+    };\n+\n+    // Don't skip a conversion from Box<T> to &T, etc.\n+    if bcx.tcx().is_overloaded_autoderef(expr.id, 0) {\n+        return true;\n+    }\n+\n+    match adjustment {\n+        AdjustReifyFnPointer => {\n+            // FIXME(#19925) once fn item types are\n+            // zero-sized, we'll need to return true here\n+            false\n+        }\n+        AdjustUnsafeFnPointer => {\n+            // purely a type-level thing\n+            false\n+        }\n+        AdjustDerefRef(ref adj) => {\n+            // We are a bit paranoid about adjustments and thus might have a re-\n+            // borrow here which merely derefs and then refs again (it might have\n+            // a different region or mutability, but we don't care here).\n+            !(adj.autoderefs == 1 && adj.autoref.is_some() && adj.unsize.is_none())\n+        }\n+    }\n+}\n+\n /// Helper for trans that apply adjustments from `expr` to `datum`, which should be the unadjusted\n /// translation of `expr`.\n fn apply_adjustments<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,"}, {"sha": "d9a7acf112908c7d52a0eb57a0f0c869fac93a70", "filename": "src/test/codegen/adjustments.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2c17bfc20cf2140adf2d7c3fff0f02db6799b93e/src%2Ftest%2Fcodegen%2Fadjustments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c17bfc20cf2140adf2d7c3fff0f02db6799b93e/src%2Ftest%2Fcodegen%2Fadjustments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fadjustments.rs?ref=2c17bfc20cf2140adf2d7c3fff0f02db6799b93e", "patch": "@@ -26,3 +26,12 @@ pub fn no_op_slice_adjustment(x: &[u8]) -> &[u8] {\n // CHECK: call void @llvm.memcpy.{{.*}}(i8* [[DST]], i8* [[SRC]],\n     { x }\n }\n+\n+// CHECK-LABEL: @no_op_slice_adjustment2\n+#[no_mangle]\n+pub fn no_op_slice_adjustment2(x: &[u8]) -> &[u8] {\n+    // We used to generate an extra alloca and memcpy for the function's return value, so check\n+    // that there's no memcpy (the slice is written to sret_slot element-wise)\n+// CHECK-NOT: call void @llvm.memcpy.\n+    no_op_slice_adjustment(x)\n+}"}]}