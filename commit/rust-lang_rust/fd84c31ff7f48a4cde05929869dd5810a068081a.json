{"sha": "fd84c31ff7f48a4cde05929869dd5810a068081a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkODRjMzFmZjdmNDhhNGNkZTA1OTI5ODY5ZGQ1ODEwYTA2ODA4MWE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-05-07T16:29:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-07T16:29:01Z"}, "message": "Merge #4346\n\n4346: Fix rename of enum variant visible from module r=matklad a=montekki\n\nProbably fixes #4237 \r\n\r\nIt looks like the ref is found correctly in this case but it's visibility is not correctly determined. I took a stab at fixing that by adding an implementation of `HasVisibility` for `EnumVariant` so it works more or less the same way it does for struct fields.\r\n\r\nIn other words, the `search_range` here does not contain the ref since it's not considered visible:\r\n\r\nhttps://github.com/rust-analyzer/rust-analyzer/blob/efd8e34c396f1524623a495e47111f1047cf2879/crates/ra_ide_db/src/search.rs#L209-L214\r\n\r\n\r\nBefore that I tried to populate `ItemScope` with visible enum variants but that ended up with breaking tests all over the place and also it looked illogical in the end: `ItemScope` is not populated with, say, public struct fields and the same should be true for `enum` variants.\r\n\r\nI've added two more or less identical tests: one for the case with a struct field rename and one for enum variant rename; the test for struct should probably be removed and the names should be changed.\r\n\n\nCo-authored-by: Fedor Sakharov <fedor.sakharov@gmail.com>", "tree": {"sha": "d662138b20b83dd129182a74c925f1471aba7b72", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d662138b20b83dd129182a74c925f1471aba7b72"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd84c31ff7f48a4cde05929869dd5810a068081a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJetDdNCRBK7hj4Ov3rIwAAdHIIAFa6E2N9FQtskvb2hU0yg+pP\nQ/ijukPY63NiOBtsRLIHbx5bO14hf8eGws9FoKaSxJuEgBlGtYBvAmL5DzPutdSE\n+FASWskCCS7WccqqP+WxUPrhCS/NXWEJgdpIta1S5/Jly9kI9/8FgcbsaDJivHpl\nEUZdfcU0aJJujaL0qAfFnR357OdfXckDCEPTktmZBHS6do1lRYynz9jL7Oyv74Xz\ncMJZ9dO71vaDrunIKiaZ+u1aA0PWdyCRoxWUvM3wDbjbcwCt6mhT7hWPWFuJSkxV\n6rcUyBrSYWnHlMTLW/9dAd2aPxPP12a3SQfamrBMk6LgOR3OmWDubNVLcU7C2CQ=\n=rw7o\n-----END PGP SIGNATURE-----\n", "payload": "tree d662138b20b83dd129182a74c925f1471aba7b72\nparent a9945137dc0e65ecb2ae8d0da4821afa80a367bd\nparent 210f0cbd27b0621c47e15c74bbb16ab47a642999\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1588868941 +0000\ncommitter GitHub <noreply@github.com> 1588868941 +0000\n\nMerge #4346\n\n4346: Fix rename of enum variant visible from module r=matklad a=montekki\n\nProbably fixes #4237 \r\n\r\nIt looks like the ref is found correctly in this case but it's visibility is not correctly determined. I took a stab at fixing that by adding an implementation of `HasVisibility` for `EnumVariant` so it works more or less the same way it does for struct fields.\r\n\r\nIn other words, the `search_range` here does not contain the ref since it's not considered visible:\r\n\r\nhttps://github.com/rust-analyzer/rust-analyzer/blob/efd8e34c396f1524623a495e47111f1047cf2879/crates/ra_ide_db/src/search.rs#L209-L214\r\n\r\n\r\nBefore that I tried to populate `ItemScope` with visible enum variants but that ended up with breaking tests all over the place and also it looked illogical in the end: `ItemScope` is not populated with, say, public struct fields and the same should be true for `enum` variants.\r\n\r\nI've added two more or less identical tests: one for the case with a struct field rename and one for enum variant rename; the test for struct should probably be removed and the names should be changed.\r\n\n\nCo-authored-by: Fedor Sakharov <fedor.sakharov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd84c31ff7f48a4cde05929869dd5810a068081a", "html_url": "https://github.com/rust-lang/rust/commit/fd84c31ff7f48a4cde05929869dd5810a068081a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd84c31ff7f48a4cde05929869dd5810a068081a/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9945137dc0e65ecb2ae8d0da4821afa80a367bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9945137dc0e65ecb2ae8d0da4821afa80a367bd", "html_url": "https://github.com/rust-lang/rust/commit/a9945137dc0e65ecb2ae8d0da4821afa80a367bd"}, {"sha": "210f0cbd27b0621c47e15c74bbb16ab47a642999", "url": "https://api.github.com/repos/rust-lang/rust/commits/210f0cbd27b0621c47e15c74bbb16ab47a642999", "html_url": "https://github.com/rust-lang/rust/commit/210f0cbd27b0621c47e15c74bbb16ab47a642999"}], "stats": {"total": 72, "additions": 70, "deletions": 2}, "files": [{"sha": "2cbb82c1a494b5362b21ef8b7bc757925715bda5", "filename": "crates/ra_ide/src/references/rename.rs", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/fd84c31ff7f48a4cde05929869dd5810a068081a/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd84c31ff7f48a4cde05929869dd5810a068081a/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs?ref=fd84c31ff7f48a4cde05929869dd5810a068081a", "patch": "@@ -712,6 +712,68 @@ mod tests {\n         \"###);\n     }\n \n+    #[test]\n+    fn test_enum_variant_from_module_1() {\n+        test_rename(\n+            r#\"\n+    mod foo {\n+        pub enum Foo {\n+            Bar<|>,\n+        }\n+    }\n+\n+    fn func(f: foo::Foo) {\n+        match f {\n+            foo::Foo::Bar => {}\n+        }\n+    }\n+    \"#,\n+            \"Baz\",\n+            r#\"\n+    mod foo {\n+        pub enum Foo {\n+            Baz,\n+        }\n+    }\n+\n+    fn func(f: foo::Foo) {\n+        match f {\n+            foo::Foo::Baz => {}\n+        }\n+    }\n+    \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_enum_variant_from_module_2() {\n+        test_rename(\n+            r#\"\n+    mod foo {\n+        pub struct Foo {\n+            pub bar<|>: uint,\n+        }\n+    }\n+\n+    fn foo(f: foo::Foo) {\n+        let _ = f.bar;\n+    }\n+    \"#,\n+            \"baz\",\n+            r#\"\n+    mod foo {\n+        pub struct Foo {\n+            pub baz: uint,\n+        }\n+    }\n+\n+    fn foo(f: foo::Foo) {\n+        let _ = f.baz;\n+    }\n+    \"#,\n+        );\n+    }\n+\n     fn test_rename(text: &str, new_name: &str, expected: &str) {\n         let (analysis, position) = single_file_with_position(text);\n         let source_change = analysis.rename(position, new_name).unwrap();"}, {"sha": "f990e3bb97da08482d556e252a41276445cc5417", "filename": "crates/ra_ide_db/src/defs.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fd84c31ff7f48a4cde05929869dd5810a068081a/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd84c31ff7f48a4cde05929869dd5810a068081a/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs?ref=fd84c31ff7f48a4cde05929869dd5810a068081a", "patch": "@@ -6,7 +6,7 @@\n // FIXME: this badly needs rename/rewrite (matklad, 2020-02-06).\n \n use hir::{\n-    Field, HasVisibility, ImplDef, Local, MacroDef, Module, ModuleDef, Name, PathResolution,\n+    Adt, Field, HasVisibility, ImplDef, Local, MacroDef, Module, ModuleDef, Name, PathResolution,\n     Semantics, TypeParam, Visibility,\n };\n use ra_prof::profile;\n@@ -47,7 +47,13 @@ impl Definition {\n         match self {\n             Definition::Macro(_) => None,\n             Definition::Field(sf) => Some(sf.visibility(db)),\n-            Definition::ModuleDef(def) => module?.visibility_of(db, def),\n+            Definition::ModuleDef(def) => match def {\n+                ModuleDef::EnumVariant(id) => {\n+                    let parent = id.parent_enum(db);\n+                    module?.visibility_of(db, &ModuleDef::Adt(Adt::Enum(parent)))\n+                }\n+                _ => module?.visibility_of(db, def),\n+            },\n             Definition::SelfType(_) => None,\n             Definition::Local(_) => None,\n             Definition::TypeParam(_) => None,"}]}