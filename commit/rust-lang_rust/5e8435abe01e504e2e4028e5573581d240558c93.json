{"sha": "5e8435abe01e504e2e4028e5573581d240558c93", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlODQzNWFiZTAxZTUwNGUyZTQwMjhlNTU3MzU4MWQyNDA1NThjOTM=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-02-15T15:06:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-15T15:06:57Z"}, "message": "Rollup merge of #82061 - RalfJung:ctfe-read-pointer-as-bytes, r=oli-obk\n\nCTFE validation: catch ReadPointerAsBytes and better error\n\nr? ``@oli-obk``\nFixes https://github.com/rust-lang/rust/issues/79690\nCc https://github.com/rust-lang/miri/issues/1706", "tree": {"sha": "b54f384ad9426842e10eff24dcd20f44b0be6a70", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b54f384ad9426842e10eff24dcd20f44b0be6a70"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e8435abe01e504e2e4028e5573581d240558c93", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgKo4RCRBK7hj4Ov3rIwAAdHIIABoD/+HyM74hcJ8zXR6xHx/W\nLIt5XzXy52tMsV/2iuFlbAsURLyfj0iu56CV25faWF7ptcVlJNuv9QBgUdcnKwsN\nhB+cQw8tceX4xQxRCwGPuML1fT4KYP4Y0Amc21e7htA2T0qjl3zT3RFP/hplZqOz\nD2+DCCOxDSmQmVsMbEd3hQe3J79FqUIsxnJ8ipp7Mzr7CeIjrKLuZw4KtwwR1fFj\nLZkTLBPIFW6ifpjOxbi0yNffTNe8pE2IrCFh56ik6ah7qeME/k4f9cFYEHUe3faE\nVkg68X+y3Sqwl4NCcfBr77tkTbHxIZuvxPeoMPLZ6kUZvpX/NBxrlOpxUO+86Ac=\n=1yfj\n-----END PGP SIGNATURE-----\n", "payload": "tree b54f384ad9426842e10eff24dcd20f44b0be6a70\nparent c7ebc590da425621cde05877b8a0fc43ca502ee3\nparent d6dcb3de54825155208dec3b38fe627852ad3471\nauthor Jonas Schievink <jonasschievink@gmail.com> 1613401617 +0100\ncommitter GitHub <noreply@github.com> 1613401617 +0100\n\nRollup merge of #82061 - RalfJung:ctfe-read-pointer-as-bytes, r=oli-obk\n\nCTFE validation: catch ReadPointerAsBytes and better error\n\nr? ``@oli-obk``\nFixes https://github.com/rust-lang/rust/issues/79690\nCc https://github.com/rust-lang/miri/issues/1706\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e8435abe01e504e2e4028e5573581d240558c93", "html_url": "https://github.com/rust-lang/rust/commit/5e8435abe01e504e2e4028e5573581d240558c93", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e8435abe01e504e2e4028e5573581d240558c93/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7ebc590da425621cde05877b8a0fc43ca502ee3", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7ebc590da425621cde05877b8a0fc43ca502ee3", "html_url": "https://github.com/rust-lang/rust/commit/c7ebc590da425621cde05877b8a0fc43ca502ee3"}, {"sha": "d6dcb3de54825155208dec3b38fe627852ad3471", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6dcb3de54825155208dec3b38fe627852ad3471", "html_url": "https://github.com/rust-lang/rust/commit/d6dcb3de54825155208dec3b38fe627852ad3471"}], "stats": {"total": 44, "additions": 30, "deletions": 14}, "files": [{"sha": "dac8ddccad67ea9edf884ff9dca4a510a29eb4f0", "filename": "compiler/rustc_mir/src/interpret/validity.rs", "status": "modified", "additions": 29, "deletions": 13, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/5e8435abe01e504e2e4028e5573581d240558c93/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e8435abe01e504e2e4028e5573581d240558c93/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fvalidity.rs?ref=5e8435abe01e504e2e4028e5573581d240558c93", "patch": "@@ -21,7 +21,7 @@ use std::hash::Hash;\n \n use super::{\n     CheckInAllocMsg, GlobalAlloc, InterpCx, InterpResult, MPlaceTy, Machine, MemPlaceMeta, OpTy,\n-    ValueVisitor,\n+    ScalarMaybeUninit, ValueVisitor,\n };\n \n macro_rules! throw_validation_failure {\n@@ -378,7 +378,11 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n         value: OpTy<'tcx, M::PointerTag>,\n         kind: &str,\n     ) -> InterpResult<'tcx> {\n-        let value = self.ecx.read_immediate(value)?;\n+        let value = try_validation!(\n+            self.ecx.read_immediate(value),\n+            self.path,\n+            err_unsup!(ReadPointerAsBytes) => { \"part of a pointer\" } expected { \"a proper pointer or integer value\" },\n+        );\n         // Handle wide pointers.\n         // Check metadata early, for better diagnostics\n         let place = try_validation!(\n@@ -485,6 +489,17 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n         Ok(())\n     }\n \n+    fn read_scalar(\n+        &self,\n+        op: OpTy<'tcx, M::PointerTag>,\n+    ) -> InterpResult<'tcx, ScalarMaybeUninit<M::PointerTag>> {\n+        Ok(try_validation!(\n+            self.ecx.read_scalar(op),\n+            self.path,\n+            err_unsup!(ReadPointerAsBytes) => { \"(potentially part of) a pointer\" } expected { \"plain (non-pointer) bytes\" },\n+        ))\n+    }\n+\n     /// Check if this is a value of primitive type, and if yes check the validity of the value\n     /// at that type.  Return `true` if the type is indeed primitive.\n     fn try_visit_primitive(\n@@ -495,7 +510,7 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n         let ty = value.layout.ty;\n         match ty.kind() {\n             ty::Bool => {\n-                let value = self.ecx.read_scalar(value)?;\n+                let value = self.read_scalar(value)?;\n                 try_validation!(\n                     value.to_bool(),\n                     self.path,\n@@ -505,7 +520,7 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n                 Ok(true)\n             }\n             ty::Char => {\n-                let value = self.ecx.read_scalar(value)?;\n+                let value = self.read_scalar(value)?;\n                 try_validation!(\n                     value.to_char(),\n                     self.path,\n@@ -515,11 +530,7 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n                 Ok(true)\n             }\n             ty::Float(_) | ty::Int(_) | ty::Uint(_) => {\n-                let value = try_validation!(\n-                    self.ecx.read_scalar(value),\n-                    self.path,\n-                    err_unsup!(ReadPointerAsBytes) => { \"read of part of a pointer\" },\n-                );\n+                let value = self.read_scalar(value)?;\n                 // NOTE: Keep this in sync with the array optimization for int/float\n                 // types below!\n                 if self.ctfe_mode.is_some() {\n@@ -541,9 +552,10 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n                 // actually enforce the strict rules for raw pointers (mostly because\n                 // that lets us re-use `ref_to_mplace`).\n                 let place = try_validation!(\n-                    self.ecx.ref_to_mplace(self.ecx.read_immediate(value)?),\n+                    self.ecx.read_immediate(value).and_then(|i| self.ecx.ref_to_mplace(i)),\n                     self.path,\n                     err_ub!(InvalidUninitBytes(None)) => { \"uninitialized raw pointer\" },\n+                    err_unsup!(ReadPointerAsBytes) => { \"part of a pointer\" } expected { \"a proper pointer or integer value\" },\n                 );\n                 if place.layout.is_unsized() {\n                     self.check_wide_ptr_meta(place.meta, place.layout)?;\n@@ -569,9 +581,13 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n                 Ok(true)\n             }\n             ty::FnPtr(_sig) => {\n-                let value = self.ecx.read_scalar(value)?;\n+                let value = try_validation!(\n+                    self.ecx.read_immediate(value),\n+                    self.path,\n+                    err_unsup!(ReadPointerAsBytes) => { \"part of a pointer\" } expected { \"a proper pointer or integer value\" },\n+                );\n                 let _fn = try_validation!(\n-                    value.check_init().and_then(|ptr| self.ecx.memory.get_fn(ptr)),\n+                    value.to_scalar().and_then(|ptr| self.ecx.memory.get_fn(ptr)),\n                     self.path,\n                     err_ub!(DanglingIntPointer(..)) |\n                     err_ub!(InvalidFunctionPointer(..)) |\n@@ -615,7 +631,7 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n         op: OpTy<'tcx, M::PointerTag>,\n         scalar_layout: &Scalar,\n     ) -> InterpResult<'tcx> {\n-        let value = self.ecx.read_scalar(op)?;\n+        let value = self.read_scalar(op)?;\n         let valid_range = &scalar_layout.valid_range;\n         let (lo, hi) = valid_range.clone().into_inner();\n         // Determine the allowed range"}, {"sha": "ca56ff220564a230ed32861ffbef91a4335b04a4", "filename": "src/test/ui/consts/issue-79690.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e8435abe01e504e2e4028e5573581d240558c93/src%2Ftest%2Fui%2Fconsts%2Fissue-79690.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e8435abe01e504e2e4028e5573581d240558c93/src%2Ftest%2Fui%2Fconsts%2Fissue-79690.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-79690.stderr?ref=5e8435abe01e504e2e4028e5573581d240558c93", "patch": "@@ -2,7 +2,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/issue-79690.rs:29:1\n    |\n LL | const G: Fat = unsafe { Transmute { t: FOO }.u };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered read of part of a pointer at .1.<deref>.size.foo\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered (potentially part of) a pointer at .1.<deref>.size.foo, but expected plain (non-pointer) bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n "}]}