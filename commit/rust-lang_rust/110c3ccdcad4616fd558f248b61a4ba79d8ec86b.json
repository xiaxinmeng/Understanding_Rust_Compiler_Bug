{"sha": "110c3ccdcad4616fd558f248b61a4ba79d8ec86b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExMGMzY2NkY2FkNDYxNmZkNTU4ZjI0OGI2MWE0YmE3OWQ4ZWM4NmI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-01-09T21:47:37Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-01-10T03:53:32Z"}, "message": "add rust_task_is_unwinding predicate and do not kill if already unwinding", "tree": {"sha": "e211c5b764ed6899c2ecf55047ee1a15886b722e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e211c5b764ed6899c2ecf55047ee1a15886b722e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/110c3ccdcad4616fd558f248b61a4ba79d8ec86b", "comment_count": 2, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/110c3ccdcad4616fd558f248b61a4ba79d8ec86b", "html_url": "https://github.com/rust-lang/rust/commit/110c3ccdcad4616fd558f248b61a4ba79d8ec86b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/110c3ccdcad4616fd558f248b61a4ba79d8ec86b/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "005e3194858785e9debae8116caedf4c14e3b727", "url": "https://api.github.com/repos/rust-lang/rust/commits/005e3194858785e9debae8116caedf4c14e3b727", "html_url": "https://github.com/rust-lang/rust/commit/005e3194858785e9debae8116caedf4c14e3b727"}], "stats": {"total": 64, "additions": 47, "deletions": 17}, "files": [{"sha": "2a9a39e0aaa2b2674625b98a125856fde4a2d929", "filename": "src/libcore/task.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/110c3ccdcad4616fd558f248b61a4ba79d8ec86b/src%2Flibcore%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/110c3ccdcad4616fd558f248b61a4ba79d8ec86b/src%2Flibcore%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask.rs?ref=110c3ccdcad4616fd558f248b61a4ba79d8ec86b", "patch": "@@ -49,6 +49,7 @@ export spawn_joinable;\n export spawn_connected;\n export connected_fn;\n export connected_task;\n+export currently_unwinding;\n \n #[abi = \"rust-intrinsic\"]\n native mod rusti {\n@@ -76,6 +77,8 @@ native mod rustrt {\n     fn migrate_alloc(alloc: *u8, target: task_id);\n \n     fn start_task(id: task, closure: *rust_closure);\n+\n+    fn rust_task_is_unwinding(rt: *rust_task) -> bool;\n }\n \n /* Section: Types */\n@@ -271,7 +274,7 @@ fn sleep(time_in_us: uint) {\n     // in a snapshot.\n     // #debug(\"yielding for %u us\", time_in_us);\n     rusti::task_sleep(task, time_in_us, killed);\n-    if killed {\n+    if killed && !currently_unwinding() {\n         fail \"killed\";\n     }\n }\n@@ -337,6 +340,15 @@ Unpin the current task and future child tasks\n */\n fn unpin() { rustrt::unpin_task(); }\n \n+/*\n+Function: currently_unwinding()\n+\n+True if we are currently unwinding after a failure.\n+*/\n+fn currently_unwinding() -> bool {\n+    rustrt::rust_task_is_unwinding(rustrt::rust_get_task())\n+}\n+\n // Local Variables:\n // mode: rust;\n // fill-column: 78;"}, {"sha": "eb3040ebfae218e708f6aa75ee905c110c2b84e7", "filename": "src/rt/rust_task.cpp", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/110c3ccdcad4616fd558f248b61a4ba79d8ec86b/src%2Frt%2Frust_task.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/110c3ccdcad4616fd558f248b61a4ba79d8ec86b/src%2Frt%2Frust_task.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.cpp?ref=110c3ccdcad4616fd558f248b61a4ba79d8ec86b", "patch": "@@ -245,7 +245,7 @@ rust_task::rust_task(rust_scheduler *sched, rust_task_list *state,\n     running_on(-1),\n     pinned_on(-1),\n     local_region(&sched->srv->local_region),\n-    failed(false),\n+    unwinding(false),\n     killed(false),\n     propagate_failure(true),\n     dynastack(this),\n@@ -299,27 +299,27 @@ struct spawn_args {\n \n struct cleanup_args {\n     spawn_args *spargs;\n-    bool failed;\n+    bool threw_exception;\n };\n \n void\n cleanup_task(cleanup_args *args) {\n     spawn_args *a = args->spargs;\n-    bool failed = args->failed;\n+    bool threw_exception = args->threw_exception;\n     rust_task *task = a->task;\n \n     cc::do_cc(task);\n \n     task->die();\n \n-    if (task->killed && !failed) {\n+    if (task->killed && !threw_exception) {\n         LOG(task, task, \"Task killed during termination\");\n-        failed = true;\n+        threw_exception = true;\n     }\n \n-    task->notify(!failed);\n+    task->notify(!threw_exception);\n \n-    if (failed) {\n+    if (threw_exception) {\n #ifndef __WIN32__\n         task->conclude_failure();\n #else\n@@ -336,15 +336,15 @@ void task_start_wrapper(spawn_args *a)\n {\n     rust_task *task = a->task;\n \n-    bool failed = false;\n+    bool threw_exception = false;\n     try {\n         // The first argument is the return pointer; as the task fn \n         // must have void return type, we can safely pass 0.\n         a->f(0, a->envptr, a->argptr);\n     } catch (rust_task *ex) {\n         A(task->sched, ex == task,\n           \"Expected this task to be thrown for unwinding\");\n-        failed = true;\n+        threw_exception = true;\n     }\n \n     rust_opaque_closure* env = a->envptr;\n@@ -357,7 +357,7 @@ void task_start_wrapper(spawn_args *a)\n     }\n \n     // The cleanup work needs lots of stack\n-    cleanup_args ca = {a, failed};\n+    cleanup_args ca = {a, threw_exception};\n     task->sched->c_context.call_shim_on_c_stack(&ca, (void*)cleanup_task);\n \n     task->ctx.next->swap(task->ctx);\n@@ -437,11 +437,17 @@ rust_task::kill() {\n     // run_on_resume(rust_unwind_glue);\n }\n \n+extern \"C\" CDECL\n+bool rust_task_is_unwinding(rust_task *rt) {\n+    return rt->unwinding;\n+}\n+\n void\n rust_task::fail() {\n     // See note in ::kill() regarding who should call this.\n     DLOG(sched, task, \"task %s @0x%\" PRIxPTR \" failing\", name, this);\n     backtrace();\n+    unwinding = true;\n #ifndef __WIN32__\n     throw this;\n #else\n@@ -455,7 +461,6 @@ rust_task::fail() {\n void\n rust_task::conclude_failure() {\n     fail_parent();\n-    failed = true;\n }\n \n void"}, {"sha": "b47b62e2d14cadf73f5c5a740195265eb3e44e53", "filename": "src/rt/rust_task.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/110c3ccdcad4616fd558f248b61a4ba79d8ec86b/src%2Frt%2Frust_task.h", "raw_url": "https://github.com/rust-lang/rust/raw/110c3ccdcad4616fd558f248b61a4ba79d8ec86b/src%2Frt%2Frust_task.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.h?ref=110c3ccdcad4616fd558f248b61a4ba79d8ec86b", "patch": "@@ -107,8 +107,10 @@ rust_task : public kernel_owned<rust_task>, rust_cond\n \n     memory_region local_region;\n \n-    // Indicates that the task ended in failure\n-    bool failed;\n+    // Indicates that fail() has been called and we are cleaning up.\n+    // We use this to suppress the \"killed\" flag during calls to yield.\n+    bool unwinding;\n+\n     // Indicates that the task was killed and needs to unwind\n     bool killed;\n     bool propagate_failure;"}, {"sha": "8a44a7ab151c47c0528c7df43b50c180b4fd26e2", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/110c3ccdcad4616fd558f248b61a4ba79d8ec86b/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/110c3ccdcad4616fd558f248b61a4ba79d8ec86b/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=110c3ccdcad4616fd558f248b61a4ba79d8ec86b", "patch": "@@ -43,6 +43,7 @@ rust_ptr_eq\n rust_run_program\n rust_start\n rust_getcwd\n+rust_task_is_unwinding\n rust_task_sleep\n rust_get_task\n set_min_stack"}, {"sha": "f7829aa31dfe930731b03b8acde0f2897735aa0a", "filename": "src/test/run-pass/task-killjoin-rsrc.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/110c3ccdcad4616fd558f248b61a4ba79d8ec86b/src%2Ftest%2Frun-pass%2Ftask-killjoin-rsrc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/110c3ccdcad4616fd558f248b61a4ba79d8ec86b/src%2Ftest%2Frun-pass%2Ftask-killjoin-rsrc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-killjoin-rsrc.rs?ref=110c3ccdcad4616fd558f248b61a4ba79d8ec86b", "patch": "@@ -10,18 +10,26 @@ fn joinable(f: fn()) -> (task::task, comm::port<bool>) {\n     resource notify(data: (comm::chan<bool>,\n                            @mutable bool)) {\n         let (c, v) = data;\n+        #error[\"notify: task=%d v=%x unwinding=%b b=%b\",\n+               task::get_task(),\n+               ptr::addr_of(*v) as uint,\n+               task::currently_unwinding(),\n+               *v];\n         comm::send(c, *v);\n     }\n     fn wrapper(pair: (comm::chan<bool>, fn())) {\n         let (c, f) = pair;\n         let b = @mutable false;\n+        #error[\"wrapper: task=%d allocated v=%x\",\n+               task::get_task(),\n+               ptr::addr_of(*b) as uint];\n         let _r = notify((c, b));\n         f();\n         *b = true;\n     }\n     let p = comm::port();\n     let c = comm::chan(p);\n-    let t = task::spawn((c, f), wrapper);\n+    let t = task::spawn {|| wrapper((c, f)) };\n     ret (t, p);\n }\n \n@@ -34,6 +42,7 @@ fn supervised() {\n     // Yield to make sure the supervisor joins before we\n     // fail. This is currently not needed because the supervisor\n     // runs first, but I can imagine that changing.\n+    #error[\"supervised task=%d\", task::get_task()];\n     task::yield();\n     fail;\n }\n@@ -42,8 +51,9 @@ fn supervisor() {\n     // Unsupervise this task so the process doesn't return a failure status as\n     // a result of the main task being killed.\n     task::unsupervise();\n-    let f = supervised;\n-    join(joinable(supervised));\n+    #error[\"supervisor task=%d\", task::get_task()];\n+    let t = joinable(supervised);\n+    join(t);\n }\n \n fn main() {"}]}