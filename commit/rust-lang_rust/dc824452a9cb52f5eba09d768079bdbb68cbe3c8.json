{"sha": "dc824452a9cb52f5eba09d768079bdbb68cbe3c8", "node_id": "C_kwDOAAsO6NoAKGRjODI0NDUyYTljYjUyZjVlYmEwOWQ3NjgwNzliZGJiNjhjYmUzYzg", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-04-30T19:20:08Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-04-30T19:20:08Z"}, "message": "Merge new_metadata into codegen_allocator", "tree": {"sha": "a3fb59dc3ee8891af2937647deba1870f32dba83", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a3fb59dc3ee8891af2937647deba1870f32dba83"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc824452a9cb52f5eba09d768079bdbb68cbe3c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc824452a9cb52f5eba09d768079bdbb68cbe3c8", "html_url": "https://github.com/rust-lang/rust/commit/dc824452a9cb52f5eba09d768079bdbb68cbe3c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc824452a9cb52f5eba09d768079bdbb68cbe3c8/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c00ecf5d5dbc21db83eb1cd3e30ddda1f11079e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/c00ecf5d5dbc21db83eb1cd3e30ddda1f11079e3", "html_url": "https://github.com/rust-lang/rust/commit/c00ecf5d5dbc21db83eb1cd3e30ddda1f11079e3"}], "stats": {"total": 12, "additions": 5, "deletions": 7}, "files": [{"sha": "58996a9db78ad4e0dfbd315ea85af833e7137413", "filename": "src/lib.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dc824452a9cb52f5eba09d768079bdbb68cbe3c8/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc824452a9cb52f5eba09d768079bdbb68cbe3c8/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=dc824452a9cb52f5eba09d768079bdbb68cbe3c8", "patch": "@@ -139,14 +139,12 @@ impl CodegenBackend for GccCodegenBackend {\n }\n \n impl ExtraBackendMethods for GccCodegenBackend {\n-    fn new_metadata<'tcx>(&self, _tcx: TyCtxt<'tcx>, _mod_name: &str) -> Self::Module {\n-        GccContext {\n+    fn codegen_allocator<'tcx>(&self, tcx: TyCtxt<'tcx>, module_name: &str, kind: AllocatorKind, has_alloc_error_handler: bool) -> Self::Module {\n+        let mut mods = GccContext {\n             context: Context::default(),\n-        }\n-    }\n-\n-    fn codegen_allocator<'tcx>(&self, tcx: TyCtxt<'tcx>, mods: &mut Self::Module, module_name: &str, kind: AllocatorKind, has_alloc_error_handler: bool) {\n-        unsafe { allocator::codegen(tcx, mods, module_name, kind, has_alloc_error_handler) }\n+        };\n+        unsafe { allocator::codegen(tcx, &mut mods, module_name, kind, has_alloc_error_handler); }\n+        mods\n     }\n \n     fn compile_codegen_unit<'tcx>(&self, tcx: TyCtxt<'tcx>, cgu_name: Symbol) -> (ModuleCodegen<Self::Module>, u64) {"}]}