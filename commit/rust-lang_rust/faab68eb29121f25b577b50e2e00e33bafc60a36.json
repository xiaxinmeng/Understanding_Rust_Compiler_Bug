{"sha": "faab68eb29121f25b577b50e2e00e33bafc60a36", "node_id": "C_kwDOAAsO6NoAKGZhYWI2OGViMjkxMjFmMjViNTc3YjUwZTJlMDBlMzNiYWZjNjBhMzY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-23T06:20:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-23T06:20:24Z"}, "message": "Auto merge of #103426 - matthiaskrgr:rollup-n6dqdy8, r=matthiaskrgr\n\nRollup of 9 pull requests\n\nSuccessful merges:\n\n - #103123 (Introduce `subst_iter` and `subst_iter_copied` on `EarlyBinder` )\n - #103328 (Do not suggest trivially false const predicates)\n - #103354 (Escape string literals when fixing overlong char literal)\n - #103355 (Handle return-position `impl Trait` in traits properly in `register_hidden_type`)\n - #103368 (Delay ambiguity span bug in normalize query iff not rustdoc)\n - #103388 (rustdoc: remove unused CSS class `.result-description`)\n - #103399 (Change `unknown_lint` applicability to `MaybeIncorrect`)\n - #103401 (Use functions for headings rustdoc GUI test)\n - #103412 (Fix typo in docs of `String::leak`.)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "f60ad6322423365c1d9a70a5faf05a261627f2ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f60ad6322423365c1d9a70a5faf05a261627f2ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/faab68eb29121f25b577b50e2e00e33bafc60a36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/faab68eb29121f25b577b50e2e00e33bafc60a36", "html_url": "https://github.com/rust-lang/rust/commit/faab68eb29121f25b577b50e2e00e33bafc60a36", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/faab68eb29121f25b577b50e2e00e33bafc60a36/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c9c2d862dd10718ba2b2a320c3390995ad414bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c9c2d862dd10718ba2b2a320c3390995ad414bc", "html_url": "https://github.com/rust-lang/rust/commit/6c9c2d862dd10718ba2b2a320c3390995ad414bc"}, {"sha": "25e02d6efcac6bd25131e64b80aaf270f380dd8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/25e02d6efcac6bd25131e64b80aaf270f380dd8f", "html_url": "https://github.com/rust-lang/rust/commit/25e02d6efcac6bd25131e64b80aaf270f380dd8f"}], "stats": {"total": 723, "additions": 471, "deletions": 252}, "files": [{"sha": "3469ec4767b7cdb685646b146f7517dadb1120bf", "filename": "compiler/rustc_hir_analysis/src/check/compare_method.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/faab68eb29121f25b577b50e2e00e33bafc60a36/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faab68eb29121f25b577b50e2e00e33bafc60a36/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=faab68eb29121f25b577b50e2e00e33bafc60a36", "patch": "@@ -664,10 +664,7 @@ impl<'tcx> TypeFolder<'tcx> for ImplTraitInTraitCollector<'_, 'tcx> {\n             });\n             self.types.insert(proj.item_def_id, (infer_ty, proj.substs));\n             // Recurse into bounds\n-            for pred in self.tcx().bound_explicit_item_bounds(proj.item_def_id).transpose_iter() {\n-                let pred_span = pred.0.1;\n-\n-                let pred = pred.map_bound(|(pred, _)| *pred).subst(self.tcx(), proj.substs);\n+            for (pred, pred_span) in self.tcx().bound_explicit_item_bounds(proj.item_def_id).subst_iter_copied(self.tcx(), proj.substs) {\n                 let pred = pred.fold_with(self);\n                 let pred = self.ocx.normalize(\n                     ObligationCause::misc(self.span, self.body_id),\n@@ -1752,15 +1749,10 @@ pub fn check_type_bounds<'tcx>(\n \n     let obligations = tcx\n         .bound_explicit_item_bounds(trait_ty.def_id)\n-        .transpose_iter()\n-        .map(|e| e.map_bound(|e| *e).transpose_tuple2())\n-        .map(|(bound, span)| {\n-            debug!(?bound);\n-            // this is where opaque type is found\n-            let concrete_ty_bound = bound.subst(tcx, rebased_substs);\n+        .subst_iter_copied(tcx, rebased_substs)\n+        .map(|(concrete_ty_bound, span)| {\n             debug!(\"check_type_bounds: concrete_ty_bound = {:?}\", concrete_ty_bound);\n-\n-            traits::Obligation::new(mk_cause(span.0), param_env, concrete_ty_bound)\n+            traits::Obligation::new(mk_cause(span), param_env, concrete_ty_bound)\n         })\n         .collect();\n     debug!(\"check_type_bounds: item_bounds={:?}\", obligations);"}, {"sha": "2b15d4dcd084849def308fecfec0c8f668ebfd2d", "filename": "compiler/rustc_hir_typeck/src/_match.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/faab68eb29121f25b577b50e2e00e33bafc60a36/compiler%2Frustc_hir_typeck%2Fsrc%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faab68eb29121f25b577b50e2e00e33bafc60a36/compiler%2Frustc_hir_typeck%2Fsrc%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2F_match.rs?ref=faab68eb29121f25b577b50e2e00e33bafc60a36", "patch": "@@ -514,8 +514,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 }\n \n                 for ty in [first_ty, second_ty] {\n-                    for pred in self.tcx.bound_explicit_item_bounds(rpit_def_id).transpose_iter() {\n-                        let pred = pred.map_bound(|(pred, _)| *pred).subst(self.tcx, substs);\n+                    for (pred, _) in self\n+                        .tcx\n+                        .bound_explicit_item_bounds(rpit_def_id)\n+                        .subst_iter_copied(self.tcx, substs)\n+                    {\n                         let pred = match pred.kind().skip_binder() {\n                             ty::PredicateKind::Trait(mut trait_pred) => {\n                                 assert_eq!(trait_pred.trait_ref.self_ty(), opaque_ty);"}, {"sha": "a5a45f75e0e240c25a0ec8fb1bcad01d5b6dfa14", "filename": "compiler/rustc_hir_typeck/src/closure.rs", "status": "modified", "additions": 14, "deletions": 17, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/faab68eb29121f25b577b50e2e00e33bafc60a36/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faab68eb29121f25b577b50e2e00e33bafc60a36/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs?ref=faab68eb29121f25b577b50e2e00e33bafc60a36", "patch": "@@ -176,24 +176,23 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         match *expected_ty.kind() {\n             ty::Opaque(def_id, substs) => {\n                 let bounds = self.tcx.bound_explicit_item_bounds(def_id);\n-                let sig = bounds\n-                    .transpose_iter()\n-                    .map(|e| e.map_bound(|e| *e).transpose_tuple2())\n-                    .find_map(|(pred, span)| match pred.0.kind().skip_binder() {\n+                let sig =\n+                    bounds.subst_iter_copied(self.tcx, substs).find_map(|(pred, span)| match pred\n+                        .kind()\n+                        .skip_binder()\n+                    {\n                         ty::PredicateKind::Projection(proj_predicate) => self\n                             .deduce_sig_from_projection(\n-                                Some(span.0),\n-                                pred.0\n-                                    .kind()\n-                                    .rebind(pred.rebind(proj_predicate).subst(self.tcx, substs)),\n+                                Some(span),\n+                                pred.kind().rebind(proj_predicate),\n                             ),\n                         _ => None,\n                     });\n \n                 let kind = bounds\n-                    .transpose_iter()\n-                    .map(|e| e.map_bound(|e| *e).transpose_tuple2())\n-                    .filter_map(|(pred, _)| match pred.0.kind().skip_binder() {\n+                    .0\n+                    .iter()\n+                    .filter_map(|(pred, _)| match pred.kind().skip_binder() {\n                         ty::PredicateKind::Trait(tp) => {\n                             self.tcx.fn_trait_kind_from_lang_item(tp.def_id())\n                         }\n@@ -697,18 +696,16 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             ty::Opaque(def_id, substs) => self\n                 .tcx\n                 .bound_explicit_item_bounds(def_id)\n-                .transpose_iter()\n-                .map(|e| e.map_bound(|e| *e).transpose_tuple2())\n-                .find_map(|(p, s)| get_future_output(p.subst(self.tcx, substs), s.0))?,\n+                .subst_iter_copied(self.tcx, substs)\n+                .find_map(|(p, s)| get_future_output(p, s))?,\n             ty::Error(_) => return None,\n             ty::Projection(proj)\n                 if self.tcx.def_kind(proj.item_def_id) == DefKind::ImplTraitPlaceholder =>\n             {\n                 self.tcx\n                     .bound_explicit_item_bounds(proj.item_def_id)\n-                    .transpose_iter()\n-                    .map(|e| e.map_bound(|e| *e).transpose_tuple2())\n-                    .find_map(|(p, s)| get_future_output(p.subst(self.tcx, proj.substs), s.0))?\n+                    .subst_iter_copied(self.tcx, proj.substs)\n+                    .find_map(|(p, s)| get_future_output(p, s))?\n             }\n             _ => span_bug!(\n                 self.tcx.def_span(expr_def_id),"}, {"sha": "9ff703e521ff666aa5b2a44d8bb0effe9b776725", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/faab68eb29121f25b577b50e2e00e33bafc60a36/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faab68eb29121f25b577b50e2e00e33bafc60a36/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=faab68eb29121f25b577b50e2e00e33bafc60a36", "patch": "@@ -338,8 +338,7 @@ impl<'tcx> InferCtxt<'tcx> {\n \n             let bounds = self.tcx.bound_explicit_item_bounds(*def_id);\n \n-            for predicate in bounds.transpose_iter().map(|e| e.map_bound(|(p, _)| *p)) {\n-                let predicate = predicate.subst(self.tcx, substs);\n+            for (predicate, _) in bounds.subst_iter_copied(self.tcx, substs) {\n                 let output = predicate\n                     .kind()\n                     .map_bound(|kind| match kind {\n@@ -2272,6 +2271,25 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                 struct_span_err!(self.tcx.sess, span, E0580, \"{}\", failure_str)\n             }\n             FailureCode::Error0308(failure_str) => {\n+                fn escape_literal(s: &str) -> String {\n+                    let mut escaped = String::with_capacity(s.len());\n+                    let mut chrs = s.chars().peekable();\n+                    while let Some(first) = chrs.next() {\n+                        match (first, chrs.peek()) {\n+                            ('\\\\', Some(&delim @ '\"') | Some(&delim @ '\\'')) => {\n+                                escaped.push('\\\\');\n+                                escaped.push(delim);\n+                                chrs.next();\n+                            }\n+                            ('\"' | '\\'', _) => {\n+                                escaped.push('\\\\');\n+                                escaped.push(first)\n+                            }\n+                            (c, _) => escaped.push(c),\n+                        };\n+                    }\n+                    escaped\n+                }\n                 let mut err = struct_span_err!(self.tcx.sess, span, E0308, \"{}\", failure_str);\n                 if let Some((expected, found)) = trace.values.ty() {\n                     match (expected.kind(), found.kind()) {\n@@ -2293,7 +2311,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                                 err.span_suggestion(\n                                     span,\n                                     \"if you meant to write a `char` literal, use single quotes\",\n-                                    format!(\"'{}'\", code),\n+                                    format!(\"'{}'\", escape_literal(code)),\n                                     Applicability::MachineApplicable,\n                                 );\n                             }\n@@ -2308,7 +2326,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                                     err.span_suggestion(\n                                         span,\n                                         \"if you meant to write a `str` literal, use double quotes\",\n-                                        format!(\"\\\"{}\\\"\", code),\n+                                        format!(\"\\\"{}\\\"\", escape_literal(code)),\n                                         Applicability::MachineApplicable,\n                                     );\n                                 }"}, {"sha": "0a4ecc4c033e1ce9ae0d215871a5105e5120a724", "filename": "compiler/rustc_infer/src/infer/opaque_types.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/faab68eb29121f25b577b50e2e00e33bafc60a36/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faab68eb29121f25b577b50e2e00e33bafc60a36/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs?ref=faab68eb29121f25b577b50e2e00e33bafc60a36", "patch": "@@ -1,6 +1,7 @@\n use crate::errors::OpaqueHiddenTypeDiag;\n use crate::infer::{DefiningAnchor, InferCtxt, InferOk};\n use crate::traits;\n+use hir::def::DefKind;\n use hir::def_id::{DefId, LocalDefId};\n use hir::{HirId, OpaqueTyOrigin};\n use rustc_data_structures::sync::Lrc;\n@@ -543,16 +544,18 @@ impl<'tcx> InferCtxt<'tcx> {\n \n         let item_bounds = tcx.bound_explicit_item_bounds(def_id.to_def_id());\n \n-        for predicate in item_bounds.transpose_iter().map(|e| e.map_bound(|(p, _)| *p)) {\n-            debug!(?predicate);\n-            let predicate = predicate.subst(tcx, substs);\n-\n+        for (predicate, _) in item_bounds.subst_iter_copied(tcx, substs) {\n             let predicate = predicate.fold_with(&mut BottomUpFolder {\n                 tcx,\n                 ty_op: |ty| match *ty.kind() {\n                     // We can't normalize associated types from `rustc_infer`,\n                     // but we can eagerly register inference variables for them.\n-                    ty::Projection(projection_ty) if !projection_ty.has_escaping_bound_vars() => {\n+                    // FIXME(RPITIT): Don't replace RPITITs with inference vars.\n+                    ty::Projection(projection_ty)\n+                        if !projection_ty.has_escaping_bound_vars()\n+                            && tcx.def_kind(projection_ty.item_def_id)\n+                                != DefKind::ImplTraitPlaceholder =>\n+                    {\n                         self.infer_projection(\n                             param_env,\n                             projection_ty,\n@@ -568,6 +571,12 @@ impl<'tcx> InferCtxt<'tcx> {\n                     {\n                         hidden_ty\n                     }\n+                    // FIXME(RPITIT): This can go away when we move to associated types\n+                    ty::Projection(proj)\n+                        if def_id.to_def_id() == proj.item_def_id && substs == proj.substs =>\n+                    {\n+                        hidden_ty\n+                    }\n                     _ => ty,\n                 },\n                 lt_op: |lt| lt,"}, {"sha": "db0a3419e6a5da4e084a6d1ce32b3b2d4de9de1c", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/faab68eb29121f25b577b50e2e00e33bafc60a36/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faab68eb29121f25b577b50e2e00e33bafc60a36/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=faab68eb29121f25b577b50e2e00e33bafc60a36", "patch": "@@ -960,7 +960,7 @@ impl<'s, P: LintLevelsProvider> LintLevelsBuilder<'s, P> {\n                                         sp,\n                                         \"did you mean\",\n                                         suggestion,\n-                                        Applicability::MachineApplicable,\n+                                        Applicability::MaybeIncorrect,\n                                     );\n                                 }\n                                 lint"}, {"sha": "e0958b039dc5620c2b8837bffd11c005b41bbb6c", "filename": "compiler/rustc_lint/src/opaque_hidden_inferred_bound.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/faab68eb29121f25b577b50e2e00e33bafc60a36/compiler%2Frustc_lint%2Fsrc%2Fopaque_hidden_inferred_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faab68eb29121f25b577b50e2e00e33bafc60a36/compiler%2Frustc_lint%2Fsrc%2Fopaque_hidden_inferred_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fopaque_hidden_inferred_bound.rs?ref=faab68eb29121f25b577b50e2e00e33bafc60a36", "patch": "@@ -91,14 +91,12 @@ impl<'tcx> LateLintPass<'tcx> for OpaqueHiddenInferredBound {\n             // For example, in `impl Trait<Assoc = impl Send>`, for all of the bounds on `Assoc`,\n             // e.g. `type Assoc: OtherTrait`, replace `<impl Trait as Trait>::Assoc: OtherTrait`\n             // with `impl Send: OtherTrait`.\n-            for assoc_pred_and_span in\n-                cx.tcx.bound_explicit_item_bounds(proj.projection_ty.item_def_id).transpose_iter()\n+            for (assoc_pred, assoc_pred_span) in cx\n+                .tcx\n+                .bound_explicit_item_bounds(proj.projection_ty.item_def_id)\n+                .subst_iter_copied(cx.tcx, &proj.projection_ty.substs)\n             {\n-                let assoc_pred_span = assoc_pred_and_span.0.1;\n-                let assoc_pred = assoc_pred_and_span\n-                    .map_bound(|(pred, _)| *pred)\n-                    .subst(cx.tcx, &proj.projection_ty.substs)\n-                    .fold_with(proj_replacer);\n+                let assoc_pred = assoc_pred.fold_with(proj_replacer);\n                 let Ok(assoc_pred) = traits::fully_normalize(infcx, traits::ObligationCause::dummy(), cx.param_env, assoc_pred) else {\n                     continue;\n                 };"}, {"sha": "f18c95a61d49e1c0dd67e27a8b77895f86db9e96", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/faab68eb29121f25b577b50e2e00e33bafc60a36/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faab68eb29121f25b577b50e2e00e33bafc60a36/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=faab68eb29121f25b577b50e2e00e33bafc60a36", "patch": "@@ -795,8 +795,7 @@ pub trait PrettyPrinter<'tcx>:\n         let mut fn_traits = FxIndexMap::default();\n         let mut is_sized = false;\n \n-        for predicate in bounds.transpose_iter().map(|e| e.map_bound(|(p, _)| *p)) {\n-            let predicate = predicate.subst(tcx, substs);\n+        for (predicate, _) in bounds.subst_iter_copied(tcx, substs) {\n             let bound_predicate = predicate.kind();\n \n             match bound_predicate.skip_binder() {"}, {"sha": "0660e9b79a700988fe4b20731f8a56af53011c32", "filename": "compiler/rustc_middle/src/ty/subst.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/faab68eb29121f25b577b50e2e00e33bafc60a36/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faab68eb29121f25b577b50e2e00e33bafc60a36/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs?ref=faab68eb29121f25b577b50e2e00e33bafc60a36", "patch": "@@ -6,6 +6,7 @@ use crate::ty::sty::{ClosureSubsts, GeneratorSubsts, InlineConstSubsts};\n use crate::ty::visit::{TypeVisitable, TypeVisitor};\n use crate::ty::{self, Lift, List, ParamConst, Ty, TyCtxt};\n \n+use rustc_data_structures::captures::Captures;\n use rustc_data_structures::intern::{Interned, WithStableHash};\n use rustc_hir::def_id::DefId;\n use rustc_macros::HashStable;\n@@ -558,6 +559,28 @@ impl<T, U> EarlyBinder<(T, U)> {\n     }\n }\n \n+impl<'tcx, 's, T: IntoIterator<Item = I>, I: TypeFoldable<'tcx>> EarlyBinder<T> {\n+    pub fn subst_iter(\n+        self,\n+        tcx: TyCtxt<'tcx>,\n+        substs: &'s [GenericArg<'tcx>],\n+    ) -> impl Iterator<Item = I> + Captures<'s> + Captures<'tcx> {\n+        self.0.into_iter().map(move |t| EarlyBinder(t).subst(tcx, substs))\n+    }\n+}\n+\n+impl<'tcx, 's, 'a, T: IntoIterator<Item = &'a I>, I: Copy + TypeFoldable<'tcx> + 'a>\n+    EarlyBinder<T>\n+{\n+    pub fn subst_iter_copied(\n+        self,\n+        tcx: TyCtxt<'tcx>,\n+        substs: &'s [GenericArg<'tcx>],\n+    ) -> impl Iterator<Item = I> + Captures<'s> + Captures<'tcx> + Captures<'a> {\n+        self.0.into_iter().map(move |t| EarlyBinder(*t).subst(tcx, substs))\n+    }\n+}\n+\n pub struct EarlyBinderIter<T> {\n     t: T,\n }"}, {"sha": "f075de714267688eb0711fe0e631f14cb9c485d3", "filename": "compiler/rustc_parse/src/lexer/unescape_error_reporting.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/faab68eb29121f25b577b50e2e00e33bafc60a36/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funescape_error_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faab68eb29121f25b577b50e2e00e33bafc60a36/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funescape_error_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funescape_error_reporting.rs?ref=faab68eb29121f25b577b50e2e00e33bafc60a36", "patch": "@@ -113,11 +113,26 @@ pub(crate) fn emit_unescape_error(\n                 } else {\n                     (\"\", \"if you meant to write a `str` literal, use double quotes\")\n                 };\n-\n+                let mut escaped = String::with_capacity(lit.len());\n+                let mut chrs = lit.chars().peekable();\n+                while let Some(first) = chrs.next() {\n+                    match (first, chrs.peek()) {\n+                        ('\\\\', Some('\"')) => {\n+                            escaped.push('\\\\');\n+                            escaped.push('\"');\n+                            chrs.next();\n+                        }\n+                        ('\"', _) => {\n+                            escaped.push('\\\\');\n+                            escaped.push('\"')\n+                        }\n+                        (c, _) => escaped.push(c),\n+                    };\n+                }\n                 handler.span_suggestion(\n                     span_with_quotes,\n                     msg,\n-                    format!(\"{}\\\"{}\\\"\", prefix, lit),\n+                    format!(\"{prefix}\\\"{escaped}\\\"\"),\n                     Applicability::MachineApplicable,\n                 );\n             }"}, {"sha": "1217d264a9c1a14625bf9233834fc25bf37e868f", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/faab68eb29121f25b577b50e2e00e33bafc60a36/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faab68eb29121f25b577b50e2e00e33bafc60a36/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=faab68eb29121f25b577b50e2e00e33bafc60a36", "patch": "@@ -764,6 +764,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                             self.suggest_borrowing_for_object_cast(&mut err, &root_obligation, *concrete_ty, *obj_ty);\n                         }\n \n+                        let mut unsatisfied_const = false;\n                         if trait_predicate.is_const_if_const() && obligation.param_env.is_const() {\n                             let non_const_predicate = trait_ref.without_const();\n                             let non_const_obligation = Obligation {\n@@ -773,6 +774,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                                 recursion_depth: obligation.recursion_depth,\n                             };\n                             if self.predicate_may_hold(&non_const_obligation) {\n+                                unsatisfied_const = true;\n                                 err.span_note(\n                                     span,\n                                     &format!(\n@@ -924,7 +926,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                                 }\n                             }\n                         } else if !trait_ref.has_non_region_infer()\n-                            && self.predicate_can_apply(obligation.param_env, trait_ref)\n+                            && self.predicate_can_apply(obligation.param_env, trait_predicate)\n                         {\n                             // If a where-clause may be useful, remind the\n                             // user that they can add it.\n@@ -939,7 +941,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                                 None,\n                                 obligation.cause.body_id,\n                             );\n-                        } else if !suggested {\n+                        } else if !suggested && !unsatisfied_const {\n                             // Can't show anything else useful, try to find similar impls.\n                             let impl_candidates = self.find_similar_impl_candidates(trait_predicate);\n                             if !self.report_similar_impl_candidates(\n@@ -1436,7 +1438,7 @@ trait InferCtxtPrivExt<'tcx> {\n     fn predicate_can_apply(\n         &self,\n         param_env: ty::ParamEnv<'tcx>,\n-        pred: ty::PolyTraitRef<'tcx>,\n+        pred: ty::PolyTraitPredicate<'tcx>,\n     ) -> bool;\n \n     fn note_obligation_cause(&self, err: &mut Diagnostic, obligation: &PredicateObligation<'tcx>);\n@@ -2511,7 +2513,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n     fn predicate_can_apply(\n         &self,\n         param_env: ty::ParamEnv<'tcx>,\n-        pred: ty::PolyTraitRef<'tcx>,\n+        pred: ty::PolyTraitPredicate<'tcx>,\n     ) -> bool {\n         struct ParamToVarFolder<'a, 'tcx> {\n             infcx: &'a InferCtxt<'tcx>,\n@@ -2555,7 +2557,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             let obligation = Obligation::new(\n                 ObligationCause::dummy(),\n                 param_env,\n-                cleaned_pred.without_const().to_predicate(selcx.tcx()),\n+                cleaned_pred.to_predicate(selcx.tcx()),\n             );\n \n             self.predicate_may_hold(&obligation)"}, {"sha": "715f5be8e2f4bbe22dd35ce61078f0aa370c0680", "filename": "compiler/rustc_trait_selection/src/traits/query/normalize.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/faab68eb29121f25b577b50e2e00e33bafc60a36/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faab68eb29121f25b577b50e2e00e33bafc60a36/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs?ref=faab68eb29121f25b577b50e2e00e33bafc60a36", "patch": "@@ -14,6 +14,7 @@ use rustc_infer::traits::Normalized;\n use rustc_middle::ty::fold::{FallibleTypeFolder, TypeFoldable, TypeSuperFoldable};\n use rustc_middle::ty::visit::{TypeSuperVisitable, TypeVisitable};\n use rustc_middle::ty::{self, Ty, TyCtxt, TypeVisitor};\n+use rustc_span::DUMMY_SP;\n \n use std::ops::ControlFlow;\n \n@@ -253,7 +254,15 @@ impl<'cx, 'tcx> FallibleTypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {\n                 let result = tcx.normalize_projection_ty(c_data)?;\n                 // We don't expect ambiguity.\n                 if result.is_ambiguous() {\n-                    bug!(\"unexpected ambiguity: {:?} {:?}\", c_data, result);\n+                    // Rustdoc normalizes possibly not well-formed types, so only\n+                    // treat this as a bug if we're not in rustdoc.\n+                    if !tcx.sess.opts.actually_rustdoc {\n+                        tcx.sess.delay_span_bug(\n+                            DUMMY_SP,\n+                            format!(\"unexpected ambiguity: {:?} {:?}\", c_data, result),\n+                        );\n+                    }\n+                    return Err(NoSolution);\n                 }\n                 let InferOk { value: result, obligations } =\n                     self.infcx.instantiate_query_response_and_region_obligations(\n@@ -296,7 +305,15 @@ impl<'cx, 'tcx> FallibleTypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {\n                 let result = tcx.normalize_projection_ty(c_data)?;\n                 // We don't expect ambiguity.\n                 if result.is_ambiguous() {\n-                    bug!(\"unexpected ambiguity: {:?} {:?}\", c_data, result);\n+                    // Rustdoc normalizes possibly not well-formed types, so only\n+                    // treat this as a bug if we're not in rustdoc.\n+                    if !tcx.sess.opts.actually_rustdoc {\n+                        tcx.sess.delay_span_bug(\n+                            DUMMY_SP,\n+                            format!(\"unexpected ambiguity: {:?} {:?}\", c_data, result),\n+                        );\n+                    }\n+                    return Err(NoSolution);\n                 }\n                 let InferOk { value: result, obligations } =\n                     self.infcx.instantiate_query_response_and_region_obligations("}, {"sha": "c436adf70067ada4bfc043ff8ebb3f6786105ecd", "filename": "library/alloc/src/string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/faab68eb29121f25b577b50e2e00e33bafc60a36/library%2Falloc%2Fsrc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faab68eb29121f25b577b50e2e00e33bafc60a36/library%2Falloc%2Fsrc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstring.rs?ref=faab68eb29121f25b577b50e2e00e33bafc60a36", "patch": "@@ -1851,7 +1851,7 @@ impl String {\n     }\n \n     /// Consumes and leaks the `String`, returning a mutable reference to the contents,\n-    /// `&'a mut str`.\n+    /// `&'static mut str`.\n     ///\n     /// This is mainly useful for data that lives for the remainder of\n     /// the program's life. Dropping the returned reference will cause a memory"}, {"sha": "324f5ffb4a9184347a40b27bcf4205ccb6947a8d", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/faab68eb29121f25b577b50e2e00e33bafc60a36/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/faab68eb29121f25b577b50e2e00e33bafc60a36/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=faab68eb29121f25b577b50e2e00e33bafc60a36", "patch": "@@ -920,7 +920,7 @@ so that we can apply CSS-filters to change the arrow color in themes */\n \tflex-flow: row wrap;\n }\n \n-.search-results .result-name, .search-results div.desc, .search-results .result-description {\n+.search-results .result-name, .search-results div.desc {\n \twidth: 50%;\n }\n .search-results .result-name {\n@@ -1899,10 +1899,10 @@ in storage.js\n \t\tborder-bottom: 1px solid #aaa9;\n \t\tpadding: 5px 0px;\n \t}\n-\t.search-results .result-name, .search-results div.desc, .search-results .result-description {\n+\t.search-results .result-name, .search-results div.desc {\n \t\twidth: 100%;\n \t}\n-\t.search-results div.desc, .search-results .result-description, .item-right {\n+\t.search-results div.desc, .item-right {\n \t\tpadding-left: 2em;\n \t}\n "}, {"sha": "85e17ca9551a2af896074ffc1f5a13dd4b4162e5", "filename": "src/test/rustdoc-gui/headings.goml", "status": "modified", "additions": 76, "deletions": 100, "changes": 176, "blob_url": "https://github.com/rust-lang/rust/blob/faab68eb29121f25b577b50e2e00e33bafc60a36/src%2Ftest%2Frustdoc-gui%2Fheadings.goml", "raw_url": "https://github.com/rust-lang/rust/raw/faab68eb29121f25b577b50e2e00e33bafc60a36/src%2Ftest%2Frustdoc-gui%2Fheadings.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fheadings.goml?ref=faab68eb29121f25b577b50e2e00e33bafc60a36", "patch": "@@ -150,109 +150,85 @@ assert-css: (\"h2#top-doc-prose-title\", {\"border-bottom-width\": \"1px\"})\n assert-css: (\"h3#top-doc-prose-sub-heading\", {\"font-size\": \"20px\"})\n assert-css: (\"h3#top-doc-prose-sub-heading\", {\"border-bottom-width\": \"1px\"})\n \n-// Checking colors now.\n+// Needed to check colors\n show-text: true\n-local-storage: {\"rustdoc-theme\": \"light\", \"rustdoc-use-system-theme\": \"false\"}\n goto: \"file://\" + |DOC_PATH| + \"/test_docs/struct.HeavilyDocumentedStruct.html\"\n-assert-css: (\n-    \".top-doc .docblock h2\",\n-    {\"color\": \"rgb(0, 0, 0)\", \"border-bottom\": \"1px solid rgb(221, 221, 221)\"},\n-)\n-assert-css: (\n-    \".top-doc .docblock h3\",\n-    {\"color\": \"rgb(0, 0, 0)\", \"border-bottom\": \"1px solid rgb(221, 221, 221)\"},\n-)\n-assert-css: (\n-    \".top-doc .docblock h4\",\n-    {\"color\": \"rgb(0, 0, 0)\", \"border-bottom\": \"1px solid rgb(221, 221, 221)\"},\n-)\n-assert-css: (\n-    \".top-doc .docblock h5\",\n-    {\"color\": \"rgb(0, 0, 0)\", \"border-bottom-width\": \"0px\"},\n-)\n-assert-css: (\n-    \"#implementations-list .docblock h4\",\n-    {\"color\": \"rgb(0, 0, 0)\", \"border-bottom-width\": \"0px\"},\n-)\n-assert-css: (\n-    \"#implementations-list .docblock h5\",\n-    {\"color\": \"rgb(0, 0, 0)\", \"border-bottom-width\": \"0px\"},\n-)\n-assert-css: (\n-    \"#implementations-list .docblock h6\",\n-    {\"color\": \"rgb(0, 0, 0)\", \"border-bottom-width\": \"0px\"},\n-)\n \n-local-storage: {\"rustdoc-theme\": \"dark\"}\n-reload:\n-assert-css: (\n-    \".top-doc .docblock h2\",\n-    {\"color\": \"rgb(221, 221, 221)\", \"border-bottom\": \"1px solid rgb(210, 210, 210)\"},\n-)\n-assert-css: (\n-    \".top-doc .docblock h3\",\n-    {\"color\": \"rgb(221, 221, 221)\", \"border-bottom\": \"1px solid rgb(210, 210, 210)\"},\n-)\n-assert-css: (\n-    \".top-doc .docblock h4\",\n-    {\"color\": \"rgb(221, 221, 221)\", \"border-bottom\": \"1px solid rgb(210, 210, 210)\"},\n-)\n-assert-css: (\n-    \".top-doc .docblock h5\",\n-    {\"color\": \"rgb(221, 221, 221)\", \"border-bottom-width\": \"0px\"},\n-)\n-assert-css: (\n-    \"#implementations-list .docblock h4\",\n-    {\"color\": \"rgb(221, 221, 221)\", \"border-bottom-width\": \"0px\"},\n-)\n-assert-css: (\n-    \"#implementations-list .docblock h5\",\n-    {\"color\": \"rgb(221, 221, 221)\", \"border-bottom-width\": \"0px\"},\n-)\n-assert-css: (\n-    \"#implementations-list .docblock h6\",\n-    {\"color\": \"rgb(221, 221, 221)\", \"border-bottom-width\": \"0px\"},\n+define-function: (\n+    \"check-colors\",\n+    (theme, heading_color, small_heading_color, heading_border_color),\n+    [\n+        (\"local-storage\", {\"rustdoc-theme\": |theme|, \"rustdoc-use-system-theme\": \"false\"}),\n+        (\"reload\"),\n+        (\"assert-css\", (\n+            \".top-doc .docblock h2\",\n+            {\"color\": |heading_color|, \"border-bottom\": \"1px solid \" + |heading_border_color|},\n+        )),\n+        (\"assert-css\", (\n+            \".top-doc .docblock h3\",\n+            {\"color\": |heading_color|, \"border-bottom\": \"1px solid \" + |heading_border_color|},\n+        )),\n+        (\"assert-css\", (\n+            \".top-doc .docblock h4\",\n+            {\"color\": |heading_color|, \"border-bottom\": \"1px solid \" + |heading_border_color|},\n+        )),\n+        (\"assert-css\", (\n+            \".top-doc .docblock h5\",\n+            {\"color\": |small_heading_color|, \"border-bottom-width\": \"0px\"},\n+        )),\n+        (\"assert-css\", (\n+            \"#implementations-list .docblock h4\",\n+            {\"color\": |heading_color|, \"border-bottom-width\": \"0px\"},\n+        )),\n+        (\"assert-css\", (\n+            \"#implementations-list .docblock h5\",\n+            {\"color\": |small_heading_color|, \"border-bottom-width\": \"0px\"},\n+        )),\n+        (\"assert-css\", (\n+            \"#implementations-list .docblock h6\",\n+            {\"color\": |small_heading_color|, \"border-bottom-width\": \"0px\"},\n+        )),\n+    ],\n+)\n+call-function: (\n+    \"check-colors\",\n+    {\n+        \"theme\": \"ayu\",\n+        \"heading_color\": \"rgb(255, 255, 255)\",\n+        \"small_heading_color\": \"rgb(197, 197, 197)\",\n+        \"heading_border_color\": \"rgb(92, 103, 115)\",\n+    },\n+)\n+call-function: (\n+    \"check-colors\",\n+    {\n+        \"theme\": \"dark\",\n+        \"heading_color\": \"rgb(221, 221, 221)\",\n+        \"small_heading_color\": \"rgb(221, 221, 221)\",\n+        \"heading_border_color\": \"rgb(210, 210, 210)\",\n+    },\n+)\n+call-function: (\n+    \"check-colors\",\n+    {\n+        \"theme\": \"light\",\n+        \"heading_color\": \"rgb(0, 0, 0)\",\n+        \"small_heading_color\": \"rgb(0, 0, 0)\",\n+        \"heading_border_color\": \"rgb(221, 221, 221)\",\n+    },\n+)\n+\n+define-function: (\n+    \"check-since-color\",\n+    (theme),\n+    [\n+        (\"local-storage\", {\"rustdoc-theme\": |theme|}),\n+        (\"reload\"),\n+        (\"assert-css\", (\".since\", {\"color\": \"rgb(128, 128, 128)\"}, ALL)),\n+    ],\n )\n \n-local-storage: {\"rustdoc-theme\": \"ayu\"}\n-reload:\n-assert-css: (\n-    \".top-doc .docblock h2\",\n-    {\"color\": \"rgb(255, 255, 255)\", \"border-bottom\": \"1px solid rgb(92, 103, 115)\"},\n-)\n-assert-css: (\n-    \".top-doc .docblock h2\",\n-    {\"color\": \"rgb(255, 255, 255)\", \"border-bottom\": \"1px solid rgb(92, 103, 115)\"},\n-)\n-assert-css: (\n-    \".top-doc .docblock h4\",\n-    {\"color\": \"rgb(255, 255, 255)\", \"border-bottom\": \"1px solid rgb(92, 103, 115)\"},\n-)\n-assert-css: (\n-    \".top-doc .docblock h5\",\n-    {\"color\": \"rgb(197, 197, 197)\", \"border-bottom-width\": \"0px\"},\n-)\n-assert-css: (\n-    \"#implementations-list .docblock h4\",\n-    {\"color\": \"rgb(255, 255, 255)\", \"border-bottom-width\": \"0px\"},\n-)\n-assert-css: (\n-    \"#implementations-list .docblock h5\",\n-    {\"color\": \"rgb(197, 197, 197)\", \"border-bottom-width\": \"0px\"},\n-)\n-assert-css: (\n-    \"#implementations-list .docblock h6\",\n-    {\"color\": \"rgb(197, 197, 197)\", \"border-bottom-width\": \"0px\"},\n-)\n-\n-local-storage: {\"rustdoc-theme\": \"light\"}\n goto: \"file://\" + |DOC_PATH| + \"/staged_api/struct.Foo.html\"\n-assert-css: (\".since\", {\"color\": \"rgb(128, 128, 128)\"}, ALL)\n-\n-local-storage: {\"rustdoc-theme\": \"dark\"}\n-reload:\n-assert-css: (\".since\", {\"color\": \"rgb(128, 128, 128)\"}, ALL)\n-\n-local-storage: {\"rustdoc-theme\": \"ayu\"}\n-reload:\n-assert-css: (\".since\", {\"color\": \"rgb(128, 128, 128)\"}, ALL)\n+call-function: (\"check-since-color\", (\"ayu\"))\n+call-function: (\"check-since-color\", (\"dark\"))\n+call-function: (\"check-since-color\", (\"light\"))"}, {"sha": "1e9f925f8458db2f59d9d4e31c486857ddb884a1", "filename": "src/test/rustdoc/not-wf-ambiguous-normalization.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/faab68eb29121f25b577b50e2e00e33bafc60a36/src%2Ftest%2Frustdoc%2Fnot-wf-ambiguous-normalization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faab68eb29121f25b577b50e2e00e33bafc60a36/src%2Ftest%2Frustdoc%2Fnot-wf-ambiguous-normalization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fnot-wf-ambiguous-normalization.rs?ref=faab68eb29121f25b577b50e2e00e33bafc60a36", "patch": "@@ -0,0 +1,24 @@\n+// compile-flags: -Znormalize-docs\n+\n+#![feature(type_alias_impl_trait)]\n+\n+trait Allocator {\n+    type Buffer;\n+}\n+\n+struct DefaultAllocator;\n+\n+// This unconstrained impl parameter causes the normalization of\n+// `<DefaultAllocator as Allocator>::Buffer` to be ambiguous,\n+// which caused an ICE with `-Znormalize-docs`.\n+impl<T> Allocator for DefaultAllocator {\n+    type Buffer = ();\n+}\n+\n+type A = impl Fn(<DefaultAllocator as Allocator>::Buffer);\n+\n+fn foo() -> A {\n+    |_| ()\n+}\n+\n+fn main() {}"}, {"sha": "12244450e7f8f769d840aa0ce8804f014624cd87", "filename": "src/test/ui/consts/const-eval/const_raw_ptr_ops.stderr", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/faab68eb29121f25b577b50e2e00e33bafc60a36/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/faab68eb29121f25b577b50e2e00e33bafc60a36/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops.stderr?ref=faab68eb29121f25b577b50e2e00e33bafc60a36", "patch": "@@ -10,16 +10,6 @@ note: the trait `PartialEq<_>` is implemented for `*const i32`, but that impleme\n    |\n LL | const X: bool = unsafe { &1 as *const i32 == &2 as *const i32 };\n    |                                           ^^\n-   = help: the following other types implement trait `PartialEq<Rhs>`:\n-             f32\n-             f64\n-             i128\n-             i16\n-             i32\n-             i64\n-             i8\n-             isize\n-           and 6 others\n \n error[E0277]: can't compare `*const i32` with `_` in const contexts\n   --> $DIR/const_raw_ptr_ops.rs:6:44\n@@ -33,16 +23,6 @@ note: the trait `PartialEq<_>` is implemented for `*const i32`, but that impleme\n    |\n LL | const X2: bool = unsafe { 42 as *const i32 == 43 as *const i32 };\n    |                                            ^^\n-   = help: the following other types implement trait `PartialEq<Rhs>`:\n-             f32\n-             f64\n-             i128\n-             i16\n-             i32\n-             i64\n-             i8\n-             isize\n-           and 6 others\n \n error: aborting due to 2 previous errors\n "}, {"sha": "905c5ee6eb4a0530ed1fe2858466041d0b83b869", "filename": "src/test/ui/consts/issue-25826.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/faab68eb29121f25b577b50e2e00e33bafc60a36/src%2Ftest%2Fui%2Fconsts%2Fissue-25826.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/faab68eb29121f25b577b50e2e00e33bafc60a36/src%2Ftest%2Fui%2Fconsts%2Fissue-25826.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-25826.stderr?ref=faab68eb29121f25b577b50e2e00e33bafc60a36", "patch": "@@ -10,10 +10,6 @@ note: the trait `PartialOrd` is implemented for `*const ()`, but that implementa\n    |\n LL |     const A: bool = unsafe { id::<u8> as *const () < id::<u16> as *const () };\n    |                                                    ^\n-help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n-   |\n-LL | fn main() where *const (): ~const PartialOrd {\n-   |           ++++++++++++++++++++++++++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "f4683f7f5361dedcf2b4c1c25ed52989b8a5c3bd", "filename": "src/test/ui/consts/issue-94675.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/faab68eb29121f25b577b50e2e00e33bafc60a36/src%2Ftest%2Fui%2Fconsts%2Fissue-94675.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/faab68eb29121f25b577b50e2e00e33bafc60a36/src%2Ftest%2Fui%2Fconsts%2Fissue-94675.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-94675.stderr?ref=faab68eb29121f25b577b50e2e00e33bafc60a36", "patch": "@@ -23,10 +23,6 @@ note: the trait `IndexMut<usize>` is implemented for `Vec<usize>`, but that impl\n    |\n LL |         self.bar[0] = baz.len();\n    |         ^^^^^^^^^^^\n-help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n-   |\n-LL | impl<'a> Foo<'a> where Vec<usize>: ~const IndexMut<usize> {\n-   |                  ++++++++++++++++++++++++++++++++++++++++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "45ae2b8ad3a69c83a7ae23660dbc2e69e63518c8", "filename": "src/test/ui/impl-trait/in-trait/default-body-type-err-2.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/faab68eb29121f25b577b50e2e00e33bafc60a36/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-type-err-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faab68eb29121f25b577b50e2e00e33bafc60a36/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-type-err-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-type-err-2.rs?ref=faab68eb29121f25b577b50e2e00e33bafc60a36", "patch": "@@ -0,0 +1,13 @@\n+// edition:2021\n+\n+#![allow(incomplete_features)]\n+#![feature(async_fn_in_trait)]\n+\n+pub trait Foo {\n+    async fn woopsie_async(&self) -> String {\n+        42\n+        //~^ ERROR mismatched types\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "142b1bff1a46a265a776325d7e73eb0894cf4b22", "filename": "src/test/ui/impl-trait/in-trait/default-body-type-err-2.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/faab68eb29121f25b577b50e2e00e33bafc60a36/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-type-err-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/faab68eb29121f25b577b50e2e00e33bafc60a36/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-type-err-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-type-err-2.stderr?ref=faab68eb29121f25b577b50e2e00e33bafc60a36", "patch": "@@ -0,0 +1,11 @@\n+error[E0308]: mismatched types\n+  --> $DIR/default-body-type-err-2.rs:8:9\n+   |\n+LL |         42\n+   |         ^^- help: try using a conversion method: `.to_string()`\n+   |         |\n+   |         expected struct `String`, found integer\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "ac9baf91cae37f17e72ccfa5b32744223ec19f80", "filename": "src/test/ui/impl-trait/in-trait/default-body-type-err.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/faab68eb29121f25b577b50e2e00e33bafc60a36/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-type-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faab68eb29121f25b577b50e2e00e33bafc60a36/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-type-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-type-err.rs?ref=faab68eb29121f25b577b50e2e00e33bafc60a36", "patch": "@@ -0,0 +1,13 @@\n+#![allow(incomplete_features)]\n+#![feature(return_position_impl_trait_in_trait)]\n+\n+use std::ops::Deref;\n+\n+pub trait Foo {\n+    fn lol(&self) -> impl Deref<Target = String> {\n+        //~^ type mismatch resolving `<&i32 as Deref>::Target == String`\n+        &1i32\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "461247a3e3ff4c532c843ad19f1c8034b9d6cf79", "filename": "src/test/ui/impl-trait/in-trait/default-body-type-err.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/faab68eb29121f25b577b50e2e00e33bafc60a36/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-type-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/faab68eb29121f25b577b50e2e00e33bafc60a36/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-type-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-type-err.stderr?ref=faab68eb29121f25b577b50e2e00e33bafc60a36", "patch": "@@ -0,0 +1,12 @@\n+error[E0271]: type mismatch resolving `<&i32 as Deref>::Target == String`\n+  --> $DIR/default-body-type-err.rs:7:22\n+   |\n+LL |     fn lol(&self) -> impl Deref<Target = String> {\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `i32`, found struct `String`\n+LL |\n+LL |         &1i32\n+   |         ----- return type was inferred to be `&i32` here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0271`."}, {"sha": "ad3cc7c2524b90f650b23761300d2591dfdc821b", "filename": "src/test/ui/impl-trait/in-trait/default-body-with-rpit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/faab68eb29121f25b577b50e2e00e33bafc60a36/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-with-rpit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faab68eb29121f25b577b50e2e00e33bafc60a36/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-with-rpit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-with-rpit.rs?ref=faab68eb29121f25b577b50e2e00e33bafc60a36", "patch": "@@ -1,4 +1,4 @@\n-// known-bug: #102688\n+// check-pass\n // edition:2021\n \n #![feature(async_fn_in_trait, return_position_impl_trait_in_trait)]"}, {"sha": "4529d301f9e91e3c50ee151bd97a5de6e4d7a335", "filename": "src/test/ui/impl-trait/in-trait/default-body-with-rpit.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6c9c2d862dd10718ba2b2a320c3390995ad414bc/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-with-rpit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6c9c2d862dd10718ba2b2a320c3390995ad414bc/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-with-rpit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-with-rpit.stderr?ref=6c9c2d862dd10718ba2b2a320c3390995ad414bc", "patch": "@@ -1,12 +0,0 @@\n-error[E0720]: cannot resolve opaque type\n-  --> $DIR/default-body-with-rpit.rs:10:28\n-   |\n-LL |     async fn baz(&self) -> impl Debug {\n-   |                            ^^^^^^^^^^ cannot resolve opaque type\n-   |\n-   = note: these returned values have a concrete \"never\" type\n-   = help: this error will resolve once the item's body returns a concrete type\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0720`."}, {"sha": "197aedf9d98bc95444224cb00a59dee2e93e2aff", "filename": "src/test/ui/impl-trait/issue-103181-1.rs", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/faab68eb29121f25b577b50e2e00e33bafc60a36/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-103181-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faab68eb29121f25b577b50e2e00e33bafc60a36/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-103181-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-103181-1.rs?ref=faab68eb29121f25b577b50e2e00e33bafc60a36", "patch": "@@ -0,0 +1,85 @@\n+// edition:2021\n+\n+mod hyper {\n+    use std::{fmt::Debug, future::Future, marker::PhantomData, pin::Pin, task::Poll};\n+\n+    pub trait HttpBody {\n+        type Error;\n+    }\n+    impl HttpBody for () {\n+        //~^ ERROR not all trait items implemented, missing: `Error`\n+        // don't implement `Error` here for the ICE\n+    }\n+\n+    pub struct Server<I, S>(I, S);\n+\n+    pub fn serve<I, S>(_: S) -> Server<I, S> {\n+        todo!()\n+    }\n+\n+    impl<S, B> Future for Server<(), S>\n+    where\n+        S: MakeServiceRef<(), (), ResBody = B>,\n+        B: HttpBody,\n+        B::Error: Debug,\n+    {\n+        type Output = ();\n+\n+        fn poll(self: Pin<&mut Self>, _: &mut std::task::Context<'_>) -> Poll<Self::Output> {\n+            todo!()\n+        }\n+    }\n+\n+    pub trait MakeServiceRef<Target, ReqBody> {\n+        type ResBody;\n+    }\n+\n+    impl<T, S> MakeServiceRef<(), ()> for T\n+    where\n+        T: for<'a> Service<&'a (), Response = S>,\n+        S: Service<()>,\n+    {\n+        type ResBody = ();\n+    }\n+\n+    pub struct MakeServiceFn<F>(pub F);\n+    pub struct ServiceFn<F, R>(pub PhantomData<(F, R)>);\n+\n+    pub trait Service<Request> {\n+        type Response;\n+    }\n+\n+    impl<'t, F, Ret, Target, Svc> Service<&'t Target> for MakeServiceFn<F>\n+    where\n+        F: Fn() -> Ret,\n+        Ret: Future<Output = Result<Svc, ()>>,\n+    {\n+        type Response = Svc;\n+    }\n+\n+    impl<F, ReqBody, Ret, ResBody, E> Service<ReqBody> for ServiceFn<F, ReqBody>\n+    where\n+        F: Fn() -> Ret,\n+        Ret: Future<Output = Result<ResBody, E>>,\n+    {\n+        type Response = ResBody;\n+    }\n+}\n+\n+async fn smarvice() -> Result<(), ()> {\n+    Ok(())\n+}\n+\n+fn service_fn<F, R, S>(f: F) -> hyper::ServiceFn<F, R>\n+where\n+    F: Fn() -> S,\n+{\n+    hyper::ServiceFn(std::marker::PhantomData)\n+}\n+\n+async fn iceice() {\n+    let service = hyper::MakeServiceFn(|| async { Ok::<_, ()>(service_fn(|| smarvice())) });\n+    hyper::serve::<(), _>(service).await;\n+}\n+\n+fn main() {}"}, {"sha": "cd026607d52fc1b63f745c12c2239e9a987d0dd5", "filename": "src/test/ui/impl-trait/issue-103181-1.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/faab68eb29121f25b577b50e2e00e33bafc60a36/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-103181-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/faab68eb29121f25b577b50e2e00e33bafc60a36/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-103181-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-103181-1.stderr?ref=faab68eb29121f25b577b50e2e00e33bafc60a36", "patch": "@@ -0,0 +1,12 @@\n+error[E0046]: not all trait items implemented, missing: `Error`\n+  --> $DIR/issue-103181-1.rs:9:5\n+   |\n+LL |         type Error;\n+   |         ---------- `Error` from trait\n+LL |     }\n+LL |     impl HttpBody for () {\n+   |     ^^^^^^^^^^^^^^^^^^^^ missing `Error` in implementation\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0046`."}, {"sha": "b43ac45075e2bd409500b7209052e6bd18807141", "filename": "src/test/ui/impl-trait/issue-103181-2.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/faab68eb29121f25b577b50e2e00e33bafc60a36/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-103181-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faab68eb29121f25b577b50e2e00e33bafc60a36/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-103181-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-103181-2.rs?ref=faab68eb29121f25b577b50e2e00e33bafc60a36", "patch": "@@ -0,0 +1,29 @@\n+// edition:2021\n+\n+trait SendFuture: Send {\n+    type Output;\n+}\n+\n+impl<Fut: Send> SendFuture for Fut {\n+    type Output = ();\n+}\n+\n+async fn broken_fut() {\n+    ident_error;\n+    //~^ ERROR cannot find value `ident_error` in this scope\n+}\n+\n+// triggers normalization of `<Fut as SendFuture>::Output`,\n+// which requires `Fut: Send`.\n+fn normalize<Fut: SendFuture>(_: Fut, _: Fut::Output) {}\n+\n+async fn iceice<A, B>()\n+// <- async fn is necessary\n+where\n+    A: Send,\n+    B: Send, // <- a second bound\n+{\n+    normalize(broken_fut(), ());\n+}\n+\n+fn main() {}"}, {"sha": "5eb2dd9184bec9dfe3b34e611ba192270316ff94", "filename": "src/test/ui/impl-trait/issue-103181-2.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/faab68eb29121f25b577b50e2e00e33bafc60a36/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-103181-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/faab68eb29121f25b577b50e2e00e33bafc60a36/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-103181-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-103181-2.stderr?ref=faab68eb29121f25b577b50e2e00e33bafc60a36", "patch": "@@ -0,0 +1,9 @@\n+error[E0425]: cannot find value `ident_error` in this scope\n+  --> $DIR/issue-103181-2.rs:12:5\n+   |\n+LL |     ident_error;\n+   |     ^^^^^^^^^^^ not found in this scope\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0425`."}, {"sha": "bab1854dc51735737921efd4e28076b47085d453", "filename": "src/test/ui/inference/char-as-str-single.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/faab68eb29121f25b577b50e2e00e33bafc60a36/src%2Ftest%2Fui%2Finference%2Fchar-as-str-single.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/faab68eb29121f25b577b50e2e00e33bafc60a36/src%2Ftest%2Fui%2Finference%2Fchar-as-str-single.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fchar-as-str-single.fixed?ref=faab68eb29121f25b577b50e2e00e33bafc60a36", "patch": "@@ -8,4 +8,5 @@\n fn main() {\n     let _: char = 'a'; //~ ERROR mismatched types\n     let _: char = '\u4eba'; //~ ERROR mismatched types\n+    let _: char = '\\''; //~ ERROR mismatched types\n }"}, {"sha": "736920643b2c4dd5ac7c8bc2ee9d0480b23c0e00", "filename": "src/test/ui/inference/char-as-str-single.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/faab68eb29121f25b577b50e2e00e33bafc60a36/src%2Ftest%2Fui%2Finference%2Fchar-as-str-single.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faab68eb29121f25b577b50e2e00e33bafc60a36/src%2Ftest%2Fui%2Finference%2Fchar-as-str-single.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fchar-as-str-single.rs?ref=faab68eb29121f25b577b50e2e00e33bafc60a36", "patch": "@@ -8,4 +8,5 @@\n fn main() {\n     let _: char = \"a\"; //~ ERROR mismatched types\n     let _: char = \"\u4eba\"; //~ ERROR mismatched types\n+    let _: char = \"'\"; //~ ERROR mismatched types\n }"}, {"sha": "3375ec6ac32cac2508a3d104f1f8af48af6fe1a4", "filename": "src/test/ui/inference/char-as-str-single.stderr", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/faab68eb29121f25b577b50e2e00e33bafc60a36/src%2Ftest%2Fui%2Finference%2Fchar-as-str-single.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/faab68eb29121f25b577b50e2e00e33bafc60a36/src%2Ftest%2Fui%2Finference%2Fchar-as-str-single.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fchar-as-str-single.stderr?ref=faab68eb29121f25b577b50e2e00e33bafc60a36", "patch": "@@ -24,6 +24,19 @@ help: if you meant to write a `char` literal, use single quotes\n LL |     let _: char = '\u4eba';\n    |                   ~~~~\n \n-error: aborting due to 2 previous errors\n+error[E0308]: mismatched types\n+  --> $DIR/char-as-str-single.rs:11:19\n+   |\n+LL |     let _: char = \"'\";\n+   |            ----   ^^^ expected `char`, found `&str`\n+   |            |\n+   |            expected due to this\n+   |\n+help: if you meant to write a `char` literal, use single quotes\n+   |\n+LL |     let _: char = '\\'';\n+   |                   ~~~~\n+\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}, {"sha": "6aea809cbdb29ff0b8e127017d53339470af16ec", "filename": "src/test/ui/inference/str-as-char.fixed", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/faab68eb29121f25b577b50e2e00e33bafc60a36/src%2Ftest%2Fui%2Finference%2Fstr-as-char.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/faab68eb29121f25b577b50e2e00e33bafc60a36/src%2Ftest%2Fui%2Finference%2Fstr-as-char.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fstr-as-char.fixed?ref=faab68eb29121f25b577b50e2e00e33bafc60a36", "patch": "@@ -4,5 +4,7 @@\n // run-rustfix\n \n fn main() {\n-    let _: &str = \"a\"; //~ ERROR mismatched types\n+    let _: &str = \"a\";   //~ ERROR mismatched types\n+    let _: &str = \"\\\"\\\"\\\"\"; //~ ERROR character literal may only contain one codepoint\n+    let _: &str = \"\\\"\\\"\\\"\"; //~ ERROR character literal may only contain one codepoint\n }"}, {"sha": "eaa8d788c34674ea2ad88003c097a7d3552c024a", "filename": "src/test/ui/inference/str-as-char.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/faab68eb29121f25b577b50e2e00e33bafc60a36/src%2Ftest%2Fui%2Finference%2Fstr-as-char.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faab68eb29121f25b577b50e2e00e33bafc60a36/src%2Ftest%2Fui%2Finference%2Fstr-as-char.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fstr-as-char.rs?ref=faab68eb29121f25b577b50e2e00e33bafc60a36", "patch": "@@ -4,5 +4,7 @@\n // run-rustfix\n \n fn main() {\n-    let _: &str = 'a'; //~ ERROR mismatched types\n+    let _: &str = 'a';   //~ ERROR mismatched types\n+    let _: &str = '\"\"\"'; //~ ERROR character literal may only contain one codepoint\n+    let _: &str = '\\\"\\\"\\\"'; //~ ERROR character literal may only contain one codepoint\n }"}, {"sha": "2c84dac8e0c15e481112c257a2c3db7c953d8b6c", "filename": "src/test/ui/inference/str-as-char.stderr", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/faab68eb29121f25b577b50e2e00e33bafc60a36/src%2Ftest%2Fui%2Finference%2Fstr-as-char.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/faab68eb29121f25b577b50e2e00e33bafc60a36/src%2Ftest%2Fui%2Finference%2Fstr-as-char.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fstr-as-char.stderr?ref=faab68eb29121f25b577b50e2e00e33bafc60a36", "patch": "@@ -1,3 +1,25 @@\n+error: character literal may only contain one codepoint\n+  --> $DIR/str-as-char.rs:8:19\n+   |\n+LL |     let _: &str = '\"\"\"';\n+   |                   ^^^^^\n+   |\n+help: if you meant to write a `str` literal, use double quotes\n+   |\n+LL |     let _: &str = \"\\\"\\\"\\\"\";\n+   |                   ~~~~~~~~\n+\n+error: character literal may only contain one codepoint\n+  --> $DIR/str-as-char.rs:9:19\n+   |\n+LL |     let _: &str = '\\\"\\\"\\\"';\n+   |                   ^^^^^^^^\n+   |\n+help: if you meant to write a `str` literal, use double quotes\n+   |\n+LL |     let _: &str = \"\\\"\\\"\\\"\";\n+   |                   ~~~~~~~~\n+\n error[E0308]: mismatched types\n   --> $DIR/str-as-char.rs:7:19\n    |\n@@ -11,6 +33,6 @@ help: if you meant to write a `str` literal, use double quotes\n LL |     let _: &str = \"a\";\n    |                   ~~~\n \n-error: aborting due to previous error\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}, {"sha": "89177b0f1ac1c5bd49d2d7870e7a53478932c80a", "filename": "src/test/ui/rfc-2632-const-trait-impl/assoc-type.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/faab68eb29121f25b577b50e2e00e33bafc60a36/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fassoc-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/faab68eb29121f25b577b50e2e00e33bafc60a36/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fassoc-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fassoc-type.stderr?ref=faab68eb29121f25b577b50e2e00e33bafc60a36", "patch": "@@ -15,10 +15,6 @@ note: required by a bound in `Foo::Bar`\n    |\n LL |     type Bar: ~const std::ops::Add;\n    |               ^^^^^^^^^^^^^^^^^^^^ required by this bound in `Foo::Bar`\n-help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n-   |\n-LL | impl const Foo for NonConstAdd where NonConstAdd: ~const Add {\n-   |                                +++++++++++++++++++++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "7350909ba8e19f075ee8c2161d9879866539d174", "filename": "src/test/ui/rfc-2632-const-trait-impl/call-const-trait-method-fail.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/faab68eb29121f25b577b50e2e00e33bafc60a36/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-const-trait-method-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/faab68eb29121f25b577b50e2e00e33bafc60a36/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-const-trait-method-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-const-trait-method-fail.stderr?ref=faab68eb29121f25b577b50e2e00e33bafc60a36", "patch": "@@ -9,10 +9,6 @@ note: the trait `Plus` is implemented for `u32`, but that implementation is not\n    |\n LL |     a.plus(b)\n    |       ^^^^\n-help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n-   |\n-LL | pub const fn add_u32(a: u32, b: u32) -> u32 where u32: ~const Plus {\n-   |                                             ++++++++++++++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "31e6dbdab2258111b1f6de71384adf30870bad6d", "filename": "src/test/ui/rfc-2632-const-trait-impl/call-generic-method-fail.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/faab68eb29121f25b577b50e2e00e33bafc60a36/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/faab68eb29121f25b577b50e2e00e33bafc60a36/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-fail.stderr?ref=faab68eb29121f25b577b50e2e00e33bafc60a36", "patch": "@@ -9,7 +9,6 @@ note: the trait `PartialEq<_>` is implemented for `T`, but that implementation i\n    |\n LL |     *t == *t\n    |        ^^\n-   = help: the trait `PartialEq<&B>` is implemented for `&A`\n \n error: aborting due to previous error\n "}, {"sha": "c64930db9bee2ee1b695337ff1f12ed29c797e2e", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-default-method-bodies.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/faab68eb29121f25b577b50e2e00e33bafc60a36/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-default-method-bodies.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/faab68eb29121f25b577b50e2e00e33bafc60a36/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-default-method-bodies.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-default-method-bodies.stderr?ref=faab68eb29121f25b577b50e2e00e33bafc60a36", "patch": "@@ -11,10 +11,6 @@ note: the trait `ConstDefaultFn` is implemented for `NonConstImpl`, but that imp\n    |\n LL |     NonConstImpl.a();\n    |     ^^^^^^^^^^^^\n-help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n-   |\n-LL | const fn test() where NonConstImpl: ~const ConstDefaultFn {\n-   |                 +++++++++++++++++++++++++++++++++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "925ae53e3249961c776b16e6d3e0de54ecb03ffc", "filename": "src/test/ui/rfc-2632-const-trait-impl/cross-crate.gatednc.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/faab68eb29121f25b577b50e2e00e33bafc60a36/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate.gatednc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/faab68eb29121f25b577b50e2e00e33bafc60a36/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate.gatednc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate.gatednc.stderr?ref=faab68eb29121f25b577b50e2e00e33bafc60a36", "patch": "@@ -11,10 +11,6 @@ note: the trait `cross_crate::MyTrait` is implemented for `cross_crate::NonConst\n    |\n LL |     NonConst.func();\n    |     ^^^^^^^^\n-help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n-   |\n-LL | const fn const_context() where cross_crate::NonConst: ~const cross_crate::MyTrait {\n-   |                          ++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "11db0c2b8f290bff0447a0cc2a7cb3a6b2ac6e7d", "filename": "src/test/ui/rfc-2632-const-trait-impl/cross-crate.stocknc.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/faab68eb29121f25b577b50e2e00e33bafc60a36/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate.stocknc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/faab68eb29121f25b577b50e2e00e33bafc60a36/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate.stocknc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate.stocknc.stderr?ref=faab68eb29121f25b577b50e2e00e33bafc60a36", "patch": "@@ -11,10 +11,6 @@ note: the trait `cross_crate::MyTrait` is implemented for `cross_crate::NonConst\n    |\n LL |     NonConst.func();\n    |     ^^^^^^^^\n-help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n-   |\n-LL | const fn const_context() where cross_crate::NonConst: ~const cross_crate::MyTrait {\n-   |                          ++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "a244ab10cab6bd8590d01ead973ca6488bdbc921", "filename": "src/test/ui/rfc-2632-const-trait-impl/default-method-body-is-const-body-checking.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/faab68eb29121f25b577b50e2e00e33bafc60a36/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fdefault-method-body-is-const-body-checking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/faab68eb29121f25b577b50e2e00e33bafc60a36/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fdefault-method-body-is-const-body-checking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fdefault-method-body-is-const-body-checking.stderr?ref=faab68eb29121f25b577b50e2e00e33bafc60a36", "patch": "@@ -14,10 +14,6 @@ note: required by a bound in `foo`\n    |\n LL | const fn foo<T>() where T: ~const Tr {}\n    |                            ^^^^^^^^^ required by this bound in `foo`\n-help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n-   |\n-LL | pub trait Foo where (): ~const Tr {\n-   |               +++++++++++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "c2c16921c2eb233fb9ef3ea76cc96e0f25dddd26", "filename": "src/test/ui/rfc-2632-const-trait-impl/default-method-body-is-const-same-trait-ck.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/faab68eb29121f25b577b50e2e00e33bafc60a36/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fdefault-method-body-is-const-same-trait-ck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/faab68eb29121f25b577b50e2e00e33bafc60a36/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fdefault-method-body-is-const-same-trait-ck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fdefault-method-body-is-const-same-trait-ck.stderr?ref=faab68eb29121f25b577b50e2e00e33bafc60a36", "patch": "@@ -11,10 +11,6 @@ note: the trait `Tr` is implemented for `()`, but that implementation is not `co\n    |\n LL |         ().a()\n    |         ^^\n-help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n-   |\n-LL | pub trait Tr where (): ~const Tr {\n-   |              +++++++++++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "1f8f312df012886392d5c36affb290851a342598", "filename": "src/test/ui/rfc-2632-const-trait-impl/super-traits-fail.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/faab68eb29121f25b577b50e2e00e33bafc60a36/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/faab68eb29121f25b577b50e2e00e33bafc60a36/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail.stderr?ref=faab68eb29121f25b577b50e2e00e33bafc60a36", "patch": "@@ -14,10 +14,6 @@ note: required by a bound in `Bar`\n    |\n LL | trait Bar: ~const Foo {}\n    |            ^^^^^^^^^^ required by this bound in `Bar`\n-help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n-   |\n-LL | impl const Bar for S where S: ~const Foo {}\n-   |                      +++++++++++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "3b5a9ba83568c05d2c979d05634ac5d408fc1b5d", "filename": "src/tools/clippy/clippy_utils/src/ty.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/faab68eb29121f25b577b50e2e00e33bafc60a36/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faab68eb29121f25b577b50e2e00e33bafc60a36/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs?ref=faab68eb29121f25b577b50e2e00e33bafc60a36", "patch": "@@ -657,21 +657,18 @@ fn sig_for_projection<'tcx>(cx: &LateContext<'tcx>, ty: ProjectionTy<'tcx>) -> O\n     let mut output = None;\n     let lang_items = cx.tcx.lang_items();\n \n-    for pred in cx\n+    for (pred, _) in cx\n         .tcx\n         .bound_explicit_item_bounds(ty.item_def_id)\n-        .transpose_iter()\n-        .map(|x| x.map_bound(|(p, _)| p))\n+        .subst_iter_copied(cx.tcx, ty.substs)\n     {\n-        match pred.0.kind().skip_binder() {\n+        match pred.kind().skip_binder() {\n             PredicateKind::Trait(p)\n                 if (lang_items.fn_trait() == Some(p.def_id())\n                     || lang_items.fn_mut_trait() == Some(p.def_id())\n                     || lang_items.fn_once_trait() == Some(p.def_id())) =>\n             {\n-                let i = pred\n-                    .map_bound(|pred| pred.kind().rebind(p.trait_ref.substs.type_at(1)))\n-                    .subst(cx.tcx, ty.substs);\n+                let i = pred.kind().rebind(p.trait_ref.substs.type_at(1));\n \n                 if inputs.map_or(false, |inputs| inputs != i) {\n                     // Multiple different fn trait impls. Is this even allowed?\n@@ -684,10 +681,7 @@ fn sig_for_projection<'tcx>(cx: &LateContext<'tcx>, ty: ProjectionTy<'tcx>) -> O\n                     // Multiple different fn trait impls. Is this even allowed?\n                     return None;\n                 }\n-                output = Some(\n-                    pred.map_bound(|pred| pred.kind().rebind(p.term.ty().unwrap()))\n-                        .subst(cx.tcx, ty.substs),\n-                );\n+                output = pred.kind().rebind(p.term.ty()).transpose();\n             },\n             _ => (),\n         }"}]}