{"sha": "03923661afd565efbd9d000c1bc2eaa98206e2c8", "node_id": "C_kwDOAAsO6NoAKDAzOTIzNjYxYWZkNTY1ZWZiZDlkMDAwYzFiYzJlYWE5ODIwNmUyYzg", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-03-09T00:00:05Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-03-28T19:48:52Z"}, "message": "Inline and remove `SelectionContext::fast_reject_trait_refs`.\n\nBecause it has a single call site, and it lets us move a small amount of\nthe work outside the loop.", "tree": {"sha": "9077af1a5aebb5461d82143b7a3c23efb6490389", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9077af1a5aebb5461d82143b7a3c23efb6490389"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03923661afd565efbd9d000c1bc2eaa98206e2c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03923661afd565efbd9d000c1bc2eaa98206e2c8", "html_url": "https://github.com/rust-lang/rust/commit/03923661afd565efbd9d000c1bc2eaa98206e2c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03923661afd565efbd9d000c1bc2eaa98206e2c8/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9fa69473fd34d9d8974ebe722e21fd6feae6c986", "url": "https://api.github.com/repos/rust-lang/rust/commits/9fa69473fd34d9d8974ebe722e21fd6feae6c986", "html_url": "https://github.com/rust-lang/rust/commit/9fa69473fd34d9d8974ebe722e21fd6feae6c986"}], "stats": {"total": 22, "additions": 4, "deletions": 18}, "files": [{"sha": "47a351590b1de3ef1953ffa3f0745565a31adb75", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/03923661afd565efbd9d000c1bc2eaa98206e2c8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03923661afd565efbd9d000c1bc2eaa98206e2c8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=03923661afd565efbd9d000c1bc2eaa98206e2c8", "patch": "@@ -11,7 +11,7 @@ use hir::LangItem;\n use rustc_hir as hir;\n use rustc_infer::traits::ObligationCause;\n use rustc_infer::traits::{Obligation, SelectionError, TraitObligation};\n-use rustc_middle::ty::fast_reject::TreatProjections;\n+use rustc_middle::ty::fast_reject::{DeepRejectCtxt, TreatParams, TreatProjections};\n use rustc_middle::ty::{self, Ty, TypeVisitableExt};\n \n use crate::traits;\n@@ -344,6 +344,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             return;\n         }\n \n+        let drcx = DeepRejectCtxt { treat_obligation_params: TreatParams::ForLookup };\n+        let obligation_substs = obligation.predicate.skip_binder().trait_ref.substs;\n         self.tcx().for_each_relevant_impl(\n             obligation.predicate.def_id(),\n             obligation.predicate.skip_binder().trait_ref.self_ty(),\n@@ -352,7 +354,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 // consider a \"quick reject\". This avoids creating more types\n                 // and so forth that we need to.\n                 let impl_trait_ref = self.tcx().impl_trait_ref(impl_def_id).unwrap();\n-                if self.fast_reject_trait_refs(obligation, &impl_trait_ref.0) {\n+                if !drcx.substs_refs_may_unify(obligation_substs, impl_trait_ref.0.substs) {\n                     return;\n                 }\n                 if self.reject_fn_ptr_impls("}, {"sha": "3ed3dd2d20d84062f42a43458e7ca7ba948f630b", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/03923661afd565efbd9d000c1bc2eaa98206e2c8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03923661afd565efbd9d000c1bc2eaa98206e2c8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=03923661afd565efbd9d000c1bc2eaa98206e2c8", "patch": "@@ -45,7 +45,6 @@ use rustc_infer::traits::TraitEngineExt;\n use rustc_middle::dep_graph::{DepKind, DepNodeIndex};\n use rustc_middle::mir::interpret::ErrorHandled;\n use rustc_middle::ty::abstract_const::NotConstEvaluatable;\n-use rustc_middle::ty::fast_reject::{DeepRejectCtxt, TreatParams};\n use rustc_middle::ty::fold::BottomUpFolder;\n use rustc_middle::ty::relate::TypeRelation;\n use rustc_middle::ty::SubstsRef;\n@@ -2533,21 +2532,6 @@ impl<'tcx> SelectionContext<'_, 'tcx> {\n         Ok(Normalized { value: impl_substs, obligations: nested_obligations })\n     }\n \n-    fn fast_reject_trait_refs(\n-        &mut self,\n-        obligation: &TraitObligation<'tcx>,\n-        impl_trait_ref: &ty::TraitRef<'tcx>,\n-    ) -> bool {\n-        // We can avoid creating type variables and doing the full\n-        // substitution if we find that any of the input types, when\n-        // simplified, do not match.\n-        let drcx = DeepRejectCtxt { treat_obligation_params: TreatParams::ForLookup };\n-        !drcx.substs_refs_may_unify(\n-            obligation.predicate.skip_binder().trait_ref.substs,\n-            impl_trait_ref.substs,\n-        )\n-    }\n-\n     /// Normalize `where_clause_trait_ref` and try to match it against\n     /// `obligation`. If successful, return any predicates that\n     /// result from the normalization."}]}