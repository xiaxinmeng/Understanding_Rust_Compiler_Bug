{"sha": "94703ce3f7de97c8e8aa1fdda92724bea38dce28", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0NzAzY2UzZjdkZTk3YzhlOGFhMWZkZGE5MjcyNGJlYTM4ZGNlMjg=", "commit": {"author": {"name": "scalexm", "email": "martin.alex32@hotmail.fr", "date": "2017-08-10T13:52:08Z"}, "committer": {"name": "scalexm", "email": "martin.alex32@hotmail.fr", "date": "2017-08-10T13:52:08Z"}, "message": "Do not elaborate trait obligations in where clauses", "tree": {"sha": "e0b8c18c6117baa1b259e4d892b044bf925ca8e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e0b8c18c6117baa1b259e4d892b044bf925ca8e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94703ce3f7de97c8e8aa1fdda92724bea38dce28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94703ce3f7de97c8e8aa1fdda92724bea38dce28", "html_url": "https://github.com/rust-lang/rust/commit/94703ce3f7de97c8e8aa1fdda92724bea38dce28", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94703ce3f7de97c8e8aa1fdda92724bea38dce28/comments", "author": {"login": "scalexm", "id": 1173131, "node_id": "MDQ6VXNlcjExNzMxMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1173131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scalexm", "html_url": "https://github.com/scalexm", "followers_url": "https://api.github.com/users/scalexm/followers", "following_url": "https://api.github.com/users/scalexm/following{/other_user}", "gists_url": "https://api.github.com/users/scalexm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scalexm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scalexm/subscriptions", "organizations_url": "https://api.github.com/users/scalexm/orgs", "repos_url": "https://api.github.com/users/scalexm/repos", "events_url": "https://api.github.com/users/scalexm/events{/privacy}", "received_events_url": "https://api.github.com/users/scalexm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scalexm", "id": 1173131, "node_id": "MDQ6VXNlcjExNzMxMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1173131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scalexm", "html_url": "https://github.com/scalexm", "followers_url": "https://api.github.com/users/scalexm/followers", "following_url": "https://api.github.com/users/scalexm/following{/other_user}", "gists_url": "https://api.github.com/users/scalexm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scalexm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scalexm/subscriptions", "organizations_url": "https://api.github.com/users/scalexm/orgs", "repos_url": "https://api.github.com/users/scalexm/repos", "events_url": "https://api.github.com/users/scalexm/events{/privacy}", "received_events_url": "https://api.github.com/users/scalexm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3b28b4ae8092ca58f45053fc8f6be4f9b82c2e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3b28b4ae8092ca58f45053fc8f6be4f9b82c2e8", "html_url": "https://github.com/rust-lang/rust/commit/e3b28b4ae8092ca58f45053fc8f6be4f9b82c2e8"}], "stats": {"total": 33, "additions": 21, "deletions": 12}, "files": [{"sha": "bd9eb12ee03a22627e56b3a9eb8c944c83afa981", "filename": "src/librustc/ty/wf.rs", "status": "modified", "additions": 21, "deletions": 12, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/94703ce3f7de97c8e8aa1fdda92724bea38dce28/src%2Flibrustc%2Fty%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94703ce3f7de97c8e8aa1fdda92724bea38dce28/src%2Flibrustc%2Fty%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwf.rs?ref=94703ce3f7de97c8e8aa1fdda92724bea38dce28", "patch": "@@ -58,7 +58,7 @@ pub fn trait_obligations<'a, 'gcx, 'tcx>(infcx: &InferCtxt<'a, 'gcx, 'tcx>,\n                                          -> Vec<traits::PredicateObligation<'tcx>>\n {\n     let mut wf = WfPredicates { infcx, param_env, body_id, span, out: vec![] };\n-    wf.compute_trait_ref(trait_ref);\n+    wf.compute_trait_ref(trait_ref, Elaborate::All);\n     wf.normalize()\n }\n \n@@ -74,7 +74,7 @@ pub fn predicate_obligations<'a, 'gcx, 'tcx>(infcx: &InferCtxt<'a, 'gcx, 'tcx>,\n     // (*) ok to skip binders, because wf code is prepared for it\n     match *predicate {\n         ty::Predicate::Trait(ref t) => {\n-            wf.compute_trait_ref(&t.skip_binder().trait_ref); // (*)\n+            wf.compute_trait_ref(&t.skip_binder().trait_ref, Elaborate::None); // (*)\n         }\n         ty::Predicate::Equate(ref t) => {\n             wf.compute(t.skip_binder().0);\n@@ -114,6 +114,12 @@ struct WfPredicates<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     out: Vec<traits::PredicateObligation<'tcx>>,\n }\n \n+#[derive(Debug, PartialEq, Eq, Copy, Clone)]\n+enum Elaborate {\n+    All,\n+    None,\n+}\n+\n impl<'a, 'gcx, 'tcx> WfPredicates<'a, 'gcx, 'tcx> {\n     fn cause(&mut self, code: traits::ObligationCauseCode<'tcx>) -> traits::ObligationCause<'tcx> {\n         traits::ObligationCause::new(self.span, self.body_id, code)\n@@ -135,21 +141,24 @@ impl<'a, 'gcx, 'tcx> WfPredicates<'a, 'gcx, 'tcx> {\n \n     /// Pushes the obligations required for `trait_ref` to be WF into\n     /// `self.out`.\n-    fn compute_trait_ref(&mut self, trait_ref: &ty::TraitRef<'tcx>) {\n+    fn compute_trait_ref(&mut self, trait_ref: &ty::TraitRef<'tcx>, elaborate: Elaborate) {\n         let obligations = self.nominal_obligations(trait_ref.def_id, trait_ref.substs);\n \n         let cause = self.cause(traits::MiscObligation);\n         let param_env = self.param_env;\n \n-        let predicates = obligations.iter()\n-                                    .map(|obligation| obligation.predicate.clone())\n-                                    .collect();\n-        let implied_obligations = traits::elaborate_predicates(self.infcx.tcx, predicates);\n-        let implied_obligations = implied_obligations.map(|pred| {\n-            traits::Obligation::new(cause.clone(), param_env, pred)\n-        });\n+        if let Elaborate::All = elaborate {\n+            let predicates = obligations.iter()\n+                                        .map(|obligation| obligation.predicate.clone())\n+                                        .collect();\n+            let implied_obligations = traits::elaborate_predicates(self.infcx.tcx, predicates);\n+            let implied_obligations = implied_obligations.map(|pred| {\n+                traits::Obligation::new(cause.clone(), param_env, pred)\n+            });\n+            self.out.extend(implied_obligations);\n+        }\n \n-        self.out.extend(implied_obligations.chain(obligations));\n+        self.out.extend(obligations);\n \n         self.out.extend(\n             trait_ref.substs.types()\n@@ -166,7 +175,7 @@ impl<'a, 'gcx, 'tcx> WfPredicates<'a, 'gcx, 'tcx> {\n         // WF and (b) the trait-ref holds.  (It may also be\n         // normalizable and be WF that way.)\n         let trait_ref = data.trait_ref(self.infcx.tcx);\n-        self.compute_trait_ref(&trait_ref);\n+        self.compute_trait_ref(&trait_ref, Elaborate::All);\n \n         if !data.has_escaping_regions() {\n             let predicate = trait_ref.to_predicate();"}]}