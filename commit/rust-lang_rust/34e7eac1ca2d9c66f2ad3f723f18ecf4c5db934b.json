{"sha": "34e7eac1ca2d9c66f2ad3f723f18ecf4c5db934b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0ZTdlYWMxY2EyZDljNjZmMmFkM2Y3MjNmMThlY2Y0YzVkYjkzNGI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-08-19T08:28:22Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-08-19T08:28:22Z"}, "message": "Remove `#[cfg(miri)]` from OnceCell tests\n\nThey were carried over from once_cell crate, but they are not entirely\ncorrect (as miri now supports more things), and we don't run miri\ntests for std, so let's just remove them.\n\nMaybe one day we'll run miri in std, but then we can just re-install\nthese attributes.", "tree": {"sha": "94b14d7299e4cde4ae399108305edf2a1d0e42c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94b14d7299e4cde4ae399108305edf2a1d0e42c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34e7eac1ca2d9c66f2ad3f723f18ecf4c5db934b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34e7eac1ca2d9c66f2ad3f723f18ecf4c5db934b", "html_url": "https://github.com/rust-lang/rust/commit/34e7eac1ca2d9c66f2ad3f723f18ecf4c5db934b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34e7eac1ca2d9c66f2ad3f723f18ecf4c5db934b/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c03c213daf5fe3b52c768b4f145e45d8994d87ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/c03c213daf5fe3b52c768b4f145e45d8994d87ea", "html_url": "https://github.com/rust-lang/rust/commit/c03c213daf5fe3b52c768b4f145e45d8994d87ea"}], "stats": {"total": 28, "additions": 4, "deletions": 24}, "files": [{"sha": "bf801b3c8c704af8632239aef375c1b1db5aca29", "filename": "library/std/src/lazy.rs", "status": "modified", "additions": 4, "deletions": 24, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/34e7eac1ca2d9c66f2ad3f723f18ecf4c5db934b/library%2Fstd%2Fsrc%2Flazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34e7eac1ca2d9c66f2ad3f723f18ecf4c5db934b/library%2Fstd%2Fsrc%2Flazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flazy.rs?ref=34e7eac1ca2d9c66f2ad3f723f18ecf4c5db934b", "patch": "@@ -516,6 +516,7 @@ mod tests {\n             mpsc::channel,\n             Mutex,\n         },\n+        thread,\n     };\n \n     #[test]\n@@ -552,26 +553,8 @@ mod tests {\n         }\n     }\n \n-    // miri doesn't support threads\n-    #[cfg(not(miri))]\n     fn spawn_and_wait<R: Send + 'static>(f: impl FnOnce() -> R + Send + 'static) -> R {\n-        crate::thread::spawn(f).join().unwrap()\n-    }\n-\n-    #[cfg(not(miri))]\n-    fn spawn(f: impl FnOnce() + Send + 'static) {\n-        let _ = crate::thread::spawn(f);\n-    }\n-\n-    // \"stub threads\" for Miri\n-    #[cfg(miri)]\n-    fn spawn_and_wait<R: Send + 'static>(f: impl FnOnce() -> R + Send + 'static) -> R {\n-        f(())\n-    }\n-\n-    #[cfg(miri)]\n-    fn spawn(f: impl FnOnce() + Send + 'static) {\n-        f(())\n+        thread::spawn(f).join().unwrap()\n     }\n \n     #[test]\n@@ -734,7 +717,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(miri, ignore)] // leaks memory\n     fn static_sync_lazy() {\n         static XS: SyncLazy<Vec<i32>> = SyncLazy::new(|| {\n             let mut xs = Vec::new();\n@@ -752,7 +734,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(miri, ignore)] // leaks memory\n     fn static_sync_lazy_via_fn() {\n         fn xs() -> &'static Vec<i32> {\n             static XS: SyncOnceCell<Vec<i32>> = SyncOnceCell::new();\n@@ -811,7 +792,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(miri, ignore)] // deadlocks without real threads\n     fn sync_once_cell_does_not_leak_partially_constructed_boxes() {\n         static ONCE_CELL: SyncOnceCell<String> = SyncOnceCell::new();\n \n@@ -823,7 +803,7 @@ mod tests {\n \n         for _ in 0..n_readers {\n             let tx = tx.clone();\n-            spawn(move || {\n+            thread::spawn(move || {\n                 loop {\n                     if let Some(msg) = ONCE_CELL.get() {\n                         tx.send(msg).unwrap();\n@@ -835,7 +815,7 @@ mod tests {\n             });\n         }\n         for _ in 0..n_writers {\n-            spawn(move || {\n+            thread::spawn(move || {\n                 let _ = ONCE_CELL.set(MSG.to_owned());\n             });\n         }"}]}