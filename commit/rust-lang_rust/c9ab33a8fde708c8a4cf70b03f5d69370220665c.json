{"sha": "c9ab33a8fde708c8a4cf70b03f5d69370220665c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5YWIzM2E4ZmRlNzA4YzhhNGNmNzBiMDNmNWQ2OTM3MDIyMDY2NWM=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-05-20T18:39:40Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-05-20T18:39:40Z"}, "message": "Address review comments", "tree": {"sha": "9a8581ed21f7d292a6f5350c3ab1c7031b2ea30c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a8581ed21f7d292a6f5350c3ab1c7031b2ea30c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9ab33a8fde708c8a4cf70b03f5d69370220665c", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9ab33a8fde708c8a4cf70b03f5d69370220665c", "html_url": "https://github.com/rust-lang/rust/commit/c9ab33a8fde708c8a4cf70b03f5d69370220665c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9ab33a8fde708c8a4cf70b03f5d69370220665c/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26e4680ae52bb98517cff07ff89446c5010db01e", "url": "https://api.github.com/repos/rust-lang/rust/commits/26e4680ae52bb98517cff07ff89446c5010db01e", "html_url": "https://github.com/rust-lang/rust/commit/26e4680ae52bb98517cff07ff89446c5010db01e"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "093b3f57047ca0f1118a1798511ad1daec8a0d88", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c9ab33a8fde708c8a4cf70b03f5d69370220665c/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9ab33a8fde708c8a4cf70b03f5d69370220665c/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=c9ab33a8fde708c8a4cf70b03f5d69370220665c", "patch": "@@ -54,7 +54,7 @@\n //! containers that can be cloned and shared between multiple parties.\n //! Because the contained values may be multiply-aliased, they can\n //! only be borrowed as shared references, not mutable references.\n-//! Without cells then it would be impossible to mutate data inside of\n+//! Without cells it would be impossible to mutate data inside of\n //! shared boxes at all!\n //!\n //! It's very common then to put a `RefCell` inside shared pointer\n@@ -104,7 +104,7 @@\n //!             // Take a reference to the inside of cache cell\n //!             let mut cache = self.span_tree_cache.borrow_mut();\n //!             if cache.is_some() {\n-//!                 return cache.take_unwrap().clone();\n+//!                 return cache.get_ref().clone();\n //!             }\n //!\n //!             let span_tree = self.calc_span_tree();\n@@ -118,14 +118,14 @@\n //!         // This is the major hazard of using `RefCell`.\n //!         self.minimum_spanning_tree()\n //!     }\n-//! #   fn calc_span_tree(&self) -> Vec<(uint, uint)> { vec!() }\n+//! #   fn calc_span_tree(&self) -> Vec<(uint, uint)> { vec![] }\n //! }\n //! # fn main() { }\n //! ```\n //!\n //! ## Mutating implementations of `clone`\n //!\n-//! This is simply a special - bot common - case of the previous:\n+//! This is simply a special - but common - case of the previous:\n //! hiding mutability for operations that appear to be immutable.\n //! The `clone` method is expected to not change the source value, and\n //! is declared to take `&self`, not `&mut self`. Therefore any"}, {"sha": "ffb9b676e7d4752c2811ae88d81443375cd758ad", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c9ab33a8fde708c8a4cf70b03f5d69370220665c/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9ab33a8fde708c8a4cf70b03f5d69370220665c/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=c9ab33a8fde708c8a4cf70b03f5d69370220665c", "patch": "@@ -14,11 +14,11 @@\n //! Rust Standard Library](../std/index.html). It is the portable glue\n //! between the language and its libraries, defining the intrinsic and\n //! primitive building blocks of all Rust code. It links to no\n-//! upstream libraries, no system libraries, no libc.\n+//! upstream libraries, no system libraries, and no libc.\n //!\n //! The core library is *minimal*: it isn't even aware of heap allocation,\n //! nor does it provide concurrency or I/O. These things require\n-//! platform integration, and this library is platform-oblivious.\n+//! platform integration, and this library is platform-agnostic.\n //!\n //! *It is not recommended to use the core library*. The stable\n //! functionality of libcore is reexported from the"}, {"sha": "a9ec9c1ddc5ac0ed5f5e819e909b5e24b6c6d52e", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9ab33a8fde708c8a4cf70b03f5d69370220665c/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9ab33a8fde708c8a4cf70b03f5d69370220665c/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=c9ab33a8fde708c8a4cf70b03f5d69370220665c", "patch": "@@ -16,7 +16,7 @@\n //!\n //! ## Intrinsic types and operations\n //!\n-//! The [`ptr`](../core/ptr/index.html), [`mem`](../core/mem/index.html),\n+//! The [`ptr`](../core/ptr/index.html) and [`mem`](../core/mem/index.html)\n //! modules deal with unsafe pointers and memory manipulation.\n //! [`kinds`](../core/kinds/index.html) defines the special built-in traits,\n //! and [`raw`](../core/raw/index.html) the runtime representation of Rust types."}]}