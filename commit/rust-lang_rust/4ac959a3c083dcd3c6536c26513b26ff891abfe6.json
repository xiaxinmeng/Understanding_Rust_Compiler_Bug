{"sha": "4ac959a3c083dcd3c6536c26513b26ff891abfe6", "node_id": "C_kwDOAAsO6NoAKDRhYzk1OWEzYzA4M2RjZDNjNjUzNmMyNjUxM2IyNmZmODkxYWJmZTY", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-05-04T02:55:01Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-05-04T03:51:20Z"}, "message": "Rename `file_encoder_write_leb128!`.\n\n`MemEncoder` was recently removed, leaving `FileEncoder` as the only\nencoder. So this prefix is no longer needed, and `write_leb128!` matches\nthe existing `read_leb128!`.", "tree": {"sha": "131ec71f0b0667591a2aaedf35466d300b6202ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/131ec71f0b0667591a2aaedf35466d300b6202ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ac959a3c083dcd3c6536c26513b26ff891abfe6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ac959a3c083dcd3c6536c26513b26ff891abfe6", "html_url": "https://github.com/rust-lang/rust/commit/4ac959a3c083dcd3c6536c26513b26ff891abfe6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ac959a3c083dcd3c6536c26513b26ff891abfe6/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b70be2a345fd09c17986d95b66cf5b22f96e7ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b70be2a345fd09c17986d95b66cf5b22f96e7ed", "html_url": "https://github.com/rust-lang/rust/commit/6b70be2a345fd09c17986d95b66cf5b22f96e7ed"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "dc78f1da745e27c7d6c977df68014674e5d1166c", "filename": "compiler/rustc_serialize/src/opaque.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4ac959a3c083dcd3c6536c26513b26ff891abfe6/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ac959a3c083dcd3c6536c26513b26ff891abfe6/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs?ref=4ac959a3c083dcd3c6536c26513b26ff891abfe6", "patch": "@@ -265,7 +265,7 @@ impl Drop for FileEncoder {\n     }\n }\n \n-macro_rules! file_encoder_write_leb128 {\n+macro_rules! write_leb128 {\n     ($enc:expr, $value:expr, $int_ty:ty, $fun:ident) => {{\n         const MAX_ENCODED_LEN: usize = $crate::leb128::max_leb128_len::<$int_ty>();\n \n@@ -294,22 +294,22 @@ macro_rules! file_encoder_write_leb128 {\n impl Encoder for FileEncoder {\n     #[inline]\n     fn emit_usize(&mut self, v: usize) {\n-        file_encoder_write_leb128!(self, v, usize, write_usize_leb128)\n+        write_leb128!(self, v, usize, write_usize_leb128)\n     }\n \n     #[inline]\n     fn emit_u128(&mut self, v: u128) {\n-        file_encoder_write_leb128!(self, v, u128, write_u128_leb128)\n+        write_leb128!(self, v, u128, write_u128_leb128)\n     }\n \n     #[inline]\n     fn emit_u64(&mut self, v: u64) {\n-        file_encoder_write_leb128!(self, v, u64, write_u64_leb128)\n+        write_leb128!(self, v, u64, write_u64_leb128)\n     }\n \n     #[inline]\n     fn emit_u32(&mut self, v: u32) {\n-        file_encoder_write_leb128!(self, v, u32, write_u32_leb128)\n+        write_leb128!(self, v, u32, write_u32_leb128)\n     }\n \n     #[inline]\n@@ -324,22 +324,22 @@ impl Encoder for FileEncoder {\n \n     #[inline]\n     fn emit_isize(&mut self, v: isize) {\n-        file_encoder_write_leb128!(self, v, isize, write_isize_leb128)\n+        write_leb128!(self, v, isize, write_isize_leb128)\n     }\n \n     #[inline]\n     fn emit_i128(&mut self, v: i128) {\n-        file_encoder_write_leb128!(self, v, i128, write_i128_leb128)\n+        write_leb128!(self, v, i128, write_i128_leb128)\n     }\n \n     #[inline]\n     fn emit_i64(&mut self, v: i64) {\n-        file_encoder_write_leb128!(self, v, i64, write_i64_leb128)\n+        write_leb128!(self, v, i64, write_i64_leb128)\n     }\n \n     #[inline]\n     fn emit_i32(&mut self, v: i32) {\n-        file_encoder_write_leb128!(self, v, i32, write_i32_leb128)\n+        write_leb128!(self, v, i32, write_i32_leb128)\n     }\n \n     #[inline]"}]}