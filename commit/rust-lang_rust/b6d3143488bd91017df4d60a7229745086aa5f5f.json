{"sha": "b6d3143488bd91017df4d60a7229745086aa5f5f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2ZDMxNDM0ODhiZDkxMDE3ZGY0ZDYwYTcyMjk3NDUwODZhYTVmNWY=", "commit": {"author": {"name": "Unknown", "email": "nannyakannya@gmail.com", "date": "2018-07-29T06:43:54Z"}, "committer": {"name": "Unknown", "email": "nannyakannya@gmail.com", "date": "2018-07-29T06:43:54Z"}, "message": "pretty print for std::collections::vecdeque", "tree": {"sha": "dc53892dd7419f0c029a2edbd83ddf281e7f6624", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc53892dd7419f0c029a2edbd83ddf281e7f6624"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b6d3143488bd91017df4d60a7229745086aa5f5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b6d3143488bd91017df4d60a7229745086aa5f5f", "html_url": "https://github.com/rust-lang/rust/commit/b6d3143488bd91017df4d60a7229745086aa5f5f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b6d3143488bd91017df4d60a7229745086aa5f5f/comments", "author": {"login": "fukatani", "id": 8858287, "node_id": "MDQ6VXNlcjg4NTgyODc=", "avatar_url": "https://avatars.githubusercontent.com/u/8858287?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fukatani", "html_url": "https://github.com/fukatani", "followers_url": "https://api.github.com/users/fukatani/followers", "following_url": "https://api.github.com/users/fukatani/following{/other_user}", "gists_url": "https://api.github.com/users/fukatani/gists{/gist_id}", "starred_url": "https://api.github.com/users/fukatani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fukatani/subscriptions", "organizations_url": "https://api.github.com/users/fukatani/orgs", "repos_url": "https://api.github.com/users/fukatani/repos", "events_url": "https://api.github.com/users/fukatani/events{/privacy}", "received_events_url": "https://api.github.com/users/fukatani/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fukatani", "id": 8858287, "node_id": "MDQ6VXNlcjg4NTgyODc=", "avatar_url": "https://avatars.githubusercontent.com/u/8858287?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fukatani", "html_url": "https://github.com/fukatani", "followers_url": "https://api.github.com/users/fukatani/followers", "following_url": "https://api.github.com/users/fukatani/following{/other_user}", "gists_url": "https://api.github.com/users/fukatani/gists{/gist_id}", "starred_url": "https://api.github.com/users/fukatani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fukatani/subscriptions", "organizations_url": "https://api.github.com/users/fukatani/orgs", "repos_url": "https://api.github.com/users/fukatani/repos", "events_url": "https://api.github.com/users/fukatani/events{/privacy}", "received_events_url": "https://api.github.com/users/fukatani/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a2c97c38d297307dd8554853890f51144f62172", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a2c97c38d297307dd8554853890f51144f62172", "html_url": "https://github.com/rust-lang/rust/commit/6a2c97c38d297307dd8554853890f51144f62172"}], "stats": {"total": 56, "additions": 56, "deletions": 0}, "files": [{"sha": "87c7b21bb8a35f20110ba9bc44c653586fc1aba8", "filename": "src/etc/debugger_pretty_printers_common.py", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/b6d3143488bd91017df4d60a7229745086aa5f5f/src%2Fetc%2Fdebugger_pretty_printers_common.py", "raw_url": "https://github.com/rust-lang/rust/raw/b6d3143488bd91017df4d60a7229745086aa5f5f/src%2Fetc%2Fdebugger_pretty_printers_common.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fdebugger_pretty_printers_common.py?ref=b6d3143488bd91017df4d60a7229745086aa5f5f", "patch": "@@ -47,6 +47,7 @@\n TYPE_KIND_FIXED_SIZE_VEC    = 16\n TYPE_KIND_REGULAR_UNION     = 17\n TYPE_KIND_OS_STRING         = 18\n+TYPE_KIND_STD_VECDEQUE      = 19\n \n ENCODED_ENUM_PREFIX = \"RUST$ENCODED$ENUM$\"\n ENUM_DISR_FIELD_NAME = \"RUST$ENUM$DISR\"\n@@ -62,6 +63,14 @@\n STD_VEC_FIELD_NAMES = [STD_VEC_FIELD_NAME_BUF,\n                        STD_VEC_FIELD_NAME_LENGTH]\n \n+# std::collections::VecDeque<> related constants\n+STD_VECDEQUE_FIELD_NAME_TAIL = \"tail\"\n+STD_VECDEQUE_FIELD_NAME_HEAD = \"head\"\n+STD_VECDEQUE_FIELD_NAME_BUF = \"buf\"\n+STD_VECDEQUE_FIELD_NAMES = [STD_VECDEQUE_FIELD_NAME_TAIL,\n+                            STD_VECDEQUE_FIELD_NAME_HEAD,\n+                            STD_VECDEQUE_FIELD_NAME_BUF]\n+\n # std::String related constants\n STD_STRING_FIELD_NAMES = [\"vec\"]\n \n@@ -161,6 +170,11 @@ def __classify_struct(self):\n             self.__conforms_to_field_layout(STD_VEC_FIELD_NAMES)):\n             return TYPE_KIND_STD_VEC\n \n+        # STD COLLECTION VECDEQUE\n+        if (unqualified_type_name.startswith(\"VecDeque<\") and\n+            self.__conforms_to_field_layout(STD_VECDEQUE_FIELD_NAMES)):\n+            return TYPE_KIND_STD_VECDEQUE\n+\n         # STD STRING\n         if (unqualified_type_name.startswith(\"String\") and\n             self.__conforms_to_field_layout(STD_STRING_FIELD_NAMES)):\n@@ -325,6 +339,25 @@ def extract_length_ptr_and_cap_from_std_vec(vec_val):\n     assert data_ptr.type.get_dwarf_type_kind() == DWARF_TYPE_CODE_PTR\n     return (length, data_ptr, capacity)\n \n+\n+def extract_tail_head_ptr_and_cap_from_std_vecdeque(vec_val):\n+    assert vec_val.type.get_type_kind() == TYPE_KIND_STD_VECDEQUE\n+    tail_field_index = STD_VECDEQUE_FIELD_NAMES.index(STD_VECDEQUE_FIELD_NAME_TAIL)\n+    head_field_index = STD_VECDEQUE_FIELD_NAMES.index(STD_VECDEQUE_FIELD_NAME_HEAD)\n+    buf_field_index = STD_VECDEQUE_FIELD_NAMES.index(STD_VECDEQUE_FIELD_NAME_BUF)\n+\n+    tail = vec_val.get_child_at_index(tail_field_index).as_integer()\n+    head = vec_val.get_child_at_index(head_field_index).as_integer()\n+    buf = vec_val.get_child_at_index(buf_field_index)\n+\n+    vec_ptr_val = buf.get_child_at_index(0)\n+    capacity = buf.get_child_at_index(1).as_integer()\n+    unique_ptr_val = vec_ptr_val.get_child_at_index(0)\n+    data_ptr = unique_ptr_val.get_child_at_index(0)\n+    assert data_ptr.type.get_dwarf_type_kind() == DWARF_TYPE_CODE_PTR\n+    return (tail, head, data_ptr, capacity)\n+\n+\n def extract_length_and_ptr_from_slice(slice_val):\n     assert (slice_val.type.get_type_kind() == TYPE_KIND_SLICE or\n             slice_val.type.get_type_kind() == TYPE_KIND_STR_SLICE)"}, {"sha": "410301ee6f16dc615bbbdd9c85655fdba387a10a", "filename": "src/etc/gdb_rust_pretty_printing.py", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b6d3143488bd91017df4d60a7229745086aa5f5f/src%2Fetc%2Fgdb_rust_pretty_printing.py", "raw_url": "https://github.com/rust-lang/rust/raw/b6d3143488bd91017df4d60a7229745086aa5f5f/src%2Fetc%2Fgdb_rust_pretty_printing.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fgdb_rust_pretty_printing.py?ref=b6d3143488bd91017df4d60a7229745086aa5f5f", "patch": "@@ -124,6 +124,9 @@ def rust_pretty_printer_lookup_function(gdb_val):\n     if type_kind == rustpp.TYPE_KIND_STD_VEC:\n         return RustStdVecPrinter(val)\n \n+    if type_kind == rustpp.TYPE_KIND_STD_VECDEQUE:\n+        return RustStdVecDequePrinter(val)\n+\n     if type_kind == rustpp.TYPE_KIND_STD_STRING:\n         return RustStdStringPrinter(val)\n \n@@ -274,6 +277,26 @@ def children(self):\n             yield (str(index), (gdb_ptr + index).dereference())\n \n \n+class RustStdVecDequePrinter(object):\n+    def __init__(self, val):\n+        self.__val = val\n+\n+    @staticmethod\n+    def display_hint():\n+        return \"array\"\n+\n+    def to_string(self):\n+        (tail, head, data_ptr, cap) = rustpp.extract_tail_head_ptr_and_cap_from_std_vecdeque(self.__val)\n+        return (self.__val.type.get_unqualified_type_name() +\n+                (\"(len: %i, cap: %i)\" % (head - tail, cap)))\n+\n+    def children(self):\n+        (tail, head, data_ptr, cap) = rustpp.extract_tail_head_ptr_and_cap_from_std_vecdeque(self.__val)\n+        gdb_ptr = data_ptr.get_wrapped_value()\n+        for index in xrange(tail, head):\n+            yield (str(index), (gdb_ptr + index).dereference())\n+\n+\n class RustStdStringPrinter(object):\n     def __init__(self, val):\n         self.__val = val"}]}