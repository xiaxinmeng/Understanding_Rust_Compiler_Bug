{"sha": "2b11d84119d78d92af8bcbd2688770c9d530c830", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiMTFkODQxMTlkNzhkOTJhZjhiY2JkMjY4ODc3MGM5ZDUzMGM4MzA=", "commit": {"author": {"name": "Seo Sanghyeon", "email": "sanxiyn@gmail.com", "date": "2015-11-25T06:39:15Z"}, "committer": {"name": "Seo Sanghyeon", "email": "sanxiyn@gmail.com", "date": "2015-11-25T06:39:15Z"}, "message": "Apply Clippy", "tree": {"sha": "02c665809ab7c426df26b8b9b0175044dbef208b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02c665809ab7c426df26b8b9b0175044dbef208b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b11d84119d78d92af8bcbd2688770c9d530c830", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b11d84119d78d92af8bcbd2688770c9d530c830", "html_url": "https://github.com/rust-lang/rust/commit/2b11d84119d78d92af8bcbd2688770c9d530c830", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b11d84119d78d92af8bcbd2688770c9d530c830/comments", "author": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7483c2a8f90952bc702fa281d7eca55ced6021e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/7483c2a8f90952bc702fa281d7eca55ced6021e4", "html_url": "https://github.com/rust-lang/rust/commit/7483c2a8f90952bc702fa281d7eca55ced6021e4"}], "stats": {"total": 27, "additions": 14, "deletions": 13}, "files": [{"sha": "952c7f1e08e8c553d785df9d5d81e130461bc879", "filename": "src/chains.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b11d84119d78d92af8bcbd2688770c9d530c830/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b11d84119d78d92af8bcbd2688770c9d530c830/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=2b11d84119d78d92af8bcbd2688770c9d530c830", "patch": "@@ -168,7 +168,7 @@ fn is_block_expr(expr: &ast::Expr, repr: &str) -> bool {\n     }\n }\n \n-fn pop_expr_chain<'a>(expr: &'a ast::Expr) -> Option<&'a ast::Expr> {\n+fn pop_expr_chain(expr: &ast::Expr) -> Option<&ast::Expr> {\n     match expr.node {\n         ast::Expr_::ExprMethodCall(_, _, ref expressions) => Some(&expressions[0]),\n         ast::Expr_::ExprTupField(ref subexpr, _) |"}, {"sha": "040c83488a72ed375a63e768366e495b24ef30e2", "filename": "src/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b11d84119d78d92af8bcbd2688770c9d530c830/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b11d84119d78d92af8bcbd2688770c9d530c830/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=2b11d84119d78d92af8bcbd2688770c9d530c830", "patch": "@@ -1008,7 +1008,7 @@ fn rewrite_guard(context: &RewriteContext,\n                  // the arm (excludes offset).\n                  pattern_width: usize)\n                  -> Option<String> {\n-    if let &Some(ref guard) = guard {\n+    if let Some(ref guard) = *guard {\n         // First try to fit the guard string on the same line as the pattern.\n         // 4 = ` if `, 5 = ` => {`\n         let overhead = pattern_width + 4 + 5;"}, {"sha": "01847f80d3829162d6a9360f24b2d349ca50d7ae", "filename": "src/items.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2b11d84119d78d92af8bcbd2688770c9d530c830/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b11d84119d78d92af8bcbd2688770c9d530c830/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=2b11d84119d78d92af8bcbd2688770c9d530c830", "patch": "@@ -465,7 +465,7 @@ pub fn format_impl(context: &RewriteContext, item: &ast::Item, offset: Indent) -\n         if polarity == ast::ImplPolarity::Negative {\n             result.push_str(\"!\");\n         }\n-        if let &Some(ref trait_ref) = trait_ref {\n+        if let Some(ref trait_ref) = *trait_ref {\n             let budget = try_opt!(context.config.max_width.checked_sub(result.len()));\n             let indent = offset + result.len();\n             result.push_str(&*try_opt!(trait_ref.rewrite(context, budget, indent)));\n@@ -496,7 +496,7 @@ pub fn format_impl(context: &RewriteContext, item: &ast::Item, offset: Indent) -\n             BraceStyle::AlwaysNextLine => result.push('\\n'),\n             BraceStyle::PreferSameLine => result.push(' '),\n             BraceStyle::SameLineWhere => {\n-                if where_clause_str.len() > 0 {\n+                if !where_clause_str.is_empty() {\n                     result.push('\\n')\n                 } else {\n                     result.push(' ')\n@@ -720,7 +720,7 @@ fn format_tuple_struct(context: &RewriteContext,\n     result.push_str(&body);\n     result.push(')');\n \n-    if where_clause_str.len() > 0 && !where_clause_str.contains('\\n') &&\n+    if !where_clause_str.is_empty() && !where_clause_str.contains('\\n') &&\n        (result.contains('\\n') ||\n         context.block_indent.width() + result.len() + where_clause_str.len() + 1 >\n         context.config.max_width) {\n@@ -1052,7 +1052,7 @@ fn rewrite_fn_base(context: &RewriteContext,\n             let indent = match context.config.fn_return_indent {\n                 ReturnIndent::WithWhereClause => indent + 4,\n                 // Aligning with non-existent args looks silly.\n-                _ if arg_str.len() == 0 => {\n+                _ if arg_str.is_empty() => {\n                     force_new_line_for_brace = true;\n                     indent + 4\n                 }"}, {"sha": "ad3e3b27e2e16ffddd3e6170b329ead299295581", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2b11d84119d78d92af8bcbd2688770c9d530c830/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b11d84119d78d92af8bcbd2688770c9d530c830/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=2b11d84119d78d92af8bcbd2688770c9d530c830", "patch": "@@ -410,7 +410,7 @@ pub fn format_string(input: String, config: &Config, mode: WriteMode) -> FileMap\n     visitor.buffer.push_str(\"\\n\");\n     file_map.insert(path.to_owned(), visitor.buffer);\n \n-    return file_map;\n+    file_map\n }\n \n pub fn format(file: &Path, config: &Config, mode: WriteMode) -> FileMap {\n@@ -427,7 +427,7 @@ pub fn format(file: &Path, config: &Config, mode: WriteMode) -> FileMap {\n     // newlines so we must add one on for each file. This is sad.\n     filemap::append_newlines(&mut file_map);\n \n-    return file_map;\n+    file_map\n }\n \n // args are the arguments passed on the command line, generally passed through"}, {"sha": "4dd2e5d1dce67c2adbe4a491102941e1d6d2c27d", "filename": "src/lists.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b11d84119d78d92af8bcbd2688770c9d530c830/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b11d84119d78d92af8bcbd2688770c9d530c830/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=2b11d84119d78d92af8bcbd2688770c9d530c830", "patch": "@@ -191,7 +191,7 @@ pub fn definitive_tactic<'t, I, T>(items: I,\n \n // Format a list of commented items into a string.\n // TODO: add unit tests\n-pub fn write_list<'b, I, T>(items: I, formatting: &ListFormatting<'b>) -> Option<String>\n+pub fn write_list<I, T>(items: I, formatting: &ListFormatting) -> Option<String>\n     where I: IntoIterator<Item = T>,\n           T: AsRef<ListItem>\n {"}, {"sha": "c123a9bc81bc8842228e3dc35f67c274fdbb66f6", "filename": "src/missed_spans.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2b11d84119d78d92af8bcbd2688770c9d530c830/src%2Fmissed_spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b11d84119d78d92af8bcbd2688770c9d530c830/src%2Fmissed_spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmissed_spans.rs?ref=2b11d84119d78d92af8bcbd2688770c9d530c830", "patch": "@@ -94,9 +94,10 @@ impl<'a> FmtVisitor<'a> {\n         fn replace_chars(string: &str) -> String {\n             string.chars()\n                   .map(|ch| {\n-                      match ch.is_whitespace() {\n-                          true => ch,\n-                          false => 'X',\n+                      if ch.is_whitespace() {\n+                          ch\n+                      } else {\n+                          'X'\n                       }\n                   })\n                   .collect()"}, {"sha": "98a706adc412fc466967bb6937d32375517e3704", "filename": "src/visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b11d84119d78d92af8bcbd2688770c9d530c830/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b11d84119d78d92af8bcbd2688770c9d530c830/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=2b11d84119d78d92af8bcbd2688770c9d530c830", "patch": "@@ -415,7 +415,7 @@ impl<'a> FmtVisitor<'a> {\n \n         let outers: Vec<_> = attrs.iter()\n                                   .filter(|a| a.node.style == ast::AttrStyle::Outer)\n-                                  .map(|a| a.clone())\n+                                  .cloned()\n                                   .collect();\n         if outers.is_empty() {\n             return false;"}]}