{"sha": "77a0c65264ebe36ac7e3fecc775cfe05dfeeec46", "node_id": "C_kwDOAAsO6NoAKDc3YTBjNjUyNjRlYmUzNmFjN2UzZmVjYzc3NWNmZTA1ZGZlZWVjNDY", "commit": {"author": {"name": "LegionMammal978", "email": "mattlloydhouse@gmail.com", "date": "2021-12-14T17:13:07Z"}, "committer": {"name": "LegionMammal978", "email": "mattlloydhouse@gmail.com", "date": "2021-12-14T17:13:07Z"}, "message": "Remove `in_band_lifetimes` from `rustc_query_impl`\n\nSee #91867 for more information.", "tree": {"sha": "a9c45532966112f5d50498a24e073aac28fce38c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a9c45532966112f5d50498a24e073aac28fce38c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/77a0c65264ebe36ac7e3fecc775cfe05dfeeec46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/77a0c65264ebe36ac7e3fecc775cfe05dfeeec46", "html_url": "https://github.com/rust-lang/rust/commit/77a0c65264ebe36ac7e3fecc775cfe05dfeeec46", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/77a0c65264ebe36ac7e3fecc775cfe05dfeeec46/comments", "author": {"login": "LegionMammal978", "id": 7880963, "node_id": "MDQ6VXNlcjc4ODA5NjM=", "avatar_url": "https://avatars.githubusercontent.com/u/7880963?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LegionMammal978", "html_url": "https://github.com/LegionMammal978", "followers_url": "https://api.github.com/users/LegionMammal978/followers", "following_url": "https://api.github.com/users/LegionMammal978/following{/other_user}", "gists_url": "https://api.github.com/users/LegionMammal978/gists{/gist_id}", "starred_url": "https://api.github.com/users/LegionMammal978/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LegionMammal978/subscriptions", "organizations_url": "https://api.github.com/users/LegionMammal978/orgs", "repos_url": "https://api.github.com/users/LegionMammal978/repos", "events_url": "https://api.github.com/users/LegionMammal978/events{/privacy}", "received_events_url": "https://api.github.com/users/LegionMammal978/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LegionMammal978", "id": 7880963, "node_id": "MDQ6VXNlcjc4ODA5NjM=", "avatar_url": "https://avatars.githubusercontent.com/u/7880963?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LegionMammal978", "html_url": "https://github.com/LegionMammal978", "followers_url": "https://api.github.com/users/LegionMammal978/followers", "following_url": "https://api.github.com/users/LegionMammal978/following{/other_user}", "gists_url": "https://api.github.com/users/LegionMammal978/gists{/gist_id}", "starred_url": "https://api.github.com/users/LegionMammal978/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LegionMammal978/subscriptions", "organizations_url": "https://api.github.com/users/LegionMammal978/orgs", "repos_url": "https://api.github.com/users/LegionMammal978/repos", "events_url": "https://api.github.com/users/LegionMammal978/events{/privacy}", "received_events_url": "https://api.github.com/users/LegionMammal978/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "404c8471aba60c2d837fa728e7c729a0f52d5830", "url": "https://api.github.com/repos/rust-lang/rust/commits/404c8471aba60c2d837fa728e7c729a0f52d5830", "html_url": "https://github.com/rust-lang/rust/commit/404c8471aba60c2d837fa728e7c729a0f52d5830"}], "stats": {"total": 15, "additions": 7, "deletions": 8}, "files": [{"sha": "581a2bce2e50e5cd81b8835aecfd117b2ba0bf68", "filename": "compiler/rustc_query_impl/src/keys.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77a0c65264ebe36ac7e3fecc775cfe05dfeeec46/compiler%2Frustc_query_impl%2Fsrc%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77a0c65264ebe36ac7e3fecc775cfe05dfeeec46/compiler%2Frustc_query_impl%2Fsrc%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fkeys.rs?ref=77a0c65264ebe36ac7e3fecc775cfe05dfeeec46", "patch": "@@ -151,7 +151,7 @@ impl Key for (DefId, DefId) {\n     }\n }\n \n-impl Key for (ty::Instance<'tcx>, LocalDefId) {\n+impl<'tcx> Key for (ty::Instance<'tcx>, LocalDefId) {\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true"}, {"sha": "de9d425353712b09c9d61a65abecbcdc39511f06", "filename": "compiler/rustc_query_impl/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/77a0c65264ebe36ac7e3fecc775cfe05dfeeec46/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77a0c65264ebe36ac7e3fecc775cfe05dfeeec46/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs?ref=77a0c65264ebe36ac7e3fecc775cfe05dfeeec46", "patch": "@@ -2,7 +2,6 @@\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(crate_visibility_modifier)]\n-#![feature(in_band_lifetimes)]\n #![feature(nll)]\n #![feature(min_specialization)]\n #![feature(once_cell)]"}, {"sha": "11f54ea66fa51d96a20a5c61f2b720a45e01485e", "filename": "compiler/rustc_query_impl/src/on_disk_cache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77a0c65264ebe36ac7e3fecc775cfe05dfeeec46/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77a0c65264ebe36ac7e3fecc775cfe05dfeeec46/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs?ref=77a0c65264ebe36ac7e3fecc775cfe05dfeeec46", "patch": "@@ -212,7 +212,7 @@ impl<'sess> rustc_middle::ty::OnDiskCache<'sess> for OnDiskCache<'sess> {\n     /// Cache promotions require invoking queries, which needs to read the serialized data.\n     /// In order to serialize the new on-disk cache, the former on-disk cache file needs to be\n     /// deleted, hence we won't be able to refer to its memmapped data.\n-    fn drop_serialized_data(&self, tcx: TyCtxt<'tcx>) {\n+    fn drop_serialized_data(&self, tcx: TyCtxt<'_>) {\n         // Load everything into memory so we can write it out to the on-disk\n         // cache. The vast majority of cacheable query results should already\n         // be in memory, so this should be a cheap operation."}, {"sha": "6d76d09f6190e21d5fa56fe8c17be3c3299df2ab", "filename": "compiler/rustc_query_impl/src/plumbing.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/77a0c65264ebe36ac7e3fecc775cfe05dfeeec46/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77a0c65264ebe36ac7e3fecc775cfe05dfeeec46/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs?ref=77a0c65264ebe36ac7e3fecc775cfe05dfeeec46", "patch": "@@ -31,7 +31,7 @@ impl<'tcx> std::ops::Deref for QueryCtxt<'tcx> {\n     }\n }\n \n-impl HasDepContext for QueryCtxt<'tcx> {\n+impl<'tcx> HasDepContext for QueryCtxt<'tcx> {\n     type DepKind = rustc_middle::dep_graph::DepKind;\n     type DepContext = TyCtxt<'tcx>;\n \n@@ -41,7 +41,7 @@ impl HasDepContext for QueryCtxt<'tcx> {\n     }\n }\n \n-impl QueryContext for QueryCtxt<'tcx> {\n+impl QueryContext for QueryCtxt<'_> {\n     fn current_query_job(&self) -> Option<QueryJobId<Self::DepKind>> {\n         tls::with_related_context(**self, |icx| icx.query)\n     }\n@@ -130,7 +130,7 @@ impl<'tcx> QueryCtxt<'tcx> {\n \n     pub(super) fn encode_query_results(\n         self,\n-        encoder: &mut on_disk_cache::CacheEncoder<'a, 'tcx, opaque::FileEncoder>,\n+        encoder: &mut on_disk_cache::CacheEncoder<'_, 'tcx, opaque::FileEncoder>,\n         query_result_index: &mut on_disk_cache::EncodedDepNodeIndex,\n     ) -> opaque::FileEncodeResult {\n         macro_rules! encode_queries {\n@@ -511,7 +511,7 @@ macro_rules! define_queries_struct {\n             }\n         }\n \n-        impl QueryEngine<'tcx> for Queries<'tcx> {\n+        impl<'tcx> QueryEngine<'tcx> for Queries<'tcx> {\n             fn as_any(&'tcx self) -> &'tcx dyn std::any::Any {\n                 let this = unsafe { std::mem::transmute::<&Queries<'_>, &Queries<'_>>(self) };\n                 this as _"}, {"sha": "41ee75c2432d82c51e8e7c48f632e5616d0dde9e", "filename": "compiler/rustc_query_impl/src/profiling_support.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77a0c65264ebe36ac7e3fecc775cfe05dfeeec46/compiler%2Frustc_query_impl%2Fsrc%2Fprofiling_support.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77a0c65264ebe36ac7e3fecc775cfe05dfeeec46/compiler%2Frustc_query_impl%2Fsrc%2Fprofiling_support.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fprofiling_support.rs?ref=77a0c65264ebe36ac7e3fecc775cfe05dfeeec46", "patch": "@@ -295,7 +295,7 @@ fn alloc_self_profile_query_strings_for_query_cache<'tcx, C>(\n /// If we are recording only summary data, the ids will point to\n /// just the query names. If we are recording query keys too, we\n /// allocate the corresponding strings here.\n-pub fn alloc_self_profile_query_strings(tcx: TyCtxt<'tcx>) {\n+pub fn alloc_self_profile_query_strings(tcx: TyCtxt<'_>) {\n     if !tcx.prof.enabled() {\n         return;\n     }"}]}