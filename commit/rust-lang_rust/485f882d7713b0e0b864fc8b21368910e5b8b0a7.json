{"sha": "485f882d7713b0e0b864fc8b21368910e5b8b0a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4NWY4ODJkNzcxM2IwZTBiODY0ZmM4YjIxMzY4OTEwZTViOGIwYTc=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-09-19T22:17:05Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-09-27T09:56:43Z"}, "message": "Check conversion from Duration to timespec in futex_wait.", "tree": {"sha": "6c6f69b0731b366700885bd2c74a06bf5c51ac56", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c6f69b0731b366700885bd2c74a06bf5c51ac56"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/485f882d7713b0e0b864fc8b21368910e5b8b0a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/485f882d7713b0e0b864fc8b21368910e5b8b0a7", "html_url": "https://github.com/rust-lang/rust/commit/485f882d7713b0e0b864fc8b21368910e5b8b0a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/485f882d7713b0e0b864fc8b21368910e5b8b0a7/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2cf0f64722a92dffa12d43a4c0383a9d76becbcc", "url": "https://api.github.com/repos/rust-lang/rust/commits/2cf0f64722a92dffa12d43a4c0383a9d76becbcc", "html_url": "https://github.com/rust-lang/rust/commit/2cf0f64722a92dffa12d43a4c0383a9d76becbcc"}], "stats": {"total": 23, "additions": 11, "deletions": 12}, "files": [{"sha": "e6f0c48c59b1b354db0ba6aa0b68ffc23e861810", "filename": "library/std/src/sys/unix/futex.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/485f882d7713b0e0b864fc8b21368910e5b8b0a7/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/485f882d7713b0e0b864fc8b21368910e5b8b0a7/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffutex.rs?ref=485f882d7713b0e0b864fc8b21368910e5b8b0a7", "patch": "@@ -1,27 +1,26 @@\n #![cfg(any(target_os = \"linux\", target_os = \"android\"))]\n \n+use crate::convert::TryInto;\n+use crate::ptr::null;\n use crate::sync::atomic::AtomicI32;\n use crate::time::Duration;\n \n pub fn futex_wait(futex: &AtomicI32, expected: i32, timeout: Option<Duration>) {\n-    let timespec;\n-    let timespec_ptr = match timeout {\n-        Some(timeout) => {\n-            timespec = libc::timespec {\n-                tv_sec: timeout.as_secs() as _,\n-                tv_nsec: timeout.subsec_nanos() as _,\n-            };\n-            &timespec as *const libc::timespec\n-        }\n-        None => crate::ptr::null(),\n-    };\n+    let timespec = timeout.and_then(|d| {\n+        Some(libc::timespec {\n+            // Sleep forever if the timeout is longer than fits in a timespec.\n+            tv_sec: d.as_secs().try_into().ok()?,\n+            // This conversion never truncates, as subsec_nanos is always <1e9.\n+            tv_nsec: d.subsec_nanos() as _,\n+        })\n+    });\n     unsafe {\n         libc::syscall(\n             libc::SYS_futex,\n             futex as *const AtomicI32,\n             libc::FUTEX_WAIT | libc::FUTEX_PRIVATE_FLAG,\n             expected,\n-            timespec_ptr,\n+            timespec.as_ref().map_or(null(), |d| d as *const libc::timespec),\n         );\n     }\n }"}]}