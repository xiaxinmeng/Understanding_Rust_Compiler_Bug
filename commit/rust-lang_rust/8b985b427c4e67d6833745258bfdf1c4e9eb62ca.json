{"sha": "8b985b427c4e67d6833745258bfdf1c4e9eb62ca", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiOTg1YjQyN2M0ZTY3ZDY4MzM3NDUyNThiZmRmMWM0ZTllYjYyY2E=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-01-13T15:22:36Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-01-13T15:22:36Z"}, "message": "Merge #526\n\n526: fix indent caclulation r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "ed8a3c14e19a67426c9b08cebb8e34ae91c8f8ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed8a3c14e19a67426c9b08cebb8e34ae91c8f8ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b985b427c4e67d6833745258bfdf1c4e9eb62ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b985b427c4e67d6833745258bfdf1c4e9eb62ca", "html_url": "https://github.com/rust-lang/rust/commit/8b985b427c4e67d6833745258bfdf1c4e9eb62ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b985b427c4e67d6833745258bfdf1c4e9eb62ca/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "c46e0300e6cebf78c78c28ca91e45b57e4e40954", "url": "https://api.github.com/repos/rust-lang/rust/commits/c46e0300e6cebf78c78c28ca91e45b57e4e40954", "html_url": "https://github.com/rust-lang/rust/commit/c46e0300e6cebf78c78c28ca91e45b57e4e40954"}, {"sha": "884ce4a4207ca68a5299b3a2e4e33b8f1f158001", "url": "https://api.github.com/repos/rust-lang/rust/commits/884ce4a4207ca68a5299b3a2e4e33b8f1f158001", "html_url": "https://github.com/rust-lang/rust/commit/884ce4a4207ca68a5299b3a2e4e33b8f1f158001"}], "stats": {"total": 62, "additions": 51, "deletions": 11}, "files": [{"sha": "599e3cdcbe65124c83e8d3a933c45a0a1317fd9d", "filename": "crates/ra_ide_api_light/src/formatting.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8b985b427c4e67d6833745258bfdf1c4e9eb62ca/crates%2Fra_ide_api_light%2Fsrc%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b985b427c4e67d6833745258bfdf1c4e9eb62ca/crates%2Fra_ide_api_light%2Fsrc%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api_light%2Fsrc%2Fformatting.rs?ref=8b985b427c4e67d6833745258bfdf1c4e9eb62ca", "patch": "@@ -2,15 +2,23 @@ use ra_syntax::{\n     AstNode,\n     SyntaxNode, SyntaxKind::*,\n     ast::{self, AstToken},\n+    algo::generate,\n };\n \n /// If the node is on the begining of the line, calculate indent.\n pub(crate) fn leading_indent(node: &SyntaxNode) -> Option<&str> {\n-    let prev = node.prev_sibling()?;\n+    let prev = prev_leaf(node)?;\n     let ws_text = ast::Whitespace::cast(prev)?.text();\n     ws_text.rfind('\\n').map(|pos| &ws_text[pos + 1..])\n }\n \n+fn prev_leaf(node: &SyntaxNode) -> Option<&SyntaxNode> {\n+    generate(node.ancestors().find_map(SyntaxNode::prev_sibling), |it| {\n+        it.last_child()\n+    })\n+    .last()\n+}\n+\n pub(crate) fn extract_trivial_expression(block: &ast::Block) -> Option<&ast::Expr> {\n     let expr = block.expr()?;\n     if expr.syntax().text().contains('\\n') {"}, {"sha": "5ff2b7c1f470b1663852a00855b14de2d235602f", "filename": "crates/ra_ide_api_light/src/typing.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/8b985b427c4e67d6833745258bfdf1c4e9eb62ca/crates%2Fra_ide_api_light%2Fsrc%2Ftyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b985b427c4e67d6833745258bfdf1c4e9eb62ca/crates%2Fra_ide_api_light%2Fsrc%2Ftyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api_light%2Fsrc%2Ftyping.rs?ref=8b985b427c4e67d6833745258bfdf1c4e9eb62ca", "patch": "@@ -227,6 +227,38 @@ fn foo() {\n         )\n     }\n \n+    #[test]\n+    fn indents_new_chain_call_with_semi() {\n+        type_dot(\n+            r\"\n+            pub fn child(&self, db: &impl HirDatabase, name: &Name) -> Cancelable<Option<Module>> {\n+                self.child_impl(db, name)\n+                <|>;\n+            }\n+            \",\n+            r\"\n+            pub fn child(&self, db: &impl HirDatabase, name: &Name) -> Cancelable<Option<Module>> {\n+                self.child_impl(db, name)\n+                    .;\n+            }\n+            \",\n+        );\n+        type_dot(\n+            r\"\n+            pub fn child(&self, db: &impl HirDatabase, name: &Name) -> Cancelable<Option<Module>> {\n+                self.child_impl(db, name)\n+                    <|>;\n+            }\n+            \",\n+            r\"\n+            pub fn child(&self, db: &impl HirDatabase, name: &Name) -> Cancelable<Option<Module>> {\n+                self.child_impl(db, name)\n+                    .;\n+            }\n+            \",\n+        )\n+    }\n+\n     #[test]\n     fn indents_continued_chain_call() {\n         type_dot("}, {"sha": "9b1c9c9a0a7ede703e3ec58f7c6a8aa0e505727c", "filename": "crates/test_utils/src/lib.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8b985b427c4e67d6833745258bfdf1c4e9eb62ca/crates%2Ftest_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b985b427c4e67d6833745258bfdf1c4e9eb62ca/crates%2Ftest_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Flib.rs?ref=8b985b427c4e67d6833745258bfdf1c4e9eb62ca", "patch": "@@ -12,18 +12,18 @@ pub const CURSOR_MARKER: &str = \"<|>\";\n \n #[macro_export]\n macro_rules! assert_eq_text {\n-    ($expected:expr, $actual:expr) => {\n-        assert_eq_text!($expected, $actual,)\n+    ($left:expr, $right:expr) => {\n+        assert_eq_text!($left, $right,)\n     };\n-    ($expected:expr, $actual:expr, $($tt:tt)*) => {{\n-        let expected = $expected;\n-        let actual = $actual;\n-        if expected != actual {\n-            if expected.trim() == actual.trim() {\n-                eprintln!(\"Expected:\\n{:?}\\n\\nActual:\\n{:?}\\n\\nWhitespace difference\\n\", expected, actual);\n+    ($left:expr, $right:expr, $($tt:tt)*) => {{\n+        let left = $left;\n+        let right = $right;\n+        if left != right {\n+            if left.trim() == right.trim() {\n+                eprintln!(\"Left:\\n{:?}\\n\\nRight:\\n{:?}\\n\\nWhitespace difference\\n\", left, right);\n             } else {\n-                let changeset = $crate::__Changeset::new(actual, expected, \"\\n\");\n-                eprintln!(\"Expected:\\n{}\\n\\nActual:\\n{}\\n\\nDiff:\\n{}\\n\", expected, actual, changeset);\n+                let changeset = $crate::__Changeset::new(right, left, \"\\n\");\n+                eprintln!(\"Left:\\n{}\\n\\nRight:\\n{}\\n\\nDiff:\\n{}\\n\", left, right, changeset);\n             }\n             eprintln!($($tt)*);\n             panic!(\"text differs\");"}]}