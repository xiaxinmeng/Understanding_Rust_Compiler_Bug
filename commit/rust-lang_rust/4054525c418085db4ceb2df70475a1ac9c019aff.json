{"sha": "4054525c418085db4ceb2df70475a1ac9c019aff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwNTQ1MjVjNDE4MDg1ZGI0Y2ViMmRmNzA0NzVhMWFjOWMwMTlhZmY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-02-17T13:45:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-17T13:45:27Z"}, "message": "Merge #7699\n\n7699: Implement ast::AstNode for NameLike and move it to node_ext r=matklad a=Veykril\n\nWith this `search`(and 2 other modules) don't necessarily go through 3 calls of `find_node_at_offset_with_descend` to find the correct node. Also makes the code that searches for NameLikes a bit easier on the eyes imo, though that can be fixed with just a helper function as well so its not that relevant.\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "64adbc8c62df3a6ebbe8c1a799589a94ddfbf490", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/64adbc8c62df3a6ebbe8c1a799589a94ddfbf490"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4054525c418085db4ceb2df70475a1ac9c019aff", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgLR33CRBK7hj4Ov3rIwAAdHIIAFYw64T7yKw5kliirYBKfhvf\nsSESPz9c6KN7KYlSljLOckRBy5Ua/XIgqUaIdzrk523HfUAem+eQ4spAPZFA1tM4\n66pcprmqxjNXcxf2kZUttM/J4wTL4+3Fw1WsUKVIW4X1smqxiyJc3Lxh387mviZn\nOxflJAJ9P2x6vgCf+1jZhqmUiOK90Zy+yckbGRgEb6jZHiBuZ461nP/Zvxazxus7\neNyDZ0UtYYSQ2b571EoDB/u+LTHyk5HmR8qlP4fEHu6LASRwd93v7A1PPwaWHF8a\nF63tmkoxaSIxbS4vfTS2abBMjxYQxt/H2slY1BMwLKkRhbkkxMEZCO/gqM9wMeI=\n=PGyi\n-----END PGP SIGNATURE-----\n", "payload": "tree 64adbc8c62df3a6ebbe8c1a799589a94ddfbf490\nparent 056601b41fbc5208cae5d996ec7fd18526d79e41\nparent e1dbf43cf85f84c3a7e40f9731fc1f7ac96f8979\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1613569527 +0000\ncommitter GitHub <noreply@github.com> 1613569527 +0000\n\nMerge #7699\n\n7699: Implement ast::AstNode for NameLike and move it to node_ext r=matklad a=Veykril\n\nWith this `search`(and 2 other modules) don't necessarily go through 3 calls of `find_node_at_offset_with_descend` to find the correct node. Also makes the code that searches for NameLikes a bit easier on the eyes imo, though that can be fixed with just a helper function as well so its not that relevant.\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4054525c418085db4ceb2df70475a1ac9c019aff", "html_url": "https://github.com/rust-lang/rust/commit/4054525c418085db4ceb2df70475a1ac9c019aff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4054525c418085db4ceb2df70475a1ac9c019aff/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "056601b41fbc5208cae5d996ec7fd18526d79e41", "url": "https://api.github.com/repos/rust-lang/rust/commits/056601b41fbc5208cae5d996ec7fd18526d79e41", "html_url": "https://github.com/rust-lang/rust/commit/056601b41fbc5208cae5d996ec7fd18526d79e41"}, {"sha": "e1dbf43cf85f84c3a7e40f9731fc1f7ac96f8979", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1dbf43cf85f84c3a7e40f9731fc1f7ac96f8979", "html_url": "https://github.com/rust-lang/rust/commit/e1dbf43cf85f84c3a7e40f9731fc1f7ac96f8979"}], "stats": {"total": 233, "additions": 118, "deletions": 115}, "files": [{"sha": "74cf64aabc4549feb6c858a75891b40c6fa5e477", "filename": "crates/hir_expand/src/name.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4054525c418085db4ceb2df70475a1ac9c019aff/crates%2Fhir_expand%2Fsrc%2Fname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4054525c418085db4ceb2df70475a1ac9c019aff/crates%2Fhir_expand%2Fsrc%2Fname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fname.rs?ref=4054525c418085db4ceb2df70475a1ac9c019aff", "patch": "@@ -87,11 +87,18 @@ impl AsName for ast::Name {\n     }\n }\n \n-impl AsName for ast::NameOrNameRef {\n+impl AsName for ast::Lifetime {\n+    fn as_name(&self) -> Name {\n+        Name::resolve(self.text())\n+    }\n+}\n+\n+impl AsName for ast::NameLike {\n     fn as_name(&self) -> Name {\n         match self {\n-            ast::NameOrNameRef::Name(it) => it.as_name(),\n-            ast::NameOrNameRef::NameRef(it) => it.as_name(),\n+            ast::NameLike::Name(it) => it.as_name(),\n+            ast::NameLike::NameRef(it) => it.as_name(),\n+            ast::NameLike::Lifetime(it) => it.as_name(),\n         }\n     }\n }"}, {"sha": "55f95ebae8854d2482d483d292e290265fecffbf", "filename": "crates/ide/src/references.rs", "status": "modified", "additions": 15, "deletions": 23, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/4054525c418085db4ceb2df70475a1ac9c019aff/crates%2Fide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4054525c418085db4ceb2df70475a1ac9c019aff/crates%2Fide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences.rs?ref=4054525c418085db4ceb2df70475a1ac9c019aff", "patch": "@@ -101,29 +101,21 @@ fn find_def(\n     syntax: &SyntaxNode,\n     position: FilePosition,\n ) -> Option<Definition> {\n-    if let Some(name) = sema.find_node_at_offset_with_descend::<ast::Name>(&syntax, position.offset)\n-    {\n-        let class = NameClass::classify(sema, &name)?;\n-        Some(class.referenced_or_defined(sema.db))\n-    } else if let Some(lifetime) =\n-        sema.find_node_at_offset_with_descend::<ast::Lifetime>(&syntax, position.offset)\n-    {\n-        let def = if let Some(def) =\n-            NameRefClass::classify_lifetime(sema, &lifetime).map(|class| class.referenced(sema.db))\n-        {\n-            def\n-        } else {\n-            NameClass::classify_lifetime(sema, &lifetime)?.referenced_or_defined(sema.db)\n-        };\n-        Some(def)\n-    } else if let Some(name_ref) =\n-        sema.find_node_at_offset_with_descend::<ast::NameRef>(&syntax, position.offset)\n-    {\n-        let class = NameRefClass::classify(sema, &name_ref)?;\n-        Some(class.referenced(sema.db))\n-    } else {\n-        None\n-    }\n+    let def = match sema.find_node_at_offset_with_descend(syntax, position.offset)? {\n+        ast::NameLike::NameRef(name_ref) => {\n+            NameRefClass::classify(sema, &name_ref)?.referenced(sema.db)\n+        }\n+        ast::NameLike::Name(name) => {\n+            NameClass::classify(sema, &name)?.referenced_or_defined(sema.db)\n+        }\n+        ast::NameLike::Lifetime(lifetime) => NameRefClass::classify_lifetime(sema, &lifetime)\n+            .map(|class| class.referenced(sema.db))\n+            .or_else(|| {\n+                NameClass::classify_lifetime(sema, &lifetime)\n+                    .map(|class| class.referenced_or_defined(sema.db))\n+            })?,\n+    };\n+    Some(def)\n }\n \n fn decl_access(def: &Definition, syntax: &SyntaxNode, range: TextRange) -> Option<ReferenceAccess> {"}, {"sha": "175ddd759ca8511c163a4f6fd0fb940262482a52", "filename": "crates/ide/src/references/rename.rs", "status": "modified", "additions": 16, "deletions": 35, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/4054525c418085db4ceb2df70475a1ac9c019aff/crates%2Fide%2Fsrc%2Freferences%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4054525c418085db4ceb2df70475a1ac9c019aff/crates%2Fide%2Fsrc%2Freferences%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences%2Frename.rs?ref=4054525c418085db4ceb2df70475a1ac9c019aff", "patch": "@@ -6,7 +6,7 @@ use hir::{HasSource, InFile, Module, ModuleDef, ModuleSource, Semantics};\n use ide_db::{\n     base_db::{AnchoredPathBuf, FileId},\n     defs::{Definition, NameClass, NameRefClass},\n-    search::{FileReference, NameLike},\n+    search::FileReference,\n     RootDatabase,\n };\n use stdx::never;\n@@ -47,12 +47,13 @@ pub(crate) fn prepare_rename(\n     let sema = Semantics::new(db);\n     let source_file = sema.parse(position.file_id);\n     let syntax = source_file.syntax();\n-    let range = match &find_name_like(&sema, &syntax, position)\n+    let range = match &sema\n+        .find_node_at_offset_with_descend(&syntax, position.offset)\n         .ok_or_else(|| format_err!(\"No references found at position\"))?\n     {\n-        NameLike::Name(it) => it.syntax(),\n-        NameLike::NameRef(it) => it.syntax(),\n-        NameLike::Lifetime(it) => it.syntax(),\n+        ast::NameLike::Name(it) => it.syntax(),\n+        ast::NameLike::NameRef(it) => it.syntax(),\n+        ast::NameLike::Lifetime(it) => it.syntax(),\n     }\n     .text_range();\n     Ok(RangeInfo::new(range, ()))\n@@ -121,50 +122,28 @@ fn check_identifier(new_name: &str) -> RenameResult<IdentifierKind> {\n     }\n }\n \n-fn find_name_like(\n-    sema: &Semantics<RootDatabase>,\n-    syntax: &SyntaxNode,\n-    position: FilePosition,\n-) -> Option<NameLike> {\n-    let namelike = if let Some(name_ref) =\n-        sema.find_node_at_offset_with_descend::<ast::NameRef>(syntax, position.offset)\n-    {\n-        NameLike::NameRef(name_ref)\n-    } else if let Some(name) =\n-        sema.find_node_at_offset_with_descend::<ast::Name>(syntax, position.offset)\n-    {\n-        NameLike::Name(name)\n-    } else if let Some(lifetime) =\n-        sema.find_node_at_offset_with_descend::<ast::Lifetime>(syntax, position.offset)\n-    {\n-        NameLike::Lifetime(lifetime)\n-    } else {\n-        return None;\n-    };\n-    Some(namelike)\n-}\n-\n fn find_definition(\n     sema: &Semantics<RootDatabase>,\n     syntax: &SyntaxNode,\n     position: FilePosition,\n ) -> RenameResult<Definition> {\n-    match find_name_like(sema, syntax, position)\n+    match sema\n+        .find_node_at_offset_with_descend(syntax, position.offset)\n         .ok_or_else(|| format_err!(\"No references found at position\"))?\n     {\n         // renaming aliases would rename the item being aliased as the HIR doesn't track aliases yet\n-        NameLike::Name(name)\n+        ast::NameLike::Name(name)\n             if name.syntax().parent().map_or(false, |it| ast::Rename::can_cast(it.kind())) =>\n         {\n             bail!(\"Renaming aliases is currently unsupported\")\n         }\n-        NameLike::Name(name) => {\n+        ast::NameLike::Name(name) => {\n             NameClass::classify(sema, &name).map(|class| class.referenced_or_defined(sema.db))\n         }\n-        NameLike::NameRef(name_ref) => {\n+        ast::NameLike::NameRef(name_ref) => {\n             NameRefClass::classify(sema, &name_ref).map(|class| class.referenced(sema.db))\n         }\n-        NameLike::Lifetime(lifetime) => NameRefClass::classify_lifetime(sema, &lifetime)\n+        ast::NameLike::Lifetime(lifetime) => NameRefClass::classify_lifetime(sema, &lifetime)\n             .map(|class| NameRefClass::referenced(class, sema.db))\n             .or_else(|| {\n                 NameClass::classify_lifetime(sema, &lifetime)\n@@ -187,10 +166,12 @@ fn source_edit_from_references(\n             // if the ranges differ then the node is inside a macro call, we can't really attempt\n             // to make special rewrites like shorthand syntax and such, so just rename the node in\n             // the macro input\n-            NameLike::NameRef(name_ref) if name_ref.syntax().text_range() == reference.range => {\n+            ast::NameLike::NameRef(name_ref)\n+                if name_ref.syntax().text_range() == reference.range =>\n+            {\n                 source_edit_from_name_ref(name_ref, new_name, def)\n             }\n-            NameLike::Name(name) if name.syntax().text_range() == reference.range => {\n+            ast::NameLike::Name(name) if name.syntax().text_range() == reference.range => {\n                 source_edit_from_name(name, new_name)\n             }\n             _ => None,"}, {"sha": "ba8bea00208a9d0f3c57a0b11a66f5eee67e85e3", "filename": "crates/ide_db/src/search.rs", "status": "modified", "additions": 24, "deletions": 42, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/4054525c418085db4ceb2df70475a1ac9c019aff/crates%2Fide_db%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4054525c418085db4ceb2df70475a1ac9c019aff/crates%2Fide_db%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fsearch.rs?ref=4054525c418085db4ceb2df70475a1ac9c019aff", "patch": "@@ -52,34 +52,10 @@ impl IntoIterator for UsageSearchResult {\n     }\n }\n \n-#[derive(Debug, Clone)]\n-pub enum NameLike {\n-    NameRef(ast::NameRef),\n-    Name(ast::Name),\n-    Lifetime(ast::Lifetime),\n-}\n-\n-impl NameLike {\n-    pub fn as_name_ref(&self) -> Option<&ast::NameRef> {\n-        match self {\n-            NameLike::NameRef(name_ref) => Some(name_ref),\n-            _ => None,\n-        }\n-    }\n-}\n-\n-mod __ {\n-    use super::{\n-        ast::{Lifetime, Name, NameRef},\n-        NameLike,\n-    };\n-    stdx::impl_from!(NameRef, Name, Lifetime for NameLike);\n-}\n-\n #[derive(Debug, Clone)]\n pub struct FileReference {\n     pub range: TextRange,\n-    pub name: NameLike,\n+    pub name: ast::NameLike,\n     pub access: Option<ReferenceAccess>,\n }\n \n@@ -300,6 +276,7 @@ impl<'a> FindUsages<'a> {\n     pub fn in_scope(self, scope: SearchScope) -> FindUsages<'a> {\n         self.set_scope(Some(scope))\n     }\n+\n     pub fn set_scope(mut self, scope: Option<SearchScope>) -> FindUsages<'a> {\n         assert!(self.scope.is_none());\n         self.scope = scope;\n@@ -355,18 +332,23 @@ impl<'a> FindUsages<'a> {\n                     continue;\n                 }\n \n-                if let Some(name_ref) = sema.find_node_at_offset_with_descend(&tree, offset) {\n-                    if self.found_name_ref(&name_ref, sink) {\n-                        return;\n-                    }\n-                } else if let Some(name) = sema.find_node_at_offset_with_descend(&tree, offset) {\n-                    if self.found_name(&name, sink) {\n-                        return;\n-                    }\n-                } else if let Some(lifetime) = sema.find_node_at_offset_with_descend(&tree, offset)\n-                {\n-                    if self.found_lifetime(&lifetime, sink) {\n-                        return;\n+                if let Some(name) = sema.find_node_at_offset_with_descend(&tree, offset) {\n+                    match name {\n+                        ast::NameLike::NameRef(name_ref) => {\n+                            if self.found_name_ref(&name_ref, sink) {\n+                                return;\n+                            }\n+                        }\n+                        ast::NameLike::Name(name) => {\n+                            if self.found_name(&name, sink) {\n+                                return;\n+                            }\n+                        }\n+                        ast::NameLike::Lifetime(lifetime) => {\n+                            if self.found_lifetime(&lifetime, sink) {\n+                                return;\n+                            }\n+                        }\n                     }\n                 }\n             }\n@@ -383,7 +365,7 @@ impl<'a> FindUsages<'a> {\n                 let FileRange { file_id, range } = self.sema.original_range(lifetime.syntax());\n                 let reference = FileReference {\n                     range,\n-                    name: NameLike::Lifetime(lifetime.clone()),\n+                    name: ast::NameLike::Lifetime(lifetime.clone()),\n                     access: None,\n                 };\n                 sink(file_id, reference)\n@@ -402,7 +384,7 @@ impl<'a> FindUsages<'a> {\n                 let FileRange { file_id, range } = self.sema.original_range(name_ref.syntax());\n                 let reference = FileReference {\n                     range,\n-                    name: NameLike::NameRef(name_ref.clone()),\n+                    name: ast::NameLike::NameRef(name_ref.clone()),\n                     access: reference_access(&def, &name_ref),\n                 };\n                 sink(file_id, reference)\n@@ -412,12 +394,12 @@ impl<'a> FindUsages<'a> {\n                 let reference = match self.def {\n                     Definition::Field(_) if &field == self.def => FileReference {\n                         range,\n-                        name: NameLike::NameRef(name_ref.clone()),\n+                        name: ast::NameLike::NameRef(name_ref.clone()),\n                         access: reference_access(&field, &name_ref),\n                     },\n                     Definition::Local(l) if &local == l => FileReference {\n                         range,\n-                        name: NameLike::NameRef(name_ref.clone()),\n+                        name: ast::NameLike::NameRef(name_ref.clone()),\n                         access: reference_access(&Definition::Local(local), &name_ref),\n                     },\n                     _ => return false, // not a usage\n@@ -441,7 +423,7 @@ impl<'a> FindUsages<'a> {\n                 let FileRange { file_id, range } = self.sema.original_range(name.syntax());\n                 let reference = FileReference {\n                     range,\n-                    name: NameLike::Name(name.clone()),\n+                    name: ast::NameLike::Name(name.clone()),\n                     // FIXME: mutable patterns should have `Write` access\n                     access: Some(ReferenceAccess::Read),\n                 };"}, {"sha": "72214a4f00bf266a5f3224fa0172e17e9cd7dadb", "filename": "crates/syntax/src/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4054525c418085db4ceb2df70475a1ac9c019aff/crates%2Fsyntax%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4054525c418085db4ceb2df70475a1ac9c019aff/crates%2Fsyntax%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast.rs?ref=4054525c418085db4ceb2df70475a1ac9c019aff", "patch": "@@ -19,8 +19,8 @@ pub use self::{\n     expr_ext::{ArrayExprKind, BinOp, Effect, ElseBranch, LiteralKind, PrefixOp, RangeOp},\n     generated::{nodes::*, tokens::*},\n     node_ext::{\n-        AttrKind, FieldKind, Macro, NameOrNameRef, PathSegmentKind, SelfParamKind,\n-        SlicePatComponents, StructKind, TypeBoundKind, VisibilityKind,\n+        AttrKind, FieldKind, Macro, NameLike, PathSegmentKind, SelfParamKind, SlicePatComponents,\n+        StructKind, TypeBoundKind, VisibilityKind,\n     },\n     token_ext::*,\n     traits::*,"}, {"sha": "c1f8101b26a67df3f734365d0b79c57401ec5f03", "filename": "crates/syntax/src/ast/node_ext.rs", "status": "modified", "additions": 51, "deletions": 10, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/4054525c418085db4ceb2df70475a1ac9c019aff/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4054525c418085db4ceb2df70475a1ac9c019aff/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs?ref=4054525c418085db4ceb2df70475a1ac9c019aff", "patch": "@@ -298,25 +298,66 @@ impl ast::RecordExprField {\n }\n \n #[derive(Debug, Clone, PartialEq)]\n-pub enum NameOrNameRef {\n-    Name(ast::Name),\n+pub enum NameLike {\n     NameRef(ast::NameRef),\n+    Name(ast::Name),\n+    Lifetime(ast::Lifetime),\n }\n \n-impl fmt::Display for NameOrNameRef {\n+impl NameLike {\n+    pub fn as_name_ref(&self) -> Option<&ast::NameRef> {\n+        match self {\n+            NameLike::NameRef(name_ref) => Some(name_ref),\n+            _ => None,\n+        }\n+    }\n+}\n+\n+impl ast::AstNode for NameLike {\n+    fn can_cast(kind: SyntaxKind) -> bool {\n+        matches!(kind, SyntaxKind::NAME | SyntaxKind::NAME_REF | SyntaxKind::LIFETIME)\n+    }\n+    fn cast(syntax: SyntaxNode) -> Option<Self> {\n+        let res = match syntax.kind() {\n+            SyntaxKind::NAME => NameLike::Name(ast::Name { syntax }),\n+            SyntaxKind::NAME_REF => NameLike::NameRef(ast::NameRef { syntax }),\n+            SyntaxKind::LIFETIME => NameLike::Lifetime(ast::Lifetime { syntax }),\n+            _ => return None,\n+        };\n+        Some(res)\n+    }\n+    fn syntax(&self) -> &SyntaxNode {\n+        match self {\n+            NameLike::NameRef(it) => it.syntax(),\n+            NameLike::Name(it) => it.syntax(),\n+            NameLike::Lifetime(it) => it.syntax(),\n+        }\n+    }\n+}\n+\n+impl fmt::Display for NameLike {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self {\n-            NameOrNameRef::Name(it) => fmt::Display::fmt(it, f),\n-            NameOrNameRef::NameRef(it) => fmt::Display::fmt(it, f),\n+            NameLike::Name(it) => fmt::Display::fmt(it, f),\n+            NameLike::NameRef(it) => fmt::Display::fmt(it, f),\n+            NameLike::Lifetime(it) => fmt::Display::fmt(it, f),\n         }\n     }\n }\n \n+mod __ {\n+    use super::{\n+        ast::{Lifetime, Name, NameRef},\n+        NameLike,\n+    };\n+    stdx::impl_from!(NameRef, Name, Lifetime for NameLike);\n+}\n+\n impl ast::RecordPatField {\n     pub fn for_field_name_ref(field_name: &ast::NameRef) -> Option<ast::RecordPatField> {\n         let candidate = field_name.syntax().parent().and_then(ast::RecordPatField::cast)?;\n         match candidate.field_name()? {\n-            NameOrNameRef::NameRef(name_ref) if name_ref == *field_name => Some(candidate),\n+            NameLike::NameRef(name_ref) if name_ref == *field_name => Some(candidate),\n             _ => None,\n         }\n     }\n@@ -325,19 +366,19 @@ impl ast::RecordPatField {\n         let candidate =\n             field_name.syntax().ancestors().nth(2).and_then(ast::RecordPatField::cast)?;\n         match candidate.field_name()? {\n-            NameOrNameRef::Name(name) if name == *field_name => Some(candidate),\n+            NameLike::Name(name) if name == *field_name => Some(candidate),\n             _ => None,\n         }\n     }\n \n     /// Deals with field init shorthand\n-    pub fn field_name(&self) -> Option<NameOrNameRef> {\n+    pub fn field_name(&self) -> Option<NameLike> {\n         if let Some(name_ref) = self.name_ref() {\n-            return Some(NameOrNameRef::NameRef(name_ref));\n+            return Some(NameLike::NameRef(name_ref));\n         }\n         if let Some(ast::Pat::IdentPat(pat)) = self.pat() {\n             let name = pat.name()?;\n-            return Some(NameOrNameRef::Name(name));\n+            return Some(NameLike::Name(name));\n         }\n         None\n     }"}]}