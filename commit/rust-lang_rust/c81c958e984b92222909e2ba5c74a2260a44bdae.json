{"sha": "c81c958e984b92222909e2ba5c74a2260a44bdae", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4MWM5NThlOTg0YjkyMjIyOTA5ZTJiYTVjNzRhMjI2MGE0NGJkYWU=", "commit": {"author": {"name": "Sean Griffin", "email": "sean@seantheprogrammer.com", "date": "2017-03-17T16:43:15Z"}, "committer": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-04-15T02:04:53Z"}, "message": "Further update with response to feedback", "tree": {"sha": "6e1532f5663b9c6d4ed4538da5b992d2ca959827", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e1532f5663b9c6d4ed4538da5b992d2ca959827"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c81c958e984b92222909e2ba5c74a2260a44bdae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c81c958e984b92222909e2ba5c74a2260a44bdae", "html_url": "https://github.com/rust-lang/rust/commit/c81c958e984b92222909e2ba5c74a2260a44bdae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c81c958e984b92222909e2ba5c74a2260a44bdae/comments", "author": {"login": "sgrif", "id": 1529387, "node_id": "MDQ6VXNlcjE1MjkzODc=", "avatar_url": "https://avatars.githubusercontent.com/u/1529387?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sgrif", "html_url": "https://github.com/sgrif", "followers_url": "https://api.github.com/users/sgrif/followers", "following_url": "https://api.github.com/users/sgrif/following{/other_user}", "gists_url": "https://api.github.com/users/sgrif/gists{/gist_id}", "starred_url": "https://api.github.com/users/sgrif/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sgrif/subscriptions", "organizations_url": "https://api.github.com/users/sgrif/orgs", "repos_url": "https://api.github.com/users/sgrif/repos", "events_url": "https://api.github.com/users/sgrif/events{/privacy}", "received_events_url": "https://api.github.com/users/sgrif/received_events", "type": "User", "site_admin": false}, "committer": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ddcca79d25fffd6604fba593b1ca642a9dfa5727", "url": "https://api.github.com/repos/rust-lang/rust/commits/ddcca79d25fffd6604fba593b1ca642a9dfa5727", "html_url": "https://github.com/rust-lang/rust/commit/ddcca79d25fffd6604fba593b1ca642a9dfa5727"}], "stats": {"total": 36, "additions": 19, "deletions": 17}, "files": [{"sha": "410eb2b84849e0a830bb0dddf9b90cb7d386cc7d", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c81c958e984b92222909e2ba5c74a2260a44bdae/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81c958e984b92222909e2ba5c74a2260a44bdae/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=c81c958e984b92222909e2ba5c74a2260a44bdae", "patch": "@@ -1736,7 +1736,8 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                 if other.evaluation == EvaluatedToOk {\n                     if let ImplCandidate(victim_def) = victim.candidate {\n                         let tcx = self.tcx().global_tcx();\n-                        return traits::specializes(tcx, other_def, victim_def);\n+                        return traits::specializes(tcx, other_def, victim_def) ||\n+                            tcx.impls_are_allowed_to_overlap(other_def, victim_def);\n                     }\n                 }\n "}, {"sha": "50a4d982832ace739c8c78b7afac69938d07f6c7", "filename": "src/librustc/traits/specialize/mod.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c81c958e984b92222909e2ba5c74a2260a44bdae/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81c958e984b92222909e2ba5c74a2260a44bdae/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs?ref=c81c958e984b92222909e2ba5c74a2260a44bdae", "patch": "@@ -155,11 +155,6 @@ pub fn specializes<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         return r;\n     }\n \n-    if tcx.impl_always_allowed_to_overlap(impl1_def_id)\n-        && tcx.impl_always_allowed_to_overlap(impl2_def_id) {\n-        return true;\n-    }\n-\n     // The feature gate should prevent introducing new specializations, but not\n     // taking advantage of upstream ones.\n     if !tcx.sess.features.borrow().specialization &&"}, {"sha": "6e2c16c82aeb42274fd30c21a4a058a66d607e00", "filename": "src/librustc/traits/specialize/specialization_graph.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c81c958e984b92222909e2ba5c74a2260a44bdae/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81c958e984b92222909e2ba5c74a2260a44bdae/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs?ref=c81c958e984b92222909e2ba5c74a2260a44bdae", "patch": "@@ -113,9 +113,8 @@ impl<'a, 'gcx, 'tcx> Children {\n                                                         possible_sibling,\n                                                         impl_def_id);\n                 if let Some(impl_header) = overlap {\n-                    if tcx.impl_always_allowed_to_overlap(impl_def_id)\n-                        && tcx.impl_always_allowed_to_overlap(possible_sibling) {\n-                        return Ok((true, true));\n+                    if tcx.impls_are_allowed_to_overlap(impl_def_id, possible_sibling) {\n+                        return Ok((false, false));\n                     }\n \n                     let le = specializes(tcx, impl_def_id, possible_sibling);"}, {"sha": "2ae77046a90ed776a8f4464172f6725905cc183e", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c81c958e984b92222909e2ba5c74a2260a44bdae/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81c958e984b92222909e2ba5c74a2260a44bdae/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=c81c958e984b92222909e2ba5c74a2260a44bdae", "patch": "@@ -2227,14 +2227,20 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         queries::impl_trait_ref::get(self, DUMMY_SP, id)\n     }\n \n-    /// Returns true if the impl is positive and is for a trait which contains\n-    /// no items\n-    pub fn impl_always_allowed_to_overlap(self, def_id: DefId) -> bool {\n-        self.trait_impl_polarity(def_id) == hir::ImplPolarity::Positive\n-            && self.impl_trait_ref(def_id)\n-                .map_or(false, |trait_ref| {\n-                    self.associated_item_def_ids(trait_ref.def_id).is_empty()\n-                })\n+    /// Returns true if the impls are the same polarity and are implementing\n+    /// a trait which contains no items\n+    pub fn impls_are_allowed_to_overlap(self, def_id1: DefId, def_id2: DefId) -> bool {\n+        let trait1_is_empty = self.impl_trait_ref(def_id1)\n+            .map_or(false, |trait_ref| {\n+                self.associated_item_def_ids(trait_ref.def_id).is_empty()\n+            });\n+        let trait2_is_empty = self.impl_trait_ref(def_id2)\n+            .map_or(false, |trait_ref| {\n+                self.associated_item_def_ids(trait_ref.def_id).is_empty()\n+            });\n+        self.trait_impl_polarity(def_id1) == self.trait_impl_polarity(def_id2)\n+            && trait1_is_empty\n+            && trait2_is_empty\n     }\n \n     // Returns `ty::VariantDef` if `def` refers to a struct,"}, {"sha": "3190ce430ad67ca41fc32553745bc6b016e52678", "filename": "src/test/compile-fail/auxiliary/trait_impl_conflict.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c81c958e984b92222909e2ba5c74a2260a44bdae/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Ftrait_impl_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81c958e984b92222909e2ba5c74a2260a44bdae/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Ftrait_impl_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Ftrait_impl_conflict.rs?ref=c81c958e984b92222909e2ba5c74a2260a44bdae", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n pub trait Foo {\n+    fn foo() {}\n }\n \n impl Foo for isize {"}]}