{"sha": "cd2eb4701fc16e7acd6934759be043b1f7e5586d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkMmViNDcwMWZjMTZlN2FjZDY5MzQ3NTliZTA0M2IxZjdlNTU4NmQ=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-05-16T04:15:37Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-05-16T12:55:08Z"}, "message": "syntax: implement #[deriving(DeepClone)]. Fixes #6514.", "tree": {"sha": "056658f88fad7d623ef7843e51992dc8c258050d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/056658f88fad7d623ef7843e51992dc8c258050d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd2eb4701fc16e7acd6934759be043b1f7e5586d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd2eb4701fc16e7acd6934759be043b1f7e5586d", "html_url": "https://github.com/rust-lang/rust/commit/cd2eb4701fc16e7acd6934759be043b1f7e5586d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd2eb4701fc16e7acd6934759be043b1f7e5586d/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2329651770d026ff422ad40dabe576965f46c852", "url": "https://api.github.com/repos/rust-lang/rust/commits/2329651770d026ff422ad40dabe576965f46c852", "html_url": "https://github.com/rust-lang/rust/commit/2329651770d026ff422ad40dabe576965f46c852"}], "stats": {"total": 112, "additions": 94, "deletions": 18}, "files": [{"sha": "9839e9e8afd744b5d60412814cef335e209f5086", "filename": "doc/rust.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd2eb4701fc16e7acd6934759be043b1f7e5586d/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/cd2eb4701fc16e7acd6934759be043b1f7e5586d/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=cd2eb4701fc16e7acd6934759be043b1f7e5586d", "patch": "@@ -1562,7 +1562,7 @@ Supported traits for `deriving` are:\n \n * Comparison traits: `Eq`, `TotalEq`, `Ord`, `TotalOrd`.\n * Serialization: `Encodable`, `Decodable`. These require `std`.\n-* `Clone`, to perform deep copies.\n+* `Clone` and `DeepClone`, to perform (deep) copies.\n * `IterBytes`, to iterate over the bytes in a data type.\n * `Rand`, to create a random instance of a data type.\n * `ToStr`, to convert to a string. For a type with this instance,"}, {"sha": "a01423d3fd3fcca7950cbc1676bfae142a25902b", "filename": "doc/tutorial.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd2eb4701fc16e7acd6934759be043b1f7e5586d/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/cd2eb4701fc16e7acd6934759be043b1f7e5586d/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=cd2eb4701fc16e7acd6934759be043b1f7e5586d", "patch": "@@ -2308,8 +2308,8 @@ enum ABC { A, B, C }\n ~~~\n \n The full list of derivable traits is `Eq`, `TotalEq`, `Ord`,\n-`TotalOrd`, `Encodable` `Decodable`, `Clone`, `IterBytes`, `Rand` and\n-`ToStr`.\n+`TotalOrd`, `Encodable` `Decodable`, `Clone`, `DeepClone`,\n+`IterBytes`, `Rand` and `ToStr`.\n \n # Modules and crates\n "}, {"sha": "935566b33d8068e6ad017e21cb1b8c45ae30d720", "filename": "src/libsyntax/ext/deriving/clone.rs", "status": "modified", "additions": 41, "deletions": 6, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/cd2eb4701fc16e7acd6934759be043b1f7e5586d/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd2eb4701fc16e7acd6934759be043b1f7e5586d/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs?ref=cd2eb4701fc16e7acd6934759be043b1f7e5586d", "patch": "@@ -32,7 +32,7 @@ pub fn expand_deriving_clone(cx: @ext_ctxt,\n                 args: ~[],\n                 ret_ty: Self,\n                 const_nonmatching: false,\n-                combine_substructure: cs_clone\n+                combine_substructure: |c, s, sub| cs_clone(\"Clone\", c, s, sub)\n             }\n         ]\n     };\n@@ -42,8 +42,39 @@ pub fn expand_deriving_clone(cx: @ext_ctxt,\n                             &trait_def)\n }\n \n-fn cs_clone(cx: @ext_ctxt, span: span,\n-            substr: &Substructure) -> @expr {\n+pub fn expand_deriving_deep_clone(cx: @ext_ctxt,\n+                                 span: span,\n+                                 mitem: @meta_item,\n+                                 in_items: ~[@item])\n+    -> ~[@item] {\n+    let trait_def = TraitDef {\n+        path: Path::new(~[~\"core\", ~\"clone\", ~\"DeepClone\"]),\n+        additional_bounds: ~[],\n+        generics: LifetimeBounds::empty(),\n+        methods: ~[\n+            MethodDef {\n+                name: ~\"deep_clone\",\n+                generics: LifetimeBounds::empty(),\n+                explicit_self: borrowed_explicit_self(),\n+                args: ~[],\n+                ret_ty: Self,\n+                const_nonmatching: false,\n+                // cs_clone uses the ident passed to it, i.e. it will\n+                // call deep_clone (not clone) here.\n+                combine_substructure: |c, s, sub| cs_clone(\"DeepClone\", c, s, sub)\n+            }\n+        ]\n+    };\n+\n+    expand_deriving_generic(cx, span,\n+                            mitem, in_items,\n+                            &trait_def)\n+}\n+\n+fn cs_clone(\n+    name: &str,\n+    cx: @ext_ctxt, span: span,\n+    substr: &Substructure) -> @expr {\n     let clone_ident = substr.method_ident;\n     let ctor_ident;\n     let all_fields;\n@@ -59,8 +90,12 @@ fn cs_clone(cx: @ext_ctxt, span: span,\n             ctor_ident = ~[ variant.node.name ];\n             all_fields = af;\n         },\n-        EnumNonMatching(*) => cx.span_bug(span, \"Non-matching enum variants in `deriving(Clone)`\"),\n-        StaticEnum(*) | StaticStruct(*) => cx.span_bug(span, \"Static method in `deriving(Clone)`\")\n+        EnumNonMatching(*) => cx.span_bug(span,\n+                                          ~\"Non-matching enum variants in `deriving(\" +\n+                                          name + \")`\"),\n+        StaticEnum(*) | StaticStruct(*) => cx.span_bug(span,\n+                                                       ~\"Static method in `deriving(\" +\n+                                                       name + \")`\")\n     }\n \n     match *all_fields {\n@@ -76,7 +111,7 @@ fn cs_clone(cx: @ext_ctxt, span: span,\n                     Some(i) => i,\n                     None => cx.span_bug(span,\n                                         ~\"unnamed field in normal struct \\\n-                                          in `deriving(Clone)`\")\n+                                          in `deriving(\" + name + \")`\")\n                 };\n                 build::Field { ident: ident, ex: subcall(self_f) }\n             };"}, {"sha": "78cd5cdb423d9edae4348238a41d90b4c3b3b4a7", "filename": "src/libsyntax/ext/deriving/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cd2eb4701fc16e7acd6934759be043b1f7e5586d/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd2eb4701fc16e7acd6934759be043b1f7e5586d/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs?ref=cd2eb4701fc16e7acd6934759be043b1f7e5586d", "patch": "@@ -84,6 +84,7 @@ pub fn expand_meta_deriving(cx: @ext_ctxt,\n                                                                    titem, in_items)));\n                         match *tname {\n                             ~\"Clone\" => expand!(clone::expand_deriving_clone),\n+                            ~\"DeepClone\" => expand!(clone::expand_deriving_deep_clone),\n \n                             ~\"IterBytes\" => expand!(iter_bytes::expand_deriving_iter_bytes),\n "}, {"sha": "9ce965aa49f26cab0dda32c2ed38512820927722", "filename": "src/test/run-pass/deriving-clone-enum.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cd2eb4701fc16e7acd6934759be043b1f7e5586d/src%2Ftest%2Frun-pass%2Fderiving-clone-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd2eb4701fc16e7acd6934759be043b1f7e5586d/src%2Ftest%2Frun-pass%2Fderiving-clone-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-clone-enum.rs?ref=cd2eb4701fc16e7acd6934759be043b1f7e5586d", "patch": "@@ -8,11 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[deriving(Clone)]\n+#[deriving(Clone, DeepClone)]\n enum E {\n     A,\n     B(()),\n     C\n }\n \n-pub fn main() {}\n+pub fn main() {\n+    let _ = A.clone();\n+    let _ = B(()).deep_clone();\n+}"}, {"sha": "78abbf504f36690a85b6403aaeb36c70dff81cbb", "filename": "src/test/run-pass/deriving-clone-generic-enum.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/cd2eb4701fc16e7acd6934759be043b1f7e5586d/src%2Ftest%2Frun-pass%2Fderiving-clone-generic-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd2eb4701fc16e7acd6934759be043b1f7e5586d/src%2Ftest%2Frun-pass%2Fderiving-clone-generic-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-clone-generic-enum.rs?ref=cd2eb4701fc16e7acd6934759be043b1f7e5586d", "patch": "@@ -1,8 +1,21 @@\n-#[deriving(Clone)]\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[deriving(Clone, DeepClone)]\n enum E<T,U> {\n     A(T),\n     B(T,U),\n     C\n }\n \n-fn main() {}\n+fn main() {\n+    let _ = A::<int, int>(1i).clone();\n+    let _ = B(1i, 1.234).deep_clone();\n+}"}, {"sha": "fd300cbc8b74b9eafff402efadbe542e8ccef0eb", "filename": "src/test/run-pass/deriving-clone-generic-struct.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cd2eb4701fc16e7acd6934759be043b1f7e5586d/src%2Ftest%2Frun-pass%2Fderiving-clone-generic-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd2eb4701fc16e7acd6934759be043b1f7e5586d/src%2Ftest%2Frun-pass%2Fderiving-clone-generic-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-clone-generic-struct.rs?ref=cd2eb4701fc16e7acd6934759be043b1f7e5586d", "patch": "@@ -8,11 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[deriving(Clone)]\n+#[deriving(Clone, DeepClone)]\n struct S<T> {\n     foo: (),\n     bar: (),\n     baz: T,\n }\n \n-pub fn main() {}\n+pub fn main() {\n+    let _ = S { foo: (), bar: (), baz: 1i }.clone().deep_clone();\n+}"}, {"sha": "c082a11eab84c859064c324a0d26fc137168a4f8", "filename": "src/test/run-pass/deriving-clone-generic-tuple-struct.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cd2eb4701fc16e7acd6934759be043b1f7e5586d/src%2Ftest%2Frun-pass%2Fderiving-clone-generic-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd2eb4701fc16e7acd6934759be043b1f7e5586d/src%2Ftest%2Frun-pass%2Fderiving-clone-generic-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-clone-generic-tuple-struct.rs?ref=cd2eb4701fc16e7acd6934759be043b1f7e5586d", "patch": "@@ -1,4 +1,16 @@\n-#[deriving(Clone)]\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[deriving(Clone, DeepClone)]\n struct S<T>(T, ());\n \n-fn main() {}\n+fn main() {\n+    let _ = S(1i, ()).clone().deep_clone();\n+}"}, {"sha": "d540b047af7f397c076b0750bd0dba8cae70aca1", "filename": "src/test/run-pass/deriving-clone-struct.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cd2eb4701fc16e7acd6934759be043b1f7e5586d/src%2Ftest%2Frun-pass%2Fderiving-clone-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd2eb4701fc16e7acd6934759be043b1f7e5586d/src%2Ftest%2Frun-pass%2Fderiving-clone-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-clone-struct.rs?ref=cd2eb4701fc16e7acd6934759be043b1f7e5586d", "patch": "@@ -1,4 +1,14 @@\n-#[deriving(Clone)]\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[deriving(Clone, DeepClone)]\n struct S {\n     _int: int,\n     _i8: i8,"}]}