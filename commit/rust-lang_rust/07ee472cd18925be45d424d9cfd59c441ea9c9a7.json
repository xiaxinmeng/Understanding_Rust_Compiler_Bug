{"sha": "07ee472cd18925be45d424d9cfd59c441ea9c9a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3ZWU0NzJjZDE4OTI1YmU0NWQ0MjRkOWNmZDU5YzQ0MWVhOWM5YTc=", "commit": {"author": {"name": "Rob Pilling", "email": "robpilling@gmail.com", "date": "2020-02-01T19:24:51Z"}, "committer": {"name": "Rob Pilling", "email": "robpilling@gmail.com", "date": "2020-02-01T19:38:52Z"}, "message": "Avoid qualified path recovery when not followed by identifier", "tree": {"sha": "5fb56733fad30b23cd62b16e1f40ff47230b6de4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5fb56733fad30b23cd62b16e1f40ff47230b6de4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/07ee472cd18925be45d424d9cfd59c441ea9c9a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/07ee472cd18925be45d424d9cfd59c441ea9c9a7", "html_url": "https://github.com/rust-lang/rust/commit/07ee472cd18925be45d424d9cfd59c441ea9c9a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/07ee472cd18925be45d424d9cfd59c441ea9c9a7/comments", "author": {"login": "bobrippling", "id": 205673, "node_id": "MDQ6VXNlcjIwNTY3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/205673?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobrippling", "html_url": "https://github.com/bobrippling", "followers_url": "https://api.github.com/users/bobrippling/followers", "following_url": "https://api.github.com/users/bobrippling/following{/other_user}", "gists_url": "https://api.github.com/users/bobrippling/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobrippling/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobrippling/subscriptions", "organizations_url": "https://api.github.com/users/bobrippling/orgs", "repos_url": "https://api.github.com/users/bobrippling/repos", "events_url": "https://api.github.com/users/bobrippling/events{/privacy}", "received_events_url": "https://api.github.com/users/bobrippling/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bobrippling", "id": 205673, "node_id": "MDQ6VXNlcjIwNTY3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/205673?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobrippling", "html_url": "https://github.com/bobrippling", "followers_url": "https://api.github.com/users/bobrippling/followers", "following_url": "https://api.github.com/users/bobrippling/following{/other_user}", "gists_url": "https://api.github.com/users/bobrippling/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobrippling/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobrippling/subscriptions", "organizations_url": "https://api.github.com/users/bobrippling/orgs", "repos_url": "https://api.github.com/users/bobrippling/repos", "events_url": "https://api.github.com/users/bobrippling/events{/privacy}", "received_events_url": "https://api.github.com/users/bobrippling/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "991d2ee282837a0ca3ec5a730e081274d37fa8b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/991d2ee282837a0ca3ec5a730e081274d37fa8b0", "html_url": "https://github.com/rust-lang/rust/commit/991d2ee282837a0ca3ec5a730e081274d37fa8b0"}], "stats": {"total": 6, "additions": 5, "deletions": 1}, "files": [{"sha": "a09eb42dcfe6ae5b6153c5da1bcdc3725d2b6098", "filename": "src/librustc_parse/parser/path.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/07ee472cd18925be45d424d9cfd59c441ea9c9a7/src%2Flibrustc_parse%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07ee472cd18925be45d424d9cfd59c441ea9c9a7/src%2Flibrustc_parse%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fpath.rs?ref=07ee472cd18925be45d424d9cfd59c441ea9c9a7", "patch": "@@ -82,13 +82,17 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Recover from an invalid single colon, when the user likely meant a qualified path.\n+    /// We avoid emitting this if not followed by an identifier, as our assumption that the user\n+    /// intended this to be a qualified path may not be correct.\n     ///\n     /// ```ignore (diagnostics)\n     /// <Bar as Baz<T>>:Qux\n     ///                ^ help: use double colon\n     /// ```\n     fn recover_colon_before_qpath_proj(&mut self) -> bool {\n-        if self.token.kind != token::Colon {\n+        if self.token.kind != token::Colon\n+            || self.look_ahead(1, |t| !t.is_ident() || t.is_reserved_ident())\n+        {\n             return false;\n         }\n "}]}