{"sha": "32fde0b5116b3a1115d11c49a9bf2af2ebdd5773", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyZmRlMGI1MTE2YjNhMTExNWQxMWM0OWE5YmYyYWYyZWJkZDU3NzM=", "commit": {"author": {"name": "Ericko Samudera", "email": "ericko.samudera@gmail.com", "date": "2020-05-25T16:22:01Z"}, "committer": {"name": "Ericko Samudera", "email": "ericko.samudera@gmail.com", "date": "2020-05-31T20:08:51Z"}, "message": "New lint: iter_next_slice", "tree": {"sha": "8d564f2dd2a8ae761b99c9cc67af3d4874571fd8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d564f2dd2a8ae761b99c9cc67af3d4874571fd8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/32fde0b5116b3a1115d11c49a9bf2af2ebdd5773", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/32fde0b5116b3a1115d11c49a9bf2af2ebdd5773", "html_url": "https://github.com/rust-lang/rust/commit/32fde0b5116b3a1115d11c49a9bf2af2ebdd5773", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/32fde0b5116b3a1115d11c49a9bf2af2ebdd5773/comments", "author": {"login": "esamudera", "id": 21173009, "node_id": "MDQ6VXNlcjIxMTczMDA5", "avatar_url": "https://avatars.githubusercontent.com/u/21173009?v=4", "gravatar_id": "", "url": "https://api.github.com/users/esamudera", "html_url": "https://github.com/esamudera", "followers_url": "https://api.github.com/users/esamudera/followers", "following_url": "https://api.github.com/users/esamudera/following{/other_user}", "gists_url": "https://api.github.com/users/esamudera/gists{/gist_id}", "starred_url": "https://api.github.com/users/esamudera/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/esamudera/subscriptions", "organizations_url": "https://api.github.com/users/esamudera/orgs", "repos_url": "https://api.github.com/users/esamudera/repos", "events_url": "https://api.github.com/users/esamudera/events{/privacy}", "received_events_url": "https://api.github.com/users/esamudera/received_events", "type": "User", "site_admin": false}, "committer": {"login": "esamudera", "id": 21173009, "node_id": "MDQ6VXNlcjIxMTczMDA5", "avatar_url": "https://avatars.githubusercontent.com/u/21173009?v=4", "gravatar_id": "", "url": "https://api.github.com/users/esamudera", "html_url": "https://github.com/esamudera", "followers_url": "https://api.github.com/users/esamudera/followers", "following_url": "https://api.github.com/users/esamudera/following{/other_user}", "gists_url": "https://api.github.com/users/esamudera/gists{/gist_id}", "starred_url": "https://api.github.com/users/esamudera/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/esamudera/subscriptions", "organizations_url": "https://api.github.com/users/esamudera/orgs", "repos_url": "https://api.github.com/users/esamudera/repos", "events_url": "https://api.github.com/users/esamudera/events{/privacy}", "received_events_url": "https://api.github.com/users/esamudera/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce86f907ef647ff4cb8c733ec6aae63b69e444a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce86f907ef647ff4cb8c733ec6aae63b69e444a7", "html_url": "https://github.com/rust-lang/rust/commit/ce86f907ef647ff4cb8c733ec6aae63b69e444a7"}], "stats": {"total": 229, "additions": 204, "deletions": 25}, "files": [{"sha": "714e25a32ea64e5d8f6aca821c19e350406b805e", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/32fde0b5116b3a1115d11c49a9bf2af2ebdd5773/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/32fde0b5116b3a1115d11c49a9bf2af2ebdd5773/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=32fde0b5116b3a1115d11c49a9bf2af2ebdd5773", "patch": "@@ -1401,6 +1401,7 @@ Released 2018-09-13\n [`items_after_statements`]: https://rust-lang.github.io/rust-clippy/master/index.html#items_after_statements\n [`iter_cloned_collect`]: https://rust-lang.github.io/rust-clippy/master/index.html#iter_cloned_collect\n [`iter_next_loop`]: https://rust-lang.github.io/rust-clippy/master/index.html#iter_next_loop\n+[`iter_next_slice`]: https://rust-lang.github.io/rust-clippy/master/index.html#iter_next_slice\n [`iter_nth`]: https://rust-lang.github.io/rust-clippy/master/index.html#iter_nth\n [`iter_nth_zero`]: https://rust-lang.github.io/rust-clippy/master/index.html#iter_nth_zero\n [`iter_skip_next`]: https://rust-lang.github.io/rust-clippy/master/index.html#iter_skip_next"}, {"sha": "7c16dbd8f2676e25ce052f93752cd54b7529970a", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/32fde0b5116b3a1115d11c49a9bf2af2ebdd5773/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32fde0b5116b3a1115d11c49a9bf2af2ebdd5773/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=32fde0b5116b3a1115d11c49a9bf2af2ebdd5773", "patch": "@@ -669,6 +669,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &methods::INTO_ITER_ON_REF,\n         &methods::ITERATOR_STEP_BY_ZERO,\n         &methods::ITER_CLONED_COLLECT,\n+        &methods::ITER_NEXT_SLICE,\n         &methods::ITER_NTH,\n         &methods::ITER_NTH_ZERO,\n         &methods::ITER_SKIP_NEXT,\n@@ -1303,6 +1304,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&methods::INTO_ITER_ON_REF),\n         LintId::of(&methods::ITERATOR_STEP_BY_ZERO),\n         LintId::of(&methods::ITER_CLONED_COLLECT),\n+        LintId::of(&methods::ITER_NEXT_SLICE),\n         LintId::of(&methods::ITER_NTH),\n         LintId::of(&methods::ITER_NTH_ZERO),\n         LintId::of(&methods::ITER_SKIP_NEXT),\n@@ -1483,6 +1485,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&methods::CHARS_NEXT_CMP),\n         LintId::of(&methods::INTO_ITER_ON_REF),\n         LintId::of(&methods::ITER_CLONED_COLLECT),\n+        LintId::of(&methods::ITER_NEXT_SLICE),\n         LintId::of(&methods::ITER_NTH_ZERO),\n         LintId::of(&methods::ITER_SKIP_NEXT),\n         LintId::of(&methods::MANUAL_SATURATING_ARITHMETIC),"}, {"sha": "dbe41823a9cf6874ef5f88977f6d76fee9ef6933", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/32fde0b5116b3a1115d11c49a9bf2af2ebdd5773/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32fde0b5116b3a1115d11c49a9bf2af2ebdd5773/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=32fde0b5116b3a1115d11c49a9bf2af2ebdd5773", "patch": "@@ -27,7 +27,7 @@ use rustc_middle::middle::region;\n use rustc_middle::ty::{self, Ty};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n-use rustc_span::BytePos;\n+use rustc_span::symbol::Symbol;\n use rustc_typeck::expr_use_visitor::{ConsumeMode, Delegate, ExprUseVisitor, Place, PlaceBase};\n use std::iter::{once, Iterator};\n use std::mem;\n@@ -2381,32 +2381,32 @@ fn check_needless_collect<'a, 'tcx>(expr: &'tcx Expr<'_>, cx: &LateContext<'a, '\n                 match_type(cx, ty, &paths::BTREEMAP) ||\n                 is_type_diagnostic_item(cx, ty, sym!(hashmap_type)) {\n                 if method.ident.name == sym!(len) {\n-                    let span = shorten_needless_collect_span(expr);\n+                    let span = shorten_span(expr, sym!(collect));\n                     span_lint_and_sugg(\n                         cx,\n                         NEEDLESS_COLLECT,\n                         span,\n                         NEEDLESS_COLLECT_MSG,\n                         \"replace with\",\n-                        \".count()\".to_string(),\n+                        \"count()\".to_string(),\n                         Applicability::MachineApplicable,\n                     );\n                 }\n                 if method.ident.name == sym!(is_empty) {\n-                    let span = shorten_needless_collect_span(expr);\n+                    let span = shorten_span(expr, sym!(iter));\n                     span_lint_and_sugg(\n                         cx,\n                         NEEDLESS_COLLECT,\n                         span,\n                         NEEDLESS_COLLECT_MSG,\n                         \"replace with\",\n-                        \".next().is_none()\".to_string(),\n+                        \"get(0).is_none()\".to_string(),\n                         Applicability::MachineApplicable,\n                     );\n                 }\n                 if method.ident.name == sym!(contains) {\n                     let contains_arg = snippet(cx, args[1].span, \"??\");\n-                    let span = shorten_needless_collect_span(expr);\n+                    let span = shorten_span(expr, sym!(collect));\n                     span_lint_and_then(\n                         cx,\n                         NEEDLESS_COLLECT,\n@@ -2422,7 +2422,7 @@ fn check_needless_collect<'a, 'tcx>(expr: &'tcx Expr<'_>, cx: &LateContext<'a, '\n                                 span,\n                                 \"replace with\",\n                                 format!(\n-                                    \".any(|{}| x == {})\",\n+                                    \"any(|{}| x == {})\",\n                                     arg, pred\n                                 ),\n                                 Applicability::MachineApplicable,\n@@ -2435,13 +2435,13 @@ fn check_needless_collect<'a, 'tcx>(expr: &'tcx Expr<'_>, cx: &LateContext<'a, '\n     }\n }\n \n-fn shorten_needless_collect_span(expr: &Expr<'_>) -> Span {\n-    if_chain! {\n-        if let ExprKind::MethodCall(_, _, ref args) = expr.kind;\n-        if let ExprKind::MethodCall(_, ref span, _) = args[0].kind;\n-        then {\n-            return expr.span.with_lo(span.lo() - BytePos(1));\n+fn shorten_span(expr: &Expr<'_>, target_fn_name: Symbol) -> Span {\n+    let mut current_expr = expr;\n+    while let ExprKind::MethodCall(ref path, ref span, ref args) = current_expr.kind {\n+        if path.ident.name == target_fn_name {\n+            return expr.span.with_lo(span.lo());\n         }\n+        current_expr = &args[0];\n     }\n     unreachable!()\n }"}, {"sha": "7cb04d4d81c4cf195c7e3016d13eb6ce992d6f4f", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 83, "deletions": 1, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/32fde0b5116b3a1115d11c49a9bf2af2ebdd5773/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32fde0b5116b3a1115d11c49a9bf2af2ebdd5773/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=32fde0b5116b3a1115d11c49a9bf2af2ebdd5773", "patch": "@@ -26,7 +26,7 @@ use rustc_span::symbol::{sym, SymbolStr};\n use crate::consts::{constant, Constant};\n use crate::utils::usage::mutated_variables;\n use crate::utils::{\n-    get_arg_name, get_parent_expr, get_trait_def_id, has_iter_method, implements_trait, in_macro, is_copy,\n+    get_arg_name, get_parent_expr, get_trait_def_id, has_iter_method, higher, implements_trait, in_macro, is_copy,\n     is_ctor_or_promotable_const_function, is_expn_of, is_type_diagnostic_item, iter_input_pats, last_path_segment,\n     match_def_path, match_qpath, match_trait_method, match_type, match_var, method_calls, method_chain_args, paths,\n     remove_blocks, return_ty, same_tys, single_segment_path, snippet, snippet_with_applicability,\n@@ -1242,6 +1242,32 @@ declare_clippy_lint! {\n     \"using `as_ref().map(Deref::deref)`, which is more succinctly expressed as `as_deref()`\"\n }\n \n+declare_clippy_lint! {\n+    /// **What it does:** Checks for usage of `iter().next()` on a Slice or an Array\n+    ///\n+    /// **Why is this bad?** These can be shortened into `.get()`\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    /// ```rust\n+    /// # let a = [1, 2, 3];\n+    /// # let b = vec![1, 2, 3];\n+    /// a[2..].iter().next();\n+    /// b.iter().next();\n+    /// ```\n+    /// should be written as:\n+    /// ```rust\n+    /// # let a = [1, 2, 3];\n+    /// # let b = vec![1, 2, 3];\n+    /// a.get(2);\n+    /// b.get(0);\n+    /// ```\n+    pub ITER_NEXT_SLICE,\n+    style,\n+    \"using `.iter().next()` on a sliced array, which can be shortened to just `.get()`\"\n+}\n+\n declare_lint_pass!(Methods => [\n     UNWRAP_USED,\n     EXPECT_USED,\n@@ -1273,6 +1299,7 @@ declare_lint_pass!(Methods => [\n     FIND_MAP,\n     MAP_FLATTEN,\n     ITERATOR_STEP_BY_ZERO,\n+    ITER_NEXT_SLICE,\n     ITER_NTH,\n     ITER_NTH_ZERO,\n     ITER_SKIP_NEXT,\n@@ -1320,6 +1347,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Methods {\n             },\n             [\"next\", \"filter\"] => lint_filter_next(cx, expr, arg_lists[1]),\n             [\"next\", \"skip_while\"] => lint_skip_while_next(cx, expr, arg_lists[1]),\n+            [\"next\", \"iter\"] => lint_iter_next(cx, expr, arg_lists[1]),\n             [\"map\", \"filter\"] => lint_filter_map(cx, expr, arg_lists[1], arg_lists[0]),\n             [\"map\", \"filter_map\"] => lint_filter_map_map(cx, expr, arg_lists[1], arg_lists[0]),\n             [\"next\", \"filter_map\"] => lint_filter_map_next(cx, expr, arg_lists[1]),\n@@ -2184,6 +2212,60 @@ fn lint_step_by<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &hir::Expr<'_>, args\n     }\n }\n \n+fn lint_iter_next<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx hir::Expr<'_>, iter_args: &'tcx [hir::Expr<'_>]) {\n+    let caller_expr = &iter_args[0];\n+\n+    // Skip lint if the `iter().next()` expression is a for loop argument,\n+    // since it is already covered by `&loops::ITER_NEXT_LOOP`\n+    let mut parent_expr_opt = get_parent_expr(cx, expr);\n+    while let Some(parent_expr) = parent_expr_opt {\n+        if higher::for_loop(parent_expr).is_some() {\n+            return;\n+        }\n+        parent_expr_opt = get_parent_expr(cx, parent_expr);\n+    }\n+\n+    if derefs_to_slice(cx, caller_expr, cx.tables.expr_ty(caller_expr)).is_some() {\n+        // caller is a Slice\n+        if_chain! {\n+            if let hir::ExprKind::Index(ref caller_var, ref index_expr) = &caller_expr.kind;\n+            if let Some(higher::Range { start: Some(start_expr), end: None, limits: ast::RangeLimits::HalfOpen })\n+                = higher::range(cx, index_expr);\n+            if let hir::ExprKind::Lit(ref start_lit) = &start_expr.kind;\n+            if let ast::LitKind::Int(start_idx, _) = start_lit.node;\n+            then {\n+                let mut applicability = Applicability::MachineApplicable;\n+                span_lint_and_sugg(\n+                    cx,\n+                    ITER_NEXT_SLICE,\n+                    expr.span,\n+                    \"Using `.iter().next()` on a Slice without end index.\",\n+                    \"try calling\",\n+                    format!(\"{}.get({})\", snippet_with_applicability(cx, caller_var.span, \"..\", &mut applicability), start_idx),\n+                    applicability,\n+                );\n+            }\n+        }\n+    } else if is_type_diagnostic_item(cx, cx.tables.expr_ty(caller_expr), sym!(vec_type))\n+        || matches!(&walk_ptrs_ty(cx.tables.expr_ty(caller_expr)).kind, ty::Array(_, _))\n+    {\n+        // caller is a Vec or an Array\n+        let mut applicability = Applicability::MachineApplicable;\n+        span_lint_and_sugg(\n+            cx,\n+            ITER_NEXT_SLICE,\n+            expr.span,\n+            \"Using `.iter().next()` on an array\",\n+            \"try calling\",\n+            format!(\n+                \"{}.get(0)\",\n+                snippet_with_applicability(cx, caller_expr.span, \"..\", &mut applicability)\n+            ),\n+            applicability,\n+        );\n+    }\n+}\n+\n fn lint_iter_nth<'a, 'tcx>(\n     cx: &LateContext<'a, 'tcx>,\n     expr: &hir::Expr<'_>,"}, {"sha": "a971d041ca6613182a5166e70d2b3a31f1792854", "filename": "clippy_lints/src/needless_continue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32fde0b5116b3a1115d11c49a9bf2af2ebdd5773/clippy_lints%2Fsrc%2Fneedless_continue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32fde0b5116b3a1115d11c49a9bf2af2ebdd5773/clippy_lints%2Fsrc%2Fneedless_continue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_continue.rs?ref=32fde0b5116b3a1115d11c49a9bf2af2ebdd5773", "patch": "@@ -424,7 +424,7 @@ fn erode_from_back(s: &str) -> String {\n }\n \n fn span_of_first_expr_in_block(block: &ast::Block) -> Option<Span> {\n-    block.stmts.iter().next().map(|stmt| stmt.span)\n+    block.stmts.get(0).map(|stmt| stmt.span)\n }\n \n #[cfg(test)]"}, {"sha": "79da1f3702e357c462392c1d14028d0dc5f0bbad", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/32fde0b5116b3a1115d11c49a9bf2af2ebdd5773/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32fde0b5116b3a1115d11c49a9bf2af2ebdd5773/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=32fde0b5116b3a1115d11c49a9bf2af2ebdd5773", "patch": "@@ -934,6 +934,13 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n         deprecation: None,\n         module: \"loops\",\n     },\n+    Lint {\n+        name: \"iter_next_slice\",\n+        group: \"style\",\n+        desc: \"using `.iter().next()` on a sliced array, which can be shortened to just `.get()`\",\n+        deprecation: None,\n+        module: \"methods\",\n+    },\n     Lint {\n         name: \"iter_nth\",\n         group: \"perf\","}, {"sha": "7f92d0dbdc973a50fd4964ed0312600e49c02619", "filename": "tests/ui/into_iter_on_ref.fixed", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32fde0b5116b3a1115d11c49a9bf2af2ebdd5773/tests%2Fui%2Finto_iter_on_ref.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/32fde0b5116b3a1115d11c49a9bf2af2ebdd5773/tests%2Fui%2Finto_iter_on_ref.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finto_iter_on_ref.fixed?ref=32fde0b5116b3a1115d11c49a9bf2af2ebdd5773", "patch": "@@ -40,4 +40,6 @@ fn main() {\n     let _ = (&HashSet::<i32>::new()).iter(); //~ WARN equivalent to .iter()\n     let _ = std::path::Path::new(\"12/34\").iter(); //~ WARN equivalent to .iter()\n     let _ = std::path::PathBuf::from(\"12/34\").iter(); //~ ERROR equivalent to .iter()\n+\n+    let _ = (&[1, 2, 3]).iter().next(); //~ WARN equivalent to .iter()\n }"}, {"sha": "416056d3fdb9cb3fd2bc5aec5234e9ea0d0630d1", "filename": "tests/ui/into_iter_on_ref.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32fde0b5116b3a1115d11c49a9bf2af2ebdd5773/tests%2Fui%2Finto_iter_on_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32fde0b5116b3a1115d11c49a9bf2af2ebdd5773/tests%2Fui%2Finto_iter_on_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finto_iter_on_ref.rs?ref=32fde0b5116b3a1115d11c49a9bf2af2ebdd5773", "patch": "@@ -40,4 +40,6 @@ fn main() {\n     let _ = (&HashSet::<i32>::new()).into_iter(); //~ WARN equivalent to .iter()\n     let _ = std::path::Path::new(\"12/34\").into_iter(); //~ WARN equivalent to .iter()\n     let _ = std::path::PathBuf::from(\"12/34\").into_iter(); //~ ERROR equivalent to .iter()\n+\n+    let _ = (&[1, 2, 3]).into_iter().next(); //~ WARN equivalent to .iter()\n }"}, {"sha": "1cd6400b0195baedc7a1e09d8849859d2361f1a1", "filename": "tests/ui/into_iter_on_ref.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/32fde0b5116b3a1115d11c49a9bf2af2ebdd5773/tests%2Fui%2Finto_iter_on_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32fde0b5116b3a1115d11c49a9bf2af2ebdd5773/tests%2Fui%2Finto_iter_on_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finto_iter_on_ref.stderr?ref=32fde0b5116b3a1115d11c49a9bf2af2ebdd5773", "patch": "@@ -156,5 +156,11 @@ error: this `.into_iter()` call is equivalent to `.iter()` and will not move the\n LL |     let _ = std::path::PathBuf::from(\"12/34\").into_iter(); //~ ERROR equivalent to .iter()\n    |                                               ^^^^^^^^^ help: call directly: `iter`\n \n-error: aborting due to 26 previous errors\n+error: this `.into_iter()` call is equivalent to `.iter()` and will not move the `array`\n+  --> $DIR/into_iter_on_ref.rs:44:26\n+   |\n+LL |     let _ = (&[1, 2, 3]).into_iter().next(); //~ WARN equivalent to .iter()\n+   |                          ^^^^^^^^^ help: call directly: `iter`\n+\n+error: aborting due to 27 previous errors\n "}, {"sha": "79c1db87ac3c43c4ac97ba7d85bbc53e7d3ce3de", "filename": "tests/ui/iter_next_slice.fixed", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/32fde0b5116b3a1115d11c49a9bf2af2ebdd5773/tests%2Fui%2Fiter_next_slice.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/32fde0b5116b3a1115d11c49a9bf2af2ebdd5773/tests%2Fui%2Fiter_next_slice.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_next_slice.fixed?ref=32fde0b5116b3a1115d11c49a9bf2af2ebdd5773", "patch": "@@ -0,0 +1,24 @@\n+// run-rustfix\n+#![warn(clippy::iter_next_slice)]\n+\n+fn main() {\n+    // test code goes here\n+    let s = [1, 2, 3];\n+    let v = vec![1, 2, 3];\n+\n+    s.get(0);\n+    // Should be replaced by s.get(0)\n+\n+    s.get(2);\n+    // Should be replaced by s.get(2)\n+\n+    v.get(5);\n+    // Should be replaced by v.get(5)\n+\n+    v.get(0);\n+    // Should be replaced by v.get(0)\n+\n+    let o = Some(5);\n+    o.iter().next();\n+    // Shouldn't be linted since this is not a Slice or an Array\n+}"}, {"sha": "ef9a55f3d997c1cb9916d8653786f3d7c609fcdd", "filename": "tests/ui/iter_next_slice.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/32fde0b5116b3a1115d11c49a9bf2af2ebdd5773/tests%2Fui%2Fiter_next_slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32fde0b5116b3a1115d11c49a9bf2af2ebdd5773/tests%2Fui%2Fiter_next_slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_next_slice.rs?ref=32fde0b5116b3a1115d11c49a9bf2af2ebdd5773", "patch": "@@ -0,0 +1,24 @@\n+// run-rustfix\n+#![warn(clippy::iter_next_slice)]\n+\n+fn main() {\n+    // test code goes here\n+    let s = [1, 2, 3];\n+    let v = vec![1, 2, 3];\n+\n+    s.iter().next();\n+    // Should be replaced by s.get(0)\n+\n+    s[2..].iter().next();\n+    // Should be replaced by s.get(2)\n+\n+    v[5..].iter().next();\n+    // Should be replaced by v.get(5)\n+\n+    v.iter().next();\n+    // Should be replaced by v.get(0)\n+\n+    let o = Some(5);\n+    o.iter().next();\n+    // Shouldn't be linted since this is not a Slice or an Array\n+}"}, {"sha": "bbf61df0cda68523debcdea9309072eeb61a73e6", "filename": "tests/ui/iter_next_slice.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/32fde0b5116b3a1115d11c49a9bf2af2ebdd5773/tests%2Fui%2Fiter_next_slice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32fde0b5116b3a1115d11c49a9bf2af2ebdd5773/tests%2Fui%2Fiter_next_slice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_next_slice.stderr?ref=32fde0b5116b3a1115d11c49a9bf2af2ebdd5773", "patch": "@@ -0,0 +1,28 @@\n+error: Using `.iter().next()` on an array\n+  --> $DIR/iter_next_slice.rs:9:5\n+   |\n+LL |     s.iter().next();\n+   |     ^^^^^^^^^^^^^^^ help: try calling: `s.get(0)`\n+   |\n+   = note: `-D clippy::iter-next-slice` implied by `-D warnings`\n+\n+error: Using `.iter().next()` on a Slice without end index.\n+  --> $DIR/iter_next_slice.rs:12:5\n+   |\n+LL |     s[2..].iter().next();\n+   |     ^^^^^^^^^^^^^^^^^^^^ help: try calling: `s.get(2)`\n+\n+error: Using `.iter().next()` on a Slice without end index.\n+  --> $DIR/iter_next_slice.rs:15:5\n+   |\n+LL |     v[5..].iter().next();\n+   |     ^^^^^^^^^^^^^^^^^^^^ help: try calling: `v.get(5)`\n+\n+error: Using `.iter().next()` on an array\n+  --> $DIR/iter_next_slice.rs:18:5\n+   |\n+LL |     v.iter().next();\n+   |     ^^^^^^^^^^^^^^^ help: try calling: `v.get(0)`\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "be37dc16b9a3effcc6aec5b4fd92f1de7a2412c5", "filename": "tests/ui/needless_collect.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32fde0b5116b3a1115d11c49a9bf2af2ebdd5773/tests%2Fui%2Fneedless_collect.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/32fde0b5116b3a1115d11c49a9bf2af2ebdd5773/tests%2Fui%2Fneedless_collect.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_collect.fixed?ref=32fde0b5116b3a1115d11c49a9bf2af2ebdd5773", "patch": "@@ -9,7 +9,7 @@ use std::collections::{BTreeSet, HashMap, HashSet};\n fn main() {\n     let sample = [1; 5];\n     let len = sample.iter().count();\n-    if sample.iter().next().is_none() {\n+    if sample.get(0).is_none() {\n         // Empty\n     }\n     sample.iter().cloned().any(|x| x == 1);"}, {"sha": "9113aad90dd7cc120e89748f5df590f74878f174", "filename": "tests/ui/needless_collect.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/32fde0b5116b3a1115d11c49a9bf2af2ebdd5773/tests%2Fui%2Fneedless_collect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32fde0b5116b3a1115d11c49a9bf2af2ebdd5773/tests%2Fui%2Fneedless_collect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_collect.stderr?ref=32fde0b5116b3a1115d11c49a9bf2af2ebdd5773", "patch": "@@ -1,28 +1,28 @@\n error: avoid using `collect()` when not needed\n-  --> $DIR/needless_collect.rs:11:28\n+  --> $DIR/needless_collect.rs:11:29\n    |\n LL |     let len = sample.iter().collect::<Vec<_>>().len();\n-   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `.count()`\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `count()`\n    |\n    = note: `-D clippy::needless-collect` implied by `-D warnings`\n \n error: avoid using `collect()` when not needed\n-  --> $DIR/needless_collect.rs:12:21\n+  --> $DIR/needless_collect.rs:12:15\n    |\n LL |     if sample.iter().collect::<Vec<_>>().is_empty() {\n-   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `.next().is_none()`\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `get(0).is_none()`\n \n error: avoid using `collect()` when not needed\n-  --> $DIR/needless_collect.rs:15:27\n+  --> $DIR/needless_collect.rs:15:28\n    |\n LL |     sample.iter().cloned().collect::<Vec<_>>().contains(&1);\n-   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `.any(|x| x == 1)`\n+   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `any(|x| x == 1)`\n \n error: avoid using `collect()` when not needed\n-  --> $DIR/needless_collect.rs:16:34\n+  --> $DIR/needless_collect.rs:16:35\n    |\n LL |     sample.iter().map(|x| (x, x)).collect::<HashMap<_, _>>().len();\n-   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `.count()`\n+   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `count()`\n \n error: aborting due to 4 previous errors\n "}]}