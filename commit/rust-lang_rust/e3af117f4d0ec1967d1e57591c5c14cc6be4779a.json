{"sha": "e3af117f4d0ec1967d1e57591c5c14cc6be4779a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzYWYxMTdmNGQwZWMxOTY3ZDFlNTc1OTFjNWMxNGNjNmJlNDc3OWE=", "commit": {"author": {"name": "Will Speak", "email": "lithiumflame@gmail.com", "date": "2015-10-10T18:00:20Z"}, "committer": {"name": "Will Speak", "email": "lithiumflame@gmail.com", "date": "2015-10-10T18:00:20Z"}, "message": "Update Libflate Formatting\n\nThis commit updates the libflate crate with the formatting output of\n`rustfmt`.", "tree": {"sha": "b0ac5d7d8ea97127f0ab2cad5f13e84eb4f2e2f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0ac5d7d8ea97127f0ab2cad5f13e84eb4f2e2f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3af117f4d0ec1967d1e57591c5c14cc6be4779a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3af117f4d0ec1967d1e57591c5c14cc6be4779a", "html_url": "https://github.com/rust-lang/rust/commit/e3af117f4d0ec1967d1e57591c5c14cc6be4779a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3af117f4d0ec1967d1e57591c5c14cc6be4779a/comments", "author": {"login": "iwillspeak", "id": 1004401, "node_id": "MDQ6VXNlcjEwMDQ0MDE=", "avatar_url": "https://avatars.githubusercontent.com/u/1004401?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iwillspeak", "html_url": "https://github.com/iwillspeak", "followers_url": "https://api.github.com/users/iwillspeak/followers", "following_url": "https://api.github.com/users/iwillspeak/following{/other_user}", "gists_url": "https://api.github.com/users/iwillspeak/gists{/gist_id}", "starred_url": "https://api.github.com/users/iwillspeak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iwillspeak/subscriptions", "organizations_url": "https://api.github.com/users/iwillspeak/orgs", "repos_url": "https://api.github.com/users/iwillspeak/repos", "events_url": "https://api.github.com/users/iwillspeak/events{/privacy}", "received_events_url": "https://api.github.com/users/iwillspeak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iwillspeak", "id": 1004401, "node_id": "MDQ6VXNlcjEwMDQ0MDE=", "avatar_url": "https://avatars.githubusercontent.com/u/1004401?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iwillspeak", "html_url": "https://github.com/iwillspeak", "followers_url": "https://api.github.com/users/iwillspeak/followers", "following_url": "https://api.github.com/users/iwillspeak/following{/other_user}", "gists_url": "https://api.github.com/users/iwillspeak/gists{/gist_id}", "starred_url": "https://api.github.com/users/iwillspeak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iwillspeak/subscriptions", "organizations_url": "https://api.github.com/users/iwillspeak/orgs", "repos_url": "https://api.github.com/users/iwillspeak/repos", "events_url": "https://api.github.com/users/iwillspeak/events{/privacy}", "received_events_url": "https://api.github.com/users/iwillspeak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a03e0ee657471cf85447f3266c0dedb78f39bea8", "url": "https://api.github.com/repos/rust-lang/rust/commits/a03e0ee657471cf85447f3266c0dedb78f39bea8", "html_url": "https://github.com/rust-lang/rust/commit/a03e0ee657471cf85447f3266c0dedb78f39bea8"}], "stats": {"total": 21, "additions": 12, "deletions": 9}, "files": [{"sha": "521dddae78ff964dceeeb41524e865d784426b30", "filename": "src/libflate/lib.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e3af117f4d0ec1967d1e57591c5c14cc6be4779a/src%2Flibflate%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3af117f4d0ec1967d1e57591c5c14cc6be4779a/src%2Flibflate%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibflate%2Flib.rs?ref=e3af117f4d0ec1967d1e57591c5c14cc6be4779a", "patch": "@@ -30,7 +30,9 @@\n #![feature(unique)]\n #![cfg_attr(test, feature(rustc_private, rand, vec_push_all))]\n \n-#[cfg(test)] #[macro_use] extern crate log;\n+#[cfg(test)]\n+#[macro_use]\n+extern crate log;\n \n extern crate libc;\n \n@@ -47,9 +49,7 @@ pub struct Error {\n \n impl Error {\n     fn new() -> Error {\n-        Error {\n-            _unused: (),\n-        }\n+        Error { _unused: () }\n     }\n }\n \n@@ -73,7 +73,9 @@ impl Deref for Bytes {\n \n impl Drop for Bytes {\n     fn drop(&mut self) {\n-        unsafe { libc::free(*self.ptr as *mut _); }\n+        unsafe {\n+            libc::free(*self.ptr as *mut _);\n+        }\n     }\n }\n \n@@ -123,7 +125,7 @@ pub fn deflate_bytes_zlib(bytes: &[u8]) -> Bytes {\n     deflate_bytes_internal(bytes, LZ_NORM | TDEFL_WRITE_ZLIB_HEADER)\n }\n \n-fn inflate_bytes_internal(bytes: &[u8], flags: c_int) -> Result<Bytes,Error> {\n+fn inflate_bytes_internal(bytes: &[u8], flags: c_int) -> Result<Bytes, Error> {\n     unsafe {\n         let mut outsz: size_t = 0;\n         let res = tinfl_decompress_mem_to_heap(bytes.as_ptr() as *const _,\n@@ -142,12 +144,12 @@ fn inflate_bytes_internal(bytes: &[u8], flags: c_int) -> Result<Bytes,Error> {\n }\n \n /// Decompress a buffer, without parsing any sort of header on the input.\n-pub fn inflate_bytes(bytes: &[u8]) -> Result<Bytes,Error> {\n+pub fn inflate_bytes(bytes: &[u8]) -> Result<Bytes, Error> {\n     inflate_bytes_internal(bytes, 0)\n }\n \n /// Decompress a buffer that starts with a zlib header.\n-pub fn inflate_bytes_zlib(bytes: &[u8]) -> Result<Bytes,Error> {\n+pub fn inflate_bytes_zlib(bytes: &[u8]) -> Result<Bytes, Error> {\n     inflate_bytes_internal(bytes, TINFL_FLAG_PARSE_ZLIB_HEADER)\n }\n \n@@ -176,7 +178,8 @@ mod tests {\n             let cmp = deflate_bytes(&input);\n             let out = inflate_bytes(&cmp).unwrap();\n             debug!(\"{} bytes deflated to {} ({:.1}% size)\",\n-                   input.len(), cmp.len(),\n+                   input.len(),\n+                   cmp.len(),\n                    100.0 * ((cmp.len() as f64) / (input.len() as f64)));\n             assert_eq!(&*input, &*out);\n         }"}]}