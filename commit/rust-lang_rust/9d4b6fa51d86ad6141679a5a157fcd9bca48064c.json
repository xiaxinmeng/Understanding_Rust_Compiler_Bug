{"sha": "9d4b6fa51d86ad6141679a5a157fcd9bca48064c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkNGI2ZmE1MWQ4NmFkNjE0MTY3OWE1YTE1N2ZjZDliY2E0ODA2NGM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-11-16T16:25:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-11-16T16:25:38Z"}, "message": "Auto merge of #37545 - alexcrichton:crt-static, r=brson\n\nrustc: Implement #[link(cfg(..))] and crt-static\n\nThis commit is an implementation of [RFC 1721] which adds a new target feature\nto the compiler, `crt-static`, which can be used to select how the C runtime for\na target is linked. Most targets dynamically linke the C runtime by default with\nthe notable exception of some of the musl targets.\n\n[RFC 1721]: https://github.com/rust-lang/rfcs/blob/master/text/1721-crt-static.md\n\nThis commit first adds the new target-feature, `crt-static`. If enabled, then\nthe `cfg(target_feature = \"crt-static\")` will be available. Targets like musl\nwill have this enabled by default. This feature can be controlled through the\nstandard target-feature interface, `-C target-feature=+crt-static` or\n`-C target-feature=-crt-static`.\n\nNext this adds an gated and unstable `#[link(cfg(..))]` feature to enable the\n`crt-static` semantics we want with libc. The exact behavior of this attribute\nis a little squishy, but it's intended to be a forever-unstable\nimplementation detail of the liblibc crate.\n\nSpecifically the `#[link(cfg(..))]` annotation means that the `#[link]`\ndirective is only active in a compilation unit if that `cfg` value is satisfied.\nFor example when compiling an rlib, these directives are just encoded and\nignored for dylibs, and all staticlibs are continued to be put into the rlib as\nusual. When placing that rlib into a staticlib, executable, or dylib, however,\nthe `cfg` is evaluated *as if it were defined in the final artifact* and the\nlibrary is decided to be linked or not.\n\nEssentially, what'll happen is:\n\n* On MSVC with `-C target-feature=-crt-static`, the `msvcrt.lib` library will be\n  linked to.\n* On MSVC with `-C target-feature=+crt-static`, the `libcmt.lib` library will be\n  linked to.\n* On musl with `-C target-feature=-crt-static`, the object files in liblibc.rlib\n  are removed and `-lc` is passed instead.\n* On musl with `-C target-feature=+crt-static`, the object files in liblibc.rlib\n  are used and `-lc` is not passed.\n\nThis commit does **not** include an update to the liblibc module to implement\nthese changes. I plan to do that just after the 1.14.0 beta release is cut to\nensure we get ample time to test this feature.\n\ncc #37406", "tree": {"sha": "c9992d88dde5ab298f8fa80864095cd0fc43f510", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c9992d88dde5ab298f8fa80864095cd0fc43f510"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d4b6fa51d86ad6141679a5a157fcd9bca48064c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d4b6fa51d86ad6141679a5a157fcd9bca48064c", "html_url": "https://github.com/rust-lang/rust/commit/9d4b6fa51d86ad6141679a5a157fcd9bca48064c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d4b6fa51d86ad6141679a5a157fcd9bca48064c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "478c0d161498c9bd0ee89a7b205e7b2f2437f151", "url": "https://api.github.com/repos/rust-lang/rust/commits/478c0d161498c9bd0ee89a7b205e7b2f2437f151", "html_url": "https://github.com/rust-lang/rust/commit/478c0d161498c9bd0ee89a7b205e7b2f2437f151"}, {"sha": "06242ff15d2b510689a99c33aa2495da11a75fad", "url": "https://api.github.com/repos/rust-lang/rust/commits/06242ff15d2b510689a99c33aa2495da11a75fad", "html_url": "https://github.com/rust-lang/rust/commit/06242ff15d2b510689a99c33aa2495da11a75fad"}], "stats": {"total": 639, "additions": 547, "deletions": 92}, "files": [{"sha": "6e8c1b490ccbe5e84d248bab883515bc85394b5f", "filename": "src/liblibc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc?ref=9d4b6fa51d86ad6141679a5a157fcd9bca48064c", "patch": "@@ -1 +1 @@\n-Subproject commit 7d9b71f0971f8fa196d864d7071f216a59036d6e\n+Subproject commit 6e8c1b490ccbe5e84d248bab883515bc85394b5f"}, {"sha": "f61978271e7f6c34e1bb095e9e8dca16c0c23ffb", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9d4b6fa51d86ad6141679a5a157fcd9bca48064c/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d4b6fa51d86ad6141679a5a157fcd9bca48064c/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=9d4b6fa51d86ad6141679a5a157fcd9bca48064c", "patch": "@@ -89,6 +89,13 @@ pub enum NativeLibraryKind {\n     NativeUnknown,   // default way to specify a dynamic library\n }\n \n+#[derive(Clone, Hash, RustcEncodable, RustcDecodable)]\n+pub struct NativeLibrary {\n+    pub kind: NativeLibraryKind,\n+    pub name: String,\n+    pub cfg: Option<P<ast::MetaItem>>,\n+}\n+\n /// The data we save and restore about an inlined item or method.  This is not\n /// part of the AST that we parse from a file, but it becomes part of the tree\n /// that we trans.\n@@ -204,7 +211,7 @@ pub trait CrateStore<'tcx> {\n     fn crate_hash(&self, cnum: CrateNum) -> Svh;\n     fn crate_disambiguator(&self, cnum: CrateNum) -> InternedString;\n     fn plugin_registrar_fn(&self, cnum: CrateNum) -> Option<DefId>;\n-    fn native_libraries(&self, cnum: CrateNum) -> Vec<(NativeLibraryKind, String)>;\n+    fn native_libraries(&self, cnum: CrateNum) -> Vec<NativeLibrary>;\n     fn reachable_ids(&self, cnum: CrateNum) -> Vec<DefId>;\n     fn is_no_builtins(&self, cnum: CrateNum) -> bool;\n \n@@ -231,7 +238,7 @@ pub trait CrateStore<'tcx> {\n     // This is basically a 1-based range of ints, which is a little\n     // silly - I may fix that.\n     fn crates(&self) -> Vec<CrateNum>;\n-    fn used_libraries(&self) -> Vec<(String, NativeLibraryKind)>;\n+    fn used_libraries(&self) -> Vec<NativeLibrary>;\n     fn used_link_args(&self) -> Vec<String>;\n \n     // utility functions\n@@ -377,7 +384,7 @@ impl<'tcx> CrateStore<'tcx> for DummyCrateStore {\n                            -> InternedString { bug!(\"crate_disambiguator\") }\n     fn plugin_registrar_fn(&self, cnum: CrateNum) -> Option<DefId>\n         { bug!(\"plugin_registrar_fn\") }\n-    fn native_libraries(&self, cnum: CrateNum) -> Vec<(NativeLibraryKind, String)>\n+    fn native_libraries(&self, cnum: CrateNum) -> Vec<NativeLibrary>\n         { bug!(\"native_libraries\") }\n     fn reachable_ids(&self, cnum: CrateNum) -> Vec<DefId> { bug!(\"reachable_ids\") }\n     fn is_no_builtins(&self, cnum: CrateNum) -> bool { bug!(\"is_no_builtins\") }\n@@ -412,7 +419,9 @@ impl<'tcx> CrateStore<'tcx> for DummyCrateStore {\n     // This is basically a 1-based range of ints, which is a little\n     // silly - I may fix that.\n     fn crates(&self) -> Vec<CrateNum> { vec![] }\n-    fn used_libraries(&self) -> Vec<(String, NativeLibraryKind)> { vec![] }\n+    fn used_libraries(&self) -> Vec<NativeLibrary> {\n+        vec![]\n+    }\n     fn used_link_args(&self) -> Vec<String> { vec![] }\n \n     // utility functions"}, {"sha": "18cca425a32c8c43452f34f304d3c8cc5cf4bbf3", "filename": "src/librustc_back/target/linux_musl_base.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d4b6fa51d86ad6141679a5a157fcd9bca48064c/src%2Flibrustc_back%2Ftarget%2Flinux_musl_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d4b6fa51d86ad6141679a5a157fcd9bca48064c/src%2Flibrustc_back%2Ftarget%2Flinux_musl_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Flinux_musl_base.rs?ref=9d4b6fa51d86ad6141679a5a157fcd9bca48064c", "patch": "@@ -16,7 +16,6 @@ pub fn opts() -> TargetOptions {\n     // Make sure that the linker/gcc really don't pull in anything, including\n     // default objects, libs, etc.\n     base.pre_link_args.push(\"-nostdlib\".to_string());\n-    base.pre_link_args.push(\"-static\".to_string());\n \n     // At least when this was tested, the linker would not add the\n     // `GNU_EH_FRAME` program header to executables generated, which is required\n@@ -67,5 +66,8 @@ pub fn opts() -> TargetOptions {\n     base.has_rpath = false;\n     base.position_independent_executables = false;\n \n+    // These targets statically link libc by default\n+    base.crt_static_default = true;\n+\n     base\n }"}, {"sha": "f195ccb3f42928f91473db3ae4131c219a105953", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9d4b6fa51d86ad6141679a5a157fcd9bca48064c/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d4b6fa51d86ad6141679a5a157fcd9bca48064c/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=9d4b6fa51d86ad6141679a5a157fcd9bca48064c", "patch": "@@ -373,6 +373,9 @@ pub struct TargetOptions {\n     /// A blacklist of ABIs unsupported by the current target. Note that generic\n     /// ABIs are considered to be supported on all platforms and cannot be blacklisted.\n     pub abi_blacklist: Vec<Abi>,\n+\n+    /// Whether or not the CRT is statically linked by default.\n+    pub crt_static_default: bool,\n }\n \n impl Default for TargetOptions {\n@@ -425,6 +428,7 @@ impl Default for TargetOptions {\n             max_atomic_width: None,\n             panic_strategy: PanicStrategy::Unwind,\n             abi_blacklist: vec![],\n+            crt_static_default: false,\n         }\n     }\n }\n@@ -585,6 +589,7 @@ impl Target {\n         key!(no_integrated_as, bool);\n         key!(max_atomic_width, Option<u64>);\n         try!(key!(panic_strategy, PanicStrategy));\n+        key!(crt_static_default, bool);\n \n         if let Some(array) = obj.find(\"abi-blacklist\").and_then(Json::as_array) {\n             for name in array.iter().filter_map(|abi| abi.as_string()) {\n@@ -745,6 +750,7 @@ impl ToJson for Target {\n         target_option_val!(no_integrated_as);\n         target_option_val!(max_atomic_width);\n         target_option_val!(panic_strategy);\n+        target_option_val!(crt_static_default);\n \n         if default.abi_blacklist != self.options.abi_blacklist {\n             d.insert(\"abi-blacklist\".to_string(), self.options.abi_blacklist.iter()"}, {"sha": "57a9edc5c586b532081f0eba7c3c34c9d8224982", "filename": "src/librustc_driver/target_features.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/9d4b6fa51d86ad6141679a5a157fcd9bca48064c/src%2Flibrustc_driver%2Ftarget_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d4b6fa51d86ad6141679a5a157fcd9bca48064c/src%2Flibrustc_driver%2Ftarget_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftarget_features.rs?ref=9d4b6fa51d86ad6141679a5a157fcd9bca48064c", "patch": "@@ -12,6 +12,7 @@ use syntax::{ast, attr};\n use llvm::LLVMRustHasFeature;\n use rustc::session::Session;\n use rustc_trans::back::write::create_target_machine;\n+use syntax::feature_gate::UnstableFeatures;\n use syntax::parse::token::InternedString;\n use syntax::parse::token::intern_and_get_ident as intern;\n use libc::c_char;\n@@ -47,4 +48,32 @@ pub fn add_configuration(cfg: &mut ast::CrateConfig, sess: &Session) {\n             cfg.push(attr::mk_name_value_item_str(tf.clone(), intern(&feat[..feat.len() - 1])))\n         }\n     }\n+\n+    let requested_features = sess.opts.cg.target_feature.split(',');\n+    let unstable_options = sess.opts.debugging_opts.unstable_options;\n+    let is_nightly = UnstableFeatures::from_environment().is_nightly_build();\n+    let found_negative = requested_features.clone().any(|r| r == \"-crt-static\");\n+    let found_positive = requested_features.clone().any(|r| r == \"+crt-static\");\n+\n+    // If the target we're compiling for requests a static crt by default,\n+    // then see if the `-crt-static` feature was passed to disable that.\n+    // Otherwise if we don't have a static crt by default then see if the\n+    // `+crt-static` feature was passed.\n+    let crt_static = if sess.target.target.options.crt_static_default {\n+        !found_negative\n+    } else {\n+        found_positive\n+    };\n+\n+    // If we switched from the default then that's only allowed on nightly, so\n+    // gate that here.\n+    if (found_positive || found_negative) && (!is_nightly || !unstable_options) {\n+        sess.fatal(\"specifying the `crt-static` target feature is only allowed \\\n+                    on the nightly channel with `-Z unstable-options` passed \\\n+                    as well\");\n+    }\n+\n+    if crt_static {\n+        cfg.push(attr::mk_name_value_item_str(tf.clone(), intern(\"crt-static\")));\n+    }\n }"}, {"sha": "4298bb47fea624d3d2683d7d6c2633207311c35a", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 35, "deletions": 14, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/9d4b6fa51d86ad6141679a5a157fcd9bca48064c/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d4b6fa51d86ad6141679a5a157fcd9bca48064c/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=9d4b6fa51d86ad6141679a5a157fcd9bca48064c", "patch": "@@ -23,6 +23,7 @@ use rustc::session::search_paths::PathKind;\n use rustc::middle;\n use rustc::middle::cstore::{CrateStore, validate_crate_name, ExternCrate};\n use rustc::util::nodemap::{FxHashMap, FxHashSet};\n+use rustc::middle::cstore::NativeLibrary;\n use rustc::hir::map::Definitions;\n \n use std::cell::{RefCell, Cell};\n@@ -35,6 +36,7 @@ use syntax::ast;\n use syntax::abi::Abi;\n use syntax::attr;\n use syntax::ext::base::SyntaxExtension;\n+use syntax::feature_gate::{self, GateIssue};\n use syntax::parse::token::{InternedString, intern};\n use syntax_pos::{Span, DUMMY_SP};\n use log;\n@@ -77,9 +79,8 @@ struct ExternCrateInfo {\n fn register_native_lib(sess: &Session,\n                        cstore: &CStore,\n                        span: Option<Span>,\n-                       name: String,\n-                       kind: cstore::NativeLibraryKind) {\n-    if name.is_empty() {\n+                       lib: NativeLibrary) {\n+    if lib.name.is_empty() {\n         match span {\n             Some(span) => {\n                 struct_span_err!(sess, span, E0454,\n@@ -94,17 +95,21 @@ fn register_native_lib(sess: &Session,\n         return\n     }\n     let is_osx = sess.target.target.options.is_like_osx;\n-    if kind == cstore::NativeFramework && !is_osx {\n+    if lib.kind == cstore::NativeFramework && !is_osx {\n         let msg = \"native frameworks are only available on OSX targets\";\n         match span {\n-            Some(span) => {\n-                span_err!(sess, span, E0455,\n-                          \"{}\", msg)\n-            }\n+            Some(span) => span_err!(sess, span, E0455, \"{}\", msg),\n             None => sess.err(msg),\n         }\n     }\n-    cstore.add_used_library(name, kind);\n+    if lib.cfg.is_some() && !sess.features.borrow().link_cfg {\n+        feature_gate::emit_feature_err(&sess.parse_sess,\n+                                       \"link_cfg\",\n+                                       span.unwrap(),\n+                                       GateIssue::Language,\n+                                       \"is feature gated\");\n+    }\n+    cstore.add_used_library(lib);\n }\n \n // Extra info about a crate loaded for plugins or exported macros.\n@@ -635,9 +640,9 @@ impl<'a> CrateLoader<'a> {\n \n     fn register_statically_included_foreign_items(&mut self) {\n         let libs = self.cstore.get_used_libraries();\n-        for (lib, list) in self.foreign_item_map.iter() {\n-            let is_static = libs.borrow().iter().any(|&(ref name, kind)| {\n-                lib == name && kind == cstore::NativeStatic\n+        for (foreign_lib, list) in self.foreign_item_map.iter() {\n+            let is_static = libs.borrow().iter().any(|lib| {\n+                *foreign_lib == lib.name && lib.kind == cstore::NativeStatic\n             });\n             if is_static {\n                 for id in list {\n@@ -898,7 +903,18 @@ impl<'a> CrateLoader<'a> {\n                     InternedString::new(\"foo\")\n                 }\n             };\n-            register_native_lib(self.sess, self.cstore, Some(m.span), n.to_string(), kind);\n+            let cfg = items.iter().find(|k| {\n+                k.check_name(\"cfg\")\n+            }).and_then(|a| a.meta_item_list());\n+            let cfg = cfg.map(|list| {\n+                list[0].meta_item().unwrap().clone()\n+            });\n+            let lib = NativeLibrary {\n+                name: n.to_string(),\n+                kind: kind,\n+                cfg: cfg,\n+            };\n+            register_native_lib(self.sess, self.cstore, Some(m.span), lib);\n         }\n \n         // Finally, process the #[linked_from = \"...\"] attribute\n@@ -924,7 +940,12 @@ impl<'a> middle::cstore::CrateLoader for CrateLoader<'a> {\n         }\n \n         for &(ref name, kind) in &self.sess.opts.libs {\n-            register_native_lib(self.sess, self.cstore, None, name.clone(), kind);\n+            let lib = NativeLibrary {\n+                name: name.clone(),\n+                kind: kind,\n+                cfg: None,\n+            };\n+            register_native_lib(self.sess, self.cstore, None, lib);\n         }\n         self.register_statically_included_foreign_items();\n     }"}, {"sha": "37853b7473a6500d05e3e42b7f346fdf5b574d33", "filename": "src/librustc_metadata/cstore.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9d4b6fa51d86ad6141679a5a157fcd9bca48064c/src%2Flibrustc_metadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d4b6fa51d86ad6141679a5a157fcd9bca48064c/src%2Flibrustc_metadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore.rs?ref=9d4b6fa51d86ad6141679a5a157fcd9bca48064c", "patch": "@@ -31,7 +31,7 @@ use syntax::{ast, attr};\n use syntax::ext::base::SyntaxExtension;\n use syntax_pos;\n \n-pub use rustc::middle::cstore::{NativeLibraryKind, LinkagePreference};\n+pub use rustc::middle::cstore::{NativeLibrary, LinkagePreference};\n pub use rustc::middle::cstore::{NativeStatic, NativeFramework, NativeUnknown};\n pub use rustc::middle::cstore::{CrateSource, LinkMeta};\n \n@@ -97,7 +97,7 @@ pub struct CStore {\n     metas: RefCell<FxHashMap<CrateNum, Rc<CrateMetadata>>>,\n     /// Map from NodeId's of local extern crate statements to crate numbers\n     extern_mod_crate_map: RefCell<NodeMap<CrateNum>>,\n-    used_libraries: RefCell<Vec<(String, NativeLibraryKind)>>,\n+    used_libraries: RefCell<Vec<NativeLibrary>>,\n     used_link_args: RefCell<Vec<String>>,\n     statically_included_foreign_items: RefCell<NodeSet>,\n     pub inlined_item_cache: RefCell<DefIdMap<Option<CachedInlinedItem>>>,\n@@ -212,12 +212,12 @@ impl CStore {\n         libs\n     }\n \n-    pub fn add_used_library(&self, lib: String, kind: NativeLibraryKind) {\n-        assert!(!lib.is_empty());\n-        self.used_libraries.borrow_mut().push((lib, kind));\n+    pub fn add_used_library(&self, lib: NativeLibrary) {\n+        assert!(!lib.name.is_empty());\n+        self.used_libraries.borrow_mut().push(lib);\n     }\n \n-    pub fn get_used_libraries<'a>(&'a self) -> &'a RefCell<Vec<(String, NativeLibraryKind)>> {\n+    pub fn get_used_libraries(&self) -> &RefCell<Vec<NativeLibrary>> {\n         &self.used_libraries\n     }\n "}, {"sha": "5419f9955e44ee6bade807b0416206f532890c2f", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9d4b6fa51d86ad6141679a5a157fcd9bca48064c/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d4b6fa51d86ad6141679a5a157fcd9bca48064c/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=9d4b6fa51d86ad6141679a5a157fcd9bca48064c", "patch": "@@ -14,7 +14,7 @@ use locator;\n use schema;\n \n use rustc::middle::cstore::{InlinedItem, CrateStore, CrateSource, DepKind, ExternCrate};\n-use rustc::middle::cstore::{NativeLibraryKind, LinkMeta, LinkagePreference, LoadedMacro};\n+use rustc::middle::cstore::{NativeLibrary, LinkMeta, LinkagePreference, LoadedMacro};\n use rustc::hir::def::{self, Def};\n use rustc::middle::lang_items;\n use rustc::session::Session;\n@@ -295,7 +295,7 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n         })\n     }\n \n-    fn native_libraries(&self, cnum: CrateNum) -> Vec<(NativeLibraryKind, String)>\n+    fn native_libraries(&self, cnum: CrateNum) -> Vec<NativeLibrary>\n     {\n         self.get_crate_data(cnum).get_native_libraries()\n     }\n@@ -524,7 +524,7 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n         result\n     }\n \n-    fn used_libraries(&self) -> Vec<(String, NativeLibraryKind)>\n+    fn used_libraries(&self) -> Vec<NativeLibrary>\n     {\n         self.get_used_libraries().borrow().clone()\n     }"}, {"sha": "6ffe53345332f0c6cab23aaf9baa02a042cd51f2", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d4b6fa51d86ad6141679a5a157fcd9bca48064c/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d4b6fa51d86ad6141679a5a157fcd9bca48064c/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=9d4b6fa51d86ad6141679a5a157fcd9bca48064c", "patch": "@@ -11,7 +11,7 @@\n // Decoding metadata from a single crate's metadata\n \n use astencode::decode_inlined_item;\n-use cstore::{self, CrateMetadata, MetadataBlob, NativeLibraryKind};\n+use cstore::{self, CrateMetadata, MetadataBlob, NativeLibrary};\n use index::Index;\n use schema::*;\n \n@@ -980,7 +980,7 @@ impl<'a, 'tcx> CrateMetadata {\n     }\n \n \n-    pub fn get_native_libraries(&self) -> Vec<(NativeLibraryKind, String)> {\n+    pub fn get_native_libraries(&self) -> Vec<NativeLibrary> {\n         self.root.native_libraries.decode(self).collect()\n     }\n "}, {"sha": "823c50e1e5fd67cfd06ad3c3ccbfc8c3808b0474", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9d4b6fa51d86ad6141679a5a157fcd9bca48064c/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d4b6fa51d86ad6141679a5a157fcd9bca48064c/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=9d4b6fa51d86ad6141679a5a157fcd9bca48064c", "patch": "@@ -13,7 +13,7 @@ use index::Index;\n use schema::*;\n \n use rustc::middle::cstore::{InlinedItemRef, LinkMeta};\n-use rustc::middle::cstore::{LinkagePreference, NativeLibraryKind};\n+use rustc::middle::cstore::{LinkagePreference, NativeLibrary};\n use rustc::hir::def;\n use rustc::hir::def_id::{CrateNum, CRATE_DEF_INDEX, DefIndex, DefId};\n use rustc::middle::dependency_format::Linkage;\n@@ -1134,14 +1134,9 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n          self.lazy_seq_ref(&tcx.lang_items.missing))\n     }\n \n-    fn encode_native_libraries(&mut self) -> LazySeq<(NativeLibraryKind, String)> {\n+    fn encode_native_libraries(&mut self) -> LazySeq<NativeLibrary> {\n         let used_libraries = self.tcx.sess.cstore.used_libraries();\n-        self.lazy_seq(used_libraries.into_iter().filter_map(|(lib, kind)| {\n-            match kind {\n-                cstore::NativeStatic => None, // these libraries are not propagated\n-                cstore::NativeFramework | cstore::NativeUnknown => Some((kind, lib)),\n-            }\n-        }))\n+        self.lazy_seq(used_libraries)\n     }\n \n     fn encode_codemap(&mut self) -> LazySeq<syntax_pos::FileMap> {"}, {"sha": "5292a4a7c3768dcfaff00d4422e6ff48a168a4f5", "filename": "src/librustc_metadata/schema.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d4b6fa51d86ad6141679a5a157fcd9bca48064c/src%2Flibrustc_metadata%2Fschema.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d4b6fa51d86ad6141679a5a157fcd9bca48064c/src%2Flibrustc_metadata%2Fschema.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fschema.rs?ref=9d4b6fa51d86ad6141679a5a157fcd9bca48064c", "patch": "@@ -14,7 +14,7 @@ use index;\n use rustc::hir;\n use rustc::hir::def::{self, CtorKind};\n use rustc::hir::def_id::{DefIndex, DefId};\n-use rustc::middle::cstore::{DepKind, LinkagePreference, NativeLibraryKind};\n+use rustc::middle::cstore::{DepKind, LinkagePreference, NativeLibrary};\n use rustc::middle::lang_items;\n use rustc::mir;\n use rustc::ty::{self, Ty};\n@@ -175,7 +175,7 @@ pub struct CrateRoot {\n     pub dylib_dependency_formats: LazySeq<Option<LinkagePreference>>,\n     pub lang_items: LazySeq<(DefIndex, usize)>,\n     pub lang_items_missing: LazySeq<lang_items::LangItem>,\n-    pub native_libraries: LazySeq<(NativeLibraryKind, String)>,\n+    pub native_libraries: LazySeq<NativeLibrary>,\n     pub codemap: LazySeq<syntax_pos::FileMap>,\n     pub impls: LazySeq<TraitImpls>,\n     pub reachable_ids: LazySeq<DefIndex>,"}, {"sha": "df8dd7750ae0ca69a7bffb994c91be56acf36097", "filename": "src/librustc_trans/back/archive.rs", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/9d4b6fa51d86ad6141679a5a157fcd9bca48064c/src%2Flibrustc_trans%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d4b6fa51d86ad6141679a5a157fcd9bca48064c/src%2Flibrustc_trans%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Farchive.rs?ref=9d4b6fa51d86ad6141679a5a157fcd9bca48064c", "patch": "@@ -145,8 +145,11 @@ impl<'a> ArchiveBuilder<'a> {\n     ///\n     /// This ignores adding the bytecode from the rlib, and if LTO is enabled\n     /// then the object file also isn't added.\n-    pub fn add_rlib(&mut self, rlib: &Path, name: &str, lto: bool)\n-                    -> io::Result<()> {\n+    pub fn add_rlib(&mut self,\n+                    rlib: &Path,\n+                    name: &str,\n+                    lto: bool,\n+                    skip_objects: bool) -> io::Result<()> {\n         // Ignoring obj file starting with the crate name\n         // as simple comparison is not enough - there\n         // might be also an extra name suffix\n@@ -159,9 +162,23 @@ impl<'a> ArchiveBuilder<'a> {\n             self.config.sess.cstore.metadata_filename().to_owned();\n \n         self.add_archive(rlib, move |fname: &str| {\n-            let skip_obj = lto && fname.starts_with(&obj_start)\n-                && fname.ends_with(\".o\");\n-            skip_obj || fname.ends_with(bc_ext) || fname == metadata_filename\n+            if fname.ends_with(bc_ext) || fname == metadata_filename {\n+                return true\n+            }\n+\n+            // Don't include Rust objects if LTO is enabled\n+            if lto && fname.starts_with(&obj_start) && fname.ends_with(\".o\") {\n+                return true\n+            }\n+\n+            // Otherwise if this is *not* a rust object and we're skipping\n+            // objects then skip this file\n+            if skip_objects && (!fname.starts_with(&obj_start) || !fname.ends_with(\".o\")) {\n+                return true\n+            }\n+\n+            // ok, don't skip this\n+            return false\n         })\n     }\n "}, {"sha": "95d63311ee6e47aade6099c70b2d95d1e96adce0", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 109, "deletions": 45, "changes": 154, "blob_url": "https://github.com/rust-lang/rust/blob/9d4b6fa51d86ad6141679a5a157fcd9bca48064c/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d4b6fa51d86ad6141679a5a157fcd9bca48064c/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=9d4b6fa51d86ad6141679a5a157fcd9bca48064c", "patch": "@@ -19,7 +19,7 @@ use session::config::{OutputFilenames, Input, OutputType};\n use session::filesearch;\n use session::search_paths::PathKind;\n use session::Session;\n-use middle::cstore::{self, LinkMeta};\n+use middle::cstore::{self, LinkMeta, NativeLibrary};\n use middle::cstore::{LinkagePreference, NativeLibraryKind};\n use middle::dependency_format::Linkage;\n use CrateTranslation;\n@@ -43,6 +43,7 @@ use std::process::Command;\n use std::str;\n use flate;\n use syntax::ast;\n+use syntax::attr;\n use syntax_pos::Span;\n \n // RLIB LLVM-BYTECODE OBJECT LAYOUT\n@@ -406,12 +407,29 @@ fn link_rlib<'a>(sess: &'a Session,\n         ab.add_file(obj);\n     }\n \n-    for (l, kind) in sess.cstore.used_libraries() {\n-        match kind {\n-            NativeLibraryKind::NativeStatic => ab.add_native_library(&l),\n+    // Note that in this loop we are ignoring the value of `lib.cfg`. That is,\n+    // we may not be configured to actually include a static library if we're\n+    // adding it here. That's because later when we consume this rlib we'll\n+    // decide whether we actually needed the static library or not.\n+    //\n+    // To do this \"correctly\" we'd need to keep track of which libraries added\n+    // which object files to the archive. We don't do that here, however. The\n+    // #[link(cfg(..))] feature is unstable, though, and only intended to get\n+    // liblibc working. In that sense the check below just indicates that if\n+    // there are any libraries we want to omit object files for at link time we\n+    // just exclude all custom object files.\n+    //\n+    // Eventually if we want to stabilize or flesh out the #[link(cfg(..))]\n+    // feature then we'll need to figure out how to record what objects were\n+    // loaded from the libraries found here and then encode that into the\n+    // metadata of the rlib we're generating somehow.\n+    for lib in sess.cstore.used_libraries() {\n+        match lib.kind {\n+            NativeLibraryKind::NativeStatic => {}\n             NativeLibraryKind::NativeFramework |\n-            NativeLibraryKind::NativeUnknown => {}\n+            NativeLibraryKind::NativeUnknown => continue,\n         }\n+        ab.add_native_library(&lib.name);\n     }\n \n     // After adding all files to the archive, we need to update the\n@@ -578,10 +596,28 @@ fn link_staticlib(sess: &Session, objects: &[PathBuf], out_filename: &Path,\n \n     each_linked_rlib(sess, &mut |cnum, path| {\n         let name = sess.cstore.crate_name(cnum);\n-        ab.add_rlib(path, &name, sess.lto()).unwrap();\n-\n         let native_libs = sess.cstore.native_libraries(cnum);\n-        all_native_libs.extend(native_libs);\n+\n+        // Here when we include the rlib into our staticlib we need to make a\n+        // decision whether to include the extra object files along the way.\n+        // These extra object files come from statically included native\n+        // libraries, but they may be cfg'd away with #[link(cfg(..))].\n+        //\n+        // This unstable feature, though, only needs liblibc to work. The only\n+        // use case there is where musl is statically included in liblibc.rlib,\n+        // so if we don't want the included version we just need to skip it. As\n+        // a result the logic here is that if *any* linked library is cfg'd away\n+        // we just skip all object files.\n+        //\n+        // Clearly this is not sufficient for a general purpose feature, and\n+        // we'd want to read from the library's metadata to determine which\n+        // object files come from where and selectively skip them.\n+        let skip_object_files = native_libs.iter().any(|lib| {\n+            lib.kind == NativeLibraryKind::NativeStatic && !relevant_lib(sess, lib)\n+        });\n+        ab.add_rlib(path, &name, sess.lto(), skip_object_files).unwrap();\n+\n+        all_native_libs.extend(sess.cstore.native_libraries(cnum));\n     });\n \n     ab.update_symbols();\n@@ -594,13 +630,14 @@ fn link_staticlib(sess: &Session, objects: &[PathBuf], out_filename: &Path,\n                                  platforms, and so may need to be preserved\");\n     }\n \n-    for &(kind, ref lib) in &all_native_libs {\n-        let name = match kind {\n-            NativeLibraryKind::NativeStatic => \"static library\",\n+    for lib in all_native_libs.iter().filter(|l| relevant_lib(sess, l)) {\n+        let name = match lib.kind {\n             NativeLibraryKind::NativeUnknown => \"library\",\n             NativeLibraryKind::NativeFramework => \"framework\",\n+            // These are included, no need to print them\n+            NativeLibraryKind::NativeStatic => continue,\n         };\n-        sess.note_without_error(&format!(\"{}: {}\", name, *lib));\n+        sess.note_without_error(&format!(\"{}: {}\", name, lib.name));\n     }\n }\n \n@@ -876,14 +913,12 @@ fn add_local_native_libraries(cmd: &mut Linker, sess: &Session) {\n         }\n     });\n \n-    let libs = sess.cstore.used_libraries();\n-\n-    let staticlibs = libs.iter().filter_map(|&(ref l, kind)| {\n-        if kind == NativeLibraryKind::NativeStatic {Some(l)} else {None}\n-    });\n-    let others = libs.iter().filter(|&&(_, kind)| {\n-        kind != NativeLibraryKind::NativeStatic\n+    let pair = sess.cstore.used_libraries().into_iter().filter(|l| {\n+        relevant_lib(sess, l)\n+    }).partition(|lib| {\n+        lib.kind == NativeLibraryKind::NativeStatic\n     });\n+    let (staticlibs, others): (Vec<_>, Vec<_>) = pair;\n \n     // Some platforms take hints about whether a library is static or dynamic.\n     // For those that support this, we ensure we pass the option if the library\n@@ -899,15 +934,15 @@ fn add_local_native_libraries(cmd: &mut Linker, sess: &Session) {\n         // don't otherwise explicitly reference them. This can occur for\n         // libraries which are just providing bindings, libraries with generic\n         // functions, etc.\n-        cmd.link_whole_staticlib(l, &search_path);\n+        cmd.link_whole_staticlib(&l.name, &search_path);\n     }\n \n     cmd.hint_dynamic();\n \n-    for &(ref l, kind) in others {\n-        match kind {\n-            NativeLibraryKind::NativeUnknown => cmd.link_dylib(l),\n-            NativeLibraryKind::NativeFramework => cmd.link_framework(l),\n+    for lib in others {\n+        match lib.kind {\n+            NativeLibraryKind::NativeUnknown => cmd.link_dylib(&lib.name),\n+            NativeLibraryKind::NativeFramework => cmd.link_framework(&lib.name),\n             NativeLibraryKind::NativeStatic => bug!(),\n         }\n     }\n@@ -1017,7 +1052,16 @@ fn add_upstream_rust_crates(cmd: &mut Linker,\n                         cnum: CrateNum) {\n         let src = sess.cstore.used_crate_source(cnum);\n         let cratepath = &src.rlib.unwrap().0;\n-        if !sess.lto() && crate_type != config::CrateTypeDylib {\n+\n+        // See the comment above in `link_staticlib` and `link_rlib` for why if\n+        // there's a static library that's not relevant we skip all object\n+        // files.\n+        let native_libs = sess.cstore.native_libraries(cnum);\n+        let skip_native = native_libs.iter().any(|lib| {\n+            lib.kind == NativeLibraryKind::NativeStatic && !relevant_lib(sess, lib)\n+        });\n+\n+        if !sess.lto() && crate_type != config::CrateTypeDylib && !skip_native {\n             cmd.link_rlib(&fix_windows_verbatim_for_gcc(cratepath));\n             return\n         }\n@@ -1029,33 +1073,42 @@ fn add_upstream_rust_crates(cmd: &mut Linker,\n         time(sess.time_passes(), &format!(\"altering {}.rlib\", name), || {\n             let cfg = archive_config(sess, &dst, Some(cratepath));\n             let mut archive = ArchiveBuilder::new(cfg);\n-            archive.remove_file(sess.cstore.metadata_filename());\n             archive.update_symbols();\n \n             let mut any_objects = false;\n             for f in archive.src_files() {\n-                if f.ends_with(\"bytecode.deflate\") {\n+                if f.ends_with(\"bytecode.deflate\") ||\n+                   f == sess.cstore.metadata_filename() {\n                     archive.remove_file(&f);\n                     continue\n                 }\n+\n                 let canonical = f.replace(\"-\", \"_\");\n                 let canonical_name = name.replace(\"-\", \"_\");\n \n+                let is_rust_object =\n+                    canonical.starts_with(&canonical_name) && {\n+                        let num = &f[name.len()..f.len() - 2];\n+                        num.len() > 0 && num[1..].parse::<u32>().is_ok()\n+                    };\n+\n+                // If we've been requested to skip all native object files\n+                // (those not generated by the rust compiler) then we can skip\n+                // this file. See above for why we may want to do this.\n+                let skip_because_cfg_say_so = skip_native && !is_rust_object;\n+\n                 // If we're performing LTO and this is a rust-generated object\n                 // file, then we don't need the object file as it's part of the\n                 // LTO module. Note that `#![no_builtins]` is excluded from LTO,\n                 // though, so we let that object file slide.\n-                if sess.lto() &&\n-                   !sess.cstore.is_no_builtins(cnum) &&\n-                   canonical.starts_with(&canonical_name) &&\n-                   canonical.ends_with(\".o\") {\n-                    let num = &f[name.len()..f.len() - 2];\n-                    if num.len() > 0 && num[1..].parse::<u32>().is_ok() {\n-                        archive.remove_file(&f);\n-                        continue\n-                    }\n+                let skip_because_lto = sess.lto() && is_rust_object &&\n+                                        !sess.cstore.is_no_builtins(cnum);\n+\n+                if skip_because_cfg_say_so || skip_because_lto {\n+                    archive.remove_file(&f);\n+                } else {\n+                    any_objects = true;\n                 }\n-                any_objects = true;\n             }\n \n             if !any_objects {\n@@ -1127,15 +1180,26 @@ fn add_upstream_native_libraries(cmd: &mut Linker, sess: &Session) {\n     // the paths.\n     let crates = sess.cstore.used_crates(LinkagePreference::RequireStatic);\n     for (cnum, _) in crates {\n-        let libs = sess.cstore.native_libraries(cnum);\n-        for &(kind, ref lib) in &libs {\n-            match kind {\n-                NativeLibraryKind::NativeUnknown => cmd.link_dylib(lib),\n-                NativeLibraryKind::NativeFramework => cmd.link_framework(lib),\n-                NativeLibraryKind::NativeStatic => {\n-                    bug!(\"statics shouldn't be propagated\");\n-                }\n+        for lib in sess.cstore.native_libraries(cnum) {\n+            if !relevant_lib(sess, &lib) {\n+                continue\n+            }\n+            match lib.kind {\n+                NativeLibraryKind::NativeUnknown => cmd.link_dylib(&lib.name),\n+                NativeLibraryKind::NativeFramework => cmd.link_framework(&lib.name),\n+\n+                // ignore statically included native libraries here as we've\n+                // already included them when we included the rust library\n+                // previously\n+                NativeLibraryKind::NativeStatic => {}\n             }\n         }\n     }\n }\n+\n+fn relevant_lib(sess: &Session, lib: &NativeLibrary) -> bool {\n+    match lib.cfg {\n+        Some(ref cfg) => attr::cfg_matches(cfg, &sess.parse_sess, None),\n+        None => true,\n+    }\n+}"}, {"sha": "01eea08c50bc589dab4d36dba16eefc5e715c08e", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9d4b6fa51d86ad6141679a5a157fcd9bca48064c/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d4b6fa51d86ad6141679a5a157fcd9bca48064c/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=9d4b6fa51d86ad6141679a5a157fcd9bca48064c", "patch": "@@ -147,7 +147,16 @@ impl Emitter for SharedEmitter {\n // arise as some of intrinsics are converted into function calls\n // and nobody provides implementations those functions\n fn target_feature(sess: &Session) -> String {\n-    format!(\"{},{}\", sess.target.target.options.features, sess.opts.cg.target_feature)\n+    let rustc_features = [\n+        \"crt-static\",\n+    ];\n+    let requested_features = sess.opts.cg.target_feature.split(',');\n+    let llvm_features = requested_features.filter(|f| {\n+        !rustc_features.iter().any(|s| f.contains(s))\n+    });\n+    format!(\"{},{}\",\n+            sess.target.target.options.features,\n+            llvm_features.collect::<Vec<_>>().join(\",\"))\n }\n \n fn get_llvm_opt_level(optimize: config::OptLevel) -> llvm::CodeGenOptLevel {"}, {"sha": "27f720b76099815a3b233bfc9243375c6f536135", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9d4b6fa51d86ad6141679a5a157fcd9bca48064c/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d4b6fa51d86ad6141679a5a157fcd9bca48064c/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=9d4b6fa51d86ad6141679a5a157fcd9bca48064c", "patch": "@@ -311,6 +311,9 @@ declare_features! (\n \n     // Allows using `Self` and associated types in struct expressions and patterns.\n     (active, more_struct_aliases, \"1.14.0\", Some(37544)),\n+\n+    // Allows #[link(..., cfg(..))]\n+    (active, link_cfg, \"1.14.0\", Some(37406)),\n );\n \n declare_features! ("}, {"sha": "6c7c60b653a25db5373782f8e9f40ac69b6de8d7", "filename": "src/test/compile-fail/crt-static-gated.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9d4b6fa51d86ad6141679a5a157fcd9bca48064c/src%2Ftest%2Fcompile-fail%2Fcrt-static-gated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d4b6fa51d86ad6141679a5a157fcd9bca48064c/src%2Ftest%2Fcompile-fail%2Fcrt-static-gated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcrt-static-gated.rs?ref=9d4b6fa51d86ad6141679a5a157fcd9bca48064c", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags:-C target-feature=+crt-static\n+// error-pattern: specifying the `crt-static` target feature is only allowed\n+\n+fn main() {}"}, {"sha": "27918a27caf50793fe7f63010d6d6c7188ef5336", "filename": "src/test/compile-fail/link-cfg-gated.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9d4b6fa51d86ad6141679a5a157fcd9bca48064c/src%2Ftest%2Fcompile-fail%2Flink-cfg-gated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d4b6fa51d86ad6141679a5a157fcd9bca48064c/src%2Ftest%2Fcompile-fail%2Flink-cfg-gated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flink-cfg-gated.rs?ref=9d4b6fa51d86ad6141679a5a157fcd9bca48064c", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[link(name = \"foo\", cfg(foo))]\n+//~^ ERROR: is feature gated\n+extern {}\n+\n+fn main() {}"}, {"sha": "4abc0caa6986418553e10054d801cf98bff46fc8", "filename": "src/test/run-make/link-cfg/Makefile", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9d4b6fa51d86ad6141679a5a157fcd9bca48064c/src%2Ftest%2Frun-make%2Flink-cfg%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/9d4b6fa51d86ad6141679a5a157fcd9bca48064c/src%2Ftest%2Frun-make%2Flink-cfg%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Flink-cfg%2FMakefile?ref=9d4b6fa51d86ad6141679a5a157fcd9bca48064c", "patch": "@@ -0,0 +1,22 @@\n+-include ../tools.mk\n+\n+all: $(call DYLIB,return1) $(call DYLIB,return2) $(call NATIVE_STATICLIB,return3)\n+\tls $(TMPDIR)\n+\t$(RUSTC) --print cfg --target x86_64-unknown-linux-musl | grep crt-static\n+\n+\t$(RUSTC) no-deps.rs --cfg foo\n+\t$(call RUN,no-deps)\n+\t$(RUSTC) no-deps.rs --cfg bar\n+\t$(call RUN,no-deps)\n+\n+\t$(RUSTC) dep.rs\n+\t$(RUSTC) with-deps.rs --cfg foo\n+\t$(call RUN,with-deps)\n+\t$(RUSTC) with-deps.rs --cfg bar\n+\t$(call RUN,with-deps)\n+\n+\t$(RUSTC) dep-with-staticlib.rs\n+\t$(RUSTC) with-staticlib-deps.rs --cfg foo\n+\t$(call RUN,with-staticlib-deps)\n+\t$(RUSTC) with-staticlib-deps.rs --cfg bar\n+\t$(call RUN,with-staticlib-deps)"}, {"sha": "ecc2365ddb06d96beb1885961d0c56d5818e56cc", "filename": "src/test/run-make/link-cfg/dep-with-staticlib.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9d4b6fa51d86ad6141679a5a157fcd9bca48064c/src%2Ftest%2Frun-make%2Flink-cfg%2Fdep-with-staticlib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d4b6fa51d86ad6141679a5a157fcd9bca48064c/src%2Ftest%2Frun-make%2Flink-cfg%2Fdep-with-staticlib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Flink-cfg%2Fdep-with-staticlib.rs?ref=9d4b6fa51d86ad6141679a5a157fcd9bca48064c", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(link_cfg)]\n+#![crate_type = \"rlib\"]\n+\n+#[link(name = \"return1\", cfg(foo))]\n+#[link(name = \"return3\", kind = \"static\", cfg(bar))]\n+extern {\n+    pub fn my_function() -> i32;\n+}"}, {"sha": "7da879c2bfa2b7e613842121e7aee03c3ce2d9c6", "filename": "src/test/run-make/link-cfg/dep.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9d4b6fa51d86ad6141679a5a157fcd9bca48064c/src%2Ftest%2Frun-make%2Flink-cfg%2Fdep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d4b6fa51d86ad6141679a5a157fcd9bca48064c/src%2Ftest%2Frun-make%2Flink-cfg%2Fdep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Flink-cfg%2Fdep.rs?ref=9d4b6fa51d86ad6141679a5a157fcd9bca48064c", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(link_cfg)]\n+#![crate_type = \"rlib\"]\n+\n+#[link(name = \"return1\", cfg(foo))]\n+#[link(name = \"return2\", cfg(bar))]\n+extern {\n+    pub fn my_function() -> i32;\n+}"}, {"sha": "6b1141067440bff9ba4b6399ee3d2f4cd9b37c3b", "filename": "src/test/run-make/link-cfg/no-deps.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/9d4b6fa51d86ad6141679a5a157fcd9bca48064c/src%2Ftest%2Frun-make%2Flink-cfg%2Fno-deps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d4b6fa51d86ad6141679a5a157fcd9bca48064c/src%2Ftest%2Frun-make%2Flink-cfg%2Fno-deps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Flink-cfg%2Fno-deps.rs?ref=9d4b6fa51d86ad6141679a5a157fcd9bca48064c", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(link_cfg)]\n+\n+#[link(name = \"return1\", cfg(foo))]\n+#[link(name = \"return2\", cfg(bar))]\n+extern {\n+    fn my_function() -> i32;\n+}\n+\n+fn main() {\n+    unsafe {\n+        let v = my_function();\n+        if cfg!(foo) {\n+            assert_eq!(v, 1);\n+        } else if cfg!(bar) {\n+            assert_eq!(v, 2);\n+        } else {\n+            panic!(\"unknown\");\n+        }\n+    }\n+}"}, {"sha": "a2a3d051dd14fa0b284cca171b4b0ec01bc261b7", "filename": "src/test/run-make/link-cfg/return1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9d4b6fa51d86ad6141679a5a157fcd9bca48064c/src%2Ftest%2Frun-make%2Flink-cfg%2Freturn1.c", "raw_url": "https://github.com/rust-lang/rust/raw/9d4b6fa51d86ad6141679a5a157fcd9bca48064c/src%2Ftest%2Frun-make%2Flink-cfg%2Freturn1.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Flink-cfg%2Freturn1.c?ref=9d4b6fa51d86ad6141679a5a157fcd9bca48064c", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#ifdef _WIN32\n+__declspec(dllexport)\n+#endif\n+int my_function() {\n+  return 1;\n+}"}, {"sha": "d6ddcccf2fb7bc8d9815692b6d4d6cba5b47a7fd", "filename": "src/test/run-make/link-cfg/return2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9d4b6fa51d86ad6141679a5a157fcd9bca48064c/src%2Ftest%2Frun-make%2Flink-cfg%2Freturn2.c", "raw_url": "https://github.com/rust-lang/rust/raw/9d4b6fa51d86ad6141679a5a157fcd9bca48064c/src%2Ftest%2Frun-make%2Flink-cfg%2Freturn2.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Flink-cfg%2Freturn2.c?ref=9d4b6fa51d86ad6141679a5a157fcd9bca48064c", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#ifdef _WIN32\n+__declspec(dllexport)\n+#endif\n+int my_function() {\n+  return 2;\n+}"}, {"sha": "6a3b695f20811448886dea03dc1236a18f7a725f", "filename": "src/test/run-make/link-cfg/return3.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9d4b6fa51d86ad6141679a5a157fcd9bca48064c/src%2Ftest%2Frun-make%2Flink-cfg%2Freturn3.c", "raw_url": "https://github.com/rust-lang/rust/raw/9d4b6fa51d86ad6141679a5a157fcd9bca48064c/src%2Ftest%2Frun-make%2Flink-cfg%2Freturn3.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Flink-cfg%2Freturn3.c?ref=9d4b6fa51d86ad6141679a5a157fcd9bca48064c", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#ifdef _WIN32\n+__declspec(dllexport)\n+#endif\n+int my_function() {\n+  return 3;\n+}"}, {"sha": "799555c500a167be22e6872d61b4774b91058ab3", "filename": "src/test/run-make/link-cfg/with-deps.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9d4b6fa51d86ad6141679a5a157fcd9bca48064c/src%2Ftest%2Frun-make%2Flink-cfg%2Fwith-deps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d4b6fa51d86ad6141679a5a157fcd9bca48064c/src%2Ftest%2Frun-make%2Flink-cfg%2Fwith-deps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Flink-cfg%2Fwith-deps.rs?ref=9d4b6fa51d86ad6141679a5a157fcd9bca48064c", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+extern crate dep;\n+\n+fn main() {\n+    unsafe {\n+        let v = dep::my_function();\n+        if cfg!(foo) {\n+            assert_eq!(v, 1);\n+        } else if cfg!(bar) {\n+            assert_eq!(v, 2);\n+        } else {\n+            panic!(\"unknown\");\n+        }\n+    }\n+}"}, {"sha": "33a9c7720e268ce22e4d621baa6ac122887dbffa", "filename": "src/test/run-make/link-cfg/with-staticlib-deps.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9d4b6fa51d86ad6141679a5a157fcd9bca48064c/src%2Ftest%2Frun-make%2Flink-cfg%2Fwith-staticlib-deps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d4b6fa51d86ad6141679a5a157fcd9bca48064c/src%2Ftest%2Frun-make%2Flink-cfg%2Fwith-staticlib-deps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Flink-cfg%2Fwith-staticlib-deps.rs?ref=9d4b6fa51d86ad6141679a5a157fcd9bca48064c", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+extern crate dep_with_staticlib;\n+\n+fn main() {\n+    unsafe {\n+        let v = dep_with_staticlib::my_function();\n+        if cfg!(foo) {\n+            assert_eq!(v, 1);\n+        } else if cfg!(bar) {\n+            assert_eq!(v, 3);\n+        } else {\n+            panic!(\"unknown\");\n+        }\n+    }\n+}"}, {"sha": "d41fd490f58e216120452a52d756c7428f63b031", "filename": "src/test/run-pass/auxiliary/link-cfg-works-transitive-dylib.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9d4b6fa51d86ad6141679a5a157fcd9bca48064c/src%2Ftest%2Frun-pass%2Fauxiliary%2Flink-cfg-works-transitive-dylib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d4b6fa51d86ad6141679a5a157fcd9bca48064c/src%2Ftest%2Frun-pass%2Fauxiliary%2Flink-cfg-works-transitive-dylib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauxiliary%2Flink-cfg-works-transitive-dylib.rs?ref=9d4b6fa51d86ad6141679a5a157fcd9bca48064c", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(link_cfg)]\n+\n+#[link(name = \"foo\", cfg(foo))]\n+extern {}"}, {"sha": "9f096c351fbe3c891d31cb0e30372045c1132a5e", "filename": "src/test/run-pass/auxiliary/link-cfg-works-transitive-rlib.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9d4b6fa51d86ad6141679a5a157fcd9bca48064c/src%2Ftest%2Frun-pass%2Fauxiliary%2Flink-cfg-works-transitive-rlib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d4b6fa51d86ad6141679a5a157fcd9bca48064c/src%2Ftest%2Frun-pass%2Fauxiliary%2Flink-cfg-works-transitive-rlib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauxiliary%2Flink-cfg-works-transitive-rlib.rs?ref=9d4b6fa51d86ad6141679a5a157fcd9bca48064c", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// no-prefer-dynamic\n+\n+#![feature(link_cfg)]\n+#![crate_type = \"rlib\"]\n+\n+#[link(name = \"foo\", cfg(foo))]\n+extern {}"}, {"sha": "c94c877c12c6d320875795d4d731206bdcab4602", "filename": "src/test/run-pass/crt-static-off-works.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9d4b6fa51d86ad6141679a5a157fcd9bca48064c/src%2Ftest%2Frun-pass%2Fcrt-static-off-works.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d4b6fa51d86ad6141679a5a157fcd9bca48064c/src%2Ftest%2Frun-pass%2Fcrt-static-off-works.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcrt-static-off-works.rs?ref=9d4b6fa51d86ad6141679a5a157fcd9bca48064c", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags:-C target-feature=-crt-static -Z unstable-options\n+// ignore-musl - requires changing the linker which is hard\n+\n+#![feature(cfg_target_feature)]\n+\n+#[cfg(not(target_feature = \"crt-static\"))]\n+fn main() {}"}, {"sha": "ae8e5f629704893e380bb51d4aa956b83854b198", "filename": "src/test/run-pass/crt-static-on-works.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9d4b6fa51d86ad6141679a5a157fcd9bca48064c/src%2Ftest%2Frun-pass%2Fcrt-static-on-works.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d4b6fa51d86ad6141679a5a157fcd9bca48064c/src%2Ftest%2Frun-pass%2Fcrt-static-on-works.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcrt-static-on-works.rs?ref=9d4b6fa51d86ad6141679a5a157fcd9bca48064c", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags:-C target-feature=+crt-static -Z unstable-options\n+\n+#![feature(cfg_target_feature)]\n+\n+#[cfg(target_feature = \"crt-static\")]\n+fn main() {}"}, {"sha": "7db948c7daa9f2c9c3d6479e5ca8b5e0fa016d08", "filename": "src/test/run-pass/link-cfg-works.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/9d4b6fa51d86ad6141679a5a157fcd9bca48064c/src%2Ftest%2Frun-pass%2Flink-cfg-works.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d4b6fa51d86ad6141679a5a157fcd9bca48064c/src%2Ftest%2Frun-pass%2Flink-cfg-works.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flink-cfg-works.rs?ref=9d4b6fa51d86ad6141679a5a157fcd9bca48064c", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:link-cfg-works-transitive-rlib.rs\n+// aux-build:link-cfg-works-transitive-dylib.rs\n+\n+#![feature(link_cfg)]\n+\n+extern crate link_cfg_works_transitive_rlib;\n+extern crate link_cfg_works_transitive_dylib;\n+\n+#[link(name = \"foo\", cfg(foo))]\n+extern {}\n+\n+fn main() {}\n+"}]}