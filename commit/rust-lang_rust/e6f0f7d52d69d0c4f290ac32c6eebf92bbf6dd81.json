{"sha": "e6f0f7d52d69d0c4f290ac32c6eebf92bbf6dd81", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2ZjBmN2Q1MmQ2OWQwYzRmMjkwYWMzMmM2ZWViZjkyYmJmNmRkODE=", "commit": {"author": {"name": "arcnmx", "email": "arcnmx@users.noreply.github.com", "date": "2015-11-07T17:22:04Z"}, "committer": {"name": "arcnmx", "email": "arcnmx@users.noreply.github.com", "date": "2016-02-11T17:45:52Z"}, "message": "Only retain external static symbols across LTO", "tree": {"sha": "eed6c22c1a4a2ab9925546d91f317728b6ef0898", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eed6c22c1a4a2ab9925546d91f317728b6ef0898"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e6f0f7d52d69d0c4f290ac32c6eebf92bbf6dd81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e6f0f7d52d69d0c4f290ac32c6eebf92bbf6dd81", "html_url": "https://github.com/rust-lang/rust/commit/e6f0f7d52d69d0c4f290ac32c6eebf92bbf6dd81", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e6f0f7d52d69d0c4f290ac32c6eebf92bbf6dd81/comments", "author": {"login": "arcnmx", "id": 13426784, "node_id": "MDQ6VXNlcjEzNDI2Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/13426784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arcnmx", "html_url": "https://github.com/arcnmx", "followers_url": "https://api.github.com/users/arcnmx/followers", "following_url": "https://api.github.com/users/arcnmx/following{/other_user}", "gists_url": "https://api.github.com/users/arcnmx/gists{/gist_id}", "starred_url": "https://api.github.com/users/arcnmx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arcnmx/subscriptions", "organizations_url": "https://api.github.com/users/arcnmx/orgs", "repos_url": "https://api.github.com/users/arcnmx/repos", "events_url": "https://api.github.com/users/arcnmx/events{/privacy}", "received_events_url": "https://api.github.com/users/arcnmx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arcnmx", "id": 13426784, "node_id": "MDQ6VXNlcjEzNDI2Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/13426784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arcnmx", "html_url": "https://github.com/arcnmx", "followers_url": "https://api.github.com/users/arcnmx/followers", "following_url": "https://api.github.com/users/arcnmx/following{/other_user}", "gists_url": "https://api.github.com/users/arcnmx/gists{/gist_id}", "starred_url": "https://api.github.com/users/arcnmx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arcnmx/subscriptions", "organizations_url": "https://api.github.com/users/arcnmx/orgs", "repos_url": "https://api.github.com/users/arcnmx/repos", "events_url": "https://api.github.com/users/arcnmx/events{/privacy}", "received_events_url": "https://api.github.com/users/arcnmx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a91ff1c9d1842918329ef7a81afd3848854d53c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/a91ff1c9d1842918329ef7a81afd3848854d53c7", "html_url": "https://github.com/rust-lang/rust/commit/a91ff1c9d1842918329ef7a81afd3848854d53c7"}], "stats": {"total": 84, "additions": 41, "deletions": 43}, "files": [{"sha": "c2c23f6a0325094242c829c98012e6fe715cc62e", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e6f0f7d52d69d0c4f290ac32c6eebf92bbf6dd81/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6f0f7d52d69d0c4f290ac32c6eebf92bbf6dd81/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=e6f0f7d52d69d0c4f290ac32c6eebf92bbf6dd81", "patch": "@@ -187,8 +187,7 @@ pub trait CrateStore<'tcx> : Any {\n     fn is_defaulted_trait(&self, did: DefId) -> bool;\n     fn is_impl(&self, did: DefId) -> bool;\n     fn is_default_impl(&self, impl_did: DefId) -> bool;\n-    fn is_extern_fn(&self, tcx: &ty::ctxt<'tcx>, did: DefId) -> bool;\n-    fn is_static(&self, did: DefId) -> bool;\n+    fn is_extern_item(&self, tcx: &ty::ctxt<'tcx>, did: DefId) -> bool;\n     fn is_static_method(&self, did: DefId) -> bool;\n     fn is_statically_included_foreign_item(&self, id: ast::NodeId) -> bool;\n     fn is_typedef(&self, did: DefId) -> bool;\n@@ -357,8 +356,7 @@ impl<'tcx> CrateStore<'tcx> for DummyCrateStore {\n     fn is_defaulted_trait(&self, did: DefId) -> bool { unimplemented!() }\n     fn is_impl(&self, did: DefId) -> bool { unimplemented!() }\n     fn is_default_impl(&self, impl_did: DefId) -> bool { unimplemented!() }\n-    fn is_extern_fn(&self, tcx: &ty::ctxt<'tcx>, did: DefId) -> bool { unimplemented!() }\n-    fn is_static(&self, did: DefId) -> bool { unimplemented!() }\n+    fn is_extern_item(&self, tcx: &ty::ctxt<'tcx>, did: DefId) -> bool { unimplemented!() }\n     fn is_static_method(&self, did: DefId) -> bool { unimplemented!() }\n     fn is_statically_included_foreign_item(&self, id: ast::NodeId) -> bool { false }\n     fn is_typedef(&self, did: DefId) -> bool { unimplemented!() }"}, {"sha": "5486172b830d2b44a360051e65915a5110215e1b", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e6f0f7d52d69d0c4f290ac32c6eebf92bbf6dd81/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6f0f7d52d69d0c4f290ac32c6eebf92bbf6dd81/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=e6f0f7d52d69d0c4f290ac32c6eebf92bbf6dd81", "patch": "@@ -229,16 +229,16 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n     fn propagate_node(&mut self, node: &ast_map::Node,\n                       search_item: ast::NodeId) {\n         if !self.any_library {\n-            // If we are building an executable, then there's no need to flag\n-            // anything as external except for `extern fn` types. These\n-            // functions may still participate in some form of native interface,\n-            // but all other rust-only interfaces can be private (they will not\n-            // participate in linkage after this product is produced)\n+            // If we are building an executable, only explicitly extern\n+            // types need to be exported.\n             if let ast_map::NodeItem(item) = *node {\n-                if let hir::ItemFn(_, _, _, abi, _, _) = item.node {\n-                    if abi != Abi::Rust {\n-                        self.reachable_symbols.insert(search_item);\n-                    }\n+                let reachable = if let hir::ItemFn(_, _, _, abi, _, _) = item.node {\n+                    abi != Abi::Rust\n+                } else {\n+                    false\n+                };\n+                if reachable || attr::contains_extern_indicator(&item.attrs) {\n+                    self.reachable_symbols.insert(search_item);\n                 }\n             }\n         } else {"}, {"sha": "5eade3bc0a54ed7c82152832cccac8bad11fb60f", "filename": "src/librustc_metadata/csearch.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e6f0f7d52d69d0c4f290ac32c6eebf92bbf6dd81/src%2Flibrustc_metadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6f0f7d52d69d0c4f290ac32c6eebf92bbf6dd81/src%2Flibrustc_metadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcsearch.rs?ref=e6f0f7d52d69d0c4f290ac32c6eebf92bbf6dd81", "patch": "@@ -260,16 +260,9 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n         decoder::is_default_impl(&*cdata, impl_did.index)\n     }\n \n-    fn is_extern_fn(&self, tcx: &ty::ctxt<'tcx>, did: DefId) -> bool\n-    {\n-        let cdata = self.get_crate_data(did.krate);\n-        decoder::is_extern_fn(&*cdata, did.index, tcx)\n-    }\n-\n-    fn is_static(&self, did: DefId) -> bool\n-    {\n+    fn is_extern_item(&self, tcx: &ty::ctxt<'tcx>, did: DefId) -> bool {\n         let cdata = self.get_crate_data(did.krate);\n-        decoder::is_static(&*cdata, did.index)\n+        decoder::is_extern_item(&*cdata, did.index, tcx)\n     }\n \n     fn is_static_method(&self, def: DefId) -> bool"}, {"sha": "3ec32635a4bd416911b4154f890acc3fd33902bf", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 20, "deletions": 19, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/e6f0f7d52d69d0c4f290ac32c6eebf92bbf6dd81/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6f0f7d52d69d0c4f290ac32c6eebf92bbf6dd81/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=e6f0f7d52d69d0c4f290ac32c6eebf92bbf6dd81", "patch": "@@ -1567,11 +1567,28 @@ pub fn is_const_fn(cdata: Cmd, id: DefIndex) -> bool {\n     }\n }\n \n-pub fn is_static(cdata: Cmd, id: DefIndex) -> bool {\n-    let item_doc = cdata.lookup_item(id);\n-    match item_family(item_doc) {\n+pub fn is_extern_item(cdata: Cmd, id: DefIndex, tcx: &ty::ctxt) -> bool {\n+    let item_doc = match cdata.get_item(id) {\n+        Some(doc) => doc,\n+        None => return false,\n+    };\n+    let applicable = match item_family(item_doc) {\n         ImmStatic | MutStatic => true,\n+        Fn => {\n+            let ty::TypeScheme { generics, ty } = get_type(cdata, id, tcx);\n+            let no_generics = generics.types.is_empty();\n+            match ty.sty {\n+                ty::TyBareFn(_, fn_ty) if fn_ty.abi != Abi::Rust => return no_generics,\n+                _ => no_generics,\n+            }\n+        },\n         _ => false,\n+    };\n+\n+    if applicable {\n+        attr::contains_extern_indicator(&get_attributes(item_doc))\n+    } else {\n+        false\n     }\n }\n \n@@ -1693,22 +1710,6 @@ pub fn get_imported_filemaps(metadata: &[u8]) -> Vec<codemap::FileMap> {\n     }).collect()\n }\n \n-pub fn is_extern_fn(cdata: Cmd, id: DefIndex, tcx: &ty::ctxt) -> bool {\n-    let item_doc = match cdata.get_item(id) {\n-        Some(doc) => doc,\n-        None => return false,\n-    };\n-    if let Fn = item_family(item_doc) {\n-        let ty::TypeScheme { generics, ty } = get_type(cdata, id, tcx);\n-        generics.types.is_empty() && match ty.sty {\n-            ty::TyBareFn(_, fn_ty) => fn_ty.abi != Abi::Rust,\n-            _ => false,\n-        }\n-    } else {\n-        false\n-    }\n-}\n-\n pub fn closure_kind(cdata: Cmd, closure_id: DefIndex) -> ty::ClosureKind {\n     let closure_doc = cdata.lookup_item(closure_id);\n     let closure_kind_doc = reader::get_doc(closure_doc, tag_items_closure_kind);"}, {"sha": "4748c62921de6f24e4376093d0460f11a97477ff", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e6f0f7d52d69d0c4f290ac32c6eebf92bbf6dd81/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6f0f7d52d69d0c4f290ac32c6eebf92bbf6dd81/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=e6f0f7d52d69d0c4f290ac32c6eebf92bbf6dd81", "patch": "@@ -3281,8 +3281,7 @@ pub fn trans_crate<'tcx>(tcx: &ty::ctxt<'tcx>,\n         for cnum in sess.cstore.crates() {\n             let syms = sess.cstore.reachable_ids(cnum);\n             reachable_symbols.extend(syms.into_iter().filter(|did| {\n-                sess.cstore.is_extern_fn(shared_ccx.tcx(), *did) ||\n-                sess.cstore.is_static(*did)\n+                sess.cstore.is_extern_item(shared_ccx.tcx(), *did)\n             }).map(|did| {\n                 sess.cstore.item_symbol(did)\n             }));"}, {"sha": "e26543757364622dcc8ba5de52aba78c3ba98b94", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e6f0f7d52d69d0c4f290ac32c6eebf92bbf6dd81/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6f0f7d52d69d0c4f290ac32c6eebf92bbf6dd81/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=e6f0f7d52d69d0c4f290ac32c6eebf92bbf6dd81", "patch": "@@ -316,6 +316,13 @@ pub fn find_export_name_attr(diag: &Handler, attrs: &[Attribute]) -> Option<Inte\n     })\n }\n \n+pub fn contains_extern_indicator(attrs: &[Attribute]) -> bool {\n+    contains_name(attrs, \"no_mangle\") ||\n+        contains_name(attrs, \"link_section\") ||\n+        contains_name(attrs, \"linkage\") ||\n+        contains_name(attrs, \"export_name\")\n+}\n+\n #[derive(Copy, Clone, PartialEq)]\n pub enum InlineAttr {\n     None,"}]}