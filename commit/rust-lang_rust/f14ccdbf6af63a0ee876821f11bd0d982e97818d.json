{"sha": "f14ccdbf6af63a0ee876821f11bd0d982e97818d", "node_id": "C_kwDOAAsO6NoAKGYxNGNjZGJmNmFmNjNhMGVlODc2ODIxZjExYmQwZDk4MmU5NzgxOGQ", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2022-06-09T10:19:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-09T10:19:54Z"}, "message": "Rollup merge of #95632 - evanrichter:master, r=joshtriplett\n\nimpl Read and Write for VecDeque<u8>\n\nImplementing `Read` and `Write` for `VecDeque<u8>` fills in the VecDeque api surface where `Vec<u8>` and `Cursor<Vec<u8>>` already impl Read and Write. Not only for completeness, but VecDeque in particular is a very handy mock interface for a TCP echo service, if only it supported Read/Write.\n\nSince this PR is just an impl trait, I don't think there is a way to limit it behind a feature flag, so it's \"insta-stable\". Please correct me if I'm wrong here, not trying to rush stability.", "tree": {"sha": "8f150d0aa1c7c3d96db9f1749f9bfb62aee120fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f150d0aa1c7c3d96db9f1749f9bfb62aee120fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f14ccdbf6af63a0ee876821f11bd0d982e97818d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJioclKCRBK7hj4Ov3rIwAARucIAGnGTaJnhvmVmr6p5Bi1kki4\nKOD1NLCTfCmkq3mAO2VH32qIHg2ELT1hOwxCNHML05igomaMVjbFy5SHoxOy1QcR\nHjf0D2eR70xjKzrR96paDCTLA8Ox442mq3w5fpNwOB/auSoD310fKQRsDxi7+f14\nvkwMS3Bng01GuXpjmHKMSUkeIGcnid6AtYrCm2z+lH3IV9YzENlSPceQ25FM8Ppw\n1lXhtrZm4xARSFVdfFYibYfV68rE4uHgW7FV8ZjnK4aUJ/YQupl1c4MDso/iUjd3\ni+qagbmvr93izGPw66B0YQSCQKm7OaUWYniU/1WeiW6pCVhOqBi36TNdFcRonDc=\n=FiC0\n-----END PGP SIGNATURE-----\n", "payload": "tree 8f150d0aa1c7c3d96db9f1749f9bfb62aee120fe\nparent 6dc598a01b8f7619826b7152be5162e6d37a1754\nparent 8b7a3f4d53f9e96a49d77ed42d22baf4d7743b94\nauthor Yuki Okushi <jtitor@2k36.org> 1654769994 +0900\ncommitter GitHub <noreply@github.com> 1654769994 +0900\n\nRollup merge of #95632 - evanrichter:master, r=joshtriplett\n\nimpl Read and Write for VecDeque<u8>\n\nImplementing `Read` and `Write` for `VecDeque<u8>` fills in the VecDeque api surface where `Vec<u8>` and `Cursor<Vec<u8>>` already impl Read and Write. Not only for completeness, but VecDeque in particular is a very handy mock interface for a TCP echo service, if only it supported Read/Write.\n\nSince this PR is just an impl trait, I don't think there is a way to limit it behind a feature flag, so it's \"insta-stable\". Please correct me if I'm wrong here, not trying to rush stability.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f14ccdbf6af63a0ee876821f11bd0d982e97818d", "html_url": "https://github.com/rust-lang/rust/commit/f14ccdbf6af63a0ee876821f11bd0d982e97818d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f14ccdbf6af63a0ee876821f11bd0d982e97818d/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6dc598a01b8f7619826b7152be5162e6d37a1754", "url": "https://api.github.com/repos/rust-lang/rust/commits/6dc598a01b8f7619826b7152be5162e6d37a1754", "html_url": "https://github.com/rust-lang/rust/commit/6dc598a01b8f7619826b7152be5162e6d37a1754"}, {"sha": "8b7a3f4d53f9e96a49d77ed42d22baf4d7743b94", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b7a3f4d53f9e96a49d77ed42d22baf4d7743b94", "html_url": "https://github.com/rust-lang/rust/commit/8b7a3f4d53f9e96a49d77ed42d22baf4d7743b94"}], "stats": {"total": 48, "additions": 48, "deletions": 0}, "files": [{"sha": "0ca58efe1fe2f8af355b2865db0697a488384756", "filename": "library/std/src/io/impls.rs", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/f14ccdbf6af63a0ee876821f11bd0d982e97818d/library%2Fstd%2Fsrc%2Fio%2Fimpls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f14ccdbf6af63a0ee876821f11bd0d982e97818d/library%2Fstd%2Fsrc%2Fio%2Fimpls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fimpls.rs?ref=f14ccdbf6af63a0ee876821f11bd0d982e97818d", "patch": "@@ -3,6 +3,7 @@ mod tests;\n \n use crate::alloc::Allocator;\n use crate::cmp;\n+use crate::collections::VecDeque;\n use crate::fmt;\n use crate::io::{\n     self, BufRead, ErrorKind, IoSlice, IoSliceMut, Read, ReadBuf, Seek, SeekFrom, Write,\n@@ -410,3 +411,50 @@ impl<A: Allocator> Write for Vec<u8, A> {\n         Ok(())\n     }\n }\n+\n+/// Read is implemented for `VecDeque<u8>` by consuming bytes from the front of the `VecDeque`.\n+#[stable(feature = \"vecdeque_read_write\", since = \"1.63.0\")]\n+impl<A: Allocator> Read for VecDeque<u8, A> {\n+    /// Fill `buf` with the contents of the \"front\" slice as returned by\n+    /// [`as_slices`][`VecDeque::as_slices`]. If the contained byte slices of the `VecDeque` are\n+    /// discontiguous, multiple calls to `read` will be needed to read the entire content.\n+    #[inline]\n+    fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n+        let (ref mut front, _) = self.as_slices();\n+        let n = Read::read(front, buf)?;\n+        self.drain(..n);\n+        Ok(n)\n+    }\n+\n+    #[inline]\n+    fn read_buf(&mut self, buf: &mut ReadBuf<'_>) -> io::Result<()> {\n+        let (ref mut front, _) = self.as_slices();\n+        let n = cmp::min(buf.remaining(), front.len());\n+        Read::read_buf(front, buf)?;\n+        self.drain(..n);\n+        Ok(())\n+    }\n+}\n+\n+/// Write is implemented for `VecDeque<u8>` by appending to the `VecDeque`, growing it as needed.\n+#[stable(feature = \"vecdeque_read_write\", since = \"1.63.0\")]\n+impl<A: Allocator> Write for VecDeque<u8, A> {\n+    #[inline]\n+    fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n+        self.reserve(buf.len());\n+        self.extend(buf);\n+        Ok(buf.len())\n+    }\n+\n+    #[inline]\n+    fn write_all(&mut self, buf: &[u8]) -> io::Result<()> {\n+        self.reserve(buf.len());\n+        self.extend(buf);\n+        Ok(())\n+    }\n+\n+    #[inline]\n+    fn flush(&mut self) -> io::Result<()> {\n+        Ok(())\n+    }\n+}"}]}