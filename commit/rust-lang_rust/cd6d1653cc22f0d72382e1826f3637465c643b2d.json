{"sha": "cd6d1653cc22f0d72382e1826f3637465c643b2d", "node_id": "C_kwDOAAsO6NoAKGNkNmQxNjUzY2MyMmYwZDcyMzgyZTE4MjZmMzYzNzQ2NWM2NDNiMmQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-17T07:42:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-17T07:42:39Z"}, "message": "Rollup merge of #109156 - taiki-e:linker-detection, r=petrochenkov\n\nFix linker detection for clang with prefix\n\nhttps://github.com/rust-lang/rust/pull/106489 removed check for clang with prefix. It says:\n\n> Also remove the check for -clang, since there are no architecture specific variants of clang (to my knowledge).\n\nHowever, when doing cross-compilation, a wrapper script for clang with the target name as a prefix is sometimes used.\n\nhttps://github.com/rust-lang/rust/blob/1716932743a7b3705cbf0c34db0c4e070ed1930d/src/ci/docker/host-x86_64/dist-various-2/Dockerfile#L62\n\nhttps://github.com/rust-lang/rust/blob/1716932743a7b3705cbf0c34db0c4e070ed1930d/src/ci/docker/scripts/freebsd-toolchain.sh#L76-L80\n\nhttps://github.com/rust-lang/rust/blob/1716932743a7b3705cbf0c34db0c4e070ed1930d/src/ci/docker/host-x86_64/dist-various-2/Dockerfile#L40\n\nhttps://github.com/rust-lang/rust/blob/1716932743a7b3705cbf0c34db0c4e070ed1930d/compiler/rustc_target/src/spec/aarch64_pc_windows_gnullvm.rs#L7\n\nIt seems the regression did not occur on the targets mentioned above because the default linker flavor is gcc, but it did occur on targets where the default linker flavor is not gcc (https://github.com/taiki-e/setup-cross-toolchain-action/commit/fd352f3ffabd00daf2759ab4a3276729e52eeb10).\n\nr? ````@petrochenkov````", "tree": {"sha": "2afee0efb1911f33262934effe58e0590f4f1186", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2afee0efb1911f33262934effe58e0590f4f1186"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd6d1653cc22f0d72382e1826f3637465c643b2d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkFBnvCRBK7hj4Ov3rIwAAC84IAAc4oaZhABfRFbzIOm/euvy+\npUmneQroo+qDOHl6FyWnquzpiZCHBLPVU1hJyT8cBk/yDCyfng6iJqKiB3awO44u\n40fyoWJfI+Q3qhtumunO7y7fi5p/5zFaR2tn9Mlr2HbuLWVTHw/WKSJbgvbbDaO9\nz4h1rs3NCventLYSg1TakpxFNO0yBxyYFK7d0l0LRDb98OjDT3P+EN9GsWEeBil0\nLuDJOZhK3CWugSwBk+qrJDg8h2bHvcx4sL9LhIdij7BQ0DHRhQV65nJVqzUrVQFq\nEDB3sOlUYWOX+Z+aMLsi/zUqV8+EdwwIDLDglD7l6V09kThiAEfiEP3Ju6IzOR4=\n=GDYd\n-----END PGP SIGNATURE-----\n", "payload": "tree 2afee0efb1911f33262934effe58e0590f4f1186\nparent 023154e2ce780d9a49a2ec81147109360772956c\nparent 86a5e3632c77d1c77d58ddb750a147998b5e4dbd\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1679038959 +0100\ncommitter GitHub <noreply@github.com> 1679038959 +0100\n\nRollup merge of #109156 - taiki-e:linker-detection, r=petrochenkov\n\nFix linker detection for clang with prefix\n\nhttps://github.com/rust-lang/rust/pull/106489 removed check for clang with prefix. It says:\n\n> Also remove the check for -clang, since there are no architecture specific variants of clang (to my knowledge).\n\nHowever, when doing cross-compilation, a wrapper script for clang with the target name as a prefix is sometimes used.\n\nhttps://github.com/rust-lang/rust/blob/1716932743a7b3705cbf0c34db0c4e070ed1930d/src/ci/docker/host-x86_64/dist-various-2/Dockerfile#L62\n\nhttps://github.com/rust-lang/rust/blob/1716932743a7b3705cbf0c34db0c4e070ed1930d/src/ci/docker/scripts/freebsd-toolchain.sh#L76-L80\n\nhttps://github.com/rust-lang/rust/blob/1716932743a7b3705cbf0c34db0c4e070ed1930d/src/ci/docker/host-x86_64/dist-various-2/Dockerfile#L40\n\nhttps://github.com/rust-lang/rust/blob/1716932743a7b3705cbf0c34db0c4e070ed1930d/compiler/rustc_target/src/spec/aarch64_pc_windows_gnullvm.rs#L7\n\nIt seems the regression did not occur on the targets mentioned above because the default linker flavor is gcc, but it did occur on targets where the default linker flavor is not gcc (https://github.com/taiki-e/setup-cross-toolchain-action/commit/fd352f3ffabd00daf2759ab4a3276729e52eeb10).\n\nr? ````@petrochenkov````\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd6d1653cc22f0d72382e1826f3637465c643b2d", "html_url": "https://github.com/rust-lang/rust/commit/cd6d1653cc22f0d72382e1826f3637465c643b2d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd6d1653cc22f0d72382e1826f3637465c643b2d/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "023154e2ce780d9a49a2ec81147109360772956c", "url": "https://api.github.com/repos/rust-lang/rust/commits/023154e2ce780d9a49a2ec81147109360772956c", "html_url": "https://github.com/rust-lang/rust/commit/023154e2ce780d9a49a2ec81147109360772956c"}, {"sha": "86a5e3632c77d1c77d58ddb750a147998b5e4dbd", "url": "https://api.github.com/repos/rust-lang/rust/commits/86a5e3632c77d1c77d58ddb750a147998b5e4dbd", "html_url": "https://github.com/rust-lang/rust/commit/86a5e3632c77d1c77d58ddb750a147998b5e4dbd"}], "stats": {"total": 4, "additions": 3, "deletions": 1}, "files": [{"sha": "8bb143ed3da8d0af445ad7d6d4acd5f5fde4aa11", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd6d1653cc22f0d72382e1826f3637465c643b2d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd6d1653cc22f0d72382e1826f3637465c643b2d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=cd6d1653cc22f0d72382e1826f3637465c643b2d", "patch": "@@ -1199,15 +1199,17 @@ pub fn linker_and_flavor(sess: &Session) -> (PathBuf, LinkerFlavor) {\n                     .and_then(|(lhs, rhs)| rhs.chars().all(char::is_numeric).then_some(lhs))\n                     .unwrap_or(stem);\n \n-                // GCC can have an optional target prefix.\n+                // GCC/Clang can have an optional target prefix.\n                 let flavor = if stem == \"emcc\" {\n                     LinkerFlavor::EmCc\n                 } else if stem == \"gcc\"\n                     || stem.ends_with(\"-gcc\")\n                     || stem == \"g++\"\n                     || stem.ends_with(\"-g++\")\n                     || stem == \"clang\"\n+                    || stem.ends_with(\"-clang\")\n                     || stem == \"clang++\"\n+                    || stem.ends_with(\"-clang++\")\n                 {\n                     LinkerFlavor::from_cli(LinkerFlavorCli::Gcc, &sess.target)\n                 } else if stem == \"wasm-ld\" || stem.ends_with(\"-wasm-ld\") {"}]}