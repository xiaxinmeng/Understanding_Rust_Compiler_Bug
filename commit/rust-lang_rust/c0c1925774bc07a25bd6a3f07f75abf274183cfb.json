{"sha": "c0c1925774bc07a25bd6a3f07f75abf274183cfb", "node_id": "C_kwDOAAsO6NoAKGMwYzE5MjU3NzRiYzA3YTI1YmQ2YTNmMDdmNzVhYmYyNzQxODNjZmI", "commit": {"author": {"name": "Dan Gohman", "email": "dev@sunfishcode.online", "date": "2023-02-23T12:56:31Z"}, "committer": {"name": "Dan Gohman", "email": "dev@sunfishcode.online", "date": "2023-02-23T14:29:11Z"}, "message": "Fix `is_terminal`'s handling of long paths on Windows.\n\nAs reported in sunfishcode/is-terminal#18, there are situations where\n`GetFileInformationByHandleEx` can write a file name length that is\nlonger than the provided buffer. To avoid deferencing memory past the\nend of the buffer, use a bounds-checked function to form a slice to\nthe buffer and handle the out-of-bounds case.\n\nThis ports the fix from sunfishcode/is-terminal#19 to std's `is_terminal`\nimplementation.", "tree": {"sha": "08b7892b64435b01e26b735a2475a243b6d7f77a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08b7892b64435b01e26b735a2475a243b6d7f77a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0c1925774bc07a25bd6a3f07f75abf274183cfb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0c1925774bc07a25bd6a3f07f75abf274183cfb", "html_url": "https://github.com/rust-lang/rust/commit/c0c1925774bc07a25bd6a3f07f75abf274183cfb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0c1925774bc07a25bd6a3f07f75abf274183cfb/comments", "author": {"login": "sunfishcode", "id": 4503403, "node_id": "MDQ6VXNlcjQ1MDM0MDM=", "avatar_url": "https://avatars.githubusercontent.com/u/4503403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunfishcode", "html_url": "https://github.com/sunfishcode", "followers_url": "https://api.github.com/users/sunfishcode/followers", "following_url": "https://api.github.com/users/sunfishcode/following{/other_user}", "gists_url": "https://api.github.com/users/sunfishcode/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunfishcode/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunfishcode/subscriptions", "organizations_url": "https://api.github.com/users/sunfishcode/orgs", "repos_url": "https://api.github.com/users/sunfishcode/repos", "events_url": "https://api.github.com/users/sunfishcode/events{/privacy}", "received_events_url": "https://api.github.com/users/sunfishcode/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sunfishcode", "id": 4503403, "node_id": "MDQ6VXNlcjQ1MDM0MDM=", "avatar_url": "https://avatars.githubusercontent.com/u/4503403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunfishcode", "html_url": "https://github.com/sunfishcode", "followers_url": "https://api.github.com/users/sunfishcode/followers", "following_url": "https://api.github.com/users/sunfishcode/following{/other_user}", "gists_url": "https://api.github.com/users/sunfishcode/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunfishcode/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunfishcode/subscriptions", "organizations_url": "https://api.github.com/users/sunfishcode/orgs", "repos_url": "https://api.github.com/users/sunfishcode/repos", "events_url": "https://api.github.com/users/sunfishcode/events{/privacy}", "received_events_url": "https://api.github.com/users/sunfishcode/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07c993eba8b76eae497e98433ae075b00f01be10", "url": "https://api.github.com/repos/rust-lang/rust/commits/07c993eba8b76eae497e98433ae075b00f01be10", "html_url": "https://github.com/rust-lang/rust/commit/07c993eba8b76eae497e98433ae075b00f01be10"}], "stats": {"total": 40, "additions": 21, "deletions": 19}, "files": [{"sha": "1d0ab7727394a73864ff92a676436e35493a5545", "filename": "library/std/src/sys/windows/c.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c0c1925774bc07a25bd6a3f07f75abf274183cfb/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0c1925774bc07a25bd6a3f07f75abf274183cfb/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs?ref=c0c1925774bc07a25bd6a3f07f75abf274183cfb", "patch": "@@ -539,14 +539,6 @@ pub struct SYMBOLIC_LINK_REPARSE_BUFFER {\n     pub PathBuffer: WCHAR,\n }\n \n-/// NB: Use carefully! In general using this as a reference is likely to get the\n-/// provenance wrong for the `PathBuffer` field!\n-#[repr(C)]\n-pub struct FILE_NAME_INFO {\n-    pub FileNameLength: DWORD,\n-    pub FileName: [WCHAR; 1],\n-}\n-\n #[repr(C)]\n pub struct MOUNT_POINT_REPARSE_BUFFER {\n     pub SubstituteNameOffset: c_ushort,"}, {"sha": "7fdd1f702e2fdbb80d58c1f4ddeb7e66dfbfa5bc", "filename": "library/std/src/sys/windows/io.rs", "status": "modified", "additions": 21, "deletions": 11, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c0c1925774bc07a25bd6a3f07f75abf274183cfb/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0c1925774bc07a25bd6a3f07f75abf274183cfb/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fio.rs?ref=c0c1925774bc07a25bd6a3f07f75abf274183cfb", "patch": "@@ -2,8 +2,7 @@ use crate::marker::PhantomData;\n use crate::mem::size_of;\n use crate::os::windows::io::{AsHandle, AsRawHandle, BorrowedHandle};\n use crate::slice;\n-use crate::sys::{c, Align8};\n-use core;\n+use crate::sys::c;\n use libc;\n \n #[derive(Copy, Clone)]\n@@ -125,22 +124,33 @@ unsafe fn msys_tty_on(handle: c::HANDLE) -> bool {\n         return false;\n     }\n \n-    const SIZE: usize = size_of::<c::FILE_NAME_INFO>() + c::MAX_PATH * size_of::<c::WCHAR>();\n-    let mut name_info_bytes = Align8([0u8; SIZE]);\n+    /// Mirrors [`FILE_NAME_INFO`], giving it a fixed length that we can stack\n+    /// allocate\n+    ///\n+    /// [`FILE_NAME_INFO`]: https://learn.microsoft.com/en-us/windows/win32/api/winbase/ns-winbase-file_name_info\n+    #[repr(C)]\n+    #[allow(non_snake_case)]\n+    struct FILE_NAME_INFO {\n+        FileNameLength: u32,\n+        FileName: [u16; c::MAX_PATH as usize],\n+    }\n+    let mut name_info = FILE_NAME_INFO { FileNameLength: 0, FileName: [0; c::MAX_PATH as usize] };\n+    // Safety: buffer length is fixed.\n     let res = c::GetFileInformationByHandleEx(\n         handle,\n         c::FileNameInfo,\n-        name_info_bytes.0.as_mut_ptr() as *mut libc::c_void,\n-        SIZE as u32,\n+        &mut name_info as *mut _ as *mut libc::c_void,\n+        size_of::<FILE_NAME_INFO>() as u32,\n     );\n     if res == 0 {\n         return false;\n     }\n-    let name_info: &c::FILE_NAME_INFO = &*(name_info_bytes.0.as_ptr() as *const c::FILE_NAME_INFO);\n-    let name_len = name_info.FileNameLength as usize / 2;\n-    // Offset to get the `FileName` field.\n-    let name_ptr = name_info_bytes.0.as_ptr().offset(size_of::<c::DWORD>() as isize).cast::<u16>();\n-    let s = core::slice::from_raw_parts(name_ptr, name_len);\n+\n+    // Use `get` because `FileNameLength` can be out of range.\n+    let s = match name_info.FileName.get(..name_info.FileNameLength as usize / 2) {\n+        None => return false,\n+        Some(s) => s,\n+    };\n     let name = String::from_utf16_lossy(s);\n     // Get the file name only.\n     let name = name.rsplit('\\\\').next().unwrap_or(&name);"}]}