{"sha": "9010879c0ac4256e867280421eb94ffae2cd9ad3", "node_id": "C_kwDOAAsO6NoAKDkwMTA4NzljMGFjNDI1NmU4NjcyODA0MjFlYjk0ZmZhZTJjZDlhZDM", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-04-09T03:58:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-09T03:58:41Z"}, "message": "Rollup merge of #95374 - RalfJung:assert_uninit_valid, r=Mark-Simulacrum\n\nassert_uninit_valid: ensure we detect at least arrays of uninhabited types\n\nWe can't easily extend this check to *all* arrays (Cc https://github.com/rust-lang/rust/pull/87041), but it turns out the existing check already catches arrays of uninhabited types. So let's make sure it stays that way by adding them to the test.", "tree": {"sha": "bc6a8e4a87d4d801c1316772736ad3b312cc0826", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc6a8e4a87d4d801c1316772736ad3b312cc0826"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9010879c0ac4256e867280421eb94ffae2cd9ad3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiUQRxCRBK7hj4Ov3rIwAAUY8IAJykDZsV+4O10xnO0Ytgp5eb\nCZ91l4OAv/G0h44LMFW97dVjq3cBsWOXrscD5j1/O/MoVCb+xs4eRV8Mm+ldWUbp\nBzEaOZ7P0gXRrR3ISeG2J5wiDxOb9+DeDb1TiHi5I1zKUt/JxjeuhZWzv8fGCquH\nJiOsk4cgz5Cu1VQUSQJC0KdAqz4xCPKBJFK6s6XCjjkpUn/ymObeIxS5uMTrkqWl\nHMTkXIf1hKtQIk6eRLs7FjKcCpS3ImEeqBL5DgMJUHTQkeYSGon8LKu5G8E9O4Qp\nqfxW3vNIifR//DHVnS+M6kWzVni/4SAT3lML7fA0NTUx2wcJlnHpjf2cB4SfTwU=\n=l99p\n-----END PGP SIGNATURE-----\n", "payload": "tree bc6a8e4a87d4d801c1316772736ad3b312cc0826\nparent ee8cea8ac48df14c9089720823910a5a8fddbb2c\nparent e132077db74dd6bd26566dbe3610848e3a771256\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1649476721 +0200\ncommitter GitHub <noreply@github.com> 1649476721 +0200\n\nRollup merge of #95374 - RalfJung:assert_uninit_valid, r=Mark-Simulacrum\n\nassert_uninit_valid: ensure we detect at least arrays of uninhabited types\n\nWe can't easily extend this check to *all* arrays (Cc https://github.com/rust-lang/rust/pull/87041), but it turns out the existing check already catches arrays of uninhabited types. So let's make sure it stays that way by adding them to the test.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9010879c0ac4256e867280421eb94ffae2cd9ad3", "html_url": "https://github.com/rust-lang/rust/commit/9010879c0ac4256e867280421eb94ffae2cd9ad3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9010879c0ac4256e867280421eb94ffae2cd9ad3/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee8cea8ac48df14c9089720823910a5a8fddbb2c", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee8cea8ac48df14c9089720823910a5a8fddbb2c", "html_url": "https://github.com/rust-lang/rust/commit/ee8cea8ac48df14c9089720823910a5a8fddbb2c"}, {"sha": "e132077db74dd6bd26566dbe3610848e3a771256", "url": "https://api.github.com/repos/rust-lang/rust/commits/e132077db74dd6bd26566dbe3610848e3a771256", "html_url": "https://github.com/rust-lang/rust/commit/e132077db74dd6bd26566dbe3610848e3a771256"}], "stats": {"total": 28, "additions": 28, "deletions": 0}, "files": [{"sha": "98fd13553c00959701f71f2e93177d91f2228945", "filename": "src/test/ui/intrinsics/panic-uninitialized-zeroed.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/9010879c0ac4256e867280421eb94ffae2cd9ad3/src%2Ftest%2Fui%2Fintrinsics%2Fpanic-uninitialized-zeroed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9010879c0ac4256e867280421eb94ffae2cd9ad3/src%2Ftest%2Fui%2Fintrinsics%2Fpanic-uninitialized-zeroed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Fpanic-uninitialized-zeroed.rs?ref=9010879c0ac4256e867280421eb94ffae2cd9ad3", "patch": "@@ -104,6 +104,32 @@ fn main() {\n             \"attempted to instantiate uninhabited type `Bar`\"\n         );\n \n+        test_panic_msg(\n+            || mem::uninitialized::<[Foo; 2]>(),\n+            \"attempted to instantiate uninhabited type `[Foo; 2]`\"\n+        );\n+        test_panic_msg(\n+            || mem::zeroed::<[Foo; 2]>(),\n+            \"attempted to instantiate uninhabited type `[Foo; 2]`\"\n+        );\n+        test_panic_msg(\n+            || MaybeUninit::<[Foo; 2]>::uninit().assume_init(),\n+            \"attempted to instantiate uninhabited type `[Foo; 2]`\"\n+        );\n+\n+        test_panic_msg(\n+            || mem::uninitialized::<[Bar; 2]>(),\n+            \"attempted to instantiate uninhabited type `[Bar; 2]`\"\n+        );\n+        test_panic_msg(\n+            || mem::zeroed::<[Bar; 2]>(),\n+            \"attempted to instantiate uninhabited type `[Bar; 2]`\"\n+        );\n+        test_panic_msg(\n+            || MaybeUninit::<[Bar; 2]>::uninit().assume_init(),\n+            \"attempted to instantiate uninhabited type `[Bar; 2]`\"\n+        );\n+\n         // Types that do not like zero-initialziation\n         test_panic_msg(\n             || mem::uninitialized::<fn()>(),\n@@ -199,7 +225,9 @@ fn main() {\n         let _val = mem::zeroed::<OneVariant>();\n         let _val = mem::zeroed::<Option<&'static i32>>();\n         let _val = mem::zeroed::<MaybeUninit<NonNull<u32>>>();\n+        let _val = mem::zeroed::<[!; 0]>();\n         let _val = mem::uninitialized::<MaybeUninit<bool>>();\n+        let _val = mem::uninitialized::<[!; 0]>();\n \n         // These are UB because they have not been officially blessed, but we await the resolution\n         // of <https://github.com/rust-lang/unsafe-code-guidelines/issues/71> before doing"}]}