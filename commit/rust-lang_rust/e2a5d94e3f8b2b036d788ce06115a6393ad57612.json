{"sha": "e2a5d94e3f8b2b036d788ce06115a6393ad57612", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyYTVkOTRlM2Y4YjJiMDM2ZDc4OGNlMDYxMTVhNjM5M2FkNTc2MTI=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2015-05-11T21:39:22Z"}, "committer": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2015-05-11T21:39:22Z"}, "message": "Merge pull request #68 from marcusklaas/import-breaks\n\nKeep import lists on a single line when possible", "tree": {"sha": "bbbef51650fa3f20ac4de36c81b91067859b694f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bbbef51650fa3f20ac4de36c81b91067859b694f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2a5d94e3f8b2b036d788ce06115a6393ad57612", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2a5d94e3f8b2b036d788ce06115a6393ad57612", "html_url": "https://github.com/rust-lang/rust/commit/e2a5d94e3f8b2b036d788ce06115a6393ad57612", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2a5d94e3f8b2b036d788ce06115a6393ad57612/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e5b05d4438232a9ead5e5b4f96c7714359faf4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e5b05d4438232a9ead5e5b4f96c7714359faf4e", "html_url": "https://github.com/rust-lang/rust/commit/7e5b05d4438232a9ead5e5b4f96c7714359faf4e"}, {"sha": "c790d7d5507118598b7f25cc00e07217046c5f53", "url": "https://api.github.com/repos/rust-lang/rust/commits/c790d7d5507118598b7f25cc00e07217046c5f53", "html_url": "https://github.com/rust-lang/rust/commit/c790d7d5507118598b7f25cc00e07217046c5f53"}], "stats": {"total": 74, "additions": 44, "deletions": 30}, "files": [{"sha": "9968d8b531571b5452d2fed6532cc30bc8d508ed", "filename": "src/imports.rs", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e2a5d94e3f8b2b036d788ce06115a6393ad57612/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2a5d94e3f8b2b036d788ce06115a6393ad57612/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=e2a5d94e3f8b2b036d788ce06115a6393ad57612", "patch": "@@ -23,10 +23,11 @@ impl<'a> FmtVisitor<'a> {\n     // Basically just pretty prints a multi-item import.\n     pub fn rewrite_use_list(&mut self,\n                             block_indent: usize,\n-                            budget: usize, // excluding indentation\n+                            one_line_budget: usize, // excluding indentation\n+                            multi_line_budget: usize,\n                             path: &ast::Path,\n                             path_list: &[ast::PathListItem],\n-                            visibility: ast::Visibility) -> Option<String> {\n+                            visibility: ast::Visibility) -> String {\n         let path_str = pprust::path_to_string(&path);\n \n         let vis = match visibility {\n@@ -41,19 +42,25 @@ impl<'a> FmtVisitor<'a> {\n         // 2 = } + ;\n         let used_width = indent + 2;\n \n-        let remaining_budget = if used_width >= budget {\n-            return None;\n+        // Break as early as possible when we've blown our budget.\n+        let remaining_line_budget = if used_width > one_line_budget {\n+            0\n         } else {\n-            budget - used_width\n+            one_line_budget - used_width\n+        };\n+        let remaining_multi_budget = if used_width > multi_line_budget {\n+            0\n+        } else {\n+            multi_line_budget - used_width\n         };\n \n         let fmt = ListFormatting {\n             tactic: ListTactic::Mixed,\n             separator: \",\",\n             trailing_separator: SeparatorTactic::Never,\n             indent: block_indent + indent,\n-            h_width: remaining_budget,\n-            v_width: remaining_budget,\n+            h_width: remaining_line_budget,\n+            v_width: remaining_multi_budget,\n         };\n \n         // TODO handle any comments inbetween items.\n@@ -79,10 +86,10 @@ impl<'a> FmtVisitor<'a> {\n                 ast::PathListItem_::PathListMod{ .. } => None,\n             }\n         })).collect();\n-        Some(if path_str.len() == 0 {\n+        if path_str.len() == 0 {\n             format!(\"{}use {{{}}};\", vis, write_list(&items, &fmt))\n         } else {\n             format!(\"{}use {}::{{{}}};\", vis, path_str, write_list(&items, &fmt))\n-        })\n+        }\n     }\n }"}, {"sha": "06fb93f71e104d8343c960622d6338479cc8754f", "filename": "src/lists.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e2a5d94e3f8b2b036d788ce06115a6393ad57612/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2a5d94e3f8b2b036d788ce06115a6393ad57612/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=e2a5d94e3f8b2b036d788ce06115a6393ad57612", "patch": "@@ -58,18 +58,24 @@ pub fn write_list<'b>(items: &[(String, String)], formatting: &ListFormatting<'b\n     };\n     let sep_len = formatting.separator.len();\n     let total_sep_len = (sep_len + 1) * sep_count;\n-\n     let total_width = calculate_width(items);\n+    let fits_single = total_width + total_sep_len <= formatting.h_width;\n \n     // Check if we need to fallback from horizontal listing, if possible.\n     if tactic == ListTactic::HorizontalVertical {\n         debug!(\"write_list: total_width: {}, total_sep_len: {}, h_width: {}\",\n                total_width, total_sep_len, formatting.h_width);\n-        if total_width + total_sep_len > formatting.h_width {\n-            tactic = ListTactic::Vertical;\n+        tactic = if fits_single {\n+            ListTactic::Horizontal\n         } else {\n-            tactic = ListTactic::Horizontal;\n-        }\n+            ListTactic::Vertical\n+        };\n+    }\n+\n+    // Check if we can fit everything on a single line in mixed mode.\n+    // The horizontal tactic does not break after v_width columns.\n+    if tactic == ListTactic::Mixed && fits_single {\n+        tactic = ListTactic::Horizontal;\n     }\n \n     // Now that we know how we will layout, we can decide for sure if there"}, {"sha": "382dce97050d1b68a38b99c1cd550824babfdd17", "filename": "src/visitor.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e2a5d94e3f8b2b036d788ce06115a6393ad57612/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2a5d94e3f8b2b036d788ce06115a6393ad57612/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=e2a5d94e3f8b2b036d788ce06115a6393ad57612", "patch": "@@ -149,15 +149,16 @@ impl<'a, 'v> visit::Visitor<'v> for FmtVisitor<'a> {\n                 match vp.node {\n                     ast::ViewPath_::ViewPathList(ref path, ref path_list) => {\n                         let block_indent = self.block_indent;\n-                        let budget = IDEAL_WIDTH - block_indent;\n-                        if let Some(new_str) = self.rewrite_use_list(block_indent,\n-                                                                     budget,\n-                                                                     path,\n-                                                                     path_list,\n-                                                                     item.vis) {\n-                            self.changes.push_str_span(item.span, &new_str);\n-                            self.last_pos = item.span.hi;\n-                        }\n+                        let one_line_budget = MAX_WIDTH - block_indent;\n+                        let multi_line_budget = IDEAL_WIDTH - block_indent;\n+                        let new_str = self.rewrite_use_list(block_indent,\n+                                                            one_line_budget,\n+                                                            multi_line_budget,\n+                                                            path,\n+                                                            path_list,\n+                                                            item.vis);\n+                        self.changes.push_str_span(item.span, &new_str);\n+                        self.last_pos = item.span.hi;\n                     }\n                     ast::ViewPath_::ViewPathGlob(_) => {\n                         // FIXME convert to list?"}, {"sha": "9644c62dde767b2bdeb31d50bf459704806751e0", "filename": "tests/idem/imports.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e2a5d94e3f8b2b036d788ce06115a6393ad57612/tests%2Fidem%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2a5d94e3f8b2b036d788ce06115a6393ad57612/tests%2Fidem%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fidem%2Fimports.rs?ref=e2a5d94e3f8b2b036d788ce06115a6393ad57612", "patch": "@@ -1,20 +1,20 @@\n // Imports.\n \n // Long import.\n-use syntax::ast::{ItemForeignMod, ItemImpl, ItemMac, ItemMod, ItemStatic,\n-                  ItemDefaultImpl};\n+use syntax::ast::{ItemForeignMod, ItemImpl, ItemMac, ItemMod, ItemStatic, ItemDefaultImpl};\n+use exceedingly::looooooooooooooooooooooooooooooooooooooooooooooooooooooooooong::import::path::{ItemA,\n+                                                                                                ItemB};\n \n use {Foo, Bar};\n use Foo::{Bar, Baz};\n-pub use syntax::ast::{Expr_, Expr, ExprAssign, ExprCall, ExprMethodCall,\n-                      ExprPath};\n+pub use syntax::ast::{Expr_, Expr, ExprAssign, ExprCall, ExprMethodCall, ExprPath};\n \n mod Foo {\n-    pub use syntax::ast::{Expr_, ExprEval, ToExpr, ExprMethodCall, ToExprPath};\n+    pub use syntax::ast::{ItemForeignMod, ItemImpl, ItemMac, ItemMod, ItemStatic, ItemDefaultImpl};\n \n     mod Foo2 {\n-        pub use syntax::ast::{Expr_, ExprEval, ToExpr, ExprMethodCall,\n-                              ToExprPath};\n+        pub use syntax::ast::{ItemForeignMod, ItemImpl, ItemMac, ItemMod,\n+                              ItemStatic, ItemDefaultImpl};\n     }\n }\n "}]}