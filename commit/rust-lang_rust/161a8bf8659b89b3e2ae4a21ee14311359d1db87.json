{"sha": "161a8bf8659b89b3e2ae4a21ee14311359d1db87", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2MWE4YmY4NjU5Yjg5YjNlMmFlNGEyMWVlMTQzMTEzNTlkMWRiODc=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-06-09T23:06:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-09T23:06:30Z"}, "message": "Rollup merge of #73133 - doctorn:unwind-mir-validation, r=jonas-schievink\n\nEnforce unwind invariants\n\nI had a quick look at #72959. The failure message probably needs to be more detailed but I just wanted to check I got the right idea. I have no idea how to right a test for this either...\n\nr? @jonas-schievink\n\nResolves #72959 (hypothetically)", "tree": {"sha": "ab325fcf1179d330b151df5ff776b1ab87987fef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab325fcf1179d330b151df5ff776b1ab87987fef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/161a8bf8659b89b3e2ae4a21ee14311359d1db87", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe4BX3CRBK7hj4Ov3rIwAAdHIIAKb6yBZCtJnlavk66LHoxqw5\n41vE/tcitOuy82FTa+uhq6YQmfhSsSuw0k1HJtnMz2aLdTb7N1G4aho5xuNAC0nQ\npFV9ZabMhQj+o9MTlTXdtmf6FEyhnd96GauJJFADjqJFDO8E6MQPbeu2aCxc1Glh\nv2J2+I+MKLNVPULo/ZtctmoGZvQ6GbjIFNzzLwRRYg0ZCXtYA54ebuWnVRyo1EOB\n7L7+PUUQaIeQ8mys+V4+BRlg8BAf6l+SmbrfSge0aKX07Xh6hwRC1qUAQl2alUq9\n62xCkAfmmpJ86eE2Txc5BsV/JloMbfQ7gkjFSN+vGYZwc5FaYdnKPMQj4TJTSWI=\n=u8XW\n-----END PGP SIGNATURE-----\n", "payload": "tree ab325fcf1179d330b151df5ff776b1ab87987fef\nparent 4ac3efa96e85b29c83ef3439230afe4150542ea8\nparent 9495ee21b740fc1a8bcec651c5f2135806a71b03\nauthor Dylan DPC <dylan.dpc@gmail.com> 1591743990 +0200\ncommitter GitHub <noreply@github.com> 1591743990 +0200\n\nRollup merge of #73133 - doctorn:unwind-mir-validation, r=jonas-schievink\n\nEnforce unwind invariants\n\nI had a quick look at #72959. The failure message probably needs to be more detailed but I just wanted to check I got the right idea. I have no idea how to right a test for this either...\n\nr? @jonas-schievink\n\nResolves #72959 (hypothetically)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/161a8bf8659b89b3e2ae4a21ee14311359d1db87", "html_url": "https://github.com/rust-lang/rust/commit/161a8bf8659b89b3e2ae4a21ee14311359d1db87", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/161a8bf8659b89b3e2ae4a21ee14311359d1db87/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ac3efa96e85b29c83ef3439230afe4150542ea8", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ac3efa96e85b29c83ef3439230afe4150542ea8", "html_url": "https://github.com/rust-lang/rust/commit/4ac3efa96e85b29c83ef3439230afe4150542ea8"}, {"sha": "9495ee21b740fc1a8bcec651c5f2135806a71b03", "url": "https://api.github.com/repos/rust-lang/rust/commits/9495ee21b740fc1a8bcec651c5f2135806a71b03", "html_url": "https://github.com/rust-lang/rust/commit/9495ee21b740fc1a8bcec651c5f2135806a71b03"}], "stats": {"total": 67, "additions": 48, "deletions": 19}, "files": [{"sha": "8150c328316cbb3d9faceeb47064f5bb288d1f52", "filename": "src/librustc_mir/transform/validate.rs", "status": "modified", "additions": 48, "deletions": 19, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/161a8bf8659b89b3e2ae4a21ee14311359d1db87/src%2Flibrustc_mir%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161a8bf8659b89b3e2ae4a21ee14311359d1db87/src%2Flibrustc_mir%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fvalidate.rs?ref=161a8bf8659b89b3e2ae4a21ee14311359d1db87", "patch": "@@ -11,6 +11,12 @@ use rustc_middle::{\n };\n use rustc_span::def_id::DefId;\n \n+#[derive(Copy, Clone, Debug)]\n+enum EdgeKind {\n+    Unwind,\n+    Normal,\n+}\n+\n pub struct Validator {\n     /// Describes at which point in the pipeline this validation is happening.\n     pub when: String,\n@@ -49,8 +55,31 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         );\n     }\n \n-    fn check_bb(&self, location: Location, bb: BasicBlock) {\n-        if self.body.basic_blocks().get(bb).is_none() {\n+    fn check_edge(&self, location: Location, bb: BasicBlock, edge_kind: EdgeKind) {\n+        if let Some(bb) = self.body.basic_blocks().get(bb) {\n+            let src = self.body.basic_blocks().get(location.block).unwrap();\n+            match (src.is_cleanup, bb.is_cleanup, edge_kind) {\n+                // Non-cleanup blocks can jump to non-cleanup blocks along non-unwind edges\n+                (false, false, EdgeKind::Normal)\n+                // Non-cleanup blocks can jump to cleanup blocks along unwind edges\n+                | (false, true, EdgeKind::Unwind)\n+                // Cleanup blocks can jump to cleanup blocks along non-unwind edges\n+                | (true, true, EdgeKind::Normal) => {}\n+                // All other jumps are invalid\n+                _ => {\n+                    self.fail(\n+                        location,\n+                        format!(\n+                            \"{:?} edge to {:?} violates unwind invariants (cleanup {:?} -> {:?})\",\n+                            edge_kind,\n+                            bb,\n+                            src.is_cleanup,\n+                            bb.is_cleanup,\n+                        )\n+                    )\n+                }\n+            }\n+        } else {\n             self.fail(location, format!(\"encountered jump to invalid basic block {:?}\", bb))\n         }\n     }\n@@ -92,7 +121,7 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n     fn visit_terminator(&mut self, terminator: &Terminator<'tcx>, location: Location) {\n         match &terminator.kind {\n             TerminatorKind::Goto { target } => {\n-                self.check_bb(location, *target);\n+                self.check_edge(location, *target, EdgeKind::Normal);\n             }\n             TerminatorKind::SwitchInt { targets, values, .. } => {\n                 if targets.len() != values.len() + 1 {\n@@ -106,19 +135,19 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n                     );\n                 }\n                 for target in targets {\n-                    self.check_bb(location, *target);\n+                    self.check_edge(location, *target, EdgeKind::Normal);\n                 }\n             }\n             TerminatorKind::Drop { target, unwind, .. } => {\n-                self.check_bb(location, *target);\n+                self.check_edge(location, *target, EdgeKind::Normal);\n                 if let Some(unwind) = unwind {\n-                    self.check_bb(location, *unwind);\n+                    self.check_edge(location, *unwind, EdgeKind::Unwind);\n                 }\n             }\n             TerminatorKind::DropAndReplace { target, unwind, .. } => {\n-                self.check_bb(location, *target);\n+                self.check_edge(location, *target, EdgeKind::Normal);\n                 if let Some(unwind) = unwind {\n-                    self.check_bb(location, *unwind);\n+                    self.check_edge(location, *unwind, EdgeKind::Unwind);\n                 }\n             }\n             TerminatorKind::Call { func, destination, cleanup, .. } => {\n@@ -131,10 +160,10 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n                     ),\n                 }\n                 if let Some((_, target)) = destination {\n-                    self.check_bb(location, *target);\n+                    self.check_edge(location, *target, EdgeKind::Normal);\n                 }\n                 if let Some(cleanup) = cleanup {\n-                    self.check_bb(location, *cleanup);\n+                    self.check_edge(location, *cleanup, EdgeKind::Unwind);\n                 }\n             }\n             TerminatorKind::Assert { cond, target, cleanup, .. } => {\n@@ -148,30 +177,30 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n                         ),\n                     );\n                 }\n-                self.check_bb(location, *target);\n+                self.check_edge(location, *target, EdgeKind::Normal);\n                 if let Some(cleanup) = cleanup {\n-                    self.check_bb(location, *cleanup);\n+                    self.check_edge(location, *cleanup, EdgeKind::Unwind);\n                 }\n             }\n             TerminatorKind::Yield { resume, drop, .. } => {\n-                self.check_bb(location, *resume);\n+                self.check_edge(location, *resume, EdgeKind::Normal);\n                 if let Some(drop) = drop {\n-                    self.check_bb(location, *drop);\n+                    self.check_edge(location, *drop, EdgeKind::Normal);\n                 }\n             }\n             TerminatorKind::FalseEdge { real_target, imaginary_target } => {\n-                self.check_bb(location, *real_target);\n-                self.check_bb(location, *imaginary_target);\n+                self.check_edge(location, *real_target, EdgeKind::Normal);\n+                self.check_edge(location, *imaginary_target, EdgeKind::Normal);\n             }\n             TerminatorKind::FalseUnwind { real_target, unwind } => {\n-                self.check_bb(location, *real_target);\n+                self.check_edge(location, *real_target, EdgeKind::Normal);\n                 if let Some(unwind) = unwind {\n-                    self.check_bb(location, *unwind);\n+                    self.check_edge(location, *unwind, EdgeKind::Unwind);\n                 }\n             }\n             TerminatorKind::InlineAsm { destination, .. } => {\n                 if let Some(destination) = destination {\n-                    self.check_bb(location, *destination);\n+                    self.check_edge(location, *destination, EdgeKind::Normal);\n                 }\n             }\n             // Nothing to validate for these."}]}