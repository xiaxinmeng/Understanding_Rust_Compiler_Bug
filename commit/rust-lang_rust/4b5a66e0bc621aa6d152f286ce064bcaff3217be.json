{"sha": "4b5a66e0bc621aa6d152f286ce064bcaff3217be", "node_id": "C_kwDOAAsO6NoAKDRiNWE2NmUwYmM2MjFhYTZkMTUyZjI4NmNlMDY0YmNhZmYzMjE3YmU", "commit": {"author": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2022-09-09T06:27:25Z"}, "committer": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2022-09-12T17:43:07Z"}, "message": "Add tests for type inference for generators", "tree": {"sha": "7ff4baf8c770233b9182f4c4ffb79eb5d1d9aa40", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ff4baf8c770233b9182f4c4ffb79eb5d1d9aa40"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b5a66e0bc621aa6d152f286ce064bcaff3217be", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEkSbsQIURluxz4rzf4laYqTBYYXEFAmMfb6sACgkQ4laYqTBY\nYXEL8w/+LJUTsSPepKycNrwgxbZEhj0CkDfXaVSzbuZEP/9hGtYuerd6/r6Tu+/H\nDyyKepBTwuWL92cGanDsYWu0KlaC2Pn3GDQwfeNkECsHZ1sON+9SCip01uQQY0MI\nW+4+FXo3HzxFMi2RUHcSq4cfy9Yxd6z2+yTNPSTz5zphLJwIJKtUrHSOyeYqQTic\nqDb3La+Kc1Or5oRyBnYJYJ4ruHfAnK1QSQY2jwywFtB47FBSlD5gLkXsppZ9uC47\nK5OYmnQGEXmWbahnpX0/opWfnmgyK8pmohzi6DUddQAcfsIi1BjEkOCG0c0nU2Md\nbxAxoFj0lH68T4jY3VZznZAuBiwH8Krvoi15jFIHMTHosWWjA+btN+gTjU9NRDcb\ncZF6f7a2vY9zgG2sWxKCxh1fc4HOhgHu9CgWSse7sNnfrFEols2I4Ek/uFJCA30f\nbBTkeQTpQtH/mBbWYBRrs7vNMI/iO48XLHCbGxRT7SdxHGktUfXoxdCwQAAu2Ztv\nHcOiSJbiRUMqtUAYevOaAGth0TdVtPtdk6Ww/P8kWvjtAWZP+qKiRzPY/sMjIYZe\nBb7jerYINdEce3Dka30Dwi+a7G+TZ8Sr5jkFAwHwfjvl4QfiTCS22086gxFSsVBB\n6FyDoGeeR9k9tsMLCi8QskkMldbQ3gX117d5968JOyWYSEJOaSo=\n=WcQA\n-----END PGP SIGNATURE-----", "payload": "tree 7ff4baf8c770233b9182f4c4ffb79eb5d1d9aa40\nparent 447596cccccf7ba47d93fe447d31717a8936601e\nauthor Ryo Yoshida <low.ryoshida@gmail.com> 1662704845 +0900\ncommitter Ryo Yoshida <low.ryoshida@gmail.com> 1663004587 +0900\n\nAdd tests for type inference for generators\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b5a66e0bc621aa6d152f286ce064bcaff3217be", "html_url": "https://github.com/rust-lang/rust/commit/4b5a66e0bc621aa6d152f286ce064bcaff3217be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b5a66e0bc621aa6d152f286ce064bcaff3217be/comments", "author": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "447596cccccf7ba47d93fe447d31717a8936601e", "url": "https://api.github.com/repos/rust-lang/rust/commits/447596cccccf7ba47d93fe447d31717a8936601e", "html_url": "https://github.com/rust-lang/rust/commit/447596cccccf7ba47d93fe447d31717a8936601e"}], "stats": {"total": 148, "additions": 148, "deletions": 0}, "files": [{"sha": "d301595bcd98a5ac3f29fda2bc5626cf8e546a8c", "filename": "crates/hir-ty/src/tests/coercion.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4b5a66e0bc621aa6d152f286ce064bcaff3217be/crates%2Fhir-ty%2Fsrc%2Ftests%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b5a66e0bc621aa6d152f286ce064bcaff3217be/crates%2Fhir-ty%2Fsrc%2Ftests%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests%2Fcoercion.rs?ref=4b5a66e0bc621aa6d152f286ce064bcaff3217be", "patch": "@@ -294,6 +294,24 @@ fn foo() {\n     );\n }\n \n+#[test]\n+fn generator_yield_return_coerce() {\n+    check_no_mismatches(\n+        r#\"\n+fn test() {\n+    let g = || {\n+        yield &1u32;\n+        yield &&1u32;\n+        if true {\n+            return &1u32;\n+        }\n+        &&1u32\n+    };\n+}\n+        \"#,\n+    );\n+}\n+\n #[test]\n fn assign_coerce() {\n     check_no_mismatches("}, {"sha": "e6ff0762caa504ab4490de987eb88a762223969a", "filename": "crates/hir-ty/src/tests/simple.rs", "status": "modified", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/4b5a66e0bc621aa6d152f286ce064bcaff3217be/crates%2Fhir-ty%2Fsrc%2Ftests%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b5a66e0bc621aa6d152f286ce064bcaff3217be/crates%2Fhir-ty%2Fsrc%2Ftests%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests%2Fsimple.rs?ref=4b5a66e0bc621aa6d152f286ce064bcaff3217be", "patch": "@@ -1917,6 +1917,88 @@ fn closure_return_inferred() {\n     );\n }\n \n+#[test]\n+fn generator_types_inferred() {\n+    check_infer(\n+        r#\"\n+//- minicore: generator, deref\n+use core::ops::{Generator, GeneratorState};\n+use core::pin::Pin;\n+\n+fn f(v: i64) {}\n+fn test() {\n+    let mut g = |r| {\n+        let a = yield 0;\n+        let a = yield 1;\n+        let a = yield 2;\n+        \"return value\"\n+    };\n+\n+    match Pin::new(&mut g).resume(0usize) {\n+        GeneratorState::Yielded(y) => { f(y); }\n+        GeneratorState::Complete(r) => {}\n+    }\n+}\n+        \"#,\n+        expect![[r#\"\n+            70..71 'v': i64\n+            78..80 '{}': ()\n+            91..362 '{     ...   } }': ()\n+            101..106 'mut g': {generator}\n+            109..218 '|r| { ...     }': {generator}\n+            110..111 'r': usize\n+            113..218 '{     ...     }': &str\n+            127..128 'a': usize\n+            131..138 'yield 0': usize\n+            137..138 '0': i64\n+            152..153 'a': usize\n+            156..163 'yield 1': usize\n+            162..163 '1': i64\n+            177..178 'a': usize\n+            181..188 'yield 2': usize\n+            187..188 '2': i64\n+            198..212 '\"return value\"': &str\n+            225..360 'match ...     }': ()\n+            231..239 'Pin::new': fn new<&mut {generator}>(&mut {generator}) -> Pin<&mut {generator}>\n+            231..247 'Pin::n...mut g)': Pin<&mut {generator}>\n+            231..262 'Pin::n...usize)': GeneratorState<i64, &str>\n+            240..246 '&mut g': &mut {generator}\n+            245..246 'g': {generator}\n+            255..261 '0usize': usize\n+            273..299 'Genera...ded(y)': GeneratorState<i64, &str>\n+            297..298 'y': i64\n+            303..312 '{ f(y); }': ()\n+            305..306 'f': fn f(i64)\n+            305..309 'f(y)': ()\n+            307..308 'y': i64\n+            321..348 'Genera...ete(r)': GeneratorState<i64, &str>\n+            346..347 'r': &str\n+            352..354 '{}': ()\n+        \"#]],\n+    );\n+}\n+\n+#[test]\n+fn generator_resume_yield_return_unit() {\n+    check_no_mismatches(\n+        r#\"\n+//- minicore: generator, deref\n+use core::ops::{Generator, GeneratorState};\n+use core::pin::Pin;\n+fn test() {\n+    let mut g = || {\n+        let () = yield;\n+    };\n+\n+    match Pin::new(&mut g).resume(()) {\n+        GeneratorState::Yielded(()) => {}\n+        GeneratorState::Complete(()) => {}\n+    }\n+}\n+        \"#,\n+    );\n+}\n+\n #[test]\n fn fn_pointer_return() {\n     check_infer("}, {"sha": "10386b5b7bcdd41e033144c705702b71d3dd27a5", "filename": "crates/test-utils/src/minicore.rs", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/4b5a66e0bc621aa6d152f286ce064bcaff3217be/crates%2Ftest-utils%2Fsrc%2Fminicore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b5a66e0bc621aa6d152f286ce064bcaff3217be/crates%2Ftest-utils%2Fsrc%2Fminicore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest-utils%2Fsrc%2Fminicore.rs?ref=4b5a66e0bc621aa6d152f286ce064bcaff3217be", "patch": "@@ -37,6 +37,7 @@\n //!     add:\n //!     as_ref: sized\n //!     drop:\n+//!     generator: pin\n \n pub mod marker {\n     // region:sized\n@@ -182,6 +183,19 @@ pub mod ops {\n             type Target: ?Sized;\n             fn deref(&self) -> &Self::Target;\n         }\n+\n+        impl<T: ?Sized> Deref for &T {\n+            type Target = T;\n+            fn deref(&self) -> &T {\n+                loop {}\n+            }\n+        }\n+        impl<T: ?Sized> Deref for &mut T {\n+            type Target = T;\n+            fn deref(&self) -> &T {\n+                loop {}\n+            }\n+        }\n         // region:deref_mut\n         #[lang = \"deref_mut\"]\n         pub trait DerefMut: Deref {\n@@ -347,6 +361,27 @@ pub mod ops {\n         fn add(self, rhs: Rhs) -> Self::Output;\n     }\n     // endregion:add\n+\n+    // region:generator\n+    mod generator {\n+        use crate::pin::Pin;\n+\n+        #[lang = \"generator\"]\n+        pub trait Generator<R = ()> {\n+            type Yield;\n+            #[lang = \"generator_return\"]\n+            type Return;\n+            fn resume(self: Pin<&mut Self>, arg: R) -> GeneratorState<Self::Yield, Self::Return>;\n+        }\n+\n+        #[lang = \"generator_state\"]\n+        pub enum GeneratorState<Y, R> {\n+            Yielded(Y),\n+            Complete(R),\n+        }\n+    }\n+    pub use self::generator::{Generator, GeneratorState};\n+    // endregion:generator\n }\n \n // region:eq\n@@ -455,6 +490,19 @@ pub mod pin {\n     pub struct Pin<P> {\n         pointer: P,\n     }\n+    impl<P> Pin<P> {\n+        pub fn new(pointer: P) -> Pin<P> {\n+            loop {}\n+        }\n+    }\n+    // region:deref\n+    impl<P: crate::ops::Deref> crate::ops::Deref for Pin<P> {\n+        type Target = P::Target;\n+        fn deref(&self) -> &P::Target {\n+            loop {}\n+        }\n+    }\n+    // endregion:deref\n }\n // endregion:pin\n "}]}