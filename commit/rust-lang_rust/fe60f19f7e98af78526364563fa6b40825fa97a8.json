{"sha": "fe60f19f7e98af78526364563fa6b40825fa97a8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlNjBmMTlmN2U5OGFmNzg1MjYzNjQ1NjNmYTZiNDA4MjVmYTk3YTg=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2021-03-01T21:02:09Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2021-03-25T22:05:30Z"}, "message": "Ban custom inner attributes in expressions and statements", "tree": {"sha": "2b79dd288ff1ca09f5fce99a1a9e47b2d1c38f88", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b79dd288ff1ca09f5fce99a1a9e47b2d1c38f88"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe60f19f7e98af78526364563fa6b40825fa97a8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAmBdCSsACgkQtAh+UQ6Y\nsWRIug/9HqYAx5j7yG5JVNopndge9dhsslUT86T/bufh6vlcIpj5dRbwbXA71QoH\nkt9ZlOofvEltka12rV5rL4tkEAO5ZQgfZG3FSrvv9ppkFlBel9QKyL+P8rQVq59d\njgeefD19A3Lk9a9KM36Cq+fJ30YeNjCaLiug4XJ0jfW3qYy8v61ioLxiFkLzeFOG\nB6zGjbLLGIcsgVyYZE6QTE78EdCo/6YW2HbnitltN+NiPdenxHkDrzj7CIzYeAdC\njB4gUxu7ZxlrrEcn5rpZr232qoIplcNYZkJ3NzqCQy9o3BI3tinR0Y+fVMJySocU\nGgGpnDJjgNRP3XOSrfC9xnLOVR8wgS6qfz3IYxSUIZ/6hebtqts24kNl1lh7L/PE\ntO/UEYx1+DpXIm/XOxR9aF4p4EkpdprHedQskJDiQQNsoTFKK6NJUkHlCIM63bPA\n7hwr8q3ZshsHdVLIlrO2i0lYqDJpCefuGAzDTtMvmO8KfSkj0xTEzucCqwWgzjyW\nksqFUGmUbGR+z44zTEEZhA/aIv2+xBgEdhrN2Y9ZOoFkkQI13Xf4OoZ5SXZ4jk0o\ny3KS+Nld0CHNKs5qli8Zp/9po+Nl0Bgmi6MGGdvHfdl2agSnhvahnQFXu0l5SbTt\nqBfh5AsxcLd7qkm5TzxeNVR1DuF7s55bKWiZTBQ5jJaz0pUNc9Y=\n=9T0+\n-----END PGP SIGNATURE-----", "payload": "tree 2b79dd288ff1ca09f5fce99a1a9e47b2d1c38f88\nparent cb473c2c5b72289470fa4de00474b7239013f11f\nauthor Aaron Hill <aa1ronham@gmail.com> 1614632529 -0500\ncommitter Aaron Hill <aa1ronham@gmail.com> 1616709930 -0400\n\nBan custom inner attributes in expressions and statements\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe60f19f7e98af78526364563fa6b40825fa97a8", "html_url": "https://github.com/rust-lang/rust/commit/fe60f19f7e98af78526364563fa6b40825fa97a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe60f19f7e98af78526364563fa6b40825fa97a8/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb473c2c5b72289470fa4de00474b7239013f11f", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb473c2c5b72289470fa4de00474b7239013f11f", "html_url": "https://github.com/rust-lang/rust/commit/cb473c2c5b72289470fa4de00474b7239013f11f"}], "stats": {"total": 396, "additions": 240, "deletions": 156}, "files": [{"sha": "470788a972aa35b27d810de807b612da584b476d", "filename": "compiler/rustc_expand/src/expand.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/fe60f19f7e98af78526364563fa6b40825fa97a8/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe60f19f7e98af78526364563fa6b40825fa97a8/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs?ref=fe60f19f7e98af78526364563fa6b40825fa97a8", "patch": "@@ -206,30 +206,36 @@ ast_fragments! {\n     }\n }\n \n+pub enum SupportsMacroExpansion {\n+    No,\n+    Yes { supports_inner_attrs: bool },\n+}\n+\n impl AstFragmentKind {\n     crate fn dummy(self, span: Span) -> AstFragment {\n         self.make_from(DummyResult::any(span)).expect(\"couldn't create a dummy AST fragment\")\n     }\n \n-    /// Fragment supports macro expansion and not just inert attributes, `cfg` and `cfg_attr`.\n-    pub fn supports_macro_expansion(self) -> bool {\n+    pub fn supports_macro_expansion(self) -> SupportsMacroExpansion {\n         match self {\n             AstFragmentKind::OptExpr\n             | AstFragmentKind::Expr\n-            | AstFragmentKind::Pat\n-            | AstFragmentKind::Ty\n             | AstFragmentKind::Stmts\n-            | AstFragmentKind::Items\n+            | AstFragmentKind::Ty\n+            | AstFragmentKind::Pat => SupportsMacroExpansion::Yes { supports_inner_attrs: false },\n+            AstFragmentKind::Items\n             | AstFragmentKind::TraitItems\n             | AstFragmentKind::ImplItems\n-            | AstFragmentKind::ForeignItems => true,\n+            | AstFragmentKind::ForeignItems => {\n+                SupportsMacroExpansion::Yes { supports_inner_attrs: true }\n+            }\n             AstFragmentKind::Arms\n             | AstFragmentKind::Fields\n             | AstFragmentKind::FieldPats\n             | AstFragmentKind::GenericParams\n             | AstFragmentKind::Params\n             | AstFragmentKind::StructFields\n-            | AstFragmentKind::Variants => false,\n+            | AstFragmentKind::Variants => SupportsMacroExpansion::No,\n         }\n     }\n "}, {"sha": "2efce1e1984f3df2cfb49c7958ca1d06436f1cef", "filename": "compiler/rustc_resolve/src/macros.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/fe60f19f7e98af78526364563fa6b40825fa97a8/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe60f19f7e98af78526364563fa6b40825fa97a8/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs?ref=fe60f19f7e98af78526364563fa6b40825fa97a8", "patch": "@@ -17,7 +17,7 @@ use rustc_errors::struct_span_err;\n use rustc_expand::base::Annotatable;\n use rustc_expand::base::{Indeterminate, ResolverExpand, SyntaxExtension, SyntaxExtensionKind};\n use rustc_expand::compile_declarative_macro;\n-use rustc_expand::expand::{AstFragment, Invocation, InvocationKind};\n+use rustc_expand::expand::{AstFragment, Invocation, InvocationKind, SupportsMacroExpansion};\n use rustc_feature::is_builtin_attr_name;\n use rustc_hir::def::{self, DefKind, NonMacroAttrKind};\n use rustc_hir::def_id;\n@@ -278,12 +278,12 @@ impl<'a> ResolverExpand for Resolver<'a> {\n \n         // Derives are not included when `invocations` are collected, so we have to add them here.\n         let parent_scope = &ParentScope { derives, ..parent_scope };\n-        let require_inert = !invoc.fragment_kind.supports_macro_expansion();\n+        let supports_macro_expansion = invoc.fragment_kind.supports_macro_expansion();\n         let node_id = self.lint_node_id(eager_expansion_root);\n         let (ext, res) = self.smart_resolve_macro_path(\n             path,\n             kind,\n-            require_inert,\n+            supports_macro_expansion,\n             inner_attr,\n             parent_scope,\n             node_id,\n@@ -457,7 +457,7 @@ impl<'a> Resolver<'a> {\n         &mut self,\n         path: &ast::Path,\n         kind: MacroKind,\n-        require_inert: bool,\n+        supports_macro_expansion: SupportsMacroExpansion,\n         inner_attr: bool,\n         parent_scope: &ParentScope<'a>,\n         node_id: NodeId,\n@@ -505,8 +505,17 @@ impl<'a> Resolver<'a> {\n \n         let unexpected_res = if ext.macro_kind() != kind {\n             Some((kind.article(), kind.descr_expected()))\n-        } else if require_inert && matches!(res, Res::Def(..)) {\n-            Some((\"a\", \"non-macro attribute\"))\n+        } else if matches!(res, Res::Def(..)) {\n+            match supports_macro_expansion {\n+                SupportsMacroExpansion::No => Some((\"a\", \"non-macro attribute\")),\n+                SupportsMacroExpansion::Yes { supports_inner_attrs } => {\n+                    if inner_attr && !supports_inner_attrs {\n+                        Some((\"a\", \"non-macro inner attribute\"))\n+                    } else {\n+                        None\n+                    }\n+                }\n+            }\n         } else {\n             None\n         };"}, {"sha": "5707621f80e675dea8384773ed003586d80f7e0c", "filename": "src/test/ui/proc-macro/inner-attrs.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/fe60f19f7e98af78526364563fa6b40825fa97a8/src%2Ftest%2Fui%2Fproc-macro%2Finner-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe60f19f7e98af78526364563fa6b40825fa97a8/src%2Ftest%2Fui%2Fproc-macro%2Finner-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Finner-attrs.rs?ref=fe60f19f7e98af78526364563fa6b40825fa97a8", "patch": "@@ -1,10 +1,10 @@\n-// check-pass\n // compile-flags: -Z span-debug --error-format human\n // aux-build:test-macros.rs\n \n #![feature(custom_inner_attributes)]\n #![feature(proc_macro_hygiene)]\n #![feature(stmt_expr_attributes)]\n+#![feature(rustc_attrs)]\n \n #![no_std] // Don't load unnecessary hygiene information from std\n extern crate std;\n@@ -25,17 +25,34 @@ struct MyStruct {\n \n fn bar() {\n     (#![print_target_and_args(fifth)] 1, 2);\n+    //~^ ERROR expected non-macro inner attribute, found attribute macro\n+\n+    #[print_target_and_args(tuple_attrs)] (\n+        #![cfg_attr(FALSE, rustc_dummy)]\n+        3, 4, {\n+            #![cfg_attr(not(FALSE), rustc_dummy(innermost))]\n+            5\n+        }\n+    );\n+\n+    #[print_target_and_args(array_attrs)] [\n+        #![rustc_dummy(inner)]\n+        true; 0\n+    ];\n \n     [#![print_target_and_args(sixth)] 1 , 2];\n+    //~^ ERROR expected non-macro inner attribute, found attribute macro\n     [#![print_target_and_args(seventh)] true ; 5];\n-\n+    //~^ ERROR expected non-macro inner attribute, found attribute macro\n \n     match 0 {\n         #![print_target_and_args(eighth)]\n+        //~^ ERROR expected non-macro inner attribute, found attribute macro\n         _ => {}\n     }\n \n     MyStruct { #![print_target_and_args(ninth)] field: true };\n+    //~^ ERROR expected non-macro inner attribute, found attribute macro\n }\n \n extern {"}, {"sha": "db774cbfb8fc34e2b289f9b8df47bf541566032b", "filename": "src/test/ui/proc-macro/inner-attrs.stderr", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/fe60f19f7e98af78526364563fa6b40825fa97a8/src%2Ftest%2Fui%2Fproc-macro%2Finner-attrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fe60f19f7e98af78526364563fa6b40825fa97a8/src%2Ftest%2Fui%2Fproc-macro%2Finner-attrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Finner-attrs.stderr?ref=fe60f19f7e98af78526364563fa6b40825fa97a8", "patch": "@@ -0,0 +1,32 @@\n+error: expected non-macro inner attribute, found attribute macro `print_target_and_args`\n+  --> $DIR/inner-attrs.rs:27:9\n+   |\n+LL |     (#![print_target_and_args(fifth)] 1, 2);\n+   |         ^^^^^^^^^^^^^^^^^^^^^ not a non-macro inner attribute\n+\n+error: expected non-macro inner attribute, found attribute macro `print_target_and_args`\n+  --> $DIR/inner-attrs.rs:43:9\n+   |\n+LL |     [#![print_target_and_args(sixth)] 1 , 2];\n+   |         ^^^^^^^^^^^^^^^^^^^^^ not a non-macro inner attribute\n+\n+error: expected non-macro inner attribute, found attribute macro `print_target_and_args`\n+  --> $DIR/inner-attrs.rs:45:9\n+   |\n+LL |     [#![print_target_and_args(seventh)] true ; 5];\n+   |         ^^^^^^^^^^^^^^^^^^^^^ not a non-macro inner attribute\n+\n+error: expected non-macro inner attribute, found attribute macro `print_target_and_args`\n+  --> $DIR/inner-attrs.rs:49:12\n+   |\n+LL |         #![print_target_and_args(eighth)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^ not a non-macro inner attribute\n+\n+error: expected non-macro inner attribute, found attribute macro `print_target_and_args`\n+  --> $DIR/inner-attrs.rs:54:19\n+   |\n+LL |     MyStruct { #![print_target_and_args(ninth)] field: true };\n+   |                   ^^^^^^^^^^^^^^^^^^^^^ not a non-macro inner attribute\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "ae04544e53356e390f220b80bb6b5c2354f7b175", "filename": "src/test/ui/proc-macro/inner-attrs.stdout", "status": "modified", "additions": 161, "deletions": 141, "changes": 302, "blob_url": "https://github.com/rust-lang/rust/blob/fe60f19f7e98af78526364563fa6b40825fa97a8/src%2Ftest%2Fui%2Fproc-macro%2Finner-attrs.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/fe60f19f7e98af78526364563fa6b40825fa97a8/src%2Ftest%2Fui%2Fproc-macro%2Finner-attrs.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Finner-attrs.stdout?ref=fe60f19f7e98af78526364563fa6b40825fa97a8", "patch": "@@ -290,231 +290,251 @@ PRINT-ATTR INPUT (DEBUG): TokenStream [\n         span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n     },\n ]\n-PRINT-ATTR_ARGS INPUT (DISPLAY): fifth\n+PRINT-ATTR_ARGS INPUT (DISPLAY): tuple_attrs\n PRINT-ATTR_ARGS INPUT (DEBUG): TokenStream [\n     Ident {\n-        ident: \"fifth\",\n-        span: $DIR/inner-attrs.rs:27:31: 27:36 (#0),\n+        ident: \"tuple_attrs\",\n+        span: $DIR/inner-attrs.rs:30:29: 30:40 (#0),\n     },\n ]\n-PRINT-ATTR INPUT (DISPLAY): (1, 2) ;\n+PRINT-ATTR INPUT (DISPLAY): (# ! [cfg_attr(FALSE, rustc_dummy)] 3, 4,\n+ { # ! [cfg_attr(not(FALSE), rustc_dummy(innermost))] 5 }) ;\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Group {\n         delimiter: Parenthesis,\n         stream: TokenStream [\n-            Literal {\n-                kind: Integer,\n-                symbol: \"1\",\n-                suffix: None,\n-                span: $DIR/inner-attrs.rs:27:5: 27:45 (#0),\n+            Punct {\n+                ch: '#',\n+                spacing: Joint,\n+                span: $DIR/inner-attrs.rs:31:9: 31:10 (#0),\n             },\n             Punct {\n-                ch: ',',\n+                ch: '!',\n                 spacing: Alone,\n-                span: $DIR/inner-attrs.rs:27:5: 27:45 (#0),\n+                span: $DIR/inner-attrs.rs:31:10: 31:11 (#0),\n             },\n-            Literal {\n-                kind: Integer,\n-                symbol: \"2\",\n-                suffix: None,\n-                span: $DIR/inner-attrs.rs:27:5: 27:45 (#0),\n+            Group {\n+                delimiter: Bracket,\n+                stream: TokenStream [\n+                    Ident {\n+                        ident: \"cfg_attr\",\n+                        span: $DIR/inner-attrs.rs:31:12: 31:20 (#0),\n+                    },\n+                    Group {\n+                        delimiter: Parenthesis,\n+                        stream: TokenStream [\n+                            Ident {\n+                                ident: \"FALSE\",\n+                                span: $DIR/inner-attrs.rs:31:21: 31:26 (#0),\n+                            },\n+                            Punct {\n+                                ch: ',',\n+                                spacing: Alone,\n+                                span: $DIR/inner-attrs.rs:31:26: 31:27 (#0),\n+                            },\n+                            Ident {\n+                                ident: \"rustc_dummy\",\n+                                span: $DIR/inner-attrs.rs:31:28: 31:39 (#0),\n+                            },\n+                        ],\n+                        span: $DIR/inner-attrs.rs:31:20: 31:40 (#0),\n+                    },\n+                ],\n+                span: $DIR/inner-attrs.rs:31:11: 31:41 (#0),\n             },\n-        ],\n-        span: $DIR/inner-attrs.rs:27:5: 27:45 (#0),\n-    },\n-    Punct {\n-        ch: ';',\n-        spacing: Alone,\n-        span: $DIR/inner-attrs.rs:27:5: 27:45 (#0),\n-    },\n-]\n-PRINT-ATTR_ARGS INPUT (DISPLAY): sixth\n-PRINT-ATTR_ARGS INPUT (DEBUG): TokenStream [\n-    Ident {\n-        ident: \"sixth\",\n-        span: $DIR/inner-attrs.rs:29:31: 29:36 (#0),\n-    },\n-]\n-PRINT-ATTR INPUT (DISPLAY): [1, 2] ;\n-PRINT-ATTR INPUT (DEBUG): TokenStream [\n-    Group {\n-        delimiter: Bracket,\n-        stream: TokenStream [\n             Literal {\n                 kind: Integer,\n-                symbol: \"1\",\n+                symbol: \"3\",\n                 suffix: None,\n-                span: $DIR/inner-attrs.rs:29:5: 29:46 (#0),\n+                span: $DIR/inner-attrs.rs:32:9: 32:10 (#0),\n             },\n             Punct {\n                 ch: ',',\n                 spacing: Alone,\n-                span: $DIR/inner-attrs.rs:29:5: 29:46 (#0),\n+                span: $DIR/inner-attrs.rs:32:10: 32:11 (#0),\n             },\n             Literal {\n                 kind: Integer,\n-                symbol: \"2\",\n+                symbol: \"4\",\n                 suffix: None,\n-                span: $DIR/inner-attrs.rs:29:5: 29:46 (#0),\n-            },\n-        ],\n-        span: $DIR/inner-attrs.rs:29:5: 29:46 (#0),\n-    },\n-    Punct {\n-        ch: ';',\n-        spacing: Alone,\n-        span: $DIR/inner-attrs.rs:29:5: 29:46 (#0),\n-    },\n-]\n-PRINT-ATTR_ARGS INPUT (DISPLAY): seventh\n-PRINT-ATTR_ARGS INPUT (DEBUG): TokenStream [\n-    Ident {\n-        ident: \"seventh\",\n-        span: $DIR/inner-attrs.rs:30:31: 30:38 (#0),\n-    },\n-]\n-PRINT-ATTR INPUT (DISPLAY): [true ; 5] ;\n-PRINT-ATTR INPUT (DEBUG): TokenStream [\n-    Group {\n-        delimiter: Bracket,\n-        stream: TokenStream [\n-            Ident {\n-                ident: \"true\",\n-                span: $DIR/inner-attrs.rs:30:5: 30:51 (#0),\n+                span: $DIR/inner-attrs.rs:32:12: 32:13 (#0),\n             },\n             Punct {\n-                ch: ';',\n+                ch: ',',\n                 spacing: Alone,\n-                span: $DIR/inner-attrs.rs:30:5: 30:51 (#0),\n+                span: $DIR/inner-attrs.rs:32:13: 32:14 (#0),\n             },\n-            Literal {\n-                kind: Integer,\n-                symbol: \"5\",\n-                suffix: None,\n-                span: $DIR/inner-attrs.rs:30:5: 30:51 (#0),\n+            Group {\n+                delimiter: Brace,\n+                stream: TokenStream [\n+                    Punct {\n+                        ch: '#',\n+                        spacing: Joint,\n+                        span: $DIR/inner-attrs.rs:33:13: 33:14 (#0),\n+                    },\n+                    Punct {\n+                        ch: '!',\n+                        spacing: Alone,\n+                        span: $DIR/inner-attrs.rs:33:14: 33:15 (#0),\n+                    },\n+                    Group {\n+                        delimiter: Bracket,\n+                        stream: TokenStream [\n+                            Ident {\n+                                ident: \"cfg_attr\",\n+                                span: $DIR/inner-attrs.rs:33:16: 33:24 (#0),\n+                            },\n+                            Group {\n+                                delimiter: Parenthesis,\n+                                stream: TokenStream [\n+                                    Ident {\n+                                        ident: \"not\",\n+                                        span: $DIR/inner-attrs.rs:33:25: 33:28 (#0),\n+                                    },\n+                                    Group {\n+                                        delimiter: Parenthesis,\n+                                        stream: TokenStream [\n+                                            Ident {\n+                                                ident: \"FALSE\",\n+                                                span: $DIR/inner-attrs.rs:33:29: 33:34 (#0),\n+                                            },\n+                                        ],\n+                                        span: $DIR/inner-attrs.rs:33:28: 33:35 (#0),\n+                                    },\n+                                    Punct {\n+                                        ch: ',',\n+                                        spacing: Alone,\n+                                        span: $DIR/inner-attrs.rs:33:35: 33:36 (#0),\n+                                    },\n+                                    Ident {\n+                                        ident: \"rustc_dummy\",\n+                                        span: $DIR/inner-attrs.rs:33:37: 33:48 (#0),\n+                                    },\n+                                    Group {\n+                                        delimiter: Parenthesis,\n+                                        stream: TokenStream [\n+                                            Ident {\n+                                                ident: \"innermost\",\n+                                                span: $DIR/inner-attrs.rs:33:49: 33:58 (#0),\n+                                            },\n+                                        ],\n+                                        span: $DIR/inner-attrs.rs:33:48: 33:59 (#0),\n+                                    },\n+                                ],\n+                                span: $DIR/inner-attrs.rs:33:24: 33:60 (#0),\n+                            },\n+                        ],\n+                        span: $DIR/inner-attrs.rs:33:15: 33:61 (#0),\n+                    },\n+                    Literal {\n+                        kind: Integer,\n+                        symbol: \"5\",\n+                        suffix: None,\n+                        span: $DIR/inner-attrs.rs:34:13: 34:14 (#0),\n+                    },\n+                ],\n+                span: $DIR/inner-attrs.rs:32:15: 35:10 (#0),\n             },\n         ],\n-        span: $DIR/inner-attrs.rs:30:5: 30:51 (#0),\n+        span: $DIR/inner-attrs.rs:30:43: 36:6 (#0),\n     },\n     Punct {\n         ch: ';',\n         spacing: Alone,\n-        span: $DIR/inner-attrs.rs:30:5: 30:51 (#0),\n+        span: $DIR/inner-attrs.rs:36:6: 36:7 (#0),\n     },\n ]\n-PRINT-ATTR_ARGS INPUT (DISPLAY): eighth\n+PRINT-ATTR_ARGS INPUT (DISPLAY): array_attrs\n PRINT-ATTR_ARGS INPUT (DEBUG): TokenStream [\n     Ident {\n-        ident: \"eighth\",\n-        span: $DIR/inner-attrs.rs:34:34: 34:40 (#0),\n+        ident: \"array_attrs\",\n+        span: $DIR/inner-attrs.rs:38:29: 38:40 (#0),\n     },\n ]\n-PRINT-ATTR INPUT (DISPLAY): match 0 { _ => { } }\n+PRINT-ATTR INPUT (DISPLAY): [# ! [rustc_dummy(inner)] true ; 0] ;\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n-    Ident {\n-        ident: \"match\",\n-        span: $DIR/inner-attrs.rs:33:5: 36:6 (#0),\n-    },\n-    Literal {\n-        kind: Integer,\n-        symbol: \"0\",\n-        suffix: None,\n-        span: $DIR/inner-attrs.rs:33:5: 36:6 (#0),\n-    },\n     Group {\n-        delimiter: Brace,\n+        delimiter: Bracket,\n         stream: TokenStream [\n-            Ident {\n-                ident: \"_\",\n-                span: $DIR/inner-attrs.rs:33:5: 36:6 (#0),\n-            },\n             Punct {\n-                ch: '=',\n+                ch: '#',\n                 spacing: Joint,\n-                span: $DIR/inner-attrs.rs:33:5: 36:6 (#0),\n+                span: $DIR/inner-attrs.rs:38:43: 41:7 (#0),\n             },\n             Punct {\n-                ch: '>',\n+                ch: '!',\n                 spacing: Alone,\n-                span: $DIR/inner-attrs.rs:33:5: 36:6 (#0),\n+                span: $DIR/inner-attrs.rs:38:43: 41:7 (#0),\n             },\n             Group {\n-                delimiter: Brace,\n-                stream: TokenStream [],\n-                span: $DIR/inner-attrs.rs:33:5: 36:6 (#0),\n-            },\n-        ],\n-        span: $DIR/inner-attrs.rs:33:5: 36:6 (#0),\n-    },\n-]\n-PRINT-ATTR_ARGS INPUT (DISPLAY): ninth\n-PRINT-ATTR_ARGS INPUT (DEBUG): TokenStream [\n-    Ident {\n-        ident: \"ninth\",\n-        span: $DIR/inner-attrs.rs:38:41: 38:46 (#0),\n-    },\n-]\n-PRINT-ATTR INPUT (DISPLAY): MyStruct { field : true, } ;\n-PRINT-ATTR INPUT (DEBUG): TokenStream [\n-    Ident {\n-        ident: \"MyStruct\",\n-        span: $DIR/inner-attrs.rs:38:5: 38:63 (#0),\n-    },\n-    Group {\n-        delimiter: Brace,\n-        stream: TokenStream [\n-            Ident {\n-                ident: \"field\",\n-                span: $DIR/inner-attrs.rs:38:5: 38:63 (#0),\n-            },\n-            Punct {\n-                ch: ':',\n-                spacing: Alone,\n-                span: $DIR/inner-attrs.rs:38:5: 38:63 (#0),\n+                delimiter: Bracket,\n+                stream: TokenStream [\n+                    Ident {\n+                        ident: \"rustc_dummy\",\n+                        span: $DIR/inner-attrs.rs:38:43: 41:7 (#0),\n+                    },\n+                    Group {\n+                        delimiter: Parenthesis,\n+                        stream: TokenStream [\n+                            Ident {\n+                                ident: \"inner\",\n+                                span: $DIR/inner-attrs.rs:38:43: 41:7 (#0),\n+                            },\n+                        ],\n+                        span: $DIR/inner-attrs.rs:38:43: 41:7 (#0),\n+                    },\n+                ],\n+                span: $DIR/inner-attrs.rs:38:43: 41:7 (#0),\n             },\n             Ident {\n                 ident: \"true\",\n-                span: $DIR/inner-attrs.rs:38:5: 38:63 (#0),\n+                span: $DIR/inner-attrs.rs:38:43: 41:7 (#0),\n             },\n             Punct {\n-                ch: ',',\n+                ch: ';',\n                 spacing: Alone,\n-                span: $DIR/inner-attrs.rs:38:5: 38:63 (#0),\n+                span: $DIR/inner-attrs.rs:38:43: 41:7 (#0),\n+            },\n+            Literal {\n+                kind: Integer,\n+                symbol: \"0\",\n+                suffix: None,\n+                span: $DIR/inner-attrs.rs:38:43: 41:7 (#0),\n             },\n         ],\n-        span: $DIR/inner-attrs.rs:38:5: 38:63 (#0),\n+        span: $DIR/inner-attrs.rs:38:43: 41:7 (#0),\n     },\n     Punct {\n         ch: ';',\n         spacing: Alone,\n-        span: $DIR/inner-attrs.rs:38:5: 38:63 (#0),\n+        span: $DIR/inner-attrs.rs:38:43: 41:7 (#0),\n     },\n ]\n PRINT-ATTR_ARGS INPUT (DISPLAY): tenth\n PRINT-ATTR_ARGS INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"tenth\",\n-        span: $DIR/inner-attrs.rs:43:42: 43:47 (#0),\n+        span: $DIR/inner-attrs.rs:60:42: 60:47 (#0),\n     },\n ]\n PRINT-ATTR INPUT (DISPLAY): fn weird_extern() { }\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"fn\",\n-        span: $DIR/inner-attrs.rs:42:5: 44:6 (#0),\n+        span: $DIR/inner-attrs.rs:59:5: 61:6 (#0),\n     },\n     Ident {\n         ident: \"weird_extern\",\n-        span: $DIR/inner-attrs.rs:42:5: 44:6 (#0),\n+        span: $DIR/inner-attrs.rs:59:5: 61:6 (#0),\n     },\n     Group {\n         delimiter: Parenthesis,\n         stream: TokenStream [],\n-        span: $DIR/inner-attrs.rs:42:5: 44:6 (#0),\n+        span: $DIR/inner-attrs.rs:59:5: 61:6 (#0),\n     },\n     Group {\n         delimiter: Brace,\n         stream: TokenStream [],\n-        span: $DIR/inner-attrs.rs:42:5: 44:6 (#0),\n+        span: $DIR/inner-attrs.rs:59:5: 61:6 (#0),\n     },\n ]"}]}