{"sha": "bbf41279fad5bf1604b9cf3f9575c76a00254114", "node_id": "C_kwDOAAsO6NoAKGJiZjQxMjc5ZmFkNWJmMTYwNGI5Y2YzZjk1NzVjNzZhMDAyNTQxMTQ", "commit": {"author": {"name": "Boxy", "email": "supbscripter@gmail.com", "date": "2023-05-16T18:58:54Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-06-01T18:03:59Z"}, "message": "Require that const param tys implement ConstParamTy", "tree": {"sha": "3a361e0e87f74bc4905e7f81d0f1a8be866c294d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a361e0e87f74bc4905e7f81d0f1a8be866c294d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bbf41279fad5bf1604b9cf3f9575c76a00254114", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bbf41279fad5bf1604b9cf3f9575c76a00254114", "html_url": "https://github.com/rust-lang/rust/commit/bbf41279fad5bf1604b9cf3f9575c76a00254114", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bbf41279fad5bf1604b9cf3f9575c76a00254114/comments", "author": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "642c92e63008ffb49f6ad8344e07bfa7d5b0d9bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/642c92e63008ffb49f6ad8344e07bfa7d5b0d9bb", "html_url": "https://github.com/rust-lang/rust/commit/642c92e63008ffb49f6ad8344e07bfa7d5b0d9bb"}], "stats": {"total": 96, "additions": 19, "deletions": 77}, "files": [{"sha": "5a5a405d9e7a85fbb0f2c3f3dce26cc3d35deac3", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 14, "deletions": 77, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/bbf41279fad5bf1604b9cf3f9575c76a00254114/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf41279fad5bf1604b9cf3f9575c76a00254114/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=bbf41279fad5bf1604b9cf3f9575c76a00254114", "patch": "@@ -829,83 +829,20 @@ fn check_param_wf(tcx: TyCtxt<'_>, param: &hir::GenericParam<'_>) {\n             let ty = tcx.type_of(param.def_id).subst_identity();\n \n             if tcx.features().adt_const_params {\n-                if let Some(non_structural_match_ty) =\n-                    traits::search_for_adt_const_param_violation(param.span, tcx, ty)\n-                {\n-                    // We use the same error code in both branches, because this is really the same\n-                    // issue: we just special-case the message for type parameters to make it\n-                    // clearer.\n-                    match non_structural_match_ty.kind() {\n-                        ty::Param(_) => {\n-                            // Const parameters may not have type parameters as their types,\n-                            // because we cannot be sure that the type parameter derives `PartialEq`\n-                            // and `Eq` (just implementing them is not enough for `structural_match`).\n-                            struct_span_err!(\n-                                tcx.sess,\n-                                hir_ty.span,\n-                                E0741,\n-                                \"`{ty}` is not guaranteed to `#[derive(PartialEq, Eq)]`, so may not be \\\n-                                used as the type of a const parameter\",\n-                            )\n-                            .span_label(\n-                                hir_ty.span,\n-                                format!(\"`{ty}` may not derive both `PartialEq` and `Eq`\"),\n-                            )\n-                            .note(\n-                                \"it is not currently possible to use a type parameter as the type of a \\\n-                                const parameter\",\n-                            )\n-                            .emit();\n-                        }\n-                        ty::Float(_) => {\n-                            struct_span_err!(\n-                                tcx.sess,\n-                                hir_ty.span,\n-                                E0741,\n-                                \"`{ty}` is forbidden as the type of a const generic parameter\",\n-                            )\n-                            .note(\"floats do not derive `Eq` or `Ord`, which are required for const parameters\")\n-                            .emit();\n-                        }\n-                        ty::FnPtr(_) => {\n-                            struct_span_err!(\n-                                tcx.sess,\n-                                hir_ty.span,\n-                                E0741,\n-                                \"using function pointers as const generic parameters is forbidden\",\n-                            )\n-                            .emit();\n-                        }\n-                        ty::RawPtr(_) => {\n-                            struct_span_err!(\n-                                tcx.sess,\n-                                hir_ty.span,\n-                                E0741,\n-                                \"using raw pointers as const generic parameters is forbidden\",\n-                            )\n-                            .emit();\n-                        }\n-                        _ => {\n-                            let mut diag = struct_span_err!(\n-                                tcx.sess,\n-                                hir_ty.span,\n-                                E0741,\n-                                \"`{}` must be annotated with `#[derive(PartialEq, Eq)]` to be used as \\\n-                                the type of a const parameter\",\n-                                non_structural_match_ty,\n-                            );\n-\n-                            if ty == non_structural_match_ty {\n-                                diag.span_label(\n-                                    hir_ty.span,\n-                                    format!(\"`{ty}` doesn't derive both `PartialEq` and `Eq`\"),\n-                                );\n-                            }\n-\n-                            diag.emit();\n-                        }\n-                    }\n-                }\n+                enter_wf_checking_ctxt(tcx, hir_ty.span, param.def_id, |wfcx| {\n+                    let trait_def_id =\n+                        tcx.require_lang_item(LangItem::ConstParamTy, Some(hir_ty.span));\n+                    wfcx.register_bound(\n+                        ObligationCause::new(\n+                            hir_ty.span,\n+                            param.def_id,\n+                            ObligationCauseCode::WellFormed(Some(hir_ty.span)),\n+                        ),\n+                        wfcx.param_env,\n+                        ty,\n+                        trait_def_id,\n+                    );\n+                });\n             } else {\n                 let err_ty_str;\n                 let mut is_ptr = true;"}, {"sha": "a6f792ed0e3e9e810f70ff7034c1b6eef056dd32", "filename": "library/core/src/mem/transmutability.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bbf41279fad5bf1604b9cf3f9575c76a00254114/library%2Fcore%2Fsrc%2Fmem%2Ftransmutability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf41279fad5bf1604b9cf3f9575c76a00254114/library%2Fcore%2Fsrc%2Fmem%2Ftransmutability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Ftransmutability.rs?ref=bbf41279fad5bf1604b9cf3f9575c76a00254114", "patch": "@@ -1,3 +1,5 @@\n+use crate::marker::ConstParamTy;\n+\n /// Are values of a type transmutable into values of another type?\n ///\n /// This trait is implemented on-the-fly by the compiler for types `Src` and `Self` when the bits of\n@@ -33,6 +35,9 @@ pub struct Assume {\n     pub validity: bool,\n }\n \n+#[unstable(feature = \"transmutability\", issue = \"99571\")]\n+impl ConstParamTy for Assume {}\n+\n impl Assume {\n     /// Do not assume that *you* have ensured any safety properties are met.\n     #[unstable(feature = \"transmutability\", issue = \"99571\")]"}]}