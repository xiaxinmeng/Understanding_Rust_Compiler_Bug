{"sha": "6992937002ee9217be90832569a0b37cb6980916", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5OTI5MzcwMDJlZTkyMTdiZTkwODMyNTY5YTBiMzdjYjY5ODA5MTY=", "commit": {"author": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-07-16T13:07:39Z"}, "committer": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-07-16T13:07:39Z"}, "message": "Update for hir renamings in rustc", "tree": {"sha": "cd7a6ba0b07279abcda93073001a6972768f3fe7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd7a6ba0b07279abcda93073001a6972768f3fe7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6992937002ee9217be90832569a0b37cb6980916", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6992937002ee9217be90832569a0b37cb6980916", "html_url": "https://github.com/rust-lang/rust/commit/6992937002ee9217be90832569a0b37cb6980916", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6992937002ee9217be90832569a0b37cb6980916/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e929946fdf1151736fbad530d96aeb624f8e884", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e929946fdf1151736fbad530d96aeb624f8e884", "html_url": "https://github.com/rust-lang/rust/commit/8e929946fdf1151736fbad530d96aeb624f8e884"}], "stats": {"total": 334, "additions": 181, "deletions": 153}, "files": [{"sha": "272b6c5a84dcfd04adcab71b17c1e56dbb3c5c2b", "filename": "clippy_lints/src/assign_ops.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/6992937002ee9217be90832569a0b37cb6980916/clippy_lints%2Fsrc%2Fassign_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6992937002ee9217be90832569a0b37cb6980916/clippy_lints%2Fsrc%2Fassign_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fassign_ops.rs?ref=6992937002ee9217be90832569a0b37cb6980916", "patch": "@@ -142,9 +142,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AssignOps {\n                              $cx:expr,\n                              $ty:expr,\n                              $rty:expr,\n-                             $($trait_name:ident:$full_trait_name:ident),+) => {\n+                             $($trait_name:ident),+) => {\n                                 match $op {\n-                                    $(hir::$full_trait_name => {\n+                                    $(hir::BinOpKind::$trait_name => {\n                                         let [krate, module] = crate::utils::paths::OPS_MODULE;\n                                         let path = [krate, module, concat!(stringify!($trait_name), \"Assign\")];\n                                         let trait_id = if let Some(trait_id) = get_trait_def_id($cx, &path) {\n@@ -159,7 +159,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AssignOps {\n                                         if_chain! {\n                                             if parent_impl != ast::CRATE_NODE_ID;\n                                             if let hir::map::Node::NodeItem(item) = cx.tcx.hir.get(parent_impl);\n-                                            if let hir::Item_::ItemImpl(_, _, _, _, Some(ref trait_ref), _, _) =\n+                                            if let hir::ItemKind::Impl(_, _, _, _, Some(ref trait_ref), _, _) =\n                                                 item.node;\n                                             if trait_ref.path.def.def_id() == trait_id;\n                                             then { return; }\n@@ -175,18 +175,18 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AssignOps {\n                             cx,\n                             ty,\n                             rty.into(),\n-                            Add: BinOpKind::Add,\n-                            Sub: BinOpKind::Sub,\n-                            Mul: BinOpKind::Mul,\n-                            Div: BinOpKind::Div,\n-                            Rem: BinOpKind::Rem,\n-                            And: BinOpKind::And,\n-                            Or: BinOpKind::Or,\n-                            BitAnd: BinOpKind::BitAnd,\n-                            BitOr: BinOpKind::BitOr,\n-                            BitXor: BinOpKind::BitXor,\n-                            Shr: BinOpKind::Shr,\n-                            Shl: BinOpKind::Shl\n+                            Add,\n+                            Sub,\n+                            Mul,\n+                            Div,\n+                            Rem,\n+                            And,\n+                            Or,\n+                            BitAnd,\n+                            BitOr,\n+                            BitXor,\n+                            Shr,\n+                            Shl\n                         ) {\n                             span_lint_and_then(\n                                 cx,"}, {"sha": "5d5e2f964b09556e00bbe7e02fa70d9a250abce7", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6992937002ee9217be90832569a0b37cb6980916/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6992937002ee9217be90832569a0b37cb6980916/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=6992937002ee9217be90832569a0b37cb6980916", "patch": "@@ -154,15 +154,15 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AttrPass {\n             check_attrs(cx, item.span, item.name, &item.attrs)\n         }\n         match item.node {\n-            ItemExternCrate(_) | ItemUse(_, _) => {\n+            ItemKind::ExternCrate(_) | ItemKind::Use(_, _) => {\n                 for attr in &item.attrs {\n                     if let Some(ref lint_list) = attr.meta_item_list() {\n                         match &*attr.name().as_str() {\n                             \"allow\" | \"warn\" | \"deny\" | \"forbid\" => {\n                                 // whitelist `unused_imports` and `deprecated`\n                                 for lint in lint_list {\n                                     if is_word(lint, \"unused_imports\") || is_word(lint, \"deprecated\") {\n-                                        if let ItemUse(_, _) = item.node {\n+                                        if let ItemKind::Use(_, _) = item.node {\n                                             return;\n                                         }\n                                     }\n@@ -207,7 +207,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AttrPass {\n }\n \n fn is_relevant_item(tcx: TyCtxt, item: &Item) -> bool {\n-    if let ItemFn(_, _, _, eid) = item.node {\n+    if let ItemKind::Fn(_, _, _, eid) = item.node {\n         is_relevant_expr(tcx, tcx.body_tables(eid), &tcx.hir.body(eid).value)\n     } else {\n         true"}, {"sha": "0d0eb27fb7dba6633bdd988af6e126348b207360", "filename": "clippy_lints/src/derive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6992937002ee9217be90832569a0b37cb6980916/clippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6992937002ee9217be90832569a0b37cb6980916/clippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderive.rs?ref=6992937002ee9217be90832569a0b37cb6980916", "patch": "@@ -70,7 +70,7 @@ impl LintPass for Derive {\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Derive {\n     fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item) {\n-        if let ItemImpl(_, _, _, _, Some(ref trait_ref), _, _) = item.node {\n+        if let ItemKind::Impl(_, _, _, _, Some(ref trait_ref), _, _) = item.node {\n             let ty = cx.tcx.type_of(cx.tcx.hir.local_def_id(item.id));\n             let is_automatically_derived = is_automatically_derived(&*item.attrs);\n "}, {"sha": "1ca32cf2263ed65eb8acfbeb8b5dc074d589c5b9", "filename": "clippy_lints/src/empty_enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6992937002ee9217be90832569a0b37cb6980916/clippy_lints%2Fsrc%2Fempty_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6992937002ee9217be90832569a0b37cb6980916/clippy_lints%2Fsrc%2Fempty_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fempty_enum.rs?ref=6992937002ee9217be90832569a0b37cb6980916", "patch": "@@ -34,7 +34,7 @@ impl LintPass for EmptyEnum {\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EmptyEnum {\n     fn check_item(&mut self, cx: &LateContext, item: &Item) {\n         let did = cx.tcx.hir.local_def_id(item.id);\n-        if let ItemEnum(..) = item.node {\n+        if let ItemKind::Enum(..) = item.node {\n             let ty = cx.tcx.type_of(did);\n             let adt = ty.ty_adt_def()\n                 .expect(\"already checked whether this is an enum\");"}, {"sha": "6584bc6ffa95adeb6a13fa3fa829f0d9dc99057f", "filename": "clippy_lints/src/enum_clike.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6992937002ee9217be90832569a0b37cb6980916/clippy_lints%2Fsrc%2Fenum_clike.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6992937002ee9217be90832569a0b37cb6980916/clippy_lints%2Fsrc%2Fenum_clike.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_clike.rs?ref=6992937002ee9217be90832569a0b37cb6980916", "patch": "@@ -47,7 +47,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnportableVariant {\n         if cx.tcx.data_layout.pointer_size.bits() != 64 {\n             return;\n         }\n-        if let ItemEnum(ref def, _) = item.node {\n+        if let ItemKind::Enum(ref def, _) = item.node {\n             for var in &def.variants {\n                 let variant = &var.node;\n                 if let Some(ref anon_const) = variant.disr_expr {"}, {"sha": "042a96a21c851f585d27a2fefed233f322ffddf7", "filename": "clippy_lints/src/enum_glob_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6992937002ee9217be90832569a0b37cb6980916/clippy_lints%2Fsrc%2Fenum_glob_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6992937002ee9217be90832569a0b37cb6980916/clippy_lints%2Fsrc%2Fenum_glob_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_glob_use.rs?ref=6992937002ee9217be90832569a0b37cb6980916", "patch": "@@ -47,7 +47,7 @@ impl EnumGlobUse {\n         if item.vis.node.is_pub() {\n             return; // re-exports are fine\n         }\n-        if let ItemUse(ref path, UseKind::Glob) = item.node {\n+        if let ItemKind::Use(ref path, UseKind::Glob) = item.node {\n             if let Def::Enum(_) = path.def {\n                 span_lint(\n                     cx,"}, {"sha": "a03dc7b62690c15941ce4dcebeb0a255245b6a3a", "filename": "clippy_lints/src/escape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6992937002ee9217be90832569a0b37cb6980916/clippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6992937002ee9217be90832569a0b37cb6980916/clippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fescape.rs?ref=6992937002ee9217be90832569a0b37cb6980916", "patch": "@@ -111,7 +111,7 @@ impl<'a, 'tcx> Delegate<'tcx> for EscapeDelegate<'a, 'tcx> {\n             let id = map.hir_to_node_id(cmt.hir_id);\n             if let Some(NodeStmt(st)) = map.find(map.get_parent_node(id)) {\n                 if let StmtKind::Decl(ref decl, _) = st.node {\n-                    if let DeclLocal(ref loc) = decl.node {\n+                    if let DeclKind::Local(ref loc) = decl.node {\n                         if let Some(ref ex) = loc.init {\n                             if let ExprKind::Box(..) = ex.node {\n                                 if is_non_trait_box(cmt.ty) && !self.is_large_box(cmt.ty) {"}, {"sha": "58436bd897bb95e31ab0367b551a700a0f8dcdef", "filename": "clippy_lints/src/eval_order_dependence.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6992937002ee9217be90832569a0b37cb6980916/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6992937002ee9217be90832569a0b37cb6980916/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feval_order_dependence.rs?ref=6992937002ee9217be90832569a0b37cb6980916", "patch": "@@ -83,7 +83,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EvalOrderDependence {\n     fn check_stmt(&mut self, cx: &LateContext<'a, 'tcx>, stmt: &'tcx Stmt) {\n         match stmt.node {\n             StmtKind::Expr(ref e, _) | StmtKind::Semi(ref e, _) => DivergenceVisitor { cx }.maybe_walk_expr(e),\n-            StmtKind::Decl(ref d, _) => if let DeclLocal(ref local) = d.node {\n+            StmtKind::Decl(ref d, _) => if let DeclKind::Local(ref local) = d.node {\n                 if let Local {\n                     init: Some(ref e), ..\n                 } = **local\n@@ -267,7 +267,7 @@ fn check_stmt<'a, 'tcx>(vis: &mut ReadVisitor<'a, 'tcx>, stmt: &'tcx Stmt) -> St\n             // If the declaration is of a local variable, check its initializer\n             // expression if it has one. Otherwise, keep going.\n             let local = match decl.node {\n-                DeclLocal(ref local) => Some(local),\n+                DeclKind::Local(ref local) => Some(local),\n                 _ => None,\n             };\n             local"}, {"sha": "1ea000d3611b7e7d23217bbd2215b53d2419b701", "filename": "clippy_lints/src/fallible_impl_from.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6992937002ee9217be90832569a0b37cb6980916/clippy_lints%2Fsrc%2Ffallible_impl_from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6992937002ee9217be90832569a0b37cb6980916/clippy_lints%2Fsrc%2Ffallible_impl_from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffallible_impl_from.rs?ref=6992937002ee9217be90832569a0b37cb6980916", "patch": "@@ -39,7 +39,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for FallibleImplFrom {\n         // check for `impl From<???> for ..`\n         let impl_def_id = cx.tcx.hir.local_def_id(item.id);\n         if_chain! {\n-            if let hir::ItemImpl(.., ref impl_items) = item.node;\n+            if let hir::ItemKind::Impl(.., ref impl_items) = item.node;\n             if let Some(impl_trait_ref) = cx.tcx.impl_trait_ref(impl_def_id);\n             if match_def_path(cx.tcx, impl_trait_ref.def_id, &FROM_TRAIT);\n             then {"}, {"sha": "164380923159f007745ea3d0713a5112eb789280", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6992937002ee9217be90832569a0b37cb6980916/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6992937002ee9217be90832569a0b37cb6980916/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=6992937002ee9217be90832569a0b37cb6980916", "patch": "@@ -86,7 +86,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Functions {\n         use rustc::hir::map::Node::*;\n \n         let is_impl = if let Some(NodeItem(item)) = cx.tcx.hir.find(cx.tcx.hir.get_parent_node(nodeid)) {\n-            matches!(item.node, hir::ItemImpl(_, _, _, _, Some(_), _, _))\n+            matches!(item.node, hir::ItemKind::Impl(_, _, _, _, Some(_), _, _))\n         } else {\n             false\n         };"}, {"sha": "9fb9a162cde617aea51c187d6b121234746151a2", "filename": "clippy_lints/src/inherent_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6992937002ee9217be90832569a0b37cb6980916/clippy_lints%2Fsrc%2Finherent_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6992937002ee9217be90832569a0b37cb6980916/clippy_lints%2Fsrc%2Finherent_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finherent_impl.rs?ref=6992937002ee9217be90832569a0b37cb6980916", "patch": "@@ -56,7 +56,7 @@ impl LintPass for Pass {\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n     fn check_item(&mut self, _: &LateContext<'a, 'tcx>, item: &'tcx Item) {\n-        if let Item_::ItemImpl(_, _, _, ref generics, None, _, _) = item.node {\n+        if let ItemKind::Impl(_, _, _, ref generics, None, _, _) = item.node {\n             // Remember for each inherent implementation encoutered its span and generics\n             self.impls\n                 .insert(item.hir_id.owner_def_id(), (item.span, generics.clone()));"}, {"sha": "926e3a3033f835dd3294d5953ebfef711e3f5952", "filename": "clippy_lints/src/large_enum_variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6992937002ee9217be90832569a0b37cb6980916/clippy_lints%2Fsrc%2Flarge_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6992937002ee9217be90832569a0b37cb6980916/clippy_lints%2Fsrc%2Flarge_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flarge_enum_variant.rs?ref=6992937002ee9217be90832569a0b37cb6980916", "patch": "@@ -49,7 +49,7 @@ impl LintPass for LargeEnumVariant {\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LargeEnumVariant {\n     fn check_item(&mut self, cx: &LateContext, item: &Item) {\n         let did = cx.tcx.hir.local_def_id(item.id);\n-        if let ItemEnum(ref def, _) = item.node {\n+        if let ItemKind::Enum(ref def, _) = item.node {\n             let ty = cx.tcx.type_of(did);\n             let adt = ty.ty_adt_def()\n                 .expect(\"already checked whether this is an enum\");"}, {"sha": "bd02eb5c81f10a51df24531ad87389c15b560510", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6992937002ee9217be90832569a0b37cb6980916/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6992937002ee9217be90832569a0b37cb6980916/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=6992937002ee9217be90832569a0b37cb6980916", "patch": "@@ -68,8 +68,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LenZero {\n         }\n \n         match item.node {\n-            ItemTrait(_, _, _, _, ref trait_items) => check_trait_items(cx, item, trait_items),\n-            ItemImpl(_, _, _, _, None, _, ref impl_items) => check_impl_items(cx, item, impl_items),\n+            ItemKind::Trait(_, _, _, _, ref trait_items) => check_trait_items(cx, item, trait_items),\n+            ItemKind::Impl(_, _, _, _, None, _, ref impl_items) => check_impl_items(cx, item, impl_items),\n             _ => (),\n         }\n     }"}, {"sha": "a72e09f9fdf0f788adee9b8a3d37bbb28febf79d", "filename": "clippy_lints/src/let_if_seq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6992937002ee9217be90832569a0b37cb6980916/clippy_lints%2Fsrc%2Flet_if_seq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6992937002ee9217be90832569a0b37cb6980916/clippy_lints%2Fsrc%2Flet_if_seq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_if_seq.rs?ref=6992937002ee9217be90832569a0b37cb6980916", "patch": "@@ -66,7 +66,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LetIfSeq {\n             if_chain! {\n                 if let Some(expr) = it.peek();\n                 if let hir::StmtKind::Decl(ref decl, _) = stmt.node;\n-                if let hir::DeclLocal(ref decl) = decl.node;\n+                if let hir::DeclKind::Local(ref decl) = decl.node;\n                 if let hir::PatKind::Binding(mode, canonical_id, ident, None) = decl.pat.node;\n                 if let hir::StmtKind::Expr(ref if_, _) = expr.node;\n                 if let hir::ExprKind::If(ref cond, ref then, ref else_) = if_.node;"}, {"sha": "1b371a8141ef6d951d689253d84643407c6cf6b5", "filename": "clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6992937002ee9217be90832569a0b37cb6980916/clippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6992937002ee9217be90832569a0b37cb6980916/clippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flifetimes.rs?ref=6992937002ee9217be90832569a0b37cb6980916", "patch": "@@ -59,7 +59,7 @@ impl LintPass for LifetimePass {\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LifetimePass {\n     fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item) {\n-        if let ItemFn(ref decl, _, ref generics, id) = item.node {\n+        if let ItemKind::Fn(ref decl, _, ref generics, id) = item.node {\n             check_fn_inner(cx, decl, Some(id), generics, item.span);\n         }\n     }\n@@ -345,7 +345,7 @@ impl<'a, 'tcx> Visitor<'tcx> for RefVisitor<'a, 'tcx> {\n                 if let QPath::Resolved(_, ref path) = *path {\n                     if let Def::Existential(def_id) = path.def {\n                         let node_id = self.cx.tcx.hir.as_local_node_id(def_id).unwrap();\n-                        if let ItemExistential(ref exist_ty) = self.cx.tcx.hir.expect_item(node_id).node {\n+                        if let ItemKind::Existential(ref exist_ty) = self.cx.tcx.hir.expect_item(node_id).node {\n                             for bound in &exist_ty.bounds {\n                                 if let GenericBound::Outlives(_) = *bound {\n                                     self.record(&None);\n@@ -360,7 +360,7 @@ impl<'a, 'tcx> Visitor<'tcx> for RefVisitor<'a, 'tcx> {\n                 }\n                 self.collect_anonymous_lifetimes(path, ty);\n             }\n-            TyTraitObject(ref bounds, ref lt) => {\n+            TyKind::TraitObject(ref bounds, ref lt) => {\n                 if !lt.is_elided() {\n                     self.abort = true;\n                 }"}, {"sha": "e7da7bde30f2160ea02315f8843ec8c65d51414d", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6992937002ee9217be90832569a0b37cb6980916/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6992937002ee9217be90832569a0b37cb6980916/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=6992937002ee9217be90832569a0b37cb6980916", "patch": "@@ -591,7 +591,7 @@ fn stmt_to_expr(stmt: &Stmt) -> Option<&Expr> {\n \n fn decl_to_expr(decl: &Decl) -> Option<&Expr> {\n     match decl.node {\n-        DeclLocal(ref local) => local.init.as_ref().map(|p| &**p),\n+        DeclKind::Local(ref local) => local.init.as_ref().map(|p| &**p),\n         _ => None,\n     }\n }\n@@ -771,7 +771,7 @@ fn get_fixed_offset_var<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &Expr, var:\n \n         let offset = match idx.node {\n             ExprKind::Binary(op, ref lhs, ref rhs) => match op.node {\n-                BinOpKindAdd => {\n+                BinOpKind::Add => {\n                     let offset_opt = if same_var(cx, lhs, var) {\n                         extract_offset(cx, rhs, var)\n                     } else if same_var(cx, rhs, var) {\n@@ -1810,7 +1810,7 @@ fn extract_expr_from_first_stmt(block: &Block) -> Option<&Expr> {\n         return None;\n     }\n     if let StmtKind::Decl(ref decl, _) = block.stmts[0].node {\n-        if let DeclLocal(ref local) = decl.node {\n+        if let DeclKind::Local(ref local) = decl.node {\n             if let Some(ref expr) = local.init {\n                 Some(expr)\n             } else {\n@@ -1931,7 +1931,7 @@ struct InitializeVisitor<'a, 'tcx: 'a> {\n impl<'a, 'tcx> Visitor<'tcx> for InitializeVisitor<'a, 'tcx> {\n     fn visit_decl(&mut self, decl: &'tcx Decl) {\n         // Look for declarations of the variable\n-        if let DeclLocal(ref local) = decl.node {\n+        if let DeclKind::Local(ref local) = decl.node {\n             if local.pat.id == self.var_id {\n                 if let PatKind::Binding(_, _, ident, _) = local.pat.node {\n                     self.name = Some(ident.name);"}, {"sha": "26a0b66094fede459bda3f89ad8daab231ad5b36", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6992937002ee9217be90832569a0b37cb6980916/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6992937002ee9217be90832569a0b37cb6980916/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=6992937002ee9217be90832569a0b37cb6980916", "patch": "@@ -813,7 +813,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n             if let hir::ImplItemKind::Method(ref sig, id) = implitem.node;\n             if let Some(first_arg_ty) = sig.decl.inputs.get(0);\n             if let Some(first_arg) = iter_input_pats(&sig.decl, cx.tcx.hir.body(id)).next();\n-            if let hir::ItemImpl(_, _, _, _, None, ref self_ty, _) = item.node;\n+            if let hir::ItemKind::Impl(_, _, _, _, None, ref self_ty, _) = item.node;\n             then {\n                 if cx.access_levels.is_exported(implitem.id) {\n                 // check missing trait implementations\n@@ -1140,7 +1140,7 @@ fn lint_clone_on_copy(cx: &LateContext, expr: &hir::Expr, arg: &hir::Expr, arg_t\n                     }\n                     hir::map::NodeStmt(stmt) => {\n                         if let hir::StmtKind::Decl(ref decl, _) = stmt.node {\n-                            if let hir::DeclLocal(ref loc) = decl.node {\n+                            if let hir::DeclKind::Local(ref loc) = decl.node {\n                                 if let hir::PatKind::Ref(..) = loc.pat.node {\n                                     // let ref y = *x borrows x, let ref y = x.clone() does not\n                                     return;\n@@ -1338,7 +1338,7 @@ fn lint_unnecessary_fold(cx: &LateContext, expr: &hir::Expr, fold_args: &[hir::E\n                     cx, fold_args, hir::BinOpKind::And, \"all\", true\n                 ),\n                 ast::LitKind::Int(0, _) => check_fold_with_op(\n-                    cx, fold_args, hir::BinOpKindAdd, \"sum\", false\n+                    cx, fold_args, hir::BinOpKind::Add, \"sum\", false\n                 ),\n                 ast::LitKind::Int(1, _) => check_fold_with_op(\n                     cx, fold_args, hir::BinOpKind::Mul, \"product\", false\n@@ -2175,7 +2175,7 @@ enum OutType {\n \n impl OutType {\n     fn matches(self, cx: &LateContext, ty: &hir::FunctionRetTy) -> bool {\n-        let is_unit = |ty: &hir::Ty| SpanlessEq::new(cx).eq_ty_kind(&ty.node, &hir::TyTup(vec![].into()));\n+        let is_unit = |ty: &hir::Ty| SpanlessEq::new(cx).eq_ty_kind(&ty.node, &hir::TyKind::Tup(vec![].into()));\n         match (self, ty) {\n             (OutType::Unit, &hir::DefaultReturn(_)) => true,\n             (OutType::Unit, &hir::Return(ref ty)) if is_unit(ty) => true,"}, {"sha": "c5440420fc1ec2cc331a59a99922d245ebe9c7b0", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6992937002ee9217be90832569a0b37cb6980916/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6992937002ee9217be90832569a0b37cb6980916/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=6992937002ee9217be90832569a0b37cb6980916", "patch": "@@ -270,7 +270,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n     fn check_stmt(&mut self, cx: &LateContext<'a, 'tcx>, s: &'tcx Stmt) {\n         if_chain! {\n             if let StmtKind::Decl(ref d, _) = s.node;\n-            if let DeclLocal(ref l) = d.node;\n+            if let DeclKind::Local(ref l) = d.node;\n             if let PatKind::Binding(an, _, i, None) = l.pat.node;\n             if let Some(ref init) = l.init;\n             then {\n@@ -520,7 +520,7 @@ fn check_to_owned(cx: &LateContext, expr: &Expr, other: &Expr) {\n             let parent_impl = cx.tcx.hir.get_parent(parent_fn);\n             if parent_impl != CRATE_NODE_ID {\n                 if let map::NodeItem(item) = cx.tcx.hir.get(parent_impl) {\n-                    if let ItemImpl(.., Some(ref trait_ref), _, _) = item.node {\n+                    if let ItemKind::Impl(.., Some(ref trait_ref), _, _) = item.node {\n                         if trait_ref.path.def.def_id() == partial_eq_trait_id {\n                             // we are implementing PartialEq, don't suggest not doing `to_owned`, otherwise\n                             // we go into"}, {"sha": "eb4dfe8ba1c2554c36694c48a6d987a4ad1a40e7", "filename": "clippy_lints/src/missing_doc.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/6992937002ee9217be90832569a0b37cb6980916/clippy_lints%2Fsrc%2Fmissing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6992937002ee9217be90832569a0b37cb6980916/clippy_lints%2Fsrc%2Fmissing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_doc.rs?ref=6992937002ee9217be90832569a0b37cb6980916", "patch": "@@ -122,9 +122,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingDoc {\n \n     fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, it: &'tcx hir::Item) {\n         let desc = match it.node {\n-            hir::ItemConst(..) => \"a constant\",\n-            hir::ItemEnum(..) => \"an enum\",\n-            hir::ItemFn(..) => {\n+            hir::ItemKind::Const(..) => \"a constant\",\n+            hir::ItemKind::Enum(..) => \"an enum\",\n+            hir::ItemKind::Fn(..) => {\n                 // ignore main()\n                 if it.name == \"main\" {\n                     let def_id = cx.tcx.hir.local_def_id(it.id);\n@@ -135,19 +135,19 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingDoc {\n                 }\n                 \"a function\"\n             },\n-            hir::ItemMod(..) => \"a module\",\n-            hir::ItemStatic(..) => \"a static\",\n-            hir::ItemStruct(..) => \"a struct\",\n-            hir::ItemTrait(..) => \"a trait\",\n-            hir::ItemTraitAlias(..) => \"a trait alias\",\n-            hir::ItemGlobalAsm(..) => \"an assembly blob\",\n-            hir::ItemTy(..) => \"a type alias\",\n-            hir::ItemUnion(..) => \"a union\",\n-            hir::ItemExistential(..) => \"an existential type\",\n-            hir::ItemExternCrate(..) |\n-            hir::ItemForeignMod(..) |\n-            hir::ItemImpl(..) |\n-            hir::ItemUse(..) => return,\n+            hir::ItemKind::Mod(..) => \"a module\",\n+            hir::ItemKind::Static(..) => \"a static\",\n+            hir::ItemKind::Struct(..) => \"a struct\",\n+            hir::ItemKind::Trait(..) => \"a trait\",\n+            hir::ItemKind::TraitAlias(..) => \"a trait alias\",\n+            hir::ItemKind::GlobalAsm(..) => \"an assembly blob\",\n+            hir::ItemKind::Ty(..) => \"a type alias\",\n+            hir::ItemKind::Union(..) => \"a union\",\n+            hir::ItemKind::Existential(..) => \"an existential type\",\n+            hir::ItemKind::ExternCrate(..) |\n+            hir::ItemKind::ForeignMod(..) |\n+            hir::ItemKind::Impl(..) |\n+            hir::ItemKind::Use(..) => return,\n         };\n \n         self.check_missing_docs_attrs(cx, &it.attrs, it.span, desc);"}, {"sha": "0ca1c53d696e285045dd23c0ea9deb800c846d7f", "filename": "clippy_lints/src/missing_inline.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/6992937002ee9217be90832569a0b37cb6980916/clippy_lints%2Fsrc%2Fmissing_inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6992937002ee9217be90832569a0b37cb6980916/clippy_lints%2Fsrc%2Fmissing_inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_inline.rs?ref=6992937002ee9217be90832569a0b37cb6980916", "patch": "@@ -108,11 +108,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingInline {\n             return;\n         }\n         match it.node {\n-            hir::ItemFn(..) => {\n+            hir::ItemKind::Fn(..) => {\n                 let desc = \"a function\";\n                 check_missing_inline_attrs(cx, &it.attrs, it.span, desc);\n             },\n-            hir::ItemTrait(ref _is_auto, ref _unsafe, ref _generics,\n+            hir::ItemKind::Trait(ref _is_auto, ref _unsafe, ref _generics,\n                            ref _bounds, ref trait_items)  => {\n                 // note: we need to check if the trait is exported so we can't use\n                 // `LateLintPass::check_trait_item` here.\n@@ -134,20 +134,20 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingInline {\n                     }\n                 }\n             }\n-            hir::ItemConst(..) |\n-            hir::ItemEnum(..) |\n-            hir::ItemMod(..) |\n-            hir::ItemStatic(..) |\n-            hir::ItemStruct(..) |\n-            hir::ItemTraitAlias(..) |\n-            hir::ItemGlobalAsm(..) |\n-            hir::ItemTy(..) |\n-            hir::ItemUnion(..) |\n-            hir::ItemExistential(..) |\n-            hir::ItemExternCrate(..) |\n-            hir::ItemForeignMod(..) |\n-            hir::ItemImpl(..) |\n-            hir::ItemUse(..) => {},\n+            hir::ItemKind::Const(..) |\n+            hir::ItemKind::Enum(..) |\n+            hir::ItemKind::Mod(..) |\n+            hir::ItemKind::Static(..) |\n+            hir::ItemKind::Struct(..) |\n+            hir::ItemKind::TraitAlias(..) |\n+            hir::ItemKind::GlobalAsm(..) |\n+            hir::ItemKind::Ty(..) |\n+            hir::ItemKind::Union(..) |\n+            hir::ItemKind::Existential(..) |\n+            hir::ItemKind::ExternCrate(..) |\n+            hir::ItemKind::ForeignMod(..) |\n+            hir::ItemKind::Impl(..) |\n+            hir::ItemKind::Use(..) => {},\n         };\n     }\n "}, {"sha": "fa0586c1548aafe3b82cc9a070c41d909180aa41", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6992937002ee9217be90832569a0b37cb6980916/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6992937002ee9217be90832569a0b37cb6980916/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=6992937002ee9217be90832569a0b37cb6980916", "patch": "@@ -88,8 +88,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n \n         // Exclude non-inherent impls\n         if let Some(NodeItem(item)) = cx.tcx.hir.find(cx.tcx.hir.get_parent_node(node_id)) {\n-            if matches!(item.node, ItemImpl(_, _, _, _, Some(_), _, _) |\n-                ItemTrait(..))\n+            if matches!(item.node, ItemKind::Impl(_, _, _, _, Some(_), _, _) |\n+                ItemKind::Trait(..))\n             {\n                 return;\n             }\n@@ -351,7 +351,7 @@ impl<'a, 'tcx> MovedVariablesCtxt<'a, 'tcx> {\n                             // `let <pat> = x;`\n                             if_chain! {\n                                 if let StmtKind::Decl(ref decl, _) = s.node;\n-                                if let DeclLocal(ref local) = decl.node;\n+                                if let DeclKind::Local(ref local) = decl.node;\n                                 then {\n                                     self.spans_need_deref\n                                         .entry(vid)"}, {"sha": "6be340a99f4a09c95a41d8329f77848403224cc3", "filename": "clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6992937002ee9217be90832569a0b37cb6980916/clippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6992937002ee9217be90832569a0b37cb6980916/clippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnew_without_default.rs?ref=6992937002ee9217be90832569a0b37cb6980916", "patch": "@@ -89,7 +89,7 @@ impl LintPass for NewWithoutDefault {\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NewWithoutDefault {\n     fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx hir::Item) {\n-        if let hir::ItemImpl(_, _, _, _, None, _, ref items) = item.node {\n+        if let hir::ItemKind::Impl(_, _, _, _, None, _, ref items) = item.node {\n             for assoc_item in items {\n                 if let hir::AssociatedItemKind::Method { has_self: false } = assoc_item.kind {\n                     let impl_item = cx.tcx.hir.impl_item(assoc_item.id);"}, {"sha": "981451947bfef18fff0b1ac050d89a540dfd4918", "filename": "clippy_lints/src/non_copy_const.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6992937002ee9217be90832569a0b37cb6980916/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6992937002ee9217be90832569a0b37cb6980916/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_copy_const.rs?ref=6992937002ee9217be90832569a0b37cb6980916", "patch": "@@ -164,7 +164,7 @@ impl LintPass for NonCopyConst {\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonCopyConst {\n     fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, it: &'tcx Item) {\n-        if let ItemConst(hir_ty, ..) = &it.node {\n+        if let ItemKind::Const(hir_ty, ..) = &it.node {\n             let ty = hir_ty_to_ty(cx.tcx, hir_ty);\n             verify_ty_bound(cx, ty, Source::Item { item: it.span });\n         }\n@@ -182,7 +182,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonCopyConst {\n             let item_node_id = cx.tcx.hir.get_parent_node(impl_item.id);\n             let item = cx.tcx.hir.expect_item(item_node_id);\n             // ensure the impl is an inherent impl.\n-            if let ItemImpl(_, _, _, _, None, _, _) = item.node {\n+            if let ItemKind::Impl(_, _, _, _, None, _, _) = item.node {\n                 let ty = hir_ty_to_ty(cx.tcx, hir_ty);\n                 verify_ty_bound(cx, ty, Source::Assoc { ty: hir_ty.span, item: impl_item.span });\n             }"}, {"sha": "8783055b31eef1ebaa2eeb9c46a5eed8fd05a62e", "filename": "clippy_lints/src/overflow_check_conditional.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6992937002ee9217be90832569a0b37cb6980916/clippy_lints%2Fsrc%2Foverflow_check_conditional.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6992937002ee9217be90832569a0b37cb6980916/clippy_lints%2Fsrc%2Foverflow_check_conditional.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foverflow_check_conditional.rs?ref=6992937002ee9217be90832569a0b37cb6980916", "patch": "@@ -43,7 +43,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for OverflowCheckConditional {\n             if cx.tables.expr_ty(ident2).is_integral();\n             then {\n                 if let BinOpKind::Lt = op.node {\n-                    if let BinOpKindAdd = op2.node {\n+                    if let BinOpKind::Add = op2.node {\n                         span_lint(cx, OVERFLOW_CHECK_CONDITIONAL, expr.span,\n                             \"You are trying to use classic C overflow conditions that will fail in Rust.\");\n                     }\n@@ -68,7 +68,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for OverflowCheckConditional {\n             if cx.tables.expr_ty(ident2).is_integral();\n             then {\n                 if let BinOpKind::Gt = op.node {\n-                    if let BinOpKindAdd = op2.node {\n+                    if let BinOpKind::Add = op2.node {\n                         span_lint(cx, OVERFLOW_CHECK_CONDITIONAL, expr.span,\n                             \"You are trying to use classic C overflow conditions that will fail in Rust.\");\n                     }"}, {"sha": "2d283b96f867e14f497654dcd9de502d3b1c7aae", "filename": "clippy_lints/src/partialeq_ne_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6992937002ee9217be90832569a0b37cb6980916/clippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6992937002ee9217be90832569a0b37cb6980916/clippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs?ref=6992937002ee9217be90832569a0b37cb6980916", "patch": "@@ -38,7 +38,7 @@ impl LintPass for Pass {\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n     fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item) {\n         if_chain! {\n-            if let ItemImpl(_, _, _, _, Some(ref trait_ref), _, ref impl_items) = item.node;\n+            if let ItemKind::Impl(_, _, _, _, Some(ref trait_ref), _, ref impl_items) = item.node;\n             if !is_automatically_derived(&*item.attrs);\n             if let Some(eq_trait) = cx.tcx.lang_items().eq_trait();\n             if trait_ref.path.def.def_id() == eq_trait;"}, {"sha": "22804764d8aaae45b260c1a1f5ad78b30c921f92", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6992937002ee9217be90832569a0b37cb6980916/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6992937002ee9217be90832569a0b37cb6980916/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=6992937002ee9217be90832569a0b37cb6980916", "patch": "@@ -103,15 +103,15 @@ impl LintPass for PointerPass {\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for PointerPass {\n     fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item) {\n-        if let ItemFn(ref decl, _, _, body_id) = item.node {\n+        if let ItemKind::Fn(ref decl, _, _, body_id) = item.node {\n             check_fn(cx, decl, item.id, Some(body_id));\n         }\n     }\n \n     fn check_impl_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx ImplItem) {\n         if let ImplItemKind::Method(ref sig, body_id) = item.node {\n             if let Some(NodeItem(it)) = cx.tcx.hir.find(cx.tcx.hir.get_parent(item.id)) {\n-                if let ItemImpl(_, _, _, _, Some(_), _, _) = it.node {\n+                if let ItemKind::Impl(_, _, _, _, Some(_), _, _) = it.node {\n                     return; // ignore trait impls\n                 }\n             }"}, {"sha": "55c51307e04d2ded4234f9e6420f02ca3370866a", "filename": "clippy_lints/src/serde_api.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6992937002ee9217be90832569a0b37cb6980916/clippy_lints%2Fsrc%2Fserde_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6992937002ee9217be90832569a0b37cb6980916/clippy_lints%2Fsrc%2Fserde_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fserde_api.rs?ref=6992937002ee9217be90832569a0b37cb6980916", "patch": "@@ -29,7 +29,7 @@ impl LintPass for Serde {\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Serde {\n     fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item) {\n-        if let ItemImpl(_, _, _, _, Some(ref trait_ref), _, ref items) = item.node {\n+        if let ItemKind::Impl(_, _, _, _, Some(ref trait_ref), _, ref items) = item.node {\n             let did = trait_ref.path.def.def_id();\n             if let Some(visit_did) = get_trait_def_id(cx, &paths::SERDE_DE_VISITOR) {\n                 if did == visit_did {"}, {"sha": "cc08e1ee816fea8fa44fa6f95706535e3102360e", "filename": "clippy_lints/src/shadow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6992937002ee9217be90832569a0b37cb6980916/clippy_lints%2Fsrc%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6992937002ee9217be90832569a0b37cb6980916/clippy_lints%2Fsrc%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fshadow.rs?ref=6992937002ee9217be90832569a0b37cb6980916", "patch": "@@ -127,7 +127,7 @@ fn check_decl<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, decl: &'tcx Decl, bindings:\n     if higher::is_from_for_desugar(decl) {\n         return;\n     }\n-    if let DeclLocal(ref local) = decl.node {\n+    if let DeclKind::Local(ref local) = decl.node {\n         let Local {\n             ref pat,\n             ref ty,"}, {"sha": "10db53cc782de7744fdd0910477db9897816a084", "filename": "clippy_lints/src/suspicious_trait_impl.rs", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/6992937002ee9217be90832569a0b37cb6980916/clippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6992937002ee9217be90832569a0b37cb6980916/clippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs?ref=6992937002ee9217be90832569a0b37cb6980916", "patch": "@@ -59,10 +59,15 @@ impl LintPass for SuspiciousImpl {\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for SuspiciousImpl {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx hir::Expr) {\n-        use rustc::hir::BinOpKind::*;\n         if let hir::ExprKind::Binary(binop, _, _) = expr.node {\n             match binop.node {\n-                BinOpKind::Eq | BinOpKind::Lt | BinOpKind::Le | BinOpKind::Ne | BinOpKind::Ge | BinOpKind::Gt => return,\n+                | hir::BinOpKind::Eq\n+                | hir::BinOpKind::Lt\n+                | hir::BinOpKind::Le\n+                | hir::BinOpKind::Ne\n+                | hir::BinOpKind::Ge\n+                | hir::BinOpKind::Gt\n+                => return,\n                 _ => {},\n             }\n             // Check if the binary expression is part of another bi/unary expression\n@@ -94,7 +99,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for SuspiciousImpl {\n                 expr,\n                 binop.node,\n                 &[\"Add\", \"Sub\", \"Mul\", \"Div\"],\n-                &[BinOpKind::Add, BinOpKind::Sub, BinOpKind::Mul, BinOpKind::Div],\n+                &[\n+                    hir::BinOpKind::Add,\n+                    hir::BinOpKind::Sub,\n+                    hir::BinOpKind::Mul,\n+                    hir::BinOpKind::Div,\n+                ],\n             ) {\n                 span_lint(\n                     cx,\n@@ -124,7 +134,16 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for SuspiciousImpl {\n                     \"ShrAssign\",\n                 ],\n                 &[\n-                    BinOpKind::Add, BinOpKind::Sub, BinOpKind::Mul, BinOpKind::Div, BinOpKind::BitAnd, BinOpKind::BitOr, BinOpKind::BitXor, BinOpKind::Rem, BinOpKind::Shl, BinOpKind::Shr\n+                    hir::BinOpKind::Add,\n+                    hir::BinOpKind::Sub,\n+                    hir::BinOpKind::Mul,\n+                    hir::BinOpKind::Div,\n+                    hir::BinOpKind::BitAnd,\n+                    hir::BinOpKind::BitOr,\n+                    hir::BinOpKind::BitXor,\n+                    hir::BinOpKind::Rem,\n+                    hir::BinOpKind::Shl,\n+                    hir::BinOpKind::Shr,\n                 ],\n             ) {\n                 span_lint(\n@@ -167,7 +186,7 @@ fn check_binop<'a>(\n     if_chain! {\n         if parent_impl != ast::CRATE_NODE_ID;\n         if let hir::map::Node::NodeItem(item) = cx.tcx.hir.get(parent_impl);\n-        if let hir::Item_::ItemImpl(_, _, _, _, Some(ref trait_ref), _, _) = item.node;\n+        if let hir::ItemKind::Impl(_, _, _, _, Some(ref trait_ref), _, _) = item.node;\n         if let Some(idx) = trait_ids.iter().position(|&tid| tid == trait_ref.path.def.def_id());\n         if binop != expected_ops[idx];\n         then{"}, {"sha": "dfcc9c39348f2b490908899c5c633f2452a96278", "filename": "clippy_lints/src/swap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6992937002ee9217be90832569a0b37cb6980916/clippy_lints%2Fsrc%2Fswap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6992937002ee9217be90832569a0b37cb6980916/clippy_lints%2Fsrc%2Fswap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fswap.rs?ref=6992937002ee9217be90832569a0b37cb6980916", "patch": "@@ -62,7 +62,7 @@ fn check_manual_swap(cx: &LateContext, block: &Block) {\n         if_chain! {\n             // let t = foo();\n             if let StmtKind::Decl(ref tmp, _) = w[0].node;\n-            if let DeclLocal(ref tmp) = tmp.node;\n+            if let DeclKind::Local(ref tmp) = tmp.node;\n             if let Some(ref tmp_init) = tmp.init;\n             if let PatKind::Binding(_, _, ident, None) = tmp.pat.node;\n \n@@ -90,7 +90,7 @@ fn check_manual_swap(cx: &LateContext, block: &Block) {\n                             if SpanlessEq::new(cx).ignore_fn().eq_expr(lhs1, lhs2) {\n                                 let ty = walk_ptrs_ty(cx.tables.expr_ty(lhs1));\n \n-                                if matches!(ty.sty, ty::TyKind::Slice(_)) ||\n+                                if matches!(ty.sty, ty::TySlice(_)) ||\n                                     matches!(ty.sty, ty::TyArray(_, _)) ||\n                                     match_type(cx, ty, &paths::VEC) ||\n                                     match_type(cx, ty, &paths::VEC_DEQUE) {"}, {"sha": "18c85cd05ab4e86fc6a7159e501118196d4535e7", "filename": "clippy_lints/src/trivially_copy_pass_by_ref.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6992937002ee9217be90832569a0b37cb6980916/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6992937002ee9217be90832569a0b37cb6980916/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs?ref=6992937002ee9217be90832569a0b37cb6980916", "patch": "@@ -100,8 +100,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TriviallyCopyPassByRef {\n \n         // Exclude non-inherent impls\n         if let Some(NodeItem(item)) = cx.tcx.hir.find(cx.tcx.hir.get_parent_node(node_id)) {\n-            if matches!(item.node, ItemImpl(_, _, _, _, Some(_), _, _) |\n-                ItemTrait(..))\n+            if matches!(item.node, ItemKind::Impl(_, _, _, _, Some(_), _, _) |\n+                ItemKind::Trait(..))\n             {\n                 return;\n             }"}, {"sha": "ae4f579a6f22b76576a31b241b713003d0220180", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6992937002ee9217be90832569a0b37cb6980916/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6992937002ee9217be90832569a0b37cb6980916/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=6992937002ee9217be90832569a0b37cb6980916", "patch": "@@ -139,7 +139,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypePass {\n     fn check_fn(&mut self, cx: &LateContext, _: FnKind, decl: &FnDecl, _: &Body, _: Span, id: NodeId) {\n         // skip trait implementations, see #605\n         if let Some(map::NodeItem(item)) = cx.tcx.hir.find(cx.tcx.hir.get_parent(id)) {\n-            if let ItemImpl(_, _, _, _, Some(..), _, _) = item.node {\n+            if let ItemKind::Impl(_, _, _, _, Some(..), _, _) = item.node {\n                 return;\n             }\n         }\n@@ -343,7 +343,7 @@ fn check_ty_rptr(cx: &LateContext, ast_ty: &hir::Ty, is_local: bool, lt: &Lifeti\n // Returns true if given type is `Any` trait.\n fn is_any_trait(t: &hir::Ty) -> bool {\n     if_chain! {\n-        if let TyTraitObject(ref traits, _) = t.node;\n+        if let TyKind::TraitObject(ref traits, _) = t.node;\n         if traits.len() >= 1;\n         // Only Send/Sync can be used as additional traits, so it is enough to\n         // check only the first trait.\n@@ -377,7 +377,7 @@ declare_clippy_lint! {\n }\n \n fn check_let_unit(cx: &LateContext, decl: &Decl) {\n-    if let DeclLocal(ref local) = decl.node {\n+    if let DeclKind::Local(ref local) = decl.node {\n         if is_unit(cx.tables.pat_ty(&local.pat)) {\n             if in_external_macro(cx, decl.span) || in_macro(local.pat.span) {\n                 return;\n@@ -1141,7 +1141,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeComplexityPass {\n \n     fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item) {\n         match item.node {\n-            ItemStatic(ref ty, _, _) | ItemConst(ref ty, _) => self.check_type(cx, ty),\n+            ItemKind::Static(ref ty, _, _) | ItemKind::Const(ref ty, _) => self.check_type(cx, ty),\n             // functions, enums, structs, impls and traits are covered\n             _ => (),\n         }\n@@ -1222,7 +1222,7 @@ impl<'tcx> Visitor<'tcx> for TypeComplexityVisitor {\n             // function types bring a lot of overhead\n             TyKind::BareFn(..) => (50 * self.nest, 1),\n \n-            TyTraitObject(ref param_bounds, _) => {\n+            TyKind::TraitObject(ref param_bounds, _) => {\n                 let has_lifetime_parameters = param_bounds\n                     .iter()\n                     .any(|bound| bound.bound_generic_params.iter().any(|gen| match gen.kind {\n@@ -1797,7 +1797,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ImplicitHasher {\n         }\n \n         match item.node {\n-            ItemImpl(_, _, _, ref generics, _, ref ty, ref items) => {\n+            ItemKind::Impl(_, _, _, ref generics, _, ref ty, ref items) => {\n                 let mut vis = ImplicitHasherTypeVisitor::new(cx);\n                 vis.visit_ty(ty);\n \n@@ -1829,7 +1829,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ImplicitHasher {\n                     );\n                 }\n             },\n-            ItemFn(ref decl, .., ref generics, body_id) => {\n+            ItemKind::Fn(ref decl, .., ref generics, body_id) => {\n                 let body = cx.tcx.hir.body(body_id);\n \n                 for ty in &decl.inputs {"}, {"sha": "230d5fdca2c673d2aa75a6a1589b54b5aacb53ba", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6992937002ee9217be90832569a0b37cb6980916/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6992937002ee9217be90832569a0b37cb6980916/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=6992937002ee9217be90832569a0b37cb6980916", "patch": "@@ -55,7 +55,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UseSelf {\n             return;\n         }\n         if_chain! {\n-            if let ItemImpl(.., ref item_type, ref refs) = item.node;\n+            if let ItemKind::Impl(.., ref item_type, ref refs) = item.node;\n             if let TyKind::Path(QPath::Resolved(_, ref item_path)) = item_type.node;\n             then {\n                 let parameters = &item_path.segments.last().expect(SEGMENTS_MSG).args;"}, {"sha": "9a848c8a805d2303591f7b06d6ba800d16ac3778", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6992937002ee9217be90832569a0b37cb6980916/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6992937002ee9217be90832569a0b37cb6980916/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=6992937002ee9217be90832569a0b37cb6980916", "patch": "@@ -588,20 +588,20 @@ impl<'tcx> Visitor<'tcx> for PrintVisitor {\n     }\n \n     fn visit_stmt(&mut self, s: &Stmt) {\n-        print!(\"    if let Stmt_::\");\n+        print!(\"    if let StmtKind::\");\n         let current = format!(\"{}.node\", self.current);\n         match s.node {\n             // Could be an item or a local (let) binding:\n             StmtKind::Decl(ref decl, _) => {\n                 let decl_pat = self.next(\"decl\");\n-                println!(\"StmtKind::Decl(ref {}, _) = {}\", decl_pat, current);\n-                print!(\"    if let Decl_::\");\n+                println!(\"Decl(ref {}, _) = {}\", decl_pat, current);\n+                print!(\"    if let DeclKind::\");\n                 let current = format!(\"{}.node\", decl_pat);\n                 match decl.node {\n                     // A local (let) binding:\n                     DeclKind::Local(ref local) => {\n                         let local_pat = self.next(\"local\");\n-                        println!(\"DeclLocal(ref {}) = {};\", local_pat, current);\n+                        println!(\"Local(ref {}) = {};\", local_pat, current);\n                         if let Some(ref init) = local.init {\n                             let init_pat = self.next(\"init\");\n                             println!(\"    if let Some(ref {}) = {}.init\", init_pat, local_pat);\n@@ -613,23 +613,23 @@ impl<'tcx> Visitor<'tcx> for PrintVisitor {\n                     },\n                     // An item binding:\n                     DeclKind::Item(_) => {\n-                        println!(\"DeclItem(item_id) = {};\", current);\n+                        println!(\"Item(item_id) = {};\", current);\n                     },\n                 }\n             }\n \n             // Expr without trailing semi-colon (must have unit type):\n             StmtKind::Expr(ref e, _) => {\n                 let e_pat = self.next(\"e\");\n-                println!(\"StmtKind::Expr(ref {}, _) = {}\", e_pat, current);\n+                println!(\"Expr(ref {}, _) = {}\", e_pat, current);\n                 self.current = e_pat;\n                 self.visit_expr(e);\n             },\n \n             // Expr with trailing semi-colon (may have any type):\n             StmtKind::Semi(ref e, _) => {\n                 let e_pat = self.next(\"e\");\n-                println!(\"StmtKind::Semi(ref {}, _) = {}\", e_pat, current);\n+                println!(\"Semi(ref {}, _) = {}\", e_pat, current);\n                 self.current = e_pat;\n                 self.visit_expr(e);\n             },"}, {"sha": "3f0243a91c07a820495aa166e6aed96563473b69", "filename": "clippy_lints/src/utils/higher.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6992937002ee9217be90832569a0b37cb6980916/clippy_lints%2Fsrc%2Futils%2Fhigher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6992937002ee9217be90832569a0b37cb6980916/clippy_lints%2Fsrc%2Futils%2Fhigher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhigher.rs?ref=6992937002ee9217be90832569a0b37cb6980916", "patch": "@@ -154,7 +154,7 @@ pub fn is_from_for_desugar(decl: &hir::Decl) -> bool {\n     // }\n     // ```\n     if_chain! {\n-        if let hir::DeclLocal(ref loc) = decl.node;\n+        if let hir::DeclKind::Local(ref loc) = decl.node;\n         if let Some(ref expr) = loc.init;\n         if let hir::ExprKind::Match(_, _, hir::MatchSource::ForLoopDesugar) = expr.node;\n         then {\n@@ -171,7 +171,7 @@ pub fn is_from_for_desugar(decl: &hir::Decl) -> bool {\n     // }\n     // ```\n     if_chain! {\n-        if let hir::DeclLocal(ref loc) = decl.node;\n+        if let hir::DeclKind::Local(ref loc) = decl.node;\n         if let hir::LocalSource::ForLoopDesugar = loc.source;\n         then {\n             return true;\n@@ -192,7 +192,7 @@ pub fn for_loop(expr: &hir::Expr) -> Option<(&hir::Pat, &hir::Expr, &hir::Expr)>\n         if block.expr.is_none();\n         if let [ _, _, ref let_stmt, ref body ] = *block.stmts;\n         if let hir::StmtKind::Decl(ref decl, _) = let_stmt.node;\n-        if let hir::DeclLocal(ref decl) = decl.node;\n+        if let hir::DeclKind::Local(ref decl) = decl.node;\n         if let hir::StmtKind::Expr(ref expr, _) = body.node;\n         then {\n             return Some((&*decl.pat, &iterargs[0], expr));"}, {"sha": "2c5995f1327c2b28849119236aac8b0a466e9906", "filename": "clippy_lints/src/utils/hir_utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6992937002ee9217be90832569a0b37cb6980916/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6992937002ee9217be90832569a0b37cb6980916/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs?ref=6992937002ee9217be90832569a0b37cb6980916", "patch": "@@ -44,7 +44,7 @@ impl<'a, 'tcx: 'a> SpanlessEq<'a, 'tcx> {\n     pub fn eq_stmt(&mut self, left: &Stmt, right: &Stmt) -> bool {\n         match (&left.node, &right.node) {\n             (&StmtKind::Decl(ref l, _), &StmtKind::Decl(ref r, _)) => {\n-                if let (&DeclLocal(ref l), &DeclLocal(ref r)) = (&l.node, &r.node) {\n+                if let (&DeclKind::Local(ref l), &DeclKind::Local(ref r)) = (&l.node, &r.node) {\n                     both(&l.ty, &r.ty, |l, r| self.eq_ty(l, r)) && both(&l.init, &r.init, |l, r| self.eq_expr(l, r))\n                 } else {\n                     false\n@@ -617,7 +617,7 @@ impl<'a, 'tcx: 'a> SpanlessHash<'a, 'tcx> {\n                 let c: fn(_, _) -> _ = StmtKind::Decl;\n                 c.hash(&mut self.s);\n \n-                if let DeclLocal(ref local) = decl.node {\n+                if let DeclKind::Local(ref local) = decl.node {\n                     if let Some(ref init) = local.init {\n                         self.hash_expr(init);\n                     }"}, {"sha": "b2b99da3c59a27727dba48af6dcd3623f42009d2", "filename": "clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/6992937002ee9217be90832569a0b37cb6980916/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6992937002ee9217be90832569a0b37cb6980916/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=6992937002ee9217be90832569a0b37cb6980916", "patch": "@@ -141,7 +141,7 @@ fn has_attr(attrs: &[Attribute]) -> bool {\n \n fn print_decl(cx: &LateContext, decl: &hir::Decl) {\n     match decl.node {\n-        hir::DeclLocal(ref local) => {\n+        hir::DeclKind::Local(ref local) => {\n             println!(\"local variable of type {}\", cx.tables.node_id_to_type(local.hir_id));\n             println!(\"pattern:\");\n             print_pat(cx, &local.pat, 0);\n@@ -150,7 +150,7 @@ fn print_decl(cx: &LateContext, decl: &hir::Decl) {\n                 print_expr(cx, e, 0);\n             }\n         },\n-        hir::DeclItem(_) => println!(\"item decl\"),\n+        hir::DeclKind::Item(_) => println!(\"item decl\"),\n     }\n }\n \n@@ -353,7 +353,7 @@ fn print_item(cx: &LateContext, item: &hir::Item) {\n         hir::VisibilityKind::Inherited => println!(\"visibility inherited from outer item\"),\n     }\n     match item.node {\n-        hir::ItemExternCrate(ref _renamed_from) => {\n+        hir::ItemKind::ExternCrate(ref _renamed_from) => {\n             let def_id = cx.tcx.hir.local_def_id(item.id);\n             if let Some(crate_id) = cx.tcx.extern_mod_stmt_cnum(def_id) {\n                 let source = cx.tcx.used_crate_source(crate_id);\n@@ -367,46 +367,46 @@ fn print_item(cx: &LateContext, item: &hir::Item) {\n                 println!(\"weird extern crate without a crate id\");\n             }\n         },\n-        hir::ItemUse(ref path, ref kind) => println!(\"{:?}, {:?}\", path, kind),\n-        hir::ItemStatic(..) => println!(\"static item of type {:#?}\", cx.tcx.type_of(did)),\n-        hir::ItemConst(..) => println!(\"const item of type {:#?}\", cx.tcx.type_of(did)),\n-        hir::ItemFn(..) => {\n+        hir::ItemKind::Use(ref path, ref kind) => println!(\"{:?}, {:?}\", path, kind),\n+        hir::ItemKind::Static(..) => println!(\"static item of type {:#?}\", cx.tcx.type_of(did)),\n+        hir::ItemKind::Const(..) => println!(\"const item of type {:#?}\", cx.tcx.type_of(did)),\n+        hir::ItemKind::Fn(..) => {\n             let item_ty = cx.tcx.type_of(did);\n             println!(\"function of type {:#?}\", item_ty);\n         },\n-        hir::ItemMod(..) => println!(\"module\"),\n-        hir::ItemForeignMod(ref fm) => println!(\"foreign module with abi: {}\", fm.abi),\n-        hir::ItemGlobalAsm(ref asm) => println!(\"global asm: {:?}\", asm),\n-        hir::ItemTy(..) => {\n+        hir::ItemKind::Mod(..) => println!(\"module\"),\n+        hir::ItemKind::ForeignMod(ref fm) => println!(\"foreign module with abi: {}\", fm.abi),\n+        hir::ItemKind::GlobalAsm(ref asm) => println!(\"global asm: {:?}\", asm),\n+        hir::ItemKind::Ty(..) => {\n             println!(\"type alias for {:?}\", cx.tcx.type_of(did));\n         },\n-        hir::ItemExistential(..) => {\n+        hir::ItemKind::Existential(..) => {\n             println!(\"existential type with real type {:?}\", cx.tcx.type_of(did));\n         },\n-        hir::ItemEnum(..) => {\n+        hir::ItemKind::Enum(..) => {\n             println!(\"enum definition of type {:?}\", cx.tcx.type_of(did));\n         },\n-        hir::ItemStruct(..) => {\n+        hir::ItemKind::Struct(..) => {\n             println!(\"struct definition of type {:?}\", cx.tcx.type_of(did));\n         },\n-        hir::ItemUnion(..) => {\n+        hir::ItemKind::Union(..) => {\n             println!(\"union definition of type {:?}\", cx.tcx.type_of(did));\n         },\n-        hir::ItemTrait(..) => {\n+        hir::ItemKind::Trait(..) => {\n             println!(\"trait decl\");\n             if cx.tcx.trait_is_auto(did) {\n                 println!(\"trait is auto\");\n             } else {\n                 println!(\"trait is not auto\");\n             }\n         },\n-        hir::ItemTraitAlias(..) => {\n+        hir::ItemKind::TraitAlias(..) => {\n             println!(\"trait alias\");\n         }\n-        hir::ItemImpl(_, _, _, _, Some(ref _trait_ref), _, _) => {\n+        hir::ItemKind::Impl(_, _, _, _, Some(ref _trait_ref), _, _) => {\n             println!(\"trait impl\");\n         },\n-        hir::ItemImpl(_, _, _, _, None, _, _) => {\n+        hir::ItemKind::Impl(_, _, _, _, None, _, _) => {\n             println!(\"impl\");\n         },\n     }"}, {"sha": "a348df83a9d18222f20dfd976f48134d509c8393", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6992937002ee9217be90832569a0b37cb6980916/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6992937002ee9217be90832569a0b37cb6980916/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=6992937002ee9217be90832569a0b37cb6980916", "patch": "@@ -1,5 +1,6 @@\n use rustc::lint::*;\n use rustc::hir::*;\n+use rustc::hir;\n use rustc::hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n use crate::utils::{match_qpath, paths, span_lint};\n use syntax::symbol::LocalInternedString;\n@@ -117,7 +118,7 @@ impl LintPass for LintWithoutLintPass {\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LintWithoutLintPass {\n     fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item) {\n-        if let ItemStatic(ref ty, MutImmutable, body_id) = item.node {\n+        if let hir::ItemKind::Static(ref ty, MutImmutable, body_id) = item.node {\n             if is_lint_ref_type(ty) {\n                 self.declared_lints.insert(item.name, item.span);\n             } else if is_lint_array_type(ty) && item.name == \"ARRAY\" {"}, {"sha": "c38a925efedfdec07f147491b7eb2038a7ed44fc", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6992937002ee9217be90832569a0b37cb6980916/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6992937002ee9217be90832569a0b37cb6980916/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=6992937002ee9217be90832569a0b37cb6980916", "patch": "@@ -524,7 +524,7 @@ pub fn get_enclosing_block<'a, 'tcx: 'a>(cx: &LateContext<'a, 'tcx>, node: NodeI\n         match node {\n             Node::NodeBlock(block) => Some(block),\n             Node::NodeItem(&Item {\n-                node: ItemFn(_, _, _, eid),\n+                node: ItemKind::Fn(_, _, _, eid),\n                 ..\n             }) | Node::NodeImplItem(&ImplItem {\n                 node: ImplItemKind::Method(_, eid),"}, {"sha": "ff9424289c5c4f9e158915d142fd2387f539f896", "filename": "clippy_lints/src/utils/sugg.rs", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/6992937002ee9217be90832569a0b37cb6980916/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6992937002ee9217be90832569a0b37cb6980916/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fsugg.rs?ref=6992937002ee9217be90832569a0b37cb6980916", "patch": "@@ -382,21 +382,29 @@ fn associativity(op: &AssocOp) -> Associativity {\n \n /// Convert a `hir::BinOp` to the corresponding assigning binary operator.\n fn hirbinop2assignop(op: hir::BinOp) -> AssocOp {\n-    use rustc::hir::BinOpKind::*;\n     use syntax::parse::token::BinOpToken::*;\n \n     AssocOp::AssignOp(match op.node {\n-        BinOpKind::Add => Plus,\n-        BinOpKind::BitAnd => And,\n-        BinOpKind::BitOr => Or,\n-        BinOpKind::BitXor => Caret,\n-        BinOpKind::Div => Slash,\n-        BinOpKind::Mul => Star,\n-        BinOpKind::Rem => Percent,\n-        BinOpKind::Shl => Shl,\n-        BinOpKind::Shr => Shr,\n-        BinOpKind::Sub => Minus,\n-        BinOpKind::And | BinOpKind::Eq | BinOpKind::Ge | BinOpKind::Gt | BinOpKind::Le | BinOpKind::Lt | BinOpKind::Ne | BinOpKind::Or => panic!(\"This operator does not exist\"),\n+        hir::BinOpKind::Add => Plus,\n+        hir::BinOpKind::BitAnd => And,\n+        hir::BinOpKind::BitOr => Or,\n+        hir::BinOpKind::BitXor => Caret,\n+        hir::BinOpKind::Div => Slash,\n+        hir::BinOpKind::Mul => Star,\n+        hir::BinOpKind::Rem => Percent,\n+        hir::BinOpKind::Shl => Shl,\n+        hir::BinOpKind::Shr => Shr,\n+        hir::BinOpKind::Sub => Minus,\n+\n+        | hir::BinOpKind::And\n+        | hir::BinOpKind::Eq\n+        | hir::BinOpKind::Ge\n+        | hir::BinOpKind::Gt\n+        | hir::BinOpKind::Le\n+        | hir::BinOpKind::Lt\n+        | hir::BinOpKind::Ne\n+        | hir::BinOpKind::Or\n+        => panic!(\"This operator does not exist\"),\n     })\n }\n "}, {"sha": "556d128bca791debdf4b7dc82544752355979803", "filename": "clippy_lints/src/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6992937002ee9217be90832569a0b37cb6980916/clippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6992937002ee9217be90832569a0b37cb6980916/clippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwrite.rs?ref=6992937002ee9217be90832569a0b37cb6980916", "patch": "@@ -448,7 +448,7 @@ fn is_in_debug_impl(cx: &LateContext, expr: &Expr) -> bool {\n     if let Some(NodeImplItem(item)) = map.find(map.get_parent(expr.id)) {\n         // `Debug` impl\n         if let Some(NodeItem(item)) = map.find(map.get_parent(item.id)) {\n-            if let ItemImpl(_, _, _, _, Some(ref tr), _, _) = item.node {\n+            if let ItemKind::Impl(_, _, _, _, Some(ref tr), _, _) = item.node {\n                 return match_path(&tr.path, &[\"Debug\"]);\n             }\n         }"}]}