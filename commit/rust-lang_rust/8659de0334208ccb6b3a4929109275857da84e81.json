{"sha": "8659de0334208ccb6b3a4929109275857da84e81", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2NTlkZTAzMzQyMDhjY2I2YjNhNDkyOTEwOTI3NTg1N2RhODRlODE=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2015-02-24T06:22:43Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2015-02-24T06:40:15Z"}, "message": "rustc_trans: use an Lvalue Datum for an unsized lvalue to avoid bogus drops.", "tree": {"sha": "3abe74c8c2c78b75b4f94826f7182bf7329a57c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3abe74c8c2c78b75b4f94826f7182bf7329a57c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8659de0334208ccb6b3a4929109275857da84e81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8659de0334208ccb6b3a4929109275857da84e81", "html_url": "https://github.com/rust-lang/rust/commit/8659de0334208ccb6b3a4929109275857da84e81", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8659de0334208ccb6b3a4929109275857da84e81/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b0cafbcd7c2fe092888b58ad5994bd280eb40b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b0cafbcd7c2fe092888b58ad5994bd280eb40b9", "html_url": "https://github.com/rust-lang/rust/commit/3b0cafbcd7c2fe092888b58ad5994bd280eb40b9"}], "stats": {"total": 19, "additions": 7, "deletions": 12}, "files": [{"sha": "a3ba506fc46a2034b977589d18f3300cb6c89d56", "filename": "src/librustc_trans/trans/common.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8659de0334208ccb6b3a4929109275857da84e81/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8659de0334208ccb6b3a4929109275857da84e81/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs?ref=8659de0334208ccb6b3a4929109275857da84e81", "patch": "@@ -214,14 +214,7 @@ pub fn type_needs_unwind_cleanup<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, ty: Ty<\n }\n \n pub fn type_needs_drop<'tcx>(cx: &ty::ctxt<'tcx>, ty: Ty<'tcx>) -> bool {\n-    // Unsized types cannot be dropped automatically - these are lvalues pointing\n-    // to alloca's containing the actual data pointer (and the unsizing info),\n-    // which only be obtained by dereferencing a pointer from which moves are\n-    // not allowed. Datum & friends could possibly be adjusted to avoid getting\n-    // this far - maybe the (*data, info) aggregate could be an SSA value?\n-    // Lvalues don't have to be pointers, just behave like a pointer, but there\n-    // is no telling what other implicit assumptions are lurking around.\n-    ty::type_contents(cx, ty).needs_drop(cx) && type_is_sized(cx, ty)\n+    ty::type_contents(cx, ty).needs_drop(cx)\n }\n \n fn type_is_newtype_immediate<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, ty: Ty<'tcx>) -> bool {"}, {"sha": "9e9ee4537524b81bfc262027c61bb614c45296ad", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8659de0334208ccb6b3a4929109275857da84e81/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8659de0334208ccb6b3a4929109275857da84e81/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=8659de0334208ccb6b3a4929109275857da84e81", "patch": "@@ -463,11 +463,13 @@ fn apply_adjustments<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n         let ptr_ty = type_of::in_memory_type_of(bcx.ccx(), unsized_ty).ptr_to();\n         let base = PointerCast(bcx, lval.val, ptr_ty);\n \n-        let scratch = rvalue_scratch_datum(bcx, unsized_ty, \"__fat_ptr\");\n-        Store(bcx, base, get_dataptr(bcx, scratch.val));\n-        Store(bcx, info, get_len(bcx, scratch.val));\n+        let llty = type_of::type_of(bcx.ccx(), unsized_ty);\n+        // HACK(eddyb) get around issues with lifetime intrinsics.\n+        let scratch = alloca_no_lifetime(bcx, llty, \"__fat_ptr\");\n+        Store(bcx, base, get_dataptr(bcx, scratch));\n+        Store(bcx, info, get_len(bcx, scratch));\n \n-        DatumBlock::new(bcx, scratch.to_expr_datum())\n+        DatumBlock::new(bcx, Datum::new(scratch, unsized_ty, LvalueExpr))\n     }\n \n     fn unsize_unique_vec<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,"}]}