{"sha": "8f1c64505574f60c805c5b4a32e55e818b9e0eee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmMWM2NDUwNTU3NGY2MGM4MDVjNWI0YTMyZTU1ZTgxOGI5ZTBlZWU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-04T10:39:03Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-04T10:39:03Z"}, "message": "Match expr", "tree": {"sha": "01f97f1eac44cde01a203ccb14b003c42924115b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/01f97f1eac44cde01a203ccb14b003c42924115b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f1c64505574f60c805c5b4a32e55e818b9e0eee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f1c64505574f60c805c5b4a32e55e818b9e0eee", "html_url": "https://github.com/rust-lang/rust/commit/8f1c64505574f60c805c5b4a32e55e818b9e0eee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f1c64505574f60c805c5b4a32e55e818b9e0eee/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e919db3731968ae7a6877530d2cb645b0495d5fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/e919db3731968ae7a6877530d2cb645b0495d5fd", "html_url": "https://github.com/rust-lang/rust/commit/e919db3731968ae7a6877530d2cb645b0495d5fd"}], "stats": {"total": 167, "additions": 165, "deletions": 2}, "files": [{"sha": "0239a3c1dcf58ce187011fe44cd4afcc04b1b814", "filename": "src/grammar.ron", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8f1c64505574f60c805c5b4a32e55e818b9e0eee/src%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/8f1c64505574f60c805c5b4a32e55e818b9e0eee/src%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar.ron?ref=8f1c64505574f60c805c5b4a32e55e818b9e0eee", "patch": "@@ -141,6 +141,9 @@ Grammar(\n         \"IF_EXPR\",\n         \"BLOCK_EXPR\",\n         \"RETURN_EXPR\",\n+        \"MATCH_EXPR\",\n+        \"MATCH_ARM\",\n+        \"MATCH_GUARD\",\n \n         \"EXTERN_BLOCK_EXPR\",\n         \"ENUM_VARIANT\","}, {"sha": "6506892e15efb4311dc1d9869672834dadcba134", "filename": "src/grammar/expressions.rs", "status": "modified", "additions": 54, "deletions": 2, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/8f1c64505574f60c805c5b4a32e55e818b9e0eee/src%2Fgrammar%2Fexpressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f1c64505574f60c805c5b4a32e55e818b9e0eee/src%2Fgrammar%2Fexpressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar%2Fexpressions.rs?ref=8f1c64505574f60c805c5b4a32e55e818b9e0eee", "patch": "@@ -27,6 +27,7 @@ pub(super) fn literal(p: &mut Parser) -> Option<CompletedMarker> {\n }\n \n const EXPR_FIRST: TokenSet = PREFIX_EXPR_FIRST;\n+\n pub(super) fn expr(p: &mut Parser) {\n     let mut lhs = match prefix_expr(p) {\n         Some(lhs) => lhs,\n@@ -87,6 +88,7 @@ const PREFIX_EXPR_FIRST: TokenSet =\n         token_set![AMPERSAND, STAR, EXCL],\n         ATOM_EXPR_FIRST,\n     ];\n+\n fn prefix_expr(p: &mut Parser) -> Option<CompletedMarker> {\n     let done = match p.current() {\n         AMPERSAND => ref_expr(p),\n@@ -140,6 +142,7 @@ const ATOM_EXPR_FIRST: TokenSet =\n         LITERAL_FIRST,\n         token_set![L_PAREN, PIPE, MOVE_KW, IF_KW, UNSAFE_KW, L_CURLY, RETURN_KW],\n     ];\n+\n fn atom_expr(p: &mut Parser) -> Option<CompletedMarker> {\n     match literal(p) {\n         Some(m) => return Some(m),\n@@ -154,6 +157,7 @@ fn atom_expr(p: &mut Parser) -> Option<CompletedMarker> {\n         PIPE => lambda_expr(p),\n         MOVE_KW if la == PIPE => lambda_expr(p),\n         IF_KW => if_expr(p),\n+        MATCH_KW => match_expr(p),\n         UNSAFE_KW if la == L_CURLY => block_expr(p),\n         L_CURLY => block_expr(p),\n         RETURN_KW => return_expr(p),\n@@ -202,8 +206,7 @@ fn lambda_expr(p: &mut Parser) -> CompletedMarker {\n fn if_expr(p: &mut Parser) -> CompletedMarker {\n     assert!(p.at(IF_KW));\n     let m = p.start();\n-    p.bump();\n-    expr(p);\n+    if_head(p);\n     block(p);\n     if p.at(ELSE_KW) {\n         p.bump();\n@@ -216,6 +219,55 @@ fn if_expr(p: &mut Parser) -> CompletedMarker {\n     m.complete(p, IF_EXPR)\n }\n \n+fn if_head(p: &mut Parser) {\n+    assert!(p.at(IF_KW));\n+    p.bump();\n+    expr(p);\n+}\n+\n+// test match_expr\n+// fn foo() {\n+//     match () { };\n+// }\n+fn match_expr(p: &mut Parser) -> CompletedMarker {\n+    assert!(p.at(MATCH_KW));\n+    let m = p.start();\n+    p.bump();\n+    expr(p);\n+    p.eat(L_CURLY);\n+    while !p.at(EOF) && !p.at(R_CURLY) {\n+        match_arm(p);\n+        if !p.at(R_CURLY) {\n+            p.expect(COMMA);\n+        }\n+    }\n+    p.expect(R_CURLY);\n+    m.complete(p, MATCH_EXPR)\n+}\n+\n+// test match_arm\n+// fn foo() {\n+//     match () {\n+//         _ => (),\n+//         X | Y if Z => (),\n+//     };\n+// }\n+fn match_arm(p: &mut Parser) {\n+    let m = p.start();\n+    loop {\n+        patterns::pattern(p);\n+        if !p.eat(PIPE) {\n+            break;\n+        }\n+    }\n+    if p.at(IF_KW) {\n+        if_head(p)\n+    }\n+    p.expect(FAT_ARROW);\n+    expr(p);\n+    m.complete(p, MATCH_ARM);\n+}\n+\n // test block_expr\n // fn foo() {\n //     {};"}, {"sha": "73b26b274a9e5642ef0196e15080e1d2f82d2fd7", "filename": "src/syntax_kinds/generated.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8f1c64505574f60c805c5b4a32e55e818b9e0eee/src%2Fsyntax_kinds%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f1c64505574f60c805c5b4a32e55e818b9e0eee/src%2Fsyntax_kinds%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsyntax_kinds%2Fgenerated.rs?ref=8f1c64505574f60c805c5b4a32e55e818b9e0eee", "patch": "@@ -132,6 +132,9 @@ pub enum SyntaxKind {\n     IF_EXPR,\n     BLOCK_EXPR,\n     RETURN_EXPR,\n+    MATCH_EXPR,\n+    MATCH_ARM,\n+    MATCH_GUARD,\n     EXTERN_BLOCK_EXPR,\n     ENUM_VARIANT,\n     NAMED_FIELD,\n@@ -342,6 +345,9 @@ impl SyntaxKind {\n             IF_EXPR => &SyntaxInfo { name: \"IF_EXPR\" },\n             BLOCK_EXPR => &SyntaxInfo { name: \"BLOCK_EXPR\" },\n             RETURN_EXPR => &SyntaxInfo { name: \"RETURN_EXPR\" },\n+            MATCH_EXPR => &SyntaxInfo { name: \"MATCH_EXPR\" },\n+            MATCH_ARM => &SyntaxInfo { name: \"MATCH_ARM\" },\n+            MATCH_GUARD => &SyntaxInfo { name: \"MATCH_GUARD\" },\n             EXTERN_BLOCK_EXPR => &SyntaxInfo { name: \"EXTERN_BLOCK_EXPR\" },\n             ENUM_VARIANT => &SyntaxInfo { name: \"ENUM_VARIANT\" },\n             NAMED_FIELD => &SyntaxInfo { name: \"NAMED_FIELD\" },"}, {"sha": "2c0e8841451f8789eddcfa7bb08131ee2d735000", "filename": "tests/data/parser/inline/0069_match_arm.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8f1c64505574f60c805c5b4a32e55e818b9e0eee/tests%2Fdata%2Fparser%2Finline%2F0069_match_arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f1c64505574f60c805c5b4a32e55e818b9e0eee/tests%2Fdata%2Fparser%2Finline%2F0069_match_arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0069_match_arm.rs?ref=8f1c64505574f60c805c5b4a32e55e818b9e0eee", "patch": "@@ -0,0 +1,6 @@\n+fn foo() {\n+    match () {\n+        _ => (),\n+        X | Y if Z => (),\n+    };\n+}"}, {"sha": "efdee2568a97e8aea8151a0979addd845f4b4763", "filename": "tests/data/parser/inline/0069_match_arm.txt", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/8f1c64505574f60c805c5b4a32e55e818b9e0eee/tests%2Fdata%2Fparser%2Finline%2F0069_match_arm.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8f1c64505574f60c805c5b4a32e55e818b9e0eee/tests%2Fdata%2Fparser%2Finline%2F0069_match_arm.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0069_match_arm.txt?ref=8f1c64505574f60c805c5b4a32e55e818b9e0eee", "patch": "@@ -0,0 +1,65 @@\n+FILE@[0; 78)\n+  FN_ITEM@[0; 78)\n+    FN_KW@[0; 2)\n+    NAME@[2; 6)\n+      WHITESPACE@[2; 3)\n+      IDENT@[3; 6) \"foo\"\n+    PARAM_LIST@[6; 9)\n+      L_PAREN@[6; 7)\n+      R_PAREN@[7; 8)\n+      WHITESPACE@[8; 9)\n+    BLOCK_EXPR@[9; 78)\n+      L_CURLY@[9; 10)\n+      EXPR_STMT@[10; 76)\n+        MATCH_EXPR@[10; 74)\n+          WHITESPACE@[10; 15)\n+          MATCH_KW@[15; 20)\n+          TUPLE_EXPR@[20; 24)\n+            WHITESPACE@[20; 21)\n+            L_PAREN@[21; 22)\n+            R_PAREN@[22; 23)\n+            WHITESPACE@[23; 24)\n+          L_CURLY@[24; 25)\n+          MATCH_ARM@[25; 41)\n+            PLACEHOLDER_PAT@[25; 36)\n+              WHITESPACE@[25; 34)\n+              UNDERSCORE@[34; 35)\n+              WHITESPACE@[35; 36)\n+            FAT_ARROW@[36; 38)\n+            TUPLE_EXPR@[38; 41)\n+              WHITESPACE@[38; 39)\n+              L_PAREN@[39; 40)\n+              R_PAREN@[40; 41)\n+          COMMA@[41; 42)\n+          MATCH_ARM@[42; 67)\n+            BIND_PAT@[42; 53)\n+              NAME@[42; 53)\n+                WHITESPACE@[42; 51)\n+                IDENT@[51; 52) \"X\"\n+                WHITESPACE@[52; 53)\n+            PIPE@[53; 54)\n+            BIND_PAT@[54; 57)\n+              NAME@[54; 57)\n+                WHITESPACE@[54; 55)\n+                IDENT@[55; 56) \"Y\"\n+                WHITESPACE@[56; 57)\n+            IF_KW@[57; 59)\n+            PATH_EXPR@[59; 62)\n+              PATH@[59; 62)\n+                PATH_SEGMENT@[59; 62)\n+                  NAME_REF@[59; 62)\n+                    WHITESPACE@[59; 60)\n+                    IDENT@[60; 61) \"Z\"\n+                    WHITESPACE@[61; 62)\n+            FAT_ARROW@[62; 64)\n+            TUPLE_EXPR@[64; 67)\n+              WHITESPACE@[64; 65)\n+              L_PAREN@[65; 66)\n+              R_PAREN@[66; 67)\n+          COMMA@[67; 68)\n+          WHITESPACE@[68; 73)\n+          R_CURLY@[73; 74)\n+        SEMI@[74; 75)\n+        WHITESPACE@[75; 76)\n+      R_CURLY@[76; 77)\n+      WHITESPACE@[77; 78)"}, {"sha": "40318b350477460217e6a7a9098f7a3ef27499c1", "filename": "tests/data/parser/inline/0070_match_expr.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8f1c64505574f60c805c5b4a32e55e818b9e0eee/tests%2Fdata%2Fparser%2Finline%2F0070_match_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f1c64505574f60c805c5b4a32e55e818b9e0eee/tests%2Fdata%2Fparser%2Finline%2F0070_match_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0070_match_expr.rs?ref=8f1c64505574f60c805c5b4a32e55e818b9e0eee", "patch": "@@ -0,0 +1,3 @@\n+fn foo() {\n+    match () { };\n+}"}, {"sha": "2dc2f4130cf5da03d6cfe5bd10d817e1e11004a1", "filename": "tests/data/parser/inline/0070_match_expr.txt", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/8f1c64505574f60c805c5b4a32e55e818b9e0eee/tests%2Fdata%2Fparser%2Finline%2F0070_match_expr.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8f1c64505574f60c805c5b4a32e55e818b9e0eee/tests%2Fdata%2Fparser%2Finline%2F0070_match_expr.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0070_match_expr.txt?ref=8f1c64505574f60c805c5b4a32e55e818b9e0eee", "patch": "@@ -0,0 +1,28 @@\n+FILE@[0; 31)\n+  FN_ITEM@[0; 31)\n+    FN_KW@[0; 2)\n+    NAME@[2; 6)\n+      WHITESPACE@[2; 3)\n+      IDENT@[3; 6) \"foo\"\n+    PARAM_LIST@[6; 9)\n+      L_PAREN@[6; 7)\n+      R_PAREN@[7; 8)\n+      WHITESPACE@[8; 9)\n+    BLOCK_EXPR@[9; 31)\n+      L_CURLY@[9; 10)\n+      EXPR_STMT@[10; 29)\n+        MATCH_EXPR@[10; 27)\n+          WHITESPACE@[10; 15)\n+          MATCH_KW@[15; 20)\n+          TUPLE_EXPR@[20; 24)\n+            WHITESPACE@[20; 21)\n+            L_PAREN@[21; 22)\n+            R_PAREN@[22; 23)\n+            WHITESPACE@[23; 24)\n+          L_CURLY@[24; 25)\n+          WHITESPACE@[25; 26)\n+          R_CURLY@[26; 27)\n+        SEMI@[27; 28)\n+        WHITESPACE@[28; 29)\n+      R_CURLY@[29; 30)\n+      WHITESPACE@[30; 31)"}]}