{"sha": "95a32157af8291b452570319c2d035a4307b52e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1YTMyMTU3YWY4MjkxYjQ1MjU3MDMxOWMyZDAzNWE0MzA3YjUyZTY=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-06-22T11:46:48Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-06-22T14:36:24Z"}, "message": "Count all errors for `track_errors`", "tree": {"sha": "74a5d5e775928290deb37128295ec77b475a5b3e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/74a5d5e775928290deb37128295ec77b475a5b3e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/95a32157af8291b452570319c2d035a4307b52e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/95a32157af8291b452570319c2d035a4307b52e6", "html_url": "https://github.com/rust-lang/rust/commit/95a32157af8291b452570319c2d035a4307b52e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/95a32157af8291b452570319c2d035a4307b52e6/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30b6c59f24cfb0e451e3df14ef536e4e40fe2672", "url": "https://api.github.com/repos/rust-lang/rust/commits/30b6c59f24cfb0e451e3df14ef536e4e40fe2672", "html_url": "https://github.com/rust-lang/rust/commit/30b6c59f24cfb0e451e3df14ef536e4e40fe2672"}], "stats": {"total": 106, "additions": 77, "deletions": 29}, "files": [{"sha": "eb007062e6d50b9c41112955db402ef0e4a88376", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/95a32157af8291b452570319c2d035a4307b52e6/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95a32157af8291b452570319c2d035a4307b52e6/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=95a32157af8291b452570319c2d035a4307b52e6", "patch": "@@ -171,6 +171,7 @@ pub struct InferCtxt<'a, 'tcx> {\n     /// Track how many errors were reported when this infcx is created.\n     /// If the number of errors increases, that's also a sign (line\n     /// `tained_by_errors`) to avoid reporting certain kinds of errors.\n+    // FIXME(matthewjasper) Merge into `tainted_by_errors_flag`\n     err_count_on_creation: usize,\n \n     /// This flag is true while there is an active snapshot."}, {"sha": "70bd25a9d5772cfdb04714b0d50a93846c2af704", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/95a32157af8291b452570319c2d035a4307b52e6/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95a32157af8291b452570319c2d035a4307b52e6/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=95a32157af8291b452570319c2d035a4307b52e6", "patch": "@@ -307,7 +307,12 @@ pub use diagnostic_builder::DiagnosticBuilder;\n pub struct Handler {\n     pub flags: HandlerFlags,\n \n+    /// The number of errors that have been emitted, including duplicates.\n+    ///\n+    /// This is not necessarily the count that's reported to the user once\n+    /// compilation ends.\n     err_count: AtomicUsize,\n+    deduplicated_err_count: AtomicUsize,\n     emitter: Lock<Box<dyn Emitter + sync::Send>>,\n     continue_after_error: AtomicBool,\n     delayed_span_bugs: Lock<Vec<Diagnostic>>,\n@@ -407,6 +412,7 @@ impl Handler {\n         Handler {\n             flags,\n             err_count: AtomicUsize::new(0),\n+            deduplicated_err_count: AtomicUsize::new(0),\n             emitter: Lock::new(e),\n             continue_after_error: AtomicBool::new(true),\n             delayed_span_bugs: Lock::new(Vec::new()),\n@@ -428,6 +434,7 @@ impl Handler {\n     pub fn reset_err_count(&self) {\n         // actually frees the underlying memory (which `clear` would not do)\n         *self.emitted_diagnostics.borrow_mut() = Default::default();\n+        self.deduplicated_err_count.store(0, SeqCst);\n         self.err_count.store(0, SeqCst);\n     }\n \n@@ -660,10 +667,10 @@ impl Handler {\n     }\n \n     pub fn print_error_count(&self, registry: &Registry) {\n-        let s = match self.err_count() {\n+        let s = match self.deduplicated_err_count.load(SeqCst) {\n             0 => return,\n             1 => \"aborting due to previous error\".to_string(),\n-            _ => format!(\"aborting due to {} previous errors\", self.err_count())\n+            count => format!(\"aborting due to {} previous errors\", count)\n         };\n         if self.treat_err_as_bug() {\n             return;\n@@ -769,9 +776,12 @@ impl Handler {\n         if self.emitted_diagnostics.borrow_mut().insert(diagnostic_hash) {\n             self.emitter.borrow_mut().emit_diagnostic(db);\n             if db.is_error() {\n-                self.bump_err_count();\n+                self.deduplicated_err_count.fetch_add(1, SeqCst);\n             }\n         }\n+        if db.is_error() {\n+            self.bump_err_count();\n+        }\n     }\n \n     pub fn emit_artifact_notification(&self, path: &Path, artifact_type: &str) {"}, {"sha": "8c2bfc42b020a72059a350cb49c477da9999b5ce", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/95a32157af8291b452570319c2d035a4307b52e6/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95a32157af8291b452570319c2d035a4307b52e6/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=95a32157af8291b452570319c2d035a4307b52e6", "patch": "@@ -15,7 +15,6 @@ use rustc::ty::{self, TyCtxt, query::TyCtxtAt};\n use rustc::ty::layout::{self, LayoutOf, VariantIdx};\n use rustc::ty::subst::Subst;\n use rustc::traits::Reveal;\n-use rustc::util::common::ErrorReported;\n use rustc_data_structures::fx::FxHashMap;\n \n use syntax::source_map::{Span, DUMMY_SP};\n@@ -655,19 +654,12 @@ pub fn const_eval_raw_provider<'tcx>(\n         if tcx.is_static(def_id) {\n             // Ensure that if the above error was either `TooGeneric` or `Reported`\n             // an error must be reported.\n-            let reported_err = tcx.sess.track_errors(|| {\n-                err.report_as_error(ecx.tcx,\n-                                    \"could not evaluate static initializer\")\n-            });\n-            match reported_err {\n-                Ok(v) => {\n-                    tcx.sess.delay_span_bug(err.span,\n-                                        &format!(\"static eval failure did not emit an error: {:#?}\",\n-                                        v));\n-                    v\n-                },\n-                Err(ErrorReported) => ErrorHandled::Reported,\n-            }\n+            let v = err.report_as_error(ecx.tcx, \"could not evaluate static initializer\");\n+            tcx.sess.delay_span_bug(\n+                err.span,\n+                &format!(\"static eval failure did not emit an error: {:#?}\", v)\n+            );\n+            v\n         } else if def_id.is_local() {\n             // constant defined in this crate, we can figure out a lint level!\n             match tcx.def_kind(def_id) {"}, {"sha": "8905f475647bab6c92c157a40565516c6f0e702a", "filename": "src/librustc_save_analysis/span_utils.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/95a32157af8291b452570319c2d035a4307b52e6/src%2Flibrustc_save_analysis%2Fspan_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95a32157af8291b452570319c2d035a4307b52e6/src%2Flibrustc_save_analysis%2Fspan_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fspan_utils.rs?ref=95a32157af8291b452570319c2d035a4307b52e6", "patch": "@@ -2,25 +2,19 @@ use rustc::session::Session;\n \n use crate::generated_code;\n \n-use std::cell::Cell;\n-\n use syntax::parse::lexer::{self, StringReader};\n use syntax::parse::token::{self, TokenKind};\n use syntax_pos::*;\n \n #[derive(Clone)]\n pub struct SpanUtils<'a> {\n     pub sess: &'a Session,\n-    // FIXME given that we clone SpanUtils all over the place, this err_count is\n-    // probably useless and any logic relying on it is bogus.\n-    pub err_count: Cell<isize>,\n }\n \n impl<'a> SpanUtils<'a> {\n     pub fn new(sess: &'a Session) -> SpanUtils<'a> {\n         SpanUtils {\n             sess,\n-            err_count: Cell::new(0),\n         }\n     }\n "}, {"sha": "6d092011f7c9c8f443608c8eb5cd0b2d272521ca", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/95a32157af8291b452570319c2d035a4307b52e6/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95a32157af8291b452570319c2d035a4307b52e6/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=95a32157af8291b452570319c2d035a4307b52e6", "patch": "@@ -527,6 +527,8 @@ pub struct FnCtxt<'a, 'tcx> {\n     /// checking this function. On exit, if we find that *more* errors\n     /// have been reported, we will skip regionck and other work that\n     /// expects the types within the function to be consistent.\n+    // FIXME(matthewjasper) This should not exist, and it's not correct\n+    // if type checking is run in parallel.\n     err_count_on_creation: usize,\n \n     ret_coercion: Option<RefCell<DynamicCoerceMany<'tcx>>>,\n@@ -696,11 +698,9 @@ impl ItemLikeVisitor<'tcx> for CheckItemTypesVisitor<'tcx> {\n     fn visit_impl_item(&mut self, _: &'tcx hir::ImplItem) { }\n }\n \n-pub fn check_wf_new<'tcx>(tcx: TyCtxt<'tcx>) -> Result<(), ErrorReported> {\n-    tcx.sess.track_errors(|| {\n-        let mut visit = wfcheck::CheckTypeWellFormedVisitor::new(tcx);\n-        tcx.hir().krate().par_visit_all_item_likes(&mut visit);\n-    })\n+pub fn check_wf_new<'tcx>(tcx: TyCtxt<'tcx>) {\n+    let mut visit = wfcheck::CheckTypeWellFormedVisitor::new(tcx);\n+    tcx.hir().krate().par_visit_all_item_likes(&mut visit);\n }\n \n fn check_mod_item_types<'tcx>(tcx: TyCtxt<'tcx>, module_def_id: DefId) {"}, {"sha": "8728f80bd985c7010282caa71d2f0b628b8dab2d", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/95a32157af8291b452570319c2d035a4307b52e6/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95a32157af8291b452570319c2d035a4307b52e6/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=95a32157af8291b452570319c2d035a4307b52e6", "patch": "@@ -321,6 +321,7 @@ pub fn check_crate<'tcx>(tcx: TyCtxt<'tcx>) -> Result<(), ErrorReported> {\n \n     // this ensures that later parts of type checking can assume that items\n     // have valid types and not error\n+    // FIXME(matthewjasper) We shouldn't need to do this.\n     tcx.sess.track_errors(|| {\n         time(tcx.sess, \"type collecting\", || {\n             for &module in tcx.hir().krate().modules.keys() {\n@@ -353,7 +354,9 @@ pub fn check_crate<'tcx>(tcx: TyCtxt<'tcx>) -> Result<(), ErrorReported> {\n         })?;\n     }\n \n-    time(tcx.sess, \"wf checking\", || check::check_wf_new(tcx))?;\n+    tcx.sess.track_errors(|| {\n+        time(tcx.sess, \"wf checking\", || check::check_wf_new(tcx));\n+    })?;\n \n     time(tcx.sess, \"item-types checking\", || {\n         for &module in tcx.hir().krate().modules.keys() {"}, {"sha": "d66c4f47d03ee79289d4c8e3bf49017f558a0a62", "filename": "src/test/ui/consts/enum-discr-type-err.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/95a32157af8291b452570319c2d035a4307b52e6/src%2Ftest%2Fui%2Fconsts%2Fenum-discr-type-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95a32157af8291b452570319c2d035a4307b52e6/src%2Ftest%2Fui%2Fconsts%2Fenum-discr-type-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fenum-discr-type-err.rs?ref=95a32157af8291b452570319c2d035a4307b52e6", "patch": "@@ -0,0 +1,29 @@\n+// Test that we mark enum discriminant values as having errors, even when the\n+// diagnostic is deduplicated.\n+\n+struct F;\n+struct T;\n+\n+impl F {\n+    const V: i32 = 0;\n+}\n+\n+impl T {\n+    const V: i32 = 0;\n+}\n+\n+macro_rules! mac {\n+    ($( $v: ident = $s: ident,)*) => {\n+        enum E {\n+            $( $v = $s::V, )*\n+            //~^ ERROR mismatched types\n+        }\n+    }\n+}\n+\n+mac! {\n+    A = F,\n+    B = T,\n+}\n+\n+fn main() {}"}, {"sha": "3c4fac7327d401e9ae834e25857c74d5a71440da", "filename": "src/test/ui/consts/enum-discr-type-err.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/95a32157af8291b452570319c2d035a4307b52e6/src%2Ftest%2Fui%2Fconsts%2Fenum-discr-type-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/95a32157af8291b452570319c2d035a4307b52e6/src%2Ftest%2Fui%2Fconsts%2Fenum-discr-type-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fenum-discr-type-err.stderr?ref=95a32157af8291b452570319c2d035a4307b52e6", "patch": "@@ -0,0 +1,19 @@\n+error[E0308]: mismatched types\n+  --> $DIR/enum-discr-type-err.rs:18:21\n+   |\n+LL |               $( $v = $s::V, )*\n+   |                       ^^^^^ expected isize, found i32\n+...\n+LL | / mac! {\n+LL | |     A = F,\n+LL | |     B = T,\n+LL | | }\n+   | |_- in this macro invocation\n+help: you can convert an `i32` to `isize` and panic if the converted value wouldn't fit\n+   |\n+LL |             $( $v = $s::V.try_into().unwrap(), )*\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}]}