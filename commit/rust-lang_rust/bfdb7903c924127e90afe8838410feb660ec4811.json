{"sha": "bfdb7903c924127e90afe8838410feb660ec4811", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmZGI3OTAzYzkyNDEyN2U5MGFmZTg4Mzg0MTBmZWI2NjBlYzQ4MTE=", "commit": {"author": {"name": "Mateusz Miku\u0142a", "email": "mati865@gmail.com", "date": "2020-09-25T11:33:25Z"}, "committer": {"name": "Mateusz Miku\u0142a", "email": "mati865@gmail.com", "date": "2020-09-25T11:35:49Z"}, "message": "Link dynamic and static late_link_args before generic ones", "tree": {"sha": "098a79751fc4bfc5089762e3ef8d1ae6e71a4c8c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/098a79751fc4bfc5089762e3ef8d1ae6e71a4c8c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bfdb7903c924127e90afe8838410feb660ec4811", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bfdb7903c924127e90afe8838410feb660ec4811", "html_url": "https://github.com/rust-lang/rust/commit/bfdb7903c924127e90afe8838410feb660ec4811", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bfdb7903c924127e90afe8838410feb660ec4811/comments", "author": {"login": "mati865", "id": 1174646, "node_id": "MDQ6VXNlcjExNzQ2NDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1174646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mati865", "html_url": "https://github.com/mati865", "followers_url": "https://api.github.com/users/mati865/followers", "following_url": "https://api.github.com/users/mati865/following{/other_user}", "gists_url": "https://api.github.com/users/mati865/gists{/gist_id}", "starred_url": "https://api.github.com/users/mati865/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mati865/subscriptions", "organizations_url": "https://api.github.com/users/mati865/orgs", "repos_url": "https://api.github.com/users/mati865/repos", "events_url": "https://api.github.com/users/mati865/events{/privacy}", "received_events_url": "https://api.github.com/users/mati865/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mati865", "id": 1174646, "node_id": "MDQ6VXNlcjExNzQ2NDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1174646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mati865", "html_url": "https://github.com/mati865", "followers_url": "https://api.github.com/users/mati865/followers", "following_url": "https://api.github.com/users/mati865/following{/other_user}", "gists_url": "https://api.github.com/users/mati865/gists{/gist_id}", "starred_url": "https://api.github.com/users/mati865/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mati865/subscriptions", "organizations_url": "https://api.github.com/users/mati865/orgs", "repos_url": "https://api.github.com/users/mati865/repos", "events_url": "https://api.github.com/users/mati865/events{/privacy}", "received_events_url": "https://api.github.com/users/mati865/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e599b53e67ddd197a09a3d8720eed872df481aa0", "url": "https://api.github.com/repos/rust-lang/rust/commits/e599b53e67ddd197a09a3d8720eed872df481aa0", "html_url": "https://github.com/rust-lang/rust/commit/e599b53e67ddd197a09a3d8720eed872df481aa0"}], "stats": {"total": 13, "additions": 4, "deletions": 9}, "files": [{"sha": "87d539f748c6b86f071e7e0508f54c655a9ae854", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bfdb7903c924127e90afe8838410feb660ec4811/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfdb7903c924127e90afe8838410feb660ec4811/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=bfdb7903c924127e90afe8838410feb660ec4811", "patch": "@@ -1333,9 +1333,6 @@ fn add_late_link_args(\n     crate_type: CrateType,\n     codegen_results: &CodegenResults,\n ) {\n-    if let Some(args) = sess.target.target.options.late_link_args.get(&flavor) {\n-        cmd.args(args);\n-    }\n     let any_dynamic_crate = crate_type == CrateType::Dylib\n         || codegen_results.crate_info.dependency_formats.iter().any(|(ty, list)| {\n             *ty == crate_type && list.iter().any(|&linkage| linkage == Linkage::Dynamic)\n@@ -1349,6 +1346,9 @@ fn add_late_link_args(\n             cmd.args(args);\n         }\n     }\n+    if let Some(args) = sess.target.target.options.late_link_args.get(&flavor) {\n+        cmd.args(args);\n+    }\n }\n \n /// Add arbitrary \"post-link\" args defined by the target spec."}, {"sha": "0234ff55f011823cc070e818d3812eee84b83107", "filename": "compiler/rustc_target/src/spec/windows_gnu_base.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bfdb7903c924127e90afe8838410feb660ec4811/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_gnu_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfdb7903c924127e90afe8838410feb660ec4811/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_gnu_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_gnu_base.rs?ref=bfdb7903c924127e90afe8838410feb660ec4811", "patch": "@@ -23,6 +23,7 @@ pub fn opts() -> TargetOptions {\n         \"-lmsvcrt\".to_string(),\n         \"-lmingwex\".to_string(),\n         \"-lmingw32\".to_string(),\n+        \"-lgcc\".to_string(), // alas, mingw* libraries above depend on libgcc\n         // mingw's msvcrt is a weird hybrid import library and static library.\n         // And it seems that the linker fails to use import symbols from msvcrt\n         // that are required from functions in msvcrt in certain cases. For example\n@@ -41,8 +42,6 @@ pub fn opts() -> TargetOptions {\n         // the shared libgcc_s-dw2-1.dll. This is required to support\n         // unwinding across DLL boundaries.\n         \"-lgcc_s\".to_string(),\n-        \"-lgcc\".to_string(),\n-        \"-lkernel32\".to_string(),\n     ];\n     late_link_args_dynamic.insert(LinkerFlavor::Gcc, dynamic_unwind_libs.clone());\n     late_link_args_dynamic.insert(LinkerFlavor::Lld(LldFlavor::Ld), dynamic_unwind_libs);\n@@ -54,10 +53,6 @@ pub fn opts() -> TargetOptions {\n         // boundaries when unwinding across FFI boundaries.\n         \"-lgcc_eh\".to_string(),\n         \"-l:libpthread.a\".to_string(),\n-        \"-lgcc\".to_string(),\n-        // libpthread depends on libmsvcrt, so we need to link it *again*.\n-        \"-lmsvcrt\".to_string(),\n-        \"-lkernel32\".to_string(),\n     ];\n     late_link_args_static.insert(LinkerFlavor::Gcc, static_unwind_libs.clone());\n     late_link_args_static.insert(LinkerFlavor::Lld(LldFlavor::Ld), static_unwind_libs);"}]}