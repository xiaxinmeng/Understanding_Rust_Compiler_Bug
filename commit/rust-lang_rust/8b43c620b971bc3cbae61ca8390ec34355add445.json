{"sha": "8b43c620b971bc3cbae61ca8390ec34355add445", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiNDNjNjIwYjk3MWJjM2NiYWU2MWNhODM5MGVjMzQzNTVhZGQ0NDU=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-03-29T03:51:05Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-03-29T14:05:54Z"}, "message": "std: remove Encoder::emit_{owned,managed}_str and Decoder::read_{owned,managed}_str", "tree": {"sha": "18f2041c2a41f28ea48973d4373a263aa37b7427", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18f2041c2a41f28ea48973d4373a263aa37b7427"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b43c620b971bc3cbae61ca8390ec34355add445", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b43c620b971bc3cbae61ca8390ec34355add445", "html_url": "https://github.com/rust-lang/rust/commit/8b43c620b971bc3cbae61ca8390ec34355add445", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b43c620b971bc3cbae61ca8390ec34355add445/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1dd11c717922fb38e87644606f9fbc9d29ee4995", "url": "https://api.github.com/repos/rust-lang/rust/commits/1dd11c717922fb38e87644606f9fbc9d29ee4995", "html_url": "https://github.com/rust-lang/rust/commit/1dd11c717922fb38e87644606f9fbc9d29ee4995"}], "stats": {"total": 92, "additions": 20, "deletions": 72}, "files": [{"sha": "513897997a52c3ed252c4b9b5ba15764272c3f7d", "filename": "src/libstd/ebml.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8b43c620b971bc3cbae61ca8390ec34355add445/src%2Flibstd%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b43c620b971bc3cbae61ca8390ec34355add445/src%2Flibstd%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Febml.rs?ref=8b43c620b971bc3cbae61ca8390ec34355add445", "patch": "@@ -311,11 +311,8 @@ pub mod reader {\n         fn read_f64(&self) -> f64 { fail!(~\"read_f64()\"); }\n         fn read_f32(&self) -> f32 { fail!(~\"read_f32()\"); }\n         fn read_float(&self) -> float { fail!(~\"read_float()\"); }\n-\n         fn read_char(&self) -> char { fail!(~\"read_char()\"); }\n-\n-        fn read_owned_str(&self) -> ~str { doc_as_str(self.next_doc(EsStr)) }\n-        fn read_managed_str(&self) -> @str { fail!(~\"read_managed_str()\"); }\n+        fn read_str(&self) -> ~str { doc_as_str(self.next_doc(EsStr)) }\n \n         // Compound types:\n         fn read_owned<T>(&self, f: &fn() -> T) -> T {\n@@ -650,18 +647,10 @@ pub mod writer {\n             fail!(~\"Unimplemented: serializing a char\");\n         }\n \n-        fn emit_borrowed_str(&self, v: &str) {\n+        fn emit_str(&self, v: &str) {\n             self.wr_tagged_str(EsStr as uint, v)\n         }\n \n-        fn emit_owned_str(&self, v: &str) {\n-            self.emit_borrowed_str(v)\n-        }\n-\n-        fn emit_managed_str(&self, v: &str) {\n-            self.emit_borrowed_str(v)\n-        }\n-\n         fn emit_borrowed(&self, f: &fn()) { f() }\n         fn emit_owned(&self, f: &fn()) { f() }\n         fn emit_managed(&self, f: &fn()) { f() }"}, {"sha": "373131e9e655c87bb93af123c9c30d3376a8a4da", "filename": "src/libstd/json.rs", "status": "modified", "additions": 8, "deletions": 38, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/8b43c620b971bc3cbae61ca8390ec34355add445/src%2Flibstd%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b43c620b971bc3cbae61ca8390ec34355add445/src%2Flibstd%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fjson.rs?ref=8b43c620b971bc3cbae61ca8390ec34355add445", "patch": "@@ -105,20 +105,14 @@ impl serialize::Encoder for Encoder {\n         self.wr.write_str(float::to_str_digits(v, 6u));\n     }\n \n-    fn emit_char(&self, v: char) { self.emit_borrowed_str(str::from_char(v)) }\n-\n-    fn emit_borrowed_str(&self, v: &str) { self.wr.write_str(escape_str(v)) }\n-    fn emit_owned_str(&self, v: &str) { self.emit_borrowed_str(v) }\n-    fn emit_managed_str(&self, v: &str) { self.emit_borrowed_str(v) }\n+    fn emit_char(&self, v: char) { self.emit_str(str::from_char(v)) }\n+    fn emit_str(&self, v: &str) { self.wr.write_str(escape_str(v)) }\n \n     fn emit_borrowed(&self, f: &fn()) { f() }\n     fn emit_owned(&self, f: &fn()) { f() }\n     fn emit_managed(&self, f: &fn()) { f() }\n \n-    fn emit_enum(&self, _name: &str, f: &fn()) {\n-        f()\n-    }\n-\n+    fn emit_enum(&self, _name: &str, f: &fn()) { f() }\n     fn emit_enum_variant(&self, name: &str, _id: uint, cnt: uint, f: &fn()) {\n         // enums are encoded as strings or vectors:\n         // Bunny => \"Bunny\"\n@@ -224,15 +218,8 @@ impl serialize::Encoder for PrettyEncoder {\n         self.wr.write_str(float::to_str_digits(v, 6u));\n     }\n \n-    fn emit_char(&self, v: char) { self.emit_borrowed_str(str::from_char(v)) }\n-\n-    fn emit_borrowed_str(&self, v: &str) { self.wr.write_str(escape_str(v)); }\n-    fn emit_owned_str(&self, v: &str) { self.emit_borrowed_str(v) }\n-    fn emit_managed_str(&self, v: &str) { self.emit_borrowed_str(v) }\n-\n-    fn emit_borrowed(&self, f: &fn()) { f() }\n-    fn emit_owned(&self, f: &fn()) { f() }\n-    fn emit_managed(&self, f: &fn()) { f() }\n+    fn emit_char(&self, v: char) { self.emit_str(str::from_char(v)) }\n+    fn emit_str(&self, v: &str) { self.wr.write_str(escape_str(v)); }\n \n     fn emit_enum(&self, _name: &str, f: &fn()) { f() }\n     fn emit_enum_variant(&self, name: &str, _id: uint, cnt: uint, f: &fn()) {\n@@ -818,36 +805,19 @@ impl<'self> serialize::Decoder for Decoder<'self> {\n \n     fn read_char(&self) -> char {\n         let mut v = ~[];\n-        for str::each_char(self.read_owned_str()) |c| { v.push(c) }\n+        for str::each_char(self.read_str()) |c| { v.push(c) }\n         if v.len() != 1 { fail!(~\"string must have one character\") }\n         v[0]\n     }\n \n-    fn read_owned_str(&self) -> ~str {\n-        debug!(\"read_owned_str\");\n+    fn read_str(&self) -> ~str {\n+        debug!(\"read_str\");\n         match *self.pop() {\n             String(ref s) => copy *s,\n             ref json => fail!(fmt!(\"not a string: %?\", *json))\n         }\n     }\n \n-    fn read_managed_str(&self) -> @str {\n-        debug!(\"read_managed_str\");\n-        match *self.pop() {\n-            String(ref s) => s.to_managed(),\n-            ref json => fail!(fmt!(\"not a string: %?\", *json))\n-        }\n-    }\n-\n-    fn read_owned<T>(&self, f: &fn() -> T) -> T {\n-        debug!(\"read_owned()\");\n-        f()\n-    }\n-\n-    fn read_managed<T>(&self, f: &fn() -> T) -> T {\n-        debug!(\"read_managed()\");\n-        f()\n-    }\n \n     fn read_enum<T>(&self, name: &str, f: &fn() -> T) -> T {\n         debug!(\"read_enum(%s)\", name);"}, {"sha": "daf834dad2ed8c665cc4274c3be80c9cca895a8a", "filename": "src/libstd/serialize.rs", "status": "modified", "additions": 7, "deletions": 15, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8b43c620b971bc3cbae61ca8390ec34355add445/src%2Flibstd%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b43c620b971bc3cbae61ca8390ec34355add445/src%2Flibstd%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fserialize.rs?ref=8b43c620b971bc3cbae61ca8390ec34355add445", "patch": "@@ -38,9 +38,7 @@ pub trait Encoder {\n     fn emit_f64(&self, v: f64);\n     fn emit_f32(&self, v: f32);\n     fn emit_char(&self, v: char);\n-    fn emit_borrowed_str(&self, v: &str);\n-    fn emit_owned_str(&self, v: &str);\n-    fn emit_managed_str(&self, v: &str);\n+    fn emit_str(&self, v: &str);\n \n     // Compound types:\n     fn emit_borrowed(&self, f: &fn());\n@@ -87,20 +85,16 @@ pub trait Decoder {\n     fn read_f32(&self) -> f32;\n     fn read_float(&self) -> float;\n     fn read_char(&self) -> char;\n-    fn read_owned_str(&self) -> ~str;\n-    fn read_managed_str(&self) -> @str;\n+    fn read_str(&self) -> ~str;\n \n     // Compound types:\n     fn read_enum<T>(&self, name: &str, f: &fn() -> T) -> T;\n-\n     #[cfg(stage0)]\n     fn read_enum_variant<T>(&self, f: &fn(uint) -> T) -> T;\n-\n     #[cfg(stage1)]\n     #[cfg(stage2)]\n     #[cfg(stage3)]\n     fn read_enum_variant<T>(&self, names: &[&str], f: &fn(uint) -> T) -> T;\n-\n     fn read_enum_variant_arg<T>(&self, idx: uint, f: &fn() -> T) -> T;\n \n     fn read_owned<T>(&self, f: &fn() -> T) -> T;\n@@ -230,27 +224,25 @@ impl<D:Decoder> Decodable<D> for i64 {\n }\n \n impl<'self, S:Encoder> Encodable<S> for &'self str {\n-    fn encode(&self, s: &S) { s.emit_borrowed_str(*self) }\n+    fn encode(&self, s: &S) { s.emit_str(*self) }\n }\n \n impl<S:Encoder> Encodable<S> for ~str {\n-    fn encode(&self, s: &S) { s.emit_owned_str(*self) }\n+    fn encode(&self, s: &S) { s.emit_str(*self) }\n }\n \n impl<D:Decoder> Decodable<D> for ~str {\n     fn decode(d: &D) -> ~str {\n-        d.read_owned_str()\n+        d.read_str()\n     }\n }\n \n impl<S:Encoder> Encodable<S> for @str {\n-    fn encode(&self, s: &S) { s.emit_managed_str(*self) }\n+    fn encode(&self, s: &S) { s.emit_str(*self) }\n }\n \n impl<D:Decoder> Decodable<D> for @str {\n-    fn decode(d: &D) -> @str {\n-        d.read_managed_str()\n-    }\n+    fn decode(d: &D) -> @str { d.read_str().to_managed() }\n }\n \n impl<S:Encoder> Encodable<S> for float {"}, {"sha": "78debbba31ce22c0d4dd42fbcc294ab2fe6088c3", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b43c620b971bc3cbae61ca8390ec34355add445/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b43c620b971bc3cbae61ca8390ec34355add445/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=8b43c620b971bc3cbae61ca8390ec34355add445", "patch": "@@ -70,7 +70,7 @@ impl<S:Encoder> Encodable<S> for ident {\n             Some(intr) => intr\n         };\n \n-        s.emit_owned_str(*(*intr).get(*self));\n+        s.emit_str(*(*intr).get(*self));\n     }\n }\n \n@@ -83,7 +83,7 @@ impl<D:Decoder> Decodable<D> for ident {\n             Some(intr) => intr\n         };\n \n-        (*intr).intern(@d.read_owned_str())\n+        (*intr).intern(@d.read_str())\n     }\n }\n "}, {"sha": "54f9967e64a4ec67a8dae54aeabe0590ffae7c53", "filename": "src/libsyntax/ext/auto_encode.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8b43c620b971bc3cbae61ca8390ec34355add445/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b43c620b971bc3cbae61ca8390ec34355add445/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fauto_encode.rs?ref=8b43c620b971bc3cbae61ca8390ec34355add445", "patch": "@@ -1240,10 +1240,7 @@ mod test {\n         fn emit_float(&self, +_v: float) { self.add_unknown_to_log(); }\n \n         fn emit_char(&self, +_v: char) { self.add_unknown_to_log(); }\n-\n-        fn emit_borrowed_str(&self, +_v: &str) { self.add_unknown_to_log(); }\n-        fn emit_owned_str(&self, +_v: &str) { self.add_unknown_to_log(); }\n-        fn emit_managed_str(&self, +_v: &str) { self.add_unknown_to_log(); }\n+        fn emit_str(&self, +_v: &str) { self.add_unknown_to_log(); }\n \n         fn emit_borrowed(&self, f: &fn()) { self.add_unknown_to_log(); f() }\n         fn emit_owned(&self, f: &fn()) { self.add_unknown_to_log(); f() }"}]}