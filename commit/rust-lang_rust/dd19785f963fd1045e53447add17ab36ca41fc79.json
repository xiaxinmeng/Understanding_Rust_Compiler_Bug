{"sha": "dd19785f963fd1045e53447add17ab36ca41fc79", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkMTk3ODVmOTYzZmQxMDQ1ZTUzNDQ3YWRkMTdhYjM2Y2E0MWZjNzk=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-12-13T01:32:35Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-12-24T22:42:00Z"}, "message": "std: Handle prints with literally no context\n\nPrinting is an incredibly useful debugging utility, and it's not much help if\nyour debugging prints just trigger an obscure abort when you need them most. In\norder to handle this case, forcibly fall back to a libc::write implementation of\nprinting whenever a local task is not available.\n\nNote that this is *not* a 1:1 fallback. All 1:1 rust tasks will still have a\nlocal Task that it can go through (and stdio will be created through the local\nIO factory), this is only a fallback for \"no context\" rust code (such as that\nsetting up the context).", "tree": {"sha": "89018b18de5b1b9afde15db1e61e25fc73770d1c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89018b18de5b1b9afde15db1e61e25fc73770d1c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd19785f963fd1045e53447add17ab36ca41fc79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd19785f963fd1045e53447add17ab36ca41fc79", "html_url": "https://github.com/rust-lang/rust/commit/dd19785f963fd1045e53447add17ab36ca41fc79", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd19785f963fd1045e53447add17ab36ca41fc79/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4538369566b8b51fc8371253aa90f9725547a193", "url": "https://api.github.com/repos/rust-lang/rust/commits/4538369566b8b51fc8371253aa90f9725547a193", "html_url": "https://github.com/rust-lang/rust/commit/4538369566b8b51fc8371253aa90f9725547a193"}], "stats": {"total": 29, "additions": 25, "deletions": 4}, "files": [{"sha": "88047aecda261d88be2cb5fe9d8775b8d62ca385", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dd19785f963fd1045e53447add17ab36ca41fc79/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd19785f963fd1045e53447add17ab36ca41fc79/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=dd19785f963fd1045e53447add17ab36ca41fc79", "patch": "@@ -132,7 +132,17 @@ fn with_task_stdout(f: |&mut Writer|) {\n             }\n \n             None => {\n-                let mut io = stdout();\n+                struct Stdout;\n+                impl Writer for Stdout {\n+                    fn write(&mut self, data: &[u8]) {\n+                        unsafe {\n+                            libc::write(libc::STDOUT_FILENO,\n+                                        vec::raw::to_ptr(data) as *libc::c_void,\n+                                        data.len() as libc::size_t);\n+                        }\n+                    }\n+                }\n+                let mut io = Stdout;\n                 f(&mut io as &mut Writer);\n             }\n         }"}, {"sha": "2f3e5be39e68b333bf349ea4c7893cf2a14e722f", "filename": "src/libstd/rt/util.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/dd19785f963fd1045e53447add17ab36ca41fc79/src%2Flibstd%2Frt%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd19785f963fd1045e53447add17ab36ca41fc79/src%2Flibstd%2Frt%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Futil.rs?ref=dd19785f963fd1045e53447add17ab36ca41fc79", "patch": "@@ -68,11 +68,22 @@ pub fn default_sched_threads() -> uint {\n }\n \n pub fn dumb_println(args: &fmt::Arguments) {\n-    use io::native::file::FileDesc;\n     use io;\n     use libc;\n-    let mut out = FileDesc::new(libc::STDERR_FILENO, false);\n-    fmt::writeln(&mut out as &mut io::Writer, args);\n+    use vec;\n+\n+    struct Stderr;\n+    impl io::Writer for Stderr {\n+        fn write(&mut self, data: &[u8]) {\n+            unsafe {\n+                libc::write(libc::STDERR_FILENO,\n+                            vec::raw::to_ptr(data) as *libc::c_void,\n+                            data.len() as libc::size_t);\n+            }\n+        }\n+    }\n+    let mut w = Stderr;\n+    fmt::writeln(&mut w as &mut io::Writer, args);\n }\n \n pub fn abort(msg: &str) -> ! {"}]}