{"sha": "134946d06e6926e087a792ac13c7f4421591afed", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzNDk0NmQwNmU2OTI2ZTA4N2E3OTJhYzEzYzdmNDQyMTU5MWFmZWQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-07-29T04:26:21Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-07-31T14:30:17Z"}, "message": "rustrt: Make begin_unwind take a single file/line pointer\n\nSmaller text size.", "tree": {"sha": "f167e44b94f54bfb2f405d8a59a77352c9a894c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f167e44b94f54bfb2f405d8a59a77352c9a894c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/134946d06e6926e087a792ac13c7f4421591afed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/134946d06e6926e087a792ac13c7f4421591afed", "html_url": "https://github.com/rust-lang/rust/commit/134946d06e6926e087a792ac13c7f4421591afed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/134946d06e6926e087a792ac13c7f4421591afed/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "571f6cf29ae181098e3aff43a5f8e345be6708e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/571f6cf29ae181098e3aff43a5f8e345be6708e9", "html_url": "https://github.com/rust-lang/rust/commit/571f6cf29ae181098e3aff43a5f8e345be6708e9"}], "stats": {"total": 63, "additions": 57, "deletions": 6}, "files": [{"sha": "344d3a0f103d3138eec1d743676f0821c1df19d0", "filename": "src/librustrt/unwind.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/134946d06e6926e087a792ac13c7f4421591afed/src%2Flibrustrt%2Funwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/134946d06e6926e087a792ac13c7f4421591afed/src%2Flibrustrt%2Funwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Funwind.rs?ref=134946d06e6926e087a792ac13c7f4421591afed", "patch": "@@ -417,8 +417,8 @@ pub fn begin_unwind_fmt(msg: &fmt::Arguments, file_line: &(&'static str, uint))\n     begin_unwind_inner(box String::from_utf8(v).unwrap(), file_line)\n }\n \n-// FIXME: Need to change expr_fail in AstBuilder to change this to &(str, uint)\n /// This is the entry point of unwinding for fail!() and assert!().\n+#[cfg(stage0)]\n #[inline(never)] #[cold] // avoid code bloat at the call sites as much as possible\n pub fn begin_unwind<M: Any + Send>(msg: M, file: &'static str, line: uint) -> ! {\n     // Note that this should be the only allocation performed in this code path.\n@@ -432,6 +432,21 @@ pub fn begin_unwind<M: Any + Send>(msg: M, file: &'static str, line: uint) -> !\n     begin_unwind_inner(box msg, &(file, line))\n }\n \n+/// This is the entry point of unwinding for fail!() and assert!().\n+#[cfg(not(stage0))]\n+#[inline(never)] #[cold] // avoid code bloat at the call sites as much as possible\n+pub fn begin_unwind<M: Any + Send>(msg: M, file_line: &(&'static str, uint)) -> ! {\n+    // Note that this should be the only allocation performed in this code path.\n+    // Currently this means that fail!() on OOM will invoke this code path,\n+    // but then again we're not really ready for failing on OOM anyway. If\n+    // we do start doing this, then we should propagate this allocation to\n+    // be performed in the parent of this task instead of the task that's\n+    // failing.\n+\n+    // see below for why we do the `Any` coercion here.\n+    begin_unwind_inner(box msg, file_line)\n+}\n+\n /// The core of the unwinding.\n ///\n /// This is non-generic to avoid instantiation bloat in other crates"}, {"sha": "e67329df7aec4beae2b8af3baadaa192aabda700", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/134946d06e6926e087a792ac13c7f4421591afed/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/134946d06e6926e087a792ac13c7f4421591afed/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=134946d06e6926e087a792ac13c7f4421591afed", "patch": "@@ -37,6 +37,39 @@\n /// fail!(\"this is a {} {message}\", \"fancy\", message = \"message\");\n /// ```\n #[macro_export]\n+#[cfg(not(stage0))]\n+macro_rules! fail(\n+    () => ({\n+        fail!(\"explicit failure\")\n+    });\n+    ($msg:expr) => ({\n+        // static requires less code at runtime, more constant data\n+        static FILE_LINE: (&'static str, uint) = (file!(), line!());\n+        ::std::rt::begin_unwind($msg, &FILE_LINE)\n+    });\n+    ($fmt:expr, $($arg:tt)*) => ({\n+        // a closure can't have return type !, so we need a full\n+        // function to pass to format_args!, *and* we need the\n+        // file and line numbers right here; so an inner bare fn\n+        // is our only choice.\n+        //\n+        // LLVM doesn't tend to inline this, presumably because begin_unwind_fmt\n+        // is #[cold] and #[inline(never)] and because this is flagged as cold\n+        // as returning !. We really do want this to be inlined, however,\n+        // because it's just a tiny wrapper. Small wins (156K to 149K in size)\n+        // were seen when forcing this to be inlined, and that number just goes\n+        // up with the number of calls to fail!()\n+        #[inline(always)]\n+        fn run_fmt(fmt: &::std::fmt::Arguments) -> ! {\n+            static FILE_LINE: (&'static str, uint) = (file!(), line!());\n+            ::std::rt::begin_unwind_fmt(fmt, &FILE_LINE)\n+        }\n+        format_args!(run_fmt, $fmt, $($arg)*)\n+    });\n+)\n+\n+#[macro_export]\n+#[cfg(stage0)]\n macro_rules! fail(\n     () => ({\n         fail!(\"explicit failure\")"}, {"sha": "33daefa3e06b1a516cde3f069171c75d1763eed5", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/134946d06e6926e087a792ac13c7f4421591afed/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/134946d06e6926e087a792ac13c7f4421591afed/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=134946d06e6926e087a792ac13c7f4421591afed", "patch": "@@ -690,6 +690,13 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n \n     fn expr_fail(&self, span: Span, msg: InternedString) -> Gc<ast::Expr> {\n         let loc = self.codemap().lookup_char_pos(span.lo);\n+        let expr_file = self.expr_str(span,\n+                                      token::intern_and_get_ident(loc.file\n+                                                                  .name\n+                                                                  .as_slice()));\n+        let expr_line = self.expr_uint(span, loc.line);\n+        let expr_file_line_tuple = self.expr_tuple(span, vec!(expr_file, expr_line));\n+        let expr_file_line_ptr = self.expr_addr_of(span, expr_file_line_tuple);\n         self.expr_call_global(\n             span,\n             vec!(\n@@ -698,11 +705,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n                 self.ident_of(\"begin_unwind\")),\n             vec!(\n                 self.expr_str(span, msg),\n-                self.expr_str(span,\n-                              token::intern_and_get_ident(loc.file\n-                                                             .name\n-                                                             .as_slice())),\n-                self.expr_uint(span, loc.line)))\n+                expr_file_line_ptr))\n     }\n \n     fn expr_unreachable(&self, span: Span) -> Gc<ast::Expr> {"}]}