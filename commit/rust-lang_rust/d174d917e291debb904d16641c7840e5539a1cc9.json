{"sha": "d174d917e291debb904d16641c7840e5539a1cc9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxNzRkOTE3ZTI5MWRlYmI5MDRkMTY2NDFjNzg0MGU1NTM5YTFjYzk=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-09-22T22:28:49Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-09-22T22:28:49Z"}, "message": "Calculate the correct kind for unique boxes\n\nIssue #409", "tree": {"sha": "ae4d8d48cf961f3c9aee028865297070af38ba8c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae4d8d48cf961f3c9aee028865297070af38ba8c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d174d917e291debb904d16641c7840e5539a1cc9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d174d917e291debb904d16641c7840e5539a1cc9", "html_url": "https://github.com/rust-lang/rust/commit/d174d917e291debb904d16641c7840e5539a1cc9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d174d917e291debb904d16641c7840e5539a1cc9/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61a14f3df06606ab20a2123fa00366dbc37f9092", "url": "https://api.github.com/repos/rust-lang/rust/commits/61a14f3df06606ab20a2123fa00366dbc37f9092", "html_url": "https://github.com/rust-lang/rust/commit/61a14f3df06606ab20a2123fa00366dbc37f9092"}], "stats": {"total": 74, "additions": 69, "deletions": 5}, "files": [{"sha": "ab836a22e01593946cf05aac4bdaae8b51f8c4c5", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d174d917e291debb904d16641c7840e5539a1cc9/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d174d917e291debb904d16641c7840e5539a1cc9/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=d174d917e291debb904d16641c7840e5539a1cc9", "patch": "@@ -1019,13 +1019,9 @@ fn type_kind(cx: ctxt, ty: t) -> ast::kind {\n       ty_box(mt) {\n         result = ast::kind_shared;\n       }\n-      ty_uniq(mt) {\n-        // FIXME (409): Calculate kind\n-        result = ast::kind_unique;\n-      }\n       // Pointers and unique boxes / vecs raise pinned to shared,\n       // otherwise pass through their pointee kind.\n-      ty_ptr(tm) | ty_vec(tm) {\n+      ty_ptr(tm) | ty_vec(tm) | ty_uniq(tm) {\n         let k = type_kind(cx, tm.ty);\n         if k == ast::kind_pinned { k = ast::kind_shared; }\n         result = kind::lower_kind(result, k);"}, {"sha": "b40cf0770c08630e7bca6f7813246c606c744f63", "filename": "src/test/compile-fail/unique-unique-kind.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d174d917e291debb904d16641c7840e5539a1cc9/src%2Ftest%2Fcompile-fail%2Funique-unique-kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d174d917e291debb904d16641c7840e5539a1cc9/src%2Ftest%2Fcompile-fail%2Funique-unique-kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-unique-kind.rs?ref=d174d917e291debb904d16641c7840e5539a1cc9", "patch": "@@ -0,0 +1,9 @@\n+// error-pattern: needed unique type\n+\n+fn f<~T>(i: T) {\n+}\n+\n+fn main() {\n+    let i = ~@100;\n+    f(i);\n+}\n\\ No newline at end of file"}, {"sha": "2b3f79899a9e30ebbeedf51eb7c9ebea0535920e", "filename": "src/test/run-pass/unique-kinds.rs", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/d174d917e291debb904d16641c7840e5539a1cc9/src%2Ftest%2Frun-pass%2Funique-kinds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d174d917e291debb904d16641c7840e5539a1cc9/src%2Ftest%2Frun-pass%2Funique-kinds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-kinds.rs?ref=d174d917e291debb904d16641c7840e5539a1cc9", "patch": "@@ -0,0 +1,59 @@\n+fn unique() {\n+\n+    fn f<~T>(i: T, j: T) {\n+        assert i == j;\n+    }\n+\n+    fn g<~T>(i: T, j: T) {\n+        assert i != j;\n+    }\n+\n+    let i = ~100;\n+    let j = ~100;\n+    f(i, j);\n+    let i = ~100;\n+    let j = ~101;\n+    g(i, j);\n+}\n+\n+fn shared() {\n+\n+    fn f<@T>(i: T, j: T) {\n+        assert i == j;\n+    }\n+\n+    fn g<@T>(i: T, j: T) {\n+        assert i != j;\n+    }\n+\n+    let i = ~100;\n+    let j = ~100;\n+    f(i, j);\n+    let i = ~100;\n+    let j = ~101;\n+    g(i, j);\n+}\n+\n+fn pinned() {\n+\n+    fn f<T>(i: T, j: T) {\n+        assert i == j;\n+    }\n+\n+    fn g<T>(i: T, j: T) {\n+        assert i != j;\n+    }\n+\n+    let i = ~100;\n+    let j = ~100;\n+    f(i, j);\n+    let i = ~100;\n+    let j = ~101;\n+    g(i, j);\n+}\n+\n+fn main() {\n+    unique();\n+    shared();\n+    pinned();\n+}\n\\ No newline at end of file"}]}