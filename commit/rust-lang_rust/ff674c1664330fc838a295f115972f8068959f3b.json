{"sha": "ff674c1664330fc838a295f115972f8068959f3b", "node_id": "C_kwDOAAsO6NoAKGZmNjc0YzE2NjQzMzBmYzgzOGEyOTVmMTE1OTcyZjgwNjg5NTlmM2I", "commit": {"author": {"name": "jyn", "email": "github@jyn.dev", "date": "2023-04-20T02:34:30Z"}, "committer": {"name": "jyn", "email": "github@jyn.dev", "date": "2023-04-29T16:51:57Z"}, "message": "Convert the rest of the `test` Steps to run_cargo_test", "tree": {"sha": "ef578fdf04bafeacb7dc8e4cc84092d4f177b79e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef578fdf04bafeacb7dc8e4cc84092d4f177b79e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff674c1664330fc838a295f115972f8068959f3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff674c1664330fc838a295f115972f8068959f3b", "html_url": "https://github.com/rust-lang/rust/commit/ff674c1664330fc838a295f115972f8068959f3b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff674c1664330fc838a295f115972f8068959f3b/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "107257eedc3d351b7c1a02cddee89e52db5808e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/107257eedc3d351b7c1a02cddee89e52db5808e9", "html_url": "https://github.com/rust-lang/rust/commit/107257eedc3d351b7c1a02cddee89e52db5808e9"}], "stats": {"total": 164, "additions": 79, "deletions": 85}, "files": [{"sha": "a1d46f4e33d93caea70f4241b5952ac7e5ffa6ea", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 79, "deletions": 85, "changes": 164, "blob_url": "https://github.com/rust-lang/rust/blob/ff674c1664330fc838a295f115972f8068959f3b/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff674c1664330fc838a295f115972f8068959f3b/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=ff674c1664330fc838a295f115972f8068959f3b", "patch": "@@ -13,6 +13,7 @@ use std::process::{Command, Stdio};\n use crate::builder::crate_description;\n use crate::builder::{Builder, Compiler, Kind, RunConfig, ShouldRun, Step};\n use crate::cache::Interned;\n+use crate::cache::INTERNER;\n use crate::compile;\n use crate::config::TargetSelection;\n use crate::dist;\n@@ -85,7 +86,7 @@ impl Step for CrateJsonDocLint {\n             SourceType::InTree,\n             &[],\n         );\n-        add_flags_and_try_run_tests(builder, &mut cargo.into());\n+        run_cargo_test(cargo, &[], &[], compiler, bootstrap_host, builder);\n     }\n }\n \n@@ -111,7 +112,7 @@ impl Step for SuggestTestsCrate {\n         let bootstrap_host = builder.config.build;\n         let compiler = builder.compiler(0, bootstrap_host);\n \n-        let suggest_tests = tool::prepare_tool_cargo(\n+        let cargo = tool::prepare_tool_cargo(\n             builder,\n             compiler,\n             Mode::ToolBootstrap,\n@@ -121,7 +122,7 @@ impl Step for SuggestTestsCrate {\n             SourceType::InTree,\n             &[],\n         );\n-        add_flags_and_try_run_tests(builder, &mut suggest_tests.into());\n+        run_cargo_test(cargo, &[], &[], compiler, bootstrap_host, builder);\n     }\n }\n \n@@ -170,7 +171,7 @@ You can skip linkcheck with --exclude src/tools/linkchecker\"\n             SourceType::InTree,\n             &[],\n         );\n-        add_flags_and_try_run_tests(builder, &mut cargo.into());\n+        run_cargo_test(cargo, &[], &[], compiler, bootstrap_host, builder);\n \n         // Build all the default documentation.\n         builder.default_doc(&[]);\n@@ -306,7 +307,7 @@ impl Step for Cargo {\n         let compiler = builder.compiler(self.stage, self.host);\n \n         builder.ensure(tool::Cargo { compiler, target: self.host });\n-        let mut cargo = tool::prepare_tool_cargo(\n+        let cargo = tool::prepare_tool_cargo(\n             builder,\n             compiler,\n             Mode::ToolRustc,\n@@ -317,21 +318,19 @@ impl Step for Cargo {\n             &[],\n         );\n \n-        if !builder.fail_fast {\n-            cargo.arg(\"--no-fail-fast\");\n-        }\n-        cargo.arg(\"--\").args(builder.config.cmd.test_args());\n+        // NOTE: can't use `run_cargo_test` because we need to overwrite `PATH`\n+        let mut cargo = prepare_cargo_test(cargo, &[], &[], compiler, self.host, builder);\n \n         // Don't run cross-compile tests, we may not have cross-compiled libstd libs\n         // available.\n         cargo.env(\"CFG_DISABLE_CROSS_TESTS\", \"1\");\n         // Forcibly disable tests using nightly features since any changes to\n         // those features won't be able to land.\n         cargo.env(\"CARGO_TEST_DISABLE_NIGHTLY\", \"1\");\n-\n         cargo.env(\"PATH\", &path_for_cargo(builder, compiler));\n \n-        add_flags_and_try_run_tests(builder, &mut cargo.into());\n+        let _time = util::timeit(&builder);\n+        add_flags_and_try_run_tests(builder, &mut cargo);\n     }\n }\n \n@@ -388,9 +387,7 @@ impl Step for RustAnalyzer {\n         cargo.env(\"SKIP_SLOW_TESTS\", \"1\");\n \n         cargo.add_rustc_lib_path(builder, compiler);\n-        cargo.arg(\"--\").args(builder.config.cmd.test_args());\n-\n-        add_flags_and_try_run_tests(builder, &mut cargo.into());\n+        run_cargo_test(cargo, &[], &[], compiler, host, builder);\n     }\n }\n \n@@ -433,17 +430,13 @@ impl Step for Rustfmt {\n             &[],\n         );\n \n-        if !builder.fail_fast {\n-            cargo.arg(\"--no-fail-fast\");\n-        }\n-\n         let dir = testdir(builder, compiler.host);\n         t!(fs::create_dir_all(&dir));\n         cargo.env(\"RUSTFMT_TEST_DIR\", dir);\n \n         cargo.add_rustc_lib_path(builder, compiler);\n \n-        add_flags_and_try_run_tests(builder, &mut cargo.into());\n+        run_cargo_test(cargo, &[], &[], compiler, host, builder);\n     }\n }\n \n@@ -489,12 +482,9 @@ impl Step for RustDemangler {\n         t!(fs::create_dir_all(&dir));\n \n         cargo.env(\"RUST_DEMANGLER_DRIVER_PATH\", rust_demangler);\n-\n-        cargo.arg(\"--\").args(builder.config.cmd.test_args());\n-\n         cargo.add_rustc_lib_path(builder, compiler);\n \n-        add_flags_and_try_run_tests(builder, &mut cargo.into());\n+        run_cargo_test(cargo, &[], &[], compiler, host, builder);\n     }\n }\n \n@@ -617,10 +607,6 @@ impl Step for Miri {\n         );\n         cargo.add_rustc_lib_path(builder, compiler);\n \n-        if !builder.fail_fast {\n-            cargo.arg(\"--no-fail-fast\");\n-        }\n-\n         // miri tests need to know about the stage sysroot\n         cargo.env(\"MIRI_SYSROOT\", &miri_sysroot);\n         cargo.env(\"MIRI_HOST_SYSROOT\", sysroot);\n@@ -632,13 +618,14 @@ impl Step for Miri {\n \n         // Set the target.\n         cargo.env(\"MIRI_TEST_TARGET\", target.rustc_target_arg());\n-        // Forward test filters.\n-        cargo.arg(\"--\").args(builder.config.cmd.test_args());\n \n-        // This can NOT be `add_flags_and_try_run_tests` since the Miri test runner\n-        // does not understand those flags!\n-        let mut cargo = Command::from(cargo);\n-        builder.run(&mut cargo);\n+        // This can NOT be `run_cargo_test` since the Miri test runner\n+        // does not understand the flags added by `add_flags_and_try_run_test`.\n+        let mut cargo = prepare_cargo_test(cargo, &[], &[], compiler, target, builder);\n+        {\n+            let _time = util::timeit(&builder);\n+            builder.run(&mut cargo);\n+        }\n \n         // # Run `cargo miri test`.\n         // This is just a smoke test (Miri's own CI invokes this in a bunch of different ways and ensures\n@@ -671,6 +658,7 @@ impl Step for Miri {\n         cargo.env(\"RUST_BACKTRACE\", \"1\");\n \n         let mut cargo = Command::from(cargo);\n+        let _time = util::timeit(&builder);\n         builder.run(&mut cargo);\n     }\n }\n@@ -710,8 +698,7 @@ impl Step for CompiletestTest {\n             &[],\n         );\n         cargo.allow_features(\"test\");\n-\n-        add_flags_and_try_run_tests(builder, &mut cargo.into());\n+        run_cargo_test(cargo, &[], &[], compiler, host, builder);\n     }\n }\n \n@@ -763,11 +750,10 @@ impl Step for Clippy {\n         let host_libs = builder.stage_out(compiler, Mode::ToolRustc).join(builder.cargo_dir());\n         cargo.env(\"HOST_LIBS\", host_libs);\n \n-        cargo.arg(\"--\").args(builder.config.cmd.test_args());\n-\n         cargo.add_rustc_lib_path(builder, compiler);\n+        let mut cargo = prepare_cargo_test(cargo, &[], &[], compiler, host, builder);\n \n-        if builder.try_run(&mut cargo.into()) {\n+        if builder.try_run(&mut cargo) {\n             // The tests succeeded; nothing to do.\n             return;\n         }\n@@ -1195,7 +1181,7 @@ impl Step for TidySelfTest {\n             SourceType::InTree,\n             &[],\n         );\n-        add_flags_and_try_run_tests(builder, &mut cargo.into());\n+        run_cargo_test(cargo, &[], &[], compiler, bootstrap_host, builder);\n     }\n }\n \n@@ -2108,8 +2094,31 @@ impl Step for CrateLibrustc {\n     }\n }\n \n-// Given a `cargo test` subcommand, pass it the appropriate test flags given a `builder`.\n-fn run_cargo_test(cargo: impl Into<Command>, libtest_args: &[&str], crates: &[Interned<String>], compiler: Compiler, target: TargetSelection, builder: &Builder<'_>) {\n+/// Given a `cargo test` subcommand, add the appropriate flags and run it.\n+///\n+/// Returns whether the test succeeded.\n+fn run_cargo_test(\n+    cargo: impl Into<Command>,\n+    libtest_args: &[&str],\n+    crates: &[Interned<String>],\n+    compiler: Compiler,\n+    target: TargetSelection,\n+    builder: &Builder<'_>,\n+) -> bool {\n+    let mut cargo = prepare_cargo_test(cargo, libtest_args, crates, compiler, target, builder);\n+    let _time = util::timeit(&builder);\n+    add_flags_and_try_run_tests(builder, &mut cargo)\n+}\n+\n+/// Given a `cargo test` subcommand, pass it the appropriate test flags given a `builder`.\n+fn prepare_cargo_test(\n+    cargo: impl Into<Command>,\n+    libtest_args: &[&str],\n+    crates: &[Interned<String>],\n+    compiler: Compiler,\n+    target: TargetSelection,\n+    builder: &Builder<'_>,\n+) -> Command {\n     let mut cargo = cargo.into();\n \n     // Pass in some standard flags then iterate over the graph we've discovered\n@@ -2132,6 +2141,11 @@ fn run_cargo_test(cargo: impl Into<Command>, libtest_args: &[&str], crates: &[In\n         cargo.arg(\"-p\").arg(krate);\n     }\n \n+    cargo.arg(\"--\").args(&builder.config.cmd.test_args()).args(libtest_args);\n+    if !builder.config.verbose_tests {\n+        cargo.arg(\"--quiet\");\n+    }\n+\n     // The tests are going to run with the *target* libraries, so we need to\n     // ensure that those libraries show up in the LD_LIBRARY_PATH equivalent.\n     //\n@@ -2157,9 +2171,7 @@ fn run_cargo_test(cargo: impl Into<Command>, libtest_args: &[&str], crates: &[In\n         );\n     }\n \n-    cargo.arg(\"--\").args(&builder.config.cmd.test_args()).args(libtest_args);\n-    let _time = util::timeit(&builder);\n-    add_flags_and_try_run_tests(builder, &mut cargo);\n+    cargo\n }\n \n #[derive(Debug, Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]\n@@ -2281,24 +2293,6 @@ impl Step for CrateRustdoc {\n             SourceType::InTree,\n             &[],\n         );\n-        if builder.kind == Kind::Test && !builder.fail_fast {\n-            cargo.arg(\"--no-fail-fast\");\n-        }\n-        match builder.doc_tests {\n-            DocTests::Only => {\n-                cargo.arg(\"--doc\");\n-            }\n-            DocTests::No => {\n-                cargo.args(&[\"--lib\", \"--bins\", \"--examples\", \"--tests\", \"--benches\"]);\n-            }\n-            DocTests::Yes => {}\n-        }\n-\n-        cargo.arg(\"-p\").arg(\"rustdoc:0.0.0\");\n-\n-        cargo.arg(\"--\");\n-        cargo.args(&builder.config.cmd.test_args());\n-\n         if self.host.contains(\"musl\") {\n             cargo.arg(\"'-Ctarget-feature=-crt-static'\");\n         }\n@@ -2338,15 +2332,15 @@ impl Step for CrateRustdoc {\n         dylib_path.insert(0, PathBuf::from(&*libdir));\n         cargo.env(dylib_path_var(), env::join_paths(&dylib_path).unwrap());\n \n-        if !builder.config.verbose_tests {\n-            cargo.arg(\"--quiet\");\n-        }\n-\n         let _guard = builder.msg(builder.kind, compiler.stage, \"rustdoc\", compiler.host, target);\n-\n-        let _time = util::timeit(&builder);\n-\n-        add_flags_and_try_run_tests(builder, &mut cargo.into());\n+        run_cargo_test(\n+            cargo,\n+            &[],\n+            &[INTERNER.intern_str(\"rustdoc:0.0.0\")],\n+            compiler,\n+            target,\n+            builder,\n+        );\n     }\n }\n \n@@ -2380,7 +2374,7 @@ impl Step for CrateRustdocJsonTypes {\n         let compiler = builder.compiler_for(builder.top_stage, target, target);\n         builder.ensure(compile::Rustc::new(compiler, target));\n \n-        let mut cargo = tool::prepare_tool_cargo(\n+        let cargo = tool::prepare_tool_cargo(\n             builder,\n             compiler,\n             Mode::ToolRustc,\n@@ -2390,24 +2384,24 @@ impl Step for CrateRustdocJsonTypes {\n             SourceType::InTree,\n             &[],\n         );\n-        if builder.kind == Kind::Test && !builder.fail_fast {\n-            cargo.arg(\"--no-fail-fast\");\n-        }\n-\n-        cargo.arg(\"-p\").arg(\"rustdoc-json-types\");\n \n-        cargo.arg(\"--\");\n-        cargo.args(&builder.config.cmd.test_args());\n-\n-        if self.host.contains(\"musl\") {\n-            cargo.arg(\"'-Ctarget-feature=-crt-static'\");\n-        }\n+        // FIXME: this looks very wrong, libtest doesn't accept `-C` arguments and the quotes are fishy.\n+        let libtest_args = if self.host.contains(\"musl\") {\n+            [\"'-Ctarget-feature=-crt-static'\"].as_slice()\n+        } else {\n+            &[]\n+        };\n \n         let _guard =\n             builder.msg(builder.kind, compiler.stage, \"rustdoc-json-types\", compiler.host, target);\n-        let _time = util::timeit(&builder);\n-\n-        add_flags_and_try_run_tests(builder, &mut cargo.into());\n+        run_cargo_test(\n+            cargo,\n+            libtest_args,\n+            &[INTERNER.intern_str(\"rustdoc-json-types\")],\n+            compiler,\n+            target,\n+            builder,\n+        );\n     }\n }\n "}]}