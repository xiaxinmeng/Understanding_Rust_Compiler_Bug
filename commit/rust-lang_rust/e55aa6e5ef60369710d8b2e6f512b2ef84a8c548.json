{"sha": "e55aa6e5ef60369710d8b2e6f512b2ef84a8c548", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1NWFhNmU1ZWY2MDM2OTcxMGQ4YjJlNmY1MTJiMmVmODRhOGM1NDg=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-01-12T05:31:36Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-01-12T21:47:38Z"}, "message": "free uniq data we encounter on the sweep, walk thru them otherwise", "tree": {"sha": "fdb6e14395d7b7a95903bcfb6fab91a5fbf02d42", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fdb6e14395d7b7a95903bcfb6fab91a5fbf02d42"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e55aa6e5ef60369710d8b2e6f512b2ef84a8c548", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e55aa6e5ef60369710d8b2e6f512b2ef84a8c548", "html_url": "https://github.com/rust-lang/rust/commit/e55aa6e5ef60369710d8b2e6f512b2ef84a8c548", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e55aa6e5ef60369710d8b2e6f512b2ef84a8c548/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4a3a3b8780d88e013a8916eea6cc9a8c2c5d890", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4a3a3b8780d88e013a8916eea6cc9a8c2c5d890", "html_url": "https://github.com/rust-lang/rust/commit/f4a3a3b8780d88e013a8916eea6cc9a8c2c5d890"}], "stats": {"total": 695, "additions": 433, "deletions": 262}, "files": [{"sha": "3f7c6cefca1769713e79551bb11d272044fc08af", "filename": "src/comp/middle/shape.rs", "status": "modified", "additions": 29, "deletions": 5, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/e55aa6e5ef60369710d8b2e6f512b2ef84a8c548/src%2Fcomp%2Fmiddle%2Fshape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e55aa6e5ef60369710d8b2e6f512b2ef84a8c548/src%2Fcomp%2Fmiddle%2Fshape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fshape.rs?ref=e55aa6e5ef60369710d8b2e6f512b2ef84a8c548", "patch": "@@ -46,13 +46,18 @@ const shape_vec: u8 = 11u8;\n const shape_tag: u8 = 12u8;\n const shape_box: u8 = 13u8;\n const shape_struct: u8 = 17u8;\n-const shape_fn: u8 = 18u8;\n+const shape_box_fn: u8 = 18u8;\n const shape_obj: u8 = 19u8;\n const shape_res: u8 = 20u8;\n const shape_var: u8 = 21u8;\n const shape_uniq: u8 = 22u8;\n const shape_opaque_closure_ptr: u8 = 23u8; // the closure itself.\n const shape_iface: u8 = 24u8;\n+const shape_uniq_fn: u8 = 25u8;\n+const shape_stack_fn: u8 = 26u8;\n+const shape_bare_fn: u8 = 27u8;\n+const shape_tydesc: u8 = 28u8;\n+const shape_send_tydesc: u8 = 29u8;\n \n // FIXME: This is a bad API in trans_common.\n fn C_u8(n: u8) -> ValueRef { ret trans_common::C_u8(n as uint); }\n@@ -267,6 +272,14 @@ fn s_variant_tag_t(tcx: ty_ctxt) -> u8 {\n     ret s_int(tcx);\n }\n \n+fn s_tydesc(_tcx: ty_ctxt) -> u8 {\n+    ret shape_tydesc;\n+}\n+\n+fn s_send_tydesc(_tcx: ty_ctxt) -> u8 {\n+    ret shape_send_tydesc;\n+}\n+\n fn mk_ctxt(llmod: ModuleRef) -> ctxt {\n     let llshapetablesty = trans_common::T_named_struct(\"shapes\");\n     let llshapetables =\n@@ -305,8 +318,10 @@ fn shape_of(ccx: @crate_ctxt, t: ty::t, ty_param_map: [uint],\n       ty::ty_bot. { s += [shape_u8]; }\n       ty::ty_int(ast::ty_i.) { s += [s_int(ccx.tcx)]; }\n       ty::ty_float(ast::ty_f.) { s += [s_float(ccx.tcx)]; }\n-      ty::ty_uint(ast::ty_u.) | ty::ty_ptr(_) | ty::ty_type. |\n-      ty::ty_send_type. | ty::ty_native(_) { s += [s_uint(ccx.tcx)]; }\n+      ty::ty_uint(ast::ty_u.) | ty::ty_ptr(_) |\n+      ty::ty_native(_) { s += [s_uint(ccx.tcx)]; }\n+      ty::ty_type. { s += [s_tydesc(ccx.tcx)]; }\n+      ty::ty_send_type. { s += [s_send_tydesc(ccx.tcx)]; }\n       ty::ty_int(ast::ty_i8.) { s += [shape_i8]; }\n       ty::ty_uint(ast::ty_u16.) { s += [shape_u16]; }\n       ty::ty_int(ast::ty_i16.) { s += [shape_i16]; }\n@@ -418,8 +433,17 @@ fn shape_of(ccx: @crate_ctxt, t: ty::t, ty_param_map: [uint],\n             }\n         }\n       }\n-      ty::ty_fn(_) {\n-        s += [shape_fn];\n+      ty::ty_fn({proto: ast::proto_box., _}) {\n+        s += [shape_box_fn];\n+      }\n+      ty::ty_fn({proto: ast::proto_uniq., _}) {\n+        s += [shape_uniq_fn];\n+      }\n+      ty::ty_fn({proto: ast::proto_block., _}) {\n+        s += [shape_stack_fn];\n+      }\n+      ty::ty_fn({proto: ast::proto_bare., _}) {\n+        s += [shape_bare_fn];\n       }\n       ty::ty_opaque_closure_ptr(_) {\n         s += [shape_opaque_closure_ptr];"}, {"sha": "1f99fe98f71a548c366f2f7e8891126e297b109a", "filename": "src/rt/rust_cc.cpp", "status": "modified", "additions": 159, "deletions": 66, "changes": 225, "blob_url": "https://github.com/rust-lang/rust/blob/e55aa6e5ef60369710d8b2e6f512b2ef84a8c548/src%2Frt%2Frust_cc.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/e55aa6e5ef60369710d8b2e6f512b2ef84a8c548/src%2Frt%2Frust_cc.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_cc.cpp?ref=e55aa6e5ef60369710d8b2e6f512b2ef84a8c548", "patch": "@@ -18,6 +18,9 @@\n // collection.\n #define RUST_CC_FREQUENCY   5000\n \n+// defined in rust_upcall.cpp:\n+void upcall_s_free_shared_type_desc(type_desc *td);\n+\n namespace cc {\n \n // Internal reference count computation\n@@ -70,7 +73,7 @@ class irc : public shape::data<irc,shape::ptr> {\n                                   in_tables, in_data),\n       ircs(in_ircs) {}\n \n-    void walk_vec(bool is_pod, uint16_t sp_size) {\n+    void walk_vec2(bool is_pod, uint16_t sp_size) {\n         if (is_pod || shape::get_dp<void *>(dp) == NULL)\n             return;     // There can't be any outbound pointers from this.\n \n@@ -86,47 +89,63 @@ class irc : public shape::data<irc,shape::ptr> {\n         }\n     }\n \n-    void walk_tag(shape::tag_info &tinfo, uint32_t tag_variant) {\n-        shape::data<irc,shape::ptr>::walk_variant(tinfo, tag_variant);\n+    void walk_tag2(shape::tag_info &tinfo, uint32_t tag_variant) {\n+        shape::data<irc,shape::ptr>::walk_variant1(tinfo, tag_variant);\n     }\n \n-    void walk_box() {\n-        shape::data<irc,shape::ptr>::walk_box_contents();\n+    void walk_box2() {\n+        shape::data<irc,shape::ptr>::walk_box_contents1();\n     }\n \n-    void walk_fn() {\n-        // Record an irc for the environment box, but don't descend\n-        // into it since it will be walked via the box's allocation\n-        dp += sizeof(void *); // skip code pointer\n-        uint8_t * box_ptr = shape::bump_dp<uint8_t *>(dp);\n-        shape::ptr ref_count_dp(box_ptr);\n-        maybe_record_irc(ref_count_dp);\n+    void walk_uniq2() {\n+        shape::data<irc,shape::ptr>::walk_uniq_contents1();\n+    }\n+\n+    void walk_fn2(char code) {\n+        switch (code) {\n+          case shape::SHAPE_BOX_FN: {\n+              // Record an irc for the environment box, but don't descend\n+              // into it since it will be walked via the box's allocation\n+              shape::bump_dp<void*>(dp); // skip over the code ptr\n+              walk_box2();               // walk over the environment ptr\n+              break;\n+          }\n+          case shape::SHAPE_BARE_FN:        // Does not close over data.\n+          case shape::SHAPE_STACK_FN:       // Not reachable from heap.\n+          case shape::SHAPE_UNIQ_FN: break; /* Can only close over sendable\n+                                             * (and hence acyclic) data */\n+          default: abort();\n+        }\n     }\n \n-    void walk_obj() {\n+    void walk_obj2() {\n         dp += sizeof(void *); // skip vtable\n         uint8_t *box_ptr = shape::bump_dp<uint8_t *>(dp);\n         shape::ptr ref_count_dp(box_ptr);\n         maybe_record_irc(ref_count_dp);\n     }\n \n-    void walk_iface() {\n-        //shape::data<irc,shape::ptr>::walk_iface_contents(dp);\n-        shape::data<irc,shape::ptr>::walk_box_contents();\n+    void walk_iface2() {\n+        walk_box2();\n     }\n \n-    void walk_res(const shape::rust_fn *dtor, unsigned n_params,\n-                  const shape::type_param *params, const uint8_t *end_sp,\n-                  bool live) {\n+    void walk_tydesc2(char) {\n+    }\n+\n+    void walk_res2(const shape::rust_fn *dtor, unsigned n_params,\n+                   const shape::type_param *params, const uint8_t *end_sp,\n+                   bool live) {\n         while (this->sp != end_sp) {\n             this->walk();\n             align = true;\n         }\n     }\n \n-    void walk_subcontext(irc &sub) { sub.walk(); }\n+    void walk_subcontext2(irc &sub) { sub.walk(); }\n \n-    void walk_box_contents(irc &sub, shape::ptr &ref_count_dp) {\n+    void walk_uniq_contents2(irc &sub) { sub.walk(); }\n+\n+    void walk_box_contents2(irc &sub, shape::ptr &ref_count_dp) {\n         maybe_record_irc(ref_count_dp);\n \n         // Do not traverse the contents of this box; it's in the allocation\n@@ -153,28 +172,28 @@ class irc : public shape::data<irc,shape::ptr> {\n         }\n     }\n \n-    void walk_struct(const uint8_t *end_sp) {\n+    void walk_struct2(const uint8_t *end_sp) {\n         while (this->sp != end_sp) {\n             this->walk();\n             align = true;\n         }\n     }\n \n-    void walk_variant(shape::tag_info &tinfo, uint32_t variant_id,\n+    void walk_variant2(shape::tag_info &tinfo, uint32_t variant_id,\n                       const std::pair<const uint8_t *,const uint8_t *>\n                       variant_ptr_and_end);\n \n     template<typename T>\n-    inline void walk_number() { /* no-op */ }\n+    inline void walk_number2() { /* no-op */ }\n \n public:\n     static void compute_ircs(rust_task *task, irc_map &ircs);\n };\n \n void\n-irc::walk_variant(shape::tag_info &tinfo, uint32_t variant_id,\n-                  const std::pair<const uint8_t *,const uint8_t *>\n-                  variant_ptr_and_end) {\n+irc::walk_variant2(shape::tag_info &tinfo, uint32_t variant_id,\n+                   const std::pair<const uint8_t *,const uint8_t *>\n+                   variant_ptr_and_end) {\n     irc sub(*this, variant_ptr_and_end.first, tinfo.params);\n \n     assert(variant_id < 256);   // FIXME: Temporary sanity check.\n@@ -305,7 +324,7 @@ class mark : public shape::data<mark,shape::ptr> {\n                                    in_tables, in_data),\n       marked(in_marked) {}\n \n-    void walk_vec(bool is_pod, uint16_t sp_size) {\n+    void walk_vec2(bool is_pod, uint16_t sp_size) {\n         if (is_pod || shape::get_dp<void *>(dp) == NULL)\n             return;     // There can't be any outbound pointers from this.\n \n@@ -321,23 +340,39 @@ class mark : public shape::data<mark,shape::ptr> {\n         }\n     }\n \n-    void walk_tag(shape::tag_info &tinfo, uint32_t tag_variant) {\n-        shape::data<mark,shape::ptr>::walk_variant(tinfo, tag_variant);\n+    void walk_tag2(shape::tag_info &tinfo, uint32_t tag_variant) {\n+        shape::data<mark,shape::ptr>::walk_variant1(tinfo, tag_variant);\n     }\n \n-    void walk_box() {\n-        shape::data<mark,shape::ptr>::walk_box_contents();\n+    void walk_box2() {\n+        shape::data<mark,shape::ptr>::walk_box_contents1();\n     }\n \n-    void walk_fn() {\n-        shape::data<mark,shape::ptr>::walk_fn_contents(dp);\n+    void walk_uniq2() {\n+        shape::data<mark,shape::ptr>::walk_uniq_contents1();\n     }\n \n-    void walk_obj() {\n-        shape::data<mark,shape::ptr>::walk_obj_contents(dp);\n+    void walk_fn2(char code) {\n+        switch (code) {\n+          case shape::SHAPE_BOX_FN: {\n+              // Record an irc for the environment box, but don't descend\n+              // into it since it will be walked via the box's allocation\n+              shape::data<mark,shape::ptr>::walk_fn_contents1(dp);\n+              break;\n+          }\n+          case shape::SHAPE_BARE_FN:        // Does not close over data.\n+          case shape::SHAPE_STACK_FN:       // Not reachable from heap.\n+          case shape::SHAPE_UNIQ_FN: break; /* Can only close over sendable\n+                                             * (and hence acyclic) data */\n+          default: abort();\n+        }\n     }\n \n-    void walk_res(const shape::rust_fn *dtor, unsigned n_params,\n+    void walk_obj2() {\n+        shape::data<mark,shape::ptr>::walk_obj_contents1(dp);\n+    }\n+\n+    void walk_res2(const shape::rust_fn *dtor, unsigned n_params,\n                   const shape::type_param *params, const uint8_t *end_sp,\n                   bool live) {\n         while (this->sp != end_sp) {\n@@ -346,9 +381,18 @@ class mark : public shape::data<mark,shape::ptr> {\n         }\n     }\n \n-    void walk_subcontext(mark &sub) { sub.walk(); }\n+    void walk_iface2() {\n+        walk_box2();\n+    }\n+\n+    void walk_tydesc2(char) {\n+    }\n \n-    void walk_box_contents(mark &sub, shape::ptr &ref_count_dp) {\n+    void walk_subcontext2(mark &sub) { sub.walk(); }\n+\n+    void walk_uniq_contents2(mark &sub) { sub.walk(); }\n+\n+    void walk_box_contents2(mark &sub, shape::ptr &ref_count_dp) {\n         if (!ref_count_dp)\n             return;\n \n@@ -359,27 +403,27 @@ class mark : public shape::data<mark,shape::ptr> {\n         sub.walk();\n     }\n \n-    void walk_struct(const uint8_t *end_sp) {\n+    void walk_struct2(const uint8_t *end_sp) {\n         while (this->sp != end_sp) {\n             this->walk();\n             align = true;\n         }\n     }\n \n-    void walk_variant(shape::tag_info &tinfo, uint32_t variant_id,\n+    void walk_variant2(shape::tag_info &tinfo, uint32_t variant_id,\n                       const std::pair<const uint8_t *,const uint8_t *>\n                       variant_ptr_and_end);\n \n     template<typename T>\n-    inline void walk_number() { /* no-op */ }\n+    inline void walk_number2() { /* no-op */ }\n \n public:\n     static void do_mark(rust_task *task, const std::vector<void *> &roots,\n                         std::set<void *> &marked);\n };\n \n void\n-mark::walk_variant(shape::tag_info &tinfo, uint32_t variant_id,\n+mark::walk_variant2(shape::tag_info &tinfo, uint32_t variant_id,\n                    const std::pair<const uint8_t *,const uint8_t *>\n                    variant_ptr_and_end) {\n     mark sub(*this, variant_ptr_and_end.first, tinfo.params);\n@@ -470,13 +514,13 @@ class sweep : public shape::data<sweep,shape::ptr> {\n         : shape::data<sweep,shape::ptr>(in_task, in_align, in_sp,\n                                         in_params, in_tables, in_data) {}\n \n-    void walk_vec(bool is_pod, uint16_t sp_size) {\n+    void walk_vec2(bool is_pod, uint16_t sp_size) {\n         void *vec = shape::get_dp<void *>(dp);\n-        walk_vec(is_pod, get_vec_data_range(dp));\n+        walk_vec2(is_pod, get_vec_data_range(dp));\n         task->kernel->free(vec);\n     }\n \n-    void walk_vec(bool is_pod,\n+    void walk_vec2(bool is_pod,\n                   const std::pair<shape::ptr,shape::ptr> &data_range) {\n         sweep sub(*this, data_range.first);\n         shape::ptr data_end = sub.end_dp = data_range.second;\n@@ -486,50 +530,99 @@ class sweep : public shape::data<sweep,shape::ptr> {\n         }\n     }\n \n-    void walk_tag(shape::tag_info &tinfo, uint32_t tag_variant) {\n-        shape::data<sweep,shape::ptr>::walk_variant(tinfo, tag_variant);\n-    }\n-\n-    void walk_box() {\n-        shape::data<sweep,shape::ptr>::walk_box_contents();\n+    void walk_tag2(shape::tag_info &tinfo, uint32_t tag_variant) {\n+        shape::data<sweep,shape::ptr>::walk_variant1(tinfo, tag_variant);\n+    }\n+\n+    void walk_uniq2() {\n+        void *x = *((void **)dp);\n+        // free contents first:\n+        shape::data<sweep,shape::ptr>::walk_uniq_contents1();\n+        // now free the ptr:\n+        task->kernel->free(x);\n+    }\n+\n+    void walk_box2() {\n+        shape::data<sweep,shape::ptr>::walk_box_contents1();\n+    }\n+\n+    void walk_fn2(char code) {\n+        switch (code) {\n+          case shape::SHAPE_UNIQ_FN: {\n+              fn_env_pair pair = *(fn_env_pair*)dp;\n+\n+              // free closed over data:\n+              // \n+              // FIXME--this is a bit sketchy, since there is an\n+              // embedded tydesc that we will be using to walk the\n+              // data, but it will be freed as we walk.  In the\n+              // generated code we pull this desc out and free it\n+              // later.  We may well want to do the same.  However,\n+              // since all we use from the descr. is the \"shape\", I\n+              // think we're ok.\n+              shape::data<sweep,shape::ptr>::walk_fn_contents1(dp);\n+\n+              // now free the ptr:\n+              task->kernel->free(pair.env);\n+              break;\n+          }\n+          case shape::SHAPE_BOX_FN: {\n+              // the box will be visited separately:\n+              shape::bump_dp<void*>(dp); // skip over the code ptr\n+              walk_box2();               // walk over the environment ptr\n+              break;\n+          }\n+          case shape::SHAPE_BARE_FN:         // Does not close over data.\n+          case shape::SHAPE_STACK_FN: break; // Not reachable from heap.\n+          default: abort();\n+        }\n     }\n \n-    void walk_fn() {\n+    void walk_obj2() {\n         return;\n     }\n \n-    void walk_obj() {\n-        return;\n+    void walk_iface2() {\n+        walk_box2();\n     }\n \n-    void walk_iface() {\n-        //shape::data<sweep,shape::ptr>::walk_iface_contents(dp);\n-        shape::data<sweep,shape::ptr>::walk_box_contents();\n+    void walk_tydesc2(char kind) {\n+        type_desc *td = *(type_desc **)dp;\n+        switch(kind) {\n+          case shape::SHAPE_TYDESC:\n+            break;\n+          case shape::SHAPE_SEND_TYDESC:\n+            upcall_s_free_shared_type_desc(td);\n+            break;\n+          default: abort();\n+        }\n     }\n \n-    void walk_res(const shape::rust_fn *dtor, unsigned n_params,\n-                  const shape::type_param *params, const uint8_t *end_sp,\n-                  bool live) {\n+    void walk_res2(const shape::rust_fn *dtor, unsigned n_params,\n+                   const shape::type_param *params, const uint8_t *end_sp,\n+                   bool live) {\n         while (this->sp != end_sp) {\n             this->walk();\n             align = true;\n         }\n     }\n \n-    void walk_subcontext(sweep &sub) { sub.walk(); }\n+    void walk_subcontext2(sweep &sub) { sub.walk(); }\n+\n+    void walk_uniq_contents2(sweep &sub) { sub.walk(); }\n \n-    void walk_box_contents(sweep &sub, shape::ptr &ref_count_dp) {\n+    void walk_box_contents2(sweep &sub, shape::ptr &ref_count_dp) {\n         return;\n     }\n \n-    void walk_struct(const uint8_t *end_sp) {\n+    void walk_struct2(const uint8_t *end_sp) {\n         while (this->sp != end_sp) {\n             this->walk();\n             align = true;\n         }\n     }\n \n-    void walk_variant(shape::tag_info &tinfo, uint32_t variant_id,\n+    void walk_variant2(shape::tag_info &tinfo, uint32_t variant_id,\n                       const std::pair<const uint8_t *,const uint8_t *>\n                       variant_ptr_and_end) {\n         sweep sub(*this, variant_ptr_and_end.first, tinfo.params);\n@@ -542,7 +635,7 @@ class sweep : public shape::data<sweep,shape::ptr> {\n     }\n \n     template<typename T>\n-    inline void walk_number() { /* no-op */ }\n+    inline void walk_number2() { /* no-op */ }\n \n public:\n     static void do_sweep(rust_task *task, const std::set<void *> &marked);"}, {"sha": "b7ab591ce0467ad2b717097e966cb6619f3fc9d2", "filename": "src/rt/rust_shape.cpp", "status": "modified", "additions": 60, "deletions": 56, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/e55aa6e5ef60369710d8b2e6f512b2ef84a8c548/src%2Frt%2Frust_shape.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/e55aa6e5ef60369710d8b2e6f512b2ef84a8c548/src%2Frt%2Frust_shape.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_shape.cpp?ref=e55aa6e5ef60369710d8b2e6f512b2ef84a8c548", "patch": "@@ -73,7 +73,7 @@ type_param::from_obj_shape(const uint8_t *sp, ptr dp, arena &arena) {\n // A shape printer, useful for debugging\n \n void\n-print::walk_tag(tag_info &tinfo) {\n+print::walk_tag1(tag_info &tinfo) {\n     DPRINT(\"tag%u\", tinfo.tag_id);\n     if (!tinfo.n_params)\n         return;\n@@ -94,7 +94,7 @@ print::walk_tag(tag_info &tinfo) {\n }\n \n void\n-print::walk_struct(const uint8_t *end_sp) {\n+print::walk_struct1(const uint8_t *end_sp) {\n     DPRINT(\"(\");\n \n     bool first = true;\n@@ -110,8 +110,8 @@ print::walk_struct(const uint8_t *end_sp) {\n }\n \n void\n-print::walk_res(const rust_fn *dtor, unsigned n_params,\n-                const type_param *params, const uint8_t *end_sp) {\n+print::walk_res1(const rust_fn *dtor, unsigned n_params,\n+                 const type_param *params, const uint8_t *end_sp) {\n     DPRINT(\"res@%p\", dtor);\n \n     // Print type parameters.\n@@ -151,7 +151,7 @@ print::walk_res(const rust_fn *dtor, unsigned n_params,\n }\n \n void\n-print::walk_var(uint8_t param_index) {\n+print::walk_var1(uint8_t param_index) {\n     DPRINT(\"%c=\", 'T' + param_index);\n \n     const type_param *param = &params[param_index];\n@@ -160,25 +160,25 @@ print::walk_var(uint8_t param_index) {\n }\n \n template<>\n-void print::walk_number<uint8_t>()      { DPRINT(\"u8\"); }\n+void print::walk_number1<uint8_t>()      { DPRINT(\"u8\"); }\n template<>\n-void print::walk_number<uint16_t>()     { DPRINT(\"u16\"); }\n+void print::walk_number1<uint16_t>()     { DPRINT(\"u16\"); }\n template<>\n-void print::walk_number<uint32_t>()     { DPRINT(\"u32\"); }\n+void print::walk_number1<uint32_t>()     { DPRINT(\"u32\"); }\n template<>\n-void print::walk_number<uint64_t>()     { DPRINT(\"u64\"); }\n+void print::walk_number1<uint64_t>()     { DPRINT(\"u64\"); }\n template<>\n-void print::walk_number<int8_t>()       { DPRINT(\"i8\"); }\n+void print::walk_number1<int8_t>()       { DPRINT(\"i8\"); }\n template<>\n-void print::walk_number<int16_t>()      { DPRINT(\"i16\"); }\n+void print::walk_number1<int16_t>()      { DPRINT(\"i16\"); }\n template<>\n-void print::walk_number<int32_t>()      { DPRINT(\"i32\"); }\n+void print::walk_number1<int32_t>()      { DPRINT(\"i32\"); }\n template<>\n-void print::walk_number<int64_t>()      { DPRINT(\"i64\"); }\n+void print::walk_number1<int64_t>()      { DPRINT(\"i64\"); }\n template<>\n-void print::walk_number<float>()        { DPRINT(\"f32\"); }\n+void print::walk_number1<float>()        { DPRINT(\"f32\"); }\n template<>\n-void print::walk_number<double>()       { DPRINT(\"f64\"); }\n+void print::walk_number1<double>()       { DPRINT(\"f64\"); }\n \n \n void\n@@ -225,13 +225,13 @@ size_of::compute_tag_size(tag_info &tinfo) {\n }\n \n void\n-size_of::walk_tag(tag_info &tinfo) {\n+size_of::walk_tag1(tag_info &tinfo) {\n     compute_tag_size(*this, tinfo);\n     sa = tinfo.tag_sa;\n }\n \n void\n-size_of::walk_struct(const uint8_t *end_sp) {\n+size_of::walk_struct1(const uint8_t *end_sp) {\n     size_align struct_sa(0, 1);\n \n     bool first = true;\n@@ -264,21 +264,21 @@ class cmp : public data<cmp,ptr_pair> {\n     friend class data<cmp,ptr_pair>;\n \n private:\n-    void walk_vec(bool is_pod,\n-                  const std::pair<ptr_pair,ptr_pair> &data_range);\n+    void walk_vec2(bool is_pod,\n+                   const std::pair<ptr_pair,ptr_pair> &data_range);\n \n-    inline void walk_subcontext(cmp &sub) {\n+    inline void walk_subcontext2(cmp &sub) {\n         sub.walk();\n         result = sub.result;\n     }\n \n-    inline void walk_box_contents(cmp &sub, ptr_pair &ref_count_dp) {\n+    inline void walk_box_contents2(cmp &sub, ptr_pair &ref_count_dp) {\n         sub.align = true;\n         sub.walk();\n         result = sub.result;\n     }\n \n-    inline void walk_uniq_contents(cmp &sub) {\n+    inline void walk_uniq_contents2(cmp &sub) {\n         sub.align = true;\n         sub.walk();\n         result = sub.result;\n@@ -338,32 +338,36 @@ class cmp : public data<cmp,ptr_pair> {\n                          in_dp),\n       result(0) {}\n \n-    void walk_vec(bool is_pod, uint16_t sp_size) {\n-        walk_vec(is_pod, get_vec_data_range(dp));\n+    void walk_vec2(bool is_pod, uint16_t sp_size) {\n+        walk_vec2(is_pod, get_vec_data_range(dp));\n     }\n \n-    void walk_box() {\n-        data<cmp,ptr_pair>::walk_box_contents();\n+    void walk_box2() {\n+        data<cmp,ptr_pair>::walk_box_contents1();\n     }\n \n-    void walk_uniq() {\n-        data<cmp,ptr_pair>::walk_uniq_contents();\n+    void walk_uniq2() {\n+        data<cmp,ptr_pair>::walk_uniq_contents1();\n     }\n \n-    void walk_fn()  { return cmp_two_pointers(); }\n-    void walk_obj() { return cmp_two_pointers(); }\n+    void walk_iface2() {\n+        data<cmp,ptr_pair>::walk_box_contents1();\n+    }\n+\n+    void walk_fn2(char) { return cmp_two_pointers(); }\n+    void walk_obj2()    { return cmp_two_pointers(); }\n \n-    void walk_tag(tag_info &tinfo, const data_pair<tag_variant_t> &tag_variants);\n-    void walk_struct(const uint8_t *end_sp);\n-    void walk_res(const rust_fn *dtor, uint16_t n_ty_params,\n-                  const type_param *ty_params_sp, const uint8_t *end_sp,\n-                  const data_pair<uintptr_t> &live);\n-    void walk_variant(tag_info &tinfo, tag_variant_t variant_id,\n-                      const std::pair<const uint8_t *,const uint8_t *>\n-                      variant_ptr_and_end);\n+    void walk_tag2(tag_info &tinfo, const data_pair<tag_variant_t> &tag_variants);\n+    void walk_struct2(const uint8_t *end_sp);\n+    void walk_res2(const rust_fn *dtor, uint16_t n_ty_params,\n+                   const type_param *ty_params_sp, const uint8_t *end_sp,\n+                   const data_pair<uintptr_t> &live);\n+    void walk_variant2(tag_info &tinfo, tag_variant_t variant_id,\n+                       const std::pair<const uint8_t *,const uint8_t *>\n+                       variant_ptr_and_end);\n \n     template<typename T>\n-    void walk_number() { cmp_number(get_dp<T>(dp)); }\n+    void walk_number2() { cmp_number(get_dp<T>(dp)); }\n };\n \n template<>\n@@ -372,7 +376,7 @@ void cmp::cmp_number<int32_t>(const data_pair<int32_t> &nums) {\n }\n \n void\n-cmp::walk_vec(bool is_pod, const std::pair<ptr_pair,ptr_pair> &data_range) {\n+cmp::walk_vec2(bool is_pod, const std::pair<ptr_pair,ptr_pair> &data_range) {\n     cmp sub(*this, data_range.first);\n     ptr_pair data_end = sub.end_dp = data_range.second;\n     while (!result && sub.dp < data_end) {\n@@ -390,32 +394,32 @@ cmp::walk_vec(bool is_pod, const std::pair<ptr_pair,ptr_pair> &data_range) {\n }\n \n void\n-cmp::walk_tag(tag_info &tinfo, const data_pair<tag_variant_t> &tag_variants) {\n+cmp::walk_tag2(tag_info &tinfo, const data_pair<tag_variant_t> &tag_variants) {\n     cmp_number(tag_variants);\n     if (result != 0)\n         return;\n-    data<cmp,ptr_pair>::walk_variant(tinfo, tag_variants.fst);\n+    data<cmp,ptr_pair>::walk_variant1(tinfo, tag_variants.fst);\n }\n \n void\n-cmp::walk_struct(const uint8_t *end_sp) {\n+cmp::walk_struct2(const uint8_t *end_sp) {\n     while (!result && this->sp != end_sp) {\n         this->walk();\n         align = true;\n     }\n }\n \n void\n-cmp::walk_res(const rust_fn *dtor, uint16_t n_ty_params,\n+cmp::walk_res2(const rust_fn *dtor, uint16_t n_ty_params,\n               const type_param *ty_params_sp, const uint8_t *end_sp,\n               const data_pair<uintptr_t> &live) {\n     abort();    // TODO\n }\n \n void\n-cmp::walk_variant(tag_info &tinfo, tag_variant_t variant_id,\n-                  const std::pair<const uint8_t *,const uint8_t *>\n-                  variant_ptr_and_end) {\n+cmp::walk_variant2(tag_info &tinfo, tag_variant_t variant_id,\n+                   const std::pair<const uint8_t *,const uint8_t *>\n+                   variant_ptr_and_end) {\n     cmp sub(*this, variant_ptr_and_end.first, tinfo.params);\n \n     const uint8_t *variant_end = variant_ptr_and_end.second;\n@@ -430,7 +434,7 @@ cmp::walk_variant(tag_info &tinfo, tag_variant_t variant_id,\n // Polymorphic logging, for convenience\n \n void\n-log::walk_string(const std::pair<ptr,ptr> &data) {\n+log::walk_string2(const std::pair<ptr,ptr> &data) {\n     out << prefix << \"\\\"\" << std::hex;\n \n     ptr subdp = data.first;\n@@ -447,7 +451,7 @@ log::walk_string(const std::pair<ptr,ptr> &data) {\n }\n \n void\n-log::walk_struct(const uint8_t *end_sp) {\n+log::walk_struct2(const uint8_t *end_sp) {\n     out << prefix << \"(\";\n     prefix = \"\";\n \n@@ -463,10 +467,10 @@ log::walk_struct(const uint8_t *end_sp) {\n }\n \n void\n-log::walk_vec(bool is_pod, const std::pair<ptr,ptr> &data) {\n+log::walk_vec2(bool is_pod, const std::pair<ptr,ptr> &data) {\n     if (peek() == SHAPE_U8) {\n         sp++;   // It's a string. We handle this ourselves.\n-        walk_string(data);\n+        walk_string2(data);\n         return;\n     }\n \n@@ -485,9 +489,9 @@ log::walk_vec(bool is_pod, const std::pair<ptr,ptr> &data) {\n }\n \n void\n-log::walk_variant(tag_info &tinfo, tag_variant_t variant_id,\n-                  const std::pair<const uint8_t *,const uint8_t *>\n-                  variant_ptr_and_end) {\n+log::walk_variant2(tag_info &tinfo, tag_variant_t variant_id,\n+                   const std::pair<const uint8_t *,const uint8_t *>\n+                   variant_ptr_and_end) {\n     log sub(*this, variant_ptr_and_end.first, tinfo.params);\n     const uint8_t *variant_end = variant_ptr_and_end.second;\n \n@@ -503,8 +507,8 @@ log::walk_variant(tag_info &tinfo, tag_variant_t variant_id,\n }\n \n void\n-log::walk_res(const rust_fn *dtor, unsigned n_params,\n-              const type_param *params, const uint8_t *end_sp, bool live) {\n+log::walk_res2(const rust_fn *dtor, unsigned n_params,\n+               const type_param *params, const uint8_t *end_sp, bool live) {\n     out << prefix << \"res\";\n \n     if (this->sp == end_sp)"}, {"sha": "b4efae9e704879f1ddf3a3c8c46af0d180b297b0", "filename": "src/rt/rust_shape.h", "status": "modified", "additions": 182, "deletions": 134, "changes": 316, "blob_url": "https://github.com/rust-lang/rust/blob/e55aa6e5ef60369710d8b2e6f512b2ef84a8c548/src%2Frt%2Frust_shape.h", "raw_url": "https://github.com/rust-lang/rust/raw/e55aa6e5ef60369710d8b2e6f512b2ef84a8c548/src%2Frt%2Frust_shape.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_shape.h?ref=e55aa6e5ef60369710d8b2e6f512b2ef84a8c548", "patch": "@@ -46,12 +46,17 @@ const uint8_t SHAPE_VEC = 11u;\n const uint8_t SHAPE_TAG = 12u;\n const uint8_t SHAPE_BOX = 13u;\n const uint8_t SHAPE_STRUCT = 17u;\n-const uint8_t SHAPE_FN = 18u;\n+const uint8_t SHAPE_BOX_FN = 18u;\n const uint8_t SHAPE_OBJ = 19u;\n const uint8_t SHAPE_RES = 20u;\n const uint8_t SHAPE_VAR = 21u;\n const uint8_t SHAPE_UNIQ = 22u;\n const uint8_t SHAPE_IFACE = 24u;\n+const uint8_t SHAPE_UNIQ_FN = 25u;\n+const uint8_t SHAPE_STACK_FN = 26u;\n+const uint8_t SHAPE_BARE_FN = 27u;\n+const uint8_t SHAPE_TYDESC = 28u;\n+const uint8_t SHAPE_SEND_TYDESC = 29u;\n \n #ifdef _LP64\n const uint8_t SHAPE_PTR = SHAPE_U64;\n@@ -247,13 +252,13 @@ class ctxt {\n     inline size_align get_size_align(const uint8_t *&addr);\n \n private:\n-    void walk_vec();\n-    void walk_tag();\n-    void walk_box();\n-    void walk_uniq();\n-    void walk_struct();\n-    void walk_res();\n-    void walk_var();\n+    void walk_vec0();\n+    void walk_tag0();\n+    void walk_box0();\n+    void walk_uniq0();\n+    void walk_struct0();\n+    void walk_res0();\n+    void walk_var0();\n };\n \n \n@@ -357,34 +362,40 @@ class type_param {\n // Traversals\n \n #define WALK_NUMBER(c_type) \\\n-    static_cast<T *>(this)->template walk_number<c_type>()\n+    static_cast<T *>(this)->template walk_number1<c_type>()\n #define WALK_SIMPLE(method) static_cast<T *>(this)->method()\n \n template<typename T>\n void\n ctxt<T>::walk() {\n-  switch (*sp++) {\n-    case SHAPE_U8:      WALK_NUMBER(uint8_t);   break;\n-    case SHAPE_U16:     WALK_NUMBER(uint16_t);  break;\n-    case SHAPE_U32:     WALK_NUMBER(uint32_t);  break;\n-    case SHAPE_U64:     WALK_NUMBER(uint64_t);  break;\n-    case SHAPE_I8:      WALK_NUMBER(int8_t);    break;\n-    case SHAPE_I16:     WALK_NUMBER(int16_t);   break;\n-    case SHAPE_I32:     WALK_NUMBER(int32_t);   break;\n-    case SHAPE_I64:     WALK_NUMBER(int64_t);   break;\n-    case SHAPE_F32:     WALK_NUMBER(float);     break;\n-    case SHAPE_F64:     WALK_NUMBER(double);    break;\n-    case SHAPE_VEC:     walk_vec();             break;\n-    case SHAPE_TAG:     walk_tag();             break;\n-    case SHAPE_BOX:     walk_box();             break;\n-    case SHAPE_STRUCT:  walk_struct();          break;\n-    case SHAPE_FN:      WALK_SIMPLE(walk_fn);   break;\n-    case SHAPE_OBJ:     WALK_SIMPLE(walk_obj);  break;\n-    case SHAPE_RES:     walk_res();             break;\n-    case SHAPE_VAR:     walk_var();             break;\n-    case SHAPE_UNIQ:    walk_uniq();            break;\n-    case SHAPE_IFACE:   WALK_SIMPLE(walk_iface); break;\n-    default:            abort();\n+  char s = *sp++;\n+  switch (s) {\n+    case SHAPE_U8:       WALK_NUMBER(uint8_t);       break;\n+    case SHAPE_U16:      WALK_NUMBER(uint16_t);      break;\n+    case SHAPE_U32:      WALK_NUMBER(uint32_t);      break;\n+    case SHAPE_U64:      WALK_NUMBER(uint64_t);      break;\n+    case SHAPE_I8:       WALK_NUMBER(int8_t);        break;\n+    case SHAPE_I16:      WALK_NUMBER(int16_t);       break;\n+    case SHAPE_I32:      WALK_NUMBER(int32_t);       break;\n+    case SHAPE_I64:      WALK_NUMBER(int64_t);       break;\n+    case SHAPE_F32:      WALK_NUMBER(float);         break;\n+    case SHAPE_F64:      WALK_NUMBER(double);        break;\n+    case SHAPE_VEC:      walk_vec0();             break;\n+    case SHAPE_TAG:      walk_tag0();             break;\n+    case SHAPE_BOX:      walk_box0();             break;\n+    case SHAPE_STRUCT:   walk_struct0();          break;\n+    case SHAPE_OBJ:      WALK_SIMPLE(walk_obj1);      break;\n+    case SHAPE_RES:      walk_res0();             break;\n+    case SHAPE_VAR:      walk_var0();             break;\n+    case SHAPE_UNIQ:     walk_uniq0();            break;\n+    case SHAPE_IFACE:    WALK_SIMPLE(walk_iface1);    break;\n+    case SHAPE_BOX_FN:\n+    case SHAPE_UNIQ_FN:\n+    case SHAPE_STACK_FN:\n+    case SHAPE_BARE_FN:  static_cast<T*>(this)->walk_fn1(s); break;\n+    case SHAPE_SEND_TYDESC:\n+    case SHAPE_TYDESC:   static_cast<T*>(this)->walk_tydesc1(s); break;\n+    default:             abort();\n     }\n }\n \n@@ -420,20 +431,20 @@ ctxt<T>::get_variant_sp(tag_info &tinfo, tag_variant_t variant_id) {\n \n template<typename T>\n void\n-ctxt<T>::walk_vec() {\n+ctxt<T>::walk_vec0() {\n     bool is_pod = *sp++;\n \n     uint16_t sp_size = get_u16_bump(sp);\n     const uint8_t *end_sp = sp + sp_size;\n \n-    static_cast<T *>(this)->walk_vec(is_pod, sp_size);\n+    static_cast<T *>(this)->walk_vec1(is_pod, sp_size);\n \n     sp = end_sp;\n }\n \n template<typename T>\n void\n-ctxt<T>::walk_tag() {\n+ctxt<T>::walk_tag0() {\n     tag_info tinfo;\n     tinfo.tag_id = get_u16_bump(sp);\n \n@@ -465,45 +476,45 @@ ctxt<T>::walk_tag() {\n     tinfo.params = params;\n \n     // Call to the implementation.\n-    static_cast<T *>(this)->walk_tag(tinfo);\n+    static_cast<T *>(this)->walk_tag1(tinfo);\n }\n \n template<typename T>\n void\n-ctxt<T>::walk_box() {\n+ctxt<T>::walk_box0() {\n     uint16_t sp_size = get_u16_bump(sp);\n     const uint8_t *end_sp = sp + sp_size;\n \n-    static_cast<T *>(this)->walk_box();\n+    static_cast<T *>(this)->walk_box1();\n \n     sp = end_sp;\n }\n \n template<typename T>\n void\n-ctxt<T>::walk_uniq() {\n+ctxt<T>::walk_uniq0() {\n     uint16_t sp_size = get_u16_bump(sp);\n     const uint8_t *end_sp = sp + sp_size;\n \n-    static_cast<T *>(this)->walk_uniq();\n+    static_cast<T *>(this)->walk_uniq1();\n \n     sp = end_sp;\n }\n \n template<typename T>\n void\n-ctxt<T>::walk_struct() {\n+ctxt<T>::walk_struct0() {\n     uint16_t sp_size = get_u16_bump(sp);\n     const uint8_t *end_sp = sp + sp_size;\n \n-    static_cast<T *>(this)->walk_struct(end_sp);\n+    static_cast<T *>(this)->walk_struct1(end_sp);\n \n     sp = end_sp;\n }\n \n template<typename T>\n void\n-ctxt<T>::walk_res() {\n+ctxt<T>::walk_res0() {\n     uint16_t dtor_offset = get_u16_bump(sp);\n     const rust_fn **resources =\n         reinterpret_cast<const rust_fn **>(tables->resources);\n@@ -523,16 +534,16 @@ ctxt<T>::walk_res() {\n     uint16_t sp_size = get_u16_bump(sp);\n     const uint8_t *end_sp = sp + sp_size;\n \n-    static_cast<T *>(this)->walk_res(dtor, n_ty_params, params, end_sp);\n+    static_cast<T *>(this)->walk_res1(dtor, n_ty_params, params, end_sp);\n \n     sp = end_sp;\n }\n \n template<typename T>\n void\n-ctxt<T>::walk_var() {\n+ctxt<T>::walk_var0() {\n     uint8_t param = *sp++;\n-    static_cast<T *>(this)->walk_var(param);\n+    static_cast<T *>(this)->walk_var1(param);\n }\n \n // A shape printer, useful for debugging\n@@ -553,26 +564,44 @@ class print : public ctxt<print> {\n           const rust_shape_tables *in_tables)\n     : ctxt<print>(in_task, in_align, in_sp, in_params, in_tables) {}\n \n-    void walk_tag(tag_info &tinfo);\n-    void walk_struct(const uint8_t *end_sp);\n-    void walk_res(const rust_fn *dtor, unsigned n_params,\n-                  const type_param *params, const uint8_t *end_sp);\n-    void walk_var(uint8_t param);\n+    void walk_tag1(tag_info &tinfo);\n+    void walk_struct1(const uint8_t *end_sp);\n+    void walk_res1(const rust_fn *dtor, unsigned n_params,\n+                   const type_param *params, const uint8_t *end_sp);\n+    void walk_var1(uint8_t param);\n \n-    void walk_vec(bool is_pod, uint16_t sp_size) {\n+    void walk_vec1(bool is_pod, uint16_t sp_size) {\n         DPRINT(\"vec<\"); walk(); DPRINT(\">\");\n     }\n-    void walk_box() {\n-        DPRINT(\"box<\"); walk(); DPRINT(\">\");\n+    void walk_uniq1() {\n+        DPRINT(\"~<\"); walk(); DPRINT(\">\");\n+    }\n+    void walk_box1() {\n+        DPRINT(\"@<\"); walk(); DPRINT(\">\");\n     }\n \n-    void walk_fn()  { DPRINT(\"fn\"); }\n-    void walk_obj() { DPRINT(\"obj\"); }\n-    void walk_iface() { DPRINT(\"iface\"); }\n-    void walk_closure();\n+    void walk_fn1(char kind) {\n+        switch(kind) {\n+          case SHAPE_BARE_FN:  DPRINT(\"fn\");  break;\n+          case SHAPE_BOX_FN:   DPRINT(\"fn@\"); break;\n+          case SHAPE_UNIQ_FN:  DPRINT(\"fn~\"); break;\n+          case SHAPE_STACK_FN: DPRINT(\"fn&\"); break;\n+          default: abort();\n+        }\n+    }\n+    void walk_obj1() { DPRINT(\"obj\"); }\n+    void walk_iface1() { DPRINT(\"iface\"); }\n+\n+    void walk_tydesc1(char kind) {\n+        switch(kind) {\n+          case SHAPE_TYDESC: DPRINT(\"tydesc\"); break;\n+          case SHAPE_SEND_TYDESC: DPRINT(\"send-tydesc\"); break;\n+          default: abort();\n+        }\n+    }\n \n     template<typename T>\n-    void walk_number() {}\n+    void walk_number1() {}\n \n     template<typename T>\n     static void print_cx(const T *cx) {\n@@ -608,33 +637,35 @@ class size_of : public ctxt<size_of> {\n             const rust_shape_tables *in_tables = NULL)\n     : ctxt<size_of>(other, in_sp, in_params, in_tables) {}\n \n-    void walk_tag(tag_info &tinfo);\n-    void walk_struct(const uint8_t *end_sp);\n+    void walk_tag1(tag_info &tinfo);\n+    void walk_struct1(const uint8_t *end_sp);\n \n-    void walk_box()     { sa.set(sizeof(void *),   sizeof(void *)); }\n-    void walk_fn()      { sa.set(sizeof(void *)*2, sizeof(void *)); }\n-    void walk_obj()     { sa.set(sizeof(void *)*2, sizeof(void *)); }\n-    void walk_iface()   { sa.set(sizeof(void *),   sizeof(void *)); }\n-    void walk_closure();\n+    void walk_uniq1()       { sa.set(sizeof(void *),   sizeof(void *)); }\n+    void walk_box1()        { sa.set(sizeof(void *),   sizeof(void *)); }\n+    void walk_fn1(char)     { sa.set(sizeof(void *)*2, sizeof(void *)); }\n+    void walk_obj1()        { sa.set(sizeof(void *)*2, sizeof(void *)); }\n+    void walk_iface1()      { sa.set(sizeof(void *),   sizeof(void *)); }\n+    void walk_tydesc1(char) { sa.set(sizeof(void *),   sizeof(void *)); }\n+    void walk_closure1();\n \n-    void walk_vec(bool is_pod, uint16_t sp_size) {\n+    void walk_vec1(bool is_pod, uint16_t sp_size) {\n         sa.set(sizeof(void *), sizeof(void *));\n     }\n \n-    void walk_var(uint8_t param_index) {\n+    void walk_var1(uint8_t param_index) {\n         const type_param *param = &params[param_index];\n         size_of sub(*this, param->shape, param->params, param->tables);\n         sub.walk();\n         sa = sub.sa;\n     }\n \n-    void walk_res(const rust_fn *dtor, unsigned n_params,\n-                  const type_param *params, const uint8_t *end_sp) {\n+    void walk_res1(const rust_fn *dtor, unsigned n_params,\n+                   const type_param *params, const uint8_t *end_sp) {\n         abort();    // TODO\n     }\n \n     template<typename T>\n-    void walk_number()  { sa.set(sizeof(T), alignof<T>()); }\n+    void walk_number1()  { sa.set(sizeof(T), alignof<T>()); }\n \n     void compute_tag_size(tag_info &tinfo);\n \n@@ -819,12 +850,12 @@ class data : public ctxt< data<T,U> > {\n protected:\n     U end_dp;\n \n-    void walk_box_contents();\n-    void walk_uniq_contents();\n-    void walk_fn_contents(ptr &dp);\n-    void walk_obj_contents(ptr &dp);\n-    void walk_iface_contents(ptr &dp);\n-    void walk_variant(tag_info &tinfo, tag_variant_t variant);\n+    void walk_box_contents1();\n+    void walk_uniq_contents1();\n+    void walk_fn_contents1(ptr &dp);\n+    void walk_obj_contents1(ptr &dp);\n+    void walk_iface_contents1(ptr &dp);\n+    void walk_variant1(tag_info &tinfo, tag_variant_t variant);\n \n     static std::pair<uint8_t *,uint8_t *> get_vec_data_range(ptr dp);\n     static std::pair<ptr_pair,ptr_pair> get_vec_data_range(ptr_pair &dp);\n@@ -840,87 +871,100 @@ class data : public ctxt< data<T,U> > {\n       dp(in_dp),\n       end_dp() {}\n \n-    void walk_tag(tag_info &tinfo);\n+    void walk_tag1(tag_info &tinfo);\n \n-    void walk_struct(const uint8_t *end_sp) {\n-        static_cast<T *>(this)->walk_struct(end_sp);\n+    void walk_struct1(const uint8_t *end_sp) {\n+        static_cast<T *>(this)->walk_struct2(end_sp);\n     }\n \n-    void walk_vec(bool is_pod, uint16_t sp_size) {\n-        DATA_SIMPLE(void *, walk_vec(is_pod, sp_size));\n+    void walk_vec1(bool is_pod, uint16_t sp_size) {\n+        DATA_SIMPLE(void *, walk_vec2(is_pod, sp_size));\n     }\n \n-    void walk_box()     { DATA_SIMPLE(void *, walk_box()); }\n+    void walk_box1() { DATA_SIMPLE(void *, walk_box2()); }\n \n-    void walk_uniq() { DATA_SIMPLE(void *, walk_uniq()); }\n+    void walk_uniq1() { DATA_SIMPLE(void *, walk_uniq2()); }\n \n-    void walk_fn() {\n+    void walk_fn1(char code) {\n         ALIGN_TO(alignof<void *>());\n         U next_dp = dp + sizeof(void *) * 2;\n-        static_cast<T *>(this)->walk_fn();\n+        static_cast<T *>(this)->walk_fn2(code);\n         dp = next_dp;\n     }\n \n-    void walk_obj() {\n+    void walk_obj1() {\n         ALIGN_TO(alignof<void *>());\n         U next_dp = dp + sizeof(void *) * 2;\n-        static_cast<T *>(this)->walk_obj();\n+        static_cast<T *>(this)->walk_obj2();\n+        dp = next_dp;\n+    }\n+\n+    void walk_iface1() {\n+        ALIGN_TO(alignof<void *>());\n+        U next_dp = dp + sizeof(void *);\n+        static_cast<T *>(this)->walk_iface2();\n         dp = next_dp;\n     }\n \n-    void walk_iface() {\n+    void walk_tydesc1(char kind) {\n         ALIGN_TO(alignof<void *>());\n         U next_dp = dp + sizeof(void *);\n-        static_cast<T *>(this)->walk_iface();\n+        static_cast<T *>(this)->walk_tydesc2(kind);\n         dp = next_dp;\n     }\n \n-    void walk_res(const rust_fn *dtor, unsigned n_params,\n-                  const type_param *params, const uint8_t *end_sp) {\n+    void walk_res1(const rust_fn *dtor, unsigned n_params,\n+                   const type_param *params, const uint8_t *end_sp) {\n         typename U::template data<uintptr_t>::t live = bump_dp<uintptr_t>(dp);\n         // Delegate to the implementation.\n-        static_cast<T *>(this)->walk_res(dtor, n_params, params, end_sp,\n+        static_cast<T *>(this)->walk_res2(dtor, n_params, params, end_sp,\n                                          live);\n     }\n \n-    void walk_var(uint8_t param_index) {\n+    void walk_var1(uint8_t param_index) {\n         const type_param *param = &this->params[param_index];\n         T sub(*static_cast<T *>(this), param->shape, param->params,\n               param->tables);\n-        static_cast<T *>(this)->walk_subcontext(sub);\n+        static_cast<T *>(this)->walk_subcontext2(sub);\n         dp = sub.dp;\n     }\n \n-    template<typename W>\n-    void walk_number() { DATA_SIMPLE(W, walk_number<W>()); }\n+    template<typename WN>\n+    void walk_number1() { \n+        //DATA_SIMPLE(W, walk_number2<W>());\n+        ALIGN_TO(alignof<WN>());\n+        U end_dp = dp + sizeof(WN);\n+        T* t = static_cast<T *>(this);\n+        t->template walk_number2<WN>();\n+        dp = end_dp;\n+    }\n };\n \n template<typename T,typename U>\n void\n-data<T,U>::walk_box_contents() {\n+data<T,U>::walk_box_contents1() {\n     typename U::template data<uint8_t *>::t box_ptr = bump_dp<uint8_t *>(dp);\n-\n     U ref_count_dp(box_ptr);\n     T sub(*static_cast<T *>(this), ref_count_dp + sizeof(ref_cnt_t));\n-    static_cast<T *>(this)->walk_box_contents(sub, ref_count_dp);\n+    static_cast<T *>(this)->walk_box_contents2(sub, ref_count_dp);\n }\n \n template<typename T,typename U>\n void\n-data<T,U>::walk_uniq_contents() {\n+data<T,U>::walk_uniq_contents1() {\n     typename U::template data<uint8_t *>::t box_ptr = bump_dp<uint8_t *>(dp);\n     U data_ptr(box_ptr);\n     T sub(*static_cast<T *>(this), data_ptr);\n-    static_cast<T *>(this)->walk_uniq_contents(sub);\n+    static_cast<T *>(this)->walk_uniq_contents2(sub);\n }\n \n template<typename T,typename U>\n void\n-data<T,U>::walk_variant(tag_info &tinfo, tag_variant_t variant_id) {\n+data<T,U>::walk_variant1(tag_info &tinfo, tag_variant_t variant_id) {\n     std::pair<const uint8_t *,const uint8_t *> variant_ptr_and_end =\n         this->get_variant_sp(tinfo, variant_id);\n-    static_cast<T *>(this)->walk_variant(tinfo, variant_id,\n-                                         variant_ptr_and_end);\n+    static_cast<T *>(this)->walk_variant2(tinfo, variant_id,\n+                                          variant_ptr_and_end);\n }\n \n template<typename T,typename U>\n@@ -943,7 +987,7 @@ data<T,U>::get_vec_data_range(ptr_pair &dp) {\n \n template<typename T,typename U>\n void\n-data<T,U>::walk_tag(tag_info &tinfo) {\n+data<T,U>::walk_tag1(tag_info &tinfo) {\n     size_of::compute_tag_size(*this, tinfo);\n \n     if (tinfo.variant_count > 1)\n@@ -957,14 +1001,14 @@ data<T,U>::walk_tag(tag_info &tinfo) {\n     else\n         tag_variant = 0;\n \n-    static_cast<T *>(this)->walk_tag(tinfo, tag_variant);\n+    static_cast<T *>(this)->walk_tag2(tinfo, tag_variant);\n \n     dp = end_dp;\n }\n \n template<typename T,typename U>\n void\n-data<T,U>::walk_fn_contents(ptr &dp) {\n+data<T,U>::walk_fn_contents1(ptr &dp) {\n     fn_env_pair pair = bump_dp<fn_env_pair>(dp);\n     if (!pair.env)\n         return;\n@@ -982,7 +1026,7 @@ data<T,U>::walk_fn_contents(ptr &dp) {\n \n template<typename T,typename U>\n void\n-data<T,U>::walk_obj_contents(ptr &dp) {\n+data<T,U>::walk_obj_contents1(ptr &dp) {\n     dp += sizeof(void *);   // Skip over the vtable.\n \n     uint8_t *box_ptr = bump_dp<uint8_t *>(dp);\n@@ -1003,7 +1047,7 @@ data<T,U>::walk_obj_contents(ptr &dp) {\n \n template<typename T,typename U>\n void\n-data<T,U>::walk_iface_contents(ptr &dp) {\n+data<T,U>::walk_iface_contents1(ptr &dp) {\n     uint8_t *box_ptr = bump_dp<uint8_t *>(dp);\n     if (!box_ptr) return;\n     U ref_count_dp(box_ptr);\n@@ -1017,7 +1061,7 @@ data<T,U>::walk_iface_contents(ptr &dp) {\n     T sub(*static_cast<T *>(this), valtydesc->shape + 5, NULL, NULL,\n           value_dp);\n     sub.align = true;\n-    static_cast<T *>(this)->walk_box_contents(sub, ref_count_dp);\n+    static_cast<T *>(this)->walk_box_contents2(sub, ref_count_dp);\n }\n \n // Polymorphic logging, for convenience\n@@ -1067,52 +1111,56 @@ class log : public data<log,ptr> {\n       out(other.out),\n       prefix(\"\") {}\n \n-    void walk_vec(bool is_pod, uint16_t sp_size) {\n+    void walk_vec2(bool is_pod, uint16_t sp_size) {\n         if (!get_dp<void *>(dp))\n             out << prefix << \"(null)\";\n         else\n-            walk_vec(is_pod, get_vec_data_range(dp));\n+            walk_vec2(is_pod, get_vec_data_range(dp));\n     }\n \n-    void walk_tag(tag_info &tinfo, tag_variant_t tag_variant) {\n+    void walk_tag2(tag_info &tinfo, tag_variant_t tag_variant) {\n         out << prefix << \"tag\" << tag_variant;\n-        data<log,ptr>::walk_variant(tinfo, tag_variant);\n+        data<log,ptr>::walk_variant1(tinfo, tag_variant);\n     }\n \n-    void walk_box() {\n+    void walk_box2() {\n         out << prefix << \"@\";\n         prefix = \"\";\n-        data<log,ptr>::walk_box_contents();\n+        data<log,ptr>::walk_box_contents1();\n     }\n \n-    void walk_uniq() {\n+    void walk_uniq2() {\n         out << prefix << \"~\";\n         prefix = \"\";\n-        data<log,ptr>::walk_uniq_contents();\n+        data<log,ptr>::walk_uniq_contents1();\n     }\n \n-    void walk_fn() {\n+    void walk_fn2(char kind) {\n         out << prefix << \"fn\";\n         prefix = \"\";\n-        data<log,ptr>::walk_fn_contents(dp);\n+        data<log,ptr>::walk_fn_contents1(dp);\n     }\n \n-    void walk_obj() {\n+    void walk_obj2() {\n         out << prefix << \"obj\";\n         prefix = \"\";\n-        data<log,ptr>::walk_obj_contents(dp);\n+        data<log,ptr>::walk_obj_contents1(dp);\n     }\n \n-    void walk_iface() {\n+    void walk_iface2() {\n         out << prefix << \"iface(\";\n         prefix = \"\";\n-        data<log,ptr>::walk_iface_contents(dp);\n+        data<log,ptr>::walk_iface_contents1(dp);\n         out << prefix << \")\";\n     }\n \n-    void walk_subcontext(log &sub) { sub.walk(); }\n+    void walk_tydesc2(char kind) {\n+        out << prefix << \"tydesc\";\n+    }\n+\n+    void walk_subcontext2(log &sub) { sub.walk(); }\n \n-    void walk_box_contents(log &sub, ptr &ref_count_dp) {\n+    void walk_box_contents2(log &sub, ptr &ref_count_dp) {\n         out << prefix;\n         if (!ref_count_dp) {\n             out << \"(null)\";\n@@ -1122,23 +1170,23 @@ class log : public data<log,ptr> {\n         }\n     }\n \n-    void walk_uniq_contents(log &sub) {\n+    void walk_uniq_contents2(log &sub) {\n         out << prefix;\n         sub.align = true;\n         sub.walk();\n     }\n \n-    void walk_struct(const uint8_t *end_sp);\n-    void walk_vec(bool is_pod, const std::pair<ptr,ptr> &data);\n-    void walk_variant(tag_info &tinfo, tag_variant_t variant_id,\n+    void walk_struct2(const uint8_t *end_sp);\n+    void walk_vec2(bool is_pod, const std::pair<ptr,ptr> &data);\n+    void walk_variant2(tag_info &tinfo, tag_variant_t variant_id,\n                       const std::pair<const uint8_t *,const uint8_t *>\n                       variant_ptr_and_end);\n-    void walk_string(const std::pair<ptr,ptr> &data);\n-    void walk_res(const rust_fn *dtor, unsigned n_params,\n-                  const type_param *params, const uint8_t *end_sp, bool live);\n+    void walk_string2(const std::pair<ptr,ptr> &data);\n+    void walk_res2(const rust_fn *dtor, unsigned n_params,\n+                   const type_param *params, const uint8_t *end_sp, bool live);\n \n     template<typename T>\n-    inline void walk_number() {\n+    inline void walk_number2() {\n         out << prefix;\n         fmt_number(out, get_dp<T>(dp));\n     }"}, {"sha": "12ef28065bd40a5206516d47606d06f36ced3f0f", "filename": "src/rt/rust_upcall.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e55aa6e5ef60369710d8b2e6f512b2ef84a8c548/src%2Frt%2Frust_upcall.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/e55aa6e5ef60369710d8b2e6f512b2ef84a8c548/src%2Frt%2Frust_upcall.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.cpp?ref=e55aa6e5ef60369710d8b2e6f512b2ef84a8c548", "patch": "@@ -279,7 +279,7 @@ upcall_create_shared_type_desc(type_desc *td) {\n  */\n \n void upcall_s_free_shared_type_desc(type_desc *td)\n-{\n+{ // n.b.: invoked from rust_cc.cpp as well as generated code\n     rust_task *task = rust_scheduler::get_task();\n     LOG_UPCALL_ENTRY(task);\n "}, {"sha": "adf13c49a1e48002035da299d1df383d6ccd9eb0", "filename": "src/test/run-pass/uniq-fn-leak.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e55aa6e5ef60369710d8b2e6f512b2ef84a8c548/src%2Ftest%2Frun-pass%2Funiq-fn-leak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e55aa6e5ef60369710d8b2e6f512b2ef84a8c548/src%2Ftest%2Frun-pass%2Funiq-fn-leak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funiq-fn-leak.rs?ref=e55aa6e5ef60369710d8b2e6f512b2ef84a8c548", "patch": "@@ -6,12 +6,14 @@\n \n     type pointy = {\n         mutable a : maybe_pointy,\n+        c : ~int,\n         d : sendfn()->(),\n     };\n \n     fn empty_pointy() -> @pointy {\n         ret @{\n             mutable a : none,\n+            c : ~22,\n             d : sendfn()->(){},\n         }\n     }"}]}