{"sha": "6ebb9161ea3d0e865786ef14878be8e4c07ab790", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlYmI5MTYxZWEzZDBlODY1Nzg2ZWYxNDg3OGJlOGU0YzA3YWI3OTA=", "commit": {"author": {"name": "Vitaly _Vi Shukela", "email": "vi0oss@gmail.com", "date": "2018-09-16T23:40:44Z"}, "committer": {"name": "Vitaly _Vi Shukela", "email": "vi0oss@gmail.com", "date": "2018-09-16T23:49:27Z"}, "message": "Fix style according to review comments.", "tree": {"sha": "e5f87aae8b1f00243de5df9f063991c2223fcd77", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e5f87aae8b1f00243de5df9f063991c2223fcd77"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ebb9161ea3d0e865786ef14878be8e4c07ab790", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABEIAB0WIQQzEHnM5f9ubG8rMBnAlyIdbgPfaAUCW57sBwAKCRDAlyIdbgPf\naOrQAQCuPUV2tPMAZtdqzhxgLaAijEUNSVULQpR5owxcjTJIvgD+Lx4+sUNGRSfo\nBRbJ+0cp65CgUSgHM04O75gnGVW8Jyk=\n=8KyO\n-----END PGP SIGNATURE-----", "payload": "tree e5f87aae8b1f00243de5df9f063991c2223fcd77\nparent f395072c4d7368831698bfc8ddc6a928fd8230c7\nauthor Vitaly _Vi Shukela <vi0oss@gmail.com> 1537141244 +0300\ncommitter Vitaly _Vi Shukela <vi0oss@gmail.com> 1537141767 +0300\n\nFix style according to review comments.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ebb9161ea3d0e865786ef14878be8e4c07ab790", "html_url": "https://github.com/rust-lang/rust/commit/6ebb9161ea3d0e865786ef14878be8e4c07ab790", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ebb9161ea3d0e865786ef14878be8e4c07ab790/comments", "author": {"login": "vi", "id": 173219, "node_id": "MDQ6VXNlcjE3MzIxOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/173219?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vi", "html_url": "https://github.com/vi", "followers_url": "https://api.github.com/users/vi/followers", "following_url": "https://api.github.com/users/vi/following{/other_user}", "gists_url": "https://api.github.com/users/vi/gists{/gist_id}", "starred_url": "https://api.github.com/users/vi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vi/subscriptions", "organizations_url": "https://api.github.com/users/vi/orgs", "repos_url": "https://api.github.com/users/vi/repos", "events_url": "https://api.github.com/users/vi/events{/privacy}", "received_events_url": "https://api.github.com/users/vi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vi", "id": 173219, "node_id": "MDQ6VXNlcjE3MzIxOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/173219?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vi", "html_url": "https://github.com/vi", "followers_url": "https://api.github.com/users/vi/followers", "following_url": "https://api.github.com/users/vi/following{/other_user}", "gists_url": "https://api.github.com/users/vi/gists{/gist_id}", "starred_url": "https://api.github.com/users/vi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vi/subscriptions", "organizations_url": "https://api.github.com/users/vi/orgs", "repos_url": "https://api.github.com/users/vi/repos", "events_url": "https://api.github.com/users/vi/events{/privacy}", "received_events_url": "https://api.github.com/users/vi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f395072c4d7368831698bfc8ddc6a928fd8230c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/f395072c4d7368831698bfc8ddc6a928fd8230c7", "html_url": "https://github.com/rust-lang/rust/commit/f395072c4d7368831698bfc8ddc6a928fd8230c7"}], "stats": {"total": 56, "additions": 36, "deletions": 20}, "files": [{"sha": "0821e9c4b44b0e1cd44ee7c6d2980162d2882c02", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6ebb9161ea3d0e865786ef14878be8e4c07ab790/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ebb9161ea3d0e865786ef14878be8e4c07ab790/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=6ebb9161ea3d0e865786ef14878be8e4c07ab790", "patch": "@@ -432,8 +432,12 @@ impl Session {\n                 }\n                 DiagnosticBuilderMethod::SpanSuggestion(suggestion) => {\n                     let span = span_maybe.expect(\"span_suggestion_* needs a span\");\n-                    diag_builder.span_suggestion_with_applicability(span, message, suggestion,\n-                                                                    Applicability::Unspecified);\n+                    diag_builder.span_suggestion_with_applicability(\n+                                                                    span,\n+                                                                    message,\n+                                                                    suggestion,\n+                                                                    Applicability::Unspecified,\n+                                                                    );\n                 }\n             }\n         }"}, {"sha": "658a67b57670c0c03199a6cdea17bccc2d1b94be", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/6ebb9161ea3d0e865786ef14878be8e4c07ab790/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ebb9161ea3d0e865786ef14878be8e4c07ab790/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=6ebb9161ea3d0e865786ef14878be8e4c07ab790", "patch": "@@ -868,11 +868,19 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                                             db.note(fn_closure_msg);\n                                         } else {\n                                             db.span_suggestion_with_applicability(\n-                                                sp, msg, suggestion, Applicability::Unspecified);\n+                                                                                  sp,\n+                                                                                  msg,\n+                                                                                  suggestion,\n+                                                                                  Applicability::Unspecified,\n+                                                                                  );\n                                         }\n                                     } else {\n                                         db.span_suggestion_with_applicability(\n-                                                sp, msg, suggestion, Applicability::Unspecified);\n+                                                                              sp,\n+                                                                              msg,\n+                                                                              suggestion,\n+                                                                              Applicability::Unspecified,\n+                                                                              );\n                                     }\n                                 }\n                                 _ => {\n@@ -1330,13 +1338,14 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                                                   &cmt_path_or_string,\n                                                   capture_span,\n                                                   Origin::Ast)\n-            .span_suggestion_with_applicability(err.span,\n-                             &format!(\"to force the closure to take ownership of {} \\\n-                                       (and any other referenced variables), \\\n-                                       use the `move` keyword\",\n-                                       cmt_path_or_string),\n-                             suggestion,\n-                             Applicability::Unspecified,\n+            .span_suggestion_with_applicability(\n+                                         err.span,\n+                                         &format!(\"to force the closure to take ownership of {} \\\n+                                                   (and any other referenced variables), \\\n+                                                   use the `move` keyword\",\n+                                                   cmt_path_or_string),\n+                                         suggestion,\n+                                         Applicability::Unspecified,\n             )\n             .emit();\n         self.signal_error();"}, {"sha": "f7e5e25c8370d5ac50281f88b16532a9f1948eab", "filename": "src/librustc_errors/diagnostic.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6ebb9161ea3d0e865786ef14878be8e4c07ab790/src%2Flibrustc_errors%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ebb9161ea3d0e865786ef14878be8e4c07ab790/src%2Flibrustc_errors%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic.rs?ref=6ebb9161ea3d0e865786ef14878be8e4c07ab790", "patch": "@@ -307,10 +307,10 @@ impl Diagnostic {\n         suggestion: Vec<(Span, String)>,\n     ) -> &mut Self {\n         self.multipart_suggestion_with_applicability(\n-                                                     msg,\n-                                                     suggestion,\n-                                                     Applicability::Unspecified\n-                                                    )\n+                                                 msg,\n+                                                 suggestion,\n+                                                 Applicability::Unspecified,\n+        )\n     }\n \n     /// Prints out a message with multiple suggested edits of the code."}, {"sha": "d1b6865e59b5da0a86b1e8484c60ae4ae814bff8", "filename": "src/librustc_errors/diagnostic_builder.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6ebb9161ea3d0e865786ef14878be8e4c07ab790/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ebb9161ea3d0e865786ef14878be8e4c07ab790/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic_builder.rs?ref=6ebb9161ea3d0e865786ef14878be8e4c07ab790", "patch": "@@ -172,9 +172,10 @@ impl<'a> DiagnosticBuilder<'a> {\n                                                   -> &mut Self);\n \n     #[deprecated(note = \"Use `span_suggestion_short_with_applicability`\")]\n-    forward!(pub fn span_suggestion_short(&mut self,\n-                                          sp: Span,\n-                                          msg: &str,\n+    forward!(pub fn span_suggestion_short(\n+                                      &mut self,\n+                                      sp: Span,\n+                                      msg: &str,\n                                           suggestion: String)\n                                           -> &mut Self);\n "}, {"sha": "cf8967ab28321915f62a831ce1a3df305b523ff7", "filename": "src/librustc_passes/loops.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6ebb9161ea3d0e865786ef14878be8e4c07ab790/src%2Flibrustc_passes%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ebb9161ea3d0e865786ef14878be8e4c07ab790/src%2Flibrustc_passes%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Floops.rs?ref=6ebb9161ea3d0e865786ef14878be8e4c07ab790", "patch": "@@ -141,7 +141,8 @@ impl<'a, 'hir> Visitor<'hir> for CheckLoopVisitor<'a, 'hir> {\n                                 .span_label(e.span,\n                                             \"can only break with a value inside \\\n                                             `loop` or breakable block\")\n-                                .span_suggestion_with_applicability(e.span,\n+                                .span_suggestion_with_applicability(\n+                                                 e.span,\n                                                  &format!(\"instead, use `break` on its own \\\n                                                            without a value inside this `{}` loop\",\n                                                           kind.name()),"}, {"sha": "0b77c0d895bd1754aa81aa920be7edeff2b8c04d", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6ebb9161ea3d0e865786ef14878be8e4c07ab790/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ebb9161ea3d0e865786ef14878be8e4c07ab790/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=6ebb9161ea3d0e865786ef14878be8e4c07ab790", "patch": "@@ -3299,7 +3299,8 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n                         err.span_label(base_span,\n                                        \"expecting a type here because of type ascription\");\n                         if line_sp != line_base_sp {\n-                            err.span_suggestion_short_with_applicability(sp,\n+                            err.span_suggestion_short_with_applicability(\n+                                                      sp,\n                                                       \"did you mean to use `;` here instead?\",\n                                                       \";\".to_string(),\n                                                       Applicability::Unspecified,"}]}