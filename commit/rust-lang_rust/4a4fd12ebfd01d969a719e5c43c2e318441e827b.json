{"sha": "4a4fd12ebfd01d969a719e5c43c2e318441e827b", "node_id": "C_kwDOAAsO6NoAKDRhNGZkMTJlYmZkMDFkOTY5YTcxOWU1YzQzYzJlMzE4NDQxZTgyN2I", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-21T22:59:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-21T22:59:40Z"}, "message": "Auto merge of #102106 - djkoloski:sync-from-clippy, r=Manishearth\n\nUpdate clippy\n\nr? `@Manishearth`", "tree": {"sha": "c5d268426f6e84f43a0df91970c814058fdf4365", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c5d268426f6e84f43a0df91970c814058fdf4365"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a4fd12ebfd01d969a719e5c43c2e318441e827b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a4fd12ebfd01d969a719e5c43c2e318441e827b", "html_url": "https://github.com/rust-lang/rust/commit/4a4fd12ebfd01d969a719e5c43c2e318441e827b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a4fd12ebfd01d969a719e5c43c2e318441e827b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9062b780b32d2eab060b4432863e085d9504ca5c", "url": "https://api.github.com/repos/rust-lang/rust/commits/9062b780b32d2eab060b4432863e085d9504ca5c", "html_url": "https://github.com/rust-lang/rust/commit/9062b780b32d2eab060b4432863e085d9504ca5c"}, {"sha": "0650c4078c81211fbe112df90f019a96073e42ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/0650c4078c81211fbe112df90f019a96073e42ef", "html_url": "https://github.com/rust-lang/rust/commit/0650c4078c81211fbe112df90f019a96073e42ef"}], "stats": {"total": 3628, "additions": 1997, "deletions": 1631}, "files": [{"sha": "044cbff4b78e5a8156384bbc18e7a0d0a25ecb7c", "filename": "src/tools/clippy/CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2FCHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2FCHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2FCHANGELOG.md?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -3800,6 +3800,7 @@ Released 2018-09-13\n [`items_after_statements`]: https://rust-lang.github.io/rust-clippy/master/index.html#items_after_statements\n [`iter_cloned_collect`]: https://rust-lang.github.io/rust-clippy/master/index.html#iter_cloned_collect\n [`iter_count`]: https://rust-lang.github.io/rust-clippy/master/index.html#iter_count\n+[`iter_kv_map`]: https://rust-lang.github.io/rust-clippy/master/index.html#iter_kv_map\n [`iter_next_loop`]: https://rust-lang.github.io/rust-clippy/master/index.html#iter_next_loop\n [`iter_next_slice`]: https://rust-lang.github.io/rust-clippy/master/index.html#iter_next_slice\n [`iter_not_returning_iterator`]: https://rust-lang.github.io/rust-clippy/master/index.html#iter_not_returning_iterator"}, {"sha": "6c977b2cacab537db551adb40801a1d277acc0ca", "filename": "src/tools/clippy/CONTRIBUTING.md", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2FCONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2FCONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2FCONTRIBUTING.md?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -110,23 +110,28 @@ Just make sure to remove the dependencies again before finally making a pull req\n [IntelliJ_rust_homepage]: https://intellij-rust.github.io/\n \n ### Rust Analyzer\n-As of [#6869][6869], [`rust-analyzer`][ra_homepage] can understand that Clippy uses compiler-internals\n-using `extern crate` when `package.metadata.rust-analyzer.rustc_private` is set to `true` in Clippy's `Cargo.toml.`\n-You will require a `nightly` toolchain with the `rustc-dev` component installed.\n-Make sure that in the `rust-analyzer` configuration, you set\n+For [`rust-analyzer`][ra_homepage] to work correctly make sure that in the `rust-analyzer` configuration you set\n+\n ```json\n { \"rust-analyzer.rustc.source\": \"discover\" }\n ```\n-and\n-```json\n-{ \"rust-analyzer.updates.channel\": \"nightly\" }\n-```\n+\n You should be able to see information on things like `Expr` or `EarlyContext` now if you hover them, also\n a lot more type hints.\n-This will work with `rust-analyzer 2021-03-15` shipped in nightly `1.52.0-nightly (107896c32 2021-03-15)` or later.\n+\n+To have `rust-analyzer` also work in the `clippy_dev` and `lintcheck` crates, add the following configuration\n+\n+```json\n+{\n+    \"rust-analyzer.linkedProjects\": [\n+        \"./Cargo.toml\",\n+        \"clippy_dev/Cargo.toml\",\n+        \"lintcheck/Cargo.toml\",\n+    ]\n+}\n+```\n \n [ra_homepage]: https://rust-analyzer.github.io/\n-[6869]: https://github.com/rust-lang/rust-clippy/pull/6869\n \n ## How Clippy works\n "}, {"sha": "b1e843bc7f4c86173dd8db2893921374abe5d384", "filename": "src/tools/clippy/book/src/development/adding_lints.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Fbook%2Fsrc%2Fdevelopment%2Fadding_lints.md", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Fbook%2Fsrc%2Fdevelopment%2Fadding_lints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fbook%2Fsrc%2Fdevelopment%2Fadding_lints.md?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -90,6 +90,7 @@ We start by opening the test file created at `tests/ui/foo_functions.rs`.\n Update the file with some examples to get started:\n \n ```rust\n+#![allow(unused)]\n #![warn(clippy::foo_functions)]\n \n // Impl methods"}, {"sha": "f5aa06e4bf653136b31f17ca3fcf57417796c9c9", "filename": "src/tools/clippy/book/src/development/common_tools_writing_lints.md", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Fbook%2Fsrc%2Fdevelopment%2Fcommon_tools_writing_lints.md", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Fbook%2Fsrc%2Fdevelopment%2Fcommon_tools_writing_lints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fbook%2Fsrc%2Fdevelopment%2Fcommon_tools_writing_lints.md?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -123,7 +123,8 @@ There are three ways to do this, depending on if the target trait has a\n diagnostic item, lang item or neither.\n \n ```rust\n-use clippy_utils::{implements_trait, is_trait_method, match_trait_method, paths};\n+use clippy_utils::ty::implements_trait;\n+use clippy_utils::is_trait_method;\n use rustc_span::symbol::sym;\n \n impl LateLintPass<'_> for MyStructLint {\n@@ -143,13 +144,6 @@ impl LateLintPass<'_> for MyStructLint {\n             .map_or(false, |id| implements_trait(cx, ty, id, &[])) {\n                 // `expr` implements `Drop` trait\n             }\n-\n-        // 3. Using the type path with the expression\n-        // we use `match_trait_method` function from Clippy's utils\n-        // (This method should be avoided if possible)\n-        if match_trait_method(cx, expr, &paths::INTO) {\n-            // `expr` implements `Into` trait\n-        }\n     }\n }\n ```\n@@ -233,8 +227,9 @@ functions to deal with macros:\n   crates\n \n   ```rust\n-  #[macro_use]\n-  extern crate a_crate_with_macros;\n+  use rustc_middle::lint::in_external_macro;\n+\n+  use a_crate_with_macros::foo;\n \n   // `foo` is defined in `a_crate_with_macros`\n   foo!(\"bar\");"}, {"sha": "02cb13a1d8afe1dc50b0a912ab979efd857050ea", "filename": "src/tools/clippy/clippy_dev/src/new_lint.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Fnew_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Fnew_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Fnew_lint.rs?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -188,6 +188,7 @@ pub(crate) fn get_stabilization_version() -> String {\n fn get_test_file_contents(lint_name: &str, header_commands: Option<&str>) -> String {\n     let mut contents = format!(\n         indoc! {\"\n+            #![allow(unused)]\n             #![warn(clippy::{})]\n \n             fn main() {{"}, {"sha": "073e4af1318e35044fb1d228ab6ae4e4e5ee7063", "filename": "src/tools/clippy/clippy_lints/src/almost_complete_letter_range.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Falmost_complete_letter_range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Falmost_complete_letter_range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Falmost_complete_letter_range.rs?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -4,6 +4,7 @@ use clippy_utils::{meets_msrv, msrvs};\n use rustc_ast::ast::{Expr, ExprKind, LitKind, Pat, PatKind, RangeEnd, RangeLimits};\n use rustc_errors::Applicability;\n use rustc_lint::{EarlyContext, EarlyLintPass, LintContext};\n+use rustc_middle::lint::in_external_macro;\n use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::Span;\n@@ -79,6 +80,7 @@ fn check_range(cx: &EarlyContext<'_>, span: Span, start: &Expr, end: &Expr, sugg\n             (LitKind::Byte(b'a') | LitKind::Char('a'), LitKind::Byte(b'z') | LitKind::Char('z'))\n             | (LitKind::Byte(b'A') | LitKind::Char('A'), LitKind::Byte(b'Z') | LitKind::Char('Z'))\n         )\n+        && !in_external_macro(cx.sess(), span)\n     {\n         span_lint_and_then(\n             cx,"}, {"sha": "656dc5feeb57029d3023de76251e8ef341d70ea2", "filename": "src/tools/clippy/clippy_lints/src/assertions_on_result_states.rs", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fassertions_on_result_states.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fassertions_on_result_states.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fassertions_on_result_states.rs?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -1,9 +1,9 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::macros::{find_assert_args, root_macro_call_first_node, PanicExpn};\n-use clippy_utils::path_res;\n use clippy_utils::source::snippet_with_context;\n-use clippy_utils::ty::{implements_trait, is_copy, is_type_diagnostic_item};\n+use clippy_utils::ty::{has_debug_impl, is_copy, is_type_diagnostic_item};\n use clippy_utils::usage::local_used_after_expr;\n+use clippy_utils::{is_expr_final_block_expr, path_res};\n use rustc_errors::Applicability;\n use rustc_hir::def::Res;\n use rustc_hir::{Expr, ExprKind};\n@@ -58,6 +58,7 @@ impl<'tcx> LateLintPass<'tcx> for AssertionsOnResultStates {\n                     return;\n                 }\n             }\n+            let semicolon = if is_expr_final_block_expr(cx.tcx, e) {\";\"} else {\"\"};\n             let mut app = Applicability::MachineApplicable;\n             match method_segment.ident.as_str() {\n                 \"is_ok\" if type_suitable_to_unwrap(cx, substs.type_at(1)) => {\n@@ -68,8 +69,9 @@ impl<'tcx> LateLintPass<'tcx> for AssertionsOnResultStates {\n                         \"called `assert!` with `Result::is_ok`\",\n                         \"replace with\",\n                         format!(\n-                            \"{}.unwrap()\",\n-                            snippet_with_context(cx, recv.span, condition.span.ctxt(), \"..\", &mut app).0\n+                            \"{}.unwrap(){}\",\n+                            snippet_with_context(cx, recv.span, condition.span.ctxt(), \"..\", &mut app).0,\n+                            semicolon\n                         ),\n                         app,\n                     );\n@@ -82,8 +84,9 @@ impl<'tcx> LateLintPass<'tcx> for AssertionsOnResultStates {\n                         \"called `assert!` with `Result::is_err`\",\n                         \"replace with\",\n                         format!(\n-                            \"{}.unwrap_err()\",\n-                            snippet_with_context(cx, recv.span, condition.span.ctxt(), \"..\", &mut app).0\n+                            \"{}.unwrap_err(){}\",\n+                            snippet_with_context(cx, recv.span, condition.span.ctxt(), \"..\", &mut app).0,\n+                            semicolon\n                         ),\n                         app,\n                     );\n@@ -94,13 +97,6 @@ impl<'tcx> LateLintPass<'tcx> for AssertionsOnResultStates {\n     }\n }\n \n-/// This checks whether a given type is known to implement Debug.\n-fn has_debug_impl<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n-    cx.tcx\n-        .get_diagnostic_item(sym::Debug)\n-        .map_or(false, |debug| implements_trait(cx, ty, debug, &[]))\n-}\n-\n fn type_suitable_to_unwrap<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n     has_debug_impl(cx, ty) && !ty.is_unit() && !ty.is_never()\n }"}, {"sha": "51e98cda845193958d907b4fc721587dda8118a7", "filename": "src/tools/clippy/clippy_lints/src/bool_to_int_with_if.rs", "status": "modified", "additions": 29, "deletions": 18, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fbool_to_int_with_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fbool_to_int_with_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fbool_to_int_with_if.rs?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -1,9 +1,9 @@\n-use rustc_ast::{ExprPrecedence, LitKind};\n+use rustc_ast::LitKind;\n use rustc_hir::{Block, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n-use clippy_utils::{diagnostics::span_lint_and_then, is_else_clause, source::snippet_block_with_applicability};\n+use clippy_utils::{diagnostics::span_lint_and_then, is_else_clause, sugg::Sugg};\n use rustc_errors::Applicability;\n \n declare_clippy_lint! {\n@@ -55,27 +55,42 @@ fn check_if_else<'tcx>(ctx: &LateContext<'tcx>, expr: &'tcx rustc_hir::Expr<'tcx\n     if let ExprKind::If(check, then, Some(else_)) = expr.kind\n         && let Some(then_lit) = int_literal(then)\n         && let Some(else_lit) = int_literal(else_)\n-        && check_int_literal_equals_val(then_lit, 1)\n-        && check_int_literal_equals_val(else_lit, 0)\n     {\n+        let inverted = if\n+            check_int_literal_equals_val(then_lit, 1)\n+            && check_int_literal_equals_val(else_lit, 0) {\n+            false\n+        } else if\n+            check_int_literal_equals_val(then_lit, 0)\n+            && check_int_literal_equals_val(else_lit, 1) {\n+            true\n+        } else {\n+            // Expression isn't boolean, exit\n+            return;\n+        };\n         let mut applicability = Applicability::MachineApplicable;\n-        let snippet = snippet_block_with_applicability(ctx, check.span, \"..\", None, &mut applicability);\n-        let snippet_with_braces = {\n-            let need_parens = should_have_parentheses(check);\n-            let (left_paren, right_paren) = if need_parens {(\"(\", \")\")} else {(\"\", \"\")};\n-            format!(\"{left_paren}{snippet}{right_paren}\")\n+        let snippet = {\n+            let mut sugg = Sugg::hir_with_applicability(ctx, check, \"..\", &mut applicability);\n+            if inverted {\n+                sugg = !sugg;\n+            }\n+            sugg\n         };\n \n         let ty = ctx.typeck_results().expr_ty(then_lit); // then and else must be of same type\n \n         let suggestion = {\n             let wrap_in_curly = is_else_clause(ctx.tcx, expr);\n-            let (left_curly, right_curly) = if wrap_in_curly {(\"{\", \"}\")} else {(\"\", \"\")};\n-            format!(\n-                \"{left_curly}{ty}::from({snippet}){right_curly}\"\n-            )\n+            let mut s = Sugg::NonParen(format!(\"{ty}::from({snippet})\").into());\n+            if wrap_in_curly {\n+                s = s.blockify();\n+            }\n+            s\n         }; // when used in else clause if statement should be wrapped in curly braces\n \n+        let into_snippet = snippet.clone().maybe_par();\n+        let as_snippet = snippet.as_ty(ty);\n+\n         span_lint_and_then(ctx,\n             BOOL_TO_INT_WITH_IF,\n             expr.span,\n@@ -87,7 +102,7 @@ fn check_if_else<'tcx>(ctx: &LateContext<'tcx>, expr: &'tcx rustc_hir::Expr<'tcx\n                 suggestion,\n                 applicability,\n             );\n-            diag.note(format!(\"`{snippet_with_braces} as {ty}` or `{snippet_with_braces}.into()` can also be valid options\"));\n+            diag.note(format!(\"`{as_snippet}` or `{into_snippet}.into()` can also be valid options\"));\n         });\n     };\n }\n@@ -119,7 +134,3 @@ fn check_int_literal_equals_val<'tcx>(expr: &'tcx rustc_hir::Expr<'tcx>, expecte\n         false\n     }\n }\n-\n-fn should_have_parentheses<'tcx>(check: &'tcx rustc_hir::Expr<'tcx>) -> bool {\n-    check.precedence().order() < ExprPrecedence::Cast.order()\n-}"}, {"sha": "03d262d5a59c64e2afbd25af634984080c9721b8", "filename": "src/tools/clippy/clippy_lints/src/booleans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fbooleans.rs?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -237,7 +237,7 @@ impl<'a, 'tcx, 'v> SuggestContext<'a, 'tcx, 'v> {\n                 }\n             },\n             &Term(n) => {\n-                let snip = snippet_opt(self.cx, self.terminals[n as usize].span)?;\n+                let snip = snippet_opt(self.cx, self.terminals[n as usize].span.source_callsite())?;\n                 self.output.push_str(&snip);\n             },\n         }"}, {"sha": "501f9ef78aebebc611eeeede1e82a6b1962e4ada", "filename": "src/tools/clippy/clippy_lints/src/dereference.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdereference.rs?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -297,13 +297,10 @@ impl<'tcx> LateLintPass<'tcx> for Dereferencing {\n                         if !is_lint_allowed(cx, EXPLICIT_DEREF_METHODS, expr.hir_id)\n                             && position.lint_explicit_deref() =>\n                     {\n+                        let ty_changed_count = usize::from(!deref_method_same_type(expr_ty, typeck.expr_ty(sub_expr)));\n                         self.state = Some((\n                             State::DerefMethod {\n-                                ty_changed_count: if deref_method_same_type(expr_ty, typeck.expr_ty(sub_expr)) {\n-                                    0\n-                                } else {\n-                                    1\n-                                },\n+                                ty_changed_count,\n                                 is_final_ufcs: matches!(expr.kind, ExprKind::Call(..)),\n                                 target_mut,\n                             },"}, {"sha": "06ae5abeaeb9bcd1433a42b4ba36f5d33207b766", "filename": "src/tools/clippy/clippy_lints/src/derivable_impls.rs", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fderivable_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fderivable_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fderivable_impls.rs?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -1,5 +1,6 @@\n-use clippy_utils::diagnostics::span_lint_and_help;\n+use clippy_utils::diagnostics::span_lint_and_then;\n use clippy_utils::{is_default_equivalent, peel_blocks};\n+use rustc_errors::Applicability;\n use rustc_hir::{\n     def::{DefKind, Res},\n     Body, Expr, ExprKind, GenericArg, Impl, ImplItemKind, Item, ItemKind, Node, PathSegment, QPath, TyKind,\n@@ -100,15 +101,28 @@ impl<'tcx> LateLintPass<'tcx> for DerivableImpls {\n                     ExprKind::Struct(_, fields, _) => fields.iter().all(|ef| is_default_equivalent(cx, ef.expr)),\n                     _ => false,\n                 };\n+\n                 if should_emit {\n-                    let path_string = cx.tcx.def_path_str(adt_def.did());\n-                    span_lint_and_help(\n+                    let struct_span = cx.tcx.def_span(adt_def.did());\n+                    span_lint_and_then(\n                         cx,\n                         DERIVABLE_IMPLS,\n                         item.span,\n                         \"this `impl` can be derived\",\n-                        None,\n-                        &format!(\"try annotating `{}` with `#[derive(Default)]`\", path_string),\n+                        |diag| {\n+                            diag.span_suggestion_hidden(\n+                                item.span,\n+                                \"remove the manual implementation...\",\n+                                String::new(),\n+                                Applicability::MachineApplicable\n+                            );\n+                            diag.span_suggestion(\n+                                struct_span.shrink_to_lo(),\n+                                \"...and instead derive it\",\n+                                \"#[derive(Default)]\\n\".to_string(),\n+                                Applicability::MachineApplicable\n+                            );\n+                        }\n                     );\n                 }\n             }"}, {"sha": "f10d825695360c39ebcc22a05a1a69a1653680e7", "filename": "src/tools/clippy/clippy_lints/src/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fformat.rs?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -71,12 +71,12 @@ impl<'tcx> LateLintPass<'tcx> for UselessFormat {\n             let value = arg.param.value;\n             if_chain! {\n                 if format_args.format_string.parts == [kw::Empty];\n+                if arg.format.is_default();\n                 if match cx.typeck_results().expr_ty(value).peel_refs().kind() {\n                     ty::Adt(adt, _) => cx.tcx.is_diagnostic_item(sym::String, adt.did()),\n                     ty::Str => true,\n                     _ => false,\n                 };\n-                if !arg.format.has_string_formatting();\n                 then {\n                     let is_new_string = match value.kind {\n                         ExprKind::Binary(..) => true,"}, {"sha": "9e1eaf248b73cd4a0f83d46eeaa938d0ae62018c", "filename": "src/tools/clippy/clippy_lints/src/format_args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fformat_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fformat_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fformat_args.rs?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -77,7 +77,7 @@ impl<'tcx> LateLintPass<'tcx> for FormatArgs {\n             if let ExpnKind::Macro(_, name) = outermost_expn_data.kind;\n             then {\n                 for arg in &format_args.args {\n-                    if arg.format.has_string_formatting() {\n+                    if !arg.format.is_default() {\n                         continue;\n                     }\n                     if is_aliased(&format_args, arg.param.value.hir_id) {"}, {"sha": "5857d81ab1f2094087cd5226850c748f4f160801", "filename": "src/tools/clippy/clippy_lints/src/large_stack_arrays.rs", "status": "modified", "additions": 24, "deletions": 26, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flarge_stack_arrays.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flarge_stack_arrays.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flarge_stack_arrays.rs?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -1,7 +1,6 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n use clippy_utils::source::snippet;\n-use if_chain::if_chain;\n-use rustc_hir::{Expr, ExprKind};\n+use rustc_hir::{Expr, ExprKind, Item, ItemKind, Node};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::layout::LayoutOf;\n use rustc_middle::ty::{self, ConstKind};\n@@ -39,29 +38,28 @@ impl_lint_pass!(LargeStackArrays => [LARGE_STACK_ARRAYS]);\n \n impl<'tcx> LateLintPass<'tcx> for LargeStackArrays {\n     fn check_expr(&mut self, cx: &LateContext<'_>, expr: &Expr<'_>) {\n-        if_chain! {\n-            if let ExprKind::Repeat(_, _) = expr.kind;\n-            if let ty::Array(element_type, cst) = cx.typeck_results().expr_ty(expr).kind();\n-            if let ConstKind::Value(ty::ValTree::Leaf(element_count)) = cst.kind();\n-            if let Ok(element_count) = element_count.try_to_machine_usize(cx.tcx);\n-            if let Ok(element_size) = cx.layout_of(*element_type).map(|l| l.size.bytes());\n-            if self.maximum_allowed_size < element_count * element_size;\n-            then {\n-                span_lint_and_help(\n-                    cx,\n-                    LARGE_STACK_ARRAYS,\n-                    expr.span,\n-                    &format!(\n-                        \"allocating a local array larger than {} bytes\",\n-                        self.maximum_allowed_size\n-                    ),\n-                    None,\n-                    &format!(\n-                        \"consider allocating on the heap with `vec!{}.into_boxed_slice()`\",\n-                        snippet(cx, expr.span, \"[...]\")\n-                    ),\n-                );\n-            }\n-        }\n+        if let ExprKind::Repeat(_, _) = expr.kind\n+          && let ty::Array(element_type, cst) = cx.typeck_results().expr_ty(expr).kind()\n+          && let ConstKind::Value(ty::ValTree::Leaf(element_count)) = cst.kind()\n+          && let Ok(element_count) = element_count.try_to_machine_usize(cx.tcx)\n+          && let Ok(element_size) = cx.layout_of(*element_type).map(|l| l.size.bytes())\n+          && !cx.tcx.hir().parent_iter(expr.hir_id)\n+              .any(|(_, node)| matches!(node, Node::Item(Item { kind: ItemKind::Static(..), .. })))\n+          && self.maximum_allowed_size < element_count * element_size {\n+              span_lint_and_help(\n+                  cx,\n+                  LARGE_STACK_ARRAYS,\n+                  expr.span,\n+                  &format!(\n+                      \"allocating a local array larger than {} bytes\",\n+                      self.maximum_allowed_size\n+                  ),\n+                  None,\n+                  &format!(\n+                      \"consider allocating on the heap with `vec!{}.into_boxed_slice()`\",\n+                      snippet(cx, expr.span, \"[...]\")\n+                  ),\n+              );\n+          }\n     }\n }"}, {"sha": "8718d5fa1da0b4225d0b960571e1c26be367813a", "filename": "src/tools/clippy/clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_all.rs?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -171,6 +171,7 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(methods::ITERATOR_STEP_BY_ZERO),\n     LintId::of(methods::ITER_CLONED_COLLECT),\n     LintId::of(methods::ITER_COUNT),\n+    LintId::of(methods::ITER_KV_MAP),\n     LintId::of(methods::ITER_NEXT_SLICE),\n     LintId::of(methods::ITER_NTH),\n     LintId::of(methods::ITER_NTH_ZERO),\n@@ -351,7 +352,6 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(useless_conversion::USELESS_CONVERSION),\n     LintId::of(vec::USELESS_VEC),\n     LintId::of(vec_init_then_push::VEC_INIT_THEN_PUSH),\n-    LintId::of(write::POSITIONAL_NAMED_FORMAT_PARAMETERS),\n     LintId::of(write::PRINTLN_EMPTY_STRING),\n     LintId::of(write::PRINT_LITERAL),\n     LintId::of(write::PRINT_WITH_NEWLINE),"}, {"sha": "185189a6af5b63f02de49bb0384e59f5c4553af8", "filename": "src/tools/clippy/clippy_lints/src/lib.register_complexity.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_complexity.rs?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -40,6 +40,7 @@ store.register_group(true, \"clippy::complexity\", Some(\"clippy_complexity\"), vec!\n     LintId::of(methods::GET_LAST_WITH_LEN),\n     LintId::of(methods::INSPECT_FOR_EACH),\n     LintId::of(methods::ITER_COUNT),\n+    LintId::of(methods::ITER_KV_MAP),\n     LintId::of(methods::MANUAL_FILTER_MAP),\n     LintId::of(methods::MANUAL_FIND_MAP),\n     LintId::of(methods::MANUAL_SPLIT_ONCE),"}, {"sha": "02fcc8de50727c90179322b374176b460edf9a65", "filename": "src/tools/clippy/clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_lints.rs?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -313,6 +313,7 @@ store.register_lints(&[\n     methods::ITERATOR_STEP_BY_ZERO,\n     methods::ITER_CLONED_COLLECT,\n     methods::ITER_COUNT,\n+    methods::ITER_KV_MAP,\n     methods::ITER_NEXT_SLICE,\n     methods::ITER_NTH,\n     methods::ITER_NTH_ZERO,\n@@ -595,7 +596,6 @@ store.register_lints(&[\n     vec_init_then_push::VEC_INIT_THEN_PUSH,\n     wildcard_imports::ENUM_GLOB_USE,\n     wildcard_imports::WILDCARD_IMPORTS,\n-    write::POSITIONAL_NAMED_FORMAT_PARAMETERS,\n     write::PRINTLN_EMPTY_STRING,\n     write::PRINT_LITERAL,\n     write::PRINT_STDERR,"}, {"sha": "6125d0f7a8628db472410845e91d5b40536b7f21", "filename": "src/tools/clippy/clippy_lints/src/lib.register_suspicious.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_suspicious.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_suspicious.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_suspicious.rs?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -35,5 +35,4 @@ store.register_group(true, \"clippy::suspicious\", Some(\"clippy_suspicious\"), vec!\n     LintId::of(suspicious_trait_impl::SUSPICIOUS_ARITHMETIC_IMPL),\n     LintId::of(suspicious_trait_impl::SUSPICIOUS_OP_ASSIGN_IMPL),\n     LintId::of(swap_ptr_to_ref::SWAP_PTR_TO_REF),\n-    LintId::of(write::POSITIONAL_NAMED_FORMAT_PARAMETERS),\n ])"}, {"sha": "298566cb5b625f4f7ce968b65b7fc3dd22bb0e56", "filename": "src/tools/clippy/clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -40,7 +40,6 @@ extern crate rustc_lint;\n extern crate rustc_middle;\n extern crate rustc_mir_dataflow;\n extern crate rustc_parse;\n-extern crate rustc_parse_format;\n extern crate rustc_session;\n extern crate rustc_span;\n extern crate rustc_target;\n@@ -425,7 +424,6 @@ pub fn register_pre_expansion_lints(store: &mut rustc_lint::LintStore, sess: &Se\n         })\n     });\n \n-    store.register_pre_expansion_pass(|| Box::new(write::Write::default()));\n     store.register_pre_expansion_pass(move || Box::new(attrs::EarlyAttributes { msrv }));\n }\n \n@@ -524,7 +522,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     #[cfg(feature = \"internal\")]\n     {\n         if std::env::var(\"ENABLE_METADATA_COLLECTION\").eq(&Ok(\"1\".to_string())) {\n-            store.register_late_pass(|| Box::new(utils::internal_lints::metadata_collector::MetadataCollector::new()));\n+            store.register_late_pass(|_| Box::new(utils::internal_lints::metadata_collector::MetadataCollector::new()));\n             return;\n         }\n     }\n@@ -879,6 +877,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n             ignore_publish: cargo_ignore_publish,\n         })\n     });\n+    store.register_late_pass(|_| Box::new(write::Write::default()));\n     store.register_early_pass(|| Box::new(crate_in_macro_def::CrateInMacroDef));\n     store.register_early_pass(|| Box::new(empty_structs_with_brackets::EmptyStructsWithBrackets));\n     store.register_late_pass(|_| Box::new(unnecessary_owned_empty_strings::UnnecessaryOwnedEmptyStrings));"}, {"sha": "720d9a68c85ee81bf43e2f34ed7fe7042415110b", "filename": "src/tools/clippy/clippy_lints/src/methods/err_expect.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Ferr_expect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Ferr_expect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Ferr_expect.rs?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -1,6 +1,6 @@\n use super::ERR_EXPECT;\n use clippy_utils::diagnostics::span_lint_and_sugg;\n-use clippy_utils::ty::implements_trait;\n+use clippy_utils::ty::has_debug_impl;\n use clippy_utils::{meets_msrv, msrvs, ty::is_type_diagnostic_item};\n use rustc_errors::Applicability;\n use rustc_lint::LateContext;\n@@ -28,7 +28,7 @@ pub(super) fn check(\n         // Tests if the T type in a `Result<T, E>` is not None\n         if let Some(data_type) = get_data_type(cx, result_type);\n         // Tests if the T type in a `Result<T, E>` implements debug\n-        if has_debug_impl(data_type, cx);\n+        if has_debug_impl(cx, data_type);\n \n         then {\n             span_lint_and_sugg(\n@@ -51,10 +51,3 @@ fn get_data_type<'a>(cx: &LateContext<'_>, ty: Ty<'a>) -> Option<Ty<'a>> {\n         _ => None,\n     }\n }\n-\n-/// Given a type, very if the Debug trait has been impl'd\n-fn has_debug_impl<'tcx>(ty: Ty<'tcx>, cx: &LateContext<'tcx>) -> bool {\n-    cx.tcx\n-        .get_diagnostic_item(sym::Debug)\n-        .map_or(false, |debug| implements_trait(cx, ty, debug, &[]))\n-}"}, {"sha": "a7eecabd68495093b54fb67c0924caaa41c8acf0", "filename": "src/tools/clippy/clippy_lints/src/methods/iter_kv_map.rs", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fiter_kv_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fiter_kv_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fiter_kv_map.rs?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -0,0 +1,87 @@\n+#![allow(unused_imports)]\n+\n+use super::ITER_KV_MAP;\n+use clippy_utils::diagnostics::{multispan_sugg, span_lint_and_sugg, span_lint_and_then};\n+use clippy_utils::source::{snippet, snippet_with_applicability};\n+use clippy_utils::sugg;\n+use clippy_utils::ty::is_type_diagnostic_item;\n+use clippy_utils::visitors::is_local_used;\n+use rustc_hir::{BindingAnnotation, Body, BorrowKind, Expr, ExprKind, Mutability, Pat, PatKind};\n+use rustc_lint::{LateContext, LintContext};\n+use rustc_middle::ty;\n+use rustc_span::sym;\n+use rustc_span::Span;\n+\n+/// lint use of:\n+/// - `hashmap.iter().map(|(_, v)| v)`\n+/// - `hashmap.into_iter().map(|(_, v)| v)`\n+/// on `HashMaps` and `BTreeMaps` in std\n+\n+pub(super) fn check<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    map_type: &'tcx str,     // iter / into_iter\n+    expr: &'tcx Expr<'tcx>,  // .iter().map(|(_, v_| v))\n+    recv: &'tcx Expr<'tcx>,  // hashmap\n+    m_arg: &'tcx Expr<'tcx>, // |(_, v)| v\n+) {\n+    if_chain! {\n+        if !expr.span.from_expansion();\n+        if let ExprKind::Closure(c) = m_arg.kind;\n+        if let Body {params: [p], value: body_expr, generator_kind: _ } = cx.tcx.hir().body(c.body);\n+        if let PatKind::Tuple([key_pat, val_pat], _) = p.pat.kind;\n+\n+        let (replacement_kind, binded_ident) = match (&key_pat.kind, &val_pat.kind) {\n+            (key, PatKind::Binding(_, _, value, _)) if pat_is_wild(cx, key, m_arg) => (\"value\", value),\n+            (PatKind::Binding(_, _, key, _), value) if pat_is_wild(cx, value, m_arg) => (\"key\", key),\n+            _ => return,\n+        };\n+\n+        let ty = cx.typeck_results().expr_ty(recv);\n+        if is_type_diagnostic_item(cx, ty, sym::HashMap) || is_type_diagnostic_item(cx, ty, sym::BTreeMap);\n+\n+        then {\n+            let mut applicability = rustc_errors::Applicability::MachineApplicable;\n+            let recv_snippet = snippet_with_applicability(cx, recv.span, \"map\", &mut applicability);\n+            let into_prefix = if map_type == \"into_iter\" {\"into_\"} else {\"\"};\n+\n+            if_chain! {\n+                if let ExprKind::Path(rustc_hir::QPath::Resolved(_, path)) = body_expr.kind;\n+                if let [local_ident] = path.segments;\n+                if local_ident.ident.as_str() == binded_ident.as_str();\n+\n+                then {\n+                    span_lint_and_sugg(\n+                        cx,\n+                        ITER_KV_MAP,\n+                        expr.span,\n+                        &format!(\"iterating on a map's {}s\", replacement_kind),\n+                        \"try\",\n+                        format!(\"{}.{}{}s()\", recv_snippet, into_prefix, replacement_kind),\n+                        applicability,\n+                    );\n+                } else {\n+                    span_lint_and_sugg(\n+                        cx,\n+                        ITER_KV_MAP,\n+                        expr.span,\n+                        &format!(\"iterating on a map's {}s\", replacement_kind),\n+                        \"try\",\n+                        format!(\"{}.{}{}s().map(|{}| {})\", recv_snippet, into_prefix, replacement_kind, binded_ident,\n+                            snippet_with_applicability(cx, body_expr.span, \"/* body */\", &mut applicability)),\n+                        applicability,\n+                    );\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+/// Returns `true` if the pattern is a `PatWild`, or is an ident prefixed with `_`\n+/// that is not locally used.\n+fn pat_is_wild<'tcx>(cx: &LateContext<'tcx>, pat: &'tcx PatKind<'_>, body: &'tcx Expr<'_>) -> bool {\n+    match *pat {\n+        PatKind::Wild => true,\n+        PatKind::Binding(_, id, ident, None) if ident.as_str().starts_with('_') => !is_local_used(cx, body, id),\n+        _ => false,\n+    }\n+}"}, {"sha": "cdde4c54d6378d283c1ff22262d6062e3794f535", "filename": "src/tools/clippy/clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -35,6 +35,7 @@ mod into_iter_on_ref;\n mod is_digit_ascii_radix;\n mod iter_cloned_collect;\n mod iter_count;\n+mod iter_kv_map;\n mod iter_next_slice;\n mod iter_nth;\n mod iter_nth_zero;\n@@ -3036,6 +3037,37 @@ declare_clippy_lint! {\n     \"use of `File::read_to_end` or `File::read_to_string`\"\n }\n \n+declare_clippy_lint! {\n+    /// ### What it does\n+    ///\n+    /// Checks for iterating a map (`HashMap` or `BTreeMap`) and\n+    /// ignoring either the keys or values.\n+    ///\n+    /// ### Why is this bad?\n+    ///\n+    /// Readability. There are `keys` and `values` methods that\n+    /// can be used to express that we only need the keys or the values.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```\n+    /// # use std::collections::HashMap;\n+    /// let map: HashMap<u32, u32> = HashMap::new();\n+    /// let values = map.iter().map(|(_, value)| value).collect::<Vec<_>>();\n+    /// ```\n+    ///\n+    /// Use instead:\n+    /// ```\n+    /// # use std::collections::HashMap;\n+    /// let map: HashMap<u32, u32> = HashMap::new();\n+    /// let values = map.values().collect::<Vec<_>>();\n+    /// ```\n+    #[clippy::version = \"1.65.0\"]\n+    pub ITER_KV_MAP,\n+    complexity,\n+    \"iterating on map using `iter` when `keys` or `values` would do\"\n+}\n+\n pub struct Methods {\n     avoid_breaking_exported_api: bool,\n     msrv: Option<RustcVersion>,\n@@ -3159,6 +3191,7 @@ impl_lint_pass!(Methods => [\n     UNNECESSARY_SORT_BY,\n     VEC_RESIZE_TO_ZERO,\n     VERBOSE_FILE_READS,\n+    ITER_KV_MAP,\n ]);\n \n /// Extracts a method call name, args, and `Span` of the method name.\n@@ -3498,6 +3531,9 @@ impl Methods {\n                 (name @ (\"map\" | \"map_err\"), [m_arg]) => {\n                     if name == \"map\" {\n                         map_clone::check(cx, expr, recv, m_arg, self.msrv);\n+                        if let Some((map_name @ (\"iter\" | \"into_iter\"), recv2, _, _)) = method_call(recv) {\n+                            iter_kv_map::check(cx, map_name, expr, recv2, m_arg);\n+                        }\n                     } else {\n                         map_err_ignore::check(cx, expr, m_arg);\n                     }"}, {"sha": "646fc4a7bcf37ce6fed29f76b91973ab4e731e96", "filename": "src/tools/clippy/clippy_lints/src/methods/ok_expect.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fok_expect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fok_expect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fok_expect.rs?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -1,5 +1,5 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n-use clippy_utils::ty::{implements_trait, is_type_diagnostic_item};\n+use clippy_utils::ty::{has_debug_impl, is_type_diagnostic_item};\n use if_chain::if_chain;\n use rustc_hir as hir;\n use rustc_lint::LateContext;\n@@ -15,7 +15,7 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, recv: &hir::Expr\n         if is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(recv), sym::Result);\n         let result_type = cx.typeck_results().expr_ty(recv);\n         if let Some(error_type) = get_error_type(cx, result_type);\n-        if has_debug_impl(error_type, cx);\n+        if has_debug_impl(cx, error_type);\n \n         then {\n             span_lint_and_help(\n@@ -37,10 +37,3 @@ fn get_error_type<'a>(cx: &LateContext<'_>, ty: Ty<'a>) -> Option<Ty<'a>> {\n         _ => None,\n     }\n }\n-\n-/// This checks whether a given type is known to implement Debug.\n-fn has_debug_impl<'tcx>(ty: Ty<'tcx>, cx: &LateContext<'tcx>) -> bool {\n-    cx.tcx\n-        .get_diagnostic_item(sym::Debug)\n-        .map_or(false, |debug| implements_trait(cx, ty, debug, &[]))\n-}"}, {"sha": "79d784c342caccac92d0da8031836d4f82334964", "filename": "src/tools/clippy/clippy_lints/src/methods/unnecessary_to_owned.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -7,7 +7,7 @@ use clippy_utils::visitors::find_all_ret_expressions;\n use clippy_utils::{fn_def_id, get_parent_expr, is_diag_item_method, is_diag_trait_item, return_ty};\n use clippy_utils::{meets_msrv, msrvs};\n use rustc_errors::Applicability;\n-use rustc_hir::{def_id::DefId, BorrowKind, Expr, ExprKind, ItemKind, Node};\n+use rustc_hir::{def_id::DefId, BorrowKind, Expr, ExprKind, ItemKind, LangItem, Node};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::LateContext;\n use rustc_middle::mir::Mutability;\n@@ -268,7 +268,7 @@ fn check_other_call_arg<'tcx>(\n         // We can't add an `&` when the trait is `Deref` because `Target = &T` won't match\n         // `Target = T`.\n         if n_refs > 0 || is_copy(cx, receiver_ty) || trait_predicate.def_id() != deref_trait_id;\n-        let n_refs = max(n_refs, if is_copy(cx, receiver_ty) { 0 } else { 1 });\n+        let n_refs = max(n_refs, usize::from(!is_copy(cx, receiver_ty)));\n         if let Some(receiver_snippet) = snippet_opt(cx, receiver.span);\n         then {\n             span_lint_and_sugg(\n@@ -379,6 +379,10 @@ fn can_change_type<'a>(cx: &LateContext<'a>, mut expr: &'a Expr<'a>, mut ty: Ty<\n             Node::Expr(parent_expr) => {\n                 if let Some((callee_def_id, call_substs, recv, call_args)) = get_callee_substs_and_args(cx, parent_expr)\n                 {\n+                    if cx.tcx.lang_items().require(LangItem::IntoFutureIntoFuture) == Ok(callee_def_id) {\n+                        return false;\n+                    }\n+\n                     let fn_sig = cx.tcx.fn_sig(callee_def_id).skip_binder();\n                     if let Some(arg_index) = recv.into_iter().chain(call_args).position(|arg| arg.hir_id == expr.hir_id)\n                         && let Some(param_ty) = fn_sig.inputs().get(arg_index)"}, {"sha": "22071ab3044f4f7a8271f3df4954e4914c46d4d0", "filename": "src/tools/clippy/clippy_lints/src/module_style.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmodule_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmodule_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmodule_style.rs?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -2,7 +2,7 @@ use rustc_ast::ast;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_lint::{EarlyContext, EarlyLintPass, Level, LintContext};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n-use rustc_span::{FileName, RealFileName, SourceFile, Span, SyntaxContext};\n+use rustc_span::{FileName, SourceFile, Span, SyntaxContext};\n use std::ffi::OsStr;\n use std::path::{Component, Path};\n \n@@ -79,7 +79,7 @@ impl EarlyLintPass for ModStyle {\n \n         let files = cx.sess().source_map().files();\n \n-        let RealFileName::LocalPath(trim_to_src) = &cx.sess().opts.working_dir else { return };\n+        let Some(trim_to_src) = cx.sess().opts.working_dir.local_path() else { return };\n \n         // `folder_segments` is all unique folder path segments `path/to/foo.rs` gives\n         // `[path, to]` but not foo\n@@ -90,7 +90,7 @@ impl EarlyLintPass for ModStyle {\n         // `{ foo => path/to/foo.rs, .. }\n         let mut file_map = FxHashMap::default();\n         for file in files.iter() {\n-            if let FileName::Real(RealFileName::LocalPath(lp)) = &file.name {\n+            if let FileName::Real(name) = &file.name && let Some(lp) = name.local_path() {\n                 let path = if lp.is_relative() {\n                     lp\n                 } else if let Ok(relative) = lp.strip_prefix(trim_to_src) {"}, {"sha": "f86dfb6b8df8497d49352fe5076a744d2976ac6d", "filename": "src/tools/clippy/clippy_lints/src/nonstandard_macro_braces.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnonstandard_macro_braces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnonstandard_macro_braces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnonstandard_macro_braces.rs?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -184,6 +184,10 @@ fn macro_braces(conf: FxHashSet<MacroMatcher>) -> FxHashMap<String, (String, Str\n             name: \"vec\",\n             braces: (\"[\", \"]\"),\n         ),\n+        macro_matcher!(\n+            name: \"matches\",\n+            braces: (\"(\", \")\"),\n+        ),\n     ]\n     .into_iter()\n     .collect::<FxHashMap<_, _>>();"}, {"sha": "d24c57c0a4b8a5ccdcb342a3b89850f9a42d70a0", "filename": "src/tools/clippy/clippy_lints/src/operators/arithmetic_side_effects.rs", "status": "modified", "additions": 30, "deletions": 21, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Foperators%2Farithmetic_side_effects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Foperators%2Farithmetic_side_effects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Foperators%2Farithmetic_side_effects.rs?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -42,27 +42,30 @@ impl ArithmeticSideEffects {\n         }\n     }\n \n-    /// Checks assign operators (+=, -=, *=, /=) of integers in a non-constant environment that\n-    /// won't overflow.\n-    fn has_valid_assign_op(op: &Spanned<hir::BinOpKind>, rhs: &hir::Expr<'_>, rhs_refs: Ty<'_>) -> bool {\n-        if !Self::is_literal_integer(rhs, rhs_refs) {\n-            return false;\n+    /// Assuming that `expr` is a literal integer, checks operators (+=, -=, *, /) in a\n+    /// non-constant environment that won't overflow.\n+    fn has_valid_op(op: &Spanned<hir::BinOpKind>, expr: &hir::Expr<'_>) -> bool {\n+        if let hir::BinOpKind::Add | hir::BinOpKind::Sub = op.node\n+            && let hir::ExprKind::Lit(ref lit) = expr.kind\n+            && let ast::LitKind::Int(0, _) = lit.node\n+        {\n+            return true;\n+        }\n+        if let hir::BinOpKind::Div | hir::BinOpKind::Rem = op.node\n+            && let hir::ExprKind::Lit(ref lit) = expr.kind\n+            && !matches!(lit.node, ast::LitKind::Int(0, _))\n+        {\n+            return true;\n         }\n-        if let hir::BinOpKind::Div | hir::BinOpKind::Mul = op.node\n-            && let hir::ExprKind::Lit(ref lit) = rhs.kind\n-            && let ast::LitKind::Int(1, _) = lit.node\n+        if let hir::BinOpKind::Mul = op.node\n+            && let hir::ExprKind::Lit(ref lit) = expr.kind\n+            && let ast::LitKind::Int(0 | 1, _) = lit.node\n         {\n             return true;\n         }\n         false\n     }\n \n-    /// Checks \"raw\" binary operators (+, -, *, /) of integers in a non-constant environment\n-    /// already handled by the CTFE.\n-    fn has_valid_bin_op(lhs: &hir::Expr<'_>, lhs_refs: Ty<'_>, rhs: &hir::Expr<'_>, rhs_refs: Ty<'_>) -> bool {\n-        Self::is_literal_integer(lhs, lhs_refs) && Self::is_literal_integer(rhs, rhs_refs)\n-    }\n-\n     /// Checks if the given `expr` has any of the inner `allowed` elements.\n     fn is_allowed_ty(&self, cx: &LateContext<'_>, expr: &hir::Expr<'_>) -> bool {\n         self.allowed.contains(\n@@ -83,7 +86,8 @@ impl ArithmeticSideEffects {\n     }\n \n     fn issue_lint(&mut self, cx: &LateContext<'_>, expr: &hir::Expr<'_>) {\n-        span_lint(cx, ARITHMETIC_SIDE_EFFECTS, expr.span, \"arithmetic detected\");\n+        let msg = \"arithmetic operation that can potentially result in unexpected side-effects\";\n+        span_lint(cx, ARITHMETIC_SIDE_EFFECTS, expr.span, msg);\n         self.expr_span = Some(expr.span);\n     }\n \n@@ -115,13 +119,18 @@ impl ArithmeticSideEffects {\n         if self.is_allowed_ty(cx, lhs) || self.is_allowed_ty(cx, rhs) {\n             return;\n         }\n-        let lhs_refs = cx.typeck_results().expr_ty(lhs).peel_refs();\n-        let rhs_refs = cx.typeck_results().expr_ty(rhs).peel_refs();\n-        let has_valid_assign_op = Self::has_valid_assign_op(op, rhs, rhs_refs);\n-        if has_valid_assign_op || Self::has_valid_bin_op(lhs, lhs_refs, rhs, rhs_refs) {\n-            return;\n+        let has_valid_op = match (\n+            Self::is_literal_integer(lhs, cx.typeck_results().expr_ty(lhs).peel_refs()),\n+            Self::is_literal_integer(rhs, cx.typeck_results().expr_ty(rhs).peel_refs()),\n+        ) {\n+            (true, true) => true,\n+            (true, false) => Self::has_valid_op(op, lhs),\n+            (false, true) => Self::has_valid_op(op, rhs),\n+            (false, false) => false,\n+        };\n+        if !has_valid_op {\n+            self.issue_lint(cx, expr);\n         }\n-        self.issue_lint(cx, expr);\n     }\n }\n "}, {"sha": "d320eea1c377d3d9284ee85a1beb49eccb0cbca1", "filename": "src/tools/clippy/clippy_lints/src/renamed_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Frenamed_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Frenamed_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Frenamed_lints.rs?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -36,6 +36,7 @@ pub static RENAMED_LINTS: &[(&str, &str)] = &[\n     (\"clippy::invalid_ref\", \"invalid_value\"),\n     (\"clippy::mem_discriminant_non_enum\", \"enum_intrinsics_non_enums\"),\n     (\"clippy::panic_params\", \"non_fmt_panics\"),\n+    (\"clippy::positional_named_format_parameters\", \"named_arguments_used_positionally\"),\n     (\"clippy::temporary_cstring_as_ptr\", \"temporary_cstring_as_ptr\"),\n     (\"clippy::unknown_clippy_lints\", \"unknown_lints\"),\n     (\"clippy::unused_label\", \"unused_labels\"),"}, {"sha": "f1cebf0f9923da572c18738731724b88500f2411", "filename": "src/tools/clippy/clippy_lints/src/unused_peekable.rs", "status": "modified", "additions": 21, "deletions": 15, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funused_peekable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funused_peekable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funused_peekable.rs?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -6,6 +6,7 @@ use rustc_hir::intravisit::{walk_expr, Visitor};\n use rustc_hir::lang_items::LangItem;\n use rustc_hir::{Block, Expr, ExprKind, HirId, Local, Node, PatKind, PathSegment, StmtKind};\n use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::hir::nested_filter::OnlyBodies;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::sym;\n \n@@ -109,8 +110,14 @@ impl<'a, 'tcx> PeekableVisitor<'a, 'tcx> {\n     }\n }\n \n-impl<'tcx> Visitor<'_> for PeekableVisitor<'_, 'tcx> {\n-    fn visit_expr(&mut self, ex: &'_ Expr<'_>) {\n+impl<'tcx> Visitor<'tcx> for PeekableVisitor<'_, 'tcx> {\n+    type NestedFilter = OnlyBodies;\n+\n+    fn nested_visit_map(&mut self) -> Self::Map {\n+        self.cx.tcx.hir()\n+    }\n+\n+    fn visit_expr(&mut self, ex: &'tcx Expr<'tcx>) {\n         if self.found_peek_call {\n             return;\n         }\n@@ -136,12 +143,11 @@ impl<'tcx> Visitor<'_> for PeekableVisitor<'_, 'tcx> {\n                                     return;\n                                 }\n \n-                                if args.iter().any(|arg| {\n-                                    matches!(arg.kind, ExprKind::Path(_)) && arg_is_mut_peekable(self.cx, arg)\n-                                }) {\n+                                if args.iter().any(|arg| arg_is_mut_peekable(self.cx, arg)) {\n                                     self.found_peek_call = true;\n-                                    return;\n                                 }\n+\n+                                return;\n                             },\n                             // Catch anything taking a Peekable mutably\n                             ExprKind::MethodCall(\n@@ -190,21 +196,21 @@ impl<'tcx> Visitor<'_> for PeekableVisitor<'_, 'tcx> {\n                     Node::Local(Local { init: Some(init), .. }) => {\n                         if arg_is_mut_peekable(self.cx, init) {\n                             self.found_peek_call = true;\n-                            return;\n                         }\n \n-                        break;\n+                        return;\n                     },\n-                    Node::Stmt(stmt) => match stmt.kind {\n-                        StmtKind::Expr(_) | StmtKind::Semi(_) => {},\n-                        _ => {\n-                            self.found_peek_call = true;\n-                            return;\n-                        },\n+                    Node::Stmt(stmt) => {\n+                        match stmt.kind {\n+                            StmtKind::Local(_) | StmtKind::Item(_) => self.found_peek_call = true,\n+                            StmtKind::Expr(_) | StmtKind::Semi(_) => {},\n+                        }\n+\n+                        return;\n                     },\n                     Node::Block(_) | Node::ExprField(_) => {},\n                     _ => {\n-                        break;\n+                        return;\n                     },\n                 }\n             }"}, {"sha": "44ab9bca79596bd8763d52e5c6d9fd3fbad9d7af", "filename": "src/tools/clippy/clippy_lints/src/use_self.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fuse_self.rs?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -1,6 +1,6 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::ty::same_type_and_consts;\n-use clippy_utils::{meets_msrv, msrvs};\n+use clippy_utils::{is_from_proc_macro, meets_msrv, msrvs};\n use if_chain::if_chain;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::Applicability;\n@@ -87,7 +87,7 @@ impl_lint_pass!(UseSelf => [USE_SELF]);\n const SEGMENTS_MSG: &str = \"segments should be composed of at least 1 element\";\n \n impl<'tcx> LateLintPass<'tcx> for UseSelf {\n-    fn check_item(&mut self, _cx: &LateContext<'_>, item: &Item<'_>) {\n+    fn check_item(&mut self, cx: &LateContext<'tcx>, item: &Item<'tcx>) {\n         if matches!(item.kind, ItemKind::OpaqueTy(_)) {\n             // skip over `ItemKind::OpaqueTy` in order to lint `foo() -> impl <..>`\n             return;\n@@ -103,6 +103,7 @@ impl<'tcx> LateLintPass<'tcx> for UseSelf {\n             if parameters.as_ref().map_or(true, |params| {\n                 !params.parenthesized && !params.args.iter().any(|arg| matches!(arg, GenericArg::Lifetime(_)))\n             });\n+            if !is_from_proc_macro(cx, item); // expensive, should be last check\n             then {\n                 StackItem::Check {\n                     impl_id: item.def_id,\n@@ -213,9 +214,6 @@ impl<'tcx> LateLintPass<'tcx> for UseSelf {\n                 hir_ty_to_ty(cx.tcx, hir_ty)\n             };\n             if same_type_and_consts(ty, cx.tcx.type_of(impl_id));\n-            let hir = cx.tcx.hir();\n-            // prevents false positive on `#[derive(serde::Deserialize)]`\n-            if !hir.span(hir.get_parent_node(hir_ty.hir_id)).in_derive_expansion();\n             then {\n                 span_lint(cx, hir_ty.span);\n             }"}, {"sha": "2be3fa99c811cde98fb4eef4f7342429bdefaacb", "filename": "src/tools/clippy/clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -476,7 +476,7 @@ pub fn format_error(error: Box<dyn Error>) -> String {\n \n             let mut msg = String::from(prefix);\n             for row in 0..rows {\n-                write!(msg, \"\\n\").unwrap();\n+                writeln!(msg).unwrap();\n                 for (column, column_width) in column_widths.iter().copied().enumerate() {\n                     let index = column * rows + row;\n                     let field = fields.get(index).copied().unwrap_or_default();"}, {"sha": "06e7d70170171c97c0ffa5292fd738903407f830", "filename": "src/tools/clippy/clippy_lints/src/write.rs", "status": "modified", "additions": 254, "deletions": 533, "changes": 787, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fwrite.rs?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -1,20 +1,12 @@\n-use std::borrow::Cow;\n-use std::iter;\n-use std::ops::{Deref, Range};\n-\n-use clippy_utils::diagnostics::{span_lint, span_lint_and_sugg, span_lint_and_then};\n-use clippy_utils::source::{snippet, snippet_opt, snippet_with_applicability};\n-use rustc_ast::ast::{Expr, ExprKind, Impl, Item, ItemKind, MacCall, Path, StrLit, StrStyle};\n-use rustc_ast::ptr::P;\n-use rustc_ast::token::{self, LitKind};\n-use rustc_ast::tokenstream::TokenStream;\n-use rustc_errors::{Applicability, DiagnosticBuilder};\n-use rustc_lexer::unescape::{self, EscapeError};\n-use rustc_lint::{EarlyContext, EarlyLintPass, LintContext};\n-use rustc_parse::parser;\n+use clippy_utils::diagnostics::{span_lint, span_lint_and_then};\n+use clippy_utils::macros::{root_macro_call_first_node, FormatArgsExpn, MacroCall};\n+use clippy_utils::source::snippet_opt;\n+use rustc_ast::LitKind;\n+use rustc_errors::Applicability;\n+use rustc_hir::{Expr, ExprKind, HirIdMap, Impl, Item, ItemKind};\n+use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n-use rustc_span::symbol::{kw, Symbol};\n-use rustc_span::{sym, BytePos, InnerSpan, Span, DUMMY_SP};\n+use rustc_span::{sym, BytePos, Span};\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -74,13 +66,7 @@ declare_clippy_lint! {\n     /// application and might forget to remove those prints afterward.\n     ///\n     /// ### Known problems\n-    /// * Only catches `print!` and `println!` calls.\n-    /// * The lint level is unaffected by crate attributes. The level can still\n-    ///   be set for functions, modules and other items. To change the level for\n-    ///   the entire crate, please use command line flags. More information and a\n-    ///   configuration example can be found in [clippy#6610].\n-    ///\n-    /// [clippy#6610]: https://github.com/rust-lang/rust-clippy/issues/6610#issuecomment-977120558\n+    /// Only catches `print!` and `println!` calls.\n     ///\n     /// ### Example\n     /// ```rust\n@@ -102,13 +88,7 @@ declare_clippy_lint! {\n     /// application and might forget to remove those prints afterward.\n     ///\n     /// ### Known problems\n-    /// * Only catches `eprint!` and `eprintln!` calls.\n-    /// * The lint level is unaffected by crate attributes. The level can still\n-    ///   be set for functions, modules and other items. To change the level for\n-    ///   the entire crate, please use command line flags. More information and a\n-    ///   configuration example can be found in [clippy#6610].\n-    ///\n-    /// [clippy#6610]: https://github.com/rust-lang/rust-clippy/issues/6610#issuecomment-977120558\n+    /// Only catches `eprint!` and `eprintln!` calls.\n     ///\n     /// ### Example\n     /// ```rust\n@@ -149,10 +129,6 @@ declare_clippy_lint! {\n     /// (c.f., https://github.com/matthiaskrgr/rust-str-bench) and unnecessary\n     /// (i.e., just put the literal in the format string)\n     ///\n-    /// ### Known problems\n-    /// Will also warn with macro calls as arguments that expand to literals\n-    /// -- e.g., `println!(\"{}\", env!(\"FOO\"))`.\n-    ///\n     /// ### Example\n     /// ```rust\n     /// println!(\"{}\", \"foo\");\n@@ -234,10 +210,6 @@ declare_clippy_lint! {\n     /// (c.f., https://github.com/matthiaskrgr/rust-str-bench) and unnecessary\n     /// (i.e., just put the literal in the format string)\n     ///\n-    /// ### Known problems\n-    /// Will also warn with macro calls as arguments that expand to literals\n-    /// -- e.g., `writeln!(buf, \"{}\", env!(\"FOO\"))`.\n-    ///\n     /// ### Example\n     /// ```rust\n     /// # use std::fmt::Write;\n@@ -257,28 +229,6 @@ declare_clippy_lint! {\n     \"writing a literal with a format string\"\n }\n \n-declare_clippy_lint! {\n-    /// ### What it does\n-    /// This lint warns when a named parameter in a format string is used as a positional one.\n-    ///\n-    /// ### Why is this bad?\n-    /// It may be confused for an assignment and obfuscates which parameter is being used.\n-    ///\n-    /// ### Example\n-    /// ```rust\n-    /// println!(\"{}\", x = 10);\n-    /// ```\n-    ///\n-    /// Use instead:\n-    /// ```rust\n-    /// println!(\"{x}\", x = 10);\n-    /// ```\n-    #[clippy::version = \"1.63.0\"]\n-    pub POSITIONAL_NAMED_FORMAT_PARAMETERS,\n-    suspicious,\n-    \"named parameter in a format string is used positionally\"\n-}\n-\n #[derive(Default)]\n pub struct Write {\n     in_debug_impl: bool,\n@@ -294,537 +244,308 @@ impl_lint_pass!(Write => [\n     WRITE_WITH_NEWLINE,\n     WRITELN_EMPTY_STRING,\n     WRITE_LITERAL,\n-    POSITIONAL_NAMED_FORMAT_PARAMETERS,\n ]);\n \n-impl EarlyLintPass for Write {\n-    fn check_item(&mut self, _: &EarlyContext<'_>, item: &Item) {\n-        if let ItemKind::Impl(box Impl {\n-            of_trait: Some(trait_ref),\n-            ..\n-        }) = &item.kind\n-        {\n-            let trait_name = trait_ref\n-                .path\n-                .segments\n-                .iter()\n-                .last()\n-                .expect(\"path has at least one segment\")\n-                .ident\n-                .name;\n-            if trait_name == sym::Debug {\n-                self.in_debug_impl = true;\n-            }\n+impl<'tcx> LateLintPass<'tcx> for Write {\n+    fn check_item(&mut self, cx: &LateContext<'_>, item: &Item<'_>) {\n+        if is_debug_impl(cx, item) {\n+            self.in_debug_impl = true;\n         }\n     }\n \n-    fn check_item_post(&mut self, _: &EarlyContext<'_>, _: &Item) {\n-        self.in_debug_impl = false;\n+    fn check_item_post(&mut self, cx: &LateContext<'_>, item: &Item<'_>) {\n+        if is_debug_impl(cx, item) {\n+            self.in_debug_impl = false;\n+        }\n     }\n \n-    fn check_mac(&mut self, cx: &EarlyContext<'_>, mac: &MacCall) {\n-        fn is_build_script(cx: &EarlyContext<'_>) -> bool {\n-            // Cargo sets the crate name for build scripts to `build_script_build`\n-            cx.sess()\n-                .opts\n-                .crate_name\n-                .as_ref()\n-                .map_or(false, |crate_name| crate_name == \"build_script_build\")\n-        }\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n+        let Some(macro_call) = root_macro_call_first_node(cx, expr) else { return };\n+        let Some(diag_name) = cx.tcx.get_diagnostic_name(macro_call.def_id) else { return };\n+        let Some(name) = diag_name.as_str().strip_suffix(\"_macro\") else { return };\n \n-        if mac.path == sym!(print) {\n-            if !is_build_script(cx) {\n-                span_lint(cx, PRINT_STDOUT, mac.span(), \"use of `print!`\");\n-            }\n-            self.lint_print_with_newline(cx, mac);\n-        } else if mac.path == sym!(println) {\n-            if !is_build_script(cx) {\n-                span_lint(cx, PRINT_STDOUT, mac.span(), \"use of `println!`\");\n-            }\n-            self.lint_println_empty_string(cx, mac);\n-        } else if mac.path == sym!(eprint) {\n-            span_lint(cx, PRINT_STDERR, mac.span(), \"use of `eprint!`\");\n-            self.lint_print_with_newline(cx, mac);\n-        } else if mac.path == sym!(eprintln) {\n-            span_lint(cx, PRINT_STDERR, mac.span(), \"use of `eprintln!`\");\n-            self.lint_println_empty_string(cx, mac);\n-        } else if mac.path == sym!(write) {\n-            if let (Some(fmt_str), dest) = self.check_tts(cx, mac.args.inner_tokens(), true) {\n-                if check_newlines(&fmt_str) {\n-                    let (nl_span, only_nl) = newline_span(&fmt_str);\n-                    let nl_span = match (dest, only_nl) {\n-                        // Special case of `write!(buf, \"\\n\")`: Mark everything from the end of\n-                        // `buf` for removal so no trailing comma [`writeln!(buf, )`] remains.\n-                        (Some(dest_expr), true) => nl_span.with_lo(dest_expr.span.hi()),\n-                        _ => nl_span,\n-                    };\n-                    span_lint_and_then(\n-                        cx,\n-                        WRITE_WITH_NEWLINE,\n-                        mac.span(),\n-                        \"using `write!()` with a format string that ends in a single newline\",\n-                        |err| {\n-                            err.multipart_suggestion(\n-                                \"use `writeln!()` instead\",\n-                                vec![(mac.path.span, String::from(\"writeln\")), (nl_span, String::new())],\n-                                Applicability::MachineApplicable,\n-                            );\n-                        },\n-                    );\n-                }\n-            }\n-        } else if mac.path == sym!(writeln) {\n-            if let (Some(fmt_str), expr) = self.check_tts(cx, mac.args.inner_tokens(), true) {\n-                if fmt_str.symbol == kw::Empty {\n-                    let mut applicability = Applicability::MachineApplicable;\n-                    let suggestion = if let Some(e) = expr {\n-                        snippet_with_applicability(cx, e.span, \"v\", &mut applicability)\n-                    } else {\n-                        applicability = Applicability::HasPlaceholders;\n-                        Cow::Borrowed(\"v\")\n-                    };\n-\n-                    span_lint_and_sugg(\n-                        cx,\n-                        WRITELN_EMPTY_STRING,\n-                        mac.span(),\n-                        format!(\"using `writeln!({}, \\\"\\\")`\", suggestion).as_str(),\n-                        \"replace it with\",\n-                        format!(\"writeln!({})\", suggestion),\n-                        applicability,\n-                    );\n+        let is_build_script = cx\n+            .sess()\n+            .opts\n+            .crate_name\n+            .as_ref()\n+            .map_or(false, |crate_name| crate_name == \"build_script_build\");\n+\n+        match diag_name {\n+            sym::print_macro | sym::println_macro => {\n+                if !is_build_script {\n+                    span_lint(cx, PRINT_STDOUT, macro_call.span, &format!(\"use of `{name}!`\"));\n                 }\n-            }\n+            },\n+            sym::eprint_macro | sym::eprintln_macro => {\n+                span_lint(cx, PRINT_STDERR, macro_call.span, &format!(\"use of `{name}!`\"));\n+            },\n+            sym::write_macro | sym::writeln_macro => {},\n+            _ => return,\n         }\n-    }\n-}\n \n-/// Given a format string that ends in a newline and its span, calculates the span of the\n-/// newline, or the format string itself if the format string consists solely of a newline.\n-/// Return this and a boolean indicating whether it only consisted of a newline.\n-fn newline_span(fmtstr: &StrLit) -> (Span, bool) {\n-    let sp = fmtstr.span;\n-    let contents = fmtstr.symbol.as_str();\n+        let Some(format_args) = FormatArgsExpn::find_nested(cx, expr, macro_call.expn) else { return };\n \n-    if contents == r\"\\n\" {\n-        return (sp, true);\n-    }\n-\n-    let newline_sp_hi = sp.hi()\n-        - match fmtstr.style {\n-            StrStyle::Cooked => BytePos(1),\n-            StrStyle::Raw(hashes) => BytePos((1 + hashes).into()),\n-        };\n+        // ignore `writeln!(w)` and `write!(v, some_macro!())`\n+        if format_args.format_string.span.from_expansion() {\n+            return;\n+        }\n \n-    let newline_sp_len = if contents.ends_with('\\n') {\n-        BytePos(1)\n-    } else if contents.ends_with(r\"\\n\") {\n-        BytePos(2)\n-    } else {\n-        panic!(\"expected format string to contain a newline\");\n-    };\n+        match diag_name {\n+            sym::print_macro | sym::eprint_macro | sym::write_macro => {\n+                check_newline(cx, &format_args, &macro_call, name);\n+            },\n+            sym::println_macro | sym::eprintln_macro | sym::writeln_macro => {\n+                check_empty_string(cx, &format_args, &macro_call, name);\n+            },\n+            _ => {},\n+        }\n \n-    (sp.with_lo(newline_sp_hi - newline_sp_len).with_hi(newline_sp_hi), false)\n-}\n+        check_literal(cx, &format_args, name);\n \n-/// Stores a list of replacement spans for each argument, but only if all the replacements used an\n-/// empty format string.\n-#[derive(Default)]\n-struct SimpleFormatArgs {\n-    unnamed: Vec<Vec<Span>>,\n-    complex_unnamed: Vec<Vec<Span>>,\n-    named: Vec<(Symbol, Vec<Span>)>,\n+        if !self.in_debug_impl {\n+            for arg in &format_args.args {\n+                if arg.format.r#trait == sym::Debug {\n+                    span_lint(cx, USE_DEBUG, arg.span, \"use of `Debug`-based formatting\");\n+                }\n+            }\n+        }\n+    }\n }\n-impl SimpleFormatArgs {\n-    fn get_unnamed(&self) -> impl Iterator<Item = &[Span]> {\n-        self.unnamed.iter().map(|x| match x.as_slice() {\n-            // Ignore the dummy span added from out of order format arguments.\n-            [DUMMY_SP] => &[],\n-            x => x,\n-        })\n+fn is_debug_impl(cx: &LateContext<'_>, item: &Item<'_>) -> bool {\n+    if let ItemKind::Impl(Impl { of_trait: Some(trait_ref), .. }) = &item.kind\n+        && let Some(trait_id) = trait_ref.trait_def_id()\n+    {\n+        cx.tcx.is_diagnostic_item(sym::Debug, trait_id)\n+    } else {\n+        false\n     }\n+}\n \n-    fn get_complex_unnamed(&self) -> impl Iterator<Item = &[Span]> {\n-        self.complex_unnamed.iter().map(Vec::as_slice)\n-    }\n+fn check_newline(cx: &LateContext<'_>, format_args: &FormatArgsExpn<'_>, macro_call: &MacroCall, name: &str) {\n+    let format_string_parts = &format_args.format_string.parts;\n+    let mut format_string_span = format_args.format_string.span;\n \n-    fn get_named(&self, n: &Path) -> &[Span] {\n-        self.named.iter().find(|x| *n == x.0).map_or(&[], |x| x.1.as_slice())\n-    }\n+    let Some(last) = format_string_parts.last() else { return };\n \n-    fn push(&mut self, arg: rustc_parse_format::Argument<'_>, span: Span) {\n-        use rustc_parse_format::{\n-            AlignUnknown, ArgumentImplicitlyIs, ArgumentIs, ArgumentNamed, CountImplied, FormatSpec,\n-        };\n+    let count_vertical_whitespace = || {\n+        format_string_parts\n+            .iter()\n+            .flat_map(|part| part.as_str().chars())\n+            .filter(|ch| matches!(ch, '\\r' | '\\n'))\n+            .count()\n+    };\n \n-        const SIMPLE: FormatSpec<'_> = FormatSpec {\n-            fill: None,\n-            align: AlignUnknown,\n-            flags: 0,\n-            precision: CountImplied,\n-            precision_span: None,\n-            width: CountImplied,\n-            width_span: None,\n-            ty: \"\",\n-            ty_span: None,\n-        };\n+    if last.as_str().ends_with('\\n')\n+        // ignore format strings with other internal vertical whitespace\n+        && count_vertical_whitespace() == 1\n \n-        match arg.position {\n-            ArgumentIs(n) | ArgumentImplicitlyIs(n) => {\n-                if self.unnamed.len() <= n {\n-                    // Use a dummy span to mark all unseen arguments.\n-                    self.unnamed.resize_with(n, || vec![DUMMY_SP]);\n-                    if arg.format == SIMPLE {\n-                        self.unnamed.push(vec![span]);\n-                    } else {\n-                        self.unnamed.push(Vec::new());\n-                    }\n-                } else {\n-                    let args = &mut self.unnamed[n];\n-                    match (args.as_mut_slice(), arg.format == SIMPLE) {\n-                        // A non-empty format string has been seen already.\n-                        ([], _) => (),\n-                        // Replace the dummy span, if it exists.\n-                        ([dummy @ DUMMY_SP], true) => *dummy = span,\n-                        ([_, ..], true) => args.push(span),\n-                        ([_, ..], false) => *args = Vec::new(),\n-                    }\n-                }\n-            },\n-            ArgumentNamed(n) => {\n-                let n = Symbol::intern(n);\n-                if let Some(x) = self.named.iter_mut().find(|x| x.0 == n) {\n-                    match x.1.as_slice() {\n-                        // A non-empty format string has been seen already.\n-                        [] => (),\n-                        [_, ..] if arg.format == SIMPLE => x.1.push(span),\n-                        [_, ..] => x.1 = Vec::new(),\n-                    }\n-                } else if arg.format == SIMPLE {\n-                    self.named.push((n, vec![span]));\n-                } else {\n-                    self.named.push((n, Vec::new()));\n-                }\n-            },\n-        };\n-    }\n+        // ignore trailing arguments: `print!(\"Issue\\n{}\", 1265);`\n+        && format_string_parts.len() > format_args.args.len()\n+    {\n+        let lint = if name == \"write\" {\n+            format_string_span = expand_past_previous_comma(cx, format_string_span);\n \n-    fn push_to_complex(&mut self, span: Span, position: usize) {\n-        if self.complex_unnamed.len() <= position {\n-            self.complex_unnamed.resize_with(position, Vec::new);\n-            self.complex_unnamed.push(vec![span]);\n+            WRITE_WITH_NEWLINE\n         } else {\n-            let args: &mut Vec<Span> = &mut self.complex_unnamed[position];\n-            args.push(span);\n-        }\n-    }\n-\n-    fn push_complex(\n-        &mut self,\n-        cx: &EarlyContext<'_>,\n-        arg: rustc_parse_format::Argument<'_>,\n-        str_lit_span: Span,\n-        fmt_span: Span,\n-    ) {\n-        use rustc_parse_format::{ArgumentImplicitlyIs, ArgumentIs, CountIsParam, CountIsStar};\n-\n-        let snippet = snippet_opt(cx, fmt_span);\n-\n-        let end = snippet\n-            .as_ref()\n-            .and_then(|s| s.find(':'))\n-            .or_else(|| fmt_span.hi().0.checked_sub(fmt_span.lo().0 + 1).map(|u| u as usize));\n-\n-        if let (ArgumentIs(n) | ArgumentImplicitlyIs(n), Some(end)) = (arg.position, end) {\n-            let span = fmt_span.from_inner(InnerSpan::new(1, end));\n-            self.push_to_complex(span, n);\n+            PRINT_WITH_NEWLINE\n         };\n \n-        if let (CountIsParam(n) | CountIsStar(n), Some(span)) = (arg.format.precision, arg.format.precision_span) {\n-            // We need to do this hack as precision spans should be converted from .* to .foo$\n-            let hack = if snippet.as_ref().and_then(|s| s.find('*')).is_some() {\n-                0\n-            } else {\n-                1\n-            };\n+        span_lint_and_then(\n+            cx,\n+            lint,\n+            macro_call.span,\n+            &format!(\"using `{name}!()` with a format string that ends in a single newline\"),\n+            |diag| {\n+                let name_span = cx.sess().source_map().span_until_char(macro_call.span, '!');\n+                let Some(format_snippet) = snippet_opt(cx, format_string_span) else { return };\n+\n+                if format_string_parts.len() == 1 && last.as_str() == \"\\n\" {\n+                    // print!(\"\\n\"), write!(f, \"\\n\")\n+\n+                    diag.multipart_suggestion(\n+                        &format!(\"use `{name}ln!` instead\"),\n+                        vec![(name_span, format!(\"{name}ln\")), (format_string_span, String::new())],\n+                        Applicability::MachineApplicable,\n+                    );\n+                } else if format_snippet.ends_with(\"\\\\n\\\"\") {\n+                    // print!(\"...\\n\"), write!(f, \"...\\n\")\n \n-            let span = str_lit_span.from_inner(InnerSpan {\n-                start: span.start + 1,\n-                end: span.end - hack,\n-            });\n-            self.push_to_complex(span, n);\n-        };\n+                    let hi = format_string_span.hi();\n+                    let newline_span = format_string_span.with_lo(hi - BytePos(3)).with_hi(hi - BytePos(1));\n \n-        if let (CountIsParam(n), Some(span)) = (arg.format.width, arg.format.width_span) {\n-            let span = str_lit_span.from_inner(InnerSpan {\n-                start: span.start,\n-                end: span.end - 1,\n-            });\n-            self.push_to_complex(span, n);\n-        };\n+                    diag.multipart_suggestion(\n+                        &format!(\"use `{name}ln!` instead\"),\n+                        vec![(name_span, format!(\"{name}ln\")), (newline_span, String::new())],\n+                        Applicability::MachineApplicable,\n+                    );\n+                }\n+            },\n+        );\n     }\n }\n \n-impl Write {\n-    /// Parses a format string into a collection of spans for each argument. This only keeps track\n-    /// of empty format arguments. Will also lint usages of debug format strings outside of debug\n-    /// impls.\n-    fn parse_fmt_string(&self, cx: &EarlyContext<'_>, str_lit: &StrLit) -> Option<SimpleFormatArgs> {\n-        use rustc_parse_format::{ParseMode, Parser, Piece};\n-\n-        let str_sym = str_lit.symbol_unescaped.as_str();\n-        let style = match str_lit.style {\n-            StrStyle::Cooked => None,\n-            StrStyle::Raw(n) => Some(n as usize),\n-        };\n-\n-        let mut parser = Parser::new(str_sym, style, snippet_opt(cx, str_lit.span), false, ParseMode::Format);\n-        let mut args = SimpleFormatArgs::default();\n+fn check_empty_string(cx: &LateContext<'_>, format_args: &FormatArgsExpn<'_>, macro_call: &MacroCall, name: &str) {\n+    if let [part] = &format_args.format_string.parts[..]\n+        && let mut span = format_args.format_string.span\n+        && part.as_str() == \"\\n\"\n+    {\n+        let lint = if name == \"writeln\" {\n+            span = expand_past_previous_comma(cx, span);\n \n-        while let Some(arg) = parser.next() {\n-            let arg = match arg {\n-                Piece::String(_) => continue,\n-                Piece::NextArgument(arg) => arg,\n-            };\n-            let span = parser\n-                .arg_places\n-                .last()\n-                .map_or(DUMMY_SP, |&x| str_lit.span.from_inner(InnerSpan::new(x.start, x.end)));\n-\n-            if !self.in_debug_impl && arg.format.ty == \"?\" {\n-                // FIXME: modify rustc's fmt string parser to give us the current span\n-                span_lint(cx, USE_DEBUG, span, \"use of `Debug`-based formatting\");\n-            }\n-            args.push(arg, span);\n-            args.push_complex(cx, arg, str_lit.span, span);\n-        }\n-\n-        parser.errors.is_empty().then_some(args)\n-    }\n-\n-    /// Checks the arguments of `print[ln]!` and `write[ln]!` calls. It will return a tuple of two\n-    /// `Option`s. The first `Option` of the tuple is the macro's format string. It includes\n-    /// the contents of the string, whether it's a raw string, and the span of the literal in the\n-    /// source. The second `Option` in the tuple is, in the `write[ln]!` case, the expression the\n-    /// `format_str` should be written to.\n-    ///\n-    /// Example:\n-    ///\n-    /// Calling this function on\n-    /// ```rust\n-    /// # use std::fmt::Write;\n-    /// # let mut buf = String::new();\n-    /// # let something = \"something\";\n-    /// writeln!(buf, \"string to write: {}\", something);\n-    /// ```\n-    /// will return\n-    /// ```rust,ignore\n-    /// (Some(\"string to write: {}\"), Some(buf))\n-    /// ```\n-    fn check_tts<'a>(&self, cx: &EarlyContext<'a>, tts: TokenStream, is_write: bool) -> (Option<StrLit>, Option<Expr>) {\n-        let mut parser = parser::Parser::new(&cx.sess().parse_sess, tts, false, None);\n-        let expr = if is_write {\n-            match parser\n-                .parse_expr()\n-                .map(rustc_ast::ptr::P::into_inner)\n-                .map_err(DiagnosticBuilder::cancel)\n-            {\n-                // write!(e, ...)\n-                Ok(p) if parser.eat(&token::Comma) => Some(p),\n-                // write!(e) or error\n-                e => return (None, e.ok()),\n-            }\n+            WRITELN_EMPTY_STRING\n         } else {\n-            None\n+            PRINTLN_EMPTY_STRING\n         };\n \n-        let fmtstr = match parser.parse_str_lit() {\n-            Ok(fmtstr) => fmtstr,\n-            Err(_) => return (None, expr),\n-        };\n+        span_lint_and_then(\n+            cx,\n+            lint,\n+            macro_call.span,\n+            &format!(\"empty string literal in `{name}!`\"),\n+            |diag| {\n+                diag.span_suggestion(\n+                    span,\n+                    \"remove the empty string\",\n+                    String::new(),\n+                    Applicability::MachineApplicable,\n+                );\n+            },\n+        );\n+    }\n+}\n \n-        let args = match self.parse_fmt_string(cx, &fmtstr) {\n-            Some(args) => args,\n-            None => return (Some(fmtstr), expr),\n-        };\n+fn check_literal(cx: &LateContext<'_>, format_args: &FormatArgsExpn<'_>, name: &str) {\n+    let mut counts = HirIdMap::<usize>::default();\n+    for param in format_args.params() {\n+        *counts.entry(param.value.hir_id).or_default() += 1;\n+    }\n \n-        let lint = if is_write { WRITE_LITERAL } else { PRINT_LITERAL };\n-        let mut unnamed_args = args.get_unnamed();\n-        let mut complex_unnamed_args = args.get_complex_unnamed();\n-        loop {\n-            if !parser.eat(&token::Comma) {\n-                return (Some(fmtstr), expr);\n-            }\n+    for arg in &format_args.args {\n+        let value = arg.param.value;\n \n-            let comma_span = parser.prev_token.span;\n-            let token_expr = if let Ok(expr) = parser.parse_expr().map_err(DiagnosticBuilder::cancel) {\n-                expr\n-            } else {\n-                return (Some(fmtstr), None);\n-            };\n-            let complex_unnamed_arg = complex_unnamed_args.next();\n-\n-            let (fmt_spans, lit) = match &token_expr.kind {\n-                ExprKind::Lit(lit) => (unnamed_args.next().unwrap_or(&[]), lit),\n-                ExprKind::Assign(lhs, rhs, _) => {\n-                    if let Some(span) = complex_unnamed_arg {\n-                        for x in span {\n-                            Self::report_positional_named_param(cx, *x, lhs, rhs);\n-                        }\n-                    }\n-                    match (&lhs.kind, &rhs.kind) {\n-                        (ExprKind::Path(_, p), ExprKind::Lit(lit)) => (args.get_named(p), lit),\n-                        _ => continue,\n+        if counts[&value.hir_id] == 1\n+            && arg.format.is_default()\n+            && let ExprKind::Lit(lit) = &value.kind\n+            && !value.span.from_expansion()\n+            && let Some(value_string) = snippet_opt(cx, value.span)\n+        {\n+            let (replacement, replace_raw) = match lit.node {\n+                LitKind::Str(..) => extract_str_literal(&value_string),\n+                LitKind::Char(ch) => (\n+                    match ch {\n+                        '\"' => \"\\\\\\\"\",\n+                        '\\'' => \"'\",\n+                        _ => &value_string[1..value_string.len() - 1],\n                     }\n-                },\n-                _ => {\n-                    unnamed_args.next();\n-                    continue;\n-                },\n+                    .to_string(),\n+                    false,\n+                ),\n+                LitKind::Bool(b) => (b.to_string(), false),\n+                _ => continue,\n+            };\n+\n+            let lint = if name.starts_with(\"write\") {\n+                WRITE_LITERAL\n+            } else {\n+                PRINT_LITERAL\n             };\n \n-            let replacement: String = match lit.token_lit.kind {\n-                LitKind::StrRaw(_) | LitKind::ByteStrRaw(_) if matches!(fmtstr.style, StrStyle::Raw(_)) => {\n-                    lit.token_lit.symbol.as_str().replace('{', \"{{\").replace('}', \"}}\")\n+            let format_string_is_raw = format_args.format_string.style.is_some();\n+            let replacement = match (format_string_is_raw, replace_raw) {\n+                (false, false) => Some(replacement),\n+                (false, true) => Some(replacement.replace('\"', \"\\\\\\\"\").replace('\\\\', \"\\\\\\\\\")),\n+                (true, false) => match conservative_unescape(&replacement) {\n+                    Ok(unescaped) => Some(unescaped),\n+                    Err(UnescapeErr::Lint) => None,\n+                    Err(UnescapeErr::Ignore) => continue,\n                 },\n-                LitKind::Str | LitKind::ByteStr if matches!(fmtstr.style, StrStyle::Cooked) => {\n-                    lit.token_lit.symbol.as_str().replace('{', \"{{\").replace('}', \"}}\")\n+                (true, true) => {\n+                    if replacement.contains(['#', '\"']) {\n+                        None\n+                    } else {\n+                        Some(replacement)\n+                    }\n                 },\n-                LitKind::StrRaw(_)\n-                | LitKind::Str\n-                | LitKind::ByteStrRaw(_)\n-                | LitKind::ByteStr\n-                | LitKind::Integer\n-                | LitKind::Float\n-                | LitKind::Err => continue,\n-                LitKind::Byte | LitKind::Char => match lit.token_lit.symbol.as_str() {\n-                    \"\\\"\" if matches!(fmtstr.style, StrStyle::Cooked) => \"\\\\\\\"\",\n-                    \"\\\"\" if matches!(fmtstr.style, StrStyle::Raw(0)) => continue,\n-                    \"\\\\\\\\\" if matches!(fmtstr.style, StrStyle::Raw(_)) => \"\\\\\",\n-                    \"\\\\'\" => \"'\",\n-                    \"{\" => \"{{\",\n-                    \"}\" => \"}}\",\n-                    x if matches!(fmtstr.style, StrStyle::Raw(_)) && x.starts_with('\\\\') => continue,\n-                    x => x,\n-                }\n-                .into(),\n-                LitKind::Bool => lit.token_lit.symbol.as_str().deref().into(),\n             };\n \n-            if !fmt_spans.is_empty() {\n-                span_lint_and_then(\n-                    cx,\n-                    lint,\n-                    token_expr.span,\n-                    \"literal with an empty format string\",\n-                    |diag| {\n+            span_lint_and_then(\n+                cx,\n+                lint,\n+                value.span,\n+                \"literal with an empty format string\",\n+                |diag| {\n+                    if let Some(replacement) = replacement {\n+                        // `format!(\"{}\", \"a\")`, `format!(\"{named}\", named = \"b\")\n+                        //              ~~~~~                      ~~~~~~~~~~~~~\n+                        let value_span = expand_past_previous_comma(cx, value.span);\n+\n+                        let replacement = replacement.replace('{', \"{{\").replace('}', \"}}\");\n                         diag.multipart_suggestion(\n                             \"try this\",\n-                            iter::once((comma_span.to(token_expr.span), String::new()))\n-                                .chain(fmt_spans.iter().copied().zip(iter::repeat(replacement)))\n-                                .collect(),\n+                            vec![(arg.span, replacement), (value_span, String::new())],\n                             Applicability::MachineApplicable,\n                         );\n-                    },\n-                );\n-            }\n-        }\n-    }\n-\n-    fn report_positional_named_param(cx: &EarlyContext<'_>, span: Span, lhs: &P<Expr>, _rhs: &P<Expr>) {\n-        if let ExprKind::Path(_, _p) = &lhs.kind {\n-            let mut applicability = Applicability::MachineApplicable;\n-            let name = snippet_with_applicability(cx, lhs.span, \"name\", &mut applicability);\n-            // We need to do this hack as precision spans should be converted from .* to .foo$\n-            let hack = snippet(cx, span, \"\").contains('*');\n-\n-            span_lint_and_sugg(\n-                cx,\n-                POSITIONAL_NAMED_FORMAT_PARAMETERS,\n-                span,\n-                &format!(\"named parameter {} is used as a positional parameter\", name),\n-                \"replace it with\",\n-                if hack {\n-                    format!(\"{}$\", name)\n-                } else {\n-                    format!(\"{}\", name)\n+                    }\n                 },\n-                applicability,\n             );\n-        };\n-    }\n-\n-    fn lint_println_empty_string(&self, cx: &EarlyContext<'_>, mac: &MacCall) {\n-        if let (Some(fmt_str), _) = self.check_tts(cx, mac.args.inner_tokens(), false) {\n-            if fmt_str.symbol == kw::Empty {\n-                let name = mac.path.segments[0].ident.name;\n-                span_lint_and_sugg(\n-                    cx,\n-                    PRINTLN_EMPTY_STRING,\n-                    mac.span(),\n-                    &format!(\"using `{}!(\\\"\\\")`\", name),\n-                    \"replace it with\",\n-                    format!(\"{}!()\", name),\n-                    Applicability::MachineApplicable,\n-                );\n-            }\n-        }\n-    }\n-\n-    fn lint_print_with_newline(&self, cx: &EarlyContext<'_>, mac: &MacCall) {\n-        if let (Some(fmt_str), _) = self.check_tts(cx, mac.args.inner_tokens(), false) {\n-            if check_newlines(&fmt_str) {\n-                let name = mac.path.segments[0].ident.name;\n-                let suggested = format!(\"{}ln\", name);\n-                span_lint_and_then(\n-                    cx,\n-                    PRINT_WITH_NEWLINE,\n-                    mac.span(),\n-                    &format!(\"using `{}!()` with a format string that ends in a single newline\", name),\n-                    |err| {\n-                        err.multipart_suggestion(\n-                            &format!(\"use `{}!` instead\", suggested),\n-                            vec![(mac.path.span, suggested), (newline_span(&fmt_str).0, String::new())],\n-                            Applicability::MachineApplicable,\n-                        );\n-                    },\n-                );\n-            }\n         }\n     }\n }\n \n-/// Checks if the format string contains a single newline that terminates it.\n+/// Removes the raw marker, `#`s and quotes from a str, and returns if the literal is raw\n ///\n-/// Literal and escaped newlines are both checked (only literal for raw strings).\n-fn check_newlines(fmtstr: &StrLit) -> bool {\n-    let mut has_internal_newline = false;\n-    let mut last_was_cr = false;\n-    let mut should_lint = false;\n-\n-    let contents = fmtstr.symbol.as_str();\n-\n-    let mut cb = |r: Range<usize>, c: Result<char, EscapeError>| {\n-        let c = match c {\n-            Ok(c) => c,\n-            Err(e) if !e.is_fatal() => return,\n-            Err(e) => panic!(\"{:?}\", e),\n-        };\n-\n-        if r.end == contents.len() && c == '\\n' && !last_was_cr && !has_internal_newline {\n-            should_lint = true;\n-        } else {\n-            last_was_cr = c == '\\r';\n-            if c == '\\n' {\n-                has_internal_newline = true;\n-            }\n-        }\n+/// `r#\"a\"#` -> (`a`, true)\n+///\n+/// `\"b\"` -> (`b`, false)\n+fn extract_str_literal(literal: &str) -> (String, bool) {\n+    let (literal, raw) = match literal.strip_prefix('r') {\n+        Some(stripped) => (stripped.trim_matches('#'), true),\n+        None => (literal, false),\n     };\n \n-    match fmtstr.style {\n-        StrStyle::Cooked => unescape::unescape_literal(contents, unescape::Mode::Str, &mut cb),\n-        StrStyle::Raw(_) => unescape::unescape_literal(contents, unescape::Mode::RawStr, &mut cb),\n+    (literal[1..literal.len() - 1].to_string(), raw)\n+}\n+\n+enum UnescapeErr {\n+    /// Should still be linted, can be manually resolved by author, e.g.\n+    ///\n+    /// ```ignore\n+    /// print!(r\"{}\", '\"');\n+    /// ```\n+    Lint,\n+    /// Should not be linted, e.g.\n+    ///\n+    /// ```ignore\n+    /// print!(r\"{}\", '\\r');\n+    /// ```\n+    Ignore,\n+}\n+\n+/// Unescape a normal string into a raw string\n+fn conservative_unescape(literal: &str) -> Result<String, UnescapeErr> {\n+    let mut unescaped = String::with_capacity(literal.len());\n+    let mut chars = literal.chars();\n+    let mut err = false;\n+\n+    while let Some(ch) = chars.next() {\n+        match ch {\n+            '#' => err = true,\n+            '\\\\' => match chars.next() {\n+                Some('\\\\') => unescaped.push('\\\\'),\n+                Some('\"') => err = true,\n+                _ => return Err(UnescapeErr::Ignore),\n+            },\n+            _ => unescaped.push(ch),\n+        }\n     }\n \n-    should_lint\n+    if err { Err(UnescapeErr::Lint) } else { Ok(unescaped) }\n+}\n+\n+// Expand from `writeln!(o, \"\")` to `writeln!(o, \"\")`\n+//                          ^^                 ^^^^\n+fn expand_past_previous_comma(cx: &LateContext<'_>, span: Span) -> Span {\n+    let extended = cx.sess().source_map().span_extend_to_prev_char(span, ',', true);\n+    extended.with_lo(extended.lo() - BytePos(1))\n }"}, {"sha": "1b8a9c05559a940642af8c8a39690122c331faea", "filename": "src/tools/clippy/clippy_utils/src/consts.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fconsts.rs?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -501,8 +501,8 @@ impl<'a, 'tcx> ConstEvalLateContext<'a, 'tcx> {\n                         BinOpKind::Mul => l.checked_mul(r).map(zext),\n                         BinOpKind::Div if r != 0 => l.checked_div(r).map(zext),\n                         BinOpKind::Rem if r != 0 => l.checked_rem(r).map(zext),\n-                        BinOpKind::Shr => l.checked_shr(r.try_into().expect(\"invalid shift\")).map(zext),\n-                        BinOpKind::Shl => l.checked_shl(r.try_into().expect(\"invalid shift\")).map(zext),\n+                        BinOpKind::Shr => l.checked_shr(r.try_into().ok()?).map(zext),\n+                        BinOpKind::Shl => l.checked_shl(r.try_into().ok()?).map(zext),\n                         BinOpKind::BitXor => Some(zext(l ^ r)),\n                         BinOpKind::BitOr => Some(zext(l | r)),\n                         BinOpKind::BitAnd => Some(zext(l & r)),\n@@ -521,8 +521,8 @@ impl<'a, 'tcx> ConstEvalLateContext<'a, 'tcx> {\n                     BinOpKind::Mul => l.checked_mul(r).map(Constant::Int),\n                     BinOpKind::Div => l.checked_div(r).map(Constant::Int),\n                     BinOpKind::Rem => l.checked_rem(r).map(Constant::Int),\n-                    BinOpKind::Shr => l.checked_shr(r.try_into().expect(\"shift too large\")).map(Constant::Int),\n-                    BinOpKind::Shl => l.checked_shl(r.try_into().expect(\"shift too large\")).map(Constant::Int),\n+                    BinOpKind::Shr => l.checked_shr(r.try_into().ok()?).map(Constant::Int),\n+                    BinOpKind::Shl => l.checked_shl(r.try_into().ok()?).map(Constant::Int),\n                     BinOpKind::BitXor => Some(Constant::Int(l ^ r)),\n                     BinOpKind::BitOr => Some(Constant::Int(l | r)),\n                     BinOpKind::BitAnd => Some(Constant::Int(l & r)),"}, {"sha": "a1808c0972009bbe2a147695882e60ded4cdf69b", "filename": "src/tools/clippy/clippy_utils/src/macros.rs", "status": "modified", "additions": 45, "deletions": 55, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fmacros.rs?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -7,8 +7,8 @@ use crate::visitors::expr_visitor_no_bodies;\n use arrayvec::ArrayVec;\n use itertools::{izip, Either, Itertools};\n use rustc_ast::ast::LitKind;\n-use rustc_hir::intravisit::Visitor;\n-use rustc_hir::{self as hir, Expr, ExprKind, HirId, Node, QPath};\n+use rustc_hir::intravisit::{walk_expr, Visitor};\n+use rustc_hir::{self as hir, Expr, ExprField, ExprKind, HirId, Node, QPath};\n use rustc_lexer::unescape::unescape_literal;\n use rustc_lexer::{tokenize, unescape, LiteralKind, TokenKind};\n use rustc_lint::LateContext;\n@@ -485,64 +485,49 @@ struct ParamPosition {\n     precision: Option<usize>,\n }\n \n-/// Parses the `fmt` arg of `Arguments::new_v1_formatted(pieces, args, fmt, _)`\n-fn parse_rt_fmt<'tcx>(fmt_arg: &'tcx Expr<'tcx>) -> Option<impl Iterator<Item = ParamPosition> + 'tcx> {\n-    fn parse_count(expr: &Expr<'_>) -> Option<usize> {\n-        // ::core::fmt::rt::v1::Count::Param(1usize),\n-        if let ExprKind::Call(ctor, [val]) = expr.kind\n-            && let ExprKind::Path(QPath::Resolved(_, path)) = ctor.kind\n-            && path.segments.last()?.ident.name == sym::Param\n-            && let ExprKind::Lit(lit) = &val.kind\n-            && let LitKind::Int(pos, _) = lit.node\n-        {\n-            Some(pos as usize)\n-        } else {\n-            None\n+impl<'tcx> Visitor<'tcx> for ParamPosition {\n+    fn visit_expr_field(&mut self, field: &'tcx ExprField<'tcx>) {\n+        fn parse_count(expr: &Expr<'_>) -> Option<usize> {\n+            // ::core::fmt::rt::v1::Count::Param(1usize),\n+            if let ExprKind::Call(ctor, [val]) = expr.kind\n+                && let ExprKind::Path(QPath::Resolved(_, path)) = ctor.kind\n+                && path.segments.last()?.ident.name == sym::Param\n+                && let ExprKind::Lit(lit) = &val.kind\n+                && let LitKind::Int(pos, _) = lit.node\n+            {\n+                Some(pos as usize)\n+            } else {\n+                None\n+            }\n+        }\n+\n+        match field.ident.name {\n+            sym::position => {\n+                if let ExprKind::Lit(lit) = &field.expr.kind\n+                    && let LitKind::Int(pos, _) = lit.node\n+                {\n+                    self.value = pos as usize;\n+                }\n+            },\n+            sym::precision => {\n+                self.precision = parse_count(field.expr);\n+            },\n+            sym::width => {\n+                self.width = parse_count(field.expr);\n+            },\n+            _ => walk_expr(self, field.expr),\n         }\n     }\n+}\n \n+/// Parses the `fmt` arg of `Arguments::new_v1_formatted(pieces, args, fmt, _)`\n+fn parse_rt_fmt<'tcx>(fmt_arg: &'tcx Expr<'tcx>) -> Option<impl Iterator<Item = ParamPosition> + 'tcx> {\n     if let ExprKind::AddrOf(.., array) = fmt_arg.kind\n         && let ExprKind::Array(specs) = array.kind\n     {\n         Some(specs.iter().map(|spec| {\n             let mut position = ParamPosition::default();\n-\n-            // ::core::fmt::rt::v1::Argument {\n-            //     position: 0usize,\n-            //     format: ::core::fmt::rt::v1::FormatSpec {\n-            //         ..\n-            //         precision: ::core::fmt::rt::v1::Count::Implied,\n-            //         width: ::core::fmt::rt::v1::Count::Implied,\n-            //     },\n-            // }\n-\n-            // TODO: this can be made much nicer next sync with `Visitor::visit_expr_field`\n-            if let ExprKind::Struct(_, fields, _) = spec.kind {\n-                for field in fields {\n-                    match (field.ident.name, &field.expr.kind) {\n-                        (sym::position, ExprKind::Lit(lit)) => {\n-                            if let LitKind::Int(pos, _) = lit.node {\n-                                position.value = pos as usize;\n-                            }\n-                        },\n-                        (sym::format, &ExprKind::Struct(_, spec_fields, _)) => {\n-                            for spec_field in spec_fields {\n-                                match spec_field.ident.name {\n-                                    sym::precision => {\n-                                        position.precision = parse_count(spec_field.expr);\n-                                    },\n-                                    sym::width => {\n-                                        position.width = parse_count(spec_field.expr);\n-                                    },\n-                                    _ => {},\n-                                }\n-                            }\n-                        },\n-                        _ => {},\n-                    }\n-                }\n-            }\n-\n+            position.visit_expr(spec);\n             position\n         }))\n     } else {\n@@ -711,9 +696,14 @@ impl<'tcx> FormatSpec<'tcx> {\n         })\n     }\n \n-    /// Returns true if this format spec would change the contents of a string when formatted\n-    pub fn has_string_formatting(&self) -> bool {\n-        self.r#trait != sym::Display || !self.width.is_implied() || !self.precision.is_implied()\n+    /// Returns true if this format spec is unchanged from the default. e.g. returns true for `{}`,\n+    /// `{foo}` and `{2}`, but false for `{:?}`, `{foo:5}` and `{3:.5}`\n+    pub fn is_default(&self) -> bool {\n+        self.r#trait == sym::Display\n+            && self.width.is_implied()\n+            && self.precision.is_implied()\n+            && self.align == Alignment::AlignUnknown\n+            && self.flags == 0\n     }\n }\n "}, {"sha": "f08275a4ac76bb8631ac096363faac8c466b20cc", "filename": "src/tools/clippy/clippy_utils/src/sugg.rs", "status": "modified", "additions": 26, "deletions": 22, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fsugg.rs?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -22,7 +22,7 @@ use std::fmt::{Display, Write as _};\n use std::ops::{Add, Neg, Not, Sub};\n \n /// A helper type to build suggestion correctly handling parentheses.\n-#[derive(Clone, PartialEq)]\n+#[derive(Clone, Debug, PartialEq)]\n pub enum Sugg<'a> {\n     /// An expression that never needs parentheses such as `1337` or `[0; 42]`.\n     NonParen(Cow<'a, str>),\n@@ -155,8 +155,8 @@ impl<'a> Sugg<'a> {\n             | hir::ExprKind::Ret(..)\n             | hir::ExprKind::Struct(..)\n             | hir::ExprKind::Tup(..)\n-            | hir::ExprKind::DropTemps(_)\n             | hir::ExprKind::Err => Sugg::NonParen(get_snippet(expr.span)),\n+            hir::ExprKind::DropTemps(inner) => Self::hir_from_snippet(inner, get_snippet),\n             hir::ExprKind::Assign(lhs, rhs, _) => {\n                 Sugg::BinOp(AssocOp::Assign, get_snippet(lhs.span), get_snippet(rhs.span))\n             },\n@@ -177,11 +177,11 @@ impl<'a> Sugg<'a> {\n     pub fn ast(cx: &EarlyContext<'_>, expr: &ast::Expr, default: &'a str) -> Self {\n         use rustc_ast::ast::RangeLimits;\n \n-        let get_whole_snippet = || {\n-            if expr.span.from_expansion() {\n-                snippet_with_macro_callsite(cx, expr.span, default)\n+        let snippet_without_expansion = |cx, span: Span, default| {\n+            if span.from_expansion() {\n+                snippet_with_macro_callsite(cx, span, default)\n             } else {\n-                snippet(cx, expr.span, default)\n+                snippet(cx, span, default)\n             }\n         };\n \n@@ -192,7 +192,7 @@ impl<'a> Sugg<'a> {\n             | ast::ExprKind::If(..)\n             | ast::ExprKind::Let(..)\n             | ast::ExprKind::Unary(..)\n-            | ast::ExprKind::Match(..) => Sugg::MaybeParen(get_whole_snippet()),\n+            | ast::ExprKind::Match(..) => Sugg::MaybeParen(snippet_without_expansion(cx, expr.span, default)),\n             ast::ExprKind::Async(..)\n             | ast::ExprKind::Block(..)\n             | ast::ExprKind::Break(..)\n@@ -221,41 +221,45 @@ impl<'a> Sugg<'a> {\n             | ast::ExprKind::Array(..)\n             | ast::ExprKind::While(..)\n             | ast::ExprKind::Await(..)\n-            | ast::ExprKind::Err => Sugg::NonParen(get_whole_snippet()),\n+            | ast::ExprKind::Err => Sugg::NonParen(snippet_without_expansion(cx, expr.span, default)),\n             ast::ExprKind::Range(ref lhs, ref rhs, RangeLimits::HalfOpen) => Sugg::BinOp(\n                 AssocOp::DotDot,\n-                lhs.as_ref().map_or(\"\".into(), |lhs| snippet(cx, lhs.span, default)),\n-                rhs.as_ref().map_or(\"\".into(), |rhs| snippet(cx, rhs.span, default)),\n+                lhs.as_ref()\n+                    .map_or(\"\".into(), |lhs| snippet_without_expansion(cx, lhs.span, default)),\n+                rhs.as_ref()\n+                    .map_or(\"\".into(), |rhs| snippet_without_expansion(cx, rhs.span, default)),\n             ),\n             ast::ExprKind::Range(ref lhs, ref rhs, RangeLimits::Closed) => Sugg::BinOp(\n                 AssocOp::DotDotEq,\n-                lhs.as_ref().map_or(\"\".into(), |lhs| snippet(cx, lhs.span, default)),\n-                rhs.as_ref().map_or(\"\".into(), |rhs| snippet(cx, rhs.span, default)),\n+                lhs.as_ref()\n+                    .map_or(\"\".into(), |lhs| snippet_without_expansion(cx, lhs.span, default)),\n+                rhs.as_ref()\n+                    .map_or(\"\".into(), |rhs| snippet_without_expansion(cx, rhs.span, default)),\n             ),\n             ast::ExprKind::Assign(ref lhs, ref rhs, _) => Sugg::BinOp(\n                 AssocOp::Assign,\n-                snippet(cx, lhs.span, default),\n-                snippet(cx, rhs.span, default),\n+                snippet_without_expansion(cx, lhs.span, default),\n+                snippet_without_expansion(cx, rhs.span, default),\n             ),\n             ast::ExprKind::AssignOp(op, ref lhs, ref rhs) => Sugg::BinOp(\n                 astbinop2assignop(op),\n-                snippet(cx, lhs.span, default),\n-                snippet(cx, rhs.span, default),\n+                snippet_without_expansion(cx, lhs.span, default),\n+                snippet_without_expansion(cx, rhs.span, default),\n             ),\n             ast::ExprKind::Binary(op, ref lhs, ref rhs) => Sugg::BinOp(\n                 AssocOp::from_ast_binop(op.node),\n-                snippet(cx, lhs.span, default),\n-                snippet(cx, rhs.span, default),\n+                snippet_without_expansion(cx, lhs.span, default),\n+                snippet_without_expansion(cx, rhs.span, default),\n             ),\n             ast::ExprKind::Cast(ref lhs, ref ty) => Sugg::BinOp(\n                 AssocOp::As,\n-                snippet(cx, lhs.span, default),\n-                snippet(cx, ty.span, default),\n+                snippet_without_expansion(cx, lhs.span, default),\n+                snippet_without_expansion(cx, ty.span, default),\n             ),\n             ast::ExprKind::Type(ref lhs, ref ty) => Sugg::BinOp(\n                 AssocOp::Colon,\n-                snippet(cx, lhs.span, default),\n-                snippet(cx, ty.span, default),\n+                snippet_without_expansion(cx, lhs.span, default),\n+                snippet_without_expansion(cx, ty.span, default),\n             ),\n         }\n     }"}, {"sha": "56343880320db987130415b432ec9481086822ca", "filename": "src/tools/clippy/clippy_utils/src/ty.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -31,6 +31,13 @@ pub fn is_copy<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n     ty.is_copy_modulo_regions(cx.tcx.at(DUMMY_SP), cx.param_env)\n }\n \n+/// This checks whether a given type is known to implement Debug.\n+pub fn has_debug_impl<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n+    cx.tcx\n+        .get_diagnostic_item(sym::Debug)\n+        .map_or(false, |debug| implements_trait(cx, ty, debug, &[]))\n+}\n+\n /// Checks whether a type can be partially moved.\n pub fn can_partially_move_ty<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n     if has_drop(cx, ty) || is_copy(cx, ty) {"}, {"sha": "6c89b4dde372dd04a360d4be038ffafa50de6357", "filename": "src/tools/clippy/src/docs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Fsrc%2Fdocs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Fsrc%2Fdocs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fsrc%2Fdocs.rs?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -221,6 +221,7 @@ docs! {\n     \"items_after_statements\",\n     \"iter_cloned_collect\",\n     \"iter_count\",\n+    \"iter_kv_map\",\n     \"iter_next_loop\",\n     \"iter_next_slice\",\n     \"iter_not_returning_iterator\",\n@@ -391,7 +392,6 @@ docs! {\n     \"partialeq_to_none\",\n     \"path_buf_push_overwrite\",\n     \"pattern_type_mismatch\",\n-    \"positional_named_format_parameters\",\n     \"possible_missing_comma\",\n     \"precedence\",\n     \"print_in_format_impl\","}, {"sha": "a063c8195ef57f1d893d3662ab0bd90f2005ef4e", "filename": "src/tools/clippy/src/docs/iter_kv_map.txt", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Fsrc%2Fdocs%2Fiter_kv_map.txt", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Fsrc%2Fdocs%2Fiter_kv_map.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fsrc%2Fdocs%2Fiter_kv_map.txt?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -0,0 +1,22 @@\n+### What it does\n+\n+Checks for iterating a map (`HashMap` or `BTreeMap`) and\n+ignoring either the keys or values.\n+\n+### Why is this bad?\n+\n+Readability. There are `keys` and `values` methods that\n+can be used to express that we only need the keys or the values.\n+\n+### Example\n+\n+```\n+let map: HashMap<u32, u32> = HashMap::new();\n+let values = map.iter().map(|(_, value)| value).collect::<Vec<_>>();\n+```\n+\n+Use instead:\n+```\n+let map: HashMap<u32, u32> = HashMap::new();\n+let values = map.values().collect::<Vec<_>>();\n+```\n\\ No newline at end of file"}, {"sha": "e391d2406677d5bd66cd6fec02ae92ed85a634e3", "filename": "src/tools/clippy/src/docs/positional_named_format_parameters.txt", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9062b780b32d2eab060b4432863e085d9504ca5c/src%2Ftools%2Fclippy%2Fsrc%2Fdocs%2Fpositional_named_format_parameters.txt", "raw_url": "https://github.com/rust-lang/rust/raw/9062b780b32d2eab060b4432863e085d9504ca5c/src%2Ftools%2Fclippy%2Fsrc%2Fdocs%2Fpositional_named_format_parameters.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fsrc%2Fdocs%2Fpositional_named_format_parameters.txt?ref=9062b780b32d2eab060b4432863e085d9504ca5c", "patch": "@@ -1,15 +0,0 @@\n-### What it does\n-This lint warns when a named parameter in a format string is used as a positional one.\n-\n-### Why is this bad?\n-It may be confused for an assignment and obfuscates which parameter is being used.\n-\n-### Example\n-```\n-println!(\"{}\", x = 10);\n-```\n-\n-Use instead:\n-```\n-println!(\"{x}\", x = 10);\n-```\n\\ No newline at end of file"}, {"sha": "a6252a68780bb3ad37bab5db83808912e84eeb0e", "filename": "src/tools/clippy/src/docs/print_literal.txt", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Fsrc%2Fdocs%2Fprint_literal.txt", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Fsrc%2Fdocs%2Fprint_literal.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fsrc%2Fdocs%2Fprint_literal.txt?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -6,10 +6,6 @@ Using literals as `println!` args is inefficient\n (c.f., https://github.com/matthiaskrgr/rust-str-bench) and unnecessary\n (i.e., just put the literal in the format string)\n \n-### Known problems\n-Will also warn with macro calls as arguments that expand to literals\n--- e.g., `println!(\"{}\", env!(\"FOO\"))`.\n-\n ### Example\n ```\n println!(\"{}\", \"foo\");"}, {"sha": "9c6edeeef125df630b79474b4ac115f5b980c705", "filename": "src/tools/clippy/src/docs/print_stderr.txt", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Fsrc%2Fdocs%2Fprint_stderr.txt", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Fsrc%2Fdocs%2Fprint_stderr.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fsrc%2Fdocs%2Fprint_stderr.txt?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -7,13 +7,7 @@ People often print on *stderr* while debugging an\n application and might forget to remove those prints afterward.\n \n ### Known problems\n-* Only catches `eprint!` and `eprintln!` calls.\n-* The lint level is unaffected by crate attributes. The level can still\n-  be set for functions, modules and other items. To change the level for\n-  the entire crate, please use command line flags. More information and a\n-  configuration example can be found in [clippy#6610].\n-\n-[clippy#6610]: https://github.com/rust-lang/rust-clippy/issues/6610#issuecomment-977120558\n+Only catches `eprint!` and `eprintln!` calls.\n \n ### Example\n ```"}, {"sha": "d2cbd811d1b2a507db8b68c469fc6635f380ddeb", "filename": "src/tools/clippy/src/docs/print_stdout.txt", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Fsrc%2Fdocs%2Fprint_stdout.txt", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Fsrc%2Fdocs%2Fprint_stdout.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fsrc%2Fdocs%2Fprint_stdout.txt?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -7,13 +7,7 @@ People often print on *stdout* while debugging an\n application and might forget to remove those prints afterward.\n \n ### Known problems\n-* Only catches `print!` and `println!` calls.\n-* The lint level is unaffected by crate attributes. The level can still\n-  be set for functions, modules and other items. To change the level for\n-  the entire crate, please use command line flags. More information and a\n-  configuration example can be found in [clippy#6610].\n-\n-[clippy#6610]: https://github.com/rust-lang/rust-clippy/issues/6610#issuecomment-977120558\n+Only catches `print!` and `println!` calls.\n \n ### Example\n ```"}, {"sha": "a7a884d08711508864bd0c769f9a1275e904ea3c", "filename": "src/tools/clippy/src/docs/write_literal.txt", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Fsrc%2Fdocs%2Fwrite_literal.txt", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Fsrc%2Fdocs%2Fwrite_literal.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fsrc%2Fdocs%2Fwrite_literal.txt?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -6,10 +6,6 @@ Using literals as `writeln!` args is inefficient\n (c.f., https://github.com/matthiaskrgr/rust-str-bench) and unnecessary\n (i.e., just put the literal in the format string)\n \n-### Known problems\n-Will also warn with macro calls as arguments that expand to literals\n--- e.g., `writeln!(buf, \"{}\", env!(\"FOO\"))`.\n-\n ### Example\n ```\n writeln!(buf, \"{}\", \"foo\");"}, {"sha": "a822fad388f56fa635624219490149a1bf00c363", "filename": "src/tools/clippy/tests/ui-cargo/module_style/fail_mod_remap/Cargo.toml", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fmodule_style%2Ffail_mod_remap%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fmodule_style%2Ffail_mod_remap%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fmodule_style%2Ffail_mod_remap%2FCargo.toml?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -0,0 +1,9 @@\n+[package]\n+name = \"fail-mod-remap\"\n+version = \"0.1.0\"\n+edition = \"2018\"\n+publish = false\n+\n+# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\n+\n+[dependencies]"}, {"sha": "509aad18622b5d990ce0a49780696d6e7147c15b", "filename": "src/tools/clippy/tests/ui-cargo/module_style/fail_mod_remap/src/bad.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fmodule_style%2Ffail_mod_remap%2Fsrc%2Fbad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fmodule_style%2Ffail_mod_remap%2Fsrc%2Fbad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fmodule_style%2Ffail_mod_remap%2Fsrc%2Fbad.rs?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -0,0 +1 @@\n+pub mod inner;"}, {"sha": "8b137891791fe96927ad78e64b0aad7bded08bdc", "filename": "src/tools/clippy/tests/ui-cargo/module_style/fail_mod_remap/src/bad/inner.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fmodule_style%2Ffail_mod_remap%2Fsrc%2Fbad%2Finner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fmodule_style%2Ffail_mod_remap%2Fsrc%2Fbad%2Finner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fmodule_style%2Ffail_mod_remap%2Fsrc%2Fbad%2Finner.rs?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -0,0 +1 @@\n+"}, {"sha": "ba4c8c873dd55e5d90a246690e98c1696ef8d6a8", "filename": "src/tools/clippy/tests/ui-cargo/module_style/fail_mod_remap/src/main.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fmodule_style%2Ffail_mod_remap%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fmodule_style%2Ffail_mod_remap%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fmodule_style%2Ffail_mod_remap%2Fsrc%2Fmain.rs?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -0,0 +1,7 @@\n+// compile-flags: --remap-path-prefix {{src-base}}=/remapped\n+\n+#![warn(clippy::self_named_module_files)]\n+\n+mod bad;\n+\n+fn main() {}"}, {"sha": "46991ff662e530780f9c7b4c8530aa11ab4669b1", "filename": "src/tools/clippy/tests/ui-cargo/module_style/fail_mod_remap/src/main.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fmodule_style%2Ffail_mod_remap%2Fsrc%2Fmain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fmodule_style%2Ffail_mod_remap%2Fsrc%2Fmain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fmodule_style%2Ffail_mod_remap%2Fsrc%2Fmain.stderr?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -0,0 +1,11 @@\n+error: `mod.rs` files are required, found `bad.rs`\n+  --> /remapped/module_style/fail_mod_remap/src/bad.rs:1:1\n+   |\n+LL | pub mod inner;\n+   | ^\n+   |\n+   = note: `-D clippy::self-named-module-files` implied by `-D warnings`\n+   = help: move `bad.rs` to `bad/mod.rs`\n+\n+error: aborting due to previous error\n+"}, {"sha": "ed8161acc0efb3010d535434ef9fd32a74b7d33d", "filename": "src/tools/clippy/tests/ui-toml/nonstandard_macro_braces/conf_nonstandard_macro_braces.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Fnonstandard_macro_braces%2Fconf_nonstandard_macro_braces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Fnonstandard_macro_braces%2Fconf_nonstandard_macro_braces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Fnonstandard_macro_braces%2Fconf_nonstandard_macro_braces.rs?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -42,6 +42,7 @@ macro_rules! printlnfoo {\n fn main() {\n     let _ = vec! {1, 2, 3};\n     let _ = format![\"ugh {} stop being such a good compiler\", \"hello\"];\n+    let _ = matches!{{}, ()};\n     let _ = quote!(let x = 1;);\n     let _ = quote::quote!(match match match);\n     let _ = test!(); // trigger when macro def is inside our own crate"}, {"sha": "d80ad49f3086d56d26abe5f5aecbad8450fa13d5", "filename": "src/tools/clippy/tests/ui-toml/nonstandard_macro_braces/conf_nonstandard_macro_braces.stderr", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Fnonstandard_macro_braces%2Fconf_nonstandard_macro_braces.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Fnonstandard_macro_braces%2Fconf_nonstandard_macro_braces.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Fnonstandard_macro_braces%2Fconf_nonstandard_macro_braces.stderr?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -23,26 +23,38 @@ help: consider writing `format!(\"ugh () stop being such a good compiler\", \"hello\n LL |     let _ = format![\"ugh {} stop being such a good compiler\", \"hello\"];\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: use of irregular braces for `quote!` macro\n+error: use of irregular braces for `matches!` macro\n+  --> $DIR/conf_nonstandard_macro_braces.rs:45:13\n+   |\n+LL |     let _ = matches!{{}, ()};\n+   |             ^^^^^^^^^^^^^^^^\n+   |\n+help: consider writing `matches!((), ())`\n   --> $DIR/conf_nonstandard_macro_braces.rs:45:13\n    |\n+LL |     let _ = matches!{{}, ()};\n+   |             ^^^^^^^^^^^^^^^^\n+\n+error: use of irregular braces for `quote!` macro\n+  --> $DIR/conf_nonstandard_macro_braces.rs:46:13\n+   |\n LL |     let _ = quote!(let x = 1;);\n    |             ^^^^^^^^^^^^^^^^^^\n    |\n help: consider writing `quote! {let x = 1;}`\n-  --> $DIR/conf_nonstandard_macro_braces.rs:45:13\n+  --> $DIR/conf_nonstandard_macro_braces.rs:46:13\n    |\n LL |     let _ = quote!(let x = 1;);\n    |             ^^^^^^^^^^^^^^^^^^\n \n error: use of irregular braces for `quote::quote!` macro\n-  --> $DIR/conf_nonstandard_macro_braces.rs:46:13\n+  --> $DIR/conf_nonstandard_macro_braces.rs:47:13\n    |\n LL |     let _ = quote::quote!(match match match);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n help: consider writing `quote::quote! {match match match}`\n-  --> $DIR/conf_nonstandard_macro_braces.rs:46:13\n+  --> $DIR/conf_nonstandard_macro_braces.rs:47:13\n    |\n LL |     let _ = quote::quote!(match match match);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -67,28 +79,28 @@ LL |     let _ = test!(); // trigger when macro def is inside our own crate\n    = note: this error originates in the macro `test` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: use of irregular braces for `type_pos!` macro\n-  --> $DIR/conf_nonstandard_macro_braces.rs:55:12\n+  --> $DIR/conf_nonstandard_macro_braces.rs:56:12\n    |\n LL |     let _: type_pos!(usize) = vec![];\n    |            ^^^^^^^^^^^^^^^^\n    |\n help: consider writing `type_pos![usize]`\n-  --> $DIR/conf_nonstandard_macro_braces.rs:55:12\n+  --> $DIR/conf_nonstandard_macro_braces.rs:56:12\n    |\n LL |     let _: type_pos!(usize) = vec![];\n    |            ^^^^^^^^^^^^^^^^\n \n error: use of irregular braces for `eprint!` macro\n-  --> $DIR/conf_nonstandard_macro_braces.rs:57:5\n+  --> $DIR/conf_nonstandard_macro_braces.rs:58:5\n    |\n LL |     eprint!(\"test if user config overrides defaults\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n help: consider writing `eprint![\"test if user config overrides defaults\"]`\n-  --> $DIR/conf_nonstandard_macro_braces.rs:57:5\n+  --> $DIR/conf_nonstandard_macro_braces.rs:58:5\n    |\n LL |     eprint!(\"test if user config overrides defaults\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 7 previous errors\n+error: aborting due to 8 previous errors\n "}, {"sha": "079b7c000dce1e7f953418a356fe2f538d44ad61", "filename": "src/tools/clippy/tests/ui/almost_complete_letter_range.fixed", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Falmost_complete_letter_range.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Falmost_complete_letter_range.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Falmost_complete_letter_range.fixed?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -1,5 +1,6 @@\n // run-rustfix\n // edition:2018\n+// aux-build:macro_rules.rs\n \n #![feature(custom_inner_attributes)]\n #![feature(exclusive_range_pattern)]\n@@ -8,12 +9,21 @@\n #![allow(ellipsis_inclusive_range_patterns)]\n #![allow(clippy::needless_parens_on_range_literals)]\n \n+#[macro_use]\n+extern crate macro_rules;\n+\n macro_rules! a {\n     () => {\n         'a'\n     };\n }\n \n+macro_rules! b {\n+    () => {\n+        let _ = 'a'..='z';\n+    };\n+}\n+\n fn main() {\n     #[rustfmt::skip]\n     {\n@@ -47,6 +57,9 @@ fn main() {\n         'B'..'Z' => 4,\n         _ => 5,\n     };\n+\n+    almost_complete_letter_range!();\n+    b!();\n }\n \n fn _under_msrv() {"}, {"sha": "a66900a976efa92d549a8a194c78d3e376a98cdb", "filename": "src/tools/clippy/tests/ui/almost_complete_letter_range.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Falmost_complete_letter_range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Falmost_complete_letter_range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Falmost_complete_letter_range.rs?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -1,5 +1,6 @@\n // run-rustfix\n // edition:2018\n+// aux-build:macro_rules.rs\n \n #![feature(custom_inner_attributes)]\n #![feature(exclusive_range_pattern)]\n@@ -8,12 +9,21 @@\n #![allow(ellipsis_inclusive_range_patterns)]\n #![allow(clippy::needless_parens_on_range_literals)]\n \n+#[macro_use]\n+extern crate macro_rules;\n+\n macro_rules! a {\n     () => {\n         'a'\n     };\n }\n \n+macro_rules! b {\n+    () => {\n+        let _ = 'a'..'z';\n+    };\n+}\n+\n fn main() {\n     #[rustfmt::skip]\n     {\n@@ -47,6 +57,9 @@ fn main() {\n         'B'..'Z' => 4,\n         _ => 5,\n     };\n+\n+    almost_complete_letter_range!();\n+    b!();\n }\n \n fn _under_msrv() {"}, {"sha": "3de44c72c1b9d35ad50773e16b143200162da5dd", "filename": "src/tools/clippy/tests/ui/almost_complete_letter_range.stderr", "status": "modified", "additions": 26, "deletions": 13, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Falmost_complete_letter_range.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Falmost_complete_letter_range.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Falmost_complete_letter_range.stderr?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -1,5 +1,5 @@\n error: almost complete ascii letter range\n-  --> $DIR/almost_complete_letter_range.rs:20:17\n+  --> $DIR/almost_complete_letter_range.rs:30:17\n    |\n LL |         let _ = ('a') ..'z';\n    |                 ^^^^^^--^^^\n@@ -9,92 +9,105 @@ LL |         let _ = ('a') ..'z';\n    = note: `-D clippy::almost-complete-letter-range` implied by `-D warnings`\n \n error: almost complete ascii letter range\n-  --> $DIR/almost_complete_letter_range.rs:21:17\n+  --> $DIR/almost_complete_letter_range.rs:31:17\n    |\n LL |         let _ = 'A' .. ('Z');\n    |                 ^^^^--^^^^^^\n    |                     |\n    |                     help: use an inclusive range: `..=`\n \n error: almost complete ascii letter range\n-  --> $DIR/almost_complete_letter_range.rs:27:13\n+  --> $DIR/almost_complete_letter_range.rs:37:13\n    |\n LL |     let _ = (b'a')..(b'z');\n    |             ^^^^^^--^^^^^^\n    |                   |\n    |                   help: use an inclusive range: `..=`\n \n error: almost complete ascii letter range\n-  --> $DIR/almost_complete_letter_range.rs:28:13\n+  --> $DIR/almost_complete_letter_range.rs:38:13\n    |\n LL |     let _ = b'A'..b'Z';\n    |             ^^^^--^^^^\n    |                 |\n    |                 help: use an inclusive range: `..=`\n \n error: almost complete ascii letter range\n-  --> $DIR/almost_complete_letter_range.rs:33:13\n+  --> $DIR/almost_complete_letter_range.rs:43:13\n    |\n LL |     let _ = a!()..'z';\n    |             ^^^^--^^^\n    |                 |\n    |                 help: use an inclusive range: `..=`\n \n error: almost complete ascii letter range\n-  --> $DIR/almost_complete_letter_range.rs:36:9\n+  --> $DIR/almost_complete_letter_range.rs:46:9\n    |\n LL |         b'a'..b'z' if true => 1,\n    |         ^^^^--^^^^\n    |             |\n    |             help: use an inclusive range: `..=`\n \n error: almost complete ascii letter range\n-  --> $DIR/almost_complete_letter_range.rs:37:9\n+  --> $DIR/almost_complete_letter_range.rs:47:9\n    |\n LL |         b'A'..b'Z' if true => 2,\n    |         ^^^^--^^^^\n    |             |\n    |             help: use an inclusive range: `..=`\n \n error: almost complete ascii letter range\n-  --> $DIR/almost_complete_letter_range.rs:44:9\n+  --> $DIR/almost_complete_letter_range.rs:54:9\n    |\n LL |         'a'..'z' if true => 1,\n    |         ^^^--^^^\n    |            |\n    |            help: use an inclusive range: `..=`\n \n error: almost complete ascii letter range\n-  --> $DIR/almost_complete_letter_range.rs:45:9\n+  --> $DIR/almost_complete_letter_range.rs:55:9\n    |\n LL |         'A'..'Z' if true => 2,\n    |         ^^^--^^^\n    |            |\n    |            help: use an inclusive range: `..=`\n \n error: almost complete ascii letter range\n-  --> $DIR/almost_complete_letter_range.rs:55:9\n+  --> $DIR/almost_complete_letter_range.rs:23:17\n+   |\n+LL |         let _ = 'a'..'z';\n+   |                 ^^^--^^^\n+   |                    |\n+   |                    help: use an inclusive range: `..=`\n+...\n+LL |     b!();\n+   |     ---- in this macro invocation\n+   |\n+   = note: this error originates in the macro `b` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: almost complete ascii letter range\n+  --> $DIR/almost_complete_letter_range.rs:68:9\n    |\n LL |         'a'..'z' => 1,\n    |         ^^^--^^^\n    |            |\n    |            help: use an inclusive range: `...`\n \n error: almost complete ascii letter range\n-  --> $DIR/almost_complete_letter_range.rs:62:13\n+  --> $DIR/almost_complete_letter_range.rs:75:13\n    |\n LL |     let _ = 'a'..'z';\n    |             ^^^--^^^\n    |                |\n    |                help: use an inclusive range: `..=`\n \n error: almost complete ascii letter range\n-  --> $DIR/almost_complete_letter_range.rs:64:9\n+  --> $DIR/almost_complete_letter_range.rs:77:9\n    |\n LL |         'a'..'z' => 1,\n    |         ^^^--^^^\n    |            |\n    |            help: use an inclusive range: `..=`\n \n-error: aborting due to 12 previous errors\n+error: aborting due to 13 previous errors\n "}, {"sha": "dd24f5aa592b3b17094f9d395ba58430bc9ccccd", "filename": "src/tools/clippy/tests/ui/arithmetic_side_effects.rs", "status": "modified", "additions": 93, "deletions": 11, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Farithmetic_side_effects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Farithmetic_side_effects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Farithmetic_side_effects.rs?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -1,9 +1,49 @@\n-#![allow(clippy::assign_op_pattern, clippy::unnecessary_owned_empty_strings)]\n+#![allow(\n+    clippy::assign_op_pattern,\n+    clippy::erasing_op,\n+    clippy::identity_op,\n+    clippy::unnecessary_owned_empty_strings,\n+    arithmetic_overflow,\n+    unconditional_panic\n+)]\n #![feature(inline_const, saturating_int_impl)]\n #![warn(clippy::arithmetic_side_effects)]\n \n use core::num::{Saturating, Wrapping};\n \n+pub fn association_with_structures_should_not_trigger_the_lint() {\n+    enum Foo {\n+        Bar = -2,\n+    }\n+\n+    impl Trait for Foo {\n+        const ASSOC: i32 = {\n+            let _: [i32; 1 + 1];\n+            fn foo() {}\n+            1 + 1\n+        };\n+    }\n+\n+    struct Baz([i32; 1 + 1]);\n+\n+    trait Trait {\n+        const ASSOC: i32 = 1 + 1;\n+    }\n+\n+    type Alias = [i32; 1 + 1];\n+\n+    union Qux {\n+        field: [i32; 1 + 1],\n+    }\n+\n+    let _: [i32; 1 + 1] = [0, 0];\n+\n+    let _: [i32; 1 + 1] = {\n+        let a: [i32; 1 + 1] = [0, 0];\n+        a\n+    };\n+}\n+\n pub fn hard_coded_allowed() {\n     let _ = 1f32 + 1f32;\n     let _ = 1f64 + 1f64;\n@@ -26,7 +66,7 @@ pub fn hard_coded_allowed() {\n }\n \n #[rustfmt::skip]\n-pub fn non_overflowing_ops() {\n+pub fn const_ops_should_not_trigger_the_lint() {\n     const _: i32 = { let mut n = 1; n += 1; n };\n     let _ = const { let mut n = 1; n += 1; n };\n \n@@ -37,21 +77,63 @@ pub fn non_overflowing_ops() {\n     let _ = const { let mut n = 1; n = 1 + n; n };\n \n     const _: i32 = 1 + 1;\n-    let _ = 1 + 1;\n     let _ = const { 1 + 1 };\n \n-    let mut _a = 1;\n-    _a *= 1;\n-    _a /= 1;\n+    const _: i32 = { let mut n = -1; n = -(-1); n = -n; n };\n+    let _ = const { let mut n = -1; n = -(-1); n = -n; n };\n }\n \n-#[rustfmt::skip]\n-pub fn overflowing_ops() {\n-    let mut _a = 1; _a += 1;\n+pub fn non_overflowing_runtime_ops_or_ops_already_handled_by_the_compiler() {\n+    let mut _n = i32::MAX;\n+\n+    // Assign\n+    _n += 0;\n+    _n -= 0;\n+    _n /= 99;\n+    _n %= 99;\n+    _n *= 0;\n+    _n *= 1;\n+\n+    // Binary\n+    _n = _n + 0;\n+    _n = 0 + _n;\n+    _n = _n - 0;\n+    _n = 0 - _n;\n+    _n = _n / 99;\n+    _n = _n % 99;\n+    _n = _n * 0;\n+    _n = 0 * _n;\n+    _n = _n * 1;\n+    _n = 1 * _n;\n+    _n = 23 + 85;\n+\n+    // Unary\n+    _n = -1;\n+    _n = -(-1);\n+}\n+\n+pub fn overflowing_runtime_ops() {\n+    let mut _n = i32::MAX;\n+\n+    // Assign\n+    _n += 1;\n+    _n -= 1;\n+    _n /= 0;\n+    _n %= 0;\n+    _n *= 2;\n \n-    let mut _b = 1; _b = _b + 1;\n+    // Binary\n+    _n = _n + 1;\n+    _n = 1 + _n;\n+    _n = _n - 1;\n+    _n = 1 - _n;\n+    _n = _n / 0;\n+    _n = _n % 0;\n+    _n = _n * 2;\n+    _n = 2 * _n;\n \n-    let mut _c = 1; _c = 1 + _c;\n+    // Unary\n+    _n = -_n;\n }\n \n fn main() {}"}, {"sha": "a2a856efbffc02f8765e34edd2a67d752ece3bf8", "filename": "src/tools/clippy/tests/ui/arithmetic_side_effects.stderr", "status": "modified", "additions": 79, "deletions": 13, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Farithmetic_side_effects.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Farithmetic_side_effects.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Farithmetic_side_effects.stderr?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -1,22 +1,88 @@\n-error: arithmetic detected\n-  --> $DIR/arithmetic_side_effects.rs:50:21\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:119:5\n    |\n-LL |     let mut _a = 1; _a += 1;\n-   |                     ^^^^^^^\n+LL |     _n += 1;\n+   |     ^^^^^^^\n    |\n    = note: `-D clippy::arithmetic-side-effects` implied by `-D warnings`\n \n-error: arithmetic detected\n-  --> $DIR/arithmetic_side_effects.rs:52:26\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:120:5\n    |\n-LL |     let mut _b = 1; _b = _b + 1;\n-   |                          ^^^^^^\n+LL |     _n -= 1;\n+   |     ^^^^^^^\n \n-error: arithmetic detected\n-  --> $DIR/arithmetic_side_effects.rs:54:26\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:121:5\n    |\n-LL |     let mut _c = 1; _c = 1 + _c;\n-   |                          ^^^^^^\n+LL |     _n /= 0;\n+   |     ^^^^^^^\n \n-error: aborting due to 3 previous errors\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:122:5\n+   |\n+LL |     _n %= 0;\n+   |     ^^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:123:5\n+   |\n+LL |     _n *= 2;\n+   |     ^^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:126:10\n+   |\n+LL |     _n = _n + 1;\n+   |          ^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:127:10\n+   |\n+LL |     _n = 1 + _n;\n+   |          ^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:128:10\n+   |\n+LL |     _n = _n - 1;\n+   |          ^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:129:10\n+   |\n+LL |     _n = 1 - _n;\n+   |          ^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:130:10\n+   |\n+LL |     _n = _n / 0;\n+   |          ^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:131:10\n+   |\n+LL |     _n = _n % 0;\n+   |          ^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:132:10\n+   |\n+LL |     _n = _n * 2;\n+   |          ^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:133:10\n+   |\n+LL |     _n = 2 * _n;\n+   |          ^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:136:10\n+   |\n+LL |     _n = -_n;\n+   |          ^^^\n+\n+error: aborting due to 14 previous errors\n "}, {"sha": "2bb755290c508b812c6c6ce4a7b53fae5a47f521", "filename": "src/tools/clippy/tests/ui/assertions_on_result_states.fixed", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fassertions_on_result_states.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fassertions_on_result_states.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fassertions_on_result_states.fixed?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -75,3 +75,9 @@ fn main() {\n     let r: Result<Foo, Foo> = Err(Foo);\n     assert!(r.is_err());\n }\n+\n+#[allow(dead_code)]\n+fn issue9450() {\n+    let res: Result<i32, i32> = Ok(1);\n+    res.unwrap_err();\n+}"}, {"sha": "d8a9bd2f1c45576e191d3d02cf71deeb7cd8a8a3", "filename": "src/tools/clippy/tests/ui/assertions_on_result_states.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fassertions_on_result_states.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fassertions_on_result_states.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fassertions_on_result_states.rs?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -75,3 +75,9 @@ fn main() {\n     let r: Result<Foo, Foo> = Err(Foo);\n     assert!(r.is_err());\n }\n+\n+#[allow(dead_code)]\n+fn issue9450() {\n+    let res: Result<i32, i32> = Ok(1);\n+    assert!(res.is_err())\n+}"}, {"sha": "298d63c9c34fb38fc0a304b7aeb09c07db15cdcb", "filename": "src/tools/clippy/tests/ui/assertions_on_result_states.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fassertions_on_result_states.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fassertions_on_result_states.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fassertions_on_result_states.stderr?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -36,5 +36,11 @@ error: called `assert!` with `Result::is_err`\n LL |     assert!(r.is_err());\n    |     ^^^^^^^^^^^^^^^^^^^ help: replace with: `r.unwrap_err()`\n \n-error: aborting due to 6 previous errors\n+error: called `assert!` with `Result::is_err`\n+  --> $DIR/assertions_on_result_states.rs:82:5\n+   |\n+LL |     assert!(res.is_err())\n+   |     ^^^^^^^^^^^^^^^^^^^^^ help: replace with: `res.unwrap_err();`\n+\n+error: aborting due to 7 previous errors\n "}, {"sha": "ef3ca9aea380c0bfba020deffb65b601f56a90b4", "filename": "src/tools/clippy/tests/ui/auxiliary/macro_rules.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fauxiliary%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fauxiliary%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fauxiliary%2Fmacro_rules.rs?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -140,3 +140,10 @@ macro_rules! manual_rem_euclid {\n macro_rules! equatable_if_let {\n     ($a:ident) => {{ if let 2 = $a {} }};\n }\n+\n+#[macro_export]\n+macro_rules! almost_complete_letter_range {\n+    () => {\n+        let _ = 'a'..'z';\n+    };\n+}"}, {"sha": "2c8339cdd7f8a0fa97d0c3c495fc9d90cfb611f3", "filename": "src/tools/clippy/tests/ui/bool_to_int_with_if.fixed", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fbool_to_int_with_if.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fbool_to_int_with_if.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fbool_to_int_with_if.fixed?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -14,14 +14,20 @@ fn main() {\n     // precedence\n     i32::from(a);\n     i32::from(!a);\n+    i32::from(!a);\n     i32::from(a || b);\n     i32::from(cond(a, b));\n     i32::from(x + y < 4);\n \n     // if else if\n     if a {\n         123\n-    } else {i32::from(b)};\n+    } else { i32::from(b) };\n+\n+    // if else if inverted\n+    if a {\n+        123\n+    } else { i32::from(!b) };\n \n     // Shouldn't lint\n "}, {"sha": "5d9496f01775f84505c823fa594c21c43ae78b6b", "filename": "src/tools/clippy/tests/ui/bool_to_int_with_if.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fbool_to_int_with_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fbool_to_int_with_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fbool_to_int_with_if.rs?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -17,6 +17,11 @@ fn main() {\n     } else {\n         0\n     };\n+    if a {\n+        0\n+    } else {\n+        1\n+    };\n     if !a {\n         1\n     } else {\n@@ -47,6 +52,15 @@ fn main() {\n         0\n     };\n \n+    // if else if inverted\n+    if a {\n+        123\n+    } else if b {\n+        0\n+    } else {\n+        1\n+    };\n+\n     // Shouldn't lint\n \n     if a {"}, {"sha": "e695440f6682ff3dd68792a60e6c905cf0f51c3f", "filename": "src/tools/clippy/tests/ui/bool_to_int_with_if.stderr", "status": "modified", "additions": 33, "deletions": 8, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fbool_to_int_with_if.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fbool_to_int_with_if.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fbool_to_int_with_if.stderr?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -14,17 +14,29 @@ LL | |     };\n error: boolean to int conversion using if\n   --> $DIR/bool_to_int_with_if.rs:20:5\n    |\n+LL | /     if a {\n+LL | |         0\n+LL | |     } else {\n+LL | |         1\n+LL | |     };\n+   | |_____^ help: replace with from: `i32::from(!a)`\n+   |\n+   = note: `!a as i32` or `(!a).into()` can also be valid options\n+\n+error: boolean to int conversion using if\n+  --> $DIR/bool_to_int_with_if.rs:25:5\n+   |\n LL | /     if !a {\n LL | |         1\n LL | |     } else {\n LL | |         0\n LL | |     };\n    | |_____^ help: replace with from: `i32::from(!a)`\n    |\n-   = note: `!a as i32` or `!a.into()` can also be valid options\n+   = note: `!a as i32` or `(!a).into()` can also be valid options\n \n error: boolean to int conversion using if\n-  --> $DIR/bool_to_int_with_if.rs:25:5\n+  --> $DIR/bool_to_int_with_if.rs:30:5\n    |\n LL | /     if a || b {\n LL | |         1\n@@ -36,7 +48,7 @@ LL | |     };\n    = note: `(a || b) as i32` or `(a || b).into()` can also be valid options\n \n error: boolean to int conversion using if\n-  --> $DIR/bool_to_int_with_if.rs:30:5\n+  --> $DIR/bool_to_int_with_if.rs:35:5\n    |\n LL | /     if cond(a, b) {\n LL | |         1\n@@ -48,7 +60,7 @@ LL | |     };\n    = note: `cond(a, b) as i32` or `cond(a, b).into()` can also be valid options\n \n error: boolean to int conversion using if\n-  --> $DIR/bool_to_int_with_if.rs:35:5\n+  --> $DIR/bool_to_int_with_if.rs:40:5\n    |\n LL | /     if x + y < 4 {\n LL | |         1\n@@ -60,25 +72,38 @@ LL | |     };\n    = note: `(x + y < 4) as i32` or `(x + y < 4).into()` can also be valid options\n \n error: boolean to int conversion using if\n-  --> $DIR/bool_to_int_with_if.rs:44:12\n+  --> $DIR/bool_to_int_with_if.rs:49:12\n    |\n LL |       } else if b {\n    |  ____________^\n LL | |         1\n LL | |     } else {\n LL | |         0\n LL | |     };\n-   | |_____^ help: replace with from: `{i32::from(b)}`\n+   | |_____^ help: replace with from: `{ i32::from(b) }`\n    |\n    = note: `b as i32` or `b.into()` can also be valid options\n \n error: boolean to int conversion using if\n-  --> $DIR/bool_to_int_with_if.rs:102:5\n+  --> $DIR/bool_to_int_with_if.rs:58:12\n+   |\n+LL |       } else if b {\n+   |  ____________^\n+LL | |         0\n+LL | |     } else {\n+LL | |         1\n+LL | |     };\n+   | |_____^ help: replace with from: `{ i32::from(!b) }`\n+   |\n+   = note: `!b as i32` or `(!b).into()` can also be valid options\n+\n+error: boolean to int conversion using if\n+  --> $DIR/bool_to_int_with_if.rs:116:5\n    |\n LL |     if a { 1 } else { 0 }\n    |     ^^^^^^^^^^^^^^^^^^^^^ help: replace with from: `u8::from(a)`\n    |\n    = note: `a as u8` or `a.into()` can also be valid options\n \n-error: aborting due to 7 previous errors\n+error: aborting due to 9 previous errors\n "}, {"sha": "6bb7682bae9530883c8035aa3ca0a1aebf5c5cbe", "filename": "src/tools/clippy/tests/ui/collapsible_if.fixed", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcollapsible_if.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcollapsible_if.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcollapsible_if.fixed?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -139,6 +139,9 @@ fn main() {\n     // Fix #5962\n     if matches!(true, true) && matches!(true, true) {}\n \n+    // Issue #9375\n+    if matches!(true, true) && truth() && matches!(true, true) {}\n+\n     if true {\n         #[cfg(not(teehee))]\n         if true {"}, {"sha": "e216a9ee54c90ee959415569eb612f1a8010dfb9", "filename": "src/tools/clippy/tests/ui/collapsible_if.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcollapsible_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcollapsible_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcollapsible_if.rs?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -155,6 +155,11 @@ fn main() {\n         if matches!(true, true) {}\n     }\n \n+    // Issue #9375\n+    if matches!(true, true) && truth() {\n+        if matches!(true, true) {}\n+    }\n+\n     if true {\n         #[cfg(not(teehee))]\n         if true {"}, {"sha": "6327444df21d7641a151decebff28f3dcbca3a61", "filename": "src/tools/clippy/tests/ui/collapsible_if.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcollapsible_if.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcollapsible_if.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcollapsible_if.stderr?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -126,5 +126,13 @@ LL | |         if matches!(true, true) {}\n LL | |     }\n    | |_____^ help: collapse nested if block: `if matches!(true, true) && matches!(true, true) {}`\n \n-error: aborting due to 8 previous errors\n+error: this `if` statement can be collapsed\n+  --> $DIR/collapsible_if.rs:159:5\n+   |\n+LL | /     if matches!(true, true) && truth() {\n+LL | |         if matches!(true, true) {}\n+LL | |     }\n+   | |_____^ help: collapse nested if block: `if matches!(true, true) && truth() && matches!(true, true) {}`\n+\n+error: aborting due to 9 previous errors\n "}, {"sha": "41ef930d3233df48320f90b354b26ccb1b9a352c", "filename": "src/tools/clippy/tests/ui/crashes/ice-9463.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-9463.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-9463.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-9463.rs?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -0,0 +1,5 @@\n+#![deny(arithmetic_overflow, const_err)]\n+fn main() {\n+    let _x = -1_i32 >> -1;\n+    let _y = 1u32 >> 10000000000000u32;\n+}"}, {"sha": "7daa08aeb6c94d762c37d77c2ff8e84eed19a0f8", "filename": "src/tools/clippy/tests/ui/crashes/ice-9463.stderr", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-9463.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-9463.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-9463.stderr?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -0,0 +1,29 @@\n+error: this arithmetic operation will overflow\n+  --> $DIR/ice-9463.rs:3:14\n+   |\n+LL |     let _x = -1_i32 >> -1;\n+   |              ^^^^^^^^^^^^ attempt to shift right by `-1_i32`, which would overflow\n+   |\n+note: the lint level is defined here\n+  --> $DIR/ice-9463.rs:1:9\n+   |\n+LL | #![deny(arithmetic_overflow, const_err)]\n+   |         ^^^^^^^^^^^^^^^^^^^\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/ice-9463.rs:4:14\n+   |\n+LL |     let _y = 1u32 >> 10000000000000u32;\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^ attempt to shift right by `1316134912_u32`, which would overflow\n+\n+error: literal out of range for `u32`\n+  --> $DIR/ice-9463.rs:4:22\n+   |\n+LL |     let _y = 1u32 >> 10000000000000u32;\n+   |                      ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[deny(overflowing_literals)]` on by default\n+   = note: the literal `10000000000000u32` does not fit into the type `u32` whose range is `0..=4294967295`\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "7dcdfb0937e892a6a146bc4218bba298e829100d", "filename": "src/tools/clippy/tests/ui/derivable_impls.fixed", "status": "added", "additions": 213, "deletions": 0, "changes": 213, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fderivable_impls.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fderivable_impls.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fderivable_impls.fixed?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -0,0 +1,213 @@\n+// run-rustfix\n+\n+#![allow(dead_code)]\n+\n+use std::collections::HashMap;\n+\n+#[derive(Default)]\n+struct FooDefault<'a> {\n+    a: bool,\n+    b: i32,\n+    c: u64,\n+    d: Vec<i32>,\n+    e: FooND1,\n+    f: FooND2,\n+    g: HashMap<i32, i32>,\n+    h: (i32, Vec<i32>),\n+    i: [Vec<i32>; 3],\n+    j: [i32; 5],\n+    k: Option<i32>,\n+    l: &'a [i32],\n+}\n+\n+\n+\n+#[derive(Default)]\n+struct TupleDefault(bool, i32, u64);\n+\n+\n+\n+struct FooND1 {\n+    a: bool,\n+}\n+\n+impl std::default::Default for FooND1 {\n+    fn default() -> Self {\n+        Self { a: true }\n+    }\n+}\n+\n+struct FooND2 {\n+    a: i32,\n+}\n+\n+impl std::default::Default for FooND2 {\n+    fn default() -> Self {\n+        Self { a: 5 }\n+    }\n+}\n+\n+struct FooNDNew {\n+    a: bool,\n+}\n+\n+impl FooNDNew {\n+    fn new() -> Self {\n+        Self { a: true }\n+    }\n+}\n+\n+impl Default for FooNDNew {\n+    fn default() -> Self {\n+        Self::new()\n+    }\n+}\n+\n+struct FooNDVec(Vec<i32>);\n+\n+impl Default for FooNDVec {\n+    fn default() -> Self {\n+        Self(vec![5, 12])\n+    }\n+}\n+\n+#[derive(Default)]\n+struct StrDefault<'a>(&'a str);\n+\n+\n+\n+#[derive(Default)]\n+struct AlreadyDerived(i32, bool);\n+\n+macro_rules! mac {\n+    () => {\n+        0\n+    };\n+    ($e:expr) => {\n+        struct X(u32);\n+        impl Default for X {\n+            fn default() -> Self {\n+                Self($e)\n+            }\n+        }\n+    };\n+}\n+\n+mac!(0);\n+\n+#[derive(Default)]\n+struct Y(u32);\n+\n+\n+struct RustIssue26925<T> {\n+    a: Option<T>,\n+}\n+\n+// We should watch out for cases where a manual impl is needed because a\n+// derive adds different type bounds (https://github.com/rust-lang/rust/issues/26925).\n+// For example, a struct with Option<T> does not require T: Default, but a derive adds\n+// that type bound anyways. So until #26925 get fixed we should disable lint\n+// for the following case\n+impl<T> Default for RustIssue26925<T> {\n+    fn default() -> Self {\n+        Self { a: None }\n+    }\n+}\n+\n+struct SpecializedImpl<A, B> {\n+    a: A,\n+    b: B,\n+}\n+\n+impl<T: Default> Default for SpecializedImpl<T, T> {\n+    fn default() -> Self {\n+        Self {\n+            a: T::default(),\n+            b: T::default(),\n+        }\n+    }\n+}\n+\n+#[derive(Default)]\n+struct WithoutSelfCurly {\n+    a: bool,\n+}\n+\n+\n+\n+#[derive(Default)]\n+struct WithoutSelfParan(bool);\n+\n+\n+\n+// https://github.com/rust-lang/rust-clippy/issues/7655\n+\n+pub struct SpecializedImpl2<T> {\n+    v: Vec<T>,\n+}\n+\n+impl Default for SpecializedImpl2<String> {\n+    fn default() -> Self {\n+        Self { v: Vec::new() }\n+    }\n+}\n+\n+// https://github.com/rust-lang/rust-clippy/issues/7654\n+\n+pub struct Color {\n+    pub r: u8,\n+    pub g: u8,\n+    pub b: u8,\n+}\n+\n+/// `#000000`\n+impl Default for Color {\n+    fn default() -> Self {\n+        Color { r: 0, g: 0, b: 0 }\n+    }\n+}\n+\n+pub struct Color2 {\n+    pub r: u8,\n+    pub g: u8,\n+    pub b: u8,\n+}\n+\n+impl Default for Color2 {\n+    /// `#000000`\n+    fn default() -> Self {\n+        Self { r: 0, g: 0, b: 0 }\n+    }\n+}\n+\n+#[derive(Default)]\n+pub struct RepeatDefault1 {\n+    a: [i8; 32],\n+}\n+\n+\n+\n+pub struct RepeatDefault2 {\n+    a: [i8; 33],\n+}\n+\n+impl Default for RepeatDefault2 {\n+    fn default() -> Self {\n+        RepeatDefault2 { a: [0; 33] }\n+    }\n+}\n+\n+// https://github.com/rust-lang/rust-clippy/issues/7753\n+\n+pub enum IntOrString {\n+    Int(i32),\n+    String(String),\n+}\n+\n+impl Default for IntOrString {\n+    fn default() -> Self {\n+        IntOrString::Int(0)\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "625cbcdde230ac14e03efefd0769562b56488188", "filename": "src/tools/clippy/tests/ui/derivable_impls.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fderivable_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fderivable_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fderivable_impls.rs?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -1,3 +1,7 @@\n+// run-rustfix\n+\n+#![allow(dead_code)]\n+\n use std::collections::HashMap;\n \n struct FooDefault<'a> {"}, {"sha": "c1db5a58b1f5196085701cec8fa6e95308f445ce", "filename": "src/tools/clippy/tests/ui/derivable_impls.stderr", "status": "modified", "additions": 42, "deletions": 14, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fderivable_impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fderivable_impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fderivable_impls.stderr?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -1,5 +1,5 @@\n error: this `impl` can be derived\n-  --> $DIR/derivable_impls.rs:18:1\n+  --> $DIR/derivable_impls.rs:22:1\n    |\n LL | / impl std::default::Default for FooDefault<'_> {\n LL | |     fn default() -> Self {\n@@ -11,10 +11,14 @@ LL | | }\n    | |_^\n    |\n    = note: `-D clippy::derivable-impls` implied by `-D warnings`\n-   = help: try annotating `FooDefault` with `#[derive(Default)]`\n+   = help: remove the manual implementation...\n+help: ...and instead derive it\n+   |\n+LL | #[derive(Default)]\n+   |\n \n error: this `impl` can be derived\n-  --> $DIR/derivable_impls.rs:39:1\n+  --> $DIR/derivable_impls.rs:43:1\n    |\n LL | / impl std::default::Default for TupleDefault {\n LL | |     fn default() -> Self {\n@@ -23,10 +27,14 @@ LL | |     }\n LL | | }\n    | |_^\n    |\n-   = help: try annotating `TupleDefault` with `#[derive(Default)]`\n+   = help: remove the manual implementation...\n+help: ...and instead derive it\n+   |\n+LL | #[derive(Default)]\n+   |\n \n error: this `impl` can be derived\n-  --> $DIR/derivable_impls.rs:91:1\n+  --> $DIR/derivable_impls.rs:95:1\n    |\n LL | / impl Default for StrDefault<'_> {\n LL | |     fn default() -> Self {\n@@ -35,10 +43,14 @@ LL | |     }\n LL | | }\n    | |_^\n    |\n-   = help: try annotating `StrDefault` with `#[derive(Default)]`\n+   = help: remove the manual implementation...\n+help: ...and instead derive it\n+   |\n+LL | #[derive(Default)]\n+   |\n \n error: this `impl` can be derived\n-  --> $DIR/derivable_impls.rs:117:1\n+  --> $DIR/derivable_impls.rs:121:1\n    |\n LL | / impl Default for Y {\n LL | |     fn default() -> Self {\n@@ -47,10 +59,14 @@ LL | |     }\n LL | | }\n    | |_^\n    |\n-   = help: try annotating `Y` with `#[derive(Default)]`\n+   = help: remove the manual implementation...\n+help: ...and instead derive it\n+   |\n+LL | #[derive(Default)]\n+   |\n \n error: this `impl` can be derived\n-  --> $DIR/derivable_impls.rs:156:1\n+  --> $DIR/derivable_impls.rs:160:1\n    |\n LL | / impl Default for WithoutSelfCurly {\n LL | |     fn default() -> Self {\n@@ -59,10 +75,14 @@ LL | |     }\n LL | | }\n    | |_^\n    |\n-   = help: try annotating `WithoutSelfCurly` with `#[derive(Default)]`\n+   = help: remove the manual implementation...\n+help: ...and instead derive it\n+   |\n+LL | #[derive(Default)]\n+   |\n \n error: this `impl` can be derived\n-  --> $DIR/derivable_impls.rs:164:1\n+  --> $DIR/derivable_impls.rs:168:1\n    |\n LL | / impl Default for WithoutSelfParan {\n LL | |     fn default() -> Self {\n@@ -71,10 +91,14 @@ LL | |     }\n LL | | }\n    | |_^\n    |\n-   = help: try annotating `WithoutSelfParan` with `#[derive(Default)]`\n+   = help: remove the manual implementation...\n+help: ...and instead derive it\n+   |\n+LL | #[derive(Default)]\n+   |\n \n error: this `impl` can be derived\n-  --> $DIR/derivable_impls.rs:214:1\n+  --> $DIR/derivable_impls.rs:218:1\n    |\n LL | / impl Default for RepeatDefault1 {\n LL | |     fn default() -> Self {\n@@ -83,7 +107,11 @@ LL | |     }\n LL | | }\n    | |_^\n    |\n-   = help: try annotating `RepeatDefault1` with `#[derive(Default)]`\n+   = help: remove the manual implementation...\n+help: ...and instead derive it\n+   |\n+LL | #[derive(Default)]\n+   |\n \n error: aborting due to 7 previous errors\n "}, {"sha": "de5e121be877460b07e36537f3b6e05ae07fa56d", "filename": "src/tools/clippy/tests/ui/eprint_with_newline.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Feprint_with_newline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Feprint_with_newline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Feprint_with_newline.rs?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -45,5 +45,13 @@ fn main() {\n     eprint!(\"\\r\\n\");\n     eprint!(\"foo\\r\\n\");\n     eprint!(\"\\\\r\\n\"); //~ ERROR\n-    eprint!(\"foo\\rbar\\n\") // ~ ERROR\n+    eprint!(\"foo\\rbar\\n\");\n+\n+    // Ignore expanded format strings\n+    macro_rules! newline {\n+        () => {\n+            \"\\n\"\n+        };\n+    }\n+    eprint!(newline!());\n }"}, {"sha": "0eefb9f0ca978bafd91c8d8186321c2f8a37a7d2", "filename": "src/tools/clippy/tests/ui/eprint_with_newline.stderr", "status": "modified", "additions": 3, "deletions": 15, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Feprint_with_newline.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Feprint_with_newline.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Feprint_with_newline.stderr?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -83,7 +83,7 @@ LL | |     );\n help: use `eprintln!` instead\n    |\n LL ~     eprintln!(\n-LL ~         \"\"\n+LL ~         \n    |\n \n error: using `eprint!()` with a format string that ends in a single newline\n@@ -98,7 +98,7 @@ LL | |     );\n help: use `eprintln!` instead\n    |\n LL ~     eprintln!(\n-LL ~         r\"\"\n+LL ~         \n    |\n \n error: using `eprint!()` with a format string that ends in a single newline\n@@ -113,17 +113,5 @@ LL -     eprint!(\"/r/n\"); //~ ERROR\n LL +     eprintln!(\"/r\"); //~ ERROR\n    |\n \n-error: using `eprint!()` with a format string that ends in a single newline\n-  --> $DIR/eprint_with_newline.rs:48:5\n-   |\n-LL |     eprint!(\"foo/rbar/n\") // ~ ERROR\n-   |     ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: use `eprintln!` instead\n-   |\n-LL -     eprint!(\"foo/rbar/n\") // ~ ERROR\n-LL +     eprintln!(\"foo/rbar\") // ~ ERROR\n-   |\n-\n-error: aborting due to 10 previous errors\n+error: aborting due to 9 previous errors\n "}, {"sha": "35283725619ae8bcb5651e80310af5a80d4f2b92", "filename": "src/tools/clippy/tests/ui/explicit_write.fixed", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fexplicit_write.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fexplicit_write.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fexplicit_write.fixed?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -36,6 +36,8 @@ fn main() {\n         eprintln!(\"with {} {}\", 2, value);\n         eprintln!(\"with {value}\");\n         eprintln!(\"macro arg {}\", one!());\n+        let width = 2;\n+        eprintln!(\"{:w$}\", value, w = width);\n     }\n     // these should not warn, different destination\n     {"}, {"sha": "be864a55b663ffc9092c2b3083b3e1bc06e82063", "filename": "src/tools/clippy/tests/ui/explicit_write.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fexplicit_write.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fexplicit_write.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fexplicit_write.rs?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -36,6 +36,8 @@ fn main() {\n         writeln!(std::io::stderr(), \"with {} {}\", 2, value).unwrap();\n         writeln!(std::io::stderr(), \"with {value}\").unwrap();\n         writeln!(std::io::stderr(), \"macro arg {}\", one!()).unwrap();\n+        let width = 2;\n+        writeln!(std::io::stderr(), \"{:w$}\", value, w = width).unwrap();\n     }\n     // these should not warn, different destination\n     {"}, {"sha": "ff05f4343d77d8c600b5c7660d8f585acf8a3430", "filename": "src/tools/clippy/tests/ui/explicit_write.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fexplicit_write.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fexplicit_write.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fexplicit_write.stderr?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -72,5 +72,11 @@ error: use of `writeln!(stderr(), ...).unwrap()`\n LL |         writeln!(std::io::stderr(), \"macro arg {}\", one!()).unwrap();\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `eprintln!(\"macro arg {}\", one!())`\n \n-error: aborting due to 12 previous errors\n+error: use of `writeln!(stderr(), ...).unwrap()`\n+  --> $DIR/explicit_write.rs:40:9\n+   |\n+LL |         writeln!(std::io::stderr(), \"{:w$}\", value, w = width).unwrap();\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `eprintln!(\"{:w$}\", value, w = width)`\n+\n+error: aborting due to 13 previous errors\n "}, {"sha": "e0c5f692740a1edd0e4c0daecd32aaf3caebe953", "filename": "src/tools/clippy/tests/ui/format.fixed", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fformat.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fformat.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fformat.fixed?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -28,8 +28,6 @@ fn main() {\n     format!(\"{:?}\", \"foo\"); // Don't warn about `Debug`.\n     format!(\"{:8}\", \"foo\");\n     format!(\"{:width$}\", \"foo\", width = 8);\n-    \"foo\".to_string(); // Warn when the format makes no difference.\n-    \"foo\".to_string(); // Warn when the format makes no difference.\n     format!(\"foo {}\", \"bar\");\n     format!(\"{} bar\", \"foo\");\n \n@@ -38,8 +36,6 @@ fn main() {\n     format!(\"{:?}\", arg); // Don't warn about debug.\n     format!(\"{:8}\", arg);\n     format!(\"{:width$}\", arg, width = 8);\n-    arg.to_string(); // Warn when the format makes no difference.\n-    arg.to_string(); // Warn when the format makes no difference.\n     format!(\"foo {}\", arg);\n     format!(\"{} bar\", arg);\n "}, {"sha": "ff83cd64bf09c1dd84f4da82c4505ed43d360e6f", "filename": "src/tools/clippy/tests/ui/format.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fformat.rs?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -30,8 +30,6 @@ fn main() {\n     format!(\"{:?}\", \"foo\"); // Don't warn about `Debug`.\n     format!(\"{:8}\", \"foo\");\n     format!(\"{:width$}\", \"foo\", width = 8);\n-    format!(\"{:+}\", \"foo\"); // Warn when the format makes no difference.\n-    format!(\"{:<}\", \"foo\"); // Warn when the format makes no difference.\n     format!(\"foo {}\", \"bar\");\n     format!(\"{} bar\", \"foo\");\n \n@@ -40,8 +38,6 @@ fn main() {\n     format!(\"{:?}\", arg); // Don't warn about debug.\n     format!(\"{:8}\", arg);\n     format!(\"{:width$}\", arg, width = 8);\n-    format!(\"{:+}\", arg); // Warn when the format makes no difference.\n-    format!(\"{:<}\", arg); // Warn when the format makes no difference.\n     format!(\"foo {}\", arg);\n     format!(\"{} bar\", arg);\n "}, {"sha": "0ef0ac655d3946a1ced143f01dbe9266f5627068", "filename": "src/tools/clippy/tests/ui/format.stderr", "status": "modified", "additions": 10, "deletions": 34, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fformat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fformat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fformat.stderr?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -46,82 +46,58 @@ LL |     format!(\"{}\", \"foo\");\n    |     ^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `\"foo\".to_string()`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:33:5\n-   |\n-LL |     format!(\"{:+}\", \"foo\"); // Warn when the format makes no difference.\n-   |     ^^^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `\"foo\".to_string()`\n-\n-error: useless use of `format!`\n-  --> $DIR/format.rs:34:5\n-   |\n-LL |     format!(\"{:<}\", \"foo\"); // Warn when the format makes no difference.\n-   |     ^^^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `\"foo\".to_string()`\n-\n-error: useless use of `format!`\n-  --> $DIR/format.rs:39:5\n+  --> $DIR/format.rs:37:5\n    |\n LL |     format!(\"{}\", arg);\n    |     ^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `arg.to_string()`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:43:5\n-   |\n-LL |     format!(\"{:+}\", arg); // Warn when the format makes no difference.\n-   |     ^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `arg.to_string()`\n-\n-error: useless use of `format!`\n-  --> $DIR/format.rs:44:5\n-   |\n-LL |     format!(\"{:<}\", arg); // Warn when the format makes no difference.\n-   |     ^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `arg.to_string()`\n-\n-error: useless use of `format!`\n-  --> $DIR/format.rs:71:5\n+  --> $DIR/format.rs:67:5\n    |\n LL |     format!(\"{}\", 42.to_string());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `42.to_string()`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:73:5\n+  --> $DIR/format.rs:69:5\n    |\n LL |     format!(\"{}\", x.display().to_string());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `x.display().to_string()`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:77:18\n+  --> $DIR/format.rs:73:18\n    |\n LL |     let _ = Some(format!(\"{}\", a + \"bar\"));\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `a + \"bar\"`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:81:22\n+  --> $DIR/format.rs:77:22\n    |\n LL |     let _s: String = format!(\"{}\", &*v.join(\"/n\"));\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `(&*v.join(\"/n\")).to_string()`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:87:13\n+  --> $DIR/format.rs:83:13\n    |\n LL |     let _ = format!(\"{x}\");\n    |             ^^^^^^^^^^^^^^ help: consider using `.to_string()`: `x.to_string()`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:89:13\n+  --> $DIR/format.rs:85:13\n    |\n LL |     let _ = format!(\"{y}\", y = x);\n    |             ^^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `x.to_string()`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:93:13\n+  --> $DIR/format.rs:89:13\n    |\n LL |     let _ = format!(\"{abc}\");\n    |             ^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `abc.to_string()`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:95:13\n+  --> $DIR/format.rs:91:13\n    |\n LL |     let _ = format!(\"{xx}\");\n    |             ^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `xx.to_string()`\n \n-error: aborting due to 19 previous errors\n+error: aborting due to 15 previous errors\n "}, {"sha": "83fee04080fa76507d15d19f1376f35ed48caf96", "filename": "src/tools/clippy/tests/ui/iter_kv_map.fixed", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_kv_map.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_kv_map.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_kv_map.fixed?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -0,0 +1,64 @@\n+// run-rustfix\n+\n+#![warn(clippy::iter_kv_map)]\n+#![allow(clippy::redundant_clone)]\n+#![allow(clippy::suspicious_map)]\n+#![allow(clippy::map_identity)]\n+\n+use std::collections::{BTreeMap, HashMap};\n+\n+fn main() {\n+    let get_key = |(key, _val)| key;\n+\n+    let map: HashMap<u32, u32> = HashMap::new();\n+\n+    let _ = map.keys().collect::<Vec<_>>();\n+    let _ = map.values().collect::<Vec<_>>();\n+    let _ = map.values().map(|v| v + 2).collect::<Vec<_>>();\n+\n+    let _ = map.clone().into_keys().collect::<Vec<_>>();\n+    let _ = map.clone().into_keys().map(|key| key + 2).collect::<Vec<_>>();\n+\n+    let _ = map.clone().into_values().collect::<Vec<_>>();\n+    let _ = map.clone().into_values().map(|val| val + 2).collect::<Vec<_>>();\n+\n+    let _ = map.clone().values().collect::<Vec<_>>();\n+    let _ = map.keys().filter(|x| *x % 2 == 0).count();\n+\n+    // Don't lint\n+    let _ = map.iter().filter(|(_, val)| *val % 2 == 0).map(|(key, _)| key).count();\n+    let _ = map.iter().map(get_key).collect::<Vec<_>>();\n+\n+    // Linting the following could be an improvement to the lint\n+    // map.iter().filter_map(|(_, val)| (val % 2 == 0).then(val * 17)).count();\n+\n+    // Lint\n+    let _ = map.keys().map(|key| key * 9).count();\n+    let _ = map.values().map(|value| value * 17).count();\n+\n+    let map: BTreeMap<u32, u32> = BTreeMap::new();\n+\n+    let _ = map.keys().collect::<Vec<_>>();\n+    let _ = map.values().collect::<Vec<_>>();\n+    let _ = map.values().map(|v| v + 2).collect::<Vec<_>>();\n+\n+    let _ = map.clone().into_keys().collect::<Vec<_>>();\n+    let _ = map.clone().into_keys().map(|key| key + 2).collect::<Vec<_>>();\n+\n+    let _ = map.clone().into_values().collect::<Vec<_>>();\n+    let _ = map.clone().into_values().map(|val| val + 2).collect::<Vec<_>>();\n+\n+    let _ = map.clone().values().collect::<Vec<_>>();\n+    let _ = map.keys().filter(|x| *x % 2 == 0).count();\n+\n+    // Don't lint\n+    let _ = map.iter().filter(|(_, val)| *val % 2 == 0).map(|(key, _)| key).count();\n+    let _ = map.iter().map(get_key).collect::<Vec<_>>();\n+\n+    // Linting the following could be an improvement to the lint\n+    // map.iter().filter_map(|(_, val)| (val % 2 == 0).then(val * 17)).count();\n+\n+    // Lint\n+    let _ = map.keys().map(|key| key * 9).count();\n+    let _ = map.values().map(|value| value * 17).count();\n+}"}, {"sha": "7a1f1fb0198c7a3b160280fb55ec0fd84436b800", "filename": "src/tools/clippy/tests/ui/iter_kv_map.rs", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_kv_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_kv_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_kv_map.rs?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -0,0 +1,64 @@\n+// run-rustfix\n+\n+#![warn(clippy::iter_kv_map)]\n+#![allow(clippy::redundant_clone)]\n+#![allow(clippy::suspicious_map)]\n+#![allow(clippy::map_identity)]\n+\n+use std::collections::{BTreeMap, HashMap};\n+\n+fn main() {\n+    let get_key = |(key, _val)| key;\n+\n+    let map: HashMap<u32, u32> = HashMap::new();\n+\n+    let _ = map.iter().map(|(key, _)| key).collect::<Vec<_>>();\n+    let _ = map.iter().map(|(_, value)| value).collect::<Vec<_>>();\n+    let _ = map.iter().map(|(_, v)| v + 2).collect::<Vec<_>>();\n+\n+    let _ = map.clone().into_iter().map(|(key, _)| key).collect::<Vec<_>>();\n+    let _ = map.clone().into_iter().map(|(key, _)| key + 2).collect::<Vec<_>>();\n+\n+    let _ = map.clone().into_iter().map(|(_, val)| val).collect::<Vec<_>>();\n+    let _ = map.clone().into_iter().map(|(_, val)| val + 2).collect::<Vec<_>>();\n+\n+    let _ = map.clone().iter().map(|(_, val)| val).collect::<Vec<_>>();\n+    let _ = map.iter().map(|(key, _)| key).filter(|x| *x % 2 == 0).count();\n+\n+    // Don't lint\n+    let _ = map.iter().filter(|(_, val)| *val % 2 == 0).map(|(key, _)| key).count();\n+    let _ = map.iter().map(get_key).collect::<Vec<_>>();\n+\n+    // Linting the following could be an improvement to the lint\n+    // map.iter().filter_map(|(_, val)| (val % 2 == 0).then(val * 17)).count();\n+\n+    // Lint\n+    let _ = map.iter().map(|(key, _value)| key * 9).count();\n+    let _ = map.iter().map(|(_key, value)| value * 17).count();\n+\n+    let map: BTreeMap<u32, u32> = BTreeMap::new();\n+\n+    let _ = map.iter().map(|(key, _)| key).collect::<Vec<_>>();\n+    let _ = map.iter().map(|(_, value)| value).collect::<Vec<_>>();\n+    let _ = map.iter().map(|(_, v)| v + 2).collect::<Vec<_>>();\n+\n+    let _ = map.clone().into_iter().map(|(key, _)| key).collect::<Vec<_>>();\n+    let _ = map.clone().into_iter().map(|(key, _)| key + 2).collect::<Vec<_>>();\n+\n+    let _ = map.clone().into_iter().map(|(_, val)| val).collect::<Vec<_>>();\n+    let _ = map.clone().into_iter().map(|(_, val)| val + 2).collect::<Vec<_>>();\n+\n+    let _ = map.clone().iter().map(|(_, val)| val).collect::<Vec<_>>();\n+    let _ = map.iter().map(|(key, _)| key).filter(|x| *x % 2 == 0).count();\n+\n+    // Don't lint\n+    let _ = map.iter().filter(|(_, val)| *val % 2 == 0).map(|(key, _)| key).count();\n+    let _ = map.iter().map(get_key).collect::<Vec<_>>();\n+\n+    // Linting the following could be an improvement to the lint\n+    // map.iter().filter_map(|(_, val)| (val % 2 == 0).then(val * 17)).count();\n+\n+    // Lint\n+    let _ = map.iter().map(|(key, _value)| key * 9).count();\n+    let _ = map.iter().map(|(_key, value)| value * 17).count();\n+}"}, {"sha": "9b9b04c97d81ef40e76d8fa4d9bce42639d1400f", "filename": "src/tools/clippy/tests/ui/iter_kv_map.stderr", "status": "added", "additions": 136, "deletions": 0, "changes": 136, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_kv_map.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_kv_map.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_kv_map.stderr?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -0,0 +1,136 @@\n+error: iterating on a map's keys\n+  --> $DIR/iter_kv_map.rs:15:13\n+   |\n+LL |     let _ = map.iter().map(|(key, _)| key).collect::<Vec<_>>();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `map.keys()`\n+   |\n+   = note: `-D clippy::iter-kv-map` implied by `-D warnings`\n+\n+error: iterating on a map's values\n+  --> $DIR/iter_kv_map.rs:16:13\n+   |\n+LL |     let _ = map.iter().map(|(_, value)| value).collect::<Vec<_>>();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `map.values()`\n+\n+error: iterating on a map's values\n+  --> $DIR/iter_kv_map.rs:17:13\n+   |\n+LL |     let _ = map.iter().map(|(_, v)| v + 2).collect::<Vec<_>>();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `map.values().map(|v| v + 2)`\n+\n+error: iterating on a map's keys\n+  --> $DIR/iter_kv_map.rs:19:13\n+   |\n+LL |     let _ = map.clone().into_iter().map(|(key, _)| key).collect::<Vec<_>>();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `map.clone().into_keys()`\n+\n+error: iterating on a map's keys\n+  --> $DIR/iter_kv_map.rs:20:13\n+   |\n+LL |     let _ = map.clone().into_iter().map(|(key, _)| key + 2).collect::<Vec<_>>();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `map.clone().into_keys().map(|key| key + 2)`\n+\n+error: iterating on a map's values\n+  --> $DIR/iter_kv_map.rs:22:13\n+   |\n+LL |     let _ = map.clone().into_iter().map(|(_, val)| val).collect::<Vec<_>>();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `map.clone().into_values()`\n+\n+error: iterating on a map's values\n+  --> $DIR/iter_kv_map.rs:23:13\n+   |\n+LL |     let _ = map.clone().into_iter().map(|(_, val)| val + 2).collect::<Vec<_>>();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `map.clone().into_values().map(|val| val + 2)`\n+\n+error: iterating on a map's values\n+  --> $DIR/iter_kv_map.rs:25:13\n+   |\n+LL |     let _ = map.clone().iter().map(|(_, val)| val).collect::<Vec<_>>();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `map.clone().values()`\n+\n+error: iterating on a map's keys\n+  --> $DIR/iter_kv_map.rs:26:13\n+   |\n+LL |     let _ = map.iter().map(|(key, _)| key).filter(|x| *x % 2 == 0).count();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `map.keys()`\n+\n+error: iterating on a map's keys\n+  --> $DIR/iter_kv_map.rs:36:13\n+   |\n+LL |     let _ = map.iter().map(|(key, _value)| key * 9).count();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `map.keys().map(|key| key * 9)`\n+\n+error: iterating on a map's values\n+  --> $DIR/iter_kv_map.rs:37:13\n+   |\n+LL |     let _ = map.iter().map(|(_key, value)| value * 17).count();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `map.values().map(|value| value * 17)`\n+\n+error: iterating on a map's keys\n+  --> $DIR/iter_kv_map.rs:41:13\n+   |\n+LL |     let _ = map.iter().map(|(key, _)| key).collect::<Vec<_>>();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `map.keys()`\n+\n+error: iterating on a map's values\n+  --> $DIR/iter_kv_map.rs:42:13\n+   |\n+LL |     let _ = map.iter().map(|(_, value)| value).collect::<Vec<_>>();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `map.values()`\n+\n+error: iterating on a map's values\n+  --> $DIR/iter_kv_map.rs:43:13\n+   |\n+LL |     let _ = map.iter().map(|(_, v)| v + 2).collect::<Vec<_>>();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `map.values().map(|v| v + 2)`\n+\n+error: iterating on a map's keys\n+  --> $DIR/iter_kv_map.rs:45:13\n+   |\n+LL |     let _ = map.clone().into_iter().map(|(key, _)| key).collect::<Vec<_>>();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `map.clone().into_keys()`\n+\n+error: iterating on a map's keys\n+  --> $DIR/iter_kv_map.rs:46:13\n+   |\n+LL |     let _ = map.clone().into_iter().map(|(key, _)| key + 2).collect::<Vec<_>>();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `map.clone().into_keys().map(|key| key + 2)`\n+\n+error: iterating on a map's values\n+  --> $DIR/iter_kv_map.rs:48:13\n+   |\n+LL |     let _ = map.clone().into_iter().map(|(_, val)| val).collect::<Vec<_>>();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `map.clone().into_values()`\n+\n+error: iterating on a map's values\n+  --> $DIR/iter_kv_map.rs:49:13\n+   |\n+LL |     let _ = map.clone().into_iter().map(|(_, val)| val + 2).collect::<Vec<_>>();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `map.clone().into_values().map(|val| val + 2)`\n+\n+error: iterating on a map's values\n+  --> $DIR/iter_kv_map.rs:51:13\n+   |\n+LL |     let _ = map.clone().iter().map(|(_, val)| val).collect::<Vec<_>>();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `map.clone().values()`\n+\n+error: iterating on a map's keys\n+  --> $DIR/iter_kv_map.rs:52:13\n+   |\n+LL |     let _ = map.iter().map(|(key, _)| key).filter(|x| *x % 2 == 0).count();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `map.keys()`\n+\n+error: iterating on a map's keys\n+  --> $DIR/iter_kv_map.rs:62:13\n+   |\n+LL |     let _ = map.iter().map(|(key, _value)| key * 9).count();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `map.keys().map(|key| key * 9)`\n+\n+error: iterating on a map's values\n+  --> $DIR/iter_kv_map.rs:63:13\n+   |\n+LL |     let _ = map.iter().map(|(_key, value)| value * 17).count();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `map.values().map(|value| value * 17)`\n+\n+error: aborting due to 22 previous errors\n+"}, {"sha": "3b96f09d7b1d6efd49a8baef666e6b4c987515d2", "filename": "src/tools/clippy/tests/ui/large_enum_variant.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Flarge_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Flarge_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Flarge_enum_variant.rs?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -101,12 +101,12 @@ struct Struct2 {\n #[derive(Copy, Clone)]\n enum CopyableLargeEnum {\n     A(bool),\n-    B([u128; 4000]),\n+    B([u64; 8000]),\n }\n \n enum ManuallyCopyLargeEnum {\n     A(bool),\n-    B([u128; 4000]),\n+    B([u64; 8000]),\n }\n \n impl Clone for ManuallyCopyLargeEnum {"}, {"sha": "709972b4a6e49e397acdb442e34cbb6d139e4756", "filename": "src/tools/clippy/tests/ui/large_enum_variant.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Flarge_enum_variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Flarge_enum_variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Flarge_enum_variant.stderr?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -167,8 +167,8 @@ error: large size difference between variants\n LL | / enum CopyableLargeEnum {\n LL | |     A(bool),\n    | |     ------- the second-largest variant contains at least 1 bytes\n-LL | |     B([u128; 4000]),\n-   | |     --------------- the largest variant contains at least 64000 bytes\n+LL | |     B([u64; 8000]),\n+   | |     -------------- the largest variant contains at least 64000 bytes\n LL | | }\n    | |_^ the entire enum is at least 64008 bytes\n    |\n@@ -180,17 +180,17 @@ LL | enum CopyableLargeEnum {\n help: consider boxing the large fields to reduce the total size of the enum\n   --> $DIR/large_enum_variant.rs:104:5\n    |\n-LL |     B([u128; 4000]),\n-   |     ^^^^^^^^^^^^^^^\n+LL |     B([u64; 8000]),\n+   |     ^^^^^^^^^^^^^^\n \n error: large size difference between variants\n   --> $DIR/large_enum_variant.rs:107:1\n    |\n LL | / enum ManuallyCopyLargeEnum {\n LL | |     A(bool),\n    | |     ------- the second-largest variant contains at least 1 bytes\n-LL | |     B([u128; 4000]),\n-   | |     --------------- the largest variant contains at least 64000 bytes\n+LL | |     B([u64; 8000]),\n+   | |     -------------- the largest variant contains at least 64000 bytes\n LL | | }\n    | |_^ the entire enum is at least 64008 bytes\n    |\n@@ -202,8 +202,8 @@ LL | enum ManuallyCopyLargeEnum {\n help: consider boxing the large fields to reduce the total size of the enum\n   --> $DIR/large_enum_variant.rs:109:5\n    |\n-LL |     B([u128; 4000]),\n-   |     ^^^^^^^^^^^^^^^\n+LL |     B([u64; 8000]),\n+   |     ^^^^^^^^^^^^^^\n \n error: large size difference between variants\n   --> $DIR/large_enum_variant.rs:120:1"}, {"sha": "6790765f803e06e57620f444379596b2d532aad9", "filename": "src/tools/clippy/tests/ui/large_stack_arrays.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Flarge_stack_arrays.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Flarge_stack_arrays.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Flarge_stack_arrays.rs?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -12,6 +12,12 @@ enum E {\n     T(u32),\n }\n \n+pub static DOESNOTLINT: [u8; 512_001] = [0; 512_001];\n+pub static DOESNOTLINT2: [u8; 512_001] = {\n+    let x = 0;\n+    [x; 512_001]\n+};\n+\n fn main() {\n     let bad = (\n         [0u32; 20_000_000],"}, {"sha": "0d91b65b428407045b0141216b734316aefa8559", "filename": "src/tools/clippy/tests/ui/large_stack_arrays.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Flarge_stack_arrays.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Flarge_stack_arrays.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Flarge_stack_arrays.stderr?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -1,5 +1,5 @@\n error: allocating a local array larger than 512000 bytes\n-  --> $DIR/large_stack_arrays.rs:17:9\n+  --> $DIR/large_stack_arrays.rs:23:9\n    |\n LL |         [0u32; 20_000_000],\n    |         ^^^^^^^^^^^^^^^^^^\n@@ -8,23 +8,23 @@ LL |         [0u32; 20_000_000],\n    = help: consider allocating on the heap with `vec![0u32; 20_000_000].into_boxed_slice()`\n \n error: allocating a local array larger than 512000 bytes\n-  --> $DIR/large_stack_arrays.rs:18:9\n+  --> $DIR/large_stack_arrays.rs:24:9\n    |\n LL |         [S { data: [0; 32] }; 5000],\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider allocating on the heap with `vec![S { data: [0; 32] }; 5000].into_boxed_slice()`\n \n error: allocating a local array larger than 512000 bytes\n-  --> $DIR/large_stack_arrays.rs:19:9\n+  --> $DIR/large_stack_arrays.rs:25:9\n    |\n LL |         [Some(\"\"); 20_000_000],\n    |         ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider allocating on the heap with `vec![Some(\"\"); 20_000_000].into_boxed_slice()`\n \n error: allocating a local array larger than 512000 bytes\n-  --> $DIR/large_stack_arrays.rs:20:9\n+  --> $DIR/large_stack_arrays.rs:26:9\n    |\n LL |         [E::T(0); 5000],\n    |         ^^^^^^^^^^^^^^^"}, {"sha": "78397c2af346b0464fa0572caa11eb5fb0a406da", "filename": "src/tools/clippy/tests/ui/len_without_is_empty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Flen_without_is_empty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Flen_without_is_empty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Flen_without_is_empty.rs?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -274,7 +274,7 @@ impl AsyncLen {\n     }\n \n     pub async fn len(&self) -> usize {\n-        if self.async_task().await { 0 } else { 1 }\n+        usize::from(!self.async_task().await)\n     }\n \n     pub async fn is_empty(&self) -> bool {"}, {"sha": "e9b4367ca653cd5dcb95dd59108c76c26d37c87c", "filename": "src/tools/clippy/tests/ui/nonminimal_bool.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fnonminimal_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fnonminimal_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fnonminimal_bool.rs?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -57,3 +57,9 @@ fn check_expect() {\n     #[expect(clippy::nonminimal_bool)]\n     let _ = !!a;\n }\n+\n+fn issue9428() {\n+    if matches!(true, true) && true {\n+        println!(\"foo\");\n+    }\n+}"}, {"sha": "91b5805aa97ab8f6b4c243c81bc840b1a4b3bb22", "filename": "src/tools/clippy/tests/ui/nonminimal_bool.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fnonminimal_bool.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fnonminimal_bool.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fnonminimal_bool.stderr?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -107,5 +107,11 @@ LL |     let _ = !(a == b || c == d);\n LL |     let _ = a != b && c != d;\n    |             ~~~~~~~~~~~~~~~~\n \n-error: aborting due to 12 previous errors\n+error: this boolean expression can be simplified\n+  --> $DIR/nonminimal_bool.rs:62:8\n+   |\n+LL |     if matches!(true, true) && true {\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `matches!(true, true)`\n+\n+error: aborting due to 13 previous errors\n "}, {"sha": "4170e109820457a5d4c667cc00941e9be3fc1fc0", "filename": "src/tools/clippy/tests/ui/positional_named_format_parameters.fixed", "status": "removed", "additions": 0, "deletions": 56, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/9062b780b32d2eab060b4432863e085d9504ca5c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fpositional_named_format_parameters.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/9062b780b32d2eab060b4432863e085d9504ca5c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fpositional_named_format_parameters.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fpositional_named_format_parameters.fixed?ref=9062b780b32d2eab060b4432863e085d9504ca5c", "patch": "@@ -1,56 +0,0 @@\n-// run-rustfix\n-#![allow(unused_must_use)]\n-#![allow(named_arguments_used_positionally)] // Unstable at time of writing.\n-#![warn(clippy::positional_named_format_parameters)]\n-\n-use std::io::Write;\n-\n-fn main() {\n-    let mut v = Vec::new();\n-    let hello = \"Hello\";\n-\n-    println!(\"{hello:.foo$}\", foo = 2);\n-    writeln!(v, \"{hello:.foo$}\", foo = 2);\n-\n-    // Warnings\n-    println!(\"{zero} {one:?}\", zero = 0, one = 1);\n-    println!(\"This is a test {zero} {one:?}\", zero = 0, one = 1);\n-    println!(\"Hello {one} is {two:.zero$}\", zero = 5, one = hello, two = 0.01);\n-    println!(\"Hello {one:zero$}!\", zero = 5, one = 1);\n-    println!(\"Hello {zero:one$}!\", zero = 4, one = 1);\n-    println!(\"Hello {zero:0one$}!\", zero = 4, one = 1);\n-    println!(\"Hello is {one:.zero$}\", zero = 5, one = 0.01);\n-    println!(\"Hello is {one:<6.zero$}\", zero = 5, one = 0.01);\n-    println!(\"{zero}, `{two:>8.one$}` has 3\", zero = hello, one = 3, two = hello);\n-    println!(\"Hello {one} is {two:.zero$}\", zero = 5, one = hello, two = 0.01);\n-    println!(\"Hello {world} {world}!\", world = 5);\n-\n-    writeln!(v, \"{zero} {one:?}\", zero = 0, one = 1);\n-    writeln!(v, \"This is a test {zero} {one:?}\", zero = 0, one = 1);\n-    writeln!(v, \"Hello {one} is {two:.zero$}\", zero = 5, one = hello, two = 0.01);\n-    writeln!(v, \"Hello {one:zero$}!\", zero = 4, one = 1);\n-    writeln!(v, \"Hello {zero:one$}!\", zero = 4, one = 1);\n-    writeln!(v, \"Hello {zero:0one$}!\", zero = 4, one = 1);\n-    writeln!(v, \"Hello is {one:.zero$}\", zero = 3, one = 0.01);\n-    writeln!(v, \"Hello is {one:<6.zero$}\", zero = 2, one = 0.01);\n-    writeln!(v, \"{zero}, `{two:>8.one$}` has 3\", zero = hello, one = 3, two = hello);\n-    writeln!(v, \"Hello {one} is {two:.zero$}\", zero = 1, one = hello, two = 0.01);\n-    writeln!(v, \"Hello {world} {world}!\", world = 0);\n-\n-    // Tests from other files\n-    println!(\"{w:w$}\", w = 1);\n-    println!(\"{p:.p$}\", p = 1);\n-    println!(\"{v}\", v = 1);\n-    println!(\"{v:v$}\", v = 1);\n-    println!(\"{v:v$}\", v = 1);\n-    println!(\"{v:v$.v$}\", v = 1);\n-    println!(\"{v:v$.v$}\", v = 1);\n-    println!(\"{v:v$.v$}\", v = 1);\n-    println!(\"{v:v$.v$}\", v = 1);\n-    println!(\"{v:v$.v$}\", v = 1);\n-    println!(\"{v:v$.v$}\", v = 1);\n-    println!(\"{v:v$.v$}\", v = 1);\n-    println!(\"{w:w$}\", w = 1);\n-    println!(\"{p:.p$}\", p = 1);\n-    println!(\"{:p$.w$}\", 1, w = 1, p = 1);\n-}"}, {"sha": "553d8494ecc04303778cb9aa184faef5178e996a", "filename": "src/tools/clippy/tests/ui/positional_named_format_parameters.rs", "status": "removed", "additions": 0, "deletions": 56, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/9062b780b32d2eab060b4432863e085d9504ca5c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fpositional_named_format_parameters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9062b780b32d2eab060b4432863e085d9504ca5c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fpositional_named_format_parameters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fpositional_named_format_parameters.rs?ref=9062b780b32d2eab060b4432863e085d9504ca5c", "patch": "@@ -1,56 +0,0 @@\n-// run-rustfix\n-#![allow(unused_must_use)]\n-#![allow(named_arguments_used_positionally)] // Unstable at time of writing.\n-#![warn(clippy::positional_named_format_parameters)]\n-\n-use std::io::Write;\n-\n-fn main() {\n-    let mut v = Vec::new();\n-    let hello = \"Hello\";\n-\n-    println!(\"{hello:.foo$}\", foo = 2);\n-    writeln!(v, \"{hello:.foo$}\", foo = 2);\n-\n-    // Warnings\n-    println!(\"{} {1:?}\", zero = 0, one = 1);\n-    println!(\"This is a test { } {000001:?}\", zero = 0, one = 1);\n-    println!(\"Hello {1} is {2:.0$}\", zero = 5, one = hello, two = 0.01);\n-    println!(\"Hello {1:0$}!\", zero = 5, one = 1);\n-    println!(\"Hello {0:1$}!\", zero = 4, one = 1);\n-    println!(\"Hello {0:01$}!\", zero = 4, one = 1);\n-    println!(\"Hello is {1:.*}\", zero = 5, one = 0.01);\n-    println!(\"Hello is {:<6.*}\", zero = 5, one = 0.01);\n-    println!(\"{}, `{two:>8.*}` has 3\", zero = hello, one = 3, two = hello);\n-    println!(\"Hello {1} is {2:.0$}\", zero = 5, one = hello, two = 0.01);\n-    println!(\"Hello {world} {}!\", world = 5);\n-\n-    writeln!(v, \"{} {1:?}\", zero = 0, one = 1);\n-    writeln!(v, \"This is a test { } {000001:?}\", zero = 0, one = 1);\n-    writeln!(v, \"Hello {1} is {2:.0$}\", zero = 5, one = hello, two = 0.01);\n-    writeln!(v, \"Hello {1:0$}!\", zero = 4, one = 1);\n-    writeln!(v, \"Hello {0:1$}!\", zero = 4, one = 1);\n-    writeln!(v, \"Hello {0:01$}!\", zero = 4, one = 1);\n-    writeln!(v, \"Hello is {1:.*}\", zero = 3, one = 0.01);\n-    writeln!(v, \"Hello is {:<6.*}\", zero = 2, one = 0.01);\n-    writeln!(v, \"{}, `{two:>8.*}` has 3\", zero = hello, one = 3, two = hello);\n-    writeln!(v, \"Hello {1} is {2:.0$}\", zero = 1, one = hello, two = 0.01);\n-    writeln!(v, \"Hello {world} {}!\", world = 0);\n-\n-    // Tests from other files\n-    println!(\"{:w$}\", w = 1);\n-    println!(\"{:.p$}\", p = 1);\n-    println!(\"{}\", v = 1);\n-    println!(\"{:0$}\", v = 1);\n-    println!(\"{0:0$}\", v = 1);\n-    println!(\"{:0$.0$}\", v = 1);\n-    println!(\"{0:0$.0$}\", v = 1);\n-    println!(\"{0:0$.v$}\", v = 1);\n-    println!(\"{0:v$.0$}\", v = 1);\n-    println!(\"{v:0$.0$}\", v = 1);\n-    println!(\"{v:v$.0$}\", v = 1);\n-    println!(\"{v:0$.v$}\", v = 1);\n-    println!(\"{:w$}\", w = 1);\n-    println!(\"{:.p$}\", p = 1);\n-    println!(\"{:p$.w$}\", 1, w = 1, p = 1);\n-}"}, {"sha": "48ddb6d67ad246084bdbb951887d8759969c297d", "filename": "src/tools/clippy/tests/ui/positional_named_format_parameters.stderr", "status": "removed", "additions": 0, "deletions": 418, "changes": 418, "blob_url": "https://github.com/rust-lang/rust/blob/9062b780b32d2eab060b4432863e085d9504ca5c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fpositional_named_format_parameters.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9062b780b32d2eab060b4432863e085d9504ca5c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fpositional_named_format_parameters.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fpositional_named_format_parameters.stderr?ref=9062b780b32d2eab060b4432863e085d9504ca5c", "patch": "@@ -1,418 +0,0 @@\n-error: named parameter zero is used as a positional parameter\n-  --> $DIR/positional_named_format_parameters.rs:16:16\n-   |\n-LL |     println!(\"{} {1:?}\", zero = 0, one = 1);\n-   |                ^ help: replace it with: `zero`\n-   |\n-   = note: `-D clippy::positional-named-format-parameters` implied by `-D warnings`\n-\n-error: named parameter one is used as a positional parameter\n-  --> $DIR/positional_named_format_parameters.rs:16:19\n-   |\n-LL |     println!(\"{} {1:?}\", zero = 0, one = 1);\n-   |                   ^ help: replace it with: `one`\n-\n-error: named parameter zero is used as a positional parameter\n-  --> $DIR/positional_named_format_parameters.rs:17:31\n-   |\n-LL |     println!(\"This is a test { } {000001:?}\", zero = 0, one = 1);\n-   |                               ^ help: replace it with: `zero`\n-\n-error: named parameter one is used as a positional parameter\n-  --> $DIR/positional_named_format_parameters.rs:17:35\n-   |\n-LL |     println!(\"This is a test { } {000001:?}\", zero = 0, one = 1);\n-   |                                   ^^^^^^ help: replace it with: `one`\n-\n-error: named parameter zero is used as a positional parameter\n-  --> $DIR/positional_named_format_parameters.rs:18:32\n-   |\n-LL |     println!(\"Hello {1} is {2:.0$}\", zero = 5, one = hello, two = 0.01);\n-   |                                ^ help: replace it with: `zero`\n-\n-error: named parameter one is used as a positional parameter\n-  --> $DIR/positional_named_format_parameters.rs:18:22\n-   |\n-LL |     println!(\"Hello {1} is {2:.0$}\", zero = 5, one = hello, two = 0.01);\n-   |                      ^ help: replace it with: `one`\n-\n-error: named parameter two is used as a positional parameter\n-  --> $DIR/positional_named_format_parameters.rs:18:29\n-   |\n-LL |     println!(\"Hello {1} is {2:.0$}\", zero = 5, one = hello, two = 0.01);\n-   |                             ^ help: replace it with: `two`\n-\n-error: named parameter zero is used as a positional parameter\n-  --> $DIR/positional_named_format_parameters.rs:19:24\n-   |\n-LL |     println!(\"Hello {1:0$}!\", zero = 5, one = 1);\n-   |                        ^ help: replace it with: `zero`\n-\n-error: named parameter one is used as a positional parameter\n-  --> $DIR/positional_named_format_parameters.rs:19:22\n-   |\n-LL |     println!(\"Hello {1:0$}!\", zero = 5, one = 1);\n-   |                      ^ help: replace it with: `one`\n-\n-error: named parameter zero is used as a positional parameter\n-  --> $DIR/positional_named_format_parameters.rs:20:22\n-   |\n-LL |     println!(\"Hello {0:1$}!\", zero = 4, one = 1);\n-   |                      ^ help: replace it with: `zero`\n-\n-error: named parameter one is used as a positional parameter\n-  --> $DIR/positional_named_format_parameters.rs:20:24\n-   |\n-LL |     println!(\"Hello {0:1$}!\", zero = 4, one = 1);\n-   |                        ^ help: replace it with: `one`\n-\n-error: named parameter zero is used as a positional parameter\n-  --> $DIR/positional_named_format_parameters.rs:21:22\n-   |\n-LL |     println!(\"Hello {0:01$}!\", zero = 4, one = 1);\n-   |                      ^ help: replace it with: `zero`\n-\n-error: named parameter one is used as a positional parameter\n-  --> $DIR/positional_named_format_parameters.rs:21:25\n-   |\n-LL |     println!(\"Hello {0:01$}!\", zero = 4, one = 1);\n-   |                         ^ help: replace it with: `one`\n-\n-error: named parameter zero is used as a positional parameter\n-  --> $DIR/positional_named_format_parameters.rs:22:28\n-   |\n-LL |     println!(\"Hello is {1:.*}\", zero = 5, one = 0.01);\n-   |                            ^ help: replace it with: `zero$`\n-\n-error: named parameter one is used as a positional parameter\n-  --> $DIR/positional_named_format_parameters.rs:22:25\n-   |\n-LL |     println!(\"Hello is {1:.*}\", zero = 5, one = 0.01);\n-   |                         ^ help: replace it with: `one`\n-\n-error: named parameter zero is used as a positional parameter\n-  --> $DIR/positional_named_format_parameters.rs:23:29\n-   |\n-LL |     println!(\"Hello is {:<6.*}\", zero = 5, one = 0.01);\n-   |                             ^ help: replace it with: `zero$`\n-\n-error: named parameter one is used as a positional parameter\n-  --> $DIR/positional_named_format_parameters.rs:23:25\n-   |\n-LL |     println!(\"Hello is {:<6.*}\", zero = 5, one = 0.01);\n-   |                         ^ help: replace it with: `one`\n-\n-error: named parameter zero is used as a positional parameter\n-  --> $DIR/positional_named_format_parameters.rs:24:16\n-   |\n-LL |     println!(\"{}, `{two:>8.*}` has 3\", zero = hello, one = 3, two = hello);\n-   |                ^ help: replace it with: `zero`\n-\n-error: named parameter one is used as a positional parameter\n-  --> $DIR/positional_named_format_parameters.rs:24:28\n-   |\n-LL |     println!(\"{}, `{two:>8.*}` has 3\", zero = hello, one = 3, two = hello);\n-   |                            ^ help: replace it with: `one$`\n-\n-error: named parameter zero is used as a positional parameter\n-  --> $DIR/positional_named_format_parameters.rs:25:32\n-   |\n-LL |     println!(\"Hello {1} is {2:.0$}\", zero = 5, one = hello, two = 0.01);\n-   |                                ^ help: replace it with: `zero`\n-\n-error: named parameter one is used as a positional parameter\n-  --> $DIR/positional_named_format_parameters.rs:25:22\n-   |\n-LL |     println!(\"Hello {1} is {2:.0$}\", zero = 5, one = hello, two = 0.01);\n-   |                      ^ help: replace it with: `one`\n-\n-error: named parameter two is used as a positional parameter\n-  --> $DIR/positional_named_format_parameters.rs:25:29\n-   |\n-LL |     println!(\"Hello {1} is {2:.0$}\", zero = 5, one = hello, two = 0.01);\n-   |                             ^ help: replace it with: `two`\n-\n-error: named parameter world is used as a positional parameter\n-  --> $DIR/positional_named_format_parameters.rs:26:30\n-   |\n-LL |     println!(\"Hello {world} {}!\", world = 5);\n-   |                              ^ help: replace it with: `world`\n-\n-error: named parameter zero is used as a positional parameter\n-  --> $DIR/positional_named_format_parameters.rs:28:19\n-   |\n-LL |     writeln!(v, \"{} {1:?}\", zero = 0, one = 1);\n-   |                   ^ help: replace it with: `zero`\n-\n-error: named parameter one is used as a positional parameter\n-  --> $DIR/positional_named_format_parameters.rs:28:22\n-   |\n-LL |     writeln!(v, \"{} {1:?}\", zero = 0, one = 1);\n-   |                      ^ help: replace it with: `one`\n-\n-error: named parameter zero is used as a positional parameter\n-  --> $DIR/positional_named_format_parameters.rs:29:34\n-   |\n-LL |     writeln!(v, \"This is a test { } {000001:?}\", zero = 0, one = 1);\n-   |                                  ^ help: replace it with: `zero`\n-\n-error: named parameter one is used as a positional parameter\n-  --> $DIR/positional_named_format_parameters.rs:29:38\n-   |\n-LL |     writeln!(v, \"This is a test { } {000001:?}\", zero = 0, one = 1);\n-   |                                      ^^^^^^ help: replace it with: `one`\n-\n-error: named parameter zero is used as a positional parameter\n-  --> $DIR/positional_named_format_parameters.rs:30:35\n-   |\n-LL |     writeln!(v, \"Hello {1} is {2:.0$}\", zero = 5, one = hello, two = 0.01);\n-   |                                   ^ help: replace it with: `zero`\n-\n-error: named parameter one is used as a positional parameter\n-  --> $DIR/positional_named_format_parameters.rs:30:25\n-   |\n-LL |     writeln!(v, \"Hello {1} is {2:.0$}\", zero = 5, one = hello, two = 0.01);\n-   |                         ^ help: replace it with: `one`\n-\n-error: named parameter two is used as a positional parameter\n-  --> $DIR/positional_named_format_parameters.rs:30:32\n-   |\n-LL |     writeln!(v, \"Hello {1} is {2:.0$}\", zero = 5, one = hello, two = 0.01);\n-   |                                ^ help: replace it with: `two`\n-\n-error: named parameter zero is used as a positional parameter\n-  --> $DIR/positional_named_format_parameters.rs:31:27\n-   |\n-LL |     writeln!(v, \"Hello {1:0$}!\", zero = 4, one = 1);\n-   |                           ^ help: replace it with: `zero`\n-\n-error: named parameter one is used as a positional parameter\n-  --> $DIR/positional_named_format_parameters.rs:31:25\n-   |\n-LL |     writeln!(v, \"Hello {1:0$}!\", zero = 4, one = 1);\n-   |                         ^ help: replace it with: `one`\n-\n-error: named parameter zero is used as a positional parameter\n-  --> $DIR/positional_named_format_parameters.rs:32:25\n-   |\n-LL |     writeln!(v, \"Hello {0:1$}!\", zero = 4, one = 1);\n-   |                         ^ help: replace it with: `zero`\n-\n-error: named parameter one is used as a positional parameter\n-  --> $DIR/positional_named_format_parameters.rs:32:27\n-   |\n-LL |     writeln!(v, \"Hello {0:1$}!\", zero = 4, one = 1);\n-   |                           ^ help: replace it with: `one`\n-\n-error: named parameter zero is used as a positional parameter\n-  --> $DIR/positional_named_format_parameters.rs:33:25\n-   |\n-LL |     writeln!(v, \"Hello {0:01$}!\", zero = 4, one = 1);\n-   |                         ^ help: replace it with: `zero`\n-\n-error: named parameter one is used as a positional parameter\n-  --> $DIR/positional_named_format_parameters.rs:33:28\n-   |\n-LL |     writeln!(v, \"Hello {0:01$}!\", zero = 4, one = 1);\n-   |                            ^ help: replace it with: `one`\n-\n-error: named parameter zero is used as a positional parameter\n-  --> $DIR/positional_named_format_parameters.rs:34:31\n-   |\n-LL |     writeln!(v, \"Hello is {1:.*}\", zero = 3, one = 0.01);\n-   |                               ^ help: replace it with: `zero$`\n-\n-error: named parameter one is used as a positional parameter\n-  --> $DIR/positional_named_format_parameters.rs:34:28\n-   |\n-LL |     writeln!(v, \"Hello is {1:.*}\", zero = 3, one = 0.01);\n-   |                            ^ help: replace it with: `one`\n-\n-error: named parameter zero is used as a positional parameter\n-  --> $DIR/positional_named_format_parameters.rs:35:32\n-   |\n-LL |     writeln!(v, \"Hello is {:<6.*}\", zero = 2, one = 0.01);\n-   |                                ^ help: replace it with: `zero$`\n-\n-error: named parameter one is used as a positional parameter\n-  --> $DIR/positional_named_format_parameters.rs:35:28\n-   |\n-LL |     writeln!(v, \"Hello is {:<6.*}\", zero = 2, one = 0.01);\n-   |                            ^ help: replace it with: `one`\n-\n-error: named parameter zero is used as a positional parameter\n-  --> $DIR/positional_named_format_parameters.rs:36:19\n-   |\n-LL |     writeln!(v, \"{}, `{two:>8.*}` has 3\", zero = hello, one = 3, two = hello);\n-   |                   ^ help: replace it with: `zero`\n-\n-error: named parameter one is used as a positional parameter\n-  --> $DIR/positional_named_format_parameters.rs:36:31\n-   |\n-LL |     writeln!(v, \"{}, `{two:>8.*}` has 3\", zero = hello, one = 3, two = hello);\n-   |                               ^ help: replace it with: `one$`\n-\n-error: named parameter zero is used as a positional parameter\n-  --> $DIR/positional_named_format_parameters.rs:37:35\n-   |\n-LL |     writeln!(v, \"Hello {1} is {2:.0$}\", zero = 1, one = hello, two = 0.01);\n-   |                                   ^ help: replace it with: `zero`\n-\n-error: named parameter one is used as a positional parameter\n-  --> $DIR/positional_named_format_parameters.rs:37:25\n-   |\n-LL |     writeln!(v, \"Hello {1} is {2:.0$}\", zero = 1, one = hello, two = 0.01);\n-   |                         ^ help: replace it with: `one`\n-\n-error: named parameter two is used as a positional parameter\n-  --> $DIR/positional_named_format_parameters.rs:37:32\n-   |\n-LL |     writeln!(v, \"Hello {1} is {2:.0$}\", zero = 1, one = hello, two = 0.01);\n-   |                                ^ help: replace it with: `two`\n-\n-error: named parameter world is used as a positional parameter\n-  --> $DIR/positional_named_format_parameters.rs:38:33\n-   |\n-LL |     writeln!(v, \"Hello {world} {}!\", world = 0);\n-   |                                 ^ help: replace it with: `world`\n-\n-error: named parameter w is used as a positional parameter\n-  --> $DIR/positional_named_format_parameters.rs:41:16\n-   |\n-LL |     println!(\"{:w$}\", w = 1);\n-   |                ^ help: replace it with: `w`\n-\n-error: named parameter p is used as a positional parameter\n-  --> $DIR/positional_named_format_parameters.rs:42:16\n-   |\n-LL |     println!(\"{:.p$}\", p = 1);\n-   |                ^ help: replace it with: `p`\n-\n-error: named parameter v is used as a positional parameter\n-  --> $DIR/positional_named_format_parameters.rs:43:16\n-   |\n-LL |     println!(\"{}\", v = 1);\n-   |                ^ help: replace it with: `v`\n-\n-error: named parameter v is used as a positional parameter\n-  --> $DIR/positional_named_format_parameters.rs:44:16\n-   |\n-LL |     println!(\"{:0$}\", v = 1);\n-   |                ^ help: replace it with: `v`\n-\n-error: named parameter v is used as a positional parameter\n-  --> $DIR/positional_named_format_parameters.rs:44:17\n-   |\n-LL |     println!(\"{:0$}\", v = 1);\n-   |                 ^ help: replace it with: `v`\n-\n-error: named parameter v is used as a positional parameter\n-  --> $DIR/positional_named_format_parameters.rs:45:16\n-   |\n-LL |     println!(\"{0:0$}\", v = 1);\n-   |                ^ help: replace it with: `v`\n-\n-error: named parameter v is used as a positional parameter\n-  --> $DIR/positional_named_format_parameters.rs:45:18\n-   |\n-LL |     println!(\"{0:0$}\", v = 1);\n-   |                  ^ help: replace it with: `v`\n-\n-error: named parameter v is used as a positional parameter\n-  --> $DIR/positional_named_format_parameters.rs:46:16\n-   |\n-LL |     println!(\"{:0$.0$}\", v = 1);\n-   |                ^ help: replace it with: `v`\n-\n-error: named parameter v is used as a positional parameter\n-  --> $DIR/positional_named_format_parameters.rs:46:20\n-   |\n-LL |     println!(\"{:0$.0$}\", v = 1);\n-   |                    ^ help: replace it with: `v`\n-\n-error: named parameter v is used as a positional parameter\n-  --> $DIR/positional_named_format_parameters.rs:46:17\n-   |\n-LL |     println!(\"{:0$.0$}\", v = 1);\n-   |                 ^ help: replace it with: `v`\n-\n-error: named parameter v is used as a positional parameter\n-  --> $DIR/positional_named_format_parameters.rs:47:16\n-   |\n-LL |     println!(\"{0:0$.0$}\", v = 1);\n-   |                ^ help: replace it with: `v`\n-\n-error: named parameter v is used as a positional parameter\n-  --> $DIR/positional_named_format_parameters.rs:47:21\n-   |\n-LL |     println!(\"{0:0$.0$}\", v = 1);\n-   |                     ^ help: replace it with: `v`\n-\n-error: named parameter v is used as a positional parameter\n-  --> $DIR/positional_named_format_parameters.rs:47:18\n-   |\n-LL |     println!(\"{0:0$.0$}\", v = 1);\n-   |                  ^ help: replace it with: `v`\n-\n-error: named parameter v is used as a positional parameter\n-  --> $DIR/positional_named_format_parameters.rs:48:16\n-   |\n-LL |     println!(\"{0:0$.v$}\", v = 1);\n-   |                ^ help: replace it with: `v`\n-\n-error: named parameter v is used as a positional parameter\n-  --> $DIR/positional_named_format_parameters.rs:48:18\n-   |\n-LL |     println!(\"{0:0$.v$}\", v = 1);\n-   |                  ^ help: replace it with: `v`\n-\n-error: named parameter v is used as a positional parameter\n-  --> $DIR/positional_named_format_parameters.rs:49:16\n-   |\n-LL |     println!(\"{0:v$.0$}\", v = 1);\n-   |                ^ help: replace it with: `v`\n-\n-error: named parameter v is used as a positional parameter\n-  --> $DIR/positional_named_format_parameters.rs:49:21\n-   |\n-LL |     println!(\"{0:v$.0$}\", v = 1);\n-   |                     ^ help: replace it with: `v`\n-\n-error: named parameter v is used as a positional parameter\n-  --> $DIR/positional_named_format_parameters.rs:50:21\n-   |\n-LL |     println!(\"{v:0$.0$}\", v = 1);\n-   |                     ^ help: replace it with: `v`\n-\n-error: named parameter v is used as a positional parameter\n-  --> $DIR/positional_named_format_parameters.rs:50:18\n-   |\n-LL |     println!(\"{v:0$.0$}\", v = 1);\n-   |                  ^ help: replace it with: `v`\n-\n-error: named parameter v is used as a positional parameter\n-  --> $DIR/positional_named_format_parameters.rs:51:21\n-   |\n-LL |     println!(\"{v:v$.0$}\", v = 1);\n-   |                     ^ help: replace it with: `v`\n-\n-error: named parameter v is used as a positional parameter\n-  --> $DIR/positional_named_format_parameters.rs:52:18\n-   |\n-LL |     println!(\"{v:0$.v$}\", v = 1);\n-   |                  ^ help: replace it with: `v`\n-\n-error: named parameter w is used as a positional parameter\n-  --> $DIR/positional_named_format_parameters.rs:53:16\n-   |\n-LL |     println!(\"{:w$}\", w = 1);\n-   |                ^ help: replace it with: `w`\n-\n-error: named parameter p is used as a positional parameter\n-  --> $DIR/positional_named_format_parameters.rs:54:16\n-   |\n-LL |     println!(\"{:.p$}\", p = 1);\n-   |                ^ help: replace it with: `p`\n-\n-error: aborting due to 69 previous errors\n-"}, {"sha": "3f6639c14585ad5aa69d133ba6bd5f70e02ab25d", "filename": "src/tools/clippy/tests/ui/print_literal.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fprint_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fprint_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fprint_literal.rs?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -20,11 +20,13 @@ fn main() {\n     println!(\"{} of {:b} people know binary, the other half doesn't\", 1, 2);\n     println!(\"10 / 4 is {}\", 2.5);\n     println!(\"2 + 1 = {}\", 3);\n+    println!(\"From expansion {}\", stringify!(not a string literal));\n \n     // these should throw warnings\n     print!(\"Hello {}\", \"world\");\n     println!(\"Hello {} {}\", world, \"world\");\n     println!(\"Hello {}\", \"world\");\n+    println!(\"{} {:.4}\", \"a literal\", 5);\n \n     // positional args don't change the fact\n     // that we're using a literal -- this should"}, {"sha": "23e6dbc3e341fdc0476872066594afe264d861f6", "filename": "src/tools/clippy/tests/ui/print_literal.stderr", "status": "modified", "additions": 34, "deletions": 22, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fprint_literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fprint_literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fprint_literal.stderr?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -1,5 +1,5 @@\n error: literal with an empty format string\n-  --> $DIR/print_literal.rs:25:24\n+  --> $DIR/print_literal.rs:26:24\n    |\n LL |     print!(\"Hello {}\", \"world\");\n    |                        ^^^^^^^\n@@ -12,7 +12,7 @@ LL +     print!(\"Hello world\");\n    |\n \n error: literal with an empty format string\n-  --> $DIR/print_literal.rs:26:36\n+  --> $DIR/print_literal.rs:27:36\n    |\n LL |     println!(\"Hello {} {}\", world, \"world\");\n    |                                    ^^^^^^^\n@@ -24,7 +24,7 @@ LL +     println!(\"Hello {} world\", world);\n    |\n \n error: literal with an empty format string\n-  --> $DIR/print_literal.rs:27:26\n+  --> $DIR/print_literal.rs:28:26\n    |\n LL |     println!(\"Hello {}\", \"world\");\n    |                          ^^^^^^^\n@@ -36,7 +36,19 @@ LL +     println!(\"Hello world\");\n    |\n \n error: literal with an empty format string\n-  --> $DIR/print_literal.rs:32:25\n+  --> $DIR/print_literal.rs:29:26\n+   |\n+LL |     println!(\"{} {:.4}\", \"a literal\", 5);\n+   |                          ^^^^^^^^^^^\n+   |\n+help: try this\n+   |\n+LL -     println!(\"{} {:.4}\", \"a literal\", 5);\n+LL +     println!(\"a literal {:.4}\", 5);\n+   |\n+\n+error: literal with an empty format string\n+  --> $DIR/print_literal.rs:34:25\n    |\n LL |     println!(\"{0} {1}\", \"hello\", \"world\");\n    |                         ^^^^^^^\n@@ -48,7 +60,7 @@ LL +     println!(\"hello {1}\", \"world\");\n    |\n \n error: literal with an empty format string\n-  --> $DIR/print_literal.rs:32:34\n+  --> $DIR/print_literal.rs:34:34\n    |\n LL |     println!(\"{0} {1}\", \"hello\", \"world\");\n    |                                  ^^^^^^^\n@@ -60,34 +72,34 @@ LL +     println!(\"{0} world\", \"hello\");\n    |\n \n error: literal with an empty format string\n-  --> $DIR/print_literal.rs:33:25\n+  --> $DIR/print_literal.rs:35:34\n    |\n LL |     println!(\"{1} {0}\", \"hello\", \"world\");\n-   |                         ^^^^^^^\n+   |                                  ^^^^^^^\n    |\n help: try this\n    |\n LL -     println!(\"{1} {0}\", \"hello\", \"world\");\n-LL +     println!(\"{1} hello\", \"world\");\n+LL +     println!(\"world {0}\", \"hello\");\n    |\n \n error: literal with an empty format string\n-  --> $DIR/print_literal.rs:33:34\n+  --> $DIR/print_literal.rs:35:25\n    |\n LL |     println!(\"{1} {0}\", \"hello\", \"world\");\n-   |                                  ^^^^^^^\n+   |                         ^^^^^^^\n    |\n help: try this\n    |\n LL -     println!(\"{1} {0}\", \"hello\", \"world\");\n-LL +     println!(\"world {0}\", \"hello\");\n+LL +     println!(\"{1} hello\", \"world\");\n    |\n \n error: literal with an empty format string\n-  --> $DIR/print_literal.rs:36:29\n+  --> $DIR/print_literal.rs:38:35\n    |\n LL |     println!(\"{foo} {bar}\", foo = \"hello\", bar = \"world\");\n-   |                             ^^^^^^^^^^^^^\n+   |                                   ^^^^^^^\n    |\n help: try this\n    |\n@@ -96,10 +108,10 @@ LL +     println!(\"hello {bar}\", bar = \"world\");\n    |\n \n error: literal with an empty format string\n-  --> $DIR/print_literal.rs:36:44\n+  --> $DIR/print_literal.rs:38:50\n    |\n LL |     println!(\"{foo} {bar}\", foo = \"hello\", bar = \"world\");\n-   |                                            ^^^^^^^^^^^^^\n+   |                                                  ^^^^^^^\n    |\n help: try this\n    |\n@@ -108,28 +120,28 @@ LL +     println!(\"{foo} world\", foo = \"hello\");\n    |\n \n error: literal with an empty format string\n-  --> $DIR/print_literal.rs:37:29\n+  --> $DIR/print_literal.rs:39:50\n    |\n LL |     println!(\"{bar} {foo}\", foo = \"hello\", bar = \"world\");\n-   |                             ^^^^^^^^^^^^^\n+   |                                                  ^^^^^^^\n    |\n help: try this\n    |\n LL -     println!(\"{bar} {foo}\", foo = \"hello\", bar = \"world\");\n-LL +     println!(\"{bar} hello\", bar = \"world\");\n+LL +     println!(\"world {foo}\", foo = \"hello\");\n    |\n \n error: literal with an empty format string\n-  --> $DIR/print_literal.rs:37:44\n+  --> $DIR/print_literal.rs:39:35\n    |\n LL |     println!(\"{bar} {foo}\", foo = \"hello\", bar = \"world\");\n-   |                                            ^^^^^^^^^^^^^\n+   |                                   ^^^^^^^\n    |\n help: try this\n    |\n LL -     println!(\"{bar} {foo}\", foo = \"hello\", bar = \"world\");\n-LL +     println!(\"world {foo}\", foo = \"hello\");\n+LL +     println!(\"{bar} hello\", bar = \"world\");\n    |\n \n-error: aborting due to 11 previous errors\n+error: aborting due to 12 previous errors\n "}, {"sha": "b8c29d207adae044e8d9653660dc8f087d7dd193", "filename": "src/tools/clippy/tests/ui/print_with_newline.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fprint_with_newline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fprint_with_newline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fprint_with_newline.rs?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -48,5 +48,13 @@ fn main() {\n     print!(\"\\r\\n\");\n     print!(\"foo\\r\\n\");\n     print!(\"\\\\r\\n\"); //~ ERROR\n-    print!(\"foo\\rbar\\n\") // ~ ERROR\n+    print!(\"foo\\rbar\\n\");\n+\n+    // Ignore expanded format strings\n+    macro_rules! newline {\n+        () => {\n+            \"\\n\"\n+        };\n+    }\n+    print!(newline!());\n }"}, {"sha": "b9f5675faec7389a6f8bfd9212dced7b7525d782", "filename": "src/tools/clippy/tests/ui/print_with_newline.stderr", "status": "modified", "additions": 3, "deletions": 15, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fprint_with_newline.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fprint_with_newline.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fprint_with_newline.stderr?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -83,7 +83,7 @@ LL | |     );\n help: use `println!` instead\n    |\n LL ~     println!(\n-LL ~         \"\"\n+LL ~         \n    |\n \n error: using `print!()` with a format string that ends in a single newline\n@@ -98,7 +98,7 @@ LL | |     );\n help: use `println!` instead\n    |\n LL ~     println!(\n-LL ~         r\"\"\n+LL ~         \n    |\n \n error: using `print!()` with a format string that ends in a single newline\n@@ -113,17 +113,5 @@ LL -     print!(\"/r/n\"); //~ ERROR\n LL +     println!(\"/r\"); //~ ERROR\n    |\n \n-error: using `print!()` with a format string that ends in a single newline\n-  --> $DIR/print_with_newline.rs:51:5\n-   |\n-LL |     print!(\"foo/rbar/n\") // ~ ERROR\n-   |     ^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: use `println!` instead\n-   |\n-LL -     print!(\"foo/rbar/n\") // ~ ERROR\n-LL +     println!(\"foo/rbar\") // ~ ERROR\n-   |\n-\n-error: aborting due to 10 previous errors\n+error: aborting due to 9 previous errors\n "}, {"sha": "3cc8bb947bd352c0e889c2d29d4221f4754eee15", "filename": "src/tools/clippy/tests/ui/println_empty_string.stderr", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fprintln_empty_string.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fprintln_empty_string.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fprintln_empty_string.stderr?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -1,28 +1,36 @@\n-error: using `println!(\"\")`\n+error: empty string literal in `println!`\n   --> $DIR/println_empty_string.rs:6:5\n    |\n LL |     println!(\"\");\n-   |     ^^^^^^^^^^^^ help: replace it with: `println!()`\n+   |     ^^^^^^^^^--^\n+   |              |\n+   |              help: remove the empty string\n    |\n    = note: `-D clippy::println-empty-string` implied by `-D warnings`\n \n-error: using `println!(\"\")`\n+error: empty string literal in `println!`\n   --> $DIR/println_empty_string.rs:9:14\n    |\n LL |         _ => println!(\"\"),\n-   |              ^^^^^^^^^^^^ help: replace it with: `println!()`\n+   |              ^^^^^^^^^--^\n+   |                       |\n+   |                       help: remove the empty string\n \n-error: using `eprintln!(\"\")`\n+error: empty string literal in `eprintln!`\n   --> $DIR/println_empty_string.rs:13:5\n    |\n LL |     eprintln!(\"\");\n-   |     ^^^^^^^^^^^^^ help: replace it with: `eprintln!()`\n+   |     ^^^^^^^^^^--^\n+   |               |\n+   |               help: remove the empty string\n \n-error: using `eprintln!(\"\")`\n+error: empty string literal in `eprintln!`\n   --> $DIR/println_empty_string.rs:16:14\n    |\n LL |         _ => eprintln!(\"\"),\n-   |              ^^^^^^^^^^^^^ help: replace it with: `eprintln!()`\n+   |              ^^^^^^^^^^--^\n+   |                        |\n+   |                        help: remove the empty string\n \n error: aborting due to 4 previous errors\n "}, {"sha": "a6e7bdba77c65f1acac87f5323cf6e3993cb7070", "filename": "src/tools/clippy/tests/ui/rename.fixed", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.fixed?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -32,6 +32,7 @@\n #![allow(invalid_value)]\n #![allow(enum_intrinsics_non_enums)]\n #![allow(non_fmt_panics)]\n+#![allow(named_arguments_used_positionally)]\n #![allow(temporary_cstring_as_ptr)]\n #![allow(unknown_lints)]\n #![allow(unused_labels)]\n@@ -69,6 +70,7 @@\n #![warn(invalid_value)]\n #![warn(enum_intrinsics_non_enums)]\n #![warn(non_fmt_panics)]\n+#![warn(named_arguments_used_positionally)]\n #![warn(temporary_cstring_as_ptr)]\n #![warn(unknown_lints)]\n #![warn(unused_labels)]"}, {"sha": "e8f57597d02b5d8d4a573166f145daa9a670182a", "filename": "src/tools/clippy/tests/ui/rename.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.rs?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -32,6 +32,7 @@\n #![allow(invalid_value)]\n #![allow(enum_intrinsics_non_enums)]\n #![allow(non_fmt_panics)]\n+#![allow(named_arguments_used_positionally)]\n #![allow(temporary_cstring_as_ptr)]\n #![allow(unknown_lints)]\n #![allow(unused_labels)]\n@@ -69,6 +70,7 @@\n #![warn(clippy::invalid_ref)]\n #![warn(clippy::mem_discriminant_non_enum)]\n #![warn(clippy::panic_params)]\n+#![warn(clippy::positional_named_format_parameters)]\n #![warn(clippy::temporary_cstring_as_ptr)]\n #![warn(clippy::unknown_clippy_lints)]\n #![warn(clippy::unused_label)]"}, {"sha": "31865a7f66d60901231d84dc9f8c787d97f25736", "filename": "src/tools/clippy/tests/ui/rename.stderr", "status": "modified", "additions": 44, "deletions": 38, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.stderr?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -1,226 +1,232 @@\n error: lint `clippy::blacklisted_name` has been renamed to `clippy::disallowed_names`\n-  --> $DIR/rename.rs:38:9\n+  --> $DIR/rename.rs:39:9\n    |\n LL | #![warn(clippy::blacklisted_name)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::disallowed_names`\n    |\n    = note: `-D renamed-and-removed-lints` implied by `-D warnings`\n \n error: lint `clippy::block_in_if_condition_expr` has been renamed to `clippy::blocks_in_if_conditions`\n-  --> $DIR/rename.rs:39:9\n+  --> $DIR/rename.rs:40:9\n    |\n LL | #![warn(clippy::block_in_if_condition_expr)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::blocks_in_if_conditions`\n \n error: lint `clippy::block_in_if_condition_stmt` has been renamed to `clippy::blocks_in_if_conditions`\n-  --> $DIR/rename.rs:40:9\n+  --> $DIR/rename.rs:41:9\n    |\n LL | #![warn(clippy::block_in_if_condition_stmt)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::blocks_in_if_conditions`\n \n error: lint `clippy::box_vec` has been renamed to `clippy::box_collection`\n-  --> $DIR/rename.rs:41:9\n+  --> $DIR/rename.rs:42:9\n    |\n LL | #![warn(clippy::box_vec)]\n    |         ^^^^^^^^^^^^^^^ help: use the new name: `clippy::box_collection`\n \n error: lint `clippy::const_static_lifetime` has been renamed to `clippy::redundant_static_lifetimes`\n-  --> $DIR/rename.rs:42:9\n+  --> $DIR/rename.rs:43:9\n    |\n LL | #![warn(clippy::const_static_lifetime)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::redundant_static_lifetimes`\n \n error: lint `clippy::cyclomatic_complexity` has been renamed to `clippy::cognitive_complexity`\n-  --> $DIR/rename.rs:43:9\n+  --> $DIR/rename.rs:44:9\n    |\n LL | #![warn(clippy::cyclomatic_complexity)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::cognitive_complexity`\n \n error: lint `clippy::disallowed_method` has been renamed to `clippy::disallowed_methods`\n-  --> $DIR/rename.rs:44:9\n+  --> $DIR/rename.rs:45:9\n    |\n LL | #![warn(clippy::disallowed_method)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::disallowed_methods`\n \n error: lint `clippy::disallowed_type` has been renamed to `clippy::disallowed_types`\n-  --> $DIR/rename.rs:45:9\n+  --> $DIR/rename.rs:46:9\n    |\n LL | #![warn(clippy::disallowed_type)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::disallowed_types`\n \n error: lint `clippy::eval_order_dependence` has been renamed to `clippy::mixed_read_write_in_expression`\n-  --> $DIR/rename.rs:46:9\n+  --> $DIR/rename.rs:47:9\n    |\n LL | #![warn(clippy::eval_order_dependence)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::mixed_read_write_in_expression`\n \n error: lint `clippy::for_loop_over_option` has been renamed to `clippy::for_loops_over_fallibles`\n-  --> $DIR/rename.rs:47:9\n+  --> $DIR/rename.rs:48:9\n    |\n LL | #![warn(clippy::for_loop_over_option)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::for_loops_over_fallibles`\n \n error: lint `clippy::for_loop_over_result` has been renamed to `clippy::for_loops_over_fallibles`\n-  --> $DIR/rename.rs:48:9\n+  --> $DIR/rename.rs:49:9\n    |\n LL | #![warn(clippy::for_loop_over_result)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::for_loops_over_fallibles`\n \n error: lint `clippy::identity_conversion` has been renamed to `clippy::useless_conversion`\n-  --> $DIR/rename.rs:49:9\n+  --> $DIR/rename.rs:50:9\n    |\n LL | #![warn(clippy::identity_conversion)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::useless_conversion`\n \n error: lint `clippy::if_let_some_result` has been renamed to `clippy::match_result_ok`\n-  --> $DIR/rename.rs:50:9\n+  --> $DIR/rename.rs:51:9\n    |\n LL | #![warn(clippy::if_let_some_result)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::match_result_ok`\n \n error: lint `clippy::logic_bug` has been renamed to `clippy::overly_complex_bool_expr`\n-  --> $DIR/rename.rs:51:9\n+  --> $DIR/rename.rs:52:9\n    |\n LL | #![warn(clippy::logic_bug)]\n    |         ^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::overly_complex_bool_expr`\n \n error: lint `clippy::new_without_default_derive` has been renamed to `clippy::new_without_default`\n-  --> $DIR/rename.rs:52:9\n+  --> $DIR/rename.rs:53:9\n    |\n LL | #![warn(clippy::new_without_default_derive)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::new_without_default`\n \n error: lint `clippy::option_and_then_some` has been renamed to `clippy::bind_instead_of_map`\n-  --> $DIR/rename.rs:53:9\n+  --> $DIR/rename.rs:54:9\n    |\n LL | #![warn(clippy::option_and_then_some)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::bind_instead_of_map`\n \n error: lint `clippy::option_expect_used` has been renamed to `clippy::expect_used`\n-  --> $DIR/rename.rs:54:9\n+  --> $DIR/rename.rs:55:9\n    |\n LL | #![warn(clippy::option_expect_used)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::expect_used`\n \n error: lint `clippy::option_map_unwrap_or` has been renamed to `clippy::map_unwrap_or`\n-  --> $DIR/rename.rs:55:9\n+  --> $DIR/rename.rs:56:9\n    |\n LL | #![warn(clippy::option_map_unwrap_or)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::map_unwrap_or`\n \n error: lint `clippy::option_map_unwrap_or_else` has been renamed to `clippy::map_unwrap_or`\n-  --> $DIR/rename.rs:56:9\n+  --> $DIR/rename.rs:57:9\n    |\n LL | #![warn(clippy::option_map_unwrap_or_else)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::map_unwrap_or`\n \n error: lint `clippy::option_unwrap_used` has been renamed to `clippy::unwrap_used`\n-  --> $DIR/rename.rs:57:9\n+  --> $DIR/rename.rs:58:9\n    |\n LL | #![warn(clippy::option_unwrap_used)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::unwrap_used`\n \n error: lint `clippy::ref_in_deref` has been renamed to `clippy::needless_borrow`\n-  --> $DIR/rename.rs:58:9\n+  --> $DIR/rename.rs:59:9\n    |\n LL | #![warn(clippy::ref_in_deref)]\n    |         ^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::needless_borrow`\n \n error: lint `clippy::result_expect_used` has been renamed to `clippy::expect_used`\n-  --> $DIR/rename.rs:59:9\n+  --> $DIR/rename.rs:60:9\n    |\n LL | #![warn(clippy::result_expect_used)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::expect_used`\n \n error: lint `clippy::result_map_unwrap_or_else` has been renamed to `clippy::map_unwrap_or`\n-  --> $DIR/rename.rs:60:9\n+  --> $DIR/rename.rs:61:9\n    |\n LL | #![warn(clippy::result_map_unwrap_or_else)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::map_unwrap_or`\n \n error: lint `clippy::result_unwrap_used` has been renamed to `clippy::unwrap_used`\n-  --> $DIR/rename.rs:61:9\n+  --> $DIR/rename.rs:62:9\n    |\n LL | #![warn(clippy::result_unwrap_used)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::unwrap_used`\n \n error: lint `clippy::single_char_push_str` has been renamed to `clippy::single_char_add_str`\n-  --> $DIR/rename.rs:62:9\n+  --> $DIR/rename.rs:63:9\n    |\n LL | #![warn(clippy::single_char_push_str)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::single_char_add_str`\n \n error: lint `clippy::stutter` has been renamed to `clippy::module_name_repetitions`\n-  --> $DIR/rename.rs:63:9\n+  --> $DIR/rename.rs:64:9\n    |\n LL | #![warn(clippy::stutter)]\n    |         ^^^^^^^^^^^^^^^ help: use the new name: `clippy::module_name_repetitions`\n \n error: lint `clippy::to_string_in_display` has been renamed to `clippy::recursive_format_impl`\n-  --> $DIR/rename.rs:64:9\n+  --> $DIR/rename.rs:65:9\n    |\n LL | #![warn(clippy::to_string_in_display)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::recursive_format_impl`\n \n error: lint `clippy::zero_width_space` has been renamed to `clippy::invisible_characters`\n-  --> $DIR/rename.rs:65:9\n+  --> $DIR/rename.rs:66:9\n    |\n LL | #![warn(clippy::zero_width_space)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::invisible_characters`\n \n error: lint `clippy::drop_bounds` has been renamed to `drop_bounds`\n-  --> $DIR/rename.rs:66:9\n+  --> $DIR/rename.rs:67:9\n    |\n LL | #![warn(clippy::drop_bounds)]\n    |         ^^^^^^^^^^^^^^^^^^^ help: use the new name: `drop_bounds`\n \n error: lint `clippy::into_iter_on_array` has been renamed to `array_into_iter`\n-  --> $DIR/rename.rs:67:9\n+  --> $DIR/rename.rs:68:9\n    |\n LL | #![warn(clippy::into_iter_on_array)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `array_into_iter`\n \n error: lint `clippy::invalid_atomic_ordering` has been renamed to `invalid_atomic_ordering`\n-  --> $DIR/rename.rs:68:9\n+  --> $DIR/rename.rs:69:9\n    |\n LL | #![warn(clippy::invalid_atomic_ordering)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `invalid_atomic_ordering`\n \n error: lint `clippy::invalid_ref` has been renamed to `invalid_value`\n-  --> $DIR/rename.rs:69:9\n+  --> $DIR/rename.rs:70:9\n    |\n LL | #![warn(clippy::invalid_ref)]\n    |         ^^^^^^^^^^^^^^^^^^^ help: use the new name: `invalid_value`\n \n error: lint `clippy::mem_discriminant_non_enum` has been renamed to `enum_intrinsics_non_enums`\n-  --> $DIR/rename.rs:70:9\n+  --> $DIR/rename.rs:71:9\n    |\n LL | #![warn(clippy::mem_discriminant_non_enum)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `enum_intrinsics_non_enums`\n \n error: lint `clippy::panic_params` has been renamed to `non_fmt_panics`\n-  --> $DIR/rename.rs:71:9\n+  --> $DIR/rename.rs:72:9\n    |\n LL | #![warn(clippy::panic_params)]\n    |         ^^^^^^^^^^^^^^^^^^^^ help: use the new name: `non_fmt_panics`\n \n+error: lint `clippy::positional_named_format_parameters` has been renamed to `named_arguments_used_positionally`\n+  --> $DIR/rename.rs:73:9\n+   |\n+LL | #![warn(clippy::positional_named_format_parameters)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `named_arguments_used_positionally`\n+\n error: lint `clippy::temporary_cstring_as_ptr` has been renamed to `temporary_cstring_as_ptr`\n-  --> $DIR/rename.rs:72:9\n+  --> $DIR/rename.rs:74:9\n    |\n LL | #![warn(clippy::temporary_cstring_as_ptr)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `temporary_cstring_as_ptr`\n \n error: lint `clippy::unknown_clippy_lints` has been renamed to `unknown_lints`\n-  --> $DIR/rename.rs:73:9\n+  --> $DIR/rename.rs:75:9\n    |\n LL | #![warn(clippy::unknown_clippy_lints)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `unknown_lints`\n \n error: lint `clippy::unused_label` has been renamed to `unused_labels`\n-  --> $DIR/rename.rs:74:9\n+  --> $DIR/rename.rs:76:9\n    |\n LL | #![warn(clippy::unused_label)]\n    |         ^^^^^^^^^^^^^^^^^^^^ help: use the new name: `unused_labels`\n \n-error: aborting due to 37 previous errors\n+error: aborting due to 38 previous errors\n "}, {"sha": "f97583aa22f9a77247990c48aab8a68b9ae73715", "filename": "src/tools/clippy/tests/ui/unnecessary_to_owned.fixed", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_to_owned.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_to_owned.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_to_owned.fixed?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -417,3 +417,12 @@ mod issue_9351 {\n         predicates_are_satisfied(id(\"abc\".to_string()));\n     }\n }\n+\n+mod issue_9504 {\n+    #![allow(dead_code)]\n+\n+    async fn foo<S: AsRef<str>>(_: S) {}\n+    async fn bar() {\n+        foo(std::path::PathBuf::new().to_string_lossy().to_string()).await;\n+    }\n+}"}, {"sha": "aa5394a565790c3f1478f12a56421745b4b18391", "filename": "src/tools/clippy/tests/ui/unnecessary_to_owned.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_to_owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_to_owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_to_owned.rs?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -417,3 +417,12 @@ mod issue_9351 {\n         predicates_are_satisfied(id(\"abc\".to_string()));\n     }\n }\n+\n+mod issue_9504 {\n+    #![allow(dead_code)]\n+\n+    async fn foo<S: AsRef<str>>(_: S) {}\n+    async fn bar() {\n+        foo(std::path::PathBuf::new().to_string_lossy().to_string()).await;\n+    }\n+}"}, {"sha": "7374dfdf92e87b5de8014c1cb27e01043cbcbe1b", "filename": "src/tools/clippy/tests/ui/unused_peekable.rs", "status": "modified", "additions": 29, "deletions": 4, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funused_peekable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funused_peekable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funused_peekable.rs?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -57,12 +57,22 @@ fn valid() {\n     impl PeekableConsumer {\n         fn consume(&self, _: Peekable<Empty<u32>>) {}\n         fn consume_mut_ref(&self, _: &mut Peekable<Empty<u32>>) {}\n+        fn consume_assoc(_: Peekable<Empty<u32>>) {}\n+        fn consume_assoc_mut_ref(_: &mut Peekable<Empty<u32>>) {}\n     }\n-\n     let peekable_consumer = PeekableConsumer;\n-    let mut passed_along_to_method = std::iter::empty::<u32>().peekable();\n-    peekable_consumer.consume_mut_ref(&mut passed_along_to_method);\n-    peekable_consumer.consume(passed_along_to_method);\n+\n+    let peekable = std::iter::empty::<u32>().peekable();\n+    peekable_consumer.consume(peekable);\n+\n+    let mut peekable = std::iter::empty::<u32>().peekable();\n+    peekable_consumer.consume_mut_ref(&mut peekable);\n+\n+    let peekable = std::iter::empty::<u32>().peekable();\n+    PeekableConsumer::consume_assoc(peekable);\n+\n+    let mut peekable = std::iter::empty::<u32>().peekable();\n+    PeekableConsumer::consume_assoc_mut_ref(&mut peekable);\n \n     // `peek` called in another block\n     let mut peekable_in_block = std::iter::empty::<u32>().peekable();\n@@ -141,4 +151,19 @@ fn valid() {\n     {\n         peekable_last_expr.peek();\n     }\n+\n+    let mut peek_in_closure = std::iter::empty::<u32>().peekable();\n+    let _ = || {\n+        let _ = peek_in_closure.peek();\n+    };\n+\n+    trait PeekTrait {}\n+    impl<I> PeekTrait for Peekable<I> where I: Iterator {}\n+\n+    let mut peekable = std::iter::empty::<u32>().peekable();\n+    let _dyn = &mut peekable as &mut dyn PeekTrait;\n+\n+    fn takes_dyn(_: &mut dyn PeekTrait) {}\n+    let mut peekable = std::iter::empty::<u32>().peekable();\n+    takes_dyn(&mut peekable);\n }"}, {"sha": "37986187da179b6acd40a6a006596a48343ae28a", "filename": "src/tools/clippy/tests/ui/use_self.fixed", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fuse_self.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fuse_self.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fuse_self.fixed?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -608,3 +608,12 @@ mod issue8845 {\n         }\n     }\n }\n+\n+mod issue6902 {\n+    use serde::Serialize;\n+\n+    #[derive(Serialize)]\n+    pub enum Foo {\n+        Bar = 1,\n+    }\n+}"}, {"sha": "1b2b3337c92ed00fc30a08d00bb405c9dd4abe8d", "filename": "src/tools/clippy/tests/ui/use_self.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fuse_self.rs?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -608,3 +608,12 @@ mod issue8845 {\n         }\n     }\n }\n+\n+mod issue6902 {\n+    use serde::Serialize;\n+\n+    #[derive(Serialize)]\n+    pub enum Foo {\n+        Bar = 1,\n+    }\n+}"}, {"sha": "5892818aa9a6173ac77d04968da4dc9c20f8de34", "filename": "src/tools/clippy/tests/ui/write_literal.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fwrite_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fwrite_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fwrite_literal.rs?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -25,11 +25,13 @@ fn main() {\n     writeln!(v, \"{} of {:b} people know binary, the other half doesn't\", 1, 2);\n     writeln!(v, \"10 / 4 is {}\", 2.5);\n     writeln!(v, \"2 + 1 = {}\", 3);\n+    writeln!(v, \"From expansion {}\", stringify!(not a string literal));\n \n     // these should throw warnings\n     write!(v, \"Hello {}\", \"world\");\n     writeln!(v, \"Hello {} {}\", world, \"world\");\n     writeln!(v, \"Hello {}\", \"world\");\n+    writeln!(v, \"{} {:.4}\", \"a literal\", 5);\n \n     // positional args don't change the fact\n     // that we're using a literal -- this should"}, {"sha": "1e306ae28a263ca094c30bd57d29decd3fec839e", "filename": "src/tools/clippy/tests/ui/write_literal.stderr", "status": "modified", "additions": 34, "deletions": 22, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fwrite_literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fwrite_literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fwrite_literal.stderr?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -1,5 +1,5 @@\n error: literal with an empty format string\n-  --> $DIR/write_literal.rs:30:27\n+  --> $DIR/write_literal.rs:31:27\n    |\n LL |     write!(v, \"Hello {}\", \"world\");\n    |                           ^^^^^^^\n@@ -12,7 +12,7 @@ LL +     write!(v, \"Hello world\");\n    |\n \n error: literal with an empty format string\n-  --> $DIR/write_literal.rs:31:39\n+  --> $DIR/write_literal.rs:32:39\n    |\n LL |     writeln!(v, \"Hello {} {}\", world, \"world\");\n    |                                       ^^^^^^^\n@@ -24,7 +24,7 @@ LL +     writeln!(v, \"Hello {} world\", world);\n    |\n \n error: literal with an empty format string\n-  --> $DIR/write_literal.rs:32:29\n+  --> $DIR/write_literal.rs:33:29\n    |\n LL |     writeln!(v, \"Hello {}\", \"world\");\n    |                             ^^^^^^^\n@@ -36,7 +36,19 @@ LL +     writeln!(v, \"Hello world\");\n    |\n \n error: literal with an empty format string\n-  --> $DIR/write_literal.rs:37:28\n+  --> $DIR/write_literal.rs:34:29\n+   |\n+LL |     writeln!(v, \"{} {:.4}\", \"a literal\", 5);\n+   |                             ^^^^^^^^^^^\n+   |\n+help: try this\n+   |\n+LL -     writeln!(v, \"{} {:.4}\", \"a literal\", 5);\n+LL +     writeln!(v, \"a literal {:.4}\", 5);\n+   |\n+\n+error: literal with an empty format string\n+  --> $DIR/write_literal.rs:39:28\n    |\n LL |     writeln!(v, \"{0} {1}\", \"hello\", \"world\");\n    |                            ^^^^^^^\n@@ -48,7 +60,7 @@ LL +     writeln!(v, \"hello {1}\", \"world\");\n    |\n \n error: literal with an empty format string\n-  --> $DIR/write_literal.rs:37:37\n+  --> $DIR/write_literal.rs:39:37\n    |\n LL |     writeln!(v, \"{0} {1}\", \"hello\", \"world\");\n    |                                     ^^^^^^^\n@@ -60,34 +72,34 @@ LL +     writeln!(v, \"{0} world\", \"hello\");\n    |\n \n error: literal with an empty format string\n-  --> $DIR/write_literal.rs:38:28\n+  --> $DIR/write_literal.rs:40:37\n    |\n LL |     writeln!(v, \"{1} {0}\", \"hello\", \"world\");\n-   |                            ^^^^^^^\n+   |                                     ^^^^^^^\n    |\n help: try this\n    |\n LL -     writeln!(v, \"{1} {0}\", \"hello\", \"world\");\n-LL +     writeln!(v, \"{1} hello\", \"world\");\n+LL +     writeln!(v, \"world {0}\", \"hello\");\n    |\n \n error: literal with an empty format string\n-  --> $DIR/write_literal.rs:38:37\n+  --> $DIR/write_literal.rs:40:28\n    |\n LL |     writeln!(v, \"{1} {0}\", \"hello\", \"world\");\n-   |                                     ^^^^^^^\n+   |                            ^^^^^^^\n    |\n help: try this\n    |\n LL -     writeln!(v, \"{1} {0}\", \"hello\", \"world\");\n-LL +     writeln!(v, \"world {0}\", \"hello\");\n+LL +     writeln!(v, \"{1} hello\", \"world\");\n    |\n \n error: literal with an empty format string\n-  --> $DIR/write_literal.rs:41:32\n+  --> $DIR/write_literal.rs:43:38\n    |\n LL |     writeln!(v, \"{foo} {bar}\", foo = \"hello\", bar = \"world\");\n-   |                                ^^^^^^^^^^^^^\n+   |                                      ^^^^^^^\n    |\n help: try this\n    |\n@@ -96,10 +108,10 @@ LL +     writeln!(v, \"hello {bar}\", bar = \"world\");\n    |\n \n error: literal with an empty format string\n-  --> $DIR/write_literal.rs:41:47\n+  --> $DIR/write_literal.rs:43:53\n    |\n LL |     writeln!(v, \"{foo} {bar}\", foo = \"hello\", bar = \"world\");\n-   |                                               ^^^^^^^^^^^^^\n+   |                                                     ^^^^^^^\n    |\n help: try this\n    |\n@@ -108,28 +120,28 @@ LL +     writeln!(v, \"{foo} world\", foo = \"hello\");\n    |\n \n error: literal with an empty format string\n-  --> $DIR/write_literal.rs:42:32\n+  --> $DIR/write_literal.rs:44:53\n    |\n LL |     writeln!(v, \"{bar} {foo}\", foo = \"hello\", bar = \"world\");\n-   |                                ^^^^^^^^^^^^^\n+   |                                                     ^^^^^^^\n    |\n help: try this\n    |\n LL -     writeln!(v, \"{bar} {foo}\", foo = \"hello\", bar = \"world\");\n-LL +     writeln!(v, \"{bar} hello\", bar = \"world\");\n+LL +     writeln!(v, \"world {foo}\", foo = \"hello\");\n    |\n \n error: literal with an empty format string\n-  --> $DIR/write_literal.rs:42:47\n+  --> $DIR/write_literal.rs:44:38\n    |\n LL |     writeln!(v, \"{bar} {foo}\", foo = \"hello\", bar = \"world\");\n-   |                                               ^^^^^^^^^^^^^\n+   |                                      ^^^^^^^\n    |\n help: try this\n    |\n LL -     writeln!(v, \"{bar} {foo}\", foo = \"hello\", bar = \"world\");\n-LL +     writeln!(v, \"world {foo}\", foo = \"hello\");\n+LL +     writeln!(v, \"{bar} hello\", bar = \"world\");\n    |\n \n-error: aborting due to 11 previous errors\n+error: aborting due to 12 previous errors\n "}, {"sha": "55a11daa1d3443a65fd557661c6c9c311a51478d", "filename": "src/tools/clippy/tests/ui/write_literal_2.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fwrite_literal_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fwrite_literal_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fwrite_literal_2.rs?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -10,7 +10,7 @@ fn main() {\n     writeln!(v, r\"{}\", r\"{hello}\");\n     writeln!(v, \"{}\", '\\'');\n     writeln!(v, \"{}\", '\"');\n-    writeln!(v, r\"{}\", '\"'); // don't lint\n+    writeln!(v, r\"{}\", '\"');\n     writeln!(v, r\"{}\", '\\'');\n     writeln!(\n         v,\n@@ -24,4 +24,11 @@ fn main() {\n         {} \\\\ {}\",\n         \"1\", \"2\", \"3\",\n     );\n+    writeln!(v, \"{}\", \"\\\\\");\n+    writeln!(v, r\"{}\", \"\\\\\");\n+    writeln!(v, r#\"{}\"#, \"\\\\\");\n+    writeln!(v, \"{}\", r\"\\\");\n+    writeln!(v, \"{}\", \"\\r\");\n+    writeln!(v, r#\"{}{}\"#, '#', '\"'); // hard mode\n+    writeln!(v, r\"{}\", \"\\r\"); // should not lint\n }"}, {"sha": "d5956db9ff0b4450d9c0ee01fb13383f0b879829", "filename": "src/tools/clippy/tests/ui/write_literal_2.stderr", "status": "modified", "additions": 79, "deletions": 1, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fwrite_literal_2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fwrite_literal_2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fwrite_literal_2.stderr?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -47,6 +47,12 @@ LL -     writeln!(v, \"{}\", '\"');\n LL +     writeln!(v, \"/\"\");\n    |\n \n+error: literal with an empty format string\n+  --> $DIR/write_literal_2.rs:13:24\n+   |\n+LL |     writeln!(v, r\"{}\", '\"');\n+   |                        ^^^\n+\n error: literal with an empty format string\n   --> $DIR/write_literal_2.rs:14:24\n    |\n@@ -108,5 +114,77 @@ LL ~         {} / 3\",\n LL ~         \"1\", \"2\",\n    |\n \n-error: aborting due to 9 previous errors\n+error: literal with an empty format string\n+  --> $DIR/write_literal_2.rs:27:23\n+   |\n+LL |     writeln!(v, \"{}\", \"/\");\n+   |                       ^^^^\n+   |\n+help: try this\n+   |\n+LL -     writeln!(v, \"{}\", \"/\");\n+LL +     writeln!(v, \"/\");\n+   |\n+\n+error: literal with an empty format string\n+  --> $DIR/write_literal_2.rs:28:24\n+   |\n+LL |     writeln!(v, r\"{}\", \"/\");\n+   |                        ^^^^\n+   |\n+help: try this\n+   |\n+LL -     writeln!(v, r\"{}\", \"/\");\n+LL +     writeln!(v, r\"/\");\n+   |\n+\n+error: literal with an empty format string\n+  --> $DIR/write_literal_2.rs:29:26\n+   |\n+LL |     writeln!(v, r#\"{}\"#, \"/\");\n+   |                          ^^^^\n+   |\n+help: try this\n+   |\n+LL -     writeln!(v, r#\"{}\"#, \"/\");\n+LL +     writeln!(v, r#\"/\"#);\n+   |\n+\n+error: literal with an empty format string\n+  --> $DIR/write_literal_2.rs:30:23\n+   |\n+LL |     writeln!(v, \"{}\", r\"/\");\n+   |                       ^^^^\n+   |\n+help: try this\n+   |\n+LL -     writeln!(v, \"{}\", r\"/\");\n+LL +     writeln!(v, \"/\");\n+   |\n+\n+error: literal with an empty format string\n+  --> $DIR/write_literal_2.rs:31:23\n+   |\n+LL |     writeln!(v, \"{}\", \"/r\");\n+   |                       ^^^^\n+   |\n+help: try this\n+   |\n+LL -     writeln!(v, \"{}\", \"/r\");\n+LL +     writeln!(v, \"/r\");\n+   |\n+\n+error: literal with an empty format string\n+  --> $DIR/write_literal_2.rs:32:28\n+   |\n+LL |     writeln!(v, r#\"{}{}\"#, '#', '\"'); // hard mode\n+   |                            ^^^\n+\n+error: literal with an empty format string\n+  --> $DIR/write_literal_2.rs:32:33\n+   |\n+LL |     writeln!(v, r#\"{}{}\"#, '#', '\"'); // hard mode\n+   |                                 ^^^\n+\n+error: aborting due to 17 previous errors\n "}, {"sha": "b79364c8758c5809c32de86ced02ec9f17c79dc8", "filename": "src/tools/clippy/tests/ui/write_with_newline.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fwrite_with_newline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fwrite_with_newline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fwrite_with_newline.rs?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -56,4 +56,12 @@ fn main() {\n     write!(v, \"foo\\r\\n\");\n     write!(v, \"\\\\r\\n\"); //~ ERROR\n     write!(v, \"foo\\rbar\\n\");\n+\n+    // Ignore expanded format strings\n+    macro_rules! newline {\n+        () => {\n+            \"\\n\"\n+        };\n+    }\n+    write!(v, newline!());\n }"}, {"sha": "2baaea166d8ef189c094c195e58a19a63d1e75f3", "filename": "src/tools/clippy/tests/ui/write_with_newline.stderr", "status": "modified", "additions": 12, "deletions": 26, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fwrite_with_newline.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fwrite_with_newline.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fwrite_with_newline.stderr?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -5,7 +5,7 @@ LL |     write!(v, \"Hello/n\");\n    |     ^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::write-with-newline` implied by `-D warnings`\n-help: use `writeln!()` instead\n+help: use `writeln!` instead\n    |\n LL -     write!(v, \"Hello/n\");\n LL +     writeln!(v, \"Hello\");\n@@ -17,7 +17,7 @@ error: using `write!()` with a format string that ends in a single newline\n LL |     write!(v, \"Hello {}/n\", \"world\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-help: use `writeln!()` instead\n+help: use `writeln!` instead\n    |\n LL -     write!(v, \"Hello {}/n\", \"world\");\n LL +     writeln!(v, \"Hello {}\", \"world\");\n@@ -29,7 +29,7 @@ error: using `write!()` with a format string that ends in a single newline\n LL |     write!(v, \"Hello {} {}/n\", \"world\", \"#2\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-help: use `writeln!()` instead\n+help: use `writeln!` instead\n    |\n LL -     write!(v, \"Hello {} {}/n\", \"world\", \"#2\");\n LL +     writeln!(v, \"Hello {} {}\", \"world\", \"#2\");\n@@ -41,7 +41,7 @@ error: using `write!()` with a format string that ends in a single newline\n LL |     write!(v, \"{}/n\", 1265);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-help: use `writeln!()` instead\n+help: use `writeln!` instead\n    |\n LL -     write!(v, \"{}/n\", 1265);\n LL +     writeln!(v, \"{}\", 1265);\n@@ -53,7 +53,7 @@ error: using `write!()` with a format string that ends in a single newline\n LL |     write!(v, \"/n\");\n    |     ^^^^^^^^^^^^^^^\n    |\n-help: use `writeln!()` instead\n+help: use `writeln!` instead\n    |\n LL -     write!(v, \"/n\");\n LL +     writeln!(v);\n@@ -65,7 +65,7 @@ error: using `write!()` with a format string that ends in a single newline\n LL |     write!(v, \"//n\"); // should fail\n    |     ^^^^^^^^^^^^^^^^^\n    |\n-help: use `writeln!()` instead\n+help: use `writeln!` instead\n    |\n LL -     write!(v, \"//n\"); // should fail\n LL +     writeln!(v, \"/\"); // should fail\n@@ -81,11 +81,10 @@ LL | | \"\n LL | |     );\n    | |_____^\n    |\n-help: use `writeln!()` instead\n+help: use `writeln!` instead\n    |\n LL ~     writeln!(\n-LL |         v,\n-LL ~         \"\"\n+LL ~         v\n    |\n \n error: using `write!()` with a format string that ends in a single newline\n@@ -98,11 +97,10 @@ LL | | \"\n LL | |     );\n    | |_____^\n    |\n-help: use `writeln!()` instead\n+help: use `writeln!` instead\n    |\n LL ~     writeln!(\n-LL |         v,\n-LL ~         r\"\"\n+LL ~         v\n    |\n \n error: using `write!()` with a format string that ends in a single newline\n@@ -111,23 +109,11 @@ error: using `write!()` with a format string that ends in a single newline\n LL |     write!(v, \"/r/n\"); //~ ERROR\n    |     ^^^^^^^^^^^^^^^^^^\n    |\n-help: use `writeln!()` instead\n+help: use `writeln!` instead\n    |\n LL -     write!(v, \"/r/n\"); //~ ERROR\n LL +     writeln!(v, \"/r\"); //~ ERROR\n    |\n \n-error: using `write!()` with a format string that ends in a single newline\n-  --> $DIR/write_with_newline.rs:58:5\n-   |\n-LL |     write!(v, \"foo/rbar/n\");\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: use `writeln!()` instead\n-   |\n-LL -     write!(v, \"foo/rbar/n\");\n-LL +     writeln!(v, \"foo/rbar\");\n-   |\n-\n-error: aborting due to 10 previous errors\n+error: aborting due to 9 previous errors\n "}, {"sha": "25e69ec48e7e28cb413a8f60a1b3b5969aaa3762", "filename": "src/tools/clippy/tests/ui/writeln_empty_string.stderr", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fwriteln_empty_string.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a4fd12ebfd01d969a719e5c43c2e318441e827b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fwriteln_empty_string.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fwriteln_empty_string.stderr?ref=4a4fd12ebfd01d969a719e5c43c2e318441e827b", "patch": "@@ -1,16 +1,20 @@\n-error: using `writeln!(v, \"\")`\n+error: empty string literal in `writeln!`\n   --> $DIR/writeln_empty_string.rs:11:5\n    |\n LL |     writeln!(v, \"\");\n-   |     ^^^^^^^^^^^^^^^ help: replace it with: `writeln!(v)`\n+   |     ^^^^^^^^^^----^\n+   |               |\n+   |               help: remove the empty string\n    |\n    = note: `-D clippy::writeln-empty-string` implied by `-D warnings`\n \n-error: using `writeln!(suggestion, \"\")`\n+error: empty string literal in `writeln!`\n   --> $DIR/writeln_empty_string.rs:14:5\n    |\n LL |     writeln!(suggestion, \"\");\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `writeln!(suggestion)`\n+   |     ^^^^^^^^^^^^^^^^^^^----^\n+   |                        |\n+   |                        help: remove the empty string\n \n error: aborting due to 2 previous errors\n "}]}