{"sha": "c75cc0aa1073ca91825d6513b9b23068a2a69f5a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3NWNjMGFhMTA3M2NhOTE4MjVkNjUxM2I5YjIzMDY4YTJhNjlmNWE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-01-28T22:15:58Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-01-28T22:15:58Z"}, "message": "Merge remote-tracking branch 'codeblack08/treemap-ord' into deriving", "tree": {"sha": "9f29a460f3e5c04f0f1585f19c3baf79577ba22d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f29a460f3e5c04f0f1585f19c3baf79577ba22d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c75cc0aa1073ca91825d6513b9b23068a2a69f5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c75cc0aa1073ca91825d6513b9b23068a2a69f5a", "html_url": "https://github.com/rust-lang/rust/commit/c75cc0aa1073ca91825d6513b9b23068a2a69f5a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c75cc0aa1073ca91825d6513b9b23068a2a69f5a/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e8f36901235ae016aa0de869f2ba67722864dab6", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8f36901235ae016aa0de869f2ba67722864dab6", "html_url": "https://github.com/rust-lang/rust/commit/e8f36901235ae016aa0de869f2ba67722864dab6"}, {"sha": "6a4d1855bf8a4eb95114e9f41ce0b55468b80b73", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a4d1855bf8a4eb95114e9f41ce0b55468b80b73", "html_url": "https://github.com/rust-lang/rust/commit/6a4d1855bf8a4eb95114e9f41ce0b55468b80b73"}], "stats": {"total": 86, "additions": 82, "deletions": 4}, "files": [{"sha": "68fff9ecb3952dd2169e217e704cb56eb346cb0f", "filename": "src/libstd/treemap.rs", "status": "modified", "additions": 82, "deletions": 4, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/c75cc0aa1073ca91825d6513b9b23068a2a69f5a/src%2Flibstd%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c75cc0aa1073ca91825d6513b9b23068a2a69f5a/src%2Flibstd%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftreemap.rs?ref=c75cc0aa1073ca91825d6513b9b23068a2a69f5a", "patch": "@@ -28,10 +28,6 @@ use core::prelude::*;\n \n // range search - O(log n) retrieval of an iterator from some key\n \n-// implement Ord for TreeSet\n-// could be superset/subset-based or in-order lexicographic comparison... but\n-// there are methods for is_superset/is_subset so lexicographic is more useful\n-\n // (possibly) implement the overloads Python does for sets:\n //   * union: |\n //   * intersection: &\n@@ -71,6 +67,45 @@ impl <K: Eq Ord, V: Eq> TreeMap<K, V>: Eq {\n     pure fn ne(&self, other: &TreeMap<K, V>) -> bool { !self.eq(other) }\n }\n \n+// Lexicographical comparison\n+pure fn lt<K: Ord, V>(a: &TreeMap<K, V>, b: &TreeMap<K, V>) -> bool {\n+    let mut x = a.iter();\n+    let mut y = b.iter();\n+\n+    let (a_len, b_len) = (a.len(), b.len());\n+    for uint::min(a_len, b_len).times {\n+        unsafe { // purity workaround\n+            x = x.next();\n+            y = y.next();\n+            let (key_a,_) = x.get().unwrap();\n+            let (key_b,_) = y.get().unwrap();\n+            if *key_a < *key_b { return true; }\n+            if *key_a > *key_b { return false; }\n+        }\n+    };\n+\n+    return a_len < b_len;\n+}\n+\n+impl <K: Ord, V> TreeMap<K, V>: Ord {\n+    #[inline(always)]\n+    pure fn lt(&self, other: &TreeMap<K, V>) -> bool {\n+        lt(self, other)\n+    }\n+    #[inline(always)]\n+    pure fn le(&self, other: &TreeMap<K, V>) -> bool {\n+        !lt(other, self)\n+    }\n+    #[inline(always)]\n+    pure fn ge(&self, other: &TreeMap<K, V>) -> bool {\n+        !lt(self, other)\n+    }\n+    #[inline(always)]\n+    pure fn gt(&self, other: &TreeMap<K, V>) -> bool {\n+        lt(other, self)\n+    }\n+}\n+\n impl <K: Ord, V> TreeMap<K, V>: Container {\n     /// Return the number of elements in the map\n     pure fn len(&self) -> uint { self.length }\n@@ -220,6 +255,17 @@ impl <T: Eq Ord> TreeSet<T>: Eq {\n     pure fn ne(&self, other: &TreeSet<T>) -> bool { self.map != other.map }\n }\n \n+impl <T: Ord> TreeSet<T>: Ord {\n+    #[inline(always)]\n+    pure fn lt(&self, other: &TreeSet<T>) -> bool { self.map < other.map }\n+    #[inline(always)]\n+    pure fn le(&self, other: &TreeSet<T>) -> bool { self.map <= other.map }\n+    #[inline(always)]\n+    pure fn ge(&self, other: &TreeSet<T>) -> bool { self.map >= other.map }\n+    #[inline(always)]\n+    pure fn gt(&self, other: &TreeSet<T>) -> bool { self.map > other.map }\n+}\n+\n impl <T: Ord> TreeSet<T>: Container {\n     /// Return the number of elements in the set\n     pure fn len(&self) -> uint { self.map.len() }\n@@ -878,6 +924,38 @@ mod test_treemap {\n         assert a == b;\n     }\n \n+    #[test]\n+    fn test_lt() {\n+        let mut a = TreeMap::new();\n+        let mut b = TreeMap::new();\n+\n+        assert !(a < b) && !(b < a);\n+        assert b.insert(0, 5);\n+        assert a < b;\n+        assert a.insert(0, 7);\n+        assert !(a < b) && !(b < a);\n+        assert b.insert(-2, 0);\n+        assert b < a;\n+        assert a.insert(-5, 2);\n+        assert a < b;\n+        assert a.insert(6, 2);\n+        assert a < b && !(b < a);\n+    }\n+\n+    #[test]\n+    fn test_ord() {\n+        let mut a = TreeMap::new();\n+        let mut b = TreeMap::new();\n+\n+        assert a <= b && a >= b;\n+        assert a.insert(1, 1);\n+        assert a > b && a >= b;\n+        assert b < a && b <= a;\n+        assert b.insert(2, 2);\n+        assert b > a && b >= a;\n+        assert a < b && a <= b;\n+    }\n+\n     #[test]\n     fn test_lazy_iterator() {\n         let mut m = TreeMap::new();"}]}