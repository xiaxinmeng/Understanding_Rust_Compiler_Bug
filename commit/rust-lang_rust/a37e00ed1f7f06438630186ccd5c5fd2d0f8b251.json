{"sha": "a37e00ed1f7f06438630186ccd5c5fd2d0f8b251", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzN2UwMGVkMWY3ZjA2NDM4NjMwMTg2Y2NkNWM1ZmQyZDBmOGIyNTE=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2011-07-18T15:41:35Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-09T18:29:36Z"}, "message": "Change the ivec type syntax to [T].\n\nThis preserves the old syntax for now.", "tree": {"sha": "2b39dcc173af0618a3ff0e66d6416670b010d2e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b39dcc173af0618a3ff0e66d6416670b010d2e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a37e00ed1f7f06438630186ccd5c5fd2d0f8b251", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a37e00ed1f7f06438630186ccd5c5fd2d0f8b251", "html_url": "https://github.com/rust-lang/rust/commit/a37e00ed1f7f06438630186ccd5c5fd2d0f8b251", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a37e00ed1f7f06438630186ccd5c5fd2d0f8b251/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf7b516bdbcb531a964063271c8cd4128125a6bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf7b516bdbcb531a964063271c8cd4128125a6bc", "html_url": "https://github.com/rust-lang/rust/commit/bf7b516bdbcb531a964063271c8cd4128125a6bc"}], "stats": {"total": 112, "additions": 62, "deletions": 50}, "files": [{"sha": "7f4d5b175d33ffa691e4cd8c666efecb3d5b2133", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a37e00ed1f7f06438630186ccd5c5fd2d0f8b251/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a37e00ed1f7f06438630186ccd5c5fd2d0f8b251/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=a37e00ed1f7f06438630186ccd5c5fd2d0f8b251", "patch": "@@ -554,6 +554,11 @@ fn parse_ty(p: &parser) -> @ast::ty {\n         t = ast::ty_vec(parse_mt(p));\n         hi = p.get_hi_pos();\n         expect(p, token::RBRACKET);\n+    } else if (p.peek() == token::LBRACKET) {\n+        expect(p, token::LBRACKET);\n+        t = ast::ty_ivec(parse_mt(p));\n+        hi = p.get_hi_pos();\n+        expect(p, token::RBRACKET);\n     } else if (eat_word(p, \"fn\")) {\n         let flo = p.get_last_lo_pos();\n         t = parse_ty_fn(ast::proto_fn, p, flo);"}, {"sha": "1b34cd4830440e3e415c845dda187746fb802d40", "filename": "src/comp/syntax/print/pprust.rs", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a37e00ed1f7f06438630186ccd5c5fd2d0f8b251/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a37e00ed1f7f06438630186ccd5c5fd2d0f8b251/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs?ref=a37e00ed1f7f06438630186ccd5c5fd2d0f8b251", "patch": "@@ -287,24 +287,13 @@ fn print_type(s: &ps, ty: &ast::ty) {\n       ast::ty_box(mt) { word(s.s, \"@\"); print_mt(s, mt); }\n       ast::ty_vec(mt) { word(s.s, \"vec[\"); print_mt(s, mt); word(s.s, \"]\"); }\n       ast::ty_ivec(mt) {\n-        let parens =\n-            alt mt.ty.node {\n-              ast::ty_box(_) | ast::ty_vec(_) | ast::ty_ptr(_) |\n-              ast::ty_port(_) | ast::ty_chan(_) {\n-                true\n-              }\n-              ast::ty_path(pt, _) { ivec::len(pt.node.types) > 0u }\n-              _ { false }\n-            };\n-        if parens { popen(s); }\n-        print_type(s, *mt.ty);\n-        if parens { pclose(s); }\n         word(s.s, \"[\");\n         alt mt.mut {\n-          ast::mut. { word(s.s, \"mutable\"); }\n-          ast::maybe_mut. { word(s.s, \"mutable?\"); }\n+          ast::mut. { word_space(s, \"mutable\"); }\n+          ast::maybe_mut. { word_space(s, \"mutable?\"); }\n           ast::imm. {}\n         }\n+        print_type(s, *mt.ty);\n         word(s.s, \"]\");\n       }\n       ast::ty_ptr(mt) { word(s.s, \"*\"); print_mt(s, mt); }"}, {"sha": "8b71014f8509a5aa55347c6e5304a6dd4cedce9c", "filename": "src/test/bench/task-perf-word-count.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a37e00ed1f7f06438630186ccd5c5fd2d0f8b251/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a37e00ed1f7f06438630186ccd5c5fd2d0f8b251/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs?ref=a37e00ed1f7f06438630186ccd5c5fd2d0f8b251", "patch": "@@ -73,13 +73,13 @@ mod map_reduce {\n     type reducer = fn(str, getter) ;\n \n     tag ctrl_proto {\n-        find_reducer(u8[], chan[chan[reduce_proto]]);\n+        find_reducer([u8], chan[chan[reduce_proto]]);\n         mapper_done;\n     }\n \n     tag reduce_proto { emit_val(int); done; ref; release; }\n \n-    fn start_mappers(ctrl: chan[ctrl_proto], inputs: vec[str]) -> task[] {\n+    fn start_mappers(ctrl: chan[ctrl_proto], inputs: vec[str]) -> [task] {\n         let tasks = ~[];\n         // log_err \"starting mappers\";\n         for i: str  in inputs {"}, {"sha": "40898556b9c8b3487972f1ebd53277d04a4e92cd", "filename": "src/test/compiletest/compiletest.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a37e00ed1f7f06438630186ccd5c5fd2d0f8b251/src%2Ftest%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a37e00ed1f7f06438630186ccd5c5fd2d0f8b251/src%2Ftest%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompiletest%2Fcompiletest.rs?ref=a37e00ed1f7f06438630186ccd5c5fd2d0f8b251", "patch": "@@ -25,7 +25,7 @@ fn main(args: vec[str]) {\n     run_tests(config);\n }\n \n-fn parse_config(args: &str[]) -> config {\n+fn parse_config(args: &[str]) -> config {\n     let opts =\n         ~[getopts::reqopt(\"compile-lib-path\"),\n           getopts::reqopt(\"run-lib-path\"), getopts::reqopt(\"rustc-path\"),\n@@ -117,7 +117,7 @@ fn test_opts(config: &config) -> test::test_opts {\n }\n \n type tests_and_conv_fn =\n-    {tests: test::test_desc[], to_task: fn(&fn() ) -> task };\n+    {tests: [test::test_desc], to_task: fn(&fn() ) -> task };\n \n fn make_tests(cx: &cx) -> tests_and_conv_fn {\n     log #fmt(\"making tests from %s\", cx.config.src_base);"}, {"sha": "46fc29e18fcd2b5bbbed6a075521670631feb81c", "filename": "src/test/compiletest/header.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a37e00ed1f7f06438630186ccd5c5fd2d0f8b251/src%2Ftest%2Fcompiletest%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a37e00ed1f7f06438630186ccd5c5fd2d0f8b251/src%2Ftest%2Fcompiletest%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompiletest%2Fheader.rs?ref=a37e00ed1f7f06438630186ccd5c5fd2d0f8b251", "patch": "@@ -11,7 +11,7 @@ export is_test_ignored;\n \n type test_props = {\n     // Lines that should be expected, in order, on standard out\n-    error_patterns: str[],\n+    error_patterns: [str],\n     // Extra flags to pass to the compiler\n     compile_flags: option::t[str],\n     // If present, the name of a file that this test should match when"}, {"sha": "99f746e6b742c8298c50823e96b949b3c2895448", "filename": "src/test/compiletest/procsrv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a37e00ed1f7f06438630186ccd5c5fd2d0f8b251/src%2Ftest%2Fcompiletest%2Fprocsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a37e00ed1f7f06438630186ccd5c5fd2d0f8b251/src%2Ftest%2Fcompiletest%2Fprocsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompiletest%2Fprocsrv.rs?ref=a37e00ed1f7f06438630186ccd5c5fd2d0f8b251", "patch": "@@ -27,7 +27,7 @@ type reqchan = chan[request];\n type handle = {task: option::t[task], chan: reqchan};\n \n tag request {\n-    exec(str, str, str[], chan[response]);\n+    exec(str, str, [str], chan[response]);\n     stop;\n }\n \n@@ -189,7 +189,7 @@ fn clone_str(s: &str) -> str {\n     new\n }\n \n-fn clone_ivecstr(v: &str[]) -> str[] {\n+fn clone_ivecstr(v: &[str]) -> [str] {\n     let r = ~[];\n     for t: str in ivec::slice(v, 0u, ivec::len(v)) {\n         r += ~[clone_str(t)];"}, {"sha": "92862ac3d8901d008975c802259ba58c3e675486", "filename": "src/test/pretty/ivec-type.pp", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a37e00ed1f7f06438630186ccd5c5fd2d0f8b251/src%2Ftest%2Fpretty%2Fivec-type.pp", "raw_url": "https://github.com/rust-lang/rust/raw/a37e00ed1f7f06438630186ccd5c5fd2d0f8b251/src%2Ftest%2Fpretty%2Fivec-type.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fivec-type.pp?ref=a37e00ed1f7f06438630186ccd5c5fd2d0f8b251", "patch": "@@ -0,0 +1,9 @@\n+// pp-exact:ivec-type.pp\n+\n+fn f1(x: [int]) { }\n+\n+fn g1() { f1(~[1, 2, 3]); }\n+\n+fn f2(x: [int]) { }\n+\n+fn g2() { f2(~[1, 2, 3]); }"}, {"sha": "a825519a8124bb6b9c6169d565a3c8fe6346930e", "filename": "src/test/pretty/ivec-type.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a37e00ed1f7f06438630186ccd5c5fd2d0f8b251/src%2Ftest%2Fpretty%2Fivec-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a37e00ed1f7f06438630186ccd5c5fd2d0f8b251/src%2Ftest%2Fpretty%2Fivec-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fivec-type.rs?ref=a37e00ed1f7f06438630186ccd5c5fd2d0f8b251", "patch": "@@ -0,0 +1,9 @@\n+// pp-exact:ivec-type.pp\n+\n+fn f1(x: int[]) { }\n+\n+fn g1() { f1(~[1, 2, 3]); }\n+\n+fn f2(x: [int]) { }\n+\n+fn g2() { f2(~[1, 2, 3]); }"}, {"sha": "24f3b755f2f3b9583cea83a3ab8a59c1c9265b42", "filename": "src/test/run-pass/alloca-from-derived-tydesc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a37e00ed1f7f06438630186ccd5c5fd2d0f8b251/src%2Ftest%2Frun-pass%2Falloca-from-derived-tydesc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a37e00ed1f7f06438630186ccd5c5fd2d0f8b251/src%2Ftest%2Frun-pass%2Falloca-from-derived-tydesc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falloca-from-derived-tydesc.rs?ref=a37e00ed1f7f06438630186ccd5c5fd2d0f8b251", "patch": "@@ -2,6 +2,6 @@ tag option[T] { some(T); none; }\n \n type r[T] = {mutable v: (option[T])[]};\n \n-fn f[T]() -> T[] { ret ~[]; }\n+fn f[T]() -> [T] { ret ~[]; }\n \n-fn main() { let r: r[int] = {mutable v: ~[]}; r.v = f(); }\n\\ No newline at end of file\n+fn main() { let r: r[int] = {mutable v: ~[]}; r.v = f(); }"}, {"sha": "668806802130099f159339ea8ddcb4940093cea5", "filename": "src/test/run-pass/autobind.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a37e00ed1f7f06438630186ccd5c5fd2d0f8b251/src%2Ftest%2Frun-pass%2Fautobind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a37e00ed1f7f06438630186ccd5c5fd2d0f8b251/src%2Ftest%2Frun-pass%2Fautobind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautobind.rs?ref=a37e00ed1f7f06438630186ccd5c5fd2d0f8b251", "patch": "@@ -1,9 +1,9 @@\n-fn f[T](x: &T[]) -> T { ret x.(0); }\n+fn f[T](x: &[T]) -> T { ret x.(0); }\n \n-fn g(act: fn(&int[]) -> int ) -> int { ret act(~[1, 2, 3]); }\n+fn g(act: fn(&[int]) -> int ) -> int { ret act(~[1, 2, 3]); }\n \n fn main() {\n     assert (g(f) == 1);\n-    let f1: fn(&str[]) -> str  = f;\n+    let f1: fn(&[str]) -> str  = f;\n     assert (f1(~[\"x\", \"y\", \"z\"]) == \"x\");\n-}\n\\ No newline at end of file\n+}"}, {"sha": "9134f3a78de52a087f31e75eba74043ef115d0af", "filename": "src/test/run-pass/infer-fn-tail-expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a37e00ed1f7f06438630186ccd5c5fd2d0f8b251/src%2Ftest%2Frun-pass%2Finfer-fn-tail-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a37e00ed1f7f06438630186ccd5c5fd2d0f8b251/src%2Ftest%2Frun-pass%2Finfer-fn-tail-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Finfer-fn-tail-expr.rs?ref=a37e00ed1f7f06438630186ccd5c5fd2d0f8b251", "patch": "@@ -1,5 +1,5 @@\n // issue #680\n \n-fn f() -> int[] { ~[] }\n+fn f() -> [int] { ~[] }\n \n-fn main() { }\n\\ No newline at end of file\n+fn main() { }"}, {"sha": "dec51540cff42fa262a73ecced44c35385acdeac", "filename": "src/test/run-pass/interior-vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a37e00ed1f7f06438630186ccd5c5fd2d0f8b251/src%2Ftest%2Frun-pass%2Finterior-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a37e00ed1f7f06438630186ccd5c5fd2d0f8b251/src%2Ftest%2Frun-pass%2Finterior-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Finterior-vec.rs?ref=a37e00ed1f7f06438630186ccd5c5fd2d0f8b251", "patch": "@@ -3,11 +3,11 @@\n import rusti::ivec_len;\n \n native \"rust-intrinsic\" mod rusti {\n-    fn ivec_len[T](v: &T[]) -> uint;\n+    fn ivec_len[T](v: &[T]) -> uint;\n }\n \n fn main() {\n-    let v: int[] = ~[];\n+    let v: [int] = ~[];\n     assert (ivec_len(v) == 0u); // zero-length\n     let x = ~[1, 2];\n     assert (ivec_len(x) == 2u); // on stack"}, {"sha": "2e682e2154ea1057c66e9c5145cbcb5eece515f0", "filename": "src/test/run-pass/issue-687.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a37e00ed1f7f06438630186ccd5c5fd2d0f8b251/src%2Ftest%2Frun-pass%2Fissue-687.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a37e00ed1f7f06438630186ccd5c5fd2d0f8b251/src%2Ftest%2Frun-pass%2Fissue-687.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-687.rs?ref=a37e00ed1f7f06438630186ccd5c5fd2d0f8b251", "patch": "@@ -1,20 +1,20 @@\n use std;\n import std::ivec;\n \n-tag msg { closed; received(u8[]); }\n+tag msg { closed; received([u8]); }\n \n-fn producer(c: chan[u8[]]) {\n+fn producer(c: chan[[u8]]) {\n     c <| ~[1u8, 2u8, 3u8, 4u8];\n-    let empty: u8[] = ~[];\n+    let empty: [u8] = ~[];\n     c <| empty;\n }\n \n-fn packager(cb: chan[chan[u8[]]], msg: chan[msg]) {\n-    let p: port[u8[]] = port();\n+fn packager(cb: chan[chan[[u8]]], msg: chan[msg]) {\n+    let p: port[[u8]] = port();\n     cb <| chan(p);\n     while true {\n         log \"waiting for bytes\";\n-        let data: u8[];\n+        let data: [u8];\n         p |> data;\n         log \"got bytes\";\n         if ivec::len[u8](data) == 0u {\n@@ -33,10 +33,10 @@ fn packager(cb: chan[chan[u8[]]], msg: chan[msg]) {\n \n fn main() {\n     let p: port[msg] = port();\n-    let recv_reader: port[chan[u8[]]] = port();\n+    let recv_reader: port[chan[[u8]]] = port();\n     let pack = spawn packager(chan(recv_reader), chan(p));\n \n-    let source_chan: chan[u8[]];\n+    let source_chan: chan[[u8]];\n     recv_reader |> source_chan;\n     let prod: task = spawn producer(source_chan);\n \n@@ -52,4 +52,4 @@ fn main() {\n           }\n         }\n     }\n-}\n\\ No newline at end of file\n+}"}, {"sha": "edf42f2fa910605e97e00fee4412ef9f55e04f23", "filename": "src/test/run-pass/ivec-add.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a37e00ed1f7f06438630186ccd5c5fd2d0f8b251/src%2Ftest%2Frun-pass%2Fivec-add.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a37e00ed1f7f06438630186ccd5c5fd2d0f8b251/src%2Ftest%2Frun-pass%2Fivec-add.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fivec-add.rs?ref=a37e00ed1f7f06438630186ccd5c5fd2d0f8b251", "patch": "@@ -1,6 +1,6 @@\n-fn double[T](a: &T) -> T[] { ret ~[a] + ~[a]; }\n+fn double[T](a: &T) -> [T] { ret ~[a] + ~[a]; }\n \n-fn double_int(a: int) -> int[] { ret ~[a] + ~[a]; }\n+fn double_int(a: int) -> [int] { ret ~[a] + ~[a]; }\n \n fn main() {\n     let d = double(1);"}, {"sha": "213e13846581f34125419cb752f2d7d98130ab63", "filename": "src/test/run-pass/ivec-pass-by-value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a37e00ed1f7f06438630186ccd5c5fd2d0f8b251/src%2Ftest%2Frun-pass%2Fivec-pass-by-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a37e00ed1f7f06438630186ccd5c5fd2d0f8b251/src%2Ftest%2Frun-pass%2Fivec-pass-by-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fivec-pass-by-value.rs?ref=a37e00ed1f7f06438630186ccd5c5fd2d0f8b251", "patch": "@@ -1,3 +1,3 @@\n-fn f(a: int[]) { }\n+fn f(a: [int]) { }\n fn main() { f(~[1, 2, 3, 4, 5]); }\n "}, {"sha": "bd6f70752001bc1d1c108d6c0dde7b77c5bdebb3", "filename": "src/test/run-pass/task-comm-16.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a37e00ed1f7f06438630186ccd5c5fd2d0f8b251/src%2Ftest%2Frun-pass%2Ftask-comm-16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a37e00ed1f7f06438630186ccd5c5fd2d0f8b251/src%2Ftest%2Frun-pass%2Ftask-comm-16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-16.rs?ref=a37e00ed1f7f06438630186ccd5c5fd2d0f8b251", "patch": "@@ -22,9 +22,9 @@ fn test_rec() {\n fn test_vec() {\n     let po = comm::mk_port();\n     let ch = po.mk_chan();\n-    let v0: int[] = ~[0, 1, 2];\n+    let v0: [int] = ~[0, 1, 2];\n     ch.send(v0);\n-    let v1: int[];\n+    let v1: [int];\n     v1 = po.recv();\n     assert (v1.(0) == 0);\n     assert (v1.(1) == 1);\n@@ -84,4 +84,4 @@ fn main() {\n     test_str();\n     test_tag();\n     test_chan();\n-}\n\\ No newline at end of file\n+}"}, {"sha": "766587e6c76cb972393914243c56eec478100298", "filename": "src/test/stdtest/ivec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a37e00ed1f7f06438630186ccd5c5fd2d0f8b251/src%2Ftest%2Fstdtest%2Fivec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a37e00ed1f7f06438630186ccd5c5fd2d0f8b251/src%2Ftest%2Fstdtest%2Fivec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fivec.rs?ref=a37e00ed1f7f06438630186ccd5c5fd2d0f8b251", "patch": "@@ -19,7 +19,7 @@ fn add(x: &uint, y: &uint) -> uint { ret x + y; }\n \n #[test]\n fn test_reserve_and_on_heap() {\n-    let v: int[] = ~[1, 2];\n+    let v: [int] = ~[1, 2];\n     assert (!ivec::on_heap(v));\n     ivec::reserve(v, 8u);\n     assert (ivec::on_heap(v));"}, {"sha": "3e52de4ad2e74eda68f372b11048999c39c4b41f", "filename": "src/test/stdtest/sort_ivec.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a37e00ed1f7f06438630186ccd5c5fd2d0f8b251/src%2Ftest%2Fstdtest%2Fsort_ivec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a37e00ed1f7f06438630186ccd5c5fd2d0f8b251/src%2Ftest%2Fstdtest%2Fsort_ivec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fsort_ivec.rs?ref=a37e00ed1f7f06438630186ccd5c5fd2d0f8b251", "patch": "@@ -1,7 +1,7 @@\n \n use std;\n \n-fn check_sort(v1: &int[], v2: &int[]) {\n+fn check_sort(v1: &[int], v2: &[int]) {\n     let len = std::ivec::len[int](v1);\n     fn lteq(a: &int, b: &int) -> bool { ret a <= b; }\n     let f = lteq;\n@@ -18,11 +18,11 @@ fn test() {\n         check_sort(v1, v2);\n     }\n     { let v1 = ~[1, 1, 1]; let v2 = ~[1, 1, 1]; check_sort(v1, v2); }\n-    { let v1: int[] = ~[]; let v2: int[] = ~[]; check_sort(v1, v2); }\n+    { let v1: [int] = ~[]; let v2: [int] = ~[]; check_sort(v1, v2); }\n     { let v1 = ~[9]; let v2 = ~[9]; check_sort(v1, v2); }\n     {\n         let v1 = ~[9, 3, 3, 3, 9];\n         let v2 = ~[3, 3, 3, 9, 9];\n         check_sort(v1, v2);\n     }\n-}\n\\ No newline at end of file\n+}"}]}