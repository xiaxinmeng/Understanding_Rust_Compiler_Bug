{"sha": "631e98973868a0bfdcb91d42d7f2e9af1863721b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzMWU5ODk3Mzg2OGEwYmZkY2I5MWQ0MmQ3ZjJlOWFmMTg2MzcyMWI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-13T03:19:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-13T03:19:13Z"}, "message": "Auto merge of #83759 - SkiFire13:fix-diag, r=estebank\n\nHandle more span edge cases in generics diagnostics\n\nThis should fix invalid suggestions that didn't account for empty bracket pairs (`<>`) or type bindings.", "tree": {"sha": "c0d67addc425fcbe333fc3c2fad0f4bf256ca318", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c0d67addc425fcbe333fc3c2fad0f4bf256ca318"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/631e98973868a0bfdcb91d42d7f2e9af1863721b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/631e98973868a0bfdcb91d42d7f2e9af1863721b", "html_url": "https://github.com/rust-lang/rust/commit/631e98973868a0bfdcb91d42d7f2e9af1863721b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/631e98973868a0bfdcb91d42d7f2e9af1863721b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9daf546b77dbeab7754a80d7336cd8d00c6746e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/9daf546b77dbeab7754a80d7336cd8d00c6746e4", "html_url": "https://github.com/rust-lang/rust/commit/9daf546b77dbeab7754a80d7336cd8d00c6746e4"}, {"sha": "7f5ad614ae708de002185aca99e1ecc62e133554", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f5ad614ae708de002185aca99e1ecc62e133554", "html_url": "https://github.com/rust-lang/rust/commit/7f5ad614ae708de002185aca99e1ecc62e133554"}], "stats": {"total": 1037, "additions": 909, "deletions": 128}, "files": [{"sha": "ac69fa202025035b20fc33d03a37eed1425dfcb0", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/631e98973868a0bfdcb91d42d7f2e9af1863721b/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/631e98973868a0bfdcb91d42d7f2e9af1863721b/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=631e98973868a0bfdcb91d42d7f2e9af1863721b", "patch": "@@ -278,7 +278,7 @@ impl ParenthesizedArgs {\n             .cloned()\n             .map(|input| AngleBracketedArg::Arg(GenericArg::Type(input)))\n             .collect();\n-        AngleBracketedArgs { span: self.span, args }\n+        AngleBracketedArgs { span: self.inputs_span, args }\n     }\n }\n "}, {"sha": "fe4459ccdc0dfb028356ec65772df64212e1965c", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/631e98973868a0bfdcb91d42d7f2e9af1863721b/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/631e98973868a0bfdcb91d42d7f2e9af1863721b/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=631e98973868a0bfdcb91d42d7f2e9af1863721b", "patch": "@@ -62,7 +62,7 @@ use rustc_span::edition::Edition;\n use rustc_span::hygiene::ExpnId;\n use rustc_span::source_map::{respan, DesugaringKind};\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n-use rustc_span::Span;\n+use rustc_span::{Span, DUMMY_SP};\n use rustc_target::spec::abi::Abi;\n \n use smallvec::{smallvec, SmallVec};\n@@ -2084,6 +2084,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             args: &[],\n             bindings: arena_vec![self; self.output_ty_binding(span, output_ty)],\n             parenthesized: false,\n+            span_ext: DUMMY_SP,\n         });\n \n         hir::GenericBound::LangItemTrait(\n@@ -2788,6 +2789,7 @@ struct GenericArgsCtor<'hir> {\n     args: SmallVec<[hir::GenericArg<'hir>; 4]>,\n     bindings: &'hir [hir::TypeBinding<'hir>],\n     parenthesized: bool,\n+    span: Span,\n }\n \n impl<'hir> GenericArgsCtor<'hir> {\n@@ -2800,6 +2802,7 @@ impl<'hir> GenericArgsCtor<'hir> {\n             args: arena.alloc_from_iter(self.args),\n             bindings: self.bindings,\n             parenthesized: self.parenthesized,\n+            span_ext: self.span,\n         }\n     }\n }"}, {"sha": "fe9f1fb20f05608fe21bc43ffe957ee80a52d6ea", "filename": "compiler/rustc_ast_lowering/src/path.rs", "status": "modified", "additions": 44, "deletions": 23, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/631e98973868a0bfdcb91d42d7f2e9af1863721b/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/631e98973868a0bfdcb91d42d7f2e9af1863721b/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs?ref=631e98973868a0bfdcb91d42d7f2e9af1863721b", "patch": "@@ -10,7 +10,7 @@ use rustc_hir::GenericArg;\n use rustc_session::lint::builtin::ELIDED_LIFETIMES_IN_PATHS;\n use rustc_session::lint::BuiltinLintDiagnostics;\n use rustc_span::symbol::Ident;\n-use rustc_span::Span;\n+use rustc_span::{BytePos, Span, DUMMY_SP};\n \n use smallvec::smallvec;\n use tracing::debug;\n@@ -267,23 +267,34 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 },\n             }\n         } else {\n-            self.lower_angle_bracketed_parameter_data(&Default::default(), param_mode, itctx)\n+            (\n+                GenericArgsCtor {\n+                    args: Default::default(),\n+                    bindings: &[],\n+                    parenthesized: false,\n+                    span: path_span.shrink_to_hi(),\n+                },\n+                param_mode == ParamMode::Optional,\n+            )\n         };\n \n         let has_lifetimes =\n             generic_args.args.iter().any(|arg| matches!(arg, GenericArg::Lifetime(_)));\n-        let first_generic_span = generic_args\n-            .args\n-            .iter()\n-            .map(|a| a.span())\n-            .chain(generic_args.bindings.iter().map(|b| b.span))\n-            .next();\n         if !generic_args.parenthesized && !has_lifetimes {\n+            // Note: these spans are used for diagnostics when they can't be inferred.\n+            // See rustc_resolve::late::lifetimes::LifetimeContext::add_missing_lifetime_specifiers_label\n+            let elided_lifetime_span = if generic_args.span.is_empty() {\n+                // If there are no brackets, use the identifier span.\n+                segment.ident.span\n+            } else if generic_args.is_empty() {\n+                // If there are brackets, but not generic arguments, then use the opening bracket\n+                generic_args.span.with_hi(generic_args.span.lo() + BytePos(1))\n+            } else {\n+                // Else use an empty span right after the opening bracket.\n+                generic_args.span.with_lo(generic_args.span.lo() + BytePos(1)).shrink_to_lo()\n+            };\n             generic_args.args = self\n-                .elided_path_lifetimes(\n-                    first_generic_span.map_or(segment.ident.span, |s| s.shrink_to_lo()),\n-                    expected_lifetimes,\n-                )\n+                .elided_path_lifetimes(elided_lifetime_span, expected_lifetimes)\n                 .map(GenericArg::Lifetime)\n                 .chain(generic_args.args.into_iter())\n                 .collect();\n@@ -292,15 +303,15 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 let no_non_lt_args = generic_args.args.len() == expected_lifetimes;\n                 let no_bindings = generic_args.bindings.is_empty();\n                 let (incl_angl_brckt, insertion_sp, suggestion) = if no_non_lt_args && no_bindings {\n-                    // If there are no (non-implicit) generic args or associated type\n-                    // bindings, our suggestion includes the angle brackets.\n+                    // If there are no generic args, our suggestion can include the angle brackets.\n                     (true, path_span.shrink_to_hi(), format!(\"<{}>\", anon_lt_suggestion))\n                 } else {\n-                    // Otherwise (sorry, this is kind of gross) we need to infer the\n-                    // place to splice in the `'_, ` from the generics that do exist.\n-                    let first_generic_span = first_generic_span\n-                        .expect(\"already checked that non-lifetime args or bindings exist\");\n-                    (false, first_generic_span.shrink_to_lo(), format!(\"{}, \", anon_lt_suggestion))\n+                    // Otherwise we'll insert a `'_, ` right after the opening bracket.\n+                    let span = generic_args\n+                        .span\n+                        .with_lo(generic_args.span.lo() + BytePos(1))\n+                        .shrink_to_lo();\n+                    (false, span, format!(\"{}, \", anon_lt_suggestion))\n                 };\n                 match self.anonymous_lifetime_mode {\n                     // In create-parameter mode we error here because we don't want to support\n@@ -362,7 +373,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             hir_id: Some(id),\n             res: Some(self.lower_res(res)),\n             infer_args,\n-            args: if generic_args.is_empty() {\n+            args: if generic_args.is_empty() && generic_args.span.is_empty() {\n                 None\n             } else {\n                 Some(self.arena.alloc(generic_args.into_generic_args(self.arena)))\n@@ -395,7 +406,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             }\n             AngleBracketedArg::Arg(_) => None,\n         }));\n-        let ctor = GenericArgsCtor { args, bindings, parenthesized: false };\n+        let ctor = GenericArgsCtor { args, bindings, parenthesized: false, span: data.span };\n         (ctor, !has_non_lt_args && param_mode == ParamMode::Optional)\n     }\n \n@@ -420,7 +431,12 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             let args = smallvec![GenericArg::Type(this.ty_tup(*inputs_span, inputs))];\n             let binding = this.output_ty_binding(output_ty.span, output_ty);\n             (\n-                GenericArgsCtor { args, bindings: arena_vec![this; binding], parenthesized: true },\n+                GenericArgsCtor {\n+                    args,\n+                    bindings: arena_vec![this; binding],\n+                    parenthesized: true,\n+                    span: data.inputs_span,\n+                },\n                 false,\n             )\n         })\n@@ -436,7 +452,12 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         let kind = hir::TypeBindingKind::Equality { ty };\n         let args = arena_vec![self;];\n         let bindings = arena_vec![self;];\n-        let gen_args = self.arena.alloc(hir::GenericArgs { args, bindings, parenthesized: false });\n+        let gen_args = self.arena.alloc(hir::GenericArgs {\n+            args,\n+            bindings,\n+            parenthesized: false,\n+            span_ext: DUMMY_SP,\n+        });\n         hir::TypeBinding { hir_id: self.next_id(), gen_args, span, ident, kind }\n     }\n }"}, {"sha": "e689ae4d81db703aa64f88b8a1c8a3193bcc04c1", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 16, "deletions": 25, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/631e98973868a0bfdcb91d42d7f2e9af1863721b/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/631e98973868a0bfdcb91d42d7f2e9af1863721b/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=631e98973868a0bfdcb91d42d7f2e9af1863721b", "patch": "@@ -12,7 +12,7 @@ pub use rustc_ast::{CaptureBy, Movability, Mutability};\n use rustc_ast::{InlineAsmOptions, InlineAsmTemplatePiece};\n use rustc_data_structures::sync::{par_for_each_in, Send, Sync};\n use rustc_macros::HashStable_Generic;\n-use rustc_span::source_map::{SourceMap, Spanned};\n+use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{def_id::LocalDefId, BytePos};\n use rustc_span::{MultiSpan, Span, DUMMY_SP};\n@@ -314,11 +314,18 @@ pub struct GenericArgs<'hir> {\n     /// This is required mostly for pretty-printing and diagnostics,\n     /// but also for changing lifetime elision rules to be \"function-like\".\n     pub parenthesized: bool,\n+    /// The span encompassing arguments and the surrounding brackets `<>` or `()`\n+    ///       Foo<A, B, AssocTy = D>           Fn(T, U, V) -> W\n+    ///          ^^^^^^^^^^^^^^^^^^^             ^^^^^^^^^\n+    /// Note that this may be:\n+    /// - empty, if there are no generic brackets (but there may be hidden lifetimes)\n+    /// - dummy, if this was generated while desugaring\n+    pub span_ext: Span,\n }\n \n impl GenericArgs<'_> {\n     pub const fn none() -> Self {\n-        Self { args: &[], bindings: &[], parenthesized: false }\n+        Self { args: &[], bindings: &[], parenthesized: false, span_ext: DUMMY_SP }\n     }\n \n     pub fn inputs(&self) -> &[Ty<'_>] {\n@@ -356,33 +363,17 @@ impl GenericArgs<'_> {\n         own_counts\n     }\n \n+    /// The span encompassing the text inside the surrounding brackets.\n+    /// It will also include bindings if they aren't in the form `-> Ret`\n+    /// Returns `None` if the span is empty (e.g. no brackets) or dummy\n     pub fn span(&self) -> Option<Span> {\n-        self.args\n-            .iter()\n-            .filter(|arg| !arg.is_synthetic())\n-            .map(|arg| arg.span())\n-            .reduce(|span1, span2| span1.to(span2))\n+        let span_ext = self.span_ext()?;\n+        Some(span_ext.with_lo(span_ext.lo() + BytePos(1)).with_hi(span_ext.hi() - BytePos(1)))\n     }\n \n     /// Returns span encompassing arguments and their surrounding `<>` or `()`\n-    pub fn span_ext(&self, sm: &SourceMap) -> Option<Span> {\n-        let mut span = self.span()?;\n-\n-        let (o, c) = if self.parenthesized { ('(', ')') } else { ('<', '>') };\n-\n-        if let Ok(snippet) = sm.span_to_snippet(span) {\n-            let snippet = snippet.as_bytes();\n-\n-            if snippet[0] != (o as u8) || snippet[snippet.len() - 1] != (c as u8) {\n-                span = sm.span_extend_to_prev_char(span, o, true);\n-                span = span.with_lo(span.lo() - BytePos(1));\n-\n-                span = sm.span_extend_to_next_char(span, c, true);\n-                span = span.with_hi(span.hi() + BytePos(1));\n-            }\n-        }\n-\n-        Some(span)\n+    pub fn span_ext(&self) -> Option<Span> {\n+        Some(self.span_ext).filter(|span| !span.is_empty())\n     }\n \n     pub fn is_empty(&self) -> bool {"}, {"sha": "13e457507cf32cf87e6a04e45b76a8909d798686", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 28, "deletions": 6, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/631e98973868a0bfdcb91d42d7f2e9af1863721b/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/631e98973868a0bfdcb91d42d7f2e9af1863721b/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=631e98973868a0bfdcb91d42d7f2e9af1863721b", "patch": "@@ -1821,7 +1821,7 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n     crate fn add_missing_lifetime_specifiers_label(\n         &self,\n         err: &mut DiagnosticBuilder<'_>,\n-        spans_with_counts: Vec<(Span, usize)>,\n+        mut spans_with_counts: Vec<(Span, usize)>,\n         lifetime_names: &FxHashSet<Symbol>,\n         lifetime_spans: Vec<Span>,\n         params: &[ElisionFailureInfo],\n@@ -1831,13 +1831,21 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n             .map(|(span, _)| self.tcx.sess.source_map().span_to_snippet(*span).ok())\n             .collect();\n \n-        for (span, count) in &spans_with_counts {\n+        // Empty generics are marked with a span of \"<\", but since from now on\n+        // that information is in the snippets it can be removed from the spans.\n+        for ((span, _), snippet) in spans_with_counts.iter_mut().zip(&snippets) {\n+            if snippet.as_deref() == Some(\"<\") {\n+                *span = span.shrink_to_hi();\n+            }\n+        }\n+\n+        for &(span, count) in &spans_with_counts {\n             err.span_label(\n-                *span,\n+                span,\n                 format!(\n                     \"expected {} lifetime parameter{}\",\n-                    if *count == 1 { \"named\".to_string() } else { count.to_string() },\n-                    pluralize!(*count),\n+                    if count == 1 { \"named\".to_string() } else { count.to_string() },\n+                    pluralize!(count),\n                 ),\n             );\n         }\n@@ -1982,6 +1990,14 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n                                                 .collect::<Vec<_>>()\n                                                 .join(\", \"),\n                                         )\n+                                    } else if snippet == \"<\" || snippet == \"(\" {\n+                                        (\n+                                            span.shrink_to_hi(),\n+                                            std::iter::repeat(\"'static\")\n+                                                .take(count)\n+                                                .collect::<Vec<_>>()\n+                                                .join(\", \"),\n+                                        )\n                                     } else {\n                                         (\n                                             span.shrink_to_hi(),\n@@ -1990,7 +2006,7 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n                                                 std::iter::repeat(\"'static\")\n                                                     .take(count)\n                                                     .collect::<Vec<_>>()\n-                                                    .join(\", \")\n+                                                    .join(\", \"),\n                                             ),\n                                         )\n                                     }\n@@ -2045,6 +2061,9 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n                         Some(\"&\") => Some(Box::new(|name| format!(\"&{} \", name))),\n                         Some(\"'_\") => Some(Box::new(|n| n.to_string())),\n                         Some(\"\") => Some(Box::new(move |n| format!(\"{}, \", n).repeat(count))),\n+                        Some(\"<\") => Some(Box::new(move |n| {\n+                            std::iter::repeat(n).take(count).collect::<Vec<_>>().join(\", \")\n+                        })),\n                         Some(snippet) if !snippet.ends_with('>') => Some(Box::new(move |name| {\n                             format!(\n                                 \"{}<{}>\",\n@@ -2071,6 +2090,9 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n                         Some(\"\") => {\n                             Some(std::iter::repeat(\"'a, \").take(count).collect::<Vec<_>>().join(\"\"))\n                         }\n+                        Some(\"<\") => {\n+                            Some(std::iter::repeat(\"'a\").take(count).collect::<Vec<_>>().join(\", \"))\n+                        }\n                         Some(snippet) => Some(format!(\n                             \"{}<{}>\",\n                             snippet,"}, {"sha": "56f288ff051c2290e1b9cc347ed6b149182e0781", "filename": "compiler/rustc_typeck/src/structured_errors/wrong_number_of_generic_args.rs", "status": "modified", "additions": 30, "deletions": 31, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/631e98973868a0bfdcb91d42d7f2e9af1863721b/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/631e98973868a0bfdcb91d42d7f2e9af1863721b/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs?ref=631e98973868a0bfdcb91d42d7f2e9af1863721b", "patch": "@@ -94,14 +94,10 @@ impl<'a, 'tcx> WrongNumberOfGenericArgs<'a, 'tcx> {\n         gen_args: &'a hir::GenericArgs<'a>,\n         def_id: DefId,\n     ) -> Self {\n-        let angle_brackets = if gen_args.is_empty() {\n-            AngleBrackets::Missing\n+        let angle_brackets = if gen_args.span_ext().is_none() {\n+            if gen_args.is_empty() { AngleBrackets::Missing } else { AngleBrackets::Implied }\n         } else {\n-            if gen_args.span().is_none() {\n-                AngleBrackets::Implied\n-            } else {\n-                AngleBrackets::Available\n-            }\n+            AngleBrackets::Available\n         };\n \n         Self {\n@@ -337,7 +333,7 @@ impl<'a, 'tcx> WrongNumberOfGenericArgs<'a, 'tcx> {\n             ),\n         };\n \n-        if self.gen_args.span().is_some() {\n+        if self.gen_args.span_ext().is_some() {\n             format!(\n                 \"this {} takes {}{} {} argument{} but {} {} supplied\",\n                 def_kind,\n@@ -579,27 +575,32 @@ impl<'a, 'tcx> WrongNumberOfGenericArgs<'a, 'tcx> {\n                 err.span_suggestion_verbose(span, &msg, sugg, Applicability::HasPlaceholders);\n             }\n             AngleBrackets::Available => {\n-                // angle brackets exist, so we just insert missing arguments after the existing\n-                // type or const args\n-\n-                let index_last_provided_arg =\n-                    self.get_lifetime_args_offset() + self.num_provided_type_or_const_args() - 1;\n-                if index_last_provided_arg < self.gen_args.args.len() {\n-                    let first_arg_span =\n-                        self.gen_args.args[index_last_provided_arg].span().shrink_to_hi();\n-                    let source_map = self.tcx.sess.source_map();\n-                    if let Ok(first_gen_arg) = source_map.span_to_snippet(first_arg_span) {\n-                        let sugg = format!(\"{}, {}\", first_gen_arg, suggested_args);\n-                        debug!(\"sugg: {:?}\", sugg);\n+                let gen_args_span = self.gen_args.span().unwrap();\n+                let sugg_offset =\n+                    self.get_lifetime_args_offset() + self.num_provided_type_or_const_args();\n \n-                        err.span_suggestion_verbose(\n-                            first_arg_span,\n-                            &msg,\n-                            sugg,\n-                            Applicability::HasPlaceholders,\n-                        );\n-                    }\n-                }\n+                let (sugg_span, is_first) = if sugg_offset == 0 {\n+                    (gen_args_span.shrink_to_lo(), true)\n+                } else {\n+                    let arg_span = self.gen_args.args[sugg_offset - 1].span();\n+                    // If we came here then inferred lifetimes's spans can only point\n+                    // to either the opening bracket or to the space right after.\n+                    // Both of these spans have an `hi` lower than or equal to the span\n+                    // of the generics excluding the brackets.\n+                    // This allows us to check if `arg_span` is the artificial span of\n+                    // an inferred lifetime, in which case the generic we're suggesting to\n+                    // add will be the first visible, even if it isn't the actual first generic.\n+                    (arg_span.shrink_to_hi(), arg_span.hi() <= gen_args_span.lo())\n+                };\n+\n+                let sugg_prefix = if is_first { \"\" } else { \", \" };\n+                let sugg_suffix =\n+                    if is_first && !self.gen_args.bindings.is_empty() { \", \" } else { \"\" };\n+\n+                let sugg = format!(\"{}{}{}\", sugg_prefix, suggested_args, sugg_suffix);\n+                debug!(\"sugg: {:?}\", sugg);\n+\n+                err.span_suggestion_verbose(sugg_span, &msg, sugg, Applicability::HasPlaceholders);\n             }\n         }\n     }\n@@ -695,13 +696,11 @@ impl<'a, 'tcx> WrongNumberOfGenericArgs<'a, 'tcx> {\n         };\n \n         if remove_entire_generics {\n-            let sm = self.tcx.sess.source_map();\n-\n             let span = self\n                 .path_segment\n                 .args\n                 .unwrap()\n-                .span_ext(sm)\n+                .span_ext()\n                 .unwrap()\n                 .with_lo(self.path_segment.ident.span.hi());\n "}, {"sha": "400600a086c0c0031f9a81ff6454b5dbb1da31ff", "filename": "src/test/ui/generic-associated-types/gat-trait-path-parenthesised-args.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/631e98973868a0bfdcb91d42d7f2e9af1863721b/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/631e98973868a0bfdcb91d42d7f2e9af1863721b/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.stderr?ref=631e98973868a0bfdcb91d42d7f2e9af1863721b", "patch": "@@ -49,7 +49,7 @@ error[E0107]: this associated type takes 0 generic arguments but 1 generic argum\n   --> $DIR/gat-trait-path-parenthesised-args.rs:8:27\n    |\n LL | fn foo<'a>(arg: Box<dyn X<Y('a) = &'a ()>>) {}\n-   |                           ^-------------- help: remove these generics\n+   |                           ^---- help: remove these generics\n    |                           |\n    |                           expected 0 generic arguments\n    |"}, {"sha": "ec2ed9926e2aa04539316be7f78ad7d2308783bd", "filename": "src/test/ui/generics/wrong-number-of-args.rs", "status": "modified", "additions": 182, "deletions": 0, "changes": 182, "blob_url": "https://github.com/rust-lang/rust/blob/631e98973868a0bfdcb91d42d7f2e9af1863721b/src%2Ftest%2Fui%2Fgenerics%2Fwrong-number-of-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/631e98973868a0bfdcb91d42d7f2e9af1863721b/src%2Ftest%2Fui%2Fgenerics%2Fwrong-number-of-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fwrong-number-of-args.rs?ref=631e98973868a0bfdcb91d42d7f2e9af1863721b", "patch": "@@ -36,6 +36,10 @@ mod type_and_type {\n     type D = Ty<usize, String, char>;\n     //~^ ERROR this struct takes 2 generic arguments but 3 generic arguments\n     //~| HELP remove this\n+\n+    type E = Ty<>;\n+    //~^ ERROR this struct takes 2 generic arguments but 0 generic arguments were supplied\n+    //~| HELP add missing\n }\n \n mod lifetime_and_type {\n@@ -56,6 +60,12 @@ mod lifetime_and_type {\n     //~| HELP consider introducing\n \n     type D = Ty<'static, usize>;\n+\n+    type E = Ty<>;\n+    //~^ ERROR this struct takes 1 generic argument but 0 generic arguments\n+    //~| ERROR missing lifetime specifier\n+    //~| HELP consider introducing\n+    //~| HELP add missing\n }\n \n mod type_and_type_and_type {\n@@ -76,6 +86,10 @@ mod type_and_type_and_type {\n     type E = Ty<usize, String, char, f64>;\n     //~^ ERROR this struct takes at most 3\n     //~| HELP remove\n+\n+    type F = Ty<>;\n+    //~^ ERROR this struct takes at least 2 generic arguments but 0 generic arguments\n+    //~| HELP add missing\n }\n \n // Traits have an implicit `Self` type - these tests ensure we don't accidentally return it\n@@ -112,6 +126,166 @@ mod r#trait {\n     type E = Box<dyn GenericType<String, usize>>;\n     //~^ ERROR this trait takes 1 generic argument but 2 generic arguments\n     //~| HELP remove\n+\n+    type F = Box<dyn GenericLifetime<>>;\n+    //~^ ERROR missing lifetime specifier\n+    //~| HELP consider introducing\n+\n+    type G = Box<dyn GenericType<>>;\n+    //~^ ERROR this trait takes 1 generic argument but 0 generic arguments\n+    //~| HELP add missing\n+}\n+\n+mod associated_item {\n+    mod non_generic {\n+        trait NonGenericAT {\n+            type AssocTy;\n+        }\n+\n+        type A = Box<dyn NonGenericAT<usize, AssocTy=()>>;\n+        //~^ ERROR this trait takes 0 generic arguments but 1 generic argument\n+        //~| HELP remove\n+    }\n+\n+    mod lifetime {\n+        trait GenericLifetimeAT<'a> {\n+            type AssocTy;\n+        }\n+\n+        type A = Box<dyn GenericLifetimeAT<AssocTy=()>>;\n+        //~^ ERROR missing lifetime specifier\n+        //~| HELP consider introducing\n+\n+        type B = Box<dyn GenericLifetimeAT<'static, 'static, AssocTy=()>>;\n+        //~^ ERROR this trait takes 1 lifetime argument but 2 lifetime arguments were supplied\n+        //~| HELP remove\n+\n+        type C = Box<dyn GenericLifetimeAT<(), AssocTy=()>>;\n+        //~^ ERROR missing lifetime specifier\n+        //~| HELP consider introducing\n+        //~| ERROR this trait takes 0 generic arguments but 1 generic argument\n+        //~| HELP remove\n+    }\n+\n+    mod r#type {\n+        trait GenericTypeAT<A> {\n+            type AssocTy;\n+        }\n+\n+        type A = Box<dyn GenericTypeAT<AssocTy=()>>;\n+        //~^ ERROR this trait takes 1 generic argument but 0 generic arguments\n+        //~| HELP add missing\n+\n+        type B = Box<dyn GenericTypeAT<(), (), AssocTy=()>>;\n+        //~^ ERROR this trait takes 1 generic argument but 2 generic arguments\n+        //~| HELP remove\n+\n+        type C = Box<dyn GenericTypeAT<'static, AssocTy=()>>;\n+        //~^ ERROR this trait takes 1 generic argument but 0 generic arguments\n+        //~| HELP add missing\n+        //~| ERROR this trait takes 0 lifetime arguments but 1 lifetime argument was supplied\n+        //~| HELP remove\n+    }\n+\n+    mod lifetime_and_type {\n+        trait GenericLifetimeTypeAT<'a, A> {\n+            type AssocTy;\n+        }\n+\n+        type A = Box<dyn GenericLifetimeTypeAT<AssocTy=()>>;\n+        //~^ ERROR this trait takes 1 generic argument but 0 generic arguments\n+        //~| HELP add missing\n+        //~| ERROR missing lifetime specifier\n+        //~| HELP consider introducing\n+\n+        type B = Box<dyn GenericLifetimeTypeAT<'static, AssocTy=()>>;\n+        //~^ ERROR this trait takes 1 generic argument but 0 generic arguments were supplied\n+        //~| HELP add missing\n+\n+        type C = Box<dyn GenericLifetimeTypeAT<'static, 'static, AssocTy=()>>;\n+        //~^ ERROR this trait takes 1 lifetime argument but 2 lifetime arguments were supplied\n+        //~| HELP remove\n+        //~| ERROR this trait takes 1 generic argument but 0 generic arguments\n+        //~| HELP add missing\n+\n+        type D = Box<dyn GenericLifetimeTypeAT<(), AssocTy=()>>;\n+        //~^ ERROR missing lifetime specifier\n+        //~| HELP consider introducing\n+\n+        type E = Box<dyn GenericLifetimeTypeAT<(), (), AssocTy=()>>;\n+        //~^ ERROR missing lifetime specifier\n+        //~| HELP consider introducing\n+        //~| ERROR this trait takes 1 generic argument but 2 generic arguments\n+        //~| HELP remove\n+\n+        type F = Box<dyn GenericLifetimeTypeAT<'static, 'static, (), AssocTy=()>>;\n+        //~^ ERROR this trait takes 1 lifetime argument but 2 lifetime arguments were supplied\n+        //~| HELP remove\n+\n+        type G = Box<dyn GenericLifetimeTypeAT<'static, (), (), AssocTy=()>>;\n+        //~^ ERROR this trait takes 1 generic argument but 2 generic arguments\n+        //~| HELP remove\n+\n+        type H = Box<dyn GenericLifetimeTypeAT<'static, 'static, (), (), AssocTy=()>>;\n+        //~^ ERROR this trait takes 1 lifetime argument but 2 lifetime arguments were supplied\n+        //~| HELP remove\n+        //~| ERROR this trait takes 1 generic argument but 2 generic arguments\n+        //~| HELP remove\n+    }\n+\n+    mod type_and_type {\n+        trait GenericTypeTypeAT<A, B> {\n+            type AssocTy;\n+        }\n+\n+        type A = Box<dyn GenericTypeTypeAT<AssocTy=()>>;\n+        //~^ ERROR this trait takes 2 generic arguments but 0 generic arguments\n+        //~| HELP add missing\n+\n+        type B = Box<dyn GenericTypeTypeAT<(), AssocTy=()>>;\n+        //~^ ERROR this trait takes 2 generic arguments but 1 generic argument\n+        //~| HELP add missing\n+\n+        type C = Box<dyn GenericTypeTypeAT<(), (), (), AssocTy=()>>;\n+        //~^ ERROR this trait takes 2 generic arguments but 3 generic arguments\n+        //~| HELP remove\n+    }\n+\n+    mod lifetime_and_lifetime {\n+        trait GenericLifetimeLifetimeAT<'a, 'b> {\n+            type AssocTy;\n+        }\n+\n+        type A = Box<dyn GenericLifetimeLifetimeAT<AssocTy=()>>;\n+        //~^ ERROR missing lifetime specifier\n+        //~| HELP consider introducing\n+\n+        type B = Box<dyn GenericLifetimeLifetimeAT<'static, AssocTy=()>>;\n+        //~^ ERROR this trait takes 2 lifetime arguments but 1 lifetime argument was supplied\n+        //~| HELP add missing lifetime argument\n+    }\n+\n+    mod lifetime_and_lifetime_and_type {\n+        trait GenericLifetimeLifetimeTypeAT<'a, 'b, A> {\n+            type AssocTy;\n+        }\n+\n+        type A = Box<dyn GenericLifetimeLifetimeTypeAT<AssocTy=()>>;\n+        //~^ ERROR missing lifetime specifier\n+        //~| HELP consider introducing\n+        //~| ERROR this trait takes 1 generic argument but 0 generic arguments\n+        //~| HELP add missing\n+\n+        type B = Box<dyn GenericLifetimeLifetimeTypeAT<'static, AssocTy=()>>;\n+        //~^ ERROR this trait takes 2 lifetime arguments but 1 lifetime argument was supplied\n+        //~| HELP add missing lifetime argument\n+        //~| ERROR this trait takes 1 generic argument but 0 generic arguments\n+        //~| HELP add missing\n+\n+        type C = Box<dyn GenericLifetimeLifetimeTypeAT<'static, (), AssocTy=()>>;\n+        //~^ ERROR this trait takes 2 lifetime arguments but 1 lifetime argument was supplied\n+        //~| HELP add missing lifetime argument\n+    }\n }\n \n mod stdlib {\n@@ -135,6 +309,10 @@ mod stdlib {\n         type D = HashMap<usize, String, char, f64>;\n         //~^ ERROR this struct takes at most 3\n         //~| HELP remove this\n+\n+        type E = HashMap<>;\n+        //~^ ERROR this struct takes at least 2 generic arguments but 0 generic arguments\n+        //~| HELP add missing\n     }\n \n     mod result {\n@@ -155,6 +333,10 @@ mod stdlib {\n         type D = Result<usize, String, char>;\n         //~^ ERROR this enum takes 2 generic arguments but 3 generic arguments\n         //~| HELP remove\n+\n+        type E = Result<>;\n+        //~^ ERROR this enum takes 2 generic arguments but 0 generic arguments\n+        //~| HELP add missing\n     }\n }\n "}, {"sha": "17a924cedad2ce5f878cbcdddbcf0507163106cd", "filename": "src/test/ui/generics/wrong-number-of-args.stderr", "status": "modified", "additions": 595, "deletions": 32, "changes": 627, "blob_url": "https://github.com/rust-lang/rust/blob/631e98973868a0bfdcb91d42d7f2e9af1863721b/src%2Ftest%2Fui%2Fgenerics%2Fwrong-number-of-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/631e98973868a0bfdcb91d42d7f2e9af1863721b/src%2Ftest%2Fui%2Fgenerics%2Fwrong-number-of-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fwrong-number-of-args.stderr?ref=631e98973868a0bfdcb91d42d7f2e9af1863721b", "patch": "@@ -116,14 +116,30 @@ note: struct defined here, with 2 generic parameters: `A`, `B`\n LL |     struct Ty<A, B>;\n    |            ^^ -  -\n \n+error[E0107]: this struct takes 2 generic arguments but 0 generic arguments were supplied\n+  --> $DIR/wrong-number-of-args.rs:40:14\n+   |\n+LL |     type E = Ty<>;\n+   |              ^^ expected 2 generic arguments\n+   |\n+note: struct defined here, with 2 generic parameters: `A`, `B`\n+  --> $DIR/wrong-number-of-args.rs:24:12\n+   |\n+LL |     struct Ty<A, B>;\n+   |            ^^ -  -\n+help: add missing generic arguments\n+   |\n+LL |     type E = Ty<A, B>;\n+   |                 ^^^^\n+\n error[E0107]: missing generics for struct `lifetime_and_type::Ty`\n-  --> $DIR/wrong-number-of-args.rs:44:14\n+  --> $DIR/wrong-number-of-args.rs:48:14\n    |\n LL |     type A = Ty;\n    |              ^^ expected 1 generic argument\n    |\n note: struct defined here, with 1 generic parameter: `T`\n-  --> $DIR/wrong-number-of-args.rs:42:12\n+  --> $DIR/wrong-number-of-args.rs:46:12\n    |\n LL |     struct Ty<'a, T>;\n    |            ^^     -\n@@ -133,7 +149,7 @@ LL |     type A = Ty<T>;\n    |              ^^^^^\n \n error[E0106]: missing lifetime specifier\n-  --> $DIR/wrong-number-of-args.rs:44:14\n+  --> $DIR/wrong-number-of-args.rs:48:14\n    |\n LL |     type A = Ty;\n    |              ^^ expected named lifetime parameter\n@@ -144,13 +160,13 @@ LL |     type A<'a> = Ty<'a>;\n    |           ^^^^   ^^^^^^\n \n error[E0107]: this struct takes 1 generic argument but 0 generic arguments were supplied\n-  --> $DIR/wrong-number-of-args.rs:50:14\n+  --> $DIR/wrong-number-of-args.rs:54:14\n    |\n LL |     type B = Ty<'static>;\n    |              ^^ expected 1 generic argument\n    |\n note: struct defined here, with 1 generic parameter: `T`\n-  --> $DIR/wrong-number-of-args.rs:42:12\n+  --> $DIR/wrong-number-of-args.rs:46:12\n    |\n LL |     struct Ty<'a, T>;\n    |            ^^     -\n@@ -160,7 +176,7 @@ LL |     type B = Ty<'static, T>;\n    |                        ^^^\n \n error[E0106]: missing lifetime specifier\n-  --> $DIR/wrong-number-of-args.rs:54:17\n+  --> $DIR/wrong-number-of-args.rs:58:17\n    |\n LL |     type C = Ty<usize>;\n    |                 ^ expected named lifetime parameter\n@@ -170,14 +186,41 @@ help: consider introducing a named lifetime parameter\n LL |     type C<'a> = Ty<'a, usize>;\n    |           ^^^^      ^^^\n \n-error[E0107]: missing generics for struct `type_and_type_and_type::Ty`\n+error[E0107]: this struct takes 1 generic argument but 0 generic arguments were supplied\n   --> $DIR/wrong-number-of-args.rs:64:14\n    |\n+LL |     type E = Ty<>;\n+   |              ^^ expected 1 generic argument\n+   |\n+note: struct defined here, with 1 generic parameter: `T`\n+  --> $DIR/wrong-number-of-args.rs:46:12\n+   |\n+LL |     struct Ty<'a, T>;\n+   |            ^^     -\n+help: add missing generic argument\n+   |\n+LL |     type E = Ty<T>;\n+   |                 ^\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/wrong-number-of-args.rs:64:16\n+   |\n+LL |     type E = Ty<>;\n+   |                ^- expected named lifetime parameter\n+   |\n+help: consider introducing a named lifetime parameter\n+   |\n+LL |     type E<'a> = Ty<'a>;\n+   |           ^^^^      ^^\n+\n+error[E0107]: missing generics for struct `type_and_type_and_type::Ty`\n+  --> $DIR/wrong-number-of-args.rs:74:14\n+   |\n LL |     type A = Ty;\n    |              ^^ expected at least 2 generic arguments\n    |\n note: struct defined here, with at least 2 generic parameters: `A`, `B`\n-  --> $DIR/wrong-number-of-args.rs:62:12\n+  --> $DIR/wrong-number-of-args.rs:72:12\n    |\n LL |     struct Ty<A, B, C = &'static str>;\n    |            ^^ -  -\n@@ -187,15 +230,15 @@ LL |     type A = Ty<A, B>;\n    |              ^^^^^^^^\n \n error[E0107]: this struct takes at least 2 generic arguments but 1 generic argument was supplied\n-  --> $DIR/wrong-number-of-args.rs:68:14\n+  --> $DIR/wrong-number-of-args.rs:78:14\n    |\n LL |     type B = Ty<usize>;\n    |              ^^ ----- supplied 1 generic argument\n    |              |\n    |              expected at least 2 generic arguments\n    |\n note: struct defined here, with at least 2 generic parameters: `A`, `B`\n-  --> $DIR/wrong-number-of-args.rs:62:12\n+  --> $DIR/wrong-number-of-args.rs:72:12\n    |\n LL |     struct Ty<A, B, C = &'static str>;\n    |            ^^ -  -\n@@ -205,35 +248,51 @@ LL |     type B = Ty<usize, B>;\n    |                      ^^^\n \n error[E0107]: this struct takes at most 3 generic arguments but 4 generic arguments were supplied\n-  --> $DIR/wrong-number-of-args.rs:76:14\n+  --> $DIR/wrong-number-of-args.rs:86:14\n    |\n LL |     type E = Ty<usize, String, char, f64>;\n    |              ^^                      --- help: remove this generic argument\n    |              |\n    |              expected at most 3 generic arguments\n    |\n note: struct defined here, with at most 3 generic parameters: `A`, `B`, `C`\n-  --> $DIR/wrong-number-of-args.rs:62:12\n+  --> $DIR/wrong-number-of-args.rs:72:12\n    |\n LL |     struct Ty<A, B, C = &'static str>;\n    |            ^^ -  -  -\n \n+error[E0107]: this struct takes at least 2 generic arguments but 0 generic arguments were supplied\n+  --> $DIR/wrong-number-of-args.rs:90:14\n+   |\n+LL |     type F = Ty<>;\n+   |              ^^ expected at least 2 generic arguments\n+   |\n+note: struct defined here, with at least 2 generic parameters: `A`, `B`\n+  --> $DIR/wrong-number-of-args.rs:72:12\n+   |\n+LL |     struct Ty<A, B, C = &'static str>;\n+   |            ^^ -  -\n+help: add missing generic arguments\n+   |\n+LL |     type F = Ty<A, B>;\n+   |                 ^^^^\n+\n error[E0107]: this trait takes 0 generic arguments but 1 generic argument was supplied\n-  --> $DIR/wrong-number-of-args.rs:96:22\n+  --> $DIR/wrong-number-of-args.rs:110:22\n    |\n LL |     type A = Box<dyn NonGeneric<usize>>;\n    |                      ^^^^^^^^^^------- help: remove these generics\n    |                      |\n    |                      expected 0 generic arguments\n    |\n note: trait defined here, with 0 generic parameters\n-  --> $DIR/wrong-number-of-args.rs:84:11\n+  --> $DIR/wrong-number-of-args.rs:98:11\n    |\n LL |     trait NonGeneric {\n    |           ^^^^^^^^^^\n \n error[E0106]: missing lifetime specifier\n-  --> $DIR/wrong-number-of-args.rs:100:22\n+  --> $DIR/wrong-number-of-args.rs:114:22\n    |\n LL |     type B = Box<dyn GenericLifetime>;\n    |                      ^^^^^^^^^^^^^^^ expected named lifetime parameter\n@@ -244,27 +303,27 @@ LL |     type B<'a> = Box<dyn GenericLifetime<'a>>;\n    |           ^^^^           ^^^^^^^^^^^^^^^^^^^\n \n error[E0107]: this trait takes 1 lifetime argument but 2 lifetime arguments were supplied\n-  --> $DIR/wrong-number-of-args.rs:104:22\n+  --> $DIR/wrong-number-of-args.rs:118:22\n    |\n LL |     type C = Box<dyn GenericLifetime<'static, 'static>>;\n    |                      ^^^^^^^^^^^^^^^          ------- help: remove this lifetime argument\n    |                      |\n    |                      expected 1 lifetime argument\n    |\n note: trait defined here, with 1 lifetime parameter: `'a`\n-  --> $DIR/wrong-number-of-args.rs:88:11\n+  --> $DIR/wrong-number-of-args.rs:102:11\n    |\n LL |     trait GenericLifetime<'a> {\n    |           ^^^^^^^^^^^^^^^ --\n \n error[E0107]: missing generics for trait `GenericType`\n-  --> $DIR/wrong-number-of-args.rs:108:22\n+  --> $DIR/wrong-number-of-args.rs:122:22\n    |\n LL |     type D = Box<dyn GenericType>;\n    |                      ^^^^^^^^^^^ expected 1 generic argument\n    |\n note: trait defined here, with 1 generic parameter: `A`\n-  --> $DIR/wrong-number-of-args.rs:92:11\n+  --> $DIR/wrong-number-of-args.rs:106:11\n    |\n LL |     trait GenericType<A> {\n    |           ^^^^^^^^^^^ -\n@@ -274,21 +333,493 @@ LL |     type D = Box<dyn GenericType<A>>;\n    |                      ^^^^^^^^^^^^^^\n \n error[E0107]: this trait takes 1 generic argument but 2 generic arguments were supplied\n-  --> $DIR/wrong-number-of-args.rs:112:22\n+  --> $DIR/wrong-number-of-args.rs:126:22\n    |\n LL |     type E = Box<dyn GenericType<String, usize>>;\n    |                      ^^^^^^^^^^^         ----- help: remove this generic argument\n    |                      |\n    |                      expected 1 generic argument\n    |\n note: trait defined here, with 1 generic parameter: `A`\n-  --> $DIR/wrong-number-of-args.rs:92:11\n+  --> $DIR/wrong-number-of-args.rs:106:11\n    |\n LL |     trait GenericType<A> {\n    |           ^^^^^^^^^^^ -\n \n+error[E0106]: missing lifetime specifier\n+  --> $DIR/wrong-number-of-args.rs:130:37\n+   |\n+LL |     type F = Box<dyn GenericLifetime<>>;\n+   |                                     ^- expected named lifetime parameter\n+   |\n+help: consider introducing a named lifetime parameter\n+   |\n+LL |     type F<'a> = Box<dyn GenericLifetime<'a>>;\n+   |           ^^^^                           ^^\n+\n+error[E0107]: this trait takes 1 generic argument but 0 generic arguments were supplied\n+  --> $DIR/wrong-number-of-args.rs:134:22\n+   |\n+LL |     type G = Box<dyn GenericType<>>;\n+   |                      ^^^^^^^^^^^ expected 1 generic argument\n+   |\n+note: trait defined here, with 1 generic parameter: `A`\n+  --> $DIR/wrong-number-of-args.rs:106:11\n+   |\n+LL |     trait GenericType<A> {\n+   |           ^^^^^^^^^^^ -\n+help: add missing generic argument\n+   |\n+LL |     type G = Box<dyn GenericType<A>>;\n+   |                                  ^\n+\n+error[E0107]: this trait takes 0 generic arguments but 1 generic argument was supplied\n+  --> $DIR/wrong-number-of-args.rs:145:26\n+   |\n+LL |         type A = Box<dyn NonGenericAT<usize, AssocTy=()>>;\n+   |                          ^^^^^^^^^^^^------------------- help: remove these generics\n+   |                          |\n+   |                          expected 0 generic arguments\n+   |\n+note: trait defined here, with 0 generic parameters\n+  --> $DIR/wrong-number-of-args.rs:141:15\n+   |\n+LL |         trait NonGenericAT {\n+   |               ^^^^^^^^^^^^\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/wrong-number-of-args.rs:155:44\n+   |\n+LL |         type A = Box<dyn GenericLifetimeAT<AssocTy=()>>;\n+   |                                            ^ expected named lifetime parameter\n+   |\n+help: consider introducing a named lifetime parameter\n+   |\n+LL |         type A<'a> = Box<dyn GenericLifetimeAT<'a, AssocTy=()>>;\n+   |               ^^^^                             ^^^\n+\n+error[E0107]: this trait takes 1 lifetime argument but 2 lifetime arguments were supplied\n+  --> $DIR/wrong-number-of-args.rs:159:26\n+   |\n+LL |         type B = Box<dyn GenericLifetimeAT<'static, 'static, AssocTy=()>>;\n+   |                          ^^^^^^^^^^^^^^^^^          ------- help: remove this lifetime argument\n+   |                          |\n+   |                          expected 1 lifetime argument\n+   |\n+note: trait defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/wrong-number-of-args.rs:151:15\n+   |\n+LL |         trait GenericLifetimeAT<'a> {\n+   |               ^^^^^^^^^^^^^^^^^ --\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/wrong-number-of-args.rs:163:44\n+   |\n+LL |         type C = Box<dyn GenericLifetimeAT<(), AssocTy=()>>;\n+   |                                            ^ expected named lifetime parameter\n+   |\n+help: consider introducing a named lifetime parameter\n+   |\n+LL |         type C<'a> = Box<dyn GenericLifetimeAT<'a, (), AssocTy=()>>;\n+   |               ^^^^                             ^^^\n+\n+error[E0107]: this trait takes 0 generic arguments but 1 generic argument was supplied\n+  --> $DIR/wrong-number-of-args.rs:163:26\n+   |\n+LL |         type C = Box<dyn GenericLifetimeAT<(), AssocTy=()>>;\n+   |                          ^^^^^^^^^^^^^^^^^ -- help: remove this generic argument\n+   |                          |\n+   |                          expected 0 generic arguments\n+   |\n+note: trait defined here, with 0 generic parameters\n+  --> $DIR/wrong-number-of-args.rs:151:15\n+   |\n+LL |         trait GenericLifetimeAT<'a> {\n+   |               ^^^^^^^^^^^^^^^^^\n+\n+error[E0107]: this trait takes 1 generic argument but 0 generic arguments were supplied\n+  --> $DIR/wrong-number-of-args.rs:175:26\n+   |\n+LL |         type A = Box<dyn GenericTypeAT<AssocTy=()>>;\n+   |                          ^^^^^^^^^^^^^ expected 1 generic argument\n+   |\n+note: trait defined here, with 1 generic parameter: `A`\n+  --> $DIR/wrong-number-of-args.rs:171:15\n+   |\n+LL |         trait GenericTypeAT<A> {\n+   |               ^^^^^^^^^^^^^ -\n+help: add missing generic argument\n+   |\n+LL |         type A = Box<dyn GenericTypeAT<A, AssocTy=()>>;\n+   |                                        ^^\n+\n+error[E0107]: this trait takes 1 generic argument but 2 generic arguments were supplied\n+  --> $DIR/wrong-number-of-args.rs:179:26\n+   |\n+LL |         type B = Box<dyn GenericTypeAT<(), (), AssocTy=()>>;\n+   |                          ^^^^^^^^^^^^^     -- help: remove this generic argument\n+   |                          |\n+   |                          expected 1 generic argument\n+   |\n+note: trait defined here, with 1 generic parameter: `A`\n+  --> $DIR/wrong-number-of-args.rs:171:15\n+   |\n+LL |         trait GenericTypeAT<A> {\n+   |               ^^^^^^^^^^^^^ -\n+\n+error[E0107]: this trait takes 0 lifetime arguments but 1 lifetime argument was supplied\n+  --> $DIR/wrong-number-of-args.rs:183:26\n+   |\n+LL |         type C = Box<dyn GenericTypeAT<'static, AssocTy=()>>;\n+   |                          ^^^^^^^^^^^^^--------------------- help: remove these generics\n+   |                          |\n+   |                          expected 0 lifetime arguments\n+   |\n+note: trait defined here, with 0 lifetime parameters\n+  --> $DIR/wrong-number-of-args.rs:171:15\n+   |\n+LL |         trait GenericTypeAT<A> {\n+   |               ^^^^^^^^^^^^^\n+\n+error[E0107]: this trait takes 1 generic argument but 0 generic arguments were supplied\n+  --> $DIR/wrong-number-of-args.rs:183:26\n+   |\n+LL |         type C = Box<dyn GenericTypeAT<'static, AssocTy=()>>;\n+   |                          ^^^^^^^^^^^^^ expected 1 generic argument\n+   |\n+note: trait defined here, with 1 generic parameter: `A`\n+  --> $DIR/wrong-number-of-args.rs:171:15\n+   |\n+LL |         trait GenericTypeAT<A> {\n+   |               ^^^^^^^^^^^^^ -\n+help: add missing generic argument\n+   |\n+LL |         type C = Box<dyn GenericTypeAT<'static, A, AssocTy=()>>;\n+   |                                               ^^^\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/wrong-number-of-args.rs:195:48\n+   |\n+LL |         type A = Box<dyn GenericLifetimeTypeAT<AssocTy=()>>;\n+   |                                                ^ expected named lifetime parameter\n+   |\n+help: consider introducing a named lifetime parameter\n+   |\n+LL |         type A<'a> = Box<dyn GenericLifetimeTypeAT<'a, AssocTy=()>>;\n+   |               ^^^^                                 ^^^\n+\n+error[E0107]: this trait takes 1 generic argument but 0 generic arguments were supplied\n+  --> $DIR/wrong-number-of-args.rs:195:26\n+   |\n+LL |         type A = Box<dyn GenericLifetimeTypeAT<AssocTy=()>>;\n+   |                          ^^^^^^^^^^^^^^^^^^^^^ expected 1 generic argument\n+   |\n+note: trait defined here, with 1 generic parameter: `A`\n+  --> $DIR/wrong-number-of-args.rs:191:15\n+   |\n+LL |         trait GenericLifetimeTypeAT<'a, A> {\n+   |               ^^^^^^^^^^^^^^^^^^^^^     -\n+help: add missing generic argument\n+   |\n+LL |         type A = Box<dyn GenericLifetimeTypeAT<A, AssocTy=()>>;\n+   |                                                ^^\n+\n+error[E0107]: this trait takes 1 generic argument but 0 generic arguments were supplied\n+  --> $DIR/wrong-number-of-args.rs:201:26\n+   |\n+LL |         type B = Box<dyn GenericLifetimeTypeAT<'static, AssocTy=()>>;\n+   |                          ^^^^^^^^^^^^^^^^^^^^^ expected 1 generic argument\n+   |\n+note: trait defined here, with 1 generic parameter: `A`\n+  --> $DIR/wrong-number-of-args.rs:191:15\n+   |\n+LL |         trait GenericLifetimeTypeAT<'a, A> {\n+   |               ^^^^^^^^^^^^^^^^^^^^^     -\n+help: add missing generic argument\n+   |\n+LL |         type B = Box<dyn GenericLifetimeTypeAT<'static, A, AssocTy=()>>;\n+   |                                                       ^^^\n+\n+error[E0107]: this trait takes 1 lifetime argument but 2 lifetime arguments were supplied\n+  --> $DIR/wrong-number-of-args.rs:205:26\n+   |\n+LL |         type C = Box<dyn GenericLifetimeTypeAT<'static, 'static, AssocTy=()>>;\n+   |                          ^^^^^^^^^^^^^^^^^^^^^          ------- help: remove this lifetime argument\n+   |                          |\n+   |                          expected 1 lifetime argument\n+   |\n+note: trait defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/wrong-number-of-args.rs:191:15\n+   |\n+LL |         trait GenericLifetimeTypeAT<'a, A> {\n+   |               ^^^^^^^^^^^^^^^^^^^^^ --\n+\n+error[E0107]: this trait takes 1 generic argument but 0 generic arguments were supplied\n+  --> $DIR/wrong-number-of-args.rs:205:26\n+   |\n+LL |         type C = Box<dyn GenericLifetimeTypeAT<'static, 'static, AssocTy=()>>;\n+   |                          ^^^^^^^^^^^^^^^^^^^^^ expected 1 generic argument\n+   |\n+note: trait defined here, with 1 generic parameter: `A`\n+  --> $DIR/wrong-number-of-args.rs:191:15\n+   |\n+LL |         trait GenericLifetimeTypeAT<'a, A> {\n+   |               ^^^^^^^^^^^^^^^^^^^^^     -\n+help: add missing generic argument\n+   |\n+LL |         type C = Box<dyn GenericLifetimeTypeAT<'static, 'static, A, AssocTy=()>>;\n+   |                                                                ^^^\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/wrong-number-of-args.rs:211:48\n+   |\n+LL |         type D = Box<dyn GenericLifetimeTypeAT<(), AssocTy=()>>;\n+   |                                                ^ expected named lifetime parameter\n+   |\n+help: consider introducing a named lifetime parameter\n+   |\n+LL |         type D<'a> = Box<dyn GenericLifetimeTypeAT<'a, (), AssocTy=()>>;\n+   |               ^^^^                                 ^^^\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/wrong-number-of-args.rs:215:48\n+   |\n+LL |         type E = Box<dyn GenericLifetimeTypeAT<(), (), AssocTy=()>>;\n+   |                                                ^ expected named lifetime parameter\n+   |\n+help: consider introducing a named lifetime parameter\n+   |\n+LL |         type E<'a> = Box<dyn GenericLifetimeTypeAT<'a, (), (), AssocTy=()>>;\n+   |               ^^^^                                 ^^^\n+\n+error[E0107]: this trait takes 1 generic argument but 2 generic arguments were supplied\n+  --> $DIR/wrong-number-of-args.rs:215:26\n+   |\n+LL |         type E = Box<dyn GenericLifetimeTypeAT<(), (), AssocTy=()>>;\n+   |                          ^^^^^^^^^^^^^^^^^^^^^     -- help: remove this generic argument\n+   |                          |\n+   |                          expected 1 generic argument\n+   |\n+note: trait defined here, with 1 generic parameter: `A`\n+  --> $DIR/wrong-number-of-args.rs:191:15\n+   |\n+LL |         trait GenericLifetimeTypeAT<'a, A> {\n+   |               ^^^^^^^^^^^^^^^^^^^^^     -\n+\n+error[E0107]: this trait takes 1 lifetime argument but 2 lifetime arguments were supplied\n+  --> $DIR/wrong-number-of-args.rs:221:26\n+   |\n+LL |         type F = Box<dyn GenericLifetimeTypeAT<'static, 'static, (), AssocTy=()>>;\n+   |                          ^^^^^^^^^^^^^^^^^^^^^          ------- help: remove this lifetime argument\n+   |                          |\n+   |                          expected 1 lifetime argument\n+   |\n+note: trait defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/wrong-number-of-args.rs:191:15\n+   |\n+LL |         trait GenericLifetimeTypeAT<'a, A> {\n+   |               ^^^^^^^^^^^^^^^^^^^^^ --\n+\n+error[E0107]: this trait takes 1 generic argument but 2 generic arguments were supplied\n+  --> $DIR/wrong-number-of-args.rs:225:26\n+   |\n+LL |         type G = Box<dyn GenericLifetimeTypeAT<'static, (), (), AssocTy=()>>;\n+   |                          ^^^^^^^^^^^^^^^^^^^^^              -- help: remove this generic argument\n+   |                          |\n+   |                          expected 1 generic argument\n+   |\n+note: trait defined here, with 1 generic parameter: `A`\n+  --> $DIR/wrong-number-of-args.rs:191:15\n+   |\n+LL |         trait GenericLifetimeTypeAT<'a, A> {\n+   |               ^^^^^^^^^^^^^^^^^^^^^     -\n+\n+error[E0107]: this trait takes 1 lifetime argument but 2 lifetime arguments were supplied\n+  --> $DIR/wrong-number-of-args.rs:229:26\n+   |\n+LL |         type H = Box<dyn GenericLifetimeTypeAT<'static, 'static, (), (), AssocTy=()>>;\n+   |                          ^^^^^^^^^^^^^^^^^^^^^          ------- help: remove this lifetime argument\n+   |                          |\n+   |                          expected 1 lifetime argument\n+   |\n+note: trait defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/wrong-number-of-args.rs:191:15\n+   |\n+LL |         trait GenericLifetimeTypeAT<'a, A> {\n+   |               ^^^^^^^^^^^^^^^^^^^^^ --\n+\n+error[E0107]: this trait takes 1 generic argument but 2 generic arguments were supplied\n+  --> $DIR/wrong-number-of-args.rs:229:26\n+   |\n+LL |         type H = Box<dyn GenericLifetimeTypeAT<'static, 'static, (), (), AssocTy=()>>;\n+   |                          ^^^^^^^^^^^^^^^^^^^^^                       -- help: remove this generic argument\n+   |                          |\n+   |                          expected 1 generic argument\n+   |\n+note: trait defined here, with 1 generic parameter: `A`\n+  --> $DIR/wrong-number-of-args.rs:191:15\n+   |\n+LL |         trait GenericLifetimeTypeAT<'a, A> {\n+   |               ^^^^^^^^^^^^^^^^^^^^^     -\n+\n+error[E0107]: this trait takes 2 generic arguments but 0 generic arguments were supplied\n+  --> $DIR/wrong-number-of-args.rs:241:26\n+   |\n+LL |         type A = Box<dyn GenericTypeTypeAT<AssocTy=()>>;\n+   |                          ^^^^^^^^^^^^^^^^^ expected 2 generic arguments\n+   |\n+note: trait defined here, with 2 generic parameters: `A`, `B`\n+  --> $DIR/wrong-number-of-args.rs:237:15\n+   |\n+LL |         trait GenericTypeTypeAT<A, B> {\n+   |               ^^^^^^^^^^^^^^^^^ -  -\n+help: add missing generic arguments\n+   |\n+LL |         type A = Box<dyn GenericTypeTypeAT<A, B, AssocTy=()>>;\n+   |                                            ^^^^^\n+\n+error[E0107]: this trait takes 2 generic arguments but 1 generic argument was supplied\n+  --> $DIR/wrong-number-of-args.rs:245:26\n+   |\n+LL |         type B = Box<dyn GenericTypeTypeAT<(), AssocTy=()>>;\n+   |                          ^^^^^^^^^^^^^^^^^ -- supplied 1 generic argument\n+   |                          |\n+   |                          expected 2 generic arguments\n+   |\n+note: trait defined here, with 2 generic parameters: `A`, `B`\n+  --> $DIR/wrong-number-of-args.rs:237:15\n+   |\n+LL |         trait GenericTypeTypeAT<A, B> {\n+   |               ^^^^^^^^^^^^^^^^^ -  -\n+help: add missing generic argument\n+   |\n+LL |         type B = Box<dyn GenericTypeTypeAT<(), B, AssocTy=()>>;\n+   |                                              ^^^\n+\n+error[E0107]: this trait takes 2 generic arguments but 3 generic arguments were supplied\n+  --> $DIR/wrong-number-of-args.rs:249:26\n+   |\n+LL |         type C = Box<dyn GenericTypeTypeAT<(), (), (), AssocTy=()>>;\n+   |                          ^^^^^^^^^^^^^^^^^         -- help: remove this generic argument\n+   |                          |\n+   |                          expected 2 generic arguments\n+   |\n+note: trait defined here, with 2 generic parameters: `A`, `B`\n+  --> $DIR/wrong-number-of-args.rs:237:15\n+   |\n+LL |         trait GenericTypeTypeAT<A, B> {\n+   |               ^^^^^^^^^^^^^^^^^ -  -\n+\n+error[E0106]: missing lifetime specifiers\n+  --> $DIR/wrong-number-of-args.rs:259:52\n+   |\n+LL |         type A = Box<dyn GenericLifetimeLifetimeAT<AssocTy=()>>;\n+   |                                                    ^ expected 2 lifetime parameters\n+   |\n+help: consider introducing a named lifetime parameter\n+   |\n+LL |         type A<'a> = Box<dyn GenericLifetimeLifetimeAT<'a, 'a, AssocTy=()>>;\n+   |               ^^^^                                     ^^^^^^^\n+\n+error[E0107]: this trait takes 2 lifetime arguments but 1 lifetime argument was supplied\n+  --> $DIR/wrong-number-of-args.rs:263:26\n+   |\n+LL |         type B = Box<dyn GenericLifetimeLifetimeAT<'static, AssocTy=()>>;\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^ ------- supplied 1 lifetime argument\n+   |                          |\n+   |                          expected 2 lifetime arguments\n+   |\n+note: trait defined here, with 2 lifetime parameters: `'a`, `'b`\n+  --> $DIR/wrong-number-of-args.rs:255:15\n+   |\n+LL |         trait GenericLifetimeLifetimeAT<'a, 'b> {\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^ --  --\n+help: add missing lifetime argument\n+   |\n+LL |         type B = Box<dyn GenericLifetimeLifetimeAT<'static, 'b, AssocTy=()>>;\n+   |                                                           ^^^^\n+\n+error[E0106]: missing lifetime specifiers\n+  --> $DIR/wrong-number-of-args.rs:273:56\n+   |\n+LL |         type A = Box<dyn GenericLifetimeLifetimeTypeAT<AssocTy=()>>;\n+   |                                                        ^ expected 2 lifetime parameters\n+   |\n+help: consider introducing a named lifetime parameter\n+   |\n+LL |         type A<'a> = Box<dyn GenericLifetimeLifetimeTypeAT<'a, 'a, AssocTy=()>>;\n+   |               ^^^^                                         ^^^^^^^\n+\n+error[E0107]: this trait takes 1 generic argument but 0 generic arguments were supplied\n+  --> $DIR/wrong-number-of-args.rs:273:26\n+   |\n+LL |         type A = Box<dyn GenericLifetimeLifetimeTypeAT<AssocTy=()>>;\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected 1 generic argument\n+   |\n+note: trait defined here, with 1 generic parameter: `A`\n+  --> $DIR/wrong-number-of-args.rs:269:15\n+   |\n+LL |         trait GenericLifetimeLifetimeTypeAT<'a, 'b, A> {\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^         -\n+help: add missing generic argument\n+   |\n+LL |         type A = Box<dyn GenericLifetimeLifetimeTypeAT<A, AssocTy=()>>;\n+   |                                                        ^^\n+\n+error[E0107]: this trait takes 2 lifetime arguments but 1 lifetime argument was supplied\n+  --> $DIR/wrong-number-of-args.rs:279:26\n+   |\n+LL |         type B = Box<dyn GenericLifetimeLifetimeTypeAT<'static, AssocTy=()>>;\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ------- supplied 1 lifetime argument\n+   |                          |\n+   |                          expected 2 lifetime arguments\n+   |\n+note: trait defined here, with 2 lifetime parameters: `'a`, `'b`\n+  --> $DIR/wrong-number-of-args.rs:269:15\n+   |\n+LL |         trait GenericLifetimeLifetimeTypeAT<'a, 'b, A> {\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ --  --\n+help: add missing lifetime argument\n+   |\n+LL |         type B = Box<dyn GenericLifetimeLifetimeTypeAT<'static, 'b, AssocTy=()>>;\n+   |                                                               ^^^^\n+\n+error[E0107]: this trait takes 1 generic argument but 0 generic arguments were supplied\n+  --> $DIR/wrong-number-of-args.rs:279:26\n+   |\n+LL |         type B = Box<dyn GenericLifetimeLifetimeTypeAT<'static, AssocTy=()>>;\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected 1 generic argument\n+   |\n+note: trait defined here, with 1 generic parameter: `A`\n+  --> $DIR/wrong-number-of-args.rs:269:15\n+   |\n+LL |         trait GenericLifetimeLifetimeTypeAT<'a, 'b, A> {\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^         -\n+help: add missing generic argument\n+   |\n+LL |         type B = Box<dyn GenericLifetimeLifetimeTypeAT<'static, A, AssocTy=()>>;\n+   |                                                               ^^^\n+\n+error[E0107]: this trait takes 2 lifetime arguments but 1 lifetime argument was supplied\n+  --> $DIR/wrong-number-of-args.rs:285:26\n+   |\n+LL |         type C = Box<dyn GenericLifetimeLifetimeTypeAT<'static, (), AssocTy=()>>;\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ------- supplied 1 lifetime argument\n+   |                          |\n+   |                          expected 2 lifetime arguments\n+   |\n+note: trait defined here, with 2 lifetime parameters: `'a`, `'b`\n+  --> $DIR/wrong-number-of-args.rs:269:15\n+   |\n+LL |         trait GenericLifetimeLifetimeTypeAT<'a, 'b, A> {\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ --  --\n+help: add missing lifetime argument\n+   |\n+LL |         type C = Box<dyn GenericLifetimeLifetimeTypeAT<'static, 'b, (), AssocTy=()>>;\n+   |                                                               ^^^^\n+\n error[E0107]: missing generics for struct `HashMap`\n-  --> $DIR/wrong-number-of-args.rs:121:18\n+  --> $DIR/wrong-number-of-args.rs:295:18\n    |\n LL |         type A = HashMap;\n    |                  ^^^^^^^ expected at least 2 generic arguments\n@@ -304,7 +835,7 @@ LL |         type A = HashMap<K, V>;\n    |                  ^^^^^^^^^^^^^\n \n error[E0107]: this struct takes at least 2 generic arguments but 1 generic argument was supplied\n-  --> $DIR/wrong-number-of-args.rs:125:18\n+  --> $DIR/wrong-number-of-args.rs:299:18\n    |\n LL |         type B = HashMap<String>;\n    |                  ^^^^^^^ ------ supplied 1 generic argument\n@@ -322,7 +853,7 @@ LL |         type B = HashMap<String, V>;\n    |                                ^^^\n \n error[E0107]: this struct takes 0 lifetime arguments but 1 lifetime argument was supplied\n-  --> $DIR/wrong-number-of-args.rs:129:18\n+  --> $DIR/wrong-number-of-args.rs:303:18\n    |\n LL |         type C = HashMap<'static>;\n    |                  ^^^^^^^--------- help: remove these generics\n@@ -336,7 +867,7 @@ LL | pub struct HashMap<K, V, S = RandomState> {\n    |            ^^^^^^^\n \n error[E0107]: this struct takes at least 2 generic arguments but 0 generic arguments were supplied\n-  --> $DIR/wrong-number-of-args.rs:129:18\n+  --> $DIR/wrong-number-of-args.rs:303:18\n    |\n LL |         type C = HashMap<'static>;\n    |                  ^^^^^^^ expected at least 2 generic arguments\n@@ -352,7 +883,7 @@ LL |         type C = HashMap<'static, K, V>;\n    |                                 ^^^^^^\n \n error[E0107]: this struct takes at most 3 generic arguments but 4 generic arguments were supplied\n-  --> $DIR/wrong-number-of-args.rs:135:18\n+  --> $DIR/wrong-number-of-args.rs:309:18\n    |\n LL |         type D = HashMap<usize, String, char, f64>;\n    |                  ^^^^^^^                      --- help: remove this generic argument\n@@ -365,8 +896,24 @@ note: struct defined here, with at most 3 generic parameters: `K`, `V`, `S`\n LL | pub struct HashMap<K, V, S = RandomState> {\n    |            ^^^^^^^ -  -  -\n \n+error[E0107]: this struct takes at least 2 generic arguments but 0 generic arguments were supplied\n+  --> $DIR/wrong-number-of-args.rs:313:18\n+   |\n+LL |         type E = HashMap<>;\n+   |                  ^^^^^^^ expected at least 2 generic arguments\n+   |\n+note: struct defined here, with at least 2 generic parameters: `K`, `V`\n+  --> $SRC_DIR/std/src/collections/hash/map.rs:LL:COL\n+   |\n+LL | pub struct HashMap<K, V, S = RandomState> {\n+   |            ^^^^^^^ -  -\n+help: add missing generic arguments\n+   |\n+LL |         type E = HashMap<K, V>;\n+   |                          ^^^^\n+\n error[E0107]: missing generics for enum `Result`\n-  --> $DIR/wrong-number-of-args.rs:141:18\n+  --> $DIR/wrong-number-of-args.rs:319:18\n    |\n LL |         type A = Result;\n    |                  ^^^^^^ expected 2 generic arguments\n@@ -382,7 +929,7 @@ LL |         type A = Result<T, E>;\n    |                  ^^^^^^^^^^^^\n \n error[E0107]: this enum takes 2 generic arguments but 1 generic argument was supplied\n-  --> $DIR/wrong-number-of-args.rs:145:18\n+  --> $DIR/wrong-number-of-args.rs:323:18\n    |\n LL |         type B = Result<String>;\n    |                  ^^^^^^ ------ supplied 1 generic argument\n@@ -400,7 +947,7 @@ LL |         type B = Result<String, E>;\n    |                               ^^^\n \n error[E0107]: this enum takes 0 lifetime arguments but 1 lifetime argument was supplied\n-  --> $DIR/wrong-number-of-args.rs:149:18\n+  --> $DIR/wrong-number-of-args.rs:327:18\n    |\n LL |         type C = Result<'static>;\n    |                  ^^^^^^--------- help: remove these generics\n@@ -414,7 +961,7 @@ LL | pub enum Result<T, E> {\n    |          ^^^^^^\n \n error[E0107]: this enum takes 2 generic arguments but 0 generic arguments were supplied\n-  --> $DIR/wrong-number-of-args.rs:149:18\n+  --> $DIR/wrong-number-of-args.rs:327:18\n    |\n LL |         type C = Result<'static>;\n    |                  ^^^^^^ expected 2 generic arguments\n@@ -430,7 +977,7 @@ LL |         type C = Result<'static, T, E>;\n    |                                ^^^^^^\n \n error[E0107]: this enum takes 2 generic arguments but 3 generic arguments were supplied\n-  --> $DIR/wrong-number-of-args.rs:155:18\n+  --> $DIR/wrong-number-of-args.rs:333:18\n    |\n LL |         type D = Result<usize, String, char>;\n    |                  ^^^^^^                ---- help: remove this generic argument\n@@ -443,7 +990,23 @@ note: enum defined here, with 2 generic parameters: `T`, `E`\n LL | pub enum Result<T, E> {\n    |          ^^^^^^ -  -\n \n-error: aborting due to 30 previous errors\n+error[E0107]: this enum takes 2 generic arguments but 0 generic arguments were supplied\n+  --> $DIR/wrong-number-of-args.rs:337:18\n+   |\n+LL |         type E = Result<>;\n+   |                  ^^^^^^ expected 2 generic arguments\n+   |\n+note: enum defined here, with 2 generic parameters: `T`, `E`\n+  --> $SRC_DIR/core/src/result.rs:LL:COL\n+   |\n+LL | pub enum Result<T, E> {\n+   |          ^^^^^^ -  -\n+help: add missing generic arguments\n+   |\n+LL |         type E = Result<T, E>;\n+   |                         ^^^^\n+\n+error: aborting due to 69 previous errors\n \n Some errors have detailed explanations: E0106, E0107.\n For more information about an error, try `rustc --explain E0106`."}, {"sha": "462f6fb7b872001b336381aefc607379ec2b1a2d", "filename": "src/test/ui/unboxed-closures/unboxed-closure-sugar-used-on-struct-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/631e98973868a0bfdcb91d42d7f2e9af1863721b/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/631e98973868a0bfdcb91d42d7f2e9af1863721b/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct-1.rs?ref=631e98973868a0bfdcb91d42d7f2e9af1863721b", "patch": "@@ -7,7 +7,7 @@ struct Bar<A> {\n fn bar() {\n     let x: Box<Bar()> = panic!();\n     //~^ ERROR parenthesized type parameters may only be used with a `Fn` trait\n-    //~| ERROR missing generics for struct `Bar`\n+    //~| ERROR this struct takes 1 generic argument but 0 generic arguments\n }\n \n fn main() { }"}, {"sha": "90bef7ba1180808305bea54c4d54e159700a18a0", "filename": "src/test/ui/unboxed-closures/unboxed-closure-sugar-used-on-struct-1.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/631e98973868a0bfdcb91d42d7f2e9af1863721b/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/631e98973868a0bfdcb91d42d7f2e9af1863721b/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct-1.stderr?ref=631e98973868a0bfdcb91d42d7f2e9af1863721b", "patch": "@@ -4,7 +4,7 @@ error[E0214]: parenthesized type parameters may only be used with a `Fn` trait\n LL |     let x: Box<Bar()> = panic!();\n    |                ^^^^^ only `Fn` traits may use parentheses\n \n-error[E0107]: missing generics for struct `Bar`\n+error[E0107]: this struct takes 1 generic argument but 0 generic arguments were supplied\n   --> $DIR/unboxed-closure-sugar-used-on-struct-1.rs:8:16\n    |\n LL |     let x: Box<Bar()> = panic!();\n@@ -17,8 +17,8 @@ LL | struct Bar<A> {\n    |        ^^^ -\n help: add missing generic argument\n    |\n-LL |     let x: Box<Bar<A>()> = panic!();\n-   |                ^^^^^^\n+LL |     let x: Box<Bar(A)> = panic!();\n+   |                    ^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "bd61cbd80220e15665ec2c4473e1b8ac35b373b8", "filename": "src/test/ui/unboxed-closures/unboxed-closure-sugar-used-on-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/631e98973868a0bfdcb91d42d7f2e9af1863721b/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/631e98973868a0bfdcb91d42d7f2e9af1863721b/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct.rs?ref=631e98973868a0bfdcb91d42d7f2e9af1863721b", "patch": "@@ -6,7 +6,7 @@ struct Bar<A> {\n \n fn foo(b: Box<Bar()>) {\n     //~^ ERROR parenthesized type parameters may only be used with a `Fn` trait\n-    //~| ERROR missing generics for struct `Bar`\n+    //~| ERROR this struct takes 1 generic argument but 0 generic arguments\n }\n \n fn main() { }"}, {"sha": "931675afd83f027e4d38dba99aac7e08f3ed76a1", "filename": "src/test/ui/unboxed-closures/unboxed-closure-sugar-used-on-struct.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/631e98973868a0bfdcb91d42d7f2e9af1863721b/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/631e98973868a0bfdcb91d42d7f2e9af1863721b/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct.stderr?ref=631e98973868a0bfdcb91d42d7f2e9af1863721b", "patch": "@@ -4,7 +4,7 @@ error[E0214]: parenthesized type parameters may only be used with a `Fn` trait\n LL | fn foo(b: Box<Bar()>) {\n    |               ^^^^^ only `Fn` traits may use parentheses\n \n-error[E0107]: missing generics for struct `Bar`\n+error[E0107]: this struct takes 1 generic argument but 0 generic arguments were supplied\n   --> $DIR/unboxed-closure-sugar-used-on-struct.rs:7:15\n    |\n LL | fn foo(b: Box<Bar()>) {\n@@ -17,8 +17,8 @@ LL | struct Bar<A> {\n    |        ^^^ -\n help: add missing generic argument\n    |\n-LL | fn foo(b: Box<Bar<A>()>) {\n-   |               ^^^^^^\n+LL | fn foo(b: Box<Bar(A)>) {\n+   |                   ^\n \n error: aborting due to 2 previous errors\n "}]}