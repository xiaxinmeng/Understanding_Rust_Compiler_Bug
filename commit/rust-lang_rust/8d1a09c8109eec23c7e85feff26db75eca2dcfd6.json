{"sha": "8d1a09c8109eec23c7e85feff26db75eca2dcfd6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkMWEwOWM4MTA5ZWVjMjNjN2U4NWZlZmYyNmRiNzVlY2EyZGNmZDY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-12T23:07:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-12T23:07:40Z"}, "message": "auto merge of #6348 : sstewartgallus/rust/incoming, r=brson\n\nIn this commit I added a useful utility type, named Void, that encapsulates the\r\ndoable but annoying job of creating an uninhabited type. As well, a function on\r\nthat type, named absurd, was created which is useful for ignoring the result of\r\nmatching on that type. No unit tests were created because it is not possible to\r\ncreate an instance of this type to test the usage of.\r\n\r\nThis type is useful because it is like NonCopyable in that it can be used to\r\ncreate a type with special characteristics without special bloat. For instance,\r\ninstead of typing pub struct PhantomType { priv contents : () } for each void\r\ntype one may want to use one can simply type pub struct PhantomType (Void);.\r\nThis type make such special cases much easier to write.", "tree": {"sha": "07e9f4602db2cd76a726b6ef0a3accb5159b7077", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07e9f4602db2cd76a726b6ef0a3accb5159b7077"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d1a09c8109eec23c7e85feff26db75eca2dcfd6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d1a09c8109eec23c7e85feff26db75eca2dcfd6", "html_url": "https://github.com/rust-lang/rust/commit/8d1a09c8109eec23c7e85feff26db75eca2dcfd6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d1a09c8109eec23c7e85feff26db75eca2dcfd6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "830b945a9db072b68970b6f83dfafc1aaff8f837", "url": "https://api.github.com/repos/rust-lang/rust/commits/830b945a9db072b68970b6f83dfafc1aaff8f837", "html_url": "https://github.com/rust-lang/rust/commit/830b945a9db072b68970b6f83dfafc1aaff8f837"}, {"sha": "72c9aab0d2802785b8a84ea9f88906b19bc7ed29", "url": "https://api.github.com/repos/rust-lang/rust/commits/72c9aab0d2802785b8a84ea9f88906b19bc7ed29", "html_url": "https://github.com/rust-lang/rust/commit/72c9aab0d2802785b8a84ea9f88906b19bc7ed29"}], "stats": {"total": 16, "additions": 15, "deletions": 1}, "files": [{"sha": "ba176872b9a495a5f6f3bab60b6d6e3213fd3f09", "filename": "src/libcore/util.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8d1a09c8109eec23c7e85feff26db75eca2dcfd6/src%2Flibcore%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d1a09c8109eec23c7e85feff26db75eca2dcfd6/src%2Flibcore%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Futil.rs?ref=8d1a09c8109eec23c7e85feff26db75eca2dcfd6", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -132,6 +132,20 @@ impl Drop for NonCopyable {\n \n pub fn NonCopyable() -> NonCopyable { NonCopyable { i: () } }\n \n+\n+/// A type with no inhabitants\n+pub enum Void { }\n+\n+pub impl Void {\n+    /// A utility function for ignoring this uninhabited type\n+    fn uninhabited(&self) -> ! {\n+        match *self {\n+            // Nothing to match on\n+        }\n+    }\n+}\n+\n+\n /**\n A utility function for indicating unreachable code. It will fail if\n executed. This is occasionally useful to put after loops that never"}]}