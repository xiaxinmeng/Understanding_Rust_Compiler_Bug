{"sha": "6b8b4e54ba96b5292487273ae8808ba0eb43228a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiOGI0ZTU0YmE5NmI1MjkyNDg3MjczYWU4ODA4YmEwZWI0MzIyOGE=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-04-25T09:42:46Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-04-25T09:42:46Z"}, "message": "Rustup to rustc 1.44.0-nightly (3360cc3a0 2020-04-24)", "tree": {"sha": "d752f1b243f5038e0b7d84399692f429d67f08f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d752f1b243f5038e0b7d84399692f429d67f08f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b8b4e54ba96b5292487273ae8808ba0eb43228a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b8b4e54ba96b5292487273ae8808ba0eb43228a", "html_url": "https://github.com/rust-lang/rust/commit/6b8b4e54ba96b5292487273ae8808ba0eb43228a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b8b4e54ba96b5292487273ae8808ba0eb43228a/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14c32bfd8b22a625e3224202470e49ff250f7a61", "url": "https://api.github.com/repos/rust-lang/rust/commits/14c32bfd8b22a625e3224202470e49ff250f7a61", "html_url": "https://github.com/rust-lang/rust/commit/14c32bfd8b22a625e3224202470e49ff250f7a61"}], "stats": {"total": 16, "additions": 10, "deletions": 6}, "files": [{"sha": "4d9449951493f1b32bd0aa8cab24ca9a1e551e8f", "filename": "rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b8b4e54ba96b5292487273ae8808ba0eb43228a/rust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/6b8b4e54ba96b5292487273ae8808ba0eb43228a/rust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-toolchain?ref=6b8b4e54ba96b5292487273ae8808ba0eb43228a", "patch": "@@ -1 +1 @@\n-nightly-2020-04-22\n+nightly-2020-04-25"}, {"sha": "501cbc25a365d97d451b28839ca759ae7663724e", "filename": "src/abi/mod.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6b8b4e54ba96b5292487273ae8808ba0eb43228a/src%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b8b4e54ba96b5292487273ae8808ba0eb43228a/src%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fmod.rs?ref=6b8b4e54ba96b5292487273ae8808ba0eb43228a", "patch": "@@ -446,8 +446,9 @@ pub(crate) fn codegen_terminator_call<'tcx>(\n \n     // Handle special calls like instrinsics and empty drop glue.\n     let instance = if let ty::FnDef(def_id, substs) = fn_ty.kind {\n-        let instance =\n-            ty::Instance::resolve(fx.tcx, ty::ParamEnv::reveal_all(), def_id, substs).unwrap();\n+        let instance = ty::Instance::resolve(fx.tcx, ty::ParamEnv::reveal_all(), def_id, substs)\n+            .unwrap()\n+            .unwrap();\n \n         if fx.tcx.symbol_name(instance).name.as_str().starts_with(\"llvm.\") {\n             crate::intrinsics::codegen_llvm_intrinsic_call(\n@@ -659,7 +660,9 @@ pub(crate) fn codegen_drop<'tcx>(\n             _ => {\n                 let instance = match drop_fn_ty.kind {\n                     ty::FnDef(def_id, substs) => {\n-                        Instance::resolve(fx.tcx, ParamEnv::reveal_all(), def_id, substs).unwrap()\n+                        Instance::resolve(fx.tcx, ParamEnv::reveal_all(), def_id, substs)\n+                            .unwrap()\n+                            .unwrap()\n                     }\n                     _ => unreachable!(\"{:?}\", drop_fn_ty),\n                 };"}, {"sha": "98951e005dba5997ce566e11401eb862767ce26e", "filename": "src/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b8b4e54ba96b5292487273ae8808ba0eb43228a/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b8b4e54ba96b5292487273ae8808ba0eb43228a/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=6b8b4e54ba96b5292487273ae8808ba0eb43228a", "patch": "@@ -10,7 +10,7 @@ pub(crate) fn trans_fn<'clif, 'tcx, B: Backend + 'static>(\n ) {\n     let tcx = cx.tcx;\n \n-    let mir = *tcx.instance_mir(instance.def);\n+    let mir = tcx.instance_mir(instance.def);\n \n     // Declare function\n     let (name, sig) = get_function_name_and_sig(tcx, cx.module.isa().triple(), instance, false);"}, {"sha": "4927035035dc1747cd4878c7b43992d46325acfe", "filename": "src/debuginfo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b8b4e54ba96b5292487273ae8808ba0eb43228a/src%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b8b4e54ba96b5292487273ae8808ba0eb43228a/src%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Fmod.rs?ref=6b8b4e54ba96b5292487273ae8808ba0eb43228a", "patch": "@@ -257,7 +257,7 @@ impl<'a, 'tcx> FunctionDebugContext<'a, 'tcx> {\n         func_id: FuncId,\n         name: &str,\n     ) -> Self {\n-        let mir = *debug_context.tcx.instance_mir(instance.def);\n+        let mir = debug_context.tcx.instance_mir(instance.def);\n \n         let (symbol, _) = debug_context.symbols.insert_full(func_id, name.to_string());\n "}, {"sha": "f39e07f664d4ca2ebecd07215a52d0dc892e2764", "filename": "src/main_shim.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6b8b4e54ba96b5292487273ae8808ba0eb43228a/src%2Fmain_shim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b8b4e54ba96b5292487273ae8808ba0eb43228a/src%2Fmain_shim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmain_shim.rs?ref=6b8b4e54ba96b5292487273ae8808ba0eb43228a", "patch": "@@ -84,6 +84,7 @@ pub(crate) fn maybe_create_entry_wrapper(tcx: TyCtxt<'_>, module: &mut Module<im\n                     start_def_id,\n                     tcx.intern_substs(&[main_ret_ty.into()]),\n                 )\n+                .unwrap()\n                 .unwrap();\n                 let start_func_id = import_function(tcx, m, start_instance);\n "}]}