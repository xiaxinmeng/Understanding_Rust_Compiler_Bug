{"sha": "cf8a1b0998fb561e76acfe4b8269a4df5fb60bc8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmOGExYjA5OThmYjU2MWU3NmFjZmU0YjgyNjlhNGRmNWZiNjBiYzg=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-05-06T14:50:04Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-05-08T17:13:58Z"}, "message": "Add E0408/E0409", "tree": {"sha": "ff21508dd25aaa38b5b009870e45f0e71097aa97", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff21508dd25aaa38b5b009870e45f0e71097aa97"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf8a1b0998fb561e76acfe4b8269a4df5fb60bc8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf8a1b0998fb561e76acfe4b8269a4df5fb60bc8", "html_url": "https://github.com/rust-lang/rust/commit/cf8a1b0998fb561e76acfe4b8269a4df5fb60bc8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf8a1b0998fb561e76acfe4b8269a4df5fb60bc8/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cae42a471c13eec8a6470d0845f46f1606d50742", "url": "https://api.github.com/repos/rust-lang/rust/commits/cae42a471c13eec8a6470d0845f46f1606d50742", "html_url": "https://github.com/rust-lang/rust/commit/cae42a471c13eec8a6470d0845f46f1606d50742"}], "stats": {"total": 91, "additions": 87, "deletions": 4}, "files": [{"sha": "161dcf79dccf61d82aa2416323fc8e59eed5e294", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 87, "deletions": 4, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/cf8a1b0998fb561e76acfe4b8269a4df5fb60bc8/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8a1b0998fb561e76acfe4b8269a4df5fb60bc8/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=cf8a1b0998fb561e76acfe4b8269a4df5fb60bc8", "patch": "@@ -497,6 +497,92 @@ impl Bar {\n ```\n \"##,\n \n+E0408: r##\"\n+An \"or\" pattern was used where the variable bindings are not consistently bound\n+across patterns.\n+\n+Example of erroneous code:\n+\n+```compile_fail\n+match x {\n+    Some(y) | None => { /* use y */ } // error: variable `y` from pattern #1 is\n+                                      // not bound in pattern #2\n+    _ => ()\n+}\n+```\n+\n+\n+Here, `y` is bound to the contents of the `Some` and can be used within the\n+block corresponding to the match arm. However, in case `x` is `None`, we have\n+not specified what `y` is, and the block will use a nonexistent variable.\n+\n+To fix this error, either split into multiple match arms:\n+\n+```\n+let x = Some(1);\n+match x {\n+    Some(y) => { /* use y */ }\n+    None => { /* ... */ }\n+}\n+```\n+\n+or, bind the variable to a field of the same type in all sub-patterns of the\n+or pattern:\n+\n+```\n+let x = (0,2);\n+match x {\n+    (0, y) | (y, 0) => { /* use y */}\n+}\n+```\n+\n+In this example, if `x` matches the pattern `(0, _)`, the second field is set\n+to `y`, and if it matches `(_, 0)`, the first field is set to `y`, so in all\n+cases `y` is set to some value.\n+\"##,\n+\n+E0409: r##\"\n+An \"or\" pattern was used where the variable bindings are not consistently bound\n+across patterns.\n+\n+Example of erroneous code:\n+\n+```compile_fail\n+let x = (0,2);\n+match x {\n+    (0, ref y) | (y, 0) => { /* use y */} // error: variable `y` is bound with\n+                                          // different mode in pattern #2 than\n+                                          // in pattern #1\n+    _ => ()\n+}\n+```\n+\n+\n+Here, `y` is bound by-value in one case and by-reference in the other.\n+\n+To fix this error, just use the same mode in both cases.\n+Generally using `ref` or `ref mut` where not already used will fix this.\n+\n+```\n+let x = (0,2);\n+match x {\n+    (0, ref y) | (ref y, 0) => { /* use y */}\n+    _ => ()\n+}\n+```\n+\n+Alternatively, split the pattern\n+\n+```compile_fail\n+let x = (0,2);\n+match x {\n+    (0, ref y) => { /* use y */}\n+    (y, 0) => { /* use y */ }\n+    _ => ()\n+}\n+```\n+\"##,\n+\n E0411: r##\"\n The `Self` keyword was used outside an impl or a trait. Erroneous code example:\n \n@@ -1145,10 +1231,7 @@ register_diagnostics! {\n //  E0258,\n     E0402, // cannot use an outer type parameter in this context\n     E0406, // undeclared associated type\n-    E0408, // variable from pattern #1 is not bound in pattern #\n-    E0409, // variable is bound with different mode in pattern # than in\n-           // pattern #1\n-    E0410, // variable from pattern is not bound in pattern 1\n+//  E0410, merged into 408\n     E0418, // is not an enum variant, struct or const\n     E0420, // is not an associated const\n     E0421, // unresolved associated const"}]}