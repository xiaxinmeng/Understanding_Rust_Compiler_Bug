{"sha": "119f43e0c77ddd99a9dd187928f1eb1aea5b13b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExOWY0M2UwYzc3ZGRkOTlhOWRkMTg3OTI4ZjFlYjFhZWE1YjEzYjM=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-12T00:56:57Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-12T19:08:27Z"}, "message": "Rename str::connect_ivec to str::connect", "tree": {"sha": "6cb99370bd5a6a4448e0150d277c314c9ac225c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6cb99370bd5a6a4448e0150d277c314c9ac225c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/119f43e0c77ddd99a9dd187928f1eb1aea5b13b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/119f43e0c77ddd99a9dd187928f1eb1aea5b13b3", "html_url": "https://github.com/rust-lang/rust/commit/119f43e0c77ddd99a9dd187928f1eb1aea5b13b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/119f43e0c77ddd99a9dd187928f1eb1aea5b13b3/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21693db2a7a4fa8d4331297c534cf5373523f5f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/21693db2a7a4fa8d4331297c534cf5373523f5f9", "html_url": "https://github.com/rust-lang/rust/commit/21693db2a7a4fa8d4331297c534cf5373523f5f9"}], "stats": {"total": 42, "additions": 21, "deletions": 21}, "files": [{"sha": "1bd4c4006206aef42c22be2fd58c0e863eb7c609", "filename": "src/comp/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/119f43e0c77ddd99a9dd187928f1eb1aea5b13b3/src%2Fcomp%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/119f43e0c77ddd99a9dd187928f1eb1aea5b13b3/src%2Fcomp%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Flink.rs?ref=119f43e0c77ddd99a9dd187928f1eb1aea5b13b3", "patch": "@@ -360,7 +360,7 @@ fn build_link_meta(sess: &session::session, c: &ast::crate, output: &str,\n                             str::split(fs::basename(output), '.' as u8);\n                         assert (ivec::len(os) >= 2u);\n                         ivec::pop(os);\n-                        str::connect_ivec(os, \".\")\n+                        str::connect(os, \".\")\n                     };\n                 warn_missing(sess, \"name\", name);\n                 name"}, {"sha": "08c3f79a4384cfb3a49f26f9194a3798ced12207", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/119f43e0c77ddd99a9dd187928f1eb1aea5b13b3/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/119f43e0c77ddd99a9dd187928f1eb1aea5b13b3/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=119f43e0c77ddd99a9dd187928f1eb1aea5b13b3", "patch": "@@ -537,7 +537,7 @@ fn main(args: vec[str]) {\n           }\n           link::output_type_exe. { parts += ~[\"o\"]; }\n         }\n-        let ofile = str::connect_ivec(parts, \".\");\n+        let ofile = str::connect(parts, \".\");\n         compile_input(sess, cfg, ifile, ofile);\n       }\n       some(ofile) {\n@@ -588,7 +588,7 @@ fn main(args: vec[str]) {\n         fn rmext(filename: str) -> str {\n             let parts = str::split(filename, '.' as u8);\n             ivec::pop(parts);\n-            ret str::connect_ivec(parts, \".\");\n+            ret str::connect(parts, \".\");\n         }\n         ret alt config.os {\n               session::os_macos. { rmext(rmlib(filename)) }\n@@ -627,7 +627,7 @@ fn main(args: vec[str]) {\n     if 0 != err_code {\n         sess.err(#fmt(\"linking with gcc failed with code %d\", err_code));\n         sess.note(#fmt(\"gcc arguments: %s\",\n-                       str::connect_ivec(gcc_args, \" \")));\n+                       str::connect(gcc_args, \" \")));\n         sess.abort_if_errors();\n     }\n     // Clean up on Darwin"}, {"sha": "4c318ef7f61128c37d77c5cd39cb769a236f1ef5", "filename": "src/comp/metadata/decoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/119f43e0c77ddd99a9dd187928f1eb1aea5b13b3/src%2Fcomp%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/119f43e0c77ddd99a9dd187928f1eb1aea5b13b3/src%2Fcomp%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fdecoder.rs?ref=119f43e0c77ddd99a9dd187928f1eb1aea5b13b3", "patch": "@@ -151,7 +151,7 @@ fn resolve_path(path: &[ast::ident], data: @[u8]) -> [ast::def_id] {\n     fn eq_item(data: &[u8], s: str) -> bool {\n         ret str::eq(str::unsafe_from_bytes(data), s);\n     }\n-    let s = str::connect_ivec(path, \"::\");\n+    let s = str::connect(path, \"::\");\n     let md = ebmlivec::new_doc(data);\n     let paths = ebmlivec::get_doc(md, tag_paths);\n     let eqer = bind eq_item(_, s);"}, {"sha": "594da618214205e6f6bb0d0471310aa0852a101c", "filename": "src/comp/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/119f43e0c77ddd99a9dd187928f1eb1aea5b13b3/src%2Fcomp%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/119f43e0c77ddd99a9dd187928f1eb1aea5b13b3/src%2Fcomp%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fencoder.rs?ref=119f43e0c77ddd99a9dd187928f1eb1aea5b13b3", "patch": "@@ -53,7 +53,7 @@ fn add_to_index(ebml_w: &ebmlivec::writer, path: &[str],\n                 index: &mutable [entry[str]], name: &str) {\n     let full_path = path + ~[name];\n     index +=\n-        ~[{val: str::connect_ivec(full_path, \"::\"),\n+        ~[{val: str::connect(full_path, \"::\"),\n            pos: ebml_w.writer.tell()}];\n }\n "}, {"sha": "c97c2f9eb0f02f8f23fa1bc176b2ad08d58df4b5", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/119f43e0c77ddd99a9dd187928f1eb1aea5b13b3/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/119f43e0c77ddd99a9dd187928f1eb1aea5b13b3/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=119f43e0c77ddd99a9dd187928f1eb1aea5b13b3", "patch": "@@ -392,7 +392,7 @@ fn follow_import(e: &env, sc: &scopes, path: &[ident], sp: &span) ->\n           ast::def_mod(_) | ast::def_native_mod(_) { ret dcur; }\n           _ {\n             e.sess.span_err(sp,\n-                            str::connect_ivec(path, \"::\") +\n+                            str::connect(path, \"::\") +\n                                 \" does not name a module.\");\n             ret none;\n           }"}, {"sha": "a0df89444cd95e020b7e2436dc27a97057701fa8", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/119f43e0c77ddd99a9dd187928f1eb1aea5b13b3/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/119f43e0c77ddd99a9dd187928f1eb1aea5b13b3/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=119f43e0c77ddd99a9dd187928f1eb1aea5b13b3", "patch": "@@ -5216,7 +5216,7 @@ fn load_if_immediate(cx: &@block_ctxt, v: ValueRef, t: &ty::t) -> ValueRef {\n \n fn trans_log(lvl: int, cx: &@block_ctxt, e: &@ast::expr) -> result {\n     let lcx = cx.fcx.lcx;\n-    let modname = str::connect_ivec(lcx.module_path, \"::\");\n+    let modname = str::connect(lcx.module_path, \"::\");\n     let global;\n     if lcx.ccx.module_data.contains_key(modname) {\n         global = lcx.ccx.module_data.get(modname);\n@@ -6078,7 +6078,7 @@ fn trans_fn(cx: @local_ctxt, sp: &span, f: &ast::_fn, llfndecl: ValueRef,\n     let start = time::get_time();\n     trans_fn_inner(cx, sp, f, llfndecl, ty_self, ty_params, id);\n     let end = time::get_time();\n-    log_fn_time(cx.ccx, str::connect_ivec(cx.path, \"::\"), start, end);\n+    log_fn_time(cx.ccx, str::connect(cx.path, \"::\"), start, end);\n }\n \n fn trans_res_ctor(cx: @local_ctxt, sp: &span, dtor: &ast::_fn,"}, {"sha": "272da125128910cd3aca9f037537b56963fb9d74", "filename": "src/comp/middle/trans_comm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/119f43e0c77ddd99a9dd187928f1eb1aea5b13b3/src%2Fcomp%2Fmiddle%2Ftrans_comm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/119f43e0c77ddd99a9dd187928f1eb1aea5b13b3/src%2Fcomp%2Fmiddle%2Ftrans_comm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_comm.rs?ref=119f43e0c77ddd99a9dd187928f1eb1aea5b13b3", "patch": "@@ -72,7 +72,7 @@ fn trans_spawn(cx: &@block_ctxt, dom: &ast::spawn_dom, name: &option::t[str],\n         alt name {\n           none. {\n             let argss = std::ivec::map(expr_to_str, args);\n-            #fmt(\"%s(%s)\", expr_to_str(func), str::connect_ivec(argss, \", \"))\n+            #fmt(\"%s(%s)\", expr_to_str(func), str::connect(argss, \", \"))\n           }\n           some(n) { n }\n         };"}, {"sha": "1aef9947925a6c093d4103a4293adc74f5656490", "filename": "src/comp/middle/trans_dps.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/119f43e0c77ddd99a9dd187928f1eb1aea5b13b3/src%2Fcomp%2Fmiddle%2Ftrans_dps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/119f43e0c77ddd99a9dd187928f1eb1aea5b13b3/src%2Fcomp%2Fmiddle%2Ftrans_dps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_dps.rs?ref=119f43e0c77ddd99a9dd187928f1eb1aea5b13b3", "patch": "@@ -323,7 +323,7 @@ fn trans_binary(cx: &@block_ctxt, dest: &dest, sp: &span, op: ast::binop,\n fn trans_log(cx: &@block_ctxt, sp: &span, level: int, expr: &@ast::expr) ->\n    @block_ctxt {\n     fn trans_log_level(lcx: &@local_ctxt) -> ValueRef {\n-        let modname = str::connect_ivec(lcx.module_path, \"::\");\n+        let modname = str::connect(lcx.module_path, \"::\");\n \n         if lcx_ccx(lcx).module_data.contains_key(modname) {\n             ret lcx_ccx(lcx).module_data.get(modname);"}, {"sha": "4c82771f69d50eca14ca3a4506071534a0e254b8", "filename": "src/comp/syntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/119f43e0c77ddd99a9dd187928f1eb1aea5b13b3/src%2Fcomp%2Fsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/119f43e0c77ddd99a9dd187928f1eb1aea5b13b3/src%2Fcomp%2Fsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast.rs?ref=119f43e0c77ddd99a9dd187928f1eb1aea5b13b3", "patch": "@@ -22,7 +22,7 @@ type path = spanned[path_];\n \n fn path_name(p: &path) -> str { path_name_i(p.node.idents) }\n \n-fn path_name_i(idents: &[ident]) -> str { str::connect_ivec(idents, \"::\") }\n+fn path_name_i(idents: &[ident]) -> str { str::connect(idents, \"::\") }\n \n type crate_num = int;\n type node_id = int;"}, {"sha": "2873bfa7ccd720c135653033b0b49a8baff0b14e", "filename": "src/comp/util/ppaux.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/119f43e0c77ddd99a9dd187928f1eb1aea5b13b3/src%2Fcomp%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/119f43e0c77ddd99a9dd187928f1eb1aea5b13b3/src%2Fcomp%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Futil%2Fppaux.rs?ref=119f43e0c77ddd99a9dd187928f1eb1aea5b13b3", "patch": "@@ -49,7 +49,7 @@ fn ty_to_str(cx: &ctxt, typ: &t) -> str {\n         s += \"(\";\n         let strs = ~[];\n         for a: arg  in inputs { strs += ~[fn_input_to_str(cx, a)]; }\n-        s += str::connect_ivec(strs, \", \");\n+        s += str::connect(strs, \", \");\n         s += \")\";\n         if struct(cx, output) != ty_nil {\n             alt cf {\n@@ -101,7 +101,7 @@ fn ty_to_str(cx: &ctxt, typ: &t) -> str {\n       ty_rec(elems) {\n         let strs: [str] = ~[];\n         for fld: field  in elems { strs += ~[field_to_str(cx, fld)]; }\n-        s += \"{\" + str::connect_ivec(strs, \",\") + \"}\";\n+        s += \"{\" + str::connect(strs, \",\") + \"}\";\n       }\n       ty_tag(id, tps) {\n         // The user should never see this if the cname is set properly!\n@@ -110,7 +110,7 @@ fn ty_to_str(cx: &ctxt, typ: &t) -> str {\n         if ivec::len[t](tps) > 0u {\n             let strs: [str] = ~[];\n             for typ: t  in tps { strs += ~[ty_to_str(cx, typ)]; }\n-            s += \"[\" + str::connect_ivec(strs, \",\") + \"]\";\n+            s += \"[\" + str::connect(strs, \",\") + \"]\";\n         }\n       }\n       ty_fn(proto, inputs, output, cf, constrs) {\n@@ -124,7 +124,7 @@ fn ty_to_str(cx: &ctxt, typ: &t) -> str {\n       ty_obj(meths) {\n         let strs = ~[];\n         for m: method  in meths { strs += ~[method_to_str(cx, m)]; }\n-        s += \"obj {\\n\\t\" + str::connect_ivec(strs, \"\\n\\t\") + \"\\n}\";\n+        s += \"obj {\\n\\t\" + str::connect(strs, \"\\n\\t\") + \"\\n}\";\n       }\n       ty_res(id, _, _) {\n         s +="}, {"sha": "3b36df4709f8f62b912d74ea020d059e42450d99", "filename": "src/lib/str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/119f43e0c77ddd99a9dd187928f1eb1aea5b13b3/src%2Flib%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/119f43e0c77ddd99a9dd187928f1eb1aea5b13b3/src%2Flib%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fstr.rs?ref=119f43e0c77ddd99a9dd187928f1eb1aea5b13b3", "patch": "@@ -43,7 +43,7 @@ export push_byte;\n export unshift_byte;\n export split;\n export concat;\n-export connect_ivec;\n+export connect;\n export to_upper;\n export safe_slice;\n export unsafe_from_bytes;\n@@ -454,7 +454,7 @@ fn concat(v: &[str]) -> str {\n     ret s;\n }\n \n-fn connect_ivec(v: &[str], sep: str) -> str {\n+fn connect(v: &[str], sep: str) -> str {\n     let s: str = \"\";\n     let first: bool = true;\n     for ss: str  in v {"}, {"sha": "d1631037a91627ccffae5d57add41f96d32f930b", "filename": "src/test/compiletest/runtest.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/119f43e0c77ddd99a9dd187928f1eb1aea5b13b3/src%2Ftest%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/119f43e0c77ddd99a9dd187928f1eb1aea5b13b3/src%2Ftest%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompiletest%2Fruntest.rs?ref=119f43e0c77ddd99a9dd187928f1eb1aea5b13b3", "patch": "@@ -315,7 +315,7 @@ fn program_output(cx: &cx, testfile: &str, lib_path: &str, prog: &str,\n \n fn make_cmdline(libpath: &str, prog: &str, args: &[str]) -> str {\n     #fmt(\"%s %s %s\", lib_path_cmd_prefix(libpath), prog,\n-         str::connect_ivec(args, \" \"))\n+         str::connect(args, \" \"))\n }\n \n // Build the LD_LIBRARY_PATH variable as it would be seen on the command line\n@@ -357,7 +357,7 @@ fn output_base_name(config: &config, testfile: &str) -> str {\n         {\n             let parts = str::split(fs::basename(testfile), '.' as u8);\n             parts = ivec::slice(parts, 0u, ivec::len(parts) - 1u);\n-            str::connect_ivec(parts, \".\")\n+            str::connect(parts, \".\")\n         };\n     #fmt(\"%s%s.%s\", base, filename, config.stage_id)\n }"}, {"sha": "04e75155b0c11ca19da6efd8d356f7fc63b19c9e", "filename": "src/test/stdtest/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/119f43e0c77ddd99a9dd187928f1eb1aea5b13b3/src%2Ftest%2Fstdtest%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/119f43e0c77ddd99a9dd187928f1eb1aea5b13b3/src%2Ftest%2Fstdtest%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fstr.rs?ref=119f43e0c77ddd99a9dd187928f1eb1aea5b13b3", "patch": "@@ -79,7 +79,7 @@ fn test_concat() {\n #[test]\n fn test_connect() {\n     fn t(v: &[str], sep: &str, s: &str) {\n-        assert (str::eq(str::connect_ivec(v, sep), s));\n+        assert (str::eq(str::connect(v, sep), s));\n     }\n     t(~[\"you\", \"know\", \"I'm\", \"no\", \"good\"], \" \", \"you know I'm no good\");\n     let v: [str] = ~[];"}]}