{"sha": "a9b6aec8a788d33ebe9667d53d127be59d93e555", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5YjZhZWM4YTc4OGQzM2ViZTk2NjdkNTNkMTI3YmU1OWQ5M2U1NTU=", "commit": {"author": {"name": "Matt Niemeir", "email": "matt.niemeir@gmail.com", "date": "2020-03-10T02:18:55Z"}, "committer": {"name": "Matt Niemeir", "email": "matt.niemeir@gmail.com", "date": "2020-03-10T03:14:17Z"}, "message": "Struct field rename renames field in constructor field shorthand", "tree": {"sha": "37a5e634178b35561851f79207f4045831dafca4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37a5e634178b35561851f79207f4045831dafca4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9b6aec8a788d33ebe9667d53d127be59d93e555", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9b6aec8a788d33ebe9667d53d127be59d93e555", "html_url": "https://github.com/rust-lang/rust/commit/a9b6aec8a788d33ebe9667d53d127be59d93e555", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9b6aec8a788d33ebe9667d53d127be59d93e555/comments", "author": {"login": "m-n", "id": 1393649, "node_id": "MDQ6VXNlcjEzOTM2NDk=", "avatar_url": "https://avatars.githubusercontent.com/u/1393649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-n", "html_url": "https://github.com/m-n", "followers_url": "https://api.github.com/users/m-n/followers", "following_url": "https://api.github.com/users/m-n/following{/other_user}", "gists_url": "https://api.github.com/users/m-n/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-n/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-n/subscriptions", "organizations_url": "https://api.github.com/users/m-n/orgs", "repos_url": "https://api.github.com/users/m-n/repos", "events_url": "https://api.github.com/users/m-n/events{/privacy}", "received_events_url": "https://api.github.com/users/m-n/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-n", "id": 1393649, "node_id": "MDQ6VXNlcjEzOTM2NDk=", "avatar_url": "https://avatars.githubusercontent.com/u/1393649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-n", "html_url": "https://github.com/m-n", "followers_url": "https://api.github.com/users/m-n/followers", "following_url": "https://api.github.com/users/m-n/following{/other_user}", "gists_url": "https://api.github.com/users/m-n/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-n/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-n/subscriptions", "organizations_url": "https://api.github.com/users/m-n/orgs", "repos_url": "https://api.github.com/users/m-n/repos", "events_url": "https://api.github.com/users/m-n/events{/privacy}", "received_events_url": "https://api.github.com/users/m-n/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "530ff9f57fd27505302d082a6007b49d8b98c8af", "url": "https://api.github.com/repos/rust-lang/rust/commits/530ff9f57fd27505302d082a6007b49d8b98c8af", "html_url": "https://github.com/rust-lang/rust/commit/530ff9f57fd27505302d082a6007b49d8b98c8af"}], "stats": {"total": 122, "additions": 96, "deletions": 26}, "files": [{"sha": "794a109f3cf2e7a4b27be811e3750be9dfe27b89", "filename": "crates/ra_ide/src/references/rename.rs", "status": "modified", "additions": 79, "deletions": 21, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/a9b6aec8a788d33ebe9667d53d127be59d93e555/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9b6aec8a788d33ebe9667d53d127be59d93e555/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs?ref=a9b6aec8a788d33ebe9667d53d127be59d93e555", "patch": "@@ -9,7 +9,8 @@ use ra_syntax::{\n use ra_text_edit::TextEdit;\n \n use crate::{\n-    FileId, FilePosition, FileSystemEdit, RangeInfo, SourceChange, SourceFileEdit, TextRange,\n+    FilePosition, FileSystemEdit, RangeInfo, Reference, ReferenceKind, SourceChange,\n+    SourceFileEdit, TextRange,\n };\n \n use super::find_all_refs;\n@@ -46,12 +47,20 @@ fn find_name_and_module_at_offset(\n     Some((ast_name, ast_module))\n }\n \n-fn source_edit_from_file_id_range(\n-    file_id: FileId,\n-    range: TextRange,\n-    new_name: &str,\n-) -> SourceFileEdit {\n-    SourceFileEdit { file_id, edit: TextEdit::replace(range, new_name.into()) }\n+fn source_edit_from_reference(reference: Reference, new_name: &str) -> SourceFileEdit {\n+    let mut replacement_text = String::from(new_name);\n+    let file_id = reference.file_range.file_id;\n+    let range = match reference.kind {\n+        ReferenceKind::StructFieldShorthand => {\n+            replacement_text.push_str(\": \");\n+            TextRange::from_to(\n+                reference.file_range.range.start(),\n+                reference.file_range.range.start(),\n+            )\n+        }\n+        _ => reference.file_range.range,\n+    };\n+    SourceFileEdit { file_id, edit: TextEdit::replace(range, replacement_text) }\n }\n \n fn rename_mod(\n@@ -99,13 +108,10 @@ fn rename_mod(\n     source_file_edits.push(edit);\n \n     if let Some(RangeInfo { range: _, info: refs }) = find_all_refs(sema.db, position, None) {\n-        let ref_edits = refs.references.into_iter().map(|reference| {\n-            source_edit_from_file_id_range(\n-                reference.file_range.file_id,\n-                reference.file_range.range,\n-                new_name,\n-            )\n-        });\n+        let ref_edits = refs\n+            .references\n+            .into_iter()\n+            .map(|reference| source_edit_from_reference(reference, new_name));\n         source_file_edits.extend(ref_edits);\n     }\n \n@@ -121,13 +127,7 @@ fn rename_reference(\n \n     let edit = refs\n         .into_iter()\n-        .map(|reference| {\n-            source_edit_from_file_id_range(\n-                reference.file_range.file_id,\n-                reference.file_range.range,\n-                new_name,\n-            )\n-        })\n+        .map(|reference| source_edit_from_reference(reference, new_name))\n         .collect::<Vec<_>>();\n \n     if edit.is_empty() {\n@@ -285,6 +285,64 @@ mod tests {\n         );\n     }\n \n+    #[test]\n+    fn test_rename_for_struct_field() {\n+        test_rename(\n+            r#\"\n+    struct Foo {\n+        i<|>: i32,\n+    }\n+\n+    impl Foo {\n+        fn new(i: i32) -> Self {\n+            Self { i: i }\n+        }\n+    }\n+    \"#,\n+            \"j\",\n+            r#\"\n+    struct Foo {\n+        j: i32,\n+    }\n+\n+    impl Foo {\n+        fn new(i: i32) -> Self {\n+            Self { j: i }\n+        }\n+    }\n+    \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_rename_for_struct_field_shorthand() {\n+        test_rename(\n+            r#\"\n+    struct Foo {\n+        i<|>: i32,\n+    }\n+\n+    impl Foo {\n+        fn new(i: i32) -> Self {\n+            Self { i }\n+        }\n+    }\n+    \"#,\n+            \"j\",\n+            r#\"\n+    struct Foo {\n+        j: i32,\n+    }\n+\n+    impl Foo {\n+        fn new(i: i32) -> Self {\n+            Self { j: i }\n+        }\n+    }\n+    \"#,\n+        );\n+    }\n+\n     #[test]\n     fn test_rename_mod() {\n         let (analysis, position) = analysis_and_position("}, {"sha": "9436a7562134f6457ec896f6988d6f02888ecfb9", "filename": "crates/ra_ide_db/src/search.rs", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a9b6aec8a788d33ebe9667d53d127be59d93e555/crates%2Fra_ide_db%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9b6aec8a788d33ebe9667d53d127be59d93e555/crates%2Fra_ide_db%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fsearch.rs?ref=a9b6aec8a788d33ebe9667d53d127be59d93e555", "patch": "@@ -17,7 +17,7 @@ use rustc_hash::FxHashMap;\n use test_utils::tested_by;\n \n use crate::{\n-    defs::{classify_name_ref, Definition},\n+    defs::{classify_name_ref, Definition, NameRefClass},\n     RootDatabase,\n };\n \n@@ -30,6 +30,7 @@ pub struct Reference {\n \n #[derive(Debug, Clone, PartialEq)]\n pub enum ReferenceKind {\n+    StructFieldShorthand,\n     StructLiteral,\n     Other,\n }\n@@ -237,9 +238,8 @@ impl Definition {\n                 // FIXME: reuse sb\n                 // See https://github.com/rust-lang/rust/pull/68198#issuecomment-574269098\n \n-                if let Some(d) = classify_name_ref(&sema, &name_ref) {\n-                    let d = d.definition();\n-                    if &d == self {\n+                match (classify_name_ref(&sema, &name_ref), self) {\n+                    (Some(NameRefClass::Definition(def)), _) if &def == self => {\n                         let kind = if is_record_lit_name_ref(&name_ref)\n                             || is_call_expr_name_ref(&name_ref)\n                         {\n@@ -252,9 +252,21 @@ impl Definition {\n                         refs.push(Reference {\n                             file_range,\n                             kind,\n-                            access: reference_access(&d, &name_ref),\n+                            access: reference_access(&def, &name_ref),\n                         });\n                     }\n+                    (\n+                        Some(NameRefClass::FieldShorthand { local, field: _ }),\n+                        Definition::StructField(_),\n+                    ) => {\n+                        let file_range = sema.original_range(name_ref.syntax());\n+                        refs.push(Reference {\n+                            file_range: file_range,\n+                            kind: ReferenceKind::StructFieldShorthand,\n+                            access: reference_access(&Definition::Local(local), &name_ref),\n+                        });\n+                    }\n+                    _ => {} // not a usage\n                 }\n             }\n         }"}]}