{"sha": "f9af11d6cc0266a5690897b4645d8cab2ed1115b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5YWYxMWQ2Y2MwMjY2YTU2OTA4OTdiNDY0NWQ4Y2FiMmVkMTExNWI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-01-16T02:30:40Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-02-01T14:44:48Z"}, "message": "libsyntax: Remove all `@str` from the AST", "tree": {"sha": "5389d0af37aa4d5207ac8ea5890183d81bc81d16", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5389d0af37aa4d5207ac8ea5890183d81bc81d16"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9af11d6cc0266a5690897b4645d8cab2ed1115b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9af11d6cc0266a5690897b4645d8cab2ed1115b", "html_url": "https://github.com/rust-lang/rust/commit/f9af11d6cc0266a5690897b4645d8cab2ed1115b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9af11d6cc0266a5690897b4645d8cab2ed1115b/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b496d7bec2a79feab092e6b4e251f7b0cee2a6a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/b496d7bec2a79feab092e6b4e251f7b0cee2a6a6", "html_url": "https://github.com/rust-lang/rust/commit/b496d7bec2a79feab092e6b4e251f7b0cee2a6a6"}], "stats": {"total": 85, "additions": 46, "deletions": 39}, "files": [{"sha": "56ede9dfce178bfc6a4730080b988df00e0a0626", "filename": "src/librustc/metadata/creader.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9af11d6cc0266a5690897b4645d8cab2ed1115b/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9af11d6cc0266a5690897b4645d8cab2ed1115b/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcreader.rs?ref=f9af11d6cc0266a5690897b4645d8cab2ed1115b", "patch": "@@ -168,8 +168,8 @@ fn extract_crate_info(i: &ast::ViewItem) -> Option<CrateInfo> {\n             debug!(\"resolving extern mod stmt. ident: {:?} path_opt: {:?}\",\n                    ident, path_opt);\n             let (name, version) = match path_opt {\n-                Some((path_str, _)) => {\n-                    let crateid: Option<CrateId> = from_str(path_str);\n+                Some((ref path_str, _)) => {\n+                    let crateid: Option<CrateId> = from_str(path_str.get());\n                     match crateid {\n                         None => (@\"\", @\"\"),\n                         Some(crateid) => {"}, {"sha": "db99bd53704ebd38f0628a24cfb571727a8ef98b", "filename": "src/librustc/middle/trans/asm.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f9af11d6cc0266a5690897b4645d8cab2ed1115b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9af11d6cc0266a5690897b4645d8cab2ed1115b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fasm.rs?ref=f9af11d6cc0266a5690897b4645d8cab2ed1115b", "patch": "@@ -38,8 +38,8 @@ pub fn trans_inline_asm<'a>(bcx: &'a Block<'a>, ia: &ast::InlineAsm)\n     let temp_scope = fcx.push_custom_cleanup_scope();\n \n     // Prepare the output operands\n-    let outputs = ia.outputs.map(|&(c, out)| {\n-        constraints.push(c);\n+    let outputs = ia.outputs.map(|&(ref c, out)| {\n+        constraints.push((*c).clone());\n \n         let out_datum = unpack_datum!(bcx, expr::trans(bcx, out));\n         output_types.push(type_of::type_of(bcx.ccx(), out_datum.ty));\n@@ -48,8 +48,8 @@ pub fn trans_inline_asm<'a>(bcx: &'a Block<'a>, ia: &ast::InlineAsm)\n     });\n \n     // Now the input operands\n-    let inputs = ia.inputs.map(|&(c, input)| {\n-        constraints.push(c);\n+    let inputs = ia.inputs.map(|&(ref c, input)| {\n+        constraints.push((*c).clone());\n \n         unpack_result!(bcx, {\n             callee::trans_arg_expr(bcx,\n@@ -63,13 +63,13 @@ pub fn trans_inline_asm<'a>(bcx: &'a Block<'a>, ia: &ast::InlineAsm)\n     // no failure occurred preparing operands, no need to cleanup\n     fcx.pop_custom_cleanup_scope(temp_scope);\n \n-    let mut constraints = constraints.connect(\",\");\n+    let mut constraints = constraints.map(|s| s.get().to_str()).connect(\",\");\n \n     let mut clobbers = getClobbers();\n-    if !ia.clobbers.is_empty() && !clobbers.is_empty() {\n-        clobbers = format!(\"{},{}\", ia.clobbers, clobbers);\n+    if !ia.clobbers.get().is_empty() && !clobbers.is_empty() {\n+        clobbers = format!(\"{},{}\", ia.clobbers.get(), clobbers);\n     } else {\n-        clobbers.push_str(ia.clobbers);\n+        clobbers.push_str(ia.clobbers.get());\n     }\n \n     // Add the clobbers to our constraints list\n@@ -98,7 +98,7 @@ pub fn trans_inline_asm<'a>(bcx: &'a Block<'a>, ia: &ast::InlineAsm)\n         ast::AsmIntel => lib::llvm::AD_Intel\n     };\n \n-    let r = ia.asm.with_c_str(|a| {\n+    let r = ia.asm.get().with_c_str(|a| {\n         constraints.with_c_str(|c| {\n             InlineAsmCall(bcx, a, c, inputs, output_type, ia.volatile, ia.alignstack, dialect)\n         })"}, {"sha": "a8bbdbd60d30551d10e4922e53e1a16e929899a7", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f9af11d6cc0266a5690897b4645d8cab2ed1115b/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9af11d6cc0266a5690897b4645d8cab2ed1115b/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=f9af11d6cc0266a5690897b4645d8cab2ed1115b", "patch": "@@ -898,11 +898,11 @@ pub enum AsmDialect {\n \n #[deriving(Clone, Eq, Encodable, Decodable, IterBytes)]\n pub struct InlineAsm {\n-    asm: @str,\n+    asm: InternedString,\n     asm_str_style: StrStyle,\n-    clobbers: @str,\n-    inputs: ~[(@str, @Expr)],\n-    outputs: ~[(@str, @Expr)],\n+    clobbers: InternedString,\n+    inputs: ~[(InternedString, @Expr)],\n+    outputs: ~[(InternedString, @Expr)],\n     volatile: bool,\n     alignstack: bool,\n     dialect: AsmDialect\n@@ -1075,7 +1075,7 @@ pub enum ViewItem_ {\n     // optional @str: if present, this is a location (containing\n     // arbitrary characters) from which to fetch the crate sources\n     // For example, extern mod whatever = \"github.com/mozilla/rust\"\n-    ViewItemExternMod(Ident, Option<(@str, StrStyle)>, NodeId),\n+    ViewItemExternMod(Ident, Option<(InternedString,StrStyle)>, NodeId),\n     ViewItemUse(~[@ViewPath]),\n }\n "}, {"sha": "1a3ebf3ce5d1cccdbd04140d1ec338f59cebcc02", "filename": "src/libsyntax/ext/asm.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f9af11d6cc0266a5690897b4645d8cab2ed1115b/src%2Flibsyntax%2Fext%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9af11d6cc0266a5690897b4645d8cab2ed1115b/src%2Flibsyntax%2Fext%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fasm.rs?ref=f9af11d6cc0266a5690897b4645d8cab2ed1115b", "patch": "@@ -80,10 +80,10 @@ pub fn expand_asm(cx: &mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n \n                     let (constraint, _str_style) = p.parse_str();\n \n-                    if constraint.starts_with(\"+\") {\n+                    if constraint.get().starts_with(\"+\") {\n                         cx.span_unimpl(p.last_span,\n                                        \"'+' (read+write) output operand constraint modifier\");\n-                    } else if !constraint.starts_with(\"=\") {\n+                    } else if !constraint.get().starts_with(\"=\") {\n                         cx.span_err(p.last_span, \"output operand constraint lacks '='\");\n                     }\n \n@@ -105,9 +105,9 @@ pub fn expand_asm(cx: &mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n \n                     let (constraint, _str_style) = p.parse_str();\n \n-                    if constraint.starts_with(\"=\") {\n+                    if constraint.get().starts_with(\"=\") {\n                         cx.span_err(p.last_span, \"input operand constraint contains '='\");\n-                    } else if constraint.starts_with(\"+\") {\n+                    } else if constraint.get().starts_with(\"+\") {\n                         cx.span_err(p.last_span, \"input operand constraint contains '+'\");\n                     }\n \n@@ -138,11 +138,11 @@ pub fn expand_asm(cx: &mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n             Options => {\n                 let (option, _str_style) = p.parse_str();\n \n-                if \"volatile\" == option {\n+                if option.equiv(&(\"volatile\")) {\n                     volatile = true;\n-                } else if \"alignstack\" == option {\n+                } else if option.equiv(&(\"alignstack\")) {\n                     alignstack = true;\n-                } else if \"intel\" == option {\n+                } else if option.equiv(&(\"intel\")) {\n                     dialect = ast::AsmIntel;\n                 }\n \n@@ -192,9 +192,9 @@ pub fn expand_asm(cx: &mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n     MRExpr(@ast::Expr {\n         id: ast::DUMMY_NODE_ID,\n         node: ast::ExprInlineAsm(ast::InlineAsm {\n-            asm: asm.get().to_managed(),\n+            asm: token::intern_and_get_ident(asm.get()),\n             asm_str_style: asm_str_style.unwrap(),\n-            clobbers: cons.to_managed(),\n+            clobbers: token::intern_and_get_ident(cons),\n             inputs: inputs,\n             outputs: outputs,\n             volatile: volatile,"}, {"sha": "f41d508f07d4ab554442e37be35e10c6fbc6c776", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f9af11d6cc0266a5690897b4645d8cab2ed1115b/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9af11d6cc0266a5690897b4645d8cab2ed1115b/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=f9af11d6cc0266a5690897b4645d8cab2ed1115b", "patch": "@@ -814,8 +814,12 @@ pub fn noop_fold_expr<T: Folder>(e: @Expr, folder: &mut T) -> @Expr {\n         }\n         ExprInlineAsm(ref a) => {\n             ExprInlineAsm(InlineAsm {\n-                inputs: a.inputs.map(|&(c, input)| (c, folder.fold_expr(input))),\n-                outputs: a.outputs.map(|&(c, out)| (c, folder.fold_expr(out))),\n+                inputs: a.inputs.map(|&(ref c, input)| {\n+                    ((*c).clone(), folder.fold_expr(input))\n+                }),\n+                outputs: a.outputs.map(|&(ref c, out)| {\n+                    ((*c).clone(), folder.fold_expr(out))\n+                }),\n                 .. (*a).clone()\n             })\n         }"}, {"sha": "07124120b1248687886cf39bd449acea809bbb7c", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f9af11d6cc0266a5690897b4645d8cab2ed1115b/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9af11d6cc0266a5690897b4645d8cab2ed1115b/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=f9af11d6cc0266a5690897b4645d8cab2ed1115b", "patch": "@@ -5130,17 +5130,20 @@ impl Parser {\n         }\n     }\n \n-    pub fn parse_optional_str(&mut self) -> Option<(@str, ast::StrStyle)> {\n+    pub fn parse_optional_str(&mut self)\n+                              -> Option<(InternedString, ast::StrStyle)> {\n         let (s, style) = match self.token {\n-            token::LIT_STR(s) => (s, ast::CookedStr),\n-            token::LIT_STR_RAW(s, n) => (s, ast::RawStr(n)),\n+            token::LIT_STR(s) => (self.id_to_interned_str(s), ast::CookedStr),\n+            token::LIT_STR_RAW(s, n) => {\n+                (self.id_to_interned_str(s), ast::RawStr(n))\n+            }\n             _ => return None\n         };\n         self.bump();\n-        Some((ident_to_str(&s), style))\n+        Some((s, style))\n     }\n \n-    pub fn parse_str(&mut self) -> (@str, StrStyle) {\n+    pub fn parse_str(&mut self) -> (InternedString, StrStyle) {\n         match self.parse_optional_str() {\n             Some(s) => { s }\n             _ =>  self.fatal(\"expected string literal\")"}, {"sha": "2761cc4ea56ecabed639c87a07ebf7be6be0f965", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f9af11d6cc0266a5690897b4645d8cab2ed1115b/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9af11d6cc0266a5690897b4645d8cab2ed1115b/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=f9af11d6cc0266a5690897b4645d8cab2ed1115b", "patch": "@@ -1466,25 +1466,25 @@ pub fn print_expr(s: &mut State, expr: &ast::Expr) {\n             word(&mut s.s, \"asm!\");\n         }\n         popen(s);\n-        print_string(s, a.asm, a.asm_str_style);\n+        print_string(s, a.asm.get(), a.asm_str_style);\n         word_space(s, \":\");\n-        for &(co, o) in a.outputs.iter() {\n-            print_string(s, co, ast::CookedStr);\n+        for &(ref co, o) in a.outputs.iter() {\n+            print_string(s, co.get(), ast::CookedStr);\n             popen(s);\n             print_expr(s, o);\n             pclose(s);\n             word_space(s, \",\");\n         }\n         word_space(s, \":\");\n-        for &(co, o) in a.inputs.iter() {\n-            print_string(s, co, ast::CookedStr);\n+        for &(ref co, o) in a.inputs.iter() {\n+            print_string(s, co.get(), ast::CookedStr);\n             popen(s);\n             print_expr(s, o);\n             pclose(s);\n             word_space(s, \",\");\n         }\n         word_space(s, \":\");\n-        print_string(s, a.clobbers, ast::CookedStr);\n+        print_string(s, a.clobbers.get(), ast::CookedStr);\n         pclose(s);\n       }\n       ast::ExprMac(ref m) => print_mac(s, m),\n@@ -1998,7 +1998,7 @@ pub fn print_view_item(s: &mut State, item: &ast::ViewItem) {\n                 space(&mut s.s);\n                 word(&mut s.s, \"=\");\n                 space(&mut s.s);\n-                print_string(s, *p, style);\n+                print_string(s, p.get(), style);\n             }\n         }\n "}]}