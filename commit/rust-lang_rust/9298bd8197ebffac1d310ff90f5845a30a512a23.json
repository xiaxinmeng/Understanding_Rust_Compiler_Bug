{"sha": "9298bd8197ebffac1d310ff90f5845a30a512a23", "node_id": "C_kwDOAAsO6NoAKDkyOThiZDgxOTdlYmZmYWMxZDMxMGZmOTBmNTg0NWEzMGE1MTJhMjM", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2022-02-03T13:20:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-03T13:20:23Z"}, "message": "Rollup merge of #92310 - ehuss:rustdoc-ice, r=estebank\n\nrustdoc: Fix ICE report\n\nThe ICE report in rustdoc was confusing because it was returning an argument parse error:\n\n```\nthread 'rustc' panicked at 'aborting due to `-Z treat-err-as-bug=1`', compiler/rustc_errors/src/lib.rs:1212:27\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n\nerror: internal compiler error: unexpected panic\n\nerror: Unrecognized option: 'crate-version'\n```\n\nThis is because the ICE reporter was trying to parse the arguments as rustc, not rustdoc.  Since an argument error is a fatal error, it was early-exiting with the argument error due to unwinding.\n\nThis changes it to be a more primitive scan of the arguments. The arguments being checked are pretty simple, and only have a small handful of forms that are easy to check for.\n\nIt now looks like this:\n\n```\nthread 'rustc' panicked at 'aborting due to `-Z treat-err-as-bug=1`', compiler/rustc_errors/src/lib.rs:1212:27\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n\nerror: internal compiler error: unexpected panic\n\nnote: the compiler unexpectedly panicked. this is a bug.\n\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&template=ice.md\n\nnote: rustc 1.59.0-dev running on x86_64-apple-darwin\n\nnote: compiler flags: --crate-type lib -Z treat-err-as-bug\n\nnote: some of the compiler flags provided by cargo are hidden\n\nquery stack during panic:\nend of query stack\n```\n\nIt still says `rustc`, but I can live with that.", "tree": {"sha": "4a44ec6f0fccf4154d2861471a4ef577d87ea52f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a44ec6f0fccf4154d2861471a4ef577d87ea52f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9298bd8197ebffac1d310ff90f5845a30a512a23", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh+9aYCRBK7hj4Ov3rIwAAyMIIAKvUa8xK3kq0aHJqwDj0npxr\nxrKmj3+FgHvUeEubUR0bnV/SsCmPD8Idwd4tX1hkathVwpUD4Iuw5wOlxOV/fgj1\nq0N/hmPm9cI61r92gwnPABr314FKPoe/fpT5wuFwckeB4vX4QLZshggAepwraBB/\nmf5qlGOJZA2K0okUXm1rjPQX/JQSvNmlzk54wJiyDE/QoVp7DUa42Xj8iwoq6NVc\nfLdXOtq1A2FckEsxaj7ke1j4+pNMfaQShjl6qNsu6Pu0K072Bkd/LMnGFVMyvFWQ\nQIYNWDndLf5eyTLDm02796RG3RgurpGPCvEgtRQdu+3s5Al6D5FMAJ84fh2EyLw=\n=69CD\n-----END PGP SIGNATURE-----\n", "payload": "tree 4a44ec6f0fccf4154d2861471a4ef577d87ea52f\nparent 796bf14f2e129283d9daee7f05d14c2dfa76d643\nparent 4413141ea96cfe4edbe417f352b13160556bd48e\nauthor Yuki Okushi <jtitor@2k36.org> 1643894423 +0900\ncommitter GitHub <noreply@github.com> 1643894423 +0900\n\nRollup merge of #92310 - ehuss:rustdoc-ice, r=estebank\n\nrustdoc: Fix ICE report\n\nThe ICE report in rustdoc was confusing because it was returning an argument parse error:\n\n```\nthread 'rustc' panicked at 'aborting due to `-Z treat-err-as-bug=1`', compiler/rustc_errors/src/lib.rs:1212:27\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n\nerror: internal compiler error: unexpected panic\n\nerror: Unrecognized option: 'crate-version'\n```\n\nThis is because the ICE reporter was trying to parse the arguments as rustc, not rustdoc.  Since an argument error is a fatal error, it was early-exiting with the argument error due to unwinding.\n\nThis changes it to be a more primitive scan of the arguments. The arguments being checked are pretty simple, and only have a small handful of forms that are easy to check for.\n\nIt now looks like this:\n\n```\nthread 'rustc' panicked at 'aborting due to `-Z treat-err-as-bug=1`', compiler/rustc_errors/src/lib.rs:1212:27\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n\nerror: internal compiler error: unexpected panic\n\nnote: the compiler unexpectedly panicked. this is a bug.\n\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&template=ice.md\n\nnote: rustc 1.59.0-dev running on x86_64-apple-darwin\n\nnote: compiler flags: --crate-type lib -Z treat-err-as-bug\n\nnote: some of the compiler flags provided by cargo are hidden\n\nquery stack during panic:\nend of query stack\n```\n\nIt still says `rustc`, but I can live with that.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9298bd8197ebffac1d310ff90f5845a30a512a23", "html_url": "https://github.com/rust-lang/rust/commit/9298bd8197ebffac1d310ff90f5845a30a512a23", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9298bd8197ebffac1d310ff90f5845a30a512a23/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "796bf14f2e129283d9daee7f05d14c2dfa76d643", "url": "https://api.github.com/repos/rust-lang/rust/commits/796bf14f2e129283d9daee7f05d14c2dfa76d643", "html_url": "https://github.com/rust-lang/rust/commit/796bf14f2e129283d9daee7f05d14c2dfa76d643"}, {"sha": "4413141ea96cfe4edbe417f352b13160556bd48e", "url": "https://api.github.com/repos/rust-lang/rust/commits/4413141ea96cfe4edbe417f352b13160556bd48e", "html_url": "https://github.com/rust-lang/rust/commit/4413141ea96cfe4edbe417f352b13160556bd48e"}], "stats": {"total": 42, "additions": 21, "deletions": 21}, "files": [{"sha": "a91285a390a600d4ce4ef24b4027f29761715b49", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/9298bd8197ebffac1d310ff90f5845a30a512a23/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9298bd8197ebffac1d310ff90f5845a30a512a23/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=9298bd8197ebffac1d310ff90f5845a30a512a23", "patch": "@@ -66,7 +66,7 @@ pub const EXIT_FAILURE: i32 = 1;\n const BUG_REPORT_URL: &str = \"https://github.com/rust-lang/rust/issues/new\\\n     ?labels=C-bug%2C+I-ICE%2C+T-compiler&template=ice.md\";\n \n-const ICE_REPORT_COMPILER_FLAGS: &[&str] = &[\"Z\", \"C\", \"crate-type\"];\n+const ICE_REPORT_COMPILER_FLAGS: &[&str] = &[\"-Z\", \"-C\", \"--crate-type\"];\n \n const ICE_REPORT_COMPILER_FLAGS_EXCLUDE: &[&str] = &[\"metadata\", \"extra-filename\"];\n \n@@ -1100,31 +1100,31 @@ fn parse_crate_attrs<'a>(sess: &'a Session, input: &Input) -> PResult<'a, Vec<as\n /// debugging, since some ICEs only happens with non-default compiler flags\n /// (and the users don't always report them).\n fn extra_compiler_flags() -> Option<(Vec<String>, bool)> {\n-    let args = env::args_os().map(|arg| arg.to_string_lossy().to_string()).collect::<Vec<_>>();\n+    let mut args = env::args_os().map(|arg| arg.to_string_lossy().to_string()).peekable();\n \n-    // Avoid printing help because of empty args. This can suggest the compiler\n-    // itself is not the program root (consider RLS).\n-    if args.len() < 2 {\n-        return None;\n-    }\n-\n-    let matches = handle_options(&args)?;\n     let mut result = Vec::new();\n     let mut excluded_cargo_defaults = false;\n-    for flag in ICE_REPORT_COMPILER_FLAGS {\n-        let prefix = if flag.len() == 1 { \"-\" } else { \"--\" };\n-\n-        for content in &matches.opt_strs(flag) {\n-            // Split always returns the first element\n-            let name = if let Some(first) = content.split('=').next() { first } else { &content };\n-\n-            let content =\n-                if ICE_REPORT_COMPILER_FLAGS_STRIP_VALUE.contains(&name) { name } else { content };\n-\n-            if !ICE_REPORT_COMPILER_FLAGS_EXCLUDE.contains(&name) {\n-                result.push(format!(\"{}{} {}\", prefix, flag, content));\n+    while let Some(arg) = args.next() {\n+        if let Some(a) = ICE_REPORT_COMPILER_FLAGS.iter().find(|a| arg.starts_with(*a)) {\n+            let content = if arg.len() == a.len() {\n+                match args.next() {\n+                    Some(arg) => arg.to_string(),\n+                    None => continue,\n+                }\n+            } else if arg.get(a.len()..a.len() + 1) == Some(\"=\") {\n+                arg[a.len() + 1..].to_string()\n             } else {\n+                arg[a.len()..].to_string()\n+            };\n+            if ICE_REPORT_COMPILER_FLAGS_EXCLUDE.iter().any(|exc| content.starts_with(exc)) {\n                 excluded_cargo_defaults = true;\n+            } else {\n+                result.push(a.to_string());\n+                match ICE_REPORT_COMPILER_FLAGS_STRIP_VALUE.iter().find(|s| content.starts_with(*s))\n+                {\n+                    Some(s) => result.push(s.to_string()),\n+                    None => result.push(content),\n+                }\n             }\n         }\n     }"}]}