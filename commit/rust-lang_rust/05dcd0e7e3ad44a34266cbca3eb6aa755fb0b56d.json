{"sha": "05dcd0e7e3ad44a34266cbca3eb6aa755fb0b56d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1ZGNkMGU3ZTNhZDQ0YTM0MjY2Y2JjYTNlYjZhYTc1NWZiMGI1NmQ=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-09-03T05:48:14Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-09-03T05:48:14Z"}, "message": "Remove `LocalInternedString` uses from `librustc_typeck`.", "tree": {"sha": "13a7308e26cce5fc56e93abbc70f037fe7a9c255", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13a7308e26cce5fc56e93abbc70f037fe7a9c255"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05dcd0e7e3ad44a34266cbca3eb6aa755fb0b56d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05dcd0e7e3ad44a34266cbca3eb6aa755fb0b56d", "html_url": "https://github.com/rust-lang/rust/commit/05dcd0e7e3ad44a34266cbca3eb6aa755fb0b56d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05dcd0e7e3ad44a34266cbca3eb6aa755fb0b56d/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dfd43f0fdd4e6969c7d82c0670d70bf305fbccf8", "url": "https://api.github.com/repos/rust-lang/rust/commits/dfd43f0fdd4e6969c7d82c0670d70bf305fbccf8", "html_url": "https://github.com/rust-lang/rust/commit/dfd43f0fdd4e6969c7d82c0670d70bf305fbccf8"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "2a7b26db35bfc25a8e8a3c6e7d8dabe98a9e6c03", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/05dcd0e7e3ad44a34266cbca3eb6aa755fb0b56d/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05dcd0e7e3ad44a34266cbca3eb6aa755fb0b56d/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=05dcd0e7e3ad44a34266cbca3eb6aa755fb0b56d", "patch": "@@ -19,7 +19,7 @@ use crate::astconv::AstConv as _;\n \n use errors::{Applicability, DiagnosticBuilder};\n use syntax::ast;\n-use syntax::symbol::{Symbol, LocalInternedString, kw, sym};\n+use syntax::symbol::{Symbol, kw, sym};\n use syntax::source_map::Span;\n use syntax::util::lev_distance::find_best_match_for_name;\n use rustc::hir;\n@@ -1198,7 +1198,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n             _ => {\n                 // prevent all specified fields from being suggested\n-                let skip_fields = skip_fields.iter().map(|ref x| x.ident.as_str());\n+                let skip_fields = skip_fields.iter().map(|ref x| x.ident.name);\n                 if let Some(field_name) = Self::suggest_field_name(\n                     variant,\n                     &field.ident.as_str(),\n@@ -1242,11 +1242,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     // Return an hint about the closest match in field names\n     fn suggest_field_name(variant: &'tcx ty::VariantDef,\n                           field: &str,\n-                          skip: Vec<LocalInternedString>)\n+                          skip: Vec<Symbol>)\n                           -> Option<Symbol> {\n         let names = variant.fields.iter().filter_map(|field| {\n             // ignore already set fields and private fields from non-local crates\n-            if skip.iter().any(|x| *x == field.ident.as_str()) ||\n+            if skip.iter().any(|&x| x == field.ident.name) ||\n                (!variant.def_id.is_local() && field.vis != Visibility::Public)\n             {\n                 None"}]}