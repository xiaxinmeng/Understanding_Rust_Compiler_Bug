{"sha": "82920f36c47fb649858a31caf840e29088dcd8ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyOTIwZjM2YzQ3ZmI2NDk4NThhMzFjYWY4NDBlMjkwODhkY2Q4YWI=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2020-02-26T22:43:49Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2020-03-19T13:59:14Z"}, "message": "Don't unwind when hitting the macro expansion recursion limit", "tree": {"sha": "9d981674adc61b3d714136fd55ba2d1ecaa67137", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d981674adc61b3d714136fd55ba2d1ecaa67137"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/82920f36c47fb649858a31caf840e29088dcd8ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/82920f36c47fb649858a31caf840e29088dcd8ab", "html_url": "https://github.com/rust-lang/rust/commit/82920f36c47fb649858a31caf840e29088dcd8ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/82920f36c47fb649858a31caf840e29088dcd8ab/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c6f982cc908aacc39c3ac97f31c989f81cc213c", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c6f982cc908aacc39c3ac97f31c989f81cc213c", "html_url": "https://github.com/rust-lang/rust/commit/3c6f982cc908aacc39c3ac97f31c989f81cc213c"}], "stats": {"total": 31, "additions": 25, "deletions": 6}, "files": [{"sha": "0fc477bbd0b4c95507287785357dc4b451584d71", "filename": "src/librustc_expand/base.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82920f36c47fb649858a31caf840e29088dcd8ab/src%2Flibrustc_expand%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82920f36c47fb649858a31caf840e29088dcd8ab/src%2Flibrustc_expand%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fbase.rs?ref=82920f36c47fb649858a31caf840e29088dcd8ab", "patch": "@@ -922,6 +922,7 @@ pub struct ExpansionData {\n pub struct ExtCtxt<'a> {\n     pub parse_sess: &'a ParseSess,\n     pub ecfg: expand::ExpansionConfig<'a>,\n+    pub reduced_recursion_limit: Option<usize>,\n     pub root_path: PathBuf,\n     pub resolver: &'a mut dyn Resolver,\n     pub current_expansion: ExpansionData,\n@@ -940,6 +941,7 @@ impl<'a> ExtCtxt<'a> {\n         ExtCtxt {\n             parse_sess,\n             ecfg,\n+            reduced_recursion_limit: None,\n             resolver,\n             extern_mod_loaded,\n             root_path: PathBuf::new(),"}, {"sha": "4f568e5456c725b3bed8d19ef0d1c3f469a71bdb", "filename": "src/librustc_expand/expand.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/82920f36c47fb649858a31caf840e29088dcd8ab/src%2Flibrustc_expand%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82920f36c47fb649858a31caf840e29088dcd8ab/src%2Flibrustc_expand%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fexpand.rs?ref=82920f36c47fb649858a31caf840e29088dcd8ab", "patch": "@@ -17,7 +17,7 @@ use rustc_ast::util::map_in_place::MapInPlace;\n use rustc_ast::visit::{self, AssocCtxt, Visitor};\n use rustc_ast_pretty::pprust;\n use rustc_attr::{self as attr, is_builtin_attr, HasAttrs};\n-use rustc_errors::{Applicability, FatalError, PResult};\n+use rustc_errors::{Applicability, PResult};\n use rustc_feature::Features;\n use rustc_parse::parser::Parser;\n use rustc_parse::validate_attr;\n@@ -645,7 +645,6 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n             ))\n             .emit();\n         self.cx.trace_macros_diag();\n-        FatalError.raise();\n     }\n \n     /// A macro's expansion does not fit in this fragment kind.\n@@ -665,8 +664,17 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n         invoc: Invocation,\n         ext: &SyntaxExtensionKind,\n     ) -> ExpandResult<AstFragment, Invocation> {\n-        if self.cx.current_expansion.depth > self.cx.ecfg.recursion_limit {\n-            self.error_recursion_limit_reached();\n+        let recursion_limit =\n+            self.cx.reduced_recursion_limit.unwrap_or(self.cx.ecfg.recursion_limit);\n+        if self.cx.current_expansion.depth > recursion_limit {\n+            if self.cx.reduced_recursion_limit.is_none() {\n+                self.error_recursion_limit_reached();\n+            }\n+\n+            // Reduce the recursion limit by half each time it triggers.\n+            self.cx.reduced_recursion_limit = Some(recursion_limit / 2);\n+\n+            return ExpandResult::Ready(invoc.fragment_kind.dummy(invoc.span()));\n         }\n \n         let (fragment_kind, span) = (invoc.fragment_kind, invoc.span());"}, {"sha": "22089f9de312d2b2dcdcffec2bb59ecf5e2a1fe3", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/82920f36c47fb649858a31caf840e29088dcd8ab/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82920f36c47fb649858a31caf840e29088dcd8ab/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=82920f36c47fb649858a31caf840e29088dcd8ab", "patch": "@@ -311,6 +311,8 @@ fn configure_and_expand_inner<'a>(\n             ecx.parse_sess.missing_fragment_specifiers.borrow().iter().cloned().collect();\n         missing_fragment_specifiers.sort();\n \n+        let recursion_limit_hit = ecx.reduced_recursion_limit.is_some();\n+\n         for span in missing_fragment_specifiers {\n             let lint = lint::builtin::MISSING_FRAGMENT_SPECIFIER;\n             let msg = \"missing fragment specifier\";\n@@ -319,8 +321,15 @@ fn configure_and_expand_inner<'a>(\n         if cfg!(windows) {\n             env::set_var(\"PATH\", &old_path);\n         }\n-        krate\n-    });\n+\n+        if recursion_limit_hit {\n+            // If we hit a recursion limit, exit early to avoid later passes getting overwhelmed\n+            // with a large AST\n+            Err(ErrorReported)\n+        } else {\n+            Ok(krate)\n+        }\n+    })?;\n \n     sess.time(\"maybe_building_test_harness\", || {\n         rustc_builtin_macros::test_harness::inject("}]}