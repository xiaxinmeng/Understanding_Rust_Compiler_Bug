{"sha": "543c4648bd2028672d091cec378a50034c8709a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0M2M0NjQ4YmQyMDI4NjcyZDA5MWNlYzM3OGE1MDAzNGM4NzA5YTA=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-06-30T19:57:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-06-30T19:57:22Z"}, "message": "Rollup merge of #62062 - ecstatic-morse:dataflow-order, r=nagisa\n\nUse a more efficient iteration order for forward dataflow\n\nCurrently, dataflow begins by visiting each block in order of ID (`BasicBlock(0)`, `BasicBlock(1)`, etc.). This PR changes that initial iteration to reverse post-order (see [this blog post](https://eli.thegreenplace.net/2015/directed-graph-traversal-orderings-and-applications-to-data-flow-analysis/#data-flow-analysis) for more info). This ensures that the effects of all predecessors will be applied before a basic block is visited if the CFG has no back-edges, and should result in less total iterations even when back-edges exist. This should not change the results of dataflow analysis.\n\nThe current ordering for basic blocks may be pretty close to RPO already--`BasicBlock(0)` is already the start block--in which case the cost of doing the traversal up front will outweigh the efficiency gains.\nA perf run is needed to check this.\n\nr? @pnkfelix (I think).", "tree": {"sha": "16fc04064e9db91b985f21b7fb17ead864277f42", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/16fc04064e9db91b985f21b7fb17ead864277f42"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/543c4648bd2028672d091cec378a50034c8709a0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdGRQjCRBK7hj4Ov3rIwAAdHIIABuFgIg8hvPX04AIg8uI2Zqr\n+Mf6TWdJj0o9tcmcvgR9OQ7P1gkxUQenxNWK9QwPTX+69/ZLtswzc3ZDRYoQrhnZ\nrGQiQjE8T7IGd7AWuiUjrrOJzQE2iu2yX6jZzsq2oIfwZaFrEfzEGpl3ZrzHjDAF\nYiJhw5Y4DgNeKscOfVZEqprYxhTvwdpnf1klS+odYJGx9R7a/2BXpxoAj9seBxNd\na8HfcoaxDJpoR7CZiY5rDSlTjHR6CRBefTEYwjDEeiskaji4JKunalCZVRmriIMv\nRVsIg12nDz5crEH6/YpbKF4Rc7hZmBvw99H6NrU6ugpp712a0moFMDoLmtwJDzQ=\n=z7Mu\n-----END PGP SIGNATURE-----\n", "payload": "tree 16fc04064e9db91b985f21b7fb17ead864277f42\nparent 0af8e872ea5ac77effa59f8d3f8794f12cb8865c\nparent 07c5e2b310bf20fdccedc6a927f1417cb9ddc7fa\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1561924642 +0200\ncommitter GitHub <noreply@github.com> 1561924642 +0200\n\nRollup merge of #62062 - ecstatic-morse:dataflow-order, r=nagisa\n\nUse a more efficient iteration order for forward dataflow\n\nCurrently, dataflow begins by visiting each block in order of ID (`BasicBlock(0)`, `BasicBlock(1)`, etc.). This PR changes that initial iteration to reverse post-order (see [this blog post](https://eli.thegreenplace.net/2015/directed-graph-traversal-orderings-and-applications-to-data-flow-analysis/#data-flow-analysis) for more info). This ensures that the effects of all predecessors will be applied before a basic block is visited if the CFG has no back-edges, and should result in less total iterations even when back-edges exist. This should not change the results of dataflow analysis.\n\nThe current ordering for basic blocks may be pretty close to RPO already--`BasicBlock(0)` is already the start block--in which case the cost of doing the traversal up front will outweigh the efficiency gains.\nA perf run is needed to check this.\n\nr? @pnkfelix (I think).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/543c4648bd2028672d091cec378a50034c8709a0", "html_url": "https://github.com/rust-lang/rust/commit/543c4648bd2028672d091cec378a50034c8709a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/543c4648bd2028672d091cec378a50034c8709a0/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0af8e872ea5ac77effa59f8d3f8794f12cb8865c", "url": "https://api.github.com/repos/rust-lang/rust/commits/0af8e872ea5ac77effa59f8d3f8794f12cb8865c", "html_url": "https://github.com/rust-lang/rust/commit/0af8e872ea5ac77effa59f8d3f8794f12cb8865c"}, {"sha": "07c5e2b310bf20fdccedc6a927f1417cb9ddc7fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/07c5e2b310bf20fdccedc6a927f1417cb9ddc7fa", "html_url": "https://github.com/rust-lang/rust/commit/07c5e2b310bf20fdccedc6a927f1417cb9ddc7fa"}], "stats": {"total": 20, "additions": 18, "deletions": 2}, "files": [{"sha": "6cdd9de8b954d143889dbe9ae5df3b138973db99", "filename": "src/librustc_mir/dataflow/mod.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/543c4648bd2028672d091cec378a50034c8709a0/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/543c4648bd2028672d091cec378a50034c8709a0/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs?ref=543c4648bd2028672d091cec378a50034c8709a0", "patch": "@@ -228,9 +228,25 @@ where\n     BD: BitDenotation<'tcx>,\n {\n     fn walk_cfg(&mut self, in_out: &mut BitSet<BD::Idx>) {\n-        let mut dirty_queue: WorkQueue<mir::BasicBlock> =\n-            WorkQueue::with_all(self.builder.body.basic_blocks().len());\n         let body = self.builder.body;\n+\n+        // Initialize the dirty queue in reverse post-order. This makes it more likely that the\n+        // entry state for each basic block will have the effects of its predecessors applied\n+        // before it is processed. In fact, for CFGs without back edges, this guarantees that\n+        // dataflow will converge in exactly `N` iterations, where `N` is the number of basic\n+        // blocks.\n+        let mut dirty_queue: WorkQueue<mir::BasicBlock> =\n+            WorkQueue::with_none(body.basic_blocks().len());\n+        for (bb, _) in traversal::reverse_postorder(body) {\n+            dirty_queue.insert(bb);\n+        }\n+\n+        // Add blocks which are not reachable from START_BLOCK to the work queue. These blocks will\n+        // be processed after the ones added above.\n+        for bb in body.basic_blocks().indices() {\n+            dirty_queue.insert(bb);\n+        }\n+\n         while let Some(bb) = dirty_queue.pop() {\n             let (on_entry, trans) = self.builder.flow_state.sets.get_mut(bb.index());\n             debug_assert!(in_out.words().len() == on_entry.words().len());"}]}