{"sha": "479ce4d7836c13b3e75b2d0ac48e9f534ff859e7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3OWNlNGQ3ODM2YzEzYjNlNzViMmQwYWM0OGU5ZjUzNGZmODU5ZTc=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-07-06T00:50:14Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-07-06T22:15:06Z"}, "message": "rustc: Move crate directives over to interior vectors", "tree": {"sha": "e625b3ee41eab6654e559a4e27a59d43c4985774", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e625b3ee41eab6654e559a4e27a59d43c4985774"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/479ce4d7836c13b3e75b2d0ac48e9f534ff859e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/479ce4d7836c13b3e75b2d0ac48e9f534ff859e7", "html_url": "https://github.com/rust-lang/rust/commit/479ce4d7836c13b3e75b2d0ac48e9f534ff859e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/479ce4d7836c13b3e75b2d0ac48e9f534ff859e7/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0226f561156e2e01941d643bf261729af4083cae", "url": "https://api.github.com/repos/rust-lang/rust/commits/0226f561156e2e01941d643bf261729af4083cae", "html_url": "https://github.com/rust-lang/rust/commit/0226f561156e2e01941d643bf261729af4083cae"}], "stats": {"total": 25, "additions": 12, "deletions": 13}, "files": [{"sha": "745e3bf631f1abe87ad04e8a07c1973cbdda6fc2", "filename": "src/comp/syntax/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/479ce4d7836c13b3e75b2d0ac48e9f534ff859e7/src%2Fcomp%2Fsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/479ce4d7836c13b3e75b2d0ac48e9f534ff859e7/src%2Fcomp%2Fsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast.rs?ref=479ce4d7836c13b3e75b2d0ac48e9f534ff859e7", "patch": "@@ -85,15 +85,15 @@ type crate_cfg = vec[@meta_item];\n \n type crate = spanned[crate_];\n \n-type crate_ = rec(vec[@crate_directive] directives,\n+type crate_ = rec((@crate_directive)[] directives,\n                   _mod module,\n                   attribute[] attrs,\n                   crate_cfg config);\n \n tag crate_directive_ {\n     cdir_src_mod(ident, option::t[filename], attribute[]);\n     cdir_dir_mod(ident, option::t[filename],\n-                 vec[@crate_directive], attribute[]);\n+                 (@crate_directive)[], attribute[]);\n     cdir_view_item(@view_item);\n     cdir_syntax(path);\n     cdir_auth(path, _auth);"}, {"sha": "11032dc083dcf1154fbc9d8d4286c98f30465e4f", "filename": "src/comp/syntax/fold.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/479ce4d7836c13b3e75b2d0ac48e9f534ff859e7/src%2Fcomp%2Fsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/479ce4d7836c13b3e75b2d0ac48e9f534ff859e7/src%2Fcomp%2Fsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Ffold.rs?ref=479ce4d7836c13b3e75b2d0ac48e9f534ff859e7", "patch": "@@ -132,7 +132,7 @@ fn noop_fold_crate(&crate_ c, ast_fold fld) -> crate_ {\n     auto fold_meta_item = bind fold_meta_item_(_,fld);\n     auto fold_attribute = bind fold_attribute_(_,fold_meta_item);\n \n-    ret rec(directives=vec::map(fld.fold_crate_directive, c.directives),\n+    ret rec(directives=ivec::map(fld.fold_crate_directive, c.directives),\n             module=fld.fold_mod(c.module),\n             attrs=ivec::map(fold_attribute, c.attrs),\n             config=vec::map(fold_meta_item, c.config));\n@@ -146,7 +146,7 @@ fn noop_fold_crate_directive(&crate_directive_ cd, ast_fold fld)\n                 }\n         case(cdir_dir_mod(?id,?fname,?cds,?attrs)) {\n             cdir_dir_mod(fld.fold_ident(id),fname,\n-                         map(fld.fold_crate_directive, cds), attrs)\n+                         ivec::map(fld.fold_crate_directive, cds), attrs)\n                 }\n         case(cdir_view_item(?vi)) { \n             cdir_view_item(fld.fold_view_item(vi))"}, {"sha": "d3806454b06d6c5fcdaf13764a1d3508047c499f", "filename": "src/comp/syntax/parse/eval.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/479ce4d7836c13b3e75b2d0ac48e9f534ff859e7/src%2Fcomp%2Fsyntax%2Fparse%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/479ce4d7836c13b3e75b2d0ac48e9f534ff859e7/src%2Fcomp%2Fsyntax%2Fparse%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Feval.rs?ref=479ce4d7836c13b3e75b2d0ac48e9f534ff859e7", "patch": "@@ -24,17 +24,16 @@ type ctx =\n          mutable uint chpos,\n          ast::crate_cfg cfg);\n \n-fn eval_crate_directives(ctx cx, vec[@ast::crate_directive] cdirs,\n+fn eval_crate_directives(ctx cx, &(@ast::crate_directive)[] cdirs,\n                          str prefix, &mutable vec[@ast::view_item] view_items,\n                          &mutable vec[@ast::item] items) {\n     for (@ast::crate_directive sub_cdir in cdirs) {\n         eval_crate_directive(cx, sub_cdir, prefix, view_items, items);\n     }\n }\n \n-fn eval_crate_directives_to_mod(ctx cx,\n-                                vec[@ast::crate_directive] cdirs, str prefix)\n-   -> ast::_mod {\n+fn eval_crate_directives_to_mod(ctx cx, &(@ast::crate_directive)[] cdirs,\n+                                str prefix) -> ast::_mod {\n     let vec[@ast::view_item] view_items = [];\n     let vec[@ast::item] items = [];\n     eval_crate_directives(cx, cdirs, prefix, view_items, items);"}, {"sha": "819efb2f7f2de848707a35d5f0fbc7da3be96d3e", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/479ce4d7836c13b3e75b2d0ac48e9f534ff859e7/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/479ce4d7836c13b3e75b2d0ac48e9f534ff859e7/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=479ce4d7836c13b3e75b2d0ac48e9f534ff859e7", "patch": "@@ -2337,7 +2337,7 @@ fn parse_crate_from_source_file(&str input, &ast::crate_cfg cfg,\n     auto first_item_outer_attrs = crate_attrs._1;\n     auto m = parse_mod_items(p, token::EOF,\n                              first_item_outer_attrs);\n-    ret @spanned(lo, p.get_lo_pos(), rec(directives=[],\n+    ret @spanned(lo, p.get_lo_pos(), rec(directives=~[],\n                                          module=m,\n                                          attrs=crate_attrs._0,\n                                          config=p.get_cfg()));\n@@ -2419,8 +2419,8 @@ fn parse_crate_directive(&parser p, &ast::attribute[] first_outer_attr)\n }\n \n fn parse_crate_directives(&parser p, token::token term,\n-                          &ast::attribute[] first_outer_attr) ->\n-   vec[@ast::crate_directive] {\n+                          &ast::attribute[] first_outer_attr)\n+        -> (@ast::crate_directive)[] {\n \n     // This is pretty ugly. If we have an outer attribute then we can't accept\n     // seeing the terminator next, so if we do see it then fail the same way\n@@ -2429,10 +2429,10 @@ fn parse_crate_directives(&parser p, token::token term,\n         expect_word(p, \"mod\");\n     }\n \n-    let vec[@ast::crate_directive] cdirs = [];\n+    let (@ast::crate_directive)[] cdirs = ~[];\n     while (p.peek() != term) {\n         auto cdir = @parse_crate_directive(p, first_outer_attr);\n-        vec::push(cdirs, cdir);\n+        cdirs += ~[cdir];\n     }\n     ret cdirs;\n }"}]}