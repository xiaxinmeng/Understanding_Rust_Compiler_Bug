{"sha": "70e10deee86a10589a13ce01a2c81daa19dceb65", "node_id": "C_kwDOAAsO6NoAKDcwZTEwZGVlZTg2YTEwNTg5YTEzY2UwMWEyYzgxZGFhMTlkY2ViNjU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-11T07:36:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-11T07:36:00Z"}, "message": "Auto merge of #14326 - iDawer:refactor, r=Veykril\n\ninternal: Rename `hir::diagnostics::MissingMatchArms.match_expr` field\n\n`hir::diagnostics::MissingMatchArms.match_expr` had confusing name: it is pointing to scrutinee expression. Renamed to `scrutinee_expr` and used better fitting type for it.\n\nAlso small refactorings/cleanup.", "tree": {"sha": "bc59a4b0790251fafffbf87a4076a32e0ceba629", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc59a4b0790251fafffbf87a4076a32e0ceba629"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70e10deee86a10589a13ce01a2c81daa19dceb65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70e10deee86a10589a13ce01a2c81daa19dceb65", "html_url": "https://github.com/rust-lang/rust/commit/70e10deee86a10589a13ce01a2c81daa19dceb65", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70e10deee86a10589a13ce01a2c81daa19dceb65/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d42e75ce848659719fd05548eee4eee6e2efa89", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d42e75ce848659719fd05548eee4eee6e2efa89", "html_url": "https://github.com/rust-lang/rust/commit/6d42e75ce848659719fd05548eee4eee6e2efa89"}, {"sha": "17b9d35b3123592320fa64ac81e7483a69a6b4d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/17b9d35b3123592320fa64ac81e7483a69a6b4d7", "html_url": "https://github.com/rust-lang/rust/commit/17b9d35b3123592320fa64ac81e7483a69a6b4d7"}], "stats": {"total": 44, "additions": 21, "deletions": 23}, "files": [{"sha": "2e9066788cf627d9b685ec1ba3ebcdd8b4e9fff5", "filename": "crates/hir-ty/src/diagnostics/expr.rs", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/70e10deee86a10589a13ce01a2c81daa19dceb65/crates%2Fhir-ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70e10deee86a10589a13ce01a2c81daa19dceb65/crates%2Fhir-ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fdiagnostics%2Fexpr.rs?ref=70e10deee86a10589a13ce01a2c81daa19dceb65", "patch": "@@ -84,7 +84,7 @@ impl ExprValidator {\n \n             match expr {\n                 Expr::Match { expr, arms } => {\n-                    self.validate_match(id, *expr, arms, db, self.infer.clone());\n+                    self.validate_match(id, *expr, arms, db);\n                 }\n                 Expr::Call { .. } | Expr::MethodCall { .. } => {\n                     self.validate_call(db, id, expr, &mut filter_map_next_checker);\n@@ -147,16 +147,15 @@ impl ExprValidator {\n \n     fn validate_match(\n         &mut self,\n-        id: ExprId,\n         match_expr: ExprId,\n+        scrutinee_expr: ExprId,\n         arms: &[MatchArm],\n         db: &dyn HirDatabase,\n-        infer: Arc<InferenceResult>,\n     ) {\n         let body = db.body(self.owner);\n \n-        let match_expr_ty = &infer[match_expr];\n-        if match_expr_ty.is_unknown() {\n+        let scrut_ty = &self.infer[scrutinee_expr];\n+        if scrut_ty.is_unknown() {\n             return;\n         }\n \n@@ -166,23 +165,23 @@ impl ExprValidator {\n         let mut m_arms = Vec::with_capacity(arms.len());\n         let mut has_lowering_errors = false;\n         for arm in arms {\n-            if let Some(pat_ty) = infer.type_of_pat.get(arm.pat) {\n+            if let Some(pat_ty) = self.infer.type_of_pat.get(arm.pat) {\n                 // We only include patterns whose type matches the type\n-                // of the match expression. If we had an InvalidMatchArmPattern\n+                // of the scrutinee expression. If we had an InvalidMatchArmPattern\n                 // diagnostic or similar we could raise that in an else\n                 // block here.\n                 //\n                 // When comparing the types, we also have to consider that rustc\n-                // will automatically de-reference the match expression type if\n+                // will automatically de-reference the scrutinee expression type if\n                 // necessary.\n                 //\n                 // FIXME we should use the type checker for this.\n-                if (pat_ty == match_expr_ty\n-                    || match_expr_ty\n+                if (pat_ty == scrut_ty\n+                    || scrut_ty\n                         .as_reference()\n                         .map(|(match_expr_ty, ..)| match_expr_ty == pat_ty)\n                         .unwrap_or(false))\n-                    && types_of_subpatterns_do_match(arm.pat, &body, &infer)\n+                    && types_of_subpatterns_do_match(arm.pat, &body, &self.infer)\n                 {\n                     // If we had a NotUsefulMatchArm diagnostic, we could\n                     // check the usefulness of each pattern as we added it\n@@ -206,16 +205,16 @@ impl ExprValidator {\n             return;\n         }\n \n-        let report = compute_match_usefulness(&cx, &m_arms, match_expr_ty);\n+        let report = compute_match_usefulness(&cx, &m_arms, scrut_ty);\n \n         // FIXME Report unreacheble arms\n         // https://github.com/rust-lang/rust/blob/f31622a50/compiler/rustc_mir_build/src/thir/pattern/check_match.rs#L200\n \n         let witnesses = report.non_exhaustiveness_witnesses;\n         if !witnesses.is_empty() {\n             self.diagnostics.push(BodyValidationDiagnostic::MissingMatchArms {\n-                match_expr: id,\n-                uncovered_patterns: missing_match_arms(&cx, match_expr_ty, witnesses, arms),\n+                match_expr,\n+                uncovered_patterns: missing_match_arms(&cx, scrut_ty, witnesses, arms),\n             });\n         }\n     }\n@@ -379,7 +378,7 @@ fn missing_match_arms<'p>(\n     arms: &[MatchArm],\n ) -> String {\n     struct DisplayWitness<'a, 'p>(&'a DeconstructedPat<'p>, &'a MatchCheckCtx<'a, 'p>);\n-    impl<'a, 'p> fmt::Display for DisplayWitness<'a, 'p> {\n+    impl fmt::Display for DisplayWitness<'_, '_> {\n         fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n             let DisplayWitness(witness, cx) = *self;\n             let pat = witness.to_pat(cx);"}, {"sha": "8f019a81b2db4f73d64a23cbf89c9689f1a50810", "filename": "crates/hir/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/70e10deee86a10589a13ce01a2c81daa19dceb65/crates%2Fhir%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70e10deee86a10589a13ce01a2c81daa19dceb65/crates%2Fhir%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fdiagnostics.rs?ref=70e10deee86a10589a13ce01a2c81daa19dceb65", "patch": "@@ -199,8 +199,7 @@ pub struct MismatchedArgCount {\n \n #[derive(Debug)]\n pub struct MissingMatchArms {\n-    pub file: HirFileId,\n-    pub match_expr: AstPtr<ast::Expr>,\n+    pub scrutinee_expr: InFile<AstPtr<ast::Expr>>,\n     pub uncovered_patterns: String,\n }\n "}, {"sha": "25c07a2fbd3f973583e51d04a771a86839c80fee", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/70e10deee86a10589a13ce01a2c81daa19dceb65/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70e10deee86a10589a13ce01a2c81daa19dceb65/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=70e10deee86a10589a13ce01a2c81daa19dceb65", "patch": "@@ -1628,11 +1628,13 @@ impl DefWithBody {\n                             if let ast::Expr::MatchExpr(match_expr) =\n                                 &source_ptr.value.to_node(&root)\n                             {\n-                                if let Some(match_expr) = match_expr.expr() {\n+                                if let Some(scrut_expr) = match_expr.expr() {\n                                     acc.push(\n                                         MissingMatchArms {\n-                                            file: source_ptr.file_id,\n-                                            match_expr: AstPtr::new(&match_expr),\n+                                            scrutinee_expr: InFile::new(\n+                                                source_ptr.file_id,\n+                                                AstPtr::new(&scrut_expr),\n+                                            ),\n                                             uncovered_patterns,\n                                         }\n                                         .into(),"}, {"sha": "ac4463331f2d27998cd21d29ff98d2f2cb3c0a6e", "filename": "crates/ide-diagnostics/src/handlers/missing_match_arms.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70e10deee86a10589a13ce01a2c81daa19dceb65/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fmissing_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70e10deee86a10589a13ce01a2c81daa19dceb65/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fmissing_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fmissing_match_arms.rs?ref=70e10deee86a10589a13ce01a2c81daa19dceb65", "patch": "@@ -1,5 +1,3 @@\n-use hir::InFile;\n-\n use crate::{Diagnostic, DiagnosticsContext};\n \n // Diagnostic: missing-match-arm\n@@ -12,7 +10,7 @@ pub(crate) fn missing_match_arms(\n     Diagnostic::new(\n         \"missing-match-arm\",\n         format!(\"missing match arm: {}\", d.uncovered_patterns),\n-        ctx.sema.diagnostics_display_range(InFile::new(d.file, d.match_expr.clone().into())).range,\n+        ctx.sema.diagnostics_display_range(d.scrutinee_expr.clone().map(Into::into)).range,\n     )\n }\n "}]}