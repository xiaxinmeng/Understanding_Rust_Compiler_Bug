{"sha": "24ef94593c84084be03e6461b702178523767cf7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0ZWY5NDU5M2M4NDA4NGJlMDNlNjQ2MWI3MDIxNzg1MjM3NjdjZjc=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-01-03T21:08:21Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-01-03T21:10:46Z"}, "message": "Don't clone `type_` unnecessarily", "tree": {"sha": "bf6a1c8dc2793b8d4c55f703994333fe4c443ca5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf6a1c8dc2793b8d4c55f703994333fe4c443ca5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24ef94593c84084be03e6461b702178523767cf7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24ef94593c84084be03e6461b702178523767cf7", "html_url": "https://github.com/rust-lang/rust/commit/24ef94593c84084be03e6461b702178523767cf7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24ef94593c84084be03e6461b702178523767cf7/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a786eaac1f0272417fcc023516d09393e109a7ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/a786eaac1f0272417fcc023516d09393e109a7ea", "html_url": "https://github.com/rust-lang/rust/commit/a786eaac1f0272417fcc023516d09393e109a7ea"}], "stats": {"total": 32, "additions": 24, "deletions": 8}, "files": [{"sha": "ed972cc16e95424d4787a5ff7bdfeea8bfef8b3b", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/24ef94593c84084be03e6461b702178523767cf7/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24ef94593c84084be03e6461b702178523767cf7/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=24ef94593c84084be03e6461b702178523767cf7", "patch": "@@ -264,9 +264,9 @@ fn build_type_alias(cx: &DocContext<'_>, did: DefId) -> clean::Typedef {\n     let type_ = cx.tcx.type_of(did).clean(cx);\n \n     clean::Typedef {\n-        type_: type_.clone(),\n+        type_,\n         generics: (cx.tcx.generics_of(did), predicates).clean(cx),\n-        item_type: Some(type_),\n+        item_type: None,\n     }\n }\n "}, {"sha": "227c62537a023927c380d6266f6307276911790e", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/24ef94593c84084be03e6461b702178523767cf7/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24ef94593c84084be03e6461b702178523767cf7/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=24ef94593c84084be03e6461b702178523767cf7", "patch": "@@ -1121,7 +1121,14 @@ impl Clean<Item> for hir::ImplItem<'_> {\n                 hir::ImplItemKind::TyAlias(ref hir_ty) => {\n                     let type_ = hir_ty.clean(cx);\n                     let item_type = hir_ty_to_ty(cx.tcx, hir_ty).clean(cx);\n-                    TypedefItem(Typedef { type_, generics: Generics::default(), item_type: Some(item_type) }, true)\n+                    TypedefItem(\n+                        Typedef {\n+                            type_,\n+                            generics: Generics::default(),\n+                            item_type: Some(item_type),\n+                        },\n+                        true,\n+                    )\n                 }\n             };\n             Item::from_def_id_and_parts(local_did, Some(self.ident.name), inner, cx)\n@@ -1271,9 +1278,9 @@ impl Clean<Item> for ty::AssocItem {\n                     let type_ = cx.tcx.type_of(self.def_id).clean(cx);\n                     TypedefItem(\n                         Typedef {\n-                            type_: type_.clone(),\n+                            type_,\n                             generics: Generics { params: Vec::new(), where_predicates: Vec::new() },\n-                            item_type: Some(type_),\n+                            item_type: None,\n                         },\n                         true,\n                     )\n@@ -1988,9 +1995,13 @@ impl Clean<Vec<Item>> for (&hir::Item<'_>, Option<Symbol>) {\n                 }),\n                 ItemKind::TyAlias(hir_ty, ref generics) => {\n                     let rustdoc_ty = hir_ty.clean(cx);\n-                    let ty = hir_ty_to_ty(cx.tcx, hir_ty);\n+                    let ty = hir_ty_to_ty(cx.tcx, hir_ty).clean(cx);\n                     TypedefItem(\n-                        Typedef { type_: rustdoc_ty, generics: generics.clean(cx), item_type: Some(ty.clean(cx)) },\n+                        Typedef {\n+                            type_: rustdoc_ty,\n+                            generics: generics.clean(cx),\n+                            item_type: Some(ty),\n+                        },\n                         false,\n                     )\n                 }"}, {"sha": "be63a9c9ab7ce5b21d4856960a676f4081f8d108", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/24ef94593c84084be03e6461b702178523767cf7/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24ef94593c84084be03e6461b702178523767cf7/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=24ef94593c84084be03e6461b702178523767cf7", "patch": "@@ -1732,7 +1732,12 @@ crate struct PathSegment {\n crate struct Typedef {\n     crate type_: Type,\n     crate generics: Generics,\n-    // Type of target item.\n+    /// `type_` can come from either the HIR or from metadata. If it comes from HIR, it may be a type\n+    /// alias instead of the final type. This will always have the final type, regardless of whether\n+    /// `type_` came from HIR or from metadata.\n+    ///\n+    /// If `item_type.is_none()`, `type_` is guarenteed to come from metadata (and therefore hold the\n+    /// final type).\n     crate item_type: Option<Type>,\n }\n "}]}