{"sha": "d652e1e67f28c9accc9b98f99085e9509f711d33", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2NTJlMWU2N2YyOGM5YWNjYzliOThmOTkwODVlOTUwOWY3MTFkMzM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-11-26T21:02:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-26T21:02:32Z"}, "message": "Merge #2422\n\n2422: Use a simple progress bar instead of indicatif r=maklad a=edwin0cheng\n\n![pb](https://user-images.githubusercontent.com/11014119/69669230-6a3d5a80-10cc-11ea-8ad7-4dccb10349c9.gif)\r\n\n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>", "tree": {"sha": "a944c5511d80e5864316a85c8f5b99a146fe18d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a944c5511d80e5864316a85c8f5b99a146fe18d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d652e1e67f28c9accc9b98f99085e9509f711d33", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd3ZLoCRBK7hj4Ov3rIwAAdHIIAK5iFMa6dDK03SmsFAPUV49O\nhmMYR7Wg456Iw8+Z4/vOW03CMyuC0Dy2H2arYOQ51DqrQ+lZsLjMuouqCGZ6gm+U\nfiihPbrkhO/CzcJkhDw7FU+7+flRtN9iBmPDqt85dekPFoLgKEqP3Cgtqb/JHcGc\n91A7RCih5TPlOqnbwwqgdH1DFSAaIS1mkXeq2HndZwI/euaKkEvBL+tXbIBH3Cg8\nmtWwPBzHGw3hyRCEaz1tJGxSLGTf8PldBJ4Uv+A9cHPGNbhtlNNizEd2PTvvvf8Z\nO7H7UHuSWfi2cl4nbJdbnedSBgrlt0ntXh22UzVzd8ZS4uxRDdAP7GTCGhS0atE=\n=mjUv\n-----END PGP SIGNATURE-----\n", "payload": "tree a944c5511d80e5864316a85c8f5b99a146fe18d7\nparent 7d088a16df5983b9dcf392c7361f19e099e713bf\nparent f0aaf3b2964a26a08be13dcf04f31d5bfe46b2f3\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1574802152 +0000\ncommitter GitHub <noreply@github.com> 1574802152 +0000\n\nMerge #2422\n\n2422: Use a simple progress bar instead of indicatif r=maklad a=edwin0cheng\n\n![pb](https://user-images.githubusercontent.com/11014119/69669230-6a3d5a80-10cc-11ea-8ad7-4dccb10349c9.gif)\r\n\n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d652e1e67f28c9accc9b98f99085e9509f711d33", "html_url": "https://github.com/rust-lang/rust/commit/d652e1e67f28c9accc9b98f99085e9509f711d33", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d652e1e67f28c9accc9b98f99085e9509f711d33/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d088a16df5983b9dcf392c7361f19e099e713bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d088a16df5983b9dcf392c7361f19e099e713bf", "html_url": "https://github.com/rust-lang/rust/commit/7d088a16df5983b9dcf392c7361f19e099e713bf"}, {"sha": "f0aaf3b2964a26a08be13dcf04f31d5bfe46b2f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0aaf3b2964a26a08be13dcf04f31d5bfe46b2f3", "html_url": "https://github.com/rust-lang/rust/commit/f0aaf3b2964a26a08be13dcf04f31d5bfe46b2f3"}], "stats": {"total": 162, "additions": 125, "deletions": 37}, "files": [{"sha": "f751be2e38a678c0e4ee287e3c25f9ef5799f8f1", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d652e1e67f28c9accc9b98f99085e9509f711d33/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/d652e1e67f28c9accc9b98f99085e9509f711d33/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=d652e1e67f28c9accc9b98f99085e9509f711d33", "patch": "@@ -226,7 +226,6 @@ dependencies = [\n  \"libc 0.2.65 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 1.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"termios 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"unicode-width 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -472,17 +471,6 @@ dependencies = [\n  \"autocfg 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n-[[package]]\n-name = \"indicatif\"\n-version = \"0.13.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"console 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"number_prefix 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"regex 1.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"inotify\"\n version = \"0.6.1\"\n@@ -759,11 +747,6 @@ dependencies = [\n  \"libc 0.2.65 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n-[[package]]\n-name = \"number_prefix\"\n-version = \"0.3.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-\n [[package]]\n name = \"once_cell\"\n version = \"1.2.0\"\n@@ -945,7 +928,6 @@ name = \"ra_cli\"\n version = \"0.1.0\"\n dependencies = [\n  \"flexi_logger 0.14.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"indicatif 0.13.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"pico-args 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ra_batch 0.1.0\",\n  \"ra_db 0.1.0\",\n@@ -1718,11 +1700,6 @@ name = \"unicode-segmentation\"\n version = \"1.6.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n-[[package]]\n-name = \"unicode-width\"\n-version = \"0.1.6\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-\n [[package]]\n name = \"unicode-xid\"\n version = \"0.2.0\"\n@@ -1899,7 +1876,6 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum hermit-abi 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"307c3c9f937f38e3534b1d6447ecf090cafcc9744e4a6360e8b037b2cf5af120\"\n \"checksum idna 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"02e2673c30ee86b5b96a9cb52ad15718aa1f966f5ab9ad54a8b95d5ca33120a9\"\n \"checksum indexmap 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"712d7b3ea5827fcb9d4fda14bf4da5f136f0db2ae9c8f4bd4e2d1c6fde4e6db2\"\n-\"checksum indicatif 0.13.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8572bccfb0665e70b7faf44ee28841b8e0823450cd4ad562a76b5a3c4bf48487\"\n \"checksum inotify 0.6.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"40b54539f3910d6f84fbf9a643efd6e3aa6e4f001426c0329576128255994718\"\n \"checksum inotify-sys 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e74a1aa87c59aeff6ef2cc2fa62d41bc43f54952f55652656b18a02fd5e356c0\"\n \"checksum insta 0.12.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0d499dc062e841590a67230d853bce62d0abeb91304927871670b7c55c461349\"\n@@ -1932,7 +1908,6 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum num-integer 0.1.41 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b85e541ef8255f6cf42bbfe4ef361305c6c135d10919ecc26126c4e5ae94bc09\"\n \"checksum num-traits 0.2.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d4c81ffc11c212fa327657cb19dd85eb7419e163b5b076bede2bdb5c974c07e4\"\n \"checksum num_cpus 1.11.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"76dac5ed2a876980778b8b85f75a71b6cbf0db0b1232ee12f826bccb00d09d72\"\n-\"checksum number_prefix 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"17b02fc0ff9a9e4b35b3342880f48e896ebf69f2967921fe8646bf5b7125956a\"\n \"checksum once_cell 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"891f486f630e5c5a4916c7e16c4b24a53e78c860b646e9f8e005e4f16847bfed\"\n \"checksum ordermap 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a86ed3f5f244b372d6b1a00b72ef7f8876d0bc6a78a4c9985c53614041512063\"\n \"checksum parking_lot 0.10.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"92e98c49ab0b7ce5b222f2cc9193fc4efe11c6d0bd4f648e374684a6857b1cfc\"\n@@ -2008,7 +1983,6 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum unicode-bidi 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"49f2bd0c6468a8230e1db229cff8029217cf623c767ea5d60bfbd42729ea54d5\"\n \"checksum unicode-normalization 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b561e267b2326bb4cebfc0ef9e68355c7abe6c6f522aeac2f5bf95d56c59bdcf\"\n \"checksum unicode-segmentation 1.6.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e83e153d1053cbb5a118eeff7fd5be06ed99153f00dbcd8ae310c5fb2b22edc0\"\n-\"checksum unicode-width 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7007dbd421b92cc6e28410fe7362e2e0a2503394908f417b68ec8d1c364c4e20\"\n \"checksum unicode-xid 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"826e7639553986605ec5979c7dd957c7895e93eabed50ab2ffa7f6128a75097c\"\n \"checksum url 2.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"75b414f6c464c879d7f9babf951f23bc3743fb7313c081b2e6ca719067ea9d61\"\n \"checksum uuid 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9fde2f6a4bea1d6e007c4ad38c6839fa71cbb63b6dbf5b595aa38dc9b1093c11\""}, {"sha": "3bb47599792971b37e17a3b3d06cc3f9160ed584", "filename": "crates/ra_cli/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d652e1e67f28c9accc9b98f99085e9509f711d33/crates%2Fra_cli%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d652e1e67f28c9accc9b98f99085e9509f711d33/crates%2Fra_cli%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cli%2FCargo.toml?ref=d652e1e67f28c9accc9b98f99085e9509f711d33", "patch": "@@ -8,7 +8,6 @@ publish = false\n [dependencies]\n pico-args = \"0.3.0\"\n flexi_logger = \"0.14.0\"\n-indicatif = \"0.13.0\"\n \n ra_syntax = { path = \"../ra_syntax\" }\n ra_ide_api = { path = \"../ra_ide_api\" }"}, {"sha": "9b1802a5fc8b337092cfc8a35732740788b2bd19", "filename": "crates/ra_cli/src/analysis_stats.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d652e1e67f28c9accc9b98f99085e9509f711d33/crates%2Fra_cli%2Fsrc%2Fanalysis_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d652e1e67f28c9accc9b98f99085e9509f711d33/crates%2Fra_cli%2Fsrc%2Fanalysis_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cli%2Fsrc%2Fanalysis_stats.rs?ref=d652e1e67f28c9accc9b98f99085e9509f711d33", "patch": "@@ -6,7 +6,7 @@ use ra_db::SourceDatabaseExt;\n use ra_hir::{AssocItem, Crate, HasSource, HirDisplay, ModuleDef, Ty, TypeWalk};\n use ra_syntax::AstNode;\n \n-use crate::{Result, Verbosity};\n+use crate::{progress_report::ProgressReport, Result, Verbosity};\n \n pub fn run(\n     verbosity: Verbosity,\n@@ -75,17 +75,11 @@ pub fn run(\n     println!(\"Item Collection: {:?}, {}\", analysis_time.elapsed(), ra_prof::memory_usage());\n \n     let inference_time = Instant::now();\n-    let bar = match verbosity {\n-        Verbosity::Verbose | Verbosity::Normal => indicatif::ProgressBar::with_draw_target(\n-            funcs.len() as u64,\n-            indicatif::ProgressDrawTarget::stderr_nohz(),\n-        ),\n-        Verbosity::Quiet => indicatif::ProgressBar::hidden(),\n+    let mut bar = match verbosity {\n+        Verbosity::Verbose | Verbosity::Normal => ProgressReport::new(funcs.len() as u64),\n+        Verbosity::Quiet => ProgressReport::hidden(),\n     };\n \n-    bar.set_style(\n-        indicatif::ProgressStyle::default_bar().template(\"{wide_bar} {pos}/{len}\\n{msg}\"),\n-    );\n     bar.tick();\n     let mut num_exprs = 0;\n     let mut num_exprs_unknown = 0;"}, {"sha": "08f3531477016666f82c4781d586045d90198938", "filename": "crates/ra_cli/src/main.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d652e1e67f28c9accc9b98f99085e9509f711d33/crates%2Fra_cli%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d652e1e67f28c9accc9b98f99085e9509f711d33/crates%2Fra_cli%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cli%2Fsrc%2Fmain.rs?ref=d652e1e67f28c9accc9b98f99085e9509f711d33", "patch": "@@ -3,6 +3,7 @@\n mod analysis_stats;\n mod analysis_bench;\n mod help;\n+mod progress_report;\n \n use std::{error::Error, fmt::Write, io::Read};\n "}, {"sha": "31867a1e973e3f29fa00f120619fba8bf1366900", "filename": "crates/ra_cli/src/progress_report.rs", "status": "added", "additions": 120, "deletions": 0, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/d652e1e67f28c9accc9b98f99085e9509f711d33/crates%2Fra_cli%2Fsrc%2Fprogress_report.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d652e1e67f28c9accc9b98f99085e9509f711d33/crates%2Fra_cli%2Fsrc%2Fprogress_report.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cli%2Fsrc%2Fprogress_report.rs?ref=d652e1e67f28c9accc9b98f99085e9509f711d33", "patch": "@@ -0,0 +1,120 @@\n+//! A simple progress bar\n+//!\n+//! A single thread non-optimized progress bar\n+use std::io::Write;\n+\n+/// A Simple ASCII Progress Bar\n+pub struct ProgressReport {\n+    curr: f32,\n+    text: String,\n+    hidden: bool,\n+\n+    len: u64,\n+    pos: u64,\n+    msg: String,\n+}\n+\n+impl ProgressReport {\n+    pub fn new(len: u64) -> ProgressReport {\n+        ProgressReport {\n+            curr: 0.0,\n+            text: String::new(),\n+            hidden: false,\n+            len,\n+            pos: 0,\n+            msg: String::new(),\n+        }\n+    }\n+\n+    pub fn hidden() -> ProgressReport {\n+        ProgressReport {\n+            curr: 0.0,\n+            text: String::new(),\n+            hidden: true,\n+            len: 0,\n+            pos: 0,\n+            msg: String::new(),\n+        }\n+    }\n+\n+    pub fn set_message(&mut self, msg: &str) {\n+        self.msg = msg.to_string();\n+        self.tick();\n+    }\n+\n+    pub fn println<I: Into<String>>(&mut self, msg: I) {\n+        self.clear();\n+        println!(\"{}\", msg.into());\n+        self.tick();\n+    }\n+\n+    pub fn inc(&mut self, delta: u64) {\n+        self.pos += delta;\n+        if self.len == 0 {\n+            self.set_value(0.0)\n+        } else {\n+            self.set_value((self.pos as f32) / (self.len as f32))\n+        }\n+        self.tick();\n+    }\n+\n+    pub fn finish_and_clear(&mut self) {\n+        self.clear();\n+    }\n+\n+    pub fn tick(&mut self) {\n+        if self.hidden {\n+            return;\n+        }\n+        let percent = (self.curr * 100.0) as u32;\n+        let text = format!(\"{}/{} {:3>}% {}\", self.pos, self.len, percent, self.msg);\n+        self.update_text(&text);\n+    }\n+\n+    fn update_text(&mut self, text: &str) {\n+        // Get length of common portion\n+        let mut common_prefix_length = 0;\n+        let common_length = usize::min(self.text.len(), text.len());\n+\n+        while common_prefix_length < common_length\n+            && text.chars().nth(common_prefix_length).unwrap()\n+                == self.text.chars().nth(common_prefix_length).unwrap()\n+        {\n+            common_prefix_length += 1;\n+        }\n+\n+        // Backtrack to the first differing character\n+        let mut output = String::new();\n+        output += &'\\x08'.to_string().repeat(self.text.len() - common_prefix_length);\n+        // Output new suffix\n+        output += &text[common_prefix_length..text.len()];\n+\n+        // If the new text is shorter than the old one: delete overlapping characters\n+        if let Some(overlap_count) = self.text.len().checked_sub(text.len()) {\n+            if overlap_count > 0 {\n+                output += &\" \".repeat(overlap_count);\n+                output += &\"\\x08\".repeat(overlap_count);\n+            }\n+        }\n+\n+        let _ = std::io::stdout().write(output.as_bytes());\n+        let _ = std::io::stdout().flush();\n+        self.text = text.to_string();\n+    }\n+\n+    fn set_value(&mut self, value: f32) {\n+        self.curr = f32::max(0.0, f32::min(1.0, value));\n+    }\n+\n+    fn clear(&mut self) {\n+        if self.hidden {\n+            return;\n+        }\n+\n+        // Fill all last text to space and return the cursor\n+        let spaces = \" \".repeat(self.text.len());\n+        let backspaces = \"\\x08\".repeat(self.text.len());\n+        print!(\"{}{}{}\", backspaces, spaces, backspaces);\n+        self.text = String::new();\n+    }\n+}"}]}