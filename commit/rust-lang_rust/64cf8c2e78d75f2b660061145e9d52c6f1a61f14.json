{"sha": "64cf8c2e78d75f2b660061145e9d52c6f1a61f14", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0Y2Y4YzJlNzhkNzVmMmI2NjAwNjExNDVlOWQ1MmM2ZjFhNjFmMTQ=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-01-23T19:16:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-23T19:16:16Z"}, "message": "Rollup merge of #81288 - camelid:fix-trait-item-vis, r=jyn514\n\nrustdoc: Fix visibility of trait and impl items\n\nFixes #81274.\n\nr? `@jyn514`", "tree": {"sha": "c0b0dfd8d48e4bd294a1d6dadba826450e312fa1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c0b0dfd8d48e4bd294a1d6dadba826450e312fa1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64cf8c2e78d75f2b660061145e9d52c6f1a61f14", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgDHYACRBK7hj4Ov3rIwAAdHIIAFdT23h5zkLcKAJ2qxqlzzy4\nhwj+IbJ7DS4anTfUFa+DWBsgIgnd3dMdomTKR6+2xDIcBV+fCNY/tx1mAdIw7NyE\nGDV6Wnyu97Lqinpy1brtqKlr+0XqQ7gjc8FfM3iOrHYdI5KK3fZtY3NajGjXMT8E\nz+ztffxqMhs0BOsB8ayKIgTKrFV02ICeS8RYbZGcJBABBHLH6fYtflQtgGSClz9/\n8IqQM7+LX9o3imo5zI3gUvZ8V/D42yX7loqXNyhUnm/r5FZg+5tm66eb3QvYwFmJ\nUN9adbx0qSEE1tH1F0sq0dKOv723AmkRdIWRXryuwB+hKNPE4Heiy792qv4jHjM=\n=oG1i\n-----END PGP SIGNATURE-----\n", "payload": "tree c0b0dfd8d48e4bd294a1d6dadba826450e312fa1\nparent 81b0c3e7c24d6a91e0f33f5bf5e019a281c25b56\nparent 93e51b185a62c4a552e721461f0752f28c08fc53\nauthor Jonas Schievink <jonasschievink@gmail.com> 1611429376 +0100\ncommitter GitHub <noreply@github.com> 1611429376 +0100\n\nRollup merge of #81288 - camelid:fix-trait-item-vis, r=jyn514\n\nrustdoc: Fix visibility of trait and impl items\n\nFixes #81274.\n\nr? `@jyn514`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64cf8c2e78d75f2b660061145e9d52c6f1a61f14", "html_url": "https://github.com/rust-lang/rust/commit/64cf8c2e78d75f2b660061145e9d52c6f1a61f14", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64cf8c2e78d75f2b660061145e9d52c6f1a61f14/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81b0c3e7c24d6a91e0f33f5bf5e019a281c25b56", "url": "https://api.github.com/repos/rust-lang/rust/commits/81b0c3e7c24d6a91e0f33f5bf5e019a281c25b56", "html_url": "https://github.com/rust-lang/rust/commit/81b0c3e7c24d6a91e0f33f5bf5e019a281c25b56"}, {"sha": "93e51b185a62c4a552e721461f0752f28c08fc53", "url": "https://api.github.com/repos/rust-lang/rust/commits/93e51b185a62c4a552e721461f0752f28c08fc53", "html_url": "https://github.com/rust-lang/rust/commit/93e51b185a62c4a552e721461f0752f28c08fc53"}], "stats": {"total": 53, "additions": 51, "deletions": 2}, "files": [{"sha": "a116ed686d90e745609ffd49e18e2c1e521e4f20", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/64cf8c2e78d75f2b660061145e9d52c6f1a61f14/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64cf8c2e78d75f2b660061145e9d52c6f1a61f14/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=64cf8c2e78d75f2b660061145e9d52c6f1a61f14", "patch": "@@ -1096,7 +1096,10 @@ impl Clean<Item> for hir::TraitItem<'_> {\n                     AssocTypeItem(bounds.clean(cx), default.clean(cx))\n                 }\n             };\n-            Item::from_def_id_and_parts(local_did, Some(self.ident.name), inner, cx)\n+            let what_rustc_thinks =\n+                Item::from_def_id_and_parts(local_did, Some(self.ident.name), inner, cx);\n+            // Trait items always inherit the trait's visibility -- we don't want to show `pub`.\n+            Item { visibility: Inherited, ..what_rustc_thinks }\n         })\n     }\n }\n@@ -1131,7 +1134,21 @@ impl Clean<Item> for hir::ImplItem<'_> {\n                     )\n                 }\n             };\n-            Item::from_def_id_and_parts(local_did, Some(self.ident.name), inner, cx)\n+\n+            let what_rustc_thinks =\n+                Item::from_def_id_and_parts(local_did, Some(self.ident.name), inner, cx);\n+            let parent_item = cx.tcx.hir().expect_item(cx.tcx.hir().get_parent_item(self.hir_id));\n+            if let hir::ItemKind::Impl(impl_) = &parent_item.kind {\n+                if impl_.of_trait.is_some() {\n+                    // Trait impl items always inherit the impl's visibility --\n+                    // we don't want to show `pub`.\n+                    Item { visibility: Inherited, ..what_rustc_thinks }\n+                } else {\n+                    what_rustc_thinks\n+                }\n+            } else {\n+                panic!(\"found impl item with non-impl parent {:?}\", parent_item);\n+            }\n         })\n     }\n }"}, {"sha": "beb638406c4bed54cc3683ead73f57ee53bb15ca", "filename": "src/test/rustdoc/visibility.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/64cf8c2e78d75f2b660061145e9d52c6f1a61f14/src%2Ftest%2Frustdoc%2Fvisibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64cf8c2e78d75f2b660061145e9d52c6f1a61f14/src%2Ftest%2Frustdoc%2Fvisibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fvisibility.rs?ref=64cf8c2e78d75f2b660061145e9d52c6f1a61f14", "patch": "@@ -42,3 +42,35 @@ mod a {\n         struct FooBPriv;\n     }\n }\n+\n+// @has 'foo/trait.PubTrait.html' '//pre' 'pub trait PubTrait'\n+//\n+// @has 'foo/trait.PubTrait.html' '//pre' 'type Type;'\n+// @!has 'foo/trait.PubTrait.html' '//pre' 'pub type Type;'\n+//\n+// @has 'foo/trait.PubTrait.html' '//pre' 'const CONST: usize;'\n+// @!has 'foo/trait.PubTrait.html' '//pre' 'pub const CONST: usize;'\n+//\n+// @has 'foo/trait.PubTrait.html' '//pre' 'fn function();'\n+// @!has 'foo/trait.PubTrait.html' '//pre' 'pub fn function();'\n+\n+pub trait PubTrait {\n+    type Type;\n+    const CONST: usize;\n+    fn function();\n+}\n+\n+// @has 'foo/struct.FooPublic.html' '//code' 'type Type'\n+// @!has 'foo/struct.FooPublic.html' '//code' 'pub type Type'\n+//\n+// @has 'foo/struct.FooPublic.html' '//code' 'const CONST: usize'\n+// @!has 'foo/struct.FooPublic.html' '//code' 'pub const CONST: usize'\n+//\n+// @has 'foo/struct.FooPublic.html' '//code' 'fn function()'\n+// @!has 'foo/struct.FooPublic.html' '//code' 'pub fn function()'\n+\n+impl PubTrait for FooPublic {\n+    type Type = usize;\n+    const CONST: usize = 0;\n+    fn function() {}\n+}"}]}