{"sha": "923126348d012e8a81527de84ccb1cb1d9fde75c", "node_id": "C_kwDOAAsO6NoAKDkyMzEyNjM0OGQwMTJlOGE4MTUyN2RlODRjY2IxY2IxZDlmZGU3NWM", "commit": {"author": {"name": "Caleb Cartwright", "email": "calebcartwright@users.noreply.github.com", "date": "2021-10-20T04:01:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-20T04:01:25Z"}, "message": "Merge branch 'master' into 1.4.38-subtree", "tree": {"sha": "83cad4971c9540befdca393dd27fb14edb4a1952", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/83cad4971c9540befdca393dd27fb14edb4a1952"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/923126348d012e8a81527de84ccb1cb1d9fde75c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhb5SVCRBK7hj4Ov3rIwAAFwQIAGyhRdfnygTYjWIRPEe36lrf\nK12r1MEFUHsGu21yfMx3+RygG79LlhYHpSweJ6XvtJJYN7/jS+nT0wmwwwNuNuv/\nVT0TE4NpL/3NrEe6Jg+h2najW4Pqh2WAh2dRwFRNhpMIqCAlG2LGJR5o08dyF7KI\n0lhihKa2wpJIrwn3pxv1qMoLrD/yp68MVWDPMCCG5G2rnc2SIOPj0a6DCYEdH3PU\nCwEL4MKSOxZm0Roa3wGKxwqW+HTrSFlrVTzQsTE/3T09/KxWXMPZA9au1Ri6OiEH\n+0Ptgc+GzwGE0BeqCBEF67uQcgmhiDk/vg1nmb/INZ2KX9ax+3vVbEoT4CrOI88=\n=VD/C\n-----END PGP SIGNATURE-----\n", "payload": "tree 83cad4971c9540befdca393dd27fb14edb4a1952\nparent 9060bc5583f80a37530ee35a6cc2ddf1293d068f\nparent 1ae5c35f8d2a0d2ce5d914a479839dc0f3eb70f9\nauthor Caleb Cartwright <calebcartwright@users.noreply.github.com> 1634702485 -0500\ncommitter GitHub <noreply@github.com> 1634702485 -0500\n\nMerge branch 'master' into 1.4.38-subtree"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/923126348d012e8a81527de84ccb1cb1d9fde75c", "html_url": "https://github.com/rust-lang/rust/commit/923126348d012e8a81527de84ccb1cb1d9fde75c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/923126348d012e8a81527de84ccb1cb1d9fde75c/comments", "author": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9060bc5583f80a37530ee35a6cc2ddf1293d068f", "url": "https://api.github.com/repos/rust-lang/rust/commits/9060bc5583f80a37530ee35a6cc2ddf1293d068f", "html_url": "https://github.com/rust-lang/rust/commit/9060bc5583f80a37530ee35a6cc2ddf1293d068f"}, {"sha": "1ae5c35f8d2a0d2ce5d914a479839dc0f3eb70f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ae5c35f8d2a0d2ce5d914a479839dc0f3eb70f9", "html_url": "https://github.com/rust-lang/rust/commit/1ae5c35f8d2a0d2ce5d914a479839dc0f3eb70f9"}], "stats": {"total": 3751, "additions": 2837, "deletions": 914}, "files": [{"sha": "f4dd394445301c165bc285166a12974c44381931", "filename": ".github/workflows/upload-assets.yml", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/.github%2Fworkflows%2Fupload-assets.yml", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/.github%2Fworkflows%2Fupload-assets.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fupload-assets.yml?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -1,8 +1,10 @@\n name: upload\n \n on:\n+  push:\n   release:\n     types: [created]\n+  workflow_dispatch:\n \n jobs:\n   build-release:\n@@ -14,42 +16,40 @@ jobs:\n           - build: linux-x86_64\n             os: ubuntu-latest\n             rust: nightly\n+            target: x86_64-unknown-linux-gnu\n           - build: macos-x86_64\n             os: macos-latest\n             rust: nightly\n+            target: x86_64-apple-darwin\n           - build: windows-x86_64-gnu\n             os: windows-latest\n             rust: nightly-x86_64-gnu\n+            target: x86_64-pc-windows-gnu\n           - build: windows-x86_64-msvc\n             os: windows-latest\n             rust: nightly-x86_64-msvc\n+            target: x86_64-pc-windows-msvc\n     runs-on: ${{ matrix.os }}\n     steps:\n       - uses: actions/checkout@v2\n \n-      - name: Install Rust\n-        uses: actions-rs/toolchain@v1\n-        with:\n-          profile: minimal\n-          toolchain: ${{ matrix.rust }}\n-          override: true\n+        # Run build\n+      - name: install rustup\n+        run: |\n+          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs > rustup-init.sh\n+          sh rustup-init.sh -y --default-toolchain none\n+          rustup target add ${{ matrix.target }}\n \n       - name: Add mingw64 to path for x86_64-gnu\n         run: echo \"C:\\msys64\\mingw64\\bin\" >> $GITHUB_PATH\n         if: matrix.rust == 'nightly-x86_64-gnu'\n         shell: bash\n \n-      - name: Install cargo-make\n-        uses: actions-rs/cargo@v1\n-        with:\n-          command: install\n-          args: --force cargo-make\n-\n       - name: Build release binaries\n         uses: actions-rs/cargo@v1\n         with:\n-          command: make\n-          args: release\n+          command: build\n+          args: --release\n \n       - name: Build archive\n         shell: bash\n@@ -70,6 +70,7 @@ jobs:\n           fi\n \n       - name: Upload Release Asset\n+        if: github.event_name == 'release'\n         uses: actions/upload-release-asset@v1\n         env:\n           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}"}, {"sha": "c05e8d4896ac707d2c23b24d12eda006355a01be", "filename": ".github/workflows/windows.yml", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/.github%2Fworkflows%2Fwindows.yml", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/.github%2Fworkflows%2Fwindows.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fwindows.yml?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -54,9 +54,6 @@ jobs:\n       if: matrix.target == 'x86_64-pc-windows-gnu' && matrix.channel == 'nightly'\n       shell: bash\n \n-    - name: cargo-make\n-      run: cargo install --force cargo-make\n-\n     - name: build\n       run: |\n         rustc -Vv"}, {"sha": "71cf88f79e67b674ecf7abc54035fabaa4c84539", "filename": ".gitignore", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/.gitignore", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/.gitignore", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitignore?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -5,6 +5,7 @@\n # Generated by Cargo\n # will have compiled files and executables\n /target\n+tests/cargo-fmt/**/target\n \n # Remove Cargo.lock from gitignore if creating an executable, leave it for libraries\n # More information here http://doc.crates.io/guide.html#cargotoml-vs-cargolock"}, {"sha": "8e4f90989652700efcabffb016c8ca2af8e3f89c", "filename": "Cargo.lock", "status": "modified", "additions": 97, "deletions": 277, "changes": 374, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -35,21 +35,6 @@ version = \"1.0.25\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"9267dff192e68f3399525901e709a48c1d3982c9c072fa32f2127a0cb0babf14\"\n \n-[[package]]\n-name = \"arrayref\"\n-version = \"0.3.5\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"0d382e583f07208808f6b1249e60848879ba3543f57c32277bf52d69c2f0f0ee\"\n-\n-[[package]]\n-name = \"arrayvec\"\n-version = \"0.4.12\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"cd9fd44efafa8690358b7408d253adf110036b88f55672a933f01d616ad9b1b9\"\n-dependencies = [\n- \"nodrop\",\n-]\n-\n [[package]]\n name = \"atty\"\n version = \"0.2.13\"\n@@ -62,58 +47,16 @@ dependencies = [\n \n [[package]]\n name = \"autocfg\"\n-version = \"0.1.7\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"1d49d90015b3c36167a20fe2810c5cd875ad504b39cff3d4eae7977e6b7c1cb2\"\n-\n-[[package]]\n-name = \"backtrace\"\n-version = \"0.3.40\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"924c76597f0d9ca25d762c25a4d369d51267536465dc5064bdf0eb073ed477ea\"\n-dependencies = [\n- \"backtrace-sys\",\n- \"cfg-if 0.1.10\",\n- \"libc\",\n- \"rustc-demangle\",\n-]\n-\n-[[package]]\n-name = \"backtrace-sys\"\n-version = \"0.1.32\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"5d6575f128516de27e3ce99689419835fce9643a9b215a14d2b5b685be018491\"\n-dependencies = [\n- \"cc\",\n- \"libc\",\n-]\n-\n-[[package]]\n-name = \"base64\"\n-version = \"0.10.1\"\n+version = \"1.0.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"0b25d992356d2eb0ed82172f5248873db5560c4721f564b13cb5193bda5e668e\"\n-dependencies = [\n- \"byteorder\",\n-]\n+checksum = \"cdb031dd78e28731d87d56cc8ffef4a8f36ca26c38fe2de700543e627f8a464a\"\n \n [[package]]\n name = \"bitflags\"\n version = \"1.2.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"cf1de2fe8c75bc145a2f577add951f8134889b4795d47466a54a5c846d691693\"\n \n-[[package]]\n-name = \"blake2b_simd\"\n-version = \"0.5.8\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"5850aeee1552f495dd0250014cf64b82b7c8879a89d83b33bbdace2cc4f63182\"\n-dependencies = [\n- \"arrayref\",\n- \"arrayvec\",\n- \"constant_time_eq\",\n-]\n-\n [[package]]\n name = \"bstr\"\n version = \"0.2.8\"\n@@ -125,42 +68,55 @@ dependencies = [\n \n [[package]]\n name = \"bytecount\"\n-version = \"0.6.0\"\n+version = \"0.6.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"b0017894339f586ccb943b01b9555de56770c11cda818e7e3d8bd93f4ed7f46e\"\n+checksum = \"72feb31ffc86498dacdbd0fcebb56138e7177a8cc5cea4516031d15ae85a742e\"\n dependencies = [\n- \"packed_simd\",\n+ \"packed_simd_2\",\n ]\n \n [[package]]\n-name = \"byteorder\"\n-version = \"1.3.2\"\n+name = \"camino\"\n+version = \"1.0.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"a7c3dd8985a7111efc5c80b44e23ecdd8c007de8ade3b96595387e812b957cf5\"\n+checksum = \"52d74260d9bf6944e2208aa46841b4b8f0d7ffc0849a06837b2f510337f86b2b\"\n+dependencies = [\n+ \"serde\",\n+]\n+\n+[[package]]\n+name = \"cargo-platform\"\n+version = \"0.1.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"0226944a63d1bf35a3b5f948dd7c59e263db83695c9e8bffc4037de02e30f1d7\"\n+dependencies = [\n+ \"serde\",\n+]\n \n [[package]]\n name = \"cargo_metadata\"\n-version = \"0.8.2\"\n+version = \"0.14.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"700b3731fd7d357223d0000f4dbf1808401b694609035c3c411fbc0cd375c426\"\n+checksum = \"c297bd3135f558552f99a0daa180876984ea2c4ffa7470314540dff8c654109a\"\n dependencies = [\n+ \"camino\",\n+ \"cargo-platform\",\n  \"semver\",\n  \"serde\",\n- \"serde_derive\",\n  \"serde_json\",\n ]\n \n [[package]]\n-name = \"cc\"\n-version = \"1.0.46\"\n+name = \"cfg-if\"\n+version = \"0.1.10\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"0213d356d3c4ea2c18c40b037c3be23cd639825c18f25ee670ac7813beeef99c\"\n+checksum = \"4785bdd1c96b2a846b2bd7cc02e86b6b3dbf14e7e53446c4f54c92a361040822\"\n \n [[package]]\n name = \"cfg-if\"\n-version = \"0.1.10\"\n+version = \"1.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"4785bdd1c96b2a846b2bd7cc02e86b6b3dbf14e7e53446c4f54c92a361040822\"\n+checksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n \n [[package]]\n name = \"cfg-if\"\n@@ -183,48 +139,14 @@ dependencies = [\n  \"vec_map\",\n ]\n \n-[[package]]\n-name = \"cloudabi\"\n-version = \"0.0.3\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"ddfc5b9aa5d4507acaf872de71051dfd0e309860e88966e1051e462a077aac4f\"\n-dependencies = [\n- \"bitflags\",\n-]\n-\n-[[package]]\n-name = \"constant_time_eq\"\n-version = \"0.1.4\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"995a44c877f9212528ccc74b21a232f66ad69001e40ede5bcee2ac9ef2657120\"\n-\n-[[package]]\n-name = \"crossbeam-channel\"\n-version = \"0.4.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"acec9a3b0b3559f15aee4f90746c4e5e293b701c0f7d3925d24e01645267b68c\"\n-dependencies = [\n- \"crossbeam-utils 0.7.0\",\n-]\n-\n-[[package]]\n-name = \"crossbeam-utils\"\n-version = \"0.6.6\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"04973fa96e96579258a5091af6003abde64af786b860f18622b82e026cca60e6\"\n-dependencies = [\n- \"cfg-if 0.1.10\",\n- \"lazy_static\",\n-]\n-\n [[package]]\n name = \"crossbeam-utils\"\n-version = \"0.7.0\"\n+version = \"0.8.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"ce446db02cdc3165b94ae73111e570793400d0794e46125cc4056c81cbb039f4\"\n+checksum = \"e7e9d99fa91428effe99c5c6d4634cdeba32b8cf784fc428a2a687f61a952c49\"\n dependencies = [\n  \"autocfg\",\n- \"cfg-if 0.1.10\",\n+ \"cfg-if 1.0.0\",\n  \"lazy_static\",\n ]\n \n@@ -257,11 +179,10 @@ dependencies = [\n \n [[package]]\n name = \"dirs-sys\"\n-version = \"0.3.4\"\n+version = \"0.3.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"afa0b23de8fd801745c471deffa6e12d248f962c9fd4b4c33787b055599bde7b\"\n+checksum = \"03d86534ed367a67548dc68113a0f5db55432fdfbb6e6f9d77704397d95d5780\"\n dependencies = [\n- \"cfg-if 0.1.10\",\n  \"libc\",\n  \"redox_users\",\n  \"winapi\",\n@@ -275,9 +196,9 @@ checksum = \"bb1f6b1ce1c140482ea30ddd3335fc0024ac7ee112895426e0a629a6c20adfe3\"\n \n [[package]]\n name = \"env_logger\"\n-version = \"0.6.2\"\n+version = \"0.8.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"aafcde04e90a5226a6443b7aabdb016ba2f8307c847d524724bd9b346dd1a2d3\"\n+checksum = \"54532e3223c5af90a6a757c90b5c5521564b07e5e7a958681bcd2afad421cdcd\"\n dependencies = [\n  \"atty\",\n  \"humantime\",\n@@ -286,40 +207,12 @@ dependencies = [\n  \"termcolor\",\n ]\n \n-[[package]]\n-name = \"failure\"\n-version = \"0.1.6\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"f8273f13c977665c5db7eb2b99ae520952fe5ac831ae4cd09d80c4c7042b5ed9\"\n-dependencies = [\n- \"backtrace\",\n- \"failure_derive\",\n-]\n-\n-[[package]]\n-name = \"failure_derive\"\n-version = \"0.1.8\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"aa4da3c766cd7a0db8242e326e9e4e081edd567072893ed320008189715366a4\"\n-dependencies = [\n- \"proc-macro2\",\n- \"quote\",\n- \"syn\",\n- \"synstructure\",\n-]\n-\n [[package]]\n name = \"fnv\"\n version = \"1.0.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"2fad85553e09a6f881f739c29f0b00b0f01357c743266d478b68951ce23285f3\"\n \n-[[package]]\n-name = \"fuchsia-cprng\"\n-version = \"0.1.1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"a06f77d526c1a601b7c4cdd98f54b5eaabffc14d5f2f0296febdc7f357c6d3ba\"\n-\n [[package]]\n name = \"getopts\"\n version = \"0.2.21\"\n@@ -329,11 +222,22 @@ dependencies = [\n  \"unicode-width\",\n ]\n \n+[[package]]\n+name = \"getrandom\"\n+version = \"0.2.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"7fcd999463524c52659517fe2cea98493cfe485d10565e7b0fb07dbba7ad2753\"\n+dependencies = [\n+ \"cfg-if 1.0.0\",\n+ \"libc\",\n+ \"wasi\",\n+]\n+\n [[package]]\n name = \"globset\"\n-version = \"0.4.4\"\n+version = \"0.4.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"925aa2cac82d8834e2b2a4415b6f6879757fb5c0928fc445ae76461a12eed8f2\"\n+checksum = \"c152169ef1e421390738366d2f796655fec62621dabbd0fd476f905934061e4a\"\n dependencies = [\n  \"aho-corasick\",\n  \"bstr\",\n@@ -353,36 +257,33 @@ dependencies = [\n \n [[package]]\n name = \"humantime\"\n-version = \"1.3.0\"\n+version = \"2.1.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"df004cfca50ef23c36850aaaa59ad52cc70d0e90243c3c7737a4dd32dc7a3c4f\"\n-dependencies = [\n- \"quick-error\",\n-]\n+checksum = \"9a3a5bfb195931eeb336b2a7b4d761daec841b97f947d34394601737a7bba5e4\"\n \n [[package]]\n name = \"ignore\"\n-version = \"0.4.11\"\n+version = \"0.4.17\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"522daefc3b69036f80c7d2990b28ff9e0471c683bad05ca258e0a01dd22c5a1e\"\n+checksum = \"b287fb45c60bb826a0dc68ff08742b9d88a2fea13d6e0c286b3172065aaf878c\"\n dependencies = [\n- \"crossbeam-channel\",\n+ \"crossbeam-utils\",\n  \"globset\",\n  \"lazy_static\",\n  \"log\",\n  \"memchr\",\n  \"regex\",\n  \"same-file\",\n- \"thread_local 1.0.1\",\n+ \"thread_local\",\n  \"walkdir\",\n  \"winapi-util\",\n ]\n \n [[package]]\n name = \"itertools\"\n-version = \"0.8.0\"\n+version = \"0.9.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"5b8467d9c1cebe26feb08c640139247fac215782d35371ade9a2136ed6085358\"\n+checksum = \"284f18f85651fe11e8a991b2adb42cb078325c996ed026d994719efcfca1d54b\"\n dependencies = [\n  \"either\",\n ]\n@@ -405,6 +306,12 @@ version = \"0.2.77\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"f2f96b10ec2560088a8e76961b00d47107b3a625fecb76dedb29ee7ccbf98235\"\n \n+[[package]]\n+name = \"libm\"\n+version = \"0.1.4\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"7fc7aa29613bd6a620df431842069224d8bc9011086b1db4c0e0cd47fa03ec9a\"\n+\n [[package]]\n name = \"log\"\n version = \"0.4.14\"\n@@ -421,18 +328,13 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"88579771288728879b57485cc7d6b07d648c9f0141eb955f8ab7f9d45394468e\"\n \n [[package]]\n-name = \"nodrop\"\n-version = \"0.1.14\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"72ef4a56884ca558e5ddb05a1d1e7e1bfd9a68d9ed024c21704cc98872dae1bb\"\n-\n-[[package]]\n-name = \"packed_simd\"\n-version = \"0.3.3\"\n+name = \"packed_simd_2\"\n+version = \"0.3.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"a85ea9fc0d4ac0deb6fe7911d38786b32fc11119afd9e9d38b84ff691ce64220\"\n+checksum = \"3278e0492f961fd4ae70909f56b2723a7e8d01a228427294e19cdfdebda89a17\"\n dependencies = [\n  \"cfg-if 0.1.10\",\n+ \"libm\",\n ]\n \n [[package]]\n@@ -463,19 +365,13 @@ dependencies = [\n \n [[package]]\n name = \"proc-macro2\"\n-version = \"1.0.6\"\n+version = \"1.0.26\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"9c9e470a8dc4aeae2dee2f335e8f533e2d4b347e1434e5671afc49b054592f27\"\n+checksum = \"a152013215dca273577e18d2bf00fa862b89b24169fb78c4c95aeb07992c9cec\"\n dependencies = [\n  \"unicode-xid\",\n ]\n \n-[[package]]\n-name = \"quick-error\"\n-version = \"1.2.2\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"9274b940887ce9addde99c4eee6b5c44cc494b182b97e73dc8ffdcb3397fd3f0\"\n-\n [[package]]\n name = \"quote\"\n version = \"1.0.6\"\n@@ -486,95 +382,41 @@ dependencies = [\n ]\n \n [[package]]\n-name = \"rand_core\"\n-version = \"0.3.1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"7a6fdeb83b075e8266dcc8762c22776f6877a63111121f5f8c7411e5be7eed4b\"\n-dependencies = [\n- \"rand_core 0.4.2\",\n-]\n-\n-[[package]]\n-name = \"rand_core\"\n-version = \"0.4.2\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"9c33a3c44ca05fa6f1807d8e6743f3824e8509beca625669633be0acbdf509dc\"\n-\n-[[package]]\n-name = \"rand_os\"\n-version = \"0.1.3\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"7b75f676a1e053fc562eafbb47838d67c84801e38fc1ba459e8f180deabd5071\"\n-dependencies = [\n- \"cloudabi\",\n- \"fuchsia-cprng\",\n- \"libc\",\n- \"rand_core 0.4.2\",\n- \"rdrand\",\n- \"winapi\",\n-]\n-\n-[[package]]\n-name = \"rdrand\"\n-version = \"0.4.0\"\n+name = \"redox_syscall\"\n+version = \"0.2.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"678054eb77286b51581ba43620cc911abf02758c91f93f479767aed0f90458b2\"\n+checksum = \"05ec8ca9416c5ea37062b502703cd7fcb207736bc294f6e0cf367ac6fc234570\"\n dependencies = [\n- \"rand_core 0.3.1\",\n+ \"bitflags\",\n ]\n \n-[[package]]\n-name = \"redox_syscall\"\n-version = \"0.1.56\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"2439c63f3f6139d1b57529d16bc3b8bb855230c8efcc5d3a896c8bea7c3b1e84\"\n-\n [[package]]\n name = \"redox_users\"\n-version = \"0.3.1\"\n+version = \"0.4.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"4ecedbca3bf205f8d8f5c2b44d83cd0690e39ee84b951ed649e9f1841132b66d\"\n+checksum = \"528532f3d801c87aec9def2add9ca802fe569e44a544afe633765267840abe64\"\n dependencies = [\n- \"failure\",\n- \"rand_os\",\n+ \"getrandom\",\n  \"redox_syscall\",\n- \"rust-argon2\",\n ]\n \n [[package]]\n name = \"regex\"\n-version = \"1.3.1\"\n+version = \"1.4.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"dc220bd33bdce8f093101afe22a037b8eb0e5af33592e6a9caafff0d4cb81cbd\"\n+checksum = \"d9251239e129e16308e70d853559389de218ac275b515068abc96829d05b948a\"\n dependencies = [\n  \"aho-corasick\",\n  \"memchr\",\n  \"regex-syntax\",\n- \"thread_local 0.3.6\",\n+ \"thread_local\",\n ]\n \n [[package]]\n name = \"regex-syntax\"\n-version = \"0.6.12\"\n+version = \"0.6.22\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"11a7e20d1cce64ef2fed88b66d347f88bd9babb82845b2b858f3edbf59a4f716\"\n-\n-[[package]]\n-name = \"rust-argon2\"\n-version = \"0.5.1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"4ca4eaef519b494d1f2848fc602d18816fed808a981aedf4f1f00ceb7c9d32cf\"\n-dependencies = [\n- \"base64\",\n- \"blake2b_simd\",\n- \"crossbeam-utils 0.6.6\",\n-]\n-\n-[[package]]\n-name = \"rustc-demangle\"\n-version = \"0.1.16\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"4c691c0e608126e00913e33f0ccf3727d5fc84573623b8d65b2df340b5201783\"\n+checksum = \"b5eb417147ba9860a96cfe72a0b93bf88fee1744b5636ec99ab20c1aa9376581\"\n \n [[package]]\n name = \"rustc-workspace-hack\"\n@@ -639,34 +481,27 @@ dependencies = [\n \n [[package]]\n name = \"semver\"\n-version = \"0.9.0\"\n+version = \"1.0.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"1d7eb9ef2c18661902cc47e535f9bc51b78acd254da71d375c2f6720d9a40403\"\n+checksum = \"568a8e6258aa33c13358f81fd834adb854c6f7c9468520910a9b1e8fac068012\"\n dependencies = [\n- \"semver-parser\",\n  \"serde\",\n ]\n \n-[[package]]\n-name = \"semver-parser\"\n-version = \"0.7.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"388a1df253eca08550bef6c72392cfe7c30914bf41df5269b68cbd6ff8f570a3\"\n-\n [[package]]\n name = \"serde\"\n-version = \"1.0.101\"\n+version = \"1.0.126\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"9796c9b7ba2ffe7a9ce53c2287dfc48080f4b2b362fcc245a259b3a7201119dd\"\n+checksum = \"ec7505abeacaec74ae4778d9d9328fe5a5d04253220a85c4ee022239fc996d03\"\n dependencies = [\n  \"serde_derive\",\n ]\n \n [[package]]\n name = \"serde_derive\"\n-version = \"1.0.101\"\n+version = \"1.0.126\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"4b133a43a1ecd55d4086bd5b4dc6c1751c68b1bfbeba7a5040442022c7e7c02e\"\n+checksum = \"963a7dbc9895aeac7ac90e74f34a5d5261828f79df35cbed41e10189d3804d43\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\",\n@@ -675,9 +510,9 @@ dependencies = [\n \n [[package]]\n name = \"serde_json\"\n-version = \"1.0.41\"\n+version = \"1.0.59\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"2f72eb2a68a7dc3f9a691bfda9305a1c017a6215e5a4545c258500d2099a37c2\"\n+checksum = \"dcac07dbffa1c65e7f816ab9eba78eb142c6d44410f4eeba1e26e4f5dfa56b95\"\n dependencies = [\n  \"itoa\",\n  \"ryu\",\n@@ -716,9 +551,9 @@ dependencies = [\n \n [[package]]\n name = \"syn\"\n-version = \"1.0.11\"\n+version = \"1.0.65\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"dff0acdb207ae2fe6d5976617f887eb1e35a2ba52c13c7234c790960cdad9238\"\n+checksum = \"f3a1d708c221c5a612956ef9f75b37e454e88d1f7b899fbd3a18d4252012d663\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\",\n@@ -736,18 +571,6 @@ dependencies = [\n  \"syn\",\n ]\n \n-[[package]]\n-name = \"synstructure\"\n-version = \"0.12.1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"3f085a5855930c0441ca1288cf044ea4aecf4f43a91668abdb870b4ba546a203\"\n-dependencies = [\n- \"proc-macro2\",\n- \"quote\",\n- \"syn\",\n- \"unicode-xid\",\n-]\n-\n [[package]]\n name = \"term\"\n version = \"0.6.1\"\n@@ -796,15 +619,6 @@ dependencies = [\n  \"syn\",\n ]\n \n-[[package]]\n-name = \"thread_local\"\n-version = \"0.3.6\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"c6b53e329000edc2b34dbe8545fd20e55a333362d0a321909685a19bd28c3f1b\"\n-dependencies = [\n- \"lazy_static\",\n-]\n-\n [[package]]\n name = \"thread_local\"\n version = \"1.0.1\"\n@@ -870,6 +684,12 @@ dependencies = [\n  \"winapi-util\",\n ]\n \n+[[package]]\n+name = \"wasi\"\n+version = \"0.10.2+wasi-snapshot-preview1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"fd6fbd9a79829dd1ad0cc20627bf1ed606756a7f77edff7b66b7064f9cb327c6\"\n+\n [[package]]\n name = \"winapi\"\n version = \"0.3.8\""}, {"sha": "d282766e00b4f638ec1d3eb442ac4492d0099cdf", "filename": "Cargo.toml", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -33,7 +33,7 @@ rustfmt-format-diff = []\n generic-simd = [\"bytecount/generic-simd\"]\n \n [dependencies]\n-itertools = \"0.8\"\n+itertools = \"0.9\"\n toml = \"0.5\"\n serde = { version = \"1.0\", features = [\"derive\"] }\n serde_json = \"1.0\"\n@@ -42,15 +42,15 @@ regex = \"1.0\"\n term = \"0.6\"\n diff = \"0.1\"\n log = \"0.4.14\"\n-env_logger = \"0.6\"\n+env_logger = \"0.8\"\n getopts = \"0.2\"\n derive-new = \"0.5\"\n-cargo_metadata = \"0.8\"\n+cargo_metadata = \"0.14\"\n bytecount = \"0.6\"\n unicode-width = \"0.1.5\"\n unicode_categories = \"0.1.1\"\n dirs = \"2.0.1\"\n-ignore = \"0.4.11\"\n+ignore = \"0.4.17\"\n annotate-snippets = { version = \"0.8\", features = [\"color\"] }\n structopt = \"0.3\"\n rustfmt-config_proc_macro = { version = \"0.2\", path = \"config_proc_macro\" }"}, {"sha": "7a77dbe154b60f2f55224cfeae2cb41f2127c53c", "filename": "Configurations.md", "status": "modified", "additions": 65, "deletions": 5, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/Configurations.md", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/Configurations.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Configurations.md?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -521,11 +521,13 @@ fn main() {\n \n ## `disable_all_formatting`\n \n-Don't reformat anything\n+Don't reformat anything.\n+\n+Note that this option may be soft-deprecated in the future once the [ignore](#ignore) option is stabilized. Nightly toolchain users are encouraged to use [ignore](#ignore) instead when possible.\n \n - **Default value**: `false`\n - **Possible values**: `true`, `false`\n-- **Stable**: No (tracking issue: #3388)\n+- **Stable**: Yes\n \n ## `edition`\n \n@@ -924,6 +926,15 @@ fn add_one(x: i32) -> i32 {\n }\n ```\n \n+## `format_generated_files`\n+\n+Format generated files. A file is considered generated\n+if any of the first five lines contains `@generated` marker.\n+\n+- **Default value**: `false`\n+- **Possible values**: `true`, `false`\n+- **Stable**: No\n+\n ## `format_macro_matchers`\n \n Format the metavariable matching patterns in macros.\n@@ -1047,6 +1058,13 @@ fn lorem() -> usize {\n \n See also: [`tab_spaces`](#tab_spaces).\n \n+## `hex_literal_case`\n+\n+Control the case of the letters in hexadecimal literal values\n+\n+- **Default value**: `Preserve`\n+- **Possible values**: `Upper`, `Lower`\n+- **Stable**: No\n \n ## `hide_parse_errors`\n \n@@ -1610,7 +1628,7 @@ Put a trailing comma after a block based match arm (non-block arms are not affec\n \n - **Default value**: `false`\n - **Possible values**: `true`, `false`\n-- **Stable**: No (tracking issue: #3380)\n+- **Stable**: Yes\n \n #### `false` (default):\n \n@@ -1668,6 +1686,9 @@ pub enum Foo {}\n #### `false`:\n \n ```rust\n+#[derive(Eq, PartialEq, Debug, Copy, Clone)]\n+pub enum Bar {}\n+\n #[derive(Eq, PartialEq)]\n #[derive(Debug)]\n #[derive(Copy, Clone)]\n@@ -1679,7 +1700,7 @@ pub enum Foo {}\n How imports should be grouped into `use` statements. Imports will be merged or split to the configured level of granularity.\n \n - **Default value**: `Preserve`\n-- **Possible values**: `Preserve`, `Crate`, `Module`, `Item`\n+- **Possible values**: `Preserve`, `Crate`, `Module`, `Item`, `One`\n - **Stable**: No\n \n #### `Preserve` (default):\n@@ -1733,6 +1754,23 @@ use qux::h;\n use qux::i;\n ```\n \n+#### `One`:\n+\n+Merge all imports into a single `use` statement as long as they have the same visibility.\n+\n+```rust\n+pub use foo::{x, y};\n+use {\n+    bar::{\n+        a,\n+        b::{self, f, g},\n+        c,\n+        d::e,\n+    },\n+    qux::{h, i},\n+};\n+```\n+\n ## `merge_imports`\n \n This option is deprecated. Use `imports_granularity = \"Crate\"` instead.\n@@ -1824,6 +1862,9 @@ Convert `#![doc]` and `#[doc]` attributes to `//!` and `///` doc comments.\n #![doc = \"Example documentation\"]\n \n #[doc = \"Example item documentation\"]\n+pub enum Bar {}\n+\n+/// Example item documentation\n pub enum Foo {}\n ```\n \n@@ -1938,6 +1979,8 @@ fn main() {\n #### `false`:\n ```rust\n fn main() {\n+    (foo());\n+\n     ((((foo()))));\n }\n ```\n@@ -1963,6 +2006,14 @@ impl Iterator for Dummy {\n \n     type Item = i32;\n }\n+\n+impl Iterator for Dummy {\n+    type Item = i32;\n+\n+    fn next(&mut self) -> Option<Self::Item> {\n+        None\n+    }\n+}\n ```\n \n #### `true`\n@@ -2519,7 +2570,8 @@ fn main() {\n     let x = 1;\n     let y = 2;\n     let z = 3;\n-    let a = Foo { x: x, y: y, z: z };\n+    let a = Foo { x, y, z };\n+    let b = Foo { x: x, y: y, z: z };\n }\n ```\n \n@@ -2688,6 +2740,8 @@ Replace uses of the try! macro by the ? shorthand\n \n ```rust\n fn main() {\n+    let lorem = ipsum.map(|dolor| dolor.sit())?;\n+\n     let lorem = try!(ipsum.map(|dolor| dolor.sit()));\n }\n ```\n@@ -2759,6 +2813,12 @@ Break comments to fit on the line\n #### `false` (default):\n \n ```rust\n+// Lorem ipsum dolor sit amet, consectetur adipiscing elit,\n+// sed do eiusmod tempor incididunt ut labore et dolore\n+// magna aliqua. Ut enim ad minim veniam, quis nostrud\n+// exercitation ullamco laboris nisi ut aliquip ex ea\n+// commodo consequat.\n+\n // Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n ```\n "}, {"sha": "b3dda091e0a9607e75c79e3551c1ae59f85c60df", "filename": "appveyor.yml", "status": "modified", "additions": 1, "deletions": 48, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/appveyor.yml", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/appveyor.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/appveyor.yml?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -1,55 +1,8 @@\n-# This is based on https://github.com/japaric/rust-everywhere/blob/master/appveyor.yml\n-# and modified (mainly removal of deployment) to suit rustfmt.\n-\n environment:\n   global:\n     PROJECT_NAME: rustfmt\n-  matrix:\n-    # Stable channel\n-    # - TARGET: i686-pc-windows-gnu\n-    #   CHANNEL: stable\n-    # - TARGET: i686-pc-windows-msvc\n-    #   CHANNEL: stable\n-    # - TARGET: x86_64-pc-windows-gnu\n-    #   CHANNEL: stable\n-    # - TARGET: x86_64-pc-windows-msvc\n-    #   CHANNEL: stable\n-    # Beta channel\n-    # - TARGET: i686-pc-windows-gnu\n-    #   CHANNEL: beta\n-    # - TARGET: i686-pc-windows-msvc\n-    #   CHANNEL: beta\n-    # - TARGET: x86_64-pc-windows-gnu\n-    #   CHANNEL: beta\n-    # - TARGET: x86_64-pc-windows-msvc\n-    #   CHANNEL: beta\n-    # Nightly channel\n-    - TARGET: i686-pc-windows-gnu\n-      CHANNEL: nightly\n-    - TARGET: i686-pc-windows-msvc\n-      CHANNEL: nightly\n-    - TARGET: x86_64-pc-windows-gnu\n-      CHANNEL: nightly\n-    - TARGET: x86_64-pc-windows-msvc\n-      CHANNEL: nightly\n-\n-# Install Rust and Cargo\n-# (Based on from https://github.com/rust-lang/libc/blob/master/appveyor.yml)\n-install:\n-  - appveyor-retry appveyor DownloadFile https://win.rustup.rs/ -FileName rustup-init.exe\n-  - if \"%TARGET%\" == \"i686-pc-windows-gnu\" set PATH=%PATH%;C:\\msys64\\mingw32\\bin\n-  - if \"%TARGET%\" == \"x86_64-pc-windows-gnu\" set PATH=%PATH%;C:\\msys64\\mingw64\\bin\n-  - set PATH=%PATH%;C:\\Users\\appveyor\\.cargo\\bin\n-  - rustup-init.exe --default-host %TARGET% --default-toolchain %CHANNEL% -y\n-  - rustc -Vv\n-  - cargo -V\n \n-# ???\n build: false\n \n test_script:\n-  - set CFG_RELEASE_CHANNEL=nightly\n-  - set CFG_RELEASE=nightly\n-  - cargo build --verbose\n-  - cargo test\n-  - cargo test -- --ignored\n+  - echo Why does no one have access to delete me?"}, {"sha": "4fa932d4c762ee77ae19489a6c62d05bc64c27c2", "filename": "docs/index.html", "status": "modified", "additions": 165, "deletions": 45, "changes": 210, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/docs%2Findex.html", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/docs%2Findex.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Findex.html?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -2,9 +2,13 @@\n <html>\n     <head>\n       <meta name=\"viewport\" content=\"width=device-width\">\n+      <title>Rustfmt</title>\n       <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/github-markdown-css/3.0.1/github-markdown.css\" />\n+      <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/10.0.0/styles/github-gist.min.css\">\n       <script src=\"https://cdn.jsdelivr.net/npm/marked/marked.min.js\"></script>\n       <script src=\"https://cdn.jsdelivr.net/npm/vue@2.6.10/dist/vue.js\"></script>\n+      <script src=\"https://unpkg.com/vue-async-computed@3.8.1\"></script>\n+      <script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/10.0.0/highlight.min.js\"></script>\n       <script src=\"https://cdnjs.cloudflare.com/ajax/libs/axios/0.18.0/axios.min.js\"></script>\n       <style>\n         @media (max-width: 767px) {\n@@ -38,6 +42,15 @@\n         .searchCondition > div {\n           margin-right: 30px;\n         }\n+        .header-link {\n+          position: relative;\n+        }\n+        .header-link:hover::before {\n+          position: absolute;\n+          left: -2em;\n+          padding-right: 0.5em;\n+          content: '\\2002\\00a7\\2002';\n+        }\n       </style>\n     </head>\n     <body>\n@@ -59,70 +72,170 @@\n                   <label for=\"stable\">stable: </label>\n                   <input type=\"checkbox\" id=\"stable\" v-model=\"shouldStable\">\n               </div>\n+              <div>\n+                  <label for=\"viewVersion\">version: </label>\n+                  <select name=\"viewVersion\" id=\"viewVersion\" v-model=\"viewVersion\">\n+                    <option v-for=\"option in versionOptions\" v-bind:value=\"option\">\n+                      {{ option }}\n+                    </option>\n+                  </select>\n+              </div>\n             </div>\n             <div v-html=\"aboutHtml\"></div>\n             <div v-html=\"configurationAboutHtml\"></div>\n             <div v-html=\"outputHtml\"></div>\n           </article>\n         </div>\n         <script>\n-            const ConfigurationMdUrl = 'https://raw.githubusercontent.com/rust-lang/rustfmt/master/Configurations.md';\n+            const RusfmtTagsUrl = 'https://api.github.com/repos/rust-lang/rustfmt/tags';\n+            const RustfmtLatestUrl = 'https://api.github.com/repos/rust-lang/rustfmt/releases/latest';\n             const UrlHash = window.location.hash.replace(/^#/, '');\n+            const queryParams = new URLSearchParams(window.location.search);\n+            const searchParam = queryParams.get('search');\n+            const searchTerm = null !== searchParam ? searchParam : '';\n+            const versionParam = queryParams.get('version');\n+            const parseVersionParam = (version) => {\n+              if (version === 'master') return 'master';\n+              if (version.startsWith('v')) return version;\n+              return `v${version}`;\n+            };\n+            const versionNumber = null !== versionParam ? parseVersionParam(versionParam) : 'master';\n             new Vue({\n               el: '#app',\n-              data() {\n-                const configurationDescriptions = [];\n-                configurationDescriptions.links = {};\n-                return {\n-                  aboutHtml: '',\n-                  configurationAboutHtml: '',\n-                  searchCondition: UrlHash,\n-                  configurationDescriptions,\n-                  shouldStable: false\n-                }\n+              data: {\n+                aboutHtml: '',\n+                configurationAboutHtml: '',\n+                configurationDescriptions: [],\n+                searchCondition: searchTerm,\n+                shouldStable: false,\n+                viewVersion: versionNumber,\n+                oldViewVersion: undefined,\n+                versionOptions: ['master'],\n+                scrolledOnce: false,\n               },\n-              computed: {\n-                outputHtml() {\n-                  const ast = this.configurationDescriptions\n-                                  .filter(({ head, text, stable }) => {\n+              asyncComputed: {\n+                async updateVersion() {\n+                  let latest;\n+                  try {\n+                    latest = (await axios.get(RustfmtLatestUrl)).data;\n+                  } catch(err) {\n+                      console.log(err);\n+                    return;\n+                  }\n+                  if (versionParam == null) {\n+                    this.viewVersion = latest.name;\n+                  }\n+                },\n+                async outputHtml() {\n+                  if (this.viewVersion !== this.oldViewVersion) {\n+                    const ConfigurationMdUrl =\n+                      `https://raw.githubusercontent.com/rust-lang/rustfmt/${this.viewVersion}/Configurations.md`;\n+                    let res;\n+                    try {\n+                      res = await axios.get(ConfigurationMdUrl).catch(e => { throw e });\n+                    } catch(e) {\n+                      this.handleReqFailure(e);\n+                      return;\n+                    }\n+                    const {\n+                      about,\n+                      configurationAbout,\n+                      configurationDescriptions\n+                    } = parseMarkdownAst(res.data);\n+                    this.aboutHtml = marked.parser(about);\n+                    this.configurationAboutHtml = marked.parser(configurationAbout);\n+                    this.configurationDescriptions = configurationDescriptions;\n+                    this.oldViewVersion = this.viewVersion;\n+                  }\n \n-                                    if (\n-                                      text.includes(this.searchCondition) === false &&\n-                                      head.includes(this.searchCondition) === false\n-                                    ) {\n-                                      return false;\n-                                    }\n-                                    return (this.shouldStable)\n-                                      ? stable === true\n-                                      : true;\n-                                  })\n-                                  .reduce((stack, { value }) => {\n-                                    return stack.concat(value);\n-                                  }, []);\n+                  const ast = this.configurationDescriptions\n+                      .filter(({ head, text, stable }) => {\n+                        if (text.includes(this.searchCondition) === false &&\n+                          head.includes(this.searchCondition) === false) {\n+                          return false;\n+                        }\n+                        return (this.shouldStable)\n+                          ? stable === true\n+                          : true;\n+                      })\n+                      .reduce((stack, { value }) => {\n+                        return stack.concat(value);\n+                      }, []);\n                   ast.links = {};\n-                  return marked.parser(ast);\n+\n+                  queryParams.set('version', this.viewVersion);\n+                  queryParams.set('search', this.searchCondition);\n+                  const curUrl = window.location.pathname +\n+                    '?' + queryParams.toString() + window.location.hash;\n+                  history.pushState(null, '', curUrl);\n+\n+                  const renderer = new marked.Renderer();\n+                  renderer.heading = function(text, level) {\n+                    const id = htmlToId(text);\n+                    return `<h${level}>\n+                              <a id=\"${id}\" href=\"#${id}\" name=\"${id}\" class=\"header-link\">${text}</a>\n+                            </h${level}>`;\n+                  };\n+\n+                  return marked.parser(ast, {\n+                    highlight(code, lang) {\n+                      return hljs.highlight(lang ? lang : 'rust', code).value;\n+                    },\n+                    headerIds: true,\n+                    headerPrefix: '',\n+                    renderer,\n+                  });\n                 }\n               },\n               created: async function() {\n-                const res = await axios.get(ConfigurationMdUrl);\n-                const {\n-                  about,\n-                  configurationAbout,\n-                  configurationDescriptions\n-                } = parseMarkdownAst(res.data);\n-                this.aboutHtml = marked.parser(about);\n-                this.configurationAboutHtml = marked.parser(configurationAbout);\n-                this.configurationDescriptions = configurationDescriptions;\n+                let tags;\n+                try {\n+                  tags = (await axios.get(RusfmtTagsUrl)).data;\n+                } catch(e) {\n+                  this.handleReqFailure(e);\n+                  return;\n+                }\n+\n+                const excludedTagVersions = new Set(['v0.7', 'v0.8.1']);\n+\n+                const tagOptions = tags\n+                  .map(tag => tag.name)\n+                  .filter(tag => tag.startsWith('v') && !excludedTagVersions.has(tag));\n+                this.versionOptions = this.versionOptions.concat(tagOptions);\n               },\n-              mounted() {\n+              updated() {\n                 if (UrlHash === '') return;\n-                const interval = setInterval(() => {\n+                this.$nextTick(() => {\n                   const target = document.querySelector(`#${UrlHash}`);\n-                  if (target != null) {\n+                  if (target != null && !this.scrolledOnce) {\n                     target.scrollIntoView(true);\n-                    clearInterval(interval);\n+                    this.scrolledOnce = true;\n                   }\n-                }, 100);\n+                });\n+              },\n+              methods: {\n+                handleReqFailure(e) {\n+                  if (e.response.status === 404) {\n+                    this.aboutHtml =\n+                      \"<p>Failed to get configuration options for this version, please select the version from the dropdown above.</p>\";\n+                  } else if (\n+                    e.response.status === 403 &&\n+                    e.response.headers[\"X-RateLimit-Remaining\"] === 0\n+                  ) {\n+                    const resetDate = new Date(\n+                      e.response.headers['X-RateLimit-Reset'] * 1000\n+                    ).toLocaleString();\n+                    this.aboutHtml =\n+                      `<p>You have hit the GitHub API rate limit; documentation cannot be updated.` +\n+                      `<p>The rate limit will be reset at ${resetDate}.</p>`;\n+                  } else {\n+                    this.aboutHtml =\n+                      `<p>Ecountered an error when fetching documentation data:</p>` +\n+                      `<pre><code>${e.response.data}</code></pre>` +\n+                      `<p>We would appreciate <a href=\"https://github.com/rust-lang/rustfmt/issues/new?template=bug_report.md\">a bug report</a>.` +\n+                      `<p>Try refreshing the page.</p>`;\n+                  }\n+                }\n               }\n             });\n             const extractDepthOnes = (ast) => {\n@@ -155,7 +268,9 @@\n                     head: val[0].text,\n                     value: val,\n                     stable: val.some((elem) => {\n-                      return !!elem.text && elem.text.includes(\"**Stable**: Yes\")\n+                      return elem.type === \"list\" &&\n+                        !!elem.raw &&\n+                        elem.raw.includes(\"**Stable**: Yes\");\n                     }),\n                     text: val.reduce((result, next) => {\n                       return next.text != null\n@@ -186,6 +301,11 @@\n                 configurationDescriptions\n               };\n             }\n+            function htmlToId(text) {\n+              const tmpl = document.createElement('template');\n+              tmpl.innerHTML = text.trim();\n+              return encodeURIComponent(CSS.escape(tmpl.content.textContent));\n+            }\n         </script>\n     </body>\n-</html>\n\\ No newline at end of file\n+</html>"}, {"sha": "a5982820e3ded6f2de868975ac9003ee441623f4", "filename": "src/attr.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/src%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/src%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fattr.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -13,6 +13,7 @@ use crate::lists::{definitive_tactic, itemize_list, write_list, ListFormatting,\n use crate::overflow;\n use crate::rewrite::{Rewrite, RewriteContext};\n use crate::shape::Shape;\n+use crate::source_map::SpanUtils;\n use crate::types::{rewrite_path, PathContext};\n use crate::utils::{count_newlines, mk_sp};\n \n@@ -116,7 +117,9 @@ fn format_derive(\n                 |span| span.lo(),\n                 |span| span.hi(),\n                 |span| Some(context.snippet(*span).to_owned()),\n-                attr.span.lo(),\n+                // We update derive attribute spans to start after the opening '('\n+                // This helps us focus parsing to just what's inside #[derive(...)]\n+                context.snippet_provider.span_after(attr.span, \"(\"),\n                 attr.span.hi(),\n                 false,\n             );"}, {"sha": "1bcc5c0dada3bd0695d9fd5c8167890ab7eff255", "filename": "src/bin/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/src%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/src%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmain.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -121,7 +121,7 @@ fn make_opts() -> Options {\n          found reverts to the input file path\",\n         \"[Path for the configuration file]\",\n     );\n-    opts.optopt(\"\", \"edition\", \"Rust edition to use\", \"[2015|2018]\");\n+    opts.optopt(\"\", \"edition\", \"Rust edition to use\", \"[2015|2018|2021]\");\n     opts.optopt(\n         \"\",\n         \"color\","}, {"sha": "1d423ac34919b421a31e4f77f4e63030746082a6", "filename": "src/cargo-fmt/main.rs", "status": "modified", "additions": 39, "deletions": 254, "changes": 293, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/src%2Fcargo-fmt%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/src%2Fcargo-fmt%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcargo-fmt%2Fmain.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -17,6 +17,10 @@ use std::str;\n \n use structopt::StructOpt;\n \n+#[path = \"test/mod.rs\"]\n+#[cfg(test)]\n+mod cargo_fmt_tests;\n+\n #[derive(StructOpt, Debug)]\n #[structopt(\n     bin_name = \"cargo fmt\",\n@@ -36,7 +40,7 @@ pub struct Opts {\n     #[structopt(long = \"version\")]\n     version: bool,\n \n-    /// Specify package to format (only usable in workspaces)\n+    /// Specify package to format\n     #[structopt(short = \"p\", long = \"package\", value_name = \"package\")]\n     packages: Vec<String>,\n \n@@ -53,9 +57,13 @@ pub struct Opts {\n     #[structopt(name = \"rustfmt_options\", raw(true))]\n     rustfmt_options: Vec<String>,\n \n-    /// Format all packages (only usable in workspaces)\n+    /// Format all packages, and also their local path-based dependencies\n     #[structopt(long = \"all\")]\n     format_all: bool,\n+\n+    /// Run rustfmt in check mode\n+    #[structopt(long = \"check\")]\n+    check: bool,\n }\n \n fn main() {\n@@ -104,6 +112,12 @@ fn execute() -> i32 {\n \n     let strategy = CargoFmtStrategy::from_opts(&opts);\n     let mut rustfmt_args = opts.rustfmt_options;\n+    if opts.check {\n+        let check_flag = \"--check\";\n+        if !rustfmt_args.iter().any(|o| o == check_flag) {\n+            rustfmt_args.push(check_flag.to_owned());\n+        }\n+    }\n     if let Some(message_format) = opts.message_format {\n         if let Err(msg) = convert_message_format_to_rustfmt_args(&message_format, &mut rustfmt_args)\n         {\n@@ -346,7 +360,7 @@ fn get_targets_root_only(\n     manifest_path: Option<&Path>,\n     targets: &mut BTreeSet<Target>,\n ) -> Result<(), io::Error> {\n-    let metadata = get_cargo_metadata(manifest_path, false)?;\n+    let metadata = get_cargo_metadata(manifest_path)?;\n     let workspace_root_path = PathBuf::from(&metadata.workspace_root).canonicalize()?;\n     let (in_workspace_root, current_dir_manifest) = if let Some(target_manifest) = manifest_path {\n         (\n@@ -390,34 +404,29 @@ fn get_targets_recursive(\n     mut targets: &mut BTreeSet<Target>,\n     visited: &mut BTreeSet<String>,\n ) -> Result<(), io::Error> {\n-    let metadata = get_cargo_metadata(manifest_path, false)?;\n-    let metadata_with_deps = get_cargo_metadata(manifest_path, true)?;\n-\n-    for package in metadata.packages {\n+    let metadata = get_cargo_metadata(manifest_path)?;\n+    for package in &metadata.packages {\n         add_targets(&package.targets, &mut targets);\n \n-        // Look for local dependencies.\n-        for dependency in package.dependencies {\n-            if dependency.source.is_some() || visited.contains(&dependency.name) {\n+        // Look for local dependencies using information available since cargo v1.51\n+        // It's theoretically possible someone could use a newer version of rustfmt with\n+        // a much older version of `cargo`, but we don't try to explicitly support that scenario.\n+        // If someone reports an issue with path-based deps not being formatted, be sure to\n+        // confirm their version of `cargo` (not `cargo-fmt`) is >= v1.51\n+        // https://github.com/rust-lang/cargo/pull/8994\n+        for dependency in &package.dependencies {\n+            if dependency.path.is_none() || visited.contains(&dependency.name) {\n                 continue;\n             }\n \n-            let dependency_package = metadata_with_deps\n-                .packages\n-                .iter()\n-                .find(|p| p.name == dependency.name && p.source.is_none());\n-            let manifest_path = if let Some(dep_pkg) = dependency_package {\n-                PathBuf::from(&dep_pkg.manifest_path)\n-            } else {\n-                let mut package_manifest_path = PathBuf::from(&package.manifest_path);\n-                package_manifest_path.pop();\n-                package_manifest_path.push(&dependency.name);\n-                package_manifest_path.push(\"Cargo.toml\");\n-                package_manifest_path\n-            };\n-\n-            if manifest_path.exists() {\n-                visited.insert(dependency.name);\n+            let manifest_path = PathBuf::from(dependency.path.as_ref().unwrap()).join(\"Cargo.toml\");\n+            if manifest_path.exists()\n+                && !metadata\n+                    .packages\n+                    .iter()\n+                    .any(|p| p.manifest_path.eq(&manifest_path))\n+            {\n+                visited.insert(dependency.name.to_owned());\n                 get_targets_recursive(Some(&manifest_path), &mut targets, visited)?;\n             }\n         }\n@@ -431,8 +440,7 @@ fn get_targets_with_hitlist(\n     hitlist: &[String],\n     targets: &mut BTreeSet<Target>,\n ) -> Result<(), io::Error> {\n-    let metadata = get_cargo_metadata(manifest_path, false)?;\n-\n+    let metadata = get_cargo_metadata(manifest_path)?;\n     let mut workspace_hitlist: BTreeSet<&String> = BTreeSet::from_iter(hitlist);\n \n     for package in metadata.packages {\n@@ -517,18 +525,13 @@ fn run_rustfmt(\n         .unwrap_or(SUCCESS))\n }\n \n-fn get_cargo_metadata(\n-    manifest_path: Option<&Path>,\n-    include_deps: bool,\n-) -> Result<cargo_metadata::Metadata, io::Error> {\n+fn get_cargo_metadata(manifest_path: Option<&Path>) -> Result<cargo_metadata::Metadata, io::Error> {\n     let mut cmd = cargo_metadata::MetadataCommand::new();\n-    if !include_deps {\n-        cmd.no_deps();\n-    }\n+    cmd.no_deps();\n     if let Some(manifest_path) = manifest_path {\n         cmd.manifest_path(manifest_path);\n     }\n-    cmd.other_options(&[String::from(\"--offline\")]);\n+    cmd.other_options(vec![String::from(\"--offline\")]);\n \n     match cmd.exec() {\n         Ok(metadata) => Ok(metadata),\n@@ -541,221 +544,3 @@ fn get_cargo_metadata(\n         }\n     }\n }\n-\n-#[cfg(test)]\n-mod cargo_fmt_tests {\n-    use super::*;\n-\n-    #[test]\n-    fn default_options() {\n-        let empty: Vec<String> = vec![];\n-        let o = Opts::from_iter(&empty);\n-        assert_eq!(false, o.quiet);\n-        assert_eq!(false, o.verbose);\n-        assert_eq!(false, o.version);\n-        assert_eq!(empty, o.packages);\n-        assert_eq!(empty, o.rustfmt_options);\n-        assert_eq!(false, o.format_all);\n-        assert_eq!(None, o.manifest_path);\n-        assert_eq!(None, o.message_format);\n-    }\n-\n-    #[test]\n-    fn good_options() {\n-        let o = Opts::from_iter(&[\n-            \"test\",\n-            \"-q\",\n-            \"-p\",\n-            \"p1\",\n-            \"-p\",\n-            \"p2\",\n-            \"--message-format\",\n-            \"short\",\n-            \"--\",\n-            \"--edition\",\n-            \"2018\",\n-        ]);\n-        assert_eq!(true, o.quiet);\n-        assert_eq!(false, o.verbose);\n-        assert_eq!(false, o.version);\n-        assert_eq!(vec![\"p1\", \"p2\"], o.packages);\n-        assert_eq!(vec![\"--edition\", \"2018\"], o.rustfmt_options);\n-        assert_eq!(false, o.format_all);\n-        assert_eq!(Some(String::from(\"short\")), o.message_format);\n-    }\n-\n-    #[test]\n-    fn unexpected_option() {\n-        assert!(\n-            Opts::clap()\n-                .get_matches_from_safe(&[\"test\", \"unexpected\"])\n-                .is_err()\n-        );\n-    }\n-\n-    #[test]\n-    fn unexpected_flag() {\n-        assert!(\n-            Opts::clap()\n-                .get_matches_from_safe(&[\"test\", \"--flag\"])\n-                .is_err()\n-        );\n-    }\n-\n-    #[test]\n-    fn mandatory_separator() {\n-        assert!(\n-            Opts::clap()\n-                .get_matches_from_safe(&[\"test\", \"--check\"])\n-                .is_err()\n-        );\n-        assert!(\n-            !Opts::clap()\n-                .get_matches_from_safe(&[\"test\", \"--\", \"--check\"])\n-                .is_err()\n-        );\n-    }\n-\n-    #[test]\n-    fn multiple_packages_one_by_one() {\n-        let o = Opts::from_iter(&[\n-            \"test\",\n-            \"-p\",\n-            \"package1\",\n-            \"--package\",\n-            \"package2\",\n-            \"-p\",\n-            \"package3\",\n-        ]);\n-        assert_eq!(3, o.packages.len());\n-    }\n-\n-    #[test]\n-    fn multiple_packages_grouped() {\n-        let o = Opts::from_iter(&[\n-            \"test\",\n-            \"--package\",\n-            \"package1\",\n-            \"package2\",\n-            \"-p\",\n-            \"package3\",\n-            \"package4\",\n-        ]);\n-        assert_eq!(4, o.packages.len());\n-    }\n-\n-    #[test]\n-    fn empty_packages_1() {\n-        assert!(Opts::clap().get_matches_from_safe(&[\"test\", \"-p\"]).is_err());\n-    }\n-\n-    #[test]\n-    fn empty_packages_2() {\n-        assert!(\n-            Opts::clap()\n-                .get_matches_from_safe(&[\"test\", \"-p\", \"--\", \"--check\"])\n-                .is_err()\n-        );\n-    }\n-\n-    #[test]\n-    fn empty_packages_3() {\n-        assert!(\n-            Opts::clap()\n-                .get_matches_from_safe(&[\"test\", \"-p\", \"--verbose\"])\n-                .is_err()\n-        );\n-    }\n-\n-    #[test]\n-    fn empty_packages_4() {\n-        assert!(\n-            Opts::clap()\n-                .get_matches_from_safe(&[\"test\", \"-p\", \"--check\"])\n-                .is_err()\n-        );\n-    }\n-\n-    mod convert_message_format_to_rustfmt_args_tests {\n-        use super::*;\n-\n-        #[test]\n-        fn invalid_message_format() {\n-            assert_eq!(\n-                convert_message_format_to_rustfmt_args(\"awesome\", &mut vec![]),\n-                Err(String::from(\n-                    \"invalid --message-format value: awesome. Allowed values are: short|json|human\"\n-                )),\n-            );\n-        }\n-\n-        #[test]\n-        fn json_message_format_and_check_arg() {\n-            let mut args = vec![String::from(\"--check\")];\n-            assert_eq!(\n-                convert_message_format_to_rustfmt_args(\"json\", &mut args),\n-                Err(String::from(\n-                    \"cannot include --check arg when --message-format is set to json\"\n-                )),\n-            );\n-        }\n-\n-        #[test]\n-        fn json_message_format_and_emit_arg() {\n-            let mut args = vec![String::from(\"--emit\"), String::from(\"checkstyle\")];\n-            assert_eq!(\n-                convert_message_format_to_rustfmt_args(\"json\", &mut args),\n-                Err(String::from(\n-                    \"cannot include --emit arg when --message-format is set to json\"\n-                )),\n-            );\n-        }\n-\n-        #[test]\n-        fn json_message_format() {\n-            let mut args = vec![String::from(\"--edition\"), String::from(\"2018\")];\n-            assert!(convert_message_format_to_rustfmt_args(\"json\", &mut args).is_ok());\n-            assert_eq!(\n-                args,\n-                vec![\n-                    String::from(\"--edition\"),\n-                    String::from(\"2018\"),\n-                    String::from(\"--emit\"),\n-                    String::from(\"json\")\n-                ]\n-            );\n-        }\n-\n-        #[test]\n-        fn human_message_format() {\n-            let exp_args = vec![String::from(\"--emit\"), String::from(\"json\")];\n-            let mut act_args = exp_args.clone();\n-            assert!(convert_message_format_to_rustfmt_args(\"human\", &mut act_args).is_ok());\n-            assert_eq!(act_args, exp_args);\n-        }\n-\n-        #[test]\n-        fn short_message_format() {\n-            let mut args = vec![String::from(\"--check\")];\n-            assert!(convert_message_format_to_rustfmt_args(\"short\", &mut args).is_ok());\n-            assert_eq!(args, vec![String::from(\"--check\"), String::from(\"-l\")]);\n-        }\n-\n-        #[test]\n-        fn short_message_format_included_short_list_files_flag() {\n-            let mut args = vec![String::from(\"--check\"), String::from(\"-l\")];\n-            assert!(convert_message_format_to_rustfmt_args(\"short\", &mut args).is_ok());\n-            assert_eq!(args, vec![String::from(\"--check\"), String::from(\"-l\")]);\n-        }\n-\n-        #[test]\n-        fn short_message_format_included_long_list_files_flag() {\n-            let mut args = vec![String::from(\"--check\"), String::from(\"--files-with-diff\")];\n-            assert!(convert_message_format_to_rustfmt_args(\"short\", &mut args).is_ok());\n-            assert_eq!(\n-                args,\n-                vec![String::from(\"--check\"), String::from(\"--files-with-diff\")]\n-            );\n-        }\n-    }\n-}"}, {"sha": "bf44924f13c31cdc56fa9779969791d6910418ee", "filename": "src/cargo-fmt/test/message_format.rs", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/src%2Fcargo-fmt%2Ftest%2Fmessage_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/src%2Fcargo-fmt%2Ftest%2Fmessage_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcargo-fmt%2Ftest%2Fmessage_format.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1,80 @@\n+use super::*;\n+\n+#[test]\n+fn invalid_message_format() {\n+    assert_eq!(\n+        convert_message_format_to_rustfmt_args(\"awesome\", &mut vec![]),\n+        Err(String::from(\n+            \"invalid --message-format value: awesome. Allowed values are: short|json|human\"\n+        )),\n+    );\n+}\n+\n+#[test]\n+fn json_message_format_and_check_arg() {\n+    let mut args = vec![String::from(\"--check\")];\n+    assert_eq!(\n+        convert_message_format_to_rustfmt_args(\"json\", &mut args),\n+        Err(String::from(\n+            \"cannot include --check arg when --message-format is set to json\"\n+        )),\n+    );\n+}\n+\n+#[test]\n+fn json_message_format_and_emit_arg() {\n+    let mut args = vec![String::from(\"--emit\"), String::from(\"checkstyle\")];\n+    assert_eq!(\n+        convert_message_format_to_rustfmt_args(\"json\", &mut args),\n+        Err(String::from(\n+            \"cannot include --emit arg when --message-format is set to json\"\n+        )),\n+    );\n+}\n+\n+#[test]\n+fn json_message_format() {\n+    let mut args = vec![String::from(\"--edition\"), String::from(\"2018\")];\n+    assert!(convert_message_format_to_rustfmt_args(\"json\", &mut args).is_ok());\n+    assert_eq!(\n+        args,\n+        vec![\n+            String::from(\"--edition\"),\n+            String::from(\"2018\"),\n+            String::from(\"--emit\"),\n+            String::from(\"json\")\n+        ]\n+    );\n+}\n+\n+#[test]\n+fn human_message_format() {\n+    let exp_args = vec![String::from(\"--emit\"), String::from(\"json\")];\n+    let mut act_args = exp_args.clone();\n+    assert!(convert_message_format_to_rustfmt_args(\"human\", &mut act_args).is_ok());\n+    assert_eq!(act_args, exp_args);\n+}\n+\n+#[test]\n+fn short_message_format() {\n+    let mut args = vec![String::from(\"--check\")];\n+    assert!(convert_message_format_to_rustfmt_args(\"short\", &mut args).is_ok());\n+    assert_eq!(args, vec![String::from(\"--check\"), String::from(\"-l\")]);\n+}\n+\n+#[test]\n+fn short_message_format_included_short_list_files_flag() {\n+    let mut args = vec![String::from(\"--check\"), String::from(\"-l\")];\n+    assert!(convert_message_format_to_rustfmt_args(\"short\", &mut args).is_ok());\n+    assert_eq!(args, vec![String::from(\"--check\"), String::from(\"-l\")]);\n+}\n+\n+#[test]\n+fn short_message_format_included_long_list_files_flag() {\n+    let mut args = vec![String::from(\"--check\"), String::from(\"--files-with-diff\")];\n+    assert!(convert_message_format_to_rustfmt_args(\"short\", &mut args).is_ok());\n+    assert_eq!(\n+        args,\n+        vec![String::from(\"--check\"), String::from(\"--files-with-diff\")]\n+    );\n+}"}, {"sha": "360503632c7ed2ce2a42529a2e22265f2588fbd2", "filename": "src/cargo-fmt/test/mod.rs", "status": "added", "additions": 137, "deletions": 0, "changes": 137, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/src%2Fcargo-fmt%2Ftest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/src%2Fcargo-fmt%2Ftest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcargo-fmt%2Ftest%2Fmod.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1,137 @@\n+use super::*;\n+\n+mod message_format;\n+mod targets;\n+\n+#[test]\n+fn default_options() {\n+    let empty: Vec<String> = vec![];\n+    let o = Opts::from_iter(&empty);\n+    assert_eq!(false, o.quiet);\n+    assert_eq!(false, o.verbose);\n+    assert_eq!(false, o.version);\n+    assert_eq!(false, o.check);\n+    assert_eq!(empty, o.packages);\n+    assert_eq!(empty, o.rustfmt_options);\n+    assert_eq!(false, o.format_all);\n+    assert_eq!(None, o.manifest_path);\n+    assert_eq!(None, o.message_format);\n+}\n+\n+#[test]\n+fn good_options() {\n+    let o = Opts::from_iter(&[\n+        \"test\",\n+        \"-q\",\n+        \"-p\",\n+        \"p1\",\n+        \"-p\",\n+        \"p2\",\n+        \"--message-format\",\n+        \"short\",\n+        \"--check\",\n+        \"--\",\n+        \"--edition\",\n+        \"2018\",\n+    ]);\n+    assert_eq!(true, o.quiet);\n+    assert_eq!(false, o.verbose);\n+    assert_eq!(false, o.version);\n+    assert_eq!(true, o.check);\n+    assert_eq!(vec![\"p1\", \"p2\"], o.packages);\n+    assert_eq!(vec![\"--edition\", \"2018\"], o.rustfmt_options);\n+    assert_eq!(false, o.format_all);\n+    assert_eq!(Some(String::from(\"short\")), o.message_format);\n+}\n+\n+#[test]\n+fn unexpected_option() {\n+    assert!(\n+        Opts::clap()\n+            .get_matches_from_safe(&[\"test\", \"unexpected\"])\n+            .is_err()\n+    );\n+}\n+\n+#[test]\n+fn unexpected_flag() {\n+    assert!(\n+        Opts::clap()\n+            .get_matches_from_safe(&[\"test\", \"--flag\"])\n+            .is_err()\n+    );\n+}\n+\n+#[test]\n+fn mandatory_separator() {\n+    assert!(\n+        Opts::clap()\n+            .get_matches_from_safe(&[\"test\", \"--emit\"])\n+            .is_err()\n+    );\n+    assert!(\n+        !Opts::clap()\n+            .get_matches_from_safe(&[\"test\", \"--\", \"--emit\"])\n+            .is_err()\n+    );\n+}\n+\n+#[test]\n+fn multiple_packages_one_by_one() {\n+    let o = Opts::from_iter(&[\n+        \"test\",\n+        \"-p\",\n+        \"package1\",\n+        \"--package\",\n+        \"package2\",\n+        \"-p\",\n+        \"package3\",\n+    ]);\n+    assert_eq!(3, o.packages.len());\n+}\n+\n+#[test]\n+fn multiple_packages_grouped() {\n+    let o = Opts::from_iter(&[\n+        \"test\",\n+        \"--package\",\n+        \"package1\",\n+        \"package2\",\n+        \"-p\",\n+        \"package3\",\n+        \"package4\",\n+    ]);\n+    assert_eq!(4, o.packages.len());\n+}\n+\n+#[test]\n+fn empty_packages_1() {\n+    assert!(Opts::clap().get_matches_from_safe(&[\"test\", \"-p\"]).is_err());\n+}\n+\n+#[test]\n+fn empty_packages_2() {\n+    assert!(\n+        Opts::clap()\n+            .get_matches_from_safe(&[\"test\", \"-p\", \"--\", \"--check\"])\n+            .is_err()\n+    );\n+}\n+\n+#[test]\n+fn empty_packages_3() {\n+    assert!(\n+        Opts::clap()\n+            .get_matches_from_safe(&[\"test\", \"-p\", \"--verbose\"])\n+            .is_err()\n+    );\n+}\n+\n+#[test]\n+fn empty_packages_4() {\n+    assert!(\n+        Opts::clap()\n+            .get_matches_from_safe(&[\"test\", \"-p\", \"--check\"])\n+            .is_err()\n+    );\n+}"}, {"sha": "b7e7fabdf7156e5e8a1587bc0f168791e7478002", "filename": "src/cargo-fmt/test/targets.rs", "status": "added", "additions": 134, "deletions": 0, "changes": 134, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/src%2Fcargo-fmt%2Ftest%2Ftargets.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/src%2Fcargo-fmt%2Ftest%2Ftargets.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcargo-fmt%2Ftest%2Ftargets.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1,134 @@\n+use super::*;\n+\n+struct ExpTarget {\n+    path: &'static str,\n+    edition: &'static str,\n+    kind: &'static str,\n+}\n+\n+mod all_targets {\n+    use super::*;\n+\n+    fn assert_correct_targets_loaded(\n+        manifest_suffix: &str,\n+        source_root: &str,\n+        exp_targets: &[ExpTarget],\n+        exp_num_targets: usize,\n+    ) {\n+        let root_path = Path::new(\"tests/cargo-fmt/source\").join(source_root);\n+        let get_path = |exp: &str| PathBuf::from(&root_path).join(exp).canonicalize().unwrap();\n+        let manifest_path = Path::new(&root_path).join(manifest_suffix);\n+        let targets = get_targets(&CargoFmtStrategy::All, Some(manifest_path.as_path()))\n+            .expect(\"Targets should have been loaded\");\n+\n+        assert_eq!(targets.len(), exp_num_targets);\n+\n+        for target in exp_targets {\n+            assert!(targets.contains(&Target {\n+                path: get_path(target.path),\n+                edition: target.edition.to_owned(),\n+                kind: target.kind.to_owned(),\n+            }));\n+        }\n+    }\n+\n+    mod different_crate_and_dir_names {\n+        use super::*;\n+\n+        fn assert_correct_targets_loaded(manifest_suffix: &str) {\n+            let exp_targets = vec![\n+                ExpTarget {\n+                    path: \"dependency-dir-name/subdep-dir-name/src/lib.rs\",\n+                    edition: \"2018\",\n+                    kind: \"lib\",\n+                },\n+                ExpTarget {\n+                    path: \"dependency-dir-name/src/lib.rs\",\n+                    edition: \"2018\",\n+                    kind: \"lib\",\n+                },\n+                ExpTarget {\n+                    path: \"src/main.rs\",\n+                    edition: \"2018\",\n+                    kind: \"main\",\n+                },\n+            ];\n+            super::assert_correct_targets_loaded(\n+                manifest_suffix,\n+                \"divergent-crate-dir-names\",\n+                &exp_targets,\n+                3,\n+            );\n+        }\n+\n+        #[test]\n+        fn correct_targets_from_root() {\n+            assert_correct_targets_loaded(\"Cargo.toml\");\n+        }\n+\n+        #[test]\n+        fn correct_targets_from_sub_local_dep() {\n+            assert_correct_targets_loaded(\"dependency-dir-name/Cargo.toml\");\n+        }\n+    }\n+\n+    mod workspaces {\n+        use super::*;\n+\n+        fn assert_correct_targets_loaded(manifest_suffix: &str) {\n+            let exp_targets = vec![\n+                ExpTarget {\n+                    path: \"ws/a/src/main.rs\",\n+                    edition: \"2018\",\n+                    kind: \"bin\",\n+                },\n+                ExpTarget {\n+                    path: \"ws/b/src/main.rs\",\n+                    edition: \"2018\",\n+                    kind: \"bin\",\n+                },\n+                ExpTarget {\n+                    path: \"ws/c/src/lib.rs\",\n+                    edition: \"2018\",\n+                    kind: \"lib\",\n+                },\n+                ExpTarget {\n+                    path: \"ws/a/d/src/lib.rs\",\n+                    edition: \"2018\",\n+                    kind: \"lib\",\n+                },\n+                ExpTarget {\n+                    path: \"e/src/main.rs\",\n+                    edition: \"2018\",\n+                    kind: \"main\",\n+                },\n+                ExpTarget {\n+                    path: \"ws/a/d/f/src/lib.rs\",\n+                    edition: \"2018\",\n+                    kind: \"lib\",\n+                },\n+            ];\n+            super::assert_correct_targets_loaded(\n+                manifest_suffix,\n+                \"workspaces/path-dep-above\",\n+                &exp_targets,\n+                6,\n+            );\n+        }\n+\n+        #[test]\n+        fn includes_outside_workspace_deps() {\n+            assert_correct_targets_loaded(\"ws/Cargo.toml\");\n+        }\n+\n+        #[test]\n+        fn includes_workspace_from_dep_above() {\n+            assert_correct_targets_loaded(\"e/Cargo.toml\");\n+        }\n+\n+        #[test]\n+        fn includes_all_packages_from_workspace_subdir() {\n+            assert_correct_targets_loaded(\"ws/a/d/f/Cargo.toml\");\n+        }\n+    }\n+}"}, {"sha": "60825424858561d41ddddef355cc6845f17cef31", "filename": "src/comment.rs", "status": "modified", "additions": 32, "deletions": 36, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -10,7 +10,8 @@ use crate::rewrite::RewriteContext;\n use crate::shape::{Indent, Shape};\n use crate::string::{rewrite_string, StringFormat};\n use crate::utils::{\n-    count_newlines, first_line_width, last_line_width, trim_left_preserve_layout, unicode_str_width,\n+    count_newlines, first_line_width, last_line_width, trim_left_preserve_layout,\n+    trimmed_last_line_width, unicode_str_width,\n };\n use crate::{ErrorKind, FormattingError};\n \n@@ -171,11 +172,12 @@ pub(crate) fn combine_strs_with_missing_comments(\n         String::with_capacity(prev_str.len() + next_str.len() + shape.indent.width() + 128);\n     result.push_str(prev_str);\n     let mut allow_one_line = !prev_str.contains('\\n') && !next_str.contains('\\n');\n-    let first_sep = if prev_str.is_empty() || next_str.is_empty() {\n-        \"\"\n-    } else {\n-        \" \"\n-    };\n+    let first_sep =\n+        if prev_str.is_empty() || next_str.is_empty() || trimmed_last_line_width(prev_str) == 0 {\n+            \"\"\n+        } else {\n+            \" \"\n+        };\n     let mut one_line_width =\n         last_line_width(prev_str) + first_line_width(next_str) + first_sep.len();\n \n@@ -184,7 +186,7 @@ pub(crate) fn combine_strs_with_missing_comments(\n     let missing_comment = rewrite_missing_comment(span, shape, context)?;\n \n     if missing_comment.is_empty() {\n-        if allow_extend && prev_str.len() + first_sep.len() + next_str.len() <= shape.width {\n+        if allow_extend && one_line_width <= shape.width {\n             result.push_str(first_sep);\n         } else if !prev_str.is_empty() {\n             result.push_str(&indent.to_string_with_newline(config))\n@@ -392,28 +394,26 @@ fn identify_comment(\n     }\n }\n \n-/// Attributes for code blocks in rustdoc.\n-/// See <https://doc.rust-lang.org/rustdoc/print.html#attributes>.\n+/// Enum indicating if the code block contains rust based on attributes\n enum CodeBlockAttribute {\n     Rust,\n-    Ignore,\n-    Text,\n-    ShouldPanic,\n-    NoRun,\n-    CompileFail,\n+    NotRust,\n }\n \n impl CodeBlockAttribute {\n-    fn new(attribute: &str) -> CodeBlockAttribute {\n-        match attribute {\n-            \"rust\" | \"\" => CodeBlockAttribute::Rust,\n-            \"ignore\" => CodeBlockAttribute::Ignore,\n-            \"text\" => CodeBlockAttribute::Text,\n-            \"should_panic\" => CodeBlockAttribute::ShouldPanic,\n-            \"no_run\" => CodeBlockAttribute::NoRun,\n-            \"compile_fail\" => CodeBlockAttribute::CompileFail,\n-            _ => CodeBlockAttribute::Text,\n+    /// Parse comma separated attributes list. Return rust only if all\n+    /// attributes are valid rust attributes\n+    /// See https://doc.rust-lang.org/rustdoc/print.html#attributes\n+    fn new(attributes: &str) -> CodeBlockAttribute {\n+        for attribute in attributes.split(\",\") {\n+            match attribute.trim() {\n+                \"\" | \"rust\" | \"should_panic\" | \"no_run\" | \"edition2015\" | \"edition2018\"\n+                | \"edition2021\" => (),\n+                \"ignore\" | \"compile_fail\" | \"text\" => return CodeBlockAttribute::NotRust,\n+                _ => return CodeBlockAttribute::NotRust,\n+            }\n         }\n+        CodeBlockAttribute::Rust\n     }\n }\n \n@@ -647,25 +647,21 @@ impl<'a> CommentRewrite<'a> {\n         } else if self.code_block_attr.is_some() {\n             if line.starts_with(\"```\") {\n                 let code_block = match self.code_block_attr.as_ref().unwrap() {\n-                    CodeBlockAttribute::Ignore | CodeBlockAttribute::Text => {\n-                        trim_custom_comment_prefix(&self.code_block_buffer)\n-                    }\n-                    _ if self.code_block_buffer.is_empty() => String::new(),\n-                    _ => {\n+                    CodeBlockAttribute::Rust\n+                        if self.fmt.config.format_code_in_doc_comments()\n+                            && !self.code_block_buffer.is_empty() =>\n+                    {\n                         let mut config = self.fmt.config.clone();\n                         config.set().wrap_comments(false);\n-                        if config.format_code_in_doc_comments() {\n-                            if let Some(s) =\n-                                crate::format_code_block(&self.code_block_buffer, &config, false)\n-                            {\n-                                trim_custom_comment_prefix(&s.snippet)\n-                            } else {\n-                                trim_custom_comment_prefix(&self.code_block_buffer)\n-                            }\n+                        if let Some(s) =\n+                            crate::format_code_block(&self.code_block_buffer, &config, false)\n+                        {\n+                            trim_custom_comment_prefix(&s.snippet)\n                         } else {\n                             trim_custom_comment_prefix(&self.code_block_buffer)\n                         }\n                     }\n+                    _ => trim_custom_comment_prefix(&self.code_block_buffer),\n                 };\n                 if !code_block.is_empty() {\n                     self.result.push_str(&self.comment_line_separator);"}, {"sha": "c5419d860c94312952f19dcaf26130e7cf1bfa35", "filename": "src/config/mod.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/src%2Fconfig%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/src%2Fconfig%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Fmod.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -69,6 +69,8 @@ create_config! {\n     format_macro_matchers: bool, false, false,\n         \"Format the metavariable matching patterns in macros\";\n     format_macro_bodies: bool, true, false, \"Format the bodies of macros\";\n+    hex_literal_case: HexLiteralCase, HexLiteralCase::Preserve, false,\n+        \"Format hexadecimal integer literals\";\n \n     // Single line expressions and items\n     empty_item_single_line: bool, true, false,\n@@ -125,7 +127,7 @@ create_config! {\n         \"Add trailing semicolon after break, continue and return\";\n     trailing_comma: SeparatorTactic, SeparatorTactic::Vertical, false,\n         \"How to handle trailing commas for lists\";\n-    match_block_trailing_comma: bool, false, false,\n+    match_block_trailing_comma: bool, false, true,\n         \"Put a trailing comma after a block based match arm (non-block arms are not affected)\";\n     blank_lines_upper_bound: usize, 1, false,\n         \"Maximum number of blank lines which can be put between items\";\n@@ -136,6 +138,7 @@ create_config! {\n     inline_attribute_width: usize, 0, false,\n         \"Write an item and its attribute on the same line \\\n         if their combined width is below a threshold\";\n+    format_generated_files: bool, false, false, \"Format generated files\";\n \n     // Options that can change the source code beyond whitespace/blocks (somewhat linty things)\n     merge_derives: bool, true, true, \"Merge multiple `#[derive(...)]` into a single one\";\n@@ -152,7 +155,7 @@ create_config! {\n         \"Require a specific version of rustfmt\";\n     unstable_features: bool, false, false,\n             \"Enables unstable features. Only available on nightly channel\";\n-    disable_all_formatting: bool, false, false, \"Don't reformat anything\";\n+    disable_all_formatting: bool, false, true, \"Don't reformat anything\";\n     skip_children: bool, false, false, \"Don't reformat out of line modules\";\n     hide_parse_errors: bool, false, false, \"Hide errors from the parser\";\n     error_on_line_overflow: bool, false, false, \"Error if unable to get all lines within max_width\";\n@@ -569,6 +572,7 @@ license_template_path = \"\"\n format_strings = false\n format_macro_matchers = false\n format_macro_bodies = true\n+hex_literal_case = \"Preserve\"\n empty_item_single_line = true\n struct_lit_single_line = true\n fn_single_line = false\n@@ -604,6 +608,7 @@ blank_lines_lower_bound = 0\n edition = \"2015\"\n version = \"One\"\n inline_attribute_width = 0\n+format_generated_files = false\n merge_derives = true\n use_try_shorthand = false\n use_field_init_shorthand = false"}, {"sha": "e92f8e8a53152e666cec884eae3a8808bcf40d18", "filename": "src/config/options.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/src%2Fconfig%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/src%2Fconfig%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Foptions.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -125,6 +125,19 @@ pub enum ImportGranularity {\n     Module,\n     /// Use one `use` statement per imported item.\n     Item,\n+    /// Use one `use` statement including all items.\n+    One,\n+}\n+\n+/// Controls how rustfmt should handle case in hexadecimal literals.\n+#[config_type]\n+pub enum HexLiteralCase {\n+    /// Leave the literal as-is\n+    Preserve,\n+    /// Ensure all literals use uppercase lettering\n+    Upper,\n+    /// Ensure all literals use lowercase lettering\n+    Lower,\n }\n \n #[config_type]"}, {"sha": "7f1dd363f9379a3bd971dbf87c93e4a0955a0cab", "filename": "src/expr.rs", "status": "modified", "additions": 37, "deletions": 9, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -13,7 +13,7 @@ use crate::comment::{\n     rewrite_missing_comment, CharClasses, FindUncommented,\n };\n use crate::config::lists::*;\n-use crate::config::{Config, ControlBraceStyle, IndentStyle, Version};\n+use crate::config::{Config, ControlBraceStyle, HexLiteralCase, IndentStyle, Version};\n use crate::lists::{\n     definitive_tactic, itemize_list, shape_for_tactic, struct_lit_formatting, struct_lit_shape,\n     struct_lit_tactic, write_list, ListFormatting, Separator,\n@@ -822,7 +822,7 @@ impl<'a> ControlFlow<'a> {\n             let pat_string = pat.rewrite(context, pat_shape)?;\n             let comments_lo = context\n                 .snippet_provider\n-                .span_after(self.span, self.connector.trim());\n+                .span_after(self.span.with_lo(pat.span.hi()), self.connector.trim());\n             let comments_span = mk_sp(comments_lo, expr.span.lo());\n             return rewrite_assign_rhs_with_comments(\n                 context,\n@@ -1168,6 +1168,7 @@ pub(crate) fn rewrite_literal(\n ) -> Option<String> {\n     match l.kind {\n         ast::LitKind::Str(_, ast::StrStyle::Cooked) => rewrite_string_lit(context, l.span, shape),\n+        ast::LitKind::Int(..) => rewrite_int_lit(context, l, shape),\n         _ => wrap_str(\n             context.snippet(l.span).to_owned(),\n             context.config.max_width(),\n@@ -1202,6 +1203,36 @@ fn rewrite_string_lit(context: &RewriteContext<'_>, span: Span, shape: Shape) ->\n     )\n }\n \n+fn rewrite_int_lit(context: &RewriteContext<'_>, lit: &ast::Lit, shape: Shape) -> Option<String> {\n+    let span = lit.span;\n+    let symbol = lit.token.symbol.as_str();\n+\n+    if symbol.starts_with(\"0x\") {\n+        let hex_lit = match context.config.hex_literal_case() {\n+            HexLiteralCase::Preserve => None,\n+            HexLiteralCase::Upper => Some(symbol[2..].to_ascii_uppercase()),\n+            HexLiteralCase::Lower => Some(symbol[2..].to_ascii_lowercase()),\n+        };\n+        if let Some(hex_lit) = hex_lit {\n+            return wrap_str(\n+                format!(\n+                    \"0x{}{}\",\n+                    hex_lit,\n+                    lit.token.suffix.map_or(String::new(), |s| s.to_string())\n+                ),\n+                context.config.max_width(),\n+                shape,\n+            );\n+        }\n+    }\n+\n+    wrap_str(\n+        context.snippet(span).to_owned(),\n+        context.config.max_width(),\n+        shape,\n+    )\n+}\n+\n fn choose_separator_tactic(context: &RewriteContext<'_>, span: Span) -> Option<SeparatorTactic> {\n     if context.inside_macro() {\n         if span_ends_with_comma(context, span) {\n@@ -1497,12 +1528,12 @@ fn rewrite_struct_lit<'a>(\n     let path_shape = shape.sub_width(2)?;\n     let path_str = rewrite_path(context, PathContext::Expr, None, path, path_shape)?;\n \n-    let has_base = match struct_rest {\n+    let has_base_or_rest = match struct_rest {\n         ast::StructRest::None if fields.is_empty() => return Some(format!(\"{} {{}}\", path_str)),\n         ast::StructRest::Rest(_) if fields.is_empty() => {\n             return Some(format!(\"{} {{ .. }}\", path_str));\n         }\n-        ast::StructRest::Base(_) => true,\n+        ast::StructRest::Rest(_) | ast::StructRest::Base(_) => true,\n         _ => false,\n     };\n \n@@ -1511,7 +1542,7 @@ fn rewrite_struct_lit<'a>(\n \n     let one_line_width = h_shape.map_or(0, |shape| shape.width);\n     let body_lo = context.snippet_provider.span_after(span, \"{\");\n-    let fields_str = if struct_lit_can_be_aligned(fields, has_base)\n+    let fields_str = if struct_lit_can_be_aligned(fields, has_base_or_rest)\n         && context.config.struct_field_align_threshold() > 0\n     {\n         rewrite_with_alignment(\n@@ -1583,10 +1614,7 @@ fn rewrite_struct_lit<'a>(\n             nested_shape,\n             tactic,\n             context,\n-            force_no_trailing_comma\n-                || has_base\n-                || !context.use_block_indent()\n-                || matches!(struct_rest, ast::StructRest::Rest(_)),\n+            force_no_trailing_comma || has_base_or_rest || !context.use_block_indent(),\n         );\n \n         write_list(&item_vec, &fmt)?"}, {"sha": "9ef47b887cadb8809345b1dc196017bbbad92c59", "filename": "src/formatting.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/src%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/src%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fformatting.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -10,6 +10,7 @@ use rustc_span::Span;\n use self::newline_style::apply_newline_style;\n use crate::comment::{CharClasses, FullCodeCharKind};\n use crate::config::{Config, FileName, Verbosity};\n+use crate::formatting::generated::is_generated_file;\n use crate::issues::BadIssueSeeker;\n use crate::modules::Module;\n use crate::syntux::parser::{DirectoryOwnership, Parser, ParserError};\n@@ -18,6 +19,7 @@ use crate::utils::count_newlines;\n use crate::visitor::FmtVisitor;\n use crate::{modules, source_file, ErrorKind, FormatReport, Input, Session};\n \n+mod generated;\n mod newline_style;\n \n // A map of the files of a crate, with their new content\n@@ -103,7 +105,12 @@ fn format_project<T: FormatHandler>(\n     context.parse_session.set_silent_emitter();\n \n     for (path, module) in files {\n-        let should_ignore = !input_is_stdin && context.ignore_file(&path);\n+        let source_file = context.parse_session.span_to_file_contents(module.span);\n+        let src = source_file.src.as_ref().expect(\"SourceFile without src\");\n+\n+        let should_ignore = (!input_is_stdin && context.ignore_file(&path))\n+            || (!config.format_generated_files() && is_generated_file(src));\n+\n         if (config.skip_children() && path != main_file) || should_ignore {\n             continue;\n         }"}, {"sha": "58f43f17ee15f5c4b12af2dda56ae182efbc542a", "filename": "src/formatting/generated.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/src%2Fformatting%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/src%2Fformatting%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fformatting%2Fgenerated.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1,7 @@\n+/// Returns `true` if the given span is a part of generated files.\n+pub(super) fn is_generated_file(original_snippet: &str) -> bool {\n+    original_snippet\n+        .lines()\n+        .take(5) // looking for marker only in the beginning of the file\n+        .any(|line| line.contains(\"@generated\"))\n+}"}, {"sha": "5ac799366894de843dd6250a97adc2786a1cc1e4", "filename": "src/imports.rs", "status": "modified", "additions": 128, "deletions": 18, "changes": 146, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -138,6 +138,29 @@ impl UseSegment {\n         }\n     }\n \n+    // Check if self == other with their aliases removed.\n+    fn equal_except_alias(&self, other: &Self) -> bool {\n+        match (self, other) {\n+            (UseSegment::Ident(ref s1, _), UseSegment::Ident(ref s2, _)) => s1 == s2,\n+            (UseSegment::Slf(_), UseSegment::Slf(_))\n+            | (UseSegment::Super(_), UseSegment::Super(_))\n+            | (UseSegment::Crate(_), UseSegment::Crate(_))\n+            | (UseSegment::Glob, UseSegment::Glob) => true,\n+            (UseSegment::List(ref list1), UseSegment::List(ref list2)) => list1 == list2,\n+            _ => false,\n+        }\n+    }\n+\n+    fn get_alias(&self) -> Option<&str> {\n+        match self {\n+            UseSegment::Ident(_, a)\n+            | UseSegment::Slf(a)\n+            | UseSegment::Super(a)\n+            | UseSegment::Crate(a) => a.as_deref(),\n+            _ => None,\n+        }\n+    }\n+\n     fn from_path_segment(\n         context: &RewriteContext<'_>,\n         path_seg: &ast::PathSegment,\n@@ -558,6 +581,7 @@ impl UseTree {\n                 SharedPrefix::Module => {\n                     self.path[..self.path.len() - 1] == other.path[..other.path.len() - 1]\n                 }\n+                SharedPrefix::One => true,\n             }\n         }\n     }\n@@ -598,7 +622,7 @@ impl UseTree {\n     fn merge(&mut self, other: &UseTree, merge_by: SharedPrefix) {\n         let mut prefix = 0;\n         for (a, b) in self.path.iter().zip(other.path.iter()) {\n-            if *a == *b {\n+            if a.equal_except_alias(b) {\n                 prefix += 1;\n             } else {\n                 break;\n@@ -633,14 +657,20 @@ fn merge_rest(\n             return Some(new_path);\n         }\n     } else if len == 1 {\n-        let rest = if a.len() == len { &b[1..] } else { &a[1..] };\n-        return Some(vec![\n-            b[0].clone(),\n-            UseSegment::List(vec![\n-                UseTree::from_path(vec![UseSegment::Slf(None)], DUMMY_SP),\n-                UseTree::from_path(rest.to_vec(), DUMMY_SP),\n-            ]),\n-        ]);\n+        let (common, rest) = if a.len() == len {\n+            (&a[0], &b[1..])\n+        } else {\n+            (&b[0], &a[1..])\n+        };\n+        let mut list = vec![UseTree::from_path(\n+            vec![UseSegment::Slf(common.get_alias().map(ToString::to_string))],\n+            DUMMY_SP,\n+        )];\n+        match rest {\n+            [UseSegment::List(rest_list)] => list.extend(rest_list.clone()),\n+            _ => list.push(UseTree::from_path(rest.to_vec(), DUMMY_SP)),\n+        }\n+        return Some(vec![b[0].clone(), UseSegment::List(list)]);\n     } else {\n         len -= 1;\n     }\n@@ -655,18 +685,54 @@ fn merge_rest(\n }\n \n fn merge_use_trees_inner(trees: &mut Vec<UseTree>, use_tree: UseTree, merge_by: SharedPrefix) {\n-    let similar_trees = trees\n-        .iter_mut()\n-        .filter(|tree| tree.share_prefix(&use_tree, merge_by));\n+    struct SimilarTree<'a> {\n+        similarity: usize,\n+        path_len: usize,\n+        tree: &'a mut UseTree,\n+    }\n+\n+    let similar_trees = trees.iter_mut().filter_map(|tree| {\n+        if tree.share_prefix(&use_tree, merge_by) {\n+            // In the case of `SharedPrefix::One`, `similarity` is used for deciding with which\n+            // tree `use_tree` should be merge.\n+            // In other cases `similarity` won't be used, so set it to `0` as a dummy value.\n+            let similarity = if merge_by == SharedPrefix::One {\n+                tree.path\n+                    .iter()\n+                    .zip(&use_tree.path)\n+                    .take_while(|(a, b)| a.equal_except_alias(b))\n+                    .count()\n+            } else {\n+                0\n+            };\n+\n+            let path_len = tree.path.len();\n+            Some(SimilarTree {\n+                similarity,\n+                tree,\n+                path_len,\n+            })\n+        } else {\n+            None\n+        }\n+    });\n+\n     if use_tree.path.len() == 1 && merge_by == SharedPrefix::Crate {\n-        if let Some(tree) = similar_trees.min_by_key(|tree| tree.path.len()) {\n-            if tree.path.len() == 1 {\n+        if let Some(tree) = similar_trees.min_by_key(|tree| tree.path_len) {\n+            if tree.path_len == 1 {\n+                return;\n+            }\n+        }\n+    } else if merge_by == SharedPrefix::One {\n+        if let Some(sim_tree) = similar_trees.max_by_key(|tree| tree.similarity) {\n+            if sim_tree.similarity > 0 {\n+                sim_tree.tree.merge(&use_tree, merge_by);\n                 return;\n             }\n         }\n-    } else if let Some(tree) = similar_trees.max_by_key(|tree| tree.path.len()) {\n-        if tree.path.len() > 1 {\n-            tree.merge(&use_tree, merge_by);\n+    } else if let Some(sim_tree) = similar_trees.max_by_key(|tree| tree.path_len) {\n+        if sim_tree.path_len > 1 {\n+            sim_tree.tree.merge(&use_tree, merge_by);\n             return;\n         }\n     }\n@@ -880,6 +946,7 @@ impl Rewrite for UseTree {\n pub(crate) enum SharedPrefix {\n     Crate,\n     Module,\n+    One,\n }\n \n #[cfg(test)]\n@@ -904,7 +971,7 @@ mod test {\n             }\n \n             fn eat(&mut self, c: char) {\n-                assert!(self.input.next().unwrap() == c);\n+                assert_eq!(self.input.next().unwrap(), c);\n             }\n \n             fn push_segment(\n@@ -1094,6 +1161,49 @@ mod test {\n         );\n     }\n \n+    #[test]\n+    fn test_use_tree_merge_one() {\n+        test_merge!(One, [\"a\", \"b\"], [\"{a, b}\"]);\n+\n+        test_merge!(One, [\"a::{aa, ab}\", \"b\", \"a\"], [\"{a::{self, aa, ab}, b}\"]);\n+\n+        test_merge!(One, [\"a as x\", \"b as y\"], [\"{a as x, b as y}\"]);\n+\n+        test_merge!(\n+            One,\n+            [\"a::{aa as xa, ab}\", \"b\", \"a\"],\n+            [\"{a::{self, aa as xa, ab}, b}\"]\n+        );\n+\n+        test_merge!(\n+            One,\n+            [\"a\", \"a::{aa, ab::{aba, abb}}\"],\n+            [\"a::{self, aa, ab::{aba, abb}}\"]\n+        );\n+\n+        test_merge!(One, [\"a\", \"b::{ba, *}\"], [\"{a, b::{ba, *}}\"]);\n+\n+        test_merge!(One, [\"a\", \"b\", \"a::aa\"], [\"{a::{self, aa}, b}\"]);\n+\n+        test_merge!(\n+            One,\n+            [\"a::aa::aaa\", \"a::ac::aca\", \"a::aa::*\"],\n+            [\"a::{aa::{aaa, *}, ac::aca}\"]\n+        );\n+\n+        test_merge!(\n+            One,\n+            [\"a\", \"b::{ba, bb}\", \"a::{aa::*, ab::aba}\"],\n+            [\"{a::{self, aa::*, ab::aba}, b::{ba, bb}}\"]\n+        );\n+\n+        test_merge!(\n+            One,\n+            [\"b\", \"a::ac::{aca, acb}\", \"a::{aa::*, ab}\"],\n+            [\"{a::{aa::*, ab, ac::{aca, acb}}, b}\"]\n+        );\n+    }\n+\n     #[test]\n     fn test_flatten_use_trees() {\n         assert_eq!("}, {"sha": "1cb1a2701c36bf24f78109c56c45d320c4da2806", "filename": "src/items.rs", "status": "modified", "additions": 73, "deletions": 73, "changes": 146, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -174,14 +174,14 @@ pub(crate) struct FnSig<'a> {\n     constness: ast::Const,\n     defaultness: ast::Defaultness,\n     unsafety: ast::Unsafe,\n-    visibility: ast::Visibility,\n+    visibility: &'a ast::Visibility,\n }\n \n impl<'a> FnSig<'a> {\n     pub(crate) fn from_method_sig(\n         method_sig: &'a ast::FnSig,\n         generics: &'a ast::Generics,\n-        visibility: ast::Visibility,\n+        visibility: &'a ast::Visibility,\n     ) -> FnSig<'a> {\n         FnSig {\n             unsafety: method_sig.header.unsafety,\n@@ -204,7 +204,7 @@ impl<'a> FnSig<'a> {\n         match *fn_kind {\n             visit::FnKind::Fn(fn_ctxt, _, fn_sig, vis, _) => match fn_ctxt {\n                 visit::FnCtxt::Assoc(..) => {\n-                    let mut fn_sig = FnSig::from_method_sig(fn_sig, generics, vis.clone());\n+                    let mut fn_sig = FnSig::from_method_sig(fn_sig, generics, vis);\n                     fn_sig.defaultness = defaultness;\n                     fn_sig\n                 }\n@@ -216,7 +216,7 @@ impl<'a> FnSig<'a> {\n                     is_async: Cow::Borrowed(&fn_sig.header.asyncness),\n                     defaultness,\n                     unsafety: fn_sig.header.unsafety,\n-                    visibility: vis.clone(),\n+                    visibility: vis,\n                 },\n             },\n             _ => unreachable!(),\n@@ -323,6 +323,7 @@ impl<'a> FmtVisitor<'a> {\n         indent: Indent,\n         ident: symbol::Ident,\n         sig: &ast::FnSig,\n+        vis: &ast::Visibility,\n         generics: &ast::Generics,\n         span: Span,\n     ) -> Option<String> {\n@@ -334,7 +335,7 @@ impl<'a> FmtVisitor<'a> {\n             &context,\n             indent,\n             ident,\n-            &FnSig::from_method_sig(sig, generics, DEFAULT_VISIBILITY),\n+            &FnSig::from_method_sig(sig, generics, vis),\n             span,\n             FnBraceStyle::None,\n         )?;\n@@ -1474,12 +1475,17 @@ fn format_tuple_struct(\n         format_empty_struct_or_tuple(context, inner_span, offset, &mut result, \"(\", \")\");\n     } else {\n         let shape = Shape::indented(offset, context.config).sub_width(1)?;\n+        let lo = if let Some(generics) = struct_parts.generics {\n+            generics.span.hi()\n+        } else {\n+            struct_parts.ident.span.hi()\n+        };\n         result = overflow::rewrite_with_parens(\n             context,\n             &result,\n             fields.iter(),\n             shape,\n-            span,\n+            mk_sp(lo, span.hi()),\n             context.config.fn_call_width(),\n             None,\n         )?;\n@@ -1503,7 +1509,7 @@ fn format_tuple_struct(\n     Some(result)\n }\n \n-fn rewrite_type<R: Rewrite>(\n+pub(crate) fn rewrite_type<R: Rewrite>(\n     context: &RewriteContext<'_>,\n     indent: Indent,\n     ident: symbol::Ident,\n@@ -1760,7 +1766,7 @@ impl<'a> StaticParts<'a> {\n         };\n         StaticParts {\n             prefix: \"const\",\n-            vis: &DEFAULT_VISIBILITY,\n+            vis: &ti.vis,\n             ident: ti.ident,\n             ty,\n             mutability: ast::Mutability::Not,\n@@ -1847,29 +1853,6 @@ fn rewrite_static(\n         Some(format!(\"{}{};\", prefix, ty_str))\n     }\n }\n-\n-pub(crate) fn rewrite_type_alias(\n-    ident: symbol::Ident,\n-    ty_opt: Option<&ptr::P<ast::Ty>>,\n-    generics: &ast::Generics,\n-    generic_bounds_opt: Option<&ast::GenericBounds>,\n-    context: &RewriteContext<'_>,\n-    indent: Indent,\n-    vis: &ast::Visibility,\n-    span: Span,\n-) -> Option<String> {\n-    rewrite_type(\n-        context,\n-        indent,\n-        ident,\n-        vis,\n-        generics,\n-        generic_bounds_opt,\n-        ty_opt,\n-        span,\n-    )\n-}\n-\n struct OpaqueType<'a> {\n     bounds: &'a ast::GenericBounds,\n }\n@@ -1883,32 +1866,7 @@ impl<'a> Rewrite for OpaqueType<'a> {\n     }\n }\n \n-pub(crate) fn rewrite_opaque_impl_type(\n-    context: &RewriteContext<'_>,\n-    ident: symbol::Ident,\n-    generics: &ast::Generics,\n-    generic_bounds: &ast::GenericBounds,\n-    indent: Indent,\n-) -> Option<String> {\n-    let ident_str = rewrite_ident(context, ident);\n-    // 5 = \"type \"\n-    let generics_shape = Shape::indented(indent, context.config).offset_left(5)?;\n-    let generics_str = rewrite_generics(context, ident_str, generics, generics_shape)?;\n-    let prefix = format!(\"type {} =\", generics_str);\n-    let rhs = OpaqueType {\n-        bounds: generic_bounds,\n-    };\n-\n-    rewrite_assign_rhs(\n-        context,\n-        &prefix,\n-        &rhs,\n-        Shape::indented(indent, context.config).sub_width(1)?,\n-    )\n-    .map(|s| s + \";\")\n-}\n-\n-pub(crate) fn rewrite_associated_impl_type(\n+pub(crate) fn rewrite_impl_type(\n     ident: symbol::Ident,\n     vis: &ast::Visibility,\n     defaultness: ast::Defaultness,\n@@ -1918,7 +1876,25 @@ pub(crate) fn rewrite_associated_impl_type(\n     indent: Indent,\n     span: Span,\n ) -> Option<String> {\n-    let result = rewrite_type_alias(ident, ty_opt, generics, None, context, indent, vis, span)?;\n+    // Opaque type\n+    let result = if let Some(rustc_ast::ast::Ty {\n+        kind: ast::TyKind::ImplTrait(_, ref bounds),\n+        ..\n+    }) = ty_opt.map(|t| &**t)\n+    {\n+        rewrite_type(\n+            context,\n+            indent,\n+            ident,\n+            &DEFAULT_VISIBILITY,\n+            generics,\n+            None,\n+            Some(&OpaqueType { bounds }),\n+            span,\n+        )\n+    } else {\n+        rewrite_type(context, indent, ident, vis, generics, None, ty_opt, span)\n+    }?;\n \n     match defaultness {\n         ast::Defaultness::Default(..) => Some(format!(\"default {}\", result)),\n@@ -1995,14 +1971,17 @@ impl Rewrite for ast::Param {\n         let param_attrs_result = self\n             .attrs\n             .rewrite(context, Shape::legacy(shape.width, shape.indent))?;\n-        let (span, has_multiple_attr_lines) = if !self.attrs.is_empty() {\n+        // N.B. Doc comments aren't typically valid syntax, but could appear\n+        // in the presence of certain macros - https://github.com/rust-lang/rustfmt/issues/4936\n+        let (span, has_multiple_attr_lines, has_doc_comments) = if !self.attrs.is_empty() {\n             let num_attrs = self.attrs.len();\n             (\n                 mk_sp(self.attrs[num_attrs - 1].span.hi(), self.pat.span.lo()),\n                 param_attrs_result.contains('\\n'),\n+                self.attrs.iter().any(|a| a.is_doc_comment()),\n             )\n         } else {\n-            (mk_sp(self.span.lo(), self.span.lo()), false)\n+            (mk_sp(self.span.lo(), self.span.lo()), false, false)\n         };\n \n         if let Some(ref explicit_self) = self.to_self() {\n@@ -2015,15 +1994,16 @@ impl Rewrite for ast::Param {\n                 has_multiple_attr_lines,\n             )\n         } else if is_named_param(self) {\n+            let param_name = &self\n+                .pat\n+                .rewrite(context, Shape::legacy(shape.width, shape.indent))?;\n             let mut result = combine_strs_with_missing_comments(\n                 context,\n                 &param_attrs_result,\n-                &self\n-                    .pat\n-                    .rewrite(context, Shape::legacy(shape.width, shape.indent))?,\n+                param_name,\n                 span,\n                 shape,\n-                !has_multiple_attr_lines,\n+                !has_multiple_attr_lines && !has_doc_comments,\n             )?;\n \n             if !is_empty_infer(&*self.ty, self.pat.span) {\n@@ -2034,10 +2014,30 @@ impl Rewrite for ast::Param {\n                 result.push_str(&after_comment);\n                 let overhead = last_line_width(&result);\n                 let max_width = shape.width.checked_sub(overhead)?;\n-                let ty_str = self\n+                if let Some(ty_str) = self\n                     .ty\n-                    .rewrite(context, Shape::legacy(max_width, shape.indent))?;\n-                result.push_str(&ty_str);\n+                    .rewrite(context, Shape::legacy(max_width, shape.indent))\n+                {\n+                    result.push_str(&ty_str);\n+                } else {\n+                    result = combine_strs_with_missing_comments(\n+                        context,\n+                        &(param_attrs_result + &shape.to_string_with_newline(context.config)),\n+                        param_name,\n+                        span,\n+                        shape,\n+                        !has_multiple_attr_lines,\n+                    )?;\n+                    result.push_str(&before_comment);\n+                    result.push_str(colon_spaces(context.config));\n+                    result.push_str(&after_comment);\n+                    let overhead = last_line_width(&result);\n+                    let max_width = shape.width.checked_sub(overhead)?;\n+                    let ty_str = self\n+                        .ty\n+                        .rewrite(context, Shape::legacy(max_width, shape.indent))?;\n+                    result.push_str(&ty_str);\n+                }\n             }\n \n             Some(result)\n@@ -3146,7 +3146,7 @@ impl Rewrite for ast::ForeignItem {\n                         context,\n                         shape.indent,\n                         self.ident,\n-                        &FnSig::from_method_sig(&fn_sig, generics, self.vis.clone()),\n+                        &FnSig::from_method_sig(&fn_sig, generics, &self.vis),\n                         span,\n                         FnBraceStyle::None,\n                     )\n@@ -3170,14 +3170,14 @@ impl Rewrite for ast::ForeignItem {\n             ast::ForeignItemKind::TyAlias(ref ty_alias_kind) => {\n                 let ast::TyAliasKind(_, ref generics, ref generic_bounds, ref type_default) =\n                     **ty_alias_kind;\n-                rewrite_type_alias(\n-                    self.ident,\n-                    type_default.as_ref(),\n-                    generics,\n-                    Some(generic_bounds),\n+                rewrite_type(\n                     &context,\n                     shape.indent,\n+                    self.ident,\n                     &self.vis,\n+                    generics,\n+                    Some(generic_bounds),\n+                    type_default.as_ref(),\n                     self.span,\n                 )\n             }"}, {"sha": "c04b4787616933e84528d1695a386eefce5769ab", "filename": "src/lists.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -367,9 +367,9 @@ where\n             result.push_str(&comment);\n \n             if !inner_item.is_empty() {\n-                if tactic == DefinitiveListTactic::Vertical || tactic == DefinitiveListTactic::Mixed\n-                {\n-                    // We cannot keep pre-comments on the same line if the comment if normalized.\n+                use DefinitiveListTactic::*;\n+                if matches!(tactic, Vertical | Mixed | SpecialMacro(_)) {\n+                    // We cannot keep pre-comments on the same line if the comment is normalized.\n                     let keep_comment = if formatting.config.normalize_comments()\n                         || item.pre_comment_style == ListItemCommentStyle::DifferentLine\n                     {\n@@ -389,7 +389,7 @@ where\n                         line_len = item.item.as_ref().map_or(0, |s| unicode_str_width(&s));\n                     }\n                 } else {\n-                    result.push(' ');\n+                    result.push(' ')\n                 }\n             }\n             item_max_width = None;"}, {"sha": "5a6ed0ec06e55a37ca203bafdbd9625a2ad3ce4c", "filename": "src/matches.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/src%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/src%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmatches.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -409,6 +409,7 @@ fn rewrite_match_body(\n             }\n             result.push_str(&nested_indent_str);\n             result.push_str(&body_str);\n+            result.push_str(&comma);\n             return Some(result);\n         }\n "}, {"sha": "28edcb784b40ee17030a7660087803dfc347b866", "filename": "src/missed_spans.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/src%2Fmissed_spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/src%2Fmissed_spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmissed_spans.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -51,21 +51,25 @@ impl<'a> FmtVisitor<'a> {\n     }\n \n     pub(crate) fn format_missing_with_indent(&mut self, end: BytePos) {\n+        self.format_missing_indent(end, true)\n+    }\n+\n+    pub(crate) fn format_missing_no_indent(&mut self, end: BytePos) {\n+        self.format_missing_indent(end, false)\n+    }\n+\n+    fn format_missing_indent(&mut self, end: BytePos, should_indent: bool) {\n         let config = self.config;\n         self.format_missing_inner(end, |this, last_snippet, snippet| {\n             this.push_str(last_snippet.trim_end());\n             if last_snippet == snippet && !this.output_at_start() {\n                 // No new lines in the snippet.\n                 this.push_str(\"\\n\");\n             }\n-            let indent = this.block_indent.to_string(config);\n-            this.push_str(&indent);\n-        })\n-    }\n-\n-    pub(crate) fn format_missing_no_indent(&mut self, end: BytePos) {\n-        self.format_missing_inner(end, |this, last_snippet, _| {\n-            this.push_str(last_snippet.trim_end());\n+            if should_indent {\n+                let indent = this.block_indent.to_string(config);\n+                this.push_str(&indent);\n+            }\n         })\n     }\n "}, {"sha": "ac24181c7805258b89c053d6c444a65709f79af6", "filename": "src/overflow.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/src%2Foverflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/src%2Foverflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foverflow.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -77,6 +77,7 @@ pub(crate) enum OverflowableItem<'a> {\n     FieldDef(&'a ast::FieldDef),\n     TuplePatField(&'a TuplePatField<'a>),\n     Ty(&'a ast::Ty),\n+    Pat(&'a ast::Pat),\n }\n \n impl<'a> Rewrite for OverflowableItem<'a> {\n@@ -116,6 +117,7 @@ impl<'a> OverflowableItem<'a> {\n             OverflowableItem::FieldDef(sf) => f(*sf),\n             OverflowableItem::TuplePatField(pat) => f(*pat),\n             OverflowableItem::Ty(ty) => f(*ty),\n+            OverflowableItem::Pat(pat) => f(*pat),\n         }\n     }\n \n@@ -232,7 +234,7 @@ macro_rules! impl_into_overflowable_item_for_rustfmt_types {\n     }\n }\n \n-impl_into_overflowable_item_for_ast_node!(Expr, GenericParam, NestedMetaItem, FieldDef, Ty);\n+impl_into_overflowable_item_for_ast_node!(Expr, GenericParam, NestedMetaItem, FieldDef, Ty, Pat);\n impl_into_overflowable_item_for_rustfmt_types!([MacroArg], [SegmentParam, TuplePatField]);\n \n pub(crate) fn into_overflowable_list<'a, T>("}, {"sha": "ba8d8024a9707c34ef31c4eae24665eb99f5f39d", "filename": "src/patterns.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/src%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/src%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpatterns.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -4,6 +4,7 @@ use rustc_span::{BytePos, Span};\n \n use crate::comment::{combine_strs_with_missing_comments, FindUncommented};\n use crate::config::lists::*;\n+use crate::config::Version;\n use crate::expr::{can_be_overflowed_expr, rewrite_unary_prefix, wrap_struct_field};\n use crate::lists::{\n     definitive_tactic, itemize_list, shape_for_tactic, struct_lit_formatting, struct_lit_shape,\n@@ -226,12 +227,13 @@ impl Rewrite for Pat {\n             PatKind::Path(ref q_self, ref path) => {\n                 rewrite_path(context, PathContext::Expr, q_self.as_ref(), path, shape)\n             }\n-            PatKind::TupleStruct(_, ref path, ref pat_vec) => {\n-                let path_str = rewrite_path(context, PathContext::Expr, None, path, shape)?;\n+            PatKind::TupleStruct(ref q_self, ref path, ref pat_vec) => {\n+                let path_str =\n+                    rewrite_path(context, PathContext::Expr, q_self.as_ref(), path, shape)?;\n                 rewrite_tuple_pat(pat_vec, Some(path_str), self.span, context, shape)\n             }\n             PatKind::Lit(ref expr) => expr.rewrite(context, shape),\n-            PatKind::Slice(ref slice_pat) => {\n+            PatKind::Slice(ref slice_pat) if context.config.version() == Version::One => {\n                 let rw: Vec<String> = slice_pat\n                     .iter()\n                     .map(|p| {\n@@ -244,8 +246,17 @@ impl Rewrite for Pat {\n                     .collect();\n                 Some(format!(\"[{}]\", rw.join(\", \")))\n             }\n-            PatKind::Struct(_, ref path, ref fields, ellipsis) => {\n-                rewrite_struct_pat(path, fields, ellipsis, self.span, context, shape)\n+            PatKind::Slice(ref slice_pat) => overflow::rewrite_with_square_brackets(\n+                context,\n+                \"\",\n+                slice_pat.iter(),\n+                shape,\n+                self.span,\n+                None,\n+                None,\n+            ),\n+            PatKind::Struct(ref qself, ref path, ref fields, ellipsis) => {\n+                rewrite_struct_pat(qself, path, fields, ellipsis, self.span, context, shape)\n             }\n             PatKind::MacCall(ref mac) => {\n                 rewrite_macro(mac, None, context, shape, MacroPosition::Pat)\n@@ -258,6 +269,7 @@ impl Rewrite for Pat {\n }\n \n fn rewrite_struct_pat(\n+    qself: &Option<ast::QSelf>,\n     path: &ast::Path,\n     fields: &[ast::PatField],\n     ellipsis: bool,\n@@ -267,7 +279,7 @@ fn rewrite_struct_pat(\n ) -> Option<String> {\n     // 2 =  ` {`\n     let path_shape = shape.sub_width(2)?;\n-    let path_str = rewrite_path(context, PathContext::Expr, None, path, path_shape)?;\n+    let path_str = rewrite_path(context, PathContext::Expr, qself.as_ref(), path, path_shape)?;\n \n     if fields.is_empty() && !ellipsis {\n         return Some(format!(\"{} {{}}\", path_str));"}, {"sha": "2c58350d4feb6d8e0bf9a3cbfc15d084a0af73a7", "filename": "src/reorder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/src%2Freorder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/src%2Freorder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Freorder.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -113,6 +113,7 @@ fn rewrite_reorderable_or_regroupable_items(\n                     merge_use_trees(normalized_items, SharedPrefix::Module)\n                 }\n                 ImportGranularity::Item => flatten_use_trees(normalized_items),\n+                ImportGranularity::One => merge_use_trees(normalized_items, SharedPrefix::One),\n                 ImportGranularity::Preserve => normalized_items,\n             };\n "}, {"sha": "8e6c75a3744ac6a8e4b1e0c6a7460f664ff09b0d", "filename": "src/spanned.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/src%2Fspanned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/src%2Fspanned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fspanned.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -104,7 +104,7 @@ impl Spanned for ast::Arm {\n impl Spanned for ast::Param {\n     fn span(&self) -> Span {\n         if crate::items::is_named_param(self) {\n-            mk_sp(self.pat.span.lo(), self.ty.span.hi())\n+            mk_sp(crate::items::span_lo_for_param(self), self.ty.span.hi())\n         } else {\n             self.ty.span\n         }"}, {"sha": "946c076d9f2d1fdf388b19156c5c2a7b5ca254e0", "filename": "src/syntux/session.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/src%2Fsyntux%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/src%2Fsyntux%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsyntux%2Fsession.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -175,6 +175,12 @@ impl ParseSess {\n         self.parse_sess.source_map().span_to_filename(span).into()\n     }\n \n+    pub(crate) fn span_to_file_contents(&self, span: Span) -> Lrc<rustc_span::SourceFile> {\n+        self.parse_sess\n+            .source_map()\n+            .lookup_source_file(span.data().lo)\n+    }\n+\n     pub(crate) fn span_to_first_line_string(&self, span: Span) -> String {\n         let file_lines = self.parse_sess.source_map().span_to_lines(span).ok();\n "}, {"sha": "48d61289a9b8f34a25d89237f5842a1d4245ed29", "filename": "src/test/mod.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/src%2Ftest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/src%2Ftest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmod.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -469,11 +469,6 @@ fn stdin_works_with_modified_lines() {\n #[test]\n fn stdin_disable_all_formatting_test() {\n     init_log();\n-    match option_env!(\"CFG_RELEASE_CHANNEL\") {\n-        None | Some(\"nightly\") => {}\n-        // These tests require nightly.\n-        _ => return,\n-    }\n     let input = String::from(\"fn main() { println!(\\\"This should not be formatted.\\\"); }\");\n     let mut child = Command::new(rustfmt().to_str().unwrap())\n         .stdin(Stdio::piped())\n@@ -694,7 +689,7 @@ fn read_significant_comments(file_name: &Path) -> HashMap<String, String> {\n     reader\n         .lines()\n         .map(|line| line.expect(\"failed getting line\"))\n-        .take_while(|line| line_regex.is_match(line))\n+        .filter(|line| line_regex.is_match(line))\n         .filter_map(|line| {\n             regex.captures_iter(&line).next().map(|capture| {\n                 ("}, {"sha": "62c05ba078c56facce55f848d2b4cee53e0a1c78", "filename": "src/types.rs", "status": "modified", "additions": 78, "deletions": 57, "changes": 135, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -169,31 +169,38 @@ impl<'a> Rewrite for SegmentParam<'a> {\n             SegmentParam::Const(const_) => const_.rewrite(context, shape),\n             SegmentParam::LifeTime(lt) => lt.rewrite(context, shape),\n             SegmentParam::Type(ty) => ty.rewrite(context, shape),\n-            SegmentParam::Binding(assoc_ty_constraint) => {\n-                let mut result = match assoc_ty_constraint.kind {\n-                    ast::AssocTyConstraintKind::Bound { .. } => {\n-                        format!(\"{}: \", rewrite_ident(context, assoc_ty_constraint.ident))\n-                    }\n-                    ast::AssocTyConstraintKind::Equality { .. } => {\n-                        match context.config.type_punctuation_density() {\n-                            TypeDensity::Wide => {\n-                                format!(\"{} = \", rewrite_ident(context, assoc_ty_constraint.ident))\n-                            }\n-                            TypeDensity::Compressed => {\n-                                format!(\"{}=\", rewrite_ident(context, assoc_ty_constraint.ident))\n-                            }\n-                        }\n-                    }\n-                };\n+            SegmentParam::Binding(atc) => atc.rewrite(context, shape),\n+        }\n+    }\n+}\n \n-                let budget = shape.width.checked_sub(result.len())?;\n-                let rewrite = assoc_ty_constraint\n-                    .kind\n-                    .rewrite(context, Shape::legacy(budget, shape.indent + result.len()))?;\n-                result.push_str(&rewrite);\n-                Some(result)\n-            }\n+impl Rewrite for ast::AssocTyConstraint {\n+    fn rewrite(&self, context: &RewriteContext<'_>, shape: Shape) -> Option<String> {\n+        use ast::AssocTyConstraintKind::{Bound, Equality};\n+\n+        let mut result = String::with_capacity(128);\n+        result.push_str(rewrite_ident(context, self.ident));\n+\n+        if let Some(ref gen_args) = self.gen_args {\n+            let budget = shape.width.checked_sub(result.len())?;\n+            let shape = Shape::legacy(budget, shape.indent + result.len());\n+            let gen_str = rewrite_generic_args(gen_args, context, shape, gen_args.span())?;\n+            result.push_str(&gen_str);\n         }\n+\n+        let infix = match (&self.kind, context.config.type_punctuation_density()) {\n+            (Bound { .. }, _) => \": \",\n+            (Equality { .. }, TypeDensity::Wide) => \" = \",\n+            (Equality { .. }, TypeDensity::Compressed) => \"=\",\n+        };\n+        result.push_str(infix);\n+\n+        let budget = shape.width.checked_sub(result.len())?;\n+        let shape = Shape::legacy(budget, shape.indent + result.len());\n+        let rewrite = self.kind.rewrite(context, shape)?;\n+        result.push_str(&rewrite);\n+\n+        Some(result)\n     }\n }\n \n@@ -235,21 +242,9 @@ fn rewrite_segment(\n     };\n \n     if let Some(ref args) = segment.args {\n+        let generics_str = rewrite_generic_args(args, context, shape, mk_sp(*span_lo, span_hi))?;\n         match **args {\n             ast::GenericArgs::AngleBracketed(ref data) if !data.args.is_empty() => {\n-                let param_list = data\n-                    .args\n-                    .iter()\n-                    .map(|x| match x {\n-                        ast::AngleBracketedArg::Arg(generic_arg) => {\n-                            SegmentParam::from_generic_arg(generic_arg)\n-                        }\n-                        ast::AngleBracketedArg::Constraint(constraint) => {\n-                            SegmentParam::Binding(constraint)\n-                        }\n-                    })\n-                    .collect::<Vec<_>>();\n-\n                 // HACK: squeeze out the span between the identifier and the parameters.\n                 // The hack is requried so that we don't remove the separator inside macro calls.\n                 // This does not work in the presence of comment, hoping that people are\n@@ -265,33 +260,14 @@ fn rewrite_segment(\n                 };\n                 result.push_str(separator);\n \n-                let generics_str = overflow::rewrite_with_angle_brackets(\n-                    context,\n-                    \"\",\n-                    param_list.iter(),\n-                    shape,\n-                    mk_sp(*span_lo, span_hi),\n-                )?;\n-\n                 // Update position of last bracket.\n                 *span_lo = context\n                     .snippet_provider\n                     .span_after(mk_sp(*span_lo, span_hi), \"<\");\n-\n-                result.push_str(&generics_str)\n-            }\n-            ast::GenericArgs::Parenthesized(ref data) => {\n-                result.push_str(&format_function_type(\n-                    data.inputs.iter().map(|x| &**x),\n-                    &data.output,\n-                    false,\n-                    data.span,\n-                    context,\n-                    shape,\n-                )?);\n             }\n             _ => (),\n         }\n+        result.push_str(&generics_str)\n     }\n \n     Some(result)\n@@ -484,6 +460,41 @@ impl Rewrite for ast::GenericArg {\n     }\n }\n \n+fn rewrite_generic_args(\n+    gen_args: &ast::GenericArgs,\n+    context: &RewriteContext<'_>,\n+    shape: Shape,\n+    span: Span,\n+) -> Option<String> {\n+    match gen_args {\n+        ast::GenericArgs::AngleBracketed(ref data) if !data.args.is_empty() => {\n+            let args = data\n+                .args\n+                .iter()\n+                .map(|x| match x {\n+                    ast::AngleBracketedArg::Arg(generic_arg) => {\n+                        SegmentParam::from_generic_arg(generic_arg)\n+                    }\n+                    ast::AngleBracketedArg::Constraint(constraint) => {\n+                        SegmentParam::Binding(constraint)\n+                    }\n+                })\n+                .collect::<Vec<_>>();\n+\n+            overflow::rewrite_with_angle_brackets(context, \"\", args.iter(), shape, span)\n+        }\n+        ast::GenericArgs::Parenthesized(ref data) => format_function_type(\n+            data.inputs.iter().map(|x| &**x),\n+            &data.output,\n+            false,\n+            data.span,\n+            context,\n+            shape,\n+        ),\n+        _ => Some(\"\".to_owned()),\n+    }\n+}\n+\n fn rewrite_bounded_lifetime(\n     lt: &ast::Lifetime,\n     bounds: &[ast::GenericBound],\n@@ -566,13 +577,23 @@ impl Rewrite for ast::GenericParam {\n         if let ast::GenericParamKind::Const {\n             ref ty,\n             kw_span: _,\n-            default: _,\n+            default,\n         } = &self.kind\n         {\n             result.push_str(\"const \");\n             result.push_str(rewrite_ident(context, self.ident));\n             result.push_str(\": \");\n             result.push_str(&ty.rewrite(context, shape)?);\n+            if let Some(default) = default {\n+                let eq_str = match context.config.type_punctuation_density() {\n+                    TypeDensity::Compressed => \"=\",\n+                    TypeDensity::Wide => \" = \",\n+                };\n+                result.push_str(eq_str);\n+                let budget = shape.width.checked_sub(result.len())?;\n+                let rewrite = default.rewrite(context, Shape::legacy(budget, shape.indent))?;\n+                result.push_str(&rewrite);\n+            }\n         } else {\n             result.push_str(rewrite_ident(context, self.ident));\n         }"}, {"sha": "d854d90b40b6d9d33e7f7ff4917d8c872c97f6a5", "filename": "src/visitor.rs", "status": "modified", "additions": 23, "deletions": 40, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -3,17 +3,17 @@ use std::rc::Rc;\n \n use rustc_ast::{ast, token::DelimToken, visit, AstLike};\n use rustc_data_structures::sync::Lrc;\n-use rustc_span::{symbol, BytePos, Pos, Span, DUMMY_SP};\n+use rustc_span::{symbol, BytePos, Pos, Span};\n \n use crate::attr::*;\n use crate::comment::{contains_comment, rewrite_comment, CodeCharKind, CommentCodeSlices};\n use crate::config::Version;\n use crate::config::{BraceStyle, Config};\n use crate::coverage::transform_missing_snippet;\n use crate::items::{\n-    format_impl, format_trait, format_trait_alias, is_mod_decl, is_use_item,\n-    rewrite_associated_impl_type, rewrite_extern_crate, rewrite_opaque_impl_type,\n-    rewrite_opaque_type, rewrite_type_alias, FnBraceStyle, FnSig, StaticParts, StructParts,\n+    format_impl, format_trait, format_trait_alias, is_mod_decl, is_use_item, rewrite_extern_crate,\n+    rewrite_impl_type, rewrite_opaque_type, rewrite_type, FnBraceStyle, FnSig, StaticParts,\n+    StructParts,\n };\n use crate::macros::{macro_style, rewrite_macro, rewrite_macro_def, MacroPosition};\n use crate::modules::Module;\n@@ -568,6 +568,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                             indent,\n                             item.ident,\n                             &fn_signature,\n+                            &item.vis,\n                             generics,\n                             item.span,\n                         );\n@@ -579,14 +580,14 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                         **alias_kind;\n                     match ty {\n                         Some(ty) => {\n-                            let rewrite = rewrite_type_alias(\n-                                item.ident,\n-                                Some(&*ty),\n-                                generics,\n-                                Some(generic_bounds),\n+                            let rewrite = rewrite_type(\n                                 &self.get_context(),\n                                 self.block_indent,\n+                                item.ident,\n                                 &item.vis,\n+                                generics,\n+                                Some(generic_bounds),\n+                                Some(&*ty),\n                                 item.span,\n                             );\n                             self.push_rewrite(item.span, rewrite);\n@@ -641,14 +642,9 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                 let ast::FnKind(defaultness, ref sig, ref generics, ref block) = **fn_kind;\n                 if let Some(ref body) = block {\n                     let inner_attrs = inner_attributes(&ti.attrs);\n-                    let vis = ast::Visibility {\n-                        kind: ast::VisibilityKind::Inherited,\n-                        span: DUMMY_SP,\n-                        tokens: None,\n-                    };\n                     let fn_ctxt = visit::FnCtxt::Assoc(visit::AssocCtxt::Trait);\n                     self.visit_fn(\n-                        visit::FnKind::Fn(fn_ctxt, ti.ident, sig, &vis, Some(body)),\n+                        visit::FnKind::Fn(fn_ctxt, ti.ident, sig, &ti.vis, Some(body)),\n                         generics,\n                         &sig.decl,\n                         ti.span,\n@@ -658,21 +654,21 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                 } else {\n                     let indent = self.block_indent;\n                     let rewrite =\n-                        self.rewrite_required_fn(indent, ti.ident, sig, generics, ti.span);\n+                        self.rewrite_required_fn(indent, ti.ident, sig, &ti.vis, generics, ti.span);\n                     self.push_rewrite(ti.span, rewrite);\n                 }\n             }\n             ast::AssocItemKind::TyAlias(ref ty_alias_kind) => {\n                 let ast::TyAliasKind(_, ref generics, ref generic_bounds, ref type_default) =\n                     **ty_alias_kind;\n-                let rewrite = rewrite_type_alias(\n-                    ti.ident,\n-                    type_default.as_ref(),\n-                    generics,\n-                    Some(generic_bounds),\n+                let rewrite = rewrite_type(\n                     &self.get_context(),\n                     self.block_indent,\n+                    ti.ident,\n                     &ti.vis,\n+                    generics,\n+                    Some(generic_bounds),\n+                    type_default.as_ref(),\n                     ti.span,\n                 );\n                 self.push_rewrite(ti.span, rewrite);\n@@ -708,15 +704,16 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                 } else {\n                     let indent = self.block_indent;\n                     let rewrite =\n-                        self.rewrite_required_fn(indent, ii.ident, sig, generics, ii.span);\n+                        self.rewrite_required_fn(indent, ii.ident, sig, &ii.vis, generics, ii.span);\n                     self.push_rewrite(ii.span, rewrite);\n                 }\n             }\n             ast::AssocItemKind::Const(..) => self.visit_static(&StaticParts::from_impl_item(ii)),\n             ast::AssocItemKind::TyAlias(ref ty_alias_kind) => {\n                 let ast::TyAliasKind(defaultness, ref generics, _, ref ty) = **ty_alias_kind;\n-                let rewrite_associated = || {\n-                    rewrite_associated_impl_type(\n+                self.push_rewrite(\n+                    ii.span,\n+                    rewrite_impl_type(\n                         ii.ident,\n                         &ii.vis,\n                         defaultness,\n@@ -725,22 +722,8 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                         &self.get_context(),\n                         self.block_indent,\n                         ii.span,\n-                    )\n-                };\n-                let rewrite = match ty {\n-                    None => rewrite_associated(),\n-                    Some(ty) => match ty.kind {\n-                        ast::TyKind::ImplTrait(_, ref bounds) => rewrite_opaque_impl_type(\n-                            &self.get_context(),\n-                            ii.ident,\n-                            generics,\n-                            bounds,\n-                            self.block_indent,\n-                        ),\n-                        _ => rewrite_associated(),\n-                    },\n-                };\n-                self.push_rewrite(ii.span, rewrite);\n+                    ),\n+                );\n             }\n             ast::AssocItemKind::MacCall(ref mac) => {\n                 self.visit_mac(mac, Some(ii.ident), MacroPosition::Item);"}, {"sha": "315364a64573a9c8b62d43ef098c3e1e274f3a9f", "filename": "tests/cargo-fmt/source/divergent-crate-dir-names/Cargo.toml", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fcargo-fmt%2Fsource%2Fdivergent-crate-dir-names%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fcargo-fmt%2Fsource%2Fdivergent-crate-dir-names%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcargo-fmt%2Fsource%2Fdivergent-crate-dir-names%2FCargo.toml?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1,13 @@\n+[package]\n+name = \"cargo-fmt-test\"\n+version = \"0.1.0\"\n+authors = [\"calebcartwright\"]\n+edition = \"2018\"\n+\n+[dependencies]\n+indexmap = \"1.0.2\"\n+\n+[workspace]\n+members = [\n+  \"dependency-dir-name\",\n+]\n\\ No newline at end of file"}, {"sha": "4493882bf40a2ebb4402412295809bc3c114fceb", "filename": "tests/cargo-fmt/source/divergent-crate-dir-names/dependency-dir-name/Cargo.toml", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fcargo-fmt%2Fsource%2Fdivergent-crate-dir-names%2Fdependency-dir-name%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fcargo-fmt%2Fsource%2Fdivergent-crate-dir-names%2Fdependency-dir-name%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcargo-fmt%2Fsource%2Fdivergent-crate-dir-names%2Fdependency-dir-name%2FCargo.toml?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1,10 @@\n+[package]\n+name = \"dependency-crate-name\"\n+version = \"0.1.0\"\n+authors = [\"calebcartwright\"]\n+edition = \"2018\"\n+\n+[dependencies]\n+subdep-crate-name = { path = \"subdep-dir-name\" }\n+indexmap = \"1.0.2\"\n+rusty-hook = \"0.8.4\"\n\\ No newline at end of file"}, {"sha": "e93b18d725b9d3809dbedb15c14f530975233df3", "filename": "tests/cargo-fmt/source/divergent-crate-dir-names/dependency-dir-name/src/lib.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fcargo-fmt%2Fsource%2Fdivergent-crate-dir-names%2Fdependency-dir-name%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fcargo-fmt%2Fsource%2Fdivergent-crate-dir-names%2Fdependency-dir-name%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcargo-fmt%2Fsource%2Fdivergent-crate-dir-names%2Fdependency-dir-name%2Fsrc%2Flib.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1,7 @@\n+#[cfg(test)]\n+mod tests {\n+#[test]\n+fn it_works() {\n+    assert_eq!(2 + 2, 4);\n+}\n+}"}, {"sha": "7dad09f4077b2e0d5746ce7b8c45559439195951", "filename": "tests/cargo-fmt/source/divergent-crate-dir-names/dependency-dir-name/subdep-dir-name/Cargo.toml", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fcargo-fmt%2Fsource%2Fdivergent-crate-dir-names%2Fdependency-dir-name%2Fsubdep-dir-name%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fcargo-fmt%2Fsource%2Fdivergent-crate-dir-names%2Fdependency-dir-name%2Fsubdep-dir-name%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcargo-fmt%2Fsource%2Fdivergent-crate-dir-names%2Fdependency-dir-name%2Fsubdep-dir-name%2FCargo.toml?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1,7 @@\n+[package]\n+name = \"subdep-crate-name\"\n+version = \"0.1.0\"\n+authors = [\"calebcartwright\"]\n+edition = \"2018\"\n+\n+[dependencies]"}, {"sha": "1c08c1c4fd3869b3ec1f5a75e9eff15a1760e1d8", "filename": "tests/cargo-fmt/source/divergent-crate-dir-names/dependency-dir-name/subdep-dir-name/src/lib.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fcargo-fmt%2Fsource%2Fdivergent-crate-dir-names%2Fdependency-dir-name%2Fsubdep-dir-name%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fcargo-fmt%2Fsource%2Fdivergent-crate-dir-names%2Fdependency-dir-name%2Fsubdep-dir-name%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcargo-fmt%2Fsource%2Fdivergent-crate-dir-names%2Fdependency-dir-name%2Fsubdep-dir-name%2Fsrc%2Flib.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1,7 @@\n+#[cfg(test)]\n+mod tests {\n+#[test]\n+fn sub_test_that_works() {\n+    assert_eq!(3 + 3, 6);\n+}\n+ }"}, {"sha": "f5c339a8dd1414567a06d41d0ba1786b66c3d815", "filename": "tests/cargo-fmt/source/divergent-crate-dir-names/src/main.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fcargo-fmt%2Fsource%2Fdivergent-crate-dir-names%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fcargo-fmt%2Fsource%2Fdivergent-crate-dir-names%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcargo-fmt%2Fsource%2Fdivergent-crate-dir-names%2Fsrc%2Fmain.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1,3 @@\n+fn main() {\n+println!(\"Hello, world!\");\n+}"}, {"sha": "df1886c82be31adc944051011e6360bce201907a", "filename": "tests/cargo-fmt/source/workspaces/path-dep-above/e/Cargo.toml", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fcargo-fmt%2Fsource%2Fworkspaces%2Fpath-dep-above%2Fe%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fcargo-fmt%2Fsource%2Fworkspaces%2Fpath-dep-above%2Fe%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcargo-fmt%2Fsource%2Fworkspaces%2Fpath-dep-above%2Fe%2FCargo.toml?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1,6 @@\n+[package]\n+name = \"e\"\n+version = \"0.1.0\"\n+edition = \"2018\"\n+[dependencies]\n+c = { path = \"../ws/c\" }"}, {"sha": "1c26a3895f37e165af2d84d8fa3e07a170e9ea4f", "filename": "tests/cargo-fmt/source/workspaces/path-dep-above/e/src/main.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fcargo-fmt%2Fsource%2Fworkspaces%2Fpath-dep-above%2Fe%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fcargo-fmt%2Fsource%2Fworkspaces%2Fpath-dep-above%2Fe%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcargo-fmt%2Fsource%2Fworkspaces%2Fpath-dep-above%2Fe%2Fsrc%2Fmain.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1 @@\n+struct E{   }"}, {"sha": "202739b613b8f64ce002bf46ddb386d942c4fbef", "filename": "tests/cargo-fmt/source/workspaces/path-dep-above/ws/Cargo.toml", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fcargo-fmt%2Fsource%2Fworkspaces%2Fpath-dep-above%2Fws%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fcargo-fmt%2Fsource%2Fworkspaces%2Fpath-dep-above%2Fws%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcargo-fmt%2Fsource%2Fworkspaces%2Fpath-dep-above%2Fws%2FCargo.toml?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1,5 @@\n+[workspace]\n+members = [\n+    \"a\",\n+    \"b\"\n+] \n\\ No newline at end of file"}, {"sha": "712a113448fb1add7e9c0cefdabcf63558c4b8b6", "filename": "tests/cargo-fmt/source/workspaces/path-dep-above/ws/a/Cargo.toml", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fcargo-fmt%2Fsource%2Fworkspaces%2Fpath-dep-above%2Fws%2Fa%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fcargo-fmt%2Fsource%2Fworkspaces%2Fpath-dep-above%2Fws%2Fa%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcargo-fmt%2Fsource%2Fworkspaces%2Fpath-dep-above%2Fws%2Fa%2FCargo.toml?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1,6 @@\n+[package]\n+name = \"a\"\n+version = \"0.1.0\"\n+edition = \"2018\"\n+[dependencies]\n+d = { path = \"./d\" }"}, {"sha": "fb0f06fe5fce1bd460e8f049fcdba683e24a9279", "filename": "tests/cargo-fmt/source/workspaces/path-dep-above/ws/a/d/Cargo.toml", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fcargo-fmt%2Fsource%2Fworkspaces%2Fpath-dep-above%2Fws%2Fa%2Fd%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fcargo-fmt%2Fsource%2Fworkspaces%2Fpath-dep-above%2Fws%2Fa%2Fd%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcargo-fmt%2Fsource%2Fworkspaces%2Fpath-dep-above%2Fws%2Fa%2Fd%2FCargo.toml?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1,7 @@\n+[package]\n+name = \"d\"\n+version = \"0.1.0\"\n+edition = \"2018\"\n+[dependencies]\n+e = { path = \"../../../e\" }\n+f = { path = \"f\" }"}, {"sha": "5c4fa5617886f9ed0902a4b4fa64cd16adcdd304", "filename": "tests/cargo-fmt/source/workspaces/path-dep-above/ws/a/d/f/Cargo.toml", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fcargo-fmt%2Fsource%2Fworkspaces%2Fpath-dep-above%2Fws%2Fa%2Fd%2Ff%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fcargo-fmt%2Fsource%2Fworkspaces%2Fpath-dep-above%2Fws%2Fa%2Fd%2Ff%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcargo-fmt%2Fsource%2Fworkspaces%2Fpath-dep-above%2Fws%2Fa%2Fd%2Ff%2FCargo.toml?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1,4 @@\n+[package]\n+name = \"f\"\n+version = \"0.1.0\"\n+edition = \"2018\""}, {"sha": "c655c4d5e1a82205b657253c19336192e8be4539", "filename": "tests/cargo-fmt/source/workspaces/path-dep-above/ws/a/d/f/src/lib.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fcargo-fmt%2Fsource%2Fworkspaces%2Fpath-dep-above%2Fws%2Fa%2Fd%2Ff%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fcargo-fmt%2Fsource%2Fworkspaces%2Fpath-dep-above%2Fws%2Fa%2Fd%2Ff%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcargo-fmt%2Fsource%2Fworkspaces%2Fpath-dep-above%2Fws%2Fa%2Fd%2Ff%2Fsrc%2Flib.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1 @@\n+struct F{   }\n\\ No newline at end of file"}, {"sha": "04e6e4cb94022970de8349030fab8064d8cd2c2e", "filename": "tests/cargo-fmt/source/workspaces/path-dep-above/ws/a/d/src/lib.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fcargo-fmt%2Fsource%2Fworkspaces%2Fpath-dep-above%2Fws%2Fa%2Fd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fcargo-fmt%2Fsource%2Fworkspaces%2Fpath-dep-above%2Fws%2Fa%2Fd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcargo-fmt%2Fsource%2Fworkspaces%2Fpath-dep-above%2Fws%2Fa%2Fd%2Fsrc%2Flib.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1 @@\n+struct D{   }\n\\ No newline at end of file"}, {"sha": "04e6e4cb94022970de8349030fab8064d8cd2c2e", "filename": "tests/cargo-fmt/source/workspaces/path-dep-above/ws/a/src/main.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fcargo-fmt%2Fsource%2Fworkspaces%2Fpath-dep-above%2Fws%2Fa%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fcargo-fmt%2Fsource%2Fworkspaces%2Fpath-dep-above%2Fws%2Fa%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcargo-fmt%2Fsource%2Fworkspaces%2Fpath-dep-above%2Fws%2Fa%2Fsrc%2Fmain.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1 @@\n+struct D{   }\n\\ No newline at end of file"}, {"sha": "47a24ff4f275398dbe9a1ad24f951f9539050445", "filename": "tests/cargo-fmt/source/workspaces/path-dep-above/ws/b/Cargo.toml", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fcargo-fmt%2Fsource%2Fworkspaces%2Fpath-dep-above%2Fws%2Fb%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fcargo-fmt%2Fsource%2Fworkspaces%2Fpath-dep-above%2Fws%2Fb%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcargo-fmt%2Fsource%2Fworkspaces%2Fpath-dep-above%2Fws%2Fb%2FCargo.toml?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1,6 @@\n+[package]\n+name = \"b\"\n+version = \"0.1.0\"\n+edition = \"2018\"\n+[dependencies]\n+c = { path = \"../c\" }"}, {"sha": "4833bbc69b48ebe1c36055cf9579fb592b7a2bbb", "filename": "tests/cargo-fmt/source/workspaces/path-dep-above/ws/b/src/main.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fcargo-fmt%2Fsource%2Fworkspaces%2Fpath-dep-above%2Fws%2Fb%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fcargo-fmt%2Fsource%2Fworkspaces%2Fpath-dep-above%2Fws%2Fb%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcargo-fmt%2Fsource%2Fworkspaces%2Fpath-dep-above%2Fws%2Fb%2Fsrc%2Fmain.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1 @@\n+struct B{   }\n\\ No newline at end of file"}, {"sha": "49fa6c395eb6cdeb3c90ea73266a7ff5a513ffab", "filename": "tests/cargo-fmt/source/workspaces/path-dep-above/ws/c/Cargo.toml", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fcargo-fmt%2Fsource%2Fworkspaces%2Fpath-dep-above%2Fws%2Fc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fcargo-fmt%2Fsource%2Fworkspaces%2Fpath-dep-above%2Fws%2Fc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcargo-fmt%2Fsource%2Fworkspaces%2Fpath-dep-above%2Fws%2Fc%2FCargo.toml?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1,4 @@\n+[package]\n+name = \"c\"\n+version = \"0.1.0\"\n+edition = \"2018\""}, {"sha": "1245ac91d60a4ed8141ed4bc435d57189a5da0e4", "filename": "tests/cargo-fmt/source/workspaces/path-dep-above/ws/c/src/lib.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fcargo-fmt%2Fsource%2Fworkspaces%2Fpath-dep-above%2Fws%2Fc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fcargo-fmt%2Fsource%2Fworkspaces%2Fpath-dep-above%2Fws%2Fc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcargo-fmt%2Fsource%2Fworkspaces%2Fpath-dep-above%2Fws%2Fc%2Fsrc%2Flib.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1 @@\n+struct C{   }\n\\ No newline at end of file"}, {"sha": "3804bf3215b19829888292948cdd5953676ab780", "filename": "tests/source/binop-separator-back/bitwise.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fsource%2Fbinop-separator-back%2Fbitwise.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fsource%2Fbinop-separator-back%2Fbitwise.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fbinop-separator-back%2Fbitwise.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1,14 @@\n+// rustfmt-binop_separator: Back\n+\n+fn main() {\n+    let value = abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ ^ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ;\n+\n+    let value = abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ & abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ;\n+\n+    let value = abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ | abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ;\n+\n+    let value = abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ << abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ;\n+\n+    let value = abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ >> abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ;\n+\n+}"}, {"sha": "50a27127445df1835adf47504f01c212d229f70b", "filename": "tests/source/binop-separator-back/comp.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fsource%2Fbinop-separator-back%2Fcomp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fsource%2Fbinop-separator-back%2Fcomp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fbinop-separator-back%2Fcomp.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1,23 @@\n+// rustfmt-binop_separator: Back\n+\n+fn main() {\n+    if abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ < abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ {\n+        //\n+    }\n+\n+    if abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ <= abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ {\n+        //\n+    }\n+\n+    if abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ > abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ {\n+        //\n+    }\n+\n+    if abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ >= abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ {\n+        //\n+    }\n+\n+    if abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ == abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ {\n+        //\n+    }\n+}"}, {"sha": "8c297e5a675078154cac98329ceb8347bbd4e4cc", "filename": "tests/source/binop-separator-back/logic.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fsource%2Fbinop-separator-back%2Flogic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fsource%2Fbinop-separator-back%2Flogic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fbinop-separator-back%2Flogic.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1,7 @@\n+// rustfmt-binop_separator: Back\n+\n+fn main() {\n+    if abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ && abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ || abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ {\n+        //\n+    }\n+}"}, {"sha": "3af4aad16051eac18074237d37d651f731359eb4", "filename": "tests/source/binop-separator-back/math.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fsource%2Fbinop-separator-back%2Fmath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fsource%2Fbinop-separator-back%2Fmath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fbinop-separator-back%2Fmath.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1,7 @@\n+// rustfmt-binop_separator: Back\n+\n+fn main() {\n+    let value = abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ + abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ + abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ + abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ + abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ + abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ + abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ;\n+\n+    let value = abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ + abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ * abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ - abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ / abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ + abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ * abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ * abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ / abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ / abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ + abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ;\n+}"}, {"sha": "a8c3b5cdd9b16ba73b84ae589af7983cd932cf44", "filename": "tests/source/binop-separator-back/patterns.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fsource%2Fbinop-separator-back%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fsource%2Fbinop-separator-back%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fbinop-separator-back%2Fpatterns.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1,9 @@\n+// rustfmt-binop_separator: Back\n+\n+fn main() {\n+    match val {\n+    ThisIsA::ReallyLongPatternNameToHelpOverflowTheNextValueOntoTheNextLine | ThisIsA::SecondValueSeparatedByAPipe | ThisIsA::ThirdValueSeparatedByAPipe => {\n+    //\n+    }\n+    }\n+}"}, {"sha": "bdd3de9922b093f8addbf8b45210662ce46517ce", "filename": "tests/source/binop-separator-back/range.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fsource%2Fbinop-separator-back%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fsource%2Fbinop-separator-back%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fbinop-separator-back%2Frange.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1,7 @@\n+// rustfmt-binop_separator: Back\n+\n+fn main() {\n+    let value = abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ..abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ;\n+\n+    let value = abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ..=abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ;\n+}"}, {"sha": "dec1e00d117b46d8fa8def4719557d6d113256d2", "filename": "tests/source/configs/format_generated_files/false.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fsource%2Fconfigs%2Fformat_generated_files%2Ffalse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fsource%2Fconfigs%2Fformat_generated_files%2Ffalse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs%2Fformat_generated_files%2Ffalse.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1,8 @@\n+// @generated\n+// rustfmt-format_generated_files: false\n+\n+fn main()\n+{\n+    println!(\"hello, world\")\n+    ;\n+}"}, {"sha": "a25ddc25a6a447856da69f9691cbc16fc6c92987", "filename": "tests/source/configs/format_generated_files/true.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fsource%2Fconfigs%2Fformat_generated_files%2Ftrue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fsource%2Fconfigs%2Fformat_generated_files%2Ftrue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs%2Fformat_generated_files%2Ftrue.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1,8 @@\n+// @generated\n+// rustfmt-format_generated_files: true\n+\n+fn main()\n+{\n+    println!(\"hello, world\")\n+    ;\n+}"}, {"sha": "ce307b3aa521e29a192f36c2257cda2de18cb260", "filename": "tests/source/hex_literal_lower.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fsource%2Fhex_literal_lower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fsource%2Fhex_literal_lower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fhex_literal_lower.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1,5 @@\n+// rustfmt-hex_literal_case: Lower\n+fn main() {\n+    let h1 = 0xCAFE_5EA7;\n+    let h2 = 0xCAFE_F00Du32;\n+}"}, {"sha": "b1092ad71ba136af32ba6afc94a4eb4b6ca386d3", "filename": "tests/source/hex_literal_upper.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fsource%2Fhex_literal_upper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fsource%2Fhex_literal_upper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fhex_literal_upper.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1,5 @@\n+// rustfmt-hex_literal_case: Upper\n+fn main() {\n+    let h1 = 0xCaFE_5ea7;\n+    let h2 = 0xCAFE_F00Du32;\n+}"}, {"sha": "dcd1f0cd5b09de29ed9f0eec68745c0488aa438c", "filename": "tests/source/impls.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fsource%2Fimpls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fsource%2Fimpls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fimpls.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -13,6 +13,14 @@ pub impl Foo for Bar {\n     // Comment 3\n }\n \n+#[inherent]\n+impl Visible for Bar {\n+    pub const C: i32;\n+    pub type T;\n+    pub fn f();\n+    pub fn g() {}\n+}\n+\n pub unsafe impl<'a, 'b, X, Y: Foo<Bar>> !Foo<'a, X> for Bar<'b, Y> where X: Foo<'a, Z> {\n     fn foo() { \"hi\" }    \n }"}, {"sha": "c21707df3954578051937a642dbc98ab32333b44", "filename": "tests/source/imports_granularity_one.rs", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fsource%2Fimports_granularity_one.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fsource%2Fimports_granularity_one.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fimports_granularity_one.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1,60 @@\n+// rustfmt-imports_granularity: One\n+\n+use b;\n+use a::ac::{aca, acb};\n+use a::{aa::*, ab};\n+\n+use a as x;\n+use b::ba;\n+use a::{aa, ab};\n+\n+use a::aa::aaa;\n+use a::ab::aba as x;\n+use a::aa::*;\n+\n+use a::aa;\n+use a::ad::ada;\n+#[cfg(test)]\n+use a::{ab, ac::aca};\n+use b;\n+#[cfg(test)]\n+use b::{\n+    ba, bb,\n+    bc::bca::{bcaa, bcab},\n+};\n+\n+pub use a::aa;\n+pub use a::ae;\n+use a::{ab, ac, ad};\n+use b::ba;\n+pub use b::{bb, bc::bca};\n+\n+use a::aa::aaa;\n+use a::ac::{aca, acb};\n+use a::{aa::*, ab};\n+use b::{\n+    ba,\n+    bb::{self, bba},\n+};\n+\n+use crate::a;\n+use crate::b::ba;\n+use c::ca;\n+\n+use super::a;\n+use c::ca;\n+use super::b::ba;\n+\n+use crate::a;\n+use super::b;\n+use c::{self, ca};\n+\n+use a::{\n+    // some comment\n+    aa::{aaa, aab},\n+    ab,\n+    // another comment\n+    ac::aca,\n+};\n+use b as x;\n+use a::ad::ada;"}, {"sha": "315073db6af5a99864f3f418bd6a19fb3f95e33d", "filename": "tests/source/issue-3158.rs", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fsource%2Fissue-3158.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fsource%2Fissue-3158.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-3158.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1,74 @@\n+// rustfmt-format_code_in_doc_comments: true\n+\n+/// Should format\n+/// ```rust\n+/// assert!( false );\n+/// ```\n+///\n+/// Should format\n+/// ```rust,should_panic\n+/// assert!( false );\n+/// ```\n+///\n+/// Should format\n+/// ```rust,should_panic,edition2018\n+/// assert!( false );\n+/// ```\n+///\n+/// Should format\n+/// ```rust , should_panic , edition2018\n+/// assert!( false );\n+/// ```\n+///\n+/// Should not format\n+/// ```ignore\n+/// assert!( false );\n+/// ```\n+///\n+/// Should not format (not all are rust)\n+/// ```rust,ignore\n+/// assert!( false );\n+/// ```\n+///\n+/// Should not format (rust compile_fail)\n+/// ```compile_fail\n+/// assert!( false );\n+/// ```\n+///\n+/// Should not format (rust compile_fail)\n+/// ```rust,compile_fail\n+/// assert!( false );\n+/// ```\n+///\n+/// Various unspecified ones that should format\n+/// ```\n+/// assert!( false );\n+/// ```\n+///\n+/// ```,\n+/// assert!( false );\n+/// ```\n+///\n+/// ```,,,,,\n+/// assert!( false );\n+/// ```\n+///\n+/// ```,,,  rust  ,,\n+/// assert!( false );\n+/// ```\n+///\n+/// Should not format\n+/// ```,,,  rust  ,  ignore,\n+/// assert!( false );\n+/// ```\n+///\n+/// Few empty ones\n+/// ```\n+/// ```\n+///\n+/// ```rust\n+/// ```\n+///\n+/// ```ignore\n+/// ```\n+fn foo() {}"}, {"sha": "9d2882abb3c1ccd0a45a60d37b896d13c2e868ff", "filename": "tests/source/issue-4530.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fsource%2Fissue-4530.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fsource%2Fissue-4530.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-4530.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1,4 @@\n+// rustfmt-version: Two\n+fn main() {\n+    let [aaaaaaaaaaaaaaaaaaaaaaaaaa, bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb, cccccccccccccccccccccccccc, ddddddddddddddddddddddddd] = panic!();\n+}"}, {"sha": "89af5d1239dd07db1b06d2ff5d1b862d2a7e52b5", "filename": "tests/source/issue-4615/minimum_example.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fsource%2Fissue-4615%2Fminimum_example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fsource%2Fissue-4615%2Fminimum_example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-4615%2Fminimum_example.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1,4 @@\n+info!(//debug\n+    \"{}: sending function_code={:04x} data={:04x} crc=0x{:04X} data={:02X?}\",\n+    self.name, function_code, data, crc, output_cmd\n+);"}, {"sha": "43d540c4a5d72441c5df11299ff0f074bf01d42d", "filename": "tests/source/issue-4816/lib.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fsource%2Fissue-4816%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fsource%2Fissue-4816%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-4816%2Flib.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1,10 @@\n+#![feature(const_generics_defaults)]\n+struct Foo<const N: usize    =  1, const N2: usize =           2>;\n+struct Bar<const N: usize, const N2: usize = {      N + \n+1 }>;\n+struct Lots<const N1BlahFooUwU: usize = { 10 + 28 + 1872 / 10 * 3 },const N2SecondParamOhmyyy: usize = { N1BlahFooUwU / 2 + 10 * 2 },>;\n+struct NamesRHard<const N: usize = { 1 + 1 + 1 + 1 + 1 + 1 }>;\n+struct FooBar<\n+    const LessThan100ButClose: usize = {1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1}\n+>;\n+struct FooBarrrrrrrr<const N: usize        =           {13478234326456456444323871+ 1+ 1+ 1+ 1+ 1+ 1+ 1+ 1+ 1+ 1+ 1+ 1+ 1+1+1+1 + 1},>;"}, {"sha": "e55e41bd1a58a377141b9b68e317e5885d96d40d", "filename": "tests/source/issue-4926/deeply_nested_struct.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fsource%2Fissue-4926%2Fdeeply_nested_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fsource%2Fissue-4926%2Fdeeply_nested_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-4926%2Fdeeply_nested_struct.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1,35 @@\n+\n+// rustfmt-struct_field_align_threshold: 30\n+\n+struct X {\n+    a: i32,\n+    b: i32,\n+    c: i32,\n+}\n+\n+fn test(x: X) {\n+    let d = {\n+        let e = {\n+            let f = {\n+                let g = {\n+                    let h = {\n+                        let i = {\n+                            let j = {\n+                                matches!(\n+                                    x,\n+                                    X { a: 1_000, b: 1_000, .. }\n+                                )\n+                            };\n+                            j\n+                        };\n+                        i\n+                    };\n+                    h\n+                };\n+                g\n+            };\n+            f\n+        };\n+        e\n+    };\n+}\n\\ No newline at end of file"}, {"sha": "516699fa2b8bc0193ef42e3da20201e9959040f7", "filename": "tests/source/issue-4926/deeply_nested_struct_with_long_field_names.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fsource%2Fissue-4926%2Fdeeply_nested_struct_with_long_field_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fsource%2Fissue-4926%2Fdeeply_nested_struct_with_long_field_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-4926%2Fdeeply_nested_struct_with_long_field_names.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1,43 @@\n+// rustfmt-struct_field_align_threshold: 30\n+\n+struct X {\n+    really_really_long_field_a: i32,\n+    really_really_really_long_field_b: i32,\n+    really_really_really_really_long_field_c: i32,\n+    really_really_really_really_really_long_field_d: i32,\n+    really_really_really_really_really_really_long_field_e: i32,\n+    f: i32,\n+}\n+\n+fn test(x: X) {\n+    let d = {\n+        let e = {\n+            let f = {\n+                let g = {\n+                    let h = {\n+                        let i = {\n+                            let j = {\n+                                matches!(\n+                                    x,\n+                                    X {\n+                                        really_really_long_field_a: 10,\n+                                        really_really_really_long_field_b: 10,\n+                                        really_really_really_really_long_field_c: 10,\n+                                        really_really_really_really_really_long_field_d: 10,\n+                                        really_really_really_really_really_really_long_field_e: 10, ..\n+                                    }\n+                                )\n+                            };\n+                            j\n+                        };\n+                        i\n+                    };\n+                    h\n+                };\n+                g\n+            };\n+            f\n+        };\n+        e\n+    };\n+}"}, {"sha": "38fd6f02cf0691e4ca7dd209381fa8a411504aa1", "filename": "tests/source/issue-4926/deeply_nested_struct_with_many_fields.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fsource%2Fissue-4926%2Fdeeply_nested_struct_with_many_fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fsource%2Fissue-4926%2Fdeeply_nested_struct_with_many_fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-4926%2Fdeeply_nested_struct_with_many_fields.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1,44 @@\n+// rustfmt-struct_field_align_threshold: 30\n+\n+struct X {\n+    a: i32,\n+    b: i32,\n+    c: i32,\n+    d: i32,\n+    e: i32,\n+    f: i32,\n+    g: i32,\n+    h: i32,\n+    i: i32,\n+    j: i32,\n+    k: i32,\n+}\n+\n+fn test(x: X) {\n+    let d = {\n+        let e = {\n+            let f = {\n+                let g = {\n+                    let h = {\n+                        let i = {\n+                            let j = {\n+                                matches!(\n+                                    x,\n+                                    X {\n+                                        a: 1_000, b: 1_000, c: 1_000, d: 1_000, e: 1_000, f: 1_000, g: 1_000, h: 1_000, i: 1_000, j: 1_000, ..\n+                                    }\n+                                )\n+                            };\n+                            j\n+                        };\n+                        i\n+                    };\n+                    h\n+                };\n+                g\n+            };\n+            f\n+        };\n+        e\n+    };\n+}"}, {"sha": "336378537df38a619eb9daa5150929f278fc68d5", "filename": "tests/source/issue-4926/enum_struct_field.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fsource%2Fissue-4926%2Fenum_struct_field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fsource%2Fissue-4926%2Fenum_struct_field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-4926%2Fenum_struct_field.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1,35 @@\n+// rustfmt-struct_field_align_threshold: 30\n+// rustfmt-enum_discrim_align_threshold: 30\n+// rustfmt-imports_layout: HorizontalVertical\n+\n+#[derive(Default)]\n+struct InnerStructA { bbbbbbbbb: i32, cccccccc: i32 }\n+\n+enum SomeEnumNamedD {\n+    E(InnerStructA),\n+    F {\n+        ggggggggggggggggggggggggg: bool,\n+        h: bool,\n+    }\n+}\n+\n+impl SomeEnumNamedD {\n+    fn f_variant() -> Self {\n+        Self::F { ggggggggggggggggggggggggg: true, h: true }\n+    }\n+}\n+\n+fn main() {\n+    let kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk = SomeEnumNamedD::f_variant();\n+    let something_we_care_about = matches!(\n+        kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk,\n+        SomeEnumNamedD::F {\n+            ggggggggggggggggggggggggg: true,\n+            ..\n+        }\n+    );\n+\n+    if something_we_care_about {\n+        println!(\"Yup it happened\");\n+    }\n+}"}, {"sha": "2c3045dea489e0f11698451f9f4bfa0b797cfdfa", "filename": "tests/source/issue-4926/minimum_example.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fsource%2Fissue-4926%2Fminimum_example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fsource%2Fissue-4926%2Fminimum_example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-4926%2Fminimum_example.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1,10 @@\n+// rustfmt-struct_field_align_threshold: 30\n+\n+struct X { a: i32, b: i32 }\n+\n+fn test(x: X) {\n+    let y = matches!(x, X {\n+        a: 1,\n+        ..\n+    });\n+}"}, {"sha": "b8a37f0714ee6030eed7a460f502942087881ca8", "filename": "tests/source/issue-4926/struct_with_long_field_names.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fsource%2Fissue-4926%2Fstruct_with_long_field_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fsource%2Fissue-4926%2Fstruct_with_long_field_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-4926%2Fstruct_with_long_field_names.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1,21 @@\n+// rustfmt-struct_field_align_threshold: 30\n+\n+struct X {\n+    really_really_long_field_a: i32,\n+    really_really_really_long_field_b: i32,\n+    really_really_really_really_long_field_c: i32,\n+    really_really_really_really_really_long_field_d: i32,\n+    really_really_really_really_really_really_long_field_e: i32,\n+    f: i32,\n+}\n+\n+fn test(x: X) {\n+    let y = matches!(x, X {\n+        really_really_long_field_a: 10,\n+        really_really_really_long_field_b: 10,\n+        really_really_really_really_long_field_c: 10,\n+        really_really_really_really_really_long_field_d: 10,\n+        really_really_really_really_really_really_long_field_e: 10,\n+        ..\n+    });\n+}"}, {"sha": "4adfd3b306296bc176d688373d081af0b82e9f5b", "filename": "tests/source/issue-4926/struct_with_many_fields.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fsource%2Fissue-4926%2Fstruct_with_many_fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fsource%2Fissue-4926%2Fstruct_with_many_fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-4926%2Fstruct_with_many_fields.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1,21 @@\n+// rustfmt-struct_field_align_threshold: 30\n+\n+struct X {\n+    a: i32,\n+    b: i32,\n+    c: i32,\n+    d: i32,\n+    e: i32,\n+    f: i32,\n+    g: i32,\n+    h: i32,\n+    i: i32,\n+    j: i32,\n+    k: i32,\n+}\n+\n+fn test(x: X) {\n+    let y = matches!(x, X {\n+        a: 1_000, b: 1_000, c: 1_000, d: 1_000, e: 1_000, f: 1_000, g: 1_000, h: 1_000, i: 1_000, j: 1_000, ..\n+    });\n+}\n\\ No newline at end of file"}, {"sha": "677f873771691771851b48efa740cc090e791867", "filename": "tests/source/issue-4984/minimum_example.rs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fsource%2Fissue-4984%2Fminimum_example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fsource%2Fissue-4984%2Fminimum_example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-4984%2Fminimum_example.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1,2 @@\n+#[derive(/*Debug, */Clone)]\n+struct Foo;"}, {"sha": "73921dd173547711d0966743203ae07b7203c87e", "filename": "tests/source/issue-4984/multi_line_derive.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fsource%2Fissue-4984%2Fmulti_line_derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fsource%2Fissue-4984%2Fmulti_line_derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-4984%2Fmulti_line_derive.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1,20 @@\n+#[derive(\n+/* ---------- Some really important comment that just had to go inside the derive --------- */\n+Debug, Clone, Eq, PartialEq,\n+)]\n+struct Foo {\n+    a: i32,\n+    b: T,\n+}\n+\n+#[derive(\n+/*\n+    Some really important comment that just had to go inside the derive.\n+    Also had to be put over multiple lines\n+*/\n+Debug, Clone, Eq, PartialEq,\n+)]\n+struct Bar {\n+    a: i32,\n+    b: T,\n+}"}, {"sha": "eb474a723d01609e077785456d1fad06cb3b45fc", "filename": "tests/source/issue-4984/multiple_comments_within.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fsource%2Fissue-4984%2Fmultiple_comments_within.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fsource%2Fissue-4984%2Fmultiple_comments_within.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-4984%2Fmultiple_comments_within.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1,8 @@\n+#[derive(\n+/* ---------- Some really important comment that just had to go inside the derive --------- */\n+Debug, Clone,/* Another comment */Eq, PartialEq,\n+)]\n+struct Foo {\n+    a: i32,\n+    b: T,\n+}"}, {"sha": "b48292164e43ab4b13d9f4e22a97d3c2ec1af769", "filename": "tests/source/issue-5011.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fsource%2Fissue-5011.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fsource%2Fissue-5011.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-5011.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1,12 @@\n+pub(crate) struct ASlash(\n+    // hello\n+    i32\n+);\n+\n+pub(crate) struct AStar(\n+    /* hello */\n+    i32\n+);\n+\n+pub(crate) struct BStar(/* hello */ i32);\n+"}, {"sha": "11ded074c3455d57fc4e2f03da75123edf992ac7", "filename": "tests/source/issue_4032.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fsource%2Fissue_4032.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fsource%2Fissue_4032.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue_4032.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1,4 @@\n+fn a1(#[aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa] a: u8) {}\n+fn b1(#[aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa] bb: u8) {}\n+fn a2(#[aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa] a: u8) {}\n+fn b2(#[aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa] bb: u8) {}"}, {"sha": "2b887fadb621c32df0ed07d6aa74d879ad299a66", "filename": "tests/source/issue_4257.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fsource%2Fissue_4257.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fsource%2Fissue_4257.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue_4257.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1,13 @@\n+#![feature(generic_associated_types)]\n+#![allow(incomplete_features)]\n+\n+trait Trait<T> {\n+    type Type<'a> where T: 'a;\n+    fn foo(x: &T) -> Self::Type<'_>;\n+}\n+impl<T> Trait<T> for () {\n+    type Type<'a> where T: 'a = &'a T;\n+    fn foo(x: &T) -> Self::Type<'_> {\n+        x\n+    }\n+}"}, {"sha": "b28cc7cdd12fede29107857764ebe2bfaa194484", "filename": "tests/source/issue_4322.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fsource%2Fissue_4322.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fsource%2Fissue_4322.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue_4322.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1,3 @@\n+trait Bar {\n+  type X<'a> where Self: 'a;\n+}"}, {"sha": "73f345233ba7718037878698017baa4b09f4c84e", "filename": "tests/source/issue_4579.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fsource%2Fissue_4579.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fsource%2Fissue_4579.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue_4579.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1,15 @@\n+// rustfmt-hard_tabs: true\n+\n+#[macro_export]\n+macro_rules! main {\n+\t() => {\n+\t\t#[spirv(fragment)]\n+\t\tpub fn main_fs(\n+\t\t\tmut out_color: ::spirv_std::storage_class::Output<Vec4>,\n+\t\t\t#[spirv(descriptor_set = 1)]iChannelResolution: ::spirv_std::storage_class::UniformConstant<\n+\t\t\t\t[::spirv_std::glam::Vec3A; 4],\n+\t\t\t>,\n+\t\t) {\n+\t\t}\n+\t};\n+}"}, {"sha": "21ef6c6c491ac0296f15187f6c49176c2ae053c3", "filename": "tests/source/issue_4911.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fsource%2Fissue_4911.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fsource%2Fissue_4911.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue_4911.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1,6 @@\n+#![feature(generic_associated_types)]\n+#![feature(min_type_alias_impl_trait)]\n+\n+impl SomeTrait for SomeType {\n+    type SomeGAT<'a> where Self: 'a = impl SomeOtherTrait;\n+}\n\\ No newline at end of file"}, {"sha": "0793b7b4fe1cca55947c31fbf259d15a3e8175e6", "filename": "tests/source/issue_4943.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fsource%2Fissue_4943.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fsource%2Fissue_4943.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue_4943.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1,9 @@\n+#![feature(generic_associated_types)]\n+\n+impl SomeStruct {\n+    fn process<T>(v: T) -> <Self as GAT>::R<T>\n+    where Self: GAT<R<T> = T>\n+    {\n+        SomeStruct::do_something(v)\n+    }\n+}"}, {"sha": "8011c601b654f4b72ca68c6c27968f99d615bd08", "filename": "tests/source/issue_4954.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fsource%2Fissue_4954.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fsource%2Fissue_4954.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue_4954.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1,5 @@\n+trait Foo {\n+  type Arg<'a>;\n+}\n+\n+struct Bar<T>(T) where for<'a> T: Foo<Arg<'a> = ()>;"}, {"sha": "32e1f6cd41bf6c014ba8d7e3b736afc9e0356d14", "filename": "tests/source/issue_4963.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fsource%2Fissue_4963.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fsource%2Fissue_4963.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue_4963.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1,5 @@\n+mod test {\n+    extern \"C\" {fn test();}\n+}\n+\n+extern \"C\" {fn test();}\n\\ No newline at end of file"}, {"sha": "baa05b79c16175e5001ef80682b31d8cff0fe80b", "filename": "tests/source/match-block-trailing-comma.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fsource%2Fmatch-block-trailing-comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fsource%2Fmatch-block-trailing-comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fmatch-block-trailing-comma.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -8,6 +8,14 @@ fn foo() {\n             \"line1\";\n             \"line2\"\n         }\n+        ThisIsA::Guard if true => {\n+            \"line1\";\n+            \"line2\"\n+        }\n+        ThisIsA::ReallyLongPattern(ThatWillForce::TheGuard, ToWrapOnto::TheFollowingLine) if true => {\n+            \"line1\";\n+            \"line2\"\n+        }\n         b => (aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,\n               bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb),\n     }"}, {"sha": "b6db9e1590d416a932db52ac89999b221e75d544", "filename": "tests/source/trait.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fsource%2Ftrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Fsource%2Ftrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Ftrait.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -174,3 +174,10 @@ Send\n     + DDDDDDDD\n     + DDDDDDDDD\n     + EEEEEEE;\n+\n+trait Visible {\n+    pub const C: i32;\n+    pub type T;\n+    pub fn f();\n+    pub fn g() {}\n+}"}, {"sha": "ce32c05ef703f183624c0f3cdeeb3975285c15b2", "filename": "tests/target/binop-separator-back/bitwise.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Ftarget%2Fbinop-separator-back%2Fbitwise.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Ftarget%2Fbinop-separator-back%2Fbitwise.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fbinop-separator-back%2Fbitwise.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1,18 @@\n+// rustfmt-binop_separator: Back\n+\n+fn main() {\n+    let value = abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ ^\n+        abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ;\n+\n+    let value = abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ &\n+        abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ;\n+\n+    let value = abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ |\n+        abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ;\n+\n+    let value = abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ <<\n+        abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ;\n+\n+    let value = abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ >>\n+        abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ;\n+}"}, {"sha": "efd837bcfe389ee458d5a79f5bdc9a45bcc5ecb6", "filename": "tests/target/binop-separator-back/comp.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Ftarget%2Fbinop-separator-back%2Fcomp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Ftarget%2Fbinop-separator-back%2Fcomp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fbinop-separator-back%2Fcomp.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1,33 @@\n+// rustfmt-binop_separator: Back\n+\n+fn main() {\n+    if abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ <\n+        abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\n+    {\n+        //\n+    }\n+\n+    if abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ <=\n+        abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\n+    {\n+        //\n+    }\n+\n+    if abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ >\n+        abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\n+    {\n+        //\n+    }\n+\n+    if abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ >=\n+        abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\n+    {\n+        //\n+    }\n+\n+    if abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ ==\n+        abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\n+    {\n+        //\n+    }\n+}"}, {"sha": "5f69fd5f55e4afee47f06803697158de72b65b02", "filename": "tests/target/binop-separator-back/logic.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Ftarget%2Fbinop-separator-back%2Flogic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Ftarget%2Fbinop-separator-back%2Flogic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fbinop-separator-back%2Flogic.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1,10 @@\n+// rustfmt-binop_separator: Back\n+\n+fn main() {\n+    if abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ &&\n+        abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ ||\n+        abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\n+    {\n+        //\n+    }\n+}"}, {"sha": "7a3f27e733b2c8e14e794cfb90bbaeb0525a2068", "filename": "tests/target/binop-separator-back/math.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Ftarget%2Fbinop-separator-back%2Fmath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Ftarget%2Fbinop-separator-back%2Fmath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fbinop-separator-back%2Fmath.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1,23 @@\n+// rustfmt-binop_separator: Back\n+\n+fn main() {\n+    let value = abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ +\n+        abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ +\n+        abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ +\n+        abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ +\n+        abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ +\n+        abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ +\n+        abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ;\n+\n+    let value = abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ +\n+        abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ *\n+            abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ -\n+        abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ /\n+            abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ +\n+        abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ *\n+            abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ *\n+            abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ /\n+            abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ /\n+            abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ +\n+        abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ;\n+}"}, {"sha": "2e59713526a028e4a6dd97a8957061dba029cdff", "filename": "tests/target/binop-separator-back/patterns.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Ftarget%2Fbinop-separator-back%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Ftarget%2Fbinop-separator-back%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fbinop-separator-back%2Fpatterns.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1,11 @@\n+// rustfmt-binop_separator: Back\n+\n+fn main() {\n+    match val {\n+        ThisIsA::ReallyLongPatternNameToHelpOverflowTheNextValueOntoTheNextLine |\n+        ThisIsA::SecondValueSeparatedByAPipe |\n+        ThisIsA::ThirdValueSeparatedByAPipe => {\n+            //\n+        }\n+    }\n+}"}, {"sha": "19e5a81cd9cd153820386aede794e8cfed5605ee", "filename": "tests/target/binop-separator-back/range.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Ftarget%2Fbinop-separator-back%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Ftarget%2Fbinop-separator-back%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fbinop-separator-back%2Frange.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1,9 @@\n+// rustfmt-binop_separator: Back\n+\n+fn main() {\n+    let value = abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ..\n+        abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ;\n+\n+    let value = abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ..=\n+        abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ;\n+}"}, {"sha": "dec1e00d117b46d8fa8def4719557d6d113256d2", "filename": "tests/target/configs/format_generated_files/false.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Ftarget%2Fconfigs%2Fformat_generated_files%2Ffalse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Ftarget%2Fconfigs%2Fformat_generated_files%2Ffalse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs%2Fformat_generated_files%2Ffalse.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1,8 @@\n+// @generated\n+// rustfmt-format_generated_files: false\n+\n+fn main()\n+{\n+    println!(\"hello, world\")\n+    ;\n+}"}, {"sha": "5fea7e8b34139a8445add0912b0e4f99f246ba1c", "filename": "tests/target/configs/format_generated_files/true.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Ftarget%2Fconfigs%2Fformat_generated_files%2Ftrue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Ftarget%2Fconfigs%2Fformat_generated_files%2Ftrue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs%2Fformat_generated_files%2Ftrue.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1,6 @@\n+// @generated\n+// rustfmt-format_generated_files: true\n+\n+fn main() {\n+    println!(\"hello, world\");\n+}"}, {"sha": "5c27fded1674308ed1ab255c3ad12cbf336661f6", "filename": "tests/target/hex_literal_lower.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Ftarget%2Fhex_literal_lower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Ftarget%2Fhex_literal_lower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fhex_literal_lower.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1,5 @@\n+// rustfmt-hex_literal_case: Lower\n+fn main() {\n+    let h1 = 0xcafe_5ea7;\n+    let h2 = 0xcafe_f00du32;\n+}"}, {"sha": "e8774d0bb24eb0e30f7c3570ff888d685f5ea755", "filename": "tests/target/hex_literal_preserve.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Ftarget%2Fhex_literal_preserve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Ftarget%2Fhex_literal_preserve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fhex_literal_preserve.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1,5 @@\n+// rustfmt-hex_literal_case: Preserve\n+fn main() {\n+    let h1 = 0xcAfE_5Ea7;\n+    let h2 = 0xCaFe_F00du32;\n+}"}, {"sha": "48bb93d2c1c08d7efc11ca562f5cd732f3cc0ee1", "filename": "tests/target/hex_literal_upper.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Ftarget%2Fhex_literal_upper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Ftarget%2Fhex_literal_upper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fhex_literal_upper.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1,5 @@\n+// rustfmt-hex_literal_case: Upper\n+fn main() {\n+    let h1 = 0xCAFE_5EA7;\n+    let h2 = 0xCAFE_F00Du32;\n+}"}, {"sha": "99e02990e417775ba8a9821a501e9ce0d4f0f960", "filename": "tests/target/impls.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Ftarget%2Fimpls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Ftarget%2Fimpls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fimpls.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -21,6 +21,14 @@ pub impl Foo for Bar {\n     // Comment 3\n }\n \n+#[inherent]\n+impl Visible for Bar {\n+    pub const C: i32;\n+    pub type T;\n+    pub fn f();\n+    pub fn g() {}\n+}\n+\n pub unsafe impl<'a, 'b, X, Y: Foo<Bar>> !Foo<'a, X> for Bar<'b, Y>\n where\n     X: Foo<'a, Z>,"}, {"sha": "78ec5e7325c50b7ed4de203d9b434b7ee62287c5", "filename": "tests/target/imports_granularity_one.rs", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Ftarget%2Fimports_granularity_one.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Ftarget%2Fimports_granularity_one.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fimports_granularity_one.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1,79 @@\n+// rustfmt-imports_granularity: One\n+\n+use {\n+    a::{\n+        aa::*,\n+        ab,\n+        ac::{aca, acb},\n+    },\n+    b,\n+};\n+\n+use {\n+    a::{self as x, aa, ab},\n+    b::ba,\n+};\n+\n+use a::{\n+    aa::{aaa, *},\n+    ab::aba as x,\n+};\n+\n+#[cfg(test)]\n+use a::{ab, ac::aca};\n+#[cfg(test)]\n+use b::{\n+    ba, bb,\n+    bc::bca::{bcaa, bcab},\n+};\n+use {\n+    a::{aa, ad::ada},\n+    b,\n+};\n+\n+pub use {\n+    a::{aa, ae},\n+    b::{bb, bc::bca},\n+};\n+use {\n+    a::{ab, ac, ad},\n+    b::ba,\n+};\n+\n+use {\n+    a::{\n+        aa::{aaa, *},\n+        ab,\n+        ac::{aca, acb},\n+    },\n+    b::{\n+        ba,\n+        bb::{self, bba},\n+    },\n+};\n+\n+use {\n+    crate::{a, b::ba},\n+    c::ca,\n+};\n+\n+use {\n+    super::{a, b::ba},\n+    c::ca,\n+};\n+\n+use {\n+    super::b,\n+    crate::a,\n+    c::{self, ca},\n+};\n+\n+use {\n+    a::{\n+        aa::{aaa, aab},\n+        ab,\n+        ac::aca,\n+        ad::ada,\n+    },\n+    b as x,\n+};"}, {"sha": "4bbbdc1d039224eed7ad7dbeb510ba53f2689fda", "filename": "tests/target/issue-3158.rs", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Ftarget%2Fissue-3158.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Ftarget%2Fissue-3158.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-3158.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1,74 @@\n+// rustfmt-format_code_in_doc_comments: true\n+\n+/// Should format\n+/// ```rust\n+/// assert!(false);\n+/// ```\n+///\n+/// Should format\n+/// ```rust,should_panic\n+/// assert!(false);\n+/// ```\n+///\n+/// Should format\n+/// ```rust,should_panic,edition2018\n+/// assert!(false);\n+/// ```\n+///\n+/// Should format\n+/// ```rust , should_panic , edition2018\n+/// assert!(false);\n+/// ```\n+///\n+/// Should not format\n+/// ```ignore\n+/// assert!( false );\n+/// ```\n+///\n+/// Should not format (not all are rust)\n+/// ```rust,ignore\n+/// assert!( false );\n+/// ```\n+///\n+/// Should not format (rust compile_fail)\n+/// ```compile_fail\n+/// assert!( false );\n+/// ```\n+///\n+/// Should not format (rust compile_fail)\n+/// ```rust,compile_fail\n+/// assert!( false );\n+/// ```\n+///\n+/// Various unspecified ones that should format\n+/// ```\n+/// assert!(false);\n+/// ```\n+///\n+/// ```,\n+/// assert!(false);\n+/// ```\n+///\n+/// ```,,,,,\n+/// assert!(false);\n+/// ```\n+///\n+/// ```,,,  rust  ,,\n+/// assert!(false);\n+/// ```\n+///\n+/// Should not format\n+/// ```,,,  rust  ,  ignore,\n+/// assert!( false );\n+/// ```\n+///\n+/// Few empty ones\n+/// ```\n+/// ```\n+///\n+/// ```rust\n+/// ```\n+///\n+/// ```ignore\n+/// ```\n+fn foo() {}"}, {"sha": "296dc559a9343175b9c3d2164e7c5620c68eec73", "filename": "tests/target/issue-4530.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Ftarget%2Fissue-4530.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Ftarget%2Fissue-4530.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-4530.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1,9 @@\n+// rustfmt-version: Two\n+fn main() {\n+    let [\n+        aaaaaaaaaaaaaaaaaaaaaaaaaa,\n+        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb,\n+        cccccccccccccccccccccccccc,\n+        ddddddddddddddddddddddddd,\n+    ] = panic!();\n+}"}, {"sha": "223b89b812d3d67eb047cf8ec39a6ac62f7ca44e", "filename": "tests/target/issue-4615/minimum_example.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Ftarget%2Fissue-4615%2Fminimum_example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Ftarget%2Fissue-4615%2Fminimum_example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-4615%2Fminimum_example.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1,5 @@\n+info!(\n+    //debug\n+    \"{}: sending function_code={:04x} data={:04x} crc=0x{:04X} data={:02X?}\",\n+    self.name, function_code, data, crc, output_cmd\n+);"}, {"sha": "246e775e1febcf304b866155f0a4e64b863e903e", "filename": "tests/target/issue-4816/lib.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Ftarget%2Fissue-4816%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Ftarget%2Fissue-4816%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-4816%2Flib.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1,35 @@\n+#![feature(const_generics_defaults)]\n+struct Foo<const N: usize = 1, const N2: usize = 2>;\n+struct Bar<const N: usize, const N2: usize = { N + 1 }>;\n+struct Lots<\n+    const N1BlahFooUwU: usize = { 10 + 28 + 1872 / 10 * 3 },\n+    const N2SecondParamOhmyyy: usize = { N1BlahFooUwU / 2 + 10 * 2 },\n+>;\n+struct NamesRHard<const N: usize = { 1 + 1 + 1 + 1 + 1 + 1 }>;\n+struct FooBar<\n+    const LessThan100ButClose: usize = {\n+        1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1\n+    },\n+>;\n+struct FooBarrrrrrrr<\n+    const N: usize = {\n+        13478234326456456444323871\n+            + 1\n+            + 1\n+            + 1\n+            + 1\n+            + 1\n+            + 1\n+            + 1\n+            + 1\n+            + 1\n+            + 1\n+            + 1\n+            + 1\n+            + 1\n+            + 1\n+            + 1\n+            + 1\n+            + 1\n+    },\n+>;"}, {"sha": "023b323cb2796f65af8362c4e0da4d6c2c227bf9", "filename": "tests/target/issue-4908-2.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Ftarget%2Fissue-4908-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Ftarget%2Fissue-4908-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-4908-2.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1,20 @@\n+#![feature(more_qualified_paths)]\n+\n+fn main() {\n+    // destructure through a qualified path\n+    let <Foo as A>::Assoc { br } = StructStruct { br: 2 };\n+}\n+\n+struct StructStruct {\n+    br: i8,\n+}\n+\n+struct Foo;\n+\n+trait A {\n+    type Assoc;\n+}\n+\n+impl A for Foo {\n+    type Assoc = StructStruct;\n+}"}, {"sha": "ac5357abe2a18b91f1a89fd174fcd798f8770ddc", "filename": "tests/target/issue-4908.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Ftarget%2Fissue-4908.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Ftarget%2Fissue-4908.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-4908.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1,34 @@\n+#![feature(more_qualified_paths)]\n+\n+mod foo_bar {\n+    pub enum Example {\n+        Example1 {},\n+        Example2 {},\n+    }\n+}\n+\n+fn main() {\n+    foo!(crate::foo_bar::Example, Example1);\n+\n+    let i1 = foo_bar::Example::Example1 {};\n+\n+    assert_eq!(i1.foo_example(), 1);\n+\n+    let i2 = foo_bar::Example::Example2 {};\n+\n+    assert_eq!(i2.foo_example(), 2);\n+}\n+\n+#[macro_export]\n+macro_rules! foo {\n+    ($struct:path, $variant:ident) => {\n+        impl $struct {\n+            pub fn foo_example(&self) -> i32 {\n+                match self {\n+                    <$struct>::$variant { .. } => 1,\n+                    _ => 2,\n+                }\n+            }\n+        }\n+    };\n+}"}, {"sha": "072cf2f6674a1c81ec8b49a971dfda070eb5ec21", "filename": "tests/target/issue-4926/deeply_nested_struct.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Ftarget%2Fissue-4926%2Fdeeply_nested_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Ftarget%2Fissue-4926%2Fdeeply_nested_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-4926%2Fdeeply_nested_struct.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1,38 @@\n+// rustfmt-struct_field_align_threshold: 30\n+\n+struct X {\n+    a: i32,\n+    b: i32,\n+    c: i32,\n+}\n+\n+fn test(x: X) {\n+    let d = {\n+        let e = {\n+            let f = {\n+                let g = {\n+                    let h = {\n+                        let i = {\n+                            let j = {\n+                                matches!(\n+                                    x,\n+                                    X {\n+                                        a: 1_000,\n+                                        b: 1_000,\n+                                        ..\n+                                    }\n+                                )\n+                            };\n+                            j\n+                        };\n+                        i\n+                    };\n+                    h\n+                };\n+                g\n+            };\n+            f\n+        };\n+        e\n+    };\n+}"}, {"sha": "c7bc7f7296d6b542ac59a9123e196afedb8f5bb6", "filename": "tests/target/issue-4926/deeply_nested_struct_with_long_field_names.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Ftarget%2Fissue-4926%2Fdeeply_nested_struct_with_long_field_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Ftarget%2Fissue-4926%2Fdeeply_nested_struct_with_long_field_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-4926%2Fdeeply_nested_struct_with_long_field_names.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1,44 @@\n+// rustfmt-struct_field_align_threshold: 30\n+\n+struct X {\n+    really_really_long_field_a: i32,\n+    really_really_really_long_field_b: i32,\n+    really_really_really_really_long_field_c: i32,\n+    really_really_really_really_really_long_field_d: i32,\n+    really_really_really_really_really_really_long_field_e: i32,\n+    f: i32,\n+}\n+\n+fn test(x: X) {\n+    let d = {\n+        let e = {\n+            let f = {\n+                let g = {\n+                    let h = {\n+                        let i = {\n+                            let j = {\n+                                matches!(\n+                                    x,\n+                                    X {\n+                                        really_really_long_field_a: 10,\n+                                        really_really_really_long_field_b: 10,\n+                                        really_really_really_really_long_field_c: 10,\n+                                        really_really_really_really_really_long_field_d: 10,\n+                                        really_really_really_really_really_really_long_field_e: 10,\n+                                        ..\n+                                    }\n+                                )\n+                            };\n+                            j\n+                        };\n+                        i\n+                    };\n+                    h\n+                };\n+                g\n+            };\n+            f\n+        };\n+        e\n+    };\n+}"}, {"sha": "69793162519a7b10a25c3b4a03b0222cb952b8ae", "filename": "tests/target/issue-4926/deeply_nested_struct_with_many_fields.rs", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Ftarget%2Fissue-4926%2Fdeeply_nested_struct_with_many_fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Ftarget%2Fissue-4926%2Fdeeply_nested_struct_with_many_fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-4926%2Fdeeply_nested_struct_with_many_fields.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1,54 @@\n+// rustfmt-struct_field_align_threshold: 30\n+\n+struct X {\n+    a: i32,\n+    b: i32,\n+    c: i32,\n+    d: i32,\n+    e: i32,\n+    f: i32,\n+    g: i32,\n+    h: i32,\n+    i: i32,\n+    j: i32,\n+    k: i32,\n+}\n+\n+fn test(x: X) {\n+    let d = {\n+        let e = {\n+            let f = {\n+                let g = {\n+                    let h = {\n+                        let i = {\n+                            let j = {\n+                                matches!(\n+                                    x,\n+                                    X {\n+                                        a: 1_000,\n+                                        b: 1_000,\n+                                        c: 1_000,\n+                                        d: 1_000,\n+                                        e: 1_000,\n+                                        f: 1_000,\n+                                        g: 1_000,\n+                                        h: 1_000,\n+                                        i: 1_000,\n+                                        j: 1_000,\n+                                        ..\n+                                    }\n+                                )\n+                            };\n+                            j\n+                        };\n+                        i\n+                    };\n+                    h\n+                };\n+                g\n+            };\n+            f\n+        };\n+        e\n+    };\n+}"}, {"sha": "2471df84653c94060ede65396e38935d910363cb", "filename": "tests/target/issue-4926/enum_struct_field.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Ftarget%2Fissue-4926%2Fenum_struct_field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Ftarget%2Fissue-4926%2Fenum_struct_field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-4926%2Fenum_struct_field.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1,41 @@\n+// rustfmt-struct_field_align_threshold: 30\n+// rustfmt-enum_discrim_align_threshold: 30\n+// rustfmt-imports_layout: HorizontalVertical\n+\n+#[derive(Default)]\n+struct InnerStructA {\n+    bbbbbbbbb: i32,\n+    cccccccc:  i32,\n+}\n+\n+enum SomeEnumNamedD {\n+    E(InnerStructA),\n+    F {\n+        ggggggggggggggggggggggggg: bool,\n+        h:                         bool,\n+    },\n+}\n+\n+impl SomeEnumNamedD {\n+    fn f_variant() -> Self {\n+        Self::F {\n+            ggggggggggggggggggggggggg: true,\n+            h:                         true,\n+        }\n+    }\n+}\n+\n+fn main() {\n+    let kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk = SomeEnumNamedD::f_variant();\n+    let something_we_care_about = matches!(\n+        kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk,\n+        SomeEnumNamedD::F {\n+            ggggggggggggggggggggggggg: true,\n+            ..\n+        }\n+    );\n+\n+    if something_we_care_about {\n+        println!(\"Yup it happened\");\n+    }\n+}"}, {"sha": "06e18427465c9070c9eb200dfb0cfb621cac6dfb", "filename": "tests/target/issue-4926/minimum_example.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Ftarget%2Fissue-4926%2Fminimum_example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Ftarget%2Fissue-4926%2Fminimum_example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-4926%2Fminimum_example.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1,10 @@\n+// rustfmt-struct_field_align_threshold: 30\n+\n+struct X {\n+    a: i32,\n+    b: i32,\n+}\n+\n+fn test(x: X) {\n+    let y = matches!(x, X { a: 1, .. });\n+}"}, {"sha": "ac4674ab5d5207bf74edc56e42f7e0dd17c4c18a", "filename": "tests/target/issue-4926/struct_with_long_field_names.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Ftarget%2Fissue-4926%2Fstruct_with_long_field_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Ftarget%2Fissue-4926%2Fstruct_with_long_field_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-4926%2Fstruct_with_long_field_names.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1,24 @@\n+// rustfmt-struct_field_align_threshold: 30\n+\n+struct X {\n+    really_really_long_field_a: i32,\n+    really_really_really_long_field_b: i32,\n+    really_really_really_really_long_field_c: i32,\n+    really_really_really_really_really_long_field_d: i32,\n+    really_really_really_really_really_really_long_field_e: i32,\n+    f: i32,\n+}\n+\n+fn test(x: X) {\n+    let y = matches!(\n+        x,\n+        X {\n+            really_really_long_field_a: 10,\n+            really_really_really_long_field_b: 10,\n+            really_really_really_really_long_field_c: 10,\n+            really_really_really_really_really_long_field_d: 10,\n+            really_really_really_really_really_really_long_field_e: 10,\n+            ..\n+        }\n+    );\n+}"}, {"sha": "96dfe14bf7dd1c92c1d35c60cbe0f2af3f293f62", "filename": "tests/target/issue-4926/struct_with_many_fields.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Ftarget%2Fissue-4926%2Fstruct_with_many_fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Ftarget%2Fissue-4926%2Fstruct_with_many_fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-4926%2Fstruct_with_many_fields.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1,34 @@\n+// rustfmt-struct_field_align_threshold: 30\n+\n+struct X {\n+    a: i32,\n+    b: i32,\n+    c: i32,\n+    d: i32,\n+    e: i32,\n+    f: i32,\n+    g: i32,\n+    h: i32,\n+    i: i32,\n+    j: i32,\n+    k: i32,\n+}\n+\n+fn test(x: X) {\n+    let y = matches!(\n+        x,\n+        X {\n+            a: 1_000,\n+            b: 1_000,\n+            c: 1_000,\n+            d: 1_000,\n+            e: 1_000,\n+            f: 1_000,\n+            g: 1_000,\n+            h: 1_000,\n+            i: 1_000,\n+            j: 1_000,\n+            ..\n+        }\n+    );\n+}"}, {"sha": "f0599c5d694b29df53672314d64dff63c9f225df", "filename": "tests/target/issue-4984/minimum_example.rs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Ftarget%2Fissue-4984%2Fminimum_example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Ftarget%2Fissue-4984%2Fminimum_example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-4984%2Fminimum_example.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1,2 @@\n+#[derive(/*Debug, */ Clone)]\n+struct Foo;"}, {"sha": "5fbd9784adc97c5f0841c556f5fa695c218afebb", "filename": "tests/target/issue-4984/multi_line_derive.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Ftarget%2Fissue-4984%2Fmulti_line_derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Ftarget%2Fissue-4984%2Fmulti_line_derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-4984%2Fmulti_line_derive.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1,26 @@\n+#[derive(\n+    /* ---------- Some really important comment that just had to go inside the derive --------- */\n+    Debug,\n+    Clone,\n+    Eq,\n+    PartialEq,\n+)]\n+struct Foo {\n+    a: i32,\n+    b: T,\n+}\n+\n+#[derive(\n+    /*\n+        Some really important comment that just had to go inside the derive.\n+        Also had to be put over multiple lines\n+    */\n+    Debug,\n+    Clone,\n+    Eq,\n+    PartialEq,\n+)]\n+struct Bar {\n+    a: i32,\n+    b: T,\n+}"}, {"sha": "d2924f0d0f2e2534ed8a8d85b6f49f40eaa8081c", "filename": "tests/target/issue-4984/multiple_comments_within.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Ftarget%2Fissue-4984%2Fmultiple_comments_within.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Ftarget%2Fissue-4984%2Fmultiple_comments_within.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-4984%2Fmultiple_comments_within.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1,11 @@\n+#[derive(\n+    /* ---------- Some really important comment that just had to go inside the derive --------- */\n+    Debug,\n+    Clone,\n+    /* Another comment */ Eq,\n+    PartialEq,\n+)]\n+struct Foo {\n+    a: i32,\n+    b: T,\n+}"}, {"sha": "e46ee511084fe9286191db52b46d32ce0addbeea", "filename": "tests/target/issue-4984/should_not_change.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Ftarget%2Fissue-4984%2Fshould_not_change.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Ftarget%2Fissue-4984%2Fshould_not_change.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-4984%2Fshould_not_change.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1,5 @@\n+#[derive(Clone, Debug, Eq, PartialEq)]\n+struct Foo;\n+\n+#[derive(Clone)]\n+struct Bar;"}, {"sha": "11cc645fa53561522fbe6e67bb68cdb80db5ea2b", "filename": "tests/target/issue-5005/minimum_example.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Ftarget%2Fissue-5005%2Fminimum_example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Ftarget%2Fissue-5005%2Fminimum_example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-5005%2Fminimum_example.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1,9 @@\n+#![feature(more_qualified_paths)]\n+macro_rules! show {\n+    ($ty:ty, $ex:expr) => {\n+        match $ex {\n+            <$ty>::A(_val) => println!(\"got a\"), // formatting should not remove <$ty>::\n+            <$ty>::B => println!(\"got b\"),\n+        }\n+    };\n+}"}, {"sha": "55836f4bf52c784e95c0ae5354c209e707f7b0fc", "filename": "tests/target/issue-5009/1_minimum_example.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Ftarget%2Fissue-5009%2F1_minimum_example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Ftarget%2Fissue-5009%2F1_minimum_example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-5009%2F1_minimum_example.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1,4 @@\n+fn main() {\n+    // the \"in\" inside the pattern produced invalid syntax\n+    for variable_in_here /* ... */ in 0..1 {}\n+}"}, {"sha": "d83590c6852fb47480ab7568d76e439536f0abdb", "filename": "tests/target/issue-5009/2_many_in_connectors_in_pattern.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Ftarget%2Fissue-5009%2F2_many_in_connectors_in_pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Ftarget%2Fissue-5009%2F2_many_in_connectors_in_pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-5009%2F2_many_in_connectors_in_pattern.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1,3 @@\n+fn main() {\n+    for in_in_in_in_in_in_in_in /* ... */ in 0..1 {}\n+}"}, {"sha": "9c800723939bd310e0dd982dc4f8d6f99eccada5", "filename": "tests/target/issue-5009/3_nested_for_loop_with_connector_in_pattern.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Ftarget%2Fissue-5009%2F3_nested_for_loop_with_connector_in_pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Ftarget%2Fissue-5009%2F3_nested_for_loop_with_connector_in_pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-5009%2F3_nested_for_loop_with_connector_in_pattern.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1,5 @@\n+fn main() {\n+    for variable_in_x /* ... */ in 0..1 {\n+        for variable_in_y /* ... */ in 0..1 {}\n+    }\n+}"}, {"sha": "a716d0d3082a5f8505921eda406312792c1d1bda", "filename": "tests/target/issue-5009/4_nested_for_loop_with_if_elseif_else.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Ftarget%2Fissue-5009%2F4_nested_for_loop_with_if_elseif_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Ftarget%2Fissue-5009%2F4_nested_for_loop_with_if_elseif_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-5009%2F4_nested_for_loop_with_if_elseif_else.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1,13 @@\n+fn main() {\n+    for variable_in_x /* ... */ in 0..1 {\n+        for variable_in_y /* ... */ in 0..1 {\n+            if false {\n+\n+            } else if false {\n+\n+            } else {\n+\n+            }\n+        }\n+    }\n+}"}, {"sha": "41ea46d4cb9b8fa9a108ff14262d22c2583dc9e9", "filename": "tests/target/issue-5009/5_nested_for_loop_with_connector_in_if_elseif_else.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Ftarget%2Fissue-5009%2F5_nested_for_loop_with_connector_in_if_elseif_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Ftarget%2Fissue-5009%2F5_nested_for_loop_with_connector_in_if_elseif_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-5009%2F5_nested_for_loop_with_connector_in_if_elseif_else.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1,15 @@\n+fn main() {\n+    let in_ = false;\n+\n+    for variable_in_x /* ... */ in 0..1 {\n+        for variable_in_y /* ... */ in 0..1 {\n+            if in_ {\n+\n+            } else if in_ {\n+\n+            } else {\n+\n+            }\n+        }\n+    }\n+}"}, {"sha": "789e54f7e5fb5bfe1747082f93f71c06e6d5b361", "filename": "tests/target/issue-5009/6_deeply_nested_for_loop_with_connector_in_pattern.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Ftarget%2Fissue-5009%2F6_deeply_nested_for_loop_with_connector_in_pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Ftarget%2Fissue-5009%2F6_deeply_nested_for_loop_with_connector_in_pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-5009%2F6_deeply_nested_for_loop_with_connector_in_pattern.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1,32 @@\n+fn main() {\n+    for variable_in_a /* ... */ in 0..1 {\n+        for variable_in_b /* ... */ in 0..1 {\n+            for variable_in_c /* ... */ in 0..1 {\n+                for variable_in_d /* ... */ in 0..1 {\n+                    for variable_in_e /* ... */ in 0..1 {\n+                        for variable_in_f /* ... */ in 0..1 {\n+                            for variable_in_g /* ... */ in 0..1 {\n+                                for variable_in_h /* ... */ in 0..1 {\n+                                    for variable_in_i /* ... */ in 0..1 {\n+                                        for variable_in_j /* ... */ in 0..1 {\n+                                            for variable_in_k /* ... */ in 0..1 {\n+                                                for variable_in_l /* ... */ in 0..1 {\n+                                                    for variable_in_m /* ... */ in 0..1 {\n+                                                        for variable_in_n /* ... */ in 0..1 {\n+                                                            for variable_in_o /* ... */ in 0..1 {\n+                                                            }\n+                                                        }\n+                                                    }\n+                                                }\n+                                            }\n+                                        }\n+                                    }\n+                                }\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "9ad4a1929bdbf808932b7ba835b8041cb0f9537a", "filename": "tests/target/issue-5011.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Ftarget%2Fissue-5011.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Ftarget%2Fissue-5011.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-5011.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1,8 @@\n+pub(crate) struct ASlash(\n+    // hello\n+    i32,\n+);\n+\n+pub(crate) struct AStar(/* hello */ i32);\n+\n+pub(crate) struct BStar(/* hello */ i32);"}, {"sha": "065d5395c7e73ad161d330877ec4445ed32951f6", "filename": "tests/target/issue_4031.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Ftarget%2Fissue_4031.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Ftarget%2Fissue_4031.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue_4031.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1,21 @@\n+fn foo() {\n+    with_woff2_glyf_table(\"tests/fonts/woff2/SFNT-TTF-Composite.woff2\", |glyf| {\n+        let actual = glyf\n+            .records\n+            .iter()\n+            .map(|glyph| match glyph {\n+                GlyfRecord::Parsed(\n+                    found @ Glyph {\n+                        data: GlyphData::Composite { .. },\n+                        ..\n+                    },\n+                ) => Some(found),\n+                _ => None,\n+            })\n+            .find(|candidate| candidate.is_some())\n+            .unwrap()\n+            .unwrap();\n+\n+        assert_eq!(*actual, expected)\n+    });\n+}"}, {"sha": "2e7e624ca6e6dbc343a2230874a778eb09041404", "filename": "tests/target/issue_4032.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Ftarget%2Fissue_4032.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Ftarget%2Fissue_4032.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue_4032.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1,18 @@\n+fn a1(\n+    #[aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa]\n+    a: u8,\n+) {\n+}\n+fn b1(\n+    #[aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa]\n+    bb: u8,\n+) {\n+}\n+fn a2(\n+    #[aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa] a: u8,\n+) {\n+}\n+fn b2(\n+    #[aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa] bb: u8,\n+) {\n+}"}, {"sha": "4a58c3946e12dae2c3ac6c441c60bc5c9b8b6f1f", "filename": "tests/target/issue_4110.rs", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Ftarget%2Fissue_4110.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Ftarget%2Fissue_4110.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue_4110.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1,55 @@\n+fn bindings() {\n+    let err = match (place_desc, explanation) {\n+        (\n+            Some(ref name),\n+            BorrowExplanation::MustBeValidFor {\n+                category:\n+                    category @ (ConstraintCategory::Return\n+                    | ConstraintCategory::CallArgument\n+                    | ConstraintCategory::OpaqueType),\n+                from_closure: false,\n+                ref region_name,\n+                span,\n+                ..\n+            },\n+        ) if borrow_spans.for_generator() | borrow_spans.for_closure() => self\n+            .report_escaping_closure_capture(\n+                borrow_spans,\n+                borrow_span,\n+                region_name,\n+                category,\n+                span,\n+                &format!(\"`{}`\", name),\n+            ),\n+        (\n+            ref name,\n+            BorrowExplanation::MustBeValidFor {\n+                category: ConstraintCategory::Assignment,\n+                from_closure: false,\n+                region_name:\n+                    RegionName {\n+                        source: RegionNameSource::AnonRegionFromUpvar(upvar_span, ref upvar_name),\n+                        ..\n+                    },\n+                span,\n+                ..\n+            },\n+        ) => self.report_escaping_data(borrow_span, name, upvar_span, upvar_name, span),\n+        (Some(name), explanation) => self.report_local_value_does_not_live_long_enough(\n+            location,\n+            &name,\n+            &borrow,\n+            drop_span,\n+            borrow_spans,\n+            explanation,\n+        ),\n+        (None, explanation) => self.report_temporary_value_does_not_live_long_enough(\n+            location,\n+            &borrow,\n+            drop_span,\n+            borrow_spans,\n+            proper_span,\n+            explanation,\n+        ),\n+    };\n+}"}, {"sha": "1ebaaf2b6001814bc4bc7c9f2d16b3e440b81a66", "filename": "tests/target/issue_4257.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Ftarget%2Fissue_4257.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Ftarget%2Fissue_4257.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue_4257.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1,18 @@\n+#![feature(generic_associated_types)]\n+#![allow(incomplete_features)]\n+\n+trait Trait<T> {\n+    type Type<'a>\n+    where\n+        T: 'a;\n+    fn foo(x: &T) -> Self::Type<'_>;\n+}\n+impl<T> Trait<T> for () {\n+    type Type<'a>\n+    where\n+        T: 'a,\n+    = &'a T;\n+    fn foo(x: &T) -> Self::Type<'_> {\n+        x\n+    }\n+}"}, {"sha": "0ec0547119f474c35e88f9b49a6a4a685278f429", "filename": "tests/target/issue_4322.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Ftarget%2Fissue_4322.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Ftarget%2Fissue_4322.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue_4322.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1,5 @@\n+trait Bar {\n+    type X<'a>\n+    where\n+        Self: 'a;\n+}"}, {"sha": "7b0a5f3a62e49085e9377f957045134f38f17be1", "filename": "tests/target/issue_4579.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Ftarget%2Fissue_4579.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Ftarget%2Fissue_4579.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue_4579.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1,16 @@\n+// rustfmt-hard_tabs: true\n+\n+#[macro_export]\n+macro_rules! main {\n+\t() => {\n+\t\t#[spirv(fragment)]\n+\t\tpub fn main_fs(\n+\t\t\tmut out_color: ::spirv_std::storage_class::Output<Vec4>,\n+\t\t\t#[spirv(descriptor_set = 1)]\n+\t\t\tiChannelResolution: ::spirv_std::storage_class::UniformConstant<\n+\t\t\t\t[::spirv_std::glam::Vec3A; 4],\n+\t\t\t>,\n+\t\t) {\n+\t\t}\n+\t};\n+}"}, {"sha": "890a62267ce6456a015eab74bb5d27bbb5675a7f", "filename": "tests/target/issue_4911.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Ftarget%2Fissue_4911.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Ftarget%2Fissue_4911.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue_4911.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1,9 @@\n+#![feature(generic_associated_types)]\n+#![feature(min_type_alias_impl_trait)]\n+\n+impl SomeTrait for SomeType {\n+    type SomeGAT<'a>\n+    where\n+        Self: 'a,\n+    = impl SomeOtherTrait;\n+}"}, {"sha": "c19e505fd03ad6b5c145f0aca15b8f6c3ce867a1", "filename": "tests/target/issue_4936.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Ftarget%2Fissue_4936.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Ftarget%2Fissue_4936.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue_4936.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1,10 @@\n+#[discard_params_doc]\n+trait Trait {\n+    fn foo(\n+        &self,\n+        /// some docs\n+        bar: String,\n+        /// another docs\n+        baz: i32,\n+    );\n+}"}, {"sha": "318f7ebed6e064ada327a9791caa7e106bf89109", "filename": "tests/target/issue_4943.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Ftarget%2Fissue_4943.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Ftarget%2Fissue_4943.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue_4943.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1,10 @@\n+#![feature(generic_associated_types)]\n+\n+impl SomeStruct {\n+    fn process<T>(v: T) -> <Self as GAT>::R<T>\n+    where\n+        Self: GAT<R<T> = T>,\n+    {\n+        SomeStruct::do_something(v)\n+    }\n+}"}, {"sha": "aa5e79befe9c875275db0ff8371af863db428cef", "filename": "tests/target/issue_4954.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Ftarget%2Fissue_4954.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Ftarget%2Fissue_4954.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue_4954.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1,7 @@\n+trait Foo {\n+    type Arg<'a>;\n+}\n+\n+struct Bar<T>(T)\n+where\n+    for<'a> T: Foo<Arg<'a> = ()>;"}, {"sha": "0c3c13579c13b0f2024bd40df149feded89ba4cd", "filename": "tests/target/issue_4963.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Ftarget%2Fissue_4963.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Ftarget%2Fissue_4963.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue_4963.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1,9 @@\n+mod test {\n+    extern \"C\" {\n+        fn test();\n+    }\n+}\n+\n+extern \"C\" {\n+    fn test();\n+}"}, {"sha": "5ab433a2e6cf65d8fff85bbbf19a136e7b181e51", "filename": "tests/target/match-block-trailing-comma.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Ftarget%2Fmatch-block-trailing-comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Ftarget%2Fmatch-block-trailing-comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmatch-block-trailing-comma.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -8,6 +8,16 @@ fn foo() {\n             \"line1\";\n             \"line2\"\n         },\n+        ThisIsA::Guard if true => {\n+            \"line1\";\n+            \"line2\"\n+        },\n+        ThisIsA::ReallyLongPattern(ThatWillForce::TheGuard, ToWrapOnto::TheFollowingLine)\n+            if true =>\n+        {\n+            \"line1\";\n+            \"line2\"\n+        },\n         b => (\n             aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,\n             bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb,"}, {"sha": "7f067991b267b6e905ccdc23299b78b59ccd8552", "filename": "tests/target/trait.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Ftarget%2Ftrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/tests%2Ftarget%2Ftrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ftrait.rs?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -211,3 +211,10 @@ where\n         + DDDDDDDD\n         + DDDDDDDDD\n         + EEEEEEE;\n+\n+trait Visible {\n+    pub const C: i32;\n+    pub type T;\n+    pub fn f();\n+    pub fn g() {}\n+}"}, {"sha": "fa0824ac53c0a9c130636512c0271fc3f0e9c0e6", "filename": "triagebot.toml", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/923126348d012e8a81527de84ccb1cb1d9fde75c/triagebot.toml", "raw_url": "https://github.com/rust-lang/rust/raw/923126348d012e8a81527de84ccb1cb1d9fde75c/triagebot.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/triagebot.toml?ref=923126348d012e8a81527de84ccb1cb1d9fde75c", "patch": "@@ -0,0 +1 @@\n+[assign]"}]}