{"sha": "9c2489be0c27954a0afeb053e3997bb82cfb3d95", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljMjQ4OWJlMGMyNzk1NGEwYWZlYjA1M2UzOTk3YmI4MmNmYjNkOTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-11-01T23:22:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-11-01T23:22:22Z"}, "message": "Auto merge of #29507 - fhartwig:result-expect, r=Manishearth\n\nThis fixes part of #29506\r\nThese instances of `ok().expect()` have no benefit over using `Result`'s `expect` directly.", "tree": {"sha": "5ecc47547cd18ead219ce7eb4d920eecf5b81655", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ecc47547cd18ead219ce7eb4d920eecf5b81655"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c2489be0c27954a0afeb053e3997bb82cfb3d95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c2489be0c27954a0afeb053e3997bb82cfb3d95", "html_url": "https://github.com/rust-lang/rust/commit/9c2489be0c27954a0afeb053e3997bb82cfb3d95", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c2489be0c27954a0afeb053e3997bb82cfb3d95/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6307719a12b4924cf90ece46fa1abc69def4280e", "url": "https://api.github.com/repos/rust-lang/rust/commits/6307719a12b4924cf90ece46fa1abc69def4280e", "html_url": "https://github.com/rust-lang/rust/commit/6307719a12b4924cf90ece46fa1abc69def4280e"}, {"sha": "4168e026b41e27f471709529bf29a80f6c602adb", "url": "https://api.github.com/repos/rust-lang/rust/commits/4168e026b41e27f471709529bf29a80f6c602adb", "html_url": "https://github.com/rust-lang/rust/commit/4168e026b41e27f471709529bf29a80f6c602adb"}], "stats": {"total": 11, "additions": 5, "deletions": 6}, "files": [{"sha": "746733a60be89a43da657ef35aff1a356c4b48c6", "filename": "src/doc/trpl/traits.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9c2489be0c27954a0afeb053e3997bb82cfb3d95/src%2Fdoc%2Ftrpl%2Ftraits.md", "raw_url": "https://github.com/rust-lang/rust/raw/9c2489be0c27954a0afeb053e3997bb82cfb3d95/src%2Fdoc%2Ftrpl%2Ftraits.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Ftraits.md?ref=9c2489be0c27954a0afeb053e3997bb82cfb3d95", "patch": "@@ -247,7 +247,7 @@ won\u2019t have its methods:\n [write]: ../std/io/trait.Write.html\n \n ```rust,ignore\n-let mut f = std::fs::File::open(\"foo.txt\").ok().expect(\"Couldn\u2019t open foo.txt\");\n+let mut f = std::fs::File::open(\"foo.txt\").expect(\"Couldn\u2019t open foo.txt\");\n let buf = b\"whatever\"; // byte string literal. buf: &[u8; 8]\n let result = f.write(buf);\n # result.unwrap(); // ignore the error\n@@ -266,7 +266,7 @@ We need to `use` the `Write` trait first:\n ```rust,ignore\n use std::io::Write;\n \n-let mut f = std::fs::File::open(\"foo.txt\").ok().expect(\"Couldn\u2019t open foo.txt\");\n+let mut f = std::fs::File::open(\"foo.txt\").expect(\"Couldn\u2019t open foo.txt\");\n let buf = b\"whatever\";\n let result = f.write(buf);\n # result.unwrap(); // ignore the error"}, {"sha": "ee3bfacd731c31bddb207bd9e0bcb9848eb2317f", "filename": "src/libcore/result.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9c2489be0c27954a0afeb053e3997bb82cfb3d95/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c2489be0c27954a0afeb053e3997bb82cfb3d95/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=9c2489be0c27954a0afeb053e3997bb82cfb3d95", "patch": "@@ -117,16 +117,15 @@\n //! warning (by default, controlled by the `unused_must_use` lint).\n //!\n //! You might instead, if you don't want to handle the error, simply\n-//! panic, by converting to an `Option` with `ok`, then asserting\n-//! success with `expect`. This will panic if the write fails, proving\n-//! a marginally useful message indicating why:\n+//! assert success with `expect`. This will panic if the\n+//! write fails, providing a marginally useful message indicating why:\n //!\n //! ```{.no_run}\n //! use std::fs::File;\n //! use std::io::prelude::*;\n //!\n //! let mut file = File::create(\"valuable_data.txt\").unwrap();\n-//! file.write_all(b\"important message\").ok().expect(\"failed to write message\");\n+//! file.write_all(b\"important message\").expect(\"failed to write message\");\n //! ```\n //!\n //! You might also simply assert success:"}]}