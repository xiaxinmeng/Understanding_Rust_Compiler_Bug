{"sha": "d7f47f280ec267c0583f7d38fc149a2351b923e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3ZjQ3ZjI4MGVjMjY3YzA1ODNmN2QzOGZjMTQ5YTIzNTFiOTIzZTY=", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-05-26T21:39:39Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-05-26T21:53:13Z"}, "message": "Use break api config for wrong_pub_self_convention", "tree": {"sha": "bd0fb99ecd8d10cfe15d5ccbd6bf1636ef6a072c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd0fb99ecd8d10cfe15d5ccbd6bf1636ef6a072c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7f47f280ec267c0583f7d38fc149a2351b923e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7f47f280ec267c0583f7d38fc149a2351b923e6", "html_url": "https://github.com/rust-lang/rust/commit/d7f47f280ec267c0583f7d38fc149a2351b923e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7f47f280ec267c0583f7d38fc149a2351b923e6/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e2021bbda7ce7b7095b79f07fe6a408a6cd8f07", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e2021bbda7ce7b7095b79f07fe6a408a6cd8f07", "html_url": "https://github.com/rust-lang/rust/commit/2e2021bbda7ce7b7095b79f07fe6a408a6cd8f07"}], "stats": {"total": 135, "additions": 55, "deletions": 80}, "files": [{"sha": "dd780ff87fe6edab04099e02f18f6626b757effd", "filename": "clippy_lints/src/deprecated_lints.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d7f47f280ec267c0583f7d38fc149a2351b923e6/clippy_lints%2Fsrc%2Fdeprecated_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7f47f280ec267c0583f7d38fc149a2351b923e6/clippy_lints%2Fsrc%2Fdeprecated_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdeprecated_lints.rs?ref=d7f47f280ec267c0583f7d38fc149a2351b923e6", "patch": "@@ -141,3 +141,12 @@ declare_deprecated_lint! {\n     pub FILTER_MAP,\n     \"this lint has been replaced by `manual_filter_map`, a more specific lint\"\n }\n+\n+declare_deprecated_lint! {\n+    /// **What it does:** Nothing. This lint has been deprecated.\n+    ///\n+    /// **Deprecation reason:** The `avoid_breaking_exported_api` config option was added, which\n+    /// enables the `wrong_self_conversion` lint for public items.\n+    pub WRONG_PUB_SELF_CONVENTION,\n+    \"set the `avoid_breaking_exported_api` config option to `false` to enable the `wrong_self_convention` lint for public items\"\n+}"}, {"sha": "6dd2486afae71da80075ae24afc80296f0339ea5", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d7f47f280ec267c0583f7d38fc149a2351b923e6/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7f47f280ec267c0583f7d38fc149a2351b923e6/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=d7f47f280ec267c0583f7d38fc149a2351b923e6", "patch": "@@ -505,6 +505,10 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         \"clippy::filter_map\",\n         \"this lint has been replaced by `manual_filter_map`, a more specific lint\",\n     );\n+    store.register_removed(\n+        \"clippy::wrong_pub_self_convention\",\n+        \"set the `avoid_breaking_exported_api` config option to `false` to enable the `wrong_self_convention` lint for public items\",\n+    );\n     // end deprecated lints, do not remove this comment, it\u2019s used in `update_lints`\n \n     // begin register lints, do not remove this comment, it\u2019s used in `update_lints`\n@@ -802,7 +806,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         methods::UNNECESSARY_LAZY_EVALUATIONS,\n         methods::UNWRAP_USED,\n         methods::USELESS_ASREF,\n-        methods::WRONG_PUB_SELF_CONVENTION,\n         methods::WRONG_SELF_CONVENTION,\n         methods::ZST_OFFSET,\n         minmax::MIN_MAX,\n@@ -1026,7 +1029,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(methods::FILETYPE_IS_FILE),\n         LintId::of(methods::GET_UNWRAP),\n         LintId::of(methods::UNWRAP_USED),\n-        LintId::of(methods::WRONG_PUB_SELF_CONVENTION),\n         LintId::of(misc::FLOAT_CMP_CONST),\n         LintId::of(misc_early::UNNEEDED_FIELD_PATTERN),\n         LintId::of(missing_doc::MISSING_DOCS_IN_PRIVATE_ITEMS),\n@@ -1862,7 +1864,8 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         })\n     });\n \n-    store.register_late_pass(move || box methods::Methods::new(msrv));\n+    let avoid_breaking_exported_api = conf.avoid_breaking_exported_api;\n+    store.register_late_pass(move || box methods::Methods::new(avoid_breaking_exported_api, msrv));\n     store.register_late_pass(move || box matches::Matches::new(msrv));\n     store.register_early_pass(move || box manual_non_exhaustive::ManualNonExhaustive::new(msrv));\n     store.register_late_pass(move || box manual_strip::ManualStrip::new(msrv));"}, {"sha": "0b998dbf86c9ff413ac7297725f0c79d03fe4e0c", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 10, "deletions": 30, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/d7f47f280ec267c0583f7d38fc149a2351b923e6/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7f47f280ec267c0583f7d38fc149a2351b923e6/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=d7f47f280ec267c0583f7d38fc149a2351b923e6", "patch": "@@ -282,30 +282,6 @@ declare_clippy_lint! {\n     \"defining a method named with an established prefix (like \\\"into_\\\") that takes `self` with the wrong convention\"\n }\n \n-declare_clippy_lint! {\n-    /// **What it does:** This is the same as\n-    /// [`wrong_self_convention`](#wrong_self_convention), but for public items.\n-    ///\n-    /// **Why is this bad?** See [`wrong_self_convention`](#wrong_self_convention).\n-    ///\n-    /// **Known problems:** Actually *renaming* the function may break clients if\n-    /// the function is part of the public interface. In that case, be mindful of\n-    /// the stability guarantees you've given your users.\n-    ///\n-    /// **Example:**\n-    /// ```rust\n-    /// # struct X;\n-    /// impl<'a> X {\n-    ///     pub fn as_str(self) -> &'a str {\n-    ///         \"foo\"\n-    ///     }\n-    /// }\n-    /// ```\n-    pub WRONG_PUB_SELF_CONVENTION,\n-    restriction,\n-    \"defining a public method named with an established prefix (like \\\"into_\\\") that takes `self` with the wrong convention\"\n-}\n-\n declare_clippy_lint! {\n     /// **What it does:** Checks for usage of `ok().expect(..)`.\n     ///\n@@ -1658,13 +1634,17 @@ declare_clippy_lint! {\n }\n \n pub struct Methods {\n+    avoid_breaking_exported_api: bool,\n     msrv: Option<RustcVersion>,\n }\n \n impl Methods {\n     #[must_use]\n-    pub fn new(msrv: Option<RustcVersion>) -> Self {\n-        Self { msrv }\n+    pub fn new(avoid_breaking_exported_api: bool, msrv: Option<RustcVersion>) -> Self {\n+        Self {\n+            avoid_breaking_exported_api,\n+            msrv,\n+        }\n     }\n }\n \n@@ -1673,7 +1653,6 @@ impl_lint_pass!(Methods => [\n     EXPECT_USED,\n     SHOULD_IMPLEMENT_TRAIT,\n     WRONG_SELF_CONVENTION,\n-    WRONG_PUB_SELF_CONVENTION,\n     OK_EXPECT,\n     MAP_UNWRAP_OR,\n     RESULT_MAP_OR_INTO_OPTION,\n@@ -1838,11 +1817,13 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n                     }\n                 }\n \n-                if sig.decl.implicit_self.has_implicit_self() {\n+                if sig.decl.implicit_self.has_implicit_self()\n+                    && !(self.avoid_breaking_exported_api\n+                        && cx.access_levels.is_exported(impl_item.hir_id()))\n+                {\n                     wrong_self_convention::check(\n                         cx,\n                         &name,\n-                        item.vis.node.is_pub(),\n                         self_ty,\n                         first_arg_ty,\n                         first_arg.pat.span,\n@@ -1915,7 +1896,6 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n                 wrong_self_convention::check(\n                     cx,\n                     &item.ident.name.as_str(),\n-                    false,\n                     self_ty,\n                     first_arg_ty,\n                     first_arg_span,"}, {"sha": "a2e09e5ecec1f3334766d163236dfac3b1a01524", "filename": "clippy_lints/src/methods/wrong_self_convention.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d7f47f280ec267c0583f7d38fc149a2351b923e6/clippy_lints%2Fsrc%2Fmethods%2Fwrong_self_convention.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7f47f280ec267c0583f7d38fc149a2351b923e6/clippy_lints%2Fsrc%2Fmethods%2Fwrong_self_convention.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fwrong_self_convention.rs?ref=d7f47f280ec267c0583f7d38fc149a2351b923e6", "patch": "@@ -6,7 +6,6 @@ use rustc_middle::ty::TyS;\n use rustc_span::source_map::Span;\n use std::fmt;\n \n-use super::WRONG_PUB_SELF_CONVENTION;\n use super::WRONG_SELF_CONVENTION;\n \n #[rustfmt::skip]\n@@ -21,9 +20,9 @@ const CONVENTIONS: [(&[Convention], &[SelfKind]); 9] = [\n \n     // Conversion using `to_` can use borrowed (non-Copy types) or owned (Copy types).\n     // Source: https://rust-lang.github.io/api-guidelines/naming.html#ad-hoc-conversions-follow-as_-to_-into_-conventions-c-conv\n-    (&[Convention::StartsWith(\"to_\"), Convention::NotEndsWith(\"_mut\"), Convention::IsSelfTypeCopy(false), \n+    (&[Convention::StartsWith(\"to_\"), Convention::NotEndsWith(\"_mut\"), Convention::IsSelfTypeCopy(false),\n     Convention::IsTraitItem(false), Convention::ImplementsTrait(false)], &[SelfKind::Ref]),\n-    (&[Convention::StartsWith(\"to_\"), Convention::NotEndsWith(\"_mut\"), Convention::IsSelfTypeCopy(true), \n+    (&[Convention::StartsWith(\"to_\"), Convention::NotEndsWith(\"_mut\"), Convention::IsSelfTypeCopy(true),\n     Convention::IsTraitItem(false), Convention::ImplementsTrait(false)], &[SelfKind::Value]),\n ];\n \n@@ -85,18 +84,12 @@ impl fmt::Display for Convention {\n pub(super) fn check<'tcx>(\n     cx: &LateContext<'tcx>,\n     item_name: &str,\n-    is_pub: bool,\n     self_ty: &'tcx TyS<'tcx>,\n     first_arg_ty: &'tcx TyS<'tcx>,\n     first_arg_span: Span,\n     implements_trait: bool,\n     is_trait_item: bool,\n ) {\n-    let lint = if is_pub {\n-        WRONG_PUB_SELF_CONVENTION\n-    } else {\n-        WRONG_SELF_CONVENTION\n-    };\n     if let Some((conventions, self_kinds)) = &CONVENTIONS.iter().find(|(convs, _)| {\n         convs\n             .iter()\n@@ -142,7 +135,7 @@ pub(super) fn check<'tcx>(\n \n             span_lint_and_help(\n                 cx,\n-                lint,\n+                WRONG_SELF_CONVENTION,\n                 first_arg_span,\n                 &format!(\n                     \"{} usually take {}\","}, {"sha": "cba7666c2d8a7c9b8039fe08c7a0f429f49420d2", "filename": "tests/ui/def_id_nocore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7f47f280ec267c0583f7d38fc149a2351b923e6/tests%2Fui%2Fdef_id_nocore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7f47f280ec267c0583f7d38fc149a2351b923e6/tests%2Fui%2Fdef_id_nocore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdef_id_nocore.rs?ref=d7f47f280ec267c0583f7d38fc149a2351b923e6", "patch": "@@ -20,7 +20,7 @@ fn start(_argc: isize, _argv: *const *const u8) -> isize {\n     0\n }\n \n-pub struct A;\n+struct A;\n \n impl A {\n     pub fn as_ref(self) -> &'static str {"}, {"sha": "f5908cb5701fbe9a3e62a1779951aad18baf6af6", "filename": "tests/ui/module_name_repetitions.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d7f47f280ec267c0583f7d38fc149a2351b923e6/tests%2Fui%2Fmodule_name_repetitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7f47f280ec267c0583f7d38fc149a2351b923e6/tests%2Fui%2Fmodule_name_repetitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmodule_name_repetitions.rs?ref=d7f47f280ec267c0583f7d38fc149a2351b923e6", "patch": "@@ -15,12 +15,4 @@ mod foo {\n     pub struct Foobar;\n }\n \n-#[cfg(test)]\n-mod test {\n-    #[test]\n-    fn it_works() {\n-        assert_eq!(2 + 2, 4);\n-    }\n-}\n-\n fn main() {}"}, {"sha": "151dd0c27d57dbab4f7b4e98f485eb3993e10b3b", "filename": "tests/ui/wrong_self_convention.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d7f47f280ec267c0583f7d38fc149a2351b923e6/tests%2Fui%2Fwrong_self_convention.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7f47f280ec267c0583f7d38fc149a2351b923e6/tests%2Fui%2Fwrong_self_convention.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwrong_self_convention.rs?ref=d7f47f280ec267c0583f7d38fc149a2351b923e6", "patch": "@@ -1,6 +1,5 @@\n // edition:2018\n #![warn(clippy::wrong_self_convention)]\n-#![warn(clippy::wrong_pub_self_convention)]\n #![allow(dead_code)]\n \n fn main() {}"}, {"sha": "ce23317abf651f59f66ca971aeb15e1520355cfa", "filename": "tests/ui/wrong_self_convention.stderr", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/d7f47f280ec267c0583f7d38fc149a2351b923e6/tests%2Fui%2Fwrong_self_convention.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d7f47f280ec267c0583f7d38fc149a2351b923e6/tests%2Fui%2Fwrong_self_convention.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwrong_self_convention.stderr?ref=d7f47f280ec267c0583f7d38fc149a2351b923e6", "patch": "@@ -1,5 +1,5 @@\n error: methods called `from_*` usually take no `self`\n-  --> $DIR/wrong_self_convention.rs:18:17\n+  --> $DIR/wrong_self_convention.rs:17:17\n    |\n LL |     fn from_i32(self) {}\n    |                 ^^^^\n@@ -8,183 +8,183 @@ LL |     fn from_i32(self) {}\n    = help: consider choosing a less ambiguous name\n \n error: methods called `from_*` usually take no `self`\n-  --> $DIR/wrong_self_convention.rs:24:21\n+  --> $DIR/wrong_self_convention.rs:23:21\n    |\n LL |     pub fn from_i64(self) {}\n    |                     ^^^^\n    |\n    = help: consider choosing a less ambiguous name\n \n error: methods called `as_*` usually take `self` by reference or `self` by mutable reference\n-  --> $DIR/wrong_self_convention.rs:36:15\n+  --> $DIR/wrong_self_convention.rs:35:15\n    |\n LL |     fn as_i32(self) {}\n    |               ^^^^\n    |\n    = help: consider choosing a less ambiguous name\n \n error: methods called `into_*` usually take `self` by value\n-  --> $DIR/wrong_self_convention.rs:38:17\n+  --> $DIR/wrong_self_convention.rs:37:17\n    |\n LL |     fn into_i32(&self) {}\n    |                 ^^^^^\n    |\n    = help: consider choosing a less ambiguous name\n \n error: methods called `is_*` usually take `self` by reference or no `self`\n-  --> $DIR/wrong_self_convention.rs:40:15\n+  --> $DIR/wrong_self_convention.rs:39:15\n    |\n LL |     fn is_i32(self) {}\n    |               ^^^^\n    |\n    = help: consider choosing a less ambiguous name\n \n error: methods with the following characteristics: (`to_*` and `self` type is not `Copy`) usually take `self` by reference\n-  --> $DIR/wrong_self_convention.rs:42:15\n+  --> $DIR/wrong_self_convention.rs:41:15\n    |\n LL |     fn to_i32(self) {}\n    |               ^^^^\n    |\n    = help: consider choosing a less ambiguous name\n \n error: methods called `from_*` usually take no `self`\n-  --> $DIR/wrong_self_convention.rs:44:17\n+  --> $DIR/wrong_self_convention.rs:43:17\n    |\n LL |     fn from_i32(self) {}\n    |                 ^^^^\n    |\n    = help: consider choosing a less ambiguous name\n \n error: methods called `as_*` usually take `self` by reference or `self` by mutable reference\n-  --> $DIR/wrong_self_convention.rs:46:19\n+  --> $DIR/wrong_self_convention.rs:45:19\n    |\n LL |     pub fn as_i64(self) {}\n    |                   ^^^^\n    |\n    = help: consider choosing a less ambiguous name\n \n error: methods called `into_*` usually take `self` by value\n-  --> $DIR/wrong_self_convention.rs:47:21\n+  --> $DIR/wrong_self_convention.rs:46:21\n    |\n LL |     pub fn into_i64(&self) {}\n    |                     ^^^^^\n    |\n    = help: consider choosing a less ambiguous name\n \n error: methods called `is_*` usually take `self` by reference or no `self`\n-  --> $DIR/wrong_self_convention.rs:48:19\n+  --> $DIR/wrong_self_convention.rs:47:19\n    |\n LL |     pub fn is_i64(self) {}\n    |                   ^^^^\n    |\n    = help: consider choosing a less ambiguous name\n \n error: methods with the following characteristics: (`to_*` and `self` type is not `Copy`) usually take `self` by reference\n-  --> $DIR/wrong_self_convention.rs:49:19\n+  --> $DIR/wrong_self_convention.rs:48:19\n    |\n LL |     pub fn to_i64(self) {}\n    |                   ^^^^\n    |\n    = help: consider choosing a less ambiguous name\n \n error: methods called `from_*` usually take no `self`\n-  --> $DIR/wrong_self_convention.rs:50:21\n+  --> $DIR/wrong_self_convention.rs:49:21\n    |\n LL |     pub fn from_i64(self) {}\n    |                     ^^^^\n    |\n    = help: consider choosing a less ambiguous name\n \n error: methods called `as_*` usually take `self` by reference or `self` by mutable reference\n-  --> $DIR/wrong_self_convention.rs:95:19\n+  --> $DIR/wrong_self_convention.rs:94:19\n    |\n LL |         fn as_i32(self) {}\n    |                   ^^^^\n    |\n    = help: consider choosing a less ambiguous name\n \n error: methods called `into_*` usually take `self` by value\n-  --> $DIR/wrong_self_convention.rs:98:25\n+  --> $DIR/wrong_self_convention.rs:97:25\n    |\n LL |         fn into_i32_ref(&self) {}\n    |                         ^^^^^\n    |\n    = help: consider choosing a less ambiguous name\n \n error: methods called `is_*` usually take `self` by reference or no `self`\n-  --> $DIR/wrong_self_convention.rs:100:19\n+  --> $DIR/wrong_self_convention.rs:99:19\n    |\n LL |         fn is_i32(self) {}\n    |                   ^^^^\n    |\n    = help: consider choosing a less ambiguous name\n \n error: methods called `from_*` usually take no `self`\n-  --> $DIR/wrong_self_convention.rs:104:21\n+  --> $DIR/wrong_self_convention.rs:103:21\n    |\n LL |         fn from_i32(self) {}\n    |                     ^^^^\n    |\n    = help: consider choosing a less ambiguous name\n \n error: methods called `as_*` usually take `self` by reference or `self` by mutable reference\n-  --> $DIR/wrong_self_convention.rs:119:19\n+  --> $DIR/wrong_self_convention.rs:118:19\n    |\n LL |         fn as_i32(self);\n    |                   ^^^^\n    |\n    = help: consider choosing a less ambiguous name\n \n error: methods called `into_*` usually take `self` by value\n-  --> $DIR/wrong_self_convention.rs:122:25\n+  --> $DIR/wrong_self_convention.rs:121:25\n    |\n LL |         fn into_i32_ref(&self);\n    |                         ^^^^^\n    |\n    = help: consider choosing a less ambiguous name\n \n error: methods called `is_*` usually take `self` by reference or no `self`\n-  --> $DIR/wrong_self_convention.rs:124:19\n+  --> $DIR/wrong_self_convention.rs:123:19\n    |\n LL |         fn is_i32(self);\n    |                   ^^^^\n    |\n    = help: consider choosing a less ambiguous name\n \n error: methods called `from_*` usually take no `self`\n-  --> $DIR/wrong_self_convention.rs:128:21\n+  --> $DIR/wrong_self_convention.rs:127:21\n    |\n LL |         fn from_i32(self);\n    |                     ^^^^\n    |\n    = help: consider choosing a less ambiguous name\n \n error: methods called `into_*` usually take `self` by value\n-  --> $DIR/wrong_self_convention.rs:146:25\n+  --> $DIR/wrong_self_convention.rs:145:25\n    |\n LL |         fn into_i32_ref(&self);\n    |                         ^^^^^\n    |\n    = help: consider choosing a less ambiguous name\n \n error: methods called `from_*` usually take no `self`\n-  --> $DIR/wrong_self_convention.rs:152:21\n+  --> $DIR/wrong_self_convention.rs:151:21\n    |\n LL |         fn from_i32(self);\n    |                     ^^^^\n    |\n    = help: consider choosing a less ambiguous name\n \n error: methods with the following characteristics: (`to_*` and `self` type is `Copy`) usually take `self` by value\n-  --> $DIR/wrong_self_convention.rs:176:22\n+  --> $DIR/wrong_self_convention.rs:175:22\n    |\n LL |         fn to_u64_v2(&self) -> u64 {\n    |                      ^^^^^\n    |\n    = help: consider choosing a less ambiguous name\n \n error: methods with the following characteristics: (`to_*` and `self` type is not `Copy`) usually take `self` by reference\n-  --> $DIR/wrong_self_convention.rs:185:19\n+  --> $DIR/wrong_self_convention.rs:184:19\n    |\n LL |         fn to_u64(self) -> u64 {\n    |                   ^^^^"}, {"sha": "501bc1e6a85cbae27b04ebc7234644d4bbc12f0d", "filename": "tests/ui/wrong_self_convention2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d7f47f280ec267c0583f7d38fc149a2351b923e6/tests%2Fui%2Fwrong_self_convention2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7f47f280ec267c0583f7d38fc149a2351b923e6/tests%2Fui%2Fwrong_self_convention2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwrong_self_convention2.rs?ref=d7f47f280ec267c0583f7d38fc149a2351b923e6", "patch": "@@ -1,6 +1,5 @@\n // edition:2018\n #![warn(clippy::wrong_self_convention)]\n-#![warn(clippy::wrong_pub_self_convention)]\n #![allow(dead_code)]\n \n fn main() {}"}, {"sha": "0e0d066d656b56a174ff00a9190927ca16abbf70", "filename": "tests/ui/wrong_self_convention2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7f47f280ec267c0583f7d38fc149a2351b923e6/tests%2Fui%2Fwrong_self_convention2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d7f47f280ec267c0583f7d38fc149a2351b923e6/tests%2Fui%2Fwrong_self_convention2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwrong_self_convention2.stderr?ref=d7f47f280ec267c0583f7d38fc149a2351b923e6", "patch": "@@ -1,5 +1,5 @@\n error: methods called `from_*` usually take no `self`\n-  --> $DIR/wrong_self_convention2.rs:56:29\n+  --> $DIR/wrong_self_convention2.rs:55:29\n    |\n LL |         pub fn from_be_self(self) -> Self {\n    |                             ^^^^\n@@ -8,7 +8,7 @@ LL |         pub fn from_be_self(self) -> Self {\n    = help: consider choosing a less ambiguous name\n \n error: methods called `from_*` usually take no `self`\n-  --> $DIR/wrong_self_convention2.rs:65:25\n+  --> $DIR/wrong_self_convention2.rs:64:25\n    |\n LL |         fn from_be_self(self) -> Self;\n    |                         ^^^^"}]}