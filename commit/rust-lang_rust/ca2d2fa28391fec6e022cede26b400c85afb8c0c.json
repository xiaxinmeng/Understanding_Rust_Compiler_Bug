{"sha": "ca2d2fa28391fec6e022cede26b400c85afb8c0c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhMmQyZmEyODM5MWZlYzZlMDIyY2VkZTI2YjQwMGM4NWFmYjhjMGM=", "commit": {"author": {"name": "The8472", "email": "git@infinite-source.de", "date": "2021-09-16T22:24:36Z"}, "committer": {"name": "The8472", "email": "git@infinite-source.de", "date": "2021-09-16T22:24:36Z"}, "message": "Don't inline OnceCell initialization closures", "tree": {"sha": "532473844ac7fe6788b202ec0c30d74bca08c6a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/532473844ac7fe6788b202ec0c30d74bca08c6a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca2d2fa28391fec6e022cede26b400c85afb8c0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca2d2fa28391fec6e022cede26b400c85afb8c0c", "html_url": "https://github.com/rust-lang/rust/commit/ca2d2fa28391fec6e022cede26b400c85afb8c0c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca2d2fa28391fec6e022cede26b400c85afb8c0c/comments", "author": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "committer": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "237bb5e0088782945d2c3146e4907e3a5e9c7c2c", "url": "https://api.github.com/repos/rust-lang/rust/commits/237bb5e0088782945d2c3146e4907e3a5e9c7c2c", "html_url": "https://github.com/rust-lang/rust/commit/237bb5e0088782945d2c3146e4907e3a5e9c7c2c"}], "stats": {"total": 11, "additions": 10, "deletions": 1}, "files": [{"sha": "e6bea462fa99a8a56441474eba5efb4aa0ee91fc", "filename": "library/core/src/lazy.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ca2d2fa28391fec6e022cede26b400c85afb8c0c/library%2Fcore%2Fsrc%2Flazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca2d2fa28391fec6e022cede26b400c85afb8c0c/library%2Fcore%2Fsrc%2Flazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flazy.rs?ref=ca2d2fa28391fec6e022cede26b400c85afb8c0c", "patch": "@@ -214,7 +214,16 @@ impl<T> OnceCell<T> {\n         if let Some(val) = self.get() {\n             return Ok(val);\n         }\n-        let val = f()?;\n+        /// Avoid inlining the initialization closure into the common path that fetches\n+        /// the already initialized value\n+        #[cold]\n+        fn outlined_call<F, T, E>(f: F) -> Result<T, E>\n+        where\n+            F: FnOnce() -> Result<T, E>,\n+        {\n+            f()\n+        }\n+        let val = outlined_call(f)?;\n         // Note that *some* forms of reentrant initialization might lead to\n         // UB (see `reentrant_init` test). I believe that just removing this\n         // `assert`, while keeping `set/get` would be sound, but it seems"}]}