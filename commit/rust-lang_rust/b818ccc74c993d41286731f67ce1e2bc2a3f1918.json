{"sha": "b818ccc74c993d41286731f67ce1e2bc2a3f1918", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4MThjY2M3NGM5OTNkNDEyODY3MzFmNjdjZTFlMmJjMmEzZjE5MTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-05T21:39:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-05T21:39:00Z"}, "message": "Auto merge of #69746 - Dylan-DPC:rollup-wr6dvdk, r=Dylan-DPC\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #69697 (Add explanation for E0380)\n - #69698 (Use associated constants of integer types)\n - #69711 (Update macros.rs: fix documentation typo.)\n - #69713 (more clippy cleanups)\n - #69728 (Make link to `std::str` active)\n - #69732 (Clean E0382 and E0384 explanations)\n - #69736 (even more clippy cleanups)\n - #69742 (Fixed a typo)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "6743244ae1971d5aeab96ba3f6e27eb395787de4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6743244ae1971d5aeab96ba3f6e27eb395787de4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b818ccc74c993d41286731f67ce1e2bc2a3f1918", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b818ccc74c993d41286731f67ce1e2bc2a3f1918", "html_url": "https://github.com/rust-lang/rust/commit/b818ccc74c993d41286731f67ce1e2bc2a3f1918", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b818ccc74c993d41286731f67ce1e2bc2a3f1918/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96bb8b31c81dc2394317f2f083c3acf8087efea1", "url": "https://api.github.com/repos/rust-lang/rust/commits/96bb8b31c81dc2394317f2f083c3acf8087efea1", "html_url": "https://github.com/rust-lang/rust/commit/96bb8b31c81dc2394317f2f083c3acf8087efea1"}, {"sha": "80c843431d54a4afb7ec92ceaa37cf4faa0a0653", "url": "https://api.github.com/repos/rust-lang/rust/commits/80c843431d54a4afb7ec92ceaa37cf4faa0a0653", "html_url": "https://github.com/rust-lang/rust/commit/80c843431d54a4afb7ec92ceaa37cf4faa0a0653"}], "stats": {"total": 257, "additions": 128, "deletions": 129}, "files": [{"sha": "c95f79472fe57818b5021c82d7155a0953d2abf5", "filename": "src/liballoc/string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Fliballoc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Fliballoc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstring.rs?ref=b818ccc74c993d41286731f67ce1e2bc2a3f1918", "patch": "@@ -407,7 +407,7 @@ impl String {\n     ///\n     /// assert_eq!(s.capacity(), cap);\n     ///\n-    /// // ...but this may make the vector reallocate\n+    /// // ...but this may make the string reallocate\n     /// s.push('a');\n     /// ```\n     #[inline]"}, {"sha": "6ad0e68a88f3bfe2a914295827633c4a896d7ffc", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=b818ccc74c993d41286731f67ce1e2bc2a3f1918", "patch": "@@ -2,7 +2,9 @@\n \n //! String manipulation.\n //!\n-//! For more details, see the `std::str` module.\n+//! For more details, see the [`std::str`] module.\n+//!\n+//! [`std::str`]: ../../std/str/index.html\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}, {"sha": "d5cde7034116c2053d41746adee0368a499e9fcb", "filename": "src/librustc/dep_graph/graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fgraph.rs?ref=b818ccc74c993d41286731f67ce1e2bc2a3f1918", "patch": "@@ -524,7 +524,7 @@ impl DepGraph {\n             edge_list_indices.push((start, end));\n         }\n \n-        debug_assert!(edge_list_data.len() <= ::std::u32::MAX as usize);\n+        debug_assert!(edge_list_data.len() <= u32::MAX as usize);\n         debug_assert_eq!(edge_list_data.len(), total_edge_count);\n \n         SerializedDepGraph { nodes, fingerprints, edge_list_indices, edge_list_data }"}, {"sha": "c8d35db0adeb2e11dbdb5d28cfb28b4cb8bb0899", "filename": "src/librustc/mir/interpret/allocation.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs?ref=b818ccc74c993d41286731f67ce1e2bc2a3f1918", "patch": "@@ -818,9 +818,9 @@ impl UndefMask {\n             // First set all bits except the first `bita`,\n             // then unset the last `64 - bitb` bits.\n             let range = if bitb == 0 {\n-                u64::max_value() << bita\n+                u64::MAX << bita\n             } else {\n-                (u64::max_value() << bita) & (u64::max_value() >> (64 - bitb))\n+                (u64::MAX << bita) & (u64::MAX >> (64 - bitb))\n             };\n             if new_state {\n                 self.blocks[blocka] |= range;\n@@ -832,21 +832,21 @@ impl UndefMask {\n         // across block boundaries\n         if new_state {\n             // Set `bita..64` to `1`.\n-            self.blocks[blocka] |= u64::max_value() << bita;\n+            self.blocks[blocka] |= u64::MAX << bita;\n             // Set `0..bitb` to `1`.\n             if bitb != 0 {\n-                self.blocks[blockb] |= u64::max_value() >> (64 - bitb);\n+                self.blocks[blockb] |= u64::MAX >> (64 - bitb);\n             }\n             // Fill in all the other blocks (much faster than one bit at a time).\n             for block in (blocka + 1)..blockb {\n-                self.blocks[block] = u64::max_value();\n+                self.blocks[block] = u64::MAX;\n             }\n         } else {\n             // Set `bita..64` to `0`.\n-            self.blocks[blocka] &= !(u64::max_value() << bita);\n+            self.blocks[blocka] &= !(u64::MAX << bita);\n             // Set `0..bitb` to `0`.\n             if bitb != 0 {\n-                self.blocks[blockb] &= !(u64::max_value() >> (64 - bitb));\n+                self.blocks[blockb] &= !(u64::MAX >> (64 - bitb));\n             }\n             // Fill in all the other blocks (much faster than one bit at a time).\n             for block in (blocka + 1)..blockb {"}, {"sha": "cc3c50b7899f3646f12dfc893e231aab49fdd03a", "filename": "src/librustc/mir/interpret/pointer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustc%2Fmir%2Finterpret%2Fpointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustc%2Fmir%2Finterpret%2Fpointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fpointer.rs?ref=b818ccc74c993d41286731f67ce1e2bc2a3f1918", "patch": "@@ -78,9 +78,9 @@ pub trait PointerArithmetic: layout::HasDataLayout {\n     fn overflowing_signed_offset(&self, val: u64, i: i128) -> (u64, bool) {\n         // FIXME: is it possible to over/underflow here?\n         if i < 0 {\n-            // Trickery to ensure that `i64::min_value()` works fine: compute `n = -i`.\n+            // Trickery to ensure that `i64::MIN` works fine: compute `n = -i`.\n             // This formula only works for true negative values; it overflows for zero!\n-            let n = u64::max_value() - (i as u64) + 1;\n+            let n = u64::MAX - (i as u64) + 1;\n             let res = val.overflowing_sub(n);\n             self.truncate_to_ptr(res)\n         } else {"}, {"sha": "51718592fd9db50df36707574ec0bf550f4da0fe", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=b818ccc74c993d41286731f67ce1e2bc2a3f1918", "patch": "@@ -1198,7 +1198,7 @@ impl<'tcx> TerminatorKind<'tcx> {\n         t: BasicBlock,\n         f: BasicBlock,\n     ) -> TerminatorKind<'tcx> {\n-        static BOOL_SWITCH_FALSE: &'static [u128] = &[0];\n+        static BOOL_SWITCH_FALSE: &[u128] = &[0];\n         TerminatorKind::SwitchInt {\n             discr: cond,\n             switch_ty: tcx.types.bool,"}, {"sha": "63d7124ee91f9d1f06a6e9e788c5194dcfc097db", "filename": "src/librustc/traits/structural_impls.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs?ref=b818ccc74c993d41286731f67ce1e2bc2a3f1918", "patch": "@@ -415,9 +415,9 @@ impl<'a, 'tcx> Lift<'tcx> for traits::ObligationCauseCode<'a> {\n             super::ReferenceOutlivesReferent(ty) => {\n                 tcx.lift(&ty).map(super::ReferenceOutlivesReferent)\n             }\n-            super::ObjectTypeBound(ty, r) => tcx\n-                .lift(&ty)\n-                .and_then(|ty| tcx.lift(&r).and_then(|r| Some(super::ObjectTypeBound(ty, r)))),\n+            super::ObjectTypeBound(ty, r) => {\n+                tcx.lift(&ty).and_then(|ty| tcx.lift(&r).map(|r| super::ObjectTypeBound(ty, r)))\n+            }\n             super::ObjectCastObligation(ty) => tcx.lift(&ty).map(super::ObjectCastObligation),\n             super::Coercion { source, target } => {\n                 Some(super::Coercion { source: tcx.lift(&source)?, target: tcx.lift(&target)? })"}, {"sha": "7a5a417919d509f9a2def41e762452db1c6f1a8d", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=b818ccc74c993d41286731f67ce1e2bc2a3f1918", "patch": "@@ -7,7 +7,6 @@ use rustc_span::DUMMY_SP;\n \n use std::cmp;\n use std::fmt;\n-use std::i128;\n use std::iter;\n use std::mem;\n use std::ops::Bound;\n@@ -1001,7 +1000,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                     }\n                 }\n \n-                let (mut min, mut max) = (i128::max_value(), i128::min_value());\n+                let (mut min, mut max) = (i128::MAX, i128::MIN);\n                 let discr_type = def.repr.discr_type();\n                 let bits = Integer::from_attr(self, discr_type).size().bits();\n                 for (i, discr) in def.discriminants(tcx) {\n@@ -1021,7 +1020,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                     }\n                 }\n                 // We might have no inhabited variants, so pretend there's at least one.\n-                if (min, max) == (i128::max_value(), i128::min_value()) {\n+                if (min, max) == (i128::MAX, i128::MIN) {\n                     min = 0;\n                     max = 0;\n                 }"}, {"sha": "4829955cb70c411ff4d3d183e48a2489ab92ec33", "filename": "src/librustc/ty/print/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs?ref=b818ccc74c993d41286731f67ce1e2bc2a3f1918", "patch": "@@ -920,7 +920,7 @@ pub trait PrettyPrinter<'tcx>:\n             }\n             (ConstValue::Scalar(Scalar::Raw { data, .. }), ty::Uint(ui)) => {\n                 let bit_size = Integer::from_attr(&self.tcx(), UnsignedInt(*ui)).size();\n-                let max = truncate(u128::max_value(), bit_size);\n+                let max = truncate(u128::MAX, bit_size);\n \n                 let ui_str = ui.name_str();\n                 if data == max {"}, {"sha": "5e36e4df698edf00228b9edef27c67c995ec5b5a", "filename": "src/librustc/ty/query/on_disk_cache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=b818ccc74c993d41286731f67ce1e2bc2a3f1918", "patch": "@@ -92,7 +92,7 @@ struct AbsoluteBytePos(u32);\n \n impl AbsoluteBytePos {\n     fn new(pos: usize) -> AbsoluteBytePos {\n-        debug_assert!(pos <= ::std::u32::MAX as usize);\n+        debug_assert!(pos <= u32::MAX as usize);\n         AbsoluteBytePos(pos as u32)\n     }\n "}, {"sha": "62d2b4ae2039768479b2e57ee793002121ecc77a", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=b818ccc74c993d41286731f67ce1e2bc2a3f1918", "patch": "@@ -50,11 +50,11 @@ fn signed_min(size: Size) -> i128 {\n }\n \n fn signed_max(size: Size) -> i128 {\n-    i128::max_value() >> (128 - size.bits())\n+    i128::MAX >> (128 - size.bits())\n }\n \n fn unsigned_max(size: Size) -> u128 {\n-    u128::max_value() >> (128 - size.bits())\n+    u128::MAX >> (128 - size.bits())\n }\n \n fn int_size_and_signed<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> (Size, bool) {\n@@ -77,7 +77,7 @@ impl<'tcx> Discr<'tcx> {\n             let min = signed_min(size);\n             let max = signed_max(size);\n             let val = sign_extend(self.val, size) as i128;\n-            assert!(n < (i128::max_value() as u128));\n+            assert!(n < (i128::MAX as u128));\n             let n = n as i128;\n             let oflo = val > max - n;\n             let val = if oflo { min + (n - (max - val) - 1) } else { val + n };"}, {"sha": "d6b8b8cafb79cb64d2294563a2f3ef3aff7d731b", "filename": "src/librustc_builtin_macros/format.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustc_builtin_macros%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustc_builtin_macros%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fformat.rs?ref=b818ccc74c993d41286731f67ce1e2bc2a3f1918", "patch": "@@ -284,7 +284,7 @@ impl<'a, 'b> Context<'a, 'b> {\n                                 err.tool_only_span_suggestion(\n                                     sp,\n                                     &format!(\"use the `{}` trait\", name),\n-                                    fmt.to_string(),\n+                                    (*fmt).to_string(),\n                                     Applicability::MaybeIncorrect,\n                                 );\n                             }\n@@ -476,7 +476,7 @@ impl<'a, 'b> Context<'a, 'b> {\n                 match ty {\n                     Placeholder(_) => {\n                         // record every (position, type) combination only once\n-                        let ref mut seen_ty = self.arg_unique_types[arg];\n+                        let seen_ty = &mut self.arg_unique_types[arg];\n                         let i = seen_ty.iter().position(|x| *x == ty).unwrap_or_else(|| {\n                             let i = seen_ty.len();\n                             seen_ty.push(ty);\n@@ -526,7 +526,7 @@ impl<'a, 'b> Context<'a, 'b> {\n \n         // Map the arguments\n         for i in 0..args_len {\n-            let ref arg_types = self.arg_types[i];\n+            let arg_types = &self.arg_types[i];\n             let arg_offsets = arg_types.iter().map(|offset| sofar + *offset).collect::<Vec<_>>();\n             self.arg_index_map.push(arg_offsets);\n             sofar += self.arg_unique_types[i].len();\n@@ -597,7 +597,7 @@ impl<'a, 'b> Context<'a, 'b> {\n                             let arg_idx = match arg_index_consumed.get_mut(i) {\n                                 None => 0, // error already emitted elsewhere\n                                 Some(offset) => {\n-                                    let ref idx_map = self.arg_index_map[i];\n+                                    let idx_map = &self.arg_index_map[i];\n                                     // unwrap_or branch: error already emitted elsewhere\n                                     let arg_idx = *idx_map.get(*offset).unwrap_or(&0);\n                                     *offset += 1;\n@@ -721,7 +721,7 @@ impl<'a, 'b> Context<'a, 'b> {\n             let name = names_pos[i];\n             let span = self.ecx.with_def_site_ctxt(e.span);\n             pats.push(self.ecx.pat_ident(span, name));\n-            for ref arg_ty in self.arg_unique_types[i].iter() {\n+            for arg_ty in self.arg_unique_types[i].iter() {\n                 locals.push(Context::format_arg(self.ecx, self.macsp, e.span, arg_ty, name));\n             }\n             heads.push(self.ecx.expr_addr_of(e.span, e));"}, {"sha": "5d16be3206aaafe8ae22a116110156e69168c73f", "filename": "src/librustc_builtin_macros/global_allocator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustc_builtin_macros%2Fglobal_allocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustc_builtin_macros%2Fglobal_allocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fglobal_allocator.rs?ref=b818ccc74c993d41286731f67ce1e2bc2a3f1918", "patch": "@@ -57,12 +57,12 @@ impl AllocFnFactory<'_, '_> {\n     fn allocator_fn(&self, method: &AllocatorMethod) -> Stmt {\n         let mut abi_args = Vec::new();\n         let mut i = 0;\n-        let ref mut mk = || {\n+        let mut mk = || {\n             let name = self.cx.ident_of(&format!(\"arg{}\", i), self.span);\n             i += 1;\n             name\n         };\n-        let args = method.inputs.iter().map(|ty| self.arg_ty(ty, &mut abi_args, mk)).collect();\n+        let args = method.inputs.iter().map(|ty| self.arg_ty(ty, &mut abi_args, &mut mk)).collect();\n         let result = self.call_allocator(method.name, args);\n         let (output_ty, output_expr) = self.ret_ty(&method.output, result);\n         let decl = self.cx.fn_decl(abi_args, ast::FnRetTy::Ty(output_ty));"}, {"sha": "bc194a3eec4c34684cb085d89307c97662ffae9f", "filename": "src/librustc_builtin_macros/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustc_builtin_macros%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustc_builtin_macros%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Ftest.rs?ref=b818ccc74c993d41286731f67ce1e2bc2a3f1918", "patch": "@@ -313,7 +313,7 @@ fn should_fail(i: &ast::Item) -> bool {\n fn should_panic(cx: &ExtCtxt<'_>, i: &ast::Item) -> ShouldPanic {\n     match attr::find_by_name(&i.attrs, sym::should_panic) {\n         Some(attr) => {\n-            let ref sd = cx.parse_sess.span_diagnostic;\n+            let sd = &cx.parse_sess.span_diagnostic;\n \n             match attr.meta_item_list() {\n                 // Handle #[should_panic(expected = \"foo\")]\n@@ -378,7 +378,7 @@ fn test_type(cx: &ExtCtxt<'_>) -> TestType {\n \n fn has_test_signature(cx: &ExtCtxt<'_>, i: &ast::Item) -> bool {\n     let has_should_panic_attr = attr::contains_name(&i.attrs, sym::should_panic);\n-    let ref sd = cx.parse_sess.span_diagnostic;\n+    let sd = &cx.parse_sess.span_diagnostic;\n     if let ast::ItemKind::Fn(_, ref sig, ref generics, _) = i.kind {\n         if let ast::Unsafe::Yes(span) = sig.header.unsafety {\n             sd.struct_span_err(i.span, \"unsafe functions cannot be used for tests\")"}, {"sha": "e7e1ad8eda78477293b878b6e20792a7b412e032", "filename": "src/librustc_builtin_macros/test_harness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustc_builtin_macros%2Ftest_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustc_builtin_macros%2Ftest_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Ftest_harness.rs?ref=b818ccc74c993d41286731f67ce1e2bc2a3f1918", "patch": "@@ -326,7 +326,7 @@ fn mk_main(cx: &mut TestCtxt<'_>) -> P<ast::Item> {\n /// &[&test1, &test2]\n fn mk_tests_slice(cx: &TestCtxt<'_>, sp: Span) -> P<ast::Expr> {\n     debug!(\"building test vector from {} tests\", cx.test_cases.len());\n-    let ref ecx = cx.ext_cx;\n+    let ecx = &cx.ext_cx;\n \n     ecx.expr_vec_slice(\n         sp,"}, {"sha": "c8f0fe8c7239558ea75b30eb47a3b6a1f2a0bed3", "filename": "src/librustc_codegen_llvm/asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustc_codegen_llvm%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustc_codegen_llvm%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fasm.rs?ref=b818ccc74c993d41286731f67ce1e2bc2a3f1918", "patch": "@@ -60,7 +60,7 @@ impl AsmBuilderMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n             .chain(ia.inputs.iter().map(|s| s.to_string()))\n             .chain(ext_constraints)\n             .chain(clobbers)\n-            .chain(arch_clobbers.iter().map(|s| s.to_string()))\n+            .chain(arch_clobbers.iter().map(|s| (*s).to_string()))\n             .collect::<Vec<String>>()\n             .join(\",\");\n "}, {"sha": "0c243128104e789fb447af1be383e317ec22ee18", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=b818ccc74c993d41286731f67ce1e2bc2a3f1918", "patch": "@@ -725,7 +725,7 @@ pub(crate) unsafe fn codegen(\n                         Err(_) => return 0,\n                     };\n \n-                    if let Err(_) = write!(cursor, \"{:#}\", demangled) {\n+                    if write!(cursor, \"{:#}\", demangled).is_err() {\n                         // Possible only if provided buffer is not big enough\n                         return 0;\n                     }"}, {"sha": "3466363ac797227b4febe21cf5099e958e5718d9", "filename": "src/librustc_codegen_llvm/context.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcontext.rs?ref=b818ccc74c993d41286731f67ce1e2bc2a3f1918", "patch": "@@ -174,7 +174,6 @@ pub unsafe fn create_module(\n \n         let llvm_data_layout = llvm::LLVMGetDataLayout(llmod);\n         let llvm_data_layout = str::from_utf8(CStr::from_ptr(llvm_data_layout).to_bytes())\n-            .ok()\n             .expect(\"got a non-UTF8 data-layout from LLVM\");\n \n         // Unfortunately LLVM target specs change over time, and right now we"}, {"sha": "b313bf57d4a9a016a4f108a4b8d9d1d9a978b9c7", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=b818ccc74c993d41286731f67ce1e2bc2a3f1918", "patch": "@@ -1257,7 +1257,7 @@ fn start_executing_work<B: ExtraBackendMethods>(\n                 if main_thread_worker_state == MainThreadWorkerState::Idle {\n                     if !queue_full_enough(work_items.len(), running, max_workers) {\n                         // The queue is not full enough, codegen more items:\n-                        if let Err(_) = codegen_worker_send.send(Message::CodegenItem) {\n+                        if codegen_worker_send.send(Message::CodegenItem).is_err() {\n                             panic!(\"Could not send Message::CodegenItem to main thread\")\n                         }\n                         main_thread_worker_state = MainThreadWorkerState::Codegenning;"}, {"sha": "638f0c8ecc65f3260be6e80ab5c2eb30ea8e9e97", "filename": "src/librustc_error_codes/error_codes/E0380.md", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustc_error_codes%2Ferror_codes%2FE0380.md", "raw_url": "https://github.com/rust-lang/rust/raw/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustc_error_codes%2Ferror_codes%2FE0380.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0380.md?ref=b818ccc74c993d41286731f67ce1e2bc2a3f1918", "patch": "@@ -1,4 +1,14 @@\n-Auto traits cannot have methods or associated items.\n-For more information see the [opt-in builtin traits RFC][RFC 19].\n+An auto trait was declared with a method or an associated item.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0380\n+unsafe auto trait Trait {\n+    type Output; // error!\n+}\n+```\n+\n+Auto traits cannot have methods or associated items. For more information see\n+the [opt-in builtin traits RFC][RFC 19].\n \n [RFC 19]: https://github.com/rust-lang/rfcs/blob/master/text/0019-opt-in-builtin-traits.md"}, {"sha": "d1408a062963023e02a351e3797e34e9b912f6f5", "filename": "src/librustc_error_codes/error_codes/E0382.md", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustc_error_codes%2Ferror_codes%2FE0382.md", "raw_url": "https://github.com/rust-lang/rust/raw/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustc_error_codes%2Ferror_codes%2FE0382.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0382.md?ref=b818ccc74c993d41286731f67ce1e2bc2a3f1918", "patch": "@@ -1,5 +1,4 @@\n-This error occurs when an attempt is made to use a variable after its contents\n-have been moved elsewhere.\n+A variable was used after its contents have been moved elsewhere.\n \n Erroneous code example:\n "}, {"sha": "e21fac0797cb98e25aaa2cf71bd6485ed0e8c8d6", "filename": "src/librustc_error_codes/error_codes/E0384.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustc_error_codes%2Ferror_codes%2FE0384.md", "raw_url": "https://github.com/rust-lang/rust/raw/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustc_error_codes%2Ferror_codes%2FE0384.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0384.md?ref=b818ccc74c993d41286731f67ce1e2bc2a3f1918", "patch": "@@ -1,4 +1,4 @@\n-This error occurs when an attempt is made to reassign an immutable variable.\n+An immutable variable was reassigned.\n \n Erroneous code example:\n "}, {"sha": "f0e388a597b408ff554449d657ecc0c20e70bbb9", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=b818ccc74c993d41286731f67ce1e2bc2a3f1918", "patch": "@@ -163,7 +163,7 @@ impl CodeSuggestion {\n                         None => buf.push_str(&line[lo..]),\n                     }\n                 }\n-                if let None = hi_opt {\n+                if hi_opt.is_none() {\n                     buf.push('\\n');\n                 }\n             }"}, {"sha": "32700c6500bc86619a05fd1d09a546c7d64c6885", "filename": "src/librustc_errors/registry.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustc_errors%2Fregistry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustc_errors%2Fregistry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fregistry.rs?ref=b818ccc74c993d41286731f67ce1e2bc2a3f1918", "patch": "@@ -27,6 +27,6 @@ impl Registry {\n         if !self.long_descriptions.contains_key(code) {\n             return Err(InvalidErrorCode);\n         }\n-        Ok(self.long_descriptions.get(code).unwrap().clone())\n+        Ok(*self.long_descriptions.get(code).unwrap())\n     }\n }"}, {"sha": "e212dc81070ac7dc8c1c9cba7f7bb53a537e32b8", "filename": "src/librustc_incremental/persist/dirty_clean.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs?ref=b818ccc74c993d41286731f67ce1e2bc2a3f1918", "patch": "@@ -343,7 +343,8 @@ impl DirtyCleanVisitor<'tcx> {\n                 &format!(\"clean/dirty auto-assertions not yet defined for {:?}\", node),\n             ),\n         };\n-        let labels = Labels::from_iter(labels.iter().flat_map(|s| s.iter().map(|l| l.to_string())));\n+        let labels =\n+            Labels::from_iter(labels.iter().flat_map(|s| s.iter().map(|l| (*l).to_string())));\n         (name, labels)\n     }\n "}, {"sha": "3166fe065769786fcc6cb238237fde1dd8c5b717", "filename": "src/librustc_infer/traits/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustc_infer%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustc_infer%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Fauto_trait.rs?ref=b818ccc74c993d41286731f67ce1e2bc2a3f1918", "patch": "@@ -150,7 +150,7 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n             // SelectionContext to return it back to us.\n \n             let (new_env, user_env) = match self.evaluate_predicates(\n-                &mut infcx,\n+                &infcx,\n                 trait_did,\n                 ty,\n                 orig_env,"}, {"sha": "fd94e3b69940c8d2c587b3e60cf31abdd3eb4c5c", "filename": "src/librustc_infer/traits/select.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustc_infer%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustc_infer%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Fselect.rs?ref=b818ccc74c993d41286731f67ce1e2bc2a3f1918", "patch": "@@ -1341,7 +1341,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         stack: &TraitObligationStack<'o, 'tcx>,\n     ) -> Result<SelectionCandidateSet<'tcx>, SelectionError<'tcx>> {\n         let TraitObligationStack { obligation, .. } = *stack;\n-        let ref obligation = Obligation {\n+        let obligation = &Obligation {\n             param_env: obligation.param_env,\n             cause: obligation.cause.clone(),\n             recursion_depth: obligation.recursion_depth,"}, {"sha": "7866ddbd4ccd85e8bf3642d05c24ab0e1952bc9e", "filename": "src/librustc_interface/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustc_interface%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustc_interface%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Futil.rs?ref=b818ccc74c993d41286731f67ce1e2bc2a3f1918", "patch": "@@ -426,7 +426,7 @@ pub(crate) fn check_attr_crate_type(attrs: &[ast::Attribute], lint_buffer: &mut\n     for a in attrs.iter() {\n         if a.check_name(sym::crate_type) {\n             if let Some(n) = a.value_str() {\n-                if let Some(_) = categorize_crate_type(n) {\n+                if categorize_crate_type(n).is_some() {\n                     return;\n                 }\n "}, {"sha": "5b7b73b48ec5bc7cfc31743d67432c0b3819df36", "filename": "src/librustc_lint/context.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustc_lint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustc_lint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fcontext.rs?ref=b818ccc74c993d41286731f67ce1e2bc2a3f1918", "patch": "@@ -335,7 +335,7 @@ impl LintStore {\n             lint_name.to_string()\n         };\n         // If the lint was scoped with `tool::` check if the tool lint exists\n-        if let Some(_) = tool_name {\n+        if tool_name.is_some() {\n             match self.by_name.get(&complete_name) {\n                 None => match self.lint_groups.get(&*complete_name) {\n                     None => return CheckLintNameResult::Tool(Err((None, String::new()))),\n@@ -369,7 +369,7 @@ impl LintStore {\n                         return if *silent {\n                             CheckLintNameResult::Ok(&lint_ids)\n                         } else {\n-                            CheckLintNameResult::Tool(Err((Some(&lint_ids), name.to_string())))\n+                            CheckLintNameResult::Tool(Err((Some(&lint_ids), (*name).to_string())))\n                         };\n                     }\n                     CheckLintNameResult::Ok(&lint_ids)\n@@ -404,7 +404,7 @@ impl LintStore {\n                         return if *silent {\n                             CheckLintNameResult::Tool(Err((Some(&lint_ids), complete_name)))\n                         } else {\n-                            CheckLintNameResult::Tool(Err((Some(&lint_ids), name.to_string())))\n+                            CheckLintNameResult::Tool(Err((Some(&lint_ids), (*name).to_string())))\n                         };\n                     }\n                     CheckLintNameResult::Tool(Err((Some(&lint_ids), complete_name)))"}, {"sha": "652de6c7b6fdf0d6abef7dd2064b3addec1b9c22", "filename": "src/librustc_mir/borrow_check/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=b818ccc74c993d41286731f67ce1e2bc2a3f1918", "patch": "@@ -1905,7 +1905,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             // expressions evaluate through `as_temp` or `into` a return\n             // slot or local, so to find all unsized rvalues it is enough\n             // to check all temps, return slots and locals.\n-            if let None = self.reported_errors.replace((ty, span)) {\n+            if self.reported_errors.replace((ty, span)).is_none() {\n                 let mut diag = struct_span_err!(\n                     self.tcx().sess,\n                     span,"}, {"sha": "b0f048ff1a6fdbd0da04c0d29638088b27ba356b", "filename": "src/librustc_mir/borrow_check/type_check/relate_tys.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Frelate_tys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Frelate_tys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Frelate_tys.rs?ref=b818ccc74c993d41286731f67ce1e2bc2a3f1918", "patch": "@@ -64,7 +64,7 @@ impl TypeRelatingDelegate<'tcx> for NllTypeRelatingDelegate<'_, '_, 'tcx> {\n     }\n \n     fn next_existential_region_var(&mut self, from_forall: bool) -> ty::Region<'tcx> {\n-        if let Some(_) = &mut self.borrowck_context {\n+        if self.borrowck_context.is_some() {\n             let origin = NLLRegionVariableOrigin::Existential { from_forall };\n             self.infcx.next_nll_region_var(origin)\n         } else {"}, {"sha": "f8e1d3e9fe8c6c20076fcf744f3bf48febd7e505", "filename": "src/librustc_mir/dataflow/generic/graphviz.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustc_mir%2Fdataflow%2Fgeneric%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustc_mir%2Fdataflow%2Fgeneric%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fgeneric%2Fgraphviz.rs?ref=b818ccc74c993d41286731f67ce1e2bc2a3f1918", "patch": "@@ -604,8 +604,8 @@ fn write_diff<A: Analysis<'tcx>>(\n     Ok(())\n }\n \n-const BR_LEFT: &'static str = r#\"<br align=\"left\"/>\"#;\n-const BR_LEFT_SPACE: &'static str = r#\"<br align=\"left\"/> \"#;\n+const BR_LEFT: &str = r#\"<br align=\"left\"/>\"#;\n+const BR_LEFT_SPACE: &str = r#\"<br align=\"left\"/> \"#;\n \n /// Line break policy that breaks at 40 characters and starts the next line with a single space.\n const LIMIT_30_ALIGN_1: Option<LineBreak> = Some(LineBreak { sequence: BR_LEFT_SPACE, limit: 30 });"}, {"sha": "6e1513bcd1dd0beb042e6d673cb0f0e9c49c9a12", "filename": "src/librustc_mir/dataflow/generic/visitor.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustc_mir%2Fdataflow%2Fgeneric%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustc_mir%2Fdataflow%2Fgeneric%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fgeneric%2Fvisitor.rs?ref=b818ccc74c993d41286731f67ce1e2bc2a3f1918", "patch": "@@ -22,20 +22,20 @@ pub fn visit_results<F>(\n             let loc = Location { block, statement_index };\n \n             results.reconstruct_before_statement_effect(&mut state, stmt, loc);\n-            vis.visit_statement(&mut state, stmt, loc);\n+            vis.visit_statement(&state, stmt, loc);\n \n             results.reconstruct_statement_effect(&mut state, stmt, loc);\n-            vis.visit_statement_exit(&mut state, stmt, loc);\n+            vis.visit_statement_exit(&state, stmt, loc);\n         }\n \n         let loc = body.terminator_loc(block);\n         let term = block_data.terminator();\n \n         results.reconstruct_before_terminator_effect(&mut state, term, loc);\n-        vis.visit_terminator(&mut state, term, loc);\n+        vis.visit_terminator(&state, term, loc);\n \n         results.reconstruct_terminator_effect(&mut state, term, loc);\n-        vis.visit_terminator_exit(&mut state, term, loc);\n+        vis.visit_terminator_exit(&state, term, loc);\n     }\n }\n "}, {"sha": "b4e33b9502e690d1964a7e68cd34e829cdeb68e4", "filename": "src/librustc_mir/dataflow/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs?ref=b818ccc74c993d41286731f67ce1e2bc2a3f1918", "patch": "@@ -16,7 +16,6 @@ use std::borrow::Borrow;\n use std::fmt;\n use std::io;\n use std::path::PathBuf;\n-use std::usize;\n \n pub use self::at_location::{FlowAtLocation, FlowsAtLocation};\n pub(crate) use self::drop_flag_effects::*;"}, {"sha": "891afbf437f2be000de5f7d6908a46de93af395f", "filename": "src/librustc_mir/interpret/intrinsics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs?ref=b818ccc74c993d41286731f67ce1e2bc2a3f1918", "patch": "@@ -203,7 +203,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                         if is_add {\n                             // max unsigned\n                             Scalar::from_uint(\n-                                u128::max_value() >> (128 - num_bits),\n+                                u128::MAX >> (128 - num_bits),\n                                 Size::from_bits(num_bits),\n                             )\n                         } else {\n@@ -381,11 +381,11 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         dest: PlaceTy<'tcx, M::PointerTag>,\n     ) -> InterpResult<'tcx> {\n         // Performs an exact division, resulting in undefined behavior where\n-        // `x % y != 0` or `y == 0` or `x == T::min_value() && y == -1`.\n+        // `x % y != 0` or `y == 0` or `x == T::MIN && y == -1`.\n         // First, check x % y != 0 (or if that computation overflows).\n         let (res, overflow, _ty) = self.overflowing_binary_op(BinOp::Rem, a, b)?;\n         if overflow || res.assert_bits(a.layout.size) != 0 {\n-            // Then, check if `b` is -1, which is the \"min_value / -1\" case.\n+            // Then, check if `b` is -1, which is the \"MIN / -1\" case.\n             let minus1 = Scalar::from_int(-1, dest.layout.size);\n             let b_scalar = b.to_scalar().unwrap();\n             if b_scalar == minus1 {"}, {"sha": "3c4a1857f9690e80fb69c60c4a91e33aa540e2be", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=b818ccc74c993d41286731f67ce1e2bc2a3f1918", "patch": "@@ -565,7 +565,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n \n         // # Function pointers\n         // (both global from `alloc_map` and local from `extra_fn_ptr_map`)\n-        if let Some(_) = self.get_fn_alloc(id) {\n+        if self.get_fn_alloc(id).is_some() {\n             return if let AllocCheck::Dereferenceable = liveness {\n                 // The caller requested no function pointers.\n                 throw_unsup!(DerefFunctionPointer)"}, {"sha": "ea8378574a3e0cc9613543c2395a969c6f82d65f", "filename": "src/librustc_mir/interpret/terminator.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs?ref=b818ccc74c993d41286731f67ce1e2bc2a3f1918", "patch": "@@ -311,9 +311,8 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                         // taking into account the `spread_arg`.  If we could write\n                         // this is a single iterator (that handles `spread_arg`), then\n                         // `pass_argument` would be the loop body. It takes care to\n-                        // not advance `caller_iter` for ZSTs.\n-                        let mut locals_iter = body.args_iter();\n-                        while let Some(local) = locals_iter.next() {\n+                        // not advance `caller_iter` for ZSTs\n+                        for local in body.args_iter() {\n                             let dest = self.eval_place(&mir::Place::from(local))?;\n                             if Some(local) == body.spread_arg {\n                                 // Must be a tuple"}, {"sha": "4f99bfe8a852af7ca2806c6853381fd8a609d828", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=b818ccc74c993d41286731f67ce1e2bc2a3f1918", "patch": "@@ -463,7 +463,7 @@ impl<'rt, 'mir, 'tcx, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, 'tcx, M\n         let (lo, hi) = valid_range.clone().into_inner();\n         // Determine the allowed range\n         // `max_hi` is as big as the size fits\n-        let max_hi = u128::max_value() >> (128 - op.layout.size.bits());\n+        let max_hi = u128::MAX >> (128 - op.layout.size.bits());\n         assert!(hi <= max_hi);\n         // We could also write `(hi + 1) % (max_hi + 1) == lo` but `max_hi + 1` overflows for `u128`\n         if (lo == 0 && hi == max_hi) || (hi + 1 == lo) {"}, {"sha": "9fe21964b98882c96b5d8713a34dad05a699f8be", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=b818ccc74c993d41286731f67ce1e2bc2a3f1918", "patch": "@@ -920,7 +920,7 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n             let (blocks, local_decls) = self.source.basic_blocks_and_local_decls_mut();\n             match candidate {\n                 Candidate::Ref(loc) => {\n-                    let ref mut statement = blocks[loc.block].statements[loc.statement_index];\n+                    let statement = &mut blocks[loc.block].statements[loc.statement_index];\n                     match statement.kind {\n                         StatementKind::Assign(box (\n                             _,\n@@ -971,7 +971,7 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n                     }\n                 }\n                 Candidate::Repeat(loc) => {\n-                    let ref mut statement = blocks[loc.block].statements[loc.statement_index];\n+                    let statement = &mut blocks[loc.block].statements[loc.statement_index];\n                     match statement.kind {\n                         StatementKind::Assign(box (_, Rvalue::Repeat(ref mut operand, _))) => {\n                             let ty = operand.ty(local_decls, self.tcx);"}, {"sha": "5b054c04522439c9a96b934e70d1a6a13c53e9b9", "filename": "src/librustc_mir_build/hair/pattern/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs?ref=b818ccc74c993d41286731f67ce1e2bc2a3f1918", "patch": "@@ -2331,7 +2331,7 @@ fn specialize_one_pattern<'p, 'tcx>(\n         PatKind::Binding { .. } | PatKind::Wild => Some(ctor_wild_subpatterns.iter().collect()),\n \n         PatKind::Variant { adt_def, variant_index, ref subpatterns, .. } => {\n-            let ref variant = adt_def.variants[variant_index];\n+            let variant = &adt_def.variants[variant_index];\n             let is_non_exhaustive = cx.is_foreign_non_exhaustive_variant(pat.ty, variant);\n             Some(Variant(variant.def_id))\n                 .filter(|variant_constructor| variant_constructor == constructor)"}, {"sha": "2dccb04f6cce1c1cca0ac434e3b25869ddf5b14b", "filename": "src/librustc_parse/parser/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustc_parse%2Fparser%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustc_parse%2Fparser%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fattr.rs?ref=b818ccc74c993d41286731f67ce1e2bc2a3f1918", "patch": "@@ -37,7 +37,7 @@ impl<'a> Parser<'a> {\n                     let inner_parse_policy = InnerAttributeParsePolicy::NotPermitted {\n                         reason: inner_error_reason,\n                         saw_doc_comment: just_parsed_doc_comment,\n-                        prev_attr_sp: attrs.last().and_then(|a| Some(a.span)),\n+                        prev_attr_sp: attrs.last().map(|a| a.span),\n                     };\n                     let attr = self.parse_attribute_with_inner_parse_policy(inner_parse_policy)?;\n                     attrs.push(attr);"}, {"sha": "8b43b424f5502d74780fd1e27cb536b160c449d4", "filename": "src/librustc_parse/parser/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs?ref=b818ccc74c993d41286731f67ce1e2bc2a3f1918", "patch": "@@ -19,7 +19,7 @@ use rustc_span::{MultiSpan, Span, SpanSnippetError, DUMMY_SP};\n use log::{debug, trace};\n use std::mem;\n \n-const TURBOFISH: &'static str = \"use `::<...>` instead of `<...>` to specify type arguments\";\n+const TURBOFISH: &str = \"use `::<...>` instead of `<...>` to specify type arguments\";\n \n /// Creates a placeholder argument.\n pub(super) fn dummy_arg(ident: Ident) -> Param {"}, {"sha": "86596e205562ed034919e2a15ac8567caecfe548", "filename": "src/librustc_passes/entry.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustc_passes%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustc_passes%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fentry.rs?ref=b818ccc74c993d41286731f67ce1e2bc2a3f1918", "patch": "@@ -196,7 +196,7 @@ fn no_main_err(tcx: TyCtxt<'_>, visitor: &EntryContext<'_, '_>) {\n     // The file may be empty, which leads to the diagnostic machinery not emitting this\n     // note. This is a relatively simple way to detect that case and emit a span-less\n     // note instead.\n-    if let Ok(_) = tcx.sess.source_map().lookup_line(sp.lo()) {\n+    if tcx.sess.source_map().lookup_line(sp.lo()).is_ok() {\n         err.set_span(sp);\n         err.span_label(sp, &note);\n     } else {"}, {"sha": "3b018005a88d2673edd15b8541d8d1db44d9ee24", "filename": "src/librustc_resolve/imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustc_resolve%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustc_resolve%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fimports.rs?ref=b818ccc74c993d41286731f67ce1e2bc2a3f1918", "patch": "@@ -1432,7 +1432,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                             }\n                             msg\n                         }\n-                        ref s @ _ => bug!(\"unexpected import subclass {:?}\", s),\n+                        ref s => bug!(\"unexpected import subclass {:?}\", s),\n                     };\n                     let mut err = this.session.struct_span_err(binding.span, &msg);\n "}, {"sha": "fd62c802934255a7a85c961eb4601507601ab4e6", "filename": "src/librustc_resolve/late/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs?ref=b818ccc74c993d41286731f67ce1e2bc2a3f1918", "patch": "@@ -1086,7 +1086,7 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n                     for param in params {\n                         if let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(param.span)\n                         {\n-                            if snippet.starts_with(\"&\") && !snippet.starts_with(\"&'\") {\n+                            if snippet.starts_with('&') && !snippet.starts_with(\"&'\") {\n                                 introduce_suggestion\n                                     .push((param.span, format!(\"&'a {}\", &snippet[1..])));\n                             } else if snippet.starts_with(\"&'_ \") {\n@@ -1118,7 +1118,7 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n                 (1, Some(name), Some(\"'_\")) => {\n                     suggest_existing(err, name.to_string());\n                 }\n-                (1, Some(name), Some(snippet)) if !snippet.ends_with(\">\") => {\n+                (1, Some(name), Some(snippet)) if !snippet.ends_with('>') => {\n                     suggest_existing(err, format!(\"{}<{}>\", snippet, name));\n                 }\n                 (0, _, Some(\"&\")) => {\n@@ -1127,7 +1127,7 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n                 (0, _, Some(\"'_\")) => {\n                     suggest_new(err, \"'a\");\n                 }\n-                (0, _, Some(snippet)) if !snippet.ends_with(\">\") => {\n+                (0, _, Some(snippet)) if !snippet.ends_with('>') => {\n                     suggest_new(err, &format!(\"{}<'a>\", snippet));\n                 }\n                 _ => {"}, {"sha": "40cafb626d7c2e23c02789a38ba4ad9503b4852e", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=b818ccc74c993d41286731f67ce1e2bc2a3f1918", "patch": "@@ -1550,21 +1550,18 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n \n             let method_names = pcx.candidate_method_names();\n             pcx.allow_similar_names = false;\n-            let applicable_close_candidates: Vec<ty::AssocItem> =\n-                method_names\n-                    .iter()\n-                    .filter_map(|&method_name| {\n-                        pcx.reset();\n-                        pcx.method_name = Some(method_name);\n-                        pcx.assemble_inherent_candidates();\n-                        pcx.assemble_extension_candidates_for_traits_in_scope(hir::DUMMY_HIR_ID)\n-                            .map_or(None, |_| {\n-                                pcx.pick_core()\n-                                    .and_then(|pick| pick.ok())\n-                                    .and_then(|pick| Some(pick.item))\n-                            })\n-                    })\n-                    .collect();\n+            let applicable_close_candidates: Vec<ty::AssocItem> = method_names\n+                .iter()\n+                .filter_map(|&method_name| {\n+                    pcx.reset();\n+                    pcx.method_name = Some(method_name);\n+                    pcx.assemble_inherent_candidates();\n+                    pcx.assemble_extension_candidates_for_traits_in_scope(hir::DUMMY_HIR_ID)\n+                        .map_or(None, |_| {\n+                            pcx.pick_core().and_then(|pick| pick.ok()).map(|pick| pick.item)\n+                        })\n+                })\n+                .collect();\n \n             if applicable_close_candidates.is_empty() {\n                 Ok(None)"}, {"sha": "d8b23998e727f561cc490c7515663f5f3997220d", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=b818ccc74c993d41286731f67ce1e2bc2a3f1918", "patch": "@@ -737,8 +737,8 @@ impl ItemLikeVisitor<'tcx> for CheckItemTypesVisitor<'tcx> {\n }\n \n pub fn check_wf_new(tcx: TyCtxt<'_>) {\n-    let mut visit = wfcheck::CheckTypeWellFormedVisitor::new(tcx);\n-    tcx.hir().krate().par_visit_all_item_likes(&mut visit);\n+    let visit = wfcheck::CheckTypeWellFormedVisitor::new(tcx);\n+    tcx.hir().krate().par_visit_all_item_likes(&visit);\n }\n \n fn check_mod_item_types(tcx: TyCtxt<'_>, module_def_id: DefId) {"}, {"sha": "26462e61e5d5709c28749f5d7e4756506107f3c0", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=b818ccc74c993d41286731f67ce1e2bc2a3f1918", "patch": "@@ -151,7 +151,7 @@ crate fn placeholder_type_error(\n         .unwrap_or(&\"ParamName\");\n \n     let mut sugg: Vec<_> =\n-        placeholder_types.iter().map(|sp| (*sp, type_name.to_string())).collect();\n+        placeholder_types.iter().map(|sp| (*sp, (*type_name).to_string())).collect();\n     if generics.is_empty() {\n         sugg.push((span, format!(\"<{}>\", type_name)));\n     } else if let Some(arg) = generics.iter().find(|arg| match arg.name {\n@@ -160,7 +160,7 @@ crate fn placeholder_type_error(\n     }) {\n         // Account for `_` already present in cases like `struct S<_>(_);` and suggest\n         // `struct S<T>(T);` instead of `struct S<_, T>(T);`.\n-        sugg.push((arg.span, type_name.to_string()));\n+        sugg.push((arg.span, (*type_name).to_string()));\n     } else {\n         sugg.push((\n             generics.iter().last().unwrap().span.shrink_to_hi(),"}, {"sha": "4c7765b2965006ce0bec3f4158a73d04c5ca1fe6", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=b818ccc74c993d41286731f67ce1e2bc2a3f1918", "patch": "@@ -50,7 +50,7 @@ pub use self::types::Type::*;\n pub use self::types::Visibility::{Inherited, Public};\n pub use self::types::*;\n \n-const FN_OUTPUT_NAME: &'static str = \"Output\";\n+const FN_OUTPUT_NAME: &str = \"Output\";\n \n pub trait Clean<T> {\n     fn clean(&self, cx: &DocContext<'_>) -> T;"}, {"sha": "21e3d24cc968b18c3a2e21ab8cdc4c39fa4f8d43", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=b818ccc74c993d41286731f67ce1e2bc2a3f1918", "patch": "@@ -121,9 +121,7 @@ pub fn external_generic_args(\n     let args: Vec<_> = substs\n         .iter()\n         .filter_map(|kind| match kind.unpack() {\n-            GenericArgKind::Lifetime(lt) => {\n-                lt.clean(cx).and_then(|lt| Some(GenericArg::Lifetime(lt)))\n-            }\n+            GenericArgKind::Lifetime(lt) => lt.clean(cx).map(|lt| GenericArg::Lifetime(lt)),\n             GenericArgKind::Type(_) if skip_self => {\n                 skip_self = false;\n                 None"}, {"sha": "9c9a00295c3fa2026c6e5b29672d9380cf838103", "filename": "src/librustdoc/docfs.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustdoc%2Fdocfs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustdoc%2Fdocfs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdocfs.rs?ref=b818ccc74c993d41286731f67ce1e2bc2a3f1918", "patch": "@@ -90,14 +90,14 @@ impl DocFS {\n             let sender = self.errors.sender.clone().unwrap();\n             rayon::spawn(move || match fs::write(&path, &contents) {\n                 Ok(_) => {\n-                    sender\n-                        .send(None)\n-                        .expect(&format!(\"failed to send error on \\\"{}\\\"\", path.display()));\n+                    sender.send(None).unwrap_or_else(|_| {\n+                        panic!(\"failed to send error on \\\"{}\\\"\", path.display())\n+                    });\n                 }\n                 Err(e) => {\n-                    sender\n-                        .send(Some(format!(\"\\\"{}\\\": {}\", path.display(), e)))\n-                        .expect(&format!(\"failed to send non-error on \\\"{}\\\"\", path.display()));\n+                    sender.send(Some(format!(\"\\\"{}\\\": {}\", path.display(), e))).unwrap_or_else(\n+                        |_| panic!(\"failed to send non-error on \\\"{}\\\"\", path.display()),\n+                    );\n                 }\n             });\n             Ok(())"}, {"sha": "0b2b0cdc18b092e5c135c8cded2d3ef400566479", "filename": "src/librustdoc/html/item_type.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs?ref=b818ccc74c993d41286731f67ce1e2bc2a3f1918", "patch": "@@ -62,7 +62,7 @@ impl<'a> From<&'a clean::Item> for ItemType {\n     fn from(item: &'a clean::Item) -> ItemType {\n         let inner = match item.inner {\n             clean::StrippedItem(box ref item) => item,\n-            ref inner @ _ => inner,\n+            ref inner => inner,\n         };\n \n         match *inner {\n@@ -194,7 +194,7 @@ impl fmt::Display for ItemType {\n     }\n }\n \n-pub const NAMESPACE_TYPE: &'static str = \"t\";\n-pub const NAMESPACE_VALUE: &'static str = \"v\";\n-pub const NAMESPACE_MACRO: &'static str = \"m\";\n-pub const NAMESPACE_KEYWORD: &'static str = \"k\";\n+pub const NAMESPACE_TYPE: &str = \"t\";\n+pub const NAMESPACE_VALUE: &str = \"v\";\n+pub const NAMESPACE_MACRO: &str = \"m\";\n+pub const NAMESPACE_KEYWORD: &str = \"k\";"}, {"sha": "42529a6682ec112e1ef429bb4acc7543a8a15941", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=b818ccc74c993d41286731f67ce1e2bc2a3f1918", "patch": "@@ -296,7 +296,7 @@ impl<'a, I: Iterator<Item = Event<'a>>> Iterator for CodeBlocks<'_, 'a, I> {\n                         \"\"\n                     }\n                 )),\n-                playground_button.as_ref().map(String::as_str),\n+                playground_button.as_deref(),\n                 Some((s1.as_str(), s2)),\n             ));\n             Some(Event::Html(s.into()))\n@@ -315,7 +315,7 @@ impl<'a, I: Iterator<Item = Event<'a>>> Iterator for CodeBlocks<'_, 'a, I> {\n                         \"\"\n                     }\n                 )),\n-                playground_button.as_ref().map(String::as_str),\n+                playground_button.as_deref(),\n                 None,\n             ));\n             Some(Event::Html(s.into()))\n@@ -869,12 +869,8 @@ pub fn plain_summary_line(md: &str) -> String {\n         }\n     }\n     let mut s = String::with_capacity(md.len() * 3 / 2);\n-    let mut p = ParserWrapper { inner: Parser::new(md), is_in: 0, is_first: true };\n-    while let Some(t) = p.next() {\n-        if !t.is_empty() {\n-            s.push_str(&t);\n-        }\n-    }\n+    let p = ParserWrapper { inner: Parser::new(md), is_in: 0, is_first: true };\n+    p.into_iter().filter(|t| !t.is_empty()).for_each(|i| s.push_str(&i));\n     s\n }\n "}, {"sha": "07fe439ace2269bd369043e3c518fbf3c6a1775c", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=b818ccc74c993d41286731f67ce1e2bc2a3f1918", "patch": "@@ -2727,7 +2727,7 @@ fn naive_assoc_href(it: &clean::Item, link: AssocItemLink<'_>) -> String {\n     let name = it.name.as_ref().unwrap();\n     let ty = match it.type_() {\n         Typedef | AssocType => AssocType,\n-        s @ _ => s,\n+        s => s,\n     };\n \n     let anchor = format!(\"#{}.{}\", ty, name);\n@@ -3150,7 +3150,7 @@ fn render_attribute(attr: &ast::MetaItem) -> Option<String> {\n     }\n }\n \n-const ATTRIBUTE_WHITELIST: &'static [Symbol] = &[\n+const ATTRIBUTE_WHITELIST: &[Symbol] = &[\n     sym::export_name,\n     sym::lang,\n     sym::link_section,\n@@ -4610,7 +4610,7 @@ fn item_keyword(w: &mut Buffer, cx: &Context, it: &clean::Item) {\n     document(w, cx, it)\n }\n \n-crate const BASIC_KEYWORDS: &'static str = \"rust, rustlang, rust-lang\";\n+crate const BASIC_KEYWORDS: &str = \"rust, rustlang, rust-lang\";\n \n fn make_item_keywords(it: &clean::Item) -> String {\n     format!(\"{}, {}\", BASIC_KEYWORDS, it.name.as_ref().unwrap())"}, {"sha": "7fd7de56f4615a1a97fb589e2ecec1469ba6fea5", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=b818ccc74c993d41286731f67ce1e2bc2a3f1918", "patch": "@@ -185,7 +185,7 @@ macro_rules! eprintln {\n /// builds or when debugging in release mode is significantly faster.\n ///\n /// Note that the macro is intended as a debugging tool and therefore you\n-/// should avoid having uses of it in version control for longer periods.\n+/// should avoid having uses of it in version control for long periods.\n /// Use cases involving debug output that should be added to version control\n /// are better served by macros such as [`debug!`] from the [`log`] crate.\n ///"}, {"sha": "859da691ad27868c485fa3ed038011e3e8317571", "filename": "src/libstd/sys/unix/process/process_common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs?ref=b818ccc74c993d41286731f67ce1e2bc2a3f1918", "patch": "@@ -19,9 +19,9 @@ cfg_if::cfg_if! {\n     if #[cfg(target_os = \"fuchsia\")] {\n         // fuchsia doesn't have /dev/null\n     } else if #[cfg(target_os = \"redox\")] {\n-        const DEV_NULL: &'static str = \"null:\\0\";\n+        const DEV_NULL: &str = \"null:\\0\";\n     } else {\n-        const DEV_NULL: &'static str = \"/dev/null\\0\";\n+        const DEV_NULL: &str = \"/dev/null\\0\";\n     }\n }\n "}, {"sha": "55f9df9caafb274a72d0fca8e7541ecabb2f3f10", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b818ccc74c993d41286731f67ce1e2bc2a3f1918/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=b818ccc74c993d41286731f67ce1e2bc2a3f1918", "patch": "@@ -96,7 +96,7 @@ use time::TestExecTime;\n // Process exit code to be used to indicate test failures.\n const ERROR_EXIT_CODE: i32 = 101;\n \n-const SECONDARY_TEST_INVOKER_VAR: &'static str = \"__RUST_TEST_INVOKE\";\n+const SECONDARY_TEST_INVOKER_VAR: &str = \"__RUST_TEST_INVOKE\";\n \n // The default console test runner. It accepts the command line\n // arguments and a vector of test_descs.\n@@ -158,7 +158,7 @@ pub fn test_main_static_abort(tests: &[&TestDescAndFn]) {\n             .filter(|test| test.desc.name.as_slice() == name)\n             .map(make_owned_test)\n             .next()\n-            .expect(&format!(\"couldn't find a test with the provided name '{}'\", name));\n+            .unwrap_or_else(|| panic!(\"couldn't find a test with the provided name '{}'\", name));\n         let TestDescAndFn { desc, testfn } = test;\n         let testfn = match testfn {\n             StaticTestFn(f) => f,"}]}