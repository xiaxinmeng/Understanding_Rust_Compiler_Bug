{"sha": "cdd537339eb9fe009f75f285a99aa8257775e656", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkZDUzNzMzOWViOWZlMDA5Zjc1ZjI4NWE5OWFhODI1Nzc3NWU2NTY=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2018-12-13T20:53:07Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2018-12-13T20:53:07Z"}, "message": "Make determining the discriminant a normal Shallow read\n\nEnum layout optimizations mean that the discriminant of an enum may not\nbe stored in a tag disjoint from the rest of the fields of the enum.\nStop borrow checking as though they are.", "tree": {"sha": "48fb6e4892d598d7ebf61096b26ff8d6a2c27a99", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48fb6e4892d598d7ebf61096b26ff8d6a2c27a99"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cdd537339eb9fe009f75f285a99aa8257775e656", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cdd537339eb9fe009f75f285a99aa8257775e656", "html_url": "https://github.com/rust-lang/rust/commit/cdd537339eb9fe009f75f285a99aa8257775e656", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cdd537339eb9fe009f75f285a99aa8257775e656/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8375ab4ff43474c73e3572c2b226560f8cc8e695", "url": "https://api.github.com/repos/rust-lang/rust/commits/8375ab4ff43474c73e3572c2b226560f8cc8e695", "html_url": "https://github.com/rust-lang/rust/commit/8375ab4ff43474c73e3572c2b226560f8cc8e695"}], "stats": {"total": 97, "additions": 73, "deletions": 24}, "files": [{"sha": "5eca62938f7a8c821cbe68b18930779f7c770b12", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cdd537339eb9fe009f75f285a99aa8257775e656/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdd537339eb9fe009f75f285a99aa8257775e656/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=cdd537339eb9fe009f75f285a99aa8257775e656", "patch": "@@ -545,7 +545,7 @@ impl<'cx, 'gcx, 'tcx> DataflowResultsConsumer<'cx, 'tcx> for MirBorrowckCtxt<'cx\n                 self.mutate_place(\n                     ContextKind::SetDiscrim.new(location),\n                     (place, span),\n-                    Shallow(Some(ArtificialField::Discriminant)),\n+                    Shallow(None),\n                     JustWrite,\n                     flow_state,\n                 );\n@@ -782,7 +782,6 @@ use self::AccessDepth::{Deep, Shallow};\n \n #[derive(Copy, Clone, PartialEq, Eq, Debug)]\n enum ArtificialField {\n-    Discriminant,\n     ArrayLength,\n     ShallowBorrow,\n }\n@@ -1191,14 +1190,14 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n \n             Rvalue::Len(ref place) | Rvalue::Discriminant(ref place) => {\n                 let af = match *rvalue {\n-                    Rvalue::Len(..) => ArtificialField::ArrayLength,\n-                    Rvalue::Discriminant(..) => ArtificialField::Discriminant,\n+                    Rvalue::Len(..) => Some(ArtificialField::ArrayLength),\n+                    Rvalue::Discriminant(..) => None,\n                     _ => unreachable!(),\n                 };\n                 self.access_place(\n                     context,\n                     (place, span),\n-                    (Shallow(Some(af)), Read(ReadKind::Copy)),\n+                    (Shallow(af), Read(ReadKind::Copy)),\n                     LocalMutationIsAllowed::No,\n                     flow_state,\n                 );"}, {"sha": "07bda8af62618a6191df91d1533277641add6939", "filename": "src/librustc_mir/borrow_check/nll/invalidation.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cdd537339eb9fe009f75f285a99aa8257775e656/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdd537339eb9fe009f75f285a99aa8257775e656/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs?ref=cdd537339eb9fe009f75f285a99aa8257775e656", "patch": "@@ -99,7 +99,7 @@ impl<'cx, 'tcx, 'gcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx, 'gcx> {\n                 self.mutate_place(\n                     ContextKind::SetDiscrim.new(location),\n                     place,\n-                    Shallow(Some(ArtificialField::Discriminant)),\n+                    Shallow(None),\n                     JustWrite,\n                 );\n             }\n@@ -360,14 +360,14 @@ impl<'cg, 'cx, 'tcx, 'gcx> InvalidationGenerator<'cx, 'tcx, 'gcx> {\n \n             Rvalue::Len(ref place) | Rvalue::Discriminant(ref place) => {\n                 let af = match *rvalue {\n-                    Rvalue::Len(..) => ArtificialField::ArrayLength,\n-                    Rvalue::Discriminant(..) => ArtificialField::Discriminant,\n+                    Rvalue::Len(..) => Some(ArtificialField::ArrayLength),\n+                    Rvalue::Discriminant(..) => None,\n                     _ => unreachable!(),\n                 };\n                 self.access_place(\n                     context,\n                     place,\n-                    (Shallow(Some(af)), Read(ReadKind::Copy)),\n+                    (Shallow(af), Read(ReadKind::Copy)),\n                     LocalMutationIsAllowed::No,\n                 );\n             }"}, {"sha": "e24586cca0929ba372e8e084253a839f6e3b4c13", "filename": "src/librustc_mir/borrow_check/places_conflict.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/cdd537339eb9fe009f75f285a99aa8257775e656/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdd537339eb9fe009f75f285a99aa8257775e656/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs?ref=cdd537339eb9fe009f75f285a99aa8257775e656", "patch": "@@ -165,15 +165,12 @@ fn place_components_conflict<'gcx, 'tcx>(\n                 let base_ty = base.ty(mir, tcx).to_ty(tcx);\n \n                 match (elem, &base_ty.sty, access) {\n-                    (_, _, Shallow(Some(ArtificialField::Discriminant)))\n-                    | (_, _, Shallow(Some(ArtificialField::ArrayLength)))\n+                    (_, _, Shallow(Some(ArtificialField::ArrayLength)))\n                     | (_, _, Shallow(Some(ArtificialField::ShallowBorrow))) => {\n-                        // The discriminant and array length are like\n-                        // additional fields on the type; they do not\n-                        // overlap any existing data there. Furthermore,\n-                        // they cannot actually be a prefix of any\n-                        // borrowed place (at least in MIR as it is\n-                        // currently.)\n+                        // The array length is like  additional fields on the\n+                        // type; it does not overlap any existing data there.\n+                        // Furthermore, if cannot actually be a prefix of any\n+                        // borrowed place (at least in MIR as it is currently.)\n                         //\n                         // e.g., a (mutable) borrow of `a[5]` while we read the\n                         // array length of `a`."}, {"sha": "6f72de0edee327be283d5389f05ea746f85fd5e7", "filename": "src/test/ui/borrowck/borrowck-anon-fields-variant.nll.stderr", "status": "modified", "additions": 31, "deletions": 2, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/cdd537339eb9fe009f75f285a99aa8257775e656/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-variant.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cdd537339eb9fe009f75f285a99aa8257775e656/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-variant.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-variant.nll.stderr?ref=cdd537339eb9fe009f75f285a99aa8257775e656", "patch": "@@ -1,3 +1,31 @@\n+warning[E0503]: cannot use `y` because it was mutably borrowed\n+  --> $DIR/borrowck-anon-fields-variant.rs:27:7\n+   |\n+LL |       Foo::Y(ref mut a, _) => a,\n+   |              --------- borrow of `y.0` occurs here\n+...\n+LL |       Foo::Y(_, ref mut b) => b,\n+   |       ^^^^^^^^^^^^^^^^^^^^ use of borrowed `y.0`\n+...\n+LL |     *a += 1;\n+   |     ------- borrow later used here\n+   |\n+   = warning: This error has been downgraded to a warning for backwards compatibility with previous releases.\n+           It represents potential unsoundness in your code.\n+           This warning will become a hard error in the future.\n+\n+error[E0503]: cannot use `y` because it was mutably borrowed\n+  --> $DIR/borrowck-anon-fields-variant.rs:44:7\n+   |\n+LL |       Foo::Y(ref mut a, _) => a,\n+   |              --------- borrow of `y.0` occurs here\n+...\n+LL |       Foo::Y(ref mut b, _) => b, //~ ERROR cannot borrow\n+   |       ^^^^^^^^^^^^^^^^^^^^ use of borrowed `y.0`\n+...\n+LL |     *a += 1;\n+   |     ------- borrow later used here\n+\n error[E0499]: cannot borrow `y.0` as mutable more than once at a time\n   --> $DIR/borrowck-anon-fields-variant.rs:44:14\n    |\n@@ -10,6 +38,7 @@ LL |       Foo::Y(ref mut b, _) => b, //~ ERROR cannot borrow\n LL |     *a += 1;\n    |     ------- first borrow later used here\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0499`.\n+Some errors occurred: E0499, E0503.\n+For more information about an error, try `rustc --explain E0499`."}, {"sha": "edce2b185df34bdcd3372e1845953e7d49ddaf96", "filename": "src/test/ui/nll/match-on-borrowed.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cdd537339eb9fe009f75f285a99aa8257775e656/src%2Ftest%2Fui%2Fnll%2Fmatch-on-borrowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdd537339eb9fe009f75f285a99aa8257775e656/src%2Ftest%2Fui%2Fnll%2Fmatch-on-borrowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmatch-on-borrowed.rs?ref=cdd537339eb9fe009f75f285a99aa8257775e656", "patch": "@@ -46,9 +46,9 @@ fn enum_example(mut e: E) {\n         E::V(ref mut x, _) => x,\n         E::W => panic!(),\n     };\n-    match e { // OK, no access of borrowed data\n+    match e { // Don't know that E uses a tag for its discriminant\n         _ if false => (),\n-        E::V(_, r) => (),\n+        E::V(_, r) => (), //~ ERROR\n         E::W => (),\n     }\n     x;\n@@ -59,9 +59,9 @@ fn indirect_enum_example(mut f: &mut E) {\n         E::V(ref mut x, _) => x,\n         E::W => panic!(),\n     };\n-    match f { // OK, no access of borrowed data\n+    match f { // Don't know that E uses a tag for its discriminant\n         _ if false => (),\n-        E::V(_, r) => (),\n+        E::V(_, r) => (), //~ ERROR\n         E::W => (),\n     }\n     x;"}, {"sha": "2d34dd7805dbf5337f08b3d3a5d00937d117363a", "filename": "src/test/ui/nll/match-on-borrowed.stderr", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/cdd537339eb9fe009f75f285a99aa8257775e656/src%2Ftest%2Fui%2Fnll%2Fmatch-on-borrowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cdd537339eb9fe009f75f285a99aa8257775e656/src%2Ftest%2Fui%2Fnll%2Fmatch-on-borrowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmatch-on-borrowed.stderr?ref=cdd537339eb9fe009f75f285a99aa8257775e656", "patch": "@@ -1,3 +1,27 @@\n+error[E0503]: cannot use `e` because it was mutably borrowed\n+  --> $DIR/match-on-borrowed.rs:51:9\n+   |\n+LL |         E::V(ref mut x, _) => x,\n+   |              --------- borrow of `e.0` occurs here\n+...\n+LL |         E::V(_, r) => (), //~ ERROR\n+   |         ^^^^^^^^^^ use of borrowed `e.0`\n+...\n+LL |     x;\n+   |     - borrow later used here\n+\n+error[E0503]: cannot use `*f` because it was mutably borrowed\n+  --> $DIR/match-on-borrowed.rs:64:9\n+   |\n+LL |         E::V(ref mut x, _) => x,\n+   |              --------- borrow of `f.0` occurs here\n+...\n+LL |         E::V(_, r) => (), //~ ERROR\n+   |         ^^^^^^^^^^ use of borrowed `f.0`\n+...\n+LL |     x;\n+   |     - borrow later used here\n+\n error[E0503]: cannot use `t` because it was mutably borrowed\n   --> $DIR/match-on-borrowed.rs:82:9\n    |\n@@ -16,7 +40,7 @@ error[E0381]: use of possibly uninitialized variable: `n`\n LL |     match n {} //~ ERROR\n    |           ^ use of possibly uninitialized `n`\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 4 previous errors\n \n Some errors occurred: E0381, E0503.\n For more information about an error, try `rustc --explain E0381`."}]}