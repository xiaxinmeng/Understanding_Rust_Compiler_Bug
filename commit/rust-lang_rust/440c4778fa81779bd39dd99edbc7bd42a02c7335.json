{"sha": "440c4778fa81779bd39dd99edbc7bd42a02c7335", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0MGM0Nzc4ZmE4MTc3OWJkMzlkZDk5ZWRiYzdiZDQyYTAyYzczMzU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-07-03T23:47:58Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-07-03T23:47:58Z"}, "message": "validate size and alignment on reallocate and deallocate", "tree": {"sha": "b30af5a15cab1ade0dd105d8e12cd60d881354aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b30af5a15cab1ade0dd105d8e12cd60d881354aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/440c4778fa81779bd39dd99edbc7bd42a02c7335", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/440c4778fa81779bd39dd99edbc7bd42a02c7335", "html_url": "https://github.com/rust-lang/rust/commit/440c4778fa81779bd39dd99edbc7bd42a02c7335", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/440c4778fa81779bd39dd99edbc7bd42a02c7335/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc9f5a205f3878410485783beb9de0ad6d6bfe31", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc9f5a205f3878410485783beb9de0ad6d6bfe31", "html_url": "https://github.com/rust-lang/rust/commit/dc9f5a205f3878410485783beb9de0ad6d6bfe31"}], "stats": {"total": 107, "additions": 84, "deletions": 23}, "files": [{"sha": "b101a3967a72344be2ec8a4b1cbef9bda21a5518", "filename": "src/eval_context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/440c4778fa81779bd39dd99edbc7bd42a02c7335/src%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/440c4778fa81779bd39dd99edbc7bd42a02c7335/src%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval_context.rs?ref=440c4778fa81779bd39dd99edbc7bd42a02c7335", "patch": "@@ -410,7 +410,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         if let Some(Value::ByRef(ptr)) = local {\n             trace!(\"deallocating local\");\n             self.memory.dump_alloc(ptr.alloc_id);\n-            match self.memory.deallocate(ptr) {\n+            match self.memory.deallocate(ptr, None) {\n                 // We could alternatively check whether the alloc_id is static before calling\n                 // deallocate, but this is much simpler and is probably the rare case.\n                 Ok(()) | Err(EvalError::DeallocatedStaticMemory) => {},\n@@ -1724,7 +1724,7 @@ pub fn eval_main<'a, 'tcx: 'a>(\n \n         while ecx.step()? {}\n         if let Some(cleanup_ptr) = cleanup_ptr {\n-            ecx.memory.deallocate(cleanup_ptr)?;\n+            ecx.memory.deallocate(cleanup_ptr, None)?;\n         }\n         return Ok(());\n     }"}, {"sha": "bd38b737a40fe2caf1d38e1e1f7fd2fae81dfc41", "filename": "src/memory.rs", "status": "modified", "additions": 23, "deletions": 14, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/440c4778fa81779bd39dd99edbc7bd42a02c7335/src%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/440c4778fa81779bd39dd99edbc7bd42a02c7335/src%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmemory.rs?ref=440c4778fa81779bd39dd99edbc7bd42a02c7335", "patch": "@@ -223,31 +223,33 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n \n     // TODO(solson): Track which allocations were returned from __rust_allocate and report an error\n     // when reallocating/deallocating any others.\n-    pub fn reallocate(&mut self, ptr: Pointer, new_size: u64, align: u64) -> EvalResult<'tcx, Pointer> {\n+    pub fn reallocate(&mut self, ptr: Pointer, old_size: u64, new_size: u64, align: u64) -> EvalResult<'tcx, Pointer> {\n         assert!(align.is_power_of_two());\n         // TODO(solson): Report error about non-__rust_allocate'd pointer.\n-        if ptr.offset != 0 {\n+        if ptr.offset != 0 || self.get(ptr.alloc_id).is_err() {\n             return Err(EvalError::ReallocateNonBasePtr);\n         }\n         if self.get(ptr.alloc_id).ok().map_or(false, |alloc| alloc.static_kind != StaticKind::NotStatic) {\n             return Err(EvalError::ReallocatedStaticMemory);\n         }\n \n         let size = self.get(ptr.alloc_id)?.bytes.len() as u64;\n+        let real_align = self.get(ptr.alloc_id)?.align;\n+        if size != old_size || real_align != align {\n+            return Err(EvalError::IncorrectAllocationInformation);\n+        }\n \n         if new_size > size {\n             let amount = new_size - size;\n             self.memory_usage += amount;\n             let alloc = self.get_mut(ptr.alloc_id)?;\n-            // FIXME: check alignment here\n             assert_eq!(amount as usize as u64, amount);\n             alloc.bytes.extend(iter::repeat(0).take(amount as usize));\n             alloc.undef_mask.grow(amount, false);\n         } else if size > new_size {\n             self.memory_usage -= size - new_size;\n             self.clear_relocations(ptr.offset(new_size, self.layout)?, size - new_size)?;\n             let alloc = self.get_mut(ptr.alloc_id)?;\n-            // FIXME: check alignment here\n             // `as usize` is fine here, since it is smaller than `size`, which came from a usize\n             alloc.bytes.truncate(new_size as usize);\n             alloc.bytes.shrink_to_fit();\n@@ -267,21 +269,28 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n     }\n \n     // TODO(solson): See comment on `reallocate`.\n-    pub fn deallocate(&mut self, ptr: Pointer) -> EvalResult<'tcx> {\n-        if ptr.offset != 0 {\n+    pub fn deallocate(&mut self, ptr: Pointer, size_and_align: Option<(u64, u64)>) -> EvalResult<'tcx> {\n+        if ptr.offset != 0 || self.get(ptr.alloc_id).is_err() {\n             // TODO(solson): Report error about non-__rust_allocate'd pointer.\n             return Err(EvalError::DeallocateNonBasePtr);\n         }\n-        if self.get(ptr.alloc_id).ok().map_or(false, |alloc| alloc.static_kind != StaticKind::NotStatic) {\n-            return Err(EvalError::DeallocatedStaticMemory);\n-        }\n \n-        if let Some(alloc) = self.alloc_map.remove(&ptr.alloc_id) {\n-            self.memory_usage -= alloc.bytes.len() as u64;\n-        } else {\n-            debug!(\"deallocated a pointer twice: {}\", ptr.alloc_id);\n-            return Err(EvalError::DeallocateNonBasePtr);\n+        {\n+            // Some code somewhere seems to rely on us *not* removing the allocation when we yield this kind of error.\n+            // So we do this test in advance.\n+            let alloc = self.get(ptr.alloc_id)?;\n+            if alloc.static_kind != StaticKind::NotStatic {\n+                return Err(EvalError::DeallocatedStaticMemory);\n+            }\n+            if let Some((size, align)) = size_and_align {\n+                if size != alloc.bytes.len() as u64 || align != alloc.align {\n+                    return Err(EvalError::IncorrectAllocationInformation);\n+                }\n+            }\n         }\n+\n+        let alloc = self.alloc_map.remove(&ptr.alloc_id).expect(\"already verified\");\n+        self.memory_usage -= alloc.bytes.len() as u64;\n         debug!(\"deallocated : {}\", ptr.alloc_id);\n \n         Ok(())"}, {"sha": "4bcf7470ba894154f9c0161e2914e53f5841a7f1", "filename": "src/terminator/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/440c4778fa81779bd39dd99edbc7bd42a02c7335/src%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/440c4778fa81779bd39dd99edbc7bd42a02c7335/src%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fterminator%2Fmod.rs?ref=440c4778fa81779bd39dd99edbc7bd42a02c7335", "patch": "@@ -589,7 +589,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             \"free\" => {\n                 let ptr = args[0].read_ptr(&self.memory)?;\n                 if !ptr.is_null()? {\n-                    self.memory.deallocate(ptr.to_ptr()?)?;\n+                    self.memory.deallocate(ptr.to_ptr()?, None)?;\n                 }\n             }\n \n@@ -638,7 +638,6 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n \n             \"__rust_deallocate\" => {\n                 let ptr = args[0].read_ptr(&self.memory)?.to_ptr()?;\n-                // FIXME: insert sanity check for size and align?\n                 let old_size = self.value_to_primval(args[1], usize)?.to_u64()?;\n                 let align = self.value_to_primval(args[2], usize)?.to_u64()?;\n                 if old_size == 0 {\n@@ -647,20 +646,21 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 if !align.is_power_of_two() {\n                     return Err(EvalError::HeapAllocNonPowerOfTwoAlignment(align));\n                 }\n-                self.memory.deallocate(ptr)?;\n+                self.memory.deallocate(ptr, Some((old_size, align)))?;\n             },\n \n             \"__rust_reallocate\" => {\n                 let ptr = args[0].read_ptr(&self.memory)?.to_ptr()?;\n+                let old_size = self.value_to_primval(args[1], usize)?.to_u64()?;\n                 let size = self.value_to_primval(args[2], usize)?.to_u64()?;\n                 let align = self.value_to_primval(args[3], usize)?.to_u64()?;\n-                if size == 0 {\n+                if old_size == 0 || size == 0 {\n                     return Err(EvalError::HeapAllocZeroBytes);\n                 }\n                 if !align.is_power_of_two() {\n                     return Err(EvalError::HeapAllocNonPowerOfTwoAlignment(align));\n                 }\n-                let new_ptr = self.memory.reallocate(ptr, size, align)?;\n+                let new_ptr = self.memory.reallocate(ptr, old_size, size, align)?;\n                 self.write_primval(dest, PrimVal::Ptr(new_ptr), dest_ty)?;\n             }\n \n@@ -768,7 +768,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 }\n                 if let Some(old) = success {\n                     if let Some(var) = old {\n-                        self.memory.deallocate(var)?;\n+                        self.memory.deallocate(var, None)?;\n                     }\n                     self.write_primval(dest, PrimVal::Bytes(0), dest_ty)?;\n                 } else {\n@@ -795,7 +795,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     self.memory.write_bytes(value_copy, &value)?;\n                     self.memory.write_bytes(value_copy.offset(value.len() as u64, self.memory.layout)?, &[0])?;\n                     if let Some(var) = self.env_vars.insert(name.to_owned(), value_copy) {\n-                        self.memory.deallocate(var)?;\n+                        self.memory.deallocate(var, None)?;\n                     }\n                     self.write_primval(dest, PrimVal::Bytes(0), dest_ty)?;\n                 } else {"}, {"sha": "fb3c865fa2508b47ed7d5bffbfeb71631a7c9251", "filename": "tests/compile-fail/deallocate-bad-alignment.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/440c4778fa81779bd39dd99edbc7bd42a02c7335/tests%2Fcompile-fail%2Fdeallocate-bad-alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/440c4778fa81779bd39dd99edbc7bd42a02c7335/tests%2Fcompile-fail%2Fdeallocate-bad-alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdeallocate-bad-alignment.rs?ref=440c4778fa81779bd39dd99edbc7bd42a02c7335", "patch": "@@ -0,0 +1,13 @@\n+#![feature(alloc, heap_api)]\n+\n+extern crate alloc;\n+\n+// error-pattern: tried to deallocate or reallocate using incorrect alignment or size\n+\n+use alloc::heap::*;\n+fn main() {\n+    unsafe {\n+        let x = allocate(1, 1);\n+        deallocate(x, 1, 2);\n+    }\n+}"}, {"sha": "fb3c865fa2508b47ed7d5bffbfeb71631a7c9251", "filename": "tests/compile-fail/deallocate-bad-size.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/440c4778fa81779bd39dd99edbc7bd42a02c7335/tests%2Fcompile-fail%2Fdeallocate-bad-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/440c4778fa81779bd39dd99edbc7bd42a02c7335/tests%2Fcompile-fail%2Fdeallocate-bad-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdeallocate-bad-size.rs?ref=440c4778fa81779bd39dd99edbc7bd42a02c7335", "patch": "@@ -0,0 +1,13 @@\n+#![feature(alloc, heap_api)]\n+\n+extern crate alloc;\n+\n+// error-pattern: tried to deallocate or reallocate using incorrect alignment or size\n+\n+use alloc::heap::*;\n+fn main() {\n+    unsafe {\n+        let x = allocate(1, 1);\n+        deallocate(x, 1, 2);\n+    }\n+}"}, {"sha": "2edc13ee1a106b08269f9c97166580e899ab2d93", "filename": "tests/compile-fail/reallocate-bad-alignment.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/440c4778fa81779bd39dd99edbc7bd42a02c7335/tests%2Fcompile-fail%2Freallocate-bad-alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/440c4778fa81779bd39dd99edbc7bd42a02c7335/tests%2Fcompile-fail%2Freallocate-bad-alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Freallocate-bad-alignment.rs?ref=440c4778fa81779bd39dd99edbc7bd42a02c7335", "patch": "@@ -0,0 +1,13 @@\n+#![feature(alloc, heap_api)]\n+\n+extern crate alloc;\n+\n+// error-pattern: tried to deallocate or reallocate using incorrect alignment or size\n+\n+use alloc::heap::*;\n+fn main() {\n+    unsafe {\n+        let x = allocate(1, 1);\n+        let _y = reallocate(x, 1, 1, 2);\n+    }\n+}"}, {"sha": "f7f1b48a7f2431c3b0aab9314001c5e5b5683960", "filename": "tests/compile-fail/reallocate-bad-size.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/440c4778fa81779bd39dd99edbc7bd42a02c7335/tests%2Fcompile-fail%2Freallocate-bad-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/440c4778fa81779bd39dd99edbc7bd42a02c7335/tests%2Fcompile-fail%2Freallocate-bad-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Freallocate-bad-size.rs?ref=440c4778fa81779bd39dd99edbc7bd42a02c7335", "patch": "@@ -0,0 +1,13 @@\n+#![feature(alloc, heap_api)]\n+\n+extern crate alloc;\n+\n+// error-pattern: tried to deallocate or reallocate using incorrect alignment or size\n+\n+use alloc::heap::*;\n+fn main() {\n+    unsafe {\n+        let x = allocate(1, 1);\n+        let _y = reallocate(x, 2, 1, 1);\n+    }\n+}"}]}