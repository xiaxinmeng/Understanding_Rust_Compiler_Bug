{"sha": "36f02f352392f216d778808818d0e4ed56714f3c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2ZjAyZjM1MjM5MmYyMTZkNzc4ODA4ODE4ZDBlNGVkNTY3MTRmM2M=", "commit": {"author": {"name": "Jacob Pratt", "email": "jacob@jhpratt.dev", "date": "2021-06-03T06:11:14Z"}, "committer": {"name": "Jacob Pratt", "email": "jacob@jhpratt.dev", "date": "2021-07-27T20:03:09Z"}, "message": "Stabilize `const_fn_transmute`", "tree": {"sha": "57f2073f87f48cf77d9fb20114a7a29f848c29ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/57f2073f87f48cf77d9fb20114a7a29f848c29ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/36f02f352392f216d778808818d0e4ed56714f3c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYIAB0WIQTgxeqBxcDGar1sVhy4DhnkZitapAUCYQBmfgAKCRC4DhnkZita\npCMXAQCMnIBNh4OnoImft303uA1w5ZTgNH/huDotugnzw2WupgD/bDmOwgs/lFna\nqqFIiN/1M+lVEkoe5e949wdYylfRTgo=\n=mq7P\n-----END PGP SIGNATURE-----", "payload": "tree 57f2073f87f48cf77d9fb20114a7a29f848c29ad\nparent fd853c00e255559255885aadff9e93a1760c8728\nauthor Jacob Pratt <jacob@jhpratt.dev> 1622700674 -0400\ncommitter Jacob Pratt <jacob@jhpratt.dev> 1627416189 -0400\n\nStabilize `const_fn_transmute`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/36f02f352392f216d778808818d0e4ed56714f3c", "html_url": "https://github.com/rust-lang/rust/commit/36f02f352392f216d778808818d0e4ed56714f3c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/36f02f352392f216d778808818d0e4ed56714f3c/comments", "author": {"login": "jhpratt", "id": 3161395, "node_id": "MDQ6VXNlcjMxNjEzOTU=", "avatar_url": "https://avatars.githubusercontent.com/u/3161395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhpratt", "html_url": "https://github.com/jhpratt", "followers_url": "https://api.github.com/users/jhpratt/followers", "following_url": "https://api.github.com/users/jhpratt/following{/other_user}", "gists_url": "https://api.github.com/users/jhpratt/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhpratt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhpratt/subscriptions", "organizations_url": "https://api.github.com/users/jhpratt/orgs", "repos_url": "https://api.github.com/users/jhpratt/repos", "events_url": "https://api.github.com/users/jhpratt/events{/privacy}", "received_events_url": "https://api.github.com/users/jhpratt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jhpratt", "id": 3161395, "node_id": "MDQ6VXNlcjMxNjEzOTU=", "avatar_url": "https://avatars.githubusercontent.com/u/3161395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhpratt", "html_url": "https://github.com/jhpratt", "followers_url": "https://api.github.com/users/jhpratt/followers", "following_url": "https://api.github.com/users/jhpratt/following{/other_user}", "gists_url": "https://api.github.com/users/jhpratt/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhpratt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhpratt/subscriptions", "organizations_url": "https://api.github.com/users/jhpratt/orgs", "repos_url": "https://api.github.com/users/jhpratt/repos", "events_url": "https://api.github.com/users/jhpratt/events{/privacy}", "received_events_url": "https://api.github.com/users/jhpratt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd853c00e255559255885aadff9e93a1760c8728", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd853c00e255559255885aadff9e93a1760c8728", "html_url": "https://github.com/rust-lang/rust/commit/fd853c00e255559255885aadff9e93a1760c8728"}], "stats": {"total": 62, "additions": 15, "deletions": 47}, "files": [{"sha": "922e86e386b89c307c94c10120f7f08807e0b9e6", "filename": "compiler/rustc_ast/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36f02f352392f216d778808818d0e4ed56714f3c/compiler%2Frustc_ast%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36f02f352392f216d778808818d0e4ed56714f3c/compiler%2Frustc_ast%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Flib.rs?ref=36f02f352392f216d778808818d0e4ed56714f3c", "patch": "@@ -10,7 +10,7 @@\n )]\n #![feature(box_syntax)]\n #![feature(box_patterns)]\n-#![feature(const_fn_transmute)]\n+#![cfg_attr(bootstrap, feature(const_fn_transmute))]\n #![feature(crate_visibility_modifier)]\n #![feature(iter_zip)]\n #![feature(label_break_value)]"}, {"sha": "96d81f67bc25199f84f10f3bf459fcf106378a09", "filename": "compiler/rustc_feature/src/accepted.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36f02f352392f216d778808818d0e4ed56714f3c/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36f02f352392f216d778808818d0e4ed56714f3c/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs?ref=36f02f352392f216d778808818d0e4ed56714f3c", "patch": "@@ -290,6 +290,8 @@ declare_features! (\n     /// Allows bindings in the subpattern of a binding pattern.\n     /// For example, you can write `x @ Some(y)`.\n     (accepted, bindings_after_at, \"1.54.0\", Some(65490), None),\n+    /// Allows calling `transmute` in const fn\n+    (accepted, const_fn_transmute, \"1.56.0\", Some(53605), None),\n \n     // -------------------------------------------------------------------------\n     // feature-group-end: accepted features"}, {"sha": "deeaa0d709663c7792c1595b812a5dcb7bdfd22c", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/36f02f352392f216d778808818d0e4ed56714f3c/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36f02f352392f216d778808818d0e4ed56714f3c/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=36f02f352392f216d778808818d0e4ed56714f3c", "patch": "@@ -565,9 +565,6 @@ declare_features! (\n     /// Lazily evaluate constants. This allows constants to depend on type parameters.\n     (incomplete, lazy_normalization_consts, \"1.46.0\", Some(72219), None),\n \n-    /// Allows calling `transmute` in const fn\n-    (active, const_fn_transmute, \"1.46.0\", Some(53605), None),\n-\n     /// Allows `if let` guard in match arms.\n     (incomplete, if_let_guard, \"1.47.0\", Some(51114), None),\n "}, {"sha": "106b7e677765073aa3f134ee2a2e37dea054ce05", "filename": "compiler/rustc_mir/src/transform/check_consts/check.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/36f02f352392f216d778808818d0e4ed56714f3c/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36f02f352392f216d778808818d0e4ed56714f3c/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=36f02f352392f216d778808818d0e4ed56714f3c", "patch": "@@ -876,15 +876,6 @@ impl Visitor<'tcx> for Checker<'mir, 'tcx> {\n \n                 let is_intrinsic = tcx.fn_sig(callee).abi() == RustIntrinsic;\n \n-                // HACK: This is to \"unstabilize\" the `transmute` intrinsic\n-                // within const fns. `transmute` is allowed in all other const contexts.\n-                // This won't really scale to more intrinsics or functions. Let's allow const\n-                // transmutes in const fn before we add more hacks to this.\n-                if is_intrinsic && tcx.item_name(callee) == sym::transmute {\n-                    self.check_op(ops::Transmute);\n-                    return;\n-                }\n-\n                 if !tcx.is_const_fn_raw(callee) {\n                     let mut permitted = false;\n "}, {"sha": "9a03b5e486708a402cdc45000f0723da65796ddb", "filename": "compiler/rustc_mir/src/transform/check_consts/ops.rs", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/36f02f352392f216d778808818d0e4ed56714f3c/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36f02f352392f216d778808818d0e4ed56714f3c/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs?ref=36f02f352392f216d778808818d0e4ed56714f3c", "patch": "@@ -501,29 +501,6 @@ impl NonConstOp for ThreadLocalAccess {\n     }\n }\n \n-#[derive(Debug)]\n-pub struct Transmute;\n-impl NonConstOp for Transmute {\n-    fn status_in_item(&self, ccx: &ConstCx<'_, '_>) -> Status {\n-        if ccx.const_kind() != hir::ConstContext::ConstFn {\n-            Status::Allowed\n-        } else {\n-            Status::Unstable(sym::const_fn_transmute)\n-        }\n-    }\n-\n-    fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n-        let mut err = feature_err(\n-            &ccx.tcx.sess.parse_sess,\n-            sym::const_fn_transmute,\n-            span,\n-            &format!(\"`transmute` is not allowed in {}s\", ccx.const_kind()),\n-        );\n-        err.note(\"`transmute` is only allowed in constants and statics for now\");\n-        err\n-    }\n-}\n-\n #[derive(Debug)]\n pub struct UnionAccess;\n impl NonConstOp for UnionAccess {"}, {"sha": "308a2e8d8398f4ba927addbbbc89da10687db7b6", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/36f02f352392f216d778808818d0e4ed56714f3c/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36f02f352392f216d778808818d0e4ed56714f3c/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=36f02f352392f216d778808818d0e4ed56714f3c", "patch": "@@ -911,6 +911,9 @@ extern \"rust-intrinsic\" {\n     /// cause [undefined behavior][ub] with this function. `transmute` should be\n     /// the absolute last resort.\n     ///\n+    /// Transmuting pointers to integers in a `const` context is [undefined behavior][ub].\n+    /// Any attempt to use the resulting value for integer operations will abort const-evaluation.\n+    ///\n     /// The [nomicon](../../nomicon/transmutes.html) has additional\n     /// documentation.\n     ///\n@@ -1128,8 +1131,6 @@ extern \"rust-intrinsic\" {\n     /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    // NOTE: While this makes the intrinsic const stable, we have some custom code in const fn\n-    // checks that prevent its use within `const fn`.\n     #[rustc_const_stable(feature = \"const_transmute\", since = \"1.46.0\")]\n     #[rustc_diagnostic_item = \"transmute\"]\n     pub fn transmute<T, U>(e: T) -> U;"}, {"sha": "824fd7f79c04b4c9adf262ed1dd3ad07616e9f60", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36f02f352392f216d778808818d0e4ed56714f3c/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36f02f352392f216d778808818d0e4ed56714f3c/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=36f02f352392f216d778808818d0e4ed56714f3c", "patch": "@@ -159,7 +159,7 @@\n #![feature(rtm_target_feature)]\n #![feature(f16c_target_feature)]\n #![feature(hexagon_target_feature)]\n-#![feature(const_fn_transmute)]\n+#![cfg_attr(bootstrap, feature(const_fn_transmute))]\n #![feature(abi_unadjusted)]\n #![feature(adx_target_feature)]\n #![feature(associated_type_bounds)]"}, {"sha": "68f593d97e9f74858c0194cb56f5726276802f07", "filename": "library/core/src/num/int_macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/36f02f352392f216d778808818d0e4ed56714f3c/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36f02f352392f216d778808818d0e4ed56714f3c/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs?ref=36f02f352392f216d778808818d0e4ed56714f3c", "patch": "@@ -2096,7 +2096,7 @@ macro_rules! int_impl {\n         #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n         // SAFETY: const sound because integers are plain old datatypes so we can always\n         // transmute them to arrays of bytes\n-        #[rustc_allow_const_fn_unstable(const_fn_transmute)]\n+        #[cfg_attr(bootstrap, rustc_allow_const_fn_unstable(const_fn_transmute))]\n         #[inline]\n         pub const fn to_ne_bytes(self) -> [u8; mem::size_of::<Self>()] {\n             // SAFETY: integers are plain old datatypes so we can always transmute them to\n@@ -2202,7 +2202,7 @@ macro_rules! int_impl {\n         #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n         // SAFETY: const sound because integers are plain old datatypes so we can always\n         // transmute to them\n-        #[rustc_allow_const_fn_unstable(const_fn_transmute)]\n+        #[cfg_attr(bootstrap, rustc_allow_const_fn_unstable(const_fn_transmute))]\n         #[inline]\n         pub const fn from_ne_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n             // SAFETY: integers are plain old datatypes so we can always transmute to them"}, {"sha": "94accb4b4904e33bd2fe2c1c75c90fa99a60494b", "filename": "library/core/src/num/uint_macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/36f02f352392f216d778808818d0e4ed56714f3c/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36f02f352392f216d778808818d0e4ed56714f3c/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs?ref=36f02f352392f216d778808818d0e4ed56714f3c", "patch": "@@ -1926,7 +1926,7 @@ macro_rules! uint_impl {\n         #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n         // SAFETY: const sound because integers are plain old datatypes so we can always\n         // transmute them to arrays of bytes\n-        #[rustc_allow_const_fn_unstable(const_fn_transmute)]\n+        #[cfg_attr(bootstrap, rustc_allow_const_fn_unstable(const_fn_transmute))]\n         #[inline]\n         pub const fn to_ne_bytes(self) -> [u8; mem::size_of::<Self>()] {\n             // SAFETY: integers are plain old datatypes so we can always transmute them to\n@@ -2032,7 +2032,7 @@ macro_rules! uint_impl {\n         #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n         // SAFETY: const sound because integers are plain old datatypes so we can always\n         // transmute to them\n-        #[rustc_allow_const_fn_unstable(const_fn_transmute)]\n+        #[cfg_attr(bootstrap, rustc_allow_const_fn_unstable(const_fn_transmute))]\n         #[inline]\n         pub const fn from_ne_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n             // SAFETY: integers are plain old datatypes so we can always transmute to them"}, {"sha": "e67c0d6487c3e82e89f9d6ef1af6f4988c4420c2", "filename": "library/core/src/str/converts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36f02f352392f216d778808818d0e4ed56714f3c/library%2Fcore%2Fsrc%2Fstr%2Fconverts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36f02f352392f216d778808818d0e4ed56714f3c/library%2Fcore%2Fsrc%2Fstr%2Fconverts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fconverts.rs?ref=36f02f352392f216d778808818d0e4ed56714f3c", "patch": "@@ -157,7 +157,7 @@ pub fn from_utf8_mut(v: &mut [u8]) -> Result<&mut str, Utf8Error> {\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_stable(feature = \"const_str_from_utf8_unchecked\", since = \"1.55.0\")]\n-#[rustc_allow_const_fn_unstable(const_fn_transmute)]\n+#[cfg_attr(bootstrap, rustc_allow_const_fn_unstable(const_fn_transmute))]\n pub const unsafe fn from_utf8_unchecked(v: &[u8]) -> &str {\n     // SAFETY: the caller must guarantee that the bytes `v` are valid UTF-8.\n     // Also relies on `&str` and `&[u8]` having the same layout."}, {"sha": "733473c867765441cf0dd52ecb453de48fbf51e0", "filename": "library/core/src/str/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36f02f352392f216d778808818d0e4ed56714f3c/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36f02f352392f216d778808818d0e4ed56714f3c/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs?ref=36f02f352392f216d778808818d0e4ed56714f3c", "patch": "@@ -231,7 +231,7 @@ impl str {\n     #[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.39.0\")]\n     #[inline(always)]\n     #[allow(unused_attributes)]\n-    #[rustc_allow_const_fn_unstable(const_fn_transmute)]\n+    #[cfg_attr(bootstrap, rustc_allow_const_fn_unstable(const_fn_transmute))]\n     pub const fn as_bytes(&self) -> &[u8] {\n         // SAFETY: const sound because we transmute two types with the same layout\n         unsafe { mem::transmute(self) }"}, {"sha": "88309875978e294cb811c8063925fccbe5f4eaf8", "filename": "library/std/src/net/ip.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/36f02f352392f216d778808818d0e4ed56714f3c/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36f02f352392f216d778808818d0e4ed56714f3c/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fip.rs?ref=36f02f352392f216d778808818d0e4ed56714f3c", "patch": "@@ -1087,7 +1087,7 @@ impl Ipv6Addr {\n     ///\n     /// let addr = Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff, 0xc00a, 0x2ff);\n     /// ```\n-    #[rustc_allow_const_fn_unstable(const_fn_transmute)]\n+    #[cfg_attr(bootstrap, rustc_allow_const_fn_unstable(const_fn_transmute))]\n     #[rustc_const_stable(feature = \"const_ipv6\", since = \"1.32.0\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n@@ -1149,7 +1149,7 @@ impl Ipv6Addr {\n     /// assert_eq!(Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff, 0xc00a, 0x2ff).segments(),\n     ///            [0, 0, 0, 0, 0, 0xffff, 0xc00a, 0x2ff]);\n     /// ```\n-    #[rustc_allow_const_fn_unstable(const_fn_transmute)]\n+    #[cfg_attr(bootstrap, rustc_allow_const_fn_unstable(const_fn_transmute))]\n     #[rustc_const_stable(feature = \"const_ipv6\", since = \"1.50.0\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]"}]}