{"sha": "f0bceba669159f7bac581d03412cf69ce4558685", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwYmNlYmE2NjkxNTlmN2JhYzU4MWQwMzQxMmNmNjljZTQ1NTg2ODU=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-07-17T23:20:51Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-07-31T17:47:27Z"}, "message": "rustc: Handle linker diagnostic from LLVM\n\nPreviously linker diagnostic were being hidden when two modules were linked\ntogether but failed to link. This commit fixes the situation by ensuring that we\nhave a diagnostic handler installed and also adds support for handling linker\ndiagnostics.", "tree": {"sha": "272b110894f0ea6ab0c5c8b786f10610eb7a7e7c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/272b110894f0ea6ab0c5c8b786f10610eb7a7e7c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f0bceba669159f7bac581d03412cf69ce4558685", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f0bceba669159f7bac581d03412cf69ce4558685", "html_url": "https://github.com/rust-lang/rust/commit/f0bceba669159f7bac581d03412cf69ce4558685", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f0bceba669159f7bac581d03412cf69ce4558685/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f89817997ac0aa100bf91997194ad85a7e59f743", "url": "https://api.github.com/repos/rust-lang/rust/commits/f89817997ac0aa100bf91997194ad85a7e59f743", "html_url": "https://github.com/rust-lang/rust/commit/f89817997ac0aa100bf91997194ad85a7e59f743"}], "stats": {"total": 85, "additions": 77, "deletions": 8}, "files": [{"sha": "b644422e79532a4aba355813fff735f5d2f88a90", "filename": "src/librustc_codegen_llvm/back/lto.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f0bceba669159f7bac581d03412cf69ce4558685/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0bceba669159f7bac581d03412cf69ce4558685/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs?ref=f0bceba669159f7bac581d03412cf69ce4558685", "patch": "@@ -11,7 +11,7 @@\n use back::bytecode::{DecodedBytecode, RLIB_BYTECODE_EXTENSION};\n use back::symbol_export;\n use back::write::{ModuleConfig, with_llvm_pmb, CodegenContext};\n-use back::write;\n+use back::write::{self, DiagnosticHandlers};\n use errors::{FatalError, Handler};\n use llvm::archive_ro::ArchiveRO;\n use llvm::{True, False};\n@@ -234,9 +234,17 @@ fn fat_lto(cgcx: &CodegenContext,\n     let module = modules.remove(costliest_module);\n     let mut serialized_bitcode = Vec::new();\n     {\n-        let llmod = module.llvm().expect(\"can't lto pre-codegened modules\").llmod();\n+        let (llcx, llmod) = {\n+            let llvm = module.llvm().expect(\"can't lto pre-codegened modules\");\n+            (&llvm.llcx, llvm.llmod())\n+        };\n         info!(\"using {:?} as a base module\", module.llmod_id);\n \n+        // The linking steps below may produce errors and diagnostics within LLVM\n+        // which we'd like to handle and print, so set up our diagnostic handlers\n+        // (which get unregistered when they go out of scope below).\n+        let _handler = DiagnosticHandlers::new(cgcx, diag_handler, llcx);\n+\n         // For all other modules we codegened we'll need to link them into our own\n         // bitcode. All modules were codegened in their own LLVM context, however,\n         // and we want to move everything to the same LLVM context. Currently the"}, {"sha": "209c3a23c5cc35e1f6a97350825b3d61b4e5bae1", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f0bceba669159f7bac581d03412cf69ce4558685/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0bceba669159f7bac581d03412cf69ce4558685/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=f0bceba669159f7bac581d03412cf69ce4558685", "patch": "@@ -397,15 +397,15 @@ impl CodegenContext {\n     }\n }\n \n-struct DiagnosticHandlers<'a> {\n+pub struct DiagnosticHandlers<'a> {\n     data: *mut (&'a CodegenContext, &'a Handler),\n     llcx: &'a llvm::Context,\n }\n \n impl<'a> DiagnosticHandlers<'a> {\n-    fn new(cgcx: &'a CodegenContext,\n-           handler: &'a Handler,\n-           llcx: &'a llvm::Context) -> Self {\n+    pub fn new(cgcx: &'a CodegenContext,\n+               handler: &'a Handler,\n+               llcx: &'a llvm::Context) -> Self {\n         let data = Box::into_raw(Box::new((cgcx, handler)));\n         unsafe {\n             llvm::LLVMRustSetInlineAsmDiagnosticHandler(llcx, inline_asm_handler, data as *mut _);\n@@ -475,10 +475,11 @@ unsafe extern \"C\" fn diagnostic_handler(info: &DiagnosticInfo, user: *mut c_void\n                                                 opt.message));\n             }\n         }\n-        llvm::diagnostic::PGO(diagnostic_ref) => {\n+        llvm::diagnostic::PGO(diagnostic_ref) |\n+        llvm::diagnostic::Linker(diagnostic_ref) => {\n             let msg = llvm::build_string(|s| {\n                 llvm::LLVMRustWriteDiagnosticInfoToString(diagnostic_ref, s)\n-            }).expect(\"non-UTF8 PGO diagnostic\");\n+            }).expect(\"non-UTF8 diagnostic\");\n             diag_handler.warn(&msg);\n         }\n         llvm::diagnostic::UnknownDiagnostic(..) => {},"}, {"sha": "c41a5f74ae30282a598717aaa843f95fb9c348c9", "filename": "src/librustc_codegen_llvm/llvm/diagnostic.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0bceba669159f7bac581d03412cf69ce4558685/src%2Flibrustc_codegen_llvm%2Fllvm%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0bceba669159f7bac581d03412cf69ce4558685/src%2Flibrustc_codegen_llvm%2Fllvm%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fdiagnostic.rs?ref=f0bceba669159f7bac581d03412cf69ce4558685", "patch": "@@ -126,6 +126,7 @@ pub enum Diagnostic<'ll> {\n     Optimization(OptimizationDiagnostic<'ll>),\n     InlineAsm(InlineAsmDiagnostic<'ll>),\n     PGO(&'ll DiagnosticInfo),\n+    Linker(&'ll DiagnosticInfo),\n \n     /// LLVM has other types that we do not wrap here.\n     UnknownDiagnostic(&'ll DiagnosticInfo),\n@@ -168,6 +169,9 @@ impl Diagnostic<'ll> {\n             Dk::PGOProfile => {\n                 PGO(di)\n             }\n+            Dk::Linker => {\n+                Linker(di)\n+            }\n \n             _ => UnknownDiagnostic(di),\n         }"}, {"sha": "989498ea92bcefd770af80cee557ac8f6741648b", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f0bceba669159f7bac581d03412cf69ce4558685/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0bceba669159f7bac581d03412cf69ce4558685/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=f0bceba669159f7bac581d03412cf69ce4558685", "patch": "@@ -332,6 +332,7 @@ pub enum DiagnosticKind {\n     OptimizationRemarkOther,\n     OptimizationFailure,\n     PGOProfile,\n+    Linker,\n }\n \n /// LLVMRustArchiveKind"}, {"sha": "4bcb4fd7ad385a4ec1c0db8593a65cb578d248e6", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f0bceba669159f7bac581d03412cf69ce4558685/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/f0bceba669159f7bac581d03412cf69ce4558685/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=f0bceba669159f7bac581d03412cf69ce4558685", "patch": "@@ -984,6 +984,7 @@ enum class LLVMRustDiagnosticKind {\n   OptimizationRemarkOther,\n   OptimizationFailure,\n   PGOProfile,\n+  Linker,\n };\n \n static LLVMRustDiagnosticKind toRust(DiagnosticKind Kind) {\n@@ -1008,6 +1009,8 @@ static LLVMRustDiagnosticKind toRust(DiagnosticKind Kind) {\n     return LLVMRustDiagnosticKind::OptimizationRemarkAnalysisAliasing;\n   case DK_PGOProfile:\n     return LLVMRustDiagnosticKind::PGOProfile;\n+  case DK_Linker:\n+    return LLVMRustDiagnosticKind::Linker;\n   default:\n     return (Kind >= DK_FirstRemark && Kind <= DK_LastRemark)\n                ? LLVMRustDiagnosticKind::OptimizationRemarkOther"}, {"sha": "ea09327bd19e140028b29f3f26325ea619b4f1e0", "filename": "src/test/compile-fail/auxiliary/lto-duplicate-symbols1.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f0bceba669159f7bac581d03412cf69ce4558685/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Flto-duplicate-symbols1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0bceba669159f7bac581d03412cf69ce4558685/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Flto-duplicate-symbols1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Flto-duplicate-symbols1.rs?ref=f0bceba669159f7bac581d03412cf69ce4558685", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// no-prefer-dynamic\n+\n+#![crate_type = \"rlib\"]\n+\n+#[no_mangle]\n+pub extern fn foo() {}"}, {"sha": "ea09327bd19e140028b29f3f26325ea619b4f1e0", "filename": "src/test/compile-fail/auxiliary/lto-duplicate-symbols2.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f0bceba669159f7bac581d03412cf69ce4558685/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Flto-duplicate-symbols2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0bceba669159f7bac581d03412cf69ce4558685/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Flto-duplicate-symbols2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Flto-duplicate-symbols2.rs?ref=f0bceba669159f7bac581d03412cf69ce4558685", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// no-prefer-dynamic\n+\n+#![crate_type = \"rlib\"]\n+\n+#[no_mangle]\n+pub extern fn foo() {}"}, {"sha": "9c1dbfc2af93bdc6ab20a443d511019f28d87182", "filename": "src/test/compile-fail/lto-duplicate-symbols.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f0bceba669159f7bac581d03412cf69ce4558685/src%2Ftest%2Fcompile-fail%2Flto-duplicate-symbols.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0bceba669159f7bac581d03412cf69ce4558685/src%2Ftest%2Fcompile-fail%2Flto-duplicate-symbols.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flto-duplicate-symbols.rs?ref=f0bceba669159f7bac581d03412cf69ce4558685", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:lto-duplicate-symbols1.rs\n+// aux-build:lto-duplicate-symbols2.rs\n+// error-pattern:Linking globals named 'foo': symbol multiply defined!\n+// compile-flags: -C lto\n+// no-prefer-dynamic\n+\n+extern crate lto_duplicate_symbols1;\n+extern crate lto_duplicate_symbols2;\n+\n+fn main() {}"}]}