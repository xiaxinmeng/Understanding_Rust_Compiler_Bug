{"sha": "cb4c969ba6ec61007ac1bbdaeed7eb5f21859949", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiNGM5NjliYTZlYzYxMDA3YWMxYmJkYWVlZDdlYjVmMjE4NTk5NDk=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-06-03T23:14:29Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-06-03T23:15:14Z"}, "message": "rustc: Add a \"smallintmap\" implementation", "tree": {"sha": "5650e438fd25d75c682883156869f848403bbb81", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5650e438fd25d75c682883156869f848403bbb81"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb4c969ba6ec61007ac1bbdaeed7eb5f21859949", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb4c969ba6ec61007ac1bbdaeed7eb5f21859949", "html_url": "https://github.com/rust-lang/rust/commit/cb4c969ba6ec61007ac1bbdaeed7eb5f21859949", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb4c969ba6ec61007ac1bbdaeed7eb5f21859949/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "088ab03fdbdd2fad29b678f5eeaadde4e15cb205", "url": "https://api.github.com/repos/rust-lang/rust/commits/088ab03fdbdd2fad29b678f5eeaadde4e15cb205", "html_url": "https://github.com/rust-lang/rust/commit/088ab03fdbdd2fad29b678f5eeaadde4e15cb205"}], "stats": {"total": 54, "additions": 54, "deletions": 0}, "files": [{"sha": "ca586eb6f05e623dfb504648ff23932d181e3852", "filename": "src/lib/smallintmap.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/cb4c969ba6ec61007ac1bbdaeed7eb5f21859949/src%2Flib%2Fsmallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb4c969ba6ec61007ac1bbdaeed7eb5f21859949/src%2Flib%2Fsmallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fsmallintmap.rs?ref=cb4c969ba6ec61007ac1bbdaeed7eb5f21859949", "patch": "@@ -0,0 +1,40 @@\n+/// A simple map based on a vector for small integer keys. Space requirements\n+/// are O(highest integer key).\n+\n+import option::none;\n+import option::some;\n+\n+type smallintmap[T] = rec(mutable vec[mutable option::t[T]] v);\n+\n+fn mk[T]() -> smallintmap[T] {\n+    let vec[mutable option::t[T]] v = [mutable];\n+    ret rec(mutable v=v);\n+}\n+\n+fn insert[T](&smallintmap[T] m, uint key, &T val) {\n+    vec::grow_set[option::t[T]](m.v, key, none[T], some[T](val));\n+}\n+\n+fn find[T](&smallintmap[T] m, uint key) -> option::t[T] {\n+    if (key < vec::len[option::t[T]](m.v)) { ret m.v.(key); }\n+    ret none[T];\n+}\n+\n+fn get[T](&smallintmap[T] m, uint key) -> T {\n+    alt (find[T](m, key)) {\n+        case (none[T]) {\n+            log_err \"smallintmap::get(): key not present\";\n+            fail;\n+        }\n+        case (some[T](?v)) { ret v; }\n+    }\n+}\n+\n+fn contains_key[T](&smallintmap[T] m, uint key) -> bool {\n+    ret !option::is_none(find[T](m, key));\n+}\n+\n+fn truncate[T](&smallintmap[T] m, uint len) {\n+    m.v = vec::slice_mut[option::t[T]](m.v, 0u, len);\n+}\n+"}, {"sha": "3619ede40f833cd9a9f9e8c8407fb5a72622171a", "filename": "src/lib/std.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cb4c969ba6ec61007ac1bbdaeed7eb5f21859949/src%2Flib%2Fstd.rc", "raw_url": "https://github.com/rust-lang/rust/raw/cb4c969ba6ec61007ac1bbdaeed7eb5f21859949/src%2Flib%2Fstd.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fstd.rc?ref=cb4c969ba6ec61007ac1bbdaeed7eb5f21859949", "patch": "@@ -76,6 +76,7 @@ mod box;\n mod getopts;\n mod term;\n mod time;\n+mod smallintmap;\n \n // Local Variables:\n // mode: rust;"}, {"sha": "8259e494e2532a1cb6f98b7149aaa3b46e601737", "filename": "src/lib/vec.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/cb4c969ba6ec61007ac1bbdaeed7eb5f21859949/src%2Flib%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb4c969ba6ec61007ac1bbdaeed7eb5f21859949/src%2Flib%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fvec.rs?ref=cb4c969ba6ec61007ac1bbdaeed7eb5f21859949", "patch": "@@ -163,6 +163,19 @@ fn slice[T](array[T] v, uint start, uint end) -> vec[T] {\n     ret result;\n }\n \n+// FIXME: Should go away eventually.\n+fn slice_mut[T](array[T] v, uint start, uint end) -> vec[mutable T] {\n+    assert (start <= end);\n+    assert (end <= len[T](v));\n+    auto result = alloc_mut[T](end - start);\n+    let uint i = start;\n+    while (i < end) {\n+        result += [mutable v.(i)];\n+        i += 1u;\n+    }\n+    ret result;\n+}\n+\n fn shift[T](&mutable array[T] v) -> T {\n     auto ln = len[T](v);\n     assert (ln > 0u);"}]}