{"sha": "b1b558f1f0cf5caab5c44c88e7050cba71c6be0d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxYjU1OGYxZjBjZjVjYWFiNWM0NGM4OGU3MDUwY2JhNzFjNmJlMGQ=", "commit": {"author": {"name": "Markus Westerlind", "email": "markus.westerlind@distilnetworks.com", "date": "2020-03-07T15:58:29Z"}, "committer": {"name": "Markus Westerlind", "email": "markus.westerlind@distilnetworks.com", "date": "2020-03-07T21:35:37Z"}, "message": "refactor: Exhaustive matching in method/probe.rs", "tree": {"sha": "7e92c5b8fd26862b84b5801e57de2feb0a74aaa1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e92c5b8fd26862b84b5801e57de2feb0a74aaa1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b1b558f1f0cf5caab5c44c88e7050cba71c6be0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b1b558f1f0cf5caab5c44c88e7050cba71c6be0d", "html_url": "https://github.com/rust-lang/rust/commit/b1b558f1f0cf5caab5c44c88e7050cba71c6be0d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b1b558f1f0cf5caab5c44c88e7050cba71c6be0d/comments", "author": null, "committer": null, "parents": [{"sha": "9381e8178b49636d4604e4ec0f1263960691c958", "url": "https://api.github.com/repos/rust-lang/rust/commits/9381e8178b49636d4604e4ec0f1263960691c958", "html_url": "https://github.com/rust-lang/rust/commit/9381e8178b49636d4604e4ec0f1263960691c958"}], "stats": {"total": 114, "additions": 39, "deletions": 75}, "files": [{"sha": "179ed2f55d557f145e693a2590fdbf1b22c14df2", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 39, "deletions": 75, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/b1b558f1f0cf5caab5c44c88e7050cba71c6be0d/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1b558f1f0cf5caab5c44c88e7050cba71c6be0d/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=b1b558f1f0cf5caab5c44c88e7050cba71c6be0d", "patch": "@@ -572,7 +572,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n     }\n \n     fn assemble_inherent_candidates(&mut self) {\n-        let steps = self.steps.clone();\n+        let steps = Lrc::clone(&self.steps);\n         for step in steps.iter() {\n             self.assemble_probe(&step.self_ty);\n         }\n@@ -635,87 +635,51 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                 self.assemble_inherent_impl_for_primitive(lang_def_id);\n             }\n             ty::Slice(_) => {\n-                let lang_def_id = lang_items.slice_impl();\n-                self.assemble_inherent_impl_for_primitive(lang_def_id);\n-\n-                let lang_def_id = lang_items.slice_u8_impl();\n-                self.assemble_inherent_impl_for_primitive(lang_def_id);\n-\n-                let lang_def_id = lang_items.slice_alloc_impl();\n-                self.assemble_inherent_impl_for_primitive(lang_def_id);\n-\n-                let lang_def_id = lang_items.slice_u8_alloc_impl();\n-                self.assemble_inherent_impl_for_primitive(lang_def_id);\n-            }\n-            ty::RawPtr(ty::TypeAndMut { ty: _, mutbl: hir::Mutability::Not }) => {\n-                let lang_def_id = lang_items.const_ptr_impl();\n-                self.assemble_inherent_impl_for_primitive(lang_def_id);\n-            }\n-            ty::RawPtr(ty::TypeAndMut { ty: _, mutbl: hir::Mutability::Mut }) => {\n-                let lang_def_id = lang_items.mut_ptr_impl();\n-                self.assemble_inherent_impl_for_primitive(lang_def_id);\n-            }\n-            ty::Int(ast::IntTy::I8) => {\n-                let lang_def_id = lang_items.i8_impl();\n-                self.assemble_inherent_impl_for_primitive(lang_def_id);\n-            }\n-            ty::Int(ast::IntTy::I16) => {\n-                let lang_def_id = lang_items.i16_impl();\n-                self.assemble_inherent_impl_for_primitive(lang_def_id);\n-            }\n-            ty::Int(ast::IntTy::I32) => {\n-                let lang_def_id = lang_items.i32_impl();\n-                self.assemble_inherent_impl_for_primitive(lang_def_id);\n-            }\n-            ty::Int(ast::IntTy::I64) => {\n-                let lang_def_id = lang_items.i64_impl();\n-                self.assemble_inherent_impl_for_primitive(lang_def_id);\n-            }\n-            ty::Int(ast::IntTy::I128) => {\n-                let lang_def_id = lang_items.i128_impl();\n-                self.assemble_inherent_impl_for_primitive(lang_def_id);\n-            }\n-            ty::Int(ast::IntTy::Isize) => {\n-                let lang_def_id = lang_items.isize_impl();\n-                self.assemble_inherent_impl_for_primitive(lang_def_id);\n-            }\n-            ty::Uint(ast::UintTy::U8) => {\n-                let lang_def_id = lang_items.u8_impl();\n-                self.assemble_inherent_impl_for_primitive(lang_def_id);\n-            }\n-            ty::Uint(ast::UintTy::U16) => {\n-                let lang_def_id = lang_items.u16_impl();\n-                self.assemble_inherent_impl_for_primitive(lang_def_id);\n-            }\n-            ty::Uint(ast::UintTy::U32) => {\n-                let lang_def_id = lang_items.u32_impl();\n-                self.assemble_inherent_impl_for_primitive(lang_def_id);\n-            }\n-            ty::Uint(ast::UintTy::U64) => {\n-                let lang_def_id = lang_items.u64_impl();\n-                self.assemble_inherent_impl_for_primitive(lang_def_id);\n+                for &lang_def_id in &[\n+                    lang_items.slice_impl(),\n+                    lang_items.slice_u8_impl(),\n+                    lang_items.slice_alloc_impl(),\n+                    lang_items.slice_u8_alloc_impl(),\n+                ] {\n+                    self.assemble_inherent_impl_for_primitive(lang_def_id);\n+                }\n             }\n-            ty::Uint(ast::UintTy::U128) => {\n-                let lang_def_id = lang_items.u128_impl();\n+            ty::RawPtr(ty::TypeAndMut { ty: _, mutbl }) => {\n+                let lang_def_id = match mutbl {\n+                    hir::Mutability::Not => lang_items.const_ptr_impl(),\n+                    hir::Mutability::Mut => lang_items.mut_ptr_impl(),\n+                };\n                 self.assemble_inherent_impl_for_primitive(lang_def_id);\n             }\n-            ty::Uint(ast::UintTy::Usize) => {\n-                let lang_def_id = lang_items.usize_impl();\n+            ty::Int(i) => {\n+                let lang_def_id = match i {\n+                    ast::IntTy::I8 => lang_items.i8_impl(),\n+                    ast::IntTy::I16 => lang_items.i16_impl(),\n+                    ast::IntTy::I32 => lang_items.i32_impl(),\n+                    ast::IntTy::I64 => lang_items.i64_impl(),\n+                    ast::IntTy::I128 => lang_items.i128_impl(),\n+                    ast::IntTy::Isize => lang_items.isize_impl(),\n+                };\n                 self.assemble_inherent_impl_for_primitive(lang_def_id);\n             }\n-            ty::Float(ast::FloatTy::F32) => {\n-                let lang_def_id = lang_items.f32_impl();\n-                self.assemble_inherent_impl_for_primitive(lang_def_id);\n-\n-                let lang_def_id = lang_items.f32_runtime_impl();\n+            ty::Uint(i) => {\n+                let lang_def_id = match i {\n+                    ast::UintTy::U8 => lang_items.u8_impl(),\n+                    ast::UintTy::U16 => lang_items.u16_impl(),\n+                    ast::UintTy::U32 => lang_items.u32_impl(),\n+                    ast::UintTy::U64 => lang_items.u64_impl(),\n+                    ast::UintTy::U128 => lang_items.u128_impl(),\n+                    ast::UintTy::Usize => lang_items.usize_impl(),\n+                };\n                 self.assemble_inherent_impl_for_primitive(lang_def_id);\n             }\n-            ty::Float(ast::FloatTy::F64) => {\n-                let lang_def_id = lang_items.f64_impl();\n-                self.assemble_inherent_impl_for_primitive(lang_def_id);\n-\n-                let lang_def_id = lang_items.f64_runtime_impl();\n-                self.assemble_inherent_impl_for_primitive(lang_def_id);\n+            ty::Float(f) => {\n+                let (lang_def_id1, lang_def_id2) = match f {\n+                    ast::FloatTy::F32 => (lang_items.f32_impl(), lang_items.f32_runtime_impl()),\n+                    ast::FloatTy::F64 => (lang_items.f64_impl(), lang_items.f64_runtime_impl()),\n+                };\n+                self.assemble_inherent_impl_for_primitive(lang_def_id1);\n+                self.assemble_inherent_impl_for_primitive(lang_def_id2);\n             }\n             _ => {}\n         }"}]}