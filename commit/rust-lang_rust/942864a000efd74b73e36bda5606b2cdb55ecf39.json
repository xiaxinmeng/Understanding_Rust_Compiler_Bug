{"sha": "942864a000efd74b73e36bda5606b2cdb55ecf39", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0Mjg2NGEwMDBlZmQ3NGI3M2UzNmJkYTU2MDZiMmNkYjU1ZWNmMzk=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-10-20T12:45:08Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-11-03T12:35:09Z"}, "message": "Move cg_llvm::back::linker to cg_utils", "tree": {"sha": "fef4edea7e3d19df313b0ad149238ecf4ec91b6b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fef4edea7e3d19df313b0ad149238ecf4ec91b6b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/942864a000efd74b73e36bda5606b2cdb55ecf39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/942864a000efd74b73e36bda5606b2cdb55ecf39", "html_url": "https://github.com/rust-lang/rust/commit/942864a000efd74b73e36bda5606b2cdb55ecf39", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/942864a000efd74b73e36bda5606b2cdb55ecf39/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b6e8f9dbdc4f154d799589ce5e21c020c51f2123", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6e8f9dbdc4f154d799589ce5e21c020c51f2123", "html_url": "https://github.com/rust-lang/rust/commit/b6e8f9dbdc4f154d799589ce5e21c020c51f2123"}], "stats": {"total": 147, "additions": 80, "deletions": 67}, "files": [{"sha": "ce4cb1ea3a0423cac94695cb53dba75ab751be8d", "filename": "src/librustc_codegen_llvm/back/archive.rs", "status": "modified", "additions": 1, "deletions": 23, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/942864a000efd74b73e36bda5606b2cdb55ecf39/src%2Flibrustc_codegen_llvm%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/942864a000efd74b73e36bda5606b2cdb55ecf39/src%2Flibrustc_codegen_llvm%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Farchive.rs?ref=942864a000efd74b73e36bda5606b2cdb55ecf39", "patch": "@@ -52,28 +52,6 @@ enum Addition {\n     },\n }\n \n-pub fn find_library(name: &str, search_paths: &[PathBuf], sess: &Session)\n-                    -> PathBuf {\n-    // On Windows, static libraries sometimes show up as libfoo.a and other\n-    // times show up as foo.lib\n-    let oslibname = format!(\"{}{}{}\",\n-                            sess.target.target.options.staticlib_prefix,\n-                            name,\n-                            sess.target.target.options.staticlib_suffix);\n-    let unixlibname = format!(\"lib{}.a\", name);\n-\n-    for path in search_paths {\n-        debug!(\"looking for {} inside {:?}\", name, path);\n-        let test = path.join(&oslibname);\n-        if test.exists() { return test }\n-        if oslibname != unixlibname {\n-            let test = path.join(&unixlibname);\n-            if test.exists() { return test }\n-        }\n-    }\n-    sess.fatal(&format!(\"could not find native static library `{}`, \\\n-                         perhaps an -L flag is missing?\", name));\n-}\n \n fn is_relevant_child(c: &Child) -> bool {\n     match c.name() {\n@@ -128,7 +106,7 @@ impl<'a> ArchiveBuilder<'a> {\n     /// Adds all of the contents of a native library to this archive. This will\n     /// search in the relevant locations for a library named `name`.\n     pub fn add_native_library(&mut self, name: &str) {\n-        let location = find_library(name, &self.config.lib_search_paths,\n+        let location = ::rustc_codegen_utils::find_library(name, &self.config.lib_search_paths,\n                                     self.config.sess);\n         self.add_archive(&location, |_| false).unwrap_or_else(|e| {\n             self.config.sess.fatal(&format!(\"failed to add native library {}: {}\","}, {"sha": "dd95c3d986299491466baebddfd2d84a1c39e6b9", "filename": "src/librustc_codegen_llvm/back/link.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/942864a000efd74b73e36bda5606b2cdb55ecf39/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/942864a000efd74b73e36bda5606b2cdb55ecf39/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs?ref=942864a000efd74b73e36bda5606b2cdb55ecf39", "patch": "@@ -12,8 +12,6 @@ use back::wasm;\n use cc::windows_registry;\n use super::archive::{ArchiveBuilder, ArchiveConfig};\n use super::bytecode::RLIB_BYTECODE_EXTENSION;\n-use super::linker::Linker;\n-use super::command::Command;\n use super::rpath::RPathConfig;\n use super::rpath;\n use metadata::METADATA_FILENAME;\n@@ -31,6 +29,8 @@ use rustc::hir::def_id::CrateNum;\n use tempfile::{Builder as TempFileBuilder, TempDir};\n use rustc_target::spec::{PanicStrategy, RelroLevel, LinkerFlavor};\n use rustc_data_structures::fx::FxHashSet;\n+use rustc_codegen_utils::linker::Linker;\n+use rustc_codegen_utils::command::Command;\n use context::get_reloc_model;\n use llvm;\n \n@@ -701,7 +701,8 @@ fn link_natively(sess: &Session,\n     }\n \n     {\n-        let mut linker = codegen_results.linker_info.to_linker(cmd, &sess, flavor);\n+        let target_cpu = ::llvm_util::target_cpu(sess);\n+        let mut linker = codegen_results.linker_info.to_linker(cmd, &sess, flavor, target_cpu);\n         link_args(&mut *linker, flavor, sess, crate_type, tmpdir,\n                   out_filename, codegen_results);\n         cmd = linker.finalize();"}, {"sha": "8f940e0d22a83db3000da3eea32c9824e3919133", "filename": "src/librustc_codegen_llvm/back/lto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/942864a000efd74b73e36bda5606b2cdb55ecf39/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/942864a000efd74b73e36bda5606b2cdb55ecf39/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs?ref=942864a000efd74b73e36bda5606b2cdb55ecf39", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n use back::bytecode::{DecodedBytecode, RLIB_BYTECODE_EXTENSION};\n-use back::symbol_export;\n use back::write::{ModuleConfig, with_llvm_pmb, CodegenContext};\n use back::write::{self, DiagnosticHandlers, pre_lto_bitcode_filename};\n use errors::{FatalError, Handler};\n@@ -24,6 +23,7 @@ use rustc::middle::exported_symbols::SymbolExportLevel;\n use rustc::session::config::{self, Lto};\n use rustc::util::common::time_ext;\n use rustc_data_structures::fx::FxHashMap;\n+use rustc_codegen_utils::symbol_export;\n use time_graph::Timeline;\n use {ModuleCodegen, ModuleLlvm, ModuleKind};\n "}, {"sha": "a88ce69604b356fb90d5f85df4edf349e4739827", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/942864a000efd74b73e36bda5606b2cdb55ecf39/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/942864a000efd74b73e36bda5606b2cdb55ecf39/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=942864a000efd74b73e36bda5606b2cdb55ecf39", "patch": "@@ -12,9 +12,6 @@ use attributes;\n use back::bytecode::{self, RLIB_BYTECODE_EXTENSION};\n use back::lto::{self, ModuleBuffer, ThinBuffer, SerializedModule};\n use back::link::{self, get_linker, remove};\n-use back::command::Command;\n-use back::linker::LinkerInfo;\n-use back::symbol_export::ExportedSymbols;\n use base;\n use consts;\n use memmap;\n@@ -38,6 +35,9 @@ use rustc::util::common::{time_ext, time_depth, set_time_depth, print_time_passe\n use rustc_fs_util::{path2cstr, link_or_copy};\n use rustc_data_structures::small_c_str::SmallCStr;\n use rustc_data_structures::svh::Svh;\n+use rustc_codegen_utils::command::Command;\n+use rustc_codegen_utils::linker::LinkerInfo;\n+use rustc_codegen_utils::symbol_export::ExportedSymbols;\n use errors::{self, Handler, Level, DiagnosticBuilder, FatalError, DiagnosticId};\n use errors::emitter::{Emitter};\n use syntax::attr;"}, {"sha": "f64cf0c7364dd40f701c73e32931ea90ba10f59d", "filename": "src/librustc_codegen_llvm/lib.rs", "status": "modified", "additions": 5, "deletions": 25, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/942864a000efd74b73e36bda5606b2cdb55ecf39/src%2Flibrustc_codegen_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/942864a000efd74b73e36bda5606b2cdb55ecf39/src%2Flibrustc_codegen_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Flib.rs?ref=942864a000efd74b73e36bda5606b2cdb55ecf39", "patch": "@@ -71,7 +71,6 @@ use back::bytecode::RLIB_BYTECODE_EXTENSION;\n \n pub use llvm_util::target_features;\n use std::any::Any;\n-use std::path::{PathBuf};\n use std::sync::mpsc;\n use rustc_data_structures::sync::Lrc;\n \n@@ -87,20 +86,17 @@ use rustc::util::time_graph;\n use rustc::util::nodemap::{FxHashSet, FxHashMap};\n use rustc::util::profiling::ProfileCategory;\n use rustc_mir::monomorphize;\n+use rustc_codegen_utils::{CompiledModule, ModuleKind};\n use rustc_codegen_utils::codegen_backend::CodegenBackend;\n use rustc_data_structures::svh::Svh;\n \n mod diagnostics;\n \n mod back {\n-    pub use rustc_codegen_utils::symbol_names;\n     mod archive;\n     pub mod bytecode;\n-    mod command;\n-    pub mod linker;\n     pub mod link;\n     pub mod lto;\n-    pub mod symbol_export;\n     pub mod write;\n     mod rpath;\n     pub mod wasm;\n@@ -194,14 +190,14 @@ impl CodegenBackend for LlvmCodegenBackend {\n     }\n \n     fn provide(&self, providers: &mut ty::query::Providers) {\n-        back::symbol_names::provide(providers);\n-        back::symbol_export::provide(providers);\n+        rustc_codegen_utils::symbol_export::provide(providers);\n+        rustc_codegen_utils::symbol_names::provide(providers);\n         base::provide(providers);\n         attributes::provide(providers);\n     }\n \n     fn provide_extern(&self, providers: &mut ty::query::Providers) {\n-        back::symbol_export::provide_extern(providers);\n+        rustc_codegen_utils::symbol_export::provide_extern(providers);\n         base::provide_extern(providers);\n         attributes::provide_extern(providers);\n     }\n@@ -281,13 +277,6 @@ struct CachedModuleCodegen {\n     source: WorkProduct,\n }\n \n-#[derive(Copy, Clone, Debug, PartialEq)]\n-enum ModuleKind {\n-    Regular,\n-    Metadata,\n-    Allocator,\n-}\n-\n impl ModuleCodegen {\n     fn into_compiled_module(self,\n                             emit_obj: bool,\n@@ -321,15 +310,6 @@ impl ModuleCodegen {\n     }\n }\n \n-#[derive(Debug)]\n-struct CompiledModule {\n-    name: String,\n-    kind: ModuleKind,\n-    object: Option<PathBuf>,\n-    bytecode: Option<PathBuf>,\n-    bytecode_compressed: Option<PathBuf>,\n-}\n-\n struct ModuleLlvm {\n     llcx: &'static mut llvm::Context,\n     llmod_raw: *const llvm::Module,\n@@ -377,7 +357,7 @@ struct CodegenResults {\n     crate_hash: Svh,\n     metadata: rustc::middle::cstore::EncodedMetadata,\n     windows_subsystem: Option<String>,\n-    linker_info: back::linker::LinkerInfo,\n+    linker_info: rustc_codegen_utils::linker::LinkerInfo,\n     crate_info: CrateInfo,\n }\n "}, {"sha": "3a09e8e4b56066e7d05a36d353a746fe70ba4dfa", "filename": "src/librustc_codegen_utils/Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/942864a000efd74b73e36bda5606b2cdb55ecf39/src%2Flibrustc_codegen_utils%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/942864a000efd74b73e36bda5606b2cdb55ecf39/src%2Flibrustc_codegen_utils%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2FCargo.toml?ref=942864a000efd74b73e36bda5606b2cdb55ecf39", "patch": "@@ -13,9 +13,11 @@ test = false\n flate2 = \"1.0\"\n log = \"0.4\"\n \n+serialize = { path = \"../libserialize\" }\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n rustc = { path = \"../librustc\" }\n+rustc_allocator = { path = \"../librustc_allocator\" }\n rustc_target = { path = \"../librustc_target\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_mir = { path = \"../librustc_mir\" }"}, {"sha": "9ebbdd7c3c936eefdde8466292c4cb34f5337458", "filename": "src/librustc_codegen_utils/command.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/942864a000efd74b73e36bda5606b2cdb55ecf39/src%2Flibrustc_codegen_utils%2Fcommand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/942864a000efd74b73e36bda5606b2cdb55ecf39/src%2Flibrustc_codegen_utils%2Fcommand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fcommand.rs?ref=942864a000efd74b73e36bda5606b2cdb55ecf39", "previous_filename": "src/librustc_codegen_llvm/back/command.rs"}, {"sha": "89cf19d047216d797cbdd40d793342a7d9e39e56", "filename": "src/librustc_codegen_utils/lib.rs", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/942864a000efd74b73e36bda5606b2cdb55ecf39/src%2Flibrustc_codegen_utils%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/942864a000efd74b73e36bda5606b2cdb55ecf39/src%2Flibrustc_codegen_utils%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Flib.rs?ref=942864a000efd74b73e36bda5606b2cdb55ecf39", "patch": "@@ -30,8 +30,10 @@ extern crate flate2;\n #[macro_use]\n extern crate log;\n \n+extern crate serialize;\n #[macro_use]\n extern crate rustc;\n+extern crate rustc_allocator;\n extern crate rustc_target;\n extern crate rustc_mir;\n extern crate rustc_incremental;\n@@ -40,10 +42,16 @@ extern crate syntax_pos;\n #[macro_use] extern crate rustc_data_structures;\n extern crate rustc_metadata_utils;\n \n+use std::path::PathBuf;\n+\n+use rustc::session::Session;\n use rustc::ty::TyCtxt;\n \n+pub mod command;\n pub mod link;\n+pub mod linker;\n pub mod codegen_backend;\n+pub mod symbol_export;\n pub mod symbol_names;\n pub mod symbol_names_test;\n \n@@ -61,4 +69,43 @@ pub fn check_for_rustc_errors_attr(tcx: TyCtxt) {\n     }\n }\n \n+#[derive(Copy, Clone, Debug, PartialEq)]\n+pub enum ModuleKind {\n+    Regular,\n+    Metadata,\n+    Allocator,\n+}\n+\n+#[derive(Debug)]\n+pub struct CompiledModule {\n+    pub name: String,\n+    pub kind: ModuleKind,\n+    pub object: Option<PathBuf>,\n+    pub bytecode: Option<PathBuf>,\n+    pub bytecode_compressed: Option<PathBuf>,\n+}\n+\n+pub fn find_library(name: &str, search_paths: &[PathBuf], sess: &Session)\n+                    -> PathBuf {\n+    // On Windows, static libraries sometimes show up as libfoo.a and other\n+    // times show up as foo.lib\n+    let oslibname = format!(\"{}{}{}\",\n+                            sess.target.target.options.staticlib_prefix,\n+                            name,\n+                            sess.target.target.options.staticlib_suffix);\n+    let unixlibname = format!(\"lib{}.a\", name);\n+\n+    for path in search_paths {\n+        debug!(\"looking for {} inside {:?}\", name, path);\n+        let test = path.join(&oslibname);\n+        if test.exists() { return test }\n+        if oslibname != unixlibname {\n+            let test = path.join(&unixlibname);\n+            if test.exists() { return test }\n+        }\n+    }\n+    sess.fatal(&format!(\"could not find native static library `{}`, \\\n+                         perhaps an -L flag is missing?\", name));\n+}\n+\n __build_diagnostic_array! { librustc_codegen_utils, DIAGNOSTICS }"}, {"sha": "c1f41fd509a143fbfa03769c5b315dc163353305", "filename": "src/librustc_codegen_utils/linker.rs", "status": "renamed", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/942864a000efd74b73e36bda5606b2cdb55ecf39/src%2Flibrustc_codegen_utils%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/942864a000efd74b73e36bda5606b2cdb55ecf39/src%2Flibrustc_codegen_utils%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Flinker.rs?ref=942864a000efd74b73e36bda5606b2cdb55ecf39", "patch": "@@ -15,9 +15,7 @@ use std::io::prelude::*;\n use std::io::{self, BufWriter};\n use std::path::{Path, PathBuf};\n \n-use back::archive;\n-use back::command::Command;\n-use back::symbol_export;\n+use command::Command;\n use rustc::hir::def_id::{LOCAL_CRATE, CrateNum};\n use rustc::middle::dependency_format::Linkage;\n use rustc::session::Session;\n@@ -26,7 +24,6 @@ use rustc::session::config::{self, CrateType, OptLevel, DebugInfo,\n use rustc::ty::TyCtxt;\n use rustc_target::spec::{LinkerFlavor, LldFlavor};\n use serialize::{json, Encoder};\n-use llvm_util;\n \n /// For all the linkers we support, and information they might\n /// need out of the shared crate context before we get rid of it.\n@@ -43,10 +40,13 @@ impl LinkerInfo {\n         }\n     }\n \n-    pub fn to_linker<'a>(&'a self,\n-                         cmd: Command,\n-                         sess: &'a Session,\n-                         flavor: LinkerFlavor) -> Box<dyn Linker+'a> {\n+    pub fn to_linker<'a>(\n+        &'a self,\n+        cmd: Command,\n+        sess: &'a Session,\n+        flavor: LinkerFlavor,\n+        target_cpu: &'a str,\n+    ) -> Box<dyn Linker+'a> {\n         match flavor {\n             LinkerFlavor::Lld(LldFlavor::Link) |\n             LinkerFlavor::Msvc => {\n@@ -70,6 +70,7 @@ impl LinkerInfo {\n                     info: self,\n                     hinted_static: false,\n                     is_ld: false,\n+                    target_cpu,\n                 }) as Box<dyn Linker>\n             }\n \n@@ -82,6 +83,7 @@ impl LinkerInfo {\n                     info: self,\n                     hinted_static: false,\n                     is_ld: true,\n+                    target_cpu,\n                 }) as Box<dyn Linker>\n             }\n \n@@ -144,6 +146,7 @@ pub struct GccLinker<'a> {\n     hinted_static: bool, // Keeps track of the current hinting mode.\n     // Link as ld\n     is_ld: bool,\n+    target_cpu: &'a str,\n }\n \n impl<'a> GccLinker<'a> {\n@@ -204,7 +207,8 @@ impl<'a> GccLinker<'a> {\n         };\n \n         self.linker_arg(&format!(\"-plugin-opt={}\", opt_level));\n-        self.linker_arg(&format!(\"-plugin-opt=mcpu={}\", llvm_util::target_cpu(self.sess)));\n+        let target_cpu = self.target_cpu;\n+        self.linker_arg(&format!(\"-plugin-opt=mcpu={}\", target_cpu));\n \n         match self.sess.lto() {\n             config::Lto::Thin |\n@@ -263,7 +267,7 @@ impl<'a> Linker for GccLinker<'a> {\n             // -force_load is the macOS equivalent of --whole-archive, but it\n             // involves passing the full path to the library to link.\n             self.linker_arg(\"-force_load\");\n-            let lib = archive::find_library(lib, search_path, &self.sess);\n+            let lib = ::find_library(lib, search_path, &self.sess);\n             self.linker_arg(&lib);\n         }\n     }\n@@ -898,7 +902,8 @@ impl<'a> Linker for EmLinker<'a> {\n fn exported_symbols(tcx: TyCtxt, crate_type: CrateType) -> Vec<String> {\n     let mut symbols = Vec::new();\n \n-    let export_threshold = symbol_export::crates_export_threshold(&[crate_type]);\n+    let export_threshold =\n+        ::symbol_export::crates_export_threshold(&[crate_type]);\n     for &(symbol, level) in tcx.exported_symbols(LOCAL_CRATE).iter() {\n         if level.is_below_threshold(export_threshold) {\n             symbols.push(symbol.symbol_name(tcx).to_string());", "previous_filename": "src/librustc_codegen_llvm/back/linker.rs"}, {"sha": "2d650f7f18d6f5654b7da9ceb4f353365b0a24be", "filename": "src/librustc_codegen_utils/symbol_export.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/942864a000efd74b73e36bda5606b2cdb55ecf39/src%2Flibrustc_codegen_utils%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/942864a000efd74b73e36bda5606b2cdb55ecf39/src%2Flibrustc_codegen_utils%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fsymbol_export.rs?ref=942864a000efd74b73e36bda5606b2cdb55ecf39", "patch": "@@ -11,7 +11,7 @@\n use rustc_data_structures::sync::Lrc;\n use std::sync::Arc;\n \n-use monomorphize::Instance;\n+use rustc::ty::Instance;\n use rustc::hir;\n use rustc::hir::Node;\n use rustc::hir::CodegenFnAttrFlags;", "previous_filename": "src/librustc_codegen_llvm/back/symbol_export.rs"}]}