{"sha": "cb3ef552e873a86e94a3792160fadb5d937a6f5f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiM2VmNTUyZTg3M2E4NmU5NGEzNzkyMTYwZmFkYjVkOTM3YTZmNWY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-04-30T08:52:31Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-04-30T08:52:31Z"}, "message": "internal: normalize name\n\nAll def types in hir are unsubstituted", "tree": {"sha": "b19bf27eb2f6ed299d4095a43a8b618fbf347d7d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b19bf27eb2f6ed299d4095a43a8b618fbf347d7d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb3ef552e873a86e94a3792160fadb5d937a6f5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb3ef552e873a86e94a3792160fadb5d937a6f5f", "html_url": "https://github.com/rust-lang/rust/commit/cb3ef552e873a86e94a3792160fadb5d937a6f5f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb3ef552e873a86e94a3792160fadb5d937a6f5f/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "49b219b1035e20143818d409404b5e6f19a7ad1d", "url": "https://api.github.com/repos/rust-lang/rust/commits/49b219b1035e20143818d409404b5e6f19a7ad1d", "html_url": "https://github.com/rust-lang/rust/commit/49b219b1035e20143818d409404b5e6f19a7ad1d"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "508ac37c22a6a4eaec5fe1db5ec3ba92cc0a6396", "filename": "crates/hir/src/display.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb3ef552e873a86e94a3792160fadb5d937a6f5f/crates%2Fhir%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb3ef552e873a86e94a3792160fadb5d937a6f5f/crates%2Fhir%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fdisplay.rs?ref=cb3ef552e873a86e94a3792160fadb5d937a6f5f", "patch": "@@ -170,7 +170,7 @@ impl HirDisplay for Field {\n     fn hir_fmt(&self, f: &mut HirFormatter) -> Result<(), HirDisplayError> {\n         write_visibility(self.parent.module(f.db).id, self.visibility(f.db), f)?;\n         write!(f, \"{}: \", self.name(f.db))?;\n-        self.signature_ty(f.db).hir_fmt(f)\n+        self.ty(f.db).hir_fmt(f)\n     }\n }\n "}, {"sha": "9eb7672daf20d762a3dc0737f05f3c116d275897", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb3ef552e873a86e94a3792160fadb5d937a6f5f/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb3ef552e873a86e94a3792160fadb5d937a6f5f/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=cb3ef552e873a86e94a3792160fadb5d937a6f5f", "patch": "@@ -509,7 +509,7 @@ impl Field {\n     /// placeholder types for type parameters). This is good for showing\n     /// signature help, but not so good to actually get the type of the field\n     /// when you actually have a variable of the struct.\n-    pub fn signature_ty(&self, db: &dyn HirDatabase) -> Type {\n+    pub fn ty(&self, db: &dyn HirDatabase) -> Type {\n         let var_id = self.parent.into();\n         let generic_def_id: GenericDefId = match self.parent {\n             VariantDef::Struct(it) => it.id.into(),"}, {"sha": "ce6998d82878f6e1d99d114f6777e2a284829d95", "filename": "crates/ide_assists/src/handlers/generate_from_impl_for_enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb3ef552e873a86e94a3792160fadb5d937a6f5f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_from_impl_for_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb3ef552e873a86e94a3792160fadb5d937a6f5f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_from_impl_for_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_from_impl_for_enum.rs?ref=cb3ef552e873a86e94a3792160fadb5d937a6f5f", "patch": "@@ -91,7 +91,7 @@ fn existing_from_impl(\n \n     let enum_type = enum_.ty(sema.db);\n \n-    let wrapped_type = variant.fields(sema.db).get(0)?.signature_ty(sema.db);\n+    let wrapped_type = variant.fields(sema.db).get(0)?.ty(sema.db);\n \n     if enum_type.impls_trait(sema.db, from_trait, &[wrapped_type]) {\n         Some(())"}, {"sha": "b005bd7736dd50fa31e463e527b4d05928174039", "filename": "crates/ide_completion/src/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb3ef552e873a86e94a3792160fadb5d937a6f5f/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb3ef552e873a86e94a3792160fadb5d937a6f5f/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcontext.rs?ref=cb3ef552e873a86e94a3792160fadb5d937a6f5f", "patch": "@@ -347,7 +347,7 @@ impl<'a> CompletionContext<'a> {\n                                 .and_then(|node| ast::RecordExprField::cast(node))\n                                 .and_then(|rf| self.sema.resolve_record_field(&rf).zip(Some(rf)))\n                                 .map(|(f, rf)|(\n-                                    Some(f.0.signature_ty(self.db)),\n+                                    Some(f.0.ty(self.db)),\n                                     rf.field_name().map(NameOrNameRef::NameRef),\n                                 ))\n                                 .unwrap_or((None, None))\n@@ -357,7 +357,7 @@ impl<'a> CompletionContext<'a> {\n                             self.sema\n                                 .resolve_record_field(&it)\n                                 .map(|f|(\n-                                    Some(f.0.signature_ty(self.db)),\n+                                    Some(f.0.ty(self.db)),\n                                     it.field_name().map(NameOrNameRef::NameRef),\n                                 ))\n                                 .unwrap_or((None, None))"}, {"sha": "0c0c71134a862e154be0a1df9a8ec495435fbe01", "filename": "crates/ide_completion/src/render/enum_variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb3ef552e873a86e94a3792160fadb5d937a6f5f/crates%2Fide_completion%2Fsrc%2Frender%2Fenum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb3ef552e873a86e94a3792160fadb5d937a6f5f/crates%2Fide_completion%2Fsrc%2Frender%2Fenum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fenum_variant.rs?ref=cb3ef552e873a86e94a3792160fadb5d937a6f5f", "patch": "@@ -93,7 +93,7 @@ impl<'a> EnumRender<'a> {\n             .variant\n             .fields(self.ctx.db())\n             .into_iter()\n-            .map(|field| (field.name(self.ctx.db()), field.signature_ty(self.ctx.db())));\n+            .map(|field| (field.name(self.ctx.db()), field.ty(self.ctx.db())));\n \n         match self.variant_kind {\n             StructKind::Tuple | StructKind::Unit => format!("}]}