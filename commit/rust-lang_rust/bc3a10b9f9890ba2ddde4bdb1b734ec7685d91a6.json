{"sha": "bc3a10b9f9890ba2ddde4bdb1b734ec7685d91a6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjM2ExMGI5Zjk4OTBiYTJkZGRlNGJkYjFiNzM0ZWM3Njg1ZDkxYTY=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-03-21T12:17:33Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-03-21T14:08:57Z"}, "message": "Remove nearly all uses of `~[]` from libtest.\n\nDeny further uses, with explicit allows on a few specific functions.", "tree": {"sha": "746f4286769ff3cd2dd9b8ea8168a13a86e9edca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/746f4286769ff3cd2dd9b8ea8168a13a86e9edca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc3a10b9f9890ba2ddde4bdb1b734ec7685d91a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc3a10b9f9890ba2ddde4bdb1b734ec7685d91a6", "html_url": "https://github.com/rust-lang/rust/commit/bc3a10b9f9890ba2ddde4bdb1b734ec7685d91a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc3a10b9f9890ba2ddde4bdb1b734ec7685d91a6/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d778ff61058a18978a0c24d61f6a84e57138fa4", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d778ff61058a18978a0c24d61f6a84e57138fa4", "html_url": "https://github.com/rust-lang/rust/commit/6d778ff61058a18978a0c24d61f6a84e57138fa4"}], "stats": {"total": 51, "additions": 24, "deletions": 27}, "files": [{"sha": "96313c26f1f9bdfb69921d009e56f0b5a24ff8ef", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bc3a10b9f9890ba2ddde4bdb1b734ec7685d91a6/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc3a10b9f9890ba2ddde4bdb1b734ec7685d91a6/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=bc3a10b9f9890ba2ddde4bdb1b734ec7685d91a6", "patch": "@@ -33,7 +33,7 @@\n       html_root_url = \"http://static.rust-lang.org/doc/master\")];\n \n #[feature(asm, macro_rules)];\n-#[allow(deprecated_owned_vector)]; // NOTE: remove after stage0\n+#[deny(deprecated_owned_vector)];\n \n extern crate collections;\n extern crate getopts;\n@@ -363,15 +363,10 @@ pub fn opt_shard(maybestr: Option<~str>) -> Option<(uint,uint)> {\n     match maybestr {\n         None => None,\n         Some(s) => {\n-            let vector = s.split('.').to_owned_vec();\n-            if vector.len() == 2 {\n-                match (from_str::<uint>(vector[0]),\n-                       from_str::<uint>(vector[1])) {\n-                    (Some(a), Some(b)) => Some((a, b)),\n-                    _ => None\n-                }\n-            } else {\n-                None\n+            let mut it = s.split('.');\n+            match (it.next().and_then(from_str), it.next().and_then(from_str), it.next()) {\n+                (Some(a), Some(b), None) => Some((a, b)),\n+                _ => None,\n             }\n         }\n     }\n@@ -950,6 +945,7 @@ pub fn run_test(force_ignore: bool,\n         return;\n     }\n \n+    #[allow(deprecated_owned_vector)]\n     fn run_test_inner(desc: TestDesc,\n                       monitor_ch: Sender<MonitorMsg>,\n                       testfn: proc()) {"}, {"sha": "8a3881e801a7805149cd76100b6467af4edb865a", "filename": "src/libtest/stats.rs", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/bc3a10b9f9890ba2ddde4bdb1b734ec7685d91a6/src%2Flibtest%2Fstats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc3a10b9f9890ba2ddde4bdb1b734ec7685d91a6/src%2Flibtest%2Fstats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Fstats.rs?ref=bc3a10b9f9890ba2ddde4bdb1b734ec7685d91a6", "patch": "@@ -168,6 +168,7 @@ impl Summary {\n impl<'a> Stats for &'a [f64] {\n \n     // FIXME #11059 handle NaN, inf and overflow\n+    #[allow(deprecated_owned_vector)]\n     fn sum(self) -> f64 {\n         let mut partials : ~[f64] = ~[];\n \n@@ -246,28 +247,28 @@ impl<'a> Stats for &'a [f64] {\n \n     fn median_abs_dev(self) -> f64 {\n         let med = self.median();\n-        let abs_devs = self.map(|&v| num::abs(med - v));\n+        let abs_devs: Vec<f64> = self.iter().map(|&v| num::abs(med - v)).collect();\n         // This constant is derived by smarter statistics brains than me, but it is\n         // consistent with how R and other packages treat the MAD.\n-        abs_devs.median() * 1.4826\n+        abs_devs.as_slice().median() * 1.4826\n     }\n \n     fn median_abs_dev_pct(self) -> f64 {\n         (self.median_abs_dev() / self.median()) * 100.0\n     }\n \n     fn percentile(self, pct: f64) -> f64 {\n-        let mut tmp = self.to_owned();\n-        f64_sort(tmp);\n-        percentile_of_sorted(tmp, pct)\n+        let mut tmp = Vec::from_slice(self);\n+        f64_sort(tmp.as_mut_slice());\n+        percentile_of_sorted(tmp.as_slice(), pct)\n     }\n \n     fn quartiles(self) -> (f64,f64,f64) {\n-        let mut tmp = self.to_owned();\n-        f64_sort(tmp);\n-        let a = percentile_of_sorted(tmp, 25.0);\n-        let b = percentile_of_sorted(tmp, 50.0);\n-        let c = percentile_of_sorted(tmp, 75.0);\n+        let mut tmp = Vec::from_slice(self);\n+        f64_sort(tmp.as_mut_slice());\n+        let a = percentile_of_sorted(tmp.as_slice(), 25.0);\n+        let b = percentile_of_sorted(tmp.as_slice(), 50.0);\n+        let c = percentile_of_sorted(tmp.as_slice(), 75.0);\n         (a,b,c)\n     }\n \n@@ -308,10 +309,10 @@ fn percentile_of_sorted(sorted_samples: &[f64],\n ///\n /// See: http://en.wikipedia.org/wiki/Winsorising\n pub fn winsorize(samples: &mut [f64], pct: f64) {\n-    let mut tmp = samples.to_owned();\n-    f64_sort(tmp);\n-    let lo = percentile_of_sorted(tmp, pct);\n-    let hi = percentile_of_sorted(tmp, 100.0-pct);\n+    let mut tmp = Vec::from_slice(samples);\n+    f64_sort(tmp.as_mut_slice());\n+    let lo = percentile_of_sorted(tmp.as_slice(), pct);\n+    let hi = percentile_of_sorted(tmp.as_slice(), 100.0-pct);\n     for samp in samples.mut_iter() {\n         if *samp > hi {\n             *samp = hi\n@@ -1009,6 +1010,7 @@ mod tests {\n \n     #[test]\n     fn test_boxplot_nonpositive() {\n+        #[allow(deprecated_owned_vector)]\n         fn t(s: &Summary, expected: ~str) {\n             use std::io::MemWriter;\n             let mut m = MemWriter::new();\n@@ -1035,7 +1037,6 @@ mod tests {\n #[cfg(test)]\n mod bench {\n     use BenchHarness;\n-    use std::slice;\n     use stats::Stats;\n \n     #[bench]\n@@ -1047,10 +1048,10 @@ mod bench {\n     #[bench]\n     pub fn sum_many_f64(bh: &mut BenchHarness) {\n         let nums = [-1e30, 1e60, 1e30, 1.0, -1e60];\n-        let v = slice::from_fn(500, |i| nums[i%5]);\n+        let v = Vec::from_fn(500, |i| nums[i%5]);\n \n         bh.iter(|| {\n-            v.sum();\n+            v.as_slice().sum();\n         })\n     }\n }"}]}