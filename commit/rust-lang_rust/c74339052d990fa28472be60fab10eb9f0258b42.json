{"sha": "c74339052d990fa28472be60fab10eb9f0258b42", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3NDMzOTA1MmQ5OTBmYTI4NDcyYmU2MGZhYjEwZWI5ZjAyNThiNDI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-03-16T19:53:08Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-03-24T18:01:28Z"}, "message": "rewrite foreign types lint not to trawl the HIR\n\nIt no longer reads from `ast_ty_to_ty_cache`, which was very wrong. It\nalso correctly handles higher-ranked regions.", "tree": {"sha": "54580c08fe91e2c69f518edd6362404e27c83c6d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54580c08fe91e2c69f518edd6362404e27c83c6d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c74339052d990fa28472be60fab10eb9f0258b42", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c74339052d990fa28472be60fab10eb9f0258b42", "html_url": "https://github.com/rust-lang/rust/commit/c74339052d990fa28472be60fab10eb9f0258b42", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c74339052d990fa28472be60fab10eb9f0258b42/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc1f6831eb0d0e5cca16395f14b7406ff85c4c3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc1f6831eb0d0e5cca16395f14b7406ff85c4c3d", "html_url": "https://github.com/rust-lang/rust/commit/dc1f6831eb0d0e5cca16395f14b7406ff85c4c3d"}], "stats": {"total": 82, "additions": 32, "deletions": 50}, "files": [{"sha": "1a84afab86bfce9946476280aeca1b3437e6b1d8", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 32, "deletions": 50, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/c74339052d990fa28472be60fab10eb9f0258b42/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c74339052d990fa28472be60fab10eb9f0258b42/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=c74339052d990fa28472be60fab10eb9f0258b42", "patch": "@@ -29,7 +29,6 @@ use syntax::attr::{self, AttrMetaMethods};\n use syntax::codemap::{self, Span};\n \n use rustc_front::hir;\n-use rustc_front::intravisit::{self, Visitor};\n use rustc_front::util::is_shift_binop;\n \n register_long_diagnostics! {\n@@ -403,16 +402,6 @@ fn is_repr_nullable_ptr<'tcx>(tcx: &TyCtxt<'tcx>,\n     false\n }\n \n-fn ast_ty_to_normalized<'tcx>(tcx: &TyCtxt<'tcx>,\n-                              id: ast::NodeId)\n-                              -> Ty<'tcx> {\n-    let tty = match tcx.ast_ty_to_ty_cache.borrow().get(&id) {\n-        Some(&t) => t,\n-        None => panic!(\"ast_ty_to_ty_cache was incomplete after typeck!\")\n-    };\n-    infer::normalize_associated_type(tcx, &tty)\n-}\n-\n impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n     /// Check if the given type is \"ffi-safe\" (has a stable, well-defined\n     /// representation which can be exported to C code).\n@@ -604,10 +593,12 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n         }\n     }\n \n-    fn check_def(&mut self, sp: Span, id: ast::NodeId) {\n-        let tty = ast_ty_to_normalized(self.cx.tcx, id);\n+    fn check_type_for_ffi_and_report_errors(&mut self, sp: Span, ty: Ty<'tcx>) {\n+        // it is only OK to use this function because extern fns cannot have\n+        // any generic types right now:\n+        let ty = infer::normalize_associated_type(self.cx.tcx, &ty);\n \n-        match ImproperCTypesVisitor::check_type_for_ffi(self, &mut FnvHashSet(), tty) {\n+        match self.check_type_for_ffi(&mut FnvHashSet(), ty) {\n             FfiResult::FfiSafe => {}\n             FfiResult::FfiUnsafe(s) => {\n                 self.cx.span_lint(IMPROPER_CTYPES, sp, s);\n@@ -628,27 +619,30 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n             }\n         }\n     }\n-}\n \n-impl<'a, 'tcx, 'v> Visitor<'v> for ImproperCTypesVisitor<'a, 'tcx> {\n-    fn visit_ty(&mut self, ty: &hir::Ty) {\n-        match ty.node {\n-            hir::TyPath(..) |\n-            hir::TyBareFn(..) => self.check_def(ty.span, ty.id),\n-            hir::TyVec(..) => {\n-                self.cx.span_lint(IMPROPER_CTYPES, ty.span,\n-                    \"found Rust slice type in foreign module, consider \\\n-                     using a raw pointer instead\");\n-            }\n-            hir::TyFixedLengthVec(ref ty, _) => self.visit_ty(ty),\n-            hir::TyTup(..) => {\n-                self.cx.span_lint(IMPROPER_CTYPES, ty.span,\n-                    \"found Rust tuple type in foreign module; \\\n-                     consider using a struct instead`\")\n+    fn check_foreign_fn(&mut self, id: ast::NodeId, decl: &hir::FnDecl) {\n+        let def_id = self.cx.tcx.map.local_def_id(id);\n+        let scheme = self.cx.tcx.lookup_item_type(def_id);\n+        let sig = scheme.ty.fn_sig();\n+        let sig = self.cx.tcx.erase_late_bound_regions(&sig);\n+\n+        for (&input_ty, input_hir) in sig.inputs.iter().zip(&decl.inputs) {\n+            self.check_type_for_ffi_and_report_errors(input_hir.ty.span, &input_ty);\n+        }\n+\n+        if let hir::Return(ref ret_hir) = decl.output {\n+            let ret_ty = sig.output.unwrap();\n+            if !ret_ty.is_nil() {\n+                self.check_type_for_ffi_and_report_errors(ret_hir.span, ret_ty);\n             }\n-            _ => intravisit::walk_ty(self, ty)\n         }\n     }\n+\n+    fn check_foreign_static(&mut self, id: ast::NodeId, span: Span) {\n+        let def_id = self.cx.tcx.map.local_def_id(id);\n+        let scheme = self.cx.tcx.lookup_item_type(def_id);\n+        self.check_type_for_ffi_and_report_errors(span, scheme.ty);\n+    }\n }\n \n #[derive(Copy, Clone)]\n@@ -662,29 +656,17 @@ impl LintPass for ImproperCTypes {\n \n impl LateLintPass for ImproperCTypes {\n     fn check_item(&mut self, cx: &LateContext, it: &hir::Item) {\n-        fn check_ty(cx: &LateContext, ty: &hir::Ty) {\n-            let mut vis = ImproperCTypesVisitor { cx: cx };\n-            vis.visit_ty(ty);\n-        }\n-\n-        fn check_foreign_fn(cx: &LateContext, decl: &hir::FnDecl) {\n-            for input in &decl.inputs {\n-                check_ty(cx, &input.ty);\n-            }\n-            if let hir::Return(ref ret_ty) = decl.output {\n-                let tty = ast_ty_to_normalized(cx.tcx, ret_ty.id);\n-                if !tty.is_nil() {\n-                    check_ty(cx, &ret_ty);\n-                }\n-            }\n-        }\n-\n+        let mut vis = ImproperCTypesVisitor { cx: cx };\n         if let hir::ItemForeignMod(ref nmod) = it.node {\n             if nmod.abi != Abi::RustIntrinsic && nmod.abi != Abi::PlatformIntrinsic {\n                 for ni in &nmod.items {\n                     match ni.node {\n-                        hir::ForeignItemFn(ref decl, _) => check_foreign_fn(cx, &decl),\n-                        hir::ForeignItemStatic(ref t, _) => check_ty(cx, &t)\n+                        hir::ForeignItemFn(ref decl, _) => {\n+                            vis.check_foreign_fn(ni.id, decl);\n+                        }\n+                        hir::ForeignItemStatic(ref ty, _) => {\n+                            vis.check_foreign_static(ni.id, ty.span);\n+                        }\n                     }\n                 }\n             }"}]}