{"sha": "4cacedd3de6a3198756d925c56c655dcfffe0419", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjYWNlZGQzZGU2YTMxOTg3NTZkOTI1YzU2YzY1NWRjZmZmZTA0MTk=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-06-09T09:33:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-09T09:33:56Z"}, "message": "Merge #4810\n\n4810: Simplify unwrapping of blocks r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "13d712313e9872afb483e1b68b398a1b597cc4f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13d712313e9872afb483e1b68b398a1b597cc4f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4cacedd3de6a3198756d925c56c655dcfffe0419", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe31eECRBK7hj4Ov3rIwAAdHIIAJT7vJeDHtgeYFiK+Prz/Blk\nuwmKC3ViFxhOObwiRRGZjPhdJzc9o1nCikWGj8ENMQR4AHnvTHsUg9MZYcrGtP1H\nOkLnqwjgQVhE2qDVPml5le1ddEXopOB0qV2K5e1isOEiJ6DmY/DrdBwBZMO7aOuP\nF6hKR8pESdLlYxEIFEGXGEdxr2qZZNpHwMjtVlgTcrxjeUDYUgyGGtRyyvS/ka0P\n27Hxf0JvevZh3cpW8b65eJM/mAg9dG7Sw5Jnp+VXiBzkNFu7hpMwnHlCMTFHll3Z\nVRxunWeILeZMRElg77YKFsTJb+t1JlukttXfZNMv9Q5KOJuRep0gbrpuDclUqOM=\n=S9/z\n-----END PGP SIGNATURE-----\n", "payload": "tree 13d712313e9872afb483e1b68b398a1b597cc4f4\nparent 6f0cc91c88395105cd9857a314bf443e1ed7b271\nparent 5233766ce51d7593bb02d041bd63fa3aad44f666\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1591695236 +0000\ncommitter GitHub <noreply@github.com> 1591695236 +0000\n\nMerge #4810\n\n4810: Simplify unwrapping of blocks r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4cacedd3de6a3198756d925c56c655dcfffe0419", "html_url": "https://github.com/rust-lang/rust/commit/4cacedd3de6a3198756d925c56c655dcfffe0419", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4cacedd3de6a3198756d925c56c655dcfffe0419/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f0cc91c88395105cd9857a314bf443e1ed7b271", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f0cc91c88395105cd9857a314bf443e1ed7b271", "html_url": "https://github.com/rust-lang/rust/commit/6f0cc91c88395105cd9857a314bf443e1ed7b271"}, {"sha": "5233766ce51d7593bb02d041bd63fa3aad44f666", "url": "https://api.github.com/repos/rust-lang/rust/commits/5233766ce51d7593bb02d041bd63fa3aad44f666", "html_url": "https://github.com/rust-lang/rust/commit/5233766ce51d7593bb02d041bd63fa3aad44f666"}], "stats": {"total": 128, "additions": 49, "deletions": 79}, "files": [{"sha": "c48ecaae8a3e8e1af00e88c663d98d3c39dac19d", "filename": "crates/ra_assists/src/handlers/unwrap_block.rs", "status": "modified", "additions": 49, "deletions": 79, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/4cacedd3de6a3198756d925c56c655dcfffe0419/crates%2Fra_assists%2Fsrc%2Fhandlers%2Funwrap_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cacedd3de6a3198756d925c56c655dcfffe0419/crates%2Fra_assists%2Fsrc%2Fhandlers%2Funwrap_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Funwrap_block.rs?ref=4cacedd3de6a3198756d925c56c655dcfffe0419", "patch": "@@ -1,8 +1,5 @@\n use ra_fmt::unwrap_trivial_block;\n-use ra_syntax::{\n-    ast::{self, ElseBranch, Expr, LoopBodyOwner},\n-    match_ast, AstNode, TextRange, T,\n-};\n+use ra_syntax::{ast, AstNode, TextRange, T};\n \n use crate::{AssistContext, AssistId, Assists};\n \n@@ -29,89 +26,62 @@ pub(crate) fn unwrap_block(acc: &mut Assists, ctx: &AssistContext) -> Option<()>\n     let parent = block.syntax().parent()?;\n     let assist_id = AssistId(\"unwrap_block\");\n     let assist_label = \"Unwrap block\";\n-\n-    let (expr, expr_to_unwrap) = match_ast! {\n-        match parent {\n-            ast::ForExpr(for_expr) => {\n-                let block_expr = for_expr.loop_body()?;\n-                let expr_to_unwrap = extract_expr(ctx.frange.range, block_expr)?;\n-                (ast::Expr::ForExpr(for_expr), expr_to_unwrap)\n-            },\n-            ast::WhileExpr(while_expr) => {\n-                let block_expr = while_expr.loop_body()?;\n-                let expr_to_unwrap = extract_expr(ctx.frange.range, block_expr)?;\n-                (ast::Expr::WhileExpr(while_expr), expr_to_unwrap)\n-            },\n-            ast::LoopExpr(loop_expr) => {\n-                let block_expr = loop_expr.loop_body()?;\n-                let expr_to_unwrap = extract_expr(ctx.frange.range, block_expr)?;\n-                (ast::Expr::LoopExpr(loop_expr), expr_to_unwrap)\n-            },\n-            ast::IfExpr(if_expr) => {\n-                let mut resp = None;\n-\n-                let then_branch = if_expr.then_branch()?;\n-                if then_branch.l_curly_token()?.text_range().contains_range(ctx.frange.range) {\n-                    if let Some(ancestor) = if_expr.syntax().parent().and_then(ast::IfExpr::cast) {\n-                        // For `else if` blocks\n-                        let ancestor_then_branch = ancestor.then_branch()?;\n-                        let l_curly_token = then_branch.l_curly_token()?;\n-\n-                        let target = then_branch.syntax().text_range();\n-                        return acc.add(assist_id, assist_label, target, |edit| {\n-                            let range_to_del_else_if = TextRange::new(ancestor_then_branch.syntax().text_range().end(), l_curly_token.text_range().start());\n-                            let range_to_del_rest = TextRange::new(then_branch.syntax().text_range().end(), if_expr.syntax().text_range().end());\n-\n-                            edit.delete(range_to_del_rest);\n-                            edit.delete(range_to_del_else_if);\n-                            edit.replace(target, update_expr_string(then_branch.to_string(), &[' ', '{']));\n-                        });\n-                    } else {\n-                        resp = Some((ast::Expr::IfExpr(if_expr.clone()), Expr::BlockExpr(then_branch)));\n-                    }\n-                } else if let Some(else_branch) = if_expr.else_branch() {\n-                    match else_branch {\n-                        ElseBranch::Block(else_block) => {\n-                            let l_curly_token = else_block.l_curly_token()?;\n-                            if l_curly_token.text_range().contains_range(ctx.frange.range) {\n-                                let target = else_block.syntax().text_range();\n-                                return acc.add(assist_id, assist_label, target, |edit| {\n-                                    let range_to_del = TextRange::new(then_branch.syntax().text_range().end(), l_curly_token.text_range().start());\n-\n-                                    edit.delete(range_to_del);\n-                                    edit.replace(target, update_expr_string(else_block.to_string(), &[' ', '{']));\n-                                });\n-                            }\n-                        },\n-                        ElseBranch::IfExpr(_) => {},\n-                    }\n+    let parent = ast::Expr::cast(parent)?;\n+\n+    match parent.clone() {\n+        ast::Expr::ForExpr(_) | ast::Expr::WhileExpr(_) | ast::Expr::LoopExpr(_) => (),\n+        ast::Expr::IfExpr(if_expr) => {\n+            let then_branch = if_expr.then_branch()?;\n+            if then_branch == block {\n+                if let Some(ancestor) = if_expr.syntax().parent().and_then(ast::IfExpr::cast) {\n+                    // For `else if` blocks\n+                    let ancestor_then_branch = ancestor.then_branch()?;\n+\n+                    let target = then_branch.syntax().text_range();\n+                    return acc.add(assist_id, assist_label, target, |edit| {\n+                        let range_to_del_else_if = TextRange::new(\n+                            ancestor_then_branch.syntax().text_range().end(),\n+                            l_curly_token.text_range().start(),\n+                        );\n+                        let range_to_del_rest = TextRange::new(\n+                            then_branch.syntax().text_range().end(),\n+                            if_expr.syntax().text_range().end(),\n+                        );\n+\n+                        edit.delete(range_to_del_rest);\n+                        edit.delete(range_to_del_else_if);\n+                        edit.replace(\n+                            target,\n+                            update_expr_string(then_branch.to_string(), &[' ', '{']),\n+                        );\n+                    });\n                 }\n-\n-                resp?\n-            },\n-            _ => return None,\n+            } else {\n+                let target = block.syntax().text_range();\n+                return acc.add(assist_id, assist_label, target, |edit| {\n+                    let range_to_del = TextRange::new(\n+                        then_branch.syntax().text_range().end(),\n+                        l_curly_token.text_range().start(),\n+                    );\n+\n+                    edit.delete(range_to_del);\n+                    edit.replace(target, update_expr_string(block.to_string(), &[' ', '{']));\n+                });\n+            }\n         }\n+        _ => return None,\n     };\n \n-    let target = expr_to_unwrap.syntax().text_range();\n-    acc.add(assist_id, assist_label, target, |edit| {\n-        edit.replace(\n-            expr.syntax().text_range(),\n-            update_expr_string(expr_to_unwrap.to_string(), &[' ', '{', '\\n']),\n+    let unwrapped = unwrap_trivial_block(block);\n+    let target = unwrapped.syntax().text_range();\n+    acc.add(assist_id, assist_label, target, |builder| {\n+        builder.replace(\n+            parent.syntax().text_range(),\n+            update_expr_string(unwrapped.to_string(), &[' ', '{', '\\n']),\n         );\n     })\n }\n \n-fn extract_expr(cursor_range: TextRange, block: ast::BlockExpr) -> Option<ast::Expr> {\n-    let cursor_in_range = block.l_curly_token()?.text_range().contains_range(cursor_range);\n-\n-    if cursor_in_range {\n-        Some(unwrap_trivial_block(block))\n-    } else {\n-        None\n-    }\n-}\n-\n fn update_expr_string(expr_str: String, trim_start_pat: &[char]) -> String {\n     let expr_string = expr_str.trim_start_matches(trim_start_pat);\n     let mut expr_string_lines: Vec<&str> = expr_string.lines().collect();"}]}