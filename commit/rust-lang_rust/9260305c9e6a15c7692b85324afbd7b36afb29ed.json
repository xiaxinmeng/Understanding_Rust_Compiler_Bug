{"sha": "9260305c9e6a15c7692b85324afbd7b36afb29ed", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyNjAzMDVjOWU2YTE1Yzc2OTJiODUzMjRhZmJkN2IzNmFmYjI5ZWQ=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-05-17T15:32:47Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-04-23T20:35:21Z"}, "message": "rustc_mir: pretty-print all locals into their respective scopes.", "tree": {"sha": "c48701e5b27b7ff06851c4484c63a00884e7a9a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c48701e5b27b7ff06851c4484c63a00884e7a9a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9260305c9e6a15c7692b85324afbd7b36afb29ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9260305c9e6a15c7692b85324afbd7b36afb29ed", "html_url": "https://github.com/rust-lang/rust/commit/9260305c9e6a15c7692b85324afbd7b36afb29ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9260305c9e6a15c7692b85324afbd7b36afb29ed/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d20da130182054f374411fd476b19e8aa56a1c4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d20da130182054f374411fd476b19e8aa56a1c4b", "html_url": "https://github.com/rust-lang/rust/commit/d20da130182054f374411fd476b19e8aa56a1c4b"}], "stats": {"total": 170, "additions": 74, "deletions": 96}, "files": [{"sha": "1f55a728f9c720c01a6bd27d9f330791cba5f148", "filename": "src/librustc_mir/util/pretty.rs", "status": "modified", "additions": 52, "deletions": 74, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/9260305c9e6a15c7692b85324afbd7b36afb29ed/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9260305c9e6a15c7692b85324afbd7b36afb29ed/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpretty.rs?ref=9260305c9e6a15c7692b85324afbd7b36afb29ed", "patch": "@@ -461,9 +461,7 @@ fn comment(tcx: TyCtxt<'_, '_, '_>, SourceInfo { span, scope }: SourceInfo) -> S\n     )\n }\n \n-/// Prints user-defined variables in a scope tree.\n-///\n-/// Returns the total number of variables printed.\n+/// Prints local variables in a scope tree.\n fn write_scope_tree(\n     tcx: TyCtxt<'_, '_, '_>,\n     mir: &Mir<'_>,\n@@ -474,57 +472,64 @@ fn write_scope_tree(\n ) -> io::Result<()> {\n     let indent = depth * INDENT.len();\n \n+    // Local variable types (including the user's name in a comment).\n+    for (local, local_decl) in mir.local_decls.iter_enumerated() {\n+        if (1..mir.arg_count+1).contains(&local.index()) {\n+            // Skip over argument locals, they're printed in the signature.\n+            continue;\n+        }\n+\n+        if local_decl.source_info.scope != parent {\n+            // Not declared in this scope.\n+            continue;\n+        }\n+\n+        let mut_str = if local_decl.mutability == Mutability::Mut {\n+            \"mut \"\n+        } else {\n+            \"\"\n+        };\n+\n+        let mut indented_decl = format!(\n+            \"{0:1$}let {2}{3:?}: {4:?}\",\n+            INDENT,\n+            indent,\n+            mut_str,\n+            local,\n+            local_decl.ty\n+        );\n+        for user_ty in local_decl.user_ty.projections() {\n+            write!(indented_decl, \" as {:?}\", user_ty).unwrap();\n+        }\n+        indented_decl.push_str(\";\");\n+\n+        let local_name = if local == RETURN_PLACE {\n+            format!(\" return place\")\n+        } else if let Some(name) = local_decl.name {\n+            format!(\" \\\"{}\\\"\", name)\n+        } else {\n+            String::new()\n+        };\n+\n+        writeln!(\n+            w,\n+            \"{0:1$} //{2} in {3}\",\n+            indented_decl,\n+            ALIGN,\n+            local_name,\n+            comment(tcx, local_decl.source_info),\n+        )?;\n+    }\n+\n     let children = match scope_tree.get(&parent) {\n-        Some(children) => children,\n+        Some(childs) => childs,\n         None => return Ok(()),\n     };\n \n     for &child in children {\n-        let data = &mir.source_scopes[child];\n-        assert_eq!(data.parent_scope, Some(parent));\n+        assert_eq!(mir.source_scopes[child].parent_scope, Some(parent));\n         writeln!(w, \"{0:1$}scope {2} {{\", \"\", indent, child.index())?;\n-\n-        // User variable types (including the user's name in a comment).\n-        for local in mir.vars_iter() {\n-            let var = &mir.local_decls[local];\n-            let (name, source_info) = if var.source_info.scope == child {\n-                (var.name.unwrap(), var.source_info)\n-            } else {\n-                // Not a variable or not declared in this scope.\n-                continue;\n-            };\n-\n-            let mut_str = if var.mutability == Mutability::Mut {\n-                \"mut \"\n-            } else {\n-                \"\"\n-            };\n-\n-            let indent = indent + INDENT.len();\n-            let mut indented_var = format!(\n-                \"{0:1$}let {2}{3:?}: {4:?}\",\n-                INDENT,\n-                indent,\n-                mut_str,\n-                local,\n-                var.ty\n-            );\n-            for user_ty in var.user_ty.projections() {\n-                write!(indented_var, \" as {:?}\", user_ty).unwrap();\n-            }\n-            indented_var.push_str(\";\");\n-            writeln!(\n-                w,\n-                \"{0:1$} // \\\"{2}\\\" in {3}\",\n-                indented_var,\n-                ALIGN,\n-                name,\n-                comment(tcx, source_info)\n-            )?;\n-        }\n-\n         write_scope_tree(tcx, mir, scope_tree, w, child, depth + 1)?;\n-\n         writeln!(w, \"{0:1$}}}\", \"\", depth * INDENT.len())?;\n     }\n \n@@ -556,19 +561,8 @@ pub fn write_mir_intro<'a, 'gcx, 'tcx>(\n         }\n     }\n \n-    // Print return place\n-    let indented_retptr = format!(\"{}let mut {:?}: {};\",\n-                                  INDENT,\n-                                  RETURN_PLACE,\n-                                  mir.local_decls[RETURN_PLACE].ty);\n-    writeln!(w, \"{0:1$} // return place\",\n-             indented_retptr,\n-             ALIGN)?;\n-\n     write_scope_tree(tcx, mir, &scope_tree, w, OUTERMOST_SOURCE_SCOPE, 1)?;\n \n-    write_temp_decls(mir, w)?;\n-\n     // Add an empty line before the first block is printed.\n     writeln!(w, \"\")?;\n \n@@ -632,22 +626,6 @@ fn write_mir_sig(\n     Ok(())\n }\n \n-fn write_temp_decls(mir: &Mir<'_>, w: &mut dyn Write) -> io::Result<()> {\n-    // Compiler-introduced temporary types.\n-    for temp in mir.temps_iter() {\n-        writeln!(\n-            w,\n-            \"{}let {}{:?}: {};\",\n-            INDENT,\n-            if mir.local_decls[temp].mutability == Mutability::Mut {\"mut \"} else {\"\"},\n-            temp,\n-            mir.local_decls[temp].ty\n-        )?;\n-    }\n-\n-    Ok(())\n-}\n-\n fn write_user_type_annotations(mir: &Mir<'_>, w: &mut dyn Write) -> io::Result<()> {\n     if !mir.user_type_annotations.is_empty() {\n         writeln!(w, \"| User Type Annotations\")?;"}, {"sha": "0201fed945a00bc0b59dbff4f6b8db3b4bbb873e", "filename": "src/test/mir-opt/box_expr.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9260305c9e6a15c7692b85324afbd7b36afb29ed/src%2Ftest%2Fmir-opt%2Fbox_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9260305c9e6a15c7692b85324afbd7b36afb29ed/src%2Ftest%2Fmir-opt%2Fbox_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbox_expr.rs?ref=9260305c9e6a15c7692b85324afbd7b36afb29ed", "patch": "@@ -22,15 +22,14 @@ impl Drop for S {\n // END RUST SOURCE\n // START rustc.main.ElaborateDrops.before.mir\n //     let mut _0: ();\n+//     let mut _2: std::boxed::Box<S>;\n+//     let mut _3: ();\n+//     let mut _4: std::boxed::Box<S>;\n //     scope 1 {\n //     }\n //     scope 2 {\n //         let _1: std::boxed::Box<S>;\n //     }\n-//     let mut _2: std::boxed::Box<S>;\n-//     let mut _3: ();\n-//     let mut _4: std::boxed::Box<S>;\n-//\n //     bb0: {\n //         StorageLive(_1);\n //         StorageLive(_2);"}, {"sha": "d4f545c9840df78725bc10535f0bedbbfc398a06", "filename": "src/test/mir-opt/issue-41110.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9260305c9e6a15c7692b85324afbd7b36afb29ed/src%2Ftest%2Fmir-opt%2Fissue-41110.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9260305c9e6a15c7692b85324afbd7b36afb29ed/src%2Ftest%2Fmir-opt%2Fissue-41110.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-41110.rs?ref=9260305c9e6a15c7692b85324afbd7b36afb29ed", "patch": "@@ -29,27 +29,28 @@ impl S {\n // END RUST SOURCE\n // START rustc.main.ElaborateDrops.after.mir\n //    let mut _0: ();\n+//    let mut _2: S;\n+//    let mut _3: S;\n+//    let mut _4: S;\n+//    let mut _5: bool;\n //    scope 1 {\n //    }\n //    scope 2 {\n //        let _1: ();\n //    }\n-//    let mut _2: S;\n-//    let mut _3: S;\n-//    let mut _4: S;\n-//    let mut _5: bool;\n+//    ...\n //    bb0: {\n // END rustc.main.ElaborateDrops.after.mir\n // START rustc.test.ElaborateDrops.after.mir\n //    let mut _0: ();\n+//    let mut _3: ();\n+//    let mut _4: S;\n+//    let mut _5: S;\n+//    let mut _6: bool;\n //    ...\n //    let mut _2: S;\n //    ...\n //    let _1: S;\n //    ...\n-//    let mut _3: ();\n-//    let mut _4: S;\n-//    let mut _5: S;\n-//    let mut _6: bool;\n //    bb0: {\n // END rustc.test.ElaborateDrops.after.mir"}, {"sha": "fb25e094bee020eb24b0c7d0b787075d401b5174", "filename": "src/test/mir-opt/issue-49232.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9260305c9e6a15c7692b85324afbd7b36afb29ed/src%2Ftest%2Fmir-opt%2Fissue-49232.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9260305c9e6a15c7692b85324afbd7b36afb29ed/src%2Ftest%2Fmir-opt%2Fissue-49232.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-49232.rs?ref=9260305c9e6a15c7692b85324afbd7b36afb29ed", "patch": "@@ -17,16 +17,16 @@ fn main() {\n // START rustc.main.mir_map.0.mir\n // fn main() -> (){\n //     let mut _0: ();\n-//     scope 1 {\n-//     }\n-//     scope 2 {\n-//         let _2: i32;\n-//     }\n //     let mut _1: ();\n //     let mut _3: bool;\n //     let mut _4: !;\n //     let mut _5: ();\n //     let mut _6: &i32;\n+//     scope 1 {\n+//     }\n+//     scope 2 {\n+//         let _2: i32;\n+//     }\n //     bb0: {\n //         goto -> bb1;\n //     }"}, {"sha": "f317c06de4b817ee8ebac0ae62cc7d6bb535325d", "filename": "src/test/mir-opt/packed-struct-drop-aligned.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9260305c9e6a15c7692b85324afbd7b36afb29ed/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9260305c9e6a15c7692b85324afbd7b36afb29ed/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned.rs?ref=9260305c9e6a15c7692b85324afbd7b36afb29ed", "patch": "@@ -18,16 +18,16 @@ impl Drop for Droppy {\n // START rustc.main.EraseRegions.before.mir\n // fn main() -> () {\n //     let mut _0: ();\n-//     scope 1 {\n-//     }\n-//     scope 2 {\n-//         let mut _1: Packed;\n-//     }\n //     let mut _2: Aligned;\n //     let mut _3: Droppy;\n //     let mut _4: Aligned;\n //     let mut _5: Droppy;\n //     let mut _6: Aligned;\n+//     scope 1 {\n+//     }\n+//     scope 2 {\n+//         let mut _1: Packed;\n+//     }\n //\n //     bb0: {\n //         StorageLive(_1);"}]}