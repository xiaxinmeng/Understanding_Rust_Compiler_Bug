{"sha": "8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiZjdmZGE2YjVmZWM5OWExMWFlMGZiOGQ1YzNkYmQxNTAwNjM3NDE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-02-05T16:22:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-02-05T16:22:26Z"}, "message": "Auto merge of #58189 - kennytm:rollup, r=kennytm\n\nRollup of 23 pull requests\n\nSuccessful merges:\n\n - #58001 (proc_macro: make `TokenStream::from_streams` pre-allocate its vector.)\n - #58096 (Transition linkchecker to 2018 edition)\n - #58097 (Transition remote test to Rust 2018)\n - #58106 (libfmt_macros => 2018)\n - #58107 (libgraphviz => 2018)\n - #58108 (Add NVPTX target to a build manifest)\n - #58109 (librustc_privacy => 2018)\n - #58112 (libpanic_abort => 2018)\n - #58113 (Transition build-manifest to 2018 edition)\n - #58114 (Transition tidy and unstable-book-gen to 2018 edition)\n - #58116 (Include the span of attributes of the lhs to the span of the assignment expression)\n - #58117 (Transition rustdoc-theme to 2018 edition)\n - #58128 (libunwind => 2018)\n - #58138 (Fix #58101)\n - #58139 (hir: add more HirId methods)\n - #58141 (Remove weasel word in docs for iter's take_while())\n - #58142 (Remove stray FIXME)\n - #58145 (Add #[must_use] to core::task::Poll)\n - #58162 (Add more debugging code to track down appveyor 259 exit code)\n - #58169 (Update contributor name in .mailmap)\n - #58172 (update split docs)\n - #58182 (SGX target: handle empty user buffers correctly)\n - #58186 (Add Rustlings to the doc index)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "2cb242a9ee8d27df1217d15e6126f936f7a3b9c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2cb242a9ee8d27df1217d15e6126f936f7a3b9c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741", "html_url": "https://github.com/rust-lang/rust/commit/8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2c6b8c29f13f8d1f242da89e587960b95337819", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2c6b8c29f13f8d1f242da89e587960b95337819", "html_url": "https://github.com/rust-lang/rust/commit/b2c6b8c29f13f8d1f242da89e587960b95337819"}, {"sha": "c23871a4c424d2c78656fc6c49a5c3cc248bed42", "url": "https://api.github.com/repos/rust-lang/rust/commits/c23871a4c424d2c78656fc6c49a5c3cc248bed42", "html_url": "https://github.com/rust-lang/rust/commit/c23871a4c424d2c78656fc6c49a5c3cc248bed42"}], "stats": {"total": 250, "additions": 188, "deletions": 62}, "files": [{"sha": "d265f45c5cafa6e90cd8f5c78d25ef8940c0556e", "filename": ".mailmap", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741/.mailmap", "raw_url": "https://github.com/rust-lang/rust/raw/8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741/.mailmap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.mailmap?ref=8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741", "patch": "@@ -155,6 +155,7 @@ Matt Brubeck <mbrubeck@limpet.net> <mbrubeck@cs.hmc.edu>\n Matthew Auld <matthew.auld@intel.com>\n Matthew McPherrin <matthew@mcpherrin.ca> <matt@mcpherrin.ca>\n Matthijs Hofstra <thiezz@gmail.com>\n+Melody Horn <melody@boringcactus.com> <mathphreak@gmail.com>\n Michael Williams <m.t.williams@live.com>\n Michael Woerister <michaelwoerister@posteo> <michaelwoerister@gmail>\n Micka\u00ebl Raybaud-Roig <raybaudroigm@gmail.com> m-r-r <raybaudroigm@gmail.com>"}, {"sha": "0ec4210af98b2782e8edb7210edc1660e6545667", "filename": "appveyor.yml", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741/appveyor.yml", "raw_url": "https://github.com/rust-lang/rust/raw/8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741/appveyor.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/appveyor.yml?ref=8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741", "patch": "@@ -207,7 +207,10 @@ test_script:\n   - sh src/ci/init_repo.sh . /c/cache/rustsrc\n   - set SRC=.\n   - set NO_CCACHE=1\n-  - sh src/ci/run.sh\n+  # Added this debugging code to try tracking down https://github.com/rust-lang/rust/issues/58160\n+  # Replace it with the commented line below after the issue with AppVeyor is fixed\n+  - \"sh src/ci/run.sh & set ret=%errorlevel% & echo exit code in appveyor.yml: %ret% & exit %ret%\"\n+#  - sh src/ci/run.sh\n \n on_failure:\n   # Dump crash log"}, {"sha": "0841e70a6ed29f68a5a28c000faccd04fd1092db", "filename": "src/ci/run.sh", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741/src%2Fci%2Frun.sh", "raw_url": "https://github.com/rust-lang/rust/raw/8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741/src%2Fci%2Frun.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Frun.sh?ref=8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741", "patch": "@@ -127,7 +127,13 @@ if [ ! -z \"$SCRIPT\" ]; then\n   set +e\n   sh -x -c \"$SCRIPT\"\n   ret=$?\n-  echo \"script exited with $ret\"\n+  echo \"exit code in src/ci/run.sh: $ret\"\n+\n+  echo \"tasklist:\"\n+  tasklist\n+  echo -n \"location of sh: \"\n+  where sh\n+\n   exit $ret\n else\n   do_make() {"}, {"sha": "0a2a80e8fd6e2b4d62dcf9a93f2dc5983b0da249", "filename": "src/doc/index.md", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741/src%2Fdoc%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741/src%2Fdoc%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Findex.md?ref=8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741", "patch": "@@ -52,6 +52,12 @@ If reading multiple hundreds of pages about a language isn't your style, then\n a lot of words, RBE shows off a bunch of code, and keeps the talking to a\n minimum. It also includes exercises!\n \n+## Rustlings\n+\n+[Rustlings](https://github.com/rust-lang/rustlings) guides you through downloading and setting up the Rust toolchain,\n+and teaches you the basics of reading and writing Rust syntax. It's an\n+alternative to Rust by Example that works with your own environment.\n+\n # Use Rust\n \n Once you've gotten familiar with the language, these resources can help you"}, {"sha": "218c7199f35a630053c9149b131758c14a6d6c87", "filename": "src/libcore/iter/traits/iterator.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs?ref=8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741", "patch": "@@ -952,8 +952,7 @@ pub trait Iterator {\n     /// ```\n     ///\n     /// The `3` is no longer there, because it was consumed in order to see if\n-    /// the iteration should stop, but wasn't placed back into the iterator or\n-    /// some similar thing.\n+    /// the iteration should stop, but wasn't placed back into the iterator.\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn take_while<P>(self, predicate: P) -> TakeWhile<Self, P> where"}, {"sha": "e9190cc3ddf1b5ec6a78354781827cc9b7ea17b8", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741", "patch": "@@ -2961,8 +2961,8 @@ impl str {\n     /// An iterator over substrings of this string slice, separated by\n     /// characters matched by a pattern.\n     ///\n-    /// The pattern can be a `&str`, [`char`], or a closure that determines the\n-    /// split.\n+    /// The pattern can be any type that implements the Pattern trait. Notable\n+    /// examples are `&str`, [`char`], and closures that determines the split.\n     ///\n     /// # Iterator behavior\n     ///\n@@ -3078,8 +3078,8 @@ impl str {\n     /// An iterator over substrings of the given string slice, separated by\n     /// characters matched by a pattern and yielded in reverse order.\n     ///\n-    /// The pattern can be a `&str`, [`char`], or a closure that determines the\n-    /// split.\n+    /// The pattern can be any type that implements the Pattern trait. Notable\n+    /// examples are `&str`, [`char`], and closures that determines the split.\n     ///\n     /// # Iterator behavior\n     ///\n@@ -3128,8 +3128,8 @@ impl str {\n     /// An iterator over substrings of the given string slice, separated by\n     /// characters matched by a pattern.\n     ///\n-    /// The pattern can be a `&str`, [`char`], or a closure that determines the\n-    /// split.\n+    /// The pattern can be any type that implements the Pattern trait. Notable\n+    /// examples are `&str`, [`char`], and closures that determines the split.\n     ///\n     /// Equivalent to [`split`], except that the trailing substring\n     /// is skipped if empty.\n@@ -3175,8 +3175,8 @@ impl str {\n     /// An iterator over substrings of `self`, separated by characters\n     /// matched by a pattern and yielded in reverse order.\n     ///\n-    /// The pattern can be a simple `&str`, [`char`], or a closure that\n-    /// determines the split.\n+    /// The pattern can be any type that implements the Pattern trait. Notable\n+    /// examples are `&str`, [`char`], and closures that determines the split.\n     /// Additional libraries might provide more complex patterns like\n     /// regular expressions.\n     ///\n@@ -3222,8 +3222,8 @@ impl str {\n     /// If `n` substrings are returned, the last substring (the `n`th substring)\n     /// will contain the remainder of the string.\n     ///\n-    /// The pattern can be a `&str`, [`char`], or a closure that determines the\n-    /// split.\n+    /// The pattern can be any type that implements the Pattern trait. Notable\n+    /// examples are `&str`, [`char`], and closures that determines the split.\n     ///\n     /// # Iterator behavior\n     ///\n@@ -3275,8 +3275,8 @@ impl str {\n     /// If `n` substrings are returned, the last substring (the `n`th substring)\n     /// will contain the remainder of the string.\n     ///\n-    /// The pattern can be a `&str`, [`char`], or a closure that\n-    /// determines the split.\n+    /// The pattern can be any type that implements the Pattern trait. Notable\n+    /// examples are `&str`, [`char`], and closures that determines the split.\n     ///\n     /// # Iterator behavior\n     ///\n@@ -3319,8 +3319,8 @@ impl str {\n     /// An iterator over the disjoint matches of a pattern within the given string\n     /// slice.\n     ///\n-    /// The pattern can be a `&str`, [`char`], or a closure that\n-    /// determines if a character matches.\n+    /// The pattern can be any type that implements the Pattern trait. Notable\n+    /// examples are `&str`, [`char`], and closures that determines the split.\n     ///\n     /// # Iterator behavior\n     ///"}, {"sha": "ac656153519e19dfda713141436e41bd96f27dda", "filename": "src/libcore/task/poll.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741/src%2Flibcore%2Ftask%2Fpoll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741/src%2Flibcore%2Ftask%2Fpoll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fpoll.rs?ref=8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741", "patch": "@@ -7,6 +7,7 @@ use result::Result;\n \n /// Indicates whether a value is available or if the current task has been\n /// scheduled to receive a wakeup instead.\n+#[must_use = \"this `Poll` may be a `Pending` variant, which should be handled\"]\n #[derive(Copy, Clone, Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]\n pub enum Poll<T> {\n     /// Represents that a value is immediately ready."}, {"sha": "50779a2d9ad08d526e5c9a02def260618c422fe7", "filename": "src/libfmt_macros/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741/src%2Flibfmt_macros%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741/src%2Flibfmt_macros%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfmt_macros%2FCargo.toml?ref=8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741", "patch": "@@ -2,6 +2,7 @@\n authors = [\"The Rust Project Developers\"]\n name = \"fmt_macros\"\n version = \"0.0.0\"\n+edition = \"2018\"\n \n [lib]\n name = \"fmt_macros\""}, {"sha": "7bfe2377cea9eac489dc2a5f52c3145a6082ee79", "filename": "src/libfmt_macros/lib.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741/src%2Flibfmt_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741/src%2Flibfmt_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfmt_macros%2Flib.rs?ref=8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741", "patch": "@@ -10,14 +10,15 @@\n        html_playground_url = \"https://play.rust-lang.org/\",\n        test(attr(deny(warnings))))]\n \n-#![feature(nll)]\n+#![deny(rust_2018_idioms)]\n+\n #![feature(rustc_private)]\n \n-pub use self::Piece::*;\n-pub use self::Position::*;\n-pub use self::Alignment::*;\n-pub use self::Flag::*;\n-pub use self::Count::*;\n+pub use Piece::*;\n+pub use Position::*;\n+pub use Alignment::*;\n+pub use Flag::*;\n+pub use Count::*;\n \n use std::str;\n use std::string;"}, {"sha": "a6a3c1a249d64285e1fbb154f766f196fa926909", "filename": "src/libgraphviz/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741/src%2Flibgraphviz%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741/src%2Flibgraphviz%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgraphviz%2FCargo.toml?ref=8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741", "patch": "@@ -2,6 +2,7 @@\n authors = [\"The Rust Project Developers\"]\n name = \"graphviz\"\n version = \"0.0.0\"\n+edition = \"2018\"\n \n [lib]\n name = \"graphviz\""}, {"sha": "f05f6e6651f8357328092a55524be034897998df", "filename": "src/libgraphviz/lib.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741/src%2Flibgraphviz%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741/src%2Flibgraphviz%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgraphviz%2Flib.rs?ref=8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741", "patch": "@@ -276,10 +276,11 @@\n        html_root_url = \"https://doc.rust-lang.org/nightly/\",\n        test(attr(allow(unused_variables), deny(warnings))))]\n \n-#![feature(nll)]\n+#![deny(rust_2018_idioms)]\n+\n #![feature(str_escape)]\n \n-use self::LabelText::*;\n+use LabelText::*;\n \n use std::borrow::Cow;\n use std::io::prelude::*;\n@@ -548,12 +549,12 @@ impl<'a> LabelText<'a> {\n     }\n \n     /// Puts `prefix` on a line above this label, with a blank line separator.\n-    pub fn prefix_line(self, prefix: LabelText) -> LabelText<'static> {\n+    pub fn prefix_line(self, prefix: LabelText<'_>) -> LabelText<'static> {\n         prefix.suffix_line(self)\n     }\n \n     /// Puts `suffix` on a line below this label, with a blank line separator.\n-    pub fn suffix_line(self, suffix: LabelText) -> LabelText<'static> {\n+    pub fn suffix_line(self, suffix: LabelText<'_>) -> LabelText<'static> {\n         let mut prefix = self.pre_escaped_content().into_owned();\n         let suffix = suffix.pre_escaped_content();\n         prefix.push_str(r\"\\n\\n\");\n@@ -686,7 +687,7 @@ pub fn render_opts<'a, N, E, G, W>(g: &'a G,\n \n #[cfg(test)]\n mod tests {\n-    use self::NodeLabels::*;\n+    use NodeLabels::*;\n     use super::{Id, Labeller, Nodes, Edges, GraphWalk, render, Style};\n     use super::LabelText::{self, LabelStr, EscStr, HtmlStr};\n     use std::io;"}, {"sha": "2bee0b716c750f4836068ea38b85e74cceb09b7d", "filename": "src/libpanic_abort/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741/src%2Flibpanic_abort%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741/src%2Flibpanic_abort%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_abort%2FCargo.toml?ref=8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741", "patch": "@@ -2,6 +2,7 @@\n authors = [\"The Rust Project Developers\"]\n name = \"panic_abort\"\n version = \"0.0.0\"\n+edition = \"2018\"\n \n [lib]\n path = \"lib.rs\""}, {"sha": "daa1998d29d72e2ae6d8148198ea2fdecdbb414f", "filename": "src/libpanic_abort/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741/src%2Flibpanic_abort%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741/src%2Flibpanic_abort%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_abort%2Flib.rs?ref=8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741", "patch": "@@ -10,11 +10,12 @@\n        html_root_url = \"https://doc.rust-lang.org/nightly/\",\n        issue_tracker_base_url = \"https://github.com/rust-lang/rust/issues/\")]\n #![panic_runtime]\n+\n #![allow(unused_features)]\n+#![deny(rust_2018_idioms)]\n \n #![feature(core_intrinsics)]\n #![feature(libc)]\n-#![feature(nll)]\n #![feature(panic_runtime)]\n #![feature(staged_api)]\n #![feature(rustc_attrs)]\n@@ -46,7 +47,6 @@ pub unsafe extern fn __rust_start_panic(_payload: usize) -> u32 {\n \n     #[cfg(any(unix, target_os = \"cloudabi\"))]\n     unsafe fn abort() -> ! {\n-        extern crate libc;\n         libc::abort();\n     }\n "}, {"sha": "d35306ba353a3c7362c78d5156721a1c4acef5c5", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741", "patch": "@@ -401,6 +401,12 @@ impl<'hir> Map<'hir> {\n         }\n     }\n \n+    // FIXME(@ljedrz): replace the NodeId variant\n+    pub fn describe_def_by_hir_id(&self, hir_id: HirId) -> Option<Def> {\n+        let node_id = self.hir_to_node_id(hir_id);\n+        self.describe_def(node_id)\n+    }\n+\n     fn entry_count(&self) -> usize {\n         self.map.len()\n     }\n@@ -445,6 +451,12 @@ impl<'hir> Map<'hir> {\n         }\n     }\n \n+    // FIXME(@ljedrz): replace the NodeId variant\n+    pub fn fn_decl_by_hir_id(&self, hir_id: HirId) -> Option<FnDecl> {\n+        let node_id = self.hir_to_node_id(hir_id);\n+        self.fn_decl(node_id)\n+    }\n+\n     /// Returns the `NodeId` that corresponds to the definition of\n     /// which this is the body of, i.e., a `fn`, `const` or `static`\n     /// item (possibly associated), a closure, or a `hir::AnonConst`.\n@@ -855,6 +867,12 @@ impl<'hir> Map<'hir> {\n         self.local_def_id(self.get_parent(id))\n     }\n \n+    // FIXME(@ljedrz): replace the NodeId variant\n+    pub fn get_parent_did_by_hir_id(&self, id: HirId) -> DefId {\n+        let node_id = self.hir_to_node_id(id);\n+        self.get_parent_did(node_id)\n+    }\n+\n     pub fn get_foreign_abi(&self, id: NodeId) -> Abi {\n         let parent = self.get_parent(id);\n         if let Some(entry) = self.find_entry(parent) {\n@@ -868,6 +886,12 @@ impl<'hir> Map<'hir> {\n         bug!(\"expected foreign mod or inlined parent, found {}\", self.node_to_string(parent))\n     }\n \n+    // FIXME(@ljedrz): replace the NodeId variant\n+    pub fn get_foreign_abi_by_hir_id(&self, id: HirId) -> Abi {\n+        let node_id = self.hir_to_node_id(id);\n+        self.get_foreign_abi(node_id)\n+    }\n+\n     pub fn expect_item(&self, id: NodeId) -> &'hir Item {\n         match self.find(id) { // read recorded by `find`\n             Some(Node::Item(item)) => item,\n@@ -888,6 +912,18 @@ impl<'hir> Map<'hir> {\n         }\n     }\n \n+    // FIXME(@ljedrz): replace the NodeId variant\n+    pub fn expect_impl_item_by_hir_id(&self, id: HirId) -> &'hir ImplItem {\n+        let node_id = self.hir_to_node_id(id);\n+        self.expect_impl_item(node_id)\n+    }\n+\n+    // FIXME(@ljedrz): replace the NodeId variant\n+    pub fn expect_trait_item_by_hir_id(&self, id: HirId) -> &'hir TraitItem {\n+        let node_id = self.hir_to_node_id(id);\n+        self.expect_trait_item(node_id)\n+    }\n+\n     pub fn expect_trait_item(&self, id: NodeId) -> &'hir TraitItem {\n         match self.find(id) {\n             Some(Node::TraitItem(item)) => item,\n@@ -931,6 +967,12 @@ impl<'hir> Map<'hir> {\n         }\n     }\n \n+    // FIXME(@ljedrz): replace the NodeId variant\n+    pub fn expect_expr_by_hir_id(&self, id: HirId) -> &'hir Expr {\n+        let node_id = self.hir_to_node_id(id);\n+        self.expect_expr(node_id)\n+    }\n+\n     /// Returns the name associated with the given NodeId's AST.\n     pub fn name(&self, id: NodeId) -> Name {\n         match self.get(id) {\n@@ -948,6 +990,12 @@ impl<'hir> Map<'hir> {\n         }\n     }\n \n+    // FIXME(@ljedrz): replace the NodeId variant\n+    pub fn name_by_hir_id(&self, id: HirId) -> Name {\n+        let node_id = self.hir_to_node_id(id);\n+        self.name(node_id)\n+    }\n+\n     /// Given a node ID, get a list of attributes associated with the AST\n     /// corresponding to the Node ID\n     pub fn attrs(&self, id: NodeId) -> &'hir [ast::Attribute] {\n@@ -970,6 +1018,12 @@ impl<'hir> Map<'hir> {\n         attrs.unwrap_or(&[])\n     }\n \n+    // FIXME(@ljedrz): replace the NodeId variant\n+    pub fn attrs_by_hir_id(&self, id: HirId) -> &'hir [ast::Attribute] {\n+        let node_id = self.hir_to_node_id(id);\n+        self.attrs(node_id)\n+    }\n+\n     /// Returns an iterator that yields the node id's with paths that\n     /// match `parts`.  (Requires `parts` is non-empty.)\n     ///\n@@ -1019,6 +1073,12 @@ impl<'hir> Map<'hir> {\n         }\n     }\n \n+    // FIXME(@ljedrz): replace the NodeId variant\n+    pub fn span_by_hir_id(&self, id: HirId) -> Span {\n+        let node_id = self.hir_to_node_id(id);\n+        self.span(node_id)\n+    }\n+\n     pub fn span_if_local(&self, id: DefId) -> Option<Span> {\n         self.as_local_node_id(id).map(|id| self.span(id))\n     }"}, {"sha": "c726885337ea8834e943d863e1df1c6e95440fa8", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741", "patch": "@@ -765,7 +765,9 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                 }\n             }\n             EvalResult::Unmarked => {\n-                span_bug!(span, \"encountered unmarked API: {:?}\", def_id);\n+                // The API could be uncallable for other reasons, for example when a private module\n+                // was referenced.\n+                self.sess.delay_span_bug(span, &format!(\"encountered unmarked API: {:?}\", def_id));\n             }\n         }\n     }"}, {"sha": "5bf8024c56911dc82fa67350ce7cc5d18bba80cc", "filename": "src/librustc_privacy/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741/src%2Flibrustc_privacy%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741/src%2Flibrustc_privacy%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2FCargo.toml?ref=8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741", "patch": "@@ -2,6 +2,7 @@\n authors = [\"The Rust Project Developers\"]\n name = \"rustc_privacy\"\n version = \"0.0.0\"\n+edition = \"2018\"\n \n [lib]\n name = \"rustc_privacy\""}, {"sha": "000c6bb275bd0f4a6b782156c08269082fb95566", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741", "patch": "@@ -2,18 +2,15 @@\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n        html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n \n-#![feature(nll)]\n+#![deny(rust_2018_idioms)]\n+\n #![feature(rustc_diagnostic_macros)]\n \n #![recursion_limit=\"256\"]\n \n-#[macro_use] extern crate rustc;\n #[macro_use] extern crate syntax;\n-#[macro_use] extern crate log;\n-extern crate rustc_typeck;\n-extern crate syntax_pos;\n-extern crate rustc_data_structures;\n \n+use rustc::bug;\n use rustc::hir::{self, Node, PatKind, AssociatedItemKind};\n use rustc::hir::def::Def;\n use rustc::hir::def_id::{CRATE_DEF_INDEX, LOCAL_CRATE, CrateNum, DefId};\n@@ -1584,7 +1581,7 @@ impl<'a, 'tcx: 'a> SearchInterfaceForPrivateItemsVisitor<'a, 'tcx> {\n         let ret = self.required_visibility == ty::Visibility::Public &&\n             self.private_crates.contains(&item_id.krate);\n \n-        debug!(\"leaks_private_dep(item_id={:?})={}\", item_id, ret);\n+        log::debug!(\"leaks_private_dep(item_id={:?})={}\", item_id, ret);\n         return ret;\n     }\n }\n@@ -1748,7 +1745,7 @@ impl<'a, 'tcx> Visitor<'tcx> for PrivateItemsInPublicInterfacesVisitor<'a, 'tcx>\n     }\n }\n \n-pub fn provide(providers: &mut Providers) {\n+pub fn provide(providers: &mut Providers<'_>) {\n     *providers = Providers {\n         privacy_access_levels,\n         check_mod_privacy,"}, {"sha": "bd6f4b4465b24e5dc5343c3f30dfe5db0aefac13", "filename": "src/libstd/os/fortanix_sgx/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741/src%2Flibstd%2Fos%2Ffortanix_sgx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741/src%2Flibstd%2Fos%2Ffortanix_sgx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Ffortanix_sgx%2Fmod.rs?ref=8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741", "patch": "@@ -16,7 +16,7 @@ pub mod usercalls {\n     /// Primitives for allocating memory in userspace as well as copying data\n     /// to and from user memory.\n     pub mod alloc {\n-        pub use sys::abi::usercalls::alloc;\n+        pub use sys::abi::usercalls::alloc::*;\n     }\n \n     /// Lowest-level interfaces to usercalls and usercall ABI type definitions."}, {"sha": "2efbaa9b1487ae2ce779f3ff9f57094482dbc005", "filename": "src/libstd/sys/sgx/abi/usercalls/alloc.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Falloc.rs?ref=8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741", "patch": "@@ -537,7 +537,12 @@ impl UserRef<super::raw::ByteBuffer> {\n     pub fn copy_user_buffer(&self) -> Vec<u8> {\n         unsafe {\n             let buf = self.to_enclave();\n-            User::from_raw_parts(buf.data as _, buf.len).to_enclave()\n+            if buf.len > 0 {\n+                User::from_raw_parts(buf.data as _, buf.len).to_enclave()\n+            } else {\n+                // Mustn't look at `data` or call `free` if `len` is `0`.\n+                Vec::with_capacity(0)\n+            }\n         }\n     }\n }"}, {"sha": "bae044b906b1621514f638d9252b0c83d8a42c3a", "filename": "src/libstd/sys/sgx/abi/usercalls/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Fmod.rs?ref=8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741", "patch": "@@ -22,7 +22,8 @@ pub fn read(fd: Fd, buf: &mut [u8]) -> IoResult<usize> {\n #[unstable(feature = \"sgx_platform\", issue = \"56975\")]\n pub fn read_alloc(fd: Fd) -> IoResult<Vec<u8>> {\n     unsafe {\n-        let mut userbuf = alloc::User::<ByteBuffer>::uninitialized();\n+        let userbuf = ByteBuffer { data: ::ptr::null_mut(), len: 0 };\n+        let mut userbuf = alloc::User::new_from_enclave(&userbuf);\n         raw::read_alloc(fd, userbuf.as_raw_mut_ptr()).from_sgx_result()?;\n         Ok(userbuf.copy_user_buffer())\n     }"}, {"sha": "33163a556c16df96f7e79e9ffaef52adb7ef0929", "filename": "src/libstd/sys/sgx/rwlock.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741/src%2Flibstd%2Fsys%2Fsgx%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741/src%2Flibstd%2Fsys%2Fsgx%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Frwlock.rs?ref=8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741", "patch": "@@ -19,9 +19,6 @@ unsafe fn rw_lock_size_assert(r: RWLock) {\n     mem::transmute::<RWLock, [u8; 128]>(r);\n }\n \n-//unsafe impl Send for RWLock {}\n-//unsafe impl Sync for RWLock {} // FIXME\n-\n impl RWLock {\n     pub const fn new() -> RWLock {\n         RWLock {"}, {"sha": "1c02a80df4683b4f6c83f5d2bcd21673f0ef7c8d", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741", "patch": "@@ -3455,6 +3455,14 @@ impl<'a> Parser<'a> {\n                 }),\n             }?;\n \n+            // Make sure that the span of the parent node is larger than the span of lhs and rhs,\n+            // including the attributes.\n+            let lhs_span = lhs\n+                .attrs\n+                .iter()\n+                .filter(|a| a.style == AttrStyle::Outer)\n+                .next()\n+                .map_or(lhs_span, |a| a.span);\n             let span = lhs_span.to(rhs.span);\n             lhs = match op {\n                 AssocOp::Add | AssocOp::Subtract | AssocOp::Multiply | AssocOp::Divide |"}, {"sha": "7d6ffceb2c0d49a6582e4800a700bca42ad3261a", "filename": "src/libsyntax/tokenstream.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741/src%2Flibsyntax%2Ftokenstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741/src%2Flibsyntax%2Ftokenstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftokenstream.rs?ref=8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741", "patch": "@@ -255,7 +255,13 @@ impl TokenStream {\n             0 => TokenStream::empty(),\n             1 => streams.pop().unwrap(),\n             _ => {\n-                let mut vec = vec![];\n+                // rust-lang/rust#57735: pre-allocate vector to avoid\n+                // quadratic blow-up due to on-the-fly reallocations.\n+                let tree_count = streams.iter()\n+                    .map(|ts| match &ts.0 { None => 0, Some(s) => s.len() })\n+                    .sum();\n+                let mut vec = Vec::with_capacity(tree_count);\n+\n                 for stream in streams {\n                     match stream.0 {\n                         None => {},"}, {"sha": "2378b0a315a169701182fd1d398c1bdc0a9e1d70", "filename": "src/libunwind/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741/src%2Flibunwind%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741/src%2Flibunwind%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunwind%2FCargo.toml?ref=8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741", "patch": "@@ -3,6 +3,7 @@ authors = [\"The Rust Project Developers\"]\n name = \"unwind\"\n version = \"0.0.0\"\n build = \"build.rs\"\n+edition = \"2018\"\n \n [lib]\n name = \"unwind\""}, {"sha": "b9a9929ef8b87e1d0dea85cfba05080076452ad8", "filename": "src/libunwind/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741/src%2Flibunwind%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741/src%2Flibunwind%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunwind%2Flib.rs?ref=8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741", "patch": "@@ -1,8 +1,9 @@\n #![no_std]\n #![unstable(feature = \"panic_unwind\", issue = \"32837\")]\n \n+#![deny(rust_2018_idioms)]\n+\n #![feature(link_cfg)]\n-#![feature(nll)]\n #![feature(staged_api)]\n #![feature(unwind_attributes)]\n #![feature(static_nobundle)]\n@@ -18,7 +19,6 @@ cfg_if! {\n     } else if #[cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))] {\n         // no unwinder on the system!\n     } else {\n-        extern crate libc;\n         mod libunwind;\n         pub use libunwind::*;\n     }"}, {"sha": "339b554ed6abd2568083f0bb4cb0c09ca7fcb399", "filename": "src/libunwind/libunwind.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741/src%2Flibunwind%2Flibunwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741/src%2Flibunwind%2Flibunwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunwind%2Flibunwind.rs?ref=8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741", "patch": "@@ -21,7 +21,7 @@ pub enum _Unwind_Reason_Code {\n     _URC_CONTINUE_UNWIND = 8,\n     _URC_FAILURE = 9, // used only by ARM EHABI\n }\n-pub use self::_Unwind_Reason_Code::*;\n+pub use _Unwind_Reason_Code::*;\n \n pub type _Unwind_Exception_Class = u64;\n pub type _Unwind_Word = uintptr_t;\n@@ -94,7 +94,7 @@ if #[cfg(all(any(target_os = \"ios\", target_os = \"netbsd\", not(target_arch = \"arm\n         _UA_FORCE_UNWIND = 8,\n         _UA_END_OF_STACK = 16,\n     }\n-    pub use self::_Unwind_Action::*;\n+    pub use _Unwind_Action::*;\n \n     extern \"C\" {\n         pub fn _Unwind_GetGR(ctx: *mut _Unwind_Context, reg_index: c_int) -> _Unwind_Word;\n@@ -118,7 +118,7 @@ if #[cfg(all(any(target_os = \"ios\", target_os = \"netbsd\", not(target_arch = \"arm\n         _US_FORCE_UNWIND = 8,\n         _US_END_OF_STACK = 16,\n     }\n-    pub use self::_Unwind_State::*;\n+    pub use _Unwind_State::*;\n \n     #[repr(C)]\n     enum _Unwind_VRS_Result {\n@@ -134,7 +134,7 @@ if #[cfg(all(any(target_os = \"ios\", target_os = \"netbsd\", not(target_arch = \"arm\n         _UVRSC_WMMXD = 3,\n         _UVRSC_WMMXC = 4,\n     }\n-    use self::_Unwind_VRS_RegClass::*;\n+    use _Unwind_VRS_RegClass::*;\n     #[repr(C)]\n     enum _Unwind_VRS_DataRepresentation {\n         _UVRSD_UINT32 = 0,\n@@ -144,7 +144,7 @@ if #[cfg(all(any(target_os = \"ios\", target_os = \"netbsd\", not(target_arch = \"arm\n         _UVRSD_FLOAT = 4,\n         _UVRSD_DOUBLE = 5,\n     }\n-    use self::_Unwind_VRS_DataRepresentation::*;\n+    use _Unwind_VRS_DataRepresentation::*;\n \n     pub const UNWIND_POINTER_REG: c_int = 12;\n     pub const UNWIND_IP_REG: c_int = 15;"}, {"sha": "f12e9198b0d7c274f767b703d1892845e66e5019", "filename": "src/test/ui/stability-in-private-module.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741/src%2Ftest%2Fui%2Fstability-in-private-module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741/src%2Ftest%2Fui%2Fstability-in-private-module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-in-private-module.rs?ref=8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741", "patch": "@@ -0,0 +1,4 @@\n+fn main() {\n+    let _ = std::thread::thread_info::current_thread();\n+    //~^ERROR module `thread_info` is private\n+}"}, {"sha": "c3edd62a15edac3ca5c418d07223a77b0727d11c", "filename": "src/test/ui/stability-in-private-module.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741/src%2Ftest%2Fui%2Fstability-in-private-module.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741/src%2Ftest%2Fui%2Fstability-in-private-module.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-in-private-module.stderr?ref=8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741", "patch": "@@ -0,0 +1,9 @@\n+error[E0603]: module `thread_info` is private\n+  --> $DIR/stability-in-private-module.rs:2:26\n+   |\n+LL |     let _ = std::thread::thread_info::current_thread();\n+   |                          ^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0603`."}, {"sha": "93d0f61e1d9f0be7372e03a5c9b05a44993377f3", "filename": "src/tools/build-manifest/Cargo.toml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741/src%2Ftools%2Fbuild-manifest%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741/src%2Ftools%2Fbuild-manifest%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2FCargo.toml?ref=8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741", "patch": "@@ -2,8 +2,9 @@\n name = \"build-manifest\"\n version = \"0.1.0\"\n authors = [\"Alex Crichton <alex@alexcrichton.com>\"]\n+edition = \"2018\"\n \n [dependencies]\n toml = \"0.4\"\n-serde = \"1.0\"\n+serde = { version = \"1.0\", features = [\"derive\"] }\n serde_derive = \"1.0\""}, {"sha": "eaba473f9c3b8dcfc789321ec6ef1cc93ccf804a", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741", "patch": "@@ -1,6 +1,7 @@\n-extern crate toml;\n-#[macro_use]\n-extern crate serde_derive;\n+#![deny(rust_2018_idioms)]\n+\n+use toml;\n+use serde::Serialize;\n \n use std::collections::BTreeMap;\n use std::env;\n@@ -78,6 +79,7 @@ static TARGETS: &'static [&'static str] = &[\n     \"mips64el-unknown-linux-gnuabi64\",\n     \"mipsel-unknown-linux-gnu\",\n     \"mipsel-unknown-linux-musl\",\n+    \"nvptx64-nvidia-cuda\",\n     \"powerpc-unknown-linux-gnu\",\n     \"powerpc64-unknown-linux-gnu\",\n     \"powerpc64le-unknown-linux-gnu\",\n@@ -468,7 +470,7 @@ impl Builder {\n         }\n         manifest.pkg.insert(\"rust\".to_string(), pkg);\n \n-        return manifest;\n+        manifest\n     }\n \n     fn profile(&mut self,"}, {"sha": "0994cd20662466eea5311ae3c2c985a9d68ea974", "filename": "src/tools/linkchecker/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741/src%2Ftools%2Flinkchecker%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741/src%2Ftools%2Flinkchecker%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flinkchecker%2FCargo.toml?ref=8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741", "patch": "@@ -2,6 +2,7 @@\n name = \"linkchecker\"\n version = \"0.1.0\"\n authors = [\"Alex Crichton <alex@alexcrichton.com>\"]\n+edition = \"2018\"\n \n [[bin]]\n name = \"linkchecker\""}, {"sha": "af704ce260dc421adbf8b0c0dc0730246eca8b28", "filename": "src/tools/linkchecker/main.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741/src%2Ftools%2Flinkchecker%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741/src%2Ftools%2Flinkchecker%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flinkchecker%2Fmain.rs?ref=8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741", "patch": "@@ -14,14 +14,16 @@\n //! A few whitelisted exceptions are allowed as there's known bugs in rustdoc,\n //! but this should catch the majority of \"broken link\" cases.\n \n+#![deny(rust_2018_idioms)]\n+\n use std::collections::hash_map::Entry;\n use std::collections::{HashMap, HashSet};\n use std::env;\n use std::fs;\n use std::path::{Path, PathBuf, Component};\n use std::rc::Rc;\n \n-use Redirect::*;\n+use crate::Redirect::*;\n \n macro_rules! t {\n     ($e:expr) => (match $e {"}, {"sha": "1a4b24bd5b34c3a3137ca1bf950279408aacb4b4", "filename": "src/tools/remote-test-client/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741/src%2Ftools%2Fremote-test-client%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741/src%2Ftools%2Fremote-test-client%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fremote-test-client%2FCargo.toml?ref=8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741", "patch": "@@ -2,5 +2,6 @@\n name = \"remote-test-client\"\n version = \"0.1.0\"\n authors = [\"The Rust Project Developers\"]\n+edition = \"2018\"\n \n [dependencies]"}, {"sha": "5906c76c01d9f1143c8f859476a0e60317c9170e", "filename": "src/tools/remote-test-server/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741/src%2Ftools%2Fremote-test-server%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741/src%2Ftools%2Fremote-test-server%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fremote-test-server%2FCargo.toml?ref=8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741", "patch": "@@ -2,5 +2,6 @@\n name = \"remote-test-server\"\n version = \"0.1.0\"\n authors = [\"The Rust Project Developers\"]\n+edition = \"2018\"\n \n [dependencies]"}, {"sha": "c12a20fd56c7b9d5720fe9c12edd2b7a348538e5", "filename": "src/tools/rustdoc-themes/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741/src%2Ftools%2Frustdoc-themes%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741/src%2Ftools%2Frustdoc-themes%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-themes%2FCargo.toml?ref=8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741", "patch": "@@ -2,6 +2,7 @@\n name = \"rustdoc-themes\"\n version = \"0.1.0\"\n authors = [\"Guillaume Gomez <guillaume1.gomez@gmail.com>\"]\n+edition = \"2018\"\n \n [[bin]]\n name = \"rustdoc-themes\""}, {"sha": "63432a6585a84d1365e7710206370338fb7f5763", "filename": "src/tools/rustdoc-themes/main.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741/src%2Ftools%2Frustdoc-themes%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741/src%2Ftools%2Frustdoc-themes%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-themes%2Fmain.rs?ref=8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741", "patch": "@@ -1,3 +1,5 @@\n+#![deny(rust_2018_idioms)]\n+\n use std::env::args;\n use std::fs::read_dir;\n use std::path::Path;"}, {"sha": "66224038266653e160fc4b587de06d99d974c702", "filename": "src/tools/tidy/src/main.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs?ref=8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741", "patch": "@@ -4,6 +4,7 @@\n //! etc. This is run by default on `make check` and as part of the auto\n //! builders.\n \n+#![deny(rust_2018_idioms)]\n #![deny(warnings)]\n \n extern crate tidy;"}, {"sha": "e5f81ba29d8d3fdd6ee06870b6104472f5816b6a", "filename": "src/tools/tidy/src/unstable_book.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741/src%2Ftools%2Ftidy%2Fsrc%2Funstable_book.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741/src%2Ftools%2Ftidy%2Fsrc%2Funstable_book.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Funstable_book.rs?ref=8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741", "patch": "@@ -1,7 +1,7 @@\n use std::collections::BTreeSet;\n use std::fs;\n use std::path;\n-use features::{collect_lang_features, collect_lib_features, Features, Status};\n+use crate::features::{collect_lang_features, collect_lib_features, Features, Status};\n \n pub const PATH_STR: &str = \"doc/unstable-book/src\";\n "}, {"sha": "3209de09aeb68ae670c2399a35c6b165c50496dd", "filename": "src/tools/unstable-book-gen/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741/src%2Ftools%2Funstable-book-gen%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741/src%2Ftools%2Funstable-book-gen%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Funstable-book-gen%2FCargo.toml?ref=8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741", "patch": "@@ -4,6 +4,7 @@ authors = [\"est31 <MTest31@outlook.com>\",\n name = \"unstable-book-gen\"\n version = \"0.1.0\"\n license = \"MIT/Apache-2.0\"\n+edition = \"2018\"\n \n [dependencies]\n tidy = { path = \"../tidy\" }"}, {"sha": "427014ce7fe55a0f6ced54df56593f861caabd57", "filename": "src/tools/unstable-book-gen/src/main.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741/src%2Ftools%2Funstable-book-gen%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741/src%2Ftools%2Funstable-book-gen%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Funstable-book-gen%2Fsrc%2Fmain.rs?ref=8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741", "patch": "@@ -1,8 +1,9 @@\n //! Auto-generate stub docs for the unstable book\n \n+#![deny(rust_2018_idioms)]\n #![deny(warnings)]\n \n-extern crate tidy;\n+\n \n use tidy::features::{Feature, Features, collect_lib_features, collect_lang_features};\n use tidy::unstable_book::{collect_unstable_feature_names, collect_unstable_book_section_file_names,"}]}