{"sha": "79d3b30cd7726335f8f3d39946449163a1dc6bd7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5ZDNiMzBjZDc3MjYzMzVmOGYzZDM5OTQ2NDQ5MTYzYTFkYzZiZDc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-11T11:28:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-11T11:28:27Z"}, "message": "Auto merge of #4801 - mikerite:to_digit_is_some, r=flip1995\n\nTo digit is some\n\nAdd a lint that recommends replacing `to_digit().is_some()` with `is_digit()` on `char`s\n\nchangelog: Add lint `to_digit_is_some`", "tree": {"sha": "5f2acd61fdab887dfc5929643b839cb704303976", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f2acd61fdab887dfc5929643b839cb704303976"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/79d3b30cd7726335f8f3d39946449163a1dc6bd7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/79d3b30cd7726335f8f3d39946449163a1dc6bd7", "html_url": "https://github.com/rust-lang/rust/commit/79d3b30cd7726335f8f3d39946449163a1dc6bd7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/79d3b30cd7726335f8f3d39946449163a1dc6bd7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "338f5e6801315fae7353facf5a338c78df7b0bce", "url": "https://api.github.com/repos/rust-lang/rust/commits/338f5e6801315fae7353facf5a338c78df7b0bce", "html_url": "https://github.com/rust-lang/rust/commit/338f5e6801315fae7353facf5a338c78df7b0bce"}, {"sha": "89b966cdf1bc67e093d82e34b6341bdc9e750821", "url": "https://api.github.com/repos/rust-lang/rust/commits/89b966cdf1bc67e093d82e34b6341bdc9e750821", "html_url": "https://github.com/rust-lang/rust/commit/89b966cdf1bc67e093d82e34b6341bdc9e750821"}], "stats": {"total": 155, "additions": 150, "deletions": 5}, "files": [{"sha": "30d3108e0be4f07b074c1442bb36cdbc3a436513", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/79d3b30cd7726335f8f3d39946449163a1dc6bd7/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/79d3b30cd7726335f8f3d39946449163a1dc6bd7/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=79d3b30cd7726335f8f3d39946449163a1dc6bd7", "patch": "@@ -1203,6 +1203,7 @@ Released 2018-09-13\n [`suspicious_unary_op_formatting`]: https://rust-lang.github.io/rust-clippy/master/index.html#suspicious_unary_op_formatting\n [`temporary_assignment`]: https://rust-lang.github.io/rust-clippy/master/index.html#temporary_assignment\n [`temporary_cstring_as_ptr`]: https://rust-lang.github.io/rust-clippy/master/index.html#temporary_cstring_as_ptr\n+[`to_digit_is_some`]: https://rust-lang.github.io/rust-clippy/master/index.html#to_digit_is_some\n [`todo`]: https://rust-lang.github.io/rust-clippy/master/index.html#todo\n [`too_many_arguments`]: https://rust-lang.github.io/rust-clippy/master/index.html#too_many_arguments\n [`too_many_lines`]: https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines"}, {"sha": "922dbcd113807f786134e45eb66fbb21428ec98f", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79d3b30cd7726335f8f3d39946449163a1dc6bd7/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/79d3b30cd7726335f8f3d39946449163a1dc6bd7/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=79d3b30cd7726335f8f3d39946449163a1dc6bd7", "patch": "@@ -6,7 +6,7 @@\n \n A collection of lints to catch common mistakes and improve your [Rust](https://github.com/rust-lang/rust) code.\n \n-[There are 332 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n+[There are 333 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n \n We have a bunch of lint categories to allow you to choose how much Clippy is supposed to ~~annoy~~ help you:\n "}, {"sha": "00028ec19650e0dae6e6d2583443e82a019bd54a", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/79d3b30cd7726335f8f3d39946449163a1dc6bd7/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79d3b30cd7726335f8f3d39946449163a1dc6bd7/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=79d3b30cd7726335f8f3d39946449163a1dc6bd7", "patch": "@@ -274,6 +274,7 @@ pub mod strings;\n pub mod suspicious_trait_impl;\n pub mod swap;\n pub mod temporary_assignment;\n+pub mod to_digit_is_some;\n pub mod trait_bounds;\n pub mod transmute;\n pub mod transmuting_null;\n@@ -715,6 +716,7 @@ pub fn register_plugins(store: &mut lint::LintStore, sess: &Session, conf: &Conf\n         &swap::ALMOST_SWAPPED,\n         &swap::MANUAL_SWAP,\n         &temporary_assignment::TEMPORARY_ASSIGNMENT,\n+        &to_digit_is_some::TO_DIGIT_IS_SOME,\n         &trait_bounds::TYPE_REPETITION_IN_BOUNDS,\n         &transmute::CROSSPOINTER_TRANSMUTE,\n         &transmute::TRANSMUTE_BYTES_TO_STR,\n@@ -946,6 +948,7 @@ pub fn register_plugins(store: &mut lint::LintStore, sess: &Session, conf: &Conf\n     store.register_late_pass(|| box unused_self::UnusedSelf);\n     store.register_late_pass(|| box mutable_debug_assertion::DebugAssertWithMutCall);\n     store.register_late_pass(|| box exit::Exit);\n+    store.register_late_pass(|| box to_digit_is_some::ToDigitIsSome);\n \n     store.register_group(true, \"clippy::restriction\", Some(\"clippy_restriction\"), vec![\n         LintId::of(&arithmetic::FLOAT_ARITHMETIC),\n@@ -1240,6 +1243,7 @@ pub fn register_plugins(store: &mut lint::LintStore, sess: &Session, conf: &Conf\n         LintId::of(&swap::ALMOST_SWAPPED),\n         LintId::of(&swap::MANUAL_SWAP),\n         LintId::of(&temporary_assignment::TEMPORARY_ASSIGNMENT),\n+        LintId::of(&to_digit_is_some::TO_DIGIT_IS_SOME),\n         LintId::of(&transmute::CROSSPOINTER_TRANSMUTE),\n         LintId::of(&transmute::TRANSMUTE_BYTES_TO_STR),\n         LintId::of(&transmute::TRANSMUTE_INT_TO_BOOL),\n@@ -1365,6 +1369,7 @@ pub fn register_plugins(store: &mut lint::LintStore, sess: &Session, conf: &Conf\n         LintId::of(&returns::NEEDLESS_RETURN),\n         LintId::of(&returns::UNUSED_UNIT),\n         LintId::of(&strings::STRING_LIT_AS_BYTES),\n+        LintId::of(&to_digit_is_some::TO_DIGIT_IS_SOME),\n         LintId::of(&try_err::TRY_ERR),\n         LintId::of(&types::FN_TO_NUMERIC_CAST),\n         LintId::of(&types::FN_TO_NUMERIC_CAST_WITH_TRUNCATION),"}, {"sha": "8ddd54bb7a3899583e6964c37f3eae85438b6419", "filename": "clippy_lints/src/literal_representation.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/79d3b30cd7726335f8f3d39946449163a1dc6bd7/clippy_lints%2Fsrc%2Fliteral_representation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79d3b30cd7726335f8f3d39946449163a1dc6bd7/clippy_lints%2Fsrc%2Fliteral_representation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fliteral_representation.rs?ref=79d3b30cd7726335f8f3d39946449163a1dc6bd7", "patch": "@@ -364,7 +364,7 @@ impl LiteralDigitGrouping {\n                 if_chain! {\n                     if let Some(src) = snippet_opt(cx, lit.span);\n                     if let Some(firstch) = src.chars().next();\n-                    if char::to_digit(firstch, 10).is_some();\n+                    if char::is_digit(firstch, 10);\n                     then {\n                         let digit_info = DigitInfo::new(&src, false);\n                         let _ = Self::do_lint(digit_info.digits, digit_info.suffix, in_macro).map_err(|warning_type| {\n@@ -378,7 +378,7 @@ impl LiteralDigitGrouping {\n                 if_chain! {\n                     if let Some(src) = snippet_opt(cx, lit.span);\n                     if let Some(firstch) = src.chars().next();\n-                    if char::to_digit(firstch, 10).is_some();\n+                    if char::is_digit(firstch, 10);\n                     then {\n                         let digit_info = DigitInfo::new(&src, true);\n                         // Separate digits into integral and fractional parts.\n@@ -512,7 +512,7 @@ impl DecimalLiteralRepresentation {\n             if let LitKind::Int(val, _) = lit.kind;\n             if let Some(src) = snippet_opt(cx, lit.span);\n             if let Some(firstch) = src.chars().next();\n-            if char::to_digit(firstch, 10).is_some();\n+            if char::is_digit(firstch, 10);\n             let digit_info = DigitInfo::new(&src, false);\n             if digit_info.radix == Radix::Decimal;\n             if val >= u128::from(self.threshold);"}, {"sha": "a40d92f38332906da997f7dcafe4751aec7f342a", "filename": "clippy_lints/src/to_digit_is_some.rs", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/79d3b30cd7726335f8f3d39946449163a1dc6bd7/clippy_lints%2Fsrc%2Fto_digit_is_some.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79d3b30cd7726335f8f3d39946449163a1dc6bd7/clippy_lints%2Fsrc%2Fto_digit_is_some.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fto_digit_is_some.rs?ref=79d3b30cd7726335f8f3d39946449163a1dc6bd7", "patch": "@@ -0,0 +1,94 @@\n+use crate::utils::{match_def_path, snippet_with_applicability, span_lint_and_sugg};\n+use if_chain::if_chain;\n+use rustc::hir;\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::ty;\n+use rustc::{declare_lint_pass, declare_tool_lint};\n+use rustc_errors::Applicability;\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Checks for `.to_digit(..).is_some()` on `char`s.\n+    ///\n+    /// **Why is this bad?** This is a convoluted way of checking if a `char` is a digit. It's\n+    /// more straight forward to use the dedicated `is_digit` method.\n+    ///\n+    /// **Example:**\n+    /// ```rust\n+    /// # let c = 'c';\n+    /// # let radix = 10;\n+    /// let is_digit = c.to_digit(radix).is_some();\n+    /// ```\n+    /// can be written as:\n+    /// ```\n+    /// # let c = 'c';\n+    /// # let radix = 10;\n+    /// let is_digit = c.is_digit(radix);\n+    /// ```\n+    pub TO_DIGIT_IS_SOME,\n+    style,\n+    \"`char.is_digit()` is clearer\"\n+}\n+\n+declare_lint_pass!(ToDigitIsSome => [TO_DIGIT_IS_SOME]);\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ToDigitIsSome {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx hir::Expr) {\n+        if_chain! {\n+            if let hir::ExprKind::MethodCall(is_some_path, _, is_some_args) = &expr.kind;\n+            if is_some_path.ident.name.as_str() == \"is_some\";\n+            if let [to_digit_expr] = &**is_some_args;\n+            then {\n+                let match_result = match &to_digit_expr.kind {\n+                    hir::ExprKind::MethodCall(to_digits_path, _, to_digit_args) => {\n+                        if_chain! {\n+                            if let [char_arg, radix_arg] = &**to_digit_args;\n+                            if to_digits_path.ident.name.as_str() == \"to_digit\";\n+                            let char_arg_ty = cx.tables.expr_ty_adjusted(char_arg);\n+                            if char_arg_ty.kind == ty::Char;\n+                            then {\n+                                Some((true, char_arg, radix_arg))\n+                            } else {\n+                                None\n+                            }\n+                        }\n+                    }\n+                    hir::ExprKind::Call(to_digits_call, to_digit_args) => {\n+                        if_chain! {\n+                            if let [char_arg, radix_arg] = &**to_digit_args;\n+                            if let hir::ExprKind::Path(to_digits_path) = &to_digits_call.kind;\n+                            if let to_digits_call_res = cx.tables.qpath_res(to_digits_path, to_digits_call.hir_id);\n+                            if let Some(to_digits_def_id) = to_digits_call_res.opt_def_id();\n+                            if match_def_path(cx, to_digits_def_id, &[\"core\", \"char\", \"methods\", \"<impl char>\", \"to_digit\"]);\n+                            then {\n+                                Some((false, char_arg, radix_arg))\n+                            } else {\n+                                None\n+                            }\n+                        }\n+                    }\n+                    _ => None\n+                };\n+\n+                if let Some((is_method_call, char_arg, radix_arg)) = match_result {\n+                    let mut applicability = Applicability::MachineApplicable;\n+                    let char_arg_snip = snippet_with_applicability(cx, char_arg.span, \"_\", &mut applicability);\n+                    let radix_snip = snippet_with_applicability(cx, radix_arg.span, \"_\", &mut applicability);\n+\n+                    span_lint_and_sugg(\n+                        cx,\n+                        TO_DIGIT_IS_SOME,\n+                        expr.span,\n+                        \"use of `.to_digit(..).is_some()`\",\n+                        \"try this\",\n+                        if is_method_call {\n+                            format!(\"{}.is_digit({})\", char_arg_snip, radix_snip)\n+                        } else {\n+                            format!(\"char::is_digit({}, {})\", char_arg_snip, radix_snip)\n+                        },\n+                        applicability,\n+                    );\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "0b301b6be963a1b8ce6717b313c6809277efe950", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/79d3b30cd7726335f8f3d39946449163a1dc6bd7/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79d3b30cd7726335f8f3d39946449163a1dc6bd7/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=79d3b30cd7726335f8f3d39946449163a1dc6bd7", "patch": "@@ -6,7 +6,7 @@ pub use lint::Lint;\n pub use lint::LINT_LEVELS;\n \n // begin lint list, do not remove this comment, it\u2019s used in `update_lints`\n-pub const ALL_LINTS: [Lint; 332] = [\n+pub const ALL_LINTS: [Lint; 333] = [\n     Lint {\n         name: \"absurd_extreme_comparisons\",\n         group: \"correctness\",\n@@ -1876,6 +1876,13 @@ pub const ALL_LINTS: [Lint; 332] = [\n         deprecation: None,\n         module: \"methods\",\n     },\n+    Lint {\n+        name: \"to_digit_is_some\",\n+        group: \"style\",\n+        desc: \"`char.is_digit()` is clearer\",\n+        deprecation: None,\n+        module: \"to_digit_is_some\",\n+    },\n     Lint {\n         name: \"todo\",\n         group: \"restriction\","}, {"sha": "19184df0becb579fc6a505bf5924fc089aeb52e9", "filename": "tests/ui/to_digit_is_some.fixed", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/79d3b30cd7726335f8f3d39946449163a1dc6bd7/tests%2Fui%2Fto_digit_is_some.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/79d3b30cd7726335f8f3d39946449163a1dc6bd7/tests%2Fui%2Fto_digit_is_some.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fto_digit_is_some.fixed?ref=79d3b30cd7726335f8f3d39946449163a1dc6bd7", "patch": "@@ -0,0 +1,11 @@\n+//run-rustfix\n+\n+#![warn(clippy::to_digit_is_some)]\n+\n+fn main() {\n+    let c = 'x';\n+    let d = &c;\n+\n+    let _ = d.is_digit(10);\n+    let _ = char::is_digit(c, 10);\n+}"}, {"sha": "45a6728ebf57812f6facc06f55a104780bc4972b", "filename": "tests/ui/to_digit_is_some.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/79d3b30cd7726335f8f3d39946449163a1dc6bd7/tests%2Fui%2Fto_digit_is_some.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79d3b30cd7726335f8f3d39946449163a1dc6bd7/tests%2Fui%2Fto_digit_is_some.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fto_digit_is_some.rs?ref=79d3b30cd7726335f8f3d39946449163a1dc6bd7", "patch": "@@ -0,0 +1,11 @@\n+//run-rustfix\n+\n+#![warn(clippy::to_digit_is_some)]\n+\n+fn main() {\n+    let c = 'x';\n+    let d = &c;\n+\n+    let _ = d.to_digit(10).is_some();\n+    let _ = char::to_digit(c, 10).is_some();\n+}"}, {"sha": "177d3ccd3e23d7a4f507df4dc3dd053161ee1d8d", "filename": "tests/ui/to_digit_is_some.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/79d3b30cd7726335f8f3d39946449163a1dc6bd7/tests%2Fui%2Fto_digit_is_some.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79d3b30cd7726335f8f3d39946449163a1dc6bd7/tests%2Fui%2Fto_digit_is_some.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fto_digit_is_some.stderr?ref=79d3b30cd7726335f8f3d39946449163a1dc6bd7", "patch": "@@ -0,0 +1,16 @@\n+error: use of `.to_digit(..).is_some()`\n+  --> $DIR/to_digit_is_some.rs:9:13\n+   |\n+LL |     let _ = d.to_digit(10).is_some();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `d.is_digit(10)`\n+   |\n+   = note: `-D clippy::to-digit-is-some` implied by `-D warnings`\n+\n+error: use of `.to_digit(..).is_some()`\n+  --> $DIR/to_digit_is_some.rs:10:13\n+   |\n+LL |     let _ = char::to_digit(c, 10).is_some();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `char::is_digit(c, 10)`\n+\n+error: aborting due to 2 previous errors\n+"}]}