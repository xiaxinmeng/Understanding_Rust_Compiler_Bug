{"sha": "312b4fdfd281a5ebd740acaf88cc82c47225be23", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxMmI0ZmRmZDI4MWE1ZWJkNzQwYWNhZjg4Y2M4MmM0NzIyNWJlMjM=", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2021-04-18T13:14:17Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2021-04-21T13:25:58Z"}, "message": "improve wf check for const param defaults", "tree": {"sha": "b49da697d05a3f9001fad492de4e340328d85fe7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b49da697d05a3f9001fad492de4e340328d85fe7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/312b4fdfd281a5ebd740acaf88cc82c47225be23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/312b4fdfd281a5ebd740acaf88cc82c47225be23", "html_url": "https://github.com/rust-lang/rust/commit/312b4fdfd281a5ebd740acaf88cc82c47225be23", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/312b4fdfd281a5ebd740acaf88cc82c47225be23/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7cb1dcd48802378929032ad9363c296891443d76", "url": "https://api.github.com/repos/rust-lang/rust/commits/7cb1dcd48802378929032ad9363c296891443d76", "html_url": "https://github.com/rust-lang/rust/commit/7cb1dcd48802378929032ad9363c296891443d76"}], "stats": {"total": 112, "additions": 94, "deletions": 18}, "files": [{"sha": "26871d6f0285cecbf1449e44e3cdec0c1c0133e6", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 40, "deletions": 13, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/312b4fdfd281a5ebd740acaf88cc82c47225be23/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/312b4fdfd281a5ebd740acaf88cc82c47225be23/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=312b4fdfd281a5ebd740acaf88cc82c47225be23", "patch": "@@ -728,20 +728,36 @@ fn check_where_clauses<'tcx, 'fcx>(\n     //\n     // Here, the default `Vec<[u32]>` is not WF because `[u32]: Sized` does not hold.\n     for param in &generics.params {\n-        if let GenericParamDefKind::Type { .. } = param.kind {\n-            if is_our_default(&param) {\n-                let ty = fcx.tcx.type_of(param.def_id);\n-                // Ignore dependent defaults -- that is, where the default of one type\n-                // parameter includes another (e.g., `<T, U = T>`). In those cases, we can't\n-                // be sure if it will error or not as user might always specify the other.\n-                if !ty.needs_subst() {\n+        match param.kind {\n+            GenericParamDefKind::Type { .. } => {\n+                if is_our_default(&param) {\n+                    let ty = fcx.tcx.type_of(param.def_id);\n+                    // Ignore dependent defaults -- that is, where the default of one type\n+                    // parameter includes another (e.g., `<T, U = T>`). In those cases, we can't\n+                    // be sure if it will error or not as user might always specify the other.\n+                    if !ty.needs_subst() {\n+                        fcx.register_wf_obligation(\n+                            ty.into(),\n+                            fcx.tcx.def_span(param.def_id),\n+                            ObligationCauseCode::MiscObligation,\n+                        );\n+                    }\n+                }\n+            }\n+            GenericParamDefKind::Const { .. } => {\n+                // FIXME(const_generics_defaults): Figure out if this\n+                // is the behavior we want, see the comment further below.\n+                if is_our_default(&param) {\n+                    let default_ct = tcx.const_param_default(param.def_id);\n                     fcx.register_wf_obligation(\n-                        ty.into(),\n+                        default_ct.into(),\n                         fcx.tcx.def_span(param.def_id),\n                         ObligationCauseCode::MiscObligation,\n                     );\n                 }\n             }\n+            // Doesn't have defaults.\n+            GenericParamDefKind::Lifetime => {}\n         }\n     }\n \n@@ -774,14 +790,25 @@ fn check_where_clauses<'tcx, 'fcx>(\n                 fcx.tcx.mk_param_from_def(param)\n             }\n             GenericParamDefKind::Const { .. } => {\n+                // FIXME(const_generics_defaults): I(@lcnr) feel like always\n+                // using the const parameter is the right choice here, even\n+                // if it needs substs.\n+                //\n+                // Before stabilizing this we probably want to get some tests\n+                // where this makes a difference and figure out what's the exact\n+                // behavior we want here.\n+\n+                // If the param has a default, ...\n                 if is_our_default(param) {\n                     let default_ct = tcx.const_param_default(param.def_id);\n-                    // Const params currently have to be concrete.\n-                    assert!(!default_ct.needs_subst());\n-                    default_ct.into()\n-                } else {\n-                    fcx.tcx.mk_param_from_def(param)\n+                    // ... and it's not a dependent default, ...\n+                    if !default_ct.needs_subst() {\n+                        // ... then substitute it with the default.\n+                        return default_ct.into();\n+                    }\n                 }\n+\n+                fcx.tcx.mk_param_from_def(param)\n             }\n         }\n     });"}, {"sha": "7d51e9aa0f3be643fed0982f021c17aee4f60168", "filename": "src/test/ui/const-generics/defaults/complex-generic-default-expr.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/312b4fdfd281a5ebd740acaf88cc82c47225be23/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-generic-default-expr.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/312b4fdfd281a5ebd740acaf88cc82c47225be23/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-generic-default-expr.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-generic-default-expr.min.stderr?ref=312b4fdfd281a5ebd740acaf88cc82c47225be23", "patch": "@@ -1,5 +1,5 @@\n error: generic parameters may not be used in const operations\n-  --> $DIR/complex-generic-default-expr.rs:6:47\n+  --> $DIR/complex-generic-default-expr.rs:10:47\n    |\n LL | struct Foo<const N: usize, const M: usize = { N + 1 }>;\n    |                                               ^ cannot perform const operation using `N`\n@@ -8,7 +8,7 @@ LL | struct Foo<const N: usize, const M: usize = { N + 1 }>;\n    = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n-  --> $DIR/complex-generic-default-expr.rs:9:62\n+  --> $DIR/complex-generic-default-expr.rs:13:62\n    |\n LL | struct Bar<T, const TYPE_SIZE: usize = { std::mem::size_of::<T>() }>(T);\n    |                                                              ^ cannot perform const operation using `T`"}, {"sha": "a1c04b5e7c387a9417e47d3a22b56800f71356cb", "filename": "src/test/ui/const-generics/defaults/complex-generic-default-expr.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/312b4fdfd281a5ebd740acaf88cc82c47225be23/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-generic-default-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/312b4fdfd281a5ebd740acaf88cc82c47225be23/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-generic-default-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-generic-default-expr.rs?ref=312b4fdfd281a5ebd740acaf88cc82c47225be23", "patch": "@@ -1,4 +1,8 @@\n-// revisions: full min\n+// revisions: min\n+// FIXME(const_generics): add the `full` revision,\n+// currently causes an ICE as we don't supply substs to\n+// anon consts in the parameter listing, as that would\n+// cause that anon const to reference itself.\n #![cfg_attr(full, feature(const_generics))]\n #![feature(const_generics_defaults)]\n #![allow(incomplete_features)]\n@@ -8,6 +12,6 @@ struct Foo<const N: usize, const M: usize = { N + 1 }>;\n \n struct Bar<T, const TYPE_SIZE: usize = { std::mem::size_of::<T>() }>(T);\n //[min]~^ ERROR generic parameters may not be used in const operations\n-//[full]~^^ ERROR the size for values of type `T` cannot be known at compilation time \n+//[full]~^^ ERROR the size for values of type `T` cannot be known at compilation time\n \n fn main() {}"}, {"sha": "d9cab34327e9d3830fce0b54ed1c5e37265fa49e", "filename": "src/test/ui/const-generics/defaults/const-param-as-default-value.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/312b4fdfd281a5ebd740acaf88cc82c47225be23/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fconst-param-as-default-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/312b4fdfd281a5ebd740acaf88cc82c47225be23/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fconst-param-as-default-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fconst-param-as-default-value.rs?ref=312b4fdfd281a5ebd740acaf88cc82c47225be23", "patch": "@@ -0,0 +1,14 @@\n+// run-pass\n+#![feature(const_generics_defaults)]\n+#![allow(incomplete_features)]\n+struct Foo<const N: usize, const M: usize = N>([u8; N], [u8; M]);\n+\n+fn foo<const N: usize>() -> Foo<N> {\n+    let x = [0; N];\n+    Foo(x, x)\n+}\n+\n+fn main() {\n+    let val = foo::<13>();\n+    assert_eq!(val.0, val.1);\n+}"}, {"sha": "e3d78fe2ee0ea910a38f52358c8ecafccbb929b1", "filename": "src/test/ui/const-generics/defaults/const-param-in-ty-defaults.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/312b4fdfd281a5ebd740acaf88cc82c47225be23/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fconst-param-in-ty-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/312b4fdfd281a5ebd740acaf88cc82c47225be23/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fconst-param-in-ty-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fconst-param-in-ty-defaults.rs?ref=312b4fdfd281a5ebd740acaf88cc82c47225be23", "patch": "@@ -0,0 +1,18 @@\n+// run-pass\n+#![feature(const_generics_defaults)]\n+#![allow(incomplete_features)]\n+// FIXME(const_generics_defaults): while we can allow this,\n+// we probably won't easily allow this with more complex const operations.\n+//\n+// So we have to make a conscious decision here when stabilizing a relaxed parameter ordering.\n+struct Foo<const N: usize, T = [u8; N]>(T);\n+\n+impl<const N: usize> Foo<N> {\n+    fn new() -> Self {\n+        Foo([0; N])\n+    }\n+}\n+\n+fn main() {\n+    assert_eq!(Foo::new().0, [0; 10]);\n+}"}, {"sha": "4bb56c6a1c08c35129d8400e6989f3881b9b1a44", "filename": "src/test/ui/const-generics/defaults/default-param-wf-concrete.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/312b4fdfd281a5ebd740acaf88cc82c47225be23/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-param-wf-concrete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/312b4fdfd281a5ebd740acaf88cc82c47225be23/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-param-wf-concrete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-param-wf-concrete.rs?ref=312b4fdfd281a5ebd740acaf88cc82c47225be23", "patch": "@@ -0,0 +1,5 @@\n+#![feature(const_generics_defaults)]\n+#![allow(incomplete_features)]\n+struct Foo<const N: u8 = { 255 + 1 }>;\n+//~^ ERROR evaluation of constant value failed\n+fn main() {}"}, {"sha": "8464ea98bf695497f618143f3c3204621ddb9315", "filename": "src/test/ui/const-generics/defaults/default-param-wf-concrete.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/312b4fdfd281a5ebd740acaf88cc82c47225be23/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-param-wf-concrete.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/312b4fdfd281a5ebd740acaf88cc82c47225be23/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-param-wf-concrete.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-param-wf-concrete.stderr?ref=312b4fdfd281a5ebd740acaf88cc82c47225be23", "patch": "@@ -0,0 +1,9 @@\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/default-param-wf-concrete.rs:3:28\n+   |\n+LL | struct Foo<const N: u8 = { 255 + 1 }>;\n+   |                            ^^^^^^^ attempt to compute `u8::MAX + 1_u8`, which would overflow\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "7a57950dfc924d9cb19e851e008cd79dd3d84d1e", "filename": "src/test/ui/const-generics/defaults/pretty-printing-ast.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/312b4fdfd281a5ebd740acaf88cc82c47225be23/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fpretty-printing-ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/312b4fdfd281a5ebd740acaf88cc82c47225be23/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fpretty-printing-ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fpretty-printing-ast.rs?ref=312b4fdfd281a5ebd740acaf88cc82c47225be23", "patch": "@@ -11,4 +11,3 @@ trait Foo<const KIND: bool = true> {}\n fn foo<const SIZE: usize = 5>() {}\n \n struct Range<const FROM: usize = 0, const LEN: usize = 0, const TO: usize = FROM>;\n-"}]}