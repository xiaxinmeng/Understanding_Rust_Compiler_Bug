{"sha": "a9e85100cd598ddb9395b2ad31b31e0f9df84f22", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5ZTg1MTAwY2Q1OThkZGI5Mzk1YjJhZDMxYjMxZTBmOWRmODRmMjI=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2014-10-25T00:11:28Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2014-10-25T18:12:21Z"}, "message": "fix sized deallocation documentation", "tree": {"sha": "5db21a49cf485de6ae7628be1e249ad3cff00802", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5db21a49cf485de6ae7628be1e249ad3cff00802"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9e85100cd598ddb9395b2ad31b31e0f9df84f22", "comment_count": 9, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9e85100cd598ddb9395b2ad31b31e0f9df84f22", "html_url": "https://github.com/rust-lang/rust/commit/a9e85100cd598ddb9395b2ad31b31e0f9df84f22", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9e85100cd598ddb9395b2ad31b31e0f9df84f22/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6426cb43dd24d0949755da57da85f3739fd9230", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6426cb43dd24d0949755da57da85f3739fd9230", "html_url": "https://github.com/rust-lang/rust/commit/a6426cb43dd24d0949755da57da85f3739fd9230"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "c780170d47aaf0b7320efab683deecb01c876f53", "filename": "src/liballoc/heap.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a9e85100cd598ddb9395b2ad31b31e0f9df84f22/src%2Fliballoc%2Fheap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9e85100cd598ddb9395b2ad31b31e0f9df84f22/src%2Fliballoc%2Fheap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fheap.rs?ref=a9e85100cd598ddb9395b2ad31b31e0f9df84f22", "patch": "@@ -28,8 +28,8 @@ pub unsafe fn allocate(size: uint, align: uint) -> *mut u8 {\n /// size on the platform.\n ///\n /// The `old_size` and `align` parameters are the parameters that were used to\n-/// create the allocation referenced by `ptr`. The `old_size` parameter may also\n-/// be the value returned by `usable_size` for the requested size.\n+/// create the allocation referenced by `ptr`. The `old_size` parameter may be\n+/// any value in range_inclusive(requested_size, usable_size).\n #[inline]\n pub unsafe fn reallocate(ptr: *mut u8, old_size: uint, size: uint, align: uint) -> *mut u8 {\n     imp::reallocate(ptr, old_size, size, align)\n@@ -57,12 +57,12 @@ pub unsafe fn reallocate_inplace(ptr: *mut u8, old_size: uint, size: uint, align\n ///\n /// The `ptr` parameter must not be null.\n ///\n-/// The `size` and `align` parameters are the parameters that were used to\n-/// create the allocation referenced by `ptr`. The `size` parameter may also be\n-/// the value returned by `usable_size` for the requested size.\n+/// The `old_size` and `align` parameters are the parameters that were used to\n+/// create the allocation referenced by `ptr`. The `old_size` parameter may be\n+/// any value in range_inclusive(requested_size, usable_size).\n #[inline]\n-pub unsafe fn deallocate(ptr: *mut u8, size: uint, align: uint) {\n-    imp::deallocate(ptr, size, align)\n+pub unsafe fn deallocate(ptr: *mut u8, old_size: uint, align: uint) {\n+    imp::deallocate(ptr, old_size, align)\n }\n \n /// Returns the usable size of an allocation created with the specified the\n@@ -102,8 +102,8 @@ unsafe fn exchange_malloc(size: uint, align: uint) -> *mut u8 {\n #[cfg(not(test))]\n #[lang=\"exchange_free\"]\n #[inline]\n-unsafe fn exchange_free(ptr: *mut u8, size: uint, align: uint) {\n-    deallocate(ptr, size, align);\n+unsafe fn exchange_free(ptr: *mut u8, old_size: uint, align: uint) {\n+    deallocate(ptr, old_size, align);\n }\n \n // The minimum alignment guaranteed by the architecture. This value is used to\n@@ -185,9 +185,9 @@ mod imp {\n     }\n \n     #[inline]\n-    pub unsafe fn deallocate(ptr: *mut u8, size: uint, align: uint) {\n+    pub unsafe fn deallocate(ptr: *mut u8, old_size: uint, align: uint) {\n         let flags = align_to_flags(align);\n-        je_sdallocx(ptr as *mut c_void, size as size_t, flags)\n+        je_sdallocx(ptr as *mut c_void, old_size as size_t, flags)\n     }\n \n     #[inline]\n@@ -260,7 +260,7 @@ mod imp {\n     }\n \n     #[inline]\n-    pub unsafe fn deallocate(ptr: *mut u8, _size: uint, _align: uint) {\n+    pub unsafe fn deallocate(ptr: *mut u8, _old_size: uint, _align: uint) {\n         libc::free(ptr as *mut libc::c_void)\n     }\n \n@@ -328,7 +328,7 @@ mod imp {\n     }\n \n     #[inline]\n-    pub unsafe fn deallocate(ptr: *mut u8, _size: uint, align: uint) {\n+    pub unsafe fn deallocate(ptr: *mut u8, _old_size: uint, align: uint) {\n         if align <= MIN_ALIGN {\n             libc::free(ptr as *mut libc::c_void)\n         } else {"}]}