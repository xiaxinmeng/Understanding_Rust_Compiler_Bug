{"sha": "ad80a0c551458de7d27a98d182d7f559de04f291", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkODBhMGM1NTE0NThkZTdkMjdhOThkMTgyZDdmNTU5ZGUwNGYyOTE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-31T15:51:17Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-31T20:23:30Z"}, "message": "preserve token spacing", "tree": {"sha": "20a3e85a30a45365fe31360cb57b4f53a17b9a28", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20a3e85a30a45365fe31360cb57b4f53a17b9a28"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad80a0c551458de7d27a98d182d7f559de04f291", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad80a0c551458de7d27a98d182d7f559de04f291", "html_url": "https://github.com/rust-lang/rust/commit/ad80a0c551458de7d27a98d182d7f559de04f291", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad80a0c551458de7d27a98d182d7f559de04f291/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59347388541388347e86de9718bd69994c113203", "url": "https://api.github.com/repos/rust-lang/rust/commits/59347388541388347e86de9718bd69994c113203", "html_url": "https://github.com/rust-lang/rust/commit/59347388541388347e86de9718bd69994c113203"}], "stats": {"total": 89, "additions": 59, "deletions": 30}, "files": [{"sha": "b4872162212aa8237b2d7a100716de99cb797c4a", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad80a0c551458de7d27a98d182d7f559de04f291/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/ad80a0c551458de7d27a98d182d7f559de04f291/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=ad80a0c551458de7d27a98d182d7f559de04f291", "patch": "@@ -1022,7 +1022,6 @@ dependencies = [\n name = \"ra_macros\"\n version = \"0.1.0\"\n dependencies = [\n- \"join_to_string 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"smol_str 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]"}, {"sha": "e6ba8c08fdb0157854d7f66e2ab5ec587bb8e91a", "filename": "crates/ra_hir/src/macros.rs", "status": "modified", "additions": 29, "deletions": 15, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/ad80a0c551458de7d27a98d182d7f559de04f291/crates%2Fra_hir%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad80a0c551458de7d27a98d182d7f559de04f291/crates%2Fra_hir%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmacros.rs?ref=ad80a0c551458de7d27a98d182d7f559de04f291", "patch": "@@ -218,14 +218,28 @@ fn convert_tt(tt: &SyntaxNode) -> Option<tt::Subtree> {\n             continue;\n         }\n         if child.kind().is_punct() {\n-            let leaves = child\n-                .leaf_text()\n-                .unwrap()\n-                .chars()\n-                .map(|char| tt::Punct { char })\n-                .map(tt::Leaf::from)\n-                .map(tt::TokenTree::from);\n-            token_trees.extend(leaves);\n+            let mut prev = None;\n+            for char in child.leaf_text().unwrap().chars() {\n+                if let Some(char) = prev {\n+                    token_trees.push(\n+                        tt::Leaf::from(tt::Punct {\n+                            char,\n+                            spacing: tt::Spacing::Joint,\n+                        })\n+                        .into(),\n+                    );\n+                }\n+                prev = Some(char)\n+            }\n+            if let Some(char) = prev {\n+                token_trees.push(\n+                    tt::Leaf::from(tt::Punct {\n+                        char,\n+                        spacing: tt::Spacing::Alone,\n+                    })\n+                    .into(),\n+                );\n+            }\n         } else {\n             let child: tt::TokenTree = if child.kind() == TOKEN_TREE {\n                 convert_tt(child)?.into()\n@@ -254,7 +268,7 @@ fn convert_tt(tt: &SyntaxNode) -> Option<tt::Subtree> {\n \n #[test]\n fn test_convert_tt() {\n-    let macro_defenition = r#\"\n+    let macro_definition = r#\"\n macro_rules! impl_froms {\n     ($e:ident: $($v:ident),*) => {\n         $(\n@@ -272,8 +286,8 @@ macro_rules! impl_froms {\n impl_froms!(TokenTree: Leaf, Subtree);\n \"#;\n \n-    let source_file = ast::SourceFile::parse(macro_defenition);\n-    let macro_defenition = source_file\n+    let source_file = ast::SourceFile::parse(macro_definition);\n+    let macro_definition = source_file\n         .syntax()\n         .descendants()\n         .find_map(ast::MacroCall::cast)\n@@ -286,13 +300,13 @@ impl_froms!(TokenTree: Leaf, Subtree);\n         .find_map(ast::MacroCall::cast)\n         .unwrap();\n \n-    let defenition_tt = macro_call_to_tt(macro_defenition).unwrap();\n+    let definition_tt = macro_call_to_tt(macro_definition).unwrap();\n     let invocation_tt = macro_call_to_tt(macro_invocation).unwrap();\n-    let mbe = mbe::parse(&defenition_tt).unwrap();\n+    let mbe = mbe::parse(&definition_tt).unwrap();\n     let expansion = mbe::exapnd(&mbe, &invocation_tt).unwrap();\n     assert_eq!(\n         expansion.to_string(),\n-        \"{(impl From < Leaf > for TokenTree {fn from (it : Leaf) - > TokenTree {TokenTree : : Leaf (it)}}) \\\n-          (impl From < Subtree > for TokenTree {fn from (it : Subtree) - > TokenTree {TokenTree : : Subtree (it)}})}\"\n+        \"{(impl From < Leaf > for TokenTree {fn from (it : Leaf) -> TokenTree {TokenTree :: Leaf (it)}}) \\\n+          (impl From < Subtree > for TokenTree {fn from (it : Subtree) -> TokenTree {TokenTree :: Subtree (it)}})}\"\n     )\n }"}, {"sha": "7d3cb055c7e756b658862815817281c5f03d3cf4", "filename": "crates/ra_macros/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad80a0c551458de7d27a98d182d7f559de04f291/crates%2Fra_macros%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ad80a0c551458de7d27a98d182d7f559de04f291/crates%2Fra_macros%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_macros%2FCargo.toml?ref=ad80a0c551458de7d27a98d182d7f559de04f291", "patch": "@@ -7,4 +7,3 @@ authors = [\"Aleksey Kladov <aleksey.kladov@gmail.com>\"]\n [dependencies]\n rustc-hash = \"1.0.0\"\n smol_str = \"0.1.9\"\n-join_to_string = \"0.1.3\""}, {"sha": "d4106a41c242b8d429cc239eb5bdf04a4fad2cb1", "filename": "crates/ra_macros/src/mbe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad80a0c551458de7d27a98d182d7f559de04f291/crates%2Fra_macros%2Fsrc%2Fmbe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad80a0c551458de7d27a98d182d7f559de04f291/crates%2Fra_macros%2Fsrc%2Fmbe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_macros%2Fsrc%2Fmbe.rs?ref=ad80a0c551458de7d27a98d182d7f559de04f291", "patch": "@@ -45,7 +45,7 @@ pub(crate) struct Subtree {\n pub(crate) struct Repeat {\n     pub(crate) subtree: Subtree,\n     pub(crate) kind: RepeatKind,\n-    pub(crate) separator: Option<Punct>,\n+    pub(crate) separator: Option<char>,\n }\n \n #[derive(Debug)]"}, {"sha": "4835945903b282a1ca18d723518e8eeec6412c86", "filename": "crates/ra_macros/src/mbe_parser.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ad80a0c551458de7d27a98d182d7f559de04f291/crates%2Fra_macros%2Fsrc%2Fmbe_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad80a0c551458de7d27a98d182d7f559de04f291/crates%2Fra_macros%2Fsrc%2Fmbe_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_macros%2Fsrc%2Fmbe_parser.rs?ref=ad80a0c551458de7d27a98d182d7f559de04f291", "patch": "@@ -28,16 +28,14 @@ fn parse_subtree(tt: &tt::Subtree) -> Option<mbe::Subtree> {\n     while let Some(tt) = p.eat() {\n         let child: mbe::TokenTree = match tt {\n             tt::TokenTree::Leaf(leaf) => match leaf {\n-                tt::Leaf::Punct(tt::Punct { char: '$' }) => {\n+                tt::Leaf::Punct(tt::Punct { char: '$', .. }) => {\n                     if p.at_ident().is_some() {\n                         mbe::Leaf::from(parse_var(&mut p)?).into()\n                     } else {\n                         parse_repeat(&mut p)?.into()\n                     }\n                 }\n-                tt::Leaf::Punct(tt::Punct { char }) => {\n-                    mbe::Leaf::from(mbe::Punct { char: *char }).into()\n-                }\n+                tt::Leaf::Punct(punct) => mbe::Leaf::from(*punct).into(),\n                 tt::Leaf::Ident(tt::Ident { text }) => {\n                     mbe::Leaf::from(mbe::Ident { text: text.clone() }).into()\n                 }\n@@ -78,7 +76,7 @@ fn parse_repeat(p: &mut TtCursor) -> Option<mbe::Repeat> {\n     let sep = p.eat_punct()?;\n     let (separator, rep) = match sep.char {\n         '*' | '+' | '?' => (None, sep.char),\n-        char => (Some(mbe::Punct { char }), p.eat_punct()?.char),\n+        char => (Some(char), p.eat_punct()?.char),\n     };\n \n     let kind = match rep {"}, {"sha": "2855bae51f5cdadfe34513d29e9a43f404f33cab", "filename": "crates/ra_macros/src/tt.rs", "status": "modified", "additions": 25, "deletions": 6, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/ad80a0c551458de7d27a98d182d7f559de04f291/crates%2Fra_macros%2Fsrc%2Ftt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad80a0c551458de7d27a98d182d7f559de04f291/crates%2Fra_macros%2Fsrc%2Ftt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_macros%2Fsrc%2Ftt.rs?ref=ad80a0c551458de7d27a98d182d7f559de04f291", "patch": "@@ -1,7 +1,6 @@\n use std::fmt;\n \n use smol_str::SmolStr;\n-use join_to_string::join;\n \n #[derive(Debug, Clone)]\n pub enum TokenTree {\n@@ -37,9 +36,16 @@ pub struct Literal {\n     pub text: SmolStr,\n }\n \n-#[derive(Debug, Clone, PartialEq, Eq)]\n+#[derive(Debug, Clone, Copy, PartialEq, Eq)]\n pub struct Punct {\n     pub char: char,\n+    pub spacing: Spacing,\n+}\n+\n+#[derive(Debug, Clone, Copy, PartialEq, Eq)]\n+pub enum Spacing {\n+    Alone,\n+    Joint,\n }\n \n #[derive(Debug, Clone)]\n@@ -64,10 +70,23 @@ impl fmt::Display for Subtree {\n             Delimiter::Bracket => (\"[\", \"]\"),\n             Delimiter::None => (\"\", \"\"),\n         };\n-        join(self.token_trees.iter())\n-            .separator(\" \")\n-            .surround_with(l, r)\n-            .to_fmt(f)\n+        f.write_str(l)?;\n+        let mut needs_space = false;\n+        for tt in self.token_trees.iter() {\n+            if needs_space {\n+                f.write_str(\" \")?;\n+            }\n+            needs_space = true;\n+            match tt {\n+                TokenTree::Leaf(Leaf::Punct(p)) => {\n+                    needs_space = p.spacing == Spacing::Alone;\n+                    fmt::Display::fmt(p, f)?\n+                }\n+                tt => fmt::Display::fmt(tt, f)?,\n+            }\n+        }\n+        f.write_str(r)?;\n+        Ok(())\n     }\n }\n "}, {"sha": "046770a0fd122eaa77df0081e82769b57b956db1", "filename": "crates/ra_macros/src/tt_cursor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad80a0c551458de7d27a98d182d7f559de04f291/crates%2Fra_macros%2Fsrc%2Ftt_cursor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad80a0c551458de7d27a98d182d7f559de04f291/crates%2Fra_macros%2Fsrc%2Ftt_cursor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_macros%2Fsrc%2Ftt_cursor.rs?ref=ad80a0c551458de7d27a98d182d7f559de04f291", "patch": "@@ -28,7 +28,7 @@ impl<'a> TtCursor<'a> {\n \n     pub(crate) fn at_char(&self, char: char) -> bool {\n         match self.at_punct() {\n-            Some(tt::Punct { char: c }) if *c == char => true,\n+            Some(tt::Punct { char: c, .. }) if *c == char => true,\n             _ => false,\n         }\n     }"}]}