{"sha": "172c29fe0aad00cbea9c2a38fc41079bc448a4b2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3MmMyOWZlMGFhZDAwY2JlYTljMmEzOGZjNDEwNzliYzQ0OGE0YjI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-02-15T05:12:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-02-15T05:12:06Z"}, "message": "auto merge of #4941 : nickdesaulniers/rust/issue4524cleanup, r=catamorphism\n\nreview? @brson\r\nIssue #4524", "tree": {"sha": "32043f4cda9655eb66b5e12bbc0943aeb7008371", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/32043f4cda9655eb66b5e12bbc0943aeb7008371"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/172c29fe0aad00cbea9c2a38fc41079bc448a4b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/172c29fe0aad00cbea9c2a38fc41079bc448a4b2", "html_url": "https://github.com/rust-lang/rust/commit/172c29fe0aad00cbea9c2a38fc41079bc448a4b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/172c29fe0aad00cbea9c2a38fc41079bc448a4b2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e87e4eb0cb991b69b0ce28f22433febf78423e26", "url": "https://api.github.com/repos/rust-lang/rust/commits/e87e4eb0cb991b69b0ce28f22433febf78423e26", "html_url": "https://github.com/rust-lang/rust/commit/e87e4eb0cb991b69b0ce28f22433febf78423e26"}, {"sha": "13fe167dbb5a89f9cfad8b71e2c30e3b836aeb48", "url": "https://api.github.com/repos/rust-lang/rust/commits/13fe167dbb5a89f9cfad8b71e2c30e3b836aeb48", "html_url": "https://github.com/rust-lang/rust/commit/13fe167dbb5a89f9cfad8b71e2c30e3b836aeb48"}], "stats": {"total": 49, "additions": 20, "deletions": 29}, "files": [{"sha": "23035b3b34a0fc511baeefb18763c211ec1bcffb", "filename": "doc/rust.md", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/172c29fe0aad00cbea9c2a38fc41079bc448a4b2/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/172c29fe0aad00cbea9c2a38fc41079bc448a4b2/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=172c29fe0aad00cbea9c2a38fc41079bc448a4b2", "patch": "@@ -686,15 +686,15 @@ mod math {\n     type complex = (f64, f64);\n     fn sin(f: f64) -> f64 {\n         ...\n-# die!();\n+# fail!();\n     }\n     fn cos(f: f64) -> f64 {\n         ...\n-# die!();\n+# fail!();\n     }\n     fn tan(f: f64) -> f64 {\n         ...\n-# die!();\n+# fail!();\n     }\n }\n ~~~~~~~~\n@@ -986,7 +986,7 @@ output slot type would normally be. For example:\n ~~~~\n fn my_err(s: &str) -> ! {\n     log(info, s);\n-    die!();\n+    fail!();\n }\n ~~~~\n \n@@ -1004,7 +1004,7 @@ were declared without the `!` annotation, the following code would not\n typecheck:\n \n ~~~~\n-# fn my_err(s: &str) -> ! { die!() }\n+# fn my_err(s: &str) -> ! { fail!() }\n \n fn f(i: int) -> int {\n    if i == 42 {\n@@ -2284,9 +2284,9 @@ enum List<X> { Nil, Cons(X, @List<X>) }\n let x: List<int> = Cons(10, @Cons(11, @Nil));\n \n match x {\n-    Cons(_, @Nil) => die!(~\"singleton list\"),\n+    Cons(_, @Nil) => fail!(~\"singleton list\"),\n     Cons(*)       => return,\n-    Nil           => die!(~\"empty list\")\n+    Nil           => fail!(~\"empty list\")\n }\n ~~~~\n \n@@ -2323,7 +2323,7 @@ match x {\n         return;\n     }\n     _ => {\n-        die!();\n+        fail!();\n     }\n }\n ~~~~\n@@ -2411,7 +2411,7 @@ guard may refer to the variables bound within the pattern they follow.\n let message = match maybe_digit {\n   Some(x) if x < 10 => process_digit(x),\n   Some(x) => process_other(x),\n-  None => die!()\n+  None => fail!()\n };\n ~~~~\n "}, {"sha": "42bd319a2a4bdd23d581d2e516b409eb24d3feb6", "filename": "doc/tutorial-macros.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/172c29fe0aad00cbea9c2a38fc41079bc448a4b2/doc%2Ftutorial-macros.md", "raw_url": "https://github.com/rust-lang/rust/raw/172c29fe0aad00cbea9c2a38fc41079bc448a4b2/doc%2Ftutorial-macros.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial-macros.md?ref=172c29fe0aad00cbea9c2a38fc41079bc448a4b2", "patch": "@@ -218,7 +218,7 @@ match x {\n                 // complicated stuff goes here\n                 return result + val;\n             },\n-            _ => die!(~\"Didn't get good_2\")\n+            _ => fail!(~\"Didn't get good_2\")\n         }\n     }\n     _ => return 0 // default value\n@@ -260,7 +260,7 @@ macro_rules! biased_match (\n biased_match!((x)       ~ (good_1(g1, val)) else { return 0 };\n               binds g1, val )\n biased_match!((g1.body) ~ (good_2(result) )\n-                  else { die!(~\"Didn't get good_2\") };\n+                  else { fail!(~\"Didn't get good_2\") };\n               binds result )\n // complicated stuff goes here\n return result + val;\n@@ -362,7 +362,7 @@ macro_rules! biased_match (\n # fn f(x: t1) -> uint {\n biased_match!(\n     (x)       ~ (good_1(g1, val)) else { return 0 };\n-    (g1.body) ~ (good_2(result) ) else { die!(~\"Didn't get good_2\") };\n+    (g1.body) ~ (good_2(result) ) else { fail!(~\"Didn't get good_2\") };\n     binds val, result )\n // complicated stuff goes here\n return result + val;"}, {"sha": "5900fc1a9ff2d3ce5db56dc22d8e42379e53c144", "filename": "doc/tutorial-tasks.md", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/172c29fe0aad00cbea9c2a38fc41079bc448a4b2/doc%2Ftutorial-tasks.md", "raw_url": "https://github.com/rust-lang/rust/raw/172c29fe0aad00cbea9c2a38fc41079bc448a4b2/doc%2Ftutorial-tasks.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial-tasks.md?ref=172c29fe0aad00cbea9c2a38fc41079bc448a4b2", "patch": "@@ -313,7 +313,7 @@ of all tasks are intertwined: if one fails, so do all the others.\n # fn do_some_work() { loop { task::yield() } }\n # do task::try {\n // Create a child task that fails\n-do spawn { die!() }\n+do spawn { fail!() }\n \n // This will also fail because the task we spawned failed\n do_some_work();\n@@ -337,7 +337,7 @@ let result: Result<int, ()> = do task::try {\n     if some_condition() {\n         calculate_result()\n     } else {\n-        die!(~\"oops!\");\n+        fail!(~\"oops!\");\n     }\n };\n assert result.is_err();\n@@ -370,14 +370,14 @@ proceed). Hence, you will need different _linked failure modes_.\n ## Failure modes\n \n By default, task failure is _bidirectionally linked_, which means that if\n-either task dies, it kills the other one.\n+either task fails, it kills the other one.\n \n ~~~\n # fn sleep_forever() { loop { task::yield() } }\n # do task::try {\n do task::spawn {\n     do task::spawn {\n-        die!();  // All three tasks will die.\n+        fail!();  // All three tasks will fail.\n     }\n     sleep_forever();  // Will get woken up by force, then fail\n }\n@@ -386,7 +386,7 @@ sleep_forever();  // Will get woken up by force, then fail\n ~~~\n \n If you want parent tasks to be able to kill their children, but do not want a\n-parent to die automatically if one of its child task dies, you can call\n+parent to fail automatically if one of its child task fails, you can call\n `task::spawn_supervised` for _unidirectionally linked_ failure. The\n function `task::try`, which we saw previously, uses `spawn_supervised`\n internally, with additional logic to wait for the child task to finish\n@@ -432,7 +432,7 @@ do task::spawn_supervised {\n     // Intermediate task immediately exits\n }\n wait_for_a_while();\n-die!();  // Will kill grandchild even if child has already exited\n+fail!();  // Will kill grandchild even if child has already exited\n # };\n ~~~\n \n@@ -446,10 +446,10 @@ other at all, using `task::spawn_unlinked` for _isolated failure_.\n let (time1, time2) = (random(), random());\n do task::spawn_unlinked {\n     sleep_for(time2);  // Won't get forced awake\n-    die!();\n+    fail!();\n }\n sleep_for(time1);  // Won't get forced awake\n-die!();\n+fail!();\n // It will take MAX(time1,time2) for the program to finish.\n # };\n ~~~"}, {"sha": "85821ae6d82137b7e6e2d4e5b52f6bdf6ddfe600", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/172c29fe0aad00cbea9c2a38fc41079bc448a4b2/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/172c29fe0aad00cbea9c2a38fc41079bc448a4b2/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=172c29fe0aad00cbea9c2a38fc41079bc448a4b2", "patch": "@@ -287,15 +287,6 @@ pub fn core_macros() -> ~str {\n     macro_rules! debug ( ($( $arg:expr ),+) => (\n         log(::core::debug, fmt!( $($arg),+ )) ))\n \n-    macro_rules! die(\n-        ($msg: expr) => (\n-            ::core::sys::begin_unwind($msg, file!().to_owned(), line!())\n-        );\n-        () => (\n-            fail!(~\\\"explicit failure\\\")\n-        )\n-    )\n-\n     macro_rules! fail(\n         ($msg: expr) => (\n             ::core::sys::begin_unwind($msg, file!().to_owned(), line!())"}]}