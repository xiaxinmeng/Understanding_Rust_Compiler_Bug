{"sha": "a87587602732a7fe6739fdcfadce025fafbb55dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4NzU4NzYwMjczMmE3ZmU2NzM5ZmRjZmFkY2UwMjVmYWZiYjU1ZGQ=", "commit": {"author": {"name": "Jacob Pratt", "email": "jacob@jhpratt.dev", "date": "2021-04-01T09:06:28Z"}, "committer": {"name": "Jacob Pratt", "email": "jacob@jhpratt.dev", "date": "2021-05-26T04:12:06Z"}, "message": "Make Range implementation safe", "tree": {"sha": "6e133cf76ad79639a3cb1b5523aa186124e6784d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e133cf76ad79639a3cb1b5523aa186124e6784d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a87587602732a7fe6739fdcfadce025fafbb55dd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYIAB0WIQTgxeqBxcDGar1sVhy4DhnkZitapAUCYK3KlgAKCRC4DhnkZita\npLObAQDSBCbKgqMfwsKSi/RWYarb48sFSA9KeYuA9LF1B6/0XQEAz/u4PU5vC+0o\nwIhXZnCM1K/WaqqRk9ANR6N8pcFLlg4=\n=LNOi\n-----END PGP SIGNATURE-----", "payload": "tree 6e133cf76ad79639a3cb1b5523aa186124e6784d\nparent 641c8cd87595016d08df39e7bd9ce795682a5b0d\nauthor Jacob Pratt <jacob@jhpratt.dev> 1617267988 -0400\ncommitter Jacob Pratt <jacob@jhpratt.dev> 1622002326 -0400\n\nMake Range implementation safe\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a87587602732a7fe6739fdcfadce025fafbb55dd", "html_url": "https://github.com/rust-lang/rust/commit/a87587602732a7fe6739fdcfadce025fafbb55dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a87587602732a7fe6739fdcfadce025fafbb55dd/comments", "author": {"login": "jhpratt", "id": 3161395, "node_id": "MDQ6VXNlcjMxNjEzOTU=", "avatar_url": "https://avatars.githubusercontent.com/u/3161395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhpratt", "html_url": "https://github.com/jhpratt", "followers_url": "https://api.github.com/users/jhpratt/followers", "following_url": "https://api.github.com/users/jhpratt/following{/other_user}", "gists_url": "https://api.github.com/users/jhpratt/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhpratt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhpratt/subscriptions", "organizations_url": "https://api.github.com/users/jhpratt/orgs", "repos_url": "https://api.github.com/users/jhpratt/repos", "events_url": "https://api.github.com/users/jhpratt/events{/privacy}", "received_events_url": "https://api.github.com/users/jhpratt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jhpratt", "id": 3161395, "node_id": "MDQ6VXNlcjMxNjEzOTU=", "avatar_url": "https://avatars.githubusercontent.com/u/3161395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhpratt", "html_url": "https://github.com/jhpratt", "followers_url": "https://api.github.com/users/jhpratt/followers", "following_url": "https://api.github.com/users/jhpratt/following{/other_user}", "gists_url": "https://api.github.com/users/jhpratt/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhpratt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhpratt/subscriptions", "organizations_url": "https://api.github.com/users/jhpratt/orgs", "repos_url": "https://api.github.com/users/jhpratt/repos", "events_url": "https://api.github.com/users/jhpratt/events{/privacy}", "received_events_url": "https://api.github.com/users/jhpratt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "641c8cd87595016d08df39e7bd9ce795682a5b0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/641c8cd87595016d08df39e7bd9ce795682a5b0d", "html_url": "https://github.com/rust-lang/rust/commit/641c8cd87595016d08df39e7bd9ce795682a5b0d"}], "stats": {"total": 55, "additions": 24, "deletions": 31}, "files": [{"sha": "9cf6756a0901e5c1884c95a5fb65e19d1732a0e4", "filename": "compiler/rustc_index/src/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a87587602732a7fe6739fdcfadce025fafbb55dd/compiler%2Frustc_index%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a87587602732a7fe6739fdcfadce025fafbb55dd/compiler%2Frustc_index%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_index%2Fsrc%2Fvec.rs?ref=a87587602732a7fe6739fdcfadce025fafbb55dd", "patch": "@@ -184,7 +184,7 @@ macro_rules! newtype_index {\n             }\n         }\n \n-        unsafe impl ::std::iter::Step for $type {\n+        impl ::std::iter::Step for $type {\n             #[inline]\n             fn steps_between(start: &Self, end: &Self) -> Option<usize> {\n                 <usize as ::std::iter::Step>::steps_between("}, {"sha": "63e6181cae298a3509b86d766b09eb9c9a008135", "filename": "library/core/src/iter/range.rs", "status": "modified", "additions": 22, "deletions": 29, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/a87587602732a7fe6739fdcfadce025fafbb55dd/library%2Fcore%2Fsrc%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a87587602732a7fe6739fdcfadce025fafbb55dd/library%2Fcore%2Fsrc%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Frange.rs?ref=a87587602732a7fe6739fdcfadce025fafbb55dd", "patch": "@@ -9,15 +9,8 @@ use super::{FusedIterator, TrustedLen, TrustedRandomAccess};\n ///\n /// The *successor* operation moves towards values that compare greater.\n /// The *predecessor* operation moves towards values that compare lesser.\n-///\n-/// # Safety\n-///\n-/// This trait is `unsafe` because its implementation must be correct for\n-/// the safety of `unsafe trait TrustedLen` implementations, and the results\n-/// of using this trait can otherwise be trusted by `unsafe` code to be correct\n-/// and fulfill the listed obligations.\n #[unstable(feature = \"step_trait\", reason = \"recently redesigned\", issue = \"42168\")]\n-pub unsafe trait Step: Clone + PartialOrd + Sized {\n+pub trait Step: Clone + PartialOrd + Sized {\n     /// Returns the number of *successor* steps required to get from `start` to `end`.\n     ///\n     /// Returns `None` if the number of steps would overflow `usize`\n@@ -237,7 +230,7 @@ macro_rules! step_integer_impls {\n         $(\n             #[allow(unreachable_patterns)]\n             #[unstable(feature = \"step_trait\", reason = \"recently redesigned\", issue = \"42168\")]\n-            unsafe impl Step for $u_narrower {\n+            impl Step for $u_narrower {\n                 step_identical_methods!();\n \n                 #[inline]\n@@ -269,7 +262,7 @@ macro_rules! step_integer_impls {\n \n             #[allow(unreachable_patterns)]\n             #[unstable(feature = \"step_trait\", reason = \"recently redesigned\", issue = \"42168\")]\n-            unsafe impl Step for $i_narrower {\n+            impl Step for $i_narrower {\n                 step_identical_methods!();\n \n                 #[inline]\n@@ -333,7 +326,7 @@ macro_rules! step_integer_impls {\n         $(\n             #[allow(unreachable_patterns)]\n             #[unstable(feature = \"step_trait\", reason = \"recently redesigned\", issue = \"42168\")]\n-            unsafe impl Step for $u_wider {\n+            impl Step for $u_wider {\n                 step_identical_methods!();\n \n                 #[inline]\n@@ -358,7 +351,7 @@ macro_rules! step_integer_impls {\n \n             #[allow(unreachable_patterns)]\n             #[unstable(feature = \"step_trait\", reason = \"recently redesigned\", issue = \"42168\")]\n-            unsafe impl Step for $i_wider {\n+            impl Step for $i_wider {\n                 step_identical_methods!();\n \n                 #[inline]\n@@ -408,7 +401,7 @@ step_integer_impls! {\n }\n \n #[unstable(feature = \"step_trait\", reason = \"recently redesigned\", issue = \"42168\")]\n-unsafe impl Step for char {\n+impl Step for char {\n     #[inline]\n     fn steps_between(&start: &char, &end: &char) -> Option<usize> {\n         let start = start as u32;\n@@ -519,8 +512,8 @@ impl<A: Step> Iterator for ops::Range<A> {\n     #[inline]\n     fn next(&mut self) -> Option<A> {\n         if self.start < self.end {\n-            // SAFETY: just checked precondition\n-            let n = unsafe { Step::forward_unchecked(self.start.clone(), 1) };\n+            let n =\n+                Step::forward_checked(self.start.clone(), 1).expect(\"`Step` invariants not upheld\");\n             Some(mem::replace(&mut self.start, n))\n         } else {\n             None\n@@ -541,8 +534,8 @@ impl<A: Step> Iterator for ops::Range<A> {\n     fn nth(&mut self, n: usize) -> Option<A> {\n         if let Some(plus_n) = Step::forward_checked(self.start.clone(), n) {\n             if plus_n < self.end {\n-                // SAFETY: just checked precondition\n-                self.start = unsafe { Step::forward_unchecked(plus_n.clone(), 1) };\n+                self.start =\n+                    Step::forward_checked(plus_n.clone(), 1).expect(\"`Step` invariants not upheld\");\n                 return Some(plus_n);\n             }\n         }\n@@ -632,8 +625,8 @@ impl<A: Step> DoubleEndedIterator for ops::Range<A> {\n     #[inline]\n     fn next_back(&mut self) -> Option<A> {\n         if self.start < self.end {\n-            // SAFETY: just checked precondition\n-            self.end = unsafe { Step::backward_unchecked(self.end.clone(), 1) };\n+            self.end =\n+                Step::backward_checked(self.end.clone(), 1).expect(\"`Step` invariants not upheld\");\n             Some(self.end.clone())\n         } else {\n             None\n@@ -644,8 +637,8 @@ impl<A: Step> DoubleEndedIterator for ops::Range<A> {\n     fn nth_back(&mut self, n: usize) -> Option<A> {\n         if let Some(minus_n) = Step::backward_checked(self.end.clone(), n) {\n             if minus_n > self.start {\n-                // SAFETY: just checked precondition\n-                self.end = unsafe { Step::backward_unchecked(minus_n, 1) };\n+                self.end =\n+                    Step::backward_checked(minus_n, 1).expect(\"`Step` invariants not upheld\");\n                 return Some(self.end.clone());\n             }\n         }\n@@ -711,8 +704,8 @@ impl<A: Step> Iterator for ops::RangeInclusive<A> {\n         }\n         let is_iterating = self.start < self.end;\n         Some(if is_iterating {\n-            // SAFETY: just checked precondition\n-            let n = unsafe { Step::forward_unchecked(self.start.clone(), 1) };\n+            let n =\n+                Step::forward_checked(self.start.clone(), 1).expect(\"`Step` invariants not upheld\");\n             mem::replace(&mut self.start, n)\n         } else {\n             self.exhausted = true;\n@@ -774,8 +767,8 @@ impl<A: Step> Iterator for ops::RangeInclusive<A> {\n         let mut accum = init;\n \n         while self.start < self.end {\n-            // SAFETY: just checked precondition\n-            let n = unsafe { Step::forward_unchecked(self.start.clone(), 1) };\n+            let n =\n+                Step::forward_checked(self.start.clone(), 1).expect(\"`Step` invariants not upheld\");\n             let n = mem::replace(&mut self.start, n);\n             accum = f(accum, n)?;\n         }\n@@ -828,8 +821,8 @@ impl<A: Step> DoubleEndedIterator for ops::RangeInclusive<A> {\n         }\n         let is_iterating = self.start < self.end;\n         Some(if is_iterating {\n-            // SAFETY: just checked precondition\n-            let n = unsafe { Step::backward_unchecked(self.end.clone(), 1) };\n+            let n =\n+                Step::backward_checked(self.end.clone(), 1).expect(\"`Step` invariants not upheld\");\n             mem::replace(&mut self.end, n)\n         } else {\n             self.exhausted = true;\n@@ -879,8 +872,8 @@ impl<A: Step> DoubleEndedIterator for ops::RangeInclusive<A> {\n         let mut accum = init;\n \n         while self.start < self.end {\n-            // SAFETY: just checked precondition\n-            let n = unsafe { Step::backward_unchecked(self.end.clone(), 1) };\n+            let n =\n+                Step::backward_checked(self.end.clone(), 1).expect(\"`Step` invariants not upheld\");\n             let n = mem::replace(&mut self.end, n);\n             accum = f(accum, n)?;\n         }"}, {"sha": "0d011fafb4ba42fce4b05ff2c7d47e9c85e477e8", "filename": "src/test/ui/impl-trait/example-calendar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a87587602732a7fe6739fdcfadce025fafbb55dd/src%2Ftest%2Fui%2Fimpl-trait%2Fexample-calendar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a87587602732a7fe6739fdcfadce025fafbb55dd/src%2Ftest%2Fui%2Fimpl-trait%2Fexample-calendar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fexample-calendar.rs?ref=a87587602732a7fe6739fdcfadce025fafbb55dd", "patch": "@@ -157,7 +157,7 @@ impl<'a, 'b> std::ops::Add<&'b NaiveDate> for &'a NaiveDate {\n     }\n }\n \n-unsafe impl std::iter::Step for NaiveDate {\n+impl std::iter::Step for NaiveDate {\n     fn steps_between(_: &Self, _: &Self) -> Option<usize> {\n         unimplemented!()\n     }"}]}