{"sha": "afe9cea6402ec7d2deb129e823c3a6d19aa2c906", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmZTljZWE2NDAyZWM3ZDJkZWIxMjllODIzYzNhNmQxOWFhMmM5MDY=", "commit": {"author": {"name": "Igor Matuszewski", "email": "Xanewok@gmail.com", "date": "2019-03-18T19:50:52Z"}, "committer": {"name": "Igor Matuszewski", "email": "Xanewok@gmail.com", "date": "2019-03-18T19:50:52Z"}, "message": "Ask the user to install and start cargo watch", "tree": {"sha": "22ac2d96c8f34f2991aebfb07f27a755b4dd359d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/22ac2d96c8f34f2991aebfb07f27a755b4dd359d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/afe9cea6402ec7d2deb129e823c3a6d19aa2c906", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/afe9cea6402ec7d2deb129e823c3a6d19aa2c906", "html_url": "https://github.com/rust-lang/rust/commit/afe9cea6402ec7d2deb129e823c3a6d19aa2c906", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/afe9cea6402ec7d2deb129e823c3a6d19aa2c906/comments", "author": {"login": "Xanewok", "id": 3093213, "node_id": "MDQ6VXNlcjMwOTMyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3093213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xanewok", "html_url": "https://github.com/Xanewok", "followers_url": "https://api.github.com/users/Xanewok/followers", "following_url": "https://api.github.com/users/Xanewok/following{/other_user}", "gists_url": "https://api.github.com/users/Xanewok/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xanewok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xanewok/subscriptions", "organizations_url": "https://api.github.com/users/Xanewok/orgs", "repos_url": "https://api.github.com/users/Xanewok/repos", "events_url": "https://api.github.com/users/Xanewok/events{/privacy}", "received_events_url": "https://api.github.com/users/Xanewok/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Xanewok", "id": 3093213, "node_id": "MDQ6VXNlcjMwOTMyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3093213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xanewok", "html_url": "https://github.com/Xanewok", "followers_url": "https://api.github.com/users/Xanewok/followers", "following_url": "https://api.github.com/users/Xanewok/following{/other_user}", "gists_url": "https://api.github.com/users/Xanewok/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xanewok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xanewok/subscriptions", "organizations_url": "https://api.github.com/users/Xanewok/orgs", "repos_url": "https://api.github.com/users/Xanewok/repos", "events_url": "https://api.github.com/users/Xanewok/events{/privacy}", "received_events_url": "https://api.github.com/users/Xanewok/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f1ae658dbb0d091bd384efbab93d622e5fff49f", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f1ae658dbb0d091bd384efbab93d622e5fff49f", "html_url": "https://github.com/rust-lang/rust/commit/9f1ae658dbb0d091bd384efbab93d622e5fff49f"}], "stats": {"total": 66, "additions": 61, "deletions": 5}, "files": [{"sha": "d5b496b1b3f3eb8b669ce761bd4089354510c3b7", "filename": "editors/code/src/extension.ts", "status": "modified", "additions": 61, "deletions": 5, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/afe9cea6402ec7d2deb129e823c3a6d19aa2c906/editors%2Fcode%2Fsrc%2Fextension.ts", "raw_url": "https://github.com/rust-lang/rust/raw/afe9cea6402ec7d2deb129e823c3a6d19aa2c906/editors%2Fcode%2Fsrc%2Fextension.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fextension.ts?ref=afe9cea6402ec7d2deb129e823c3a6d19aa2c906", "patch": "@@ -1,11 +1,15 @@\n+import { exec, spawn } from 'child_process';\n+import * as util from 'util';\n import * as vscode from 'vscode';\n import * as lc from 'vscode-languageclient';\n \n import * as commands from './commands';\n+import { autoCargoWatchTask, createTask } from './commands/runnables';\n import { SyntaxTreeContentProvider } from './commands/syntaxTree';\n import * as events from './events';\n import * as notifications from './notifications';\n import { Server } from './server';\n+import { TextDecoder } from 'util';\n \n export function activate(context: vscode.ExtensionContext) {\n     function disposeOnDeactivation(disposable: vscode.Disposable) {\n@@ -89,11 +93,11 @@ export function activate(context: vscode.ExtensionContext) {\n     const allNotifications: Iterable<\n         [string, lc.GenericNotificationHandler]\n     > = [\n-        [\n-            'rust-analyzer/publishDecorations',\n-            notifications.publishDecorations.handle\n-        ]\n-    ];\n+            [\n+                'rust-analyzer/publishDecorations',\n+                notifications.publishDecorations.handle\n+            ]\n+        ];\n     const syntaxTreeContentProvider = new SyntaxTreeContentProvider();\n \n     // The events below are plain old javascript events, triggered and handled by vscode\n@@ -119,6 +123,9 @@ export function activate(context: vscode.ExtensionContext) {\n         context.subscriptions\n     );\n \n+    // Attempts to run `cargo watch`, which provides inline diagnostics on save\n+    askToCargoWatch();\n+\n     // Start the language server, finally!\n     Server.start(allNotifications);\n }\n@@ -129,3 +136,52 @@ export function deactivate(): Thenable<void> {\n     }\n     return Server.client.stop();\n }\n+\n+async function askToCargoWatch() {\n+    const watch = await vscode.window.showInformationMessage(\n+        'Start watching changes with cargo? (Executes `cargo watch`, provides inline diagnostics)',\n+        'yes',\n+        'no'\n+    );\n+    if (watch === 'no') {\n+        return;\n+    }\n+\n+    const { stderr } = await util.promisify(exec)('cargo watch --version').catch(e => e);\n+    if (stderr.includes('no such subcommand: `watch`')) {\n+        const msg = 'The `cargo-watch` subcommand is not installed. Install? (takes ~1-2 minutes)';\n+        const install = await vscode.window.showInformationMessage(msg, 'yes', 'no');\n+        if (install === 'no') {\n+            return;\n+        }\n+\n+        try {\n+            // await vscode.tasks.executeTask(createTask({label: '', bin: 'cargo', args: ['install', 'cargo-watch'], env: {}}));\n+\n+            const channel = vscode.window.createOutputChannel('cargo-watch');\n+            channel.show(false);\n+            const sup = spawn('cargo', ['install', 'cargo-watch']);\n+            sup.stderr.on('data', chunk => {\n+                const output = new TextDecoder().decode(chunk);\n+                channel.append(output);\n+            });\n+            await new Promise((resolve, reject) => {\n+                sup.on('close', (code, signal) => {\n+                    if (code === 0) {\n+                        resolve(code);\n+                    } else {\n+                        reject(code);\n+                    }\n+                });\n+            });\n+            channel.dispose();\n+        } catch (err) {\n+            vscode.window.showErrorMessage(\n+                `Couldn't install \\`cargo-watch\\`: ${err.message}`\n+            );\n+            return;\n+        }\n+    }\n+\n+    vscode.tasks.executeTask(autoCargoWatchTask);\n+}"}]}