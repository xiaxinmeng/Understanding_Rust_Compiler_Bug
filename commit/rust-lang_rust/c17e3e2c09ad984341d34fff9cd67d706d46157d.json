{"sha": "c17e3e2c09ad984341d34fff9cd67d706d46157d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxN2UzZTJjMDlhZDk4NDM0MWQzNGZmZjljZDY3ZDcwNmQ0NjE1N2Q=", "commit": {"author": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2021-04-17T03:40:50Z"}, "committer": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2021-06-05T05:19:30Z"}, "message": "Add improper ctypes test for ptr to unit, ptr to tuple", "tree": {"sha": "9b5f9c07d5216b91c4ff59207386864ffcd0d843", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b5f9c07d5216b91c4ff59207386864ffcd0d843"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c17e3e2c09ad984341d34fff9cd67d706d46157d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEERijF2Cz/ZdaBZKeK+boUO5X/bYIFAmC7CWIACgkQ+boUO5X/\nbYKSqA//aSw1MbVUyhgbiiYlSVYbMKrsQ/UCEh/PSuLpNNZ4gqj27yY1+or00vNF\njJydzi87tmyjqUCPYdm+a7ueM5y54J+JuVmfn3N1QTUzGH/uBRQMb+jmIcC7LGKk\nFGiyyLG3bEVycgLXjdsizlGGbMf59i4Bq5IMQRuN9NPLZiC7ozYn2c/1CbCtUvxZ\n5wwYMsZm8VycSpJxdCNAe7sebqZyGQt5Ep23r9hG1AAtbqBZjNOjNo6jqkc6QJE+\nIdcv4z7uiIX/VKT3zvx3zFwik+213j5/HYnKOwbwyBwLlvh4IuzL9C9zwLlhEv/u\nFjhNBUMFBWLX58X3R7lf0zYcBbJWShCqrwzQ2OsXAa6zbmYG0TCJL7QfywHm/RmN\nNhn37+UG9Dx0WzKJ7VeEKnAbvAnoQxKPNp+XKbwVji031iEiFYFhvPWz1ULH/h5h\nCdzUqRf5tplRxQvig45w3tIyejwb5Aq0/dqM+5qJRsto7vTbAJE0/DwCAmaE5LUz\njTej3YwkmKoY0WmWCvJL1HaBGiH9YHbM9go8CQY5AVJl/CLJpZJLpRSmTohtYB0m\n7yyz/SIkKmMK5pyWB6dSfig3T0j2HlBNV6RNb4H+L94zmD5SPNoExOcXsPY1wbnI\nSGPRsIe3jr49fahe+NHLgFZ4gM1ktEz8545F6GJEQFisIfQOBug=\n=tkIz\n-----END PGP SIGNATURE-----", "payload": "tree 9b5f9c07d5216b91c4ff59207386864ffcd0d843\nparent 9e6f0e878d1302d6e7acf0c04fb28e906036f567\nauthor David Tolnay <dtolnay@gmail.com> 1618630850 -0700\ncommitter David Tolnay <dtolnay@gmail.com> 1622870370 -0700\n\nAdd improper ctypes test for ptr to unit, ptr to tuple\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c17e3e2c09ad984341d34fff9cd67d706d46157d", "html_url": "https://github.com/rust-lang/rust/commit/c17e3e2c09ad984341d34fff9cd67d706d46157d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c17e3e2c09ad984341d34fff9cd67d706d46157d/comments", "author": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e6f0e878d1302d6e7acf0c04fb28e906036f567", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e6f0e878d1302d6e7acf0c04fb28e906036f567", "html_url": "https://github.com/rust-lang/rust/commit/9e6f0e878d1302d6e7acf0c04fb28e906036f567"}], "stats": {"total": 114, "additions": 69, "deletions": 45}, "files": [{"sha": "d3b36a9d59c70ecac52318dd42a54ffbda8f65e9", "filename": "src/test/ui/lint/lint-ctypes-fn.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c17e3e2c09ad984341d34fff9cd67d706d46157d/src%2Ftest%2Fui%2Flint%2Flint-ctypes-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c17e3e2c09ad984341d34fff9cd67d706d46157d/src%2Ftest%2Fui%2Flint%2Flint-ctypes-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-fn.rs?ref=c17e3e2c09ad984341d34fff9cd67d706d46157d", "patch": "@@ -66,6 +66,10 @@ pub extern \"C\" fn ptr_type1(size: *const Foo) { }\n \n pub extern \"C\" fn ptr_type2(size: *const Foo) { }\n \n+pub extern \"C\" fn ptr_unit(p: *const ()) { }\n+\n+pub extern \"C\" fn ptr_tuple(p: *const ((),)) { }\n+\n pub extern \"C\" fn slice_type(p: &[u32]) { }\n //~^ ERROR: uses type `[u32]`\n "}, {"sha": "740075ca7dfff3f7da4bf52d1ecc4ff2dbbd371b", "filename": "src/test/ui/lint/lint-ctypes-fn.stderr", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/c17e3e2c09ad984341d34fff9cd67d706d46157d/src%2Ftest%2Fui%2Flint%2Flint-ctypes-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c17e3e2c09ad984341d34fff9cd67d706d46157d/src%2Ftest%2Fui%2Flint%2Flint-ctypes-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-fn.stderr?ref=c17e3e2c09ad984341d34fff9cd67d706d46157d", "patch": "@@ -1,5 +1,5 @@\n error: `extern` fn uses type `[u32]`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:69:33\n+  --> $DIR/lint-ctypes-fn.rs:73:33\n    |\n LL | pub extern \"C\" fn slice_type(p: &[u32]) { }\n    |                                 ^^^^^^ not FFI-safe\n@@ -13,7 +13,7 @@ LL | #![deny(improper_ctypes_definitions)]\n    = note: slices have no C equivalent\n \n error: `extern` fn uses type `str`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:72:31\n+  --> $DIR/lint-ctypes-fn.rs:76:31\n    |\n LL | pub extern \"C\" fn str_type(p: &str) { }\n    |                               ^^^^ not FFI-safe\n@@ -22,31 +22,31 @@ LL | pub extern \"C\" fn str_type(p: &str) { }\n    = note: string slices have no C equivalent\n \n error: `extern` fn uses type `Box<[u8]>`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:79:34\n+  --> $DIR/lint-ctypes-fn.rs:83:34\n    |\n LL | pub extern \"C\" fn boxed_slice(p: Box<[u8]>) { }\n    |                                  ^^^^^^^^^ not FFI-safe\n    |\n    = note: box cannot be represented as a single pointer\n \n error: `extern` fn uses type `Box<str>`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:82:35\n+  --> $DIR/lint-ctypes-fn.rs:86:35\n    |\n LL | pub extern \"C\" fn boxed_string(p: Box<str>) { }\n    |                                   ^^^^^^^^ not FFI-safe\n    |\n    = note: box cannot be represented as a single pointer\n \n error: `extern` fn uses type `Box<dyn Trait>`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:85:34\n+  --> $DIR/lint-ctypes-fn.rs:89:34\n    |\n LL | pub extern \"C\" fn boxed_trait(p: Box<dyn Trait>) { }\n    |                                  ^^^^^^^^^^^^^^ not FFI-safe\n    |\n    = note: box cannot be represented as a single pointer\n \n error: `extern` fn uses type `char`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:88:32\n+  --> $DIR/lint-ctypes-fn.rs:92:32\n    |\n LL | pub extern \"C\" fn char_type(p: char) { }\n    |                                ^^^^ not FFI-safe\n@@ -55,23 +55,23 @@ LL | pub extern \"C\" fn char_type(p: char) { }\n    = note: the `char` type has no C equivalent\n \n error: `extern` fn uses type `i128`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:91:32\n+  --> $DIR/lint-ctypes-fn.rs:95:32\n    |\n LL | pub extern \"C\" fn i128_type(p: i128) { }\n    |                                ^^^^ not FFI-safe\n    |\n    = note: 128-bit integers don't currently have a known stable ABI\n \n error: `extern` fn uses type `u128`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:94:32\n+  --> $DIR/lint-ctypes-fn.rs:98:32\n    |\n LL | pub extern \"C\" fn u128_type(p: u128) { }\n    |                                ^^^^ not FFI-safe\n    |\n    = note: 128-bit integers don't currently have a known stable ABI\n \n error: `extern` fn uses type `(i32, i32)`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:97:33\n+  --> $DIR/lint-ctypes-fn.rs:101:33\n    |\n LL | pub extern \"C\" fn tuple_type(p: (i32, i32)) { }\n    |                                 ^^^^^^^^^^ not FFI-safe\n@@ -80,7 +80,7 @@ LL | pub extern \"C\" fn tuple_type(p: (i32, i32)) { }\n    = note: tuples have unspecified layout\n \n error: `extern` fn uses type `(i32, i32)`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:100:34\n+  --> $DIR/lint-ctypes-fn.rs:104:34\n    |\n LL | pub extern \"C\" fn tuple_type2(p: I32Pair) { }\n    |                                  ^^^^^^^ not FFI-safe\n@@ -89,7 +89,7 @@ LL | pub extern \"C\" fn tuple_type2(p: I32Pair) { }\n    = note: tuples have unspecified layout\n \n error: `extern` fn uses type `ZeroSize`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:103:32\n+  --> $DIR/lint-ctypes-fn.rs:107:32\n    |\n LL | pub extern \"C\" fn zero_size(p: ZeroSize) { }\n    |                                ^^^^^^^^ not FFI-safe\n@@ -103,7 +103,7 @@ LL | pub struct ZeroSize;\n    | ^^^^^^^^^^^^^^^^^^^^\n \n error: `extern` fn uses type `ZeroSizeWithPhantomData`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:106:40\n+  --> $DIR/lint-ctypes-fn.rs:110:40\n    |\n LL | pub extern \"C\" fn zero_size_phantom(p: ZeroSizeWithPhantomData) { }\n    |                                        ^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe\n@@ -116,15 +116,15 @@ LL | pub struct ZeroSizeWithPhantomData(PhantomData<i32>);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `extern` fn uses type `PhantomData<bool>`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:109:51\n+  --> $DIR/lint-ctypes-fn.rs:113:51\n    |\n LL | pub extern \"C\" fn zero_size_phantom_toplevel() -> PhantomData<bool> {\n    |                                                   ^^^^^^^^^^^^^^^^^ not FFI-safe\n    |\n    = note: composed only of `PhantomData`\n \n error: `extern` fn uses type `fn()`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:114:30\n+  --> $DIR/lint-ctypes-fn.rs:118:30\n    |\n LL | pub extern \"C\" fn fn_type(p: RustFn) { }\n    |                              ^^^^^^ not FFI-safe\n@@ -133,7 +133,7 @@ LL | pub extern \"C\" fn fn_type(p: RustFn) { }\n    = note: this function pointer has Rust-specific calling convention\n \n error: `extern` fn uses type `fn()`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:117:31\n+  --> $DIR/lint-ctypes-fn.rs:121:31\n    |\n LL | pub extern \"C\" fn fn_type2(p: fn()) { }\n    |                               ^^^^ not FFI-safe\n@@ -142,15 +142,15 @@ LL | pub extern \"C\" fn fn_type2(p: fn()) { }\n    = note: this function pointer has Rust-specific calling convention\n \n error: `extern` fn uses type `i128`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:122:39\n+  --> $DIR/lint-ctypes-fn.rs:126:39\n    |\n LL | pub extern \"C\" fn transparent_i128(p: TransparentI128) { }\n    |                                       ^^^^^^^^^^^^^^^ not FFI-safe\n    |\n    = note: 128-bit integers don't currently have a known stable ABI\n \n error: `extern` fn uses type `str`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:125:38\n+  --> $DIR/lint-ctypes-fn.rs:129:38\n    |\n LL | pub extern \"C\" fn transparent_str(p: TransparentStr) { }\n    |                                      ^^^^^^^^^^^^^^ not FFI-safe\n@@ -159,15 +159,15 @@ LL | pub extern \"C\" fn transparent_str(p: TransparentStr) { }\n    = note: string slices have no C equivalent\n \n error: `extern` fn uses type `PhantomData<bool>`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:171:43\n+  --> $DIR/lint-ctypes-fn.rs:175:43\n    |\n LL | pub extern \"C\" fn unused_generic2<T>() -> PhantomData<bool> {\n    |                                           ^^^^^^^^^^^^^^^^^ not FFI-safe\n    |\n    = note: composed only of `PhantomData`\n \n error: `extern` fn uses type `Vec<T>`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:184:39\n+  --> $DIR/lint-ctypes-fn.rs:188:39\n    |\n LL | pub extern \"C\" fn used_generic4<T>(x: Vec<T>) { }\n    |                                       ^^^^^^ not FFI-safe\n@@ -176,7 +176,7 @@ LL | pub extern \"C\" fn used_generic4<T>(x: Vec<T>) { }\n    = note: this struct has unspecified layout\n \n error: `extern` fn uses type `Vec<T>`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:187:41\n+  --> $DIR/lint-ctypes-fn.rs:191:41\n    |\n LL | pub extern \"C\" fn used_generic5<T>() -> Vec<T> {\n    |                                         ^^^^^^ not FFI-safe"}, {"sha": "4a55b7cb25eb8e8a04d6ebcceede2b17c6a0dd15", "filename": "src/test/ui/lint/lint-ctypes.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c17e3e2c09ad984341d34fff9cd67d706d46157d/src%2Ftest%2Fui%2Flint%2Flint-ctypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c17e3e2c09ad984341d34fff9cd67d706d46157d/src%2Ftest%2Fui%2Flint%2Flint-ctypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes.rs?ref=c17e3e2c09ad984341d34fff9cd67d706d46157d", "patch": "@@ -47,6 +47,8 @@ pub struct ZeroSizeWithPhantomData(::std::marker::PhantomData<i32>);\n extern \"C\" {\n     pub fn ptr_type1(size: *const Foo); //~ ERROR: uses type `Foo`\n     pub fn ptr_type2(size: *const Foo); //~ ERROR: uses type `Foo`\n+    pub fn ptr_unit(p: *const ()); //~ ERROR: uses type `()`\n+    pub fn ptr_tuple(p: *const ((),)); //~ ERROR: uses type `((),)`\n     pub fn slice_type(p: &[u32]); //~ ERROR: uses type `[u32]`\n     pub fn str_type(p: &str); //~ ERROR: uses type `str`\n     pub fn box_type(p: Box<u32>); //~ ERROR uses type `Box<u32>`"}, {"sha": "8295d0655e3052931d5c4c43dad155f5a661becc", "filename": "src/test/ui/lint/lint-ctypes.stderr", "status": "modified", "additions": 43, "deletions": 25, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/c17e3e2c09ad984341d34fff9cd67d706d46157d/src%2Ftest%2Fui%2Flint%2Flint-ctypes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c17e3e2c09ad984341d34fff9cd67d706d46157d/src%2Ftest%2Fui%2Flint%2Flint-ctypes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes.stderr?ref=c17e3e2c09ad984341d34fff9cd67d706d46157d", "patch": "@@ -31,8 +31,26 @@ note: the type is defined here\n LL | pub struct Foo;\n    | ^^^^^^^^^^^^^^^\n \n+error: `extern` block uses type `()`, which is not FFI-safe\n+  --> $DIR/lint-ctypes.rs:50:24\n+   |\n+LL |     pub fn ptr_unit(p: *const ());\n+   |                        ^^^^^^^^^ not FFI-safe\n+   |\n+   = help: consider using a struct instead\n+   = note: tuples have unspecified layout\n+\n+error: `extern` block uses type `((),)`, which is not FFI-safe\n+  --> $DIR/lint-ctypes.rs:51:25\n+   |\n+LL |     pub fn ptr_tuple(p: *const ((),));\n+   |                         ^^^^^^^^^^^^ not FFI-safe\n+   |\n+   = help: consider using a struct instead\n+   = note: tuples have unspecified layout\n+\n error: `extern` block uses type `[u32]`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:50:26\n+  --> $DIR/lint-ctypes.rs:52:26\n    |\n LL |     pub fn slice_type(p: &[u32]);\n    |                          ^^^^^^ not FFI-safe\n@@ -41,7 +59,7 @@ LL |     pub fn slice_type(p: &[u32]);\n    = note: slices have no C equivalent\n \n error: `extern` block uses type `str`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:51:24\n+  --> $DIR/lint-ctypes.rs:53:24\n    |\n LL |     pub fn str_type(p: &str);\n    |                        ^^^^ not FFI-safe\n@@ -50,7 +68,7 @@ LL |     pub fn str_type(p: &str);\n    = note: string slices have no C equivalent\n \n error: `extern` block uses type `Box<u32>`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:52:24\n+  --> $DIR/lint-ctypes.rs:54:24\n    |\n LL |     pub fn box_type(p: Box<u32>);\n    |                        ^^^^^^^^ not FFI-safe\n@@ -59,7 +77,7 @@ LL |     pub fn box_type(p: Box<u32>);\n    = note: this struct has unspecified layout\n \n error: `extern` block uses type `Option<Box<u32>>`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:53:28\n+  --> $DIR/lint-ctypes.rs:55:28\n    |\n LL |     pub fn opt_box_type(p: Option<Box<u32>>);\n    |                            ^^^^^^^^^^^^^^^^ not FFI-safe\n@@ -68,7 +86,7 @@ LL |     pub fn opt_box_type(p: Option<Box<u32>>);\n    = note: enum has no representation hint\n \n error: `extern` block uses type `char`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:55:25\n+  --> $DIR/lint-ctypes.rs:57:25\n    |\n LL |     pub fn char_type(p: char);\n    |                         ^^^^ not FFI-safe\n@@ -77,31 +95,31 @@ LL |     pub fn char_type(p: char);\n    = note: the `char` type has no C equivalent\n \n error: `extern` block uses type `i128`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:56:25\n+  --> $DIR/lint-ctypes.rs:58:25\n    |\n LL |     pub fn i128_type(p: i128);\n    |                         ^^^^ not FFI-safe\n    |\n    = note: 128-bit integers don't currently have a known stable ABI\n \n error: `extern` block uses type `u128`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:57:25\n+  --> $DIR/lint-ctypes.rs:59:25\n    |\n LL |     pub fn u128_type(p: u128);\n    |                         ^^^^ not FFI-safe\n    |\n    = note: 128-bit integers don't currently have a known stable ABI\n \n error: `extern` block uses type `dyn Bar`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:58:26\n+  --> $DIR/lint-ctypes.rs:60:26\n    |\n LL |     pub fn trait_type(p: &dyn Bar);\n    |                          ^^^^^^^^ not FFI-safe\n    |\n    = note: trait objects have no C equivalent\n \n error: `extern` block uses type `(i32, i32)`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:59:26\n+  --> $DIR/lint-ctypes.rs:61:26\n    |\n LL |     pub fn tuple_type(p: (i32, i32));\n    |                          ^^^^^^^^^^ not FFI-safe\n@@ -110,7 +128,7 @@ LL |     pub fn tuple_type(p: (i32, i32));\n    = note: tuples have unspecified layout\n \n error: `extern` block uses type `(i32, i32)`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:60:27\n+  --> $DIR/lint-ctypes.rs:62:27\n    |\n LL |     pub fn tuple_type2(p: I32Pair);\n    |                           ^^^^^^^ not FFI-safe\n@@ -119,7 +137,7 @@ LL |     pub fn tuple_type2(p: I32Pair);\n    = note: tuples have unspecified layout\n \n error: `extern` block uses type `ZeroSize`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:61:25\n+  --> $DIR/lint-ctypes.rs:63:25\n    |\n LL |     pub fn zero_size(p: ZeroSize);\n    |                         ^^^^^^^^ not FFI-safe\n@@ -133,7 +151,7 @@ LL | pub struct ZeroSize;\n    | ^^^^^^^^^^^^^^^^^^^^\n \n error: `extern` block uses type `ZeroSizeWithPhantomData`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:62:33\n+  --> $DIR/lint-ctypes.rs:64:33\n    |\n LL |     pub fn zero_size_phantom(p: ZeroSizeWithPhantomData);\n    |                                 ^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe\n@@ -146,15 +164,15 @@ LL | pub struct ZeroSizeWithPhantomData(::std::marker::PhantomData<i32>);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `extern` block uses type `PhantomData<bool>`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:65:12\n+  --> $DIR/lint-ctypes.rs:67:12\n    |\n LL |         -> ::std::marker::PhantomData<bool>;\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe\n    |\n    = note: composed only of `PhantomData`\n \n error: `extern` block uses type `fn()`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:66:23\n+  --> $DIR/lint-ctypes.rs:68:23\n    |\n LL |     pub fn fn_type(p: RustFn);\n    |                       ^^^^^^ not FFI-safe\n@@ -163,7 +181,7 @@ LL |     pub fn fn_type(p: RustFn);\n    = note: this function pointer has Rust-specific calling convention\n \n error: `extern` block uses type `fn()`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:67:24\n+  --> $DIR/lint-ctypes.rs:69:24\n    |\n LL |     pub fn fn_type2(p: fn());\n    |                        ^^^^ not FFI-safe\n@@ -172,7 +190,7 @@ LL |     pub fn fn_type2(p: fn());\n    = note: this function pointer has Rust-specific calling convention\n \n error: `extern` block uses type `Box<u32>`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:68:28\n+  --> $DIR/lint-ctypes.rs:70:28\n    |\n LL |     pub fn fn_contained(p: RustBadRet);\n    |                            ^^^^^^^^^^ not FFI-safe\n@@ -181,15 +199,15 @@ LL |     pub fn fn_contained(p: RustBadRet);\n    = note: this struct has unspecified layout\n \n error: `extern` block uses type `i128`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:69:32\n+  --> $DIR/lint-ctypes.rs:71:32\n    |\n LL |     pub fn transparent_i128(p: TransparentI128);\n    |                                ^^^^^^^^^^^^^^^ not FFI-safe\n    |\n    = note: 128-bit integers don't currently have a known stable ABI\n \n error: `extern` block uses type `str`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:70:31\n+  --> $DIR/lint-ctypes.rs:72:31\n    |\n LL |     pub fn transparent_str(p: TransparentStr);\n    |                               ^^^^^^^^^^^^^^ not FFI-safe\n@@ -198,7 +216,7 @@ LL |     pub fn transparent_str(p: TransparentStr);\n    = note: string slices have no C equivalent\n \n error: `extern` block uses type `Box<u32>`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:71:30\n+  --> $DIR/lint-ctypes.rs:73:30\n    |\n LL |     pub fn transparent_fn(p: TransparentBadFn);\n    |                              ^^^^^^^^^^^^^^^^ not FFI-safe\n@@ -207,7 +225,7 @@ LL |     pub fn transparent_fn(p: TransparentBadFn);\n    = note: this struct has unspecified layout\n \n error: `extern` block uses type `[u8; 8]`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:72:27\n+  --> $DIR/lint-ctypes.rs:74:27\n    |\n LL |     pub fn raw_array(arr: [u8; 8]);\n    |                           ^^^^^^^ not FFI-safe\n@@ -216,7 +234,7 @@ LL |     pub fn raw_array(arr: [u8; 8]);\n    = note: passing raw arrays by value is not FFI-safe\n \n error: `extern` block uses type `Option<UnsafeCell<extern \"C\" fn()>>`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:74:26\n+  --> $DIR/lint-ctypes.rs:76:26\n    |\n LL |     pub fn no_niche_a(a: Option<UnsafeCell<extern fn()>>);\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe\n@@ -225,7 +243,7 @@ LL |     pub fn no_niche_a(a: Option<UnsafeCell<extern fn()>>);\n    = note: enum has no representation hint\n \n error: `extern` block uses type `Option<UnsafeCell<&i32>>`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:76:26\n+  --> $DIR/lint-ctypes.rs:78:26\n    |\n LL |     pub fn no_niche_b(b: Option<UnsafeCell<&i32>>);\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe\n@@ -234,20 +252,20 @@ LL |     pub fn no_niche_b(b: Option<UnsafeCell<&i32>>);\n    = note: enum has no representation hint\n \n error: `extern` block uses type `u128`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:79:34\n+  --> $DIR/lint-ctypes.rs:81:34\n    |\n LL |     pub static static_u128_type: u128;\n    |                                  ^^^^ not FFI-safe\n    |\n    = note: 128-bit integers don't currently have a known stable ABI\n \n error: `extern` block uses type `u128`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:80:40\n+  --> $DIR/lint-ctypes.rs:82:40\n    |\n LL |     pub static static_u128_array_type: [u128; 16];\n    |                                        ^^^^^^^^^^ not FFI-safe\n    |\n    = note: 128-bit integers don't currently have a known stable ABI\n \n-error: aborting due to 26 previous errors\n+error: aborting due to 28 previous errors\n "}]}