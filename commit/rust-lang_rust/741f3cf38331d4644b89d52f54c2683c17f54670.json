{"sha": "741f3cf38331d4644b89d52f54c2683c17f54670", "node_id": "C_kwDOAAsO6NoAKDc0MWYzY2YzODMzMWQ0NjQ0Yjg5ZDUyZjU0YzI2ODNjMTdmNTQ2NzA", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-11-18T13:13:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-18T13:13:35Z"}, "message": "Rollup merge of #103386 - compiler-errors:no-coerceunsized-to-dynstar, r=eholk\n\nDon't allow `CoerceUnsized` into `dyn*` (except for trait upcasting)\n\nThis makes sure we don't accidentally allow coercions like `Box<T>` -> `Box<dyn* Trait>`, or in the case of this ICE, `&T` to `&dyn* Trait`. These coercions don't make sense, at least not via the `CoerceUnsized` trait.\n\nFixes #102172\nFixes #102429", "tree": {"sha": "80abe20c55ac268dbbbffd53391bf7c4f87f078e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/80abe20c55ac268dbbbffd53391bf7c4f87f078e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/741f3cf38331d4644b89d52f54c2683c17f54670", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjd4T/CRBK7hj4Ov3rIwAAJOAIAI1436S8GAjz03zf+L8RbmT3\nJztuo4oNZFTmG3FV7yADxIFbBjtzGvXVVj3KUh+A0BetxG6pdk04LVRaArJxGa3A\nrYM/3lfUwFWdXj9bPxR00a0bJaB4ow9qc/TRDB1KZE738g+a0DsfIolVnytNCi/j\nSgkokm4duRci1d3WD3E9WTBwiI+Gj3GHV1xDOF8UusluI/7hpVMBfCpbUI9CFDbW\ntnJRyJmTPNw9KRE3cRuckDY2/cBaRUxmaFxnVZNVi4kukmJE9i7/vy8NLHUc15si\nvILv1hlgl5/uek02CL7RPc9C16PeMNAMLBBhq/1NKpqvEQnwF7c1jdvHo1wWTpc=\n=Amrf\n-----END PGP SIGNATURE-----\n", "payload": "tree 80abe20c55ac268dbbbffd53391bf7c4f87f078e\nparent 3e5965722ca46b82cc68cb1acdddf7e187a6ee02\nparent 4f978dbaf91e7029792dd1f7e14a851ee040aabb\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1668777215 +0100\ncommitter GitHub <noreply@github.com> 1668777215 +0100\n\nRollup merge of #103386 - compiler-errors:no-coerceunsized-to-dynstar, r=eholk\n\nDon't allow `CoerceUnsized` into `dyn*` (except for trait upcasting)\n\nThis makes sure we don't accidentally allow coercions like `Box<T>` -> `Box<dyn* Trait>`, or in the case of this ICE, `&T` to `&dyn* Trait`. These coercions don't make sense, at least not via the `CoerceUnsized` trait.\n\nFixes #102172\nFixes #102429\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/741f3cf38331d4644b89d52f54c2683c17f54670", "html_url": "https://github.com/rust-lang/rust/commit/741f3cf38331d4644b89d52f54c2683c17f54670", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/741f3cf38331d4644b89d52f54c2683c17f54670/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e5965722ca46b82cc68cb1acdddf7e187a6ee02", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e5965722ca46b82cc68cb1acdddf7e187a6ee02", "html_url": "https://github.com/rust-lang/rust/commit/3e5965722ca46b82cc68cb1acdddf7e187a6ee02"}, {"sha": "4f978dbaf91e7029792dd1f7e14a851ee040aabb", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f978dbaf91e7029792dd1f7e14a851ee040aabb", "html_url": "https://github.com/rust-lang/rust/commit/4f978dbaf91e7029792dd1f7e14a851ee040aabb"}], "stats": {"total": 58, "additions": 53, "deletions": 5}, "files": [{"sha": "1b742864cfa1e214f2ed4d71d378282e84716488", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/741f3cf38331d4644b89d52f54c2683c17f54670/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/741f3cf38331d4644b89d52f54c2683c17f54670/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=741f3cf38331d4644b89d52f54c2683c17f54670", "patch": "@@ -780,7 +780,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n         match (source.kind(), target.kind()) {\n             // Trait+Kx+'a -> Trait+Ky+'b (upcasts).\n-            (&ty::Dynamic(ref data_a, ..), &ty::Dynamic(ref data_b, ..)) => {\n+            (&ty::Dynamic(ref data_a, _, dyn_a), &ty::Dynamic(ref data_b, _, dyn_b))\n+                if dyn_a == dyn_b =>\n+            {\n                 // Upcast coercions permit several things:\n                 //\n                 // 1. Dropping auto traits, e.g., `Foo + Send` to `Foo`\n@@ -841,7 +843,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             }\n \n             // `T` -> `Trait`\n-            (_, &ty::Dynamic(..)) => {\n+            (_, &ty::Dynamic(_, _, ty::Dyn)) => {\n                 candidates.vec.push(BuiltinUnsizeCandidate);\n             }\n "}, {"sha": "a496aed38ac1772ffd00fe25742ed4bbf85ac46c", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/741f3cf38331d4644b89d52f54c2683c17f54670/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/741f3cf38331d4644b89d52f54c2683c17f54670/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=741f3cf38331d4644b89d52f54c2683c17f54670", "patch": "@@ -912,7 +912,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         let mut nested = vec![];\n         match (source.kind(), target.kind()) {\n             // Trait+Kx+'a -> Trait+Ky+'b (auto traits and lifetime subtyping).\n-            (&ty::Dynamic(ref data_a, r_a, ty::Dyn), &ty::Dynamic(ref data_b, r_b, ty::Dyn)) => {\n+            (&ty::Dynamic(ref data_a, r_a, dyn_a), &ty::Dynamic(ref data_b, r_b, dyn_b))\n+                if dyn_a == dyn_b =>\n+            {\n                 // See `assemble_candidates_for_unsizing` for more info.\n                 // We already checked the compatibility of auto traits within `assemble_candidates_for_unsizing`.\n                 let iter = data_a\n@@ -931,7 +933,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                             .map(ty::Binder::dummy),\n                     );\n                 let existential_predicates = tcx.mk_poly_existential_predicates(iter);\n-                let source_trait = tcx.mk_dynamic(existential_predicates, r_b, ty::Dyn);\n+                let source_trait = tcx.mk_dynamic(existential_predicates, r_b, dyn_a);\n \n                 // Require that the traits involved in this upcast are **equal**;\n                 // only the **lifetime bound** is changed.\n@@ -1140,7 +1142,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 }));\n             }\n \n-            _ => bug!(),\n+            _ => bug!(\"source: {source}, target: {target}\"),\n         };\n \n         Ok(ImplSourceBuiltinData { nested })"}, {"sha": "b4ff8a222866a5ef787467690cbdf91ff85ed567", "filename": "src/test/ui/dyn-star/dont-unsize-coerce-dyn-star.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/741f3cf38331d4644b89d52f54c2683c17f54670/src%2Ftest%2Fui%2Fdyn-star%2Fdont-unsize-coerce-dyn-star.rs", "raw_url": "https://github.com/rust-lang/rust/raw/741f3cf38331d4644b89d52f54c2683c17f54670/src%2Ftest%2Fui%2Fdyn-star%2Fdont-unsize-coerce-dyn-star.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-star%2Fdont-unsize-coerce-dyn-star.rs?ref=741f3cf38331d4644b89d52f54c2683c17f54670", "patch": "@@ -0,0 +1,26 @@\n+// check-pass\n+\n+#![feature(dyn_star)]\n+#![allow(incomplete_features)]\n+\n+trait AddOne {\n+    fn add1(&mut self) -> usize;\n+}\n+\n+impl AddOne for usize {\n+    fn add1(&mut self) -> usize {\n+        *self += 1;\n+        *self\n+    }\n+}\n+\n+fn add_one(i: &mut (dyn* AddOne + '_)) -> usize {\n+    i.add1()\n+}\n+\n+fn main() {\n+    let mut x = 42usize as dyn* AddOne;\n+\n+    println!(\"{}\", add_one(&mut x));\n+    println!(\"{}\", add_one(&mut x));\n+}"}, {"sha": "1e8cafe1561e8a72e9d0803ba8260eef4a120070", "filename": "src/test/ui/dyn-star/unsize-into-ref-dyn-star.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/741f3cf38331d4644b89d52f54c2683c17f54670/src%2Ftest%2Fui%2Fdyn-star%2Funsize-into-ref-dyn-star.rs", "raw_url": "https://github.com/rust-lang/rust/raw/741f3cf38331d4644b89d52f54c2683c17f54670/src%2Ftest%2Fui%2Fdyn-star%2Funsize-into-ref-dyn-star.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-star%2Funsize-into-ref-dyn-star.rs?ref=741f3cf38331d4644b89d52f54c2683c17f54670", "patch": "@@ -0,0 +1,9 @@\n+#![feature(dyn_star)]\n+#![allow(incomplete_features)]\n+\n+use std::fmt::Debug;\n+\n+fn main() {\n+    let i = 42 as &dyn* Debug;\n+    //~^ ERROR non-primitive cast: `i32` as `&dyn* Debug`\n+}"}, {"sha": "f6444a60a4654212148447ddededdfa1e00c3cc6", "filename": "src/test/ui/dyn-star/unsize-into-ref-dyn-star.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/741f3cf38331d4644b89d52f54c2683c17f54670/src%2Ftest%2Fui%2Fdyn-star%2Funsize-into-ref-dyn-star.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/741f3cf38331d4644b89d52f54c2683c17f54670/src%2Ftest%2Fui%2Fdyn-star%2Funsize-into-ref-dyn-star.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-star%2Funsize-into-ref-dyn-star.stderr?ref=741f3cf38331d4644b89d52f54c2683c17f54670", "patch": "@@ -0,0 +1,9 @@\n+error[E0605]: non-primitive cast: `i32` as `&dyn* Debug`\n+  --> $DIR/unsize-into-ref-dyn-star.rs:7:13\n+   |\n+LL |     let i = 42 as &dyn* Debug;\n+   |             ^^^^^^^^^^^^^^^^^ an `as` expression can only be used to convert between primitive types or to coerce to a specific trait object\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0605`."}]}