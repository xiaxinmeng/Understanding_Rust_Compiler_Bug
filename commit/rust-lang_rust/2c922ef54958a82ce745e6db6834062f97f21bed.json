{"sha": "2c922ef54958a82ce745e6db6834062f97f21bed", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjOTIyZWY1NDk1OGE4MmNlNzQ1ZTZkYjY4MzQwNjJmOTdmMjFiZWQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-06T15:53:42Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-06T15:56:42Z"}, "message": "Start switching assists to a root database", "tree": {"sha": "603fdbcc8cd16151f4dffc8c92b3fd8752d9a2d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/603fdbcc8cd16151f4dffc8c92b3fd8752d9a2d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c922ef54958a82ce745e6db6834062f97f21bed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c922ef54958a82ce745e6db6834062f97f21bed", "html_url": "https://github.com/rust-lang/rust/commit/2c922ef54958a82ce745e6db6834062f97f21bed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c922ef54958a82ce745e6db6834062f97f21bed/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a173e31890c1eb03d9d4c123986baae4154cd4fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/a173e31890c1eb03d9d4c123986baae4154cd4fa", "html_url": "https://github.com/rust-lang/rust/commit/a173e31890c1eb03d9d4c123986baae4154cd4fa"}], "stats": {"total": 81, "additions": 42, "deletions": 39}, "files": [{"sha": "b6cac96fa34fd8747430077183d83f029d6e2935", "filename": "crates/ra_assists/src/assist_ctx.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2c922ef54958a82ce745e6db6834062f97f21bed/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c922ef54958a82ce745e6db6834062f97f21bed/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs?ref=2c922ef54958a82ce745e6db6834062f97f21bed", "patch": "@@ -1,8 +1,9 @@\n //! This module defines `AssistCtx` -- the API surface that is exposed to assists.\n use either::Either;\n use hir::{db::HirDatabase, InFile, SourceAnalyzer, SourceBinder};\n-use ra_db::FileRange;\n+use ra_db::{FileRange, SourceDatabase};\n use ra_fmt::{leading_indent, reindent};\n+use ra_ide_db::RootDatabase;\n use ra_syntax::{\n     algo::{self, find_covering_element, find_node_at_offset},\n     AstNode, SourceFile, SyntaxElement, SyntaxKind, SyntaxNode, SyntaxToken, TextRange, TextUnit,\n@@ -67,17 +68,24 @@ impl<'a, DB> Clone for AssistCtx<'a, DB> {\n     }\n }\n \n-impl<'a, DB: HirDatabase> AssistCtx<'a, DB> {\n-    pub(crate) fn with_ctx<F, T>(db: &DB, frange: FileRange, should_compute_edit: bool, f: F) -> T\n+impl<'a> AssistCtx<'a, RootDatabase> {\n+    pub(crate) fn with_ctx<F, T>(\n+        db: &RootDatabase,\n+        frange: FileRange,\n+        should_compute_edit: bool,\n+        f: F,\n+    ) -> T\n     where\n-        F: FnOnce(AssistCtx<DB>) -> T,\n+        F: FnOnce(AssistCtx<RootDatabase>) -> T,\n     {\n         let parse = db.parse(frange.file_id);\n \n         let ctx = AssistCtx { db, frange, source_file: parse.tree(), should_compute_edit };\n         f(ctx)\n     }\n+}\n \n+impl<'a, DB: HirDatabase> AssistCtx<'a, DB> {\n     pub(crate) fn add_assist(\n         self,\n         id: AssistId,"}, {"sha": "370b642255a43f7605c9fd65f4f893f858fd422e", "filename": "crates/ra_assists/src/doc_tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c922ef54958a82ce745e6db6834062f97f21bed/crates%2Fra_assists%2Fsrc%2Fdoc_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c922ef54958a82ce745e6db6834062f97f21bed/crates%2Fra_assists%2Fsrc%2Fdoc_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fdoc_tests.rs?ref=2c922ef54958a82ce745e6db6834062f97f21bed", "patch": "@@ -8,15 +8,15 @@ mod generated;\n use ra_db::{fixture::WithFixture, FileRange};\n use test_utils::{assert_eq_text, extract_range_or_offset};\n \n-use crate::test_db::TestDB;\n+use ra_ide_db::RootDatabase;\n \n fn check(assist_id: &str, before: &str, after: &str) {\n     // FIXME we cannot get the imports search functionality here yet, but still need to generate a test and a doc for an assist\n     if assist_id == \"auto_import\" {\n         return;\n     }\n     let (selection, before) = extract_range_or_offset(before);\n-    let (db, file_id) = TestDB::with_single_file(&before);\n+    let (db, file_id) = RootDatabase::with_single_file(&before);\n     let frange = FileRange { file_id, range: selection.into() };\n \n     let assist = crate::assists(&db, frange)"}, {"sha": "a2109b751261f745efd98ce455033d0e2f441c2e", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 28, "deletions": 33, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/2c922ef54958a82ce745e6db6834062f97f21bed/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c922ef54958a82ce745e6db6834062f97f21bed/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=2c922ef54958a82ce745e6db6834062f97f21bed", "patch": "@@ -14,7 +14,7 @@ mod test_db;\n pub mod ast_transform;\n \n use either::Either;\n-use hir::{db::HirDatabase, ModuleDef};\n+use hir::ModuleDef;\n use ra_db::FileRange;\n use ra_ide_db::{imports_locator::ImportsLocatorIde, RootDatabase};\n use ra_syntax::{TextRange, TextUnit};\n@@ -62,10 +62,7 @@ impl ResolvedAssist {\n ///\n /// Assists are returned in the \"unresolved\" state, that is only labels are\n /// returned, without actual edits.\n-pub fn applicable_assists<H>(db: &H, range: FileRange) -> Vec<AssistLabel>\n-where\n-    H: HirDatabase + 'static,\n-{\n+pub fn applicable_assists(db: &RootDatabase, range: FileRange) -> Vec<AssistLabel> {\n     AssistCtx::with_ctx(db, range, false, |ctx| {\n         assists::all()\n             .iter()\n@@ -126,10 +123,7 @@ pub fn assists_with_imports_locator(db: &RootDatabase, range: FileRange) -> Vec<\n ///\n /// Assists are returned in the \"resolved\" state, that is with edit fully\n /// computed.\n-pub fn assists<H>(db: &H, range: FileRange) -> Vec<ResolvedAssist>\n-where\n-    H: HirDatabase + 'static,\n-{\n+pub fn assists(db: &RootDatabase, range: FileRange) -> Vec<ResolvedAssist> {\n     AssistCtx::with_ctx(db, range, true, |ctx| {\n         let mut a = assists::all()\n             .iter()\n@@ -231,17 +225,18 @@ mod helpers {\n     use ra_syntax::TextRange;\n     use test_utils::{add_cursor, assert_eq_text, extract_offset, extract_range};\n \n-    use crate::{test_db::TestDB, Assist, AssistCtx, ImportsLocator};\n+    use crate::{Assist, AssistCtx, ImportsLocator};\n+    use ra_ide_db::RootDatabase;\n     use std::sync::Arc;\n \n     // FIXME remove the `ModuleDefId` reexport from `ra_hir` when this gets removed.\n     pub(crate) struct TestImportsLocator {\n-        db: Arc<TestDB>,\n+        db: Arc<RootDatabase>,\n         test_file_id: FileId,\n     }\n \n     impl TestImportsLocator {\n-        pub(crate) fn new(db: Arc<TestDB>, test_file_id: FileId) -> Self {\n+        pub(crate) fn new(db: Arc<RootDatabase>, test_file_id: FileId) -> Self {\n             TestImportsLocator { db, test_file_id }\n         }\n     }\n@@ -282,12 +277,12 @@ mod helpers {\n     }\n \n     pub(crate) fn check_assist(\n-        assist: fn(AssistCtx<TestDB>) -> Option<Assist>,\n+        assist: fn(AssistCtx<RootDatabase>) -> Option<Assist>,\n         before: &str,\n         after: &str,\n     ) {\n         let (before_cursor_pos, before) = extract_offset(before);\n-        let (db, file_id) = TestDB::with_single_file(&before);\n+        let (db, file_id) = RootDatabase::with_single_file(&before);\n         let frange =\n             FileRange { file_id, range: TextRange::offset_len(before_cursor_pos, 0.into()) };\n         let assist =\n@@ -310,13 +305,13 @@ mod helpers {\n     }\n \n     pub(crate) fn check_assist_with_imports_locator<F: ImportsLocator>(\n-        assist: fn(AssistCtx<TestDB>, &mut F) -> Option<Assist>,\n-        imports_locator_provider: fn(db: Arc<TestDB>, file_id: FileId) -> F,\n+        assist: fn(AssistCtx<RootDatabase>, &mut F) -> Option<Assist>,\n+        imports_locator_provider: fn(db: Arc<RootDatabase>, file_id: FileId) -> F,\n         before: &str,\n         after: &str,\n     ) {\n         let (before_cursor_pos, before) = extract_offset(before);\n-        let (db, file_id) = TestDB::with_single_file(&before);\n+        let (db, file_id) = RootDatabase::with_single_file(&before);\n         let db = Arc::new(db);\n         let mut imports_locator = imports_locator_provider(Arc::clone(&db), file_id);\n         let frange =\n@@ -342,12 +337,12 @@ mod helpers {\n     }\n \n     pub(crate) fn check_assist_range(\n-        assist: fn(AssistCtx<TestDB>) -> Option<Assist>,\n+        assist: fn(AssistCtx<RootDatabase>) -> Option<Assist>,\n         before: &str,\n         after: &str,\n     ) {\n         let (range, before) = extract_range(before);\n-        let (db, file_id) = TestDB::with_single_file(&before);\n+        let (db, file_id) = RootDatabase::with_single_file(&before);\n         let frange = FileRange { file_id, range };\n         let assist =\n             AssistCtx::with_ctx(&db, frange, true, assist).expect(\"code action is not applicable\");\n@@ -364,12 +359,12 @@ mod helpers {\n     }\n \n     pub(crate) fn check_assist_target(\n-        assist: fn(AssistCtx<TestDB>) -> Option<Assist>,\n+        assist: fn(AssistCtx<RootDatabase>) -> Option<Assist>,\n         before: &str,\n         target: &str,\n     ) {\n         let (before_cursor_pos, before) = extract_offset(before);\n-        let (db, file_id) = TestDB::with_single_file(&before);\n+        let (db, file_id) = RootDatabase::with_single_file(&before);\n         let frange =\n             FileRange { file_id, range: TextRange::offset_len(before_cursor_pos, 0.into()) };\n         let assist =\n@@ -384,12 +379,12 @@ mod helpers {\n     }\n \n     pub(crate) fn check_assist_range_target(\n-        assist: fn(AssistCtx<TestDB>) -> Option<Assist>,\n+        assist: fn(AssistCtx<RootDatabase>) -> Option<Assist>,\n         before: &str,\n         target: &str,\n     ) {\n         let (range, before) = extract_range(before);\n-        let (db, file_id) = TestDB::with_single_file(&before);\n+        let (db, file_id) = RootDatabase::with_single_file(&before);\n         let frange = FileRange { file_id, range };\n         let assist =\n             AssistCtx::with_ctx(&db, frange, true, assist).expect(\"code action is not applicable\");\n@@ -403,24 +398,24 @@ mod helpers {\n     }\n \n     pub(crate) fn check_assist_not_applicable(\n-        assist: fn(AssistCtx<TestDB>) -> Option<Assist>,\n+        assist: fn(AssistCtx<RootDatabase>) -> Option<Assist>,\n         before: &str,\n     ) {\n         let (before_cursor_pos, before) = extract_offset(before);\n-        let (db, file_id) = TestDB::with_single_file(&before);\n+        let (db, file_id) = RootDatabase::with_single_file(&before);\n         let frange =\n             FileRange { file_id, range: TextRange::offset_len(before_cursor_pos, 0.into()) };\n         let assist = AssistCtx::with_ctx(&db, frange, true, assist);\n         assert!(assist.is_none());\n     }\n \n     pub(crate) fn check_assist_with_imports_locator_not_applicable<F: ImportsLocator>(\n-        assist: fn(AssistCtx<TestDB>, &mut F) -> Option<Assist>,\n-        imports_locator_provider: fn(db: Arc<TestDB>, file_id: FileId) -> F,\n+        assist: fn(AssistCtx<RootDatabase>, &mut F) -> Option<Assist>,\n+        imports_locator_provider: fn(db: Arc<RootDatabase>, file_id: FileId) -> F,\n         before: &str,\n     ) {\n         let (before_cursor_pos, before) = extract_offset(before);\n-        let (db, file_id) = TestDB::with_single_file(&before);\n+        let (db, file_id) = RootDatabase::with_single_file(&before);\n         let db = Arc::new(db);\n         let mut imports_locator = imports_locator_provider(Arc::clone(&db), file_id);\n         let frange =\n@@ -431,11 +426,11 @@ mod helpers {\n     }\n \n     pub(crate) fn check_assist_range_not_applicable(\n-        assist: fn(AssistCtx<TestDB>) -> Option<Assist>,\n+        assist: fn(AssistCtx<RootDatabase>) -> Option<Assist>,\n         before: &str,\n     ) {\n         let (range, before) = extract_range(before);\n-        let (db, file_id) = TestDB::with_single_file(&before);\n+        let (db, file_id) = RootDatabase::with_single_file(&before);\n         let frange = FileRange { file_id, range };\n         let assist = AssistCtx::with_ctx(&db, frange, true, assist);\n         assert!(assist.is_none());\n@@ -448,13 +443,13 @@ mod tests {\n     use ra_syntax::TextRange;\n     use test_utils::{extract_offset, extract_range};\n \n-    use crate::test_db::TestDB;\n+    use ra_ide_db::RootDatabase;\n \n     #[test]\n     fn assist_order_field_struct() {\n         let before = \"struct Foo { <|>bar: u32 }\";\n         let (before_cursor_pos, before) = extract_offset(before);\n-        let (db, file_id) = TestDB::with_single_file(&before);\n+        let (db, file_id) = RootDatabase::with_single_file(&before);\n         let frange =\n             FileRange { file_id, range: TextRange::offset_len(before_cursor_pos, 0.into()) };\n         let assists = super::assists(&db, frange);\n@@ -478,7 +473,7 @@ mod tests {\n             }\n         }\";\n         let (range, before) = extract_range(before);\n-        let (db, file_id) = TestDB::with_single_file(&before);\n+        let (db, file_id) = RootDatabase::with_single_file(&before);\n         let frange = FileRange { file_id, range };\n         let assists = super::assists(&db, frange);\n         let mut assists = assists.iter();"}]}