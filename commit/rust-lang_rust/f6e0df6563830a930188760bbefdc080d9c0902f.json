{"sha": "f6e0df6563830a930188760bbefdc080d9c0902f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2ZTBkZjY1NjM4MzBhOTMwMTg4NzYwYmJlZmRjMDgwZDljMDkwMmY=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-02-07T23:05:27Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-02-08T03:04:37Z"}, "message": "implement BaseIter for TreeMap", "tree": {"sha": "f091b64c250c2ecda1fd5c9c758ed164f4fc516d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f091b64c250c2ecda1fd5c9c758ed164f4fc516d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f6e0df6563830a930188760bbefdc080d9c0902f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f6e0df6563830a930188760bbefdc080d9c0902f", "html_url": "https://github.com/rust-lang/rust/commit/f6e0df6563830a930188760bbefdc080d9c0902f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f6e0df6563830a930188760bbefdc080d9c0902f/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83270d2d792fb519481f6df87f23d73c767ec5f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/83270d2d792fb519481f6df87f23d73c767ec5f9", "html_url": "https://github.com/rust-lang/rust/commit/83270d2d792fb519481f6df87f23d73c767ec5f9"}], "stats": {"total": 47, "additions": 29, "deletions": 18}, "files": [{"sha": "e79025a795559e4839f2416aca73940a1338b107", "filename": "src/libstd/treemap.rs", "status": "modified", "additions": 29, "deletions": 18, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/f6e0df6563830a930188760bbefdc080d9c0902f/src%2Flibstd%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6e0df6563830a930188760bbefdc080d9c0902f/src%2Flibstd%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftreemap.rs?ref=f6e0df6563830a930188760bbefdc080d9c0902f", "patch": "@@ -103,6 +103,14 @@ impl <K: Ord, V> TreeMap<K, V>: Ord {\n     }\n }\n \n+impl <K: Ord, V> TreeMap<K, V>: iter::BaseIter<(&K, &V)> {\n+    /// Visit all key-value pairs in order\n+    pure fn each(&self, f: fn(&(&self/K, &self/V)) -> bool) {\n+        each(&self.root, f)\n+    }\n+    pure fn size_hint(&self) -> Option<uint> { Some(self.len()) }\n+}\n+\n impl <K: Ord, V> TreeMap<K, V>: Container {\n     /// Return the number of elements in the map\n     pure fn len(&self) -> uint { self.length }\n@@ -126,10 +134,10 @@ impl <K: Ord, V> TreeMap<K, V>: Map<K, V> {\n     }\n \n     /// Visit all keys in order\n-    pure fn each_key(&self, f: fn(&K) -> bool) { self.each(|k, _| f(k)) }\n+    pure fn each_key(&self, f: fn(&K) -> bool) { self.each(|&(k, _)| f(k)) }\n \n     /// Visit all values in order\n-    pure fn each_value(&self, f: fn(&V) -> bool) { self.each(|_, v| f(v)) }\n+    pure fn each_value(&self, f: fn(&V) -> bool) { self.each(|&(_, v)| f(v)) }\n \n     /// Return the value corresponding to the key in the map\n     pure fn find(&self, key: &K) -> Option<&self/V> {\n@@ -172,22 +180,19 @@ impl <K: Ord, V> TreeMap<K, V> {\n     /// Create an empty TreeMap\n     static pure fn new() -> TreeMap<K, V> { TreeMap{root: None, length: 0} }\n \n-    /// Visit all key-value pairs in order\n-    pure fn each(&self, f: fn(&K, &V) -> bool) { each(&self.root, f) }\n-\n     /// Visit all key-value pairs in reverse order\n-    pure fn each_reverse(&self, f: fn(&K, &V) -> bool) {\n+    pure fn each_reverse(&self, f: fn(&(&self/K, &self/V)) -> bool) {\n         each_reverse(&self.root, f);\n     }\n \n     /// Visit all keys in reverse order\n     pure fn each_key_reverse(&self, f: fn(&K) -> bool) {\n-        self.each_reverse(|k, _| f(k))\n+        self.each_reverse(|&(k, _)| f(k))\n     }\n \n     /// Visit all values in reverse order\n     pure fn each_value_reverse(&self, f: fn(&V) -> bool) {\n-        self.each_reverse(|_, v| f(v))\n+        self.each_reverse(|&(_, v)| f(v))\n     }\n \n     /// Get a lazy iterator over the key-value pairs in the map.\n@@ -549,20 +554,26 @@ impl <K: Ord, V> TreeNode<K, V> {\n     }\n }\n \n-pure fn each<K: Ord, V>(node: &Option<~TreeNode<K, V>>,\n-                        f: fn(&K, &V) -> bool) {\n-    do node.map |x| {\n+pure fn each<K: Ord, V>(node: &r/Option<~TreeNode<K, V>>,\n+                        f: fn(&(&r/K, &r/V)) -> bool) {\n+    match *node {\n+      Some(ref x) => {\n         each(&x.left, f);\n-        if f(&x.key, &x.value) { each(&x.right, f) }\n-    };\n+        if f(&(&x.key, &x.value)) { each(&x.right, f) }\n+      }\n+      None => ()\n+    }\n }\n \n-pure fn each_reverse<K: Ord, V>(node: &Option<~TreeNode<K, V>>,\n-                                f: fn(&K, &V) -> bool) {\n-    do node.map |x| {\n+pure fn each_reverse<K: Ord, V>(node: &r/Option<~TreeNode<K, V>>,\n+                                f: fn(&(&r/K, &r/V)) -> bool) {\n+    match *node {\n+      Some(ref x) => {\n         each_reverse(&x.right, f);\n-        if f(&x.key, &x.value) { each_reverse(&x.left, f) }\n-    };\n+        if f(&(&x.key, &x.value)) { each_reverse(&x.left, f) }\n+      }\n+      None => ()\n+    }\n }\n \n // Remove left horizontal link by rotating right"}]}