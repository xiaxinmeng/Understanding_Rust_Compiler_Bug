{"sha": "e085192729c3f276e52eeb7a7e7cfaa39cc5c09c", "node_id": "C_kwDOAAsO6NoAKGUwODUxOTI3MjljM2YyNzZlNTJlZWI3YTdlN2NmYWEzOWNjNWMwOWM", "commit": {"author": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2023-03-10T13:09:17Z"}, "committer": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2023-04-03T07:30:31Z"}, "message": "allow some out of tree archs", "tree": {"sha": "d0b855461c8efdfaab8603d192464313d236ab90", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0b855461c8efdfaab8603d192464313d236ab90"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e085192729c3f276e52eeb7a7e7cfaa39cc5c09c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEMycKYjxLY0eb13b7zXazX3c0dp4FAmQqgJcACgkQzXazX3c0\ndp7nLQ//dYiY/QJwEnHyItfDi2ohp4xp71VivPEpKnr3/AgJrq0eAS0/HOZeZmh8\nQBm4cbcdUCn61+YojF84QKVmOlRZvANERqXmx7hTvgFuP/bz1d52SfDKrhoMQbuK\nMRnj1Vqtt9P9g/wbkLkZW1Zf7w5KR5X8mjdAF+7Wh/SO+7sufZU7t0HieqFV3fbz\npDFJo1PdCzjiV/jJTJb9+Zz289gj1GMMK7EaGNjUUK3KjIxeaI1IUB7107t32ewc\nlEuUyE/2drI4Rn1QJLTWA9QDbvqBGjHtA8VRucLPGA7QijZbadJ734u1z0qDCpEU\nl9hdHsArLJLqEpaJKkGEP8FcvzXzOMyar0jEbhneHy4g8eIMN4wFMmSXvDC2PnTi\n6fF8VVDo6e6ngQdagMDbjDd4WdU15Z04wGiYjxujwgvL/G7yKaI/laxH/gc5QwMD\nT5eQC3Otak9h/w8arQTSjwuo6ct1Z+8FgRfumlaq9//RN4ddMGmzYV47WovSLvSE\nckGZ+ojRDcINlsWT3Ndan5ytTJOOOPg2jREU0Tn9J4brtzhDZJ+8WfwbESeyslzw\npwhMXl7/M08iprwPP56XvYTmb0NZfVrOgJJEeFhyBNgA21+1b6r+bMQ9MdnndmAZ\nhsRO12F0M5Q5LfN0xV07wGadSAqXrUQNeT0qVLm3ZYDP998r92w=\n=2Z5/\n-----END PGP SIGNATURE-----", "payload": "tree d0b855461c8efdfaab8603d192464313d236ab90\nparent bc991de2336df5e6c29d50fb448778c725f9d9cf\nauthor Pietro Albini <pietro.albini@ferrous-systems.com> 1678453757 +0100\ncommitter Pietro Albini <pietro.albini@ferrous-systems.com> 1680507031 +0200\n\nallow some out of tree archs\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e085192729c3f276e52eeb7a7e7cfaa39cc5c09c", "html_url": "https://github.com/rust-lang/rust/commit/e085192729c3f276e52eeb7a7e7cfaa39cc5c09c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e085192729c3f276e52eeb7a7e7cfaa39cc5c09c/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc991de2336df5e6c29d50fb448778c725f9d9cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc991de2336df5e6c29d50fb448778c725f9d9cf", "html_url": "https://github.com/rust-lang/rust/commit/bc991de2336df5e6c29d50fb448778c725f9d9cf"}], "stats": {"total": 15, "additions": 14, "deletions": 1}, "files": [{"sha": "dbc78dd521b7289f9797919ab45d3b0110a187cc", "filename": "src/tools/compiletest/src/header/cfg.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e085192729c3f276e52eeb7a7e7cfaa39cc5c09c/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e085192729c3f276e52eeb7a7e7cfaa39cc5c09c/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Fcfg.rs?ref=e085192729c3f276e52eeb7a7e7cfaa39cc5c09c", "patch": "@@ -1,6 +1,8 @@\n use crate::common::{CompareMode, Config, Debugger};\n use std::collections::HashSet;\n \n+const EXTRA_ARCHS: &[&str] = &[\"asmjs\", \"spirv\"];\n+\n /// Parses a name-value directive which contains config-specific information, e.g., `ignore-x86`\n /// or `normalize-stderr-32bit`.\n pub(super) fn parse_cfg_name_directive<'a>(\n@@ -99,7 +101,7 @@ pub(super) fn parse_cfg_name_directive<'a>(\n     }\n     condition! {\n         name: &target_cfg.arch,\n-        allowed_names: &target_cfgs.all_archs,\n+        allowed_names: ContainsEither { a: &target_cfgs.all_archs, b: &EXTRA_ARCHS },\n         message: \"when the architecture is {name}\"\n     }\n     condition! {\n@@ -257,3 +259,14 @@ impl<T: CustomContains> CustomContains for ContainsPrefixed<T> {\n         }\n     }\n }\n+\n+struct ContainsEither<'a, A: CustomContains, B: CustomContains> {\n+    a: &'a A,\n+    b: &'a B,\n+}\n+\n+impl<A: CustomContains, B: CustomContains> CustomContains for ContainsEither<'_, A, B> {\n+    fn custom_contains(&self, item: &str) -> bool {\n+        self.a.custom_contains(item) || self.b.custom_contains(item)\n+    }\n+}"}]}