{"sha": "6046be42ab911cf2eddd41cffaa0467098bb2317", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwNDZiZTQyYWI5MTFjZjJlZGRkNDFjZmZhYTA0NjcwOThiYjIzMTc=", "commit": {"author": {"name": "mark", "email": "markm@cs.wisc.edu", "date": "2019-01-14T21:50:33Z"}, "committer": {"name": "mark", "email": "markm@cs.wisc.edu", "date": "2019-01-15T18:48:44Z"}, "message": "fix nested matchers with ?", "tree": {"sha": "672ab07e0dd2e13ca74425ada18ad77a2cf523ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/672ab07e0dd2e13ca74425ada18ad77a2cf523ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6046be42ab911cf2eddd41cffaa0467098bb2317", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6046be42ab911cf2eddd41cffaa0467098bb2317", "html_url": "https://github.com/rust-lang/rust/commit/6046be42ab911cf2eddd41cffaa0467098bb2317", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6046be42ab911cf2eddd41cffaa0467098bb2317/comments", "author": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14ea6e50c1534a23cb51375552c14568db9ee130", "url": "https://api.github.com/repos/rust-lang/rust/commits/14ea6e50c1534a23cb51375552c14568db9ee130", "html_url": "https://github.com/rust-lang/rust/commit/14ea6e50c1534a23cb51375552c14568db9ee130"}], "stats": {"total": 14, "additions": 10, "deletions": 4}, "files": [{"sha": "9a129e7e8fcd8c7df0efa8bd733c674d79af8f39", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6046be42ab911cf2eddd41cffaa0467098bb2317/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6046be42ab911cf2eddd41cffaa0467098bb2317/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=6046be42ab911cf2eddd41cffaa0467098bb2317", "patch": "@@ -435,7 +435,8 @@ fn check_lhs_no_empty_seq(sess: &ParseSess, tts: &[quoted::TokenTree]) -> bool {\n                     match *seq_tt {\n                         TokenTree::MetaVarDecl(_, _, id) => id.name == \"vis\",\n                         TokenTree::Sequence(_, ref sub_seq) =>\n-                            sub_seq.op == quoted::KleeneOp::ZeroOrMore,\n+                            sub_seq.op == quoted::KleeneOp::ZeroOrMore\n+                            || sub_seq.op == quoted::KleeneOp::ZeroOrOne,\n                         _ => false,\n                     }\n                 }) {\n@@ -543,7 +544,10 @@ impl FirstSets {\n                         }\n \n                         // Reverse scan: Sequence comes before `first`.\n-                        if subfirst.maybe_empty || seq_rep.op == quoted::KleeneOp::ZeroOrMore {\n+                        if subfirst.maybe_empty\n+                           || seq_rep.op == quoted::KleeneOp::ZeroOrMore\n+                           || seq_rep.op == quoted::KleeneOp::ZeroOrOne\n+                        {\n                             // If sequence is potentially empty, then\n                             // union them (preserving first emptiness).\n                             first.add_all(&TokenSet { maybe_empty: true, ..subfirst });\n@@ -591,8 +595,10 @@ impl FirstSets {\n \n                             assert!(first.maybe_empty);\n                             first.add_all(subfirst);\n-                            if subfirst.maybe_empty ||\n-                               seq_rep.op == quoted::KleeneOp::ZeroOrMore {\n+                            if subfirst.maybe_empty\n+                               || seq_rep.op == quoted::KleeneOp::ZeroOrMore\n+                               || seq_rep.op == quoted::KleeneOp::ZeroOrOne\n+                            {\n                                 // continue scanning for more first\n                                 // tokens, but also make sure we\n                                 // restore empty-tracking state"}]}