{"sha": "b276b65f46465cffe207b4b732e6ab4642d47558", "node_id": "C_kwDOAAsO6NoAKGIyNzZiNjVmNDY0NjVjZmZlMjA3YjRiNzMyZTZhYjQ2NDJkNDc1NTg", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-05-14T09:25:53Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-05-14T09:38:25Z"}, "message": "Forbid nested opaque types to reference HRTB from opaque types.", "tree": {"sha": "d22152f4259e56e4f6b910705a8b8287ac284f8f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d22152f4259e56e4f6b910705a8b8287ac284f8f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b276b65f46465cffe207b4b732e6ab4642d47558", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b276b65f46465cffe207b4b732e6ab4642d47558", "html_url": "https://github.com/rust-lang/rust/commit/b276b65f46465cffe207b4b732e6ab4642d47558", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b276b65f46465cffe207b4b732e6ab4642d47558/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c31879922e6ec8200eee6c144073eafcc4a73e38", "url": "https://api.github.com/repos/rust-lang/rust/commits/c31879922e6ec8200eee6c144073eafcc4a73e38", "html_url": "https://github.com/rust-lang/rust/commit/c31879922e6ec8200eee6c144073eafcc4a73e38"}], "stats": {"total": 187, "additions": 89, "deletions": 98}, "files": [{"sha": "700d7c3bfb6fe1231cb0d6eb991f2cd097f98687", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b276b65f46465cffe207b4b732e6ab4642d47558/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b276b65f46465cffe207b4b732e6ab4642d47558/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=b276b65f46465cffe207b4b732e6ab4642d47558", "patch": "@@ -1025,6 +1025,20 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                         }\n                         self.uninsert_lifetime_on_error(lifetime, def.unwrap());\n                     }\n+                    if let hir::Node::Item(hir::Item {\n+                        kind: hir::ItemKind::OpaqueTy { .. }, ..\n+                    }) = self.tcx.hir().get(parent_id)\n+                    {\n+                        if !self.trait_definition_only {\n+                            let mut err = self.tcx.sess.struct_span_err(\n+                                lifetime.span,\n+                                \"higher kinded lifetime bounds on nested opaque types are not supported yet\",\n+                            );\n+                            err.span_note(self.tcx.def_span(def_id), \"lifetime declared here\");\n+                            err.emit();\n+                        }\n+                        self.uninsert_lifetime_on_error(lifetime, def.unwrap());\n+                    }\n                 }\n \n                 // We want to start our early-bound indices at the end of the parent scope,"}, {"sha": "8d7a1d56f83202cee5a315af4e8ee43944839ba3", "filename": "src/test/ui/impl-trait/issues/issue-54895.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b276b65f46465cffe207b4b732e6ab4642d47558/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-54895.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b276b65f46465cffe207b4b732e6ab4642d47558/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-54895.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-54895.rs?ref=b276b65f46465cffe207b4b732e6ab4642d47558", "patch": "@@ -1,5 +1,3 @@\n-// check-pass\n-\n trait Trait<'a> {\n     type Out;\n     fn call(&'a self) -> Self::Out;\n@@ -15,6 +13,7 @@ impl<'a> Trait<'a> for X {\n }\n \n fn f() -> impl for<'a> Trait<'a, Out = impl Sized + 'a> {\n+    //~^ ERROR higher kinded lifetime bounds on nested opaque types are not supported yet\n     X(())\n }\n "}, {"sha": "7d22f027a6daf74c6322bbdf62ba4f50d84fe45a", "filename": "src/test/ui/impl-trait/issues/issue-54895.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b276b65f46465cffe207b4b732e6ab4642d47558/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-54895.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b276b65f46465cffe207b4b732e6ab4642d47558/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-54895.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-54895.stderr?ref=b276b65f46465cffe207b4b732e6ab4642d47558", "patch": "@@ -0,0 +1,14 @@\n+error: higher kinded lifetime bounds on nested opaque types are not supported yet\n+  --> $DIR/issue-54895.rs:15:53\n+   |\n+LL | fn f() -> impl for<'a> Trait<'a, Out = impl Sized + 'a> {\n+   |                                                     ^^\n+   |\n+note: lifetime declared here\n+  --> $DIR/issue-54895.rs:15:20\n+   |\n+LL | fn f() -> impl for<'a> Trait<'a, Out = impl Sized + 'a> {\n+   |                    ^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "17fbe046e3ac939f5e2051ade599f925c32265e1", "filename": "src/test/ui/impl-trait/issues/issue-67830.nll.stderr", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c31879922e6ec8200eee6c144073eafcc4a73e38/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-67830.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c31879922e6ec8200eee6c144073eafcc4a73e38/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-67830.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-67830.nll.stderr?ref=c31879922e6ec8200eee6c144073eafcc4a73e38", "patch": "@@ -1,20 +0,0 @@\n-error: implementation of `FnOnce` is not general enough\n-  --> $DIR/issue-67830.rs:23:5\n-   |\n-LL |     Wrap(|a| Some(a).into_iter())\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ implementation of `FnOnce` is not general enough\n-   |\n-   = note: closure with signature `fn(&'2 A) -> std::option::IntoIter<&A>` must implement `FnOnce<(&'1 A,)>`, for any lifetime `'1`...\n-   = note: ...but it actually implements `FnOnce<(&'2 A,)>`, for some specific lifetime `'2`\n-\n-error: implementation of `FnOnce` is not general enough\n-  --> $DIR/issue-67830.rs:23:5\n-   |\n-LL |     Wrap(|a| Some(a).into_iter())\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ implementation of `FnOnce` is not general enough\n-   |\n-   = note: closure with signature `fn(&'2 A) -> std::option::IntoIter<&A>` must implement `FnOnce<(&'1 A,)>`, for any lifetime `'1`...\n-   = note: ...but it actually implements `FnOnce<(&'2 A,)>`, for some specific lifetime `'2`\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "92f7e005dbf0c26ea7479e9807d62f3310a0dadf", "filename": "src/test/ui/impl-trait/issues/issue-67830.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b276b65f46465cffe207b4b732e6ab4642d47558/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-67830.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b276b65f46465cffe207b4b732e6ab4642d47558/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-67830.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-67830.rs?ref=b276b65f46465cffe207b4b732e6ab4642d47558", "patch": "@@ -19,7 +19,7 @@ where\n \n struct A;\n fn test() -> impl for<'a> MyFn<&'a A, Output=impl Iterator + 'a> {\n-    //~^ ERROR implementation of `FnOnce` is not general enough\n+    //~^ ERROR higher kinded lifetime bounds on nested opaque types are not supported yet\n     Wrap(|a| Some(a).into_iter())\n }\n "}, {"sha": "d3ea8cb0377c7503bec82d7dc7f30acba420658c", "filename": "src/test/ui/impl-trait/issues/issue-67830.stderr", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b276b65f46465cffe207b4b732e6ab4642d47558/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-67830.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b276b65f46465cffe207b4b732e6ab4642d47558/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-67830.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-67830.stderr?ref=b276b65f46465cffe207b4b732e6ab4642d47558", "patch": "@@ -1,11 +1,14 @@\n-error: implementation of `FnOnce` is not general enough\n-  --> $DIR/issue-67830.rs:21:14\n+error: higher kinded lifetime bounds on nested opaque types are not supported yet\n+  --> $DIR/issue-67830.rs:21:62\n    |\n LL | fn test() -> impl for<'a> MyFn<&'a A, Output=impl Iterator + 'a> {\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ implementation of `FnOnce` is not general enough\n+   |                                                              ^^\n    |\n-   = note: closure with signature `fn(&'2 A) -> std::option::IntoIter<&A>` must implement `FnOnce<(&'1 A,)>`, for any lifetime `'1`...\n-   = note: ...but it actually implements `FnOnce<(&'2 A,)>`, for some specific lifetime `'2`\n+note: lifetime declared here\n+  --> $DIR/issue-67830.rs:21:23\n+   |\n+LL | fn test() -> impl for<'a> MyFn<&'a A, Output=impl Iterator + 'a> {\n+   |                       ^^\n \n error: aborting due to previous error\n "}, {"sha": "66cffa9e36c0ddcea71577acfe208186ba921fe5", "filename": "src/test/ui/impl-trait/issues/issue-88236-2.nll.stderr", "status": "removed", "additions": 0, "deletions": 55, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/c31879922e6ec8200eee6c144073eafcc4a73e38/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-88236-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c31879922e6ec8200eee6c144073eafcc4a73e38/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-88236-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-88236-2.nll.stderr?ref=c31879922e6ec8200eee6c144073eafcc4a73e38", "patch": "@@ -1,55 +0,0 @@\n-error: implementation of `Hrtb` is not general enough\n-  --> $DIR/issue-88236-2.rs:17:5\n-   |\n-LL |     &()\n-   |     ^^^ implementation of `Hrtb` is not general enough\n-   |\n-   = note: `Hrtb<'0>` would have to be implemented for the type `&()`, for any lifetime `'0`...\n-   = note: ...but `Hrtb<'1>` is actually implemented for the type `&'1 ()`, for some specific lifetime `'1`\n-\n-error: implementation of `Hrtb` is not general enough\n-  --> $DIR/issue-88236-2.rs:17:5\n-   |\n-LL |     &()\n-   |     ^^^ implementation of `Hrtb` is not general enough\n-   |\n-   = note: `Hrtb<'0>` would have to be implemented for the type `&()`, for any lifetime `'0`...\n-   = note: ...but `Hrtb<'1>` is actually implemented for the type `&'1 ()`, for some specific lifetime `'1`\n-\n-error: lifetime may not live long enough\n-  --> $DIR/issue-88236-2.rs:20:5\n-   |\n-LL | fn make_bad_impl<'b>(x: &'b ()) -> impl for<'a> Hrtb<'a, Assoc = impl Send + 'a> {\n-   |                  -- lifetime `'b` defined here\n-LL |     x\n-   |     ^ returning this value requires that `'b` must outlive `'static`\n-   |\n-help: to declare that the `impl Trait` captures data from argument `x`, you can add an explicit `'b` lifetime bound\n-   |\n-LL | fn make_bad_impl<'b>(x: &'b ()) -> impl for<'a> Hrtb<'a, Assoc = impl Send + 'a> + 'b {\n-   |                                                                                  ++++\n-help: to declare that the `impl Trait` captures data from argument `x`, you can add an explicit `'b` lifetime bound\n-   |\n-LL | fn make_bad_impl<'b>(x: &'b ()) -> impl for<'a> Hrtb<'a, Assoc = impl Send + 'a + 'b> {\n-   |                                                                                 ++++\n-\n-error: implementation of `Hrtb` is not general enough\n-  --> $DIR/issue-88236-2.rs:20:5\n-   |\n-LL |     x\n-   |     ^ implementation of `Hrtb` is not general enough\n-   |\n-   = note: `Hrtb<'0>` would have to be implemented for the type `&()`, for any lifetime `'0`...\n-   = note: ...but `Hrtb<'1>` is actually implemented for the type `&'1 ()`, for some specific lifetime `'1`\n-\n-error: implementation of `Hrtb` is not general enough\n-  --> $DIR/issue-88236-2.rs:20:5\n-   |\n-LL |     x\n-   |     ^ implementation of `Hrtb` is not general enough\n-   |\n-   = note: `Hrtb<'0>` would have to be implemented for the type `&()`, for any lifetime `'0`...\n-   = note: ...but `Hrtb<'1>` is actually implemented for the type `&'1 ()`, for some specific lifetime `'1`\n-\n-error: aborting due to 5 previous errors\n-"}, {"sha": "fde8a6704cc45708566a58ef8275386c11fe1d29", "filename": "src/test/ui/impl-trait/issues/issue-88236-2.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b276b65f46465cffe207b4b732e6ab4642d47558/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-88236-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b276b65f46465cffe207b4b732e6ab4642d47558/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-88236-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-88236-2.rs?ref=b276b65f46465cffe207b4b732e6ab4642d47558", "patch": "@@ -13,11 +13,16 @@ impl<'a> Hrtb<'a> for &'a () {\n }\n \n fn make_impl() -> impl for<'a> Hrtb<'a, Assoc = impl Send + 'a> {}\n+//~^ ERROR higher kinded lifetime bounds on nested opaque types are not supported yet\n+\n fn make_weird_impl<'b>(x: &'b ()) -> impl for<'a> Hrtb<'a, Assoc = impl Send + 'a> {\n-    &() //~^ ERROR implementation of `Hrtb` is not general enough\n+    //~^ ERROR higher kinded lifetime bounds on nested opaque types are not supported yet\n+    &()\n }\n+\n fn make_bad_impl<'b>(x: &'b ()) -> impl for<'a> Hrtb<'a, Assoc = impl Send + 'a> {\n-    x //~^ ERROR implementation of `Hrtb` is not general enough\n+    //~^ ERROR higher kinded lifetime bounds on nested opaque types are not supported yet\n+    x\n }\n \n fn main() {}"}, {"sha": "8605d07abe9430ac58136cd6f79e2c392c4727ac", "filename": "src/test/ui/impl-trait/issues/issue-88236-2.stderr", "status": "modified", "additions": 29, "deletions": 11, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/b276b65f46465cffe207b4b732e6ab4642d47558/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-88236-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b276b65f46465cffe207b4b732e6ab4642d47558/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-88236-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-88236-2.stderr?ref=b276b65f46465cffe207b4b732e6ab4642d47558", "patch": "@@ -1,20 +1,38 @@\n-error: implementation of `Hrtb` is not general enough\n-  --> $DIR/issue-88236-2.rs:16:38\n+error: higher kinded lifetime bounds on nested opaque types are not supported yet\n+  --> $DIR/issue-88236-2.rs:15:61\n+   |\n+LL | fn make_impl() -> impl for<'a> Hrtb<'a, Assoc = impl Send + 'a> {}\n+   |                                                             ^^\n+   |\n+note: lifetime declared here\n+  --> $DIR/issue-88236-2.rs:15:28\n+   |\n+LL | fn make_impl() -> impl for<'a> Hrtb<'a, Assoc = impl Send + 'a> {}\n+   |                            ^^\n+\n+error: higher kinded lifetime bounds on nested opaque types are not supported yet\n+  --> $DIR/issue-88236-2.rs:18:80\n    |\n LL | fn make_weird_impl<'b>(x: &'b ()) -> impl for<'a> Hrtb<'a, Assoc = impl Send + 'a> {\n-   |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ implementation of `Hrtb` is not general enough\n+   |                                                                                ^^\n    |\n-   = note: `Hrtb<'0>` would have to be implemented for the type `&()`, for any lifetime `'0`...\n-   = note: ...but `Hrtb<'1>` is actually implemented for the type `&'1 ()`, for some specific lifetime `'1`\n+note: lifetime declared here\n+  --> $DIR/issue-88236-2.rs:18:47\n+   |\n+LL | fn make_weird_impl<'b>(x: &'b ()) -> impl for<'a> Hrtb<'a, Assoc = impl Send + 'a> {\n+   |                                               ^^\n \n-error: implementation of `Hrtb` is not general enough\n-  --> $DIR/issue-88236-2.rs:19:36\n+error: higher kinded lifetime bounds on nested opaque types are not supported yet\n+  --> $DIR/issue-88236-2.rs:23:78\n    |\n LL | fn make_bad_impl<'b>(x: &'b ()) -> impl for<'a> Hrtb<'a, Assoc = impl Send + 'a> {\n-   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ implementation of `Hrtb` is not general enough\n+   |                                                                              ^^\n    |\n-   = note: `Hrtb<'1>` would have to be implemented for the type `&()`, for any lifetime `'1`...\n-   = note: ...but `Hrtb<'_>` is actually implemented for the type `&()`\n+note: lifetime declared here\n+  --> $DIR/issue-88236-2.rs:23:45\n+   |\n+LL | fn make_bad_impl<'b>(x: &'b ()) -> impl for<'a> Hrtb<'a, Assoc = impl Send + 'a> {\n+   |                                             ^^\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 3 previous errors\n "}, {"sha": "36d12417354a2a4509aeaa1233294c57ad391d58", "filename": "src/test/ui/impl-trait/issues/issue-88236.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b276b65f46465cffe207b4b732e6ab4642d47558/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-88236.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b276b65f46465cffe207b4b732e6ab4642d47558/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-88236.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-88236.rs?ref=b276b65f46465cffe207b4b732e6ab4642d47558", "patch": "@@ -1,5 +1,3 @@\n-// check-pass\n-\n // this used to cause stack overflows\n \n trait Hrtb<'a> {\n@@ -15,5 +13,6 @@ impl<'a> Hrtb<'a> for &'a () {\n }\n \n fn make_impl() -> impl for<'a> Hrtb<'a, Assoc = impl Send + 'a> {}\n+//~^ ERROR higher kinded lifetime bounds on nested opaque types are not supported yet\n \n fn main() {}"}, {"sha": "7a4cc57b0881a6065e14fd0d02001996dcf97a92", "filename": "src/test/ui/impl-trait/issues/issue-88236.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b276b65f46465cffe207b4b732e6ab4642d47558/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-88236.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b276b65f46465cffe207b4b732e6ab4642d47558/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-88236.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-88236.stderr?ref=b276b65f46465cffe207b4b732e6ab4642d47558", "patch": "@@ -0,0 +1,14 @@\n+error: higher kinded lifetime bounds on nested opaque types are not supported yet\n+  --> $DIR/issue-88236.rs:15:61\n+   |\n+LL | fn make_impl() -> impl for<'a> Hrtb<'a, Assoc = impl Send + 'a> {}\n+   |                                                             ^^\n+   |\n+note: lifetime declared here\n+  --> $DIR/issue-88236.rs:15:28\n+   |\n+LL | fn make_impl() -> impl for<'a> Hrtb<'a, Assoc = impl Send + 'a> {}\n+   |                            ^^\n+\n+error: aborting due to previous error\n+"}]}