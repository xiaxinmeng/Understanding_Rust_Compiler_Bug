{"sha": "65a5ea581d547c36e98b4a3c5a99671ad5d4c117", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1YTVlYTU4MWQ1NDdjMzZlOThiNGEzYzVhOTk2NzFhZDVkNGMxMTc=", "commit": {"author": {"name": "Phil Ellison", "email": "phil.j.ellison@gmail.com", "date": "2021-01-01T21:40:11Z"}, "committer": {"name": "Phil Ellison", "email": "phil.j.ellison@gmail.com", "date": "2021-01-23T07:40:25Z"}, "message": "Update tests to register the required standard library types", "tree": {"sha": "844d804814648344af7ec2a2fe1a334001eeef81", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/844d804814648344af7ec2a2fe1a334001eeef81"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65a5ea581d547c36e98b4a3c5a99671ad5d4c117", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65a5ea581d547c36e98b4a3c5a99671ad5d4c117", "html_url": "https://github.com/rust-lang/rust/commit/65a5ea581d547c36e98b4a3c5a99671ad5d4c117", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65a5ea581d547c36e98b4a3c5a99671ad5d4c117/comments", "author": {"login": "theotherphil", "id": 1974256, "node_id": "MDQ6VXNlcjE5NzQyNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1974256?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theotherphil", "html_url": "https://github.com/theotherphil", "followers_url": "https://api.github.com/users/theotherphil/followers", "following_url": "https://api.github.com/users/theotherphil/following{/other_user}", "gists_url": "https://api.github.com/users/theotherphil/gists{/gist_id}", "starred_url": "https://api.github.com/users/theotherphil/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theotherphil/subscriptions", "organizations_url": "https://api.github.com/users/theotherphil/orgs", "repos_url": "https://api.github.com/users/theotherphil/repos", "events_url": "https://api.github.com/users/theotherphil/events{/privacy}", "received_events_url": "https://api.github.com/users/theotherphil/received_events", "type": "User", "site_admin": false}, "committer": {"login": "theotherphil", "id": 1974256, "node_id": "MDQ6VXNlcjE5NzQyNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1974256?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theotherphil", "html_url": "https://github.com/theotherphil", "followers_url": "https://api.github.com/users/theotherphil/followers", "following_url": "https://api.github.com/users/theotherphil/following{/other_user}", "gists_url": "https://api.github.com/users/theotherphil/gists{/gist_id}", "starred_url": "https://api.github.com/users/theotherphil/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theotherphil/subscriptions", "organizations_url": "https://api.github.com/users/theotherphil/orgs", "repos_url": "https://api.github.com/users/theotherphil/repos", "events_url": "https://api.github.com/users/theotherphil/events{/privacy}", "received_events_url": "https://api.github.com/users/theotherphil/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c691f51f9974572e1e56c0e368b973ed3e58365", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c691f51f9974572e1e56c0e368b973ed3e58365", "html_url": "https://github.com/rust-lang/rust/commit/7c691f51f9974572e1e56c0e368b973ed3e58365"}], "stats": {"total": 64, "additions": 48, "deletions": 16}, "files": [{"sha": "323c5f96308e003edd4b17803301a56eca5b2749", "filename": "crates/hir_ty/src/diagnostics.rs", "status": "modified", "additions": 38, "deletions": 10, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/65a5ea581d547c36e98b4a3c5a99671ad5d4c117/crates%2Fhir_ty%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65a5ea581d547c36e98b4a3c5a99671ad5d4c117/crates%2Fhir_ty%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics.rs?ref=65a5ea581d547c36e98b4a3c5a99671ad5d4c117", "patch": "@@ -670,21 +670,49 @@ fn foo() { break; }\n         );\n     }\n \n+    // Register the required standard library types to make the tests work\n+    fn add_filter_map_with_find_next_boilerplate(body: &str) -> String {\n+        let prefix = r#\"\n+        //- /main.rs crate:main deps:core\n+        use core::iter::Iterator;\n+        use core::option::Option::{self, Some, None};\n+        \"#;\n+        let suffix = r#\"\n+        //- /core/lib.rs crate:core\n+        pub mod option {\n+            pub enum Option<T> { Some(T), None }\n+        }\n+        pub mod iter {\n+            pub trait Iterator {\n+                type Item;\n+                fn filter_map<B, F>(self, f: F) -> FilterMap where F: FnMut(Self::Item) -> Option<B> { FilterMap }\n+                fn next(&mut self) -> Option<Self::Item>;\n+            }\n+            pub struct FilterMap {}\n+            impl Iterator for FilterMap {\n+                type Item = i32;\n+                fn next(&mut self) -> i32 { 7 }\n+            }\n+        }\n+        \"#;\n+        format!(\"{}{}{}\", prefix, body, suffix)\n+    }\n+\n     #[test]\n-    fn replace_filter_map_next_with_find_map() {\n-        check_diagnostics(\n+    fn replace_filter_map_next_with_find_map2() {\n+        check_diagnostics(&add_filter_map_with_find_next_boilerplate(\n             r#\"\n             fn foo() {\n                 let m = [1, 2, 3].iter().filter_map(|x| if *x == 2 { Some (4) } else { None }).next();\n                       //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ replace filter_map(..).next() with find_map(..)\n             }\n-            \"#,\n-        );\n+        \"#,\n+        ));\n     }\n \n     #[test]\n     fn replace_filter_map_next_with_find_map_no_diagnostic_without_next() {\n-        check_diagnostics(\n+        check_diagnostics(&add_filter_map_with_find_next_boilerplate(\n             r#\"\n             fn foo() {\n                 let m = [1, 2, 3]\n@@ -693,12 +721,12 @@ fn foo() { break; }\n                     .len();\n             }\n             \"#,\n-        );\n+        ));\n     }\n \n     #[test]\n     fn replace_filter_map_next_with_find_map_no_diagnostic_with_intervening_methods() {\n-        check_diagnostics(\n+        check_diagnostics(&add_filter_map_with_find_next_boilerplate(\n             r#\"\n             fn foo() {\n                 let m = [1, 2, 3]\n@@ -708,12 +736,12 @@ fn foo() { break; }\n                     .len();\n             }\n             \"#,\n-        );\n+        ));\n     }\n \n     #[test]\n     fn replace_filter_map_next_with_find_map_no_diagnostic_if_not_in_chain() {\n-        check_diagnostics(\n+        check_diagnostics(&add_filter_map_with_find_next_boilerplate(\n             r#\"\n             fn foo() {\n                 let m = [1, 2, 3]\n@@ -722,6 +750,6 @@ fn foo() { break; }\n                 let n = m.next();\n             }\n             \"#,\n-        );\n+        ));\n     }\n }"}, {"sha": "d740b7265554d194d84ed76f6885f6341eab27e3", "filename": "crates/hir_ty/src/diagnostics/expr.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/65a5ea581d547c36e98b4a3c5a99671ad5d4c117/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65a5ea581d547c36e98b4a3c5a99671ad5d4c117/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs?ref=65a5ea581d547c36e98b4a3c5a99671ad5d4c117", "patch": "@@ -2,7 +2,9 @@\n \n use std::sync::Arc;\n \n-use hir_def::{AdtId, AssocItemId, DefWithBodyId, expr::Statement, path::path, resolver::HasResolver};\n+use hir_def::{\n+    expr::Statement, path::path, resolver::HasResolver, AdtId, AssocItemId, DefWithBodyId,\n+};\n use hir_expand::{diagnostics::DiagnosticSink, name};\n use rustc_hash::FxHashSet;\n use syntax::{ast, AstPtr};\n@@ -163,11 +165,13 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n             None => return,\n         };\n         let iterator_trait_items = &db.trait_data(iterator_trait_id).items;\n-        let filter_map_function_id = match iterator_trait_items.iter().find(|item| item.0 == name![filter_map]) {\n-            Some((_, AssocItemId::FunctionId(id))) => id,\n-            _ => return,\n-        };\n-        let next_function_id = match iterator_trait_items.iter().find(|item| item.0 == name![next]) {\n+        let filter_map_function_id =\n+            match iterator_trait_items.iter().find(|item| item.0 == name![filter_map]) {\n+                Some((_, AssocItemId::FunctionId(id))) => id,\n+                _ => return,\n+            };\n+        let next_function_id = match iterator_trait_items.iter().find(|item| item.0 == name![next])\n+        {\n             Some((_, AssocItemId::FunctionId(id))) => id,\n             _ => return,\n         };"}]}