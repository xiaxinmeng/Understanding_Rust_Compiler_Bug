{"sha": "f34fadd126ce9ffcd5a79c3ad5d06ad58c6fd8a8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzNGZhZGQxMjZjZTlmZmNkNWE3OWMzYWQ1ZDA2YWQ1OGM2ZmQ4YTg=", "commit": {"author": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2013-07-19T00:34:42Z"}, "committer": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2013-07-30T17:19:25Z"}, "message": "Implement select() for new runtime pipes.", "tree": {"sha": "e8c622fc282ac880f718375d235feb7090424bff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8c622fc282ac880f718375d235feb7090424bff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f34fadd126ce9ffcd5a79c3ad5d06ad58c6fd8a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f34fadd126ce9ffcd5a79c3ad5d06ad58c6fd8a8", "html_url": "https://github.com/rust-lang/rust/commit/f34fadd126ce9ffcd5a79c3ad5d06ad58c6fd8a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f34fadd126ce9ffcd5a79c3ad5d06ad58c6fd8a8/comments", "author": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7326bc879ed6d9def8a128a2586a6f1708b5010c", "url": "https://api.github.com/repos/rust-lang/rust/commits/7326bc879ed6d9def8a128a2586a6f1708b5010c", "html_url": "https://github.com/rust-lang/rust/commit/7326bc879ed6d9def8a128a2586a6f1708b5010c"}], "stats": {"total": 358, "additions": 310, "deletions": 48}, "files": [{"sha": "87bf5a23b93c0331174f4a22f8aaf86fce1eeaa6", "filename": "src/libstd/rt/comm.rs", "status": "modified", "additions": 134, "deletions": 32, "changes": 166, "blob_url": "https://github.com/rust-lang/rust/blob/f34fadd126ce9ffcd5a79c3ad5d06ad58c6fd8a8/src%2Flibstd%2Frt%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34fadd126ce9ffcd5a79c3ad5d06ad58c6fd8a8/src%2Flibstd%2Frt%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fcomm.rs?ref=f34fadd126ce9ffcd5a79c3ad5d06ad58c6fd8a8", "patch": "@@ -12,13 +12,13 @@\n \n use option::*;\n use cast;\n-use util;\n use ops::Drop;\n use rt::kill::BlockedTask;\n use kinds::Send;\n use rt::sched::Scheduler;\n use rt::local::Local;\n-use unstable::atomics::{AtomicUint, AtomicOption, Acquire, SeqCst};\n+use rt::select::{Select, SelectPort};\n+use unstable::atomics::{AtomicUint, AtomicOption, Acquire, Release, SeqCst};\n use unstable::sync::UnsafeAtomicRcBox;\n use util::Void;\n use comm::{GenericChan, GenericSmartChan, GenericPort, Peekable};\n@@ -76,6 +76,7 @@ pub fn oneshot<T: Send>() -> (PortOne<T>, ChanOne<T>) {\n }\n \n impl<T> ChanOne<T> {\n+    #[inline]\n     fn packet(&self) -> *mut Packet<T> {\n         unsafe {\n             let p: *mut ~Packet<T> = cast::transmute(&self.void_packet);\n@@ -141,7 +142,6 @@ impl<T> ChanOne<T> {\n     }\n }\n \n-\n impl<T> PortOne<T> {\n     fn packet(&self) -> *mut Packet<T> {\n         unsafe {\n@@ -162,46 +162,115 @@ impl<T> PortOne<T> {\n \n     pub fn try_recv(self) -> Option<T> {\n         let mut this = self;\n-        let packet = this.packet();\n \n         // Optimistic check. If data was sent already, we don't even need to block.\n         // No release barrier needed here; we're not handing off our task pointer yet.\n-        if unsafe { (*packet).state.load(Acquire) } != STATE_ONE {\n+        if !this.optimistic_check() {\n             // No data available yet.\n             // Switch to the scheduler to put the ~Task into the Packet state.\n             let sched = Local::take::<Scheduler>();\n             do sched.deschedule_running_task_and_then |sched, task| {\n-                unsafe {\n-                    // Atomically swap the task pointer into the Packet state, issuing\n-                    // an acquire barrier to prevent reordering of the subsequent read\n-                    // of the payload. Also issues a release barrier to prevent\n-                    // reordering of any previous writes to the task structure.\n-                    let task_as_state = task.cast_to_uint();\n-                    let oldstate = (*packet).state.swap(task_as_state, SeqCst);\n-                    match oldstate {\n-                        STATE_BOTH => {\n-                            // Data has not been sent. Now we're blocked.\n-                            rtdebug!(\"non-rendezvous recv\");\n-                            sched.metrics.non_rendezvous_recvs += 1;\n-                        }\n-                        STATE_ONE => {\n-                            rtdebug!(\"rendezvous recv\");\n-                            sched.metrics.rendezvous_recvs += 1;\n-\n-                            // Channel is closed. Switch back and check the data.\n-                            // NB: We have to drop back into the scheduler event loop here\n-                            // instead of switching immediately back or we could end up\n-                            // triggering infinite recursion on the scheduler's stack.\n-                            let recvr = BlockedTask::cast_from_uint(task_as_state);\n-                            sched.enqueue_blocked_task(recvr);\n+                this.block_on(sched, task);\n+            }\n+        }\n+\n+        // Task resumes.\n+        this.recv_ready()\n+    }\n+}\n+\n+impl<T> Select for PortOne<T> {\n+    #[inline]\n+    fn optimistic_check(&mut self) -> bool {\n+        unsafe { (*self.packet()).state.load(Acquire) == STATE_ONE }\n+    }\n+\n+    fn block_on(&mut self, sched: &mut Scheduler, task: BlockedTask) -> bool {\n+        unsafe {\n+            // Atomically swap the task pointer into the Packet state, issuing\n+            // an acquire barrier to prevent reordering of the subsequent read\n+            // of the payload. Also issues a release barrier to prevent\n+            // reordering of any previous writes to the task structure.\n+            let task_as_state = task.cast_to_uint();\n+            let oldstate = (*self.packet()).state.swap(task_as_state, SeqCst);\n+            match oldstate {\n+                STATE_BOTH => {\n+                    // Data has not been sent. Now we're blocked.\n+                    rtdebug!(\"non-rendezvous recv\");\n+                    sched.metrics.non_rendezvous_recvs += 1;\n+                    false\n+                }\n+                STATE_ONE => {\n+                    // Re-record that we are the only owner of the packet.\n+                    // Release barrier needed in case the task gets reawoken\n+                    // on a different core (this is analogous to writing a\n+                    // payload; a barrier in enqueueing the task protects it).\n+                    // NB(#8132). This *must* occur before the enqueue below.\n+                    // FIXME(#6842, #8130) This is usually only needed for the\n+                    // assertion in recv_ready, except in the case of select().\n+                    // This won't actually ever have cacheline contention, but\n+                    // maybe should be optimized out with a cfg(test) anyway?\n+                    (*self.packet()).state.store(STATE_ONE, Release);\n+\n+                    rtdebug!(\"rendezvous recv\");\n+                    sched.metrics.rendezvous_recvs += 1;\n+\n+                    // Channel is closed. Switch back and check the data.\n+                    // NB: We have to drop back into the scheduler event loop here\n+                    // instead of switching immediately back or we could end up\n+                    // triggering infinite recursion on the scheduler's stack.\n+                    let recvr = BlockedTask::cast_from_uint(task_as_state);\n+                    sched.enqueue_blocked_task(recvr);\n+                    true\n+                }\n+                _ => rtabort!(\"can't block_on; a task is already blocked\")\n+            }\n+        }\n+    }\n+\n+    // This is the only select trait function that's not also used in recv.\n+    fn unblock_from(&mut self) -> bool {\n+        let packet = self.packet();\n+        unsafe {\n+            // In case the data is available, the acquire barrier here matches\n+            // the release barrier the sender used to release the payload.\n+            match (*packet).state.load(Acquire) {\n+                // Impossible. We removed STATE_BOTH when blocking on it, and\n+                // no self-respecting sender would put it back.\n+                STATE_BOTH    => rtabort!(\"refcount already 2 in unblock_from\"),\n+                // Here, a sender already tried to wake us up. Perhaps they\n+                // even succeeded! Data is available.\n+                STATE_ONE     => true,\n+                // Still registered as blocked. Need to \"unblock\" the pointer.\n+                task_as_state => {\n+                    // In the window between the load and the CAS, a sender\n+                    // might take the pointer and set the refcount to ONE. If\n+                    // that happens, we shouldn't clobber that with BOTH!\n+                    // Acquire barrier again for the same reason as above.\n+                    match (*packet).state.compare_and_swap(task_as_state, STATE_BOTH,\n+                                                           Acquire) {\n+                        STATE_BOTH => rtabort!(\"refcount became 2 in unblock_from\"),\n+                        STATE_ONE  => true, // Lost the race. Data available.\n+                        same_ptr   => {\n+                            // We successfully unblocked our task pointer.\n+                            assert!(task_as_state == same_ptr);\n+                            let handle = BlockedTask::cast_from_uint(task_as_state);\n+                            // Because we are already awake, the handle we\n+                            // gave to this port shall already be empty.\n+                            handle.assert_already_awake();\n+                            false\n                         }\n-                        _ => util::unreachable()\n                     }\n                 }\n             }\n         }\n+    }\n+}\n \n-        // Task resumes.\n+impl<T> SelectPort<T> for PortOne<T> {\n+    fn recv_ready(self) -> Option<T> {\n+        let mut this = self;\n+        let packet = this.packet();\n \n         // No further memory barrier is needed here to access the\n         // payload. Some scenarios:\n@@ -213,8 +282,11 @@ impl<T> PortOne<T> {\n         // 3) We encountered STATE_BOTH above and blocked, but the receiving task (this task)\n         //    is pinned to some other scheduler, so the sending task had to give us to\n         //    a different scheduler for resuming. That send synchronized memory.\n-\n         unsafe {\n+            // See corresponding store() above in block_on for rationale.\n+            // FIXME(#8130) This can happen only in test builds.\n+            assert!((*packet).state.load(Acquire) == STATE_ONE);\n+\n             let payload = (*packet).payload.take();\n \n             // The sender has closed up shop. Drop the packet.\n@@ -234,7 +306,7 @@ impl<T> Peekable<T> for PortOne<T> {\n             match oldstate {\n                 STATE_BOTH => false,\n                 STATE_ONE => (*packet).payload.is_some(),\n-                _ => util::unreachable()\n+                _ => rtabort!(\"peeked on a blocked task\")\n             }\n         }\n     }\n@@ -368,6 +440,36 @@ impl<T> Peekable<T> for Port<T> {\n     }\n }\n \n+impl<T> Select for Port<T> {\n+    #[inline]\n+    fn optimistic_check(&mut self) -> bool {\n+        do self.next.with_mut_ref |pone| { pone.optimistic_check() }\n+    }\n+\n+    #[inline]\n+    fn block_on(&mut self, sched: &mut Scheduler, task: BlockedTask) -> bool {\n+        let task = Cell::new(task);\n+        do self.next.with_mut_ref |pone| { pone.block_on(sched, task.take()) }\n+    }\n+\n+    #[inline]\n+    fn unblock_from(&mut self) -> bool {\n+        do self.next.with_mut_ref |pone| { pone.unblock_from() }\n+    }\n+}\n+\n+impl<T> SelectPort<(T, Port<T>)> for Port<T> {\n+    fn recv_ready(self) -> Option<(T, Port<T>)> {\n+        match self.next.take().recv_ready() {\n+            Some(StreamPayload { val, next }) => {\n+                self.next.put_back(next);\n+                Some((val, self))\n+            }\n+            None => None\n+        }\n+    }\n+}\n+\n pub struct SharedChan<T> {\n     // Just like Chan, but a shared AtomicOption instead of Cell\n     priv next: UnsafeAtomicRcBox<AtomicOption<StreamChanOne<T>>>"}, {"sha": "f7f11a402b810bbbe5bcf2c96b17c860357e93d6", "filename": "src/libstd/rt/kill.rs", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/f34fadd126ce9ffcd5a79c3ad5d06ad58c6fd8a8/src%2Flibstd%2Frt%2Fkill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34fadd126ce9ffcd5a79c3ad5d06ad58c6fd8a8/src%2Flibstd%2Frt%2Fkill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fkill.rs?ref=f34fadd126ce9ffcd5a79c3ad5d06ad58c6fd8a8", "patch": "@@ -106,8 +106,14 @@ impl Drop for KillFlag {\n // blocked task handle. So unblocking a task must restore that spare.\n unsafe fn revive_task_ptr(task_ptr: uint, spare_flag: Option<KillFlagHandle>) -> ~Task {\n     let mut task: ~Task = cast::transmute(task_ptr);\n-    rtassert!(task.death.spare_kill_flag.is_none());\n-    task.death.spare_kill_flag = spare_flag;\n+    if task.death.spare_kill_flag.is_none() {\n+        task.death.spare_kill_flag = spare_flag;\n+    } else {\n+        // A task's spare kill flag is not used for blocking in one case:\n+        // when an unkillable task blocks on select. In this case, a separate\n+        // one was created, which we now discard.\n+        rtassert!(task.death.unkillable > 0);\n+    }\n     task\n }\n \n@@ -119,7 +125,7 @@ impl BlockedTask {\n             Killable(flag_arc) => {\n                 let flag = unsafe { &mut **flag_arc.get() };\n                 match flag.swap(KILL_RUNNING, SeqCst) {\n-                    KILL_RUNNING => rtabort!(\"tried to wake an already-running task\"),\n+                    KILL_RUNNING => None, // woken from select(), perhaps\n                     KILL_KILLED  => None, // a killer stole it already\n                     task_ptr     =>\n                         Some(unsafe { revive_task_ptr(task_ptr, Some(flag_arc)) })\n@@ -162,6 +168,27 @@ impl BlockedTask {\n         }\n     }\n \n+    /// Converts one blocked task handle to a list of many handles to the same.\n+    pub fn make_selectable(self, num_handles: uint) -> ~[BlockedTask] {\n+        let handles = match self {\n+            Unkillable(task) => {\n+                let flag = unsafe { KillFlag(AtomicUint::new(cast::transmute(task))) };\n+                UnsafeAtomicRcBox::newN(flag, num_handles)\n+            }\n+            Killable(flag_arc) => flag_arc.cloneN(num_handles),\n+        };\n+        // Even if the task was unkillable before, we use 'Killable' because\n+        // multiple pipes will have handles. It does not really mean killable.\n+        handles.consume_iter().transform(|x| Killable(x)).collect()\n+    }\n+\n+    // This assertion has two flavours because the wake involves an atomic op.\n+    // In the faster version, destructors will fail dramatically instead.\n+    #[inline] #[cfg(not(test))]\n+    pub fn assert_already_awake(self) { }\n+    #[inline] #[cfg(test)]\n+    pub fn assert_already_awake(self) { assert!(self.wake().is_none()); }\n+\n     /// Convert to an unsafe uint value. Useful for storing in a pipe's state flag.\n     #[inline]\n     pub unsafe fn cast_to_uint(self) -> uint {"}, {"sha": "2ca7d01da49a21522665291d626a10bc87d5b733", "filename": "src/libstd/rt/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f34fadd126ce9ffcd5a79c3ad5d06ad58c6fd8a8/src%2Flibstd%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34fadd126ce9ffcd5a79c3ad5d06ad58c6fd8a8/src%2Flibstd%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fmod.rs?ref=f34fadd126ce9ffcd5a79c3ad5d06ad58c6fd8a8", "patch": "@@ -142,6 +142,9 @@ pub mod tube;\n /// Simple reimplementation of core::comm\n pub mod comm;\n \n+/// Routines for select()ing on pipes.\n+pub mod select;\n+\n // FIXME #5248 shouldn't be pub\n /// The runtime needs to be able to put a pointer into thread-local storage.\n pub mod local_ptr;"}, {"sha": "130084fd1fc2a3225a102933c01d259e28e28fa1", "filename": "src/libstd/rt/select.rs", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/f34fadd126ce9ffcd5a79c3ad5d06ad58c6fd8a8/src%2Flibstd%2Frt%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34fadd126ce9ffcd5a79c3ad5d06ad58c6fd8a8/src%2Flibstd%2Frt%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fselect.rs?ref=f34fadd126ce9ffcd5a79c3ad5d06ad58c6fd8a8", "patch": "@@ -0,0 +1,102 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use option::*;\n+// use either::{Either, Left, Right};\n+use rt::kill::BlockedTask;\n+use rt::sched::Scheduler;\n+use rt::local::Local;\n+\n+/// Trait for message-passing primitives that can be select()ed on.\n+pub trait Select {\n+    // Returns true if data was available.\n+    fn optimistic_check(&mut self) -> bool;\n+    // Returns true if data was available. If so, shall also wake() the task.\n+    fn block_on(&mut self, &mut Scheduler, BlockedTask) -> bool;\n+    // Returns true if data was available.\n+    fn unblock_from(&mut self) -> bool;\n+}\n+\n+/// Trait for message-passing primitives that can use the select2() convenience wrapper.\n+// (This is separate from the above trait to enable heterogeneous lists of ports\n+// that implement Select on different types to use select().)\n+pub trait SelectPort<T> : Select {\n+    fn recv_ready(self) -> Option<T>;\n+}\n+\n+/// Receive a message from any one of many ports at once.\n+pub fn select<A: Select>(ports: &mut [A]) -> uint {\n+    if ports.is_empty() {\n+        fail!(\"can't select on an empty list\");\n+    }\n+\n+    for ports.mut_iter().enumerate().advance |(index, port)| {\n+        if port.optimistic_check() {\n+            return index;\n+        }\n+    }\n+\n+    // If one of the ports already contains data when we go to block on it, we\n+    // don't bother enqueueing on the rest of them, so we shouldn't bother\n+    // unblocking from it either. This is just for efficiency, not correctness.\n+    // (If not, we need to unblock from all of them. Length is a placeholder.)\n+    let mut ready_index = ports.len();\n+\n+    let sched = Local::take::<Scheduler>();\n+    do sched.deschedule_running_task_and_then |sched, task| {\n+        let task_handles = task.make_selectable(ports.len());\n+\n+        for ports.mut_iter().zip(task_handles.consume_iter()).enumerate().advance\n+                |(index, (port, task_handle))| {\n+            // If one of the ports has data by now, it will wake the handle.\n+            if port.block_on(sched, task_handle) {\n+                ready_index = index;\n+                break;\n+            }\n+        }\n+    }\n+\n+    // Task resumes. Now unblock ourselves from all the ports we blocked on.\n+    // If the success index wasn't reset, 'take' will just take all of them.\n+    // Iterate in reverse so the 'earliest' index that's ready gets returned.\n+    for ports.mut_slice(0, ready_index).mut_rev_iter().enumerate().advance |(index, port)| {\n+        if port.unblock_from() {\n+            ready_index = index;\n+        }\n+    }\n+\n+    assert!(ready_index < ports.len());\n+    return ready_index;\n+}\n+\n+/* FIXME(#5121, #7914) This all should be legal, but rust is not clever enough yet.\n+\n+impl <'self> Select for &'self mut Select {\n+    fn optimistic_check(&mut self) -> bool { self.optimistic_check() }\n+    fn block_on(&mut self, sched: &mut Scheduler, task: BlockedTask) -> bool {\n+        self.block_on(sched, task)\n+    }\n+    fn unblock_from(&mut self) -> bool { self.unblock_from() }\n+}\n+\n+pub fn select2<TA, A: SelectPort<TA>, TB, B: SelectPort<TB>>(mut a: A, mut b: B)\n+        -> Either<(Option<TA>, B), (A, Option<TB>)> {\n+    let result = {\n+        let mut ports = [&mut a as &mut Select, &mut b as &mut Select];\n+        select(ports)\n+    };\n+    match result {\n+        0 => Left ((a.recv_ready(), b)),\n+        1 => Right((a, b.recv_ready())),\n+        x => fail!(\"impossible case in select2: %?\", x)\n+    }\n+}\n+\n+*/"}, {"sha": "41a179c35b324dd927ec05b2c063415faba1b6a1", "filename": "src/libstd/unstable/sync.rs", "status": "modified", "additions": 41, "deletions": 13, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/f34fadd126ce9ffcd5a79c3ad5d06ad58c6fd8a8/src%2Flibstd%2Funstable%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34fadd126ce9ffcd5a79c3ad5d06ad58c6fd8a8/src%2Flibstd%2Funstable%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fsync.rs?ref=f34fadd126ce9ffcd5a79c3ad5d06ad58c6fd8a8", "patch": "@@ -22,6 +22,7 @@ use unstable::finally::Finally;\n use ops::Drop;\n use clone::Clone;\n use kinds::Send;\n+use vec;\n \n /// An atomically reference counted pointer.\n ///\n@@ -41,26 +42,53 @@ struct AtomicRcBoxData<T> {\n     data: Option<T>,\n }\n \n+unsafe fn new_inner<T: Send>(data: T, refcount: uint) -> *mut libc::c_void {\n+    let data = ~AtomicRcBoxData { count: AtomicUint::new(refcount),\n+                                  unwrapper: AtomicOption::empty(),\n+                                  data: Some(data) };\n+    cast::transmute(data)\n+}\n+\n impl<T: Send> UnsafeAtomicRcBox<T> {\n     pub fn new(data: T) -> UnsafeAtomicRcBox<T> {\n-        unsafe {\n-            let data = ~AtomicRcBoxData { count: AtomicUint::new(1),\n-                                          unwrapper: AtomicOption::empty(),\n-                                          data: Some(data) };\n-            let ptr = cast::transmute(data);\n-            return UnsafeAtomicRcBox { data: ptr };\n-        }\n+        unsafe { UnsafeAtomicRcBox { data: new_inner(data, 1) } }\n     }\n \n     /// As new(), but returns an extra pre-cloned handle.\n     pub fn new2(data: T) -> (UnsafeAtomicRcBox<T>, UnsafeAtomicRcBox<T>) {\n         unsafe {\n-            let data = ~AtomicRcBoxData { count: AtomicUint::new(2),\n-                                          unwrapper: AtomicOption::empty(),\n-                                          data: Some(data) };\n-            let ptr = cast::transmute(data);\n-            return (UnsafeAtomicRcBox { data: ptr },\n-                    UnsafeAtomicRcBox { data: ptr });\n+            let ptr = new_inner(data, 2);\n+            (UnsafeAtomicRcBox { data: ptr }, UnsafeAtomicRcBox { data: ptr })\n+        }\n+    }\n+\n+    /// As new(), but returns a vector of as many pre-cloned handles as requested.\n+    pub fn newN(data: T, num_handles: uint) -> ~[UnsafeAtomicRcBox<T>] {\n+        unsafe {\n+            if num_handles == 0 {\n+                ~[] // need to free data here\n+            } else {\n+                let ptr = new_inner(data, num_handles);\n+                vec::from_fn(num_handles, |_| UnsafeAtomicRcBox { data: ptr })\n+            }\n+        }\n+    }\n+\n+    /// As newN(), but from an already-existing handle. Uses one xadd.\n+    pub fn cloneN(self, num_handles: uint) -> ~[UnsafeAtomicRcBox<T>] {\n+        if num_handles == 0 {\n+            ~[] // The \"num_handles - 1\" trick (below) fails in the 0 case.\n+        } else {\n+            unsafe {\n+                let mut data: ~AtomicRcBoxData<T> = cast::transmute(self.data);\n+                // Minus one because we are recycling the given handle's refcount.\n+                let old_count = data.count.fetch_add(num_handles - 1, Acquire);\n+                // let old_count = data.count.fetch_add(num_handles, Acquire);\n+                assert!(old_count >= 1);\n+                let ptr = cast::transmute(data);\n+                cast::forget(self); // Don't run the destructor on this handle.\n+                vec::from_fn(num_handles, |_| UnsafeAtomicRcBox { data: ptr })\n+            }\n         }\n     }\n "}]}