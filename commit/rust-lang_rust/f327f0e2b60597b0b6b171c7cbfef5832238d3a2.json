{"sha": "f327f0e2b60597b0b6b171c7cbfef5832238d3a2", "node_id": "C_kwDOAAsO6NoAKGYzMjdmMGUyYjYwNTk3YjBiNmIxNzFjN2NiZmVmNTgzMjIzOGQzYTI", "commit": {"author": {"name": "dswij", "email": "dswijj@gmail.com", "date": "2021-12-15T04:08:13Z"}, "committer": {"name": "Dharma Saputra Wijaya", "email": "dswijj@gmail.com", "date": "2021-12-25T13:54:35Z"}, "message": "Refactor `enum_variants`", "tree": {"sha": "77534f19bea529a00b23cea61b782c7b5c4798cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77534f19bea529a00b23cea61b782c7b5c4798cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f327f0e2b60597b0b6b171c7cbfef5832238d3a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f327f0e2b60597b0b6b171c7cbfef5832238d3a2", "html_url": "https://github.com/rust-lang/rust/commit/f327f0e2b60597b0b6b171c7cbfef5832238d3a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f327f0e2b60597b0b6b171c7cbfef5832238d3a2/comments", "author": {"login": "dswij", "id": 44697459, "node_id": "MDQ6VXNlcjQ0Njk3NDU5", "avatar_url": "https://avatars.githubusercontent.com/u/44697459?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dswij", "html_url": "https://github.com/dswij", "followers_url": "https://api.github.com/users/dswij/followers", "following_url": "https://api.github.com/users/dswij/following{/other_user}", "gists_url": "https://api.github.com/users/dswij/gists{/gist_id}", "starred_url": "https://api.github.com/users/dswij/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dswij/subscriptions", "organizations_url": "https://api.github.com/users/dswij/orgs", "repos_url": "https://api.github.com/users/dswij/repos", "events_url": "https://api.github.com/users/dswij/events{/privacy}", "received_events_url": "https://api.github.com/users/dswij/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dswij", "id": 44697459, "node_id": "MDQ6VXNlcjQ0Njk3NDU5", "avatar_url": "https://avatars.githubusercontent.com/u/44697459?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dswij", "html_url": "https://github.com/dswij", "followers_url": "https://api.github.com/users/dswij/followers", "following_url": "https://api.github.com/users/dswij/following{/other_user}", "gists_url": "https://api.github.com/users/dswij/gists{/gist_id}", "starred_url": "https://api.github.com/users/dswij/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dswij/subscriptions", "organizations_url": "https://api.github.com/users/dswij/orgs", "repos_url": "https://api.github.com/users/dswij/repos", "events_url": "https://api.github.com/users/dswij/events{/privacy}", "received_events_url": "https://api.github.com/users/dswij/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "547efad9454123b5d37e627eb8643666aa3ddf3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/547efad9454123b5d37e627eb8643666aa3ddf3b", "html_url": "https://github.com/rust-lang/rust/commit/547efad9454123b5d37e627eb8643666aa3ddf3b"}], "stats": {"total": 77, "additions": 40, "deletions": 37}, "files": [{"sha": "75cc20a5cda1d51e9d338bf13844a9c961e7637d", "filename": "clippy_lints/src/enum_variants.rs", "status": "modified", "additions": 40, "deletions": 37, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/f327f0e2b60597b0b6b171c7cbfef5832238d3a2/clippy_lints%2Fsrc%2Fenum_variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f327f0e2b60597b0b6b171c7cbfef5832238d3a2/clippy_lints%2Fsrc%2Fenum_variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_variants.rs?ref=f327f0e2b60597b0b6b171c7cbfef5832238d3a2", "patch": "@@ -3,7 +3,7 @@\n use clippy_utils::diagnostics::{span_lint, span_lint_and_help};\n use clippy_utils::source::is_present_in_source;\n use clippy_utils::str_utils::{self, count_match_end, count_match_start};\n-use rustc_hir::{EnumDef, Item, ItemKind};\n+use rustc_hir::{EnumDef, Item, ItemKind, Variant};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::Span;\n@@ -115,50 +115,54 @@ impl EnumVariantNames {\n }\n \n impl_lint_pass!(EnumVariantNames => [\n-    ENUM_VARIANT_NAMES,\n-    MODULE_NAME_REPETITIONS,\n-    MODULE_INCEPTION\n+                ENUM_VARIANT_NAMES,\n+                MODULE_NAME_REPETITIONS,\n+                MODULE_INCEPTION\n ]);\n \n-fn check_variant(\n-    cx: &LateContext<'_>,\n-    threshold: u64,\n-    def: &EnumDef<'_>,\n-    item_name: &str,\n-    item_name_chars: usize,\n-    span: Span,\n-) {\n+fn check_enum_start(cx: &LateContext<'_>, item_name: &str, variant: &Variant<'_>) {\n+    let name = variant.ident.name.as_str();\n+    let item_name_chars = item_name.chars().count();\n+\n+    if count_match_start(item_name, &name).char_count == item_name_chars\n+        && name.chars().nth(item_name_chars).map_or(false, |c| !c.is_lowercase())\n+        && name.chars().nth(item_name_chars + 1).map_or(false, |c| !c.is_numeric())\n+    {\n+        span_lint(\n+            cx,\n+            ENUM_VARIANT_NAMES,\n+            variant.span,\n+            \"variant name starts with the enum's name\",\n+        );\n+    }\n+}\n+\n+fn check_enum_end(cx: &LateContext<'_>, item_name: &str, variant: &Variant<'_>) {\n+    let name = variant.ident.name.as_str();\n+    let item_name_chars = item_name.chars().count();\n+\n+    if count_match_end(item_name, &name).char_count == item_name_chars {\n+        span_lint(\n+            cx,\n+            ENUM_VARIANT_NAMES,\n+            variant.span,\n+            \"variant name ends with the enum's name\",\n+        );\n+    }\n+}\n+\n+fn check_variant(cx: &LateContext<'_>, threshold: u64, def: &EnumDef<'_>, item_name: &str, span: Span) {\n     if (def.variants.len() as u64) < threshold {\n         return;\n     }\n-    for var in def.variants {\n-        let name = var.ident.name.as_str();\n-        if count_match_start(item_name, &name).char_count == item_name_chars\n-            && name.chars().nth(item_name_chars).map_or(false, |c| !c.is_lowercase())\n-            && name.chars().nth(item_name_chars + 1).map_or(false, |c| !c.is_numeric())\n-        {\n-            span_lint(\n-                cx,\n-                ENUM_VARIANT_NAMES,\n-                var.span,\n-                \"variant name starts with the enum's name\",\n-            );\n-        }\n-        if count_match_end(item_name, &name).char_count == item_name_chars {\n-            span_lint(\n-                cx,\n-                ENUM_VARIANT_NAMES,\n-                var.span,\n-                \"variant name ends with the enum's name\",\n-            );\n-        }\n-    }\n+\n     let first = &def.variants[0].ident.name.as_str();\n     let mut pre = &first[..str_utils::camel_case_until(&*first).byte_index];\n     let mut post = &first[str_utils::camel_case_start(&*first).byte_index..];\n     for var in def.variants {\n+        check_enum_start(cx, item_name, var);\n+        check_enum_end(cx, item_name, var);\n         let name = var.ident.name.as_str();\n-\n         let pre_match = count_match_start(pre, &name).byte_count;\n         pre = &pre[..pre_match];\n         let pre_camel = str_utils::camel_case_until(pre).byte_index;\n@@ -233,7 +237,6 @@ impl LateLintPass<'_> for EnumVariantNames {\n     #[allow(clippy::similar_names)]\n     fn check_item(&mut self, cx: &LateContext<'_>, item: &Item<'_>) {\n         let item_name = item.ident.name.as_str();\n-        let item_name_chars = item_name.chars().count();\n         let item_camel = to_camel_case(&item_name);\n         if !item.span.from_expansion() && is_present_in_source(cx, item.span) {\n             if let Some(&(ref mod_name, ref mod_camel)) = self.modules.last() {\n@@ -283,7 +286,7 @@ impl LateLintPass<'_> for EnumVariantNames {\n         }\n         if let ItemKind::Enum(ref def, _) = item.kind {\n             if !(self.avoid_breaking_exported_api && cx.access_levels.is_exported(item.def_id)) {\n-                check_variant(cx, self.threshold, def, &item_name, item_name_chars, item.span);\n+                check_variant(cx, self.threshold, def, &item_name, item.span);\n             }\n         }\n         self.modules.push((item.ident.name, item_camel));"}]}