{"sha": "da5e5ef4a2235994fb9fe9b4fc001cc7b205b578", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhNWU1ZWY0YTIyMzU5OTRmYjlmZTliNGZjMDAxY2M3YjIwNWI1Nzg=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-09-07T00:27:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-09-07T00:27:47Z"}, "message": "Rollup merge of #44218 - SimonSapin:commit-hash, r=alexcrichton\n\nAdd full git commit hash to release channel manifests\n\nThe full hash is necessary to build the download URL for \"alternate\" compiler builds. This is a first step for https://github.com/rust-lang-nursery/rustup.rs/issues/1099.", "tree": {"sha": "1c250301d258f96bde8c4024ca7bf15cf15cce22", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c250301d258f96bde8c4024ca7bf15cf15cce22"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da5e5ef4a2235994fb9fe9b4fc001cc7b205b578", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da5e5ef4a2235994fb9fe9b4fc001cc7b205b578", "html_url": "https://github.com/rust-lang/rust/commit/da5e5ef4a2235994fb9fe9b4fc001cc7b205b578", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da5e5ef4a2235994fb9fe9b4fc001cc7b205b578/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8812a21794acd1ac57c61f752b9d3adcc742c63", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8812a21794acd1ac57c61f752b9d3adcc742c63", "html_url": "https://github.com/rust-lang/rust/commit/b8812a21794acd1ac57c61f752b9d3adcc742c63"}, {"sha": "f912d771badbe981d7caa89b754248eb141e14c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/f912d771badbe981d7caa89b754248eb141e14c3", "html_url": "https://github.com/rust-lang/rust/commit/f912d771badbe981d7caa89b754248eb141e14c3"}], "stats": {"total": 90, "additions": 70, "deletions": 20}, "files": [{"sha": "609802c4767e5ad004b35419a3ab9b6b0e62174a", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/da5e5ef4a2235994fb9fe9b4fc001cc7b205b578/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da5e5ef4a2235994fb9fe9b4fc001cc7b205b578/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=da5e5ef4a2235994fb9fe9b4fc001cc7b205b578", "patch": "@@ -365,6 +365,9 @@ impl Step for Rustc {\n         // tiny morsel of metadata is used by rust-packaging\n         let version = build.rust_version();\n         t!(t!(File::create(overlay.join(\"version\"))).write_all(version.as_bytes()));\n+        if let Some(sha) = build.rust_sha() {\n+            t!(t!(File::create(overlay.join(\"git-commit-hash\"))).write_all(sha.as_bytes()));\n+        }\n \n         // On MinGW we've got a few runtime DLL dependencies that we need to\n         // include. The first argument to this script is where to put these DLLs\n@@ -844,6 +847,9 @@ impl Step for PlainSourceTarball {\n \n         // Create the version file\n         write_file(&plain_dst_src.join(\"version\"), build.rust_version().as_bytes());\n+        if let Some(sha) = build.rust_sha() {\n+            write_file(&plain_dst_src.join(\"git-commit-hash\"), sha.as_bytes());\n+        }\n \n         // If we're building from git sources, we need to vendor a complete distribution.\n         if build.rust_info.is_git() {\n@@ -1157,6 +1163,9 @@ impl Step for Extended {\n         install(&build.src.join(\"LICENSE-MIT\"), &overlay, 0o644);\n         let version = build.rust_version();\n         t!(t!(File::create(overlay.join(\"version\"))).write_all(version.as_bytes()));\n+        if let Some(sha) = build.rust_sha() {\n+            t!(t!(File::create(overlay.join(\"git-commit-hash\"))).write_all(sha.as_bytes()));\n+        }\n         install(&etc.join(\"README.md\"), &overlay, 0o644);\n \n         // When rust-std package split from rustc, we needed to ensure that during"}, {"sha": "67791e8758c0bef14305ff987505c6a81d497943", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/da5e5ef4a2235994fb9fe9b4fc001cc7b205b578/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da5e5ef4a2235994fb9fe9b4fc001cc7b205b578/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=da5e5ef4a2235994fb9fe9b4fc001cc7b205b578", "patch": "@@ -797,6 +797,11 @@ impl Build {\n         self.rust_info.version(self, channel::CFG_RELEASE_NUM)\n     }\n \n+    /// Return the full commit hash\n+    fn rust_sha(&self) -> Option<&str> {\n+        self.rust_info.sha()\n+    }\n+\n     /// Returns the `a.b.c` version that the given package is at.\n     fn release_num(&self, package: &str) -> String {\n         let mut toml = String::new();"}, {"sha": "0e91fa9c6022b446a4b560fa4ea38ff8a9ea3a96", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 56, "deletions": 20, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/da5e5ef4a2235994fb9fe9b4fc001cc7b205b578/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da5e5ef4a2235994fb9fe9b4fc001cc7b205b578/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=da5e5ef4a2235994fb9fe9b4fc001cc7b205b578", "patch": "@@ -113,6 +113,7 @@ struct Manifest {\n #[derive(Serialize)]\n struct Package {\n     version: String,\n+    git_commit_hash: Option<String>,\n     target: BTreeMap<String, Target>,\n }\n \n@@ -167,6 +168,9 @@ struct Builder {\n     rust_version: String,\n     cargo_version: String,\n     rls_version: String,\n+    rust_git_commit_hash: Option<String>,\n+    cargo_git_commit_hash: Option<String>,\n+    rls_git_commit_hash: Option<String>,\n }\n \n fn main() {\n@@ -194,6 +198,9 @@ fn main() {\n         rust_version: String::new(),\n         cargo_version: String::new(),\n         rls_version: String::new(),\n+        rust_git_commit_hash: None,\n+        cargo_git_commit_hash: None,\n+        rls_git_commit_hash: None,\n     }.build();\n }\n \n@@ -202,18 +209,16 @@ impl Builder {\n         self.rust_version = self.version(\"rust\", \"x86_64-unknown-linux-gnu\");\n         self.cargo_version = self.version(\"cargo\", \"x86_64-unknown-linux-gnu\");\n         self.rls_version = self.version(\"rls\", \"x86_64-unknown-linux-gnu\");\n+        self.rust_git_commit_hash = self.git_commit_hash(\"rust\", \"x86_64-unknown-linux-gnu\");\n+        self.cargo_git_commit_hash = self.git_commit_hash(\"cargo\", \"x86_64-unknown-linux-gnu\");\n+        self.rls_git_commit_hash = self.git_commit_hash(\"rls\", \"x86_64-unknown-linux-gnu\");\n \n         self.digest_and_sign();\n         let manifest = self.build_manifest();\n-        let filename = format!(\"channel-rust-{}.toml\", self.rust_release);\n-        self.write_manifest(&toml::to_string(&manifest).unwrap(), &filename);\n-\n-        let filename = format!(\"channel-rust-{}-date.txt\", self.rust_release);\n-        self.write_date_stamp(&manifest.date, &filename);\n+        self.write_channel_files(&self.rust_release, &manifest);\n \n         if self.rust_release != \"beta\" && self.rust_release != \"nightly\" {\n-            self.write_manifest(&toml::to_string(&manifest).unwrap(), \"channel-rust-stable.toml\");\n-            self.write_date_stamp(&manifest.date, \"channel-rust-stable-date.txt\");\n+            self.write_channel_files(\"stable\", &manifest);\n         }\n     }\n \n@@ -249,6 +254,7 @@ impl Builder {\n \n         let mut pkg = Package {\n             version: self.cached_version(\"rust\").to_string(),\n+            git_commit_hash: self.cached_git_commit_hash(\"rust\").clone(),\n             target: BTreeMap::new(),\n         };\n         for host in HOSTS {\n@@ -342,6 +348,7 @@ impl Builder {\n \n         dst.insert(pkgname.to_string(), Package {\n             version: self.cached_version(pkgname).to_string(),\n+            git_commit_hash: self.cached_git_commit_hash(pkgname).clone(),\n             target: targets,\n         });\n     }\n@@ -375,21 +382,50 @@ impl Builder {\n         }\n     }\n \n+    fn cached_git_commit_hash(&self, component: &str) -> &Option<String> {\n+        if component == \"cargo\" {\n+            &self.cargo_git_commit_hash\n+        } else if component == \"rls\" || component == \"rls-preview\" {\n+            &self.rls_git_commit_hash\n+        } else {\n+            &self.rust_git_commit_hash\n+        }\n+    }\n+\n     fn version(&self, component: &str, target: &str) -> String {\n         let mut cmd = Command::new(\"tar\");\n         let filename = self.filename(component, target);\n         cmd.arg(\"xf\")\n            .arg(self.input.join(&filename))\n            .arg(format!(\"{}/version\", filename.replace(\".tar.gz\", \"\")))\n            .arg(\"-O\");\n-        let version = t!(cmd.output());\n-        if !version.status.success() {\n+        let output = t!(cmd.output());\n+        if !output.status.success() {\n             panic!(\"failed to learn version:\\n\\n{:?}\\n\\n{}\\n\\n{}\",\n                    cmd,\n-                   String::from_utf8_lossy(&version.stdout),\n-                   String::from_utf8_lossy(&version.stderr));\n+                   String::from_utf8_lossy(&output.stdout),\n+                   String::from_utf8_lossy(&output.stderr));\n+        }\n+        String::from_utf8_lossy(&output.stdout).trim().to_string()\n+    }\n+\n+    fn git_commit_hash(&self, component: &str, target: &str) -> Option<String> {\n+        let mut cmd = Command::new(\"tar\");\n+        let filename = self.filename(component, target);\n+        cmd.arg(\"xf\")\n+           .arg(self.input.join(&filename))\n+           .arg(format!(\"{}/git-commit-hash\", filename.replace(\".tar.gz\", \"\")))\n+           .arg(\"-O\");\n+        let output = t!(cmd.output());\n+        if output.status.success() {\n+            Some(String::from_utf8_lossy(&output.stdout).trim().to_string())\n+        } else {\n+            // This is always called after `.version()`.\n+            // So if that didn\u2019t fail but this does,\n+            // that\u2019s very probably because the tarball is valid\n+            // but does not contain a `git-commit-hash` file.\n+            None\n         }\n-        String::from_utf8_lossy(&version.stdout).trim().to_string()\n     }\n \n     fn hash(&self, path: &Path) -> String {\n@@ -425,16 +461,16 @@ impl Builder {\n         assert!(t!(child.wait()).success());\n     }\n \n-    fn write_manifest(&self, manifest: &str, name: &str) {\n-        let dst = self.output.join(name);\n-        t!(t!(File::create(&dst)).write_all(manifest.as_bytes()));\n-        self.hash(&dst);\n-        self.sign(&dst);\n+    fn write_channel_files(&self, channel_name: &str, manifest: &Manifest) {\n+        self.write(&toml::to_string(&manifest).unwrap(), channel_name, \".toml\");\n+        self.write(&manifest.date, channel_name, \"-date.txt\");\n+        self.write(manifest.pkg[\"rust\"].git_commit_hash.as_ref().unwrap(),\n+                   channel_name, \"-git-commit-hash.txt\");\n     }\n \n-    fn write_date_stamp(&self, date: &str, name: &str) {\n-        let dst = self.output.join(name);\n-        t!(t!(File::create(&dst)).write_all(date.as_bytes()));\n+    fn write(&self, contents: &str, channel_name: &str, suffix: &str) {\n+        let dst = self.output.join(format!(\"channel-rust-{}{}\", channel_name, suffix));\n+        t!(t!(File::create(&dst)).write_all(contents.as_bytes()));\n         self.hash(&dst);\n         self.sign(&dst);\n     }"}]}