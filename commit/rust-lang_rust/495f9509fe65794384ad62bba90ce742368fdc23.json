{"sha": "495f9509fe65794384ad62bba90ce742368fdc23", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5NWY5NTA5ZmU2NTc5NDM4NGFkNjJiYmE5MGNlNzQyMzY4ZmRjMjM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-07-24T08:24:55Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-07-24T08:24:55Z"}, "message": "use PanicMessage type for MIR assertion errors", "tree": {"sha": "cb119494e4c55fd391ce064c190298985716b17c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb119494e4c55fd391ce064c190298985716b17c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/495f9509fe65794384ad62bba90ce742368fdc23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/495f9509fe65794384ad62bba90ce742368fdc23", "html_url": "https://github.com/rust-lang/rust/commit/495f9509fe65794384ad62bba90ce742368fdc23", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/495f9509fe65794384ad62bba90ce742368fdc23/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3694d176a20e277581b14a66c530e0565cf05306", "url": "https://api.github.com/repos/rust-lang/rust/commits/3694d176a20e277581b14a66c530e0565cf05306", "html_url": "https://github.com/rust-lang/rust/commit/3694d176a20e277581b14a66c530e0565cf05306"}], "stats": {"total": 270, "additions": 155, "deletions": 115}, "files": [{"sha": "073ee0028cf43bab59a2c3c56ffe98725362a8c0", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 77, "deletions": 50, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/495f9509fe65794384ad62bba90ce742368fdc23/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/495f9509fe65794384ad62bba90ce742368fdc23/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=495f9509fe65794384ad62bba90ce742368fdc23", "patch": "@@ -47,7 +47,7 @@ pub type ConstEvalResult<'tcx> = Result<&'tcx ty::Const<'tcx>, ErrorHandled>;\n #[derive(Clone, Debug, RustcEncodable, RustcDecodable)]\n pub struct ConstEvalErr<'tcx> {\n     pub span: Span,\n-    pub error: crate::mir::interpret::InterpError<'tcx, u64>,\n+    pub error: crate::mir::interpret::InterpError<'tcx>,\n     pub stacktrace: Vec<FrameInfo<'tcx>>,\n }\n \n@@ -185,10 +185,17 @@ pub fn struct_error<'tcx>(tcx: TyCtxtAt<'tcx>, msg: &str) -> DiagnosticBuilder<'\n /// macro for this.\n #[derive(Debug, Clone)]\n pub struct InterpErrorInfo<'tcx> {\n-    pub kind: InterpError<'tcx, u64>,\n+    pub kind: InterpError<'tcx>,\n     backtrace: Option<Box<Backtrace>>,\n }\n \n+\n+impl<'tcx> fmt::Display for InterpErrorInfo<'tcx> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        write!(f, \"{}\", self.kind)\n+    }\n+}\n+\n impl<'tcx> InterpErrorInfo<'tcx> {\n     pub fn print_backtrace(&mut self) {\n         if let Some(ref mut backtrace) = self.backtrace {\n@@ -202,8 +209,8 @@ fn print_backtrace(backtrace: &mut Backtrace) {\n     eprintln!(\"\\n\\nAn error occurred in miri:\\n{:?}\", backtrace);\n }\n \n-impl<'tcx> From<InterpError<'tcx, u64>> for InterpErrorInfo<'tcx> {\n-    fn from(kind: InterpError<'tcx, u64>) -> Self {\n+impl<'tcx> From<InterpError<'tcx>> for InterpErrorInfo<'tcx> {\n+    fn from(kind: InterpError<'tcx>) -> Self {\n         let backtrace = match env::var(\"RUST_CTFE_BACKTRACE\") {\n             // Matching `RUST_BACKTRACE` -- we treat \"0\" the same as \"not present\".\n             Ok(ref val) if val != \"0\" => {\n@@ -226,8 +233,6 @@ impl<'tcx> From<InterpError<'tcx, u64>> for InterpErrorInfo<'tcx> {\n     }\n }\n \n-pub type AssertMessage<'tcx> = InterpError<'tcx, mir::Operand<'tcx>>;\n-\n #[derive(Clone, RustcEncodable, RustcDecodable, HashStable)]\n pub enum PanicMessage<O> {\n     Panic {\n@@ -244,10 +249,68 @@ pub enum PanicMessage<O> {\n     OverflowNeg,\n     DivisionByZero,\n     RemainderByZero,\n+    GeneratorResumedAfterReturn,\n+    GeneratorResumedAfterPanic,\n+}\n+\n+/// Type for MIR `Assert` terminator error messages.\n+pub type AssertMessage<'tcx> = PanicMessage<mir::Operand<'tcx>>;\n+\n+impl<O> PanicMessage<O> {\n+    /// Getting a description does not require `O` to be printable, and does not\n+    /// require allocation.\n+    /// The caller is expected to handle `Panic` and `BoundsCheck` separately.\n+    pub fn description(&self) -> &'static str {\n+        use PanicMessage::*;\n+        match self {\n+            Overflow(mir::BinOp::Add) =>\n+                \"attempt to add with overflow\",\n+            Overflow(mir::BinOp::Sub) =>\n+                \"attempt to subtract with overflow\",\n+            Overflow(mir::BinOp::Mul) =>\n+                \"attempt to multiply with overflow\",\n+            Overflow(mir::BinOp::Div) =>\n+                \"attempt to divide with overflow\",\n+            Overflow(mir::BinOp::Rem) =>\n+                \"attempt to calculate the remainder with overflow\",\n+            OverflowNeg =>\n+                \"attempt to negate with overflow\",\n+            Overflow(mir::BinOp::Shr) =>\n+                \"attempt to shift right with overflow\",\n+            Overflow(mir::BinOp::Shl) =>\n+                \"attempt to shift left with overflow\",\n+            Overflow(op) =>\n+                bug!(\"{:?} cannot overflow\", op),\n+            DivisionByZero =>\n+                \"attempt to divide by zero\",\n+            RemainderByZero =>\n+                \"attempt to calculate the remainder with a divisor of zero\",\n+            GeneratorResumedAfterReturn =>\n+                \"generator resumed after completion\",\n+            GeneratorResumedAfterPanic =>\n+                \"generator resumed after panicking\",\n+            Panic { .. } | BoundsCheck { .. } =>\n+                bug!(\"Unexpected PanicMessage\"),\n+        }\n+    }\n+}\n+\n+impl<O: fmt::Debug> fmt::Debug for PanicMessage<O> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        use PanicMessage::*;\n+        match self {\n+            Panic { ref msg, line, col, ref file } =>\n+                write!(f, \"the evaluated program panicked at '{}', {}:{}:{}\", msg, file, line, col),\n+            BoundsCheck { ref len, ref index } =>\n+                write!(f, \"index out of bounds: the len is {:?} but the index is {:?}\", len, index),\n+            _ =>\n+                write!(f, \"{}\", self.description()),\n+        }\n+    }\n }\n \n #[derive(Clone, RustcEncodable, RustcDecodable, HashStable)]\n-pub enum InterpError<'tcx, O> {\n+pub enum InterpError<'tcx> {\n     /// This variant is used by machines to signal their own errors that do not\n     /// match an existing variant.\n     MachineError(String),\n@@ -311,7 +374,7 @@ pub enum InterpError<'tcx, O> {\n     HeapAllocZeroBytes,\n     HeapAllocNonPowerOfTwoAlignment(u64),\n     Unreachable,\n-    Panic(PanicMessage<O>),\n+    Panic(PanicMessage<u64>),\n     ReadFromReturnPointer,\n     PathNotFound(Vec<String>),\n     UnimplementedTraitSelection,\n@@ -322,28 +385,21 @@ pub enum InterpError<'tcx, O> {\n     /// Cannot compute this constant because it depends on another one\n     /// which already produced an error\n     ReferencedConstant,\n-    GeneratorResumedAfterReturn,\n-    GeneratorResumedAfterPanic,\n     InfiniteLoop,\n }\n \n pub type InterpResult<'tcx, T = ()> = Result<T, InterpErrorInfo<'tcx>>;\n \n-impl<'tcx> fmt::Display for InterpErrorInfo<'tcx> {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        write!(f, \"{}\", self.kind)\n-    }\n-}\n-\n-impl<'tcx> fmt::Display for InterpError<'tcx, u64> {\n+impl<'tcx> fmt::Display for InterpError<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        // Forward `Display` to `Debug`\n         write!(f, \"{:?}\", self)\n     }\n }\n \n-impl<'tcx, O: fmt::Debug> fmt::Debug for InterpError<'tcx, O> {\n+impl<'tcx> fmt::Debug for InterpError<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        use self::InterpError::*;\n+        use InterpError::*;\n         match *self {\n             PointerOutOfBounds { ptr, msg, allocation_size } => {\n                 write!(f, \"{} failed: pointer must be in-bounds at offset {}, \\\n@@ -457,10 +513,6 @@ impl<'tcx, O: fmt::Debug> fmt::Debug for InterpError<'tcx, O> {\n                 write!(f, \"encountered overly generic constant\"),\n             ReferencedConstant =>\n                 write!(f, \"referenced constant has errors\"),\n-            GeneratorResumedAfterReturn =>\n-                write!(f, \"generator resumed after completion\"),\n-            GeneratorResumedAfterPanic =>\n-                write!(f, \"generator resumed after panicking\"),\n             InfiniteLoop =>\n                 write!(f, \"duplicate interpreter state observed here, const evaluation will never \\\n                     terminate\"),\n@@ -479,33 +531,8 @@ impl<'tcx, O: fmt::Debug> fmt::Debug for InterpError<'tcx, O> {\n             AbiViolation(ref msg) |\n             Intrinsic(ref msg) =>\n                 write!(f, \"{}\", msg),\n-\n-            Panic(PanicMessage::Panic { ref msg, line, col, ref file }) =>\n-                write!(f, \"the evaluated program panicked at '{}', {}:{}:{}\", msg, file, line, col),\n-            Panic(PanicMessage::BoundsCheck { ref len, ref index }) =>\n-                write!(f, \"index out of bounds: the len is {:?} but the index is {:?}\", len, index),\n-            Panic(PanicMessage::Overflow(mir::BinOp::Add)) =>\n-                write!(f, \"attempt to add with overflow\"),\n-            Panic(PanicMessage::Overflow(mir::BinOp::Sub)) =>\n-                write!(f, \"attempt to subtract with overflow\"),\n-            Panic(PanicMessage::Overflow(mir::BinOp::Mul)) =>\n-                write!(f, \"attempt to multiply with overflow\"),\n-            Panic(PanicMessage::Overflow(mir::BinOp::Div)) =>\n-                write!(f, \"attempt to divide with overflow\"),\n-            Panic(PanicMessage::Overflow(mir::BinOp::Rem)) =>\n-                write!(f, \"attempt to calculate the remainder with overflow\"),\n-            Panic(PanicMessage::OverflowNeg) =>\n-                write!(f, \"attempt to negate with overflow\"),\n-            Panic(PanicMessage::Overflow(mir::BinOp::Shr)) =>\n-                write!(f, \"attempt to shift right with overflow\"),\n-            Panic(PanicMessage::Overflow(mir::BinOp::Shl)) =>\n-                write!(f, \"attempt to shift left with overflow\"),\n-            Panic(PanicMessage::Overflow(op)) =>\n-                bug!(\"{:?} cannot overflow\", op),\n-            Panic(PanicMessage::DivisionByZero) =>\n-                write!(f, \"attempt to divide by zero\"),\n-            Panic(PanicMessage::RemainderByZero) =>\n-                write!(f, \"attempt to calculate the remainder with a divisor of zero\"),\n+            Panic(ref msg) =>\n+                write!(f, \"{:?}\", msg),\n         }\n     }\n }"}, {"sha": "b3d92e8a604d1e1fff12eae4af3eceae8fe4475e", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 19, "deletions": 12, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/495f9509fe65794384ad62bba90ce742368fdc23/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/495f9509fe65794384ad62bba90ce742368fdc23/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=495f9509fe65794384ad62bba90ce742368fdc23", "patch": "@@ -7,7 +7,7 @@\n use crate::hir::def::{CtorKind, Namespace};\n use crate::hir::def_id::DefId;\n use crate::hir::{self, InlineAsm as HirInlineAsm};\n-use crate::mir::interpret::{ConstValue, PanicMessage, InterpError::Panic, Scalar};\n+use crate::mir::interpret::{ConstValue, PanicMessage, Scalar};\n use crate::mir::visit::MirVisitable;\n use crate::rustc_serialize as serialize;\n use crate::ty::adjustment::PointerCast;\n@@ -3152,13 +3152,16 @@ impl<'tcx> TypeFoldable<'tcx> for Terminator<'tcx> {\n                 }\n             }\n             Assert { ref cond, expected, ref msg, target, cleanup } => {\n-                let msg = if let Panic(PanicMessage::BoundsCheck { ref len, ref index }) = *msg {\n-                    Panic(PanicMessage::BoundsCheck {\n-                        len: len.fold_with(folder),\n-                        index: index.fold_with(folder),\n-                    })\n-                } else {\n-                    msg.clone()\n+                use PanicMessage::*;\n+                let msg = match msg {\n+                    BoundsCheck { ref len, ref index } =>\n+                        BoundsCheck {\n+                            len: len.fold_with(folder),\n+                            index: index.fold_with(folder),\n+                        },\n+                    Panic { .. } | Overflow(_) | OverflowNeg | DivisionByZero | RemainderByZero |\n+                    GeneratorResumedAfterReturn | GeneratorResumedAfterPanic =>\n+                        msg.clone(),\n                 };\n                 Assert { cond: cond.fold_with(folder), expected, msg, target, cleanup }\n             }\n@@ -3197,10 +3200,14 @@ impl<'tcx> TypeFoldable<'tcx> for Terminator<'tcx> {\n             }\n             Assert { ref cond, ref msg, .. } => {\n                 if cond.visit_with(visitor) {\n-                    if let Panic(PanicMessage::BoundsCheck { ref len, ref index }) = *msg {\n-                        len.visit_with(visitor) || index.visit_with(visitor)\n-                    } else {\n-                        false\n+                    use PanicMessage::*;\n+                    match msg {\n+                        BoundsCheck { ref len, ref index } =>\n+                            len.visit_with(visitor) || index.visit_with(visitor),\n+                        Panic { .. } | Overflow(_) | OverflowNeg |\n+                        DivisionByZero | RemainderByZero |\n+                        GeneratorResumedAfterReturn | GeneratorResumedAfterPanic =>\n+                            false\n                     }\n                 } else {\n                     false"}, {"sha": "7562981f94f61aab897ad68a74b17c7b37c09669", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/495f9509fe65794384ad62bba90ce742368fdc23/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/495f9509fe65794384ad62bba90ce742368fdc23/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=495f9509fe65794384ad62bba90ce742368fdc23", "patch": "@@ -514,11 +514,16 @@ macro_rules! make_mir_visitor {\n             fn super_assert_message(&mut self,\n                                     msg: & $($mutability)? AssertMessage<'tcx>,\n                                     location: Location) {\n-                use crate::mir::interpret::InterpError::*;\n-                use crate::mir::interpret::PanicMessage::BoundsCheck;\n-                if let Panic(BoundsCheck { len, index }) = msg {\n-                    self.visit_operand(len, location);\n-                    self.visit_operand(index, location);\n+                use crate::mir::interpret::PanicMessage::*;\n+                match msg {\n+                    BoundsCheck { len, index } => {\n+                        self.visit_operand(len, location);\n+                        self.visit_operand(index, location);\n+                    }\n+                    Panic { .. } | Overflow(_) | OverflowNeg | DivisionByZero | RemainderByZero |\n+                    GeneratorResumedAfterReturn | GeneratorResumedAfterPanic => {\n+                        // Nothing to visit\n+                    }\n                 }\n             }\n "}, {"sha": "984ff80f03e963d10f66c08b030c2c9b408b5ad3", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/495f9509fe65794384ad62bba90ce742368fdc23/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/495f9509fe65794384ad62bba90ce742368fdc23/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=495f9509fe65794384ad62bba90ce742368fdc23", "patch": "@@ -368,7 +368,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         // checked operation, just a comparison with the minimum\n         // value, so we have to check for the assert message.\n         if !bx.check_overflow() {\n-            if let InterpError::Panic(PanicMessage::OverflowNeg) = *msg {\n+            if let PanicMessage::OverflowNeg = *msg {\n                 const_cond = Some(expected);\n             }\n         }\n@@ -402,8 +402,8 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         let col = bx.const_u32(loc.col.to_usize() as u32 + 1);\n \n         // Put together the arguments to the panic entry point.\n-        let (lang_item, args) = match *msg {\n-            InterpError::Panic(PanicMessage::BoundsCheck { ref len, ref index }) => {\n+        let (lang_item, args) = match msg {\n+            PanicMessage::BoundsCheck { ref len, ref index } => {\n                 let len = self.codegen_operand(&mut bx, len).immediate();\n                 let index = self.codegen_operand(&mut bx, index).immediate();\n \n@@ -418,8 +418,8 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     vec![file_line_col, index, len])\n             }\n             _ => {\n-                let str = format!(\"{:?}\", msg);\n-                let msg_str = LocalInternedString::intern(&str);\n+                let str = msg.description();\n+                let msg_str = LocalInternedString::intern(str);\n                 let msg_file_line_col = bx.static_panic_msg(\n                     Some(msg_str),\n                     filename,"}, {"sha": "92285c47db481460ee183db79922bf349cc85e2a", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/495f9509fe65794384ad62bba90ce742368fdc23/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/495f9509fe65794384ad62bba90ce742368fdc23/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=495f9509fe65794384ad62bba90ce742368fdc23", "patch": "@@ -733,8 +733,8 @@ impl<'cx, 'tcx> DataflowResultsConsumer<'cx, 'tcx> for MirBorrowckCtxt<'cx, 'tcx\n                 cleanup: _,\n             } => {\n                 self.consume_operand(loc, (cond, span), flow_state);\n-                use rustc::mir::interpret::{InterpError::Panic, PanicMessage};\n-                if let Panic(PanicMessage::BoundsCheck { ref len, ref index }) = *msg {\n+                use rustc::mir::interpret::PanicMessage;\n+                if let PanicMessage::BoundsCheck { ref len, ref index } = *msg {\n                     self.consume_operand(loc, (len, span), flow_state);\n                     self.consume_operand(loc, (index, span), flow_state);\n                 }"}, {"sha": "aa9e68bd7de4412bf91e7e5cb0b2a291bbf40f35", "filename": "src/librustc_mir/borrow_check/nll/invalidation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/495f9509fe65794384ad62bba90ce742368fdc23/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/495f9509fe65794384ad62bba90ce742368fdc23/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs?ref=495f9509fe65794384ad62bba90ce742368fdc23", "patch": "@@ -207,8 +207,8 @@ impl<'cx, 'tcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx> {\n                 cleanup: _,\n             } => {\n                 self.consume_operand(location, cond);\n-                use rustc::mir::interpret::{InterpError::Panic, PanicMessage::BoundsCheck};\n-                if let Panic(BoundsCheck { ref len, ref index }) = *msg {\n+                use rustc::mir::interpret::PanicMessage;\n+                if let PanicMessage::BoundsCheck { ref len, ref index } = *msg {\n                     self.consume_operand(location, len);\n                     self.consume_operand(location, index);\n                 }"}, {"sha": "59a8c8d34d2a1cf26a81e44e793040015b8114a3", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/495f9509fe65794384ad62bba90ce742368fdc23/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/495f9509fe65794384ad62bba90ce742368fdc23/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=495f9509fe65794384ad62bba90ce742368fdc23", "patch": "@@ -28,7 +28,7 @@ use rustc::infer::canonical::QueryRegionConstraints;\n use rustc::infer::outlives::env::RegionBoundPairs;\n use rustc::infer::{InferCtxt, InferOk, LateBoundRegionConversionTime, NLLRegionVariableOrigin};\n use rustc::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n-use rustc::mir::interpret::{InterpError::Panic, ConstValue, PanicMessage};\n+use rustc::mir::interpret::{ConstValue, PanicMessage};\n use rustc::mir::tcx::PlaceTy;\n use rustc::mir::visit::{PlaceContext, Visitor, NonMutatingUseContext};\n use rustc::mir::*;\n@@ -1606,7 +1606,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                     span_mirbug!(self, term, \"bad Assert ({:?}, not bool\", cond_ty);\n                 }\n \n-                if let Panic(PanicMessage::BoundsCheck { ref len, ref index }) = *msg {\n+                if let PanicMessage::BoundsCheck { ref len, ref index } = *msg {\n                     if len.ty(body, tcx) != tcx.types.usize {\n                         span_mirbug!(self, len, \"bounds-check length non-usize {:?}\", len)\n                     }"}, {"sha": "7a428a2ec9f3626d149714db264af8bf077c7e0b", "filename": "src/librustc_mir/build/expr/as_place.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/495f9509fe65794384ad62bba90ce742368fdc23/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/495f9509fe65794384ad62bba90ce742368fdc23/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_place.rs?ref=495f9509fe65794384ad62bba90ce742368fdc23", "patch": "@@ -4,7 +4,7 @@ use crate::build::expr::category::Category;\n use crate::build::ForGuard::{OutsideGuard, RefWithinGuard};\n use crate::build::{BlockAnd, BlockAndExtension, Builder};\n use crate::hair::*;\n-use rustc::mir::interpret::{InterpError::Panic, PanicMessage::BoundsCheck};\n+use rustc::mir::interpret::{PanicMessage::BoundsCheck};\n use rustc::mir::*;\n use rustc::ty::{CanonicalUserTypeAnnotation, Variance};\n \n@@ -105,10 +105,10 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     ),\n                 );\n \n-                let msg = Panic(BoundsCheck {\n+                let msg = BoundsCheck {\n                     len: Operand::Move(len),\n                     index: Operand::Copy(Place::from(idx)),\n-                });\n+                };\n                 let success = this.assert(block, Operand::Move(lt), true, msg, expr_span);\n                 success.and(slice.index(idx))\n             }"}, {"sha": "92daf06e6f8fefea4dbf21dba879996b2d431c74", "filename": "src/librustc_mir/build/expr/as_rvalue.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/495f9509fe65794384ad62bba90ce742368fdc23/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/495f9509fe65794384ad62bba90ce742368fdc23/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=495f9509fe65794384ad62bba90ce742368fdc23", "patch": "@@ -7,7 +7,7 @@ use crate::build::expr::category::{Category, RvalueFunc};\n use crate::build::{BlockAnd, BlockAndExtension, Builder};\n use crate::hair::*;\n use rustc::middle::region;\n-use rustc::mir::interpret::{InterpError::Panic, PanicMessage};\n+use rustc::mir::interpret::PanicMessage;\n use rustc::mir::*;\n use rustc::ty::{self, CanonicalUserTypeAnnotation, Ty, UpvarSubsts};\n use syntax_pos::Span;\n@@ -101,7 +101,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         block,\n                         Operand::Move(is_min),\n                         false,\n-                        Panic(PanicMessage::OverflowNeg),\n+                        PanicMessage::OverflowNeg,\n                         expr_span,\n                     );\n                 }\n@@ -401,7 +401,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             let val = result_value.clone().field(val_fld, ty);\n             let of = result_value.field(of_fld, bool_ty);\n \n-            let err = Panic(PanicMessage::Overflow(op));\n+            let err = PanicMessage::Overflow(op);\n \n             block = self.assert(block, Operand::Move(of), false, err, span);\n \n@@ -411,11 +411,12 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 // Checking division and remainder is more complex, since we 1. always check\n                 // and 2. there are two possible failure cases, divide-by-zero and overflow.\n \n-                let (zero_err, overflow_err) = if op == BinOp::Div {\n-                    (Panic(PanicMessage::DivisionByZero), Panic(PanicMessage::Overflow(op)))\n+                let zero_err = if op == BinOp::Div {\n+                    PanicMessage::DivisionByZero\n                 } else {\n-                    (Panic(PanicMessage::RemainderByZero), Panic(PanicMessage::Overflow(op)))\n+                    PanicMessage::RemainderByZero\n                 };\n+                let overflow_err = PanicMessage::Overflow(op);\n \n                 // Check for / 0\n                 let is_zero = self.temp(bool_ty, span);"}, {"sha": "27bd0f88896340d1a8df827de43555e1334f5c3c", "filename": "src/librustc_mir/interpret/terminator.rs", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/495f9509fe65794384ad62bba90ce742368fdc23/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/495f9509fe65794384ad62bba90ce742368fdc23/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs?ref=495f9509fe65794384ad62bba90ce742368fdc23", "patch": "@@ -7,7 +7,7 @@ use syntax::source_map::Span;\n use rustc_target::spec::abi::Abi;\n \n use super::{\n-    InterpResult, PointerArithmetic, InterpError, Scalar, PanicMessage,\n+    InterpResult, PointerArithmetic, InterpError, Scalar,\n     InterpCx, Machine, Immediate, OpTy, ImmTy, PlaceTy, MPlaceTy, StackPopCleanup, FnVal,\n };\n \n@@ -135,28 +135,31 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     self.goto_block(Some(target))?;\n                 } else {\n                     // Compute error message\n-                    use rustc::mir::interpret::InterpError::*;\n-                    return match *msg {\n-                        Panic(PanicMessage::BoundsCheck { ref len, ref index }) => {\n+                    use rustc::mir::interpret::PanicMessage::*;\n+                    return match msg {\n+                        BoundsCheck { ref len, ref index } => {\n                             let len = self.read_immediate(self.eval_operand(len, None)?)\n                                 .expect(\"can't eval len\").to_scalar()?\n                                 .to_bits(self.memory().pointer_size())? as u64;\n                             let index = self.read_immediate(self.eval_operand(index, None)?)\n                                 .expect(\"can't eval index\").to_scalar()?\n                                 .to_bits(self.memory().pointer_size())? as u64;\n-                            err!(Panic(PanicMessage::BoundsCheck { len, index }))\n+                            err!(Panic(BoundsCheck { len, index }))\n                         }\n-                        Panic(PanicMessage::Overflow(op)) =>\n-                            Err(Panic(PanicMessage::Overflow(op)).into()),\n-                        Panic(PanicMessage::OverflowNeg) =>\n-                            Err(Panic(PanicMessage::OverflowNeg).into()),\n-                        Panic(PanicMessage::DivisionByZero) =>\n-                            Err(Panic(PanicMessage::DivisionByZero).into()),\n-                        Panic(PanicMessage::RemainderByZero) =>\n-                            Err(Panic(PanicMessage::RemainderByZero).into()),\n-                        GeneratorResumedAfterReturn |\n-                        GeneratorResumedAfterPanic => unimplemented!(),\n-                        _ => bug!(),\n+                        Overflow(op) =>\n+                            err!(Panic(Overflow(*op))),\n+                        OverflowNeg =>\n+                            err!(Panic(OverflowNeg)),\n+                        DivisionByZero =>\n+                            err!(Panic(DivisionByZero)),\n+                        RemainderByZero =>\n+                            err!(Panic(RemainderByZero)),\n+                        GeneratorResumedAfterReturn =>\n+                            err!(Panic(GeneratorResumedAfterReturn)),\n+                        GeneratorResumedAfterPanic =>\n+                            err!(Panic(GeneratorResumedAfterPanic)),\n+                        Panic { .. } =>\n+                            bug!(\"`Panic` variant cannot occur in MIR\"),\n                     };\n                 }\n             }"}, {"sha": "7a2d78b2e986b670626c7c878ef93ddefc402104", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/495f9509fe65794384ad62bba90ce742368fdc23/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/495f9509fe65794384ad62bba90ce742368fdc23/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=495f9509fe65794384ad62bba90ce742368fdc23", "patch": "@@ -13,7 +13,7 @@ use rustc::mir::{\n use rustc::mir::visit::{\n     Visitor, PlaceContext, MutatingUseContext, MutVisitor, NonMutatingUseContext,\n };\n-use rustc::mir::interpret::{InterpError::Panic, Scalar, GlobalId, InterpResult, PanicMessage};\n+use rustc::mir::interpret::{Scalar, GlobalId, InterpResult, InterpError, PanicMessage};\n use rustc::ty::{self, Instance, ParamEnv, Ty, TyCtxt};\n use syntax_pos::{Span, DUMMY_SP};\n use rustc::ty::subst::InternalSubsts;\n@@ -314,8 +314,6 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n                     | HeapAllocNonPowerOfTwoAlignment(_)\n                     | Unreachable\n                     | ReadFromReturnPointer\n-                    | GeneratorResumedAfterReturn\n-                    | GeneratorResumedAfterPanic\n                     | ReferencedConstant\n                     | InfiniteLoop\n                     => {\n@@ -595,7 +593,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n                     )\n                 } else {\n                     if overflow {\n-                        let err = Panic(PanicMessage::Overflow(op)).into();\n+                        let err = InterpError::Panic(PanicMessage::Overflow(op)).into();\n                         let _: Option<()> = self.use_ecx(source_info, |_| Err(err));\n                         return None;\n                     }\n@@ -831,14 +829,13 @@ impl<'mir, 'tcx> MutVisitor<'tcx> for ConstPropagator<'mir, 'tcx> {\n                             .hir()\n                             .as_local_hir_id(self.source.def_id())\n                             .expect(\"some part of a failing const eval must be local\");\n-                        use rustc::mir::interpret::InterpError::*;\n                         let msg = match msg {\n-                            Panic(PanicMessage::Overflow(_)) |\n-                            Panic(PanicMessage::OverflowNeg) |\n-                            Panic(PanicMessage::DivisionByZero) |\n-                            Panic(PanicMessage::RemainderByZero) =>\n-                                format!(\"{:?}\", msg),\n-                            Panic(PanicMessage::BoundsCheck { ref len, ref index }) => {\n+                            PanicMessage::Overflow(_) |\n+                            PanicMessage::OverflowNeg |\n+                            PanicMessage::DivisionByZero |\n+                            PanicMessage::RemainderByZero =>\n+                                msg.description().to_owned(),\n+                            PanicMessage::BoundsCheck { ref len, ref index } => {\n                                 let len = self\n                                     .eval_operand(len, source_info)\n                                     .expect(\"len must be const\");"}, {"sha": "5461a2e470c7e62a7e2ebb5d4ee23fb5e83586c5", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/495f9509fe65794384ad62bba90ce742368fdc23/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/495f9509fe65794384ad62bba90ce742368fdc23/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=495f9509fe65794384ad62bba90ce742368fdc23", "patch": "@@ -1016,7 +1016,7 @@ fn create_generator_resume_function<'tcx>(\n \n     let mut cases = create_cases(body, &transform, |point| Some(point.resume));\n \n-    use rustc::mir::interpret::InterpError::{\n+    use rustc::mir::interpret::PanicMessage::{\n         GeneratorResumedAfterPanic,\n         GeneratorResumedAfterReturn,\n     };"}]}