{"sha": "b7f16c56d10abbd664407b4eef41b5e69d18666d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3ZjE2YzU2ZDEwYWJiZDY2NDQwN2I0ZWVmNDFiNWU2OWQxODY2NmQ=", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-11-06T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-11-09T10:41:10Z"}, "message": "inliner: Make `inline_call` infallible\n\nThe inliner does not support inlining of divering calls. Reject them\nearly on and turn `inline_call` into an infallible operation.", "tree": {"sha": "914056cb45f848982f491e78a3918558b91e3525", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/914056cb45f848982f491e78a3918558b91e3525"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7f16c56d10abbd664407b4eef41b5e69d18666d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7f16c56d10abbd664407b4eef41b5e69d18666d", "html_url": "https://github.com/rust-lang/rust/commit/b7f16c56d10abbd664407b4eef41b5e69d18666d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7f16c56d10abbd664407b4eef41b5e69d18666d/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe8f02690804d5ee696bd3bca9515f5f71857e3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe8f02690804d5ee696bd3bca9515f5f71857e3b", "html_url": "https://github.com/rust-lang/rust/commit/fe8f02690804d5ee696bd3bca9515f5f71857e3b"}], "stats": {"total": 23, "additions": 6, "deletions": 17}, "files": [{"sha": "503b40b506a6ebf5cb1e65336708be9dbb0c6e25", "filename": "compiler/rustc_mir/src/transform/inline.rs", "status": "modified", "additions": 6, "deletions": 17, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b7f16c56d10abbd664407b4eef41b5e69d18666d/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7f16c56d10abbd664407b4eef41b5e69d18666d/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs?ref=b7f16c56d10abbd664407b4eef41b5e69d18666d", "patch": "@@ -138,12 +138,7 @@ impl Inliner<'tcx> {\n             );\n \n             let start = caller_body.basic_blocks().len();\n-            debug!(\"attempting to inline callsite {:?} - body={:?}\", callsite, callee_body);\n-            if !self.inline_call(callsite, caller_body, callee_body) {\n-                debug!(\"attempting to inline callsite {:?} - failure\", callsite);\n-                continue;\n-            }\n-            debug!(\"attempting to inline callsite {:?} - success\", callsite);\n+            self.inline_call(callsite, caller_body, callee_body);\n \n             // Add callsites from inlined function\n             for (bb, bb_data) in caller_body.basic_blocks().iter_enumerated().skip(start) {\n@@ -179,7 +174,8 @@ impl Inliner<'tcx> {\n \n         // Only consider direct calls to functions\n         let terminator = bb_data.terminator();\n-        if let TerminatorKind::Call { func: ref op, .. } = terminator.kind {\n+        // FIXME: Handle inlining of diverging calls\n+        if let TerminatorKind::Call { func: ref op, destination: Some(_), .. } = terminator.kind {\n             if let ty::FnDef(callee_def_id, substs) = *op.ty(caller_body, self.tcx).kind() {\n                 // To resolve an instance its substs have to be fully normalized, so\n                 // we do this here.\n@@ -397,12 +393,11 @@ impl Inliner<'tcx> {\n         callsite: CallSite<'tcx>,\n         caller_body: &mut Body<'tcx>,\n         mut callee_body: Body<'tcx>,\n-    ) -> bool {\n+    ) {\n         let terminator = caller_body[callsite.bb].terminator.take().unwrap();\n         match terminator.kind {\n-            // FIXME: Handle inlining of diverging calls\n             TerminatorKind::Call { args, destination: Some(destination), cleanup, .. } => {\n-                debug!(\"inlined {:?} into {:?}\", callsite.callee, caller_body.source);\n+                debug!(\"inlined {} into {:?}\", callsite.callee, caller_body.source.instance);\n \n                 // If the call is something like `a[*i] = f(i)`, where\n                 // `i : &mut usize`, then just duplicating the `a[*i]`\n@@ -519,14 +514,8 @@ impl Inliner<'tcx> {\n                         matches!(constant.literal.val, ConstKind::Unevaluated(_, _, _))\n                     }),\n                 );\n-\n-                true\n-            }\n-            kind => {\n-                caller_body[callsite.bb].terminator =\n-                    Some(Terminator { source_info: terminator.source_info, kind });\n-                false\n             }\n+            kind => bug!(\"unexpected terminator kind {:?}\", kind),\n         }\n     }\n "}]}