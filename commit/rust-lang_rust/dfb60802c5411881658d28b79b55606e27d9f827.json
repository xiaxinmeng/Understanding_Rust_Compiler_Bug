{"sha": "dfb60802c5411881658d28b79b55606e27d9f827", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmYjYwODAyYzU0MTE4ODE2NThkMjhiNzliNTU2MDZlMjdkOWY4Mjc=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-04-29T22:45:36Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-04-29T22:45:36Z"}, "message": "rollup merge of #24833: tari/rfc888\n\nCloses #24118, implementing RFC 888.", "tree": {"sha": "c302a1701ac0d53a7128096cf9e15ed456ca68aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c302a1701ac0d53a7128096cf9e15ed456ca68aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dfb60802c5411881658d28b79b55606e27d9f827", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dfb60802c5411881658d28b79b55606e27d9f827", "html_url": "https://github.com/rust-lang/rust/commit/dfb60802c5411881658d28b79b55606e27d9f827", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dfb60802c5411881658d28b79b55606e27d9f827/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3434469b518bda1d140e7859239ad1c800060af8", "url": "https://api.github.com/repos/rust-lang/rust/commits/3434469b518bda1d140e7859239ad1c800060af8", "html_url": "https://github.com/rust-lang/rust/commit/3434469b518bda1d140e7859239ad1c800060af8"}, {"sha": "94c9bdeef6d85bdb30ef04bf339c1796338151d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/94c9bdeef6d85bdb30ef04bf339c1796338151d6", "html_url": "https://github.com/rust-lang/rust/commit/94c9bdeef6d85bdb30ef04bf339c1796338151d6"}], "stats": {"total": 54, "additions": 43, "deletions": 11}, "files": [{"sha": "13b847f65329192de9cd4a70fb5ad68ab07ab511", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/dfb60802c5411881658d28b79b55606e27d9f827/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfb60802c5411881658d28b79b55606e27d9f827/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=dfb60802c5411881658d28b79b55606e27d9f827", "patch": "@@ -139,6 +139,21 @@ extern \"rust-intrinsic\" {\n     pub fn atomic_fence_rel();\n     pub fn atomic_fence_acqrel();\n \n+    /// A compiler-only memory barrier.\n+    ///\n+    /// Memory accesses will never be reordered across this barrier by the compiler,\n+    /// but no instructions will be emitted for it. This is appropriate for operations\n+    /// on the same thread that may be preempted, such as when interacting with signal\n+    /// handlers.\n+    #[cfg(not(stage0))]     // SNAP 857ef6e\n+    pub fn atomic_singlethreadfence();\n+    #[cfg(not(stage0))]     // SNAP 857ef6e\n+    pub fn atomic_singlethreadfence_acq();\n+    #[cfg(not(stage0))]     // SNAP 857ef6e\n+    pub fn atomic_singlethreadfence_rel();\n+    #[cfg(not(stage0))]     // SNAP 857ef6e\n+    pub fn atomic_singlethreadfence_acqrel();\n+\n     /// Aborts the execution of the process.\n     pub fn abort() -> !;\n "}, {"sha": "79757320ade6ff6fca2181887749ec9becd6e218", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dfb60802c5411881658d28b79b55606e27d9f827/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfb60802c5411881658d28b79b55606e27d9f827/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=dfb60802c5411881658d28b79b55606e27d9f827", "patch": "@@ -42,6 +42,7 @@ pub use self::RealPredicate::*;\n pub use self::TypeKind::*;\n pub use self::AtomicBinOp::*;\n pub use self::AtomicOrdering::*;\n+pub use self::SynchronizationScope::*;\n pub use self::FileType::*;\n pub use self::MetadataType::*;\n pub use self::AsmDialect::*;\n@@ -360,6 +361,13 @@ pub enum AtomicOrdering {\n     SequentiallyConsistent = 7\n }\n \n+#[repr(C)]\n+#[derive(Copy, Clone)]\n+pub enum SynchronizationScope {\n+    SingleThread = 0,\n+    CrossThread = 1\n+}\n+\n // Consts for the LLVMCodeGenFileType type (in include/llvm/c/TargetMachine.h)\n #[repr(C)]\n #[derive(Copy, Clone)]\n@@ -1533,7 +1541,9 @@ extern {\n                               SingleThreaded: Bool)\n                               -> ValueRef;\n \n-    pub fn LLVMBuildAtomicFence(B: BuilderRef, Order: AtomicOrdering);\n+    pub fn LLVMBuildAtomicFence(B: BuilderRef,\n+                                Order: AtomicOrdering,\n+                                Scope: SynchronizationScope);\n \n \n     /* Selected entries from the downcasts. */"}, {"sha": "d6ac412a4faead9678cc7711671e87e40a1e78df", "filename": "src/librustc_trans/trans/build.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dfb60802c5411881658d28b79b55606e27d9f827/src%2Flibrustc_trans%2Ftrans%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfb60802c5411881658d28b79b55606e27d9f827/src%2Flibrustc_trans%2Ftrans%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbuild.rs?ref=dfb60802c5411881658d28b79b55606e27d9f827", "patch": "@@ -12,7 +12,7 @@\n #![allow(non_snake_case)]\n \n use llvm;\n-use llvm::{CallConv, AtomicBinOp, AtomicOrdering, AsmDialect, AttrBuilder};\n+use llvm::{CallConv, AtomicBinOp, AtomicOrdering, SynchronizationScope, AsmDialect, AttrBuilder};\n use llvm::{Opcode, IntPredicate, RealPredicate};\n use llvm::{ValueRef, BasicBlockRef};\n use trans::common::*;\n@@ -965,9 +965,9 @@ pub fn CallWithConv(cx: Block,\n     B(cx).call_with_conv(fn_, args, conv, attributes)\n }\n \n-pub fn AtomicFence(cx: Block, order: AtomicOrdering) {\n+pub fn AtomicFence(cx: Block, order: AtomicOrdering, scope: SynchronizationScope) {\n     if cx.unreachable.get() { return; }\n-    B(cx).atomic_fence(order)\n+    B(cx).atomic_fence(order, scope)\n }\n \n pub fn Select(cx: Block, if_: ValueRef, then: ValueRef, else_: ValueRef) -> ValueRef {"}, {"sha": "497e0ae422c1fa3659c17eadb3e0140b518f5956", "filename": "src/librustc_trans/trans/builder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dfb60802c5411881658d28b79b55606e27d9f827/src%2Flibrustc_trans%2Ftrans%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfb60802c5411881658d28b79b55606e27d9f827/src%2Flibrustc_trans%2Ftrans%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbuilder.rs?ref=dfb60802c5411881658d28b79b55606e27d9f827", "patch": "@@ -11,7 +11,7 @@\n #![allow(dead_code)] // FFI wrappers\n \n use llvm;\n-use llvm::{CallConv, AtomicBinOp, AtomicOrdering, AsmDialect, AttrBuilder};\n+use llvm::{CallConv, AtomicBinOp, AtomicOrdering, SynchronizationScope, AsmDialect, AttrBuilder};\n use llvm::{Opcode, IntPredicate, RealPredicate, False};\n use llvm::{ValueRef, BasicBlockRef, BuilderRef, ModuleRef};\n use trans::base;\n@@ -989,9 +989,9 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         }\n     }\n \n-    pub fn atomic_fence(&self, order: AtomicOrdering) {\n+    pub fn atomic_fence(&self, order: AtomicOrdering, scope: SynchronizationScope) {\n         unsafe {\n-            llvm::LLVMBuildAtomicFence(self.llbuilder, order);\n+            llvm::LLVMBuildAtomicFence(self.llbuilder, order, scope);\n         }\n     }\n }"}, {"sha": "0667a51ecf70537e2100ff40747c7a54b1ad52e8", "filename": "src/librustc_trans/trans/intrinsic.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dfb60802c5411881658d28b79b55606e27d9f827/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfb60802c5411881658d28b79b55606e27d9f827/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs?ref=dfb60802c5411881658d28b79b55606e27d9f827", "patch": "@@ -763,7 +763,12 @@ pub fn trans_intrinsic_call<'a, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n                 }\n \n                 \"fence\" => {\n-                    AtomicFence(bcx, order);\n+                    AtomicFence(bcx, order, llvm::CrossThread);\n+                    C_nil(ccx)\n+                }\n+\n+                \"singlethreadfence\" => {\n+                    AtomicFence(bcx, order, llvm::SingleThread);\n                     C_nil(ccx)\n                 }\n "}, {"sha": "7561eddc72ef71353200fe14a3807cd9008eef03", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfb60802c5411881658d28b79b55606e27d9f827/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfb60802c5411881658d28b79b55606e27d9f827/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=dfb60802c5411881658d28b79b55606e27d9f827", "patch": "@@ -4910,7 +4910,7 @@ pub fn check_intrinsic_type(ccx: &CrateCtxt, it: &ast::ForeignItem) {\n                 (1, vec!(ty::mk_mut_ptr(tcx, param(ccx, 0)), param(ccx, 0)),\n                  param(ccx, 0))\n             }\n-            \"fence\" => {\n+            \"fence\" | \"singlethreadfence\" => {\n                 (0, Vec::new(), ty::mk_nil(tcx))\n             }\n             op => {"}, {"sha": "375c5fc746c5b80843b0d03ccb7c2c9aac447264", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dfb60802c5411881658d28b79b55606e27d9f827/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/dfb60802c5411881658d28b79b55606e27d9f827/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=dfb60802c5411881658d28b79b55606e27d9f827", "patch": "@@ -189,8 +189,10 @@ extern \"C\" LLVMValueRef LLVMBuildAtomicCmpXchg(LLVMBuilderRef B,\n                                                failure_order\n                                                ));\n }\n-extern \"C\" LLVMValueRef LLVMBuildAtomicFence(LLVMBuilderRef B, AtomicOrdering order) {\n-    return wrap(unwrap(B)->CreateFence(order));\n+extern \"C\" LLVMValueRef LLVMBuildAtomicFence(LLVMBuilderRef B,\n+                                             AtomicOrdering order,\n+                                             SynchronizationScope scope) {\n+    return wrap(unwrap(B)->CreateFence(order, scope));\n }\n \n extern \"C\" void LLVMSetDebug(int Enabled) {"}]}