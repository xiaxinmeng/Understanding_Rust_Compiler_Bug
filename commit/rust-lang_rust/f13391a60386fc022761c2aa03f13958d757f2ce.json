{"sha": "f13391a60386fc022761c2aa03f13958d757f2ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxMzM5MWE2MDM4NmZjMDIyNzYxYzJhYTAzZjEzOTU4ZDc1N2YyY2U=", "commit": {"author": {"name": "Josh Stone", "email": "cuviper@gmail.com", "date": "2016-11-17T07:28:14Z"}, "committer": {"name": "Josh Stone", "email": "cuviper@gmail.com", "date": "2016-11-17T07:28:14Z"}, "message": "rustbuild: allow dynamically linking LLVM\n\nThe makefiles and `mklldeps.py` called `llvm-config --shared-mode` to\nfind out if LLVM defaulted to shared or static libraries, and just went\nwith that.  But under rustbuild, `librustc_llvm/build.rs` was assuming\nthat LLVM should be static, and even forcing `--link-static` for 3.9+.\n\nNow that build script also uses `--shared-mode` to learn the default,\nwhich should work better for pre-3.9 configured for dynamic linking, as\nit wasn't possible back then to choose differently via `llvm-config`.\n\nFurther, the configure script now has a new `--enable-llvm-link-shared`\noption, which allows one to manually override `--link-shared` on 3.9+\ninstead of forcing static.", "tree": {"sha": "335415a69a25d7a43156a5c6fab2f4d1c705e490", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/335415a69a25d7a43156a5c6fab2f4d1c705e490"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f13391a60386fc022761c2aa03f13958d757f2ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f13391a60386fc022761c2aa03f13958d757f2ce", "html_url": "https://github.com/rust-lang/rust/commit/f13391a60386fc022761c2aa03f13958d757f2ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f13391a60386fc022761c2aa03f13958d757f2ce/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f22fdb03ebb684c1dee1b38990918df6a4537481", "url": "https://api.github.com/repos/rust-lang/rust/commits/f22fdb03ebb684c1dee1b38990918df6a4537481", "html_url": "https://github.com/rust-lang/rust/commit/f22fdb03ebb684c1dee1b38990918df6a4537481"}], "stats": {"total": 29, "additions": 26, "deletions": 3}, "files": [{"sha": "4cdf7d085db0aeec95142b240c9bc999e52a5f79", "filename": "configure", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f13391a60386fc022761c2aa03f13958d757f2ce/configure", "raw_url": "https://github.com/rust-lang/rust/raw/f13391a60386fc022761c2aa03f13958d757f2ce/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=f13391a60386fc022761c2aa03f13958d757f2ce", "patch": "@@ -624,6 +624,7 @@ opt ccache 0 \"invoke gcc/clang via ccache to reuse object files between builds\"\n opt local-rust 0 \"use an installed rustc rather than downloading a snapshot\"\n opt local-rebuild 0 \"assume local-rust matches the current version, for rebuilds; implies local-rust, and is implied if local-rust already matches the current version\"\n opt llvm-static-stdcpp 0 \"statically link to libstdc++ for LLVM\"\n+opt llvm-link-shared 0 \"prefer shared linking to LLVM (llvm-config --link-shared)\"\n opt rpath 1 \"build rpaths into rustc itself\"\n opt stage0-landing-pads 1 \"enable landing pads during bootstrap with stage0\"\n # This is used by the automation to produce single-target nightlies"}, {"sha": "236989dbcfeb50a4e610a3938ca8b3d1180d709d", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f13391a60386fc022761c2aa03f13958d757f2ce/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f13391a60386fc022761c2aa03f13958d757f2ce/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=f13391a60386fc022761c2aa03f13958d757f2ce", "patch": "@@ -212,6 +212,9 @@ pub fn rustc<'a>(build: &'a Build, target: &str, compiler: &Compiler<'a>) {\n         cargo.env(\"LLVM_STATIC_STDCPP\",\n                   compiler_file(build.cxx(target), \"libstdc++.a\"));\n     }\n+    if build.config.llvm_link_shared {\n+        cargo.env(\"LLVM_LINK_SHARED\", \"1\");\n+    }\n     if let Some(ref s) = build.config.rustc_default_linker {\n         cargo.env(\"CFG_DEFAULT_LINKER\", s);\n     }"}, {"sha": "17796a1eacf450023e6c7e8f0b636c70ad3b7e90", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f13391a60386fc022761c2aa03f13958d757f2ce/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f13391a60386fc022761c2aa03f13958d757f2ce/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=f13391a60386fc022761c2aa03f13958d757f2ce", "patch": "@@ -53,6 +53,7 @@ pub struct Config {\n     pub llvm_release_debuginfo: bool,\n     pub llvm_version_check: bool,\n     pub llvm_static_stdcpp: bool,\n+    pub llvm_link_shared: bool,\n \n     // rust codegen options\n     pub rust_optimize: bool,\n@@ -343,6 +344,7 @@ impl Config {\n                 (\"OPTIMIZE_LLVM\", self.llvm_optimize),\n                 (\"LLVM_VERSION_CHECK\", self.llvm_version_check),\n                 (\"LLVM_STATIC_STDCPP\", self.llvm_static_stdcpp),\n+                (\"LLVM_LINK_SHARED\", self.llvm_link_shared),\n                 (\"OPTIMIZE\", self.rust_optimize),\n                 (\"DEBUG_ASSERTIONS\", self.rust_debug_assertions),\n                 (\"DEBUGINFO\", self.rust_debuginfo),"}, {"sha": "eb4a1da484d13153b5161848a578884c809fd3fa", "filename": "src/librustc_llvm/build.rs", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f13391a60386fc022761c2aa03f13958d757f2ce/src%2Flibrustc_llvm%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f13391a60386fc022761c2aa03f13958d757f2ce/src%2Flibrustc_llvm%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fbuild.rs?ref=f13391a60386fc022761c2aa03f13958d757f2ce", "patch": "@@ -123,21 +123,38 @@ fn main() {\n        .cpp_link_stdlib(None) // we handle this below\n        .compile(\"librustllvm.a\");\n \n+    // Find out LLVM's default linking mode.\n+    let mut cmd = Command::new(&llvm_config);\n+    cmd.arg(\"--shared-mode\");\n+    let mut llvm_kind = if output(&mut cmd).trim() == \"shared\" {\n+        \"dylib\"\n+    } else {\n+        \"static\"\n+    };\n+\n     // Link in all LLVM libraries, if we're uwring the \"wrong\" llvm-config then\n     // we don't pick up system libs because unfortunately they're for the host\n     // of llvm-config, not the target that we're attempting to link.\n     let mut cmd = Command::new(&llvm_config);\n     cmd.arg(\"--libs\");\n \n-    // Force static linking with \"--link-static\" if available.\n+    // Force static linking with \"--link-static\" if available, or\n+    // force \"--link-shared\" if the configuration requested it.\n+    let llvm_link_shared = env::var_os(\"LLVM_LINK_SHARED\").is_some();\n     let mut version_cmd = Command::new(&llvm_config);\n     version_cmd.arg(\"--version\");\n     let version_output = output(&mut version_cmd);\n     let mut parts = version_output.split('.');\n     if let (Some(major), Some(minor)) = (parts.next().and_then(|s| s.parse::<u32>().ok()),\n                                          parts.next().and_then(|s| s.parse::<u32>().ok())) {\n         if major > 3 || (major == 3 && minor >= 9) {\n-            cmd.arg(\"--link-static\");\n+            if llvm_link_shared {\n+                cmd.arg(\"--link-shared\");\n+                llvm_kind = \"dylib\";\n+            } else {\n+                cmd.arg(\"--link-static\");\n+                llvm_kind = \"static\";\n+            }\n         }\n     }\n \n@@ -174,7 +191,7 @@ fn main() {\n         }\n \n         let kind = if name.starts_with(\"LLVM\") {\n-            \"static\"\n+            llvm_kind\n         } else {\n             \"dylib\"\n         };"}]}