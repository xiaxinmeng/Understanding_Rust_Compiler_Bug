{"sha": "16329402bff5115135804580386ffa8a9e89f1f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2MzI5NDAyYmZmNTExNTEzNTgwNDU4MDM4NmZmYThhOWU4OWYxZjk=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-10-09T11:19:15Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-10-27T15:54:12Z"}, "message": "syntax/attr: reduce reliance on parser", "tree": {"sha": "65a3229916ef3dbc779339485dd6e0e797feee15", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65a3229916ef3dbc779339485dd6e0e797feee15"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16329402bff5115135804580386ffa8a9e89f1f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16329402bff5115135804580386ffa8a9e89f1f9", "html_url": "https://github.com/rust-lang/rust/commit/16329402bff5115135804580386ffa8a9e89f1f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16329402bff5115135804580386ffa8a9e89f1f9/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7176b44a203322c834302f3b515f8c10a54f2c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7176b44a203322c834302f3b515f8c10a54f2c1", "html_url": "https://github.com/rust-lang/rust/commit/b7176b44a203322c834302f3b515f8c10a54f2c1"}], "stats": {"total": 68, "additions": 36, "deletions": 32}, "files": [{"sha": "3e240a855e280105f09943d20fe31568ab870cbe", "filename": "src/libsyntax/attr/mod.rs", "status": "modified", "additions": 2, "deletions": 27, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/16329402bff5115135804580386ffa8a9e89f1f9/src%2Flibsyntax%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16329402bff5115135804580386ffa8a9e89f1f9/src%2Flibsyntax%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fmod.rs?ref=16329402bff5115135804580386ffa8a9e89f1f9", "patch": "@@ -15,7 +15,7 @@ use crate::ast::{Lit, LitKind, Expr, Item, Local, Stmt, StmtKind, GenericParam};\n use crate::mut_visit::visit_clobber;\n use crate::source_map::{BytePos, Spanned};\n use crate::parse::lexer::comments::doc_comment_style;\n-use crate::parse::parser::Parser;\n+use crate::parse;\n use crate::parse::PResult;\n use crate::parse::token::{self, Token};\n use crate::ptr::P;\n@@ -280,35 +280,10 @@ impl Attribute {\n         self.item.meta(self.span)\n     }\n \n-    crate fn parse<'a, T, F>(&self, sess: &'a ParseSess, mut f: F) -> PResult<'a, T>\n-        where F: FnMut(&mut Parser<'a>) -> PResult<'a, T>,\n-    {\n-        let mut parser = Parser::new(\n-            sess,\n-            self.tokens.clone(),\n-            None,\n-            false,\n-            false,\n-            Some(\"attribute\"),\n-        );\n-        let result = f(&mut parser)?;\n-        if parser.token != token::Eof {\n-            parser.unexpected()?;\n-        }\n-        Ok(result)\n-    }\n-\n-    pub fn parse_derive_paths<'a>(&self, sess: &'a ParseSess) -> PResult<'a, Vec<Path>> {\n-        if self.tokens.is_empty() {\n-            return Ok(Vec::new());\n-        }\n-        self.parse(sess, |p| p.parse_derive_paths())\n-    }\n-\n     pub fn parse_meta<'a>(&self, sess: &'a ParseSess) -> PResult<'a, MetaItem> {\n         Ok(MetaItem {\n             path: self.path.clone(),\n-            kind: self.parse(sess, |parser| parser.parse_meta_item_kind())?,\n+            kind: parse::parse_in_attr(sess, self, |p| p.parse_meta_item_kind())?,\n             span: self.span,\n         })\n     }"}, {"sha": "6003fd1d2861a5cee84df5516bcf1c6e20e06db6", "filename": "src/libsyntax/config.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/16329402bff5115135804580386ffa8a9e89f1f9/src%2Flibsyntax%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16329402bff5115135804580386ffa8a9e89f1f9/src%2Flibsyntax%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fconfig.rs?ref=16329402bff5115135804580386ffa8a9e89f1f9", "patch": "@@ -10,6 +10,7 @@ use crate::attr;\n use crate::ast;\n use crate::edition::Edition;\n use crate::mut_visit::*;\n+use crate::parse;\n use crate::ptr::P;\n use crate::sess::ParseSess;\n use crate::symbol::sym;\n@@ -112,7 +113,8 @@ impl<'a> StripUnconfigured<'a> {\n             return vec![];\n         }\n \n-        let (cfg_predicate, expanded_attrs) = match attr.parse(self.sess, |p| p.parse_cfg_attr()) {\n+        let res = parse::parse_in_attr(self.sess, &attr, |p| p.parse_cfg_attr());\n+        let (cfg_predicate, expanded_attrs) = match res {\n             Ok(result) => result,\n             Err(mut e) => {\n                 e.emit();"}, {"sha": "c1114674f14f8dab0abe45c243cfc4b9e4f03cbf", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/16329402bff5115135804580386ffa8a9e89f1f9/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16329402bff5115135804580386ffa8a9e89f1f9/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=16329402bff5115135804580386ffa8a9e89f1f9", "patch": "@@ -96,8 +96,7 @@ pub mod json;\n pub mod ast;\n pub mod attr;\n pub mod source_map;\n-#[macro_use]\n-pub mod config;\n+#[macro_use] pub mod config;\n pub mod entry;\n pub mod feature_gate;\n pub mod mut_visit;"}, {"sha": "f5e416b722bbf01a161a01da9da60d9c4ad740a3", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/16329402bff5115135804580386ffa8a9e89f1f9/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16329402bff5115135804580386ffa8a9e89f1f9/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=16329402bff5115135804580386ffa8a9e89f1f9", "patch": "@@ -288,6 +288,27 @@ pub fn stream_to_parser_with_base_dir<'a>(\n     Parser::new(sess, stream, Some(base_dir), true, false, None)\n }\n \n+/// Runs the given subparser `f` on the tokens of the given `attr`'s item.\n+pub fn parse_in_attr<'a, T>(\n+    sess: &'a ParseSess,\n+    attr: &ast::Attribute,\n+    mut f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,\n+) -> PResult<'a, T> {\n+    let mut parser = Parser::new(\n+        sess,\n+        attr.tokens.clone(),\n+        None,\n+        false,\n+        false,\n+        Some(\"attribute\"),\n+    );\n+    let result = f(&mut parser)?;\n+    if parser.token != token::Eof {\n+        parser.unexpected()?;\n+    }\n+    Ok(result)\n+}\n+\n // NOTE(Centril): The following probably shouldn't be here but it acknowledges the\n // fact that architecturally, we are using parsing (read on below to understand why).\n "}, {"sha": "38a28224daba44d5c028aed686a5421f92e38f56", "filename": "src/libsyntax/parse/parser/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16329402bff5115135804580386ffa8a9e89f1f9/src%2Flibsyntax%2Fparse%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16329402bff5115135804580386ffa8a9e89f1f9/src%2Flibsyntax%2Fparse%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fpath.rs?ref=16329402bff5115135804580386ffa8a9e89f1f9", "patch": "@@ -130,7 +130,7 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parse a list of paths inside `#[derive(path_0, ..., path_n)]`.\n-    crate fn parse_derive_paths(&mut self) -> PResult<'a, Vec<Path>> {\n+    pub fn parse_derive_paths(&mut self) -> PResult<'a, Vec<Path>> {\n         self.expect(&token::OpenDelim(token::Paren))?;\n         let mut list = Vec::new();\n         while !self.eat(&token::CloseDelim(token::Paren)) {"}, {"sha": "8146566549812ee5c49ec2d513ad0f50157f7908", "filename": "src/libsyntax_expand/proc_macro.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/16329402bff5115135804580386ffa8a9e89f1f9/src%2Flibsyntax_expand%2Fproc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16329402bff5115135804580386ffa8a9e89f1f9/src%2Flibsyntax_expand%2Fproc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fproc_macro.rs?ref=16329402bff5115135804580386ffa8a9e89f1f9", "patch": "@@ -200,7 +200,14 @@ crate fn collect_derives(cx: &mut ExtCtxt<'_>, attrs: &mut Vec<ast::Attribute>)\n             return false;\n         }\n \n-        match attr.parse_derive_paths(cx.parse_sess) {\n+        let parse_derive_paths = |attr: &ast::Attribute| {\n+            if attr.tokens.is_empty() {\n+                return Ok(Vec::new());\n+            }\n+            parse::parse_in_attr(cx.parse_sess, attr, |p| p.parse_derive_paths())\n+        };\n+\n+        match parse_derive_paths(attr) {\n             Ok(traits) => {\n                 result.extend(traits);\n                 true"}]}