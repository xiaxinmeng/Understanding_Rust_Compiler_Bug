{"sha": "22e17989751427625f6187a0b7ec27d621ce8164", "node_id": "C_kwDOAAsO6NoAKDIyZTE3OTg5NzUxNDI3NjI1ZjYxODdhMGI3ZWMyN2Q2MjFjZTgxNjQ", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2021-10-21T17:48:56Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2021-10-21T19:14:34Z"}, "message": "ignore `potential_query_instability` in rustdoc", "tree": {"sha": "2993d86eeef1bcb79b4787a52ee5b59d325c0d14", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2993d86eeef1bcb79b4787a52ee5b59d325c0d14"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22e17989751427625f6187a0b7ec27d621ce8164", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22e17989751427625f6187a0b7ec27d621ce8164", "html_url": "https://github.com/rust-lang/rust/commit/22e17989751427625f6187a0b7ec27d621ce8164", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22e17989751427625f6187a0b7ec27d621ce8164/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00e5abe9b6f713b1d868f17694113a5d50d96c19", "url": "https://api.github.com/repos/rust-lang/rust/commits/00e5abe9b6f713b1d868f17694113a5d50d96c19", "html_url": "https://github.com/rust-lang/rust/commit/00e5abe9b6f713b1d868f17694113a5d50d96c19"}], "stats": {"total": 15, "additions": 15, "deletions": 0}, "files": [{"sha": "e9dcc120200d0436e5b27c3f094b335860c5d461", "filename": "compiler/rustc_lint/src/internal.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/22e17989751427625f6187a0b7ec27d621ce8164/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e17989751427625f6187a0b7ec27d621ce8164/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Finternal.rs?ref=22e17989751427625f6187a0b7ec27d621ce8164", "patch": "@@ -59,6 +59,21 @@ declare_lint_pass!(QueryStability => [POTENTIAL_QUERY_INSTABILITY]);\n \n impl LateLintPass<'_> for QueryStability {\n     fn check_expr(&mut self, cx: &LateContext<'_>, expr: &Expr<'_>) {\n+        // FIXME(rustdoc): This lint uses typecheck results, causing rustdoc to\n+        // error if there are resolution failures.\n+        //\n+        // As internal lints are currently always run if there are `unstable_options`,\n+        // they are added to the lint store of rustdoc. Internal lints are also\n+        // not used via the `lint_mod` query. Crate lints run outside of a query\n+        // so rustdoc currently doesn't disable them.\n+        //\n+        // Instead of relying on this, either change crate lints to a query disabled by\n+        // rustdoc, only run internal lints if the user is explicitly opting in\n+        // or figure out a different way to avoid running lints for rustdoc.\n+        if cx.tcx.sess.opts.actually_rustdoc {\n+            return;\n+        }\n+\n         let (def_id, span) = match expr.kind {\n             ExprKind::Path(ref path) if let Some(def_id) = cx.qpath_res(path, expr.hir_id).opt_def_id() => {\n                 (def_id, expr.span)"}]}