{"sha": "5e320046ecc286607885cc839df662c0c0706168", "node_id": "C_kwDOAAsO6NoAKDVlMzIwMDQ2ZWNjMjg2NjA3ODg1Y2M4MzlkZjY2MmMwYzA3MDYxNjg", "commit": {"author": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2022-05-31T18:42:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-05-31T18:42:34Z"}, "message": "Merge pull request #246 from rust-lang/feature/bitmask_array\n\nAdd bitmask array", "tree": {"sha": "3c14fb589a45e671743c687475ee229ebef157f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c14fb589a45e671743c687475ee229ebef157f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e320046ecc286607885cc839df662c0c0706168", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJilmGaCRBK7hj4Ov3rIwAANZ8IAAfkyMls/e1DuOKh/utlZhrT\nUfN5EC31MfsDOiHPAuzxd4GAQmRoqtv+aTZK1TQIAhpwTAUxw8+0XO27BO4oY62x\nlk3/DsEILflVZS8yeXjgOB6f9za0602H0SEiKeKywhs/vyMZA3Awt6G08iF3an+o\nQsQdDuZyCMtLtuukInWnp/wHaQenNX3sMYGWYKFV0VL+9VBy8IeQ7wN7n/yRRWTc\nYCFYQGTvm4JS5pBfL5syRhiiiKCYUHlK28IOMapLCPfCcU8v/I9NvwjToKl4jCp5\n97yMfrKALhl0KcDkDPTlHlhkpY3NdViJk9Abh/682tZKTbxHoezNuCPDogeD/bw=\n=zeqh\n-----END PGP SIGNATURE-----\n", "payload": "tree 3c14fb589a45e671743c687475ee229ebef157f9\nparent c44a608f5fa85cc070d5b87f81281804567bb9c9\nparent bca8dec404c18d9f4ef9fa1ec5f19766910d0c84\nauthor Caleb Zulawski <caleb.zulawski@gmail.com> 1654022554 -0400\ncommitter GitHub <noreply@github.com> 1654022554 -0400\n\nMerge pull request #246 from rust-lang/feature/bitmask_array\n\nAdd bitmask array"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e320046ecc286607885cc839df662c0c0706168", "html_url": "https://github.com/rust-lang/rust/commit/5e320046ecc286607885cc839df662c0c0706168", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e320046ecc286607885cc839df662c0c0706168/comments", "author": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c44a608f5fa85cc070d5b87f81281804567bb9c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/c44a608f5fa85cc070d5b87f81281804567bb9c9", "html_url": "https://github.com/rust-lang/rust/commit/c44a608f5fa85cc070d5b87f81281804567bb9c9"}, {"sha": "bca8dec404c18d9f4ef9fa1ec5f19766910d0c84", "url": "https://api.github.com/repos/rust-lang/rust/commits/bca8dec404c18d9f4ef9fa1ec5f19766910d0c84", "html_url": "https://github.com/rust-lang/rust/commit/bca8dec404c18d9f4ef9fa1ec5f19766910d0c84"}], "stats": {"total": 143, "additions": 143, "deletions": 0}, "files": [{"sha": "11d7288eccb2b8d4ad63bad31440e7048b68d3a6", "filename": "crates/core_simd/src/masks.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5e320046ecc286607885cc839df662c0c0706168/crates%2Fcore_simd%2Fsrc%2Fmasks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e320046ecc286607885cc839df662c0c0706168/crates%2Fcore_simd%2Fsrc%2Fmasks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fmasks.rs?ref=5e320046ecc286607885cc839df662c0c0706168", "patch": "@@ -15,6 +15,9 @@ mod mask_impl;\n mod to_bitmask;\n pub use to_bitmask::ToBitMask;\n \n+#[cfg(feature = \"generic_const_exprs\")]\n+pub use to_bitmask::{bitmask_len, ToBitMaskArray};\n+\n use crate::simd::{intrinsics, LaneCount, Simd, SimdElement, SimdPartialEq, SupportedLaneCount};\n use core::cmp::Ordering;\n use core::{fmt, mem};"}, {"sha": "365ecc0a3251ec0687515ec443c1b8e505e939b2", "filename": "crates/core_simd/src/masks/bitmask.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5e320046ecc286607885cc839df662c0c0706168/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fbitmask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e320046ecc286607885cc839df662c0c0706168/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fbitmask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fbitmask.rs?ref=5e320046ecc286607885cc839df662c0c0706168", "patch": "@@ -115,6 +115,26 @@ where\n         unsafe { Self(intrinsics::simd_bitmask(value), PhantomData) }\n     }\n \n+    #[cfg(feature = \"generic_const_exprs\")]\n+    #[inline]\n+    #[must_use = \"method returns a new array and does not mutate the original value\"]\n+    pub fn to_bitmask_array<const N: usize>(self) -> [u8; N] {\n+        assert!(core::mem::size_of::<Self>() == N);\n+\n+        // Safety: converting an integer to an array of bytes of the same size is safe\n+        unsafe { core::mem::transmute_copy(&self.0) }\n+    }\n+\n+    #[cfg(feature = \"generic_const_exprs\")]\n+    #[inline]\n+    #[must_use = \"method returns a new mask and does not mutate the original value\"]\n+    pub fn from_bitmask_array<const N: usize>(bitmask: [u8; N]) -> Self {\n+        assert!(core::mem::size_of::<Self>() == N);\n+\n+        // Safety: converting an array of bytes to an integer of the same size is safe\n+        Self(unsafe { core::mem::transmute_copy(&bitmask) }, PhantomData)\n+    }\n+\n     #[inline]\n     pub fn to_bitmask_integer<U>(self) -> U\n     where"}, {"sha": "adf0fcbeae2bd2af551e083312cc4dadd1924e4d", "filename": "crates/core_simd/src/masks/full_masks.rs", "status": "modified", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/5e320046ecc286607885cc839df662c0c0706168/crates%2Fcore_simd%2Fsrc%2Fmasks%2Ffull_masks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e320046ecc286607885cc839df662c0c0706168/crates%2Fcore_simd%2Fsrc%2Fmasks%2Ffull_masks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fmasks%2Ffull_masks.rs?ref=5e320046ecc286607885cc839df662c0c0706168", "patch": "@@ -4,6 +4,9 @@ use super::MaskElement;\n use crate::simd::intrinsics;\n use crate::simd::{LaneCount, Simd, SupportedLaneCount, ToBitMask};\n \n+#[cfg(feature = \"generic_const_exprs\")]\n+use crate::simd::ToBitMaskArray;\n+\n #[repr(transparent)]\n pub struct Mask<T, const LANES: usize>(Simd<T, LANES>)\n where\n@@ -139,6 +142,68 @@ where\n         unsafe { Mask(intrinsics::simd_cast(self.0)) }\n     }\n \n+    #[cfg(feature = \"generic_const_exprs\")]\n+    #[inline]\n+    #[must_use = \"method returns a new array and does not mutate the original value\"]\n+    pub fn to_bitmask_array<const N: usize>(self) -> [u8; N]\n+    where\n+        super::Mask<T, LANES>: ToBitMaskArray,\n+        [(); <super::Mask<T, LANES> as ToBitMaskArray>::BYTES]: Sized,\n+    {\n+        assert_eq!(<super::Mask<T, LANES> as ToBitMaskArray>::BYTES, N);\n+\n+        // Safety: N is the correct bitmask size\n+        unsafe {\n+            // Compute the bitmask\n+            let bitmask: [u8; <super::Mask<T, LANES> as ToBitMaskArray>::BYTES] =\n+                intrinsics::simd_bitmask(self.0);\n+\n+            // Transmute to the return type, previously asserted to be the same size\n+            let mut bitmask: [u8; N] = core::mem::transmute_copy(&bitmask);\n+\n+            // LLVM assumes bit order should match endianness\n+            if cfg!(target_endian = \"big\") {\n+                for x in bitmask.as_mut() {\n+                    *x = x.reverse_bits();\n+                }\n+            };\n+\n+            bitmask\n+        }\n+    }\n+\n+    #[cfg(feature = \"generic_const_exprs\")]\n+    #[inline]\n+    #[must_use = \"method returns a new mask and does not mutate the original value\"]\n+    pub fn from_bitmask_array<const N: usize>(mut bitmask: [u8; N]) -> Self\n+    where\n+        super::Mask<T, LANES>: ToBitMaskArray,\n+        [(); <super::Mask<T, LANES> as ToBitMaskArray>::BYTES]: Sized,\n+    {\n+        assert_eq!(<super::Mask<T, LANES> as ToBitMaskArray>::BYTES, N);\n+\n+        // Safety: N is the correct bitmask size\n+        unsafe {\n+            // LLVM assumes bit order should match endianness\n+            if cfg!(target_endian = \"big\") {\n+                for x in bitmask.as_mut() {\n+                    *x = x.reverse_bits();\n+                }\n+            }\n+\n+            // Transmute to the bitmask type, previously asserted to be the same size\n+            let bitmask: [u8; <super::Mask<T, LANES> as ToBitMaskArray>::BYTES] =\n+                core::mem::transmute_copy(&bitmask);\n+\n+            // Compute the regular mask\n+            Self::from_int_unchecked(intrinsics::simd_select_bitmask(\n+                bitmask,\n+                Self::splat(true).to_int(),\n+                Self::splat(false).to_int(),\n+            ))\n+        }\n+    }\n+\n     #[inline]\n     pub(crate) fn to_bitmask_integer<U: ReverseBits>(self) -> U\n     where"}, {"sha": "954f88ea51118d31cc43bd7722bac078dc0c923e", "filename": "crates/core_simd/src/masks/to_bitmask.rs", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/5e320046ecc286607885cc839df662c0c0706168/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fto_bitmask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e320046ecc286607885cc839df662c0c0706168/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fto_bitmask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fto_bitmask.rs?ref=5e320046ecc286607885cc839df662c0c0706168", "patch": "@@ -31,6 +31,25 @@ pub unsafe trait ToBitMask: Sealed {\n     fn from_bitmask(bitmask: Self::BitMask) -> Self;\n }\n \n+/// Converts masks to and from byte array bitmasks.\n+///\n+/// Each bit of the bitmask corresponds to a mask lane, starting with the LSB of the first byte.\n+///\n+/// # Safety\n+/// This trait is `unsafe` and sealed, since the `BYTES` value must match the number of lanes in\n+/// the mask.\n+#[cfg(feature = \"generic_const_exprs\")]\n+pub unsafe trait ToBitMaskArray: Sealed {\n+    /// The length of the bitmask array.\n+    const BYTES: usize;\n+\n+    /// Converts a mask to a bitmask.\n+    fn to_bitmask_array(self) -> [u8; Self::BYTES];\n+\n+    /// Converts a bitmask to a mask.\n+    fn from_bitmask_array(bitmask: [u8; Self::BYTES]) -> Self;\n+}\n+\n macro_rules! impl_integer_intrinsic {\n     { $(unsafe impl ToBitMask<BitMask=$int:ty> for Mask<_, $lanes:literal>)* } => {\n         $(\n@@ -58,3 +77,25 @@ impl_integer_intrinsic! {\n     unsafe impl ToBitMask<BitMask=u32> for Mask<_, 32>\n     unsafe impl ToBitMask<BitMask=u64> for Mask<_, 64>\n }\n+\n+/// Returns the minimum numnber of bytes in a bitmask with `lanes` lanes.\n+#[cfg(feature = \"generic_const_exprs\")]\n+pub const fn bitmask_len(lanes: usize) -> usize {\n+    (lanes + 7) / 8\n+}\n+\n+#[cfg(feature = \"generic_const_exprs\")]\n+unsafe impl<T: MaskElement, const LANES: usize> ToBitMaskArray for Mask<T, LANES>\n+where\n+    LaneCount<LANES>: SupportedLaneCount,\n+{\n+    const BYTES: usize = bitmask_len(LANES);\n+\n+    fn to_bitmask_array(self) -> [u8; Self::BYTES] {\n+        self.0.to_bitmask_array()\n+    }\n+\n+    fn from_bitmask_array(bitmask: [u8; Self::BYTES]) -> Self {\n+        Mask(mask_impl::Mask::from_bitmask_array(bitmask))\n+    }\n+}"}, {"sha": "673d0db93fee5c65544734858431a55ebf8c78a1", "filename": "crates/core_simd/tests/masks.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5e320046ecc286607885cc839df662c0c0706168/crates%2Fcore_simd%2Ftests%2Fmasks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e320046ecc286607885cc839df662c0c0706168/crates%2Fcore_simd%2Ftests%2Fmasks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fmasks.rs?ref=5e320046ecc286607885cc839df662c0c0706168", "patch": "@@ -122,6 +122,20 @@ macro_rules! test_mask_api {\n                 cast_impl::<i64>();\n                 cast_impl::<isize>();\n             }\n+\n+            #[cfg(feature = \"generic_const_exprs\")]\n+            #[test]\n+            fn roundtrip_bitmask_array_conversion() {\n+                use core_simd::ToBitMaskArray;\n+                let values = [\n+                    true, false, false, true, false, false, true, false,\n+                    true, true, false, false, false, false, false, true,\n+                ];\n+                let mask = core_simd::Mask::<$type, 16>::from_array(values);\n+                let bitmask = mask.to_bitmask_array();\n+                assert_eq!(bitmask, [0b01001001, 0b10000011]);\n+                assert_eq!(core_simd::Mask::<$type, 16>::from_bitmask_array(bitmask), mask);\n+            }\n         }\n     }\n }"}]}