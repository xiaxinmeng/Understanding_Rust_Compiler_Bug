{"sha": "100a4698defac5d060ecb89c30d9c5f0dc770c15", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwMGE0Njk4ZGVmYWM1ZDA2MGVjYjg5YzMwZDljNWYwZGM3NzBjMTU=", "commit": {"author": {"name": "Piotr Czarnecki", "email": "pioczarn@gmail.com", "date": "2015-12-03T07:06:16Z"}, "committer": {"name": "Piotr Czarnecki", "email": "pioczarn@gmail.com", "date": "2016-01-05T10:02:43Z"}, "message": "Ran rustfmt", "tree": {"sha": "00cbe13828164a22d698fb3b29a404b649711b38", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00cbe13828164a22d698fb3b29a404b649711b38"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/100a4698defac5d060ecb89c30d9c5f0dc770c15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/100a4698defac5d060ecb89c30d9c5f0dc770c15", "html_url": "https://github.com/rust-lang/rust/commit/100a4698defac5d060ecb89c30d9c5f0dc770c15", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/100a4698defac5d060ecb89c30d9c5f0dc770c15/comments", "author": {"login": "pczarn", "id": 3356767, "node_id": "MDQ6VXNlcjMzNTY3Njc=", "avatar_url": "https://avatars.githubusercontent.com/u/3356767?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pczarn", "html_url": "https://github.com/pczarn", "followers_url": "https://api.github.com/users/pczarn/followers", "following_url": "https://api.github.com/users/pczarn/following{/other_user}", "gists_url": "https://api.github.com/users/pczarn/gists{/gist_id}", "starred_url": "https://api.github.com/users/pczarn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pczarn/subscriptions", "organizations_url": "https://api.github.com/users/pczarn/orgs", "repos_url": "https://api.github.com/users/pczarn/repos", "events_url": "https://api.github.com/users/pczarn/events{/privacy}", "received_events_url": "https://api.github.com/users/pczarn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pczarn", "id": 3356767, "node_id": "MDQ6VXNlcjMzNTY3Njc=", "avatar_url": "https://avatars.githubusercontent.com/u/3356767?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pczarn", "html_url": "https://github.com/pczarn", "followers_url": "https://api.github.com/users/pczarn/followers", "following_url": "https://api.github.com/users/pczarn/following{/other_user}", "gists_url": "https://api.github.com/users/pczarn/gists{/gist_id}", "starred_url": "https://api.github.com/users/pczarn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pczarn/subscriptions", "organizations_url": "https://api.github.com/users/pczarn/orgs", "repos_url": "https://api.github.com/users/pczarn/repos", "events_url": "https://api.github.com/users/pczarn/events{/privacy}", "received_events_url": "https://api.github.com/users/pczarn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72a5bb73c1056dcb34fad4af138258603bb36d18", "url": "https://api.github.com/repos/rust-lang/rust/commits/72a5bb73c1056dcb34fad4af138258603bb36d18", "html_url": "https://github.com/rust-lang/rust/commit/72a5bb73c1056dcb34fad4af138258603bb36d18"}], "stats": {"total": 54, "additions": 19, "deletions": 35}, "files": [{"sha": "8aafc115a2960121e3e83bd43bda96a2228a8f3d", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 19, "deletions": 35, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/100a4698defac5d060ecb89c30d9c5f0dc770c15/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/100a4698defac5d060ecb89c30d9c5f0dc770c15/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=100a4698defac5d060ecb89c30d9c5f0dc770c15", "patch": "@@ -630,11 +630,7 @@ mod tests {\n     #[bench]\n     pub fn bench_copy_nonarena(b: &mut Bencher) {\n         b.iter(|| {\n-            let _: Box<_> = Box::new(Point {\n-                x: 1,\n-                y: 2,\n-                z: 3\n-            });\n+            let _: Box<_> = Box::new(Point { x: 1, y: 2, z: 3 });\n         })\n     }\n \n@@ -676,11 +672,7 @@ mod tests {\n             for _ in 0..100 {\n                 arena.alloc(|| ());\n             }\n-            arena.alloc(|| Point {\n-                x: 1,\n-                y: 2,\n-                z: 3,\n-            });\n+            arena.alloc(|| Point { x: 1, y: 2, z: 3 });\n         }\n     }\n \n@@ -690,11 +682,7 @@ mod tests {\n         for _ in 0..10 {\n             arena.clear();\n             for _ in 0..10000 {\n-                arena.alloc(Point {\n-                    x: 1,\n-                    y: 2,\n-                    z: 3,\n-                });\n+                arena.alloc(Point { x: 1, y: 2, z: 3 });\n             }\n         }\n     }\n@@ -705,14 +693,12 @@ mod tests {\n         for _ in 0..10 {\n             arena.clear();\n             for _ in 0..10000 {\n-                arena.alloc(|| Point {\n-                    x: 1,\n-                    y: 2,\n-                    z: 3,\n-                });\n-                arena.alloc(|| Noncopy {\n-                    string: \"hello world\".to_string(),\n-                    array: vec![],\n+                arena.alloc(|| Point { x: 1, y: 2, z: 3 });\n+                arena.alloc(|| {\n+                    Noncopy {\n+                        string: \"hello world\".to_string(),\n+                        array: vec![],\n+                    }\n                 });\n             }\n         }\n@@ -722,11 +708,7 @@ mod tests {\n     pub fn test_arena_alloc_bytes() {\n         let arena = Arena::new();\n         for i in 0..10000 {\n-            arena.alloc(|| Point {\n-                x: 1,\n-                y: 2,\n-                z: 3,\n-            });\n+            arena.alloc(|| Point { x: 1, y: 2, z: 3 });\n             for byte in arena.alloc_bytes(i % 42).iter_mut() {\n                 *byte = i as u8;\n             }\n@@ -754,10 +736,10 @@ mod tests {\n         for i in 0..10 {\n             // Arena allocate something with drop glue to make sure it\n             // doesn't leak.\n-            arena.alloc(|| { Rc::new(i) });\n+            arena.alloc(|| Rc::new(i));\n             // Allocate something with funny size and alignment, to keep\n             // things interesting.\n-            arena.alloc(|| { [0u8, 1, 2] });\n+            arena.alloc(|| [0u8, 1, 2]);\n         }\n         // Now, panic while allocating\n         arena.alloc::<Rc<i32>, _>(|| {\n@@ -771,7 +753,7 @@ mod tests {\n         b.iter(|| {\n             arena.alloc(Noncopy {\n                 string: \"hello world\".to_string(),\n-                array: vec!( 1, 2, 3, 4, 5 ),\n+                array: vec![1, 2, 3, 4, 5],\n             })\n         })\n     }\n@@ -781,7 +763,7 @@ mod tests {\n         b.iter(|| {\n             let _: Box<_> = Box::new(Noncopy {\n                 string: \"hello world\".to_string(),\n-                array: vec!( 1, 2, 3, 4, 5 ),\n+                array: vec![1, 2, 3, 4, 5],\n             });\n         })\n     }\n@@ -790,9 +772,11 @@ mod tests {\n     pub fn bench_noncopy_old_arena(b: &mut Bencher) {\n         let arena = Arena::new();\n         b.iter(|| {\n-            arena.alloc(|| Noncopy {\n-                string: \"hello world\".to_string(),\n-                array: vec!( 1, 2, 3, 4, 5 ),\n+            arena.alloc(|| {\n+                Noncopy {\n+                    string: \"hello world\".to_string(),\n+                    array: vec![1, 2, 3, 4, 5],\n+                }\n             })\n         })\n     }"}]}