{"sha": "be09427b116098d9dec63694e51cbddac7f958e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlMDk0MjdiMTE2MDk4ZDlkZWM2MzY5NGU1MWNiZGRhYzdmOTU4ZTU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-06-15T15:45:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-06-15T15:45:02Z"}, "message": "Rollup merge of #61813 - matthewjasper:remove-unnecessary-symbol-ops, r=petrochenkov\n\nRemove some unnecessary symbol interner ops\n\n* Don't gensym symbols that don't need to worry about colliding with other symbols\n* Use symbol constants instead of interning string literals in a few places.\n* Don't generate a module in `__register_diagnostic`\n\nr? @petrochenkov", "tree": {"sha": "66b9ebfbf19e5de8b7dd13b74e721dbca8b51536", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66b9ebfbf19e5de8b7dd13b74e721dbca8b51536"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be09427b116098d9dec63694e51cbddac7f958e5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdBRJ/CRBK7hj4Ov3rIwAAdHIIADE1J99sRhrfrb1PseeIwCo6\nTbwAJA+2nfqwT6l8s4YTq94LMITGCppU0jpDVuNtYqOr6aMCDGM6DGKLBGFsVLvL\nu1rjvc20BEiuMGxgGnUc6WsJ21KGuFDsQ53llHedwpJkbtkcP0vSjAc+1F9xAqgm\n0chFJ59E6YqNOVjiwicbDfJOGYRmqcbIautpyQkGCZtVsvEYy3UF5ULa5PFHUeq/\nlZsWpqhJQ5ynG8bzfb79CHL6LiZaJqqNzgjoKp900PDD27s/F8drXLsnhuWCG+8Y\nzr78IWkiJcu/Xhc2qQ9IWX2JBu8+n4uBu2AJOaZ28o8LQGmg5yMFWecVBRdcNZg=\n=gEZ7\n-----END PGP SIGNATURE-----\n", "payload": "tree 66b9ebfbf19e5de8b7dd13b74e721dbca8b51536\nparent 9e810a277574dc77e8001cc955bfa19d6b574696\nparent 5c84cd37cbfc16ef80bbad1f6416419d3cf06df6\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1560613502 +0200\ncommitter GitHub <noreply@github.com> 1560613502 +0200\n\nRollup merge of #61813 - matthewjasper:remove-unnecessary-symbol-ops, r=petrochenkov\n\nRemove some unnecessary symbol interner ops\n\n* Don't gensym symbols that don't need to worry about colliding with other symbols\n* Use symbol constants instead of interning string literals in a few places.\n* Don't generate a module in `__register_diagnostic`\n\nr? @petrochenkov\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be09427b116098d9dec63694e51cbddac7f958e5", "html_url": "https://github.com/rust-lang/rust/commit/be09427b116098d9dec63694e51cbddac7f958e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be09427b116098d9dec63694e51cbddac7f958e5/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e810a277574dc77e8001cc955bfa19d6b574696", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e810a277574dc77e8001cc955bfa19d6b574696", "html_url": "https://github.com/rust-lang/rust/commit/9e810a277574dc77e8001cc955bfa19d6b574696"}, {"sha": "5c84cd37cbfc16ef80bbad1f6416419d3cf06df6", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c84cd37cbfc16ef80bbad1f6416419d3cf06df6", "html_url": "https://github.com/rust-lang/rust/commit/5c84cd37cbfc16ef80bbad1f6416419d3cf06df6"}], "stats": {"total": 93, "additions": 40, "deletions": 53}, "files": [{"sha": "e3cd2948d7af5c12b82bafa1bae47c7fa0180d86", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be09427b116098d9dec63694e51cbddac7f958e5/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be09427b116098d9dec63694e51cbddac7f958e5/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=be09427b116098d9dec63694e51cbddac7f958e5", "patch": "@@ -305,7 +305,7 @@ impl<'a> Resolver<'a> {\n                 }\n \n                 // Empty groups `a::b::{}` are turned into synthetic `self` imports\n-                // `a::b::c::{self as __dummy}`, so that their prefixes are correctly\n+                // `a::b::c::{self as _}`, so that their prefixes are correctly\n                 // resolved and checked for privacy/stability/etc.\n                 if items.is_empty() && !empty_for_self(&prefix) {\n                     let new_span = prefix[prefix.len() - 1].ident.span;\n@@ -314,7 +314,7 @@ impl<'a> Resolver<'a> {\n                             Ident::new(kw::SelfLower, new_span)\n                         ),\n                         kind: ast::UseTreeKind::Simple(\n-                            Some(Ident::from_str_and_span(\"__dummy\", new_span).gensym()),\n+                            Some(Ident::new(kw::Underscore, new_span)),\n                             ast::DUMMY_NODE_ID,\n                             ast::DUMMY_NODE_ID,\n                         ),"}, {"sha": "7f05e0f477c2d41a19a159b9bae27d5eac71d266", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 20, "deletions": 25, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/be09427b116098d9dec63694e51cbddac7f958e5/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be09427b116098d9dec63694e51cbddac7f958e5/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=be09427b116098d9dec63694e51cbddac7f958e5", "patch": "@@ -1519,37 +1519,32 @@ impl<'a> NameBinding<'a> {\n ///\n /// All other types are defined somewhere and possibly imported, but the primitive ones need\n /// special handling, since they have no place of origin.\n-#[derive(Default)]\n struct PrimitiveTypeTable {\n     primitive_types: FxHashMap<Name, PrimTy>,\n }\n \n impl PrimitiveTypeTable {\n     fn new() -> PrimitiveTypeTable {\n-        let mut table = PrimitiveTypeTable::default();\n-\n-        table.intern(\"bool\", Bool);\n-        table.intern(\"char\", Char);\n-        table.intern(\"f32\", Float(FloatTy::F32));\n-        table.intern(\"f64\", Float(FloatTy::F64));\n-        table.intern(\"isize\", Int(IntTy::Isize));\n-        table.intern(\"i8\", Int(IntTy::I8));\n-        table.intern(\"i16\", Int(IntTy::I16));\n-        table.intern(\"i32\", Int(IntTy::I32));\n-        table.intern(\"i64\", Int(IntTy::I64));\n-        table.intern(\"i128\", Int(IntTy::I128));\n-        table.intern(\"str\", Str);\n-        table.intern(\"usize\", Uint(UintTy::Usize));\n-        table.intern(\"u8\", Uint(UintTy::U8));\n-        table.intern(\"u16\", Uint(UintTy::U16));\n-        table.intern(\"u32\", Uint(UintTy::U32));\n-        table.intern(\"u64\", Uint(UintTy::U64));\n-        table.intern(\"u128\", Uint(UintTy::U128));\n-        table\n-    }\n-\n-    fn intern(&mut self, string: &str, primitive_type: PrimTy) {\n-        self.primitive_types.insert(Symbol::intern(string), primitive_type);\n+        let mut table = FxHashMap::default();\n+\n+        table.insert(sym::bool, Bool);\n+        table.insert(sym::char, Char);\n+        table.insert(sym::f32, Float(FloatTy::F32));\n+        table.insert(sym::f64, Float(FloatTy::F64));\n+        table.insert(sym::isize, Int(IntTy::Isize));\n+        table.insert(sym::i8, Int(IntTy::I8));\n+        table.insert(sym::i16, Int(IntTy::I16));\n+        table.insert(sym::i32, Int(IntTy::I32));\n+        table.insert(sym::i64, Int(IntTy::I64));\n+        table.insert(sym::i128, Int(IntTy::I128));\n+        table.insert(sym::str, Str);\n+        table.insert(sym::usize, Uint(UintTy::Usize));\n+        table.insert(sym::u8, Uint(UintTy::U8));\n+        table.insert(sym::u16, Uint(UintTy::U16));\n+        table.insert(sym::u32, Uint(UintTy::U32));\n+        table.insert(sym::u64, Uint(UintTy::U64));\n+        table.insert(sym::u128, Uint(UintTy::U128));\n+        Self { primitive_types: table }\n     }\n }\n "}, {"sha": "ee640a1603a6ca688c54a648102efa6b7bee3d7a", "filename": "src/libsyntax/diagnostics/plugin.rs", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/be09427b116098d9dec63694e51cbddac7f958e5/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be09427b116098d9dec63694e51cbddac7f958e5/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs?ref=be09427b116098d9dec63694e51cbddac7f958e5", "patch": "@@ -120,19 +120,7 @@ pub fn expand_register_diagnostic<'cx>(ecx: &'cx mut ExtCtxt<'_>,\n         }\n     });\n \n-    let span = span.apply_mark(ecx.current_expansion.mark);\n-\n-    let name = Ident::from_str_and_span(&format!(\"__register_diagnostic_{}\", code), span).gensym();\n-\n-    MacEager::items(smallvec![\n-        ecx.item_mod(\n-            span,\n-            span,\n-            name,\n-            vec![],\n-            vec![],\n-        )\n-    ])\n+    MacEager::items(smallvec![])\n }\n \n #[allow(deprecated)]"}, {"sha": "6b699464ba9a893f94ced6cc9436ba714015327e", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/be09427b116098d9dec63694e51cbddac7f958e5/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be09427b116098d9dec63694e51cbddac7f958e5/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=be09427b116098d9dec63694e51cbddac7f958e5", "patch": "@@ -249,8 +249,9 @@ pub fn compile(\n     def: &ast::Item,\n     edition: Edition\n ) -> SyntaxExtension {\n-    let lhs_nm = ast::Ident::from_str(\"lhs\").gensym();\n-    let rhs_nm = ast::Ident::from_str(\"rhs\").gensym();\n+    let lhs_nm = ast::Ident::new(sym::lhs, def.span);\n+    let rhs_nm = ast::Ident::new(sym::rhs, def.span);\n+    let tt_spec = ast::Ident::new(sym::tt, def.span);\n \n     // Parse the macro_rules! invocation\n     let body = match def.node {\n@@ -266,9 +267,9 @@ pub fn compile(\n     let argument_gram = vec![\n         quoted::TokenTree::Sequence(DelimSpan::dummy(), Lrc::new(quoted::SequenceRepetition {\n             tts: vec![\n-                quoted::TokenTree::MetaVarDecl(def.span, lhs_nm, ast::Ident::from_str(\"tt\")),\n+                quoted::TokenTree::MetaVarDecl(def.span, lhs_nm, tt_spec),\n                 quoted::TokenTree::token(token::FatArrow, def.span),\n-                quoted::TokenTree::MetaVarDecl(def.span, rhs_nm, ast::Ident::from_str(\"tt\")),\n+                quoted::TokenTree::MetaVarDecl(def.span, rhs_nm, tt_spec),\n             ],\n             separator: Some(Token::new(\n                 if body.legacy { token::Semi } else { token::Comma }, def.span\n@@ -1115,10 +1116,9 @@ fn has_legal_fragment_specifier(sess: &ParseSess,\n                                 tok: &quoted::TokenTree) -> Result<(), String> {\n     debug!(\"has_legal_fragment_specifier({:?})\", tok);\n     if let quoted::TokenTree::MetaVarDecl(_, _, ref frag_spec) = *tok {\n-        let frag_name = frag_spec.as_str();\n         let frag_span = tok.span();\n-        if !is_legal_fragment_specifier(sess, features, attrs, &frag_name, frag_span) {\n-            return Err(frag_name.to_string());\n+        if !is_legal_fragment_specifier(sess, features, attrs, frag_spec.name, frag_span) {\n+            return Err(frag_spec.to_string());\n         }\n     }\n     Ok(())\n@@ -1127,7 +1127,7 @@ fn has_legal_fragment_specifier(sess: &ParseSess,\n fn is_legal_fragment_specifier(_sess: &ParseSess,\n                                _features: &Features,\n                                _attrs: &[ast::Attribute],\n-                               frag_name: &str,\n+                               frag_name: Symbol,\n                                _frag_span: Span) -> bool {\n     /*\n      * If new fragment specifiers are invented in nightly, `_sess`,\n@@ -1136,9 +1136,9 @@ fn is_legal_fragment_specifier(_sess: &ParseSess,\n      * this function.\n      */\n     match frag_name {\n-        \"item\" | \"block\" | \"stmt\" | \"expr\" | \"pat\" | \"lifetime\" |\n-        \"path\" | \"ty\" | \"ident\" | \"meta\" | \"tt\" | \"vis\" | \"literal\" |\n-        \"\" => true,\n+        sym::item | sym::block | sym::stmt | sym::expr | sym::pat |\n+        sym::lifetime | sym::path | sym::ty | sym::ident | sym::meta | sym::tt |\n+        sym::vis | sym::literal | kw::Invalid => true,\n         _ => false,\n     }\n }"}, {"sha": "cbaf12529c101c3d4d9a4561dd9f87e15b3aedc6", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be09427b116098d9dec63694e51cbddac7f958e5/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be09427b116098d9dec63694e51cbddac7f958e5/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=be09427b116098d9dec63694e51cbddac7f958e5", "patch": "@@ -327,7 +327,7 @@ fn mk_main(cx: &mut TestCtxt<'_>) -> P<ast::Item> {\n     //        }\n     let sp = ignored_span(cx, DUMMY_SP);\n     let ecx = &cx.ext_cx;\n-    let test_id = ecx.ident_of(\"test\").gensym();\n+    let test_id = Ident::with_empty_ctxt(sym::test);\n \n     // test::test_main_static(...)\n     let mut test_runner = cx.test_runner.clone().unwrap_or(\n@@ -350,7 +350,7 @@ fn mk_main(cx: &mut TestCtxt<'_>) -> P<ast::Item> {\n     let test_extern_stmt = ecx.stmt_item(sp, ecx.item(sp,\n         test_id,\n         vec![],\n-        ast::ItemKind::ExternCrate(Some(sym::test))\n+        ast::ItemKind::ExternCrate(None)\n     ));\n \n     // pub fn main() { ... }"}, {"sha": "f121fe17a720f996da32e8fe0289c425dbf68d21", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be09427b116098d9dec63694e51cbddac7f958e5/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be09427b116098d9dec63694e51cbddac7f958e5/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=be09427b116098d9dec63694e51cbddac7f958e5", "patch": "@@ -157,6 +157,7 @@ symbols! {\n         bin,\n         bind_by_move_pattern_guards,\n         block,\n+        bool,\n         borrowck_graphviz_postflow,\n         borrowck_graphviz_preflow,\n         box_patterns,\n@@ -171,6 +172,7 @@ symbols! {\n         cfg_target_has_atomic,\n         cfg_target_thread_local,\n         cfg_target_vendor,\n+        char,\n         clone,\n         Clone,\n         clone_closures,\n@@ -351,6 +353,7 @@ symbols! {\n         label_break_value,\n         lang,\n         lang_items,\n+        lhs,\n         lib,\n         lifetime,\n         link,\n@@ -511,6 +514,7 @@ symbols! {\n         result,\n         Result,\n         Return,\n+        rhs,\n         rlib,\n         rt,\n         rtm_target_feature,"}]}