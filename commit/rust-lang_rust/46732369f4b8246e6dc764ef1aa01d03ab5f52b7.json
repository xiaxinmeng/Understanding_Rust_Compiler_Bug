{"sha": "46732369f4b8246e6dc764ef1aa01d03ab5f52b7", "node_id": "C_kwDOAAsO6NoAKDQ2NzMyMzY5ZjRiODI0NmU2ZGM3NjRlZjFhYTAxZDAzYWI1ZjUyYjc", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-10-19T21:34:36Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-10-19T21:53:00Z"}, "message": "Remove simplistic interpolation for manifest-path", "tree": {"sha": "7a8e341feb576673e0777a060709e53f0056d5da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a8e341feb576673e0777a060709e53f0056d5da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/46732369f4b8246e6dc764ef1aa01d03ab5f52b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/46732369f4b8246e6dc764ef1aa01d03ab5f52b7", "html_url": "https://github.com/rust-lang/rust/commit/46732369f4b8246e6dc764ef1aa01d03ab5f52b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/46732369f4b8246e6dc764ef1aa01d03ab5f52b7/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7db50294a3e458b7dd00ee646eee75a7ec933e3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/7db50294a3e458b7dd00ee646eee75a7ec933e3b", "html_url": "https://github.com/rust-lang/rust/commit/7db50294a3e458b7dd00ee646eee75a7ec933e3b"}], "stats": {"total": 119, "additions": 32, "deletions": 87}, "files": [{"sha": "0debf3270f61791182150d435e34420cf2c71ef4", "filename": "crates/flycheck/src/lib.rs", "status": "modified", "additions": 5, "deletions": 21, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/46732369f4b8246e6dc764ef1aa01d03ab5f52b7/crates%2Fflycheck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46732369f4b8246e6dc764ef1aa01d03ab5f52b7/crates%2Fflycheck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fflycheck%2Fsrc%2Flib.rs?ref=46732369f4b8246e6dc764ef1aa01d03ab5f52b7", "patch": "@@ -23,7 +23,7 @@ pub use cargo_metadata::diagnostic::{\n \n #[derive(Copy, Clone, Debug, Default, PartialEq, Eq)]\n pub enum InvocationStrategy {\n-    OnceInRoot,\n+    Once,\n     #[default]\n     PerWorkspace,\n }\n@@ -317,26 +317,10 @@ impl FlycheckActor {\n                 (cmd, args, invocation_strategy)\n             }\n         };\n-        if let InvocationStrategy::PerWorkspace = invocation_strategy {\n-            let mut with_manifest_path = false;\n-            for arg in args {\n-                if let Some(_) = arg.find(\"$manifest_path\") {\n-                    with_manifest_path = true;\n-                    cmd.arg(arg.replace(\n-                        \"$manifest_path\",\n-                        &self.root.join(\"Cargo.toml\").display().to_string(),\n-                    ));\n-                } else {\n-                    cmd.arg(arg);\n-                }\n-            }\n-\n-            if !with_manifest_path {\n-                cmd.current_dir(&self.root);\n-            }\n-        } else {\n-            cmd.args(args);\n-        }\n+        match invocation_strategy {\n+            InvocationStrategy::PerWorkspace => cmd.current_dir(&self.root),\n+            InvocationStrategy::Once => cmd.args(args),\n+        };\n         cmd\n     }\n "}, {"sha": "0bb9bd65dccf49bf309072dab0ab432766358211", "filename": "crates/project-model/src/build_scripts.rs", "status": "modified", "additions": 2, "deletions": 25, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/46732369f4b8246e6dc764ef1aa01d03ab5f52b7/crates%2Fproject-model%2Fsrc%2Fbuild_scripts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46732369f4b8246e6dc764ef1aa01d03ab5f52b7/crates%2Fproject-model%2Fsrc%2Fbuild_scripts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fbuild_scripts.rs?ref=46732369f4b8246e6dc764ef1aa01d03ab5f52b7", "patch": "@@ -62,30 +62,7 @@ impl WorkspaceBuildScripts {\n         let mut cmd = match config.run_build_script_command.as_deref() {\n             Some([program, args @ ..]) => {\n                 let mut cmd = Command::new(program);\n-\n-                // FIXME: strategy and workspace root are coupled, express that in code\n-                if let (InvocationStrategy::PerWorkspace, Some(workspace_root)) =\n-                    (config.invocation_strategy, workspace_root)\n-                {\n-                    let mut with_manifest_path = false;\n-                    for arg in args {\n-                        if let Some(_) = arg.find(\"$manifest_path\") {\n-                            with_manifest_path = true;\n-                            cmd.arg(arg.replace(\n-                                \"$manifest_path\",\n-                                &workspace_root.join(\"Cargo.toml\").display().to_string(),\n-                            ));\n-                        } else {\n-                            cmd.arg(arg);\n-                        }\n-                    }\n-\n-                    if !with_manifest_path {\n-                        cmd.current_dir(workspace_root);\n-                    }\n-                } else {\n-                    cmd.args(args);\n-                }\n+                cmd.args(args);\n                 cmd\n             }\n             _ => {\n@@ -176,7 +153,7 @@ impl WorkspaceBuildScripts {\n         workspaces: &[&CargoWorkspace],\n         progress: &dyn Fn(String),\n     ) -> io::Result<Vec<WorkspaceBuildScripts>> {\n-        assert_eq!(config.invocation_strategy, InvocationStrategy::OnceInRoot);\n+        assert_eq!(config.invocation_strategy, InvocationStrategy::Once);\n         let cmd = Self::build_command(config, None)?;\n         // NB: Cargo.toml could have been modified between `cargo metadata` and\n         // `cargo check`. We shouldn't assume that package ids we see here are"}, {"sha": "2cc0a60bca0048f81d08bcb90615306df7e42302", "filename": "crates/project-model/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46732369f4b8246e6dc764ef1aa01d03ab5f52b7/crates%2Fproject-model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46732369f4b8246e6dc764ef1aa01d03ab5f52b7/crates%2Fproject-model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Flib.rs?ref=46732369f4b8246e6dc764ef1aa01d03ab5f52b7", "patch": "@@ -160,7 +160,7 @@ fn utf8_stdout(mut cmd: Command) -> Result<String> {\n \n #[derive(Copy, Clone, Debug, Default, PartialEq, Eq)]\n pub enum InvocationStrategy {\n-    OnceInRoot,\n+    Once,\n     #[default]\n     PerWorkspace,\n }"}, {"sha": "3669fda926a743ba894ab30219376f158d52d360", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 11, "deletions": 19, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/46732369f4b8246e6dc764ef1aa01d03ab5f52b7/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46732369f4b8246e6dc764ef1aa01d03ab5f52b7/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=46732369f4b8246e6dc764ef1aa01d03ab5f52b7", "patch": "@@ -70,13 +70,9 @@ config_data! {\n         /// Run build scripts (`build.rs`) for more precise code analysis.\n         cargo_buildScripts_enable: bool  = \"true\",\n         /// Specifies the invocation strategy to use when running the build scripts command.\n-        /// If `per_workspace` is set, the command will be executed for each workspace and all\n-        /// occurrences of `$manifest_path` in the command will be replaced by the corresponding\n-        /// manifest path of the workspace that the command is being invoked for. If interpolation\n-        /// for the manifest path happens at least once, the commands will be executed from the\n-        /// project root, otherwise the commands will be executed from the corresponding workspace\n-        /// root.\n-        /// If `once_in_root` is set, the command will be executed once in the project root.\n+        /// If `per_workspace` is set, the command will be executed for each workspace from the\n+        /// corresponding workspace root.\n+        /// If `once` is set, the command will be executed once in the project root.\n         /// This config only has an effect when `#rust-analyzer.cargo.buildScripts.overrideCommand#`\n         /// is set.\n         cargo_buildScripts_invocationStrategy: InvocationStrategy = \"\\\"per_workspace\\\"\",\n@@ -134,13 +130,9 @@ config_data! {\n         /// Set to `\"all\"` to pass `--all-features` to Cargo.\n         checkOnSave_features: Option<CargoFeaturesDef>      = \"null\",\n         /// Specifies the invocation strategy to use when running the checkOnSave command.\n-        /// If `per_workspace` is set, the command will be executed for each workspace and all\n-        /// occurrences of `$manifest_path` in the command will be replaced by the corresponding\n-        /// manifest path of the workspace that the command is being invoked for. If interpolation\n-        /// for the manifest path happens at least once, the commands will be executed from the\n-        /// project root, otherwise the commands will be executed from the corresponding workspace\n-        /// root.\n-        /// If `once_in_root` is set, the command will be executed once in the project root.\n+        /// If `per_workspace` is set, the command will be executed for each workspace from the\n+        /// corresponding workspace root.\n+        /// If `once` is set, the command will be executed once in the project root.\n         /// This config only has an effect when `#rust-analyzer.cargo.buildScripts.overrideCommand#`\n         /// is set.\n         checkOnSave_invocationStrategy: InvocationStrategy = \"\\\"per_workspace\\\"\",\n@@ -1079,7 +1071,7 @@ impl Config {\n             unset_test_crates: UnsetTestCrates::Only(self.data.cargo_unsetTest.clone()),\n             wrap_rustc_in_build_scripts: self.data.cargo_buildScripts_useRustcWrapper,\n             invocation_strategy: match self.data.cargo_buildScripts_invocationStrategy {\n-                InvocationStrategy::OnceInRoot => project_model::InvocationStrategy::OnceInRoot,\n+                InvocationStrategy::Once => project_model::InvocationStrategy::Once,\n                 InvocationStrategy::PerWorkspace => project_model::InvocationStrategy::PerWorkspace,\n             },\n             run_build_script_command: self.data.cargo_buildScripts_overrideCommand.clone(),\n@@ -1106,7 +1098,7 @@ impl Config {\n             return None;\n         }\n         let invocation_strategy = match self.data.checkOnSave_invocationStrategy {\n-            InvocationStrategy::OnceInRoot => flycheck::InvocationStrategy::OnceInRoot,\n+            InvocationStrategy::Once => flycheck::InvocationStrategy::Once,\n             InvocationStrategy::PerWorkspace => flycheck::InvocationStrategy::PerWorkspace,\n         };\n         let flycheck_config = match &self.data.checkOnSave_overrideCommand {\n@@ -1622,7 +1614,7 @@ enum CargoFeaturesDef {\n #[derive(Deserialize, Debug, Clone)]\n #[serde(rename_all = \"snake_case\")]\n enum InvocationStrategy {\n-    OnceInRoot,\n+    Once,\n     PerWorkspace,\n }\n \n@@ -2042,9 +2034,9 @@ fn field_props(field: &str, ty: &str, doc: &[&str], default: &str) -> serde_json\n         },\n         \"InvocationStrategy\" => set! {\n             \"type\": \"string\",\n-            \"enum\": [\"per_workspace\", \"once_in_root\"],\n+            \"enum\": [\"per_workspace\", \"once\"],\n             \"enumDescriptions\": [\n-                \"The command will be executed for each workspace and `{manifest-path}` usages will be interpolated with the corresponding workspace manifests. If `{manifest-path}` is used, the commands will be executed in the project root, otherwise in the corresponding workspace roots.\",\n+                \"The command will be executed for each workspace from the corresponding workspace root.\",\n                 \"The command will be executed once in the project root.\"\n             ],\n         },"}, {"sha": "f7db62baf2c1636087aafae562f22329b3557865", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46732369f4b8246e6dc764ef1aa01d03ab5f52b7/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46732369f4b8246e6dc764ef1aa01d03ab5f52b7/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=46732369f4b8246e6dc764ef1aa01d03ab5f52b7", "patch": "@@ -477,7 +477,7 @@ impl GlobalState {\n         | FlycheckConfig::CustomCommand { invocation_strategy, .. }) = config;\n \n         self.flycheck = match invocation_strategy {\n-            flycheck::InvocationStrategy::OnceInRoot => vec![FlycheckHandle::spawn(\n+            flycheck::InvocationStrategy::Once => vec![FlycheckHandle::spawn(\n                 0,\n                 Box::new(move |msg| sender.send(msg).unwrap()),\n                 config.clone(),"}, {"sha": "e5d4395c345cc936553b0664799a1446fd00c6e1", "filename": "docs/user/generated_config.adoc", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/46732369f4b8246e6dc764ef1aa01d03ab5f52b7/docs%2Fuser%2Fgenerated_config.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/46732369f4b8246e6dc764ef1aa01d03ab5f52b7/docs%2Fuser%2Fgenerated_config.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fgenerated_config.adoc?ref=46732369f4b8246e6dc764ef1aa01d03ab5f52b7", "patch": "@@ -28,13 +28,9 @@ Run build scripts (`build.rs`) for more precise code analysis.\n +\n --\n Specifies the invocation strategy to use when running the build scripts command.\n-If `per_workspace` is set, the command will be executed for each workspace and all\n-occurrences of `$manifest_path` in the command will be replaced by the corresponding\n-manifest path of the workspace that the command is being invoked for. If interpolation\n-for the manifest path happens at least once, the commands will be executed from the\n-project root, otherwise the commands will be executed from the corresponding workspace\n-root.\n-If `once_in_root` is set, the command will be executed once in the project root.\n+If `per_workspace` is set, the command will be executed for each workspace from the\n+corresponding workspace root.\n+If `once` is set, the command will be executed once in the project root.\n This config only has an effect when `#rust-analyzer.cargo.buildScripts.overrideCommand#`\n is set.\n --\n@@ -136,13 +132,9 @@ Set to `\"all\"` to pass `--all-features` to Cargo.\n +\n --\n Specifies the invocation strategy to use when running the checkOnSave command.\n-If `per_workspace` is set, the command will be executed for each workspace and all\n-occurrences of `$manifest_path` in the command will be replaced by the corresponding\n-manifest path of the workspace that the command is being invoked for. If interpolation\n-for the manifest path happens at least once, the commands will be executed from the\n-project root, otherwise the commands will be executed from the corresponding workspace\n-root.\n-If `once_in_root` is set, the command will be executed once in the project root.\n+If `per_workspace` is set, the command will be executed for each workspace from the\n+corresponding workspace root.\n+If `once` is set, the command will be executed once in the project root.\n This config only has an effect when `#rust-analyzer.cargo.buildScripts.overrideCommand#`\n is set.\n --"}, {"sha": "d685d634109a535177fdaea3156d37f66bee94dc", "filename": "editors/code/package.json", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/46732369f4b8246e6dc764ef1aa01d03ab5f52b7/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/46732369f4b8246e6dc764ef1aa01d03ab5f52b7/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=46732369f4b8246e6dc764ef1aa01d03ab5f52b7", "patch": "@@ -422,15 +422,15 @@\n                     \"type\": \"boolean\"\n                 },\n                 \"rust-analyzer.cargo.buildScripts.invocationStrategy\": {\n-                    \"markdownDescription\": \"Specifies the invocation strategy to use when running the build scripts command.\\nIf `per_workspace` is set, the command will be executed for each workspace and all\\noccurrences of `$manifest_path` in the command will be replaced by the corresponding\\nmanifest path of the workspace that the command is being invoked for. If interpolation\\nfor the manifest path happens at least once, the commands will be executed from the\\nproject root, otherwise the commands will be executed from the corresponding workspace\\nroot.\\nIf `once_in_root` is set, the command will be executed once in the project root.\\nThis config only has an effect when `#rust-analyzer.cargo.buildScripts.overrideCommand#`\\nis set.\",\n+                    \"markdownDescription\": \"Specifies the invocation strategy to use when running the build scripts command.\\nIf `per_workspace` is set, the command will be executed for each workspace from the\\ncorresponding workspace root.\\nIf `once` is set, the command will be executed once in the project root.\\nThis config only has an effect when `#rust-analyzer.cargo.buildScripts.overrideCommand#`\\nis set.\",\n                     \"default\": \"per_workspace\",\n                     \"type\": \"string\",\n                     \"enum\": [\n                         \"per_workspace\",\n-                        \"once_in_root\"\n+                        \"once\"\n                     ],\n                     \"enumDescriptions\": [\n-                        \"The command will be executed for each workspace and `{manifest-path}` usages will be interpolated with the corresponding workspace manifests. If `{manifest-path}` is used, the commands will be executed in the project root, otherwise in the corresponding workspace roots.\",\n+                        \"The command will be executed for each workspace from the corresponding workspace root.\",\n                         \"The command will be executed once in the project root.\"\n                     ]\n                 },\n@@ -560,15 +560,15 @@\n                     ]\n                 },\n                 \"rust-analyzer.checkOnSave.invocationStrategy\": {\n-                    \"markdownDescription\": \"Specifies the invocation strategy to use when running the checkOnSave command.\\nIf `per_workspace` is set, the command will be executed for each workspace and all\\noccurrences of `$manifest_path` in the command will be replaced by the corresponding\\nmanifest path of the workspace that the command is being invoked for. If interpolation\\nfor the manifest path happens at least once, the commands will be executed from the\\nproject root, otherwise the commands will be executed from the corresponding workspace\\nroot.\\nIf `once_in_root` is set, the command will be executed once in the project root.\\nThis config only has an effect when `#rust-analyzer.cargo.buildScripts.overrideCommand#`\\nis set.\",\n+                    \"markdownDescription\": \"Specifies the invocation strategy to use when running the checkOnSave command.\\nIf `per_workspace` is set, the command will be executed for each workspace from the\\ncorresponding workspace root.\\nIf `once` is set, the command will be executed once in the project root.\\nThis config only has an effect when `#rust-analyzer.cargo.buildScripts.overrideCommand#`\\nis set.\",\n                     \"default\": \"per_workspace\",\n                     \"type\": \"string\",\n                     \"enum\": [\n                         \"per_workspace\",\n-                        \"once_in_root\"\n+                        \"once\"\n                     ],\n                     \"enumDescriptions\": [\n-                        \"The command will be executed for each workspace and `{manifest-path}` usages will be interpolated with the corresponding workspace manifests. If `{manifest-path}` is used, the commands will be executed in the project root, otherwise in the corresponding workspace roots.\",\n+                        \"The command will be executed for each workspace from the corresponding workspace root.\",\n                         \"The command will be executed once in the project root.\"\n                     ]\n                 },"}]}