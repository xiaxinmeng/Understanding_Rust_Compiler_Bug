{"sha": "44df36567b91388e677ff29f6ac3fe5a4f9ab001", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0ZGYzNjU2N2I5MTM4OGU2NzdmZjI5ZjZhYzNmZTVhNGY5YWIwMDE=", "commit": {"author": {"name": "toidiu", "email": "apoorv@toidiu.com", "date": "2018-07-27T00:25:27Z"}, "committer": {"name": "toidiu", "email": "apoorv@toidiu.com", "date": "2018-07-27T00:25:27Z"}, "message": "feature gate for inferring 'static lifetimes", "tree": {"sha": "65730f1d739dcca97e9f5bd22eadb8f56493c8c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65730f1d739dcca97e9f5bd22eadb8f56493c8c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/44df36567b91388e677ff29f6ac3fe5a4f9ab001", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/44df36567b91388e677ff29f6ac3fe5a4f9ab001", "html_url": "https://github.com/rust-lang/rust/commit/44df36567b91388e677ff29f6ac3fe5a4f9ab001", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/44df36567b91388e677ff29f6ac3fe5a4f9ab001/comments", "author": {"login": "toidiu", "id": 4350690, "node_id": "MDQ6VXNlcjQzNTA2OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/4350690?v=4", "gravatar_id": "", "url": "https://api.github.com/users/toidiu", "html_url": "https://github.com/toidiu", "followers_url": "https://api.github.com/users/toidiu/followers", "following_url": "https://api.github.com/users/toidiu/following{/other_user}", "gists_url": "https://api.github.com/users/toidiu/gists{/gist_id}", "starred_url": "https://api.github.com/users/toidiu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/toidiu/subscriptions", "organizations_url": "https://api.github.com/users/toidiu/orgs", "repos_url": "https://api.github.com/users/toidiu/repos", "events_url": "https://api.github.com/users/toidiu/events{/privacy}", "received_events_url": "https://api.github.com/users/toidiu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "toidiu", "id": 4350690, "node_id": "MDQ6VXNlcjQzNTA2OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/4350690?v=4", "gravatar_id": "", "url": "https://api.github.com/users/toidiu", "html_url": "https://github.com/toidiu", "followers_url": "https://api.github.com/users/toidiu/followers", "following_url": "https://api.github.com/users/toidiu/following{/other_user}", "gists_url": "https://api.github.com/users/toidiu/gists{/gist_id}", "starred_url": "https://api.github.com/users/toidiu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/toidiu/subscriptions", "organizations_url": "https://api.github.com/users/toidiu/orgs", "repos_url": "https://api.github.com/users/toidiu/repos", "events_url": "https://api.github.com/users/toidiu/events{/privacy}", "received_events_url": "https://api.github.com/users/toidiu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45b48b9b6d70065a16cc119fe934ed342c664c78", "url": "https://api.github.com/repos/rust-lang/rust/commits/45b48b9b6d70065a16cc119fe934ed342c664c78", "html_url": "https://github.com/rust-lang/rust/commit/45b48b9b6d70065a16cc119fe934ed342c664c78"}], "stats": {"total": 117, "additions": 110, "deletions": 7}, "files": [{"sha": "0d833c50d7e3b310d51836bcff458d042ee06933", "filename": "src/librustc_typeck/outlives/utils.rs", "status": "modified", "additions": 24, "deletions": 7, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/44df36567b91388e677ff29f6ac3fe5a4f9ab001/src%2Flibrustc_typeck%2Foutlives%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44df36567b91388e677ff29f6ac3fe5a4f9ab001/src%2Flibrustc_typeck%2Foutlives%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Foutlives%2Futils.rs?ref=44df36567b91388e677ff29f6ac3fe5a4f9ab001", "patch": "@@ -27,7 +27,7 @@ pub fn insert_outlives_predicate<'tcx>(\n ) {\n     // If the `'a` region is bound within the field type itself, we\n     // don't want to propagate this constraint to the header.\n-    if !is_free_region(outlived_region) {\n+    if !is_free_region(tcx, outlived_region) {\n         return;\n     }\n \n@@ -120,27 +120,44 @@ pub fn insert_outlives_predicate<'tcx>(\n         }\n \n         UnpackedKind::Lifetime(r) => {\n-            if !is_free_region(r) {\n+            if !is_free_region(tcx, r) {\n                 return;\n             }\n             required_predicates.insert(ty::OutlivesPredicate(kind, outlived_region));\n         }\n     }\n }\n \n-fn is_free_region(region: Region<'_>) -> bool {\n+fn is_free_region<'tcx>(tcx: TyCtxt<'_, 'tcx, 'tcx>, region: Region<'_>) -> bool {\n     // First, screen for regions that might appear in a type header.\n     match region {\n-        // *These* correspond to `T: 'a` relationships where `'a` is\n-        // either declared on the type or `'static`:\n+        // These correspond to `T: 'a` relationships:\n         //\n         //     struct Foo<'a, T> {\n         //         field: &'a T, // this would generate a ReEarlyBound referencing `'a`\n-        //         field2: &'static T, // this would generate a ReStatic\n         //     }\n         //\n         // We care about these, so fall through.\n-        RegionKind::ReStatic | RegionKind::ReEarlyBound(_) => true,\n+        RegionKind::ReEarlyBound(_) => true,\n+\n+        // These correspond to `T: 'static` relationships which can be\n+        // rather surprising. We are therefore putting this behind a\n+        // feature flag:\n+        //\n+        //     struct Foo<'a, T> {\n+        //         field: &'static T, // this would generate a ReStatic\n+        //     }\n+        RegionKind::ReStatic => {\n+            if tcx\n+                .sess\n+                .features_untracked()\n+                .infer_static_outlives_requirements\n+            {\n+                true\n+            } else {\n+                false\n+            }\n+        }\n \n         // Late-bound regions can appear in `fn` types:\n         //"}, {"sha": "087fec097191bdb7b5b72cfc56d89122360d5496", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/44df36567b91388e677ff29f6ac3fe5a4f9ab001/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44df36567b91388e677ff29f6ac3fe5a4f9ab001/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=44df36567b91388e677ff29f6ac3fe5a4f9ab001", "patch": "@@ -396,6 +396,9 @@ declare_features! (\n     // Infer outlives requirements; RFC 2093\n     (active, infer_outlives_requirements, \"1.26.0\", Some(44493), None),\n \n+    // Infer outlives requirements; RFC 2093\n+    (active, infer_static_outlives_requirements, \"1.26.0\", Some(44493), None),\n+\n     // Multiple patterns with `|` in `if let` and `while let`\n     (active, if_while_or_patterns, \"1.26.0\", Some(48215), None),\n \n@@ -1057,6 +1060,12 @@ pub const BUILTIN_ATTRIBUTES: &'static [(&'static str, AttributeType, AttributeG\n                                    \"infer outlives requirements is an experimental feature\",\n                                    cfg_fn!(infer_outlives_requirements))),\n \n+    // RFC #2093\n+    (\"infer_static_outlives_requirements\", Normal, Gated(Stability::Unstable,\n+                                   \"infer_static_outlives_requirements\",\n+                                   \"infer 'static lifetime requirements\",\n+                                   cfg_fn!(infer_static_outlives_requirements))),\n+\n     // RFC 2070\n     (\"panic_implementation\", Normal, Gated(Stability::Unstable,\n                            \"panic_implementation\","}, {"sha": "c70170112778faec09e862a0fe14895d72c6c1dd", "filename": "src/test/ui/rfc-2093-infer-outlives/dont-infer-static.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/44df36567b91388e677ff29f6ac3fe5a4f9ab001/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fdont-infer-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44df36567b91388e677ff29f6ac3fe5a4f9ab001/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fdont-infer-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fdont-infer-static.rs?ref=44df36567b91388e677ff29f6ac3fe5a4f9ab001", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-tidy-linelength\n+\n+#![feature(infer_outlives_requirements)]\n+\n+struct Foo<U> {\n+    bar: Bar<U> //~ ERROR 16:5: 16:16: the parameter type `U` may not live long enough [E0310]\n+}\n+struct Bar<T: 'static> {\n+    x: T,\n+}\n+\n+fn main() {}\n+"}, {"sha": "38cc215ea99c41b6cba3a9116a8da6af9ac30159", "filename": "src/test/ui/rfc-2093-infer-outlives/dont-infer-static.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/44df36567b91388e677ff29f6ac3fe5a4f9ab001/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fdont-infer-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/44df36567b91388e677ff29f6ac3fe5a4f9ab001/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fdont-infer-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fdont-infer-static.stderr?ref=44df36567b91388e677ff29f6ac3fe5a4f9ab001", "patch": "@@ -0,0 +1,17 @@\n+error[E0310]: the parameter type `U` may not live long enough\n+  --> $DIR/dont-infer-static.rs:16:5\n+   |\n+LL | struct Foo<U> {\n+   |            - help: consider adding an explicit lifetime bound `U: 'static`...\n+LL |     bar: Bar<U> //~ ERROR 16:5: 16:16: the parameter type `U` may not live long enough [E0310]\n+   |     ^^^^^^^^^^^\n+   |\n+note: ...so that the type `U` will meet its required lifetime bounds\n+  --> $DIR/dont-infer-static.rs:16:5\n+   |\n+LL |     bar: Bar<U> //~ ERROR 16:5: 16:16: the parameter type `U` may not live long enough [E0310]\n+   |     ^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0310`."}, {"sha": "bdcf31491aede06513bf9095ea8cc168e2ec1b7e", "filename": "src/test/ui/rfc-2093-infer-outlives/infer-static.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/44df36567b91388e677ff29f6ac3fe5a4f9ab001/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Finfer-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44df36567b91388e677ff29f6ac3fe5a4f9ab001/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Finfer-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Finfer-static.rs?ref=44df36567b91388e677ff29f6ac3fe5a4f9ab001", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(rustc_attrs)]\n+#![feature(infer_outlives_requirements)]\n+#![feature(infer_static_outlives_requirements)]\n+\n+#[rustc_outlives]\n+struct Foo<U> { //~ ERROR 16:1: 18:2: rustc_outlives\n+    bar: Bar<U>\n+}\n+struct Bar<T: 'static> {\n+    x: T,\n+}\n+\n+fn main() {}\n+\n+"}, {"sha": "f167e522df650a29f62c53395af769be864e6997", "filename": "src/test/ui/rfc-2093-infer-outlives/infer-static.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/44df36567b91388e677ff29f6ac3fe5a4f9ab001/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Finfer-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/44df36567b91388e677ff29f6ac3fe5a4f9ab001/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Finfer-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Finfer-static.stderr?ref=44df36567b91388e677ff29f6ac3fe5a4f9ab001", "patch": "@@ -0,0 +1,12 @@\n+error: rustc_outlives\n+  --> $DIR/infer-static.rs:16:1\n+   |\n+LL | / struct Foo<U> { //~ ERROR 16:1: 18:2: rustc_outlives\n+LL | |     bar: Bar<U>\n+LL | | }\n+   | |_^\n+   |\n+   = note: U : 'static\n+\n+error: aborting due to previous error\n+"}]}