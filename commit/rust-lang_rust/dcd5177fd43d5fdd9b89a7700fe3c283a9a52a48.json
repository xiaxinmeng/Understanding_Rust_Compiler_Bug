{"sha": "dcd5177fd43d5fdd9b89a7700fe3c283a9a52a48", "node_id": "C_kwDOAAsO6NoAKGRjZDUxNzdmZDQzZDVmZGQ5Yjg5YTc3MDBmZTNjMjgzYTlhNTJhNDg", "commit": {"author": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2022-05-23T01:34:37Z"}, "committer": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2022-08-12T04:48:39Z"}, "message": "Add visitors for PatField and ExprField.\n\nThis helps simplify the code. It also fixes it to use the correct parent\nwhen lowering. One consequence is the `non_snake_case` lint needed\nto change the way it looked for parent nodes in a struct pattern.\n\nThis also includes a small fix to use the correct `Target` for\nexpression field attribute validation.", "tree": {"sha": "2811f41f4860579fc830121cb7b9ac176f8e693f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2811f41f4860579fc830121cb7b9ac176f8e693f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dcd5177fd43d5fdd9b89a7700fe3c283a9a52a48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dcd5177fd43d5fdd9b89a7700fe3c283a9a52a48", "html_url": "https://github.com/rust-lang/rust/commit/dcd5177fd43d5fdd9b89a7700fe3c283a9a52a48", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dcd5177fd43d5fdd9b89a7700fe3c283a9a52a48/comments", "author": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c7cb2bb770d43d1078bfbf3d14e7b4197b23900", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c7cb2bb770d43d1078bfbf3d14e7b4197b23900", "html_url": "https://github.com/rust-lang/rust/commit/6c7cb2bb770d43d1078bfbf3d14e7b4197b23900"}], "stats": {"total": 128, "additions": 55, "deletions": 73}, "files": [{"sha": "899e0dd5cc3b95a46366fbef9297c0c708a97636", "filename": "compiler/rustc_ast_lowering/src/index.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dcd5177fd43d5fdd9b89a7700fe3c283a9a52a48/compiler%2Frustc_ast_lowering%2Fsrc%2Findex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcd5177fd43d5fdd9b89a7700fe3c283a9a52a48/compiler%2Frustc_ast_lowering%2Fsrc%2Findex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Findex.rs?ref=dcd5177fd43d5fdd9b89a7700fe3c283a9a52a48", "patch": "@@ -193,17 +193,19 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n \n     fn visit_pat(&mut self, pat: &'hir Pat<'hir>) {\n         self.insert(pat.span, pat.hir_id, Node::Pat(pat));\n-        if let PatKind::Struct(_, fields, _) = pat.kind {\n-            for field in fields {\n-                self.insert(field.span, field.hir_id, Node::PatField(field));\n-            }\n-        }\n \n         self.with_parent(pat.hir_id, |this| {\n             intravisit::walk_pat(this, pat);\n         });\n     }\n \n+    fn visit_pat_field(&mut self, field: &'hir PatField<'hir>) {\n+        self.insert(field.span, field.hir_id, Node::PatField(field));\n+        self.with_parent(field.hir_id, |this| {\n+            intravisit::walk_pat_field(this, field);\n+        });\n+    }\n+\n     fn visit_arm(&mut self, arm: &'hir Arm<'hir>) {\n         let node = Node::Arm(arm);\n "}, {"sha": "900370937f79aecd7c507c71aacea749b2bcd9c5", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/dcd5177fd43d5fdd9b89a7700fe3c283a9a52a48/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcd5177fd43d5fdd9b89a7700fe3c283a9a52a48/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=dcd5177fd43d5fdd9b89a7700fe3c283a9a52a48", "patch": "@@ -325,6 +325,9 @@ pub trait Visitor<'v>: Sized {\n     fn visit_pat(&mut self, p: &'v Pat<'v>) {\n         walk_pat(self, p)\n     }\n+    fn visit_pat_field(&mut self, f: &'v PatField<'v>) {\n+        walk_pat_field(self, f)\n+    }\n     fn visit_array_length(&mut self, len: &'v ArrayLen) {\n         walk_array_len(self, len)\n     }\n@@ -337,6 +340,9 @@ pub trait Visitor<'v>: Sized {\n     fn visit_let_expr(&mut self, lex: &'v Let<'v>) {\n         walk_let_expr(self, lex)\n     }\n+    fn visit_expr_field(&mut self, field: &'v ExprField<'v>) {\n+        walk_expr_field(self, field)\n+    }\n     fn visit_ty(&mut self, t: &'v Ty<'v>) {\n         walk_ty(self, t)\n     }\n@@ -761,11 +767,7 @@ pub fn walk_pat<'v, V: Visitor<'v>>(visitor: &mut V, pattern: &'v Pat<'v>) {\n         }\n         PatKind::Struct(ref qpath, fields, _) => {\n             visitor.visit_qpath(qpath, pattern.hir_id, pattern.span);\n-            for field in fields {\n-                visitor.visit_id(field.hir_id);\n-                visitor.visit_ident(field.ident);\n-                visitor.visit_pat(&field.pat)\n-            }\n+            walk_list!(visitor, visit_pat_field, fields);\n         }\n         PatKind::Or(pats) => walk_list!(visitor, visit_pat, pats),\n         PatKind::Tuple(tuple_elements, _) => {\n@@ -792,6 +794,12 @@ pub fn walk_pat<'v, V: Visitor<'v>>(visitor: &mut V, pattern: &'v Pat<'v>) {\n     }\n }\n \n+pub fn walk_pat_field<'v, V: Visitor<'v>>(visitor: &mut V, field: &'v PatField<'v>) {\n+    visitor.visit_id(field.hir_id);\n+    visitor.visit_ident(field.ident);\n+    visitor.visit_pat(&field.pat)\n+}\n+\n pub fn walk_foreign_item<'v, V: Visitor<'v>>(visitor: &mut V, foreign_item: &'v ForeignItem<'v>) {\n     visitor.visit_id(foreign_item.hir_id());\n     visitor.visit_ident(foreign_item.ident);\n@@ -1059,6 +1067,12 @@ pub fn walk_let_expr<'v, V: Visitor<'v>>(visitor: &mut V, let_expr: &'v Let<'v>)\n     walk_list!(visitor, visit_ty, let_expr.ty);\n }\n \n+pub fn walk_expr_field<'v, V: Visitor<'v>>(visitor: &mut V, field: &'v ExprField<'v>) {\n+    visitor.visit_id(field.hir_id);\n+    visitor.visit_ident(field.ident);\n+    visitor.visit_expr(&field.expr)\n+}\n+\n pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr<'v>) {\n     visitor.visit_id(expression.hir_id);\n     match expression.kind {\n@@ -1073,11 +1087,7 @@ pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr<'v>)\n         }\n         ExprKind::Struct(ref qpath, fields, ref optional_base) => {\n             visitor.visit_qpath(qpath, expression.hir_id, expression.span);\n-            for field in fields {\n-                visitor.visit_id(field.hir_id);\n-                visitor.visit_ident(field.ident);\n-                visitor.visit_expr(&field.expr)\n-            }\n+            walk_list!(visitor, visit_expr_field, fields);\n             walk_list!(visitor, visit_expr, optional_base);\n         }\n         ExprKind::Tup(subexpressions) => {"}, {"sha": "1cabb58bbebfd3f1444a0c1b61ff7e2c2d7b2c0f", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 13, "deletions": 34, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/dcd5177fd43d5fdd9b89a7700fe3c283a9a52a48/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcd5177fd43d5fdd9b89a7700fe3c283a9a52a48/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=dcd5177fd43d5fdd9b89a7700fe3c283a9a52a48", "patch": "@@ -761,26 +761,15 @@ impl<'tcx> intravisit::Visitor<'tcx> for LintLevelMapBuilder<'tcx> {\n     }\n \n     fn visit_expr(&mut self, e: &'tcx hir::Expr<'tcx>) {\n-        match e.kind {\n-            hir::ExprKind::Struct(qpath, fields, base_expr) => {\n-                self.with_lint_attrs(e.hir_id, |builder| {\n-                    builder.visit_qpath(qpath, e.hir_id, e.span);\n-                    for field in fields {\n-                        builder.with_lint_attrs(field.hir_id, |field_builder| {\n-                            field_builder.visit_id(field.hir_id);\n-                            field_builder.visit_ident(field.ident);\n-                            field_builder.visit_expr(field.expr);\n-                        });\n-                    }\n-                    if let Some(base_expr) = base_expr {\n-                        builder.visit_expr(base_expr);\n-                    }\n-                });\n-            }\n-            _ => self.with_lint_attrs(e.hir_id, |builder| {\n-                intravisit::walk_expr(builder, e);\n-            }),\n-        }\n+        self.with_lint_attrs(e.hir_id, |builder| {\n+            intravisit::walk_expr(builder, e);\n+        })\n+    }\n+\n+    fn visit_expr_field(&mut self, field: &'tcx hir::ExprField<'tcx>) {\n+        self.with_lint_attrs(field.hir_id, |builder| {\n+            intravisit::walk_expr_field(builder, field);\n+        })\n     }\n \n     fn visit_field_def(&mut self, s: &'tcx hir::FieldDef<'tcx>) {\n@@ -819,20 +808,10 @@ impl<'tcx> intravisit::Visitor<'tcx> for LintLevelMapBuilder<'tcx> {\n         });\n     }\n \n-    fn visit_pat(&mut self, p: &'tcx hir::Pat<'tcx>) {\n-        match &p.kind {\n-            hir::PatKind::Struct(qpath, fields, _) => {\n-                self.visit_qpath(&qpath, p.hir_id, p.span);\n-                for field in *fields {\n-                    self.with_lint_attrs(field.hir_id, |builder| {\n-                        builder.visit_id(field.hir_id);\n-                        builder.visit_ident(field.ident);\n-                        builder.visit_pat(field.pat);\n-                    })\n-                }\n-            }\n-            _ => intravisit::walk_pat(self, p),\n-        }\n+    fn visit_pat_field(&mut self, field: &'tcx hir::PatField<'tcx>) {\n+        self.with_lint_attrs(field.hir_id, |builder| {\n+            intravisit::walk_pat_field(builder, field);\n+        })\n     }\n \n     fn visit_generic_param(&mut self, p: &'tcx hir::GenericParam<'tcx>) {"}, {"sha": "2868aabfa07e21eea1923154ec83865eb81b6538", "filename": "compiler/rustc_lint/src/nonstandard_style.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/dcd5177fd43d5fdd9b89a7700fe3c283a9a52a48/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcd5177fd43d5fdd9b89a7700fe3c283a9a52a48/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs?ref=dcd5177fd43d5fdd9b89a7700fe3c283a9a52a48", "patch": "@@ -437,19 +437,14 @@ impl<'tcx> LateLintPass<'tcx> for NonSnakeCase {\n \n     fn check_pat(&mut self, cx: &LateContext<'_>, p: &hir::Pat<'_>) {\n         if let PatKind::Binding(_, hid, ident, _) = p.kind {\n-            if let hir::Node::Pat(parent_pat) = cx.tcx.hir().get(cx.tcx.hir().get_parent_node(hid))\n+            if let hir::Node::PatField(field) = cx.tcx.hir().get(cx.tcx.hir().get_parent_node(hid))\n             {\n-                if let PatKind::Struct(_, field_pats, _) = &parent_pat.kind {\n-                    if field_pats\n-                        .iter()\n-                        .any(|field| !field.is_shorthand && field.pat.hir_id == p.hir_id)\n-                    {\n-                        // Only check if a new name has been introduced, to avoid warning\n-                        // on both the struct definition and this pattern.\n-                        self.check_snake_case(cx, \"variable\", &ident);\n-                    }\n-                    return;\n+                if !field.is_shorthand {\n+                    // Only check if a new name has been introduced, to avoid warning\n+                    // on both the struct definition and this pattern.\n+                    self.check_snake_case(cx, \"variable\", &ident);\n                 }\n+                return;\n             }\n             self.check_snake_case(cx, \"variable\", &ident);\n         }"}, {"sha": "5789531d2ff5ae3b1a47a975bd7521e4803917ac", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/dcd5177fd43d5fdd9b89a7700fe3c283a9a52a48/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcd5177fd43d5fdd9b89a7700fe3c283a9a52a48/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=dcd5177fd43d5fdd9b89a7700fe3c283a9a52a48", "patch": "@@ -2065,14 +2065,14 @@ impl<'tcx> Visitor<'tcx> for CheckAttrVisitor<'tcx> {\n         };\n \n         self.check_attributes(expr.hir_id, expr.span, target, None);\n-        if let hir::ExprKind::Struct(_, fields, _) = expr.kind {\n-            for field in fields {\n-                self.check_attributes(field.hir_id, field.span, Target::PatField, None);\n-            }\n-        }\n         intravisit::walk_expr(self, expr)\n     }\n \n+    fn visit_expr_field(&mut self, field: &'tcx hir::ExprField<'tcx>) {\n+        self.check_attributes(field.hir_id, field.span, Target::ExprField, None);\n+        intravisit::walk_expr_field(self, field)\n+    }\n+\n     fn visit_variant(&mut self, variant: &'tcx hir::Variant<'tcx>) {\n         self.check_attributes(variant.id, variant.span, Target::Variant, None);\n         intravisit::walk_variant(self, variant)\n@@ -2084,13 +2084,9 @@ impl<'tcx> Visitor<'tcx> for CheckAttrVisitor<'tcx> {\n         intravisit::walk_param(self, param);\n     }\n \n-    fn visit_pat(&mut self, p: &'tcx hir::Pat<'tcx>) {\n-        if let hir::PatKind::Struct(_, fields, _) = p.kind {\n-            for field in fields {\n-                self.check_attributes(field.hir_id, field.span, Target::PatField, None);\n-            }\n-        }\n-        intravisit::walk_pat(self, p);\n+    fn visit_pat_field(&mut self, field: &'tcx hir::PatField<'tcx>) {\n+        self.check_attributes(field.hir_id, field.span, Target::PatField, None);\n+        intravisit::walk_pat_field(self, field);\n     }\n }\n "}, {"sha": "dd112c23e5d9eba0b27a8b7efb93ebd7e2a3b1be", "filename": "src/test/ui/lint/unused/unused_attributes-must_use.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dcd5177fd43d5fdd9b89a7700fe3c283a9a52a48/src%2Ftest%2Fui%2Flint%2Funused%2Funused_attributes-must_use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dcd5177fd43d5fdd9b89a7700fe3c283a9a52a48/src%2Ftest%2Fui%2Flint%2Funused%2Funused_attributes-must_use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused%2Funused_attributes-must_use.stderr?ref=dcd5177fd43d5fdd9b89a7700fe3c283a9a52a48", "patch": "@@ -105,7 +105,7 @@ error: `#[must_use]` has no effect when applied to an match arm\n LL |         #[must_use]\n    |         ^^^^^^^^^^^\n \n-error: `#[must_use]` has no effect when applied to a pattern field\n+error: `#[must_use]` has no effect when applied to a struct field\n   --> $DIR/unused_attributes-must_use.rs:129:28\n    |\n LL |     let s = PatternField { #[must_use]  foo: 123 };"}]}