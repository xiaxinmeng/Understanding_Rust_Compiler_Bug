{"sha": "286b717808d81ee5f2cc60b04d3e9a1d1e146719", "node_id": "C_kwDOAAsO6NoAKDI4NmI3MTc4MDhkODFlZTVmMmNjNjBiMDRkM2U5YTFkMWUxNDY3MTk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-24T07:13:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-24T07:13:26Z"}, "message": "Auto merge of #96098 - JakobDegen:always-return-place, r=oli-obk\n\nRefactor call terminator to always include destination place\n\nIn #71117 people seemed to agree that call terminators should always have a destination place, even if the call was guaranteed to diverge. This implements that. Unsurprisingly, the diff touches a lot of code, but thankfully I had to do almost nothing interesting. The only interesting thing came up in const prop, where the stack frame having no return place was also used to indicate that the layout could not be computed (or similar). I replaced this with a ZST allocation, which should continue to do the right things.\n\ncc `@RalfJung` `@eddyb` who were involved in the original conversation\n\nr? rust-lang/mir-opt", "tree": {"sha": "89887c672f4250820e5019bde71570a96b56eeab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89887c672f4250820e5019bde71570a96b56eeab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/286b717808d81ee5f2cc60b04d3e9a1d1e146719", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/286b717808d81ee5f2cc60b04d3e9a1d1e146719", "html_url": "https://github.com/rust-lang/rust/commit/286b717808d81ee5f2cc60b04d3e9a1d1e146719", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/286b717808d81ee5f2cc60b04d3e9a1d1e146719/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f3116f806ecdc26ec7fd887005f1a91f353565f", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f3116f806ecdc26ec7fd887005f1a91f353565f", "html_url": "https://github.com/rust-lang/rust/commit/1f3116f806ecdc26ec7fd887005f1a91f353565f"}, {"sha": "0684d62b564c2e88bd812fccf00d35bcd2554cb6", "url": "https://api.github.com/repos/rust-lang/rust/commits/0684d62b564c2e88bd812fccf00d35bcd2554cb6", "html_url": "https://github.com/rust-lang/rust/commit/0684d62b564c2e88bd812fccf00d35bcd2554cb6"}], "stats": {"total": 5, "additions": 3, "deletions": 2}, "files": [{"sha": "ab16fe47d4dfbe536844123b4b742c5cbb3d26e3", "filename": "clippy_lints/src/redundant_clone.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/286b717808d81ee5f2cc60b04d3e9a1d1e146719/clippy_lints%2Fsrc%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/286b717808d81ee5f2cc60b04d3e9a1d1e146719/clippy_lints%2Fsrc%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_clone.rs?ref=286b717808d81ee5f2cc60b04d3e9a1d1e146719", "patch": "@@ -292,7 +292,7 @@ fn is_call_with_ref_arg<'tcx>(\n         if let (inner_ty, 1) = walk_ptrs_ty_depth(args[0].ty(&*mir, cx.tcx));\n         if !is_copy(cx, inner_ty);\n         then {\n-            Some((def_id, *local, inner_ty, destination.as_ref().map(|(dest, _)| dest)?.as_local()?))\n+            Some((def_id, *local, inner_ty, destination.as_local()?))\n         } else {\n             None\n         }\n@@ -584,7 +584,7 @@ impl<'a, 'tcx> mir::visit::Visitor<'tcx> for PossibleBorrowerVisitor<'a, 'tcx> {\n     fn visit_terminator(&mut self, terminator: &mir::Terminator<'_>, _loc: mir::Location) {\n         if let mir::TerminatorKind::Call {\n             args,\n-            destination: Some((mir::Place { local: dest, .. }, _)),\n+            destination: mir::Place { local: dest, .. },\n             ..\n         } = &terminator.kind\n         {"}, {"sha": "78d8f1e213af0396c81a471e4d0da7aef57f616d", "filename": "clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/286b717808d81ee5f2cc60b04d3e9a1d1e146719/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/286b717808d81ee5f2cc60b04d3e9a1d1e146719/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=286b717808d81ee5f2cc60b04d3e9a1d1e146719", "patch": "@@ -301,6 +301,7 @@ fn check_terminator<'a, 'tcx>(\n             args,\n             from_hir_call: _,\n             destination: _,\n+            target: _,\n             cleanup: _,\n             fn_span: _,\n         } => {"}]}