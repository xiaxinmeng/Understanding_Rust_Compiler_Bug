{"sha": "1f65f56461fa72df809fff43975a7e72f08fda44", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmNjVmNTY0NjFmYTcyZGY4MDlmZmY0Mzk3NWE3ZTcyZjA4ZmRhNDQ=", "commit": {"author": {"name": "Justus K", "email": "justus.k@protonmail.com", "date": "2021-05-18T08:06:24Z"}, "committer": {"name": "Justus K", "email": "justus.k@protonmail.com", "date": "2021-06-18T19:58:09Z"}, "message": "rustdoc: Render `for<'_>` lifetimes in trait objects", "tree": {"sha": "3467d490de695f02614249f972a3eba12651738a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3467d490de695f02614249f972a3eba12651738a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f65f56461fa72df809fff43975a7e72f08fda44", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEDDGYqKFKtc1ioGY0jGL+mKYvxGIFAmDM+tQACgkQjGL+mKYv\nxGK2qhAArIa1QB27wYtq2Dk6J9aEPxVXmMWlQSjjRA/zFrYCgeK+LOvlr7NjlW3o\nX0d6R0AauFpcRodUsOYGjmjnewfWXQzNC8ZodcCsjZ/B8Ld7+tlHkJQfpCUKujOr\naClBVdFCtfWN1Mcvptog8tVFts63xcpC8UBicIHUcSfMXzcvCbAMzqbmPHBbk7kj\nAQwGwg7l9jx8Yw6qOg98v1cEMJ45pejG3mmpnP5+v01FgvX9vZcQyzt7Am2rXkC2\nStqcgag0fQl3oIVouV2lM7bJRN0YNlH0BdKJhtmfh1341s/ubaDnhmtf0tNYE4wa\nWB7qamMhiW1P5gGC23AGndYXujXiNaXciJKNC2yYiwwSQV2Hr5MCFFp66VD683GM\nVE0J3hq+0udt2FrN0jZYVZPWKhIkntBWFPQF83eZ8RRFtPARt3WJDRXwi7bACsnw\n9th501zHkIKsW9ePjND04PK+G7dm3Y0EeQcUlwfLSz8Jqk7YHnj5amfXy84GEykJ\nzgKQJoeedPSfjIdggAetjPT8lRZkUKF6zvohbD8PCzL6QMI5hJYiRft7ZXG4UyYe\nJK+QCYsm6Tf+TnxmDK7bIYC5zSaFfRzJzVszHhssYsUSw9s9LgYlAyuJwmjJYx31\nTku2Maw7JlyF7x9JCayL1y4JL5TZMH/dya9cv1STpeeS8dR7UYU=\n=l1FJ\n-----END PGP SIGNATURE-----", "payload": "tree 3467d490de695f02614249f972a3eba12651738a\nparent e0162a8a56d1c59e185e293f33c38d94a5a2d462\nauthor Justus K <justus.k@protonmail.com> 1621325184 +0200\ncommitter Justus K <justus.k@protonmail.com> 1624046289 +0200\n\nrustdoc: Render `for<'_>` lifetimes in trait objects\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f65f56461fa72df809fff43975a7e72f08fda44", "html_url": "https://github.com/rust-lang/rust/commit/1f65f56461fa72df809fff43975a7e72f08fda44", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f65f56461fa72df809fff43975a7e72f08fda44/comments", "author": {"login": "Stupremee", "id": 39732259, "node_id": "MDQ6VXNlcjM5NzMyMjU5", "avatar_url": "https://avatars.githubusercontent.com/u/39732259?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Stupremee", "html_url": "https://github.com/Stupremee", "followers_url": "https://api.github.com/users/Stupremee/followers", "following_url": "https://api.github.com/users/Stupremee/following{/other_user}", "gists_url": "https://api.github.com/users/Stupremee/gists{/gist_id}", "starred_url": "https://api.github.com/users/Stupremee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Stupremee/subscriptions", "organizations_url": "https://api.github.com/users/Stupremee/orgs", "repos_url": "https://api.github.com/users/Stupremee/repos", "events_url": "https://api.github.com/users/Stupremee/events{/privacy}", "received_events_url": "https://api.github.com/users/Stupremee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Stupremee", "id": 39732259, "node_id": "MDQ6VXNlcjM5NzMyMjU5", "avatar_url": "https://avatars.githubusercontent.com/u/39732259?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Stupremee", "html_url": "https://github.com/Stupremee", "followers_url": "https://api.github.com/users/Stupremee/followers", "following_url": "https://api.github.com/users/Stupremee/following{/other_user}", "gists_url": "https://api.github.com/users/Stupremee/gists{/gist_id}", "starred_url": "https://api.github.com/users/Stupremee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Stupremee/subscriptions", "organizations_url": "https://api.github.com/users/Stupremee/orgs", "repos_url": "https://api.github.com/users/Stupremee/repos", "events_url": "https://api.github.com/users/Stupremee/events{/privacy}", "received_events_url": "https://api.github.com/users/Stupremee/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0162a8a56d1c59e185e293f33c38d94a5a2d462", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0162a8a56d1c59e185e293f33c38d94a5a2d462", "html_url": "https://github.com/rust-lang/rust/commit/e0162a8a56d1c59e185e293f33c38d94a5a2d462"}], "stats": {"total": 90, "additions": 61, "deletions": 29}, "files": [{"sha": "889e645309c15b3ed96ef2ff3e95212618b554c2", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1f65f56461fa72df809fff43975a7e72f08fda44/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f65f56461fa72df809fff43975a7e72f08fda44/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=1f65f56461fa72df809fff43975a7e72f08fda44", "patch": "@@ -1378,8 +1378,9 @@ impl Clean<Type> for hir::Ty<'_> {\n             }\n             TyKind::Path(_) => clean_qpath(&self, cx),\n             TyKind::TraitObject(ref bounds, ref lifetime, _) => {\n-                match bounds[0].clean(cx).trait_ {\n-                    ResolvedPath { path, param_names: None, did, is_generic } => {\n+                let cleaned = bounds[0].clean(cx);\n+                match cleaned.trait_ {\n+                    ResolvedPath { path, param_names: None, did, is_generic, .. } => {\n                         let mut bounds: Vec<self::GenericBound> = bounds[1..]\n                             .iter()\n                             .map(|bound| {\n@@ -1392,7 +1393,12 @@ impl Clean<Type> for hir::Ty<'_> {\n                         if !lifetime.is_elided() {\n                             bounds.push(self::GenericBound::Outlives(lifetime.clean(cx)));\n                         }\n-                        ResolvedPath { path, param_names: Some(bounds), did, is_generic }\n+                        ResolvedPath {\n+                            path,\n+                            param_names: Some((bounds, cleaned.generic_params)),\n+                            did,\n+                            is_generic,\n+                        }\n                     }\n                     _ => Infer, // shouldn't happen\n                 }\n@@ -1542,7 +1548,12 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n \n                 let path =\n                     external_path(cx, cx.tcx.item_name(did), Some(did), false, bindings, substs);\n-                ResolvedPath { path, param_names: Some(param_names), did, is_generic: false }\n+                ResolvedPath {\n+                    path,\n+                    param_names: Some((param_names, vec![])),\n+                    did,\n+                    is_generic: false,\n+                }\n             }\n             ty::Tuple(ref t) => {\n                 Tuple(t.iter().map(|t| t.expect_ty()).collect::<Vec<_>>().clean(cx))\n@@ -2248,7 +2259,7 @@ impl From<GenericBound> for SimpleBound {\n             GenericBound::TraitBound(t, mod_) => match t.trait_ {\n                 Type::ResolvedPath { path, param_names, .. } => SimpleBound::TraitBound(\n                     path.segments,\n-                    param_names.map_or_else(Vec::new, |v| {\n+                    param_names.map_or_else(Vec::new, |(v, _)| {\n                         v.iter().map(|p| SimpleBound::from(p.clone())).collect()\n                     }),\n                     t.generic_params,"}, {"sha": "4c94501b80be0090630fdddbbd2260055468e333", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f65f56461fa72df809fff43975a7e72f08fda44/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f65f56461fa72df809fff43975a7e72f08fda44/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=1f65f56461fa72df809fff43975a7e72f08fda44", "patch": "@@ -1407,7 +1407,9 @@ crate enum Type {\n     /// Structs/enums/traits (most that would be an `hir::TyKind::Path`).\n     ResolvedPath {\n         path: Path,\n-        param_names: Option<Vec<GenericBound>>,\n+        /// If `param_names` is `Some`, this path is a trait object and the Vecs repsresent\n+        /// `(generic bounds, generic parameters)`\n+        param_names: Option<(Vec<GenericBound>, Vec<GenericParamDef>)>,\n         did: DefId,\n         /// `true` if is a `T::Name` path for associated types.\n         is_generic: bool,"}, {"sha": "e4fb7384affa20f822ce3f37ba81e5ff16057126", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/1f65f56461fa72df809fff43975a7e72f08fda44/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f65f56461fa72df809fff43975a7e72f08fda44/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=1f65f56461fa72df809fff43975a7e72f08fda44", "patch": "@@ -646,11 +646,11 @@ fn primitive_link(\n \n /// Helper to render type parameters\n fn tybounds<'a, 'tcx: 'a>(\n-    param_names: &'a Option<Vec<clean::GenericBound>>,\n+    param_names: Option<&'a Vec<clean::GenericBound>>,\n     cx: &'a Context<'tcx>,\n ) -> impl fmt::Display + 'a + Captures<'tcx> {\n-    display_fn(move |f| match *param_names {\n-        Some(ref params) => {\n+    display_fn(move |f| match param_names {\n+        Some(params) => {\n             for param in params {\n                 write!(f, \" + \")?;\n                 fmt::Display::fmt(&param.print(cx), f)?;\n@@ -695,8 +695,27 @@ fn fmt_type<'cx>(\n     match *t {\n         clean::Generic(name) => write!(f, \"{}\", name),\n         clean::ResolvedPath { did, ref param_names, ref path, is_generic } => {\n-            if param_names.is_some() {\n+            let generic_params = param_names.as_ref().map(|(_, x)| x);\n+            let param_names = param_names.as_ref().map(|(x, _)| x);\n+\n+            if let Some(generic_params) = generic_params {\n                 f.write_str(\"dyn \")?;\n+\n+                if !generic_params.is_empty() {\n+                    if f.alternate() {\n+                        write!(\n+                            f,\n+                            \"for<{:#}> \",\n+                            comma_sep(generic_params.iter().map(|g| g.print(cx)))\n+                        )?;\n+                    } else {\n+                        write!(\n+                            f,\n+                            \"for&lt;{}&gt; \",\n+                            comma_sep(generic_params.iter().map(|g| g.print(cx)))\n+                        )?;\n+                    }\n+                }\n             }\n             // Paths like `T::Output` and `Self::Output` should be rendered with all segments.\n             resolved_path(f, did, path, is_generic, use_absolute, cx)?;\n@@ -835,7 +854,7 @@ fn fmt_type<'cx>(\n                         }\n                     }\n                 }\n-                clean::ResolvedPath { param_names: Some(ref v), .. } if !v.is_empty() => {\n+                clean::ResolvedPath { param_names: Some((ref v, _)), .. } if !v.is_empty() => {\n                     write!(f, \"{}{}{}(\", amp, lt, m)?;\n                     fmt_type(&ty, f, use_absolute, cx)?;\n                     write!(f, \")\")"}, {"sha": "643c0f82ae9f8c79784b5afa29fbc980ddc03987", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f65f56461fa72df809fff43975a7e72f08fda44/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f65f56461fa72df809fff43975a7e72f08fda44/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=1f65f56461fa72df809fff43975a7e72f08fda44", "patch": "@@ -378,7 +378,7 @@ impl FromWithTcx<clean::Type> for Type {\n                 id: from_def_id(did.into()),\n                 args: path.segments.last().map(|args| Box::new(args.clone().args.into_tcx(tcx))),\n                 param_names: param_names\n-                    .map(|v| v.into_iter().map(|x| x.into_tcx(tcx)).collect())\n+                    .map(|(v, _)| v.into_iter().map(|x| x.into_tcx(tcx)).collect())\n                     .unwrap_or_default(),\n             },\n             Generic(s) => Type::Generic(s.to_string()),"}, {"sha": "34a7eae31c79062fde794a43e560dc7e72d8375d", "filename": "src/test/rustdoc/for-lifetime.rs", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e0162a8a56d1c59e185e293f33c38d94a5a2d462/src%2Ftest%2Frustdoc%2Ffor-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0162a8a56d1c59e185e293f33c38d94a5a2d462/src%2Ftest%2Frustdoc%2Ffor-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ffor-lifetime.rs?ref=e0162a8a56d1c59e185e293f33c38d94a5a2d462", "patch": "@@ -1,12 +0,0 @@\n-#![crate_name = \"foo\"]\n-#![crate_type = \"lib\"]\n-\n-pub struct Foo {\n-    pub some_func: for<'a> fn(val: &'a i32) -> i32,\n-    pub some_trait: dyn for<'a> Trait<'a>,\n-}\n-\n-// @has foo/struct.Foo.html '//span[@id=\"structfield.some_func\"]' \"some_func: for<'a> fn(val: &'a i32) -> i32\"\n-// @has foo/struct.Foo.html '//span[@id=\"structfield.some_trait\"]' \"some_trait: dyn Trait<'a>\"\n-\n-pub trait Trait<'a> {}"}, {"sha": "492a743fbf29daafb598c42c03b0c03225792807", "filename": "src/test/rustdoc/higher-ranked-trait-bounds.rs", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1f65f56461fa72df809fff43975a7e72f08fda44/src%2Ftest%2Frustdoc%2Fhigher-ranked-trait-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f65f56461fa72df809fff43975a7e72f08fda44/src%2Ftest%2Frustdoc%2Fhigher-ranked-trait-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fhigher-ranked-trait-bounds.rs?ref=1f65f56461fa72df809fff43975a7e72f08fda44", "patch": "@@ -1,6 +1,7 @@\n #![crate_name = \"foo\"]\n \n-trait A<'x> {}\n+// @has foo/trait.Trait.html\n+pub trait Trait<'x> {}\n \n // @has foo/fn.test1.html\n // @has - '//pre' \"pub fn test1<T>() where for<'a> &'a T: Iterator,\"\n@@ -11,10 +12,10 @@ where\n }\n \n // @has foo/fn.test2.html\n-// @has - '//pre' \"pub fn test2<T>() where for<'a, 'b> &'a T: A<'b>,\"\n+// @has - '//pre' \"pub fn test2<T>() where for<'a, 'b> &'a T: Trait<'b>,\"\n pub fn test2<T>()\n where\n-    for<'a, 'b> &'a T: A<'b>,\n+    for<'a, 'b> &'a T: Trait<'b>,\n {\n }\n \n@@ -29,13 +30,24 @@ where\n // @has foo/struct.Foo.html\n pub struct Foo<'a> {\n     _x: &'a u8,\n+    pub some_trait: &'a dyn for<'b> Trait<'b>,\n+    pub some_func: for<'c> fn(val: &'c i32) -> i32,\n }\n \n+// @has - '//span[@id=\"structfield.some_func\"]' \"some_func: for<'c> fn(val: &'c i32) -> i32\"\n+// @has - '//span[@id=\"structfield.some_trait\"]' \"some_trait: &'a dyn for<'b> Trait<'b>\"\n+\n impl<'a> Foo<'a> {\n-    // @has - '//code' \"pub fn bar<T>() where T: A<'a>,\"\n+    // @has - '//code' \"pub fn bar<T>() where T: Trait<'a>,\"\n     pub fn bar<T>()\n     where\n-        T: A<'a>,\n+        T: Trait<'a>,\n     {\n     }\n }\n+\n+// @has foo/trait.B.html\n+pub trait B<'x> {}\n+\n+// @has - '//code[@class=\"in-band\"]' \"impl<'a> B<'a> for dyn for<'b> Trait<'b>\"\n+impl<'a> B<'a> for dyn for<'b> Trait<'b> {}"}]}