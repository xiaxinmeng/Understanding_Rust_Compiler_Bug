{"sha": "977df43c4a7fae07a5623ad851190181a274b54d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3N2RmNDNjNGE3ZmFlMDdhNTYyM2FkODUxMTkwMTgxYTI3NGI1NGQ=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-10-16T00:10:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-16T00:10:00Z"}, "message": "Rollup merge of #75265 - WaffleLapkin:str_split_as_str, r=dtolnay\n\nAdd `str::{Split,RSplit,SplitN,RSplitN,SplitTerminator,RSplitTerminator,SplitInclusive}::as_str` methods\n\ntl;dr this allows viewing unyelded part of str-split-iterators, like so:\n```rust\nlet mut split = \"Mary had a little lamb\".split(' ');\nassert_eq!(split.as_str(), \"Mary had a little lamb\");\nsplit.next();\nassert_eq!(split.as_str(), \"had a little lamb\");\nsplit.by_ref().for_each(drop);\nassert_eq!(split.as_str(), \"\");\n```\n\n--------------\n\nThis PR adds semi-identical `as_str` methods to most str-split-iterators with signatures like `&'_ Split<'a, P: Pattern<'a>> -> &'a str` (Note: output `&str` lifetime is bound to the `'a`, not the `'_`). The methods are similar to [`Chars::as_str`]\n\n`SplitInclusive::as_str` is under `\"str_split_inclusive_as_str\"` feature gate, all other methods are under `\"str_split_as_str\"` feature gate.\n\nBefore this PR you had to sum `len`s of all yielded parts or collect into `String` to emulate `as_str`.\n\n[`Chars::as_str`]: https://doc.rust-lang.org/core/str/struct.Chars.html#method.as_str", "tree": {"sha": "06c846ce5316de6ca3a2b1242555115ca99b4fd9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06c846ce5316de6ca3a2b1242555115ca99b4fd9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/977df43c4a7fae07a5623ad851190181a274b54d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfiOTYCRBK7hj4Ov3rIwAAdHIIAJyNSdmh+GUyD3AysdJ/5TUi\n7qnEDtmSYYmCJ6auYPy+smxPxU5KYi3H7UCyrCbE3lWZ1HTjYiPdQWGQ5BY6pbQZ\nQ2ZpJTmhuWEYnzc0CrUodEO5L6/d2n5VHGnKly3FybPCrype3PeYh55fRzbLNXut\n4r5uZ7YK+NP/OW1SqG4Yw/AqOJhA18Hjb9VdLGmg9hACKPSSE0+wpvtSAV/R5st9\njiNU+SE+TZ+wH4PJYztN/qefrwqgR9xFDyvqT//sYNGWqTpndl1wdVWqkt2qODHL\nfKj+4K0p+ujH4GsCHH/frETgdK51ReZqAkvf1KPpPCet5KnkxcD/CScwW44UIj4=\n=nh94\n-----END PGP SIGNATURE-----\n", "payload": "tree 06c846ce5316de6ca3a2b1242555115ca99b4fd9\nparent 075f2bfc393c0c4efc8d18d839c0d91c496dbaba\nparent 7bd6403b38965a17bd0f0693fa1563d09681d422\nauthor Dylan DPC <dylan.dpc@gmail.com> 1602807000 +0200\ncommitter GitHub <noreply@github.com> 1602807000 +0200\n\nRollup merge of #75265 - WaffleLapkin:str_split_as_str, r=dtolnay\n\nAdd `str::{Split,RSplit,SplitN,RSplitN,SplitTerminator,RSplitTerminator,SplitInclusive}::as_str` methods\n\ntl;dr this allows viewing unyelded part of str-split-iterators, like so:\n```rust\nlet mut split = \"Mary had a little lamb\".split(' ');\nassert_eq!(split.as_str(), \"Mary had a little lamb\");\nsplit.next();\nassert_eq!(split.as_str(), \"had a little lamb\");\nsplit.by_ref().for_each(drop);\nassert_eq!(split.as_str(), \"\");\n```\n\n--------------\n\nThis PR adds semi-identical `as_str` methods to most str-split-iterators with signatures like `&'_ Split<'a, P: Pattern<'a>> -> &'a str` (Note: output `&str` lifetime is bound to the `'a`, not the `'_`). The methods are similar to [`Chars::as_str`]\n\n`SplitInclusive::as_str` is under `\"str_split_inclusive_as_str\"` feature gate, all other methods are under `\"str_split_as_str\"` feature gate.\n\nBefore this PR you had to sum `len`s of all yielded parts or collect into `String` to emulate `as_str`.\n\n[`Chars::as_str`]: https://doc.rust-lang.org/core/str/struct.Chars.html#method.as_str\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/977df43c4a7fae07a5623ad851190181a274b54d", "html_url": "https://github.com/rust-lang/rust/commit/977df43c4a7fae07a5623ad851190181a274b54d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/977df43c4a7fae07a5623ad851190181a274b54d/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "075f2bfc393c0c4efc8d18d839c0d91c496dbaba", "url": "https://api.github.com/repos/rust-lang/rust/commits/075f2bfc393c0c4efc8d18d839c0d91c496dbaba", "html_url": "https://github.com/rust-lang/rust/commit/075f2bfc393c0c4efc8d18d839c0d91c496dbaba"}, {"sha": "7bd6403b38965a17bd0f0693fa1563d09681d422", "url": "https://api.github.com/repos/rust-lang/rust/commits/7bd6403b38965a17bd0f0693fa1563d09681d422", "html_url": "https://github.com/rust-lang/rust/commit/7bd6403b38965a17bd0f0693fa1563d09681d422"}], "stats": {"total": 166, "additions": 166, "deletions": 0}, "files": [{"sha": "97f27566eb0f4206bafce53a071be19ed6bd5a6e", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/977df43c4a7fae07a5623ad851190181a274b54d/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/977df43c4a7fae07a5623ad851190181a274b54d/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=977df43c4a7fae07a5623ad851190181a274b54d", "patch": "@@ -126,6 +126,8 @@\n #![feature(staged_api)]\n #![feature(std_internals)]\n #![feature(stmt_expr_attributes)]\n+#![feature(str_split_as_str)]\n+#![feature(str_split_inclusive_as_str)]\n #![feature(transparent_unions)]\n #![feature(unboxed_closures)]\n #![feature(unsized_locals)]"}, {"sha": "bee86df520c80a04aa8c9c9b5f842dcd30cb5843", "filename": "library/core/src/str/iter.rs", "status": "modified", "additions": 164, "deletions": 0, "changes": 164, "blob_url": "https://github.com/rust-lang/rust/blob/977df43c4a7fae07a5623ad851190181a274b54d/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/977df43c4a7fae07a5623ad851190181a274b54d/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs?ref=977df43c4a7fae07a5623ad851190181a274b54d", "patch": "@@ -690,6 +690,17 @@ impl<'a, P: Pattern<'a>> SplitInternal<'a, P> {\n             },\n         }\n     }\n+\n+    #[inline]\n+    fn as_str(&self) -> &'a str {\n+        // `Self::get_end` doesn't change `self.start`\n+        if self.finished {\n+            return \"\";\n+        }\n+\n+        // SAFETY: `self.start` and `self.end` always lie on unicode boundaries.\n+        unsafe { self.matcher.haystack().get_unchecked(self.start..self.end) }\n+    }\n }\n \n generate_pattern_iterators! {\n@@ -710,6 +721,48 @@ generate_pattern_iterators! {\n     delegate double ended;\n }\n \n+impl<'a, P: Pattern<'a>> Split<'a, P> {\n+    /// Returns remainder of the splitted string\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(str_split_as_str)]\n+    /// let mut split = \"Mary had a little lamb\".split(' ');\n+    /// assert_eq!(split.as_str(), \"Mary had a little lamb\");\n+    /// split.next();\n+    /// assert_eq!(split.as_str(), \"had a little lamb\");\n+    /// split.by_ref().for_each(drop);\n+    /// assert_eq!(split.as_str(), \"\");\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"str_split_as_str\", issue = \"77998\")]\n+    pub fn as_str(&self) -> &'a str {\n+        self.0.as_str()\n+    }\n+}\n+\n+impl<'a, P: Pattern<'a>> RSplit<'a, P> {\n+    /// Returns remainder of the splitted string\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(str_split_as_str)]\n+    /// let mut split = \"Mary had a little lamb\".rsplit(' ');\n+    /// assert_eq!(split.as_str(), \"Mary had a little lamb\");\n+    /// split.next();\n+    /// assert_eq!(split.as_str(), \"Mary had a little\");\n+    /// split.by_ref().for_each(drop);\n+    /// assert_eq!(split.as_str(), \"\");\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"str_split_as_str\", issue = \"77998\")]\n+    pub fn as_str(&self) -> &'a str {\n+        self.0.as_str()\n+    }\n+}\n+\n generate_pattern_iterators! {\n     forward:\n         /// Created with the method [`split_terminator`].\n@@ -728,6 +781,48 @@ generate_pattern_iterators! {\n     delegate double ended;\n }\n \n+impl<'a, P: Pattern<'a>> SplitTerminator<'a, P> {\n+    /// Returns remainder of the splitted string\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(str_split_as_str)]\n+    /// let mut split = \"A..B..\".split_terminator('.');\n+    /// assert_eq!(split.as_str(), \"A..B..\");\n+    /// split.next();\n+    /// assert_eq!(split.as_str(), \".B..\");\n+    /// split.by_ref().for_each(drop);\n+    /// assert_eq!(split.as_str(), \"\");\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"str_split_as_str\", issue = \"77998\")]\n+    pub fn as_str(&self) -> &'a str {\n+        self.0.as_str()\n+    }\n+}\n+\n+impl<'a, P: Pattern<'a>> RSplitTerminator<'a, P> {\n+    /// Returns remainder of the splitted string\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(str_split_as_str)]\n+    /// let mut split = \"A..B..\".rsplit_terminator('.');\n+    /// assert_eq!(split.as_str(), \"A..B..\");\n+    /// split.next();\n+    /// assert_eq!(split.as_str(), \"A..B\");\n+    /// split.by_ref().for_each(drop);\n+    /// assert_eq!(split.as_str(), \"\");\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"str_split_as_str\", issue = \"77998\")]\n+    pub fn as_str(&self) -> &'a str {\n+        self.0.as_str()\n+    }\n+}\n+\n derive_pattern_clone! {\n     clone SplitNInternal\n     with |s| SplitNInternal { iter: s.iter.clone(), ..*s }\n@@ -784,6 +879,11 @@ impl<'a, P: Pattern<'a>> SplitNInternal<'a, P> {\n             }\n         }\n     }\n+\n+    #[inline]\n+    fn as_str(&self) -> &'a str {\n+        self.iter.as_str()\n+    }\n }\n \n generate_pattern_iterators! {\n@@ -804,6 +904,48 @@ generate_pattern_iterators! {\n     delegate single ended;\n }\n \n+impl<'a, P: Pattern<'a>> SplitN<'a, P> {\n+    /// Returns remainder of the splitted string\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(str_split_as_str)]\n+    /// let mut split = \"Mary had a little lamb\".splitn(3, ' ');\n+    /// assert_eq!(split.as_str(), \"Mary had a little lamb\");\n+    /// split.next();\n+    /// assert_eq!(split.as_str(), \"had a little lamb\");\n+    /// split.by_ref().for_each(drop);\n+    /// assert_eq!(split.as_str(), \"\");\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"str_split_as_str\", issue = \"77998\")]\n+    pub fn as_str(&self) -> &'a str {\n+        self.0.as_str()\n+    }\n+}\n+\n+impl<'a, P: Pattern<'a>> RSplitN<'a, P> {\n+    /// Returns remainder of the splitted string\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(str_split_as_str)]\n+    /// let mut split = \"Mary had a little lamb\".rsplitn(3, ' ');\n+    /// assert_eq!(split.as_str(), \"Mary had a little lamb\");\n+    /// split.next();\n+    /// assert_eq!(split.as_str(), \"Mary had a little\");\n+    /// split.by_ref().for_each(drop);\n+    /// assert_eq!(split.as_str(), \"\");\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"str_split_as_str\", issue = \"77998\")]\n+    pub fn as_str(&self) -> &'a str {\n+        self.0.as_str()\n+    }\n+}\n+\n derive_pattern_clone! {\n     clone MatchIndicesInternal\n     with |s| MatchIndicesInternal(s.0.clone())\n@@ -1134,6 +1276,28 @@ impl<'a, P: Pattern<'a, Searcher: ReverseSearcher<'a>>> DoubleEndedIterator\n #[unstable(feature = \"split_inclusive\", issue = \"72360\")]\n impl<'a, P: Pattern<'a>> FusedIterator for SplitInclusive<'a, P> {}\n \n+impl<'a, P: Pattern<'a>> SplitInclusive<'a, P> {\n+    /// Returns remainder of the splitted string\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(str_split_inclusive_as_str)]\n+    /// #![feature(split_inclusive)]\n+    /// let mut split = \"Mary had a little lamb\".split_inclusive(' ');\n+    /// assert_eq!(split.as_str(), \"Mary had a little lamb\");\n+    /// split.next();\n+    /// assert_eq!(split.as_str(), \"had a little lamb\");\n+    /// split.by_ref().for_each(drop);\n+    /// assert_eq!(split.as_str(), \"\");\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"str_split_inclusive_as_str\", issue = \"77998\")]\n+    pub fn as_str(&self) -> &'a str {\n+        self.0.as_str()\n+    }\n+}\n+\n /// An iterator of [`u16`] over the string encoded as UTF-16.\n ///\n /// This struct is created by the [`encode_utf16`] method on [`str`]."}]}