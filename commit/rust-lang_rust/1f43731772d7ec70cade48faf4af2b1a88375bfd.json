{"sha": "1f43731772d7ec70cade48faf4af2b1a88375bfd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmNDM3MzE3NzJkN2VjNzBjYWRlNDhmYWY0YWYyYjFhODgzNzViZmQ=", "commit": {"author": {"name": "Taylor Cramer", "email": "cramertaylorj@gmail.com", "date": "2017-03-14T23:48:01Z"}, "committer": {"name": "Taylor Cramer", "email": "cramertaylorj@gmail.com", "date": "2017-03-18T04:01:04Z"}, "message": "Add more catch-related CFG and lifetime tests and fix CFG bug", "tree": {"sha": "8bc6b5d2ea1dd07aecf2ccd3826004e1088a3b27", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8bc6b5d2ea1dd07aecf2ccd3826004e1088a3b27"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f43731772d7ec70cade48faf4af2b1a88375bfd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f43731772d7ec70cade48faf4af2b1a88375bfd", "html_url": "https://github.com/rust-lang/rust/commit/1f43731772d7ec70cade48faf4af2b1a88375bfd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f43731772d7ec70cade48faf4af2b1a88375bfd/comments", "author": {"login": "cramertj", "id": 5963049, "node_id": "MDQ6VXNlcjU5NjMwNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5963049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cramertj", "html_url": "https://github.com/cramertj", "followers_url": "https://api.github.com/users/cramertj/followers", "following_url": "https://api.github.com/users/cramertj/following{/other_user}", "gists_url": "https://api.github.com/users/cramertj/gists{/gist_id}", "starred_url": "https://api.github.com/users/cramertj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cramertj/subscriptions", "organizations_url": "https://api.github.com/users/cramertj/orgs", "repos_url": "https://api.github.com/users/cramertj/repos", "events_url": "https://api.github.com/users/cramertj/events{/privacy}", "received_events_url": "https://api.github.com/users/cramertj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cramertj", "id": 5963049, "node_id": "MDQ6VXNlcjU5NjMwNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5963049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cramertj", "html_url": "https://github.com/cramertj", "followers_url": "https://api.github.com/users/cramertj/followers", "following_url": "https://api.github.com/users/cramertj/following{/other_user}", "gists_url": "https://api.github.com/users/cramertj/gists{/gist_id}", "starred_url": "https://api.github.com/users/cramertj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cramertj/subscriptions", "organizations_url": "https://api.github.com/users/cramertj/orgs", "repos_url": "https://api.github.com/users/cramertj/repos", "events_url": "https://api.github.com/users/cramertj/events{/privacy}", "received_events_url": "https://api.github.com/users/cramertj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc04eaacc5bd5760e98cd3aa390dcc3ae795d12f", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc04eaacc5bd5760e98cd3aa390dcc3ae795d12f", "html_url": "https://github.com/rust-lang/rust/commit/fc04eaacc5bd5760e98cd3aa390dcc3ae795d12f"}], "stats": {"total": 109, "additions": 90, "deletions": 19}, "files": [{"sha": "189a7344c313058432770a3ce7175470a0fcfc3e", "filename": "src/librustc/cfg/construct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f43731772d7ec70cade48faf4af2b1a88375bfd/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f43731772d7ec70cade48faf4af2b1a88375bfd/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fcfg%2Fconstruct.rs?ref=1f43731772d7ec70cade48faf4af2b1a88375bfd", "patch": "@@ -87,7 +87,7 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n                 stmts_exit = self.stmt(stmt, stmts_exit);\n             }\n             let blk_expr_exit = self.opt_expr(&blk.expr, stmts_exit);\n-            self.add_contained_edge(blk_expr_exit, blk_expr_exit);\n+            self.add_contained_edge(blk_expr_exit, expr_exit);\n \n             self.breakable_block_scopes.pop();\n "}, {"sha": "57242dad6e31ee9501d2b850d7a487c9e4c61663", "filename": "src/test/compile-fail/catch-bad-lifetime.rs", "status": "modified", "additions": 26, "deletions": 18, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/1f43731772d7ec70cade48faf4af2b1a88375bfd/src%2Ftest%2Fcompile-fail%2Fcatch-bad-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f43731772d7ec70cade48faf4af2b1a88375bfd/src%2Ftest%2Fcompile-fail%2Fcatch-bad-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcatch-bad-lifetime.rs?ref=1f43731772d7ec70cade48faf4af2b1a88375bfd", "patch": "@@ -10,26 +10,34 @@\n \n #![feature(catch_expr)]\n \n+// This test checks that borrows made and returned inside catch blocks are properly constrained\n pub fn main() {\n-    let _: Result<(), &str> = do catch {\n-        let my_string = String::from(\"\");\n-        let my_str: &str = &my_string;\n-        Err(my_str)?;\n-        Err(\"\")?;\n-        Ok(())\n-    }; //~ ERROR `my_string` does not live long enough\n+    {\n+        // Test that borrows returned from a catch block must be valid for the lifetime of the\n+        // result variable\n+        let _result: Result<(), &str> = do catch {\n+            let my_string = String::from(\"\");\n+            let my_str: & str = & my_string;\n+            Err(my_str) ?;\n+            Err(\"\") ?;\n+            Ok(())\n+        }; //~ ERROR `my_string` does not live long enough\n+    }\n \n-    let mut i = 5;\n-    let k = &mut i;\n-    let mut j: Result<(), &mut i32> = do catch {\n-        Err(k)?;\n-        i = 10; //~ ERROR cannot assign to `i` because it is borrowed\n-        Ok(())\n-    };\n-    ::std::mem::drop(k); //~ ERROR use of moved value: `k`\n-    i = 40; //~ ERROR cannot assign to `i` because it is borrowed\n+    {\n+        // Test that borrows returned from catch blocks freeze their referent\n+        let mut i = 5;\n+        let k = &mut i;\n+        let mut j: Result<(), &mut i32> = do catch {\n+            Err(k) ?;\n+            i = 10; //~ ERROR cannot assign to `i` because it is borrowed\n+            Ok(())\n+        };\n+        ::std::mem::drop(k); //~ ERROR use of moved value: `k`\n+        i = 40; //~ ERROR cannot assign to `i` because it is borrowed\n \n-    let i_ptr = if let Err(i_ptr) = j { i_ptr } else { panic!(\"\") };\n-    *i_ptr = 50;\n+        let i_ptr = if let Err(i_ptr) = j { i_ptr } else { panic ! (\"\") };\n+        *i_ptr = 50;\n+    }\n }\n "}, {"sha": "b783a3dd7860fb909909e4c0ff69680dc1a5b1c1", "filename": "src/test/compile-fail/catch-maybe-bad-lifetime.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/1f43731772d7ec70cade48faf4af2b1a88375bfd/src%2Ftest%2Fcompile-fail%2Fcatch-maybe-bad-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f43731772d7ec70cade48faf4af2b1a88375bfd/src%2Ftest%2Fcompile-fail%2Fcatch-maybe-bad-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcatch-maybe-bad-lifetime.rs?ref=1f43731772d7ec70cade48faf4af2b1a88375bfd", "patch": "@@ -0,0 +1,51 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(catch_expr)]\n+\n+// This test checks that borrows made and returned inside catch blocks are properly constrained\n+pub fn main() {\n+    {\n+        // Test that a borrow which *might* be returned still freezes its referent\n+        let mut i = 222;\n+        let x: Result<&i32, ()> = do catch {\n+            Err(())?;\n+            Ok(&i)\n+        };\n+        x.ok().cloned();\n+        i = 0; //~ ERROR cannot assign to `i` because it is borrowed\n+        let _ = i;\n+    }\n+\n+    {\n+        let x = String::new();\n+        let _y: Result<(), ()> = do catch {\n+            Err(())?;\n+            ::std::mem::drop(x);\n+            Ok(())\n+        };\n+        println!(\"{}\", x); //~ ERROR use of moved value: `x`\n+    }\n+\n+    {\n+        // Test that a borrow which *might* be assigned to an outer variable still freezes\n+        // its referent\n+        let mut i = 222;\n+        let j;\n+        let x: Result<(), ()> = do catch {\n+            Err(())?;\n+            j = &i;\n+            Ok(())\n+        };\n+        i = 0; //~ ERROR cannot assign to `i` because it is borrowed\n+        let _ = i;\n+    }\n+}\n+"}, {"sha": "48284b4cb90b26f88acf78d611371ac9d39839ee", "filename": "src/test/compile-fail/catch-opt-init.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f43731772d7ec70cade48faf4af2b1a88375bfd/src%2Ftest%2Fcompile-fail%2Fcatch-opt-init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f43731772d7ec70cade48faf4af2b1a88375bfd/src%2Ftest%2Fcompile-fail%2Fcatch-opt-init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcatch-opt-init.rs?ref=1f43731772d7ec70cade48faf4af2b1a88375bfd", "patch": "@@ -10,11 +10,15 @@\n \n #![feature(catch_expr)]\n \n+fn use_val<T: Sized>(_x: T) {}\n+\n pub fn main() {\n     let cfg_res;\n     let _: Result<(), ()> = do catch {\n         Err(())?;\n         cfg_res = 5;\n+        Ok::<(), ()>(())?;\n+        use_val(cfg_res);\n         Ok(())\n     };\n     assert_eq!(cfg_res, 5); //~ ERROR use of possibly uninitialized variable"}, {"sha": "5a757161a78a4e6858e4d6bf7e4717c67d861d23", "filename": "src/test/run-pass/catch-expr.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f43731772d7ec70cade48faf4af2b1a88375bfd/src%2Ftest%2Frun-pass%2Fcatch-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f43731772d7ec70cade48faf4af2b1a88375bfd/src%2Ftest%2Frun-pass%2Fcatch-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcatch-expr.rs?ref=1f43731772d7ec70cade48faf4af2b1a88375bfd", "patch": "@@ -58,6 +58,14 @@ pub fn main() {\n     };\n     assert_eq!(cfg_init, 5);\n \n+    let cfg_init_2;\n+    let _res: Result<(), ()> = do catch {\n+        cfg_init_2 = 6;\n+        Err(())?;\n+        Ok(())\n+    };\n+    assert_eq!(cfg_init_2, 6);\n+\n     let my_string = \"test\".to_string();\n     let res: Result<&str, ()> = do catch {\n         Ok(&my_string)"}]}