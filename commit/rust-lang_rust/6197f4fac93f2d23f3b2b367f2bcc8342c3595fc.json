{"sha": "6197f4fac93f2d23f3b2b367f2bcc8342c3595fc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxOTdmNGZhYzkzZjJkMjNmM2IyYjM2N2YyYmNjODM0MmMzNTk1ZmM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-06-04T17:42:02Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-06-05T21:23:35Z"}, "message": "Permit int->ptr->int roundtrip", "tree": {"sha": "a4b729ff159d7bce58d66d4196e81ef41b27f5c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a4b729ff159d7bce58d66d4196e81ef41b27f5c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6197f4fac93f2d23f3b2b367f2bcc8342c3595fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6197f4fac93f2d23f3b2b367f2bcc8342c3595fc", "html_url": "https://github.com/rust-lang/rust/commit/6197f4fac93f2d23f3b2b367f2bcc8342c3595fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6197f4fac93f2d23f3b2b367f2bcc8342c3595fc/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cfff91ba3ec4cfb777e3f18c9cd1e5b1c4985713", "url": "https://api.github.com/repos/rust-lang/rust/commits/cfff91ba3ec4cfb777e3f18c9cd1e5b1c4985713", "html_url": "https://github.com/rust-lang/rust/commit/cfff91ba3ec4cfb777e3f18c9cd1e5b1c4985713"}], "stats": {"total": 27, "additions": 25, "deletions": 2}, "files": [{"sha": "8eba793c9f65e3c0928bbdf1fda744c4d0e57f65", "filename": "src/eval_context.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6197f4fac93f2d23f3b2b367f2bcc8342c3595fc/src%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6197f4fac93f2d23f3b2b367f2bcc8342c3595fc/src%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval_context.rs?ref=6197f4fac93f2d23f3b2b367f2bcc8342c3595fc", "patch": "@@ -1438,6 +1438,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     panic!(\"Failed to access local: {:?}\", err);\n                 }\n                 Ok(Value::ByRef(ptr)) => {\n+                    write!(msg, \" by ref:\").unwrap();\n                     allocs.push(ptr.alloc_id);\n                 }\n                 Ok(Value::ByVal(val)) => {"}, {"sha": "e21b9c9e4d365971de19f76ef2119bb0808f45b4", "filename": "src/memory.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6197f4fac93f2d23f3b2b367f2bcc8342c3595fc/src%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6197f4fac93f2d23f3b2b367f2bcc8342c3595fc/src%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmemory.rs?ref=6197f4fac93f2d23f3b2b367f2bcc8342c3595fc", "patch": "@@ -605,7 +605,7 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n         if size == 0 {\n             return Ok(&[]);\n         }\n-        if self.relocations(ptr, size)?.count() != 0 {\n+        if self.has_non_int_relocations(ptr, size)? {\n             return Err(EvalError::ReadPointerAsBytes);\n         }\n         self.check_defined(ptr, size)?;\n@@ -703,7 +703,7 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n         let offset = ptr.offset as usize;\n         match alloc.bytes[offset..].iter().position(|&c| c == 0) {\n             Some(size) => {\n-                if self.relocations(ptr, (size + 1) as u64)?.count() != 0 {\n+                if self.has_non_int_relocations(ptr, (size + 1) as u64)? {\n                     return Err(EvalError::ReadPointerAsBytes);\n                 }\n                 self.check_defined(ptr, (size + 1) as u64)?;\n@@ -887,6 +887,12 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n         Ok(self.get(ptr.alloc_id)?.relocations.range(start..end))\n     }\n \n+    fn has_non_int_relocations(&self, ptr: Pointer, size: u64)\n+        -> EvalResult<'tcx, bool>\n+    {\n+        Ok(self.relocations(ptr, size)?.any(|(_, &alloc_id)| alloc_id != NEVER_ALLOC_ID))\n+    }\n+\n     fn clear_relocations(&mut self, ptr: Pointer, size: u64) -> EvalResult<'tcx> {\n         // Find all relocations overlapping the given range.\n         let keys: Vec<_> = self.relocations(ptr, size)?.map(|(&k, _)| k).collect();"}, {"sha": "4983ea4f886b534ad10af75f5ef9bbe2ad959239", "filename": "tests/run-pass/ptr_int_casts.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6197f4fac93f2d23f3b2b367f2bcc8342c3595fc/tests%2Frun-pass%2Fptr_int_casts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6197f4fac93f2d23f3b2b367f2bcc8342c3595fc/tests%2Frun-pass%2Fptr_int_casts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fptr_int_casts.rs?ref=6197f4fac93f2d23f3b2b367f2bcc8342c3595fc", "patch": "@@ -0,0 +1,16 @@\n+// fn eq_ref<T>(x: &T, y: &T) -> bool {\n+//     x as *const _ == y as *const _\n+// }\n+\n+fn main() {\n+    // int-ptr-int\n+    assert_eq!(1 as *const i32 as usize, 1);\n+\n+    // TODO\n+//     {   // ptr-int-ptr\n+//         let x = 13;\n+//         let y = &x as *const _ as usize;\n+//         let y = y as *const _;\n+//         assert!(eq_ref(&x, unsafe { &*y }));\n+//     }\n+}"}]}