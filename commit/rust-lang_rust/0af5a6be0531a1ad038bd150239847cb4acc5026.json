{"sha": "0af5a6be0531a1ad038bd150239847cb4acc5026", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhZjVhNmJlMDUzMWExYWQwMzhiZDE1MDIzOTg0N2NiNGFjYzUwMjY=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2018-07-21T22:12:16Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2018-07-31T17:37:21Z"}, "message": "Pull out nightly checking to edges\n\nParsing the code block's LangString (```foo) previously checked itself\nto see if we were on nightly; that isn't the right place to do so. Move\nthat check slightly outwards to better abstract LangString.\n\n(This is also an optimization as we avoid the costly environment\nvariable load of RUSTC_BOOTSTRAP).", "tree": {"sha": "9333a37b41c4b4b2d308f522b7c5fed127f0f78f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9333a37b41c4b4b2d308f522b7c5fed127f0f78f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0af5a6be0531a1ad038bd150239847cb4acc5026", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0af5a6be0531a1ad038bd150239847cb4acc5026", "html_url": "https://github.com/rust-lang/rust/commit/0af5a6be0531a1ad038bd150239847cb4acc5026", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0af5a6be0531a1ad038bd150239847cb4acc5026/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f89817997ac0aa100bf91997194ad85a7e59f743", "url": "https://api.github.com/repos/rust-lang/rust/commits/f89817997ac0aa100bf91997194ad85a7e59f743", "html_url": "https://github.com/rust-lang/rust/commit/f89817997ac0aa100bf91997194ad85a7e59f743"}], "stats": {"total": 15, "additions": 7, "deletions": 8}, "files": [{"sha": "d01745f4a46fad30f1dc6c1bedd893e50f2e57f9", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0af5a6be0531a1ad038bd150239847cb4acc5026/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0af5a6be0531a1ad038bd150239847cb4acc5026/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=0af5a6be0531a1ad038bd150239847cb4acc5026", "patch": "@@ -129,12 +129,14 @@ thread_local!(pub static PLAYGROUND: RefCell<Option<(Option<String>, String)>> =\n /// Adds syntax highlighting and playground Run buttons to rust code blocks.\n struct CodeBlocks<'a, I: Iterator<Item = Event<'a>>> {\n     inner: I,\n+    check_error_codes: bool,\n }\n \n impl<'a, I: Iterator<Item = Event<'a>>> CodeBlocks<'a, I> {\n     fn new(iter: I) -> Self {\n         CodeBlocks {\n             inner: iter,\n+            check_error_codes: UnstableFeatures::from_environment().is_nightly_build(),\n         }\n     }\n }\n@@ -147,7 +149,7 @@ impl<'a, I: Iterator<Item = Event<'a>>> Iterator for CodeBlocks<'a, I> {\n         let compile_fail;\n         let ignore;\n         if let Some(Event::Start(Tag::CodeBlock(lang))) = event {\n-            let parse_result = LangString::parse(&lang);\n+            let parse_result = LangString::parse(&lang, self.check_error_codes);\n             if !parse_result.rust {\n                 return Some(Event::Start(Tag::CodeBlock(lang)));\n             }\n@@ -471,6 +473,7 @@ pub fn find_testable_code(doc: &str, tests: &mut ::test::Collector, position: Sp\n                           sess: Option<&session::Session>) {\n     tests.set_position(position);\n \n+    let is_nightly = UnstableFeatures::from_environment().is_nightly_build();\n     let mut parser = Parser::new(doc);\n     let mut prev_offset = 0;\n     let mut nb_lines = 0;\n@@ -481,7 +484,7 @@ pub fn find_testable_code(doc: &str, tests: &mut ::test::Collector, position: Sp\n                 let block_info = if s.is_empty() {\n                     LangString::all_false()\n                 } else {\n-                    LangString::parse(&*s)\n+                    LangString::parse(&*s, is_nightly)\n                 };\n                 if !block_info.rust {\n                     continue\n@@ -569,14 +572,10 @@ impl LangString {\n         }\n     }\n \n-    fn parse(string: &str) -> LangString {\n+    fn parse(string: &str, allow_error_code_check: bool) -> LangString {\n         let mut seen_rust_tags = false;\n         let mut seen_other_tags = false;\n         let mut data = LangString::all_false();\n-        let mut allow_error_code_check = false;\n-        if UnstableFeatures::from_environment().is_nightly_build() {\n-            allow_error_code_check = true;\n-        }\n \n         data.original = string.to_owned();\n         let tokens = string.split(|c: char|\n@@ -842,7 +841,7 @@ mod tests {\n         fn t(s: &str,\n             should_panic: bool, no_run: bool, ignore: bool, rust: bool, test_harness: bool,\n             compile_fail: bool, allow_fail: bool, error_codes: Vec<String>) {\n-            assert_eq!(LangString::parse(s), LangString {\n+            assert_eq!(LangString::parse(s, true), LangString {\n                 should_panic,\n                 no_run,\n                 ignore,"}]}