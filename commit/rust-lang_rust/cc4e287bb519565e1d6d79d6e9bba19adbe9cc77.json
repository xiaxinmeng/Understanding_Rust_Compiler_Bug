{"sha": "cc4e287bb519565e1d6d79d6e9bba19adbe9cc77", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjNGUyODdiYjUxOTU2NWUxZDZkNzlkNmU5YmJhMTlhZGJlOWNjNzc=", "commit": {"author": {"name": "oxalica", "email": "oxalicc@pm.me", "date": "2020-09-11T16:12:42Z"}, "committer": {"name": "oxalica", "email": "oxalicc@pm.me", "date": "2020-09-11T16:12:42Z"}, "message": "Fix and prettify comments", "tree": {"sha": "9a88e0ad8daa14bb24433e25383aea07f9a8e2b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a88e0ad8daa14bb24433e25383aea07f9a8e2b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc4e287bb519565e1d6d79d6e9bba19adbe9cc77", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEXLDp5dXVcfV/VA/qztOS3gxIPQAFAl9bofoACgkQztOS3gxI\nPQDPPw/8C0Ck0QKJjoZ+j/auq7p/2CCVk7Mogbp8qi0E7FmyiokdG3Upf0VAYdrX\nQZuKMLpMCw/+n0EAy5DJ3eMVYXsQtG/6EdcmBA7Hp43Xvx68PsK6iQBpglRfnyeX\n2HbNZUJtTBnoSaGN0SLtBh1bPvbwBIJd2XjatLspQfHyxMwZdZMWCnxAITUM77Rz\nbGGA4U109Ocxj126640VeUDroqSlsSEvf2JQ7qYXR9q+RUyhVNxSle49XPUMFBVW\nqunKT2ZGP/+aqcFVVe+VdR/nd0WFKFasP404qDHFjKbmcCQtkE6oU/scJEsY69Fu\noC6l+aUc+6N2wVRvtiHbGdkTaP+EBepaF+Wcd0rUD996RQB8E2R+sH102/lFQXQO\nv7XGfLclUbBnNQ+uhqD5jYueAUeXi5ft7QhumvSx87VpcAhptwWX03Y4bGvIlc4l\n19Z/v0cd2DPvBzWYgQgB/4yH2BXYMOhBjNyp/NdH379gj+gzPb0367vxRlcfu1X/\nMs8Ld7BzZRraXggBg0mfm0na06W+vOHfRnIHFVVAKXUhQWR4/v603LS7D9RrKCnU\neRd78/nUkwfZ5Cytom0SFmdHc6oFxMdQFjraW+pWk0Lu9Pqri0dVBrWxEqROIloe\nb6tRQBSJrWU7TMhZqyFSJ0CVqKQWwMD+vgekQiFrzzYlyX6omuk=\n=qaN/\n-----END PGP SIGNATURE-----", "payload": "tree 9a88e0ad8daa14bb24433e25383aea07f9a8e2b0\nparent 251ef93ac3bbb138a2eedf6090f2f56f1a15d898\nauthor oxalica <oxalicc@pm.me> 1599840762 +0800\ncommitter oxalica <oxalicc@pm.me> 1599840762 +0800\n\nFix and prettify comments\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc4e287bb519565e1d6d79d6e9bba19adbe9cc77", "html_url": "https://github.com/rust-lang/rust/commit/cc4e287bb519565e1d6d79d6e9bba19adbe9cc77", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc4e287bb519565e1d6d79d6e9bba19adbe9cc77/comments", "author": {"login": "oxalica", "id": 14816024, "node_id": "MDQ6VXNlcjE0ODE2MDI0", "avatar_url": "https://avatars.githubusercontent.com/u/14816024?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oxalica", "html_url": "https://github.com/oxalica", "followers_url": "https://api.github.com/users/oxalica/followers", "following_url": "https://api.github.com/users/oxalica/following{/other_user}", "gists_url": "https://api.github.com/users/oxalica/gists{/gist_id}", "starred_url": "https://api.github.com/users/oxalica/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oxalica/subscriptions", "organizations_url": "https://api.github.com/users/oxalica/orgs", "repos_url": "https://api.github.com/users/oxalica/repos", "events_url": "https://api.github.com/users/oxalica/events{/privacy}", "received_events_url": "https://api.github.com/users/oxalica/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oxalica", "id": 14816024, "node_id": "MDQ6VXNlcjE0ODE2MDI0", "avatar_url": "https://avatars.githubusercontent.com/u/14816024?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oxalica", "html_url": "https://github.com/oxalica", "followers_url": "https://api.github.com/users/oxalica/followers", "following_url": "https://api.github.com/users/oxalica/following{/other_user}", "gists_url": "https://api.github.com/users/oxalica/gists{/gist_id}", "starred_url": "https://api.github.com/users/oxalica/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oxalica/subscriptions", "organizations_url": "https://api.github.com/users/oxalica/orgs", "repos_url": "https://api.github.com/users/oxalica/repos", "events_url": "https://api.github.com/users/oxalica/events{/privacy}", "received_events_url": "https://api.github.com/users/oxalica/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "251ef93ac3bbb138a2eedf6090f2f56f1a15d898", "url": "https://api.github.com/repos/rust-lang/rust/commits/251ef93ac3bbb138a2eedf6090f2f56f1a15d898", "html_url": "https://github.com/rust-lang/rust/commit/251ef93ac3bbb138a2eedf6090f2f56f1a15d898"}], "stats": {"total": 10, "additions": 6, "deletions": 4}, "files": [{"sha": "ff364789e0d76c160567cfe937f0b8784a3ef650", "filename": "crates/hir_ty/src/traits/chalk.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cc4e287bb519565e1d6d79d6e9bba19adbe9cc77/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc4e287bb519565e1d6d79d6e9bba19adbe9cc77/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk.rs?ref=cc4e287bb519565e1d6d79d6e9bba19adbe9cc77", "patch": "@@ -202,8 +202,12 @@ impl<'a> chalk_solve::RustIrDatabase<Interner> for ChalkContext<'a> {\n                         Some((trait_, alias))\n                     })\n                 {\n-                    // AsyncBlock<T>: Future</* Self */>\n-                    // This is required by `fn impls_future` to check if we need to provide `.await` completion.\n+                    // Making up `AsyncBlock<T>: Future<Output = T>`\n+                    //\n+                    // |--------------------OpaqueTyDatum-------------------|\n+                    //        |-------------OpaqueTyDatumBound--------------|\n+                    // for<T> <Self> [Future<Self>, Future::Output<Self> = T]\n+                    //     ^1  ^0            ^0                    ^0      ^1\n                     let impl_bound = GenericPredicate::Implemented(TraitRef {\n                         trait_: future_trait,\n                         // Self type as the first parameter.\n@@ -212,8 +216,6 @@ impl<'a> chalk_solve::RustIrDatabase<Interner> for ChalkContext<'a> {\n                             index: 0,\n                         })),\n                     });\n-                    // AsyncBlock<T>: Future</* Self, */ Output = T>;\n-                    // debruijn:  ^1  ^0\n                     let proj_bound = GenericPredicate::Projection(ProjectionPredicate {\n                         // The parameter of the opaque type.\n                         ty: Ty::Bound(BoundVar { debruijn: DebruijnIndex::ONE, index: 0 }),"}]}