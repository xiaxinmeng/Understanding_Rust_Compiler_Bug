{"sha": "b2b101befcfe1ca4ea57862675df0de5ca7b15bd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyYjEwMWJlZmNmZTFjYTRlYTU3ODYyNjc1ZGYwZGU1Y2E3YjE1YmQ=", "commit": {"author": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2018-01-02T23:22:09Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-03-08T07:09:01Z"}, "message": "Prepare for using miri in trans", "tree": {"sha": "d314f6ba6112589a114463de58929b7986271e47", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d314f6ba6112589a114463de58929b7986271e47"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b2b101befcfe1ca4ea57862675df0de5ca7b15bd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAlqg4Y0ACgkQpp+NIls6\n19nCChAAnz4r4u3MhEZhjSkVtuH90JTcUVVlbbHioTdnt/DZXyOw0qHrVc/LaD/q\nxAdYtVKd3oZdNUl6Ldkx/r93UeOcuukvWgYNZS3chTpO4FY2ACVm5aEFSAEmfVgd\n1tYgOQpdmr5tqnkT88XUVrbLSXF4cm6S+yEGldeCwUK96iIT9Z5j+dxWKnbJpPFU\nB2sjV81Kb8CYLIGWQ+7bRI0tJUC++49U9lHtukMyvPaT10flOheAZyansphUO2Zk\ntP6fRIhSuRHlPzWLWs6mXsJl58EpU83VPP6MrbwTx+cUjBdV2sG45PnGaf2CslTl\nRdGXhOBKXdBahXGyGMmEGFCZIWoWNA2LH7j3CfKSzKkbXua/wOSf8s6zWEICUP+j\nT8QZoJ/vniU/5I/AK35tcXBeu8Mzp0D9d/QV/nEYZaQ9fO1YtLrE8UL0rMxun8Ea\nZE1I7ZJ8nUsgMQem9un9bc5SryU2IihOavf1c1EHl/U8Xvbb0PJwrz0Pj3RqBrYD\n9KCMg7MOJ8kl1MiphxrgY+z9FOc+GFl8RXyWTnQQ6Ot442nYY/Ols8Ixz98B1mJ1\nOwOv1nd/HiyqAuSj2KD0weLNx0OYdZqB5Y72mBIveatZgd3s+9xhi2/MuT7SDUpZ\nbhuDORCYdx7ZAXRR+uTZwH6dTbRMyAkORQF6RSUpHa2AKFXoU78=\n=ZLPo\n-----END PGP SIGNATURE-----", "payload": "tree d314f6ba6112589a114463de58929b7986271e47\nparent 4c9b1b13ddc3f3120bb7aee106a261613dfcb000\nauthor Alexander Regueiro <alexreg@me.com> 1514935329 +0000\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1520492941 +0100\n\nPrepare for using miri in trans\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b2b101befcfe1ca4ea57862675df0de5ca7b15bd", "html_url": "https://github.com/rust-lang/rust/commit/b2b101befcfe1ca4ea57862675df0de5ca7b15bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b2b101befcfe1ca4ea57862675df0de5ca7b15bd/comments", "author": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c9b1b13ddc3f3120bb7aee106a261613dfcb000", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c9b1b13ddc3f3120bb7aee106a261613dfcb000", "html_url": "https://github.com/rust-lang/rust/commit/4c9b1b13ddc3f3120bb7aee106a261613dfcb000"}], "stats": {"total": 416, "additions": 286, "deletions": 130}, "files": [{"sha": "6824c015eabcbf02b74ffa7e5f3111dbd5195e5c", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b2b101befcfe1ca4ea57862675df0de5ca7b15bd/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b101befcfe1ca4ea57862675df0de5ca7b15bd/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=b2b101befcfe1ca4ea57862675df0de5ca7b15bd", "patch": "@@ -60,15 +60,15 @@\n //! user of the `DepNode` API of having to know how to compute the expected\n //! fingerprint for a given set of node parameters.\n \n+use mir::interpret::{GlobalId};\n use hir::def_id::{CrateNum, DefId, DefIndex, CRATE_DEF_INDEX};\n use hir::map::DefPathHash;\n use hir::{HirId, ItemLocalId};\n \n-use ich::Fingerprint;\n+use ich::{Fingerprint, StableHashingContext};\n+use rustc_data_structures::stable_hasher::{StableHasher, HashStable};\n use ty::{TyCtxt, Instance, InstanceDef, ParamEnv, ParamEnvAnd, PolyTraitRef, Ty};\n use ty::subst::Substs;\n-use rustc_data_structures::stable_hasher::{StableHasher, HashStable};\n-use ich::StableHashingContext;\n use std::fmt;\n use std::hash::Hash;\n use syntax_pos::symbol::InternedString;\n@@ -518,7 +518,7 @@ define_dep_nodes!( <'tcx>\n     [] TypeckTables(DefId),\n     [] UsedTraitImports(DefId),\n     [] HasTypeckTables(DefId),\n-    [] ConstEval { param_env: ParamEnvAnd<'tcx, (DefId, &'tcx Substs<'tcx>)> },\n+    [] ConstEval { param_env: ParamEnvAnd<'tcx, GlobalId<'tcx>> },\n     [] CheckMatch(DefId),\n     [] SymbolName(DefId),\n     [] InstanceSymbolName { instance: Instance<'tcx> },"}, {"sha": "40204943bb599a25439ef44e987e07214b41339a", "filename": "src/librustc/ich/impls_mir.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2b101befcfe1ca4ea57862675df0de5ca7b15bd/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b101befcfe1ca4ea57862675df0de5ca7b15bd/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_mir.rs?ref=b2b101befcfe1ca4ea57862675df0de5ca7b15bd", "patch": "@@ -585,3 +585,5 @@ impl<'gcx> HashStable<StableHashingContext<'gcx>> for mir::ClosureOutlivesSubjec\n         }\n     }\n }\n+\n+impl_stable_hash_for!(struct mir::interpret::GlobalId<'tcx> { instance, promoted });"}, {"sha": "a25741c95aaca3a199de1017690623606ce240db", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b2b101befcfe1ca4ea57862675df0de5ca7b15bd/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b101befcfe1ca4ea57862675df0de5ca7b15bd/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=b2b101befcfe1ca4ea57862675df0de5ca7b15bd", "patch": "@@ -926,13 +926,13 @@ impl<'gcx> HashStable<StableHashingContext<'gcx>> for ty::InstanceDef<'gcx> {\n             ty::InstanceDef::ClosureOnceShim { call_once } => {\n                 call_once.hash_stable(hcx, hasher);\n             }\n-            ty::InstanceDef::DropGlue(def_id, t) => {\n+            ty::InstanceDef::DropGlue(def_id, ty) => {\n                 def_id.hash_stable(hcx, hasher);\n-                t.hash_stable(hcx, hasher);\n+                ty.hash_stable(hcx, hasher);\n             }\n-            ty::InstanceDef::CloneShim(def_id, t) => {\n+            ty::InstanceDef::CloneShim(def_id, ty) => {\n                 def_id.hash_stable(hcx, hasher);\n-                t.hash_stable(hcx, hasher);\n+                ty.hash_stable(hcx, hasher);\n             }\n         }\n     }"}, {"sha": "2eeef70a14e0b80b492cc573504f78b1ba501d47", "filename": "src/librustc/traits/fulfill.rs", "status": "modified", "additions": 27, "deletions": 7, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/b2b101befcfe1ca4ea57862675df0de5ca7b15bd/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b101befcfe1ca4ea57862675df0de5ca7b15bd/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ffulfill.rs?ref=b2b101befcfe1ca4ea57862675df0de5ca7b15bd", "patch": "@@ -9,6 +9,9 @@\n // except according to those terms.\n \n use infer::{RegionObligation, InferCtxt};\n+use middle::const_val::ConstEvalErr;\n+use middle::const_val::ErrKind::TypeckError;\n+use mir::interpret::GlobalId;\n use ty::{self, Ty, TypeFoldable, ToPolyTraitRef, ToPredicate};\n use ty::error::ExpectedFound;\n use rustc_data_structures::obligation_forest::{ObligationForest, Error};\n@@ -514,17 +517,34 @@ fn process_predicate<'a, 'gcx, 'tcx>(\n                 }\n                 Some(param_env) => {\n                     match selcx.tcx().lift_to_global(&substs) {\n+                        Some(substs) => {\n+                            let instance = ty::Instance::resolve(\n+                                selcx.tcx().global_tcx(),\n+                                param_env,\n+                                def_id,\n+                                substs,\n+                            );\n+                            if let Some(instance) = instance {\n+                                let cid = GlobalId {\n+                                    instance,\n+                                    promoted: None,\n+                                };\n+                                match selcx.tcx().at(obligation.cause.span)\n+                                                 .const_eval(param_env.and(cid)) {\n+                                    Ok(_) => Ok(Some(vec![])),\n+                                    Err(e) => Err(CodeSelectionError(ConstEvalFailure(e)))\n+                                }\n+                            } else {\n+                                Err(CodeSelectionError(ConstEvalFailure(ConstEvalErr {\n+                                    span: selcx.tcx().def_span(def_id),\n+                                    kind: TypeckError,\n+                                })))\n+                            }\n+                        },\n                         None => {\n                             pending_obligation.stalled_on = substs.types().collect();\n                             Ok(None)\n                         }\n-                        Some(substs) => {\n-                            match selcx.tcx().at(obligation.cause.span)\n-                                             .const_eval(param_env.and((def_id, substs))) {\n-                                Ok(_) => Ok(Some(vec![])),\n-                                Err(e) => Err(CodeSelectionError(ConstEvalFailure(e)))\n-                            }\n-                        }\n                     }\n                 }\n             }"}, {"sha": "a9dc49157437967d198dc0e6bf3c44b8dadf4e61", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 24, "deletions": 16, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/b2b101befcfe1ca4ea57862675df0de5ca7b15bd/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b101befcfe1ca4ea57862675df0de5ca7b15bd/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=b2b101befcfe1ca4ea57862675df0de5ca7b15bd", "patch": "@@ -29,6 +29,7 @@ use hir::def_id::DefId;\n use infer::{InferCtxt, InferOk};\n use infer::type_variable::TypeVariableOrigin;\n use middle::const_val::ConstVal;\n+use mir::interpret::{GlobalId};\n use rustc_data_structures::snapshot_map::{Snapshot, SnapshotMap};\n use syntax::symbol::Symbol;\n use ty::subst::{Subst, Substs};\n@@ -400,31 +401,38 @@ impl<'a, 'b, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for AssociatedTypeNormalizer<'a,\n \n     fn fold_const(&mut self, constant: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {\n         if let ConstVal::Unevaluated(def_id, substs) = constant.val {\n-            if substs.needs_infer() {\n-                let identity_substs = Substs::identity_for_item(self.tcx(), def_id);\n-                let data = self.param_env.and((def_id, identity_substs));\n-                match self.tcx().lift_to_global(&data) {\n-                    Some(data) => {\n-                        match self.tcx().const_eval(data) {\n+            let tcx = self.selcx.tcx().global_tcx();\n+            if let Some(param_env) = self.tcx().lift_to_global(&self.param_env) {\n+                if substs.needs_infer() {\n+                    let identity_substs = Substs::identity_for_item(tcx, def_id);\n+                    let instance = ty::Instance::resolve(tcx, param_env, def_id, identity_substs);\n+                    if let Some(instance) = instance {\n+                        let cid = GlobalId {\n+                            instance,\n+                            promoted: None\n+                        };\n+                        match tcx.const_eval(param_env.and(cid)) {\n                             Ok(evaluated) => {\n                                 let evaluated = evaluated.subst(self.tcx(), substs);\n                                 return self.fold_const(evaluated);\n                             }\n                             Err(_) => {}\n                         }\n                     }\n-                    None => {}\n-                }\n-            } else {\n-                let data = self.param_env.and((def_id, substs));\n-                match self.tcx().lift_to_global(&data) {\n-                    Some(data) => {\n-                        match self.tcx().const_eval(data) {\n-                            Ok(evaluated) => return self.fold_const(evaluated),\n-                            Err(_) => {}\n+                } else {\n+                    if let Some(substs) = self.tcx().lift_to_global(&substs) {\n+                        let instance = ty::Instance::resolve(tcx, param_env, def_id, substs);\n+                        if let Some(instance) = instance {\n+                            let cid = GlobalId {\n+                                instance,\n+                                promoted: None\n+                            };\n+                            match tcx.const_eval(param_env.and(cid)) {\n+                                Ok(evaluated) => return self.fold_const(evaluated),\n+                                Err(_) => {}\n+                            }\n                         }\n                     }\n-                    None => {}\n                 }\n             }\n         }"}, {"sha": "91d86394b0192d56ae58c7383a027def22f27c46", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b2b101befcfe1ca4ea57862675df0de5ca7b15bd/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b101befcfe1ca4ea57862675df0de5ca7b15bd/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=b2b101befcfe1ca4ea57862675df0de5ca7b15bd", "patch": "@@ -42,6 +42,7 @@ use ty::{self, ToPredicate, ToPolyTraitRef, Ty, TyCtxt, TypeFoldable};\n use ty::fast_reject;\n use ty::relate::TypeRelation;\n use middle::lang_items;\n+use mir::interpret::{GlobalId};\n \n use rustc_data_structures::bitvec::BitVector;\n use std::iter;\n@@ -732,11 +733,26 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n             }\n \n             ty::Predicate::ConstEvaluatable(def_id, substs) => {\n-                match self.tcx().lift_to_global(&(obligation.param_env, substs)) {\n+                let tcx = self.tcx();\n+                match tcx.lift_to_global(&(obligation.param_env, substs)) {\n                     Some((param_env, substs)) => {\n-                        match self.tcx().const_eval(param_env.and((def_id, substs))) {\n-                            Ok(_) => EvaluatedToOk,\n-                            Err(_) => EvaluatedToErr\n+                        let instance = ty::Instance::resolve(\n+                            tcx.global_tcx(),\n+                            param_env,\n+                            def_id,\n+                            substs,\n+                        );\n+                        if let Some(instance) = instance {\n+                            let cid = GlobalId {\n+                                instance,\n+                                promoted: None\n+                            };\n+                            match self.tcx().const_eval(param_env.and(cid)) {\n+                                Ok(_) => EvaluatedToOk,\n+                                Err(_) => EvaluatedToErr\n+                            }\n+                        } else {\n+                            EvaluatedToErr\n                         }\n                     }\n                     None => {"}, {"sha": "21affcbc9ede7c945b7a2c91a94eb1302386e038", "filename": "src/librustc/ty/maps/config.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b2b101befcfe1ca4ea57862675df0de5ca7b15bd/src%2Flibrustc%2Fty%2Fmaps%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b101befcfe1ca4ea57862675df0de5ca7b15bd/src%2Flibrustc%2Fty%2Fmaps%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fconfig.rs?ref=b2b101befcfe1ca4ea57862675df0de5ca7b15bd", "patch": "@@ -10,9 +10,10 @@\n \n use dep_graph::SerializedDepNodeIndex;\n use hir::def_id::{CrateNum, DefId, DefIndex};\n+use mir::interpret::{GlobalId};\n use ty::{self, Ty, TyCtxt};\n-use ty::maps::queries;\n use ty::subst::Substs;\n+use ty::maps::queries;\n \n use std::hash::Hash;\n use syntax_pos::symbol::InternedString;\n@@ -152,8 +153,8 @@ impl<'tcx> QueryDescription<'tcx> for queries::reachable_set<'tcx> {\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::const_eval<'tcx> {\n-    fn describe(tcx: TyCtxt, key: ty::ParamEnvAnd<'tcx, (DefId, &'tcx Substs<'tcx>)>) -> String {\n-        format!(\"const-evaluating `{}`\", tcx.item_path_str(key.value.0))\n+    fn describe(tcx: TyCtxt, key: ty::ParamEnvAnd<'tcx, GlobalId<'tcx>>) -> String {\n+        format!(\"const-evaluating `{}`\", tcx.item_path_str(key.value.instance.def.def_id()))\n     }\n }\n "}, {"sha": "8fb1ad0da823b48ee694916fc8c4b4cd7da4f6b2", "filename": "src/librustc/ty/maps/keys.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b2b101befcfe1ca4ea57862675df0de5ca7b15bd/src%2Flibrustc%2Fty%2Fmaps%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b101befcfe1ca4ea57862675df0de5ca7b15bd/src%2Flibrustc%2Fty%2Fmaps%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fkeys.rs?ref=b2b101befcfe1ca4ea57862675df0de5ca7b15bd", "patch": "@@ -53,6 +53,16 @@ impl<'tcx> Key for ty::Instance<'tcx> {\n     }\n }\n \n+impl<'tcx> Key for mir::interpret::GlobalId<'tcx> {\n+    fn map_crate(&self) -> CrateNum {\n+        self.instance.map_crate()\n+    }\n+\n+    fn default_span(&self, tcx: TyCtxt) -> Span {\n+        self.instance.default_span(tcx)\n+    }\n+}\n+\n impl Key for CrateNum {\n     fn map_crate(&self) -> CrateNum {\n         *self"}, {"sha": "f41bdf61d9bf1d39e0ca093fc702e604eb1c2798", "filename": "src/librustc/ty/maps/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b2b101befcfe1ca4ea57862675df0de5ca7b15bd/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b101befcfe1ca4ea57862675df0de5ca7b15bd/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs?ref=b2b101befcfe1ca4ea57862675df0de5ca7b15bd", "patch": "@@ -29,6 +29,7 @@ use middle::lang_items::{LanguageItems, LangItem};\n use middle::exported_symbols::{SymbolExportLevel, ExportedSymbol};\n use mir::mono::{CodegenUnit, Stats};\n use mir;\n+use mir::interpret::{GlobalId};\n use session::{CompileResult, CrateDisambiguator};\n use session::config::OutputFilenames;\n use traits::Vtable;\n@@ -210,7 +211,7 @@ define_maps! { <'tcx>\n \n     /// Results of evaluating const items or constants embedded in\n     /// other items (such as enum variant explicit discriminants).\n-    [] fn const_eval: const_eval_dep_node(ty::ParamEnvAnd<'tcx, (DefId, &'tcx Substs<'tcx>)>)\n+    [] fn const_eval: const_eval_dep_node(ty::ParamEnvAnd<'tcx, GlobalId<'tcx>>)\n         -> const_val::EvalResult<'tcx>,\n \n     [] fn check_match: CheckMatch(DefId)\n@@ -450,7 +451,7 @@ fn typeck_item_bodies_dep_node<'tcx>(_: CrateNum) -> DepConstructor<'tcx> {\n     DepConstructor::TypeckBodiesKrate\n }\n \n-fn const_eval_dep_node<'tcx>(param_env: ty::ParamEnvAnd<'tcx, (DefId, &'tcx Substs<'tcx>)>)\n+fn const_eval_dep_node<'tcx>(param_env: ty::ParamEnvAnd<'tcx, GlobalId<'tcx>>)\n                              -> DepConstructor<'tcx> {\n     DepConstructor::ConstEval { param_env }\n }"}, {"sha": "02bf409f33f4ec8d10c1fc938e0e5c741ccb5994", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b2b101befcfe1ca4ea57862675df0de5ca7b15bd/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b101befcfe1ca4ea57862675df0de5ca7b15bd/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=b2b101befcfe1ca4ea57862675df0de5ca7b15bd", "patch": "@@ -26,7 +26,7 @@ use middle::lang_items::{FnTraitLangItem, FnMutTraitLangItem, FnOnceTraitLangIte\n use middle::privacy::AccessLevels;\n use middle::resolve_lifetime::ObjectLifetimeDefault;\n use mir::Mir;\n-use mir::interpret::{Value, PrimVal};\n+use mir::interpret::{GlobalId, Value, PrimVal};\n use mir::GeneratorLayout;\n use session::CrateDisambiguator;\n use traits;\n@@ -1835,7 +1835,12 @@ impl<'a, 'gcx, 'tcx> AdtDef {\n             let mut discr = prev_discr.map_or(initial, |d| d.wrap_incr());\n             if let VariantDiscr::Explicit(expr_did) = v.discr {\n                 let substs = Substs::identity_for_item(tcx.global_tcx(), expr_did);\n-                match tcx.const_eval(param_env.and((expr_did, substs))) {\n+                let instance = ty::Instance::new(expr_did, substs);\n+                let cid = GlobalId {\n+                    instance,\n+                    promoted: None\n+                };\n+                match tcx.const_eval(param_env.and(cid)) {\n                     Ok(&ty::Const {\n                         val: ConstVal::Value(Value::ByVal(PrimVal::Bytes(b))),\n                         ..\n@@ -1885,7 +1890,12 @@ impl<'a, 'gcx, 'tcx> AdtDef {\n                 }\n                 ty::VariantDiscr::Explicit(expr_did) => {\n                     let substs = Substs::identity_for_item(tcx.global_tcx(), expr_did);\n-                    match tcx.const_eval(param_env.and((expr_did, substs))) {\n+                    let instance = ty::Instance::new(expr_did, substs);\n+                    let cid = GlobalId {\n+                        instance,\n+                        promoted: None\n+                    };\n+                    match tcx.const_eval(param_env.and(cid)) {\n                         Ok(&ty::Const {\n                             val: ConstVal::Value(Value::ByVal(PrimVal::Bytes(b))),\n                             .."}, {"sha": "bae1ce31a5e774c3f5ecbd1cdeeb1dd371095250", "filename": "src/librustc/ty/relate.rs", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b2b101befcfe1ca4ea57862675df0de5ca7b15bd/src%2Flibrustc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b101befcfe1ca4ea57862675df0de5ca7b15bd/src%2Flibrustc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Frelate.rs?ref=b2b101befcfe1ca4ea57862675df0de5ca7b15bd", "patch": "@@ -20,7 +20,7 @@ use ty::subst::{UnpackedKind, Substs};\n use ty::{self, Ty, TyCtxt, TypeFoldable};\n use ty::fold::{TypeVisitor, TypeFolder};\n use ty::error::{ExpectedFound, TypeError};\n-use mir::interpret::{Value, PrimVal};\n+use mir::interpret::{GlobalId, Value, PrimVal};\n use util::common::ErrorReported;\n use std::rc::Rc;\n use std::iter;\n@@ -489,17 +489,29 @@ pub fn super_relate_tys<'a, 'gcx, 'tcx, R>(relation: &mut R,\n                         let param_env = ty::ParamEnv::empty(Reveal::UserFacing);\n                         match tcx.lift_to_global(&substs) {\n                             Some(substs) => {\n-                                match tcx.const_eval(param_env.and((def_id, substs))) {\n-                                    Ok(&ty::Const {\n-                                        val: ConstVal::Value(Value::ByVal(PrimVal::Bytes(b))),\n-                                        ..\n-                                    }) => {\n-                                        assert_eq!(b as u64 as u128, b);\n-                                        return Ok(b as u64);\n+                                let instance = ty::Instance::resolve(\n+                                    tcx.global_tcx(),\n+                                    param_env,\n+                                    def_id,\n+                                    substs,\n+                                );\n+                                if let Some(instance) = instance {\n+                                    let cid = GlobalId {\n+                                        instance,\n+                                        promoted: None\n+                                    };\n+                                    match tcx.const_eval(param_env.and(cid)) {\n+                                        Ok(&ty::Const {\n+                                            val: ConstVal::Value(Value::ByVal(PrimVal::Bytes(b))),\n+                                            ..\n+                                        }) => {\n+                                            assert_eq!(b as u64 as u128, b);\n+                                            return Ok(b as u64);\n+                                        }\n+                                        _ => {}\n                                     }\n-                                    _ => {}\n                                 }\n-                            }\n+                            },\n                             None => {}\n                         }\n                         tcx.sess.delay_span_bug(tcx.def_span(def_id),"}, {"sha": "7cc509f691412f930f8df1c2f65c3e4779aafe4c", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 51, "deletions": 1, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/b2b101befcfe1ca4ea57862675df0de5ca7b15bd/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b101befcfe1ca4ea57862675df0de5ca7b15bd/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=b2b101befcfe1ca4ea57862675df0de5ca7b15bd", "patch": "@@ -57,6 +57,7 @@ CopyImpls! {\n     ::syntax::abi::Abi,\n     ::hir::def_id::DefId,\n     ::mir::Local,\n+    ::mir::Promoted,\n     ::traits::Reveal,\n     ::syntax_pos::Span,\n }\n@@ -589,7 +590,7 @@ impl<'a, 'tcx> Lift<'tcx> for ConstEvalErr<'a> {\n impl<'a, 'tcx> Lift<'tcx> for interpret::EvalError<'a> {\n     type Lifted = interpret::EvalError<'tcx>;\n     fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n-        use mir::interpret::EvalErrorKind::*;\n+        use ::mir::interpret::EvalErrorKind::*;\n         let kind = match self.kind {\n             MachineError(ref err) => MachineError(err.clone()),\n             FunctionPointerTyMismatch(a, b) => FunctionPointerTyMismatch(\n@@ -744,6 +745,42 @@ impl<'a, 'tcx> Lift<'tcx> for ty::layout::LayoutError<'a> {\n     }\n }\n \n+impl<'a, 'tcx> Lift<'tcx> for ty::InstanceDef<'a> {\n+    type Lifted = ty::InstanceDef<'tcx>;\n+    fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+        match *self {\n+            ty::InstanceDef::Item(def_id) =>\n+                Some(ty::InstanceDef::Item(def_id)),\n+            ty::InstanceDef::Intrinsic(def_id) =>\n+                Some(ty::InstanceDef::Intrinsic(def_id)),\n+            ty::InstanceDef::FnPtrShim(def_id, ref ty) =>\n+                Some(ty::InstanceDef::FnPtrShim(def_id, tcx.lift(ty)?)),\n+            ty::InstanceDef::Virtual(def_id, n) =>\n+                Some(ty::InstanceDef::Virtual(def_id, n)),\n+            ty::InstanceDef::ClosureOnceShim { call_once } =>\n+                Some(ty::InstanceDef::ClosureOnceShim { call_once }),\n+            ty::InstanceDef::DropGlue(def_id, ref ty) =>\n+                Some(ty::InstanceDef::DropGlue(def_id, tcx.lift(ty)?)),\n+            ty::InstanceDef::CloneShim(def_id, ref ty) =>\n+                Some(ty::InstanceDef::CloneShim(def_id, tcx.lift(ty)?)),\n+        }\n+    }\n+}\n+\n+BraceStructLiftImpl! {\n+    impl<'a, 'tcx> Lift<'tcx> for ty::Instance<'a> {\n+        type Lifted = ty::Instance<'tcx>;\n+        def, substs\n+    }\n+}\n+\n+BraceStructLiftImpl! {\n+    impl<'a, 'tcx> Lift<'tcx> for interpret::GlobalId<'a> {\n+        type Lifted = interpret::GlobalId<'tcx>;\n+        instance, promoted\n+    }\n+}\n+\n ///////////////////////////////////////////////////////////////////////////\n // TypeFoldable implementations.\n //\n@@ -945,6 +982,19 @@ impl<'tcx> TypeFoldable<'tcx> for ty::instance::Instance<'tcx> {\n     }\n }\n \n+impl<'tcx> TypeFoldable<'tcx> for interpret::GlobalId<'tcx> {\n+    fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self {\n+        Self {\n+            instance: self.instance.fold_with(folder),\n+            promoted: self.promoted\n+        }\n+    }\n+\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+        self.instance.visit_with(visitor)\n+    }\n+}\n+\n impl<'tcx> TypeFoldable<'tcx> for Ty<'tcx> {\n     fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self {\n         let sty = match self.sty {"}, {"sha": "a9508defdcd811c15efbd13efa2f17bec76f1187", "filename": "src/librustc_mir/const_eval/check.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b2b101befcfe1ca4ea57862675df0de5ca7b15bd/src%2Flibrustc_mir%2Fconst_eval%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b101befcfe1ca4ea57862675df0de5ca7b15bd/src%2Flibrustc_mir%2Fconst_eval%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Fcheck.rs?ref=b2b101befcfe1ca4ea57862675df0de5ca7b15bd", "patch": "@@ -12,7 +12,7 @@\n \n use rustc::mir::*;\n use rustc::mir::visit::Visitor;\n-use rustc::mir::interpret::{Value, PrimVal};\n+use rustc::mir::interpret::{Value, PrimVal, GlobalId};\n use rustc::middle::const_val::{ConstVal, ConstEvalErr, ErrKind};\n use rustc::traits;\n use interpret::{eval_body_as_integer, check_body};\n@@ -41,7 +41,11 @@ pub fn check<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) {\n     let instance = Instance::mono(tcx, def_id);\n     for i in 0.. mir.promoted.len() {\n         use rustc_data_structures::indexed_vec::Idx;\n-        check_body(tcx, instance, Some(Promoted::new(i)), param_env);\n+        let cid = GlobalId {\n+            instance,\n+            promoted: Some(Promoted::new(i)),\n+        };\n+        check_body(tcx, cid, param_env);\n     }\n }\n \n@@ -65,7 +69,11 @@ impl<'a, 'tcx> ConstErrVisitor<'a, 'tcx> {\n             },\n             Literal::Promoted { index } => {\n                 let instance = Instance::mono(self.tcx, self.def_id);\n-                eval_body_as_integer(self.tcx, param_env, instance, Some(index)).unwrap()\n+                let cid = GlobalId {\n+                    instance,\n+                    promoted: Some(index),\n+                };\n+                eval_body_as_integer(self.tcx, cid, param_env).unwrap()\n             }\n         };\n         Some(val)"}, {"sha": "a70ee2d1d6442981e0bc67bf190a7785e9710be1", "filename": "src/librustc_mir/const_eval/pattern.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b2b101befcfe1ca4ea57862675df0de5ca7b15bd/src%2Flibrustc_mir%2Fconst_eval%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b101befcfe1ca4ea57862675df0de5ca7b15bd/src%2Flibrustc_mir%2Fconst_eval%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Fpattern.rs?ref=b2b101befcfe1ca4ea57862675df0de5ca7b15bd", "patch": "@@ -12,7 +12,7 @@ use interpret::{const_val_field, const_discr};\n \n use rustc::middle::const_val::{ConstEvalErr, ErrKind, ConstVal};\n use rustc::mir::{Field, BorrowKind, Mutability};\n-use rustc::mir::interpret::{Value, PrimVal};\n+use rustc::mir::interpret::{GlobalId, Value, PrimVal};\n use rustc::ty::{self, TyCtxt, AdtDef, Ty, Region};\n use rustc::ty::subst::{Substs, Kind};\n use rustc::hir::{self, PatKind, RangeEnd};\n@@ -673,14 +673,18 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n         let kind = match def {\n             Def::Const(def_id) | Def::AssociatedConst(def_id) => {\n                 let substs = self.tables.node_substs(id);\n-                match self.tcx.at(span).const_eval(self.param_env.and((def_id, substs))) {\n+                let instance = ty::Instance::resolve(\n+                    self.tcx,\n+                    self.param_env,\n+                    def_id,\n+                    substs,\n+                ).unwrap();\n+                let cid = GlobalId {\n+                    instance,\n+                    promoted: None,\n+                };\n+                match self.tcx.at(span).const_eval(self.param_env.and(cid)) {\n                     Ok(value) => {\n-                        let instance = ty::Instance::resolve(\n-                            self.tcx,\n-                            self.param_env,\n-                            def_id,\n-                            substs,\n-                        ).unwrap();\n                         return self.const_to_pat(instance, value, id, span)\n                     },\n                     Err(e) => {"}, {"sha": "dc8bbdc60e0385d255e9c18ee543ea929b8cd998", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b2b101befcfe1ca4ea57862675df0de5ca7b15bd/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b101befcfe1ca4ea57862675df0de5ca7b15bd/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=b2b101befcfe1ca4ea57862675df0de5ca7b15bd", "patch": "@@ -15,6 +15,7 @@ use hair::cx::block;\n use hair::cx::to_ref::ToRef;\n use rustc::hir::def::{Def, CtorKind};\n use rustc::middle::const_val::ConstVal;\n+use rustc::mir::interpret::{GlobalId, Value, PrimVal};\n use rustc::ty::{self, AdtKind, VariantDef, Ty};\n use rustc::ty::adjustment::{Adjustment, Adjust, AutoBorrow, AutoBorrowMutability};\n use rustc::mir::interpret::{Value, PrimVal};\n@@ -511,7 +512,17 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n             let c = &cx.tcx.hir.body(count).value;\n             let def_id = cx.tcx.hir.body_owner_def_id(count);\n             let substs = Substs::identity_for_item(cx.tcx.global_tcx(), def_id);\n-            let count = match cx.tcx.at(c.span).const_eval(cx.param_env.and((def_id, substs))) {\n+            let instance = ty::Instance::resolve(\n+                cx.tcx.global_tcx(),\n+                cx.param_env,\n+                def_id,\n+                substs,\n+            ).unwrap();\n+            let global_id = GlobalId {\n+                instance,\n+                promoted: None\n+            };\n+            let count = match cx.tcx.at(c.span).const_eval(cx.param_env.and(global_id)) {\n                 Ok(cv) => cv.val.unwrap_usize(cx.tcx),\n                 Err(s) => cx.fatal_const_eval_err(&s, c.span, \"expression\")\n             };"}, {"sha": "48f123b1f57a75bc21f7cc21e0b4da000cc53941", "filename": "src/librustc_mir/interpret/const_eval.rs", "status": "modified", "additions": 48, "deletions": 61, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/b2b101befcfe1ca4ea57862675df0de5ca7b15bd/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b101befcfe1ca4ea57862675df0de5ca7b15bd/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs?ref=b2b101befcfe1ca4ea57862675df0de5ca7b15bd", "patch": "@@ -1,11 +1,10 @@\n-use rustc::ty::{self, TyCtxt, Ty, Instance};\n-use rustc::ty::layout::{self, LayoutOf};\n-use rustc::ty::subst::Substs;\n-use rustc::hir::def_id::DefId;\n-use rustc::mir;\n+use rustc::hir;\n use rustc::middle::const_val::ErrKind::{CheckMatchError, TypeckError};\n use rustc::middle::const_val::{ConstEvalErr, ConstVal};\n-use const_eval::lookup_const_by_id;\n+use rustc::mir;\n+use rustc::ty::{self, TyCtxt, Ty, Instance};\n+use rustc::ty::layout::{self, LayoutOf};\n+use rustc::ty::subst::Subst;\n \n use syntax::ast::Mutability;\n use syntax::codemap::Span;\n@@ -38,47 +37,41 @@ pub fn mk_eval_cx<'a, 'tcx>(\n \n pub fn eval_body<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    instance: Instance<'tcx>,\n-    promoted: Option<mir::Promoted>,\n+    cid: GlobalId<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n ) -> EvalResult<'tcx, (Value, Pointer, Ty<'tcx>)> {\n-    eval_body_and_ecx(tcx, instance, promoted, param_env).0\n+    eval_body_and_ecx(tcx, cid, param_env).0\n }\n \n pub fn check_body<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    instance: Instance<'tcx>,\n-    promoted: Option<mir::Promoted>,\n+    cid: GlobalId<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n ) {\n-    let (res, ecx) = eval_body_and_ecx(tcx, instance, promoted, param_env);\n+    let (res, ecx) = eval_body_and_ecx(tcx, cid, param_env);\n     if let Err(mut err) = res {\n         ecx.report(&mut err);\n     }\n }\n \n fn eval_body_and_ecx<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    instance: Instance<'tcx>,\n-    promoted: Option<mir::Promoted>,\n+    cid: GlobalId<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n ) -> (EvalResult<'tcx, (Value, Pointer, Ty<'tcx>)>, EvalContext<'a, 'tcx, CompileTimeEvaluator>) {\n-    debug!(\"eval_body: {:?}, {:?}\", instance, param_env);\n+    debug!(\"eval_body: {:?}, {:?}\", cid, param_env);\n     let limits = super::ResourceLimits::default();\n     let mut ecx = EvalContext::new(tcx, param_env, limits, CompileTimeEvaluator, ());\n-    let cid = GlobalId {\n-        instance,\n-        promoted,\n-    };\n-\n     let res = (|| {\n-        if ecx.tcx.has_attr(instance.def_id(), \"linkage\") {\n+        let mut mir = ecx.load_mir(cid.instance.def)?;\n+        if let Some(index) = cid.promoted {\n+            mir = &mir.promoted[index];\n+        }\n+        let layout = ecx.layout_of(mir.return_ty().subst(tcx, cid.instance.substs))?;\n+        if ecx.tcx.has_attr(cid.instance.def_id(), \"linkage\") {\n             return Err(ConstEvalError::NotConst(\"extern global\".to_string()).into());\n         }\n-        let instance_ty = instance.ty(tcx);\n         if tcx.interpret_interner.borrow().get_cached(cid).is_none() {\n-            let mir = ecx.load_mir(instance.def)?;\n-            let layout = ecx.layout_of(instance_ty)?;\n             assert!(!layout.is_unsized());\n             let ptr = ecx.memory.allocate(\n                 layout.size.bytes(),\n@@ -87,10 +80,10 @@ fn eval_body_and_ecx<'a, 'tcx>(\n             )?;\n             tcx.interpret_interner.borrow_mut().cache(cid, ptr.alloc_id);\n             let cleanup = StackPopCleanup::MarkStatic(Mutability::Immutable);\n-            let name = ty::tls::with(|tcx| tcx.item_path_str(instance.def_id()));\n+            let name = ty::tls::with(|tcx| tcx.item_path_str(cid.instance.def_id()));\n             trace!(\"const_eval: pushing stack frame for global: {}\", name);\n             ecx.push_stack_frame(\n-                instance,\n+                cid.instance,\n                 mir.span,\n                 mir,\n                 Place::from_ptr(ptr, layout.align),\n@@ -100,24 +93,22 @@ fn eval_body_and_ecx<'a, 'tcx>(\n             while ecx.step()? {}\n         }\n         let alloc = tcx.interpret_interner.borrow().get_cached(cid).expect(\"global not cached\");\n-        let align = ecx.layout_of(instance_ty)?.align;\n         let ptr = MemoryPointer::new(alloc, 0).into();\n-        let value = match ecx.try_read_value(ptr, align, instance_ty)? {\n+        let value = match ecx.try_read_value(ptr, layout.align, layout.ty)? {\n             Some(val) => val,\n-            _ => Value::ByRef(ptr, align),\n+            _ => Value::ByRef(ptr, layout.align),\n         };\n-        Ok((value, ptr, instance_ty))\n+        Ok((value, ptr, layout.ty))\n     })();\n     (res, ecx)\n }\n \n pub fn eval_body_as_integer<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    cid: GlobalId<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n-    instance: Instance<'tcx>,\n-    promoted: Option<mir::Promoted>,\n ) -> EvalResult<'tcx, u128> {\n-    let (value, _, ty) = eval_body(tcx, instance, promoted, param_env)?;\n+    let (value, _, ty) = eval_body(tcx, cid, param_env)?;\n     match value {\n         Value::ByVal(prim) => prim.to_bytes(),\n         _ => err!(TypeNotPrimitive(ty)),\n@@ -325,7 +316,7 @@ fn const_val_field_inner<'a, 'tcx>(\n     field: mir::Field,\n     value: Value,\n     ty: Ty<'tcx>,\n-) -> ::rustc::mir::interpret::EvalResult<'tcx, (Value, Ty<'tcx>)> {\n+) -> EvalResult<'tcx, (Value, Ty<'tcx>)> {\n     trace!(\"const_val_field: {:?}, {:?}, {:?}, {:?}\", instance, field, value, ty);\n     let mut ecx = mk_eval_cx(tcx, instance, param_env).unwrap();\n     let (mut field, ty) = match value {\n@@ -376,51 +367,47 @@ pub fn const_discr<'a, 'tcx>(\n \n pub fn const_eval_provider<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    key: ty::ParamEnvAnd<'tcx, (DefId, &'tcx Substs<'tcx>)>,\n+    key: ty::ParamEnvAnd<'tcx, GlobalId<'tcx>>,\n ) -> ::rustc::middle::const_val::EvalResult<'tcx> {\n     trace!(\"const eval: {:?}\", key);\n-    let (def_id, substs) = if let Some(resolved) = lookup_const_by_id(tcx, key) {\n-        resolved\n-    } else {\n-        return Err(ConstEvalErr {\n-            span: tcx.def_span(key.value.0),\n-            kind: TypeckError\n-        });\n-    };\n+    let cid = key.value;\n+    let def_id = cid.instance.def.def_id();\n+    let span = tcx.def_span(def_id);\n \n-    let tables = tcx.typeck_tables_of(def_id);\n-    let body = if let Some(id) = tcx.hir.as_local_node_id(def_id) {\n-        let body_id = tcx.hir.body_owned_by(id);\n+    if let Some(id) = tcx.hir.as_local_node_id(def_id) {\n+        let tables = tcx.typeck_tables_of(def_id);\n \n         // Do match-check before building MIR\n         if tcx.check_match(def_id).is_err() {\n             return Err(ConstEvalErr {\n-                span: tcx.def_span(key.value.0),\n+                span,\n                 kind: CheckMatchError,\n             });\n         }\n \n-        tcx.mir_const_qualif(def_id);\n-        tcx.hir.body(body_id)\n-    } else {\n-        tcx.extern_const_body(def_id).body\n-    };\n-\n-    // do not continue into miri if typeck errors occurred\n-    // it will fail horribly\n-    if tables.tainted_by_errors {\n-        return Err(ConstEvalErr { span: body.value.span, kind: TypeckError })\n-    }\n+        if let hir::BodyOwnerKind::Const = tcx.hir.body_owner_kind(id) {\n+            tcx.mir_const_qualif(def_id);\n+        }\n \n+        // Do not continue into miri if typeck errors occurred; it will fail horribly\n+        if tables.tainted_by_errors {\n+            return Err(ConstEvalErr {\n+                span,\n+                kind: TypeckError\n+            });\n+        }\n+    };\n \n-    let instance = ty::Instance::new(def_id, substs);\n-    match ::interpret::eval_body(tcx, instance, None, key.param_env) {\n+    match ::interpret::eval_body(tcx, cid, key.param_env) {\n         Ok((miri_value, _, miri_ty)) => Ok(tcx.mk_const(ty::Const {\n             val: ConstVal::Value(miri_value),\n             ty: miri_ty,\n         })),\n         Err(err) => {\n-            Err(ConstEvalErr { span: body.value.span, kind: err.into() })\n+            Err(ConstEvalErr {\n+                span,\n+                kind: err.into()\n+            })\n         }\n     }\n }"}, {"sha": "1ad26b4cda59d5d0eca433200970a5dc3d3b2b9d", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b2b101befcfe1ca4ea57862675df0de5ca7b15bd/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b101befcfe1ca4ea57862675df0de5ca7b15bd/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=b2b101befcfe1ca4ea57862675df0de5ca7b15bd", "patch": "@@ -93,6 +93,7 @@ use rustc::infer::{self, InferCtxt, InferOk, RegionVariableOrigin};\n use rustc::infer::anon_types::AnonTypeDecl;\n use rustc::infer::type_variable::{TypeVariableOrigin};\n use rustc::middle::region;\n+use rustc::mir::interpret::{GlobalId};\n use rustc::ty::subst::{Kind, Subst, Substs};\n use rustc::traits::{self, FulfillmentContext, ObligationCause, ObligationCauseCode};\n use rustc::ty::{self, Ty, TyCtxt, Visibility, ToPredicate};\n@@ -3999,7 +4000,17 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             let count_def_id = tcx.hir.body_owner_def_id(count);\n             let param_env = ty::ParamEnv::empty(traits::Reveal::UserFacing);\n             let substs = Substs::identity_for_item(tcx.global_tcx(), count_def_id);\n-            let count = tcx.const_eval(param_env.and((count_def_id, substs)));\n+            let instance = ty::Instance::resolve(\n+                tcx.global_tcx(),\n+                param_env,\n+                count_def_id,\n+                substs,\n+            ).unwrap();\n+            let global_id = GlobalId {\n+                instance,\n+                promoted: None\n+            };\n+            let count = tcx.const_eval(param_env.and(global_id));\n \n             if let Err(ref err) = count {\n                err.report(tcx, tcx.def_span(count_def_id), \"constant expression\");"}, {"sha": "0271ad269e12f285376e439aebe8ed2c8195e71c", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b2b101befcfe1ca4ea57862675df0de5ca7b15bd/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b101befcfe1ca4ea57862675df0de5ca7b15bd/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=b2b101befcfe1ca4ea57862675df0de5ca7b15bd", "patch": "@@ -38,7 +38,7 @@ use rustc::ty::{self, AdtKind, ToPolyTraitRef, Ty, TyCtxt};\n use rustc::ty::maps::Providers;\n use rustc::ty::util::IntTypeExt;\n use rustc::util::nodemap::{FxHashSet, FxHashMap};\n-use rustc::mir::interpret::{Value, PrimVal};\n+use rustc::mir::interpret::{GlobalId, Value, PrimVal};\n \n use rustc_const_math::ConstInt;\n \n@@ -524,7 +524,12 @@ fn convert_enum_variant_types<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         prev_discr = Some(if let Some(e) = variant.node.disr_expr {\n             let expr_did = tcx.hir.local_def_id(e.node_id);\n             let substs = Substs::identity_for_item(tcx, expr_did);\n-            let result = tcx.at(variant.span).const_eval(param_env.and((expr_did, substs)));\n+            let instance = ty::Instance::new(expr_did, substs);\n+            let global_id = GlobalId {\n+                instance,\n+                promoted: None\n+            };\n+            let result = tcx.at(variant.span).const_eval(param_env.and(global_id));\n \n             // enum variant evaluation happens before the global constant check\n             // so we need to report the real error"}]}