{"sha": "c4cd04480bdfca84274dcbe80dae710bdbe0bd59", "node_id": "C_kwDOAAsO6NoAKGM0Y2QwNDQ4MGJkZmNhODQyNzRkY2JlODBkYWU3MTBiZGJlMGJkNTk", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-06-08T07:02:06Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-06-16T00:52:19Z"}, "message": "sort_candidates: avoid the second comparison if possible.\n\nThis is a performance win for `unicode-normalization`.\n\nThe commit also removes the closure, which isn't necessary. And\nreformulates the comparison into a form I find easier to read.", "tree": {"sha": "cca237f77482894f9e28de254b9b3dc596fbf4ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cca237f77482894f9e28de254b9b3dc596fbf4ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4cd04480bdfca84274dcbe80dae710bdbe0bd59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4cd04480bdfca84274dcbe80dae710bdbe0bd59", "html_url": "https://github.com/rust-lang/rust/commit/c4cd04480bdfca84274dcbe80dae710bdbe0bd59", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4cd04480bdfca84274dcbe80dae710bdbe0bd59/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e4ec35d0cc56ac3016e98909aad8688516a43f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e4ec35d0cc56ac3016e98909aad8688516a43f8", "html_url": "https://github.com/rust-lang/rust/commit/7e4ec35d0cc56ac3016e98909aad8688516a43f8"}], "stats": {"total": 44, "additions": 19, "deletions": 25}, "files": [{"sha": "d98837ad7dffce290af99844a05c2babc89e972b", "filename": "compiler/rustc_mir_build/src/build/matches/test.rs", "status": "modified", "additions": 19, "deletions": 25, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/c4cd04480bdfca84274dcbe80dae710bdbe0bd59/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4cd04480bdfca84274dcbe80dae710bdbe0bd59/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs?ref=c4cd04480bdfca84274dcbe80dae710bdbe0bd59", "patch": "@@ -632,39 +632,33 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             }\n \n             (&TestKind::Range(test), &PatKind::Range(pat)) => {\n+                use std::cmp::Ordering::*;\n+\n                 if test == pat {\n                     self.candidate_without_match_pair(match_pair_index, candidate);\n                     return Some(0);\n                 }\n \n-                let no_overlap = (|| {\n-                    use rustc_hir::RangeEnd::*;\n-                    use std::cmp::Ordering::*;\n-\n-                    let tcx = self.tcx;\n-\n-                    let test_ty = test.lo.ty();\n-                    let lo = compare_const_vals(tcx, test.lo, pat.hi, self.param_env, test_ty)?;\n-                    let hi = compare_const_vals(tcx, test.hi, pat.lo, self.param_env, test_ty)?;\n-\n-                    match (test.end, pat.end, lo, hi) {\n-                        // pat < test\n-                        (_, _, Greater, _) |\n-                        (_, Excluded, Equal, _) |\n-                        // pat > test\n-                        (_, _, _, Less) |\n-                        (Excluded, _, _, Equal) => Some(true),\n-                        _ => Some(false),\n-                    }\n-                })();\n-\n-                if let Some(true) = no_overlap {\n-                    // Testing range does not overlap with pattern range,\n-                    // so the pattern can be matched only if this test fails.\n+                let tcx = self.tcx;\n+                let test_ty = test.lo.ty();\n+\n+                // For performance, it's important to only do the second\n+                // `compare_const_vals` if necessary.\n+                let no_overlap = if matches!(\n+                    (compare_const_vals(tcx, test.hi, pat.lo, self.param_env, test_ty)?, test.end),\n+                    (Less, _) | (Equal, RangeEnd::Excluded) // test < pat\n+                ) || matches!(\n+                    (compare_const_vals(tcx, test.lo, pat.hi, self.param_env, test_ty)?, pat.end),\n+                    (Greater, _) | (Equal, RangeEnd::Excluded) // test > pat\n+                ) {\n                     Some(1)\n                 } else {\n                     None\n-                }\n+                };\n+\n+                // If the testing range does not overlap with pattern range,\n+                // the pattern can be matched only if this test fails.\n+                no_overlap\n             }\n \n             (&TestKind::Range(range), &PatKind::Constant { value }) => {"}]}