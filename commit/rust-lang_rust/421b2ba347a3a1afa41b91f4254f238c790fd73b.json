{"sha": "421b2ba347a3a1afa41b91f4254f238c790fd73b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyMWIyYmEzNDdhM2ExYWZhNDFiOTFmNDI1NGYyMzhjNzkwZmQ3M2I=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-07-28T12:40:32Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-07-28T15:58:52Z"}, "message": "Don't format!() string literals", "tree": {"sha": "15947cbc18c8e87b2dd46204e387b629b553845b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/15947cbc18c8e87b2dd46204e387b629b553845b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/421b2ba347a3a1afa41b91f4254f238c790fd73b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/421b2ba347a3a1afa41b91f4254f238c790fd73b", "html_url": "https://github.com/rust-lang/rust/commit/421b2ba347a3a1afa41b91f4254f238c790fd73b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/421b2ba347a3a1afa41b91f4254f238c790fd73b/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f1e2357447ef7e8066c49560d66c3e18f25d982", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f1e2357447ef7e8066c49560d66c3e18f25d982", "html_url": "https://github.com/rust-lang/rust/commit/4f1e2357447ef7e8066c49560d66c3e18f25d982"}], "stats": {"total": 340, "additions": 168, "deletions": 172}, "files": [{"sha": "c6b39a52ae135ee311fb19eb720d2acd1f54dd1d", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/421b2ba347a3a1afa41b91f4254f238c790fd73b/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/421b2ba347a3a1afa41b91f4254f238c790fd73b/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=421b2ba347a3a1afa41b91f4254f238c790fd73b", "patch": "@@ -94,7 +94,7 @@ impl Step for Docs {\n \n         builder.info(&format!(\"Dist docs ({})\", host));\n         if !builder.config.docs {\n-            builder.info(&format!(\"\\tskipping - docs disabled\"));\n+            builder.info(\"\\tskipping - docs disabled\");\n             return distdir(builder).join(format!(\"{}-{}.tar.gz\", name, host));\n         }\n \n@@ -156,7 +156,7 @@ impl Step for RustcDocs {\n \n         builder.info(&format!(\"Dist compiler docs ({})\", host));\n         if !builder.config.compiler_docs {\n-            builder.info(&format!(\"\\tskipping - compiler docs disabled\"));\n+            builder.info(\"\\tskipping - compiler docs disabled\");\n             return distdir(builder).join(format!(\"{}-{}.tar.gz\", name, host));\n         }\n \n@@ -639,7 +639,7 @@ impl Step for Std {\n         // The only true set of target libraries came from the build triple, so\n         // let's reduce redundant work by only producing archives from that host.\n         if compiler.host != builder.config.build {\n-            builder.info(&format!(\"\\tskipping, not a build host\"));\n+            builder.info(\"\\tskipping, not a build host\");\n             return distdir(builder).join(format!(\"{}-{}.tar.gz\", name, target));\n         }\n \n@@ -715,11 +715,11 @@ impl Step for Analysis {\n         let compiler = self.compiler;\n         let target = self.target;\n         assert!(builder.config.extended);\n-        builder.info(&format!(\"Dist analysis\"));\n+        builder.info(\"Dist analysis\");\n         let name = pkgname(builder, \"rust-analysis\");\n \n         if &compiler.host != builder.config.build {\n-            builder.info(&format!(\"\\tskipping, not a build host\"));\n+            builder.info(\"\\tskipping, not a build host\");\n             return distdir(builder).join(format!(\"{}-{}.tar.gz\", name, target));\n         }\n \n@@ -824,7 +824,7 @@ impl Step for Src {\n \n     /// Creates the `rust-src` installer component\n     fn run(self, builder: &Builder) -> PathBuf {\n-        builder.info(&format!(\"Dist src\"));\n+        builder.info(\"Dist src\");\n \n         let name = pkgname(builder, \"rust-src\");\n         let image = tmpdir(builder).join(format!(\"{}-image\", name));\n@@ -918,7 +918,7 @@ impl Step for PlainSourceTarball {\n \n     /// Creates the plain source tarball\n     fn run(self, builder: &Builder) -> PathBuf {\n-        builder.info(&format!(\"Create plain source tarball\"));\n+        builder.info(\"Create plain source tarball\");\n \n         // Make sure that the root folder of tarball has the correct name\n         let plain_name = format!(\"{}-src\", pkgname(builder, \"rustc\"));\n@@ -998,7 +998,7 @@ impl Step for PlainSourceTarball {\n         if let Some(dir) = tarball.parent() {\n             builder.create_dir(&dir);\n         }\n-        builder.info(&format!(\"running installer\"));\n+        builder.info(\"running installer\");\n         let mut cmd = rust_installer(builder);\n         cmd.arg(\"tarball\")\n            .arg(\"--input\").arg(&plain_name)"}, {"sha": "9dbbe6bcfe490eaf0a8408574dfb32b3782a1585", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/421b2ba347a3a1afa41b91f4254f238c790fd73b/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/421b2ba347a3a1afa41b91f4254f238c790fd73b/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=421b2ba347a3a1afa41b91f4254f238c790fd73b", "patch": "@@ -686,7 +686,7 @@ impl Step for Rustc {\n         };\n \n         if !builder.config.compiler_docs {\n-            builder.info(&format!(\"\\tskipping - compiler/librustdoc docs disabled\"));\n+            builder.info(\"\\tskipping - compiler/librustdoc docs disabled\");\n             return;\n         }\n \n@@ -788,7 +788,7 @@ impl Step for Rustdoc {\n         };\n \n         if !builder.config.compiler_docs {\n-            builder.info(&format!(\"\\tskipping - compiler/librustdoc docs disabled\"));\n+            builder.info(\"\\tskipping - compiler/librustdoc docs disabled\");\n             return;\n         }\n "}, {"sha": "9aeb4e0edaed5d6db137cb3cfeaf857e04305f5b", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/421b2ba347a3a1afa41b91f4254f238c790fd73b/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/421b2ba347a3a1afa41b91f4254f238c790fd73b/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=421b2ba347a3a1afa41b91f4254f238c790fd73b", "patch": "@@ -474,7 +474,7 @@ impl Step for TestHelpers {\n         }\n \n         let _folder = builder.fold_output(|| \"build_test_helpers\");\n-        builder.info(&format!(\"Building test helpers\"));\n+        builder.info(\"Building test helpers\");\n         t!(fs::create_dir_all(&dst));\n         let mut cfg = cc::Build::new();\n "}, {"sha": "9ded7bc28b30f83e43258e0fe4568dd73580e4ae", "filename": "src/librustc/hir/check_attr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/421b2ba347a3a1afa41b91f4254f238c790fd73b/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/421b2ba347a3a1afa41b91f4254f238c790fd73b/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fcheck_attr.rs?ref=421b2ba347a3a1afa41b91f4254f238c790fd73b", "patch": "@@ -248,8 +248,8 @@ impl<'a, 'tcx> CheckAttrVisitor<'a, 'tcx> {\n                     self.emit_repr_error(\n                         attr.span,\n                         stmt.span,\n-                        &format!(\"attribute should not be applied to a statement\"),\n-                        &format!(\"not a struct, enum or union\"),\n+                        \"attribute should not be applied to a statement\",\n+                        \"not a struct, enum or union\",\n                     );\n                 }\n             }\n@@ -269,8 +269,8 @@ impl<'a, 'tcx> CheckAttrVisitor<'a, 'tcx> {\n                 self.emit_repr_error(\n                     attr.span,\n                     expr.span,\n-                    &format!(\"attribute should not be applied to an expression\"),\n-                    &format!(\"not defining a struct, enum or union\"),\n+                    \"attribute should not be applied to an expression\",\n+                    \"not defining a struct, enum or union\",\n                 );\n             }\n         }"}, {"sha": "b71c886a89605358a630e218426c1ba7ae7a3d1d", "filename": "src/librustc/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/421b2ba347a3a1afa41b91f4254f238c790fd73b/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/421b2ba347a3a1afa41b91f4254f238c790fd73b/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=421b2ba347a3a1afa41b91f4254f238c790fd73b", "patch": "@@ -137,7 +137,8 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             //          ^ consider giving this closure parameter a type\n             // ```\n             labels.clear();\n-            labels.push((pattern.span, format!(\"consider giving this closure parameter a type\")));\n+            labels.push(\n+                (pattern.span, \"consider giving this closure parameter a type\".to_string()));\n         } else if let Some(pattern) = local_visitor.found_local_pattern {\n             if let Some(simple_ident) = pattern.simple_ident() {\n                 match pattern.span.compiler_desugaring_kind() {\n@@ -150,7 +151,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                     _ => {}\n                 }\n             } else {\n-                labels.push((pattern.span, format!(\"consider giving the pattern a type\")));\n+                labels.push((pattern.span, \"consider giving the pattern a type\".to_string()));\n             }\n         }\n "}, {"sha": "168285b455f0a3c8c2ad4e846b8d156c6f52ce58", "filename": "src/librustc/infer/error_reporting/nice_region_error/different_lifetimes.rs", "status": "modified", "additions": 12, "deletions": 18, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/421b2ba347a3a1afa41b91f4254f238c790fd73b/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/421b2ba347a3a1afa41b91f4254f238c790fd73b/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs?ref=421b2ba347a3a1afa41b91f4254f238c790fd73b", "patch": "@@ -99,30 +99,26 @@ impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n         let span_label_var1 = if let Some(simple_ident) = anon_arg_sup.pat.simple_ident() {\n             format!(\" from `{}`\", simple_ident)\n         } else {\n-            format!(\"\")\n+            String::new()\n         };\n \n         let span_label_var2 = if let Some(simple_ident) = anon_arg_sub.pat.simple_ident() {\n             format!(\" into `{}`\", simple_ident)\n         } else {\n-            format!(\"\")\n+            String::new()\n         };\n \n \n         let (span_1, span_2, main_label, span_label) = match (sup_is_ret_type, sub_is_ret_type) {\n             (None, None) => {\n                 let (main_label_1, span_label_1) = if ty_sup.id == ty_sub.id {\n                     (\n-                        format!(\"this type is declared with multiple lifetimes...\"),\n-                        format!(\n-                            \"...but data{} flows{} here\",\n-                            format!(\" with one lifetime\"),\n-                            format!(\" into the other\")\n-                        ),\n+                        \"this type is declared with multiple lifetimes...\".to_string(),\n+                        \"...but data with one lifetime flows into the other here\".to_string()\n                     )\n                 } else {\n                     (\n-                        format!(\"these two types are declared with different lifetimes...\"),\n+                        \"these two types are declared with different lifetimes...\".to_string(),\n                         format!(\n                             \"...but data{} flows{} here\",\n                             span_label_var1,\n@@ -136,27 +132,25 @@ impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n             (Some(ret_span), _) => (\n                 ty_sub.span,\n                 ret_span,\n-                format!(\n-                    \"this parameter and the return type are declared \\\n-                     with different lifetimes...\",\n-                ),\n+                \"this parameter and the return type are declared \\\n+                 with different lifetimes...\".to_string()\n+                ,\n                 format!(\"...but data{} is returned here\", span_label_var1),\n             ),\n             (_, Some(ret_span)) => (\n                 ty_sup.span,\n                 ret_span,\n-                format!(\n-                    \"this parameter and the return type are declared \\\n-                     with different lifetimes...\",\n-                ),\n+                \"this parameter and the return type are declared \\\n+                 with different lifetimes...\".to_string()\n+                ,\n                 format!(\"...but data{} is returned here\", span_label_var1),\n             ),\n         };\n \n \n         struct_span_err!(self.tcx.sess, span, E0623, \"lifetime mismatch\")\n             .span_label(span_1, main_label)\n-            .span_label(span_2, format!(\"\"))\n+            .span_label(span_2, String::new())\n             .span_label(span, span_label)\n             .emit();\n         return Some(ErrorReported);"}, {"sha": "bdd3f78aff3ebf37698c4ad6df90324a410d8d65", "filename": "src/librustc/infer/lexical_region_resolve/graphviz.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/421b2ba347a3a1afa41b91f4254f238c790fd73b/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/421b2ba347a3a1afa41b91f4254f238c790fd73b/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fgraphviz.rs?ref=421b2ba347a3a1afa41b91f4254f238c790fd73b", "patch": "@@ -204,7 +204,7 @@ impl<'a, 'gcx, 'tcx> dot::Labeller<'a> for ConstraintGraph<'a, 'gcx, 'tcx> {\n         match *e {\n             Edge::Constraint(ref c) =>\n                 dot::LabelText::label(format!(\"{:?}\", self.map.get(c).unwrap())),\n-            Edge::EnclScope(..) => dot::LabelText::label(format!(\"(enclosed)\")),\n+            Edge::EnclScope(..) => dot::LabelText::label(\"(enclosed)\".to_string()),\n         }\n     }\n }\n@@ -273,7 +273,7 @@ fn dump_region_data_to<'a, 'gcx, 'tcx>(region_rels: &RegionRelations<'a, 'gcx, '\n     debug!(\"dump_region_data map (len: {}) path: {}\",\n            map.len(),\n            path);\n-    let g = ConstraintGraph::new(format!(\"region_data\"), region_rels, map);\n+    let g = ConstraintGraph::new(\"region_data\".to_string(), region_rels, map);\n     debug!(\"dump_region_data calling render\");\n     let mut v = Vec::new();\n     dot::render(&g, &mut v).unwrap();"}, {"sha": "47f7c759d94ec12607193754ab1b204f2340ff3c", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/421b2ba347a3a1afa41b91f4254f238c790fd73b/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/421b2ba347a3a1afa41b91f4254f238c790fd73b/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=421b2ba347a3a1afa41b91f4254f238c790fd73b", "patch": "@@ -424,7 +424,7 @@ impl BuiltinLintDiagnostics {\n                     Ok(ref s) if is_global => (format!(\"dyn ({})\", s),\n                                                Applicability::MachineApplicable),\n                     Ok(s) => (format!(\"dyn {}\", s), Applicability::MachineApplicable),\n-                    Err(_) => (format!(\"dyn <type>\"), Applicability::HasPlaceholders)\n+                    Err(_) => (\"dyn <type>\".to_string(), Applicability::HasPlaceholders)\n                 };\n                 db.span_suggestion_with_applicability(span, \"use `dyn`\", sugg, app);\n             }\n@@ -441,7 +441,7 @@ impl BuiltinLintDiagnostics {\n \n                         (format!(\"crate{}{}\", opt_colon, s), Applicability::MachineApplicable)\n                     }\n-                    Err(_) => (format!(\"crate::<path>\"), Applicability::HasPlaceholders)\n+                    Err(_) => (\"crate::<path>\".to_string(), Applicability::HasPlaceholders)\n                 };\n                 db.span_suggestion_with_applicability(span, \"use `crate`\", sugg, app);\n             }"}, {"sha": "8e4fb547d41642e2e9155aeecb057770912966d9", "filename": "src/librustc/middle/intrinsicck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/421b2ba347a3a1afa41b91f4254f238c790fd73b/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/421b2ba347a3a1afa41b91f4254f238c790fd73b/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs?ref=421b2ba347a3a1afa41b91f4254f238c790fd73b", "patch": "@@ -107,7 +107,7 @@ impl<'a, 'tcx> ExprVisitor<'a, 'tcx> {\n                 }\n                 Err(LayoutError::Unknown(bad)) => {\n                     if bad == ty {\n-                        format!(\"this type's size can vary\")\n+                        \"this type's size can vary\".to_string()\n                     } else {\n                         format!(\"size can vary because of {}\", bad)\n                     }"}, {"sha": "8feefdf5a1ddb3b1c11f974191c2faedf3f16958", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/421b2ba347a3a1afa41b91f4254f238c790fd73b/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/421b2ba347a3a1afa41b91f4254f238c790fd73b/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=421b2ba347a3a1afa41b91f4254f238c790fd73b", "patch": "@@ -1512,15 +1512,15 @@ impl<'tcx> cmt_<'tcx> {\n                     None => {\n                         match pk {\n                             Unique => {\n-                                format!(\"`Box` content\")\n+                                \"`Box` content\".to_string()\n                             }\n                             UnsafePtr(..) => {\n-                                format!(\"dereference of raw pointer\")\n+                                \"dereference of raw pointer\".to_string()\n                             }\n                             BorrowedPtr(..) => {\n                                 match self.note {\n-                                    NoteIndex => format!(\"indexed content\"),\n-                                    _ => format!(\"borrowed content\"),\n+                                    NoteIndex => \"indexed content\".to_string(),\n+                                    _ => \"borrowed content\".to_string(),\n                                 }\n                             }\n                         }"}, {"sha": "ca8fe463119c1b9c60ea651acc8a762cb025c6e4", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/421b2ba347a3a1afa41b91f4254f238c790fd73b/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/421b2ba347a3a1afa41b91f4254f238c790fd73b/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=421b2ba347a3a1afa41b91f4254f238c790fd73b", "patch": "@@ -2665,7 +2665,7 @@ pub fn report_missing_lifetime_specifiers(\n     let msg = if count > 1 {\n         format!(\"expected {} lifetime parameters\", count)\n     } else {\n-        format!(\"expected lifetime parameter\")\n+        \"expected lifetime parameter\".to_string()\n     };\n \n     err.span_label(span, msg);"}, {"sha": "378b3e3c10318e8cf25e050d7a42b651a979d43d", "filename": "src/librustc/traits/specialize/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/421b2ba347a3a1afa41b91f4254f238c790fd73b/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/421b2ba347a3a1afa41b91f4254f238c790fd73b/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs?ref=421b2ba347a3a1afa41b91f4254f238c790fd73b", "patch": "@@ -364,7 +364,7 @@ pub(super) fn specialization_graph_provider<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx\n                 match tcx.span_of_impl(overlap.with_impl) {\n                     Ok(span) => {\n                         err.span_label(tcx.sess.codemap().def_span(span),\n-                                       format!(\"first implementation here\"));\n+                                       \"first implementation here\".to_string());\n                         err.span_label(impl_span,\n                                        format!(\"conflicting implementation{}\",\n                                                 overlap.self_desc"}, {"sha": "bcbd8a529f6a7e9f87e6586e459c9ed1f92267a5", "filename": "src/librustc/ty/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/421b2ba347a3a1afa41b91f4254f238c790fd73b/src%2Flibrustc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/421b2ba347a3a1afa41b91f4254f238c790fd73b/src%2Flibrustc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ferror.rs?ref=421b2ba347a3a1afa41b91f4254f238c790fd73b", "patch": "@@ -204,7 +204,7 @@ impl<'a, 'gcx, 'lcx, 'tcx> ty::TyS<'tcx> {\n                     format!(\"&{}\", tymut_string)\n                 }\n             }\n-            ty::TyFnDef(..) => format!(\"fn item\"),\n+            ty::TyFnDef(..) => \"fn item\".to_string(),\n             ty::TyFnPtr(_) => \"fn pointer\".to_string(),\n             ty::TyDynamic(ref inner, ..) => {\n                 inner.principal().map_or_else(|| \"trait\".to_string(),"}, {"sha": "fedf090b9e915a5f91779fff0dc9f560d8fc347b", "filename": "src/librustc/ty/query/config.rs", "status": "modified", "additions": 54, "deletions": 54, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/421b2ba347a3a1afa41b91f4254f238c790fd73b/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/421b2ba347a3a1afa41b91f4254f238c790fd73b/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs?ref=421b2ba347a3a1afa41b91f4254f238c790fd73b", "patch": "@@ -237,19 +237,19 @@ impl<'tcx> QueryDescription<'tcx> for queries::crate_inherent_impls<'tcx> {\n \n impl<'tcx> QueryDescription<'tcx> for queries::crate_inherent_impls_overlap_check<'tcx> {\n     fn describe(_: TyCtxt, _: CrateNum) -> String {\n-        format!(\"check for overlap between inherent impls defined in this crate\")\n+        \"check for overlap between inherent impls defined in this crate\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::crate_variances<'tcx> {\n     fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n-        format!(\"computing the variances for items in this crate\")\n+        \"computing the variances for items in this crate\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::inferred_outlives_crate<'tcx> {\n     fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n-        format!(\"computing the inferred outlives predicates for items in this crate\")\n+        \"computing the inferred outlives predicates for items in this crate\".to_string()\n     }\n }\n \n@@ -262,19 +262,19 @@ impl<'tcx> QueryDescription<'tcx> for queries::mir_shims<'tcx> {\n \n impl<'tcx> QueryDescription<'tcx> for queries::privacy_access_levels<'tcx> {\n     fn describe(_: TyCtxt, _: CrateNum) -> String {\n-        format!(\"privacy access levels\")\n+        \"privacy access levels\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::typeck_item_bodies<'tcx> {\n     fn describe(_: TyCtxt, _: CrateNum) -> String {\n-        format!(\"type-checking all item bodies\")\n+        \"type-checking all item bodies\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::reachable_set<'tcx> {\n     fn describe(_: TyCtxt, _: CrateNum) -> String {\n-        format!(\"reachability\")\n+        \"reachability\".to_string()\n     }\n }\n \n@@ -298,7 +298,7 @@ impl<'tcx> QueryDescription<'tcx> for queries::const_eval<'tcx> {\n \n impl<'tcx> QueryDescription<'tcx> for queries::mir_keys<'tcx> {\n     fn describe(_: TyCtxt, _: CrateNum) -> String {\n-        format!(\"getting a list of all mir_keys\")\n+        \"getting a list of all mir_keys\".to_string()\n     }\n }\n \n@@ -476,247 +476,247 @@ impl<'tcx> QueryDescription<'tcx> for queries::extern_crate<'tcx> {\n \n impl<'tcx> QueryDescription<'tcx> for queries::lint_levels<'tcx> {\n     fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n-        format!(\"computing the lint levels for items in this crate\")\n+        \"computing the lint levels for items in this crate\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::specializes<'tcx> {\n     fn describe(_tcx: TyCtxt, _: (DefId, DefId)) -> String {\n-        format!(\"computing whether impls specialize one another\")\n+        \"computing whether impls specialize one another\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::in_scope_traits_map<'tcx> {\n     fn describe(_tcx: TyCtxt, _: DefIndex) -> String {\n-        format!(\"traits in scope at a block\")\n+        \"traits in scope at a block\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::is_no_builtins<'tcx> {\n     fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n-        format!(\"test whether a crate has #![no_builtins]\")\n+        \"test whether a crate has #![no_builtins]\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::panic_strategy<'tcx> {\n     fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n-        format!(\"query a crate's configured panic strategy\")\n+        \"query a crate's configured panic strategy\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::is_profiler_runtime<'tcx> {\n     fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n-        format!(\"query a crate is #![profiler_runtime]\")\n+        \"query a crate is #![profiler_runtime]\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::is_sanitizer_runtime<'tcx> {\n     fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n-        format!(\"query a crate is #![sanitizer_runtime]\")\n+        \"query a crate is #![sanitizer_runtime]\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::reachable_non_generics<'tcx> {\n     fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n-        format!(\"looking up the exported symbols of a crate\")\n+        \"looking up the exported symbols of a crate\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::native_libraries<'tcx> {\n     fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n-        format!(\"looking up the native libraries of a linked crate\")\n+        \"looking up the native libraries of a linked crate\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::foreign_modules<'tcx> {\n     fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n-        format!(\"looking up the foreign modules of a linked crate\")\n+        \"looking up the foreign modules of a linked crate\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::plugin_registrar_fn<'tcx> {\n     fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n-        format!(\"looking up the plugin registrar for a crate\")\n+        \"looking up the plugin registrar for a crate\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::derive_registrar_fn<'tcx> {\n     fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n-        format!(\"looking up the derive registrar for a crate\")\n+        \"looking up the derive registrar for a crate\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::crate_disambiguator<'tcx> {\n     fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n-        format!(\"looking up the disambiguator a crate\")\n+        \"looking up the disambiguator a crate\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::crate_hash<'tcx> {\n     fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n-        format!(\"looking up the hash a crate\")\n+        \"looking up the hash a crate\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::original_crate_name<'tcx> {\n     fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n-        format!(\"looking up the original name a crate\")\n+        \"looking up the original name a crate\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::extra_filename<'tcx> {\n     fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n-        format!(\"looking up the extra filename for a crate\")\n+        \"looking up the extra filename for a crate\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::implementations_of_trait<'tcx> {\n     fn describe(_tcx: TyCtxt, _: (CrateNum, DefId)) -> String {\n-        format!(\"looking up implementations of a trait in a crate\")\n+        \"looking up implementations of a trait in a crate\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::all_trait_implementations<'tcx> {\n     fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n-        format!(\"looking up all (?) trait implementations\")\n+        \"looking up all (?) trait implementations\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::link_args<'tcx> {\n     fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n-        format!(\"looking up link arguments for a crate\")\n+        \"looking up link arguments for a crate\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::resolve_lifetimes<'tcx> {\n     fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n-        format!(\"resolving lifetimes\")\n+        \"resolving lifetimes\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::named_region_map<'tcx> {\n     fn describe(_tcx: TyCtxt, _: DefIndex) -> String {\n-        format!(\"looking up a named region\")\n+        \"looking up a named region\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::is_late_bound_map<'tcx> {\n     fn describe(_tcx: TyCtxt, _: DefIndex) -> String {\n-        format!(\"testing if a region is late bound\")\n+        \"testing if a region is late bound\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::object_lifetime_defaults_map<'tcx> {\n     fn describe(_tcx: TyCtxt, _: DefIndex) -> String {\n-        format!(\"looking up lifetime defaults for a region\")\n+        \"looking up lifetime defaults for a region\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::dep_kind<'tcx> {\n     fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n-        format!(\"fetching what a dependency looks like\")\n+        \"fetching what a dependency looks like\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::crate_name<'tcx> {\n     fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n-        format!(\"fetching what a crate is named\")\n+        \"fetching what a crate is named\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::get_lang_items<'tcx> {\n     fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n-        format!(\"calculating the lang items map\")\n+        \"calculating the lang items map\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::defined_lang_items<'tcx> {\n     fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n-        format!(\"calculating the lang items defined in a crate\")\n+        \"calculating the lang items defined in a crate\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::missing_lang_items<'tcx> {\n     fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n-        format!(\"calculating the missing lang items in a crate\")\n+        \"calculating the missing lang items in a crate\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::visible_parent_map<'tcx> {\n     fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n-        format!(\"calculating the visible parent map\")\n+        \"calculating the visible parent map\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::missing_extern_crate_item<'tcx> {\n     fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n-        format!(\"seeing if we're missing an `extern crate` item for this crate\")\n+        \"seeing if we're missing an `extern crate` item for this crate\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::used_crate_source<'tcx> {\n     fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n-        format!(\"looking at the source for a crate\")\n+        \"looking at the source for a crate\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::postorder_cnums<'tcx> {\n     fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n-        format!(\"generating a postorder list of CrateNums\")\n+        \"generating a postorder list of CrateNums\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::maybe_unused_extern_crates<'tcx> {\n     fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n-        format!(\"looking up all possibly unused extern crates\")\n+        \"looking up all possibly unused extern crates\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::stability_index<'tcx> {\n     fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n-        format!(\"calculating the stability index for the local crate\")\n+        \"calculating the stability index for the local crate\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::all_traits<'tcx> {\n     fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n-        format!(\"fetching all foreign and local traits\")\n+        \"fetching all foreign and local traits\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::all_crate_nums<'tcx> {\n     fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n-        format!(\"fetching all foreign CrateNum instances\")\n+        \"fetching all foreign CrateNum instances\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::exported_symbols<'tcx> {\n     fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n-        format!(\"exported_symbols\")\n+        \"exported_symbols\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::collect_and_partition_mono_items<'tcx> {\n     fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n-        format!(\"collect_and_partition_mono_items\")\n+        \"collect_and_partition_mono_items\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::codegen_unit<'tcx> {\n     fn describe(_tcx: TyCtxt, _: InternedString) -> String {\n-        format!(\"codegen_unit\")\n+        \"codegen_unit\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::compile_codegen_unit<'tcx> {\n     fn describe(_tcx: TyCtxt, _: InternedString) -> String {\n-        format!(\"compile_codegen_unit\")\n+        \"compile_codegen_unit\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::output_filenames<'tcx> {\n     fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n-        format!(\"output_filenames\")\n+        \"output_filenames\".to_string()\n     }\n }\n \n@@ -728,7 +728,7 @@ impl<'tcx> QueryDescription<'tcx> for queries::vtable_methods<'tcx> {\n \n impl<'tcx> QueryDescription<'tcx> for queries::features_query<'tcx> {\n     fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n-        format!(\"looking up enabled feature gates\")\n+        \"looking up enabled feature gates\".to_string()\n     }\n }\n \n@@ -772,7 +772,7 @@ impl<'tcx> QueryDescription<'tcx> for queries::substitute_normalize_and_test_pre\n \n impl<'tcx> QueryDescription<'tcx> for queries::target_features_whitelist<'tcx> {\n     fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n-        format!(\"looking up the whitelist of target features\")\n+        \"looking up the whitelist of target features\".to_string()\n     }\n }\n \n@@ -799,25 +799,25 @@ impl<'tcx> QueryDescription<'tcx> for queries::generics_of<'tcx> {\n \n impl<'tcx> QueryDescription<'tcx> for queries::program_clauses_for<'tcx> {\n     fn describe(_tcx: TyCtxt, _: DefId) -> String {\n-        format!(\"generating chalk-style clauses\")\n+        \"generating chalk-style clauses\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::program_clauses_for_env<'tcx> {\n     fn describe(_tcx: TyCtxt, _: ty::ParamEnv<'tcx>) -> String {\n-        format!(\"generating chalk-style clauses for param env\")\n+        \"generating chalk-style clauses for param env\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::wasm_import_module_map<'tcx> {\n     fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n-        format!(\"wasm import module map\")\n+        \"wasm import module map\".to_string()\n     }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::dllimport_foreign_items<'tcx> {\n     fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n-        format!(\"wasm import module map\")\n+        \"wasm import module map\".to_string()\n     }\n }\n "}, {"sha": "1eb28fd6a8bf9d0af48993ec8a40628ba082ca58", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/421b2ba347a3a1afa41b91f4254f238c790fd73b/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/421b2ba347a3a1afa41b91f4254f238c790fd73b/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=421b2ba347a3a1afa41b91f4254f238c790fd73b", "patch": "@@ -1314,7 +1314,7 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n         let suggestion =\n             match self.tcx.sess.codemap().span_to_snippet(err.span) {\n                 Ok(string) => format!(\"move {}\", string),\n-                Err(_) => format!(\"move |<args>| <body>\")\n+                Err(_) => \"move |<args>| <body>\".to_string()\n             };\n \n         self.cannot_capture_in_long_lived_closure(err.span,"}, {"sha": "9a3dd9d2f88147bb3f0607f15811630698883323", "filename": "src/librustc_codegen_llvm/back/bytecode.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/421b2ba347a3a1afa41b91f4254f238c790fd73b/src%2Flibrustc_codegen_llvm%2Fback%2Fbytecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/421b2ba347a3a1afa41b91f4254f238c790fd73b/src%2Flibrustc_codegen_llvm%2Fback%2Fbytecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fbytecode.rs?ref=421b2ba347a3a1afa41b91f4254f238c790fd73b", "patch": "@@ -108,37 +108,37 @@ pub struct DecodedBytecode<'a> {\n impl<'a> DecodedBytecode<'a> {\n     pub fn new(data: &'a [u8]) -> Result<DecodedBytecode<'a>, String> {\n         if !data.starts_with(RLIB_BYTECODE_OBJECT_MAGIC) {\n-            return Err(format!(\"magic bytecode prefix not found\"))\n+            return Err(\"magic bytecode prefix not found\".to_string())\n         }\n         let data = &data[RLIB_BYTECODE_OBJECT_MAGIC.len()..];\n         if !data.starts_with(&[RLIB_BYTECODE_OBJECT_VERSION, 0, 0, 0]) {\n-            return Err(format!(\"wrong version prefix found in bytecode\"))\n+            return Err(\"wrong version prefix found in bytecode\".to_string())\n         }\n         let data = &data[4..];\n         if data.len() < 4 {\n-            return Err(format!(\"bytecode corrupted\"))\n+            return Err(\"bytecode corrupted\".to_string())\n         }\n         let identifier_len = unsafe {\n             u32::from_le(ptr::read_unaligned(data.as_ptr() as *const u32)) as usize\n         };\n         let data = &data[4..];\n         if data.len() < identifier_len {\n-            return Err(format!(\"bytecode corrupted\"))\n+            return Err(\"bytecode corrupted\".to_string())\n         }\n         let identifier = match str::from_utf8(&data[..identifier_len]) {\n             Ok(s) => s,\n-            Err(_) => return Err(format!(\"bytecode corrupted\"))\n+            Err(_) => return Err(\"bytecode corrupted\".to_string())\n         };\n         let data = &data[identifier_len..];\n         if data.len() < 8 {\n-            return Err(format!(\"bytecode corrupted\"))\n+            return Err(\"bytecode corrupted\".to_string())\n         }\n         let bytecode_len = unsafe {\n             u64::from_le(ptr::read_unaligned(data.as_ptr() as *const u64)) as usize\n         };\n         let data = &data[8..];\n         if data.len() < bytecode_len {\n-            return Err(format!(\"bytecode corrupted\"))\n+            return Err(\"bytecode corrupted\".to_string())\n         }\n         let encoded_bytecode = &data[..bytecode_len];\n "}, {"sha": "93a79478dd5fe134382ab57c576a40653a7afd04", "filename": "src/librustc_codegen_llvm/back/link.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/421b2ba347a3a1afa41b91f4254f238c790fd73b/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/421b2ba347a3a1afa41b91f4254f238c790fd73b/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs?ref=421b2ba347a3a1afa41b91f4254f238c790fd73b", "patch": "@@ -260,14 +260,14 @@ pub(crate) fn each_linked_rlib(sess: &Session,\n                    .or_else(|| fmts.get(&config::CrateTypeProcMacro));\n     let fmts = match fmts {\n         Some(f) => f,\n-        None => return Err(format!(\"could not find formats for rlibs\"))\n+        None => return Err(\"could not find formats for rlibs\".to_string())\n     };\n     for &(cnum, ref path) in crates {\n         match fmts.get(cnum.as_usize() - 1) {\n             Some(&Linkage::NotLinked) |\n             Some(&Linkage::IncludedFromDylib) => continue,\n             Some(_) => {}\n-            None => return Err(format!(\"could not find formats for rlibs\"))\n+            None => return Err(\"could not find formats for rlibs\".to_string())\n         }\n         let name = &info.crate_name[&cnum];\n         let path = match *path {"}, {"sha": "5f2f3733ec7f0df434ed9f2e01ea3e5912ea0528", "filename": "src/librustc_codegen_llvm/back/linker.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/421b2ba347a3a1afa41b91f4254f238c790fd73b/src%2Flibrustc_codegen_llvm%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/421b2ba347a3a1afa41b91f4254f238c790fd73b/src%2Flibrustc_codegen_llvm%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flinker.rs?ref=421b2ba347a3a1afa41b91f4254f238c790fd73b", "patch": "@@ -206,7 +206,7 @@ impl<'a> GccLinker<'a> {\n         match self.sess.opts.cg.lto {\n             config::Lto::Thin |\n             config::Lto::ThinLocal => {\n-                self.linker_arg(&format!(\"-plugin-opt=thin\"));\n+                self.linker_arg(\"-plugin-opt=thin\");\n             }\n             config::Lto::Fat |\n             config::Lto::Yes |"}, {"sha": "93cb9eb9767657ed32bc876b828dd17bfe8ac06c", "filename": "src/librustc_codegen_llvm/back/lto.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/421b2ba347a3a1afa41b91f4254f238c790fd73b/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/421b2ba347a3a1afa41b91f4254f238c790fd73b/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs?ref=421b2ba347a3a1afa41b91f4254f238c790fd73b", "patch": "@@ -421,7 +421,7 @@ fn thin_lto(diag_handler: &Handler,\n             symbol_white_list.len() as u32,\n         );\n         if data.is_null() {\n-            let msg = format!(\"failed to prepare thin LTO context\");\n+            let msg = \"failed to prepare thin LTO context\".to_string();\n             return Err(write::llvm_err(&diag_handler, msg))\n         }\n         let data = ThinData(data);\n@@ -647,7 +647,7 @@ impl ThinModule {\n             self.shared.module_names[self.idx].as_ptr(),\n         );\n         if llmod.is_null() {\n-            let msg = format!(\"failed to parse bitcode for thin LTO module\");\n+            let msg = \"failed to parse bitcode for thin LTO module\".to_string();\n             return Err(write::llvm_err(&diag_handler, msg));\n         }\n         let module = ModuleCodegen {\n@@ -670,7 +670,7 @@ impl ThinModule {\n         let mut cu2 = ptr::null_mut();\n         llvm::LLVMRustThinLTOGetDICompileUnit(llmod, &mut cu1, &mut cu2);\n         if !cu2.is_null() {\n-            let msg = format!(\"multiple source DICompileUnits found\");\n+            let msg = \"multiple source DICompileUnits found\".to_string();\n             return Err(write::llvm_err(&diag_handler, msg))\n         }\n \n@@ -691,25 +691,25 @@ impl ThinModule {\n         // You can find some more comments about these functions in the LLVM\n         // bindings we've got (currently `PassWrapper.cpp`)\n         if !llvm::LLVMRustPrepareThinLTORename(self.shared.data.0, llmod) {\n-            let msg = format!(\"failed to prepare thin LTO module\");\n+            let msg = \"failed to prepare thin LTO module\".to_string();\n             return Err(write::llvm_err(&diag_handler, msg))\n         }\n         cgcx.save_temp_bitcode(&module, \"thin-lto-after-rename\");\n         timeline.record(\"rename\");\n         if !llvm::LLVMRustPrepareThinLTOResolveWeak(self.shared.data.0, llmod) {\n-            let msg = format!(\"failed to prepare thin LTO module\");\n+            let msg = \"failed to prepare thin LTO module\".to_string();\n             return Err(write::llvm_err(&diag_handler, msg))\n         }\n         cgcx.save_temp_bitcode(&module, \"thin-lto-after-resolve\");\n         timeline.record(\"resolve\");\n         if !llvm::LLVMRustPrepareThinLTOInternalize(self.shared.data.0, llmod) {\n-            let msg = format!(\"failed to prepare thin LTO module\");\n+            let msg = \"failed to prepare thin LTO module\".to_string();\n             return Err(write::llvm_err(&diag_handler, msg))\n         }\n         cgcx.save_temp_bitcode(&module, \"thin-lto-after-internalize\");\n         timeline.record(\"internalize\");\n         if !llvm::LLVMRustPrepareThinLTOImport(self.shared.data.0, llmod) {\n-            let msg = format!(\"failed to prepare thin LTO module\");\n+            let msg = \"failed to prepare thin LTO module\".to_string();\n             return Err(write::llvm_err(&diag_handler, msg))\n         }\n         cgcx.save_temp_bitcode(&module, \"thin-lto-after-import\");"}, {"sha": "4f4dbc417535bbe39b8e0c1bf8595595472fb680", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/421b2ba347a3a1afa41b91f4254f238c790fd73b/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/421b2ba347a3a1afa41b91f4254f238c790fd73b/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=421b2ba347a3a1afa41b91f4254f238c790fd73b", "patch": "@@ -1176,7 +1176,7 @@ fn usage(verbose: bool, include_unstable_options: bool) {\n     for option in groups.iter().filter(|x| include_unstable_options || x.is_stable()) {\n         (option.apply)(&mut options);\n     }\n-    let message = format!(\"Usage: rustc [OPTIONS] INPUT\");\n+    let message = \"Usage: rustc [OPTIONS] INPUT\".to_string();\n     let nightly_help = if nightly_options::is_nightly_build() {\n         \"\\n    -Z help             Print internal options for debugging rustc\"\n     } else {"}, {"sha": "50ea8b75303210e6560aa5f29ce5fa6300801e52", "filename": "src/librustc_driver/profile/trace.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/421b2ba347a3a1afa41b91f4254f238c790fd73b/src%2Flibrustc_driver%2Fprofile%2Ftrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/421b2ba347a3a1afa41b91f4254f238c790fd73b/src%2Flibrustc_driver%2Fprofile%2Ftrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fprofile%2Ftrace.rs?ref=421b2ba347a3a1afa41b91f4254f238c790fd73b", "patch": "@@ -62,7 +62,7 @@ pub fn html_of_effect(eff: &Effect) -> (String, String) {\n     match *eff {\n         Effect::TimeBegin(ref msg) => {\n             (msg.clone(),\n-             format!(\"time-begin\"))\n+             \"time-begin\".to_string())\n         },\n         Effect::TaskBegin(ref key) => {\n             let cons = cons_of_key(key);\n@@ -91,20 +91,20 @@ fn html_of_duration(_start: &Instant, dur: &Duration) -> (String, String) {\n \n fn html_of_fraction(frac: f64) -> (String, String) {\n     let css = {\n-        if       frac > 0.50  { format!(\"frac-50\") }\n-        else if  frac > 0.40  { format!(\"frac-40\") }\n-        else if  frac > 0.30  { format!(\"frac-30\") }\n-        else if  frac > 0.20  { format!(\"frac-20\") }\n-        else if  frac > 0.10  { format!(\"frac-10\") }\n-        else if  frac > 0.05  { format!(\"frac-05\") }\n-        else if  frac > 0.02  { format!(\"frac-02\") }\n-        else if  frac > 0.01  { format!(\"frac-01\") }\n-        else if  frac > 0.001 { format!(\"frac-001\") }\n-        else                  { format!(\"frac-0\") }\n+        if       frac > 0.50  { \"frac-50\".to_string() }\n+        else if  frac > 0.40  { \"frac-40\".to_string() }\n+        else if  frac > 0.30  { \"frac-30\".to_string() }\n+        else if  frac > 0.20  { \"frac-20\".to_string() }\n+        else if  frac > 0.10  { \"frac-10\".to_string() }\n+        else if  frac > 0.05  { \"frac-05\".to_string() }\n+        else if  frac > 0.02  { \"frac-02\".to_string() }\n+        else if  frac > 0.01  { \"frac-01\".to_string() }\n+        else if  frac > 0.001 { \"frac-001\".to_string() }\n+        else                  { \"frac-0\".to_string() }\n     };\n     let percent = frac * 100.0;\n     if percent > 0.1 { (format!(\"{:.1}%\", percent), css) }\n-    else { (format!(\"< 0.1%\", ), css) }\n+    else { (\"< 0.1%\".to_string(), css) }\n }\n \n fn total_duration(traces: &Vec<Rec>) -> Duration {"}, {"sha": "64036690927bd881d5585c4944b52afc9dfe94f6", "filename": "src/librustc_incremental/assert_dep_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/421b2ba347a3a1afa41b91f4254f238c790fd73b/src%2Flibrustc_incremental%2Fassert_dep_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/421b2ba347a3a1afa41b91f4254f238c790fd73b/src%2Flibrustc_incremental%2Fassert_dep_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fassert_dep_graph.rs?ref=421b2ba347a3a1afa41b91f4254f238c790fd73b", "patch": "@@ -229,7 +229,7 @@ fn check_paths<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n }\n \n fn dump_graph(tcx: TyCtxt) {\n-    let path: String = env::var(\"RUST_DEP_GRAPH\").unwrap_or_else(|_| format!(\"dep_graph\"));\n+    let path: String = env::var(\"RUST_DEP_GRAPH\").unwrap_or_else(|_| \"dep_graph\".to_string());\n     let query = tcx.dep_graph.query();\n \n     let nodes = match env::var(\"RUST_DEP_GRAPH_FILTER\") {"}, {"sha": "4f808dee61f2173f5554a4efb135cde271188fe1", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/421b2ba347a3a1afa41b91f4254f238c790fd73b/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/421b2ba347a3a1afa41b91f4254f238c790fd73b/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=421b2ba347a3a1afa41b91f4254f238c790fd73b", "patch": "@@ -802,7 +802,7 @@ impl<'a> CrateLoader<'a> {\n                                            name));\n                 }\n             } else {\n-                self.sess.err(&format!(\"Must link std to be compiled with `-Z sanitizer`\"));\n+                self.sess.err(\"Must link std to be compiled with `-Z sanitizer`\");\n             }\n         }\n     }"}, {"sha": "9a84daf53dbd46d4c5bbeebfef8a89c97bc85498", "filename": "src/librustc_mir/borrow_check/mutability_errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/421b2ba347a3a1afa41b91f4254f238c790fd73b/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/421b2ba347a3a1afa41b91f4254f238c790fd73b/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs?ref=421b2ba347a3a1afa41b91f4254f238c790fd73b", "patch": "@@ -85,7 +85,7 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n                     reason = if self.is_upvar(access_place) {\n                         \", as it is a captured variable in a `Fn` closure\".to_string()\n                     } else {\n-                        format!(\", as `Fn` closures cannot mutate their captured variables\")\n+                        \", as `Fn` closures cannot mutate their captured variables\".to_string()\n                     }\n                 } else if {\n                     if let Place::Local(local) = *base {\n@@ -100,7 +100,7 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n                     }\n                 } {\n                     item_msg = format!(\"`{}`\", access_place_desc.unwrap());\n-                    reason = format!(\", as it is immutable for the pattern guard\");\n+                    reason = \", as it is immutable for the pattern guard\".to_string();\n                 } else {\n                     let pointer_type =\n                         if base.ty(self.mir, self.tcx).to_ty(self.tcx).is_region_ptr() {"}, {"sha": "cdb0351d9a8f08ca7f9faf95fb2e6a12205c7b51", "filename": "src/librustc_mir/borrow_check/nll/explain_borrow/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/421b2ba347a3a1afa41b91f4254f238c790fd73b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/421b2ba347a3a1afa41b91f4254f238c790fd73b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs?ref=421b2ba347a3a1afa41b91f4254f238c790fd73b", "patch": "@@ -65,7 +65,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             Some(Cause::LiveVar(_local, location)) => {\n                 err.span_label(\n                     mir.source_info(location).span,\n-                    format!(\"borrow later used here\"),\n+                    \"borrow later used here\".to_string(),\n                 );\n             }\n "}, {"sha": "8fbb4aafc1f67d2ad37e81cf456cfa57040c0833", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/421b2ba347a3a1afa41b91f4254f238c790fd73b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/421b2ba347a3a1afa41b91f4254f238c790fd73b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs?ref=421b2ba347a3a1afa41b91f4254f238c790fd73b", "patch": "@@ -401,7 +401,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     ) {\n         let mut diag = infcx.tcx.sess.struct_span_err(\n             span,\n-            &format!(\"unsatisfied lifetime constraints\"), // FIXME\n+            \"unsatisfied lifetime constraints\", // FIXME\n         );\n \n         let counter = &mut 1;"}, {"sha": "dd508084d7dec81cab13d3f2b1585ed7915db017", "filename": "src/librustc_mir/borrow_check/nll/region_infer/graphviz.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/421b2ba347a3a1afa41b91f4254f238c790fd73b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/421b2ba347a3a1afa41b91f4254f238c790fd73b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fgraphviz.rs?ref=421b2ba347a3a1afa41b91f4254f238c790fd73b", "patch": "@@ -50,7 +50,7 @@ impl<'a, 'this, 'tcx> dot::Labeller<'this> for RawConstraints<'a, 'tcx> {\n     type Edge = OutlivesConstraint;\n \n     fn graph_id(&'this self) -> dot::Id<'this> {\n-        dot::Id::new(format!(\"RegionInferenceContext\")).unwrap()\n+        dot::Id::new(\"RegionInferenceContext\".to_string()).unwrap()\n     }\n     fn node_id(&'this self, n: &RegionVid) -> dot::Id<'this> {\n         dot::Id::new(format!(\"r{}\", n.index())).unwrap()\n@@ -100,7 +100,7 @@ impl<'a, 'this, 'tcx> dot::Labeller<'this> for SccConstraints<'a, 'tcx> {\n     type Edge = (ConstraintSccIndex, ConstraintSccIndex);\n \n     fn graph_id(&'this self) -> dot::Id<'this> {\n-        dot::Id::new(format!(\"RegionInferenceContext\")).unwrap()\n+        dot::Id::new(\"RegionInferenceContext\".to_string()).unwrap()\n     }\n     fn node_id(&'this self, n: &ConstraintSccIndex) -> dot::Id<'this> {\n         dot::Id::new(format!(\"r{}\", n.index())).unwrap()"}, {"sha": "09e85adfb7c30c533020c8cdce7bf3bee3c2f4b8", "filename": "src/librustc_mir/borrow_check/nll/region_infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/421b2ba347a3a1afa41b91f4254f238c790fd73b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/421b2ba347a3a1afa41b91f4254f238c790fd73b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs?ref=421b2ba347a3a1afa41b91f4254f238c790fd73b", "patch": "@@ -1080,7 +1080,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         let mut diag = infcx\n             .tcx\n             .sess\n-            .struct_span_err(span, &format!(\"higher-ranked subtype error\"));\n+            .struct_span_err(span, \"higher-ranked subtype error\");\n         diag.emit();\n     }\n }"}, {"sha": "ea0dc200b7df3dbc2b39e1dac13d1eb61392adce", "filename": "src/librustc_mir/borrow_check/nll/type_check/input_output.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/421b2ba347a3a1afa41b91f4254f238c790fd73b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Finput_output.rs", "raw_url": "https://github.com/rust-lang/rust/raw/421b2ba347a3a1afa41b91f4254f238c790fd73b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Finput_output.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Finput_output.rs?ref=421b2ba347a3a1afa41b91f4254f238c790fd73b", "patch": "@@ -137,7 +137,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                             obligations: obligations.into_vec(),\n                         })\n                     },\n-                    || format!(\"input_output\"),\n+                    || \"input_output\".to_string(),\n                 ),\n             ).unwrap_or_else(|terr| {\n                 span_mirbug!(\n@@ -166,7 +166,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                             obligations: vec![],\n                         })\n                     },\n-                    || format!(\"anon_type_map\"),\n+                    || \"anon_type_map\".to_string(),\n                 ),\n             ).unwrap();\n         }"}, {"sha": "e2c223a92ba87b250d3bf7d36bd566c6f8e2af4f", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/421b2ba347a3a1afa41b91f4254f238c790fd73b/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/421b2ba347a3a1afa41b91f4254f238c790fd73b/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=421b2ba347a3a1afa41b91f4254f238c790fd73b", "patch": "@@ -680,7 +680,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n                         (dest.offset <= src.offset && dest.offset + size > src.offset)\n                     {\n                         return err!(Intrinsic(\n-                            format!(\"copy_nonoverlapping called on overlapping ranges\"),\n+                            \"copy_nonoverlapping called on overlapping ranges\".to_string(),\n                         ));\n                     }\n                 }"}, {"sha": "aba39966110ad98111ffde174fa7dceda39f96ff", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/421b2ba347a3a1afa41b91f4254f238c790fd73b/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/421b2ba347a3a1afa41b91f4254f238c790fd73b/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=421b2ba347a3a1afa41b91f4254f238c790fd73b", "patch": "@@ -387,11 +387,11 @@ fn unsafe_derive_on_repr_packed<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: D\n     // FIXME: when we make this a hard error, this should have its\n     // own error code.\n     let message = if tcx.generics_of(def_id).own_counts().types != 0 {\n-        format!(\"#[derive] can't be used on a #[repr(packed)] struct with \\\n-                 type parameters (error E0133)\")\n+        \"#[derive] can't be used on a #[repr(packed)] struct with \\\n+         type parameters (error E0133)\".to_string()\n     } else {\n-        format!(\"#[derive] can't be used on a #[repr(packed)] struct that \\\n-                 does not derive Copy (error E0133)\")\n+        \"#[derive] can't be used on a #[repr(packed)] struct that \\\n+         does not derive Copy (error E0133)\".to_string()\n     };\n     tcx.lint_node(SAFE_PACKED_BORROWS,\n                   lint_node_id,"}, {"sha": "4bb74c60974505890bc9f02ad5ad24ad5f93db49", "filename": "src/librustc_mir/util/pretty.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/421b2ba347a3a1afa41b91f4254f238c790fd73b/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/421b2ba347a3a1afa41b91f4254f238c790fd73b/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpretty.rs?ref=421b2ba347a3a1afa41b91f4254f238c790fd73b", "patch": "@@ -181,10 +181,10 @@ fn dump_path(\n     };\n \n     let pass_num = if tcx.sess.opts.debugging_opts.dump_mir_exclude_pass_number {\n-        format!(\"\")\n+        String::new()\n     } else {\n         match pass_num {\n-            None => format!(\".-------\"),\n+            None => \".-------\".to_string(),\n             Some(pass_num) => format!(\".{}\", pass_num),\n         }\n     };\n@@ -398,7 +398,7 @@ impl<'cx, 'gcx, 'tcx> Visitor<'tcx> for ExtraComments<'cx, 'gcx, 'tcx> {\n     fn visit_constant(&mut self, constant: &Constant<'tcx>, location: Location) {\n         self.super_constant(constant, location);\n         let Constant { span, ty, literal } = constant;\n-        self.push(&format!(\"mir::Constant\"));\n+        self.push(\"mir::Constant\");\n         self.push(&format!(\"+ span: {:?}\", span));\n         self.push(&format!(\"+ ty: {:?}\", ty));\n         self.push(&format!(\"+ literal: {:?}\", literal));\n@@ -407,7 +407,7 @@ impl<'cx, 'gcx, 'tcx> Visitor<'tcx> for ExtraComments<'cx, 'gcx, 'tcx> {\n     fn visit_const(&mut self, constant: &&'tcx ty::Const<'tcx>, _: Location) {\n         self.super_const(constant);\n         let ty::Const { ty, val, .. } = constant;\n-        self.push(&format!(\"ty::Const\"));\n+        self.push(\"ty::Const\");\n         self.push(&format!(\"+ ty: {:?}\", ty));\n         self.push(&format!(\"+ val: {:?}\", val));\n     }\n@@ -417,13 +417,13 @@ impl<'cx, 'gcx, 'tcx> Visitor<'tcx> for ExtraComments<'cx, 'gcx, 'tcx> {\n         match rvalue {\n             Rvalue::Aggregate(kind, _) => match **kind {\n                 AggregateKind::Closure(def_id, substs) => {\n-                    self.push(&format!(\"closure\"));\n+                    self.push(\"closure\");\n                     self.push(&format!(\"+ def_id: {:?}\", def_id));\n                     self.push(&format!(\"+ substs: {:#?}\", substs));\n                 }\n \n                 AggregateKind::Generator(def_id, substs, movability) => {\n-                    self.push(&format!(\"generator\"));\n+                    self.push(\"generator\");\n                     self.push(&format!(\"+ def_id: {:?}\", def_id));\n                     self.push(&format!(\"+ substs: {:#?}\", substs));\n                     self.push(&format!(\"+ movability: {:?}\", movability));"}, {"sha": "0cf25315750a664d5994f5290bd35e2fd5168bd9", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/421b2ba347a3a1afa41b91f4254f238c790fd73b/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/421b2ba347a3a1afa41b91f4254f238c790fd73b/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=421b2ba347a3a1afa41b91f4254f238c790fd73b", "patch": "@@ -397,7 +397,8 @@ fn resolve_struct_error<'sess, 'a>(resolver: &'sess Resolver,\n             let mut err = struct_span_err!(resolver.session, span, E0128,\n                                            \"type parameters with a default cannot use \\\n                                             forward declared identifiers\");\n-            err.span_label(span, format!(\"defaulted type parameters cannot be forward declared\"));\n+            err.span_label(\n+                span, \"defaulted type parameters cannot be forward declared\".to_string());\n             err\n         }\n     }\n@@ -2890,16 +2891,16 @@ impl<'a> Resolver<'a> {\n                 let item_str = path[path.len() - 1];\n                 let item_span = path[path.len() - 1].span;\n                 let (mod_prefix, mod_str) = if path.len() == 1 {\n-                    (format!(\"\"), format!(\"this scope\"))\n+                    (String::new(), \"this scope\".to_string())\n                 } else if path.len() == 2 && path[0].name == keywords::CrateRoot.name() {\n-                    (format!(\"\"), format!(\"the crate root\"))\n+                    (String::new(), \"the crate root\".to_string())\n                 } else {\n                     let mod_path = &path[..path.len() - 1];\n                     let mod_prefix = match this.resolve_path(mod_path, Some(TypeNS),\n                                                              false, span, CrateLint::No) {\n                         PathResult::Module(module) => module.def(),\n                         _ => None,\n-                    }.map_or(format!(\"\"), |def| format!(\"{} \", def.kind_name()));\n+                    }.map_or(String::new(), |def| format!(\"{} \", def.kind_name()));\n                     (mod_prefix, format!(\"`{}`\", names_to_string(mod_path)))\n                 };\n                 (format!(\"cannot find {} `{}` in {}{}\", expected, item_str, mod_prefix, mod_str),\n@@ -3457,7 +3458,7 @@ impl<'a> Resolver<'a> {\n                     path[0].name != keywords::CrateRoot.name() ||\n                name == keywords::Crate.name() && path.len() == 1 {\n                 let name_str = if name == keywords::CrateRoot.name() {\n-                    format!(\"crate root\")\n+                    \"crate root\".to_string()\n                 } else {\n                     format!(\"`{}`\", name)\n                 };"}, {"sha": "0bc7ae04185d37a0210795bf528d3b464100e5e2", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/421b2ba347a3a1afa41b91f4254f238c790fd73b/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/421b2ba347a3a1afa41b91f4254f238c790fd73b/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=421b2ba347a3a1afa41b91f4254f238c790fd73b", "patch": "@@ -1298,7 +1298,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx>+'o {\n         for br in late_bound_in_ret.difference(&late_bound_in_args) {\n             let lifetime_name = match *br {\n                 ty::BrNamed(_, name) => format!(\"lifetime `{}`,\", name),\n-                ty::BrAnon(_) | ty::BrFresh(_) | ty::BrEnv => format!(\"an anonymous lifetime\"),\n+                ty::BrAnon(_) | ty::BrFresh(_) | ty::BrEnv => \"an anonymous lifetime\".to_string(),\n             };\n             let mut err = struct_span_err!(tcx.sess,\n                                            decl.output.span(),"}, {"sha": "91a3b2f23ccfd9670280550d8a80c928575f79b9", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/421b2ba347a3a1afa41b91f4254f238c790fd73b/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/421b2ba347a3a1afa41b91f4254f238c790fd73b/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=421b2ba347a3a1afa41b91f4254f238c790fd73b", "patch": "@@ -322,7 +322,7 @@ fn compare_predicate_entailment<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n             infcx.note_type_err(&mut diag,\n                                 &cause,\n-                                trait_err_span.map(|sp| (sp, format!(\"type in trait\"))),\n+                                trait_err_span.map(|sp| (sp, \"type in trait\".to_string())),\n                                 Some(infer::ValuePairs::Types(ExpectedFound {\n                                     expected: trait_fty,\n                                     found: impl_fty,\n@@ -622,7 +622,7 @@ fn compare_number_of_generics<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                 &if num_impl_m_type_params != 1 {\n                                     format!(\"{} type parameters\", num_impl_m_type_params)\n                                 } else {\n-                                    format!(\"1 type parameter\")\n+                                    \"1 type parameter\".to_string()\n                                 },\n                                 suffix.as_ref().map(|s| &s[..]).unwrap_or(\"\")));\n \n@@ -964,7 +964,7 @@ pub fn compare_const_impl<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n             infcx.note_type_err(&mut diag,\n                                 &cause,\n-                                trait_c_span.map(|span| (span, format!(\"type in trait\"))),\n+                                trait_c_span.map(|span| (span, \"type in trait\".to_string())),\n                                 Some(infer::ValuePairs::Types(ExpectedFound {\n                                     expected: trait_ty,\n                                     found: impl_ty,"}, {"sha": "8d8482208b97d3d1f317772cbdf684a6e65cd7e3", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/421b2ba347a3a1afa41b91f4254f238c790fd73b/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/421b2ba347a3a1afa41b91f4254f238c790fd73b/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=421b2ba347a3a1afa41b91f4254f238c790fd73b", "patch": "@@ -343,7 +343,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                 lint::builtin::TYVAR_BEHIND_RAW_POINTER,\n                                 scope_expr_id,\n                                 span,\n-                                &format!(\"type annotations needed\"));\n+                                \"type annotations needed\");\n                         }\n                     } else {\n                         let t = self.structurally_resolved_type(span, final_ty);"}, {"sha": "0fbdecffb8be813a3f7bdd32e52e7d40b24e961d", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/421b2ba347a3a1afa41b91f4254f238c790fd73b/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/421b2ba347a3a1afa41b91f4254f238c790fd73b/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=421b2ba347a3a1afa41b91f4254f238c790fd73b", "patch": "@@ -113,7 +113,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                         let impl_ty = self.impl_self_ty(span, impl_did).ty;\n \n                         let insertion = match self.tcx.impl_trait_ref(impl_did) {\n-                            None => format!(\"\"),\n+                            None => String::new(),\n                             Some(trait_ref) => {\n                                 format!(\" of the trait `{}`\",\n                                         self.tcx.item_path_str(trait_ref.def_id))"}, {"sha": "cdf2b6ae4473678a07415f01a2335fbc3068d4b8", "filename": "src/librustc_typeck/check/op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/421b2ba347a3a1afa41b91f4254f238c790fd73b/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/421b2ba347a3a1afa41b91f4254f238c790fd73b/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fop.rs?ref=421b2ba347a3a1afa41b91f4254f238c790fd73b", "patch": "@@ -490,7 +490,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                                     operator `{}`\", op.as_str()));\n                     match actual.sty {\n                         TyUint(_) if op == hir::UnNeg => {\n-                            err.note(&format!(\"unsigned values cannot be negated\"));\n+                            err.note(\"unsigned values cannot be negated\");\n                         },\n                         TyStr | TyNever | TyChar | TyTuple(_) | TyArray(_,_) => {},\n                         TyRef(_, ref lty, _) if lty.sty == TyStr => {},"}, {"sha": "0cc1f6333afa002859d3404f5511e1606e66bb8e", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/421b2ba347a3a1afa41b91f4254f238c790fd73b/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/421b2ba347a3a1afa41b91f4254f238c790fd73b/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=421b2ba347a3a1afa41b91f4254f238c790fd73b", "patch": "@@ -191,9 +191,9 @@ fn check_main_fn_ty<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                         hir::ItemKind::Fn(.., ref generics, _) => {\n                             let mut error = false;\n                             if !generics.params.is_empty() {\n-                                let msg = format!(\"`main` function is not allowed to have generic \\\n-                                                   parameters\");\n-                                let label = format!(\"`main` cannot have generic parameters\");\n+                                let msg = \"`main` function is not allowed to have generic \\\n+                                           parameters\".to_string();\n+                                let label = \"`main` cannot have generic parameters\".to_string();\n                                 struct_span_err!(tcx.sess, generics.span, E0131, \"{}\", msg)\n                                     .span_label(generics.span, label)\n                                     .emit();"}, {"sha": "e4265e3f366678e7607f5df3a4e42526384d43df", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/421b2ba347a3a1afa41b91f4254f238c790fd73b/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/421b2ba347a3a1afa41b91f4254f238c790fd73b/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=421b2ba347a3a1afa41b91f4254f238c790fd73b", "patch": "@@ -2566,7 +2566,7 @@ fn short_stability(item: &clean::Item, cx: &Context, show_reason: bool) -> Vec<S\n                                    text));\n                 }\n             } else {\n-                stability.push(format!(\"<div class='stab unstable'>Experimental</div>\"))\n+                stability.push(\"<div class='stab unstable'>Experimental</div>\".to_string())\n             }\n         };\n     } else if let Some(depr) = item.deprecation.as_ref() {"}, {"sha": "0cb991e19b0d0d4b38811ee12bc1d02294aae7c4", "filename": "src/libstd/sys/wasm/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/421b2ba347a3a1afa41b91f4254f238c790fd73b/src%2Flibstd%2Fsys%2Fwasm%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/421b2ba347a3a1afa41b91f4254f238c790fd73b/src%2Flibstd%2Fsys%2Fwasm%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Fos.rs?ref=421b2ba347a3a1afa41b91f4254f238c790fd73b", "patch": "@@ -21,7 +21,7 @@ pub fn errno() -> i32 {\n }\n \n pub fn error_string(_errno: i32) -> String {\n-    format!(\"operation successful\")\n+    \"operation successful\".to_string()\n }\n \n pub fn getcwd() -> io::Result<PathBuf> {"}, {"sha": "17352822e40013aa52c42af2918dd054690dbdbc", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/421b2ba347a3a1afa41b91f4254f238c790fd73b/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/421b2ba347a3a1afa41b91f4254f238c790fd73b/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=421b2ba347a3a1afa41b91f4254f238c790fd73b", "patch": "@@ -558,7 +558,7 @@ pub fn parse_opts(args: &[String]) -> Option<OptRes> {\n \n     let test_threads = match matches.opt_str(\"test-threads\") {\n         Some(n_str) => match n_str.parse::<usize>() {\n-            Ok(0) => return Some(Err(format!(\"argument for --test-threads must not be 0\"))),\n+            Ok(0) => return Some(Err(\"argument for --test-threads must not be 0\".to_string())),\n             Ok(n) => Some(n),\n             Err(e) => {\n                 return Some(Err(format!("}]}