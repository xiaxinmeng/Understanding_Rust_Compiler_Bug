{"sha": "eaaf2bd41fa96fdf622f301182694c1a3f47f8cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhYWYyYmQ0MWZhOTZmZGY2MjJmMzAxMTgyNjk0YzFhM2Y0N2Y4Y2I=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-09-23T23:25:58Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-09-25T21:27:42Z"}, "message": "rustdoc: Add the ability to list all passes\n\nIn doing so, also remove the collapse-privacy pass because it's a little\nover-zealous and may not be right 100% of the time (not used right now as well)", "tree": {"sha": "29869f702dff9aafc38e252ede8c62e9fd4f4e4d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29869f702dff9aafc38e252ede8c62e9fd4f4e4d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eaaf2bd41fa96fdf622f301182694c1a3f47f8cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eaaf2bd41fa96fdf622f301182694c1a3f47f8cb", "html_url": "https://github.com/rust-lang/rust/commit/eaaf2bd41fa96fdf622f301182694c1a3f47f8cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eaaf2bd41fa96fdf622f301182694c1a3f47f8cb/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bcc7daa6bcf9728eca36512975f9251a946618d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/bcc7daa6bcf9728eca36512975f9251a946618d7", "html_url": "https://github.com/rust-lang/rust/commit/bcc7daa6bcf9728eca36512975f9251a946618d7"}], "stats": {"total": 79, "additions": 45, "deletions": 34}, "files": [{"sha": "5c89dfb974da2e489790a6154b2a92dab3caaab8", "filename": "src/librustdoc/passes.rs", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/eaaf2bd41fa96fdf622f301182694c1a3f47f8cb/src%2Flibrustdoc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaaf2bd41fa96fdf622f301182694c1a3f47f8cb/src%2Flibrustdoc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses.rs?ref=eaaf2bd41fa96fdf622f301182694c1a3f47f8cb", "patch": "@@ -12,7 +12,6 @@ use std::num;\n use std::uint;\n \n use clean;\n-use syntax::ast;\n use clean::Item;\n use plugins;\n use fold;\n@@ -69,27 +68,6 @@ pub fn unindent_comments(crate: clean::Crate) -> plugins::PluginResult {\n     (crate, None)\n }\n \n-pub fn collapse_privacy(crate: clean::Crate) -> plugins::PluginResult {\n-    struct PrivacyCollapser {\n-        stack: ~[clean::Visibility]\n-    }\n-    impl fold::DocFolder for PrivacyCollapser {\n-        fn fold_item(&mut self, mut i: Item) -> Option<Item> {\n-            if i.visibility.is_some() {\n-                if i.visibility == Some(ast::inherited) {\n-                    i.visibility = Some(self.stack.last().clone());\n-                } else {\n-                    self.stack.push(i.visibility.clone().unwrap());\n-                }\n-            }\n-            self.fold_item_recur(i)\n-        }\n-    }\n-    let mut privacy = PrivacyCollapser { stack: ~[] };\n-    let crate = privacy.fold_crate(crate);\n-    (crate, None)\n-}\n-\n pub fn collapse_docs(crate: clean::Crate) -> plugins::PluginResult {\n     struct Collapser;\n     impl fold::DocFolder for Collapser {"}, {"sha": "69092618da20c51729bc6bef883ebc37beb35b43", "filename": "src/librustdoc/rustdoc.rs", "status": "modified", "additions": 45, "deletions": 12, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/eaaf2bd41fa96fdf622f301182694c1a3f47f8cb/src%2Flibrustdoc%2Frustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaaf2bd41fa96fdf622f301182694c1a3f47f8cb/src%2Flibrustdoc%2Frustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Frustdoc.rs?ref=eaaf2bd41fa96fdf622f301182694c1a3f47f8cb", "patch": "@@ -45,6 +45,24 @@ pub mod visit_ast;\n \n pub static SCHEMA_VERSION: &'static str = \"0.8.0\";\n \n+type Pass = (&'static str,                                      // name\n+             extern fn(clean::Crate) -> plugins::PluginResult,  // fn\n+             &'static str);                                     // description\n+\n+static PASSES: &'static [Pass] = &[\n+    (\"strip-hidden\", passes::strip_hidden,\n+     \"strips all doc(hidden) items from the output\"),\n+    (\"unindent-comments\", passes::unindent_comments,\n+     \"removes excess indentation on comments in order for markdown to like it\"),\n+    (\"collapse-docs\", passes::collapse_docs,\n+     \"concatenates all document attributes into one document attribute\"),\n+];\n+\n+static DEFAULT_PASSES: &'static [&'static str] = &[\n+    \"unindent-comments\",\n+    \"collapse-docs\",\n+];\n+\n local_data_key!(pub ctxtkey: @core::DocContext)\n \n enum OutputFormat {\n@@ -61,7 +79,8 @@ pub fn opts() -> ~[groups::OptGroup] {\n         optmulti(\"L\", \"library-path\", \"directory to add to crate search path\",\n                  \"DIR\"),\n         optmulti(\"\", \"plugin-path\", \"directory to load plugins from\", \"DIR\"),\n-        optmulti(\"\", \"passes\", \"space separated list of passes to also run\",\n+        optmulti(\"\", \"passes\", \"space separated list of passes to also run, a \\\n+                                value of `list` will print available passes\",\n                  \"PASSES\"),\n         optmulti(\"\", \"plugins\", \"space separated list of plugins to also load\",\n                  \"PLUGINS\"),\n@@ -86,6 +105,22 @@ pub fn main_args(args: &[~str]) -> int {\n         return 0;\n     }\n \n+    let mut default_passes = !matches.opt_present(\"nodefaults\");\n+    let mut passes = matches.opt_strs(\"passes\");\n+    let mut plugins = matches.opt_strs(\"plugins\");\n+\n+    if passes == ~[~\"list\"] {\n+        println(\"Available passes for running rustdoc:\");\n+        for &(name, _, description) in PASSES.iter() {\n+            println!(\"{:>20s} - {}\", name, description);\n+        }\n+        println(\"\\nDefault passes for rustdoc:\");\n+        for &name in DEFAULT_PASSES.iter() {\n+            println!(\"{:>20s}\", name);\n+        }\n+        return;\n+    }\n+\n     let (format, cratefile) = match matches.free.clone() {\n         [~\"json\", crate] => (JSON, crate),\n         [~\"html\", crate] => (HTML, crate),\n@@ -118,9 +153,6 @@ pub fn main_args(args: &[~str]) -> int {\n \n     // Process all of the crate attributes, extracting plugin metadata along\n     // with the passes which we are supposed to run.\n-    let mut default_passes = !matches.opt_present(\"nodefaults\");\n-    let mut passes = matches.opt_strs(\"passes\");\n-    let mut plugins = matches.opt_strs(\"plugins\");\n     match crate.module.get_ref().doc_list() {\n         Some(nested) => {\n             for inner in nested.iter() {\n@@ -145,19 +177,20 @@ pub fn main_args(args: &[~str]) -> int {\n         None => {}\n     }\n     if default_passes {\n-        passes.unshift(~\"collapse-docs\");\n-        passes.unshift(~\"unindent-comments\");\n+        for name in DEFAULT_PASSES.rev_iter() {\n+            passes.unshift(name.to_owned());\n+        }\n     }\n \n     // Load all plugins/passes into a PluginManager\n     let mut pm = plugins::PluginManager::new(Path(\"/tmp/rustdoc_ng/plugins\"));\n     for pass in passes.iter() {\n-        let plugin = match pass.as_slice() {\n-            \"strip-hidden\" => passes::strip_hidden,\n-            \"unindent-comments\" => passes::unindent_comments,\n-            \"collapse-docs\" => passes::collapse_docs,\n-            \"collapse-privacy\" => passes::collapse_privacy,\n-            s => { error!(\"unknown pass %s, skipping\", s); loop },\n+        let plugin = match PASSES.iter().position(|&(p, _, _)| p == *pass) {\n+            Some(i) => PASSES[i].n1(),\n+            None => {\n+                error2!(\"unknown pass {}, skipping\", *pass);\n+                loop\n+            },\n         };\n         pm.add_plugin(plugin);\n     }"}]}