{"sha": "1f20966e90cd964842054c284fb0ec5e8de6df7b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmMjA5NjZlOTBjZDk2NDg0MjA1NGMyODRmYjBlYzVlOGRlNmRmN2I=", "commit": {"author": {"name": "hamidreza kalbasi", "email": "hamidrezakalbasi@protonmail.com", "date": "2021-05-11T04:20:43Z"}, "committer": {"name": "hamidreza kalbasi", "email": "hamidrezakalbasi@protonmail.com", "date": "2021-05-11T04:20:43Z"}, "message": "Fix CI problems", "tree": {"sha": "b51705695b014fc5413fb428f5ec865793d52fc1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b51705695b014fc5413fb428f5ec865793d52fc1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f20966e90cd964842054c284fb0ec5e8de6df7b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f20966e90cd964842054c284fb0ec5e8de6df7b", "html_url": "https://github.com/rust-lang/rust/commit/1f20966e90cd964842054c284fb0ec5e8de6df7b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f20966e90cd964842054c284fb0ec5e8de6df7b/comments", "author": {"login": "HKalbasi", "id": 45197576, "node_id": "MDQ6VXNlcjQ1MTk3NTc2", "avatar_url": "https://avatars.githubusercontent.com/u/45197576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HKalbasi", "html_url": "https://github.com/HKalbasi", "followers_url": "https://api.github.com/users/HKalbasi/followers", "following_url": "https://api.github.com/users/HKalbasi/following{/other_user}", "gists_url": "https://api.github.com/users/HKalbasi/gists{/gist_id}", "starred_url": "https://api.github.com/users/HKalbasi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HKalbasi/subscriptions", "organizations_url": "https://api.github.com/users/HKalbasi/orgs", "repos_url": "https://api.github.com/users/HKalbasi/repos", "events_url": "https://api.github.com/users/HKalbasi/events{/privacy}", "received_events_url": "https://api.github.com/users/HKalbasi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "HKalbasi", "id": 45197576, "node_id": "MDQ6VXNlcjQ1MTk3NTc2", "avatar_url": "https://avatars.githubusercontent.com/u/45197576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HKalbasi", "html_url": "https://github.com/HKalbasi", "followers_url": "https://api.github.com/users/HKalbasi/followers", "following_url": "https://api.github.com/users/HKalbasi/following{/other_user}", "gists_url": "https://api.github.com/users/HKalbasi/gists{/gist_id}", "starred_url": "https://api.github.com/users/HKalbasi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HKalbasi/subscriptions", "organizations_url": "https://api.github.com/users/HKalbasi/orgs", "repos_url": "https://api.github.com/users/HKalbasi/repos", "events_url": "https://api.github.com/users/HKalbasi/events{/privacy}", "received_events_url": "https://api.github.com/users/HKalbasi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f5585ac00af80c55467135b9437c871445179a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f5585ac00af80c55467135b9437c871445179a5", "html_url": "https://github.com/rust-lang/rust/commit/8f5585ac00af80c55467135b9437c871445179a5"}], "stats": {"total": 84, "additions": 40, "deletions": 44}, "files": [{"sha": "1e2714a2c1b2b9f00b1e07f85740a9f0c7909ea6", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/mutability_errors.rs", "status": "modified", "additions": 37, "deletions": 41, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/1f20966e90cd964842054c284fb0ec5e8de6df7b/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f20966e90cd964842054c284fb0ec5e8de6df7b/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs?ref=1f20966e90cd964842054c284fb0ec5e8de6df7b", "patch": "@@ -515,68 +515,64 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n \n         err.buffer(&mut self.errors_buffer);\n     }\n-    \n+\n     /// User cannot make signature of a trait mutable without changing the\n     /// trait. So we find if this error belongs to a trait and if so we move\n-    /// suggestion to the trait or disable it if it is out of scope of this crate                            \n+    /// suggestion to the trait or disable it if it is out of scope of this crate\n     fn is_error_in_trait(&self, local: Local) -> (bool, Option<Span>) {\n         if self.body.local_kind(local) != LocalKind::Arg {\n             return (false, None);\n         }\n         let hir_map = self.infcx.tcx.hir();\n         let my_def = self.body.source.def_id();\n         let my_hir = hir_map.local_def_id_to_hir_id(my_def.as_local().unwrap());\n-        let td = if let Some(a) = self.infcx.tcx.impl_of_method(my_def).and_then(|x| {\n-            self.infcx.tcx.trait_id_of_impl(x)\n-        }) {\n+        let td = if let Some(a) =\n+            self.infcx.tcx.impl_of_method(my_def).and_then(|x| self.infcx.tcx.trait_id_of_impl(x))\n+        {\n             a\n         } else {\n             return (false, None);\n         };\n-        (true, td.as_local().and_then(|tld| {\n-            let h = hir_map.local_def_id_to_hir_id(tld);\n-            match hir_map.find(h) {\n-                Some(Node::Item(hir::Item {\n-                    kind: hir::ItemKind::Trait(\n-                        _, _, _, _,\n-                        items\n-                    ),\n-                    ..\n-                })) => {\n-                    let mut f_in_trait_opt = None;\n-                    for hir::TraitItemRef { id: fi, kind: k, .. } in *items {\n-                        let hi = fi.hir_id();\n-                        if !matches!(k, hir::AssocItemKind::Fn { .. }) {\n-                            continue;\n-                        }\n-                        if hir_map.name(hi) != hir_map.name(my_hir) {\n-                            continue;\n+        (\n+            true,\n+            td.as_local().and_then(|tld| {\n+                let h = hir_map.local_def_id_to_hir_id(tld);\n+                match hir_map.find(h) {\n+                    Some(Node::Item(hir::Item {\n+                        kind: hir::ItemKind::Trait(_, _, _, _, items),\n+                        ..\n+                    })) => {\n+                        let mut f_in_trait_opt = None;\n+                        for hir::TraitItemRef { id: fi, kind: k, .. } in *items {\n+                            let hi = fi.hir_id();\n+                            if !matches!(k, hir::AssocItemKind::Fn { .. }) {\n+                                continue;\n+                            }\n+                            if hir_map.name(hi) != hir_map.name(my_hir) {\n+                                continue;\n+                            }\n+                            f_in_trait_opt = Some(hi);\n+                            break;\n                         }\n-                        f_in_trait_opt = Some(hi);\n-                        break;\n-                    }\n-                    f_in_trait_opt.and_then(|f_in_trait| {\n-                        match hir_map.find(f_in_trait) {\n+                        f_in_trait_opt.and_then(|f_in_trait| match hir_map.find(f_in_trait) {\n                             Some(Node::TraitItem(hir::TraitItem {\n-                                kind: hir::TraitItemKind::Fn(hir::FnSig {\n-                                    decl: hir::FnDecl {\n-                                        inputs,\n-                                        ..\n-                                    },\n-                                    ..\n-                                }, _),\n+                                kind:\n+                                    hir::TraitItemKind::Fn(\n+                                        hir::FnSig { decl: hir::FnDecl { inputs, .. }, .. },\n+                                        _,\n+                                    ),\n                                 ..\n                             })) => {\n                                 let hir::Ty { span, .. } = inputs[local.index() - 1];\n                                 Some(span)\n-                            },\n+                            }\n                             _ => None,\n-                        }\n-                    })\n+                        })\n+                    }\n+                    _ => None,\n                 }\n-                _ => None\n-            }\n-        }))\n+            }),\n+        )\n     }\n \n     // point to span of upvar making closure call require mutable borrow"}, {"sha": "0acb7b1bf2b787439d6852e48c96bf729dad7e41", "filename": "src/test/ui/suggestions/issue-68049-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f20966e90cd964842054c284fb0ec5e8de6df7b/src%2Ftest%2Fui%2Fsuggestions%2Fissue-68049-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f20966e90cd964842054c284fb0ec5e8de6df7b/src%2Ftest%2Fui%2Fsuggestions%2Fissue-68049-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-68049-1.rs?ref=1f20966e90cd964842054c284fb0ec5e8de6df7b", "patch": "@@ -4,7 +4,7 @@ struct Test(u32);\n \n unsafe impl GlobalAlloc for Test {\n     unsafe fn alloc(&self, _layout: Layout) -> *mut u8 {\n-        self.0 += 1;\n+        self.0 += 1; //~ ERROR cannot assign\n         0 as *mut u8\n     }\n "}, {"sha": "1c3430c14e9f23f101c8cfd41c650da81eab6f07", "filename": "src/test/ui/suggestions/issue-68049-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f20966e90cd964842054c284fb0ec5e8de6df7b/src%2Ftest%2Fui%2Fsuggestions%2Fissue-68049-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f20966e90cd964842054c284fb0ec5e8de6df7b/src%2Ftest%2Fui%2Fsuggestions%2Fissue-68049-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-68049-2.rs?ref=1f20966e90cd964842054c284fb0ec5e8de6df7b", "patch": "@@ -6,15 +6,15 @@ struct Test1(i32);\n \n impl Hello for Test1 {\n   fn example(&self, input: &i32) { // should not suggest here\n-      *input = self.0;\n+      *input = self.0; //~ ERROR cannot assign\n   }\n }\n \n struct Test2(i32);\n \n impl Hello for Test2 {\n   fn example(&self, input: &i32) { // should not suggest here\n-    self.0 += *input;\n+    self.0 += *input; //~ ERROR cannot assign\n   }\n }\n "}]}