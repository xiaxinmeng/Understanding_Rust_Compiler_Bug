{"sha": "ed1bbbb5458b9ee2fbcf7a41b9aeb3203ebca807", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkMWJiYmI1NDU4YjllZTJmYmNmN2E0MWI5YWViMzIwM2ViY2E4MDc=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-05-28T15:06:01Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-06-01T17:28:48Z"}, "message": "rustc: remove Res::Upvar.", "tree": {"sha": "48b4f74bf4af4632de5d6f9a870d777fa3f61893", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48b4f74bf4af4632de5d6f9a870d777fa3f61893"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed1bbbb5458b9ee2fbcf7a41b9aeb3203ebca807", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed1bbbb5458b9ee2fbcf7a41b9aeb3203ebca807", "html_url": "https://github.com/rust-lang/rust/commit/ed1bbbb5458b9ee2fbcf7a41b9aeb3203ebca807", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed1bbbb5458b9ee2fbcf7a41b9aeb3203ebca807/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "340b91e2ffdd884be5c260144305b518e5a22a9b", "url": "https://api.github.com/repos/rust-lang/rust/commits/340b91e2ffdd884be5c260144305b518e5a22a9b", "html_url": "https://github.com/rust-lang/rust/commit/340b91e2ffdd884be5c260144305b518e5a22a9b"}], "stats": {"total": 145, "additions": 61, "deletions": 84}, "files": [{"sha": "131a910bebb1aac2832ceb02cda38540e6c85225", "filename": "src/librustc/hir/def.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed1bbbb5458b9ee2fbcf7a41b9aeb3203ebca807/src%2Flibrustc%2Fhir%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed1bbbb5458b9ee2fbcf7a41b9aeb3203ebca807/src%2Flibrustc%2Fhir%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef.rs?ref=ed1bbbb5458b9ee2fbcf7a41b9aeb3203ebca807", "patch": "@@ -139,7 +139,6 @@ pub enum Res<Id = hir::HirId> {\n     // Value namespace\n     SelfCtor(DefId /* impl */),  // `DefId` refers to the impl\n     Local(Id),\n-    Upvar(Id),\n \n     // Macro namespace\n     NonMacroAttr(NonMacroAttrKind), // e.g., `#[inline]` or `#[rustfmt::skip]`\n@@ -345,7 +344,6 @@ impl<Id> Res<Id> {\n             Res::Def(_, id) => Some(id),\n \n             Res::Local(..) |\n-            Res::Upvar(..) |\n             Res::PrimTy(..) |\n             Res::SelfTy(..) |\n             Res::SelfCtor(..) |\n@@ -372,7 +370,6 @@ impl<Id> Res<Id> {\n             Res::SelfCtor(..) => \"self constructor\",\n             Res::PrimTy(..) => \"builtin type\",\n             Res::Local(..) => \"local variable\",\n-            Res::Upvar(..) => \"closure capture\",\n             Res::SelfTy(..) => \"self type\",\n             Res::ToolMod => \"tool module\",\n             Res::NonMacroAttr(attr_kind) => attr_kind.descr(),\n@@ -395,7 +392,6 @@ impl<Id> Res<Id> {\n             Res::SelfCtor(id) => Res::SelfCtor(id),\n             Res::PrimTy(id) => Res::PrimTy(id),\n             Res::Local(id) => Res::Local(map(id)),\n-            Res::Upvar(id) => Res::Upvar(map(id)),\n             Res::SelfTy(a, b) => Res::SelfTy(a, b),\n             Res::ToolMod => Res::ToolMod,\n             Res::NonMacroAttr(attr_kind) => Res::NonMacroAttr(attr_kind),"}, {"sha": "fa62ab15a9762b45f0a7b6e01834f9f50a2f03c3", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ed1bbbb5458b9ee2fbcf7a41b9aeb3203ebca807/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed1bbbb5458b9ee2fbcf7a41b9aeb3203ebca807/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=ed1bbbb5458b9ee2fbcf7a41b9aeb3203ebca807", "patch": "@@ -1409,7 +1409,6 @@ impl Expr {\n             ExprKind::Path(QPath::Resolved(_, ref path)) => {\n                 match path.res {\n                     Res::Local(..)\n-                    | Res::Upvar(..)\n                     | Res::Def(DefKind::Static, _)\n                     | Res::Err => true,\n                     _ => false,"}, {"sha": "04f5b35a0061aa4141ca4dca059fe84ce205cec4", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed1bbbb5458b9ee2fbcf7a41b9aeb3203ebca807/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed1bbbb5458b9ee2fbcf7a41b9aeb3203ebca807/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=ed1bbbb5458b9ee2fbcf7a41b9aeb3203ebca807", "patch": "@@ -78,7 +78,7 @@ impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n             }\n             _ if self.in_pat => {},\n             Res::PrimTy(..) | Res::SelfTy(..) | Res::SelfCtor(..) |\n-            Res::Local(..) | Res::Upvar(..) => {}\n+            Res::Local(..) => {}\n             Res::Def(DefKind::Ctor(CtorOf::Variant, ..), ctor_def_id) => {\n                 let variant_id = self.tcx.parent(ctor_def_id).unwrap();\n                 let enum_id = self.tcx.parent(variant_id).unwrap();"}, {"sha": "34cea2d75eaa81e556725834d5931aa8820f166a", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ed1bbbb5458b9ee2fbcf7a41b9aeb3203ebca807/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed1bbbb5458b9ee2fbcf7a41b9aeb3203ebca807/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=ed1bbbb5458b9ee2fbcf7a41b9aeb3203ebca807", "patch": "@@ -968,14 +968,9 @@ impl<'a, 'gcx, 'tcx> ExprUseVisitor<'a, 'gcx, 'tcx> {\n                         var_id: hir::HirId)\n                         -> mc::McResult<mc::cmt_<'tcx>> {\n         // Create the cmt for the variable being borrowed, from the\n-        // caller's perspective\n-        let res = if self.mc.upvars.map_or(false, |upvars| upvars.contains_key(&var_id)) {\n-            Res::Upvar(var_id)\n-        } else {\n-            Res::Local(var_id)\n-        };\n+        // perspective of the creator (parent) of the closure.\n         let var_ty = self.mc.node_ty(var_id)?;\n-        self.mc.cat_res(closure_hir_id, closure_span, var_ty, res)\n+        self.mc.cat_res(closure_hir_id, closure_span, var_ty, Res::Local(var_id))\n     }\n }\n "}, {"sha": "45b4fb56056954ca1fc4fe790ab72f0a074c7882", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 22, "deletions": 11, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/ed1bbbb5458b9ee2fbcf7a41b9aeb3203ebca807/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed1bbbb5458b9ee2fbcf7a41b9aeb3203ebca807/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=ed1bbbb5458b9ee2fbcf7a41b9aeb3203ebca807", "patch": "@@ -474,8 +474,11 @@ fn visit_expr<'a, 'tcx>(ir: &mut IrMaps<'a, 'tcx>, expr: &'tcx Expr) {\n       // live nodes required for uses or definitions of variables:\n       hir::ExprKind::Path(hir::QPath::Resolved(_, ref path)) => {\n         debug!(\"expr {}: path that leads to {:?}\", expr.hir_id, path.res);\n-        if let Res::Local(..) = path.res {\n-            ir.add_live_node_for_node(expr.hir_id, ExprNode(expr.span));\n+        if let Res::Local(var_hir_id) = path.res {\n+            let upvars = ir.tcx.upvars(ir.body_owner);\n+            if !upvars.map_or(false, |upvars| upvars.contains_key(&var_hir_id)) {\n+                ir.add_live_node_for_node(expr.hir_id, ExprNode(expr.span));\n+            }\n         }\n         intravisit::walk_expr(ir, expr);\n       }\n@@ -1338,8 +1341,13 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n                    -> LiveNode {\n         match path.res {\n             Res::Local(hid) => {\n-              let nid = self.ir.tcx.hir().hir_to_node_id(hid);\n-              self.access_var(hir_id, nid, succ, acc, path.span)\n+                let upvars = self.ir.tcx.upvars(self.ir.body_owner);\n+                if !upvars.map_or(false, |upvars| upvars.contains_key(&hid)) {\n+                    let nid = self.ir.tcx.hir().hir_to_node_id(hid);\n+                    self.access_var(hir_id, nid, succ, acc, path.span)\n+                } else {\n+                    succ\n+                }\n             }\n             _ => succ\n         }\n@@ -1531,13 +1539,16 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n         match expr.node {\n             hir::ExprKind::Path(hir::QPath::Resolved(_, ref path)) => {\n                 if let Res::Local(var_hid) = path.res {\n-                    // Assignment to an immutable variable or argument: only legal\n-                    // if there is no later assignment. If this local is actually\n-                    // mutable, then check for a reassignment to flag the mutability\n-                    // as being used.\n-                    let ln = self.live_node(expr.hir_id, expr.span);\n-                    let var = self.variable(var_hid, expr.span);\n-                    self.warn_about_dead_assign(expr.span, expr.hir_id, ln, var);\n+                    let upvars = self.ir.tcx.upvars(self.ir.body_owner);\n+                    if !upvars.map_or(false, |upvars| upvars.contains_key(&var_hid)) {\n+                        // Assignment to an immutable variable or argument: only legal\n+                        // if there is no later assignment. If this local is actually\n+                        // mutable, then check for a reassignment to flag the mutability\n+                        // as being used.\n+                        let ln = self.live_node(expr.hir_id, expr.span);\n+                        let var = self.variable(var_hid, expr.span);\n+                        self.warn_about_dead_assign(expr.span, expr.hir_id, ln, var);\n+                    }\n                 }\n             }\n             _ => {"}, {"sha": "7011948148d84789a03d58ea8ba7f3f21f508a13", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/ed1bbbb5458b9ee2fbcf7a41b9aeb3203ebca807/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed1bbbb5458b9ee2fbcf7a41b9aeb3203ebca807/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=ed1bbbb5458b9ee2fbcf7a41b9aeb3203ebca807", "patch": "@@ -746,23 +746,20 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n                 })\n             }\n \n-            Res::Upvar(var_id) => {\n-                assert!(self.upvars.map_or(false, |upvars| upvars.contains_key(&var_id)));\n-                let var_nid = self.tcx.hir().hir_to_node_id(var_id);\n-                self.cat_upvar(hir_id, span, var_nid)\n-            }\n-\n             Res::Local(var_id) => {\n-                assert!(!self.upvars.map_or(false, |upvars| upvars.contains_key(&var_id)));\n                 let var_nid = self.tcx.hir().hir_to_node_id(var_id);\n-                Ok(cmt_ {\n-                    hir_id,\n-                    span,\n-                    cat: Categorization::Local(var_id),\n-                    mutbl: MutabilityCategory::from_local(self.tcx, self.tables, var_nid),\n-                    ty: expr_ty,\n-                    note: NoteNone\n-                })\n+                if self.upvars.map_or(false, |upvars| upvars.contains_key(&var_id)) {\n+                    self.cat_upvar(hir_id, span, var_nid)\n+                } else {\n+                    Ok(cmt_ {\n+                        hir_id,\n+                        span,\n+                        cat: Categorization::Local(var_id),\n+                        mutbl: MutabilityCategory::from_local(self.tcx, self.tables, var_nid),\n+                        ty: expr_ty,\n+                        note: NoteNone\n+                    })\n+                }\n             }\n \n             def => span_bug!(span, \"unexpected definition in memory categorization: {:?}\", def)"}, {"sha": "45e1d983511c0d151c6b4bcf1b7e51ca55348101", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed1bbbb5458b9ee2fbcf7a41b9aeb3203ebca807/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed1bbbb5458b9ee2fbcf7a41b9aeb3203ebca807/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=ed1bbbb5458b9ee2fbcf7a41b9aeb3203ebca807", "patch": "@@ -104,7 +104,7 @@ impl<'a, 'tcx> Visitor<'tcx> for ReachableContext<'a, 'tcx> {\n         };\n \n         match res {\n-            Some(Res::Local(hir_id)) | Some(Res::Upvar(hir_id, ..)) => {\n+            Some(Res::Local(hir_id)) => {\n                 self.reachable_symbols.insert(hir_id);\n             }\n             Some(res) => {"}, {"sha": "5a6b6a74830521a18aaba758b6485451962667b7", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ed1bbbb5458b9ee2fbcf7a41b9aeb3203ebca807/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed1bbbb5458b9ee2fbcf7a41b9aeb3203ebca807/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=ed1bbbb5458b9ee2fbcf7a41b9aeb3203ebca807", "patch": "@@ -960,18 +960,7 @@ fn convert_path_expr<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n \n         Res::Def(DefKind::Static, id) => ExprKind::StaticRef { id },\n \n-        Res::Local(var_hir_id) => {\n-            assert!(!cx.tables().upvar_list.get(&cx.body_owner)\n-                .map_or(false, |upvars| upvars.contains_key(&var_hir_id)));\n-\n-            convert_var(cx, expr, var_hir_id)\n-        }\n-        Res::Upvar(var_hir_id) => {\n-            assert!(cx.tables().upvar_list.get(&cx.body_owner)\n-                .map_or(false, |upvars| upvars.contains_key(&var_hir_id)));\n-\n-            convert_var(cx, expr, var_hir_id)\n-        }\n+        Res::Local(var_hir_id) => convert_var(cx, expr, var_hir_id),\n \n         _ => span_bug!(expr.span, \"res `{:?}` not yet implemented\", res),\n     }"}, {"sha": "ff54643989ba013afe66459d09efa28b9a2261a3", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 14, "deletions": 21, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/ed1bbbb5458b9ee2fbcf7a41b9aeb3203ebca807/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed1bbbb5458b9ee2fbcf7a41b9aeb3203ebca807/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=ed1bbbb5458b9ee2fbcf7a41b9aeb3203ebca807", "patch": "@@ -612,7 +612,6 @@ impl<'a> PathSource<'a> {\n                 | Res::Def(DefKind::Const, _)\n                 | Res::Def(DefKind::Static, _)\n                 | Res::Local(..)\n-                | Res::Upvar(..)\n                 | Res::Def(DefKind::Fn, _)\n                 | Res::Def(DefKind::Method, _)\n                 | Res::Def(DefKind::AssocConst, _)\n@@ -2204,7 +2203,7 @@ impl<'a> Resolver<'a> {\n             if let Some(res) = self.ribs[ns][i].bindings.get(&ident).cloned() {\n                 // The ident resolves to a type parameter or local variable.\n                 return Some(LexicalScopeBinding::Res(\n-                    self.adjust_local_res(ns, i, res, record_used, path_span)\n+                    self.validate_res_from_ribs(ns, i, res, record_used, path_span),\n                 ));\n             }\n \n@@ -4006,14 +4005,16 @@ impl<'a> Resolver<'a> {\n             diag);\n     }\n \n-    // Resolve a local definition, potentially adjusting for closures.\n-    fn adjust_local_res(&mut self,\n-                        ns: Namespace,\n-                        rib_index: usize,\n-                        mut res: Res,\n-                        record_used: bool,\n-                        span: Span) -> Res {\n-        debug!(\"adjust_local_res\");\n+    // Validate a local resolution (from ribs), potentially recording closure upvars.\n+    fn validate_res_from_ribs(\n+        &mut self,\n+        ns: Namespace,\n+        rib_index: usize,\n+        res: Res,\n+        record_used: bool,\n+        span: Span,\n+    ) -> Res {\n+        debug!(\"validate_res_from_ribs({:?})\", res);\n         let ribs = &self.ribs[ns][rib_index + 1..];\n \n         // An invalid forward use of a type parameter from a previous default.\n@@ -4035,9 +4036,6 @@ impl<'a> Resolver<'a> {\n         }\n \n         match res {\n-            Res::Upvar(..) => {\n-                span_bug!(span, \"unexpected {:?} in bindings\", res)\n-            }\n             Res::Local(var_id) => {\n                 use ResolutionError::*;\n                 let mut res_err = None;\n@@ -4049,14 +4047,9 @@ impl<'a> Resolver<'a> {\n                             // Nothing to do. Continue.\n                         }\n                         ClosureRibKind(function_id) => {\n-                            res = Res::Upvar(var_id);\n-                            match self.upvars.entry(function_id).or_default().entry(var_id) {\n-                                indexmap::map::Entry::Occupied(_) => continue,\n-                                indexmap::map::Entry::Vacant(entry) => {\n-                                    if record_used {\n-                                        entry.insert(Upvar { span });\n-                                    }\n-                                }\n+                            if record_used {\n+                                self.upvars.entry(function_id).or_default()\n+                                    .entry(var_id).or_insert(Upvar { span });\n                             }\n                         }\n                         ItemRibKind | FnItemRibKind | AssocItemRibKind => {"}, {"sha": "cca5682d90a9bc6abe35e059048d8b33070293d4", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed1bbbb5458b9ee2fbcf7a41b9aeb3203ebca807/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed1bbbb5458b9ee2fbcf7a41b9aeb3203ebca807/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=ed1bbbb5458b9ee2fbcf7a41b9aeb3203ebca807", "patch": "@@ -702,7 +702,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n         let span = self.span_from_span(span);\n \n         match res {\n-            Res::Upvar(id, ..) | Res::Local(id) => {\n+            Res::Local(id) => {\n                 Some(Ref {\n                     kind: RefKind::Variable,\n                     span,"}, {"sha": "a6cd157dc03de0f967c484e496d762bbef9e12a7", "filename": "src/librustc_typeck/check/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed1bbbb5458b9ee2fbcf7a41b9aeb3203ebca807/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed1bbbb5458b9ee2fbcf7a41b9aeb3203ebca807/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs?ref=ed1bbbb5458b9ee2fbcf7a41b9aeb3203ebca807", "patch": "@@ -350,7 +350,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n                     let def_span = match def {\n                         Res::Err => None,\n-                        Res::Local(id) | Res::Upvar(id, ..) => {\n+                        Res::Local(id) => {\n                             Some(self.tcx.hir().span_by_hir_id(id))\n                         },\n                         _ => def"}, {"sha": "82d198f0b78f78cc7c0b91b357456b563a3d8c1d", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ed1bbbb5458b9ee2fbcf7a41b9aeb3203ebca807/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed1bbbb5458b9ee2fbcf7a41b9aeb3203ebca807/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=ed1bbbb5458b9ee2fbcf7a41b9aeb3203ebca807", "patch": "@@ -5264,7 +5264,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             Err(ErrorReported) => return (tcx.types.err, res),\n         };\n         let path_segs = match res {\n-            Res::Local(_) | Res::Upvar(..) => Vec::new(),\n+            Res::Local(_) => vec![],\n             Res::Def(kind, def_id) =>\n                 AstConv::def_ids_for_value_path_segments(self, segments, self_ty, kind, def_id),\n             _ => bug!(\"instantiate_value_path on {:?}\", res),\n@@ -5325,14 +5325,11 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             }\n         }));\n \n-        match res {\n-            Res::Local(hid) | Res::Upvar(hid, ..) => {\n-                let ty = self.local_ty(span, hid).decl_ty;\n-                let ty = self.normalize_associated_types_in(span, &ty);\n-                self.write_ty(hir_id, ty);\n-                return (ty, res);\n-            }\n-            _ => {}\n+        if let Res::Local(hid) = res {\n+            let ty = self.local_ty(span, hid).decl_ty;\n+            let ty = self.normalize_associated_types_in(span, &ty);\n+            self.write_ty(hir_id, ty);\n+            return (ty, res);\n         }\n \n         if generics_has_err {"}]}