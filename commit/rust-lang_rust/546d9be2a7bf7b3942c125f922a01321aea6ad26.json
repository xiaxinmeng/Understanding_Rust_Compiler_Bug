{"sha": "546d9be2a7bf7b3942c125f922a01321aea6ad26", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0NmQ5YmUyYTdiZjdiMzk0MmMxMjVmOTIyYTAxMzIxYWVhNmFkMjY=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-04-14T22:21:12Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-04-14T22:21:12Z"}, "message": "Merge #1146\n\n1146: Moar profiling r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "7323905a2e0efe7fefb029c8d049987df6a6462f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7323905a2e0efe7fefb029c8d049987df6a6462f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/546d9be2a7bf7b3942c125f922a01321aea6ad26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/546d9be2a7bf7b3942c125f922a01321aea6ad26", "html_url": "https://github.com/rust-lang/rust/commit/546d9be2a7bf7b3942c125f922a01321aea6ad26", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/546d9be2a7bf7b3942c125f922a01321aea6ad26/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "e1a2649aff0a9387fb14646a56cb652061bc42ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1a2649aff0a9387fb14646a56cb652061bc42ec", "html_url": "https://github.com/rust-lang/rust/commit/e1a2649aff0a9387fb14646a56cb652061bc42ec"}, {"sha": "247ac265f1e7f2d812e6f9174d48ceef45465b91", "url": "https://api.github.com/repos/rust-lang/rust/commits/247ac265f1e7f2d812e6f9174d48ceef45465b91", "html_url": "https://github.com/rust-lang/rust/commit/247ac265f1e7f2d812e6f9174d48ceef45465b91"}], "stats": {"total": 133, "additions": 91, "deletions": 42}, "files": [{"sha": "779580762b27150bf70b0e7f0d7ff5122c298c5d", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/546d9be2a7bf7b3942c125f922a01321aea6ad26/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/546d9be2a7bf7b3942c125f922a01321aea6ad26/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=546d9be2a7bf7b3942c125f922a01321aea6ad26", "patch": "@@ -996,6 +996,7 @@ dependencies = [\n  \"ra_db 0.1.0\",\n  \"ra_fmt 0.1.0\",\n  \"ra_hir 0.1.0\",\n+ \"ra_prof 0.1.0\",\n  \"ra_syntax 0.1.0\",\n  \"ra_text_edit 0.1.0\",\n  \"rayon 1.0.3 (registry+https://github.com/rust-lang/crates.io-index)\","}, {"sha": "333706c1a425a3a92275046f3430dc99b338c9de", "filename": "crates/ra_ide_api/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/546d9be2a7bf7b3942c125f922a01321aea6ad26/crates%2Fra_ide_api%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/546d9be2a7bf7b3942c125f922a01321aea6ad26/crates%2Fra_ide_api%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2FCargo.toml?ref=546d9be2a7bf7b3942c125f922a01321aea6ad26", "patch": "@@ -23,6 +23,7 @@ ra_syntax = { path = \"../ra_syntax\" }\n ra_text_edit = { path = \"../ra_text_edit\" }\n ra_db = { path = \"../ra_db\" }\n ra_fmt = { path = \"../ra_fmt\" }\n+ra_prof = { path = \"../ra_prof\" }\n hir = { path = \"../ra_hir\", package = \"ra_hir\" }\n test_utils = { path = \"../test_utils\" }\n ra_assists = { path = \"../ra_assists\" }"}, {"sha": "5bfdbe7e91ae151de94d2783343683f9fb611f0d", "filename": "crates/ra_ide_api/src/change.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/546d9be2a7bf7b3942c125f922a01321aea6ad26/crates%2Fra_ide_api%2Fsrc%2Fchange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/546d9be2a7bf7b3942c125f922a01321aea6ad26/crates%2Fra_ide_api%2Fsrc%2Fchange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fchange.rs?ref=546d9be2a7bf7b3942c125f922a01321aea6ad26", "patch": "@@ -9,6 +9,7 @@ use ra_db::{\n     salsa::{Database, SweepStrategy},\n };\n use ra_syntax::SourceFile;\n+use ra_prof::profile;\n use relative_path::RelativePathBuf;\n use rayon::prelude::*;\n \n@@ -153,6 +154,7 @@ const GC_COOLDOWN: time::Duration = time::Duration::from_millis(100);\n \n impl RootDatabase {\n     pub(crate) fn apply_change(&mut self, change: AnalysisChange) {\n+        let _p = profile(\"RootDatabase::apply_change\");\n         log::info!(\"apply_change {:?}\", change);\n         if !change.new_roots.is_empty() {\n             let mut local_roots = Vec::clone(&self.local_roots());"}, {"sha": "b0b70df5c88db89f583ea3e2ed9bc80c4b95a2be", "filename": "crates/ra_lsp_server/src/main.rs", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/546d9be2a7bf7b3942c125f922a01321aea6ad26/crates%2Fra_lsp_server%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/546d9be2a7bf7b3942c125f922a01321aea6ad26/crates%2Fra_lsp_server%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain.rs?ref=546d9be2a7bf7b3942c125f922a01321aea6ad26", "patch": "@@ -6,21 +6,16 @@ use ra_lsp_server::{Result, InitializationOptions};\n use ra_prof;\n \n fn main() -> Result<()> {\n-    ::std::env::set_var(\"RUST_BACKTRACE\", \"short\");\n+    std::env::set_var(\"RUST_BACKTRACE\", \"short\");\n     let logger = Logger::with_env_or_str(\"error\").duplicate_to_stderr(Duplicate::All);\n-    match ::std::env::var(\"RA_INTERNAL_MODE\") {\n+    match std::env::var(\"RA_LOG_DIR\") {\n         Ok(ref v) if v == \"1\" => logger.log_to_file().directory(\"log\").start()?,\n         _ => logger.start()?,\n     };\n-    let prof_depth = match ::std::env::var(\"RA_PROFILE_DEPTH\") {\n-        Ok(ref d) => d.parse()?,\n-        _ => 0,\n-    };\n-    let profile_allowed = match ::std::env::var(\"RA_PROFILE\") {\n-        Ok(ref p) => p.split(\";\").map(String::from).collect(),\n-        _ => Vec::new(),\n-    };\n-    ra_prof::set_filter(ra_prof::Filter::new(prof_depth, profile_allowed));\n+    ra_prof::set_filter(match std::env::var(\"RA_PROFILE\") {\n+        Ok(spec) => ra_prof::Filter::from_spec(&spec),\n+        Err(_) => ra_prof::Filter::disabled(),\n+    });\n     log::info!(\"lifecycle: server started\");\n     match ::std::panic::catch_unwind(main_inner) {\n         Ok(res) => {\n@@ -36,7 +31,7 @@ fn main() -> Result<()> {\n \n fn main_inner() -> Result<()> {\n     let (receiver, sender, threads) = stdio_transport();\n-    let cwd = ::std::env::current_dir()?;\n+    let cwd = std::env::current_dir()?;\n     run_server(ra_lsp_server::server_capabilities(), receiver, sender, |params, r, s| {\n         let root = params.root_uri.and_then(|it| it.to_file_path().ok()).unwrap_or(cwd);\n "}, {"sha": "eb8a5354558bf91246a10a021be0ad6675391d79", "filename": "crates/ra_lsp_server/src/main_loop/handlers.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/546d9be2a7bf7b3942c125f922a01321aea6ad26/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/546d9be2a7bf7b3942c125f922a01321aea6ad26/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=546d9be2a7bf7b3942c125f922a01321aea6ad26", "patch": "@@ -12,6 +12,7 @@ use ra_ide_api::{\n     AssistId,\n };\n use ra_syntax::{AstNode, SyntaxKind, TextUnit};\n+use ra_prof::profile;\n use rustc_hash::FxHashMap;\n use serde::{Serialize, Deserialize};\n use serde_json::to_value;\n@@ -328,6 +329,7 @@ pub fn handle_completion(\n     world: ServerWorld,\n     params: req::CompletionParams,\n ) -> Result<Option<req::CompletionResponse>> {\n+    let _p = profile(\"handle_completion\");\n     let position = {\n         let file_id = params.text_document.try_conv_with(&world)?;\n         let line_index = world.analysis().file_line_index(file_id);\n@@ -564,6 +566,7 @@ pub fn handle_code_action(\n     world: ServerWorld,\n     params: req::CodeActionParams,\n ) -> Result<Option<CodeActionResponse>> {\n+    let _p = profile(\"handle_code_action\");\n     let file_id = params.text_document.try_conv_with(&world)?;\n     let line_index = world.analysis().file_line_index(file_id);\n     let range = params.range.conv_with(&line_index);"}, {"sha": "402c719b153462d1d4ec48e0c3c998fffba11ddb", "filename": "crates/ra_prof/src/lib.rs", "status": "modified", "additions": 64, "deletions": 29, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/546d9be2a7bf7b3942c125f922a01321aea6ad26/crates%2Fra_prof%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/546d9be2a7bf7b3942c125f922a01321aea6ad26/crates%2Fra_prof%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_prof%2Fsrc%2Flib.rs?ref=546d9be2a7bf7b3942c125f922a01321aea6ad26", "patch": "@@ -6,7 +6,7 @@ use std::iter::repeat;\n use std::collections::{HashSet};\n use std::default::Default;\n use std::iter::FromIterator;\n-use std::sync::RwLock;\n+use std::sync::{RwLock, atomic::{AtomicBool, Ordering}};\n use lazy_static::lazy_static;\n \n /// Set profiling filter. It specifies descriptions allowed to profile.\n@@ -15,18 +15,20 @@ use lazy_static::lazy_static;\n ///\n /// #Example\n /// ```\n-/// use ra_prof::set_filter;\n-/// use ra_prof::Filter;\n-/// let max_depth = 2;\n-/// let allowed = vec![\"profile1\".to_string(), \"profile2\".to_string()];\n-/// let f = Filter::new( max_depth, allowed );\n+/// use ra_prof::{set_filter, Filter};\n+/// let f = Filter::from_spec(\"profile1|profile2@2\");\n /// set_filter(f);\n /// ```\n-///\n pub fn set_filter(f: Filter) {\n+    PROFILING_ENABLED.store(f.depth > 0, Ordering::SeqCst);\n     let set = HashSet::from_iter(f.allowed.iter().cloned());\n     let mut old = FILTER.write().unwrap();\n-    let filter_data = FilterData { depth: f.depth, allowed: set, version: old.version + 1 };\n+    let filter_data = FilterData {\n+        depth: f.depth,\n+        allowed: set,\n+        longer_than: f.longer_than,\n+        version: old.version + 1,\n+    };\n     *old = filter_data;\n }\n \n@@ -37,12 +39,9 @@ pub fn set_filter(f: Filter) {\n ///\n /// #Example\n /// ```\n-/// use ra_prof::profile;\n-/// use ra_prof::set_filter;\n-/// use ra_prof::Filter;\n+/// use ra_prof::{profile, set_filter, Filter};\n ///\n-/// let allowed = vec![\"profile1\".to_string(), \"profile2\".to_string()];\n-/// let f = Filter::new(2, allowed);\n+/// let f = Filter::from_spec(\"profile1|profile2@2\");\n /// set_filter(f);\n /// profiling_function1();\n ///\n@@ -60,8 +59,12 @@ pub fn set_filter(f: Filter) {\n ///  0ms - profile\n ///      0ms - profile2\n /// ```\n-///\n pub fn profile(desc: &str) -> Profiler {\n+    assert!(!desc.is_empty());\n+    if !PROFILING_ENABLED.load(Ordering::Relaxed) {\n+        return Profiler { desc: None };\n+    }\n+\n     PROFILE_STACK.with(|stack| {\n         let mut stack = stack.borrow_mut();\n         if stack.starts.len() == 0 {\n@@ -74,14 +77,14 @@ pub fn profile(desc: &str) -> Profiler {\n                 Err(_) => (),\n             };\n         }\n-        let desc_str = desc.to_string();\n-        if desc_str.is_empty() {\n-            Profiler { desc: None }\n-        } else if stack.starts.len() < stack.filter_data.depth\n-            && stack.filter_data.allowed.contains(&desc_str)\n-        {\n+\n+        if stack.starts.len() > stack.filter_data.depth {\n+            return Profiler { desc: None };\n+        }\n+\n+        if stack.filter_data.allowed.is_empty() || stack.filter_data.allowed.contains(desc) {\n             stack.starts.push(Instant::now());\n-            Profiler { desc: Some(desc_str) }\n+            Profiler { desc: Some(desc.to_string()) }\n         } else {\n             Profiler { desc: None }\n         }\n@@ -95,11 +98,41 @@ pub struct Profiler {\n pub struct Filter {\n     depth: usize,\n     allowed: Vec<String>,\n+    longer_than: Duration,\n }\n \n impl Filter {\n-    pub fn new(depth: usize, allowed: Vec<String>) -> Filter {\n-        Filter { depth, allowed }\n+    // Filtering syntax\n+    // env RA_PROFILE=*             // dump everything\n+    // env RA_PROFILE=foo|bar|baz   // enabled only selected entries\n+    // env RA_PROFILE=*@3>10        // dump everything, up to depth 3, if it takes more than 10 ms\n+    pub fn from_spec(mut spec: &str) -> Filter {\n+        let longer_than = if let Some(idx) = spec.rfind(\">\") {\n+            let longer_than = spec[idx + 1..].parse().expect(\"invalid profile longer_than\");\n+            spec = &spec[..idx];\n+            Duration::from_millis(longer_than)\n+        } else {\n+            Duration::new(0, 0)\n+        };\n+\n+        let depth = if let Some(idx) = spec.rfind(\"@\") {\n+            let depth: usize = spec[idx + 1..].parse().expect(\"invalid profile depth\");\n+            spec = &spec[..idx];\n+            depth\n+        } else {\n+            999\n+        };\n+        let allowed =\n+            if spec == \"*\" { Vec::new() } else { spec.split(\"|\").map(String::from).collect() };\n+        Filter::new(depth, allowed, longer_than)\n+    }\n+\n+    pub fn disabled() -> Filter {\n+        Filter::new(0, Vec::new(), Duration::new(0, 0))\n+    }\n+\n+    pub fn new(depth: usize, allowed: Vec<String>, longer_than: Duration) -> Filter {\n+        Filter { depth, allowed, longer_than }\n     }\n }\n \n@@ -126,8 +159,11 @@ struct FilterData {\n     depth: usize,\n     version: usize,\n     allowed: HashSet<String>,\n+    longer_than: Duration,\n }\n \n+static PROFILING_ENABLED: AtomicBool = AtomicBool::new(false);\n+\n lazy_static! {\n     static ref FILTER: RwLock<FilterData> = RwLock::new(Default::default());\n }\n@@ -147,7 +183,9 @@ impl Drop for Profiler {\n                     stack.messages.push(Message { level, duration, message });\n                     if level == 0 {\n                         let stdout = stderr();\n-                        print(0, &stack.messages, &mut stdout.lock());\n+                        if duration >= stack.filter_data.longer_than {\n+                            print(0, &stack.messages, &mut stdout.lock());\n+                        }\n                         stack.messages.clear();\n                     }\n                 });\n@@ -174,15 +212,12 @@ fn print(lvl: usize, msgs: &[Message], out: &mut impl Write) {\n \n #[cfg(test)]\n mod tests {\n-\n-    use super::profile;\n-    use super::set_filter;\n-    use super::Filter;\n+    use super::*;\n \n     #[test]\n     fn test_basic_profile() {\n         let s = vec![\"profile1\".to_string(), \"profile2\".to_string()];\n-        let f = Filter::new(2, s);\n+        let f = Filter::new(2, s, Duration::new(0, 0));\n         set_filter(f);\n         profiling_function1();\n     }"}, {"sha": "d34ff96c826dbed59435690a127c7849794a23b0", "filename": "docs/dev/README.md", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/546d9be2a7bf7b3942c125f922a01321aea6ad26/docs%2Fdev%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/546d9be2a7bf7b3942c125f922a01321aea6ad26/docs%2Fdev%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2FREADME.md?ref=546d9be2a7bf7b3942c125f922a01321aea6ad26", "patch": "@@ -105,7 +105,7 @@ figure out where logs go.\n Inside rust-analyzer, we use the standard `log` crate for logging, and\n `flexi_logger` for logging frotend. By default, log goes to stderr (the same as\n with `env_logger`), but the stderr itself is processed by VS Code. To mirror\n-logs to a `./log` directory, set `RA_INTERNAL_MODE=1` environmental variable.\n+logs to a `./log` directory, set `RA_LOG_DIR=1` environmental variable.\n \n To see stderr in the running VS Code instance, go to the \"Output\" tab of the\n panel and select `rust-analyzer`. This shows `eprintln!` as well. Note that\n@@ -135,3 +135,15 @@ There's also two VS Code commands which might be of interest:\n   There's an alias for this: `cargo jinstall-lsp`.\n \n * `Rust Analyzer: Syntax Tree` shows syntax tree of the current file/selection.\n+\n+# Profiling\n+\n+We have a built-in hierarchical profiler, you can enable it by using `RA_PROF` env-var:\n+\n+```\n+RA_PROFILE=*             // dump everything\n+RA_PROFILE=foo|bar|baz   // enabled only selected entries\n+RA_PROFILE=*@3>10        // dump everything, up to depth 3, if it takes more than 10 ms\n+```\n+\n+In particular, I have `export RA_PROFILE='*>10' in my shell profile."}]}