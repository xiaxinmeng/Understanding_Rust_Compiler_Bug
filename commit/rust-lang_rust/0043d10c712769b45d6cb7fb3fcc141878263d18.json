{"sha": "0043d10c712769b45d6cb7fb3fcc141878263d18", "node_id": "C_kwDOAAsO6NoAKDAwNDNkMTBjNzEyNzY5YjQ1ZDZjYjdmYjNmY2MxNDE4NzgyNjNkMTg", "commit": {"author": {"name": "Jean CASPAR", "email": "55629512+JeanCASPAR@users.noreply.github.com", "date": "2022-08-17T14:58:57Z"}, "committer": {"name": "Jean CASPAR", "email": "55629512+JeanCASPAR@users.noreply.github.com", "date": "2022-08-22T17:19:59Z"}, "message": "Migrate ast_lowering::lib and ast_lowering::item to SessionDiagnostic", "tree": {"sha": "c20d7ed3bfd6c24ab4b1a78ff3649b79a06c11c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c20d7ed3bfd6c24ab4b1a78ff3649b79a06c11c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0043d10c712769b45d6cb7fb3fcc141878263d18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0043d10c712769b45d6cb7fb3fcc141878263d18", "html_url": "https://github.com/rust-lang/rust/commit/0043d10c712769b45d6cb7fb3fcc141878263d18", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0043d10c712769b45d6cb7fb3fcc141878263d18/comments", "author": {"login": "JeanCASPAR", "id": 55629512, "node_id": "MDQ6VXNlcjU1NjI5NTEy", "avatar_url": "https://avatars.githubusercontent.com/u/55629512?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JeanCASPAR", "html_url": "https://github.com/JeanCASPAR", "followers_url": "https://api.github.com/users/JeanCASPAR/followers", "following_url": "https://api.github.com/users/JeanCASPAR/following{/other_user}", "gists_url": "https://api.github.com/users/JeanCASPAR/gists{/gist_id}", "starred_url": "https://api.github.com/users/JeanCASPAR/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JeanCASPAR/subscriptions", "organizations_url": "https://api.github.com/users/JeanCASPAR/orgs", "repos_url": "https://api.github.com/users/JeanCASPAR/repos", "events_url": "https://api.github.com/users/JeanCASPAR/events{/privacy}", "received_events_url": "https://api.github.com/users/JeanCASPAR/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JeanCASPAR", "id": 55629512, "node_id": "MDQ6VXNlcjU1NjI5NTEy", "avatar_url": "https://avatars.githubusercontent.com/u/55629512?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JeanCASPAR", "html_url": "https://github.com/JeanCASPAR", "followers_url": "https://api.github.com/users/JeanCASPAR/followers", "following_url": "https://api.github.com/users/JeanCASPAR/following{/other_user}", "gists_url": "https://api.github.com/users/JeanCASPAR/gists{/gist_id}", "starred_url": "https://api.github.com/users/JeanCASPAR/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JeanCASPAR/subscriptions", "organizations_url": "https://api.github.com/users/JeanCASPAR/orgs", "repos_url": "https://api.github.com/users/JeanCASPAR/repos", "events_url": "https://api.github.com/users/JeanCASPAR/events{/privacy}", "received_events_url": "https://api.github.com/users/JeanCASPAR/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73ae38bac10e010aee20fc2f56735fdada86e5dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/73ae38bac10e010aee20fc2f56735fdada86e5dd", "html_url": "https://github.com/rust-lang/rust/commit/73ae38bac10e010aee20fc2f56735fdada86e5dd"}], "stats": {"total": 115, "additions": 83, "deletions": 32}, "files": [{"sha": "c6337ce161d6f51a0bba26c31fcf9938c17e942e", "filename": "compiler/rustc_ast_lowering/src/errors.rs", "status": "modified", "additions": 52, "deletions": 1, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/0043d10c712769b45d6cb7fb3fcc141878263d18/compiler%2Frustc_ast_lowering%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0043d10c712769b45d6cb7fb3fcc141878263d18/compiler%2Frustc_ast_lowering%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Ferrors.rs?ref=0043d10c712769b45d6cb7fb3fcc141878263d18", "patch": "@@ -1,6 +1,6 @@\n use rustc_errors::{fluent, AddSubdiagnostic, Applicability, Diagnostic};\n use rustc_macros::SessionDiagnostic;\n-use rustc_span::Span;\n+use rustc_span::{Span, Symbol};\n \n #[derive(SessionDiagnostic, Clone, Copy)]\n #[error(ast_lowering::generic_type_with_parentheses, code = \"E0214\")]\n@@ -27,3 +27,54 @@ impl AddSubdiagnostic for UseAngleBrackets {\n         );\n     }\n }\n+\n+#[derive(SessionDiagnostic)]\n+#[help]\n+#[error(ast_lowering::invalid_abi, code = \"E0703\")]\n+pub struct InvalidAbi {\n+    #[primary_span]\n+    #[label]\n+    pub span: Span,\n+    pub abi: Symbol,\n+    pub valid_abis: String,\n+}\n+\n+#[derive(SessionDiagnostic, Clone, Copy)]\n+#[error(ast_lowering::assoc_ty_parentheses)]\n+pub struct AssocTyParentheses {\n+    #[primary_span]\n+    pub span: Span,\n+    #[subdiagnostic]\n+    pub sub: AssocTyParenthesesSub,\n+}\n+\n+#[derive(Clone, Copy)]\n+pub enum AssocTyParenthesesSub {\n+    Empty { parentheses_span: Span },\n+    NotEmpty { open_param: Span, close_param: Span },\n+}\n+\n+impl AddSubdiagnostic for AssocTyParenthesesSub {\n+    fn add_to_diagnostic(self, diag: &mut Diagnostic) {\n+        match self {\n+            Self::Empty { parentheses_span } => diag.multipart_suggestion(\n+                fluent::ast_lowering::remove_parentheses,\n+                vec![(parentheses_span, String::new())],\n+                Applicability::MaybeIncorrect,\n+            ),\n+            Self::NotEmpty { open_param, close_param } => diag.multipart_suggestion(\n+                fluent::ast_lowering::use_angle_brackets,\n+                vec![(open_param, String::from(\"<\")), (close_param, String::from(\">\"))],\n+                Applicability::MaybeIncorrect,\n+            ),\n+        };\n+    }\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(ast_lowering::misplaced_impl_trait, code = \"E0562\")]\n+pub struct MisplacedImplTrait {\n+    #[primary_span]\n+    pub span: Span,\n+    pub position: String,\n+}"}, {"sha": "a789268dfdaff5a901558d5da14425b78c25e346", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0043d10c712769b45d6cb7fb3fcc141878263d18/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0043d10c712769b45d6cb7fb3fcc141878263d18/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=0043d10c712769b45d6cb7fb3fcc141878263d18", "patch": "@@ -1,3 +1,4 @@\n+use super::errors::InvalidAbi;\n use super::ResolverAstLoweringExt;\n use super::{AstOwner, ImplTraitContext, ImplTraitPosition};\n use super::{FnDeclKind, LoweringContext, ParamMode};\n@@ -7,7 +8,6 @@ use rustc_ast::visit::AssocCtxt;\n use rustc_ast::*;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sorted_map::SortedMap;\n-use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{LocalDefId, CRATE_DEF_ID};\n@@ -1260,10 +1260,11 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     }\n \n     fn error_on_invalid_abi(&self, abi: StrLit) {\n-        struct_span_err!(self.tcx.sess, abi.span, E0703, \"invalid ABI: found `{}`\", abi.symbol)\n-            .span_label(abi.span, \"invalid ABI\")\n-            .help(&format!(\"valid ABIs: {}\", abi::all_names().join(\", \")))\n-            .emit();\n+        self.tcx.sess.emit_err(InvalidAbi {\n+            span: abi.span,\n+            abi: abi.symbol,\n+            valid_abis: abi::all_names().join(\", \"),\n+        });\n     }\n \n     fn lower_asyncness(&mut self, a: Async) -> hir::IsAsync {"}, {"sha": "a44c3c0d23b9e077481e128e9c4a15ddb68c70d1", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 12, "deletions": 26, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/0043d10c712769b45d6cb7fb3fcc141878263d18/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0043d10c712769b45d6cb7fb3fcc141878263d18/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=0043d10c712769b45d6cb7fb3fcc141878263d18", "patch": "@@ -39,6 +39,8 @@\n #[macro_use]\n extern crate tracing;\n \n+use crate::errors::{AssocTyParentheses, AssocTyParenthesesSub, MisplacedImplTrait};\n+\n use rustc_ast::ptr::P;\n use rustc_ast::visit;\n use rustc_ast::{self as ast, *};\n@@ -49,7 +51,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sorted_map::SortedMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::sync::Lrc;\n-use rustc_errors::{struct_span_err, Applicability, Handler, StashKey};\n+use rustc_errors::{Handler, StashKey};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, LifetimeRes, Namespace, PartialRes, PerNS, Res};\n use rustc_hir::def_id::{LocalDefId, CRATE_DEF_ID};\n@@ -1071,19 +1073,11 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     }\n \n     fn emit_bad_parenthesized_trait_in_assoc_ty(&self, data: &ParenthesizedArgs) {\n-        let mut err = self.tcx.sess.struct_span_err(\n-            data.span,\n-            \"parenthesized generic arguments cannot be used in associated type constraints\",\n-        );\n         // Suggest removing empty parentheses: \"Trait()\" -> \"Trait\"\n-        if data.inputs.is_empty() {\n+        let sub = if data.inputs.is_empty() {\n             let parentheses_span =\n                 data.inputs_span.shrink_to_lo().to(data.inputs_span.shrink_to_hi());\n-            err.multipart_suggestion(\n-                \"remove these parentheses\",\n-                vec![(parentheses_span, String::new())],\n-                Applicability::MaybeIncorrect,\n-            );\n+            AssocTyParenthesesSub::Empty { parentheses_span }\n         }\n         // Suggest replacing parentheses with angle brackets `Trait(params...)` to `Trait<params...>`\n         else {\n@@ -1097,13 +1091,9 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             // End of last argument to end of parameters\n             let close_param =\n                 data.inputs.last().unwrap().span.shrink_to_hi().to(data.inputs_span.shrink_to_hi());\n-            err.multipart_suggestion(\n-                &format!(\"use angle brackets instead\",),\n-                vec![(open_param, String::from(\"<\")), (close_param, String::from(\">\"))],\n-                Applicability::MaybeIncorrect,\n-            );\n-        }\n-        err.emit();\n+            AssocTyParenthesesSub::NotEmpty { open_param, close_param }\n+        };\n+        self.tcx.sess.emit_err(AssocTyParentheses { span: data.span, sub });\n     }\n \n     #[instrument(level = \"debug\", skip(self))]\n@@ -1342,14 +1332,10 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                         path\n                     }\n                     ImplTraitContext::Disallowed(position) => {\n-                        let mut err = struct_span_err!(\n-                            self.tcx.sess,\n-                            t.span,\n-                            E0562,\n-                            \"`impl Trait` only allowed in function and inherent method return types, not in {}\",\n-                            position\n-                        );\n-                        err.emit();\n+                        self.tcx.sess.emit_err(MisplacedImplTrait {\n+                            span: t.span,\n+                            position: position.to_string(),\n+                        });\n                         hir::TyKind::Err\n                     }\n                 }"}, {"sha": "3856dd1050bec7e2f1a306e8b35a4c29065356df", "filename": "compiler/rustc_error_messages/locales/en-US/ast_lowering.ftl", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0043d10c712769b45d6cb7fb3fcc141878263d18/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fast_lowering.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/0043d10c712769b45d6cb7fb3fcc141878263d18/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fast_lowering.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fast_lowering.ftl?ref=0043d10c712769b45d6cb7fb3fcc141878263d18", "patch": "@@ -3,3 +3,16 @@ ast_lowering_generic_type_with_parentheses =\n     .label = only `Fn` traits may use parentheses\n \n ast_lowering_use_angle_brackets = use angle brackets instead\n+\n+ast_lowering_invalid_abi =\n+    invalid ABI: found `{$abi}`\n+    .label = invalid ABI\n+    .help = valid ABIs: {$valid_abis}\n+\n+ast_lowering_assoc_ty_parentheses =\n+    parenthesized generic arguments cannot be used in associated type constraints\n+\n+ast_lowering_remove_parentheses = remove these parentheses\n+\n+ast_lowering_misplaced_impl_trait =\n+    `impl Trait` only allowed in function and inherent method return types, not in {$position}"}]}