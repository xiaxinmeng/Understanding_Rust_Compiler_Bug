{"sha": "2a1b6c4de993c8db1bda35d58426d873e9e514c2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhMWI2YzRkZTk5M2M4ZGIxYmRhMzVkNTg0MjZkODczZTllNTE0YzI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-01-10T19:16:54Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-01-10T19:16:54Z"}, "message": "librustc: Implement `&static` as the replacement for `Durable`. r=nmatsakis", "tree": {"sha": "a348bb8b51487c1504a9c923c2bf489e58047348", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a348bb8b51487c1504a9c923c2bf489e58047348"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a1b6c4de993c8db1bda35d58426d873e9e514c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a1b6c4de993c8db1bda35d58426d873e9e514c2", "html_url": "https://github.com/rust-lang/rust/commit/2a1b6c4de993c8db1bda35d58426d873e9e514c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a1b6c4de993c8db1bda35d58426d873e9e514c2/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "982830c836b8c2c9cb3fd311c826bf5775ad1232", "url": "https://api.github.com/repos/rust-lang/rust/commits/982830c836b8c2c9cb3fd311c826bf5775ad1232", "html_url": "https://github.com/rust-lang/rust/commit/982830c836b8c2c9cb3fd311c826bf5775ad1232"}], "stats": {"total": 173, "additions": 107, "deletions": 66}, "files": [{"sha": "eee0a48ec67f9fa187eb66ced47af6cb0e8ef5c5", "filename": "src/librustc/middle/kind.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a1b6c4de993c8db1bda35d58426d873e9e514c2/src%2Flibrustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a1b6c4de993c8db1bda35d58426d873e9e514c2/src%2Flibrustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fkind.rs?ref=2a1b6c4de993c8db1bda35d58426d873e9e514c2", "patch": "@@ -76,7 +76,7 @@ fn kind_to_str(k: Kind) -> ~str {\n     if ty::kind_can_be_sent(k) {\n         kinds.push(~\"owned\");\n     } else if ty::kind_is_durable(k) {\n-        kinds.push(~\"durable\");\n+        kinds.push(~\"&static\");\n     }\n \n     str::connect(kinds, ~\" \")\n@@ -571,7 +571,7 @@ fn check_durable(tcx: ty::ctxt, ty: ty::t, sp: span) -> bool {\n         match ty::get(ty).sty {\n           ty::ty_param(*) => {\n             tcx.sess.span_err(sp, ~\"value may contain borrowed \\\n-                                    pointers; use `durable` bound\");\n+                                    pointers; use `&static` bound\");\n           }\n           _ => {\n             tcx.sess.span_err(sp, ~\"value may contain borrowed \\"}, {"sha": "e2a5c7ca9f96f2d4e5f362beed9bd501143cf634", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2a1b6c4de993c8db1bda35d58426d873e9e514c2/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a1b6c4de993c8db1bda35d58426d873e9e514c2/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=2a1b6c4de993c8db1bda35d58426d873e9e514c2", "patch": "@@ -22,8 +22,8 @@ use middle::pat_util::{pat_bindings};\n use core::cmp;\n use core::str;\n use core::vec;\n-use syntax::ast::{_mod, add, arm, binding_mode, bitand, bitor, bitxor, blk};\n-use syntax::ast::{capture_clause};\n+use syntax::ast::{RegionTyParamBound, TraitTyParamBound, _mod, add, arm};\n+use syntax::ast::{binding_mode, bitand, bitor, bitxor, blk, capture_clause};\n use syntax::ast::{crate, crate_num, decl_item, def, def_arg, def_binding};\n use syntax::ast::{def_const, def_foreign_mod, def_fn, def_id, def_label};\n use syntax::ast::{def_local, def_mod, def_prim_ty, def_region, def_self};\n@@ -4117,8 +4117,11 @@ impl Resolver {\n     fn resolve_type_parameters(type_parameters: ~[ty_param],\n                                visitor: ResolveVisitor) {\n         for type_parameters.each |type_parameter| {\n-            for type_parameter.bounds.each |bound| {\n-                self.resolve_type(**bound, visitor);\n+            for type_parameter.bounds.each |&bound| {\n+                match bound {\n+                    TraitTyParamBound(ty) => self.resolve_type(ty, visitor),\n+                    RegionTyParamBound => {}\n+                }\n             }\n         }\n     }"}, {"sha": "b4cbc6c3f0e16846e1723817378a924f86259e63", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a1b6c4de993c8db1bda35d58426d873e9e514c2/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a1b6c4de993c8db1bda35d58426d873e9e514c2/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=2a1b6c4de993c8db1bda35d58426d873e9e514c2", "patch": "@@ -1591,7 +1591,7 @@ fn substs_to_str(cx: ctxt, substs: &substs) -> ~str {\n fn param_bound_to_str(cx: ctxt, pb: &param_bound) -> ~str {\n     match *pb {\n         bound_copy => ~\"copy\",\n-        bound_durable => ~\"durable\",\n+        bound_durable => ~\"&static\",\n         bound_owned => ~\"owned\",\n         bound_const => ~\"const\",\n         bound_trait(t) => ::util::ppaux::ty_to_str(cx, t)"}, {"sha": "3743a5e0129115875312337916bb02bbb89188af", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 33, "deletions": 26, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/2a1b6c4de993c8db1bda35d58426d873e9e514c2/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a1b6c4de993c8db1bda35d58426d873e9e514c2/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=2a1b6c4de993c8db1bda35d58426d873e9e514c2", "patch": "@@ -50,6 +50,7 @@ use util::ppaux::bound_to_str;\n use core::dvec;\n use core::option;\n use core::vec;\n+use syntax::ast::{RegionTyParamBound, TraitTyParamBound};\n use syntax::ast;\n use syntax::ast_map;\n use syntax::ast_util::{local_def, split_trait_methods};\n@@ -908,36 +909,42 @@ fn ty_of_foreign_item(ccx: @crate_ctxt, it: @ast::foreign_item)\n     }\n }\n \n-// Translate the AST's notion of ty param bounds (which are just newtyped Tys)\n-// to ty's notion of ty param bounds, which can either be user-defined traits,\n-// or one of the four built-in traits (formerly known as kinds): Const, Copy,\n-// Durable, and Send.\n+// Translate the AST's notion of ty param bounds (which are an enum consisting\n+// of a newtyped Ty or a region) to ty's notion of ty param bounds, which can\n+// either be user-defined traits, or one of the four built-in traits (formerly\n+// known as kinds): Const, Copy, Durable, and Send.\n fn compute_bounds(ccx: @crate_ctxt,\n-                  ast_bounds: @~[ast::ty_param_bound]) -> ty::param_bounds {\n+                  ast_bounds: @~[ast::ty_param_bound])\n+               -> ty::param_bounds {\n     @do vec::flat_map(*ast_bounds) |b| {\n-        let li = &ccx.tcx.lang_items;\n-        let ity = ast_ty_to_ty(ccx, empty_rscope, **b);\n-        match ty::get(ity).sty {\n-            ty::ty_trait(did, _, _) => {\n-                if did == li.owned_trait() {\n-                    ~[ty::bound_owned]\n-                } else if did == li.copy_trait() {\n-                    ~[ty::bound_copy]\n-                } else if did == li.const_trait() {\n-                    ~[ty::bound_const]\n-                } else if did == li.durable_trait() {\n-                    ~[ty::bound_durable]\n-                } else {\n-                    // Must be a user-defined trait\n-                    ~[ty::bound_trait(ity)]\n+        match b {\n+            &TraitTyParamBound(b) => {\n+                let li = &ccx.tcx.lang_items;\n+                let ity = ast_ty_to_ty(ccx, empty_rscope, b);\n+                match ty::get(ity).sty {\n+                    ty::ty_trait(did, _, _) => {\n+                        if did == li.owned_trait() {\n+                            ~[ty::bound_owned]\n+                        } else if did == li.copy_trait() {\n+                            ~[ty::bound_copy]\n+                        } else if did == li.const_trait() {\n+                            ~[ty::bound_const]\n+                        } else if did == li.durable_trait() {\n+                            ~[ty::bound_durable]\n+                        } else {\n+                            // Must be a user-defined trait\n+                            ~[ty::bound_trait(ity)]\n+                        }\n+                    }\n+                    _ => {\n+                        ccx.tcx.sess.span_err(\n+                            (*b).span, ~\"type parameter bounds must be \\\n+                                         trait types\");\n+                        ~[]\n+                    }\n                 }\n             }\n-            _ => {\n-                ccx.tcx.sess.span_err(\n-                    (*b).span, ~\"type parameter bounds must be \\\n-                                 trait types\");\n-                ~[]\n-            }\n+            &RegionTyParamBound => ~[ty::bound_durable]\n         }\n     }\n }"}, {"sha": "2cd873414c44a79504903d2eeac701380f446fb3", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2a1b6c4de993c8db1bda35d58426d873e9e514c2/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a1b6c4de993c8db1bda35d58426d873e9e514c2/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=2a1b6c4de993c8db1bda35d58426d873e9e514c2", "patch": "@@ -110,7 +110,10 @@ const crate_node_id: node_id = 0;\n // typeck::collect::compute_bounds matches these against\n // the \"special\" built-in traits (see middle::lang_items) and\n // detects Copy, Send, Owned, and Const.\n-enum ty_param_bound = @Ty;\n+enum ty_param_bound {\n+    TraitTyParamBound(@Ty),\n+    RegionTyParamBound\n+}\n \n #[auto_encode]\n #[auto_decode]"}, {"sha": "2b3fefd6e51bc0edec3e5503ed8ba5d62ea46025", "filename": "src/libsyntax/ext/auto_encode.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a1b6c4de993c8db1bda35d58426d873e9e514c2/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a1b6c4de993c8db1bda35d58426d873e9e514c2/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fauto_encode.rs?ref=2a1b6c4de993c8db1bda35d58426d873e9e514c2", "patch": "@@ -245,7 +245,7 @@ priv impl ext_ctxt {\n         path: @ast::path,\n         bounds: @~[ast::ty_param_bound]\n     ) -> ast::ty_param {\n-        let bound = ast::ty_param_bound(@{\n+        let bound = ast::TraitTyParamBound(@{\n             id: self.next_id(),\n             node: ast::ty_path(path, self.next_id()),\n             span: span,\n@@ -397,7 +397,7 @@ fn mk_impl(\n     let mut trait_tps = vec::append(\n         ~[ty_param],\n          do tps.map |tp| {\n-            let t_bound = ast::ty_param_bound(@{\n+            let t_bound = ast::TraitTyParamBound(@{\n                 id: cx.next_id(),\n                 node: ast::ty_path(path, cx.next_id()),\n                 span: span,"}, {"sha": "afce1edf158cbf69dd7ef89225e014084f17b975", "filename": "src/libsyntax/ext/deriving.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2a1b6c4de993c8db1bda35d58426d873e9e514c2/src%2Flibsyntax%2Fext%2Fderiving.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a1b6c4de993c8db1bda35d58426d873e9e514c2/src%2Flibsyntax%2Fext%2Fderiving.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving.rs?ref=2a1b6c4de993c8db1bda35d58426d873e9e514c2", "patch": "@@ -13,13 +13,13 @@\n \n use core::prelude::*;\n \n-use ast::{Ty, and, bind_by_ref, binop, deref, enum_def, enum_variant_kind};\n-use ast::{expr, expr_match, ident, item, item_, item_struct, item_enum};\n-use ast::{item_impl, m_imm, meta_item, method, named_field, or, pat};\n-use ast::{pat_ident, pat_wild, public, pure_fn, re_anon, spanned, stmt};\n-use ast::{struct_def, struct_variant_kind, sty_by_ref, sty_region};\n-use ast::{tuple_variant_kind, ty_nil, ty_param, ty_param_bound, ty_path};\n-use ast::{ty_rptr, unnamed_field, variant};\n+use ast::{TraitTyParamBound, Ty, and, bind_by_ref, binop, deref, enum_def};\n+use ast::{enum_variant_kind, expr, expr_match, ident, item, item_};\n+use ast::{item_enum, item_impl, item_struct, m_imm, meta_item, method};\n+use ast::{named_field, or, pat, pat_ident, pat_wild, public, pure_fn};\n+use ast::{re_anon, spanned, stmt, struct_def, struct_variant_kind};\n+use ast::{sty_by_ref, sty_region, tuple_variant_kind, ty_nil, ty_param};\n+use ast::{ty_param_bound, ty_path, ty_rptr, unnamed_field, variant};\n use ext::base::ext_ctxt;\n use ext::build;\n use codemap::span;\n@@ -211,7 +211,7 @@ fn create_derived_impl(cx: ext_ctxt,\n         let bound = build::mk_ty_path_global(cx,\n                                              span,\n                                              trait_path.map(|x| *x));\n-        let bounds = @~[ ty_param_bound(bound) ];\n+        let bounds = @~[ TraitTyParamBound(bound) ];\n         let impl_ty_param = build::mk_ty_param(cx, ty_param.ident, bounds);\n         impl_ty_params.push(move impl_ty_param);\n     }"}, {"sha": "bca2336bc8cf46d9e66d671aab8696bac0b19efe", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2a1b6c4de993c8db1bda35d58426d873e9e514c2/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a1b6c4de993c8db1bda35d58426d873e9e514c2/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=2a1b6c4de993c8db1bda35d58426d873e9e514c2", "patch": "@@ -141,7 +141,10 @@ fn fold_fn_decl(decl: ast::fn_decl, fld: ast_fold) -> ast::fn_decl {\n }\n \n fn fold_ty_param_bound(tpb: ty_param_bound, fld: ast_fold) -> ty_param_bound {\n-    ty_param_bound(fld.fold_ty(*tpb))\n+    match tpb {\n+        TraitTyParamBound(ty) => TraitTyParamBound(fld.fold_ty(ty)),\n+        RegionTyParamBound => RegionTyParamBound\n+    }\n }\n \n fn fold_ty_param(tp: ty_param, fld: ast_fold) -> ty_param {"}, {"sha": "6974ac508aade245d5ca59c6e150ab52f20f3ba7", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2a1b6c4de993c8db1bda35d58426d873e9e514c2/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a1b6c4de993c8db1bda35d58426d873e9e514c2/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=2a1b6c4de993c8db1bda35d58426d873e9e514c2", "patch": "@@ -10,7 +10,8 @@\n \n use core::prelude::*;\n \n-use ast::{ProtoBox, ProtoUniq, provided, public, pure_fn, purity, re_static};\n+use ast::{ProtoBox, ProtoUniq, RegionTyParamBound, TraitTyParamBound};\n+use ast::{provided, public, pure_fn, purity, re_static};\n use ast::{_mod, add, arg, arm, attribute, bind_by_ref, bind_infer};\n use ast::{bind_by_value, bind_by_move, bitand, bitor, bitxor, blk};\n use ast::{blk_check_mode, box, by_copy, by_move, by_ref, by_val};\n@@ -2401,8 +2402,16 @@ impl Parser {\n     fn parse_optional_ty_param_bounds() -> @~[ty_param_bound] {\n         let mut bounds = ~[];\n         if self.eat(token::COLON) {\n-            while is_ident(self.token) {\n-                if is_ident(self.token) {\n+            loop {\n+                if self.eat(token::BINOP(token::AND)) {\n+                    if self.eat_keyword(~\"static\") {\n+                        bounds.push(RegionTyParamBound);\n+                    } else {\n+                        self.span_err(copy self.span,\n+                                      ~\"`&static` is the only permissible \\\n+                                        region bound here\");\n+                    }\n+                } else if is_ident(self.token) {\n                     let maybe_bound = match self.token {\n                       token::IDENT(copy sid, _) => {\n                         match *self.id_to_str(sid) {\n@@ -2415,7 +2424,7 @@ impl Parser {\n                                           ObsoleteLowerCaseKindBounds);\n                             // Bogus value, but doesn't matter, since\n                             // is an error\n-                            Some(ty_param_bound(self.mk_ty_path(sid)))\n+                            Some(TraitTyParamBound(self.mk_ty_path(sid)))\n                           }\n \n                           _ => None\n@@ -2430,11 +2439,12 @@ impl Parser {\n                             bounds.push(bound);\n                         }\n                         None => {\n-                            bounds.push(ty_param_bound(self.parse_ty(false)));\n+                            let ty = self.parse_ty(false);\n+                            bounds.push(TraitTyParamBound(ty));\n                         }\n                     }\n                 } else {\n-                    bounds.push(ty_param_bound(self.parse_ty(false)));\n+                    break;\n                 }\n             }\n         }"}, {"sha": "f7117cc7043e2882e8d9afd27dcfd01927ea51fa", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2a1b6c4de993c8db1bda35d58426d873e9e514c2/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a1b6c4de993c8db1bda35d58426d873e9e514c2/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=2a1b6c4de993c8db1bda35d58426d873e9e514c2", "patch": "@@ -10,7 +10,7 @@\n \n use core::prelude::*;\n \n-use ast::{required, provided};\n+use ast::{RegionTyParamBound, TraitTyParamBound, required, provided};\n use ast;\n use ast_util;\n use ast_util::{operator_prec};\n@@ -1791,9 +1791,12 @@ fn print_arg_mode(s: ps, m: ast::mode) {\n fn print_bounds(s: ps, bounds: @~[ast::ty_param_bound]) {\n     if bounds.is_not_empty() {\n         word(s.s, ~\":\");\n-        for vec::each(*bounds) |bound| {\n+        for vec::each(*bounds) |&bound| {\n             nbsp(s);\n-            print_type(s, **bound);\n+            match bound {\n+                TraitTyParamBound(ty) => print_type(s, ty),\n+                RegionTyParamBound => word(s.s, ~\"&static\"),\n+            }\n         }\n     }\n }"}, {"sha": "25ea76d9b513609ea878217357c8331c9be93485", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2a1b6c4de993c8db1bda35d58426d873e9e514c2/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a1b6c4de993c8db1bda35d58426d873e9e514c2/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=2a1b6c4de993c8db1bda35d58426d873e9e514c2", "patch": "@@ -288,8 +288,11 @@ fn visit_foreign_item<E>(ni: @foreign_item, e: E, v: vt<E>) {\n }\n \n fn visit_ty_param_bounds<E>(bounds: @~[ty_param_bound], e: E, v: vt<E>) {\n-    for vec::each(*bounds) |bound| {\n-        (v.visit_ty)(**bound, e, v)\n+    for bounds.each |&bound| {\n+        match bound {\n+            TraitTyParamBound(ty) => (v.visit_ty)(ty, e, v),\n+            RegionTyParamBound => ()\n+        }\n     }\n }\n "}, {"sha": "b160ffe2ecdc12aaf254028d4f70983ad3e1e228", "filename": "src/test/compile-fail/kindck-owned-trait-scoped.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a1b6c4de993c8db1bda35d58426d873e9e514c2/src%2Ftest%2Fcompile-fail%2Fkindck-owned-trait-scoped.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a1b6c4de993c8db1bda35d58426d873e9e514c2/src%2Ftest%2Fcompile-fail%2Fkindck-owned-trait-scoped.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-owned-trait-scoped.rs?ref=2a1b6c4de993c8db1bda35d58426d873e9e514c2", "patch": "@@ -35,7 +35,7 @@ fn to_foo_2<T:Copy>(t: T) -> foo {\n     {f:t} as foo //~ ERROR value may contain borrowed pointers; use `durable` bound\n }\n \n-fn to_foo_3<T:Copy Durable>(t: T) -> foo {\n+fn to_foo_3<T:Copy &static>(t: T) -> foo {\n     // OK---T may escape as part of the returned foo value, but it is\n     // owned and hence does not contain borrowed ptrs\n     {f:t} as foo"}, {"sha": "63d8212f41d9f2535a1d101e9ff205b27ff2517f", "filename": "src/test/compile-fail/kindck-owned-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a1b6c4de993c8db1bda35d58426d873e9e514c2/src%2Ftest%2Fcompile-fail%2Fkindck-owned-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a1b6c4de993c8db1bda35d58426d873e9e514c2/src%2Ftest%2Fcompile-fail%2Fkindck-owned-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-owned-trait.rs?ref=2a1b6c4de993c8db1bda35d58426d873e9e514c2", "patch": "@@ -14,7 +14,7 @@ fn to_foo<T: Copy foo>(t: T) -> foo {\n     t as foo //~ ERROR value may contain borrowed pointers; use `durable` bound\n }\n \n-fn to_foo2<T: Copy foo Durable>(t: T) -> foo {\n+fn to_foo2<T: Copy foo &static>(t: T) -> foo {\n     t as foo\n }\n "}, {"sha": "9cd7b36095fea11be42ad64c00f921933618625a", "filename": "src/test/compile-fail/kindck-owned.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a1b6c4de993c8db1bda35d58426d873e9e514c2/src%2Ftest%2Fcompile-fail%2Fkindck-owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a1b6c4de993c8db1bda35d58426d873e9e514c2/src%2Ftest%2Fcompile-fail%2Fkindck-owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-owned.rs?ref=2a1b6c4de993c8db1bda35d58426d873e9e514c2", "patch": "@@ -12,7 +12,7 @@ fn copy1<T: Copy>(t: T) -> fn@() -> T {\n     fn@() -> T { t } //~ ERROR value may contain borrowed pointers\n }\n \n-fn copy2<T: Copy Durable>(t: T) -> fn@() -> T {\n+fn copy2<T: Copy &static>(t: T) -> fn@() -> T {\n     fn@() -> T { t }\n }\n "}, {"sha": "b70b0cdf88191a147fbab0ae918a20ba41598a23", "filename": "src/test/compile-fail/static-region-bound.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2a1b6c4de993c8db1bda35d58426d873e9e514c2/src%2Ftest%2Fcompile-fail%2Fstatic-region-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a1b6c4de993c8db1bda35d58426d873e9e514c2/src%2Ftest%2Fcompile-fail%2Fstatic-region-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstatic-region-bound.rs?ref=2a1b6c4de993c8db1bda35d58426d873e9e514c2", "patch": "@@ -0,0 +1,9 @@\n+fn f<T:&static>(_: T) {}\n+\n+fn main() {\n+    let x = @3;\n+    f(x);\n+    let x = &3;\n+    f(x);   //~ ERROR instantiating a type parameter with an incompatible type\n+}\n+"}, {"sha": "a880b50d628985463f1be2ac5a11d9806c34607d", "filename": "src/test/run-pass/alignment-gep-tup-like-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a1b6c4de993c8db1bda35d58426d873e9e514c2/src%2Ftest%2Frun-pass%2Falignment-gep-tup-like-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a1b6c4de993c8db1bda35d58426d873e9e514c2/src%2Ftest%2Frun-pass%2Falignment-gep-tup-like-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falignment-gep-tup-like-1.rs?ref=2a1b6c4de993c8db1bda35d58426d873e9e514c2", "patch": "@@ -12,7 +12,7 @@ type pair<A,B> = {\n     a: A, b: B\n };\n \n-fn f<A:Copy Durable>(a: A, b: u16) -> fn@() -> (A, u16) {\n+fn f<A:Copy &static>(a: A, b: u16) -> fn@() -> (A, u16) {\n     fn@() -> (A, u16) { (a, b) }\n }\n "}, {"sha": "a2a97f531deb64fa2117c6ddecc0622b833d9bb0", "filename": "src/test/run-pass/close-over-big-then-small-data.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a1b6c4de993c8db1bda35d58426d873e9e514c2/src%2Ftest%2Frun-pass%2Fclose-over-big-then-small-data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a1b6c4de993c8db1bda35d58426d873e9e514c2/src%2Ftest%2Frun-pass%2Fclose-over-big-then-small-data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclose-over-big-then-small-data.rs?ref=2a1b6c4de993c8db1bda35d58426d873e9e514c2", "patch": "@@ -16,7 +16,7 @@ type pair<A,B> = {\n     a: A, b: B\n };\n \n-fn f<A:Copy Durable>(a: A, b: u16) -> fn@() -> (A, u16) {\n+fn f<A:Copy &static>(a: A, b: u16) -> fn@() -> (A, u16) {\n     fn@() -> (A, u16) { (a, b) }\n }\n "}, {"sha": "f01b2b082d00d24ec0ddcf98491ec1ecfc3ad191", "filename": "src/test/run-pass/fixed-point-bind-unique.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a1b6c4de993c8db1bda35d58426d873e9e514c2/src%2Ftest%2Frun-pass%2Ffixed-point-bind-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a1b6c4de993c8db1bda35d58426d873e9e514c2/src%2Ftest%2Frun-pass%2Ffixed-point-bind-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffixed-point-bind-unique.rs?ref=2a1b6c4de993c8db1bda35d58426d873e9e514c2", "patch": "@@ -11,11 +11,11 @@\n // xfail-fast\n #[legacy_modes];\n \n-fn fix_help<A: Durable, B: Owned>(f: extern fn(fn@(A) -> B, A) -> B, x: A) -> B {\n+fn fix_help<A: &static, B: Owned>(f: extern fn(fn@(A) -> B, A) -> B, x: A) -> B {\n     return f({|a|fix_help(f, a)}, x);\n }\n \n-fn fix<A: Durable, B: Owned>(f: extern fn(fn@(A) -> B, A) -> B) -> fn@(A) -> B {\n+fn fix<A: &static, B: Owned>(f: extern fn(fn@(A) -> B, A) -> B) -> fn@(A) -> B {\n     return {|a|fix_help(f, a)};\n }\n "}, {"sha": "0ab6c630ac8e11d2bc29bcea4fb5068c89a1d2e5", "filename": "src/test/run-pass/issue-2734.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a1b6c4de993c8db1bda35d58426d873e9e514c2/src%2Ftest%2Frun-pass%2Fissue-2734.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a1b6c4de993c8db1bda35d58426d873e9e514c2/src%2Ftest%2Frun-pass%2Fissue-2734.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2734.rs?ref=2a1b6c4de993c8db1bda35d58426d873e9e514c2", "patch": "@@ -11,7 +11,7 @@\n trait hax { } \n impl <A> A: hax { } \n \n-fn perform_hax<T: Durable>(x: @T) -> hax {\n+fn perform_hax<T: &static>(x: @T) -> hax {\n     x as hax \n }\n "}, {"sha": "675397a0881907de9ca8c8bc91cf23c081faacfd", "filename": "src/test/run-pass/issue-2735.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a1b6c4de993c8db1bda35d58426d873e9e514c2/src%2Ftest%2Frun-pass%2Fissue-2735.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a1b6c4de993c8db1bda35d58426d873e9e514c2/src%2Ftest%2Frun-pass%2Fissue-2735.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2735.rs?ref=2a1b6c4de993c8db1bda35d58426d873e9e514c2", "patch": "@@ -11,7 +11,7 @@\n trait hax { } \n impl <A> A: hax { } \n \n-fn perform_hax<T: Durable>(x: @T) -> hax {\n+fn perform_hax<T: &static>(x: @T) -> hax {\n     x as hax \n }\n "}, {"sha": "5e66d2c7c1909c6de1e5be0c892f08953d8c7274", "filename": "src/test/run-pass/issue-2904.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a1b6c4de993c8db1bda35d58426d873e9e514c2/src%2Ftest%2Frun-pass%2Fissue-2904.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a1b6c4de993c8db1bda35d58426d873e9e514c2/src%2Ftest%2Frun-pass%2Fissue-2904.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2904.rs?ref=2a1b6c4de993c8db1bda35d58426d873e9e514c2", "patch": "@@ -59,7 +59,7 @@ fn square_from_char(c: char) -> square {\n     }\n }\n \n-fn read_board_grid<rdr: Durable io::Reader>(+in: rdr) -> ~[~[square]] {\n+fn read_board_grid<rdr: &static io::Reader>(+in: rdr) -> ~[~[square]] {\n     let in = (move in) as io::Reader;\n     let mut grid = ~[];\n     for in.each_line |line| {"}]}