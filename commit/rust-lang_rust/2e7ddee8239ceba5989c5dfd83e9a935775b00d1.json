{"sha": "2e7ddee8239ceba5989c5dfd83e9a935775b00d1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlN2RkZWU4MjM5Y2ViYTU5ODljNWRmZDgzZTlhOTM1Nzc1YjAwZDE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-23T06:11:24Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-23T06:27:05Z"}, "message": "tutorial: Simplify the first example. Misc", "tree": {"sha": "0abce32601d72c65c10966e943f2b919415c6e14", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0abce32601d72c65c10966e943f2b919415c6e14"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e7ddee8239ceba5989c5dfd83e9a935775b00d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e7ddee8239ceba5989c5dfd83e9a935775b00d1", "html_url": "https://github.com/rust-lang/rust/commit/2e7ddee8239ceba5989c5dfd83e9a935775b00d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e7ddee8239ceba5989c5dfd83e9a935775b00d1/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b89dcbdf2de3f757556639cd7323c60d343c4d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b89dcbdf2de3f757556639cd7323c60d343c4d2", "html_url": "https://github.com/rust-lang/rust/commit/3b89dcbdf2de3f757556639cd7323c60d343c4d2"}], "stats": {"total": 41, "additions": 21, "deletions": 20}, "files": [{"sha": "0ca7a39b49772402f51e29fcb9bdecb521887286", "filename": "doc/tutorial.md", "status": "modified", "additions": 21, "deletions": 20, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/2e7ddee8239ceba5989c5dfd83e9a935775b00d1/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/2e7ddee8239ceba5989c5dfd83e9a935775b00d1/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=2e7ddee8239ceba5989c5dfd83e9a935775b00d1", "patch": "@@ -204,16 +204,13 @@ paretheses, while their bodies *must* be wrapped in\n brackets. Single-statement, bracket-less bodies are not allowed.\n \n ~~~~\n-# fn calibrate_universe() -> bool { false }\n-# fn party_on() {}\n-# fn panic() {}\n+# fn recalibrate_universe() -> bool { true }\n fn main() {\n-    while calibrate_universe() {\n-        /* Ensure that basic math still operates is expected */\n-        if 2*20 > 30 {\n-            party_on(); // That's a relief\n-        } else {\n-            panic();\n+    /* A simple loop */\n+    loop {\n+        // A tricky calculation\n+        if recalibrate_universe() {\n+            return;\n         }\n     }\n }\n@@ -438,10 +435,9 @@ The nil literal is written just like the type: `()`. The keywords\n \n Character literals are written between single quotes, as in `'x'`. Just as in\n C, Rust understands a number of character escapes, using the backslash\n-character, `\\n`, `\\r`, and `\\t` being the most common.\n-\n-String literals allow the same escape sequences. They are written\n-between double quotes (`\"hello\"`). Rust strings may contain newlines.\n+character, `\\n`, `\\r`, and `\\t` being the most common. String literals,\n+written between double quotes, allow the same escape sequences. Rust strings\n+may contain newlines.\n \n ## Operators\n \n@@ -482,14 +478,19 @@ a syntax extension is being used, the names of all syntax extensions end with\n which is `fmt!`, a `sprintf`-style text formatter that is expanded at compile\n time.\n \n-~~~~\n-io::println(fmt!(\"%s is %d\", ~\"the answer\", 42));\n-~~~~\n-\n `fmt!` supports most of the directives that [printf][pf] supports, but\n will give you a compile-time error when the types of the directives\n don't match the types of the arguments.\n \n+~~~~\n+# let mystery_object = ();\n+\n+io::println(fmt!(\"%s is %d\", \"the answer\", 43));\n+\n+// %? will conveniently print any type\n+io::println(fmt!(\"what is this thing: %?\", mystery_object));\n+~~~~\n+\n [pf]: http://en.cppreference.com/w/cpp/io/c/fprintf\n \n You can define your own syntax extensions with the macro system, which is out\n@@ -505,11 +506,11 @@ compulsory, an optional `else` clause can be appended, and multiple\n \n ~~~~\n if false {\n-    io::println(~\"that's odd\");\n+    io::println(\"that's odd\");\n } else if true {\n-    io::println(~\"right\");\n+    io::println(\"right\");\n } else {\n-    io::println(~\"neither true nor false\");\n+    io::println(\"neither true nor false\");\n }\n ~~~~\n "}]}