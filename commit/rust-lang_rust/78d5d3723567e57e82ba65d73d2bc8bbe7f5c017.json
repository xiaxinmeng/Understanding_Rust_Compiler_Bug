{"sha": "78d5d3723567e57e82ba65d73d2bc8bbe7f5c017", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4ZDVkMzcyMzU2N2U1N2U4MmJhNjVkNzNkMmJjOGJiZTdmNWMwMTc=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-06-13T21:14:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-06-13T21:14:59Z"}, "message": "Rollup merge of #42428 - scottmcm:str-get-overflow, r=sfackler\n\nAdd overflow checking for `str::get` with inclusive ranges\n\nFixes https://github.com/rust-lang/rust/issues/42401\n\nTwo commits here:\n\n1. The first makes `str::index` just call `SliceIndex<str>::index`.  It's intended to have no behavior change, except where the two methods were inconsistent.\n2. The second actually adds the overflow checking to `get(_mut)` (and tests for it)", "tree": {"sha": "4143f38d1c339001b14a967c79c1aea3b3f90178", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4143f38d1c339001b14a967c79c1aea3b3f90178"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78d5d3723567e57e82ba65d73d2bc8bbe7f5c017", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78d5d3723567e57e82ba65d73d2bc8bbe7f5c017", "html_url": "https://github.com/rust-lang/rust/commit/78d5d3723567e57e82ba65d73d2bc8bbe7f5c017", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78d5d3723567e57e82ba65d73d2bc8bbe7f5c017/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02179bd2515fcdc5cdfeecd84b04097f0c80daf2", "url": "https://api.github.com/repos/rust-lang/rust/commits/02179bd2515fcdc5cdfeecd84b04097f0c80daf2", "html_url": "https://github.com/rust-lang/rust/commit/02179bd2515fcdc5cdfeecd84b04097f0c80daf2"}, {"sha": "808a08a363591abf754fafd93ec3f44c686486ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/808a08a363591abf754fafd93ec3f44c686486ec", "html_url": "https://github.com/rust-lang/rust/commit/808a08a363591abf754fafd93ec3f44c686486ec"}], "stats": {"total": 114, "additions": 73, "deletions": 41}, "files": [{"sha": "c6f0b4436bb3179d361e8ac3b920b4f44b6b3081", "filename": "src/libcollections/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/78d5d3723567e57e82ba65d73d2bc8bbe7f5c017/src%2Flibcollections%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78d5d3723567e57e82ba65d73d2bc8bbe7f5c017/src%2Flibcollections%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftests%2Flib.rs?ref=78d5d3723567e57e82ba65d73d2bc8bbe7f5c017", "patch": "@@ -24,6 +24,7 @@\n #![feature(repr_align)]\n #![feature(slice_rotate)]\n #![feature(splice)]\n+#![feature(str_checked_slicing)]\n #![feature(str_escape)]\n #![feature(test)]\n #![feature(unboxed_closures)]"}, {"sha": "9d8ca38b20e48c822af8beb5f756c25c88ad5d7e", "filename": "src/libcollections/tests/str.rs", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/78d5d3723567e57e82ba65d73d2bc8bbe7f5c017/src%2Flibcollections%2Ftests%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78d5d3723567e57e82ba65d73d2bc8bbe7f5c017/src%2Flibcollections%2Ftests%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftests%2Fstr.rs?ref=78d5d3723567e57e82ba65d73d2bc8bbe7f5c017", "patch": "@@ -358,6 +358,48 @@ fn test_slice_fail() {\n     &\"\u4e2d\u534eVi\u1ec7t Nam\"[0..2];\n }\n \n+#[test]\n+#[should_panic]\n+fn test_str_slice_rangetoinclusive_max_panics() {\n+    &\"hello\"[...usize::max_value()];\n+}\n+\n+#[test]\n+#[should_panic]\n+fn test_str_slice_rangeinclusive_max_panics() {\n+    &\"hello\"[1...usize::max_value()];\n+}\n+\n+#[test]\n+#[should_panic]\n+fn test_str_slicemut_rangetoinclusive_max_panics() {\n+    let mut s = \"hello\".to_owned();\n+    let s: &mut str = &mut s;\n+    &mut s[...usize::max_value()];\n+}\n+\n+#[test]\n+#[should_panic]\n+fn test_str_slicemut_rangeinclusive_max_panics() {\n+    let mut s = \"hello\".to_owned();\n+    let s: &mut str = &mut s;\n+    &mut s[1...usize::max_value()];\n+}\n+\n+#[test]\n+fn test_str_get_maxinclusive() {\n+    let mut s = \"hello\".to_owned();\n+    {\n+        let s: &str = &s;\n+        assert_eq!(s.get(...usize::max_value()), None);\n+        assert_eq!(s.get(1...usize::max_value()), None);\n+    }\n+    {\n+        let s: &mut str = &mut s;\n+        assert_eq!(s.get(...usize::max_value()), None);\n+        assert_eq!(s.get(1...usize::max_value()), None);\n+    }\n+}\n \n #[test]\n fn test_is_char_boundary() {"}, {"sha": "34aca592b1e95434d598a990930dcad2d004cd1f", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 30, "deletions": 41, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/78d5d3723567e57e82ba65d73d2bc8bbe7f5c017/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78d5d3723567e57e82ba65d73d2bc8bbe7f5c017/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=78d5d3723567e57e82ba65d73d2bc8bbe7f5c017", "patch": "@@ -1617,12 +1617,7 @@ mod traits {\n \n         #[inline]\n         fn index(&self, index: ops::RangeTo<usize>) -> &str {\n-            // is_char_boundary checks that the index is in [0, .len()]\n-            if self.is_char_boundary(index.end) {\n-                unsafe { self.slice_unchecked(0, index.end) }\n-            } else {\n-                super::slice_error_fail(self, 0, index.end)\n-            }\n+            index.index(self)\n         }\n     }\n \n@@ -1636,12 +1631,7 @@ mod traits {\n     impl ops::IndexMut<ops::RangeTo<usize>> for str {\n         #[inline]\n         fn index_mut(&mut self, index: ops::RangeTo<usize>) -> &mut str {\n-            // is_char_boundary checks that the index is in [0, .len()]\n-            if self.is_char_boundary(index.end) {\n-                unsafe { self.slice_mut_unchecked(0, index.end) }\n-            } else {\n-                super::slice_error_fail(self, 0, index.end)\n-            }\n+            index.index_mut(self)\n         }\n     }\n \n@@ -1657,12 +1647,7 @@ mod traits {\n \n         #[inline]\n         fn index(&self, index: ops::RangeFrom<usize>) -> &str {\n-            // is_char_boundary checks that the index is in [0, .len()]\n-            if self.is_char_boundary(index.start) {\n-                unsafe { self.slice_unchecked(index.start, self.len()) }\n-            } else {\n-                super::slice_error_fail(self, index.start, self.len())\n-            }\n+            index.index(self)\n         }\n     }\n \n@@ -1676,13 +1661,7 @@ mod traits {\n     impl ops::IndexMut<ops::RangeFrom<usize>> for str {\n         #[inline]\n         fn index_mut(&mut self, index: ops::RangeFrom<usize>) -> &mut str {\n-            // is_char_boundary checks that the index is in [0, .len()]\n-            if self.is_char_boundary(index.start) {\n-                let len = self.len();\n-                unsafe { self.slice_mut_unchecked(index.start, len) }\n-            } else {\n-                super::slice_error_fail(self, index.start, self.len())\n-            }\n+            index.index_mut(self)\n         }\n     }\n \n@@ -1724,9 +1703,7 @@ mod traits {\n \n         #[inline]\n         fn index(&self, index: ops::RangeInclusive<usize>) -> &str {\n-            assert!(index.end != usize::max_value(),\n-                \"attempted to index str up to maximum usize\");\n-            self.index(index.start .. index.end+1)\n+            index.index(self)\n         }\n     }\n \n@@ -1738,9 +1715,7 @@ mod traits {\n \n         #[inline]\n         fn index(&self, index: ops::RangeToInclusive<usize>) -> &str {\n-            assert!(index.end != usize::max_value(),\n-                \"attempted to index str up to maximum usize\");\n-            self.index(.. index.end+1)\n+            index.index(self)\n         }\n     }\n \n@@ -1750,9 +1725,7 @@ mod traits {\n     impl ops::IndexMut<ops::RangeInclusive<usize>> for str {\n         #[inline]\n         fn index_mut(&mut self, index: ops::RangeInclusive<usize>) -> &mut str {\n-            assert!(index.end != usize::max_value(),\n-                \"attempted to index str up to maximum usize\");\n-            self.index_mut(index.start .. index.end+1)\n+            index.index_mut(self)\n         }\n     }\n     #[unstable(feature = \"inclusive_range\",\n@@ -1761,9 +1734,7 @@ mod traits {\n     impl ops::IndexMut<ops::RangeToInclusive<usize>> for str {\n         #[inline]\n         fn index_mut(&mut self, index: ops::RangeToInclusive<usize>) -> &mut str {\n-            assert!(index.end != usize::max_value(),\n-                \"attempted to index str up to maximum usize\");\n-            self.index_mut(.. index.end+1)\n+            index.index_mut(self)\n         }\n     }\n \n@@ -1886,6 +1857,7 @@ mod traits {\n         }\n         #[inline]\n         fn index_mut(self, slice: &mut str) -> &mut Self::Output {\n+            // is_char_boundary checks that the index is in [0, .len()]\n             if slice.is_char_boundary(self.end) {\n                 unsafe { self.get_unchecked_mut(slice) }\n             } else {\n@@ -1932,6 +1904,7 @@ mod traits {\n         }\n         #[inline]\n         fn index_mut(self, slice: &mut str) -> &mut Self::Output {\n+            // is_char_boundary checks that the index is in [0, .len()]\n             if slice.is_char_boundary(self.start) {\n                 unsafe { self.get_unchecked_mut(slice) }\n             } else {\n@@ -1945,11 +1918,19 @@ mod traits {\n         type Output = str;\n         #[inline]\n         fn get(self, slice: &str) -> Option<&Self::Output> {\n-            (self.start..self.end+1).get(slice)\n+            if let Some(end) = self.end.checked_add(1) {\n+                (self.start..end).get(slice)\n+            } else {\n+                None\n+            }\n         }\n         #[inline]\n         fn get_mut(self, slice: &mut str) -> Option<&mut Self::Output> {\n-            (self.start..self.end+1).get_mut(slice)\n+            if let Some(end) = self.end.checked_add(1) {\n+                (self.start..end).get_mut(slice)\n+            } else {\n+                None\n+            }\n         }\n         #[inline]\n         unsafe fn get_unchecked(self, slice: &str) -> &Self::Output {\n@@ -1961,10 +1942,14 @@ mod traits {\n         }\n         #[inline]\n         fn index(self, slice: &str) -> &Self::Output {\n+            assert!(self.end != usize::max_value(),\n+                \"attempted to index str up to maximum usize\");\n             (self.start..self.end+1).index(slice)\n         }\n         #[inline]\n         fn index_mut(self, slice: &mut str) -> &mut Self::Output {\n+            assert!(self.end != usize::max_value(),\n+                \"attempted to index str up to maximum usize\");\n             (self.start..self.end+1).index_mut(slice)\n         }\n     }\n@@ -1976,15 +1961,15 @@ mod traits {\n         type Output = str;\n         #[inline]\n         fn get(self, slice: &str) -> Option<&Self::Output> {\n-            if slice.is_char_boundary(self.end + 1) {\n+            if self.end < usize::max_value() && slice.is_char_boundary(self.end + 1) {\n                 Some(unsafe { self.get_unchecked(slice) })\n             } else {\n                 None\n             }\n         }\n         #[inline]\n         fn get_mut(self, slice: &mut str) -> Option<&mut Self::Output> {\n-            if slice.is_char_boundary(self.end + 1) {\n+            if self.end < usize::max_value() && slice.is_char_boundary(self.end + 1) {\n                 Some(unsafe { self.get_unchecked_mut(slice) })\n             } else {\n                 None\n@@ -2002,11 +1987,15 @@ mod traits {\n         }\n         #[inline]\n         fn index(self, slice: &str) -> &Self::Output {\n+            assert!(self.end != usize::max_value(),\n+                \"attempted to index str up to maximum usize\");\n             let end = self.end + 1;\n             self.get(slice).unwrap_or_else(|| super::slice_error_fail(slice, 0, end))\n         }\n         #[inline]\n         fn index_mut(self, slice: &mut str) -> &mut Self::Output {\n+            assert!(self.end != usize::max_value(),\n+                \"attempted to index str up to maximum usize\");\n             if slice.is_char_boundary(self.end) {\n                 unsafe { self.get_unchecked_mut(slice) }\n             } else {"}]}