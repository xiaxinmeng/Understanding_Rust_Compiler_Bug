{"sha": "97927da0485800a3f2ba3f32185be301ce103ef6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3OTI3ZGEwNDg1ODAwYTNmMmJhM2YzMjE4NWJlMzAxY2UxMDNlZjY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-03-29T01:40:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-03-29T01:40:46Z"}, "message": "Rollup merge of #59358 - JohnTitor:use-track-errors, r=oli-obk\n\nUse `track_errors` instead of hand rolling\n\nFixes #59215\n\nr? @oli-obk", "tree": {"sha": "cfe2a247955f97f7e34a3802758acdbdff2b650f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cfe2a247955f97f7e34a3802758acdbdff2b650f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97927da0485800a3f2ba3f32185be301ce103ef6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcnXeeCRBK7hj4Ov3rIwAAdHIIAIVeR3/URXoaXD+DoUAafilJ\nWQPMBJ5eFVQOVBwKx+RvusiQpiuDtPdB4EbrNbvHkM4wNawimr/jJUx7jlG3OhpD\n/EK0/g+f7fIT2eTI/P3yOU52i6XsGEdaXMFlQu1khs4gx8D58m1693KU2qmkF1BH\n+BUtqsRWqMlvbhryIZ68UdgOVqGl+9XI8f2Oc1DYK8xlIZGebtPUKKDjngUsBSTj\nSzL+ta0YRh2aE+WzR58qrayS+rJmAhSlK7H4nGIk8GA2ZNeGVyCzSQiHWeO/Jf2/\nUV5hG/k6C9FG/TARuNjuW4H0qph/0xXB9tHRJn6CwKFxOezqJv9AZDrvGgE7br4=\n=jM3g\n-----END PGP SIGNATURE-----\n", "payload": "tree cfe2a247955f97f7e34a3802758acdbdff2b650f\nparent 8794e21ff329d1201d484c015d48e85490a64fa9\nparent 07788478332d645293a81686d5d225b8aafabe90\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1553823646 +0100\ncommitter GitHub <noreply@github.com> 1553823646 +0100\n\nRollup merge of #59358 - JohnTitor:use-track-errors, r=oli-obk\n\nUse `track_errors` instead of hand rolling\n\nFixes #59215\n\nr? @oli-obk\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97927da0485800a3f2ba3f32185be301ce103ef6", "html_url": "https://github.com/rust-lang/rust/commit/97927da0485800a3f2ba3f32185be301ce103ef6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97927da0485800a3f2ba3f32185be301ce103ef6/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8794e21ff329d1201d484c015d48e85490a64fa9", "url": "https://api.github.com/repos/rust-lang/rust/commits/8794e21ff329d1201d484c015d48e85490a64fa9", "html_url": "https://github.com/rust-lang/rust/commit/8794e21ff329d1201d484c015d48e85490a64fa9"}, {"sha": "07788478332d645293a81686d5d225b8aafabe90", "url": "https://api.github.com/repos/rust-lang/rust/commits/07788478332d645293a81686d5d225b8aafabe90", "html_url": "https://github.com/rust-lang/rust/commit/07788478332d645293a81686d5d225b8aafabe90"}], "stats": {"total": 18, "additions": 12, "deletions": 6}, "files": [{"sha": "2268568c5f82d1431a12b3c1bbb3ede351cf295a", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/97927da0485800a3f2ba3f32185be301ce103ef6/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97927da0485800a3f2ba3f32185be301ce103ef6/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=97927da0485800a3f2ba3f32185be301ce103ef6", "patch": "@@ -14,6 +14,7 @@ use rustc::ty::{self, TyCtxt, query::TyCtxtAt};\n use rustc::ty::layout::{self, LayoutOf, VariantIdx};\n use rustc::ty::subst::Subst;\n use rustc::traits::Reveal;\n+use rustc::util::common::ErrorReported;\n use rustc_data_structures::fx::FxHashMap;\n \n use syntax::ast::Mutability;\n@@ -641,16 +642,21 @@ pub fn const_eval_raw_provider<'a, 'tcx>(\n         let err = error_to_const_error(&ecx, error);\n         // errors in statics are always emitted as fatal errors\n         if tcx.is_static(def_id).is_some() {\n-            let reported_err = err.report_as_error(ecx.tcx,\n-                                                   \"could not evaluate static initializer\");\n             // Ensure that if the above error was either `TooGeneric` or `Reported`\n             // an error must be reported.\n-            if tcx.sess.err_count() == 0 {\n-                tcx.sess.delay_span_bug(err.span,\n+            let reported_err = tcx.sess.track_errors(|| {\n+                err.report_as_error(ecx.tcx,\n+                                    \"could not evaluate static initializer\")\n+            });\n+            match reported_err {\n+                Ok(v) => {\n+                    tcx.sess.delay_span_bug(err.span,\n                                         &format!(\"static eval failure did not emit an error: {:#?}\",\n-                                                 reported_err));\n+                                        v));\n+                    v\n+                },\n+                Err(ErrorReported) => ErrorHandled::Reported,\n             }\n-            reported_err\n         } else if def_id.is_local() {\n             // constant defined in this crate, we can figure out a lint level!\n             match tcx.describe_def(def_id) {"}]}