{"sha": "ff0f00d3182cd604d2d40ea0fe75a4bca407c6b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmMGYwMGQzMTgyY2Q2MDRkMmQ0MGVhMGZlNzVhNGJjYTQwN2M2Yjk=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-05-16T20:19:17Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-05-17T19:58:28Z"}, "message": "Add doc comments mentioning unspecified behaviour upon exhaustion", "tree": {"sha": "f9973b1a36a40c0cdac2aa1932efb3544a898cd0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9973b1a36a40c0cdac2aa1932efb3544a898cd0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff0f00d3182cd604d2d40ea0fe75a4bca407c6b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff0f00d3182cd604d2d40ea0fe75a4bca407c6b9", "html_url": "https://github.com/rust-lang/rust/commit/ff0f00d3182cd604d2d40ea0fe75a4bca407c6b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff0f00d3182cd604d2d40ea0fe75a4bca407c6b9/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b3ecbcebb38e06495819324f2a67f1d0eb24a23", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b3ecbcebb38e06495819324f2a67f1d0eb24a23", "html_url": "https://github.com/rust-lang/rust/commit/1b3ecbcebb38e06495819324f2a67f1d0eb24a23"}], "stats": {"total": 11, "additions": 10, "deletions": 1}, "files": [{"sha": "7c6e2447bdb7f39b707c1c80e62f6420ca0d7e5b", "filename": "src/libcore/ops/range.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ff0f00d3182cd604d2d40ea0fe75a4bca407c6b9/src%2Flibcore%2Fops%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff0f00d3182cd604d2d40ea0fe75a4bca407c6b9/src%2Flibcore%2Fops%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Frange.rs?ref=ff0f00d3182cd604d2d40ea0fe75a4bca407c6b9", "patch": "@@ -360,6 +360,9 @@ impl<Idx> RangeInclusive<Idx> {\n     /// whether the inclusive range is empty, use the [`is_empty()`] method\n     /// instead of comparing `start() > end()`.\n     ///\n+    /// Note: the value returned by this method is unspecified after the range\n+    /// has been iterated to exhaustion.\n+    ///\n     /// [`end()`]: #method.end\n     /// [`is_empty()`]: #method.is_empty\n     ///\n@@ -381,6 +384,9 @@ impl<Idx> RangeInclusive<Idx> {\n     /// whether the inclusive range is empty, use the [`is_empty()`] method\n     /// instead of comparing `start() > end()`.\n     ///\n+    /// Note: the value returned by this method is unspecified after the range\n+    /// has been iterated to exhaustion.\n+    ///\n     /// [`start()`]: #method.start\n     /// [`is_empty()`]: #method.is_empty\n     ///\n@@ -395,7 +401,10 @@ impl<Idx> RangeInclusive<Idx> {\n         &self.end\n     }\n \n-    /// Destructures the RangeInclusive into (lower bound, upper (inclusive) bound).\n+    /// Destructures the `RangeInclusive` into (lower bound, upper (inclusive) bound).\n+    ///\n+    /// Note: the value returned by this method is unspecified after the range\n+    /// has been iterated to exhaustion.\n     ///\n     /// # Examples\n     ///"}]}