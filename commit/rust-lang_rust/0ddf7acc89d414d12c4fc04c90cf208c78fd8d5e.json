{"sha": "0ddf7acc89d414d12c4fc04c90cf208c78fd8d5e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkZGY3YWNjODlkNDE0ZDEyYzRmYzA0YzkwY2YyMDhjNzhmZDhkNWU=", "commit": {"author": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2020-12-14T05:07:36Z"}, "committer": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2020-12-14T05:07:36Z"}, "message": "Reenable rounding ops", "tree": {"sha": "9a88f9b31c75afa3a04976992a7ace3de51583da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a88f9b31c75afa3a04976992a7ace3de51583da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ddf7acc89d414d12c4fc04c90cf208c78fd8d5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ddf7acc89d414d12c4fc04c90cf208c78fd8d5e", "html_url": "https://github.com/rust-lang/rust/commit/0ddf7acc89d414d12c4fc04c90cf208c78fd8d5e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ddf7acc89d414d12c4fc04c90cf208c78fd8d5e/comments", "author": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9cc3deaa9256060868bb952ea5f850a910633f19", "url": "https://api.github.com/repos/rust-lang/rust/commits/9cc3deaa9256060868bb952ea5f850a910633f19", "html_url": "https://github.com/rust-lang/rust/commit/9cc3deaa9256060868bb952ea5f850a910633f19"}], "stats": {"total": 116, "additions": 35, "deletions": 81}, "files": [{"sha": "312a3237e232978476e18f7bb26ef5977c2697d7", "filename": "crates/core_simd/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ddf7acc89d414d12c4fc04c90cf208c78fd8d5e/crates%2Fcore_simd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ddf7acc89d414d12c4fc04c90cf208c78fd8d5e/crates%2Fcore_simd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Flib.rs?ref=0ddf7acc89d414d12c4fc04c90cf208c78fd8d5e", "patch": "@@ -9,7 +9,7 @@ mod macros;\n mod fmt;\n mod intrinsics;\n mod ops;\n-//mod round;\n+mod round;\n \n mod masks;\n pub use masks::*;"}, {"sha": "d77bc4e8fa7edad02eab2ec9110897ed26f9019b", "filename": "crates/core_simd/src/round.rs", "status": "modified", "additions": 34, "deletions": 77, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/0ddf7acc89d414d12c4fc04c90cf208c78fd8d5e/crates%2Fcore_simd%2Fsrc%2Fround.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ddf7acc89d414d12c4fc04c90cf208c78fd8d5e/crates%2Fcore_simd%2Fsrc%2Fround.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fround.rs?ref=0ddf7acc89d414d12c4fc04c90cf208c78fd8d5e", "patch": "@@ -1,88 +1,45 @@\n macro_rules! implement {\n     {\n-        impl $type:ident {\n-            int_type = $int_type:ident\n-        }\n+        $type:ident, $int_type:ident\n     } => {\n-        mod $type {\n-            impl crate::$type {\n-                /// Returns the largest integer less than or equal to each lane.\n-                #[must_use = \"method returns a new vector and does not mutate the original value\"]\n-                #[inline]\n-                pub fn floor(self) -> Self {\n-                    unsafe { crate::intrinsics::simd_floor(self) }\n-                }\n+        impl<const LANES: usize> crate::$type<LANES> {\n+            /// Returns the largest integer less than or equal to each lane.\n+            #[must_use = \"method returns a new vector and does not mutate the original value\"]\n+            #[inline]\n+            pub fn floor(self) -> Self {\n+                unsafe { crate::intrinsics::simd_floor(self) }\n+            }\n \n-                /// Returns the smallest integer greater than or equal to each lane.\n-                #[must_use = \"method returns a new vector and does not mutate the original value\"]\n-                #[inline]\n-                pub fn ceil(self) -> Self {\n-                    unsafe { crate::intrinsics::simd_ceil(self) }\n-                }\n+            /// Returns the smallest integer greater than or equal to each lane.\n+            #[must_use = \"method returns a new vector and does not mutate the original value\"]\n+            #[inline]\n+            pub fn ceil(self) -> Self {\n+                unsafe { crate::intrinsics::simd_ceil(self) }\n+            }\n \n-                /// Rounds toward zero and converts to the same-width integer type, assuming that\n-                /// the value is finite and fits in that type.\n-                ///\n-                /// # Safety\n-                /// The value must:\n-                ///\n-                /// * Not be NaN\n-                /// * Not be infinite\n-                /// * Be representable in the return type, after truncating off its fractional part\n-                #[inline]\n-                pub unsafe fn to_int_unchecked(self) -> crate::$int_type {\n-                    crate::intrinsics::simd_cast(self)\n-                }\n+            /// Rounds toward zero and converts to the same-width integer type, assuming that\n+            /// the value is finite and fits in that type.\n+            ///\n+            /// # Safety\n+            /// The value must:\n+            ///\n+            /// * Not be NaN\n+            /// * Not be infinite\n+            /// * Be representable in the return type, after truncating off its fractional part\n+            #[inline]\n+            pub unsafe fn to_int_unchecked(self) -> crate::$int_type<LANES> {\n+                crate::intrinsics::simd_cast(self)\n+            }\n \n-                /// Creates a floating-point vector from an integer vector.  Rounds values that are\n-                /// not exactly representable.\n-                #[inline]\n-                pub fn round_from_int(value: crate::$int_type) -> Self {\n-                    unsafe { crate::intrinsics::simd_cast(value) }\n-                }\n+            /// Creates a floating-point vector from an integer vector.  Rounds values that are\n+            /// not exactly representable.\n+            #[inline]\n+            pub fn round_from_int(value: crate::$int_type<LANES>) -> Self {\n+                unsafe { crate::intrinsics::simd_cast(value) }\n             }\n         }\n     }\n }\n \n-implement! {\n-    impl f32x2 {\n-        int_type = i32x2\n-    }\n-}\n-\n-implement! {\n-    impl f32x4 {\n-        int_type = i32x4\n-    }\n-}\n-\n-implement! {\n-    impl f32x8 {\n-        int_type = i32x8\n-    }\n-}\n-\n-implement! {\n-    impl f32x16 {\n-        int_type = i32x16\n-    }\n-}\n-\n-implement! {\n-    impl f64x2 {\n-        int_type = i64x2\n-    }\n-}\n-\n-implement! {\n-    impl f64x4 {\n-        int_type = i64x4\n-    }\n-}\n-\n-implement! {\n-    impl f64x8 {\n-        int_type = i64x8\n-    }\n-}\n+implement! { SimdF32, SimdI32 }\n+implement! { SimdF64, SimdI64 }"}, {"sha": "fe347a5362daf85053e4f2d563390b9a92d15a94", "filename": "crates/core_simd/tests/ops_impl/float_macros.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0ddf7acc89d414d12c4fc04c90cf208c78fd8d5e/crates%2Fcore_simd%2Ftests%2Fops_impl%2Ffloat_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ddf7acc89d414d12c4fc04c90cf208c78fd8d5e/crates%2Fcore_simd%2Ftests%2Fops_impl%2Ffloat_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fops_impl%2Ffloat_macros.rs?ref=0ddf7acc89d414d12c4fc04c90cf208c78fd8d5e", "patch": "@@ -335,8 +335,6 @@ macro_rules! float_tests {\n                 }\n             }\n \n-            // TODO reenable after converting float ops to platform intrinsics\n-            /*\n             #[test]\n             #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn ceil_odd_floats() {\n@@ -415,7 +413,6 @@ macro_rules! float_tests {\n                     assert_biteq!(core_simd::$vector::round_from_int(v), expected);\n                 }\n             }\n-            */\n         }\n     }\n }"}]}