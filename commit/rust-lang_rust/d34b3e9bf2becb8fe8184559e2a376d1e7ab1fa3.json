{"sha": "d34b3e9bf2becb8fe8184559e2a376d1e7ab1fa3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzNGIzZTliZjJiZWNiOGZlODE4NDU1OWUyYTM3NmQxZTdhYjFmYTM=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-01-15T22:47:49Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-01-17T22:06:08Z"}, "message": "privacy: Account for associated existential types", "tree": {"sha": "79ff1c8311ec85d5a8e97b5d9744ad8a6f786e6a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79ff1c8311ec85d5a8e97b5d9744ad8a6f786e6a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d34b3e9bf2becb8fe8184559e2a376d1e7ab1fa3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d34b3e9bf2becb8fe8184559e2a376d1e7ab1fa3", "html_url": "https://github.com/rust-lang/rust/commit/d34b3e9bf2becb8fe8184559e2a376d1e7ab1fa3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d34b3e9bf2becb8fe8184559e2a376d1e7ab1fa3/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "daa53a52a2667533d5fe59bfcc5b8614b79c3d31", "url": "https://api.github.com/repos/rust-lang/rust/commits/daa53a52a2667533d5fe59bfcc5b8614b79c3d31", "html_url": "https://github.com/rust-lang/rust/commit/daa53a52a2667533d5fe59bfcc5b8614b79c3d31"}], "stats": {"total": 82, "additions": 59, "deletions": 23}, "files": [{"sha": "c0d7248fab7f330d78b784e49ca5b38f7e9aa459", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 26, "deletions": 17, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/d34b3e9bf2becb8fe8184559e2a376d1e7ab1fa3/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d34b3e9bf2becb8fe8184559e2a376d1e7ab1fa3/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=d34b3e9bf2becb8fe8184559e2a376d1e7ab1fa3", "patch": "@@ -13,7 +13,7 @@ extern crate rustc_typeck;\n extern crate syntax_pos;\n extern crate rustc_data_structures;\n \n-use rustc::hir::{self, Node, PatKind};\n+use rustc::hir::{self, Node, PatKind, AssociatedItemKind};\n use rustc::hir::def::Def;\n use rustc::hir::def_id::{CRATE_DEF_INDEX, LOCAL_CRATE, CrateNum, DefId};\n use rustc::hir::intravisit::{self, Visitor, NestedVisitorMap};\n@@ -548,7 +548,7 @@ impl<'a, 'tcx> Visitor<'tcx> for EmbargoVisitor<'a, 'tcx> {\n                         let mut reach = self.reach(trait_item_ref.id.node_id, item_level);\n                         reach.generics().predicates();\n \n-                        if trait_item_ref.kind == hir::AssociatedItemKind::Type &&\n+                        if trait_item_ref.kind == AssociatedItemKind::Type &&\n                            !trait_item_ref.defaultness.has_value() {\n                             // No type to visit.\n                         } else {\n@@ -1333,11 +1333,11 @@ impl<'a, 'tcx> Visitor<'tcx> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n                         if self.item_is_public(&impl_item_ref.id.node_id, &impl_item_ref.vis) {\n                             let impl_item = self.tcx.hir().impl_item(impl_item_ref.id);\n                             match impl_item_ref.kind {\n-                                hir::AssociatedItemKind::Const => {\n+                                AssociatedItemKind::Const => {\n                                     found_pub_static = true;\n                                     intravisit::walk_impl_item(self, impl_item);\n                                 }\n-                                hir::AssociatedItemKind::Method { has_self: false } => {\n+                                AssociatedItemKind::Method { has_self: false } => {\n                                     found_pub_static = true;\n                                     intravisit::walk_impl_item(self, impl_item);\n                                 }\n@@ -1558,6 +1558,24 @@ impl<'a, 'tcx> PrivateItemsInPublicInterfacesVisitor<'a, 'tcx> {\n             in_assoc_ty: false,\n         }\n     }\n+\n+    fn check_trait_or_impl_item(&self, node_id: ast::NodeId, assoc_item_kind: AssociatedItemKind,\n+                                defaultness: hir::Defaultness, vis: ty::Visibility) {\n+        let mut check = self.check(node_id, vis);\n+\n+        let (check_ty, is_assoc_ty) = match assoc_item_kind {\n+            AssociatedItemKind::Const | AssociatedItemKind::Method { .. } => (true, false),\n+            AssociatedItemKind::Type => (defaultness.has_value(), true),\n+            // `ty()` for existential types is the underlying type,\n+            // it's not a part of interface, so we skip it.\n+            AssociatedItemKind::Existential => (false, true),\n+        };\n+        check.in_assoc_ty = is_assoc_ty;\n+        check.generics().predicates();\n+        if check_ty {\n+            check.ty();\n+        }\n+    }\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for PrivateItemsInPublicInterfacesVisitor<'a, 'tcx> {\n@@ -1592,16 +1610,8 @@ impl<'a, 'tcx> Visitor<'tcx> for PrivateItemsInPublicInterfacesVisitor<'a, 'tcx>\n                 self.check(item.id, item_visibility).generics().predicates();\n \n                 for trait_item_ref in trait_item_refs {\n-                    let mut check = self.check(trait_item_ref.id.node_id, item_visibility);\n-                    check.in_assoc_ty = trait_item_ref.kind == hir::AssociatedItemKind::Type;\n-                    check.generics().predicates();\n-\n-                    if trait_item_ref.kind == hir::AssociatedItemKind::Type &&\n-                       !trait_item_ref.defaultness.has_value() {\n-                        // No type to visit.\n-                    } else {\n-                        check.ty();\n-                    }\n+                    self.check_trait_or_impl_item(trait_item_ref.id.node_id, trait_item_ref.kind,\n+                                                  trait_item_ref.defaultness, item_visibility);\n                 }\n             }\n             hir::ItemKind::TraitAlias(..) => {\n@@ -1647,9 +1657,8 @@ impl<'a, 'tcx> Visitor<'tcx> for PrivateItemsInPublicInterfacesVisitor<'a, 'tcx>\n                     } else {\n                         impl_vis\n                     };\n-                    let mut check = self.check(impl_item.id, impl_item_vis);\n-                    check.in_assoc_ty = impl_item_ref.kind == hir::AssociatedItemKind::Type;\n-                    check.generics().predicates().ty();\n+                    self.check_trait_or_impl_item(impl_item_ref.id.node_id, impl_item_ref.kind,\n+                                                  impl_item_ref.defaultness, impl_item_vis);\n                 }\n             }\n         }"}, {"sha": "81d23959fd4adc4256aef2b7fe7ab3e273c7ea8e", "filename": "src/test/ui/privacy/private-in-public-assoc-ty.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d34b3e9bf2becb8fe8184559e2a376d1e7ab1fa3/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-assoc-ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d34b3e9bf2becb8fe8184559e2a376d1e7ab1fa3/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-assoc-ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-assoc-ty.rs?ref=d34b3e9bf2becb8fe8184559e2a376d1e7ab1fa3", "patch": "@@ -1,7 +1,7 @@\n // Private types and traits are not allowed in interfaces of associated types.\n // This test also ensures that the checks are performed even inside private modules.\n \n-#![feature(associated_type_defaults)]\n+#![feature(associated_type_defaults, existential_type)]\n \n mod m {\n     struct Priv;\n@@ -23,10 +23,17 @@ mod m {\n \n         type Alias4 = Priv;\n         //~^ ERROR private type `m::Priv` in public interface\n+\n+        type Exist;\n+        fn infer_exist() -> Self::Exist;\n     }\n     impl PubTr for u8 {\n         type Alias1 = Priv;\n         //~^ ERROR private type `m::Priv` in public interface\n+\n+        existential type Exist: PrivTr;\n+        //~^ ERROR private trait `m::PrivTr` in public interface\n+        fn infer_exist() -> Self::Exist { Priv }\n     }\n }\n "}, {"sha": "0e5dab1a08c37083024ea26fc8b286c04730a7df", "filename": "src/test/ui/privacy/private-in-public-assoc-ty.stderr", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d34b3e9bf2becb8fe8184559e2a376d1e7ab1fa3/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-assoc-ty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d34b3e9bf2becb8fe8184559e2a376d1e7ab1fa3/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-assoc-ty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-assoc-ty.stderr?ref=d34b3e9bf2becb8fe8184559e2a376d1e7ab1fa3", "patch": "@@ -6,7 +6,7 @@ LL | |         //~^ WARN private trait `m::PrivTr` in public interface\n LL | |         //~| WARN this was previously accepted\n LL | |         //~| WARN private type `m::Priv` in public interface\n ...  |\n-LL | |         //~^ ERROR private type `m::Priv` in public interface\n+LL | |         fn infer_exist() -> Self::Exist;\n LL | |     }\n    | |_____^\n    |\n@@ -22,7 +22,7 @@ LL | |         //~^ WARN private trait `m::PrivTr` in public interface\n LL | |         //~| WARN this was previously accepted\n LL | |         //~| WARN private type `m::Priv` in public interface\n ...  |\n-LL | |         //~^ ERROR private type `m::Priv` in public interface\n+LL | |         fn infer_exist() -> Self::Exist;\n LL | |     }\n    | |_____^\n    |\n@@ -39,14 +39,24 @@ LL |         type Alias4 = Priv;\n    |         ^^^^^^^^^^^^^^^^^^^ can't leak private type\n \n error[E0446]: private type `m::Priv` in public interface\n-  --> $DIR/private-in-public-assoc-ty.rs:28:9\n+  --> $DIR/private-in-public-assoc-ty.rs:31:9\n    |\n LL |     struct Priv;\n    |     - `m::Priv` declared as private\n ...\n LL |         type Alias1 = Priv;\n    |         ^^^^^^^^^^^^^^^^^^^ can't leak private type\n \n-error: aborting due to 2 previous errors\n+error[E0445]: private trait `m::PrivTr` in public interface\n+  --> $DIR/private-in-public-assoc-ty.rs:34:9\n+   |\n+LL |     trait PrivTr {}\n+   |     - `m::PrivTr` declared as private\n+...\n+LL |         existential type Exist: PrivTr;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can't leak private trait\n+\n+error: aborting due to 3 previous errors\n \n-For more information about this error, try `rustc --explain E0446`.\n+Some errors occurred: E0445, E0446.\n+For more information about an error, try `rustc --explain E0445`."}, {"sha": "61c6130e47019550cdba73b0dc163f41073446d4", "filename": "src/test/ui/privacy/private-in-public-existential.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d34b3e9bf2becb8fe8184559e2a376d1e7ab1fa3/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-existential.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d34b3e9bf2becb8fe8184559e2a376d1e7ab1fa3/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-existential.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-existential.rs?ref=d34b3e9bf2becb8fe8184559e2a376d1e7ab1fa3", "patch": "@@ -12,4 +12,14 @@ fn check() -> Pub {\n     Priv\n }\n \n+pub trait Trait {\n+    type Pub: Default;\n+    fn method() -> Self::Pub;\n+}\n+\n+impl Trait for u8 {\n+    existential type Pub: Default;\n+    fn method() -> Self::Pub { Priv }\n+}\n+\n fn main() {}"}]}