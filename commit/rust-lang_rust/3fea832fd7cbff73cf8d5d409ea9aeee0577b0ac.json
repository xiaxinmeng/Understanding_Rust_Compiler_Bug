{"sha": "3fea832fd7cbff73cf8d5d409ea9aeee0577b0ac", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmZWE4MzJmZDdjYmZmNzNjZjhkNWQ0MDllYTlhZWVlMDU3N2IwYWM=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-12-20T03:44:06Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-05-27T23:27:15Z"}, "message": "Fix spacing of expected/found notes without a label", "tree": {"sha": "d546f0456b1651fa8b12b5e5a4e8245317cb0838", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d546f0456b1651fa8b12b5e5a4e8245317cb0838"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3fea832fd7cbff73cf8d5d409ea9aeee0577b0ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3fea832fd7cbff73cf8d5d409ea9aeee0577b0ac", "html_url": "https://github.com/rust-lang/rust/commit/3fea832fd7cbff73cf8d5d409ea9aeee0577b0ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3fea832fd7cbff73cf8d5d409ea9aeee0577b0ac/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff991d60349201a90ca15202dd0323ebdfab8745", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff991d60349201a90ca15202dd0323ebdfab8745", "html_url": "https://github.com/rust-lang/rust/commit/ff991d60349201a90ca15202dd0323ebdfab8745"}], "stats": {"total": 167, "additions": 88, "deletions": 79}, "files": [{"sha": "cff83c3d5cda2a7e39e0520b479d8b0f47b93148", "filename": "src/librustc_errors/diagnostic.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3fea832fd7cbff73cf8d5d409ea9aeee0577b0ac/src%2Flibrustc_errors%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fea832fd7cbff73cf8d5d409ea9aeee0577b0ac/src%2Flibrustc_errors%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic.rs?ref=3fea832fd7cbff73cf8d5d409ea9aeee0577b0ac", "patch": "@@ -193,9 +193,18 @@ impl Diagnostic {\n         expected_extra: &dyn fmt::Display,\n         found_extra: &dyn fmt::Display,\n     ) -> &mut Self {\n-        let expected_label = format!(\"expected {}\", expected_label);\n-\n-        let found_label = format!(\"found {}\", found_label);\n+        let expected_label = expected_label.to_string();\n+        let expected_label = if expected_label.is_empty() {\n+            \"expected\".to_string()\n+        } else {\n+            format!(\"expected {}\", expected_label)\n+        };\n+        let found_label = found_label.to_string();\n+        let found_label = if found_label.is_empty() {\n+            \"found\".to_string()\n+        } else {\n+            format!(\"found {}\", found_label)\n+        };\n         let (found_padding, expected_padding) = if expected_label.len() > found_label.len() {\n             (expected_label.len() - found_label.len(), 0)\n         } else {"}, {"sha": "137cb83ccd32704f6e8b2920e80fb6067e68cd16", "filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant.transmute.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3fea832fd7cbff73cf8d5d409ea9aeee0577b0ac/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.transmute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fea832fd7cbff73cf8d5d409ea9aeee0577b0ac/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.transmute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.transmute.stderr?ref=3fea832fd7cbff73cf8d5d409ea9aeee0577b0ac", "patch": "@@ -14,16 +14,16 @@ note: ...so that the expression is assignable\n    |\n LL |    bar(foo, x)\n    |             ^\n-   = note: expected  `Type<'_>`\n-              found  `Type<'a>`\n+   = note: expected `Type<'_>`\n+              found `Type<'a>`\n    = note: but, the lifetime must be valid for the static lifetime...\n note: ...so that the expression is assignable\n   --> $DIR/project-fn-ret-invariant.rs:48:4\n    |\n LL |    bar(foo, x)\n    |    ^^^^^^^^^^^\n-   = note: expected  `Type<'static>`\n-              found  `Type<'_>`\n+   = note: expected `Type<'static>`\n+              found `Type<'_>`\n \n error: aborting due to previous error\n "}, {"sha": "268008c211129e704f6a5412c127a1aa1a9bf573", "filename": "src/test/ui/impl-header-lifetime-elision/dyn-trait.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3fea832fd7cbff73cf8d5d409ea9aeee0577b0ac/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fdyn-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fea832fd7cbff73cf8d5d409ea9aeee0577b0ac/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fdyn-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fdyn-trait.stderr?ref=3fea832fd7cbff73cf8d5d409ea9aeee0577b0ac", "patch": "@@ -14,16 +14,16 @@ note: ...so that the expression is assignable\n    |\n LL |     static_val(x);\n    |                ^\n-   = note: expected  `std::boxed::Box<dyn std::fmt::Debug>`\n-              found  `std::boxed::Box<(dyn std::fmt::Debug + 'a)>`\n+   = note: expected `std::boxed::Box<dyn std::fmt::Debug>`\n+              found `std::boxed::Box<(dyn std::fmt::Debug + 'a)>`\n    = note: but, the lifetime must be valid for the static lifetime...\n note: ...so that the types are compatible\n   --> $DIR/dyn-trait.rs:20:5\n    |\n LL |     static_val(x);\n    |     ^^^^^^^^^^\n-   = note: expected  `StaticTrait`\n-              found  `StaticTrait`\n+   = note: expected `StaticTrait`\n+              found `StaticTrait`\n \n error: aborting due to previous error\n "}, {"sha": "4f658330758141f7b842dd7fd1f9c8037267c4b1", "filename": "src/test/ui/issues/issue-16683.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3fea832fd7cbff73cf8d5d409ea9aeee0577b0ac/src%2Ftest%2Fui%2Fissues%2Fissue-16683.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fea832fd7cbff73cf8d5d409ea9aeee0577b0ac/src%2Ftest%2Fui%2Fissues%2Fissue-16683.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16683.stderr?ref=3fea832fd7cbff73cf8d5d409ea9aeee0577b0ac", "patch": "@@ -26,8 +26,8 @@ note: ...so that the types are compatible\n    |\n LL |         self.a();\n    |              ^\n-   = note: expected  `&'a Self`\n-              found  `&Self`\n+   = note: expected `&'a Self`\n+              found `&Self`\n \n error: aborting due to previous error\n "}, {"sha": "31788cfa61c4cf262ebb3f3628363134e65bb503", "filename": "src/test/ui/issues/issue-17758.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3fea832fd7cbff73cf8d5d409ea9aeee0577b0ac/src%2Ftest%2Fui%2Fissues%2Fissue-17758.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fea832fd7cbff73cf8d5d409ea9aeee0577b0ac/src%2Ftest%2Fui%2Fissues%2Fissue-17758.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17758.stderr?ref=3fea832fd7cbff73cf8d5d409ea9aeee0577b0ac", "patch": "@@ -27,8 +27,8 @@ note: ...so that the types are compatible\n    |\n LL |         self.foo();\n    |              ^^^\n-   = note: expected  `&'a Self`\n-              found  `&Self`\n+   = note: expected `&'a Self`\n+              found `&Self`\n \n error: aborting due to previous error\n "}, {"sha": "160a4213a40437d536636b01407f25bb99f3b7cc", "filename": "src/test/ui/issues/issue-20831-debruijn.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3fea832fd7cbff73cf8d5d409ea9aeee0577b0ac/src%2Ftest%2Fui%2Fissues%2Fissue-20831-debruijn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fea832fd7cbff73cf8d5d409ea9aeee0577b0ac/src%2Ftest%2Fui%2Fissues%2Fissue-20831-debruijn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20831-debruijn.stderr?ref=3fea832fd7cbff73cf8d5d409ea9aeee0577b0ac", "patch": "@@ -117,8 +117,8 @@ note: ...so that the types are compatible\n    |\n LL |     fn subscribe(&mut self, t : Box<dyn Subscriber<Input=<Self as Publisher>::Output> + 'a>) {\n    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: expected  `Publisher<'_>`\n-              found  `Publisher<'_>`\n+   = note: expected `Publisher<'_>`\n+              found `Publisher<'_>`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "7463af9332a7627c3588c7fc62a163f60e920c2a", "filename": "src/test/ui/issues/issue-52213.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3fea832fd7cbff73cf8d5d409ea9aeee0577b0ac/src%2Ftest%2Fui%2Fissues%2Fissue-52213.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fea832fd7cbff73cf8d5d409ea9aeee0577b0ac/src%2Ftest%2Fui%2Fissues%2Fissue-52213.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-52213.stderr?ref=3fea832fd7cbff73cf8d5d409ea9aeee0577b0ac", "patch": "@@ -14,8 +14,8 @@ note: ...so that the types are compatible\n    |\n LL |     match (&t,) {\n    |           ^^^^^\n-   = note: expected  `(&&(T,),)`\n-              found  `(&&'a (T,),)`\n+   = note: expected `(&&(T,),)`\n+              found `(&&'a (T,),)`\n note: but, the lifetime must be valid for the lifetime `'b` as defined on the function body at 1:27...\n   --> $DIR/issue-52213.rs:1:27\n    |"}, {"sha": "6bfb7af54446df8f04f79caba90c281307028c15", "filename": "src/test/ui/issues/issue-55796.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3fea832fd7cbff73cf8d5d409ea9aeee0577b0ac/src%2Ftest%2Fui%2Fissues%2Fissue-55796.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fea832fd7cbff73cf8d5d409ea9aeee0577b0ac/src%2Ftest%2Fui%2Fissues%2Fissue-55796.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-55796.stderr?ref=3fea832fd7cbff73cf8d5d409ea9aeee0577b0ac", "patch": "@@ -20,8 +20,8 @@ note: ...so that the expression is assignable\n    |\n LL |         Box::new(self.out_edges(u).map(|e| e.target()))\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: expected  `std::boxed::Box<(dyn std::iter::Iterator<Item = <Self as Graph<'a>>::Node> + 'static)>`\n-              found  `std::boxed::Box<dyn std::iter::Iterator<Item = <Self as Graph<'a>>::Node>>`\n+   = note: expected `std::boxed::Box<(dyn std::iter::Iterator<Item = <Self as Graph<'a>>::Node> + 'static)>`\n+              found `std::boxed::Box<dyn std::iter::Iterator<Item = <Self as Graph<'a>>::Node>>`\n \n error[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\n   --> $DIR/issue-55796.rs:21:9\n@@ -45,8 +45,8 @@ note: ...so that the expression is assignable\n    |\n LL |         Box::new(self.in_edges(u).map(|e| e.target()))\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: expected  `std::boxed::Box<(dyn std::iter::Iterator<Item = <Self as Graph<'a>>::Node> + 'static)>`\n-              found  `std::boxed::Box<dyn std::iter::Iterator<Item = <Self as Graph<'a>>::Node>>`\n+   = note: expected `std::boxed::Box<(dyn std::iter::Iterator<Item = <Self as Graph<'a>>::Node> + 'static)>`\n+              found `std::boxed::Box<dyn std::iter::Iterator<Item = <Self as Graph<'a>>::Node>>`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "ba8d91b8455bfab7a77a05b319372f28cc83a3ed", "filename": "src/test/ui/nll/issue-55394.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3fea832fd7cbff73cf8d5d409ea9aeee0577b0ac/src%2Ftest%2Fui%2Fnll%2Fissue-55394.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fea832fd7cbff73cf8d5d409ea9aeee0577b0ac/src%2Ftest%2Fui%2Fnll%2Fissue-55394.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-55394.stderr?ref=3fea832fd7cbff73cf8d5d409ea9aeee0577b0ac", "patch": "@@ -26,8 +26,8 @@ note: ...so that the expression is assignable\n    |\n LL |         Foo { bar }\n    |         ^^^^^^^^^^^\n-   = note: expected  `Foo<'_>`\n-              found  `Foo<'_>`\n+   = note: expected `Foo<'_>`\n+              found `Foo<'_>`\n \n error: aborting due to previous error\n "}, {"sha": "d003acd879a77407d9d161ee6345381fe0944893", "filename": "src/test/ui/nll/normalization-bounds-error.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3fea832fd7cbff73cf8d5d409ea9aeee0577b0ac/src%2Ftest%2Fui%2Fnll%2Fnormalization-bounds-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fea832fd7cbff73cf8d5d409ea9aeee0577b0ac/src%2Ftest%2Fui%2Fnll%2Fnormalization-bounds-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fnormalization-bounds-error.stderr?ref=3fea832fd7cbff73cf8d5d409ea9aeee0577b0ac", "patch": "@@ -19,8 +19,8 @@ note: ...so that the types are compatible\n    |\n LL | fn visit_seq<'d, 'a: 'd>() -> <&'a () as Visitor<'d>>::Value {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: expected  `Visitor<'d>`\n-              found  `Visitor<'_>`\n+   = note: expected `Visitor<'d>`\n+              found `Visitor<'_>`\n \n error: aborting due to previous error\n "}, {"sha": "3317aae83bb08a2e621e552d0d573b0c0e9dcdb0", "filename": "src/test/ui/nll/type-alias-free-regions.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3fea832fd7cbff73cf8d5d409ea9aeee0577b0ac/src%2Ftest%2Fui%2Fnll%2Ftype-alias-free-regions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fea832fd7cbff73cf8d5d409ea9aeee0577b0ac/src%2Ftest%2Fui%2Fnll%2Ftype-alias-free-regions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Ftype-alias-free-regions.stderr?ref=3fea832fd7cbff73cf8d5d409ea9aeee0577b0ac", "patch": "@@ -16,8 +16,8 @@ note: ...so that the expression is assignable\n    |\n LL |         C { f: b }\n    |                ^\n-   = note: expected  `std::boxed::Box<std::boxed::Box<&isize>>`\n-              found  `std::boxed::Box<std::boxed::Box<&isize>>`\n+   = note: expected `std::boxed::Box<std::boxed::Box<&isize>>`\n+              found `std::boxed::Box<std::boxed::Box<&isize>>`\n note: but, the lifetime must be valid for the lifetime `'a` as defined on the impl at 15:6...\n   --> $DIR/type-alias-free-regions.rs:15:6\n    |\n@@ -28,8 +28,8 @@ note: ...so that the expression is assignable\n    |\n LL |         C { f: b }\n    |         ^^^^^^^^^^\n-   = note: expected  `C<'a>`\n-              found  `C<'_>`\n+   = note: expected `C<'a>`\n+              found `C<'_>`\n \n error[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\n   --> $DIR/type-alias-free-regions.rs:27:16\n@@ -49,8 +49,8 @@ note: ...so that the expression is assignable\n    |\n LL |         C { f: Box::new(b.0) }\n    |                         ^^^\n-   = note: expected  `std::boxed::Box<&isize>`\n-              found  `std::boxed::Box<&isize>`\n+   = note: expected `std::boxed::Box<&isize>`\n+              found `std::boxed::Box<&isize>`\n note: but, the lifetime must be valid for the lifetime `'a` as defined on the impl at 25:6...\n   --> $DIR/type-alias-free-regions.rs:25:6\n    |\n@@ -61,8 +61,8 @@ note: ...so that the expression is assignable\n    |\n LL |         C { f: Box::new(b.0) }\n    |         ^^^^^^^^^^^^^^^^^^^^^^\n-   = note: expected  `C<'a>`\n-              found  `C<'_>`\n+   = note: expected `C<'a>`\n+              found `C<'_>`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "8421dc1d0c1303921e0981db1c908c9c8e4aa4e9", "filename": "src/test/ui/nll/user-annotations/constant-in-expr-inherent-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3fea832fd7cbff73cf8d5d409ea9aeee0577b0ac/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-inherent-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fea832fd7cbff73cf8d5d409ea9aeee0577b0ac/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-inherent-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-inherent-1.stderr?ref=3fea832fd7cbff73cf8d5d409ea9aeee0577b0ac", "patch": "@@ -14,8 +14,8 @@ note: ...so that the types are compatible\n    |\n LL |     <Foo<'a>>::C\n    |     ^^^^^^^^^^^^\n-   = note: expected  `Foo<'_>`\n-              found  `Foo<'a>`\n+   = note: expected `Foo<'_>`\n+              found `Foo<'a>`\n    = note: but, the lifetime must be valid for the static lifetime...\n note: ...so that reference does not outlive borrowed content\n   --> $DIR/constant-in-expr-inherent-1.rs:8:5"}, {"sha": "ba0a1748c5e9fd7e2676a0035809b5b783b05da8", "filename": "src/test/ui/nll/user-annotations/constant-in-expr-trait-item-3.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3fea832fd7cbff73cf8d5d409ea9aeee0577b0ac/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fea832fd7cbff73cf8d5d409ea9aeee0577b0ac/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-3.stderr?ref=3fea832fd7cbff73cf8d5d409ea9aeee0577b0ac", "patch": "@@ -14,8 +14,8 @@ note: ...so that the types are compatible\n    |\n LL |     T::C\n    |     ^^^^\n-   = note: expected  `Foo<'_>`\n-              found  `Foo<'a>`\n+   = note: expected `Foo<'_>`\n+              found `Foo<'a>`\n    = note: but, the lifetime must be valid for the static lifetime...\n note: ...so that reference does not outlive borrowed content\n   --> $DIR/constant-in-expr-trait-item-3.rs:10:5"}, {"sha": "79ded5fc875a2d41c97b53c761bf26d9efb5b10b", "filename": "src/test/ui/object-lifetime/object-lifetime-default-elision.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3fea832fd7cbff73cf8d5d409ea9aeee0577b0ac/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-elision.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fea832fd7cbff73cf8d5d409ea9aeee0577b0ac/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-elision.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-elision.stderr?ref=3fea832fd7cbff73cf8d5d409ea9aeee0577b0ac", "patch": "@@ -24,8 +24,8 @@ note: ...so that the expression is assignable\n    |\n LL |     ss\n    |     ^^\n-   = note: expected  `&'b (dyn SomeTrait + 'b)`\n-              found  `&dyn SomeTrait`\n+   = note: expected `&'b (dyn SomeTrait + 'b)`\n+              found `&dyn SomeTrait`\n \n error[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\n   --> $DIR/object-lifetime-default-elision.rs:71:5\n@@ -53,8 +53,8 @@ note: ...so that the expression is assignable\n    |\n LL |     ss\n    |     ^^\n-   = note: expected  `&'b (dyn SomeTrait + 'b)`\n-              found  `&dyn SomeTrait`\n+   = note: expected `&'b (dyn SomeTrait + 'b)`\n+              found `&dyn SomeTrait`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "069b897603cb916ac32b458f3fae5ed10e9fcebd", "filename": "src/test/ui/regions/region-object-lifetime-in-coercion.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3fea832fd7cbff73cf8d5d409ea9aeee0577b0ac/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fea832fd7cbff73cf8d5d409ea9aeee0577b0ac/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.stderr?ref=3fea832fd7cbff73cf8d5d409ea9aeee0577b0ac", "patch": "@@ -39,8 +39,8 @@ note: ...so that the expression is assignable\n    |\n LL |     Box::new(v)\n    |              ^\n-   = note: expected  `&[u8]`\n-              found  `&'a [u8]`\n+   = note: expected `&[u8]`\n+              found `&'a [u8]`\n note: but, the lifetime must be valid for the lifetime `'b` as defined on the function body at 25:9...\n   --> $DIR/region-object-lifetime-in-coercion.rs:25:9\n    |\n@@ -51,8 +51,8 @@ note: ...so that the expression is assignable\n    |\n LL |     Box::new(v)\n    |     ^^^^^^^^^^^\n-   = note: expected  `std::boxed::Box<(dyn Foo + 'b)>`\n-              found  `std::boxed::Box<dyn Foo>`\n+   = note: expected `std::boxed::Box<(dyn Foo + 'b)>`\n+              found `std::boxed::Box<dyn Foo>`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "c134b3b3ed554a01598e561b9d75b8de8e698d6c", "filename": "src/test/ui/regions/regions-assoc-type-region-bound-in-trait-not-met.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3fea832fd7cbff73cf8d5d409ea9aeee0577b0ac/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-region-bound-in-trait-not-met.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fea832fd7cbff73cf8d5d409ea9aeee0577b0ac/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-region-bound-in-trait-not-met.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-region-bound-in-trait-not-met.stderr?ref=3fea832fd7cbff73cf8d5d409ea9aeee0577b0ac", "patch": "@@ -14,8 +14,8 @@ note: ...so that the types are compatible\n    |\n LL | impl<'a> Foo<'static> for &'a i32 {\n    |          ^^^^^^^^^^^^\n-   = note: expected  `Foo<'static>`\n-              found  `Foo<'static>`\n+   = note: expected `Foo<'static>`\n+              found `Foo<'static>`\n    = note: but, the lifetime must be valid for the static lifetime...\n note: ...so that the type `&i32` will meet its required lifetime bounds\n   --> $DIR/regions-assoc-type-region-bound-in-trait-not-met.rs:14:10\n@@ -39,8 +39,8 @@ note: ...so that the types are compatible\n    |\n LL | impl<'a,'b> Foo<'b> for &'a i64 {\n    |             ^^^^^^^\n-   = note: expected  `Foo<'b>`\n-              found  `Foo<'_>`\n+   = note: expected `Foo<'b>`\n+              found `Foo<'_>`\n note: but, the lifetime must be valid for the lifetime `'b` as defined on the impl at 19:9...\n   --> $DIR/regions-assoc-type-region-bound-in-trait-not-met.rs:19:9\n    |"}, {"sha": "ac8c55ccc8fd4c679f2ee9a22fc0e514d973860d", "filename": "src/test/ui/regions/regions-assoc-type-static-bound-in-trait-not-met.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3fea832fd7cbff73cf8d5d409ea9aeee0577b0ac/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-static-bound-in-trait-not-met.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fea832fd7cbff73cf8d5d409ea9aeee0577b0ac/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-static-bound-in-trait-not-met.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-static-bound-in-trait-not-met.stderr?ref=3fea832fd7cbff73cf8d5d409ea9aeee0577b0ac", "patch": "@@ -14,8 +14,8 @@ note: ...so that the types are compatible\n    |\n LL | impl<'a> Foo for &'a i32 {\n    |          ^^^\n-   = note: expected  `Foo`\n-              found  `Foo`\n+   = note: expected `Foo`\n+              found `Foo`\n    = note: but, the lifetime must be valid for the static lifetime...\n note: ...so that the type `&i32` will meet its required lifetime bounds\n   --> $DIR/regions-assoc-type-static-bound-in-trait-not-met.rs:9:10"}, {"sha": "147f7f3541816c0b0ffca03bf433a4bbc73ca6e4", "filename": "src/test/ui/regions/regions-close-object-into-object-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3fea832fd7cbff73cf8d5d409ea9aeee0577b0ac/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fea832fd7cbff73cf8d5d409ea9aeee0577b0ac/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.stderr?ref=3fea832fd7cbff73cf8d5d409ea9aeee0577b0ac", "patch": "@@ -20,8 +20,8 @@ note: ...so that the expression is assignable\n    |\n LL |     box B(&*v) as Box<dyn X>\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: expected  `std::boxed::Box<(dyn X + 'static)>`\n-              found  `std::boxed::Box<dyn X>`\n+   = note: expected `std::boxed::Box<(dyn X + 'static)>`\n+              found `std::boxed::Box<dyn X>`\n \n error: aborting due to previous error\n "}, {"sha": "6e7d6152cd09a28cfef15cbaeebb8caa8ab6879c", "filename": "src/test/ui/regions/regions-close-object-into-object-4.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3fea832fd7cbff73cf8d5d409ea9aeee0577b0ac/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fea832fd7cbff73cf8d5d409ea9aeee0577b0ac/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.stderr?ref=3fea832fd7cbff73cf8d5d409ea9aeee0577b0ac", "patch": "@@ -20,8 +20,8 @@ note: ...so that the expression is assignable\n    |\n LL |     box B(&*v) as Box<dyn X>\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: expected  `std::boxed::Box<(dyn X + 'static)>`\n-              found  `std::boxed::Box<dyn X>`\n+   = note: expected `std::boxed::Box<(dyn X + 'static)>`\n+              found `std::boxed::Box<dyn X>`\n \n error: aborting due to previous error\n "}, {"sha": "2070ce257b18d37a1802b4f35f93037f52e9a892", "filename": "src/test/ui/regions/regions-close-over-type-parameter-multiple.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3fea832fd7cbff73cf8d5d409ea9aeee0577b0ac/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-multiple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fea832fd7cbff73cf8d5d409ea9aeee0577b0ac/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-multiple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-multiple.stderr?ref=3fea832fd7cbff73cf8d5d409ea9aeee0577b0ac", "patch": "@@ -24,8 +24,8 @@ note: ...so that the expression is assignable\n    |\n LL |     box v as Box<dyn SomeTrait + 'a>\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: expected  `std::boxed::Box<(dyn SomeTrait + 'c)>`\n-              found  `std::boxed::Box<dyn SomeTrait>`\n+   = note: expected `std::boxed::Box<(dyn SomeTrait + 'c)>`\n+              found `std::boxed::Box<dyn SomeTrait>`\n \n error: aborting due to previous error\n "}, {"sha": "b24db1df18b0a9451470eac54ca3790da439be36", "filename": "src/test/ui/regions/regions-creating-enums4.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3fea832fd7cbff73cf8d5d409ea9aeee0577b0ac/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fea832fd7cbff73cf8d5d409ea9aeee0577b0ac/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums4.stderr?ref=3fea832fd7cbff73cf8d5d409ea9aeee0577b0ac", "patch": "@@ -14,8 +14,8 @@ note: ...so that the expression is assignable\n    |\n LL |     Ast::Add(x, y)\n    |              ^\n-   = note: expected  `&Ast<'_>`\n-              found  `&Ast<'a>`\n+   = note: expected `&Ast<'_>`\n+              found `&Ast<'a>`\n note: but, the lifetime must be valid for the lifetime `'b` as defined on the function body at 6:19...\n   --> $DIR/regions-creating-enums4.rs:6:19\n    |\n@@ -26,8 +26,8 @@ note: ...so that the expression is assignable\n    |\n LL |     Ast::Add(x, y)\n    |     ^^^^^^^^^^^^^^\n-   = note: expected  `Ast<'b>`\n-              found  `Ast<'_>`\n+   = note: expected `Ast<'b>`\n+              found `Ast<'_>`\n \n error: aborting due to previous error\n "}, {"sha": "9e405d83140d8d2b66f18d8ae9828f179d6ee787", "filename": "src/test/ui/regions/regions-nested-fns.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3fea832fd7cbff73cf8d5d409ea9aeee0577b0ac/src%2Ftest%2Fui%2Fregions%2Fregions-nested-fns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fea832fd7cbff73cf8d5d409ea9aeee0577b0ac/src%2Ftest%2Fui%2Fregions%2Fregions-nested-fns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-nested-fns.stderr?ref=3fea832fd7cbff73cf8d5d409ea9aeee0577b0ac", "patch": "@@ -39,8 +39,8 @@ LL | |         if false { return ay; }\n LL | |         return z;\n LL | |     }));\n    | |_____^\n-   = note: expected  `&isize`\n-              found  `&isize`\n+   = note: expected `&isize`\n+              found `&isize`\n \n error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n   --> $DIR/regions-nested-fns.rs:14:27"}, {"sha": "a274fd9d658a91f8c0e463e5a7b8465c6181f66e", "filename": "src/test/ui/regions/regions-normalize-in-where-clause-list.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3fea832fd7cbff73cf8d5d409ea9aeee0577b0ac/src%2Ftest%2Fui%2Fregions%2Fregions-normalize-in-where-clause-list.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fea832fd7cbff73cf8d5d409ea9aeee0577b0ac/src%2Ftest%2Fui%2Fregions%2Fregions-normalize-in-where-clause-list.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-normalize-in-where-clause-list.stderr?ref=3fea832fd7cbff73cf8d5d409ea9aeee0577b0ac", "patch": "@@ -29,8 +29,8 @@ LL | |     where <() as Project<'a, 'b>>::Item : Eq\n LL | | {\n LL | | }\n    | |_^\n-   = note: expected  `Project<'a, 'b>`\n-              found  `Project<'_, '_>`\n+   = note: expected `Project<'a, 'b>`\n+              found `Project<'_, '_>`\n \n error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'a` due to conflicting requirements\n   --> $DIR/regions-normalize-in-where-clause-list.rs:22:1"}, {"sha": "2c4769d8e37516e996192a5141f9e8eabf65b25c", "filename": "src/test/ui/regions/regions-ret-borrowed-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3fea832fd7cbff73cf8d5d409ea9aeee0577b0ac/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fea832fd7cbff73cf8d5d409ea9aeee0577b0ac/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed-1.stderr?ref=3fea832fd7cbff73cf8d5d409ea9aeee0577b0ac", "patch": "@@ -14,8 +14,8 @@ note: ...so that the expression is assignable\n    |\n LL |     with(|o| o)\n    |              ^\n-   = note: expected  `&isize`\n-              found  `&isize`\n+   = note: expected `&isize`\n+              found `&isize`\n note: but, the lifetime must be valid for the lifetime `'a` as defined on the function body at 9:14...\n   --> $DIR/regions-ret-borrowed-1.rs:9:14\n    |"}, {"sha": "da560107cea997ef81166664786b9ba0b26ddb3c", "filename": "src/test/ui/regions/regions-ret-borrowed.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3fea832fd7cbff73cf8d5d409ea9aeee0577b0ac/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fea832fd7cbff73cf8d5d409ea9aeee0577b0ac/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed.stderr?ref=3fea832fd7cbff73cf8d5d409ea9aeee0577b0ac", "patch": "@@ -14,8 +14,8 @@ note: ...so that the expression is assignable\n    |\n LL |     with(|o| o)\n    |              ^\n-   = note: expected  `&isize`\n-              found  `&isize`\n+   = note: expected `&isize`\n+              found `&isize`\n note: but, the lifetime must be valid for the lifetime `'a` as defined on the function body at 12:14...\n   --> $DIR/regions-ret-borrowed.rs:12:14\n    |"}, {"sha": "7478b53bd3ccc02c7097f35f8aef4bad0918e205", "filename": "src/test/ui/regions/regions-trait-object-subtyping.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3fea832fd7cbff73cf8d5d409ea9aeee0577b0ac/src%2Ftest%2Fui%2Fregions%2Fregions-trait-object-subtyping.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fea832fd7cbff73cf8d5d409ea9aeee0577b0ac/src%2Ftest%2Fui%2Fregions%2Fregions-trait-object-subtyping.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-trait-object-subtyping.stderr?ref=3fea832fd7cbff73cf8d5d409ea9aeee0577b0ac", "patch": "@@ -41,8 +41,8 @@ note: ...so that the expression is assignable\n    |\n LL |     x\n    |     ^\n-   = note: expected  `&'b mut (dyn Dummy + 'b)`\n-              found  `&mut (dyn Dummy + 'b)`\n+   = note: expected `&'b mut (dyn Dummy + 'b)`\n+              found `&mut (dyn Dummy + 'b)`\n \n error[E0308]: mismatched types\n   --> $DIR/regions-trait-object-subtyping.rs:22:5"}, {"sha": "f819faa27899565c9a33b8a68de659aa05f91eb5", "filename": "src/test/ui/reject-specialized-drops-8142.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3fea832fd7cbff73cf8d5d409ea9aeee0577b0ac/src%2Ftest%2Fui%2Freject-specialized-drops-8142.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fea832fd7cbff73cf8d5d409ea9aeee0577b0ac/src%2Ftest%2Fui%2Freject-specialized-drops-8142.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freject-specialized-drops-8142.stderr?ref=3fea832fd7cbff73cf8d5d409ea9aeee0577b0ac", "patch": "@@ -118,8 +118,8 @@ note: ...so that the types are compatible\n    |\n LL | impl<'lw>         Drop for W<'lw,'lw>     { fn drop(&mut self) { } } // REJECT\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: expected  `W<'l1, 'l2>`\n-              found  `W<'_, '_>`\n+   = note: expected `W<'l1, 'l2>`\n+              found `W<'_, '_>`\n \n error[E0367]: `Drop` impl requires `AddsBnd: Bound` but the enum it is implemented for does not\n   --> $DIR/reject-specialized-drops-8142.rs:61:14"}, {"sha": "46aa7db967ad4bb6aca754e3e9fe7a7ab4ac9988", "filename": "src/test/ui/traits/trait-impl-of-supertrait-has-wrong-lifetime-parameters.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3fea832fd7cbff73cf8d5d409ea9aeee0577b0ac/src%2Ftest%2Fui%2Ftraits%2Ftrait-impl-of-supertrait-has-wrong-lifetime-parameters.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fea832fd7cbff73cf8d5d409ea9aeee0577b0ac/src%2Ftest%2Fui%2Ftraits%2Ftrait-impl-of-supertrait-has-wrong-lifetime-parameters.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-impl-of-supertrait-has-wrong-lifetime-parameters.stderr?ref=3fea832fd7cbff73cf8d5d409ea9aeee0577b0ac", "patch": "@@ -19,8 +19,8 @@ note: ...so that the types are compatible\n    |\n LL | impl<'a,'b> T2<'a, 'b> for S<'a, 'b> {\n    |             ^^^^^^^^^^\n-   = note: expected  `T1<'a>`\n-              found  `T1<'_>`\n+   = note: expected `T1<'a>`\n+              found `T1<'_>`\n \n error: aborting due to previous error\n "}, {"sha": "e3c9d50dfe5b31b291c7841a40a00a7c97316404", "filename": "src/test/ui/underscore-lifetime/dyn-trait-underscore.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3fea832fd7cbff73cf8d5d409ea9aeee0577b0ac/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fea832fd7cbff73cf8d5d409ea9aeee0577b0ac/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.stderr?ref=3fea832fd7cbff73cf8d5d409ea9aeee0577b0ac", "patch": "@@ -23,8 +23,8 @@ note: ...so that the expression is assignable\n    |\n LL |     Box::new(items.iter())\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n-   = note: expected  `std::boxed::Box<(dyn std::iter::Iterator<Item = &T> + 'static)>`\n-              found  `std::boxed::Box<dyn std::iter::Iterator<Item = &T>>`\n+   = note: expected `std::boxed::Box<(dyn std::iter::Iterator<Item = &T> + 'static)>`\n+              found `std::boxed::Box<dyn std::iter::Iterator<Item = &T>>`\n \n error: aborting due to previous error\n "}]}