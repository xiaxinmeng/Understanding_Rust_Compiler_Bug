{"sha": "037a5b1af4b66e44d6d2130cedb576c5659bac8c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzN2E1YjFhZjRiNjZlNDRkNmQyMTMwY2VkYjU3NmM1NjU5YmFjOGM=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-07-23T19:30:34Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-07-23T23:56:58Z"}, "message": "str: move as_mut_buf into OwnedStr, and make it `self`", "tree": {"sha": "f7a30a2659f28cb94148c7a4c26f4cf07a199970", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7a30a2659f28cb94148c7a4c26f4cf07a199970"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/037a5b1af4b66e44d6d2130cedb576c5659bac8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/037a5b1af4b66e44d6d2130cedb576c5659bac8c", "html_url": "https://github.com/rust-lang/rust/commit/037a5b1af4b66e44d6d2130cedb576c5659bac8c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/037a5b1af4b66e44d6d2130cedb576c5659bac8c/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2dd3c44a566537ef3f45e62e04148d61ab3cfd85", "url": "https://api.github.com/repos/rust-lang/rust/commits/2dd3c44a566537ef3f45e62e04148d61ab3cfd85", "html_url": "https://github.com/rust-lang/rust/commit/2dd3c44a566537ef3f45e62e04148d61ab3cfd85"}], "stats": {"total": 36, "additions": 18, "deletions": 18}, "files": [{"sha": "95cbc5aa4097e12e2b051e8508fa66ec85c315d4", "filename": "src/libstd/str.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/037a5b1af4b66e44d6d2130cedb576c5659bac8c/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/037a5b1af4b66e44d6d2130cedb576c5659bac8c/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=037a5b1af4b66e44d6d2130cedb576c5659bac8c", "patch": "@@ -1192,7 +1192,6 @@ pub trait StrSlice<'self> {\n     fn subslice_offset(&self, inner: &str) -> uint;\n \n     fn as_imm_buf<T>(&self, f: &fn(*u8, uint) -> T) -> T;\n-    fn as_mut_buf<T>(&self, f: &fn(*mut u8, uint) -> T) -> T;\n     fn as_c_str<T>(&self, f: &fn(*libc::c_char) -> T) -> T;\n }\n \n@@ -1965,23 +1964,6 @@ impl<'self> StrSlice<'self> for &'self str {\n         }\n     }\n \n-    /**\n-     * Work with the byte buffer and length of a slice.\n-     *\n-     * The given length is one byte longer than the 'official' indexable\n-     * length of the string. This is to permit probing the byte past the\n-     * indexable area for a null byte, as is the case in slices pointing\n-     * to full strings, or suffixes of them.\n-     */\n-    #[inline]\n-    fn as_mut_buf<T>(&self, f: &fn(*mut u8, uint) -> T) -> T {\n-        unsafe {\n-            let v: *(*mut u8, uint) = cast::transmute(self);\n-            let (buf, len) = *v;\n-            f(buf, len)\n-        }\n-    }\n-\n     /**\n      * Work with the byte buffer of a string as a null-terminated C string.\n      *\n@@ -2056,6 +2038,18 @@ pub trait OwnedStr {\n     fn reserve_at_least(&mut self, n: uint);\n     fn capacity(&self) -> uint;\n     fn to_bytes_with_null(self) -> ~[u8];\n+\n+    /**\n+     * Work with the mutable byte buffer and length of a slice.\n+     *\n+     * The given length is one byte longer than the 'official' indexable\n+     * length of the string. This is to permit probing the byte past the\n+     * indexable area for a null byte, as is the case in slices pointing\n+     * to full strings, or suffixes of them.\n+     *\n+     * Make sure any mutations to this buffer keep this string valid UTF8.\n+     */\n+    fn as_mut_buf<T>(&mut self, f: &fn(*mut u8, uint) -> T) -> T;\n }\n \n impl OwnedStr for ~str {\n@@ -2246,6 +2240,12 @@ impl OwnedStr for ~str {\n     fn to_bytes_with_null(self) -> ~[u8] {\n         unsafe { ::cast::transmute(self) }\n     }\n+\n+    #[inline]\n+    fn as_mut_buf<T>(&mut self, f: &fn(*mut u8, uint) -> T) -> T {\n+        let v: &mut ~[u8] = unsafe { cast::transmute(self) };\n+        v.as_mut_buf(f)\n+    }\n }\n \n impl Clone for ~str {"}]}