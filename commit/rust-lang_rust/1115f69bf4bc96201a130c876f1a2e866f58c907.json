{"sha": "1115f69bf4bc96201a130c876f1a2e866f58c907", "node_id": "C_kwDOAAsO6NoAKDExMTVmNjliZjRiYzk2MjAxYTEzMGM4NzZmMWEyZTg2NmY1OGM5MDc", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2022-01-08T00:20:53Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2022-02-09T19:39:12Z"}, "message": "Deduplicate item sections", "tree": {"sha": "08808ece68e3adc5af9979c58e6a8a1bd035a63e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08808ece68e3adc5af9979c58e6a8a1bd035a63e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1115f69bf4bc96201a130c876f1a2e866f58c907", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1115f69bf4bc96201a130c876f1a2e866f58c907", "html_url": "https://github.com/rust-lang/rust/commit/1115f69bf4bc96201a130c876f1a2e866f58c907", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1115f69bf4bc96201a130c876f1a2e866f58c907/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa400ace11f9db1e299fef3992d3301ccd985bf0", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa400ace11f9db1e299fef3992d3301ccd985bf0", "html_url": "https://github.com/rust-lang/rust/commit/fa400ace11f9db1e299fef3992d3301ccd985bf0"}], "stats": {"total": 35, "additions": 13, "deletions": 22}, "files": [{"sha": "279047a2d1cc373fe4373ac9902e29c0138eb1da", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1115f69bf4bc96201a130c876f1a2e866f58c907/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1115f69bf4bc96201a130c876f1a2e866f58c907/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=1115f69bf4bc96201a130c876f1a2e866f58c907", "patch": "@@ -2534,19 +2534,11 @@ fn item_ty_to_section(ty: ItemType) -> ItemSection {\n fn sidebar_module(buf: &mut Buffer, items: &[clean::Item]) {\n     let mut sidebar = String::new();\n \n-    // Re-exports are handled a bit differently because they can be extern crates or imports.\n-    if items.iter().any(|it| {\n-        it.name.is_some()\n-            && (it.type_() == ItemType::ExternCrate\n-                || (it.type_() == ItemType::Import && !it.is_stripped()))\n-    }) {\n-        let sec = item_ty_to_section(ItemType::Import);\n-        sidebar.push_str(&format!(\"<li><a href=\\\"#{}\\\">{}</a></li>\", sec.id(), sec.name()));\n-    }\n-\n+    let mut already_emitted_sections = FxHashSet::default();\n     // ordering taken from item_module, reorder, where it prioritized elements in a certain order\n     // to print its headings\n     for &myty in &[\n+        ItemType::Import,\n         ItemType::Primitive,\n         ItemType::Module,\n         ItemType::Macro,\n@@ -2570,6 +2562,9 @@ fn sidebar_module(buf: &mut Buffer, items: &[clean::Item]) {\n     ] {\n         if items.iter().any(|it| !it.is_stripped() && it.type_() == myty && it.name.is_some()) {\n             let sec = item_ty_to_section(myty);\n+            if !already_emitted_sections.insert(sec) {\n+                continue;\n+            }\n             sidebar.push_str(&format!(\"<li><a href=\\\"#{}\\\">{}</a></li>\", sec.id(), sec.name()));\n         }\n     }"}, {"sha": "e781e3c1ef47654dea148bb3a1f1a1d86bfeaac1", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1115f69bf4bc96201a130c876f1a2e866f58c907/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1115f69bf4bc96201a130c876f1a2e866f58c907/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=1115f69bf4bc96201a130c876f1a2e866f58c907", "patch": "@@ -271,32 +271,28 @@ fn item_module(w: &mut Buffer, cx: &Context<'_>, item: &clean::Item, items: &[cl\n     });\n \n     debug!(\"{:?}\", indices);\n-    let mut curty = None;\n+    let mut last_section = None;\n \n     for &idx in &indices {\n         let myitem = &items[idx];\n         if myitem.is_stripped() {\n             continue;\n         }\n \n-        let myty = Some(myitem.type_());\n-        if curty == Some(ItemType::ExternCrate) && myty == Some(ItemType::Import) {\n-            // Put `extern crate` and `use` re-exports in the same section.\n-            curty = myty;\n-        } else if myty != curty {\n-            if curty.is_some() {\n+        let my_section = item_ty_to_section(myitem.type_());\n+        if Some(my_section) != last_section {\n+            if last_section.is_some() {\n                 w.write_str(ITEM_TABLE_CLOSE);\n             }\n-            curty = myty;\n-            let sec = item_ty_to_section(myty.unwrap());\n+            last_section = Some(my_section);\n             write!(\n                 w,\n                 \"<h2 id=\\\"{id}\\\" class=\\\"small-section-header\\\">\\\n                     <a href=\\\"#{id}\\\">{name}</a>\\\n                  </h2>\\n{}\",\n                 ITEM_TABLE_OPEN,\n-                id = cx.derive_id(sec.id().to_owned()),\n-                name = sec.name(),\n+                id = cx.derive_id(my_section.id().to_owned()),\n+                name = my_section.name(),\n             );\n         }\n \n@@ -408,7 +404,7 @@ fn item_module(w: &mut Buffer, cx: &Context<'_>, item: &clean::Item, items: &[cl\n         }\n     }\n \n-    if curty.is_some() {\n+    if last_section.is_some() {\n         w.write_str(ITEM_TABLE_CLOSE);\n     }\n }"}]}