{"sha": "73764ab8cdea2954927e30e9ed48481f159db1ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczNzY0YWI4Y2RlYTI5NTQ5MjdlMzBlOWVkNDg0ODFmMTU5ZGIxZmY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-29T05:43:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-29T05:43:02Z"}, "message": "Auto merge of #5840 - flip1995:basics, r=phansch\n\nBasic instruction for new contributors\n\nWhile answering a few questions to @AB1908, I realized, that our documentation could use some love. Especially the \"Getting Started\" part for new contributors. So I wrote together some instruction on how to get the toolchain and how to build and test Clippy.\n\n[Rendered](https://github.com/flip1995/rust-clippy/blob/basics/doc/basics.md)\n\nr? @phansch\n\nchangelog: none", "tree": {"sha": "77dda68d22046855d8349f02da4856f47e3bd18e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77dda68d22046855d8349f02da4856f47e3bd18e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/73764ab8cdea2954927e30e9ed48481f159db1ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/73764ab8cdea2954927e30e9ed48481f159db1ff", "html_url": "https://github.com/rust-lang/rust/commit/73764ab8cdea2954927e30e9ed48481f159db1ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/73764ab8cdea2954927e30e9ed48481f159db1ff/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61eab6e8f9a1f0862aa15e18a939bbcf82affc9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/61eab6e8f9a1f0862aa15e18a939bbcf82affc9a", "html_url": "https://github.com/rust-lang/rust/commit/61eab6e8f9a1f0862aa15e18a939bbcf82affc9a"}, {"sha": "3a4cc9f7f085e73fbfe57e8c896b90a5fe61c4f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a4cc9f7f085e73fbfe57e8c896b90a5fe61c4f4", "html_url": "https://github.com/rust-lang/rust/commit/3a4cc9f7f085e73fbfe57e8c896b90a5fe61c4f4"}], "stats": {"total": 152, "additions": 130, "deletions": 22}, "files": [{"sha": "dfc5cc077c37f65b5ca7ed3f3394933a6c99b16a", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/73764ab8cdea2954927e30e9ed48481f159db1ff/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/73764ab8cdea2954927e30e9ed48481f159db1ff/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=73764ab8cdea2954927e30e9ed48481f159db1ff", "patch": "@@ -32,7 +32,7 @@ High level approach:\n \n 1. Find something to fix/improve\n 2. Change code (likely some file in `clippy_lints/src/`)\n-3. Follow the instructions in the [docs for writing lints](doc/adding_lints.md) such as running the `setup-toolchain.sh` script\n+3. Follow the instructions in the [Basics docs](doc/basics.md) such as running the `setup-toolchain.sh` script\n 4. Run `cargo test` in the root directory and wiggle code until it passes\n 5. Open a PR (also can be done after 2. if you run into problems)\n \n@@ -95,16 +95,16 @@ quick read.\n \n ## Getting code-completion for rustc internals to work\n \n-Unfortunately, [`rust-analyzer`][ra_homepage] does not (yet?) understand how Clippy uses compiler-internals \n-using `extern crate` and it also needs to be able to read the source files of the rustc-compiler which are not \n-available via a `rustup` component at the time of writing.  \n-To work around this, you need to have a copy of the [rustc-repo][rustc_repo] available which can be obtained via  \n-`git clone https://github.com/rust-lang/rust/`.  \n-Then you can run a `cargo dev` command to automatically make Clippy use the rustc-repo via path-dependencies \n-which rust-analyzer will be able to understand.  \n-Run `cargo dev ra-setup --repo-path <repo-path>` where `<repo-path>` is an absolute path to the rustc repo \n-you just cloned.  \n-The command will add path-dependencies pointing towards rustc-crates inside the rustc repo to \n+Unfortunately, [`rust-analyzer`][ra_homepage] does not (yet?) understand how Clippy uses compiler-internals\n+using `extern crate` and it also needs to be able to read the source files of the rustc-compiler which are not\n+available via a `rustup` component at the time of writing.\n+To work around this, you need to have a copy of the [rustc-repo][rustc_repo] available which can be obtained via\n+`git clone https://github.com/rust-lang/rust/`.\n+Then you can run a `cargo dev` command to automatically make Clippy use the rustc-repo via path-dependencies\n+which rust-analyzer will be able to understand.\n+Run `cargo dev ra-setup --repo-path <repo-path>` where `<repo-path>` is an absolute path to the rustc repo\n+you just cloned.\n+The command will add path-dependencies pointing towards rustc-crates inside the rustc repo to\n Clippys `Cargo.toml`s and should allow rust-analyzer to understand most of the types that Clippy uses.\n Just make sure to remove the dependencies again before finally making a pull request!\n "}, {"sha": "168092f7329cc0caed65ea30f0edfe20ac91644c", "filename": "doc/adding_lints.md", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/73764ab8cdea2954927e30e9ed48481f159db1ff/doc%2Fadding_lints.md", "raw_url": "https://github.com/rust-lang/rust/raw/73764ab8cdea2954927e30e9ed48481f159db1ff/doc%2Fadding_lints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fadding_lints.md?ref=73764ab8cdea2954927e30e9ed48481f159db1ff", "patch": "@@ -27,23 +27,22 @@ because that's clearly a non-descriptive name.\n \n ## Setup\n \n-When working on Clippy, you will need the current git master version of rustc,\n-which can change rapidly. Make sure you're working near rust-clippy's master,\n-and use the `setup-toolchain.sh` script to configure the appropriate toolchain\n-for the Clippy directory.\n+See the [Basics](basics.md#get-the-code) documentation.\n \n ## Getting Started\n \n There is a bit of boilerplate code that needs to be set up when creating a new\n lint. Fortunately, you can use the clippy dev tools to handle this for you. We\n are naming our new lint `foo_functions` (lints are generally written in snake\n case), and we don't need type information so it will have an early pass type\n-(more on this later on). To get started on this lint you can run\n-`cargo dev new_lint --name=foo_functions --pass=early --category=pedantic`\n-(category will default to nursery if not provided). This command will create\n-two files: `tests/ui/foo_functions.rs` and `clippy_lints/src/foo_functions.rs`,\n-as well as run `cargo dev update_lints` to register the new lint. For cargo lints,\n-two project hierarchies (fail/pass) will be created by default under `tests/ui-cargo`.\n+(more on this later on). If you're not sure if the name you chose fits the lint,\n+take a look at our [lint naming guidelines][lint_naming]. To get started on this\n+lint you can run `cargo dev new_lint --name=foo_functions --pass=early\n+--category=pedantic` (category will default to nursery if not provided). This\n+command will create two files: `tests/ui/foo_functions.rs` and\n+`clippy_lints/src/foo_functions.rs`, as well as run `cargo dev update_lints` to\n+register the new lint. For cargo lints, two project hierarchies (fail/pass) will\n+be created by default under `tests/ui-cargo`.\n \n Next, we'll open up these files and add our lint!\n \n@@ -113,7 +112,7 @@ For cargo lints, the process of testing differs in that we are interested in\n the `Cargo.toml` manifest file. We also need a minimal crate associated\n with that manifest.\n \n-If our new lint is named e.g. `foo_categories`, after running `cargo dev new_lint` \n+If our new lint is named e.g. `foo_categories`, after running `cargo dev new_lint`\n we will find by default two new crates, each with its manifest file:\n \n * `tests/ui-cargo/foo_categories/fail/Cargo.toml`: this file should cause the new lint to raise an error."}, {"sha": "5c07d9b98a5a83d8fd47ad5bbd7555d225a210f9", "filename": "doc/basics.md", "status": "added", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/73764ab8cdea2954927e30e9ed48481f159db1ff/doc%2Fbasics.md", "raw_url": "https://github.com/rust-lang/rust/raw/73764ab8cdea2954927e30e9ed48481f159db1ff/doc%2Fbasics.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fbasics.md?ref=73764ab8cdea2954927e30e9ed48481f159db1ff", "patch": "@@ -0,0 +1,109 @@\n+# Basics for hacking on Clippy\n+\n+This document explains the basics for hacking on Clippy. Besides others, this\n+includes how to set-up the development environment, how to build and how to test\n+Clippy. For a more in depth description on the codebase take a look at [Adding\n+Lints] or [Common Tools].\n+\n+[Adding Lints]: https://github.com/rust-lang/rust-clippy/blob/master/doc/adding_lints.md\n+[Common Tools]: https://github.com/rust-lang/rust-clippy/blob/master/doc/common_tools_writing_lints.md\n+\n+- [Basics for hacking on Clippy](#basics-for-hacking-on-clippy)\n+  - [Get the code](#get-the-code)\n+  - [Setup](#setup)\n+  - [Building and Testing](#building-and-testing)\n+  - [`cargo dev`](#cargo-dev)\n+\n+## Get the Code\n+\n+First, make sure you have checked out the latest version of Clippy. If this is\n+your first time working on Clippy, create a fork of the repository and clone it\n+afterwards with the following command:\n+\n+```bash\n+git clone git@github.com:<your-username>/rust-clippy\n+```\n+\n+If you've already cloned Clippy in the past, update it to the latest version:\n+\n+```bash\n+# upstream has to be the remote of the rust-lang/rust-clippy repo\n+git fetch upstream\n+# make sure that you are on the master branch\n+git checkout master\n+# rebase your master branch on the upstream master\n+git rebase upstream/master\n+# push to the master branch of your fork\n+git push\n+```\n+\n+## Setup\n+\n+Next we need to setup the toolchain to compile Clippy. Since Clippy heavily\n+relies on compiler internals it is build with the latest rustc master. To get\n+this toolchain, you can just use the `setup-toolchain.sh` script or use\n+`rustup-toolchain-install-master`:\n+\n+```bash\n+sh setup-toolchain.sh\n+# OR\n+cargo install rustup-toolchain-install-master\n+# For better IDE integration also add `-c rustfmt -c rust-src` (optional)\n+rustup-toolchain-install-master -f -n master -c rustc-dev -c llvm-tools\n+rustup override set master\n+```\n+\n+## Building and Testing\n+\n+Once the `master` toolchain is installed, you can build and test Clippy like\n+every other Rust project:\n+\n+```bash\n+cargo build  # builds Clippy\n+cargo test   # tests Clippy\n+```\n+\n+Since Clippy's test suite is pretty big, there are some commands that only run a\n+subset of Clippy's tests:\n+\n+```bash\n+# only run UI tests\n+cargo uitest\n+# only run UI tests starting with `test_`\n+TESTNAME=\"test_\" cargo uitest\n+# only run dogfood tests\n+cargo test --test dogfood\n+```\n+\n+If the output of a [UI test] differs from the expected output, you can update the\n+reference file with:\n+\n+```bash\n+sh tests/ui/update-all-references.sh\n+```\n+\n+For example, this is necessary, if you fix a typo in an error message of a lint\n+or if you modify a test file to add a test case.\n+\n+_Note:_ This command may update more files than you intended. In that case only\n+commit the files you wanted to update.\n+\n+[UI test]: https://rustc-dev-guide.rust-lang.org/tests/adding.html#guide-to-the-ui-tests\n+\n+## `cargo dev`\n+\n+Clippy has some dev tools to make working on Clippy more convenient. These tools\n+can be accessed through the `cargo dev` command. Available tools are listed\n+below. To get more information about these commands, just call them with\n+`--help`.\n+\n+```bash\n+# formats the whole Clippy codebase and all tests\n+cargo dev fmt\n+# register or update lint names/groups/...\n+cargo dev update_lints\n+# create a new lint and register it\n+cargo dev new_lint\n+# (experimental) Setup Clippy to work with rust-analyzer\n+cargo dev ra-setup\n+```"}]}