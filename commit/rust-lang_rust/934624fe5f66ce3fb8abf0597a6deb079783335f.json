{"sha": "934624fe5f66ce3fb8abf0597a6deb079783335f", "node_id": "C_kwDOAAsO6NoAKDkzNDYyNGZlNWY2NmNlM2ZiOGFiZjA1OTdhNmRlYjA3OTc4MzMzNWY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-16T08:22:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-16T08:22:55Z"}, "message": "Auto merge of #90945 - JohnTitor:rollup-wc35xss, r=JohnTitor\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #86455 (check where-clause for explicit `Sized` before suggesting `?Sized`)\n - #90801 (Normalize both arguments of `equate_normalized_input_or_output`)\n - #90803 (Suggest `&str.chars()` on attempt to `&str.iter()`)\n - #90819 (Fixes incorrect handling of TraitRefs when emitting suggestions.)\n - #90910 (fix getting the discriminant of a zero-variant enum)\n - #90925 (rustc_mir_build: reorder bindings)\n - #90928 (Use a different server for checking clock drift)\n - #90936 (Add a regression test for #80772)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "ba82da3aeb37b806c4b5e318abff63148fcebc13", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba82da3aeb37b806c4b5e318abff63148fcebc13"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/934624fe5f66ce3fb8abf0597a6deb079783335f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/934624fe5f66ce3fb8abf0597a6deb079783335f", "html_url": "https://github.com/rust-lang/rust/commit/934624fe5f66ce3fb8abf0597a6deb079783335f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/934624fe5f66ce3fb8abf0597a6deb079783335f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2a7683e8f321e3c0b9d648ae480827b5ab70e1d", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2a7683e8f321e3c0b9d648ae480827b5ab70e1d", "html_url": "https://github.com/rust-lang/rust/commit/a2a7683e8f321e3c0b9d648ae480827b5ab70e1d"}, {"sha": "c73b35e05d1b224b91ed90ef4f321e4635732100", "url": "https://api.github.com/repos/rust-lang/rust/commits/c73b35e05d1b224b91ed90ef4f321e4635732100", "html_url": "https://github.com/rust-lang/rust/commit/c73b35e05d1b224b91ed90ef4f321e4635732100"}], "stats": {"total": 438, "additions": 342, "deletions": 96}, "files": [{"sha": "92d2d04f23f239e87873a2dd5f7e73f2cd573a17", "filename": "compiler/rustc_borrowck/src/type_check/input_output.rs", "status": "modified", "additions": 38, "deletions": 22, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/934624fe5f66ce3fb8abf0597a6deb079783335f/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Finput_output.rs", "raw_url": "https://github.com/rust-lang/rust/raw/934624fe5f66ce3fb8abf0597a6deb079783335f/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Finput_output.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Finput_output.rs?ref=934624fe5f66ce3fb8abf0597a6deb079783335f", "patch": "@@ -7,13 +7,16 @@\n //! `RETURN_PLACE` the MIR arguments) are always fully normalized (and\n //! contain revealed `impl Trait` values).\n \n+use crate::type_check::constraint_conversion::ConstraintConversion;\n use rustc_index::vec::Idx;\n use rustc_infer::infer::LateBoundRegionConversionTime;\n use rustc_middle::mir::*;\n-use rustc_middle::traits::ObligationCause;\n-use rustc_middle::ty::{self, Ty};\n+use rustc_middle::ty::Ty;\n use rustc_span::Span;\n-use rustc_trait_selection::traits::query::normalize::AtExt;\n+use rustc_span::DUMMY_SP;\n+use rustc_trait_selection::traits::query::type_op::{self, TypeOp};\n+use rustc_trait_selection::traits::query::Fallible;\n+use type_op::TypeOpOutput;\n \n use crate::universal_regions::UniversalRegions;\n \n@@ -30,6 +33,9 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         let (&normalized_output_ty, normalized_input_tys) =\n             normalized_inputs_and_output.split_last().unwrap();\n \n+        debug!(?normalized_output_ty);\n+        debug!(?normalized_input_tys);\n+\n         let mir_def_id = body.source.def_id().expect_local();\n \n         // If the user explicitly annotated the input types, extract\n@@ -75,10 +81,12 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                     .delay_span_bug(body.span, \"found more normalized_input_ty than local_decls\");\n                 break;\n             }\n+\n             // In MIR, argument N is stored in local N+1.\n             let local = Local::new(argument_index + 1);\n \n             let mir_input_ty = body.local_decls[local].ty;\n+\n             let mir_input_span = body.local_decls[local].source_info.span;\n             self.equate_normalized_input_or_output(\n                 normalized_input_ty,\n@@ -100,6 +108,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                 // If the user explicitly annotated the input types, enforce those.\n                 let user_provided_input_ty =\n                     self.normalize(user_provided_input_ty, Locations::All(mir_input_span));\n+\n                 self.equate_normalized_input_or_output(\n                     user_provided_input_ty,\n                     mir_input_ty,\n@@ -167,30 +176,14 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             // `rustc_traits::normalize_after_erasing_regions`. Ideally, we'd\n             // like to normalize *before* inserting into `local_decls`, but\n             // doing so ends up causing some other trouble.\n-            let b = match self\n-                .infcx\n-                .at(&ObligationCause::dummy(), ty::ParamEnv::empty())\n-                .normalize(b)\n-            {\n-                Ok(n) => {\n-                    debug!(\"equate_inputs_and_outputs: {:?}\", n);\n-                    if n.obligations.iter().all(|o| {\n-                        matches!(\n-                            o.predicate.kind().skip_binder(),\n-                            ty::PredicateKind::RegionOutlives(_)\n-                                | ty::PredicateKind::TypeOutlives(_)\n-                        )\n-                    }) {\n-                        n.value\n-                    } else {\n-                        b\n-                    }\n-                }\n+            let b = match self.normalize_and_add_constraints(b) {\n+                Ok(n) => n,\n                 Err(_) => {\n                     debug!(\"equate_inputs_and_outputs: NoSolution\");\n                     b\n                 }\n             };\n+\n             // Note: if we have to introduce new placeholders during normalization above, then we won't have\n             // added those universes to the universe info, which we would want in `relate_tys`.\n             if let Err(terr) =\n@@ -207,4 +200,27 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             }\n         }\n     }\n+\n+    pub(crate) fn normalize_and_add_constraints(&mut self, t: Ty<'tcx>) -> Fallible<Ty<'tcx>> {\n+        let TypeOpOutput { output: norm_ty, constraints, .. } =\n+            self.param_env.and(type_op::normalize::Normalize::new(t)).fully_perform(self.infcx)?;\n+\n+        debug!(\"{:?} normalized to {:?}\", t, norm_ty);\n+\n+        for data in constraints.into_iter().collect::<Vec<_>>() {\n+            ConstraintConversion::new(\n+                self.infcx,\n+                &self.borrowck_context.universal_regions,\n+                &self.region_bound_pairs,\n+                Some(self.implicit_region_bound),\n+                self.param_env,\n+                Locations::All(DUMMY_SP),\n+                ConstraintCategory::Internal,\n+                &mut self.borrowck_context.constraints,\n+            )\n+            .convert_all(&*data);\n+        }\n+\n+        Ok(norm_ty)\n+    }\n }"}, {"sha": "da26d9c7b87790e85e784cf889e28fc92796f187", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/934624fe5f66ce3fb8abf0597a6deb079783335f/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/934624fe5f66ce3fb8abf0597a6deb079783335f/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=934624fe5f66ce3fb8abf0597a6deb079783335f", "patch": "@@ -893,11 +893,11 @@ struct TypeChecker<'a, 'tcx> {\n }\n \n struct BorrowCheckContext<'a, 'tcx> {\n-    universal_regions: &'a UniversalRegions<'tcx>,\n+    pub(crate) universal_regions: &'a UniversalRegions<'tcx>,\n     location_table: &'a LocationTable,\n     all_facts: &'a mut Option<AllFacts>,\n     borrow_set: &'a BorrowSet<'tcx>,\n-    constraints: &'a mut MirTypeckRegionConstraints<'tcx>,\n+    pub(crate) constraints: &'a mut MirTypeckRegionConstraints<'tcx>,\n     upvars: &'a [Upvar<'tcx>],\n }\n \n@@ -1157,6 +1157,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         self.relate_types(sup, ty::Variance::Contravariant, sub, locations, category)\n     }\n \n+    #[instrument(skip(self, category), level = \"debug\")]\n     fn eq_types(\n         &mut self,\n         expected: Ty<'tcx>,"}, {"sha": "e00c5789fe9c780951482eee5a77c574917a2236", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/934624fe5f66ce3fb8abf0597a6deb079783335f/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/934624fe5f66ce3fb8abf0597a6deb079783335f/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=934624fe5f66ce3fb8abf0597a6deb079783335f", "patch": "@@ -647,6 +647,22 @@ pub struct WhereBoundPredicate<'hir> {\n     pub bounds: GenericBounds<'hir>,\n }\n \n+impl WhereBoundPredicate<'hir> {\n+    /// Returns `true` if `param_def_id` matches the `bounded_ty` of this predicate.\n+    pub fn is_param_bound(&self, param_def_id: DefId) -> bool {\n+        let path = match self.bounded_ty.kind {\n+            TyKind::Path(QPath::Resolved(None, path)) => path,\n+            _ => return false,\n+        };\n+        match path.res {\n+            Res::Def(DefKind::TyParam, def_id) | Res::SelfTy(Some(def_id), None) => {\n+                def_id == param_def_id\n+            }\n+            _ => false,\n+        }\n+    }\n+}\n+\n /// A lifetime predicate (e.g., `'a: 'b + 'c`).\n #[derive(Debug, HashStable_Generic)]\n pub struct WhereRegionPredicate<'hir> {"}, {"sha": "610f9bd8f82d740168bf57cc2ed88c13fe4ea41e", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/934624fe5f66ce3fb8abf0597a6deb079783335f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/934624fe5f66ce3fb8abf0597a6deb079783335f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=934624fe5f66ce3fb8abf0597a6deb079783335f", "patch": "@@ -2067,7 +2067,9 @@ impl<'tcx> TyS<'tcx> {\n     ) -> Option<Discr<'tcx>> {\n         match self.kind() {\n             TyKind::Adt(adt, _) if adt.variants.is_empty() => {\n-                bug!(\"discriminant_for_variant called on zero variant enum\");\n+                // This can actually happen during CTFE, see\n+                // https://github.com/rust-lang/rust/issues/89765.\n+                None\n             }\n             TyKind::Adt(adt, _) if adt.is_enum() => {\n                 Some(adt.discriminant_for_variant(tcx, variant_index))"}, {"sha": "6320d5d47497f52f1c8355e3bf293e5c63e6cc54", "filename": "compiler/rustc_mir_build/src/build/matches/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/934624fe5f66ce3fb8abf0597a6deb079783335f/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/934624fe5f66ce3fb8abf0597a6deb079783335f/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs?ref=934624fe5f66ce3fb8abf0597a6deb079783335f", "patch": "@@ -1762,8 +1762,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n     ) -> BlockAnd<()> {\n         let expr_span = expr.span;\n         let expr_place_builder = unpack!(block = self.lower_scrutinee(block, expr, expr_span));\n-        let mut guard_candidate = Candidate::new(expr_place_builder.clone(), &pat, false);\n         let wildcard = Pat::wildcard_from_ty(pat.ty);\n+        let mut guard_candidate = Candidate::new(expr_place_builder.clone(), &pat, false);\n         let mut otherwise_candidate = Candidate::new(expr_place_builder.clone(), &wildcard, false);\n         let fake_borrow_temps = self.lower_match_tree(\n             block,"}, {"sha": "f8df0e2595973ea54800a053bcd71a742b00bdf5", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/934624fe5f66ce3fb8abf0597a6deb079783335f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/934624fe5f66ce3fb8abf0597a6deb079783335f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=934624fe5f66ce3fb8abf0597a6deb079783335f", "patch": "@@ -2009,6 +2009,19 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n             Some(param) => param,\n             _ => return,\n         };\n+        let param_def_id = self.tcx.hir().local_def_id(param.hir_id).to_def_id();\n+        let preds = generics.where_clause.predicates.iter();\n+        let explicitly_sized = preds\n+            .filter_map(|pred| match pred {\n+                hir::WherePredicate::BoundPredicate(bp) => Some(bp),\n+                _ => None,\n+            })\n+            .filter(|bp| bp.is_param_bound(param_def_id))\n+            .flat_map(|bp| bp.bounds)\n+            .any(|bound| bound.trait_ref().and_then(|tr| tr.trait_def_id()) == sized_trait);\n+        if explicitly_sized {\n+            return;\n+        }\n         debug!(\"maybe_suggest_unsized_generics: param={:?}\", param);\n         match node {\n             hir::Node::Item("}, {"sha": "0bf01afb575dab54163f53b3862763f2788e79cd", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 21, "deletions": 38, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/934624fe5f66ce3fb8abf0597a6deb079783335f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/934624fe5f66ce3fb8abf0597a6deb079783335f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=934624fe5f66ce3fb8abf0597a6deb079783335f", "patch": "@@ -706,36 +706,29 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         }\n \n         let param_env = obligation.param_env;\n-        let trait_ref = poly_trait_ref.skip_binder();\n-\n-        let found_ty = trait_ref.self_ty();\n-        let found_ty_str = found_ty.to_string();\n-        let imm_borrowed_found_ty = self.tcx.mk_imm_ref(self.tcx.lifetimes.re_static, found_ty);\n-        let imm_substs = self.tcx.mk_substs_trait(imm_borrowed_found_ty, &[]);\n-        let mut_borrowed_found_ty = self.tcx.mk_mut_ref(self.tcx.lifetimes.re_static, found_ty);\n-        let mut_substs = self.tcx.mk_substs_trait(mut_borrowed_found_ty, &[]);\n \n         // Try to apply the original trait binding obligation by borrowing.\n-        let mut try_borrowing = |new_imm_trait_ref: ty::Binder<'tcx, ty::TraitRef<'tcx>>,\n-                                 new_mut_trait_ref: ty::Binder<'tcx, ty::TraitRef<'tcx>>,\n-                                 expected_trait_ref: ty::Binder<'tcx, ty::TraitRef<'tcx>>,\n+        let mut try_borrowing = |old_ref: ty::Binder<'tcx, ty::TraitRef<'tcx>>,\n                                  blacklist: &[DefId]|\n          -> bool {\n-            if blacklist.contains(&expected_trait_ref.def_id()) {\n+            if blacklist.contains(&old_ref.def_id()) {\n                 return false;\n             }\n \n-            let imm_result = self.predicate_must_hold_modulo_regions(&Obligation::new(\n-                ObligationCause::dummy(),\n-                param_env,\n-                new_imm_trait_ref.without_const().to_predicate(self.tcx),\n-            ));\n-\n-            let mut_result = self.predicate_must_hold_modulo_regions(&Obligation::new(\n-                ObligationCause::dummy(),\n-                param_env,\n-                new_mut_trait_ref.without_const().to_predicate(self.tcx),\n-            ));\n+            let orig_ty = old_ref.self_ty().skip_binder();\n+            let mk_result = |new_ty| {\n+                let new_ref = old_ref.rebind(ty::TraitRef::new(\n+                    old_ref.def_id(),\n+                    self.tcx.mk_substs_trait(new_ty, &old_ref.skip_binder().substs[1..]),\n+                ));\n+                self.predicate_must_hold_modulo_regions(&Obligation::new(\n+                    ObligationCause::dummy(),\n+                    param_env,\n+                    new_ref.without_const().to_predicate(self.tcx),\n+                ))\n+            };\n+            let imm_result = mk_result(self.tcx.mk_imm_ref(self.tcx.lifetimes.re_static, orig_ty));\n+            let mut_result = mk_result(self.tcx.mk_mut_ref(self.tcx.lifetimes.re_static, orig_ty));\n \n             if imm_result || mut_result {\n                 if let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(span) {\n@@ -747,8 +740,8 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n \n                     let msg = format!(\n                         \"the trait bound `{}: {}` is not satisfied\",\n-                        found_ty_str,\n-                        expected_trait_ref.print_only_trait_path(),\n+                        orig_ty.to_string(),\n+                        old_ref.print_only_trait_path(),\n                     );\n                     if has_custom_message {\n                         err.note(&msg);\n@@ -764,7 +757,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                         span,\n                         &format!(\n                             \"expected an implementor of trait `{}`\",\n-                            expected_trait_ref.print_only_trait_path(),\n+                            old_ref.print_only_trait_path(),\n                         ),\n                     );\n \n@@ -807,21 +800,11 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         };\n \n         if let ObligationCauseCode::ImplDerivedObligation(obligation) = &*code {\n-            let expected_trait_ref = obligation.parent_trait_ref;\n-            let new_imm_trait_ref = poly_trait_ref\n-                .rebind(ty::TraitRef::new(obligation.parent_trait_ref.def_id(), imm_substs));\n-            let new_mut_trait_ref = poly_trait_ref\n-                .rebind(ty::TraitRef::new(obligation.parent_trait_ref.def_id(), mut_substs));\n-            return try_borrowing(new_imm_trait_ref, new_mut_trait_ref, expected_trait_ref, &[]);\n+            try_borrowing(obligation.parent_trait_ref, &[])\n         } else if let ObligationCauseCode::BindingObligation(_, _)\n         | ObligationCauseCode::ItemObligation(_) = &*code\n         {\n-            return try_borrowing(\n-                poly_trait_ref.rebind(ty::TraitRef::new(trait_ref.def_id, imm_substs)),\n-                poly_trait_ref.rebind(ty::TraitRef::new(trait_ref.def_id, mut_substs)),\n-                *poly_trait_ref,\n-                &never_suggest_borrow[..],\n-            );\n+            try_borrowing(*poly_trait_ref, &never_suggest_borrow[..])\n         } else {\n             false\n         }"}, {"sha": "661ced952c7362c0798f34c2ec630427fbb2f594", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/934624fe5f66ce3fb8abf0597a6deb079783335f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/934624fe5f66ce3fb8abf0597a6deb079783335f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=934624fe5f66ce3fb8abf0597a6deb079783335f", "patch": "@@ -478,6 +478,26 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 let mut label_span_not_found = || {\n                     if unsatisfied_predicates.is_empty() {\n                         err.span_label(span, format!(\"{item_kind} not found in `{ty_str}`\"));\n+                        let is_string_or_ref_str = match actual.kind() {\n+                            ty::Ref(_, ty, _) => {\n+                                ty.is_str()\n+                                    || matches!(\n+                                        ty.kind(),\n+                                        ty::Adt(adt, _) if self.tcx.is_diagnostic_item(sym::String, adt.did)\n+                                    )\n+                            }\n+                            ty::Adt(adt, _) => self.tcx.is_diagnostic_item(sym::String, adt.did),\n+                            _ => false,\n+                        };\n+                        if is_string_or_ref_str && item_name.name == sym::iter {\n+                            err.span_suggestion_verbose(\n+                                item_name.span,\n+                                \"because of the in-memory representation of `&str`, to obtain \\\n+                                 an `Iterator` over each of its codepoint use method `chars`\",\n+                                String::from(\"chars\"),\n+                                Applicability::MachineApplicable,\n+                            );\n+                        }\n                         if let ty::Adt(adt, _) = rcvr_ty.kind() {\n                             let mut inherent_impls_candidate = self\n                                 .tcx"}, {"sha": "2f427305782c5806918db038dddf419c76a263ce", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 3, "deletions": 19, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/934624fe5f66ce3fb8abf0597a6deb079783335f/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/934624fe5f66ce3fb8abf0597a6deb079783335f/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=934624fe5f66ce3fb8abf0597a6deb079783335f", "patch": "@@ -28,7 +28,7 @@ use rustc_data_structures::captures::Captures;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexSet};\n use rustc_errors::{struct_span_err, Applicability};\n use rustc_hir as hir;\n-use rustc_hir::def::{CtorKind, DefKind, Res};\n+use rustc_hir::def::{CtorKind, DefKind};\n use rustc_hir::def_id::{DefId, LocalDefId, LOCAL_CRATE};\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::weak_lang_items;\n@@ -668,6 +668,7 @@ impl ItemCtxt<'tcx> {\n             })\n             .flat_map(|b| predicates_from_bound(self, ty, b));\n \n+        let param_def_id = self.tcx.hir().local_def_id(param_id).to_def_id();\n         let from_where_clauses = ast_generics\n             .where_clause\n             .predicates\n@@ -677,7 +678,7 @@ impl ItemCtxt<'tcx> {\n                 _ => None,\n             })\n             .flat_map(|bp| {\n-                let bt = if is_param(self.tcx, bp.bounded_ty, param_id) {\n+                let bt = if bp.is_param_bound(param_def_id) {\n                     Some(ty)\n                 } else if !only_self_bounds.0 {\n                     Some(self.to_ty(bp.bounded_ty))\n@@ -714,23 +715,6 @@ impl ItemCtxt<'tcx> {\n     }\n }\n \n-/// Tests whether this is the AST for a reference to the type\n-/// parameter with ID `param_id`. We use this so as to avoid running\n-/// `ast_ty_to_ty`, because we want to avoid triggering an all-out\n-/// conversion of the type to avoid inducing unnecessary cycles.\n-fn is_param(tcx: TyCtxt<'_>, ast_ty: &hir::Ty<'_>, param_id: hir::HirId) -> bool {\n-    if let hir::TyKind::Path(hir::QPath::Resolved(None, path)) = ast_ty.kind {\n-        match path.res {\n-            Res::SelfTy(Some(def_id), None) | Res::Def(DefKind::TyParam, def_id) => {\n-                def_id == tcx.hir().local_def_id(param_id).to_def_id()\n-            }\n-            _ => false,\n-        }\n-    } else {\n-        false\n-    }\n-}\n-\n fn convert_item(tcx: TyCtxt<'_>, item_id: hir::ItemId) {\n     let it = tcx.hir().item(item_id);\n     debug!(\"convert: item {} with id {}\", it.ident, it.hir_id());"}, {"sha": "948445427d95bcabb11d119d6bb8f72ae54906e3", "filename": "src/ci/run.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/934624fe5f66ce3fb8abf0597a6deb079783335f/src%2Fci%2Frun.sh", "raw_url": "https://github.com/rust-lang/rust/raw/934624fe5f66ce3fb8abf0597a6deb079783335f/src%2Fci%2Frun.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Frun.sh?ref=934624fe5f66ce3fb8abf0597a6deb079783335f", "patch": "@@ -117,7 +117,7 @@ datecheck() {\n   echo -n \"  local time: \"\n   date\n   echo -n \"  network time: \"\n-  curl -fs --head http://detectportal.firefox.com/success.txt | grep ^Date: \\\n+  curl -fs --head http://ci-caches.rust-lang.org | grep ^Date: \\\n       | sed 's/Date: //g' || true\n   echo \"== end clock drift check ==\"\n }"}, {"sha": "1b8caa3f8ac8bfcd4977ab55743a123796c8758a", "filename": "src/test/ui/borrowck/issue-80772.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/934624fe5f66ce3fb8abf0597a6deb079783335f/src%2Ftest%2Fui%2Fborrowck%2Fissue-80772.rs", "raw_url": "https://github.com/rust-lang/rust/raw/934624fe5f66ce3fb8abf0597a6deb079783335f/src%2Ftest%2Fui%2Fborrowck%2Fissue-80772.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-80772.rs?ref=934624fe5f66ce3fb8abf0597a6deb079783335f", "patch": "@@ -0,0 +1,21 @@\n+// check-pass\n+\n+trait SomeTrait {}\n+\n+pub struct Exhibit {\n+    constant: usize,\n+    factory: fn(&usize) -> Box<dyn SomeTrait>,\n+}\n+\n+pub const A_CONSTANT: &[Exhibit] = &[\n+    Exhibit {\n+        constant: 1,\n+        factory: |_| unimplemented!(),\n+    },\n+    Exhibit {\n+        constant: \"Hello world\".len(),\n+        factory: |_| unimplemented!(),\n+    },\n+];\n+\n+fn main() {}"}, {"sha": "f623c5101f4cd7cf00dd048f37cb33fb5b07aaf8", "filename": "src/test/ui/consts/const_discriminant.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/934624fe5f66ce3fb8abf0597a6deb079783335f/src%2Ftest%2Fui%2Fconsts%2Fconst_discriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/934624fe5f66ce3fb8abf0597a6deb079783335f/src%2Ftest%2Fui%2Fconsts%2Fconst_discriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_discriminant.rs?ref=934624fe5f66ce3fb8abf0597a6deb079783335f", "patch": "@@ -25,6 +25,13 @@ enum SingleVariant {\n \n const TEST_V: Discriminant<SingleVariant> = discriminant(&SingleVariant::V);\n \n+pub const TEST_VOID: () = {\n+    // This is UB, but CTFE does not check validity so it does not detect this.\n+    // This is a regression test for https://github.com/rust-lang/rust/issues/89765.\n+    unsafe { std::mem::discriminant(&*(&() as *const () as *const Void)); };\n+};\n+\n+\n fn main() {\n     assert_eq!(TEST_A, TEST_A_OTHER);\n     assert_eq!(TEST_A, discriminant(black_box(&Test::A(17))));"}, {"sha": "13097edf0adf91cb228caba173023e5342554060", "filename": "src/test/ui/derives/deriving-copyclone.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/934624fe5f66ce3fb8abf0597a6deb079783335f/src%2Ftest%2Fui%2Fderives%2Fderiving-copyclone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/934624fe5f66ce3fb8abf0597a6deb079783335f/src%2Ftest%2Fui%2Fderives%2Fderiving-copyclone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderiving-copyclone.stderr?ref=934624fe5f66ce3fb8abf0597a6deb079783335f", "patch": "@@ -1,4 +1,4 @@\n-error[E0277]: the trait bound `C: Copy` is not satisfied\n+error[E0277]: the trait bound `B<C>: Copy` is not satisfied\n   --> $DIR/deriving-copyclone.rs:31:13\n    |\n LL |     is_copy(B { a: 1, b: C });\n@@ -22,7 +22,7 @@ help: consider borrowing here\n LL |     is_copy(&B { a: 1, b: C });\n    |             +\n \n-error[E0277]: the trait bound `C: Clone` is not satisfied\n+error[E0277]: the trait bound `B<C>: Clone` is not satisfied\n   --> $DIR/deriving-copyclone.rs:32:14\n    |\n LL |     is_clone(B { a: 1, b: C });\n@@ -46,7 +46,7 @@ help: consider borrowing here\n LL |     is_clone(&B { a: 1, b: C });\n    |              +\n \n-error[E0277]: the trait bound `D: Copy` is not satisfied\n+error[E0277]: the trait bound `B<D>: Copy` is not satisfied\n   --> $DIR/deriving-copyclone.rs:35:13\n    |\n LL |     is_copy(B { a: 1, b: D });"}, {"sha": "e150ecfe9a0dc396c4ab8e1d302e2f06337587dc", "filename": "src/test/ui/higher-rank-trait-bounds/normalize-under-binder/issue-90612.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/934624fe5f66ce3fb8abf0597a6deb079783335f/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-90612.rs", "raw_url": "https://github.com/rust-lang/rust/raw/934624fe5f66ce3fb8abf0597a6deb079783335f/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-90612.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-90612.rs?ref=934624fe5f66ce3fb8abf0597a6deb079783335f", "patch": "@@ -0,0 +1,43 @@\n+// check-pass\n+\n+#![feature(generic_associated_types)]\n+\n+use std::marker::PhantomData;\n+\n+trait Family: Sized {\n+    type Item<'a>;\n+\n+    fn apply_all<F>(&self, f: F)\n+    where\n+        F: FamilyItemFn<Self> { }\n+}\n+\n+struct Array<T>(PhantomData<T>);\n+\n+impl<T: 'static> Family for Array<T> {\n+    type Item<'a> = &'a T;\n+}\n+\n+trait FamilyItemFn<T: Family> {\n+    fn apply(&self, item: T::Item<'_>);\n+}\n+\n+impl<T, F> FamilyItemFn<T> for F\n+where\n+    T: Family,\n+    for<'a> F: Fn(T::Item<'a>)\n+{\n+    fn apply(&self, item: T::Item<'_>) {\n+        (*self)(item);\n+    }\n+}\n+\n+fn process<T: 'static>(array: Array<T>) {\n+    // Works\n+    array.apply_all(|x: &T| { });\n+\n+    // ICE: NoSolution\n+    array.apply_all(|x: <Array<T> as Family>::Item<'_>| { });\n+}\n+\n+fn main() {}"}, {"sha": "18b7f383482a1c4963c12bc1ccb7261aff08a2a1", "filename": "src/test/ui/higher-rank-trait-bounds/normalize-under-binder/issue-90638.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/934624fe5f66ce3fb8abf0597a6deb079783335f/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-90638.rs", "raw_url": "https://github.com/rust-lang/rust/raw/934624fe5f66ce3fb8abf0597a6deb079783335f/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-90638.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-90638.rs?ref=934624fe5f66ce3fb8abf0597a6deb079783335f", "patch": "@@ -0,0 +1,37 @@\n+//check-pass\n+\n+#![feature(generic_associated_types)]\n+\n+trait Yokeable<'a>: 'static {\n+    type Output: 'a;\n+}\n+\n+trait IsCovariant<'a> {}\n+\n+struct Yoke<Y: for<'a> Yokeable<'a>> {\n+    data: Y,\n+}\n+\n+impl<Y: for<'a> Yokeable<'a>> Yoke<Y> {\n+    fn project<Y2: for<'a> Yokeable<'a>>(&self, _f: for<'a> fn(<Y as Yokeable<'a>>::Output, &'a ())\n+      -> <Y2 as Yokeable<'a>>::Output) -> Yoke<Y2> {\n+\n+        unimplemented!()\n+    }\n+}\n+\n+fn _upcast<Y>(x: Yoke<Y>) -> Yoke<Box<dyn IsCovariant<'static> + 'static>> where\n+    Y: for<'a> Yokeable<'a>,\n+    for<'a> <Y as Yokeable<'a>>::Output: IsCovariant<'a>\n+    {\n+    x.project(|data, _| {\n+        Box::new(data)\n+    })\n+}\n+\n+\n+impl<'a> Yokeable<'a> for Box<dyn IsCovariant<'static> + 'static> {\n+    type Output = Box<dyn IsCovariant<'a> + 'a>;\n+}\n+\n+fn main() {}"}, {"sha": "95732881baf09423d8a5aeeead5bb3d21a145464", "filename": "src/test/ui/suggest-using-chars.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/934624fe5f66ce3fb8abf0597a6deb079783335f/src%2Ftest%2Fui%2Fsuggest-using-chars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/934624fe5f66ce3fb8abf0597a6deb079783335f/src%2Ftest%2Fui%2Fsuggest-using-chars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggest-using-chars.rs?ref=934624fe5f66ce3fb8abf0597a6deb079783335f", "patch": "@@ -0,0 +1,7 @@\n+pub fn main() {\n+    let _ = \"foo\".iter(); //~ ERROR no method named `iter` found for reference `&'static str` in the current scope\n+    let _ = \"foo\".foo(); //~ ERROR no method named `foo` found for reference `&'static str` in the current scope\n+    let _ = String::from(\"bar\").iter(); //~ ERROR no method named `iter` found for struct `String` in the current scope\n+    let _ = (&String::from(\"bar\")).iter(); //~ ERROR no method named `iter` found for reference `&String` in the current scope\n+    let _ = 0.iter(); //~ ERROR no method named `iter` found for type `{integer}` in the current scope\n+}"}, {"sha": "99bcfb08a08924c37a61e5da1d665de968fa855b", "filename": "src/test/ui/suggest-using-chars.stderr", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/934624fe5f66ce3fb8abf0597a6deb079783335f/src%2Ftest%2Fui%2Fsuggest-using-chars.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/934624fe5f66ce3fb8abf0597a6deb079783335f/src%2Ftest%2Fui%2Fsuggest-using-chars.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggest-using-chars.stderr?ref=934624fe5f66ce3fb8abf0597a6deb079783335f", "patch": "@@ -0,0 +1,48 @@\n+error[E0599]: no method named `iter` found for reference `&'static str` in the current scope\n+  --> $DIR/suggest-using-chars.rs:2:19\n+   |\n+LL |     let _ = \"foo\".iter();\n+   |                   ^^^^ method not found in `&'static str`\n+   |\n+help: because of the in-memory representation of `&str`, to obtain an `Iterator` over each of its codepoint use method `chars`\n+   |\n+LL |     let _ = \"foo\".chars();\n+   |                   ~~~~~\n+\n+error[E0599]: no method named `foo` found for reference `&'static str` in the current scope\n+  --> $DIR/suggest-using-chars.rs:3:19\n+   |\n+LL |     let _ = \"foo\".foo();\n+   |                   ^^^ method not found in `&'static str`\n+\n+error[E0599]: no method named `iter` found for struct `String` in the current scope\n+  --> $DIR/suggest-using-chars.rs:4:33\n+   |\n+LL |     let _ = String::from(\"bar\").iter();\n+   |                                 ^^^^ method not found in `String`\n+   |\n+help: because of the in-memory representation of `&str`, to obtain an `Iterator` over each of its codepoint use method `chars`\n+   |\n+LL |     let _ = String::from(\"bar\").chars();\n+   |                                 ~~~~~\n+\n+error[E0599]: no method named `iter` found for reference `&String` in the current scope\n+  --> $DIR/suggest-using-chars.rs:5:36\n+   |\n+LL |     let _ = (&String::from(\"bar\")).iter();\n+   |                                    ^^^^ method not found in `&String`\n+   |\n+help: because of the in-memory representation of `&str`, to obtain an `Iterator` over each of its codepoint use method `chars`\n+   |\n+LL |     let _ = (&String::from(\"bar\")).chars();\n+   |                                    ~~~~~\n+\n+error[E0599]: no method named `iter` found for type `{integer}` in the current scope\n+  --> $DIR/suggest-using-chars.rs:6:15\n+   |\n+LL |     let _ = 0.iter();\n+   |               ^^^^ method not found in `{integer}`\n+\n+error: aborting due to 5 previous errors\n+\n+For more information about this error, try `rustc --explain E0599`."}, {"sha": "5cfaf4be96aeb02e1da641fc9c9dae0eddee80de", "filename": "src/test/ui/suggestions/issue-85945-check-where-clause-before-suggesting-unsized.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/934624fe5f66ce3fb8abf0597a6deb079783335f/src%2Ftest%2Fui%2Fsuggestions%2Fissue-85945-check-where-clause-before-suggesting-unsized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/934624fe5f66ce3fb8abf0597a6deb079783335f/src%2Ftest%2Fui%2Fsuggestions%2Fissue-85945-check-where-clause-before-suggesting-unsized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-85945-check-where-clause-before-suggesting-unsized.rs?ref=934624fe5f66ce3fb8abf0597a6deb079783335f", "patch": "@@ -0,0 +1,8 @@\n+// Regression test for #85945: Don't suggest `?Sized` bound if an explicit\n+// `Sized` bound is already in a `where` clause.\n+fn foo<T>(_: &T) where T: Sized {}\n+fn bar() { foo(\"\"); }\n+//~^ERROR the size for values of type\n+\n+pub fn main() {\n+}"}, {"sha": "92be9f764cc4b56ba5f617104b779e7f474122d6", "filename": "src/test/ui/suggestions/issue-85945-check-where-clause-before-suggesting-unsized.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/934624fe5f66ce3fb8abf0597a6deb079783335f/src%2Ftest%2Fui%2Fsuggestions%2Fissue-85945-check-where-clause-before-suggesting-unsized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/934624fe5f66ce3fb8abf0597a6deb079783335f/src%2Ftest%2Fui%2Fsuggestions%2Fissue-85945-check-where-clause-before-suggesting-unsized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-85945-check-where-clause-before-suggesting-unsized.stderr?ref=934624fe5f66ce3fb8abf0597a6deb079783335f", "patch": "@@ -0,0 +1,18 @@\n+error[E0277]: the size for values of type `str` cannot be known at compilation time\n+  --> $DIR/issue-85945-check-where-clause-before-suggesting-unsized.rs:4:16\n+   |\n+LL | fn bar() { foo(\"\"); }\n+   |            --- ^^ doesn't have a size known at compile-time\n+   |            |\n+   |            required by a bound introduced by this call\n+   |\n+   = help: the trait `Sized` is not implemented for `str`\n+note: required by a bound in `foo`\n+  --> $DIR/issue-85945-check-where-clause-before-suggesting-unsized.rs:3:8\n+   |\n+LL | fn foo<T>(_: &T) where T: Sized {}\n+   |        ^ required by this bound in `foo`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "1ab130e0ab1432aa53682b2e763be3b760f090ce", "filename": "src/test/ui/traits/negative-impls/negated-auto-traits-error.stderr", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/934624fe5f66ce3fb8abf0597a6deb079783335f/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegated-auto-traits-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/934624fe5f66ce3fb8abf0597a6deb079783335f/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegated-auto-traits-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegated-auto-traits-error.stderr?ref=934624fe5f66ce3fb8abf0597a6deb079783335f", "patch": "@@ -65,7 +65,7 @@ LL |     is_send(Box::new(TestType));\n    |     |\n    |     required by a bound introduced by this call\n    |\n-   = note: the trait bound `dummy2::TestType: Send` is not satisfied\n+   = note: the trait bound `Unique<dummy2::TestType>: Send` is not satisfied\n    = note: required because of the requirements on the impl of `Send` for `Unique<dummy2::TestType>`\n    = note: required because it appears within the type `Box<dummy2::TestType>`\n note: required by a bound in `is_send`\n@@ -104,11 +104,11 @@ error[E0277]: `main::TestType` cannot be sent between threads safely\n   --> $DIR/negated-auto-traits-error.rs:66:13\n    |\n LL |     is_sync(Outer2(TestType));\n-   |     ------- ^^^^^^^^^^^^^^^^ expected an implementor of trait `Sync`\n+   |     ------- ^^^^^^^^^^^^^^^^ `main::TestType` cannot be sent between threads safely\n    |     |\n    |     required by a bound introduced by this call\n    |\n-   = note: the trait bound `main::TestType: Sync` is not satisfied\n+   = help: the trait `Send` is not implemented for `main::TestType`\n note: required because of the requirements on the impl of `Sync` for `Outer2<main::TestType>`\n   --> $DIR/negated-auto-traits-error.rs:14:22\n    |\n@@ -119,12 +119,6 @@ note: required by a bound in `is_sync`\n    |\n LL | fn is_sync<T: Sync>(_: T) {}\n    |               ^^^^ required by this bound in `is_sync`\n-help: consider borrowing here\n-   |\n-LL |     is_sync(&Outer2(TestType));\n-   |             +\n-LL |     is_sync(&mut Outer2(TestType));\n-   |             ++++\n \n error: aborting due to 7 previous errors\n "}, {"sha": "f891a42fc2af059ae090f846d8dfd0b794031c6e", "filename": "src/test/ui/typeck/issue-90804-incorrect-reference-suggestion.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/934624fe5f66ce3fb8abf0597a6deb079783335f/src%2Ftest%2Fui%2Ftypeck%2Fissue-90804-incorrect-reference-suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/934624fe5f66ce3fb8abf0597a6deb079783335f/src%2Ftest%2Fui%2Ftypeck%2Fissue-90804-incorrect-reference-suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-90804-incorrect-reference-suggestion.rs?ref=934624fe5f66ce3fb8abf0597a6deb079783335f", "patch": "@@ -0,0 +1,11 @@\n+// Do not suggest referencing the parameter to `check`\n+\n+trait Marker<T> {}\n+\n+impl<T> Marker<i32> for T {}\n+\n+pub fn check<T: Marker<u32>>(_: T) {}\n+\n+pub fn main() {\n+    check::<()>(()); //~ ERROR [E0277]\n+}"}, {"sha": "08eab0253701e2a8c654dc170211a60d0b4b65fb", "filename": "src/test/ui/typeck/issue-90804-incorrect-reference-suggestion.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/934624fe5f66ce3fb8abf0597a6deb079783335f/src%2Ftest%2Fui%2Ftypeck%2Fissue-90804-incorrect-reference-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/934624fe5f66ce3fb8abf0597a6deb079783335f/src%2Ftest%2Fui%2Ftypeck%2Fissue-90804-incorrect-reference-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-90804-incorrect-reference-suggestion.stderr?ref=934624fe5f66ce3fb8abf0597a6deb079783335f", "patch": "@@ -0,0 +1,17 @@\n+error[E0277]: the trait bound `(): Marker<u32>` is not satisfied\n+  --> $DIR/issue-90804-incorrect-reference-suggestion.rs:10:17\n+   |\n+LL |     check::<()>(());\n+   |     ----------- ^^ the trait `Marker<u32>` is not implemented for `()`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+note: required by a bound in `check`\n+  --> $DIR/issue-90804-incorrect-reference-suggestion.rs:7:17\n+   |\n+LL | pub fn check<T: Marker<u32>>(_: T) {}\n+   |                 ^^^^^^^^^^^ required by this bound in `check`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}]}