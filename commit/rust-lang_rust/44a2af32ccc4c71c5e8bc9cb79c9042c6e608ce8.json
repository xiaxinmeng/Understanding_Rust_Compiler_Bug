{"sha": "44a2af32ccc4c71c5e8bc9cb79c9042c6e608ce8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0YTJhZjMyY2NjNGM3MWM1ZThiYzljYjc5YzkwNDJjNmU2MDhjZTg=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-10-07T12:08:33Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-10-14T07:52:03Z"}, "message": "Remove lifetime from StaticMutex and assume 'static.\n\nStaticMutex is only ever used with as a static (as the name already\nsuggests). So it doesn't have to be generic over a lifetime, but can\nsimply assume 'static.\n\nThis 'static lifetime guarantees the object is never moved, so this is\nno longer a manually checked requirement for unsafe calls to lock().", "tree": {"sha": "2841e676c3753ef5a288102bdabc99d5e72a6f57", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2841e676c3753ef5a288102bdabc99d5e72a6f57"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/44a2af32ccc4c71c5e8bc9cb79c9042c6e608ce8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/44a2af32ccc4c71c5e8bc9cb79c9042c6e608ce8", "html_url": "https://github.com/rust-lang/rust/commit/44a2af32ccc4c71c5e8bc9cb79c9042c6e608ce8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/44a2af32ccc4c71c5e8bc9cb79c9042c6e608ce8/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58756573fc5a2198f98e9b4889c494bb60f38e3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/58756573fc5a2198f98e9b4889c494bb60f38e3d", "html_url": "https://github.com/rust-lang/rust/commit/58756573fc5a2198f98e9b4889c494bb60f38e3d"}], "stats": {"total": 21, "additions": 7, "deletions": 14}, "files": [{"sha": "2392238d0a1943a9cc57b860465fab6d6d642b69", "filename": "library/std/src/sys/unix/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44a2af32ccc4c71c5e8bc9cb79c9042c6e608ce8/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44a2af32ccc4c71c5e8bc9cb79c9042c6e608ce8/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs?ref=44a2af32ccc4c71c5e8bc9cb79c9042c6e608ce8", "patch": "@@ -470,7 +470,7 @@ pub unsafe fn environ() -> *mut *const *const c_char {\n     &mut environ\n }\n \n-pub unsafe fn env_lock() -> StaticMutexGuard<'static> {\n+pub unsafe fn env_lock() -> StaticMutexGuard {\n     // It is UB to attempt to acquire this mutex reentrantly!\n     static ENV_LOCK: StaticMutex = StaticMutex::new();\n     ENV_LOCK.lock()"}, {"sha": "6eaec6f1e50df3054c6edf27313940285f6e9eca", "filename": "library/std/src/sys/vxworks/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44a2af32ccc4c71c5e8bc9cb79c9042c6e608ce8/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44a2af32ccc4c71c5e8bc9cb79c9042c6e608ce8/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fos.rs?ref=44a2af32ccc4c71c5e8bc9cb79c9042c6e608ce8", "patch": "@@ -212,7 +212,7 @@ pub unsafe fn environ() -> *mut *const *const c_char {\n     &mut environ\n }\n \n-pub unsafe fn env_lock() -> StaticMutexGuard<'static> {\n+pub unsafe fn env_lock() -> StaticMutexGuard {\n     // It is UB to attempt to acquire this mutex reentrantly!\n     static ENV_LOCK: StaticMutex = StaticMutex::new();\n     ENV_LOCK.lock()"}, {"sha": "f3e7efb955a2fd65a9ba1906e53e848f10c9df4b", "filename": "library/std/src/sys_common/mutex.rs", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/44a2af32ccc4c71c5e8bc9cb79c9042c6e608ce8/library%2Fstd%2Fsrc%2Fsys_common%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44a2af32ccc4c71c5e8bc9cb79c9042c6e608ce8/library%2Fstd%2Fsrc%2Fsys_common%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fmutex.rs?ref=44a2af32ccc4c71c5e8bc9cb79c9042c6e608ce8", "patch": "@@ -3,8 +3,7 @@ use crate::sys::mutex as imp;\n /// An OS-based mutual exclusion lock, meant for use in static variables.\n ///\n /// This mutex has a const constructor ([`StaticMutex::new`]), does not\n-/// implement `Drop` to cleanup resources, and causes UB when moved or used\n-/// reentrantly.\n+/// implement `Drop` to cleanup resources, and causes UB when used reentrantly.\n ///\n /// This mutex does not implement poisoning.\n ///\n@@ -16,11 +15,6 @@ unsafe impl Sync for StaticMutex {}\n \n impl StaticMutex {\n     /// Creates a new mutex for use.\n-    ///\n-    /// Behavior is undefined if the mutex is moved after it is\n-    /// first used with any of the functions below.\n-    /// Also, the behavior is undefined if this mutex is ever used reentrantly,\n-    /// i.e., `lock` is called by the thread currently holding the lock.\n     pub const fn new() -> Self {\n         Self(imp::Mutex::new())\n     }\n@@ -29,19 +23,18 @@ impl StaticMutex {\n     /// will be unlocked.\n     ///\n     /// It is undefined behaviour to call this function while locked by the\n-    /// same thread, or if the mutex has been moved since the last time this\n-    /// was called.\n+    /// same thread.\n     #[inline]\n-    pub unsafe fn lock(&self) -> StaticMutexGuard<'_> {\n+    pub unsafe fn lock(&'static self) -> StaticMutexGuard {\n         self.0.lock();\n         StaticMutexGuard(&self.0)\n     }\n }\n \n #[must_use]\n-pub struct StaticMutexGuard<'a>(&'a imp::Mutex);\n+pub struct StaticMutexGuard(&'static imp::Mutex);\n \n-impl Drop for StaticMutexGuard<'_> {\n+impl Drop for StaticMutexGuard {\n     #[inline]\n     fn drop(&mut self) {\n         unsafe {"}]}