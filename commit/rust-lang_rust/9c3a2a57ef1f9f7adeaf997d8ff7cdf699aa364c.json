{"sha": "9c3a2a57ef1f9f7adeaf997d8ff7cdf699aa364c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljM2EyYTU3ZWYxZjlmN2FkZWFmOTk3ZDhmZjdjZGY2OTlhYTM2NGM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-23T00:40:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-23T00:40:48Z"}, "message": "Auto merge of #81601 - jyn514:llvm-on-demand, r=Mark-Simulacrum\n\nMove llvm submodule updates to rustbuild\n\nThis enables better caching, since LLVM is only updated when needed, not\nwhenever x.py is run. Before, bootstrap.py had to use heuristics to\nguess if LLVM would be needed, and updated the module more often than\nnecessary as a result.\n\nThis syncs the LLVM submodule only just before building the compiler, so\npeople working on the standard library never have to worry about it.\nExample output:\n\n```\nCopying stage0 std from stage0 (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu / x86_64-unknown-linux-gnu)\nUpdating submodule src/llvm-project\nSubmodule 'src/llvm-project' (https://github.com/rust-lang/llvm-project.git) registered for path 'src/llvm-project'\nSubmodule path 'src/llvm-project': checked out 'f9a8d70b6e0365ac2172ca6b7f1de0341297458d'\n```\n\nImplements https://github.com/rust-lang/rust/issues/76653#issuecomment-770265169. This could be easily extended to other submodules, like `rust-by-example` and `rustc-dev-guide`, which aren't needed for cargo's workspace resolution.", "tree": {"sha": "df31b3aaad6ffe941d0fd8f859f170451de8bdd0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df31b3aaad6ffe941d0fd8f859f170451de8bdd0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c3a2a57ef1f9f7adeaf997d8ff7cdf699aa364c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c3a2a57ef1f9f7adeaf997d8ff7cdf699aa364c", "html_url": "https://github.com/rust-lang/rust/commit/9c3a2a57ef1f9f7adeaf997d8ff7cdf699aa364c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c3a2a57ef1f9f7adeaf997d8ff7cdf699aa364c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4ca1662f255db774dcd16ed9c3776bf25ac8361", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4ca1662f255db774dcd16ed9c3776bf25ac8361", "html_url": "https://github.com/rust-lang/rust/commit/e4ca1662f255db774dcd16ed9c3776bf25ac8361"}, {"sha": "0be4046bf91ea3726098e7714642697c43af7e98", "url": "https://api.github.com/repos/rust-lang/rust/commits/0be4046bf91ea3726098e7714642697c43af7e98", "html_url": "https://github.com/rust-lang/rust/commit/0be4046bf91ea3726098e7714642697c43af7e98"}], "stats": {"total": 111, "additions": 98, "deletions": 13}, "files": [{"sha": "bd5b3797ea825fa68eb5b3a67b2979d5c2dd2173", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9c3a2a57ef1f9f7adeaf997d8ff7cdf699aa364c/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/9c3a2a57ef1f9f7adeaf997d8ff7cdf699aa364c/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=9c3a2a57ef1f9f7adeaf997d8ff7cdf699aa364c", "patch": "@@ -991,28 +991,20 @@ def update_submodules(self):\n         ).decode(default_encoding).splitlines()]\n         filtered_submodules = []\n         submodules_names = []\n-        llvm_checked_out = os.path.exists(os.path.join(self.rust_root, \"src/llvm-project/.git\"))\n-        external_llvm_provided = self.get_toml('llvm-config') or self.downloading_llvm()\n-        llvm_needed = not self.get_toml('codegen-backends', 'rust') \\\n-            or \"llvm\" in self.get_toml('codegen-backends', 'rust')\n         for module in submodules:\n+            # This is handled by native::Llvm in rustbuild, not here\n             if module.endswith(\"llvm-project\"):\n-                # Don't sync the llvm-project submodule if an external LLVM was\n-                # provided, if we are downloading LLVM or if the LLVM backend is\n-                # not being built. Also, if the submodule has been initialized\n-                # already, sync it anyways so that it doesn't mess up contributor\n-                # pull requests.\n-                if external_llvm_provided or not llvm_needed:\n-                    if self.get_toml('lld') != 'true' and not llvm_checked_out:\n-                        continue\n+                continue\n             check = self.check_submodule(module, slow_submodules)\n             filtered_submodules.append((module, check))\n             submodules_names.append(module)\n         recorded = subprocess.Popen([\"git\", \"ls-tree\", \"HEAD\"] + submodules_names,\n                                     cwd=self.rust_root, stdout=subprocess.PIPE)\n         recorded = recorded.communicate()[0].decode(default_encoding).strip().splitlines()\n+        # { filename: hash }\n         recorded_submodules = {}\n         for data in recorded:\n+            # [mode, kind, hash, filename]\n             data = data.split()\n             recorded_submodules[data[3]] = data[2]\n         for module in filtered_submodules:"}, {"sha": "a351290a4206fec219a7ac1c41e20674646ab1fa", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9c3a2a57ef1f9f7adeaf997d8ff7cdf699aa364c/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c3a2a57ef1f9f7adeaf997d8ff7cdf699aa364c/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=9c3a2a57ef1f9f7adeaf997d8ff7cdf699aa364c", "patch": "@@ -472,12 +472,22 @@ impl Build {\n         slice::from_ref(&self.build.triple)\n     }\n \n+    /// If the LLVM submodule has been initialized already, sync it unconditionally. This avoids\n+    /// contributors checking in a submodule change by accident.\n+    pub fn maybe_update_llvm_submodule(&self) {\n+        if self.in_tree_llvm_info.is_git() {\n+            native::update_llvm_submodule(self);\n+        }\n+    }\n+\n     /// Executes the entire build, as configured by the flags and configuration.\n     pub fn build(&mut self) {\n         unsafe {\n             job::setup(self);\n         }\n \n+        self.maybe_update_llvm_submodule();\n+\n         if let Subcommand::Format { check, paths } = &self.config.cmd {\n             return format::format(self, *check, &paths);\n         }"}, {"sha": "44c281efe22be0f21626d4875ed6c0a0a9a730f7", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 83, "deletions": 1, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/9c3a2a57ef1f9f7adeaf997d8ff7cdf699aa364c/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c3a2a57ef1f9f7adeaf997d8ff7cdf699aa364c/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=9c3a2a57ef1f9f7adeaf997d8ff7cdf699aa364c", "patch": "@@ -21,7 +21,7 @@ use build_helper::{output, t};\n use crate::builder::{Builder, RunConfig, ShouldRun, Step};\n use crate::config::TargetSelection;\n use crate::util::{self, exe};\n-use crate::GitRepo;\n+use crate::{Build, GitRepo};\n use build_helper::up_to_date;\n \n pub struct Meta {\n@@ -91,6 +91,85 @@ pub fn prebuilt_llvm_config(\n     Err(Meta { stamp, build_llvm_config, out_dir, root: root.into() })\n }\n \n+// modified from `check_submodule` and `update_submodule` in bootstrap.py\n+pub(crate) fn update_llvm_submodule(build: &Build) {\n+    let llvm_project = &Path::new(\"src\").join(\"llvm-project\");\n+\n+    fn dir_is_empty(dir: &Path) -> bool {\n+        t!(std::fs::read_dir(dir)).next().is_none()\n+    }\n+\n+    // NOTE: The check for the empty directory is here because when running x.py\n+    // the first time, the llvm submodule won't be checked out. Check it out\n+    // now so we can build it.\n+    if !build.in_tree_llvm_info.is_git() && !dir_is_empty(&build.config.src.join(llvm_project)) {\n+        return;\n+    }\n+\n+    // check_submodule\n+    let checked_out = if build.config.fast_submodules {\n+        Some(output(\n+            Command::new(\"git\")\n+                .args(&[\"rev-parse\", \"HEAD\"])\n+                .current_dir(build.config.src.join(llvm_project)),\n+        ))\n+    } else {\n+        None\n+    };\n+\n+    // update_submodules\n+    let recorded = output(\n+        Command::new(\"git\")\n+            .args(&[\"ls-tree\", \"HEAD\"])\n+            .arg(llvm_project)\n+            .current_dir(&build.config.src),\n+    );\n+    let hash =\n+        recorded.split(' ').nth(2).unwrap_or_else(|| panic!(\"unexpected output `{}`\", recorded));\n+\n+    // update_submodule\n+    if let Some(llvm_hash) = checked_out {\n+        if hash == llvm_hash {\n+            // already checked out\n+            return;\n+        }\n+    }\n+\n+    println!(\"Updating submodule {}\", llvm_project.display());\n+    build.run(\n+        Command::new(\"git\")\n+            .args(&[\"submodule\", \"-q\", \"sync\"])\n+            .arg(llvm_project)\n+            .current_dir(&build.config.src),\n+    );\n+\n+    // Try passing `--progress` to start, then run git again without if that fails.\n+    let update = |progress: bool| {\n+        let mut git = Command::new(\"git\");\n+        git.args(&[\"submodule\", \"update\", \"--init\", \"--recursive\"]);\n+        if progress {\n+            git.arg(\"--progress\");\n+        }\n+        git.arg(llvm_project).current_dir(&build.config.src);\n+        git\n+    };\n+    // NOTE: doesn't use `try_run` because this shouldn't print an error if it fails.\n+    if !update(true).status().map_or(false, |status| status.success()) {\n+        build.run(&mut update(false));\n+    }\n+\n+    build.run(\n+        Command::new(\"git\")\n+            .args(&[\"reset\", \"-q\", \"--hard\"])\n+            .current_dir(build.config.src.join(llvm_project)),\n+    );\n+    build.run(\n+        Command::new(\"git\")\n+            .args(&[\"clean\", \"-qdfx\"])\n+            .current_dir(build.config.src.join(llvm_project)),\n+    );\n+}\n+\n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct Llvm {\n     pub target: TargetSelection,\n@@ -128,6 +207,9 @@ impl Step for Llvm {\n                 Err(m) => m,\n             };\n \n+        if !builder.config.dry_run {\n+            update_llvm_submodule(builder);\n+        }\n         if builder.config.llvm_link_shared\n             && (target.contains(\"windows\") || target.contains(\"apple-darwin\"))\n         {"}, {"sha": "b1ec072f3f8aae7da31f1d171b770bf097948197", "filename": "src/build_helper/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9c3a2a57ef1f9f7adeaf997d8ff7cdf699aa364c/src%2Fbuild_helper%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c3a2a57ef1f9f7adeaf997d8ff7cdf699aa364c/src%2Fbuild_helper%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbuild_helper%2Flib.rs?ref=9c3a2a57ef1f9f7adeaf997d8ff7cdf699aa364c", "patch": "@@ -130,6 +130,7 @@ pub fn make(host: &str) -> PathBuf {\n     }\n }\n \n+#[track_caller]\n pub fn output(cmd: &mut Command) -> String {\n     let output = match cmd.stderr(Stdio::inherit()).output() {\n         Ok(status) => status,"}]}