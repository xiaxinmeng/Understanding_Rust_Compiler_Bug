{"sha": "75461633350a24c3c23d387155c200ae31ccc870", "node_id": "C_kwDOAAsO6NoAKDc1NDYxNjMzMzUwYTI0YzNjMjNkMzg3MTU1YzIwMGFlMzFjY2M4NzA", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-02-03T15:53:23Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-02-03T15:59:34Z"}, "message": "Improve self-referential diagnostic somewhat", "tree": {"sha": "22095ca2223c9f6880f92eb8fefd2cf505508a2d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/22095ca2223c9f6880f92eb8fefd2cf505508a2d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75461633350a24c3c23d387155c200ae31ccc870", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75461633350a24c3c23d387155c200ae31ccc870", "html_url": "https://github.com/rust-lang/rust/commit/75461633350a24c3c23d387155c200ae31ccc870", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75461633350a24c3c23d387155c200ae31ccc870/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6807d3773dad925cab3797aef7e7e5a50bfabfef", "url": "https://api.github.com/repos/rust-lang/rust/commits/6807d3773dad925cab3797aef7e7e5a50bfabfef", "html_url": "https://github.com/rust-lang/rust/commit/6807d3773dad925cab3797aef7e7e5a50bfabfef"}], "stats": {"total": 47, "additions": 27, "deletions": 20}, "files": [{"sha": "11a3ee5362967524124398a8f6f7cea12dfbe031", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 19, "deletions": 12, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/75461633350a24c3c23d387155c200ae31ccc870/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75461633350a24c3c23d387155c200ae31ccc870/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=75461633350a24c3c23d387155c200ae31ccc870", "patch": "@@ -644,20 +644,18 @@ pub trait PrettyPrinter<'tcx>:\n                     return Ok(self);\n                 }\n \n-                return with_no_queries(|| {\n-                    let def_key = self.tcx().def_key(def_id);\n-                    if let Some(name) = def_key.disambiguated_data.data.get_opt_name() {\n-                        p!(write(\"{}\", name));\n-                        // FIXME(eddyb) print this with `print_def_path`.\n-                        if !substs.is_empty() {\n-                            p!(\"::\");\n-                            p!(generic_delimiters(|cx| cx.comma_sep(substs.iter())));\n-                        }\n-                        return Ok(self);\n+                let def_key = self.tcx().def_key(def_id);\n+                if let Some(name) = def_key.disambiguated_data.data.get_opt_name() {\n+                    p!(write(\"{}\", name));\n+                    // FIXME(eddyb) print this with `print_def_path`.\n+                    if !substs.is_empty() {\n+                        p!(\"::\");\n+                        p!(generic_delimiters(|cx| cx.comma_sep(substs.iter())));\n                     }\n+                    return Ok(self);\n+                }\n \n-                    self.pretty_print_opaque_impl_type(def_id, substs)\n-                });\n+                return self.pretty_print_opaque_impl_type(def_id, substs);\n             }\n             ty::Str => p!(\"str\"),\n             ty::Generator(did, substs, movability) => {\n@@ -900,6 +898,15 @@ pub trait PrettyPrinter<'tcx>:\n                     if !first {\n                         p!(\", \");\n                     }\n+                    if let GenericArgKind::Type(ty) = ty.unpack() {\n+                        if let ty::Opaque(d, substs) = *ty.kind() {\n+                            if d == def_id {\n+                                p!(print_def_path(d, substs));\n+                                first = false;\n+                                continue;\n+                            }\n+                        }\n+                    }\n                     p!(print(trait_ref.rebind(*ty)));\n                     first = false;\n                 }"}, {"sha": "e55fe3a3aafe7fc8d2ce2a84883a8295053b8c1e", "filename": "src/test/ui/type-alias-impl-trait/nested.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75461633350a24c3c23d387155c200ae31ccc870/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75461633350a24c3c23d387155c200ae31ccc870/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested.rs?ref=75461633350a24c3c23d387155c200ae31ccc870", "patch": "@@ -13,5 +13,5 @@ fn bar() -> Bar {\n \n fn main() {\n     println!(\"{:?}\", bar());\n-    //~^ ERROR `impl Trait<Opaque(DefId(0:4 ~ nested[14f6]::Foo::{opaque#0}), [])>` doesn't implement `Debug`\n+    //~^ ERROR `impl Trait<impl Debug>` doesn't implement `Debug`\n }"}, {"sha": "eff56e3b76d9ca20a5d303b1dd4b50164f9020ff", "filename": "src/test/ui/type-alias-impl-trait/nested.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/75461633350a24c3c23d387155c200ae31ccc870/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/75461633350a24c3c23d387155c200ae31ccc870/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested.stderr?ref=75461633350a24c3c23d387155c200ae31ccc870", "patch": "@@ -1,10 +1,10 @@\n-error[E0277]: `impl Trait<Opaque(DefId(0:4 ~ nested[14f6]::Foo::{opaque#0}), [])>` doesn't implement `Debug`\n+error[E0277]: `impl Trait<impl Debug>` doesn't implement `Debug`\n   --> $DIR/nested.rs:15:22\n    |\n LL |     println!(\"{:?}\", bar());\n-   |                      ^^^^^ `impl Trait<Opaque(DefId(0:4 ~ nested[14f6]::Foo::{opaque#0}), [])>` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n+   |                      ^^^^^ `impl Trait<impl Debug>` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n    |\n-   = help: the trait `Debug` is not implemented for `impl Trait<Opaque(DefId(0:4 ~ nested[14f6]::Foo::{opaque#0}), [])>`\n+   = help: the trait `Debug` is not implemented for `impl Trait<impl Debug>`\n    = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "46468bc98b968e1cb38737dd4102edbe529d8f98", "filename": "src/test/ui/type-alias-impl-trait/self-referential.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75461633350a24c3c23d387155c200ae31ccc870/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fself-referential.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75461633350a24c3c23d387155c200ae31ccc870/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fself-referential.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fself-referential.rs?ref=75461633350a24c3c23d387155c200ae31ccc870", "patch": "@@ -3,7 +3,7 @@\n type Bar<'a, 'b> = impl PartialEq<Bar<'b, 'a>> + std::fmt::Debug;\n \n fn bar<'a, 'b>(i: &'a i32) -> Bar<'a, 'b> {\n-    i //~ ERROR can't compare `&i32` with `impl PartialEq<Opaque\n+    i //~ ERROR can't compare `&i32` with `impl PartialEq<Bar<'a, 'b>\n }\n \n fn main() {"}, {"sha": "29f1e0bec083d2a40107230ed7b6e359b79e25dc", "filename": "src/test/ui/type-alias-impl-trait/self-referential.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/75461633350a24c3c23d387155c200ae31ccc870/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fself-referential.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/75461633350a24c3c23d387155c200ae31ccc870/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fself-referential.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fself-referential.stderr?ref=75461633350a24c3c23d387155c200ae31ccc870", "patch": "@@ -1,10 +1,10 @@\n-error[E0277]: can't compare `&i32` with `impl PartialEq<Opaque(DefId(0:6 ~ self_referential[5b7d]::Bar::{opaque#0}), [ReFree(DefId(0:7 ~ self_referential[5b7d]::bar), BrNamed(DefId(0:8 ~ self_referential[5b7d]::bar::'a), 'a)), ReEarlyBound(0, 'b)])> + Debug`\n+error[E0277]: can't compare `&i32` with `impl PartialEq<Bar<'a, 'b>::{opaque#0}> + Debug`\n   --> $DIR/self-referential.rs:6:5\n    |\n LL |     i\n-   |     ^ no implementation for `&i32 == impl PartialEq<Opaque(DefId(0:6 ~ self_referential[5b7d]::Bar::{opaque#0}), [ReFree(DefId(0:7 ~ self_referential[5b7d]::bar), BrNamed(DefId(0:8 ~ self_referential[5b7d]::bar::'a), 'a)), ReEarlyBound(0, 'b)])> + Debug`\n+   |     ^ no implementation for `&i32 == impl PartialEq<Bar<'a, 'b>::{opaque#0}> + Debug`\n    |\n-   = help: the trait `PartialEq<impl PartialEq<Opaque(DefId(0:6 ~ self_referential[5b7d]::Bar::{opaque#0}), [ReFree(DefId(0:7 ~ self_referential[5b7d]::bar), BrNamed(DefId(0:8 ~ self_referential[5b7d]::bar::'a), 'a)), ReEarlyBound(0, 'b)])> + Debug>` is not implemented for `&i32`\n+   = help: the trait `PartialEq<impl PartialEq<Bar<'a, 'b>::{opaque#0}> + Debug>` is not implemented for `&i32`\n \n error: aborting due to previous error\n "}]}