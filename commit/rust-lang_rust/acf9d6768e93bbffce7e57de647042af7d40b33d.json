{"sha": "acf9d6768e93bbffce7e57de647042af7d40b33d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjZjlkNjc2OGU5M2JiZmZjZTdlNTdkZTY0NzA0MmFmN2Q0MGIzM2Q=", "commit": {"author": {"name": "Eljay", "email": "lee@leejeffery.co.uk", "date": "2015-08-04T15:40:23Z"}, "committer": {"name": "Eljay", "email": "lee@leejeffery.co.uk", "date": "2015-08-04T15:40:23Z"}, "message": "Improve rustdoc search type filtering.", "tree": {"sha": "0c34158649a73ab174b7b87c023bd7ef7b9b0ce1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c34158649a73ab174b7b87c023bd7ef7b9b0ce1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/acf9d6768e93bbffce7e57de647042af7d40b33d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/acf9d6768e93bbffce7e57de647042af7d40b33d", "html_url": "https://github.com/rust-lang/rust/commit/acf9d6768e93bbffce7e57de647042af7d40b33d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/acf9d6768e93bbffce7e57de647042af7d40b33d/comments", "author": null, "committer": null, "parents": [{"sha": "4b79add08653d89f08e5a5c94c2132515a1aa30f", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b79add08653d89f08e5a5c94c2132515a1aa30f", "html_url": "https://github.com/rust-lang/rust/commit/4b79add08653d89f08e5a5c94c2132515a1aa30f"}], "stats": {"total": 38, "additions": 29, "deletions": 9}, "files": [{"sha": "51dc8c6e4771373eeaa340927988f809ec1932a7", "filename": "src/librustdoc/html/layout.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/acf9d6768e93bbffce7e57de647042af7d40b33d/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acf9d6768e93bbffce7e57de647042af7d40b33d/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Flayout.rs?ref=acf9d6768e93bbffce7e57de647042af7d40b33d", "patch": "@@ -113,8 +113,8 @@ r##\"<!DOCTYPE html>\n                 <p>\n                     Accepted types are: <code>fn</code>, <code>mod</code>,\n                     <code>struct</code>, <code>enum</code>,\n-                    <code>trait</code>, <code>typedef</code> (or\n-                    <code>tdef</code>).\n+                    <code>trait</code>, <code>type</code>, <code>macro</code>,\n+                    and <code>const</code>.\n                 </p>\n \n                 <p>"}, {"sha": "f1351893915fa3440b4b38a6cfee08063ab02268", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 27, "deletions": 7, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/acf9d6768e93bbffce7e57de647042af7d40b33d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/acf9d6768e93bbffce7e57de647042af7d40b33d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=acf9d6768e93bbffce7e57de647042af7d40b33d", "patch": "@@ -230,6 +230,28 @@\n                 }\n             }\n \n+            function typePassesFilter(filter, type) {\n+                // No filter\n+                if (filter < 0) return true;\n+\n+                // Exact match\n+                if (filter === type) return true;\n+\n+                // Match related items\n+                var name = itemTypes[type];\n+                switch (itemTypes[filter]) {\n+                    case \"constant\":\n+                        return (name == \"associatedconstant\");\n+                    case \"fn\":\n+                        return (name == \"method\" || name == \"tymethod\");\n+                    case \"type\":\n+                        return (name == \"primitive\");\n+                }\n+\n+                // No match\n+                return false;\n+            }\n+\n             // quoted values mean literal search\n             var nSearchWords = searchWords.length;\n             if ((val.charAt(0) === \"\\\"\" || val.charAt(0) === \"'\") &&\n@@ -239,7 +261,7 @@\n                 for (var i = 0; i < nSearchWords; ++i) {\n                     if (searchWords[i] === val) {\n                         // filter type: ... queries\n-                        if (typeFilter < 0 || typeFilter === searchIndex[i].ty) {\n+                        if (typePassesFilter(typeFilter, searchIndex[i].ty)) {\n                             results.push({id: i, index: -1});\n                         }\n                     }\n@@ -285,7 +307,7 @@\n                             searchWords[j].replace(/_/g, \"\").indexOf(val) > -1)\n                         {\n                             // filter type: ... queries\n-                            if (typeFilter < 0 || typeFilter === searchIndex[j].ty) {\n+                            if (typePassesFilter(typeFilter, searchIndex[j].ty)) {\n                                 results.push({\n                                     id: j,\n                                     index: searchWords[j].replace(/_/g, \"\").indexOf(val),\n@@ -295,7 +317,7 @@\n                         } else if (\n                             (lev_distance = levenshtein(searchWords[j], val)) <=\n                                 MAX_LEV_DISTANCE) {\n-                            if (typeFilter < 0 || typeFilter === searchIndex[j].ty) {\n+                            if (typePassesFilter(typeFilter, searchIndex[j].ty)) {\n                                 results.push({\n                                     id: j,\n                                     index: 0,\n@@ -451,11 +473,9 @@\n             var matches, type, query, raw = $('.search-input').val();\n             query = raw;\n \n-            matches = query.match(/^(fn|mod|struct|enum|trait|t(ype)?d(ef)?)\\s*:\\s*/i);\n+            matches = query.match(/^(fn|mod|struct|enum|trait|type|const|macro)\\s*:\\s*/i);\n             if (matches) {\n-                type = matches[1].replace(/^td$/, 'typedef')\n-                                 .replace(/^tdef$/, 'typedef')\n-                                 .replace(/^typed$/, 'typedef');\n+                type = matches[1].replace(/^const$/, 'constant');\n                 query = query.substring(matches[0].length);\n             }\n "}]}