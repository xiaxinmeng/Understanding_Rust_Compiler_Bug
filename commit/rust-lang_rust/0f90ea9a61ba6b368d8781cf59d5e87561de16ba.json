{"sha": "0f90ea9a61ba6b368d8781cf59d5e87561de16ba", "node_id": "C_kwDOAAsO6NoAKDBmOTBlYTlhNjFiYTZiMzY4ZDg3ODFjZjU5ZDVlODc1NjFkZTE2YmE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-12-15T21:03:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-15T21:03:01Z"}, "message": "Rollup merge of #105743 - nnethercote:SimplifiedType-cleanups, r=lcnr\n\n`SimplifiedType` cleanups\n\nr? `@lcnr`", "tree": {"sha": "af24b1aad8fe66859c2f15b123118012c48b41c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af24b1aad8fe66859c2f15b123118012c48b41c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f90ea9a61ba6b368d8781cf59d5e87561de16ba", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjm4uFCRBK7hj4Ov3rIwAADKgIABzztBdt5dpCf2csxi45JG9W\nHHCLDMyxzjGW7opiKosYtTBXcsvAK8jndhubkHKraT6OO9V09HaamtMXYLw9kV1i\n35qjjUK6aLKHdxHxp0Z5VCGbiywTnPjmyII5RH7wDPqjIstCj+PUYZSeI+IucE+q\nZLVk3O+yr2UwvCEHEaDGUdXeVcf/8NZ8JaqiYJEFJEXZmUsW/42bU74tDLl+6Z4v\nknAKXdlX/N44L8VG8oJocf9sLLLbtJeJTTpp6PNZhZrxDMpO/qEQ3QYTAJ069PrU\nxZ41+NQGHTdsKyPa59bPxKSQXbJHY+m5nidX4vICnmy0wA/qdXcaTgO7Th+WxkI=\n=7t4b\n-----END PGP SIGNATURE-----\n", "payload": "tree af24b1aad8fe66859c2f15b123118012c48b41c9\nparent 0fbaf760ed749cc517cfc23a0c95dae1bb5d757c\nparent 5258b655a233f48960e8b4430c94c00b928e8b71\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1671138181 +0100\ncommitter GitHub <noreply@github.com> 1671138181 +0100\n\nRollup merge of #105743 - nnethercote:SimplifiedType-cleanups, r=lcnr\n\n`SimplifiedType` cleanups\n\nr? `@lcnr`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f90ea9a61ba6b368d8781cf59d5e87561de16ba", "html_url": "https://github.com/rust-lang/rust/commit/0f90ea9a61ba6b368d8781cf59d5e87561de16ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f90ea9a61ba6b368d8781cf59d5e87561de16ba/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0fbaf760ed749cc517cfc23a0c95dae1bb5d757c", "url": "https://api.github.com/repos/rust-lang/rust/commits/0fbaf760ed749cc517cfc23a0c95dae1bb5d757c", "html_url": "https://github.com/rust-lang/rust/commit/0fbaf760ed749cc517cfc23a0c95dae1bb5d757c"}, {"sha": "5258b655a233f48960e8b4430c94c00b928e8b71", "url": "https://api.github.com/repos/rust-lang/rust/commits/5258b655a233f48960e8b4430c94c00b928e8b71", "html_url": "https://github.com/rust-lang/rust/commit/5258b655a233f48960e8b4430c94c00b928e8b71"}], "stats": {"total": 70, "additions": 15, "deletions": 55}, "files": [{"sha": "f785fb5c4b9be5b5c57f78104e7895b029bcbabf", "filename": "compiler/rustc_middle/src/ty/fast_reject.rs", "status": "modified", "additions": 10, "deletions": 50, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/0f90ea9a61ba6b368d8781cf59d5e87561de16ba/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffast_reject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f90ea9a61ba6b368d8781cf59d5e87561de16ba/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffast_reject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffast_reject.rs?ref=0f90ea9a61ba6b368d8781cf59d5e87561de16ba", "patch": "@@ -6,28 +6,18 @@ use std::fmt::Debug;\n use std::hash::Hash;\n use std::iter;\n \n-use self::SimplifiedTypeGen::*;\n+use self::SimplifiedType::*;\n \n-pub type SimplifiedType = SimplifiedTypeGen<DefId>;\n-\n-/// See `simplify_type`\n-///\n-/// Note that we keep this type generic over the type of identifier it uses\n-/// because we sometimes need to use SimplifiedTypeGen values as stable sorting\n-/// keys (in which case we use a DefPathHash as id-type) but in the general case\n-/// the non-stable but fast to construct DefId-version is the better choice.\n+/// See `simplify_type`.\n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, TyEncodable, TyDecodable, HashStable)]\n-pub enum SimplifiedTypeGen<D>\n-where\n-    D: Copy + Debug + Eq,\n-{\n+pub enum SimplifiedType {\n     BoolSimplifiedType,\n     CharSimplifiedType,\n     IntSimplifiedType(ty::IntTy),\n     UintSimplifiedType(ty::UintTy),\n     FloatSimplifiedType(ty::FloatTy),\n-    AdtSimplifiedType(D),\n-    ForeignSimplifiedType(D),\n+    AdtSimplifiedType(DefId),\n+    ForeignSimplifiedType(DefId),\n     StrSimplifiedType,\n     ArraySimplifiedType,\n     SliceSimplifiedType,\n@@ -38,9 +28,9 @@ where\n     /// A trait object, all of whose components are markers\n     /// (e.g., `dyn Send + Sync`).\n     MarkerTraitObjectSimplifiedType,\n-    TraitSimplifiedType(D),\n-    ClosureSimplifiedType(D),\n-    GeneratorSimplifiedType(D),\n+    TraitSimplifiedType(DefId),\n+    ClosureSimplifiedType(DefId),\n+    GeneratorSimplifiedType(DefId),\n     GeneratorWitnessSimplifiedType(usize),\n     FunctionSimplifiedType(usize),\n     PlaceholderSimplifiedType,\n@@ -142,8 +132,8 @@ pub fn simplify_type<'tcx>(\n     }\n }\n \n-impl<D: Copy + Debug + Eq> SimplifiedTypeGen<D> {\n-    pub fn def(self) -> Option<D> {\n+impl SimplifiedType {\n+    pub fn def(self) -> Option<DefId> {\n         match self {\n             AdtSimplifiedType(d)\n             | ForeignSimplifiedType(d)\n@@ -153,36 +143,6 @@ impl<D: Copy + Debug + Eq> SimplifiedTypeGen<D> {\n             _ => None,\n         }\n     }\n-\n-    pub fn map_def<U, F>(self, map: F) -> SimplifiedTypeGen<U>\n-    where\n-        F: Fn(D) -> U,\n-        U: Copy + Debug + Eq,\n-    {\n-        match self {\n-            BoolSimplifiedType => BoolSimplifiedType,\n-            CharSimplifiedType => CharSimplifiedType,\n-            IntSimplifiedType(t) => IntSimplifiedType(t),\n-            UintSimplifiedType(t) => UintSimplifiedType(t),\n-            FloatSimplifiedType(t) => FloatSimplifiedType(t),\n-            AdtSimplifiedType(d) => AdtSimplifiedType(map(d)),\n-            ForeignSimplifiedType(d) => ForeignSimplifiedType(map(d)),\n-            StrSimplifiedType => StrSimplifiedType,\n-            ArraySimplifiedType => ArraySimplifiedType,\n-            SliceSimplifiedType => SliceSimplifiedType,\n-            RefSimplifiedType(m) => RefSimplifiedType(m),\n-            PtrSimplifiedType(m) => PtrSimplifiedType(m),\n-            NeverSimplifiedType => NeverSimplifiedType,\n-            MarkerTraitObjectSimplifiedType => MarkerTraitObjectSimplifiedType,\n-            TupleSimplifiedType(n) => TupleSimplifiedType(n),\n-            TraitSimplifiedType(d) => TraitSimplifiedType(map(d)),\n-            ClosureSimplifiedType(d) => ClosureSimplifiedType(map(d)),\n-            GeneratorSimplifiedType(d) => GeneratorSimplifiedType(map(d)),\n-            GeneratorWitnessSimplifiedType(n) => GeneratorWitnessSimplifiedType(n),\n-            FunctionSimplifiedType(n) => FunctionSimplifiedType(n),\n-            PlaceholderSimplifiedType => PlaceholderSimplifiedType,\n-        }\n-    }\n }\n \n /// Given generic arguments from an obligation and an impl,"}, {"sha": "7c18362dfc78397a1517804e468ab1b4f507c625", "filename": "compiler/rustc_middle/src/ty/parameterized.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0f90ea9a61ba6b368d8781cf59d5e87561de16ba/compiler%2Frustc_middle%2Fsrc%2Fty%2Fparameterized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f90ea9a61ba6b368d8781cf59d5e87561de16ba/compiler%2Frustc_middle%2Fsrc%2Fty%2Fparameterized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fparameterized.rs?ref=0f90ea9a61ba6b368d8781cf59d5e87561de16ba", "patch": "@@ -1,5 +1,5 @@\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_hir::def_id::{DefId, DefIndex};\n+use rustc_hir::def_id::DefIndex;\n use rustc_index::vec::{Idx, IndexVec};\n \n use crate::middle::exported_symbols::ExportedSymbol;\n@@ -67,7 +67,7 @@ trivially_parameterized_over_tcx! {\n     ty::TraitDef,\n     ty::Visibility<DefIndex>,\n     ty::adjustment::CoerceUnsizedInfo,\n-    ty::fast_reject::SimplifiedTypeGen<DefId>,\n+    ty::fast_reject::SimplifiedType,\n     rustc_ast::Attribute,\n     rustc_ast::DelimArgs,\n     rustc_attr::ConstStability,"}, {"sha": "d1601272af7596e709ab607294aa430b953ca4c0", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f90ea9a61ba6b368d8781cf59d5e87561de16ba/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f90ea9a61ba6b368d8781cf59d5e87561de16ba/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=0f90ea9a61ba6b368d8781cf59d5e87561de16ba", "patch": "@@ -325,7 +325,7 @@ pub(crate) fn build_impls(\n     // * https://github.com/rust-lang/rust/pull/99917 \u2014 where the feature got used\n     // * https://github.com/rust-lang/rust/issues/53487 \u2014 overall tracking issue for Error\n     if tcx.has_attr(did, sym::rustc_has_incoherent_inherent_impls) {\n-        use rustc_middle::ty::fast_reject::SimplifiedTypeGen::*;\n+        use rustc_middle::ty::fast_reject::SimplifiedType::*;\n         let type_ =\n             if tcx.is_trait(did) { TraitSimplifiedType(did) } else { AdtSimplifiedType(did) };\n         for &did in tcx.incoherent_impls(type_) {"}, {"sha": "7a13e7e36d169c3c50cb31561469381a9414b651", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f90ea9a61ba6b368d8781cf59d5e87561de16ba/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f90ea9a61ba6b368d8781cf59d5e87561de16ba/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=0f90ea9a61ba6b368d8781cf59d5e87561de16ba", "patch": "@@ -1870,7 +1870,7 @@ impl PrimitiveType {\n     }\n \n     pub(crate) fn simplified_types() -> &'static SimplifiedTypes {\n-        use ty::fast_reject::SimplifiedTypeGen::*;\n+        use ty::fast_reject::SimplifiedType::*;\n         use ty::{FloatTy, IntTy, UintTy};\n         use PrimitiveType::*;\n         static CELL: OnceCell<SimplifiedTypes> = OnceCell::new();"}, {"sha": "652f8b4d3c56ef7109668aface5f83bf35cc8514", "filename": "src/tools/clippy/clippy_utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f90ea9a61ba6b368d8781cf59d5e87561de16ba/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f90ea9a61ba6b368d8781cf59d5e87561de16ba/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs?ref=0f90ea9a61ba6b368d8781cf59d5e87561de16ba", "patch": "@@ -97,7 +97,7 @@ use rustc_middle::hir::place::PlaceBase;\n use rustc_middle::ty as rustc_ty;\n use rustc_middle::ty::adjustment::{Adjust, Adjustment, AutoBorrow};\n use rustc_middle::ty::binding::BindingMode;\n-use rustc_middle::ty::fast_reject::SimplifiedTypeGen::{\n+use rustc_middle::ty::fast_reject::SimplifiedType::{\n     ArraySimplifiedType, BoolSimplifiedType, CharSimplifiedType, FloatSimplifiedType, IntSimplifiedType,\n     PtrSimplifiedType, SliceSimplifiedType, StrSimplifiedType, UintSimplifiedType,\n };"}]}