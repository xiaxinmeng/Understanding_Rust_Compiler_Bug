{"sha": "8db88df75801c0c8284c24786483f46d3542a183", "node_id": "C_kwDOAAsO6NoAKDhkYjg4ZGY3NTgwMWMwYzgyODRjMjQ3ODY0ODNmNDZkMzU0MmExODM", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-02-22T09:45:29Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-02-22T09:45:29Z"}, "message": "simplify and document", "tree": {"sha": "9559b8c0befdc19b2e4003384189f75f55589226", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9559b8c0befdc19b2e4003384189f75f55589226"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8db88df75801c0c8284c24786483f46d3542a183", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8db88df75801c0c8284c24786483f46d3542a183", "html_url": "https://github.com/rust-lang/rust/commit/8db88df75801c0c8284c24786483f46d3542a183", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8db88df75801c0c8284c24786483f46d3542a183/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94e59c9c566570b8f3013fe02d0835fce0b4fb12", "url": "https://api.github.com/repos/rust-lang/rust/commits/94e59c9c566570b8f3013fe02d0835fce0b4fb12", "html_url": "https://github.com/rust-lang/rust/commit/94e59c9c566570b8f3013fe02d0835fce0b4fb12"}], "stats": {"total": 101, "additions": 53, "deletions": 48}, "files": [{"sha": "20c360e302ee274929ff1a377fba6c13599cc308", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8db88df75801c0c8284c24786483f46d3542a183/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8db88df75801c0c8284c24786483f46d3542a183/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=8db88df75801c0c8284c24786483f46d3542a183", "patch": "@@ -675,15 +675,24 @@ impl<'db> SemanticsImpl<'db> {\n                             ast::MacroCall(mcall) => mcall,\n                             // attribute we failed expansion for earlier, this might be a derive invocation\n                             // so try downmapping the token into the pseudo derive expansion\n+                            // see [hir_expand::builtin_attr_macro] for how the pseudo derive expansion works\n                             ast::Meta(meta) => {\n                                 let attr = meta.parent_attr()?;\n                                 let adt = attr.syntax().parent().and_then(ast::Adt::cast)?;\n                                 let call_id = self.with_ctx(|ctx| {\n-                                    let (_, call_id, _) = ctx.attr_to_derive_macro_call(token.with_value(&adt), token.with_value(attr))?;\n+                                    let (_, call_id, _) = ctx.attr_to_derive_macro_call(\n+                                        token.with_value(&adt),\n+                                        token.with_value(attr),\n+                                    )?;\n                                     Some(call_id)\n                                 })?;\n                                 let file_id = call_id.as_file();\n-                                return process_expansion_for_token(&mut stack,file_id,Some(adt.into()),token.as_ref(),);\n+                                return process_expansion_for_token(\n+                                    &mut stack,\n+                                    file_id,\n+                                    Some(adt.into()),\n+                                    token.as_ref(),\n+                                );\n                             },\n                             _ => return None,\n                         }"}, {"sha": "2dd7cc485969f064765bab516c27ab5bb7271eaa", "filename": "crates/hir_def/src/nameres/collector.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8db88df75801c0c8284c24786483f46d3542a183/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8db88df75801c0c8284c24786483f46d3542a183/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=8db88df75801c0c8284c24786483f46d3542a183", "patch": "@@ -1170,6 +1170,9 @@ impl DefCollector<'_> {\n                                     len = idx;\n                                 }\n \n+                                // We treat the #[derive] macro as an attribute call, but we do not resolve it for nameres collection.\n+                                // This is just a trick to be able to resolve the input to derives as proper paths.\n+                                // Check the comment in [`builtin_attr_macro`].\n                                 let call_id = attr_macro_as_call_id(\n                                     self.db,\n                                     file_ast_id,"}, {"sha": "6301da1c832df35caf3a6525fe7ec83f9e619d31", "filename": "crates/hir_expand/src/builtin_attr_macro.rs", "status": "modified", "additions": 36, "deletions": 44, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/8db88df75801c0c8284c24786483f46d3542a183/crates%2Fhir_expand%2Fsrc%2Fbuiltin_attr_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8db88df75801c0c8284c24786483f46d3542a183/crates%2Fhir_expand%2Fsrc%2Fbuiltin_attr_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fbuiltin_attr_macro.rs?ref=8db88df75801c0c8284c24786483f46d3542a183", "patch": "@@ -82,30 +82,47 @@ fn dummy_attr_expand(\n     ExpandResult::ok(tt.clone())\n }\n \n+/// We generate a very specific expansion here, as we do not actually expand the `#[derive]` attribute\n+/// itself in name res, but we do want to expand it to something for the IDE layer, so that the input\n+/// derive attributes can be downmapped, and resolved as proper paths.\n+/// This is basically a hack, that simplifies the hacks we need in a lot of ide layer places to\n+/// somewhat inconsistently resolve derive attributes.\n+///\n+/// As such, we expand `#[derive(Foo, bar::Bar)]` into\n+/// ```\n+///  #[Foo]\n+///  #[bar::Bar]\n+///  ();\n+/// ```\n+/// which allows fallback path resolution in hir::Semantics to properly identify our derives.\n+/// Since we do not expand the attribute in nameres though, we keep the original item.\n+///\n+/// The ideal expansion here would be for the `#[derive]` to re-emit the annotated item and somehow\n+/// use the input paths in its output as well.\n+/// But that would bring two problems with it, for one every derive would duplicate the item token tree\n+/// wasting a lot of memory, and it would also require some way to use a path in a way that makes it\n+/// always resolve as a derive without nameres recollecting them.\n+/// So this hacky approach is a lot more friendly for us, though it does require a bit of support in\n+/// [`hir::Semantics`] to make this work.\n fn derive_attr_expand(\n     db: &dyn AstDatabase,\n     id: MacroCallId,\n     tt: &tt::Subtree,\n ) -> ExpandResult<tt::Subtree> {\n-    // we generate a very specific expansion here, as we do not actually expand the `#[derive]` attribute\n-    // itself in name res, but we do want to expand it to something for the IDE layer, so that the input\n-    // derive attributes can be downmapped, and resolved\n-    // This is basically a hack, to get rid of hacks in the IDE layer that slowly accumulate more and more\n-    // in various places.\n-\n-    // we transform the token tree of `#[derive(Foo, bar::Bar)]` into\n-    // ```\n-    //  #[Foo]\n-    //  #[bar::Bar]\n-    //  ();\n-    // ```\n-    // which allows fallback path resolution in hir::Semantics to properly identify our derives\n     let loc = db.lookup_intern_macro_call(id);\n     let derives = match &loc.kind {\n         MacroCallKind::Attr { attr_args, .. } => &attr_args.0,\n         _ => return ExpandResult::ok(tt.clone()),\n     };\n \n+    let mk_leaf = |char| {\n+        tt::TokenTree::Leaf(tt::Leaf::Punct(tt::Punct {\n+            char,\n+            spacing: tt::Spacing::Alone,\n+            id: tt::TokenId::unspecified(),\n+        }))\n+    };\n+\n     let mut token_trees = Vec::new();\n     for (comma, group) in &derives\n         .token_trees\n@@ -119,38 +136,13 @@ fn derive_attr_expand(\n         if comma {\n             continue;\n         }\n-        let wrap = |leaf| tt::TokenTree::Leaf(tt::Leaf::Punct(leaf));\n-        token_trees.push(wrap(tt::Punct {\n-            char: '#',\n-            spacing: tt::Spacing::Alone,\n-            id: tt::TokenId::unspecified(),\n-        }));\n-        token_trees.push(wrap(tt::Punct {\n-            char: '[',\n-            spacing: tt::Spacing::Alone,\n-            id: tt::TokenId::unspecified(),\n-        }));\n+        token_trees.push(mk_leaf('#'));\n+        token_trees.push(mk_leaf('['));\n         token_trees.extend(group.cloned().map(tt::TokenTree::Leaf));\n-        token_trees.push(wrap(tt::Punct {\n-            char: ']',\n-            spacing: tt::Spacing::Alone,\n-            id: tt::TokenId::unspecified(),\n-        }));\n-        token_trees.push(wrap(tt::Punct {\n-            char: '(',\n-            spacing: tt::Spacing::Alone,\n-            id: tt::TokenId::unspecified(),\n-        }));\n-        token_trees.push(wrap(tt::Punct {\n-            char: ')',\n-            spacing: tt::Spacing::Alone,\n-            id: tt::TokenId::unspecified(),\n-        }));\n-        token_trees.push(wrap(tt::Punct {\n-            char: ';',\n-            spacing: tt::Spacing::Alone,\n-            id: tt::TokenId::unspecified(),\n-        }));\n+        token_trees.push(mk_leaf(']'));\n     }\n+    token_trees.push(mk_leaf('('));\n+    token_trees.push(mk_leaf(')'));\n+    token_trees.push(mk_leaf(';'));\n     ExpandResult::ok(tt::Subtree { delimiter: tt.delimiter, token_trees })\n }"}, {"sha": "cc38faa13693c64d2227339fe52afa974e7ccd3b", "filename": "crates/hir_expand/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8db88df75801c0c8284c24786483f46d3542a183/crates%2Fhir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8db88df75801c0c8284c24786483f46d3542a183/crates%2Fhir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Flib.rs?ref=8db88df75801c0c8284c24786483f46d3542a183", "patch": "@@ -166,6 +166,7 @@ pub enum MacroCallKind {\n         /// Outer attributes are counted first, then inner attributes. This does not support\n         /// out-of-line modules, which may have attributes spread across 2 files!\n         invoc_attr_index: u32,\n+        /// Whether this attribute is the `#[derive]` attribute.\n         is_derive: bool,\n     },\n }"}, {"sha": "cbe4adf1b9c706e42ae9e24ad1b7267fb4a6846b", "filename": "crates/ide_db/src/helpers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8db88df75801c0c8284c24786483f46d3542a183/crates%2Fide_db%2Fsrc%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8db88df75801c0c8284c24786483f46d3542a183/crates%2Fide_db%2Fsrc%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers.rs?ref=8db88df75801c0c8284c24786483f46d3542a183", "patch": "@@ -16,7 +16,7 @@ use hir::{ItemInNs, MacroDef, ModuleDef, Name, Semantics};\n use itertools::Itertools;\n use syntax::{\n     ast::{self, make, HasLoopBody},\n-    AstNode, SyntaxKind, SyntaxToken, TokenAtOffset, WalkEvent, T,\n+    AstNode, AstToken, SyntaxKind, SyntaxToken, TokenAtOffset, WalkEvent, T,\n };\n \n use crate::{defs::Definition, RootDatabase};"}, {"sha": "99ddc188d8140acf1ecfaa51302fe6df4fea17a6", "filename": "docs/dev/architecture.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8db88df75801c0c8284c24786483f46d3542a183/docs%2Fdev%2Farchitecture.md", "raw_url": "https://github.com/rust-lang/rust/raw/8db88df75801c0c8284c24786483f46d3542a183/docs%2Fdev%2Farchitecture.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Farchitecture.md?ref=8db88df75801c0c8284c24786483f46d3542a183", "patch": "@@ -111,7 +111,7 @@ env UPDATE_EXPECT=1 cargo qt\n \n After adding a new inline test you need to run `cargo test -p xtask` and also update the test data as described above.\n \n-Note  [`api_walkthrough`](https://github.com/rust-analyzer/rust-analyzer/blob/2fb6af89eb794f775de60b82afe56b6f986c2a40/crates/ra_syntax/src/lib.rs#L190-L348)\n+Note [`api_walkthrough`](https://github.com/rust-analyzer/rust-analyzer/blob/2fb6af89eb794f775de60b82afe56b6f986c2a40/crates/ra_syntax/src/lib.rs#L190-L348)\n in particular: it shows off various methods of working with syntax tree.\n \n See [#93](https://github.com/rust-analyzer/rust-analyzer/pull/93) for an example PR which fixes a bug in the grammar."}]}