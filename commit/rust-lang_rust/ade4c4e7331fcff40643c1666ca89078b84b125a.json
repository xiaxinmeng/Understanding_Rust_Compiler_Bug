{"sha": "ade4c4e7331fcff40643c1666ca89078b84b125a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkZTRjNGU3MzMxZmNmZjQwNjQzYzE2NjZjYTg5MDc4Yjg0YjEyNWE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-06T08:11:41Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-06T08:11:41Z"}, "message": "make the new option actually do something", "tree": {"sha": "729a1666573f6b7cda4767fb7a59c2597b8ba9f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/729a1666573f6b7cda4767fb7a59c2597b8ba9f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ade4c4e7331fcff40643c1666ca89078b84b125a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ade4c4e7331fcff40643c1666ca89078b84b125a", "html_url": "https://github.com/rust-lang/rust/commit/ade4c4e7331fcff40643c1666ca89078b84b125a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ade4c4e7331fcff40643c1666ca89078b84b125a/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d82d7013600a9f0ce6ffb74aed0a0701bdeccd79", "url": "https://api.github.com/repos/rust-lang/rust/commits/d82d7013600a9f0ce6ffb74aed0a0701bdeccd79", "html_url": "https://github.com/rust-lang/rust/commit/d82d7013600a9f0ce6ffb74aed0a0701bdeccd79"}], "stats": {"total": 12, "additions": 11, "deletions": 1}, "files": [{"sha": "839facef0962f69e87346da1653bafc96188748d", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ade4c4e7331fcff40643c1666ca89078b84b125a/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/ade4c4e7331fcff40643c1666ca89078b84b125a/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=ade4c4e7331fcff40643c1666ca89078b84b125a", "patch": "@@ -180,6 +180,8 @@ Several `-Z` flags are relevant for Miri:\n   is popped from a borrow stack (which is where the tag becomes invalid and any\n   future use of it will error).  This helps you in finding out why UB is\n   happening and where in your code would be a good place to look for it.\n+* `-Zmiri-track-alloc-id=<id>` shows a backtrace when the given allocation is\n+  being allocated.  This helps in debugging memory leaks.\n \n Moreover, Miri recognizes some environment variables:\n "}, {"sha": "fb6598495af5e5da382aeffed877415b4b95e79e", "filename": "src/diagnostics.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ade4c4e7331fcff40643c1666ca89078b84b125a/src%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade4c4e7331fcff40643c1666ca89078b84b125a/src%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdiagnostics.rs?ref=ade4c4e7331fcff40643c1666ca89078b84b125a", "patch": "@@ -6,6 +6,7 @@ use crate::*;\n /// Miri specific diagnostics\n pub enum NonHaltingDiagnostic {\n     PoppedTrackedPointerTag(Item),\n+    CreatedAlloc(AllocId),\n }\n \n /// Emit a custom diagnostic without going through the miri-engine machinery\n@@ -97,9 +98,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let this = self.eval_context_ref();\n         DIAGNOSTICS.with(|diagnostics| {\n             for e in diagnostics.borrow_mut().drain(..) {\n+                use NonHaltingDiagnostic::*;\n                 let msg = match e {\n-                    NonHaltingDiagnostic::PoppedTrackedPointerTag(item) =>\n+                    PoppedTrackedPointerTag(item) =>\n                         format!(\"popped tracked tag for item {:?}\", item),\n+                    CreatedAlloc(AllocId(id)) =>\n+                        format!(\"created allocation with id {}\", id),\n                 };\n                 report_msg(this, msg, false);\n             }"}, {"sha": "d15e290cbfdc9982be5fc995fdd5467686cdc72e", "filename": "src/machine.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ade4c4e7331fcff40643c1666ca89078b84b125a/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade4c4e7331fcff40643c1666ca89078b84b125a/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=ade4c4e7331fcff40643c1666ca89078b84b125a", "patch": "@@ -334,6 +334,10 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n         alloc: Cow<'b, Allocation>,\n         kind: Option<MemoryKind<Self::MemoryKinds>>,\n     ) -> (Cow<'b, Allocation<Self::PointerTag, Self::AllocExtra>>, Self::PointerTag) {\n+        if Some(id) == memory_extra.tracked_alloc_id {\n+            register_diagnostic(NonHaltingDiagnostic::CreatedAlloc(id));\n+        }\n+\n         let kind = kind.expect(\"we set our STATIC_KIND so this cannot be None\");\n         let alloc = alloc.into_owned();\n         let (stacks, base_tag) ="}]}