{"sha": "97a512070aa6d648ddde025a7cc9784fad7624f9", "node_id": "C_kwDOAAsO6NoAKDk3YTUxMjA3MGFhNmQ2NDhkZGRlMDI1YTdjYzk3ODRmYWQ3NjI0Zjk", "commit": {"author": {"name": "infrandomness", "email": "infrandomness@gmail.com", "date": "2022-06-09T14:50:34Z"}, "committer": {"name": "infrandomness", "email": "infrandomness@gmail.com", "date": "2022-06-26T23:39:24Z"}, "message": "Fix pending reviews", "tree": {"sha": "f2a302ae0b8143dfe666e83cf9c9f06acabe8d90", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f2a302ae0b8143dfe666e83cf9c9f06acabe8d90"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97a512070aa6d648ddde025a7cc9784fad7624f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97a512070aa6d648ddde025a7cc9784fad7624f9", "html_url": "https://github.com/rust-lang/rust/commit/97a512070aa6d648ddde025a7cc9784fad7624f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97a512070aa6d648ddde025a7cc9784fad7624f9/comments", "author": {"login": "InfRandomness", "id": 43730933, "node_id": "MDQ6VXNlcjQzNzMwOTMz", "avatar_url": "https://avatars.githubusercontent.com/u/43730933?v=4", "gravatar_id": "", "url": "https://api.github.com/users/InfRandomness", "html_url": "https://github.com/InfRandomness", "followers_url": "https://api.github.com/users/InfRandomness/followers", "following_url": "https://api.github.com/users/InfRandomness/following{/other_user}", "gists_url": "https://api.github.com/users/InfRandomness/gists{/gist_id}", "starred_url": "https://api.github.com/users/InfRandomness/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/InfRandomness/subscriptions", "organizations_url": "https://api.github.com/users/InfRandomness/orgs", "repos_url": "https://api.github.com/users/InfRandomness/repos", "events_url": "https://api.github.com/users/InfRandomness/events{/privacy}", "received_events_url": "https://api.github.com/users/InfRandomness/received_events", "type": "User", "site_admin": false}, "committer": {"login": "InfRandomness", "id": 43730933, "node_id": "MDQ6VXNlcjQzNzMwOTMz", "avatar_url": "https://avatars.githubusercontent.com/u/43730933?v=4", "gravatar_id": "", "url": "https://api.github.com/users/InfRandomness", "html_url": "https://github.com/InfRandomness", "followers_url": "https://api.github.com/users/InfRandomness/followers", "following_url": "https://api.github.com/users/InfRandomness/following{/other_user}", "gists_url": "https://api.github.com/users/InfRandomness/gists{/gist_id}", "starred_url": "https://api.github.com/users/InfRandomness/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/InfRandomness/subscriptions", "organizations_url": "https://api.github.com/users/InfRandomness/orgs", "repos_url": "https://api.github.com/users/InfRandomness/repos", "events_url": "https://api.github.com/users/InfRandomness/events{/privacy}", "received_events_url": "https://api.github.com/users/InfRandomness/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9130034337b30e975beb2c265e309187c574561e", "url": "https://api.github.com/repos/rust-lang/rust/commits/9130034337b30e975beb2c265e309187c574561e", "html_url": "https://github.com/rust-lang/rust/commit/9130034337b30e975beb2c265e309187c574561e"}], "stats": {"total": 45, "additions": 23, "deletions": 22}, "files": [{"sha": "e1f819fb85671c1fc5fe75a45a17252d96e83e38", "filename": "src/shims/unix/dlsym.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/97a512070aa6d648ddde025a7cc9784fad7624f9/src%2Fshims%2Funix%2Fdlsym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97a512070aa6d648ddde025a7cc9784fad7624f9/src%2Fshims%2Funix%2Fdlsym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Fdlsym.rs?ref=97a512070aa6d648ddde025a7cc9784fad7624f9", "patch": "@@ -2,15 +2,15 @@ use rustc_middle::mir;\n use rustc_target::spec::abi::Abi;\n \n use crate::*;\n+use shims::unix::freebsd::dlsym as freebsd;\n use shims::unix::linux::dlsym as linux;\n use shims::unix::macos::dlsym as macos;\n-use shims::unix::freebsd::dlsym as freebsd;\n \n #[derive(Debug, Copy, Clone)]\n pub enum Dlsym {\n     Linux(linux::Dlsym),\n     MacOs(macos::Dlsym),\n-    FreeBSD(freebsd::Dlsym)\n+    FreeBSD(freebsd::Dlsym),\n }\n \n impl Dlsym {\n@@ -43,7 +43,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         match dlsym {\n             Dlsym::Linux(dlsym) => linux::EvalContextExt::call_dlsym(this, dlsym, args, dest, ret),\n             Dlsym::MacOs(dlsym) => macos::EvalContextExt::call_dlsym(this, dlsym, args, dest, ret),\n-            Dlsym::FreeBSD(dlsym) => freebsd::EvalContextExt::call_dlsym(this, dlsym, args, dest, ret)\n+            Dlsym::FreeBSD(dlsym) =>\n+                freebsd::EvalContextExt::call_dlsym(this, dlsym, args, dest, ret),\n         }\n     }\n }"}, {"sha": "18347d274e93c657e678d522961858d9f5d7958f", "filename": "src/shims/unix/freebsd/dlsym.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/97a512070aa6d648ddde025a7cc9784fad7624f9/src%2Fshims%2Funix%2Ffreebsd%2Fdlsym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97a512070aa6d648ddde025a7cc9784fad7624f9/src%2Fshims%2Funix%2Ffreebsd%2Fdlsym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Ffreebsd%2Fdlsym.rs?ref=97a512070aa6d648ddde025a7cc9784fad7624f9", "patch": "@@ -1,13 +1,10 @@\n use rustc_middle::mir;\n \n use crate::*;\n-use helpers::check_arg_count;\n \n #[derive(Debug, Copy, Clone)]\n #[allow(non_camel_case_types)]\n-pub enum Dlsym {\n-    getentropy,\n-}\n+pub enum Dlsym {}\n \n impl Dlsym {\n     // Returns an error for unsupported symbols, and None if this symbol"}, {"sha": "71272523886776c984b6e3074c638381cb4885e1", "filename": "src/shims/unix/freebsd/foreign_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97a512070aa6d648ddde025a7cc9784fad7624f9/src%2Fshims%2Funix%2Ffreebsd%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97a512070aa6d648ddde025a7cc9784fad7624f9/src%2Fshims%2Funix%2Ffreebsd%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Ffreebsd%2Fforeign_items.rs?ref=97a512070aa6d648ddde025a7cc9784fad7624f9", "patch": "@@ -20,4 +20,4 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         // match\n         Ok(EmulateByNameResult::NeedsJumping)\n     }\n-}\n\\ No newline at end of file\n+}"}, {"sha": "434f5f30b5a5689206655f20e623d99789556bb6", "filename": "src/shims/unix/freebsd/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97a512070aa6d648ddde025a7cc9784fad7624f9/src%2Fshims%2Funix%2Ffreebsd%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97a512070aa6d648ddde025a7cc9784fad7624f9/src%2Fshims%2Funix%2Ffreebsd%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Ffreebsd%2Fmod.rs?ref=97a512070aa6d648ddde025a7cc9784fad7624f9", "patch": "@@ -1,2 +1,2 @@\n+pub mod dlsym;\n pub mod foreign_items;\n-pub mod dlsym;\n\\ No newline at end of file"}, {"sha": "2e97b7918e96be7ebc074c82eee0f73f02bf554c", "filename": "src/shims/unix/macos/dlsym.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/97a512070aa6d648ddde025a7cc9784fad7624f9/src%2Fshims%2Funix%2Fmacos%2Fdlsym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97a512070aa6d648ddde025a7cc9784fad7624f9/src%2Fshims%2Funix%2Fmacos%2Fdlsym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Fmacos%2Fdlsym.rs?ref=97a512070aa6d648ddde025a7cc9784fad7624f9", "patch": "@@ -3,18 +3,21 @@ use rustc_middle::mir;\n use log::trace;\n \n use crate::*;\n+use helpers::check_arg_count;\n \n #[derive(Debug, Copy, Clone)]\n #[allow(non_camel_case_types)]\n pub enum Dlsym {\n+    getentropy,\n }\n \n impl Dlsym {\n     // Returns an error for unsupported symbols, and None if this symbol\n     // should become a NULL pointer (pretend it does not exist).\n     pub fn from_str<'tcx>(name: &str) -> InterpResult<'tcx, Option<Dlsym>> {\n         Ok(match name {\n-            _ => throw_unsup_format!(\"unsupported freebsd dlsym: {}\", name),\n+            \"getentropy\" => Some(Dlsym::getentropy),\n+            _ => throw_unsup_format!(\"unsupported macOS dlsym: {}\", name),\n         })\n     }\n }\n@@ -30,7 +33,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     ) -> InterpResult<'tcx> {\n         let this = self.eval_context_mut();\n         let ret = ret.expect(\"we don't support any diverging dlsym\");\n-        assert!(this.tcx.sess.target.os == \"freebsd\");\n+        assert!(this.tcx.sess.target.os == \"macos\");\n \n         match dlsym {\n             Dlsym::getentropy => {"}, {"sha": "8e8c70bbd0faf4fa3f4068382311eacc7f18efca", "filename": "src/shims/unix/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97a512070aa6d648ddde025a7cc9784fad7624f9/src%2Fshims%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97a512070aa6d648ddde025a7cc9784fad7624f9/src%2Fshims%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Fmod.rs?ref=97a512070aa6d648ddde025a7cc9784fad7624f9", "patch": "@@ -5,8 +5,8 @@ mod fs;\n mod sync;\n mod thread;\n \n+mod freebsd;\n mod linux;\n mod macos;\n-mod freebsd;\n \n pub use fs::{DirHandler, FileHandler};"}, {"sha": "e73e796449cc54efb44a3a6ddb5c7d0dd604baa1", "filename": "tests/pass/libc.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/97a512070aa6d648ddde025a7cc9784fad7624f9/tests%2Fpass%2Flibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97a512070aa6d648ddde025a7cc9784fad7624f9/tests%2Fpass%2Flibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Flibc.rs?ref=97a512070aa6d648ddde025a7cc9784fad7624f9", "patch": "@@ -5,14 +5,14 @@\n \n extern crate libc;\n \n-#[cfg(target_os = \"linux, freebsd\")]\n+#[cfg(any(target_os = \"linux\", target_os = \"freebsd\"))]\n fn tmp() -> std::path::PathBuf {\n     std::env::var(\"MIRI_TEMP\")\n         .map(std::path::PathBuf::from)\n         .unwrap_or_else(|_| std::env::temp_dir())\n }\n \n-#[cfg(target_os = \"linux, freebsd\")]\n+#[cfg(any(target_os = \"linux\", target_os = \"freebsd\"))]\n fn test_posix_fadvise() {\n     use std::convert::TryInto;\n     use std::fs::{remove_file, File};\n@@ -42,7 +42,7 @@ fn test_posix_fadvise() {\n     assert_eq!(result, 0);\n }\n \n-#[cfg(target_os = \"linux, freebsd\")]\n+#[cfg(any(target_os = \"linux\", target_os = \"freebsd\"))]\n fn test_sync_file_range() {\n     use std::fs::{remove_file, File};\n     use std::io::Write;\n@@ -208,7 +208,7 @@ fn test_rwlock_libc_static_initializer() {\n /// Test whether the `prctl` shim correctly sets the thread name.\n ///\n /// Note: `prctl` exists only on Linux.\n-#[cfg(target_os = \"linux,freebsd\")]\n+#[cfg(any(target_os = \"linux\", target_os = \"freebsd\"))]\n fn test_prctl_thread_name() {\n     use libc::c_long;\n     use std::ffi::CString;\n@@ -277,7 +277,7 @@ fn test_thread_local_errno() {\n }\n \n /// Tests whether clock support exists at all\n-#[cfg(target_os = \"linux,freebsd\")]\n+#[cfg(any(target_os = \"linux\", target_os = \"freebsd\"))]\n fn test_clocks() {\n     let mut tp = std::mem::MaybeUninit::<libc::timespec>::uninit();\n     let is_error = unsafe { libc::clock_gettime(libc::CLOCK_REALTIME, tp.as_mut_ptr()) };\n@@ -291,25 +291,25 @@ fn test_clocks() {\n }\n \n fn main() {\n-    #[cfg(target_os = \"linux,freebsd\")]\n+    #[cfg(any(target_os = \"linux\", target_os = \"freebsd\"))]\n     test_posix_fadvise();\n \n-    #[cfg(target_os = \"linux,freebsd\")]\n+    #[cfg(any(target_os = \"linux\", target_os = \"freebsd\"))]\n     test_sync_file_range();\n \n     test_mutex_libc_init_recursive();\n     test_mutex_libc_init_normal();\n     test_mutex_libc_init_errorcheck();\n     test_rwlock_libc_static_initializer();\n \n-    #[cfg(target_os = \"linux,freebsd\")]\n+    #[cfg(any(target_os = \"linux\", target_os = \"freebsd\"))]\n     test_mutex_libc_static_initializer_recursive();\n \n-    #[cfg(target_os = \"linux,freebsd\")]\n+    #[cfg(any(target_os = \"linux\", target_os = \"freebsd\"))]\n     test_prctl_thread_name();\n \n     test_thread_local_errno();\n \n-    #[cfg(target_os = \"linux,freebsd\")]\n+    #[cfg(any(target_os = \"linux\", target_os = \"freebsd\"))]\n     test_clocks();\n }"}]}