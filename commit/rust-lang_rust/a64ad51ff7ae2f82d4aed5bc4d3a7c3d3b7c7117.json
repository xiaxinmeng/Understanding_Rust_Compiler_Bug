{"sha": "a64ad51ff7ae2f82d4aed5bc4d3a7c3d3b7c7117", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2NGFkNTFmZjdhZTJmODJkNGFlZDViYzRkM2E3YzNkM2I3YzcxMTc=", "commit": {"author": {"name": "Roxane", "email": "roxane.fruytier@hotmail.com", "date": "2020-10-14T04:17:42Z"}, "committer": {"name": "Roxane", "email": "roxane.fruytier@hotmail.com", "date": "2020-10-14T04:17:42Z"}, "message": "Address comments", "tree": {"sha": "14b22d39c57493738e5ff7baae5e0ff1f6ca1dad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14b22d39c57493738e5ff7baae5e0ff1f6ca1dad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a64ad51ff7ae2f82d4aed5bc4d3a7c3d3b7c7117", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a64ad51ff7ae2f82d4aed5bc4d3a7c3d3b7c7117", "html_url": "https://github.com/rust-lang/rust/commit/a64ad51ff7ae2f82d4aed5bc4d3a7c3d3b7c7117", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a64ad51ff7ae2f82d4aed5bc4d3a7c3d3b7c7117/comments", "author": {"login": "roxelo", "id": 12419401, "node_id": "MDQ6VXNlcjEyNDE5NDAx", "avatar_url": "https://avatars.githubusercontent.com/u/12419401?v=4", "gravatar_id": "", "url": "https://api.github.com/users/roxelo", "html_url": "https://github.com/roxelo", "followers_url": "https://api.github.com/users/roxelo/followers", "following_url": "https://api.github.com/users/roxelo/following{/other_user}", "gists_url": "https://api.github.com/users/roxelo/gists{/gist_id}", "starred_url": "https://api.github.com/users/roxelo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/roxelo/subscriptions", "organizations_url": "https://api.github.com/users/roxelo/orgs", "repos_url": "https://api.github.com/users/roxelo/repos", "events_url": "https://api.github.com/users/roxelo/events{/privacy}", "received_events_url": "https://api.github.com/users/roxelo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "roxelo", "id": 12419401, "node_id": "MDQ6VXNlcjEyNDE5NDAx", "avatar_url": "https://avatars.githubusercontent.com/u/12419401?v=4", "gravatar_id": "", "url": "https://api.github.com/users/roxelo", "html_url": "https://github.com/roxelo", "followers_url": "https://api.github.com/users/roxelo/followers", "following_url": "https://api.github.com/users/roxelo/following{/other_user}", "gists_url": "https://api.github.com/users/roxelo/gists{/gist_id}", "starred_url": "https://api.github.com/users/roxelo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/roxelo/subscriptions", "organizations_url": "https://api.github.com/users/roxelo/orgs", "repos_url": "https://api.github.com/users/roxelo/repos", "events_url": "https://api.github.com/users/roxelo/events{/privacy}", "received_events_url": "https://api.github.com/users/roxelo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c46fd67f8b4831da9f2e8a536d34f498cf70241", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c46fd67f8b4831da9f2e8a536d34f498cf70241", "html_url": "https://github.com/rust-lang/rust/commit/3c46fd67f8b4831da9f2e8a536d34f498cf70241"}], "stats": {"total": 69, "additions": 27, "deletions": 42}, "files": [{"sha": "86750d5c081113e9126d6745cc74adfcd81efa15", "filename": "compiler/rustc_middle/src/ty/outlives.rs", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a64ad51ff7ae2f82d4aed5bc4d3a7c3d3b7c7117/compiler%2Frustc_middle%2Fsrc%2Fty%2Foutlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a64ad51ff7ae2f82d4aed5bc4d3a7c3d3b7c7117/compiler%2Frustc_middle%2Fsrc%2Fty%2Foutlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Foutlives.rs?ref=a64ad51ff7ae2f82d4aed5bc4d3a7c3d3b7c7117", "patch": "@@ -96,26 +96,14 @@ fn compute_components(\n             }\n \n             ty::Closure(_, ref substs) => {\n-                if substs.as_closure().is_valid() {\n-                    for upvar_ty in substs.as_closure().upvar_tys() {\n-                        compute_components(tcx, upvar_ty, out, visited);\n-                    }\n-                } else {\n-                    let tupled_ty = substs.as_closure().tupled_upvars_ty();\n-                    compute_components(tcx, tupled_ty, out, visited);\n-                }\n+                let tupled_ty = substs.as_closure().tupled_upvars_ty();\n+                compute_components(tcx, tupled_ty, out, visited);\n             }\n \n             ty::Generator(_, ref substs, _) => {\n                 // Same as the closure case\n-                if substs.as_generator().is_valid() {\n-                    for upvar_ty in substs.as_generator().upvar_tys() {\n-                        compute_components(tcx, upvar_ty, out, visited);\n-                    }\n-                } else {\n-                    let tupled_ty = substs.as_generator().tupled_upvars_ty();\n-                    compute_components(tcx, tupled_ty, out, visited);\n-                }\n+                let tupled_ty = substs.as_generator().tupled_upvars_ty();\n+                compute_components(tcx, tupled_ty, out, visited);\n \n                 // We ignore regions in the generator interior as we don't\n                 // want these to affect region inference"}, {"sha": "ecaafee77e29f91f616e2dc2c8632e4b3a953586", "filename": "compiler/rustc_trait_selection/src/opaque_types.rs", "status": "modified", "additions": 14, "deletions": 26, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/a64ad51ff7ae2f82d4aed5bc4d3a7c3d3b7c7117/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a64ad51ff7ae2f82d4aed5bc4d3a7c3d3b7c7117/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs?ref=a64ad51ff7ae2f82d4aed5bc4d3a7c3d3b7c7117", "patch": "@@ -441,7 +441,6 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n \n             for required_region in required_region_bounds {\n                 concrete_ty.visit_with(&mut ConstrainOpaqueTypeRegionVisitor {\n-                    infcx: self,\n                     op: |r| self.sub_regions(infer::CallReturn(span), required_region, r),\n                 });\n             }\n@@ -510,7 +509,6 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             }\n         }\n         concrete_ty.visit_with(&mut ConstrainOpaqueTypeRegionVisitor {\n-            infcx: self,\n             op: |r| self.sub_regions(infer::CallReturn(span), least_region, r),\n         });\n     }\n@@ -545,7 +543,6 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         );\n \n         concrete_ty.visit_with(&mut ConstrainOpaqueTypeRegionVisitor {\n-            infcx: self,\n             op: |r| {\n                 self.member_constraint(\n                     opaque_type_def_id,\n@@ -686,12 +683,11 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n //\n // We ignore any type parameters because impl trait values are assumed to\n // capture all the in-scope type parameters.\n-struct ConstrainOpaqueTypeRegionVisitor<'cx, 'tcx, OP> {\n-    infcx: &'cx InferCtxt<'cx, 'tcx>,\n+struct ConstrainOpaqueTypeRegionVisitor<OP> {\n     op: OP,\n }\n \n-impl<'cx, 'tcx, OP> TypeVisitor<'tcx> for ConstrainOpaqueTypeRegionVisitor<'cx, 'tcx, OP>\n+impl<'tcx, OP> TypeVisitor<'tcx> for ConstrainOpaqueTypeRegionVisitor<OP>\n where\n     OP: FnMut(ty::Region<'tcx>),\n {\n@@ -721,36 +717,28 @@ where\n             ty::Closure(_, ref substs) => {\n                 // Skip lifetime parameters of the enclosing item(s)\n \n-                let ty = self.infcx.shallow_resolve(substs.as_closure().tupled_upvars_ty());\n-                if let ty::Infer(ty::TyVar(_)) = ty.kind() {\n-                    // Not yet resolved.\n-                    ty.super_visit_with(self);\n-                } else {\n-                    for upvar_ty in substs.as_closure().upvar_tys() {\n-                        upvar_ty.visit_with(self);\n-                    }\n+                substs.as_closure().tupled_upvars_ty().visit_with(self);\n \n-                    substs.as_closure().sig_as_fn_ptr_ty().visit_with(self);\n+                for upvar_ty in substs.as_closure().upvar_tys() {\n+                    upvar_ty.visit_with(self);\n                 }\n+\n+                substs.as_closure().sig_as_fn_ptr_ty().visit_with(self);\n             }\n \n             ty::Generator(_, ref substs, _) => {\n                 // Skip lifetime parameters of the enclosing item(s)\n                 // Also skip the witness type, because that has no free regions.\n \n-                let ty = self.infcx.shallow_resolve(substs.as_generator().tupled_upvars_ty());\n-                if let ty::Infer(ty::TyVar(_)) = ty.kind() {\n-                    // Not yet resolved.\n-                    ty.super_visit_with(self);\n-                } else {\n-                    for upvar_ty in substs.as_generator().upvar_tys() {\n-                        upvar_ty.visit_with(self);\n-                    }\n+                substs.as_generator().tupled_upvars_ty().visit_with(self);\n \n-                    substs.as_generator().return_ty().visit_with(self);\n-                    substs.as_generator().yield_ty().visit_with(self);\n-                    substs.as_generator().resume_ty().visit_with(self);\n+                for upvar_ty in substs.as_generator().upvar_tys() {\n+                    upvar_ty.visit_with(self);\n                 }\n+\n+                substs.as_generator().return_ty().visit_with(self);\n+                substs.as_generator().yield_ty().visit_with(self);\n+                substs.as_generator().resume_ty().visit_with(self);\n             }\n             _ => {\n                 ty.super_visit_with(self);"}, {"sha": "6cffa6d02a4e378754623691b2007cb7afc9bbfe", "filename": "compiler/rustc_traits/src/dropck_outlives.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a64ad51ff7ae2f82d4aed5bc4d3a7c3d3b7c7117/compiler%2Frustc_traits%2Fsrc%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a64ad51ff7ae2f82d4aed5bc4d3a7c3d3b7c7117/compiler%2Frustc_traits%2Fsrc%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fdropck_outlives.rs?ref=a64ad51ff7ae2f82d4aed5bc4d3a7c3d3b7c7117", "patch": "@@ -214,6 +214,11 @@ fn dtorck_constraint_for_ty<'tcx>(\n             if !substs.as_closure().is_valid() {\n                 // By the time this code runs, all type variables ought to\n                 // be fully resolved.\n+\n+                tcx.sess.delay_span_bug(\n+                    span,\n+                    &format!(\"upvar_tys for closure not found. Expected capture information for closure {}\", ty,),\n+                );\n                 return Err(NoSolution);\n             }\n \n@@ -252,6 +257,10 @@ fn dtorck_constraint_for_ty<'tcx>(\n             if !substs.as_generator().is_valid() {\n                 // By the time this code runs, all type variables ought to\n                 // be fully resolved.\n+                tcx.sess.delay_span_bug(\n+                    span,\n+                    &format!(\"upvar_tys for generator not found. Expected capture information for generator {}\", ty,),\n+                );\n                 return Err(NoSolution);\n             }\n "}]}