{"sha": "abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiZDFjZWExNDU3OGEzZmM5ODU2ZTJkYmJkOWY0MGYyYjJjM2I2ZDU=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2016-03-15T03:36:43Z"}, "committer": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2016-03-17T01:53:58Z"}, "message": "Stop ignoring expected note/help messages in compiletest suite.\n\nOriginal issue: https://github.com/rust-lang/rust/issues/21195\n\nRelevant PR: https://github.com/rust-lang/rust/pull/30778\n\nPrior to this commit, if a compiletest testcase included the text\n\"HELP:\" or \"NOTE:\" (note the colons), then it would indicate to the\ncompiletest suite that we should verify \"help\" and \"note\" expected\nmessages.\n\nThis commit updates this check to also check \"HELP\" and \"NOTE\" (not the\nabsense of colons) so that we always verify \"help\" and \"note\" expected\nmessages.", "tree": {"sha": "9d442c819c581e96096f6e9dc4376b5d6f5dfd6b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d442c819c581e96096f6e9dc4376b5d6f5dfd6b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5", "html_url": "https://github.com/rust-lang/rust/commit/abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e0f2f2f050443f2aec4e9c7d25618a6a6639b83", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e0f2f2f050443f2aec4e9c7d25618a6a6639b83", "html_url": "https://github.com/rust-lang/rust/commit/6e0f2f2f050443f2aec4e9c7d25618a6a6639b83"}], "stats": {"total": 147, "additions": 141, "deletions": 6}, "files": [{"sha": "be011107c50301b6c9c0324b80ff7146035e2a04", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5", "patch": "@@ -1013,8 +1013,8 @@ fn check_expected_errors(revision: Option<&str>,\n         expected_errors.iter()\n                         .fold((false, false),\n                               |(acc_help, acc_note), ee|\n-                                  (acc_help || ee.kind == \"help:\", acc_note ||\n-                                   ee.kind == \"note:\"));\n+                                  (acc_help || ee.kind == \"help:\" || ee.kind == \"help\",\n+                                   acc_note || ee.kind == \"note:\" || ee.kind == \"note\"));\n \n     // Scan and extract our error/warning messages,\n     // which look like:"}, {"sha": "c1c72a5519bf10b5d81c389fad5481c8ee432db7", "filename": "src/test/compile-fail/asm-out-assign-imm.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5/src%2Ftest%2Fcompile-fail%2Fasm-out-assign-imm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5/src%2Ftest%2Fcompile-fail%2Fasm-out-assign-imm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fasm-out-assign-imm.rs?ref=abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5", "patch": "@@ -23,6 +23,7 @@ pub fn main() {\n     unsafe {\n         asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(5));\n         //~^ ERROR re-assignment of immutable variable `x`\n+        //~| NOTE in this expansion of asm!\n     }\n     foo(x);\n }"}, {"sha": "7c3d632078fe24f23b39aa4979519e4877b2fda4", "filename": "src/test/compile-fail/borrowck/borrowck-box-insensitivity.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-box-insensitivity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-box-insensitivity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-box-insensitivity.rs?ref=abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5", "patch": "@@ -54,80 +54,97 @@ fn borrow_after_move() {\n fn move_after_borrow() {\n     let a: Box<_> = box B { x: box 0, y: box 1 };\n     let _x = &a.x;\n+    //~^ NOTE borrow of `a.x` occurs here\n     let _y = a.y; //~ ERROR cannot move\n }\n \n fn copy_after_mut_borrow() {\n     let mut a: Box<_> = box A { x: box 0, y: 1 };\n     let _x = &mut a.x;\n+    //~^ NOTE borrow of `a.x` occurs here\n     let _y = a.y; //~ ERROR cannot use\n }\n \n fn move_after_mut_borrow() {\n     let mut a: Box<_> = box B { x: box 0, y: box 1 };\n     let _x = &mut a.x;\n+    //~^ NOTE borrow of `a.x` occurs here\n     let _y = a.y; //~ ERROR cannot move\n }\n \n fn borrow_after_mut_borrow() {\n     let mut a: Box<_> = box A { x: box 0, y: 1 };\n     let _x = &mut a.x;\n+    //~^ NOTE previous borrow of `a` occurs here (through borrowing `a.x`);\n     let _y = &a.y; //~ ERROR cannot borrow\n }\n+//~^ NOTE previous borrow ends here\n \n fn mut_borrow_after_borrow() {\n     let mut a: Box<_> = box A { x: box 0, y: 1 };\n     let _x = &a.x;\n+    //~^ NOTE previous borrow of `a` occurs here (through borrowing `a.x`)\n     let _y = &mut a.y; //~ ERROR cannot borrow\n }\n+//~^ NOTE previous borrow ends here\n \n fn copy_after_move_nested() {\n     let a: Box<_> = box C { x: box A { x: box 0, y: 1 }, y: 2 };\n     let _x = a.x.x;\n+    //~^ NOTE `a.x.x` moved here because it has type `Box<isize>`, which is moved by default\n     let _y = a.y; //~ ERROR use of collaterally moved\n }\n \n fn move_after_move_nested() {\n     let a: Box<_> = box D { x: box A { x: box 0, y: 1 }, y: box 2 };\n     let _x = a.x.x;\n+    //~^ NOTE `a.x.x` moved here because it has type `Box<isize>`, which is moved by default\n     let _y = a.y; //~ ERROR use of collaterally moved\n }\n \n fn borrow_after_move_nested() {\n     let a: Box<_> = box C { x: box A { x: box 0, y: 1 }, y: 2 };\n     let _x = a.x.x;\n+    //~^ NOTE `a.x.x` moved here because it has type `Box<isize>`, which is moved by default\n     let _y = &a.y; //~ ERROR use of collaterally moved\n }\n \n fn move_after_borrow_nested() {\n     let a: Box<_> = box D { x: box A { x: box 0, y: 1 }, y: box 2 };\n     let _x = &a.x.x;\n+    //~^ NOTE borrow of `a.x.x` occurs here\n     let _y = a.y; //~ ERROR cannot move\n }\n \n fn copy_after_mut_borrow_nested() {\n     let mut a: Box<_> = box C { x: box A { x: box 0, y: 1 }, y: 2 };\n     let _x = &mut a.x.x;\n+    //~^ NOTE borrow of `a.x.x` occurs here\n     let _y = a.y; //~ ERROR cannot use\n }\n \n fn move_after_mut_borrow_nested() {\n     let mut a: Box<_> = box D { x: box A { x: box 0, y: 1 }, y: box 2 };\n     let _x = &mut a.x.x;\n+    //~^ NOTE borrow of `a.x.x` occurs here\n     let _y = a.y; //~ ERROR cannot move\n }\n \n fn borrow_after_mut_borrow_nested() {\n     let mut a: Box<_> = box C { x: box A { x: box 0, y: 1 }, y: 2 };\n     let _x = &mut a.x.x;\n+    //~^ NOTE previous borrow of `a.x.x` occurs here; the mutable borrow prevents\n     let _y = &a.y; //~ ERROR cannot borrow\n }\n+//~^ NOTE previous borrow ends here\n \n fn mut_borrow_after_borrow_nested() {\n     let mut a: Box<_> = box C { x: box A { x: box 0, y: 1 }, y: 2 };\n     let _x = &a.x.x;\n+    //~^ NOTE previous borrow of `a.x.x` occurs here; the immutable borrow prevents\n     let _y = &mut a.y; //~ ERROR cannot borrow\n }\n+//~^ NOTE previous borrow ends here\n \n fn main() {\n     copy_after_move();"}, {"sha": "7e9d448275dc7697d792abce8cba920220676ce8", "filename": "src/test/compile-fail/borrowck/borrowck-let-suggestion.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-let-suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-let-suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-let-suggestion.rs?ref=abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5", "patch": "@@ -12,6 +12,7 @@ fn f() {\n     let x = [1].iter(); //~ ERROR borrowed value does not live long enough\n                          //~^ NOTE reference must be valid for the block suffix following statement\n                          //~^^ HELP consider using a `let` binding to increase its lifetime\n+                         //~^^^ NOTE ...but borrowed value is only valid for the statement at 12:4\n }\n \n fn main() {"}, {"sha": "2b1ff47ee3d94c3e8312fc2f141d0f846a69595f", "filename": "src/test/compile-fail/borrowck/borrowck-report-with-custom-diagnostic.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-report-with-custom-diagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-report-with-custom-diagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-report-with-custom-diagnostic.rs?ref=abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5", "patch": "@@ -13,6 +13,7 @@ fn main() {\n     // Original borrow ends at end of function\n     let mut x = 1;\n     let y = &mut x;\n+    //~^ previous borrow of `x` occurs here; the mutable borrow prevents\n     let z = &x; //~ ERROR cannot borrow\n }\n //~^ NOTE previous borrow ends here\n@@ -23,6 +24,7 @@ fn foo() {\n             // Original borrow ends at end of match arm\n             let mut x = 1;\n             let y = &x;\n+            //~^ previous borrow of `x` occurs here; the immutable borrow prevents\n             let z = &mut x; //~ ERROR cannot borrow\n         }\n      //~^ NOTE previous borrow ends here\n@@ -35,6 +37,7 @@ fn bar() {\n     || {\n         let mut x = 1;\n         let y = &mut x;\n+        //~^ previous borrow of `x` occurs here; the mutable borrow prevents\n         let z = &mut x; //~ ERROR cannot borrow\n     };\n  //~^ NOTE previous borrow ends here"}, {"sha": "1a21b03a457a8325a95376e2bf642c8ae9e436f8", "filename": "src/test/compile-fail/borrowck/borrowck-vec-pattern-nesting.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-vec-pattern-nesting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-vec-pattern-nesting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-vec-pattern-nesting.rs?ref=abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5", "patch": "@@ -17,6 +17,7 @@ fn a() {\n     let mut vec = [box 1, box 2, box 3];\n     match vec {\n         [box ref _a, _, _] => {\n+        //~^ borrow of `vec[..]` occurs here\n             vec[0] = box 4; //~ ERROR cannot assign\n         }\n     }\n@@ -27,6 +28,7 @@ fn b() {\n     let vec: &mut [Box<isize>] = &mut vec;\n     match vec {\n         [_b..] => {\n+        //~^ borrow of `vec[..]` occurs here\n             vec[0] = box 4; //~ ERROR cannot assign\n         }\n     }\n@@ -48,6 +50,7 @@ fn c() {\n         _ => {}\n     }\n     let a = vec[0]; //~ ERROR cannot move out\n+    //~^ NOTE attempting to move value to here\n }\n \n fn d() {\n@@ -59,6 +62,7 @@ fn d() {\n         _ => {}\n     }\n     let a = vec[0]; //~ ERROR cannot move out\n+    //~^ NOTE attempting to move value to here\n }\n \n fn e() {"}, {"sha": "4764ae380ff44ce9bcd7950df8d5ea7459a05228", "filename": "src/test/compile-fail/cast-as-bool.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5/src%2Ftest%2Fcompile-fail%2Fcast-as-bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5/src%2Ftest%2Fcompile-fail%2Fcast-as-bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcast-as-bool.rs?ref=abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5", "patch": "@@ -12,4 +12,5 @@ fn main() {\n     let u = 5 as bool;\n     //~^ ERROR cannot cast as `bool`\n     //~^^ HELP compare with zero instead\n+    //~^^^ HELP run `rustc --explain E0054` to see a detailed explanation\n }"}, {"sha": "b458334006a51dc0074e966e50fd40ef3400aba3", "filename": "src/test/compile-fail/cast-rfc0401.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5/src%2Ftest%2Fcompile-fail%2Fcast-rfc0401.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5/src%2Ftest%2Fcompile-fail%2Fcast-rfc0401.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcast-rfc0401.rs?ref=abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5", "patch": "@@ -61,9 +61,11 @@ fn main()\n     let _ = 3 as bool;\n     //~^ ERROR cannot cast as `bool`\n     //~^^ HELP compare with zero\n+    //~^^^ HELP run `rustc --explain E0054` to see a detailed explanation\n     let _ = E::A as bool;\n     //~^ ERROR cannot cast as `bool`\n     //~^^ HELP compare with zero\n+    //~^^^ HELP run `rustc --explain E0054` to see a detailed explanation\n     let _ = 0x61u32 as char; //~ ERROR only `u8` can be cast\n \n     let _ = false as f32;\n@@ -90,6 +92,9 @@ fn main()\n     let _ = v as *const [u8]; //~ ERROR cannot cast\n     let _ = fat_v as *const Foo;\n     //~^ ERROR `core::marker::Sized` is not implemented for the type `[u8]`\n+    //~^^ HELP run `rustc --explain E0277` to see a detailed explanation\n+    //~^^^ NOTE `[u8]` does not have a constant size known at compile-time\n+    //~^^^^ NOTE required for the cast to the object type `Foo`\n     let _ = foo as *const str; //~ ERROR casting\n     let _ = foo as *mut str; //~ ERROR casting\n     let _ = main as *mut str; //~ ERROR casting\n@@ -102,6 +107,9 @@ fn main()\n     let a : *const str = \"hello\";\n     let _ = a as *const Foo;\n     //~^ ERROR `core::marker::Sized` is not implemented for the type `str`\n+    //~^^ HELP run `rustc --explain E0277` to see a detailed explanation\n+    //~^^^ NOTE `str` does not have a constant size known at compile-time\n+    //~^^^^ NOTE required for the cast to the object type `Foo`\n \n     // check no error cascade\n     let _ = main.f as *const u32; //~ ERROR attempted access of field"}, {"sha": "b2fd11d4b39eab139352bed8fb9c335cbae7bb81", "filename": "src/test/compile-fail/fat-ptr-cast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5/src%2Ftest%2Fcompile-fail%2Ffat-ptr-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5/src%2Ftest%2Fcompile-fail%2Ffat-ptr-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffat-ptr-cast.rs?ref=abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5", "patch": "@@ -18,6 +18,7 @@ fn main() {\n     let q = a.as_ptr();\n \n     a as usize; //~ ERROR casting\n+    //~^ HELP cast through a raw pointer first\n     b as usize; //~ ERROR non-scalar cast\n     p as usize;\n     //~^ ERROR casting"}, {"sha": "4330a4cbeab914e9fea2b4301458c244164b4d6f", "filename": "src/test/compile-fail/feature-gate-negate-unsigned.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5/src%2Ftest%2Fcompile-fail%2Ffeature-gate-negate-unsigned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5/src%2Ftest%2Fcompile-fail%2Ffeature-gate-negate-unsigned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-negate-unsigned.rs?ref=abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5", "patch": "@@ -23,5 +23,6 @@ const _MAX: usize = -1;\n fn main() {\n     let x = 5u8;\n     let _y = -x; //~ ERROR unary negation of unsigned integer\n+    //~^ HELP use a cast or the `!` operator\n     -S; // should not trigger the gate; issue 26840\n }"}, {"sha": "6dde59d4a2e6098353e0374eab134060ee773c37", "filename": "src/test/compile-fail/issue-11714.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5/src%2Ftest%2Fcompile-fail%2Fissue-11714.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5/src%2Ftest%2Fcompile-fail%2Fissue-11714.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-11714.rs?ref=abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n fn blah() -> i32 { //~ ERROR not all control paths return a value\n+    //~^ HELP run `rustc --explain E0269` to see a detailed explanation\n     1\n \n     ; //~ HELP consider removing this semicolon:"}, {"sha": "503ccbd1cabfe4a2f36150e8e3606745780fa403", "filename": "src/test/compile-fail/issue-13058.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5/src%2Ftest%2Fcompile-fail%2Fissue-13058.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5/src%2Ftest%2Fcompile-fail%2Fissue-13058.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-13058.rs?ref=abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5", "patch": "@@ -40,4 +40,5 @@ fn main() {\n //~| found `(_, _)`\n //~| expected &-ptr\n //~| found tuple\n+//~| HELP run `rustc --explain E0308` to see a detailed explanation\n }"}, {"sha": "5b8ab08aefca11a4bed1b68f6dc66f3dd0350ab3", "filename": "src/test/compile-fail/issue-13428.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5/src%2Ftest%2Fcompile-fail%2Fissue-13428.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5/src%2Ftest%2Fcompile-fail%2Fissue-13428.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-13428.rs?ref=abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5", "patch": "@@ -11,6 +11,7 @@\n // Regression test for #13428\n \n fn foo() -> String {  //~ ERROR not all control paths return a value\n+    //~^ HELP run `rustc --explain E0269` to see a detailed explanation\n     format!(\"Hello {}\",\n             \"world\")\n     // Put the trailing semicolon on its own line to test that the\n@@ -19,6 +20,7 @@ fn foo() -> String {  //~ ERROR not all control paths return a value\n }\n \n fn bar() -> String {  //~ ERROR not all control paths return a value\n+    //~^ HELP run `rustc --explain E0269` to see a detailed explanation\n     \"foobar\".to_string()\n     ;   //~ HELP consider removing this semicolon\n }"}, {"sha": "5ec82326d6c1a10c4695f78751529afcbb7db8bf", "filename": "src/test/compile-fail/issue-15260.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5/src%2Ftest%2Fcompile-fail%2Fissue-15260.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5/src%2Ftest%2Fcompile-fail%2Fissue-15260.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-15260.rs?ref=abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5", "patch": "@@ -25,6 +25,7 @@ fn main() {\n \n     let Foo {\n         a, //~ NOTE field `a` previously bound here\n+        //~^ NOTE field `a` previously bound here\n         a: _, //~ ERROR field `a` bound multiple times in the pattern\n         a: x //~ ERROR field `a` bound multiple times in the pattern\n     } = Foo { a: 29 };"}, {"sha": "0fdb5f74e829961a575921f634449c087af01b44", "filename": "src/test/compile-fail/issue-16747.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5/src%2Ftest%2Fcompile-fail%2Fissue-16747.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5/src%2Ftest%2Fcompile-fail%2Fissue-16747.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-16747.rs?ref=abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5", "patch": "@@ -19,6 +19,7 @@ struct List<'a, T: ListItem<'a>> {\n //~^ ERROR the parameter type `T` may not live long enough\n //~| HELP consider adding an explicit lifetime bound\n //~| NOTE ...so that the reference type `&'a [T]` does not outlive the data it points at\n+//~| HELP run `rustc --explain E0309` to see a detailed explanation\n }\n impl<'a, T: ListItem<'a>> Collection for List<'a, T> {\n     fn len(&self) -> usize {"}, {"sha": "2320bc02baf5edc478996370b1cef53008b9d1f0", "filename": "src/test/compile-fail/issue-17263.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5/src%2Ftest%2Fcompile-fail%2Fissue-17263.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5/src%2Ftest%2Fcompile-fail%2Fissue-17263.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17263.rs?ref=abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5", "patch": "@@ -23,3 +23,5 @@ fn main() {\n     //~^ ERROR cannot borrow `foo` (here through borrowing `foo.b`) as immutable\n     //~^^ NOTE previous borrow of `foo` occurs here (through borrowing `foo.a`)\n }\n+//~^ NOTE previous borrow ends here\n+//~^^ NOTE previous borrow ends here"}, {"sha": "814c1a4131d381faf81a0e469932e5f61f4be662", "filename": "src/test/compile-fail/issue-19707.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5/src%2Ftest%2Fcompile-fail%2Fissue-19707.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5/src%2Ftest%2Fcompile-fail%2Fissue-19707.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-19707.rs?ref=abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5", "patch": "@@ -13,8 +13,10 @@\n \n type foo = fn(&u8, &u8) -> &u8; //~ ERROR missing lifetime specifier\n //~^ HELP the signature does not say whether it is borrowed from argument 1 or argument 2\n+//~^^ HELP run `rustc --explain E0106` to see a detailed explanation\n \n fn bar<F: Fn(&u8, &u8) -> &u8>(f: &F) {} //~ ERROR missing lifetime specifier\n //~^ HELP the signature does not say whether it is borrowed from argument 1 or argument 2\n+//~^^ HELP run `rustc --explain E0106` to see a detailed explanation\n \n fn main() {}"}, {"sha": "c53d5a0922e647737fa8f21a61623a300e810321", "filename": "src/test/compile-fail/issue-21221-1.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5/src%2Ftest%2Fcompile-fail%2Fissue-21221-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5/src%2Ftest%2Fcompile-fail%2Fissue-21221-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-21221-1.rs?ref=abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5", "patch": "@@ -55,6 +55,8 @@ impl Mul for Foo {\n //~| HELP `mul1::Mul`\n //~| HELP `mul2::Mul`\n //~| HELP `std::ops::Mul`\n+//~| HELP run `rustc --explain E0405` to see a detailed explanation\n+//~| HELP you can import several candidates into scope (`use ...;`):\n }\n \n // BEFORE, we got:\n@@ -75,17 +77,22 @@ fn getMul() -> Mul {\n //~| HELP `mul3::Mul`\n //~| HELP `mul4::Mul`\n //~| HELP and 2 other candidates\n+//~| HELP run `rustc --explain E0412` to see a detailed explanation\n+//~| HELP you can import several candidates into scope (`use ...;`):\n }\n \n // Let's also test what happens if the trait doesn't exist:\n impl ThisTraitReallyDoesntExistInAnyModuleReally for Foo {\n //~^ ERROR trait `ThisTraitReallyDoesntExistInAnyModuleReally` is not in scope\n+//~^^ HELP run `rustc --explain E0405` to see a detailed explanation\n+//~^^^ HELP no candidates by the name of `ThisTraitReallyDoesntExistInAnyModuleReally` found\n }\n \n // Let's also test what happens if there's just one alternative:\n impl Div for Foo {\n //~^ ERROR trait `Div` is not in scope\n //~| HELP `use std::ops::Div;`\n+//~| HELP run `rustc --explain E0405` to see a detailed explanation\n }\n \n fn main() {"}, {"sha": "f031b62214dcc7551568e46b8c814ff5cf22e084", "filename": "src/test/compile-fail/issue-21221-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5/src%2Ftest%2Fcompile-fail%2Fissue-21221-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5/src%2Ftest%2Fcompile-fail%2Fissue-21221-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-21221-2.rs?ref=abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5", "patch": "@@ -28,3 +28,4 @@ struct Foo;\n impl T for Foo { }\n //~^ ERROR trait `T` is not in scope\n //~| HELP you can to import it into scope: `use foo::bar::T;`.\n+//~| HELP run `rustc --explain E0405` to see a detailed explanation"}, {"sha": "eee2c016451e2cbdbbc26004b5df4552d6899296", "filename": "src/test/compile-fail/issue-21221-3.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5/src%2Ftest%2Fcompile-fail%2Fissue-21221-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5/src%2Ftest%2Fcompile-fail%2Fissue-21221-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-21221-3.rs?ref=abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5", "patch": "@@ -25,6 +25,7 @@ struct Foo;\n impl OuterTrait for Foo {}\n //~^ ERROR trait `OuterTrait` is not in scope\n //~| HELP you can to import it into scope: `use issue_21221_3::outer::OuterTrait;`.\n+//~| HELP run `rustc --explain E0405` to see a detailed explanation\n fn main() {\n     println!(\"Hello, world!\");\n }"}, {"sha": "6a76264dff7b081e43d00acd87560783202b0af0", "filename": "src/test/compile-fail/issue-21221-4.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5/src%2Ftest%2Fcompile-fail%2Fissue-21221-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5/src%2Ftest%2Fcompile-fail%2Fissue-21221-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-21221-4.rs?ref=abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5", "patch": "@@ -20,6 +20,7 @@ struct Foo;\n impl T for Foo {}\n //~^ ERROR trait `T` is not in scope\n //~| HELP you can to import it into scope: `use issue_21221_4::T;`.\n+//~| HELP run `rustc --explain E0405` to see a detailed explanation\n \n fn main() {\n     println!(\"Hello, world!\");"}, {"sha": "d9dcebfda6a1dbafb93d20323b04219a7c6ab947", "filename": "src/test/compile-fail/issue-21600.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5/src%2Ftest%2Fcompile-fail%2Fissue-21600.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5/src%2Ftest%2Fcompile-fail%2Fissue-21600.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-21600.rs?ref=abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5", "patch": "@@ -23,5 +23,8 @@ fn main() {\n         call_it(|| x.gen());\n         call_it(|| x.gen_mut()); //~ ERROR cannot borrow data mutably in a captured outer\n         //~^ ERROR cannot borrow data mutably in a captured outer\n+        //~^^ HELP run `rustc --explain E0387` to see a detailed explanation\n+        //~^^^ HELP run `rustc --explain E0387` to see a detailed explanation\n+        //~^^^^ HELP consider changing this closure to take self by mutable reference\n     });\n }"}, {"sha": "28eebea749cce5a14ad206b62c025089025edb62", "filename": "src/test/compile-fail/issue-24036.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5/src%2Ftest%2Fcompile-fail%2Fissue-24036.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5/src%2Ftest%2Fcompile-fail%2Fissue-24036.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-24036.rs?ref=abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5", "patch": "@@ -14,17 +14,20 @@ fn closure_to_loc() {\n     //~^ ERROR mismatched types\n     //~| NOTE no two closures, even if identical, have the same type\n     //~| HELP consider boxing your closure and/or using it as a trait object\n+    //~| HELP run `rustc --explain E0308` to see a detailed explanation\n }\n \n fn closure_from_match() {\n     let x = match 1usize {\n         1 => |c| c + 1,\n         2 => |c| c - 1,\n+        //~^ NOTE match arm with an incompatible type\n         _ => |c| c - 1\n     };\n-    //~^^^^^ ERROR match arms have incompatible types\n+    //~^^^^^^ ERROR match arms have incompatible types\n     //~| NOTE no two closures, even if identical, have the same type\n     //~| HELP consider boxing your closure and/or using it as a trait object\n+    //~| HELP run `rustc --explain E0308` to see a detailed explanation\n }\n \n fn main() { }"}, {"sha": "51d7baaf3e915ad7d25b0f4f23c223701c9d1ecd", "filename": "src/test/compile-fail/issue-25385.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5/src%2Ftest%2Fcompile-fail%2Fissue-25385.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5/src%2Ftest%2Fcompile-fail%2Fissue-25385.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-25385.rs?ref=abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5", "patch": "@@ -21,4 +21,5 @@ fn main() {\n \n     foo!(1i32.foo());\n     //~^ ERROR no method named `foo` found for type `i32` in the current scope\n+    //~^^ NOTE in this expansion of foo!\n }"}, {"sha": "b2775db5e75a7cbfc947f263d48714e9719cf679", "filename": "src/test/compile-fail/issue-25386.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5/src%2Ftest%2Fcompile-fail%2Fissue-25386.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5/src%2Ftest%2Fcompile-fail%2Fissue-25386.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-25386.rs?ref=abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5", "patch": "@@ -35,6 +35,4 @@ macro_rules! check_ptr_exist {\n fn main() {\n     let item = stuff::Item::new();\n     println!(\"{}\", check_ptr_exist!(item, name));\n-    //~^ NOTE in this expansion of check_ptr_exist!\n-    //~^^ NOTE in this expansion of check_ptr_exist!\n }"}, {"sha": "44b3ada97fea8c0de34029616bcd4a7101bfa23e", "filename": "src/test/compile-fail/issue-25793.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5/src%2Ftest%2Fcompile-fail%2Fissue-25793.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5/src%2Ftest%2Fcompile-fail%2Fissue-25793.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-25793.rs?ref=abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5", "patch": "@@ -27,6 +27,7 @@ impl HasInfo {\n     fn get_other(&mut self) -> usize {\n         self.get_size(width!(self))\n         //~^ NOTE in this expansion of width!\n+        //~| NOTE borrow of `*self` occurs here\n     }\n }\n "}, {"sha": "9cbb64c2311bc50d94dd8fb2615a70cc6083bf26", "filename": "src/test/compile-fail/issue-26638.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5/src%2Ftest%2Fcompile-fail%2Fissue-26638.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5/src%2Ftest%2Fcompile-fail%2Fissue-26638.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-26638.rs?ref=abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5", "patch": "@@ -11,13 +11,18 @@\n fn parse_type(iter: Box<Iterator<Item=&str>+'static>) -> &str { iter.next() }\n //~^ ERROR missing lifetime specifier [E0106]\n //~^^ HELP 2 elided lifetimes\n+//~^^^ HELP run `rustc --explain E0106` to see a detailed explanation\n \n fn parse_type_2(iter: fn(&u8)->&u8) -> &str { iter() }\n //~^ ERROR missing lifetime specifier [E0106]\n //~^^ HELP lifetime cannot be derived\n+//~^^^ HELP run `rustc --explain E0106` to see a detailed explanation\n+//~^^^^ HELP consider giving it an explicit bounded or 'static lifetime\n \n fn parse_type_3() -> &str { unimplemented!() }\n //~^ ERROR missing lifetime specifier [E0106]\n //~^^ HELP no value for it to be borrowed from\n+//~^^^ HELP run `rustc --explain E0106` to see a detailed explanation\n+//~^^^^ HELP consider giving it a 'static lifetime\n \n fn main() {}"}, {"sha": "56f0b31da0d80ba3997ba08503a6e767980a1f15", "filename": "src/test/compile-fail/issue-30302.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5/src%2Ftest%2Fcompile-fail%2Fissue-30302.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5/src%2Ftest%2Fcompile-fail%2Fissue-30302.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-30302.rs?ref=abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5", "patch": "@@ -18,8 +18,10 @@ fn is_empty<T>(s: Stack<T>) -> bool {\n         Nil => true,\n //~^ WARN pattern binding `Nil` is named the same as one of the variants of the type `Stack`\n //~| HELP consider making the path in the pattern qualified: `Stack::Nil`\n+//~| HELP run `rustc --explain E0170` to see a detailed explanation\n         _ => false\n //~^ ERROR unreachable pattern\n+//~| HELP run `rustc --explain E0001` to see a detailed explanation\n     }\n }\n "}, {"sha": "6cb825a9be736f7f9c3dbd049193e6f4c92bcaa1", "filename": "src/test/compile-fail/issue-6702.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5/src%2Ftest%2Fcompile-fail%2Fissue-6702.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5/src%2Ftest%2Fcompile-fail%2Fissue-6702.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-6702.rs?ref=abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5", "patch": "@@ -16,4 +16,5 @@ struct Monster {\n fn main() {\n     let _m = Monster(); //~ ERROR `Monster` is the name of a struct or\n     //~^ HELP did you mean to write: `Monster { /* fields */ }`?\n+    //~| HELP run `rustc --explain E0423` to see a detailed explanation\n }"}, {"sha": "be4166e43b504af4b790327367e33cbc053ff949", "filename": "src/test/compile-fail/lifetime-elision-return-type-requires-explicit-lifetime.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5/src%2Ftest%2Fcompile-fail%2Flifetime-elision-return-type-requires-explicit-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5/src%2Ftest%2Fcompile-fail%2Flifetime-elision-return-type-requires-explicit-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flifetime-elision-return-type-requires-explicit-lifetime.rs?ref=abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5", "patch": "@@ -11,12 +11,15 @@\n // Lifetime annotation needed because we have no arguments.\n fn f() -> &isize {    //~ ERROR missing lifetime specifier\n //~^ HELP there is no value for it to be borrowed from\n+//~| HELP run `rustc --explain E0106` to see a detailed explanation\n+//~| HELP consider giving it a 'static lifetime\n     panic!()\n }\n \n // Lifetime annotation needed because we have two by-reference parameters.\n fn g(_x: &isize, _y: &isize) -> &isize {    //~ ERROR missing lifetime specifier\n //~^ HELP the signature does not say whether it is borrowed from `_x` or `_y`\n+//~| HELP run `rustc --explain E0106` to see a detailed explanation\n     panic!()\n }\n \n@@ -28,11 +31,14 @@ struct Foo<'a> {\n // and one on the reference.\n fn h(_x: &Foo) -> &isize { //~ ERROR missing lifetime specifier\n //~^ HELP the signature does not say which one of `_x`'s 2 elided lifetimes it is borrowed from\n+//~| HELP run `rustc --explain E0106` to see a detailed explanation\n     panic!()\n }\n \n fn i(_x: isize) -> &isize { //~ ERROR missing lifetime specifier\n //~^ HELP this function's return type contains a borrowed value\n+//~| HELP run `rustc --explain E0106` to see a detailed explanation\n+//~| HELP consider giving it an explicit bounded or 'static lifetime\n     panic!()\n }\n "}, {"sha": "393e46ab5394ca7d1a61bd239bd112722407b2a5", "filename": "src/test/compile-fail/lint-group-style.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5/src%2Ftest%2Fcompile-fail%2Flint-group-style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5/src%2Ftest%2Fcompile-fail%2Flint-group-style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-group-style.rs?ref=abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5", "patch": "@@ -30,6 +30,7 @@ mod test {\n     mod warn {\n         #![warn(bad_style)]\n         //~^ NOTE lint level defined here\n+        //~| NOTE lint level defined here\n \n         fn CamelCase() {} //~ WARN function `CamelCase` should have a snake case name\n "}, {"sha": "91e5065517dcc9c4acb776d019a12da69ba20768", "filename": "src/test/compile-fail/lint-no-drop-on-repr-extern.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5/src%2Ftest%2Fcompile-fail%2Flint-no-drop-on-repr-extern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5/src%2Ftest%2Fcompile-fail%2Flint-no-drop-on-repr-extern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-no-drop-on-repr-extern.rs?ref=abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5", "patch": "@@ -15,6 +15,8 @@\n \n #![feature(unsafe_no_drop_flag)]\n #![deny(drop_with_repr_extern)]\n+//~^ NOTE lint level defined here\n+//~| NOTE lint level defined here\n \n #[repr(C)] struct As { x: Box<i8> }\n #[repr(C)] enum Ae { Ae(Box<i8>), _None }"}, {"sha": "94e189aa47f6fba9e95293080efb906a7474ae32", "filename": "src/test/compile-fail/lint-unconditional-recursion.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5/src%2Ftest%2Fcompile-fail%2Flint-unconditional-recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5/src%2Ftest%2Fcompile-fail%2Flint-unconditional-recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unconditional-recursion.rs?ref=abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5", "patch": "@@ -9,6 +9,20 @@\n // except according to those terms.\n \n #![deny(unconditional_recursion)]\n+//~^ NOTE lint level defined here\n+//~| NOTE lint level defined here\n+//~| NOTE lint level defined here\n+//~| NOTE lint level defined here\n+//~| NOTE lint level defined here\n+//~| NOTE lint level defined here\n+//~| NOTE lint level defined here\n+//~| NOTE lint level defined here\n+//~| NOTE lint level defined here\n+//~| NOTE lint level defined here\n+//~| NOTE lint level defined here\n+//~| NOTE lint level defined here\n+//~| NOTE lint level defined here\n+//~| NOTE lint level defined here\n #![allow(dead_code)]\n fn foo() { //~ ERROR function cannot return without recurring\n     foo(); //~ NOTE recursive call site"}, {"sha": "343622c5c1b048a714dfcaf5475606377c224cc1", "filename": "src/test/compile-fail/liveness-return-last-stmt-semi.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5/src%2Ftest%2Fcompile-fail%2Fliveness-return-last-stmt-semi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5/src%2Ftest%2Fcompile-fail%2Fliveness-return-last-stmt-semi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-return-last-stmt-semi.rs?ref=abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5", "patch": "@@ -13,14 +13,18 @@\n macro_rules! test { () => { fn foo() -> i32 { 1; } } }\n                                            //~^ ERROR not all control paths return a value\n                                            //~^^ HELP consider removing this semicolon\n+                                           //~^^^ HELP run `rustc --explain E0269` to see a\n \n fn no_return() -> i32 {} //~ ERROR  not all control paths return a value\n+                         //~^ HELP run `rustc --explain E0269` to see a detailed explanation\n \n fn bar(x: u32) -> u32 { //~ ERROR  not all control paths return a value\n+                        //~^ HELP run `rustc --explain E0269` to see a detailed explanation\n     x * 2; //~ HELP consider removing this semicolon\n }\n \n fn baz(x: u64) -> u32 { //~ ERROR  not all control paths return a value\n+                        //~^ HELP run `rustc --explain E0269` to see a detailed explanation\n     x * 2;\n }\n "}, {"sha": "c935ccef055aeb0ae96f6591a0b95e674b50f5af", "filename": "src/test/compile-fail/macro-backtrace-nested.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5/src%2Ftest%2Fcompile-fail%2Fmacro-backtrace-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5/src%2Ftest%2Fcompile-fail%2Fmacro-backtrace-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-backtrace-nested.rs?ref=abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5", "patch": "@@ -21,9 +21,11 @@ macro_rules! call_nested_expr {\n \n macro_rules! call_nested_expr_sum {\n     () => { 1 + nested_expr!(); } //~ ERROR unresolved name\n+                                  //~^ NOTE in this expansion of nested_expr!\n }\n \n fn main() {\n     1 + call_nested_expr!(); //~ ERROR unresolved name\n+                             //~^ NOTE in this expansion of call_nested_expr!\n     call_nested_expr_sum!(); //~ NOTE in this expansion of\n }"}, {"sha": "a485b9056de26980d10ffd2ca0193caf2305a5fc", "filename": "src/test/compile-fail/macro-backtrace-println.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5/src%2Ftest%2Fcompile-fail%2Fmacro-backtrace-println.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5/src%2Ftest%2Fcompile-fail%2Fmacro-backtrace-println.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-backtrace-println.rs?ref=abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5", "patch": "@@ -22,7 +22,8 @@ macro_rules! myprint {\n \n macro_rules! myprintln {\n     ($fmt:expr) => (myprint!(concat!($fmt, \"\\n\"))); //~ ERROR invalid reference to argument `0`\n-                                                    //~^ NOTE in this expansion of\n+                                                    //~^ NOTE in this expansion of myprint!\n+                                                    //~^^ NOTE in this expansion of concat!\n }\n \n fn main() {"}, {"sha": "c8c1447fea3869b4ab9be12306411add555a8cc2", "filename": "src/test/compile-fail/method-suggestion-no-duplication.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5/src%2Ftest%2Fcompile-fail%2Fmethod-suggestion-no-duplication.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5/src%2Ftest%2Fcompile-fail%2Fmethod-suggestion-no-duplication.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmethod-suggestion-no-duplication.rs?ref=abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // issue #21405\n+// ignore-tidy-linelength\n \n struct Foo;\n \n@@ -19,4 +20,5 @@ fn main() {\n     //~^ ERROR no method named `is_empty` found\n     //~^^ HELP #1: `core::slice::SliceExt`\n     //~^^^ HELP #2: `core::str::StrExt`\n+    //~^^^^ HELP items from traits can only be used if the trait is implemented and in scope; the following traits define an item `is_empty`, perhaps you need to implement one of them:\n }"}, {"sha": "5097e3d7b10d4735cdc961e4b86d418b7a34fba0", "filename": "src/test/compile-fail/object-safety-generics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5/src%2Ftest%2Fcompile-fail%2Fobject-safety-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5/src%2Ftest%2Fcompile-fail%2Fobject-safety-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fobject-safety-generics.rs?ref=abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5", "patch": "@@ -29,6 +29,7 @@ fn make_bar<T:Bar>(t: &T) -> &Bar {\n \n fn make_bar_explicit<T:Bar>(t: &T) -> &Bar {\n     //~^ ERROR E0038\n+    //~^^ NOTE method `bar` has generic type parameters\n     t as &Bar\n }\n "}, {"sha": "f386e7cdd5a9663c1022fceba10b82607cea1961", "filename": "src/test/compile-fail/on-unimplemented.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5/src%2Ftest%2Fcompile-fail%2Fon-unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5/src%2Ftest%2Fcompile-fail%2Fon-unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fon-unimplemented.rs?ref=abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5", "patch": "@@ -34,6 +34,8 @@ pub fn main() {\n     let y: Option<Vec<u8>> = collect(x.iter()); // this should give approximately the same error for x.iter().collect()\n     //~^ ERROR\n     //~^^ NOTE a collection of type `core::option::Option<collections::vec::Vec<u8>>` cannot be built from an iterator over elements of type `&u8`\n+    //~^^^ NOTE required by `collect`\n     let x: String = foobar(); //~ ERROR\n     //~^ NOTE test error `collections::string::String` with `u8` `_` `u32`\n+    //~^^ NOTE required by `foobar`\n }"}, {"sha": "226a6d57ddbf039f7cfd982719a8b1d11fcb228a", "filename": "src/test/compile-fail/recursion_limit.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5/src%2Ftest%2Fcompile-fail%2Frecursion_limit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5/src%2Ftest%2Fcompile-fail%2Frecursion_limit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frecursion_limit.rs?ref=abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5", "patch": "@@ -43,4 +43,15 @@ fn main() {\n     is_send::<A>();\n     //~^ ERROR overflow evaluating\n     //~| NOTE consider adding a `#![recursion_limit=\"20\"]` attribute to your crate\n+    //~| NOTE required because it appears within the type `A`\n+    //~| NOTE required because it appears within the type `B`\n+    //~| NOTE required because it appears within the type `C`\n+    //~| NOTE required because it appears within the type `D`\n+    //~| NOTE required because it appears within the type `E`\n+    //~| NOTE required because it appears within the type `F`\n+    //~| NOTE required because it appears within the type `G`\n+    //~| NOTE required because it appears within the type `H`\n+    //~| NOTE required because it appears within the type `I`\n+    //~| NOTE required because it appears within the type `J`\n+    //~| NOTE required by `is_send`\n }"}, {"sha": "4625669d5ecfe6b15b7a5ebe37c3288d20bdd4e3", "filename": "src/test/compile-fail/ref-suggestion.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5/src%2Ftest%2Fcompile-fail%2Fref-suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5/src%2Ftest%2Fcompile-fail%2Fref-suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fref-suggestion.rs?ref=abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5", "patch": "@@ -14,12 +14,14 @@ fn main() {\n     //~^ HELP use a `ref` binding as shown\n     //~| SUGGESTION let ref y = x;\n     x; //~ ERROR use of moved value\n+    //~^ HELP run `rustc --explain E0382` to see a detailed explanation\n \n     let x = vec![1];\n     let mut y = x;\n     //~^ HELP use a `ref` binding as shown\n     //~| SUGGESTION let ref mut y = x;\n     x; //~ ERROR use of moved value\n+    //~^ HELP run `rustc --explain E0382` to see a detailed explanation\n \n     let x = (Some(vec![1]), ());\n \n@@ -30,4 +32,5 @@ fn main() {\n         _ => {},\n     }\n     x; //~ ERROR use of partially moved value\n+    //~^ HELP run `rustc --explain E0382` to see a detailed explanation\n }"}, {"sha": "8877377a6ec9676355a20ce148cf0f067f2bc9b5", "filename": "src/test/compile-fail/suggest-path-instead-of-mod-dot-item.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5/src%2Ftest%2Fcompile-fail%2Fsuggest-path-instead-of-mod-dot-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5/src%2Ftest%2Fcompile-fail%2Fsuggest-path-instead-of-mod-dot-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsuggest-path-instead-of-mod-dot-item.rs?ref=abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5", "patch": "@@ -27,46 +27,54 @@ fn h1() -> i32 {\n     a.I\n         //~^ ERROR E0425\n         //~| HELP To reference an item from the `a` module, use `a::I`\n+        //~| HELP run `rustc --explain E0425` to see a detailed explanation\n }\n \n fn h2() -> i32 {\n     a.g()\n         //~^ ERROR E0425\n         //~| HELP To call a function from the `a` module, use `a::g(..)`\n+        //~| HELP run `rustc --explain E0425` to see a detailed explanation\n }\n \n fn h3() -> i32 {\n     a.b.J\n         //~^ ERROR E0425\n         //~| HELP To reference an item from the `a` module, use `a::b`\n+        //~| HELP run `rustc --explain E0425` to see a detailed explanation\n }\n \n fn h4() -> i32 {\n     a::b.J\n         //~^ ERROR E0425\n         //~| HELP To reference an item from the `a::b` module, use `a::b::J`\n+        //~| HELP run `rustc --explain E0425` to see a detailed explanation\n }\n \n fn h5() -> i32 {\n     a.b.f()\n         //~^ ERROR E0425\n         //~| HELP To reference an item from the `a` module, use `a::b`\n+        //~| HELP run `rustc --explain E0425` to see a detailed explanation\n }\n \n fn h6() -> i32 {\n     a::b.f()\n         //~^ ERROR E0425\n         //~| HELP To call a function from the `a::b` module, use `a::b::f(..)`\n+        //~| HELP run `rustc --explain E0425` to see a detailed explanation\n }\n \n fn h7() {\n     a::b\n         //~^ ERROR E0425\n         //~| HELP Module `a::b` cannot be the value of an expression\n+        //~| HELP run `rustc --explain E0425` to see a detailed explanation\n }\n \n fn h8() -> i32 {\n     a::b()\n         //~^ ERROR E0425\n         //~| HELP No function corresponds to `a::b(..)`\n+        //~| HELP run `rustc --explain E0425` to see a detailed explanation\n }"}, {"sha": "9c61f618e690f0fce57f9f812e7f22b3c5e42d3a", "filename": "src/test/compile-fail/suggest-private-fields.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5/src%2Ftest%2Fcompile-fail%2Fsuggest-private-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5/src%2Ftest%2Fcompile-fail%2Fsuggest-private-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsuggest-private-fields.rs?ref=abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5", "patch": "@@ -25,6 +25,7 @@ fn main () {\n         aa: 20, //~ ERROR structure `xc::B` has no field named `aa`\n         //~^ HELP did you mean `a`?\n         bb: 20, //~ ERROR structure `xc::B` has no field named `bb`\n+        //~^ HELP did you mean `a`?\n     };\n     // local crate struct\n     let l = A {"}, {"sha": "29360e58b5bd3471424cdcb5d5e25c497ac31172", "filename": "src/test/compile-fail/trait-object-reference-without-parens-suggestion.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5/src%2Ftest%2Fcompile-fail%2Ftrait-object-reference-without-parens-suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5/src%2Ftest%2Fcompile-fail%2Ftrait-object-reference-without-parens-suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-object-reference-without-parens-suggestion.rs?ref=abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5", "patch": "@@ -13,8 +13,10 @@ fn main() {\n     //~^ ERROR expected a path\n     //~| HELP try adding parentheses\n     //~| SUGGESTION let _: &(Copy + 'static);\n+    //~| HELP run `rustc --explain E0178` to see a detailed explanation\n     let _: &'static Copy + 'static;\n     //~^ ERROR expected a path\n     //~| HELP try adding parentheses\n     //~| SUGGESTION let _: &'static (Copy + 'static);\n+    //~| HELP run `rustc --explain E0178` to see a detailed explanation\n }"}, {"sha": "bbb063770c148274fd1ee99df28074b7f544c446", "filename": "src/test/compile-fail/use-mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5/src%2Ftest%2Fcompile-fail%2Fuse-mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5/src%2Ftest%2Fcompile-fail%2Fuse-mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fuse-mod.rs?ref=abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5", "patch": "@@ -11,6 +11,7 @@\n use foo::bar::{\n     self,\n //~^ ERROR `self` import can only appear once in the list\n+//~^^ NOTE previous import of `bar` here\n     Bar,\n     self\n //~^ NOTE another `self` import appears here"}, {"sha": "f7fed32cb5af2ec5f1b9547f3505b33b15acf8e2", "filename": "src/test/compile-fail/variance-unused-type-param.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5/src%2Ftest%2Fcompile-fail%2Fvariance-unused-type-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5/src%2Ftest%2Fcompile-fail%2Fvariance-unused-type-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvariance-unused-type-param.rs?ref=abd1cea14578a3fc9856e2dbbd9f40f2b2c3b6d5", "patch": "@@ -16,15 +16,18 @@\n struct SomeStruct<A> { x: u32 }\n //~^ ERROR parameter `A` is never used\n //~| HELP PhantomData\n+//~| HELP run `rustc --explain E0392` to see a detailed explanation\n \n enum SomeEnum<A> { Nothing }\n //~^ ERROR parameter `A` is never used\n //~| HELP PhantomData\n+//~| HELP run `rustc --explain E0392` to see a detailed explanation\n \n // Here T might *appear* used, but in fact it isn't.\n enum ListCell<T> {\n //~^ ERROR parameter `T` is never used\n //~| HELP PhantomData\n+//~| HELP run `rustc --explain E0392` to see a detailed explanation\n     Cons(Box<ListCell<T>>),\n     Nil\n }"}]}