{"sha": "c2aff692fa88235d356725f98184a5ea5b52eb88", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyYWZmNjkyZmE4ODIzNWQzNTY3MjVmOTgxODRhNWVhNWI1MmViODg=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-10-09T00:15:27Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-11-21T21:17:04Z"}, "message": "unicode: Rename UnicodeChar::is_digit to is_numeric\n\n'Numeric' is the proper name of the unicode character class,\nand this frees up the word 'digit' for ascii use in libcore.\n\nSince I'm going to rename `Char::is_digit_radix` to\n`is_digit`, I am not leaving a deprecated method in place,\nbecause that would just cause name clashes, as both\n`Char` and `UnicodeChar` are in the prelude.\n\n[breaking-change]", "tree": {"sha": "07f840ccdb488f4d62cbd8ce7fefceac41c67ed1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07f840ccdb488f4d62cbd8ce7fefceac41c67ed1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2aff692fa88235d356725f98184a5ea5b52eb88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2aff692fa88235d356725f98184a5ea5b52eb88", "html_url": "https://github.com/rust-lang/rust/commit/c2aff692fa88235d356725f98184a5ea5b52eb88", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2aff692fa88235d356725f98184a5ea5b52eb88/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac2f379abb13b249aa1e630e14fa42f9415160f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac2f379abb13b249aa1e630e14fa42f9415160f8", "html_url": "https://github.com/rust-lang/rust/commit/ac2f379abb13b249aa1e630e14fa42f9415160f8"}], "stats": {"total": 44, "additions": 22, "deletions": 22}, "files": [{"sha": "9bf45de0a17d45deba904d9e3aa1d73cdc372bce", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2aff692fa88235d356725f98184a5ea5b52eb88/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2aff692fa88235d356725f98184a5ea5b52eb88/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=c2aff692fa88235d356725f98184a5ea5b52eb88", "patch": "@@ -1566,7 +1566,7 @@ fn _arm_exec_compiled_test(config: &Config,\n \n     let mut exitcode: int = 0;\n     for c in exitcode_out.as_slice().chars() {\n-        if !c.is_digit() { break; }\n+        if !c.is_numeric() { break; }\n         exitcode = exitcode * 10 + match c {\n             '0' ... '9' => c as int - ('0' as int),\n             _ => 101,"}, {"sha": "d28cdcc3f4b3409c84d6ba9d6b842711856b5809", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c2aff692fa88235d356725f98184a5ea5b52eb88/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2aff692fa88235d356725f98184a5ea5b52eb88/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=c2aff692fa88235d356725f98184a5ea5b52eb88", "patch": "@@ -1189,7 +1189,7 @@ mod tests {\n         assert_eq!(\"11foo1bar11\".trim_left_chars('1'), \"foo1bar11\");\n         let chars: &[char] = &['1', '2'];\n         assert_eq!(\"12foo1bar12\".trim_left_chars(chars), \"foo1bar12\");\n-        assert_eq!(\"123foo1bar123\".trim_left_chars(|c: char| c.is_digit()), \"foo1bar123\");\n+        assert_eq!(\"123foo1bar123\".trim_left_chars(|c: char| c.is_numeric()), \"foo1bar123\");\n     }\n \n     #[test]\n@@ -1204,7 +1204,7 @@ mod tests {\n         assert_eq!(\"11foo1bar11\".trim_right_chars('1'), \"11foo1bar\");\n         let chars: &[char] = &['1', '2'];\n         assert_eq!(\"12foo1bar12\".trim_right_chars(chars), \"12foo1bar\");\n-        assert_eq!(\"123foo1bar123\".trim_right_chars(|c: char| c.is_digit()), \"123foo1bar\");\n+        assert_eq!(\"123foo1bar123\".trim_right_chars(|c: char| c.is_numeric()), \"123foo1bar\");\n     }\n \n     #[test]\n@@ -1219,7 +1219,7 @@ mod tests {\n         assert_eq!(\"11foo1bar11\".trim_chars('1'), \"foo1bar\");\n         let chars: &[char] = &['1', '2'];\n         assert_eq!(\"12foo1bar12\".trim_chars(chars), \"foo1bar\");\n-        assert_eq!(\"123foo1bar123\".trim_chars(|c: char| c.is_digit()), \"foo1bar\");\n+        assert_eq!(\"123foo1bar123\".trim_chars(|c: char| c.is_numeric()), \"foo1bar\");\n     }\n \n     #[test]"}, {"sha": "8d26a970eb8baa9edd129923f1efa3d805ccb71b", "filename": "src/libcore/str.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c2aff692fa88235d356725f98184a5ea5b52eb88/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2aff692fa88235d356725f98184a5ea5b52eb88/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=c2aff692fa88235d356725f98184a5ea5b52eb88", "patch": "@@ -1315,7 +1315,7 @@ pub trait StrPrelude for Sized? {\n     /// let v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\n     /// assert_eq!(v, vec![\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n     ///\n-    /// let v: Vec<&str> = \"abc1def2ghi\".split(|c: char| c.is_digit()).collect();\n+    /// let v: Vec<&str> = \"abc1def2ghi\".split(|c: char| c.is_numeric()).collect();\n     /// assert_eq!(v, vec![\"abc\", \"def\", \"ghi\"]);\n     ///\n     /// let v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\n@@ -1336,7 +1336,7 @@ pub trait StrPrelude for Sized? {\n     /// let v: Vec<&str> = \"Mary had a little lambda\".splitn(2, ' ').collect();\n     /// assert_eq!(v, vec![\"Mary\", \"had\", \"a little lambda\"]);\n     ///\n-    /// let v: Vec<&str> = \"abc1def2ghi\".splitn(1, |c: char| c.is_digit()).collect();\n+    /// let v: Vec<&str> = \"abc1def2ghi\".splitn(1, |c: char| c.is_numeric()).collect();\n     /// assert_eq!(v, vec![\"abc\", \"def2ghi\"]);\n     ///\n     /// let v: Vec<&str> = \"lionXXtigerXleopard\".splitn(2, 'X').collect();\n@@ -1368,7 +1368,7 @@ pub trait StrPrelude for Sized? {\n     /// let v: Vec<&str> = \"Mary had a little lamb\".split(' ').rev().collect();\n     /// assert_eq!(v, vec![\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n     ///\n-    /// let v: Vec<&str> = \"abc1def2ghi\".split(|c: char| c.is_digit()).rev().collect();\n+    /// let v: Vec<&str> = \"abc1def2ghi\".split(|c: char| c.is_numeric()).rev().collect();\n     /// assert_eq!(v, vec![\"ghi\", \"def\", \"abc\"]);\n     ///\n     /// let v: Vec<&str> = \"lionXXtigerXleopard\".split('X').rev().collect();\n@@ -1386,7 +1386,7 @@ pub trait StrPrelude for Sized? {\n     /// let v: Vec<&str> = \"Mary had a little lamb\".rsplitn(2, ' ').collect();\n     /// assert_eq!(v, vec![\"lamb\", \"little\", \"Mary had a\"]);\n     ///\n-    /// let v: Vec<&str> = \"abc1def2ghi\".rsplitn(1, |c: char| c.is_digit()).collect();\n+    /// let v: Vec<&str> = \"abc1def2ghi\".rsplitn(1, |c: char| c.is_numeric()).collect();\n     /// assert_eq!(v, vec![\"ghi\", \"abc1def\"]);\n     ///\n     /// let v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(2, 'X').collect();\n@@ -1596,7 +1596,7 @@ pub trait StrPrelude for Sized? {\n     /// assert_eq!(\"11foo1bar11\".trim_chars('1'), \"foo1bar\")\n     /// let x: &[_] = &['1', '2'];\n     /// assert_eq!(\"12foo1bar12\".trim_chars(x), \"foo1bar\")\n-    /// assert_eq!(\"123foo1bar123\".trim_chars(|c: char| c.is_digit()), \"foo1bar\")\n+    /// assert_eq!(\"123foo1bar123\".trim_chars(|c: char| c.is_numeric()), \"foo1bar\")\n     /// ```\n     fn trim_chars<'a, C: CharEq>(&'a self, to_trim: C) -> &'a str;\n \n@@ -1612,7 +1612,7 @@ pub trait StrPrelude for Sized? {\n     /// assert_eq!(\"11foo1bar11\".trim_left_chars('1'), \"foo1bar11\")\n     /// let x: &[_] = &['1', '2'];\n     /// assert_eq!(\"12foo1bar12\".trim_left_chars(x), \"foo1bar12\")\n-    /// assert_eq!(\"123foo1bar123\".trim_left_chars(|c: char| c.is_digit()), \"foo1bar123\")\n+    /// assert_eq!(\"123foo1bar123\".trim_left_chars(|c: char| c.is_numeric()), \"foo1bar123\")\n     /// ```\n     fn trim_left_chars<'a, C: CharEq>(&'a self, to_trim: C) -> &'a str;\n \n@@ -1628,7 +1628,7 @@ pub trait StrPrelude for Sized? {\n     /// assert_eq!(\"11foo1bar11\".trim_right_chars('1'), \"11foo1bar\")\n     /// let x: &[_] = &['1', '2'];\n     /// assert_eq!(\"12foo1bar12\".trim_right_chars(x), \"12foo1bar\")\n-    /// assert_eq!(\"123foo1bar123\".trim_right_chars(|c: char| c.is_digit()), \"123foo1bar\")\n+    /// assert_eq!(\"123foo1bar123\".trim_right_chars(|c: char| c.is_numeric()), \"123foo1bar\")\n     /// ```\n     fn trim_right_chars<'a, C: CharEq>(&'a self, to_trim: C) -> &'a str;\n "}, {"sha": "2d5ca983fec70ff9958315338408f204952c50aa", "filename": "src/libcoretest/char.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c2aff692fa88235d356725f98184a5ea5b52eb88/src%2Flibcoretest%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2aff692fa88235d356725f98184a5ea5b52eb88/src%2Flibcoretest%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fchar.rs?ref=c2aff692fa88235d356725f98184a5ea5b52eb88", "patch": "@@ -105,12 +105,12 @@ fn test_is_control() {\n \n #[test]\n fn test_is_digit() {\n-   assert!('2'.is_digit());\n-   assert!('7'.is_digit());\n-   assert!(!'c'.is_digit());\n-   assert!(!'i'.is_digit());\n-   assert!(!'z'.is_digit());\n-   assert!(!'Q'.is_digit());\n+   assert!('2'.is_numeric());\n+   assert!('7'.is_numeric());\n+   assert!(!'c'.is_numeric());\n+   assert!(!'i'.is_numeric());\n+   assert!(!'z'.is_numeric());\n+   assert!(!'Q'.is_numeric());\n }\n \n #[test]"}, {"sha": "00c68f42c3249d4ba8168f3c0468906c6eeecb2b", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2aff692fa88235d356725f98184a5ea5b52eb88/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2aff692fa88235d356725f98184a5ea5b52eb88/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=c2aff692fa88235d356725f98184a5ea5b52eb88", "patch": "@@ -920,7 +920,7 @@ impl NonSnakeCase {\n             let mut allow_underscore = true;\n             ident.chars().all(|c| {\n                 allow_underscore = match c {\n-                    c if c.is_lowercase() || c.is_digit() => true,\n+                    c if c.is_lowercase() || c.is_numeric() => true,\n                     '_' if allow_underscore => false,\n                     _ => return false,\n                 };"}, {"sha": "81022994387493e41d8e573196b3f0945441a538", "filename": "src/libstd/rt/backtrace.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c2aff692fa88235d356725f98184a5ea5b52eb88/src%2Flibstd%2Frt%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2aff692fa88235d356725f98184a5ea5b52eb88/src%2Flibstd%2Frt%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fbacktrace.rs?ref=c2aff692fa88235d356725f98184a5ea5b52eb88", "patch": "@@ -71,7 +71,7 @@ fn demangle(writer: &mut Writer, s: &str) -> IoResult<()> {\n         while valid {\n             let mut i = 0;\n             for c in chars {\n-                if c.is_digit() {\n+                if c.is_numeric() {\n                     i = i * 10 + c as uint - '0' as uint;\n                 } else {\n                     break\n@@ -101,7 +101,7 @@ fn demangle(writer: &mut Writer, s: &str) -> IoResult<()> {\n                 first = false;\n             }\n             let mut rest = s;\n-            while rest.char_at(0).is_digit() {\n+            while rest.char_at(0).is_numeric() {\n                 rest = rest.slice_from(1);\n             }\n             let i: uint = from_str(s.slice_to(s.len() - rest.len())).unwrap();"}, {"sha": "4bedc6f21f47cd932bd9b157724367403da84fb6", "filename": "src/libunicode/u_char.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c2aff692fa88235d356725f98184a5ea5b52eb88/src%2Flibunicode%2Fu_char.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2aff692fa88235d356725f98184a5ea5b52eb88/src%2Flibunicode%2Fu_char.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunicode%2Fu_char.rs?ref=c2aff692fa88235d356725f98184a5ea5b52eb88", "patch": "@@ -217,7 +217,7 @@ pub trait UnicodeChar {\n     fn is_control(&self) -> bool;\n \n     /// Indicates whether the character is numeric (Nd, Nl, or No).\n-    fn is_digit(&self) -> bool;\n+    fn is_numeric(&self) -> bool;\n \n     /// Converts a character to its lowercase equivalent.\n     ///\n@@ -281,7 +281,7 @@ impl UnicodeChar for char {\n \n     fn is_control(&self) -> bool { is_control(*self) }\n \n-    fn is_digit(&self) -> bool { is_digit(*self) }\n+    fn is_numeric(&self) -> bool { is_digit(*self) }\n \n     fn to_lowercase(&self) -> char { to_lowercase(*self) }\n "}]}