{"sha": "58fdac638ea57f60bb2bea4b35f8fc5988df9387", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4ZmRhYzYzOGVhNTdmNjBiYjJiZWE0YjM1ZjhmYzU5ODhkZjkzODc=", "commit": {"author": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-06-14T23:26:56Z"}, "committer": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-06-28T09:01:35Z"}, "message": "Simplify const error reporting", "tree": {"sha": "daa59359d84fc1d87f753fcd0901b95004303eae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/daa59359d84fc1d87f753fcd0901b95004303eae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/58fdac638ea57f60bb2bea4b35f8fc5988df9387", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/58fdac638ea57f60bb2bea4b35f8fc5988df9387", "html_url": "https://github.com/rust-lang/rust/commit/58fdac638ea57f60bb2bea4b35f8fc5988df9387", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/58fdac638ea57f60bb2bea4b35f8fc5988df9387/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba196bdcb10736da5d14c961bd8962d80e300913", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba196bdcb10736da5d14c961bd8962d80e300913", "html_url": "https://github.com/rust-lang/rust/commit/ba196bdcb10736da5d14c961bd8962d80e300913"}], "stats": {"total": 17, "additions": 7, "deletions": 10}, "files": [{"sha": "8a824c66ec47b17f142b8913fa3290e60b72cfd6", "filename": "src/librustc/middle/const_val.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/58fdac638ea57f60bb2bea4b35f8fc5988df9387/src%2Flibrustc%2Fmiddle%2Fconst_val.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58fdac638ea57f60bb2bea4b35f8fc5988df9387/src%2Flibrustc%2Fmiddle%2Fconst_val.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_val.rs?ref=58fdac638ea57f60bb2bea4b35f8fc5988df9387", "patch": "@@ -93,14 +93,14 @@ impl<'a, 'gcx, 'tcx> ConstEvalErr<'tcx> {\n         message: &str)\n         -> Option<DiagnosticBuilder<'tcx>>\n     {\n-        self.struct_generic(tcx, message, None, true)\n+        self.struct_generic(tcx, message, None)\n     }\n \n     pub fn report_as_error(&self,\n         tcx: TyCtxtAt<'a, 'gcx, 'tcx>,\n         message: &str\n     ) {\n-        let err = self.struct_generic(tcx, message, None, true);\n+        let err = self.struct_generic(tcx, message, None);\n         if let Some(mut err) = err {\n             err.emit();\n         }\n@@ -115,7 +115,6 @@ impl<'a, 'gcx, 'tcx> ConstEvalErr<'tcx> {\n             tcx,\n             message,\n             Some(lint_root),\n-            false,\n         );\n         if let Some(mut lint) = lint {\n             lint.emit();\n@@ -127,7 +126,6 @@ impl<'a, 'gcx, 'tcx> ConstEvalErr<'tcx> {\n         tcx: TyCtxtAt<'a, 'gcx, 'tcx>,\n         message: &str,\n         lint_root: Option<ast::NodeId>,\n-        as_err: bool,\n     ) -> Option<DiagnosticBuilder<'tcx>> {\n         let (msg, frames): (_, &[_]) = match *self.kind {\n             ErrKind::TypeckError | ErrKind::CheckMatchError => return None,\n@@ -136,7 +134,7 @@ impl<'a, 'gcx, 'tcx> ConstEvalErr<'tcx> {\n                     ::mir::interpret::EvalErrorKind::TypeckError |\n                     ::mir::interpret::EvalErrorKind::Layout(_) => return None,\n                     ::mir::interpret::EvalErrorKind::ReferencedConstant(ref inner) => {\n-                        inner.struct_generic(tcx, \"referenced constant\", lint_root, as_err)?.emit();\n+                        inner.struct_generic(tcx, \"referenced constant\", lint_root)?.emit();\n                         (miri.to_string(), frames)\n                     },\n                     _ => (miri.to_string(), frames),\n@@ -145,22 +143,21 @@ impl<'a, 'gcx, 'tcx> ConstEvalErr<'tcx> {\n             _ => (self.description().into_oneline().to_string(), &[]),\n         };\n         trace!(\"reporting const eval failure at {:?}\", self.span);\n-        let mut err = if as_err {\n-            struct_error(tcx, message)\n-        } else {\n+        let mut err = if let Some(lint_root) = lint_root {\n             let node_id = frames\n                 .iter()\n                 .rev()\n                 .filter_map(|frame| frame.lint_root)\n                 .next()\n-                .or(lint_root)\n-                .expect(\"some part of a failing const eval must be local\");\n+                .unwrap_or(lint_root);\n             tcx.struct_span_lint_node(\n                 ::rustc::lint::builtin::CONST_ERR,\n                 node_id,\n                 tcx.span,\n                 message,\n             )\n+        } else {\n+            struct_error(tcx, message)\n         };\n         err.span_label(self.span, msg);\n         for FrameInfo { span, location, .. } in frames {"}]}