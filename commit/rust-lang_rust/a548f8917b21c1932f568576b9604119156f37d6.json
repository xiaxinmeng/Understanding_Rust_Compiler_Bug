{"sha": "a548f8917b21c1932f568576b9604119156f37d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1NDhmODkxN2IyMWMxOTMyZjU2ODU3NmI5NjA0MTE5MTU2ZjM3ZDY=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-12-04T06:20:51Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-12-29T12:55:24Z"}, "message": "Intern substs before storing them in the tcx.\n\nThis cuts memory use dramatically from the previous commit, and reduces\nuse overall. E.g. the memory usage of `rustc -O librustc/lib.rs` seems\nto drop 100MB from 1.98GB to 1.88GB (on one run anyway).", "tree": {"sha": "ab9b8d7dd029de8d0c0c2c99052bd76f62c80fbf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab9b8d7dd029de8d0c0c2c99052bd76f62c80fbf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a548f8917b21c1932f568576b9604119156f37d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a548f8917b21c1932f568576b9604119156f37d6", "html_url": "https://github.com/rust-lang/rust/commit/a548f8917b21c1932f568576b9604119156f37d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a548f8917b21c1932f568576b9604119156f37d6/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f2b0f032a2b479b6cf728646283bf6e46b32098", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f2b0f032a2b479b6cf728646283bf6e46b32098", "html_url": "https://github.com/rust-lang/rust/commit/4f2b0f032a2b479b6cf728646283bf6e46b32098"}], "stats": {"total": 16, "additions": 14, "deletions": 2}, "files": [{"sha": "370aa43a252dcc936caacad42758b9f66af2e65a", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a548f8917b21c1932f568576b9604119156f37d6/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a548f8917b21c1932f568576b9604119156f37d6/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=a548f8917b21c1932f568576b9604119156f37d6", "patch": "@@ -617,6 +617,9 @@ pub struct ctxt<'tcx> {\n     // FIXME(eddyb) use a FnvHashSet<InternedTy<'tcx>> when equivalent keys can\n     // queried from a HashSet.\n     interner: RefCell<FnvHashMap<InternedTy<'tcx>, Ty<'tcx>>>,\n+    // FIXME as above, use a hashset if equivalent elements can be queried.\n+    substs_interner: RefCell<FnvHashMap<&'tcx Substs<'tcx>, &'tcx Substs<'tcx>>>,\n+\n     pub sess: Session,\n     pub def_map: DefMap,\n \n@@ -848,6 +851,8 @@ impl<'tcx> ctxt<'tcx> {\n             self,\n             ty_enum, ty_uniq, ty_vec, ty_ptr, ty_rptr, ty_bare_fn, ty_closure, ty_trait,\n             ty_struct, ty_unboxed_closure, ty_tup, ty_param, ty_open, ty_infer);\n+\n+        println!(\"Substs interner: #{}\", self.substs_interner.borrow().len());\n     }\n }\n \n@@ -2063,6 +2068,7 @@ pub fn mk_ctxt<'tcx>(s: Session,\n         type_arena: type_arena,\n         substs_arena: substs_arena,\n         interner: RefCell::new(FnvHashMap::new()),\n+        substs_interner: RefCell::new(FnvHashMap::new()),\n         named_region_map: named_region_map,\n         item_variance_map: RefCell::new(DefIdMap::new()),\n         variance_computed: Cell::new(false),\n@@ -2123,8 +2129,14 @@ pub fn mk_ctxt<'tcx>(s: Session,\n // Type constructors\n \n impl<'tcx> ctxt<'tcx> {\n-    pub fn mk_substs(&self, subst: Substs<'tcx>) -> &'tcx Substs<'tcx> {\n-        self.substs_arena.alloc(subst)\n+    pub fn mk_substs(&self, substs: Substs<'tcx>) -> &'tcx Substs<'tcx> {\n+        if let Some(substs) = self.substs_interner.borrow().get(&substs) {\n+            return *substs;\n+        }\n+\n+        let substs = self.substs_arena.alloc(substs);\n+        self.substs_interner.borrow_mut().insert(substs, substs);\n+        substs\n     }\n }\n "}]}