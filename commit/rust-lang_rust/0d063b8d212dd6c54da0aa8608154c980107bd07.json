{"sha": "0d063b8d212dd6c54da0aa8608154c980107bd07", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkMDYzYjhkMjEyZGQ2YzU0ZGEwYWE4NjA4MTU0Yzk4MDEwN2JkMDc=", "commit": {"author": {"name": "Brandon", "email": "brandondong604@hotmail.com", "date": "2021-03-24T07:00:38Z"}, "committer": {"name": "Brandon", "email": "brandondong604@hotmail.com", "date": "2021-03-24T07:00:38Z"}, "message": "Fix MISSING: command error with macros", "tree": {"sha": "4cc23ff0ac81534af54000927f0e22c910e2c680", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4cc23ff0ac81534af54000927f0e22c910e2c680"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d063b8d212dd6c54da0aa8608154c980107bd07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d063b8d212dd6c54da0aa8608154c980107bd07", "html_url": "https://github.com/rust-lang/rust/commit/0d063b8d212dd6c54da0aa8608154c980107bd07", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d063b8d212dd6c54da0aa8608154c980107bd07/comments", "author": {"login": "brandondong", "id": 13722457, "node_id": "MDQ6VXNlcjEzNzIyNDU3", "avatar_url": "https://avatars.githubusercontent.com/u/13722457?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brandondong", "html_url": "https://github.com/brandondong", "followers_url": "https://api.github.com/users/brandondong/followers", "following_url": "https://api.github.com/users/brandondong/following{/other_user}", "gists_url": "https://api.github.com/users/brandondong/gists{/gist_id}", "starred_url": "https://api.github.com/users/brandondong/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brandondong/subscriptions", "organizations_url": "https://api.github.com/users/brandondong/orgs", "repos_url": "https://api.github.com/users/brandondong/repos", "events_url": "https://api.github.com/users/brandondong/events{/privacy}", "received_events_url": "https://api.github.com/users/brandondong/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brandondong", "id": 13722457, "node_id": "MDQ6VXNlcjEzNzIyNDU3", "avatar_url": "https://avatars.githubusercontent.com/u/13722457?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brandondong", "html_url": "https://github.com/brandondong", "followers_url": "https://api.github.com/users/brandondong/followers", "following_url": "https://api.github.com/users/brandondong/following{/other_user}", "gists_url": "https://api.github.com/users/brandondong/gists{/gist_id}", "starred_url": "https://api.github.com/users/brandondong/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brandondong/subscriptions", "organizations_url": "https://api.github.com/users/brandondong/orgs", "repos_url": "https://api.github.com/users/brandondong/repos", "events_url": "https://api.github.com/users/brandondong/events{/privacy}", "received_events_url": "https://api.github.com/users/brandondong/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d702f10fb345637e82f3fb9606f5aba243df5365", "url": "https://api.github.com/repos/rust-lang/rust/commits/d702f10fb345637e82f3fb9606f5aba243df5365", "html_url": "https://github.com/rust-lang/rust/commit/d702f10fb345637e82f3fb9606f5aba243df5365"}], "stats": {"total": 52, "additions": 44, "deletions": 8}, "files": [{"sha": "d7391ebadeb7ca148ef6eda4a9bcdfe5f4dcac3b", "filename": "crates/hir_expand/src/lib.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0d063b8d212dd6c54da0aa8608154c980107bd07/crates%2Fhir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d063b8d212dd6c54da0aa8608154c980107bd07/crates%2Fhir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Flib.rs?ref=0d063b8d212dd6c54da0aa8608154c980107bd07", "patch": "@@ -207,6 +207,13 @@ impl HirFileId {\n         }\n         false\n     }\n+\n+    pub fn is_macro_file(&self) -> bool {\n+        match self.0 {\n+            HirFileIdRepr::MacroFile(_) => true,\n+            HirFileIdRepr::FileId(_) => false,\n+        }\n+    }\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]"}, {"sha": "9e78ed6a0eecc273f804953d56328565fa5127e9", "filename": "crates/ide/src/annotations.rs", "status": "modified", "additions": 37, "deletions": 8, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/0d063b8d212dd6c54da0aa8608154c980107bd07/crates%2Fide%2Fsrc%2Fannotations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d063b8d212dd6c54da0aa8608154c980107bd07/crates%2Fide%2Fsrc%2Fannotations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fannotations.rs?ref=0d063b8d212dd6c54da0aa8608154c980107bd07", "patch": "@@ -1,5 +1,5 @@\n use either::Either;\n-use hir::{HasSource, Semantics};\n+use hir::{HasSource, InFile, Semantics};\n use ide_db::{\n     base_db::{FileId, FilePosition, FileRange},\n     helpers::visit_file_defs,\n@@ -80,19 +80,19 @@ pub(crate) fn annotations(\n         Either::Left(def) => {\n             let node = match def {\n                 hir::ModuleDef::Const(konst) => {\n-                    konst.source(db).and_then(|node| range_and_position_of(&node.value))\n+                    konst.source(db).and_then(|node| range_and_position_of(&node))\n                 }\n                 hir::ModuleDef::Trait(trait_) => {\n-                    trait_.source(db).and_then(|node| range_and_position_of(&node.value))\n+                    trait_.source(db).and_then(|node| range_and_position_of(&node))\n                 }\n                 hir::ModuleDef::Adt(hir::Adt::Struct(strukt)) => {\n-                    strukt.source(db).and_then(|node| range_and_position_of(&node.value))\n+                    strukt.source(db).and_then(|node| range_and_position_of(&node))\n                 }\n                 hir::ModuleDef::Adt(hir::Adt::Enum(enum_)) => {\n-                    enum_.source(db).and_then(|node| range_and_position_of(&node.value))\n+                    enum_.source(db).and_then(|node| range_and_position_of(&node))\n                 }\n                 hir::ModuleDef::Adt(hir::Adt::Union(union)) => {\n-                    union.source(db).and_then(|node| range_and_position_of(&node.value))\n+                    union.source(db).and_then(|node| range_and_position_of(&node))\n                 }\n                 _ => None,\n             };\n@@ -120,8 +120,18 @@ pub(crate) fn annotations(\n                 });\n             }\n \n-            fn range_and_position_of(node: &dyn NameOwner) -> Option<(TextSize, TextRange)> {\n-                Some((node.name()?.syntax().text_range().start(), node.syntax().text_range()))\n+            fn range_and_position_of<T: NameOwner>(\n+                node: &InFile<T>,\n+            ) -> Option<(TextSize, TextRange)> {\n+                if node.file_id.is_macro_file() {\n+                    // Macro generated files should not contain annotations.\n+                    None\n+                } else {\n+                    Some((\n+                        node.value.name()?.syntax().text_range().start(),\n+                        node.value.syntax().text_range(),\n+                    ))\n+                }\n             }\n         }\n         Either::Right(_) => (),\n@@ -961,6 +971,25 @@ mod tests {\n struct Foo;\n //- /lib.rs\n // this file comes last since `check` checks the first file only\n+\"#,\n+            expect![[r#\"\n+                []\n+            \"#]],\n+        );\n+    }\n+\n+    #[test]\n+    fn test_no_annotations_macro_struct_def() {\n+        check(\n+            r#\"\n+//- /lib.rs\n+macro_rules! m {\n+    () => {\n+        struct A {}\n+    };\n+}\n+\n+m!();\n \"#,\n             expect![[r#\"\n                 []"}]}