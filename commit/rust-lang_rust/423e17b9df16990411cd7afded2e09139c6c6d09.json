{"sha": "423e17b9df16990411cd7afded2e09139c6c6d09", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyM2UxN2I5ZGYxNjk5MDQxMWNkN2FmZGVkMmUwOTEzOWM2YzZkMDk=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-10-25T16:01:15Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-11-02T00:56:07Z"}, "message": "DSTify BytesContainer", "tree": {"sha": "6fd82ce729761864d58932dd5a1b6a416e809920", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6fd82ce729761864d58932dd5a1b6a416e809920"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/423e17b9df16990411cd7afded2e09139c6c6d09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/423e17b9df16990411cd7afded2e09139c6c6d09", "html_url": "https://github.com/rust-lang/rust/commit/423e17b9df16990411cd7afded2e09139c6c6d09", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/423e17b9df16990411cd7afded2e09139c6c6d09/comments", "author": null, "committer": null, "parents": [{"sha": "39f90aead4ad52de1d2c50418da4d66320233d8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/39f90aead4ad52de1d2c50418da4d66320233d8e", "html_url": "https://github.com/rust-lang/rust/commit/39f90aead4ad52de1d2c50418da4d66320233d8e"}], "stats": {"total": 85, "additions": 31, "deletions": 54}, "files": [{"sha": "8949a881c9de60274413be34635d5e25d6bb653c", "filename": "src/libstd/path/mod.rs", "status": "modified", "additions": 30, "deletions": 25, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/423e17b9df16990411cd7afded2e09139c6c6d09/src%2Flibstd%2Fpath%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/423e17b9df16990411cd7afded2e09139c6c6d09/src%2Flibstd%2Fpath%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fmod.rs?ref=423e17b9df16990411cd7afded2e09139c6c6d09", "patch": "@@ -67,6 +67,7 @@ println!(\"path exists: {}\", path.exists());\n \n #![experimental]\n \n+use core::kinds::Sized;\n use c_str::CString;\n use clone::Clone;\n use fmt;\n@@ -626,7 +627,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// ```\n     #[inline]\n     fn push_many<T: BytesContainer>(&mut self, paths: &[T]) {\n-        let t: Option<T> = None;\n+        let t: Option<&T> = None;\n         if BytesContainer::is_str(t) {\n             for p in paths.iter() {\n                 self.push(p.container_as_str().unwrap())\n@@ -791,14 +792,9 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n }\n \n /// A trait that represents something bytes-like (e.g. a &[u8] or a &str)\n-pub trait BytesContainer {\n+pub trait BytesContainer for Sized? {\n     /// Returns a &[u8] representing the receiver\n     fn container_as_bytes<'a>(&'a self) -> &'a [u8];\n-    /// Consumes the receiver and converts it into Vec<u8>\n-    #[inline]\n-    fn container_into_owned_bytes(self) -> Vec<u8> {\n-        self.container_as_bytes().to_vec()\n-    }\n     /// Returns the receiver interpreted as a utf-8 string, if possible\n     #[inline]\n     fn container_as_str<'a>(&'a self) -> Option<&'a str> {\n@@ -807,7 +803,7 @@ pub trait BytesContainer {\n     /// Returns whether .container_as_str() is guaranteed to not fail\n     // FIXME (#8888): Remove unused arg once ::<for T> works\n     #[inline]\n-    fn is_str(_: Option<Self>) -> bool { false }\n+    fn is_str(_: Option<&Self>) -> bool { false }\n }\n \n /// A trait that represents the unsafe operations on GenericPaths\n@@ -859,48 +855,44 @@ impl<'a, P: GenericPath> Display<'a, P> {\n     }\n }\n \n-impl<'a> BytesContainer for &'a str {\n+impl BytesContainer for str {\n     #[inline]\n-    fn container_as_bytes<'a>(&'a self) -> &'a [u8] {\n+    fn container_as_bytes(&self) -> &[u8] {\n         self.as_bytes()\n     }\n     #[inline]\n-    fn container_as_str<'a>(&'a self) -> Option<&'a str> {\n-        Some(*self)\n+    fn container_as_str(&self) -> Option<&str> {\n+        Some(self)\n     }\n     #[inline]\n-    fn is_str(_: Option<&'a str>) -> bool { true }\n+    fn is_str(_: Option<&str>) -> bool { true }\n }\n \n impl BytesContainer for String {\n     #[inline]\n-    fn container_as_bytes<'a>(&'a self) -> &'a [u8] {\n+    fn container_as_bytes(&self) -> &[u8] {\n         self.as_bytes()\n     }\n     #[inline]\n-    fn container_as_str<'a>(&'a self) -> Option<&'a str> {\n+    fn container_as_str(&self) -> Option<&str> {\n         Some(self.as_slice())\n     }\n     #[inline]\n-    fn is_str(_: Option<String>) -> bool { true }\n+    fn is_str(_: Option<&String>) -> bool { true }\n }\n \n-impl<'a> BytesContainer for &'a [u8] {\n+impl BytesContainer for [u8] {\n     #[inline]\n-    fn container_as_bytes<'a>(&'a self) -> &'a [u8] {\n-        *self\n+    fn container_as_bytes(&self) -> &[u8] {\n+        self\n     }\n }\n \n impl BytesContainer for Vec<u8> {\n     #[inline]\n-    fn container_as_bytes<'a>(&'a self) -> &'a [u8] {\n+    fn container_as_bytes(&self) -> &[u8] {\n         self.as_slice()\n     }\n-    #[inline]\n-    fn container_into_owned_bytes(self) -> Vec<u8> {\n-        self\n-    }\n }\n \n impl BytesContainer for CString {\n@@ -920,7 +912,20 @@ impl<'a> BytesContainer for str::MaybeOwned<'a> {\n         Some(self.as_slice())\n     }\n     #[inline]\n-    fn is_str(_: Option<str::MaybeOwned>) -> bool { true }\n+    fn is_str(_: Option<&str::MaybeOwned>) -> bool { true }\n+}\n+\n+impl<'a, Sized? T: BytesContainer> BytesContainer for &'a T {\n+    #[inline]\n+    fn container_as_bytes(&self) -> &[u8] {\n+        (**self).container_as_bytes()\n+    }\n+    #[inline]\n+    fn container_as_str(&self) -> Option<&str> {\n+        (**self).container_as_str()\n+    }\n+    #[inline]\n+    fn is_str(_: Option<& &'a T>) -> bool { BytesContainer::is_str(None::<&T>) }\n }\n \n #[inline(always)]"}, {"sha": "60cfa7a13de94425386cfebaadcd18e6f51bc217", "filename": "src/libstd/path/posix.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/423e17b9df16990411cd7afded2e09139c6c6d09/src%2Flibstd%2Fpath%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/423e17b9df16990411cd7afded2e09139c6c6d09/src%2Flibstd%2Fpath%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fposix.rs?ref=423e17b9df16990411cd7afded2e09139c6c6d09", "patch": "@@ -117,17 +117,6 @@ impl BytesContainer for Path {\n     fn container_as_bytes<'a>(&'a self) -> &'a [u8] {\n         self.as_vec()\n     }\n-    #[inline]\n-    fn container_into_owned_bytes(self) -> Vec<u8> {\n-        self.into_vec()\n-    }\n-}\n-\n-impl<'a> BytesContainer for &'a Path {\n-    #[inline]\n-    fn container_as_bytes<'a>(&'a self) -> &'a [u8] {\n-        self.as_vec()\n-    }\n }\n \n impl GenericPathUnsafe for Path {"}, {"sha": "3ef142a2e824c39966532a6117994116689622e3", "filename": "src/libstd/path/windows.rs", "status": "modified", "additions": 1, "deletions": 18, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/423e17b9df16990411cd7afded2e09139c6c6d09/src%2Flibstd%2Fpath%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/423e17b9df16990411cd7afded2e09139c6c6d09/src%2Flibstd%2Fpath%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fwindows.rs?ref=423e17b9df16990411cd7afded2e09139c6c6d09", "patch": "@@ -144,23 +144,6 @@ impl<S: hash::Writer> hash::Hash<S> for Path {\n }\n \n impl BytesContainer for Path {\n-    #[inline]\n-    fn container_as_bytes<'a>(&'a self) -> &'a [u8] {\n-        self.as_vec()\n-    }\n-    #[inline]\n-    fn container_into_owned_bytes(self) -> Vec<u8> {\n-        self.into_vec()\n-    }\n-    #[inline]\n-    fn container_as_str<'a>(&'a self) -> Option<&'a str> {\n-        self.as_str()\n-    }\n-    #[inline]\n-    fn is_str(_: Option<Path>) -> bool { true }\n-}\n-\n-impl<'a> BytesContainer for &'a Path {\n     #[inline]\n     fn container_as_bytes<'a>(&'a self) -> &'a [u8] {\n         self.as_vec()\n@@ -170,7 +153,7 @@ impl<'a> BytesContainer for &'a Path {\n         self.as_str()\n     }\n     #[inline]\n-    fn is_str(_: Option<&'a Path>) -> bool { true }\n+    fn is_str(_: Option<&Path>) -> bool { true }\n }\n \n impl GenericPathUnsafe for Path {"}]}