{"sha": "7f46d7313c5c17571f8d44b020fe83869e676ed7", "node_id": "C_kwDOAAsO6NoAKDdmNDZkNzMxM2M1YzE3NTcxZjhkNDRiMDIwZmU4Mzg2OWU2NzZlZDc", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-09-08T06:25:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-09-08T06:25:10Z"}, "message": "Rollup merge of #101549 - eholk:type-ir-derive-hashstable_generic, r=jackh726\n\nUse HashStable_Generic in rustc_type_ir\n\nA lot of the types in this crate implemented HashStable directly to avoid circular dependencies. One way around that is to use HashStable_Generic. We adopt that here to avoid a lot of boilerplate.\n\nThis doesn't update all the types, because some would require `I: Interner + HashStable`.\n\nr? `@cjgillot`", "tree": {"sha": "d77ce2e9c0f05757616091215464b89d121cd30b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d77ce2e9c0f05757616091215464b89d121cd30b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f46d7313c5c17571f8d44b020fe83869e676ed7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjGYrGCRBK7hj4Ov3rIwAAW1cIAI3ccuNBmu3LTOiOy18vCGsG\nxiTxHlSMjAaV1TMVhzgoUL+7TlgiD1mv1u1hMcptLS/xBy2J4hxRlSCwEFUn0+BO\nMu7Awk3e2iCum3+aJZTjAQYXqWTai+4jvoBIJfZyyBASXzBWM7TNUNXbaDYFBl8I\nQS5D+5dOe91p4PAoqfmOOS8r3M2Z40BQVp/u3tEnnDLY96EE4/EAm27+RVpdH0aX\nK3vc3s+8tneK+zQcZAFQ+v9RUiaANKhMb2gy8n6FiZ1ia3ZsP0hzOVN8h92mwk4u\n7eGPda/9K39us19wZMLT0fPdA/X0ts2Hfwq9SCKUA5BHzCxYyyrp5SwYo2J1BJ4=\n=OEBG\n-----END PGP SIGNATURE-----\n", "payload": "tree d77ce2e9c0f05757616091215464b89d121cd30b\nparent 12b810063dc87bc985e8aab8d0fa2179add2610f\nparent 578fc49fc1bbc5498138c84eecad68ee3de54173\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1662618310 +0530\ncommitter GitHub <noreply@github.com> 1662618310 +0530\n\nRollup merge of #101549 - eholk:type-ir-derive-hashstable_generic, r=jackh726\n\nUse HashStable_Generic in rustc_type_ir\n\nA lot of the types in this crate implemented HashStable directly to avoid circular dependencies. One way around that is to use HashStable_Generic. We adopt that here to avoid a lot of boilerplate.\n\nThis doesn't update all the types, because some would require `I: Interner + HashStable`.\n\nr? `@cjgillot`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f46d7313c5c17571f8d44b020fe83869e676ed7", "html_url": "https://github.com/rust-lang/rust/commit/7f46d7313c5c17571f8d44b020fe83869e676ed7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f46d7313c5c17571f8d44b020fe83869e676ed7/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12b810063dc87bc985e8aab8d0fa2179add2610f", "url": "https://api.github.com/repos/rust-lang/rust/commits/12b810063dc87bc985e8aab8d0fa2179add2610f", "html_url": "https://github.com/rust-lang/rust/commit/12b810063dc87bc985e8aab8d0fa2179add2610f"}, {"sha": "578fc49fc1bbc5498138c84eecad68ee3de54173", "url": "https://api.github.com/repos/rust-lang/rust/commits/578fc49fc1bbc5498138c84eecad68ee3de54173", "html_url": "https://github.com/rust-lang/rust/commit/578fc49fc1bbc5498138c84eecad68ee3de54173"}], "stats": {"total": 59, "additions": 16, "deletions": 43}, "files": [{"sha": "90bcc2e4be42a2d55449c7c41aa6596c3676a61e", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7f46d7313c5c17571f8d44b020fe83869e676ed7/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/7f46d7313c5c17571f8d44b020fe83869e676ed7/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=7f46d7313c5c17571f8d44b020fe83869e676ed7", "patch": "@@ -3958,6 +3958,7 @@ dependencies = [\n  \"rustc_session\",\n  \"rustc_span\",\n  \"rustc_target\",\n+ \"rustc_type_ir\",\n  \"smallvec\",\n  \"thin-vec\",\n  \"tracing\","}, {"sha": "d7599a56c0b66972b42df897c1d4767adfd915ea", "filename": "compiler/rustc_query_system/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7f46d7313c5c17571f8d44b020fe83869e676ed7/compiler%2Frustc_query_system%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7f46d7313c5c17571f8d44b020fe83869e676ed7/compiler%2Frustc_query_system%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2FCargo.toml?ref=7f46d7313c5c17571f8d44b020fe83869e676ed7", "patch": "@@ -21,6 +21,7 @@ rustc_serialize = { path = \"../rustc_serialize\" }\n rustc_session = { path = \"../rustc_session\" }\n rustc_span = { path = \"../rustc_span\" }\n rustc_target = { path = \"../rustc_target\" }\n+rustc_type_ir = { path = \"../rustc_type_ir\" }\n smallvec = { version = \"1.8.1\", features = [\"union\", \"may_dangle\"] }\n thin-vec = \"0.2.8\"\n tracing = \"0.1\""}, {"sha": "0bc811eb04412544d2d783c0ca2400490bf081c8", "filename": "compiler/rustc_query_system/src/ich/impls_syntax.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f46d7313c5c17571f8d44b020fe83869e676ed7/compiler%2Frustc_query_system%2Fsrc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f46d7313c5c17571f8d44b020fe83869e676ed7/compiler%2Frustc_query_system%2Fsrc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fich%2Fimpls_syntax.rs?ref=7f46d7313c5c17571f8d44b020fe83869e676ed7", "patch": "@@ -148,3 +148,5 @@ impl<'tcx> HashStable<StableHashingContext<'tcx>> for rustc_feature::Features {\n         });\n     }\n }\n+\n+impl<'ctx> rustc_type_ir::HashStableContext for StableHashingContext<'ctx> {}"}, {"sha": "da30344ef7ec090de63092ac9c795f3c1cf42c68", "filename": "compiler/rustc_type_ir/src/lib.rs", "status": "modified", "additions": 9, "deletions": 40, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/7f46d7313c5c17571f8d44b020fe83869e676ed7/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f46d7313c5c17571f8d44b020fe83869e676ed7/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs?ref=7f46d7313c5c17571f8d44b020fe83869e676ed7", "patch": "@@ -23,6 +23,9 @@ pub mod sty;\n pub use codec::*;\n pub use sty::*;\n \n+/// Needed so we can use #[derive(HashStable_Generic)]\n+pub trait HashStableContext {}\n+\n pub trait Interner {\n     type AdtDef: Clone + Debug + Hash + PartialEq + Eq + PartialOrd + Ord;\n     type SubstsRef: Clone + Debug + Hash + PartialEq + Eq + PartialOrd + Ord;\n@@ -295,6 +298,7 @@ rustc_index::newtype_index! {\n     /// is the outer fn.\n     ///\n     /// [dbi]: https://en.wikipedia.org/wiki/De_Bruijn_index\n+    #[derive(HashStable_Generic)]\n     pub struct DebruijnIndex {\n         DEBUG_FORMAT = \"DebruijnIndex({})\",\n         const INNERMOST = 0,\n@@ -366,7 +370,7 @@ impl DebruijnIndex {\n }\n \n #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]\n-#[derive(Encodable, Decodable)]\n+#[derive(Encodable, Decodable, HashStable_Generic)]\n pub enum IntTy {\n     Isize,\n     I8,\n@@ -413,7 +417,7 @@ impl IntTy {\n }\n \n #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Copy, Debug)]\n-#[derive(Encodable, Decodable)]\n+#[derive(Encodable, Decodable, HashStable_Generic)]\n pub enum UintTy {\n     Usize,\n     U8,\n@@ -460,7 +464,7 @@ impl UintTy {\n }\n \n #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]\n-#[derive(Encodable, Decodable)]\n+#[derive(Encodable, Decodable, HashStable_Generic)]\n pub enum FloatTy {\n     F32,\n     F64,\n@@ -597,7 +601,7 @@ impl UnifyKey for FloatVid {\n     }\n }\n \n-#[derive(Copy, Clone, PartialEq, Decodable, Encodable, Hash)]\n+#[derive(Copy, Clone, PartialEq, Decodable, Encodable, Hash, HashStable_Generic)]\n #[rustc_pass_by_value]\n pub enum Variance {\n     Covariant,     // T<A> <: T<B> iff A <: B -- e.g., function return type\n@@ -666,30 +670,6 @@ impl Variance {\n     }\n }\n \n-impl<CTX> HashStable<CTX> for DebruijnIndex {\n-    fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {\n-        self.as_u32().hash_stable(ctx, hasher);\n-    }\n-}\n-\n-impl<CTX> HashStable<CTX> for IntTy {\n-    fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {\n-        discriminant(self).hash_stable(ctx, hasher);\n-    }\n-}\n-\n-impl<CTX> HashStable<CTX> for UintTy {\n-    fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {\n-        discriminant(self).hash_stable(ctx, hasher);\n-    }\n-}\n-\n-impl<CTX> HashStable<CTX> for FloatTy {\n-    fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {\n-        discriminant(self).hash_stable(ctx, hasher);\n-    }\n-}\n-\n impl<CTX> HashStable<CTX> for InferTy {\n     fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {\n         use InferTy::*;\n@@ -703,12 +683,6 @@ impl<CTX> HashStable<CTX> for InferTy {\n     }\n }\n \n-impl<CTX> HashStable<CTX> for Variance {\n-    fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {\n-        discriminant(self).hash_stable(ctx, hasher);\n-    }\n-}\n-\n impl fmt::Debug for IntVarValue {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match *self {\n@@ -811,6 +785,7 @@ rustc_index::newtype_index! {\n     /// declared, but a type name in a non-zero universe is a placeholder\n     /// type -- an idealized representative of \"types in general\" that we\n     /// use for checking generic functions.\n+    #[derive(HashStable_Generic)]\n     pub struct UniverseIndex {\n         DEBUG_FORMAT = \"U{}\",\n     }\n@@ -850,9 +825,3 @@ impl UniverseIndex {\n         self.private < other.private\n     }\n }\n-\n-impl<CTX> HashStable<CTX> for UniverseIndex {\n-    fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {\n-        self.private.hash_stable(ctx, hasher);\n-    }\n-}"}, {"sha": "26e48d2d2147e9370433db2a081b56255e5e75ad", "filename": "compiler/rustc_type_ir/src/sty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7f46d7313c5c17571f8d44b020fe83869e676ed7/compiler%2Frustc_type_ir%2Fsrc%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f46d7313c5c17571f8d44b020fe83869e676ed7/compiler%2Frustc_type_ir%2Fsrc%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_type_ir%2Fsrc%2Fsty.rs?ref=7f46d7313c5c17571f8d44b020fe83869e676ed7", "patch": "@@ -3,14 +3,14 @@\n use std::cmp::{Eq, Ord, Ordering, PartialEq, PartialOrd};\n use std::{fmt, hash};\n \n-use crate::DebruijnIndex;\n use crate::FloatTy;\n use crate::IntTy;\n use crate::Interner;\n use crate::TyDecoder;\n use crate::TyEncoder;\n use crate::UintTy;\n use crate::UniverseIndex;\n+use crate::{DebruijnIndex, HashStableContext};\n \n use self::RegionKind::*;\n use self::TyKind::*;\n@@ -774,7 +774,7 @@ where\n \n // This is not a derived impl because a derive would require `I: HashStable`\n #[allow(rustc::usage_of_ty_tykind)]\n-impl<CTX, I: Interner> HashStable<CTX> for TyKind<I>\n+impl<CTX: HashStableContext, I: Interner> HashStable<CTX> for TyKind<I>\n where\n     I::AdtDef: HashStable<CTX>,\n     I::DefId: HashStable<CTX>,\n@@ -1286,7 +1286,7 @@ where\n }\n \n // This is not a derived impl because a derive would require `I: HashStable`\n-impl<CTX, I: Interner> HashStable<CTX> for RegionKind<I>\n+impl<CTX: HashStableContext, I: Interner> HashStable<CTX> for RegionKind<I>\n where\n     I::EarlyBoundRegion: HashStable<CTX>,\n     I::BoundRegion: HashStable<CTX>,"}]}