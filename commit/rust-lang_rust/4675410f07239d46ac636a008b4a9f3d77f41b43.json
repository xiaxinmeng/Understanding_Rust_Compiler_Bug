{"sha": "4675410f07239d46ac636a008b4a9f3d77f41b43", "node_id": "C_kwDOAAsO6NoAKDQ2NzU0MTBmMDcyMzlkNDZhYzYzNmEwMDhiNGE5ZjNkNzdmNDFiNDM", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-10-07T13:05:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-07T13:05:18Z"}, "message": "Merge #10477 #10482\n\n10477: parser: fix parsing of macro call inside generic args r=Veykril a=cynecx\n\n\n\n10482: fix: fix `inline_call` trying to use an uncached syntax node in Semantics r=Veykril a=Veykril\n\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/10475\r\nbors r+\n\nCo-authored-by: cynecx <me@cynecx.net>\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "5ba55ee71fcd99a825d48300d1925eaf222db4bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ba55ee71fcd99a825d48300d1925eaf222db4bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4675410f07239d46ac636a008b4a9f3d77f41b43", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhXvCOCRBK7hj4Ov3rIwAA8u4IAJ4kLFuunfi1FGn3PXLNjwCH\n1nw27zachegm0WKfMQDFhiSO9LpKB511x4UPyWBUqu4cN/qDbw09+kfmKptXjfwL\nEWJezBjVMLzHpV1kZ5oNQrjjpkz6uGTV2+9VmvfHA1VdpZO8q/gp32f5zNU2Lx6R\np4eJptqAwL85I6we7YevL6byJTS9IkW0iizxOnXGYFT4Goe9rT3tXaJg42WHA9xD\nL/xB8u43IX9XMBPIVJGfmX2KkuaZnZnt5m9q+ixd8TPHMz1CGmdx8xySAH3BYE21\n8Te6UQg7jqsKlUSlT+2lWoH9ZRvfTW64DSVwH0/CYWRak/EJRca3fo9u6DknRgY=\n=H7Oi\n-----END PGP SIGNATURE-----\n", "payload": "tree 5ba55ee71fcd99a825d48300d1925eaf222db4bf\nparent 5191fb755b7929f5393c3d488f25e5d2eafbc8a1\nparent 07cd19dcefff8c4d1dfcc8c45d7794028166a781\nparent 12465a8a3cc74d0d103aedda08d281a07354521e\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1633611918 +0000\ncommitter GitHub <noreply@github.com> 1633611918 +0000\n\nMerge #10477 #10482\n\n10477: parser: fix parsing of macro call inside generic args r=Veykril a=cynecx\n\n\n\n10482: fix: fix `inline_call` trying to use an uncached syntax node in Semantics r=Veykril a=Veykril\n\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/10475\r\nbors r+\n\nCo-authored-by: cynecx <me@cynecx.net>\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4675410f07239d46ac636a008b4a9f3d77f41b43", "html_url": "https://github.com/rust-lang/rust/commit/4675410f07239d46ac636a008b4a9f3d77f41b43", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4675410f07239d46ac636a008b4a9f3d77f41b43/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5191fb755b7929f5393c3d488f25e5d2eafbc8a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/5191fb755b7929f5393c3d488f25e5d2eafbc8a1", "html_url": "https://github.com/rust-lang/rust/commit/5191fb755b7929f5393c3d488f25e5d2eafbc8a1"}, {"sha": "07cd19dcefff8c4d1dfcc8c45d7794028166a781", "url": "https://api.github.com/repos/rust-lang/rust/commits/07cd19dcefff8c4d1dfcc8c45d7794028166a781", "html_url": "https://github.com/rust-lang/rust/commit/07cd19dcefff8c4d1dfcc8c45d7794028166a781"}, {"sha": "12465a8a3cc74d0d103aedda08d281a07354521e", "url": "https://api.github.com/repos/rust-lang/rust/commits/12465a8a3cc74d0d103aedda08d281a07354521e", "html_url": "https://github.com/rust-lang/rust/commit/12465a8a3cc74d0d103aedda08d281a07354521e"}], "stats": {"total": 73, "additions": 65, "deletions": 8}, "files": [{"sha": "2e8342e4e01676b53240ca98f6c586063394578b", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/4675410f07239d46ac636a008b4a9f3d77f41b43/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4675410f07239d46ac636a008b4a9f3d77f41b43/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=4675410f07239d46ac636a008b4a9f3d77f41b43", "patch": "@@ -25,9 +25,9 @@ use crate::{\n     db::HirDatabase,\n     semantics::source_to_def::{ChildContainer, SourceToDefCache, SourceToDefCtx},\n     source_analyzer::{resolve_hir_path, SourceAnalyzer},\n-    Access, AssocItem, Callable, ConstParam, Crate, Field, Function, HirFileId, Impl, InFile,\n-    Label, LifetimeParam, Local, MacroDef, Module, ModuleDef, Name, Path, ScopeDef, Trait, Type,\n-    TypeAlias, TypeParam, VariantDef,\n+    Access, AssocItem, Callable, ConstParam, Crate, Field, Function, HasSource, HirFileId, Impl,\n+    InFile, Label, LifetimeParam, Local, MacroDef, Module, ModuleDef, Name, Path, ScopeDef, Trait,\n+    Type, TypeAlias, TypeParam, VariantDef,\n };\n \n #[derive(Debug, Clone, PartialEq, Eq)]\n@@ -190,6 +190,14 @@ impl<'db, DB: HirDatabase> Semantics<'db, DB> {\n         self.imp.descend_node_into_attributes(node)\n     }\n \n+    /// Search for a definition's source and cache its syntax tree\n+    pub fn source<Def: HasSource>(&self, def: Def) -> Option<InFile<Def::Ast>>\n+    where\n+        Def::Ast: AstNode,\n+    {\n+        self.imp.source(def)\n+    }\n+\n     pub fn hir_file_for(&self, syntax_node: &SyntaxNode) -> HirFileId {\n         self.imp.find_file(syntax_node.clone()).file_id\n     }\n@@ -845,6 +853,15 @@ impl<'db> SemanticsImpl<'db> {\n         SemanticsScope { db: self.db, file_id, resolver }\n     }\n \n+    fn source<Def: HasSource>(&self, def: Def) -> Option<InFile<Def::Ast>>\n+    where\n+        Def::Ast: AstNode,\n+    {\n+        let res = def.source(self.db)?;\n+        self.cache(find_root(res.value.syntax()), res.file_id);\n+        Some(res)\n+    }\n+\n     fn analyze(&self, node: &SyntaxNode) -> SourceAnalyzer {\n         self.analyze_impl(node, None)\n     }"}, {"sha": "d070eefd9c6db9f1e6196b09f8c189140a598f2f", "filename": "crates/ide_assists/src/handlers/inline_call.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4675410f07239d46ac636a008b4a9f3d77f41b43/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finline_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4675410f07239d46ac636a008b4a9f3d77f41b43/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finline_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finline_call.rs?ref=4675410f07239d46ac636a008b4a9f3d77f41b43", "patch": "@@ -1,6 +1,6 @@\n use ast::make;\n use either::Either;\n-use hir::{db::HirDatabase, HasSource, PathResolution, Semantics, TypeInfo};\n+use hir::{db::HirDatabase, PathResolution, Semantics, TypeInfo};\n use ide_db::{\n     base_db::{FileId, FileRange},\n     defs::Definition,\n@@ -194,7 +194,7 @@ pub(crate) fn inline_call(acc: &mut Assists, ctx: &AssistContext) -> Option<()>\n         }\n     };\n \n-    let fn_source = function.source(ctx.db())?;\n+    let fn_source = ctx.sema.source(function)?;\n     let fn_body = fn_source.value.body()?;\n     let param_list = fn_source.value.param_list()?;\n "}, {"sha": "1062cc395378582c1ec20847c94beae8ac8443a5", "filename": "crates/ide_assists/src/handlers/replace_let_with_if_let.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4675410f07239d46ac636a008b4a9f3d77f41b43/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_let_with_if_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4675410f07239d46ac636a008b4a9f3d77f41b43/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_let_with_if_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_let_with_if_let.rs?ref=4675410f07239d46ac636a008b4a9f3d77f41b43", "patch": "@@ -38,7 +38,7 @@ use crate::{AssistContext, AssistId, AssistKind, Assists};\n // ```\n pub(crate) fn replace_let_with_if_let(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     let let_kw = ctx.find_token_syntax_at_offset(T![let])?;\n-    let let_stmt = let_kw.ancestors().find_map(ast::LetStmt::cast)?;\n+    let let_stmt = let_kw.parent().and_then(ast::LetStmt::cast)?;\n     let init = let_stmt.initializer()?;\n     let original_pat = let_stmt.pat()?;\n "}, {"sha": "31accd035f7ef391703fb6c448adb492caab4eb5", "filename": "crates/ide_completion/src/completions/trait_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4675410f07239d46ac636a008b4a9f3d77f41b43/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ftrait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4675410f07239d46ac636a008b4a9f3d77f41b43/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ftrait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ftrait_impl.rs?ref=4675410f07239d46ac636a008b4a9f3d77f41b43", "patch": "@@ -185,7 +185,7 @@ fn get_transformed_assoc_item(\n     let assoc_item = assoc_item.clone_for_update();\n     let trait_ = impl_def.trait_(ctx.db)?;\n     let source_scope = &ctx.sema.scope_for_def(trait_);\n-    let target_scope = &ctx.sema.scope(impl_def.source(ctx.db)?.syntax().value);\n+    let target_scope = &ctx.sema.scope(ctx.sema.source(impl_def)?.syntax().value);\n     let transform = PathTransform::trait_impl(\n         target_scope,\n         source_scope,"}, {"sha": "1148c6c35c59211c1e92bd52c5d0bdb4e7f56ece", "filename": "crates/parser/src/grammar/generic_args.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4675410f07239d46ac636a008b4a9f3d77f41b43/crates%2Fparser%2Fsrc%2Fgrammar%2Fgeneric_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4675410f07239d46ac636a008b4a9f3d77f41b43/crates%2Fparser%2Fsrc%2Fgrammar%2Fgeneric_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fgeneric_args.rs?ref=4675410f07239d46ac636a008b4a9f3d77f41b43", "patch": "@@ -32,7 +32,10 @@ fn generic_arg(p: &mut Parser) {\n         k if k.is_literal() => const_arg(p),\n         // test associated_type_bounds\n         // fn print_all<T: Iterator<Item, Item::Item, Item::<true>, Item: Display, Item<'a> = Item>>(printables: T) {}\n-        IDENT if [T![<], T![=], T![:]].contains(&p.nth(1)) => {\n+\n+        // test macro_inside_generic_arg\n+        // type A = Foo<syn::Token![_]>;\n+        IDENT if [T![<], T![=], T![:]].contains(&p.nth(1)) && !p.nth_at(1, T![::]) => {\n             let m = p.start();\n             name_ref(p);\n             opt_generic_arg_list(p, false);"}, {"sha": "37306ba6ac07cfacba8dc33ede5058bf4a47d5ad", "filename": "crates/syntax/test_data/parser/inline/ok/0194_macro_inside_generic_arg.rast", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/4675410f07239d46ac636a008b4a9f3d77f41b43/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0194_macro_inside_generic_arg.rast", "raw_url": "https://github.com/rust-lang/rust/raw/4675410f07239d46ac636a008b4a9f3d77f41b43/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0194_macro_inside_generic_arg.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0194_macro_inside_generic_arg.rast?ref=4675410f07239d46ac636a008b4a9f3d77f41b43", "patch": "@@ -0,0 +1,36 @@\n+SOURCE_FILE@0..30\n+  TYPE_ALIAS@0..29\n+    TYPE_KW@0..4 \"type\"\n+    WHITESPACE@4..5 \" \"\n+    NAME@5..6\n+      IDENT@5..6 \"A\"\n+    WHITESPACE@6..7 \" \"\n+    EQ@7..8 \"=\"\n+    WHITESPACE@8..9 \" \"\n+    PATH_TYPE@9..28\n+      PATH@9..28\n+        PATH_SEGMENT@9..28\n+          NAME_REF@9..12\n+            IDENT@9..12 \"Foo\"\n+          GENERIC_ARG_LIST@12..28\n+            L_ANGLE@12..13 \"<\"\n+            TYPE_ARG@13..27\n+              MACRO_TYPE@13..27\n+                MACRO_CALL@13..27\n+                  PATH@13..23\n+                    PATH@13..16\n+                      PATH_SEGMENT@13..16\n+                        NAME_REF@13..16\n+                          IDENT@13..16 \"syn\"\n+                    COLON2@16..18 \"::\"\n+                    PATH_SEGMENT@18..23\n+                      NAME_REF@18..23\n+                        IDENT@18..23 \"Token\"\n+                  BANG@23..24 \"!\"\n+                  TOKEN_TREE@24..27\n+                    L_BRACK@24..25 \"[\"\n+                    UNDERSCORE@25..26 \"_\"\n+                    R_BRACK@26..27 \"]\"\n+            R_ANGLE@27..28 \">\"\n+    SEMICOLON@28..29 \";\"\n+  WHITESPACE@29..30 \"\\n\""}, {"sha": "8d43a53d97f709cff18ddff90cd05809255644b8", "filename": "crates/syntax/test_data/parser/inline/ok/0194_macro_inside_generic_arg.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4675410f07239d46ac636a008b4a9f3d77f41b43/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0194_macro_inside_generic_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4675410f07239d46ac636a008b4a9f3d77f41b43/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0194_macro_inside_generic_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0194_macro_inside_generic_arg.rs?ref=4675410f07239d46ac636a008b4a9f3d77f41b43", "patch": "@@ -0,0 +1 @@\n+type A = Foo<syn::Token![_]>;"}]}