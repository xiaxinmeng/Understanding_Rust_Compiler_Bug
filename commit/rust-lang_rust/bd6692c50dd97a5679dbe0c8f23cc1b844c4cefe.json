{"sha": "bd6692c50dd97a5679dbe0c8f23cc1b844c4cefe", "node_id": "C_kwDOAAsO6NoAKGJkNjY5MmM1MGRkOTdhNTY3OWRiZTBjOGYyM2NjMWI4NDRjNGNlZmU", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-12-28T02:59:27Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-12-28T02:59:27Z"}, "message": "Make `search_index` functions private where possible\n\nNow the only two crate-public items are `build_index` and\n`get_index_search_type` (because for some reason the latter is also used\nin `formats::cache`).", "tree": {"sha": "f4bd341472f43c0ceb861883b40cb343da08724c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4bd341472f43c0ceb861883b40cb343da08724c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd6692c50dd97a5679dbe0c8f23cc1b844c4cefe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd6692c50dd97a5679dbe0c8f23cc1b844c4cefe", "html_url": "https://github.com/rust-lang/rust/commit/bd6692c50dd97a5679dbe0c8f23cc1b844c4cefe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd6692c50dd97a5679dbe0c8f23cc1b844c4cefe/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b801dcdd303e3e2a92e255d8cfb9427800403e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b801dcdd303e3e2a92e255d8cfb9427800403e5", "html_url": "https://github.com/rust-lang/rust/commit/2b801dcdd303e3e2a92e255d8cfb9427800403e5"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "e03f96aeb471453b0901bbc0c4c2a770ed140498", "filename": "src/librustdoc/html/render/search_index.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bd6692c50dd97a5679dbe0c8f23cc1b844c4cefe/src%2Flibrustdoc%2Fhtml%2Frender%2Fsearch_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd6692c50dd97a5679dbe0c8f23cc1b844c4cefe/src%2Flibrustdoc%2Fhtml%2Frender%2Fsearch_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fsearch_index.rs?ref=bd6692c50dd97a5679dbe0c8f23cc1b844c4cefe", "patch": "@@ -237,7 +237,7 @@ fn get_index_type_name(clean_type: &clean::Type, accept_generic: bool) -> Option\n ///\n /// Important note: It goes through generics recursively. So if you have\n /// `T: Option<Result<(), ()>>`, it'll go into `Option` and then into `Result`.\n-crate fn get_real_types<'tcx>(\n+fn get_real_types<'tcx>(\n     generics: &Generics,\n     arg: &Type,\n     tcx: TyCtxt<'tcx>,\n@@ -377,7 +377,7 @@ crate fn get_real_types<'tcx>(\n ///\n /// i.e. `fn foo<A: Display, B: Option<A>>(x: u32, y: B)` will return\n /// `[u32, Display, Option]`.\n-crate fn get_all_types<'tcx>(\n+fn get_all_types<'tcx>(\n     generics: &Generics,\n     decl: &FnDecl,\n     tcx: TyCtxt<'tcx>,"}]}