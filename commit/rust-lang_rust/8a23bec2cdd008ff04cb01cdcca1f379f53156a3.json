{"sha": "8a23bec2cdd008ff04cb01cdcca1f379f53156a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhMjNiZWMyY2RkMDA4ZmYwNGNiMDFjZGNjYTFmMzc5ZjUzMTU2YTM=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-03-20T22:01:47Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-03-30T10:39:14Z"}, "message": "Style fixes", "tree": {"sha": "c1983eda59834d7abb76ef851d4c1995f9176785", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c1983eda59834d7abb76ef851d4c1995f9176785"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a23bec2cdd008ff04cb01cdcca1f379f53156a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a23bec2cdd008ff04cb01cdcca1f379f53156a3", "html_url": "https://github.com/rust-lang/rust/commit/8a23bec2cdd008ff04cb01cdcca1f379f53156a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a23bec2cdd008ff04cb01cdcca1f379f53156a3/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "332799d914bdd35740c25c27f5bac7e4b3cba6c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/332799d914bdd35740c25c27f5bac7e4b3cba6c7", "html_url": "https://github.com/rust-lang/rust/commit/332799d914bdd35740c25c27f5bac7e4b3cba6c7"}], "stats": {"total": 51, "additions": 31, "deletions": 20}, "files": [{"sha": "a64dccd58c8a483635074c1f67d209f06b67aef9", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 24, "deletions": 15, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/8a23bec2cdd008ff04cb01cdcca1f379f53156a3/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a23bec2cdd008ff04cb01cdcca1f379f53156a3/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=8a23bec2cdd008ff04cb01cdcca1f379f53156a3", "patch": "@@ -413,20 +413,27 @@ fn loop_turn(\n                 if !removed {\n                     log::error!(\"unexpected response: {:?}\", resp)\n                 }\n-                if Some(&resp.id) == loop_state.configuration_request_id.as_ref() {\n+\n+                if Some(resp.id) == loop_state.configuration_request_id {\n                     loop_state.configuration_request_id.take();\n-                    // TODO kb unwrap-unwrap-unwrap\n-                    let new_config =\n-                        serde_json::from_value::<Vec<ServerConfig>>(resp.result.unwrap())\n-                            .unwrap()\n-                            .first()\n-                            .unwrap()\n-                            .to_owned();\n-                    world_state.update_configuration(\n-                        new_config.lru_capacity,\n-                        get_options(&new_config, text_document_caps),\n-                        get_feature_flags(&new_config, connection),\n-                    );\n+                    if let Some(err) = resp.error {\n+                        log::error!(\"failed fetch the server settings: {:?}\", err)\n+                    } else if resp.result.is_none() {\n+                        log::error!(\"received empty server settings response from the client\")\n+                    } else {\n+                        let new_config =\n+                            serde_json::from_value::<Vec<ServerConfig>>(resp.result.unwrap())?\n+                                .first()\n+                                .expect(\n+                                    \"The client is expected to always send a non-empty config data\",\n+                                )\n+                                .to_owned();\n+                        world_state.update_configuration(\n+                            new_config.lru_capacity,\n+                            get_options(&new_config, text_document_caps),\n+                            get_feature_flags(&new_config, connection),\n+                        );\n+                    }\n                 }\n             }\n         },\n@@ -657,13 +664,15 @@ fn on_notification(\n         Err(not) => not,\n     };\n     let not = match notification_cast::<req::DidChangeConfiguration>(not) {\n-        Ok(_params) => {\n+        Ok(_) => {\n+            // As stated in https://github.com/microsoft/language-server-protocol/issues/676,\n+            // this notification's parameters should be ignored and the actual config queried separately.\n             let request_id = loop_state.next_request_id();\n             let request = request_new::<req::WorkspaceConfiguration>(\n                 request_id.clone(),\n                 ConfigurationParams::default(),\n             );\n-            msg_sender.send(request.into()).unwrap();\n+            msg_sender.send(request.into())?;\n             loop_state.configuration_request_id.replace(request_id);\n \n             return Ok(());"}, {"sha": "34965e2fbcfec72bb6729ffe567a2f9a77b95dfd", "filename": "editors/code/src/client.ts", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a23bec2cdd008ff04cb01cdcca1f379f53156a3/editors%2Fcode%2Fsrc%2Fclient.ts", "raw_url": "https://github.com/rust-lang/rust/raw/8a23bec2cdd008ff04cb01cdcca1f379f53156a3/editors%2Fcode%2Fsrc%2Fclient.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fclient.ts?ref=8a23bec2cdd008ff04cb01cdcca1f379f53156a3", "patch": "@@ -5,7 +5,7 @@ import { Config } from './config';\n import { CallHierarchyFeature } from 'vscode-languageclient/lib/callHierarchy.proposed';\n import { SemanticTokensFeature, DocumentSemanticsTokensSignature } from 'vscode-languageclient/lib/semanticTokens.proposed';\n \n-export function configToOptions(config: Config): object {\n+export function configToServerOptions(config: Config): object {\n     return {\n         publishDecorations: !config.highlightingSemanticTokens,\n         lruCapacity: config.lruCapacity,\n@@ -50,7 +50,7 @@ export async function createClient(config: Config, serverPath: string): Promise<\n \n     const clientOptions: lc.LanguageClientOptions = {\n         documentSelector: [{ scheme: 'file', language: 'rust' }],\n-        initializationOptions: configToOptions(config),\n+        initializationOptions: configToServerOptions(config),\n         traceOutputChannel,\n         middleware: {\n             // Workaround for https://github.com/microsoft/vscode-languageserver-node/issues/576"}, {"sha": "d2f49cd23d3dd75db0033a98527f0186d5be65d5", "filename": "editors/code/src/ctx.ts", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a23bec2cdd008ff04cb01cdcca1f379f53156a3/editors%2Fcode%2Fsrc%2Fctx.ts", "raw_url": "https://github.com/rust-lang/rust/raw/8a23bec2cdd008ff04cb01cdcca1f379f53156a3/editors%2Fcode%2Fsrc%2Fctx.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fctx.ts?ref=8a23bec2cdd008ff04cb01cdcca1f379f53156a3", "patch": "@@ -2,7 +2,7 @@ import * as vscode from 'vscode';\n import * as lc from 'vscode-languageclient';\n \n import { Config } from './config';\n-import { createClient, configToOptions } from './client';\n+import { createClient, configToServerOptions } from './client';\n import { isRustEditor, RustEditor } from './util';\n \n export class Ctx {\n@@ -20,7 +20,7 @@ export class Ctx {\n         const res = new Ctx(config, extCtx, client, serverPath);\n         res.pushCleanup(client.start());\n         await client.onReady();\n-        client.onRequest('workspace/configuration', _ => [configToOptions(config)]);\n+        client.onRequest('workspace/configuration', _ => [configToServerOptions(config)]);\n         return res;\n     }\n "}, {"sha": "98663e0e32639c28eb0544e4231f5bb8f74d1174", "filename": "editors/code/src/inlay_hints.ts", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a23bec2cdd008ff04cb01cdcca1f379f53156a3/editors%2Fcode%2Fsrc%2Finlay_hints.ts", "raw_url": "https://github.com/rust-lang/rust/raw/8a23bec2cdd008ff04cb01cdcca1f379f53156a3/editors%2Fcode%2Fsrc%2Finlay_hints.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Finlay_hints.ts?ref=8a23bec2cdd008ff04cb01cdcca1f379f53156a3", "patch": "@@ -18,6 +18,8 @@ export function activateInlayHints(ctx: Ctx) {\n                 return this.dispose();\n             }\n             if (!this.updater) this.updater = new HintsUpdater(ctx);\n+\n+            this.updater.syncCacheAndRenderHints();\n         },\n         dispose() {\n             this.updater?.dispose();\n@@ -124,7 +126,7 @@ class HintsUpdater implements Disposable {\n         this.syncCacheAndRenderHints();\n     }\n \n-    private syncCacheAndRenderHints() {\n+    public syncCacheAndRenderHints() {\n         // FIXME: make inlayHints request pass an array of files?\n         this.sourceFiles.forEach((file, uri) => this.fetchHints(file).then(hints => {\n             if (!hints) return;"}]}