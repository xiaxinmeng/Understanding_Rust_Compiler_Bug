{"sha": "f1ac9c8f558832f260bdd8b998fb1d7fbbcb6db5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxYWM5YzhmNTU4ODMyZjI2MGJkZDhiOTk4ZmIxZDdmYmJjYjZkYjU=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-04-03T15:13:51Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-04-03T15:13:51Z"}, "message": "Merge #1098\n\n1098: added some docs to public functions r=matklad a=pasa\n\nsome docs for #961\n\nCo-authored-by: Sergey Parilin <sergey.parilin@fxdd.com>", "tree": {"sha": "8fe85c2f1c8c4545b1895a3aa0fd4b0e2356e92d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8fe85c2f1c8c4545b1895a3aa0fd4b0e2356e92d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f1ac9c8f558832f260bdd8b998fb1d7fbbcb6db5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f1ac9c8f558832f260bdd8b998fb1d7fbbcb6db5", "html_url": "https://github.com/rust-lang/rust/commit/f1ac9c8f558832f260bdd8b998fb1d7fbbcb6db5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f1ac9c8f558832f260bdd8b998fb1d7fbbcb6db5/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "c6c88070c4f25cd3710f03b7461cb277de8d3cc5", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6c88070c4f25cd3710f03b7461cb277de8d3cc5", "html_url": "https://github.com/rust-lang/rust/commit/c6c88070c4f25cd3710f03b7461cb277de8d3cc5"}, {"sha": "cc2212f3cbf72daf10a094e2293334f196f8c75c", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc2212f3cbf72daf10a094e2293334f196f8c75c", "html_url": "https://github.com/rust-lang/rust/commit/cc2212f3cbf72daf10a094e2293334f196f8c75c"}], "stats": {"total": 47, "additions": 46, "deletions": 1}, "files": [{"sha": "1cc8e361d1fb0dd6133489e6f978eba480cb278e", "filename": "crates/ra_prof/src/lib.rs", "status": "modified", "additions": 46, "deletions": 1, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/f1ac9c8f558832f260bdd8b998fb1d7fbbcb6db5/crates%2Fra_prof%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ac9c8f558832f260bdd8b998fb1d7fbbcb6db5/crates%2Fra_prof%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_prof%2Fsrc%2Flib.rs?ref=f1ac9c8f558832f260bdd8b998fb1d7fbbcb6db5", "patch": "@@ -9,13 +9,58 @@ use std::iter::FromIterator;\n use std::sync::RwLock;\n use lazy_static::lazy_static;\n \n+/// Set profiling filter. It specifies descriptions allowed to profile.\n+/// This is helpful when call stack has too many nested profiling scopes.\n+/// Additionally filter can specify maximum depth of profiling scopes nesting.\n+///\n+/// #Example\n+/// ```\n+/// use ra_prof::set_filter;\n+/// use ra_prof::Filter;\n+/// let max_depth = 2;\n+/// let allowed = vec![\"profile1\".to_string(), \"profile2\".to_string()];\n+/// let f = Filter::new( max_depth, allowed );\n+/// set_filter(f);\n+/// ```\n+///\n pub fn set_filter(f: Filter) {\n     let set = HashSet::from_iter(f.allowed.iter().cloned());\n     let mut old = FILTER.write().unwrap();\n     let filter_data = FilterData { depth: f.depth, allowed: set, version: old.version + 1 };\n     *old = filter_data;\n }\n \n+/// This function starts a profiling scope in the current execution stack with a given description.\n+/// It returns a Profile structure and measure elapsed time between this method invocation and Profile structure drop.\n+/// It supports nested profiling scopes in case when this function invoked multiple times at the execution stack. In this case the profiling information will be nested at the output.\n+/// Profiling information is being printed in the stderr.\n+///\n+/// #Example\n+/// ```\n+/// use ra_prof::profile;\n+/// use ra_prof::set_filter;\n+/// use ra_prof::Filter;\n+///\n+/// let allowed = vec![\"profile1\".to_string(), \"profile2\".to_string()];\n+/// let f = Filter::new(2, allowed);\n+/// set_filter(f);\n+/// profiling_function1();\n+///\n+/// fn profiling_function1() {\n+///     let _p = profile(\"profile1\");\n+///     profiling_function2();\n+/// }\n+///\n+/// fn profiling_function2() {\n+///     let _p = profile(\"profile2\");\n+/// }\n+/// ```\n+/// This will print in the stderr the following:\n+/// ```text\n+///  0ms - profile\n+///      0ms - profile2\n+/// ```\n+///\n pub fn profile(desc: &str) -> Profiler {\n     PROFILE_STACK.with(|stack| {\n         let mut stack = stack.borrow_mut();\n@@ -137,7 +182,7 @@ mod tests {\n     #[test]\n     fn test_basic_profile() {\n         let s = vec![\"profile1\".to_string(), \"profile2\".to_string()];\n-        let f = Filter { depth: 2, allowed: s };\n+        let f = Filter::new(2, s);\n         set_filter(f);\n         profiling_function1();\n     }"}]}