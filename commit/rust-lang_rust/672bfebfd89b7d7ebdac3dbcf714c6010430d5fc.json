{"sha": "672bfebfd89b7d7ebdac3dbcf714c6010430d5fc", "node_id": "C_kwDOAAsO6NoAKDY3MmJmZWJmZDg5YjdkN2ViZGFjM2RiY2Y3MTRjNjAxMDQzMGQ1ZmM", "commit": {"author": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2022-02-08T05:24:21Z"}, "committer": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2022-02-08T23:39:55Z"}, "message": "Remove overflow panic from divrem\n\nIncludes some remarks in intrinsics.rs,\ngenerated while auditing the interface for remaining UB.", "tree": {"sha": "4d0f049698ab173039a2586ed87ae58c30485b43", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d0f049698ab173039a2586ed87ae58c30485b43"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/672bfebfd89b7d7ebdac3dbcf714c6010430d5fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/672bfebfd89b7d7ebdac3dbcf714c6010430d5fc", "html_url": "https://github.com/rust-lang/rust/commit/672bfebfd89b7d7ebdac3dbcf714c6010430d5fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/672bfebfd89b7d7ebdac3dbcf714c6010430d5fc/comments", "author": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4910274686bcd144228a04d8d4d5dece4c7f5e3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4910274686bcd144228a04d8d4d5dece4c7f5e3d", "html_url": "https://github.com/rust-lang/rust/commit/4910274686bcd144228a04d8d4d5dece4c7f5e3d"}], "stats": {"total": 68, "additions": 43, "deletions": 25}, "files": [{"sha": "b5d0df7548fe95cc8d9d1aff3f49cbb7d47ffabf", "filename": "crates/core_simd/src/intrinsics.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/672bfebfd89b7d7ebdac3dbcf714c6010430d5fc/crates%2Fcore_simd%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672bfebfd89b7d7ebdac3dbcf714c6010430d5fc/crates%2Fcore_simd%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fintrinsics.rs?ref=672bfebfd89b7d7ebdac3dbcf714c6010430d5fc", "patch": "@@ -17,9 +17,15 @@ extern \"platform-intrinsic\" {\n     pub(crate) fn simd_mul<T>(x: T, y: T) -> T;\n \n     /// udiv/sdiv/fdiv\n+    /// ints and uints: {s,u}div incur UB if division by zero occurs.\n+    /// ints: sdiv is UB for int::MIN / -1.\n+    /// floats: fdiv is never UB, but may create NaNs or infinities.\n     pub(crate) fn simd_div<T>(x: T, y: T) -> T;\n \n     /// urem/srem/frem\n+    /// ints and uints: {s,u}rem incur UB if division by zero occurs.\n+    /// ints: srem is UB for int::MIN / -1.\n+    /// floats: frem is equivalent to libm::fmod in the \"default\" floating point environment, sans errno.\n     pub(crate) fn simd_rem<T>(x: T, y: T) -> T;\n \n     /// shl\n@@ -45,6 +51,9 @@ extern \"platform-intrinsic\" {\n     pub(crate) fn simd_as<T, U>(x: T) -> U;\n \n     /// neg/fneg\n+    /// ints: ultimately becomes a call to cg_ssa's BuilderMethods::neg. cg_llvm equates this to `simd_sub(Simd::splat(0), x)`.\n+    /// floats: LLVM's fneg, which changes the floating point sign bit. Some arches have instructions for it.\n+    /// Rust panics for Neg::neg(int::MIN) due to overflow, but it is not UB in LLVM without `nsw`.\n     pub(crate) fn simd_neg<T>(x: T) -> T;\n \n     /// fabs"}, {"sha": "1b35b3e717a3259591b84c1d15bd1fdff24a40d8", "filename": "crates/core_simd/src/ops.rs", "status": "modified", "additions": 24, "deletions": 15, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/672bfebfd89b7d7ebdac3dbcf714c6010430d5fc/crates%2Fcore_simd%2Fsrc%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672bfebfd89b7d7ebdac3dbcf714c6010430d5fc/crates%2Fcore_simd%2Fsrc%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fops.rs?ref=672bfebfd89b7d7ebdac3dbcf714c6010430d5fc", "patch": "@@ -57,29 +57,40 @@ macro_rules! wrap_bitshift {\n     };\n }\n \n-// Division by zero is poison, according to LLVM.\n-// So is dividing the MIN value of a signed integer by -1,\n-// since that would return MAX + 1.\n-// FIXME: Rust allows <SInt>::MIN / -1,\n-// so we should probably figure out how to make that safe.\n+/// SAFETY: This macro must only be used to impl Div or Rem and given the matching intrinsic.\n+/// It guards against LLVM's UB conditions for integer div or rem using masks and selects,\n+/// thus guaranteeing a Rust value returns instead.\n+///\n+/// |                  | LLVM | Rust\n+/// | :--------------: | :--- | :----------\n+/// | N {/,%} 0        | UB   | panic!()\n+/// | <$int>::MIN / -1 | UB   | <$int>::MIN\n+/// | <$int>::MIN % -1 | UB   | 0\n+///\n macro_rules! int_divrem_guard {\n     (   $lhs:ident,\n         $rhs:ident,\n         {   const PANIC_ZERO: &'static str = $zero:literal;\n-            const PANIC_OVERFLOW: &'static str = $overflow:literal;\n             $simd_call:ident\n         },\n         $int:ident ) => {\n         if $rhs.lanes_eq(Simd::splat(0)).any() {\n             panic!($zero);\n-        } else if <$int>::MIN != 0\n-            && ($lhs.lanes_eq(Simd::splat(<$int>::MIN))\n-                // type inference can break here, so cut an SInt to size\n-                & $rhs.lanes_eq(Simd::splat(-1i64 as _))).any()\n-        {\n-            panic!($overflow);\n         } else {\n-            unsafe { $crate::simd::intrinsics::$simd_call($lhs, $rhs) }\n+            // Prevent otherwise-UB overflow on the MIN / -1 case.\n+            let rhs = if <$int>::MIN != 0 {\n+                // This should, at worst, optimize to a few branchless logical ops\n+                // Ideally, this entire conditional should evaporate\n+                // Fire LLVM and implement those manually if it doesn't get the hint\n+                ($lhs.lanes_eq(Simd::splat(<$int>::MIN))\n+                // type inference can break here, so cut an SInt to size\n+                & $rhs.lanes_eq(Simd::splat(-1i64 as _)))\n+                .select(Simd::splat(1), $rhs)\n+            } else {\n+                // Nice base case to make it easy to const-fold away the other branch.\n+                $rhs\n+            };\n+            unsafe { $crate::simd::intrinsics::$simd_call($lhs, rhs) }\n         }\n     };\n }\n@@ -183,15 +194,13 @@ for_base_ops! {\n     impl Div::div {\n         int_divrem_guard {\n             const PANIC_ZERO: &'static str = \"attempt to divide by zero\";\n-            const PANIC_OVERFLOW: &'static str = \"attempt to divide with overflow\";\n             simd_div\n         }\n     }\n \n     impl Rem::rem {\n         int_divrem_guard {\n             const PANIC_ZERO: &'static str = \"attempt to calculate the remainder with a divisor of zero\";\n-            const PANIC_OVERFLOW: &'static str = \"attempt to calculate the remainder with overflow\";\n             simd_rem\n         }\n     }"}, {"sha": "9ba66fb8dd97f372df28906a2fc14edb8ce140c2", "filename": "crates/core_simd/tests/ops_macros.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/672bfebfd89b7d7ebdac3dbcf714c6010430d5fc/crates%2Fcore_simd%2Ftests%2Fops_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672bfebfd89b7d7ebdac3dbcf714c6010430d5fc/crates%2Fcore_simd%2Ftests%2Fops_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fops_macros.rs?ref=672bfebfd89b7d7ebdac3dbcf714c6010430d5fc", "patch": "@@ -210,15 +210,21 @@ macro_rules! impl_signed_tests {\n                     )\n                 }\n \n-            }\n+                fn div_min_may_overflow<const LANES: usize>() {\n+                    let a = Vector::<LANES>::splat(Scalar::MIN);\n+                    let b = Vector::<LANES>::splat(-1);\n+                    assert_eq!(a / b, a / (b * b));\n+                }\n \n-            test_helpers::test_lanes_panic! {\n-                fn div_min_overflow_panics<const LANES: usize>() {\n+                fn rem_min_may_overflow<const LANES: usize>() {\n                     let a = Vector::<LANES>::splat(Scalar::MIN);\n                     let b = Vector::<LANES>::splat(-1);\n-                    let _ = a / b;\n+                    assert_eq!(a % b, a % (b * b));\n                 }\n \n+            }\n+\n+            test_helpers::test_lanes_panic! {\n                 fn div_by_all_zeros_panics<const LANES: usize>() {\n                     let a = Vector::<LANES>::splat(42);\n                     let b = Vector::<LANES>::splat(0);\n@@ -232,12 +238,6 @@ macro_rules! impl_signed_tests {\n                     let _ = a / b;\n                 }\n \n-                fn rem_min_overflow_panic<const LANES: usize>() {\n-                    let a = Vector::<LANES>::splat(Scalar::MIN);\n-                    let b = Vector::<LANES>::splat(-1);\n-                    let _ = a % b;\n-                }\n-\n                 fn rem_zero_panic<const LANES: usize>() {\n                     let a = Vector::<LANES>::splat(42);\n                     let b = Vector::<LANES>::splat(0);"}]}