{"sha": "cd227f581e0c20d6b9ee81a3982509a9f6b2f67f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkMjI3ZjU4MWUwYzIwZDZiOWVlODFhMzk4MjUwOWE5ZjZiMmY2N2Y=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-04-03T19:50:52Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-04-04T11:16:38Z"}, "message": "Add and start using TraitRef and ProjectionTy builders", "tree": {"sha": "2e5c7b11b179b1a318b4bc527c91cbf3b81239f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e5c7b11b179b1a318b4bc527c91cbf3b81239f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd227f581e0c20d6b9ee81a3982509a9f6b2f67f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd227f581e0c20d6b9ee81a3982509a9f6b2f67f", "html_url": "https://github.com/rust-lang/rust/commit/cd227f581e0c20d6b9ee81a3982509a9f6b2f67f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd227f581e0c20d6b9ee81a3982509a9f6b2f67f/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ead65190ecaf1096a998d88d4aab8505ce88afa", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ead65190ecaf1096a998d88d4aab8505ce88afa", "html_url": "https://github.com/rust-lang/rust/commit/2ead65190ecaf1096a998d88d4aab8505ce88afa"}], "stats": {"total": 87, "additions": 48, "deletions": 39}, "files": [{"sha": "15f46f72015416d5ca674097fc20a4e8c0be11bd", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/cd227f581e0c20d6b9ee81a3982509a9f6b2f67f/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd227f581e0c20d6b9ee81a3982509a9f6b2f67f/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=cd227f581e0c20d6b9ee81a3982509a9f6b2f67f", "patch": "@@ -55,11 +55,10 @@ use hir_ty::{\n     autoderef, could_unify,\n     method_resolution::{self, TyFingerprint},\n     primitive::UintTy,\n-    to_assoc_type_id,\n     traits::{FnTrait, Solution, SolutionVariables},\n     AliasEq, AliasTy, BoundVar, CallableDefId, CallableSig, Canonical, CanonicalVarKinds, Cast,\n-    DebruijnIndex, InEnvironment, Interner, ProjectionTy, QuantifiedWhereClause, Scalar,\n-    Substitution, TraitEnvironment, Ty, TyBuilder, TyDefId, TyKind, TyVariableKind, WhereClause,\n+    DebruijnIndex, InEnvironment, Interner, QuantifiedWhereClause, Scalar, Substitution,\n+    TraitEnvironment, Ty, TyBuilder, TyDefId, TyKind, TyVariableKind, WhereClause,\n };\n use itertools::Itertools;\n use rustc_hash::FxHashSet;\n@@ -1785,13 +1784,10 @@ impl Type {\n     }\n \n     pub fn impls_trait(&self, db: &dyn HirDatabase, trait_: Trait, args: &[Type]) -> bool {\n-        let trait_ref = hir_ty::TraitRef {\n-            trait_id: hir_ty::to_chalk_trait_id(trait_.id),\n-            substitution: Substitution::build_for_def(db, trait_.id)\n-                .push(self.ty.clone())\n-                .fill(args.iter().map(|t| t.ty.clone()))\n-                .build(),\n-        };\n+        let trait_ref = TyBuilder::trait_ref(db, trait_.id)\n+            .push(self.ty.clone())\n+            .fill(args.iter().map(|t| t.ty.clone()))\n+            .build();\n \n         let goal = Canonical {\n             value: hir_ty::InEnvironment::new(self.env.env.clone(), trait_ref.cast(&Interner)),\n@@ -1804,22 +1800,18 @@ impl Type {\n     pub fn normalize_trait_assoc_type(\n         &self,\n         db: &dyn HirDatabase,\n-        trait_: Trait,\n         args: &[Type],\n         alias: TypeAlias,\n     ) -> Option<Type> {\n-        let subst = Substitution::build_for_def(db, trait_.id)\n+        let projection = TyBuilder::assoc_type_projection(db, alias.id)\n             .push(self.ty.clone())\n             .fill(args.iter().map(|t| t.ty.clone()))\n             .build();\n         let goal = Canonical::new(\n             InEnvironment::new(\n                 self.env.env.clone(),\n                 AliasEq {\n-                    alias: AliasTy::Projection(ProjectionTy {\n-                        associated_ty_id: to_assoc_type_id(alias.id),\n-                        substitution: subst,\n-                    }),\n+                    alias: AliasTy::Projection(projection),\n                     ty: TyKind::BoundVar(BoundVar::new(DebruijnIndex::INNERMOST, 0))\n                         .intern(&Interner),\n                 }"}, {"sha": "b208d821ddb41dd0e911cf71c0b51b415c3a6946", "filename": "crates/hir_ty/src/infer.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cd227f581e0c20d6b9ee81a3982509a9f6b2f67f/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd227f581e0c20d6b9ee81a3982509a9f6b2f67f/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer.rs?ref=cd227f581e0c20d6b9ee81a3982509a9f6b2f67f", "patch": "@@ -42,7 +42,7 @@ use super::{\n };\n use crate::{\n     db::HirDatabase, infer::diagnostics::InferenceDiagnostic, lower::ImplTraitLoweringMode,\n-    to_assoc_type_id, to_chalk_trait_id, AliasEq, AliasTy, Interner, TyKind,\n+    to_assoc_type_id, AliasEq, AliasTy, Interner, TyBuilder, TyKind,\n };\n \n // This lint has a false positive here. See the link below for details.\n@@ -409,16 +409,14 @@ impl<'a> InferenceContext<'a> {\n                     _ => panic!(\"resolve_associated_type called with non-associated type\"),\n                 };\n                 let ty = self.table.new_type_var();\n-                let substs = Substitution::build_for_def(self.db, res_assoc_ty)\n+                let trait_ref = TyBuilder::trait_ref(self.db, trait_)\n                     .push(inner_ty)\n                     .fill(params.iter().cloned())\n                     .build();\n-                let trait_ref =\n-                    TraitRef { trait_id: to_chalk_trait_id(trait_), substitution: substs.clone() };\n                 let alias_eq = AliasEq {\n                     alias: AliasTy::Projection(ProjectionTy {\n                         associated_ty_id: to_assoc_type_id(res_assoc_ty),\n-                        substitution: substs,\n+                        substitution: trait_ref.substitution.clone(),\n                     }),\n                     ty: ty.clone(),\n                 };"}, {"sha": "282dd499f719813db1ec07d2a98ebe00d4319194", "filename": "crates/hir_ty/src/infer/path.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cd227f581e0c20d6b9ee81a3982509a9f6b2f67f/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd227f581e0c20d6b9ee81a3982509a9f6b2f67f/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpath.rs?ref=cd227f581e0c20d6b9ee81a3982509a9f6b2f67f", "patch": "@@ -10,9 +10,7 @@ use hir_def::{\n };\n use hir_expand::name::Name;\n \n-use crate::{\n-    method_resolution, to_chalk_trait_id, Interner, Substitution, Ty, TyKind, ValueTyDefId,\n-};\n+use crate::{method_resolution, Interner, Substitution, Ty, TyBuilder, TyKind, ValueTyDefId};\n \n use super::{ExprOrPatId, InferenceContext, TraitRef};\n \n@@ -254,18 +252,12 @@ impl<'a> InferenceContext<'a> {\n                     }\n                     AssocContainerId::TraitId(trait_) => {\n                         // we're picking this method\n-                        let trait_substs = Substitution::build_for_def(self.db, trait_)\n+                        let trait_ref = TyBuilder::trait_ref(self.db, trait_)\n                             .push(ty.clone())\n                             .fill(std::iter::repeat_with(|| self.table.new_type_var()))\n                             .build();\n-                        self.push_obligation(\n-                            TraitRef {\n-                                trait_id: to_chalk_trait_id(trait_),\n-                                substitution: trait_substs.clone(),\n-                            }\n-                            .cast(&Interner),\n-                        );\n-                        Some(trait_substs)\n+                        self.push_obligation(trait_ref.clone().cast(&Interner));\n+                        Some(trait_ref.substitution)\n                     }\n                     AssocContainerId::ModuleId(_) => None,\n                 };"}, {"sha": "e586d73d89650b90c0dec95b3119c949886cbad8", "filename": "crates/hir_ty/src/lib.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/cd227f581e0c20d6b9ee81a3982509a9f6b2f67f/crates%2Fhir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd227f581e0c20d6b9ee81a3982509a9f6b2f67f/crates%2Fhir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flib.rs?ref=cd227f581e0c20d6b9ee81a3982509a9f6b2f67f", "patch": "@@ -927,6 +927,35 @@ impl TyBuilder<hir_def::AdtId> {\n     }\n }\n \n+impl TyBuilder<TraitId> {\n+    pub fn trait_ref(db: &dyn HirDatabase, trait_id: TraitId) -> TyBuilder<TraitId> {\n+        let generics = generics(db.upcast(), trait_id.into());\n+        let param_count = generics.len();\n+        TyBuilder::new(trait_id, param_count)\n+    }\n+\n+    pub fn build(self) -> TraitRef {\n+        let (trait_id, substitution) = self.build_internal();\n+        TraitRef { trait_id: to_chalk_trait_id(trait_id), substitution }\n+    }\n+}\n+\n+impl TyBuilder<TypeAliasId> {\n+    pub fn assoc_type_projection(\n+        db: &dyn HirDatabase,\n+        type_alias: TypeAliasId,\n+    ) -> TyBuilder<TypeAliasId> {\n+        let generics = generics(db.upcast(), type_alias.into());\n+        let param_count = generics.len();\n+        TyBuilder::new(type_alias, param_count)\n+    }\n+\n+    pub fn build(self) -> ProjectionTy {\n+        let (type_alias, substitution) = self.build_internal();\n+        ProjectionTy { associated_ty_id: to_assoc_type_id(type_alias), substitution }\n+    }\n+}\n+\n impl Ty {\n     pub fn as_reference(&self) -> Option<(&Ty, Mutability)> {\n         match self.kind(&Interner) {"}, {"sha": "b9cc081e892e775d030249059fd627a85e93be55", "filename": "crates/hir_ty/src/method_resolution.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cd227f581e0c20d6b9ee81a3982509a9f6b2f67f/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd227f581e0c20d6b9ee81a3982509a9f6b2f67f/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs?ref=cd227f581e0c20d6b9ee81a3982509a9f6b2f67f", "patch": "@@ -19,10 +19,9 @@ use crate::{\n     db::HirDatabase,\n     from_foreign_def_id,\n     primitive::{self, FloatTy, IntTy, UintTy},\n-    to_chalk_trait_id,\n     utils::all_super_traits,\n     AdtId, Canonical, CanonicalVarKinds, DebruijnIndex, FnPointer, FnSig, ForeignDefId,\n-    InEnvironment, Interner, Scalar, Substitution, TraitEnvironment, TraitRef, Ty, TyKind,\n+    InEnvironment, Interner, Scalar, Substitution, TraitEnvironment, Ty, TyBuilder, TyKind,\n     TypeWalk,\n };\n \n@@ -813,7 +812,7 @@ fn generic_implements_goal(\n     self_ty: Canonical<Ty>,\n ) -> Canonical<InEnvironment<super::DomainGoal>> {\n     let mut kinds = self_ty.binders.interned().to_vec();\n-    let substs = super::Substitution::build_for_def(db, trait_)\n+    let trait_ref = TyBuilder::trait_ref(db, trait_)\n         .push(self_ty.value)\n         .fill_with_bound_vars(DebruijnIndex::INNERMOST, kinds.len())\n         .build();\n@@ -822,9 +821,8 @@ fn generic_implements_goal(\n             chalk_ir::VariableKind::Ty(chalk_ir::TyVariableKind::General),\n             UniverseIndex::ROOT,\n         ))\n-        .take(substs.len(&Interner) - 1),\n+        .take(trait_ref.substitution.len(&Interner) - 1),\n     );\n-    let trait_ref = TraitRef { trait_id: to_chalk_trait_id(trait_), substitution: substs };\n     let obligation = trait_ref.cast(&Interner);\n     Canonical {\n         binders: CanonicalVarKinds::from_iter(&Interner, kinds),"}, {"sha": "d5ef054d807a786292765b1fcd73f97e9f8bf14f", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd227f581e0c20d6b9ee81a3982509a9f6b2f67f/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd227f581e0c20d6b9ee81a3982509a9f6b2f67f/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=cd227f581e0c20d6b9ee81a3982509a9f6b2f67f", "patch": "@@ -234,7 +234,7 @@ fn hint_iterator(\n             hir::AssocItem::TypeAlias(alias) if alias.name(db) == known::Item => Some(alias),\n             _ => None,\n         })?;\n-        if let Some(ty) = ty.normalize_trait_assoc_type(db, iter_trait, &[], assoc_type_item) {\n+        if let Some(ty) = ty.normalize_trait_assoc_type(db, &[], assoc_type_item) {\n             const LABEL_START: &str = \"impl Iterator<Item = \";\n             const LABEL_END: &str = \">\";\n "}]}