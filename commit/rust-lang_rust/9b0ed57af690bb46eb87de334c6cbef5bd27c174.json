{"sha": "9b0ed57af690bb46eb87de334c6cbef5bd27c174", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliMGVkNTdhZjY5MGJiNDZlYjg3ZGUzMzRjNmNiZWY1YmQyN2MxNzQ=", "commit": {"author": {"name": "Caleb Cartwright", "email": "caleb.cartwright@outlook.com", "date": "2020-03-27T04:18:16Z"}, "committer": {"name": "Caleb Cartwright", "email": "caleb.cartwright@outlook.com", "date": "2020-03-28T02:33:34Z"}, "message": "refactor: parse & mod resolver for rustc-ap v650", "tree": {"sha": "121cb8dd7f93e7270770ee73894afb2e1a4c94b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/121cb8dd7f93e7270770ee73894afb2e1a4c94b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b0ed57af690bb46eb87de334c6cbef5bd27c174", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b0ed57af690bb46eb87de334c6cbef5bd27c174", "html_url": "https://github.com/rust-lang/rust/commit/9b0ed57af690bb46eb87de334c6cbef5bd27c174", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b0ed57af690bb46eb87de334c6cbef5bd27c174/comments", "author": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd5dff4012a73ad4c5eb5db1dbb111bd92ed31dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd5dff4012a73ad4c5eb5db1dbb111bd92ed31dd", "html_url": "https://github.com/rust-lang/rust/commit/bd5dff4012a73ad4c5eb5db1dbb111bd92ed31dd"}], "stats": {"total": 552, "additions": 309, "deletions": 243}, "files": [{"sha": "2206da817304cc1d4d834bbccc2edd44c63df33d", "filename": "Cargo.lock", "status": "modified", "additions": 141, "deletions": 100, "changes": 241, "blob_url": "https://github.com/rust-lang/rust/blob/9b0ed57af690bb46eb87de334c6cbef5bd27c174/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/9b0ed57af690bb46eb87de334c6cbef5bd27c174/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=9b0ed57af690bb46eb87de334c6cbef5bd27c174", "patch": "@@ -617,65 +617,82 @@ dependencies = [\n \n [[package]]\n name = \"rustc-ap-arena\"\n-version = \"647.0.0\"\n+version = \"650.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"rustc-ap-rustc_data_structures 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"smallvec 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rustc-ap-graphviz\"\n-version = \"647.0.0\"\n+version = \"650.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"rustc-ap-rustc_ast\"\n-version = \"647.0.0\"\n+version = \"650.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_data_structures 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_index 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_lexer 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_macros 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_span 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-serialize 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_index 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_lexer 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_macros 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_span 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-serialize 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"scoped-tls 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"smallvec 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"rustc-ap-rustc_ast_passes\"\n+version = \"650.0.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_ast 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_ast_pretty 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_attr 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_errors 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_feature 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_parse 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_session 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_span 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"rustc-ap-rustc_ast_pretty\"\n-version = \"647.0.0\"\n+version = \"650.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_ast 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_data_structures 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_span 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_ast 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_span 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rustc-ap-rustc_attr\"\n-version = \"647.0.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"rustc-ap-rustc_ast 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_ast_pretty 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_data_structures 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_errors 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_feature 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_macros 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_session 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_span 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-serialize 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+version = \"650.0.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"rustc-ap-rustc_ast 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_ast_pretty 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_errors 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_feature 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_macros 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_session 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_span 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-serialize 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"smallvec 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rustc-ap-rustc_data_structures\"\n-version = \"647.0.0\"\n+version = \"650.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"bitflags 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -688,9 +705,9 @@ dependencies = [\n  \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"measureme 0.7.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"parking_lot 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-graphviz 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_index 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-serialize 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-graphviz 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_index 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-serialize 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-rayon 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-rayon-core 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -701,56 +718,77 @@ dependencies = [\n \n [[package]]\n name = \"rustc-ap-rustc_errors\"\n-version = \"647.0.0\"\n+version = \"650.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"annotate-snippets 0.6.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"atty 0.2.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_data_structures 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_span 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-serialize 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_span 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-serialize 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"termcolor 1.0.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"termize 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-width 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"rustc-ap-rustc_expand\"\n+version = \"650.0.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_ast 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_ast_passes 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_ast_pretty 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_attr 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_errors 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_feature 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_lexer 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_parse 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_session 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_span 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-serialize 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"smallvec 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"rustc-ap-rustc_feature\"\n-version = \"647.0.0\"\n+version = \"650.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_data_structures 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_span 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_span 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rustc-ap-rustc_fs_util\"\n-version = \"647.0.0\"\n+version = \"650.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"rustc-ap-rustc_index\"\n-version = \"647.0.0\"\n+version = \"650.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"rustc-ap-serialize 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-serialize 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"smallvec 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rustc-ap-rustc_lexer\"\n-version = \"647.0.0\"\n+version = \"650.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"unicode-xid 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rustc-ap-rustc_macros\"\n-version = \"647.0.0\"\n+version = \"650.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"proc-macro2 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -761,75 +799,75 @@ dependencies = [\n \n [[package]]\n name = \"rustc-ap-rustc_parse\"\n-version = \"647.0.0\"\n+version = \"650.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"bitflags 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_ast 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_ast_pretty 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_attr 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_data_structures 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_errors 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_feature 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_lexer 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_session 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_span 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_ast 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_ast_pretty 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_attr 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_errors 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_feature 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_lexer 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_session 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_span 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"smallvec 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-normalization 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rustc-ap-rustc_session\"\n-version = \"647.0.0\"\n+version = \"650.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"num_cpus 1.10.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_ast 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_data_structures 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_errors 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_feature 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_fs_util 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_index 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_span 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_target 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-serialize 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_ast 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_errors 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_feature 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_fs_util 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_index 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_span 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_target 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-serialize 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rustc-ap-rustc_span\"\n-version = \"647.0.0\"\n+version = \"650.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-arena 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_data_structures 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_index 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_macros 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-serialize 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-arena 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_index 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_macros 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-serialize 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"scoped-tls 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-width 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rustc-ap-rustc_target\"\n-version = \"647.0.0\"\n+version = \"650.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"bitflags 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_data_structures 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_index 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_macros 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_span 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-serialize 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_index 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_macros 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_span 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-serialize 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rustc-ap-serialize\"\n-version = \"647.0.0\"\n+version = \"650.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"indexmap 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -911,14 +949,15 @@ dependencies = [\n  \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 1.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_ast 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_ast_pretty 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_data_structures 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_errors 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_parse 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_session 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_span 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_target 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_ast 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_ast_pretty 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_errors 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_expand 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_parse 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_session 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_span 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_target 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-workspace-hack 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustfmt-config_proc_macro 0.2.0\",\n  \"serde 1.0.101 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1275,23 +1314,25 @@ dependencies = [\n \"checksum regex 1.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dc220bd33bdce8f093101afe22a037b8eb0e5af33592e6a9caafff0d4cb81cbd\"\n \"checksum regex-syntax 0.6.12 (registry+https://github.com/rust-lang/crates.io-index)\" = \"11a7e20d1cce64ef2fed88b66d347f88bd9babb82845b2b858f3edbf59a4f716\"\n \"checksum rust-argon2 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4ca4eaef519b494d1f2848fc602d18816fed808a981aedf4f1f00ceb7c9d32cf\"\n-\"checksum rustc-ap-arena 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a0c144addf28721384a516382f1f7b7c518ebb87a330623dc9e2427b4ed01512\"\n-\"checksum rustc-ap-graphviz 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c4bdd6f563273576220a075afefae7b9e20953c70e7cfe4b664ce1c240f88841\"\n-\"checksum rustc-ap-rustc_ast 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2b4b7aa06b8d9d6bf02075f91cdaf027cbce34aedd6ab5a6f4759de4c05de099\"\n-\"checksum rustc-ap-rustc_ast_pretty 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"aeb9a73b0f1c632fd09dd02444efe753445de17da8ffb1df28adc5766a581ada\"\n-\"checksum rustc-ap-rustc_attr 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4a420a672006a07f51cfc603ab394a066ccaf51323862c6b6b44bb673812df32\"\n-\"checksum rustc-ap-rustc_data_structures 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"43f224fd21a3c82b84e9914b4b1de31b0099e2083345c739285130017f5b2882\"\n-\"checksum rustc-ap-rustc_errors 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"312120a27c404bae22ed957b8d4e9cca2b872998558d227130aca9f3ff4edce9\"\n-\"checksum rustc-ap-rustc_feature 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0e7615aa561db78b1acacbedfa475e3ba5ed7071a33e5ede30d9660069be7b5e\"\n-\"checksum rustc-ap-rustc_fs_util 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6ad7d6ee7fe47355214989c1638d9353344dfd2ac46eda5ac971533c543468d0\"\n-\"checksum rustc-ap-rustc_index 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3a570533637a35eb7ed51de75a819a9f290fbd45b6cd4ca21e4ffe35ee2fcdf5\"\n-\"checksum rustc-ap-rustc_lexer 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"47a9df68feec956275dfd12cdeadc46fc55e48859417e4301f2b330d680de96e\"\n-\"checksum rustc-ap-rustc_macros 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"623e619c676c376f079c4504a6047f76630bb3d23d1a6c4a4beee79158082c74\"\n-\"checksum rustc-ap-rustc_parse 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"465685a06a0a897cacd3c6bc6e0f50c79e1347cca9eb061361b5fa90ce46fb62\"\n-\"checksum rustc-ap-rustc_session 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bf21db47cebe929bcac82f66da0faa1f38ace2091d6a887acdd87dcdfb7a823d\"\n-\"checksum rustc-ap-rustc_span 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d7bb21edcd0e2603efee36ffb1bc4c08b7288478fe107159dbffed0ec8a894a1\"\n-\"checksum rustc-ap-rustc_target 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9e8cb1a2d38583099f392c6ea8d3f77b1fc8368e4edfce1978d94c249dc9a828\"\n-\"checksum rustc-ap-serialize 647.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"25317d226bf1d0243d4df231edcc9bf1c0e40c503ef0290cc7aa5658d3819915\"\n+\"checksum rustc-ap-arena 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f7ba8774d4d5c8d42727c74836f478c51e0a16daeeee80017c133f9e1ebf4f6f\"\n+\"checksum rustc-ap-graphviz 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"feba68cc05f42d227b258e07a84df7d690d1f20200593754a789ab39acb581e5\"\n+\"checksum rustc-ap-rustc_ast 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"989d221c292a3c777fc4921f87e4962d8d89633cf52a3a82f6f34d5b3d66efc7\"\n+\"checksum rustc-ap-rustc_ast_passes 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"865c0bddabe735c8f8116cf14239b41d5789e5c38d1c503888779721b98bdd9e\"\n+\"checksum rustc-ap-rustc_ast_pretty 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"595c0092a2fa00dd0e572739279f771d96242f7626fc3999b4b027f08664417f\"\n+\"checksum rustc-ap-rustc_attr 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3be021d73b25feb33dc0aa91f91ff37b939a0ef54f9620684bc2846278b5e637\"\n+\"checksum rustc-ap-rustc_data_structures 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a41551e5393a1abb4401e82f4e4bb64e097facb7d0362a1736b117186c0966dd\"\n+\"checksum rustc-ap-rustc_errors 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8715e95fd29d92a7799f9c65cb5583485bbf902dda17900c884fbb7956d593d8\"\n+\"checksum rustc-ap-rustc_expand 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7ecc53789a88bb89caf81a6572db077b8679450b384fc03bf797d8453f86354b\"\n+\"checksum rustc-ap-rustc_feature 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cf6304d5df6f803f43d15a71d1c4b4aa6b68a01fe587ad62fcdfb83049e3ec77\"\n+\"checksum rustc-ap-rustc_fs_util 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c7c05da9f8dfd5c086465ad0263749453c13739226233c0354de5fc93b20204a\"\n+\"checksum rustc-ap-rustc_index 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b1c292880ff00cd1e61710396f9379b2c99a533cfb1bc9c3274d566ada2c6027\"\n+\"checksum rustc-ap-rustc_lexer 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"51e5ac7071163642ff52dda1bc41ff7464fcd832b5ea3fabf162569d26969410\"\n+\"checksum rustc-ap-rustc_macros 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2e147f23b65b716b58bd8687170914d3e2d2bfd004ec3fc8d2749e9d601482c0\"\n+\"checksum rustc-ap-rustc_parse 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c5e12622f831b7344899229f2f776ff2cdd14f7f82b257d6bbcb79c850996298\"\n+\"checksum rustc-ap-rustc_session 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"18fb72a26080a34d35c8dd7ba5ac593812c1c3f97edffe6f1bf30c1ef5c4c550\"\n+\"checksum rustc-ap-rustc_span 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"fe2d8db305496f9dc5f43408044735a942eadeeb2a28d6da8dd6b23b5ef60f93\"\n+\"checksum rustc-ap-rustc_target 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e2797ddd7911ba6681f500fa0d5af651635bdc74813363a1216bafc6156cb3d2\"\n+\"checksum rustc-ap-serialize 650.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e8567212bd0f0a93bbf3675e1ae819937e4a57d48b705522462c31ff8efc0604\"\n \"checksum rustc-demangle 0.1.16 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4c691c0e608126e00913e33f0ccf3727d5fc84573623b8d65b2df340b5201783\"\n \"checksum rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7540fc8b0c49f096ee9c961cda096467dce8084bec6bdca2fc83895fd9b28cb8\"\n \"checksum rustc-rayon 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f32767f90d938f1b7199a174ef249ae1924f6e5bbdb9d112fea141e016f25b3a\""}, {"sha": "ca816035a2a66f5fddeae58eba0e48b50c692d84", "filename": "Cargo.toml", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9b0ed57af690bb46eb87de334c6cbef5bd27c174/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9b0ed57af690bb46eb87de334c6cbef5bd27c174/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=9b0ed57af690bb46eb87de334c6cbef5bd27c174", "patch": "@@ -65,32 +65,36 @@ rustc-workspace-hack = \"1.0.0\"\n \n [dependencies.rustc_ast_pretty]\n package = \"rustc-ap-rustc_ast_pretty\"\n-version = \"647.0.0\"\n+version = \"650.0.0\"\n \n [dependencies.rustc_data_structures]\n package = \"rustc-ap-rustc_data_structures\"\n-version = \"647.0.0\"\n+version = \"650.0.0\"\n \n [dependencies.rustc_errors]\n package = \"rustc-ap-rustc_errors\"\n-version = \"647.0.0\"\n+version = \"650.0.0\"\n+\n+[dependencies.rustc_expand]\n+package = \"rustc-ap-rustc_expand\"\n+version = \"650.0.0\"\n \n [dependencies.rustc_parse]\n package = \"rustc-ap-rustc_parse\"\n-version = \"647.0.0\"\n+version = \"650.0.0\"\n \n [dependencies.rustc_session]\n package = \"rustc-ap-rustc_session\"\n-version = \"647.0.0\"\n+version = \"650.0.0\"\n \n [dependencies.rustc_span]\n package = \"rustc-ap-rustc_span\"\n-version = \"647.0.0\"\n+version = \"650.0.0\"\n \n [dependencies.rustc_target]\n package = \"rustc-ap-rustc_target\"\n-version = \"647.0.0\"\n+version = \"650.0.0\"\n \n [dependencies.syntax]\n package = \"rustc-ap-rustc_ast\"\n-version = \"647.0.0\"\n+version = \"650.0.0\""}, {"sha": "74195eb2a94222d3acfcce93efe6c63be0a918e5", "filename": "src/attr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b0ed57af690bb46eb87de334c6cbef5bd27c174/src%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b0ed57af690bb46eb87de334c6cbef5bd27c174/src%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fattr.rs?ref=9b0ed57af690bb46eb87de334c6cbef5bd27c174", "patch": "@@ -23,7 +23,7 @@ pub(crate) fn get_attrs_from_stmt(stmt: &ast::Stmt) -> Option<&[ast::Attribute]>\n         ast::StmtKind::Local(ref local) => Some(&local.attrs),\n         ast::StmtKind::Item(ref item) => Some(&item.attrs),\n         ast::StmtKind::Expr(ref expr) | ast::StmtKind::Semi(ref expr) => Some(&expr.attrs),\n-        ast::StmtKind::Mac(ref mac) => Some(&mac.2),\n+        ast::StmtKind::MacCall(ref mac) => Some(&mac.2),\n         ast::StmtKind::Empty => None,\n     }\n }\n@@ -33,7 +33,7 @@ pub(crate) fn get_span_without_attrs(stmt: &ast::Stmt) -> Span {\n         ast::StmtKind::Local(ref local) => local.span,\n         ast::StmtKind::Item(ref item) => item.span,\n         ast::StmtKind::Expr(ref expr) | ast::StmtKind::Semi(ref expr) => expr.span,\n-        ast::StmtKind::Mac(ref mac) => {\n+        ast::StmtKind::MacCall(ref mac) => {\n             let (ref mac, _, _) = **mac;\n             mac.span()\n         }"}, {"sha": "e8becfbab8a82fbb12d05a58560d5f5e077ecf24", "filename": "src/chains.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b0ed57af690bb46eb87de334c6cbef5bd27c174/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b0ed57af690bb46eb87de334c6cbef5bd27c174/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=9b0ed57af690bb46eb87de334c6cbef5bd27c174", "patch": "@@ -403,7 +403,7 @@ impl Chain {\n \n     fn convert_try(expr: &ast::Expr, context: &RewriteContext<'_>) -> ast::Expr {\n         match expr.kind {\n-            ast::ExprKind::Mac(ref mac) if context.config.use_try_shorthand() => {\n+            ast::ExprKind::MacCall(ref mac) if context.config.use_try_shorthand() => {\n                 if let Some(subexpr) = convert_try_mac(mac, context) {\n                     subexpr\n                 } else {"}, {"sha": "6a581e6c0547ab4c2eb3792f099d51080a00a05e", "filename": "src/expr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9b0ed57af690bb46eb87de334c6cbef5bd27c174/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b0ed57af690bb46eb87de334c6cbef5bd27c174/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=9b0ed57af690bb46eb87de334c6cbef5bd27c174", "patch": "@@ -199,7 +199,7 @@ pub(crate) fn format_expr(\n         ast::ExprKind::Try(..) | ast::ExprKind::Field(..) | ast::ExprKind::MethodCall(..) => {\n             rewrite_chain(expr, context, shape)\n         }\n-        ast::ExprKind::Mac(ref mac) => {\n+        ast::ExprKind::MacCall(ref mac) => {\n             rewrite_macro(mac, None, context, shape, MacroPosition::Expression).or_else(|| {\n                 wrap_str(\n                     context.snippet(expr.span).to_owned(),\n@@ -1312,7 +1312,7 @@ pub(crate) fn can_be_overflowed_expr(\n             context.config.overflow_delimited_expr()\n                 || (context.use_block_indent() && args_len == 1)\n         }\n-        ast::ExprKind::Mac(ref mac) => {\n+        ast::ExprKind::MacCall(ref mac) => {\n             match (\n                 syntax::ast::MacDelimiter::from_token(mac.args.delim()),\n                 context.config.overflow_delimited_expr(),\n@@ -1340,7 +1340,7 @@ pub(crate) fn can_be_overflowed_expr(\n \n pub(crate) fn is_nested_call(expr: &ast::Expr) -> bool {\n     match expr.kind {\n-        ast::ExprKind::Call(..) | ast::ExprKind::Mac(..) => true,\n+        ast::ExprKind::Call(..) | ast::ExprKind::MacCall(..) => true,\n         ast::ExprKind::AddrOf(_, _, ref expr)\n         | ast::ExprKind::Box(ref expr)\n         | ast::ExprKind::Try(ref expr)"}, {"sha": "583d72272f2bf9531d206fa35d848d3a9ac57ab0", "filename": "src/formatting.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9b0ed57af690bb46eb87de334c6cbef5bd27c174/src%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b0ed57af690bb46eb87de334c6cbef5bd27c174/src%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fformatting.rs?ref=9b0ed57af690bb46eb87de334c6cbef5bd27c174", "patch": "@@ -91,10 +91,11 @@ fn format_project<T: FormatHandler>(\n     let files = modules::ModResolver::new(\n         &context.parse_session,\n         directory_ownership.unwrap_or(DirectoryOwnership::UnownedViaMod),\n-        !(input_is_stdin || config.skip_children()),\n+        !input_is_stdin && !config.skip_children(),\n     )\n     .visit_crate(&krate)\n     .map_err(|e| io::Error::new(io::ErrorKind::Other, e))?;\n+\n     for (path, module) in files {\n         let should_ignore = !input_is_stdin && context.ignore_file(&path);\n         if (config.skip_children() && path != main_file) || should_ignore {"}, {"sha": "31c1c193c4b11b952f86b5200224c564e62e2a48", "filename": "src/items.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9b0ed57af690bb46eb87de334c6cbef5bd27c174/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b0ed57af690bb46eb87de334c6cbef5bd27c174/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=9b0ed57af690bb46eb87de334c6cbef5bd27c174", "patch": "@@ -645,7 +645,7 @@ impl<'a> FmtVisitor<'a> {\n                 {\n                     a.ident.as_str().cmp(&b.ident.as_str())\n                 }\n-                (Const(..), Const(..)) | (Macro(..), Macro(..)) => {\n+                (Const(..), Const(..)) | (MacCall(..), MacCall(..)) => {\n                     a.ident.as_str().cmp(&b.ident.as_str())\n                 }\n                 (Fn(..), Fn(..)) => a.span.lo().cmp(&b.span.lo()),\n@@ -655,8 +655,8 @@ impl<'a> FmtVisitor<'a> {\n                 (_, TyAlias(..)) => Ordering::Greater,\n                 (Const(..), _) => Ordering::Less,\n                 (_, Const(..)) => Ordering::Greater,\n-                (Macro(..), _) => Ordering::Less,\n-                (_, Macro(..)) => Ordering::Greater,\n+                (MacCall(..), _) => Ordering::Less,\n+                (_, MacCall(..)) => Ordering::Greater,\n             });\n             let mut prev_kind = None;\n             for (buf, item) in buffer {\n@@ -868,10 +868,9 @@ fn format_impl_ref_and_type(\n         let generics_str = rewrite_generics(context, \"impl\", generics, shape)?;\n         result.push_str(&generics_str);\n \n-        let polarity_str = if polarity == ast::ImplPolarity::Negative {\n-            \"!\"\n-        } else {\n-            \"\"\n+        let polarity_str = match polarity {\n+            ast::ImplPolarity::Negative(_) => \"!\",\n+            ast::ImplPolarity::Positive => \"\",\n         };\n \n         if let Some(ref trait_ref) = *trait_ref {\n@@ -1730,7 +1729,7 @@ impl<'a> StaticParts<'a> {\n             ty,\n             mutability,\n             expr_opt: expr.as_ref(),\n-            defaultness: defaultness,\n+            defaultness,\n             span: item.span,\n         }\n     }\n@@ -3120,7 +3119,7 @@ impl Rewrite for ast::ForeignItem {\n                     rewrite_ident(context, self.ident)\n                 ))\n             }\n-            ast::ForeignItemKind::Macro(ref mac) => {\n+            ast::ForeignItemKind::MacCall(ref mac) => {\n                 rewrite_macro(mac, None, context, shape, MacroPosition::Item)\n             }\n         }?;"}, {"sha": "240a33773c0afbd2ef3353ae3b1d1afef3e27c2f", "filename": "src/macros.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9b0ed57af690bb46eb87de334c6cbef5bd27c174/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b0ed57af690bb46eb87de334c6cbef5bd27c174/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=9b0ed57af690bb46eb87de334c6cbef5bd27c174", "patch": "@@ -187,7 +187,7 @@ fn return_macro_parse_failure_fallback(\n }\n \n pub(crate) fn rewrite_macro(\n-    mac: &ast::Mac,\n+    mac: &ast::MacCall,\n     extra_ident: Option<ast::Ident>,\n     context: &RewriteContext<'_>,\n     shape: Shape,\n@@ -239,7 +239,7 @@ fn check_keyword<'a, 'b: 'a>(parser: &'a mut Parser<'b>) -> Option<MacroArg> {\n }\n \n fn rewrite_macro_inner(\n-    mac: &ast::Mac,\n+    mac: &ast::MacCall,\n     extra_ident: Option<ast::Ident>,\n     context: &RewriteContext<'_>,\n     shape: Shape,\n@@ -495,7 +495,7 @@ pub(crate) fn rewrite_macro_def(\n         None => return snippet,\n     };\n \n-    let mut result = if def.legacy {\n+    let mut result = if def.macro_rules {\n         String::from(\"macro_rules!\")\n     } else {\n         format!(\"{}macro\", format_visibility(context, vis))\n@@ -504,7 +504,7 @@ pub(crate) fn rewrite_macro_def(\n     result += \" \";\n     result += rewrite_ident(context, ident);\n \n-    let multi_branch_style = def.legacy || parsed_def.branches.len() != 1;\n+    let multi_branch_style = def.macro_rules || parsed_def.branches.len() != 1;\n \n     let arm_shape = if multi_branch_style {\n         shape\n@@ -537,7 +537,7 @@ pub(crate) fn rewrite_macro_def(\n     .collect::<Vec<_>>();\n \n     let fmt = ListFormatting::new(arm_shape, context.config)\n-        .separator(if def.legacy { \";\" } else { \"\" })\n+        .separator(if def.macro_rules { \";\" } else { \"\" })\n         .trailing_separator(SeparatorTactic::Always)\n         .preserve_newline(true);\n \n@@ -1186,7 +1186,7 @@ fn next_space(tok: &TokenKind) -> SpaceState {\n /// Tries to convert a macro use into a short hand try expression. Returns `None`\n /// when the macro is not an instance of `try!` (or parsing the inner expression\n /// failed).\n-pub(crate) fn convert_try_mac(mac: &ast::Mac, context: &RewriteContext<'_>) -> Option<ast::Expr> {\n+pub(crate) fn convert_try_mac(mac: &ast::MacCall, context: &RewriteContext<'_>) -> Option<ast::Expr> {\n     let path = &pprust::path_to_string(&mac.path);\n     if path == \"try\" || path == \"r#try\" {\n         let ts = mac.args.inner_tokens();\n@@ -1203,7 +1203,7 @@ pub(crate) fn convert_try_mac(mac: &ast::Mac, context: &RewriteContext<'_>) -> O\n     }\n }\n \n-pub(crate) fn macro_style(mac: &ast::Mac, context: &RewriteContext<'_>) -> DelimToken {\n+pub(crate) fn macro_style(mac: &ast::MacCall, context: &RewriteContext<'_>) -> DelimToken {\n     let snippet = context.snippet(mac.span());\n     let paren_pos = snippet.find_uncommented(\"(\").unwrap_or(usize::max_value());\n     let bracket_pos = snippet.find_uncommented(\"[\").unwrap_or(usize::max_value());"}, {"sha": "5f2d9d9e85ef6fe22710a125322827044fe3a38b", "filename": "src/matches.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b0ed57af690bb46eb87de334c6cbef5bd27c174/src%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b0ed57af690bb46eb87de334c6cbef5bd27c174/src%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmatches.rs?ref=9b0ed57af690bb46eb87de334c6cbef5bd27c174", "patch": "@@ -559,7 +559,7 @@ fn can_flatten_block_around_this(body: &ast::Expr) -> bool {\n         | ast::ExprKind::Array(..)\n         | ast::ExprKind::Call(..)\n         | ast::ExprKind::MethodCall(..)\n-        | ast::ExprKind::Mac(..)\n+        | ast::ExprKind::MacCall(..)\n         | ast::ExprKind::Struct(..)\n         | ast::ExprKind::Tup(..) => true,\n         ast::ExprKind::AddrOf(_, _, ref expr)"}, {"sha": "b7e110d601355f6533e544e542606bdd36eac109", "filename": "src/modules.rs", "status": "modified", "additions": 91, "deletions": 34, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/9b0ed57af690bb46eb87de334c6cbef5bd27c174/src%2Fmodules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b0ed57af690bb46eb87de334c6cbef5bd27c174/src%2Fmodules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmodules.rs?ref=9b0ed57af690bb46eb87de334c6cbef5bd27c174", "patch": "@@ -32,7 +32,7 @@ pub(crate) struct ModResolver<'ast, 'sess> {\n #[derive(Clone)]\n enum SubModKind<'a, 'ast> {\n     /// `mod foo;`\n-    External(PathBuf, DirectoryOwnership),\n+    External(PathBuf, DirectoryOwnership, Cow<'ast, ast::Mod>),\n     /// `mod foo;` with multiple sources.\n     MultiExternal(Vec<(PathBuf, DirectoryOwnership, Cow<'ast, ast::Mod>)>),\n     /// `#[path = \"...\"] mod foo {}`\n@@ -82,7 +82,7 @@ impl<'ast, 'sess, 'c> ModResolver<'ast, 'sess> {\n \n     /// Visit `cfg_if` macro and look for module declarations.\n     fn visit_cfg_if(&mut self, item: Cow<'ast, ast::Item>) -> Result<(), String> {\n-        let mut visitor = visitor::CfgIfVisitor::new(self.parse_sess, &self.directory);\n+        let mut visitor = visitor::CfgIfVisitor::new(self.parse_sess);\n         visitor.visit_item(&item);\n         for module_item in visitor.mods() {\n             if let ast::ItemKind::Mod(ref sub_mod) = module_item.item.kind {\n@@ -150,7 +150,6 @@ impl<'ast, 'sess, 'c> ModResolver<'ast, 'sess> {\n             // mod foo;\n             // Look for an extern file.\n             self.find_external_module(item.ident, &item.attrs, sub_mod)\n-                .map(Some)\n         } else {\n             // An internal module (`mod foo { /* ... */ }`);\n             if let Some(path) = find_path_value(&item.attrs) {\n@@ -165,15 +164,19 @@ impl<'ast, 'sess, 'c> ModResolver<'ast, 'sess> {\n     fn insert_sub_mod(\n         &mut self,\n         sub_mod_kind: SubModKind<'c, 'ast>,\n-        sub_mod: Cow<'ast, ast::Mod>,\n+        _sub_mod: Cow<'ast, ast::Mod>,\n     ) -> Result<(), String> {\n         match sub_mod_kind {\n-            SubModKind::External(mod_path, _) => {\n-                self.file_map.insert(FileName::Real(mod_path), sub_mod);\n+            SubModKind::External(mod_path, _, sub_mod) => {\n+                self.file_map\n+                    .entry(FileName::Real(mod_path))\n+                    .or_insert(sub_mod);\n             }\n             SubModKind::MultiExternal(mods) => {\n                 for (mod_path, _, sub_mod) in mods {\n-                    self.file_map.insert(FileName::Real(mod_path), sub_mod);\n+                    self.file_map\n+                        .entry(FileName::Real(mod_path))\n+                        .or_insert(sub_mod);\n                 }\n             }\n             _ => (),\n@@ -187,7 +190,7 @@ impl<'ast, 'sess, 'c> ModResolver<'ast, 'sess> {\n         sub_mod_kind: SubModKind<'c, 'ast>,\n     ) -> Result<(), String> {\n         match sub_mod_kind {\n-            SubModKind::External(mod_path, directory_ownership) => {\n+            SubModKind::External(mod_path, directory_ownership, sub_mod) => {\n                 let directory = Directory {\n                     path: mod_path.parent().unwrap().to_path_buf(),\n                     ownership: directory_ownership,\n@@ -239,43 +242,97 @@ impl<'ast, 'sess, 'c> ModResolver<'ast, 'sess> {\n         mod_name: ast::Ident,\n         attrs: &[ast::Attribute],\n         sub_mod: &Cow<'ast, ast::Mod>,\n-    ) -> Result<SubModKind<'c, 'ast>, String> {\n+    ) -> Result<Option<SubModKind<'c, 'ast>>, String> {\n+        let relative = match self.directory.ownership {\n+            DirectoryOwnership::Owned { relative } => relative,\n+            DirectoryOwnership::UnownedViaBlock | DirectoryOwnership::UnownedViaMod => None,\n+        };\n         if let Some(path) = Parser::submod_path_from_attr(attrs, &self.directory.path) {\n-            return Ok(SubModKind::External(\n-                path,\n-                DirectoryOwnership::Owned { relative: None },\n-            ));\n+            if self.parse_sess.is_file_parsed(&path) {\n+                return Ok(None);\n+            }\n+            return match Parser::parse_file_as_module(\n+                self.parse_sess,\n+                &path,\n+                sub_mod.inner,\n+            ) {\n+                Some(m) => Ok(Some(SubModKind::External(\n+                    path,\n+                    DirectoryOwnership::Owned { relative: None },\n+                    Cow::Owned(m),\n+                ))),\n+                None => Err(format!(\n+                    \"Failed to find module {} in {:?} {:?}\",\n+                    mod_name, self.directory.path, relative,\n+                )),\n+            };\n         }\n \n         // Look for nested path, like `#[cfg_attr(feature = \"foo\", path = \"bar.rs\")]`.\n         let mut mods_outside_ast = self.find_mods_outside_of_ast(attrs, sub_mod);\n \n-        let relative = match self.directory.ownership {\n-            DirectoryOwnership::Owned { relative } => relative,\n-            DirectoryOwnership::UnownedViaBlock | DirectoryOwnership::UnownedViaMod => None,\n-        };\n         match self\n             .parse_sess\n             .default_submod_path(mod_name, relative, &self.directory.path)\n             .result\n         {\n             Ok(ModulePathSuccess {\n-                path,\n-                directory_ownership,\n-                ..\n-            }) => Ok(if mods_outside_ast.is_empty() {\n-                SubModKind::External(path, directory_ownership)\n-            } else {\n-                mods_outside_ast.push((path, directory_ownership, sub_mod.clone()));\n-                SubModKind::MultiExternal(mods_outside_ast)\n-            }),\n-            Err(_) if !mods_outside_ast.is_empty() => {\n-                Ok(SubModKind::MultiExternal(mods_outside_ast))\n+                path, ownership, ..\n+            }) => {\n+                let outside_mods_empty = mods_outside_ast.is_empty();\n+                let should_insert = !mods_outside_ast\n+                    .iter()\n+                    .any(|(outside_path, _, _)| outside_path == &path);\n+                if self.parse_sess.is_file_parsed(&path) {\n+                    if outside_mods_empty {\n+                        return Ok(None);\n+                    } else {\n+                        if should_insert {\n+                            mods_outside_ast.push((path, ownership, sub_mod.clone()));\n+                        }\n+                        return Ok(Some(SubModKind::MultiExternal(mods_outside_ast)));\n+                    }\n+                }\n+                match Parser::parse_file_as_module(\n+                    self.parse_sess,\n+                    &path,\n+                    sub_mod.inner,\n+                ) {\n+                    Some(m) if outside_mods_empty => Ok(Some(SubModKind::External(\n+                        path,\n+                        ownership,\n+                        Cow::Owned(m),\n+                    ))),\n+                    Some(m) => {\n+                        mods_outside_ast.push((path.clone(), ownership, Cow::Owned(m)));\n+                        if should_insert {\n+                            mods_outside_ast.push((path, ownership, sub_mod.clone()));\n+                        }\n+                        Ok(Some(SubModKind::MultiExternal(mods_outside_ast)))\n+                    }\n+                    None if outside_mods_empty => Err(format!(\n+                        \"Failed to find module {} in {:?} {:?}\",\n+                        mod_name, self.directory.path, relative,\n+                    )),\n+                    None => {\n+                        if should_insert {\n+                            mods_outside_ast.push((path, ownership, sub_mod.clone()));\n+                        }\n+                        Ok(Some(SubModKind::MultiExternal(mods_outside_ast)))\n+                    },\n+                }\n+            }\n+            Err(mut e) if !mods_outside_ast.is_empty() => {\n+                e.cancel();\n+                Ok(Some(SubModKind::MultiExternal(mods_outside_ast)))\n+            }\n+            Err(mut e) => {\n+                e.cancel();\n+                Err(format!(\n+                    \"Failed to find module {} in {:?} {:?}\",\n+                    mod_name, self.directory.path, relative,\n+                ))\n             }\n-            Err(_) => Err(format!(\n-                \"Failed to find module {} in {:?} {:?}\",\n-                mod_name, self.directory.path, relative,\n-            )),\n         }\n     }\n \n@@ -329,9 +386,9 @@ impl<'ast, 'sess, 'c> ModResolver<'ast, 'sess> {\n                 continue;\n             }\n             let m = match Parser::parse_file_as_module(\n-                self.directory.ownership,\n                 self.parse_sess,\n                 &actual_path,\n+                sub_mod.inner,\n             ) {\n                 Some(m) => m,\n                 None => continue,\n@@ -364,7 +421,7 @@ fn find_path_value(attrs: &[ast::Attribute]) -> Option<Symbol> {\n \n fn is_cfg_if(item: &ast::Item) -> bool {\n     match item.kind {\n-        ast::ItemKind::Mac(ref mac) => {\n+        ast::ItemKind::MacCall(ref mac) => {\n             if let Some(first_segment) = mac.path.segments.first() {\n                 if first_segment.ident.name == *CFG_IF {\n                     return true;"}, {"sha": "b4d32747b171c589bd76f566f54e84c9f4d2dff0", "filename": "src/modules/visitor.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9b0ed57af690bb46eb87de334c6cbef5bd27c174/src%2Fmodules%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b0ed57af690bb46eb87de334c6cbef5bd27c174/src%2Fmodules%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmodules%2Fvisitor.rs?ref=9b0ed57af690bb46eb87de334c6cbef5bd27c174", "patch": "@@ -3,7 +3,7 @@ use syntax::ast;\n use syntax::visit::Visitor;\n \n use crate::attr::MetaVisitor;\n-use crate::syntux::parser::{Directory, Parser};\n+use crate::syntux::parser::Parser;\n use crate::syntux::session::ParseSess;\n \n pub(crate) struct ModItem {\n@@ -14,15 +14,13 @@ pub(crate) struct ModItem {\n pub(crate) struct CfgIfVisitor<'a> {\n     parse_sess: &'a ParseSess,\n     mods: Vec<ModItem>,\n-    base_dir: &'a Directory,\n }\n \n impl<'a> CfgIfVisitor<'a> {\n-    pub(crate) fn new(parse_sess: &'a ParseSess, base_dir: &'a Directory) -> CfgIfVisitor<'a> {\n+    pub(crate) fn new(parse_sess: &'a ParseSess) -> CfgIfVisitor<'a> {\n         CfgIfVisitor {\n             mods: vec![],\n             parse_sess,\n-            base_dir,\n         }\n     }\n \n@@ -32,7 +30,7 @@ impl<'a> CfgIfVisitor<'a> {\n }\n \n impl<'a, 'ast: 'a> Visitor<'ast> for CfgIfVisitor<'a> {\n-    fn visit_mac(&mut self, mac: &'ast ast::Mac) {\n+    fn visit_mac(&mut self, mac: &'ast ast::MacCall) {\n         match self.visit_mac_inner(mac) {\n             Ok(()) => (),\n             Err(e) => debug!(\"{}\", e),\n@@ -41,7 +39,7 @@ impl<'a, 'ast: 'a> Visitor<'ast> for CfgIfVisitor<'a> {\n }\n \n impl<'a, 'ast: 'a> CfgIfVisitor<'a> {\n-    fn visit_mac_inner(&mut self, mac: &'ast ast::Mac) -> Result<(), &'static str> {\n+    fn visit_mac_inner(&mut self, mac: &'ast ast::MacCall) -> Result<(), &'static str> {\n         // Support both:\n         // ```\n         // extern crate cfg_if;\n@@ -64,7 +62,7 @@ impl<'a, 'ast: 'a> CfgIfVisitor<'a> {\n             }\n         };\n \n-        let items = Parser::parse_cfg_if(self.parse_sess, mac, &self.base_dir)?;\n+        let items = Parser::parse_cfg_if(self.parse_sess, mac)?;\n         self.mods\n             .append(&mut items.into_iter().map(|item| ModItem { item }).collect());\n "}, {"sha": "0c57f111761bf006975388bab1680ef03e9589db", "filename": "src/patterns.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b0ed57af690bb46eb87de334c6cbef5bd27c174/src%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b0ed57af690bb46eb87de334c6cbef5bd27c174/src%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpatterns.rs?ref=9b0ed57af690bb46eb87de334c6cbef5bd27c174", "patch": "@@ -40,7 +40,7 @@ fn is_short_pattern_inner(pat: &ast::Pat) -> bool {\n         ast::PatKind::Rest | ast::PatKind::Wild | ast::PatKind::Lit(_) => true,\n         ast::PatKind::Ident(_, _, ref pat) => pat.is_none(),\n         ast::PatKind::Struct(..)\n-        | ast::PatKind::Mac(..)\n+        | ast::PatKind::MacCall(..)\n         | ast::PatKind::Slice(..)\n         | ast::PatKind::Path(..)\n         | ast::PatKind::Range(..) => false,\n@@ -231,7 +231,7 @@ impl Rewrite for Pat {\n             PatKind::Struct(ref path, ref fields, ellipsis) => {\n                 rewrite_struct_pat(path, fields, ellipsis, self.span, context, shape)\n             }\n-            PatKind::Mac(ref mac) => rewrite_macro(mac, None, context, shape, MacroPosition::Pat),\n+            PatKind::MacCall(ref mac) => rewrite_macro(mac, None, context, shape, MacroPosition::Pat),\n             PatKind::Paren(ref pat) => pat\n                 .rewrite(context, shape.offset_left(1)?.sub_width(1)?)\n                 .map(|inner_pat| format!(\"({})\", inner_pat)),"}, {"sha": "618a8b179fda5349540266f6ae7ca435d4a5ec8f", "filename": "src/spanned.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b0ed57af690bb46eb87de334c6cbef5bd27c174/src%2Fspanned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b0ed57af690bb46eb87de334c6cbef5bd27c174/src%2Fspanned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fspanned.rs?ref=9b0ed57af690bb46eb87de334c6cbef5bd27c174", "patch": "@@ -66,7 +66,7 @@ impl Spanned for ast::Stmt {\n             ast::StmtKind::Expr(ref expr) | ast::StmtKind::Semi(ref expr) => {\n                 mk_sp(expr.span().lo(), self.span.hi())\n             }\n-            ast::StmtKind::Mac(ref mac) => {\n+            ast::StmtKind::MacCall(ref mac) => {\n                 let (_, _, ref attrs) = **mac;\n                 if attrs.is_empty() {\n                     self.span"}, {"sha": "30006512906211a76bce5fb1bd3aa6008330015a", "filename": "src/stmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b0ed57af690bb46eb87de334c6cbef5bd27c174/src%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b0ed57af690bb46eb87de334c6cbef5bd27c174/src%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstmt.rs?ref=9b0ed57af690bb46eb87de334c6cbef5bd27c174", "patch": "@@ -106,7 +106,7 @@ fn format_stmt(\n             let shape = shape.sub_width(suffix.len())?;\n             format_expr(ex, expr_type, context, shape).map(|s| s + suffix)\n         }\n-        ast::StmtKind::Mac(..) | ast::StmtKind::Item(..) | ast::StmtKind::Empty => None,\n+        ast::StmtKind::MacCall(..) | ast::StmtKind::Item(..) | ast::StmtKind::Empty => None,\n     };\n     result.and_then(|res| recover_comment_removed(res, stmt.span(), context))\n }"}, {"sha": "7859c9e38aae34cb49609d92e36552fd92c83f4a", "filename": "src/syntux/parser.rs", "status": "modified", "additions": 20, "deletions": 55, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/9b0ed57af690bb46eb87de334c6cbef5bd27c174/src%2Fsyntux%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b0ed57af690bb46eb87de334c6cbef5bd27c174/src%2Fsyntux%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsyntux%2Fparser.rs?ref=9b0ed57af690bb46eb87de334c6cbef5bd27c174", "patch": "@@ -2,32 +2,23 @@ use std::panic::{catch_unwind, AssertUnwindSafe};\n use std::path::{Path, PathBuf};\n \n use rustc_errors::{Diagnostic, PResult};\n-use rustc_parse::{new_sub_parser_from_file, parser::Parser as RawParser};\n-use rustc_span::{symbol::kw, Span, DUMMY_SP};\n+use rustc_parse::{new_parser_from_file, parser::Parser as RawParser};\n+use rustc_span::{symbol::kw, Span};\n use syntax::ast;\n use syntax::token::{DelimToken, TokenKind};\n \n use crate::syntux::session::ParseSess;\n use crate::{Config, Input};\n \n-pub(crate) type DirectoryOwnership = rustc_parse::DirectoryOwnership;\n-pub(crate) type ModulePathSuccess = rustc_parse::parser::ModulePathSuccess;\n+pub(crate) type DirectoryOwnership = rustc_expand::module::DirectoryOwnership;\n+pub(crate) type ModulePathSuccess = rustc_expand::module::ModulePathSuccess;\n \n #[derive(Clone)]\n pub(crate) struct Directory {\n     pub(crate) path: PathBuf,\n     pub(crate) ownership: DirectoryOwnership,\n }\n \n-impl<'a> Directory {\n-    fn to_syntax_directory(&'a self) -> rustc_parse::Directory {\n-        rustc_parse::Directory {\n-            path: self.path.clone(),\n-            ownership: self.ownership,\n-        }\n-    }\n-}\n-\n /// A parser for Rust source code.\n pub(crate) struct Parser<'a> {\n     parser: RawParser<'a>,\n@@ -68,59 +59,37 @@ impl<'a> ParserBuilder<'a> {\n     }\n \n     pub(crate) fn build(self) -> Result<Parser<'a>, ParserError> {\n-        let config = self.config.ok_or(ParserError::NoConfig)?;\n         let sess = self.sess.ok_or(ParserError::NoParseSess)?;\n         let input = self.input.ok_or(ParserError::NoInput)?;\n \n-        let mut parser = match Self::parser(sess.inner(), input, self.directory_ownership) {\n+        let parser = match Self::parser(sess.inner(), input) {\n             Ok(p) => p,\n             Err(db) => {\n                 sess.emit_diagnostics(db);\n                 return Err(ParserError::ParserCreationError);\n             }\n         };\n \n-        parser.cfg_mods = false;\n-        if config.skip_children() {\n-            parser.recurse_into_file_modules = false;\n-        }\n-\n         Ok(Parser { parser, sess })\n     }\n \n     fn parser(\n         sess: &'a rustc_session::parse::ParseSess,\n         input: Input,\n-        directory_ownership: Option<DirectoryOwnership>,\n     ) -> Result<rustc_parse::parser::Parser<'a>, Vec<Diagnostic>> {\n         match input {\n-            Input::File(ref file) => Ok(if let Some(directory_ownership) = directory_ownership {\n-                rustc_parse::new_sub_parser_from_file(\n-                    sess,\n-                    file,\n-                    directory_ownership,\n-                    None,\n-                    DUMMY_SP,\n-                )\n-            } else {\n-                rustc_parse::new_parser_from_file(sess, file)\n-            }),\n+            Input::File(ref file) => Ok(new_parser_from_file(sess, file, None)),\n             Input::Text(text) => rustc_parse::maybe_new_parser_from_source_str(\n                 sess,\n                 rustc_span::FileName::Custom(\"stdin\".to_owned()),\n                 text,\n-            )\n-            .map(|mut parser| {\n-                parser.recurse_into_file_modules = false;\n-                parser\n-            }),\n+            ),\n         }\n     }\n }\n \n #[derive(Debug, PartialEq)]\n pub(crate) enum ParserError {\n-    NoConfig,\n     NoParseSess,\n     NoInput,\n     ParserCreationError,\n@@ -130,7 +99,7 @@ pub(crate) enum ParserError {\n \n impl<'a> Parser<'a> {\n     pub(crate) fn submod_path_from_attr(attrs: &[ast::Attribute], path: &Path) -> Option<PathBuf> {\n-        rustc_parse::parser::Parser::submod_path_from_attr(attrs, path)\n+        rustc_expand::module::submod_path_from_attr(attrs, path)\n     }\n \n     // FIXME(topecongiro) Use the method from libsyntax[1] once it become public.\n@@ -176,6 +145,11 @@ impl<'a> Parser<'a> {\n             items.push(item);\n         }\n \n+        // Handle extern mods that are empty files/files with only comments.\n+        if items.is_empty() {\n+            parser.parse_mod(&TokenKind::Eof)?;\n+        }\n+\n         let hi = if parser.token.span.is_dummy() {\n             span\n         } else {\n@@ -190,15 +164,13 @@ impl<'a> Parser<'a> {\n     }\n \n     pub(crate) fn parse_file_as_module(\n-        directory_ownership: DirectoryOwnership,\n         sess: &'a ParseSess,\n         path: &Path,\n+        span: Span,\n     ) -> Option<ast::Mod> {\n-        let result = catch_unwind(AssertUnwindSafe(|| {\n-            let mut parser =\n-                new_sub_parser_from_file(sess.inner(), &path, directory_ownership, None, DUMMY_SP);\n+            let result = catch_unwind(AssertUnwindSafe(|| {\n+            let mut parser = new_parser_from_file(sess.inner(), &path, Some(span));\n \n-            parser.cfg_mods = false;\n             let lo = parser.token.span;\n             // FIXME(topecongiro) Format inner attributes (#3606).\n             match Parser::parse_inner_attrs(&mut parser) {\n@@ -267,11 +239,10 @@ impl<'a> Parser<'a> {\n \n     pub(crate) fn parse_cfg_if(\n         sess: &'a ParseSess,\n-        mac: &'a ast::Mac,\n-        base_dir: &Directory,\n+        mac: &'a ast::MacCall,\n     ) -> Result<Vec<ast::Item>, &'static str> {\n         match catch_unwind(AssertUnwindSafe(|| {\n-            Parser::parse_cfg_if_inner(sess, mac, base_dir)\n+            Parser::parse_cfg_if_inner(sess, mac)\n         })) {\n             Ok(Ok(items)) => Ok(items),\n             Ok(err @ Err(_)) => err,\n@@ -281,17 +252,11 @@ impl<'a> Parser<'a> {\n \n     fn parse_cfg_if_inner(\n         sess: &'a ParseSess,\n-        mac: &'a ast::Mac,\n-        base_dir: &Directory,\n+        mac: &'a ast::MacCall,\n     ) -> Result<Vec<ast::Item>, &'static str> {\n         let token_stream = mac.args.inner_tokens();\n-        let mut parser = rustc_parse::stream_to_parser_with_base_dir(\n-            sess.inner(),\n-            token_stream.clone(),\n-            base_dir.to_syntax_directory(),\n-        );\n+        let mut parser = rustc_parse::stream_to_parser(sess.inner(),token_stream.clone(),Some(\"\"));\n \n-        parser.cfg_mods = false;\n         let mut items = vec![];\n         let mut process_if_cfg = true;\n "}, {"sha": "0e6b0073793786617768d07970cf36cd1183ad44", "filename": "src/syntux/session.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9b0ed57af690bb46eb87de334c6cbef5bd27c174/src%2Fsyntux%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b0ed57af690bb46eb87de334c6cbef5bd27c174/src%2Fsyntux%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsyntux%2Fsession.rs?ref=9b0ed57af690bb46eb87de334c6cbef5bd27c174", "patch": "@@ -150,12 +150,13 @@ impl ParseSess {\n         id: ast::Ident,\n         relative: Option<ast::Ident>,\n         dir_path: &Path,\n-    ) -> rustc_parse::parser::ModulePath {\n-        rustc_parse::parser::Parser::default_submod_path(\n+    ) -> rustc_expand::module::ModulePath<'_> {\n+        rustc_expand::module::default_submod_path(\n+            &self.parse_sess,\n             id,\n+            rustc_span::DUMMY_SP,\n             relative,\n             dir_path,\n-            self.parse_sess.source_map(),\n         )\n     }\n "}, {"sha": "500ccaf6275eb825849e41ab87aa342b735bfe17", "filename": "src/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b0ed57af690bb46eb87de334c6cbef5bd27c174/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b0ed57af690bb46eb87de334c6cbef5bd27c174/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=9b0ed57af690bb46eb87de334c6cbef5bd27c174", "patch": "@@ -732,7 +732,7 @@ impl Rewrite for ast::Ty {\n             }\n             ast::TyKind::BareFn(ref bare_fn) => rewrite_bare_fn(bare_fn, self.span, context, shape),\n             ast::TyKind::Never => Some(String::from(\"!\")),\n-            ast::TyKind::Mac(ref mac) => {\n+            ast::TyKind::MacCall(ref mac) => {\n                 rewrite_macro(mac, None, context, shape, MacroPosition::Expression)\n             }\n             ast::TyKind::ImplicitSelf => Some(String::from(\"\")),"}, {"sha": "494d4d0e33fc0e13c8e9fd240a5018f2b407bc9d", "filename": "src/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b0ed57af690bb46eb87de334c6cbef5bd27c174/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b0ed57af690bb46eb87de334c6cbef5bd27c174/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=9b0ed57af690bb46eb87de334c6cbef5bd27c174", "patch": "@@ -456,7 +456,7 @@ pub(crate) fn first_line_ends_with(s: &str, c: char) -> bool {\n // parens, braces, and brackets in its idiomatic formatting.\n pub(crate) fn is_block_expr(context: &RewriteContext<'_>, expr: &ast::Expr, repr: &str) -> bool {\n     match expr.kind {\n-        ast::ExprKind::Mac(..)\n+        ast::ExprKind::MacCall(..)\n         | ast::ExprKind::Call(..)\n         | ast::ExprKind::MethodCall(..)\n         | ast::ExprKind::Array(..)"}, {"sha": "7dd594a304f64df6d0d612faf16a586686821b9f", "filename": "src/visitor.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9b0ed57af690bb46eb87de334c6cbef5bd27c174/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b0ed57af690bb46eb87de334c6cbef5bd27c174/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=9b0ed57af690bb46eb87de334c6cbef5bd27c174", "patch": "@@ -151,7 +151,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                     self.push_rewrite(stmt.span(), rewrite)\n                 }\n             }\n-            ast::StmtKind::Mac(ref mac) => {\n+            ast::StmtKind::MacCall(ref mac) => {\n                 let (ref mac, _macro_style, ref attrs) = **mac;\n                 if self.visit_attrs(attrs, ast::AttrStyle::Outer) {\n                     self.push_skipped_with_span(\n@@ -504,7 +504,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                     self.format_missing_with_indent(source!(self, item.span).lo());\n                     self.format_mod(module, &item.vis, item.span, item.ident, attrs, is_inline);\n                 }\n-                ast::ItemKind::Mac(ref mac) => {\n+                ast::ItemKind::MacCall(ref mac) => {\n                     self.visit_mac(mac, Some(item.ident), MacroPosition::Item);\n                 }\n                 ast::ItemKind::ForeignMod(ref foreign_mod) => {\n@@ -619,7 +619,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                 );\n                 self.push_rewrite(ti.span, rewrite);\n             }\n-            ast::AssocItemKind::Macro(ref mac) => {\n+            ast::AssocItemKind::MacCall(ref mac) => {\n                 self.visit_mac(mac, Some(ti.ident), MacroPosition::Item);\n             }\n         }\n@@ -669,7 +669,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                         Some(generic_bounds) => rewrite_opaque_impl_type(\n                             &self.get_context(),\n                             ii.ident,\n-                            &generics,\n+                            generics,\n                             generic_bounds,\n                             self.block_indent,\n                         ),\n@@ -678,13 +678,13 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                 };\n                 self.push_rewrite(ii.span, rewrite);\n             }\n-            ast::AssocItemKind::Macro(ref mac) => {\n+            ast::AssocItemKind::MacCall(ref mac) => {\n                 self.visit_mac(mac, Some(ii.ident), MacroPosition::Item);\n             }\n         }\n     }\n \n-    fn visit_mac(&mut self, mac: &ast::Mac, ident: Option<ast::Ident>, pos: MacroPosition) {\n+    fn visit_mac(&mut self, mac: &ast::MacCall, ident: Option<ast::Ident>, pos: MacroPosition) {\n         skip_out_of_file_lines_range_visitor!(self, mac.span());\n \n         // 1 = ;"}]}