{"sha": "6f01ff61b3d9d722031fdb39747283c911b97049", "node_id": "C_kwDOAAsO6NoAKDZmMDFmZjYxYjNkOWQ3MjIwMzFmZGIzOTc0NzI4M2M5MTFiOTcwNDk", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-04T12:57:10Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-05T03:29:41Z"}, "message": "interpret: fix CheckedBinOp behavior when overflow checking is disabled", "tree": {"sha": "f86134b113301a6198abca047311e31883e24e5e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f86134b113301a6198abca047311e31883e24e5e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f01ff61b3d9d722031fdb39747283c911b97049", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f01ff61b3d9d722031fdb39747283c911b97049", "html_url": "https://github.com/rust-lang/rust/commit/6f01ff61b3d9d722031fdb39747283c911b97049", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f01ff61b3d9d722031fdb39747283c911b97049/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1d1848cc60a407d06f90fd16877a19bed6edd9b", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1d1848cc60a407d06f90fd16877a19bed6edd9b", "html_url": "https://github.com/rust-lang/rust/commit/e1d1848cc60a407d06f90fd16877a19bed6edd9b"}], "stats": {"total": 16, "additions": 14, "deletions": 2}, "files": [{"sha": "6744aace84969f773888ff6f9eca46b39dfb2e32", "filename": "compiler/rustc_const_eval/src/interpret/intrinsics.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f01ff61b3d9d722031fdb39747283c911b97049/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f01ff61b3d9d722031fdb39747283c911b97049/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs?ref=6f01ff61b3d9d722031fdb39747283c911b97049", "patch": "@@ -217,7 +217,9 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     sym::mul_with_overflow => BinOp::Mul,\n                     _ => bug!(),\n                 };\n-                self.binop_with_overflow(bin_op, &lhs, &rhs, dest)?;\n+                self.binop_with_overflow(\n+                    bin_op, /*force_overflow_checks*/ true, &lhs, &rhs, dest,\n+                )?;\n             }\n             sym::saturating_add | sym::saturating_sub => {\n                 let l = self.read_immediate(&args[0])?;"}, {"sha": "454243ddca645127eb161f7c12b05438705e76a8", "filename": "compiler/rustc_const_eval/src/interpret/operator.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6f01ff61b3d9d722031fdb39747283c911b97049/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f01ff61b3d9d722031fdb39747283c911b97049/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperator.rs?ref=6f01ff61b3d9d722031fdb39747283c911b97049", "patch": "@@ -12,9 +12,13 @@ use super::{ImmTy, Immediate, InterpCx, Machine, PlaceTy};\n impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     /// Applies the binary operation `op` to the two operands and writes a tuple of the result\n     /// and a boolean signifying the potential overflow to the destination.\n+    ///\n+    /// `force_overflow_checks` indicates whether overflow checks should be done even when\n+    /// `tcx.sess.overflow_checks()` is `false`.\n     pub fn binop_with_overflow(\n         &mut self,\n         op: mir::BinOp,\n+        force_overflow_checks: bool,\n         left: &ImmTy<'tcx, M::PointerTag>,\n         right: &ImmTy<'tcx, M::PointerTag>,\n         dest: &PlaceTy<'tcx, M::PointerTag>,\n@@ -26,6 +30,10 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             \"type mismatch for result of {:?}\",\n             op,\n         );\n+        // As per https://github.com/rust-lang/rust/pull/98738, we always return `false` in the 2nd\n+        // component when overflow checking is disabled.\n+        let overflowed = overflowed && (force_overflow_checks || self.tcx.sess.overflow_checks());\n+        // Write the result to `dest`.\n         if let Abi::ScalarPair(..) = dest.layout.abi {\n             // We can use the optimized path and avoid `place_field` (which might do\n             // `force_allocation`)."}, {"sha": "2ee7ed57ab5a7f1f033a24ef63eeb55e3674d533", "filename": "compiler/rustc_const_eval/src/interpret/step.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f01ff61b3d9d722031fdb39747283c911b97049/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f01ff61b3d9d722031fdb39747283c911b97049/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs?ref=6f01ff61b3d9d722031fdb39747283c911b97049", "patch": "@@ -185,7 +185,9 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 let left = self.read_immediate(&self.eval_operand(left, None)?)?;\n                 let layout = binop_right_homogeneous(bin_op).then_some(left.layout);\n                 let right = self.read_immediate(&self.eval_operand(right, layout)?)?;\n-                self.binop_with_overflow(bin_op, &left, &right, &dest)?;\n+                self.binop_with_overflow(\n+                    bin_op, /*force_overflow_checks*/ false, &left, &right, &dest,\n+                )?;\n             }\n \n             UnaryOp(un_op, ref operand) => {"}]}