{"sha": "dd973d1b1235813c5e38a092272f2231800b1e53", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkOTczZDFiMTIzNTgxM2M1ZTM4YTA5MjI3MmYyMjMxODAwYjFlNTM=", "commit": {"author": {"name": "CAD97", "email": "cad97@cad97.com", "date": "2020-02-11T19:10:49Z"}, "committer": {"name": "CAD97", "email": "cad97@cad97.com", "date": "2020-03-21T23:45:45Z"}, "message": "Allow calculating the layout behind a pointer\n\nLet align/size_of_of_val intrinsics work on ptrs", "tree": {"sha": "051255934762fbc8b38072a3f5cca5b65c2d0be8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/051255934762fbc8b38072a3f5cca5b65c2d0be8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd973d1b1235813c5e38a092272f2231800b1e53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd973d1b1235813c5e38a092272f2231800b1e53", "html_url": "https://github.com/rust-lang/rust/commit/dd973d1b1235813c5e38a092272f2231800b1e53", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd973d1b1235813c5e38a092272f2231800b1e53/comments", "author": {"login": "CAD97", "id": 5992217, "node_id": "MDQ6VXNlcjU5OTIyMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5992217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CAD97", "html_url": "https://github.com/CAD97", "followers_url": "https://api.github.com/users/CAD97/followers", "following_url": "https://api.github.com/users/CAD97/following{/other_user}", "gists_url": "https://api.github.com/users/CAD97/gists{/gist_id}", "starred_url": "https://api.github.com/users/CAD97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CAD97/subscriptions", "organizations_url": "https://api.github.com/users/CAD97/orgs", "repos_url": "https://api.github.com/users/CAD97/repos", "events_url": "https://api.github.com/users/CAD97/events{/privacy}", "received_events_url": "https://api.github.com/users/CAD97/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CAD97", "id": 5992217, "node_id": "MDQ6VXNlcjU5OTIyMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5992217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CAD97", "html_url": "https://github.com/CAD97", "followers_url": "https://api.github.com/users/CAD97/followers", "following_url": "https://api.github.com/users/CAD97/following{/other_user}", "gists_url": "https://api.github.com/users/CAD97/gists{/gist_id}", "starred_url": "https://api.github.com/users/CAD97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CAD97/subscriptions", "organizations_url": "https://api.github.com/users/CAD97/orgs", "repos_url": "https://api.github.com/users/CAD97/repos", "events_url": "https://api.github.com/users/CAD97/events{/privacy}", "received_events_url": "https://api.github.com/users/CAD97/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "564758c4c329e89722454dd2fbb35f1ac0b8b47c", "url": "https://api.github.com/repos/rust-lang/rust/commits/564758c4c329e89722454dd2fbb35f1ac0b8b47c", "html_url": "https://github.com/rust-lang/rust/commit/564758c4c329e89722454dd2fbb35f1ac0b8b47c"}], "stats": {"total": 150, "additions": 142, "deletions": 8}, "files": [{"sha": "a86f53af50977eb803c2ad66aef408d283a232d2", "filename": "src/libcore/alloc.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/dd973d1b1235813c5e38a092272f2231800b1e53/src%2Flibcore%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd973d1b1235813c5e38a092272f2231800b1e53/src%2Flibcore%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Falloc.rs?ref=dd973d1b1235813c5e38a092272f2231800b1e53", "patch": "@@ -140,6 +140,42 @@ impl Layout {\n         unsafe { Layout::from_size_align_unchecked(size, align) }\n     }\n \n+    /// Produces layout describing a record that could be used to\n+    /// allocate backing structure for `T` (which could be a trait\n+    /// or other unsized type like a slice).\n+    ///\n+    /// # Safety\n+    ///\n+    /// This function is only safe to call if the following conditions hold:\n+    ///\n+    /// - If `T` is `Sized`, this function is always safe to call.\n+    /// - If the unsized tail of `T` is:\n+    ///     - a [slice], then the length of the slice tail must be an intialized\n+    ///       integer, and the size of the *entire value*\n+    ///       (dynamic tail length + statically sized prefix) must fit in `isize`.\n+    ///     - a [trait object], then the vtable part of the pointer must point\n+    ///       to a valid vtable acquired by an unsizing coersion, and the size\n+    ///       of the *entire value* (dynamic tail length + statically sized prefix)\n+    ///       must fit in `isize`.\n+    ///     - an (unstable) [extern type], then this function is always safe to\n+    ///       call, but may panic or otherwise return the wrong value, as the\n+    ///       extern type's layout is not known. This is the same behavior as\n+    ///       [`Layout::for_value`] on a reference to an extern type tail.\n+    ///     - otherwise, it is conservatively not allowed to call this function.\n+    ///\n+    /// [slice]: ../../std/primitive.slice.html\n+    /// [trait object]: ../../book/ch17-02-trait-objects.html\n+    /// [extern type]: ../../unstable-book/language-features/extern-types.html\n+    #[inline]\n+    #[cfg(not(bootstrap))]\n+    #[unstable(feature = \"layout_for_ptr\", issue = \"69835\")]\n+    pub unsafe fn for_value_raw<T: ?Sized>(t: *const T) -> Self {\n+        let (size, align) = (mem::size_of_val_raw(t), mem::align_of_val_raw(t));\n+        // See rationale in `new` for why this is using an unsafe variant below\n+        debug_assert!(Layout::from_size_align(size, align).is_ok());\n+        Layout::from_size_align_unchecked(size, align)\n+    }\n+\n     /// Creates a `NonNull` that is dangling, but well-aligned for this Layout.\n     ///\n     /// Note that the pointer value may potentially represent a valid pointer,"}, {"sha": "56bace0269145b4137d9a4ec1006ad0f93044750", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/dd973d1b1235813c5e38a092272f2231800b1e53/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd973d1b1235813c5e38a092272f2231800b1e53/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=dd973d1b1235813c5e38a092272f2231800b1e53", "patch": "@@ -980,13 +980,24 @@ extern \"rust-intrinsic\" {\n     ///\n     /// The stabilized version of this intrinsic is\n     /// [`std::mem::size_of_val`](../../std/mem/fn.size_of_val.html).\n+    #[cfg(bootstrap)]\n     pub fn size_of_val<T: ?Sized>(_: &T) -> usize;\n     /// The minimum alignment of the type of the value that `val` points to.\n     ///\n     /// The stabilized version of this intrinsic is\n     /// [`std::mem::min_align_of_val`](../../std/mem/fn.min_align_of_val.html).\n+    #[cfg(bootstrap)]\n     pub fn min_align_of_val<T: ?Sized>(_: &T) -> usize;\n \n+    /// The size of the referenced value in bytes.\n+    ///\n+    /// The stabilized version of this intrinsic is\n+    /// [`std::mem::size_of_val`](../../std/mem/fn.size_of_val.html).\n+    #[cfg(not(bootstrap))]\n+    pub fn size_of_val<T: ?Sized>(_: *const T) -> usize;\n+    #[cfg(not(bootstrap))]\n+    pub fn min_align_of_val<T: ?Sized>(_: *const T) -> usize;\n+\n     /// Gets a static string slice containing the name of a type.\n     ///\n     /// The stabilized version of this intrinsic is"}, {"sha": "6fad9f43d22c9ed4a4a8fc7ab8043990040d0e07", "filename": "src/libcore/mem/mod.rs", "status": "modified", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/dd973d1b1235813c5e38a092272f2231800b1e53/src%2Flibcore%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd973d1b1235813c5e38a092272f2231800b1e53/src%2Flibcore%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem%2Fmod.rs?ref=dd973d1b1235813c5e38a092272f2231800b1e53", "patch": "@@ -303,6 +303,54 @@ pub fn size_of_val<T: ?Sized>(val: &T) -> usize {\n     intrinsics::size_of_val(val)\n }\n \n+/// Returns the size of the pointed-to value in bytes.\n+///\n+/// This is usually the same as `size_of::<T>()`. However, when `T` *has* no\n+/// statically-known size, e.g., a slice [`[T]`][slice] or a [trait object],\n+/// then `size_of_val_raw` can be used to get the dynamically-known size.\n+///\n+/// # Safety\n+///\n+/// This function is only safe to call if the following conditions hold:\n+///\n+/// - If `T` is `Sized`, this function is always safe to call.\n+/// - If the unsized tail of `T` is:\n+///     - a [slice], then the length of the slice tail must be an intialized\n+///       integer, and the size of the *entire value*\n+///       (dynamic tail length + statically sized prefix) must fit in `isize`.\n+///     - a [trait object], then the vtable part of the pointer must point\n+///       to a valid vtable acquired by an unsizing coersion, and the size\n+///       of the *entire value* (dynamic tail length + statically sized prefix)\n+///       must fit in `isize`.\n+///     - an (unstable) [extern type], then this function is always safe to\n+///       call, but may panic or otherwise return the wrong value, as the\n+///       extern type's layout is not known. This is the same behavior as\n+///       [`size_of_val`] on a reference to an extern type tail.\n+///     - otherwise, it is conservatively not allowed to call this function.\n+///\n+/// [slice]: ../../std/primitive.slice.html\n+/// [trait object]: ../../book/ch17-02-trait-objects.html\n+/// [extern type]: ../../unstable-book/language-features/extern-types.html\n+///\n+/// # Examples\n+///\n+/// ```\n+/// #![feature(layout_for_ptr)]\n+/// use std::mem;\n+///\n+/// assert_eq!(4, mem::size_of_val(&5i32));\n+///\n+/// let x: [u8; 13] = [0; 13];\n+/// let y: &[u8] = &x;\n+/// assert_eq!(13, unsafe { mem::size_of_val_raw(y) });\n+/// ```\n+#[inline]\n+#[cfg(not(bootstrap))]\n+#[unstable(feature = \"layout_for_ptr\", issue = \"69835\")]\n+pub unsafe fn size_of_val_raw<T: ?Sized>(val: *const T) -> usize {\n+    intrinsics::size_of_val(val)\n+}\n+\n /// Returns the [ABI]-required minimum alignment of a type.\n ///\n /// Every reference to a value of the type `T` must be a multiple of this number.\n@@ -390,6 +438,50 @@ pub fn align_of_val<T: ?Sized>(val: &T) -> usize {\n     min_align_of_val(val)\n }\n \n+/// Returns the [ABI]-required minimum alignment of the type of the value that `val` points to.\n+///\n+/// Every reference to a value of the type `T` must be a multiple of this number.\n+///\n+/// [ABI]: https://en.wikipedia.org/wiki/Application_binary_interface\n+///\n+/// # Safety\n+///\n+/// This function is only safe to call if the following conditions hold:\n+///\n+/// - If `T` is `Sized`, this function is always safe to call.\n+/// - If the unsized tail of `T` is:\n+///     - a [slice], then the length of the slice tail must be an intialized\n+///       integer, and the size of the *entire value*\n+///       (dynamic tail length + statically sized prefix) must fit in `isize`.\n+///     - a [trait object], then the vtable part of the pointer must point\n+///       to a valid vtable acquired by an unsizing coersion, and the size\n+///       of the *entire value* (dynamic tail length + statically sized prefix)\n+///       must fit in `isize`.\n+///     - an (unstable) [extern type], then this function is always safe to\n+///       call, but may panic or otherwise return the wrong value, as the\n+///       extern type's layout is not known. This is the same behavior as\n+///       [`align_of_val`] on a reference to an extern type tail.\n+///     - otherwise, it is conservatively not allowed to call this function.\n+///\n+/// [slice]: ../../std/primitive.slice.html\n+/// [trait object]: ../../book/ch17-02-trait-objects.html\n+/// [extern type]: ../../unstable-book/language-features/extern-types.html\n+///\n+/// # Examples\n+///\n+/// ```\n+/// #![feature(layout_for_ptr)]\n+/// use std::mem;\n+///\n+/// assert_eq!(4, unsafe { mem::align_of_val_raw(&5i32) });\n+/// ```\n+#[inline]\n+#[cfg(not(bootstrap))]\n+#[unstable(feature = \"layout_for_ptr\", issue = \"69835\")]\n+pub unsafe fn align_of_val_raw<T: ?Sized>(val: *const T) -> usize {\n+    intrinsics::min_align_of_val(val)\n+}\n+\n /// Returns `true` if dropping values of type `T` matters.\n ///\n /// This is purely an optimization hint, and may be implemented conservatively:"}, {"sha": "da263cec53f9d53eb4ae54ed59310d074287544d", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/dd973d1b1235813c5e38a092272f2231800b1e53/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd973d1b1235813c5e38a092272f2231800b1e53/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=dd973d1b1235813c5e38a092272f2231800b1e53", "patch": "@@ -137,14 +137,9 @@ pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>) {\n         let (n_tps, inputs, output) = match &name[..] {\n             \"breakpoint\" => (0, Vec::new(), tcx.mk_unit()),\n             \"size_of\" | \"pref_align_of\" | \"min_align_of\" => (1, Vec::new(), tcx.types.usize),\n-            \"size_of_val\" | \"min_align_of_val\" => (\n-                1,\n-                vec![tcx.mk_imm_ref(\n-                    tcx.mk_region(ty::ReLateBound(ty::INNERMOST, ty::BrAnon(0))),\n-                    param(0),\n-                )],\n-                tcx.types.usize,\n-            ),\n+            \"size_of_val\" | \"min_align_of_val\" => {\n+                (1, vec![tcx.mk_imm_ptr(param(0))], tcx.types.usize)\n+            }\n             \"rustc_peek\" => (1, vec![param(0)], param(0)),\n             \"caller_location\" => (0, vec![], tcx.caller_location_ty()),\n             \"panic_if_uninhabited\" => (1, Vec::new(), tcx.mk_unit()),"}]}