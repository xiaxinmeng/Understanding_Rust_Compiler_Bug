{"sha": "0dcdbaec0b49a149316719b32241d8975bd192c9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkY2RiYWVjMGI0OWExNDkzMTY3MTliMzIyNDFkODk3NWJkMTkyYzk=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-12-16T06:20:30Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-01-08T17:30:27Z"}, "message": "Point at the def span of trait refs E0277", "tree": {"sha": "b27c7c6580e22fe4acc7d4b4b64f95ac0b9613e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b27c7c6580e22fe4acc7d4b4b64f95ac0b9613e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0dcdbaec0b49a149316719b32241d8975bd192c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0dcdbaec0b49a149316719b32241d8975bd192c9", "html_url": "https://github.com/rust-lang/rust/commit/0dcdbaec0b49a149316719b32241d8975bd192c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0dcdbaec0b49a149316719b32241d8975bd192c9/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c55615155d161c8abb307db0019ab58545cd246b", "url": "https://api.github.com/repos/rust-lang/rust/commits/c55615155d161c8abb307db0019ab58545cd246b", "html_url": "https://github.com/rust-lang/rust/commit/c55615155d161c8abb307db0019ab58545cd246b"}], "stats": {"total": 84, "additions": 71, "deletions": 13}, "files": [{"sha": "d736d45a5a485d2d5d8c9bc46ead1bb753a4bfa8", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0dcdbaec0b49a149316719b32241d8975bd192c9/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dcdbaec0b49a149316719b32241d8975bd192c9/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=0dcdbaec0b49a149316719b32241d8975bd192c9", "patch": "@@ -71,6 +71,7 @@ use rustc_hir::Node;\n use errors::{\n     pluralize, struct_span_err, Applicability, DiagnosticBuilder, DiagnosticStyledString,\n };\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_error_codes::*;\n use rustc_span::{DesugaringKind, Pos, Span};\n use rustc_target::spec::abi;\n@@ -1362,9 +1363,15 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 let kind = match t.kind {\n                     ty::Closure(..) => \"closure\",\n                     ty::Opaque(..) => \"opaque type\",\n+                    ty::Generator(..) => \"generator\",\n+                    ty::Foreign(..) => \"foreign type\",\n                     _ => \"\",\n                 };\n-                if let ty::Closure(def_id, _) | ty::Opaque(def_id, _) = t.kind {\n+                if let ty::Closure(def_id, _)\n+                | ty::Opaque(def_id, _)\n+                | ty::Generator(def_id, ..)\n+                | ty::Foreign(def_id) = t.kind\n+                {\n                     let span = self.tcx.def_span(def_id);\n                     // Avoid cluttering the output when the \"found\" and error span overlap:\n                     //"}, {"sha": "8c2cc412a480b686982278e1e411ba92a80fd660", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 29, "deletions": 5, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/0dcdbaec0b49a149316719b32241d8975bd192c9/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dcdbaec0b49a149316719b32241d8975bd192c9/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=0dcdbaec0b49a149316719b32241d8975bd192c9", "patch": "@@ -446,7 +446,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 flags.push((sym::from_method, Some(method.to_string())));\n             }\n         }\n-        if let Some(t) = self.get_parent_trait_ref(&obligation.cause.code) {\n+        if let Some((t, _)) = self.get_parent_trait_ref(&obligation.cause.code) {\n             flags.push((sym::parent_trait, Some(t)));\n         }\n \n@@ -665,13 +665,28 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     }\n \n     /// Gets the parent trait chain start\n-    fn get_parent_trait_ref(&self, code: &ObligationCauseCode<'tcx>) -> Option<String> {\n+    fn get_parent_trait_ref(\n+        &self,\n+        code: &ObligationCauseCode<'tcx>,\n+    ) -> Option<(String, Option<Span>)> {\n         match code {\n             &ObligationCauseCode::BuiltinDerivedObligation(ref data) => {\n                 let parent_trait_ref = self.resolve_vars_if_possible(&data.parent_trait_ref);\n                 match self.get_parent_trait_ref(&data.parent_code) {\n                     Some(t) => Some(t),\n-                    None => Some(parent_trait_ref.skip_binder().self_ty().to_string()),\n+                    None => {\n+                        let ty = parent_trait_ref.skip_binder().self_ty();\n+                        let span = if let ty::Closure(def_id, _)\n+                        | ty::Opaque(def_id, _)\n+                        | ty::Generator(def_id, ..)\n+                        | ty::Foreign(def_id) = ty.kind\n+                        {\n+                            Some(self.tcx.def_span(def_id))\n+                        } else {\n+                            None\n+                        };\n+                        Some((ty.to_string(), span))\n+                    }\n                 }\n             }\n             _ => None,\n@@ -719,9 +734,15 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                             return;\n                         }\n                         let trait_ref = trait_predicate.to_poly_trait_ref();\n-                        let (post_message, pre_message) = self\n+                        let (post_message, pre_message, type_def) = self\n                             .get_parent_trait_ref(&obligation.cause.code)\n-                            .map(|t| (format!(\" in `{}`\", t), format!(\"within `{}`, \", t)))\n+                            .map(|(t, s)| {\n+                                (\n+                                    format!(\" in `{}`\", t),\n+                                    format!(\"within `{}`, \", t),\n+                                    s.map(|s| (format!(\"within this `{}`\", t), s)),\n+                                )\n+                            })\n                             .unwrap_or_default();\n \n                         let OnUnimplementedNote { message, label, note, enclosing_scope } =\n@@ -795,6 +816,9 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                         } else {\n                             err.span_label(span, explanation);\n                         }\n+                        if let Some((msg, span)) = type_def {\n+                            err.span_label(span, &msg);\n+                        }\n                         if let Some(ref s) = note {\n                             // If it has a custom `#[rustc_on_unimplemented]` note, let's display it\n                             err.note(s.as_str());"}, {"sha": "d6828172928dd7792826fbd92c8ee3ed18c23d72", "filename": "src/test/ui/async-await/issue-64130-3-other.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0dcdbaec0b49a149316719b32241d8975bd192c9/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-3-other.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dcdbaec0b49a149316719b32241d8975bd192c9/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-3-other.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-3-other.stderr?ref=0dcdbaec0b49a149316719b32241d8975bd192c9", "patch": "@@ -3,6 +3,9 @@ error[E0277]: the trait bound `Foo: Qux` is not satisfied in `impl std::future::\n    |\n LL | fn is_qux<T: Qux>(t: T) { }\n    |    ------    --- required by this bound in `is_qux`\n+LL | \n+LL | async fn bar() {\n+   |                - within this `impl std::future::Future`\n ...\n LL |     is_qux(bar());\n    |     ^^^^^^ within `impl std::future::Future`, the trait `Qux` is not implemented for `Foo`"}, {"sha": "20815e80acb89298f53c9640a46c60128b982504", "filename": "src/test/ui/impl-trait/auto-trait-leak.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0dcdbaec0b49a149316719b32241d8975bd192c9/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dcdbaec0b49a149316719b32241d8975bd192c9/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr?ref=0dcdbaec0b49a149316719b32241d8975bd192c9", "patch": "@@ -77,6 +77,9 @@ LL | fn send<T: Send>(_: T) {}\n ...\n LL |     send(cycle2().clone());\n    |     ^^^^ `std::rc::Rc<std::string::String>` cannot be sent between threads safely\n+...\n+LL | fn cycle2() -> impl Clone {\n+   |                ---------- within this `impl std::clone::Clone`\n    |\n    = help: within `impl std::clone::Clone`, the trait `std::marker::Send` is not implemented for `std::rc::Rc<std::string::String>`\n    = note: required because it appears within the type `impl std::clone::Clone`"}, {"sha": "a93b3dbc71b60c7b5a4302dd1db175cd38cd931c", "filename": "src/test/ui/impl-trait/auto-trait-leak2.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0dcdbaec0b49a149316719b32241d8975bd192c9/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dcdbaec0b49a149316719b32241d8975bd192c9/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak2.stderr?ref=0dcdbaec0b49a149316719b32241d8975bd192c9", "patch": "@@ -1,6 +1,9 @@\n error[E0277]: `std::rc::Rc<std::cell::Cell<i32>>` cannot be sent between threads safely\n   --> $DIR/auto-trait-leak2.rs:13:5\n    |\n+LL | fn before() -> impl Fn(i32) {\n+   |                ------------ within this `impl std::ops::Fn<(i32,)>`\n+...\n LL | fn send<T: Send>(_: T) {}\n    |    ----    ---- required by this bound in `send`\n ...\n@@ -19,6 +22,9 @@ LL | fn send<T: Send>(_: T) {}\n ...\n LL |     send(after());\n    |     ^^^^ `std::rc::Rc<std::cell::Cell<i32>>` cannot be sent between threads safely\n+...\n+LL | fn after() -> impl Fn(i32) {\n+   |               ------------ within this `impl std::ops::Fn<(i32,)>`\n    |\n    = help: within `impl std::ops::Fn<(i32,)>`, the trait `std::marker::Send` is not implemented for `std::rc::Rc<std::cell::Cell<i32>>`\n    = note: required because it appears within the type `[closure@$DIR/auto-trait-leak2.rs:24:5: 24:22 p:std::rc::Rc<std::cell::Cell<i32>>]`"}, {"sha": "39640e373991f06c0030031f7140f14c7f7699d1", "filename": "src/test/ui/kindck/kindck-nonsendable-1.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0dcdbaec0b49a149316719b32241d8975bd192c9/src%2Ftest%2Fui%2Fkindck%2Fkindck-nonsendable-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dcdbaec0b49a149316719b32241d8975bd192c9/src%2Ftest%2Fui%2Fkindck%2Fkindck-nonsendable-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-nonsendable-1.stderr?ref=0dcdbaec0b49a149316719b32241d8975bd192c9", "patch": "@@ -5,7 +5,9 @@ LL | fn bar<F:FnOnce() + Send>(_: F) { }\n    |    ---              ---- required by this bound in `bar`\n ...\n LL |     bar(move|| foo(x));\n-   |     ^^^ `std::rc::Rc<usize>` cannot be sent between threads safely\n+   |     ^^^ ------------- within this `[closure@$DIR/kindck-nonsendable-1.rs:9:9: 9:22 x:std::rc::Rc<usize>]`\n+   |     |\n+   |     `std::rc::Rc<usize>` cannot be sent between threads safely\n    |\n    = help: within `[closure@$DIR/kindck-nonsendable-1.rs:9:9: 9:22 x:std::rc::Rc<usize>]`, the trait `std::marker::Send` is not implemented for `std::rc::Rc<usize>`\n    = note: required because it appears within the type `[closure@$DIR/kindck-nonsendable-1.rs:9:9: 9:22 x:std::rc::Rc<usize>]`"}, {"sha": "65946ee8a20cf8588ca193830159779fa497e307", "filename": "src/test/ui/no-send-res-ports.stderr", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0dcdbaec0b49a149316719b32241d8975bd192c9/src%2Ftest%2Fui%2Fno-send-res-ports.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dcdbaec0b49a149316719b32241d8975bd192c9/src%2Ftest%2Fui%2Fno-send-res-ports.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno-send-res-ports.stderr?ref=0dcdbaec0b49a149316719b32241d8975bd192c9", "patch": "@@ -1,13 +1,20 @@\n error[E0277]: `std::rc::Rc<()>` cannot be sent between threads safely\n   --> $DIR/no-send-res-ports.rs:29:5\n    |\n-LL |     thread::spawn(move|| {\n-   |     ^^^^^^^^^^^^^ `std::rc::Rc<()>` cannot be sent between threads safely\n+LL |       thread::spawn(move|| {\n+   |  _____^^^^^^^^^^^^^_-\n+   | |     |\n+   | |     `std::rc::Rc<()>` cannot be sent between threads safely\n+LL | |\n+LL | |         let y = x;\n+LL | |         println!(\"{:?}\", y);\n+LL | |     });\n+   | |_____- within this `[closure@$DIR/no-send-res-ports.rs:29:19: 33:6 x:main::Foo]`\n    | \n   ::: $SRC_DIR/libstd/thread/mod.rs:LL:COL\n    |\n-LL |     F: Send + 'static,\n-   |        ---- required by this bound in `std::thread::spawn`\n+LL |       F: Send + 'static,\n+   |          ---- required by this bound in `std::thread::spawn`\n    |\n    = help: within `[closure@$DIR/no-send-res-ports.rs:29:19: 33:6 x:main::Foo]`, the trait `std::marker::Send` is not implemented for `std::rc::Rc<()>`\n    = note: required because it appears within the type `Port<()>`"}, {"sha": "20c7f81cf5ef54a7de923b3570f10fec95fb8860", "filename": "src/test/ui/not-clone-closure.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0dcdbaec0b49a149316719b32241d8975bd192c9/src%2Ftest%2Fui%2Fnot-clone-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dcdbaec0b49a149316719b32241d8975bd192c9/src%2Ftest%2Fui%2Fnot-clone-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnot-clone-closure.stderr?ref=0dcdbaec0b49a149316719b32241d8975bd192c9", "patch": "@@ -1,8 +1,14 @@\n error[E0277]: the trait bound `S: std::clone::Clone` is not satisfied in `[closure@$DIR/not-clone-closure.rs:7:17: 9:6 a:S]`\n   --> $DIR/not-clone-closure.rs:11:23\n    |\n-LL |     let hello = hello.clone();\n-   |                       ^^^^^ within `[closure@$DIR/not-clone-closure.rs:7:17: 9:6 a:S]`, the trait `std::clone::Clone` is not implemented for `S`\n+LL |       let hello = move || {\n+   |  _________________-\n+LL | |         println!(\"Hello {}\", a.0);\n+LL | |     };\n+   | |_____- within this `[closure@$DIR/not-clone-closure.rs:7:17: 9:6 a:S]`\n+LL | \n+LL |       let hello = hello.clone();\n+   |                         ^^^^^ within `[closure@$DIR/not-clone-closure.rs:7:17: 9:6 a:S]`, the trait `std::clone::Clone` is not implemented for `S`\n    |\n    = note: required because it appears within the type `[closure@$DIR/not-clone-closure.rs:7:17: 9:6 a:S]`\n "}]}