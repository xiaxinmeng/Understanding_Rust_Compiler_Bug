{"sha": "c808d0b289c1f8e0f26885bf44cb2ba1873ba10e", "node_id": "C_kwDOAAsO6NoAKGM4MDhkMGIyODljMWY4ZTBmMjY4ODViZjQ0Y2IyYmExODczYmExMGU", "commit": {"author": {"name": "Lukas Markeffsky", "email": "@", "date": "2022-12-03T22:54:06Z"}, "committer": {"name": "Lukas Markeffsky", "email": "@", "date": "2022-12-03T22:54:06Z"}, "message": "more comments", "tree": {"sha": "2c749b95c1092ed834008f6a415b396afc843b98", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c749b95c1092ed834008f6a415b396afc843b98"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c808d0b289c1f8e0f26885bf44cb2ba1873ba10e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c808d0b289c1f8e0f26885bf44cb2ba1873ba10e", "html_url": "https://github.com/rust-lang/rust/commit/c808d0b289c1f8e0f26885bf44cb2ba1873ba10e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c808d0b289c1f8e0f26885bf44cb2ba1873ba10e/comments", "author": null, "committer": null, "parents": [{"sha": "35c00a9731809292959e98b1e7da3c6e2673f3cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/35c00a9731809292959e98b1e7da3c6e2673f3cc", "html_url": "https://github.com/rust-lang/rust/commit/35c00a9731809292959e98b1e7da3c6e2673f3cc"}], "stats": {"total": 7, "additions": 4, "deletions": 3}, "files": [{"sha": "0a948a2810a4eff5b2a9e2281845b74528f2036c", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c808d0b289c1f8e0f26885bf44cb2ba1873ba10e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c808d0b289c1f8e0f26885bf44cb2ba1873ba10e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=c808d0b289c1f8e0f26885bf44cb2ba1873ba10e", "patch": "@@ -390,10 +390,11 @@ impl<'a> Parser<'a> {\n             // want to keep their span info to improve diagnostics in these cases in a later stage.\n             (true, Some(AssocOp::Multiply)) | // `{ 42 } *foo = bar;` or `{ 42 } * 3`\n             (true, Some(AssocOp::Subtract)) | // `{ 42 } -5`\n-            (true, Some(AssocOp::Add)) | // `{ 42 } + 42\n+            (true, Some(AssocOp::Add)) | // `{ 42 } + 42` (unary plus)\n             (true, Some(AssocOp::LAnd)) | // `{ 42 } &&x` (#61475) or `{ 42 } && if x { 1 } else { 0 }`\n-            (true, Some(AssocOp::LOr)) |\n-            (true, Some(AssocOp::BitOr)) => {\n+            (true, Some(AssocOp::LOr)) | // `{ 42 } || 42` (\"logical or\" or closure)\n+            (true, Some(AssocOp::BitOr)) // `{ 42 } | 42` or `{ 42 } |x| 42`\n+            => {\n                 // These cases are ambiguous and can't be identified in the parser alone.\n                 //\n                 // Bitwise AND is left out because guessing intent is hard. We can make"}]}