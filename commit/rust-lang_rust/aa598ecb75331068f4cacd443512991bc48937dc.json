{"sha": "aa598ecb75331068f4cacd443512991bc48937dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhNTk4ZWNiNzUzMzEwNjhmNGNhY2Q0NDM1MTI5OTFiYzQ4OTM3ZGM=", "commit": {"author": {"name": "kjeremy", "email": "kjeremy@gmail.com", "date": "2020-07-13T21:41:47Z"}, "committer": {"name": "kjeremy", "email": "kjeremy@gmail.com", "date": "2020-07-13T21:41:47Z"}, "message": "Filter assists", "tree": {"sha": "785b88b46016507ed2ced5befce6885780664ff2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/785b88b46016507ed2ced5befce6885780664ff2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa598ecb75331068f4cacd443512991bc48937dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa598ecb75331068f4cacd443512991bc48937dc", "html_url": "https://github.com/rust-lang/rust/commit/aa598ecb75331068f4cacd443512991bc48937dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa598ecb75331068f4cacd443512991bc48937dc/comments", "author": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "853440775d72974585ca3fe39f9688a4d4302dd3", "url": "https://api.github.com/repos/rust-lang/rust/commits/853440775d72974585ca3fe39f9688a4d4302dd3", "html_url": "https://github.com/rust-lang/rust/commit/853440775d72974585ca3fe39f9688a4d4302dd3"}], "stats": {"total": 177, "additions": 157, "deletions": 20}, "files": [{"sha": "9ca2cfe68bcebccda77a49db1e17309dccd7ce8d", "filename": "crates/ra_assists/src/assist_context.rs", "status": "modified", "additions": 34, "deletions": 4, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/aa598ecb75331068f4cacd443512991bc48937dc/crates%2Fra_assists%2Fsrc%2Fassist_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa598ecb75331068f4cacd443512991bc48937dc/crates%2Fra_assists%2Fsrc%2Fassist_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassist_context.rs?ref=aa598ecb75331068f4cacd443512991bc48937dc", "patch": "@@ -19,7 +19,7 @@ use ra_text_edit::TextEditBuilder;\n \n use crate::{\n     assist_config::{AssistConfig, SnippetCap},\n-    Assist, AssistId, GroupLabel, ResolvedAssist,\n+    Assist, AssistId, AssistKind, GroupLabel, ResolvedAssist,\n };\n \n /// `AssistContext` allows to apply an assist or check if it could be applied.\n@@ -57,16 +57,18 @@ pub(crate) struct AssistContext<'a> {\n     pub(crate) sema: Semantics<'a, RootDatabase>,\n     pub(crate) frange: FileRange,\n     source_file: SourceFile,\n+    allowed: Option<Vec<AssistKind>>,\n }\n \n impl<'a> AssistContext<'a> {\n     pub(crate) fn new(\n         sema: Semantics<'a, RootDatabase>,\n         config: &'a AssistConfig,\n         frange: FileRange,\n+        allowed: Option<Vec<AssistKind>>,\n     ) -> AssistContext<'a> {\n         let source_file = sema.parse(frange.file_id);\n-        AssistContext { config, sema, frange, source_file }\n+        AssistContext { config, sema, frange, source_file, allowed }\n     }\n \n     pub(crate) fn db(&self) -> &RootDatabase {\n@@ -103,14 +105,26 @@ pub(crate) struct Assists {\n     resolve: bool,\n     file: FileId,\n     buf: Vec<(Assist, Option<SourceChange>)>,\n+    allowed: Option<Vec<AssistKind>>,\n }\n \n impl Assists {\n     pub(crate) fn new_resolved(ctx: &AssistContext) -> Assists {\n-        Assists { resolve: true, file: ctx.frange.file_id, buf: Vec::new() }\n+        Assists {\n+            resolve: true,\n+            file: ctx.frange.file_id,\n+            buf: Vec::new(),\n+            allowed: ctx.allowed.clone(),\n+        }\n     }\n+\n     pub(crate) fn new_unresolved(ctx: &AssistContext) -> Assists {\n-        Assists { resolve: false, file: ctx.frange.file_id, buf: Vec::new() }\n+        Assists {\n+            resolve: false,\n+            file: ctx.frange.file_id,\n+            buf: Vec::new(),\n+            allowed: ctx.allowed.clone(),\n+        }\n     }\n \n     pub(crate) fn finish_unresolved(self) -> Vec<Assist> {\n@@ -139,9 +153,13 @@ impl Assists {\n         target: TextRange,\n         f: impl FnOnce(&mut AssistBuilder),\n     ) -> Option<()> {\n+        if !self.is_allowed(&id) {\n+            return None;\n+        }\n         let label = Assist::new(id, label.into(), None, target);\n         self.add_impl(label, f)\n     }\n+\n     pub(crate) fn add_group(\n         &mut self,\n         group: &GroupLabel,\n@@ -150,9 +168,14 @@ impl Assists {\n         target: TextRange,\n         f: impl FnOnce(&mut AssistBuilder),\n     ) -> Option<()> {\n+        if !self.is_allowed(&id) {\n+            return None;\n+        }\n+\n         let label = Assist::new(id, label.into(), Some(group.clone()), target);\n         self.add_impl(label, f)\n     }\n+\n     fn add_impl(&mut self, label: Assist, f: impl FnOnce(&mut AssistBuilder)) -> Option<()> {\n         let source_change = if self.resolve {\n             let mut builder = AssistBuilder::new(self.file);\n@@ -170,6 +193,13 @@ impl Assists {\n         self.buf.sort_by_key(|(label, _edit)| label.target.len());\n         self.buf\n     }\n+\n+    fn is_allowed(&self, id: &AssistId) -> bool {\n+        match &self.allowed {\n+            Some(allowed) => allowed.iter().any(|kind| kind.contains(id.1)),\n+            None => true,\n+        }\n+    }\n }\n \n pub(crate) struct AssistBuilder {"}, {"sha": "13a28376015651dc120d40c4f4785903180c1847", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 28, "deletions": 3, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/aa598ecb75331068f4cacd443512991bc48937dc/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa598ecb75331068f4cacd443512991bc48937dc/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=aa598ecb75331068f4cacd443512991bc48937dc", "patch": "@@ -37,6 +37,25 @@ pub enum AssistKind {\n     RefactorRewrite,\n }\n \n+impl AssistKind {\n+    pub fn contains(self, other: AssistKind) -> bool {\n+        if self == other {\n+            return true;\n+        }\n+\n+        match self {\n+            AssistKind::None | AssistKind::Generate => return true,\n+            AssistKind::Refactor => match other {\n+                AssistKind::RefactorExtract\n+                | AssistKind::RefactorInline\n+                | AssistKind::RefactorRewrite => return true,\n+                _ => return false,\n+            },\n+            _ => return false,\n+        }\n+    }\n+}\n+\n /// Unique identifier of the assist, should not be shown to the user\n /// directly.\n #[derive(Debug, Clone, Copy, PartialEq, Eq)]\n@@ -67,9 +86,14 @@ impl Assist {\n     ///\n     /// Assists are returned in the \"unresolved\" state, that is only labels are\n     /// returned, without actual edits.\n-    pub fn unresolved(db: &RootDatabase, config: &AssistConfig, range: FileRange) -> Vec<Assist> {\n+    pub fn unresolved(\n+        db: &RootDatabase,\n+        config: &AssistConfig,\n+        range: FileRange,\n+        allowed: Option<Vec<AssistKind>>,\n+    ) -> Vec<Assist> {\n         let sema = Semantics::new(db);\n-        let ctx = AssistContext::new(sema, config, range);\n+        let ctx = AssistContext::new(sema, config, range, allowed);\n         let mut acc = Assists::new_unresolved(&ctx);\n         handlers::all().iter().for_each(|handler| {\n             handler(&mut acc, &ctx);\n@@ -85,9 +109,10 @@ impl Assist {\n         db: &RootDatabase,\n         config: &AssistConfig,\n         range: FileRange,\n+        allowed: Option<Vec<AssistKind>>,\n     ) -> Vec<ResolvedAssist> {\n         let sema = Semantics::new(db);\n-        let ctx = AssistContext::new(sema, config, range);\n+        let ctx = AssistContext::new(sema, config, range, allowed);\n         let mut acc = Assists::new_resolved(&ctx);\n         handlers::all().iter().for_each(|handler| {\n             handler(&mut acc, &ctx);"}, {"sha": "861622d8673256118fe7fc615457e9b29faaed60", "filename": "crates/ra_assists/src/tests.rs", "status": "modified", "additions": 46, "deletions": 6, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/aa598ecb75331068f4cacd443512991bc48937dc/crates%2Fra_assists%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa598ecb75331068f4cacd443512991bc48937dc/crates%2Fra_assists%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Ftests.rs?ref=aa598ecb75331068f4cacd443512991bc48937dc", "patch": "@@ -6,7 +6,7 @@ use ra_ide_db::RootDatabase;\n use ra_syntax::TextRange;\n use test_utils::{assert_eq_text, extract_offset, extract_range};\n \n-use crate::{handlers::Handler, Assist, AssistConfig, AssistContext, Assists};\n+use crate::{handlers::Handler, Assist, AssistConfig, AssistContext, AssistKind, Assists};\n use stdx::trim_indent;\n \n pub(crate) fn with_single_file(text: &str) -> (RootDatabase, FileId) {\n@@ -35,14 +35,14 @@ fn check_doc_test(assist_id: &str, before: &str, after: &str) {\n     let before = db.file_text(file_id).to_string();\n     let frange = FileRange { file_id, range: selection.into() };\n \n-    let mut assist = Assist::resolved(&db, &AssistConfig::default(), frange)\n+    let mut assist = Assist::resolved(&db, &AssistConfig::default(), frange, None)\n         .into_iter()\n         .find(|assist| assist.assist.id.0 == assist_id)\n         .unwrap_or_else(|| {\n             panic!(\n                 \"\\n\\nAssist is not applicable: {}\\nAvailable assists: {}\",\n                 assist_id,\n-                Assist::resolved(&db, &AssistConfig::default(), frange)\n+                Assist::resolved(&db, &AssistConfig::default(), frange, None)\n                     .into_iter()\n                     .map(|assist| assist.assist.id.0)\n                     .collect::<Vec<_>>()\n@@ -73,7 +73,7 @@ fn check(handler: Handler, before: &str, expected: ExpectedResult) {\n \n     let sema = Semantics::new(&db);\n     let config = AssistConfig::default();\n-    let ctx = AssistContext::new(sema, &config, frange);\n+    let ctx = AssistContext::new(sema, &config, frange, None);\n     let mut acc = Assists::new_resolved(&ctx);\n     handler(&mut acc, &ctx);\n     let mut res = acc.finish_resolved();\n@@ -105,7 +105,7 @@ fn assist_order_field_struct() {\n     let (before_cursor_pos, before) = extract_offset(before);\n     let (db, file_id) = with_single_file(&before);\n     let frange = FileRange { file_id, range: TextRange::empty(before_cursor_pos) };\n-    let assists = Assist::resolved(&db, &AssistConfig::default(), frange);\n+    let assists = Assist::resolved(&db, &AssistConfig::default(), frange, None);\n     let mut assists = assists.iter();\n \n     assert_eq!(\n@@ -128,9 +128,49 @@ fn assist_order_if_expr() {\n     let (range, before) = extract_range(before);\n     let (db, file_id) = with_single_file(&before);\n     let frange = FileRange { file_id, range };\n-    let assists = Assist::resolved(&db, &AssistConfig::default(), frange);\n+    let assists = Assist::resolved(&db, &AssistConfig::default(), frange, None);\n     let mut assists = assists.iter();\n \n     assert_eq!(assists.next().expect(\"expected assist\").assist.label, \"Extract into variable\");\n     assert_eq!(assists.next().expect(\"expected assist\").assist.label, \"Replace with match\");\n }\n+\n+#[test]\n+fn assist_filter_works() {\n+    let before = \"\n+    pub fn test_some_range(a: int) -> bool {\n+        if let 2..6 = <|>5<|> {\n+            true\n+        } else {\n+            false\n+        }\n+    }\";\n+    let (range, before) = extract_range(before);\n+    let (db, file_id) = with_single_file(&before);\n+    let frange = FileRange { file_id, range };\n+\n+    {\n+        let allowed = Some(vec![AssistKind::Refactor]);\n+\n+        let assists = Assist::resolved(&db, &AssistConfig::default(), frange, allowed);\n+        let mut assists = assists.iter();\n+\n+        assert_eq!(assists.next().expect(\"expected assist\").assist.label, \"Extract into variable\");\n+        assert_eq!(assists.next().expect(\"expected assist\").assist.label, \"Replace with match\");\n+    }\n+\n+    {\n+        let allowed = Some(vec![AssistKind::RefactorExtract]);\n+        let assists = Assist::resolved(&db, &AssistConfig::default(), frange, allowed);\n+        assert_eq!(assists.len(), 1);\n+\n+        let mut assists = assists.iter();\n+        assert_eq!(assists.next().expect(\"expected assist\").assist.label, \"Extract into variable\");\n+    }\n+\n+    {\n+        let allowed = Some(vec![AssistKind::QuickFix]);\n+        let assists = Assist::resolved(&db, &AssistConfig::default(), frange, allowed);\n+        assert!(assists.is_empty(), \"All asserts but quickfixes should be filtered out\");\n+    }\n+}"}, {"sha": "c21f2a0b1b858a99762d600befc3103b7f4c7788", "filename": "crates/ra_ide/src/lib.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aa598ecb75331068f4cacd443512991bc48937dc/crates%2Fra_ide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa598ecb75331068f4cacd443512991bc48937dc/crates%2Fra_ide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Flib.rs?ref=aa598ecb75331068f4cacd443512991bc48937dc", "patch": "@@ -476,8 +476,9 @@ impl Analysis {\n         &self,\n         config: &AssistConfig,\n         frange: FileRange,\n+        allowed: Option<Vec<AssistKind>>,\n     ) -> Cancelable<Vec<ResolvedAssist>> {\n-        self.with_db(|db| ra_assists::Assist::resolved(db, config, frange))\n+        self.with_db(|db| ra_assists::Assist::resolved(db, config, frange, allowed))\n     }\n \n     /// Computes unresolved assists (aka code actions aka intentions) for the given\n@@ -486,8 +487,9 @@ impl Analysis {\n         &self,\n         config: &AssistConfig,\n         frange: FileRange,\n+        allowed: Option<Vec<AssistKind>>,\n     ) -> Cancelable<Vec<Assist>> {\n-        self.with_db(|db| Assist::unresolved(db, config, frange))\n+        self.with_db(|db| Assist::unresolved(db, config, frange, allowed))\n     }\n \n     /// Computes the set of diagnostics for the given file."}, {"sha": "e2abfa3e077dc48a61dffa281892442a41ee9587", "filename": "crates/rust-analyzer/src/from_proto.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/aa598ecb75331068f4cacd443512991bc48937dc/crates%2Frust-analyzer%2Fsrc%2Ffrom_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa598ecb75331068f4cacd443512991bc48937dc/crates%2Frust-analyzer%2Fsrc%2Ffrom_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Ffrom_proto.rs?ref=aa598ecb75331068f4cacd443512991bc48937dc", "patch": "@@ -2,7 +2,7 @@\n use std::convert::TryFrom;\n \n use ra_db::{FileId, FilePosition, FileRange};\n-use ra_ide::{LineCol, LineIndex};\n+use ra_ide::{AssistKind, LineCol, LineIndex};\n use ra_syntax::{TextRange, TextSize};\n use vfs::AbsPathBuf;\n \n@@ -52,3 +52,17 @@ pub(crate) fn file_range(\n     let range = text_range(&line_index, range);\n     Ok(FileRange { file_id, range })\n }\n+\n+pub(crate) fn assist_kind(kind: lsp_types::CodeActionKind) -> Option<AssistKind> {\n+    let assist_kind = match &kind {\n+        k if k == &lsp_types::CodeActionKind::EMPTY => AssistKind::None,\n+        k if k == &lsp_types::CodeActionKind::QUICKFIX => AssistKind::QuickFix,\n+        k if k == &lsp_types::CodeActionKind::REFACTOR => AssistKind::Refactor,\n+        k if k == &lsp_types::CodeActionKind::REFACTOR => AssistKind::RefactorExtract,\n+        k if k == &lsp_types::CodeActionKind::REFACTOR => AssistKind::RefactorInline,\n+        k if k == &lsp_types::CodeActionKind::REFACTOR => AssistKind::RefactorRewrite,\n+        _ => return None,\n+    };\n+\n+    Some(assist_kind)\n+}"}, {"sha": "357d5f8caf1705f074a410e7f47ffba257da9c14", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 30, "deletions": 4, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/aa598ecb75331068f4cacd443512991bc48937dc/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa598ecb75331068f4cacd443512991bc48937dc/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=aa598ecb75331068f4cacd443512991bc48937dc", "patch": "@@ -746,6 +746,19 @@ fn handle_fixes(\n     let file_id = from_proto::file_id(&snap, &params.text_document.uri)?;\n     let line_index = snap.analysis.file_line_index(file_id)?;\n     let range = from_proto::text_range(&line_index, params.range);\n+\n+    match &params.context.only {\n+        Some(v) => {\n+            if v.iter().any(|it| {\n+                it == &lsp_types::CodeActionKind::EMPTY\n+                    || it == &lsp_types::CodeActionKind::QUICKFIX\n+            }) {\n+                return Ok(());\n+            }\n+        }\n+        None => {}\n+    };\n+\n     let diagnostics = snap.analysis.diagnostics(file_id)?;\n \n     let fixes_from_diagnostics = diagnostics\n@@ -792,18 +805,26 @@ pub(crate) fn handle_code_action(\n     let line_index = snap.analysis.file_line_index(file_id)?;\n     let range = from_proto::text_range(&line_index, params.range);\n     let frange = FileRange { file_id, range };\n+\n     let mut res: Vec<lsp_ext::CodeAction> = Vec::new();\n \n     handle_fixes(&snap, &params, &mut res)?;\n \n+    let only =\n+        params.context.only.map(|it| it.into_iter().filter_map(from_proto::assist_kind).collect());\n+\n     if snap.config.client_caps.resolve_code_action {\n-        for (index, assist) in\n-            snap.analysis.unresolved_assists(&snap.config.assist, frange)?.into_iter().enumerate()\n+        for (index, assist) in snap\n+            .analysis\n+            .unresolved_assists(&snap.config.assist, frange, only)?\n+            .into_iter()\n+            .enumerate()\n         {\n             res.push(to_proto::unresolved_code_action(&snap, assist, index)?);\n         }\n     } else {\n-        for assist in snap.analysis.resolved_assists(&snap.config.assist, frange)?.into_iter() {\n+        for assist in snap.analysis.resolved_assists(&snap.config.assist, frange, only)?.into_iter()\n+        {\n             res.push(to_proto::resolved_code_action(&snap, assist)?);\n         }\n     }\n@@ -820,8 +841,13 @@ pub(crate) fn handle_resolve_code_action(\n     let line_index = snap.analysis.file_line_index(file_id)?;\n     let range = from_proto::text_range(&line_index, params.code_action_params.range);\n     let frange = FileRange { file_id, range };\n+    let only = params\n+        .code_action_params\n+        .context\n+        .only\n+        .map(|it| it.into_iter().filter_map(from_proto::assist_kind).collect());\n \n-    let assists = snap.analysis.resolved_assists(&snap.config.assist, frange)?;\n+    let assists = snap.analysis.resolved_assists(&snap.config.assist, frange, only)?;\n     let (id_string, index) = split_delim(&params.id, ':').unwrap();\n     let index = index.parse::<usize>().unwrap();\n     let assist = &assists[index];"}]}