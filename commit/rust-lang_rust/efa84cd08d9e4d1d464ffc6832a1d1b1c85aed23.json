{"sha": "efa84cd08d9e4d1d464ffc6832a1d1b1c85aed23", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmYTg0Y2QwOGQ5ZTRkMWQ0NjRmZmM2ODMyYTFkMWIxYzg1YWVkMjM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-06-07T04:52:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-07T04:52:38Z"}, "message": "Merge #9106\n\n9106: feat: goto definition on an impl fn goes to that fn in the trait r=lf- a=lf-\n\ne.g. if you have a trait T and `impl T for S` for some struct, if you\r\ngoto definition on some function name inside the impl, it will go to the\r\ndefinition of that function inside the `trait T` block, rather than the\r\ncurrent behaviour of not going anywhere at all.\r\n\r\n![ra goto def trait the other way](https://user-images.githubusercontent.com/6652840/120403989-39aa3280-c2fa-11eb-9359-639346878acd.gif)\r\n\n\nCo-authored-by: Jade <software@lfcode.ca>", "tree": {"sha": "062f9e4fdb3e675c5a361e3f14a5659a6f4bb810", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/062f9e4fdb3e675c5a361e3f14a5659a6f4bb810"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/efa84cd08d9e4d1d464ffc6832a1d1b1c85aed23", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgvaYWCRBK7hj4Ov3rIwAAr3MIABJaTuwRyjAb2AuzTOdscI/5\nv+2efgDSS9JSS4rwUazt9BdLowXLHxGxiM792ImZHK/5rcODr7q9bPshqXweFQeH\ntt2XBYzPO6MBSYCMy9/Jkh71oFPdoJhBv+49Sbc0GLobJhkhW6XJ7sPtytsMs+0N\naRIbRSd9A4e9i/ZsyBqR0vNAm5vKjSGjfeR9hufsXLnUTQx7z+rcqPVO8h0RDGS+\nXWo6TVfhMjPrbKOXR1E3I8T0rfhxWGYj2NdKYIWj+fihVg9mD2MDvZE5j/I9vinE\nJsYi5knoc6uKKfGLp8I/N1k6F8XDuFJbkQOnr9rBw3Hzxyx1IaBwUrSMqFfkO3g=\n=nwzN\n-----END PGP SIGNATURE-----\n", "payload": "tree 062f9e4fdb3e675c5a361e3f14a5659a6f4bb810\nparent 13da28cc2bc1b59f7af817eca36927a71edb023c\nparent 34ce05781fbca1bc6b717cce3bee6bd9923248b2\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1623041558 +0000\ncommitter GitHub <noreply@github.com> 1623041558 +0000\n\nMerge #9106\n\n9106: feat: goto definition on an impl fn goes to that fn in the trait r=lf- a=lf-\n\ne.g. if you have a trait T and `impl T for S` for some struct, if you\r\ngoto definition on some function name inside the impl, it will go to the\r\ndefinition of that function inside the `trait T` block, rather than the\r\ncurrent behaviour of not going anywhere at all.\r\n\r\n![ra goto def trait the other way](https://user-images.githubusercontent.com/6652840/120403989-39aa3280-c2fa-11eb-9359-639346878acd.gif)\r\n\n\nCo-authored-by: Jade <software@lfcode.ca>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/efa84cd08d9e4d1d464ffc6832a1d1b1c85aed23", "html_url": "https://github.com/rust-lang/rust/commit/efa84cd08d9e4d1d464ffc6832a1d1b1c85aed23", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/efa84cd08d9e4d1d464ffc6832a1d1b1c85aed23/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13da28cc2bc1b59f7af817eca36927a71edb023c", "url": "https://api.github.com/repos/rust-lang/rust/commits/13da28cc2bc1b59f7af817eca36927a71edb023c", "html_url": "https://github.com/rust-lang/rust/commit/13da28cc2bc1b59f7af817eca36927a71edb023c"}, {"sha": "34ce05781fbca1bc6b717cce3bee6bd9923248b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/34ce05781fbca1bc6b717cce3bee6bd9923248b2", "html_url": "https://github.com/rust-lang/rust/commit/34ce05781fbca1bc6b717cce3bee6bd9923248b2"}], "stats": {"total": 98, "additions": 91, "deletions": 7}, "files": [{"sha": "c2b68a853016e91076ca7ccb7522d432bf2cf7e0", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/efa84cd08d9e4d1d464ffc6832a1d1b1c85aed23/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efa84cd08d9e4d1d464ffc6832a1d1b1c85aed23/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=efa84cd08d9e4d1d464ffc6832a1d1b1c85aed23", "patch": "@@ -50,7 +50,6 @@ use hir_def::{\n     per_ns::PerNs,\n     resolver::{HasResolver, Resolver},\n     src::HasSource as _,\n-    type_ref::TraitRef,\n     AdtId, AssocContainerId, AssocItemId, AssocItemLoc, AttrDefId, ConstId, ConstParamId,\n     DefWithBodyId, EnumId, FunctionId, GenericDefId, HasModule, ImplId, LifetimeParamId,\n     LocalEnumVariantId, LocalFieldId, Lookup, ModuleId, StaticId, StructId, TraitId, TypeAliasId,\n@@ -1797,9 +1796,11 @@ impl Impl {\n     }\n \n     // FIXME: the return type is wrong. This should be a hir version of\n-    // `TraitRef` (ie, resolved `TypeRef`).\n-    pub fn trait_(self, db: &dyn HirDatabase) -> Option<TraitRef> {\n-        db.impl_data(self.id).target_trait.as_deref().cloned()\n+    // `TraitRef` (to account for parameters and qualifiers)\n+    pub fn trait_(self, db: &dyn HirDatabase) -> Option<Trait> {\n+        let trait_ref = db.impl_trait(self.id)?.skip_binders().clone();\n+        let id = hir_ty::from_chalk_trait_id(trait_ref.trait_id);\n+        Some(Trait { id })\n     }\n \n     pub fn self_ty(self, db: &dyn HirDatabase) -> Type {"}, {"sha": "2d36c34e99d3f1da1de2222fb9990703006795fa", "filename": "crates/ide/src/goto_definition.rs", "status": "modified", "additions": 86, "deletions": 3, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/efa84cd08d9e4d1d464ffc6832a1d1b1c85aed23/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efa84cd08d9e4d1d464ffc6832a1d1b1c85aed23/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_definition.rs?ref=efa84cd08d9e4d1d464ffc6832a1d1b1c85aed23", "patch": "@@ -1,10 +1,10 @@\n use std::convert::TryInto;\n \n use either::Either;\n-use hir::{InFile, Semantics};\n+use hir::{AsAssocItem, InFile, ModuleDef, Semantics};\n use ide_db::{\n     base_db::{AnchoredPath, FileId, FileLoader},\n-    defs::{NameClass, NameRefClass},\n+    defs::{Definition, NameClass, NameRefClass},\n     RootDatabase,\n };\n use syntax::{\n@@ -57,7 +57,8 @@ pub(crate) fn goto_definition(\n             },\n             ast::Name(name) => {\n                 let def = NameClass::classify(&sema, &name)?.referenced_or_defined(sema.db);\n-                def.try_to_nav(sema.db)\n+                try_find_trait_item_definition(&sema.db, &def)\n+                    .or_else(|| def.try_to_nav(sema.db))\n             },\n             ast::Lifetime(lt) => if let Some(name_class) = NameClass::classify_lifetime(&sema, &lt) {\n                 let def = name_class.referenced_or_defined(sema.db);\n@@ -99,6 +100,34 @@ fn try_lookup_include_path(\n     })\n }\n \n+/// finds the trait definition of an impl'd item\n+/// e.g.\n+/// ```rust\n+/// trait A { fn a(); }\n+/// struct S;\n+/// impl A for S { fn a(); } // <-- on this function, will get the location of a() in the trait\n+/// ```\n+fn try_find_trait_item_definition(db: &RootDatabase, def: &Definition) -> Option<NavigationTarget> {\n+    let name = def.name(db)?;\n+    let assoc = match def {\n+        Definition::ModuleDef(ModuleDef::Function(f)) => f.as_assoc_item(db),\n+        Definition::ModuleDef(ModuleDef::Const(c)) => c.as_assoc_item(db),\n+        Definition::ModuleDef(ModuleDef::TypeAlias(ty)) => ty.as_assoc_item(db),\n+        _ => None,\n+    }?;\n+\n+    let imp = match assoc.container(db) {\n+        hir::AssocItemContainer::Impl(imp) => imp,\n+        _ => return None,\n+    };\n+\n+    let trait_ = imp.trait_(db)?;\n+    trait_\n+        .items(db)\n+        .iter()\n+        .find_map(|itm| (itm.name(db)? == name).then(|| itm.try_to_nav(db)).flatten())\n+}\n+\n fn pick_best(tokens: TokenAtOffset<SyntaxToken>) -> Option<SyntaxToken> {\n     return tokens.max_by_key(priority);\n     fn priority(n: &SyntaxToken) -> usize {\n@@ -1259,6 +1288,60 @@ fn main() {\n //- /foo.txt\n // empty\n //^ file\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn goto_def_of_trait_impl_fn() {\n+        check(\n+            r#\"\n+trait Twait {\n+    fn a();\n+    // ^\n+}\n+\n+struct Stwuct;\n+\n+impl Twait for Stwuct {\n+    fn a$0();\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn goto_def_of_trait_impl_const() {\n+        check(\n+            r#\"\n+trait Twait {\n+    const NOMS: bool;\n+       // ^^^^\n+}\n+\n+struct Stwuct;\n+\n+impl Twait for Stwuct {\n+    const NOMS$0: bool = true;\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn goto_def_of_trait_impl_type_alias() {\n+        check(\n+            r#\"\n+trait Twait {\n+    type IsBad;\n+      // ^^^^^\n+}\n+\n+struct Stwuct;\n+\n+impl Twait for Stwuct {\n+    type IsBad$0 = !;\n+}\n \"#,\n         );\n     }"}]}