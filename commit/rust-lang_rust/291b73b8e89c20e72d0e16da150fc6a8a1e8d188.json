{"sha": "291b73b8e89c20e72d0e16da150fc6a8a1e8d188", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5MWI3M2I4ZTg5YzIwZTcyZDBlMTZkYTE1MGZjNmE4YTFlOGQxODg=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2016-01-27T21:22:43Z"}, "committer": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2016-01-27T21:23:21Z"}, "message": "Merge master and re-run update_lints.py", "tree": {"sha": "d4ce76be5cbbbc67220e0a3fbc441cd00cb8e659", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d4ce76be5cbbbc67220e0a3fbc441cd00cb8e659"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/291b73b8e89c20e72d0e16da150fc6a8a1e8d188", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/291b73b8e89c20e72d0e16da150fc6a8a1e8d188", "html_url": "https://github.com/rust-lang/rust/commit/291b73b8e89c20e72d0e16da150fc6a8a1e8d188", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/291b73b8e89c20e72d0e16da150fc6a8a1e8d188/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1ac3125de6ae7cb0ffffd845df28b3ba3872a19", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1ac3125de6ae7cb0ffffd845df28b3ba3872a19", "html_url": "https://github.com/rust-lang/rust/commit/a1ac3125de6ae7cb0ffffd845df28b3ba3872a19"}, {"sha": "148667ce05d718105d91b7b91b31893150d4f121", "url": "https://api.github.com/repos/rust-lang/rust/commits/148667ce05d718105d91b7b91b31893150d4f121", "html_url": "https://github.com/rust-lang/rust/commit/148667ce05d718105d91b7b91b31893150d4f121"}], "stats": {"total": 55, "additions": 53, "deletions": 2}, "files": [{"sha": "04b0bd0e384a4939da1c2809f96d80f2ae849bed", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/291b73b8e89c20e72d0e16da150fc6a8a1e8d188/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/291b73b8e89c20e72d0e16da150fc6a8a1e8d188/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=291b73b8e89c20e72d0e16da150fc6a8a1e8d188", "patch": "@@ -6,7 +6,7 @@ A collection of lints to catch common mistakes and improve your Rust code.\n [Jump to usage instructions](#usage)\n \n ##Lints\n-There are 99 lints included in this crate:\n+There are 100 lints included in this crate:\n \n name                                                                                                           | default | meaning\n ---------------------------------------------------------------------------------------------------------------|---------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n@@ -20,6 +20,7 @@ name\n [cast_possible_wrap](https://github.com/Manishearth/rust-clippy/wiki#cast_possible_wrap)                       | allow   | casts that may cause wrapping around the value, e.g `x as i32` where `x: u32` and `x > i32::MAX`\n [cast_precision_loss](https://github.com/Manishearth/rust-clippy/wiki#cast_precision_loss)                     | allow   | casts that cause loss of precision, e.g `x as f32` where `x: u64`\n [cast_sign_loss](https://github.com/Manishearth/rust-clippy/wiki#cast_sign_loss)                               | allow   | casts from signed types to unsigned types, e.g `x as u32` where `x: i32`\n+[char_lit_as_u8](https://github.com/Manishearth/rust-clippy/wiki#char_lit_as_u8)                               | warn    | Casting a character literal to u8\n [chars_next_cmp](https://github.com/Manishearth/rust-clippy/wiki#chars_next_cmp)                               | warn    | using `.chars().next()` to check if a string starts with a char\n [cmp_nan](https://github.com/Manishearth/rust-clippy/wiki#cmp_nan)                                             | deny    | comparisons to NAN (which will always return false, which is probably not intended)\n [cmp_owned](https://github.com/Manishearth/rust-clippy/wiki#cmp_owned)                                         | warn    | creating owned instances for comparing with others, e.g. `x == \"foo\".to_string()`"}, {"sha": "6d706888fc3159ad1d0733352a3fd716934ac6e6", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/291b73b8e89c20e72d0e16da150fc6a8a1e8d188/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/291b73b8e89c20e72d0e16da150fc6a8a1e8d188/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=291b73b8e89c20e72d0e16da150fc6a8a1e8d188", "patch": "@@ -140,6 +140,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_late_lint_pass(box panic::PanicPass);\n     reg.register_late_lint_pass(box strings::StringLitAsBytes);\n     reg.register_late_lint_pass(box derive::Derive);\n+    reg.register_late_lint_pass(box types::CharLitAsU8);\n \n \n     reg.register_lint_group(\"clippy_pedantic\", vec![\n@@ -239,6 +240,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n         temporary_assignment::TEMPORARY_ASSIGNMENT,\n         transmute::USELESS_TRANSMUTE,\n         types::BOX_VEC,\n+        types::CHAR_LIT_AS_U8,\n         types::LET_UNIT_VALUE,\n         types::LINKEDLIST,\n         types::TYPE_COMPLEXITY,"}, {"sha": "d41896cd490a68f4f3aa0f2cb09f8ef77d6fe240", "filename": "src/types.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/291b73b8e89c20e72d0e16da150fc6a8a1e8d188/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/291b73b8e89c20e72d0e16da150fc6a8a1e8d188/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=291b73b8e89c20e72d0e16da150fc6a8a1e8d188", "patch": "@@ -517,3 +517,43 @@ impl<'v> Visitor<'v> for TypeComplexityVisitor {\n         self.nest -= sub_nest;\n     }\n }\n+\n+/// **What it does:** This lint points out expressions where a character literal is casted to u8 and suggests using a byte literal instead.\n+///\n+/// **Why is this bad?** In general, casting values to smaller types is error-prone and should be avoided where possible. In the particular case of converting a character literal to u8, it is easy to avoid by just using a byte literal instead. As an added bonus, `b'a'` is even slightly shorter than `'a' as u8`.\n+///\n+/// **Known problems:** None\n+///\n+/// **Example:** `'x' as u8`\n+declare_lint!(pub CHAR_LIT_AS_U8, Warn,\n+              \"Casting a character literal to u8\");\n+\n+pub struct CharLitAsU8;\n+\n+impl LintPass for CharLitAsU8 {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(CHAR_LIT_AS_U8)\n+    }\n+}\n+\n+impl LateLintPass for CharLitAsU8 {\n+    fn check_expr(&mut self, cx: &LateContext, expr: &Expr) {\n+        use syntax::ast::{Lit_, UintTy};\n+\n+        if let ExprCast(ref e, _) = expr.node {\n+            if let ExprLit(ref l) = e.node {\n+                if let Lit_::LitChar(_) = l.node {\n+                    if ty::TyUint(UintTy::TyU8) == cx.tcx.expr_ty(expr).sty && !in_macro(cx, expr.span) {\n+                        let msg = \"casting character literal to u8. `char`s \\\n+                                   are 4 bytes wide in rust, so casting to u8 \\\n+                                   truncates them\";\n+                        let help = format!(\"Consider using a byte literal \\\n+                                            instead:\\nb{}\",\n+                                          snippet(cx, e.span, \"'x'\"));\n+                        span_help_and_lint(cx, CHAR_LIT_AS_U8, expr.span, msg, &help);\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "4fca878c4daf2eadbc3b0aca1ab6903f36dfe2d4", "filename": "tests/compile-fail/char_lit_as_u8.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/291b73b8e89c20e72d0e16da150fc6a8a1e8d188/tests%2Fcompile-fail%2Fchar_lit_as_u8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/291b73b8e89c20e72d0e16da150fc6a8a1e8d188/tests%2Fcompile-fail%2Fchar_lit_as_u8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fchar_lit_as_u8.rs?ref=291b73b8e89c20e72d0e16da150fc6a8a1e8d188", "patch": "@@ -0,0 +1,8 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+#![deny(char_lit_as_u8)]\n+#![allow(unused_variables)]\n+fn main() {\n+    let c = 'a' as u8; //~ERROR casting character literal\n+}"}, {"sha": "6a59abcdc15a623fbfe9a66093f384faca1b1749", "filename": "util/update_lints.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/291b73b8e89c20e72d0e16da150fc6a8a1e8d188/util%2Fupdate_lints.py", "raw_url": "https://github.com/rust-lang/rust/raw/291b73b8e89c20e72d0e16da150fc6a8a1e8d188/util%2Fupdate_lints.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/util%2Fupdate_lints.py?ref=291b73b8e89c20e72d0e16da150fc6a8a1e8d188", "patch": "@@ -9,7 +9,7 @@\n \n declare_lint_re = re.compile(r'''\n     declare_lint! \\s* [{(] \\s*\n-    pub \\s+ (?P<name>[A-Z_]+) \\s*,\\s*\n+    pub \\s+ (?P<name>[A-Z_][A-Z_0-9]*) \\s*,\\s*\n     (?P<level>Forbid|Deny|Warn|Allow) \\s*,\\s*\n     \" (?P<desc>(?:[^\"\\\\]+|\\\\.)*) \" \\s* [})]\n ''', re.X | re.S)"}]}