{"sha": "a1c261cd096c9c2ebfffa7049e29c06914784c04", "node_id": "C_kwDOAAsO6NoAKGExYzI2MWNkMDk2YzljMmViZmZmYTcwNDllMjljMDY5MTQ3ODRjMDQ", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2022-02-05T19:42:56Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2022-02-05T20:17:54Z"}, "message": "Store rlink data in opaque binary format on disk", "tree": {"sha": "806401cb7dd013afbb540160fdcf520d03aa433a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/806401cb7dd013afbb540160fdcf520d03aa433a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1c261cd096c9c2ebfffa7049e29c06914784c04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1c261cd096c9c2ebfffa7049e29c06914784c04", "html_url": "https://github.com/rust-lang/rust/commit/a1c261cd096c9c2ebfffa7049e29c06914784c04", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1c261cd096c9c2ebfffa7049e29c06914784c04/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb18e83e8512be69b26fcb67ae66d81e5b7a4383", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb18e83e8512be69b26fcb67ae66d81e5b7a4383", "html_url": "https://github.com/rust-lang/rust/commit/cb18e83e8512be69b26fcb67ae66d81e5b7a4383"}], "stats": {"total": 17, "additions": 8, "deletions": 9}, "files": [{"sha": "ca4e7b5142ee73b1b51b29903f195263bb0eb9e1", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a1c261cd096c9c2ebfffa7049e29c06914784c04/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1c261cd096c9c2ebfffa7049e29c06914784c04/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=a1c261cd096c9c2ebfffa7049e29c06914784c04", "patch": "@@ -29,7 +29,7 @@ use rustc_log::stdout_isatty;\n use rustc_metadata::locator;\n use rustc_save_analysis as save;\n use rustc_save_analysis::DumpHandler;\n-use rustc_serialize::json::{self, ToJson};\n+use rustc_serialize::json::ToJson;\n use rustc_session::config::{nightly_options, CG_OPTIONS, DB_OPTIONS};\n use rustc_session::config::{ErrorOutputType, Input, OutputType, PrintRequest, TrimmedDefPaths};\n use rustc_session::cstore::MetadataLoader;\n@@ -595,10 +595,12 @@ impl RustcDefaultCalls {\n                 // FIXME: #![crate_type] and #![crate_name] support not implemented yet\n                 sess.init_crate_types(collect_crate_types(sess, &[]));\n                 let outputs = compiler.build_output_filenames(sess, &[]);\n-                let rlink_data = fs::read_to_string(file).unwrap_or_else(|err| {\n+                let rlink_data = fs::read(file).unwrap_or_else(|err| {\n                     sess.fatal(&format!(\"failed to read rlink file: {}\", err));\n                 });\n-                let codegen_results: CodegenResults = json::decode(&rlink_data);\n+                let mut decoder = rustc_serialize::opaque::Decoder::new(&rlink_data, 0);\n+                let codegen_results: CodegenResults =\n+                    rustc_serialize::Decodable::decode(&mut decoder);\n                 let result = compiler.codegen_backend().link(sess, codegen_results, &outputs);\n                 abort_on_err(result, sess);\n             } else {"}, {"sha": "2640a9575a371c4d84f698e5cb35baba9f2faffa", "filename": "compiler/rustc_interface/src/queries.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a1c261cd096c9c2ebfffa7049e29c06914784c04/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1c261cd096c9c2ebfffa7049e29c06914784c04/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs?ref=a1c261cd096c9c2ebfffa7049e29c06914784c04", "patch": "@@ -13,7 +13,6 @@ use rustc_middle::arena::Arena;\n use rustc_middle::dep_graph::DepGraph;\n use rustc_middle::ty::{GlobalCtxt, TyCtxt};\n use rustc_query_impl::Queries as TcxQueries;\n-use rustc_serialize::json;\n use rustc_session::config::{self, OutputFilenames, OutputType};\n use rustc_session::{output::find_crate_name, Session};\n use rustc_span::symbol::sym;\n@@ -367,12 +366,10 @@ impl Linker {\n         }\n \n         if sess.opts.debugging_opts.no_link {\n-            // FIXME: use a binary format to encode the `.rlink` file\n-            let rlink_data = json::encode(&codegen_results).map_err(|err| {\n-                sess.fatal(&format!(\"failed to encode rlink: {}\", err));\n-            })?;\n+            let mut encoder = rustc_serialize::opaque::Encoder::new(Vec::new());\n+            rustc_serialize::Encodable::encode(&codegen_results, &mut encoder).unwrap();\n             let rlink_file = self.prepare_outputs.with_extension(config::RLINK_EXT);\n-            std::fs::write(&rlink_file, rlink_data).map_err(|err| {\n+            std::fs::write(&rlink_file, encoder.into_inner()).map_err(|err| {\n                 sess.fatal(&format!(\"failed to write file {}: {}\", rlink_file.display(), err));\n             })?;\n             return Ok(());"}]}