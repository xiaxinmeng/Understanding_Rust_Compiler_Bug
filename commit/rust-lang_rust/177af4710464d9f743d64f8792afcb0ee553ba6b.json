{"sha": "177af4710464d9f743d64f8792afcb0ee553ba6b", "node_id": "C_kwDOAAsO6NoAKDE3N2FmNDcxMDQ2NGQ5Zjc0M2Q2NGY4NzkyYWZjYjBlZTU1M2JhNmI", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-04-27T14:14:19Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-07-26T11:38:03Z"}, "message": "Implement `#[rustc_default_body_unstable]`\n\nThis attribute allows to mark default body of a trait function as\nunstable. This means that implementing the trait without implementing\nthe function will require enabling unstable feature.\n\nThis is useful in conjunction with `#[rustc_must_implement_one_of]`,\nwe may want to relax requirements for a trait, for example allowing\nimplementing either of `PartialEq::{eq, ne}`, but do so in a safe way\n-- making implementation of only `PartialEq::ne` unstable.", "tree": {"sha": "75ef30b1f4c836275fbdc0e4ad745e897e670ab6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75ef30b1f4c836275fbdc0e4ad745e897e670ab6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/177af4710464d9f743d64f8792afcb0ee553ba6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/177af4710464d9f743d64f8792afcb0ee553ba6b", "html_url": "https://github.com/rust-lang/rust/commit/177af4710464d9f743d64f8792afcb0ee553ba6b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/177af4710464d9f743d64f8792afcb0ee553ba6b/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96b9bb4620f4d48aa25c381c7ea77e0cab48ac5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/96b9bb4620f4d48aa25c381c7ea77e0cab48ac5b", "html_url": "https://github.com/rust-lang/rust/commit/96b9bb4620f4d48aa25c381c7ea77e0cab48ac5b"}], "stats": {"total": 223, "additions": 206, "deletions": 17}, "files": [{"sha": "3b58996e501d6e249b1add2236f6b593f9bd44d2", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/177af4710464d9f743d64f8792afcb0ee553ba6b/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/177af4710464d9f743d64f8792afcb0ee553ba6b/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=177af4710464d9f743d64f8792afcb0ee553ba6b", "patch": "@@ -417,6 +417,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                 || attr.has_name(sym::stable)\n                 || attr.has_name(sym::rustc_const_unstable)\n                 || attr.has_name(sym::rustc_const_stable)\n+                || attr.has_name(sym::rustc_default_body_unstable)\n             {\n                 struct_span_err!(\n                     self.sess,"}, {"sha": "2eb50d648028e5d14c98dd46786b2ddbc97b91c7", "filename": "compiler/rustc_attr/src/builtin.rs", "status": "modified", "additions": 26, "deletions": 5, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/177af4710464d9f743d64f8792afcb0ee553ba6b/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/177af4710464d9f743d64f8792afcb0ee553ba6b/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs?ref=177af4710464d9f743d64f8792afcb0ee553ba6b", "patch": "@@ -131,6 +131,14 @@ impl ConstStability {\n     }\n }\n \n+/// Represents the `#[rustc_default_body_unstable]` attribute.\n+#[derive(Encodable, Decodable, Copy, Clone, Debug, PartialEq, Eq, Hash)]\n+#[derive(HashStable_Generic)]\n+pub struct DefaultBodyStability {\n+    pub level: StabilityLevel,\n+    pub feature: Symbol,\n+}\n+\n /// The available stability levels.\n #[derive(Encodable, Decodable, PartialEq, Copy, Clone, Debug, Eq, Hash)]\n #[derive(HashStable_Generic)]\n@@ -214,22 +222,24 @@ pub fn find_stability(\n     sess: &Session,\n     attrs: &[Attribute],\n     item_sp: Span,\n-) -> (Option<(Stability, Span)>, Option<(ConstStability, Span)>) {\n+) -> (Option<(Stability, Span)>, Option<(ConstStability, Span)>, Option<(DefaultBodyStability, Span)>)\n+{\n     find_stability_generic(sess, attrs.iter(), item_sp)\n }\n \n fn find_stability_generic<'a, I>(\n     sess: &Session,\n     attrs_iter: I,\n     item_sp: Span,\n-) -> (Option<(Stability, Span)>, Option<(ConstStability, Span)>)\n+) -> (Option<(Stability, Span)>, Option<(ConstStability, Span)>, Option<(DefaultBodyStability, Span)>)\n where\n     I: Iterator<Item = &'a Attribute>,\n {\n     use StabilityLevel::*;\n \n     let mut stab: Option<(Stability, Span)> = None;\n     let mut const_stab: Option<(ConstStability, Span)> = None;\n+    let mut body_stab: Option<(DefaultBodyStability, Span)> = None;\n     let mut promotable = false;\n     let mut allowed_through_unstable_modules = false;\n \n@@ -243,6 +253,7 @@ where\n             sym::stable,\n             sym::rustc_promotable,\n             sym::rustc_allowed_through_unstable_modules,\n+            sym::rustc_default_body_unstable,\n         ]\n         .iter()\n         .any(|&s| attr.has_name(s))\n@@ -280,7 +291,7 @@ where\n \n             let meta_name = meta.name_or_empty();\n             match meta_name {\n-                sym::rustc_const_unstable | sym::unstable => {\n+                sym::rustc_const_unstable | sym::rustc_default_body_unstable | sym::unstable => {\n                     if meta_name == sym::unstable && stab.is_some() {\n                         handle_errors(\n                             &sess.parse_sess,\n@@ -295,6 +306,13 @@ where\n                             AttrError::MultipleStabilityLevels,\n                         );\n                         break;\n+                    } else if meta_name == sym::rustc_default_body_unstable && body_stab.is_some() {\n+                        handle_errors(\n+                            &sess.parse_sess,\n+                            attr.span,\n+                            AttrError::MultipleStabilityLevels,\n+                        );\n+                        break;\n                     }\n \n                     let mut feature = None;\n@@ -405,11 +423,14 @@ where\n                             };\n                             if sym::unstable == meta_name {\n                                 stab = Some((Stability { level, feature }, attr.span));\n-                            } else {\n+                            } else if sym::rustc_const_unstable == meta_name {\n                                 const_stab = Some((\n                                     ConstStability { level, feature, promotable: false },\n                                     attr.span,\n                                 ));\n+                            } else {\n+                                body_stab =\n+                                    Some((DefaultBodyStability { level, feature }, attr.span));\n                             }\n                         }\n                         (None, _, _) => {\n@@ -542,7 +563,7 @@ where\n         }\n     }\n \n-    (stab, const_stab)\n+    (stab, const_stab, body_stab)\n }\n \n pub fn find_crate_name(sess: &Session, attrs: &[Attribute]) -> Option<Symbol> {"}, {"sha": "852ea806b20ff51c64139e3b5a2b293f7496b877", "filename": "compiler/rustc_expand/src/base.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/177af4710464d9f743d64f8792afcb0ee553ba6b/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/177af4710464d9f743d64f8792afcb0ee553ba6b/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbase.rs?ref=177af4710464d9f743d64f8792afcb0ee553ba6b", "patch": "@@ -772,7 +772,7 @@ impl SyntaxExtension {\n                 )\n             })\n             .unwrap_or_else(|| (None, helper_attrs));\n-        let (stability, const_stability) = attr::find_stability(&sess, attrs, span);\n+        let (stability, const_stability, body_stability) = attr::find_stability(&sess, attrs, span);\n         if let Some((_, sp)) = const_stability {\n             sess.parse_sess\n                 .span_diagnostic\n@@ -784,6 +784,17 @@ impl SyntaxExtension {\n                 )\n                 .emit();\n         }\n+        if let Some((_, sp)) = body_stability {\n+            sess.parse_sess\n+                .span_diagnostic\n+                .struct_span_err(sp, \"macros cannot have body stability attributes\")\n+                .span_label(sp, \"invalid body stability attribute\")\n+                .span_label(\n+                    sess.source_map().guess_head_span(span),\n+                    \"body stability attribute affects this macro\",\n+                )\n+                .emit();\n+        }\n \n         SyntaxExtension {\n             kind,"}, {"sha": "d8fd627c100d392f03cb30f10aa13ef69c406948", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/177af4710464d9f743d64f8792afcb0ee553ba6b/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/177af4710464d9f743d64f8792afcb0ee553ba6b/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=177af4710464d9f743d64f8792afcb0ee553ba6b", "patch": "@@ -499,6 +499,10 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     ),\n     ungated!(rustc_const_unstable, Normal, template!(List: r#\"feature = \"name\"\"#), DuplicatesOk),\n     ungated!(rustc_const_stable, Normal, template!(List: r#\"feature = \"name\"\"#), DuplicatesOk),\n+    ungated!(\n+        rustc_default_body_unstable, Normal,\n+        template!(List: r#\"feature = \"name\", reason = \"...\", issue = \"N\"\"#), DuplicatesOk\n+    ),\n     gated!(\n         allow_internal_unstable, Normal, template!(Word, List: \"feat1, feat2, ...\"), DuplicatesOk,\n         \"allow_internal_unstable side-steps feature gating and stability checks\","}, {"sha": "35a6719a2fba6a93bf3e30cb1c4d9742616e539c", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/177af4710464d9f743d64f8792afcb0ee553ba6b/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/177af4710464d9f743d64f8792afcb0ee553ba6b/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=177af4710464d9f743d64f8792afcb0ee553ba6b", "patch": "@@ -207,6 +207,7 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     def_ident_span => { table }\n     lookup_stability => { table }\n     lookup_const_stability => { table }\n+    lookup_default_body_stability => { table }\n     lookup_deprecation_entry => { table }\n     visibility => { table }\n     unused_generic_params => { table }"}, {"sha": "f30f139584aa095169ce5d517de83e8548933c2a", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/177af4710464d9f743d64f8792afcb0ee553ba6b/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/177af4710464d9f743d64f8792afcb0ee553ba6b/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=177af4710464d9f743d64f8792afcb0ee553ba6b", "patch": "@@ -1029,6 +1029,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             if should_encode_stability(def_kind) {\n                 self.encode_stability(def_id);\n                 self.encode_const_stability(def_id);\n+                self.encode_default_body_stability(def_id);\n                 self.encode_deprecation(def_id);\n             }\n             if should_encode_variances(def_kind) {\n@@ -1397,6 +1398,18 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         }\n     }\n \n+    fn encode_default_body_stability(&mut self, def_id: DefId) {\n+        debug!(\"EncodeContext::encode_default_body_stability({:?})\", def_id);\n+\n+        // The query lookup can take a measurable amount of time in crates with many items. Check if\n+        // the stability attributes are even enabled before using their queries.\n+        if self.feat.staged_api || self.tcx.sess.opts.unstable_opts.force_unstable_if_unmarked {\n+            if let Some(stab) = self.tcx.lookup_default_body_stability(def_id) {\n+                record!(self.tables.lookup_default_body_stability[def_id] <- stab)\n+            }\n+        }\n+    }\n+\n     fn encode_deprecation(&mut self, def_id: DefId) {\n         debug!(\"EncodeContext::encode_deprecation({:?})\", def_id);\n         if let Some(depr) = self.tcx.lookup_deprecation(def_id) {"}, {"sha": "a1d3c918ebdfce3bb0e5c0b264f0a1087819a03f", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/177af4710464d9f743d64f8792afcb0ee553ba6b/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/177af4710464d9f743d64f8792afcb0ee553ba6b/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=177af4710464d9f743d64f8792afcb0ee553ba6b", "patch": "@@ -343,6 +343,7 @@ define_tables! {\n     def_ident_span: Table<DefIndex, LazyValue<Span>>,\n     lookup_stability: Table<DefIndex, LazyValue<attr::Stability>>,\n     lookup_const_stability: Table<DefIndex, LazyValue<attr::ConstStability>>,\n+    lookup_default_body_stability: Table<DefIndex, LazyValue<attr::DefaultBodyStability>>,\n     lookup_deprecation_entry: Table<DefIndex, LazyValue<attr::Deprecation>>,\n     // As an optimization, a missing entry indicates an empty `&[]`.\n     explicit_item_bounds: Table<DefIndex, LazyArray<(ty::Predicate<'static>, Span)>>,"}, {"sha": "24b74b7f65f5204d9bebf06e25656f5771434848", "filename": "compiler/rustc_middle/src/middle/stability.rs", "status": "modified", "additions": 63, "deletions": 1, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/177af4710464d9f743d64f8792afcb0ee553ba6b/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/177af4710464d9f743d64f8792afcb0ee553ba6b/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs?ref=177af4710464d9f743d64f8792afcb0ee553ba6b", "patch": "@@ -5,7 +5,7 @@ pub use self::StabilityLevel::*;\n \n use crate::ty::{self, DefIdTree, TyCtxt};\n use rustc_ast::NodeId;\n-use rustc_attr::{self as attr, ConstStability, Deprecation, Stability};\n+use rustc_attr::{self as attr, ConstStability, DefaultBodyStability, Deprecation, Stability};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::{Applicability, Diagnostic};\n use rustc_feature::GateIssue;\n@@ -61,6 +61,7 @@ pub struct Index {\n     /// are filled by the annotator.\n     pub stab_map: FxHashMap<LocalDefId, Stability>,\n     pub const_stab_map: FxHashMap<LocalDefId, ConstStability>,\n+    pub default_body_stab_map: FxHashMap<LocalDefId, DefaultBodyStability>,\n     pub depr_map: FxHashMap<LocalDefId, DeprecationEntry>,\n     /// Mapping from feature name to feature name based on the `implied_by` field of `#[unstable]`\n     /// attributes. If a `#[unstable(feature = \"implier\", implied_by = \"impliee\")]` attribute\n@@ -86,6 +87,10 @@ impl Index {\n         self.const_stab_map.get(&def_id).copied()\n     }\n \n+    pub fn local_default_body_stability(&self, def_id: LocalDefId) -> Option<DefaultBodyStability> {\n+        self.default_body_stab_map.get(&def_id).copied()\n+    }\n+\n     pub fn local_deprecation_entry(&self, def_id: LocalDefId) -> Option<DeprecationEntry> {\n         self.depr_map.get(&def_id).cloned()\n     }\n@@ -492,6 +497,63 @@ impl<'tcx> TyCtxt<'tcx> {\n         }\n     }\n \n+    /// Evaluates the default-impl stability of an item.\n+    ///\n+    /// Returns `EvalResult::Allow` if the item's default implementation is stable, or unstable but the corresponding\n+    /// `#![feature]` has been provided. Returns `EvalResult::Deny` which describes the offending\n+    /// unstable feature otherwise.\n+    pub fn eval_default_body_stability(self, def_id: DefId, span: Span) -> EvalResult {\n+        let is_staged_api = self.lookup_stability(def_id.krate.as_def_id()).is_some();\n+        if !is_staged_api {\n+            return EvalResult::Allow;\n+        }\n+\n+        let stability = self.lookup_default_body_stability(def_id);\n+        debug!(\n+            \"body stability: inspecting def_id={def_id:?} span={span:?} of stability={stability:?}\"\n+        );\n+\n+        // Only the cross-crate scenario matters when checking unstable APIs\n+        let cross_crate = !def_id.is_local();\n+        if !cross_crate {\n+            return EvalResult::Allow;\n+        }\n+\n+        // Issue #38412: private items lack stability markers.\n+        if skip_stability_check_due_to_privacy(self, def_id) {\n+            return EvalResult::Allow;\n+        }\n+\n+        match stability {\n+            Some(DefaultBodyStability {\n+                level: attr::Unstable { reason, issue, is_soft, .. },\n+                feature,\n+            }) => {\n+                if span.allows_unstable(feature) {\n+                    debug!(\"body stability: skipping span={:?} since it is internal\", span);\n+                    return EvalResult::Allow;\n+                }\n+                if self.features().active(feature) {\n+                    return EvalResult::Allow;\n+                }\n+\n+                //let suggestion = suggestion_for_allocator_api(self, def_id, span, feature);\n+                EvalResult::Deny {\n+                    feature,\n+                    reason: reason.to_opt_reason(),\n+                    issue,\n+                    suggestion: None,\n+                    is_soft,\n+                }\n+            }\n+            Some(_) => {\n+                // Stable APIs are always ok to call\n+                EvalResult::Allow\n+            }\n+            None => EvalResult::Unmarked,\n+        }\n+    }\n+\n     /// Checks if an item is stable or error out.\n     ///\n     /// If the item defined by `def_id` is unstable and the corresponding `#![feature]` does not"}, {"sha": "0d03f506aac2b6d746cf95695d035730329a0e16", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/177af4710464d9f743d64f8792afcb0ee553ba6b/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/177af4710464d9f743d64f8792afcb0ee553ba6b/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=177af4710464d9f743d64f8792afcb0ee553ba6b", "patch": "@@ -1094,6 +1094,11 @@ rustc_queries! {\n         separate_provide_extern\n     }\n \n+    query lookup_default_body_stability(def_id: DefId) -> Option<attr::DefaultBodyStability> {\n+        desc { |tcx| \"looking up default body stability of `{}`\", tcx.def_path_str(def_id) }\n+        separate_provide_extern\n+    }\n+\n     query should_inherit_track_caller(def_id: DefId) -> bool {\n         desc { |tcx| \"computing should_inherit_track_caller of `{}`\", tcx.def_path_str(def_id) }\n     }"}, {"sha": "ae6e2eecbffb5f46516c54904a487f75c2d8ca9b", "filename": "compiler/rustc_middle/src/ty/parameterized.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/177af4710464d9f743d64f8792afcb0ee553ba6b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fparameterized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/177af4710464d9f743d64f8792afcb0ee553ba6b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fparameterized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fparameterized.rs?ref=177af4710464d9f743d64f8792afcb0ee553ba6b", "patch": "@@ -64,6 +64,7 @@ trivially_parameterized_over_tcx! {\n     rustc_ast::Attribute,\n     rustc_ast::MacArgs,\n     rustc_attr::ConstStability,\n+    rustc_attr::DefaultBodyStability,\n     rustc_attr::Deprecation,\n     rustc_attr::Stability,\n     rustc_hir::Constness,"}, {"sha": "2a3da4ec30e35ddcdb7976a113ba2f7377fc6bd0", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 32, "deletions": 4, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/177af4710464d9f743d64f8792afcb0ee553ba6b/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/177af4710464d9f743d64f8792afcb0ee553ba6b/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=177af4710464d9f743d64f8792afcb0ee553ba6b", "patch": "@@ -1,8 +1,10 @@\n //! A pass that annotates every item and method with its stability level,\n //! propagating default levels lexically from parent to children ast nodes.\n \n-use attr::StabilityLevel;\n-use rustc_attr::{self as attr, ConstStability, Stability, Unstable, UnstableReason};\n+use rustc_attr::{\n+    self as attr, ConstStability, DefaultBodyStability, Stability, StabilityLevel, Unstable,\n+    UnstableReason,\n+};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexMap};\n use rustc_errors::{struct_span_err, Applicability};\n use rustc_hir as hir;\n@@ -89,6 +91,7 @@ struct Annotator<'a, 'tcx> {\n     index: &'a mut Index,\n     parent_stab: Option<Stability>,\n     parent_const_stab: Option<ConstStability>,\n+    parent_body_stab: Option<DefaultBodyStability>,\n     parent_depr: Option<DeprecationEntry>,\n     in_trait_impl: bool,\n }\n@@ -156,12 +159,13 @@ impl<'a, 'tcx> Annotator<'a, 'tcx> {\n                 depr.map(|(d, _)| DeprecationEntry::local(d, def_id)),\n                 None,\n                 None,\n+                None,\n                 visit_children,\n             );\n             return;\n         }\n \n-        let (stab, const_stab) = attr::find_stability(&self.tcx.sess, attrs, item_sp);\n+        let (stab, const_stab, body_stab) = attr::find_stability(&self.tcx.sess, attrs, item_sp);\n         let mut const_span = None;\n \n         let const_stab = const_stab.map(|(const_stab, const_span_node)| {\n@@ -209,6 +213,15 @@ impl<'a, 'tcx> Annotator<'a, 'tcx> {\n             }\n         }\n \n+        let body_stab = body_stab.map(|(body_stab, _span)| {\n+            // FIXME: check that this item can have body stability\n+\n+            self.index.default_body_stab_map.insert(def_id, body_stab);\n+            debug!(?self.index.default_body_stab_map);\n+\n+            body_stab\n+        });\n+\n         let stab = stab.map(|(stab, span)| {\n             // Error if prohibited, or can't inherit anything from a container.\n             if kind == AnnotationKind::Prohibited\n@@ -286,6 +299,7 @@ impl<'a, 'tcx> Annotator<'a, 'tcx> {\n             depr.map(|(d, _)| DeprecationEntry::local(d, def_id)),\n             stab,\n             if inherit_const_stability.yes() { const_stab } else { None },\n+            body_stab,\n             visit_children,\n         );\n     }\n@@ -295,12 +309,14 @@ impl<'a, 'tcx> Annotator<'a, 'tcx> {\n         depr: Option<DeprecationEntry>,\n         stab: Option<Stability>,\n         const_stab: Option<ConstStability>,\n+        body_stab: Option<DefaultBodyStability>,\n         f: impl FnOnce(&mut Self),\n     ) {\n         // These will be `Some` if this item changes the corresponding stability attribute.\n         let mut replaced_parent_depr = None;\n         let mut replaced_parent_stab = None;\n         let mut replaced_parent_const_stab = None;\n+        let mut replaced_parent_body_stab = None;\n \n         if let Some(depr) = depr {\n             replaced_parent_depr = Some(replace(&mut self.parent_depr, Some(depr)));\n@@ -312,6 +328,9 @@ impl<'a, 'tcx> Annotator<'a, 'tcx> {\n             replaced_parent_const_stab =\n                 Some(replace(&mut self.parent_const_stab, Some(const_stab)));\n         }\n+        if let Some(body_stab) = body_stab {\n+            replaced_parent_body_stab = Some(self.parent_body_stab.replace(body_stab));\n+        }\n \n         f(self);\n \n@@ -324,6 +343,9 @@ impl<'a, 'tcx> Annotator<'a, 'tcx> {\n         if let Some(orig_parent_const_stab) = replaced_parent_const_stab {\n             self.parent_const_stab = orig_parent_const_stab;\n         }\n+        if let Some(orig_parent_body_stab) = replaced_parent_body_stab {\n+            self.parent_body_stab = orig_parent_body_stab;\n+        }\n     }\n }\n \n@@ -613,6 +635,7 @@ fn stability_index(tcx: TyCtxt<'_>, (): ()) -> Index {\n     let mut index = Index {\n         stab_map: Default::default(),\n         const_stab_map: Default::default(),\n+        default_body_stab_map: Default::default(),\n         depr_map: Default::default(),\n         implications: Default::default(),\n     };\n@@ -623,6 +646,7 @@ fn stability_index(tcx: TyCtxt<'_>, (): ()) -> Index {\n             index: &mut index,\n             parent_stab: None,\n             parent_const_stab: None,\n+            parent_body_stab: None,\n             parent_depr: None,\n             in_trait_impl: false,\n         };\n@@ -673,6 +697,9 @@ pub(crate) fn provide(providers: &mut Providers) {\n         stability_implications: |tcx, _| tcx.stability().implications.clone(),\n         lookup_stability: |tcx, id| tcx.stability().local_stability(id.expect_local()),\n         lookup_const_stability: |tcx, id| tcx.stability().local_const_stability(id.expect_local()),\n+        lookup_default_body_stability: |tcx, id| {\n+            tcx.stability().local_default_body_stability(id.expect_local())\n+        },\n         lookup_deprecation_entry: |tcx, id| {\n             tcx.stability().local_deprecation_entry(id.expect_local())\n         },\n@@ -723,7 +750,8 @@ impl<'tcx> Visitor<'tcx> for Checker<'tcx> {\n                 let features = self.tcx.features();\n                 if features.staged_api {\n                     let attrs = self.tcx.hir().attrs(item.hir_id());\n-                    let (stab, const_stab) = attr::find_stability(&self.tcx.sess, attrs, item.span);\n+                    let (stab, const_stab, _) =\n+                        attr::find_stability(&self.tcx.sess, attrs, item.span);\n \n                     // If this impl block has an #[unstable] attribute, give an\n                     // error if all involved types and traits are stable, because"}, {"sha": "036f087e2d23bb64b4d6e5172ab73b0e835fb307", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/177af4710464d9f743d64f8792afcb0ee553ba6b/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/177af4710464d9f743d64f8792afcb0ee553ba6b/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=177af4710464d9f743d64f8792afcb0ee553ba6b", "patch": "@@ -1215,6 +1215,7 @@ symbols! {\n         rustc_const_unstable,\n         rustc_conversion_suggestion,\n         rustc_def_path,\n+        rustc_default_body_unstable,\n         rustc_diagnostic_item,\n         rustc_diagnostic_macros,\n         rustc_dirty,"}, {"sha": "6254825d96dc8fd54a9492036d0eacbac61ca7e9", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 25, "deletions": 5, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/177af4710464d9f743d64f8792afcb0ee553ba6b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/177af4710464d9f743d64f8792afcb0ee553ba6b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=177af4710464d9f743d64f8792afcb0ee553ba6b", "patch": "@@ -18,6 +18,7 @@ use rustc_infer::infer::{DefiningAnchor, RegionVariableOrigin, TyCtxtInferExt};\n use rustc_infer::traits::Obligation;\n use rustc_lint::builtin::REPR_TRANSPARENT_EXTERNAL_PRIVATE_FIELDS;\n use rustc_middle::hir::nested_filter;\n+use rustc_middle::middle::stability::EvalResult;\n use rustc_middle::ty::layout::{LayoutError, MAX_SIMD_LANES};\n use rustc_middle::ty::subst::GenericArgKind;\n use rustc_middle::ty::util::{Discr, IntTypeExt};\n@@ -1104,12 +1105,31 @@ fn check_impl_items_against_trait<'tcx>(\n                 missing_items.push(tcx.associated_item(trait_item_id));\n             }\n \n-            if let Some(required_items) = &must_implement_one_of {\n-                // true if this item is specifically implemented in this impl\n-                let is_implemented_here = ancestors\n-                    .leaf_def(tcx, trait_item_id)\n-                    .map_or(false, |node_item| !node_item.defining_node.is_from_trait());\n+            // true if this item is specifically implemented in this impl\n+            let is_implemented_here = ancestors\n+                .leaf_def(tcx, trait_item_id)\n+                .map_or(false, |node_item| !node_item.defining_node.is_from_trait());\n+\n+            if !is_implemented_here {\n+                match tcx.eval_default_body_stability(trait_item_id, full_impl_span) {\n+                    EvalResult::Deny { feature, reason, issue, is_soft, .. } => {\n+                        default_body_is_unstable(\n+                            tcx,\n+                            full_impl_span,\n+                            trait_item_id,\n+                            feature,\n+                            reason,\n+                            issue,\n+                            is_soft,\n+                        )\n+                    }\n \n+                    // Unmarked default bodies are considered stable (at least for now).\n+                    EvalResult::Allow | EvalResult::Unmarked => {}\n+                }\n+            }\n+\n+            if let Some(required_items) = &must_implement_one_of {\n                 if is_implemented_here {\n                     let trait_item = tcx.associated_item(trait_item_id);\n                     if required_items.contains(&trait_item.ident(tcx)) {"}, {"sha": "acd7e76fe2598ac58c8ca8baf649065ddfac74c5", "filename": "compiler/rustc_typeck/src/check/mod.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/177af4710464d9f743d64f8792afcb0ee553ba6b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/177af4710464d9f743d64f8792afcb0ee553ba6b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs?ref=177af4710464d9f743d64f8792afcb0ee553ba6b", "patch": "@@ -99,6 +99,7 @@ pub use expectation::Expectation;\n pub use fn_ctxt::*;\n use hir::def::CtorOf;\n pub use inherited::{Inherited, InheritedBuilder};\n+use rustc_middle::middle::stability::report_unstable;\n \n use crate::astconv::AstConv;\n use crate::check::gather_locals::GatherLocalsVisitor;\n@@ -122,13 +123,14 @@ use rustc_session::parse::feature_err;\n use rustc_session::Session;\n use rustc_span::source_map::DUMMY_SP;\n use rustc_span::symbol::{kw, Ident};\n-use rustc_span::{self, BytePos, Span};\n+use rustc_span::{self, BytePos, Span, Symbol};\n use rustc_target::abi::VariantIdx;\n use rustc_target::spec::abi::Abi;\n use rustc_trait_selection::traits;\n use rustc_trait_selection::traits::error_reporting::recursive_type_with_infinite_size_error;\n use rustc_trait_selection::traits::error_reporting::suggestions::ReturnsVisitor;\n use std::cell::RefCell;\n+use std::num::NonZeroU32;\n \n use crate::require_c_abi_if_c_variadic;\n use crate::util::common::indenter;\n@@ -662,6 +664,24 @@ fn missing_items_must_implement_one_of_err(\n     err.emit();\n }\n \n+fn default_body_is_unstable(\n+    tcx: TyCtxt<'_>,\n+    impl_span: Span,\n+    _item_did: DefId,\n+    feature: Symbol,\n+    reason: Option<Symbol>,\n+    issue: Option<NonZeroU32>,\n+    is_soft: bool,\n+) {\n+    let soft_handler = |lint, span, msg: &_| {\n+        tcx.struct_span_lint_hir(lint, hir::CRATE_HIR_ID, span, |lint| {\n+            lint.build(msg).emit();\n+        })\n+    };\n+\n+    report_unstable(tcx.sess, feature, reason, issue, None, is_soft, impl_span, soft_handler)\n+}\n+\n /// Re-sugar `ty::GenericPredicates` in a way suitable to be used in structured suggestions.\n fn bounds_from_generic_predicates<'tcx>(\n     tcx: TyCtxt<'tcx>,"}]}