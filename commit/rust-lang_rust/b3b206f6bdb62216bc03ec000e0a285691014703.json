{"sha": "b3b206f6bdb62216bc03ec000e0a285691014703", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzYjIwNmY2YmRiNjIyMTZiYzAzZWMwMDBlMGEyODU2OTEwMTQ3MDM=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-01-08T18:10:51Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-01-08T18:10:51Z"}, "message": "move code to method outside of happy path", "tree": {"sha": "f5ef209c9e691c8f42948002551591901eb89ddd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5ef209c9e691c8f42948002551591901eb89ddd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b3b206f6bdb62216bc03ec000e0a285691014703", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b3b206f6bdb62216bc03ec000e0a285691014703", "html_url": "https://github.com/rust-lang/rust/commit/b3b206f6bdb62216bc03ec000e0a285691014703", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b3b206f6bdb62216bc03ec000e0a285691014703/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac3d4cccea3225468a3c8ff8ea18b60166c84fb8", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac3d4cccea3225468a3c8ff8ea18b60166c84fb8", "html_url": "https://github.com/rust-lang/rust/commit/ac3d4cccea3225468a3c8ff8ea18b60166c84fb8"}], "stats": {"total": 44, "additions": 25, "deletions": 19}, "files": [{"sha": "5b8eb34ead1b387843683dcd0a2c9af1aa3ed826", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 25, "deletions": 19, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/b3b206f6bdb62216bc03ec000e0a285691014703/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3b206f6bdb62216bc03ec000e0a285691014703/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=b3b206f6bdb62216bc03ec000e0a285691014703", "patch": "@@ -2076,25 +2076,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 let mut err = self.need_type_info_err(body_id, span, self_ty, ErrorCode::E0283);\n                 err.note(&format!(\"cannot resolve `{}`\", predicate));\n                 if let ObligationCauseCode::ItemObligation(def_id) = obligation.cause.code {\n-                    if let Some(assoc_item) = self.tcx.opt_associated_item(def_id) {\n-                        if let ty::AssocKind::Const | ty::AssocKind::Type = assoc_item.kind {\n-                            err.note(&format!(\n-                                \"{}s cannot be accessed directly on a `trait`, they can only be \\\n-                                 accessed through a specific `impl`\",\n-                                assoc_item.kind.suggestion_descr(),\n-                            ));\n-                            err.span_suggestion(\n-                                span,\n-                                \"use the fully qualified path to an implementation\",\n-                                format!(\n-                                    \"<Type as {}>::{}\",\n-                                    self.tcx.def_path_str(trait_ref.def_id()),\n-                                    assoc_item.ident\n-                                ),\n-                                Applicability::HasPlaceholders,\n-                            );\n-                        }\n-                    }\n+                    self.suggest_fully_qualified_path(&mut err, def_id, span, trait_ref.def_id());\n                 } else if let (\n                     Ok(ref snippet),\n                     ObligationCauseCode::BindingObligation(ref def_id, _),\n@@ -2196,6 +2178,30 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         err.emit();\n     }\n \n+    fn suggest_fully_qualified_path(\n+        &self,\n+        err: &mut DiagnosticBuilder<'_>,\n+        def_id: DefId,\n+        span: Span,\n+        trait_ref: DefId,\n+    ) {\n+        if let Some(assoc_item) = self.tcx.opt_associated_item(def_id) {\n+            if let ty::AssocKind::Const | ty::AssocKind::Type = assoc_item.kind {\n+                err.note(&format!(\n+                    \"{}s cannot be accessed directly on a `trait`, they can only be \\\n+                        accessed through a specific `impl`\",\n+                    assoc_item.kind.suggestion_descr(),\n+                ));\n+                err.span_suggestion(\n+                    span,\n+                    \"use the fully qualified path to an implementation\",\n+                    format!(\"<Type as {}>::{}\", self.tcx.def_path_str(trait_ref), assoc_item.ident),\n+                    Applicability::HasPlaceholders,\n+                );\n+            }\n+        }\n+    }\n+\n     /// Returns `true` if the trait predicate may apply for *some* assignment\n     /// to the type parameters.\n     fn predicate_can_apply("}]}