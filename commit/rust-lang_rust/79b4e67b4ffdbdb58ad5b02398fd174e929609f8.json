{"sha": "79b4e67b4ffdbdb58ad5b02398fd174e929609f8", "node_id": "C_kwDOAAsO6NoAKDc5YjRlNjdiNGZmZGJkYjU4YWQ1YjAyMzk4ZmQxNzRlOTI5NjA5Zjg", "commit": {"author": {"name": "rainy-me", "email": "github@yue.coffee", "date": "2021-12-03T19:50:06Z"}, "committer": {"name": "rainy-me", "email": "github@yue.coffee", "date": "2021-12-03T19:50:06Z"}, "message": "fix: defer condition construction", "tree": {"sha": "d891f799110fd71fe1820d9d65807d28f43766b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d891f799110fd71fe1820d9d65807d28f43766b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/79b4e67b4ffdbdb58ad5b02398fd174e929609f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/79b4e67b4ffdbdb58ad5b02398fd174e929609f8", "html_url": "https://github.com/rust-lang/rust/commit/79b4e67b4ffdbdb58ad5b02398fd174e929609f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/79b4e67b4ffdbdb58ad5b02398fd174e929609f8/comments", "author": {"login": "yue4u", "id": 26110087, "node_id": "MDQ6VXNlcjI2MTEwMDg3", "avatar_url": "https://avatars.githubusercontent.com/u/26110087?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yue4u", "html_url": "https://github.com/yue4u", "followers_url": "https://api.github.com/users/yue4u/followers", "following_url": "https://api.github.com/users/yue4u/following{/other_user}", "gists_url": "https://api.github.com/users/yue4u/gists{/gist_id}", "starred_url": "https://api.github.com/users/yue4u/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yue4u/subscriptions", "organizations_url": "https://api.github.com/users/yue4u/orgs", "repos_url": "https://api.github.com/users/yue4u/repos", "events_url": "https://api.github.com/users/yue4u/events{/privacy}", "received_events_url": "https://api.github.com/users/yue4u/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yue4u", "id": 26110087, "node_id": "MDQ6VXNlcjI2MTEwMDg3", "avatar_url": "https://avatars.githubusercontent.com/u/26110087?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yue4u", "html_url": "https://github.com/yue4u", "followers_url": "https://api.github.com/users/yue4u/followers", "following_url": "https://api.github.com/users/yue4u/following{/other_user}", "gists_url": "https://api.github.com/users/yue4u/gists{/gist_id}", "starred_url": "https://api.github.com/users/yue4u/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yue4u/subscriptions", "organizations_url": "https://api.github.com/users/yue4u/orgs", "repos_url": "https://api.github.com/users/yue4u/repos", "events_url": "https://api.github.com/users/yue4u/events{/privacy}", "received_events_url": "https://api.github.com/users/yue4u/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb90bf9cad41c971bc71b5fbbfe3df4eac70f0c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb90bf9cad41c971bc71b5fbbfe3df4eac70f0c1", "html_url": "https://github.com/rust-lang/rust/commit/fb90bf9cad41c971bc71b5fbbfe3df4eac70f0c1"}], "stats": {"total": 8, "additions": 3, "deletions": 5}, "files": [{"sha": "2bc64e77a38fab09ee93751d616ab6b1c6240242", "filename": "crates/ide_assists/src/handlers/convert_while_to_loop.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/79b4e67b4ffdbdb58ad5b02398fd174e929609f8/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_while_to_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79b4e67b4ffdbdb58ad5b02398fd174e929609f8/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_while_to_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_while_to_loop.rs?ref=79b4e67b4ffdbdb58ad5b02398fd174e929609f8", "patch": "@@ -42,11 +42,8 @@ pub(crate) fn convert_while_to_loop(acc: &mut Assists, ctx: &AssistContext) -> O\n     let while_expr = while_kw.parent().and_then(ast::WhileExpr::cast)?;\n     let while_body = while_expr.loop_body()?;\n     let while_cond = while_expr.condition()?;\n+    let while_cond_expr = while_cond.expr()?;\n \n-    let if_cond = match while_cond.pat() {\n-        Some(_) => while_expr.condition()?,\n-        None => make::condition(invert_boolean_expression(while_cond.expr()?), None),\n-    };\n     let target = while_expr.syntax().text_range();\n     acc.add(\n         AssistId(\"convert_while_to_loop\", AssistKind::RefactorRewrite),\n@@ -60,11 +57,12 @@ pub(crate) fn convert_while_to_loop(acc: &mut Assists, ctx: &AssistContext) -> O\n                     .indent(while_indent_level);\n             let block_expr = match while_cond.pat() {\n                 Some(_) => {\n-                    let if_expr = make::expr_if(if_cond, while_body, Some(break_block.into()));\n+                    let if_expr = make::expr_if(while_cond, while_body, Some(break_block.into()));\n                     let stmts = once(make::expr_stmt(if_expr).into());\n                     make::block_expr(stmts, None)\n                 }\n                 None => {\n+                    let if_cond = make::condition(invert_boolean_expression(while_cond_expr), None);\n                     let if_expr = make::expr_if(if_cond, break_block, None);\n                     let stmts =\n                         once(make::expr_stmt(if_expr).into()).chain(while_body.statements());"}]}