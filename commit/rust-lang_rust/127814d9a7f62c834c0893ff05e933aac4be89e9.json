{"sha": "127814d9a7f62c834c0893ff05e933aac4be89e9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyNzgxNGQ5YTdmNjJjODM0YzA4OTNmZjA1ZTkzM2FhYzRiZTg5ZTk=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-09-07T22:35:20Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-09-07T22:35:20Z"}, "message": "nested mod completion", "tree": {"sha": "412432e0308c8b22b28e3b84776b44b311b283da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/412432e0308c8b22b28e3b84776b44b311b283da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/127814d9a7f62c834c0893ff05e933aac4be89e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/127814d9a7f62c834c0893ff05e933aac4be89e9", "html_url": "https://github.com/rust-lang/rust/commit/127814d9a7f62c834c0893ff05e933aac4be89e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/127814d9a7f62c834c0893ff05e933aac4be89e9/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff1c82216cc05f2621a301e30ab7a1102dea9d2b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff1c82216cc05f2621a301e30ab7a1102dea9d2b", "html_url": "https://github.com/rust-lang/rust/commit/ff1c82216cc05f2621a301e30ab7a1102dea9d2b"}], "stats": {"total": 114, "additions": 68, "deletions": 46}, "files": [{"sha": "52df6fd10a3daf9f74c71876beba57d0bd872a9b", "filename": "crates/libeditor/src/completion.rs", "status": "modified", "additions": 41, "deletions": 17, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/127814d9a7f62c834c0893ff05e933aac4be89e9/crates%2Flibeditor%2Fsrc%2Fcompletion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/127814d9a7f62c834c0893ff05e933aac4be89e9/crates%2Flibeditor%2Fsrc%2Fcompletion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibeditor%2Fsrc%2Fcompletion.rs?ref=127814d9a7f62c834c0893ff05e933aac4be89e9", "patch": "@@ -2,7 +2,7 @@ use std::collections::{HashSet, HashMap};\n \n use libsyntax2::{\n     File, TextUnit, AstNode, SyntaxNodeRef, SyntaxKind::*,\n-    ast::{self, LoopBodyOwner},\n+    ast::{self, LoopBodyOwner, ModuleItemOwner},\n     algo::{\n         ancestors,\n         visit::{visitor, Visitor, visitor_ctx, VisitorCtx},\n@@ -58,22 +58,34 @@ fn complete_name_ref(file: &File, name_ref: ast::NameRef, acc: &mut Vec<Completi\n     if !is_node::<ast::Path>(name_ref.syntax()) {\n         return;\n     }\n-    if let Some(fn_def) = ancestors(name_ref.syntax()).filter_map(ast::FnDef::cast).next() {\n-        complete_expr_keywords(&file, fn_def, name_ref, acc);\n-        let scopes = FnScopes::new(fn_def);\n-        complete_fn(name_ref, &scopes, acc);\n-    }\n-    if let Some(root) = ancestors(name_ref.syntax()).filter_map(ast::Root::cast).next() {\n-        let scope = ModuleScope::new(root);\n-        acc.extend(\n-            scope.entries().iter()\n-                .filter(|entry| entry.syntax() != name_ref.syntax())\n-                .map(|entry| CompletionItem {\n-                    label: entry.name().to_string(),\n-                    lookup: None,\n-                    snippet: None,\n-                })\n-        );\n+    let mut visited_fn = false;\n+    for node in ancestors(name_ref.syntax()) {\n+        if let Some(items) = visitor()\n+            .visit::<ast::Root, _>(|it| Some(it.items()))\n+            .visit::<ast::Module, _>(|it| Some(it.item_list()?.items()))\n+            .accept(node) {\n+            if let Some(items) = items {\n+                let scope = ModuleScope::new(items);\n+                acc.extend(\n+                    scope.entries().iter()\n+                        .filter(|entry| entry.syntax() != name_ref.syntax())\n+                        .map(|entry| CompletionItem {\n+                            label: entry.name().to_string(),\n+                            lookup: None,\n+                            snippet: None,\n+                        })\n+                );\n+            }\n+            break;\n+\n+        } else if !visited_fn {\n+            if let Some(fn_def) = ast::FnDef::cast(node) {\n+                visited_fn = true;\n+                complete_expr_keywords(&file, fn_def, name_ref, acc);\n+                let scopes = FnScopes::new(fn_def);\n+                complete_fn(name_ref, &scopes, acc);\n+            }\n+        }\n     }\n }\n \n@@ -299,6 +311,18 @@ mod tests {\n             \", r#\"[]\"#);\n     }\n \n+    #[test]\n+    fn test_completion_mod_scope_nested() {\n+        check_scope_completion(r\"\n+            struct Foo;\n+            mod m {\n+                struct Bar;\n+                fn quux() { <|> }\n+            }\n+            \", r#\"[CompletionItem { label: \"Bar\", lookup: None, snippet: None },\n+                   CompletionItem { label: \"quux\", lookup: None, snippet: None }]\"#);\n+    }\n+\n     #[test]\n     fn test_complete_type() {\n         check_scope_completion(r\""}, {"sha": "0ec56a206d449692930e1c1cfe1c1957164439c2", "filename": "crates/libeditor/src/scope/mod_scope.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/127814d9a7f62c834c0893ff05e933aac4be89e9/crates%2Flibeditor%2Fsrc%2Fscope%2Fmod_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/127814d9a7f62c834c0893ff05e933aac4be89e9/crates%2Flibeditor%2Fsrc%2Fscope%2Fmod_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibeditor%2Fsrc%2Fscope%2Fmod_scope.rs?ref=127814d9a7f62c834c0893ff05e933aac4be89e9", "patch": "@@ -1,5 +1,6 @@\n use libsyntax2::{\n-    AstNode, SyntaxNode, SyntaxNodeRef, SmolStr, ast\n+    AstNode, SyntaxNode, SyntaxNodeRef, SmolStr,\n+    ast::{self, AstChildren},\n };\n \n pub struct ModuleScope {\n@@ -16,9 +17,9 @@ enum EntryKind {\n }\n \n impl ModuleScope {\n-    pub fn new(m: ast::Root) -> ModuleScope {\n+    pub fn new(items: AstChildren<ast::ModuleItem>) -> ModuleScope {\n         let mut entries = Vec::new();\n-        for item in m.items() {\n+        for item in items {\n             let entry = match item {\n                 ast::ModuleItem::StructDef(item) => Entry::new(item),\n                 ast::ModuleItem::EnumDef(item) => Entry::new(item),\n@@ -85,11 +86,11 @@ fn collect_imports(tree: ast::UseTree, acc: &mut Vec<Entry>) {\n #[cfg(test)]\n mod tests {\n     use super::*;\n-    use libsyntax2::File;\n+    use libsyntax2::{File, ast::ModuleItemOwner};\n \n     fn do_check(code: &str, expected: &[&str]) {\n         let file = File::parse(&code);\n-        let scope = ModuleScope::new(file.ast());\n+        let scope = ModuleScope::new(file.ast().items());\n         let actual = scope.entries\n             .iter()\n             .map(|it| it.name())"}, {"sha": "c945c094abdd623ca6b3c6f40e99c65c525749dc", "filename": "crates/libsyntax2/src/ast/generated.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/127814d9a7f62c834c0893ff05e933aac4be89e9/crates%2Flibsyntax2%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/127814d9a7f62c834c0893ff05e933aac4be89e9/crates%2Flibsyntax2%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fast%2Fgenerated.rs?ref=127814d9a7f62c834c0893ff05e933aac4be89e9", "patch": "@@ -699,11 +699,8 @@ impl<'a> AstNode<'a> for ItemList<'a> {\n }\n \n impl<'a> ast::FnDefOwner<'a> for ItemList<'a> {}\n-impl<'a> ItemList<'a> {\n-    pub fn items(self) -> impl Iterator<Item = ModuleItem<'a>> + 'a {\n-        super::children(self)\n-    }\n-}\n+impl<'a> ast::ModuleItemOwner<'a> for ItemList<'a> {}\n+impl<'a> ItemList<'a> {}\n \n // Label\n #[derive(Debug, Clone, Copy)]\n@@ -979,7 +976,6 @@ impl<'a> AstNode<'a> for Module<'a> {\n \n impl<'a> ast::NameOwner<'a> for Module<'a> {}\n impl<'a> ast::AttrsOwner<'a> for Module<'a> {}\n-impl<'a> ast::FnDefOwner<'a> for Module<'a> {}\n impl<'a> Module<'a> {pub fn item_list(self) -> Option<ItemList<'a>> {\n         super::child_opt(self)\n     }\n@@ -1616,12 +1612,9 @@ impl<'a> AstNode<'a> for Root<'a> {\n     fn syntax(self) -> SyntaxNodeRef<'a> { self.syntax }\n }\n \n+impl<'a> ast::ModuleItemOwner<'a> for Root<'a> {}\n impl<'a> ast::FnDefOwner<'a> for Root<'a> {}\n impl<'a> Root<'a> {\n-    pub fn items(self) -> impl Iterator<Item = ModuleItem<'a>> + 'a {\n-        super::children(self)\n-    }\n-\n     pub fn modules(self) -> impl Iterator<Item = Module<'a>> + 'a {\n         super::children(self)\n     }"}, {"sha": "a6da8295770ad9c44ad317baf92ac18fea525e94", "filename": "crates/libsyntax2/src/ast/mod.rs", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/127814d9a7f62c834c0893ff05e933aac4be89e9/crates%2Flibsyntax2%2Fsrc%2Fast%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/127814d9a7f62c834c0893ff05e933aac4be89e9/crates%2Flibsyntax2%2Fsrc%2Fast%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fast%2Fmod.rs?ref=127814d9a7f62c834c0893ff05e933aac4be89e9", "patch": "@@ -36,7 +36,13 @@ pub trait ArgListOwner<'a>: AstNode<'a> {\n }\n \n pub trait FnDefOwner<'a>: AstNode<'a> {\n-    fn functions(self) -> AstNodeChildren<'a, FnDef<'a>> {\n+    fn functions(self) -> AstChildren<'a, FnDef<'a>> {\n+        children(self)\n+    }\n+}\n+\n+pub trait ModuleItemOwner<'a>: AstNode<'a> {\n+    fn items(self) -> AstChildren<'a, ModuleItem<'a>> {\n         children(self)\n     }\n }\n@@ -52,7 +58,7 @@ pub trait TypeParamsOwner<'a>: AstNode<'a> {\n }\n \n pub trait AttrsOwner<'a>: AstNode<'a> {\n-    fn attrs(self) -> AstNodeChildren<'a, Attr<'a>> {\n+    fn attrs(self) -> AstChildren<'a, Attr<'a>> {\n         children(self)\n     }\n }\n@@ -158,7 +164,7 @@ impl<'a> IfExpr<'a> {\n     pub fn else_branch(self) -> Option<Block<'a>> {\n         self.blocks().nth(1)\n     }\n-    fn blocks(self) -> AstNodeChildren<'a, Block<'a>> {\n+    fn blocks(self) -> AstChildren<'a, Block<'a>> {\n         children(self)\n     }\n }\n@@ -167,27 +173,27 @@ fn child_opt<'a, P: AstNode<'a>, C: AstNode<'a>>(parent: P) -> Option<C> {\n     children(parent).next()\n }\n \n-fn children<'a, P: AstNode<'a>, C: AstNode<'a>>(parent: P) -> AstNodeChildren<'a, C> {\n-    AstNodeChildren::new(parent.syntax())\n+fn children<'a, P: AstNode<'a>, C: AstNode<'a>>(parent: P) -> AstChildren<'a, C> {\n+    AstChildren::new(parent.syntax())\n }\n \n \n #[derive(Debug)]\n-pub struct AstNodeChildren<'a, N> {\n+pub struct AstChildren<'a, N> {\n     inner: SyntaxNodeChildren<RefRoot<'a>>,\n     ph: PhantomData<N>,\n }\n \n-impl<'a, N> AstNodeChildren<'a, N> {\n+impl<'a, N> AstChildren<'a, N> {\n     fn new(parent: SyntaxNodeRef<'a>) -> Self {\n-        AstNodeChildren {\n+        AstChildren {\n             inner: parent.children(),\n             ph: PhantomData,\n         }\n     }\n }\n \n-impl<'a, N: AstNode<'a>> Iterator for AstNodeChildren<'a, N> {\n+impl<'a, N: AstNode<'a>> Iterator for AstChildren<'a, N> {\n     type Item = N;\n     fn next(&mut self) -> Option<N> {\n         loop {"}, {"sha": "77ae4c7db2d08fd6af9933be453361ba7d6c8bd6", "filename": "crates/libsyntax2/src/grammar.ron", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/127814d9a7f62c834c0893ff05e933aac4be89e9/crates%2Flibsyntax2%2Fsrc%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/127814d9a7f62c834c0893ff05e933aac4be89e9/crates%2Flibsyntax2%2Fsrc%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fgrammar.ron?ref=127814d9a7f62c834c0893ff05e933aac4be89e9", "patch": "@@ -238,9 +238,8 @@ Grammar(\n     ],\n     ast: {\n         \"Root\": (\n-            traits: [ \"FnDefOwner\" ],\n+            traits: [ \"ModuleItemOwner\", \"FnDefOwner\" ],\n             collections: [\n-                [\"items\", \"ModuleItem\"],\n                 [\"modules\", \"Module\"],\n             ]\n         ),\n@@ -271,12 +270,11 @@ Grammar(\n         ] ),\n         \"TraitDef\": ( traits: [\"NameOwner\", \"AttrsOwner\"] ),\n         \"Module\": (\n-            traits: [\"NameOwner\", \"AttrsOwner\", \"FnDefOwner\" ],\n+            traits: [\"NameOwner\", \"AttrsOwner\" ],\n             options: [ \"ItemList\" ]\n         ),\n         \"ItemList\": (\n-            traits: [ \"FnDefOwner\" ],\n-            collections: [ [\"items\", \"ModuleItem\"] ]\n+            traits: [ \"FnDefOwner\", \"ModuleItemOwner\" ],\n         ),\n         \"ConstDef\": ( traits: [\n             \"NameOwner\","}]}