{"sha": "5d5999ab13e849c66f39b23a685512110e0d8eee", "node_id": "C_kwDOAAsO6NoAKDVkNTk5OWFiMTNlODQ5YzY2ZjM5YjIzYTY4NTUxMjExMGUwZDhlZWU", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-14T12:06:37Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-14T17:00:35Z"}, "message": "make cache consistency checks into regular debug assertions", "tree": {"sha": "b29f515613e73081602f365398879097aa41b28c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b29f515613e73081602f365398879097aa41b28c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d5999ab13e849c66f39b23a685512110e0d8eee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d5999ab13e849c66f39b23a685512110e0d8eee", "html_url": "https://github.com/rust-lang/rust/commit/5d5999ab13e849c66f39b23a685512110e0d8eee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d5999ab13e849c66f39b23a685512110e0d8eee/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "efc76af1342c55fde2f0bb316f126cd96558fc76", "url": "https://api.github.com/repos/rust-lang/rust/commits/efc76af1342c55fde2f0bb316f126cd96558fc76", "html_url": "https://github.com/rust-lang/rust/commit/efc76af1342c55fde2f0bb316f126cd96558fc76"}], "stats": {"total": 16, "additions": 7, "deletions": 9}, "files": [{"sha": "a2a880f8e308c60fc095cbc8fda34788b6d20cfd", "filename": "Cargo.toml", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d5999ab13e849c66f39b23a685512110e0d8eee/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/5d5999ab13e849c66f39b23a685512110e0d8eee/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=5d5999ab13e849c66f39b23a685512110e0d8eee", "patch": "@@ -54,8 +54,6 @@ harness = false\n \n [features]\n default = [\"stack-cache\"]\n-# Will be enabled on CI via `--all-features`.\n-expensive-debug-assertions = []\n stack-cache = []\n \n [profile.dev]"}, {"sha": "68da8addc2c8721db912a9608d15983e5e9755ab", "filename": "ci.sh", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5d5999ab13e849c66f39b23a685512110e0d8eee/ci.sh", "raw_url": "https://github.com/rust-lang/rust/raw/5d5999ab13e849c66f39b23a685512110e0d8eee/ci.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ci.sh?ref=5d5999ab13e849c66f39b23a685512110e0d8eee", "patch": "@@ -5,11 +5,11 @@ set -x\n # Determine configuration\n export RUSTFLAGS=\"-D warnings -C debug-assertions -C debuginfo=1\"\n export CARGO_INCREMENTAL=0\n-export CARGO_EXTRA_FLAGS=\"--all-features\" # in particular, expensive-debug-assertions\n+export CARGO_EXTRA_FLAGS=\"--all-features\"\n \n # Prepare\n echo \"Build and install miri\"\n-CARGO_EXTRA_FLAGS=\"\" ./miri install # implicitly locked -- and the *installed* Miri does *not* get the expensive-debug-assertions feature\n+RUSTFLAGS=\"\" ./miri install # implicitly locked, and explicitly without debug assertions\n ./miri build --all-targets --locked # the build that all the `./miri test` below will use\n echo\n "}, {"sha": "bc7ffd4faea55bd8588a32a69bcf809617723fc2", "filename": "src/stacked_borrows/stack.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5d5999ab13e849c66f39b23a685512110e0d8eee/src%2Fstacked_borrows%2Fstack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d5999ab13e849c66f39b23a685512110e0d8eee/src%2Fstacked_borrows%2Fstack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows%2Fstack.rs?ref=5d5999ab13e849c66f39b23a685512110e0d8eee", "patch": "@@ -82,7 +82,7 @@ impl<'tcx> Stack {\n     /// Panics if any of the caching mechanisms have broken,\n     /// - The StackCache indices don't refer to the parallel items,\n     /// - There are no Unique items outside of first_unique..last_unique\n-    #[cfg(feature = \"expensive-debug-assertions\")]\n+    #[cfg(debug_assertions)]\n     fn verify_cache_consistency(&self) {\n         // Only a full cache needs to be valid. Also see the comments in find_granting_cache\n         // and set_unknown_bottom.\n@@ -115,7 +115,7 @@ impl<'tcx> Stack {\n         tag: SbTagExtra,\n         exposed_tags: &FxHashSet<SbTag>,\n     ) -> Result<Option<usize>, ()> {\n-        #[cfg(feature = \"expensive-debug-assertions\")]\n+        #[cfg(debug_assertions)]\n         self.verify_cache_consistency();\n \n         let SbTagExtra::Concrete(tag) = tag else {\n@@ -247,7 +247,7 @@ impl<'tcx> Stack {\n         // This primes the cache for the next access, which is almost always the just-added tag.\n         self.cache.add(new_idx, new);\n \n-        #[cfg(feature = \"expensive-debug-assertions\")]\n+        #[cfg(debug_assertions)]\n         self.verify_cache_consistency();\n     }\n \n@@ -325,7 +325,7 @@ impl<'tcx> Stack {\n             self.unique_range.end = self.unique_range.end.min(disable_start + 1);\n         }\n \n-        #[cfg(feature = \"expensive-debug-assertions\")]\n+        #[cfg(debug_assertions)]\n         self.verify_cache_consistency();\n \n         Ok(())\n@@ -380,7 +380,7 @@ impl<'tcx> Stack {\n             self.unique_range = 0..0;\n         }\n \n-        #[cfg(feature = \"expensive-debug-assertions\")]\n+        #[cfg(debug_assertions)]\n         self.verify_cache_consistency();\n         Ok(())\n     }"}]}