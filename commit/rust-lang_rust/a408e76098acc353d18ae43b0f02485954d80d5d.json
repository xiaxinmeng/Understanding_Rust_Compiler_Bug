{"sha": "a408e76098acc353d18ae43b0f02485954d80d5d", "node_id": "C_kwDOAAsO6NoAKGE0MDhlNzYwOThhY2MzNTNkMThhZTQzYjBmMDI0ODU5NTRkODBkNWQ", "commit": {"author": {"name": "koka", "email": "koka.code@gmail.com", "date": "2023-02-01T10:17:39Z"}, "committer": {"name": "koka", "email": "koka.code@gmail.com", "date": "2023-02-01T10:17:39Z"}, "message": "Suggest the correct variable name for `manual_let_else`", "tree": {"sha": "0399391b8b62d54c81416803b0c614123d0d49ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0399391b8b62d54c81416803b0c614123d0d49ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a408e76098acc353d18ae43b0f02485954d80d5d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCAAdFiEEhMJg5A6fhFMEoE5LbBJqIM8JYewFAmPaPcAACgkQbBJqIM8J\nYewveAv+MIHUuVkYpHevVy5hxP/c+g0WQrQ1dhj6FVVJ0oOfQqaibE68VN4tg0V/\ngZJIEJm/xpG3xsJZDoLZ05SSqEuymes6V1hdFUUlVtPKXczw/4YgxBwXrH71ZioD\noFzf3maNkmnlfQuSD0mywhH4B5Fk6MwTw3MDgzRXWNBe97fg+2XcYBKXAxIXm0XV\ninnyiLzMYumwS2vp+h7pVbGox5bvazcAxJy6qRKiSgJkZdQHkyft0Jm9nGf4vZhi\nmabMI8NRaAsVveTFy8xFr3UhHa9AngNBoHgXKxvow5lI25PyhGnLuzYpBlO7OdiD\nZCGtf/a3TBIknNI2oobblsdTXM4zXu4o6nWRI7sujMX+AS7sgwxO3MAlQXnuGOEg\nNfMiAQVQqWFf1ea9fNIl4LOtIVg0mm1NOHqbMpjotxoO2hGJ07Z6jWHSjmaE6Urw\netARqqUvfE8nyae3b34CtspYf+cz97j/IXSEpf873cnDIbW7jt6EUA4CCr9186si\nDAHHU2dO\n=649o\n-----END PGP SIGNATURE-----", "payload": "tree 0399391b8b62d54c81416803b0c614123d0d49ef\nparent 75d76806c1e1598aa1ba9117e5dcbce72026b862\nauthor koka <koka.code@gmail.com> 1675246659 +0900\ncommitter koka <koka.code@gmail.com> 1675246659 +0900\n\nSuggest the correct variable name for `manual_let_else`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a408e76098acc353d18ae43b0f02485954d80d5d", "html_url": "https://github.com/rust-lang/rust/commit/a408e76098acc353d18ae43b0f02485954d80d5d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a408e76098acc353d18ae43b0f02485954d80d5d/comments", "author": {"login": "koka831", "id": 14945055, "node_id": "MDQ6VXNlcjE0OTQ1MDU1", "avatar_url": "https://avatars.githubusercontent.com/u/14945055?v=4", "gravatar_id": "", "url": "https://api.github.com/users/koka831", "html_url": "https://github.com/koka831", "followers_url": "https://api.github.com/users/koka831/followers", "following_url": "https://api.github.com/users/koka831/following{/other_user}", "gists_url": "https://api.github.com/users/koka831/gists{/gist_id}", "starred_url": "https://api.github.com/users/koka831/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/koka831/subscriptions", "organizations_url": "https://api.github.com/users/koka831/orgs", "repos_url": "https://api.github.com/users/koka831/repos", "events_url": "https://api.github.com/users/koka831/events{/privacy}", "received_events_url": "https://api.github.com/users/koka831/received_events", "type": "User", "site_admin": false}, "committer": {"login": "koka831", "id": 14945055, "node_id": "MDQ6VXNlcjE0OTQ1MDU1", "avatar_url": "https://avatars.githubusercontent.com/u/14945055?v=4", "gravatar_id": "", "url": "https://api.github.com/users/koka831", "html_url": "https://github.com/koka831", "followers_url": "https://api.github.com/users/koka831/followers", "following_url": "https://api.github.com/users/koka831/following{/other_user}", "gists_url": "https://api.github.com/users/koka831/gists{/gist_id}", "starred_url": "https://api.github.com/users/koka831/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/koka831/subscriptions", "organizations_url": "https://api.github.com/users/koka831/orgs", "repos_url": "https://api.github.com/users/koka831/repos", "events_url": "https://api.github.com/users/koka831/events{/privacy}", "received_events_url": "https://api.github.com/users/koka831/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75d76806c1e1598aa1ba9117e5dcbce72026b862", "url": "https://api.github.com/repos/rust-lang/rust/commits/75d76806c1e1598aa1ba9117e5dcbce72026b862", "html_url": "https://github.com/rust-lang/rust/commit/75d76806c1e1598aa1ba9117e5dcbce72026b862"}], "stats": {"total": 95, "additions": 52, "deletions": 43}, "files": [{"sha": "4d53a664fa0d72445e72199be3ee494e3dfaf7d4", "filename": "clippy_lints/src/manual_let_else.rs", "status": "modified", "additions": 34, "deletions": 25, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/a408e76098acc353d18ae43b0f02485954d80d5d/clippy_lints%2Fsrc%2Fmanual_let_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a408e76098acc353d18ae43b0f02485954d80d5d/clippy_lints%2Fsrc%2Fmanual_let_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_let_else.rs?ref=a408e76098acc353d18ae43b0f02485954d80d5d", "patch": "@@ -68,29 +68,21 @@ impl_lint_pass!(ManualLetElse => [MANUAL_LET_ELSE]);\n \n impl<'tcx> LateLintPass<'tcx> for ManualLetElse {\n     fn check_stmt(&mut self, cx: &LateContext<'_>, stmt: &'tcx Stmt<'tcx>) {\n-        let if_let_or_match = if_chain! {\n-            if self.msrv.meets(msrvs::LET_ELSE);\n-            if !in_external_macro(cx.sess(), stmt.span);\n-            if let StmtKind::Local(local) = stmt.kind;\n-            if let Some(init) = local.init;\n-            if local.els.is_none();\n-            if local.ty.is_none();\n-            if init.span.ctxt() == stmt.span.ctxt();\n-            if let Some(if_let_or_match) = IfLetOrMatch::parse(cx, init);\n-            then {\n-                if_let_or_match\n-            } else {\n-                return;\n-            }\n-        };\n-\n+        if self.msrv.meets(msrvs::LET_ELSE) &&\n+            !in_external_macro(cx.sess(), stmt.span) &&\n+            let StmtKind::Local(local) = stmt.kind &&\n+            let Some(init) = local.init &&\n+            local.els.is_none() &&\n+            local.ty.is_none() &&\n+            init.span.ctxt() == stmt.span.ctxt() &&\n+            let Some(if_let_or_match) = IfLetOrMatch::parse(cx, init) {\n         match if_let_or_match {\n             IfLetOrMatch::IfLet(if_let_expr, let_pat, if_then, if_else) => if_chain! {\n                 if expr_is_simple_identity(let_pat, if_then);\n                 if let Some(if_else) = if_else;\n                 if expr_diverges(cx, if_else);\n                 then {\n-                    emit_manual_let_else(cx, stmt.span, if_let_expr, let_pat, if_else);\n+                    emit_manual_let_else(cx, stmt.span, if_let_expr, local.pat, let_pat, if_else);\n                 }\n             },\n             IfLetOrMatch::Match(match_expr, arms, source) => {\n@@ -120,15 +112,23 @@ impl<'tcx> LateLintPass<'tcx> for ManualLetElse {\n                     return;\n                 }\n \n-                emit_manual_let_else(cx, stmt.span, match_expr, pat_arm.pat, diverging_arm.body);\n+                emit_manual_let_else(cx, stmt.span, match_expr, local.pat, pat_arm.pat, diverging_arm.body);\n             },\n         }\n+        };\n     }\n \n     extract_msrv_attr!(LateContext);\n }\n \n-fn emit_manual_let_else(cx: &LateContext<'_>, span: Span, expr: &Expr<'_>, pat: &Pat<'_>, else_body: &Expr<'_>) {\n+fn emit_manual_let_else(\n+    cx: &LateContext<'_>,\n+    span: Span,\n+    expr: &Expr<'_>,\n+    local: &Pat<'_>,\n+    pat: &Pat<'_>,\n+    else_body: &Expr<'_>,\n+) {\n     span_lint_and_then(\n         cx,\n         MANUAL_LET_ELSE,\n@@ -137,12 +137,11 @@ fn emit_manual_let_else(cx: &LateContext<'_>, span: Span, expr: &Expr<'_>, pat:\n         |diag| {\n             // This is far from perfect, for example there needs to be:\n             // * mut additions for the bindings\n-            // * renamings of the bindings\n+            // * renamings of the bindings for `PatKind::Or`\n             // * unused binding collision detection with existing ones\n             // * putting patterns with at the top level | inside ()\n             // for this to be machine applicable.\n             let mut app = Applicability::HasPlaceholders;\n-            let (sn_pat, _) = snippet_with_context(cx, pat.span, span.ctxt(), \"\", &mut app);\n             let (sn_expr, _) = snippet_with_context(cx, expr.span, span.ctxt(), \"\", &mut app);\n             let (sn_else, _) = snippet_with_context(cx, else_body.span, span.ctxt(), \"\", &mut app);\n \n@@ -151,10 +150,20 @@ fn emit_manual_let_else(cx: &LateContext<'_>, span: Span, expr: &Expr<'_>, pat:\n             } else {\n                 format!(\"{{ {sn_else} }}\")\n             };\n-            let sn_bl = if matches!(pat.kind, PatKind::Or(..)) {\n-                format!(\"({sn_pat})\")\n-            } else {\n-                sn_pat.into_owned()\n+            let sn_bl = match pat.kind {\n+                PatKind::Or(..) => {\n+                    let (sn_pat, _) = snippet_with_context(cx, pat.span, span.ctxt(), \"\", &mut app);\n+                    format!(\"({sn_pat})\")\n+                },\n+                PatKind::TupleStruct(ref w, ..) => {\n+                    let sn_wrapper = cx.sess().source_map().span_to_snippet(w.span()).unwrap_or_default();\n+                    let (sn_inner, _) = snippet_with_context(cx, local.span, span.ctxt(), \"\", &mut app);\n+                    format!(\"{sn_wrapper}({sn_inner})\")\n+                },\n+                _ => {\n+                    let (sn_pat, _) = snippet_with_context(cx, pat.span, span.ctxt(), \"\", &mut app);\n+                    sn_pat.into_owned()\n+                },\n             };\n             let sugg = format!(\"let {sn_bl} = {sn_expr} else {else_bl};\");\n             diag.span_suggestion(span, \"consider writing\", sugg, app);"}, {"sha": "fe45cfd25b64dd24fca9b04c6724ffb42e8da8db", "filename": "tests/ui/manual_let_else.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/a408e76098acc353d18ae43b0f02485954d80d5d/tests%2Fui%2Fmanual_let_else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a408e76098acc353d18ae43b0f02485954d80d5d/tests%2Fui%2Fmanual_let_else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_let_else.stderr?ref=a408e76098acc353d18ae43b0f02485954d80d5d", "patch": "@@ -2,7 +2,7 @@ error: this could be rewritten as `let...else`\n   --> $DIR/manual_let_else.rs:18:5\n    |\n LL |     let v = if let Some(v_some) = g() { v_some } else { return };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider writing: `let Some(v_some) = g() else { return };`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider writing: `let Some(v) = g() else { return };`\n    |\n    = note: `-D clippy::manual-let-else` implied by `-D warnings`\n \n@@ -18,7 +18,7 @@ LL | |     };\n    |\n help: consider writing\n    |\n-LL ~     let Some(v_some) = g() else {\n+LL ~     let Some(v) = g() else {\n LL +         return;\n LL +     };\n    |\n@@ -48,19 +48,19 @@ error: this could be rewritten as `let...else`\n   --> $DIR/manual_let_else.rs:38:9\n    |\n LL |         let v = if let Some(v_some) = g() { v_some } else { continue };\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider writing: `let Some(v_some) = g() else { continue };`\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider writing: `let Some(v) = g() else { continue };`\n \n error: this could be rewritten as `let...else`\n   --> $DIR/manual_let_else.rs:39:9\n    |\n LL |         let v = if let Some(v_some) = g() { v_some } else { break };\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider writing: `let Some(v_some) = g() else { break };`\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider writing: `let Some(v) = g() else { break };`\n \n error: this could be rewritten as `let...else`\n   --> $DIR/manual_let_else.rs:43:5\n    |\n LL |     let v = if let Some(v_some) = g() { v_some } else { panic!() };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider writing: `let Some(v_some) = g() else { panic!() };`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider writing: `let Some(v) = g() else { panic!() };`\n \n error: this could be rewritten as `let...else`\n   --> $DIR/manual_let_else.rs:46:5\n@@ -74,7 +74,7 @@ LL | |     };\n    |\n help: consider writing\n    |\n-LL ~     let Some(v_some) = g() else {\n+LL ~     let Some(v) = g() else {\n LL +         std::process::abort()\n LL +     };\n    |\n@@ -91,7 +91,7 @@ LL | |     };\n    |\n help: consider writing\n    |\n-LL ~     let Some(v_some) = g() else {\n+LL ~     let Some(v) = g() else {\n LL +         if true { return } else { panic!() }\n LL +     };\n    |\n@@ -109,7 +109,7 @@ LL | |     };\n    |\n help: consider writing\n    |\n-LL ~     let Some(v_some) = g() else {\n+LL ~     let Some(v) = g() else {\n LL +         if true {}\n LL +         panic!();\n LL +     };\n@@ -129,7 +129,7 @@ LL | |     };\n    |\n help: consider writing\n    |\n-LL ~     let Some(v_some) = g() else {\n+LL ~     let Some(v) = g() else {\n LL +         match () {\n LL +             _ if panic!() => {},\n LL +             _ => panic!(),\n@@ -141,7 +141,7 @@ error: this could be rewritten as `let...else`\n   --> $DIR/manual_let_else.rs:80:5\n    |\n LL |     let v = if let Some(v_some) = g() { v_some } else { if panic!() {} };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider writing: `let Some(v_some) = g() else { if panic!() {} };`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider writing: `let Some(v) = g() else { if panic!() {} };`\n \n error: this could be rewritten as `let...else`\n   --> $DIR/manual_let_else.rs:83:5\n@@ -157,7 +157,7 @@ LL | |     };\n    |\n help: consider writing\n    |\n-LL ~     let Some(v_some) = g() else {\n+LL ~     let Some(v) = g() else {\n LL +         match panic!() {\n LL +             _ => {},\n LL +         }\n@@ -178,7 +178,7 @@ LL | |     };\n    |\n help: consider writing\n    |\n-LL ~     let Some(v_some) = g() else { if true {\n+LL ~     let Some(v) = g() else { if true {\n LL +         return;\n LL +     } else {\n LL +         panic!(\"diverge\");\n@@ -199,7 +199,7 @@ LL | |     };\n    |\n help: consider writing\n    |\n-LL ~     let Some(v_some) = g() else {\n+LL ~     let Some(v) = g() else {\n LL +         match (g(), g()) {\n LL +             (Some(_), None) => return,\n LL +             (None, Some(_)) => {\n@@ -226,7 +226,7 @@ LL | |     };\n    |\n help: consider writing\n    |\n-LL ~     let Some(v_some) = g().map(|v| (v, 42)) else {\n+LL ~     let Some((v, w)) = g().map(|v| (v, 42)) else {\n LL +         return;\n LL +     };\n    |\n@@ -252,7 +252,7 @@ error: this could be rewritten as `let...else`\n   --> $DIR/manual_let_else.rs:134:13\n    |\n LL |             let $n = if let Some(v) = $e { v } else { return };\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider writing: `let Some(v) = g() else { return };`\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider writing: `let Some($n) = g() else { return };`\n ...\n LL |     create_binding_if_some!(w, g());\n    |     ------------------------------- in this macro invocation\n@@ -266,7 +266,7 @@ LL | /     let _ = match ff {\n LL | |         Some(value) => value,\n LL | |         _ => macro_call!(),\n LL | |     };\n-   | |______^ help: consider writing: `let Some(value) = ff else { macro_call!() };`\n+   | |______^ help: consider writing: `let Some(_) = ff else { macro_call!() };`\n \n error: aborting due to 18 previous errors\n "}, {"sha": "867e459830db5a10dffd316f851db56e12a299fe", "filename": "tests/ui/manual_let_else_match.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a408e76098acc353d18ae43b0f02485954d80d5d/tests%2Fui%2Fmanual_let_else_match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a408e76098acc353d18ae43b0f02485954d80d5d/tests%2Fui%2Fmanual_let_else_match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_let_else_match.stderr?ref=a408e76098acc353d18ae43b0f02485954d80d5d", "patch": "@@ -5,7 +5,7 @@ LL | /     let v = match g() {\n LL | |         Some(v_some) => v_some,\n LL | |         None => return,\n LL | |     };\n-   | |______^ help: consider writing: `let Some(v_some) = g() else { return };`\n+   | |______^ help: consider writing: `let Some(v) = g() else { return };`\n    |\n    = note: `-D clippy::manual-let-else` implied by `-D warnings`\n \n@@ -16,7 +16,7 @@ LL | /     let v = match g() {\n LL | |         Some(v_some) => v_some,\n LL | |         _ => return,\n LL | |     };\n-   | |______^ help: consider writing: `let Some(v_some) = g() else { return };`\n+   | |______^ help: consider writing: `let Some(v) = g() else { return };`\n \n error: this could be rewritten as `let...else`\n   --> $DIR/manual_let_else_match.rs:44:9"}]}