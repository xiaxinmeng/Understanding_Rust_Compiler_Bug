{"sha": "e896def412dded3837d72c7c2e48c726ab7e357e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4OTZkZWY0MTJkZGVkMzgzN2Q3MmM3YzJlNDhjNzI2YWI3ZTM1N2U=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-09-14T00:41:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-09-14T00:41:17Z"}, "message": "Merge #10204\n\n10204: feat: Show the type of what is being dereferenced in a deref expression. r=theo-lw a=theo-lw\n\nAddresses issue #10106.\r\n\r\nIn-progress - I'm trying to figure out why `hover_deref_expr_with_coercion` is failing.\n\nCo-authored-by: Teddy_Wang <wangtheo662@gmail.com>", "tree": {"sha": "eea6bfa4e4c469226caa47d4cea324d56a331b91", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eea6bfa4e4c469226caa47d4cea324d56a331b91"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e896def412dded3837d72c7c2e48c726ab7e357e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhP++tCRBK7hj4Ov3rIwAAWLYIADPicUsCp680VGiekyfdUia8\nvW1uJ2UrIc1PPckWZ1k+gW2XQzYaF9fbac9d46+SCWarAP/3LgusvgDRgedaA9qa\nHNriwqb+dcfjpTaYyeZA/Edj39yH1qu4jInyiQ7T+NFxd3t7Lrqr5AMYuxTANvo/\nEP4BGzSJXQWK/TN8OAHXQcrWWso3LjCrWqpwcCIVOcz/UoHpHSrr0E50OkVII2ye\nmKHkBuOVAOgQvdfigL/NOy5Bqiw5gQNblquC5pAvFn5L8PgdN54kYX0znMDNM9ZN\nvz9FtD2vNYQ+QfM9OOurMdFPQxqO1NhF5V0lw55eTXVEB+WkmxVhsl8IdpS3yG8=\n=nng4\n-----END PGP SIGNATURE-----\n", "payload": "tree eea6bfa4e4c469226caa47d4cea324d56a331b91\nparent e08b3bf70bee5b091442d296e36769a67af7d6f1\nparent 8de5d66e25d256ff4949118ef6de56a166408806\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1631580077 +0000\ncommitter GitHub <noreply@github.com> 1631580077 +0000\n\nMerge #10204\n\n10204: feat: Show the type of what is being dereferenced in a deref expression. r=theo-lw a=theo-lw\n\nAddresses issue #10106.\r\n\r\nIn-progress - I'm trying to figure out why `hover_deref_expr_with_coercion` is failing.\n\nCo-authored-by: Teddy_Wang <wangtheo662@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e896def412dded3837d72c7c2e48c726ab7e357e", "html_url": "https://github.com/rust-lang/rust/commit/e896def412dded3837d72c7c2e48c726ab7e357e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e896def412dded3837d72c7c2e48c726ab7e357e/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e08b3bf70bee5b091442d296e36769a67af7d6f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/e08b3bf70bee5b091442d296e36769a67af7d6f1", "html_url": "https://github.com/rust-lang/rust/commit/e08b3bf70bee5b091442d296e36769a67af7d6f1"}, {"sha": "8de5d66e25d256ff4949118ef6de56a166408806", "url": "https://api.github.com/repos/rust-lang/rust/commits/8de5d66e25d256ff4949118ef6de56a166408806", "html_url": "https://github.com/rust-lang/rust/commit/8de5d66e25d256ff4949118ef6de56a166408806"}], "stats": {"total": 136, "additions": 136, "deletions": 0}, "files": [{"sha": "14c0abaaf038db62155eae4b777910fce05a63b1", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 136, "deletions": 0, "changes": 136, "blob_url": "https://github.com/rust-lang/rust/blob/e896def412dded3837d72c7c2e48c726ab7e357e/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e896def412dded3837d72c7c2e48c726ab7e357e/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=e896def412dded3837d72c7c2e48c726ab7e357e", "patch": "@@ -243,6 +243,11 @@ fn hover_ranged(\n     })?;\n     let res = match &expr_or_pat {\n         Either::Left(ast::Expr::TryExpr(try_expr)) => hover_try_expr(sema, config, try_expr),\n+        Either::Left(ast::Expr::PrefixExpr(prefix_expr))\n+            if prefix_expr.op_kind() == Some(ast::UnaryOp::Deref) =>\n+        {\n+            hover_deref_expr(sema, config, prefix_expr)\n+        }\n         _ => None,\n     };\n     let res = res.or_else(|| hover_type_info(sema, config, &expr_or_pat));\n@@ -346,6 +351,70 @@ fn hover_try_expr(\n     Some(res)\n }\n \n+fn hover_deref_expr(\n+    sema: &Semantics<RootDatabase>,\n+    config: &HoverConfig,\n+    deref_expr: &ast::PrefixExpr,\n+) -> Option<HoverResult> {\n+    let inner_ty = sema.type_of_expr(&deref_expr.expr()?)?.original;\n+    let TypeInfo { original, adjusted } =\n+        sema.type_of_expr(&ast::Expr::from(deref_expr.clone()))?;\n+\n+    let mut res = HoverResult::default();\n+    let mut targets: Vec<hir::ModuleDef> = Vec::new();\n+    let mut push_new_def = |item: hir::ModuleDef| {\n+        if !targets.contains(&item) {\n+            targets.push(item);\n+        }\n+    };\n+    walk_and_push_ty(sema.db, &inner_ty, &mut push_new_def);\n+    walk_and_push_ty(sema.db, &original, &mut push_new_def);\n+\n+    res.markup = if let Some(adjusted_ty) = adjusted {\n+        walk_and_push_ty(sema.db, &adjusted_ty, &mut push_new_def);\n+        let original = original.display(sema.db).to_string();\n+        let adjusted = adjusted_ty.display(sema.db).to_string();\n+        let inner = inner_ty.display(sema.db).to_string();\n+        let type_len = \"To type: \".len();\n+        let coerced_len = \"Coerced to: \".len();\n+        let deref_len = \"Dereferenced from: \".len();\n+        let max_len = (original.len() + type_len)\n+            .max(adjusted.len() + coerced_len)\n+            .max(inner.len() + deref_len);\n+        format!(\n+            \"{bt_start}Dereferenced from: {:>ipad$}\\nTo type: {:>apad$}\\nCoerced to: {:>opad$}\\n{bt_end}\",\n+            inner,\n+            original,\n+            adjusted,\n+            ipad = max_len - deref_len,\n+            apad = max_len - type_len,\n+            opad = max_len - coerced_len,\n+            bt_start = if config.markdown() { \"```text\\n\" } else { \"\" },\n+            bt_end = if config.markdown() { \"```\\n\" } else { \"\" }\n+        )\n+        .into()\n+    } else {\n+        let original = original.display(sema.db).to_string();\n+        let inner = inner_ty.display(sema.db).to_string();\n+        let type_len = \"To type: \".len();\n+        let deref_len = \"Dereferenced from: \".len();\n+        let max_len = (original.len() + type_len).max(inner.len() + deref_len);\n+        format!(\n+            \"{bt_start}Dereferenced from: {:>ipad$}\\nTo type: {:>apad$}\\n{bt_end}\",\n+            inner,\n+            original,\n+            ipad = max_len - deref_len,\n+            apad = max_len - type_len,\n+            bt_start = if config.markdown() { \"```text\\n\" } else { \"\" },\n+            bt_end = if config.markdown() { \"```\\n\" } else { \"\" }\n+        )\n+        .into()\n+    };\n+    res.actions.push(HoverAction::goto_type_from_targets(sema.db, targets));\n+\n+    Some(res)\n+}\n+\n fn hover_type_info(\n     sema: &Semantics<RootDatabase>,\n     config: &HoverConfig,\n@@ -4647,4 +4716,71 @@ fn foo() -> Option<()> {\n                 ```\"#]],\n         );\n     }\n+\n+    #[test]\n+    fn hover_deref_expr() {\n+        check_hover_range(\n+            r#\"\n+//- minicore: deref\n+use core::ops::Deref;\n+\n+struct DerefExample<T> {\n+    value: T\n+}\n+\n+impl<T> Deref for DerefExample<T> {\n+    type Target = T;\n+\n+    fn deref(&self) -> &Self::Target {\n+        &self.value\n+    }\n+}\n+\n+fn foo() {\n+    let x = DerefExample { value: 0 };\n+    let y: i32 = $0*x$0;\n+}\n+\"#,\n+            expect![[r#\"\n+                ```text\n+                Dereferenced from: DerefExample<i32>\n+                To type:                         i32\n+                ```\n+            \"#]],\n+        );\n+    }\n+\n+    #[test]\n+    fn hover_deref_expr_with_coercion() {\n+        check_hover_range(\n+            r#\"\n+//- minicore: deref\n+use core::ops::Deref;\n+\n+struct DerefExample<T> {\n+    value: T\n+}\n+\n+impl<T> Deref for DerefExample<T> {\n+    type Target = T;\n+\n+    fn deref(&self) -> &Self::Target {\n+        &self.value\n+    }\n+}\n+\n+fn foo() {\n+    let x = DerefExample { value: &&&&&0 };\n+    let y: &i32 = $0*x$0;\n+}\n+\"#,\n+            expect![[r#\"\n+                ```text\n+                Dereferenced from: DerefExample<&&&&&i32>\n+                To type:                         &&&&&i32\n+                Coerced to:                          &i32\n+                ```\n+            \"#]],\n+        );\n+    }\n }"}]}