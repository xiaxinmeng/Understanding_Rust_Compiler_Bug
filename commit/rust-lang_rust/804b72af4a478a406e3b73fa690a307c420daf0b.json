{"sha": "804b72af4a478a406e3b73fa690a307c420daf0b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwNGI3MmFmNGE0NzhhNDA2ZTNiNzNmYTY5MGEzMDdjNDIwZGFmMGI=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-11-26T19:05:54Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-12-12T13:38:13Z"}, "message": "If tidy isn't installed, only give one error, not many", "tree": {"sha": "1e81a4930d956363a64b0cac332dedbe0d233abf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e81a4930d956363a64b0cac332dedbe0d233abf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/804b72af4a478a406e3b73fa690a307c420daf0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/804b72af4a478a406e3b73fa690a307c420daf0b", "html_url": "https://github.com/rust-lang/rust/commit/804b72af4a478a406e3b73fa690a307c420daf0b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/804b72af4a478a406e3b73fa690a307c420daf0b/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "409382dd3cd9113757c11d3af2c509dac2edf8f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/409382dd3cd9113757c11d3af2c509dac2edf8f2", "html_url": "https://github.com/rust-lang/rust/commit/409382dd3cd9113757c11d3af2c509dac2edf8f2"}], "stats": {"total": 41, "additions": 22, "deletions": 19}, "files": [{"sha": "55d25fa7c52c247faa9f1a345be784c40cbff266", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/804b72af4a478a406e3b73fa690a307c420daf0b/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/804b72af4a478a406e3b73fa690a307c420daf0b/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=804b72af4a478a406e3b73fa690a307c420daf0b", "patch": "@@ -327,6 +327,9 @@ pub struct Config {\n     /// created in `/<build_base>/rustfix_missing_coverage.txt`\n     pub rustfix_coverage: bool,\n \n+    /// whether to run `tidy` when a rustdoc test fails\n+    pub has_tidy: bool,\n+\n     // Configuration for various run-make tests frobbing things like C compilers\n     // or querying about various LLVM component information.\n     pub cc: String,"}, {"sha": "c63bbaf70d3c14cced5e2d7080eba585da930d3f", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/804b72af4a478a406e3b73fa690a307c420daf0b/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/804b72af4a478a406e3b73fa690a307c420daf0b/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=804b72af4a478a406e3b73fa690a307c420daf0b", "patch": "@@ -14,7 +14,7 @@ use std::ffi::OsString;\n use std::fs;\n use std::io::{self, ErrorKind};\n use std::path::{Path, PathBuf};\n-use std::process::Command;\n+use std::process::{Command, Stdio};\n use std::time::SystemTime;\n use test::ColorConfig;\n use tracing::*;\n@@ -43,6 +43,10 @@ fn main() {\n         panic!(\"Can't find Valgrind to run Valgrind tests\");\n     }\n \n+    if !config.has_tidy && config.mode == Mode::Rustdoc {\n+        eprintln!(\"warning: `tidy` is not installed; generated diffs will be harder to read\");\n+    }\n+\n     log_config(&config);\n     run_tests(config);\n }\n@@ -189,6 +193,11 @@ pub fn parse_config(args: Vec<String>) -> Config {\n \n     let src_base = opt_path(matches, \"src-base\");\n     let run_ignored = matches.opt_present(\"ignored\");\n+    let has_tidy = Command::new(\"tidy\")\n+        .arg(\"--version\")\n+        .stdout(Stdio::null())\n+        .status()\n+        .map_or(false, |status| status.success());\n     Config {\n         bless: matches.opt_present(\"bless\"),\n         compile_lib_path: make_absolute(opt_path(matches, \"compile-lib-path\")),\n@@ -244,6 +253,7 @@ pub fn parse_config(args: Vec<String>) -> Config {\n         remote_test_client: matches.opt_str(\"remote-test-client\").map(PathBuf::from),\n         compare_mode: matches.opt_str(\"compare-mode\").map(CompareMode::parse),\n         rustfix_coverage: matches.opt_present(\"rustfix-coverage\"),\n+        has_tidy,\n \n         cc: matches.opt_str(\"cc\").unwrap(),\n         cxx: matches.opt_str(\"cxx\").unwrap(),"}, {"sha": "d43e75248eb48b8bed36cc64befd085d8ee1dcf8", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 8, "deletions": 18, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/804b72af4a478a406e3b73fa690a307c420daf0b/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/804b72af4a478a406e3b73fa690a307c420daf0b/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=804b72af4a478a406e3b73fa690a307c420daf0b", "patch": "@@ -2409,32 +2409,22 @@ impl<'test> TestCx<'test> {\n             \"-modify\",\n         ];\n         let tidy_dir = |dir| {\n-            let tidy = |file: &_| {\n-                let tidy_proc = Command::new(\"tidy\").args(&tidy_args).arg(file).spawn();\n-                match tidy_proc {\n-                    Ok(mut proc) => {\n-                        proc.wait().unwrap();\n-                        true\n-                    }\n-                    Err(err) => {\n-                        eprintln!(\"failed to run tidy - is it installed? - {}\", err);\n-                        false\n-                    }\n-                }\n-            };\n             for entry in walkdir::WalkDir::new(dir) {\n                 let entry = entry.expect(\"failed to read file\");\n                 if entry.file_type().is_file()\n                     && entry.path().extension().and_then(|p| p.to_str()) == Some(\"html\".into())\n                 {\n-                    if !tidy(entry.path()) {\n-                        return;\n-                    }\n+                    let status =\n+                        Command::new(\"tidy\").args(&tidy_args).arg(entry.path()).status().unwrap();\n+                    // `tidy` returns 1 if it modified the file.\n+                    assert!(status.success() || status.code() == Some(1));\n                 }\n             }\n         };\n-        tidy_dir(out_dir);\n-        tidy_dir(&compare_dir);\n+        if self.config.has_tidy {\n+            tidy_dir(out_dir);\n+            tidy_dir(&compare_dir);\n+        }\n \n         let pager = {\n             let output = Command::new(\"git\").args(&[\"config\", \"--get\", \"core.pager\"]).output().ok();"}]}