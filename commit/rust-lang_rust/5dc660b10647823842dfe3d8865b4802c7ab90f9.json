{"sha": "5dc660b10647823842dfe3d8865b4802c7ab90f9", "node_id": "C_kwDOAAsO6NoAKDVkYzY2MGIxMDY0NzgyMzg0MmRmZTNkODg2NWI0ODAyYzdhYjkwZjk", "commit": {"author": {"name": "antoyo", "email": "antoyo@users.noreply.github.com", "date": "2022-01-26T13:57:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-26T13:57:17Z"}, "message": "Support upgrading the alignment of a global variable (#121)\n\n* Renable failing test\r\n* Update to newest gccjit.rs", "tree": {"sha": "4a78991985fc292569fc632e6b33551c757d174f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a78991985fc292569fc632e6b33551c757d174f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5dc660b10647823842dfe3d8865b4802c7ab90f9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh8VM9CRBK7hj4Ov3rIwAAc1kIABXiVWEqzzZFk39C4iyPhbly\nJGbU0E1kF1BUn1qUnZ7kOh6vhrHT8FFuBaxxFeNcxfbZ3ju8WJl32fJ8/I7m+EfB\nB8PZhAYn7nox0gygoZG/Izgd2wd3kBP9pRAVsRzmqc07Uh34gPC5Mfn+56FIrQeA\nrVDLQIUHdp3bQ5pTEjQOXJLJqVK262VAegYZRVBWTO22diTdmUPSYlDm2R4z0Zxd\ngOuUZ481qqf8GL1C7JVMpDlA/a6Pd6GWMSiYKrhEsKLnXh7ZTZfW0/5aqijyKvsF\nm86em2oJN82uD+w/d5HWvMJLc5qYE2/uF/tovZ0jH3uvLtBg5vvdfcfPZkV3D8k=\n=sE3C\n-----END PGP SIGNATURE-----\n", "payload": "tree 4a78991985fc292569fc632e6b33551c757d174f\nparent fc236785a27478aab61b79270a4837658ee14eaa\nauthor antoyo <antoyo@users.noreply.github.com> 1643205437 -0500\ncommitter GitHub <noreply@github.com> 1643205437 -0500\n\nSupport upgrading the alignment of a global variable (#121)\n\n* Renable failing test\r\n* Update to newest gccjit.rs"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5dc660b10647823842dfe3d8865b4802c7ab90f9", "html_url": "https://github.com/rust-lang/rust/commit/5dc660b10647823842dfe3d8865b4802c7ab90f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5dc660b10647823842dfe3d8865b4802c7ab90f9/comments", "author": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc236785a27478aab61b79270a4837658ee14eaa", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc236785a27478aab61b79270a4837658ee14eaa", "html_url": "https://github.com/rust-lang/rust/commit/fc236785a27478aab61b79270a4837658ee14eaa"}], "stats": {"total": 39, "additions": 15, "deletions": 24}, "files": [{"sha": "2688ea4a4e14cca2e1d04ee4c09f9d0b76525288", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5dc660b10647823842dfe3d8865b4802c7ab90f9/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/5dc660b10647823842dfe3d8865b4802c7ab90f9/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=5dc660b10647823842dfe3d8865b4802c7ab90f9", "patch": "@@ -41,15 +41,15 @@ dependencies = [\n [[package]]\n name = \"gccjit\"\n version = \"1.0.0\"\n-source = \"git+https://github.com/antoyo/gccjit.rs#0672b78d162d65b6f36ea4062947253affe9fdef\"\n+source = \"git+https://github.com/antoyo/gccjit.rs#e68fce53af18dce4d40e6b7090f881ff86a2e892\"\n dependencies = [\n  \"gccjit_sys\",\n ]\n \n [[package]]\n name = \"gccjit_sys\"\n version = \"0.0.1\"\n-source = \"git+https://github.com/antoyo/gccjit.rs#0672b78d162d65b6f36ea4062947253affe9fdef\"\n+source = \"git+https://github.com/antoyo/gccjit.rs#e68fce53af18dce4d40e6b7090f881ff86a2e892\"\n dependencies = [\n  \"libc 0.1.12\",\n ]"}, {"sha": "ee5ba449fb8e6bb0ee310eea54ac65a01ec8842a", "filename": "patches/0023-core-Ignore-failing-tests.patch", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5dc660b10647823842dfe3d8865b4802c7ab90f9/patches%2F0023-core-Ignore-failing-tests.patch", "raw_url": "https://github.com/rust-lang/rust/raw/5dc660b10647823842dfe3d8865b4802c7ab90f9/patches%2F0023-core-Ignore-failing-tests.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/patches%2F0023-core-Ignore-failing-tests.patch?ref=5dc660b10647823842dfe3d8865b4802c7ab90f9", "patch": "@@ -46,24 +46,4 @@ index 4bc44e9..8e3c7a4 100644\n  \n  #[test]\n  fn cell_allows_array_cycle() {\n-diff --git a/library/core/tests/slice.rs b/library/core/tests/slice.rs\n-index 3e00e0a..8e5663b 100644\n---- a/library/core/tests/slice.rs\n-+++ b/library/core/tests/slice.rs\n-@@ -2108,6 +2108,7 @@ fn test_copy_within_panics_src_out_of_bounds() {\n-     bytes.copy_within(usize::MAX..=usize::MAX, 0);\n- }\n- \n-+/*\n- #[test]\n- fn test_is_sorted() {\n-     let empty: [i32; 0] = [];\n-@@ -2122,6 +2123,7 @@ fn test_is_sorted() {\n-     assert!(![\"c\", \"bb\", \"aaa\"].is_sorted());\n-     assert!([\"c\", \"bb\", \"aaa\"].is_sorted_by_key(|s| s.len()));\n- }\n-+*/\n- \n- #[test]\n- fn test_slice_run_destructors() {\n -- 2.21.0 (Apple Git-122)"}, {"sha": "af00539f89b5fd0fb0238585e9b9a4a467adbd3a", "filename": "src/consts.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5dc660b10647823842dfe3d8865b4802c7ab90f9/src%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dc660b10647823842dfe3d8865b4802c7ab90f9/src%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconsts.rs?ref=5dc660b10647823842dfe3d8865b4802c7ab90f9", "patch": "@@ -35,7 +35,12 @@ impl<'gcc, 'tcx> StaticMethods for CodegenCx<'gcc, 'tcx> {\n         // following:\n         for (value, variable) in &*self.const_globals.borrow() {\n             if format!(\"{:?}\", value) == format!(\"{:?}\", cv) {\n-                // TODO(antoyo): upgrade alignment.\n+                if let Some(global_variable) = self.global_lvalues.borrow().get(variable) {\n+                    let alignment = align.bits() as i32;\n+                    if alignment > global_variable.get_alignment() {\n+                        global_variable.set_alignment(alignment);\n+                    }\n+                }\n                 return *variable;\n             }\n         }\n@@ -182,7 +187,9 @@ impl<'gcc, 'tcx> CodegenCx<'gcc, 'tcx> {\n         // globally.\n         global.global_set_initializer_rvalue(cv);\n         // TODO(antoyo): set unnamed address.\n-        global.get_address(None)\n+        let rvalue = global.get_address(None);\n+        self.global_lvalues.borrow_mut().insert(rvalue, global);\n+        rvalue\n     }\n \n     pub fn get_static(&self, def_id: DefId) -> LValue<'gcc> {"}, {"sha": "d260a9833470e9d63e30a24160c917b1da68b56d", "filename": "src/context.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5dc660b10647823842dfe3d8865b4802c7ab90f9/src%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dc660b10647823842dfe3d8865b4802c7ab90f9/src%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcontext.rs?ref=5dc660b10647823842dfe3d8865b4802c7ab90f9", "patch": "@@ -83,6 +83,9 @@ pub struct CodegenCx<'gcc, 'tcx> {\n \n     /// Cache of emitted const globals (value -> global)\n     pub const_globals: RefCell<FxHashMap<RValue<'gcc>, RValue<'gcc>>>,\n+    /// Map from the address of a global variable (rvalue) to the global variable itself (lvalue).\n+    /// TODO(antoyo): remove when the rustc API is fixed.\n+    pub global_lvalues: RefCell<FxHashMap<RValue<'gcc>, LValue<'gcc>>>,\n \n     /// Cache of constant strings,\n     pub const_cstr_cache: RefCell<FxHashMap<Symbol, LValue<'gcc>>>,\n@@ -195,6 +198,7 @@ impl<'gcc, 'tcx> CodegenCx<'gcc, 'tcx> {\n             function_instances: Default::default(),\n             vtables: Default::default(),\n             const_globals: Default::default(),\n+            global_lvalues: Default::default(),\n             const_cstr_cache: Default::default(),\n             globals: Default::default(),\n             scalar_types: Default::default(),"}]}