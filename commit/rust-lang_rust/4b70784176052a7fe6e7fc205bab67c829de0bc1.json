{"sha": "4b70784176052a7fe6e7fc205bab67c829de0bc1", "node_id": "C_kwDOAAsO6NoAKDRiNzA3ODQxNzYwNTJhN2ZlNmU3ZmMyMDViYWI2N2M4MjlkZTBiYzE", "commit": {"author": {"name": "TheOddGarlic", "email": "umutinanerdogan@pm.me", "date": "2022-08-27T19:48:18Z"}, "committer": {"name": "mejrs", "email": "", "date": "2022-12-17T18:08:24Z"}, "message": "Migrate lower range bound diagnostics", "tree": {"sha": "6f570a70242bb7bea718d747e57017d9939efc58", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6f570a70242bb7bea718d747e57017d9939efc58"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b70784176052a7fe6e7fc205bab67c829de0bc1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b70784176052a7fe6e7fc205bab67c829de0bc1", "html_url": "https://github.com/rust-lang/rust/commit/4b70784176052a7fe6e7fc205bab67c829de0bc1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b70784176052a7fe6e7fc205bab67c829de0bc1/comments", "author": {"login": "AsyaTheAbove", "id": 40492846, "node_id": "MDQ6VXNlcjQwNDkyODQ2", "avatar_url": "https://avatars.githubusercontent.com/u/40492846?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AsyaTheAbove", "html_url": "https://github.com/AsyaTheAbove", "followers_url": "https://api.github.com/users/AsyaTheAbove/followers", "following_url": "https://api.github.com/users/AsyaTheAbove/following{/other_user}", "gists_url": "https://api.github.com/users/AsyaTheAbove/gists{/gist_id}", "starred_url": "https://api.github.com/users/AsyaTheAbove/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AsyaTheAbove/subscriptions", "organizations_url": "https://api.github.com/users/AsyaTheAbove/orgs", "repos_url": "https://api.github.com/users/AsyaTheAbove/repos", "events_url": "https://api.github.com/users/AsyaTheAbove/events{/privacy}", "received_events_url": "https://api.github.com/users/AsyaTheAbove/received_events", "type": "User", "site_admin": false}, "committer": {}, "parents": [{"sha": "513e3995e0d0e72690ad6eae925217cfc83b3eb3", "url": "https://api.github.com/repos/rust-lang/rust/commits/513e3995e0d0e72690ad6eae925217cfc83b3eb3", "html_url": "https://github.com/rust-lang/rust/commit/513e3995e0d0e72690ad6eae925217cfc83b3eb3"}], "stats": {"total": 53, "additions": 29, "deletions": 24}, "files": [{"sha": "6bfab0774feae2e900922f2c2e3b7a992ff730ec", "filename": "compiler/rustc_error_messages/locales/en-US/mir_build.ftl", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4b70784176052a7fe6e7fc205bab67c829de0bc1/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmir_build.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/4b70784176052a7fe6e7fc205bab67c829de0bc1/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmir_build.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmir_build.ftl?ref=4b70784176052a7fe6e7fc205bab67c829de0bc1", "patch": "@@ -200,3 +200,10 @@ mir_build_const_pattern_depends_on_generic_parameter =\n     constant pattern depends on a generic parameter\n \n mir_build_could_not_eval_const_pattern = could not evaluate constant pattern\n+\n+mir_build_lower_range_bound_must_be_less_than_or_equal_to_upper =\n+    lower range bound must be less than or equal to upper\n+    .label = lower bound larger than upper bound\n+    .teach_note = When matching against a range, the compiler verifies that the range is non-empty. Range patterns include both end-points, so this is equivalent to requiring the start of the range to be less than or equal to the end of the range.\n+\n+mir_build_lower_range_bound_must_be_less_than_upper = lower range bound must be less than upper"}, {"sha": "96728970c5be014c3a573259ff874813748dfc38", "filename": "compiler/rustc_mir_build/src/errors.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4b70784176052a7fe6e7fc205bab67c829de0bc1/compiler%2Frustc_mir_build%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b70784176052a7fe6e7fc205bab67c829de0bc1/compiler%2Frustc_mir_build%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Ferrors.rs?ref=4b70784176052a7fe6e7fc205bab67c829de0bc1", "patch": "@@ -480,3 +480,20 @@ pub struct CouldNotEvalConstPattern {\n     #[primary_span]\n     pub span: Span,\n }\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(mir_build::lower_range_bound_must_be_less_than_or_equal_to_upper, code = \"E0030\")]\n+pub struct LowerRangeBoundMustBeLessThanOrEqualToUpper {\n+    #[primary_span]\n+    #[label]\n+    pub span: Span,\n+    #[note(mir_build::teach_note)]\n+    pub teach: Option<()>,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(mir_build::lower_range_bound_must_be_less_than_upper, code = \"E0579\")]\n+pub struct LowerRangeBoundMustBeLessThanUpper {\n+    #[primary_span]\n+    pub span: Span,\n+}"}, {"sha": "b7d1dc8c956567d510f5cdd2a8c226be04bf98e8", "filename": "compiler/rustc_mir_build/src/thir/pattern/mod.rs", "status": "modified", "additions": 5, "deletions": 24, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/4b70784176052a7fe6e7fc205bab67c829de0bc1/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b70784176052a7fe6e7fc205bab67c829de0bc1/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs?ref=4b70784176052a7fe6e7fc205bab67c829de0bc1", "patch": "@@ -11,7 +11,7 @@ pub(crate) use self::usefulness::MatchCheckCtxt;\n use crate::errors::*;\n use crate::thir::util::UserAnnotatedTyHelpers;\n \n-use rustc_errors::struct_span_err;\n+use rustc_errors::error_code;\n use rustc_hir as hir;\n use rustc_hir::def::{CtorOf, DefKind, Res};\n use rustc_hir::pat_util::EnumerateAndAdjustIterator;\n@@ -141,13 +141,7 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n             }\n             // `x..y` where `x >= y`. The range is empty => error.\n             (RangeEnd::Excluded, _) => {\n-                struct_span_err!(\n-                    self.tcx.sess,\n-                    span,\n-                    E0579,\n-                    \"lower range bound must be less than upper\"\n-                )\n-                .emit();\n+                self.tcx.sess.emit_err(LowerRangeBoundMustBeLessThanUpper { span });\n                 PatKind::Wild\n             }\n             // `x..=y` where `x == y`.\n@@ -158,23 +152,10 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n             }\n             // `x..=y` where `x > y` hence the range is empty => error.\n             (RangeEnd::Included, _) => {\n-                let mut err = struct_span_err!(\n-                    self.tcx.sess,\n+                self.tcx.sess.emit_err(LowerRangeBoundMustBeLessThanOrEqualToUpper {\n                     span,\n-                    E0030,\n-                    \"lower range bound must be less than or equal to upper\"\n-                );\n-                err.span_label(span, \"lower bound larger than upper bound\");\n-                if self.tcx.sess.teach(&err.get_code().unwrap()) {\n-                    err.note(\n-                        \"When matching against a range, the compiler \\\n-                              verifies that the range is non-empty. Range \\\n-                              patterns include both end-points, so this is \\\n-                              equivalent to requiring the start of the range \\\n-                              to be less than or equal to the end of the range.\",\n-                    );\n-                }\n-                err.emit();\n+                    teach: if self.tcx.sess.teach(&error_code!(E0030)) { Some(()) } else { None },\n+                });\n                 PatKind::Wild\n             }\n         }"}]}