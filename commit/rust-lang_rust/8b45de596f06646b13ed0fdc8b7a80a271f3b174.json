{"sha": "8b45de596f06646b13ed0fdc8b7a80a271f3b174", "node_id": "C_kwDOAAsO6NoAKDhiNDVkZTU5NmYwNjY0NmIxM2VkMGZkYzhiN2E4MGEyNzFmM2IxNzQ", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-10-01T10:20:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-01T10:20:06Z"}, "message": "Merge #10411\n\n10411: fix: Parenthesize expressions in `if_to_bool_then` assist where required r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "4cce387d8cbdbec2631589f998060a19b4d04353", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4cce387d8cbdbec2631589f998060a19b4d04353"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b45de596f06646b13ed0fdc8b7a80a271f3b174", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhVuDWCRBK7hj4Ov3rIwAAUJkIAGrR67cwIlxR5xTNo6W6gqxi\nHJjOOg9MRwYRXt5OMJ30MME0d24Z7PiWi6AUvs2MlMh3eh4ehQ1U0T+LS0QfI17K\nzG5dD1OrpIovyon4r8g9diCWPcKjLzoHBM92SVp3LHEfMTeXpg5QF37HCmm3iFV7\nD7U2OUcX8sni4eA6i90wQVjMpqhil1II7t6hhdPLvqViJi2sRyaBDNNBKLOejx32\n5dRXH5zLljxBVhiaSYFriUC1g1GBXQhNds227gWonBCmrM+o64NI8lcXHXQzThv7\nIsZtkhxF2YMU+AABBkfzY6SByqfi82PDaTZBBXZX4RZfZqYGMwQDYQDgey30W58=\n=gfyO\n-----END PGP SIGNATURE-----\n", "payload": "tree 4cce387d8cbdbec2631589f998060a19b4d04353\nparent c30a6a297489703af4ecf6689e7f5dea0754a689\nparent 816fafd99733c4f11bac05a17ad5416dee49db8c\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1633083606 +0000\ncommitter GitHub <noreply@github.com> 1633083606 +0000\n\nMerge #10411\n\n10411: fix: Parenthesize expressions in `if_to_bool_then` assist where required r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b45de596f06646b13ed0fdc8b7a80a271f3b174", "html_url": "https://github.com/rust-lang/rust/commit/8b45de596f06646b13ed0fdc8b7a80a271f3b174", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b45de596f06646b13ed0fdc8b7a80a271f3b174/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c30a6a297489703af4ecf6689e7f5dea0754a689", "url": "https://api.github.com/repos/rust-lang/rust/commits/c30a6a297489703af4ecf6689e7f5dea0754a689", "html_url": "https://github.com/rust-lang/rust/commit/c30a6a297489703af4ecf6689e7f5dea0754a689"}, {"sha": "816fafd99733c4f11bac05a17ad5416dee49db8c", "url": "https://api.github.com/repos/rust-lang/rust/commits/816fafd99733c4f11bac05a17ad5416dee49db8c", "html_url": "https://github.com/rust-lang/rust/commit/816fafd99733c4f11bac05a17ad5416dee49db8c"}], "stats": {"total": 24, "additions": 23, "deletions": 1}, "files": [{"sha": "b8c55eb852f4520eb7ff519ea707dc63bfc27cee", "filename": "crates/ide_assists/src/handlers/convert_bool_then.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8b45de596f06646b13ed0fdc8b7a80a271f3b174/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_bool_then.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b45de596f06646b13ed0fdc8b7a80a271f3b174/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_bool_then.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_bool_then.rs?ref=8b45de596f06646b13ed0fdc8b7a80a271f3b174", "patch": "@@ -39,7 +39,7 @@ use crate::{\n // }\n // ```\n pub(crate) fn convert_if_to_bool_then(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n-    // todo, applies to match as well\n+    // FIXME applies to match as well\n     let expr = ctx.find_node_at_offset::<ast::IfExpr>()?;\n     if !expr.if_token()?.text_range().contains_inclusive(ctx.offset()) {\n         return None;\n@@ -101,7 +101,29 @@ pub(crate) fn convert_if_to_bool_then(acc: &mut Assists, ctx: &AssistContext) ->\n                 e => e,\n             };\n \n+            let parenthesize = matches!(\n+                cond,\n+                ast::Expr::BinExpr(_)\n+                    | ast::Expr::BlockExpr(_)\n+                    | ast::Expr::BoxExpr(_)\n+                    | ast::Expr::BreakExpr(_)\n+                    | ast::Expr::CastExpr(_)\n+                    | ast::Expr::ClosureExpr(_)\n+                    | ast::Expr::ContinueExpr(_)\n+                    | ast::Expr::ForExpr(_)\n+                    | ast::Expr::IfExpr(_)\n+                    | ast::Expr::LoopExpr(_)\n+                    | ast::Expr::MacroCall(_)\n+                    | ast::Expr::MatchExpr(_)\n+                    | ast::Expr::PrefixExpr(_)\n+                    | ast::Expr::RangeExpr(_)\n+                    | ast::Expr::RefExpr(_)\n+                    | ast::Expr::ReturnExpr(_)\n+                    | ast::Expr::WhileExpr(_)\n+                    | ast::Expr::YieldExpr(_)\n+            );\n             let cond = if invert_cond { invert_boolean_expression(cond) } else { cond };\n+            let cond = if parenthesize { make::expr_paren(cond) } else { cond };\n             let arg_list = make::arg_list(Some(make::expr_closure(None, closure_body)));\n             let mcall = make::expr_method_call(cond, make::name_ref(\"then\"), arg_list);\n             builder.replace(target, mcall.to_string());"}]}