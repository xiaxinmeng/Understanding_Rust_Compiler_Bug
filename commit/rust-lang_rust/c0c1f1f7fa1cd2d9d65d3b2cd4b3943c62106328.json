{"sha": "c0c1f1f7fa1cd2d9d65d3b2cd4b3943c62106328", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwYzFmMWY3ZmExY2QyZDlkNjVkM2IyY2Q0YjM5NDNjNjIxMDYzMjg=", "commit": {"author": {"name": "Giorgio Gambino", "email": "gambnio.giorgio@gmail.com", "date": "2018-10-29T21:23:45Z"}, "committer": {"name": "Giorgio Gambino", "email": "gambnio.giorgio@gmail.com", "date": "2018-10-29T21:23:45Z"}, "message": " Fix #3335 rev2: bool_comparison triggers 3 times on same code", "tree": {"sha": "669bd6aff43205b729dcbcef544b3a8f172cc947", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/669bd6aff43205b729dcbcef544b3a8f172cc947"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0c1f1f7fa1cd2d9d65d3b2cd4b3943c62106328", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0c1f1f7fa1cd2d9d65d3b2cd4b3943c62106328", "html_url": "https://github.com/rust-lang/rust/commit/c0c1f1f7fa1cd2d9d65d3b2cd4b3943c62106328", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0c1f1f7fa1cd2d9d65d3b2cd4b3943c62106328/comments", "author": null, "committer": null, "parents": [{"sha": "62f16803e8abb176279d3160f0287ad0f0575105", "url": "https://api.github.com/repos/rust-lang/rust/commits/62f16803e8abb176279d3160f0287ad0f0575105", "html_url": "https://github.com/rust-lang/rust/commit/62f16803e8abb176279d3160f0287ad0f0575105"}], "stats": {"total": 101, "additions": 51, "deletions": 50}, "files": [{"sha": "e13f757adb9e69cdf314899adba874f0243c1fac", "filename": "clippy_lints/src/needless_bool.rs", "status": "modified", "additions": 51, "deletions": 50, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/c0c1f1f7fa1cd2d9d65d3b2cd4b3943c62106328/clippy_lints%2Fsrc%2Fneedless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0c1f1f7fa1cd2d9d65d3b2cd4b3943c62106328/clippy_lints%2Fsrc%2Fneedless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_bool.rs?ref=c0c1f1f7fa1cd2d9d65d3b2cd4b3943c62106328", "patch": "@@ -133,56 +133,57 @@ impl LintPass for BoolComparison {\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BoolComparison {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n-        if !in_macro(e.span) {\n-            use self::Expression::*;\n-            if let ExprKind::Binary(Spanned { node: BinOpKind::Eq, .. }, ref left_side, ref right_side) = e.node {\n-                match (fetch_bool_expr(left_side), fetch_bool_expr(right_side)) {\n-                    (Bool(true), Other) => {\n-                        let hint = snippet(cx, right_side.span, \"..\").into_owned();\n-                        span_lint_and_sugg(\n-                            cx,\n-                            BOOL_COMPARISON,\n-                            e.span,\n-                            \"equality checks against true are unnecessary\",\n-                            \"try simplifying it as shown\",\n-                            hint,\n-                        );\n-                    },\n-                    (Other, Bool(true)) => {\n-                        let hint = snippet(cx, left_side.span, \"..\").into_owned();\n-                        span_lint_and_sugg(\n-                            cx,\n-                            BOOL_COMPARISON,\n-                            e.span,\n-                            \"equality checks against true are unnecessary\",\n-                            \"try simplifying it as shown\",\n-                            hint,\n-                        );\n-                    },\n-                    (Bool(false), Other) => {\n-                        let hint = Sugg::hir(cx, right_side, \"..\");\n-                        span_lint_and_sugg(\n-                            cx,\n-                            BOOL_COMPARISON,\n-                            e.span,\n-                            \"equality checks against false can be replaced by a negation\",\n-                            \"try simplifying it as shown\",\n-                            (!hint).to_string(),\n-                        );\n-                    },\n-                    (Other, Bool(false)) => {\n-                        let hint = Sugg::hir(cx, left_side, \"..\");\n-                        span_lint_and_sugg(\n-                            cx,\n-                            BOOL_COMPARISON,\n-                            e.span,\n-                            \"equality checks against false can be replaced by a negation\",\n-                            \"try simplifying it as shown\",\n-                            (!hint).to_string(),\n-                        );\n-                    },\n-                    _ => (),\n-                }\n+        if in_macro(e.span) {\n+            return;\n+        }\n+        use self::Expression::*;\n+        if let ExprKind::Binary(Spanned { node: BinOpKind::Eq, .. }, ref left_side, ref right_side) = e.node {\n+            match (fetch_bool_expr(left_side), fetch_bool_expr(right_side)) {\n+                (Bool(true), Other) => {\n+                    let hint = snippet(cx, right_side.span, \"..\").into_owned();\n+                    span_lint_and_sugg(\n+                        cx,\n+                        BOOL_COMPARISON,\n+                        e.span,\n+                        \"equality checks against true are unnecessary\",\n+                        \"try simplifying it as shown\",\n+                        hint,\n+                    );\n+                },\n+                (Other, Bool(true)) => {\n+                    let hint = snippet(cx, left_side.span, \"..\").into_owned();\n+                    span_lint_and_sugg(\n+                        cx,\n+                        BOOL_COMPARISON,\n+                        e.span,\n+                        \"equality checks against true are unnecessary\",\n+                        \"try simplifying it as shown\",\n+                        hint,\n+                    );\n+                },\n+                (Bool(false), Other) => {\n+                    let hint = Sugg::hir(cx, right_side, \"..\");\n+                    span_lint_and_sugg(\n+                        cx,\n+                        BOOL_COMPARISON,\n+                        e.span,\n+                        \"equality checks against false can be replaced by a negation\",\n+                        \"try simplifying it as shown\",\n+                        (!hint).to_string(),\n+                    );\n+                },\n+                (Other, Bool(false)) => {\n+                    let hint = Sugg::hir(cx, left_side, \"..\");\n+                    span_lint_and_sugg(\n+                        cx,\n+                        BOOL_COMPARISON,\n+                        e.span,\n+                        \"equality checks against false can be replaced by a negation\",\n+                        \"try simplifying it as shown\",\n+                        (!hint).to_string(),\n+                    );\n+                },\n+                _ => (),\n             }\n         }\n     }"}]}