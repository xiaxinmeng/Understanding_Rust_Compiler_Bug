{"sha": "bbb053532e7b678982e9a3f33a64732a963a54fb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiYjA1MzUzMmU3YjY3ODk4MmU5YTNmMzNhNjQ3MzJhOTYzYTU0ZmI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-07-11T12:48:49Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-07-11T12:48:49Z"}, "message": "internal: remove one more needless extern crate", "tree": {"sha": "bb2e3168c56ad8c0ab7e5d5426cee00f73bdf525", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb2e3168c56ad8c0ab7e5d5426cee00f73bdf525"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bbb053532e7b678982e9a3f33a64732a963a54fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bbb053532e7b678982e9a3f33a64732a963a54fb", "html_url": "https://github.com/rust-lang/rust/commit/bbb053532e7b678982e9a3f33a64732a963a54fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bbb053532e7b678982e9a3f33a64732a963a54fb/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dbf11b16da95d72e220ff11f57bd97ece3611361", "url": "https://api.github.com/repos/rust-lang/rust/commits/dbf11b16da95d72e220ff11f57bd97ece3611361", "html_url": "https://github.com/rust-lang/rust/commit/dbf11b16da95d72e220ff11f57bd97ece3611361"}], "stats": {"total": 50, "additions": 22, "deletions": 28}, "files": [{"sha": "1c0380943eaf58e1a555b6e8626227a9d406175d", "filename": "crates/ide/src/doc_links.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbb053532e7b678982e9a3f33a64732a963a54fb/crates%2Fide%2Fsrc%2Fdoc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbb053532e7b678982e9a3f33a64732a963a54fb/crates%2Fide%2Fsrc%2Fdoc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdoc_links.rs?ref=bbb053532e7b678982e9a3f33a64732a963a54fb", "patch": "@@ -113,7 +113,7 @@ pub(crate) fn external_docs(\n     let definition = match_ast! {\n         match node {\n             ast::NameRef(name_ref) => NameRefClass::classify(&sema, &name_ref).map(|d| d.referenced())?,\n-            ast::Name(name) => NameClass::classify(&sema, &name).map(|d| d.referenced_or_defined(sema.db))?,\n+            ast::Name(name) => NameClass::classify(&sema, &name).map(|d| d.referenced_or_defined())?,\n             _ => return None,\n         }\n     };"}, {"sha": "4f6b5e618688d5059346943a47ea4de753faa201", "filename": "crates/ide/src/goto_declaration.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbb053532e7b678982e9a3f33a64732a963a54fb/crates%2Fide%2Fsrc%2Fgoto_declaration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbb053532e7b678982e9a3f33a64732a963a54fb/crates%2Fide%2Fsrc%2Fgoto_declaration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_declaration.rs?ref=bbb053532e7b678982e9a3f33a64732a963a54fb", "patch": "@@ -28,7 +28,7 @@ pub(crate) fn goto_declaration(\n                 name_kind.referenced()\n             },\n             ast::Name(name) => {\n-                NameClass::classify(&sema, &name)?.referenced_or_defined(sema.db)\n+                NameClass::classify(&sema, &name)?.referenced_or_defined()\n             },\n             _ => return None,\n         }"}, {"sha": "d1ad6db2fdd4e29c1f4376ec8b31225c880d55fe", "filename": "crates/ide/src/goto_definition.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbb053532e7b678982e9a3f33a64732a963a54fb/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbb053532e7b678982e9a3f33a64732a963a54fb/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_definition.rs?ref=bbb053532e7b678982e9a3f33a64732a963a54fb", "patch": "@@ -60,12 +60,12 @@ pub(crate) fn goto_definition(\n                 reference_definition(&sema, Either::Right(&name_ref))\n             },\n             ast::Name(name) => {\n-                let def = NameClass::classify(&sema, &name)?.referenced_or_defined(sema.db);\n+                let def = NameClass::classify(&sema, &name)?.referenced_or_defined();\n                 try_find_trait_item_definition(sema.db, &def)\n                     .or_else(|| def.try_to_nav(sema.db))\n             },\n             ast::Lifetime(lt) => if let Some(name_class) = NameClass::classify_lifetime(&sema, &lt) {\n-                let def = name_class.referenced_or_defined(sema.db);\n+                let def = name_class.referenced_or_defined();\n                 def.try_to_nav(sema.db)\n             } else {\n                 reference_definition(&sema, Either::Left(&lt))"}, {"sha": "636642cfe706f1a944e1cabd72ff0d004a0b09b5", "filename": "crates/ide/src/goto_implementation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbb053532e7b678982e9a3f33a64732a963a54fb/crates%2Fide%2Fsrc%2Fgoto_implementation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbb053532e7b678982e9a3f33a64732a963a54fb/crates%2Fide%2Fsrc%2Fgoto_implementation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_implementation.rs?ref=bbb053532e7b678982e9a3f33a64732a963a54fb", "patch": "@@ -29,7 +29,7 @@ pub(crate) fn goto_implementation(\n     let node = sema.find_node_at_offset_with_descend(&syntax, position.offset)?;\n     let def = match &node {\n         ast::NameLike::Name(name) => {\n-            NameClass::classify(&sema, name).map(|class| class.referenced_or_defined(sema.db))\n+            NameClass::classify(&sema, name).map(|class| class.referenced_or_defined())\n         }\n         ast::NameLike::NameRef(name_ref) => {\n             NameRefClass::classify(&sema, name_ref).map(|class| class.referenced())"}, {"sha": "743aa183f78b32b1493bb21bd7f2d5aaaefd9032", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbb053532e7b678982e9a3f33a64732a963a54fb/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbb053532e7b678982e9a3f33a64732a963a54fb/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=bbb053532e7b678982e9a3f33a64732a963a54fb", "patch": "@@ -98,14 +98,14 @@ pub(crate) fn hover(\n             // field pattern shorthands to their definition\n             ast::Name(name) => NameClass::classify(&sema, &name).and_then(|class| match class {\n                 NameClass::ConstReference(def) => Some(def),\n-                def => def.defined(db),\n+                def => def.defined(),\n             }),\n             ast::NameRef(name_ref) => {\n                 NameRefClass::classify(&sema, &name_ref).map(|d| d.referenced())\n             },\n             ast::Lifetime(lifetime) => NameClass::classify_lifetime(&sema, &lifetime).map_or_else(\n                 || NameRefClass::classify_lifetime(&sema, &lifetime).map(|d| d.referenced()),\n-                |d| d.defined(db),\n+                |d| d.defined(),\n             ),\n \n             _ => {"}, {"sha": "fbe79741b393ed3c6a0cfaabd99b21247f512e41", "filename": "crates/ide/src/references.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bbb053532e7b678982e9a3f33a64732a963a54fb/crates%2Fide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbb053532e7b678982e9a3f33a64732a963a54fb/crates%2Fide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences.rs?ref=bbb053532e7b678982e9a3f33a64732a963a54fb", "patch": "@@ -58,7 +58,7 @@ pub(crate) fn find_all_refs(\n \n     let (def, is_literal_search) =\n         if let Some(name) = get_name_of_item_declaration(&syntax, position) {\n-            (NameClass::classify(sema, &name)?.referenced_or_defined(sema.db), true)\n+            (NameClass::classify(sema, &name)?.referenced_or_defined(), true)\n         } else {\n             (find_def(sema, &syntax, position.offset)?, false)\n         };\n@@ -117,14 +117,12 @@ pub(crate) fn find_def(\n ) -> Option<Definition> {\n     let def = match sema.find_node_at_offset_with_descend(syntax, offset)? {\n         ast::NameLike::NameRef(name_ref) => NameRefClass::classify(sema, &name_ref)?.referenced(),\n-        ast::NameLike::Name(name) => {\n-            NameClass::classify(sema, &name)?.referenced_or_defined(sema.db)\n-        }\n+        ast::NameLike::Name(name) => NameClass::classify(sema, &name)?.referenced_or_defined(),\n         ast::NameLike::Lifetime(lifetime) => NameRefClass::classify_lifetime(sema, &lifetime)\n             .map(|class| class.referenced())\n             .or_else(|| {\n                 NameClass::classify_lifetime(sema, &lifetime)\n-                    .map(|class| class.referenced_or_defined(sema.db))\n+                    .map(|class| class.referenced_or_defined())\n             })?,\n     };\n     Some(def)"}, {"sha": "9047d0fb32d6bf6c33457215c584259b6f868f6c", "filename": "crates/ide/src/rename.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bbb053532e7b678982e9a3f33a64732a963a54fb/crates%2Fide%2Fsrc%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbb053532e7b678982e9a3f33a64732a963a54fb/crates%2Fide%2Fsrc%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Frename.rs?ref=bbb053532e7b678982e9a3f33a64732a963a54fb", "patch": "@@ -108,7 +108,7 @@ fn find_definition(\n             bail!(\"Renaming aliases is currently unsupported\")\n         }\n         ast::NameLike::Name(name) => {\n-            NameClass::classify(sema, &name).map(|class| class.referenced_or_defined(sema.db))\n+            NameClass::classify(sema, &name).map(|class| class.referenced_or_defined())\n         }\n         ast::NameLike::NameRef(name_ref) => {\n             if let Some(def) =\n@@ -126,8 +126,7 @@ fn find_definition(\n         ast::NameLike::Lifetime(lifetime) => NameRefClass::classify_lifetime(sema, &lifetime)\n             .map(|class| class.referenced())\n             .or_else(|| {\n-                NameClass::classify_lifetime(sema, &lifetime)\n-                    .map(|it| it.referenced_or_defined(sema.db))\n+                NameClass::classify_lifetime(sema, &lifetime).map(|it| it.referenced_or_defined())\n             }),\n     }\n     .ok_or_else(|| format_err!(\"No references found at position\"))?;"}, {"sha": "e16fe644d5f1280f2ec5e2330f2c1cd0065e6009", "filename": "crates/ide/src/syntax_highlighting/highlight.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bbb053532e7b678982e9a3f33a64732a963a54fb/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbb053532e7b678982e9a3f33a64732a963a54fb/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs?ref=bbb053532e7b678982e9a3f33a64732a963a54fb", "patch": "@@ -46,7 +46,6 @@ pub(super) fn element(\n             };\n \n             match name_kind {\n-                Some(NameClass::ExternCrate(_)) => SymbolKind::Module.into(),\n                 Some(NameClass::Definition(def)) => {\n                     let mut h = highlight_def(db, krate, def) | HlMod::Definition;\n                     if let Definition::ModuleDef(hir::ModuleDef::Trait(trait_)) = &def {"}, {"sha": "76d80886d11637b77899f631da5a6d97031333b8", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_extern_crate.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbb053532e7b678982e9a3f33a64732a963a54fb/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_extern_crate.html", "raw_url": "https://github.com/rust-lang/rust/raw/bbb053532e7b678982e9a3f33a64732a963a54fb/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_extern_crate.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_extern_crate.html?ref=bbb053532e7b678982e9a3f33a64732a963a54fb", "patch": "@@ -39,5 +39,5 @@\n .unresolved_reference { color: #FC5555; text-decoration: wavy underline; }\n </style>\n <pre><code><span class=\"keyword\">extern</span> <span class=\"keyword\">crate</span> <span class=\"module library\">std</span><span class=\"semicolon\">;</span>\n-<span class=\"keyword\">extern</span> <span class=\"keyword\">crate</span> <span class=\"module library\">alloc</span> <span class=\"keyword\">as</span> <span class=\"module\">abc</span><span class=\"semicolon\">;</span>\n+<span class=\"keyword\">extern</span> <span class=\"keyword\">crate</span> <span class=\"module library\">alloc</span> <span class=\"keyword\">as</span> <span class=\"module declaration library\">abc</span><span class=\"semicolon\">;</span>\n </code></pre>\n\\ No newline at end of file"}, {"sha": "eeae055349844bd7df745d91b829031002030503", "filename": "crates/ide_db/src/defs.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bbb053532e7b678982e9a3f33a64732a963a54fb/crates%2Fide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbb053532e7b678982e9a3f33a64732a963a54fb/crates%2Fide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fdefs.rs?ref=bbb053532e7b678982e9a3f33a64732a963a54fb", "patch": "@@ -6,8 +6,8 @@\n // FIXME: this badly needs rename/rewrite (matklad, 2020-02-06).\n \n use hir::{\n-    db::HirDatabase, Crate, Field, GenericParam, HasVisibility, Impl, Label, Local, MacroDef,\n-    Module, ModuleDef, Name, PathResolution, Semantics, Visibility,\n+    Field, GenericParam, HasVisibility, Impl, Label, Local, MacroDef, Module, ModuleDef, Name,\n+    PathResolution, Semantics, Visibility,\n };\n use syntax::{\n     ast::{self, AstNode, PathSegmentKind},\n@@ -108,7 +108,6 @@ impl Definition {\n /// A model special case is `None` constant in pattern.\n #[derive(Debug)]\n pub enum NameClass {\n-    ExternCrate(Crate),\n     Definition(Definition),\n     /// `None` in `if let None = Some(82) {}`.\n     /// Syntactically, it is a name, but semantically it is a reference.\n@@ -124,9 +123,8 @@ pub enum NameClass {\n \n impl NameClass {\n     /// `Definition` defined by this name.\n-    pub fn defined(self, db: &dyn HirDatabase) -> Option<Definition> {\n+    pub fn defined(self) -> Option<Definition> {\n         let res = match self {\n-            NameClass::ExternCrate(krate) => Definition::ModuleDef(krate.root_module(db).into()),\n             NameClass::Definition(it) => it,\n             NameClass::ConstReference(_) => return None,\n             NameClass::PatFieldShorthand { local_def, field_ref: _ } => {\n@@ -137,9 +135,8 @@ impl NameClass {\n     }\n \n     /// `Definition` referenced or defined by this name.\n-    pub fn referenced_or_defined(self, db: &dyn HirDatabase) -> Definition {\n+    pub fn referenced_or_defined(self) -> Definition {\n         match self {\n-            NameClass::ExternCrate(krate) => Definition::ModuleDef(krate.root_module(db).into()),\n             NameClass::Definition(it) | NameClass::ConstReference(it) => it,\n             NameClass::PatFieldShorthand { local_def: _, field_ref } => field_ref,\n         }\n@@ -189,8 +186,9 @@ impl NameClass {\n                         Some(NameClass::Definition(name_ref_class.referenced()))\n                     } else {\n                         let extern_crate = it.syntax().parent().and_then(ast::ExternCrate::cast)?;\n-                        let resolved = sema.resolve_extern_crate(&extern_crate)?;\n-                        Some(NameClass::ExternCrate(resolved))\n+                        let krate = sema.resolve_extern_crate(&extern_crate)?;\n+                        let root_module = krate.root_module(sema.db);\n+                        Some(NameClass::Definition(Definition::ModuleDef(root_module.into())))\n                     }\n                 },\n                 ast::IdentPat(it) => {"}, {"sha": "39aa47fc903d52f4fe6dc4fc92ef1cd0a12b6fbb", "filename": "crates/ide_db/src/items_locator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbb053532e7b678982e9a3f33a64732a963a54fb/crates%2Fide_db%2Fsrc%2Fitems_locator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbb053532e7b678982e9a3f33a64732a963a54fb/crates%2Fide_db%2Fsrc%2Fitems_locator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fitems_locator.rs?ref=bbb053532e7b678982e9a3f33a64732a963a54fb", "patch": "@@ -142,7 +142,7 @@ fn get_name_definition(\n         candidate_node\n     };\n     let name = ast::Name::cast(candidate_name_node)?;\n-    NameClass::classify(sema, &name)?.defined(sema.db)\n+    NameClass::classify(sema, &name)?.defined()\n }\n \n fn is_assoc_item(item: ItemInNs, db: &RootDatabase) -> bool {"}, {"sha": "e2bbabd53c8737d35fd1506fd824e42f19f65cf4", "filename": "crates/ide_diagnostics/src/handlers/incorrect_case.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbb053532e7b678982e9a3f33a64732a963a54fb/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fincorrect_case.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbb053532e7b678982e9a3f33a64732a963a54fb/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fincorrect_case.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fincorrect_case.rs?ref=bbb053532e7b678982e9a3f33a64732a963a54fb", "patch": "@@ -29,7 +29,7 @@ pub(crate) fn incorrect_case(ctx: &DiagnosticsContext<'_>, d: &hir::IncorrectCas\n fn fixes(ctx: &DiagnosticsContext<'_>, d: &hir::IncorrectCase) -> Option<Vec<Assist>> {\n     let root = ctx.sema.db.parse_or_expand(d.file)?;\n     let name_node = d.ident.to_node(&root);\n-    let def = NameClass::classify(&ctx.sema, &name_node)?.defined(ctx.sema.db)?;\n+    let def = NameClass::classify(&ctx.sema, &name_node)?.defined()?;\n \n     let name_node = InFile::new(d.file, name_node.syntax());\n     let frange = name_node.original_file_range(ctx.sema.db);"}]}